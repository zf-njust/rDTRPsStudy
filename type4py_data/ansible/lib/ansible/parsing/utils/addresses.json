{"error": null, "response": {"classes": [], "funcs": [{"docstring": {"func": "Takes a string and returns a (host, port) tuple. If the host is None, then", "long_descr": "the string could not be parsed as a host identifier with an optional port\nspecification. If the port is None, then no port was specified.\n\nThe host identifier may be a hostname (qualified or not), an IPv4 address,\nor an IPv6 address. If allow_ranges is True, then any of those may contain\n[x:y] range specifications, e.g. foo[1:3] or foo[0:5]-bar[x-z].\n\nThe port number is an optional :NN suffix on an IPv4 address or host name,\nor a mandatory :NN suffix on any square-bracketed expression: IPv6 address,\nIPv4 address, or host name. (This means the only way to specify a port for\nan IPv6 address is to enclose it in square brackets.)", "ret": null}, "fn_lc": [[169, 0], [215, 23]], "fn_var_ln": {"address": [[191, 13], [191, 20]], "host": [[202, 12], [202, 16]], "m": [[200, 8], [200, 9]], "port": [[192, 12], [192, 16]]}, "fn_var_occur": {"address": [["m", "patterns", "matching", "match", "address"], ["address", "port", "m", "groups"], ["m", "patterns", "matching", "match", "address"], ["host", "address"], ["AnsibleError", "address"]], "host": [["host", "None"], ["host", "address"], ["allow_ranges", "host"], ["host", "port"]], "m": [["m", "patterns", "matching", "match", "address"], ["address", "port", "m", "groups"], ["m", "patterns", "matching", "match", "address"]], "port": [["port", "None"], ["address", "port", "m", "groups"], ["port", "int", "port"], ["host", "port"]]}, "name": "parse_address", "params": {"address": "", "allow_ranges": ""}, "params_descr": {"address": "", "allow_ranges": ""}, "params_occur": {"address": [["m", "patterns", "matching", "match", "address"], ["address", "port", "m", "groups"], ["m", "patterns", "matching", "match", "address"], ["host", "address"], ["AnsibleError", "address"]], "allow_ranges": [["allow_ranges", "host"]]}, "params_p": {"address": [["str", 0.9999999999999999]], "allow_ranges": [["int", 0.21081778978231747], ["Dict[str, Any]", 0.10620860325900976], ["AsyncIterator[T]", 0.09608230542073205], ["bool", 0.09525292792313021]], "args": [], "kwargs": []}, "q_name": "parse_address", "ret_exprs": ["return (host, port)"], "ret_type": "", "ret_type_p": [["int", 0.30000000000000004], ["Callable", 0.2], ["str", 0.1]], "variables": {"address": "", "host": "", "m": "", "port": ""}, "variables_p": {"address": [["str", 0.5860435126025171], ["Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]", 0.1874072558112936]], "host": [["str", 0.3473747353244261], ["Optional[str]", 0.3248157051207907], ["Type[str]", 0.18019335910707598], ["List[str]", 0.07395513114278378], ["int", 0.07366106930492335]], "m": [["str", 0.37632648240801553], ["Optional[Match[str]]", 0.2382249773704486], ["Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]", 0.16171893950338406], ["List[str]", 0.134221972152556]], "port": [["int", 0.49439640113194555], ["Optional[int]", 0.21871268385044695], ["Optional[Match[str]]", 0.10189737536126961], ["List[int]", 0.09249676982816883]]}}], "imports": ["__future__", "absolute_import", "division", "print_function", "re", "ansible", "errors", "AnsibleParserError", "AnsibleError"], "mod_var_ln": {"__metaclass__": [[20, 0], [20, 13]], "alphanumeric_range": [[42, 0], [42, 18]], "hexadecimal_range": [[35, 0], [35, 17]], "ipv4_component": [[63, 0], [63, 14]], "ipv6_component": [[56, 0], [56, 14]], "label": [[77, 0], [77, 5]], "numeric_range": [[28, 0], [28, 13]], "patterns": [[83, 0], [83, 8]]}, "mod_var_occur": {"__metaclass__": [], "alphanumeric_range": [["label", "format", "range", "alphanumeric_range"]], "hexadecimal_range": [["ipv6_component", "format", "range", "hexadecimal_range"]], "ipv4_component": [["patterns", "re", "compile", "re", "X", "re", "compile", "re", "X", "re", "compile", "format", "i4", "ipv4_component", "re", "X", "re", "I", "re", "compile", "format", "ipv6_component", "re", "X", "re", "I", "re", "compile", "format", "label", "label", "re", "X", "re", "I", "re", "UNICODE"]], "ipv6_component": [["patterns", "re", "compile", "re", "X", "re", "compile", "re", "X", "re", "compile", "format", "i4", "ipv4_component", "re", "X", "re", "I", "re", "compile", "format", "ipv6_component", "re", "X", "re", "I", "re", "compile", "format", "label", "label", "re", "X", "re", "I", "re", "UNICODE"]], "label": [["patterns", "re", "compile", "re", "X", "re", "compile", "re", "X", "re", "compile", "format", "i4", "ipv4_component", "re", "X", "re", "I", "re", "compile", "format", "ipv6_component", "re", "X", "re", "I", "re", "compile", "format", "label", "label", "re", "X", "re", "I", "re", "UNICODE"]], "numeric_range": [["ipv4_component", "format", "range", "numeric_range"]], "patterns": [["m", "patterns", "matching", "match", "address"], ["m", "patterns", "matching", "match", "address"]]}, "no_types_annot": {"D": 0, "I": 0, "U": 14}, "session_id": "mX6KJdLtlpbLIThOAVu_Bn-C2b2QraY0fMx17Eef9_g", "set": null, "tc": [false, null], "type_annot_cove": 0.0, "typed_seq": "", "untyped_seq": "", "variables": {"__metaclass__": "", "alphanumeric_range": "", "hexadecimal_range": "", "ipv4_component": "", "ipv6_component": "", "label": "", "numeric_range": "", "patterns": ""}, "variables_p": {"__metaclass__": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "alphanumeric_range": [["int", 0.4988089839409088], ["float", 0.2922570360082323], ["list", 0.10891724080360099], ["str", 0.10001673924725807]], "hexadecimal_range": [["float", 0.2957085502961462], ["int", 0.29525472295275695], ["list", 0.10924454289528603], ["Dict[Union[int, str], int]", 0.1019505622802393], ["Dict[Tuple[str, str], float]", 0.10156989473965242]], "ipv4_component": [["str", 0.44933786235082507], ["int", 0.16983486848598925], ["Dict[Type[Any], str]", 0.09767629189501292], ["list", 0.09658225371985592], ["bool", 0.09354481690560201]], "ipv6_component": [["str", 0.44933786235082507], ["int", 0.16983486848598925], ["Dict[Type[Any], str]", 0.09767629189501292], ["list", 0.09658225371985592], ["bool", 0.09354481690560201]], "label": [["str", 0.3921902032365775], ["List[str]", 0.2936175690050398], ["list", 0.2177221738214929], ["dict", 0.09647005393688995]], "numeric_range": [["float", 0.2957085502961462], ["int", 0.29525472295275695], ["list", 0.10924454289528603], ["Dict[Union[int, str], int]", 0.1019505622802393], ["Dict[Tuple[str, str], float]", 0.10156989473965242]], "patterns": [["Dict[str, str]", 0.10148639694495178]]}}}