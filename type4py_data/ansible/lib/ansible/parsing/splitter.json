{"error": null, "response": {"classes": [], "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[43, 4], [44, 62]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "decode_match", "params": {"match": ""}, "params_descr": {"match": ""}, "params_occur": {"match": [["codecs", "decode", "match", "group"]]}, "params_p": {"args": [], "kwargs": [], "match": [["str", 0.3941555661661355], ["int", 0.10251642108332115], ["Iterable[str]", 0.09284465218700702]]}, "q_name": "_decode_escapes.<locals>.decode_match", "ret_exprs": ["return codecs.decode(match.group(0), 'unicode-escape')"], "ret_type": "", "ret_type_p": [["dict", 0.19835386289618123], ["int", 0.12754303558621022], ["Dict[str, int]", 0.0766956541297246], ["List[Dict[str, Any]]", 0.07287883233251759]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[42, 0], [46, 51]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "_decode_escapes", "params": {"s": ""}, "params_descr": {"s": ""}, "params_occur": {"s": [["_ESCAPE_SEQUENCE_RE", "sub", "decode_match", "s"]]}, "params_p": {"args": [], "kwargs": [], "s": [["str", 0.5743055233464576], ["bytes", 0.1821454555155406]]}, "q_name": "_decode_escapes", "ret_exprs": ["return _ESCAPE_SEQUENCE_RE.sub(decode_match, s)"], "ret_type": "", "ret_type_p": [["str", 0.23849153416313357], ["float", 0.2293896150837825], ["bool", 0.16179649646735073], ["int", 0.10754126390817192], ["dict", 0.08047552098658935]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Convert a string of key/value items to a dict. If any free-form params", "long_descr": "are found and the check_raw option is set to True, they will be added\nto a new parameter called '_raw_params'. If check_raw is not enabled,\nthey will simply be ignored.", "ret": null}, "fn_lc": [[49, 0], [102, 18]], "fn_var_ln": {"args": [[57, 4], [57, 8]], "k": [[85, 16], [85, 17]], "options": [[59, 4], [59, 11]], "pos": [[76, 24], [76, 27]], "raw_params": [[69, 8], [69, 18]], "v": [[86, 16], [86, 17]], "vargs": [[62, 12], [62, 17]], "x": [[71, 12], [71, 13]]}, "fn_var_occur": {"args": [["args", "to_text", "args", "nonstring"], ["args", "None"], ["vargs", "split_args", "args"]], "k": [["k", "x", "pos"], ["check_raw", "k"], ["options", "k", "strip", "unquote", "v", "strip"]], "options": [["options", "k", "strip", "unquote", "v", "strip"], ["options", "join", "raw_params"]], "pos": [["pos", "x", "index", "pos"], ["pos", "x", "pos"], ["k", "x", "pos"], ["v", "x", "pos"]], "raw_params": [["raw_params", "append", "x", "replace"], ["raw_params", "append", "orig_x"], ["raw_params", "append", "orig_x"], ["len", "raw_params"], ["options", "join", "raw_params"]], "v": [["v", "x", "pos"], ["options", "k", "strip", "unquote", "v", "strip"]], "vargs": [["vargs", "split_args", "args"]], "x": [["x", "_decode_escapes", "orig_x"], ["pos", "x", "index", "pos"], ["pos", "x", "pos"], ["raw_params", "append", "x", "replace"], ["k", "x", "pos"], ["v", "x", "pos"]]}, "name": "parse_kv", "params": {"args": "", "check_raw": ""}, "params_descr": {"args": "", "check_raw": ""}, "params_occur": {"args": [["args", "to_text", "args", "nonstring"], ["args", "None"], ["vargs", "split_args", "args"]], "check_raw": [["check_raw", "k"]]}, "params_p": {"args": [], "check_raw": [["int", 0.30000000000000004], ["Callable", 0.2], ["str", 0.1]], "kwargs": []}, "q_name": "parse_kv", "ret_exprs": ["return options"], "ret_type": "", "ret_type_p": [["bool", 0.3104039771625566], ["str", 0.16492944885003283], ["Optional[Any]", 0.12134179804790558]], "variables": {"args": "", "k": "", "options": "", "pos": "", "raw_params": "", "v": "", "vargs": "", "x": ""}, "variables_p": {"args": [["List[str]", 0.4084655723005717], ["Dict[Any, Tuple[str, Any]]", 0.16222341724107137]], "k": [["int", 0.3391322636447772], ["Dict[str, str]", 0.15551048607478535], ["Set[str]", 0.11028420584157873], ["str", 0.1024865281629058], ["List[str]", 0.0847830659111943]], "options": [["Dict[str, str]", 0.2771305693053898], ["List[str]", 0.12625671539636377], ["List[Tuple[str, Any]]", 0.09182567654580025], ["OrderedDict[str, str]", 0.08978426912912059], ["str", 0.08312965597707969], ["Dict[str, bytes]", 0.07872511105182142], ["dict", 0.07503470881080798], ["Dict[str, None]", 0.07221734614235098]], "pos": [["Type[str]", 0.3686352406564346], ["int", 0.07036632821074291], ["Dict[str, str]", 0.05645936398977354], ["Pattern[str]", 0.05605434559261904], ["Dict[str, Tuple[int, int]]", 0.05484522587265866]], "raw_params": [["list", 0.6232076640099099], ["List[str]", 0.2849070138983771], ["str", 0.0918853220917131]], "v": [["Pattern[str]", 0.7354153664956974], ["Tuple[Literal, Literal, Literal, Literal, Literal]", 0.18931041554750788], ["list", 0.07527421795679488]], "vargs": [["int", 0.23506006433809634], ["str", 0.1772665016948604], ["bool", 0.15975347740630244], ["List[int]", 0.13286673788295864], ["list", 0.08133437294757381], ["List[str]", 0.0808521078472498]], "x": [["float", 0.08518603390204958], ["Union[Literal, Literal]", 0.0814433375366651]]}}, {"docstring": {"func": "the goal of this block is to determine if the quoted string", "long_descr": "is unterminated in which case it needs to be put back together", "ret": null}, "fn_lc": [[105, 0], [122, 21]], "fn_var_ln": {"prev_char": [[115, 12], [115, 21]], "quote_char": [[121, 16], [121, 26]]}, "fn_var_occur": {"prev_char": [["prev_char", "None"], ["prev_char", "token", "idx"], ["cur_char", "prev_char"]], "quote_char": [["cur_char", "quote_char"], ["quote_char", "None"], ["quote_char", "cur_char"]]}, "name": "_get_quote_state", "params": {"quote_char": "", "token": ""}, "params_descr": {"quote_char": "", "token": ""}, "params_occur": {"quote_char": [["cur_char", "quote_char"], ["quote_char", "None"], ["quote_char", "cur_char"]], "token": [["enumerate", "token"], ["prev_char", "token", "idx"]]}, "params_p": {"args": [], "kwargs": [], "quote_char": [["Optional[int]", 0.31611795917380786], ["set", 0.09949315863557864], ["dict", 0.09390519088891902], ["bool", 0.0880012347326315], ["Optional[str]", 0.08585781701614033]], "token": [["str", 0.8066412064523236], ["bool", 0.09536963584320048]]}, "q_name": "_get_quote_state", "ret_exprs": ["return quote_char"], "ret_type": "", "ret_type_p": [["int", 0.31128849884129994], ["str", 0.15871553676657008], ["set", 0.0899165314114475]], "variables": {"prev_char": "", "quote_char": ""}, "variables_p": {"prev_char": [["str", 0.5842685870852518], ["int", 0.08608382143994465], ["dict", 0.08556849184086301], ["List[Tuple[Any, Any]]", 0.08189478180771699], ["tuple", 0.08139039081171791], ["list", 0.08079392701450575]], "quote_char": [["str", 0.32541534358626123], ["List[str]", 0.21810165212478222], ["List[None]", 0.1037286582043622], ["bool", 0.08904104598643586], ["list", 0.08794604465783383], ["int", 0.08613961390996298]]}}, {"docstring": {"func": "this function counts the number of opening/closing blocks for a", "long_descr": "given opening/closing type and adjusts the current depth for that\nblock based on the difference", "ret": null}, "fn_lc": [[125, 0], [137, 20]], "fn_var_ln": {"cur_depth": [[136, 12], [136, 21]], "num_close": [[132, 4], [132, 13]], "num_open": [[131, 4], [131, 12]]}, "fn_var_occur": {"cur_depth": [["cur_depth", "num_open", "num_close"]], "num_close": [["num_close", "token", "count", "close_token"], ["num_open", "num_close"], ["cur_depth", "num_open", "num_close"]], "num_open": [["num_open", "token", "count", "open_token"], ["num_open", "num_close"], ["cur_depth", "num_open", "num_close"]]}, "name": "_count_jinja2_blocks", "params": {"close_token": "", "cur_depth": "", "open_token": "", "token": ""}, "params_descr": {"close_token": "", "cur_depth": "", "open_token": "", "token": ""}, "params_occur": {"close_token": [["num_close", "token", "count", "close_token"]], "cur_depth": [["cur_depth", "num_open", "num_close"]], "open_token": [["num_open", "token", "count", "open_token"]], "token": [["num_open", "token", "count", "open_token"], ["num_close", "token", "count", "close_token"]]}, "params_p": {"args": [], "close_token": [["str", 0.3084300254160637], ["set", 0.1930619200610626], ["Iterable[str]", 0.10557395043037746], ["dict", 0.1018039196335728], ["list", 0.1013133197556963], ["Callable", 0.09887963596647625], ["int", 0.09093722873675072]], "cur_depth": [["int", 0.6870966711054539], ["Tuple[int, int]", 0.11347362416410846], ["List[str]", 0.09618337122507858]], "kwargs": [], "open_token": [["str", 0.3084300254160637], ["set", 0.1930619200610626], ["Iterable[str]", 0.10557395043037746], ["dict", 0.1018039196335728], ["list", 0.1013133197556963], ["Callable", 0.09887963596647625], ["int", 0.09093722873675072]], "token": [["List[int]", 0.7891237556007713], ["str", 0.10644465521158274], ["List[str]", 0.10443158918764611]]}, "q_name": "_count_jinja2_blocks", "ret_exprs": ["return cur_depth"], "ret_type": "", "ret_type_p": [["Sequence", 0.10083862968249246], ["Mapping", 0.0904767848686199]], "variables": {"cur_depth": "", "num_close": "", "num_open": ""}, "variables_p": {"cur_depth": [["int", 0.2232654481497146], ["Counter[Any]", 0.13272162863702044], ["str", 0.09824830418575758], ["List[Tuple[Any, Any]]", 0.08982878026271242], ["float", 0.08548953563100058]], "num_close": [["int", 0.906180506751767], ["Dict[str, int]", 0.0938194932482331]], "num_open": [["int", 1.0]]}}, {"docstring": {"func": "Splits args on whitespace, but intelligently reassembles", "long_descr": "those that may have been split over a jinja2 block or quotes.\n\nWhen used in a remote module, we won't ever have to be concerned about\njinja2 blocks, however this function is/will be used in the\ncore portions as well before the args are templated.\n\nexample input: a=b c=\"foo bar\"\nexample output: ['a=b', 'c=\"foo bar\"']\n\nBasically this is a variation shlex that has some more intelligence for\nhow Ansible needs to use it.", "ret": null}, "fn_lc": [[140, 0], [266, 17]], "fn_var_ln": {"appended": [[245, 16], [245, 24]], "args": [[161, 4], [161, 8]], "block_depth": [[236, 12], [236, 23]], "comment_depth": [[242, 12], [242, 25]], "inside_quotes": [[200, 12], [200, 25]], "items": [[162, 4], [162, 9]], "line_continuation": [[259, 8], [259, 25]], "params": [[158, 4], [158, 10]], "prev_block_depth": [[235, 12], [235, 28]], "prev_comment_depth": [[241, 12], [241, 30]], "prev_print_depth": [[229, 12], [229, 28]], "print_depth": [[230, 12], [230, 23]], "quote_char": [[199, 12], [199, 22]], "spacer": [[221, 24], [221, 30]], "tokens": [[185, 8], [185, 14]], "was_inside_quotes": [[198, 12], [198, 29]]}, "fn_var_occur": {"appended": [["appended", "False"], ["appended", "True"], ["appended", "True"], ["print_depth", "prev_print_depth", "appended"], ["appended", "True"], ["block_depth", "prev_block_depth", "appended"], ["appended", "True"], ["comment_depth", "prev_comment_depth", "appended"], ["appended", "True"], ["print_depth", "block_depth", "comment_depth", "inside_quotes", "appended", "token"]], "args": [["args", "args", "strip"], ["items", "args", "strip", "split"], ["AnsibleParserError", "format", "args"]], "block_depth": [["inside_quotes", "was_inside_quotes", "print_depth", "block_depth", "comment_depth"], ["print_depth", "block_depth", "comment_depth", "inside_quotes", "was_inside_quotes"], ["prev_block_depth", "block_depth"], ["block_depth", "_count_jinja2_blocks", "token", "block_depth"], ["block_depth", "prev_block_depth", "appended"], ["print_depth", "block_depth", "comment_depth", "inside_quotes", "appended", "token"], ["print_depth", "block_depth", "comment_depth", "inside_quotes"]], "comment_depth": [["inside_quotes", "was_inside_quotes", "print_depth", "block_depth", "comment_depth"], ["print_depth", "block_depth", "comment_depth", "inside_quotes", "was_inside_quotes"], ["prev_comment_depth", "comment_depth"], ["comment_depth", "_count_jinja2_blocks", "token", "comment_depth"], ["comment_depth", "prev_comment_depth", "appended"], ["print_depth", "block_depth", "comment_depth", "inside_quotes", "appended", "token"], ["print_depth", "block_depth", "comment_depth", "inside_quotes"]], "inside_quotes": [["inside_quotes", "False"], ["token", "inside_quotes"], ["was_inside_quotes", "inside_quotes"], ["inside_quotes", "quote_char", "None"], ["inside_quotes", "was_inside_quotes", "print_depth", "block_depth", "comment_depth"], ["print_depth", "block_depth", "comment_depth", "inside_quotes", "was_inside_quotes"], ["print_depth", "block_depth", "comment_depth", "inside_quotes", "appended", "token"], ["print_depth", "block_depth", "comment_depth", "inside_quotes"]], "items": [["items", "args", "strip", "split"], ["enumerate", "items"], ["len", "items", "itemidx", "len", "items", "line_continuation"]], "line_continuation": [["line_continuation", "False"], ["line_continuation", "True"], ["len", "items", "itemidx", "len", "items", "line_continuation"], ["line_continuation", "False"]], "params": [["params", "append", "token"], ["params", "params", "token"], ["params", "params", "spacer", "token"], ["params", "params", "token"], ["params", "append", "token"], ["params", "append", "token"], ["params", "append", "token"], ["params", "append", "token"]], "prev_block_depth": [["prev_block_depth", "block_depth"], ["block_depth", "prev_block_depth", "appended"]], "prev_comment_depth": [["prev_comment_depth", "comment_depth"], ["comment_depth", "prev_comment_depth", "appended"]], "prev_print_depth": [["prev_print_depth", "print_depth"], ["print_depth", "prev_print_depth", "appended"]], "print_depth": [["inside_quotes", "was_inside_quotes", "print_depth", "block_depth", "comment_depth"], ["print_depth", "block_depth", "comment_depth", "inside_quotes", "was_inside_quotes"], ["prev_print_depth", "print_depth"], ["print_depth", "_count_jinja2_blocks", "token", "print_depth"], ["print_depth", "prev_print_depth", "appended"], ["print_depth", "block_depth", "comment_depth", "inside_quotes", "appended", "token"], ["print_depth", "block_depth", "comment_depth", "inside_quotes"]], "quote_char": [["quote_char", "None"], ["quote_char", "_get_quote_state", "token", "quote_char"], ["inside_quotes", "quote_char", "None"]], "spacer": [["params", "params", "spacer", "token"]], "tokens": [["tokens", "item", "strip", "split"], ["enumerate", "tokens"], ["len", "tokens"]], "was_inside_quotes": [["was_inside_quotes", "inside_quotes"], ["inside_quotes", "was_inside_quotes", "print_depth", "block_depth", "comment_depth"], ["print_depth", "block_depth", "comment_depth", "inside_quotes", "was_inside_quotes"], ["idx", "was_inside_quotes"]]}, "name": "split_args", "params": {"args": ""}, "params_descr": {"args": ""}, "params_occur": {"args": [["args", "args", "strip"], ["items", "args", "strip", "split"], ["AnsibleParserError", "format", "args"]]}, "params_p": {"args": [], "kwargs": []}, "q_name": "split_args", "ret_exprs": ["return params"], "ret_type": "", "ret_type_p": [["int", 0.38360206989068896], ["str", 0.31624451957628236], ["bytes", 0.09534431121410472]], "variables": {"appended": "", "args": "", "block_depth": "", "comment_depth": "", "inside_quotes": "", "items": "", "line_continuation": "", "params": "", "prev_block_depth": "", "prev_comment_depth": "", "prev_print_depth": "", "print_depth": "", "quote_char": "", "spacer": "", "tokens": "", "was_inside_quotes": ""}, "variables_p": {"appended": [["list", 0.588393475829184], ["List[List[Any]]", 0.11124196304723959], ["tuple", 0.10291507351300871], ["List[Tuple[int, int]]", 0.09776607641471484]], "args": [["List[str]", 0.37410298030084593], ["Dict[str, Any]", 0.22653170869596856]], "block_depth": [["Set[int]", 0.7999999999999999], ["str", 0.1], ["float", 0.1]], "comment_depth": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["str", 0.1]], "inside_quotes": [["str", 0.1694056877665781]], "items": [["list", 0.7267421142067259], ["Dict[str, List[Any]]", 0.10281891638975393], ["List[float]", 0.06275319297969457]], "line_continuation": [["list", 0.2568536743509755], ["List[int]", 0.18200470133551372], ["Iterator[Any]", 0.10493710105450574], ["List[Literal]", 0.09669014766577949], ["List[List]", 0.09091707876407794], ["int", 0.0902339035170379], ["str", 0.08937091859605367], ["List[str]", 0.08899247471605588]], "params": [["list", 0.9075894775456457], ["Dict[str, List[Any]]", 0.0924105224543545]], "prev_block_depth": [["str", 0.7219426172834565], ["int", 0.20242134310524323], ["Pattern[str]", 0.07563603961130011]], "prev_comment_depth": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["str", 0.1]], "prev_print_depth": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["str", 0.1]], "print_depth": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["str", 0.1]], "quote_char": [["int", 0.1986009601635565], ["Tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str]", 0.11127134030335516], ["list", 0.10575026400365295], ["Tuple[float, float]", 0.10575026400365295], ["str", 0.09830990876392133], ["float", 0.09276266110371217], ["List[int]", 0.0896134039863751]], "spacer": [["str", 0.2130403331887229], ["Dict[str, Any]", 0.15739193336225543], ["int", 0.15739193336225543]], "tokens": [["str", 0.5353617001774], ["list", 0.2780634054790493], ["Set[str]", 0.09603067335651365]], "was_inside_quotes": [["bool", 0.8999999999999999]]}}], "imports": ["__future__", "absolute_import", "division", "print_function", "re", "codecs", "ansible", "errors", "AnsibleParserError", "ansible", "module_utils", "_text", "to_text", "ansible", "parsing", "quoting", "unquote"], "mod_var_ln": {"_ESCAPE_SEQUENCE_RE": [[33, 0], [33, 19]], "_HEXCHAR": [[32, 0], [32, 8]], "__metaclass__": [[20, 0], [20, 13]]}, "mod_var_occur": {"_ESCAPE_SEQUENCE_RE": [["_ESCAPE_SEQUENCE_RE", "sub", "decode_match", "s"]], "_HEXCHAR": [["_ESCAPE_SEQUENCE_RE", "re", "compile", "format", "_HEXCHAR", "_HEXCHAR", "_HEXCHAR", "re", "UNICODE", "re", "VERBOSE"]], "__metaclass__": []}, "no_types_annot": {"D": 0, "I": 0, "U": 45}, "session_id": "kRr2LVOuTOmJ-BoEHjTizJwasU4byGFXnYKvDbQGxNo", "set": null, "tc": [false, null], "type_annot_cove": 0.0, "typed_seq": "", "untyped_seq": "", "variables": {"_ESCAPE_SEQUENCE_RE": "", "_HEXCHAR": "", "__metaclass__": ""}, "variables_p": {"_ESCAPE_SEQUENCE_RE": [["Pattern[str]", 0.947067050600021], ["int", 0.020980641677494905], ["Dict[int, str]", 0.01049396155143282], ["str", 0.010281673993315112]], "_HEXCHAR": [["str", 0.9215416704919682], ["bool", 0.07845832950803164]], "__metaclass__": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]]}}}