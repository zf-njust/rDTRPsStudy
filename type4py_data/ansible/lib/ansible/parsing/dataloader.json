{"error": null, "response": {"classes": [{"cls_lc": [[47, 0], [435, 20]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[66, 4], [72, 37]], "fn_var_ln": {"_FILE_CACHE": [[68, 8], [68, 24]], "_basedir": [[67, 8], [67, 21]], "_tempfiles": [[69, 8], [69, 23]]}, "fn_var_occur": {"_FILE_CACHE": [["self", "_FILE_CACHE", "dict"]], "_basedir": [["self", "_basedir"]], "_tempfiles": [["self", "_tempfiles", "set"]]}, "name": "__init__", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "_basedir"], ["self", "_FILE_CACHE", "dict"], ["self", "_tempfiles", "set"], ["self", "set_vault_password", "None"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "DataLoader.__init__", "ret_exprs": [], "ret_type": "", "variables": {"_FILE_CACHE": "", "_basedir": "", "_tempfiles": ""}, "variables_p": {"_FILE_CACHE": [["str", 0.406173115001472], ["set", 0.1306223317622656], ["int", 0.08800570138448048], ["List[str]", 0.08459392491117339]], "_basedir": [["str", 0.30000000000000004], ["Dict[str, Any]", 0.1], ["dict", 0.1], ["int", 0.1]], "_tempfiles": [["str", 0.30000000000000004], ["Dict[str, Any]", 0.1], ["dict", 0.1], ["int", 0.1]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[74, 4], [76, 55]], "fn_var_ln": {"_vault": [[76, 8], [76, 19]], "_vault_password": [[75, 8], [75, 28]]}, "fn_var_occur": {"_vault": [["self", "_vault", "VaultLib", "password", "vault_password"]], "_vault_password": [["self", "_vault_password", "vault_password"]]}, "name": "set_vault_password", "params": {"self": "", "vault_password": ""}, "params_descr": {"self": "", "vault_password": ""}, "params_occur": {"self": [["self", "_vault_password", "vault_password"], ["self", "_vault", "VaultLib", "password", "vault_password"]], "vault_password": [["self", "_vault_password", "vault_password"], ["self", "_vault", "VaultLib", "password", "vault_password"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "vault_password": [["str", 1.0000000000000002]]}, "q_name": "DataLoader.set_vault_password", "ret_exprs": [], "ret_type": "", "variables": {"_vault": "", "_vault_password": ""}, "variables_p": {"_vault": [["str", 0.30000000000000004], ["Dict[str, Any]", 0.1], ["dict", 0.1], ["int", 0.1]], "_vault_password": [["str", 0.8369115143431813], ["list", 0.16308848565681877]]}}, {"docstring": {"func": "Creates a python datastructure from the given data, which can be either", "long_descr": "a JSON or YAML string.", "ret": null}, "fn_lc": [[78, 4], [106, 23]], "fn_var_ln": {"ansible_pos": [[104, 16], [104, 36]], "in_data": [[96, 16], [96, 23]], "new_data": [[103, 16], [103, 24]]}, "fn_var_occur": {"ansible_pos": [["new_data", "ansible_pos", "data", "ansible_pos"]], "in_data": [["in_data", "text_type", "data"], ["in_data", "data"], ["new_data", "self", "_safe_load", "in_data", "file_name", "file_name"]], "new_data": [["new_data", "None"], ["new_data", "json", "loads", "data"], ["new_data", "self", "_safe_load", "in_data", "file_name", "file_name"], ["new_data", "AnsibleUnicode", "new_data"], ["new_data", "ansible_pos", "data", "ansible_pos"]]}, "name": "load", "params": {"data": "", "file_name": "", "self": "", "show_content": ""}, "params_descr": {"data": "", "file_name": "", "self": "", "show_content": ""}, "params_occur": {"data": [["new_data", "json", "loads", "data"], ["isinstance", "data", "AnsibleUnicode"], ["in_data", "text_type", "data"], ["in_data", "data"], ["isinstance", "data", "AnsibleUnicode"], ["new_data", "ansible_pos", "data", "ansible_pos"]], "file_name": [["new_data", "self", "_safe_load", "in_data", "file_name", "file_name"], ["self", "_handle_error", "yaml_exc", "file_name", "show_content"]], "self": [["new_data", "self", "_safe_load", "in_data", "file_name", "file_name"], ["self", "_handle_error", "yaml_exc", "file_name", "show_content"]], "show_content": [["self", "_handle_error", "yaml_exc", "file_name", "show_content"]]}, "params_p": {"args": [], "data": [["str", 0.3933297417417725], ["int", 0.10535421353331043], ["bool", 0.10185155472975597], ["Dict[str, Any]", 0.09987432474782088], ["dict", 0.09676736759541277]], "file_name": [["str", 0.8072148454598287], ["bool", 0.09635920507779806]], "kwargs": [], "self": [], "show_content": [["str", 0.7066024151720949], ["Dict[str, Any]", 0.11282455175103018]]}, "q_name": "DataLoader.load", "ret_exprs": ["return new_data"], "ret_type": "", "ret_type_p": [["Dict[str, Any]", 0.17827990126457616], ["dict", 0.09832148326920044], ["str", 0.0905509521852443], ["Optional[str]", 0.07703159034567345]], "variables": {"ansible_pos": "", "in_data": "", "new_data": ""}, "variables_p": {"ansible_pos": [["str", 0.774867071964174], ["Callable(open)[..., Any][[[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal], default), Named(buffering, int, default), Named(encoding, Optional[str], default), Named(errors, Optional[str], default), Named(newline, Optional[str], default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.TextIOWrapper][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, Literal), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.FileIO][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, Union[Literal[-1], Literal], default), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.BufferedRandom][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, Union[Literal[-1], Literal], default), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.BufferedWriter][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, Union[Literal[-1], Literal], default), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.BufferedReader][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, int), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], BinaryIO][Any, Any]]", 0.13286000862094183]], "in_data": [["dict", 0.2839043919530687], ["str", 0.19358373529671907], ["Dict[str, str]", 0.11346384112106152], ["Dict[str, Union[Any, Any, Any, Any]]", 0.09415024773739032], ["Dict[str, Any]", 0.08977223401065376]], "new_data": [["dict", 0.2711258508562344], ["Dict[str, Any]", 0.09486450776554471], ["Dict[str, str]", 0.08599463336322098]]}}, {"docstring": {"func": "Loads data from a file, which can contain either JSON or YAML.  ", "long_descr": null, "ret": null}, "fn_lc": [[108, 4], [126, 41]], "fn_var_ln": {"file_data": [[119, 13], [119, 22]], "file_name": [[111, 8], [111, 17]], "parsed_data": [[120, 12], [120, 23]], "show_content": [[119, 24], [119, 36]]}, "fn_var_occur": {"file_data": [["file_data", "show_content", "self", "_get_file_contents", "file_name"], ["parsed_data", "self", "load", "data", "file_data", "file_name", "file_name", "show_content", "show_content"]], "file_name": [["file_name", "self", "path_dwim", "file_name"], ["file_name", "self", "_FILE_CACHE"], ["parsed_data", "self", "_FILE_CACHE", "file_name"], ["file_data", "show_content", "self", "_get_file_contents", "file_name"], ["parsed_data", "self", "load", "data", "file_data", "file_name", "file_name", "show_content", "show_content"], ["self", "_FILE_CACHE", "file_name", "parsed_data"]], "parsed_data": [["parsed_data", "self", "_FILE_CACHE", "file_name"], ["parsed_data", "self", "load", "data", "file_data", "file_name", "file_name", "show_content", "show_content"], ["self", "_FILE_CACHE", "file_name", "parsed_data"], ["copy", "deepcopy", "parsed_data"]], "show_content": [["file_data", "show_content", "self", "_get_file_contents", "file_name"], ["parsed_data", "self", "load", "data", "file_data", "file_name", "file_name", "show_content", "show_content"]]}, "name": "load_from_file", "params": {"file_name": "", "self": ""}, "params_descr": {"file_name": "", "self": ""}, "params_occur": {"file_name": [["file_name", "self", "path_dwim", "file_name"], ["file_name", "self", "_FILE_CACHE"], ["parsed_data", "self", "_FILE_CACHE", "file_name"], ["file_data", "show_content", "self", "_get_file_contents", "file_name"], ["parsed_data", "self", "load", "data", "file_data", "file_name", "file_name", "show_content", "show_content"], ["self", "_FILE_CACHE", "file_name", "parsed_data"]], "self": [["file_name", "self", "path_dwim", "file_name"], ["file_name", "self", "_FILE_CACHE"], ["parsed_data", "self", "_FILE_CACHE", "file_name"], ["file_data", "show_content", "self", "_get_file_contents", "file_name"], ["parsed_data", "self", "load", "data", "file_data", "file_name", "file_name", "show_content", "show_content"], ["self", "_FILE_CACHE", "file_name", "parsed_data"]]}, "params_p": {"args": [], "file_name": [["str", 0.6463104634525894], ["int", 0.08761501093862532], ["Dict[str, Any]", 0.08565486348977062]], "kwargs": [], "self": []}, "q_name": "DataLoader.load_from_file", "ret_exprs": ["return copy.deepcopy(parsed_data)"], "ret_type": "", "ret_type_p": [["str", 0.49583900544823567], ["bytes", 0.3155822504105744], ["IO", 0.09144593451954539]], "variables": {"file_data": "", "file_name": "", "parsed_data": "", "show_content": ""}, "variables_p": {"file_data": [["str", 0.4944829368595085], ["Dict[str, Any]", 0.11192156268610723], ["Dict[str, Union[Any, Any]]", 0.11135074340864601], ["taskiinfrastructure.data.json.repositories.project_repository.JsonProjectRepository", 0.08933929969356465]], "file_name": [["str", 0.813637150026674], ["List[str]", 0.09282481879796384]], "parsed_data": [["str", 0.38929360047681005], ["Dict[str, str]", 0.2757751974888855], ["Dict[str, Union[dict, Any, Any]]", 0.1399870993445533]], "show_content": [["str", 0.38230509437915505], ["List[Dict[str, Any]]", 0.1974281194959409], ["Dict[str, Any]", 0.13751243703023044], ["Optional[str]", 0.10556858959905323], ["Dict[str, str]", 0.08687777798843493]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[128, 4], [130, 75]], "fn_var_ln": {"path": [[129, 8], [129, 12]]}, "fn_var_occur": {"path": [["path", "self", "path_dwim", "path"], ["os", "path", "exists", "to_bytes", "path", "errors"]]}, "name": "path_exists", "params": {"path": "", "self": ""}, "params_descr": {"path": "", "self": ""}, "params_occur": {"path": [["path", "self", "path_dwim", "path"], ["os", "path", "exists", "to_bytes", "path", "errors"]], "self": [["path", "self", "path_dwim", "path"]]}, "params_p": {"args": [], "kwargs": [], "path": [["str", 0.44217531741650395], ["int", 0.120230445712934]], "self": []}, "q_name": "DataLoader.path_exists", "ret_exprs": ["return os.path.exists(to_bytes(path, errors='surrogate_or_strict'))"], "ret_type": "", "ret_type_p": [["str", 0.8956493450175926], ["List[str]", 0.10435065498240739]], "variables": {"path": ""}, "variables_p": {"path": [["str", 1.0]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[132, 4], [134, 97]], "fn_var_ln": {"path": [[133, 8], [133, 12]]}, "fn_var_occur": {"path": [["path", "self", "path_dwim", "path"], ["os", "path", "isfile", "to_bytes", "path", "errors", "path", "os", "devnull"]]}, "name": "is_file", "params": {"path": "", "self": ""}, "params_descr": {"path": "", "self": ""}, "params_occur": {"path": [["path", "self", "path_dwim", "path"], ["os", "path", "isfile", "to_bytes", "path", "errors", "path", "os", "devnull"]], "self": [["path", "self", "path_dwim", "path"]]}, "params_p": {"args": [], "kwargs": [], "path": [["str", 0.7291731321363355]], "self": []}, "q_name": "DataLoader.is_file", "ret_exprs": ["return os.path.isfile(to_bytes(path, errors='surrogate_or_strict')) or path == os.devnull"], "ret_type": "", "ret_type_p": [["str", 1.0]], "variables": {"path": ""}, "variables_p": {"path": [["str", 1.0]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[136, 4], [138, 74]], "fn_var_ln": {"path": [[137, 8], [137, 12]]}, "fn_var_occur": {"path": [["path", "self", "path_dwim", "path"], ["os", "path", "isdir", "to_bytes", "path", "errors"]]}, "name": "is_directory", "params": {"path": "", "self": ""}, "params_descr": {"path": "", "self": ""}, "params_occur": {"path": [["path", "self", "path_dwim", "path"], ["os", "path", "isdir", "to_bytes", "path", "errors"]], "self": [["path", "self", "path_dwim", "path"]]}, "params_p": {"args": [], "kwargs": [], "path": [["str", 0.38336291189071103], ["Sequence[str]", 0.10138945831180565]], "self": []}, "q_name": "DataLoader.is_directory", "ret_exprs": ["return os.path.isdir(to_bytes(path, errors='surrogate_or_strict'))"], "ret_type": "", "ret_type_p": [["str", 0.38978099525764315]], "variables": {"path": ""}, "variables_p": {"path": [["str", 1.0]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[140, 4], [142, 31]], "fn_var_ln": {"path": [[141, 8], [141, 12]]}, "fn_var_occur": {"path": [["path", "self", "path_dwim", "path"], ["os", "listdir", "path"]]}, "name": "list_directory", "params": {"path": "", "self": ""}, "params_descr": {"path": "", "self": ""}, "params_occur": {"path": [["path", "self", "path_dwim", "path"], ["os", "listdir", "path"]], "self": [["path", "self", "path_dwim", "path"]]}, "params_p": {"args": [], "kwargs": [], "path": [["str", 0.3073437668350067], ["bool", 0.09671674828469815]], "self": []}, "q_name": "DataLoader.list_directory", "ret_exprs": ["return os.listdir(path)"], "ret_type": "", "ret_type_p": [["str", 0.5286230603419828], ["Pattern", 0.09579409416467415]], "variables": {"path": ""}, "variables_p": {"path": [["str", 0.8881207463336556], ["Generator[str, None, None]", 0.11187925366634452]]}}, {"docstring": {"func": "is the given path executable?", "long_descr": null, "ret": null}, "fn_lc": [[144, 4], [147, 34]], "fn_var_ln": {"path": [[146, 8], [146, 12]]}, "fn_var_occur": {"path": [["path", "self", "path_dwim", "path"], ["is_executable", "path"]]}, "name": "is_executable", "params": {"path": "", "self": ""}, "params_descr": {"path": "", "self": ""}, "params_occur": {"path": [["path", "self", "path_dwim", "path"], ["is_executable", "path"]], "self": [["path", "self", "path_dwim", "path"]]}, "params_p": {"args": [], "kwargs": [], "path": [["str", 0.4449375960080119]], "self": []}, "q_name": "DataLoader.is_executable", "ret_exprs": ["return is_executable(path)"], "ret_type": "", "ret_type_p": [["str", 0.6744818115674469], ["bool", 0.11681862079479179]], "variables": {"path": ""}, "variables_p": {"path": [["str", 0.9999999999999999]]}}, {"docstring": {"func": "Implements yaml.safe_load(), except using our custom loader class. ", "long_descr": null, "ret": null}, "fn_lc": [[149, 4], [159, 20]], "fn_var_ln": {"loader": [[152, 8], [152, 14]]}, "fn_var_occur": {"loader": [["loader", "AnsibleLoader", "stream", "file_name", "self", "_vault_password"], ["loader", "get_single_data"], ["loader", "dispose"]]}, "name": "_safe_load", "params": {"file_name": "", "self": "", "stream": ""}, "params_descr": {"file_name": "", "self": "", "stream": ""}, "params_occur": {"file_name": [["loader", "AnsibleLoader", "stream", "file_name", "self", "_vault_password"]], "self": [["loader", "AnsibleLoader", "stream", "file_name", "self", "_vault_password"]], "stream": [["loader", "AnsibleLoader", "stream", "file_name", "self", "_vault_password"]]}, "params_p": {"args": [], "file_name": [["str", 0.61921114323493], ["bool", 0.09519721419126755], ["int", 0.09519721419126755]], "kwargs": [], "self": [], "stream": [["str", 0.61921114323493], ["bool", 0.09519721419126755], ["int", 0.09519721419126755]]}, "q_name": "DataLoader._safe_load", "ret_exprs": ["return loader.get_single_data()"], "ret_type": "", "ret_type_p": [["Dict[str, Any]", 0.2848548665088039], ["Callable", 0.12684896591008835], ["Dict[str, float]", 0.09692086909304029], ["bool", 0.09645843151174067], ["str", 0.09292036375687517], ["dict", 0.09157195132519791]], "variables": {"loader": ""}, "variables_p": {"loader": [["TextIO", 0.0889837923651961]]}}, {"docstring": {"func": "Reads the file contents from the given file name, and will decrypt them", "long_descr": "if they are found to be vault-encrypted.", "ret": null}, "fn_lc": [[161, 4], [185, 118]], "fn_var_ln": {"b_file_name": [[169, 8], [169, 19]], "data": [[181, 12], [181, 16]], "show_content": [[179, 20], [179, 32]]}, "fn_var_occur": {"b_file_name": [["b_file_name", "to_bytes", "file_name"], ["self", "path_exists", "b_file_name", "self", "is_file", "b_file_name"], ["open", "b_file_name", "f"], ["data", "self", "_vault", "decrypt", "data", "filename", "b_file_name"]], "data": [["data", "f", "read"], ["is_encrypted", "data"], ["data", "self", "_vault", "decrypt", "data", "filename", "b_file_name"], ["data", "to_text", "data", "errors"], ["data", "show_content"]], "show_content": [["show_content", "True"], ["show_content", "False"], ["data", "show_content"]]}, "name": "_get_file_contents", "params": {"file_name": "", "self": ""}, "params_descr": {"file_name": "", "self": ""}, "params_occur": {"file_name": [["file_name", "isinstance", "file_name", "string_types"], ["AnsibleParserError", "str", "file_name"], ["b_file_name", "to_bytes", "file_name"], ["AnsibleFileNotFound", "file_name"], ["AnsibleParserError", "file_name", "str", "e"]], "self": [["self", "path_exists", "b_file_name", "self", "is_file", "b_file_name"], ["data", "self", "_vault", "decrypt", "data", "filename", "b_file_name"]]}, "params_p": {"args": [], "file_name": [["str", 0.900434815657718], ["dict", 0.09956518434228187]], "kwargs": [], "self": []}, "q_name": "DataLoader._get_file_contents", "ret_exprs": ["return (data, show_content)"], "ret_type": "", "ret_type_p": [["str", 0.507623397291708], ["int", 0.1222510290826817], ["dict", 0.11708463145907355]], "variables": {"b_file_name": "", "data": "", "show_content": ""}, "variables_p": {"b_file_name": [["str", 0.617433014849204], ["Optional[Union[Dict, str, int, bytes]]", 0.27645641514165487], ["bytes", 0.1061105700091412]], "data": [["str", 0.635298413334192], ["List[int]", 0.19367769647856317], ["Dict[str, Dict[str, Any]]", 0.09305380003978755], ["bytes", 0.07797009014745719]], "show_content": [["bool", 1.0]]}}, {"docstring": {"func": "Optionally constructs an object (AnsibleBaseYAMLObject) to encapsulate the", "long_descr": "file name/position where a YAML exception occurred, and raises an AnsibleParserError\nto display the syntax exception information.", "ret": null}, "fn_lc": [[187, 4], [201, 91]], "fn_var_ln": {"ansible_pos": [[199, 12], [199, 31]], "err_obj": [[198, 12], [198, 19]]}, "fn_var_occur": {"ansible_pos": [["err_obj", "ansible_pos", "file_name", "yaml_exc", "problem_mark", "line", "yaml_exc", "problem_mark", "column"]], "err_obj": [["err_obj", "None"], ["err_obj", "AnsibleBaseYAMLObject"], ["err_obj", "ansible_pos", "file_name", "yaml_exc", "problem_mark", "line", "yaml_exc", "problem_mark", "column"], ["AnsibleParserError", "YAML_SYNTAX_ERROR", "obj", "err_obj", "show_content", "show_content"]]}, "name": "_handle_error", "params": {"file_name": "", "self": "", "show_content": "", "yaml_exc": ""}, "params_descr": {"file_name": "", "self": "", "show_content": "", "yaml_exc": ""}, "params_occur": {"file_name": [["err_obj", "ansible_pos", "file_name", "yaml_exc", "problem_mark", "line", "yaml_exc", "problem_mark", "column"]], "self": [], "show_content": [["AnsibleParserError", "YAML_SYNTAX_ERROR", "obj", "err_obj", "show_content", "show_content"]], "yaml_exc": [["hasattr", "yaml_exc"], ["err_obj", "ansible_pos", "file_name", "yaml_exc", "problem_mark", "line", "yaml_exc", "problem_mark", "column"]]}, "params_p": {"args": [], "file_name": [["str", 0.7121542783577068]], "kwargs": [], "self": [], "show_content": [["str", 0.6637572914691159], ["coalib.settings.Setting.path", 0.08688282986168305]], "yaml_exc": [["str", 0.36365640303816016]]}, "q_name": "DataLoader._handle_error", "ret_exprs": [], "ret_type": "", "variables": {"ansible_pos": "", "err_obj": ""}, "variables_p": {"ansible_pos": [["str", 0.48075078606187843], ["List[str]", 0.21005045757169993], ["Pattern[str]", 0.1013222368557216]], "err_obj": [["list", 0.11652116930645667]]}}, {"docstring": {"func": "returns the current basedir ", "long_descr": null, "ret": null}, "fn_lc": [[203, 4], [205, 28]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "get_basedir", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "_basedir"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "DataLoader.get_basedir", "ret_exprs": ["return self._basedir"], "ret_type": "", "ret_type_p": [["str", 0.19999999999999998], ["bool", 0.09999999999999999]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "sets the base directory, used to find files when a relative path is given ", "long_descr": null, "ret": null}, "fn_lc": [[207, 4], [211, 44]], "fn_var_ln": {"_basedir": [[211, 12], [211, 25]]}, "fn_var_occur": {"_basedir": [["self", "_basedir", "to_text", "basedir"]]}, "name": "set_basedir", "params": {"basedir": "", "self": ""}, "params_descr": {"basedir": "", "self": ""}, "params_occur": {"basedir": [["basedir", "None"], ["self", "_basedir", "to_text", "basedir"]], "self": [["self", "_basedir", "to_text", "basedir"]]}, "params_p": {"args": [], "basedir": [["Optional[str]", 0.13191299381169064], ["str", 0.10617326053926888], ["dict", 0.09897314629562734], ["Optional[bool]", 0.08427981008469909]], "kwargs": [], "self": []}, "q_name": "DataLoader.set_basedir", "ret_exprs": [], "ret_type": "", "variables": {"_basedir": ""}, "variables_p": {"_basedir": [["float", 0.9999999998608685], ["Final", 3.297699367525499e-11], ["List[str]", 9.667652738090117e-12], ["int", 9.383298144449041e-12], ["dict", 9.080540074908605e-12], ["Callable", 8.765149998578822e-12]]}}, {"docstring": {"func": "make relative paths work like folks expect.", "long_descr": null, "ret": null}, "fn_lc": [[213, 4], [227, 64]], "fn_var_ln": {"basedir": [[226, 12], [226, 19]], "given": [[219, 8], [219, 13]]}, "fn_var_occur": {"basedir": [["basedir", "to_text", "self", "_basedir", "errors"], ["os", "path", "abspath", "os", "path", "join", "basedir", "given"]], "given": [["given", "unquote", "given"], ["given", "to_text", "given", "errors"], ["given", "startswith"], ["os", "path", "abspath", "given"], ["given", "startswith"], ["os", "path", "abspath", "os", "path", "expanduser", "given"], ["os", "path", "abspath", "os", "path", "join", "basedir", "given"]]}, "name": "path_dwim", "params": {"given": "", "self": ""}, "params_descr": {"given": "", "self": ""}, "params_occur": {"given": [["given", "unquote", "given"], ["given", "to_text", "given", "errors"], ["given", "startswith"], ["os", "path", "abspath", "given"], ["given", "startswith"], ["os", "path", "abspath", "os", "path", "expanduser", "given"], ["os", "path", "abspath", "os", "path", "join", "basedir", "given"]], "self": [["basedir", "to_text", "self", "_basedir", "errors"]]}, "params_p": {"args": [], "given": [["str", 0.7875939218239302], ["List[str]", 0.09495804554453824]], "kwargs": [], "self": []}, "q_name": "DataLoader.path_dwim", "ret_exprs": ["return os.path.abspath(given)", "return os.path.abspath(os.path.expanduser(given))", "return os.path.abspath(os.path.join(basedir, given))"], "ret_type": "", "ret_type_p": [["str", 0.9225711305493361], ["List[str]", 0.07742886945066374]], "variables": {"basedir": "", "given": ""}, "variables_p": {"basedir": [["str", 0.9999999999999997]], "given": [["str", 0.7137570585138503], ["Dict[int, Optional[int]]", 0.0970487808934562], ["List[str]", 0.09541076816342926]]}}, {"docstring": {"func": "find one file in either a role or playbook dir with or without", "long_descr": "explicitly named dirname subdirs\n\nUsed in action plugins and lookups to find supplemental files that\ncould be in either place.", "ret": null}, "fn_lc": [[229, 4], [277, 24]], "fn_var_ln": {"basedir": [[254, 20], [254, 27]], "cur_basedir": [[256, 12], [256, 23]], "isrole": [[252, 16], [252, 22]], "search": [[238, 8], [238, 14]]}, "fn_var_occur": {"basedir": [["basedir", "unfrackpath", "path"], ["basedir", "unfrackpath", "os", "path", "dirname", "path"], ["self", "set_basedir", "basedir"], ["search", "append", "self", "path_dwim", "os", "path", "join", "basedir", "dirname", "source"], ["search", "append", "self", "path_dwim", "os", "path", "join", "basedir", "source"], ["search", "append", "self", "path_dwim", "os", "path", "join", "basedir", "source"]], "cur_basedir": [["cur_basedir", "self", "_basedir"], ["self", "set_basedir", "cur_basedir"]], "isrole": [["isrole", "False"], ["isrole", "True"], ["isrole", "source", "endswith", "dirname"]], "search": [["search", "append", "self", "path_dwim", "source"], ["search", "append", "os", "path", "join", "path", "dirname", "source"], ["search", "append", "self", "path_dwim", "os", "path", "join", "basedir", "dirname", "source"], ["search", "append", "self", "path_dwim", "os", "path", "join", "basedir", "source"], ["search", "append", "self", "path_dwim", "os", "path", "join", "dirname", "source"], ["search", "append", "self", "path_dwim", "os", "path", "join", "basedir", "source"], ["search", "append", "self", "path_dwim", "source"]]}, "name": "path_dwim_relative", "params": {"dirname": "", "path": "", "self": "", "source": ""}, "params_descr": {"dirname": "", "path": "", "self": "", "source": ""}, "params_occur": {"dirname": [["search", "append", "os", "path", "join", "path", "dirname", "source"], ["basedir", "unfrackpath", "os", "path", "dirname", "path"], ["search", "append", "self", "path_dwim", "os", "path", "join", "basedir", "dirname", "source"], ["isrole", "source", "endswith", "dirname"], ["search", "append", "self", "path_dwim", "os", "path", "join", "dirname", "source"]], "path": [["source", "startswith", "source", "startswith", "os", "path", "sep"], ["search", "append", "os", "path", "join", "path", "dirname", "source"], ["basedir", "unfrackpath", "path"], ["path", "endswith", "os", "path", "exists", "to_bytes", "os", "path", "join", "path", "errors", "os", "path", "exists", "to_bytes", "os", "path", "join", "path", "errors"], ["path", "endswith"], ["basedir", "unfrackpath", "os", "path", "dirname", "path"], ["search", "append", "self", "path_dwim", "os", "path", "join", "basedir", "dirname", "source"], ["search", "append", "self", "path_dwim", "os", "path", "join", "basedir", "source"], ["search", "append", "self", "path_dwim", "os", "path", "join", "dirname", "source"], ["search", "append", "self", "path_dwim", "os", "path", "join", "basedir", "source"], ["os", "path", "exists", "to_bytes", "candidate", "errors"]], "self": [["search", "append", "self", "path_dwim", "source"], ["cur_basedir", "self", "_basedir"], ["self", "set_basedir", "basedir"], ["search", "append", "self", "path_dwim", "os", "path", "join", "basedir", "dirname", "source"], ["self", "set_basedir", "cur_basedir"], ["search", "append", "self", "path_dwim", "os", "path", "join", "basedir", "source"], ["search", "append", "self", "path_dwim", "os", "path", "join", "dirname", "source"], ["search", "append", "self", "path_dwim", "os", "path", "join", "basedir", "source"], ["search", "append", "self", "path_dwim", "source"]], "source": [["source", "startswith", "source", "startswith", "os", "path", "sep"], ["search", "append", "self", "path_dwim", "source"], ["search", "append", "os", "path", "join", "path", "dirname", "source"], ["search", "append", "self", "path_dwim", "os", "path", "join", "basedir", "dirname", "source"], ["isrole", "source", "endswith", "dirname"], ["search", "append", "self", "path_dwim", "os", "path", "join", "basedir", "source"], ["search", "append", "self", "path_dwim", "os", "path", "join", "dirname", "source"], ["search", "append", "self", "path_dwim", "os", "path", "join", "basedir", "source"], ["search", "append", "self", "path_dwim", "source"]]}, "params_p": {"args": [], "dirname": [["str", 0.3930061636517321], ["List[str]", 0.21903377396044202], ["Optional[str]", 0.09054531661691487], ["Callable[[str], str]", 0.08104109916686737]], "kwargs": [], "path": [["str", 1.0000000000000002]], "self": [], "source": [["List[str]", 0.31699349402515237], ["Optional[str]", 0.10432451522258664], ["Callable[[str], str]", 0.10171740811055535]]}, "q_name": "DataLoader.path_dwim_relative", "ret_exprs": ["return candidate"], "ret_type": "", "ret_type_p": [["str", 0.5777255629138391], ["bool", 0.11853193518643365], ["Callable", 0.09641105232571653]], "variables": {"basedir": "", "cur_basedir": "", "isrole": "", "search": ""}, "variables_p": {"basedir": [["str", 0.807694330656735], ["list", 0.19230566934326493]], "cur_basedir": [], "isrole": [["str", 0.6307920456351893], ["Optional[str]", 0.13531649406664223], ["List[List[Any]]", 0.13425449741890313], ["List[str]", 0.0996369628792654]], "search": [["str", 0.6566194786568965], ["List[Tuple[str, Any]]", 0.14813621962719395], ["list", 0.09980368679096764], ["List[str]", 0.09544061492494217]]}}, {"docstring": {"func": "find one file in first path in stack taking roles into account and adding play basedir as fallback", "long_descr": null, "ret": "An absolute path to the filename ``source``"}, "fn_lc": [[279, 4], [338, 21]], "fn_var_ln": {"b_dirname": [[290, 8], [290, 17]], "b_mydir": [[306, 16], [306, 23]], "b_source": [[291, 8], [291, 16]], "b_upath": [[305, 16], [305, 23]], "result": [[335, 20], [335, 26]], "search": [[302, 12], [302, 18]], "test_path": [[298, 12], [298, 21]], "upath": [[304, 16], [304, 21]]}, "fn_var_occur": {"b_dirname": [["b_dirname", "to_bytes", "dirname"], ["search", "append", "os", "path", "join", "os", "path", "dirname", "b_mydir", "b_dirname", "b_source"], ["b_source", "split", "b_dirname"], ["search", "append", "os", "path", "join", "b_upath", "b_dirname", "b_source"], ["b_dirname", "b_source", "split"], ["search", "append", "os", "path", "join", "b_upath", "b_dirname", "b_source"], ["search", "append", "os", "path", "join", "to_bytes", "self", "get_basedir", "b_dirname", "b_source"]], "b_mydir": [["b_mydir", "os", "path", "dirname", "b_upath"], ["b_upath", "endswith", "os", "path", "exists", "os", "path", "join", "b_upath", "os", "path", "exists", "os", "path", "join", "b_upath", "os", "path", "exists", "os", "path", "join", "b_mydir"], ["b_mydir", "endswith"], ["search", "append", "os", "path", "join", "os", "path", "dirname", "b_mydir", "b_dirname", "b_source"], ["search", "append", "os", "path", "join", "b_mydir", "b_source"]], "b_source": [["b_source", "to_bytes", "source"], ["test_path", "unfrackpath", "b_source"], ["search", "append", "os", "path", "join", "os", "path", "dirname", "b_mydir", "b_dirname", "b_source"], ["search", "append", "os", "path", "join", "b_mydir", "b_source"], ["b_source", "split", "b_dirname"], ["search", "append", "os", "path", "join", "b_upath", "b_source"], ["search", "append", "os", "path", "join", "b_upath", "b_dirname", "b_source"], ["search", "append", "os", "path", "join", "b_upath", "b_source"], ["b_dirname", "b_source", "split"], ["search", "append", "os", "path", "join", "b_upath", "b_dirname", "b_source"], ["search", "append", "os", "path", "join", "b_upath", "b_source"], ["search", "append", "os", "path", "join", "to_bytes", "self", "get_basedir", "b_dirname", "b_source"], ["search", "append", "os", "path", "join", "to_bytes", "self", "get_basedir", "b_source"]], "b_upath": [["b_upath", "to_bytes", "upath", "errors"], ["b_mydir", "os", "path", "dirname", "b_upath"], ["b_upath", "endswith", "os", "path", "exists", "os", "path", "join", "b_upath", "os", "path", "exists", "os", "path", "join", "b_upath", "os", "path", "exists", "os", "path", "join", "b_mydir"], ["search", "append", "os", "path", "join", "b_upath", "b_source"], ["search", "append", "os", "path", "join", "b_upath", "b_dirname", "b_source"], ["search", "append", "os", "path", "join", "b_upath", "b_source"], ["search", "append", "os", "path", "join", "b_upath", "b_dirname", "b_source"], ["search", "append", "os", "path", "join", "b_upath", "b_source"]], "result": [["result", "None"], ["result", "test_path"], ["result", "to_text", "b_candidate"]], "search": [["search", "append", "os", "path", "join", "os", "path", "dirname", "b_mydir", "b_dirname", "b_source"], ["search", "append", "os", "path", "join", "b_mydir", "b_source"], ["search", "append", "os", "path", "join", "b_upath", "b_source"], ["search", "append", "os", "path", "join", "b_upath", "b_dirname", "b_source"], ["search", "append", "os", "path", "join", "b_upath", "b_source"], ["search", "append", "os", "path", "join", "b_upath", "b_dirname", "b_source"], ["search", "append", "os", "path", "join", "b_upath", "b_source"], ["search", "append", "os", "path", "join", "to_bytes", "self", "get_basedir", "b_dirname", "b_source"], ["search", "append", "os", "path", "join", "to_bytes", "self", "get_basedir", "b_source"], ["display", "debug", "to_text", "join", "search"]], "test_path": [["test_path", "unfrackpath", "b_source"], ["os", "path", "exists", "to_bytes", "test_path", "errors"], ["result", "test_path"]], "upath": [["upath", "unfrackpath", "path"], ["b_upath", "to_bytes", "upath", "errors"]]}, "name": "path_dwim_relative_stack", "params": {"dirname": "", "paths": "", "self": "", "source": ""}, "params_descr": {"dirname": "A text string representing a directory.  The directory\nis prepended to the source to form the path to search for.", "paths": "A list of text strings which are the paths to look for the filename in.", "self": "", "source": "A text string which is the filename to search for"}, "params_occur": {"dirname": [["b_dirname", "to_bytes", "dirname"], ["b_mydir", "os", "path", "dirname", "b_upath"], ["search", "append", "os", "path", "join", "os", "path", "dirname", "b_mydir", "b_dirname", "b_source"]], "paths": [], "self": [["search", "append", "os", "path", "join", "to_bytes", "self", "get_basedir", "b_dirname", "b_source"], ["search", "append", "os", "path", "join", "to_bytes", "self", "get_basedir", "b_source"]], "source": [["b_source", "to_bytes", "source"], ["source", "None"], ["source", "source", "startswith", "source", "startswith", "os", "path", "sep"], ["display", "vvvvv", "source", "to_text", "b_candidate"]]}, "params_p": {"args": [], "dirname": [["bytes", 0.547745805026654], ["BinaryIO", 0.1306921377672944], ["str", 0.09166493521952915], ["raiden.utils.PrivateKey", 0.08900828451969692]], "kwargs": [], "paths": [["str", 0.2564079045567152], ["Iterable[Optional[Any]]", 0.18140779411581748], ["bool", 0.13972902668010137], ["[str]", 0.13565357563389188], ["List[dict]", 0.0735484539987465]], "self": [], "source": [["Union[bytes, str]", 0.11830012583750714], ["os.DirEntry", 0.10890702373386063], ["Callable", 0.10861702648143907], ["Optional[IO[str]]", 0.1075539694292496], ["os.PathLike", 0.10412598072787208], ["\"Path\"", 0.09144376674737842], ["bool", 0.09144376674737842], ["BinaryIO", 0.09130822092923241], ["bytes", 0.08856530713213992]]}, "q_name": "DataLoader.path_dwim_relative_stack", "ret_exprs": ["return result"], "ret_type": "", "ret_type_p": [["str", 0.22251832594823628], ["bool", 0.18329348466506434], ["dict", 0.12205775795406579], ["Dict[str, Any]", 0.10233171072913037], ["List[str]", 0.09653313592233283], ["MutableMapping[str, Any]", 0.09117338168878805]], "variables": {"b_dirname": "", "b_mydir": "", "b_source": "", "b_upath": "", "result": "", "search": "", "test_path": "", "upath": ""}, "variables_p": {"b_dirname": [["str", 0.38970511884545384], ["int", 0.19448929566186263], ["List[int]", 0.12097751751006385], ["Dict[str, Any]", 0.12020019418747276], ["dict", 0.08922466345014309]], "b_mydir": [["str", 0.8159203589833326], ["Tuple[str, str, str, str, str, str]", 0.09226983421224946], ["Set[str]", 0.09180980680441768]], "b_source": [["str", 0.8185925403129799], ["set", 0.0952576250094969]], "b_upath": [["str", 0.5624437842653829], ["bytes", 0.10797115379926027]], "result": [["Set[str]", 0.06863789977213047], ["Optional[Tuple[str, str]]", 0.06774958008549002]], "search": [["str", 1.0000000000000004]], "test_path": [["str", 0.8377133957791985]], "upath": [["str", 0.9999999999999999]]}}, {"docstring": {"func": "Read a vault password from a file or if executable, execute the script and", "long_descr": "retrieve password from STDOUT", "ret": null}, "fn_lc": [[340, 4], [365, 96]], "fn_var_ln": {"f": [[361, 16], [361, 17]], "p": [[353, 16], [353, 17]], "stderr": [[357, 20], [357, 26]], "stdout": [[357, 12], [357, 18]], "this_path": [[346, 8], [346, 17]]}, "fn_var_occur": {"f": [["f", "open", "this_path"], ["self", "set_vault_password", "f", "read", "strip"], ["f", "close"]], "p": [["p", "subprocess", "Popen", "this_path", "stdout", "subprocess", "PIPE"], ["stdout", "stderr", "p", "communicate"]], "stderr": [["stdout", "stderr", "p", "communicate"]], "stdout": [["p", "subprocess", "Popen", "this_path", "stdout", "subprocess", "PIPE"], ["stdout", "stderr", "p", "communicate"], ["self", "set_vault_password", "stdout", "strip"]], "this_path": [["this_path", "os", "path", "realpath", "to_bytes", "os", "path", "expanduser", "vault_password_file", "errors"], ["os", "path", "exists", "to_bytes", "this_path", "errors"], ["AnsibleFileNotFound", "this_path"], ["self", "is_executable", "this_path"], ["p", "subprocess", "Popen", "this_path", "stdout", "subprocess", "PIPE"], ["AnsibleError", "join", "this_path", "to_native", "e"], ["f", "open", "this_path"], ["AnsibleError", "this_path", "e"]]}, "name": "read_vault_password_file", "params": {"self": "", "vault_password_file": ""}, "params_descr": {"self": "", "vault_password_file": ""}, "params_occur": {"self": [["self", "is_executable", "this_path"], ["self", "set_vault_password", "stdout", "strip"], ["self", "set_vault_password", "f", "read", "strip"]], "vault_password_file": [["this_path", "os", "path", "realpath", "to_bytes", "os", "path", "expanduser", "vault_password_file", "errors"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "vault_password_file": [["str", 0.6111243502999795], ["Callable[[str], None]", 0.1127209975220481], ["List[str]", 0.08839225330706758]]}, "q_name": "DataLoader.read_vault_password_file", "ret_exprs": [], "ret_type": "", "variables": {"f": "", "p": "", "stderr": "", "stdout": "", "this_path": ""}, "variables_p": {"f": [["str", 0.2856779576789138]], "p": [["str", 0.5652287290767299], ["subprocess.CompletedProcess[bytes]", 0.21757012059523217]], "stderr": [["subprocess.Popen[Any]", 0.3999999999909267], ["TextIO", 0.19999999999546336], ["Tuple[str, str]", 0.19999999999546336], ["dict", 5.613385683956837e-12], ["str", 3.66875026611313e-12]], "stdout": [["subprocess.Popen[Any]", 0.534283570549335], ["subprocess.CompletedProcess[bytes]", 0.28915925899519046], ["List[str]", 0.0925150521410127], ["subprocess.CompletedProcess[str]", 0.08404211831446194]], "this_path": [["str", 0.907507315391316]]}}, {"docstring": {"func": "Create a tempfile containing defined content ", "long_descr": null, "ret": null}, "fn_lc": [[367, 4], [379, 31]], "fn_var_ln": {"content": [[371, 8], [371, 15]], "content_tempfile": [[369, 12], [369, 28]], "f": [[370, 8], [370, 9]], "fd": [[369, 8], [369, 10]]}, "fn_var_occur": {"content": [["content", "to_bytes", "content"], ["f", "write", "content"]], "content_tempfile": [["fd", "content_tempfile", "tempfile", "mkstemp"], ["os", "remove", "content_tempfile"]], "f": [["f", "os", "fdopen", "fd"], ["f", "write", "content"], ["f", "close"]], "fd": [["fd", "content_tempfile", "tempfile", "mkstemp"], ["f", "os", "fdopen", "fd"]]}, "name": "_create_content_tempfile", "params": {"content": "", "self": ""}, "params_descr": {"content": "", "self": ""}, "params_occur": {"content": [["content", "to_bytes", "content"], ["f", "write", "content"]], "self": []}, "params_p": {"args": [], "content": [["str", 0.7156414409125643], ["Union[str, bytes]", 0.18714742930512163], ["cmk.gui.utils.html.HTML", 0.09721112978231423]], "kwargs": [], "self": []}, "q_name": "DataLoader._create_content_tempfile", "ret_exprs": ["return content_tempfile"], "ret_type": "", "ret_type_p": [["str", 0.6959948712406054], ["Optional[str]", 0.13748572272760293]], "variables": {"content": "", "content_tempfile": "", "f": "", "fd": ""}, "variables_p": {"content": [["bytes", 0.7412008188112991]], "content_tempfile": [["property", 0.2779669740589167], ["str", 0.2098955298494231], ["int", 0.1921620017092238], ["list", 0.09878993788516731], ["List[Tuple[str, Any]]", 0.08816985076170582]], "f": [], "fd": [["List[List[Any]]", 0.22014043042813386], ["Dict[str, Union[Any, str]]", 0.10659231712734431], ["str", 0.10524487602484942], ["int", 0.1051738129038532], ["Generator[Any, None, None]", 0.08632288332646955]]}}, {"docstring": {"func": "If the file is vault encrypted return a path to a temporary decrypted file", "long_descr": "If the file is not encrypted then the path is returned\nTemporary files are cleanup in the destructor", "ret": null}, "fn_lc": [[381, 4], [418, 135]], "fn_var_ln": {"_vault": [[396, 12], [396, 23]], "b_file_path": [[391, 8], [391, 19]], "data": [[410, 20], [410, 24]], "real_path": [[412, 20], [412, 29]]}, "fn_var_occur": {"_vault": [["self", "_vault"], ["self", "_vault", "VaultLib", "password"], ["data", "self", "_vault", "decrypt", "data", "filename", "real_path"]], "b_file_path": [["b_file_path", "to_bytes", "file_path", "errors"], ["self", "path_exists", "b_file_path", "self", "is_file", "b_file_path"]], "data": [["data", "f", "read"], ["data", "self", "_vault", "decrypt", "data", "filename", "real_path"], ["real_path", "self", "_create_content_tempfile", "data"]], "real_path": [["real_path", "self", "path_dwim", "file_path"], ["open", "to_bytes", "real_path", "f"], ["data", "self", "_vault", "decrypt", "data", "filename", "real_path"], ["real_path", "self", "_create_content_tempfile", "data"], ["self", "_tempfiles", "add", "real_path"], ["AnsibleParserError", "to_native", "real_path", "to_native", "e"]]}, "name": "get_real_file", "params": {"file_path": "", "self": ""}, "params_descr": {"file_path": "", "self": ""}, "params_occur": {"file_path": [["file_path", "isinstance", "file_path", "string_types"], ["AnsibleParserError", "to_native", "file_path"], ["b_file_path", "to_bytes", "file_path", "errors"], ["AnsibleFileNotFound", "to_native", "file_path"], ["real_path", "self", "path_dwim", "file_path"], ["AnsibleParserError", "file_path"]], "self": [["self", "path_exists", "b_file_path", "self", "is_file", "b_file_path"], ["self", "_vault"], ["self", "_vault", "VaultLib", "password"], ["real_path", "self", "path_dwim", "file_path"], ["self", "_vault_password"], ["data", "self", "_vault", "decrypt", "data", "filename", "real_path"], ["real_path", "self", "_create_content_tempfile", "data"], ["self", "_tempfiles", "add", "real_path"]]}, "params_p": {"args": [], "file_path": [["str", 0.48743120252883826]], "kwargs": [], "self": []}, "q_name": "DataLoader.get_real_file", "ret_exprs": ["return real_path"], "ret_type": "", "ret_type_p": [["str", 0.33384149955409215], ["bool", 0.094850658915766]], "variables": {"_vault": "", "b_file_path": "", "data": "", "real_path": ""}, "variables_p": {"_vault": [["str", 0.6923956399167184], ["List[str]", 0.10828985756296396], ["int", 0.09349553019457013]], "b_file_path": [["str", 0.7038501736992498]], "data": [["str", 0.9158046687970092], ["bytes", 0.08419533120299078]], "real_path": []}}, {"docstring": {"func": "Removes any temporary files created from a previous call to", "long_descr": "get_real_file. file_path must be the path returned from a\nprevious call to get_real_file.", "ret": null}, "fn_lc": [[420, 4], [428, 45]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "cleanup_tmp_file", "params": {"file_path": "", "self": ""}, "params_descr": {"file_path": "", "self": ""}, "params_occur": {"file_path": [["file_path", "self", "_tempfiles"], ["os", "unlink", "file_path"], ["self", "_tempfiles", "remove", "file_path"]], "self": [["file_path", "self", "_tempfiles"], ["self", "_tempfiles", "remove", "file_path"]]}, "params_p": {"args": [], "file_path": [["str", 0.9029621877831111], ["Optional[str]", 0.09703781221688872]], "kwargs": [], "self": []}, "q_name": "DataLoader.cleanup_tmp_file", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[430, 4], [435, 20]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "cleanup_all_tmp_files", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "_tempfiles"], ["self", "cleanup_tmp_file", "f"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "DataLoader.cleanup_all_tmp_files", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "DataLoader", "q_name": "DataLoader", "variables": {}, "variables_p": {}}], "funcs": [], "imports": ["__future__", "absolute_import", "division", "print_function", "copy", "os", "json", "subprocess", "tempfile", "yaml", "YAMLError", "ansible", "compat", "six", "text_type", "string_types", "ansible", "errors", "AnsibleFileNotFound", "AnsibleParserError", "AnsibleError", "ansible", "errors", "yaml_strings", "YAML_SYNTAX_ERROR", "ansible", "module_utils", "basic", "is_executable", "ansible", "module_utils", "_text", "to_bytes", "to_native", "to_text", "ansible", "parsing", "vault", "VaultLib", "is_encrypted", "is_encrypted_file", "ansible", "parsing", "quoting", "unquote", "ansible", "parsing", "yaml", "loader", "AnsibleLoader", "ansible", "parsing", "yaml", "objects", "AnsibleBaseYAMLObject", "AnsibleUnicode", "ansible", "utils", "path", "unfrackpath", "__main__", "display", "ansible", "utils", "display", "Display"], "mod_var_ln": {"__metaclass__": [[20, 0], [20, 13]], "display": [[44, 4], [44, 11]]}, "mod_var_occur": {"__metaclass__": [], "display": [["display", "warning"], ["display", "debug", "to_text", "join", "search"], ["display", "vvvvv", "source", "to_text", "b_candidate"]]}, "no_types_annot": {"D": 0, "I": 0, "U": 95}, "session_id": "rQDwJ9qvKeOK_pVWvfr-d-ceKpnn8JYpboPr_djKssM", "set": null, "tc": [false, null], "type_annot_cove": 0.0, "typed_seq": "", "untyped_seq": "", "variables": {"__metaclass__": "", "display": ""}, "variables_p": {"__metaclass__": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "display": [["str", 0.4195757102640436], ["Dict[str, str]", 0.2991772920159224], ["List[str]", 0.10311010600250704], ["Tuple[Literal, Literal, Literal, Literal, Literal]", 0.09244390078434991]]}}}