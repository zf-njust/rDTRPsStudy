{"error": null, "response": {"classes": [{"cls_lc": [[32, 0], [103, 51]], "cls_var_ln": {"_become": [[35, 4], [35, 11]], "_become_flags": [[38, 4], [38, 17]], "_become_method": [[36, 4], [36, 18]], "_become_user": [[37, 4], [37, 16]]}, "cls_var_occur": {"_become": [], "_become_flags": [], "_become_method": [], "_become_user": []}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[40, 4], [41, 45]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "__init__", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["super", "Become", "self", "__init__"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "Become.__init__", "ret_exprs": ["return super(Become, self).__init__()"], "ret_type": "", "ret_type_p": [["int", 0.30000000000000004], ["bool", 0.10000000000000002], ["float", 0.10000000000000002]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[43, 4], [57, 129]], "fn_var_ln": {"has_become": [[46, 8], [46, 18]], "has_su": [[48, 8], [48, 14]], "has_sudo": [[47, 8], [47, 16]], "msg": [[51, 12], [51, 15]]}, "fn_var_occur": {"has_become": [["has_become", "ds", "ds"]], "has_su": [["has_su", "ds", "ds"], ["has_sudo", "has_su"]], "has_sudo": [["has_sudo", "ds", "ds"], ["has_sudo", "has_su"]], "msg": [["AnsibleParserError", "msg"], ["AnsibleParserError", "msg"]]}, "name": "_detect_privilege_escalation_conflict", "params": {"ds": "", "self": ""}, "params_descr": {"ds": "", "self": ""}, "params_occur": {"ds": [["has_become", "ds", "ds"], ["has_sudo", "ds", "ds"], ["has_su", "ds", "ds"]], "self": []}, "params_p": {"args": [], "ds": [], "kwargs": [], "self": []}, "q_name": "Become._detect_privilege_escalation_conflict", "ret_exprs": [], "ret_type": "", "variables": {"has_become": "", "has_su": "", "has_sudo": "", "msg": ""}, "variables_p": {"has_become": [["float", 0.9999999996541136], ["List[Union[Any, Any]]", 1.3906311585969236e-10], ["List[int]", 5.558843305530113e-11], ["Dict[str, List[int]]", 4.033497638284495e-11], ["List[str]", 3.8619239731344473e-11], ["str", 3.512306306475771e-11]], "has_su": [["dict", 0.19999999997870607], ["Tuple[Any, Any]", 0.19999999997870607], ["PyLibs.IPython.utils.tests.test_wildcard.obj_t", 0.19999999997870607], ["int", 3.8510432980118187e-11], ["List[Tuple[int, str]]", 2.8451176974140396e-11], ["float", 2.2125069717417302e-11], ["list", 1.7383056250502416e-11]], "has_sudo": [["dict", 0.19999999997870607], ["Tuple[Any, Any]", 0.19999999997870607], ["PyLibs.IPython.utils.tests.test_wildcard.obj_t", 0.19999999997870607], ["int", 3.8510432980118187e-11], ["List[Tuple[int, str]]", 2.8451176974140396e-11], ["float", 2.2125069717417302e-11], ["list", 1.7383056250502416e-11]], "msg": [["str", 0.41243969064529173], ["bool", 0.1018169443961077], ["Dict[str, bool]", 0.0886738514356593], ["list", 0.08820253680735292]]}}, {"docstring": {"func": "Preprocess the playbook data for become attributes", "long_descr": "This is called from the Base object's preprocess_data() method which\nin turn is called pretty much anytime any sort of playbook object\n(plays, tasks, blocks, etc) is created.", "ret": null}, "fn_lc": [[59, 4], [94, 17]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "_preprocess_data_become", "params": {"ds": "", "self": ""}, "params_descr": {"ds": "", "self": ""}, "params_occur": {"ds": [["self", "_detect_privilege_escalation_conflict", "ds"], ["ds", "ds"], ["ds", "ds"], ["ds", "ds"], ["ds", "ds"], ["ds", "ds"], ["ds", "ds"]], "self": [["self", "_detect_privilege_escalation_conflict", "ds"]]}, "params_p": {"args": [], "ds": [["float", 0.3191862728707937], ["keras.utils.Sequence", 0.08471993905649729], ["bytes", 0.08263613775366566]], "kwargs": [], "self": []}, "q_name": "Become._preprocess_data_become", "ret_exprs": ["return ds"], "ret_type": "", "ret_type_p": [["Dict[str, bool]", 0.28222301933145005], ["Dict[str, Any]", 0.10993331706359492], ["int", 0.09681808857646519], ["dict", 0.08228937810535064]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "if we are becoming someone else, but some fields are unset,", "long_descr": "make sure they're initialized to the default config values", "ret": null}, "fn_lc": [[96, 4], [103, 51]], "fn_var_ln": {"become_method": [[101, 16], [101, 29]], "become_user": [[103, 16], [103, 27]]}, "fn_var_occur": {"become_method": [["become_method", "None"], ["become_method", "C", "DEFAULT_BECOME_METHOD"]], "become_user": [["become_user", "None"], ["become_user", "C", "DEFAULT_BECOME_USER"]]}, "name": "set_become_defaults", "params": {"become": "", "become_method": "", "become_user": "", "self": ""}, "params_descr": {"become": "", "become_method": "", "become_user": "", "self": ""}, "params_occur": {"become": [], "become_method": [["become_method", "None"], ["become_method", "C", "DEFAULT_BECOME_METHOD"]], "become_user": [["become_user", "None"], ["become_user", "C", "DEFAULT_BECOME_USER"]], "self": []}, "params_p": {"args": [], "become": [["str", 0.15620545740505537], ["bool", 0.09527830406398334], ["Optional[str]", 0.091515796536787], ["Callable[[Any], bool]", 0.08026063193830242], ["float", 0.08026063193830242]], "become_method": [["Optional[float]", 0.22782396578556788], ["Optional[bool]", 0.21964652447574687], ["Optional[str]", 0.09428317156931548], ["Optional[int]", 0.0925818159526386], ["List[str]", 0.09145732601311807], ["bool", 0.09134626186968034]], "become_user": [["str", 0.5728328338584617], ["Optional[str]", 0.42716716614153827]], "kwargs": [], "self": []}, "q_name": "Become.set_become_defaults", "ret_exprs": [], "ret_type": "", "variables": {"become_method": "", "become_user": ""}, "variables_p": {"become_method": [["List[str]", 0.3158938101703842], ["List[int]", 0.1956642636300381], ["Generator[Dict[str, Any], None, None]", 0.09967766165268808], ["Pattern[str]", 0.09946233855584488], ["List[tuple]", 0.09675059235531158], ["Tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str]", 0.09668451027480217], ["Tuple[str]", 0.0958668233609309]], "become_user": [["str", 0.8932699401795413], ["Pattern[str]", 0.10673005982045856]]}}], "name": "Become", "q_name": "Become", "variables": {"_become": "", "_become_flags": "", "_become_method": "", "_become_user": ""}, "variables_p": {"_become": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "_become_flags": [["bool", 0.4], ["hypha.apply.utils.fields.RichTextField", 0.1], ["Dict[str, Union[bool, str]]", 0.1], ["List[Union[Any, Any]]", 0.1], ["List[str]", 0.1], ["str", 0.1], ["tuple", 0.1]], "_become_method": [["List[str]", 0.19999999999999998], ["int", 0.09999999999999999], ["Final", 0.09999999999999999], ["Tuple[str, str, str, str]", 0.09999999999999999], ["Dict[str, str]", 0.09999999999999999], ["Tuple[str]", 0.09999999999999999], ["staticmethod", 0.09999999999999999], ["FrozenSet[str]", 0.09999999999999999]], "_become_user": [["str", 0.49999999999999994], ["int", 0.3], ["List[str]", 0.09999999999999999], ["Union[Literal, str]", 0.09999999999999999]]}}], "funcs": [], "imports": ["__future__", "absolute_import", "division", "print_function", "ansible", "constants", "C", "ansible", "errors", "AnsibleError", "AnsibleParserError", "ansible", "playbook", "attribute", "Attribute", "FieldAttribute", "__main__", "display", "ansible", "utils", "display", "Display"], "mod_var_ln": {"__metaclass__": [[20, 0], [20, 13]], "display": [[30, 4], [30, 11]]}, "mod_var_occur": {"__metaclass__": [], "display": [["display", "deprecated"], ["display", "deprecated"]]}, "no_types_annot": {"D": 0, "I": 0, "U": 19}, "session_id": "M6oqDC12oWOJFM_N1XpUW0jOzfyWf5HjhReKraYb0AE", "set": null, "tc": [false, null], "type_annot_cove": 0.0, "typed_seq": "", "untyped_seq": "", "variables": {"__metaclass__": "", "display": ""}, "variables_p": {"__metaclass__": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "display": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["str", 0.1]]}}}