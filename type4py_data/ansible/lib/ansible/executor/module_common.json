{"error": null, "response": {"classes": [{"cls_lc": [[354, 0], [401, 32]], "cls_var_ln": {"IMPORT_PREFIX_SIZE": [[358, 4], [358, 22]]}, "cls_var_occur": {"IMPORT_PREFIX_SIZE": []}, "funcs": [{"docstring": {"func": "Walk the ast tree for the python module.", "long_descr": "Save submodule[.submoduleN][.identifier] into self.submodules\n\nself.submodules will end up with tuples like:\n  - ('basic',)\n  - ('urls', 'fetch_url')\n  - ('database', 'postgres')\n  - ('database', 'postgres', 'quote')\n\nIt's up to calling code to determine whether the final element of the\ndotted strings are module names or something else (function, class, or\nvariable names)", "ret": null}, "fn_lc": [[360, 4], [377, 31]], "fn_var_ln": {"submodules": [[377, 8], [377, 23]]}, "fn_var_occur": {"submodules": [["self", "submodules", "set"]]}, "name": "__init__", "params": {"args": "", "kwargs": "", "self": ""}, "params_descr": {"args": "", "kwargs": "", "self": ""}, "params_occur": {"args": [["super", "ModuleDepFinder", "self", "__init__", "args", "kwargs"]], "kwargs": [["super", "ModuleDepFinder", "self", "__init__", "args", "kwargs"]], "self": [["super", "ModuleDepFinder", "self", "__init__", "args", "kwargs"], ["self", "submodules", "set"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "ModuleDepFinder.__init__", "ret_exprs": [], "ret_type": "", "variables": {"submodules": ""}, "variables_p": {"submodules": [["str", 0.30000000000000004], ["Dict[str, Any]", 0.1], ["dict", 0.1], ["int", 0.1]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[379, 4], [385, 32]], "fn_var_ln": {"py_mod": [[383, 12], [383, 18]]}, "fn_var_occur": {"py_mod": [["py_mod", "alias", "name", "self", "IMPORT_PREFIX_SIZE"], ["py_mod", "tuple", "py_mod", "split"], ["self", "submodules", "add", "py_mod"]]}, "name": "visit_Import", "params": {"node": "", "self": ""}, "params_descr": {"node": "", "self": ""}, "params_occur": {"node": [["a", "a", "node", "names", "a", "name", "startswith"], ["self", "generic_visit", "node"]], "self": [["py_mod", "alias", "name", "self", "IMPORT_PREFIX_SIZE"], ["self", "submodules", "add", "py_mod"], ["self", "generic_visit", "node"]]}, "params_p": {"args": [], "kwargs": [], "node": [], "self": []}, "q_name": "ModuleDepFinder.visit_Import", "ret_exprs": [], "ret_type": "", "variables": {"py_mod": ""}, "variables_p": {"py_mod": [["int", 0.5329986747481872], ["List[int]", 0.19803910984173362], ["float", 0.09134917751386554]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[387, 4], [401, 32]], "fn_var_ln": {"py_mod": [[394, 16], [394, 22]], "where_from": [[389, 12], [389, 22]]}, "fn_var_occur": {"py_mod": [["py_mod", "tuple", "where_from", "split"], ["self", "submodules", "add", "py_mod", "alias", "name"]], "where_from": [["where_from", "node", "module", "self", "IMPORT_PREFIX_SIZE"], ["py_mod", "tuple", "where_from", "split"]]}, "name": "visit_ImportFrom", "params": {"node": "", "self": ""}, "params_descr": {"node": "", "self": ""}, "params_occur": {"node": [["node", "module", "startswith"], ["where_from", "node", "module", "self", "IMPORT_PREFIX_SIZE"], ["node", "names"], ["node", "names"], ["self", "generic_visit", "node"]], "self": [["where_from", "node", "module", "self", "IMPORT_PREFIX_SIZE"], ["self", "submodules", "add", "py_mod", "alias", "name"], ["self", "submodules", "add", "alias", "name"], ["self", "generic_visit", "node"]]}, "params_p": {"args": [], "kwargs": [], "node": [], "self": []}, "q_name": "ModuleDepFinder.visit_ImportFrom", "ret_exprs": [], "ret_type": "", "variables": {"py_mod": "", "where_from": ""}, "variables_p": {"py_mod": [["Type[str]", 0.36325213189105426], ["Dict[str, Any]", 0.1293353987994685], ["dict", 0.11450673486115664], ["Tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str]", 0.10294008677348397], ["Dict[str, str]", 0.09081303297276357], ["Dict[str, Union[int, str]]", 0.09081303297276357]], "where_from": [["float", 0.2077415575149604], ["T", 0.10318021626520944], ["int", 0.1020271582452539], ["Optional[List[int]]", 0.09447926246557749], ["str", 0.09424674502177086]]}}], "name": "ModuleDepFinder", "q_name": "ModuleDepFinder", "variables": {"IMPORT_PREFIX_SIZE": ""}, "variables_p": {"IMPORT_PREFIX_SIZE": [["int", 0.6], ["Tuple[int, int]", 0.09999999999999999], ["str", 0.09999999999999999], ["bool", 0.09999999999999999]]}}], "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[334, 0], [342, 26]], "fn_var_ln": {"buf": [[336, 4], [336, 7]], "l": [[338, 8], [338, 9]]}, "fn_var_occur": {"buf": [["buf", "append", "line"], ["join", "buf"]], "l": [["l", "line", "strip"], ["l", "l", "startswith"]]}, "name": "_strip_comments", "params": {"source": ""}, "params_descr": {"source": ""}, "params_occur": {"source": [["source", "splitlines"]]}, "params_p": {"args": [], "kwargs": [], "source": [["str", 2.68871904225348e-11], ["bool", 1.931831503938269e-11], ["Optional[str]", 1.4062340164004775e-11]]}, "q_name": "_strip_comments", "ret_exprs": ["return u'n'.join(buf)"], "ret_type": "", "ret_type_p": [["int", 0.4723299068985002], ["str", 0.3255591078289002], ["dict", 0.10751810605969951]], "variables": {"buf": "", "l": ""}, "variables_p": {"buf": [["list", 0.9999999999999999]], "l": [["str", 0.8057093157114028], ["Callable(open)[..., Any][[[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal], default), Named(buffering, int, default), Named(encoding, Optional[str], default), Named(errors, Optional[str], default), Named(newline, Optional[str], default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.TextIOWrapper][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, Literal), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.FileIO][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, Union[Literal[-1], Literal], default), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.BufferedRandom][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, Union[Literal[-1], Literal], default), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.BufferedWriter][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, Union[Literal[-1], Literal], default), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.BufferedReader][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, int), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], BinaryIO][Any, Any]]", 0.12133411895053528], ["Union[Literal, Literal]", 0.07295656533806211]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[404, 0], [410, 15]], "fn_var_ln": {"data": [[408, 4], [408, 8]], "fd": [[407, 4], [407, 6]]}, "fn_var_occur": {"data": [["data", "fd", "read"]], "fd": [["fd", "open", "path"], ["data", "fd", "read"], ["fd", "close"]]}, "name": "_slurp", "params": {"path": ""}, "params_descr": {"path": ""}, "params_occur": {"path": [["os", "path", "exists", "path"], ["AnsibleError", "os", "path", "abspath", "path"], ["fd", "open", "path"]]}, "params_p": {"args": [], "kwargs": [], "path": [["str", 1.0]]}, "q_name": "_slurp", "ret_exprs": ["return data"], "ret_type": "", "ret_type_p": [["str", 0.2618957145135596], ["raiden.utils.signer.Signer", 0.17499926704194727], ["Optional[float]", 0.16455688318651607], ["int", 0.10872215137970408], ["List[Dict[str, Any]]", 0.10515277519084046], ["Dict[str, str]", 0.0958053345631056], ["bool", 0.0888678741243269]], "variables": {"data": "", "fd": ""}, "variables_p": {"data": [["bytes", 0.2346306697787311], ["str", 0.20530286900736505], ["Dict[str, Union[Any, Any]]", 0.18300777067065582], ["Dict[str, bytes]", 0.10082620160906648], ["Tuple[List[str], List[str]]", 0.09322471826352573], ["list", 0.09150388533532791], ["Type[List[Any]]", 0.09150388533532791]], "fd": [["str", 0.8291320676672389], ["int", 0.0908282395945793], ["Dict[int, List[int]]", 0.08003969273818169]]}}, {"docstring": {"func": "Note not stellar API:", "long_descr": "Returns None instead of always returning a shebang line.  Doing it this\nway allows the caller to decide to use the shebang it read from the\nfile rather than trust that we reformatted what they already have\ncorrectly.", "ret": null}, "fn_lc": [[413, 0], [432, 33]], "fn_var_ln": {"interpreter": [[426, 4], [426, 15]], "interpreter_config": [[421, 4], [421, 22]], "shebang": [[430, 8], [430, 15]]}, "fn_var_occur": {"interpreter": [["interpreter_config", "os", "path", "basename", "interpreter", "strip"], ["None", "interpreter"], ["interpreter", "task_vars", "interpreter_config", "strip"], ["shebang", "interpreter"], ["shebang", "interpreter"]], "interpreter_config": [["interpreter_config", "os", "path", "basename", "interpreter", "strip"], ["interpreter_config", "task_vars"], ["interpreter", "task_vars", "interpreter_config", "strip"]], "shebang": [["shebang", "interpreter"], ["shebang", "shebang", "join", "args"], ["shebang", "interpreter"]]}, "name": "_get_shebang", "params": {"args": "", "interpreter": "", "task_vars": ""}, "params_descr": {"args": "", "interpreter": "", "task_vars": ""}, "params_occur": {"args": [["shebang", "shebang", "join", "args"]], "interpreter": [["interpreter_config", "os", "path", "basename", "interpreter", "strip"], ["None", "interpreter"], ["interpreter", "task_vars", "interpreter_config", "strip"], ["shebang", "interpreter"], ["shebang", "interpreter"]], "task_vars": [["interpreter_config", "task_vars"], ["interpreter", "task_vars", "interpreter_config", "strip"]]}, "params_p": {"args": [], "interpreter": [["str", 0.3800490436086311], ["raiden.utils.Optional[uuid.UUID]", 0.1743646248720579], ["Optional[bytes]", 0.16592849465565337], ["int", 0.0876464306301949]], "kwargs": [], "task_vars": [["str", 0.115841872327886], ["Set[str]", 0.10012424814347835], ["Dict[str, Any]", 0.0946263089105361], ["bool", 0.08131837012031182]]}, "q_name": "_get_shebang", "ret_exprs": ["return (None, interpreter)", "return (shebang, interpreter)"], "ret_type": "", "ret_type_p": [["Optional[int]", 0.2363435859947255], ["Optional[str]", 0.18885481834707435], ["bool", 0.11083421946405181], ["str", 0.0876659646874396], ["dict", 0.07986894610219684]], "variables": {"interpreter": "", "interpreter_config": "", "shebang": ""}, "variables_p": {"interpreter": [["int", 0.5340570866161478], ["Type[str]", 0.18974304492312688], ["list", 0.10722039275925525], ["Union[Literal, Literal]", 0.08843340979012973]], "interpreter_config": [["str", 0.2770937677519839], ["int", 0.14121578197894286], ["bytes", 0.07281422790470138], ["Dict[str, int]", 0.06804634569073865]], "shebang": [["str", 0.4651577312438896], ["Tuple[Any, Any, Any, Any, Any, Any]", 0.10000225423887814]]}}, {"docstring": {"func": "Using ModuleDepFinder, make sure we have all of the module_utils files that", "long_descr": "the module its module_utils files needs.", "ret": null}, "fn_lc": [[435, 0], [537, 43]], "fn_var_ln": {"finder": [[442, 4], [442, 10]], "idx": [[462, 12], [462, 15]], "module_info": [[470, 20], [470, 31]], "msg": [[478, 12], [478, 15]], "normalized_modules": [[450, 4], [450, 22]], "py_module_file_name": [[524, 8], [524, 27]], "py_module_name": [[488, 12], [488, 26]], "py_module_path": [[523, 8], [523, 22]], "py_pkg_name": [[509, 16], [509, 27]], "tree": [[441, 4], [441, 8]], "unprocessed_py_module_names": [[520, 4], [520, 31]]}, "fn_var_occur": {"finder": [["finder", "ModuleDepFinder"], ["finder", "visit", "tree"], ["finder", "submodules", "difference", "py_module_names"]], "idx": [["len", "py_module_name", "idx"], ["module_info", "imp", "find_module", "py_module_name", "idx", "os", "path", "join", "_SNIPPET_PATH", "py_module_name", "idx"]], "module_info": [["module_info", "None"], ["module_info", "imp", "find_module", "_SNIPPET_PATH"], ["module_info", "imp", "find_module", "py_module_name", "idx", "os", "path", "join", "_SNIPPET_PATH", "py_module_name", "idx"], ["module_info", "None"], ["module_info", "imp", "PKG_DIRECTORY"], ["py_module_cache", "py_module_name", "module_info", "read"], ["module_info", "close"]], "msg": [["msg", "name"], ["msg", "append", "py_module_name", "py_module_name"], ["msg", "append", "py_module_name"], ["AnsibleError", "join", "msg"]], "normalized_modules": [["normalized_modules", "set"], ["normalized_modules", "add", "py_module_name"], ["normalized_modules", "add", "py_module_name"], ["normalized_modules", "add", "py_pkg_name"], ["unprocessed_py_module_names", "normalized_modules", "difference", "py_module_names"]], "py_module_file_name": [["py_module_file_name", "py_module_path"], ["zf", "writestr", "os", "path", "join", "py_module_file_name", "py_module_cache", "py_module_name"]], "py_module_name": [["len", "py_module_name", "idx"], ["module_info", "imp", "find_module", "py_module_name", "idx", "os", "path", "join", "_SNIPPET_PATH", "py_module_name", "idx"], ["msg", "append", "py_module_name", "py_module_name"], ["msg", "append", "py_module_name"], ["py_module_name", "py_module_name"], ["py_module_name", "py_module_names"], ["py_module_name", "py_module_cache"], ["py_module_cache", "py_module_name", "_slurp", "os", "path", "join", "os", "path", "join", "_SNIPPET_PATH", "py_module_name"], ["normalized_modules", "add", "py_module_name"], ["py_module_cache", "py_module_name", "module_info", "read"], ["normalized_modules", "add", "py_module_name"], ["range", "len", "py_module_name"], ["py_pkg_name", "py_module_name", "i"], ["py_module_path", "os", "path", "join", "py_module_name"], ["zf", "writestr", "os", "path", "join", "py_module_file_name", "py_module_cache", "py_module_name"]], "py_module_path": [["py_module_path", "os", "path", "join", "py_module_name"], ["py_module_file_name", "py_module_path"]], "py_pkg_name": [["py_pkg_name", "py_module_name", "i"], ["py_pkg_name", "py_module_names"], ["normalized_modules", "add", "py_pkg_name"], ["py_module_cache", "py_pkg_name", "_slurp", "os", "path", "join", "_SNIPPET_PATH", "py_pkg_name"]], "tree": [["tree", "ast", "parse", "data"], ["finder", "visit", "tree"]], "unprocessed_py_module_names": [["unprocessed_py_module_names", "normalized_modules", "difference", "py_module_names"], ["py_module_names", "update", "unprocessed_py_module_names"]]}, "name": "recursive_finder", "params": {"data": "", "name": "", "py_module_cache": "", "py_module_names": "", "zf": ""}, "params_descr": {"data": "", "name": "", "py_module_cache": "", "py_module_names": "", "zf": ""}, "params_occur": {"data": [["tree", "ast", "parse", "data"]], "name": [["msg", "name"]], "py_module_cache": [["py_module_name", "py_module_cache"], ["py_module_cache", "py_module_name", "_slurp", "os", "path", "join", "os", "path", "join", "_SNIPPET_PATH", "py_module_name"], ["py_module_cache", "py_module_name", "module_info", "read"], ["py_module_cache", "py_pkg_name", "_slurp", "os", "path", "join", "_SNIPPET_PATH", "py_pkg_name"], ["zf", "writestr", "os", "path", "join", "py_module_file_name", "py_module_cache", "py_module_name"], ["recursive_finder", "py_module_file", "py_module_cache", "py_module_file", "py_module_names", "py_module_cache", "zf"], ["py_module_cache", "py_module_file"]], "py_module_names": [["finder", "submodules", "difference", "py_module_names"], ["py_module_name", "py_module_names"], ["py_pkg_name", "py_module_names"], ["unprocessed_py_module_names", "normalized_modules", "difference", "py_module_names"], ["py_module_names", "update", "unprocessed_py_module_names"], ["recursive_finder", "py_module_file", "py_module_cache", "py_module_file", "py_module_names", "py_module_cache", "zf"]], "zf": [["zf", "writestr", "os", "path", "join", "py_module_file_name", "py_module_cache", "py_module_name"], ["recursive_finder", "py_module_file", "py_module_cache", "py_module_file", "py_module_names", "py_module_cache", "zf"]]}, "params_p": {"args": [], "data": [["str", 0.39158979451177567], ["Optional[str]", 0.14512569088209804], ["Dict[str, str]", 0.09097603403051804], ["dict", 0.09051480876285506], ["bool", 0.08926961087470839], ["int", 0.08875837743115006]], "kwargs": [], "name": [["str", 0.6757944069252251], ["Optional[str]", 0.22611220630743992]], "py_module_cache": [["str", 0.2911055917930603], ["bool", 0.1917018721503373], ["Optional[List[str]]", 0.12722459445814355], ["Optional[str]", 0.10815355573778333], ["Union[str, list]", 0.09011251371033827], ["dict", 0.09011251371033827]], "py_module_names": [["str", 0.8105009964283397], ["bool", 0.18949900357166022]], "zf": [["str", 0.9150810813958433], ["Union[None, str]", 0.08491891860415678]]}, "q_name": "recursive_finder", "ret_exprs": [], "ret_type": "", "variables": {"finder": "", "idx": "", "module_info": "", "msg": "", "normalized_modules": "", "py_module_file_name": "", "py_module_name": "", "py_module_path": "", "py_pkg_name": "", "tree": "", "unprocessed_py_module_names": ""}, "variables_p": {"finder": [["str", 0.36503976406674854], ["dict", 0.13445855663924602]], "idx": [["str", 0.4054437895925368], ["Dict[str, str]", 0.2081256122026917], ["List[str]", 0.18081846227162682], ["Dict[str, Tuple]", 0.11550789806833532]], "module_info": [["str", 0.12869812226448551], ["Optional[str]", 0.10781008800372062], ["Dict[str, str]", 0.10496756122631648], ["List[str]", 0.09975924598210614], ["Type[List[Any]]", 0.09721014262240915], ["Dict[str, Union[Any, str]]", 0.0924341650997277], ["Union[dict, os._Environ[Any]]", 0.09240571178896063]], "msg": [["str", 0.4563527891215787], ["List[str]", 0.3499251716731232], ["list", 0.0801762605457918]], "normalized_modules": [["Tuple[str]", 0.0980781539438796], ["OrderedDict[str, str]", 0.07932156966013967], ["dict", 0.07853087277049761]], "py_module_file_name": [["str", 1.0]], "py_module_name": [["str", 0.5898046701181198], ["List[str]", 0.2240368049295307], ["list", 0.09288020616550231]], "py_module_path": [["str", 0.9999999999999998]], "py_pkg_name": [["str", 0.3807033287358205], ["List[str]", 0.2422888449554379], ["Set[str]", 0.20673650536940477], ["set", 0.0890429889836137], ["list", 0.08122833195572307]], "tree": [["Union[dict, Dict[str, int]]", 0.186972493231575]], "unprocessed_py_module_names": [["str", 0.41175340862418136], ["List[str]", 0.22556730481382753], ["Set[str]", 0.18498764728148942], ["Dict[str, Any]", 0.09036627142168263]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[540, 0], [543, 49]], "fn_var_ln": {"start": [[542, 4], [542, 9]], "textchars": [[541, 4], [541, 13]]}, "fn_var_occur": {"start": [["start", "module_data"], ["bool", "start", "translate", "None", "textchars"]], "textchars": [["textchars", "bytearray", "set", "set", "range", "set"], ["bool", "start", "translate", "None", "textchars"]]}, "name": "_is_binary", "params": {"module_data": ""}, "params_descr": {"module_data": ""}, "params_occur": {"module_data": [["start", "module_data"]]}, "params_p": {"args": [], "kwargs": [], "module_data": [["dict", 0.2857229291816119], ["str", 0.20520539652597553], ["int", 0.10176180338454856], ["torch.utils.data.DataLoader", 0.10097598351035864]]}, "q_name": "_is_binary", "ret_exprs": ["return bool(start.translate(None, textchars))"], "ret_type": "", "ret_type_p": [["bool", 0.6778910285372193], ["Optional[Callable[[bool], None]]", 0.09945568713599379]], "variables": {"start": "", "textchars": ""}, "variables_p": {"start": [["int", 0.3190074615665639], ["bool", 0.20023783029717462], ["Tuple[str, str, str, str, str]", 0.09162941686790245], ["Tuple[str, str, str]", 0.09162941686790245]], "textchars": [["set", 0.3002771242964256], ["Set[str]", 0.15749809038837223], ["List[List[int]]", 0.12072047820276949], ["Dict[str, Optional[str]]", 0.09493249433828962], ["dict", 0.09182399300333736], ["int", 0.07956589187380773], ["List[int]", 0.07874904519418612]]}}, {"docstring": {"func": "Given the source of the module, convert it to a Jinja2 template to insert", "long_descr": "module code and return whether it's a new or old style module.", "ret": null}, "fn_lc": [[546, 0], [740, 47]], "fn_var_ln": {"cached_module_filename": [[600, 8], [600, 30]], "compression_method": [[597, 12], [597, 30]], "facility": [[737, 8], [737, 16]], "interpreter": [[681, 8], [681, 19]], "interpreter_parts": [[680, 8], [680, 25]], "lines": [[695, 8], [695, 13]], "lock": [[617, 16], [617, 20]], "lookup_path": [[599, 8], [599, 19]], "module_args_json": [[722, 8], [722, 24]], "module_data": [[738, 8], [738, 19]], "module_style": [[578, 26], [578, 38]], "module_substyle": [[578, 8], [578, 23]], "output": [[586, 4], [586, 10]], "params": [[590, 8], [590, 14]], "ps_data": [[698, 16], [698, 23]], "py_module_cache": [[639, 20], [639, 35]], "py_module_names": [[587, 4], [587, 19]], "python_repred_args": [[729, 8], [729, 26]], "python_repred_params": [[591, 8], [591, 28]], "shebang": [[712, 8], [712, 15]], "zf": [[628, 20], [628, 22]], "zipdata": [[672, 8], [672, 15]], "zipoutput": [[627, 20], [627, 29]]}, "fn_var_occur": {"cached_module_filename": [["cached_module_filename", "os", "path", "join", "lookup_path", "module_name", "module_compression"], ["os", "path", "exists", "cached_module_filename"], ["display", "debug", "cached_module_filename"], ["zipdata", "open", "cached_module_filename", "read"], ["os", "path", "exists", "cached_module_filename"], ["open", "cached_module_filename", "f"], ["os", "rename", "cached_module_filename", "cached_module_filename"], ["zipdata", "open", "cached_module_filename", "read"]], "compression_method": [["compression_method", "getattr", "zipfile", "module_compression"], ["compression_method", "zipfile", "ZIP_STORED"], ["zf", "zipfile", "ZipFile", "zipoutput", "mode", "compression", "compression_method"]], "facility": [["facility", "to_bytes", "task_vars", "get", "C", "DEFAULT_SYSLOG_FACILITY", "errors"], ["module_data", "module_data", "replace", "facility"]], "interpreter": [["shebang", "interpreter", "_get_shebang", "task_vars"], ["interpreter_parts", "interpreter", "split"], ["interpreter", "format", "join", "interpreter_parts"], ["output", "write", "to_bytes", "ACTIVE_ANSIBALLZ_TEMPLATE", "dict", "zipdata", "zipdata", "ansible_module", "module_name", "params", "python_repred_params", "shebang", "shebang", "interpreter", "interpreter", "coding", "ENCODING_STRING"]], "interpreter_parts": [["interpreter_parts", "interpreter", "split"], ["interpreter", "format", "join", "interpreter_parts"]], "lines": [["lines", "module_data", "split"]], "lock": [["lock", "action_write_locks", "action_write_locks", "module_name"], ["lock", "action_write_locks", "action_write_locks", "None"], ["display", "debug", "id", "lock"]], "lookup_path": [["lookup_path", "os", "path", "join", "C", "DEFAULT_LOCAL_TMP"], ["cached_module_filename", "os", "path", "join", "lookup_path", "module_name", "module_compression"], ["os", "path", "exists", "lookup_path"], ["os", "makedirs", "lookup_path"]], "module_args_json": [["module_args_json", "to_bytes", "json", "dumps", "module_args"], ["module_data", "module_data", "replace", "REPLACER_JSONARGS", "module_args_json"], ["module_args_json", "to_bytes", "json", "dumps", "module_args"], ["python_repred_args", "to_bytes", "repr", "module_args_json"], ["module_data", "module_data", "replace", "REPLACER_JSONARGS", "module_args_json"]], "module_data": [["_is_binary", "module_data"], ["REPLACER", "module_data"], ["module_data", "module_data", "replace", "REPLACER"], ["REPLACER_WINDOWS", "module_data"], ["REPLACER_JSONARGS", "module_data"], ["module_data", "module_style", "shebang"], ["zf", "writestr", "module_name", "module_data"], ["recursive_finder", "module_name", "module_data", "py_module_names", "py_module_cache", "zf"], ["module_data", "output", "getvalue"], ["lines", "module_data", "split"], ["module_data", "output", "getvalue"], ["module_data", "module_data", "replace", "REPLACER_JSONARGS", "module_args_json"], ["module_data", "module_data", "replace", "REPLACER_VERSION", "to_bytes", "repr", "__version__"], ["module_data", "module_data", "replace", "REPLACER_COMPLEX", "python_repred_args"], ["module_data", "module_data", "replace", "REPLACER_SELINUX", "to_bytes", "join", "C", "DEFAULT_SELINUX_SPECIAL_FS"], ["module_data", "module_data", "replace", "REPLACER_JSONARGS", "module_args_json"], ["module_data", "module_data", "replace", "facility"], ["module_data", "module_style", "shebang"]], "module_style": [["module_substyle", "module_style"], ["module_substyle", "module_style"], ["module_substyle", "module_style"], ["module_data", "module_style", "shebang"], ["module_data", "module_style", "shebang"]], "module_substyle": [["module_substyle", "module_style"], ["module_substyle", "module_style"], ["module_substyle", "module_style"]], "output": [["output", "BytesIO"], ["output", "write", "to_bytes", "ACTIVE_ANSIBALLZ_TEMPLATE", "dict", "zipdata", "zipdata", "ansible_module", "module_name", "params", "python_repred_params", "shebang", "shebang", "interpreter", "interpreter", "coding", "ENCODING_STRING"], ["module_data", "output", "getvalue"], ["output", "write", "ps_data"], ["output", "write", "line"], ["module_data", "output", "getvalue"]], "params": [["params", "dict", "ANSIBLE_MODULE_ARGS", "module_args"], ["python_repred_params", "repr", "json", "dumps", "params"], ["output", "write", "to_bytes", "ACTIVE_ANSIBALLZ_TEMPLATE", "dict", "zipdata", "zipdata", "ansible_module", "module_name", "params", "python_repred_params", "shebang", "shebang", "interpreter", "interpreter", "coding", "ENCODING_STRING"]], "ps_data": [["ps_data", "_slurp", "os", "path", "join", "_SNIPPET_PATH"], ["output", "write", "ps_data"]], "py_module_cache": [["recursive_finder", "module_name", "module_data", "py_module_names", "py_module_cache", "zf"]], "py_module_names": [["py_module_names", "set"], ["recursive_finder", "module_name", "module_data", "py_module_names", "py_module_cache", "zf"], ["py_module_names", "add"]], "python_repred_args": [["python_repred_args", "to_bytes", "repr", "module_args_json"], ["module_data", "module_data", "replace", "REPLACER_COMPLEX", "python_repred_args"]], "python_repred_params": [["python_repred_params", "repr", "json", "dumps", "params"], ["output", "write", "to_bytes", "ACTIVE_ANSIBALLZ_TEMPLATE", "dict", "zipdata", "zipdata", "ansible_module", "module_name", "params", "python_repred_params", "shebang", "shebang", "interpreter", "interpreter", "coding", "ENCODING_STRING"]], "shebang": [["shebang", "None"], ["module_data", "module_style", "shebang"], ["shebang", "interpreter", "_get_shebang", "task_vars"], ["shebang", "None"], ["output", "write", "to_bytes", "ACTIVE_ANSIBALLZ_TEMPLATE", "dict", "zipdata", "zipdata", "ansible_module", "module_name", "params", "python_repred_params", "shebang", "shebang", "interpreter", "interpreter", "coding", "ENCODING_STRING"], ["module_data", "module_style", "shebang"]], "zf": [["zf", "zipfile", "ZipFile", "zipoutput", "mode", "compression", "compression_method"], ["zf", "writestr", "to_bytes", "__version__", "to_bytes", "__author__"], ["zf", "writestr"], ["zf", "writestr", "module_name", "module_data"], ["recursive_finder", "module_name", "module_data", "py_module_names", "py_module_cache", "zf"], ["zf", "close"]], "zipdata": [["zipdata", "None"], ["zipdata", "open", "cached_module_filename", "read"], ["zipdata", "base64", "b64encode", "zipoutput", "getvalue"], ["f", "write", "zipdata"], ["zipdata", "None"], ["zipdata", "open", "cached_module_filename", "read"], ["zipdata", "to_text", "zipdata", "errors"], ["output", "write", "to_bytes", "ACTIVE_ANSIBALLZ_TEMPLATE", "dict", "zipdata", "zipdata", "ansible_module", "module_name", "params", "python_repred_params", "shebang", "shebang", "interpreter", "interpreter", "coding", "ENCODING_STRING"]], "zipoutput": [["zipoutput", "BytesIO"], ["zf", "zipfile", "ZipFile", "zipoutput", "mode", "compression", "compression_method"], ["zipdata", "base64", "b64encode", "zipoutput", "getvalue"]]}, "name": "_find_snippet_imports", "params": {"module_args": "", "module_compression": "", "module_data": "", "module_name": "", "module_path": "", "task_vars": ""}, "params_descr": {"module_args": "", "module_compression": "", "module_data": "", "module_name": "", "module_path": "", "task_vars": ""}, "params_occur": {"module_args": [["params", "dict", "ANSIBLE_MODULE_ARGS", "module_args"], ["module_args_json", "to_bytes", "json", "dumps", "module_args"], ["module_args_json", "to_bytes", "json", "dumps", "module_args"]], "module_compression": [["compression_method", "getattr", "zipfile", "module_compression"], ["display", "warning", "module_compression"], ["cached_module_filename", "os", "path", "join", "lookup_path", "module_name", "module_compression"]], "module_data": [["_is_binary", "module_data"], ["REPLACER", "module_data"], ["module_data", "module_data", "replace", "REPLACER"], ["REPLACER_WINDOWS", "module_data"], ["REPLACER_JSONARGS", "module_data"], ["module_data", "module_style", "shebang"], ["zf", "writestr", "module_name", "module_data"], ["recursive_finder", "module_name", "module_data", "py_module_names", "py_module_cache", "zf"], ["module_data", "output", "getvalue"], ["lines", "module_data", "split"], ["module_data", "output", "getvalue"], ["module_data", "module_data", "replace", "REPLACER_JSONARGS", "module_args_json"], ["module_data", "module_data", "replace", "REPLACER_VERSION", "to_bytes", "repr", "__version__"], ["module_data", "module_data", "replace", "REPLACER_COMPLEX", "python_repred_args"], ["module_data", "module_data", "replace", "REPLACER_SELINUX", "to_bytes", "join", "C", "DEFAULT_SELINUX_SPECIAL_FS"], ["module_data", "module_data", "replace", "REPLACER_JSONARGS", "module_args_json"], ["module_data", "module_data", "replace", "facility"], ["module_data", "module_style", "shebang"]], "module_name": [["cached_module_filename", "os", "path", "join", "lookup_path", "module_name", "module_compression"], ["module_name", "action_write_locks", "action_write_locks"], ["display", "debug", "module_name"], ["lock", "action_write_locks", "action_write_locks", "module_name"], ["display", "debug", "module_name"], ["zf", "writestr", "module_name", "module_data"], ["recursive_finder", "module_name", "module_data", "py_module_names", "py_module_cache", "zf"], ["output", "write", "to_bytes", "ACTIVE_ANSIBALLZ_TEMPLATE", "dict", "zipdata", "zipdata", "ansible_module", "module_name", "params", "python_repred_params", "shebang", "shebang", "interpreter", "interpreter", "coding", "ENCODING_STRING"]], "module_path": [["AnsibleError", "module_path"]], "task_vars": [["shebang", "interpreter", "_get_shebang", "task_vars"], ["facility", "to_bytes", "task_vars", "get", "C", "DEFAULT_SYSLOG_FACILITY", "errors"]]}, "params_p": {"args": [], "kwargs": [], "module_args": [["os.DirEntry", 0.1956651477884779], ["str", 0.18531304673013782], ["dict", 0.11076368521527898], ["bool", 0.0931875984648051], ["utils.CWLObjectType", 0.09258237833374691]], "module_compression": [["str", 0.8974794910563852], ["Tuple[str]", 0.10252050894361461]], "module_data": [["str", 0.5267823182881536], ["dict", 0.0987493590626738]], "module_name": [["str", 0.8810503817417994], ["List[str]", 0.11894961825820054]], "module_path": [["str", 0.9000085313072258], ["Optional[str]", 0.09999146869277425]], "task_vars": [["str", 0.6223860742008274], ["Mapping[str, Any]", 0.09449131273933405], ["int", 0.09449131273933405]]}, "q_name": "_find_snippet_imports", "ret_exprs": ["return module_data, module_style, shebang", "return (module_data, module_style, shebang)"], "ret_type": "", "ret_type_p": [["int", 0.1000637982561476], ["str", 0.09638878395219781], ["list", 0.09638878395219781], ["Optional[Literal[\"only_clustered\", \"include_clustered\"]]", 0.09553245661696719], ["cmk.utils.type_defs.HostName", 0.09553245661696719]], "variables": {"cached_module_filename": "", "compression_method": "", "facility": "", "interpreter": "", "interpreter_parts": "", "lines": "", "lock": "", "lookup_path": "", "module_args_json": "", "module_data": "", "module_style": "", "module_substyle": "", "output": "", "params": "", "ps_data": "", "py_module_cache": "", "py_module_names": "", "python_repred_args": "", "python_repred_params": "", "shebang": "", "zf": "", "zipdata": "", "zipoutput": ""}, "variables_p": {"cached_module_filename": [["str", 0.8903089720236878], ["List[str]", 0.10969102797631228]], "compression_method": [["str", 0.3773076500073863], ["List[str]", 0.11917452438137933], ["Dict[str, Dict[str, float]]", 0.10709333899059294], ["list", 0.10267171627160612], ["Dict[str, bool]", 0.10166418195681681], ["Dict[str, Any]", 0.09787923868661738], ["dict", 0.09420934970560096]], "facility": [["bytes", 0.5233688989601307], ["list", 0.10027171849714347], ["Dict[str, bool]", 0.09102491915116494], ["Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]", 0.08765234268734852]], "interpreter": [["str", 0.8124786600939089], ["int", 0.09324871898851607]], "interpreter_parts": [["List[str]", 0.37852322142810807], ["list", 0.2440860543821349], ["str", 0.18664484990416197], ["Dict[str, Tuple[str, ...]]", 0.10614423897322438]], "lines": [["str", 0.41658330288990403], ["List[str]", 0.2673552193325389], ["Final", 0.1385125548067353], ["Dict[str, Dict[str, Any]]", 0.09446319041347137], ["Tuple[str, str, str, str, str, str, str, str, str, str]", 0.08308573255735026]], "lock": [], "lookup_path": [["str", 1.0]], "module_args_json": [["dict", 0.28641772068770416], ["Dict[str, Any]", 0.209749664309928], ["Tuple[str, str, str]", 0.1698174977666606], ["Dict[str, io.BufferedReader]", 0.08613180531631617], ["int", 0.08426873069378707], ["Dict[str, str]", 0.08255302766657303], ["bytes", 0.08106155355903091]], "module_data": [["dict", 0.11881664816268805], ["Dict[str, Any]", 0.09834323168080279], ["List[Dict[str, str]]", 0.08943634696202939], ["Dict[str, float]", 0.0870291095443327]], "module_style": [["List[str]", 0.11069814668760396], ["str", 0.09817573075938607], ["Type[str]", 0.09548345095212141], ["int", 0.09108386807602492]], "module_substyle": [["List[str]", 0.39999999999999997], ["str", 0.19999999999999998], ["Set[str]", 0.09999999999999999], ["list", 0.09999999999999999], ["Tuple[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any]", 0.09999999999999999]], "output": [["io.StringIO", 0.9118395696726147], ["io.BytesIO", 0.08816043032738538]], "params": [["dict", 0.3623562922082857], ["List[Dict[str, Any]]", 0.16796239811484714]], "ps_data": [["str", 0.2752190343440331], ["List[Tuple[Any, Any, None]]", 0.22667959438195748], ["Dict[str, str]", 0.19212253930812928], ["List[str]", 0.10081454469553508], ["frozenset[Union[bytes, str]]", 0.08907520795359124]], "py_module_cache": [["str", 0.31292467456776313], ["dict", 0.10076672938994403], ["Dict[str, Set[str]]", 0.1003164567476367], ["Dict[str, str]", 0.09940173865754823], ["Dict[str, Union[Any, bool]]", 0.08972827379773003], ["Set[str]", 0.0883608809454845]], "py_module_names": [["dict", 0.4221093229579121], ["str", 0.3070342777352631], ["Final", 0.10118615556327468], ["Set[str]", 0.07951744896102364]], "python_repred_args": [["int", 0.3016201224670083], ["str", 0.28844308565543464], ["List[List[str]]", 0.11751587953989347], ["list", 0.1083889143745621], ["Dict[str, Any]", 0.09201599898155069], ["List[str]", 0.09201599898155069]], "python_repred_params": [["dict", 0.28904591621465847], ["Dict[str, bool]", 0.1694475708652392], ["str", 0.11368221977768558], ["os._Environ", 0.10213529681549516], ["Dict[str, str]", 0.0975013323934115]], "shebang": [["Dict[str, int]", 0.14295446540537665], ["list", 0.09553439480652594]], "zf": [["bytes", 0.2963121590786112], ["os.stat_result", 0.20449204703593787]], "zipdata": [["zipfile.ZipFile", 0.2848611663766527], ["list", 0.18699952232701164], ["Optional[str]", 0.1204380561859891]], "zipoutput": [["List[str]", 0.2762528912890622], ["io.BufferedReader", 0.18047946755408653], ["str", 0.1727024094200805], ["Tuple[str, str]", 0.10173391461057378], ["io.StringIO", 0.09449220996979954], ["io.BufferedWriter", 0.0879383009170297], ["Dict[str, Type[Any]]", 0.08640080623936781]]}}, {"docstring": {"func": "Used to insert chunks of code into modules before transfer rather than", "long_descr": "doing regular python imports.  This allows for more efficient transfer in\na non-bootstrapping scenario by not moving extra files over the wire and\nalso takes care of embedding arguments in the transferred modules.\n\nThis version is done in such a way that local imports can still be\nused in the module code, so IDEs don't have to be aware of what is going on.", "ret": null}, "fn_lc": [[743, 0], [798, 78]], "fn_var_ln": {"args": [[780, 12], [780, 16]], "interpreter": [[782, 12], [782, 23]], "lines": [[777, 8], [777, 13]], "module_data": [[794, 8], [794, 19]], "module_style": [[772, 18], [772, 30]], "new_shebang": [[784, 12], [784, 23]], "shebang": [[796, 8], [796, 15]]}, "fn_var_occur": {"args": [["args", "shlex", "split", "str", "shebang"], ["interpreter", "args"], ["new_shebang", "to_bytes", "_get_shebang", "interpreter", "task_vars", "args", "errors", "nonstring"]], "interpreter": [["interpreter", "args"], ["interpreter", "to_bytes", "interpreter"], ["new_shebang", "to_bytes", "_get_shebang", "interpreter", "task_vars", "args", "errors", "nonstring"], ["os", "path", "basename", "interpreter", "startswith"]], "lines": [["lines", "module_data", "split"], ["lines", "startswith"], ["shebang", "lines", "strip"], ["lines", "shebang", "new_shebang"], ["lines", "insert", "to_bytes", "ENCODING_STRING"], ["module_data", "join", "lines"]], "module_data": [["module_data", "f", "read"], ["module_data", "module_style", "shebang", "_find_snippet_imports", "module_name", "module_data", "module_path", "module_args", "task_vars", "module_compression"], ["module_data", "module_style", "to_text", "shebang", "nonstring"], ["lines", "module_data", "split"], ["module_data", "join", "lines"], ["module_data", "module_style", "to_text", "shebang", "nonstring"]], "module_style": [["module_data", "module_style", "shebang", "_find_snippet_imports", "module_name", "module_data", "module_path", "module_args", "task_vars", "module_compression"], ["module_data", "module_style", "to_text", "shebang", "nonstring"], ["module_data", "module_style", "to_text", "shebang", "nonstring"]], "new_shebang": [["new_shebang", "to_bytes", "_get_shebang", "interpreter", "task_vars", "args", "errors", "nonstring"], ["lines", "shebang", "new_shebang"]], "shebang": [["module_data", "module_style", "shebang", "_find_snippet_imports", "module_name", "module_data", "module_path", "module_args", "task_vars", "module_compression"], ["module_data", "module_style", "to_text", "shebang", "nonstring"], ["shebang", "None"], ["shebang", "lines", "strip"], ["args", "shlex", "split", "str", "shebang"], ["lines", "shebang", "new_shebang"], ["shebang", "to_bytes", "shebang", "errors"], ["module_data", "module_style", "to_text", "shebang", "nonstring"]]}, "name": "modify_module", "params": {"module_args": "", "module_compression": "", "module_name": "", "module_path": "", "task_vars": ""}, "params_descr": {"module_args": "", "module_compression": "", "module_name": "", "module_path": "", "task_vars": ""}, "params_occur": {"module_args": [["module_data", "module_style", "shebang", "_find_snippet_imports", "module_name", "module_data", "module_path", "module_args", "task_vars", "module_compression"]], "module_compression": [["module_data", "module_style", "shebang", "_find_snippet_imports", "module_name", "module_data", "module_path", "module_args", "task_vars", "module_compression"]], "module_name": [["module_data", "module_style", "shebang", "_find_snippet_imports", "module_name", "module_data", "module_path", "module_args", "task_vars", "module_compression"]], "module_path": [["open", "module_path", "f"], ["module_data", "module_style", "shebang", "_find_snippet_imports", "module_name", "module_data", "module_path", "module_args", "task_vars", "module_compression"]], "task_vars": [["module_data", "module_style", "shebang", "_find_snippet_imports", "module_name", "module_data", "module_path", "module_args", "task_vars", "module_compression"], ["new_shebang", "to_bytes", "_get_shebang", "interpreter", "task_vars", "args", "errors", "nonstring"]]}, "params_p": {"args": [], "kwargs": [], "module_args": [["List[str]", 0.2798843548728119], ["Optional[str]", 0.2750893270990338], ["str", 0.26758910294077354]], "module_compression": [["List[str]", 0.2798843548728119], ["Optional[str]", 0.2750893270990338], ["str", 0.26758910294077354]], "module_name": [["List[str]", 0.2798843548728119], ["Optional[str]", 0.2750893270990338], ["str", 0.26758910294077354]], "module_path": [["mypy.errors.Errors", 0.29560266611001546], ["bool", 0.10510335210883583], ["int", 0.09319569434730923]], "task_vars": [["bool", 0.42490866256385457], ["List[str]", 0.18474394932306998], ["str", 0.1010955983397252], ["Dict[str, Any]", 0.1010955983397252], ["list", 0.09533355305935017], ["Optional[Callable]", 0.09282263837427471]]}, "q_name": "modify_module", "ret_exprs": ["return (module_data, module_style, to_text(shebang, nonstring='passthru'))", "return (module_data, module_style, to_text(shebang, nonstring='passthru'))"], "ret_type": "", "ret_type_p": [["bool", 0.30822330412128063], ["str", 0.09803520969142351], ["Optional[str]", 0.0957929480761042]], "variables": {"args": "", "interpreter": "", "lines": "", "module_data": "", "module_style": "", "new_shebang": "", "shebang": ""}, "variables_p": {"args": [["list", 0.18981433820522436], ["List[str]", 0.11207712370842556]], "interpreter": [["int", 0.21974298271448714], ["io.TextIOWrapper", 0.10433498841652705], ["Tuple[Literal, Literal, Literal, Literal, Literal]", 0.09906234107175424], ["str", 0.09204987408246226], ["Optional[str]", 0.08757053570333471]], "lines": [["str", 0.802219483434651], ["List[str]", 0.19778051656534898]], "module_data": [["Dict[str, str]", 0.19297310501128223], ["List[Dict[str, Any]]", 0.12028689396276218], ["List[Tuple[str, str, str, str]]", 0.08773153095679398], ["List[Optional[Any]]", 0.08284904713563873]], "module_style": [["Tuple[Type[Any]]", 0.09929032163240786]], "new_shebang": [["float", 0.098433834557503], ["int", 0.09812267145008406], ["str", 0.09735416636099326], ["bytes", 0.09240536762650399]], "shebang": []}}], "imports": ["__future__", "absolute_import", "division", "print_function", "ast", "base64", "imp", "json", "os", "shlex", "zipfile", "io", "BytesIO", "ansible", "release", "__version__", "__author__", "ansible", "constants", "C", "ansible", "errors", "AnsibleError", "ansible", "module_utils", "_text", "to_bytes", "to_text", "ansible", "executor", "action_write_locks", "__main__", "display", "ansible", "utils", "display", "Display"], "mod_var_ln": {"ACTIVE_ANSIBALLZ_TEMPLATE": [[351, 4], [351, 29]], "ANSIBALLZ_TEMPLATE": [[64, 0], [64, 18]], "ENCODING_STRING": [[57, 0], [57, 15]], "REPLACER": [[48, 0], [48, 8]], "REPLACER_COMPLEX": [[50, 0], [50, 16]], "REPLACER_JSONARGS": [[52, 0], [52, 17]], "REPLACER_SELINUX": [[53, 0], [53, 16]], "REPLACER_VERSION": [[49, 0], [49, 16]], "REPLACER_WINDOWS": [[51, 0], [51, 16]], "_SNIPPET_PATH": [[60, 0], [60, 13]], "__metaclass__": [[21, 0], [21, 13]], "display": [[45, 4], [45, 11]]}, "mod_var_occur": {"ACTIVE_ANSIBALLZ_TEMPLATE": [["output", "write", "to_bytes", "ACTIVE_ANSIBALLZ_TEMPLATE", "dict", "zipdata", "zipdata", "ansible_module", "module_name", "params", "python_repred_params", "shebang", "shebang", "interpreter", "interpreter", "coding", "ENCODING_STRING"]], "ANSIBALLZ_TEMPLATE": [["ACTIVE_ANSIBALLZ_TEMPLATE", "ANSIBALLZ_TEMPLATE"], ["ACTIVE_ANSIBALLZ_TEMPLATE", "_strip_comments", "ANSIBALLZ_TEMPLATE"]], "ENCODING_STRING": [["output", "write", "to_bytes", "ACTIVE_ANSIBALLZ_TEMPLATE", "dict", "zipdata", "zipdata", "ansible_module", "module_name", "params", "python_repred_params", "shebang", "shebang", "interpreter", "interpreter", "coding", "ENCODING_STRING"], ["lines", "insert", "to_bytes", "ENCODING_STRING"]], "REPLACER": [["REPLACER", "module_data"], ["module_data", "module_data", "replace", "REPLACER"]], "REPLACER_COMPLEX": [["module_data", "module_data", "replace", "REPLACER_COMPLEX", "python_repred_args"]], "REPLACER_JSONARGS": [["REPLACER_JSONARGS", "module_data"], ["module_data", "module_data", "replace", "REPLACER_JSONARGS", "module_args_json"], ["module_data", "module_data", "replace", "REPLACER_JSONARGS", "module_args_json"]], "REPLACER_SELINUX": [["module_data", "module_data", "replace", "REPLACER_SELINUX", "to_bytes", "join", "C", "DEFAULT_SELINUX_SPECIAL_FS"]], "REPLACER_VERSION": [["module_data", "module_data", "replace", "REPLACER_VERSION", "to_bytes", "repr", "__version__"]], "REPLACER_WINDOWS": [["REPLACER_WINDOWS", "module_data"], ["REPLACER_WINDOWS", "line"]], "_SNIPPET_PATH": [["module_info", "imp", "find_module", "_SNIPPET_PATH"], ["module_info", "imp", "find_module", "py_module_name", "idx", "os", "path", "join", "_SNIPPET_PATH", "py_module_name", "idx"], ["py_module_cache", "py_module_name", "_slurp", "os", "path", "join", "os", "path", "join", "_SNIPPET_PATH", "py_module_name"], ["py_module_cache", "py_pkg_name", "_slurp", "os", "path", "join", "_SNIPPET_PATH", "py_pkg_name"], ["ps_data", "_slurp", "os", "path", "join", "_SNIPPET_PATH"]], "__metaclass__": [], "display": [["display", "warning", "module_compression"], ["display", "debug", "cached_module_filename"], ["display", "debug", "module_name"], ["display", "debug", "module_name"], ["display", "debug"], ["display", "debug", "id", "lock"], ["display", "debug"], ["display", "debug"], ["display", "debug"], ["display", "debug"], ["display", "debug"]]}, "no_types_annot": {"D": 0, "I": 0, "U": 101}, "session_id": "shesvIhYsPOPTxWnJW4wBBHl8HZ5s6kDt43tcPZRr5k", "set": null, "tc": [false, null], "type_annot_cove": 0.0, "typed_seq": "", "untyped_seq": "", "variables": {"ACTIVE_ANSIBALLZ_TEMPLATE": "", "ANSIBALLZ_TEMPLATE": "", "ENCODING_STRING": "", "REPLACER": "", "REPLACER_COMPLEX": "", "REPLACER_JSONARGS": "", "REPLACER_SELINUX": "", "REPLACER_VERSION": "", "REPLACER_WINDOWS": "", "_SNIPPET_PATH": "", "__metaclass__": "", "display": ""}, "variables_p": {"ACTIVE_ANSIBALLZ_TEMPLATE": [["str", 0.5689992306597235], ["Set[str]", 0.14784287551203187], ["List[str]", 0.10186418271285155]], "ANSIBALLZ_TEMPLATE": [["str", 0.41787793484632274], ["list", 0.06249991113020205]], "ENCODING_STRING": [["bytes", 0.5611079692372934], ["str", 0.22011210871486223], ["int", 0.125319299179412]], "REPLACER": [["str", 0.5917985743389843], ["int", 0.09429909845993556], ["IO[bytes]", 0.0922587099609938]], "REPLACER_COMPLEX": [["str", 0.50647378231718], ["int", 0.11745787394240892], ["Callable(os.path.join)[..., Any][[[Named(a, Union[_PathLike[str], str]), Variable(Union[_PathLike[str], str])], str][Any, Any]]", 0.10100485265092408], ["Dict[str, int]", 0.09463835949045321]], "REPLACER_JSONARGS": [["dict", 0.2817869516587728], ["myia.utils.env.SymbolicKeyInstance", 0.11204406138965348], ["Dict[str, Any]", 0.0939289838862576]], "REPLACER_SELINUX": [["str", 0.5049646109820269], ["Tuple[List[Any], List[Any], List[Any]]", 0.22168343360543105]], "REPLACER_VERSION": [["str", 0.46664822676555523], ["int", 0.3403801575099624], ["Set[str]", 0.11088625728722606]], "REPLACER_WINDOWS": [["Dict[str, Any]", 0.28009917394669237], ["int", 0.2731933491471186], ["Dict[str, Union[Any, Any, Any, Any]]", 0.2610428703946729], ["Dict[str, Tuple[int, int]]", 0.09682578721990587]], "_SNIPPET_PATH": [["str", 0.9130508175164942], ["Optional[str]", 0.08694918248350574]], "__metaclass__": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "display": [["str", 0.7463525661037594], ["int", 0.15189410422700078]]}}}