{"error": null, "response": {"classes": [{"cls_lc": [[52, 0], [858, 44]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[57, 4], [97, 39]], "fn_var_ln": {"_basedir": [[76, 8], [76, 21]], "_group_dict_cache": [[73, 8], [73, 30]], "_group_vars_files": [[79, 8], [79, 30]], "_host_vars_files": [[80, 8], [80, 29]], "_hosts_cache": [[71, 8], [71, 25]], "_loader": [[62, 8], [62, 20]], "_pattern_cache": [[72, 8], [72, 27]], "_playbook_basedir": [[83, 8], [83, 30]], "_restriction": [[89, 8], [89, 25]], "_subset": [[90, 8], [90, 20]], "_variable_manager": [[63, 8], [63, 30]], "_vars_per_group": [[70, 8], [70, 28]], "_vars_per_host": [[69, 8], [69, 27]], "_vars_plugins": [[74, 8], [74, 26]], "groups": [[86, 8], [86, 19]], "host_list": [[61, 8], [61, 22]], "localhost": [[64, 8], [64, 22]]}, "fn_var_occur": {"_basedir": [["self", "_basedir", "self", "basedir"], ["self", "_group_vars_files", "self", "_find_group_vars_files", "self", "_basedir"], ["self", "_host_vars_files", "self", "_find_host_vars_files", "self", "_basedir"]], "_group_dict_cache": [["self", "_group_dict_cache"]], "_group_vars_files": [["self", "_group_vars_files", "self", "_find_group_vars_files", "self", "_basedir"]], "_host_vars_files": [["self", "_host_vars_files", "self", "_find_host_vars_files", "self", "_basedir"]], "_hosts_cache": [["self", "_hosts_cache"]], "_loader": [["self", "_loader", "loader"]], "_pattern_cache": [["self", "_pattern_cache"]], "_playbook_basedir": [["self", "_playbook_basedir", "None"]], "_restriction": [["self", "_restriction", "None"]], "_subset": [["self", "_subset", "None"]], "_variable_manager": [["self", "_variable_manager", "variable_manager"]], "_vars_per_group": [["self", "_vars_per_group"]], "_vars_per_host": [["self", "_vars_per_host"]], "_vars_plugins": [["self", "_vars_plugins"]], "groups": [["self", "groups"]], "host_list": [["self", "host_list", "host_list"], ["self", "parse_inventory", "host_list"]], "localhost": [["self", "localhost", "None"]]}, "name": "__init__", "params": {"host_list": "", "loader": "", "self": "", "variable_manager": ""}, "params_descr": {"host_list": "", "loader": "", "self": "", "variable_manager": ""}, "params_occur": {"host_list": [["self", "host_list", "host_list"], ["self", "parse_inventory", "host_list"]], "loader": [["self", "_loader", "loader"]], "self": [["self", "host_list", "host_list"], ["self", "_loader", "loader"], ["self", "_variable_manager", "variable_manager"], ["self", "localhost", "None"], ["self", "_vars_per_host"], ["self", "_vars_per_group"], ["self", "_hosts_cache"], ["self", "_pattern_cache"], ["self", "_group_dict_cache"], ["self", "_vars_plugins"], ["self", "_basedir", "self", "basedir"], ["self", "_group_vars_files", "self", "_find_group_vars_files", "self", "_basedir"], ["self", "_host_vars_files", "self", "_find_host_vars_files", "self", "_basedir"], ["self", "_playbook_basedir", "None"], ["self", "groups"], ["self", "_restriction", "None"], ["self", "_subset", "None"], ["self", "clear_pattern_cache"], ["self", "clear_group_dict_cache"], ["self", "parse_inventory", "host_list"]], "variable_manager": [["self", "_variable_manager", "variable_manager"]]}, "params_p": {"args": [], "host_list": [["bool", 0.09620693210933202]], "kwargs": [], "loader": [["bool", 0.2964021172534786], ["Optional[str]", 0.11947908892652541], ["Optional[List[str]]", 0.10156774111508134], ["utils.ResolveType", 0.09786183844707506], ["str", 0.09694264025044573], ["int", 0.09553697031547483]], "self": [], "variable_manager": [["str", 0.495480172982059]]}, "q_name": "Inventory.__init__", "ret_exprs": [], "ret_type": "", "variables": {"_basedir": "", "_group_dict_cache": "", "_group_vars_files": "", "_host_vars_files": "", "_hosts_cache": "", "_loader": "", "_pattern_cache": "", "_playbook_basedir": "", "_restriction": "", "_subset": "", "_variable_manager": "", "_vars_per_group": "", "_vars_per_host": "", "_vars_plugins": "", "groups": "", "host_list": "", "localhost": ""}, "variables_p": {"_basedir": [["str", 0.7003691099035119]], "_group_dict_cache": [["int", 0.3278139148595982], ["Final", 0.25552912429518815], ["dict", 0.17164082409432133], ["bytes", 0.12976491227855907], ["List[int]", 0.11525122447233316]], "_group_vars_files": [["str", 0.5705660062169329], ["int", 0.3494648678944756], ["List[str]", 0.07996912588859158]], "_host_vars_files": [["str", 0.8887486198606528], ["int", 0.11125138013934717]], "_hosts_cache": [["str", 0.30000000000000004], ["Dict[str, Any]", 0.1], ["dict", 0.1], ["int", 0.1]], "_loader": [["str", 0.30000000000000004], ["Dict[str, Any]", 0.1], ["dict", 0.1], ["int", 0.1]], "_pattern_cache": [["str", 0.30000000000000004], ["Dict[str, Any]", 0.1], ["dict", 0.1], ["int", 0.1]], "_playbook_basedir": [["bool", 0.9999999997638014], ["int", 3.020395889648087e-11]], "_restriction": [["\"Frame\"", 0.19999999999676038], ["str", 3.971941177518544e-12], ["Dict[str, Any]", 3.6175949269712212e-12]], "_subset": [["\"Frame\"", 0.19999999999676038], ["str", 3.971941177518544e-12], ["Dict[str, Any]", 3.6175949269712212e-12]], "_variable_manager": [["Set[str]", 0.18683363897410232], ["dict", 0.1807038731359379], ["Tuple[Literal]", 0.17468214631129267], ["Pattern[str]", 0.10235659036022762], ["Dict[str, List[str]]", 0.09947244392189544], ["Dict[Type[Any], str]", 0.0899658734857563], ["Dict[str, str]", 0.08196456479646984]], "_vars_per_group": [["Pattern[str]", 0.689608519069808], ["int", 0.10831862427444687], ["dict", 0.10592548300477325], ["Type[str]", 0.09614737365097173]], "_vars_per_host": [["Pattern[str]", 0.689608519069808], ["int", 0.10831862427444687], ["dict", 0.10592548300477325], ["Type[str]", 0.09614737365097173]], "_vars_plugins": [["Pattern[str]", 0.689608519069808], ["int", 0.10831862427444687], ["dict", 0.10592548300477325], ["Type[str]", 0.09614737365097173]], "groups": [["str", 0.30000000000000004], ["Dict[str, Any]", 0.1], ["dict", 0.1], ["int", 0.1]], "host_list": [["list", 0.45647475260945813], ["List[str]", 0.3971182893632389], ["Type[List[Any]]", 0.0740695721793644], ["List[int]", 0.0723373858479384]], "localhost": [["\"Frame\"", 0.19999999999676038], ["str", 3.971941177518544e-12], ["Dict[str, Any]", 3.6175949269712212e-12]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[99, 4], [101, 19]], "fn_var_ln": {"data": [[100, 8], [100, 12]]}, "fn_var_occur": {"data": [["data", "dict"]]}, "name": "serialize", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "Inventory.serialize", "ret_exprs": ["return data"], "ret_type": "", "ret_type_p": [["str", 0.2618957145135596], ["raiden.utils.signer.Signer", 0.17499926704194727], ["Optional[float]", 0.16455688318651607], ["int", 0.10872215137970408], ["List[Dict[str, Any]]", 0.10515277519084046], ["Dict[str, str]", 0.0958053345631056], ["bool", 0.0888678741243269]], "variables": {"data": ""}, "variables_p": {"data": [["str", 0.33333333333372583], ["bytes", 0.33333333332847825], ["Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]", 6.604395256378493e-12], ["List[str]", 6.463857382610188e-12]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[103, 4], [104, 12]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "deserialize", "params": {"data": "", "self": ""}, "params_descr": {"data": "", "self": ""}, "params_occur": {"data": [], "self": []}, "params_p": {"args": [], "data": [["int", 0.3], ["bytes", 0.3], ["bool", 0.19999999999999998], ["dict", 0.09999999999999999]], "kwargs": [], "self": []}, "q_name": "Inventory.deserialize", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[106, 4], [170, 36]], "fn_var_ln": {"_vars_plugins": [[159, 8], [159, 26]], "all": [[119, 8], [119, 11]], "group": [[163, 12], [163, 17]], "groups": [[122, 8], [122, 19]], "host": [[132, 20], [132, 24]], "host_list": [[147, 16], [147, 25]], "localhost": [[141, 20], [141, 34]], "new_host": [[135, 16], [135, 24]], "parser": [[150, 16], [150, 27]], "port": [[133, 20], [133, 24]], "ungrouped": [[118, 8], [118, 17]], "vars": [[169, 12], [169, 21]]}, "fn_var_occur": {"_vars_plugins": [["self", "_vars_plugins", "x", "x", "vars_loader", "all", "self"]], "all": [["all", "Group"], ["all", "add_child_group", "ungrouped"], ["self", "groups", "dict", "all", "all", "ungrouped", "ungrouped"], ["all", "add_host", "new_host"], ["self", "_vars_plugins", "x", "x", "vars_loader", "all", "self"]], "group": [["group", "self", "groups", "g"], ["group", "vars", "combine_vars", "group", "vars", "self", "get_group_variables", "group", "name"], ["self", "get_group_vars", "group"]], "groups": [["self", "groups", "dict", "all", "all", "ungrouped", "ungrouped"], ["self", "parser", "InventoryDirectory", "loader", "self", "_loader", "groups", "self", "groups", "filename", "host_list"], ["self", "parser", "get_file_parser", "host_list", "self", "groups", "self", "_loader"], ["self", "groups"], ["group", "self", "groups", "g"]], "host": [["host", "port", "parse_address", "h", "allow_ranges", "False"], ["host", "h"], ["new_host", "Host", "host", "port"], ["host", "vars", "combine_vars", "host", "vars", "self", "get_host_variables", "host", "name"], ["self", "get_host_vars", "host"]], "host_list": [["isinstance", "host_list", "string_types"], ["host_list", "host_list", "split"], ["host_list", "h", "h", "host_list", "h", "h", "strip"], ["host_list", "None"], ["isinstance", "host_list", "list"], ["self", "_loader", "path_exists", "host_list"], ["self", "is_directory", "host_list"], ["host_list", "os", "path", "join", "self", "host_list"], ["self", "parser", "InventoryDirectory", "loader", "self", "_loader", "groups", "self", "groups", "filename", "host_list"], ["self", "parser", "get_file_parser", "host_list", "self", "groups", "self", "_loader"], ["AnsibleError", "host_list"], ["display", "warning", "to_text", "host_list"]], "localhost": [["self", "localhost", "None"], ["display", "warning", "h", "self", "localhost", "name"], ["self", "localhost", "new_host"]], "new_host": [["new_host", "Host", "host", "port"], ["self", "localhost", "new_host"], ["all", "add_host", "new_host"]], "parser": [["self", "parser", "None"], ["self", "parser", "InventoryDirectory", "loader", "self", "_loader", "groups", "self", "groups", "filename", "host_list"], ["self", "parser", "get_file_parser", "host_list", "self", "groups", "self", "_loader"], ["self", "parser"]], "port": [["host", "port", "parse_address", "h", "allow_ranges", "False"], ["port", "None"], ["new_host", "Host", "host", "port"]], "ungrouped": [["ungrouped", "Group"], ["all", "add_child_group", "ungrouped"], ["self", "groups", "dict", "all", "all", "ungrouped", "ungrouped"]], "vars": [["group", "vars", "combine_vars", "group", "vars", "self", "get_group_variables", "group", "name"], ["host", "vars", "combine_vars", "host", "vars", "self", "get_host_variables", "host", "name"]]}, "name": "parse_inventory", "params": {"host_list": "", "self": ""}, "params_descr": {"host_list": "", "self": ""}, "params_occur": {"host_list": [["isinstance", "host_list", "string_types"], ["host_list", "host_list", "split"], ["host_list", "h", "h", "host_list", "h", "h", "strip"], ["host_list", "None"], ["isinstance", "host_list", "list"], ["self", "_loader", "path_exists", "host_list"], ["self", "is_directory", "host_list"], ["host_list", "os", "path", "join", "self", "host_list"], ["self", "parser", "InventoryDirectory", "loader", "self", "_loader", "groups", "self", "groups", "filename", "host_list"], ["self", "parser", "get_file_parser", "host_list", "self", "groups", "self", "_loader"], ["AnsibleError", "host_list"], ["display", "warning", "to_text", "host_list"]], "self": [["self", "parser", "None"], ["self", "groups", "dict", "all", "all", "ungrouped", "ungrouped"], ["self", "localhost", "None"], ["display", "warning", "h", "self", "localhost", "name"], ["self", "localhost", "new_host"], ["self", "_loader", "path_exists", "host_list"], ["self", "is_directory", "host_list"], ["host_list", "os", "path", "join", "self", "host_list"], ["self", "parser", "InventoryDirectory", "loader", "self", "_loader", "groups", "self", "groups", "filename", "host_list"], ["self", "parser", "get_file_parser", "host_list", "self", "groups", "self", "_loader"], ["vars_loader", "add_directory", "self", "_basedir", "with_subdir", "True"], ["self", "parser"], ["self", "_vars_plugins", "x", "x", "vars_loader", "all", "self"], ["self", "groups"], ["group", "self", "groups", "g"], ["group", "vars", "combine_vars", "group", "vars", "self", "get_group_variables", "group", "name"], ["self", "get_group_vars", "group"], ["self", "get_hosts", "ignore_limits", "True", "ignore_restrictions", "True"], ["host", "vars", "combine_vars", "host", "vars", "self", "get_host_variables", "host", "name"], ["self", "get_host_vars", "host"]]}, "params_p": {"args": [], "host_list": [["List[str]", 0.5600813673105993], ["Sequence[str]", 0.09553479055396444], ["Union[int, slice]", 0.08759331780036603], ["T", 0.08311843274181718]], "kwargs": [], "self": []}, "q_name": "Inventory.parse_inventory", "ret_exprs": [], "ret_type": "", "variables": {"_vars_plugins": "", "all": "", "group": "", "groups": "", "host": "", "host_list": "", "localhost": "", "new_host": "", "parser": "", "port": "", "ungrouped": "", "vars": ""}, "variables_p": {"_vars_plugins": [["Pattern[str]", 0.8959222406386687], ["tuple", 0.10407775936133126]], "all": [["list", 0.4976465234911105], ["List[str]", 0.41883817046016425], ["Type[Iterator[str]]", 0.0835153060487253]], "group": [["str", 0.6961695207150986], ["dict", 0.11006010124642168]], "groups": [["int", 0.2785931349023575], ["List[int]", 0.16619370425712396], ["List[Union[Any, Any]]", 0.14218705764181036], ["List[List[int]]", 0.08480238159532223], ["float", 0.08458012430090471], ["list", 0.08226552537713495], ["str", 0.077925622057938]], "host": [["str", 0.18710207015549482], ["pymap.parsing.message.AppendMessage", 0.09088444658914814]], "host_list": [["list", 0.38555701923795666], ["set", 0.11837153220103623], ["str", 0.11178812408553945], ["Dict[str, str]", 0.09369676870239366]], "localhost": [["Optional[object]", 0.1084473933050637], ["Iterator[float]", 0.09114510141961504]], "new_host": [["int", 0.19157516466575808], ["list", 0.09083997699134576], ["List[bool]", 0.0900342893729137], ["List[str]", 0.08968379500257782]], "parser": [["str", 0.22009492430224553]], "port": [["str", 0.1835235256112118], ["Dict[str, Any]", 0.09843589339593639]], "ungrouped": [["List[List[int]]", 0.15959811577161598], ["List[str]", 0.13630973183668477], ["range", 0.11794318939348052], ["List[float]", 0.0991394733335851], ["Dict[int, int]", 0.07663787144978815]], "vars": [["cmk.utils.rulesets.ruleset_matcher.RulesetMatchObject", 0.11153557896155851], ["str", 0.10063320316111862]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[172, 4], [179, 72]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "_match", "params": {"pattern_str": "", "self": "", "str": ""}, "params_descr": {"pattern_str": "", "self": "", "str": ""}, "params_occur": {"pattern_str": [["pattern_str", "startswith"], ["re", "search", "pattern_str", "str"], ["fnmatch", "fnmatch", "str", "pattern_str"], ["AnsibleError", "pattern_str"]], "self": [], "str": [["re", "search", "pattern_str", "str"], ["fnmatch", "fnmatch", "str", "pattern_str"]]}, "params_p": {"args": [], "kwargs": [], "pattern_str": [["str", 0.3878925380284045], ["Optional[float]", 0.09342950084808255], ["float", 0.08925636113027477]], "self": [], "str": [["bool", 0.3077207506728428], ["int", 0.19428484815686844], ["Callable[[], None]", 0.1147427346688408], ["Tuple[float, float]", 0.09926501607951134], ["float", 0.09560199482209844], ["Optional[str]", 0.09555014612610044], ["Optional[float]", 0.09283450947373774]]}, "q_name": "Inventory._match", "ret_exprs": ["return re.search(pattern_str[1:], str)", "return fnmatch.fnmatch(str, pattern_str)"], "ret_type": "", "ret_type_p": [["bool", 0.29968256648624414], ["cmk.utils.type_defs.UserId", 0.10741681313774969], ["int", 0.09641015781964646], ["Callable[[Dict], None]", 0.09388828377394536]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[181, 4], [194, 22]], "fn_var_ln": {"pattern": [[187, 16], [187, 23]], "results": [[182, 8], [182, 15]]}, "fn_var_occur": {"pattern": [["pattern", "re", "compile", "fnmatch", "translate", "pattern_str"], ["pattern", "re", "compile", "pattern_str"], ["pattern", "match", "getattr", "item", "item_attr"]], "results": [["results", "append", "item"]]}, "name": "_match_list", "params": {"item_attr": "", "items": "", "pattern_str": "", "self": ""}, "params_descr": {"item_attr": "", "items": "", "pattern_str": "", "self": ""}, "params_occur": {"item_attr": [["pattern", "match", "getattr", "item", "item_attr"]], "items": [], "pattern_str": [["pattern_str", "startswith"], ["pattern", "re", "compile", "fnmatch", "translate", "pattern_str"], ["pattern", "re", "compile", "pattern_str"], ["AnsibleError", "pattern_str"]], "self": []}, "params_p": {"args": [], "item_attr": [["dict", 0.32009294306159475], ["Optional[str]", 0.11282184926624331], ["bool", 0.10365960505058192], ["List[Dict]", 0.09471940085305872], ["Optional[T]", 0.09196746009815943], ["Optional[Any]", 0.09020224345002677], ["Dict[str, Any]", 0.08699816068744975]], "items": [["bool", 0.5946869293059573], ["raiden.utils.List[\"RouteState\"]", 0.07123708077784253], ["List[str]", 0.06608791230768431]], "kwargs": [], "pattern_str": [["str", 0.3090678323741046], ["Mapping", 0.10352949816291204], ["dict", 0.10281029097211615], ["bytes", 0.08965332627973054]], "self": []}, "q_name": "Inventory._match_list", "ret_exprs": ["return results"], "ret_type": "", "ret_type_p": [["Match", 0.20637428580070605], ["\"Parameter\"", 0.10935869552589214], ["bool", 0.10182329560568766], ["int", 0.09756304481154705], ["Dict[str, Set[str]]", 0.096661299295918]], "variables": {"pattern": "", "results": ""}, "variables_p": {"pattern": [["str", 0.8172963563287148], ["os._Environ[str]", 0.182703643671285]], "results": [["list", 0.3125336438828701], ["int", 0.11833978681991439], ["dict", 0.11314729241018263], ["str", 0.10700451130679929], ["tuple", 0.09907465380079904], ["Tuple[Literal, Literal, Literal, Literal, Literal]", 0.09568325555476409], ["subprocess.CompletedProcess[bytes]", 0.07936639427042406], ["float", 0.07485046195424652]]}}, {"docstring": {"func": "Takes a pattern or list of patterns and returns a list of matching", "long_descr": "inventory host names, taking into account any active restrictions\nor applied subsets", "ret": null}, "fn_lc": [[196, 4], [233, 52]], "fn_var_ln": {"hosts": [[228, 16], [228, 21]], "pattern_hash": [[207, 12], [207, 24]], "patterns": [[217, 12], [217, 20]], "seen": [[230, 12], [230, 16]], "subset": [[223, 16], [223, 22]]}, "fn_var_occur": {"hosts": [["hosts", "self", "_evaluate_patterns", "patterns"], ["hosts", "h", "h", "hosts", "h", "subset"], ["hosts", "h", "h", "hosts", "h", "name", "self", "_restriction"], ["HOSTS_PATTERNS_CACHE", "pattern_hash", "x", "x", "hosts", "x", "seen", "seen", "add", "x"]], "pattern_hash": [["pattern_hash", "join", "pattern"], ["pattern_hash", "pattern"], ["pattern_hash", "to_text", "self", "_subset"], ["pattern_hash", "to_text", "self", "_restriction"], ["pattern_hash", "HOSTS_PATTERNS_CACHE"], ["HOSTS_PATTERNS_CACHE", "pattern_hash", "x", "x", "hosts", "x", "seen", "seen", "add", "x"], ["HOSTS_PATTERNS_CACHE", "pattern_hash"]], "patterns": [["patterns", "Inventory", "split_host_pattern", "pattern"], ["hosts", "self", "_evaluate_patterns", "patterns"]], "seen": [["seen", "set"], ["HOSTS_PATTERNS_CACHE", "pattern_hash", "x", "x", "hosts", "x", "seen", "seen", "add", "x"]], "subset": [["subset", "self", "_evaluate_patterns", "self", "_subset"], ["hosts", "h", "h", "hosts", "h", "subset"]]}, "name": "get_hosts", "params": {"ignore_limits": "", "ignore_restrictions": "", "pattern": "", "self": ""}, "params_descr": {"ignore_limits": "", "ignore_restrictions": "", "pattern": "", "self": ""}, "params_occur": {"ignore_limits": [["ignore_limits", "self", "_subset"], ["ignore_limits", "self", "_subset"]], "ignore_restrictions": [["ignore_restrictions", "self", "_restriction"], ["ignore_restrictions", "self", "_restriction"]], "pattern": [["isinstance", "pattern", "list"], ["pattern_hash", "join", "pattern"], ["pattern_hash", "pattern"], ["patterns", "Inventory", "split_host_pattern", "pattern"]], "self": [["ignore_limits", "self", "_subset"], ["pattern_hash", "to_text", "self", "_subset"], ["ignore_restrictions", "self", "_restriction"], ["pattern_hash", "to_text", "self", "_restriction"], ["hosts", "self", "_evaluate_patterns", "patterns"], ["ignore_limits", "self", "_subset"], ["subset", "self", "_evaluate_patterns", "self", "_subset"], ["ignore_restrictions", "self", "_restriction"], ["hosts", "h", "h", "hosts", "h", "name", "self", "_restriction"]]}, "params_p": {"args": [], "ignore_limits": [["str", 0.19999999999999998], ["bool", 0.09999999999999999]], "ignore_restrictions": [["str", 0.19999999999999998], ["bool", 0.09999999999999999]], "kwargs": [], "pattern": [["List[str]", 0.5203685089319928], ["str", 0.16001700254606682], ["bool", 0.1513183494401728], ["Callable[[str], str]", 0.09578027561627138], ["Optional[str]", 0.07251586346549624]], "self": []}, "q_name": "Inventory.get_hosts", "ret_exprs": ["return HOSTS_PATTERNS_CACHE[pattern_hash][:]"], "ret_type": "", "ret_type_p": [["str", 0.23006335315738366], ["dict", 0.15939366934721563], ["trezor.utils.Writer", 0.07967272782396546]], "variables": {"hosts": "", "pattern_hash": "", "patterns": "", "seen": "", "subset": ""}, "variables_p": {"hosts": [["int", 0.3998840103988994], ["str", 0.3998840103988994]], "pattern_hash": [["str", 0.5043695896714995], ["List[str]", 0.1776719790621772], ["Final", 0.13896094645000134], ["Dict[str, str]", 0.091265096177562], ["Pattern[Any]", 0.08773238863875986]], "patterns": [["str", 0.2507037424711733], ["Dict[str, Union[Any, Any]]", 0.09659322885345287], ["int", 0.08778407868195279]], "seen": [["str", 0.2061585786844079], ["Dict[Any, List[int]]", 0.15529653224011877], ["int", 0.10029089289810576], ["Tuple[Any, Any]", 0.08692666773286012]], "subset": [["int", 0.6139050828537764], ["str", 0.38609491714622357]]}}, {"docstring": {"func": "Takes a string containing host patterns separated by commas (or a list", "long_descr": "thereof) and returns a list of single patterns (which may not contain\ncommas). Whitespace is ignored.\n\nAlso accepts ':' as a separator for backwards compatibility, but it is\nnot recommended due to the conflict with IPv6 addresses and host ranges.\n\nExample: 'a,b[1], c[2:3] , d' -> ['a', 'b[1]', 'c[2:3]', 'd']", "ret": null}, "fn_lc": [[236, 4], [276, 44]], "fn_var_ln": {"base": [[261, 17], [261, 21]], "patterns": [[267, 16], [267, 24]], "port": [[261, 23], [261, 27]]}, "fn_var_occur": {"base": [["base", "port", "parse_address", "pattern", "allow_ranges", "True"]], "patterns": [["patterns", "re", "split", "pattern"], ["patterns", "pattern"], ["patterns", "re", "findall", "pattern", "re", "X"], ["p", "strip", "p", "patterns"]], "port": [["base", "port", "parse_address", "pattern", "allow_ranges", "True"]]}, "name": "split_host_pattern", "params": {"cls": "", "pattern": ""}, "params_descr": {"cls": "", "pattern": ""}, "params_occur": {"cls": [["list", "itertools", "chain", "map", "cls", "split_host_pattern", "pattern"]], "pattern": [["isinstance", "pattern", "list"], ["list", "itertools", "chain", "map", "cls", "split_host_pattern", "pattern"], ["patterns", "re", "split", "pattern"], ["base", "port", "parse_address", "pattern", "allow_ranges", "True"], ["patterns", "pattern"], ["patterns", "re", "findall", "pattern", "re", "X"]]}, "params_p": {"args": [], "cls": [["str", 0.2791961436183752], ["dict", 0.14199532862858708], ["Dict[str, str]", 0.10584574689257402], ["bytes", 0.10218642326713726], ["Generator", 0.08183892882470635]], "kwargs": [], "pattern": [["Union[str, List[Any]]", 0.08825971362792988], ["str", 0.0806197839645535]], "self": []}, "q_name": "Inventory.split_host_pattern", "ret_exprs": ["return list(itertools.chain(*map(cls.split_host_pattern, pattern)))", "return [p.strip() for p in patterns]"], "ret_type": "", "ret_type_p": [["List[Dict]", 0.20406666135864837], ["str", 0.19653853796395038], ["List[str]", 0.16022036863129466], ["Union[str, List[Any]]", 0.08596023634587086], ["list", 0.08103914774970296], ["List[int]", 0.07895141622747129]], "variables": {"base": "", "patterns": "", "port": ""}, "variables_p": {"base": [["str", 0.6132131210124391], ["int", 0.1174377790477284], ["Dict[str, str]", 0.09077065637772429]], "patterns": [["str", 0.535129544856788], ["Pattern[str]", 0.22933866617971366], ["dict", 0.1328330666269591]], "port": [["str", 0.31646179457793044], ["Set[str]", 0.12039712314800155]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[279, 4], [300, 71]], "fn_var_ln": {"pattern_exclude": [[284, 8], [284, 23]], "pattern_intersection": [[283, 8], [283, 28]], "pattern_regular": [[296, 12], [296, 27]]}, "fn_var_occur": {"pattern_exclude": [["pattern_exclude", "append", "p"], ["pattern_regular", "pattern_intersection", "pattern_exclude"]], "pattern_intersection": [["pattern_intersection", "append", "p"], ["pattern_regular", "pattern_intersection", "pattern_exclude"]], "pattern_regular": [["pattern_regular", "append", "p"], ["pattern_regular", "pattern_intersection", "pattern_exclude"]]}, "name": "order_patterns", "params": {"cls": "", "patterns": ""}, "params_descr": {"cls": "", "patterns": ""}, "params_occur": {"cls": [], "patterns": []}, "params_p": {"args": [], "cls": [["memoryview", 0.09999999999999999], ["bool", 0.09999999999999999], ["str", 0.09999999999999999]], "kwargs": [], "patterns": [["memoryview", 0.09999999999999999], ["bool", 0.09999999999999999], ["str", 0.09999999999999999]], "self": []}, "q_name": "Inventory.order_patterns", "ret_exprs": ["return pattern_regular + pattern_intersection + pattern_exclude"], "ret_type": "", "ret_type_p": [["int", 0.30000000000000004], ["Callable", 0.2], ["str", 0.1]], "variables": {"pattern_exclude": "", "pattern_intersection": "", "pattern_regular": ""}, "variables_p": {"pattern_exclude": [["list", 0.7999999999999999], ["Dict[str, Any]", 0.09999999999999999], ["str", 0.09999999999999999]], "pattern_intersection": [["list", 0.7999999999999999], ["Dict[str, Any]", 0.09999999999999999], ["str", 0.09999999999999999]], "pattern_regular": [["list", 0.7999999999999999], ["Dict[str, Any]", 0.09999999999999999], ["str", 0.09999999999999999]]}}, {"docstring": {"func": "Takes a list of patterns and returns a list of matching host names,", "long_descr": "taking into account any negative and intersection patterns.", "ret": null}, "fn_lc": [[302, 4], [324, 20]], "fn_var_ln": {"hosts": [[320, 20], [320, 25]], "patterns": [[308, 8], [308, 16]], "that": [[316, 16], [316, 20]], "to_append": [[322, 20], [322, 29]]}, "fn_var_occur": {"hosts": [["hosts", "append", "self", "get_host", "p"], ["hosts", "h", "h", "hosts", "h", "that"], ["hosts", "h", "h", "hosts", "h", "that"], ["to_append", "h", "h", "that", "h", "name", "y", "name", "y", "hosts"], ["hosts", "extend", "to_append"]], "patterns": [["patterns", "Inventory", "order_patterns", "patterns"]], "that": [["that", "self", "_match_one_pattern", "p"], ["hosts", "h", "h", "hosts", "h", "that"], ["hosts", "h", "h", "hosts", "h", "that"], ["to_append", "h", "h", "that", "h", "name", "y", "name", "y", "hosts"]], "to_append": [["to_append", "h", "h", "that", "h", "name", "y", "name", "y", "hosts"], ["hosts", "extend", "to_append"]]}, "name": "_evaluate_patterns", "params": {"patterns": "", "self": ""}, "params_descr": {"patterns": "", "self": ""}, "params_occur": {"patterns": [["patterns", "Inventory", "order_patterns", "patterns"]], "self": [["p", "self", "_hosts_cache"], ["hosts", "append", "self", "get_host", "p"], ["that", "self", "_match_one_pattern", "p"]]}, "params_p": {"args": [], "kwargs": [], "patterns": [["int", 0.30000000000000004], ["Callable", 0.2], ["str", 0.1]], "self": []}, "q_name": "Inventory._evaluate_patterns", "ret_exprs": ["return hosts"], "ret_type": "", "ret_type_p": [["int", 0.30000000000000004], ["Callable", 0.2], ["str", 0.1]], "variables": {"hosts": "", "patterns": "", "that": "", "to_append": ""}, "variables_p": {"hosts": [["DefaultDict[Any, List[Any]]", 0.11970355263383826], ["list", 0.07600841735820277]], "patterns": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["str", 0.1]], "that": [["str", 0.7919840038407358], ["Union[Literal, str]", 0.10400799807963208], ["Optional[str]", 0.10400799807963208]], "to_append": [["Pattern[str]", 0.10093454547155362]]}}, {"docstring": {"func": "Takes a single pattern and returns a list of matching host names.", "long_descr": "Ignores intersection (&) and exclusion (!) specifiers.\n\nThe pattern may be:\n\n    1. A regex starting with ~, e.g. '~[abc]*'\n    2. A shell glob pattern with ?/*/[chars]/[!chars], e.g. 'foo*'\n    3. An ordinary word that matches itself only, e.g. 'foo'\n\nThe pattern is matched using the following rules:\n\n    1. If it's 'all', it matches all hosts in all groups.\n    2. Otherwise, for each known group name:\n        (a) if it matches the group name, the results include all hosts\n            in the group or any of its children.\n        (b) otherwise, if it matches any hosts in the group, the results\n            include the matching hosts.\n\nThis means that 'foo*' may match one or more groups (thus including all\nhosts therein) but also hosts in other groups.\n\nThe built-in groups 'all' and 'ungrouped' are special. No pattern can\nmatch these group names (though 'all' behaves as though it matches, as\ndescribed above). The word 'ungrouped' can match a host of that name,\nand patterns like 'ungr*' and 'al*' can match either hosts or groups\nother than all and ungrouped.\n\nIf the pattern matches one or more group names according to these rules,\nit may have an optional range suffix to select a subset of the results.\nThis is allowed only if the pattern is not a regex, i.e. '~foo[1]' does\nnot work (the [1] is interpreted as part of the regex), but 'foo*[1]'\nwould work if 'foo*' matched the name of one or more groups.\n\nDuplicate matches are always eliminated from the results.", "ret": null}, "fn_lc": [[326, 4], [376, 43]], "fn_var_ln": {"expr": [[368, 13], [368, 17]], "hosts": [[371, 16], [371, 21]], "pattern": [[365, 12], [365, 19]], "slice": [[368, 19], [368, 24]]}, "fn_var_occur": {"expr": [["expr", "slice", "self", "_split_subscript", "pattern"], ["hosts", "self", "_enumerate_matches", "expr"]], "hosts": [["hosts", "self", "_enumerate_matches", "expr"], ["hosts", "self", "_apply_subscript", "hosts", "slice"], ["self", "_pattern_cache", "pattern", "hosts"]], "pattern": [["pattern", "startswith", "pattern", "startswith"], ["pattern", "pattern"], ["pattern", "self", "_pattern_cache"], ["expr", "slice", "self", "_split_subscript", "pattern"], ["AnsibleError", "pattern"], ["self", "_pattern_cache", "pattern", "hosts"], ["self", "_pattern_cache", "pattern"]], "slice": [["expr", "slice", "self", "_split_subscript", "pattern"], ["hosts", "self", "_apply_subscript", "hosts", "slice"]]}, "name": "_match_one_pattern", "params": {"pattern": "", "self": ""}, "params_descr": {"pattern": "", "self": ""}, "params_occur": {"pattern": [["pattern", "startswith", "pattern", "startswith"], ["pattern", "pattern"], ["pattern", "self", "_pattern_cache"], ["expr", "slice", "self", "_split_subscript", "pattern"], ["AnsibleError", "pattern"], ["self", "_pattern_cache", "pattern", "hosts"], ["self", "_pattern_cache", "pattern"]], "self": [["pattern", "self", "_pattern_cache"], ["expr", "slice", "self", "_split_subscript", "pattern"], ["hosts", "self", "_enumerate_matches", "expr"], ["hosts", "self", "_apply_subscript", "hosts", "slice"], ["self", "_pattern_cache", "pattern", "hosts"], ["self", "_pattern_cache", "pattern"]]}, "params_p": {"args": [], "kwargs": [], "pattern": [["str", 0.7080292517295081], ["List[str]", 0.10489397112058857]], "self": []}, "q_name": "Inventory._match_one_pattern", "ret_exprs": ["return self._pattern_cache[pattern]"], "ret_type": "", "ret_type_p": [["IO[str]", 0.11111111109162798], ["Dict[str, Any]", 0.11111111109162798], ["str", 0.11111111109162798]], "variables": {"expr": "", "hosts": "", "pattern": "", "slice": ""}, "variables_p": {"expr": [["str", 0.32754583223118555], ["Tuple[Literal, Literal, Literal]", 0.19506449386039312], ["Dict[str, Dict[str, Any]]", 0.10566286160122387], ["Exception", 0.08861012715731789]], "hosts": [["str", 0.2859264797175852], ["int", 0.2859264797175852], ["dict", 0.09410627247141952]], "pattern": [["str", 0.8025885855846885], ["Pattern[str]", 0.19741141441531163]], "slice": [["str", 0.6078614553322529], ["int", 0.392138544667747]]}}, {"docstring": {"func": "Takes a pattern, checks if it has a subscript, and returns the pattern", "long_descr": "without the subscript and a (start,end) tuple representing the given\nsubscript (or None if there is no subscript).\n\nValidates that the subscript is in the right syntax, but doesn't make\nsure the actual indices make sense in context.", "ret": null}, "fn_lc": [[378, 4], [421, 35]], "fn_var_ln": {"end": [[416, 20], [416, 23]], "idx": [[411, 22], [411, 25]], "m": [[409, 8], [409, 9]], "pattern": [[411, 13], [411, 20]], "pattern_with_subscript": [[396, 8], [396, 30]], "sep": [[411, 34], [411, 37]], "start": [[411, 27], [411, 32]], "subscript": [[417, 16], [417, 25]]}, "fn_var_occur": {"end": [["pattern", "idx", "start", "sep", "end", "m", "groups"], ["subscript", "int", "start", "int", "end"]], "idx": [["pattern", "idx", "start", "sep", "end", "m", "groups"], ["subscript", "int", "idx", "None"]], "m": [["m", "pattern_with_subscript", "match", "pattern"], ["pattern", "idx", "start", "sep", "end", "m", "groups"]], "pattern": [["pattern", "startswith"], ["pattern", "None"], ["m", "pattern_with_subscript", "match", "pattern"], ["pattern", "idx", "start", "sep", "end", "m", "groups"], ["pattern", "subscript"]], "pattern_with_subscript": [["pattern_with_subscript", "re", "compile", "re", "X"], ["m", "pattern_with_subscript", "match", "pattern"]], "sep": [["pattern", "idx", "start", "sep", "end", "m", "groups"]], "start": [["pattern", "idx", "start", "sep", "end", "m", "groups"], ["subscript", "int", "start", "int", "end"]], "subscript": [["subscript", "None"], ["subscript", "int", "idx", "None"], ["subscript", "int", "start", "int", "end"], ["pattern", "subscript"]]}, "name": "_split_subscript", "params": {"pattern": "", "self": ""}, "params_descr": {"pattern": "", "self": ""}, "params_occur": {"pattern": [["pattern", "startswith"], ["pattern", "None"], ["m", "pattern_with_subscript", "match", "pattern"], ["pattern", "idx", "start", "sep", "end", "m", "groups"], ["pattern", "subscript"]], "self": []}, "params_p": {"args": [], "kwargs": [], "pattern": [["str", 0.38797417625527375], ["bytes", 0.1300421437459742], ["Optional[int]", 0.10958464076601064], ["int", 0.09352735082152404], ["dict", 0.09332153288898008]], "self": []}, "q_name": "Inventory._split_subscript", "ret_exprs": ["return (pattern, None)", "return (pattern, subscript)"], "ret_type": "", "ret_type_p": [["bool", 0.1819730464646528], ["Optional[int]", 0.08670509874140864], ["Optional[str]", 0.08598650583479993]], "variables": {"end": "", "idx": "", "m": "", "pattern": "", "pattern_with_subscript": "", "sep": "", "start": "", "subscript": ""}, "variables_p": {"end": [["int", 0.486550664654267], ["Optional[Match[str]]", 0.07972366959097958], ["float", 0.07652034025845675]], "idx": [["str", 0.25955502014327636], ["int", 0.2437015707660688], ["List[None]", 0.13564907072629775], ["List[int]", 0.09184316211754348], ["list", 0.09165580548329161], ["Tuple[float, float]", 0.09165580548329161], ["Tuple[float]", 0.0859395652802304]], "m": [["Pattern[str]", 0.9999999999999999]], "pattern": [["Pattern[str]", 0.9029373402385916]], "pattern_with_subscript": [["List[Tuple[int, int]]", 0.46382788491810595], ["int", 0.11710601446313183], ["list", 0.0977775304509522], ["bool", 0.07933872072738408], ["Tuple[Literal, Literal]", 0.0791425208684778]], "sep": [["float", 0.21668750063048076], ["list", 0.18998108619030596], ["Dict[str, int]", 0.176050743266101], ["Tuple[Literal, Any, Literal, Any, Literal, Any]", 0.13570703870036355], ["List[str]", 0.09653651862249614], ["dict", 0.09355543279531611]], "start": [["int", 0.399026672097022], ["List[int]", 0.11192032672178787], ["str", 0.09781943587454042], ["Tuple[str, str, str, str, str, str, str]", 0.09692828326749153], ["Tuple[int, int, int]", 0.08899333479784871]], "subscript": [["int", 0.6523267146093534], ["Optional[int]", 0.25252624567892423], ["Optional[Match[str]]", 0.09514703971172207]]}}, {"docstring": {"func": "Takes a list of hosts and a (start,end) tuple and returns the subset of", "long_descr": "hosts based on the subscript (which may be None to return all hosts).", "ret": null}, "fn_lc": [[423, 4], [439, 35]], "fn_var_ln": {"end": [[436, 16], [436, 19]], "start": [[432, 9], [432, 14]]}, "fn_var_occur": {"end": [["start", "end", "subscript"], ["end", "len", "hosts"], ["hosts", "start", "end"]], "start": [["start", "end", "subscript"], ["hosts", "start", "end"], ["hosts", "start"]]}, "name": "_apply_subscript", "params": {"hosts": "", "self": "", "subscript": ""}, "params_descr": {"hosts": "", "self": "", "subscript": ""}, "params_occur": {"hosts": [["hosts", "subscript"], ["end", "len", "hosts"], ["hosts", "start", "end"], ["hosts", "start"]], "self": [], "subscript": [["hosts", "subscript"], ["start", "end", "subscript"]]}, "params_p": {"args": [], "hosts": [["str", 0.6942522217906288], ["List[str]", 0.11296836425420262], ["Dict[str, Any]", 0.10985197008905845]], "kwargs": [], "self": [], "subscript": [["float", 0.33180109681697145], ["int", 0.09065949716960721]]}, "q_name": "Inventory._apply_subscript", "ret_exprs": ["return hosts", "return hosts[start:end+1]", "return [ hosts[start] ]"], "ret_type": "", "ret_type_p": [["Optional[int]", 0.18920301326854433], ["str", 0.17750157722334775], ["int", 0.13898677168698154], ["float", 0.12498631402502199]], "variables": {"end": "", "start": ""}, "variables_p": {"end": [["int", 0.38543982536280763], ["Type[range]", 0.2053380508500081], ["list", 0.18958147972955994], ["dict", 0.1280947681463213]], "start": [["int", 0.4816065496794547], ["str", 0.425627353391861]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[450, 8], [453, 36]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "__append_host_to_results", "params": {"host": ""}, "params_descr": {"host": ""}, "params_occur": {"host": [["host", "name", "hostnames"], ["hostnames", "add", "host", "name"], ["results", "append", "host"]]}, "params_p": {"args": [], "host": [["list", 0.1951339533224297], ["List[str]", 0.12472783726269238], ["bool", 0.11848781210835795], ["Dict[str, Set[str]]", 0.10185645100034066], ["Iterable[Type]", 0.0923958709002326], ["dict", 0.07919357414389214]], "kwargs": [], "self": []}, "q_name": "Inventory._enumerate_matches.<locals>.__append_host_to_results", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Returns a list of host names matching the given pattern according to the", "long_descr": "rules explained above in _match_one_pattern.", "ret": null}, "fn_lc": [[441, 4], [476, 22]], "fn_var_ln": {"groups": [[455, 8], [455, 14]], "hostnames": [[448, 8], [448, 17]], "matching_hosts": [[469, 20], [469, 34]], "new_host": [[474, 12], [474, 20]], "results": [[447, 8], [447, 15]]}, "fn_var_occur": {"groups": [["groups", "self", "get_groups"], ["groups", "values"]], "hostnames": [], "matching_hosts": [["matching_hosts", "self", "_match_list", "group", "get_hosts", "pattern"]], "new_host": [["new_host", "self", "_create_implicit_localhost", "pattern"], ["results", "append", "new_host"]], "results": [["pattern", "C", "LOCALHOST", "len", "results"], ["results", "append", "new_host"]]}, "name": "_enumerate_matches", "params": {"pattern": "", "self": ""}, "params_descr": {"pattern": "", "self": ""}, "params_occur": {"pattern": [["self", "_match", "group", "name", "pattern", "group", "name"], ["matching_hosts", "self", "_match_list", "group", "get_hosts", "pattern"], ["pattern", "C", "LOCALHOST", "len", "results"], ["new_host", "self", "_create_implicit_localhost", "pattern"]], "self": [["groups", "self", "get_groups"], ["self", "_match", "group", "name", "pattern", "group", "name"], ["matching_hosts", "self", "_match_list", "group", "get_hosts", "pattern"], ["new_host", "self", "_create_implicit_localhost", "pattern"]]}, "params_p": {"args": [], "kwargs": [], "pattern": [["group.Group", 0.11540850480418695], ["Type", 0.08617464396243221]], "self": []}, "q_name": "Inventory._enumerate_matches", "ret_exprs": ["return results"], "ret_type": "", "ret_type_p": [["bool", 0.22445176111024567], ["Dict[str, Tuple[int, int]]", 0.0897904139505307], ["int", 0.08398726647942047]], "variables": {"groups": "", "hostnames": "", "matching_hosts": "", "new_host": "", "results": ""}, "variables_p": {"groups": [["int", 0.5657946216268076], ["float", 0.24871016970178456], ["str", 0.09900148810104198]], "hostnames": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "matching_hosts": [["Pattern[str]", 0.37148242140893695], ["Dict[str, Any]", 0.18023832469429554], ["Type[Dict[str, Any]]", 0.08129371039579504]], "new_host": [], "results": [["list", 0.31779153154209605], ["List[str]", 0.29504365000355876], ["List[None]", 0.10631020210500944], ["Dict[str, Union[Any, Any]]", 0.09735572257601341], ["Tuple[str]", 0.09345075442280486], ["Set[str]", 0.09004813935051749]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[478, 4], [498, 23]], "fn_var_ln": {"address": [[484, 12], [484, 28]], "implicit": [[485, 12], [485, 29]], "localhost": [[497, 12], [497, 26]], "new_host": [[483, 12], [483, 20]], "py_interp": [[494, 20], [494, 29]], "vars": [[486, 12], [486, 25]]}, "fn_var_occur": {"address": [["new_host", "address"]], "implicit": [["new_host", "implicit", "True"]], "localhost": [["self", "localhost"], ["new_host", "self", "localhost"], ["self", "localhost", "new_host"]], "new_host": [["new_host", "self", "localhost"], ["new_host", "Host", "pattern"], ["new_host", "address"], ["new_host", "implicit", "True"], ["new_host", "vars", "self", "get_host_vars", "new_host"], ["new_host", "set_variable"], ["new_host", "vars"], ["new_host", "set_variable", "py_interp"], ["self", "get_group", "add_host", "new_host"], ["self", "localhost", "new_host"]], "py_interp": [["py_interp", "sys", "executable"], ["new_host", "set_variable", "py_interp"]], "vars": [["new_host", "vars", "self", "get_host_vars", "new_host"], ["new_host", "vars"]]}, "name": "_create_implicit_localhost", "params": {"pattern": "", "self": ""}, "params_descr": {"pattern": "", "self": ""}, "params_occur": {"pattern": [["new_host", "Host", "pattern"]], "self": [["self", "localhost"], ["new_host", "self", "localhost"], ["new_host", "vars", "self", "get_host_vars", "new_host"], ["self", "get_group", "add_host", "new_host"], ["self", "localhost", "new_host"]]}, "params_p": {"args": [], "kwargs": [], "pattern": [["str", 0.8108095138130529], ["int", 0.18919048618694712]], "self": []}, "q_name": "Inventory._create_implicit_localhost", "ret_exprs": ["return new_host"], "ret_type": "", "ret_type_p": [["set", 0.10890817936578659], ["int", 0.10038921755487014], ["Sequence[str]", 0.10026221190784297], ["Iterable[str]", 0.09670131710507905], ["float", 0.09407647709543547]], "variables": {"address": "", "implicit": "", "localhost": "", "new_host": "", "py_interp": "", "vars": ""}, "variables_p": {"address": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["str", 0.1]], "implicit": [["str", 0.8999999999999999], ["bool", 0.09999999999999999]], "localhost": [["int", 0.43036247169255715], ["list", 0.19220037778843801], ["float", 0.18252975412346722], ["bytes", 0.10387818139681497], ["str", 0.0910292149987227]], "new_host": [], "py_interp": [["Dict[str, Any]", 0.11262498007377332], ["Set[str]", 0.11262498007377332], ["int", 0.09059335831676707], ["Dict[str, Set[str]]", 0.08718996426390194]], "vars": [["Dict[str, Union[str, int, bool]]", 0.1063400528832359], ["bytes", 0.09836026674246685], ["Dict[str, Any]", 0.09494391608254102], ["cmk.utils.rulesets.ruleset_matcher.RulesetMatchObject", 0.09236180090188648]]}}, {"docstring": {"func": "called exclusively by the add_host plugin to allow patterns to be recalculated ", "long_descr": null, "ret": null}, "fn_lc": [[500, 4], [504, 32]], "fn_var_ln": {"HOSTS_PATTERNS_CACHE": [[503, 8], [503, 28]], "_pattern_cache": [[504, 8], [504, 27]]}, "fn_var_occur": {"HOSTS_PATTERNS_CACHE": [], "_pattern_cache": [["self", "_pattern_cache"]]}, "name": "clear_pattern_cache", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "_pattern_cache"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "Inventory.clear_pattern_cache", "ret_exprs": [], "ret_type": "", "variables": {"HOSTS_PATTERNS_CACHE": "", "_pattern_cache": ""}, "variables_p": {"HOSTS_PATTERNS_CACHE": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "_pattern_cache": [["str", 0.30000000000000004], ["Dict[str, Any]", 0.1], ["dict", 0.1], ["int", 0.1]]}}, {"docstring": {"func": "called exclusively by the add_host and group_by plugins ", "long_descr": null, "ret": null}, "fn_lc": [[506, 4], [508, 35]], "fn_var_ln": {"_group_dict_cache": [[508, 8], [508, 30]]}, "fn_var_occur": {"_group_dict_cache": [["self", "_group_dict_cache"]]}, "name": "clear_group_dict_cache", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "_group_dict_cache"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "Inventory.clear_group_dict_cache", "ret_exprs": [], "ret_type": "", "variables": {"_group_dict_cache": ""}, "variables_p": {"_group_dict_cache": [["int", 0.3278139148595982], ["Final", 0.25552912429518815], ["dict", 0.17164082409432133], ["bytes", 0.12976491227855907], ["List[int]", 0.11525122447233316]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[510, 4], [514, 21]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "groups_for_host", "params": {"host": "", "self": ""}, "params_descr": {"host": "", "self": ""}, "params_occur": {"host": [["host", "self", "_hosts_cache"], ["self", "_hosts_cache", "host", "get_groups"]], "self": [["host", "self", "_hosts_cache"], ["self", "_hosts_cache", "host", "get_groups"]]}, "params_p": {"args": [], "host": [["Callable", 0.10137478257608604], ["int", 0.0958160747867471], ["str", 0.09516407787591062]], "kwargs": [], "self": []}, "q_name": "Inventory.groups_for_host", "ret_exprs": ["return self._hosts_cache[host].get_groups()", "return []"], "ret_type": "", "ret_type_p": [["bool", 0.22870905288290236], ["str", 0.17919962027820094]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[516, 4], [517, 26]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "get_groups", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "groups"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "Inventory.get_groups", "ret_exprs": ["return self.groups"], "ret_type": "", "ret_type_p": [["str", 0.19999999999999998], ["bool", 0.09999999999999999]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[519, 4], [522, 42]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "get_host", "params": {"hostname": "", "self": ""}, "params_descr": {"hostname": "", "self": ""}, "params_occur": {"hostname": [["hostname", "self", "_hosts_cache"], ["self", "_hosts_cache", "hostname", "self", "_get_host", "hostname"], ["self", "_hosts_cache", "hostname"]], "self": [["hostname", "self", "_hosts_cache"], ["self", "_hosts_cache", "hostname", "self", "_get_host", "hostname"], ["self", "_hosts_cache", "hostname"]]}, "params_p": {"args": [], "hostname": [["str", 0.19443304756683522], ["bytearray", 0.09880452487824395], ["int", 0.08574864494066349]], "kwargs": [], "self": []}, "q_name": "Inventory.get_host", "ret_exprs": ["return self._hosts_cache[hostname]"], "ret_type": "", "ret_type_p": [["str", 0.19999999999999998], ["bool", 0.09999999999999999]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[524, 4], [547, 28]], "fn_var_ln": {"matching_host": [[546, 24], [546, 37]]}, "fn_var_occur": {"matching_host": [["matching_host", "None"], ["matching_host", "self", "localhost"], ["matching_host", "host"], ["matching_host", "self", "_create_implicit_localhost", "hostname"], ["self", "_hosts_cache", "hostname", "matching_host"], ["matching_host", "host"]]}, "name": "_get_host", "params": {"hostname": "", "self": ""}, "params_descr": {"hostname": "", "self": ""}, "params_occur": {"hostname": [["hostname", "C", "LOCALHOST"], ["matching_host", "self", "_create_implicit_localhost", "hostname"], ["self", "_hosts_cache", "hostname", "matching_host"], ["C", "LOCALHOST", "difference", "hostname"], ["self", "_hosts_cache", "host", "self", "_hosts_cache", "hostname"], ["hostname", "host", "name"]], "self": [["self", "localhost"], ["matching_host", "self", "localhost"], ["self", "get_group", "get_hosts"], ["matching_host", "self", "_create_implicit_localhost", "hostname"], ["self", "_hosts_cache", "hostname", "matching_host"], ["self", "_hosts_cache", "host", "self", "_hosts_cache", "hostname"], ["self", "groups", "values"], ["host", "self", "_hosts_cache"], ["self", "_hosts_cache", "host", "name", "host"]]}, "params_p": {"args": [], "hostname": [["bool", 0.14657223253952575], ["float", 0.07913469177734755], ["bytes", 0.07390419391892265]], "kwargs": [], "self": []}, "q_name": "Inventory._get_host", "ret_exprs": ["return matching_host"], "ret_type": "", "ret_type_p": [["str", 0.3661814245121534], ["bool", 0.14172248502115303], ["OrderedDict", 0.10933126354630267], ["Dict[str, Any]", 0.0816245627021216]], "variables": {"matching_host": ""}, "variables_p": {"matching_host": [["Tuple[Literal, Literal]", 0.19467058362535236], ["Optional[\"Lecture\"]", 0.11198838373282298], ["Optional[\"Texte\"]", 0.11198838373282298], ["Optional[float]", 0.09527160297014767], ["list", 0.09518354399206096], ["Union[int, str]", 0.08804259449312285], ["Optional[Tuple[int, int]]", 0.08380524093506138]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[549, 4], [550, 41]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "get_group", "params": {"groupname": "", "self": ""}, "params_descr": {"groupname": "", "self": ""}, "params_occur": {"groupname": [["self", "groups", "get", "groupname"]], "self": [["self", "groups", "get", "groupname"]]}, "params_p": {"args": [], "groupname": [["str", 0.6666666666634922], ["Optional[str]", 1.859277077628771e-11]], "kwargs": [], "self": []}, "q_name": "Inventory.get_group", "ret_exprs": ["return self.groups.get(groupname)"], "ret_type": "", "ret_type_p": [["str", 0.7407665412642563], ["bool", 0.173560107948113], ["int", 0.08567335078763072]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[552, 4], [555, 46]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "get_group_variables", "params": {"groupname": "", "self": "", "update_cached": "", "vault_password": ""}, "params_descr": {"groupname": "", "self": "", "update_cached": "", "vault_password": ""}, "params_occur": {"groupname": [["groupname", "self", "_vars_per_group", "update_cached"], ["self", "_vars_per_group", "groupname", "self", "_get_group_variables", "groupname", "vault_password", "vault_password"], ["self", "_vars_per_group", "groupname"]], "self": [["groupname", "self", "_vars_per_group", "update_cached"], ["self", "_vars_per_group", "groupname", "self", "_get_group_variables", "groupname", "vault_password", "vault_password"], ["self", "_vars_per_group", "groupname"]], "update_cached": [["groupname", "self", "_vars_per_group", "update_cached"]], "vault_password": [["self", "_vars_per_group", "groupname", "self", "_get_group_variables", "groupname", "vault_password", "vault_password"]]}, "params_p": {"args": [], "groupname": [["raiden.utils.BlockTimeout", 0.1987298774768851], ["bool", 0.1987298774768851], ["raiden.utils.ChainID", 0.09936493873844254], ["raiden.utils.Iterator[raiden.utils.Port]", 0.09936493873844254], ["float", 0.09936493873844254], ["raiden.constants.Environment", 0.09936493873844254]], "kwargs": [], "self": [], "update_cached": [["str", 0.33474864188553355], ["int", 0.18996121011049355], ["bool", 0.1765197298915245], ["List[str]", 0.09390970691310778]], "vault_password": [["bool", 0.18319696386779738], ["bytes", 0.1660452552323897]]}, "q_name": "Inventory.get_group_variables", "ret_exprs": ["return self._vars_per_group[groupname]"], "ret_type": "", "ret_type_p": [["str", 0.6164978560206805], ["Tuple[str]", 0.11754482888653547], ["Iterable[cmk.utils.type_defs.SectionName]", 0.10727831021174741], ["tuple", 0.07933950244051834]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[557, 4], [574, 19]], "fn_var_ln": {"group": [[559, 8], [559, 13]], "vars": [[572, 8], [572, 12]], "vars_results": [[566, 8], [566, 20]]}, "fn_var_occur": {"group": [["group", "self", "get_group", "groupname"], ["group", "None"], ["vars_results", "plugin", "get_group_vars", "group", "vault_password", "vault_password", "plugin", "self", "_vars_plugins", "hasattr", "plugin"], ["vars", "combine_vars", "vars", "self", "get_group_vars", "group"]], "vars": [["vars", "combine_vars", "vars", "updated"], ["vars", "combine_vars", "vars", "self", "get_group_vars", "group"]], "vars_results": [["vars_results", "plugin", "get_group_vars", "group", "vault_password", "vault_password", "plugin", "self", "_vars_plugins", "hasattr", "plugin"]]}, "name": "_get_group_variables", "params": {"groupname": "", "self": "", "vault_password": ""}, "params_descr": {"groupname": "", "self": "", "vault_password": ""}, "params_occur": {"groupname": [["group", "self", "get_group", "groupname"], ["Exception", "groupname"]], "self": [["group", "self", "get_group", "groupname"], ["vars_results", "plugin", "get_group_vars", "group", "vault_password", "vault_password", "plugin", "self", "_vars_plugins", "hasattr", "plugin"], ["vars", "combine_vars", "vars", "self", "get_group_vars", "group"]], "vault_password": [["vars_results", "plugin", "get_group_vars", "group", "vault_password", "vault_password", "plugin", "self", "_vars_plugins", "hasattr", "plugin"]]}, "params_p": {"args": [], "groupname": [["str", 0.9999999999999999]], "kwargs": [], "self": [], "vault_password": [["str", 0.5088671391145903], ["Optional[str]", 0.0971033962366292]]}, "q_name": "Inventory._get_group_variables", "ret_exprs": ["return vars"], "ret_type": "", "ret_type_p": [["str", 0.6164978560206805], ["Tuple[str]", 0.11754482888653547], ["Iterable[cmk.utils.type_defs.SectionName]", 0.10727831021174741], ["tuple", 0.07933950244051834]], "variables": {"group": "", "vars": "", "vars_results": ""}, "variables_p": {"group": [["dict", 0.10544093796711743]], "vars": [["Dict[str, List[int]]", 0.18429711357104378], ["dict", 0.12601925792098687], ["cmk.gui.plugins.views.utils.PainterOptions", 0.10551461803033567], ["Dict[str, Union[int, str]]", 0.09627517322960626]], "vars_results": [["str", 0.4873616563196609], ["Dict[str, List[str]]", 0.10651480453809146], ["Dict[Union[Any, Any], str]", 0.1059231431940045], ["Pattern[str]", 0.09790769031476913]]}}, {"docstring": {"func": "In get_vars() we merge a 'magic' dictionary 'groups' with group name", "long_descr": "keys and hostname list values into every host variable set.\n\nCache the creation of this structure here", "ret": null}, "fn_lc": [[576, 4], [588, 37]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "get_group_dict", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "_group_dict_cache"], ["iteritems", "self", "groups"], ["self", "_group_dict_cache", "group_name", "h", "name", "h", "group", "get_hosts"], ["self", "_group_dict_cache"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "Inventory.get_group_dict", "ret_exprs": ["return self._group_dict_cache"], "ret_type": "", "ret_type_p": [["int", 0.284920589842257], ["Dict[str, Any]", 0.08113186562428717], ["Dict[str, Dict[str, Any]]", 0.07921588104423279]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[590, 4], [595, 30]], "fn_var_ln": {"host": [[592, 8], [592, 12]]}, "fn_var_occur": {"host": [["host", "self", "get_host", "hostname"], ["host", "get_vars"]]}, "name": "get_vars", "params": {"hostname": "", "self": "", "update_cached": "", "vault_password": ""}, "params_descr": {"hostname": "", "self": "", "update_cached": "", "vault_password": ""}, "params_occur": {"hostname": [["host", "self", "get_host", "hostname"], ["AnsibleError", "hostname"]], "self": [["host", "self", "get_host", "hostname"]], "update_cached": [], "vault_password": []}, "params_p": {"args": [], "hostname": [["str", 0.9098575984036388], ["Dict[str, Any]", 0.09014240159636117]], "kwargs": [], "self": [], "update_cached": [["bool", 0.6787889824559485], ["Optional[str]", 0.1059283232201457], ["List[str]", 0.10031272872103127]], "vault_password": [["bool", 0.6787889824559485], ["Optional[str]", 0.1059283232201457], ["List[str]", 0.10031272872103127]]}, "q_name": "Inventory.get_vars", "ret_exprs": ["return host.get_vars()"], "ret_type": "", "ret_type_p": [["str", 0.39205143662567865], ["Optional[List[str]]", 0.11538264410847451], ["Optional[str]", 0.10744702413404954]], "variables": {"host": ""}, "variables_p": {"host": [["List[int]", 0.20681838923717738], ["str", 0.1440954696970632], ["bool", 0.1440954696970632], ["float", 0.08137546135365323], ["int", 0.06752029435963242]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[597, 4], [601, 44]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "get_host_variables", "params": {"hostname": "", "self": "", "update_cached": "", "vault_password": ""}, "params_descr": {"hostname": "", "self": "", "update_cached": "", "vault_password": ""}, "params_occur": {"hostname": [["hostname", "self", "_vars_per_host", "update_cached"], ["self", "_vars_per_host", "hostname", "self", "_get_host_variables", "hostname", "vault_password", "vault_password"], ["self", "_vars_per_host", "hostname"]], "self": [["hostname", "self", "_vars_per_host", "update_cached"], ["self", "_vars_per_host", "hostname", "self", "_get_host_variables", "hostname", "vault_password", "vault_password"], ["self", "_vars_per_host", "hostname"]], "update_cached": [["hostname", "self", "_vars_per_host", "update_cached"]], "vault_password": [["self", "_vars_per_host", "hostname", "self", "_get_host_variables", "hostname", "vault_password", "vault_password"]]}, "params_p": {"args": [], "hostname": [["raiden.utils.BlockTimeout", 0.1987298774768851], ["bool", 0.1987298774768851], ["raiden.utils.ChainID", 0.09936493873844254], ["raiden.utils.Iterator[raiden.utils.Port]", 0.09936493873844254], ["float", 0.09936493873844254], ["raiden.constants.Environment", 0.09936493873844254]], "kwargs": [], "self": [], "update_cached": [["str", 0.33474864188553355], ["int", 0.18996121011049355], ["bool", 0.1765197298915245], ["List[str]", 0.09390970691310778]], "vault_password": [["bool", 0.18319696386779738], ["bytes", 0.1660452552323897]]}, "q_name": "Inventory.get_host_variables", "ret_exprs": ["return self._vars_per_host[hostname]"], "ret_type": "", "ret_type_p": [["str", 0.6164978560206805], ["Tuple[str]", 0.11754482888653547], ["Iterable[cmk.utils.type_defs.SectionName]", 0.10727831021174741], ["tuple", 0.07933950244051834]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[603, 4], [629, 19]], "fn_var_ln": {"host": [[605, 8], [605, 12]], "vars": [[627, 12], [627, 16]], "vars_results": [[618, 8], [618, 20]]}, "fn_var_occur": {"host": [["host", "self", "get_host", "hostname"], ["host", "None"], ["vars_results", "plugin", "run", "host", "vault_password", "vault_password", "plugin", "self", "_vars_plugins", "hasattr", "plugin"], ["vars_results", "plugin", "get_host_vars", "host", "vault_password", "vault_password", "plugin", "self", "_vars_plugins", "hasattr", "plugin"], ["vars", "combine_vars", "vars", "self", "parser", "get_host_variables", "host"]], "vars": [["vars", "combine_vars", "vars", "updated"], ["vars", "combine_vars", "vars", "updated"], ["vars", "combine_vars", "vars", "self", "parser", "get_host_variables", "host"]], "vars_results": [["vars_results", "plugin", "run", "host", "vault_password", "vault_password", "plugin", "self", "_vars_plugins", "hasattr", "plugin"], ["vars_results", "plugin", "get_host_vars", "host", "vault_password", "vault_password", "plugin", "self", "_vars_plugins", "hasattr", "plugin"]]}, "name": "_get_host_variables", "params": {"hostname": "", "self": "", "vault_password": ""}, "params_descr": {"hostname": "", "self": "", "vault_password": ""}, "params_occur": {"hostname": [["host", "self", "get_host", "hostname"], ["AnsibleError", "hostname"]], "self": [["host", "self", "get_host", "hostname"], ["vars_results", "plugin", "run", "host", "vault_password", "vault_password", "plugin", "self", "_vars_plugins", "hasattr", "plugin"], ["vars_results", "plugin", "get_host_vars", "host", "vault_password", "vault_password", "plugin", "self", "_vars_plugins", "hasattr", "plugin"], ["self", "parser", "None"], ["vars", "combine_vars", "vars", "self", "parser", "get_host_variables", "host"]], "vault_password": [["vars_results", "plugin", "run", "host", "vault_password", "vault_password", "plugin", "self", "_vars_plugins", "hasattr", "plugin"], ["vars_results", "plugin", "get_host_vars", "host", "vault_password", "vault_password", "plugin", "self", "_vars_plugins", "hasattr", "plugin"]]}, "params_p": {"args": [], "hostname": [["str", 1.0]], "kwargs": [], "self": [], "vault_password": [["str", 0.8979967126104705], ["Dict[str, str]", 0.10200328738952953]]}, "q_name": "Inventory._get_host_variables", "ret_exprs": ["return vars"], "ret_type": "", "ret_type_p": [["str", 0.6164978560206805], ["Tuple[str]", 0.11754482888653547], ["Iterable[cmk.utils.type_defs.SectionName]", 0.10727831021174741], ["tuple", 0.07933950244051834]], "variables": {"host": "", "vars": "", "vars_results": ""}, "variables_p": {"host": [["dict", 0.4335193102010393], ["str", 0.11605391584961414], ["Set[str]", 0.07949730294632208]], "vars": [["dict", 0.20604907419397003], ["Set[str]", 0.11622284850421485], ["Optional[Dict[str, Any]]", 0.09022508171174881]], "vars_results": [["str", 0.22320039250516427], ["Pattern[str]", 0.20812618714738745], ["sys._version_info", 0.10747512520232201], ["Dict[str, Union[Any, Any, Any]]", 0.10535657153703487], ["Dict[str, Dict[str, Any]]", 0.09638922815962828], ["Optional[Dict[str, Any]]", 0.09109079404903962]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[631, 4], [635, 77]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "add_group", "params": {"group": "", "self": ""}, "params_descr": {"group": "", "self": ""}, "params_occur": {"group": [["group", "name", "self", "groups"], ["self", "groups", "group", "name", "group"], ["AnsibleError", "group", "name"]], "self": [["group", "name", "self", "groups"], ["self", "groups", "group", "name", "group"]]}, "params_p": {"args": [], "group": [["str", 0.467867896257675], ["Optional[int]", 0.10926543070615412], ["int", 0.08605442965653969]], "kwargs": [], "self": []}, "q_name": "Inventory.add_group", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "return a list of hostnames for a pattern ", "long_descr": null, "ret": null}, "fn_lc": [[637, 4], [644, 21]], "fn_var_ln": {"result": [[643, 12], [643, 18]]}, "fn_var_occur": {"result": [["result", "h", "h", "self", "get_hosts", "pattern"], ["len", "result", "pattern", "C", "LOCALHOST"], ["result", "pattern"]]}, "name": "list_hosts", "params": {"pattern": "", "self": ""}, "params_descr": {"pattern": "", "self": ""}, "params_occur": {"pattern": [["result", "h", "h", "self", "get_hosts", "pattern"], ["len", "result", "pattern", "C", "LOCALHOST"], ["result", "pattern"]], "self": [["result", "h", "h", "self", "get_hosts", "pattern"]]}, "params_p": {"args": [], "kwargs": [], "pattern": [["bytes", 0.10576028301033166], ["List[str]", 0.09007492409441496], ["Dict[str, float]", 0.088928422509021]], "self": []}, "q_name": "Inventory.list_hosts", "ret_exprs": ["return result"], "ret_type": "", "ret_type_p": [["str", 0.3130793686390235], ["object", 0.09813151876585378], ["list", 0.09813151876585378], ["List[str]", 0.09813151876585378], ["Callable[..., None]", 0.09813151876585378]], "variables": {"result": ""}, "variables_p": {"result": [["list", 0.09770476479333949], ["List[str]", 0.09484466746573872]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[646, 4], [647, 58]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "list_groups", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["sorted", "self", "groups", "keys", "key", "x", "x"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "Inventory.list_groups", "ret_exprs": ["return sorted(self.groups.keys(), key=lambda x: x)"], "ret_type": "", "ret_type_p": [["bool", 0.3759028902273653], ["str", 0.3376136431727654], ["Optional[List[Any]]", 0.09666766468189694], ["Optional[int]", 0.09369306897624656]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Restrict list operations to the hosts given in restriction.  This is used", "long_descr": "to batch serial operations in main playbook code, don't use this for other\nreasons.", "ret": null}, "fn_lc": [[649, 4], [659, 59]], "fn_var_ln": {"_restriction": [[659, 8], [659, 25]], "restriction": [[658, 12], [658, 23]]}, "fn_var_occur": {"_restriction": [["self", "_restriction", "h", "name", "h", "restriction"]], "restriction": [["restriction", "None"], ["isinstance", "restriction", "list"], ["restriction", "restriction"], ["self", "_restriction", "h", "name", "h", "restriction"]]}, "name": "restrict_to_hosts", "params": {"restriction": "", "self": ""}, "params_descr": {"restriction": "", "self": ""}, "params_occur": {"restriction": [["restriction", "None"], ["isinstance", "restriction", "list"], ["restriction", "restriction"], ["self", "_restriction", "h", "name", "h", "restriction"]], "self": [["self", "_restriction", "h", "name", "h", "restriction"]]}, "params_p": {"args": [], "kwargs": [], "restriction": [["Optional[bytes]", 0.2006531371563185], ["Optional[str]", 0.12315269809559977]], "self": []}, "q_name": "Inventory.restrict_to_hosts", "ret_exprs": ["return"], "ret_type": "", "ret_type_p": [["str", 0.18801587006719195], ["dict", 0.18428972825000367], ["Iterable[Hashable]", 0.09818287021767114]], "variables": {"_restriction": "", "restriction": ""}, "variables_p": {"_restriction": [["str", 0.48553613367301507], ["List[str]", 0.10374235189375822], ["list", 0.10106419736987737], ["dict", 0.09768668147909348]], "restriction": [["Optional[Sequence[Any]]", 0.15289723422302076], ["Optional[Callable[[Any], Any]]", 0.08926980978176909], ["List[Union[Any, Any]]", 0.08583962736997514], ["Optional[Callable[..., Any]]", 0.08306425565094706]]}}, {"docstring": {"func": "Limits inventory results to a subset of inventory that matches a given", "long_descr": "pattern, such as to select a given geographic of numeric slice amongst\na previous 'hosts' selection that only select roles, or vice versa.\nCorresponds to --limit parameter to ansible-playbook", "ret": null}, "fn_lc": [[661, 4], [681, 34]], "fn_var_ln": {"_subset": [[681, 12], [681, 24]], "fd": [[676, 20], [676, 22]], "results": [[672, 12], [672, 19]], "subset_patterns": [[671, 12], [671, 27]]}, "fn_var_occur": {"_subset": [["self", "_subset", "None"], ["self", "_subset", "results"]], "fd": [["fd", "open", "x"], ["results", "extend", "fd", "read", "split"], ["fd", "close"]], "results": [["results", "extend", "fd", "read", "split"], ["results", "append", "x"], ["self", "_subset", "results"]], "subset_patterns": [["subset_patterns", "Inventory", "split_host_pattern", "subset_pattern"]]}, "name": "subset", "params": {"self": "", "subset_pattern": ""}, "params_descr": {"self": "", "subset_pattern": ""}, "params_occur": {"self": [["self", "_subset", "None"], ["self", "_subset", "results"]], "subset_pattern": [["subset_pattern", "None"], ["subset_patterns", "Inventory", "split_host_pattern", "subset_pattern"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "subset_pattern": [["float", 0.3223034113055277], ["int", 0.2817517543863865], ["str", 0.11419307992169943]]}, "q_name": "Inventory.subset", "ret_exprs": [], "ret_type": "", "variables": {"_subset": "", "fd": "", "results": "", "subset_patterns": ""}, "variables_p": {"_subset": [["list", 0.9999999998902384], ["int", 1.0976158836103766e-10]], "fd": [["str", 0.45780921145359427], ["list", 0.13163998113275593], ["List[str]", 0.11892538943188294], ["float", 0.11191408749011045]], "results": [["List[object]", 0.44213463299574896], ["list", 0.4385455427239022], ["Dict[str, int]", 0.11931982428034864]], "subset_patterns": [["str", 0.26340961649308836], ["Type[RuntimeWarning]", 0.15522468602673448], ["dict", 0.11198114433133487], ["Dict[str, Union[Any, Any]]", 0.11198114433133487], ["bool", 0.08780320549769612]]}}, {"docstring": {"func": "Do not restrict list operations ", "long_descr": null, "ret": null}, "fn_lc": [[683, 4], [685, 32]], "fn_var_ln": {"_restriction": [[685, 8], [685, 25]]}, "fn_var_occur": {"_restriction": [["self", "_restriction", "None"]]}, "name": "remove_restriction", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "_restriction", "None"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "Inventory.remove_restriction", "ret_exprs": [], "ret_type": "", "variables": {"_restriction": ""}, "variables_p": {"_restriction": [["\"Frame\"", 0.19999999999676038], ["str", 3.971941177518544e-12], ["Dict[str, Any]", 3.6175949269712212e-12]]}}, {"docstring": {"func": "Did inventory come from a file? We don't use the equivalent loader", "long_descr": "methods in inventory, due to the fact that the loader does an implict\nDWIM on the path, which may be incorrect for inventory paths relative\nto the playbook basedir.", "ret": null}, "fn_lc": [[687, 4], [696, 77]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "is_file", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["isinstance", "self", "host_list", "string_types"], ["os", "path", "isfile", "self", "host_list", "self", "host_list", "os", "devnull"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "Inventory.is_file", "ret_exprs": ["return False", "return os.path.isfile(self.host_list) or self.host_list == os.devnull"], "ret_type": "", "ret_type_p": [["bool", 0.9999999999999999]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Is the inventory host list a directory? Same caveat for here as with", "long_descr": "the is_file() method above.", "ret": null}, "fn_lc": [[698, 4], [705, 34]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "is_directory", "params": {"path": "", "self": ""}, "params_descr": {"path": "", "self": ""}, "params_occur": {"path": [["os", "path", "isdir", "path"]], "self": [["isinstance", "self", "host_list", "string_types"]]}, "params_p": {"args": [], "kwargs": [], "path": [["str", 0.9999999999999997]], "self": []}, "q_name": "Inventory.is_directory", "ret_exprs": ["return False", "return os.path.isdir(path)"], "ret_type": "", "ret_type_p": [["bool", 0.9999999999999999]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "if inventory came from a file, what's the directory? ", "long_descr": null, "ret": null}, "fn_lc": [[707, 4], [720, 20]], "fn_var_ln": {"dname": [[719, 12], [719, 17]]}, "fn_var_occur": {"dname": [["dname", "self", "host_list"], ["dname", "self", "host_list"], ["dname", "None"], ["dname", "os", "path", "dirname", "self", "host_list"], ["dname", "None", "dname", "dname"], ["dname", "os", "getcwd"], ["dname", "os", "path", "abspath", "dname"]]}, "name": "basedir", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["dname", "self", "host_list"], ["self", "is_directory", "self", "host_list"], ["dname", "self", "host_list"], ["self", "is_file"], ["dname", "os", "path", "dirname", "self", "host_list"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "Inventory.basedir", "ret_exprs": ["return dname"], "ret_type": "", "ret_type_p": [["int", 0.30000000000000004], ["Callable", 0.2], ["str", 0.1]], "variables": {"dname": ""}, "variables_p": {"dname": [["list", 0.3109060345257312], ["List[str]", 0.19334761084082633], ["str", 0.19265582103757278], ["int", 0.11742718749832727], ["tuple", 0.09788231479974309], ["bool", 0.0877810312977992]]}}, {"docstring": {"func": "if inventory came from a file, what's the directory and file name? ", "long_descr": null, "ret": null}, "fn_lc": [[722, 4], [726, 29]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "src", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "is_file"], ["self", "host_list"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "Inventory.src", "ret_exprs": ["return None", "return self.host_list"], "ret_type": "", "ret_type_p": [["Optional[str]", 0.6196741376602803], ["Optional[int]", 0.09150829464913385], ["bool", 0.08950166903052095]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "returns the directory of the current playbook ", "long_descr": null, "ret": null}, "fn_lc": [[728, 4], [730, 37]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "playbook_basedir", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "_playbook_basedir"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "Inventory.playbook_basedir", "ret_exprs": ["return self._playbook_basedir"], "ret_type": "", "ret_type_p": [["int", 0.30000000000000004], ["Callable", 0.2], ["str", 0.1]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "sets the base directory of the playbook so inventory can use it as a", "long_descr": "basedir for host_ and group_vars, and other things.", "ret": null}, "fn_lc": [[732, 4], [766, 37]], "fn_var_ln": {"_group_vars_files": [[754, 16], [754, 38]], "_host_vars_files": [[760, 16], [760, 37]], "_playbook_basedir": [[745, 12], [745, 34]], "_vars_per_group": [[766, 12], [766, 32]], "_vars_per_host": [[765, 12], [765, 31]], "found_group_vars": [[752, 12], [752, 28]], "found_host_vars": [[758, 12], [758, 27]]}, "fn_var_occur": {"_group_vars_files": [["self", "_group_vars_files", "self", "_group_vars_files", "union", "found_group_vars"]], "_host_vars_files": [["self", "_host_vars_files", "self", "_host_vars_files", "union", "found_host_vars"]], "_playbook_basedir": [["dir_name", "self", "_playbook_basedir"], ["self", "_playbook_basedir"], ["self", "_variable_manager", "clear_playbook_hostgroup_vars_files", "self", "_playbook_basedir"], ["self", "_playbook_basedir", "dir_name"], ["found_group_vars", "self", "_find_group_vars_files", "self", "_playbook_basedir"], ["found_host_vars", "self", "_find_host_vars_files", "self", "_playbook_basedir"]], "_vars_per_group": [["self", "_vars_per_group"]], "_vars_per_host": [["self", "_vars_per_host"]], "found_group_vars": [["found_group_vars", "self", "_find_group_vars_files", "self", "_playbook_basedir"], ["self", "_group_vars_files", "self", "_group_vars_files", "union", "found_group_vars"]], "found_host_vars": [["found_host_vars", "self", "_find_host_vars_files", "self", "_playbook_basedir"], ["self", "_host_vars_files", "self", "_host_vars_files", "union", "found_host_vars"]]}, "name": "set_playbook_basedir", "params": {"dir_name": "", "self": ""}, "params_descr": {"dir_name": "", "self": ""}, "params_occur": {"dir_name": [["dir_name", "self", "_playbook_basedir"], ["self", "_playbook_basedir", "dir_name"]], "self": [["dir_name", "self", "_playbook_basedir"], ["self", "_playbook_basedir"], ["self", "_variable_manager", "clear_playbook_hostgroup_vars_files", "self", "_playbook_basedir"], ["self", "_playbook_basedir", "dir_name"], ["found_group_vars", "self", "_find_group_vars_files", "self", "_playbook_basedir"], ["self", "_group_vars_files", "self", "_group_vars_files", "union", "found_group_vars"], ["self", "groups", "values"], ["self", "get_group_vars", "group"], ["found_host_vars", "self", "_find_host_vars_files", "self", "_playbook_basedir"], ["self", "_host_vars_files", "self", "_host_vars_files", "union", "found_host_vars"], ["self", "get_hosts"], ["self", "get_host_vars", "host"], ["self", "_vars_per_host"], ["self", "_vars_per_group"]]}, "params_p": {"args": [], "dir_name": [["str", 0.8663318813793615], ["Tuple[str]", 0.13366811862063882]], "kwargs": [], "self": []}, "q_name": "Inventory.set_playbook_basedir", "ret_exprs": [], "ret_type": "", "variables": {"_group_vars_files": "", "_host_vars_files": "", "_playbook_basedir": "", "_vars_per_group": "", "_vars_per_host": "", "found_group_vars": "", "found_host_vars": ""}, "variables_p": {"_group_vars_files": [["str", 0.21523184181658073], ["Tuple[str, str]", 0.2025547805563478], ["Tuple[str, str, str, str, str, str, str, str, str]", 0.2025547805563478], ["List[str]", 0.17195193199700873], ["Set[str]", 0.1188878242369591]], "_host_vars_files": [["str", 0.40072338390603707], ["List[str]", 0.2014984941008114], ["Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]", 0.1007492470504057], ["Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]", 0.1007492470504057], ["Tuple[Literal, Literal, Literal, Literal, Literal]", 0.1007492470504057], ["Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]", 0.09553038084193446]], "_playbook_basedir": [["Dict[str, Union[Any, Any, str]]", 0.29155352545660224], ["int", 0.20366404580066758], ["Dict[str, str]", 0.20233783331780764], ["str", 0.10115361025050762], ["Optional[bool]", 0.08028693177979727]], "_vars_per_group": [["Pattern[str]", 0.689608519069808], ["int", 0.10831862427444687], ["dict", 0.10592548300477325], ["Type[str]", 0.09614737365097173]], "_vars_per_host": [["Pattern[str]", 0.689608519069808], ["int", 0.10831862427444687], ["dict", 0.10592548300477325], ["Type[str]", 0.09614737365097173]], "found_group_vars": [["str", 0.21449560136535434]], "found_host_vars": [["Pattern[str]", 0.6778788815730142], ["frozenset[Any]", 0.120017655587408], ["List[str]", 0.10149897788543155], ["list", 0.10060448495414645]]}}, {"docstring": {"func": "Read host_vars/ files ", "long_descr": null, "ret": null}, "fn_lc": [[768, 4], [770, 124]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "get_host_vars", "params": {"host": "", "new_pb_basedir": "", "return_results": "", "self": ""}, "params_descr": {"host": "", "new_pb_basedir": "", "return_results": "", "self": ""}, "params_occur": {"host": [["self", "_get_hostgroup_vars", "host", "host", "group", "None", "new_pb_basedir", "new_pb_basedir", "return_results", "return_results"]], "new_pb_basedir": [["self", "_get_hostgroup_vars", "host", "host", "group", "None", "new_pb_basedir", "new_pb_basedir", "return_results", "return_results"]], "return_results": [["self", "_get_hostgroup_vars", "host", "host", "group", "None", "new_pb_basedir", "new_pb_basedir", "return_results", "return_results"]], "self": [["self", "_get_hostgroup_vars", "host", "host", "group", "None", "new_pb_basedir", "new_pb_basedir", "return_results", "return_results"]]}, "params_p": {"args": [], "host": [["Optional[str]", 0.30197012581246413], ["str", 0.21676987634678155], ["bool", 0.20980077151200036], ["Optional[int]", 0.18045037894321964]], "kwargs": [], "new_pb_basedir": [["Optional[str]", 0.30197012581246413], ["str", 0.21676987634678155], ["bool", 0.20980077151200036], ["Optional[int]", 0.18045037894321964]], "return_results": [["Optional[str]", 0.30197012581246413], ["str", 0.21676987634678155], ["bool", 0.20980077151200036], ["Optional[int]", 0.18045037894321964]], "self": []}, "q_name": "Inventory.get_host_vars", "ret_exprs": ["return self._get_hostgroup_vars(host=host, group=None, new_pb_basedir=new_pb_basedir, return_results=return_results)"], "ret_type": "", "ret_type_p": [["Optional[str]", 0.3197629934852452], ["str", 0.2822270061502037], ["int", 0.10902455834871191]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Read group_vars/ files ", "long_descr": null, "ret": null}, "fn_lc": [[772, 4], [774, 125]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "get_group_vars", "params": {"group": "", "new_pb_basedir": "", "return_results": "", "self": ""}, "params_descr": {"group": "", "new_pb_basedir": "", "return_results": "", "self": ""}, "params_occur": {"group": [["self", "_get_hostgroup_vars", "host", "None", "group", "group", "new_pb_basedir", "new_pb_basedir", "return_results", "return_results"]], "new_pb_basedir": [["self", "_get_hostgroup_vars", "host", "None", "group", "group", "new_pb_basedir", "new_pb_basedir", "return_results", "return_results"]], "return_results": [["self", "_get_hostgroup_vars", "host", "None", "group", "group", "new_pb_basedir", "new_pb_basedir", "return_results", "return_results"]], "self": [["self", "_get_hostgroup_vars", "host", "None", "group", "group", "new_pb_basedir", "new_pb_basedir", "return_results", "return_results"]]}, "params_p": {"args": [], "group": [["str", 0.46378216121421534], ["Optional[str]", 0.3418870572067422]], "kwargs": [], "new_pb_basedir": [["str", 0.46378216121421534], ["Optional[str]", 0.3418870572067422]], "return_results": [["str", 0.46378216121421534], ["Optional[str]", 0.3418870572067422]], "self": []}, "q_name": "Inventory.get_group_vars", "ret_exprs": ["return self._get_hostgroup_vars(host=None, group=group, new_pb_basedir=new_pb_basedir, return_results=return_results)"], "ret_type": "", "ret_type_p": [["Optional[str]", 0.4202949434231723], ["Optional[List[str]]", 0.09190865167449559], ["str", 0.08068509296998057], ["list", 0.08068509296998057], ["bool", 0.08035380989369971]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Find group_vars/ files ", "long_descr": null, "ret": null}, "fn_lc": [[776, 4], [784, 25]], "fn_var_ln": {"basedir": [[779, 12], [779, 19]], "found_vars": [[783, 12], [783, 22]], "path": [[780, 8], [780, 12]]}, "fn_var_occur": {"basedir": [["basedir", "None"], ["path", "os", "path", "realpath", "os", "path", "join", "basedir"]], "found_vars": [["found_vars", "set"], ["found_vars", "set", "os", "listdir", "to_text", "path"]], "path": [["path", "os", "path", "realpath", "os", "path", "join", "basedir"], ["os", "path", "exists", "path"], ["found_vars", "set", "os", "listdir", "to_text", "path"]]}, "name": "_find_group_vars_files", "params": {"basedir": "", "self": ""}, "params_descr": {"basedir": "", "self": ""}, "params_occur": {"basedir": [["basedir", "None"], ["path", "os", "path", "realpath", "os", "path", "join", "basedir"]], "self": []}, "params_p": {"args": [], "basedir": [["str", 0.6912909673214552], ["Optional[str]", 0.30870903267854477]], "kwargs": [], "self": []}, "q_name": "Inventory._find_group_vars_files", "ret_exprs": ["return found_vars"], "ret_type": "", "ret_type_p": [["str", 0.21999184176757075], ["List[Tuple[int, int]]", 0.18717142001141224], ["bool", 0.09759382811927476], ["Dict[str, str]", 0.09657322227205732], ["Optional[str]", 0.09319743008573236], ["Set[str]", 0.08825947486540155]], "variables": {"basedir": "", "found_vars": "", "path": ""}, "variables_p": {"basedir": [["str", 1.0]], "found_vars": [["Pattern[str]", 0.5831666321916681], ["str", 0.4168333678083321]], "path": [["str", 1.0]]}}, {"docstring": {"func": "Find host_vars/ files ", "long_descr": null, "ret": null}, "fn_lc": [[786, 4], [794, 25]], "fn_var_ln": {"basedir": [[789, 12], [789, 19]], "found_vars": [[793, 12], [793, 22]], "path": [[790, 8], [790, 12]]}, "fn_var_occur": {"basedir": [["basedir", "None"], ["path", "os", "path", "realpath", "os", "path", "join", "basedir"]], "found_vars": [["found_vars", "set"], ["found_vars", "set", "os", "listdir", "to_text", "path"]], "path": [["path", "os", "path", "realpath", "os", "path", "join", "basedir"], ["os", "path", "exists", "path"], ["found_vars", "set", "os", "listdir", "to_text", "path"]]}, "name": "_find_host_vars_files", "params": {"basedir": "", "self": ""}, "params_descr": {"basedir": "", "self": ""}, "params_occur": {"basedir": [["basedir", "None"], ["path", "os", "path", "realpath", "os", "path", "join", "basedir"]], "self": []}, "params_p": {"args": [], "basedir": [["str", 0.6912909673214552], ["Optional[str]", 0.30870903267854477]], "kwargs": [], "self": []}, "q_name": "Inventory._find_host_vars_files", "ret_exprs": ["return found_vars"], "ret_type": "", "ret_type_p": [["str", 0.21999184176757075], ["List[Tuple[int, int]]", 0.18717142001141224], ["bool", 0.09759382811927476], ["Dict[str, str]", 0.09657322227205732], ["Optional[str]", 0.09319743008573236], ["Set[str]", 0.08825947486540155]], "variables": {"basedir": "", "found_vars": "", "path": ""}, "variables_p": {"basedir": [["str", 1.0]], "found_vars": [["Pattern[str]", 0.5831666321916681], ["str", 0.4168333678083321]], "path": [["str", 1.0]]}}, {"docstring": {"func": "Loads variables from group_vars/<groupname> and host_vars/<hostname> in directories parallel", "long_descr": "to the inventory base directory or in the same directory as the playbook.  Variables in the playbook\ndir will win over the inventory dir if files are in both.", "ret": null}, "fn_lc": [[796, 4], [846, 22]], "fn_var_ln": {"_basedir": [[805, 8], [805, 16]], "_playbook_basedir": [[806, 8], [806, 25]], "base_path": [[840, 16], [840, 25]], "basedir": [[819, 16], [819, 23]], "basedirs": [[813, 12], [813, 20]], "group_results": [[841, 16], [841, 29]], "host_results": [[835, 16], [835, 28]], "results": [[843, 20], [843, 27]], "scan_pass": [[821, 12], [821, 21]]}, "fn_var_occur": {"_basedir": [["_basedir", "self", "_basedir"], ["basedirs", "_basedir", "_playbook_basedir"], ["basedirs", "_basedir"], ["_basedir", "_playbook_basedir", "scan_pass"]], "_playbook_basedir": [["_playbook_basedir", "self", "_playbook_basedir"], ["new_pb_basedir", "_playbook_basedir"], ["basedirs", "_basedir", "_playbook_basedir"], ["_basedir", "_playbook_basedir", "scan_pass"]], "base_path": [["base_path", "to_text", "os", "path", "abspath", "os", "path", "join", "to_bytes", "basedir", "to_bytes", "group", "name", "errors"], ["host_results", "self", "_variable_manager", "add_group_vars_file", "base_path", "self", "_loader"], ["base_path", "to_text", "os", "path", "abspath", "os", "path", "join", "to_bytes", "basedir", "to_bytes", "host", "name", "errors"], ["group_results", "self", "_variable_manager", "add_host_vars_file", "base_path", "self", "_loader"]], "basedir": [["basedir", "None"], ["os", "path", "exists", "basedir"], ["base_path", "to_text", "os", "path", "abspath", "os", "path", "join", "to_bytes", "basedir", "to_bytes", "group", "name", "errors"], ["base_path", "to_text", "os", "path", "abspath", "os", "path", "join", "to_bytes", "basedir", "to_bytes", "host", "name", "errors"]], "basedirs": [["basedirs", "_basedir", "_playbook_basedir"], ["basedirs", "_basedir"]], "group_results": [["group_results", "self", "_variable_manager", "add_host_vars_file", "base_path", "self", "_loader"], ["results", "combine_vars", "results", "group_results"]], "host_results": [["host_results", "self", "_variable_manager", "add_group_vars_file", "base_path", "self", "_loader"], ["results", "combine_vars", "results", "host_results"]], "results": [["results", "combine_vars", "results", "host_results"], ["results", "combine_vars", "results", "group_results"]], "scan_pass": [["scan_pass", "scan_pass"], ["_basedir", "_playbook_basedir", "scan_pass"]]}, "name": "_get_hostgroup_vars", "params": {"group": "", "host": "", "new_pb_basedir": "", "return_results": "", "self": ""}, "params_descr": {"group": "", "host": "", "new_pb_basedir": "", "return_results": "", "self": ""}, "params_occur": {"group": [["host", "None", "any", "map", "ext", "group", "name", "ext", "self", "_group_vars_files", "C", "YAML_FILENAME_EXTENSIONS"], ["base_path", "to_text", "os", "path", "abspath", "os", "path", "join", "to_bytes", "basedir", "to_bytes", "group", "name", "errors"], ["group", "None", "any", "map", "ext", "host", "name", "ext", "self", "_host_vars_files", "C", "YAML_FILENAME_EXTENSIONS"]], "host": [["host", "None", "any", "map", "ext", "group", "name", "ext", "self", "_group_vars_files", "C", "YAML_FILENAME_EXTENSIONS"], ["group", "None", "any", "map", "ext", "host", "name", "ext", "self", "_host_vars_files", "C", "YAML_FILENAME_EXTENSIONS"], ["base_path", "to_text", "os", "path", "abspath", "os", "path", "join", "to_bytes", "basedir", "to_bytes", "host", "name", "errors"]], "new_pb_basedir": [["new_pb_basedir", "_playbook_basedir"]], "return_results": [], "self": [["_basedir", "self", "_basedir"], ["_playbook_basedir", "self", "_playbook_basedir"], ["host", "None", "any", "map", "ext", "group", "name", "ext", "self", "_group_vars_files", "C", "YAML_FILENAME_EXTENSIONS"], ["host_results", "self", "_variable_manager", "add_group_vars_file", "base_path", "self", "_loader"], ["group", "None", "any", "map", "ext", "host", "name", "ext", "self", "_host_vars_files", "C", "YAML_FILENAME_EXTENSIONS"], ["group_results", "self", "_variable_manager", "add_host_vars_file", "base_path", "self", "_loader"]]}, "params_p": {"args": [], "group": [["Optional[str]", 0.2768099436507641], ["str", 0.23528559709422137], ["Optional[List[Any]]", 0.11356488156353], ["Optional[float]", 0.09459469717744082], ["Optional[Dict[str, Any]]", 0.08931505669274607], ["bool", 0.08856621984906152]], "host": [["str", 0.21078408741256588], ["Sequence[Callable]", 0.1819055711740745], ["float", 0.13406869770602123], ["Optional[str]", 0.10117681022125448], ["Optional[Tuple[float, float]]", 0.09340123227929589], ["bool", 0.0901262244632145]], "kwargs": [], "new_pb_basedir": [["bool", 0.36746571245386783], ["int", 0.19949661952923783], ["Tuple[int, int, int]", 0.13106695826594444], ["Tuple[str]", 0.11344020770209513], ["Optional[dict]", 0.09632987695242229], ["List['cirq.Circuit']", 0.09220062509643248]], "return_results": [["bool", 0.4909887378592478], ["str", 0.4072090097126019], ["int", 0.10180225242815047]], "self": []}, "q_name": "Inventory._get_hostgroup_vars", "ret_exprs": ["return results"], "ret_type": "", "ret_type_p": [["str", 0.3004151774419012], ["dict", 0.11083086315731623], ["set", 0.10908484112880387], ["List[str]", 0.09928316991355693], ["List[Dict[str, Any]]", 0.0932512303070015]], "variables": {"_basedir": "", "_playbook_basedir": "", "base_path": "", "basedir": "", "basedirs": "", "group_results": "", "host_results": "", "results": "", "scan_pass": ""}, "variables_p": {"_basedir": [["int", 0.7], ["Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]", 0.1], ["bool", 0.1], ["Type[str]", 0.1]], "_playbook_basedir": [["str", 0.2076355449655246], ["int", 0.1891555620225892], ["Optional[int]", 0.09623275258734387]], "base_path": [["str", 0.9151030726506257]], "basedir": [["str", 0.5331715177294388], ["int", 0.17543277448422157], ["List[bytes]", 0.10666288996292007], ["subprocess.Popen[Any]", 0.09182653227436194]], "basedirs": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["str", 0.1]], "group_results": [["str", 0.8294797098803787], ["Dict[str, str]", 0.09068838988677609], ["Generator[Any, None, None]", 0.07983190023284498]], "host_results": [["str", 0.8341648767556805], ["Generator[Any, None, None]", 0.08328273115412353], ["Dict[str, str]", 0.0825523920901959]], "results": [["dict", 0.3684215782709442], ["bool", 0.11347740196292809], ["List[str]", 0.09100010220675828]], "scan_pass": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["str", 0.1]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[848, 4], [858, 44]], "fn_var_ln": {"_hosts_cache": [[853, 8], [853, 25]], "_vars_per_group": [[855, 8], [855, 28]], "_vars_per_host": [[854, 8], [854, 27]], "groups": [[856, 8], [856, 19]]}, "fn_var_occur": {"_hosts_cache": [["self", "_hosts_cache"]], "_vars_per_group": [["self", "_vars_per_group"]], "_vars_per_host": [["self", "_vars_per_host"]], "groups": [["self", "groups"]]}, "name": "refresh_inventory", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "clear_pattern_cache"], ["self", "clear_group_dict_cache"], ["self", "_hosts_cache"], ["self", "_vars_per_host"], ["self", "_vars_per_group"], ["self", "groups"], ["self", "parse_inventory", "self", "host_list"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "Inventory.refresh_inventory", "ret_exprs": [], "ret_type": "", "variables": {"_hosts_cache": "", "_vars_per_group": "", "_vars_per_host": "", "groups": ""}, "variables_p": {"_hosts_cache": [["str", 0.30000000000000004], ["Dict[str, Any]", 0.1], ["dict", 0.1], ["int", 0.1]], "_vars_per_group": [["Pattern[str]", 0.689608519069808], ["int", 0.10831862427444687], ["dict", 0.10592548300477325], ["Type[str]", 0.09614737365097173]], "_vars_per_host": [["Pattern[str]", 0.689608519069808], ["int", 0.10831862427444687], ["dict", 0.10592548300477325], ["Type[str]", 0.09614737365097173]], "groups": [["str", 0.30000000000000004], ["Dict[str, Any]", 0.1], ["dict", 0.1], ["int", 0.1]]}}], "name": "Inventory", "q_name": "Inventory", "variables": {}, "variables_p": {}}], "funcs": [], "imports": ["__future__", "absolute_import", "division", "print_function", "fnmatch", "os", "subprocess", "sys", "re", "itertools", "ansible", "compat", "six", "string_types", "iteritems", "ansible", "constants", "C", "ansible", "errors", "AnsibleError", "ansible", "inventory", "dir", "InventoryDirectory", "get_file_parser", "ansible", "inventory", "group", "Group", "ansible", "inventory", "host", "Host", "ansible", "module_utils", "_text", "to_bytes", "to_text", "ansible", "parsing", "utils", "addresses", "parse_address", "ansible", "plugins", "vars_loader", "ansible", "utils", "vars", "combine_vars", "__main__", "display", "ansible", "utils", "display", "Display"], "mod_var_ln": {"HOSTS_PATTERNS_CACHE": [[49, 0], [49, 20]], "__metaclass__": [[20, 0], [20, 13]], "display": [[46, 4], [46, 11]]}, "mod_var_occur": {"HOSTS_PATTERNS_CACHE": [["pattern_hash", "HOSTS_PATTERNS_CACHE"], ["HOSTS_PATTERNS_CACHE", "pattern_hash", "x", "x", "hosts", "x", "seen", "seen", "add", "x"], ["HOSTS_PATTERNS_CACHE", "pattern_hash"], ["HOSTS_PATTERNS_CACHE"], ["HOSTS_PATTERNS_CACHE"]], "__metaclass__": [], "display": [["display", "vvv", "to_text", "e"], ["display", "warning", "h", "self", "localhost", "name"], ["display", "vvvv", "h"], ["display", "warning", "to_text", "host_list"], ["display", "warning"], ["display", "warning"]]}, "no_types_annot": {"D": 0, "I": 0, "U": 220}, "session_id": "igH0LL34p5XV2agvVcb2WgGi30WxqXH8zDLQfvX2yVo", "set": null, "tc": [false, null], "type_annot_cove": 0.0, "typed_seq": "", "untyped_seq": "", "variables": {"HOSTS_PATTERNS_CACHE": "", "__metaclass__": "", "display": ""}, "variables_p": {"HOSTS_PATTERNS_CACHE": [["list", 0.13071859721453802], ["float", 0.11428015488556836]], "__metaclass__": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "display": [["str", 0.09136821821807985]]}}}