{"error": null, "response": {"classes": [{"cls_lc": [[130, 0], [539, 27]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[135, 4], [178, 124]], "fn_var_ln": {"SINGLE_VAR": [[171, 8], [171, 23]], "_available_variables": [[139, 8], [139, 33]], "_basedir": [[145, 12], [145, 25]], "_cached_result": [[140, 8], [140, 27]], "_clean_regex": [[177, 8], [177, 25]], "_fail_on_filter_errors": [[159, 8], [159, 35]], "_fail_on_lookup_errors": [[158, 8], [158, 35]], "_fail_on_undefined_errors": [[160, 8], [160, 38]], "_filter_loader": [[152, 12], [152, 31]], "_filters": [[137, 8], [137, 21]], "_loader": [[136, 8], [136, 20]], "_lookup_loader": [[154, 12], [154, 31]], "_no_type_regex": [[178, 8], [178, 27]], "_test_loader": [[153, 12], [153, 29]], "_tests": [[138, 8], [138, 19]], "block_end": [[174, 8], [174, 22]], "block_start": [[173, 8], [173, 24]], "environment": [[162, 8], [162, 24]], "variable_end": [[176, 8], [176, 25]], "variable_start": [[175, 8], [175, 27]]}, "fn_var_occur": {"SINGLE_VAR": [["self", "SINGLE_VAR", "re", "compile", "self", "environment", "variable_start_string", "self", "environment", "variable_end_string"]], "_available_variables": [["self", "_available_variables", "variables"]], "_basedir": [["self", "_basedir", "loader", "get_basedir"], ["self", "_basedir"], ["self", "environment", "Environment", "trim_blocks", "True", "undefined", "StrictUndefined", "extensions", "self", "_get_extensions", "finalize", "self", "_finalize", "loader", "FileSystemLoader", "self", "_basedir"]], "_cached_result": [["self", "_cached_result"]], "_clean_regex": [["self", "_clean_regex", "re", "compile", "self", "variable_start", "self", "block_start", "self", "block_end", "self", "variable_end"]], "_fail_on_filter_errors": [["self", "_fail_on_filter_errors", "True"]], "_fail_on_lookup_errors": [["self", "_fail_on_lookup_errors", "True"]], "_fail_on_undefined_errors": [["self", "_fail_on_undefined_errors", "C", "DEFAULT_UNDEFINED_VAR_BEHAVIOR"]], "_filter_loader": [["self", "_filter_loader", "getattr", "shared_loader_obj"], ["self", "_filter_loader", "filter_loader"]], "_filters": [["self", "_filters", "None"]], "_loader": [["self", "_loader", "loader"]], "_lookup_loader": [["self", "_lookup_loader", "getattr", "shared_loader_obj"], ["self", "_lookup_loader", "lookup_loader"]], "_no_type_regex": [["self", "_no_type_regex", "re", "compile", "join", "C", "STRING_TYPE_FILTERS", "self", "variable_end"]], "_test_loader": [["self", "_test_loader", "getattr", "shared_loader_obj"], ["self", "_test_loader", "test_loader"]], "_tests": [["self", "_tests", "None"]], "block_end": [["self", "block_end", "self", "environment", "block_end_string"], ["self", "_clean_regex", "re", "compile", "self", "variable_start", "self", "block_start", "self", "block_end", "self", "variable_end"]], "block_start": [["self", "block_start", "self", "environment", "block_start_string"], ["self", "_clean_regex", "re", "compile", "self", "variable_start", "self", "block_start", "self", "block_end", "self", "variable_end"]], "environment": [["self", "environment", "Environment", "trim_blocks", "True", "undefined", "StrictUndefined", "extensions", "self", "_get_extensions", "finalize", "self", "_finalize", "loader", "FileSystemLoader", "self", "_basedir"], ["self", "environment", "template_class", "AnsibleJ2Template"], ["self", "SINGLE_VAR", "re", "compile", "self", "environment", "variable_start_string", "self", "environment", "variable_end_string"], ["self", "block_start", "self", "environment", "block_start_string"], ["self", "block_end", "self", "environment", "block_end_string"], ["self", "variable_start", "self", "environment", "variable_start_string"], ["self", "variable_end", "self", "environment", "variable_end_string"]], "variable_end": [["self", "variable_end", "self", "environment", "variable_end_string"], ["self", "_clean_regex", "re", "compile", "self", "variable_start", "self", "block_start", "self", "block_end", "self", "variable_end"], ["self", "_no_type_regex", "re", "compile", "join", "C", "STRING_TYPE_FILTERS", "self", "variable_end"]], "variable_start": [["self", "variable_start", "self", "environment", "variable_start_string"], ["self", "_clean_regex", "re", "compile", "self", "variable_start", "self", "block_start", "self", "block_end", "self", "variable_end"]]}, "name": "__init__", "params": {"loader": "", "self": "", "shared_loader_obj": "", "variables": ""}, "params_descr": {"loader": "", "self": "", "shared_loader_obj": "", "variables": ""}, "params_occur": {"loader": [["self", "_loader", "loader"], ["self", "_basedir", "loader", "get_basedir"], ["self", "environment", "Environment", "trim_blocks", "True", "undefined", "StrictUndefined", "extensions", "self", "_get_extensions", "finalize", "self", "_finalize", "loader", "FileSystemLoader", "self", "_basedir"]], "self": [["self", "_loader", "loader"], ["self", "_filters", "None"], ["self", "_tests", "None"], ["self", "_available_variables", "variables"], ["self", "_cached_result"], ["self", "_basedir", "loader", "get_basedir"], ["self", "_basedir"], ["self", "_filter_loader", "getattr", "shared_loader_obj"], ["self", "_test_loader", "getattr", "shared_loader_obj"], ["self", "_lookup_loader", "getattr", "shared_loader_obj"], ["self", "_filter_loader", "filter_loader"], ["self", "_test_loader", "test_loader"], ["self", "_lookup_loader", "lookup_loader"], ["self", "_fail_on_lookup_errors", "True"], ["self", "_fail_on_filter_errors", "True"], ["self", "_fail_on_undefined_errors", "C", "DEFAULT_UNDEFINED_VAR_BEHAVIOR"], ["self", "environment", "Environment", "trim_blocks", "True", "undefined", "StrictUndefined", "extensions", "self", "_get_extensions", "finalize", "self", "_finalize", "loader", "FileSystemLoader", "self", "_basedir"], ["self", "environment", "template_class", "AnsibleJ2Template"], ["self", "SINGLE_VAR", "re", "compile", "self", "environment", "variable_start_string", "self", "environment", "variable_end_string"], ["self", "block_start", "self", "environment", "block_start_string"], ["self", "block_end", "self", "environment", "block_end_string"], ["self", "variable_start", "self", "environment", "variable_start_string"], ["self", "variable_end", "self", "environment", "variable_end_string"], ["self", "_clean_regex", "re", "compile", "self", "variable_start", "self", "block_start", "self", "block_end", "self", "variable_end"], ["self", "_no_type_regex", "re", "compile", "join", "C", "STRING_TYPE_FILTERS", "self", "variable_end"]], "shared_loader_obj": [["self", "_filter_loader", "getattr", "shared_loader_obj"], ["self", "_test_loader", "getattr", "shared_loader_obj"], ["self", "_lookup_loader", "getattr", "shared_loader_obj"]], "variables": [["self", "_available_variables", "variables"]]}, "params_p": {"args": [], "kwargs": [], "loader": [["int", 0.21709966399503763], ["bool", 0.19162998360702288], ["Optional[int]", 0.09581499180351144], ["list", 0.08714766399194031]], "self": [], "shared_loader_obj": [["bool", 0.6143793025424795], ["int", 0.1964478271857058], ["Optional[Dict[str, Any]]", 0.0982239135928529], ["str", 0.09094895667896181]], "variables": [["Callable", 0.29544425288265647], ["str", 0.20244248028616893], ["int", 0.17238853673229143], ["Union[float, Tuple[float, float]]", 0.08956253493870628]]}, "q_name": "Templar.__init__", "ret_exprs": [], "ret_type": "", "variables": {"SINGLE_VAR": "", "_available_variables": "", "_basedir": "", "_cached_result": "", "_clean_regex": "", "_fail_on_filter_errors": "", "_fail_on_lookup_errors": "", "_fail_on_undefined_errors": "", "_filter_loader": "", "_filters": "", "_loader": "", "_lookup_loader": "", "_no_type_regex": "", "_test_loader": "", "_tests": "", "block_end": "", "block_start": "", "environment": "", "variable_end": "", "variable_start": ""}, "variables_p": {"SINGLE_VAR": [["str", 1.0000000000000002]], "_available_variables": [["int", 0.37463694720411755], ["List[str]", 0.27238837057162246], ["str", 0.1449466267026638], ["DefaultDict[Any, List[Any]]", 0.1251215553661798], ["float", 0.08290650015541635]], "_basedir": [["Exception", 0.194469364537917], ["float", 0.11970857380627943], ["Tuple[Type[str], Type[bytes]]", 0.10880172040149237], ["Generator[Any, None, None]", 0.10712102152952917], ["List[float]", 0.09406651486118725], ["Dict[str, Any]", 0.09380765252790044]], "_cached_result": [["int", 0.43010208167165553], ["str", 0.3332695024255243], ["Callable(open)[..., Any][[[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal], default), Named(buffering, int, default), Named(encoding, Optional[str], default), Named(errors, Optional[str], default), Named(newline, Optional[str], default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.TextIOWrapper][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, Literal), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.FileIO][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, Union[Literal[-1], Literal], default), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.BufferedRandom][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, Union[Literal[-1], Literal], default), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.BufferedWriter][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, Union[Literal[-1], Literal], default), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.BufferedReader][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, int), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], BinaryIO][Any, Any]]", 0.13902751289179044], ["dict", 0.0976009030110298]], "_clean_regex": [["Dict[str, str]", 0.2647510655637235], ["Final", 0.1982826926800705], ["str", 0.12022516750719127], ["int", 0.11450225219849056], ["Pattern[str]", 0.08505200323198758]], "_fail_on_filter_errors": [["str", 0.4328376804424037], ["Dict[Any, Tuple[int, str]]", 0.274729381301758], ["List[list]", 0.1031558410430542], ["bool", 0.10234565998373202], ["Dict[str, Union[None, bool, str]]", 0.08693143722905194]], "_fail_on_lookup_errors": [["float", 0.3654783517080412], ["str", 0.18516482522314445], ["bool", 0.16490165508697294], ["List[list]", 0.10133195844043268], ["Dict[str, Optional[str]]", 0.09343846442888977], ["int", 0.08968474511251895]], "_fail_on_undefined_errors": [["int", 0.5243880897743609], ["List[int]", 0.18665215984945227]], "_filter_loader": [["Dict[str, str]", 0.5151725207695474], ["Dict[str, Any]", 0.1909300656277086], ["dict", 0.1858870592041973], ["Dict[str, int]", 0.10801035439854659]], "_filters": [["str", 0.13632050401612456], ["List[str]", 0.11476318498900394], ["dict", 0.08795538911080843], ["int", 0.08532553282712757], ["Optional[Dict[str, int]]", 0.07558188388478791]], "_loader": [["str", 0.30000000000000004], ["Dict[str, Any]", 0.1], ["dict", 0.1], ["int", 0.1]], "_lookup_loader": [["str", 0.33024182594503715], ["Dict[str, Union[Any, Any, Any]]", 0.1893643522006067], ["Set[str]", 0.18713594439852513], ["Type[\"ExtractableWordnet\"]", 0.09130561705676711]], "_no_type_regex": [["Callable", 0.11792834969119398], ["str", 0.07864110836090135], ["List[str]", 0.07245764375445261]], "_test_loader": [["str", 0.7761489101439345], ["int", 0.13629864331166505], ["Dict[str, Any]", 0.08755244654440056]], "_tests": [["bool", 1.4428841500241158e-11], ["str", 7.548594393601332e-12], ["Dict[str, list]", 7.065715997631698e-12], ["List[str]", 6.7889054398509145e-12]], "block_end": [["str", 0.5255773051627605], ["float", 0.18720505193383272], ["int", 0.09950765443094643]], "block_start": [["str", 0.8074922877264668], ["Optional[str]", 0.19250771227353314]], "environment": [["str", 0.3679943357751593], ["bool", 0.09656766405253683], ["float", 0.08348148358430584]], "variable_end": [["str", 0.19980236418225805], ["Type[int]", 0.18032905970473628], ["Type[bytes]", 0.09016452985236814], ["Type[Dict[str, Any]]", 0.09016452985236814], ["Type[str]", 0.09016452985236814]], "variable_start": [["str", 1.0]]}}, {"docstring": {"func": "Returns filter plugins, after loading and caching them if need be", "long_descr": null, "ret": null}, "fn_lc": [[180, 4], [195, 35]], "fn_var_ln": {"_filters": [[190, 8], [190, 21]], "plugins": [[188, 8], [188, 15]]}, "fn_var_occur": {"_filters": [["self", "_filters", "None"], ["self", "_filters", "copy"], ["self", "_filters", "dict"], ["self", "_filters", "update", "fp", "filters"], ["self", "_filters", "update", "self", "_get_tests"], ["self", "_filters", "copy"]], "plugins": [["plugins", "x", "x", "self", "_filter_loader", "all"]]}, "name": "_get_filters", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "_filters", "None"], ["self", "_filters", "copy"], ["plugins", "x", "x", "self", "_filter_loader", "all"], ["self", "_filters", "dict"], ["self", "_filters", "update", "fp", "filters"], ["self", "_filters", "update", "self", "_get_tests"], ["self", "_filters", "copy"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "Templar._get_filters", "ret_exprs": ["return self._filters.copy()", "return self._filters.copy()"], "ret_type": "", "ret_type_p": [["bool", 0.28467518919646995], ["Optional[Any]", 0.1381759216713929], ["str", 0.07576299725269178]], "variables": {"_filters": "", "plugins": ""}, "variables_p": {"_filters": [["int", 0.24991000172883837], ["str", 0.17122254188057795], ["dict", 0.0971600917522318], ["Dict[str, Any]", 0.08363198100653564]], "plugins": [["Tuple[str, str]", 0.18140422645045393], ["Dict[str, int]", 0.12328642281302957], ["dict", 0.11504182435880922], ["Any[Any]", 0.10587788721242071], ["str", 0.10291206442736074], ["list", 0.09721627933897403], ["Pattern[str]", 0.09169440107696447], ["int", 0.09157610142597025], ["Dict[str, Dict[str, Any]]", 0.09099079289601712]]}}, {"docstring": {"func": "Returns tests plugins, after loading and caching them if need be", "long_descr": null, "ret": null}, "fn_lc": [[197, 4], [211, 33]], "fn_var_ln": {"_tests": [[207, 8], [207, 19]], "plugins": [[205, 8], [205, 15]]}, "fn_var_occur": {"_tests": [["self", "_tests", "None"], ["self", "_tests", "copy"], ["self", "_tests", "dict"], ["self", "_tests", "update", "fp", "tests"], ["self", "_tests", "copy"]], "plugins": [["plugins", "x", "x", "self", "_test_loader", "all"]]}, "name": "_get_tests", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "_tests", "None"], ["self", "_tests", "copy"], ["plugins", "x", "x", "self", "_test_loader", "all"], ["self", "_tests", "dict"], ["self", "_tests", "update", "fp", "tests"], ["self", "_tests", "copy"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "Templar._get_tests", "ret_exprs": ["return self._tests.copy()", "return self._tests.copy()"], "ret_type": "", "ret_type_p": [["str", 0.4744558381962394], ["bool", 0.4351973201430245]], "variables": {"_tests": "", "plugins": ""}, "variables_p": {"_tests": [["int", 0.1984331660973555], ["Dict[int, Type[Any]]", 0.12646660938370058], ["str", 0.10541963018035898], ["io.TextIOWrapper", 0.09794746260567072], ["Dict[str, Type[Any]]", 0.09770202335251223], ["Dict[str, Set[str]]", 0.09616031241150237], ["Dict[str, Any]", 0.0953131532150877], ["Dict[str, int]", 0.0913191232809481], ["Dict[str, Union[str, int]]", 0.09123851947286372]], "plugins": [["dict", 0.5020276023222225], ["list", 0.09347922999984347]]}}, {"docstring": {"func": "Return jinja2 extensions to load.", "long_descr": "If some extensions are set via jinja_extensions in ansible.cfg, we try\nto load them with the jinja environment.", "ret": null}, "fn_lc": [[213, 4], [227, 25]], "fn_var_ln": {"jinja_exts": [[225, 12], [225, 22]]}, "fn_var_occur": {"jinja_exts": [["jinja_exts", "C", "DEFAULT_JINJA2_EXTENSIONS", "replace", "split"]]}, "name": "_get_extensions", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "Templar._get_extensions", "ret_exprs": ["return jinja_exts"], "ret_type": "", "ret_type_p": [["str", 0.19999999999999998], ["bool", 0.09999999999999999]], "variables": {"jinja_exts": ""}, "variables_p": {"jinja_exts": [["str", 0.19330520830662254], ["List[str]", 0.11582006549306606], ["Tuple[str, str, str, str, str, str, str, str, str, str, str, str, str]", 0.0999987259600226], ["list", 0.0996784397747045], ["int", 0.09731125305134457], ["Optional[str]", 0.09268792263021186]]}}, {"docstring": {"func": "remove jinja2 template tags from a string ", "long_descr": null, "ret": null}, "fn_lc": [[229, 4], [268, 34]], "fn_var_ln": {"block_openings": [[239, 12], [239, 26]], "prev_idx": [[255, 24], [255, 32]], "print_openings": [[238, 12], [238, 26]], "token": [[241, 16], [241, 21]], "token_start": [[242, 16], [242, 27]]}, "fn_var_occur": {"block_openings": [["block_openings", "append", "token_start"], ["token", "self", "block_end", "block_openings"], ["prev_idx", "block_openings", "pop"]], "prev_idx": [["prev_idx", "None"], ["prev_idx", "block_openings", "pop"], ["prev_idx", "print_openings", "pop"], ["prev_idx", "None"], ["data", "seek", "prev_idx", "os", "SEEK_SET"]], "print_openings": [["print_openings", "append", "token_start"], ["token", "self", "variable_end", "print_openings"], ["prev_idx", "print_openings", "pop"]], "token": [["token", "mo", "group"], ["token", "self", "variable_start"], ["token", "self", "block_start"], ["token", "self", "variable_start"], ["token", "self", "variable_end"], ["token", "self", "block_end", "block_openings"], ["token", "self", "variable_end", "print_openings"]], "token_start": [["token_start", "mo", "start"], ["block_openings", "append", "token_start"], ["print_openings", "append", "token_start"], ["data", "seek", "token_start", "os", "SEEK_SET"]]}, "name": "_clean_data", "params": {"orig_data": "", "self": ""}, "params_descr": {"orig_data": "", "self": ""}, "params_occur": {"orig_data": [["isinstance", "orig_data", "string_types", "hasattr", "orig_data"], ["contextlib", "closing", "StringIO", "orig_data", "data"], ["self", "_clean_regex", "finditer", "orig_data"]], "self": [["self", "_clean_regex", "finditer", "orig_data"], ["token", "self", "variable_start"], ["token", "self", "block_start"], ["token", "self", "variable_start"], ["token", "self", "variable_end"], ["token", "self", "block_end", "block_openings"], ["token", "self", "variable_end", "print_openings"], ["data", "write", "to_text", "self", "environment", "comment_start_string"], ["data", "write", "to_text", "self", "environment", "comment_end_string"]]}, "params_p": {"args": [], "kwargs": [], "orig_data": [["dict", 0.6095899073975095], ["str", 0.0959712012953124]], "self": []}, "q_name": "Templar._clean_data", "ret_exprs": ["return orig_data", "return data.getvalue()"], "ret_type": "", "ret_type_p": [["Dict[str, str]", 0.184222406649351], ["IO[bytes]", 0.12604908686841007], ["str", 0.10824060147017384], ["dict", 0.09570982242053169], ["Optional[float]", 0.09334039499332825], ["Optional[Dict[str, Any]]", 0.08898786454058545]], "variables": {"block_openings": "", "prev_idx": "", "print_openings": "", "token": "", "token_start": ""}, "variables_p": {"block_openings": [["dict", 0.25686638711409515], ["Dict[str, str]", 0.18063640113683055], ["int", 0.17438832621825473], ["Dict[str, Union[Any, Any, Any]]", 0.10223251460553975], ["List[int]", 0.09822179820920514], ["Dict[str, Union[Any, Any]]", 0.09405309482325291], ["Dict[str, Dict[str, Any]]", 0.09360147789282183]], "prev_idx": [["Tuple[Literal, Literal]", 0.18131794924994543], ["list", 0.11636446965638], ["Optional[str]", 0.10732959181672518], ["hashlib._Hash", 0.09237425368959594], ["Union[int, str]", 0.08789450250763904], ["Type[Tuple[Any, Any]]", 0.0854313733310852]], "print_openings": [["Dict[str, str]", 0.5826712101262962], ["frozenset[str]", 0.10725618449917246], ["Dict[Tuple[str, str], str]", 0.08044084513090854], ["list", 0.07783580479932765], ["int", 0.0721949734169205]], "token": [["str", 0.18875740839462185], ["django.utils.six.moves.str", 0.11627467849997145], ["List[Dict[str, Any]]", 0.10581852602561752], ["dict", 0.10143409039071481], ["List[Tuple[Any, Any, Any]]", 0.09677851116065352], ["Dict[str, bool]", 0.0952209537574536], ["Set[str]", 0.09233333884307447]], "token_start": [["list", 0.4114686835675249], ["dict", 0.12766139658546774], ["int", 0.1008182273431902], ["List[float]", 0.09136017664042335], ["range", 0.08160662709341866]]}}, {"docstring": {"func": "Sets the list of template variables this Templar instance will use", "long_descr": "to template things, so we don't have to pass them around between\ninternal methods. We also clear the template cache here, as the variables\nare being changed.", "ret": null}, "fn_lc": [[270, 4], [280, 38]], "fn_var_ln": {"_available_variables": [[279, 8], [279, 33]], "_cached_result": [[280, 8], [280, 27]]}, "fn_var_occur": {"_available_variables": [["self", "_available_variables", "variables"]], "_cached_result": [["self", "_cached_result"]]}, "name": "set_available_variables", "params": {"self": "", "variables": ""}, "params_descr": {"self": "", "variables": ""}, "params_occur": {"self": [["self", "_available_variables", "variables"], ["self", "_cached_result"]], "variables": [["isinstance", "variables", "dict"], ["self", "_available_variables", "variables"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "variables": [["dict", 0.12136938934136042], ["T", 0.09052631463219811], ["Dict[str, Any]", 0.08613281929255072]]}, "q_name": "Templar.set_available_variables", "ret_exprs": [], "ret_type": "", "variables": {"_available_variables": "", "_cached_result": ""}, "variables_p": {"_available_variables": [["int", 0.37463694720411755], ["List[str]", 0.27238837057162246], ["str", 0.1449466267026638], ["DefaultDict[Any, List[Any]]", 0.1251215553661798], ["float", 0.08290650015541635]], "_cached_result": [["int", 0.43010208167165553], ["str", 0.3332695024255243], ["Callable(open)[..., Any][[[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal], default), Named(buffering, int, default), Named(encoding, Optional[str], default), Named(errors, Optional[str], default), Named(newline, Optional[str], default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.TextIOWrapper][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, Literal), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.FileIO][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, Union[Literal[-1], Literal], default), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.BufferedRandom][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, Union[Literal[-1], Literal], default), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.BufferedWriter][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, Union[Literal[-1], Literal], default), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.BufferedReader][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, int), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], BinaryIO][Any, Any]]", 0.13902751289179044], ["dict", 0.0976009030110298]]}}, {"docstring": {"func": "Templates (possibly recursively) any given data as input. If convert_bare is", "long_descr": "set to True, the given data will be wrapped as a jinja2 variable ('{{foo}}')\nbefore being sent through the template engine.", "ret": null}, "fn_lc": [[282, 4], [370, 31]], "fn_var_ln": {"d": [[354, 16], [354, 17]], "eval_results": [[336, 32], [336, 44]], "fail_on_undefined": [[290, 12], [290, 29]], "only_one": [[312, 20], [312, 28]], "options_hash": [[326, 24], [326, 36]], "resolved_val": [[316, 28], [316, 40]], "result": [[338, 36], [338, 42]], "sha1_hash": [[327, 24], [327, 33]], "var_name": [[314, 24], [314, 32]], "variable": [[303, 16], [303, 24]], "variable_hash": [[325, 24], [325, 37]]}, "fn_var_occur": {"d": [["d", "k", "self", "template", "variable", "k", "preserve_trailing_newlines", "preserve_trailing_newlines", "fail_on_undefined", "fail_on_undefined", "overrides", "overrides"], ["d", "k", "variable", "k"]], "eval_results": [["eval_results", "safe_eval", "result", "locals", "self", "_available_variables", "include_exceptions", "True"], ["eval_results", "None"], ["result", "eval_results"]], "fail_on_undefined": [["fail_on_undefined", "None"], ["fail_on_undefined", "self", "_fail_on_undefined_errors"], ["options_hash", "sha1", "text_type", "preserve_trailing_newlines", "text_type", "escape_backslashes", "text_type", "fail_on_undefined", "text_type", "overrides", "encode"], ["result", "self", "_do_template", "variable", "preserve_trailing_newlines", "preserve_trailing_newlines", "escape_backslashes", "escape_backslashes", "fail_on_undefined", "fail_on_undefined", "overrides", "overrides"], ["self", "template", "v", "preserve_trailing_newlines", "preserve_trailing_newlines", "fail_on_undefined", "fail_on_undefined", "overrides", "overrides", "v", "variable"], ["d", "k", "self", "template", "variable", "k", "preserve_trailing_newlines", "preserve_trailing_newlines", "fail_on_undefined", "fail_on_undefined", "overrides", "overrides"]], "only_one": [["only_one", "self", "SINGLE_VAR", "match", "variable"], ["var_name", "only_one", "group"]], "options_hash": [["options_hash", "sha1", "text_type", "preserve_trailing_newlines", "text_type", "escape_backslashes", "text_type", "fail_on_undefined", "text_type", "overrides", "encode"], ["sha1_hash", "variable_hash", "hexdigest", "options_hash", "hexdigest"]], "resolved_val": [["resolved_val", "self", "_available_variables", "var_name"], ["isinstance", "resolved_val", "NON_TEMPLATED_TYPES"], ["resolved_val", "None"]], "result": [["result", "variable"], ["result", "self", "_cached_result", "sha1_hash"], ["result", "self", "_do_template", "variable", "preserve_trailing_newlines", "preserve_trailing_newlines", "escape_backslashes", "escape_backslashes", "fail_on_undefined", "fail_on_undefined", "overrides", "overrides"], ["result", "startswith", "result", "startswith", "self", "environment", "variable_start_string", "result", "startswith", "result"], ["eval_results", "safe_eval", "result", "locals", "self", "_available_variables", "include_exceptions", "True"], ["result", "eval_results"], ["self", "_cached_result", "sha1_hash", "result"]], "sha1_hash": [["sha1_hash", "None"], ["sha1_hash", "variable_hash", "hexdigest", "options_hash", "hexdigest"], ["cache", "sha1_hash", "self", "_cached_result"], ["result", "self", "_cached_result", "sha1_hash"], ["self", "_cached_result", "sha1_hash", "result"]], "var_name": [["var_name", "only_one", "group"], ["var_name", "self", "_available_variables"], ["resolved_val", "self", "_available_variables", "var_name"]], "variable": [["hasattr", "variable"], ["isinstance", "variable", "text_type"], ["self", "_clean_data", "variable"], ["self", "_clean_data", "variable", "_obj"], ["variable", "self", "_convert_bare_variable", "variable", "bare_deprecated", "bare_deprecated"], ["isinstance", "variable", "string_types"], ["result", "variable"], ["self", "_contains_vars", "variable"], ["only_one", "self", "SINGLE_VAR", "match", "variable"], ["variable_hash", "sha1", "text_type", "variable", "encode"], ["result", "self", "_do_template", "variable", "preserve_trailing_newlines", "preserve_trailing_newlines", "escape_backslashes", "escape_backslashes", "fail_on_undefined", "fail_on_undefined", "overrides", "overrides"], ["convert_data", "self", "_no_type_regex", "match", "variable"], ["isinstance", "variable", "list", "tuple"], ["self", "template", "v", "preserve_trailing_newlines", "preserve_trailing_newlines", "fail_on_undefined", "fail_on_undefined", "overrides", "overrides", "v", "variable"], ["isinstance", "variable", "dict"], ["variable", "keys"], ["d", "k", "self", "template", "variable", "k", "preserve_trailing_newlines", "preserve_trailing_newlines", "fail_on_undefined", "fail_on_undefined", "overrides", "overrides"], ["d", "k", "variable", "k"]], "variable_hash": [["variable_hash", "sha1", "text_type", "variable", "encode"], ["sha1_hash", "variable_hash", "hexdigest", "options_hash", "hexdigest"]]}, "name": "template", "params": {"bare_deprecated": "", "cache": "", "convert_bare": "", "convert_data": "", "escape_backslashes": "", "fail_on_undefined": "", "overrides": "", "preserve_trailing_newlines": "", "self": "", "static_vars": "", "variable": ""}, "params_descr": {"bare_deprecated": "", "cache": "", "convert_bare": "", "convert_data": "", "escape_backslashes": "", "fail_on_undefined": "", "overrides": "", "preserve_trailing_newlines": "", "self": "", "static_vars": "", "variable": ""}, "params_occur": {"bare_deprecated": [["variable", "self", "_convert_bare_variable", "variable", "bare_deprecated", "bare_deprecated"]], "cache": [["cache", "sha1_hash", "self", "_cached_result"]], "convert_bare": [], "convert_data": [["convert_data", "self", "_no_type_regex", "match", "variable"]], "escape_backslashes": [["options_hash", "sha1", "text_type", "preserve_trailing_newlines", "text_type", "escape_backslashes", "text_type", "fail_on_undefined", "text_type", "overrides", "encode"], ["result", "self", "_do_template", "variable", "preserve_trailing_newlines", "preserve_trailing_newlines", "escape_backslashes", "escape_backslashes", "fail_on_undefined", "fail_on_undefined", "overrides", "overrides"]], "fail_on_undefined": [["fail_on_undefined", "None"], ["fail_on_undefined", "self", "_fail_on_undefined_errors"], ["options_hash", "sha1", "text_type", "preserve_trailing_newlines", "text_type", "escape_backslashes", "text_type", "fail_on_undefined", "text_type", "overrides", "encode"], ["result", "self", "_do_template", "variable", "preserve_trailing_newlines", "preserve_trailing_newlines", "escape_backslashes", "escape_backslashes", "fail_on_undefined", "fail_on_undefined", "overrides", "overrides"], ["self", "template", "v", "preserve_trailing_newlines", "preserve_trailing_newlines", "fail_on_undefined", "fail_on_undefined", "overrides", "overrides", "v", "variable"], ["d", "k", "self", "template", "variable", "k", "preserve_trailing_newlines", "preserve_trailing_newlines", "fail_on_undefined", "fail_on_undefined", "overrides", "overrides"]], "overrides": [["options_hash", "sha1", "text_type", "preserve_trailing_newlines", "text_type", "escape_backslashes", "text_type", "fail_on_undefined", "text_type", "overrides", "encode"], ["result", "self", "_do_template", "variable", "preserve_trailing_newlines", "preserve_trailing_newlines", "escape_backslashes", "escape_backslashes", "fail_on_undefined", "fail_on_undefined", "overrides", "overrides"], ["self", "template", "v", "preserve_trailing_newlines", "preserve_trailing_newlines", "fail_on_undefined", "fail_on_undefined", "overrides", "overrides", "v", "variable"], ["d", "k", "self", "template", "variable", "k", "preserve_trailing_newlines", "preserve_trailing_newlines", "fail_on_undefined", "fail_on_undefined", "overrides", "overrides"]], "preserve_trailing_newlines": [["options_hash", "sha1", "text_type", "preserve_trailing_newlines", "text_type", "escape_backslashes", "text_type", "fail_on_undefined", "text_type", "overrides", "encode"], ["result", "self", "_do_template", "variable", "preserve_trailing_newlines", "preserve_trailing_newlines", "escape_backslashes", "escape_backslashes", "fail_on_undefined", "fail_on_undefined", "overrides", "overrides"], ["self", "template", "v", "preserve_trailing_newlines", "preserve_trailing_newlines", "fail_on_undefined", "fail_on_undefined", "overrides", "overrides", "v", "variable"], ["d", "k", "self", "template", "variable", "k", "preserve_trailing_newlines", "preserve_trailing_newlines", "fail_on_undefined", "fail_on_undefined", "overrides", "overrides"]], "self": [["fail_on_undefined", "self", "_fail_on_undefined_errors"], ["self", "_clean_data", "variable"], ["self", "_clean_data", "variable", "_obj"], ["variable", "self", "_convert_bare_variable", "variable", "bare_deprecated", "bare_deprecated"], ["self", "_contains_vars", "variable"], ["only_one", "self", "SINGLE_VAR", "match", "variable"], ["var_name", "self", "_available_variables"], ["resolved_val", "self", "_available_variables", "var_name"], ["cache", "sha1_hash", "self", "_cached_result"], ["result", "self", "_cached_result", "sha1_hash"], ["result", "self", "_do_template", "variable", "preserve_trailing_newlines", "preserve_trailing_newlines", "escape_backslashes", "escape_backslashes", "fail_on_undefined", "fail_on_undefined", "overrides", "overrides"], ["convert_data", "self", "_no_type_regex", "match", "variable"], ["result", "startswith", "result", "startswith", "self", "environment", "variable_start_string", "result", "startswith", "result"], ["eval_results", "safe_eval", "result", "locals", "self", "_available_variables", "include_exceptions", "True"], ["self", "_cached_result", "sha1_hash", "result"], ["self", "template", "v", "preserve_trailing_newlines", "preserve_trailing_newlines", "fail_on_undefined", "fail_on_undefined", "overrides", "overrides", "v", "variable"], ["d", "k", "self", "template", "variable", "k", "preserve_trailing_newlines", "preserve_trailing_newlines", "fail_on_undefined", "fail_on_undefined", "overrides", "overrides"], ["self", "_fail_on_filter_errors"]], "static_vars": [["k", "static_vars"]], "variable": [["hasattr", "variable"], ["isinstance", "variable", "text_type"], ["self", "_clean_data", "variable"], ["self", "_clean_data", "variable", "_obj"], ["variable", "self", "_convert_bare_variable", "variable", "bare_deprecated", "bare_deprecated"], ["isinstance", "variable", "string_types"], ["result", "variable"], ["self", "_contains_vars", "variable"], ["only_one", "self", "SINGLE_VAR", "match", "variable"], ["variable_hash", "sha1", "text_type", "variable", "encode"], ["result", "self", "_do_template", "variable", "preserve_trailing_newlines", "preserve_trailing_newlines", "escape_backslashes", "escape_backslashes", "fail_on_undefined", "fail_on_undefined", "overrides", "overrides"], ["convert_data", "self", "_no_type_regex", "match", "variable"], ["isinstance", "variable", "list", "tuple"], ["self", "template", "v", "preserve_trailing_newlines", "preserve_trailing_newlines", "fail_on_undefined", "fail_on_undefined", "overrides", "overrides", "v", "variable"], ["isinstance", "variable", "dict"], ["variable", "keys"], ["d", "k", "self", "template", "variable", "k", "preserve_trailing_newlines", "preserve_trailing_newlines", "fail_on_undefined", "fail_on_undefined", "overrides", "overrides"], ["d", "k", "variable", "k"]]}, "params_p": {"args": [], "bare_deprecated": [["str", 0.18163459174641716], ["bool", 0.100162587306633]], "cache": [["str", 0.3614543292762669], ["int", 0.35131941041568643]], "convert_bare": [["bool", 0.4093576960644513], ["str", 0.09783817112700931]], "convert_data": [["bool", 0.29855822169762664], ["str", 0.20461984620390689], ["Any", 0.09255996694843513], ["MutableMapping", 0.09148771966561178]], "escape_backslashes": [["str", 0.17148642439364387], ["bool", 0.11170983789200428], ["Dict[str, str]", 0.09035142302407813]], "fail_on_undefined": [["str", 0.29736775674807564], ["Dict[str, Any]", 0.1189024395920727], ["purplship.core.utils.xml.Element", 0.10021460286583506], ["int", 0.09818685949088192]], "kwargs": [], "overrides": [["str", 0.17148642439364387], ["bool", 0.11170983789200428], ["Dict[str, str]", 0.09035142302407813]], "preserve_trailing_newlines": [["str", 0.17148642439364387], ["bool", 0.11170983789200428], ["Dict[str, str]", 0.09035142302407813]], "self": [], "static_vars": [["int", 0.11469562619756192], ["bool", 0.10826235744440448], ["Iterator", 0.09172942719149266], ["dict", 0.09162467077270549]], "variable": [["Dict[str, Any]", 0.09938270798613985], ["str", 0.09313663112494433]]}, "q_name": "Templar.template", "ret_exprs": ["return self._clean_data(variable)", "return self._clean_data(variable._obj)", "return resolved_val", "return C.DEFAULT_NULL_REPRESENTATION", "return result", "return [self.template(v, preserve_trailing_newlines=preserve_trailing_newlines, fail_on_undefined=fail_on_undefined, overrides=overrides) for v in variable]", "return d", "return variable", "return variable"], "ret_type": "", "ret_type_p": [["str", 0.08760211116102293], ["Dict[str, Any]", 0.07882208523360175]], "variables": {"d": "", "eval_results": "", "fail_on_undefined": "", "only_one": "", "options_hash": "", "resolved_val": "", "result": "", "sha1_hash": "", "var_name": "", "variable": "", "variable_hash": ""}, "variables_p": {"d": [["io.TextIOWrapper", 0.14693806446133506]], "eval_results": [["basilisp.lang.runtime.Var", 0.35340448018293213], ["dict", 0.17496115591621855]], "fail_on_undefined": [["dict", 0.2845665062810307], ["str", 0.17384320318966612]], "only_one": [["List[str]", 0.2691912386953339], ["dict", 0.19416854962331787], ["Dict[str, Any]", 0.13402593751966155], ["DefaultDict[Any, int]", 0.09691324488551088]], "options_hash": [["str", 0.6572903502559719], ["frozenset[Any]", 0.08968321027342055], ["Set[str]", 0.08432381822026114]], "resolved_val": [["Set[str]", 0.1169231649191911], ["List[str]", 0.1020371398258843], ["Dict[str, Any]", 0.09628643348492166], ["dict", 0.08545632876590575], ["str", 0.08384443455838916]], "result": [["dict", 0.17492324065013187], ["Dict[str, Any]", 0.10859517050067867], ["Dict[str, str]", 0.0994300169156985], ["Counter[Any]", 0.09282419409379039], ["Set[str]", 0.08742682225066493]], "sha1_hash": [["str", 0.23658572532601813]], "var_name": [["Dict[str, Any]", 0.5042514215710986], ["dict", 0.2131396210515974], ["str", 0.1816929876648482]], "variable": [["str", 0.10774043541819021], ["tuple", 0.09725517210364011], ["Type[List[Any]]", 0.09713063541034753], ["list", 0.09252309785342547]], "variable_hash": [["Dict[str, Union[Any, Any]]", 0.09524309828700972]]}}, {"docstring": {"func": "returns True if the data can be templated w/o errors", "long_descr": null, "ret": null}, "fn_lc": [[372, 4], [381, 26]], "fn_var_ln": {"templatable": [[380, 11], [380, 22]]}, "fn_var_occur": {"templatable": [["templatable", "True"], ["templatable", "False"]]}, "name": "templatable", "params": {"data": "", "self": ""}, "params_descr": {"data": "", "self": ""}, "params_occur": {"data": [["self", "template", "data"]], "self": [["self", "template", "data"]]}, "params_p": {"args": [], "data": [["dict", 0.49999999999999994], ["bytes", 0.3], ["Union[bytes, bytearray, memoryview]", 0.09999999999999999]], "kwargs": [], "self": []}, "q_name": "Templar.templatable", "ret_exprs": ["return templatable"], "ret_type": "", "ret_type_p": [["int", 0.30000000000000004], ["Callable", 0.2], ["str", 0.1]], "variables": {"templatable": ""}, "variables_p": {"templatable": [["float", 0.9999999999206406], ["List[str]", 2.9031223860150636e-11], ["int", 1.177363907488084e-11], ["bool", 9.567590908700437e-12]]}}, {"docstring": {"func": "returns True if the data contains a variable pattern", "long_descr": null, "ret": null}, "fn_lc": [[383, 4], [391, 20]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "_contains_vars", "params": {"data": "", "self": ""}, "params_descr": {"data": "", "self": ""}, "params_occur": {"data": [["isinstance", "data", "string_types"], ["marker", "data"]], "self": [["self", "environment", "block_start_string", "self", "environment", "variable_start_string", "self", "environment", "comment_start_string"]]}, "params_p": {"args": [], "data": [["dict", 0.31750721765711903], ["Type[object]", 0.1394349056569676], ["int", 0.10754965140988937], ["bytes", 0.0860155568754012]], "kwargs": [], "self": []}, "q_name": "Templar._contains_vars", "ret_exprs": ["return True", "return False"], "ret_type": "", "ret_type_p": [["bool", 0.9999999999999999]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Wraps a bare string, which may have an attribute portion (ie. foo.bar)", "long_descr": "in jinja2 variable braces so that it is evaluated properly.", "ret": null}, "fn_lc": [[393, 4], [411, 23]], "fn_var_ln": {"contains_filters": [[400, 12], [400, 28]], "first_part": [[401, 12], [401, 22]]}, "fn_var_occur": {"contains_filters": [["contains_filters", "variable"], ["contains_filters", "first_part", "self", "_available_variables", "self", "environment", "variable_start_string", "variable"]], "first_part": [["first_part", "variable", "split", "split", "split"], ["contains_filters", "first_part", "self", "_available_variables", "self", "environment", "variable_start_string", "variable"]]}, "name": "_convert_bare_variable", "params": {"bare_deprecated": "", "self": "", "variable": ""}, "params_descr": {"bare_deprecated": "", "self": "", "variable": ""}, "params_occur": {"bare_deprecated": [], "self": [["contains_filters", "first_part", "self", "_available_variables", "self", "environment", "variable_start_string", "variable"], ["display", "deprecated", "self", "environment", "variable_start_string", "variable", "self", "environment", "variable_end_string"], ["self", "environment", "variable_start_string", "variable", "self", "environment", "variable_end_string"]], "variable": [["isinstance", "variable", "string_types"], ["contains_filters", "variable"], ["first_part", "variable", "split", "split", "split"], ["contains_filters", "first_part", "self", "_available_variables", "self", "environment", "variable_start_string", "variable"], ["display", "deprecated", "self", "environment", "variable_start_string", "variable", "self", "environment", "variable_end_string"], ["self", "environment", "variable_start_string", "variable", "self", "environment", "variable_end_string"]]}, "params_p": {"args": [], "bare_deprecated": [["Optional[List]", 0.13336362322786535]], "kwargs": [], "self": [], "variable": [["str", 0.18797557221907904], ["bool", 0.10561779627800912]]}, "q_name": "Templar._convert_bare_variable", "ret_exprs": ["return \"%s%s%s\" % (self.environment.variable_start_string, variable, self.environment.variable_end_string)", "return variable"], "ret_type": "", "ret_type_p": [["str", 0.9120145464645255], ["Exception", 0.0879854535354747]], "variables": {"contains_filters": "", "first_part": ""}, "variables_p": {"contains_filters": [["Set[str]", 0.19021430152176544], ["List[str]", 0.11988214411459183], ["Iterator[str]", 0.10171225746066026], ["Tuple[str, str, str, str, str, str, str, str, str]", 0.10123906820337723], ["str", 0.10016186816789441], ["Type[List[int]]", 0.0991305503320874], ["Dict[str, Union[Any, Any, Any, Any, str]]", 0.09588660339987443], ["list", 0.09588660339987443]], "first_part": [["frozenset[str]", 0.4975116254898861], ["tuple", 0.1791798113522083], ["Counter[str]", 0.09407319027210378]]}}, {"docstring": {"func": "A custom finalize method for jinja2, which prevents None from being returned", "long_descr": null, "ret": null}, "fn_lc": [[413, 4], [417, 49]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "_finalize", "params": {"self": "", "thing": ""}, "params_descr": {"self": "", "thing": ""}, "params_occur": {"self": [], "thing": [["thing", "thing", "None"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "thing": [["str", 0.28571428569782215], ["list", 0.14285714284891107], ["Optional[List[str]]", 0.14285714284891107], ["bool", 2.731210985515269e-11], ["Optional[int]", 1.5155192925327517e-11], ["Optional[List[Callable]]", 1.5155192925327517e-11]]}, "q_name": "Templar._finalize", "ret_exprs": ["return thing if thing is not None else ''"], "ret_type": "", "ret_type_p": [["bool", 0.6792633331415403], ["dict", 0.22169821727064737], ["str", 0.09903844958781231]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[419, 4], [452, 69]], "fn_var_ln": {"instance": [[420, 8], [420, 16]], "loop_terms": [[426, 12], [426, 22]], "ran": [[448, 28], [448, 31]], "wantlist": [[423, 12], [423, 20]]}, "fn_var_occur": {"instance": [["instance", "self", "_lookup_loader", "get", "name", "lower", "loader", "self", "_loader", "templar", "self"], ["instance", "None"], ["ran", "instance", "run", "loop_terms", "variables", "self", "_available_variables", "kwargs"]], "loop_terms": [["loop_terms", "listify_lookup_plugin_terms", "terms", "args", "templar", "self", "loader", "self", "_loader", "fail_on_undefined", "True", "convert_bare", "False"], ["ran", "instance", "run", "loop_terms", "variables", "self", "_available_variables", "kwargs"]], "ran": [["ran", "instance", "run", "loop_terms", "variables", "self", "_available_variables", "kwargs"], ["ran", "None"], ["ran", "wrap_var", "ran"], ["ran", "UnsafeProxy", "join", "ran"], ["isinstance", "ran", "list", "len", "ran"], ["ran", "wrap_var", "ran"], ["ran", "wrap_var", "ran"]], "wantlist": [["wantlist", "kwargs", "pop", "False"]]}, "name": "_lookup", "params": {"args": "", "kwargs": "", "name": "", "self": ""}, "params_descr": {"args": "", "kwargs": "", "name": "", "self": ""}, "params_occur": {"args": [["loop_terms", "listify_lookup_plugin_terms", "terms", "args", "templar", "self", "loader", "self", "_loader", "fail_on_undefined", "True", "convert_bare", "False"]], "kwargs": [["wantlist", "kwargs", "pop", "False"], ["ran", "instance", "run", "loop_terms", "variables", "self", "_available_variables", "kwargs"]], "name": [["instance", "self", "_lookup_loader", "get", "name", "lower", "loader", "self", "_loader", "templar", "self"], ["AnsibleError", "name"]], "self": [["instance", "self", "_lookup_loader", "get", "name", "lower", "loader", "self", "_loader", "templar", "self"], ["loop_terms", "listify_lookup_plugin_terms", "terms", "args", "templar", "self", "loader", "self", "_loader", "fail_on_undefined", "True", "convert_bare", "False"], ["ran", "instance", "run", "loop_terms", "variables", "self", "_available_variables", "kwargs"], ["self", "_fail_on_lookup_errors"]]}, "params_p": {"args": [], "kwargs": [], "name": [["str", 0.8500356418463801]], "self": []}, "q_name": "Templar._lookup", "ret_exprs": ["return ran"], "ret_type": "", "ret_type_p": [["int", 0.30000000000000004], ["Callable", 0.2], ["str", 0.1]], "variables": {"instance": "", "loop_terms": "", "ran": "", "wantlist": ""}, "variables_p": {"instance": [["Dict[str, str]", 0.341337150937113], ["Dict[Any, Tuple[Any, Any]]", 0.18673255389347215], ["List[str]", 0.09717683590687683], ["dict", 0.09476951194962888], ["bytes", 0.08765295100243946]], "loop_terms": [["list", 0.1069176079961806]], "ran": [], "wantlist": [["bool", 0.1963772384376278], ["Dict[str, str]", 0.18013939823607683], ["Set[str]", 0.13096743994052992], ["dict", 0.12063550622093999], ["str", 0.09531099209977345], ["list", 0.09441982997966217]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[454, 4], [539, 27]], "fn_var_ln": {"data": [[486, 16], [486, 20]], "data_newlines": [[457, 8], [457, 21]], "eol": [[471, 16], [471, 19]], "errmsg": [[510, 20], [510, 26]], "fail_on_undefined": [[460, 12], [460, 29]], "jvars": [[501, 12], [501, 17]], "key": [[476, 20], [476, 23]], "line": [[472, 16], [472, 20]], "myenv": [[467, 16], [467, 21]], "new_context": [[503, 12], [503, 23]], "res": [[507, 16], [507, 19]], "res_newlines": [[530, 16], [530, 28]], "rf": [[504, 12], [504, 14]], "t": [[489, 16], [489, 17]], "val": [[475, 25], [475, 28]]}, "fn_var_occur": {"data": [["data_newlines", "_count_newlines_from_end", "data"], ["data", "startswith", "JINJA2_OVERRIDE"], ["eol", "data", "find"], ["line", "data", "len", "JINJA2_OVERRIDE", "eol"], ["data", "data", "eol"], ["data", "_escape_backslashes", "data", "myenv"], ["t", "myenv", "from_string", "data"], ["AnsibleError", "to_native", "e", "to_native", "data"], ["AnsibleError", "to_native", "data"], ["errmsg", "to_native", "data"], ["display", "debug", "to_native", "data"], ["AnsibleError", "to_native", "data", "to_native", "te"]], "data_newlines": [["data_newlines", "_count_newlines_from_end", "data"], ["data_newlines", "res_newlines"], ["res", "data_newlines", "res_newlines"]], "eol": [["eol", "data", "find"], ["line", "data", "len", "JINJA2_OVERRIDE", "eol"], ["data", "data", "eol"]], "errmsg": [["errmsg", "to_native", "data"], ["errmsg", "to_native", "te"], ["AnsibleUndefinedVariable", "errmsg"]], "fail_on_undefined": [["fail_on_undefined", "None"], ["fail_on_undefined", "self", "_fail_on_undefined_errors"]], "jvars": [["jvars", "AnsibleJ2Vars", "self", "t", "globals"], ["new_context", "t", "new_context", "jvars", "shared", "True"]], "key": [["key", "val", "pair", "split"], ["key", "key", "strip"], ["setattr", "myenv", "key", "ast", "literal_eval", "val", "strip"]], "line": [["line", "data", "len", "JINJA2_OVERRIDE", "eol"], ["line", "split"]], "myenv": [["myenv", "self", "environment", "overlay"], ["myenv", "self", "environment", "overlay", "overrides"], ["setattr", "myenv", "key", "ast", "literal_eval", "val", "strip"], ["myenv", "filters", "update", "self", "_get_filters"], ["myenv", "tests", "update", "self", "_get_tests"], ["data", "_escape_backslashes", "data", "myenv"], ["t", "myenv", "from_string", "data"]], "new_context": [["new_context", "t", "new_context", "jvars", "shared", "True"], ["rf", "t", "root_render_func", "new_context"]], "res": [["res", "j2_concat", "rf"], ["res_newlines", "_count_newlines_from_end", "res"], ["res", "data_newlines", "res_newlines"]], "res_newlines": [["res_newlines", "_count_newlines_from_end", "res"], ["data_newlines", "res_newlines"], ["res", "data_newlines", "res_newlines"]], "rf": [["rf", "t", "root_render_func", "new_context"], ["res", "j2_concat", "rf"]], "t": [["t", "myenv", "from_string", "data"], ["t", "globals", "self", "_lookup"], ["t", "globals", "self", "_finalize"], ["jvars", "AnsibleJ2Vars", "self", "t", "globals"], ["new_context", "t", "new_context", "jvars", "shared", "True"], ["rf", "t", "root_render_func", "new_context"]], "val": [["key", "val", "pair", "split"], ["setattr", "myenv", "key", "ast", "literal_eval", "val", "strip"]]}, "name": "_do_template", "params": {"data": "", "escape_backslashes": "", "fail_on_undefined": "", "overrides": "", "preserve_trailing_newlines": "", "self": ""}, "params_descr": {"data": "", "escape_backslashes": "", "fail_on_undefined": "", "overrides": "", "preserve_trailing_newlines": "", "self": ""}, "params_occur": {"data": [["data_newlines", "_count_newlines_from_end", "data"], ["data", "startswith", "JINJA2_OVERRIDE"], ["eol", "data", "find"], ["line", "data", "len", "JINJA2_OVERRIDE", "eol"], ["data", "data", "eol"], ["data", "_escape_backslashes", "data", "myenv"], ["t", "myenv", "from_string", "data"], ["AnsibleError", "to_native", "e", "to_native", "data"], ["AnsibleError", "to_native", "data"], ["errmsg", "to_native", "data"], ["display", "debug", "to_native", "data"], ["AnsibleError", "to_native", "data", "to_native", "te"]], "escape_backslashes": [], "fail_on_undefined": [["fail_on_undefined", "None"], ["fail_on_undefined", "self", "_fail_on_undefined_errors"]], "overrides": [["overrides", "None"], ["myenv", "self", "environment", "overlay", "overrides"]], "preserve_trailing_newlines": [], "self": [["fail_on_undefined", "self", "_fail_on_undefined_errors"], ["myenv", "self", "environment", "overlay"], ["myenv", "self", "environment", "overlay", "overrides"], ["myenv", "filters", "update", "self", "_get_filters"], ["myenv", "tests", "update", "self", "_get_tests"], ["t", "globals", "self", "_lookup"], ["t", "globals", "self", "_finalize"], ["jvars", "AnsibleJ2Vars", "self", "t", "globals"]]}, "params_p": {"args": [], "data": [["Mapping[str, object]", 0.2793837668513229], ["bytes", 0.22328206587886668], ["dict", 0.11468456790434603], ["T", 0.10366851086228186], ["Mapping[str, Any]", 0.08701527227288815]], "escape_backslashes": [["Optional[dict]", 0.34061175703544255], ["bytes", 0.308386903022302], ["Iterable[bytes]", 0.11452057351118403], ["list", 0.07949715991493032], ["List[Dict]", 0.07919258897988159], ["List[List[Any]]", 0.07779101753625933]], "fail_on_undefined": [["Optional[bool]", 0.12478435239043127], ["Optional[List[str]]", 0.09895764764911398], ["Optional[str]", 0.09895764764911398], ["Optional[List[Any]]", 0.09895764764911398], ["Optional[bytes]", 0.09672460820865862], ["Optional[Dict[str, Any]]", 0.09513953811139221]], "kwargs": [], "overrides": [["Optional[Dict[str, str]]", 0.091833068673969], ["str", 0.08932765343718897]], "preserve_trailing_newlines": [["Optional[dict]", 0.34061175703544255], ["bytes", 0.308386903022302], ["Iterable[bytes]", 0.11452057351118403], ["list", 0.07949715991493032], ["List[Dict]", 0.07919258897988159], ["List[List[Any]]", 0.07779101753625933]], "self": []}, "q_name": "Templar._do_template", "ret_exprs": ["return data", "return res", "return data"], "ret_type": "", "ret_type_p": [["Callable[[Any], bool]", 0.20699599581357375], ["dict", 0.10735752422604207], ["str", 0.09663430932853052]], "variables": {"data": "", "data_newlines": "", "eol": "", "errmsg": "", "fail_on_undefined": "", "jvars": "", "key": "", "line": "", "myenv": "", "new_context": "", "res": "", "res_newlines": "", "rf": "", "t": "", "val": ""}, "variables_p": {"data": [["str", 0.4183281011421565], ["Dict[str, Any]", 0.12164141620618514], ["int", 0.10003434320930253], ["list", 0.08505453819719365], ["List[Dict[str, Any]]", 0.08470288831513825]], "data_newlines": [["str", 0.4665534940943523], ["list", 0.10856639915259136], ["Tuple[Any, Any, int]", 0.08922871981490636], ["List[str]", 0.08339664736060269], ["dict", 0.07976122754368863]], "eol": [["str", 0.882431182442008]], "errmsg": [["str", 0.38275565667362027]], "fail_on_undefined": [["str", 0.2522945303091879], ["Optional[str]", 0.16016424053943196], ["int", 0.09685788223749162], ["Dict[str, Literal]", 0.09027274556530854], ["frozenset[str]", 0.08008212026971598], ["ImportError", 0.08008212026971598], ["bool", 0.08008212026971598]], "jvars": [["bool", 0.3646794940166493], ["Dict[str, str]", 0.10752302430729731]], "key": [["list", 0.2152311000929349], ["int", 0.208994374506533], ["str", 0.18958591472914316], ["Tuple[Literal, Literal, List[str]]", 0.16664240282198775], ["Set[str]", 0.11251060376594796]], "line": [["Set[str]", 0.6209410291411871], ["str", 0.2844593805723469], ["List[str]", 0.09459959028646604]], "myenv": [["str", 0.6790915117950442]], "new_context": [["str", 0.30154575510075476], ["List[str]", 0.13606901931980925], ["Dict[str, str]", 0.08416501368548077]], "res": [["str", 0.2250205571238855], ["bool", 0.09499530877907708], ["float", 0.06185162240739127]], "res_newlines": [["Pattern[str]", 0.9999999999999999]], "rf": [["str", 0.5971772966533462], ["Coroutine[Any, Any, Any]", 0.116318294397681], ["Tuple[str, str]", 0.09592526224607438], ["tuple", 0.08784640045326991]], "t": [["list", 0.12831259646802723], ["set", 0.11055036023024375], ["utils.tree.Node[str]", 0.08877934668722394], ["str", 0.08860218860236507], ["Tuple[List[Any], List[Any], List[Any], List[Any], List[Any], List[Any], float]", 0.07719530604300358]], "val": [["int", 0.26177864107133153], ["str", 0.19421015381233844], ["Dict[str, int]", 0.18532541119827317], ["list", 0.09558233131425012], ["Dict[str, Union[int, str]]", 0.09260301286635833], ["List[str]", 0.08403553138001692]]}}], "name": "Templar", "q_name": "Templar", "variables": {}, "variables_p": {}}], "funcs": [{"docstring": {"func": "Double backslashes within jinja2 expressions", "long_descr": "A user may enter something like this in a playbook::\n\n  debug:\n    msg: \"Test Case 1\\3; {{ test1_name | regex_replace('^(.*)_name$', '\\1')}}\"\n\nThe string inside of the {{ gets interpreted multiple times First by yaml.\nThen by python.  And finally by jinja2 as part of it's variable.  Because\nit is processed by both python and jinja2, the backslash escaped\ncharacters get unescaped twice.  This means that we'd normally have to use\nfour backslashes to escape that.  This is painful for playbook authors as\nthey have to remember different rules for inside vs outside of a jinja2\nexpression (The backslashes outside of the \"{{ }}\" only get processed by\nyaml and python.  So they only need to be escaped once).  The following\ncode fixes this by automatically performing the extra quoting of\nbackslashes inside of a jinja2 expression.", "ret": null}, "fn_lc": [[69, 0], [109, 15]], "fn_var_ln": {"d2": [[91, 8], [91, 10]], "data": [[107, 8], [107, 12]], "in_var": [[99, 16], [99, 22]], "new_data": [[90, 8], [90, 16]]}, "fn_var_occur": {"d2": [["d2", "jinja_env", "preprocess", "data"], ["jinja_env", "lex", "d2"]], "data": [["data", "data"], ["d2", "jinja_env", "preprocess", "data"], ["data", "join", "new_data"]], "in_var": [["in_var", "False"], ["in_var", "True"], ["in_var", "False"], ["in_var", "token"]], "new_data": [["new_data", "append", "token"], ["new_data", "append", "token"], ["new_data", "append", "token", "replace"], ["new_data", "append", "token"], ["data", "join", "new_data"]]}, "name": "_escape_backslashes", "params": {"data": "", "jinja_env": ""}, "params_descr": {"data": "", "jinja_env": ""}, "params_occur": {"data": [["data", "data"], ["d2", "jinja_env", "preprocess", "data"], ["data", "join", "new_data"]], "jinja_env": [["d2", "jinja_env", "preprocess", "data"], ["jinja_env", "lex", "d2"]]}, "params_p": {"args": [], "data": [["Dict[str, Any]", 0.130541393688353], ["List[Dict[str, Any]]", 0.10906772949358705], ["Dict[str, Set[str]]", 0.10736113191407834], ["List[int]", 0.10736113191407834], ["dict", 0.09815263151749785]], "jinja_env": [["int", 0.22497519957921872], ["bytes", 0.19018803390036454], ["Tuple[int, int, bytearray]", 0.12512321128916395], ["List[int]", 0.0925643373111251]], "kwargs": []}, "q_name": "_escape_backslashes", "ret_exprs": ["return data"], "ret_type": "", "ret_type_p": [["str", 0.2618957145135596], ["raiden.utils.signer.Signer", 0.17499926704194727], ["Optional[float]", 0.16455688318651607], ["int", 0.10872215137970408], ["List[Dict[str, Any]]", 0.10515277519084046], ["Dict[str, str]", 0.0958053345631056], ["bool", 0.0888678741243269]], "variables": {"d2": "", "data": "", "in_var": "", "new_data": ""}, "variables_p": {"d2": [["deque[int]", 0.11412749940592541], ["List[int]", 0.10950988550566221]], "data": [["Tuple[List[int], List[int]]", 0.3529956393049891], ["str", 0.2674922164261756], ["Tuple[int, int, int, int, int, int]", 0.10056683283478768], ["io.BufferedWriter", 0.09639699080829334], ["dict", 0.09243905376110613], ["bytes", 0.09010926686464815]], "in_var": [["bool", 0.6277774336918668], ["str", 0.3722225663081332]], "new_data": [["list", 0.5008924295929795], ["Dict[str, Dict[str, str]]", 0.10534332503440554], ["DefaultDict[Any, List[Any]]", 0.0997429669645976], ["str", 0.09452582846995726], ["float", 0.09364002835275052]]}}, {"docstring": {"func": "Counts the number of newlines at the end of a string. This is used during", "long_descr": "the jinja2 templating to ensure the count matches the input, since some newlines\nmay be thrown away during the templating.", "ret": null}, "fn_lc": [[112, 0], [127, 16]], "fn_var_ln": {"i": [[120, 8], [120, 9]], "j": [[121, 8], [121, 9]]}, "fn_var_occur": {"i": [["i", "len", "in_str"], ["j", "i"], ["i", "j"]], "j": [["j", "i"], ["in_str", "j"], ["i", "j"]]}, "name": "_count_newlines_from_end", "params": {"in_str": ""}, "params_descr": {"in_str": ""}, "params_occur": {"in_str": [["i", "len", "in_str"], ["in_str", "j"]]}, "params_p": {"args": [], "in_str": [["str", 0.5155103736002553], ["int", 0.2869253759827308], ["Sequence[str]", 0.09118605890957841]], "kwargs": []}, "q_name": "_count_newlines_from_end", "ret_exprs": ["return i - 1 - j", "return i"], "ret_type": "", "ret_type_p": [["float", 0.4], ["int", 0.30000000000000004]], "variables": {"i": "", "j": ""}, "variables_p": {"i": [["int", 0.7947063221682941], ["str", 0.11147563543689694], ["tuple", 0.09381804239480901]], "j": [["str", 0.5078430244366537], ["Type[str]", 0.1016390536146961], ["bytes", 0.09862539634672342], ["Dict[str, str]", 0.09683393169820469], ["Counter[str]", 0.09248260694063189]]}}], "imports": ["__future__", "absolute_import", "division", "print_function", "ast", "contextlib", "os", "re", "io", "StringIO", "numbers", "Number", "jinja2", "Environment", "jinja2", "loaders", "FileSystemLoader", "jinja2", "exceptions", "TemplateSyntaxError", "UndefinedError", "jinja2", "utils", "concat", "j2_concat", "jinja2", "runtime", "StrictUndefined", "ansible", "constants", "C", "ansible", "compat", "six", "string_types", "text_type", "ansible", "errors", "AnsibleError", "AnsibleFilterError", "AnsibleUndefinedVariable", "ansible", "plugins", "filter_loader", "lookup_loader", "test_loader", "ansible", "template", "safe_eval", "safe_eval", "ansible", "template", "template", "AnsibleJ2Template", "ansible", "template", "vars", "AnsibleJ2Vars", "ansible", "module_utils", "_text", "to_native", "to_text", "hashlib", "sha1", "sha", "sha", "sha1", "__main__", "display", "ansible", "utils", "display", "Display", "ansible", "utils", "listify", "listify_lookup_plugin_terms", "ansible", "vars", "unsafe_proxy", "UnsafeProxy", "wrap_var"], "mod_var_ln": {"JINJA2_OVERRIDE": [[66, 0], [66, 15]], "NON_TEMPLATED_TYPES": [[64, 0], [64, 19]], "__all__": [[58, 0], [58, 7]], "__metaclass__": [[20, 0], [20, 13]], "display": [[56, 4], [56, 11]]}, "mod_var_occur": {"JINJA2_OVERRIDE": [["data", "startswith", "JINJA2_OVERRIDE"], ["line", "data", "len", "JINJA2_OVERRIDE", "eol"]], "NON_TEMPLATED_TYPES": [["isinstance", "resolved_val", "NON_TEMPLATED_TYPES"]], "__all__": [], "__metaclass__": [], "display": [["display", "deprecated", "self", "environment", "variable_start_string", "variable", "self", "environment", "variable_end_string"], ["display", "debug", "to_native", "data"]]}, "no_types_annot": {"D": 0, "I": 0, "U": 117}, "session_id": "dFfTC_zV-86bxyqY7c4Gg34Go5xOtZ2LrjzbvRT9MPs", "set": null, "tc": [false, null], "type_annot_cove": 0.0, "typed_seq": "", "untyped_seq": "", "variables": {"JINJA2_OVERRIDE": "", "NON_TEMPLATED_TYPES": "", "__all__": "", "__metaclass__": "", "display": ""}, "variables_p": {"JINJA2_OVERRIDE": [["str", 0.9999999999999999]], "NON_TEMPLATED_TYPES": [["Pattern[str]", 0.38438008726282036], ["frozenset[Any]", 0.12721419138062226], ["Dict[str, bool]", 0.1055114064627062], ["Dict[Any, Type[str]]", 0.10050184436595046], ["Dict[str, str]", 0.09482921967135377], ["Dict[str, Union[int, str]]", 0.09457762966017372]], "__all__": [["List[str]", 0.7999999999999999], ["Tuple[str]", 0.09999999999999999], ["Tuple[str, str, str]", 0.09999999999999999]], "__metaclass__": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "display": [["Dict[str, List[str]]", 0.22635286960856743], ["List[str]", 0.22635286960856743], ["Dict[Any, Tuple[Any, Any]]", 0.18785921520276083], ["Dict[str, Tuple[str, Any]]", 0.0944451519682256], ["Dict[str, str]", 0.09287861846123828], ["str", 0.08739880458559779], ["int", 0.08471247056504268]]}}}