{"error": null, "response": {"classes": [{"cls_lc": [[109, 4], [120, 59]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[110, 8], [120, 59]], "fn_var_ln": {"inside_call": [[114, 16], [114, 27]]}, "fn_var_occur": {"inside_call": [["inside_call", "True"], ["isinstance", "node", "ast", "Name", "inside_call"], ["self", "generic_visit", "child_node", "inside_call"]]}, "name": "generic_visit", "params": {"inside_call": "", "node": "", "self": ""}, "params_descr": {"inside_call": "", "node": "", "self": ""}, "params_occur": {"inside_call": [["inside_call", "True"], ["isinstance", "node", "ast", "Name", "inside_call"], ["self", "generic_visit", "child_node", "inside_call"]], "node": [["type", "node", "SAFE_NODES"], ["isinstance", "node", "ast", "Call"], ["isinstance", "node", "ast", "Name", "inside_call"], ["hasattr", "builtins", "node", "id", "node", "id", "CALL_WHITELIST"], ["Exception", "node", "id"], ["ast", "iter_child_nodes", "node"]], "self": [["self", "generic_visit", "child_node", "inside_call"]]}, "params_p": {"args": [], "inside_call": [], "kwargs": [], "node": [], "self": []}, "q_name": "safe_eval.<locals>.CleansingNodeVisitor.generic_visit", "ret_exprs": [], "ret_type": "", "variables": {"inside_call": ""}, "variables_p": {"inside_call": [["List[Tuple[Any, Any]]", 0.21786742681677085], ["List[Callable[[], Any]]", 0.09937632384676218], ["Optional[Match[str]]", 0.09354412862833165]]}}], "name": "CleansingNodeVisitor", "q_name": "safe_eval.<locals>.CleansingNodeVisitor", "variables": {}, "variables_p": {}}], "funcs": [{"docstring": {"func": "This is intended for allowing things like:", "long_descr": "with_items: a_list_variable\n\nWhere Jinja2 would return a string but we do not want to allow it to\ncall functions (outside of Jinja2, where the env is constrained). If\nthe input data to this function came from an untrusted (remote) source,\nit should first be run through _clean_data_struct() to ensure the data\nis further sanitized prior to evaluation.\n\nBased on:\nhttp://stackoverflow.com/questions/12523516/using-ast-and-whitelists-to-make-pythons-eval-safe", "ret": null}, "fn_lc": [[35, 0], [149, 19]], "fn_var_ln": {"CALL_WHITELIST": [[107, 4], [107, 18]], "JSON_TYPES": [[52, 4], [52, 14]], "SAFE_NODES": [[62, 4], [62, 14]], "cnv": [[128, 4], [128, 7]], "compiled": [[132, 8], [132, 16]], "filter_list": [[99, 4], [99, 15]], "parsed_tree": [[130, 8], [130, 19]], "result": [[133, 8], [133, 14]], "test_list": [[103, 4], [103, 13]]}, "fn_var_occur": {"CALL_WHITELIST": [], "JSON_TYPES": [["result", "eval", "compiled", "JSON_TYPES", "dict", "locals"]], "SAFE_NODES": [], "cnv": [["cnv", "CleansingNodeVisitor"], ["cnv", "visit", "parsed_tree"]], "compiled": [["compiled", "compile", "parsed_tree", "expr"], ["result", "eval", "compiled", "JSON_TYPES", "dict", "locals"]], "filter_list": [], "parsed_tree": [["parsed_tree", "ast", "parse", "expr", "mode"], ["cnv", "visit", "parsed_tree"], ["compiled", "compile", "parsed_tree", "expr"]], "result": [["result", "eval", "compiled", "JSON_TYPES", "dict", "locals"], ["result", "None"]], "test_list": []}, "name": "safe_eval", "params": {"expr": "", "include_exceptions": "", "locals": ""}, "params_descr": {"expr": "", "include_exceptions": "", "locals": ""}, "params_occur": {"expr": [["isinstance", "expr", "string_types"], ["expr", "None"], ["parsed_tree", "ast", "parse", "expr", "mode"], ["compiled", "compile", "parsed_tree", "expr"], ["expr", "None"], ["display", "warning", "expr", "e"], ["expr", "e"]], "include_exceptions": [], "locals": [["result", "eval", "compiled", "JSON_TYPES", "dict", "locals"]]}, "params_p": {"args": [], "expr": [], "include_exceptions": [["int", 0.27551778898243295], ["str", 0.22540087594143232], ["list", 0.21241981707680657], ["bool", 0.2112451156227373], ["Optional[bool]", 0.07541640237659082]], "kwargs": [], "locals": [["int", 0.10043526450242773], ["Tuple[str, str]", 0.09241966714087504], ["type", 0.09111100173361532], ["bool", 0.08923995452296489], ["Union[str, List]", 0.08918503031708781]]}, "q_name": "safe_eval", "ret_exprs": ["return (expr, None)", "return expr", "return (result, None)", "return result", "return (expr, None)", "return expr", "return (expr, e)", "return expr"], "ret_type": "", "ret_type_p": [["bool", 0.5948200171178353], ["Optional[str]", 0.09914322935875013], ["Callable", 0.09812070770331496]], "variables": {"CALL_WHITELIST": "", "JSON_TYPES": "", "SAFE_NODES": "", "cnv": "", "compiled": "", "filter_list": "", "parsed_tree": "", "result": "", "test_list": ""}, "variables_p": {"CALL_WHITELIST": [["list", 0.49999999999999994], ["float", 0.3], ["List[int]", 0.09999999999999999], ["dict", 0.09999999999999999]], "JSON_TYPES": [["dict", 0.3052409112531992], ["Dict[str, str]", 0.1995779669741125], ["Type[bytes]", 0.10454710684212039], ["Set[Union[Any, Any]]", 0.10229783321211296], ["str", 0.09830868157622571], ["Set[str]", 0.09645979805741077], ["Dict[str, list]", 0.09356770208481854]], "SAFE_NODES": [["str", 0.25806972155794505], ["ClassVar[Optional[Any]]", 0.08950156480561726]], "cnv": [["str", 0.40630751982643964], ["ClassVar", 0.09310461074604433], ["Tuple[str, str, str, str]", 0.08765802961347044], ["Set[str]", 0.0852785918714863]], "compiled": [["set", 0.27768570208057325], ["dict", 0.12479439781775739], ["str", 0.10272870834630354], ["Dict[str, Any]", 0.09187471967740513]], "filter_list": [["List[str]", 0.42305753225162057], ["tuple", 0.21152876612581029], ["List[Tuple[str, str, str, bool]]", 0.21152876612581029], ["int", 0.15388493549675897]], "parsed_tree": [["str", 0.2086882377842606]], "result": [["dict", 0.2045940048211321], ["KeysView[str]", 0.10883783303609625], ["Dict[str, Any]", 0.08703312034234267]], "test_list": [["str", 0.4999999997892999], ["list", 0.4999999997269343], ["int", 1.963641864862508e-10], ["float", 6.730984580300122e-11], ["Callable", 6.236556315747637e-11], ["Optional[str]", 6.19846425793723e-11]]}}], "imports": ["__future__", "absolute_import", "division", "print_function", "ast", "sys", "ansible", "compat", "six", "string_types", "ansible", "compat", "six", "moves", "builtins", "ansible", "constants", "C", "ansible", "plugins", "filter_loader", "test_loader", "__main__", "display", "ansible", "utils", "display", "Display"], "mod_var_ln": {"__metaclass__": [[18, 0], [18, 13]], "display": [[33, 4], [33, 11]]}, "mod_var_occur": {"__metaclass__": [], "display": [["display", "warning", "expr", "e"]]}, "no_types_annot": {"D": 0, "I": 0, "U": 18}, "session_id": "uCmhgUFGiERGmIzqONlK0q8oyqvNLjgfketNAzfPpH4", "set": null, "tc": [false, null], "type_annot_cove": 0.0, "typed_seq": "", "untyped_seq": "", "variables": {"__metaclass__": "", "display": ""}, "variables_p": {"__metaclass__": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "display": [["str", 0.2013400183291636], ["list", 0.13385210918245083], ["Iterator[str]", 0.13385210918245083], ["Type[List[int]]", 0.1226864230280822], ["Dict[str, str]", 0.0998514423948078], ["Pattern[str]", 0.09621775485003803], ["Tuple[str, str, str]", 0.07611712604012924], ["List[str]", 0.06628226373689126]]}}}