{"error": null, "response": {"classes": [], "funcs": [{"docstring": {"func": "the goal of this block is to determine if the quoted string", "long_descr": "is unterminated in which case it needs to be put back together", "ret": null}, "fn_lc": [[29, 0], [46, 21]], "fn_var_ln": {"prev_char": [[39, 12], [39, 21]], "quote_char": [[45, 16], [45, 26]]}, "fn_var_occur": {"prev_char": [["prev_char", "None"], ["prev_char", "token", "idx"], ["cur_char", "prev_char"]], "quote_char": [["cur_char", "quote_char"], ["quote_char", "None"], ["quote_char", "cur_char"]]}, "name": "_get_quote_state", "params": {"quote_char": "", "token": ""}, "params_descr": {"quote_char": "", "token": ""}, "params_occur": {"quote_char": [["cur_char", "quote_char"], ["quote_char", "None"], ["quote_char", "cur_char"]], "token": [["enumerate", "token"], ["prev_char", "token", "idx"]]}, "params_p": {"args": [], "kwargs": [], "quote_char": [["Optional[int]", 0.31611795917380786], ["set", 0.09949315863557864], ["dict", 0.09390519088891902], ["bool", 0.0880012347326315], ["Optional[str]", 0.08585781701614033]], "token": [["str", 0.8066412064523236], ["bool", 0.09536963584320048]]}, "q_name": "_get_quote_state", "ret_exprs": ["return quote_char"], "ret_type": "", "ret_type_p": [["int", 0.31128849884129994], ["str", 0.15871553676657008], ["set", 0.0899165314114475]], "variables": {"prev_char": "", "quote_char": ""}, "variables_p": {"prev_char": [["str", 0.5842685870852518], ["int", 0.08608382143994465], ["dict", 0.08556849184086301], ["List[Tuple[Any, Any]]", 0.08189478180771699], ["tuple", 0.08139039081171791], ["list", 0.08079392701450575]], "quote_char": [["str", 0.32541534358626123], ["List[str]", 0.21810165212478222], ["List[None]", 0.1037286582043622], ["bool", 0.08904104598643586], ["list", 0.08794604465783383], ["int", 0.08613961390996298]]}}, {"docstring": {"func": "this function counts the number of opening/closing blocks for a", "long_descr": "given opening/closing type and adjusts the current depth for that\nblock based on the difference", "ret": null}, "fn_lc": [[48, 0], [60, 20]], "fn_var_ln": {"cur_depth": [[59, 12], [59, 21]], "num_close": [[55, 4], [55, 13]], "num_open": [[54, 4], [54, 12]]}, "fn_var_occur": {"cur_depth": [["cur_depth", "num_open", "num_close"]], "num_close": [["num_close", "token", "count", "close_token"], ["num_open", "num_close"], ["cur_depth", "num_open", "num_close"]], "num_open": [["num_open", "token", "count", "open_token"], ["num_open", "num_close"], ["cur_depth", "num_open", "num_close"]]}, "name": "_count_jinja2_blocks", "params": {"close_token": "", "cur_depth": "", "open_token": "", "token": ""}, "params_descr": {"close_token": "", "cur_depth": "", "open_token": "", "token": ""}, "params_occur": {"close_token": [["num_close", "token", "count", "close_token"]], "cur_depth": [["cur_depth", "num_open", "num_close"]], "open_token": [["num_open", "token", "count", "open_token"]], "token": [["num_open", "token", "count", "open_token"], ["num_close", "token", "count", "close_token"]]}, "params_p": {"args": [], "close_token": [["str", 0.3084300254160637], ["set", 0.1930619200610626], ["Iterable[str]", 0.10557395043037746], ["dict", 0.1018039196335728], ["list", 0.1013133197556963], ["Callable", 0.09887963596647625], ["int", 0.09093722873675072]], "cur_depth": [["int", 0.6870966711054539], ["Tuple[int, int]", 0.11347362416410846], ["List[str]", 0.09618337122507858]], "kwargs": [], "open_token": [["str", 0.3084300254160637], ["set", 0.1930619200610626], ["Iterable[str]", 0.10557395043037746], ["dict", 0.1018039196335728], ["list", 0.1013133197556963], ["Callable", 0.09887963596647625], ["int", 0.09093722873675072]], "token": [["List[int]", 0.7891237556007713], ["str", 0.10644465521158274], ["List[str]", 0.10443158918764611]]}, "q_name": "_count_jinja2_blocks", "ret_exprs": ["return cur_depth"], "ret_type": "", "ret_type_p": [["Sequence", 0.10083862968249246], ["Mapping", 0.0904767848686199]], "variables": {"cur_depth": "", "num_close": "", "num_open": ""}, "variables_p": {"cur_depth": [["int", 0.2232654481497146], ["Counter[Any]", 0.13272162863702044], ["str", 0.09824830418575758], ["List[Tuple[Any, Any]]", 0.08982878026271242], ["float", 0.08548953563100058]], "num_close": [["int", 0.906180506751767], ["Dict[str, int]", 0.0938194932482331]], "num_open": [["int", 1.0]]}}, {"docstring": {"func": "Splits args on whitespace, but intelligently reassembles", "long_descr": "those that may have been split over a jinja2 block or quotes.\n\nWhen used in a remote module, we won't ever have to be concerned about\njinja2 blocks, however this function is/will be used in the\ncore portions as well before the args are templated.\n\nexample input: a=b c=\"foo bar\"\nexample output: ['a=b', 'c=\"foo bar\"']\n\nBasically this is a variation shlex that has some more intelligence for\nhow Ansible needs to use it.", "ret": null}, "fn_lc": [[62, 0], [202, 17]], "fn_var_ln": {"appended": [[176, 16], [176, 24]], "args": [[86, 8], [86, 12]], "block_depth": [[167, 12], [167, 23]], "comment_depth": [[173, 12], [173, 25]], "do_decode": [[89, 8], [89, 17]], "inside_quotes": [[128, 12], [128, 25]], "items": [[90, 4], [90, 9]], "line_continuation": [[191, 8], [191, 25]], "params": [[200, 8], [200, 14]], "prev_block_depth": [[166, 12], [166, 28]], "prev_comment_depth": [[172, 12], [172, 30]], "prev_print_depth": [[160, 12], [160, 28]], "print_depth": [[161, 12], [161, 23]], "quote_char": [[127, 12], [127, 22]], "spacer": [[154, 24], [154, 30]], "tokens": [[113, 8], [113, 14]], "was_inside_quotes": [[126, 12], [126, 29]]}, "fn_var_occur": {"appended": [["appended", "False"], ["appended", "True"], ["appended", "True"], ["print_depth", "prev_print_depth", "appended"], ["appended", "True"], ["block_depth", "prev_block_depth", "appended"], ["appended", "True"], ["comment_depth", "prev_comment_depth", "appended"], ["appended", "True"], ["print_depth", "block_depth", "comment_depth", "inside_quotes", "appended", "token"]], "args": [["args", "args", "strip"], ["args", "args", "encode"], ["items", "args", "split"]], "block_depth": [["print_depth", "block_depth", "comment_depth", "inside_quotes", "was_inside_quotes"], ["prev_block_depth", "block_depth"], ["block_depth", "_count_jinja2_blocks", "token", "block_depth"], ["block_depth", "prev_block_depth", "appended"], ["print_depth", "block_depth", "comment_depth", "inside_quotes", "appended", "token"], ["print_depth", "block_depth", "comment_depth", "inside_quotes"]], "comment_depth": [["print_depth", "block_depth", "comment_depth", "inside_quotes", "was_inside_quotes"], ["prev_comment_depth", "comment_depth"], ["comment_depth", "_count_jinja2_blocks", "token", "comment_depth"], ["comment_depth", "prev_comment_depth", "appended"], ["print_depth", "block_depth", "comment_depth", "inside_quotes", "appended", "token"], ["print_depth", "block_depth", "comment_depth", "inside_quotes"]], "do_decode": [["do_decode", "True"], ["do_decode", "False"]], "inside_quotes": [["inside_quotes", "False"], ["token", "inside_quotes"], ["was_inside_quotes", "inside_quotes"], ["inside_quotes", "quote_char", "None"], ["inside_quotes", "was_inside_quotes"], ["print_depth", "block_depth", "comment_depth", "inside_quotes", "was_inside_quotes"], ["idx", "inside_quotes", "was_inside_quotes"], ["print_depth", "block_depth", "comment_depth", "inside_quotes", "appended", "token"], ["print_depth", "block_depth", "comment_depth", "inside_quotes"]], "items": [["items", "args", "split"], ["enumerate", "items"], ["len", "items", "itemidx", "len", "items", "line_continuation"]], "line_continuation": [["line_continuation", "False"], ["line_continuation", "True"], ["len", "items", "itemidx", "len", "items", "line_continuation"], ["line_continuation", "False"]], "params": [["params", "append", "token"], ["params", "params", "token"], ["params", "params", "spacer", "token"], ["params", "endswith", "idx"], ["params", "params", "spacer", "token"], ["params", "append", "token"], ["params", "append", "token"], ["params", "append", "token"], ["params", "append", "token"], ["params", "endswith", "item"], ["params", "x", "decode", "x", "params"]], "prev_block_depth": [["prev_block_depth", "block_depth"], ["block_depth", "prev_block_depth", "appended"]], "prev_comment_depth": [["prev_comment_depth", "comment_depth"], ["comment_depth", "prev_comment_depth", "appended"]], "prev_print_depth": [["prev_print_depth", "print_depth"], ["print_depth", "prev_print_depth", "appended"]], "print_depth": [["print_depth", "block_depth", "comment_depth", "inside_quotes", "was_inside_quotes"], ["prev_print_depth", "print_depth"], ["print_depth", "_count_jinja2_blocks", "token", "print_depth"], ["print_depth", "prev_print_depth", "appended"], ["print_depth", "block_depth", "comment_depth", "inside_quotes", "appended", "token"], ["print_depth", "block_depth", "comment_depth", "inside_quotes"]], "quote_char": [["quote_char", "None"], ["quote_char", "_get_quote_state", "token", "quote_char"], ["inside_quotes", "quote_char", "None"]], "spacer": [["params", "params", "spacer", "token"], ["params", "params", "spacer", "token"]], "tokens": [["tokens", "item", "strip", "split"], ["enumerate", "tokens"], ["len", "tokens"]], "was_inside_quotes": [["was_inside_quotes", "inside_quotes"], ["inside_quotes", "was_inside_quotes"], ["print_depth", "block_depth", "comment_depth", "inside_quotes", "was_inside_quotes"], ["idx", "inside_quotes", "was_inside_quotes"]]}, "name": "split_args", "params": {"args": ""}, "params_descr": {"args": ""}, "params_occur": {"args": [["args", "args", "strip"], ["args", "args", "encode"], ["items", "args", "split"]]}, "params_p": {"args": [], "kwargs": []}, "q_name": "split_args", "ret_exprs": ["return params"], "ret_type": "", "ret_type_p": [["int", 0.38360206989068896], ["str", 0.31624451957628236], ["bytes", 0.09534431121410472]], "variables": {"appended": "", "args": "", "block_depth": "", "comment_depth": "", "do_decode": "", "inside_quotes": "", "items": "", "line_continuation": "", "params": "", "prev_block_depth": "", "prev_comment_depth": "", "prev_print_depth": "", "print_depth": "", "quote_char": "", "spacer": "", "tokens": "", "was_inside_quotes": ""}, "variables_p": {"appended": [["list", 0.588393475829184], ["List[List[Any]]", 0.11124196304723959], ["tuple", 0.10291507351300871], ["List[Tuple[int, int]]", 0.09776607641471484]], "args": [], "block_depth": [["int", 0.11519090343095591]], "comment_depth": [["Dict[str, Union[int, str]]", 0.053044497519763284]], "do_decode": [["int", 0.28884443391240444], ["bool", 0.10153816510751341], ["str", 0.09943256768173976], ["Tuple[Any, Any, Any, Any, Any, Any, Any]", 0.09825518068940176]], "inside_quotes": [["str", 0.1694056877665781]], "items": [["list", 0.6730588290816952], ["List[float]", 0.10358060798620668], ["Iterator[Any]", 0.09018246272890779]], "line_continuation": [["list", 0.2568536743509755], ["List[int]", 0.18200470133551372], ["Iterator[Any]", 0.10493710105450574], ["List[Literal]", 0.09669014766577949], ["List[List]", 0.09091707876407794], ["int", 0.0902339035170379], ["str", 0.08937091859605367], ["List[str]", 0.08899247471605588]], "params": [["list", 0.908363644675568], ["dict", 0.09163635532443197]], "prev_block_depth": [["str", 0.7219426172834565], ["int", 0.20242134310524323], ["Pattern[str]", 0.07563603961130011]], "prev_comment_depth": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["str", 0.1]], "prev_print_depth": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["str", 0.1]], "print_depth": [["Dict[str, Union[int, str]]", 0.053044497519763284]], "quote_char": [["int", 0.1986009601635565], ["Tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str]", 0.11127134030335516], ["list", 0.10575026400365295], ["Tuple[float, float]", 0.10575026400365295], ["str", 0.09830990876392133], ["float", 0.09276266110371217], ["List[int]", 0.0896134039863751]], "spacer": [["str", 0.5713046820439092], ["dict", 0.11557650953857952], ["List[Dict[str, str]]", 0.10987590538285044], ["list", 0.09637814417522636]], "tokens": [["str", 0.5353617001774], ["list", 0.2780634054790493], ["Set[str]", 0.09603067335651365]], "was_inside_quotes": [["bool", 0.8999999999999999]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[204, 0], [205, 103]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "is_quoted", "params": {"data": ""}, "params_descr": {"data": ""}, "params_occur": {"data": [["len", "data", "data", "data", "data", "data"]]}, "params_p": {"args": [], "data": [["str", 0.28208762979780255], ["dict", 0.2722482736717408], ["Dict[str, Any]", 0.18118301200949377], ["bytes", 0.1550192253358452], ["Union[Dict, List]", 0.10946185918511772]], "kwargs": []}, "q_name": "is_quoted", "ret_exprs": ["return len(data) > 0 and (data[0] == '\"' and data[-1] == '\"' or data[0] == \"'\" and data[-1] == \"'\")"], "ret_type": "", "ret_type_p": [["str", 0.11367252324943701], ["bytes", 0.10717581895664516], ["List[Dict[str, Any]]", 0.0992786989223486]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "removes first and last quotes from a string, if the string starts and ends with the same quotes ", "long_descr": null, "ret": null}, "fn_lc": [[207, 0], [211, 15]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "unquote", "params": {"data": ""}, "params_descr": {"data": ""}, "params_occur": {"data": [["is_quoted", "data"]]}, "params_p": {"args": [], "data": [["dict", 0.49999999999999994], ["bytes", 0.3], ["Union[bytes, bytearray, memoryview]", 0.09999999999999999]], "kwargs": []}, "q_name": "unquote", "ret_exprs": ["return data[1:-1]", "return data"], "ret_type": "", "ret_type_p": [["Dict[str, Any]", 0.09130453613975123], ["Dict[str, str]", 0.08456169829753558], ["dict", 0.08125638347268535]], "variables": {}, "variables_p": {}}], "imports": [], "mod_var_ln": {}, "mod_var_occur": {}, "no_types_annot": {"D": 0, "I": 0, "U": 33}, "session_id": "vJmUDaGGHThkebtU6RKu1BZ80cgdKz_hW8d3OiP4IVg", "set": null, "tc": [false, null], "type_annot_cove": 0.0, "typed_seq": "", "untyped_seq": "", "variables": {}, "variables_p": {}}}