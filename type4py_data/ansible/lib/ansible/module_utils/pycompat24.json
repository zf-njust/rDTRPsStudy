{"error": null, "response": {"classes": [], "funcs": [{"docstring": {"func": "Get the current exception.", "long_descr": "This code needs to work on Python 2.4 through 3.x, so we cannot use\n\"except Exception, e:\" (SyntaxError on Python 3.x) nor\n\"except Exception as e:\" (SyntaxError on Python 2.4-2.5).\nInstead we must use ::\n\n    except Exception:\n        e = get_exception()", "ret": null}, "fn_lc": [[32, 0], [44, 28]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "get_exception", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "get_exception", "ret_exprs": ["return sys.exc_info()[1]"], "ret_type": "", "ret_type_p": [["str", 0.3103485978225231], ["dict", 0.2747108631927224], ["Iterable[str]", 0.09843039916274504], ["Exception", 0.09387691763611876]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[70, 8], [85, 48]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "_convert", "params": {"node": ""}, "params_descr": {"node": ""}, "params_occur": {"node": [["node_or_string", "node_or_string", "node"], ["isinstance", "node", "ast", "Const", "isinstance", "node", "value", "text_type", "binary_type", "int", "float", "long", "complex"], ["node", "value"], ["isinstance", "node", "ast", "Tuple"], ["tuple", "map", "_convert", "node", "nodes"], ["isinstance", "node", "ast", "List"], ["list", "map", "_convert", "node", "nodes"], ["isinstance", "node", "ast", "Dict"], ["dict", "_convert", "k", "_convert", "v", "k", "v", "node", "items"], ["isinstance", "node", "ast", "Name"], ["node", "name", "_safe_names"], ["_safe_names", "node", "name"], ["isinstance", "node", "ast", "UnarySub"], ["_convert", "node", "expr"]]}, "params_p": {"args": [], "kwargs": [], "node": [["basilisp.lang.compiler.nodes.Node", 0.08162475478373703]]}, "q_name": "literal_eval.<locals>._convert", "ret_exprs": ["return node.value", "return tuple(map(_convert, node.nodes))", "return list(map(_convert, node.nodes))", "return dict((_convert(k), _convert(v)) for k, v in node.items())", "return _safe_names[node.name]", "return -_convert(node.expr)"], "ret_type": "", "ret_type_p": [["Callable", 0.21116373409243105], ["str", 0.19730134346164876], ["List[Dict[str, Any]]", 0.09399119804154969], ["Tuple[str]", 0.09201136141579158]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Safely evaluate an expression node or a string containing a Python", "long_descr": "expression.  The string or node provided may only consist of the  following\nPython literal structures: strings, numbers, tuples, lists, dicts,  booleans,\nand None.", "ret": null}, "fn_lc": [[57, 4], [86, 39]], "fn_var_ln": {"_safe_names": [[64, 8], [64, 19]], "node_or_string": [[68, 12], [68, 26]]}, "fn_var_occur": {"_safe_names": [], "node_or_string": [["_convert", "node_or_string"]]}, "name": "literal_eval", "params": {"node_or_string": ""}, "params_descr": {"node_or_string": ""}, "params_occur": {"node_or_string": [["_convert", "node_or_string"]]}, "params_p": {"args": [], "kwargs": [], "node_or_string": [["Dict[str, Any]", 0.11590436747175999], ["str", 0.10658992050953008]]}, "q_name": "literal_eval", "ret_exprs": ["return _convert(node_or_string)"], "ret_type": "", "ret_type_p": [["str", 0.6847784217398399], ["bool", 0.09618563506293293]], "variables": {"_safe_names": "", "node_or_string": ""}, "variables_p": {"_safe_names": [["Dict[str, Optional[bool]]", 0.9999999860785459], ["str", 1.1841484114131001e-08]], "node_or_string": [["str", 5.606104798313296e-11], ["list", 1.3051933708643108e-11], ["int", 1.0256255043433834e-11]]}}], "imports": ["sys", "ast", "literal_eval", "compiler", "ast", "parse", "ansible", "module_utils", "six", "binary_type", "string_types", "text_type"], "mod_var_ln": {"__all__": [[88, 0], [88, 7]]}, "mod_var_occur": {"__all__": []}, "no_types_annot": {"D": 0, "I": 0, "U": 7}, "session_id": "zYmGb7RrRvolCZDLFEbQ4bVw0dORkvhofmmAsOWdn1s", "set": null, "tc": [false, null], "type_annot_cove": 0.0, "typed_seq": "", "untyped_seq": "", "variables": {"__all__": ""}, "variables_p": {"__all__": [["List[str]", 0.7999999999999999], ["Tuple[str]", 0.09999999999999999], ["Tuple[str, str, str]", 0.09999999999999999]]}}}