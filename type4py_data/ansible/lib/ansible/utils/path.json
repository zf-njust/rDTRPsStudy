{"error": null, "response": {"classes": [], "funcs": [{"docstring": {"func": "Returns a path that is free of symlinks, environment", "long_descr": "variables, relative path traversals and symbols (~)", "ret": "An absolute path with symlinks, environment variables, and tilde\nexpanded.  Note that this does not check whether a path exists.\n\nexample::\n    '$HOME/../../var/mail' becomes '/var/spool/mail'"}, "fn_lc": [[29, 0], [45, 64]], "fn_var_ln": {"canonical_path": [[44, 4], [44, 18]]}, "fn_var_occur": {"canonical_path": [["canonical_path", "os", "path", "normpath", "os", "path", "realpath", "os", "path", "expanduser", "os", "path", "expandvars", "to_bytes", "path", "errors"], ["to_text", "canonical_path", "errors"]]}, "name": "unfrackpath", "params": {"path": ""}, "params_descr": {"path": "A byte or text string representing a path to be canonicalized"}, "params_occur": {"path": [["canonical_path", "os", "path", "normpath", "os", "path", "realpath", "os", "path", "expanduser", "os", "path", "expandvars", "to_bytes", "path", "errors"]]}, "params_p": {"args": [], "kwargs": [], "path": [["str", 0.8080047114151222], ["bool", 0.09436248548787583]]}, "q_name": "unfrackpath", "ret_exprs": ["return to_text(canonical_path, errors='surrogate_or_strict')"], "ret_type": "", "ret_type_p": [["str", 0.7141428941503156], ["bool", 0.18998630710715542], ["Optional[str]", 0.09587079874252899]], "variables": {"canonical_path": ""}, "variables_p": {"canonical_path": [["str", 0.9999999999999999]]}}, {"docstring": {"func": "Safe way to create dirs in muliprocess/thread environments.", "long_descr": null, "ret": null}, "fn_lc": [[48, 0], [67, 115]], "fn_var_ln": {"b_rpath": [[58, 4], [58, 11]], "rpath": [[57, 4], [57, 9]]}, "fn_var_occur": {"b_rpath": [["b_rpath", "to_bytes", "rpath"], ["os", "path", "exists", "b_rpath"], ["os", "makedirs", "b_rpath", "mode"], ["os", "makedirs", "b_rpath"]], "rpath": [["rpath", "unfrackpath", "path"], ["b_rpath", "to_bytes", "rpath"], ["AnsibleError", "to_native", "rpath", "to_native", "e"]]}, "name": "makedirs_safe", "params": {"mode": "", "path": ""}, "params_descr": {"mode": "", "path": "A byte or text string representing a directory to be created"}, "params_occur": {"mode": [["os", "makedirs", "b_rpath", "mode"]], "path": [["rpath", "unfrackpath", "path"], ["os", "path", "exists", "b_rpath"]]}, "params_p": {"args": [], "kwargs": [], "mode": [["str", 0.35764506825337183]], "path": [["str", 1.0]]}, "q_name": "makedirs_safe", "ret_exprs": [], "ret_type": "", "variables": {"b_rpath": "", "rpath": ""}, "variables_p": {"b_rpath": [["Callable(open)[..., Any][[[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal], default), Named(buffering, int, default), Named(encoding, Optional[str], default), Named(errors, Optional[str], default), Named(newline, Optional[str], default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.TextIOWrapper][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, Literal), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.FileIO][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, Union[Literal[-1], Literal], default), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.BufferedRandom][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, Union[Literal[-1], Literal], default), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.BufferedWriter][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, Union[Literal[-1], Literal], default), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.BufferedReader][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, int), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], BinaryIO][Any, Any]]", 0.37827613180150527], ["str", 0.317607154601778], ["dict", 0.10079984069416122]], "rpath": [["str", 0.8962391331186766], ["bool", 0.10376086688132359]]}}], "imports": ["__future__", "absolute_import", "division", "print_function", "os", "errno", "EEXIST", "ansible", "errors", "AnsibleError", "ansible", "module_utils", "_text", "to_bytes", "to_native", "to_text"], "mod_var_ln": {"__all__": [[26, 0], [26, 7]], "__metaclass__": [[18, 0], [18, 13]]}, "mod_var_occur": {"__all__": [], "__metaclass__": []}, "no_types_annot": {"D": 0, "I": 0, "U": 10}, "session_id": "TfN4dnep-6gEFElvOOcgeDDDoVbs2XYUTpfmCkuRJYU", "set": null, "tc": [false, null], "type_annot_cove": 0.0, "typed_seq": "", "untyped_seq": "", "variables": {"__all__": "", "__metaclass__": ""}, "variables_p": {"__all__": [["List[str]", 0.7999999999999999], ["Tuple[str]", 0.09999999999999999], ["Tuple[str, str, str]", 0.09999999999999999]], "__metaclass__": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]]}}}