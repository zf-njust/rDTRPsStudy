{"error": null, "response": {"classes": [], "funcs": [{"docstring": {"func": "Internal convenience function to ensure arguments are MutableMappings", "long_descr": "This checks that all arguments are MutableMappings or raises an error", "ret": null}, "fn_lc": [[34, 0], [55, 9]], "fn_var_ln": {"myvars": [[47, 8], [47, 14]]}, "fn_var_occur": {"myvars": [["myvars", "append", "dumps", "x"], ["myvars", "append", "to_native", "x"], ["AnsibleError", "format", "a", "__class__", "__name__", "b", "__class__", "__name__", "myvars", "myvars"]]}, "name": "_validate_mutable_mappings", "params": {"a": "", "b": ""}, "params_descr": {"a": "", "b": ""}, "params_occur": {"a": [["isinstance", "a", "MutableMapping", "isinstance", "b", "MutableMapping"], ["a", "b"], ["AnsibleError", "format", "a", "__class__", "__name__", "b", "__class__", "__name__", "myvars", "myvars"]], "b": [["isinstance", "a", "MutableMapping", "isinstance", "b", "MutableMapping"], ["a", "b"], ["AnsibleError", "format", "a", "__class__", "__name__", "b", "__class__", "__name__", "myvars", "myvars"]]}, "params_p": {"a": [["str", 0.6388625687938226], ["bytes", 0.17672810071561337]], "args": [], "b": [["str", 0.6388625687938226], ["bytes", 0.17672810071561337]], "kwargs": []}, "q_name": "_validate_mutable_mappings", "ret_exprs": [], "ret_type": "", "variables": {"myvars": ""}, "variables_p": {"myvars": [["list", 0.6505784475020373], ["List[str]", 0.2564421371847339], ["int", 0.09297941531322881]]}}, {"docstring": {"func": "Return a copy of dictionaries of variables based on configured hash behavior", "long_descr": null, "ret": null}, "fn_lc": [[58, 0], [70, 21]], "fn_var_ln": {"result": [[68, 8], [68, 14]]}, "fn_var_occur": {"result": [["result", "a", "copy"], ["result", "update", "b"]]}, "name": "combine_vars", "params": {"a": "", "b": ""}, "params_descr": {"a": "", "b": ""}, "params_occur": {"a": [["merge_hash", "a", "b"], ["_validate_mutable_mappings", "a", "b"], ["result", "a", "copy"]], "b": [["merge_hash", "a", "b"], ["_validate_mutable_mappings", "a", "b"], ["result", "update", "b"]]}, "params_p": {"a": [["int", 0.32073955266526305], ["float", 0.29997417211068705]], "args": [], "b": [["Optional[int]", 0.11546549336903568], ["bytes", 0.09423979625099561], ["str", 0.08592494513828067]], "kwargs": []}, "q_name": "combine_vars", "ret_exprs": ["return merge_hash(a, b)", "return result"], "ret_type": "", "ret_type_p": [["bool", 0.4085190044646597], ["Dict[str, float]", 0.09839366337025911], ["Dict[str, Dict[str, int]]", 0.09839366337025911]], "variables": {"result": ""}, "variables_p": {"result": [["dict", 0.6127297677763459], ["Dict[str, Any]", 0.2003111347668124], ["KeysView[str]", 0.10819291006714941]]}}, {"docstring": {"func": "Recursively merges hash b into a so that keys from b take precedence over keys from a", "long_descr": null, "ret": null}, "fn_lc": [[73, 0], [98, 17]], "fn_var_ln": {"result": [[85, 4], [85, 10]]}, "fn_var_occur": {"result": [["result", "a", "copy"], ["k", "result", "isinstance", "result", "k", "MutableMapping", "isinstance", "v", "MutableMapping"], ["result", "k", "merge_hash", "result", "k", "v"], ["result", "k", "v"]]}, "name": "merge_hash", "params": {"a": "", "b": ""}, "params_descr": {"a": "", "b": ""}, "params_occur": {"a": [["_validate_mutable_mappings", "a", "b"], ["a", "a", "b"], ["result", "a", "copy"]], "b": [["_validate_mutable_mappings", "a", "b"], ["a", "a", "b"], ["b", "copy"], ["iteritems", "b"]]}, "params_p": {"a": [["int", 0.21365547036125515], ["list", 0.2106827870194647], ["str", 0.18294638060916996]], "args": [], "b": [["list", 0.49999999999999994], ["int", 0.49999999999999994]], "kwargs": []}, "q_name": "merge_hash", "ret_exprs": ["return b.copy()", "return result"], "ret_type": "", "ret_type_p": [["str", 0.1358589210893042], ["int", 0.1253866892484873]], "variables": {"result": ""}, "variables_p": {"result": [["List[Tuple[str, ...]]", 0.3798404659935032], ["str", 0.20606735443502724], ["Set[str]", 0.09022241733034912], ["dict", 0.08008979649950178]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[101, 0], [115, 21]], "fn_var_ln": {"data": [[113, 12], [113, 16]], "extra_vars": [[114, 8], [114, 18]], "extra_vars_opt": [[104, 8], [104, 22]]}, "fn_var_occur": {"data": [["data", "loader", "load_from_file", "extra_vars_opt"], ["data", "loader", "load", "extra_vars_opt"], ["data", "parse_kv", "extra_vars_opt"], ["extra_vars", "combine_vars", "extra_vars", "data"]], "extra_vars": [["options", "extra_vars"], ["extra_vars", "combine_vars", "extra_vars", "data"]], "extra_vars_opt": [["extra_vars_opt", "to_text", "extra_vars_opt", "errors"], ["extra_vars_opt", "startswith"], ["data", "loader", "load_from_file", "extra_vars_opt"], ["extra_vars_opt", "extra_vars_opt"], ["data", "loader", "load", "extra_vars_opt"], ["data", "parse_kv", "extra_vars_opt"]]}, "name": "load_extra_vars", "params": {"loader": "", "options": ""}, "params_descr": {"loader": "", "options": ""}, "params_occur": {"loader": [["data", "loader", "load_from_file", "extra_vars_opt"], ["data", "loader", "load", "extra_vars_opt"]], "options": [["options", "extra_vars"]]}, "params_p": {"args": [], "kwargs": [], "loader": [["Optional[str]", 0.19414679829464204], ["Union[str, Iterable[str]]", 0.09512557118626308], ["Optional[List[str]]", 0.09426316750810954]], "options": [["bool", 0.1213925455063008], ["Tuple[int, int]", 0.10948400525843288], ["str", 0.0935050107748305], ["Optional[bool]", 0.09217782607335347]]}, "q_name": "load_extra_vars", "ret_exprs": ["return extra_vars"], "ret_type": "", "ret_type_p": [["str", 0.19471237227051447], ["Set[str]", 0.07379273810099553]], "variables": {"data": "", "extra_vars": "", "extra_vars_opt": ""}, "variables_p": {"data": [["str", 0.6360718353483319]], "extra_vars": [["Dict[str, str]", 0.10956096230202546], ["str", 0.0953167424009349], ["List[str]", 0.09252156543955845], ["dict", 0.08956488269913576]], "extra_vars_opt": [["str", 0.8082694778425812], ["Dict[str, Union[Any, Any, Any, Any]]", 0.09360517676548594]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[118, 0], [123, 23]], "fn_var_ln": {"options_vars": [[119, 4], [119, 16]]}, "fn_var_occur": {"options_vars": [["options_vars", "options", "check"]]}, "name": "load_options_vars", "params": {"options": ""}, "params_descr": {"options": ""}, "params_occur": {"options": [["options_vars", "options", "check"]]}, "params_p": {"args": [], "kwargs": [], "options": [["dict", 0.22202739922965897], ["int", 0.09629131545586975]]}, "q_name": "load_options_vars", "ret_exprs": ["return options_vars"], "ret_type": "", "ret_type_p": [["bool", 0.6014804621284087], ["int", 0.12486959769577635], ["Optional[Any]", 0.09877465341323073], ["Union[type, Tuple[type, ...]]", 0.09372682383668259], ["Dict[str, Tuple[int, int]]", 0.08114846292590176]], "variables": {"options_vars": ""}, "variables_p": {"options_vars": [["list", 0.22206601894395533], ["Dict[str, Union[None, Any, Any, str]]", 0.1240891762337132], ["set", 0.10659934947207407], ["Type[Dict[str, Any]]", 0.10268126714901231], ["Dict[str, List[Any]]", 0.08908285487404598], ["int", 0.08859444842292455]]}}, {"docstring": {"func": "Determines, if string is valid Python identifier using the ast module.", "long_descr": "Orignally posted at: http://stackoverflow.com/a/29586366", "ret": null}, "fn_lc": [[126, 0], [155, 15]], "fn_var_ln": {"root": [[136, 8], [136, 12]]}, "fn_var_occur": {"root": [["root", "ast", "parse", "ident"], ["isinstance", "root", "ast", "Module"], ["len", "root", "body"], ["isinstance", "root", "body", "ast", "Expr"], ["isinstance", "root", "body", "value", "ast", "Name"], ["root", "body", "value", "id", "ident"]]}, "name": "isidentifier", "params": {"ident": ""}, "params_descr": {"ident": ""}, "params_occur": {"ident": [["isinstance", "ident", "string_types"], ["root", "ast", "parse", "ident"], ["root", "body", "value", "id", "ident"]]}, "params_p": {"args": [], "ident": [["str", 0.20655869879629124], ["Mapping", 0.09911855531487311], ["List[str]", 0.08386338950371783]], "kwargs": []}, "q_name": "isidentifier", "ret_exprs": ["return False", "return False", "return False", "return False", "return False", "return False", "return False", "return True"], "ret_type": "", "ret_type_p": [["bool", 1.0]], "variables": {"root": ""}, "variables_p": {"root": [["Optional[str]", 0.10597665953094637], ["str", 0.09459436502456783], ["six.moves.urllib.parse.ParseResult", 0.08590109985168815]]}}], "imports": ["__future__", "absolute_import", "division", "print_function", "ast", "json", "dumps", "collections", "MutableMapping", "ansible", "compat", "six", "iteritems", "string_types", "ansible", "constants", "C", "ansible", "errors", "AnsibleError", "ansible", "parsing", "splitter", "parse_kv", "ansible", "module_utils", "_text", "to_native", "to_text"], "mod_var_ln": {"__metaclass__": [[20, 0], [20, 13]]}, "mod_var_occur": {"__metaclass__": []}, "no_types_annot": {"D": 0, "I": 0, "U": 25}, "session_id": "W9f6ekUZH3lxNXL3JcyWuL1TLxGT_tmkAEapLgZgNzo", "set": null, "tc": [false, null], "type_annot_cove": 0.0, "typed_seq": "", "untyped_seq": "", "variables": {"__metaclass__": ""}, "variables_p": {"__metaclass__": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]]}}}