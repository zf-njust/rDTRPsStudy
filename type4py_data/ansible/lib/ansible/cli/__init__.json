{"error": null, "response": {"classes": [{"cls_lc": [[46, 0], [53, 70]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[51, 4], [53, 70]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "format_help", "params": {"epilog": "", "formatter": "", "self": ""}, "params_descr": {"epilog": "", "formatter": "", "self": ""}, "params_occur": {"epilog": [], "formatter": [["optparse", "OptionParser", "format_help", "self", "formatter", "None"]], "self": [["self", "option_list", "sort", "key", "operator", "methodcaller"], ["optparse", "OptionParser", "format_help", "self", "formatter", "None"]]}, "params_p": {"args": [], "epilog": [["bool", 0.30000000000000004], ["List[Tuple[int, str]]", 0.1], ["float", 0.1], ["int", 0.1], ["str", 0.1]], "formatter": [["str", 0.1825719467040519]], "kwargs": [], "self": []}, "q_name": "SortedOptParser.format_help", "ret_exprs": ["return optparse.OptionParser.format_help(self, formatter=None)"], "ret_type": "", "ret_type_p": [["str", 0.8849050010142553], ["Tuple[Tuple[int, ...]]", 0.11509499898574453]], "variables": {}, "variables_p": {}}], "name": "SortedOptParser", "q_name": "SortedOptParser", "variables": {}, "variables_p": {}}, {"cls_lc": [[57, 0], [89, 16]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[63, 4], [77, 35]], "fn_var_ln": {"version": [[77, 8], [77, 20]]}, "fn_var_occur": {"version": [["self", "version", "parser", "version"]]}, "name": "__init__", "params": {"parser": "", "self": ""}, "params_descr": {"parser": "", "self": ""}, "params_occur": {"parser": [["SortedOptParser", "__init__", "self", "usage", "parser", "usage", "option_list", "parser", "option_list", "option_class", "parser", "option_class", "conflict_handler", "parser", "conflict_handler", "description", "parser", "description", "formatter", "parser", "formatter", "add_help_option", "False", "prog", "parser", "prog", "epilog", "parser", "epilog"], ["self", "version", "parser", "version"]], "self": [["SortedOptParser", "__init__", "self", "usage", "parser", "usage", "option_list", "parser", "option_list", "option_class", "parser", "option_class", "conflict_handler", "parser", "conflict_handler", "description", "parser", "description", "formatter", "parser", "formatter", "add_help_option", "False", "prog", "parser", "prog", "epilog", "parser", "epilog"], ["self", "version", "parser", "version"]]}, "params_p": {"args": [], "kwargs": [], "parser": [], "self": []}, "q_name": "InvalidOptsParser.__init__", "ret_exprs": [], "ret_type": "", "variables": {"version": ""}, "variables_p": {"version": [["bool", 0.2808479484070299], ["List[str]", 0.1355086922166423], ["bytes", 0.11129352456007553], ["list", 0.09529000221883335], ["str", 0.0944835395977482]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[79, 4], [83, 16]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "_process_long_opt", "params": {"rargs": "", "self": "", "values": ""}, "params_descr": {"rargs": "", "self": "", "values": ""}, "params_occur": {"rargs": [["optparse", "OptionParser", "_process_long_opt", "self", "rargs", "values"]], "self": [["optparse", "OptionParser", "_process_long_opt", "self", "rargs", "values"]], "values": [["optparse", "OptionParser", "_process_long_opt", "self", "rargs", "values"]]}, "params_p": {"args": [], "kwargs": [], "rargs": [["str", 0.4934959448312042], ["bytes", 0.0949526547759765], ["bool", 0.09450199326357335]], "self": [], "values": [["str", 0.4934959448312042], ["bytes", 0.0949526547759765], ["bool", 0.09450199326357335]]}, "q_name": "InvalidOptsParser._process_long_opt", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[85, 4], [89, 16]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "_process_short_opts", "params": {"rargs": "", "self": "", "values": ""}, "params_descr": {"rargs": "", "self": "", "values": ""}, "params_occur": {"rargs": [["optparse", "OptionParser", "_process_short_opts", "self", "rargs", "values"]], "self": [["optparse", "OptionParser", "_process_short_opts", "self", "rargs", "values"]], "values": [["optparse", "OptionParser", "_process_short_opts", "self", "rargs", "values"]]}, "params_p": {"args": [], "kwargs": [], "rargs": [["str", 0.4934959448312042], ["bytes", 0.0949526547759765], ["bool", 0.09450199326357335]], "self": [], "values": [["str", 0.4934959448312042], ["bytes", 0.0949526547759765], ["bool", 0.09450199326357335]]}, "q_name": "InvalidOptsParser._process_short_opts", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "InvalidOptsParser", "q_name": "InvalidOptsParser", "variables": {}, "variables_p": {}}, {"cls_lc": [[92, 0], [600, 19]], "cls_var_ln": {"LESS_OPTS": [[104, 4], [104, 13]], "PAGER": [[103, 4], [103, 9]], "VALID_ACTIONS": [[95, 4], [95, 17]], "_BOLD": [[98, 4], [98, 9]], "_CONST": [[101, 4], [101, 10]], "_ITALIC": [[97, 4], [97, 11]], "_MODULE": [[99, 4], [99, 11]], "_URL": [[100, 4], [100, 8]]}, "cls_var_occur": {"LESS_OPTS": [["os", "environ", "CLI", "LESS_OPTS"]], "PAGER": [], "VALID_ACTIONS": [], "_BOLD": [], "_CONST": [], "_ITALIC": [], "_MODULE": [], "_URL": []}, "funcs": [{"docstring": {"func": "Base init method for all command line programs", "long_descr": null, "ret": null}, "fn_lc": [[107, 4], [116, 32]], "fn_var_ln": {"action": [[115, 8], [115, 19]], "args": [[112, 8], [112, 17]], "callback": [[116, 8], [116, 21]], "options": [[113, 8], [113, 20]], "parser": [[114, 8], [114, 19]]}, "fn_var_occur": {"action": [["self", "action", "None"]], "args": [["self", "args", "args"]], "callback": [["self", "callback", "callback"]], "options": [["self", "options", "None"]], "parser": [["self", "parser", "None"]]}, "name": "__init__", "params": {"args": "", "callback": "", "self": ""}, "params_descr": {"args": "", "callback": "", "self": ""}, "params_occur": {"args": [["self", "args", "args"]], "callback": [["self", "callback", "callback"]], "self": [["self", "args", "args"], ["self", "options", "None"], ["self", "parser", "None"], ["self", "action", "None"], ["self", "callback", "callback"]]}, "params_p": {"args": [], "callback": [["int", 0.3], ["bool", 0.09999999999999999], ["float", 0.09999999999999999]], "kwargs": [], "self": []}, "q_name": "CLI.__init__", "ret_exprs": [], "ret_type": "", "variables": {"action": "", "args": "", "callback": "", "options": "", "parser": ""}, "variables_p": {"action": [["list", 0.3143378516844797], ["set", 0.10477928389482656], ["Dict[str, Optional[bool]]", 0.10477928389482656], ["Dict[str, Union[None, Any, Any]]", 0.10477928389482656], ["bool", 0.10256050685222198], ["Optional[Callable[..., Any]]", 0.09624912863088715]], "args": [["List[str]", 0.10622961048724405], ["List[Union[int, str]]", 0.08525097305755197], ["list", 0.08525097305755197], ["List[bytes]", 0.08436315230645852]], "callback": [["str", 0.30000000000000004], ["Dict[str, Any]", 0.1], ["dict", 0.1], ["int", 0.1]], "options": [["bool", 0.21612464518882502], ["dict", 0.09797876973095007], ["List[float]", 0.09734173310888888], ["Optional[int]", 0.09726245669294063], ["int", 0.09589314142775807], ["Set[str]", 0.09485064664590653], ["Dict[str, Any]", 0.09031087971094394]], "parser": [["Dict[str, Union[Any, Any]]", 0.10424160456919504]]}}, {"docstring": {"func": "Get the action the user wants to execute from the sys argv list.", "long_descr": null, "ret": null}, "fn_lc": [[118, 4], [138, 68]], "fn_var_ln": {"action": [[125, 16], [125, 27]], "arg": [[123, 12], [123, 15]], "tmp_args": [[136, 25], [136, 33]], "tmp_options": [[136, 12], [136, 23]], "tmp_parser": [[135, 12], [135, 22]]}, "fn_var_occur": {"action": [["self", "action", "arg"], ["self", "action"]], "arg": [["arg", "self", "args", "i"], ["arg", "self", "VALID_ACTIONS"], ["self", "action", "arg"]], "tmp_args": [["tmp_options", "tmp_args", "tmp_parser", "parse_args", "self", "args"]], "tmp_options": [["tmp_options", "tmp_args", "tmp_parser", "parse_args", "self", "args"], ["hasattr", "tmp_options", "tmp_options", "help", "hasattr", "tmp_options", "tmp_options", "version"]], "tmp_parser": [["tmp_parser", "InvalidOptsParser", "self", "parser"], ["tmp_options", "tmp_args", "tmp_parser", "parse_args", "self", "args"]]}, "name": "set_action", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["range", "len", "self", "args"], ["arg", "self", "args", "i"], ["arg", "self", "VALID_ACTIONS"], ["self", "action", "arg"], ["self", "args", "i"], ["self", "action"], ["tmp_parser", "InvalidOptsParser", "self", "parser"], ["tmp_options", "tmp_args", "tmp_parser", "parse_args", "self", "args"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "CLI.set_action", "ret_exprs": [], "ret_type": "", "variables": {"action": "", "arg": "", "tmp_args": "", "tmp_options": "", "tmp_parser": ""}, "variables_p": {"action": [["int", 0.6071864836137755], ["str", 0.10428273256398486], ["Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]", 0.09617692794074655], ["bool", 0.09617692794074655], ["Type[str]", 0.09617692794074655]], "arg": [["str", 0.41218563881010495], ["Tuple[Type[int], Type[float], Type[complex]]", 0.1064522887366682], ["List[str]", 0.0939142191223014]], "tmp_args": [["list", 0.11057025092224153], ["Type[Dict[str, str]]", 0.10751307516346231], ["List[Tuple[Any, Any]]", 0.10477232052445924], ["Tuple[str, Any, Any]", 0.10075187272969556], ["List[bytes]", 0.08216353915089017]], "tmp_options": [["Dict[str, Any]", 0.19460345011457897], ["Type[Dict[str, str]]", 0.1250503529704166], ["Tuple[Any, Any]", 0.09515745279063931], ["Dict[str, Optional[float]]", 0.0861099932656282]], "tmp_parser": []}}, {"docstring": {"func": "Actually runs a child defined method using the execute_<action> pattern", "long_descr": null, "ret": null}, "fn_lc": [[140, 4], [145, 12]], "fn_var_ln": {"fn": [[144, 8], [144, 10]]}, "fn_var_occur": {"fn": [["fn", "getattr", "self", "self", "action"]]}, "name": "execute", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["fn", "getattr", "self", "self", "action"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "CLI.execute", "ret_exprs": [], "ret_type": "", "variables": {"fn": ""}, "variables_p": {"fn": [["Type[Callable[Any, bool]]", 0.3151325858849136], ["List[str]", 0.1407006351766851], ["int", 0.07858162664074454], ["Tuple[str, str, str, str, str, str, str, str]", 0.07035031758834255]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[147, 4], [148, 45]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "parse", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "CLI.parse", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[150, 4], [156, 72]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "run", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "options", "verbosity"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "CLI.run", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "prompt for vault password and/or password change ", "long_descr": null, "ret": null}, "fn_lc": [[160, 4], [186, 41]], "fn_var_ln": {"new_vault_pass": [[181, 12], [181, 26]], "new_vault_pass2": [[171, 16], [171, 31]], "vault_pass": [[184, 12], [184, 22]]}, "fn_var_occur": {"new_vault_pass": [["new_vault_pass", "None"], ["new_vault_pass", "getpass", "getpass", "prompt"], ["new_vault_pass", "new_vault_pass2"], ["new_vault_pass", "to_bytes", "new_vault_pass", "errors", "nonstring", "strip"], ["vault_pass", "new_vault_pass"], ["vault_pass", "new_vault_pass"]], "new_vault_pass2": [["new_vault_pass2", "getpass", "getpass", "prompt"], ["new_vault_pass", "new_vault_pass2"]], "vault_pass": [["vault_pass", "None"], ["vault_pass", "getpass", "getpass", "prompt"], ["vault_pass", "to_bytes", "vault_pass", "errors", "nonstring", "strip"], ["vault_pass", "new_vault_pass"], ["vault_pass", "new_vault_pass"]]}, "name": "ask_vault_passwords", "params": {"ask_new_vault_pass": "", "rekey": ""}, "params_descr": {"ask_new_vault_pass": "", "rekey": ""}, "params_occur": {"ask_new_vault_pass": [["rekey", "ask_new_vault_pass"], ["ask_new_vault_pass", "rekey"]], "rekey": [["rekey", "ask_new_vault_pass"], ["ask_new_vault_pass", "rekey"]]}, "params_p": {"args": [], "ask_new_vault_pass": [["Sequence[str]", 0.19020987863076208], ["Set[int]", 0.11318674143919598], ["float", 0.09939126045630557], ["int", 0.09701594726868111], ["str", 0.09510493931538104], ["list", 0.0911184138483839]], "kwargs": [], "rekey": [["Sequence[str]", 0.19020987863076208], ["Set[int]", 0.11318674143919598], ["float", 0.09939126045630557], ["int", 0.09701594726868111], ["str", 0.09510493931538104], ["list", 0.0911184138483839]], "self": []}, "q_name": "CLI.ask_vault_passwords", "ret_exprs": ["return vault_pass, new_vault_pass"], "ret_type": "", "ret_type_p": [["str", 0.41166545101538177], ["Set[str]", 0.10550120747485182], ["Tuple[str, str]", 0.10332182713853746], ["int", 0.09904785869186482], ["tuple", 0.09701584779305793], ["Union[List[str], List[Any]]", 0.09070836976533515]], "variables": {"new_vault_pass": "", "new_vault_pass2": "", "vault_pass": ""}, "variables_p": {"new_vault_pass": [["str", 0.3906555391881004], ["Dict[str, str]", 0.10848149817324951], ["dict", 0.10480284478161338]], "new_vault_pass2": [["int", 0.20733232561165865], ["Dict[str, int]", 0.056137537780317937], ["List[List[float]]", 0.05609325820900714]], "vault_pass": [["str", 0.18872261299797286], ["Dict[str, int]", 0.132069042221452], ["Optional[bytes]", 0.11217769858433163], ["Optional[dict]", 0.10480082001738843], ["Type[Tuple[str, Any]]", 0.0911573062943082]]}}, {"docstring": {"func": "prompt for connection and become passwords if needed ", "long_descr": null, "ret": null}, "fn_lc": [[188, 4], [214, 36]], "fn_var_ln": {"become_prompt": [[203, 16], [203, 29]], "becomepass": [[210, 20], [210, 30]], "op": [[191, 8], [191, 10]], "sshpass": [[201, 20], [201, 27]]}, "fn_var_occur": {"become_prompt": [["become_prompt", "op", "become_method", "upper"], ["become_prompt", "op", "become_method", "upper"], ["becomepass", "getpass", "getpass", "prompt", "become_prompt"]], "becomepass": [["becomepass", "None"], ["becomepass", "getpass", "getpass", "prompt", "become_prompt"], ["op", "ask_pass", "becomepass"], ["becomepass", "sshpass"], ["becomepass", "to_bytes", "becomepass"], ["sshpass", "becomepass"]], "op": [["op", "self", "options"], ["op", "ask_pass"], ["become_prompt", "op", "become_method", "upper"], ["become_prompt", "op", "become_method", "upper"], ["op", "become_ask_pass"], ["op", "ask_pass", "becomepass"]], "sshpass": [["sshpass", "None"], ["sshpass", "getpass", "getpass", "prompt"], ["sshpass", "to_bytes", "sshpass", "errors", "nonstring"], ["becomepass", "sshpass"], ["sshpass", "becomepass"]]}, "name": "ask_passwords", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["op", "self", "options"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "CLI.ask_passwords", "ret_exprs": ["return (sshpass, becomepass)"], "ret_type": "", "ret_type_p": [["int", 1.3581699065570202e-09], ["str", 7.938806720918215e-10]], "variables": {"become_prompt": "", "becomepass": "", "op": "", "sshpass": ""}, "variables_p": {"become_prompt": [["int", 0.2335343942892768], ["str", 0.12977569627140936], ["dict", 0.08720732928865355], ["list", 0.08345826839901017]], "becomepass": [["str", 0.08617507080232849]], "op": [["Dict[str, Union[float, str]]", 0.20772273822366605], ["Dict[str, int]", 0.14635440180834328], ["\"OrderedDict[str, float]\"", 0.12203283244285984], ["dict", 0.08213453566179381]], "sshpass": [["Optional[bytes]", 0.22190148717921654], ["dict", 0.18549716858593668], ["bool", 0.1071370393998912], ["int", 0.08526001660138512], ["Optional[int]", 0.08306554825633461], ["float", 0.08010968660231146], ["Optional[Dict[str, float]]", 0.08000893004854127], ["str", 0.0788785723147199], ["Optional[List[str]]", 0.07814155101166322]]}}, {"docstring": {"func": "this keeps backwards compatibility with sudo/su self.options ", "long_descr": null, "ret": null}, "fn_lc": [[216, 4], [228, 45]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "normalize_become_options", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "options", "become_ask_pass", "self", "options", "become_ask_pass", "self", "options", "ask_sudo_pass", "self", "options", "ask_su_pass", "C", "DEFAULT_BECOME_ASK_PASS"], ["self", "options", "become_user", "self", "options", "become_user", "self", "options", "sudo_user", "self", "options", "su_user", "C", "DEFAULT_BECOME_USER"], ["self", "options", "become"], ["self", "options", "sudo"], ["self", "options", "become", "True"], ["self", "options", "become_method"], ["self", "options", "su"], ["self", "options", "become", "True"], ["self", "options", "become_method"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "CLI.normalize_become_options", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "check for conflicting options ", "long_descr": null, "ret": null}, "fn_lc": [[230, 4], [253, 83]], "fn_var_ln": {"op": [[233, 8], [233, 10]]}, "fn_var_occur": {"op": [["op", "self", "options"], ["op", "ask_vault_pass", "op", "vault_password_file"], ["op", "su", "op", "su_user", "op", "sudo", "op", "sudo_user", "op", "su", "op", "su_user", "op", "become", "op", "become_user", "op", "sudo", "op", "sudo_user", "op", "become", "op", "become_user"], ["op", "forks"]]}, "name": "validate_conflicts", "params": {"fork_opts": "", "runas_opts": "", "self": "", "vault_opts": ""}, "params_descr": {"fork_opts": "", "runas_opts": "", "self": "", "vault_opts": ""}, "params_occur": {"fork_opts": [], "runas_opts": [], "self": [["op", "self", "options"], ["self", "parser", "error"], ["self", "parser", "error"], ["self", "parser", "error"]], "vault_opts": []}, "params_p": {"args": [], "fork_opts": [["int", 0.19999999999999998], ["str", 0.19999999999999998], ["Iterable['Context']", 0.09999999999999999], ["dict", 0.09999999999999999], ["bool", 0.09999999999999999]], "kwargs": [], "runas_opts": [["int", 0.19999999999999998], ["str", 0.19999999999999998], ["Iterable['Context']", 0.09999999999999999], ["dict", 0.09999999999999999], ["bool", 0.09999999999999999]], "self": [], "vault_opts": [["int", 0.19999999999999998], ["str", 0.19999999999999998], ["Iterable['Context']", 0.09999999999999999], ["dict", 0.09999999999999999], ["bool", 0.09999999999999999]]}, "q_name": "CLI.validate_conflicts", "ret_exprs": [], "ret_type": "", "variables": {"op": ""}, "variables_p": {"op": [["str", 0.2685251128000518], ["Set[str]", 0.08499593926081854]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[256, 4], [257, 70]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "expand_tilde", "params": {"opt": "", "option": "", "parser": "", "value": ""}, "params_descr": {"opt": "", "option": "", "parser": "", "value": ""}, "params_occur": {"opt": [], "option": [["setattr", "parser", "values", "option", "dest", "os", "path", "expanduser", "value"]], "parser": [["setattr", "parser", "values", "option", "dest", "os", "path", "expanduser", "value"]], "value": [["setattr", "parser", "values", "option", "dest", "os", "path", "expanduser", "value"]]}, "params_p": {"args": [], "kwargs": [], "opt": [["bool", 0.44027976261819735]], "option": [["str", 0.3681139285031877], ["List[str]", 0.21731022344492792], ["Optional[str]", 0.1677658323762487], ["Optional[List[str]]", 0.08106982820675164], ["bool", 0.08085387366837704]], "parser": [["str", 0.3681139285031877], ["List[str]", 0.21731022344492792], ["Optional[str]", 0.1677658323762487], ["Optional[List[str]]", 0.08106982820675164], ["bool", 0.08085387366837704]], "self": [], "value": [["str", 0.3681139285031877], ["List[str]", 0.21731022344492792], ["Optional[str]", 0.1677658323762487], ["Optional[List[str]]", 0.08106982820675164], ["bool", 0.08085387366837704]]}, "q_name": "CLI.expand_tilde", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "optparse action callback to convert a PATH style string arg to a list of path strings.", "long_descr": "For ex, cli arg of '-p /blip/foo:/foo/bar' would be split on the\ndefault os.pathsep and the option value would be set to\nthe list ['/blip/foo', '/foo/bar']. Each path string in the list\nwill also have '~/' values expand via os.path.expanduser().", "ret": null}, "fn_lc": [[260, 4], [269, 66]], "fn_var_ln": {"expanded_path_entries": [[268, 8], [268, 29]], "path_entries": [[267, 8], [267, 20]]}, "fn_var_occur": {"expanded_path_entries": [["expanded_path_entries", "os", "path", "expanduser", "path_entry", "path_entry", "path_entries"], ["setattr", "parser", "values", "option", "dest", "expanded_path_entries"]], "path_entries": [["path_entries", "value", "split", "os", "pathsep"], ["expanded_path_entries", "os", "path", "expanduser", "path_entry", "path_entry", "path_entries"]]}, "name": "expand_paths", "params": {"opt": "", "option": "", "parser": "", "value": ""}, "params_descr": {"opt": "", "option": "", "parser": "", "value": ""}, "params_occur": {"opt": [], "option": [["setattr", "parser", "values", "option", "dest", "expanded_path_entries"]], "parser": [["setattr", "parser", "values", "option", "dest", "expanded_path_entries"]], "value": [["path_entries", "value", "split", "os", "pathsep"]]}, "params_p": {"args": [], "kwargs": [], "opt": [["bool", 0.36308884522973883]], "option": [["Optional[str]", 0.2957887798330511], ["str", 0.1971925198887007], ["Union[int, str]", 0.10561496022259854], ["int", 0.09859625994435035]], "parser": [["Optional[str]", 0.2957887798330511], ["str", 0.1971925198887007], ["Union[int, str]", 0.10561496022259854], ["int", 0.09859625994435035]], "self": [], "value": [["str", 0.741078052762532], ["Optional[Union[str, Any]]", 0.10029322302723591]]}, "q_name": "CLI.expand_paths", "ret_exprs": [], "ret_type": "", "variables": {"expanded_path_entries": "", "path_entries": ""}, "variables_p": {"expanded_path_entries": [["str", 0.5180353662565144], ["Optional[str]", 0.09930897819383507], ["list", 0.08816920478728327]], "path_entries": [["str", 0.7173170950324529], ["Optional[str]", 0.10477951132996018]]}}, {"docstring": {"func": "create an options parser for most ansible scripts ", "long_descr": null, "ret": null}, "fn_lc": [[272, 4], [406, 21]], "fn_var_ln": {"connect_group": [[329, 12], [329, 25]], "parser": [[280, 8], [280, 14]], "rg": [[352, 8], [352, 10]], "runas_group": [[375, 16], [375, 27]]}, "fn_var_occur": {"connect_group": [["connect_group", "optparse", "OptionGroup", "parser"], ["connect_group", "add_option", "default", "C", "DEFAULT_ASK_PASS", "dest", "action", "help"], ["connect_group", "add_option", "default", "C", "DEFAULT_PRIVATE_KEY_FILE", "dest", "help"], ["connect_group", "add_option", "default", "C", "DEFAULT_REMOTE_USER", "dest", "help", "C", "DEFAULT_REMOTE_USER"], ["connect_group", "add_option", "dest", "default", "C", "DEFAULT_TRANSPORT", "help", "C", "DEFAULT_TRANSPORT"], ["connect_group", "add_option", "default", "C", "DEFAULT_TIMEOUT", "type", "dest", "help", "C", "DEFAULT_TIMEOUT"], ["connect_group", "add_option", "default", "dest", "help"], ["connect_group", "add_option", "default", "dest", "help"], ["connect_group", "add_option", "default", "dest", "help"], ["connect_group", "add_option", "default", "dest", "help"], ["parser", "add_option_group", "connect_group"]], "parser": [["parser", "SortedOptParser", "usage", "version", "CLI", "version"], ["parser", "add_option", "dest", "default", "action", "help"], ["parser", "add_option", "dest", "help", "C", "DEFAULT_HOST_LIST", "default", "C", "DEFAULT_HOST_LIST", "action", "callback", "CLI", "expand_tilde", "type", "str"], ["parser", "add_option", "dest", "action", "help"], ["parser", "add_option", "default", "C", "DEFAULT_SUBSET", "dest", "help"], ["parser", "add_option", "dest", "default", "None", "help", "C", "DEFAULT_MODULE_PATH", "action", "callback", "CLI", "expand_tilde", "type", "str"], ["parser", "add_option", "dest", "action", "help", "default"], ["parser", "add_option", "dest", "default", "C", "DEFAULT_FORKS", "type", "help", "C", "DEFAULT_FORKS"], ["parser", "add_option", "default", "C", "DEFAULT_ASK_VAULT_PASS", "dest", "action", "help"], ["parser", "add_option", "default", "C", "DEFAULT_VAULT_PASSWORD_FILE", "dest", "help", "action", "callback", "CLI", "expand_tilde", "type", "str"], ["parser", "add_option", "dest", "help", "action", "callback", "CLI", "expand_tilde", "type", "str"], ["parser", "add_option", "default", "None", "dest", "help", "action", "callback", "CLI", "expand_tilde", "type", "str"], ["parser", "add_option", "dest", "default", "help"], ["parser", "add_option", "dest", "help"], ["parser", "add_option", "dest", "action", "help"], ["parser", "add_option", "dest", "default", "None", "help"], ["connect_group", "optparse", "OptionGroup", "parser"], ["parser", "add_option_group", "connect_group"], ["rg", "optparse", "OptionGroup", "parser"], ["parser", "add_option_group", "runas_group"], ["parser", "add_option", "default", "C", "DEFAULT_POLL_INTERVAL", "type", "dest", "help", "C", "DEFAULT_POLL_INTERVAL"], ["parser", "add_option", "dest", "type", "default", "help"], ["parser", "add_option", "default", "False", "dest", "action", "help"], ["parser", "add_option", "dest", "action", "help"], ["parser", "add_option", "default", "False", "dest", "action", "help"], ["parser", "add_option", "default", "C", "DEFAULT_FORCE_HANDLERS", "dest", "action", "help"], ["parser", "add_option", "dest", "action", "help"]], "rg": [["rg", "optparse", "OptionGroup", "parser"], ["runas_group", "rg"], ["runas_group", "rg"]], "runas_group": [["runas_group", "None"], ["runas_group", "rg"], ["runas_group", "add_option", "default", "C", "DEFAULT_SUDO", "action", "dest", "help"], ["runas_group", "add_option", "dest", "default", "None", "help"], ["runas_group", "add_option", "default", "C", "DEFAULT_SU", "action", "help"], ["runas_group", "add_option", "default", "None", "help", "C", "DEFAULT_SU_USER"], ["runas_group", "add_option", "default", "C", "DEFAULT_BECOME", "action", "dest", "help"], ["runas_group", "add_option", "dest", "default", "C", "DEFAULT_BECOME_METHOD", "type", "choices", "C", "BECOME_METHODS", "help", "C", "DEFAULT_BECOME_METHOD", "join", "C", "BECOME_METHODS"], ["runas_group", "add_option", "default", "None", "dest", "type", "help", "C", "DEFAULT_BECOME_USER"], ["runas_group", "rg"], ["runas_group", "add_option", "default", "C", "DEFAULT_ASK_SUDO_PASS", "dest", "action", "help"], ["runas_group", "add_option", "default", "C", "DEFAULT_ASK_SU_PASS", "dest", "action", "help"], ["runas_group", "add_option", "default", "False", "dest", "action", "help"], ["parser", "add_option_group", "runas_group"]]}, "name": "base_parser", "params": {"async_opts": "", "check_opts": "", "connect_opts": "", "epilog": "", "fork_opts": "", "inventory_opts": "", "meta_opts": "", "module_opts": "", "output_opts": "", "runas_opts": "", "runas_prompt_opts": "", "runtask_opts": "", "subset_opts": "", "usage": "", "vault_opts": ""}, "params_descr": {"async_opts": "", "check_opts": "", "connect_opts": "", "epilog": "", "fork_opts": "", "inventory_opts": "", "meta_opts": "", "module_opts": "", "output_opts": "", "runas_opts": "", "runas_prompt_opts": "", "runtask_opts": "", "subset_opts": "", "usage": "", "vault_opts": ""}, "params_occur": {"async_opts": [], "check_opts": [], "connect_opts": [], "epilog": [], "fork_opts": [], "inventory_opts": [], "meta_opts": [], "module_opts": [], "output_opts": [], "runas_opts": [["runas_opts", "runas_prompt_opts"]], "runas_prompt_opts": [["runas_opts", "runas_prompt_opts"]], "runtask_opts": [], "subset_opts": [], "usage": [["parser", "SortedOptParser", "usage", "version", "CLI", "version"]], "vault_opts": []}, "params_p": {"args": [], "async_opts": [["str", 0.6506871465314621], ["Tuple[int, int]", 0.1507857661501964], ["bool", 0.1507857661501964], ["Sequence[str]", 0.04774132116814515]], "check_opts": [["str", 0.6506871465314621], ["Tuple[int, int]", 0.1507857661501964], ["bool", 0.1507857661501964], ["Sequence[str]", 0.04774132116814515]], "connect_opts": [["str", 0.6506871465314621], ["Tuple[int, int]", 0.1507857661501964], ["bool", 0.1507857661501964], ["Sequence[str]", 0.04774132116814515]], "epilog": [["str", 0.6506871465314621], ["Tuple[int, int]", 0.1507857661501964], ["bool", 0.1507857661501964], ["Sequence[str]", 0.04774132116814515]], "fork_opts": [["str", 0.6506871465314621], ["Tuple[int, int]", 0.1507857661501964], ["bool", 0.1507857661501964], ["Sequence[str]", 0.04774132116814515]], "inventory_opts": [["str", 0.6506871465314621], ["Tuple[int, int]", 0.1507857661501964], ["bool", 0.1507857661501964], ["Sequence[str]", 0.04774132116814515]], "kwargs": [], "meta_opts": [["str", 0.6506871465314621], ["Tuple[int, int]", 0.1507857661501964], ["bool", 0.1507857661501964], ["Sequence[str]", 0.04774132116814515]], "module_opts": [["str", 0.6506871465314621], ["Tuple[int, int]", 0.1507857661501964], ["bool", 0.1507857661501964], ["Sequence[str]", 0.04774132116814515]], "output_opts": [["str", 0.6506871465314621], ["Tuple[int, int]", 0.1507857661501964], ["bool", 0.1507857661501964], ["Sequence[str]", 0.04774132116814515]], "runas_opts": [["bool", 0.24861676141529004], ["str", 0.22790795870748654]], "runas_prompt_opts": [["bool", 0.24861676141529004], ["str", 0.22790795870748654]], "runtask_opts": [["str", 0.6506871465314621], ["Tuple[int, int]", 0.1507857661501964], ["bool", 0.1507857661501964], ["Sequence[str]", 0.04774132116814515]], "self": [], "subset_opts": [["str", 0.6506871465314621], ["Tuple[int, int]", 0.1507857661501964], ["bool", 0.1507857661501964], ["Sequence[str]", 0.04774132116814515]], "usage": [["str", 0.5972368465173662], ["List[str]", 0.1075534806865759]], "vault_opts": [["str", 0.6506871465314621], ["Tuple[int, int]", 0.1507857661501964], ["bool", 0.1507857661501964], ["Sequence[str]", 0.04774132116814515]]}, "q_name": "CLI.base_parser", "ret_exprs": ["return parser"], "ret_type": "", "ret_type_p": [], "variables": {"connect_group": "", "parser": "", "rg": "", "runas_group": ""}, "variables_p": {"connect_group": [], "parser": [["optparse.OptionParser", 1.0000000000000002]], "rg": [["str", 0.30344947503941144]], "runas_group": [["dict", 0.09504326687569725]]}}, {"docstring": {"func": "return ansible version ", "long_descr": null, "ret": null}, "fn_lc": [[409, 4], [421, 21]], "fn_var_ln": {"cpath": [[419, 12], [419, 17]], "gitinfo": [[412, 8], [412, 15]], "result": [[420, 8], [420, 14]]}, "fn_var_occur": {"cpath": [["cpath", "C", "DEFAULT_MODULE_PATH"], ["result", "result", "cpath"]], "gitinfo": [["gitinfo", "CLI", "_gitinfo"], ["result", "result", "format", "gitinfo"]], "result": [["result", "format", "prog", "__version__"], ["result", "result", "format", "gitinfo"], ["result", "C", "CONFIG_FILE"], ["result", "result", "cpath"]]}, "name": "version", "params": {"prog": ""}, "params_descr": {"prog": ""}, "params_occur": {"prog": [["result", "format", "prog", "__version__"]]}, "params_p": {"args": [], "kwargs": [], "prog": [["str", 0.6785639949044818], ["Dict[str, str]", 0.1191931425380844], ["bool", 0.0962579914789386]], "self": []}, "q_name": "CLI.version", "ret_exprs": ["return result"], "ret_type": "", "ret_type_p": [["dict", 0.6934437730050711], ["set", 0.1132541176451475]], "variables": {"cpath": "", "gitinfo": "", "result": ""}, "variables_p": {"cpath": [["list", 0.2494601893808779], ["str", 0.21488451130467215], ["List[str]", 0.17082790025070393], ["dict", 0.09763953375335363], ["Dict[str, str]", 0.08263713579328415]], "gitinfo": [["str", 0.17686735968526215], ["Dict[str, Union[Any, Any, Any, Any, Any, Any, Any, Any, Any]]", 0.11441754500341873], ["Dict[str, Type[Any]]", 0.10804284094074074]], "result": [["str", 0.6374235498946533], ["Dict[str, Dict[str, Any]]", 0.09503933456214145], ["list", 0.09056337190442941]]}}, {"docstring": {"func": "return full ansible version info ", "long_descr": null, "ret": null}, "fn_lc": [[424, 4], [447, 51]], "fn_var_ln": {"ansible_version": [[431, 8], [431, 23]], "ansible_version_string": [[430, 12], [430, 34]], "ansible_versions": [[432, 8], [432, 24]]}, "fn_var_occur": {"ansible_version": [["ansible_version", "ansible_version_string", "split"], ["ansible_versions", "ansible_version", "split"], ["ansible_version_string", "strip", "ansible_version", "ansible_versions", "ansible_versions", "ansible_versions"]], "ansible_version_string": [["ansible_version_string", "CLI", "version"], ["ansible_version_string", "__version__"], ["ansible_version", "ansible_version_string", "split"], ["ansible_version_string", "strip", "ansible_version", "ansible_versions", "ansible_versions", "ansible_versions"]], "ansible_versions": [["ansible_versions", "ansible_version", "split"], ["range", "len", "ansible_versions"], ["ansible_versions", "counter"], ["ansible_versions", "counter"], ["ansible_versions", "counter", "int", "ansible_versions", "counter"], ["len", "ansible_versions"], ["range", "len", "ansible_versions"], ["ansible_versions", "append"], ["ansible_version_string", "strip", "ansible_version", "ansible_versions", "ansible_versions", "ansible_versions"]]}, "name": "version_info", "params": {"gitinfo": ""}, "params_descr": {"gitinfo": ""}, "params_occur": {"gitinfo": []}, "params_p": {"args": [], "gitinfo": [["str", 0.18969646101510093], ["Callable[[Any], bool]", 0.11917649542789154], ["Callable", 0.11201931929258409], ["bool", 0.10073529321214539], ["List[Dict[str, str]]", 0.09496081623920495]], "kwargs": [], "self": []}, "q_name": "CLI.version_info", "ret_exprs": ["return {'string': ansible_version_string.strip(), 'full': ansible_version, 'major': ansible_versions[0], 'minor': ansible_versions[1], 'revision': ansible_versions[2]}"], "ret_type": "", "ret_type_p": [["str", 0.5368148392665261]], "variables": {"ansible_version": "", "ansible_version_string": "", "ansible_versions": ""}, "variables_p": {"ansible_version": [["Pattern[str]", 0.38715570130810606], ["str", 0.09291815190922521], ["os.stat_result", 0.08842943046371217]], "ansible_version_string": [["Pattern[str]", 0.09553697758363207]], "ansible_versions": [["Callable(open)[..., Any][[[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal], default), Named(buffering, int, default), Named(encoding, Optional[str], default), Named(errors, Optional[str], default), Named(newline, Optional[str], default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.TextIOWrapper][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, Literal), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.FileIO][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, Union[Literal[-1], Literal], default), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.BufferedRandom][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, Union[Literal[-1], Literal], default), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.BufferedWriter][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, Union[Literal[-1], Literal], default), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.BufferedReader][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, int), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], BinaryIO][Any, Any]]", 0.7560612445157878], ["os.stat_result", 0.12280239615899703]]}}, {"docstring": {"func": "returns a string containing git branch, commit id and commit date ", "long_descr": null, "ret": null}, "fn_lc": [[450, 4], [492, 21]], "fn_var_ln": {"branch": [[480, 16], [480, 22]], "branch_path": [[481, 16], [481, 27]], "commit": [[479, 16], [479, 22]], "date": [[483, 12], [483, 16]], "f": [[474, 16], [474, 17]], "gitdir": [[457, 20], [457, 26]], "line": [[466, 12], [466, 16]], "offset": [[487, 16], [487, 22]], "repo_path": [[462, 24], [462, 33]], "result": [[491, 12], [491, 18]]}, "fn_var_occur": {"branch": [["branch", "join", "line", "split"], ["result", "format", "branch", "commit", "time", "strftime", "date", "int", "offset"]], "branch_path": [["branch_path", "os", "path", "join", "repo_path", "line"], ["branch_path", "None"], ["branch_path", "os", "path", "exists", "branch_path"], ["f", "open", "branch_path"], ["branch_path", "os", "path", "join", "repo_path"], ["date", "time", "localtime", "os", "stat", "branch_path", "st_mtime"]], "commit": [["commit", "f", "readline"], ["commit", "line"], ["result", "format", "branch", "commit", "time", "strftime", "date", "int", "offset"]], "date": [["date", "time", "localtime", "os", "stat", "branch_path", "st_mtime"], ["result", "format", "branch", "commit", "time", "strftime", "date", "int", "offset"]], "f": [["f", "open", "os", "path", "join", "repo_path"], ["line", "f", "readline", "rstrip"], ["f", "close"], ["f", "open", "branch_path"], ["commit", "f", "readline"], ["f", "close"]], "gitdir": [["gitdir", "yaml", "safe_load", "open", "repo_path", "get"], ["os", "path", "isabs", "gitdir"], ["repo_path", "gitdir"], ["repo_path", "os", "path", "join", "repo_path", "gitdir"]], "line": [["line", "f", "readline", "rstrip"], ["line", "startswith"], ["branch_path", "os", "path", "join", "repo_path", "line"], ["branch", "join", "line", "split"], ["commit", "line"]], "offset": [["offset", "time", "timezone"], ["offset", "time", "altzone"], ["result", "format", "branch", "commit", "time", "strftime", "date", "int", "offset"]], "repo_path": [["os", "path", "exists", "repo_path"], ["os", "path", "isfile", "repo_path"], ["gitdir", "yaml", "safe_load", "open", "repo_path", "get"], ["repo_path", "gitdir"], ["repo_path", "os", "path", "join", "repo_path", "gitdir"], ["f", "open", "os", "path", "join", "repo_path"], ["branch_path", "os", "path", "join", "repo_path", "line"], ["branch_path", "os", "path", "join", "repo_path"]], "result": [["result", "None"], ["result", "format", "branch", "commit", "time", "strftime", "date", "int", "offset"]]}, "name": "_git_repo_info", "params": {"repo_path": ""}, "params_descr": {"repo_path": ""}, "params_occur": {"repo_path": [["os", "path", "exists", "repo_path"], ["os", "path", "isfile", "repo_path"], ["gitdir", "yaml", "safe_load", "open", "repo_path", "get"], ["repo_path", "gitdir"], ["repo_path", "os", "path", "join", "repo_path", "gitdir"], ["f", "open", "os", "path", "join", "repo_path"], ["branch_path", "os", "path", "join", "repo_path", "line"], ["branch_path", "os", "path", "join", "repo_path"]]}, "params_p": {"args": [], "kwargs": [], "repo_path": [["str", 0.8977133184911917], ["os.PathLike", 0.1022866815088082]], "self": []}, "q_name": "CLI._git_repo_info", "ret_exprs": ["return ''", "return result"], "ret_type": "", "ret_type_p": [["List[Dict[str, str]]", 0.24675209436602424], ["list", 0.13316418359359875], ["bool", 0.13166859491760471], ["Tuple[int, Dict[str, Any]]", 0.10191003582771042], ["set", 0.10147406369431822], ["List[str]", 0.08505441870735853]], "variables": {"branch": "", "branch_path": "", "commit": "", "date": "", "f": "", "gitdir": "", "line": "", "offset": "", "repo_path": "", "result": ""}, "variables_p": {"branch": [["str", 0.21316617550446387], ["Pattern[str]", 0.19432233754904438], ["int", 0.08410271332690542], ["Pattern[bytes]", 0.08281594047561926], ["List[str]", 0.08262382138789125], ["Dict[str, str]", 0.08147336678199857], ["Dict[str, int]", 0.08147336678199857]], "branch_path": [["str", 0.8965406898463105], ["Union[Literal, str]", 0.10345931015368967]], "commit": [["str", 0.3077556762383127], ["Pattern[str]", 0.24658078777853143], ["Dict[Any, str]", 0.0987105268941461], ["OrderedDict[str, int]", 0.08825224051007655], ["Dict[str, Union[Any, Any]]", 0.08695248676294828]], "date": [["str", 0.6874162663177247], ["Optional[str]", 0.2121577654572744], ["Set[str]", 0.10042596822500084]], "f": [["str", 0.2627365254653748]], "gitdir": [["str", 0.7654638555616846], ["int", 0.15481821018605577], ["Union[Literal, Literal]", 0.07971793425225968]], "line": [["str", 0.4887801841491301], ["List[str]", 0.3075720889974959], ["Callable[[List[str]], Iterable[str]]", 0.09493177509247482]], "offset": [["time.struct_time", 0.3430332575002778], ["datetime.datetime.time", 0.2415060424118968], ["float", 0.15961200903406825]], "repo_path": [["str", 0.8982970004665594]], "result": [["dict", 0.22610190530203902], ["list", 0.09416298652851517], ["OrderedDict[str, Any]", 0.08086553783751275]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[495, 4], [512, 21]], "fn_var_ln": {"basedir": [[496, 8], [496, 15]], "f": [[502, 8], [502, 9]], "repo_path": [[497, 8], [497, 17]], "result": [[498, 8], [498, 14]], "submodule_info": [[509, 20], [509, 34]], "submodule_path": [[506, 16], [506, 30]], "submodules": [[499, 8], [499, 18]], "tokens": [[504, 12], [504, 18]]}, "fn_var_occur": {"basedir": [["basedir", "os", "path", "join", "os", "path", "dirname", "__file__"], ["repo_path", "os", "path", "join", "basedir"], ["submodules", "os", "path", "join", "basedir"], ["submodule_info", "CLI", "_git_repo_info", "os", "path", "join", "basedir", "submodule_path"]], "f": [["f", "open", "submodules"], ["f", "close"]], "repo_path": [["repo_path", "os", "path", "join", "basedir"], ["result", "CLI", "_git_repo_info", "repo_path"]], "result": [["result", "CLI", "_git_repo_info", "repo_path"], ["result", "format", "submodule_path", "submodule_info"]], "submodule_info": [["submodule_info", "CLI", "_git_repo_info", "os", "path", "join", "basedir", "submodule_path"], ["submodule_info", "submodule_path"], ["result", "format", "submodule_path", "submodule_info"]], "submodule_path": [["submodule_path", "tokens"], ["submodule_info", "CLI", "_git_repo_info", "os", "path", "join", "basedir", "submodule_path"], ["submodule_info", "submodule_path"], ["result", "format", "submodule_path", "submodule_info"]], "submodules": [["submodules", "os", "path", "join", "basedir"], ["os", "path", "exists", "submodules"], ["f", "open", "submodules"]], "tokens": [["tokens", "line", "strip", "split"], ["submodule_path", "tokens"]]}, "name": "_gitinfo", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "CLI._gitinfo", "ret_exprs": ["return result", "return result"], "ret_type": "", "ret_type_p": [["bool", 0.10504088776515737], ["dict", 0.09609472228784822], ["List[Dict[str, Any]]", 0.09330031132629868]], "variables": {"basedir": "", "f": "", "repo_path": "", "result": "", "submodule_info": "", "submodule_path": "", "submodules": "", "tokens": ""}, "variables_p": {"basedir": [["str", 0.6079370287818756], ["Dict[str, Any]", 0.10101369977371549]], "f": [["str", 0.3377516818695074]], "repo_path": [["str", 0.715151626119418], ["Pattern[str]", 0.10624136210018131], ["list", 0.09143453151302346], ["List[str]", 0.08717248026737724]], "result": [["subprocess.CompletedProcess", 0.08770131596264243]], "submodule_info": [["str", 0.4877491625907806], ["Tuple[Literal]", 0.11992441264065647], ["dict", 0.11512878734070837], ["Dict[str, Union[Any, Any]]", 0.09950402245183082], ["Dict[str, Any]", 0.09271429644196434], ["Dict[str, str]", 0.08497931853405938]], "submodule_path": [["str", 1.0]], "submodules": [["str", 0.9999999999999999]], "tokens": [["str", 0.7446636843475941], ["List[str]", 0.1350710235816199], ["Pattern[str]", 0.12026529207078586]]}}, {"docstring": {"func": "find reasonable way to display text ", "long_descr": null, "ret": null}, "fn_lc": [[514, 4], [530, 37]], "fn_var_ln": {"p": [[525, 12], [525, 13]]}, "fn_var_occur": {"p": [["p", "subprocess", "Popen", "shell", "True", "stdout", "subprocess", "PIPE", "stderr", "subprocess", "PIPE"], ["p", "communicate"], ["p", "returncode"]]}, "name": "pager", "params": {"self": "", "text": ""}, "params_descr": {"self": "", "text": ""}, "params_occur": {"self": [["self", "pager_pipe", "text", "os", "environ"], ["self", "pager_pipe", "text"]], "text": [["display", "display", "text"], ["display", "display", "text"], ["self", "pager_pipe", "text", "os", "environ"], ["self", "pager_pipe", "text"], ["display", "display", "text"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "text": [["str", 0.8466455671670672], ["int", 0.08227653081814212], ["NamedTuple", 0.07107790201479071]]}, "q_name": "CLI.pager", "ret_exprs": [], "ret_type": "", "variables": {"p": ""}, "variables_p": {"p": [["str", 0.37675959180488955], ["subprocess.CompletedProcess[bytes]", 0.29865959068338166], ["subprocess.Popen[Any]", 0.16113945987611383]]}}, {"docstring": {"func": "pipe text through a pager ", "long_descr": null, "ret": null}, "fn_lc": [[533, 4], [543, 16]], "fn_var_ln": {"cmd": [[538, 12], [538, 15]]}, "fn_var_occur": {"cmd": [["cmd", "subprocess", "Popen", "cmd", "shell", "True", "stdin", "subprocess", "PIPE", "stdout", "sys", "stdout"], ["cmd", "communicate", "input", "to_bytes", "text"]]}, "name": "pager_pipe", "params": {"cmd": "", "text": ""}, "params_descr": {"cmd": "", "text": ""}, "params_occur": {"cmd": [["cmd", "subprocess", "Popen", "cmd", "shell", "True", "stdin", "subprocess", "PIPE", "stdout", "sys", "stdout"], ["cmd", "communicate", "input", "to_bytes", "text"]], "text": [["cmd", "communicate", "input", "to_bytes", "text"]]}, "params_p": {"args": [], "cmd": [["str", 0.8976749943078345], ["bool", 0.10232500569216559]], "kwargs": [], "self": [], "text": [["str", 0.8146545285870347], ["int", 0.050776522761454626], ["List[str]", 0.046728232873341616]]}, "q_name": "CLI.pager_pipe", "ret_exprs": [], "ret_type": "", "variables": {"cmd": ""}, "variables_p": {"cmd": [["subprocess.CompletedProcess[bytes]", 0.5712274518989228], ["subprocess.Popen[Any]", 0.3178547094102662], ["str", 0.11091783869081104]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[546, 4], [554, 16]], "fn_var_ln": {"t": [[552, 8], [552, 9]]}, "fn_var_occur": {"t": [["t", "cls", "_ITALIC", "sub", "text"], ["t", "cls", "_BOLD", "sub", "t"], ["t", "cls", "_MODULE", "sub", "t"], ["t", "cls", "_URL", "sub", "t"], ["t", "cls", "_CONST", "sub", "t"]]}, "name": "tty_ify", "params": {"cls": "", "text": ""}, "params_descr": {"cls": "", "text": ""}, "params_occur": {"cls": [["t", "cls", "_ITALIC", "sub", "text"], ["t", "cls", "_BOLD", "sub", "t"], ["t", "cls", "_MODULE", "sub", "t"], ["t", "cls", "_URL", "sub", "t"], ["t", "cls", "_CONST", "sub", "t"]], "text": [["t", "cls", "_ITALIC", "sub", "text"]]}, "params_p": {"args": [], "cls": [["str", 0.49979376135869724], ["bool", 0.1879890700722361]], "kwargs": [], "self": [], "text": [["str", 0.4826269269216172], ["List[str]", 0.1003613332081333]]}, "q_name": "CLI.tty_ify", "ret_exprs": ["return t"], "ret_type": "", "ret_type_p": [["bool", 0.0904778386147681], ["str", 0.08951696314837737]], "variables": {"t": ""}, "variables_p": {"t": [["Type[Dict[int, Any]]", 0.1136388757325805], ["int", 0.09090685493176567], ["raiden.utils.Secret", 0.08430420711470879]]}}, {"docstring": {"func": "Read a vault password from a file or if executable, execute the script and", "long_descr": "retrieve password from STDOUT", "ret": null}, "fn_lc": [[557, 4], [585, 25]], "fn_var_ln": {"f": [[579, 16], [579, 17]], "p": [[570, 16], [570, 17]], "stderr": [[573, 20], [573, 26]], "stdout": [[573, 12], [573, 18]], "this_path": [[563, 8], [563, 17]], "vault_pass": [[580, 16], [580, 26]]}, "fn_var_occur": {"f": [["f", "open", "this_path"], ["vault_pass", "f", "read", "strip"], ["f", "close"]], "p": [["p", "subprocess", "Popen", "this_path", "stdout", "subprocess", "PIPE"], ["stdout", "stderr", "p", "communicate"], ["p", "returncode"], ["AnsibleError", "this_path", "p", "returncode", "p", "stderr"]], "stderr": [["stdout", "stderr", "p", "communicate"], ["AnsibleError", "this_path", "p", "returncode", "p", "stderr"]], "stdout": [["p", "subprocess", "Popen", "this_path", "stdout", "subprocess", "PIPE"], ["stdout", "stderr", "p", "communicate"], ["vault_pass", "stdout", "strip"]], "this_path": [["this_path", "os", "path", "realpath", "os", "path", "expanduser", "vault_password_file"], ["os", "path", "exists", "this_path"], ["AnsibleError", "this_path"], ["loader", "is_executable", "this_path"], ["p", "subprocess", "Popen", "this_path", "stdout", "subprocess", "PIPE"], ["AnsibleError", "join", "this_path", "e"], ["AnsibleError", "this_path", "p", "returncode", "p", "stderr"], ["f", "open", "this_path"], ["AnsibleError", "this_path", "e"]], "vault_pass": [["vault_pass", "stdout", "strip"], ["vault_pass", "f", "read", "strip"]]}, "name": "read_vault_password_file", "params": {"loader": "", "vault_password_file": ""}, "params_descr": {"loader": "", "vault_password_file": ""}, "params_occur": {"loader": [["loader", "is_executable", "this_path"]], "vault_password_file": [["this_path", "os", "path", "realpath", "os", "path", "expanduser", "vault_password_file"]]}, "params_p": {"args": [], "kwargs": [], "loader": [["str", 0.6011742005238632]], "self": [], "vault_password_file": [["str", 0.8987897060817929]]}, "q_name": "CLI.read_vault_password_file", "ret_exprs": ["return vault_pass"], "ret_type": "", "ret_type_p": [["str", 0.1969686445231155]], "variables": {"f": "", "p": "", "stderr": "", "stdout": "", "this_path": "", "vault_pass": ""}, "variables_p": {"f": [["str", 0.07449666460998361]], "p": [["subprocess.CompletedProcess[bytes]", 0.7000554973244383], ["subprocess.Popen[Any]", 0.19721459787951023], ["List[str]", 0.10272990479605161]], "stderr": [["str", 0.2791506489036503], ["Dict[str, str]", 0.18600217403348474], ["List[str]", 0.10816578128674201], ["Dict[str, List[str]]", 0.09300108701674237], ["cmk.gui.utils.html.HTML", 0.09300108701674237]], "stdout": [["subprocess.CompletedProcess[bytes]", 0.47419455799361626], ["str", 0.25799011310692593], ["subprocess.Popen[Any]", 0.09476336178972823], ["List[str]", 0.08519326968289884]], "this_path": [["str", 1.0]], "vault_pass": [["os.statvfs_result", 0.1971231659643377], ["os.stat_result", 0.1020551723782971]]}}, {"docstring": {"func": "Returns an option from an Optparse values instance.", "long_descr": null, "ret": null}, "fn_lc": [[587, 4], [600, 19]], "fn_var_ln": {"data": [[599, 16], [599, 20]]}, "fn_var_occur": {"data": [["data", "getattr", "self", "options", "k"], ["os", "pathsep", "data"], ["data", "data", "split", "os", "pathsep"]]}, "name": "get_opt", "params": {"defval": "", "k": "", "self": ""}, "params_descr": {"defval": "", "k": "", "self": ""}, "params_occur": {"defval": [], "k": [["data", "getattr", "self", "options", "k"]], "self": [["data", "getattr", "self", "options", "k"]]}, "params_p": {"args": [], "defval": [["KT", 0.9999999984569213], ["bool", 7.165351565882822e-10], ["int", 3.8959982608297714e-10], ["Type[Exception]", 1.4609871414184536e-10], ["float", 1.4609871414184536e-10], ["str", 1.4474635360344638e-10]], "k": [["str", 0.4881041614187871], ["Optional[str]", 0.12234188425040478], ["Dict[str, Union[str, int, bool]]", 0.10512130901669536], ["ImportError", 0.09721504471855673], ["Type[object]", 0.09698495087358006]], "kwargs": [], "self": []}, "q_name": "CLI.get_opt", "ret_exprs": ["return defval", "return data"], "ret_type": "", "ret_type_p": [["int", 0.2242174263072731], ["bytes", 0.1671075599925807], ["Dict[str, Any]", 0.1298668942333911], ["bool", 0.0909990962517591], ["str", 0.08411049426621871]], "variables": {"data": ""}, "variables_p": {"data": [["str", 0.6010159647976555], ["int", 0.19514590406572802], ["bytes", 0.10225793180827425]]}}], "name": "CLI", "q_name": "CLI", "variables": {"LESS_OPTS": "", "PAGER": "", "VALID_ACTIONS": "", "_BOLD": "", "_CONST": "", "_ITALIC": "", "_MODULE": "", "_URL": ""}, "variables_p": {"LESS_OPTS": [["str", 0.6071249510056367]], "PAGER": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "VALID_ACTIONS": [["Dict[str, Union[Any, Any, Any, Any]]", 0.1], ["str", 0.1], ["Set[str]", 0.1], ["Dict[str, str]", 0.1], ["Tuple[str, str, str]", 0.1], ["List[bytes]", 0.1]], "_BOLD": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "_CONST": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "_ITALIC": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "_MODULE": [["str", 0.6000000000000001], ["property", 0.20000000000000004], ["list", 0.10000000000000002], ["optparse.Option", 0.10000000000000002]], "_URL": [["str", 0.8999999999999999], ["ClassVar[str]", 0.09999999999999999]]}}], "funcs": [], "imports": ["__future__", "absolute_import", "division", "print_function", "operator", "optparse", "os", "sys", "time", "yaml", "re", "getpass", "signal", "subprocess", "ansible", "release", "__version__", "ansible", "constants", "C", "ansible", "errors", "AnsibleError", "AnsibleOptionsError", "ansible", "module_utils", "_text", "to_bytes", "to_text", "__main__", "display", "ansible", "utils", "display", "Display"], "mod_var_ln": {"__metaclass__": [[21, 0], [21, 13]], "display": [[43, 4], [43, 11]]}, "mod_var_occur": {"__metaclass__": [], "display": [["display", "display", "to_text", "C", "CONFIG_FILE"], ["display", "display"], ["display", "display", "text"], ["display", "display", "text"], ["display", "display", "text"]]}, "no_types_annot": {"D": 0, "I": 0, "U": 140}, "session_id": "S5fFQmRjGOSKOLRAnEs5sAsVqRjfNnRk1TzLFLXnWh4", "set": null, "tc": [false, null], "type_annot_cove": 0.0, "typed_seq": "", "untyped_seq": "", "variables": {"__metaclass__": "", "display": ""}, "variables_p": {"__metaclass__": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "display": [["str", 0.10622618377859454], ["List[int]", 0.10343392241708635], ["bytes", 0.09639443237957186], ["list", 0.0943713128037633], ["os.stat_result", 0.09417980439115649]]}}}