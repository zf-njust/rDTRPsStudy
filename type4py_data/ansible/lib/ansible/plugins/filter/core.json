{"error": null, "response": {"classes": [{"cls_lc": [[61, 0], [70, 61]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[66, 4], [70, 61]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "default", "params": {"o": "", "self": ""}, "params_descr": {"o": "", "self": ""}, "params_occur": {"o": [["isinstance", "o", "HostVars"], ["dict", "o"], ["super", "AnsibleJSONEncoder", "self", "default", "o"]], "self": [["super", "AnsibleJSONEncoder", "self", "default", "o"]]}, "params_p": {"args": [], "kwargs": [], "o": [["str", 0.19101836952737997], ["int", 0.1014409798902588], ["Pattern", 0.07076643172478979]], "self": []}, "q_name": "AnsibleJSONEncoder.default", "ret_exprs": ["return dict(o)", "return super(AnsibleJSONEncoder, self).default(o)"], "ret_type": "", "ret_type_p": [["Dict[str, Any]", 0.392397909283193], ["int", 0.10674998601838791], ["Dict[str, float]", 0.10273587387309795], ["Dict[str, Dict[str, Any]]", 0.09809947732079825]], "variables": {}, "variables_p": {}}], "name": "AnsibleJSONEncoder", "q_name": "AnsibleJSONEncoder", "variables": {}, "variables_p": {}}, {"cls_lc": [[434, 0], [528, 9]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[437, 4], [528, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "filters", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "FilterModule.filters", "ret_exprs": ["return { # base 64 'b64decode': partial(unicode_wrap, base64.b64decode), 'b64encode': partial(unicode_wrap, base64.b64encode), # uuid 'to_uuid': to_uuid, # json 'to_json': to_json, 'to_nice_json': to_nice_json, 'from_json': json.loads, # yaml 'to_yaml': to_yaml, 'to_nice_yaml': to_nice_yaml, 'from_yaml': from_yaml, #date 'to_datetime': to_datetime, # path 'basename': partial(unicode_wrap, os.path.basename), 'dirname': partial(unicode_wrap, os.path.dirname), 'expanduser': partial(unicode_wrap, os.path.expanduser), 'realpath': partial(unicode_wrap, os.path.realpath), 'relpath': partial(unicode_wrap, os.path.relpath), 'splitext': partial(unicode_wrap, os.path.splitext), 'win_basename': partial(unicode_wrap, ntpath.basename), 'win_dirname': partial(unicode_wrap, ntpath.dirname), 'win_splitdrive': partial(unicode_wrap, ntpath.splitdrive), # value as boolean 'bool': to_bool, # quote string for shell usage 'quote': quote, # hash filters # md5 hex digest of string 'md5': md5s, # sha1 hex digeset of string 'sha1': checksum_s, # checksum of string as used by ansible for checksuming files 'checksum': checksum_s, # generic hashing 'password_hash': get_encrypted_password, 'hash': get_hash, # file glob 'fileglob': fileglob, # regex 'regex_replace': regex_replace, 'regex_escape': regex_escape, 'regex_search': regex_search, 'regex_findall': regex_findall, # ? : ; 'ternary': ternary, # list # random stuff 'random': rand, 'shuffle': randomize_list, # undefined 'mandatory': mandatory, # merge dicts 'combine': combine, # comment-style decoration 'comment': comment, # array and dict lookups 'extract': extract, # failure testing 'failed' : failed, 'failure' : failed, 'success' : success, 'succeeded' : success, # changed testing 'changed' : changed, 'change' : changed, # skip testing 'skipped' : skipped, 'skip' : skipped,}"], "ret_type": "", "ret_type_p": [["str", 0.5149190377948061]], "variables": {}, "variables_p": {}}], "name": "FilterModule", "q_name": "FilterModule", "variables": {}, "variables_p": {}}], "funcs": [{"docstring": {"func": "Make verbose, human readable yaml", "long_descr": null, "ret": null}, "fn_lc": [[72, 0], [75, 31]], "fn_var_ln": {"transformed": [[74, 4], [74, 15]]}, "fn_var_occur": {"transformed": [["transformed", "yaml", "dump", "a", "Dumper", "AnsibleDumper", "allow_unicode", "True", "kw"], ["to_text", "transformed"]]}, "name": "to_yaml", "params": {"a": "", "args": "", "kw": ""}, "params_descr": {"a": "", "args": "", "kw": ""}, "params_occur": {"a": [["transformed", "yaml", "dump", "a", "Dumper", "AnsibleDumper", "allow_unicode", "True", "kw"]], "args": [], "kw": [["transformed", "yaml", "dump", "a", "Dumper", "AnsibleDumper", "allow_unicode", "True", "kw"]]}, "params_p": {"a": [["TextIO", 0.10375816613630107], ["str", 0.09564728194482602], ["list", 0.09443312105888671], ["bytes", 0.09443312105888671]], "args": [], "kw": [["TextIO", 0.10375816613630107], ["str", 0.09564728194482602], ["list", 0.09443312105888671], ["bytes", 0.09443312105888671]], "kwargs": []}, "q_name": "to_yaml", "ret_exprs": ["return to_text(transformed)"], "ret_type": "", "ret_type_p": [["str", 0.8005316204004173], ["int", 0.10054163722432438], ["Optional[str]", 0.0989267423752585]], "variables": {"transformed": ""}, "variables_p": {"transformed": [["dict", 0.17770408256495665], ["List[str]", 0.09787674481840895], ["Optional[str]", 0.09586357269338518]]}}, {"docstring": {"func": "Make verbose, human readable yaml", "long_descr": null, "ret": null}, "fn_lc": [[77, 0], [80, 31]], "fn_var_ln": {"transformed": [[79, 4], [79, 15]]}, "fn_var_occur": {"transformed": [["transformed", "yaml", "dump", "a", "Dumper", "AnsibleDumper", "indent", "indent", "allow_unicode", "True", "default_flow_style", "False", "kw"], ["to_text", "transformed"]]}, "name": "to_nice_yaml", "params": {"a": "", "args": "", "indent": "", "kw": ""}, "params_descr": {"a": "", "args": "", "indent": "", "kw": ""}, "params_occur": {"a": [["transformed", "yaml", "dump", "a", "Dumper", "AnsibleDumper", "indent", "indent", "allow_unicode", "True", "default_flow_style", "False", "kw"]], "args": [], "indent": [["transformed", "yaml", "dump", "a", "Dumper", "AnsibleDumper", "indent", "indent", "allow_unicode", "True", "default_flow_style", "False", "kw"]], "kw": [["transformed", "yaml", "dump", "a", "Dumper", "AnsibleDumper", "indent", "indent", "allow_unicode", "True", "default_flow_style", "False", "kw"]]}, "params_p": {"a": [["Tuple[bytes]", 0.0965409325340812], ["Optional[\"Node\"]", 0.0918713516816336], ["str", 0.08913407508918669]], "args": [], "indent": [["Tuple[bytes]", 0.0965409325340812], ["Optional[\"Node\"]", 0.0918713516816336], ["str", 0.08913407508918669]], "kw": [["Tuple[bytes]", 0.0965409325340812], ["Optional[\"Node\"]", 0.0918713516816336], ["str", 0.08913407508918669]], "kwargs": []}, "q_name": "to_nice_yaml", "ret_exprs": ["return to_text(transformed)"], "ret_type": "", "ret_type_p": [["str", 0.8005316204004173], ["int", 0.10054163722432438], ["Optional[str]", 0.0989267423752585]], "variables": {"transformed": ""}, "variables_p": {"transformed": [["str", 0.12456950330402772], ["Optional[str]", 0.09265178973073585]]}}, {"docstring": {"func": "Convert the value to JSON ", "long_descr": null, "ret": null}, "fn_lc": [[82, 0], [84, 61]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "to_json", "params": {"a": "", "args": "", "kw": ""}, "params_descr": {"a": "", "args": "", "kw": ""}, "params_occur": {"a": [["json", "dumps", "a", "cls", "AnsibleJSONEncoder", "args", "kw"]], "args": [["json", "dumps", "a", "cls", "AnsibleJSONEncoder", "args", "kw"]], "kw": [["json", "dumps", "a", "cls", "AnsibleJSONEncoder", "args", "kw"]]}, "params_p": {"a": [["str", 0.29807734126921437], ["List[str]", 0.1756931733126855], ["bool", 0.1250403700433532]], "args": [], "kw": [["str", 0.29807734126921437], ["List[str]", 0.1756931733126855], ["bool", 0.1250403700433532]], "kwargs": []}, "q_name": "to_json", "ret_exprs": ["return json.dumps(a, cls=AnsibleJSONEncoder, *args, **kw)"], "ret_type": "", "ret_type_p": [["bool", 0.25233643222748514], ["List[str]", 0.16338239090974224]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Make verbose, human readable JSON", "long_descr": null, "ret": null}, "fn_lc": [[86, 0], [107, 38]], "fn_var_ln": {"major": [[96, 16], [96, 21]]}, "fn_var_occur": {"major": [["major", "int", "simplejson", "__version__", "split"]]}, "name": "to_nice_json", "params": {"a": "", "args": "", "indent": "", "kw": ""}, "params_descr": {"a": "", "args": "", "indent": "", "kw": ""}, "params_occur": {"a": [["simplejson", "dumps", "a", "indent", "indent", "sort_keys", "True", "args", "kw"], ["json", "dumps", "a", "indent", "indent", "sort_keys", "True", "cls", "AnsibleJSONEncoder", "args", "kw"], ["to_json", "a", "args", "kw"]], "args": [["simplejson", "dumps", "a", "indent", "indent", "sort_keys", "True", "args", "kw"], ["json", "dumps", "a", "indent", "indent", "sort_keys", "True", "cls", "AnsibleJSONEncoder", "args", "kw"], ["to_json", "a", "args", "kw"]], "indent": [["simplejson", "dumps", "a", "indent", "indent", "sort_keys", "True", "args", "kw"], ["json", "dumps", "a", "indent", "indent", "sort_keys", "True", "cls", "AnsibleJSONEncoder", "args", "kw"]], "kw": [["simplejson", "dumps", "a", "indent", "indent", "sort_keys", "True", "args", "kw"], ["json", "dumps", "a", "indent", "indent", "sort_keys", "True", "cls", "AnsibleJSONEncoder", "args", "kw"], ["to_json", "a", "args", "kw"]]}, "params_p": {"a": [["dict", 0.10818706746303174]], "args": [], "indent": [["dict", 0.10818706746303174]], "kw": [["dict", 0.10818706746303174]], "kwargs": []}, "q_name": "to_nice_json", "ret_exprs": ["return simplejson.dumps(a, indent=indent, sort_keys=True, *args, **kw)", "return json.dumps(a, indent=indent, sort_keys=True, cls=AnsibleJSONEncoder, *args, **kw)", "return to_json(a, *args, **kw)"], "ret_type": "", "ret_type_p": [["str", 0.5088437073711003], ["List[int]", 0.28971424575199334], ["bytearray", 0.10300944090860177], ["Tuple[bytes, bytes]", 0.09843260596830461]], "variables": {"major": ""}, "variables_p": {"major": [["int", 0.39801607606074096], ["Pattern[str]", 0.13557623184523968], ["Callable(chr)[[int], str]", 0.10631910935330068], ["Tuple[str, str, str]", 0.09293673115731263], ["str", 0.09286112057426797], ["Dict[str, int]", 0.08470222146889199]]}}, {"docstring": {"func": "return a bool for the arg ", "long_descr": null, "ret": null}, "fn_lc": [[109, 0], [118, 20]], "fn_var_ln": {"a": [[114, 8], [114, 9]]}, "fn_var_occur": {"a": [["a", "None", "type", "a", "bool"], ["isinstance", "a", "string_types"], ["a", "a", "lower"]]}, "name": "to_bool", "params": {"a": ""}, "params_descr": {"a": ""}, "params_occur": {"a": [["a", "None", "type", "a", "bool"], ["isinstance", "a", "string_types"], ["a", "a", "lower"]]}, "params_p": {"a": [["Optional[str]", 0.08491701958340957]], "args": [], "kwargs": []}, "q_name": "to_bool", "ret_exprs": ["return a", "return True", "return False"], "ret_type": "", "ret_type_p": [["bool", 1.0000000000000002]], "variables": {"a": ""}, "variables_p": {"a": [["list", 0.12648324851087003], ["str", 0.10439010032464621], ["int", 0.09298106243153788], ["List[Tuple[str, str]]", 0.08964712237319566], ["Union[bytearray, bytes]", 0.08726324219990202], ["dict", 0.08689855676054271]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[120, 0], [121, 44]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "to_datetime", "params": {"format": "", "string": ""}, "params_descr": {"format": "", "string": ""}, "params_occur": {"format": [["datetime", "strptime", "string", "format"]], "string": [["datetime", "strptime", "string", "format"]]}, "params_p": {"args": [], "format": [["str", 0.9999999999999999]], "kwargs": [], "string": [["str", 0.9999999999999999]]}, "q_name": "to_datetime", "ret_exprs": ["return datetime.strptime(string, format)"], "ret_type": "", "ret_type_p": [["str", 1.0]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "return its argument quoted for shell usage ", "long_descr": null, "ret": null}, "fn_lc": [[124, 0], [126, 25]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "quote", "params": {"a": ""}, "params_descr": {"a": ""}, "params_occur": {"a": [["pipes", "quote", "a"]]}, "params_p": {"a": [], "args": [], "kwargs": []}, "q_name": "quote", "ret_exprs": ["return pipes.quote(a)"], "ret_type": "", "ret_type_p": [["utils.Node", 0.09153013895190067], ["str", 0.07679331431146852], ["Tuple[str]", 0.06223663483142594], ["int", 0.05861365908388808]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "return list of matched regular files for glob ", "long_descr": null, "ret": null}, "fn_lc": [[128, 0], [130, 66]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "fileglob", "params": {"pathname": ""}, "params_descr": {"pathname": ""}, "params_occur": {"pathname": [["g", "g", "glob", "glob", "pathname", "os", "path", "isfile", "g"]]}, "params_p": {"args": [], "kwargs": [], "pathname": [["str", 0.49997243211576636], ["List[str]", 0.20370838043921685], ["bool", 0.11598785274977993]]}, "q_name": "fileglob", "ret_exprs": ["return [ g for g in glob.glob(pathname) if os.path.isfile(g) ]"], "ret_type": "", "ret_type_p": [["int", 0.2112092193228614], ["list", 0.10626240172825566], ["List[Dict]", 0.09740218297137342], ["List[Tuple[int, float]]", 0.09734389522504876], ["List[dict]", 0.09690854975626283], ["List[str]", 0.09663221875886582], ["Iterator[str]", 0.09643056049587488], ["List[int]", 0.09643056049587488]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Perform a `re.sub` returning a string ", "long_descr": null, "ret": null}, "fn_lc": [[132, 0], [142, 38]], "fn_var_ln": {"_re": [[141, 4], [141, 7]], "flags": [[140, 8], [140, 13]], "value": [[135, 4], [135, 9]]}, "fn_var_occur": {"_re": [["_re", "re", "compile", "pattern", "flags", "flags"], ["_re", "sub", "replacement", "value"]], "flags": [["flags", "re", "I"], ["_re", "re", "compile", "pattern", "flags", "flags"]], "value": [["value", "to_text", "value", "errors", "nonstring"], ["_re", "sub", "replacement", "value"]]}, "name": "regex_replace", "params": {"ignorecase": "", "pattern": "", "replacement": "", "value": ""}, "params_descr": {"ignorecase": "", "pattern": "", "replacement": "", "value": ""}, "params_occur": {"ignorecase": [], "pattern": [["_re", "re", "compile", "pattern", "flags", "flags"]], "replacement": [["_re", "sub", "replacement", "value"]], "value": [["value", "to_text", "value", "errors", "nonstring"], ["_re", "sub", "replacement", "value"]]}, "params_p": {"args": [], "ignorecase": [["int", 0.1], ["Tuple[str, int]", 0.1], ["complex", 0.1], ["list", 0.1]], "kwargs": [], "pattern": [["str", 0.6296868437224257], ["int", 0.09555539015796728], ["Optional[str]", 0.0910892964876148]], "replacement": [["str", 0.2], ["Optional[str]", 0.1], ["int", 0.1]], "value": [["str", 0.5479801952705048], ["Set[str]", 0.10094453483521963]]}, "q_name": "regex_replace", "ret_exprs": ["return _re.sub(replacement, value)"], "ret_type": "", "ret_type_p": [["bool", 0.18756572073621486], ["raiden.utils.Tuple[int, int]", 0.11663029159937047], ["bytes", 0.11663029159937047], ["str", 0.10063983508491149], ["float", 0.08548297147322083], ["Union[str, bool, None]", 0.08494355006337659]], "variables": {"_re": "", "flags": "", "value": ""}, "variables_p": {"_re": [["str", 0.9999999999999999]], "flags": [["int", 0.2936021327508235], ["list", 0.11622791265689829], ["str", 0.10944359879781781], ["List[Union[Any, Any, Any, Any]]", 0.10808526627192375], ["List[str]", 0.09770765995270796], ["Type[T]", 0.09500014439892501], ["Dict[str, str]", 0.09000399661819905], ["Dict[int, int]", 0.08992928855270475]], "value": [["list", 0.417814104888769], ["dict", 0.29995076997311754], ["str", 0.11900325451885212], ["List[str]", 0.08305301858666496]]}}, {"docstring": {"func": "Perform re.findall and return the list of matches ", "long_descr": null, "ret": null}, "fn_lc": [[144, 0], [151, 42]], "fn_var_ln": {"flags": [[146, 4], [146, 9]]}, "fn_var_occur": {"flags": [["flags", "re", "I"], ["flags", "re", "M"], ["re", "findall", "regex", "value", "flags"]]}, "name": "regex_findall", "params": {"ignorecase": "", "multiline": "", "regex": "", "value": ""}, "params_descr": {"ignorecase": "", "multiline": "", "regex": "", "value": ""}, "params_occur": {"ignorecase": [], "multiline": [], "regex": [["re", "findall", "regex", "value", "flags"]], "value": [["re", "findall", "regex", "value", "flags"]]}, "params_p": {"args": [], "ignorecase": [["int", 0.1], ["Tuple[str, int]", 0.1], ["complex", 0.1], ["list", 0.1]], "kwargs": [], "multiline": [["int", 0.1], ["Tuple[str, int]", 0.1], ["complex", 0.1], ["list", 0.1]], "regex": [["str", 2.0940325410791845e-10], ["int", 7.41674632369601e-11]], "value": [["str", 2.0940325410791845e-10], ["int", 7.41674632369601e-11]]}, "q_name": "regex_findall", "ret_exprs": ["return re.findall(regex, value, flags)"], "ret_type": "", "ret_type_p": [["str", 0.2101815477562441], ["float", 0.11851680688625471], ["int", 0.10038086999982723], ["dict", 0.09591199781697413], ["bool", 0.09395383962398213], ["raiden.utils.Tuple[int, int]", 0.09085550601877493], ["bytes", 0.09085550601877493]], "variables": {"flags": ""}, "variables_p": {"flags": [["int", 0.22018600983472336], ["List[float]", 0.1567572435817395], ["Dict[str, int]", 0.09869470909548399], ["List[int]", 0.08167471667125674], ["float", 0.0812167849269126]]}}, {"docstring": {"func": "Perform re.search and return the list of matches or a backref ", "long_descr": null, "ret": null}, "fn_lc": [[153, 0], [181, 24]], "fn_var_ln": {"flags": [[167, 4], [167, 9]], "groups": [[156, 4], [156, 10]], "items": [[178, 12], [178, 17]], "match": [[173, 4], [173, 9]]}, "fn_var_occur": {"flags": [["flags", "re", "I"], ["flags", "re", "M"], ["match", "re", "search", "regex", "value", "flags"]], "groups": [["groups", "list"], ["groups", "append", "match"], ["groups", "append", "match"]], "items": [["items", "list"], ["items", "append", "match", "group", "item"]], "match": [["match", "re", "match", "arg", "group"], ["groups", "append", "match"], ["match", "int", "re", "match", "arg", "group"], ["groups", "append", "match"], ["match", "re", "search", "regex", "value", "flags"], ["match", "group"], ["items", "append", "match", "group", "item"]]}, "name": "regex_search", "params": {"args": "", "kwargs": "", "regex": "", "value": ""}, "params_descr": {"args": "", "kwargs": "", "regex": "", "value": ""}, "params_occur": {"args": [], "kwargs": [["kwargs", "get"], ["kwargs", "get"]], "regex": [["match", "re", "search", "regex", "value", "flags"]], "value": [["match", "re", "search", "regex", "value", "flags"]]}, "params_p": {"args": [], "kwargs": [], "regex": [["str", 0.9186861323489302], ["bool", 0.0813138676510699]], "value": [["str", 0.9186861323489302], ["bool", 0.0813138676510699]]}, "q_name": "regex_search", "ret_exprs": ["return match.group()", "return items"], "ret_type": "", "ret_type_p": [["bool", 0.4931881048817646], ["int", 0.2965941053153287], ["str", 0.09346534128468008]], "variables": {"flags": "", "groups": "", "items": "", "match": ""}, "variables_p": {"flags": [["List[float]", 0.1163096197659011], ["List[List[Any]]", 0.1086078623574884], ["int", 0.10551969821617029], ["float", 0.08857391200211998]], "groups": [["list", 0.3119473466495637], ["float", 0.16189300957343963], ["List[Tuple[Any, Any, Any, Any]]", 0.12938722554368814], ["Dict[str, str]", 0.12138526359277624], ["Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]", 0.09852974341348127], ["List[str]", 0.08831322939903903]], "items": [["list", 0.4605812507119895]], "match": [["Pattern[str]", 0.47344459090970437], ["list", 0.4381618424903208], ["Optional[Match[str]]", 0.0883935665999748]]}}, {"docstring": {"func": "value ? true_val : false_val ", "long_descr": null, "ret": null}, "fn_lc": [[183, 0], [188, 24]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "ternary", "params": {"false_val": "", "true_val": "", "value": ""}, "params_descr": {"false_val": "", "true_val": "", "value": ""}, "params_occur": {"false_val": [], "true_val": [], "value": []}, "params_p": {"args": [], "false_val": [["str", 0.5], ["float", 0.2929556419631947], ["int", 0.20704435803680535]], "kwargs": [], "true_val": [["str", 0.5], ["float", 0.2929556419631947], ["int", 0.20704435803680535]], "value": [["str", 0.5], ["float", 0.2929556419631947], ["int", 0.20704435803680535]]}, "q_name": "ternary", "ret_exprs": ["return true_val", "return false_val"], "ret_type": "", "ret_type_p": [["bool", 0.9999999999999999]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Escape all regular expressions special characters from STRING.", "long_descr": null, "ret": null}, "fn_lc": [[192, 0], [194, 28]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "regex_escape", "params": {"string": ""}, "params_descr": {"string": ""}, "params_occur": {"string": [["re", "escape", "string"]]}, "params_p": {"args": [], "kwargs": [], "string": [["str", 0.9686328050408591], ["int", 0.03136719495914101]]}, "q_name": "regex_escape", "ret_exprs": ["return re.escape(string)"], "ret_type": "", "ret_type_p": [["str", 0.5859832143440131], ["bytes", 0.10853613441422877]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[196, 0], [199, 15]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "from_yaml", "params": {"data": ""}, "params_descr": {"data": ""}, "params_occur": {"data": [["isinstance", "data", "string_types"], ["yaml", "safe_load", "data"]]}, "params_p": {"args": [], "data": [["raiden.utils.Dict[str, raiden.utils.Any]", 0.10618652112824553]], "kwargs": []}, "q_name": "from_yaml", "ret_exprs": ["return yaml.safe_load(data)", "return data"], "ret_type": "", "ret_type_p": [["raiden.utils.signer.Signer", 0.18509430665837037], ["List[str]", 0.1338578378132701], ["bytes", 0.10769042346776078], ["raiden.utils.Dict[str, raiden.utils.Any]", 0.09315907783085799], ["dict", 0.08787011266429742]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[202, 0], [215, 92]], "fn_var_ln": {"r": [[203, 4], [203, 5]], "start": [[206, 12], [206, 17]], "step": [[208, 12], [208, 16]]}, "fn_var_occur": {"r": [["r", "SystemRandom"], ["r", "randrange", "start", "end", "step"], ["r", "choice", "end"]], "start": [["r", "randrange", "start", "end", "step"], ["start", "step"]], "step": [["r", "randrange", "start", "end", "step"], ["start", "step"]]}, "name": "rand", "params": {"end": "", "environment": "", "start": "", "step": ""}, "params_descr": {"end": "", "environment": "", "start": "", "step": ""}, "params_occur": {"end": [["isinstance", "end", "int", "long"], ["r", "randrange", "start", "end", "step"], ["hasattr", "end"], ["r", "choice", "end"]], "environment": [], "start": [["r", "randrange", "start", "end", "step"], ["start", "step"]], "step": [["r", "randrange", "start", "end", "step"], ["start", "step"]]}, "params_p": {"args": [], "end": [["int", 0.41628647651121925], ["str", 0.3981759591147551]], "environment": [["Callable", 0.999999998181712], ["Literal", 1.9750242864482942e-10], ["bool", 1.6978650155168566e-10]], "kwargs": [], "start": [["int", 0.3849520453080424], ["float", 0.18628685959456537], ["Union[int, float]", 0.12613636740285333], ["Optional[int]", 0.09378875633405451]], "step": [["int", 0.3849520453080424], ["float", 0.18628685959456537], ["Union[int, float]", 0.12613636740285333], ["Optional[int]", 0.09378875633405451]]}, "q_name": "rand", "ret_exprs": ["return r.randrange(start, end, step)", "return r.choice(end)"], "ret_type": "", "ret_type_p": [["cmk.utils.type_defs.ServiceName", 0.11502537081491952], ["cmk.utils.type_defs.HostName", 0.11502537081491952], ["int", 0.10722610294310085], ["Optional[str]", 0.09177098267678138], ["Tuple[float, float, float]", 0.09145203662364956]], "variables": {"r": "", "start": "", "step": ""}, "variables_p": {"r": [["int", 0.35449628513901554]], "start": [["int", 0.34360573974080244], ["Tuple[str, str, str, str, str, str, str]", 0.22575035021713669], ["float", 0.174799079958936], ["Tuple[int, int]", 0.08611155082330295], ["str", 0.07562532199344414]], "step": [["int", 0.17525059672598187], ["float", 0.1326922780942079], ["datetime.date", 0.12058688383730924], ["datetime.datetime.timedelta", 0.09605618817664383], ["Tuple[str, str, str, str, str]", 0.093599235949767], ["Tuple[str, str, str]", 0.093599235949767], ["tuple", 0.0873301764479899], ["Tuple[Any, Any]", 0.08652711377919238]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[217, 0], [223, 17]], "fn_var_ln": {"mylist": [[219, 8], [219, 14]]}, "fn_var_occur": {"mylist": [["mylist", "list", "mylist"], ["shuffle", "mylist"]]}, "name": "randomize_list", "params": {"mylist": ""}, "params_descr": {"mylist": ""}, "params_occur": {"mylist": [["mylist", "list", "mylist"], ["shuffle", "mylist"]]}, "params_p": {"args": [], "kwargs": [], "mylist": [["Sequence[str]", 0.1296830436587747], ["str", 0.12085462576185714], ["int", 0.11381556586562012], ["Iterable[str]", 0.10632943006707214]]}, "q_name": "randomize_list", "ret_exprs": ["return mylist"], "ret_type": "", "ret_type_p": [["List[int]", 0.2857142856433791], ["List[str]", 0.2857142856433791], ["bytes", 0.14285714282168954], ["bool", 0.14285714282168954], ["str", 1.0507664430349791e-10], ["Sequence[int]", 3.801995166130426e-11]], "variables": {"mylist": ""}, "variables_p": {"mylist": [["list", 0.9999999997392615], ["str", 1.335367663848132e-10], ["Generator[int, None, None]", 6.67683831924066e-11], ["int", 3.7344091606949074e-11], ["six.moves.range", 1.161306938978116e-11]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[225, 0], [233, 24]], "fn_var_ln": {"h": [[228, 8], [228, 9]]}, "fn_var_occur": {"h": [["h", "hashlib", "new", "hashtype"], ["h", "update", "data"], ["h", "hexdigest"]]}, "name": "get_hash", "params": {"data": "", "hashtype": ""}, "params_descr": {"data": "", "hashtype": ""}, "params_occur": {"data": [["h", "update", "data"]], "hashtype": [["h", "hashlib", "new", "hashtype"]]}, "params_p": {"args": [], "data": [["dict", 0.28093115448562933], ["bytes", 0.24246310972704582], ["Dict[str, Any]", 0.21328989380248872], ["Dict[str, str]", 0.09512977226330678], ["datetime.timedelta", 0.08330292168378822]], "hashtype": [["int", 0.30966185229572774], ["str", 0.3001060763652479], ["bool", 0.2150725543337648]], "kwargs": []}, "q_name": "get_hash", "ret_exprs": ["return None", "return h.hexdigest()"], "ret_type": "", "ret_type_p": [["Optional[str]", 0.3024659080916276], ["Union[None, List[str]]", 0.20140966685541675], ["str", 0.18961202042405956], ["Optional[Sequence[str]]", 0.09497529414007523], ["bool", 0.08572464108314737]], "variables": {"h": ""}, "variables_p": {"h": [["hashlib._Hash", 0.9999999999999999]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[235, 0], [269, 15]], "fn_var_ln": {"cls": [[263, 16], [263, 19]], "cryptmethod": [[238, 4], [238, 15]], "encrypted": [[265, 12], [265, 21]], "r": [[247, 12], [247, 13]], "salt": [[252, 12], [252, 16]], "saltsize": [[251, 16], [251, 24]], "saltstring": [[257, 12], [257, 22]]}, "fn_var_occur": {"cls": [["cls", "passlib", "hash", "bcrypt"], ["cls", "getattr", "passlib", "hash", "hashtype"], ["encrypted", "cls", "encrypt", "password", "salt", "salt"]], "cryptmethod": [["hashtype", "cryptmethod"], ["saltstring", "cryptmethod", "hashtype", "salt"]], "encrypted": [["encrypted", "crypt", "crypt", "password", "saltstring"], ["encrypted", "cls", "encrypt", "password", "salt", "salt"]], "r": [["r", "SystemRandom"], ["salt", "join", "r", "choice", "string", "ascii_letters", "string", "digits", "_", "range", "saltsize"]], "salt": [["salt", "None"], ["salt", "join", "r", "choice", "string", "ascii_letters", "string", "digits", "_", "range", "saltsize"], ["saltstring", "cryptmethod", "hashtype", "salt"], ["encrypted", "cls", "encrypt", "password", "salt", "salt"]], "saltsize": [["salt", "join", "r", "choice", "string", "ascii_letters", "string", "digits", "_", "range", "saltsize"]], "saltstring": [["saltstring", "cryptmethod", "hashtype", "salt"], ["encrypted", "crypt", "crypt", "password", "saltstring"]]}, "name": "get_encrypted_password", "params": {"hashtype": "", "password": "", "salt": ""}, "params_descr": {"hashtype": "", "password": "", "salt": ""}, "params_occur": {"hashtype": [["hashtype", "cryptmethod"], ["saltstring", "cryptmethod", "hashtype", "salt"], ["cls", "getattr", "passlib", "hash", "hashtype"]], "password": [["encrypted", "crypt", "crypt", "password", "saltstring"], ["encrypted", "cls", "encrypt", "password", "salt", "salt"]], "salt": [["salt", "None"], ["salt", "join", "r", "choice", "string", "ascii_letters", "string", "digits", "_", "range", "saltsize"], ["saltstring", "cryptmethod", "hashtype", "salt"], ["encrypted", "cls", "encrypt", "password", "salt", "salt"]]}, "params_p": {"args": [], "hashtype": [["str", 0.8278863922949748], ["int", 0.08835588655640218]], "kwargs": [], "password": [["str", 0.685004870095749], ["Optional[str]", 0.08687668023317668], ["datetime.datetime", 0.08687668023317668]], "salt": [["str", 0.6125847886359198], ["List[str]", 0.21185316833071477], ["Optional[str]", 0.17556204303336542]]}, "q_name": "get_encrypted_password", "ret_exprs": ["return encrypted", "return None"], "ret_type": "", "ret_type_p": [["Optional[int]", 0.19731372841213177], ["Optional[str]", 0.15059088868359205], ["bool", 0.11183802051678501], ["Optional[Dict]", 0.07982454037925263], ["str", 0.07700517156562776]], "variables": {"cls": "", "cryptmethod": "", "encrypted": "", "r": "", "salt": "", "saltsize": "", "saltstring": ""}, "variables_p": {"cls": [["NamedTuple", 0.12314938551700731], ["str", 0.11517688809866136], ["tuple", 0.09581101830419361], ["int", 0.09104572284038247]], "cryptmethod": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["Callable(functools.wraps)[[Named(wrapped, Callable[..., Any]), Named(assigned, Sequence[str], default), Named(updated, Sequence[str], default)], Callable[Any, Any]]", 0.1], ["str", 0.1], ["datetime.timedelta", 0.1]], "encrypted": [["list", 5.239390347924045e-11], ["Counter", 5.239390347924045e-11], ["str", 2.3785654551091856e-11]], "r": [["int", 0.21493334541704162], ["list", 0.1856539589212959], ["List[Dict[str, Any]]", 0.10695995716472499], ["dict", 0.10640764955230192], ["float", 0.09326553447429793], ["Type[List[int]]", 0.08934208534616182]], "salt": [["Type[str]", 0.7252205053527567], ["Optional[str]", 0.11281145367272268], ["Tuple[Hashable]", 0.08977088988570847]], "saltsize": [["int", 0.30620971073923187], ["Set[str]", 0.19648533664003903], ["frozenset[str]", 0.10685533106088782], ["bool", 0.1038856279910575], ["Tuple[str, str, str, str]", 0.09319344804432947], ["list", 0.08994637800099935]], "saltstring": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["Callable(functools.wraps)[[Named(wrapped, Callable[..., Any]), Named(assigned, Sequence[str], default), Named(updated, Sequence[str], default)], Callable[Any, Any]]", 0.1], ["str", 0.1], ["datetime.timedelta", 0.1]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[271, 0], [272, 63]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "to_uuid", "params": {"string": ""}, "params_descr": {"string": ""}, "params_occur": {"string": [["str", "uuid", "uuid5", "UUID_NAMESPACE_ANSIBLE", "str", "string"]]}, "params_p": {"args": [], "kwargs": [], "string": [["str", 0.8152306327379828]]}, "q_name": "to_uuid", "ret_exprs": ["return str(uuid.uuid5(UUID_NAMESPACE_ANSIBLE, str(string)))"], "ret_type": "", "ret_type_p": [["str", 0.8102488510631518], ["Tuple[Tuple[int, ...]]", 0.09930010652273476]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[274, 0], [280, 12]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "mandatory", "params": {"a": ""}, "params_descr": {"a": ""}, "params_occur": {"a": [["isinstance", "a", "Undefined"]]}, "params_p": {"a": [["int", 0.22052943365238964], ["Optional[int]", 0.11158803379438387], ["float", 0.10063690654044337], ["Tuple[float, float]", 0.08130437548221822], ["str", 0.07716201335105437]], "args": [], "kwargs": []}, "q_name": "mandatory", "ret_exprs": ["return a"], "ret_type": "", "ret_type_p": [["float", 0.1836343650498985], ["int", 0.0839623367125613]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[282, 0], [294, 60]], "fn_var_ln": {"recursive": [[283, 4], [283, 13]]}, "fn_var_occur": {"recursive": [["recursive", "kwargs", "get", "False"]]}, "name": "combine", "params": {"kwargs": "", "terms": ""}, "params_descr": {"kwargs": "", "terms": ""}, "params_occur": {"kwargs": [["recursive", "kwargs", "get", "False"], ["len", "kwargs", "len", "kwargs", "kwargs"]], "terms": [["reduce", "merge_hash", "terms"], ["dict", "itertools", "chain", "map", "iteritems", "terms"]]}, "params_p": {"args": [], "kwargs": [], "terms": [["dict", 0.31695773501286706], ["str", 0.2505859379951022]]}, "q_name": "combine", "ret_exprs": ["return reduce(merge_hash, terms)", "return dict(itertools.chain(*map(iteritems, terms)))"], "ret_type": "", "ret_type_p": [["Dict[str, Any]", 0.4163632330192377], ["List[Dict[str, Any]]", 0.11331585357438526], ["dict", 0.10244936876959451], ["Dict[str, int]", 0.08490344549490345], ["str", 0.07806936160268994]], "variables": {"recursive": ""}, "variables_p": {"recursive": [["Dict[str, str]", 0.40785691537109947], ["dict", 0.2163755879152662], ["str", 0.135603254552391], ["Type[\"ExtractableWordnet\"]", 0.08009072623286756]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[296, 0], [376, 16]], "fn_var_ln": {"comment_styles": [[298, 4], [298, 18]], "p": [[329, 4], [329, 5]], "prepostfix": [[326, 8], [326, 18]], "str_beginning": [[347, 8], [347, 21]], "str_end": [[368, 8], [368, 15]], "str_postfix": [[364, 4], [364, 15]], "str_prefix": [[354, 12], [354, 22]], "str_text": [[356, 4], [356, 12]], "style_params": [[321, 4], [321, 16]]}, "fn_var_occur": {"comment_styles": [["style_params", "comment_styles", "style"]], "p": [["p", "prepostfix", "rstrip", "prepostfix", "rstrip"], ["p", "update", "style_params"], ["p", "update", "kw"], ["str_beginning", "p", "p"], ["p", "p"], ["str_prefix", "str", "p", "p", "int", "p"], ["str_prefix", "str", "p", "int", "p"], ["str_text", "p", "text", "replace", "p", "p", "p", "replace", "p", "p", "p", "rstrip", "p"], ["str_postfix", "p", "join", "p", "x", "range", "p"], ["str_end", "p", "p"]], "prepostfix": [["prepostfix", "kw"], ["prepostfix", "style_params"], ["p", "prepostfix", "rstrip", "prepostfix", "rstrip"]], "str_beginning": [["str_beginning", "p", "p"], ["str_beginning", "str_prefix", "str_text", "str_postfix", "str_end"]], "str_end": [["str_end", "p", "p"], ["str_beginning", "str_prefix", "str_text", "str_postfix", "str_end"]], "str_postfix": [["str_postfix", "p", "join", "p", "x", "range", "p"], ["str_beginning", "str_prefix", "str_text", "str_postfix", "str_end"]], "str_prefix": [["str_prefix", "str", "p", "p", "int", "p"], ["str_prefix", "str", "p", "int", "p"], ["str_beginning", "str_prefix", "str_text", "str_postfix", "str_end"]], "str_text": [["str_text", "p", "text", "replace", "p", "p", "p", "replace", "p", "p", "p", "rstrip", "p"], ["str_beginning", "str_prefix", "str_text", "str_postfix", "str_end"]], "style_params": [["style_params", "comment_styles", "style"], ["prepostfix", "style_params"], ["p", "update", "style_params"]]}, "name": "comment", "params": {"kw": "", "style": "", "text": ""}, "params_descr": {"kw": "", "style": "", "text": ""}, "params_occur": {"kw": [["prepostfix", "kw"], ["p", "update", "kw"]], "style": [["style_params", "comment_styles", "style"]], "text": [["str_text", "p", "text", "replace", "p", "p", "p", "replace", "p", "p", "p", "rstrip", "p"]]}, "params_p": {"args": [], "kw": [["str", 0.5913155882460189], ["Dict[str, Any]", 0.12154762077879078], ["cmk.utils.type_defs.CheckPluginName.Str", 0.09373401385212284], ["dict", 0.09276482427850838]], "kwargs": [], "style": [["str", 0.9999999999999999]], "text": [["str", 1.0000000000000002]]}, "q_name": "comment", "ret_exprs": ["return \"%s%s%s%s%s\" % ( str_beginning, str_prefix, str_text, str_postfix, str_end)"], "ret_type": "", "ret_type_p": [["str", 0.9999999999999999]], "variables": {"comment_styles": "", "p": "", "prepostfix": "", "str_beginning": "", "str_end": "", "str_postfix": "", "str_prefix": "", "str_text": "", "style_params": ""}, "variables_p": {"comment_styles": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["Callable(functools.wraps)[[Named(wrapped, Callable[..., Any]), Named(assigned, Sequence[str], default), Named(updated, Sequence[str], default)], Callable[Any, Any]]", 0.1], ["str", 0.1], ["datetime.timedelta", 0.1]], "p": [["hashlib._Hash", 0.9018757759110175], ["hashlib._BlakeHash", 0.0981242240889826]], "prepostfix": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["Callable(functools.wraps)[[Named(wrapped, Callable[..., Any]), Named(assigned, Sequence[str], default), Named(updated, Sequence[str], default)], Callable[Any, Any]]", 0.1], ["str", 0.1], ["datetime.timedelta", 0.1]], "str_beginning": [["str", 0.904509594336906], ["Pattern[str]", 0.09549040566309425]], "str_end": [["str", 0.904509594336906], ["Pattern[str]", 0.09549040566309425]], "str_postfix": [["int", 0.48361096758415395], ["str", 0.20888721275232963], ["Pattern[str]", 0.1174367621657628], ["List[str]", 0.09510308358769913], ["float", 0.0949619739100544]], "str_prefix": [["str", 1.0000000000000002]], "str_text": [["str", 0.9999999999999998]], "style_params": [["hashlib._Hash", 0.9999999996271263]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[378, 0], [392, 16]], "fn_var_ln": {"morekeys": [[385, 12], [385, 20]], "value": [[390, 12], [390, 17]]}, "fn_var_occur": {"morekeys": [["value", "Undefined", "morekeys", "None"], ["isinstance", "morekeys", "list"], ["morekeys", "morekeys"], ["value", "reduce", "d", "k", "d", "k", "morekeys", "value"]], "value": [["value", "container", "item"], ["value", "Undefined", "morekeys", "None"], ["value", "reduce", "d", "k", "d", "k", "morekeys", "value"], ["value", "Undefined"]]}, "name": "extract", "params": {"container": "", "item": "", "morekeys": ""}, "params_descr": {"container": "", "item": "", "morekeys": ""}, "params_occur": {"container": [["value", "container", "item"]], "item": [["value", "container", "item"]], "morekeys": [["value", "Undefined", "morekeys", "None"], ["isinstance", "morekeys", "list"], ["morekeys", "morekeys"], ["value", "reduce", "d", "k", "d", "k", "morekeys", "value"]]}, "params_p": {"args": [], "container": [["Optional[str]", 0.1805610010479592], ["Callable[[Dict], None]", 0.12027331421864257], ["Type['Declared']", 0.09169947438008993], ["rl_algorithms.utils.config.ConfigDict", 0.08974335220908104]], "item": [["Optional[str]", 0.1805610010479592], ["Callable[[Dict], None]", 0.12027331421864257], ["Type['Declared']", 0.09169947438008993], ["rl_algorithms.utils.config.ConfigDict", 0.08974335220908104]], "kwargs": [], "morekeys": [["raiden.utils.List[raiden.utils.List[raiden.utils.Keccak256]]", 0.09798650667800478]]}, "q_name": "extract", "ret_exprs": ["return value"], "ret_type": "", "ret_type_p": [["str", 0.6063823456902878], ["int", 0.17638598532592126], ["Dict[str, Any]", 0.11379897048526452]], "variables": {"morekeys": "", "value": ""}, "variables_p": {"morekeys": [["Tuple[Type[tuple], Type[list]]", 0.7291149509867617], ["Tuple[int, int, int, int, int, int, int, int, int, int]", 0.10264332700043544]], "value": [["Optional[List]", 0.11170495622788365], ["Dict[str, Union[Any, Any, Any, Any]]", 0.10591984094662597], ["set", 0.09229346966335793], ["Union[int, str]", 0.09201745852867113]]}}, {"docstring": {"func": "Test if task result yields failed ", "long_descr": null, "ret": null}, "fn_lc": [[394, 0], [404, 20]], "fn_var_ln": {"failed": [[400, 4], [400, 10]], "item": [[396, 4], [396, 8]], "rc": [[399, 4], [399, 6]]}, "fn_var_occur": {"failed": [["failed", "item", "get", "False"], ["rc", "failed"]], "item": [["item", "a"], ["type", "item", "dict"], ["rc", "item", "get"], ["failed", "item", "get", "False"]], "rc": [["rc", "item", "get"], ["rc", "failed"]]}, "name": "failed", "params": {"a": "", "kw": ""}, "params_descr": {"a": "", "kw": ""}, "params_occur": {"a": [["item", "a"]], "kw": []}, "params_p": {"a": [["int", 1.0048253976014233e-10], ["float", 6.247903634705294e-11], ["str", 2.345274778199862e-11], ["list", 1.908482417309462e-11]], "args": [], "kw": [["List[T]", 0.19999999999999998], ["int", 0.19999999999999998], ["List[int]", 0.19999999999999998]], "kwargs": []}, "q_name": "failed", "ret_exprs": ["return True", "return False"], "ret_type": "", "ret_type_p": [["bool", 1.0]], "variables": {"failed": "", "item": "", "rc": ""}, "variables_p": {"failed": [["list", 0.2957048722049167], ["List[bool]", 0.19713658146994445], ["Dict[str, str]", 0.10571723960059094], ["dict", 0.10220111635037243], ["Tuple[str, str, str]", 0.10210360890423104], ["str", 0.09856829073497222]], "item": [["str", 0.5019524086679122], ["Dict[str, List[str]]", 0.19419661511968583], ["Dict[str, str]", 0.1915760673697467], ["Dict[str, int]", 0.11227490884265527]], "rc": [["Dict[str, str]", 0.7817115208133302]]}}, {"docstring": {"func": "Test if task result yields success ", "long_descr": null, "ret": null}, "fn_lc": [[406, 0], [408, 31]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "success", "params": {"a": "", "kw": ""}, "params_descr": {"a": "", "kw": ""}, "params_occur": {"a": [["failed", "a", "kw"]], "kw": [["failed", "a", "kw"]]}, "params_p": {"a": [["int", 0.22052943365238964], ["Optional[int]", 0.11158803379438387], ["float", 0.10063690654044337], ["Tuple[float, float]", 0.08130437548221822], ["str", 0.07716201335105437]], "args": [], "kw": [["int", 0.22052943365238964], ["Optional[int]", 0.11158803379438387], ["float", 0.10063690654044337], ["Tuple[float, float]", 0.08130437548221822], ["str", 0.07716201335105437]], "kwargs": []}, "q_name": "success", "ret_exprs": ["return not failed(*a, **kw)"], "ret_type": "", "ret_type_p": [["utils.Node", 0.09153013895190067], ["str", 0.07679331431146852], ["Tuple[str]", 0.06223663483142594], ["int", 0.05861365908388808]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Test if task result yields changed ", "long_descr": null, "ret": null}, "fn_lc": [[410, 0], [424, 18]], "fn_var_ln": {"changed": [[423, 8], [423, 15]], "item": [[412, 4], [412, 8]]}, "fn_var_occur": {"changed": [["changed", "False"], ["changed", "changed", "result", "get", "False"], ["changed", "item", "get", "False"]], "item": [["item", "a"], ["type", "item", "dict"], ["item", "type", "item", "list", "type", "item", "dict"], ["changed", "item", "get", "False"]]}, "name": "changed", "params": {"a": "", "kw": ""}, "params_descr": {"a": "", "kw": ""}, "params_occur": {"a": [["item", "a"]], "kw": []}, "params_p": {"a": [["int", 1.0048253976014233e-10], ["float", 6.247903634705294e-11], ["str", 2.345274778199862e-11], ["list", 1.908482417309462e-11]], "args": [], "kw": [["List[T]", 0.19999999999999998], ["int", 0.19999999999999998], ["List[int]", 0.19999999999999998]], "kwargs": []}, "q_name": "changed", "ret_exprs": ["return changed"], "ret_type": "", "ret_type_p": [["int", 0.30000000000000004], ["Callable", 0.2], ["str", 0.1]], "variables": {"changed": "", "item": ""}, "variables_p": {"changed": [["list", 0.4198352025514916], ["Dict[str, Union[Any, str]]", 0.18260817800096302], ["Dict[str, Union[list, str]]", 0.11050550858075871], ["Dict[str, Union[Any, Any]]", 0.09526533912719352]], "item": [["list", 0.49788667322823404], ["List[Callable[..., Any]]", 0.08992762861248565], ["List[Awaitable[Any]]", 0.08878921303310719], ["List[int]", 0.08514930939619664]]}}, {"docstring": {"func": "Test if task result yields skipped ", "long_descr": null, "ret": null}, "fn_lc": [[426, 0], [432, 18]], "fn_var_ln": {"item": [[428, 4], [428, 8]], "skipped": [[431, 4], [431, 11]]}, "fn_var_occur": {"item": [["item", "a"], ["type", "item", "dict"], ["skipped", "item", "get", "False"]], "skipped": [["skipped", "item", "get", "False"]]}, "name": "skipped", "params": {"a": "", "kw": ""}, "params_descr": {"a": "", "kw": ""}, "params_occur": {"a": [["item", "a"]], "kw": []}, "params_p": {"a": [["int", 1.0048253976014233e-10], ["float", 6.247903634705294e-11], ["str", 2.345274778199862e-11], ["list", 1.908482417309462e-11]], "args": [], "kw": [["List[T]", 0.19999999999999998], ["int", 0.19999999999999998], ["List[int]", 0.19999999999999998]], "kwargs": []}, "q_name": "skipped", "ret_exprs": ["return skipped"], "ret_type": "", "ret_type_p": [["int", 0.30000000000000004], ["Callable", 0.2], ["str", 0.1]], "variables": {"item": "", "skipped": ""}, "variables_p": {"item": [["MutableMapping[Any, Any]", 0.4098059449323195], ["Tuple[object]", 0.2688691345725166], ["Set[str]", 0.08304516175471208]], "skipped": [["Dict[str, str]", 0.43641329212521596], ["frozenset[str]", 0.09357087301671016], ["Dict[str, int]", 0.08745135470137254], ["set", 0.0805901791285507]]}}], "imports": ["__future__", "absolute_import", "division", "print_function", "sys", "base64", "itertools", "json", "os.path", "ntpath", "pipes", "glob", "re", "crypt", "hashlib", "string", "functools", "partial", "random", "SystemRandom", "shuffle", "datetime", "datetime", "uuid", "yaml", "jinja2", "filters", "environmentfilter", "passlib.hash", "ansible", "errors", "ansible", "compat", "six", "iteritems", "string_types", "ansible", "compat", "six", "moves", "reduce", "ansible", "module_utils", "_text", "to_text", "ansible", "parsing", "yaml", "dumper", "AnsibleDumper", "ansible", "utils", "hashing", "md5s", "checksum_s", "ansible", "utils", "unicode", "unicode_wrap", "ansible", "utils", "vars", "merge_hash", "ansible", "vars", "hostvars", "HostVars", "simplejson", "jinja2", "runtime", "Undefined", "jinja2", "runtime", "Undefined"], "mod_var_ln": {"HAS_PASSLIB": [[46, 4], [46, 15]], "UUID_NAMESPACE_ANSIBLE": [[59, 0], [59, 22]], "__metaclass__": [[20, 0], [20, 13]]}, "mod_var_occur": {"HAS_PASSLIB": [["HAS_PASSLIB"]], "UUID_NAMESPACE_ANSIBLE": [["str", "uuid", "uuid5", "UUID_NAMESPACE_ANSIBLE", "str", "string"]], "__metaclass__": []}, "no_types_annot": {"D": 0, "I": 0, "U": 133}, "session_id": "EsAbffQEQ0JIuen0Cu6hlBSYh8vEqg6bFpUPzdzanw8", "set": null, "tc": [false, null], "type_annot_cove": 0.0, "typed_seq": "", "untyped_seq": "", "variables": {"HAS_PASSLIB": "", "UUID_NAMESPACE_ANSIBLE": "", "__metaclass__": ""}, "variables_p": {"HAS_PASSLIB": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["Callable(functools.wraps)[[Named(wrapped, Callable[..., Any]), Named(assigned, Sequence[str], default), Named(updated, Sequence[str], default)], Callable[Any, Any]]", 0.1], ["str", 0.1], ["datetime.timedelta", 0.1]], "UUID_NAMESPACE_ANSIBLE": [["str", 0.7170895930633483], ["Pattern[str]", 0.2829104069366518]], "__metaclass__": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]]}}}