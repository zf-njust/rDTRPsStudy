{"error": null, "response": {"classes": [{"cls_lc": [[57, 0], [277, 118]], "cls_var_ln": {"allow_executable": [[68, 4], [68, 20]], "become_methods": [[63, 4], [63, 18]], "has_pipelining": [[62, 4], [62, 18]], "module_implementation_preferences": [[67, 4], [67, 37]]}, "cls_var_occur": {"allow_executable": [], "become_methods": [], "has_pipelining": [], "module_implementation_preferences": []}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[70, 4], [101, 127]], "fn_var_ln": {"_connected": [[84, 8], [84, 23]], "_display": [[78, 12], [78, 25]], "_new_stdin": [[75, 12], [75, 27]], "_play_context": [[73, 12], [73, 30]], "_shell": [[99, 8], [99, 19]], "prompt": [[83, 8], [83, 19]], "shell_filename": [[93, 12], [93, 26]], "shell_type": [[96, 20], [96, 30]], "success_key": [[82, 8], [82, 24]]}, "fn_var_occur": {"_connected": [["self", "_connected", "False"], ["self", "_connected", "False"]], "_display": [["self", "_display", "display"]], "_new_stdin": [["self", "_new_stdin", "new_stdin"]], "_play_context": [["self", "_play_context", "play_context"], ["shell_filename", "os", "path", "basename", "self", "_play_context", "executable"]], "_shell": [["self", "_shell", "shell_loader", "get", "shell_type"], ["self", "_shell"]], "prompt": [["self", "prompt", "None"]], "shell_filename": [["shell_filename", "os", "path", "basename", "self", "_play_context", "executable"], ["shell_filename", "shell", "COMPATIBLE_SHELLS"]], "shell_type": [["shell_type", "play_context", "shell"], ["shell_type", "getattr", "self"], ["shell_type", "shell", "SHELL_FAMILY"], ["self", "_shell", "shell_loader", "get", "shell_type"], ["AnsibleError", "shell_type"]], "success_key": [["self", "success_key", "None"]]}, "name": "__init__", "params": {"args": "", "kwargs": "", "new_stdin": "", "play_context": "", "self": ""}, "params_descr": {"args": "", "kwargs": "", "new_stdin": "", "play_context": "", "self": ""}, "params_occur": {"args": [], "kwargs": [], "new_stdin": [["self", "_new_stdin", "new_stdin"]], "play_context": [["self", "_play_context", "play_context"], ["play_context", "shell"], ["shell_type", "play_context", "shell"]], "self": [["hasattr", "self"], ["self", "_play_context", "play_context"], ["hasattr", "self"], ["self", "_new_stdin", "new_stdin"], ["hasattr", "self"], ["self", "_display", "display"], ["hasattr", "self"], ["self", "_connected", "False"], ["self", "success_key", "None"], ["self", "prompt", "None"], ["self", "_connected", "False"], ["hasattr", "self"], ["shell_type", "getattr", "self"], ["shell_filename", "os", "path", "basename", "self", "_play_context", "executable"], ["self", "_shell", "shell_loader", "get", "shell_type"], ["self", "_shell"]]}, "params_p": {"args": [], "kwargs": [], "new_stdin": [["int", 0.6651351982792411], ["bool", 0.09918771360445218], ["str", 0.05180228050101415]], "play_context": [["str", 0.08685633375611519], ["List[cmk.gui.plugins.visuals.utils.Filter]", 0.07762832794797435]], "self": []}, "q_name": "ConnectionBase.__init__", "ret_exprs": [], "ret_type": "", "variables": {"_connected": "", "_display": "", "_new_stdin": "", "_play_context": "", "_shell": "", "prompt": "", "shell_filename": "", "shell_type": "", "success_key": ""}, "variables_p": {"_connected": [["Type[str]", 0.42400550723982494], ["str", 0.12238546996075647], ["Dict[str, str]", 0.10795059510226741], ["List[str]", 0.07869516333928579], ["float", 0.06131207290260899]], "_display": [["str", 0.30000000000000004], ["Dict[str, Any]", 0.1], ["dict", 0.1], ["int", 0.1]], "_new_stdin": [["str", 0.514538583760812], ["list", 0.4854614162391881]], "_play_context": [["str", 0.4314514054158915], ["List[str]", 0.08289691515574121]], "_shell": [["Dict[str, str]", 0.6493069975241159], ["Dict[str, Any]", 0.11989109426842458], ["Dict[str, Union[Any, str]]", 0.11540095410372984], ["Dict[str, List[Any]]", 0.11540095410372984]], "prompt": [["\"Frame\"", 0.19999999999676038], ["str", 3.971941177518544e-12], ["Dict[str, Any]", 3.6175949269712212e-12]], "shell_filename": [["str", 1.0]], "shell_type": [["dict", 0.26511161925046556], ["Dict[str, Any]", 0.21389994254757516], ["Dict[str, object]", 0.10625245776259773], ["Dict[str, str]", 0.09810996968606647], ["str", 0.09672244884405407]], "success_key": [["str", 0.6987318167269458], ["dict", 0.1170951544871772], ["Hashable", 0.0910091318886171]]}}, {"docstring": {"func": "Read-only property holding whether the connection to the remote host is active or closed.", "long_descr": null, "ret": null}, "fn_lc": [[104, 4], [106, 30]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "connected", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "_connected"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "ConnectionBase.connected", "ret_exprs": ["return self._connected"], "ret_type": "", "ret_type_p": [["int", 0.30000000000000004], ["Callable", 0.2], ["str", 0.1]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Checks if the current class supports this privilege escalation method ", "long_descr": null, "ret": null}, "fn_lc": [[108, 4], [114, 144]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "_become_method_supported", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "_play_context", "become_method", "self", "become_methods"], ["AnsibleError", "self", "_play_context", "become_method"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "ConnectionBase._become_method_supported", "ret_exprs": ["return True"], "ret_type": "", "ret_type_p": [["bool", 0.9999999999999999]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "An optional method, which can be used to set connection plugin parameters", "long_descr": "from variables set on the host (or groups to which the host belongs)\n\nAny connection plugin using this should first initialize its attributes in\nan overridden `def __init__(self):`, and then use `host.get_vars()` to find\nvariables which may be used to set those attributes in this method.", "ret": null}, "fn_lc": [[116, 4], [125, 12]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "set_host_overrides", "params": {"host": "", "hostvars": "", "self": ""}, "params_descr": {"host": "", "hostvars": "", "self": ""}, "params_occur": {"host": [], "hostvars": [], "self": []}, "params_p": {"args": [], "host": [["int", 0.39999999999999997], ["str", 0.3], ["bool", 0.09999999999999999]], "hostvars": [["int", 0.39999999999999997], ["str", 0.3], ["bool", 0.09999999999999999]], "kwargs": [], "self": []}, "q_name": "ConnectionBase.set_host_overrides", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Takes a string like '-o Foo=1 -o Bar=\"foo bar\"' and returns a", "long_descr": "list ['-o', 'Foo=1', '-o', 'Bar=foo bar'] that can be added to\nthe argument list. The list will not contain any empty elements.", "ret": null}, "fn_lc": [[128, 4], [144, 84]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "_split_ssh_args", "params": {"argstring": ""}, "params_descr": {"argstring": ""}, "params_occur": {"argstring": [["to_text", "x", "strip", "x", "shlex", "split", "to_bytes", "argstring", "x", "strip"], ["to_text", "x", "strip", "x", "shlex", "split", "argstring", "x", "strip"]]}, "params_p": {"args": [], "argstring": [["str", 0.5071991345084286], ["List[int]", 0.49280086549157154]], "kwargs": [], "self": []}, "q_name": "ConnectionBase._split_ssh_args", "ret_exprs": ["return [to_text(x.strip()) for x in shlex.split(to_bytes(argstring)) if x.strip()]", "return [to_text(x.strip()) for x in shlex.split(argstring) if x.strip()]"], "ret_type": "", "ret_type_p": [["List[str]", 0.31152517910217514], ["Set[str]", 0.1028828784501242], ["List[Dict[str, Any]]", 0.09785860208704995], ["List[List[int]]", 0.09785860208704995], ["FrozenSet[str]", 0.09757659198458221]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "String used to identify this Connection class from other classes", "long_descr": null, "ret": null}, "fn_lc": [[147, 4], [149, 12]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "transport", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "ConnectionBase.transport", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Connect to the host we've been initialized with", "long_descr": null, "ret": null}, "fn_lc": [[152, 4], [157, 43]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "_connect", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "_play_context", "become"], ["self", "_become_method_supported"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "ConnectionBase._connect", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Run a command on the remote host.", "long_descr": null, "ret": "a tuple of (return code, stdout, stderr)  The return code is\nan int while stdout and stderr are both byte strings.\n\nWhen a command is executed, it goes through multiple commands to get\nthere.  It looks approximately like this::\n\n    [LocalShell] ConnectionCommand [UsersLoginShell (*)] ANSIBLE_SHELL_EXECUTABLE [(BecomeCommand ANSIBLE_SHELL_EXECUTABLE)] Command"}, "fn_lc": [[161, 4], [225, 12]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "exec_command", "params": {"cmd": "", "in_data": "", "self": "", "sudoable": ""}, "params_descr": {"cmd": "byte string containing the command", "in_data": "", "self": "", "sudoable": ""}, "params_occur": {"cmd": [], "in_data": [], "self": [], "sudoable": []}, "params_p": {"args": [], "cmd": [["Callable", 0.11590004446510115], ["bool", 0.09008373451323902], ["Optional[Any]", 0.08977074699011578]], "in_data": [["Callable", 0.11590004446510115], ["bool", 0.09008373451323902], ["Optional[Any]", 0.08977074699011578]], "kwargs": [], "self": [], "sudoable": [["Callable", 0.11590004446510115], ["bool", 0.09008373451323902], ["Optional[Any]", 0.08977074699011578]]}, "q_name": "ConnectionBase.exec_command", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Transfer a file from local to remote", "long_descr": null, "ret": null}, "fn_lc": [[229, 4], [231, 12]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "put_file", "params": {"in_path": "", "out_path": "", "self": ""}, "params_descr": {"in_path": "", "out_path": "", "self": ""}, "params_occur": {"in_path": [], "out_path": [], "self": []}, "params_p": {"args": [], "in_path": [["str", 0.352365353795308], ["List[str]", 0.14762833840292214], ["int", 0.08825437578386387], ["bool", 0.08616758303222198]], "kwargs": [], "out_path": [["str", 0.352365353795308], ["List[str]", 0.14762833840292214], ["int", 0.08825437578386387], ["bool", 0.08616758303222198]], "self": []}, "q_name": "ConnectionBase.put_file", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Fetch a file from remote to local", "long_descr": null, "ret": null}, "fn_lc": [[235, 4], [237, 12]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "fetch_file", "params": {"in_path": "", "out_path": "", "self": ""}, "params_descr": {"in_path": "", "out_path": "", "self": ""}, "params_occur": {"in_path": [], "out_path": [], "self": []}, "params_p": {"args": [], "in_path": [["str", 0.5067186396080008], ["bool", 0.17196860701376931]], "kwargs": [], "out_path": [["str", 0.5067186396080008], ["bool", 0.17196860701376931]], "self": []}, "q_name": "ConnectionBase.fetch_file", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Terminate the connection", "long_descr": null, "ret": null}, "fn_lc": [[240, 4], [242, 12]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "close", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "ConnectionBase.close", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[244, 4], [249, 20]], "fn_var_ln": {"b_success_key": [[245, 8], [245, 21]]}, "fn_var_occur": {"b_success_key": [["b_success_key", "to_bytes", "self", "_play_context", "success_key"], ["b_success_key", "b_line", "rstrip"]]}, "name": "check_become_success", "params": {"b_output": "", "self": ""}, "params_descr": {"b_output": "", "self": ""}, "params_occur": {"b_output": [["b_output", "splitlines", "True"]], "self": [["b_success_key", "to_bytes", "self", "_play_context", "success_key"]]}, "params_p": {"args": [], "b_output": [["bool", 0.21307483719833645], ["str", 0.18716095796864313], ["Dict[str, str]", 0.0935228838463421], ["List[str]", 0.09082856831746651]], "kwargs": [], "self": []}, "q_name": "ConnectionBase.check_become_success", "ret_exprs": ["return True", "return False"], "ret_type": "", "ret_type_p": [["bool", 1.0]], "variables": {"b_success_key": ""}, "variables_p": {"b_success_key": [["bytes", 0.6977011375986983], ["str", 0.10115564179508833]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[251, 4], [258, 54]], "fn_var_ln": {"b_prompt": [[255, 12], [255, 20]]}, "fn_var_occur": {"b_prompt": [["b_prompt", "to_bytes", "self", "_play_context", "prompt"], ["b_output", "startswith", "b_prompt"]]}, "name": "check_password_prompt", "params": {"b_output": "", "self": ""}, "params_descr": {"b_output": "", "self": ""}, "params_occur": {"b_output": [["b_output", "startswith", "b_prompt"], ["self", "_play_context", "prompt", "b_output"]], "self": [["self", "_play_context", "prompt", "None"], ["isinstance", "self", "_play_context", "prompt", "string_types"], ["b_prompt", "to_bytes", "self", "_play_context", "prompt"], ["self", "_play_context", "prompt", "b_output"]]}, "params_p": {"args": [], "b_output": [["str", 1.0]], "kwargs": [], "self": []}, "q_name": "ConnectionBase.check_password_prompt", "ret_exprs": ["return False", "return b_output.startswith(b_prompt)", "return self._play_context.prompt(b_output)"], "ret_type": "", "ret_type_p": [["str", 0.6901980360105098], ["bool", 0.21381712889106577]], "variables": {"b_prompt": ""}, "variables_p": {"b_prompt": [["bytes", 0.7833774393878996], ["Counter[str]", 0.08460691216946763]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[260, 4], [262, 72]], "fn_var_ln": {"b_incorrect_password": [[261, 8], [261, 28]]}, "fn_var_occur": {"b_incorrect_password": [["b_incorrect_password", "to_bytes", "gettext", "dgettext", "self", "_play_context", "become_method", "C", "BECOME_ERROR_STRINGS", "self", "_play_context", "become_method"], ["b_incorrect_password", "b_incorrect_password", "b_output"]]}, "name": "check_incorrect_password", "params": {"b_output": "", "self": ""}, "params_descr": {"b_output": "", "self": ""}, "params_occur": {"b_output": [["b_incorrect_password", "b_incorrect_password", "b_output"]], "self": [["b_incorrect_password", "to_bytes", "gettext", "dgettext", "self", "_play_context", "become_method", "C", "BECOME_ERROR_STRINGS", "self", "_play_context", "become_method"]]}, "params_p": {"args": [], "b_output": [["bool", 0.4244105518017419], ["TextIO", 0.10176812561551254], ["int", 0.09925615462167171], ["str", 0.0888490957271846], ["Union[utils.CWLObjectType, List[utils.CWLObjectType]]", 0.08418194568628803]], "kwargs": [], "self": []}, "q_name": "ConnectionBase.check_incorrect_password", "ret_exprs": ["return b_incorrect_password and b_incorrect_password in b_output"], "ret_type": "", "ret_type_p": [["str", 0.36451711086326516]], "variables": {"b_incorrect_password": ""}, "variables_p": {"b_incorrect_password": [["bytes", 0.3009680911967245], ["str", 0.29004172841596754], ["int", 0.11054617511142792], ["bool", 0.10598315061430442]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[264, 4], [266, 68]], "fn_var_ln": {"b_missing_password": [[265, 8], [265, 26]]}, "fn_var_occur": {"b_missing_password": [["b_missing_password", "to_bytes", "gettext", "dgettext", "self", "_play_context", "become_method", "C", "BECOME_MISSING_STRINGS", "self", "_play_context", "become_method"], ["b_missing_password", "b_missing_password", "b_output"]]}, "name": "check_missing_password", "params": {"b_output": "", "self": ""}, "params_descr": {"b_output": "", "self": ""}, "params_occur": {"b_output": [["b_missing_password", "b_missing_password", "b_output"]], "self": [["b_missing_password", "to_bytes", "gettext", "dgettext", "self", "_play_context", "become_method", "C", "BECOME_MISSING_STRINGS", "self", "_play_context", "become_method"]]}, "params_p": {"args": [], "b_output": [["bool", 0.4244105518017419], ["TextIO", 0.10176812561551254], ["int", 0.09925615462167171], ["str", 0.0888490957271846], ["Union[utils.CWLObjectType, List[utils.CWLObjectType]]", 0.08418194568628803]], "kwargs": [], "self": []}, "q_name": "ConnectionBase.check_missing_password", "ret_exprs": ["return b_missing_password and b_missing_password in b_output"], "ret_type": "", "ret_type_p": [["str", 0.36451711086326516]], "variables": {"b_missing_password": ""}, "variables_p": {"b_missing_password": [["bytes", 0.4202498488083804], ["int", 0.19948767967005793], ["str", 0.10065993297043797], ["bool", 0.09533009815533912]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[268, 4], [272, 118]], "fn_var_ln": {"f": [[269, 8], [269, 9]]}, "fn_var_occur": {"f": [["f", "self", "_play_context", "connection_lockfd"], ["display", "vvvv", "os", "getpid", "f", "host", "self", "_play_context", "remote_addr"], ["fcntl", "lockf", "f", "fcntl", "LOCK_EX"], ["display", "vvvv", "os", "getpid", "f", "host", "self", "_play_context", "remote_addr"]]}, "name": "connection_lock", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["f", "self", "_play_context", "connection_lockfd"], ["display", "vvvv", "os", "getpid", "f", "host", "self", "_play_context", "remote_addr"], ["display", "vvvv", "os", "getpid", "f", "host", "self", "_play_context", "remote_addr"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "ConnectionBase.connection_lock", "ret_exprs": [], "ret_type": "", "variables": {"f": ""}, "variables_p": {"f": [["pytch.utils.Range", 0.11058149205352939], ["dict", 0.08881024930072075], ["float", 0.08713487234692542]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[274, 4], [277, 118]], "fn_var_ln": {"f": [[275, 8], [275, 9]]}, "fn_var_occur": {"f": [["f", "self", "_play_context", "connection_lockfd"], ["fcntl", "lockf", "f", "fcntl", "LOCK_UN"], ["display", "vvvv", "os", "getpid", "f", "host", "self", "_play_context", "remote_addr"]]}, "name": "connection_unlock", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["f", "self", "_play_context", "connection_lockfd"], ["display", "vvvv", "os", "getpid", "f", "host", "self", "_play_context", "remote_addr"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "ConnectionBase.connection_unlock", "ret_exprs": [], "ret_type": "", "variables": {"f": ""}, "variables_p": {"f": [["dict", 0.10054899157527677], ["float", 0.0875132645123928]]}}], "name": "ConnectionBase", "q_name": "ConnectionBase", "variables": {"allow_executable": "", "become_methods": "", "has_pipelining": "", "module_implementation_preferences": ""}, "variables_p": {"allow_executable": [["List[str]", 0.6], ["bool", 0.19999999999999998], ["int", 0.09999999999999999], ["Optional[Set[str]]", 0.09999999999999999]], "become_methods": [["List[str]", 0.19999999999999998], ["int", 0.09999999999999999], ["Final", 0.09999999999999999], ["Tuple[str, str, str, str]", 0.09999999999999999], ["Dict[str, str]", 0.09999999999999999], ["Tuple[str]", 0.09999999999999999], ["staticmethod", 0.09999999999999999], ["FrozenSet[str]", 0.09999999999999999]], "has_pipelining": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "module_implementation_preferences": [["str", 0.6000000000000001], ["property", 0.20000000000000004], ["list", 0.10000000000000002]]}}], "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[51, 4], [53, 42]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "wrapped", "params": {"args": "", "kwargs": "", "self": ""}, "params_descr": {"args": "", "kwargs": "", "self": ""}, "params_occur": {"args": [["func", "self", "args", "kwargs"]], "kwargs": [["func", "self", "args", "kwargs"]], "self": [["self", "_connect"], ["func", "self", "args", "kwargs"]]}, "params_p": {"args": [], "kwargs": [], "self": [["Optional[BaseException]", 0.22716771098395036], ["Callable", 0.20811784408623513], ["str", 0.18754588431162153], ["bool", 0.09093777313271831], ["Exception", 0.08964105729635613]]}, "q_name": "ensure_connect.<locals>.wrapped", "ret_exprs": ["return func(self, *args, **kwargs)"], "ret_type": "", "ret_type_p": [["int", 0.20966626685093354], ["str", 0.20473413732775222]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[49, 0], [54, 18]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "ensure_connect", "params": {"func": ""}, "params_descr": {"func": ""}, "params_occur": {"func": []}, "params_p": {"args": [], "func": [["Callable", 0.6], ["Callable[..., None]", 0.09999999999999999]], "kwargs": []}, "q_name": "ensure_connect", "ret_exprs": ["return wrapped"], "ret_type": "", "ret_type_p": [["int", 0.30000000000000004], ["Callable", 0.2], ["str", 0.1]], "variables": {}, "variables_p": {}}], "imports": ["__future__", "absolute_import", "division", "print_function", "fcntl", "gettext", "os", "shlex", "abc", "ABCMeta", "abstractmethod", "abstractproperty", "functools", "wraps", "ansible", "compat", "six", "with_metaclass", "ansible", "constants", "C", "ansible", "compat", "six", "string_types", "ansible", "errors", "AnsibleError", "ansible", "module_utils", "_text", "to_bytes", "to_text", "ansible", "plugins", "shell_loader", "__main__", "display", "ansible", "utils", "display", "Display"], "mod_var_ln": {"BUFSIZE": [[46, 0], [46, 7]], "__all__": [[44, 0], [44, 7]], "__metaclass__": [[20, 0], [20, 13]], "display": [[42, 4], [42, 11]]}, "mod_var_occur": {"BUFSIZE": [], "__all__": [], "__metaclass__": [], "display": [["self", "_display", "display"], ["display", "vvvv", "os", "getpid", "f", "host", "self", "_play_context", "remote_addr"], ["display", "vvvv", "os", "getpid", "f", "host", "self", "_play_context", "remote_addr"], ["display", "vvvv", "os", "getpid", "f", "host", "self", "_play_context", "remote_addr"]]}, "no_types_annot": {"D": 0, "I": 0, "U": 63}, "session_id": "OXvgzXXeHSizuYVuMRucKyfKuAZ4B0bfRwDAQv2eVQI", "set": null, "tc": [false, null], "type_annot_cove": 0.0, "typed_seq": "", "untyped_seq": "", "variables": {"BUFSIZE": "", "__all__": "", "__metaclass__": "", "display": ""}, "variables_p": {"BUFSIZE": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "__all__": [["List[str]", 0.7999999999999999], ["Tuple[str]", 0.09999999999999999], ["Tuple[str, str, str]", 0.09999999999999999]], "__metaclass__": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "display": [["int", 0.19455105285438953], ["TextIO", 0.1028987906482686], ["float", 0.09091421558059042]]}}}