{"error": null, "response": {"classes": [{"cls_lc": [[216, 8], [217, 16]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [], "name": "LinuxTest", "q_name": "TestModuleUtilsBasic.test_module_utils_basic_load_platform_subclass.<locals>.LinuxTest", "variables": {}, "variables_p": {}}, {"cls_lc": [[219, 8], [221, 31]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [], "name": "Foo", "q_name": "TestModuleUtilsBasic.test_module_utils_basic_load_platform_subclass.<locals>.Foo", "variables": {}, "variables_p": {}}, {"cls_lc": [[223, 8], [225, 32]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [], "name": "Bar", "q_name": "TestModuleUtilsBasic.test_module_utils_basic_load_platform_subclass.<locals>.Bar", "variables": {}, "variables_p": {}}, {"cls_lc": [[42, 0], [1036, 85]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[44, 4], [47, 36]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "clear_modules", "params": {"mods": "", "self": ""}, "params_descr": {"mods": "", "self": ""}, "params_occur": {"mods": [], "self": []}, "params_p": {"args": [], "kwargs": [], "mods": [["str", 0.9999999923840774], ["List[Dict[str, Any]]", 1.4022760818969182e-09], ["bool", 6.483938001554936e-10]], "self": []}, "q_name": "TestModuleUtilsBasic.clear_modules", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[51, 8], [54, 52]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "_mock_import", "params": {"args": "", "kwargs": "", "name": ""}, "params_descr": {"args": "", "kwargs": "", "name": ""}, "params_occur": {"args": [["realimport", "name", "args", "kwargs"]], "kwargs": [["realimport", "name", "args", "kwargs"]], "name": [["realimport", "name", "args", "kwargs"]]}, "params_p": {"args": [], "kwargs": [], "name": [["str", 0.9999999999999999]], "self": []}, "q_name": "TestModuleUtilsBasic.test_module_utils_basic_import_syslog.<locals>._mock_import", "ret_exprs": ["return realimport(name, *args, **kwargs)"], "ret_type": "", "ret_type_p": [["str", 0.45436329340362164], ["bool", 0.3705395238821433]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[50, 4], [63, 59]], "fn_var_ln": {"mod": [[62, 8], [62, 11]], "side_effect": [[61, 8], [61, 31]]}, "fn_var_occur": {"mod": [["mod", "builtins", "__import__"], ["self", "assertTrue", "mod", "module_utils", "basic", "HAS_SYSLOG"], ["mod", "builtins", "__import__"], ["self", "assertFalse", "mod", "module_utils", "basic", "HAS_SYSLOG"]], "side_effect": [["mock_import", "side_effect", "_mock_import"]]}, "name": "test_module_utils_basic_import_syslog", "params": {"mock_import": "", "self": ""}, "params_descr": {"mock_import": "", "self": ""}, "params_occur": {"mock_import": [["mock_import", "side_effect", "_mock_import"]], "self": [["self", "clear_modules"], ["self", "assertTrue", "mod", "module_utils", "basic", "HAS_SYSLOG"], ["self", "clear_modules"], ["self", "assertFalse", "mod", "module_utils", "basic", "HAS_SYSLOG"]]}, "params_p": {"args": [], "kwargs": [], "mock_import": [["unittesmock.MagicMock", 0.6048162627536311], ["unittesmock.Mock", 0.3007211979307668], ["mock.MagicMock", 0.094462539315602]], "self": []}, "q_name": "TestModuleUtilsBasic.test_module_utils_basic_import_syslog", "ret_exprs": [], "ret_type": "", "variables": {"mod": "", "side_effect": ""}, "variables_p": {"mod": [["bytearray", 0.5489267947010774], ["memoryview", 0.3615973148012839], ["slice", 0.08947589049763882]], "side_effect": [["str", 0.5550841291921359], ["property", 0.14130392126924907], ["list", 0.06947490790529882], ["alibi.tests.utils.MockPredictor", 0.04616735948346832], ["List[Dict[str, str]]", 0.043474045434524856], ["unittesmock.Mock", 0.04188998930131028]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[67, 8], [70, 52]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "_mock_import", "params": {"args": "", "kwargs": "", "name": ""}, "params_descr": {"args": "", "kwargs": "", "name": ""}, "params_occur": {"args": [["realimport", "name", "args", "kwargs"]], "kwargs": [["realimport", "name", "args", "kwargs"]], "name": [["realimport", "name", "args", "kwargs"]]}, "params_p": {"args": [], "kwargs": [], "name": [["str", 0.9999999999999999]], "self": []}, "q_name": "TestModuleUtilsBasic.test_module_utils_basic_import_selinux.<locals>._mock_import", "ret_exprs": ["return realimport(name, *args, **kwargs)"], "ret_type": "", "ret_type_p": [["str", 0.45436329340362164], ["bool", 0.3705395238821433]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[66, 4], [83, 61]], "fn_var_ln": {"mod": [[82, 8], [82, 11]], "side_effect": [[81, 8], [81, 31]]}, "fn_var_occur": {"mod": [["mod", "builtins", "__import__"], ["self", "assertTrue", "mod", "module_utils", "basic", "HAVE_SELINUX"], ["mod", "builtins", "__import__"], ["self", "assertFalse", "mod", "module_utils", "basic", "HAVE_SELINUX"]], "side_effect": [["mock_import", "side_effect", "_mock_import"]]}, "name": "test_module_utils_basic_import_selinux", "params": {"mock_import": "", "self": ""}, "params_descr": {"mock_import": "", "self": ""}, "params_occur": {"mock_import": [["mock_import", "side_effect", "_mock_import"]], "self": [["self", "clear_modules"], ["self", "assertTrue", "mod", "module_utils", "basic", "HAVE_SELINUX"], ["self", "clear_modules"], ["self", "assertFalse", "mod", "module_utils", "basic", "HAVE_SELINUX"]]}, "params_p": {"args": [], "kwargs": [], "mock_import": [["unittesmock.MagicMock", 0.6048162627536311], ["unittesmock.Mock", 0.3007211979307668], ["mock.MagicMock", 0.094462539315602]], "self": []}, "q_name": "TestModuleUtilsBasic.test_module_utils_basic_import_selinux", "ret_exprs": [], "ret_type": "", "variables": {"mod": "", "side_effect": ""}, "variables_p": {"mod": [["bytearray", 0.5489267947010774], ["memoryview", 0.3615973148012839], ["slice", 0.08947589049763882]], "side_effect": [["str", 0.5550841291921359], ["property", 0.14130392126924907], ["list", 0.06947490790529882], ["alibi.tests.utils.MockPredictor", 0.04616735948346832], ["List[Dict[str, str]]", 0.043474045434524856], ["unittesmock.Mock", 0.04188998930131028]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[87, 8], [92, 52]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "_mock_import", "params": {"args": "", "kwargs": "", "name": ""}, "params_descr": {"args": "", "kwargs": "", "name": ""}, "params_occur": {"args": [["realimport", "name", "args", "kwargs"]], "kwargs": [["realimport", "name", "args", "kwargs"]], "name": [["realimport", "name", "args", "kwargs"]]}, "params_p": {"args": [], "kwargs": [], "name": [["str", 0.9999999999999999]], "self": []}, "q_name": "TestModuleUtilsBasic.test_module_utils_basic_import_json.<locals>._mock_import", "ret_exprs": ["return MagicMock()", "return realimport(name, *args, **kwargs)"], "ret_type": "", "ret_type_p": [["str", 1.0]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[86, 4], [99, 63]], "fn_var_ln": {"mod": [[99, 8], [99, 11]], "side_effect": [[98, 8], [98, 31]]}, "fn_var_occur": {"mod": [["mod", "builtins", "__import__"], ["mod", "builtins", "__import__"]], "side_effect": [["mock_import", "side_effect", "_mock_import"]]}, "name": "test_module_utils_basic_import_json", "params": {"mock_import": "", "self": ""}, "params_descr": {"mock_import": "", "self": ""}, "params_occur": {"mock_import": [["mock_import", "side_effect", "_mock_import"]], "self": [["self", "clear_modules"], ["self", "clear_modules"]]}, "params_p": {"args": [], "kwargs": [], "mock_import": [["unittesmock.MagicMock", 0.6048162627536311], ["unittesmock.Mock", 0.3007211979307668], ["mock.MagicMock", 0.094462539315602]], "self": []}, "q_name": "TestModuleUtilsBasic.test_module_utils_basic_import_json", "ret_exprs": [], "ret_type": "", "variables": {"mod": "", "side_effect": ""}, "variables_p": {"mod": [["slice", 0.35869844182594735], ["bytearray", 0.34395169265401426], ["complex", 0.07579867202925429], ["oct", 0.07539446667583705], ["str", 0.0730783634074735], ["int", 0.0730783634074735]], "side_effect": [["str", 0.5550841291921359], ["property", 0.14130392126924907], ["list", 0.06947490790529882], ["alibi.tests.utils.MockPredictor", 0.04616735948346832], ["List[Dict[str, str]]", 0.043474045434524856], ["unittesmock.Mock", 0.04188998930131028]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[110, 8], [117, 52]], "fn_var_ln": {"fromlist": [[114, 16], [114, 24]]}, "fn_var_occur": {"fromlist": [["fromlist", "kwargs", "get", "args"], ["name", "fromlist"]]}, "name": "_mock_import", "params": {"args": "", "kwargs": "", "name": ""}, "params_descr": {"args": "", "kwargs": "", "name": ""}, "params_occur": {"args": [["fromlist", "kwargs", "get", "args"], ["realimport", "name", "args", "kwargs"]], "kwargs": [["fromlist", "kwargs", "get", "args"], ["realimport", "name", "args", "kwargs"]], "name": [["name", "fromlist"], ["realimport", "name", "args", "kwargs"]]}, "params_p": {"args": [], "kwargs": [], "name": [["str", 0.9999999999999999]], "self": []}, "q_name": "TestModuleUtilsBasic.test_module_utils_basic_import_literal_eval.<locals>._mock_import", "ret_exprs": ["return realimport(name, *args, **kwargs)"], "ret_type": "", "ret_type_p": [["str", 0.45436329340362164], ["bool", 0.3705395238821433]], "variables": {"fromlist": ""}, "variables_p": {"fromlist": [["Tuple[Any, Any, Any]", 0.10664515154511085], ["Dict[str, Any]", 0.0990296603805222], ["str", 0.09424360999362735]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[109, 4], [131, 90]], "fn_var_ln": {"mod": [[121, 8], [121, 11]], "side_effect": [[119, 8], [119, 31]]}, "fn_var_occur": {"mod": [["mod", "builtins", "__import__"], ["self", "assertEqual", "mod", "module_utils", "basic", "literal_eval"], ["self", "assertEqual", "mod", "module_utils", "basic", "literal_eval"], ["self", "assertEqual", "mod", "module_utils", "basic", "literal_eval"], ["self", "assertEqual", "mod", "module_utils", "basic", "literal_eval"], ["self", "assertEqual", "mod", "module_utils", "basic", "literal_eval"], ["self", "assertEqual", "mod", "module_utils", "basic", "literal_eval", "True"], ["self", "assertEqual", "mod", "module_utils", "basic", "literal_eval", "False"], ["self", "assertEqual", "mod", "module_utils", "basic", "literal_eval", "None"], ["self", "assertRaises", "ValueError", "mod", "module_utils", "basic", "literal_eval"]], "side_effect": [["mock_import", "side_effect", "_mock_import"]]}, "name": "test_module_utils_basic_import_literal_eval", "params": {"mock_import": "", "self": ""}, "params_descr": {"mock_import": "", "self": ""}, "params_occur": {"mock_import": [["mock_import", "side_effect", "_mock_import"]], "self": [["self", "clear_modules"], ["self", "assertEqual", "mod", "module_utils", "basic", "literal_eval"], ["self", "assertEqual", "mod", "module_utils", "basic", "literal_eval"], ["self", "assertEqual", "mod", "module_utils", "basic", "literal_eval"], ["self", "assertEqual", "mod", "module_utils", "basic", "literal_eval"], ["self", "assertEqual", "mod", "module_utils", "basic", "literal_eval"], ["self", "assertEqual", "mod", "module_utils", "basic", "literal_eval", "True"], ["self", "assertEqual", "mod", "module_utils", "basic", "literal_eval", "False"], ["self", "assertEqual", "mod", "module_utils", "basic", "literal_eval", "None"], ["self", "assertRaises", "ValueError", "mod", "module_utils", "basic", "literal_eval"]]}, "params_p": {"args": [], "kwargs": [], "mock_import": [["unittesmock.MagicMock", 0.4732825184223275], ["unittesmock.Mock", 0.4264874965273895], ["mock.MagicMock", 0.10022998505028304]], "self": []}, "q_name": "TestModuleUtilsBasic.test_module_utils_basic_import_literal_eval", "ret_exprs": [], "ret_type": "", "variables": {"mod": "", "side_effect": ""}, "variables_p": {"mod": [["bytearray", 0.46451284446065527], ["memoryview", 0.45409082234938974], ["slice", 0.08139633318995507]], "side_effect": [["str", 0.5550841291921359], ["property", 0.14130392126924907], ["list", 0.06947490790529882], ["alibi.tests.utils.MockPredictor", 0.04616735948346832], ["List[Dict[str, str]]", 0.043474045434524856], ["unittesmock.Mock", 0.04188998930131028]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[135, 8], [142, 52]], "fn_var_ln": {"fromlist": [[139, 16], [139, 24]]}, "fn_var_occur": {"fromlist": [["fromlist", "kwargs", "get", "args"], ["name", "fromlist"]]}, "name": "_mock_import", "params": {"args": "", "kwargs": "", "name": ""}, "params_descr": {"args": "", "kwargs": "", "name": ""}, "params_occur": {"args": [["fromlist", "kwargs", "get", "args"], ["realimport", "name", "args", "kwargs"]], "kwargs": [["fromlist", "kwargs", "get", "args"], ["realimport", "name", "args", "kwargs"]], "name": [["name", "fromlist"], ["realimport", "name", "args", "kwargs"]]}, "params_p": {"args": [], "kwargs": [], "name": [["str", 0.9999999999999999]], "self": []}, "q_name": "TestModuleUtilsBasic.test_module_utils_basic_import_systemd_journal.<locals>._mock_import", "ret_exprs": ["return realimport(name, *args, **kwargs)"], "ret_type": "", "ret_type_p": [["str", 0.45436329340362164], ["bool", 0.3705395238821433]], "variables": {"fromlist": ""}, "variables_p": {"fromlist": [["Tuple[Any, Any, Any]", 0.10664515154511085], ["Dict[str, Any]", 0.0990296603805222], ["str", 0.09424360999362735]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[134, 4], [151, 60]], "fn_var_ln": {"mod": [[150, 8], [150, 11]], "side_effect": [[149, 8], [149, 31]]}, "fn_var_occur": {"mod": [["mod", "builtins", "__import__"], ["self", "assertTrue", "mod", "module_utils", "basic", "has_journal"], ["mod", "builtins", "__import__"], ["self", "assertFalse", "mod", "module_utils", "basic", "has_journal"]], "side_effect": [["mock_import", "side_effect", "_mock_import"]]}, "name": "test_module_utils_basic_import_systemd_journal", "params": {"mock_import": "", "self": ""}, "params_descr": {"mock_import": "", "self": ""}, "params_occur": {"mock_import": [["mock_import", "side_effect", "_mock_import"]], "self": [["self", "clear_modules"], ["self", "assertTrue", "mod", "module_utils", "basic", "has_journal"], ["self", "clear_modules"], ["self", "assertFalse", "mod", "module_utils", "basic", "has_journal"]]}, "params_p": {"args": [], "kwargs": [], "mock_import": [["unittesmock.MagicMock", 0.6048162627536311], ["unittesmock.Mock", 0.3007211979307668], ["mock.MagicMock", 0.094462539315602]], "self": []}, "q_name": "TestModuleUtilsBasic.test_module_utils_basic_import_systemd_journal", "ret_exprs": [], "ret_type": "", "variables": {"mod": "", "side_effect": ""}, "variables_p": {"mod": [["bytearray", 0.5489267947010774], ["memoryview", 0.3615973148012839], ["slice", 0.08947589049763882]], "side_effect": [["str", 0.5550841291921359], ["property", 0.14130392126924907], ["list", 0.06947490790529882], ["alibi.tests.utils.MockPredictor", 0.04616735948346832], ["List[Dict[str, str]]", 0.043474045434524856], ["unittesmock.Mock", 0.04188998930131028]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[153, 4], [156, 51]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_module_utils_basic_get_platform", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "get_platform"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestModuleUtilsBasic.test_module_utils_basic_get_platform", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[178, 16], [182, 43]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "_dist", "params": {"distname": "", "full_distribution_name": "", "id": "", "supported_dists": "", "version": ""}, "params_descr": {"distname": "", "full_distribution_name": "", "id": "", "supported_dists": "", "version": ""}, "params_occur": {"distname": [], "full_distribution_name": [], "id": [], "supported_dists": [], "version": []}, "params_p": {"args": [], "distname": [["Optional[str]", 0.23248436853280605], ["Optional[Tuple]", 0.15960356835311063], ["bool", 0.1009821979301385], ["List[str]", 0.07980178417655531], ["int", 0.0784015282081804]], "full_distribution_name": [["Optional[str]", 0.23248436853280605], ["Optional[Tuple]", 0.15960356835311063], ["bool", 0.1009821979301385], ["List[str]", 0.07980178417655531], ["int", 0.0784015282081804]], "id": [["Optional[str]", 0.23248436853280605], ["Optional[Tuple]", 0.15960356835311063], ["bool", 0.1009821979301385], ["List[str]", 0.07980178417655531], ["int", 0.0784015282081804]], "kwargs": [], "self": [], "supported_dists": [["Optional[str]", 0.23248436853280605], ["Optional[Tuple]", 0.15960356835311063], ["bool", 0.1009821979301385], ["List[str]", 0.07980178417655531], ["int", 0.0784015282081804]], "version": [["Optional[str]", 0.23248436853280605], ["Optional[Tuple]", 0.15960356835311063], ["bool", 0.1009821979301385], ["List[str]", 0.07980178417655531], ["int", 0.0784015282081804]]}, "q_name": "TestModuleUtilsBasic.test_module_utils_basic_get_distribution.<locals>._dist", "ret_exprs": ["return (\"Bar\", \"2\", \"Two\")", "return (\"\", \"\", \"\")"], "ret_type": "", "ret_type_p": [["int", 0.30000000000000004], ["Callable", 0.2], ["str", 0.1]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[158, 4], [189, 63]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_module_utils_basic_get_distribution", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "get_distribution"], ["self", "assertEqual", "get_distribution"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestModuleUtilsBasic.test_module_utils_basic_get_distribution", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[202, 16], [206, 43]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "_dist", "params": {"distname": "", "full_distribution_name": "", "id": "", "supported_dists": "", "version": ""}, "params_descr": {"distname": "", "full_distribution_name": "", "id": "", "supported_dists": "", "version": ""}, "params_occur": {"distname": [], "full_distribution_name": [], "id": [], "supported_dists": [], "version": []}, "params_p": {"args": [], "distname": [["Optional[str]", 0.23248436853280605], ["Optional[Tuple]", 0.15960356835311063], ["bool", 0.1009821979301385], ["List[str]", 0.07980178417655531], ["int", 0.0784015282081804]], "full_distribution_name": [["Optional[str]", 0.23248436853280605], ["Optional[Tuple]", 0.15960356835311063], ["bool", 0.1009821979301385], ["List[str]", 0.07980178417655531], ["int", 0.0784015282081804]], "id": [["Optional[str]", 0.23248436853280605], ["Optional[Tuple]", 0.15960356835311063], ["bool", 0.1009821979301385], ["List[str]", 0.07980178417655531], ["int", 0.0784015282081804]], "kwargs": [], "self": [], "supported_dists": [["Optional[str]", 0.23248436853280605], ["Optional[Tuple]", 0.15960356835311063], ["bool", 0.1009821979301385], ["List[str]", 0.07980178417655531], ["int", 0.0784015282081804]], "version": [["Optional[str]", 0.23248436853280605], ["Optional[Tuple]", 0.15960356835311063], ["bool", 0.1009821979301385], ["List[str]", 0.07980178417655531], ["int", 0.0784015282081804]]}, "q_name": "TestModuleUtilsBasic.test_module_utils_basic_get_distribution_version.<locals>._dist", "ret_exprs": ["return (\"AmazonFooBar\", \"2\", \"\")", "return (\"\", \"\", \"\")"], "ret_type": "", "ret_type_p": [["int", 0.30000000000000004], ["Callable", 0.2], ["str", 0.1]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[191, 4], [213, 69]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_module_utils_basic_get_distribution_version", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "get_distribution_version"], ["self", "assertEqual", "get_distribution_version"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestModuleUtilsBasic.test_module_utils_basic_get_distribution_version", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[215, 4], [242, 81]], "fn_var_ln": {"distribution": [[225, 12], [225, 24]], "platform": [[224, 12], [224, 20]]}, "fn_var_occur": {"distribution": [["distribution", "None"]], "platform": []}, "name": "test_module_utils_basic_load_platform_subclass", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertIs", "type", "load_platform_subclass", "LinuxTest", "Foo"], ["self", "assertIs", "type", "load_platform_subclass", "LinuxTest", "Bar"], ["self", "assertIs", "type", "load_platform_subclass", "LinuxTest", "LinuxTest"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestModuleUtilsBasic.test_module_utils_basic_load_platform_subclass", "ret_exprs": [], "ret_type": "", "variables": {"distribution": "", "platform": ""}, "variables_p": {"distribution": [["list", 0.49999999998796596], ["set", 0.166666666658644], ["Dict[str, Optional[bool]]", 0.166666666658644], ["Dict[str, Union[None, Any, Any]]", 0.166666666658644], ["Type[Optional[Any]]", 1.2033986723111486e-11]], "platform": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[244, 4], [257, 41]], "fn_var_ln": {"res": [[254, 8], [254, 11]], "res2": [[255, 8], [255, 12]], "test_data": [[247, 8], [247, 17]]}, "fn_var_occur": {"res": [["res", "json_dict_unicode_to_bytes", "test_data"], ["res2", "json_dict_bytes_to_unicode", "res"]], "res2": [["res2", "json_dict_bytes_to_unicode", "res"], ["self", "assertEqual", "test_data", "res2"]], "test_data": [["test_data", "dict", "item1", "item2", "item3", "dict", "sub1", "item4", "item5"], ["res", "json_dict_unicode_to_bytes", "test_data"], ["self", "assertEqual", "test_data", "res2"]]}, "name": "test_module_utils_basic_json_dict_converters", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "test_data", "res2"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestModuleUtilsBasic.test_module_utils_basic_json_dict_converters", "ret_exprs": [], "ret_type": "", "variables": {"res": "", "res2": "", "test_data": ""}, "variables_p": {"res": [["list", 0.13906439182450978], ["Dict[str, str]", 0.09126356658467921], ["Tuple[int]", 0.08868372804180369], ["frozenset[Any]", 0.08576184078919796]], "res2": [["List[Tuple[int, Any]]", 0.09217604386432683]], "test_data": [["dict", 0.5711718920795316], ["Dict[AbstractSet[str], Set[Any]]", 0.2472171364309766], ["List[Dict[str, Any]]", 0.09311171624676709], ["Tuple[dict]", 0.08849925524272488]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[259, 4], [262, 63]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_module_utils_basic_get_module_path", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "get_module_path"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestModuleUtilsBasic.test_module_utils_basic_get_module_path", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[264, 4], [344, 13]], "fn_var_ln": {"_ANSIBLE_ARGS": [[301, 12], [301, 31]], "am": [[285, 12], [285, 14]], "arg_spec": [[271, 8], [271, 16]], "args": [[331, 8], [331, 12]], "mut_ex": [[277, 8], [277, 14]], "req_to": [[278, 8], [278, 14]]}, "fn_var_occur": {"_ANSIBLE_ARGS": [["basic", "_ANSIBLE_ARGS", "None"], ["basic", "_ANSIBLE_ARGS", "None"]], "am": [["am", "basic", "AnsibleModule", "argument_spec", "dict"], ["am", "basic", "AnsibleModule", "argument_spec", "arg_spec", "mutually_exclusive", "mut_ex", "required_together", "req_to", "no_log", "True", "check_invalid_arguments", "False", "add_file_common_args", "True", "supports_check_mode", "True"]], "arg_spec": [["arg_spec", "dict", "foo", "dict", "required", "True", "bar", "dict", "bam", "dict", "baz", "dict"], ["am", "basic", "AnsibleModule", "argument_spec", "arg_spec", "mutually_exclusive", "mut_ex", "required_together", "req_to", "no_log", "True", "check_invalid_arguments", "False", "add_file_common_args", "True", "supports_check_mode", "True"], ["self", "assertRaises", "SystemExit", "basic", "AnsibleModule", "argument_spec", "arg_spec", "mutually_exclusive", "mut_ex", "required_together", "req_to", "no_log", "True", "check_invalid_arguments", "False", "add_file_common_args", "True", "supports_check_mode", "True"], ["self", "assertRaises", "SystemExit", "basic", "AnsibleModule", "argument_spec", "arg_spec", "mutually_exclusive", "mut_ex", "required_together", "req_to", "no_log", "True", "check_invalid_arguments", "False", "add_file_common_args", "True", "supports_check_mode", "True"], ["self", "assertRaises", "SystemExit", "basic", "AnsibleModule", "argument_spec", "arg_spec", "mutually_exclusive", "mut_ex", "required_together", "req_to", "no_log", "True", "check_invalid_arguments", "False", "add_file_common_args", "True", "supports_check_mode", "True"]], "args": [["args", "json", "dumps", "dict", "ANSIBLE_MODULE_ARGS"], ["swap_stdin_and_argv", "stdin_data", "args"], ["args", "json", "dumps", "dict", "ANSIBLE_MODULE_ARGS"], ["swap_stdin_and_argv", "stdin_data", "args"], ["args", "json", "dumps", "dict", "ANSIBLE_MODULE_ARGS"], ["swap_stdin_and_argv", "stdin_data", "args"], ["args", "json", "dumps", "dict", "ANSIBLE_MODULE_ARGS"], ["swap_stdin_and_argv", "stdin_data", "args"]], "mut_ex": [["am", "basic", "AnsibleModule", "argument_spec", "arg_spec", "mutually_exclusive", "mut_ex", "required_together", "req_to", "no_log", "True", "check_invalid_arguments", "False", "add_file_common_args", "True", "supports_check_mode", "True"], ["self", "assertRaises", "SystemExit", "basic", "AnsibleModule", "argument_spec", "arg_spec", "mutually_exclusive", "mut_ex", "required_together", "req_to", "no_log", "True", "check_invalid_arguments", "False", "add_file_common_args", "True", "supports_check_mode", "True"], ["self", "assertRaises", "SystemExit", "basic", "AnsibleModule", "argument_spec", "arg_spec", "mutually_exclusive", "mut_ex", "required_together", "req_to", "no_log", "True", "check_invalid_arguments", "False", "add_file_common_args", "True", "supports_check_mode", "True"], ["self", "assertRaises", "SystemExit", "basic", "AnsibleModule", "argument_spec", "arg_spec", "mutually_exclusive", "mut_ex", "required_together", "req_to", "no_log", "True", "check_invalid_arguments", "False", "add_file_common_args", "True", "supports_check_mode", "True"]], "req_to": [["am", "basic", "AnsibleModule", "argument_spec", "arg_spec", "mutually_exclusive", "mut_ex", "required_together", "req_to", "no_log", "True", "check_invalid_arguments", "False", "add_file_common_args", "True", "supports_check_mode", "True"], ["self", "assertRaises", "SystemExit", "basic", "AnsibleModule", "argument_spec", "arg_spec", "mutually_exclusive", "mut_ex", "required_together", "req_to", "no_log", "True", "check_invalid_arguments", "False", "add_file_common_args", "True", "supports_check_mode", "True"], ["self", "assertRaises", "SystemExit", "basic", "AnsibleModule", "argument_spec", "arg_spec", "mutually_exclusive", "mut_ex", "required_together", "req_to", "no_log", "True", "check_invalid_arguments", "False", "add_file_common_args", "True", "supports_check_mode", "True"], ["self", "assertRaises", "SystemExit", "basic", "AnsibleModule", "argument_spec", "arg_spec", "mutually_exclusive", "mut_ex", "required_together", "req_to", "no_log", "True", "check_invalid_arguments", "False", "add_file_common_args", "True", "supports_check_mode", "True"]]}, "name": "test_module_utils_basic_ansible_module_creation", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertRaises", "SystemExit", "basic", "AnsibleModule", "argument_spec", "arg_spec", "mutually_exclusive", "mut_ex", "required_together", "req_to", "no_log", "True", "check_invalid_arguments", "False", "add_file_common_args", "True", "supports_check_mode", "True"], ["self", "assertRaises", "SystemExit", "basic", "AnsibleModule", "argument_spec", "arg_spec", "mutually_exclusive", "mut_ex", "required_together", "req_to", "no_log", "True", "check_invalid_arguments", "False", "add_file_common_args", "True", "supports_check_mode", "True"], ["self", "assertRaises", "SystemExit", "basic", "AnsibleModule", "argument_spec", "arg_spec", "mutually_exclusive", "mut_ex", "required_together", "req_to", "no_log", "True", "check_invalid_arguments", "False", "add_file_common_args", "True", "supports_check_mode", "True"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestModuleUtilsBasic.test_module_utils_basic_ansible_module_creation", "ret_exprs": [], "ret_type": "", "variables": {"_ANSIBLE_ARGS": "", "am": "", "arg_spec": "", "args": "", "mut_ex": "", "req_to": ""}, "variables_p": {"_ANSIBLE_ARGS": [["os.stat_result", 0.09965522308835142], ["str", 0.08991009717317958], ["int", 0.08969324196794458], ["Tuple[Hashable]", 0.08842190109122554]], "am": [["bool", 0.09748540235665576], ["io.StringIO", 0.09216841062232242]], "arg_spec": [], "args": [["dict", 0.2315935180701002]], "mut_ex": [["str", 0.1970990513554092], ["authorityspoke.io.schemas.HoldingSchema", 0.1933751589309835], ["authorityspoke.io.schemas.FactorSchema", 0.09983854642484975], ["kedro.io.data_catalog.DataCatalog", 0.097959481018755]], "req_to": [["tests.utilities.factories.FakeCompletedProcess", 0.27977146308027134], ["pandas.io.pytables.HDFStore", 0.19512350528051559], ["pandas.io.pytables.IndexCol", 0.13878907760782627]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[346, 4], [389, 13]], "fn_var_ln": {"_ANSIBLE_ARGS": [[380, 12], [380, 31]], "am": [[368, 12], [368, 14]], "arg_spec": [[349, 8], [349, 16]], "args": [[377, 8], [377, 12]]}, "fn_var_occur": {"_ANSIBLE_ARGS": [["basic", "_ANSIBLE_ARGS", "None"], ["basic", "_ANSIBLE_ARGS", "None"]], "am": [["am", "basic", "AnsibleModule", "argument_spec", "arg_spec", "no_log", "True", "check_invalid_arguments", "False", "add_file_common_args", "True", "supports_check_mode", "True"]], "arg_spec": [["arg_spec", "dict", "foo", "dict", "type", "foo2", "dict", "type", "foo3", "dict", "type", "bar", "dict", "type", "bar2", "dict", "type"], ["am", "basic", "AnsibleModule", "argument_spec", "arg_spec", "no_log", "True", "check_invalid_arguments", "False", "add_file_common_args", "True", "supports_check_mode", "True"], ["self", "assertRaises", "SystemExit", "basic", "AnsibleModule", "argument_spec", "arg_spec", "no_log", "True", "check_invalid_arguments", "False", "add_file_common_args", "True", "supports_check_mode", "True"]], "args": [["args", "json", "dumps", "dict", "ANSIBLE_MODULE_ARGS"], ["swap_stdin_and_argv", "stdin_data", "args"], ["args", "json", "dumps", "dict", "ANSIBLE_MODULE_ARGS"], ["swap_stdin_and_argv", "stdin_data", "args"]]}, "name": "test_module_utils_basic_ansible_module_type_check", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertRaises", "SystemExit", "basic", "AnsibleModule", "argument_spec", "arg_spec", "no_log", "True", "check_invalid_arguments", "False", "add_file_common_args", "True", "supports_check_mode", "True"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestModuleUtilsBasic.test_module_utils_basic_ansible_module_type_check", "ret_exprs": [], "ret_type": "", "variables": {"_ANSIBLE_ARGS": "", "am": "", "arg_spec": "", "args": ""}, "variables_p": {"_ANSIBLE_ARGS": [["os.stat_result", 0.09965522308835142], ["str", 0.08991009717317958], ["int", 0.08969324196794458], ["Tuple[Hashable]", 0.08842190109122554]], "am": [["str", 0.37991517058119006], ["bool", 0.22801530240394763], ["Dict[str, Any]", 0.10766864697864921], ["List[str]", 0.1031925762343642], ["Tuple[str, str]", 0.09544437543876651]], "arg_spec": [["Dict[str, bool]", 0.5151349665886582], ["str", 0.10172921343363332], ["dict", 0.097963835398579], ["Dict[str, float]", 0.09769084232633315], ["Dict[str, Dict[str, Any]]", 0.0957060511044357]], "args": [["dict", 0.2315935180701002]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[391, 4], [438, 51]], "fn_var_ln": {"_ANSIBLE_ARGS": [[393, 8], [393, 27]], "am": [[395, 8], [395, 10]], "base_params": [[408, 8], [408, 19]], "extended_params": [[419, 8], [419, 23]], "final_params": [[425, 8], [425, 20]], "res": [[437, 16], [437, 19]], "selinux_default_context": [[401, 8], [401, 34]], "selinux_mls_enabled": [[399, 8], [399, 30]]}, "fn_var_occur": {"_ANSIBLE_ARGS": [["basic", "_ANSIBLE_ARGS", "None"]], "am": [["am", "basic", "AnsibleModule", "argument_spec", "dict"], ["am", "selinux_mls_enabled", "MagicMock"], ["am", "selinux_mls_enabled", "return_value", "True"], ["am", "selinux_default_context", "MagicMock"], ["am", "selinux_default_context", "return_value", "split"], ["res", "am", "load_file_common_arguments", "params", "dict"], ["res", "am", "load_file_common_arguments", "params", "extended_params"]], "base_params": [["base_params", "dict", "path", "mode", "owner", "group", "seuser", "serole", "setype", "selevel"], ["extended_params", "base_params", "copy"], ["final_params", "base_params", "copy"]], "extended_params": [["extended_params", "base_params", "copy"], ["extended_params", "update", "dict", "follow", "True", "foo"], ["res", "am", "load_file_common_arguments", "params", "extended_params"]], "final_params": [["final_params", "base_params", "copy"], ["final_params", "update", "dict", "path", "secontext"], ["self", "assertEqual", "res", "final_params"]], "res": [["res", "am", "load_file_common_arguments", "params", "dict"], ["self", "assertEqual", "res", "dict"], ["res", "am", "load_file_common_arguments", "params", "extended_params"], ["self", "assertEqual", "res", "final_params"]], "selinux_default_context": [["am", "selinux_default_context", "MagicMock"], ["am", "selinux_default_context", "return_value", "split"]], "selinux_mls_enabled": [["am", "selinux_mls_enabled", "MagicMock"], ["am", "selinux_mls_enabled", "return_value", "True"]]}, "name": "test_module_utils_basic_ansible_module_load_file_common_arguments", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "res", "dict"], ["self", "assertEqual", "res", "final_params"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestModuleUtilsBasic.test_module_utils_basic_ansible_module_load_file_common_arguments", "ret_exprs": [], "ret_type": "", "variables": {"_ANSIBLE_ARGS": "", "am": "", "base_params": "", "extended_params": "", "final_params": "", "res": "", "selinux_default_context": "", "selinux_mls_enabled": ""}, "variables_p": {"_ANSIBLE_ARGS": [["str", 0.5638072338800818], ["property", 0.08157648713918593], ["List[str]", 0.07946294503528802]], "am": [["bool", 0.10874027198923121], ["Tuple[str, str, str]", 0.10173066816197109], ["Dict[str, Any]", 0.10156778406736655]], "base_params": [["str", 0.3038913010220701], ["List[str]", 0.09715305859391725], ["int", 0.09413062227994014]], "extended_params": [], "final_params": [], "res": [["str", 0.18035632214229647], ["Dict[Any, List[float]]", 0.10291846539791125], ["Dict[str, Any]", 0.09164664799110946]], "selinux_default_context": [["mock.MagicMock", 0.8927673744754535], ["unittesmock.MagicMock", 0.10723262552454685]], "selinux_mls_enabled": [["unittesmock.MagicMock", 0.22759456649567678], ["int", 0.10259163074697178], ["Dict[str, Any]", 0.09722952931156892]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[440, 4], [458, 33]], "fn_var_ln": {"HAVE_SELINUX": [[451, 8], [451, 26]], "_ANSIBLE_ARGS": [[442, 8], [442, 27]], "am": [[444, 8], [444, 10]], "selinux": [[452, 8], [452, 21]]}, "fn_var_occur": {"HAVE_SELINUX": [["basic", "HAVE_SELINUX", "False"], ["basic", "HAVE_SELINUX", "True"]], "_ANSIBLE_ARGS": [["basic", "_ANSIBLE_ARGS", "None"]], "am": [["am", "basic", "AnsibleModule", "argument_spec", "dict"], ["self", "assertEqual", "am", "selinux_mls_enabled", "False"], ["self", "assertEqual", "am", "selinux_mls_enabled", "False"], ["self", "assertEqual", "am", "selinux_mls_enabled", "True"]], "selinux": [["basic", "selinux", "Mock"], ["patch", "dict", "basic", "selinux"]]}, "name": "test_module_utils_basic_ansible_module_selinux_mls_enabled", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "am", "selinux_mls_enabled", "False"], ["self", "assertEqual", "am", "selinux_mls_enabled", "False"], ["self", "assertEqual", "am", "selinux_mls_enabled", "True"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestModuleUtilsBasic.test_module_utils_basic_ansible_module_selinux_mls_enabled", "ret_exprs": [], "ret_type": "", "variables": {"HAVE_SELINUX": "", "_ANSIBLE_ARGS": "", "am": "", "selinux": ""}, "variables_p": {"HAVE_SELINUX": [["str", 0.9999999999611], ["bool", 1.532265898604227e-11], ["List[str]", 6.44039265227209e-12], ["Dict[str, Any]", 5.622763118943203e-12], ["int", 4.7988303773374e-12]], "_ANSIBLE_ARGS": [["str", 0.5638072338800818], ["property", 0.08157648713918593], ["List[str]", 0.07946294503528802]], "am": [["tests.utilities.factories.FakeCompletedProcess", 0.2806576052525127], ["Dict[str, Any]", 0.1206466766243229], ["tests.components.ozw.common.MQTTMessage", 0.0919579715851657], ["pandas.io.pytables.IndexCol", 0.09104275548924017]], "selinux": [["str", 0.09702199488186813], ["Dict[str, Union[Any, str]]", 0.09702199488186813]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[460, 4], [472, 80]], "fn_var_ln": {"_ANSIBLE_ARGS": [[462, 8], [462, 27]], "am": [[464, 8], [464, 10]], "selinux_mls_enabled": [[468, 8], [468, 30]]}, "fn_var_occur": {"_ANSIBLE_ARGS": [["basic", "_ANSIBLE_ARGS", "None"]], "am": [["am", "basic", "AnsibleModule", "argument_spec", "dict"], ["am", "selinux_mls_enabled", "MagicMock"], ["am", "selinux_mls_enabled", "return_value", "False"], ["self", "assertEqual", "am", "selinux_initial_context", "None", "None", "None"], ["am", "selinux_mls_enabled", "return_value", "True"], ["self", "assertEqual", "am", "selinux_initial_context", "None", "None", "None", "None"]], "selinux_mls_enabled": [["am", "selinux_mls_enabled", "MagicMock"], ["am", "selinux_mls_enabled", "return_value", "False"], ["am", "selinux_mls_enabled", "return_value", "True"]]}, "name": "test_module_utils_basic_ansible_module_selinux_initial_context", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "am", "selinux_initial_context", "None", "None", "None"], ["self", "assertEqual", "am", "selinux_initial_context", "None", "None", "None", "None"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestModuleUtilsBasic.test_module_utils_basic_ansible_module_selinux_initial_context", "ret_exprs": [], "ret_type": "", "variables": {"_ANSIBLE_ARGS": "", "am": "", "selinux_mls_enabled": ""}, "variables_p": {"_ANSIBLE_ARGS": [["str", 0.5638072338800818], ["property", 0.08157648713918593], ["List[str]", 0.07946294503528802]], "am": [["bool", 0.30694673099505015], ["str", 0.18784698213680096], ["List[str]", 0.10805089243212822], ["Tuple[str, str, str]", 0.10310272625152564], ["tests.golem.docker.test_hypervisor.MockDockerManager", 0.09576625575800864]], "selinux_mls_enabled": [["unittesmock.Mock", 0.24976377101757832], ["raiden.tests.utils.protocol.WaitForMessage", 0.19238597978999908], ["unittesmock.MagicMock", 0.10671617242518967], ["int", 0.09779602397828423]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[474, 4], [504, 33]], "fn_var_ln": {"HAVE_SELINUX": [[497, 8], [497, 26]], "_ANSIBLE_ARGS": [[476, 8], [476, 27]], "am": [[478, 8], [478, 10]], "get_bin_path": [[487, 8], [487, 23]], "run_command": [[489, 8], [489, 22]], "selinux": [[498, 8], [498, 21]]}, "fn_var_occur": {"HAVE_SELINUX": [["basic", "HAVE_SELINUX", "False"], ["basic", "HAVE_SELINUX", "True"]], "_ANSIBLE_ARGS": [["basic", "_ANSIBLE_ARGS", "None"]], "am": [["am", "basic", "AnsibleModule", "argument_spec", "dict"], ["am", "get_bin_path", "MagicMock"], ["am", "get_bin_path", "return_value"], ["am", "run_command", "MagicMock"], ["am", "run_command", "return_value"], ["self", "assertRaises", "SystemExit", "am", "selinux_enabled"], ["am", "get_bin_path", "return_value", "None"], ["self", "assertEqual", "am", "selinux_enabled", "False"], ["self", "assertEqual", "am", "selinux_enabled", "False"], ["self", "assertEqual", "am", "selinux_enabled", "True"]], "get_bin_path": [["am", "get_bin_path", "MagicMock"], ["am", "get_bin_path", "return_value"], ["am", "get_bin_path", "return_value", "None"]], "run_command": [["am", "run_command", "MagicMock"], ["am", "run_command", "return_value"]], "selinux": [["basic", "selinux", "Mock"], ["patch", "dict", "basic", "selinux"]]}, "name": "test_module_utils_basic_ansible_module_selinux_enabled", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertRaises", "SystemExit", "am", "selinux_enabled"], ["self", "assertEqual", "am", "selinux_enabled", "False"], ["self", "assertEqual", "am", "selinux_enabled", "False"], ["self", "assertEqual", "am", "selinux_enabled", "True"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestModuleUtilsBasic.test_module_utils_basic_ansible_module_selinux_enabled", "ret_exprs": [], "ret_type": "", "variables": {"HAVE_SELINUX": "", "_ANSIBLE_ARGS": "", "am": "", "get_bin_path": "", "run_command": "", "selinux": ""}, "variables_p": {"HAVE_SELINUX": [["str", 0.9999999999611], ["bool", 1.532265898604227e-11], ["List[str]", 6.44039265227209e-12], ["Dict[str, Any]", 5.622763118943203e-12], ["int", 4.7988303773374e-12]], "_ANSIBLE_ARGS": [["str", 0.5638072338800818], ["property", 0.08157648713918593], ["List[str]", 0.07946294503528802]], "am": [["str", 0.18541795164794722], ["Dict[str, Any]", 0.15849266416478394], ["Optional[str]", 0.10432586527710008], ["int", 0.08608459962237605], ["bool", 0.08560705076472333]], "get_bin_path": [["str", 0.9045513189810944], ["List[str]", 0.09544868101890565]], "run_command": [["int", 0.7231780857142857], ["float", 0.09321842586592397]], "selinux": [["str", 0.09702199488186813], ["Dict[str, Union[Any, str]]", 0.09702199488186813]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[506, 4], [540, 33]], "fn_var_ln": {"HAVE_SELINUX": [[522, 8], [522, 26]], "_ANSIBLE_ARGS": [[508, 8], [508, 27]], "am": [[510, 8], [510, 10]], "selinux": [[524, 8], [524, 21]], "selinux_enabled": [[515, 8], [515, 26]], "selinux_initial_context": [[514, 8], [514, 34]]}, "fn_var_occur": {"HAVE_SELINUX": [["basic", "HAVE_SELINUX", "False"], ["basic", "HAVE_SELINUX", "True"]], "_ANSIBLE_ARGS": [["basic", "_ANSIBLE_ARGS", "None"]], "am": [["am", "basic", "AnsibleModule", "argument_spec", "dict"], ["am", "selinux_initial_context", "MagicMock", "return_value", "None", "None", "None", "None"], ["am", "selinux_enabled", "MagicMock", "return_value", "True"], ["self", "assertEqual", "am", "selinux_default_context", "path", "None", "None", "None", "None"], ["self", "assertEqual", "am", "selinux_default_context", "path"], ["self", "assertEqual", "am", "selinux_default_context", "path", "None", "None", "None", "None"], ["self", "assertEqual", "am", "selinux_default_context", "path", "None", "None", "None", "None"]], "selinux": [["basic", "selinux", "Mock"], ["patch", "dict", "basic", "selinux"]], "selinux_enabled": [["am", "selinux_enabled", "MagicMock", "return_value", "True"]], "selinux_initial_context": [["am", "selinux_initial_context", "MagicMock", "return_value", "None", "None", "None", "None"]]}, "name": "test_module_utils_basic_ansible_module_selinux_default_context", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "am", "selinux_default_context", "path", "None", "None", "None", "None"], ["self", "assertEqual", "am", "selinux_default_context", "path"], ["self", "assertEqual", "am", "selinux_default_context", "path", "None", "None", "None", "None"], ["self", "assertEqual", "am", "selinux_default_context", "path", "None", "None", "None", "None"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestModuleUtilsBasic.test_module_utils_basic_ansible_module_selinux_default_context", "ret_exprs": [], "ret_type": "", "variables": {"HAVE_SELINUX": "", "_ANSIBLE_ARGS": "", "am": "", "selinux": "", "selinux_enabled": "", "selinux_initial_context": ""}, "variables_p": {"HAVE_SELINUX": [["str", 0.9999999999611], ["bool", 1.532265898604227e-11], ["List[str]", 6.44039265227209e-12], ["Dict[str, Any]", 5.622763118943203e-12], ["int", 4.7988303773374e-12]], "_ANSIBLE_ARGS": [["str", 0.5638072338800818], ["property", 0.08157648713918593], ["List[str]", 0.07946294503528802]], "am": [["List[str]", 0.11056432627266954], ["raiden.tests.utils.protocol.WaitForMessage", 0.09405195294508449], ["str", 0.09302971008081083]], "selinux": [["str", 0.09702199488186813], ["Dict[str, Union[Any, str]]", 0.09702199488186813]], "selinux_enabled": [["unittesmock.Mock", 0.1249942214895345], ["set", 0.10170183113559697], ["unittesmock.MagicMock", 0.10151607080494955], ["str", 0.09533020114101602], ["Dict[str, Union[Any, str]]", 0.08945711387894997]], "selinux_initial_context": []}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[542, 4], [582, 33]], "fn_var_ln": {"HAVE_SELINUX": [[558, 8], [558, 26]], "_ANSIBLE_ARGS": [[544, 8], [544, 27]], "am": [[546, 8], [546, 10]], "e": [[578, 12], [578, 13]], "errno": [[574, 12], [574, 19]], "selinux": [[560, 8], [560, 21]], "selinux_enabled": [[551, 8], [551, 26]], "selinux_initial_context": [[550, 8], [550, 34]]}, "fn_var_occur": {"HAVE_SELINUX": [["basic", "HAVE_SELINUX", "False"], ["basic", "HAVE_SELINUX", "True"]], "_ANSIBLE_ARGS": [["basic", "_ANSIBLE_ARGS", "None"]], "am": [["am", "basic", "AnsibleModule", "argument_spec", "dict"], ["am", "selinux_initial_context", "MagicMock", "return_value", "None", "None", "None", "None"], ["am", "selinux_enabled", "MagicMock", "return_value", "True"], ["self", "assertEqual", "am", "selinux_context", "path", "None", "None", "None", "None"], ["self", "assertEqual", "am", "selinux_context", "path"], ["self", "assertEqual", "am", "selinux_context", "path", "None", "None", "None", "None"], ["self", "assertRaises", "SystemExit", "am", "selinux_context", "path"], ["self", "assertRaises", "SystemExit", "am", "selinux_context", "path"]], "e": [["e", "OSError"], ["e", "errno", "errno", "ENOENT"], ["patch", "side_effect", "e"], ["e", "OSError"], ["patch", "side_effect", "e"]], "errno": [["e", "errno", "errno", "ENOENT"]], "selinux": [["basic", "selinux", "Mock"], ["patch", "dict", "basic", "selinux"]], "selinux_enabled": [["am", "selinux_enabled", "MagicMock", "return_value", "True"]], "selinux_initial_context": [["am", "selinux_initial_context", "MagicMock", "return_value", "None", "None", "None", "None"]]}, "name": "test_module_utils_basic_ansible_module_selinux_context", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "am", "selinux_context", "path", "None", "None", "None", "None"], ["self", "assertEqual", "am", "selinux_context", "path"], ["self", "assertEqual", "am", "selinux_context", "path", "None", "None", "None", "None"], ["self", "assertRaises", "SystemExit", "am", "selinux_context", "path"], ["self", "assertRaises", "SystemExit", "am", "selinux_context", "path"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestModuleUtilsBasic.test_module_utils_basic_ansible_module_selinux_context", "ret_exprs": [], "ret_type": "", "variables": {"HAVE_SELINUX": "", "_ANSIBLE_ARGS": "", "am": "", "e": "", "errno": "", "selinux": "", "selinux_enabled": "", "selinux_initial_context": ""}, "variables_p": {"HAVE_SELINUX": [["str", 0.9999999999611], ["bool", 1.532265898604227e-11], ["List[str]", 6.44039265227209e-12], ["Dict[str, Any]", 5.622763118943203e-12], ["int", 4.7988303773374e-12]], "_ANSIBLE_ARGS": [["str", 0.5638072338800818], ["property", 0.08157648713918593], ["List[str]", 0.07946294503528802]], "am": [["List[str]", 0.11056432627266954], ["raiden.tests.utils.protocol.WaitForMessage", 0.09405195294508449], ["str", 0.09302971008081083]], "e": [["str", 0.33674028658878347], ["int", 0.1703947815213193], ["list", 0.13183349574722933]], "errno": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["str", 0.1]], "selinux": [["str", 0.09702199488186813], ["Dict[str, Union[Any, str]]", 0.09702199488186813]], "selinux_enabled": [["unittesmock.Mock", 0.1249942214895345], ["set", 0.10170183113559697], ["unittesmock.MagicMock", 0.10151607080494955], ["str", 0.09533020114101602], ["Dict[str, Union[Any, str]]", 0.08945711387894997]], "selinux_initial_context": []}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[596, 12], [601, 26]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "_mock_find_mount_point", "params": {"path": ""}, "params_descr": {"path": ""}, "params_occur": {"path": [["path", "startswith"], ["path", "startswith"]]}, "params_p": {"args": [], "kwargs": [], "path": [["str", 0.7990389118355123], ["int", 0.06327515214069464]], "self": []}, "q_name": "TestModuleUtilsBasic.test_module_utils_basic_ansible_module_is_special_selinux_path.<locals>._mock_find_mount_point", "ret_exprs": ["return '/some/path'", "return '/weird/random/fstype'", "return '/'"], "ret_type": "", "ret_type_p": [["str", 0.5066324025020893], ["Iterable[str]", 0.0996878153287951]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[584, 4], [626, 132]], "fn_var_ln": {"_ANSIBLE_ARGS": [[586, 8], [586, 27]], "am": [[592, 12], [592, 14]], "args": [[588, 8], [588, 12]], "find_mount_point": [[603, 12], [603, 31]], "m": [[620, 12], [620, 13]], "mount_data": [[612, 12], [612, 22]], "selinux_context": [[604, 12], [604, 30]], "side_effect": [[607, 12], [607, 25]]}, "fn_var_occur": {"_ANSIBLE_ARGS": [], "am": [["am", "find_mount_point", "MagicMock", "side_effect", "_mock_find_mount_point"], ["am", "selinux_context", "MagicMock", "return_value"], ["self", "assertEqual", "am", "is_special_selinux_path", "False", "None"], ["self", "assertEqual", "am", "is_special_selinux_path", "False", "None"], ["self", "assertEqual", "am", "is_special_selinux_path", "True"], ["self", "assertEqual", "am", "is_special_selinux_path", "True"]], "args": [], "find_mount_point": [["am", "find_mount_point", "MagicMock", "side_effect", "_mock_find_mount_point"]], "m": [["m", "mock_open"], ["m", "side_effect", "OSError"], ["patch", "object", "builtins", "m", "create", "True"], ["m", "mock_open", "read_data", "join", "mount_data"], ["m", "return_value", "readlines", "return_value", "mount_data"], ["patch", "object", "builtins", "m", "create", "True"]], "mount_data": [["m", "mock_open", "read_data", "join", "mount_data"], ["m", "return_value", "readlines", "return_value", "mount_data"]], "selinux_context": [["am", "selinux_context", "MagicMock", "return_value"]], "side_effect": [["am", "find_mount_point", "MagicMock", "side_effect", "_mock_find_mount_point"], ["m", "side_effect", "OSError"]]}, "name": "test_module_utils_basic_ansible_module_is_special_selinux_path", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "am", "is_special_selinux_path", "False", "None"], ["self", "assertEqual", "am", "is_special_selinux_path", "False", "None"], ["self", "assertEqual", "am", "is_special_selinux_path", "True"], ["self", "assertEqual", "am", "is_special_selinux_path", "True"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestModuleUtilsBasic.test_module_utils_basic_ansible_module_is_special_selinux_path", "ret_exprs": [], "ret_type": "", "variables": {"_ANSIBLE_ARGS": "", "am": "", "args": "", "find_mount_point": "", "m": "", "mount_data": "", "selinux_context": "", "side_effect": ""}, "variables_p": {"_ANSIBLE_ARGS": [["int", 0.30000000000000004], ["bool", 0.30000000000000004], ["float", 0.2], ["str", 0.1], ["List[Tuple[Any, int]]", 0.1]], "am": [["List[Union[Any, Any]]", 0.22141965958479232], ["List[Tuple[Any, Any, Any]]", 0.10643779525316309], ["bool", 0.09851107942836239], ["str", 0.0980546656512432], ["List[str]", 0.09656712548520893], ["Dict[str, Union[Any, Any, Any]]", 0.09309354347553515], ["qcodes.tests.data_mocks.MatchIO", 0.09293796958959517]], "args": [["str", 0.20000000000000004], ["property", 0.10000000000000002], ["tuple", 0.10000000000000002], ["list", 0.10000000000000002], ["Dict[str, Any]", 0.10000000000000002], ["List[str]", 0.10000000000000002], ["Type[tuple]", 0.10000000000000002]], "find_mount_point": [["unittesmock._patch[Union[unittesmock.AsyncMock, unittesmock.MagicMock]]", 0.2497884325407797], ["List[Tuple[str, str]]", 0.17266864758891004], ["unittesmock.MagicMock", 0.16420601895171685], ["list", 0.10167325598587644], ["Dict[str, Union[Any, int]]", 0.09306423809317314]], "m": [["str", 0.8808627682407346], ["io.TextIOWrapper", 0.11913723175926529]], "mount_data": [["str", 0.266667154451887], ["Dict[str, Dict[str, Any]]", 0.19600676221686797], ["Dict[str, List[Any]]", 0.1820697600421528], ["Dict[str, Any]", 0.10783604401912551], ["Dict[str, Union[Any, Any]]", 0.09254744687280136], ["Dict[str, List[str]]", 0.0776391226823842], ["Dict[str, Union[Any, Any, str]]", 0.07723370971478118]], "selinux_context": [["mock.Mock", 0.6633236219972466], ["mode.utils.mocks.Mock", 0.3366763780027533]], "side_effect": [["str", 0.12822765740729403], ["List[str]", 0.10538507699927342], ["property", 0.1037540771921884]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[628, 4], [641, 72]], "fn_var_ln": {"_ANSIBLE_ARGS": [[630, 8], [630, 27]], "am": [[632, 8], [632, 10]], "mock_stat": [[636, 8], [636, 17]], "st_gid": [[638, 8], [638, 24]], "st_uid": [[637, 8], [637, 24]]}, "fn_var_occur": {"_ANSIBLE_ARGS": [["basic", "_ANSIBLE_ARGS", "None"]], "am": [["am", "basic", "AnsibleModule", "argument_spec", "dict"], ["self", "assertEqual", "am", "user_and_group"]], "mock_stat": [["mock_stat", "MagicMock"], ["mock_stat", "st_uid"], ["mock_stat", "st_gid"], ["patch", "return_value", "mock_stat"]], "st_gid": [["mock_stat", "st_gid"]], "st_uid": [["mock_stat", "st_uid"]]}, "name": "test_module_utils_basic_ansible_module_user_and_group", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "am", "user_and_group"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestModuleUtilsBasic.test_module_utils_basic_ansible_module_user_and_group", "ret_exprs": [], "ret_type": "", "variables": {"_ANSIBLE_ARGS": "", "am": "", "mock_stat": "", "st_gid": "", "st_uid": ""}, "variables_p": {"_ANSIBLE_ARGS": [["str", 0.5638072338800818], ["property", 0.08157648713918593], ["List[str]", 0.07946294503528802]], "am": [["bool", 0.14074366533334984], ["Dict[str, Any]", 0.12314920728955299], ["bytes", 0.1024236471434349], ["List[str]", 0.09279960136621551], ["tests.tx_cache.TxCache", 0.08979375778200722]], "mock_stat": [["unittesmock.MagicMock", 0.521739272330137], ["unittesmock.Mock", 0.478260727669863]], "st_gid": [["Dict[str, int]", 0.12303994334673557], ["str", 0.10492733387511273], ["bytes", 0.09589494343175974], ["int", 0.09485680612616365], ["Dict[str, Any]", 0.09121704467119511]], "st_uid": [["int", 0.2902311033069824], ["Pattern[str]", 0.2125029869113756], ["str", 0.11594174336431523], ["list", 0.09097071769967906], ["List[str]", 0.08991410603847044]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[651, 8], [654, 24]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "_mock_ismount", "params": {"path": ""}, "params_descr": {"path": ""}, "params_occur": {"path": []}, "params_p": {"args": [], "kwargs": [], "path": [["str", 0.9999999980594131], ["Sequence", 2.5613119867282194e-10], ["bool", 2.5613119867282194e-10]], "self": []}, "q_name": "TestModuleUtilsBasic.test_module_utils_basic_ansible_module_find_mount_point.<locals>._mock_ismount", "ret_exprs": ["return True", "return False"], "ret_type": "", "ret_type_p": [["bool", 1.0]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[659, 8], [662, 24]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "_mock_ismount", "params": {"path": ""}, "params_descr": {"path": ""}, "params_occur": {"path": []}, "params_p": {"args": [], "kwargs": [], "path": [["str", 0.9999999980594131], ["Sequence", 2.5613119867282194e-10], ["bool", 2.5613119867282194e-10]], "self": []}, "q_name": "TestModuleUtilsBasic.test_module_utils_basic_ansible_module_find_mount_point.<locals>._mock_ismount", "ret_exprs": ["return True", "return False"], "ret_type": "", "ret_type_p": [["bool", 1.0]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[643, 4], [665, 100]], "fn_var_ln": {"_ANSIBLE_ARGS": [[645, 8], [645, 27]], "am": [[647, 8], [647, 10]]}, "fn_var_occur": {"_ANSIBLE_ARGS": [], "am": [["self", "assertEqual", "am", "find_mount_point"]]}, "name": "test_module_utils_basic_ansible_module_find_mount_point", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "am", "find_mount_point"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestModuleUtilsBasic.test_module_utils_basic_ansible_module_find_mount_point", "ret_exprs": [], "ret_type": "", "variables": {"_ANSIBLE_ARGS": "", "am": ""}, "variables_p": {"_ANSIBLE_ARGS": [["int", 0.30000000000000004], ["bool", 0.30000000000000004], ["float", 0.2], ["str", 0.1], ["List[Tuple[Any, int]]", 0.1]], "am": [["str", 0.7147364971896256], ["bool", 0.2852635028103745]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[667, 4], [710, 33]], "fn_var_ln": {"HAVE_SELINUX": [[681, 8], [681, 26]], "_ANSIBLE_ARGS": [[669, 8], [669, 27]], "am": [[671, 8], [671, 10]], "check_mode": [[696, 16], [696, 29]], "is_special_selinux_path": [[704, 12], [704, 38]], "selinux": [[687, 8], [687, 21]], "selinux_context": [[684, 8], [684, 26]], "selinux_enabled": [[683, 8], [683, 26]]}, "fn_var_occur": {"HAVE_SELINUX": [["basic", "HAVE_SELINUX", "False"], ["basic", "HAVE_SELINUX", "True"]], "_ANSIBLE_ARGS": [["basic", "_ANSIBLE_ARGS", "None"]], "am": [["am", "basic", "AnsibleModule", "argument_spec", "dict"], ["am", "selinux_enabled", "MagicMock", "return_value", "False"], ["self", "assertEqual", "am", "set_context_if_different", "True", "True"], ["self", "assertEqual", "am", "set_context_if_different", "False", "False"], ["am", "selinux_enabled", "MagicMock", "return_value", "True"], ["am", "selinux_context", "MagicMock", "return_value", "None", "None"], ["am", "is_special_selinux_path", "MagicMock", "return_value", "False", "None"], ["self", "assertEqual", "am", "set_context_if_different", "False", "True"], ["am", "check_mode", "True"], ["self", "assertEqual", "am", "set_context_if_different", "False", "True"], ["am", "check_mode", "False"], ["self", "assertRaises", "SystemExit", "am", "set_context_if_different", "True"], ["self", "assertRaises", "SystemExit", "am", "set_context_if_different", "True"], ["am", "is_special_selinux_path", "MagicMock", "return_value", "True"], ["self", "assertEqual", "am", "set_context_if_different", "False", "True"]], "check_mode": [["am", "check_mode", "True"], ["am", "check_mode", "False"]], "is_special_selinux_path": [["am", "is_special_selinux_path", "MagicMock", "return_value", "False", "None"], ["am", "is_special_selinux_path", "MagicMock", "return_value", "True"]], "selinux": [["basic", "selinux", "Mock"], ["patch", "dict", "basic", "selinux"]], "selinux_context": [["am", "selinux_context", "MagicMock", "return_value", "None", "None"]], "selinux_enabled": [["am", "selinux_enabled", "MagicMock", "return_value", "False"], ["am", "selinux_enabled", "MagicMock", "return_value", "True"]]}, "name": "test_module_utils_basic_ansible_module_set_context_if_different", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "am", "set_context_if_different", "True", "True"], ["self", "assertEqual", "am", "set_context_if_different", "False", "False"], ["self", "assertEqual", "am", "set_context_if_different", "False", "True"], ["self", "assertEqual", "am", "set_context_if_different", "False", "True"], ["self", "assertEqual", "m", "called", "False"], ["self", "assertRaises", "SystemExit", "am", "set_context_if_different", "True"], ["self", "assertRaises", "SystemExit", "am", "set_context_if_different", "True"], ["self", "assertEqual", "am", "set_context_if_different", "False", "True"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestModuleUtilsBasic.test_module_utils_basic_ansible_module_set_context_if_different", "ret_exprs": [], "ret_type": "", "variables": {"HAVE_SELINUX": "", "_ANSIBLE_ARGS": "", "am": "", "check_mode": "", "is_special_selinux_path": "", "selinux": "", "selinux_context": "", "selinux_enabled": ""}, "variables_p": {"HAVE_SELINUX": [["str", 0.9999999999611], ["bool", 1.532265898604227e-11], ["List[str]", 6.44039265227209e-12], ["Dict[str, Any]", 5.622763118943203e-12], ["int", 4.7988303773374e-12]], "_ANSIBLE_ARGS": [["str", 0.5638072338800818], ["property", 0.08157648713918593], ["List[str]", 0.07946294503528802]], "am": [["int", 0.12533908497373594], ["hashstore.tests.TestSetup", 0.10426984765471982], ["Dict[str, Union[Any, Any, Any]]", 0.10416608036762282], ["mode.utils.mocks.Mock", 0.09797304181579641]], "check_mode": [["Dict[str, Union[Any, Any, Any, Any]]", 0.2703392105357046], ["str", 0.2319076767829337], ["int", 0.2084909615213944], ["List[str]", 0.1989763984903476], ["Type[str]", 0.09028575266961963]], "is_special_selinux_path": [["str", 0.23044458721557992], ["Optional[str]", 0.07678921520019494]], "selinux": [["str", 0.09702199488186813], ["Dict[str, Union[Any, str]]", 0.09702199488186813]], "selinux_context": [["unittesmock.Mock", 1.0000000000000002]], "selinux_enabled": [["mock.MagicMock", 0.3620062748065877], ["mode.utils.mocks.Mock", 0.30461127400429694], ["unittesmock.MagicMock", 0.15820281231363573], ["Dict[str, str]", 0.10081034764270738]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[729, 12], [732, 30]], "fn_var_ln": {"mock_pw": [[730, 16], [730, 23]], "pw_uid": [[731, 16], [731, 30]]}, "fn_var_occur": {"mock_pw": [["mock_pw", "MagicMock"], ["mock_pw", "pw_uid"]], "pw_uid": [["mock_pw", "pw_uid"]]}, "name": "_mock_getpwnam", "params": {"args": "", "kwargs": ""}, "params_descr": {"args": "", "kwargs": ""}, "params_occur": {"args": [], "kwargs": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestModuleUtilsBasic.test_module_utils_basic_ansible_module_set_owner_if_different.<locals>._mock_getpwnam", "ret_exprs": ["return mock_pw"], "ret_type": "", "ret_type_p": [["str", 0.10161601887356479], ["Dict[str, Sequence[str]]", 0.0965314923876816]], "variables": {"mock_pw": "", "pw_uid": ""}, "variables_p": {"mock_pw": [["str", 0.2886374694147744], ["mock.Mock", 0.2805478845112515], ["unittesmock.MagicMock", 0.18060892774063117], ["mock.MagicMock", 0.07632158633617893], ["unittesmock.Mock", 0.07583722392598986]], "pw_uid": [["Set[str]", 0.28889860893332353], ["str", 0.21482791473243648], ["List[str]", 0.19001932546999062], ["int", 0.11139218523788368], ["list", 0.10330092731194794], ["List[Union[Any, Any, Any]]", 0.09156103831441788]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[712, 4], [749, 100]], "fn_var_ln": {"_ANSIBLE_ARGS": [[714, 8], [714, 27]], "am": [[716, 8], [716, 10]], "check_mode": [[746, 12], [746, 25]], "user_and_group": [[723, 8], [723, 25]]}, "fn_var_occur": {"_ANSIBLE_ARGS": [], "am": [["self", "assertEqual", "am", "set_owner_if_different", "False", "True"], ["self", "assertRaises", "SystemExit", "am", "set_owner_if_different", "False"], ["am", "check_mode", "True"], ["self", "assertEqual", "am", "set_owner_if_different", "False", "True"], ["am", "check_mode", "False"], ["self", "assertRaises", "SystemExit", "am", "set_owner_if_different", "False"]], "check_mode": [["am", "check_mode", "True"], ["am", "check_mode", "False"]], "user_and_group": []}, "name": "test_module_utils_basic_ansible_module_set_owner_if_different", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "am", "set_owner_if_different", "False", "True"], ["self", "assertRaises", "SystemExit", "am", "set_owner_if_different", "False"], ["self", "assertEqual", "am", "set_owner_if_different", "False", "True"], ["self", "assertEqual", "m", "called", "False"], ["self", "assertRaises", "SystemExit", "am", "set_owner_if_different", "False"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestModuleUtilsBasic.test_module_utils_basic_ansible_module_set_owner_if_different", "ret_exprs": [], "ret_type": "", "variables": {"_ANSIBLE_ARGS": "", "am": "", "check_mode": "", "user_and_group": ""}, "variables_p": {"_ANSIBLE_ARGS": [["int", 0.30000000000000004], ["bool", 0.30000000000000004], ["float", 0.2], ["str", 0.1], ["List[Tuple[Any, int]]", 0.1]], "am": [["str", 0.6063519473136727], ["bool", 0.39364805268632735]], "check_mode": [["Dict[str, Union[Any, Any, Any, Any]]", 0.2703392105357046], ["str", 0.2319076767829337], ["int", 0.2084909615213944], ["List[str]", 0.1989763984903476], ["Type[str]", 0.09028575266961963]], "user_and_group": [["str", 0.1], ["Type[Dict[str, Any]]", 0.1]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[768, 12], [771, 30]], "fn_var_ln": {"gr_gid": [[770, 16], [770, 30]], "mock_gr": [[769, 16], [769, 23]]}, "fn_var_occur": {"gr_gid": [["mock_gr", "gr_gid"]], "mock_gr": [["mock_gr", "MagicMock"], ["mock_gr", "gr_gid"]]}, "name": "_mock_getgrnam", "params": {"args": "", "kwargs": ""}, "params_descr": {"args": "", "kwargs": ""}, "params_occur": {"args": [], "kwargs": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestModuleUtilsBasic.test_module_utils_basic_ansible_module_set_group_if_different.<locals>._mock_getgrnam", "ret_exprs": ["return mock_gr"], "ret_type": "", "ret_type_p": [["str", 0.10161601887356479], ["Dict[str, Sequence[str]]", 0.0965314923876816]], "variables": {"gr_gid": "", "mock_gr": ""}, "variables_p": {"gr_gid": [["str", 0.46146968833119484], ["List[Dict[str, float]]", 0.10543346334745063], ["Dict[str, Dict[str, str]]", 0.0831681400737581]], "mock_gr": [["str", 0.2886374694147744], ["mock.Mock", 0.2805478845112515], ["unittesmock.MagicMock", 0.18060892774063117], ["mock.MagicMock", 0.07632158633617893], ["unittesmock.Mock", 0.07583722392598986]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[751, 4], [788, 100]], "fn_var_ln": {"_ANSIBLE_ARGS": [[753, 8], [753, 27]], "am": [[755, 8], [755, 10]], "check_mode": [[785, 12], [785, 25]], "user_and_group": [[762, 8], [762, 25]]}, "fn_var_occur": {"_ANSIBLE_ARGS": [], "am": [["self", "assertEqual", "am", "set_group_if_different", "False", "True"], ["self", "assertRaises", "SystemExit", "am", "set_group_if_different", "False"], ["am", "check_mode", "True"], ["self", "assertEqual", "am", "set_group_if_different", "False", "True"], ["am", "check_mode", "False"], ["self", "assertRaises", "SystemExit", "am", "set_group_if_different", "False"]], "check_mode": [["am", "check_mode", "True"], ["am", "check_mode", "False"]], "user_and_group": []}, "name": "test_module_utils_basic_ansible_module_set_group_if_different", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "am", "set_group_if_different", "False", "True"], ["self", "assertRaises", "SystemExit", "am", "set_group_if_different", "False"], ["self", "assertEqual", "am", "set_group_if_different", "False", "True"], ["self", "assertEqual", "m", "called", "False"], ["self", "assertRaises", "SystemExit", "am", "set_group_if_different", "False"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestModuleUtilsBasic.test_module_utils_basic_ansible_module_set_group_if_different", "ret_exprs": [], "ret_type": "", "variables": {"_ANSIBLE_ARGS": "", "am": "", "check_mode": "", "user_and_group": ""}, "variables_p": {"_ANSIBLE_ARGS": [["int", 0.30000000000000004], ["bool", 0.30000000000000004], ["float", 0.2], ["str", 0.1], ["List[Tuple[Any, int]]", 0.1]], "am": [["str", 0.9999999999999999]], "check_mode": [["Dict[str, Union[Any, Any, Any, Any]]", 0.2703392105357046], ["str", 0.2319076767829337], ["int", 0.2084909615213944], ["List[str]", 0.1989763984903476], ["Type[str]", 0.09028575266961963]], "user_and_group": [["str", 0.1], ["Type[Dict[str, Any]]", 0.1]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[805, 4], [996, 55]], "fn_var_ln": {"_ANSIBLE_ARGS": [[825, 8], [825, 27]], "__getitem__": [[832, 8], [832, 31]], "__setitem__": [[833, 8], [833, 31]], "am": [[827, 8], [827, 10]], "environ": [[831, 8], [831, 15]], "mock_context": [[993, 8], [993, 20]], "mock_stat1": [[974, 8], [974, 18]], "mock_stat2": [[975, 8], [975, 18]], "mock_stat3": [[976, 8], [976, 18]], "return_value": [[992, 8], [992, 38]], "selinux_context": [[836, 8], [836, 26]], "selinux_default_context": [[837, 8], [837, 34]], "selinux_enabled": [[835, 8], [835, 26]], "set_context_if_different": [[838, 8], [838, 35]], "side_effect": [[991, 8], [991, 30]], "st_gid": [[907, 8], [907, 20]], "st_mode": [[905, 8], [905, 21]], "st_uid": [[906, 8], [906, 20]], "stat1": [[904, 8], [904, 13]]}, "fn_var_occur": {"_ANSIBLE_ARGS": [["basic", "_ANSIBLE_ARGS", "None"]], "__getitem__": [["_os_environ", "__getitem__", "environ", "__getitem__"]], "__setitem__": [["_os_environ", "__setitem__", "environ", "__setitem__"]], "am": [["am", "basic", "AnsibleModule", "argument_spec", "dict"], ["am", "selinux_enabled", "MagicMock"], ["am", "selinux_context", "MagicMock"], ["am", "selinux_default_context", "MagicMock"], ["am", "set_context_if_different", "MagicMock"], ["am", "selinux_enabled", "return_value", "False"], ["am", "set_context_if_different", "reset_mock"], ["am", "atomic_move"], ["am", "selinux_default_context", "return_value", "mock_context"], ["am", "selinux_enabled", "return_value", "True"], ["am", "set_context_if_different", "reset_mock"], ["am", "selinux_default_context", "reset_mock"], ["am", "atomic_move"], ["self", "assertEqual", "am", "selinux_default_context", "call_args_list", "call"], ["self", "assertEqual", "am", "set_context_if_different", "call_args_list", "call", "mock_context", "False"], ["am", "selinux_enabled", "return_value", "False"], ["am", "set_context_if_different", "reset_mock"], ["am", "atomic_move"], ["am", "selinux_context", "return_value", "mock_context"], ["am", "selinux_enabled", "return_value", "True"], ["am", "set_context_if_different", "reset_mock"], ["am", "selinux_default_context", "reset_mock"], ["am", "atomic_move"], ["self", "assertEqual", "am", "selinux_context", "call_args_list", "call"], ["self", "assertEqual", "am", "set_context_if_different", "call_args_list", "call", "mock_context", "False"], ["self", "assertRaises", "OSError", "am", "atomic_move"], ["am", "atomic_move"], ["self", "assertRaises", "SystemExit", "am", "atomic_move"], ["am", "selinux_enabled", "return_value", "False"], ["self", "assertRaises", "SystemExit", "am", "atomic_move"], ["am", "selinux_enabled", "return_value", "False"], ["am", "atomic_move"], ["am", "selinux_default_context", "return_value", "mock_context"], ["am", "selinux_enabled", "return_value", "True"], ["am", "atomic_move"]], "environ": [["environ", "dict"], ["_os_environ", "__getitem__", "environ", "__getitem__"], ["_os_environ", "__setitem__", "environ", "__setitem__"]], "mock_context": [["mock_context", "MagicMock"], ["am", "selinux_default_context", "return_value", "mock_context"], ["self", "assertEqual", "am", "set_context_if_different", "call_args_list", "call", "mock_context", "False"], ["mock_context", "MagicMock"], ["am", "selinux_context", "return_value", "mock_context"], ["self", "assertEqual", "am", "set_context_if_different", "call_args_list", "call", "mock_context", "False"], ["mock_context", "MagicMock"], ["am", "selinux_default_context", "return_value", "mock_context"]], "mock_stat1": [["mock_stat1", "MagicMock"], ["_os_stat", "return_value", "mock_stat1", "mock_stat2", "mock_stat3"]], "mock_stat2": [["mock_stat2", "MagicMock"], ["_os_stat", "return_value", "mock_stat1", "mock_stat2", "mock_stat3"]], "mock_stat3": [["mock_stat3", "MagicMock"], ["_os_stat", "return_value", "mock_stat1", "mock_stat2", "mock_stat3"]], "return_value": [["_os_getlogin", "return_value"], ["_os_getuid", "return_value"], ["_pwd_getpwuid", "return_value"], ["_os_rename", "return_value", "None"], ["am", "selinux_enabled", "return_value", "False"], ["_os_getlogin", "return_value"], ["_os_getuid", "return_value"], ["_pwd_getpwuid", "return_value"], ["_os_rename", "return_value", "None"], ["am", "selinux_default_context", "return_value", "mock_context"], ["am", "selinux_enabled", "return_value", "True"], ["_os_getuid", "return_value"], ["_pwd_getpwuid", "return_value"], ["_os_rename", "return_value", "None"], ["am", "selinux_enabled", "return_value", "False"], ["_os_getlogin", "return_value"], ["_os_getuid", "return_value"], ["_pwd_getpwuid", "return_value"], ["_os_rename", "return_value", "None"], ["am", "selinux_context", "return_value", "mock_context"], ["am", "selinux_enabled", "return_value", "True"], ["_os_getlogin", "return_value"], ["_os_getuid", "return_value"], ["_pwd_getpwuid", "return_value"], ["_os_rename", "return_value", "None"], ["_os_getlogin", "return_value"], ["_os_getuid", "return_value"], ["_pwd_getpwuid", "return_value"], ["_os_rename", "return_value", "None"], ["_os_getlogin", "return_value"], ["_os_getuid", "return_value"], ["_pwd_getpwuid", "return_value"], ["_os_getlogin", "return_value"], ["_os_getuid", "return_value"], ["_os_close", "return_value", "None"], ["_pwd_getpwuid", "return_value"], ["_tempfile_mkstemp", "return_value", "None"], ["am", "selinux_enabled", "return_value", "False"], ["_os_getlogin", "return_value"], ["_os_getuid", "return_value"], ["_pwd_getpwuid", "return_value"], ["_os_stat", "return_value", "mock_stat1", "mock_stat2", "mock_stat3"], ["_tempfile_mkstemp", "return_value", "None"], ["am", "selinux_enabled", "return_value", "False"], ["_os_getlogin", "return_value"], ["_os_getuid", "return_value"], ["_pwd_getpwuid", "return_value"], ["_tempfile_mkstemp", "return_value", "None", "None"], ["am", "selinux_default_context", "return_value", "mock_context"], ["am", "selinux_enabled", "return_value", "True"]], "selinux_context": [["am", "selinux_context", "MagicMock"], ["am", "selinux_context", "return_value", "mock_context"], ["self", "assertEqual", "am", "selinux_context", "call_args_list", "call"]], "selinux_default_context": [["am", "selinux_default_context", "MagicMock"], ["am", "selinux_default_context", "return_value", "mock_context"], ["am", "selinux_default_context", "reset_mock"], ["self", "assertEqual", "am", "selinux_default_context", "call_args_list", "call"], ["am", "selinux_default_context", "reset_mock"], ["am", "selinux_default_context", "return_value", "mock_context"]], "selinux_enabled": [["am", "selinux_enabled", "MagicMock"], ["am", "selinux_enabled", "return_value", "False"], ["am", "selinux_enabled", "return_value", "True"], ["am", "selinux_enabled", "return_value", "False"], ["am", "selinux_enabled", "return_value", "True"], ["am", "selinux_enabled", "return_value", "False"], ["am", "selinux_enabled", "return_value", "False"], ["am", "selinux_enabled", "return_value", "True"]], "set_context_if_different": [["am", "set_context_if_different", "MagicMock"], ["am", "set_context_if_different", "reset_mock"], ["am", "set_context_if_different", "reset_mock"], ["self", "assertEqual", "am", "set_context_if_different", "call_args_list", "call", "mock_context", "False"], ["am", "set_context_if_different", "reset_mock"], ["am", "set_context_if_different", "reset_mock"], ["self", "assertEqual", "am", "set_context_if_different", "call_args_list", "call", "mock_context", "False"]], "side_effect": [["_os_path_exists", "side_effect", "False", "False"], ["_os_umask", "side_effect"], ["_os_path_exists", "side_effect", "False", "False"], ["_os_umask", "side_effect"], ["_os_path_exists", "side_effect", "True", "True"], ["_os_getlogin", "side_effect", "OSError"], ["_os_umask", "side_effect"], ["_os_stat", "side_effect", "stat1"], ["_os_path_exists", "side_effect", "True", "True"], ["_os_umask", "side_effect"], ["_os_stat", "side_effect", "stat1"], ["_os_stat", "side_effect", "OSError"], ["_os_path_exists", "side_effect", "True", "True"], ["_os_umask", "side_effect"], ["_os_stat", "side_effect", "OSError", "errno", "EPERM"], ["_os_path_exists", "side_effect", "True", "True"], ["_os_umask", "side_effect"], ["_os_path_exists", "side_effect", "False", "False"], ["_os_umask", "side_effect"], ["_os_rename", "side_effect", "OSError", "errno", "EIO"], ["_os_path_exists", "side_effect", "False", "False"], ["_os_umask", "side_effect"], ["_os_rename", "side_effect", "OSError", "errno", "EPERM", "None"], ["_tempfile_mkstemp", "side_effect", "OSError"], ["_os_path_exists", "side_effect", "False", "False", "False"], ["_os_umask", "side_effect"], ["_os_rename", "side_effect", "OSError", "errno", "EPERM", "None"], ["_os_stat", "side_effect", "None"], ["_tempfile_mkstemp", "side_effect", "None"], ["_os_path_exists", "side_effect", "False", "False", "False"], ["_os_umask", "side_effect"], ["_os_rename", "side_effect", "OSError", "errno", "EPERM", "None"]], "st_gid": [["stat1", "st_gid"], ["stat1", "st_gid"]], "st_mode": [["stat1", "st_mode"], ["stat1", "st_mode"]], "st_uid": [["stat1", "st_uid"], ["stat1", "st_uid"]], "stat1": [["stat1", "MagicMock"], ["stat1", "st_mode"], ["stat1", "st_uid"], ["stat1", "st_gid"], ["_os_stat", "side_effect", "stat1"], ["stat1", "MagicMock"], ["stat1", "st_mode"], ["stat1", "st_uid"], ["stat1", "st_gid"], ["_os_stat", "side_effect", "stat1"]]}, "name": "test_module_utils_basic_ansible_module_atomic_move", "params": {"_os_chmod": "", "_os_chown": "", "_os_close": "", "_os_environ": "", "_os_getlogin": "", "_os_getuid": "", "_os_path_exists": "", "_os_rename": "", "_os_stat": "", "_os_umask": "", "_pwd_getpwuid": "", "_shutil_copy2": "", "_shutil_copyfileobj": "", "_shutil_move": "", "_tempfile_mkstemp": "", "self": ""}, "params_descr": {"_os_chmod": "", "_os_chown": "", "_os_close": "", "_os_environ": "", "_os_getlogin": "", "_os_getuid": "", "_os_path_exists": "", "_os_rename": "", "_os_stat": "", "_os_umask": "", "_pwd_getpwuid": "", "_shutil_copy2": "", "_shutil_copyfileobj": "", "_shutil_move": "", "_tempfile_mkstemp": "", "self": ""}, "params_occur": {"_os_chmod": [["_os_chmod", "reset_mock"], ["self", "assertEqual", "_os_chmod", "call_args_list", "call", "basic", "DEFAULT_PERM"], ["_os_chmod", "reset_mock"], ["self", "assertEqual", "_os_chmod", "call_args_list", "call", "basic", "DEFAULT_PERM"], ["_os_chmod", "reset_mock"], ["_os_chmod", "reset_mock"]], "_os_chown": [["_os_chown", "reset_mock"], ["_os_chown", "reset_mock"], ["_os_chown", "reset_mock"], ["_os_chown", "reset_mock"]], "_os_close": [["_os_close", "return_value", "None"]], "_os_environ": [["_os_environ", "__getitem__", "environ", "__getitem__"], ["_os_environ", "__setitem__", "environ", "__setitem__"]], "_os_getlogin": [["_os_getlogin", "return_value"], ["_os_getlogin", "return_value"], ["_os_getlogin", "side_effect", "OSError"], ["_os_getlogin", "return_value"], ["_os_getlogin", "return_value"], ["_os_getlogin", "return_value"], ["_os_getlogin", "return_value"], ["_os_getlogin", "return_value"], ["_os_getlogin", "return_value"], ["_os_getlogin", "return_value"]], "_os_getuid": [["_os_getuid", "return_value"], ["_os_getuid", "return_value"], ["_os_getuid", "return_value"], ["_os_getuid", "return_value"], ["_os_getuid", "return_value"], ["_os_getuid", "return_value"], ["_os_getuid", "return_value"], ["_os_getuid", "return_value"], ["_os_getuid", "return_value"], ["_os_getuid", "return_value"]], "_os_path_exists": [["_os_path_exists", "side_effect", "False", "False"], ["_os_path_exists", "side_effect", "False", "False"], ["_os_path_exists", "side_effect", "True", "True"], ["_os_path_exists", "side_effect", "True", "True"], ["_os_path_exists", "side_effect", "True", "True"], ["_os_path_exists", "side_effect", "True", "True"], ["_os_path_exists", "side_effect", "False", "False"], ["_os_path_exists", "side_effect", "False", "False"], ["_os_path_exists", "side_effect", "False", "False", "False"], ["_os_path_exists", "side_effect", "False", "False", "False"]], "_os_rename": [["_os_rename", "return_value", "None"], ["_os_rename", "assert_called_with"], ["_os_rename", "return_value", "None"], ["_os_rename", "assert_called_with"], ["_os_rename", "return_value", "None"], ["_os_rename", "assert_called_with"], ["_os_rename", "return_value", "None"], ["_os_rename", "assert_called_with"], ["_os_rename", "return_value", "None"], ["_os_rename", "return_value", "None"], ["_os_rename", "side_effect", "OSError", "errno", "EIO"], ["_os_rename", "side_effect", "OSError", "errno", "EPERM", "None"], ["_os_rename", "side_effect", "OSError", "errno", "EPERM", "None"], ["_os_rename", "side_effect", "OSError", "errno", "EPERM", "None"]], "_os_stat": [["_os_stat", "side_effect", "stat1"], ["_os_stat", "side_effect", "stat1"], ["_os_stat", "side_effect", "OSError"], ["_os_stat", "side_effect", "OSError", "errno", "EPERM"], ["_os_stat", "return_value", "mock_stat1", "mock_stat2", "mock_stat3"], ["_os_stat", "side_effect", "None"]], "_os_umask": [["_os_umask", "side_effect"], ["_os_umask", "side_effect"], ["_os_umask", "side_effect"], ["_os_umask", "side_effect"], ["_os_umask", "side_effect"], ["_os_umask", "side_effect"], ["_os_umask", "side_effect"], ["_os_umask", "side_effect"], ["_os_umask", "side_effect"], ["_os_umask", "side_effect"]], "_pwd_getpwuid": [["_pwd_getpwuid", "return_value"], ["_pwd_getpwuid", "return_value"], ["_pwd_getpwuid", "return_value"], ["_pwd_getpwuid", "return_value"], ["_pwd_getpwuid", "return_value"], ["_pwd_getpwuid", "return_value"], ["_pwd_getpwuid", "return_value"], ["_pwd_getpwuid", "return_value"], ["_pwd_getpwuid", "return_value"], ["_pwd_getpwuid", "return_value"]], "_shutil_copy2": [], "_shutil_copyfileobj": [], "_shutil_move": [], "_tempfile_mkstemp": [["_tempfile_mkstemp", "return_value", "None"], ["_tempfile_mkstemp", "side_effect", "OSError"], ["_tempfile_mkstemp", "return_value", "None"], ["_tempfile_mkstemp", "side_effect", "None"], ["_tempfile_mkstemp", "return_value", "None", "None"]], "self": [["self", "assertEqual", "_os_chmod", "call_args_list", "call", "basic", "DEFAULT_PERM"], ["self", "assertEqual", "_os_chmod", "call_args_list", "call", "basic", "DEFAULT_PERM"], ["self", "assertEqual", "am", "selinux_default_context", "call_args_list", "call"], ["self", "assertEqual", "am", "set_context_if_different", "call_args_list", "call", "mock_context", "False"], ["self", "assertEqual", "am", "selinux_context", "call_args_list", "call"], ["self", "assertEqual", "am", "set_context_if_different", "call_args_list", "call", "mock_context", "False"], ["self", "assertRaises", "OSError", "am", "atomic_move"], ["self", "assertRaises", "SystemExit", "am", "atomic_move"], ["self", "assertRaises", "SystemExit", "am", "atomic_move"]]}, "params_p": {"_os_chmod": [["unittesmock.MagicMock", 0.8029486750096247], ["unittesmock.Mock", 0.10689479320019316], ["bool", 0.09015653179018221]], "_os_chown": [["tests.test_util.aiohttp.AiohttpClientMocker", 0.4268751268831368], ["mode.utils.mocks.Mock", 0.09527027431450522], ["Iterable", 0.09351418912901326], ["unittesmock.Mock", 0.09292857521658496]], "_os_close": [["unittesmock.MagicMock", 0.6650954012607453], ["tests.async_mock.MagicMock", 0.1020812006014041]], "_os_environ": [["str", 0.3274939170826652], ["Dict[str, Optional[str]]", 0.13430177691265285]], "_os_getlogin": [["str", 0.1726913203240942], ["bool", 0.1726913203240942], ["unittesmock.MagicMock", 0.08827322572148313], ["unittesmock.Mock", 0.08685110797336006], ["tests.test_util.aiohttp.AiohttpClientMocker", 0.0863456601620471]], "_os_getuid": [["int", 0.423457906558711], ["bool", 0.2200866571662749], ["str", 0.18612538269977869], ["unittesmock.MagicMock", 0.0890035545892562], ["unittesmock.Mock", 0.08132649898597932]], "_os_path_exists": [["unittesmock.Mock", 0.10900194808034895]], "_os_rename": [["str", 0.3961682707982699], ["Optional[Dict]", 0.12904285741206534]], "_os_stat": [["bytes", 0.11060415652514445], ["Tuple[int, int]", 0.09182083073131261], ["unittesmock.MagicMock", 0.08842780827874464], ["str", 0.08504782926928918], ["Optional[str]", 0.08436940287126371]], "_os_umask": [["cli_ui.tests.MessageRecorder", 0.5758948080872361], ["str", 0.08486396699380273]], "_pwd_getpwuid": [["str", 0.31593441964863755], ["int", 0.1830271568388933], ["unittesmock.MagicMock", 0.18285396779696608], ["unittesmock.Mock", 0.132620961491949], ["Type[Any]", 0.10066237089408096], ["Iterable[str]", 0.08490112332947321]], "_shutil_copy2": [["bool", 0.2438259345839476], ["List[str]", 0.20371226582073068], ["cli_ui.tests.MessageRecorder", 0.10565752528606691], ["Optional[bool]", 0.08500295520163036], ["str", 0.0794910905116864]], "_shutil_copyfileobj": [["bool", 0.2438259345839476], ["List[str]", 0.20371226582073068], ["cli_ui.tests.MessageRecorder", 0.10565752528606691], ["Optional[bool]", 0.08500295520163036], ["str", 0.0794910905116864]], "_shutil_move": [["bool", 0.2438259345839476], ["List[str]", 0.20371226582073068], ["cli_ui.tests.MessageRecorder", 0.10565752528606691], ["Optional[bool]", 0.08500295520163036], ["str", 0.0794910905116864]], "_tempfile_mkstemp": [["str", 0.12907655233094084], ["Optional[Tuple[float, float]]", 0.11512953369674711]], "args": [], "kwargs": [], "self": []}, "q_name": "TestModuleUtilsBasic.test_module_utils_basic_ansible_module_atomic_move", "ret_exprs": [], "ret_type": "", "variables": {"_ANSIBLE_ARGS": "", "__getitem__": "", "__setitem__": "", "am": "", "environ": "", "mock_context": "", "mock_stat1": "", "mock_stat2": "", "mock_stat3": "", "return_value": "", "selinux_context": "", "selinux_default_context": "", "selinux_enabled": "", "set_context_if_different": "", "side_effect": "", "st_gid": "", "st_mode": "", "st_uid": "", "stat1": ""}, "variables_p": {"_ANSIBLE_ARGS": [["str", 0.5638072338800818], ["property", 0.08157648713918593], ["List[str]", 0.07946294503528802]], "__getitem__": [["Dict[str, Any]", 0.28118099611749553], ["Dict[int, str]", 0.14689585970697747], ["Dict[str, str]", 0.12151638504036136], ["str", 0.10295375056972447], ["Dict[str, Dict[str, Any]]", 0.09078363538076596], ["List[str]", 0.06425729126842666]], "__setitem__": [["Dict[str, Any]", 0.28118099611749553], ["Dict[int, str]", 0.14689585970697747], ["Dict[str, str]", 0.12151638504036136], ["str", 0.10295375056972447], ["Dict[str, Dict[str, Any]]", 0.09078363538076596], ["List[str]", 0.06425729126842666]], "am": [["int", 0.21527922033179192], ["hashstore.tests.TestSetup", 0.1071516369370395], ["Dict[str, Union[Any, Any, Any]]", 0.10548282081999535], ["tuple", 0.08867207602694505]], "environ": [["str", 0.36282076105836425], ["bool", 0.16040554313135277], ["Dict[str, str]", 0.09977339008159564], ["Dict[str, float]", 0.09977339008159564], ["List[str]", 0.0776801354839003]], "mock_context": [["unittesmock.MagicMock", 0.505152841055269], ["unittesmock.Mock", 0.4001292390080657], ["mock.Mock", 0.09471791993666531]], "mock_stat1": [["unittesmock.Mock", 0.5039962442719947], ["unittesmock.MagicMock", 0.4960037557280052]], "mock_stat2": [["unittesmock.Mock", 0.5039962442719947], ["unittesmock.MagicMock", 0.4960037557280052]], "mock_stat3": [["unittesmock.Mock", 0.5039962442719947], ["unittesmock.MagicMock", 0.4960037557280052]], "return_value": [["int", 0.44265065349055915], ["Dict[str, object]", 0.09992078839233973], ["frozenset[str]", 0.09276015281352024], ["str", 0.09024616562936709]], "selinux_context": [["unittesmock.Mock", 0.27058380349472866], ["List[unittesmock.MagicMock]", 0.220985385305404], ["Union[mock.AsyncMock, mock.MagicMock]", 0.2006152811668367], ["mock.Mock", 0.10794656987635914]], "selinux_default_context": [["unittesmock.Mock", 0.37973674054484396], ["unittesmock.MagicMock", 0.2836695751351268], ["mock.Mock", 0.13690320333196382]], "selinux_enabled": [["int", 0.19563187087170586], ["Dict[int, Dict[str, Any]]", 0.12563384684090864], ["str", 0.12563384684090864], ["unittesmock.Mock", 0.0923180458183233]], "set_context_if_different": [["str", 0.40820687522317267], ["Dict[str, Any]", 0.18421404183534243], ["dict", 0.123579052182409], ["int", 0.09234345775115703]], "side_effect": [["tests.golem.docker.test_hypervisor.MockDockerManager", 0.1508365841612209], ["list", 0.10199286820789183], ["float", 0.08404925654143496]], "st_gid": [["bytes", 0.20457949523594635], ["str", 0.11303574741508508], ["Dict[str, Dict[str, Any]]", 0.10503142708943178], ["Dict[str, Set[str]]", 0.10171887464044899], ["Pattern[str]", 0.08954228166369779], ["int", 0.08602275695530498]], "st_mode": [["int", 0.22196280226231876], ["List[List[int]]", 0.1866461324477071], ["float", 0.13340039762191502], ["Dict[str, Union[Any, Any, Any]]", 0.10096245569887373], ["List[int]", 0.0918857220329869], ["list", 0.0902737036660571], ["Tuple[str, str, str, str, str, str, str, str]", 0.0897535903433401], ["str", 0.08511519592680118]], "st_uid": [["int", 0.8118709233444285], ["Tuple[bool]", 0.1070640492948869], ["str", 0.08106502736068477]], "stat1": [["unittesmock.Mock", 0.5235116396108883], ["unittesmock.MagicMock", 0.18570687348780796], ["mock.MagicMock", 0.09213586982489982], ["io.StringIO", 0.09139848705074063]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[998, 4], [1036, 85]], "fn_var_ln": {"_ANSIBLE_ARGS": [[1001, 8], [1001, 27]], "am": [[1003, 8], [1003, 10]], "mock_stat": [[1007, 8], [1007, 17]], "st_mode": [[1035, 8], [1035, 25]]}, "fn_var_occur": {"_ANSIBLE_ARGS": [["basic", "_ANSIBLE_ARGS", "None"]], "am": [["am", "basic", "AnsibleModule", "argument_spec", "dict"], ["self", "assertEqual", "am", "_symbolic_mode_to_octal", "mock_stat"], ["self", "assertEqual", "am", "_symbolic_mode_to_octal", "mock_stat"], ["self", "assertEqual", "am", "_symbolic_mode_to_octal", "mock_stat"], ["self", "assertEqual", "am", "_symbolic_mode_to_octal", "mock_stat"], ["self", "assertEqual", "am", "_symbolic_mode_to_octal", "mock_stat"], ["self", "assertEqual", "am", "_symbolic_mode_to_octal", "mock_stat"], ["self", "assertEqual", "am", "_symbolic_mode_to_octal", "mock_stat"], ["self", "assertEqual", "am", "_symbolic_mode_to_octal", "mock_stat"], ["self", "assertEqual", "am", "_symbolic_mode_to_octal", "mock_stat"], ["self", "assertEqual", "am", "_symbolic_mode_to_octal", "mock_stat"], ["self", "assertEqual", "am", "_symbolic_mode_to_octal", "mock_stat"], ["self", "assertEqual", "am", "_symbolic_mode_to_octal", "mock_stat"], ["self", "assertEqual", "am", "_symbolic_mode_to_octal", "mock_stat"], ["self", "assertEqual", "am", "_symbolic_mode_to_octal", "mock_stat"], ["self", "assertEqual", "am", "_symbolic_mode_to_octal", "mock_stat"], ["self", "assertRaises", "ValueError", "am", "_symbolic_mode_to_octal", "mock_stat"]], "mock_stat": [["mock_stat", "MagicMock"], ["mock_stat", "st_mode"], ["self", "assertEqual", "am", "_symbolic_mode_to_octal", "mock_stat"], ["self", "assertEqual", "am", "_symbolic_mode_to_octal", "mock_stat"], ["self", "assertEqual", "am", "_symbolic_mode_to_octal", "mock_stat"], ["self", "assertEqual", "am", "_symbolic_mode_to_octal", "mock_stat"], ["self", "assertEqual", "am", "_symbolic_mode_to_octal", "mock_stat"], ["mock_stat", "st_mode"], ["self", "assertEqual", "am", "_symbolic_mode_to_octal", "mock_stat"], ["self", "assertEqual", "am", "_symbolic_mode_to_octal", "mock_stat"], ["self", "assertEqual", "am", "_symbolic_mode_to_octal", "mock_stat"], ["self", "assertEqual", "am", "_symbolic_mode_to_octal", "mock_stat"], ["self", "assertEqual", "am", "_symbolic_mode_to_octal", "mock_stat"], ["mock_stat", "st_mode"], ["self", "assertEqual", "am", "_symbolic_mode_to_octal", "mock_stat"], ["self", "assertEqual", "am", "_symbolic_mode_to_octal", "mock_stat"], ["self", "assertEqual", "am", "_symbolic_mode_to_octal", "mock_stat"], ["self", "assertEqual", "am", "_symbolic_mode_to_octal", "mock_stat"], ["self", "assertEqual", "am", "_symbolic_mode_to_octal", "mock_stat"], ["mock_stat", "st_mode"], ["self", "assertRaises", "ValueError", "am", "_symbolic_mode_to_octal", "mock_stat"]], "st_mode": [["mock_stat", "st_mode"], ["mock_stat", "st_mode"], ["mock_stat", "st_mode"], ["mock_stat", "st_mode"]]}, "name": "test_module_utils_basic_ansible_module__symbolic_mode_to_octal", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "am", "_symbolic_mode_to_octal", "mock_stat"], ["self", "assertEqual", "am", "_symbolic_mode_to_octal", "mock_stat"], ["self", "assertEqual", "am", "_symbolic_mode_to_octal", "mock_stat"], ["self", "assertEqual", "am", "_symbolic_mode_to_octal", "mock_stat"], ["self", "assertEqual", "am", "_symbolic_mode_to_octal", "mock_stat"], ["self", "assertEqual", "am", "_symbolic_mode_to_octal", "mock_stat"], ["self", "assertEqual", "am", "_symbolic_mode_to_octal", "mock_stat"], ["self", "assertEqual", "am", "_symbolic_mode_to_octal", "mock_stat"], ["self", "assertEqual", "am", "_symbolic_mode_to_octal", "mock_stat"], ["self", "assertEqual", "am", "_symbolic_mode_to_octal", "mock_stat"], ["self", "assertEqual", "am", "_symbolic_mode_to_octal", "mock_stat"], ["self", "assertEqual", "am", "_symbolic_mode_to_octal", "mock_stat"], ["self", "assertEqual", "am", "_symbolic_mode_to_octal", "mock_stat"], ["self", "assertEqual", "am", "_symbolic_mode_to_octal", "mock_stat"], ["self", "assertEqual", "am", "_symbolic_mode_to_octal", "mock_stat"], ["self", "assertRaises", "ValueError", "am", "_symbolic_mode_to_octal", "mock_stat"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestModuleUtilsBasic.test_module_utils_basic_ansible_module__symbolic_mode_to_octal", "ret_exprs": [], "ret_type": "", "variables": {"_ANSIBLE_ARGS": "", "am": "", "mock_stat": "", "st_mode": ""}, "variables_p": {"_ANSIBLE_ARGS": [["str", 0.5638072338800818], ["property", 0.08157648713918593], ["List[str]", 0.07946294503528802]], "am": [["tests.utilities.factories.FakeCompletedProcess", 0.2943539604240167], ["Dict[str, Any]", 0.13397674836367396], ["pandas.io.pytables.IndexCol", 0.10925516301691984], ["float", 0.08349821143011041]], "mock_stat": [["unittesmock.MagicMock", 0.5063358674189025], ["mock.Mock", 0.311081119184405], ["unittesmock.Mock", 0.18258301339669258]], "st_mode": [["int", 0.4119790914626329], ["List[Union[Any, Any]]", 0.27658681742758967], ["Dict[str, int]", 0.20353770471838956], ["staticmethod", 0.10789638639138788]]}}], "name": "TestModuleUtilsBasic", "q_name": "TestModuleUtilsBasic", "variables": {}, "variables_p": {}}], "funcs": [], "imports": ["__future__", "absolute_import", "division", "errno", "json", "os", "sys", "io", "BytesIO", "StringIO", "builtins", "__builtin__", "builtins", "units", "mock", "procenv", "ModuleTestCase", "swap_stdin_and_argv", "ansible", "compat", "tests", "unittest", "ansible", "compat", "tests", "mock", "patch", "MagicMock", "mock_open", "Mock", "call", "ansible", "module_utils", "basic", "get_platform", "ansible", "module_utils", "basic", "get_distribution", "ansible", "module_utils", "basic", "get_distribution_version", "ansible", "module_utils", "basic", "load_platform_subclass", "ansible", "module_utils", "basic", "json_dict_unicode_to_bytes", "json_dict_bytes_to_unicode", "ansible", "module_utils", "basic", "get_module_path", "ansible", "module_utils", "basic", "ansible", "module_utils", "basic", "ansible", "module_utils", "basic", "ansible", "module_utils", "basic", "ansible", "module_utils", "basic", "ansible", "module_utils", "basic", "ansible", "module_utils", "basic", "ansible", "module_utils", "basic", "ansible", "module_utils", "basic", "ansible", "module_utils", "basic", "ansible", "module_utils", "basic", "ansible", "module_utils", "basic", "ansible", "module_utils", "basic", "ansible", "module_utils", "basic", "ansible", "module_utils", "basic", "ansible", "module_utils", "basic"], "mod_var_ln": {"__metaclass__": [[22, 0], [22, 13]], "realimport": [[40, 0], [40, 10]]}, "mod_var_occur": {"__metaclass__": [], "realimport": [["realimport", "name", "args", "kwargs"], ["realimport", "name", "args", "kwargs"], ["realimport", "name", "args", "kwargs"], ["realimport", "name", "args", "kwargs"], ["realimport", "name", "args", "kwargs"]]}, "no_types_annot": {"D": 0, "I": 0, "U": 192}, "session_id": "TxzYEM06whiESxUZG-96XiIue1eJy3sHcL0RnkoLm3k", "set": null, "tc": [false, null], "type_annot_cove": 0.0, "typed_seq": "", "untyped_seq": "", "variables": {"__metaclass__": "", "realimport": ""}, "variables_p": {"__metaclass__": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "realimport": [["list", 0.4036153622727593], ["List[Pattern[Any]]", 0.2888006701085122], ["Dict[str, Union[Any, Any, Any]]", 0.2138941872449596], ["List[str]", 0.09368978037376899]]}}}