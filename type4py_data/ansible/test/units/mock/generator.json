{"error": null, "response": {"classes": [], "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[26, 4], [27, 35]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_method", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["func", "self", "args", "kwargs"]]}, "params_p": {"args": [], "kwargs": [], "self": [["int", 0.20057895354537175], ["Tuple[int]", 0.09325816856194756]]}, "q_name": "make_method.<locals>.test_method", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[24, 0], [39, 22]], "fn_var_ln": {"__name__": [[38, 4], [38, 24]], "arg_list": [[32, 4], [32, 12]], "arg_string": [[30, 4], [30, 14]], "kwarg_string": [[31, 4], [31, 16]]}, "fn_var_occur": {"__name__": [["test_method", "__name__", "format", "func", "__name__", "join", "arg_list"]], "arg_list": [["arg_list", "append", "arg_string"], ["arg_list", "append", "kwarg_string"], ["test_method", "__name__", "format", "func", "__name__", "join", "arg_list"]], "arg_string": [["arg_string", "join", "repr", "a", "a", "args"], ["arg_list", "append", "arg_string"]], "kwarg_string": [["kwarg_string", "join", "format", "item", "repr", "item", "item", "kwargs", "items"], ["arg_list", "append", "kwarg_string"]]}, "name": "make_method", "params": {"args": "", "func": "", "kwargs": ""}, "params_descr": {"args": "", "func": "", "kwargs": ""}, "params_occur": {"args": [["arg_string", "join", "repr", "a", "a", "args"]], "func": [["test_method", "__name__", "format", "func", "__name__", "join", "arg_list"]], "kwargs": [["kwarg_string", "join", "format", "item", "repr", "item", "item", "kwargs", "items"]]}, "params_p": {"args": [], "func": [["Type", 0.37692265480164966], ["str", 0.22999480902318342], ["bool", 0.09878010247781467], ["\"path\"", 0.09248864715348315]], "kwargs": []}, "q_name": "make_method", "ret_exprs": ["return test_method"], "ret_type": "", "ret_type_p": [["bool", 0.32311245864047067], ["dict", 0.19343257931825292], ["List[\"TaskNode\"]", 0.094133344666104], ["List[str]", 0.09154396234503555], ["Counter", 0.09013729314831329]], "variables": {"__name__": "", "arg_list": "", "arg_string": "", "kwarg_string": ""}, "variables_p": {"__name__": [["str", 0.7387627095171625], ["List[str]", 0.09692986894073959], ["frozenset[str]", 0.08612007697568634], ["Optional[str]", 0.0781873445664116]], "arg_list": [["list", 0.7983186722193507], ["str", 0.20168132778064932]], "arg_string": [["str", 0.9054635962947732], ["Iterable[str]", 0.0945364037052266]], "kwarg_string": [["str", 0.7207849867814643], ["List[str]", 0.18366132293586715]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[56, 4], [69, 18]], "fn_var_ln": {"args": [[65, 16], [65, 20]], "kwargs": [[66, 16], [66, 22]], "test_method": [[67, 12], [67, 23]]}, "fn_var_occur": {"args": [["args", "combined_arg"], ["args", "combined_arg"], ["test_method", "make_method", "func", "args", "kwargs"]], "kwargs": [["kwargs", "combined_arg"], ["kwargs", "combined_arg"], ["test_method", "make_method", "func", "args", "kwargs"]], "test_method": [["test_method", "make_method", "func", "args", "kwargs"], ["setattr", "cls", "test_method", "__name__", "test_method"]]}, "name": "wrapper", "params": {"cls": ""}, "params_descr": {"cls": ""}, "params_occur": {"cls": [["setattr", "cls", "test_method", "__name__", "test_method"]]}, "params_p": {"args": [], "cls": [["Union[Dict, Tuple]", 0.8037004582245261], ["dict", 0.09405824101739015]], "kwargs": []}, "q_name": "add_method.<locals>.wrapper", "ret_exprs": ["return cls"], "ret_type": "", "ret_type_p": [["Dict[str, Any]", 0.1863234525232297], ["str", 0.10051896894600423], ["Callable[[str], T]", 0.09616632192770294]], "variables": {"args": "", "kwargs": "", "test_method": ""}, "variables_p": {"args": [], "kwargs": [["str", 0.09266733242101223]], "test_method": [["str", 0.3049888975948046], ["List[str]", 0.19470482313392978], ["int", 0.10429327448408408], ["Tuple[str, str, str, str, str]", 0.09682568224627779], ["Tuple[Literal, Literal, Literal]", 0.09410758904753778], ["Dict[str, Union[Any, Any]]", 0.09110841154262801]]}}, {"docstring": {"func": "Add a test case via a class decorator.", "long_descr": "nose uses generators for this but doesn't work with unittest.TestCase\nsubclasses.  So we have to write our own.\n\nThe first argument to this decorator is a test function.  All subsequent\narguments are the arguments to create each generated test function with in\nthe following format:\n\nEach set of arguments is a two-tuple.  The first element is an iterable of\npositional arguments.  the second is a dict representing the kwargs.", "ret": null}, "fn_lc": [[42, 0], [71, 18]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "add_method", "params": {"combined_args": "", "func": ""}, "params_descr": {"combined_args": "", "func": ""}, "params_occur": {"combined_args": [], "func": []}, "params_p": {"args": [], "combined_args": [["list", 0.13966636798280388], ["Callable[[], Coroutine]", 0.08822709825004765], ["int", 0.08822709825004765], ["bool", 0.08537789645134292], ["Callable", 0.08442266039580437], ["str", 0.0832153935065673]], "func": [["list", 0.13966636798280388], ["Callable[[], Coroutine]", 0.08822709825004765], ["int", 0.08822709825004765], ["bool", 0.08537789645134292], ["Callable", 0.08442266039580437], ["str", 0.0832153935065673]], "kwargs": []}, "q_name": "add_method", "ret_exprs": ["return wrapper"], "ret_type": "", "ret_type_p": [["str", 0.3542590112397871], ["Tuple[int, int]", 0.11081518242373198], ["int", 0.0783469930922323]], "variables": {}, "variables_p": {}}], "imports": ["__future__", "absolute_import", "division", "print_function", "collections", "Mapping"], "mod_var_ln": {"__metaclass__": [[20, 0], [20, 13]]}, "mod_var_occur": {"__metaclass__": []}, "no_types_annot": {"D": 0, "I": 0, "U": 18}, "session_id": "9oJYyTC-cziFfNiJo4n-89_wIIxpOM4SM932f4KQ-ZY", "set": null, "tc": [false, null], "type_annot_cove": 0.0, "typed_seq": "", "untyped_seq": "", "variables": {"__metaclass__": ""}, "variables_p": {"__metaclass__": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]]}}}