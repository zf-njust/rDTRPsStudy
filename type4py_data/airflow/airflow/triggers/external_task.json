{"error": null, "response": {"classes": [{"cls_lc": [[32, 0], [96, 38]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[45, 4], [58, 42]], "fn_var_ln": {"dag_id": [[54, 8], [54, 19]], "execution_dates": [[57, 8], [57, 28]], "poll_interval": [[58, 8], [58, 26]], "states": [[56, 8], [56, 19]], "task_id": [[55, 8], [55, 20]]}, "fn_var_occur": {"dag_id": [["self", "dag_id", "dag_id"]], "execution_dates": [["self", "execution_dates", "execution_dates"]], "poll_interval": [["self", "poll_interval", "poll_interval"]], "states": [["self", "states", "states"]], "task_id": [["self", "task_id", "task_id"]]}, "name": "__init__", "params": {"dag_id": "builtins.str", "execution_dates": "builtins.list[datetime.datetime]", "poll_interval": "builtins.float", "self": "", "states": "builtins.list[builtins.str]", "task_id": "builtins.str"}, "params_descr": {"dag_id": "", "execution_dates": "", "poll_interval": "", "self": "", "states": "", "task_id": ""}, "params_occur": {"dag_id": [["self", "dag_id", "dag_id"]], "execution_dates": [["self", "execution_dates", "execution_dates"]], "poll_interval": [["self", "poll_interval", "poll_interval"]], "self": [["self", "dag_id", "dag_id"], ["self", "task_id", "task_id"], ["self", "states", "states"], ["self", "execution_dates", "execution_dates"], ["self", "poll_interval", "poll_interval"]], "states": [["self", "states", "states"]], "task_id": [["self", "task_id", "task_id"]]}, "params_p": {"args": [], "dag_id": [["str", 0.31845743291865847], ["int", 0.15745344868071354], ["bytes", 0.07171974191834363], ["Optional[int]", 0.06897329489340366]], "execution_dates": [["datetime.date", 0.2895866726249376], ["Optional[datetime.datetime]", 0.2524294485124648], ["str", 0.16485215573945033], ["Optional[str]", 0.11990823572055859], ["bool", 0.09267458366241246], ["List[datetime.date]", 0.08054890374017624]], "kwargs": [], "poll_interval": [["str", 0.7266744985391878], ["bool", 0.09694145459788442], ["zerver.models.Realm", 0.09607232069052077]], "self": [], "states": [["str", 0.7266744985391878], ["bool", 0.09694145459788442], ["zerver.models.Realm", 0.09607232069052077]], "task_id": [["str", 0.6032672056710482], ["Optional[str]", 0.1947826526523263], ["List[str]", 0.10369038272020738], ["int", 0.0982597589564182]]}, "q_name": "TaskStateTrigger.__init__", "ret_exprs": [], "ret_type": "", "variables": {"dag_id": "", "execution_dates": "", "poll_interval": "", "states": "", "task_id": ""}, "variables_p": {"dag_id": [["str", 0.47047988680775443], ["int", 0.33625919028958395], ["transfer.models.ShopID", 0.0880659743786638]], "execution_dates": [["int", 0.5375441017438568], ["datetime.timedelta", 0.12744558850995777], ["datetime.datetime.date", 0.11260481362224876], ["datetime.datetime.datetime", 0.10317410475561133]], "poll_interval": [["str", 0.30000000000000004], ["Dict[str, Any]", 0.1], ["dict", 0.1], ["int", 0.1]], "states": [["str", 0.44444444443999087], ["Tuple[int, str]", 0.22222222221999544], ["Set[str]", 1.002069413939684e-11]], "task_id": [["str", 0.8606180445218929], ["set", 0.1393819554781071]]}}, {"docstring": {"func": "Serializes TaskStateTrigger arguments and classpath.", "long_descr": null, "ret": null}, "fn_lc": [[60, 4], [71, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "serialize", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "dag_id", "self", "task_id", "self", "states", "self", "execution_dates", "self", "poll_interval"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TaskStateTrigger.serialize", "ret_exprs": ["return ( \"airflow.triggers.external_task.TaskStateTrigger\", { \"dag_id\": self.dag_id, \"task_id\": self.task_id, \"states\": self.states, \"execution_dates\": self.execution_dates, \"poll_interval\": self.poll_interval, },)"], "ret_type": "builtins.tuple[builtins.str, builtins.dict[builtins.str, typing.Any]]", "ret_type_p": [["core.models.DepositClaim", 0.10212256369033405], ["golem_messages.message.base.Message", 0.09665609326827083], ["int", 0.08973691283164956], ["str", 0.0884077016621114], ["raiden.utils.Address", 0.08790255616334879]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Checks periodically in the database to see if the task exists and has hit one of the states.", "long_descr": null, "ret": null}, "fn_lc": [[73, 4], [80, 51]], "fn_var_ln": {"num_tasks": [[77, 12], [77, 21]]}, "fn_var_occur": {"num_tasks": [["num_tasks", "self", "count_tasks"], ["num_tasks", "len", "self", "execution_dates"]]}, "name": "run", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["num_tasks", "self", "count_tasks"], ["num_tasks", "len", "self", "execution_dates"], ["asyncio", "sleep", "self", "poll_interval"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TaskStateTrigger.run", "ret_exprs": [], "ret_type": "typing.AsyncIterator[airflow.triggers.base.TriggerEvent]", "variables": {"num_tasks": ""}, "variables_p": {"num_tasks": [["int", 0.9999999999999999]]}}, {"docstring": {"func": "Count how many task instances in the database match our criteria.", "long_descr": null, "ret": null}, "fn_lc": [[84, 4], [96, 38]], "fn_var_ln": {"count": [[86, 8], [86, 13]]}, "fn_var_occur": {"count": [["count", "session", "query", "func", "count", "filter", "TaskInstance", "dag_id", "self", "dag_id", "TaskInstance", "task_id", "self", "task_id", "TaskInstance", "state", "in_", "self", "states", "TaskInstance", "execution_date", "in_", "self", "execution_dates", "scalar"], ["typing", "cast", "int", "count"]]}, "name": "count_tasks", "params": {"self": "", "session": "sqlalchemy.orm.Session"}, "params_descr": {"self": "", "session": ""}, "params_occur": {"self": [["count", "session", "query", "func", "count", "filter", "TaskInstance", "dag_id", "self", "dag_id", "TaskInstance", "task_id", "self", "task_id", "TaskInstance", "state", "in_", "self", "states", "TaskInstance", "execution_date", "in_", "self", "execution_dates", "scalar"]], "session": [["count", "session", "query", "func", "count", "filter", "TaskInstance", "dag_id", "self", "dag_id", "TaskInstance", "task_id", "self", "task_id", "TaskInstance", "state", "in_", "self", "states", "TaskInstance", "execution_date", "in_", "self", "execution_dates", "scalar"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "session": [["sqlalchemy.orm.session.Session", 0.3904577835422118], ["models.Queue", 0.16661151930839413], ["grouper.models.base.session.Session", 0.1609240581264751], ["grouper.models.group.Group", 0.1609240581264751], ["sqlalchemy.orm.Session", 0.06268625786984497], ["zerver.models.UserProfile", 0.0583963230265988]]}, "q_name": "TaskStateTrigger.count_tasks", "ret_exprs": ["return typing.cast(int, count)"], "ret_type": "int | None", "ret_type_p": [["str", 0.22191312342112926], ["Type[Any]", 0.10720244638164565], ["int", 0.0894195049903333]], "variables": {"count": ""}, "variables_p": {"count": [["Dict[str, str]", 0.11976513753723417], ["tuple", 0.11081124824083667], ["Optional[\"Lecture\"]", 0.10929298884736954], ["pydynasync.models.Changes", 0.09552562400411997], ["list", 0.09465627903794749], ["set", 0.09094897691997518], ["str", 0.0904032129756678]]}}], "name": "TaskStateTrigger", "q_name": "TaskStateTrigger", "variables": {}, "variables_p": {}}, {"cls_lc": [[99, 0], [157, 38]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[110, 4], [121, 42]], "fn_var_ln": {"dag_id": [[118, 8], [118, 19]], "execution_dates": [[120, 8], [120, 28]], "poll_interval": [[121, 8], [121, 26]], "states": [[119, 8], [119, 19]]}, "fn_var_occur": {"dag_id": [["self", "dag_id", "dag_id"]], "execution_dates": [["self", "execution_dates", "execution_dates"]], "poll_interval": [["self", "poll_interval", "poll_interval"]], "states": [["self", "states", "states"]]}, "name": "__init__", "params": {"dag_id": "builtins.str", "execution_dates": "builtins.list[datetime.datetime]", "poll_interval": "builtins.float", "self": "", "states": "builtins.list[builtins.str]"}, "params_descr": {"dag_id": "", "execution_dates": "", "poll_interval": "", "self": "", "states": ""}, "params_occur": {"dag_id": [["self", "dag_id", "dag_id"]], "execution_dates": [["self", "execution_dates", "execution_dates"]], "poll_interval": [["self", "poll_interval", "poll_interval"]], "self": [["self", "dag_id", "dag_id"], ["self", "states", "states"], ["self", "execution_dates", "execution_dates"], ["self", "poll_interval", "poll_interval"]], "states": [["self", "states", "states"]]}, "params_p": {"args": [], "dag_id": [["str", 0.7809541219826645], ["int", 0.1151281876992462], ["transfer.models.SiteID", 0.10391769031808945]], "execution_dates": [["datetime.date", 0.2667243510013938], ["datetime.datetime", 0.17092713562170503], ["str", 0.15916291684145378], ["bool", 0.13847682913650589], ["Optional[str]", 0.12741750666510918], ["int", 0.06747593088183086]], "kwargs": [], "poll_interval": [["Optional[str]", 0.47629866109717267], ["str", 0.443933075076745], ["datetime.datetime", 0.07976826382608236]], "self": [], "states": [["Optional[str]", 0.47629866109717267], ["str", 0.443933075076745], ["datetime.datetime", 0.07976826382608236]]}, "q_name": "DagStateTrigger.__init__", "ret_exprs": [], "ret_type": "", "variables": {"dag_id": "", "execution_dates": "", "poll_interval": "", "states": ""}, "variables_p": {"dag_id": [["str", 0.47047988680775443], ["int", 0.33625919028958395], ["transfer.models.ShopID", 0.0880659743786638]], "execution_dates": [["int", 0.5375441017438568], ["datetime.timedelta", 0.12744558850995777], ["datetime.datetime.date", 0.11260481362224876], ["datetime.datetime.datetime", 0.10317410475561133]], "poll_interval": [["str", 0.30000000000000004], ["Dict[str, Any]", 0.1], ["dict", 0.1], ["int", 0.1]], "states": [["str", 0.44444444443999087], ["Tuple[int, str]", 0.22222222221999544], ["Set[str]", 1.002069413939684e-11]]}}, {"docstring": {"func": "Serializes DagStateTrigger arguments and classpath.", "long_descr": null, "ret": null}, "fn_lc": [[123, 4], [133, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "serialize", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "dag_id", "self", "states", "self", "execution_dates", "self", "poll_interval"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "DagStateTrigger.serialize", "ret_exprs": ["return ( \"airflow.triggers.external_task.DagStateTrigger\", { \"dag_id\": self.dag_id, \"states\": self.states, \"execution_dates\": self.execution_dates, \"poll_interval\": self.poll_interval, },)"], "ret_type": "builtins.tuple[builtins.str, builtins.dict[builtins.str, typing.Any]]", "ret_type_p": [["models.data_frames.data_frame.GUIInterface", 0.201174151389687], ["List[magic.models.Deck]", 0.10743757455973668], ["models.scenes.inventory_scene.InventoryScene", 0.08740674298613069], ["models.characters.mods_base.Mod", 0.08740674298613069], ["str", 0.08696604954961472]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Checks periodically in the database to see if the dag run exists and has hit one of the states.", "long_descr": null, "ret": null}, "fn_lc": [[135, 4], [142, 51]], "fn_var_ln": {"num_dags": [[139, 12], [139, 20]]}, "fn_var_occur": {"num_dags": [["num_dags", "self", "count_dags"], ["num_dags", "len", "self", "execution_dates"]]}, "name": "run", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["num_dags", "self", "count_dags"], ["num_dags", "len", "self", "execution_dates"], ["TriggerEvent", "self", "serialize"], ["asyncio", "sleep", "self", "poll_interval"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "DagStateTrigger.run", "ret_exprs": [], "ret_type": "typing.AsyncIterator[airflow.triggers.base.TriggerEvent]", "variables": {"num_dags": ""}, "variables_p": {"num_dags": [["int", 0.8364896439446518]]}}, {"docstring": {"func": "Count how many dag runs in the database match our criteria.", "long_descr": null, "ret": null}, "fn_lc": [[146, 4], [157, 38]], "fn_var_ln": {"count": [[148, 8], [148, 13]]}, "fn_var_occur": {"count": [["count", "session", "query", "func", "count", "filter", "DagRun", "dag_id", "self", "dag_id", "DagRun", "state", "in_", "self", "states", "DagRun", "execution_date", "in_", "self", "execution_dates", "scalar"], ["typing", "cast", "int", "count"]]}, "name": "count_dags", "params": {"self": "", "session": "sqlalchemy.orm.Session"}, "params_descr": {"self": "", "session": ""}, "params_occur": {"self": [["count", "session", "query", "func", "count", "filter", "DagRun", "dag_id", "self", "dag_id", "DagRun", "state", "in_", "self", "states", "DagRun", "execution_date", "in_", "self", "execution_dates", "scalar"]], "session": [["count", "session", "query", "func", "count", "filter", "DagRun", "dag_id", "self", "dag_id", "DagRun", "state", "in_", "self", "states", "DagRun", "execution_date", "in_", "self", "execution_dates", "scalar"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "session": [["sqlalchemy.orm.session.Session", 0.3500297931405767], ["str", 0.2045397191718209], ["sqlalchemy.orm.Session", 0.18016479386182038], ["sqlalchemy.orm.scoping.scoped_session", 0.09792525344364568], ["tracim.models.auth.User", 0.08221698581057377]]}, "q_name": "DagStateTrigger.count_dags", "ret_exprs": ["return typing.cast(int, count)"], "ret_type": "int | None", "ret_type_p": [], "variables": {"count": ""}, "variables_p": {"count": [["dict", 0.27218252231910306], ["list", 0.09210881049777524], ["DefaultDict[Any, None]", 0.0892791693708989], ["tuple", 0.0888804819336409], ["int", 0.08728494578151241], ["float", 0.08590519458140251]]}}], "name": "DagStateTrigger", "q_name": "DagStateTrigger", "variables": {}, "variables_p": {}}], "funcs": [], "imports": ["__future__", "annotations", "asyncio", "datetime", "typing", "asgiref", "sync", "sync_to_async", "sqlalchemy", "func", "sqlalchemy", "orm", "Session", "airflow", "models", "DagRun", "TaskInstance", "airflow", "triggers", "base", "BaseTrigger", "TriggerEvent", "airflow", "utils", "session", "NEW_SESSION", "provide_session"], "mod_var_ln": {}, "mod_var_occur": {}, "no_types_annot": {"D": 8, "I": 0, "U": 15}, "session_id": "iXQrDhVtPa51DL150DpI2veFpRLHgoy8xNudklWiWZw", "set": null, "tc": [false, null], "type_annot_cove": 0.35, "typed_seq": "", "untyped_seq": "", "variables": {}, "variables_p": {}}}