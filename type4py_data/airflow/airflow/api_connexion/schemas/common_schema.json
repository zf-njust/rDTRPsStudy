{"error": null, "response": {"classes": [{"cls_lc": [[34, 0], [37, 23]], "cls_var_ln": {"value": [[37, 4], [37, 9]]}, "cls_var_occur": {"value": []}, "funcs": [], "name": "CronExpression", "q_name": "CronExpression", "variables": {"value": "builtins.str"}, "variables_p": {"value": [["int", 0.6], ["str", 0.3], ["List[float]", 0.09999999999999999]]}}, {"cls_lc": [[40, 0], [53, 41]], "cls_var_ln": {"days": [[44, 4], [44, 8]], "microseconds": [[46, 4], [46, 16]], "objectType": [[43, 4], [43, 14]], "seconds": [[45, 4], [45, 11]]}, "cls_var_occur": {"days": [], "microseconds": [], "objectType": [], "seconds": []}, "funcs": [{"docstring": {"func": "Create time delta based on data.", "long_descr": null, "ret": null}, "fn_lc": [[49, 4], [53, 41]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "make_time_delta", "params": {"data": "", "kwargs": "", "self": ""}, "params_descr": {"data": "", "kwargs": "", "self": ""}, "params_occur": {"data": [["datetime", "timedelta", "data"]], "kwargs": [], "self": []}, "params_p": {"args": [], "data": [["int", 0.31047006536802046], ["List[str]", 0.17469243556656938], ["Union[str, type]", 0.10314536234142885], ["Dict[str, Any]", 0.0973865536631771], ["bytes", 0.09462683520245162]], "kwargs": [], "self": []}, "q_name": "TimeDeltaSchema.make_time_delta", "ret_exprs": ["return datetime.timedelta(**data)"], "ret_type": "", "ret_type_p": [["int", 0.19440261627444913], ["Optional[datetime.tzinfo]", 0.1064880761160305], ["Optional[int]", 0.10192470201148666], ["float", 0.10131310089624357], ["Dict[int, datetime.datetime]", 0.09951693218098355], ["str", 0.09773315938098882], ["bool", 0.09580741983914902]], "variables": {}, "variables_p": {}}], "name": "TimeDeltaSchema", "q_name": "TimeDeltaSchema", "variables": {"days": "", "microseconds": "", "objectType": "", "seconds": ""}, "variables_p": {"days": [["str", 0.2], ["cmk.gui.plugins.openapi.fields.String", 0.1], ["Tuple[int, int]", 0.1], ["Dict[str, str]", 0.1], ["Type[fieldwork.models.FieldData]", 0.1], ["int", 0.1], ["Optional[float]", 0.1], ["property", 0.1]], "microseconds": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "objectType": [["str", 0.19999999999999998], ["int", 0.19999999999999998], ["Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal]", 0.09999999999999999], ["Dict[str, str]", 0.09999999999999999], ["Tuple[Type[int], Type[float]]", 0.09999999999999999], ["eNMS.forms.fields.HiddenField", 0.09999999999999999]], "seconds": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]]}}, {"cls_lc": [[56, 0], [82, 50]], "cls_var_ln": {"day": [[70, 4], [70, 7]], "days": [[62, 4], [62, 8]], "hour": [[71, 4], [71, 8]], "hours": [[64, 4], [64, 9]], "leapdays": [[63, 4], [63, 12]], "microsecond": [[74, 4], [74, 15]], "microseconds": [[67, 4], [67, 16]], "minute": [[72, 4], [72, 10]], "minutes": [[65, 4], [65, 11]], "month": [[69, 4], [69, 9]], "months": [[61, 4], [61, 10]], "objectType": [[59, 4], [59, 14]], "second": [[73, 4], [73, 10]], "seconds": [[66, 4], [66, 11]], "year": [[68, 4], [68, 8]], "years": [[60, 4], [60, 9]]}, "cls_var_occur": {"day": [], "days": [], "hour": [], "hours": [], "leapdays": [], "microsecond": [], "microseconds": [], "minute": [], "minutes": [], "month": [], "months": [], "objectType": [], "second": [], "seconds": [], "year": [], "years": []}, "funcs": [{"docstring": {"func": "Create relative delta based on data.", "long_descr": null, "ret": null}, "fn_lc": [[77, 4], [82, 50]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "make_relative_delta", "params": {"data": "", "kwargs": "", "self": ""}, "params_descr": {"data": "", "kwargs": "", "self": ""}, "params_occur": {"data": [["relativedelta", "relativedelta", "data"]], "kwargs": [], "self": []}, "params_p": {"args": [], "data": [["dict", 0.7], ["str", 0.2], ["bytes", 0.1]], "kwargs": [], "self": []}, "q_name": "RelativeDeltaSchema.make_relative_delta", "ret_exprs": ["return relativedelta.relativedelta(**data)"], "ret_type": "", "ret_type_p": [["int", 0.19536103978188482], ["Dict[str, Any]", 0.09800610064999024], ["str", 0.08549957826586374]], "variables": {}, "variables_p": {}}], "name": "RelativeDeltaSchema", "q_name": "RelativeDeltaSchema", "variables": {"day": "", "days": "", "hour": "", "hours": "", "leapdays": "", "microsecond": "", "microseconds": "", "minute": "", "minutes": "", "month": "", "months": "", "objectType": "", "second": "", "seconds": "", "year": "", "years": ""}, "variables_p": {"day": [["str", 0.2], ["cmk.gui.plugins.openapi.fields.String", 0.1], ["Tuple[int, int]", 0.1], ["Dict[str, str]", 0.1], ["Type[fieldwork.models.FieldData]", 0.1], ["int", 0.1], ["Optional[float]", 0.1], ["property", 0.1]], "days": [["str", 0.2], ["cmk.gui.plugins.openapi.fields.String", 0.1], ["Tuple[int, int]", 0.1], ["Dict[str, str]", 0.1], ["Type[fieldwork.models.FieldData]", 0.1], ["int", 0.1], ["Optional[float]", 0.1], ["property", 0.1]], "hour": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "hours": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "leapdays": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "microsecond": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "microseconds": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "minute": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "minutes": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "month": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "months": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "objectType": [["str", 0.19999999999999998], ["int", 0.19999999999999998], ["Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal]", 0.09999999999999999], ["Dict[str, str]", 0.09999999999999999], ["Tuple[Type[int], Type[float]]", 0.09999999999999999], ["eNMS.forms.fields.HiddenField", 0.09999999999999999]], "second": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "seconds": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "year": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "years": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]]}}, {"cls_lc": [[85, 0], [94, 44]], "cls_var_ln": {"objectType": [[88, 4], [88, 14]], "value": [[89, 4], [89, 9]]}, "cls_var_occur": {"objectType": [], "value": []}, "funcs": [{"docstring": {"func": "Create cron expression based on data.", "long_descr": null, "ret": null}, "fn_lc": [[92, 4], [94, 44]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "make_cron_expression", "params": {"data": "", "kwargs": "", "self": ""}, "params_descr": {"data": "", "kwargs": "", "self": ""}, "params_occur": {"data": [["CronExpression", "data"]], "kwargs": [], "self": []}, "params_p": {"args": [], "data": [["type", 0.2074624839483878], ["dict", 0.13509735652897717], ["Collection[str]", 0.12184894870950837], ["Iterable", 0.10041072849157383], ["Optional[Exception]", 0.08614324023289564], ["str", 0.08597779476070701], ["Optional[bool]", 0.08173735458902662]], "kwargs": [], "self": []}, "q_name": "CronExpressionSchema.make_cron_expression", "ret_exprs": ["return CronExpression(data[\"value\"])"], "ret_type": "", "ret_type_p": [["Callable[..., None]", 0.21523434331427532], ["bool", 0.19256630010608597], ["Iterable[str]", 0.12131777187425623]], "variables": {}, "variables_p": {}}], "name": "CronExpressionSchema", "q_name": "CronExpressionSchema", "variables": {"objectType": "", "value": ""}, "variables_p": {"objectType": [["str", 0.19999999999999998], ["int", 0.19999999999999998], ["Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal]", 0.09999999999999999], ["Dict[str, str]", 0.09999999999999999], ["Tuple[Type[int], Type[float]]", 0.09999999999999999], ["eNMS.forms.fields.HiddenField", 0.09999999999999999]], "value": [["int", 0.6], ["str", 0.3], ["List[float]", 0.09999999999999999]]}}, {"cls_lc": [[97, 0], [130, 77]], "cls_var_ln": {"type_field": [[108, 4], [108, 14]], "type_schemas": [[109, 4], [109, 16]]}, "cls_var_occur": {"type_field": [], "type_schemas": []}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[115, 4], [119, 72]], "fn_var_ln": {"obj": [[117, 12], [117, 15]]}, "fn_var_occur": {"obj": [["isinstance", "obj", "str"], ["obj", "CronExpression", "obj"], ["super", "_dump", "obj", "update_fields", "update_fields", "kwargs"]]}, "name": "_dump", "params": {"kwargs": "", "obj": "", "self": "", "update_fields": ""}, "params_descr": {"kwargs": "", "obj": "", "self": "", "update_fields": ""}, "params_occur": {"kwargs": [["super", "_dump", "obj", "update_fields", "update_fields", "kwargs"]], "obj": [["isinstance", "obj", "str"], ["obj", "CronExpression", "obj"], ["super", "_dump", "obj", "update_fields", "update_fields", "kwargs"]], "self": [], "update_fields": [["super", "_dump", "obj", "update_fields", "update_fields", "kwargs"]]}, "params_p": {"args": [], "kwargs": [], "obj": [["str", 0.5026882872867688], ["List[str]", 0.10070875526504812], ["float", 0.09464411665276361]], "self": [], "update_fields": [["List[dict]", 0.26912955526710697], ["str", 0.196437828640197], ["Type", 0.09910689329458967], ["Union[Dict, List]", 0.09641590316904065], ["Union[list, dict]", 0.0817016809126126], ["dict", 0.08158793797102623]]}, "q_name": "ScheduleIntervalSchema._dump", "ret_exprs": ["return super()._dump(obj, update_fields=update_fields, **kwargs)"], "ret_type": "", "ret_type_p": [["str", 0.32003190215398597], ["int", 0.10176309291964382]], "variables": {"obj": ""}, "variables_p": {"obj": [["Counter[str]", 0.27037255919412606], ["str", 0.2590343143786886], ["deque[str]", 0.07021149466752862]]}}, {"docstring": {"func": "Select schema based on object type.", "long_descr": null, "ret": null}, "fn_lc": [[121, 4], [130, 77]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "get_obj_type", "params": {"obj": "", "self": ""}, "params_descr": {"obj": "", "self": ""}, "params_occur": {"obj": [["isinstance", "obj", "datetime", "timedelta"], ["isinstance", "obj", "relativedelta", "relativedelta"], ["isinstance", "obj", "CronExpression"], ["Exception", "obj", "__class__", "__name__"]], "self": []}, "params_p": {"args": [], "kwargs": [], "obj": [["int", 0.16895388463246724], ["Optional[str]", 0.08787232777957116], ["Optional[datetime.datetime]", 0.07961812209655084], ["datetime.date", 0.07656456569667516]], "self": []}, "q_name": "ScheduleIntervalSchema.get_obj_type", "ret_exprs": ["return \"TimeDelta\"", "return \"RelativeDelta\"", "return \"CronExpression\""], "ret_type": "", "ret_type_p": [["int", 0.1679763579063499], ["datetime.datetime", 0.12950112895368576], ["str", 0.1201096592418227], ["float", 0.10532671633685882], ["Optional[datetime.date]", 0.07999663829533099]], "variables": {}, "variables_p": {}}], "name": "ScheduleIntervalSchema", "q_name": "ScheduleIntervalSchema", "variables": {"type_field": "", "type_schemas": ""}, "variables_p": {"type_field": [["str", 0.7999999999999999], ["bool", 0.19999999999999998]], "type_schemas": [["str", 0.7999999999999999], ["int", 0.09999999999999999], ["property", 0.09999999999999999]]}}, {"cls_lc": [[133, 0], [138, 90]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[136, 4], [138, 90]], "fn_var_ln": {"validators": [[138, 8], [138, 23]]}, "fn_var_occur": {"validators": [["self", "validators", "validate", "Regexp", "list", "self", "validators"]]}, "name": "__init__", "params": {"metadata": "", "self": ""}, "params_descr": {"metadata": "", "self": ""}, "params_occur": {"metadata": [["super", "__init__", "metadata"]], "self": [["self", "validators", "validate", "Regexp", "list", "self", "validators"]]}, "params_p": {"args": [], "kwargs": [], "metadata": [["bool", 0.1], ["Dict[str, Any]", 0.1], ["Callable[[Any, Any], bool]", 0.1]], "self": []}, "q_name": "ColorField.__init__", "ret_exprs": [], "ret_type": "", "variables": {"validators": ""}, "variables_p": {"validators": [["dict", 0.40363383115784984], ["Dict[str, Type[Any]]", 0.1073921817709422], ["Dict[str, Tuple[Any, Any]]", 0.09882008178769026], ["str", 0.09358092921379586], ["int", 0.09118454057540966]]}}], "name": "ColorField", "q_name": "ColorField", "variables": {}, "variables_p": {}}, {"cls_lc": [[141, 0], [146, 97]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[144, 4], [146, 97]], "fn_var_ln": {"validators": [[146, 8], [146, 23]]}, "fn_var_occur": {"validators": [["self", "validators", "validate", "OneOf", "WeightRule", "all_weight_rules", "list", "self", "validators"]]}, "name": "__init__", "params": {"metadata": "", "self": ""}, "params_descr": {"metadata": "", "self": ""}, "params_occur": {"metadata": [["super", "__init__", "metadata"]], "self": [["self", "validators", "validate", "OneOf", "WeightRule", "all_weight_rules", "list", "self", "validators"]]}, "params_p": {"args": [], "kwargs": [], "metadata": [["bool", 0.1], ["Dict[str, Any]", 0.1], ["Callable[[Any, Any], bool]", 0.1]], "self": []}, "q_name": "WeightRuleField.__init__", "ret_exprs": [], "ret_type": "", "variables": {"validators": ""}, "variables_p": {"validators": [["str", 0.2949546236194581], ["Dict[str, str]", 0.18274168994880652], ["Dict[str, Union[Any, Any]]", 0.09506205065503562], ["Pattern[str]", 0.0950376469182221], ["Dict[Any, str]", 0.09137084497440326], ["Dict[Any, Type[Any]]", 0.08069204182856897], ["Dict[Any, Optional[Any]]", 0.08069204182856897], ["Dict[str, Any]", 0.07944906022693647]]}}], "name": "WeightRuleField", "q_name": "WeightRuleField", "variables": {}, "variables_p": {}}, {"cls_lc": [[149, 0], [150, 30]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [], "name": "TimezoneField", "q_name": "TimezoneField", "variables": {}, "variables_p": {}}, {"cls_lc": [[153, 0], [169, 33]], "cls_var_ln": {"class_name": [[157, 4], [157, 14]], "module_path": [[156, 4], [156, 15]]}, "cls_var_occur": {"class_name": [], "module_path": []}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[159, 4], [162, 46]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "_get_module", "params": {"obj": "", "self": ""}, "params_descr": {"obj": "", "self": ""}, "params_occur": {"obj": [["isinstance", "obj", "MappedOperator", "SerializedBaseOperator"], ["obj", "_task_module"], ["inspect", "getmodule", "obj", "__name__"]], "self": []}, "params_p": {"args": [], "kwargs": [], "obj": [["fal.models.Anime", 0.10016697673719026], ["int", 0.09128019977953503], ["List[Callable]", 0.09128019977953503]], "self": []}, "q_name": "ClassReferenceSchema._get_module", "ret_exprs": ["return obj._task_module", "return inspect.getmodule(obj).__name__"], "ret_type": "", "ret_type_p": [["Optional[str]", 0.3224294217242505], ["str", 0.2689261914900161], ["app.models.GameMember", 0.08246551647861786], ["app.models.course.Course", 0.08246551647861786], ["zerver.models.Realm", 0.08107106390142937]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[164, 4], [169, 33]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "_get_class_name", "params": {"obj": "", "self": ""}, "params_descr": {"obj": "", "self": ""}, "params_occur": {"obj": [["isinstance", "obj", "MappedOperator", "SerializedBaseOperator"], ["obj", "_task_type"], ["isinstance", "obj", "type"], ["obj", "__name__"], ["type", "obj", "__name__"]], "self": []}, "params_p": {"args": [], "kwargs": [], "obj": [["type", 0.11536505190598643], ["str", 0.09913665188449425]], "self": []}, "q_name": "ClassReferenceSchema._get_class_name", "ret_exprs": ["return obj._task_type", "return obj.__name__", "return type(obj).__name__"], "ret_type": "", "ret_type_p": [["Type[Any]", 0.09999999999999999]], "variables": {}, "variables_p": {}}], "name": "ClassReferenceSchema", "q_name": "ClassReferenceSchema", "variables": {"class_name": "", "module_path": ""}, "variables_p": {"class_name": [["str", 0.7999999999999999], ["Pattern[str]", 0.09999999999999999], ["Optional[str]", 0.09999999999999999]], "module_path": [["str", 0.3333333509541212], ["Type[Tuple[str, ...]]", 0.33333332315445807], ["List[str]", 0.33333332315445807], ["Optional[str]", 1.268030837624197e-09]]}}, {"cls_lc": [[172, 0], [183, 20]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[175, 4], [178, 69]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "_serialize", "params": {"attr": "", "kwargs": "", "obj": "", "self": "", "value": ""}, "params_descr": {"attr": "", "kwargs": "", "obj": "", "self": "", "value": ""}, "params_occur": {"attr": [], "kwargs": [], "obj": [], "self": [], "value": [["json", "loads", "value", "isinstance", "value", "str", "value"]]}, "params_p": {"args": [], "attr": [["str", 0.9999999999999999]], "kwargs": [], "obj": [["str", 0.9999999999999999]], "self": [], "value": [["str", 0.29271650623386836], ["dict", 0.11784169817314033], ["Sequence[str]", 0.09915867932598607], ["Optional[str]", 0.09657019152575279]]}, "q_name": "JsonObjectField._serialize", "ret_exprs": ["return {}", "return json.loads(value) if isinstance(value, str) else value"], "ret_type": "", "ret_type_p": [["str", 0.10799881716524126]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[180, 4], [183, 20]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "_deserialize", "params": {"attr": "", "data": "", "kwargs": "", "self": "", "value": ""}, "params_descr": {"attr": "", "data": "", "kwargs": "", "self": "", "value": ""}, "params_occur": {"attr": [], "data": [], "kwargs": [], "self": [], "value": [["isinstance", "value", "str"], ["json", "loads", "value"]]}, "params_p": {"args": [], "attr": [["dict", 0.7], ["str", 0.30000000000000004]], "data": [["dict", 0.7], ["str", 0.30000000000000004]], "kwargs": [], "self": [], "value": [["Dict[str, Any]", 0.4258746941720265], ["dict", 0.2954782091675298], ["str", 0.177069805890065]]}, "q_name": "JsonObjectField._deserialize", "ret_exprs": ["return json.loads(value)", "return value"], "ret_type": "", "ret_type_p": [["bool", 0.17946537539855534], ["Dict[str, int]", 0.16426362619984713]], "variables": {}, "variables_p": {}}], "name": "JsonObjectField", "q_name": "JsonObjectField", "variables": {}, "variables_p": {}}], "funcs": [], "imports": ["__future__", "annotations", "datetime", "inspect", "json", "typing", "marshmallow", "dateutil", "relativedelta", "marshmallow", "Schema", "fields", "validate", "marshmallow_oneofschema", "OneOfSchema", "airflow", "models", "mappedoperator", "MappedOperator", "airflow", "serialization", "serialized_objects", "SerializedBaseOperator", "airflow", "utils", "weight_rule", "WeightRule"], "mod_var_ln": {}, "mod_var_occur": {}, "no_types_annot": {"D": 1, "I": 0, "U": 61}, "session_id": "EgkBKa8cruSIIVeIhfFQ4Z_AnuQ8PUcJCUwYnbP2W94", "set": null, "tc": [false, null], "type_annot_cove": 0.02, "typed_seq": "", "untyped_seq": "", "variables": {}, "variables_p": {}}}