{"error": null, "response": {"classes": [{"cls_lc": [[34, 0], [40, 22]], "cls_var_ln": {"open": [[40, 4], [40, 8]], "queued": [[39, 4], [39, 10]], "running": [[38, 4], [38, 11]], "total": [[37, 4], [37, 9]]}, "cls_var_occur": {"open": [], "queued": [], "running": [], "total": []}, "funcs": [], "name": "PoolStats", "q_name": "PoolStats", "variables": {"open": "builtins.int", "queued": "builtins.int", "running": "builtins.int", "total": "builtins.int"}, "variables_p": {"open": [["str", 0.4000000000000001], ["frozenset[str]", 0.10000000000000002], ["Tuple[int, int]", 0.10000000000000002], ["Type[ajapaik.ajapaik.models.Album]", 0.10000000000000002], ["Type[my_wallestocks.models.Prices]", 0.10000000000000002]], "queued": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "running": [["int", 0.7], ["bool", 0.1], ["str", 0.1]], "total": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]]}}, {"cls_lc": [[43, 0], [303, 56]], "cls_var_ln": {"DEFAULT_POOL_NAME": [[54, 4], [54, 21]], "__tablename__": [[46, 4], [46, 17]], "description": [[52, 4], [52, 15]], "id": [[48, 4], [48, 6]], "pool": [[49, 4], [49, 8]], "slots": [[51, 4], [51, 9]]}, "cls_var_occur": {"DEFAULT_POOL_NAME": [["Pool", "get_pool", "Pool", "DEFAULT_POOL_NAME", "session", "session"], ["session", "scalar", "select", "func", "count", "Pool", "id", "where", "Pool", "id", "id", "Pool", "pool", "Pool", "DEFAULT_POOL_NAME"], ["name", "Pool", "DEFAULT_POOL_NAME"], ["AirflowException", "Pool", "DEFAULT_POOL_NAME"]], "__tablename__": [], "description": [["pool", "Pool", "pool", "name", "slots", "slots", "description", "description"]], "id": [["session", "scalar", "select", "func", "count", "Pool", "id", "where", "Pool", "id", "id", "Pool", "pool", "Pool", "DEFAULT_POOL_NAME"]], "pool": [["session", "scalar", "select", "Pool", "where", "Pool", "pool", "pool_name"], ["session", "scalar", "select", "func", "count", "Pool", "id", "where", "Pool", "id", "id", "Pool", "pool", "Pool", "DEFAULT_POOL_NAME"], ["pool", "session", "scalar", "select", "Pool", "filter_by", "pool", "name"], ["pool", "Pool", "pool", "name", "slots", "slots", "description", "description"], ["pool", "session", "scalar", "select", "Pool", "filter_by", "pool", "name"], ["query", "select", "Pool", "pool", "Pool", "slots"]], "slots": [["pool", "Pool", "pool", "name", "slots", "slots", "description", "description"], ["query", "select", "Pool", "pool", "Pool", "slots"]]}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[56, 4], [57, 29]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "__repr__", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["str", "self", "pool"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "Pool.__repr__", "ret_exprs": ["return str(self.pool)"], "ret_type": "", "ret_type_p": [["str", 0.8458824507089776]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Get all pools.", "long_descr": null, "ret": null}, "fn_lc": [[61, 4], [63, 50]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "get_pools", "params": {"session": "sqlalchemy.orm.session.Session"}, "params_descr": {"session": ""}, "params_occur": {"session": [["session", "scalars", "select", "Pool", "all"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "session": [["List[str]", 0.22641082741986984], ["int", 0.14996170253593247], ["set", 0.13261604542111066], ["List[int]", 0.10476637976556878], ["sqlalchemy.orm.session.Session", 0.10222831113296992]]}, "q_name": "Pool.get_pools", "ret_exprs": ["return session.scalars(select(Pool)).all()"], "ret_type": "builtins.list[Pool]", "ret_type_p": [["str", 0.39149486016688184], ["int", 0.31340099373574193], ["Optional[str]", 0.09391503578838131]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Get the Pool with specific pool name from the Pools.", "long_descr": null, "ret": "the pool object"}, "fn_lc": [[67, 4], [75, 73]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "get_pool", "params": {"pool_name": "builtins.str", "session": "sqlalchemy.orm.session.Session"}, "params_descr": {"pool_name": "The pool name of the Pool to get.", "session": "SQLAlchemy ORM Session"}, "params_occur": {"pool_name": [["session", "scalar", "select", "Pool", "where", "Pool", "pool", "pool_name"]], "session": [["session", "scalar", "select", "Pool", "where", "Pool", "pool", "pool_name"]]}, "params_p": {"args": [], "kwargs": [], "pool_name": [["str", 0.488933848211863], ["Optional[str]", 0.42633172289080734], ["List[str]", 0.08473442889732963]], "self": [], "session": [["str", 0.488933848211863], ["Optional[str]", 0.42633172289080734], ["List[str]", 0.08473442889732963]]}, "q_name": "Pool.get_pool", "ret_exprs": ["return session.scalar(select(Pool).where(Pool.pool == pool_name))"], "ret_type": "Pool | None", "ret_type_p": [["str", 0.621231964369073], ["bytes", 0.09671774953855108], ["Dict[str, Any]", 0.09518000223176398]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Get the Pool of the default_pool from the Pools.", "long_descr": null, "ret": "the pool object"}, "fn_lc": [[79, 4], [86, 69]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "get_default_pool", "params": {"session": "sqlalchemy.orm.session.Session"}, "params_descr": {"session": "SQLAlchemy ORM Session"}, "params_occur": {"session": [["Pool", "get_pool", "Pool", "DEFAULT_POOL_NAME", "session", "session"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "session": [["sqlalchemy.orm.session.Session", 0.32356993450567967], ["str", 0.10067365671090395], ["sqlalchemy.orm.Session", 0.10002523974591145], ["sqlalchemy.orm.scoping.scoped_session", 0.09527547121775613], ["uita.auth.Session", 0.09188048908496306], ["recidiviz.persistence.database.session.Session", 0.08759411016585061]]}, "q_name": "Pool.get_default_pool", "ret_exprs": ["return Pool.get_pool(Pool.DEFAULT_POOL_NAME, session=session)"], "ret_type": "Pool | None", "ret_type_p": [["str", 0.324924065351126], ["Optional[str]", 0.22590445894743555], ["bool", 0.22580942896543132], ["Dict[str, Any]", 0.11927072314961355]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Check id if is the default_pool.", "long_descr": null, "ret": "True if id is default_pool, otherwise False"}, "fn_lc": [[90, 4], [103, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "is_default_pool", "params": {"id": "builtins.int", "session": "sqlalchemy.orm.session.Session"}, "params_descr": {"id": "pool id", "session": "SQLAlchemy ORM Session"}, "params_occur": {"id": [["session", "scalar", "select", "func", "count", "Pool", "id", "where", "Pool", "id", "id", "Pool", "pool", "Pool", "DEFAULT_POOL_NAME"]], "session": [["session", "scalar", "select", "func", "count", "Pool", "id", "where", "Pool", "id", "id", "Pool", "pool", "Pool", "DEFAULT_POOL_NAME"]]}, "params_p": {"args": [], "id": [["str", 0.290003727977284], ["Optional[int]", 0.18713751764514822], ["zerver.models.Realm", 0.11475782863872347], ["int", 0.1090813671885978], ["Optional[str]", 0.09673581355414736], ["float", 0.09528156808611819]], "kwargs": [], "self": [], "session": [["str", 0.290003727977284], ["Optional[int]", 0.18713751764514822], ["zerver.models.Realm", 0.11475782863872347], ["int", 0.1090813671885978], ["Optional[str]", 0.09673581355414736], ["float", 0.09528156808611819]]}, "q_name": "Pool.is_default_pool", "ret_exprs": ["return ( session.scalar( select(func.count(Pool.id)).where(Pool.id == id, Pool.pool == Pool.DEFAULT_POOL_NAME) ) > 0)"], "ret_type": "builtins.bool", "ret_type_p": [["bool", 0.29899944927556055], ["str", 0.29899944927556055]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Create a pool with given parameters or update it if it already exists.", "long_descr": null, "ret": null}, "fn_lc": [[107, 4], [126, 19]], "fn_var_ln": {"description": [[123, 12], [123, 28]], "pool": [[119, 12], [119, 16]], "slots": [[122, 12], [122, 22]]}, "fn_var_occur": {"description": [["pool", "Pool", "pool", "name", "slots", "slots", "description", "description"], ["pool", "description", "description"]], "pool": [["pool", "session", "scalar", "select", "Pool", "filter_by", "pool", "name"], ["pool", "None"], ["pool", "Pool", "pool", "name", "slots", "slots", "description", "description"], ["session", "add", "pool"], ["pool", "slots", "slots"], ["pool", "description", "description"]], "slots": [["pool", "Pool", "pool", "name", "slots", "slots", "description", "description"], ["pool", "slots", "slots"]]}, "name": "create_or_update_pool", "params": {"description": "builtins.str", "name": "builtins.str", "session": "sqlalchemy.orm.session.Session", "slots": "builtins.int"}, "params_descr": {"description": "", "name": "", "session": "", "slots": ""}, "params_occur": {"description": [["pool", "Pool", "pool", "name", "slots", "slots", "description", "description"], ["pool", "description", "description"]], "name": [["pool", "session", "scalar", "select", "Pool", "filter_by", "pool", "name"], ["pool", "Pool", "pool", "name", "slots", "slots", "description", "description"]], "session": [["pool", "session", "scalar", "select", "Pool", "filter_by", "pool", "name"], ["session", "add", "pool"], ["session", "commit"]], "slots": [["pool", "Pool", "pool", "name", "slots", "slots", "description", "description"], ["pool", "slots", "slots"]]}, "params_p": {"args": [], "description": [["str", 0.8277999225044895], ["Optional[str]", 0.08787499672503103], ["List[str]", 0.08432508077047945]], "kwargs": [], "name": [["str", 0.6944129237260083], ["zerver.models.Realm", 0.09738295239578575]], "self": [], "session": [["Optional[str]", 0.19595729047203142], ["sqlalchemy.orm.scoping.scoped_session", 0.19337260731419992], ["sqlalchemy.orm.session.Session", 0.1389511870249341], ["sqlalchemy.orm.Session", 0.0960453113810796], ["str", 0.09203444587052848], ["bool", 0.0808573084305716]], "slots": [["str", 0.8483161282414527], ["Tuple[str, str]", 0.07770648837337943], ["Optional[str]", 0.0739773833851679]]}, "q_name": "Pool.create_or_update_pool", "ret_exprs": ["return pool"], "ret_type": "Pool", "ret_type_p": [["dict", 0.190694030647236], ["Optional[Type]", 0.05643271019406138]], "variables": {"description": "", "pool": "", "slots": ""}, "variables_p": {"description": [["List[str]", 0.579757132445199], ["str", 0.420242867554801]], "pool": [["str", 0.1908615922328289], ["golem.rpc.session.WebSocketAddress", 0.10792996769188538], ["dict", 0.09213845402128783]], "slots": [["List[str]", 0.4], ["Set[str]", 0.2], ["Dict[int, str]", 0.2], ["Type[taxonomy.db.models.name.Name]", 0.1], ["str", 0.1]]}}, {"docstring": {"func": "Delete pool by a given name.", "long_descr": null, "ret": null}, "fn_lc": [[130, 4], [142, 19]], "fn_var_ln": {"pool": [[135, 8], [135, 12]]}, "fn_var_occur": {"pool": [["pool", "session", "scalar", "select", "Pool", "filter_by", "pool", "name"], ["pool", "None"], ["session", "delete", "pool"]]}, "name": "delete_pool", "params": {"name": "builtins.str", "session": "sqlalchemy.orm.session.Session"}, "params_descr": {"name": "", "session": ""}, "params_occur": {"name": [["name", "Pool", "DEFAULT_POOL_NAME"], ["pool", "session", "scalar", "select", "Pool", "filter_by", "pool", "name"], ["PoolNotFound", "name"]], "session": [["pool", "session", "scalar", "select", "Pool", "filter_by", "pool", "name"], ["session", "delete", "pool"], ["session", "commit"]]}, "params_p": {"args": [], "kwargs": [], "name": [["str", 0.7149085653900751], ["Optional[str]", 0.1064480852276636], ["Dict[str, str]", 0.08932167469113059]], "self": [], "session": [["str", 0.4824991386851697], ["sqlalchemy.orm.scoping.scoped_session", 0.20214691948262586], ["sqlalchemy.orm.Session", 0.08498835558429887]]}, "q_name": "Pool.delete_pool", "ret_exprs": ["return pool"], "ret_type": "Pool", "ret_type_p": [["str", 0.5], ["int", 0.2], ["sqlalchemy.orm.Session", 0.1]], "variables": {"pool": ""}, "variables_p": {"pool": [["str", 0.2569318059773239], ["geode.models.common.Address", 0.1121145177977464], ["Optional[Dict[str, str]]", 0.09862734951488414], ["List[int]", 0.09692160503863399], ["float", 0.0963359605577625]]}}, {"docstring": {"func": "Get Pool stats (Number of Running, Queued, Open & Total tasks).", "long_descr": "If ``lock_rows`` is True, and the database engine in use supports the ``NOWAIT`` syntax, then a\nnon-blocking lock will be attempted -- if the lock is not available then SQLAlchemy will throw an\nOperationalError.", "ret": null}, "fn_lc": [[146, 4], [202, 20]], "fn_var_ln": {"count": [[185, 12], [185, 17]], "pool_rows": [[170, 8], [170, 17]], "pools": [[163, 8], [163, 13]], "query": [[168, 12], [168, 17]], "state_count_by_pool": [[176, 8], [176, 27]], "stats_dict": [[187, 12], [187, 22]], "total_slots": [[173, 16], [173, 27]]}, "fn_var_occur": {"count": [["count", "int", "count"], ["stats_dict", "count"], ["stats_dict", "count"]], "pool_rows": [["pool_rows", "session", "execute", "query"]], "pools": [["pools", "builtins", "dict", "builtins", "str", "PoolStats"], ["pools", "pool_name", "PoolStats", "total", "total_slots", "running", "queued", "open"], ["stats_dict", "PoolStats", "None", "pools", "get", "pool_name"], ["pools", "items"]], "query": [["query", "select", "Pool", "pool", "Pool", "slots"], ["query", "with_row_locks", "query", "session", "session", "nowait", "session"], ["pool_rows", "session", "execute", "query"]], "state_count_by_pool": [["state_count_by_pool", "session", "execute", "select", "TaskInstance", "pool", "TaskInstance", "state", "func", "sum", "TaskInstance", "pool_slots", "filter", "TaskInstance", "state", "in_", "list", "EXECUTION_STATES", "group_by", "TaskInstance", "pool", "TaskInstance", "state"]], "stats_dict": [["stats_dict", "PoolStats", "None", "pools", "get", "pool_name"], ["stats_dict", "count"], ["stats_dict", "count"], ["stats_dict", "stats_dict", "stats_dict", "stats_dict"]], "total_slots": [["total_slots", "float"], ["pools", "pool_name", "PoolStats", "total", "total_slots", "running", "queued", "open"]]}, "name": "slots_stats", "params": {"lock_rows": "builtins.bool", "session": "sqlalchemy.orm.session.Session"}, "params_descr": {"lock_rows": "Should we attempt to obtain a row-level lock on all the Pool rows returns", "session": "SQLAlchemy ORM Session"}, "params_occur": {"lock_rows": [], "session": [["query", "with_row_locks", "query", "session", "session", "nowait", "session"], ["pool_rows", "session", "execute", "query"], ["state_count_by_pool", "session", "execute", "select", "TaskInstance", "pool", "TaskInstance", "state", "func", "sum", "TaskInstance", "pool_slots", "filter", "TaskInstance", "state", "in_", "list", "EXECUTION_STATES", "group_by", "TaskInstance", "pool", "TaskInstance", "state"]]}, "params_p": {"args": [], "kwargs": [], "lock_rows": [["List[int]", 0.3147251350919457], ["bool", 0.2776722711999832], ["list", 0.16304103748322843], ["List[str]", 0.08152051874161421], ["List[Dict]", 0.08152051874161421], ["Iterable[str]", 0.08152051874161421]], "self": [], "session": [["Type[tikki.db.tables.Base]", 0.18725426037924925], ["Dict[str, Any]", 0.18725426037924925], ["dict", 0.11384591210205185], ["Union[eth.rlp.transactions.BaseTransaction, eth.utils.spoof.SpoofTransaction]", 0.10465663531928387], ["bool", 0.10238886649548738], ["recidiviz.persistence.database.schema.state.schema.StateIncarcerationPeriod", 0.1007480329103659], ["app.models.Journey", 0.09258140228590853]]}, "q_name": "Pool.slots_stats", "ret_exprs": ["return pools"], "ret_type": "builtins.dict[builtins.str, PoolStats]", "ret_type_p": [["int", 0.30000000000000004], ["Callable", 0.2], ["models.Question", 0.1], ["str", 0.1]], "variables": {"count": "", "pool_rows": "", "pools": "builtins.dict[builtins.str, PoolStats]", "query": "", "state_count_by_pool": "", "stats_dict": "PoolStats | None", "total_slots": ""}, "variables_p": {"count": [["float", 0.2573462235917089], ["Dict[str, str]", 0.07990358299963084], ["DefaultDict[Any, List]", 0.07864533775006714], ["int", 0.07696374836527439], ["Set[Tuple[str, str]]", 0.07580320795222557]], "pool_rows": [["Dict[str, Tuple[Any, Any]]", 0.2221259693866482], ["int", 0.13161679703840456], ["list", 0.0943062040173508], ["set", 0.09002646492635319], ["Dict[Type[Any], Union[Any, Any]]", 0.08708162787158039], ["List[str]", 0.08294324037436217]], "pools": [["Dict[str, str]", 0.2592416733487134], ["dict", 0.1861250403096298], ["str", 0.1856012867417141], ["List[Dict[str, Any]]", 0.10518942142621555], ["int", 0.08700275342574305], ["Dict[str, Union[Any, Any]]", 0.0837005482540948]], "query": [["list", 0.20598722278364717], ["str", 0.10910977176278225], ["lightbus.plugins.state.StatePlugin", 0.1000899993874154], ["cmk.gui.utils.html.HTML", 0.0911445630831943]], "state_count_by_pool": [["str", 0.6139631185776543], ["Dict[str, Any]", 0.3067241934621778], ["list", 0.07931268796016798]], "stats_dict": [["Dict[str, str]", 0.13779115223089217], ["Dict[str, Any]", 0.0947081040779436], ["Dict[str, int]", 0.09322141292883658], ["bool", 0.09132214953962846], ["Type[Mapping[str, Any]]", 0.08994122982367242]], "total_slots": [["str", 0.1856827973190679]]}}, {"docstring": {"func": "Get the Pool in a json structure.", "long_descr": null, "ret": "the pool object in json format"}, "fn_lc": [[204, 4], [215, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "to_json", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "id", "self", "pool", "self", "slots", "self", "description"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "Pool.to_json", "ret_exprs": ["return { \"id\": self.id, \"pool\": self.pool, \"slots\": self.slots, \"description\": self.description,}"], "ret_type": "builtins.dict[builtins.str, typing.Any]", "ret_type_p": [["Dict[str, Any]", 0.18601352078569006], ["dict", 0.18544420372303386], ["cmk.utils.type_defs.EventRule", 0.10416257625909381], ["Dict[str, Dict[str, str]]", 0.09667668662916142]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Get the number of slots used by running/queued tasks at the moment.", "long_descr": null, "ret": "the used number of slots"}, "fn_lc": [[218, 4], [234, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "occupied_slots", "params": {"self": "", "session": "sqlalchemy.orm.session.Session"}, "params_descr": {"self": "", "session": "SQLAlchemy ORM Session"}, "params_occur": {"self": [["int", "session", "scalar", "select", "func", "sum", "TaskInstance", "pool_slots", "filter", "TaskInstance", "pool", "self", "pool", "filter", "TaskInstance", "state", "in_", "EXECUTION_STATES"]], "session": [["int", "session", "scalar", "select", "func", "sum", "TaskInstance", "pool_slots", "filter", "TaskInstance", "pool", "self", "pool", "filter", "TaskInstance", "state", "in_", "EXECUTION_STATES"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "session": [["sqlalchemy.orm.session.Session", 0.4064632580528373], ["recidiviz.persistence.database.session.Session", 0.19385067949098486], ["models.Queue", 0.12282450721739646], ["grouper.models.base.session.Session", 0.10212977045533161], ["alerta.database.base.Query", 0.08929170365423897], ["sqlalchemy.orm.Session", 0.08544008112921095]]}, "q_name": "Pool.occupied_slots", "ret_exprs": ["return int( session.scalar( select(func.sum(TaskInstance.pool_slots)) .filter(TaskInstance.pool == self.pool) .filter(TaskInstance.state.in_(EXECUTION_STATES)) ) or 0)"], "ret_type": "builtins.int", "ret_type_p": [["str", 0.37117358507428494], ["dict", 0.19795238789555608], ["int", 0.11043938809639349], ["Dict[str, Any]", 0.0917053291438715]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Get the number of slots used by running tasks at the moment.", "long_descr": null, "ret": "the used number of slots"}, "fn_lc": [[237, 4], [253, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "running_slots", "params": {"self": "", "session": "sqlalchemy.orm.session.Session"}, "params_descr": {"self": "", "session": "SQLAlchemy ORM Session"}, "params_occur": {"self": [["int", "session", "scalar", "select", "func", "sum", "TaskInstance", "pool_slots", "filter", "TaskInstance", "pool", "self", "pool", "filter", "TaskInstance", "state", "State", "RUNNING"]], "session": [["int", "session", "scalar", "select", "func", "sum", "TaskInstance", "pool_slots", "filter", "TaskInstance", "pool", "self", "pool", "filter", "TaskInstance", "state", "State", "RUNNING"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "session": [["sqlalchemy.orm.session.Session", 0.3173400041904886], ["grouper.models.base.session.Session", 0.29619338855091626], ["grouper.models.user.User", 0.18578371399913446], ["models.Queue", 0.10681954620220988]]}, "q_name": "Pool.running_slots", "ret_exprs": ["return int( session.scalar( select(func.sum(TaskInstance.pool_slots)) .filter(TaskInstance.pool == self.pool) .filter(TaskInstance.state == State.RUNNING) ) or 0)"], "ret_type": "builtins.int", "ret_type_p": [["str", 0.21425573901083042], ["Dict[str, Any]", 0.18867823666937322], ["Union[str, Dict]", 0.10712786950541521], ["dict", 0.09626558300961545], ["Set[cmk.utils.type_defs.HostName]", 0.09237269014023058]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Get the number of slots used by queued tasks at the moment.", "long_descr": null, "ret": "the used number of slots"}, "fn_lc": [[256, 4], [272, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "queued_slots", "params": {"self": "", "session": "sqlalchemy.orm.session.Session"}, "params_descr": {"self": "", "session": "SQLAlchemy ORM Session"}, "params_occur": {"self": [["int", "session", "scalar", "select", "func", "sum", "TaskInstance", "pool_slots", "filter", "TaskInstance", "pool", "self", "pool", "filter", "TaskInstance", "state", "State", "QUEUED"]], "session": [["int", "session", "scalar", "select", "func", "sum", "TaskInstance", "pool_slots", "filter", "TaskInstance", "pool", "self", "pool", "filter", "TaskInstance", "state", "State", "QUEUED"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "session": [["sqlalchemy.orm.session.Session", 0.3907789144606198], ["recidiviz.persistence.database.session.Session", 0.18697008854854802], ["models.Queue", 0.12991843383695667], ["grouper.models.base.session.Session", 0.1190451663458976], ["sqlalchemy.orm.Session", 0.08636329379234818]]}, "q_name": "Pool.queued_slots", "ret_exprs": ["return int( session.scalar( select(func.sum(TaskInstance.pool_slots)) .filter(TaskInstance.pool == self.pool) .filter(TaskInstance.state == State.QUEUED) ) or 0)"], "ret_type": "builtins.int", "ret_type_p": [["str", 0.37117358507428494], ["dict", 0.19795238789555608], ["int", 0.11043938809639349], ["Dict[str, Any]", 0.0917053291438715]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Get the number of slots scheduled at the moment.", "long_descr": null, "ret": "the number of scheduled slots"}, "fn_lc": [[275, 4], [291, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "scheduled_slots", "params": {"self": "", "session": "sqlalchemy.orm.session.Session"}, "params_descr": {"self": "", "session": "SQLAlchemy ORM Session"}, "params_occur": {"self": [["int", "session", "scalar", "select", "func", "sum", "TaskInstance", "pool_slots", "filter", "TaskInstance", "pool", "self", "pool", "filter", "TaskInstance", "state", "State", "SCHEDULED"]], "session": [["int", "session", "scalar", "select", "func", "sum", "TaskInstance", "pool_slots", "filter", "TaskInstance", "pool", "self", "pool", "filter", "TaskInstance", "state", "State", "SCHEDULED"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "session": [["sqlalchemy.orm.session.Session", 0.3907789144606198], ["recidiviz.persistence.database.session.Session", 0.18697008854854802], ["models.Queue", 0.12991843383695667], ["grouper.models.base.session.Session", 0.1190451663458976], ["sqlalchemy.orm.Session", 0.08636329379234818]]}, "q_name": "Pool.scheduled_slots", "ret_exprs": ["return int( session.scalar( select(func.sum(TaskInstance.pool_slots)) .filter(TaskInstance.pool == self.pool) .filter(TaskInstance.state == State.SCHEDULED) ) or 0)"], "ret_type": "builtins.int", "ret_type_p": [["str", 0.37117358507428494], ["dict", 0.19795238789555608], ["int", 0.11043938809639349], ["Dict[str, Any]", 0.0917053291438715]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Get the number of slots open at the moment.", "long_descr": null, "ret": "the number of slots"}, "fn_lc": [[294, 4], [303, 56]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "open_slots", "params": {"self": "", "session": "sqlalchemy.orm.session.Session"}, "params_descr": {"self": "", "session": "SQLAlchemy ORM Session"}, "params_occur": {"self": [["self", "slots"], ["self", "slots", "self", "occupied_slots", "session"]], "session": [["self", "slots", "self", "occupied_slots", "session"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "session": [["bool", 0.2939606974430913], ["str", 0.25291648495367935], ["sqlalchemy.orm.Session", 0.19268638876767025], ["Dict[str, Any]", 0.0962381739651032], ["nox.sessions.Session", 0.08426429976062572]]}, "q_name": "Pool.open_slots", "ret_exprs": ["return float(\"inf\")", "return self.slots - self.occupied_slots(session)"], "ret_type": "builtins.float", "ret_type_p": [["Callable", 0.15970780199309995], ["str", 0.14717185336603686], ["Dict[str, Any]", 0.11942559181155529], ["int", 0.07384461824317616], ["Optional[str]", 0.07110907744170669]], "variables": {}, "variables_p": {}}], "name": "Pool", "q_name": "Pool", "variables": {"DEFAULT_POOL_NAME": "", "__tablename__": "", "description": "", "id": "", "pool": "", "slots": ""}, "variables_p": {"DEFAULT_POOL_NAME": [["str", 1.0000000000000002]], "__tablename__": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "description": [["str", 0.9005946716369587], ["List[str]", 0.09940532836304135]], "id": [["int", 0.17145376947264268], ["str", 0.15995291092398764]], "pool": [["str", 0.1957890629205849], ["Tuple[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any]", 0.12451653098219638], ["List[Union[Any, Any, Any, Any]]", 0.10554259231411221], ["chalice.deploy.models.IAMRole", 0.09576819901431632], ["List[Dict[str, str]]", 0.0956107788315132], ["decksite.data.models.person.Person", 0.08931563469554461]], "slots": [["str", 0.5072750029889047], ["Set[str]", 0.22169345946135965], ["dict", 0.17617435125569453], ["int", 0.09485718629404118]]}}], "funcs": [], "imports": ["__future__", "annotations", "typing", "Any", "sqlalchemy", "Column", "Integer", "String", "Text", "func", "select", "sqlalchemy", "orm", "session", "Session", "airflow", "exceptions", "AirflowException", "PoolNotFound", "airflow", "models", "base", "Base", "airflow", "ti_deps", "dependencies_states", "EXECUTION_STATES", "airflow", "typing_compat", "TypedDict", "airflow", "utils", "session", "NEW_SESSION", "provide_session", "airflow", "utils", "sqlalchemy", "nowait", "with_row_locks", "airflow", "utils", "state", "State", "airflow", "models", "taskinstance", "TaskInstance", "airflow", "models", "taskinstance", "TaskInstance", "airflow", "models", "taskinstance", "TaskInstance", "airflow", "models", "taskinstance", "TaskInstance", "airflow", "models", "taskinstance", "TaskInstance"], "mod_var_ln": {}, "mod_var_occur": {}, "no_types_annot": {"D": 36, "I": 0, "U": 16}, "session_id": "sJQxO6Z0FQBxTyYsmvNhsGu4xz3MYQvMjxAWBRl_TzY", "set": null, "tc": [false, null], "type_annot_cove": 0.69, "typed_seq": "", "untyped_seq": "", "variables": {}, "variables_p": {}}}