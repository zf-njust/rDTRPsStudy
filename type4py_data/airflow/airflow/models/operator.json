{"error": null, "response": {"classes": [], "funcs": [{"docstring": {"func": "Whether a task needs expansion at runtime.", "long_descr": "A task needs expansion if it either\n\n* Is a mapped operator, or\n* Is in a mapped task group.\n\nThis is implemented as a free function (instead of a property) so we can\nmake it a type guard.", "ret": null}, "fn_lc": [[30, 0], [45, 16]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "needs_expansion", "params": {"task": "airflow.models.abstractoperator.AbstractOperator"}, "params_descr": {"task": ""}, "params_occur": {"task": [["isinstance", "task", "MappedOperator"], ["task", "get_closest_mapped_task_group", "None"]]}, "params_p": {"args": [], "kwargs": [], "task": [["khetha.models.Task", 0.16501406573480776], ["dict", 0.07746664595930744]]}, "q_name": "needs_expansion", "ret_exprs": ["return True", "return True", "return False"], "ret_type": "airflow.typing_compat.TypeGuard[Operator]", "ret_type_p": [["bool", 0.9999999999999999]], "variables": {}, "variables_p": {}}], "imports": ["__future__", "annotations", "typing", "Union", "airflow", "models", "abstractoperator", "AbstractOperator", "airflow", "models", "baseoperator", "BaseOperator", "airflow", "models", "mappedoperator", "MappedOperator", "airflow", "typing_compat", "TypeGuard"], "mod_var_ln": {"Operator": [[27, 0], [27, 8]], "__all__": [[48, 0], [48, 7]]}, "mod_var_occur": {"Operator": [], "__all__": []}, "no_types_annot": {"D": 2, "I": 0, "U": 2}, "session_id": "_Wyc0AkO1LttC6rLUS1IUZNGBOoSpDHmOgWtoyNI5js", "set": null, "tc": [false, null], "type_annot_cove": 0.5, "typed_seq": "", "untyped_seq": "", "variables": {"Operator": "", "__all__": ""}, "variables_p": {"Operator": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "__all__": [["List[str]", 0.7999999999999999], ["Tuple[str]", 0.09999999999999999], ["Tuple[str, str, str]", 0.09999999999999999]]}}}