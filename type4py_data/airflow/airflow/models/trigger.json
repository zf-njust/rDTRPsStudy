{"error": null, "response": {"classes": [{"cls_lc": [[37, 0], [249, 15]], "cls_var_ln": {"__tablename__": [[54, 4], [54, 17]], "classpath": [[57, 4], [57, 13]], "created_date": [[59, 4], [59, 16]], "id": [[56, 4], [56, 6]], "kwargs": [[58, 4], [58, 10]], "task_instance": [[69, 4], [69, 17]], "triggerer_id": [[60, 4], [60, 16]], "triggerer_job": [[62, 4], [62, 17]]}, "cls_var_occur": {"__tablename__": [], "classpath": [], "created_date": [], "id": [["session", "execute", "delete", "Trigger", "where", "Trigger", "id", "in_", "ids", "execution_options", "synchronize_session", "False"]], "kwargs": [], "task_instance": [], "triggerer_id": [], "triggerer_job": []}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[71, 4], [80, 61]], "fn_var_ln": {"classpath": [[78, 8], [78, 22]], "created_date": [[80, 8], [80, 25]], "kwargs": [[79, 8], [79, 19]]}, "fn_var_occur": {"classpath": [["self", "classpath", "classpath"]], "created_date": [["self", "created_date", "created_date", "timezone", "utcnow"]], "kwargs": [["self", "kwargs", "kwargs"]]}, "name": "__init__", "params": {"classpath": "builtins.str", "created_date": "datetime.datetime | None", "kwargs": "builtins.dict[builtins.str, typing.Any]", "self": ""}, "params_descr": {"classpath": "", "created_date": "", "kwargs": "", "self": ""}, "params_occur": {"classpath": [["self", "classpath", "classpath"]], "created_date": [["self", "created_date", "created_date", "timezone", "utcnow"]], "kwargs": [["self", "kwargs", "kwargs"]], "self": [["self", "classpath", "classpath"], ["self", "kwargs", "kwargs"], ["self", "created_date", "created_date", "timezone", "utcnow"]]}, "params_p": {"args": [], "classpath": [["int", 0.26691152077110186], ["recidiviz.persistence.entity.state.entities.StatePerson", 0.18965672670921033], ["List[recidiviz.persistence.entity.state.entities.StateSupervisionSentence]", 0.10762054448132426], ["List[recidiviz.persistence.entity.state.entities.StateIncarcerationSentence]", 0.10762054448132426], ["bool", 0.08974383495548907], ["float", 0.0703508114947341]], "created_date": [["datetime.date", 0.46756355011593487], ["datetime.datetime", 0.20845749326089574], ["Optional[datetime.date]", 0.13526165605715434], ["str", 0.10127411909852274], ["int", 0.08744318146749203]], "kwargs": [], "self": []}, "q_name": "Trigger.__init__", "ret_exprs": [], "ret_type": "None", "variables": {"classpath": "", "created_date": "", "kwargs": ""}, "variables_p": {"classpath": [["str", 0.30000000000000004], ["Dict[str, Any]", 0.1], ["dict", 0.1], ["int", 0.1]], "created_date": [["datetime.date", 0.4028900501805495], ["datetime.datetime", 0.339387113065576], ["str", 0.0877075442488409], ["datetime.date.time.date", 0.08524911252894003], ["datetime.datetime.datetime", 0.08476617997609343]], "kwargs": [["int", 0.4108754312383336], ["str", 0.16040423479706495], ["DefaultDict[Any, List[Any]]", 0.11349408321943784], ["Set[str]", 0.08367660394776819], ["List[str]", 0.07712720454318656]]}}, {"docstring": {"func": "Alternative constructor that creates a trigger row based directly", "long_descr": "off of a Trigger object.", "ret": null}, "fn_lc": [[84, 4], [90, 54]], "fn_var_ln": {"classpath": [[89, 8], [89, 17]], "kwargs": [[89, 19], [89, 25]]}, "fn_var_occur": {"classpath": [["classpath", "kwargs", "trigger", "serialize"], ["cls", "classpath", "classpath", "kwargs", "kwargs"]], "kwargs": [["classpath", "kwargs", "trigger", "serialize"], ["cls", "classpath", "classpath", "kwargs", "kwargs"]]}, "name": "from_object", "params": {"cls": "", "trigger": "airflow.triggers.base.BaseTrigger"}, "params_descr": {"cls": "", "trigger": ""}, "params_occur": {"cls": [["cls", "classpath", "classpath", "kwargs", "kwargs"]], "trigger": [["classpath", "kwargs", "trigger", "serialize"]]}, "params_p": {"args": [], "cls": [["List[str]", 0.2979430974152519], ["str", 0.18760962683942706], ["dict", 0.1300767018346219], ["list", 0.09296670732576785], ["mtg_ssm.scryfall.models.ScryCard", 0.08487894295888668]], "kwargs": [], "self": [], "trigger": [["Optional[str]", 0.5831954695181755], ["Optional[float]", 0.10389877987309916], ["Dict[str, Any]", 0.0990911417021801]]}, "q_name": "Trigger.from_object", "ret_exprs": ["return cls(classpath=classpath, kwargs=kwargs)"], "ret_type": "Trigger", "ret_type_p": [["str", 0.1911129955047505], ["list", 0.1146787446645581], ["float", 0.10803069414367572], ["bool", 0.09836116254135033], ["int", 0.09147078999409351]], "variables": {"classpath": "", "kwargs": ""}, "variables_p": {"classpath": [["list", 0.20387954040333794], ["dict", 0.1105717024077465], ["Set[str]", 0.0985097139833808], ["bool", 0.09580943725743114], ["Type[Tuple[int, ...]]", 0.09345583349583257], ["Iterator[str]", 0.09345583349583257]], "kwargs": [["int", 0.11507427132869694], ["list", 0.11097086907443517], ["Dict[str, Any]", 0.10294375035488934], ["dict", 0.09667362140873657], ["List[Dict[str, Any]]", 0.09586320993012208], ["List[Tuple[str, str, str]]", 0.09586320993012208], ["str", 0.0951651769096191], ["Type[Mapping[str, Any]]", 0.09180298858228236]]}}, {"docstring": {"func": "Fetches all the Triggers by ID and returns a dict mapping", "long_descr": "ID -> Trigger instance.", "ret": null}, "fn_lc": [[95, 4], [109, 45]], "fn_var_ln": {"query": [[100, 8], [100, 13]]}, "fn_var_occur": {"query": [["query", "session", "query", "cls", "filter", "cls", "id", "in_", "ids", "options", "joinedload", "joinedload", "joinedload"], ["obj", "id", "obj", "obj", "query"]]}, "name": "bulk_fetch", "params": {"cls": "", "ids": "typing.Iterable[builtins.int]", "session": "sqlalchemy.orm.Session"}, "params_descr": {"cls": "", "ids": "", "session": ""}, "params_occur": {"cls": [["query", "session", "query", "cls", "filter", "cls", "id", "in_", "ids", "options", "joinedload", "joinedload", "joinedload"]], "ids": [["query", "session", "query", "cls", "filter", "cls", "id", "in_", "ids", "options", "joinedload", "joinedload", "joinedload"]], "session": [["query", "session", "query", "cls", "filter", "cls", "id", "in_", "ids", "options", "joinedload", "joinedload", "joinedload"]]}, "params_p": {"args": [], "cls": [["sqlalchemy.orm.Session", 0.21619555158947856], ["verification_token.models.Token", 0.10275992959388966], ["int", 0.09970908729474041], ["str", 0.09497373878865077]], "ids": [["sqlalchemy.orm.Session", 0.21619555158947856], ["verification_token.models.Token", 0.10275992959388966], ["int", 0.09970908729474041], ["str", 0.09497373878865077]], "kwargs": [], "self": [], "session": [["sqlalchemy.orm.Session", 0.21619555158947856], ["verification_token.models.Token", 0.10275992959388966], ["int", 0.09970908729474041], ["str", 0.09497373878865077]]}, "q_name": "Trigger.bulk_fetch", "ret_exprs": ["return {obj.id: obj for obj in query}"], "ret_type": "builtins.dict[builtins.int, Trigger]", "ret_type_p": [["list", 0.11010966907737188], ["Set[int]", 0.10138632522305428], ["Sequence[object]", 0.09807899954401707], ["List[Tuple[str, int]]", 0.0950603724043121], ["int", 0.09300138037668053], ["List[int]", 0.0922690150007265], ["Iterable[int]", 0.09220395658775642]], "variables": {"query": ""}, "variables_p": {"query": [["int", 0.3798792300525269], ["cmk.utils.type_defs.UserId", 0.1329968656245371], ["str", 0.11138973497605552], ["Type[Dict[str, Any]]", 0.10598839839126963]]}}, {"docstring": {"func": "Deletes all triggers that have no tasks dependent on them.", "long_descr": "Triggers have a one-to-many relationship to task instances, so we need\nto clean those up first. Afterwards we can drop the triggers not\nreferenced by anyone.", "ret": null}, "fn_lc": [[114, 4], [140, 9]], "fn_var_ln": {"ids": [[128, 8], [128, 11]]}, "fn_var_occur": {"ids": [["ids", "trigger_id", "trigger_id", "session", "query", "cls", "id", "join", "TaskInstance", "cls", "id", "TaskInstance", "trigger_id", "isouter", "True", "group_by", "cls", "id", "having", "func", "count", "TaskInstance", "trigger_id"], ["session", "execute", "delete", "Trigger", "where", "Trigger", "id", "in_", "ids", "execution_options", "synchronize_session", "False"]]}, "name": "clean_unused", "params": {"cls": "", "session": "sqlalchemy.orm.Session"}, "params_descr": {"cls": "", "session": ""}, "params_occur": {"cls": [["ids", "trigger_id", "trigger_id", "session", "query", "cls", "id", "join", "TaskInstance", "cls", "id", "TaskInstance", "trigger_id", "isouter", "True", "group_by", "cls", "id", "having", "func", "count", "TaskInstance", "trigger_id"]], "session": [["session", "query", "TaskInstance", "filter", "TaskInstance", "state", "TaskInstanceState", "DEFERRED", "TaskInstance", "trigger_id", "isnot", "None", "update", "TaskInstance", "trigger_id", "None"], ["ids", "trigger_id", "trigger_id", "session", "query", "cls", "id", "join", "TaskInstance", "cls", "id", "TaskInstance", "trigger_id", "isouter", "True", "group_by", "cls", "id", "having", "func", "count", "TaskInstance", "trigger_id"], ["session", "execute", "delete", "Trigger", "where", "Trigger", "id", "in_", "ids", "execution_options", "synchronize_session", "False"]]}, "params_p": {"args": [], "cls": [["Dict[str, Any]", 0.31409513259866795], ["Type[tikki.db.tables.Base]", 0.18941895231934733], ["Awaitable[T]", 0.09322999886109883]], "kwargs": [], "self": [], "session": [["Set[str]", 0.10681550388813754], ["int", 0.1023145641544821], ["mwapi.Session", 0.09583027833186965], ["models.User", 0.09180793133891058], ["str", 0.08973532324282224], ["Tuple[int, int, str]", 0.08383441629974119], ["Optional[int]", 0.08382736898250355]]}, "q_name": "Trigger.clean_unused", "ret_exprs": [], "ret_type": "None", "variables": {"ids": ""}, "variables_p": {"ids": [["int", 0.2639054714649619], ["Type[Tuple[str, Any]]", 0.2151810759775583], ["str", 0.09458579584863026]]}}, {"docstring": {"func": "Takes an event from an instance of itself, and triggers all dependent", "long_descr": "tasks to resume.", "ret": null}, "fn_lc": [[145, 4], [160, 61]], "fn_var_ln": {"next_kwargs": [[156, 12], [156, 37]], "state": [[160, 12], [160, 31]], "trigger_id": [[158, 12], [158, 36]]}, "fn_var_occur": {"next_kwargs": [["next_kwargs", "task_instance", "next_kwargs"], ["next_kwargs", "event", "payload"], ["task_instance", "next_kwargs", "next_kwargs"]], "state": [["session", "query", "TaskInstance", "filter", "TaskInstance", "trigger_id", "trigger_id", "TaskInstance", "state", "TaskInstanceState", "DEFERRED"], ["task_instance", "state", "TaskInstanceState", "SCHEDULED"]], "trigger_id": [["session", "query", "TaskInstance", "filter", "TaskInstance", "trigger_id", "trigger_id", "TaskInstance", "state", "TaskInstanceState", "DEFERRED"], ["task_instance", "trigger_id", "None"]]}, "name": "submit_event", "params": {"cls": "", "event": "", "session": "sqlalchemy.orm.Session", "trigger_id": ""}, "params_descr": {"cls": "", "event": "", "session": "", "trigger_id": ""}, "params_occur": {"cls": [], "event": [["next_kwargs", "event", "payload"]], "session": [["session", "query", "TaskInstance", "filter", "TaskInstance", "trigger_id", "trigger_id", "TaskInstance", "state", "TaskInstanceState", "DEFERRED"]], "trigger_id": [["session", "query", "TaskInstance", "filter", "TaskInstance", "trigger_id", "trigger_id", "TaskInstance", "state", "TaskInstanceState", "DEFERRED"], ["task_instance", "trigger_id", "None"]]}, "params_p": {"args": [], "cls": [["str", 0.525184006584629], ["bool", 0.29084927911604347], ["List[str]", 0.09641093071100354], ["int", 0.08755578358832401]], "event": [["str", 0.5632004831083491], ["Callable", 0.32026664254833237], ["Dict[str, Any]", 0.06015587388307227], ["Union[str, bytes]", 0.05637700046024645]], "kwargs": [], "self": [], "session": [["int", 0.5704010987918849], ["bool", 0.18241777191652447], ["Dict[str, int]", 0.08961370006745945]], "trigger_id": [["int", 0.5637868539377662], ["bool", 0.09497479185648072], ["Dict[str, int]", 0.09394212070395594]]}, "q_name": "Trigger.submit_event", "ret_exprs": [], "ret_type": "None", "variables": {"next_kwargs": "", "state": "", "trigger_id": ""}, "variables_p": {"next_kwargs": [["str", 0.1908416289684135], ["kitovu.utils.JsonType", 0.1133527660328394], ["List[str]", 0.09686414960877195], ["int", 0.0948461621029209], ["Dict[str, Any]", 0.09343515087536157], ["List[Tuple[Any, Any]]", 0.09217454607573612], ["Dict[str, Union[Any, bool, str]]", 0.09030274422494104]], "state": [["Dict[str, str]", 0.20051215185845372], ["list", 0.19249522385491374], ["int", 0.17049843730509504], ["Dict[str, Optional[str]]", 0.0992035976306739], ["List[str]", 0.08686787021830443]], "trigger_id": [["int", 0.41347315106297866], ["Dict[str, str]", 0.3797729105794148], ["str", 0.13170065284508092], ["Tuple[str]", 0.0750532855125255]]}}, {"docstring": {"func": "Called when a trigger has failed unexpectedly, and we need to mark", "long_descr": "everything that depended on it as failed. Notably, we have to actually\nrun the failure code from a worker as it may have linked callbacks, so\nhilariously we have to re-schedule the task instances to a worker just\nso they can then fail.\n\nWe use a special __fail__ value for next_method to achieve this that\nthe runtime code understands as immediate-fail, and pack the error into\nnext_kwargs.\n\nTODO: Once we have shifted callback (and email) handling to run on\nworkers as first-class concepts, we can run the failure code here\nin-process, but we can't do that right now.", "ret": null}, "fn_lc": [[165, 4], [191, 61]], "fn_var_ln": {"next_kwargs": [[187, 12], [187, 37]], "next_method": [[186, 12], [186, 37]], "state": [[191, 12], [191, 31]], "traceback": [[185, 12], [185, 21]], "trigger_id": [[189, 12], [189, 36]]}, "fn_var_occur": {"next_kwargs": [["task_instance", "next_kwargs", "traceback"]], "next_method": [["task_instance", "next_method"]], "state": [["session", "query", "TaskInstance", "filter", "TaskInstance", "trigger_id", "trigger_id", "TaskInstance", "state", "TaskInstanceState", "DEFERRED"], ["task_instance", "state", "TaskInstanceState", "SCHEDULED"]], "traceback": [["traceback", "format_exception", "type", "exc", "exc", "exc", "__traceback__", "exc", "None"], ["task_instance", "next_kwargs", "traceback"]], "trigger_id": [["session", "query", "TaskInstance", "filter", "TaskInstance", "trigger_id", "trigger_id", "TaskInstance", "state", "TaskInstanceState", "DEFERRED"], ["task_instance", "trigger_id", "None"]]}, "name": "submit_failure", "params": {"cls": "", "exc": "", "session": "sqlalchemy.orm.Session", "trigger_id": ""}, "params_descr": {"cls": "", "exc": "", "session": "", "trigger_id": ""}, "params_occur": {"cls": [], "exc": [["traceback", "format_exception", "type", "exc", "exc", "exc", "__traceback__", "exc", "None"]], "session": [["session", "query", "TaskInstance", "filter", "TaskInstance", "trigger_id", "trigger_id", "TaskInstance", "state", "TaskInstanceState", "DEFERRED"]], "trigger_id": [["session", "query", "TaskInstance", "filter", "TaskInstance", "trigger_id", "trigger_id", "TaskInstance", "state", "TaskInstanceState", "DEFERRED"], ["task_instance", "trigger_id", "None"]]}, "params_p": {"args": [], "cls": [["str", 0.19153851200820848], ["int", 0.10724951773608199], ["bool", 0.10617500806946847], ["Optional[\"UtilityFunction\"]", 0.09576925600410424]], "exc": [["str", 0.2783025739726766], ["bytes", 0.1271183151934929], ["int", 0.0979570744943574], ["List[dict]", 0.09605864751262624], ["T", 0.09604419140578703]], "kwargs": [], "self": [], "session": [["int", 0.7431362117107889], ["bytes", 0.08562126276307032], ["str", 0.08562126276307032]], "trigger_id": [["int", 0.8081473115478706], ["transfer.models.ArticleID", 0.1918526884521296]]}, "q_name": "Trigger.submit_failure", "ret_exprs": [], "ret_type": "None", "variables": {"next_kwargs": "", "next_method": "", "state": "", "traceback": "", "trigger_id": ""}, "variables_p": {"next_kwargs": [["Dict[str, Union[Any, Any]]", 0.1371401923543816], ["List[int]", 0.10168014830784759], ["Dict[str, int]", 0.10055398953758733], ["cmk.utils.structured_data.StructuredDataTree", 0.09917081347249322], ["Pattern[str]", 0.09367483196922251], ["Union[List[Any], List[str]]", 0.09147781340635333]], "next_method": [["OrderedDict[bytes, bytes]", 0.2902899229950997], ["str", 0.28819371212529465], ["frozenset[Tuple[Any, Any]]", 0.11905885076863157], ["Iterator[str]", 0.10539726385283286], ["Sequence", 0.09882641175467871], ["List[Tuple[str, Any]]", 0.09823383850346255]], "state": [["Dict[str, str]", 0.20051215185845372], ["list", 0.19249522385491374], ["int", 0.17049843730509504], ["Dict[str, Optional[str]]", 0.0992035976306739], ["List[str]", 0.08686787021830443]], "traceback": [["List[Dict[str, Any]]", 0.36813105425159226], ["dict", 0.09467159558847002]], "trigger_id": [["int", 0.41347315106297866], ["Dict[str, str]", 0.3797729105794148], ["str", 0.13170065284508092], ["Tuple[str]", 0.0750532855125255]]}}, {"docstring": {"func": "Retrieves a list of triggerer_ids.", "long_descr": null, "ret": null}, "fn_lc": [[196, 4], [198, 97]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "ids_for_triggerer", "params": {"cls": "", "session": "sqlalchemy.orm.Session", "triggerer_id": ""}, "params_descr": {"cls": "", "session": "", "triggerer_id": ""}, "params_occur": {"cls": [["row", "row", "session", "query", "cls", "id", "filter", "cls", "triggerer_id", "triggerer_id"]], "session": [["row", "row", "session", "query", "cls", "id", "filter", "cls", "triggerer_id", "triggerer_id"]], "triggerer_id": [["row", "row", "session", "query", "cls", "id", "filter", "cls", "triggerer_id", "triggerer_id"]]}, "params_p": {"args": [], "cls": [["int", 0.4976810267465622], ["List[int]", 0.19991226506381712], ["str", 0.10008041005637291]], "kwargs": [], "self": [], "session": [["int", 0.4976810267465622], ["List[int]", 0.19991226506381712], ["str", 0.10008041005637291]], "triggerer_id": [["int", 0.4976810267465622], ["List[int]", 0.19991226506381712], ["str", 0.10008041005637291]]}, "q_name": "Trigger.ids_for_triggerer", "ret_exprs": ["return [row[0] for row in session.query(cls.id).filter(cls.triggerer_id == triggerer_id)]"], "ret_type": "builtins.list[builtins.int]", "ret_type_p": [["Dict[int, int]", 0.18382142258008025], ["List[str]", 0.18285157813603747], ["Set[str]", 0.12257061472084968], ["Optional[dict]", 0.10865232748674947], ["frozenset[str]", 0.09741359627991321], ["list", 0.09406529715340374]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Takes a triggerer_id, the capacity for that triggerer and the Triggerer job heartrate,", "long_descr": "and assigns unassigned triggers until that capacity is reached, or there are no more\nunassigned triggers.", "ret": null}, "fn_lc": [[203, 4], [238, 24]], "fn_var_ln": {"alive_triggerer_ids": [[219, 8], [219, 27]], "count": [[211, 8], [211, 13]], "health_check_threshold": [[218, 8], [218, 30]], "trigger_ids_query": [[230, 8], [230, 25]]}, "fn_var_occur": {"alive_triggerer_ids": [["alive_triggerer_ids", "row", "row", "session", "query", "Job", "id", "filter", "Job", "end_date", "is_", "None", "Job", "latest_heartbeat", "timezone", "utcnow", "datetime", "timedelta", "seconds", "health_check_threshold", "Job", "job_type"], ["trigger_ids_query", "cls", "get_sorted_triggers", "capacity", "capacity", "alive_triggerer_ids", "alive_triggerer_ids", "session", "session"]], "count": [["count", "session", "query", "func", "count", "cls", "id", "filter", "cls", "triggerer_id", "triggerer_id", "scalar"], ["capacity", "count"]], "health_check_threshold": [["health_check_threshold", "heartrate"], ["alive_triggerer_ids", "row", "row", "session", "query", "Job", "id", "filter", "Job", "end_date", "is_", "None", "Job", "latest_heartbeat", "timezone", "utcnow", "datetime", "timedelta", "seconds", "health_check_threshold", "Job", "job_type"]], "trigger_ids_query": [["trigger_ids_query", "cls", "get_sorted_triggers", "capacity", "capacity", "alive_triggerer_ids", "alive_triggerer_ids", "session", "session"], ["session", "query", "cls", "filter", "cls", "id", "in_", "i", "id", "i", "trigger_ids_query", "update", "cls", "triggerer_id", "triggerer_id", "synchronize_session", "False"]]}, "name": "assign_unassigned", "params": {"capacity": "", "cls": "", "heartrate": "", "session": "sqlalchemy.orm.Session", "triggerer_id": ""}, "params_descr": {"capacity": "", "cls": "", "heartrate": "", "session": "", "triggerer_id": ""}, "params_occur": {"capacity": [["capacity", "count"], ["trigger_ids_query", "cls", "get_sorted_triggers", "capacity", "capacity", "alive_triggerer_ids", "alive_triggerer_ids", "session", "session"]], "cls": [["count", "session", "query", "func", "count", "cls", "id", "filter", "cls", "triggerer_id", "triggerer_id", "scalar"], ["trigger_ids_query", "cls", "get_sorted_triggers", "capacity", "capacity", "alive_triggerer_ids", "alive_triggerer_ids", "session", "session"], ["session", "query", "cls", "filter", "cls", "id", "in_", "i", "id", "i", "trigger_ids_query", "update", "cls", "triggerer_id", "triggerer_id", "synchronize_session", "False"]], "heartrate": [["health_check_threshold", "heartrate"]], "session": [["count", "session", "query", "func", "count", "cls", "id", "filter", "cls", "triggerer_id", "triggerer_id", "scalar"], ["alive_triggerer_ids", "row", "row", "session", "query", "Job", "id", "filter", "Job", "end_date", "is_", "None", "Job", "latest_heartbeat", "timezone", "utcnow", "datetime", "timedelta", "seconds", "health_check_threshold", "Job", "job_type"], ["trigger_ids_query", "cls", "get_sorted_triggers", "capacity", "capacity", "alive_triggerer_ids", "alive_triggerer_ids", "session", "session"], ["session", "query", "cls", "filter", "cls", "id", "in_", "i", "id", "i", "trigger_ids_query", "update", "cls", "triggerer_id", "triggerer_id", "synchronize_session", "False"], ["session", "commit"]], "triggerer_id": [["count", "session", "query", "func", "count", "cls", "id", "filter", "cls", "triggerer_id", "triggerer_id", "scalar"], ["session", "query", "cls", "filter", "cls", "id", "in_", "i", "id", "i", "trigger_ids_query", "update", "cls", "triggerer_id", "triggerer_id", "synchronize_session", "False"]]}, "params_p": {"args": [], "capacity": [["str", 0.20554203840404628], ["sqlalchemy.orm.Session", 0.11401843105377574], ["raiden.utils.Address", 0.10010162708756079], ["int", 0.09244163264937083], ["bool", 0.0913332184197293], ["List[float]", 0.0913332184197293]], "cls": [["int", 0.7053263024459149], ["datetime.datetime", 0.1327731150336037], ["grouper.models.base.session.Session", 0.08123642213079715], ["sqlalchemy.orm.Session", 0.08066416038968444]], "heartrate": [["int", 0.519684714323494], ["float", 0.11096246927507725], ["str", 0.10158372958599382], ["List[Dict[str, Any]]", 0.08660582211075196]], "kwargs": [], "self": [], "session": [["int", 0.5871132765745155], ["datetime.datetime", 0.13252128167926394], ["str", 0.10425775365172267], ["bool", 0.0923456706470809], ["sqlalchemy.orm.Session", 0.08376201744741678]], "triggerer_id": [["int", 0.4792951799928945], ["sqlalchemy.orm.Session", 0.18813484418362658], ["str", 0.15293389581954922], ["Optional[int]", 0.09117285712438743], ["datetime.datetime", 0.08846322287954247]]}, "q_name": "Trigger.assign_unassigned", "ret_exprs": ["return"], "ret_type": "None", "ret_type_p": [["Union[tuple, list]", 0.12326783261663934], ["List[int]", 0.09124591253820835], ["Dict[str, Any]", 0.08769568774684897], ["base.ConfigOptions", 0.08769568774684897], ["str", 0.08682447752895113]], "variables": {"alive_triggerer_ids": "", "count": "", "health_check_threshold": "", "trigger_ids_query": ""}, "variables_p": {"alive_triggerer_ids": [["int", 0.17342100939807054], ["Optional[cmk.utils.type_defs.UserId]", 0.1675358247056205], ["transfer.models.TicketBundleID", 0.08432798894522626]], "count": [["int", 0.8240653605408901], ["set", 0.09019305973950768]], "health_check_threshold": [["str", 0.20236716061768634], ["Union[Literal, str]", 0.1090759212705158], ["list", 0.09962454245022906], ["Sequence[str]", 0.09398356420564345], ["DefaultDict[str, Set[str]]", 0.09392154893079886]], "trigger_ids_query": [["list", 0.49528961456074294], ["tuple", 0.09133253876184175]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[241, 4], [249, 15]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "get_sorted_triggers", "params": {"alive_triggerer_ids": "", "capacity": "", "cls": "", "session": ""}, "params_descr": {"alive_triggerer_ids": "", "capacity": "", "cls": "", "session": ""}, "params_occur": {"alive_triggerer_ids": [["with_row_locks", "session", "query", "cls", "id", "filter", "or_", "cls", "triggerer_id", "is_", "None", "cls", "triggerer_id", "notin_", "alive_triggerer_ids", "order_by", "cls", "created_date", "limit", "capacity", "session", "skip_locked", "True", "all"]], "capacity": [["with_row_locks", "session", "query", "cls", "id", "filter", "or_", "cls", "triggerer_id", "is_", "None", "cls", "triggerer_id", "notin_", "alive_triggerer_ids", "order_by", "cls", "created_date", "limit", "capacity", "session", "skip_locked", "True", "all"]], "cls": [["with_row_locks", "session", "query", "cls", "id", "filter", "or_", "cls", "triggerer_id", "is_", "None", "cls", "triggerer_id", "notin_", "alive_triggerer_ids", "order_by", "cls", "created_date", "limit", "capacity", "session", "skip_locked", "True", "all"]], "session": [["with_row_locks", "session", "query", "cls", "id", "filter", "or_", "cls", "triggerer_id", "is_", "None", "cls", "triggerer_id", "notin_", "alive_triggerer_ids", "order_by", "cls", "created_date", "limit", "capacity", "session", "skip_locked", "True", "all"]]}, "params_p": {"alive_triggerer_ids": [["int", 0.5093413830379525], ["str", 0.19576917349831352], ["sqlalchemy.orm.Session", 0.09530001269118056]], "args": [], "capacity": [["int", 0.5093413830379525], ["str", 0.19576917349831352], ["sqlalchemy.orm.Session", 0.09530001269118056]], "cls": [["int", 0.5093413830379525], ["str", 0.19576917349831352], ["sqlalchemy.orm.Session", 0.09530001269118056]], "kwargs": [], "self": [], "session": [["int", 0.5093413830379525], ["str", 0.19576917349831352], ["sqlalchemy.orm.Session", 0.09530001269118056]]}, "q_name": "Trigger.get_sorted_triggers", "ret_exprs": ["return with_row_locks( session.query(cls.id) .filter(or_(cls.triggerer_id.is_(None), cls.triggerer_id.notin_(alive_triggerer_ids))) .order_by(cls.created_date) .limit(capacity), session, skip_locked=True,).all()"], "ret_type": "", "ret_type_p": [["str", 0.19377123425849763], ["bool", 0.14893766298473], ["Union[fonduer.candidates.models.Candidate, fonduer.candidates.models.Mention, fonduer.candidates.models.span_mention.TemporarySpanMention]", 0.09461865867588029], ["List[int]", 0.09006256783203924], ["int", 0.08852398466201958]], "variables": {}, "variables_p": {}}], "name": "Trigger", "q_name": "Trigger", "variables": {"__tablename__": "", "classpath": "", "created_date": "", "id": "", "kwargs": "", "task_instance": "", "triggerer_id": "", "triggerer_job": ""}, "variables_p": {"__tablename__": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "classpath": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "created_date": [["Type[blog.models.Post]", 0.1], ["Type[colossus.apps.templates.models.EmailTemplate]", 0.1], ["Type[knowis.question.models.Question]", 0.1], ["Type[dmlblog.models.Post]", 0.1], ["Type[apps.blog.models.Category]", 0.1], ["Type[todo.models.Task]", 0.1], ["Type[colossus.apps.campaigns.models.Campaign]", 0.1], ["Type[habhub.closures.models.ClosureNotice]", 0.1]], "id": [["str", 0.6498789636652316], ["int", 0.3501210363347684]], "kwargs": [["dict", 0.30000000000000004], ["Mapping", 0.2], ["Mapping[str, Any]", 0.1], ["Dict[str, int]", 0.1], ["Dict[str, Any]", 0.1], ["Mapping[Any, Any]", 0.1], ["Dict[str, Literal]", 0.1]], "task_instance": [["str", 0.19999999999999998], ["annofabapi.models.TaskPhase", 0.09999999999999999], ["List[Dict[str, Any]]", 0.09999999999999999], ["bool", 0.09999999999999999], ["Type[src.app.models.TaskDevice]", 0.09999999999999999], ["Dict[str, Any]", 0.09999999999999999]], "triggerer_id": [["Optional[str]", 0.09999999999999999], ["int", 0.09999999999999999], ["List[int]", 0.09999999999999999], ["services.ticketing.transfer.models.TicketID", 0.09999999999999999], ["Type[models.User]", 0.09999999999999999], ["shop.transfer.models.ShopID", 0.09999999999999999], ["Type[pipeline.netfile.models.AbstractSchedule]", 0.09999999999999999], ["shortcuts.actions.base.GroupIDField", 0.09999999999999999]], "triggerer_job": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]]}}], "funcs": [], "imports": ["__future__", "annotations", "datetime", "traceback", "format_exception", "typing", "Any", "Iterable", "sqlalchemy", "Column", "Integer", "String", "delete", "func", "or_", "sqlalchemy", "orm", "Session", "joinedload", "relationship", "airflow", "api_internal", "internal_api_call", "internal_api_call", "airflow", "models", "base", "Base", "airflow", "models", "taskinstance", "TaskInstance", "airflow", "triggers", "base", "BaseTrigger", "airflow", "utils", "timezone", "airflow", "utils", "retries", "run_with_db_retries", "airflow", "utils", "session", "NEW_SESSION", "provide_session", "airflow", "utils", "sqlalchemy", "ExtendedJSON", "UtcDateTime", "with_row_locks", "airflow", "utils", "state", "TaskInstanceState", "airflow", "jobs", "job", "Job"], "mod_var_ln": {}, "mod_var_occur": {}, "no_types_annot": {"D": 16, "I": 0, "U": 45}, "session_id": "wf0WzBSLv9Gay0COaaft6he298zk2oV6unS1O-VW38k", "set": null, "tc": [false, null], "type_annot_cove": 0.26, "typed_seq": "", "untyped_seq": "", "variables": {}, "variables_p": {}}}