{"error": null, "response": {"classes": [{"cls_lc": [[33, 0], [51, 59]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": "Determine method of creating new processes by checking if the", "long_descr": "mp_start_method is set in configs, else, it uses the OS default.", "ret": null}, "fn_lc": [[36, 4], [47, 21]], "fn_var_ln": {"method": [[44, 8], [44, 14]]}, "fn_var_occur": {"method": [["method", "multiprocessing", "get_start_method"]]}, "name": "_get_multiprocessing_start_method", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "MultiprocessingStartMethodMixin._get_multiprocessing_start_method", "ret_exprs": ["return conf.get_mandatory_value(\"core\", \"mp_start_method\")", "return method"], "ret_type": "builtins.str", "ret_type_p": [["fastapi.openapi.models.OAuthFlows", 0.1901668305849903], ["bool", 0.11632772164857537], ["models.User", 0.11572871020692574], ["core.models.Grouping", 0.11068335633281148], ["int", 0.09416365687960898], ["str", 0.09193568367547711]], "variables": {"method": ""}, "variables_p": {"method": [["str", 0.6798129165770037], ["Dict[str, str]", 0.1296765585031529], ["Optional[str]", 0.09150945081256832]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[49, 4], [51, 59]], "fn_var_ln": {"mp_start_method": [[50, 8], [50, 23]]}, "fn_var_occur": {"mp_start_method": [["mp_start_method", "self", "_get_multiprocessing_start_method"], ["multiprocessing", "get_context", "mp_start_method"]]}, "name": "_get_multiprocessing_context", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["mp_start_method", "self", "_get_multiprocessing_start_method"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "MultiprocessingStartMethodMixin._get_multiprocessing_context", "ret_exprs": ["return multiprocessing.get_context(mp_start_method)"], "ret_type": "multiprocessing.context.DefaultContext", "ret_type_p": [["str", 0.6060276184967309], ["Optional[List[str]]", 0.10116569428280546]], "variables": {"mp_start_method": ""}, "variables_p": {"mp_start_method": [["str", 0.3032962969480208]]}}], "name": "MultiprocessingStartMethodMixin", "q_name": "MultiprocessingStartMethodMixin", "variables": {}, "variables_p": {}}, {"cls_lc": [[54, 0], [71, 33]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": "Find underlying XCom references this contains.", "long_descr": "This is used by the DAG parser to recursively find task dependencies.", "ret": null}, "fn_lc": [[57, 4], [64, 33]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "iter_references", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "ResolveMixin.iter_references", "ret_exprs": [], "ret_type": "typing.Iterable[builtins.tuple[airflow.models.operator.Operator, builtins.str]]", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Resolve this value for runtime.", "long_descr": null, "ret": null}, "fn_lc": [[66, 4], [71, 33]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "resolve", "params": {"context": "airflow.utils.context.Context", "self": ""}, "params_descr": {"context": "", "self": ""}, "params_occur": {"context": [], "self": []}, "params_p": {"args": [], "context": [["int", 0.19999999999999998], ["str", 0.19999999999999998], ["Iterable['Context']", 0.09999999999999999], ["dict", 0.09999999999999999], ["bool", 0.09999999999999999]], "kwargs": [], "self": []}, "q_name": "ResolveMixin.resolve", "ret_exprs": [], "ret_type": "typing.Any", "variables": {}, "variables_p": {}}], "name": "ResolveMixin", "q_name": "ResolveMixin", "variables": {}, "variables_p": {}}], "funcs": [], "imports": ["__future__", "annotations", "multiprocessing", "typing", "airflow", "configuration", "conf", "airflow", "utils", "context", "Context", "multiprocessing.context", "airflow", "models", "operator", "Operator"], "mod_var_ln": {}, "mod_var_occur": {}, "no_types_annot": {"D": 5, "I": 0, "U": 2}, "session_id": "x046jCOdrKS70_i7wqKi6R9BYkeU0iQSqCUZ8MrQBaM", "set": null, "tc": [false, null], "type_annot_cove": 0.71, "typed_seq": "", "untyped_seq": "", "variables": {}, "variables_p": {}}}