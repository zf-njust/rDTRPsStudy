{"error": null, "response": {"classes": [], "funcs": [{"docstring": {"func": "Helper function to get Python source (or not), preventing exceptions.", "long_descr": null, "ret": null}, "fn_lc": [[25, 0], [52, 22]], "fn_var_ln": {"source_code": [[51, 8], [51, 19]]}, "fn_var_occur": {"source_code": [["source_code", "None"], ["source_code", "inspect", "getsource", "x", "func"], ["source_code", "None"], ["source_code", "inspect", "getsource", "x"], ["source_code", "None"], ["source_code", "inspect", "getsource", "x", "__call__"], ["source_code", "None"], ["source_code", "type", "x"]]}, "name": "get_python_source", "params": {"x": "typing.Any"}, "params_descr": {"x": ""}, "params_occur": {"x": [["isinstance", "x", "str"], ["x", "None"], ["isinstance", "x", "functools", "partial"], ["source_code", "inspect", "getsource", "x", "func"], ["source_code", "inspect", "getsource", "x"], ["source_code", "inspect", "getsource", "x", "__call__"], ["source_code", "type", "x"]]}, "params_p": {"args": [], "kwargs": [], "x": [["int", 0.11684890516221019], ["list", 0.1129249224293753], ["Tuple[str, Any]", 0.10143729141219945], ["str", 0.09972079959672685], ["Iterable", 0.09130574051129663], ["Optional[Sequence[T]]", 0.08792618455518234], ["bool", 0.08777910863877818]]}, "q_name": "get_python_source", "ret_exprs": ["return x", "return None", "return source_code"], "ret_type": "str | None", "ret_type_p": [["Optional[Dict[str, Any]]", 0.09053610252961757]], "variables": {"source_code": ""}, "variables_p": {"source_code": [["str", 0.8850538217788388], ["list", 0.11494617822116095]]}}, {"docstring": {"func": "Prepare code snippet with line numbers and  a specific line marked.", "long_descr": null, "ret": "str"}, "fn_lc": [[55, 0], [79, 15]], "fn_var_ln": {"code": [[78, 8], [78, 12]], "code_lines": [[76, 8], [76, 18]], "end_line_no": [[75, 8], [75, 19]], "start_line_no": [[74, 8], [74, 21]]}, "fn_var_occur": {"code": [["code", "text_file", "read"], ["code_lines", "code", "split"], ["code", "join", "code_lines"]], "code_lines": [["code_lines", "code", "split"], ["code_lines", "lno", "line", "line_no", "lno", "lno", "line", "lno", "line", "enumerate", "code_lines"], ["code_lines", "code_lines", "start_line_no", "end_line_no"], ["code", "join", "code_lines"]], "end_line_no": [["end_line_no", "line_no", "context_lines_count"], ["code_lines", "code_lines", "start_line_no", "end_line_no"]], "start_line_no": [["start_line_no", "max", "line_no", "context_lines_count"], ["code_lines", "code_lines", "start_line_no", "end_line_no"]]}, "name": "prepare_code_snippet", "params": {"context_lines_count": "builtins.int", "file_path": "builtins.str", "line_no": "builtins.int"}, "params_descr": {"context_lines_count": "The number of lines that will be cut before and after.", "file_path": "File name", "line_no": "Line number"}, "params_occur": {"context_lines_count": [["start_line_no", "max", "line_no", "context_lines_count"], ["end_line_no", "line_no", "context_lines_count"]], "file_path": [["open", "file_path", "text_file"]], "line_no": [["code_lines", "lno", "line", "line_no", "lno", "lno", "line", "lno", "line", "enumerate", "code_lines"], ["start_line_no", "max", "line_no", "context_lines_count"], ["end_line_no", "line_no", "context_lines_count"]]}, "params_p": {"args": [], "context_lines_count": [["int", 0.708102882863314], ["str", 0.291897117136686]], "file_path": [["str", 0.5035559936966113], ["int", 0.22322812575394485], ["Union[str, bytes]", 0.09313211722236793], ["bool", 0.08584688806077932]], "kwargs": [], "line_no": [["str", 0.7054259872072735], ["int", 0.29457401279272666]]}, "q_name": "prepare_code_snippet", "ret_exprs": ["return code"], "ret_type": "builtins.str", "ret_type_p": [["str", 0.826126009768374], ["Optional[int]", 0.08913138091446174]], "variables": {"code": "", "code_lines": "", "end_line_no": "", "start_line_no": ""}, "variables_p": {"code": [["bytes", 0.3876837338913928], ["str", 0.19047471178848535], ["int", 0.09154786035375305]], "code_lines": [["str", 0.2724311535115003], ["Pattern[str]", 0.25515451041164716], ["Pattern[bytes]", 0.1060485291609606]], "end_line_no": [["int", 0.8014977004391686], ["List[str]", 0.10393612142305883], ["float", 0.09456617813777249]], "start_line_no": [["Dict[str, Union[str, int]]", 0.18499776267416065], ["str", 0.11225890199096493], ["int", 0.10037751074406093], ["bytes", 0.10007521512691435], ["Dict[str, Union[Any, Any, Any, Any, Any]]", 0.09835942626827063], ["Dict[str, Optional[str]]", 0.09503295177652868], ["float", 0.09205920441830519]]}}, {"docstring": {"func": "Returns the best formatter available in the current terminal.", "long_descr": null, "ret": null}, "fn_lc": [[82, 0], [92, 20]], "fn_var_ln": {"formatter": [[91, 8], [91, 17]]}, "fn_var_occur": {"formatter": [["formatter", "Terminal256Formatter", "opts"], ["formatter", "TerminalFormatter", "opts"]]}, "name": "get_terminal_formatter", "params": {"opts": ""}, "params_descr": {"opts": ""}, "params_occur": {"opts": [["formatter", "Terminal256Formatter", "opts"], ["formatter", "TerminalFormatter", "opts"]]}, "params_p": {"args": [], "kwargs": [], "opts": [["str", 0.19999999999999998], ["bool", 0.09999999999999999]]}, "q_name": "get_terminal_formatter", "ret_exprs": ["return formatter"], "ret_type": "", "ret_type_p": [["str", 0.19999999999999998], ["bool", 0.09999999999999999]], "variables": {"formatter": ""}, "variables_p": {"formatter": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["Callable(functools.wraps)[[Named(wrapped, Callable[..., Any]), Named(assigned, Sequence[str], default), Named(updated, Sequence[str], default)], Callable[Any, Any]]", 0.1], ["str", 0.1]]}}], "imports": ["__future__", "annotations", "functools", "inspect", "os", "typing", "Any", "pygments", "formatters", "terminal256", "Terminal256Formatter", "pygments", "formatters", "terminal", "TerminalFormatter"], "mod_var_ln": {}, "mod_var_occur": {}, "no_types_annot": {"D": 6, "I": 0, "U": 8}, "session_id": "FAS5BAAGPlaNeIBcXYCTuHtxZtTA8cveZBp0nR-Kp_0", "set": null, "tc": [false, null], "type_annot_cove": 0.43, "typed_seq": "", "untyped_seq": "", "variables": {}, "variables_p": {}}}