{"error": null, "response": {"classes": [], "funcs": [{"docstring": {"func": "Get a list of dates in the specified range, separated by delta.", "long_descr": ".. code-block:: pycon\n    >>> from airflow.utils.dates import date_range\n    >>> from datetime import datetime, timedelta\n    >>> date_range(datetime(2016, 1, 1), datetime(2016, 1, 3), delta=timedelta(1))\n    [datetime.datetime(2016, 1, 1, 0, 0, tzinfo=Timezone('UTC')),\n    datetime.datetime(2016, 1, 2, 0, 0, tzinfo=Timezone('UTC')),\n    datetime.datetime(2016, 1, 3, 0, 0, tzinfo=Timezone('UTC'))]\n    >>> date_range(datetime(2016, 1, 1), datetime(2016, 1, 3), delta=\"0 0 * * *\")\n    [datetime.datetime(2016, 1, 1, 0, 0, tzinfo=Timezone('UTC')),\n    datetime.datetime(2016, 1, 2, 0, 0, tzinfo=Timezone('UTC')),\n    datetime.datetime(2016, 1, 3, 0, 0, tzinfo=Timezone('UTC'))]\n    >>> date_range(datetime(2016, 1, 1), datetime(2016, 3, 3), delta=\"0 0 0 * *\")\n    [datetime.datetime(2016, 1, 1, 0, 0, tzinfo=Timezone('UTC')),\n    datetime.datetime(2016, 2, 1, 0, 0, tzinfo=Timezone('UTC')),\n    datetime.datetime(2016, 3, 1, 0, 0, tzinfo=Timezone('UTC'))]", "ret": null}, "fn_lc": [[41, 0], [135, 24]], "fn_var_ln": {"abs_delta": [[100, 8], [100, 17]], "cron": [[96, 8], [96, 12]], "dates": [[104, 4], [104, 9]], "delta_iscron": [[93, 8], [93, 20]], "end_date": [[107, 12], [107, 20]], "num_entries": [[119, 8], [119, 19]], "start_date": [[129, 16], [129, 26]], "time_zone": [[89, 4], [89, 13]]}, "fn_var_occur": {"abs_delta": [["abs_delta", "timedelta", "relativedelta"], ["abs_delta", "abs", "delta"], ["abs_delta", "abs", "delta"], ["start_date", "abs_delta"], ["start_date", "abs_delta"], ["start_date", "abs_delta"]], "cron": [["cron", "croniter", "cron_presets", "get", "delta", "delta", "start_date"], ["start_date", "cron", "get_next", "datetime"], ["start_date", "cron", "get_next", "datetime"], ["start_date", "cron", "get_prev", "datetime"]], "dates": [["dates", "append", "timezone", "make_aware", "start_date", "time_zone"], ["dates", "append", "start_date"], ["dates", "append", "timezone", "make_aware", "start_date", "time_zone"], ["dates", "append", "start_date"], ["sorted", "dates"]], "delta_iscron": [["delta_iscron", "False"], ["delta_iscron", "True"], ["delta_iscron", "num_entries"]], "end_date": [["start_date", "end_date"], ["end_date", "num"], ["end_date", "timezone", "utcnow"], ["timezone", "is_naive", "start_date", "timezone", "is_naive", "end_date"], ["end_date", "timezone", "make_naive", "end_date", "time_zone"], ["start_date", "end_date"]], "num_entries": [["num_entries", "builtins", "int", "num"], ["range", "abs", "num_entries"], ["delta_iscron", "num_entries"]], "start_date": [["start_date", "end_date"], ["time_zone", "start_date", "tzinfo"], ["timezone", "is_localized", "start_date"], ["start_date", "timezone", "make_naive", "start_date", "time_zone"], ["cron", "croniter", "cron_presets", "get", "delta", "delta", "start_date"], ["timezone", "is_naive", "start_date", "timezone", "is_naive", "end_date"], ["start_date", "end_date"], ["timezone", "is_naive", "start_date"], ["dates", "append", "timezone", "make_aware", "start_date", "time_zone"], ["dates", "append", "start_date"], ["start_date", "cron", "get_next", "datetime"], ["start_date", "abs_delta"], ["timezone", "is_naive", "start_date"], ["dates", "append", "timezone", "make_aware", "start_date", "time_zone"], ["dates", "append", "start_date"], ["start_date", "cron", "get_next", "datetime"], ["start_date", "cron", "get_prev", "datetime"], ["start_date", "abs_delta"], ["start_date", "abs_delta"]], "time_zone": [["time_zone", "start_date", "tzinfo"], ["start_date", "timezone", "make_naive", "start_date", "time_zone"], ["end_date", "timezone", "make_naive", "end_date", "time_zone"], ["dates", "append", "timezone", "make_aware", "start_date", "time_zone"], ["dates", "append", "timezone", "make_aware", "start_date", "time_zone"]]}, "name": "date_range", "params": {"delta": "str | timedelta | relativedelta | None", "end_date": "datetime | None", "num": "int | None", "start_date": "datetime.datetime"}, "params_descr": {"delta": "step length. It can be datetime.timedelta or cron expression as string", "end_date": "right boundary for the date range", "num": "alternatively to end_date, you can specify the number of\nnumber of entries you want in the range. This number can be negative,\noutput will always be sorted regardless", "start_date": "anchor date to start the series from"}, "params_occur": {"delta": [["isinstance", "delta", "str"], ["cron", "croniter", "cron_presets", "get", "delta", "delta", "start_date"], ["isinstance", "delta", "timedelta"], ["abs_delta", "abs", "delta"], ["isinstance", "delta", "relativedelta"], ["abs_delta", "abs", "delta"]], "end_date": [["start_date", "end_date"], ["end_date", "num"], ["end_date", "timezone", "utcnow"], ["timezone", "is_naive", "start_date", "timezone", "is_naive", "end_date"], ["end_date", "timezone", "make_naive", "end_date", "time_zone"], ["start_date", "end_date"]], "num": [["end_date", "num"], ["num_entries", "builtins", "int", "num"]], "start_date": [["start_date", "end_date"], ["time_zone", "start_date", "tzinfo"], ["timezone", "is_localized", "start_date"], ["start_date", "timezone", "make_naive", "start_date", "time_zone"], ["cron", "croniter", "cron_presets", "get", "delta", "delta", "start_date"], ["timezone", "is_naive", "start_date", "timezone", "is_naive", "end_date"], ["start_date", "end_date"], ["timezone", "is_naive", "start_date"], ["dates", "append", "timezone", "make_aware", "start_date", "time_zone"], ["dates", "append", "start_date"], ["start_date", "cron", "get_next", "datetime"], ["start_date", "abs_delta"], ["timezone", "is_naive", "start_date"], ["dates", "append", "timezone", "make_aware", "start_date", "time_zone"], ["dates", "append", "start_date"], ["start_date", "cron", "get_next", "datetime"], ["start_date", "cron", "get_prev", "datetime"], ["start_date", "abs_delta"], ["start_date", "abs_delta"]]}, "params_p": {"args": [], "delta": [["str", 0.8934349208404412], ["datetime.timedelta", 0.10656507915955891]], "end_date": [["str", 0.38816339580719805], ["datetime.datetime", 0.20941738545142458], ["datetime.date", 0.18574949685472078]], "kwargs": [], "num": [["int", 0.3835653252435466], ["str", 0.18163707396753132], ["Optional[datetime.timedelta]", 0.12658026341069528], ["Optional[datetime.datetime]", 0.12658026341069528], ["bool", 0.09081853698376566], ["float", 0.09081853698376566]], "start_date": [["str", 0.4814096556542854], ["datetime.datetime", 0.2021699953655117], ["datetime.date", 0.13272738719219931], ["int", 0.09592742895569528]]}, "q_name": "date_range", "ret_exprs": ["return []", "return sorted(dates)"], "ret_type": "builtins.list[datetime.datetime]", "ret_type_p": [["datetime.datetime", 0.21116357750780881], ["datetime.date", 0.18578643872956124], ["str", 0.1569370589516881], ["recidiviz.calculator.pipeline.utils.incarceration_period_index.IncarcerationPeriodIndex", 0.0888530298425327]], "variables": {"abs_delta": "", "cron": "", "dates": "", "delta_iscron": "", "end_date": "", "num_entries": "builtins.int", "start_date": "", "time_zone": ""}, "variables_p": {"abs_delta": [["datetime.timedelta", 0.22706643050903452], ["int", 0.06775005668482148], ["Dict[str, Any]", 0.06274609196000352]], "cron": [["Dict[str, Any]", 0.10922570621570045], ["List[int]", 0.08210406856959776], ["int", 0.07804544458603448]], "dates": [["datetime.datetime.datetime", 0.36453634684466], ["str", 0.2491196568142333], ["datetime.datetime.date", 0.16349881986118067], ["list", 0.0862286318981485], ["datetime.date", 0.07555693023323531], ["Pattern[str]", 0.06105961434854226]], "delta_iscron": [["str", 0.7340636137694433], ["Pattern[str]", 0.0919535855332136], ["list", 0.08707767394599854], ["int", 0.0869051267513447]], "end_date": [["datetime.date", 1.0]], "num_entries": [["int", 1.0]], "start_date": [["datetime.date", 0.9110728934680835], ["datetime.datetime.datetime", 0.08892710653191646]], "time_zone": [["str", 0.9080475751427441], ["Callable", 0.09195242485725574]]}}, {"docstring": {"func": "Returns ``start_date + i * delta`` for given ``i`` where the result is closest to ``dt``.", "long_descr": ".. code-block:: pycon\n\n    >>> round_time(datetime(2015, 1, 1, 6), timedelta(days=1))\n    datetime.datetime(2015, 1, 1, 0, 0)\n    >>> round_time(datetime(2015, 1, 2), relativedelta(months=1))\n    datetime.datetime(2015, 1, 1, 0, 0)\n    >>> round_time(datetime(2015, 9, 16, 0, 0), timedelta(1), datetime(2015, 9, 14, 0, 0))\n    datetime.datetime(2015, 9, 16, 0, 0)\n    >>> round_time(datetime(2015, 9, 15, 0, 0), timedelta(1), datetime(2015, 9, 14, 0, 0))\n    datetime.datetime(2015, 9, 15, 0, 0)\n    >>> round_time(datetime(2015, 9, 14, 0, 0), timedelta(1), datetime(2015, 9, 14, 0, 0))\n    datetime.datetime(2015, 9, 14, 0, 0)\n    >>> round_time(datetime(2015, 9, 13, 0, 0), timedelta(1), datetime(2015, 9, 14, 0, 0))\n    datetime.datetime(2015, 9, 14, 0, 0)", "ret": null}, "fn_lc": [[138, 0], [215, 29]], "fn_var_ln": {"candidate": [[211, 8], [211, 17]], "cron": [[164, 8], [164, 12]], "lower": [[215, 12], [215, 17]], "prev": [[165, 8], [165, 12]], "start_date": [[163, 8], [163, 18]], "time_zone": [[162, 8], [162, 17]], "upper": [[213, 12], [213, 17]]}, "fn_var_occur": {"candidate": [["candidate", "lower", "upper", "lower"], ["start_date", "candidate", "delta", "dt"], ["upper", "candidate"], ["lower", "candidate"]], "cron": [["cron", "croniter", "delta", "start_date"], ["prev", "cron", "get_prev", "datetime"]], "lower": [["lower", "upper"], ["start_date", "lower", "delta", "dt"], ["start_date", "lower", "delta", "dt", "dt", "start_date", "lower", "delta"], ["start_date", "lower", "delta"], ["start_date", "lower", "delta"], ["candidate", "lower", "upper", "lower"], ["lower", "candidate"]], "prev": [["prev", "cron", "get_prev", "datetime"], ["prev", "start_date"], ["timezone", "make_aware", "prev", "time_zone"]], "start_date": [["time_zone", "start_date", "tzinfo"], ["start_date", "timezone", "make_naive", "start_date", "time_zone"], ["cron", "croniter", "delta", "start_date"], ["prev", "start_date"], ["timezone", "make_aware", "start_date", "time_zone"], ["start_date", "upper", "delta", "dt"], ["start_date", "lower", "delta", "dt"], ["start_date", "lower", "delta", "dt", "dt", "start_date", "lower", "delta"], ["start_date", "lower", "delta"], ["start_date", "lower", "delta"], ["start_date", "candidate", "delta", "dt"]], "time_zone": [["time_zone", "start_date", "tzinfo"], ["start_date", "timezone", "make_naive", "start_date", "time_zone"], ["timezone", "make_aware", "start_date", "time_zone"], ["timezone", "make_aware", "prev", "time_zone"]], "upper": [["start_date", "upper", "delta", "dt"], ["lower", "upper"], ["candidate", "lower", "upper", "lower"], ["upper", "candidate"]]}, "name": "round_time", "params": {"delta": "str | timedelta | relativedelta", "dt": "datetime.datetime", "start_date": "datetime.datetime"}, "params_descr": {"delta": "", "dt": "", "start_date": ""}, "params_occur": {"delta": [["isinstance", "delta", "str"], ["cron", "croniter", "delta", "start_date"], ["start_date", "upper", "delta", "dt"], ["start_date", "lower", "delta", "dt"], ["start_date", "lower", "delta", "dt", "dt", "start_date", "lower", "delta"], ["start_date", "lower", "delta"], ["start_date", "lower", "delta"], ["start_date", "candidate", "delta", "dt"]], "dt": [["dt", "timedelta", "microseconds", "dt", "microsecond"], ["start_date", "upper", "delta", "dt"], ["start_date", "lower", "delta", "dt"], ["start_date", "lower", "delta", "dt", "dt", "start_date", "lower", "delta"], ["start_date", "candidate", "delta", "dt"]], "start_date": [["time_zone", "start_date", "tzinfo"], ["start_date", "timezone", "make_naive", "start_date", "time_zone"], ["cron", "croniter", "delta", "start_date"], ["prev", "start_date"], ["timezone", "make_aware", "start_date", "time_zone"], ["start_date", "upper", "delta", "dt"], ["start_date", "lower", "delta", "dt"], ["start_date", "lower", "delta", "dt", "dt", "start_date", "lower", "delta"], ["start_date", "lower", "delta"], ["start_date", "lower", "delta"], ["start_date", "candidate", "delta", "dt"]]}, "params_p": {"args": [], "delta": [["str", 0.3176085714790393], ["datetime.date", 0.29328832904435936], ["datetime.datetime", 0.19207512936522111], ["int", 0.10208572792811854], ["Optional[datetime.date]", 0.09494224218326158]], "dt": [["int", 0.31541195359915253], ["datetime.date", 0.22080518800015966], ["str", 0.18197465807327767], ["Optional[str]", 0.09983354225413243], ["List[str]", 0.09190513366884498]], "kwargs": [], "start_date": [["str", 0.4080320958896109], ["datetime.date", 0.1994251632682173], ["int", 0.19775826657373974], ["Optional[datetime.date]", 0.09806826186142514], ["Optional[str]", 0.09671621240700679]]}, "q_name": "round_time", "ret_exprs": ["return timezone.make_aware(start_date, time_zone)", "return timezone.make_aware(prev, time_zone)", "return start_date + (lower + 1) * delta", "return start_date + lower * delta"], "ret_type": "", "ret_type_p": [["str", 0.11388132218597774], ["dict", 0.08239152604365767]], "variables": {"candidate": "", "cron": "", "lower": "", "prev": "", "start_date": "", "time_zone": "", "upper": ""}, "variables_p": {"candidate": [["str", 0.43652757518541707], ["bool", 0.11774800520583335], ["list", 0.0884458386810309], ["dict", 0.0813114357863548]], "cron": [["str", 0.20451543980121256], ["Dict[str, str]", 0.16819934830354344], ["List[str]", 0.13457279508705705], ["datetime.datetime.timedelta", 0.11659293905221013], ["datetime.datetime.datetime", 0.09879557974882662]], "lower": [["str", 0.3026895978827793], ["Dict[str, str]", 0.17797838770722152], ["List[str]", 0.1604590088217715], ["Tuple[int, int]", 0.12289118856178909], ["List[Tuple[Any, Any]]", 0.08680629357763378], ["datetime.timedelta", 0.07517023019802109]], "prev": [["str", 0.3075572073152727], ["datetime.datetime.datetime", 0.13649423583539222], ["datetime.datetime", 0.12537978543844197], ["Dict[str, Tuple[str, str]]", 0.06629482985469295], ["List[Tuple[str, Any]]", 0.06519278208684642]], "start_date": [["datetime.date.time.date", 0.29508169456230016], ["datetime.date", 0.2142960549712007], ["datetime.datetime.datetime", 0.1822625386180448], ["datetime.datetime", 0.09498771851438445], ["datetime.datetime.timedelta", 0.09075110538696317]], "time_zone": [["str", 1.0000000000000002]], "upper": [["str", 0.3842168400808164], ["int", 0.20257647326917716], ["List[Tuple[Any, Any]]", 0.09052206403320162]]}}, {"docstring": {"func": "Determine the most appropriate time unit for given durations (in seconds).", "long_descr": "e.g. 5400 seconds => 'minutes', 36000 seconds => 'hours'", "ret": null}, "fn_lc": [[225, 0], [240, 21]], "fn_var_ln": {"max_time_seconds": [[232, 4], [232, 20]]}, "fn_var_occur": {"max_time_seconds": [["max_time_seconds", "max", "time_seconds_arr"]]}, "name": "infer_time_unit", "params": {"time_seconds_arr": "typing.Collection[builtins.float]"}, "params_descr": {"time_seconds_arr": ""}, "params_occur": {"time_seconds_arr": [["len", "time_seconds_arr"], ["max_time_seconds", "max", "time_seconds_arr"]]}, "params_p": {"args": [], "kwargs": [], "time_seconds_arr": [["int", 0.3023909048671296], ["Callable[[int], bool]", 0.29173854746086425], ["float", 0.19933675525273248]]}, "q_name": "infer_time_unit", "ret_exprs": ["return \"hours\"", "return \"seconds\"", "return \"minutes\"", "return \"hours\"", "return \"days\""], "ret_type": "TimeUnit", "ret_type_p": [["Tuple[int, int]", 0.18791548066427113], ["List[int]", 0.09916538408993042], ["int", 0.09916538408993042]], "variables": {"max_time_seconds": ""}, "variables_p": {"max_time_seconds": [["str", 0.9999999997974596], ["dict", 4.708323168429846e-11], ["int", 4.21699336592155e-11], ["tuple", 4.21699336592155e-11], ["datetime.datetime", 3.823264433967348e-11], ["float", 3.2884750561033443e-11]]}}, {"docstring": {"func": "Convert an array of time durations in seconds to the specified time unit.", "long_descr": null, "ret": null}, "fn_lc": [[243, 0], [251, 27]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "scale_time_units", "params": {"time_seconds_arr": "typing.Collection[builtins.float]", "unit": "TimeUnit"}, "params_descr": {"time_seconds_arr": "", "unit": ""}, "params_occur": {"time_seconds_arr": [["list", "map", "x", "x", "time_seconds_arr"], ["list", "map", "x", "x", "time_seconds_arr"], ["list", "map", "x", "x", "time_seconds_arr"]], "unit": []}, "params_p": {"args": [], "kwargs": [], "time_seconds_arr": [["int", 0.3024549785733095], ["List[str]", 0.11429006006055328], ["datetime.timedelta", 0.09336450436914948]], "unit": [["float", 0.33998759141367363], ["str", 0.29327803011457204], ["int", 0.244280267227174], ["datetime.datetime", 0.12245411124458042]]}, "q_name": "scale_time_units", "ret_exprs": ["return list(map(lambda x: x / 60, time_seconds_arr))", "return list(map(lambda x: x / (60 * 60), time_seconds_arr))", "return list(map(lambda x: x / (24 * 60 * 60), time_seconds_arr))", "return time_seconds_arr"], "ret_type": "typing.Collection[builtins.float]", "ret_type_p": [["List[Dict]", 0.19730300451102553], ["List[str]", 0.1041773267374073], ["List[int]", 0.10167951378509656], ["List[List[int]]", 0.08821745429216607], ["Union[List[float], List[int]]", 0.08573536623446304], ["list", 0.08474185472621885]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Get a datetime object representing *n* days ago.", "long_descr": "By default the time is set to midnight.", "ret": null}, "fn_lc": [[254, 0], [267, 36]], "fn_var_ln": {"today": [[266, 4], [266, 9]]}, "fn_var_occur": {"today": [["today", "timezone", "utcnow", "replace", "hour", "hour", "minute", "minute", "second", "second", "microsecond", "microsecond"], ["today", "timedelta", "days", "n"]]}, "name": "days_ago", "params": {"hour": "", "microsecond": "", "minute": "", "n": "", "second": ""}, "params_descr": {"hour": "", "microsecond": "", "minute": "", "n": "", "second": ""}, "params_occur": {"hour": [["today", "timezone", "utcnow", "replace", "hour", "hour", "minute", "minute", "second", "second", "microsecond", "microsecond"]], "microsecond": [["today", "timezone", "utcnow", "replace", "hour", "hour", "minute", "minute", "second", "second", "microsecond", "microsecond"]], "minute": [["today", "timezone", "utcnow", "replace", "hour", "hour", "minute", "minute", "second", "second", "microsecond", "microsecond"]], "n": [["today", "timedelta", "days", "n"]], "second": [["today", "timezone", "utcnow", "replace", "hour", "hour", "minute", "minute", "second", "second", "microsecond", "microsecond"]]}, "params_p": {"args": [], "hour": [["str", 0.8955472208780539], ["int", 0.10445277912194613]], "kwargs": [], "microsecond": [["str", 0.8955472208780539], ["int", 0.10445277912194613]], "minute": [["str", 0.8955472208780539], ["int", 0.10445277912194613]], "n": [["int", 0.809849278584667], ["str", 0.09507536070766658], ["List[str]", 0.09507536070766658]], "second": [["str", 0.8955472208780539], ["int", 0.10445277912194613]]}, "q_name": "days_ago", "ret_exprs": ["return today - timedelta(days=n)"], "ret_type": "", "ret_type_p": [["str", 0.5481497156771641], ["Tuple[int, int]", 0.10463979094164237], ["Union[tuple, list]", 0.09335566568887017]], "variables": {"today": ""}, "variables_p": {"today": [["str", 0.4979560456842883], ["List[str]", 0.18972716353783226], ["int", 0.1180404130976274], ["Dict[Tuple[str, str], int]", 0.09299740143301068]]}}, {"docstring": {"func": "Parse execution date string to datetime object.", "long_descr": null, "ret": null}, "fn_lc": [[270, 0], [272, 45]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "parse_execution_date", "params": {"execution_date_str": ""}, "params_descr": {"execution_date_str": ""}, "params_occur": {"execution_date_str": [["timezone", "parse", "execution_date_str"]]}, "params_p": {"args": [], "execution_date_str": [["str", 0.9999999999999998]], "kwargs": []}, "q_name": "parse_execution_date", "ret_exprs": ["return timezone.parse(execution_date_str)"], "ret_type": "", "ret_type_p": [["datetime.datetime", 0.26451762083454805]], "variables": {}, "variables_p": {}}], "imports": ["__future__", "annotations", "warnings", "datetime", "datetime", "timedelta", "typing", "Collection", "croniter", "croniter", "dateutil", "relativedelta", "relativedelta", "airflow", "exceptions", "RemovedInAirflow3Warning", "airflow", "typing_compat", "Literal", "airflow", "utils", "timezone"], "mod_var_ln": {"TimeUnit": [[222, 0], [222, 8]], "cron_presets": [[31, 0], [31, 12]]}, "mod_var_occur": {"TimeUnit": [], "cron_presets": [["cron", "croniter", "cron_presets", "get", "delta", "delta", "start_date"]]}, "no_types_annot": {"D": 12, "I": 0, "U": 26}, "session_id": "OGZKSnKeNA0OLri05BOqMfK6ztWd49YCcY13L3-3oHA", "set": null, "tc": [false, null], "type_annot_cove": 0.32, "typed_seq": "", "untyped_seq": "", "variables": {"TimeUnit": "", "cron_presets": "builtins.dict[builtins.str, builtins.str]"}, "variables_p": {"TimeUnit": [["int", 0.19999999999999998], ["float", 0.19999999999999998], ["List[int]", 0.09999999999999999], ["datetime.time", 0.09999999999999999], ["Tuple[float, str]", 0.09999999999999999], ["Dict[str, str]", 0.09999999999999999], ["property", 0.09999999999999999]], "cron_presets": [["int", 0.2833073917617803], ["str", 0.20543666412514439], ["Tuple[Type[str], Type[bytes]]", 0.18613565897744158], ["List[str]", 0.11235164037436703], ["Dict[str, str]", 0.11147604632388364], ["dict", 0.10129259843738297]]}}}