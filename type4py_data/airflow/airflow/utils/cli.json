{"error": null, "response": {"classes": [{"cls_lc": [[332, 0], [337, 17]], "cls_var_ln": {"AUTO": [[337, 4], [337, 8]], "OFF": [[336, 4], [336, 7]], "ON": [[335, 4], [335, 6]]}, "cls_var_occur": {"AUTO": [], "OFF": [], "ON": []}, "funcs": [], "name": "ColorMode", "q_name": "ColorMode", "variables": {"AUTO": "", "OFF": "", "ON": ""}, "variables_p": {"AUTO": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "OFF": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "ON": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]]}}], "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[52, 0], [58, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "_check_cli_args", "params": {"args": ""}, "params_descr": {"args": ""}, "params_occur": {"args": [["isinstance", "args", "Namespace"], ["ValueError", "type", "args"]]}, "params_p": {"args": [], "kwargs": []}, "q_name": "_check_cli_args", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "An wrapper for cli functions. It assumes to have Namespace instance", "long_descr": "at 1st positional argument.", "ret": null}, "fn_lc": [[85, 8], [118, 63]], "fn_var_ln": {"metrics": [[95, 12], [95, 19]], "root_logger": [[98, 12], [98, 23]], "verbose": [[97, 12], [97, 19]]}, "fn_var_occur": {"metrics": [["metrics", "_build_metrics", "f", "__name__", "args"], ["cli_action_loggers", "on_pre_execution", "metrics"], ["metrics", "e"], ["metrics", "datetime", "utcnow"], ["cli_action_loggers", "on_post_execution", "metrics"]], "root_logger": [["root_logger", "logging", "getLogger"], ["root_logger", "setLevel", "logging", "DEBUG"], ["root_logger", "handlers"]], "verbose": [["verbose", "getattr", "args", "False"]]}, "name": "wrapper", "params": {"args": "", "kwargs": ""}, "params_descr": {"args": "Positional argument. It assumes to have Namespace instance\nat 1st positional argument", "kwargs": "A passthrough keyword argument"}, "params_occur": {"args": [["_check_cli_args", "args"], ["metrics", "_build_metrics", "f", "__name__", "args"], ["verbose", "getattr", "args", "False"], ["f", "args", "kwargs"]], "kwargs": [["f", "args", "kwargs"]]}, "params_p": {"args": [], "kwargs": []}, "q_name": "action_cli.<locals>.action_logging.<locals>.wrapper", "ret_exprs": ["return f(*args, **kwargs)"], "ret_type": "", "ret_type_p": [["str", 0.8169801481133986], ["Iterable[str]", 0.08558710696068339]], "variables": {"metrics": "", "root_logger": "", "verbose": ""}, "variables_p": {"metrics": [["str", 0.13108054222506238], ["Tuple[str, str, str]", 0.0874227549667142], ["MutableMapping[Any, Any]", 0.08585670762853662], ["list", 0.0807525221115298]], "root_logger": [["logging.Logger", 0.9999999999999997]], "verbose": [["List[None]", 0.16413236367198586], ["str", 0.1229136068334289], ["list", 0.10258510191578465], ["Set[str]", 0.09661887419052721], ["Dict[Any, int]", 0.0883322315591402], ["int", 0.0848204886424324], ["bool", 0.08032785502707168]]}}, {"docstring": {"func": "Decorates function to execute function at the same time submitting action_logging", "long_descr": "but in CLI context. It will call action logger callbacks twice,\none for pre-execution and the other one for post-execution.\n\nAction logger will be called with below keyword parameters:\n    sub_command : name of sub-command\n    start_datetime : start datetime instance by utc\n    end_datetime : end datetime instance by utc\n    full_command : full command line arguments\n    user : current user\n    log : airflow.models.log.Log ORM instance\n    dag_id : dag id (optional)\n    task_id : task_id (optional)\n    execution_date : execution date (optional)\n    error : exception instance if there's an exception", "ret": "wrapped function"}, "fn_lc": [[62, 4], [120, 31]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "action_logging", "params": {"f": "T"}, "params_descr": {"f": "function instance"}, "params_occur": {"f": []}, "params_p": {"args": [], "f": [["Callable", 0.9999999992897944], ["List[magic.models.Card]", 7.242120234714743e-11]], "kwargs": []}, "q_name": "action_cli.<locals>.action_logging", "ret_exprs": ["return cast(T, wrapper)"], "ret_type": "T", "ret_type_p": [["str", 0.17742582234238985], ["Union[bool, List[bool]]", 0.08087737922669558]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[61, 0], [124, 25]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "action_cli", "params": {"check_db": "", "func": ""}, "params_descr": {"check_db": "", "func": ""}, "params_occur": {"check_db": [], "func": [["action_logging", "func"]]}, "params_p": {"args": [], "check_db": [], "func": [["threading.Event", 0.20994301017973968], ["Sequence[Any]", 0.17910085108718315], ["dict", 0.10360955086822074]], "kwargs": []}, "q_name": "action_cli", "ret_exprs": ["return action_logging(func)", "return action_logging"], "ret_type": "", "ret_type_p": [["int", 0.2941166470176081], ["salon.models.Stylist", 0.13879164115894801], ["float", 0.09190264435204894], ["Optional[str]", 0.09041151689292663]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Builds metrics dict from function args", "long_descr": "It assumes that function arguments is from airflow.bin.cli module's function\nand has Namespace instance where it optionally contains \"dag_id\", \"task_id\",\nand \"execution_date\".", "ret": "dict with metrics"}, "fn_lc": [[127, 0], [170, 18]], "fn_var_ln": {"full_command": [[140, 4], [140, 16]], "metrics": [[153, 4], [153, 11]], "sensitive_fields": [[139, 4], [139, 20]], "sub_command": [[141, 4], [141, 15]], "sub_commands_to_check": [[138, 4], [138, 25]], "tmp_dic": [[164, 4], [164, 11]]}, "fn_var_occur": {"full_command": [["full_command", "list", "sys", "argv"], ["sub_command", "full_command", "len", "full_command", "None"], ["enumerate", "full_command"], ["full_command", "idx"], ["full_command", "idx", "sensitive_field"], ["metrics", "func_name", "datetime", "utcnow", "full_command", "getuser"]], "metrics": [["metrics", "func_name", "datetime", "utcnow", "full_command", "getuser"], ["metrics", "tmp_dic", "get"], ["metrics", "tmp_dic", "get"], ["metrics", "tmp_dic", "get"], ["metrics", "socket", "gethostname"]], "sensitive_fields": [["command", "sensitive_fields"]], "sub_command": [["sub_command", "full_command", "len", "full_command", "None"], ["sub_command", "sub_commands_to_check"]], "sub_commands_to_check": [["sub_command", "sub_commands_to_check"]], "tmp_dic": [["tmp_dic", "vars", "namespace"], ["metrics", "tmp_dic", "get"], ["metrics", "tmp_dic", "get"], ["metrics", "tmp_dic", "get"]]}, "name": "_build_metrics", "params": {"func_name": "", "namespace": ""}, "params_descr": {"func_name": "name of function", "namespace": "Namespace instance from argparse"}, "params_occur": {"func_name": [["metrics", "func_name", "datetime", "utcnow", "full_command", "getuser"]], "namespace": [["isinstance", "namespace", "Namespace"], ["ValueError", "type", "namespace"], ["tmp_dic", "vars", "namespace"]]}, "params_p": {"args": [], "func_name": [["str", 0.9999999999999999]], "kwargs": [], "namespace": [["Optional[str]", 0.29056341860636525], ["str", 0.19733175843229836], ["Dict[str, Any]", 0.10467964185231843], ["bool", 0.10221069707601461]]}, "q_name": "_build_metrics", "ret_exprs": ["return metrics"], "ret_type": "", "ret_type_p": [["bool", 0.10000000000000002]], "variables": {"full_command": "", "metrics": "", "sensitive_fields": "", "sub_command": "", "sub_commands_to_check": "", "tmp_dic": ""}, "variables_p": {"full_command": [["list", 0.37274045937696126], ["int", 0.2320076500621428], ["Type[List[Any]]", 0.09837853092312007], ["bool", 0.09385130672053617]], "metrics": [["str", 0.5978009661519943], ["datetime.datetime.datetime", 0.21779122409888935], ["datetime.datetime", 0.12431488354978897], ["datetime.timedelta", 0.06009292619932744]], "sensitive_fields": [["int", 0.19999999999999998], ["Tuple[Literal]", 0.19999999999999998], ["List[str]", 0.19999999999999998], ["List[Tuple[str, str]]", 0.19999999999999998], ["list", 0.09999999999999999], ["Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]", 0.09999999999999999]], "sub_command": [["int", 0.25781601582671154], ["bool", 0.23147203110876066], ["dict", 0.1734243614912181], ["float", 0.1608364033923159], ["threading.local", 0.09140415602326726], ["List[int]", 0.08504703215772655]], "sub_commands_to_check": [["List[str]", 0.2981786150116742], ["list", 0.21975279825166952], ["List[None]", 0.11999692255336773], ["Dict[str, Union[Any, int]]", 0.10536583732627723], ["int", 0.08983282602922134], ["tuple", 0.08649867797630481], ["Dict[str, float]", 0.08037432285148507]], "tmp_dic": [["str", 0.31212604291238183]]}}, {"docstring": {"func": "Expands path to absolute by replacing 'DAGS_FOLDER', '~', '.', etc.", "long_descr": null, "ret": null}, "fn_lc": [[173, 0], [180, 17]], "fn_var_ln": {"subdir": [[179, 8], [179, 14]]}, "fn_var_occur": {"subdir": [["subdir", "subdir", "replace", "settings", "DAGS_FOLDER"], ["subdir", "os", "path", "abspath", "os", "path", "expanduser", "subdir"]]}, "name": "process_subdir", "params": {"subdir": "str | None"}, "params_descr": {"subdir": ""}, "params_occur": {"subdir": [["subdir", "subdir", "replace", "settings", "DAGS_FOLDER"], ["subdir", "os", "path", "abspath", "os", "path", "expanduser", "subdir"]]}, "params_p": {"args": [], "kwargs": [], "subdir": [["str", 0.564551244666512], ["faustypes.models.ModelT", 0.1103044900904044]]}, "q_name": "process_subdir", "ret_exprs": ["return subdir"], "ret_type": "", "ret_type_p": [["int", 0.30000000000000004], ["Callable", 0.2], ["models.Question", 0.1], ["str", 0.1]], "variables": {"subdir": ""}, "variables_p": {"subdir": [["str", 0.6672527583046031], ["List[str]", 0.1405254865979531], ["pathlib.Path", 0.09618940167234404], ["Dict[str, Union[Any, Any]]", 0.09603235342509973]]}}, {"docstring": {"func": "Returns DAG of a given dag_id by looking up file location.", "long_descr": null, "ret": null}, "fn_lc": [[183, 0], [194, 30]], "fn_var_ln": {"dag_model": [[188, 4], [188, 13]], "dagbag": [[193, 4], [193, 10]]}, "fn_var_occur": {"dag_model": [["dag_model", "DagModel", "get_current", "dag_id"], ["dag_model", "None"], ["dagbag", "DagBag", "dag_folder", "dag_model", "fileloc"]], "dagbag": [["dagbag", "DagBag", "dag_folder", "dag_model", "fileloc"], ["dagbag", "dags", "dag_id"]]}, "name": "get_dag_by_file_location", "params": {"dag_id": "builtins.str"}, "params_descr": {"dag_id": ""}, "params_occur": {"dag_id": [["dag_model", "DagModel", "get_current", "dag_id"], ["AirflowException", "dag_id"], ["dagbag", "dags", "dag_id"]]}, "params_p": {"args": [], "dag_id": [["str", 0.33209103242938376], ["int", 0.17418729535659366], ["transfer.models.TicketID", 0.10315834939205248]], "kwargs": []}, "q_name": "get_dag_by_file_location", "ret_exprs": ["return dagbag.dags[dag_id]"], "ret_type": "", "ret_type_p": [["str", 0.7008094217880415], ["Dict[str, Any]", 0.20684272156074976]], "variables": {"dag_model": "", "dagbag": ""}, "variables_p": {"dag_model": [["str", 0.1923461034277978], ["foolbox.models.keras.KerasModel", 0.1821584215610176], ["cleanslate.models.SourceRecord", 0.10272564453685983]], "dagbag": [["dict", 0.26627843277425983], ["Tuple[Literal, Literal, Literal]", 0.10666882093384321], ["str", 0.1001230385933369]]}}, {"docstring": {"func": "Search for the file referenced at fileloc.", "long_descr": "By the time we get to this function, we've already run this `val` through `process_subdir`\nand loaded the DagBag there and came up empty.  So here, if `val` is a file path, we make\na last ditch effort to try and find a dag file with the same name in our dags folder. (This\navoids the unnecessary dag parsing that would occur if we just parsed the dags folder).\n\nIf `val` is a path to a file, this likely means that the serializing process had a dags_folder\nequal to only the dag file in question. This prevents us from determining the relative location.\nAnd if the paths are different between worker and dag processor / scheduler, then we won't find\nthe dag at the given location.", "ret": null}, "fn_lc": [[197, 0], [215, 15]], "fn_var_ln": {"matches": [[212, 8], [212, 15]]}, "fn_var_occur": {"matches": [["matches", "list", "Path", "settings", "DAGS_FOLDER", "rglob", "Path", "val", "name"], ["len", "matches"], ["matches", "as_posix"]]}, "name": "_search_for_dag_file", "params": {"val": "str | None"}, "params_descr": {"val": ""}, "params_occur": {"val": [["val", "Path", "val", "suffix"], ["matches", "list", "Path", "settings", "DAGS_FOLDER", "rglob", "Path", "val", "name"]]}, "params_p": {"args": [], "kwargs": [], "val": [["str", 0.42953494090520006], ["pathlib.Path", 0.19196052333282312], ["int", 0.10646388097678199]]}, "q_name": "_search_for_dag_file", "ret_exprs": ["return matches[0].as_posix()", "return None"], "ret_type": "str | None", "ret_type_p": [["Optional[models.Token]", 0.3036311753193513], ["str", 0.28813434675415606], ["Optional[Callable[..., Any]]", 0.2053341501055543], ["bool", 0.20290032782093823]], "variables": {"matches": ""}, "variables_p": {"matches": [["list", 0.3333040774536279], ["str", 0.15822906155220115], ["List[str]", 0.11627302498660158], ["int", 0.10929022130953707], ["pathlib.Path", 0.10075939183506581], ["Dict[str, Union[Any, Any, Any]]", 0.09274013107763675]]}}, {"docstring": {"func": "Returns DAG of a given dag_id.", "long_descr": "First we'll try to use the given subdir.  If that doesn't work, we'll try to\nfind the correct path (assuming it's a file) and failing that, use the configured\ndags folder.", "ret": null}, "fn_lc": [[218, 0], [245, 14]], "fn_var_ln": {"dag": [[240, 8], [240, 11]], "dagbag": [[239, 8], [239, 14]], "fallback_path": [[237, 8], [237, 21]], "first_path": [[231, 8], [231, 18]]}, "fn_var_occur": {"dag": [["dag", "dagbag", "get_dag", "dag_id"], ["dag", "dagbag", "get_dag", "dag_id"]], "dagbag": [["dagbag", "DagBag", "read_dags_from_db", "True"], ["dagbag", "DagBag", "first_path"], ["dag", "dagbag", "get_dag", "dag_id"], ["dagbag", "DagBag", "dag_folder", "fallback_path"], ["dag", "dagbag", "get_dag", "dag_id"]], "fallback_path": [["fallback_path", "_search_for_dag_file", "subdir", "settings", "DAGS_FOLDER"], ["logger", "warning", "dag_id", "first_path", "fallback_path"], ["dagbag", "DagBag", "dag_folder", "fallback_path"]], "first_path": [["first_path", "process_subdir", "subdir"], ["dagbag", "DagBag", "first_path"], ["logger", "warning", "dag_id", "first_path", "fallback_path"]]}, "name": "get_dag", "params": {"dag_id": "builtins.str", "from_db": "builtins.bool", "subdir": "str | None"}, "params_descr": {"dag_id": "", "from_db": "", "subdir": ""}, "params_occur": {"dag_id": [["dag", "dagbag", "get_dag", "dag_id"], ["AirflowException", "dag_id"], ["logger", "warning", "dag_id", "first_path", "fallback_path"], ["dag", "dagbag", "get_dag", "dag_id"], ["AirflowException", "dag_id"]], "from_db": [], "subdir": [["first_path", "process_subdir", "subdir"], ["fallback_path", "_search_for_dag_file", "subdir", "settings", "DAGS_FOLDER"]]}, "params_p": {"args": [], "dag_id": [["Optional[bytes]", 0.21034139539342164], ["str", 0.19408519910886302], ["int", 0.10281637016926254], ["dict", 0.09987798205583029], ["Mapping[str, Any]", 0.09126882893960049]], "from_db": [["str", 0.3791178750196291], ["list", 0.11411363052728567], ["int", 0.11395120420832791], ["bool", 0.11395120420832791], ["Optional[str]", 0.08881758127556397], ["mode.utils.times.Seconds", 0.08459031022752823]], "kwargs": [], "subdir": [["str", 0.5084027182203025], ["pathlib.Path", 0.11977910416797735], ["Optional[str]", 0.11427389787755288], ["int", 0.10441109386742946], ["os.PathLike", 0.07735460346668688], ["bytes", 0.07577858240005096]]}, "q_name": "get_dag", "ret_exprs": ["return dag"], "ret_type": "airflow.models.dag.DAG", "ret_type_p": [["str", 0.19999999999999998], ["bool", 0.09999999999999999]], "variables": {"dag": "", "dagbag": "", "fallback_path": "", "first_path": ""}, "variables_p": {"dag": [["str", 0.5981253930216865], ["geode.models.common.Address", 0.11172643917839238], ["rotkehlchen.tests.utils.rotkehlchen.BalancesTestSetup", 0.09619811597963475]], "dagbag": [["pathlib.Path", 0.24276976012218382], ["astrality.tests.utils.Retry", 0.10859741979330438], ["Optional[pathlib.Path]", 0.10358101632550909], ["List[str]", 0.09435261285736155], ["bool", 0.08753168775650592], ["dict", 0.08682570371039554]], "fallback_path": [["str", 0.5890525708737829], ["pathlib.Path", 0.41094742912621696]], "first_path": [["str", 0.8760702041154107], ["pathlib.Path", 0.12392979588458909]]}}, {"docstring": {"func": "Returns DAG(s) matching a given regex or dag_id.", "long_descr": null, "ret": null}, "fn_lc": [[248, 0], [261, 23]], "fn_var_ln": {"dagbag": [[254, 4], [254, 10]], "matched_dags": [[255, 4], [255, 16]]}, "fn_var_occur": {"dagbag": [["dagbag", "DagBag", "process_subdir", "subdir"], ["matched_dags", "dag", "dag", "dagbag", "dags", "values", "re2", "search", "dag_id", "dag", "dag_id"]], "matched_dags": [["matched_dags", "dag", "dag", "dagbag", "dags", "values", "re2", "search", "dag_id", "dag", "dag_id"]]}, "name": "get_dags", "params": {"dag_id": "builtins.str", "subdir": "str | None", "use_regex": "builtins.bool"}, "params_descr": {"dag_id": "", "subdir": "", "use_regex": ""}, "params_occur": {"dag_id": [["get_dag", "subdir", "dag_id"], ["matched_dags", "dag", "dag", "dagbag", "dags", "values", "re2", "search", "dag_id", "dag", "dag_id"], ["AirflowException", "dag_id"]], "subdir": [["get_dag", "subdir", "dag_id"], ["dagbag", "DagBag", "process_subdir", "subdir"]], "use_regex": []}, "params_p": {"args": [], "dag_id": [["str", 0.17574249495136707], ["bytes", 0.12949957695340156], ["int", 0.09189796944724926], ["Optional[float]", 0.08753390189063869]], "kwargs": [], "subdir": [["str", 0.3209573920405979], ["int", 0.1659659421821623], ["bool", 0.08727256934979251], ["transfer.models.CategoryID", 0.08298297109108115], ["authentication.session.models.current_user.CurrentUser", 0.08298297109108115]], "use_regex": [["bool", 0.2802337220971691], ["list", 0.10166378524850593], ["Dict[str, Any]", 0.09674933863084273], ["List[manager.models.reflection.Reflection]", 0.09163947303884408], ["int", 0.087968050457679], ["Sequence[services.ticketing.models.tickeTicket]", 0.08112690776203399]]}, "q_name": "get_dags", "ret_exprs": ["return [get_dag(subdir, dag_id)]", "return matched_dags"], "ret_type": "", "ret_type_p": [["str", 0.5147844324127904], ["Optional[str]", 0.09869867205495832], ["Union[int, float]", 0.09030077882637426]], "variables": {"dagbag": "", "matched_dags": ""}, "variables_p": {"dagbag": [["qutebrowser.utils.objreg.ObjectRegistry", 0.12335715418020166]], "matched_dags": [["int", 0.18979322555541417], ["Pattern[str]", 0.18744579804191486], ["str", 0.1268044411060455], ["Set[str]", 0.10830085416111898], ["list", 0.09144590308421843], ["Dict[str, str]", 0.09099925234821955]]}}, {"docstring": {"func": "Fetch DAG from the database using pickling.", "long_descr": null, "ret": null}, "fn_lc": [[265, 0], [273, 21]], "fn_var_ln": {"dag_pickle": [[269, 4], [269, 14]], "pickle_dag": [[272, 4], [272, 14]]}, "fn_var_occur": {"dag_pickle": [["dag_pickle", "session", "query", "DagPickle", "filter", "DagPickle", "id", "pickle_id", "first"], ["pickle_dag", "dag_pickle", "pickle"]], "pickle_dag": [["pickle_dag", "dag_pickle", "pickle"]]}, "name": "get_dag_by_pickle", "params": {"pickle_id": "builtins.int", "session": "sqlalchemy.orm.Session"}, "params_descr": {"pickle_id": "", "session": ""}, "params_occur": {"pickle_id": [["dag_pickle", "session", "query", "DagPickle", "filter", "DagPickle", "id", "pickle_id", "first"], ["AirflowException", "pickle_id"]], "session": [["dag_pickle", "session", "query", "DagPickle", "filter", "DagPickle", "id", "pickle_id", "first"]]}, "params_p": {"args": [], "kwargs": [], "pickle_id": [["sqlalchemy.orm.Session", 0.5241326093400002], ["int", 0.3654185121256228], ["sqlalchemy.orm.scoping.scoped_session", 0.11044887853437695]], "session": [["sqlalchemy.orm.Session", 0.5220138323472109], ["int", 0.3714883765855159], ["sqlalchemy.orm.scoping.scoped_session", 0.1064977910672732]]}, "q_name": "get_dag_by_pickle", "ret_exprs": ["return pickle_dag"], "ret_type": "airflow.models.dag.DAG", "ret_type_p": [["str", 0.19999999999999998], ["bool", 0.09999999999999999]], "variables": {"dag_pickle": "", "pickle_dag": ""}, "variables_p": {"dag_pickle": [["int", 0.43616567072963197], ["app.models.Tweet", 0.10702381931545696], ["app.models.UserModel", 0.05867016387745732]], "pickle_dag": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["Callable(functools.wraps)[[Named(wrapped, Callable[..., Any]), Named(assigned, Sequence[str], default), Named(updated, Sequence[str], default)], Callable[Any, Any]]", 0.1], ["str", 0.1], ["datetime.timedelta", 0.1]]}}, {"docstring": {"func": "Creates logging paths.", "long_descr": null, "ret": null}, "fn_lc": [[276, 0], [290, 35]], "fn_var_ln": {"log": [[283, 8], [283, 11]], "pid": [[288, 8], [288, 11]], "stderr": [[279, 8], [279, 14]], "stdout": [[281, 8], [281, 14]]}, "fn_var_occur": {"log": [["log", "os", "path", "join", "settings", "AIRFLOW_HOME", "process"], ["pid", "stdout", "stderr", "log"]], "pid": [["pid", "os", "path", "join", "settings", "AIRFLOW_HOME", "process"], ["pid", "os", "path", "abspath", "pid"], ["pid", "stdout", "stderr", "log"]], "stderr": [["stderr", "os", "path", "join", "settings", "AIRFLOW_HOME", "process"], ["pid", "stdout", "stderr", "log"]], "stdout": [["stdout", "os", "path", "join", "settings", "AIRFLOW_HOME", "process"], ["pid", "stdout", "stderr", "log"]]}, "name": "setup_locations", "params": {"log": "", "pid": "", "process": "", "stderr": "", "stdout": ""}, "params_descr": {"log": "", "pid": "", "process": "", "stderr": "", "stdout": ""}, "params_occur": {"log": [["log", "os", "path", "join", "settings", "AIRFLOW_HOME", "process"], ["pid", "stdout", "stderr", "log"]], "pid": [["pid", "os", "path", "join", "settings", "AIRFLOW_HOME", "process"], ["pid", "os", "path", "abspath", "pid"], ["pid", "stdout", "stderr", "log"]], "process": [["stderr", "os", "path", "join", "settings", "AIRFLOW_HOME", "process"], ["stdout", "os", "path", "join", "settings", "AIRFLOW_HOME", "process"], ["log", "os", "path", "join", "settings", "AIRFLOW_HOME", "process"], ["pid", "os", "path", "join", "settings", "AIRFLOW_HOME", "process"]], "stderr": [["stderr", "os", "path", "join", "settings", "AIRFLOW_HOME", "process"], ["pid", "stdout", "stderr", "log"]], "stdout": [["stdout", "os", "path", "join", "settings", "AIRFLOW_HOME", "process"], ["pid", "stdout", "stderr", "log"]]}, "params_p": {"args": [], "kwargs": [], "log": [["str", 0.7679217725633509], ["bool", 0.13315028374463697]], "pid": [["str", 0.30271457608818586], ["float", 0.16495456273474526], ["bool", 0.12958623195439944], ["int", 0.09694465660703337], ["List[str]", 0.09591225312027397], ["dict", 0.09467194024823328]], "process": [["str", 0.6948651768284216], ["int", 0.11513221420383331], ["datetime", 0.09581953128571799], ["bool", 0.09418307768202713]], "stderr": [["str", 0.7194560161806883], ["int", 0.08595701176254911]], "stdout": [["str", 0.7194560161806883], ["int", 0.08595701176254911]]}, "q_name": "setup_locations", "ret_exprs": ["return pid, stdout, stderr, log"], "ret_type": "", "ret_type_p": [["int", 0.22348283115900522], ["str", 0.15084390410171902], ["torch.nn.utils.rnn.PackedSequence", 0.08042436139181312], ["bytes", 0.07054292903624987]], "variables": {"log": "", "pid": "", "stderr": "", "stdout": ""}, "variables_p": {"log": [["str", 1.0]], "pid": [["str", 1.0]], "stderr": [["str", 1.0]], "stdout": [["str", 1.0]]}}, {"docstring": {"func": "Creates log file handler for daemon process.", "long_descr": null, "ret": null}, "fn_lc": [[293, 0], [302, 25]], "fn_var_ln": {"formatter": [[297, 4], [297, 13]], "handler": [[296, 4], [296, 11]], "root": [[295, 4], [295, 8]]}, "fn_var_occur": {"formatter": [["formatter", "logging", "Formatter", "settings", "SIMPLE_LOG_FORMAT"], ["handler", "setFormatter", "formatter"]], "handler": [["handler", "NonCachingFileHandler", "filename"], ["handler", "setFormatter", "formatter"], ["root", "addHandler", "handler"], ["handler", "stream"]], "root": [["root", "logging", "getLogger"], ["root", "addHandler", "handler"], ["root", "setLevel", "settings", "LOGGING_LEVEL"]]}, "name": "setup_logging", "params": {"filename": ""}, "params_descr": {"filename": ""}, "params_occur": {"filename": [["handler", "NonCachingFileHandler", "filename"]]}, "params_p": {"args": [], "filename": [["str", 0.7951186785831661], ["Mapping[str, str]", 0.10789664649659131]], "kwargs": []}, "q_name": "setup_logging", "ret_exprs": ["return handler.stream"], "ret_type": "", "ret_type_p": [["int", 0.30000000000000004], ["Callable", 0.2], ["models.Question", 0.1], ["str", 0.1]], "variables": {"formatter": "", "handler": "", "root": ""}, "variables_p": {"formatter": [["logging.Formatter", 0.7467341260074771], ["logging.handlers.QueueHandler", 0.16918178523005842], ["logging.Handler", 0.08408408876246458]], "handler": [["logging.StreamHandler", 0.6307607491810275], ["logging.handlers.SysLogHandler", 0.20067268158186902], ["logging.handlers.RotatingFileHandler", 0.08839676712490278], ["logging.FileHandler", 0.08016980211220065]], "root": [["logging.Logger", 1.0]]}}, {"docstring": {"func": "Returns without error on SIGINT or SIGTERM signals in interactive command mode.", "long_descr": "e.g. CTRL+C or kill <PID>", "ret": null}, "fn_lc": [[305, 0], [311, 15]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "sigint_handler", "params": {"frame": "", "sig": ""}, "params_descr": {"frame": "", "sig": ""}, "params_occur": {"frame": [], "sig": []}, "params_p": {"args": [], "frame": [["int", 0.19999999999999998], ["str", 0.19999999999999998], ["Iterable['Context']", 0.09999999999999999], ["dict", 0.09999999999999999], ["bool", 0.09999999999999999]], "kwargs": [], "sig": [["int", 0.19999999999999998], ["str", 0.19999999999999998], ["Iterable['Context']", 0.09999999999999999], ["dict", 0.09999999999999999], ["bool", 0.09999999999999999]]}, "q_name": "sigint_handler", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Helps debug deadlocks by printing stacktraces when this gets a SIGQUIT.", "long_descr": "e.g. kill -s QUIT <PID> or CTRL+", "ret": null}, "fn_lc": [[314, 0], [329, 26]], "fn_var_ln": {"code": [[322, 4], [322, 8]], "id_to_name": [[321, 4], [321, 14]]}, "fn_var_occur": {"code": [["code", "append", "id_to_name", "get", "thread_id", "thread_id"], ["code", "append", "filename", "line_number", "name"], ["code", "append", "line", "strip"], ["print", "join", "code"]], "id_to_name": [["id_to_name", "th", "ident", "th", "name", "th", "threading", "enumerate"], ["code", "append", "id_to_name", "get", "thread_id", "thread_id"]]}, "name": "sigquit_handler", "params": {"frame": "", "sig": ""}, "params_descr": {"frame": "", "sig": ""}, "params_occur": {"frame": [], "sig": []}, "params_p": {"args": [], "frame": [["int", 0.19999999999999998], ["str", 0.19999999999999998], ["Iterable['Context']", 0.09999999999999999], ["dict", 0.09999999999999999], ["bool", 0.09999999999999999]], "kwargs": [], "sig": [["int", 0.19999999999999998], ["str", 0.19999999999999998], ["Iterable['Context']", 0.09999999999999999], ["dict", 0.09999999999999999], ["bool", 0.09999999999999999]]}, "q_name": "sigquit_handler", "ret_exprs": [], "ret_type": "", "variables": {"code": "", "id_to_name": ""}, "variables_p": {"code": [["list", 0.7122935079022159], ["Dict[str, str]", 0.10894901400343157], ["deque[Any]", 0.0915024772552589]], "id_to_name": [["str", 0.30211759924909176], ["Tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str]", 0.12066715116321561], ["OrderedDict[str, str]", 0.10623564932970479], ["dict", 0.09285105576299267]]}}, {"docstring": {"func": "Processes arguments and decides whether to enable color in output.", "long_descr": null, "ret": null}, "fn_lc": [[340, 0], [346, 39]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "should_use_colors", "params": {"args": ""}, "params_descr": {"args": ""}, "params_occur": {"args": [["args", "color", "ColorMode", "ON"], ["args", "color", "ColorMode", "OFF"]]}, "params_p": {"args": [], "kwargs": []}, "q_name": "should_use_colors", "ret_exprs": ["return True", "return False", "return is_terminal_support_colors()"], "ret_type": "builtins.bool", "ret_type_p": [["bool", 0.9999999999999999]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[349, 0], [358, 43]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "should_ignore_depends_on_past", "params": {"args": ""}, "params_descr": {"args": ""}, "params_occur": {"args": [["args", "ignore_depends_on_past"], ["args", "depends_on_past"]]}, "params_p": {"args": [], "kwargs": []}, "q_name": "should_ignore_depends_on_past", "ret_exprs": ["return True", "return args.depends_on_past == \"ignore\""], "ret_type": "builtins.bool", "ret_type_p": [["bool", 0.9999999999999999]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[368, 4], [381, 51]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "_wrapper", "params": {"args": "", "kwargs": ""}, "params_descr": {"args": "", "kwargs": ""}, "params_occur": {"args": [["_check_cli_args", "args"], ["args", "verbose"], ["f", "args", "kwargs"], ["f", "args", "kwargs"]], "kwargs": [["f", "args", "kwargs"], ["f", "args", "kwargs"]]}, "params_p": {"args": [], "kwargs": []}, "q_name": "suppress_logs_and_warning.<locals>._wrapper", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Decorator to suppress logging and warning messages", "long_descr": "in cli functions.", "ret": null}, "fn_lc": [[361, 0], [383, 28]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "suppress_logs_and_warning", "params": {"f": "T"}, "params_descr": {"f": ""}, "params_occur": {"f": []}, "params_p": {"args": [], "f": [["Callable", 0.9999999992897944], ["List[magic.models.Card]", 7.242120234714743e-11]], "kwargs": []}, "q_name": "suppress_logs_and_warning", "ret_exprs": ["return cast(T, _wrapper)"], "ret_type": "T", "ret_type_p": [["str", 0.17742582234238985], ["Union[bool, List[bool]]", 0.08087737922669558]], "variables": {}, "variables_p": {}}], "imports": ["__future__", "annotations", "functools", "logging", "os", "socket", "sys", "threading", "traceback", "warnings", "argparse", "Namespace", "datetime", "datetime", "pathlib", "Path", "typing", "TYPE_CHECKING", "Callable", "TypeVar", "cast", "re2", "sqlalchemy", "orm", "Session", "airflow", "settings", "airflow", "exceptions", "AirflowException", "RemovedInAirflow3Warning", "airflow", "utils", "cli_action_loggers", "airflow", "utils", "log", "non_caching_file_handler", "NonCachingFileHandler", "airflow", "utils", "platform", "getuser", "is_terminal_support_colors", "airflow", "utils", "session", "NEW_SESSION", "provide_session", "airflow", "models", "dag", "DAG", "airflow", "configuration", "conf", "airflow", "utils", "db", "check_and_run_migrations", "synchronize_log_template", "airflow", "models", "DagBag", "DagModel", "airflow", "models", "DagBag", "airflow", "models", "DagBag", "airflow", "models", "DagPickle"], "mod_var_ln": {"T": [[44, 0], [44, 1]], "logger": [[49, 0], [49, 6]]}, "mod_var_occur": {"T": [["cast", "T", "wrapper"], ["cast", "T", "_wrapper"]], "logger": [["logger", "warning", "dag_id", "first_path", "fallback_path"]]}, "no_types_annot": {"D": 19, "I": 0, "U": 64}, "session_id": "hAJBnevqgk1hQ0OcPQMOZWbgYwbMwwb_BFRYBQDOnZY", "set": null, "tc": [false, null], "type_annot_cove": 0.23, "typed_seq": "", "untyped_seq": "", "variables": {"T": "", "logger": ""}, "variables_p": {"T": [["float", 0.5409926385841521], ["str", 0.13264183939363183]], "logger": [["logging.Logger", 1.0000000000000002]]}}}