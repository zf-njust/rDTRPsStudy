{"error": null, "response": {"classes": [], "funcs": [{"docstring": {"func": "Validates value used as a key.", "long_descr": null, "ret": null}, "fn_lc": [[48, 0], [58, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "validate_key", "params": {"k": "builtins.str", "max_length": "builtins.int"}, "params_descr": {"k": "", "max_length": ""}, "params_occur": {"k": [["isinstance", "k", "str"], ["TypeError", "type", "k", "k"], ["len", "k", "max_length"], ["KEY_REGEX", "match", "k"], ["AirflowException", "k"]], "max_length": [["len", "k", "max_length"], ["AirflowException", "max_length"]]}, "params_p": {"args": [], "k": [["str", 0.8084933570444778], ["Container[str]", 0.19150664295552214]], "kwargs": [], "max_length": [["int", 0.7986842688954603], ["Optional[float]", 0.08814459915885042]]}, "q_name": "validate_key", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Validates value used as a group key.", "long_descr": null, "ret": null}, "fn_lc": [[61, 0], [70, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "validate_group_key", "params": {"k": "builtins.str", "max_length": "builtins.int"}, "params_descr": {"k": "", "max_length": ""}, "params_occur": {"k": [["isinstance", "k", "str"], ["TypeError", "type", "k", "k"], ["len", "k", "max_length"], ["GROUP_KEY_REGEX", "match", "k"], ["AirflowException", "k"]], "max_length": [["len", "k", "max_length"], ["AirflowException", "max_length"]]}, "params_p": {"args": [], "k": [["str", 0.7812113309379307], ["dict", 0.09854511594265856]], "kwargs": [], "max_length": [["int", 0.40393761970070835], ["paradigm.models.Base", 0.19535889396867895], ["str", 0.10704983270525076]]}, "q_name": "validate_group_key", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Transforms a SQLAlchemy model instance into a dictionary.", "long_descr": null, "ret": null}, "fn_lc": [[73, 0], [83, 17]], "fn_var_ln": {"output": [[77, 4], [77, 10]], "value": [[81, 12], [81, 17]]}, "fn_var_occur": {"output": [["output", "col", "name", "value"]], "value": [["value", "getattr", "obj", "col", "name"], ["isinstance", "value", "datetime"], ["value", "value", "isoformat"], ["output", "col", "name", "value"]]}, "name": "alchemy_to_dict", "params": {"obj": "typing.Any"}, "params_descr": {"obj": ""}, "params_occur": {"obj": [["obj", "__table__", "columns"], ["value", "getattr", "obj", "col", "name"]]}, "params_p": {"args": [], "kwargs": [], "obj": [["utils.mssql_counters.Section", 0.11612285441907824], ["Dict[str, bool]", 0.09509530597514702], ["Iterable[Type]", 0.09424150539787586], ["List[django.db.models.Model]", 0.09231176606964198], ["Optional[Tuple[str, ...]]", 0.09078832088228427]]}, "q_name": "alchemy_to_dict", "ret_exprs": ["return None", "return output"], "ret_type": "dict | None", "ret_type_p": [["int", 0.2701105319779656], ["bool", 0.18165706686576918], ["Optional[int]", 0.1735652081242668], ["dict", 0.1287440114522106], ["Dict[str, Any]", 0.11618497595159215]], "variables": {"output": "", "value": ""}, "variables_p": {"output": [["List[str]", 0.1966365219806966], ["str", 0.19587255589774383], ["list", 0.11940955286482989], ["Set[str]", 0.10690950002864688], ["frozenset[str]", 0.10531206308636502], ["Type[Dict[str, Any]]", 0.09619220238078216], ["Counter[str]", 0.08940704198016768]], "value": [["str", 0.5991050169488644], ["raiden.utils.BlockNumber", 0.10810014664118354], ["datetime.date", 0.09982937785593832], ["list", 0.09901965418524644], ["datetime.datetime.date", 0.09394580436876723]]}}, {"docstring": {"func": "Helper to get a yes or no answer from the user.", "long_descr": null, "ret": null}, "fn_lc": [[86, 0], [100, 51]], "fn_var_ln": {"choice": [[93, 8], [93, 14]], "no": [[89, 4], [89, 6]], "yes": [[88, 4], [88, 7]]}, "fn_var_occur": {"choice": [["choice", "input", "lower"], ["choice", "default", "None"], ["choice", "yes"], ["choice", "no"]], "no": [["choice", "no"]], "yes": [["choice", "yes"]]}, "name": "ask_yesno", "params": {"default": "bool | None", "question": "builtins.str"}, "params_descr": {"default": "", "question": ""}, "params_occur": {"default": [["choice", "default", "None"]], "question": [["print", "question"]]}, "params_p": {"args": [], "default": [["Callable", 0.10140660616938943], ["Optional[str]", 0.09878755930730035], ["int", 0.09488815668267041], ["bool", 0.09180574218358017], ["Optional[Any]", 0.08626481676356991]], "kwargs": [], "question": [["str", 0.4987764064187621], ["Union[str, int]", 0.10807613929843626], ["FrozenSet[int]", 0.0871412334161951]]}, "q_name": "ask_yesno", "ret_exprs": ["return default", "return True", "return False"], "ret_type": "builtins.bool", "ret_type_p": [["bool", 0.9999999999999999]], "variables": {"choice": "", "no": "", "yes": ""}, "variables_p": {"choice": [["str", 0.21070326736593248], ["dict", 0.10354273625404604], ["Optional[int]", 0.09955817896961996]], "no": [["T", 0.3307894525545643], ["int", 0.23567191350809086], ["float", 0.14839958724641972], ["Dict[Any, int]", 0.14324123964007762], ["Dict[str, int]", 0.07162061982003881], ["str", 0.07027718723080868]], "yes": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["Callable(functools.wraps)[[Named(wrapped, Callable[..., Any]), Named(assigned, Sequence[str], default), Named(updated, Sequence[str], default)], Callable[Any, Any]]", 0.1], ["str", 0.1], ["datetime.timedelta", 0.1]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[106, 4], [107, 61]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "handler", "params": {"frame": "", "signum": ""}, "params_descr": {"frame": "", "signum": ""}, "params_occur": {"frame": [], "signum": []}, "params_p": {"args": [], "frame": [["int", 0.19999999999999998], ["str", 0.19999999999999998], ["Iterable['Context']", 0.09999999999999999], ["dict", 0.09999999999999999], ["bool", 0.09999999999999999]], "kwargs": [], "signum": [["int", 0.19999999999999998], ["str", 0.19999999999999998], ["Iterable['Context']", 0.09999999999999999], ["dict", 0.09999999999999999], ["bool", 0.09999999999999999]]}, "q_name": "prompt_with_timeout.<locals>.handler", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Ask the user a question and timeout if they don't respond.", "long_descr": null, "ret": null}, "fn_lc": [[103, 0], [114, 23]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "prompt_with_timeout", "params": {"default": "bool | None", "question": "builtins.str", "timeout": "builtins.int"}, "params_descr": {"default": "", "question": "", "timeout": ""}, "params_occur": {"default": [["ask_yesno", "question", "default"]], "question": [["ask_yesno", "question", "default"]], "timeout": [["signal", "alarm", "timeout"]]}, "params_p": {"args": [], "default": [["snorkel.types.DataPoint", 0.38924576071893185], ["int", 0.19915766783405342], ["bool", 0.1185191124512937]], "kwargs": [], "question": [["snorkel.types.DataPoint", 0.38924576071893185], ["int", 0.19915766783405342], ["bool", 0.1185191124512937]], "timeout": [["snorkel.types.DataPoint", 0.38924576071893185], ["int", 0.19915766783405342], ["bool", 0.1185191124512937]]}, "q_name": "prompt_with_timeout", "ret_exprs": ["return ask_yesno(question, default)"], "ret_type": "builtins.bool", "ret_type_p": [["cmk.utils.type_defs.ServiceName", 0.10207179795286027], ["cmk.utils.type_defs.HostName", 0.10207179795286027], ["utils.Node", 0.08255105015882963], ["zerver.models.Realm", 0.07172711198858313], ["int", 0.06885524107365397], ["str", 0.06885524107365397]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Test if an object is a container (iterable) but not a string.", "long_descr": null, "ret": null}, "fn_lc": [[117, 0], [119, 64]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "is_container", "params": {"obj": "typing.Any"}, "params_descr": {"obj": ""}, "params_occur": {"obj": [["hasattr", "obj", "isinstance", "obj", "str"]]}, "params_p": {"args": [], "kwargs": [], "obj": [["dict", 0.29718845053974946], ["int", 0.12227610385778982], ["core.models.Grouping", 0.1090195431882107], ["core.models.Registration", 0.1090195431882107], ["bool", 0.1086904593398439]]}, "q_name": "is_container", "ret_exprs": ["return hasattr(obj, \"__iter__\") and not isinstance(obj, str)"], "ret_type": "builtins.bool", "ret_type_p": [["str", 0.3096980771054971], ["int", 0.17993273992656048], ["Exception", 0.1046995139643169], ["Optional[int]", 0.09975887180685498], ["bool", 0.0894589600783487]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "If obj is a container, returns obj as a tuple.", "long_descr": "Otherwise, returns a tuple containing obj.", "ret": null}, "fn_lc": [[122, 0], [130, 27]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "as_tuple", "params": {"obj": "typing.Any"}, "params_descr": {"obj": ""}, "params_occur": {"obj": [["is_container", "obj"], ["tuple", "obj"], ["tuple", "obj"]]}, "params_p": {"args": [], "kwargs": [], "obj": []}, "q_name": "as_tuple", "ret_exprs": ["return tuple(obj)", "return tuple([obj])"], "ret_type": "builtins.tuple", "ret_type_p": [["int", 0.9999999974152998], ["types.UUIDType", 7.495324164117014e-10], ["float", 7.170887313852196e-10], ["str", 6.894270838457288e-10]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Yield successive chunks of a given size from a list of items.", "long_descr": null, "ret": null}, "fn_lc": [[133, 0], [138, 39]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "chunks", "params": {"chunk_size": "builtins.int", "items": "builtins.list[T]"}, "params_descr": {"chunk_size": "", "items": ""}, "params_occur": {"chunk_size": [["range", "len", "items", "chunk_size"], ["items", "i", "i", "chunk_size"]], "items": [["range", "len", "items", "chunk_size"], ["items", "i", "i", "chunk_size"]]}, "params_p": {"args": [], "chunk_size": [["int", 0.8975767942035583], ["List[str]", 0.10242320579644162]], "items": [["int", 0.8975767942035583], ["List[str]", 0.10242320579644162]], "kwargs": []}, "q_name": "chunks", "ret_exprs": [], "ret_type": "typing.Generator[builtins.list[T], None, None]", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Reduce the given list of items by splitting it into chunks", "long_descr": "of the given size and passing each chunk through the reducer.", "ret": null}, "fn_lc": [[141, 0], [150, 64]], "fn_var_ln": {"chunk_size": [[149, 8], [149, 18]]}, "fn_var_occur": {"chunk_size": [["chunk_size", "len", "iterable"], ["reduce", "fn", "chunks", "iterable", "chunk_size", "initializer"]]}, "name": "reduce_in_chunks", "params": {"chunk_size": "builtins.int", "fn": "typing.Callable[[S, builtins.list], S]", "initializer": "S", "iterable": "builtins.list[T]"}, "params_descr": {"chunk_size": "", "fn": "", "initializer": "", "iterable": ""}, "params_occur": {"chunk_size": [["chunk_size", "len", "iterable"], ["reduce", "fn", "chunks", "iterable", "chunk_size", "initializer"]], "fn": [["reduce", "fn", "chunks", "iterable", "chunk_size", "initializer"]], "initializer": [["reduce", "fn", "chunks", "iterable", "chunk_size", "initializer"]], "iterable": [["len", "iterable"], ["chunk_size", "len", "iterable"], ["reduce", "fn", "chunks", "iterable", "chunk_size", "initializer"]]}, "params_p": {"args": [], "chunk_size": [["int", 0.717356831954256]], "fn": [["int", 0.31490025199735366], ["str", 0.08773627059346134], ["Optional[int]", 0.08773627059346134]], "initializer": [["int", 0.31490025199735366], ["str", 0.08773627059346134], ["Optional[int]", 0.08773627059346134]], "iterable": [["int", 0.7454725680842199], ["Sequence[Any]", 0.07769582644654235]], "kwargs": []}, "q_name": "reduce_in_chunks", "ret_exprs": ["return initializer", "return reduce(fn, chunks(iterable, chunk_size), initializer)"], "ret_type": "", "ret_type_p": [["int", 0.1880270248841514], ["trezor.utils.Writer", 0.12320963015013311], ["dict", 0.11884594518078281], ["bytearray", 0.09446041966681516], ["List[List[T]]", 0.09076052253746261], ["str", 0.09026900360617743]], "variables": {"chunk_size": ""}, "variables_p": {"chunk_size": [["int", 0.1731120809003056], ["list", 0.08429725588720728], ["tuple", 0.07745272974434975]]}}, {"docstring": {"func": "Return an iterable with one level flattened.", "long_descr": ">>> as_flattened_list((('blue', 'red'), ('green', 'yellow', 'pink')))\n['blue', 'red', 'green', 'yellow', 'pink']", "ret": null}, "fn_lc": [[153, 0], [160, 43]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "as_flattened_list", "params": {"iterable": "typing.Iterable[typing.Iterable[T]]"}, "params_descr": {"iterable": ""}, "params_occur": {"iterable": [["e", "i", "iterable", "e", "i"]]}, "params_p": {"args": [], "iterable": [["str", 0.3061900656468215], ["Optional[int]", 0.19409773713071427], ["int", 0.19056243862377542], ["Dict[str, str]", 0.11318977816236964], ["List[int]", 0.10553765987550039]], "kwargs": []}, "q_name": "as_flattened_list", "ret_exprs": ["return [e for i in iterable for e in i]"], "ret_type": "builtins.list[T]", "ret_type_p": [["str", 0.21122616682258433], ["dict", 0.21122616682258433], ["list", 0.21122616682258433], ["Union[int, None]", 0.10561308341129216], ["List[str]", 0.0885206742432744]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Parses Jinja template string.", "long_descr": null, "ret": null}, "fn_lc": [[163, 0], [170, 36]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "parse_template_string", "params": {"template_string": "builtins.str"}, "params_descr": {"template_string": ""}, "params_occur": {"template_string": [["None", "jinja2", "Template", "template_string"], ["template_string", "None"]]}, "params_p": {"args": [], "kwargs": [], "template_string": [["str", 1.0]]}, "q_name": "parse_template_string", "ret_exprs": ["return None, jinja2.Template(template_string)", "return template_string, None"], "ret_type": "builtins.tuple[str | None, jinja2.Template | None]", "ret_type_p": [["bool", 0.22689039201235237], ["str", 0.10830141354619958], ["cmk.utils.type_defs.HostName", 0.1007555692511541]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Given task instance, try_number, filename_template, return the rendered log", "long_descr": "filename.", "ret": null}, "fn_lc": [[173, 0], [194, 5]], "fn_var_ln": {"filename_jinja_template": [[183, 23], [183, 46]], "filename_template": [[183, 4], [183, 21]], "jinja_context": [[185, 8], [185, 21]]}, "fn_var_occur": {"filename_jinja_template": [["filename_template", "filename_jinja_template", "parse_template_string", "filename_template"], ["render_template_to_string", "filename_jinja_template", "jinja_context"]], "filename_template": [["filename_template", "filename_jinja_template", "parse_template_string", "filename_template"], ["filename_template", "format", "dag_id", "ti", "dag_id", "task_id", "ti", "task_id", "execution_date", "ti", "execution_date", "isoformat", "try_number", "try_number"]], "jinja_context": [["jinja_context", "ti", "get_template_context"], ["jinja_context", "try_number"], ["render_template_to_string", "filename_jinja_template", "jinja_context"]]}, "name": "render_log_filename", "params": {"filename_template": "", "ti": "airflow.models.taskinstance.TaskInstance", "try_number": ""}, "params_descr": {"filename_template": "filename template, which can be jinja template or\npython string template", "ti": "task instance", "try_number": "try_number of the task"}, "params_occur": {"filename_template": [["filename_template", "filename_jinja_template", "parse_template_string", "filename_template"], ["filename_template", "format", "dag_id", "ti", "dag_id", "task_id", "ti", "task_id", "execution_date", "ti", "execution_date", "isoformat", "try_number", "try_number"]], "ti": [["jinja_context", "ti", "get_template_context"], ["filename_template", "format", "dag_id", "ti", "dag_id", "task_id", "ti", "task_id", "execution_date", "ti", "execution_date", "isoformat", "try_number", "try_number"]], "try_number": [["jinja_context", "try_number"], ["filename_template", "format", "dag_id", "ti", "dag_id", "task_id", "ti", "task_id", "execution_date", "ti", "execution_date", "isoformat", "try_number", "try_number"]]}, "params_p": {"args": [], "filename_template": [["bool", 0.4074589247712864], ["str", 0.19903938969226626], ["dict", 0.1007507630338897]], "kwargs": [], "ti": [["cmk.utils.type_defs.HostName", 0.10403884642057092], ["cmk.utils.type_defs.ServiceName", 0.10403884642057092], ["float", 0.10004815948469051]], "try_number": [["str", 0.2159013105970091], ["models.User", 0.19286508732065127], ["List[str]", 0.19286508732065127]]}, "q_name": "render_log_filename", "ret_exprs": ["return render_template_to_string(filename_jinja_template, jinja_context)", "return filename_template.format( dag_id=ti.dag_id, task_id=ti.task_id, execution_date=ti.execution_date.isoformat(), try_number=try_number,)"], "ret_type": "builtins.str", "ret_type_p": [["str", 0.6969558280557436], ["Mapping[str, Any]", 0.10564081111969321], ["Dict[str, Any]", 0.10564081111969321]], "variables": {"filename_jinja_template": "", "filename_template": "", "jinja_context": ""}, "variables_p": {"filename_jinja_template": [["dict", 0.10750042648406236]], "filename_template": [["str", 0.5173786924834277], ["Optional[str]", 0.2015293703915443]], "jinja_context": []}}, {"docstring": {"func": "Converts CamelCase to snake_case.", "long_descr": null, "ret": null}, "fn_lc": [[197, 0], [199, 71]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "convert_camel_to_snake", "params": {"camel_str": "builtins.str"}, "params_descr": {"camel_str": ""}, "params_occur": {"camel_str": [["CAMELCASE_TO_SNAKE_CASE_REGEX", "sub", "camel_str", "lower"]]}, "params_p": {"args": [], "camel_str": [["str", 0.9999999999999998]], "kwargs": []}, "q_name": "convert_camel_to_snake", "ret_exprs": ["return CAMELCASE_TO_SNAKE_CASE_REGEX.sub(r\"_1\", camel_str).lower()"], "ret_type": "builtins.str", "ret_type_p": [["int", 0.18430811082467055], ["Dict[str, Any]", 0.10940955606476156], ["hackathon.utils.utils.DataMessage", 0.09677490834915205], ["ajapaik.ajapaik.models.Album", 0.0964690267914727]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Merge two dicts recursively, returning new dict (input dict is not mutated).", "long_descr": "Lists are not concatenated. Items in dict2 overwrite those also found in dict1.", "ret": null}, "fn_lc": [[202, 0], [214, 17]], "fn_var_ln": {"merged": [[208, 4], [208, 10]]}, "fn_var_occur": {"merged": [["merged", "dict1", "copy"], ["k", "merged", "isinstance", "v", "dict"], ["merged", "k", "merge_dicts", "merged", "get", "k", "v"], ["merged", "k", "v"]]}, "name": "merge_dicts", "params": {"dict1": "builtins.dict", "dict2": "builtins.dict"}, "params_descr": {"dict1": "", "dict2": ""}, "params_occur": {"dict1": [["merged", "dict1", "copy"]], "dict2": [["dict2", "items"]]}, "params_p": {"args": [], "dict1": [["Mapping[str, Any]", 0.3446416931152435], ["Optional[Dict[str, Any]]", 0.10606403230486067], ["Dict[str, piccolo.conf.apps.MigrationModule]", 0.10236826756919927], ["abilian.core.models.subjects.User", 0.09653129819486217], ["Dict[str, Any]", 0.09194871029484172], ["str", 0.08350049822005558]], "dict2": [["List[\"libkol.types.ItemQuantity\"]", 0.1713645603939043], ["Dict[str, str]", 0.16146296633219892], ["dict", 0.11818813226587474], ["Dict[str, Any]", 0.08578484759431153], ["list", 0.06543535502638421]], "kwargs": []}, "q_name": "merge_dicts", "ret_exprs": ["return merged"], "ret_type": "builtins.dict", "ret_type_p": [["int", 0.30000000000000004], ["Callable", 0.2], ["models.Question", 0.1], ["str", 0.1]], "variables": {"merged": ""}, "variables_p": {"merged": [["jinja2.utils.LRUCache", 0.4626625190453758], ["Dict[str, Union[Any, Any]]", 0.11784181956698654], ["Dict[str, Union[Any, Any, Any]]", 0.11021744983392681]]}}, {"docstring": {"func": "Use a predicate to partition entries into false entries and true entries.", "long_descr": null, "ret": null}, "fn_lc": [[217, 0], [220, 58]], "fn_var_ln": {"iter_1": [[219, 4], [219, 10]], "iter_2": [[219, 12], [219, 18]]}, "fn_var_occur": {"iter_1": [["iter_1", "iter_2", "tee", "iterable"], ["filterfalse", "pred", "iter_1", "filter", "pred", "iter_2"]], "iter_2": [["iter_1", "iter_2", "tee", "iterable"], ["filterfalse", "pred", "iter_1", "filter", "pred", "iter_2"]]}, "name": "partition", "params": {"iterable": "typing.Iterable[T]", "pred": "typing.Callable[[T], builtins.bool]"}, "params_descr": {"iterable": "", "pred": ""}, "params_occur": {"iterable": [["iter_1", "iter_2", "tee", "iterable"]], "pred": [["filterfalse", "pred", "iter_1", "filter", "pred", "iter_2"]]}, "params_p": {"args": [], "iterable": [["int", 0.30000000000000004], ["Callable", 0.2], ["models.Question", 0.1], ["str", 0.1]], "kwargs": [], "pred": [["float", 0.303111601413868], ["int", 0.1042783026939184]]}, "q_name": "partition", "ret_exprs": ["return filterfalse(pred, iter_1), filter(pred, iter_2)"], "ret_type": "builtins.tuple[typing.Iterable[T], typing.Iterable[T]]", "ret_type_p": [["IO", 0.2740177734667827], ["int", 0.20028354979618423], ["T", 0.12390651017668433], ["Optional[Dict]", 0.11308544926975941], ["str", 0.09240063152512422]], "variables": {"iter_1": "", "iter_2": ""}, "variables_p": {"iter_1": [["int", 0.10302026139080364]], "iter_2": [["int", 0.10302026139080364]]}}, {"docstring": {"func": "This function is deprecated. Please use `airflow.models.baseoperator.chain`.", "long_descr": null, "ret": null}, "fn_lc": [[223, 0], [230, 78]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "chain", "params": {"args": "", "kwargs": ""}, "params_descr": {"args": "", "kwargs": ""}, "params_occur": {"args": [["import_string", "args", "kwargs"]], "kwargs": [["import_string", "args", "kwargs"]]}, "params_p": {"args": [], "kwargs": []}, "q_name": "chain", "ret_exprs": ["return import_string(\"airflow.models.baseoperator.chain\")(*args, **kwargs)"], "ret_type": "", "ret_type_p": [["Callable", 0.31062283596279516], ["str", 0.25012261481543674], ["torch.nn.utils.rnn.PackedSequence", 0.08397415459552411], ["trezor.utils.Writer", 0.07226321656711147]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "This function is deprecated. Please use `airflow.models.baseoperator.cross_downstream`.", "long_descr": null, "ret": null}, "fn_lc": [[233, 0], [240, 89]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "cross_downstream", "params": {"args": "", "kwargs": ""}, "params_descr": {"args": "", "kwargs": ""}, "params_occur": {"args": [["import_string", "args", "kwargs"]], "kwargs": [["import_string", "args", "kwargs"]]}, "params_p": {"args": [], "kwargs": []}, "q_name": "cross_downstream", "ret_exprs": ["return import_string(\"airflow.models.baseoperator.cross_downstream\")(*args, **kwargs)"], "ret_type": "", "ret_type_p": [["str", 0.4766079709224266], ["bool", 0.07682484979325853]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Build airflow url using base_url and default_view and provided query.", "long_descr": "For example:\nhttp://0.0.0.0:8000/base/graph?dag_id=my-task&root=&execution_date=2020-10-27T10%3A59%3A25.615587", "ret": null}, "fn_lc": [[243, 0], [253, 52]], "fn_var_ln": {"view": [[252, 4], [252, 8]]}, "fn_var_occur": {"view": [["view", "conf", "get_mandatory_value", "lower"], ["flask", "url_for", "view", "query"]]}, "name": "build_airflow_url_with_query", "params": {"query": "builtins.dict[builtins.str, typing.Any]"}, "params_descr": {"query": ""}, "params_occur": {"query": [["flask", "url_for", "view", "query"]]}, "params_p": {"args": [], "kwargs": [], "query": [["str", 0.6066373310526326], ["List[str]", 0.10462877894726379], ["Optional[Tuple[str]]", 0.0898133817705248]]}, "q_name": "build_airflow_url_with_query", "ret_exprs": ["return flask.url_for(f\"Airflow.{view}\", **query)"], "ret_type": "builtins.str", "ret_type_p": [["bool", 0.693677227106679], ["zerver.models.Stream", 0.10359048712089709]], "variables": {"view": ""}, "variables_p": {"view": [["dict", 0.10669265981539518]]}}, {"docstring": {"func": "Render a Jinja2 template with given Airflow context.", "long_descr": "The default implementation of ``jinja2.Template.render()`` converts the\ninput context into dict eagerly many times, which triggers deprecation\nmessages in our custom context class. This takes the implementation apart\nand retain the context mapping without resolving instead.", "ret": "The render result."}, "fn_lc": [[258, 0], [284, 25]], "fn_var_ln": {"context": [[272, 4], [272, 11]], "env": [[273, 4], [273, 7]], "nodes": [[277, 8], [277, 13]]}, "fn_var_occur": {"context": [["context", "copy", "copy", "context"], ["context", "update", "k", "v", "k", "v", "template", "globals", "items", "k", "context"], ["nodes", "template", "root_render_func", "env", "context_class", "env", "context", "template", "name", "template", "blocks"]], "env": [["env", "template", "environment"], ["nodes", "template", "root_render_func", "env", "context_class", "env", "context", "template", "name", "template", "blocks"], ["env", "handle_exception"]], "nodes": [["nodes", "template", "root_render_func", "env", "context_class", "env", "context", "template", "name", "template", "blocks"], ["jinja2", "nativetypes", "native_concat", "nodes"], ["join", "nodes"]]}, "name": "render_template", "params": {"context": "typing.MutableMapping[builtins.str, typing.Any]", "native": "builtins.bool", "template": "typing.Any"}, "params_descr": {"context": "The Airflow task context to render the template with.", "native": "If set to *True*, render the template into a native type. A\nDAG can enable this with ``render_template_as_native_obj=True``.", "template": "A Jinja2 template to render."}, "params_occur": {"context": [["context", "copy", "copy", "context"], ["context", "update", "k", "v", "k", "v", "template", "globals", "items", "k", "context"], ["nodes", "template", "root_render_func", "env", "context_class", "env", "context", "template", "name", "template", "blocks"]], "native": [], "template": [["env", "template", "environment"], ["template", "globals"], ["context", "update", "k", "v", "k", "v", "template", "globals", "items", "k", "context"], ["nodes", "template", "root_render_func", "env", "context_class", "env", "context", "template", "name", "template", "blocks"]]}, "params_p": {"args": [], "context": [["dict", 0.2318468447364943], ["MutableMapping", 0.10065013595681904], ["type", 0.08460194713600971]], "kwargs": [], "native": [["str", 0.541114021185389], ["int", 0.08494280139449677]], "template": [["str", 0.407521790817524], ["Pattern[str]", 0.10039822602261113]]}, "q_name": "render_template", "ret_exprs": ["return jinja2.nativetypes.native_concat(nodes)", "return \"\".join(nodes)"], "ret_type": "typing.Any", "ret_type_p": [["int", 0.18952063009831513], ["Union[fonduer.candidates.models.Candidate, fonduer.candidates.models.Mention, fonduer.candidates.models.span_mention.TemporarySpanMention]", 0.11444823584862834], ["Sequence[str]", 0.10549322863047082], ["str", 0.08735481162880274], ["salon.models.Stylist", 0.08660719170792035]], "variables": {"context": "", "env": "", "nodes": ""}, "variables_p": {"context": [["dict", 0.6781997715941842], ["str", 0.08972264442424228]], "env": [["jinja2.environmenEnvironment", 0.20705476255579766]], "nodes": []}}, {"docstring": {"func": "Shorthand to ``render_template(native=False)`` with better typing support.", "long_descr": null, "ret": null}, "fn_lc": [[287, 0], [289, 91]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "render_template_to_string", "params": {"context": "airflow.utils.context.Context", "template": "jinja2.Template"}, "params_descr": {"context": "", "template": ""}, "params_occur": {"context": [["render_template", "template", "cast", "MutableMapping", "str", "Any", "context", "native", "False"]], "template": [["render_template", "template", "cast", "MutableMapping", "str", "Any", "context", "native", "False"]]}, "params_p": {"args": [], "context": [["str", 0.8011430561260894]], "kwargs": [], "template": [["str", 0.8011430561260894]]}, "q_name": "render_template_to_string", "ret_exprs": ["return render_template(template, cast(MutableMapping[str, Any], context), native=False)"], "ret_type": "builtins.str", "ret_type_p": [["str", 0.6819887722807937]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Shorthand to ``render_template(native=True)`` with better typing support.", "long_descr": null, "ret": null}, "fn_lc": [[292, 0], [294, 90]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "render_template_as_native", "params": {"context": "airflow.utils.context.Context", "template": "jinja2.Template"}, "params_descr": {"context": "", "template": ""}, "params_occur": {"context": [["render_template", "template", "cast", "MutableMapping", "str", "Any", "context", "native", "True"]], "template": [["render_template", "template", "cast", "MutableMapping", "str", "Any", "context", "native", "True"]]}, "params_p": {"args": [], "context": [["str", 1.0000000000000002]], "kwargs": [], "template": [["str", 1.0000000000000002]]}, "q_name": "render_template_as_native", "ret_exprs": ["return render_template(template, cast(MutableMapping[str, Any], context), native=True)"], "ret_type": "typing.Any", "ret_type_p": [["str", 0.5325848841996548]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Returns True if exactly one of *args is \"truthy\", and False otherwise.", "long_descr": "If user supplies an iterable, we raise ValueError and force them to unpack.", "ret": null}, "fn_lc": [[297, 0], [307, 36]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "exactly_one", "params": {"args": ""}, "params_descr": {"args": ""}, "params_occur": {"args": [["is_container", "args"], ["sum", "map", "bool", "args"]]}, "params_p": {"args": [], "kwargs": []}, "q_name": "exactly_one", "ret_exprs": ["return sum(map(bool, args)) == 1"], "ret_type": "builtins.bool", "ret_type_p": [["str", 0.19729088647188528], ["types.Resolver", 0.11366261310835042], ["float", 0.09575012582206104], ["dict", 0.09569190999663513], ["int", 0.09245419275314241]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[319, 4], [323, 28]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "is_set", "params": {"val": ""}, "params_descr": {"val": ""}, "params_occur": {"val": [["val", "NOTSET"], ["bool", "val"]]}, "params_p": {"args": [], "kwargs": [], "val": [["bool", 0.25597899855579487], ["str", 0.17734338640073427], ["Exception", 0.08261365645060312], ["Optional[bool]", 0.07681035759279019]]}, "q_name": "at_most_one.<locals>.is_set", "ret_exprs": ["return False", "return bool(val)"], "ret_type": "", "ret_type_p": [["bool", 0.9999999999999999]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Returns True if at most one of *args is \"truthy\", and False otherwise.", "long_descr": "NOTSET is treated the same as None.\n\nIf user supplies an iterable, we raise ValueError and force them to unpack.", "ret": null}, "fn_lc": [[310, 0], [325, 43]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "at_most_one", "params": {"args": ""}, "params_descr": {"args": ""}, "params_occur": {"args": [["sum", "map", "is_set", "args"]]}, "params_p": {"args": [], "kwargs": []}, "q_name": "at_most_one", "ret_exprs": ["return sum(map(is_set, args)) in (0, 1)"], "ret_type": "builtins.bool", "ret_type_p": [["List[int]", 0.18801534873820785], ["List[dict]", 0.12886331884144242], ["magic.models.Deck", 0.11571284110449634], ["zam_repondeur.models.Amendement", 0.09402305291947557], ["List[str]", 0.09189266754242482]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[338, 4], [343, 85]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "is_empty", "params": {"x": ""}, "params_descr": {"x": ""}, "params_occur": {"x": [["x", "None"], ["bool", "x", "False"]]}, "params_p": {"args": [], "kwargs": [], "x": [["List[int]", 0.0931859842460655], ["Optional[int]", 0.09237295902417103]]}, "q_name": "prune_dict.<locals>.is_empty", "ret_exprs": ["return x is None", "return bool(x) is False"], "ret_type": "", "ret_type_p": [["bool", 0.4944177200292952], ["zerver.models.UserProfile", 0.10438427340772725], ["Optional[zerver.models.UserProfile]", 0.10438427340772725], ["str", 0.09806593869735018], ["Optional[Callable]", 0.0946178874212804]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Given dict ``val``, returns new dict based on ``val`` with all", "long_descr": "empty elements removed.\n\nWhat constitutes \"empty\" is controlled by the ``mode`` parameter.  If mode is 'strict'\nthen only ``None`` elements will be removed.  If mode is ``truthy``, then element ``x``\nwill be removed if ``bool(x) is False``.", "ret": null}, "fn_lc": [[328, 0], [370, 18]], "fn_var_ln": {"new_dict": [[346, 8], [346, 16]], "new_list": [[358, 8], [358, 16]], "new_val": [[363, 16], [363, 23]]}, "fn_var_occur": {"new_dict": [["new_dict", "k", "new_val"], ["new_dict", "k", "v"]], "new_list": [["new_list", "append", "new_val"], ["new_list", "append", "v"]], "new_val": [["new_val", "prune_dict", "v", "mode", "mode"], ["new_dict", "k", "new_val"], ["new_val", "prune_dict", "v", "mode", "mode"], ["new_list", "append", "new_val"]]}, "name": "prune_dict", "params": {"mode": "", "val": "typing.Any"}, "params_descr": {"mode": "", "val": ""}, "params_occur": {"mode": [["new_val", "prune_dict", "v", "mode", "mode"], ["new_val", "prune_dict", "v", "mode", "mode"]], "val": [["isinstance", "val", "dict"], ["val", "items"], ["isinstance", "val", "list"]]}, "params_p": {"args": [], "kwargs": [], "mode": [["raiden.utils.Dict", 0.10774676323429129], ["List[str]", 0.10659328096079523], ["Union[Dict, List]", 0.1008926291748128], ["List[Dict[str, Any]]", 0.09444438239092999], ["Optional[int]", 0.09329660753205597], ["starfish.types.Axes", 0.09117743126001016]], "val": [["Dict[str, Any]", 0.2788806901093658], ["Union[Dict, List]", 0.16100453248428906], ["List['PydanticModelField']", 0.09037244895053272], ["starfish.core.types.SpotFindingResults", 0.08721082277416142], ["T", 0.08665570799394821], ["bool", 0.08571412417352138]]}, "q_name": "prune_dict", "ret_exprs": ["return new_dict", "return new_list", "return val"], "ret_type": "", "ret_type_p": [["str", 0.08989870464493241], ["dict", 0.08811776066961784]], "variables": {"new_dict": "", "new_list": "", "new_val": ""}, "variables_p": {"new_dict": [["dict", 0.3889242849003246], ["Dict[str, str]", 0.23675896542996283], ["str", 0.0993946137253399], ["Type[Dict[str, Any]]", 0.09493051331644979], ["Dict[str, None]", 0.08311114705018899]], "new_list": [["list", 0.9002257704898012], ["Type[Optional[Any]]", 0.099774229510199]], "new_val": [["dict", 0.3267932233469082], ["Callable[[List[Any]], List[Any]]", 0.10338178762717372], ["Dict[int, str]", 0.10319270676594977], ["Dict[str, List[Any]]", 0.09353831259313097], ["myia.utils.misc.Registry[Any, Any]", 0.09302543396291878]]}}, {"docstring": {"func": "Ensure *kwargs1* and *kwargs2* do not contain common keys.", "long_descr": null, "ret": null}, "fn_lc": [[373, 0], [384, 74]], "fn_var_ln": {"duplicated_keys": [[378, 4], [378, 19]], "duplicated_keys_display": [[383, 4], [383, 27]]}, "fn_var_occur": {"duplicated_keys": [["duplicated_keys", "set", "kwargs1", "intersection", "kwargs2"], ["len", "duplicated_keys"], ["TypeError", "fail_reason", "duplicated_keys", "pop"], ["duplicated_keys_display", "join", "sorted", "duplicated_keys"]], "duplicated_keys_display": [["duplicated_keys_display", "join", "sorted", "duplicated_keys"], ["TypeError", "fail_reason", "duplicated_keys_display"]]}, "name": "prevent_duplicates", "params": {"fail_reason": "builtins.str", "kwargs1": "builtins.dict[builtins.str, typing.Any]", "kwargs2": "typing.Mapping[builtins.str, typing.Any]"}, "params_descr": {"fail_reason": "", "kwargs1": "", "kwargs2": ""}, "params_occur": {"fail_reason": [["TypeError", "fail_reason", "duplicated_keys", "pop"], ["TypeError", "fail_reason", "duplicated_keys_display"]], "kwargs1": [["duplicated_keys", "set", "kwargs1", "intersection", "kwargs2"]], "kwargs2": [["duplicated_keys", "set", "kwargs1", "intersection", "kwargs2"]]}, "params_p": {"args": [], "fail_reason": [["str", 0.7540171934413555], ["int", 0.07866793258677175]], "kwargs": [], "kwargs1": [["list", 0.100547710677865], ["Set[str]", 0.09499611125689339], ["List[Dict]", 0.09096792479278569]], "kwargs2": [["list", 0.100547710677865], ["Set[str]", 0.09499611125689339], ["List[Dict]", 0.09096792479278569]]}, "q_name": "prevent_duplicates", "ret_exprs": ["return"], "ret_type": "None", "ret_type_p": [["Union[tuple, list]", 0.12326783261663934], ["List[int]", 0.09124591253820835], ["Dict[str, Any]", 0.08769568774684897], ["str", 0.08682447752895113]], "variables": {"duplicated_keys": "", "duplicated_keys_display": ""}, "variables_p": {"duplicated_keys": [["list", 0.4791290957398099], ["int", 0.11927666635196618], ["str", 0.10812107682163599], ["List[str]", 0.09582581914796198], ["List[int]", 0.09582581914796198]], "duplicated_keys_display": [["int", 0.3467409213694386], ["Tuple[Literal, Literal, List[str]]", 0.2382856352563472], ["OrderedDict[Any, str]", 0.12000467949674731], ["bytes", 0.11141504497306347], ["Dict[str, str]", 0.09649712427452842], ["str", 0.08705659462987515]]}}], "imports": ["__future__", "annotations", "copy", "re", "signal", "warnings", "datetime", "datetime", "functools", "reduce", "itertools", "filterfalse", "tee", "typing", "TYPE_CHECKING", "Any", "Callable", "Generator", "Iterable", "Mapping", "MutableMapping", "TypeVar", "cast", "airflow", "configuration", "conf", "airflow", "exceptions", "AirflowException", "RemovedInAirflow3Warning", "airflow", "utils", "context", "Context", "airflow", "utils", "module_loading", "import_string", "airflow", "utils", "types", "NOTSET", "jinja2", "airflow", "models", "taskinstance", "TaskInstance", "jinja2", "flask", "jinja2.nativetypes"], "mod_var_ln": {"CAMELCASE_TO_SNAKE_CASE_REGEX": [[42, 0], [42, 29]], "GROUP_KEY_REGEX": [[41, 0], [41, 15]], "KEY_REGEX": [[40, 0], [40, 9]], "S": [[45, 0], [45, 1]], "T": [[44, 0], [44, 1]]}, "mod_var_occur": {"CAMELCASE_TO_SNAKE_CASE_REGEX": [["CAMELCASE_TO_SNAKE_CASE_REGEX", "sub", "camel_str", "lower"]], "GROUP_KEY_REGEX": [["GROUP_KEY_REGEX", "match", "k"]], "KEY_REGEX": [["KEY_REGEX", "match", "k"]], "S": [], "T": []}, "no_types_annot": {"D": 55, "I": 0, "U": 47}, "session_id": "tP-yyr2Ia2Lh9ulHmJGCVDwGErJAQFkj4oPdE2ViacE", "set": null, "tc": [false, null], "type_annot_cove": 0.54, "typed_seq": "", "untyped_seq": "", "variables": {"CAMELCASE_TO_SNAKE_CASE_REGEX": "", "GROUP_KEY_REGEX": "", "KEY_REGEX": "", "S": "", "T": ""}, "variables_p": {"CAMELCASE_TO_SNAKE_CASE_REGEX": [["str", 0.7702247885868118], ["Pattern[str]", 0.14273350757333464]], "GROUP_KEY_REGEX": [["Pattern[str]", 0.5197607000502922], ["str", 0.38346763081330165], ["Tuple[Literal, Literal, Literal]", 0.096771669136406]], "KEY_REGEX": [["Pattern[str]", 0.7298294376125286], ["Tuple[Literal, Literal, Literal]", 0.27017056238747117]], "S": [["str", 0.7999999999999999], ["int", 0.09999999999999999]], "T": [["str", 0.9999999999999999]]}}}