{"error": null, "response": {"classes": [], "funcs": [{"docstring": {"func": "Update edges_to_add and edges_to_skip according to TaskGroups.", "long_descr": null, "ret": null}, "fn_lc": [[57, 4], [98, 32]], "fn_var_ln": {"target_group": [[65, 12], [65, 24]]}, "fn_var_occur": {"target_group": [["target_group", "task_group_map", "target_id"], ["edges_to_add", "add", "task_group", "downstream_join_id", "target_group", "upstream_join_id"], ["target_group", "get_roots"], ["edges_to_skip", "add", "child", "task_id", "target_group", "upstream_join_id"], ["target_group", "get_roots"], ["edges_to_add", "add", "target_group", "upstream_join_id", "child", "task_id"]]}, "name": "collect_edges", "params": {"task_group": ""}, "params_descr": {"task_group": ""}, "params_occur": {"task_group": [["task_group_map", "dag", "task_group", "get_task_group_dict"], ["isinstance", "task_group", "AbstractOperator"], ["task_group", "downstream_group_ids"], ["edges_to_add", "add", "task_group", "downstream_join_id", "target_group", "upstream_join_id"], ["task_group", "get_leaves"], ["edges_to_add", "add", "child", "task_id", "task_group", "downstream_join_id"], ["edges_to_skip", "add", "task_group", "downstream_join_id", "child", "task_id"], ["task_group", "downstream_task_ids"], ["edges_to_add", "add", "task_group", "downstream_join_id", "target_id"], ["task_group", "get_leaves"], ["edges_to_add", "add", "child", "task_id", "task_group", "downstream_join_id"], ["task_group", "upstream_task_ids"], ["edges_to_add", "add", "source_id", "task_group", "upstream_join_id"], ["task_group", "get_roots"], ["edges_to_add", "add", "task_group", "upstream_join_id", "child", "task_id"], ["task_group", "children", "values"]]}, "params_p": {"args": [], "kwargs": [], "task_group": [["str", 0.11036917348645817], ["annofabapi.models.Task", 0.08332594157413437], ["khetha.models.Task", 0.08137972927615464], ["dict", 0.0805455336083184]]}, "q_name": "dag_edges.<locals>.collect_edges", "ret_exprs": ["return"], "ret_type": "", "ret_type_p": [["Union[tuple, list]", 0.12326783261663934], ["List[int]", 0.09124591253820835], ["Dict[str, Any]", 0.08769568774684897], ["str", 0.08682447752895113]], "variables": {"target_group": ""}, "variables_p": {"target_group": [["int", 0.37652896314596296], ["str", 0.33461187698074385]]}}, {"docstring": {"func": "Create the list of edges needed to construct the Graph view.", "long_descr": "A special case is made if a TaskGroup is immediately upstream/downstream of another\nTaskGroup or task. Two proxy nodes named upstream_join_id and downstream_join_id are\ncreated for the TaskGroup. Instead of drawing an edge onto every task in the TaskGroup,\nall edges are directed onto the proxy nodes. This is to cut down the number of edges on\nthe graph.\n\nFor example: A DAG with TaskGroups group1 and group2:\n    group1: task1, task2, task3\n    group2: task4, task5, task6\n\ngroup2 is downstream of group1:\n    group1 >> group2\n\nEdges to add (This avoids having to create edges between every task in group1 and group2):\n    task1 >> downstream_join_id\n    task2 >> downstream_join_id\n    task3 >> downstream_join_id\n    downstream_join_id >> upstream_join_id\n    upstream_join_id >> task4\n    upstream_join_id >> task5\n    upstream_join_id >> task6", "ret": null}, "fn_lc": [[24, 0], [126, 17]], "fn_var_ln": {"edge": [[110, 16], [110, 20]], "edges": [[103, 4], [103, 9]], "edges_to_add": [[51, 4], [51, 16]], "edges_to_skip": [[53, 4], [53, 17]], "label": [[122, 8], [122, 13]], "record": [[121, 8], [121, 14]], "result": [[117, 4], [117, 10]], "task_group_map": [[55, 4], [55, 18]], "tasks_to_trace": [[115, 8], [115, 22]], "tasks_to_trace_next": [[107, 8], [107, 27]]}, "fn_var_occur": {"edge": [["edge", "task", "task_id", "child", "task_id"], ["edge", "edges"], ["edges", "add", "edge"]], "edges": [["edges", "set"], ["edge", "edges"], ["edges", "add", "edge"], ["sorted", "edges", "union", "edges_to_add", "edges_to_skip"]], "edges_to_add": [["sorted", "edges", "union", "edges_to_add", "edges_to_skip"]], "edges_to_skip": [["sorted", "edges", "union", "edges_to_add", "edges_to_skip"]], "label": [["label", "dag", "get_edge_info", "source_id", "target_id", "get"], ["record", "label"]], "record": [["record", "source_id", "target_id"], ["record", "label"], ["result", "append", "record"]], "result": [["result", "append", "record"]], "task_group_map": [], "tasks_to_trace": [["tasks_to_trace", "builtins", "list", "airflow", "models", "Operator", "dag", "roots"], ["tasks_to_trace", "tasks_to_trace_next"]], "tasks_to_trace_next": [["tasks_to_trace_next", "builtins", "list", "airflow", "models", "Operator"], ["tasks_to_trace_next", "append", "child"], ["tasks_to_trace", "tasks_to_trace_next"]]}, "name": "dag_edges", "params": {"dag": "airflow.models.dag.DAG"}, "params_descr": {"dag": ""}, "params_occur": {"dag": [["collect_edges", "dag", "task_group"], ["tasks_to_trace", "builtins", "list", "airflow", "models", "Operator", "dag", "roots"], ["label", "dag", "get_edge_info", "source_id", "target_id", "get"]]}, "params_p": {"args": [], "dag": [["Dict[str, Any]", 0.28505043272438957], ["int", 0.18913533218550846], ["str", 0.09741588318001193], ["src.models.todoist_task.TodoistTask", 0.08248562633725932]], "kwargs": []}, "q_name": "dag_edges", "ret_exprs": ["return result"], "ret_type": "", "ret_type_p": [["bool", 0.16408864410171026], ["Optional[Union[str, Any]]", 0.08753798278800795]], "variables": {"edge": "", "edges": "", "edges_to_add": "", "edges_to_skip": "", "label": "", "record": "", "result": "", "task_group_map": "", "tasks_to_trace": "", "tasks_to_trace_next": "builtins.list[airflow.models.Operator]"}, "variables_p": {"edge": [["str", 0.353422406520205], ["Dict[str, str]", 0.11019737505712632], ["Dict[int, str]", 0.09880260266336893], ["List[int]", 0.09095748953367301], ["List[str]", 0.08719987656588675], ["Dict[str, Any]", 0.08650816836355188]], "edges": [["Set[str]", 0.302053355444775], ["List[List[int]]", 0.10262795111159981], ["List[int]", 0.10198191332823338], ["Type[Set[Any]]", 0.10096867172461586], ["Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]", 0.09286894862884967], ["Type[str]", 0.08272406214873143], ["Callable(len)[[Sized], int]", 0.07766854345726314]], "edges_to_add": [["Dict[str, float]", 0.2122941167152575], ["Dict[str, int]", 0.17818476815526374], ["dict", 0.12049434566007365], ["Type[Mapping[str, Any]]", 0.11780890755821166], ["Type[str]", 0.09401937849968184], ["List[str]", 0.09169475490925139], ["ClassVar[Dict[str, Any]]", 0.09097488859993562]], "edges_to_skip": [["Dict[str, int]", 0.17813743754777175], ["Dict[str, float]", 0.17384359319109827], ["dict", 0.12831014522137565], ["Type[Mapping[str, Any]]", 0.11612563455647174], ["List[str]", 0.1151491282908043], ["list", 0.08849084933574246]], "label": [["Dict[str, str]", 0.30792453991823143], ["Dict[int, str]", 0.11473754320090257], ["List[Union[Any, Any]]", 0.10574215301148641], ["str", 0.09035149860084334], ["dict", 0.08987411796471584]], "record": [["str", 0.17438476445261827], ["Optional[str]", 0.12584204205411673], ["Dict[str, str]", 0.08748019938340228], ["Dict[str, Any]", 0.08722741223507303]], "result": [["list", 0.666666666648512], ["str", 2.0908523957955214e-11], ["Dict[str, Any]", 4.628913987374009e-12], ["List[str]", 3.704937597441627e-12]], "task_group_map": [["str", 0.19999999999999998], ["annofabapi.models.TaskPhase", 0.09999999999999999], ["List[Dict[str, Any]]", 0.09999999999999999], ["bool", 0.09999999999999999], ["Type[src.app.models.TaskDevice]", 0.09999999999999999], ["Dict[str, Any]", 0.09999999999999999]], "tasks_to_trace": [["list", 0.7051439094118712]], "tasks_to_trace_next": [["list", 1.0]]}}], "imports": ["__future__", "annotations", "airflow", "models", "Operator", "airflow", "models", "abstractoperator", "AbstractOperator", "airflow", "models", "dag", "DAG"], "mod_var_ln": {}, "mod_var_occur": {}, "no_types_annot": {"D": 2, "I": 0, "U": 13}, "session_id": "S5sd9gAmcbmiL8SDzLikOEpsYFdefRINieraZhSIZWk", "set": null, "tc": [false, null], "type_annot_cove": 0.13, "typed_seq": "", "untyped_seq": "", "variables": {}, "variables_p": {}}}