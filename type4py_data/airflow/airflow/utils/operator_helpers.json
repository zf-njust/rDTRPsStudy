{"error": null, "response": {"classes": [{"cls_lc": [[126, 0], [179, 27]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[141, 4], [143, 33]], "fn_var_ln": {"_kwargs": [[142, 8], [142, 20]], "_wildcard": [[143, 8], [143, 22]]}, "fn_var_occur": {"_kwargs": [["self", "_kwargs", "kwargs"]], "_wildcard": [["self", "_wildcard", "wildcard"]]}, "name": "__init__", "params": {"kwargs": "typing.Mapping[builtins.str, typing.Any]", "self": "", "wildcard": "builtins.bool"}, "params_descr": {"kwargs": "", "self": "", "wildcard": ""}, "params_occur": {"kwargs": [["self", "_kwargs", "kwargs"]], "self": [["self", "_kwargs", "kwargs"], ["self", "_wildcard", "wildcard"]], "wildcard": [["self", "_wildcard", "wildcard"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "wildcard": [["int", 0.3], ["bool", 0.09999999999999999], ["float", 0.09999999999999999]]}, "q_name": "KeywordParameters.__init__", "ret_exprs": [], "ret_type": "None", "variables": {"_kwargs": "", "_wildcard": ""}, "variables_p": {"_kwargs": [["int", 0.4108754312383336], ["str", 0.16040423479706495], ["DefaultDict[Any, List[Any]]", 0.11349408321943784], ["Set[str]", 0.08367660394776819], ["List[str]", 0.07712720454318656]], "_wildcard": [["str", 0.30000000000000004], ["Dict[str, Any]", 0.1], ["dict", 0.1], ["int", 0.1]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[146, 4], [169, 42]], "fn_var_ln": {"has_wildcard_kwargs": [[156, 8], [156, 27]], "kwargs": [[168, 8], [168, 14]], "signature": [[155, 8], [155, 17]]}, "fn_var_occur": {"has_wildcard_kwargs": [["has_wildcard_kwargs", "any", "p", "kind", "p", "VAR_KEYWORD", "p", "signature", "parameters", "values"]], "kwargs": [["name", "kwargs"], ["cls", "kwargs", "wildcard", "True"], ["kwargs", "key", "kwargs", "key", "key", "signature", "parameters", "key", "kwargs"], ["cls", "kwargs", "wildcard", "False"]], "signature": [["signature", "inspect", "signature", "func"], ["has_wildcard_kwargs", "any", "p", "kind", "p", "VAR_KEYWORD", "p", "signature", "parameters", "values"], ["itertools", "islice", "signature", "parameters", "keys", "len", "args"], ["kwargs", "key", "kwargs", "key", "key", "signature", "parameters", "key", "kwargs"]]}, "name": "determine", "params": {"args": "typing.Collection[typing.Any]", "cls": "", "func": "typing.Callable[..., typing.Any]", "kwargs": "typing.Mapping[builtins.str, typing.Any]"}, "params_descr": {"args": "", "cls": "", "func": "", "kwargs": ""}, "params_occur": {"args": [["itertools", "islice", "signature", "parameters", "keys", "len", "args"]], "cls": [["cls", "kwargs", "wildcard", "True"], ["cls", "kwargs", "wildcard", "False"]], "func": [["signature", "inspect", "signature", "func"]], "kwargs": [["name", "kwargs"], ["cls", "kwargs", "wildcard", "True"], ["kwargs", "key", "kwargs", "key", "key", "signature", "parameters", "key", "kwargs"], ["cls", "kwargs", "wildcard", "False"]]}, "params_p": {"args": [], "cls": [["T", 0.21260185427431222], ["dict", 0.10123103177665853], ["List[List[int]]", 0.09772183975667932]], "func": [["int", 0.1476670895629162], ["Callable", 0.11847197679997318], ["Awaitable[T]", 0.11847197679997318], ["bool", 0.08458467508357799]], "kwargs": [], "self": []}, "q_name": "KeywordParameters.determine", "ret_exprs": ["return cls(kwargs, wildcard=True)", "return cls(kwargs, wildcard=False)"], "ret_type": "KeywordParameters", "ret_type_p": [["str", 0.2910978071102905], ["hackathon.utils.utils.DataMessage", 0.1205858329090539], ["Iterable[int]", 0.10133538949911988], ["bool", 0.09432188043540808]], "variables": {"has_wildcard_kwargs": "", "kwargs": "", "signature": ""}, "variables_p": {"has_wildcard_kwargs": [["dict", 0.6328930551184528], ["Dict[str, Any]", 0.08961048375050146], ["Dict[str, str]", 0.08841306036172496]], "kwargs": [["Generator[Any, None, None]", 0.3545604466410503], ["Dict[int, Any]", 0.1346460836449582], ["Dict[str, str]", 0.12305542682344484], ["Dict[str, List[Any]]", 0.11019478690560963], ["Tuple[Tuple[str, Any]]", 0.09960262552612628], ["List[str]", 0.09129714675885163]], "signature": [["dict", 0.30433150997881886], ["str", 0.17542751902493128], ["NamedTuple", 0.106090206366155]]}}, {"docstring": {"func": "Dump the kwargs mapping to unpack with ``**`` in a function call.", "long_descr": null, "ret": null}, "fn_lc": [[171, 4], [175, 27]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "unpacking", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "_wildcard", "isinstance", "self", "_kwargs", "Context"], ["lazy_mapping_from_context", "self", "_kwargs"], ["self", "_kwargs"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "KeywordParameters.unpacking", "ret_exprs": ["return lazy_mapping_from_context(self._kwargs)", "return self._kwargs"], "ret_type": "typing.Mapping[builtins.str, typing.Any]", "ret_type_p": [["dict", 0.19032934680058836], ["str", 0.11592130632804427], ["Dict[str, str]", 0.1129524989052105], ["Dict[Tuple[int, ...], float]", 0.09516467340029418], ["Mapping", 0.0871856554597696]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Dump the kwargs mapping for serialization purposes.", "long_descr": null, "ret": null}, "fn_lc": [[177, 4], [179, 27]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "serializing", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "_kwargs"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "KeywordParameters.serializing", "ret_exprs": ["return self._kwargs"], "ret_type": "typing.Mapping[builtins.str, typing.Any]", "ret_type_p": [["Dict[str, Any]", 0.19353077909769267], ["Dict[str, Set[str]]", 0.14636505201132505]], "variables": {}, "variables_p": {}}], "name": "KeywordParameters", "q_name": "KeywordParameters", "variables": {}, "variables_p": {}}], "funcs": [{"docstring": {"func": "Given a context, this function provides a dictionary of values that can be used to", "long_descr": "externally reconstruct relations between dags, dag_runs, tasks and task_instances.\nDefault to abc.def.ghi format and can be made to ABC_DEF_GHI format if\nin_env_var_format is set to True.", "ret": "task_instance context as dict."}, "fn_lc": [[63, 0], [123, 17]], "fn_var_ln": {"_attr": [[110, 8], [110, 13]], "context_params": [[94, 4], [94, 18]], "dag_run": [[82, 4], [82, 11]], "key": [[106, 16], [106, 19]], "mapping_value": [[112, 12], [112, 25]], "name_format": [[78, 8], [78, 19]], "ops": [[84, 4], [84, 7]], "params": [[74, 4], [74, 10]], "task": [[80, 4], [80, 8]], "task_instance": [[81, 4], [81, 17]]}, "fn_var_occur": {"_attr": [["_attr", "getattr", "subject", "attr", "None"], ["subject", "_attr"], ["isinstance", "_attr", "str"], ["params", "mapping_value", "_attr"], ["isinstance", "_attr", "datetime"], ["params", "mapping_value", "_attr", "isoformat"], ["isinstance", "_attr", "list"], ["params", "mapping_value", "join", "_attr"], ["params", "mapping_value", "str", "_attr"]], "context_params": [["context_params", "settings", "get_airflow_context_vars", "context"], ["context_params", "items"]], "dag_run": [["dag_run", "context", "get"], ["ops", "task", "task", "task_instance", "task_instance", "task_instance", "task_instance", "dag_run"]], "key": [["isinstance", "key", "str"], ["TypeError", "key"], ["TypeError", "key", "type", "value"], ["key", "startswith", "ENV_VAR_FORMAT_PREFIX"], ["key", "ENV_VAR_FORMAT_PREFIX", "key", "upper"], ["key", "startswith", "DEFAULT_FORMAT_PREFIX"], ["key", "DEFAULT_FORMAT_PREFIX", "key"], ["params", "key", "value"]], "mapping_value": [["mapping_value", "AIRFLOW_VAR_NAME_FORMAT_MAPPING", "mapping_key", "name_format"], ["params", "mapping_value", "_attr"], ["params", "mapping_value", "_attr", "isoformat"], ["params", "mapping_value", "join", "_attr"], ["params", "mapping_value", "str", "_attr"]], "name_format": [["mapping_value", "AIRFLOW_VAR_NAME_FORMAT_MAPPING", "mapping_key", "name_format"]], "ops": [["ops", "task", "task", "task_instance", "task_instance", "task_instance", "task_instance", "dag_run"]], "params": [["params", "key", "value"], ["params", "mapping_value", "_attr"], ["params", "mapping_value", "_attr", "isoformat"], ["params", "mapping_value", "join", "_attr"], ["params", "mapping_value", "str", "_attr"]], "task": [["task", "context", "get"], ["ops", "task", "task", "task_instance", "task_instance", "task_instance", "task_instance", "dag_run"]], "task_instance": [["task_instance", "context", "get"], ["ops", "task", "task", "task_instance", "task_instance", "task_instance", "task_instance", "dag_run"]]}, "name": "context_to_airflow_vars", "params": {"context": "typing.Mapping[builtins.str, typing.Any]", "in_env_var_format": "builtins.bool"}, "params_descr": {"context": "The context for the task_instance of interest.", "in_env_var_format": "If returned vars should be in ABC_DEF_GHI format."}, "params_occur": {"context": [["task", "context", "get"], ["task_instance", "context", "get"], ["dag_run", "context", "get"], ["context_params", "settings", "get_airflow_context_vars", "context"]], "in_env_var_format": []}, "params_p": {"args": [], "context": [["str", 0.603968656986082], ["int", 0.09597183923952882], ["Dict[str, Any]", 0.09594046023833323], ["Optional[str]", 0.09278926150721531]], "in_env_var_format": [["str", 0.7269376569038745], ["bool", 0.1966915087614898], ["Optional[str]", 0.07637083433463569]], "kwargs": []}, "q_name": "context_to_airflow_vars", "ret_exprs": ["return params"], "ret_type": "builtins.dict[builtins.str, builtins.str]", "ret_type_p": [["float", 0.3333760469409219], ["str", 0.20022034527952598]], "variables": {"_attr": "", "context_params": "", "dag_run": "", "key": "", "mapping_value": "", "name_format": "", "ops": "", "params": "", "task": "", "task_instance": ""}, "variables_p": {"_attr": [["str", 0.6901686364122791], ["dict", 0.1250931709571917], ["List[str]", 0.09390298457061318], ["Iterable[str]", 0.09083520805991614]], "context_params": [["str", 0.09098498257278927]], "dag_run": [["str", 0.1069562839840443], ["Dict[str, Dict[str, Any]]", 0.10436300558718063]], "key": [["str", 0.49374374333323556]], "mapping_value": [["str", 0.7912819607403216], ["dict", 0.10962177863341056], ["List[str]", 0.09909626062626795]], "name_format": [["str", 0.9999999999999998]], "ops": [["rotkehlchen.tests.utils.rotkehlchen.BalancesTestSetup", 0.09622548506068514], ["str", 0.08218027117502488]], "params": [["dict", 0.18663428076947222], ["Dict[str, Any]", 0.18246376372549564], ["List[Dict[str, Any]]", 0.1287518935503014], ["Optional[str]", 0.11314420063539615], ["List[str]", 0.11314420063539615], ["bool", 0.0926246838177494]], "task": [["functools.partial[Any]", 0.0789401940721345]], "task_instance": [["str", 0.1823188611564414]]}}, {"docstring": {"func": "Inspect the signature of a given callable to determine which arguments in kwargs need", "long_descr": "to be passed to the callable.", "ret": "A dictionary which contains the keyword arguments that are compatible with the callable."}, "fn_lc": [[182, 0], [197, 70]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "determine_kwargs", "params": {"args": "typing.Collection[typing.Any]", "func": "typing.Callable[..., typing.Any]", "kwargs": "typing.Mapping[builtins.str, typing.Any]"}, "params_descr": {"args": "The positional arguments that needs to be passed to the callable, so we\nknow how many to skip.", "func": "The callable that you want to invoke", "kwargs": "The keyword arguments that need to be filtered before passing to the callable."}, "params_occur": {"args": [["KeywordParameters", "determine", "func", "args", "kwargs", "unpacking"]], "func": [["KeywordParameters", "determine", "func", "args", "kwargs", "unpacking"]], "kwargs": [["KeywordParameters", "determine", "func", "args", "kwargs", "unpacking"]]}, "params_p": {"args": [], "func": [["Callable", 0.6096092884119322], ["Callable[[T], Optional[T]]", 0.0877394132165559], ["Iterable[T]", 0.0877394132165559]], "kwargs": []}, "q_name": "determine_kwargs", "ret_exprs": ["return KeywordParameters.determine(func, args, kwargs).unpacking()"], "ret_type": "typing.Mapping[builtins.str, typing.Any]", "ret_type_p": [["str", 0.18647654858442628], ["List[List[str]]", 0.10598154397576245], ["bool", 0.09333321863458527]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[208, 4], [210, 36]], "fn_var_ln": {"kwargs": [[209, 8], [209, 14]]}, "fn_var_occur": {"kwargs": [["kwargs", "determine_kwargs", "func", "args", "kwargs"], ["func", "args", "kwargs"]]}, "name": "kwargs_func", "params": {"args": "", "kwargs": ""}, "params_descr": {"args": "", "kwargs": ""}, "params_occur": {"args": [["kwargs", "determine_kwargs", "func", "args", "kwargs"], ["func", "args", "kwargs"]], "kwargs": [["kwargs", "determine_kwargs", "func", "args", "kwargs"], ["func", "args", "kwargs"]]}, "params_p": {"args": [], "kwargs": []}, "q_name": "make_kwargs_callable.<locals>.kwargs_func", "ret_exprs": ["return func(*args, **kwargs)"], "ret_type": "", "ret_type_p": [["bool", 0.17579821443508328], ["Dict[str, Any]", 0.1028102717148352], ["int", 0.10133599837328364], ["Mapping[str, Sequence[str]]", 0.09243018320571998]], "variables": {"kwargs": ""}, "variables_p": {"kwargs": [["list", 0.10303880497170301]]}}, {"docstring": {"func": "Make a new callable that can accept any number of positional or keyword arguments", "long_descr": "but only forwards those required by the given callable func.", "ret": null}, "fn_lc": [[200, 0], [212, 22]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "make_kwargs_callable", "params": {"func": "typing.Callable[..., R]"}, "params_descr": {"func": ""}, "params_occur": {"func": []}, "params_p": {"args": [], "func": [["Callable", 0.506184633438908]], "kwargs": []}, "q_name": "make_kwargs_callable", "ret_exprs": ["return kwargs_func"], "ret_type": "typing.Callable[..., R]", "ret_type_p": [["bool", 0.17259222647664818], ["int", 0.07237544398750172], ["str", 0.06448567328592329]], "variables": {}, "variables_p": {}}], "imports": ["__future__", "annotations", "datetime", "datetime", "typing", "Any", "Callable", "Collection", "Mapping", "TypeVar", "airflow", "settings", "airflow", "utils", "context", "Context", "lazy_mapping_from_context", "inspect", "itertools", "functools"], "mod_var_ln": {"AIRFLOW_VAR_NAME_FORMAT_MAPPING": [[31, 0], [31, 31]], "DEFAULT_FORMAT_PREFIX": [[28, 0], [28, 21]], "ENV_VAR_FORMAT_PREFIX": [[29, 0], [29, 21]], "R": [[26, 0], [26, 1]]}, "mod_var_occur": {"AIRFLOW_VAR_NAME_FORMAT_MAPPING": [["mapping_value", "AIRFLOW_VAR_NAME_FORMAT_MAPPING", "mapping_key", "name_format"]], "DEFAULT_FORMAT_PREFIX": [["AIRFLOW_VAR_NAME_FORMAT_MAPPING", "DEFAULT_FORMAT_PREFIX", "ENV_VAR_FORMAT_PREFIX", "DEFAULT_FORMAT_PREFIX", "ENV_VAR_FORMAT_PREFIX", "DEFAULT_FORMAT_PREFIX", "ENV_VAR_FORMAT_PREFIX", "DEFAULT_FORMAT_PREFIX", "ENV_VAR_FORMAT_PREFIX", "DEFAULT_FORMAT_PREFIX", "ENV_VAR_FORMAT_PREFIX", "DEFAULT_FORMAT_PREFIX", "ENV_VAR_FORMAT_PREFIX", "DEFAULT_FORMAT_PREFIX", "ENV_VAR_FORMAT_PREFIX"], ["key", "startswith", "DEFAULT_FORMAT_PREFIX"], ["key", "DEFAULT_FORMAT_PREFIX", "key"]], "ENV_VAR_FORMAT_PREFIX": [["AIRFLOW_VAR_NAME_FORMAT_MAPPING", "DEFAULT_FORMAT_PREFIX", "ENV_VAR_FORMAT_PREFIX", "DEFAULT_FORMAT_PREFIX", "ENV_VAR_FORMAT_PREFIX", "DEFAULT_FORMAT_PREFIX", "ENV_VAR_FORMAT_PREFIX", "DEFAULT_FORMAT_PREFIX", "ENV_VAR_FORMAT_PREFIX", "DEFAULT_FORMAT_PREFIX", "ENV_VAR_FORMAT_PREFIX", "DEFAULT_FORMAT_PREFIX", "ENV_VAR_FORMAT_PREFIX", "DEFAULT_FORMAT_PREFIX", "ENV_VAR_FORMAT_PREFIX"], ["key", "startswith", "ENV_VAR_FORMAT_PREFIX"], ["key", "ENV_VAR_FORMAT_PREFIX", "key", "upper"]], "R": []}, "no_types_annot": {"D": 17, "I": 0, "U": 23}, "session_id": "mZVNbBlJ8FuCcJ3RpRXy0ESf7gtbTxwMxm2SG9w7e4Y", "set": null, "tc": [false, null], "type_annot_cove": 0.42, "typed_seq": "", "untyped_seq": "", "variables": {"AIRFLOW_VAR_NAME_FORMAT_MAPPING": "", "DEFAULT_FORMAT_PREFIX": "", "ENV_VAR_FORMAT_PREFIX": "", "R": ""}, "variables_p": {"AIRFLOW_VAR_NAME_FORMAT_MAPPING": [["str", 0.6756366734683754], ["Dict[str, List[str]]", 0.32436332653162475]], "DEFAULT_FORMAT_PREFIX": [["str", 0.8151022773776396]], "ENV_VAR_FORMAT_PREFIX": [["str", 1.0]], "R": [["int", 0.30000000000000004], ["str", 0.20000000000000004], ["list", 0.10000000000000002], ["List[float]", 0.10000000000000002], ["Pattern[str]", 0.10000000000000002]]}}}