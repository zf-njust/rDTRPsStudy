{"error": null, "response": {"classes": [{"cls_lc": [[34, 0], [147, 34]], "cls_var_ln": {"STREAM_LOOP_SLEEP_SECONDS": [[37, 4], [37, 29]]}, "cls_var_occur": {"STREAM_LOOP_SLEEP_SECONDS": []}, "funcs": [{"docstring": {"func": "Reads chunks of Task Instance logs.", "long_descr": null, "ret": null}, "fn_lc": [[40, 4], [64, 29]], "fn_var_ln": {"logs": [[62, 8], [62, 12]], "metadata": [[63, 8], [63, 16]], "metadatas": [[62, 14], [62, 23]]}, "fn_var_occur": {"logs": [["logs", "metadatas", "self", "log_handler", "read", "ti", "try_number", "metadata", "metadata"], ["logs", "metadata"]], "metadata": [["logs", "metadatas", "self", "log_handler", "read", "ti", "try_number", "metadata", "metadata"], ["metadata", "metadatas"], ["logs", "metadata"]], "metadatas": [["logs", "metadatas", "self", "log_handler", "read", "ti", "try_number", "metadata", "metadata"], ["metadata", "metadatas"]]}, "name": "read_log_chunks", "params": {"metadata": "", "self": "", "ti": "airflow.models.taskinstance.TaskInstance", "try_number": "int | None"}, "params_descr": {"metadata": "A dictionary containing information about how to read the task log\nThe following is an example of how to use this method to read log:\n\n.. code-block:: python\n\n    logs, metadata = task_log_reader.read_log_chunks(ti, try_number, metadata)\n    logs = logs[0] if try_number is not None else logs\n\nwhere task_log_reader is an instance of TaskLogReader. The metadata will always\ncontain information about the task log which can enable you read logs to the\nend.", "self": "", "ti": "The taskInstance", "try_number": "If provided, logs for the given try will be returned.\nOtherwise, logs from all attempts are returned."}, "params_occur": {"metadata": [["logs", "metadatas", "self", "log_handler", "read", "ti", "try_number", "metadata", "metadata"], ["metadata", "metadatas"], ["logs", "metadata"]], "self": [["logs", "metadatas", "self", "log_handler", "read", "ti", "try_number", "metadata", "metadata"]], "ti": [["logs", "metadatas", "self", "log_handler", "read", "ti", "try_number", "metadata", "metadata"]], "try_number": [["logs", "metadatas", "self", "log_handler", "read", "ti", "try_number", "metadata", "metadata"]]}, "params_p": {"args": [], "kwargs": [], "metadata": [["str", 0.3214638986804308], ["float", 0.10714796978042769], ["int", 0.10714796978042769]], "self": [], "ti": [["str", 0.3457797855137012], ["float", 0.11232528372142034], ["int", 0.11232528372142034], ["Callable", 0.08450913653163411]], "try_number": [["str", 0.3457797855137012], ["float", 0.11232528372142034], ["int", 0.11232528372142034], ["Callable", 0.08450913653163411]]}, "q_name": "TaskLogReader.read_log_chunks", "ret_exprs": ["return logs, metadata"], "ret_type": "builtins.tuple[builtins.list[builtins.tuple[builtins.tuple[builtins.str, builtins.str]]], builtins.dict[builtins.str, builtins.str]]", "ret_type_p": [["Dict[str, str]", 0.21590718257160718], ["dict", 0.19330701151648821], ["str", 0.10565120162627625], ["zam_repondeur.models.Lecture", 0.09932168235652569], ["List[str]", 0.09617693954343712]], "variables": {"logs": "", "metadata": "", "metadatas": ""}, "variables_p": {"logs": [["logging.Logger", 0.2140466762952773]], "metadata": [["str", 0.5325320946726141], ["Optional[Pattern[str]]", 0.09611248930284579], ["bool", 0.09283885400613504], ["int", 0.09283885400613504]], "metadatas": [["str", 0.5539465174231681], ["Optional[str]", 0.19095297001396028], ["bool", 0.08503350418762382]]}}, {"docstring": {"func": "Used to continuously read log to the end.", "long_descr": null, "ret": null}, "fn_lc": [[66, 4], [96, 25]], "fn_var_ln": {"logs": [[85, 16], [85, 20]], "metadata": [[85, 22], [85, 30]], "next_try": [[75, 12], [75, 20]], "try_numbers": [[78, 12], [78, 23]]}, "fn_var_occur": {"logs": [["logs", "metadata", "self", "read_log_chunks", "ti", "current_try_number", "metadata"]], "metadata": [["metadata", "pop", "None"], ["metadata", "pop", "None"], ["metadata", "pop", "None"], ["metadata", "pop", "None"], ["logs", "metadata", "self", "read_log_chunks", "ti", "current_try_number", "metadata"], ["metadata", "metadata", "ti", "state", "State", "RUNNING", "State", "DEFERRED"]], "next_try": [["next_try", "ti", "next_try_number"], ["try_numbers", "list", "range", "next_try"]], "try_numbers": [["try_numbers", "list", "range", "next_try"], ["try_numbers", "try_number"]]}, "name": "read_log_stream", "params": {"metadata": "builtins.dict", "self": "", "ti": "airflow.models.taskinstance.TaskInstance", "try_number": "int | None"}, "params_descr": {"metadata": "A dictionary containing information about how to read the task log", "self": "", "ti": "The Task Instance", "try_number": "the task try number"}, "params_occur": {"metadata": [["metadata", "pop", "None"], ["metadata", "pop", "None"], ["metadata", "pop", "None"], ["metadata", "pop", "None"], ["logs", "metadata", "self", "read_log_chunks", "ti", "current_try_number", "metadata"], ["metadata", "metadata", "ti", "state", "State", "RUNNING", "State", "DEFERRED"]], "self": [["logs", "metadata", "self", "read_log_chunks", "ti", "current_try_number", "metadata"], ["time", "sleep", "self", "STREAM_LOOP_SLEEP_SECONDS"]], "ti": [["next_try", "ti", "next_try_number"], ["logs", "metadata", "self", "read_log_chunks", "ti", "current_try_number", "metadata"], ["metadata", "metadata", "ti", "state", "State", "RUNNING", "State", "DEFERRED"]], "try_number": [["try_number", "None"], ["try_numbers", "try_number"]]}, "params_p": {"args": [], "kwargs": [], "metadata": [["int", 0.2120843236721487], ["Iterable[str]", 0.11840582814873843], ["Optional[float]", 0.10255710388039535]], "self": [], "ti": [["bytes", 0.08039045152745428], ["int", 0.07923048527801844]], "try_number": [["Optional[float]", 0.22578856632793434], ["Optional[str]", 0.19342267875886301], ["Optional[int]", 0.08953559346376216]]}, "q_name": "TaskLogReader.read_log_stream", "ret_exprs": [], "ret_type": "typing.Iterator[builtins.str]", "variables": {"logs": "", "metadata": "", "next_try": "", "try_numbers": ""}, "variables_p": {"logs": [["logging.Logger", 0.8877746935643268], ["logging.Formatter", 0.11222530643567344]], "metadata": [["str", 0.2023184036048255], ["Optional[str]", 0.1643985929315347], ["List[None]", 0.09319975392243975]], "next_try": [["Tuple[Literal, Literal, Literal]", 0.28913777261003115], ["Counter[Any]", 0.1885515325690752], ["int", 0.18710965768791502], ["str", 0.11051243209072394]], "try_numbers": [["int", 0.5976739042328543], ["List[int]", 0.17498281666793164]]}}, {"docstring": {"func": "Yield all handlers first from airflow.task logger then root logger.", "long_descr": "Depending on whether we're in a running task, it could be in either of these locations.", "ret": null}, "fn_lc": [[103, 8], [110, 51]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "handlers", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TaskLogReader.log_handler.<locals>.handlers", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Get the log handler which is configured to read logs.", "long_descr": null, "ret": null}, "fn_lc": [[99, 4], [112, 79]], "fn_var_ln": {"task_log_reader": [[101, 8], [101, 23]]}, "fn_var_occur": {"task_log_reader": [["next", "h", "h", "handlers", "h", "name", "task_log_reader", "None"]]}, "name": "log_handler", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TaskLogReader.log_handler", "ret_exprs": ["return next((h for h in handlers() if h.name == task_log_reader), None)"], "ret_type": "", "ret_type_p": [["List[str]", 0.2987471567771601], ["int", 0.10244492100244382], ["Iterable[T]", 0.0982657004557707], ["list", 0.0982657004557707]], "variables": {"task_log_reader": ""}, "variables_p": {"task_log_reader": [["dict", 0.18539955732150254]]}}, {"docstring": {"func": "Checks if a read operation is supported by a current log handler.", "long_descr": null, "ret": null}, "fn_lc": [[115, 4], [117, 48]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "supports_read", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["hasattr", "self", "log_handler"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TaskLogReader.supports_read", "ret_exprs": ["return hasattr(self.log_handler, \"read\")"], "ret_type": "", "ret_type_p": [["List[Dict[str, Any]]", 0.11693319836069127], ["BaseException", 0.10126872165374066], ["guillotina.db.orm.interfaces.IBaseObject", 0.09525188728557661], ["str", 0.08394048602185815]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Check if the logging handler supports external links (e.g. to Elasticsearch, Stackdriver, etc).", "long_descr": null, "ret": null}, "fn_lc": [[120, 4], [125, 54]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "supports_external_link", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["isinstance", "self", "log_handler", "ExternalLoggingMixin"], ["self", "log_handler", "supports_external_link"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TaskLogReader.supports_external_link", "ret_exprs": ["return False", "return self.log_handler.supports_external_link"], "ret_type": "builtins.bool", "ret_type_p": [["bool", 0.9999999999999999]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Renders the log attachment filename.", "long_descr": null, "ret": null}, "fn_lc": [[128, 4], [147, 34]], "fn_var_ln": {"attachment_filename": [[142, 8], [142, 27]], "dagrun": [[141, 8], [141, 14]]}, "fn_var_occur": {"attachment_filename": [["attachment_filename", "render_log_filename", "ti", "ti", "try_number", "try_number", "None", "try_number", "filename_template", "dagrun", "get_log_template", "session", "session", "filename"]], "dagrun": [["dagrun", "ti", "get_dagrun", "session", "session"], ["attachment_filename", "render_log_filename", "ti", "ti", "try_number", "try_number", "None", "try_number", "filename_template", "dagrun", "get_log_template", "session", "session", "filename"]]}, "name": "render_log_filename", "params": {"self": "", "session": "sqlalchemy.orm.session.Session", "ti": "airflow.models.taskinstance.TaskInstance", "try_number": "int | None"}, "params_descr": {"self": "", "session": "", "ti": "The task instance", "try_number": "The task try number"}, "params_occur": {"self": [], "session": [["dagrun", "ti", "get_dagrun", "session", "session"], ["attachment_filename", "render_log_filename", "ti", "ti", "try_number", "try_number", "None", "try_number", "filename_template", "dagrun", "get_log_template", "session", "session", "filename"]], "ti": [["dagrun", "ti", "get_dagrun", "session", "session"], ["attachment_filename", "render_log_filename", "ti", "ti", "try_number", "try_number", "None", "try_number", "filename_template", "dagrun", "get_log_template", "session", "session", "filename"]], "try_number": [["attachment_filename", "render_log_filename", "ti", "ti", "try_number", "try_number", "None", "try_number", "filename_template", "dagrun", "get_log_template", "session", "session", "filename"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "session": [["str", 0.41040277224452326], ["logging.Logger", 0.10724211436118836]], "ti": [["str", 0.41040277224452326], ["logging.Logger", 0.10724211436118836]], "try_number": [["Optional[Callable]", 0.11413585690279619], ["Dict[str, int]", 0.09538836836555174], ["str", 0.0949143845238741], ["bool", 0.09461610088807657]]}, "q_name": "TaskLogReader.render_log_filename", "ret_exprs": ["return attachment_filename"], "ret_type": "builtins.str", "ret_type_p": [["str", 1.0]], "variables": {"attachment_filename": "", "dagrun": ""}, "variables_p": {"attachment_filename": [["str", 0.2073254709927733], ["src.pip_shims.models.ShimmedPathCollection", 0.11795989845893275], ["list", 0.10531775585511799], ["src.pythonfinder.models.path.PathEntry", 0.09889221734876125]], "dagrun": [["str", 0.3963717378519454], ["int", 0.17548458493319238]]}}], "name": "TaskLogReader", "q_name": "TaskLogReader", "variables": {"STREAM_LOOP_SLEEP_SECONDS": ""}, "variables_p": {"STREAM_LOOP_SLEEP_SECONDS": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]]}}], "funcs": [], "imports": ["__future__", "annotations", "logging", "time", "functools", "cached_property", "typing", "Iterator", "sqlalchemy", "orm", "session", "Session", "airflow", "configuration", "conf", "airflow", "models", "taskinstance", "TaskInstance", "airflow", "utils", "helpers", "render_log_filename", "airflow", "utils", "log", "logging_mixin", "ExternalLoggingMixin", "airflow", "utils", "session", "NEW_SESSION", "provide_session", "airflow", "utils", "state", "State"], "mod_var_ln": {}, "mod_var_occur": {}, "no_types_annot": {"D": 11, "I": 0, "U": 14}, "session_id": "cYdENrT4GBWaMNkQrN8J4FopqsMWdWXjMtbHiI4XKw8", "set": null, "tc": [false, null], "type_annot_cove": 0.44, "typed_seq": "", "untyped_seq": "", "variables": {}, "variables_p": {}}}