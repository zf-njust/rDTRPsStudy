{"error": null, "response": {"classes": [], "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[78, 4], [80, 41]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "on_terminate", "params": {"p": ""}, "params_descr": {"p": ""}, "params_occur": {"p": [["logger", "info", "p", "p", "pid", "p", "returncode"], ["returncodes", "p", "pid", "p", "returncode"]]}, "params_p": {"args": [], "kwargs": [], "p": [["int", 0.6666666430198762], ["str", 0.33333335687654675]]}, "q_name": "reap_process_group.<locals>.on_terminate", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[82, 4], [111, 21]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "signal_procs", "params": {"sig": ""}, "params_descr": {"sig": ""}, "params_occur": {"sig": [["logger", "info", "sig", "process_group_id"], ["os", "killpg", "process_group_id", "sig"], ["subprocess", "check_call", "str", "int", "sig", "str", "p", "pid", "p", "all_processes_in_the_group"], ["logger", "info", "sig", "process_group_id"], ["os", "kill", "process_group_id", "sig"]]}, "params_p": {"args": [], "kwargs": [], "sig": [["str", 0.5366737171242613], ["int", 0.18199696890722356], ["bytes", 0.09579255163419621]]}, "q_name": "reap_process_group.<locals>.signal_procs", "ret_exprs": ["return"], "ret_type": "", "ret_type_p": [["Union[tuple, list]", 0.12326783261663934], ["List[int]", 0.09124591253820835], ["Dict[str, Any]", 0.08769568774684897], ["str", 0.08682447752895113]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Send sig (SIGTERM) to the process group of pid.", "long_descr": "Tries really hard to terminate all processes in the group (including grandchildren). Will send\nsig (SIGTERM) to the process group of pid. If any process is alive after timeout\na SIGKILL will be send.", "ret": null}, "fn_lc": [[53, 0], [161, 22]], "fn_var_ln": {"_": [[157, 8], [157, 9]], "alive": [[157, 11], [157, 16]], "all_processes_in_the_group": [[123, 8], [123, 34]], "parent": [[117, 8], [117, 14]], "returncodes": [[76, 4], [76, 15]]}, "fn_var_occur": {"_": [["_", "alive", "psutil", "wait_procs", "all_processes_in_the_group", "timeout", "timeout", "callback", "on_terminate"], ["_", "alive", "psutil", "wait_procs", "alive", "timeout", "timeout", "callback", "on_terminate"]], "alive": [["_", "alive", "psutil", "wait_procs", "all_processes_in_the_group", "timeout", "timeout", "callback", "on_terminate"], ["_", "alive", "psutil", "wait_procs", "alive", "timeout", "timeout", "callback", "on_terminate"]], "all_processes_in_the_group": [["all_processes_in_the_group", "parent", "children", "recursive", "True"], ["all_processes_in_the_group", "append", "parent"], ["all_processes_in_the_group", "append", "proc"], ["logger", "info", "sig", "process_group_id", "p", "pid", "p", "all_processes_in_the_group"], ["_", "alive", "psutil", "wait_procs", "all_processes_in_the_group", "timeout", "timeout", "callback", "on_terminate"]], "parent": [["parent", "psutil", "Process", "process_group_id"], ["all_processes_in_the_group", "parent", "children", "recursive", "True"], ["all_processes_in_the_group", "append", "parent"]], "returncodes": []}, "name": "reap_process_group", "params": {"logger": "", "process_group_id": "builtins.int", "sig": "signal.Signals", "timeout": "builtins.int"}, "params_descr": {"logger": "log handler", "process_group_id": "process group id to kill.\nThe process that wants to create the group should run\n`airflow.utils.process_utils.set_new_process_group()` as the first command\nit executes which will set group id = process_id. Effectively the process that is the\n\"root\" of the group has pid = gid and all other processes in the group have different\npids but the same gid (equal the pid of the root process)", "sig": "signal type", "timeout": "how much time a process has to terminate"}, "params_occur": {"logger": [["logger", "info", "sig", "process_group_id", "p", "pid", "p", "all_processes_in_the_group"], ["logger", "warning", "proc"], ["logger", "error", "proc", "proc", "pid"]], "process_group_id": [["IS_WINDOWS", "process_group_id", "os", "getpgid"], ["parent", "psutil", "Process", "process_group_id"], ["os", "getpgid", "proc", "pid", "process_group_id", "proc", "pid"], ["logger", "info", "sig", "process_group_id", "p", "pid", "p", "all_processes_in_the_group"]], "sig": [["logger", "info", "sig", "process_group_id", "p", "pid", "p", "all_processes_in_the_group"], ["signal_procs", "sig"]], "timeout": [["_", "alive", "psutil", "wait_procs", "all_processes_in_the_group", "timeout", "timeout", "callback", "on_terminate"], ["_", "alive", "psutil", "wait_procs", "alive", "timeout", "timeout", "callback", "on_terminate"]]}, "params_p": {"args": [], "kwargs": [], "logger": [["str", 0.7232708896955755], ["int", 0.1839624756907903], ["bool", 0.09276663461363428]], "process_group_id": [["int", 0.29906620410781376], ["bool", 0.08186389588857564]], "sig": [["str", 0.7136862927796132], ["bool", 0.19374629082208836], ["int", 0.09256741639829846]], "timeout": [["int", 0.36279705796407913], ["Optional[List[str]]", 0.19660378942398782], ["float", 0.19400826259558354]]}, "q_name": "reap_process_group", "ret_exprs": ["return returncodes", "return returncodes"], "ret_type": "builtins.dict[builtins.int, builtins.int]", "ret_type_p": [["int", 0.30000000000000004], ["Callable", 0.2], ["str", 0.1]], "variables": {"_": "", "alive": "", "all_processes_in_the_group": "", "parent": "", "returncodes": ""}, "variables_p": {"_": [["Dict[str, str]", 0.1016169904746773]], "alive": [["Dict[str, str]", 0.1016169904746773]], "all_processes_in_the_group": [["str", 0.3078895164813227], ["List[List[str]]", 0.11827781572093261], ["telegram.utils.AsyncResult", 0.10082579451874916], ["List[Dict[str, str]]", 0.09771629388862701], ["list", 0.09088766791229141]], "parent": [["frozenset[str]", 0.1985167884652483], ["Dict[str, set]", 0.13900980397337573], ["Optional[Tuple[int, int]]", 0.0812675590465375], ["str", 0.07981948572692876], ["cmk.utils.rulesets.ruleset_matcher.RulesetMatchObject", 0.07688825644218397]], "returncodes": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]]}}, {"docstring": {"func": "Execute a process and stream output to logger.", "long_descr": null, "ret": null}, "fn_lc": [[164, 0], [171, 51]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "execute_in_subprocess", "params": {"cmd": "builtins.list[builtins.str]", "cwd": "str | None"}, "params_descr": {"cmd": "command and arguments to run", "cwd": "Current working directory passed to the Popen constructor"}, "params_occur": {"cmd": [["execute_in_subprocess_with_kwargs", "cmd", "cwd", "cwd"]], "cwd": [["execute_in_subprocess_with_kwargs", "cmd", "cwd", "cwd"]]}, "params_p": {"args": [], "cmd": [["int", 0.27311622177234746], ["List[dict]", 0.11670342762850956], ["str", 0.10548296049038271], ["bytearray", 0.10353952095664846], ["float", 0.09763899760558895], ["bytes", 0.09397369795301964]], "cwd": [["int", 0.27311622177234746], ["List[dict]", 0.11670342762850956], ["str", 0.10548296049038271], ["bytearray", 0.10353952095664846], ["float", 0.09763899760558895], ["bytes", 0.09397369795301964]], "kwargs": []}, "q_name": "execute_in_subprocess", "ret_exprs": [], "ret_type": "None", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Execute a process and stream output to logger.", "long_descr": null, "ret": null}, "fn_lc": [[174, 0], [194, 59]], "fn_var_ln": {"exit_code": [[192, 8], [192, 17]]}, "fn_var_occur": {"exit_code": [["exit_code", "proc", "wait"], ["subprocess", "CalledProcessError", "exit_code", "cmd"]]}, "name": "execute_in_subprocess_with_kwargs", "params": {"cmd": "builtins.list[builtins.str]", "kwargs": ""}, "params_descr": {"cmd": "command and arguments to run\nAll other keyword args will be passed directly to subprocess.Popen", "kwargs": ""}, "params_occur": {"cmd": [["log", "info", "join", "shlex", "quote", "c", "c", "cmd"], ["subprocess", "Popen", "cmd", "stdout", "subprocess", "PIPE", "stderr", "subprocess", "STDOUT", "bufsize", "close_fds", "True", "kwargs", "proc"], ["subprocess", "CalledProcessError", "exit_code", "cmd"]], "kwargs": [["subprocess", "Popen", "cmd", "stdout", "subprocess", "PIPE", "stderr", "subprocess", "STDOUT", "bufsize", "close_fds", "True", "kwargs", "proc"]]}, "params_p": {"args": [], "cmd": [["str", 0.38404220338821393], ["List[str]", 0.11133525447667585], ["int", 0.09836618742121468], ["bool", 0.09430213085018904], ["purplship.core.utils.pipeline.Job", 0.09193352716085923]], "kwargs": []}, "q_name": "execute_in_subprocess_with_kwargs", "ret_exprs": [], "ret_type": "None", "variables": {"exit_code": ""}, "variables_p": {"exit_code": [["str", 1.0]]}}, {"docstring": {"func": "Run the new command as a subprocess.", "long_descr": "Runs the new command as a subprocess and ensures that the terminal's state is restored to its original\nstate after the process is completed e.g. if the subprocess hides the cursor, it will be restored after\nthe process is completed.", "ret": null}, "fn_lc": [[197, 0], [233, 64]], "fn_var_ln": {"_": [[223, 33], [223, 34]], "input_data": [[225, 20], [225, 30]], "old_tty": [[207, 4], [207, 11]], "output_data": [[228, 20], [228, 31]], "primary_fd": [[211, 4], [211, 14]], "readable_fbs": [[223, 16], [223, 28]], "secondary_fd": [[211, 16], [211, 28]]}, "fn_var_occur": {"_": [["readable_fbs", "_", "_", "select", "select", "sys", "stdin", "primary_fd"]], "input_data": [["input_data", "os", "read", "sys", "stdin", "fileno"], ["os", "write", "primary_fd", "input_data"]], "old_tty": [["old_tty", "termios", "tcgetattr", "sys", "stdin"], ["termios", "tcsetattr", "sys", "stdin", "termios", "TCSADRAIN", "old_tty"]], "output_data": [["output_data", "os", "read", "primary_fd"], ["os", "write", "sys", "stdout", "fileno", "output_data"]], "primary_fd": [["primary_fd", "secondary_fd", "pty", "openpty"], ["readable_fbs", "_", "_", "select", "select", "sys", "stdin", "primary_fd"], ["os", "write", "primary_fd", "input_data"], ["primary_fd", "readable_fbs"], ["output_data", "os", "read", "primary_fd"]], "readable_fbs": [["readable_fbs", "_", "_", "select", "select", "sys", "stdin", "primary_fd"], ["sys", "stdin", "readable_fbs"], ["primary_fd", "readable_fbs"]], "secondary_fd": [["primary_fd", "secondary_fd", "pty", "openpty"], ["subprocess", "Popen", "cmd", "stdin", "secondary_fd", "stdout", "secondary_fd", "stderr", "secondary_fd", "universal_newlines", "True", "kwargs", "proc"]]}, "name": "execute_interactive", "params": {"cmd": "builtins.list[builtins.str]", "kwargs": ""}, "params_descr": {"cmd": "", "kwargs": ""}, "params_occur": {"cmd": [["log", "info", "join", "shlex", "quote", "c", "c", "cmd"], ["subprocess", "Popen", "cmd", "stdin", "secondary_fd", "stdout", "secondary_fd", "stderr", "secondary_fd", "universal_newlines", "True", "kwargs", "proc"]], "kwargs": [["subprocess", "Popen", "cmd", "stdin", "secondary_fd", "stdout", "secondary_fd", "stderr", "secondary_fd", "universal_newlines", "True", "kwargs", "proc"]]}, "params_p": {"args": [], "cmd": [["str", 0.280472046875059], ["bool", 0.24076583657991107], ["List[str]", 0.21412936263139823], ["Mapping[str, Any]", 0.0931368441451581], ["int", 0.08612716499556844]], "kwargs": []}, "q_name": "execute_interactive", "ret_exprs": [], "ret_type": "None", "variables": {"_": "", "input_data": "", "old_tty": "", "output_data": "", "primary_fd": "", "readable_fbs": "", "secondary_fd": ""}, "variables_p": {"_": [["list", 0.9999999992827714], ["float", 9.063720927478302e-11], ["dict", 8.019154132474046e-11], ["Tuple[Any, Any]", 8.019154132474046e-11], ["PyLibs.IPython.utils.tests.test_wildcard.obj_t", 8.019154132474046e-11], ["Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]", 7.52112264599741e-11], ["List[int]", 7.52112264599741e-11]], "input_data": [["List[str]", 0.3067402282900036], ["List[Dict[str, Any]]", 0.2003191683380364], ["int", 0.19723982925383005], ["bytes", 0.15071023974529146], ["list", 0.07323386144697888]], "old_tty": [["TextIO", 0.3], ["bool", 0.19999999999999998], ["int", 0.09999999999999999], ["List[Tuple[str, str]]", 0.09999999999999999], ["str", 0.09999999999999999]], "output_data": [["str", 0.31527892481257], ["int", 0.18537150491684184], ["bytes", 0.11917164255915307], ["os.terminal_size", 0.11298107781648804], ["List[str]", 0.08924547292454912], ["List[List[Any]]", 0.08155307975006354]], "primary_fd": [["float", 0.18226502890039328]], "readable_fbs": [["list", 0.9999999992827714], ["float", 9.063720927478302e-11], ["dict", 8.019154132474046e-11], ["Tuple[Any, Any]", 8.019154132474046e-11], ["PyLibs.IPython.utils.tests.test_wildcard.obj_t", 8.019154132474046e-11], ["Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]", 7.52112264599741e-11], ["List[int]", 7.52112264599741e-11]], "secondary_fd": [["str", 0.9123218525401229], ["Dict[str, Tuple[float, float]]", 0.0876781474598772]]}}, {"docstring": {"func": "Kills child processes for the current process.", "long_descr": "First, it sends the SIGTERM signal, and after the time specified by the `timeout` parameter, sends\nthe SIGKILL signal, if the process is still alive.", "ret": null}, "fn_lc": [[236, 0], [276, 24]], "fn_var_ln": {"child_processes": [[268, 4], [268, 19]], "this_process": [[246, 4], [246, 16]]}, "fn_var_occur": {"child_processes": [["child_processes", "x", "x", "this_process", "children", "recursive", "True", "x", "is_running", "x", "pid", "pids_to_kill"], ["psutil", "wait_procs", "child_processes", "timeout", "timeout", "callback", "x", "log", "info", "x", "pid"], ["child_processes", "x", "x", "this_process", "children", "recursive", "True", "x", "is_running", "x", "pid", "pids_to_kill"]], "this_process": [["this_process", "psutil", "Process", "os", "getpid"], ["child_processes", "x", "x", "this_process", "children", "recursive", "True", "x", "is_running", "x", "pid", "pids_to_kill"], ["child_processes", "x", "x", "this_process", "children", "recursive", "True", "x", "is_running", "x", "pid", "pids_to_kill"]]}, "name": "kill_child_processes_by_pids", "params": {"pids_to_kill": "builtins.list[builtins.int]", "timeout": "builtins.int"}, "params_descr": {"pids_to_kill": "List of PID to be killed.", "timeout": "The time to wait before sending the SIGKILL signal."}, "params_occur": {"pids_to_kill": [["child_processes", "x", "x", "this_process", "children", "recursive", "True", "x", "is_running", "x", "pid", "pids_to_kill"], ["child_processes", "x", "x", "this_process", "children", "recursive", "True", "x", "is_running", "x", "pid", "pids_to_kill"]], "timeout": [["log", "info", "timeout"], ["psutil", "wait_procs", "child_processes", "timeout", "timeout", "callback", "x", "log", "info", "x", "pid"]]}, "params_p": {"args": [], "kwargs": [], "pids_to_kill": [["Union[int, List[\"Outcome\"]]", 0.21485004336869865], ["int", 0.11389089641868727], ["List[int]", 0.09763330788662263]], "timeout": [["int", 0.3031068088844095], ["Callable", 0.10128736863929737], ["float", 0.09867300053545754], ["str", 0.09867300053545754]]}, "q_name": "kill_child_processes_by_pids", "ret_exprs": [], "ret_type": "None", "variables": {"child_processes": "", "this_process": ""}, "variables_p": {"child_processes": [["list", 0.10620706756690293], ["str", 0.1053306316658152], ["int", 0.08751020846697694]], "this_process": [["bool", 0.22743724643764102], ["List[int]", 0.1989998147360708], ["Tuple[Literal, Literal, Literal, Literal]", 0.10265051008553439], ["List[Tuple[Any, Any]]", 0.10005398117125283], ["list", 0.09539530055413427], ["float", 0.09376002455317997], ["Union[Literal, Literal]", 0.0911588548269554]]}}, {"docstring": {"func": "Set environment variables in context.", "long_descr": "After leaving the context, it restores its original state.", "ret": null}, "fn_lc": [[280, 0], [297, 43]], "fn_var_ln": {"current_env_state": [[287, 4], [287, 21]]}, "fn_var_occur": {"current_env_state": [["current_env_state", "key", "os", "environ", "get", "key", "key", "new_env_variables", "keys"], ["current_env_state", "items"]]}, "name": "patch_environ", "params": {"new_env_variables": "builtins.dict[builtins.str, builtins.str]"}, "params_descr": {"new_env_variables": "Environment variables to set"}, "params_occur": {"new_env_variables": [["current_env_state", "key", "os", "environ", "get", "key", "key", "new_env_variables", "keys"], ["os", "environ", "update", "new_env_variables"]]}, "params_p": {"args": [], "kwargs": [], "new_env_variables": [["str", 0.17523249212568967], ["type", 0.12483319167410997], ["List[Tuple[Any, ...]]", 0.09738592396732597]]}, "q_name": "patch_environ", "ret_exprs": [], "ret_type": "typing.Generator[None, None, None]", "variables": {"current_env_state": ""}, "variables_p": {"current_env_state": [["str", 0.6401880440583723], ["Final", 0.2654751360115102], ["Dict[str, str]", 0.09433681993011764]]}}, {"docstring": {"func": "Checks if a pidfile already exists and process is still running.", "long_descr": "If process is dead then pidfile is removed.", "ret": null}, "fn_lc": [[300, 0], [323, 38]], "fn_var_ln": {"pid": [[313, 8], [313, 11]], "pid_lock_file": [[309, 4], [309, 17]], "proc": [[318, 12], [318, 16]]}, "fn_var_occur": {"pid": [["pid", "pid_lock_file", "read_pid"], ["pid", "None"], ["proc", "psutil", "Process", "pid"], ["AirflowException", "process_name", "pid"]], "pid_lock_file": [["pid_lock_file", "PIDLockFile", "path", "pid_file"], ["pid_lock_file", "is_locked"], ["pid", "pid_lock_file", "read_pid"], ["pid_lock_file", "break_lock"]], "proc": [["proc", "psutil", "Process", "pid"], ["proc", "is_running"]]}, "name": "check_if_pidfile_process_is_running", "params": {"pid_file": "builtins.str", "process_name": "builtins.str"}, "params_descr": {"pid_file": "path to the pidfile", "process_name": "name used in exception if process is up and\nrunning"}, "params_occur": {"pid_file": [["pid_lock_file", "PIDLockFile", "path", "pid_file"]], "process_name": [["AirflowException", "process_name", "pid"]]}, "params_p": {"args": [], "kwargs": [], "pid_file": [["str", 0.7818256181001424]], "process_name": [["str", 0.8062773608629213], ["Callable", 0.09192535586012461]]}, "q_name": "check_if_pidfile_process_is_running", "ret_exprs": ["return"], "ret_type": "", "ret_type_p": [["str", 0.09849079528929955]], "variables": {"pid": "", "pid_lock_file": "", "proc": ""}, "variables_p": {"pid": [["list", 0.11432967951098529], ["TextIO", 0.10797541746825594], ["Tuple[Any, None]", 0.09645722899116967], ["Tuple[List[Any], Literal]", 0.09645722899116967]], "pid_lock_file": [["str", 0.3798330379364421]], "proc": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["str", 0.1]]}}, {"docstring": {"func": "Try to set current process to a new process group.", "long_descr": "That makes it easy to kill all sub-process of this at the OS-level,\nrather than having to iterate the child processes.\n\nIf current process was spawned by system call ``exec()``, the current\nprocess group is kept.", "ret": null}, "fn_lc": [[326, 0], [339, 20]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "set_new_process_group", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "set_new_process_group", "ret_exprs": ["return"], "ret_type": "None", "ret_type_p": [["Union[tuple, list]", 0.10700462507203737], ["bytes", 0.0964136981475029], ["raiden.utils.Signature", 0.0964136981475029]], "variables": {}, "variables_p": {}}], "imports": ["__future__", "annotations", "errno", "logging", "os", "select", "shlex", "signal", "subprocess", "sys", "airflow", "utils", "platform", "IS_WINDOWS", "pty", "termios", "tty", "contextlib", "contextmanager", "typing", "Generator", "psutil", "lockfile", "pidlockfile", "PIDLockFile", "airflow", "configuration", "conf", "airflow", "exceptions", "AirflowException"], "mod_var_ln": {"DEFAULT_TIME_TO_WAIT_AFTER_SIGTERM": [[50, 0], [50, 34]], "log": [[46, 0], [46, 3]]}, "mod_var_occur": {"DEFAULT_TIME_TO_WAIT_AFTER_SIGTERM": [], "log": [["log", "info", "join", "shlex", "quote", "c", "c", "cmd"], ["log", "info"], ["log", "info", "line", "decode", "rstrip"], ["log", "info", "join", "shlex", "quote", "c", "c", "cmd"], ["log", "info", "child", "pid"], ["log", "info", "timeout"], ["psutil", "wait_procs", "child_processes", "timeout", "timeout", "callback", "x", "log", "info", "x", "pid"], ["log", "debug"], ["log", "info"], ["log", "info", "child", "pid"]]}, "no_types_annot": {"D": 19, "I": 0, "U": 29}, "session_id": "YjCHvWIPD6SdzfojVvzhxolTBpr_u1J1dqnH-ofQXb8", "set": null, "tc": [false, null], "type_annot_cove": 0.4, "typed_seq": "", "untyped_seq": "", "variables": {"DEFAULT_TIME_TO_WAIT_AFTER_SIGTERM": "", "log": ""}, "variables_p": {"DEFAULT_TIME_TO_WAIT_AFTER_SIGTERM": [["int", 0.8010455852970448], ["Dict[int, int]", 0.08984069398408845]], "log": [["logging.Logger", 1.0]]}}}