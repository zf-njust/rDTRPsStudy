{"error": null, "response": {"classes": [], "funcs": [{"docstring": {"func": "Registers more action_logger function callback for pre-execution.", "long_descr": "This function callback is expected to be called with keyword args.\nFor more about the arguments that is being passed to the callback,\nrefer to airflow.utils.cli.action_logging().", "ret": "None"}, "fn_lc": [[29, 0], [40, 46]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "register_pre_exec_callback", "params": {"action_logger": ""}, "params_descr": {"action_logger": "An action logger function"}, "params_occur": {"action_logger": [["logging", "debug", "action_logger"], ["__pre_exec_callbacks", "append", "action_logger"]]}, "params_p": {"action_logger": [["str", 0.18313373618858242], ["Union[None, int, str]", 0.1083345755678518], ["bool", 0.09268280165078584], ["Callable[..., Awaitable]", 0.0905747194804532]], "args": [], "kwargs": []}, "q_name": "register_pre_exec_callback", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Registers more action_logger function callback for post-execution.", "long_descr": "This function callback is expected to be called with keyword args.\nFor more about the arguments that is being passed to the callback,\nrefer to airflow.utils.cli.action_logging().", "ret": "None"}, "fn_lc": [[43, 0], [54, 47]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "register_post_exec_callback", "params": {"action_logger": ""}, "params_descr": {"action_logger": "An action logger function"}, "params_occur": {"action_logger": [["logging", "debug", "action_logger"], ["__post_exec_callbacks", "append", "action_logger"]]}, "params_p": {"action_logger": [["models.GithubWebhookEvent", 0.09164562985204684], ["str", 0.08587879681155533], ["Callable", 0.08587879681155533]], "args": [], "kwargs": []}, "q_name": "register_post_exec_callback", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Calls callbacks before execution.", "long_descr": "Note that any exception from callback will be logged but won't be propagated.", "ret": "None"}, "fn_lc": [[57, 0], [70, 84]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "on_pre_execution", "params": {"kwargs": ""}, "params_descr": {"kwargs": ""}, "params_occur": {"kwargs": [["callback", "kwargs"]]}, "params_p": {"args": [], "kwargs": []}, "q_name": "on_pre_execution", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Calls callbacks after execution.", "long_descr": "As it's being called after execution, it can capture status of execution,\nduration, etc. Note that any exception from callback will be logged but\nwon't be propagated.", "ret": "None"}, "fn_lc": [[73, 0], [88, 85]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "on_post_execution", "params": {"kwargs": ""}, "params_descr": {"kwargs": ""}, "params_occur": {"kwargs": [["callback", "kwargs"]]}, "params_p": {"args": [], "kwargs": []}, "q_name": "on_post_execution", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Default action logger callback that behaves similar to ``action_logging``.", "long_descr": "The difference is this function uses the global ORM session, and pushes a\n``Log`` row into the database instead of actually logging.", "ret": null}, "fn_lc": [[91, 0], [134, 53]], "fn_var_ln": {"error_is_ok": [[130, 8], [130, 19]], "expected": [[124, 8], [124, 16]], "extra": [[105, 12], [105, 17]]}, "fn_var_occur": {"error_is_ok": [["error_is_ok", "e", "args", "any", "x", "e", "args", "x", "expected"]], "expected": [["error_is_ok", "e", "args", "any", "x", "e", "args", "x", "expected"]], "extra": [["extra", "json", "dumps", "host_name", "full_command"], ["session", "bulk_insert_mappings", "Log", "sub_command", "None", "user", "extra", "task_id", "dag_id", "execution_date", "timezone", "utcnow"]]}, "name": "default_action_log", "params": {"_": "", "dag_id": "", "execution_date": "", "full_command": "", "host_name": "", "sub_command": "", "task_id": "", "user": ""}, "params_descr": {"_": "", "dag_id": "", "execution_date": "", "full_command": "", "host_name": "", "sub_command": "", "task_id": "", "user": ""}, "params_occur": {"_": [], "dag_id": [["session", "bulk_insert_mappings", "Log", "sub_command", "None", "user", "extra", "task_id", "dag_id", "execution_date", "timezone", "utcnow"]], "execution_date": [["session", "bulk_insert_mappings", "Log", "sub_command", "None", "user", "extra", "task_id", "dag_id", "execution_date", "timezone", "utcnow"]], "full_command": [["extra", "json", "dumps", "host_name", "full_command"]], "host_name": [["extra", "json", "dumps", "host_name", "full_command"]], "sub_command": [["session", "bulk_insert_mappings", "Log", "sub_command", "None", "user", "extra", "task_id", "dag_id", "execution_date", "timezone", "utcnow"]], "task_id": [["session", "bulk_insert_mappings", "Log", "sub_command", "None", "user", "extra", "task_id", "dag_id", "execution_date", "timezone", "utcnow"]], "user": [["session", "bulk_insert_mappings", "Log", "sub_command", "None", "user", "extra", "task_id", "dag_id", "execution_date", "timezone", "utcnow"]]}, "params_p": {"_": [["str", 0.49245699028442647], ["bool", 0.11653740569469682]], "args": [], "dag_id": [["Optional[str]", 0.3682648132107536], ["Optional[List[\"Address\"]]", 0.23599746372523922], ["str", 0.17897708741169915], ["Optional[bool]", 0.12217541446812578], ["int", 0.0945852211841821]], "execution_date": [["Optional[str]", 0.3682648132107536], ["Optional[List[\"Address\"]]", 0.23599746372523922], ["str", 0.17897708741169915], ["Optional[bool]", 0.12217541446812578], ["int", 0.0945852211841821]], "full_command": [["str", 0.9123585259321739], ["Dict[str, Any]", 0.08764147406782592]], "host_name": [["str", 0.9123585259321739], ["Dict[str, Any]", 0.08764147406782592]], "kwargs": [], "sub_command": [["Optional[str]", 0.3682648132107536], ["Optional[List[\"Address\"]]", 0.23599746372523922], ["str", 0.17897708741169915], ["Optional[bool]", 0.12217541446812578], ["int", 0.0945852211841821]], "task_id": [["Optional[str]", 0.3682648132107536], ["Optional[List[\"Address\"]]", 0.23599746372523922], ["str", 0.17897708741169915], ["Optional[bool]", 0.12217541446812578], ["int", 0.0945852211841821]], "user": [["Optional[str]", 0.3682648132107536], ["Optional[List[\"Address\"]]", 0.23599746372523922], ["str", 0.17897708741169915], ["Optional[bool]", 0.12217541446812578], ["int", 0.0945852211841821]]}, "q_name": "default_action_log", "ret_exprs": [], "ret_type": "", "variables": {"error_is_ok": "", "expected": "", "extra": ""}, "variables_p": {"error_is_ok": [["str", 0.3688297864332369], ["List[str]", 0.12264174918476554], ["Set[str]", 0.10549392408776025], ["dict", 0.08092385032994179]], "expected": [["str", 0.19620247045984307], ["set", 0.12791225284703592], ["List[str]", 0.09404510175774887]], "extra": [["str", 0.4619171284362349], ["Dict[str, str]", 0.12314441786024703], ["List[str]", 0.11018033726839876], ["dict", 0.09276675411845708]]}}], "imports": ["__future__", "annotations", "json", "logging", "typing", "Callable", "sqlalchemy", "exc", "OperationalError", "ProgrammingError", "airflow", "models", "log", "Log", "airflow", "utils", "timezone", "airflow", "utils", "session", "create_session"], "mod_var_ln": {"__post_exec_callbacks": [[138, 0], [138, 21]], "__pre_exec_callbacks": [[137, 0], [137, 20]]}, "mod_var_occur": {"__post_exec_callbacks": [], "__pre_exec_callbacks": []}, "no_types_annot": {"D": 2, "I": 0, "U": 20}, "session_id": "2VxQ8sb2bDAfll7bowlcMcuHmZNsl-FHTQzbrHUzIwk", "set": null, "tc": [false, null], "type_annot_cove": 0.09, "typed_seq": "", "untyped_seq": "", "variables": {"__post_exec_callbacks": "builtins.list[typing.Callable]", "__pre_exec_callbacks": "builtins.list[typing.Callable]"}, "variables_p": {"__post_exec_callbacks": [["str", 0.30000000000000004], ["int", 0.1], ["Tuple[int, int]", 0.1], ["Type[dmlblog.models.Post]", 0.1], ["Tuple[float, float]", 0.1], ["bool", 0.1]], "__pre_exec_callbacks": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]]}}}