{"error": null, "response": {"classes": [{"cls_lc": [[29, 0], [213, 18]], "cls_var_ln": {"DEFAULT_SQLALCHEMY_SCHEME": [[51, 4], [51, 29]], "conn_name_attr": [[52, 4], [52, 18]], "conn_type": [[54, 4], [54, 13]], "default_conn_name": [[53, 4], [53, 21]], "default_driver": [[58, 4], [58, 18]], "hook_name": [[55, 4], [55, 13]], "supports_autocommit": [[56, 4], [56, 23]]}, "cls_var_occur": {"DEFAULT_SQLALCHEMY_SCHEME": [], "conn_name_attr": [], "conn_type": [], "default_conn_name": [], "default_driver": [], "hook_name": [], "supports_autocommit": []}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[60, 4], [77, 45]], "fn_var_ln": {"_conn_str": [[74, 8], [74, 22]], "_connect_kwargs": [[77, 8], [77, 28]], "_connection": [[76, 8], [76, 24]], "_database": [[71, 8], [71, 22]], "_driver": [[72, 8], [72, 20]], "_dsn": [[73, 8], [73, 17]], "_sqlalchemy_scheme": [[75, 8], [75, 31]]}, "fn_var_occur": {"_conn_str": [["self", "_conn_str", "None"]], "_connect_kwargs": [["self", "_connect_kwargs", "connect_kwargs"]], "_connection": [["self", "_connection", "None"]], "_database": [["self", "_database", "database"]], "_driver": [["self", "_driver", "driver"]], "_dsn": [["self", "_dsn", "dsn"]], "_sqlalchemy_scheme": [["self", "_sqlalchemy_scheme", "sqlalchemy_scheme"]]}, "name": "__init__", "params": {"args": "", "connect_kwargs": "dict | None", "database": "str | None", "driver": "str | None", "dsn": "str | None", "kwargs": "", "self": "", "sqlalchemy_scheme": "str | None"}, "params_descr": {"args": "", "connect_kwargs": "", "database": "", "driver": "", "dsn": "", "kwargs": "", "self": "", "sqlalchemy_scheme": ""}, "params_occur": {"args": [["super", "__init__", "args", "kwargs"]], "connect_kwargs": [["self", "_connect_kwargs", "connect_kwargs"]], "database": [["self", "_database", "database"]], "driver": [["self", "_driver", "driver"]], "dsn": [["self", "_dsn", "dsn"]], "kwargs": [["super", "__init__", "args", "kwargs"]], "self": [["self", "_database", "database"], ["self", "_driver", "driver"], ["self", "_dsn", "dsn"], ["self", "_conn_str", "None"], ["self", "_sqlalchemy_scheme", "sqlalchemy_scheme"], ["self", "_connection", "None"], ["self", "_connect_kwargs", "connect_kwargs"]], "sqlalchemy_scheme": [["self", "_sqlalchemy_scheme", "sqlalchemy_scheme"]]}, "params_p": {"args": [], "connect_kwargs": [["float", 0.10573177186153218]], "database": [["Callable", 0.2355401342916231], ["str", 0.17252308046304873], ["bool", 0.06493913225561669], ["Iterable[str]", 0.0595046809893912], ["int", 0.05751861007825305]], "driver": [["Callable", 0.2355401342916231], ["str", 0.17252308046304873], ["bool", 0.06493913225561669], ["Iterable[str]", 0.0595046809893912], ["int", 0.05751861007825305]], "dsn": [["Callable", 0.2355401342916231], ["str", 0.17252308046304873], ["bool", 0.06493913225561669], ["Iterable[str]", 0.0595046809893912], ["int", 0.05751861007825305]], "kwargs": [], "self": [], "sqlalchemy_scheme": [["Callable", 0.2355401342916231], ["str", 0.17252308046304873], ["bool", 0.06493913225561669], ["Iterable[str]", 0.0595046809893912], ["int", 0.05751861007825305]]}, "q_name": "OdbcHook.__init__", "ret_exprs": [], "ret_type": "None", "variables": {"_conn_str": "", "_connect_kwargs": "", "_connection": "", "_database": "", "_driver": "", "_dsn": "", "_sqlalchemy_scheme": ""}, "variables_p": {"_conn_str": [["str", 0.11612694329529187]], "_connect_kwargs": [["bool", 0.5037383735210214], ["int", 0.09408236318591671]], "_connection": [["List[str]", 0.10907230180326222], ["bool", 0.10223880047050869], ["int", 0.0997190002928341], ["List[List[int]]", 0.09960271807461432], ["Optional[int]", 0.09234563909846295]], "_database": [["str", 0.30000000000000004], ["Dict[str, Any]", 0.1], ["dict", 0.1], ["int", 0.1]], "_driver": [], "_dsn": [["str", 0.30000000000000004], ["Dict[str, Any]", 0.1], ["dict", 0.1], ["int", 0.1]], "_sqlalchemy_scheme": [["str", 0.30000000000000004], ["Dict[str, Any]", 0.1], ["dict", 0.1], ["int", 0.1]]}}, {"docstring": {"func": "The Connection object with ID ``odbc_conn_id``.", "long_descr": null, "ret": null}, "fn_lc": [[80, 4], [84, 31]], "fn_var_ln": {"_connection": [[83, 12], [83, 28]]}, "fn_var_occur": {"_connection": [["self", "_connection"], ["self", "_connection", "self", "get_connection", "getattr", "self", "self", "conn_name_attr"], ["self", "_connection"]]}, "name": "connection", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "_connection"], ["self", "_connection", "self", "get_connection", "getattr", "self", "self", "conn_name_attr"], ["self", "_connection"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "OdbcHook.connection", "ret_exprs": ["return self._connection"], "ret_type": "", "ret_type_p": [["int", 0.30000000000000004], ["Callable", 0.2], ["str", 0.1]], "variables": {"_connection": ""}, "variables_p": {"_connection": [["str", 0.42062599370284975], ["Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]", 0.10864179032544698], ["Final", 0.09683501487760882], ["int", 0.09185220526734365], ["Dict[str, int]", 0.08956015242848614]]}}, {"docstring": {"func": "Database provided in init if exists; otherwise, ``schema`` from ``Connection`` object.", "long_descr": null, "ret": null}, "fn_lc": [[87, 4], [89, 55]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "database", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "_database", "self", "connection", "schema"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "OdbcHook.database", "ret_exprs": ["return self._database or self.connection.schema"], "ret_type": "str | None", "ret_type_p": [["int", 0.30000000000000004], ["Callable", 0.2], ["str", 0.1]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "SQLAlchemy scheme either from constructor, connection extras or default.", "long_descr": null, "ret": null}, "fn_lc": [[92, 4], [97, 88]], "fn_var_ln": {"extra_scheme": [[94, 8], [94, 20]]}, "fn_var_occur": {"extra_scheme": [["extra_scheme", "self", "connection_extra_lower", "get"], ["self", "_sqlalchemy_scheme", "extra_scheme", "extra_scheme", "extra_scheme"], ["self", "_sqlalchemy_scheme", "extra_scheme", "self", "DEFAULT_SQLALCHEMY_SCHEME"]]}, "name": "sqlalchemy_scheme", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["extra_scheme", "self", "connection_extra_lower", "get"], ["self", "_sqlalchemy_scheme", "extra_scheme", "extra_scheme", "extra_scheme"], ["self", "_sqlalchemy_scheme", "extra_scheme", "self", "DEFAULT_SQLALCHEMY_SCHEME"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "OdbcHook.sqlalchemy_scheme", "ret_exprs": ["return self._sqlalchemy_scheme or extra_scheme or self.DEFAULT_SQLALCHEMY_SCHEME"], "ret_type": "builtins.str", "ret_type_p": [["str", 0.18836983558465836], ["Optional[int]", 0.16889979918301076], ["float", 0.07421648745582465], ["trezor.utils.Writer", 0.06540877449359621]], "variables": {"extra_scheme": ""}, "variables_p": {"extra_scheme": [["dict", 0.19562792059556178], ["int", 0.10990722164789987], ["str", 0.10476041051748797], ["Dict[str, str]", 0.09564074926409004]]}}, {"docstring": {"func": "``connection.extra_dejson`` but where keys are converted to lower case.", "long_descr": "This is used internally for case-insensitive access of odbc params.", "ret": null}, "fn_lc": [[100, 4], [106, 78]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "connection_extra_lower", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["k", "lower", "v", "k", "v", "self", "connection", "extra_dejson", "items"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "OdbcHook.connection_extra_lower", "ret_exprs": ["return {k.lower(): v for k, v in self.connection.extra_dejson.items()}"], "ret_type": "builtins.dict", "ret_type_p": [["Dict[str, Any]", 0.283394051714097], ["Dict[str, str]", 0.2808345049206185], ["dict", 0.19623744443466037], ["Dict[int, Dict[int, Any]]", 0.12582058552616032]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Driver from init param if given; else try to find one in connection extra.", "long_descr": null, "ret": null}, "fn_lc": [[109, 4], [126, 93]], "fn_var_ln": {"_driver": [[125, 12], [125, 24]], "extra_driver": [[111, 8], [111, 20]]}, "fn_var_occur": {"_driver": [["self", "_driver", "extra_driver"], ["self", "_driver"], ["self", "_driver", "self", "default_driver"], ["self", "_driver", "strip", "lstrip", "rstrip", "strip", "self", "_driver", "None"]], "extra_driver": [["extra_driver", "self", "connection_extra_lower", "get"], ["extra_driver", "conf", "getboolean", "fallback", "False"], ["self", "_driver", "extra_driver"]]}, "name": "driver", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["extra_driver", "self", "connection_extra_lower", "get"], ["self", "_driver", "extra_driver"], ["self", "log", "warning"], ["self", "_driver"], ["self", "_driver", "self", "default_driver"], ["self", "_driver", "strip", "lstrip", "rstrip", "strip", "self", "_driver", "None"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "OdbcHook.driver", "ret_exprs": ["return self._driver.strip().lstrip(\"{\").rstrip(\"}\").strip() if self._driver else None"], "ret_type": "str | None", "ret_type_p": [["int", 0.30000000000000004], ["Callable", 0.2], ["str", 0.1]], "variables": {"_driver": "", "extra_driver": ""}, "variables_p": {"_driver": [["int", 0.09147316043589071], ["bool", 0.08804903623473671]], "extra_driver": [["str", 0.9999999999999999]]}}, {"docstring": {"func": "DSN from init param if given; else try to find one in connection extra.", "long_descr": null, "ret": null}, "fn_lc": [[129, 4], [135, 24]], "fn_var_ln": {"_dsn": [[134, 16], [134, 25]], "dsn": [[132, 12], [132, 15]]}, "fn_var_occur": {"_dsn": [["self", "_dsn"], ["self", "_dsn", "dsn", "strip"], ["self", "_dsn"]], "dsn": [["dsn", "self", "connection_extra_lower", "get"], ["self", "_dsn", "dsn", "strip"]]}, "name": "dsn", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "_dsn"], ["dsn", "self", "connection_extra_lower", "get"], ["self", "_dsn", "dsn", "strip"], ["self", "_dsn"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "OdbcHook.dsn", "ret_exprs": ["return self._dsn"], "ret_type": "str | None", "ret_type_p": [["int", 0.30000000000000004], ["Callable", 0.2], ["str", 0.1]], "variables": {"_dsn": "", "dsn": ""}, "variables_p": {"_dsn": [["Type[str]", 0.38364320166602356], ["str", 0.31223614874321975], ["dict", 0.11391371116815548], ["int", 0.08927636863008957]], "dsn": [["Dict[str, str]", 0.714002002920707], ["Dict[str, Any]", 0.09562010703466131], ["dict", 0.09562010703466131], ["Dict[int, str]", 0.09475778300997033]]}}, {"docstring": {"func": "ODBC connection string.", "long_descr": "We build connection string instead of using ``pyodbc.connect`` params\nbecause, for example, there is no param representing\n``ApplicationIntent=ReadOnly``.  Any key-value pairs provided in\n``Connection.extra`` will be added to the connection string.", "ret": null}, "fn_lc": [[138, 4], [172, 29]], "fn_var_ln": {"_conn_str": [[171, 12], [171, 26]], "conn_str": [[147, 12], [147, 20]], "database": [[154, 12], [154, 20]], "extra_exclude": [[164, 12], [164, 25]], "extra_params": [[165, 12], [165, 24]]}, "fn_var_occur": {"_conn_str": [["self", "_conn_str"], ["self", "_conn_str", "conn_str"], ["self", "_conn_str"]], "conn_str": [["conn_str", "self", "driver"], ["conn_str", "self", "dsn"], ["conn_str", "self", "connection", "host"], ["conn_str", "database"], ["conn_str", "self", "connection", "login"], ["conn_str", "self", "connection", "password"], ["conn_str", "self", "connection", "port"], ["conn_str", "k", "v"], ["self", "_conn_str", "conn_str"]], "database": [["database", "self", "database", "self", "connection", "schema"], ["conn_str", "database"]], "extra_exclude": [["extra_params", "k", "v", "k", "v", "self", "connection", "extra_dejson", "items", "k", "lower", "extra_exclude"]], "extra_params": [["extra_params", "k", "v", "k", "v", "self", "connection", "extra_dejson", "items", "k", "lower", "extra_exclude"], ["extra_params", "items"]]}, "name": "odbc_connection_string", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "_conn_str"], ["self", "driver"], ["conn_str", "self", "driver"], ["self", "dsn"], ["conn_str", "self", "dsn"], ["self", "connection", "host"], ["conn_str", "self", "connection", "host"], ["database", "self", "database", "self", "connection", "schema"], ["self", "connection", "login"], ["conn_str", "self", "connection", "login"], ["self", "connection", "password"], ["conn_str", "self", "connection", "password"], ["self", "connection", "port"], ["conn_str", "self", "connection", "port"], ["extra_params", "k", "v", "k", "v", "self", "connection", "extra_dejson", "items", "k", "lower", "extra_exclude"], ["self", "_conn_str", "conn_str"], ["self", "_conn_str"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "OdbcHook.odbc_connection_string", "ret_exprs": ["return self._conn_str"], "ret_type": "", "ret_type_p": [["str", 0.9144849174380698], ["Tuple[Tuple[int, ...]]", 0.08551508256193009]], "variables": {"_conn_str": "", "conn_str": "", "database": "", "extra_exclude": "", "extra_params": ""}, "variables_p": {"_conn_str": [["str", 1.0]], "conn_str": [["str", 1.0]], "database": [["float", 0.29147308289246204], ["int", 0.1859279032462578], ["Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]", 0.12898054924110702], ["str", 0.09257225537973503]], "extra_exclude": [["Set[str]", 0.40386146444315285], ["Dict[str, str]", 0.353790667916367], ["Dict[int, str]", 0.140305166666808], ["frozenset[str]", 0.10204270097367216]], "extra_params": [["Dict[str, List[Any]]", 0.4748893274277715], ["Dict[str, str]", 0.2986284385734826], ["Dict[int, str]", 0.13111054171583056], ["Dict[str, List[str]]", 0.09537169228291525]]}}, {"docstring": {"func": "Effective kwargs to be passed to ``pyodbc.connect``.", "long_descr": "The kwargs are merged from connection extra, ``connect_kwargs``, and\nthe hook's init arguments. Values received to the hook precede those\nfrom the connection.\n\nIf ``attrs_before`` is provided, keys and values are converted to int,\nas required by pyodbc.", "ret": null}, "fn_lc": [[175, 4], [194, 36]], "fn_var_ln": {"conn_connect_kwargs": [[185, 8], [185, 27]], "hook_connect_kwargs": [[186, 8], [186, 27]], "merged_connect_kwargs": [[187, 8], [187, 29]]}, "fn_var_occur": {"conn_connect_kwargs": [["conn_connect_kwargs", "self", "connection_extra_lower", "get"], ["merged_connect_kwargs", "merge_dicts", "conn_connect_kwargs", "hook_connect_kwargs"]], "hook_connect_kwargs": [["hook_connect_kwargs", "self", "_connect_kwargs"], ["merged_connect_kwargs", "merge_dicts", "conn_connect_kwargs", "hook_connect_kwargs"]], "merged_connect_kwargs": [["merged_connect_kwargs", "merge_dicts", "conn_connect_kwargs", "hook_connect_kwargs"], ["merged_connect_kwargs", "int", "k", "int", "v", "k", "v", "merged_connect_kwargs", "items"]]}, "name": "connect_kwargs", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["conn_connect_kwargs", "self", "connection_extra_lower", "get"], ["hook_connect_kwargs", "self", "_connect_kwargs"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "OdbcHook.connect_kwargs", "ret_exprs": ["return merged_connect_kwargs"], "ret_type": "builtins.dict", "ret_type_p": [["float", 0.11093891493759094], ["int", 0.09996860317014868], ["Callable", 0.0992732390933696], ["str", 0.09774451696926281]], "variables": {"conn_connect_kwargs": "", "hook_connect_kwargs": "", "merged_connect_kwargs": ""}, "variables_p": {"conn_connect_kwargs": [["Dict[str, Dict[str, str]]", 0.5087648627401676], ["dict", 0.3975348253921296], ["Dict[str, Union[Any, Any, Any, Any, Any, Any, Any, Any, Any]]", 0.0937003118677028]], "hook_connect_kwargs": [["int", 0.2023225892037959], ["Dict[str, bool]", 0.2003988046393407], ["Dict[str, int]", 0.19283501586142254], ["Set[str]", 0.10418679946000649], ["Dict[str, Union[Any, Any, Any, Any]]", 0.10220561533697854], ["Dict[str, str]", 0.10063046170693878], ["Dict[str, Any]", 0.09742071379151719]], "merged_connect_kwargs": [["Dict[int, float]", 0.31908081019908124]]}}, {"docstring": {"func": "Returns a pyodbc connection object.", "long_descr": null, "ret": null}, "fn_lc": [[196, 4], [199, 19]], "fn_var_ln": {"conn": [[198, 8], [198, 12]]}, "fn_var_occur": {"conn": [["conn", "pyodbc", "connect", "self", "odbc_connection_string", "self", "connect_kwargs"]]}, "name": "get_conn", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["conn", "pyodbc", "connect", "self", "odbc_connection_string", "self", "connect_kwargs"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "OdbcHook.get_conn", "ret_exprs": ["return conn"], "ret_type": "pyodbc.Connection", "ret_type_p": [["str", 0.19999999999999998], ["bool", 0.09999999999999999], ["pyspark.sql.SparkSession", 0.09999999999999999]], "variables": {"conn": ""}, "variables_p": {"conn": [["int", 0.5258431782494347], ["float", 0.08692462803151267]]}}, {"docstring": {"func": "URI invoked in :meth:`~airflow.providers.common.sql.hooks.sql.DbApiHook.get_sqlalchemy_engine`.", "long_descr": null, "ret": null}, "fn_lc": [[201, 4], [205, 18]], "fn_var_ln": {"quoted_conn_str": [[203, 8], [203, 23]], "uri": [[204, 8], [204, 11]]}, "fn_var_occur": {"quoted_conn_str": [["quoted_conn_str", "quote_plus", "self", "odbc_connection_string"], ["uri", "self", "sqlalchemy_scheme", "quoted_conn_str"]], "uri": [["uri", "self", "sqlalchemy_scheme", "quoted_conn_str"]]}, "name": "get_uri", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["quoted_conn_str", "quote_plus", "self", "odbc_connection_string"], ["uri", "self", "sqlalchemy_scheme", "quoted_conn_str"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "OdbcHook.get_uri", "ret_exprs": ["return uri"], "ret_type": "builtins.str", "ret_type_p": [["str", 0.19999999999999998], ["bool", 0.09999999999999999], ["pyspark.sql.SparkSession", 0.09999999999999999]], "variables": {"quoted_conn_str": "", "uri": ""}, "variables_p": {"quoted_conn_str": [["str", 0.8882814822798895], ["FrozenSet", 0.11171851772011042]], "uri": [["int", 0.7], ["Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]", 0.1], ["bool", 0.1], ["Type[str]", 0.1]]}}, {"docstring": {"func": "SQLAlchemy connection object.", "long_descr": null, "ret": null}, "fn_lc": [[207, 4], [213, 18]], "fn_var_ln": {"cnx": [[212, 8], [212, 11]], "engine": [[211, 8], [211, 14]]}, "fn_var_occur": {"cnx": [["cnx", "engine", "connect", "connect_kwargs"]], "engine": [["engine", "self", "get_sqlalchemy_engine", "engine_kwargs", "engine_kwargs"], ["cnx", "engine", "connect", "connect_kwargs"]]}, "name": "get_sqlalchemy_connection", "params": {"connect_kwargs": "dict | None", "engine_kwargs": "dict | None", "self": ""}, "params_descr": {"connect_kwargs": "", "engine_kwargs": "", "self": ""}, "params_occur": {"connect_kwargs": [["cnx", "engine", "connect", "connect_kwargs"]], "engine_kwargs": [["engine", "self", "get_sqlalchemy_engine", "engine_kwargs", "engine_kwargs"]], "self": [["engine", "self", "get_sqlalchemy_engine", "engine_kwargs", "engine_kwargs"]]}, "params_p": {"args": [], "connect_kwargs": [["float", 0.279588309097426], ["str", 0.18639220606495066], ["Tuple[int, int, int]", 0.12464238305661117], ["bool", 0.10294912751973265], ["int", 0.09319610303247533]], "engine_kwargs": [["str", 0.7150147653427913], ["float", 0.05986245089599481]], "kwargs": [], "self": []}, "q_name": "OdbcHook.get_sqlalchemy_connection", "ret_exprs": ["return cnx"], "ret_type": "typing.Any", "ret_type_p": [["str", 0.19999999999999998], ["bool", 0.09999999999999999], ["pyspark.sql.SparkSession", 0.09999999999999999]], "variables": {"cnx": "", "engine": ""}, "variables_p": {"cnx": [["int", 0.4057601001955138], ["float", 0.22741825532055418], ["Dict[str, int]", 0.18140722885594238], ["str", 0.08308797612008721]], "engine": [["int", 0.2980550901632909], ["float", 0.10730494409544043]]}}], "name": "OdbcHook", "q_name": "OdbcHook", "variables": {"DEFAULT_SQLALCHEMY_SCHEME": "", "conn_name_attr": "", "conn_type": "", "default_conn_name": "", "default_driver": "str | None", "hook_name": "", "supports_autocommit": ""}, "variables_p": {"DEFAULT_SQLALCHEMY_SCHEME": [["str", 0.4], ["int", 0.30000000000000004], ["List[Tuple[str, int]]", 0.1]], "conn_name_attr": [["str", 0.9999999984412052], ["Tuple[str, str, bool, str, str, str, str]", 8.316126869679678e-10], ["List[str]", 1.331690806861904e-10], ["Tuple[Any, Any]", 1.331690806861904e-10], ["bool", 1.3275060008743415e-10]], "conn_type": [["str", 0.19999999999999998], ["int", 0.19999999999999998], ["Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal]", 0.09999999999999999], ["Dict[str, str]", 0.09999999999999999], ["Tuple[Type[int], Type[float]]", 0.09999999999999999]], "default_conn_name": [["str", 0.9999999999999999]], "default_driver": [["str", 0.4], ["int", 0.30000000000000004], ["List[Tuple[str, int]]", 0.1]], "hook_name": [["str", 0.7], ["Optional[str]", 0.2], ["List[str]", 0.1]], "supports_autocommit": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]]}}], "funcs": [], "imports": ["__future__", "annotations", "typing", "Any", "urllib", "parse", "quote_plus", "pyodbc", "airflow", "providers", "common", "sql", "hooks", "sql", "DbApiHook", "airflow", "utils", "helpers", "merge_dicts", "airflow", "configuration", "conf"], "mod_var_ln": {}, "mod_var_occur": {}, "no_types_annot": {"D": 18, "I": 0, "U": 36}, "session_id": "L9Ez0B5a9g7LTW66IywXAYWyrhoWpVjVtFqioH65TkA", "set": null, "tc": [false, null], "type_annot_cove": 0.33, "typed_seq": "", "untyped_seq": "", "variables": {}, "variables_p": {}}}