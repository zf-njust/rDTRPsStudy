{"error": null, "response": {"classes": [{"cls_lc": [[41, 0], [51, 16]], "cls_var_ln": {"COLUMN_NAME": [[46, 4], [46, 15]], "DATABASE": [[51, 4], [51, 12]], "ORDINAL_POSITION": [[47, 4], [47, 20]], "SCHEMA": [[44, 4], [44, 10]], "TABLE_NAME": [[45, 4], [45, 14]], "UDT_NAME": [[49, 4], [49, 12]]}, "cls_var_occur": {"COLUMN_NAME": [], "DATABASE": [], "ORDINAL_POSITION": [], "SCHEMA": [], "TABLE_NAME": [], "UDT_NAME": []}, "funcs": [], "name": "ColumnIndex", "q_name": "ColumnIndex", "variables": {"COLUMN_NAME": "", "DATABASE": "", "ORDINAL_POSITION": "", "SCHEMA": "", "TABLE_NAME": "", "UDT_NAME": ""}, "variables_p": {"COLUMN_NAME": [["int", 0.4], ["Optional[str]", 0.2], ["List[str]", 0.2], ["str", 0.1]], "DATABASE": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "ORDINAL_POSITION": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "SCHEMA": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "TABLE_NAME": [["str", 0.9999999999999999]], "UDT_NAME": [["str", 0.7], ["Optional[str]", 0.2], ["List[str]", 0.1]]}}, {"cls_lc": [[58, 0], [78, 9]], "cls_var_ln": {"database": [[63, 4], [63, 12]], "fields": [[64, 4], [64, 10]], "schema": [[62, 4], [62, 10]], "table": [[61, 4], [61, 9]]}, "cls_var_occur": {"database": [], "fields": [], "schema": [], "table": []}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[66, 4], [78, 9]], "fn_var_ln": {"name": [[69, 8], [69, 12]]}, "fn_var_occur": {"name": [["name", "join", "part", "part", "self", "database", "database", "self", "schema", "schema", "self", "table", "part", "None"], ["Dataset", "namespace", "namespace", "name", "name", "facets", "SchemaDatasetFacet", "fields", "self", "fields", "len", "self", "fields"]]}, "name": "to_dataset", "params": {"database": "str | None", "namespace": "builtins.str", "schema": "str | None", "self": ""}, "params_descr": {"database": "", "namespace": "", "schema": "", "self": ""}, "params_occur": {"database": [["name", "join", "part", "part", "self", "database", "database", "self", "schema", "schema", "self", "table", "part", "None"]], "namespace": [["Dataset", "namespace", "namespace", "name", "name", "facets", "SchemaDatasetFacet", "fields", "self", "fields", "len", "self", "fields"]], "schema": [["name", "join", "part", "part", "self", "database", "database", "self", "schema", "schema", "self", "table", "part", "None"]], "self": [["name", "join", "part", "part", "self", "database", "database", "self", "schema", "schema", "self", "table", "part", "None"], ["Dataset", "namespace", "namespace", "name", "name", "facets", "SchemaDatasetFacet", "fields", "self", "fields", "len", "self", "fields"]]}, "params_p": {"args": [], "database": [["str", 0.4550330528879753], ["Iterable[Sequence[str]]", 0.10619017077653368], ["Union[str, bytes]", 0.09721360201874789], ["Union[str, Pattern]", 0.0837421727944439]], "kwargs": [], "namespace": [["bool", 0.2097844571120557], ["Type", 0.11080980344056178], ["Sequence[Any]", 0.08815290450844948]], "schema": [["str", 0.4550330528879753], ["Iterable[Sequence[str]]", 0.10619017077653368], ["Union[str, bytes]", 0.09721360201874789], ["Union[str, Pattern]", 0.0837421727944439]], "self": []}, "q_name": "TableSchema.to_dataset", "ret_exprs": ["return Dataset( namespace=namespace, name=name, facets={\"schema\": SchemaDatasetFacet(fields=self.fields)} if len(self.fields) > 0 else {},)"], "ret_type": "openlineage.client.run.Dataset", "ret_type_p": [["bool", 0.21810637616584977]], "variables": {"name": ""}, "variables_p": {"name": [["str", 0.6100235359200348], ["Dict[int, str]", 0.11030743804531921], ["Dict[str, Any]", 0.09740532583436745], ["Pattern[str]", 0.09354343145667103], ["Optional[str]", 0.08872026874360739]]}}], "name": "TableSchema", "q_name": "TableSchema", "variables": {"database": "str | None", "fields": "builtins.list[openlineage.client.facet.SchemaField]", "schema": "str | None", "table": "builtins.str"}, "variables_p": {"database": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "fields": [["Tuple[str]", 0.19999999999999998], ["List[str]", 0.19999999999999998], ["Tuple[str, str, str]", 0.19999999999999998], ["Tuple[str, str, str, str]", 0.09999999999999999], ["list", 0.09999999999999999], ["List[Tuple[str, Any]]", 0.09999999999999999], ["Tuple[str, str, str, str, str, str, str, str]", 0.09999999999999999]], "schema": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "table": [["str", 0.7000000000000001], ["Dict[str, List[str]]", 0.10000000000000002], ["Tuple[int, int]", 0.10000000000000002], ["list", 0.10000000000000002]]}}], "funcs": [{"docstring": {"func": "Query database for table schemas.", "long_descr": "Uses provided hook. Responsibility to provide queries for this function is on particular extractors.\nIf query for input or output table isn't provided, the query is skipped.", "ret": null}, "fn_lc": [[81, 0], [109, 36]], "fn_var_ln": {"in_datasets": [[103, 12], [103, 23]], "out_datasets": [[108, 12], [108, 24]]}, "fn_var_occur": {"in_datasets": [["in_datasets", "x", "to_dataset", "namespace", "database", "schema", "x", "parse_query_result", "cursor"], ["in_datasets", "out_datasets"]], "out_datasets": [["out_datasets", "x", "to_dataset", "namespace", "database", "schema", "x", "parse_query_result", "cursor"], ["in_datasets", "out_datasets"]]}, "name": "get_table_schemas", "params": {"database": "str | None", "hook": "airflow.hooks.base.BaseHook", "in_query": "str | None", "namespace": "builtins.str", "out_query": "str | None", "schema": "str | None"}, "params_descr": {"database": "", "hook": "", "in_query": "", "namespace": "", "out_query": "", "schema": ""}, "params_occur": {"database": [["in_datasets", "x", "to_dataset", "namespace", "database", "schema", "x", "parse_query_result", "cursor"], ["out_datasets", "x", "to_dataset", "namespace", "database", "schema", "x", "parse_query_result", "cursor"]], "hook": [["closing", "hook", "get_conn", "conn"]], "in_query": [["in_query", "out_query"], ["cursor", "execute", "in_query"]], "namespace": [["in_datasets", "x", "to_dataset", "namespace", "database", "schema", "x", "parse_query_result", "cursor"], ["out_datasets", "x", "to_dataset", "namespace", "database", "schema", "x", "parse_query_result", "cursor"]], "out_query": [["in_query", "out_query"], ["cursor", "execute", "out_query"]], "schema": [["in_datasets", "x", "to_dataset", "namespace", "database", "schema", "x", "parse_query_result", "cursor"], ["out_datasets", "x", "to_dataset", "namespace", "database", "schema", "x", "parse_query_result", "cursor"]]}, "params_p": {"args": [], "database": [["Iterable[int]", 0.09915154123419388], ["int", 0.09911713637694719], ["bool", 0.09693952651262237], ["str", 0.09648477785309979]], "hook": [["int", 0.308863355387908], ["sqlalchemy.orm.Session", 0.11125550797659682]], "in_query": [["str", 0.18524231751283826], ["bool", 0.13030483230057016], ["List[str]", 0.13030483230057016], ["list", 0.09055190208982154]], "kwargs": [], "namespace": [["Iterable[int]", 0.09915154123419388], ["int", 0.09911713637694719], ["bool", 0.09693952651262237], ["str", 0.09648477785309979]], "out_query": [["str", 0.18524231751283826], ["bool", 0.13030483230057016], ["List[str]", 0.13030483230057016], ["list", 0.09055190208982154]], "schema": [["Iterable[int]", 0.09915154123419388], ["int", 0.09911713637694719], ["bool", 0.09693952651262237], ["str", 0.09648477785309979]]}, "q_name": "get_table_schemas", "ret_exprs": ["return [], []", "return in_datasets, out_datasets"], "ret_type": "builtins.tuple[builtins.list[openlineage.client.run.Dataset], builtins.list[openlineage.client.run.Dataset]]", "ret_type_p": [["bool", 0.9999999999999999]], "variables": {"in_datasets": "", "out_datasets": ""}, "variables_p": {"in_datasets": [["int", 0.29812508229925716], ["bytes", 0.12906018435882707], ["str", 0.10232231890916271], ["list", 0.07844501151092038]], "out_datasets": [["List[str]", 0.11703980877204785], ["Tuple[Literal, Literal]", 0.11267778053957951], ["Tuple[Literal, Literal, Literal, Literal]", 0.10107731030853942], ["Dict[str, Any]", 0.09305510945764646], ["List[Union[Any, int]]", 0.07987774067757665], ["dict", 0.07694414545025688], ["list", 0.07657067332295392]]}}, {"docstring": {"func": "Fetch results from DB-API 2.0 cursor and creates list of table schemas.", "long_descr": "For each row it creates :class:`TableSchema`.", "ret": null}, "fn_lc": [[112, 0], [145, 33]], "fn_var_ln": {"columns": [[118, 4], [118, 11]], "fields": [[143, 8], [143, 21]], "ordinal_position": [[127, 8], [127, 24]], "schemas": [[117, 4], [117, 11]], "table_column": [[122, 8], [122, 20]], "table_database": [[131, 12], [131, 26]], "table_key": [[142, 8], [142, 17]], "table_name": [[121, 8], [121, 18]], "table_schema_name": [[120, 8], [120, 25]]}, "fn_var_occur": {"columns": [["columns", "builtins", "dict", "defaultdict", "list"], ["columns", "table_key", "append", "ordinal_position", "table_column"], ["schema", "fields", "x", "_", "x", "sorted", "columns", "table_key"]], "fields": [["schemas", "table_key", "TableSchema", "table", "table_name", "schema", "table_schema_name", "database", "table_database", "fields"], ["schema", "fields", "x", "_", "x", "sorted", "columns", "table_key"]], "ordinal_position": [["ordinal_position", "row", "ColumnIndex", "ORDINAL_POSITION"], ["columns", "table_key", "append", "ordinal_position", "table_column"]], "schemas": [["schemas", "builtins", "dict"], ["schemas", "table_key", "TableSchema", "table", "table_name", "schema", "table_schema_name", "database", "table_database", "fields"], ["schemas", "values"], ["list", "schemas", "values"]], "table_column": [["table_column", "openlineage", "client", "facet", "SchemaField", "SchemaField", "name", "row", "ColumnIndex", "COLUMN_NAME", "type", "row", "ColumnIndex", "UDT_NAME", "description", "None"], ["columns", "table_key", "append", "ordinal_position", "table_column"]], "table_database": [["table_database", "row", "ColumnIndex", "DATABASE"], ["table_database", "None"], ["table_key", "join", "filter", "None", "table_database", "table_schema_name", "table_name"], ["schemas", "table_key", "TableSchema", "table", "table_name", "schema", "table_schema_name", "database", "table_database", "fields"]], "table_key": [["table_key", "join", "filter", "None", "table_database", "table_schema_name", "table_name"], ["schemas", "table_key", "TableSchema", "table", "table_name", "schema", "table_schema_name", "database", "table_database", "fields"], ["columns", "table_key", "append", "ordinal_position", "table_column"], ["table_key", "join", "filter", "None", "schema", "database", "schema", "schema", "schema", "table"], ["schema", "fields", "x", "_", "x", "sorted", "columns", "table_key"]], "table_name": [["table_name", "builtins", "str", "row", "ColumnIndex", "TABLE_NAME"], ["table_key", "join", "filter", "None", "table_database", "table_schema_name", "table_name"], ["schemas", "table_key", "TableSchema", "table", "table_name", "schema", "table_schema_name", "database", "table_database", "fields"]], "table_schema_name": [["table_schema_name", "builtins", "str", "row", "ColumnIndex", "SCHEMA"], ["table_key", "join", "filter", "None", "table_database", "table_schema_name", "table_name"], ["schemas", "table_key", "TableSchema", "table", "table_name", "schema", "table_schema_name", "database", "table_database", "fields"]]}, "name": "parse_query_result", "params": {"cursor": ""}, "params_descr": {"cursor": ""}, "params_occur": {"cursor": [["cursor", "fetchall"]]}, "params_p": {"args": [], "cursor": [["str", 0.30901239016528714], ["int", 0.16780279426094163], ["Union[int, float]", 0.10370426136804364]], "kwargs": []}, "q_name": "parse_query_result", "ret_exprs": ["return list(schemas.values())"], "ret_type": "builtins.list[TableSchema]", "ret_type_p": [["List[str]", 0.20366315351778264], ["str", 0.09481707699766971]], "variables": {"columns": "builtins.dict", "fields": "", "ordinal_position": "", "schemas": "builtins.dict", "table_column": "openlineage.client.facet.SchemaField", "table_database": "", "table_key": "", "table_name": "builtins.str", "table_schema_name": "builtins.str"}, "variables_p": {"columns": [["dict", 1.0]], "fields": [["List[str]", 0.46149286367619674], ["str", 0.19787316622538315], ["List[Tuple[Any, Any]]", 0.16277845998439297]], "ordinal_position": [["List[Dict[str, Any]]", 0.1888307057963875], ["int", 0.11386832631941866], ["list", 0.11289158310487987], ["str", 0.11177931144652954], ["Dict[int, Set[Any]]", 0.08519696473322821]], "schemas": [["dict", 0.9159735125953383]], "table_column": [["Dict[str, Dict[str, Any]]", 0.19030371644750876], ["Dict[str, str]", 0.10610994143293537], ["Dict[str, Union[Any, Any]]", 0.0959493566931165]], "table_database": [["str", 0.0900390106502639]], "table_key": [["str", 0.9999999999999998]], "table_name": [["str", 0.9999999999999999]], "table_schema_name": [["str", 1.0]]}}, {"docstring": {"func": "Creates query for getting table schemas from information schema.", "long_descr": null, "ret": null}, "fn_lc": [[148, 0], [169, 5]], "fn_var_ln": {"filter_clauses": [[165, 8], [165, 22]], "information_schema_table": [[162, 8], [162, 32]], "metadata": [[156, 4], [156, 12]], "schema": [[161, 12], [161, 18]], "select_statements": [[157, 4], [157, 21]], "table_name": [[159, 16], [159, 26]]}, "fn_var_occur": {"filter_clauses": [["filter_clauses", "create_filter_clauses", "schema_mapping", "information_schema_table", "uppercase_names"], ["select_statements", "append", "information_schema_table", "select", "filter", "filter_clauses"]], "information_schema_table": [["information_schema_table", "Table", "table_name", "metadata", "Column", "column", "column", "columns", "schema", "schema"], ["filter_clauses", "create_filter_clauses", "schema_mapping", "information_schema_table", "uppercase_names"], ["select_statements", "append", "information_schema_table", "select", "filter", "filter_clauses"]], "metadata": [["metadata", "MetaData", "sqlalchemy_engine"], ["information_schema_table", "Table", "table_name", "metadata", "Column", "column", "column", "columns", "schema", "schema"]], "schema": [["schema", "table_name", "information_schema_table_name", "split"], ["schema", "db", "schema"], ["information_schema_table", "Table", "table_name", "metadata", "Column", "column", "column", "columns", "schema", "schema"]], "select_statements": [["select_statements", "append", "information_schema_table", "select", "filter", "filter_clauses"], ["str", "union_all", "select_statements", "compile", "sqlalchemy_engine", "compile_kwargs", "True"]], "table_name": [["schema", "table_name", "information_schema_table_name", "split"], ["information_schema_table", "Table", "table_name", "metadata", "Column", "column", "column", "columns", "schema", "schema"]]}, "name": "create_information_schema_query", "params": {"columns": "builtins.list[builtins.str]", "information_schema_table_name": "builtins.str", "sqlalchemy_engine": "Engine | None", "tables_hierarchy": "TablesHierarchy", "uppercase_names": "builtins.bool"}, "params_descr": {"columns": "", "information_schema_table_name": "", "sqlalchemy_engine": "", "tables_hierarchy": "", "uppercase_names": ""}, "params_occur": {"columns": [["information_schema_table", "Table", "table_name", "metadata", "Column", "column", "column", "columns", "schema", "schema"]], "information_schema_table_name": [["schema", "table_name", "information_schema_table_name", "split"]], "sqlalchemy_engine": [["metadata", "MetaData", "sqlalchemy_engine"], ["str", "union_all", "select_statements", "compile", "sqlalchemy_engine", "compile_kwargs", "True"]], "tables_hierarchy": [["tables_hierarchy", "items"]], "uppercase_names": [["filter_clauses", "create_filter_clauses", "schema_mapping", "information_schema_table", "uppercase_names"]]}, "params_p": {"args": [], "columns": [["str", 0.11177447606064847], ["int", 0.11080519150992614], ["List[Tuple[int, int]]", 0.10907160923428849], ["Iterable[str]", 0.10489963745017968], ["Optional[Sequence[str]]", 0.09722277796067073], ["bool", 0.08728768043525793], ["List[Dict[str, Any]]", 0.08561399299894741], ["Sequence[str]", 0.0824129071562218]], "information_schema_table_name": [["str", 0.79253093670733], ["Optional[str]", 0.2074690632926701]], "kwargs": [], "sqlalchemy_engine": [["str", 0.29712267608000664], ["Optional[str]", 0.11075681466928469], ["Optional[List[str]]", 0.08986787248763754]], "tables_hierarchy": [["dict", 0.1842289837500562], ["Dict[str, Dict[str, str]]", 0.143597207340527], ["Optional[dict]", 0.11988856154736727], ["Dict[str, int]", 0.09425696954625284], ["bool", 0.08776900484014784]], "uppercase_names": [["str", 0.5079347604215857], ["Optional[Union[int, Any]]", 0.1903518233898646], ["Optional[str]", 0.11136159279868509]]}, "q_name": "create_information_schema_query", "ret_exprs": ["return str( union_all(*select_statements).compile(sqlalchemy_engine, compile_kwargs={\"literal_binds\": True}))"], "ret_type": "builtins.str", "ret_type_p": [["str", 0.61353623146164]], "variables": {"filter_clauses": "", "information_schema_table": "", "metadata": "", "schema": "", "select_statements": "", "table_name": ""}, "variables_p": {"filter_clauses": [["str", 0.3226431893908517], ["list", 0.12070233241790293], ["Optional[str]", 0.08674571665229244], ["dict", 0.07819693022976366]], "information_schema_table": [["List[Dict[str, Any]]", 0.190455516293259], ["list", 0.1323030502573811], ["Tuple[Type[int]]", 0.10807909975322467], ["List[Optional[str]]", 0.09988829931283046], ["List[Tuple[str, str, str]]", 0.09631847357874752], ["Set[str]", 0.09492838473627206], ["Dict[str, int]", 0.09352270174082307], ["qualipy.refleccolumn.Column", 0.092302833512487], ["str", 0.09220164081497535]], "metadata": [["dict", 0.5101791447730476], ["Tuple[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any]", 0.11378111681005604], ["list", 0.10586409126979042], ["Union[Literal, str]", 0.08850327597581467]], "schema": [["str", 0.30962480896637307], ["List[str]", 0.1819699618898667], ["Union[Literal, Literal]", 0.17278968085192672], ["Dict[str, str]", 0.15827457787468283], ["dict", 0.08066249981560085]], "select_statements": [["list", 0.685398957568925], ["Dict[str, Any]", 0.12392067915692859], ["str", 0.1030280974262302]], "table_name": [["str", 0.6917248219581806], ["Set[str]", 0.1177246134377852], ["list", 0.1049378667370792], ["Optional[str]", 0.08561269786695487]]}}, {"docstring": {"func": "Creates comprehensive filter clauses for all tables in one database.", "long_descr": null, "ret": null}, "fn_lc": [[172, 0], [192, 25]], "fn_var_ln": {"filter_clause": [[190, 12], [190, 25]], "filter_clauses": [[184, 4], [184, 18]]}, "fn_var_occur": {"filter_clause": [["filter_clause", "information_schema_table", "c", "table_name", "in_", "name", "upper", "uppercase_names", "name", "name", "tables"], ["filter_clause", "and_", "information_schema_table", "c", "table_schema", "schema", "filter_clause"], ["filter_clauses", "append", "filter_clause"]], "filter_clauses": [["filter_clauses", "append", "filter_clause"]]}, "name": "create_filter_clauses", "params": {"information_schema_table": "sqlalchemy.Table", "schema_mapping": "builtins.dict", "uppercase_names": "builtins.bool"}, "params_descr": {"information_schema_table": "`sqlalchemy.Table` instance used to construct clauses\nFor most SQL dbs it contains `table_name` and `table_schema` columns,\ntherefore it is expected the table has them defined.", "schema_mapping": "a dictionary of schema names and list of tables in each", "uppercase_names": "if True use schema and table names uppercase"}, "params_occur": {"information_schema_table": [["filter_clause", "information_schema_table", "c", "table_name", "in_", "name", "upper", "uppercase_names", "name", "name", "tables"], ["filter_clause", "and_", "information_schema_table", "c", "table_schema", "schema", "filter_clause"]], "schema_mapping": [["schema_mapping", "items"]], "uppercase_names": [["filter_clause", "information_schema_table", "c", "table_name", "in_", "name", "upper", "uppercase_names", "name", "name", "tables"]]}, "params_p": {"args": [], "information_schema_table": [["str", 0.398605859150843], ["Optional[str]", 0.2062815216100889], ["Dict[str, str]", 0.10227617651815414]], "kwargs": [], "schema_mapping": [["dict", 0.3657974165016153], ["Dict[str, str]", 0.18495099768331164], ["Iterable[str]", 0.11744856343062565], ["int", 0.08564410255485147], ["bool", 0.08238979999162585], ["Dict[str, Any]", 0.0805715658761425]], "uppercase_names": [["str", 0.3972628602244858], ["Optional[str]", 0.20350963653680157], ["Dict[str, str]", 0.10391671143043427], ["sqlalchemy.sql.schema.Table", 0.0996478249211101]]}, "q_name": "create_filter_clauses", "ret_exprs": ["return filter_clauses"], "ret_type": "sqlalchemy.sql.ClauseElement", "ret_type_p": [["bool", 0.2833842657298055], ["Optional[Any]", 0.18792750422201715], ["float", 0.14363246801798848]], "variables": {"filter_clause": "", "filter_clauses": ""}, "variables_p": {"filter_clause": [["list", 0.11068519888283387], ["Dict[str, str]", 0.08071528472277743]], "filter_clauses": [["list", 0.4080379167542376], ["str", 0.2410716629393965], ["Dict[str, str]", 0.09223916468444351], ["List[str]", 0.07669075059356933], ["Dict[str, Any]", 0.07453604562645015]]}}], "imports": ["__future__", "annotations", "logging", "collections", "defaultdict", "contextlib", "closing", "enum", "IntEnum", "typing", "TYPE_CHECKING", "Dict", "List", "Optional", "attrs", "define", "sqlalchemy", "Column", "MetaData", "Table", "and_", "union_all", "openlineage", "client", "facet", "SchemaDatasetFacet", "SchemaField", "openlineage", "client", "run", "Dataset", "sqlalchemy", "engine", "Engine", "sqlalchemy", "sql", "ClauseElement", "airflow", "hooks", "base", "BaseHook"], "mod_var_ln": {"TablesHierarchy": [[54, 0], [54, 15]], "logger": [[38, 0], [38, 6]]}, "mod_var_occur": {"TablesHierarchy": [], "logger": []}, "no_types_annot": {"D": 31, "I": 0, "U": 24}, "session_id": "xiBamwVFERkqsiCLv2GI8abt4BXhbjn48g6zSlpJKOo", "set": null, "tc": [false, null], "type_annot_cove": 0.56, "typed_seq": "", "untyped_seq": "", "variables": {"TablesHierarchy": "", "logger": ""}, "variables_p": {"TablesHierarchy": [["str", 0.7000000000000001], ["Dict[str, List[str]]", 0.10000000000000002], ["Tuple[int, int]", 0.10000000000000002], ["list", 0.10000000000000002]], "logger": [["logging.Logger", 0.9999999999999999]]}}}