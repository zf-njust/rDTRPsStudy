{"error": null, "response": {"classes": [{"cls_lc": [[136, 0], [155, 33]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[143, 4], [145, 32]], "fn_var_ln": {"jmespath_queries": [[144, 8], [144, 29]], "response": [[145, 8], [145, 21]]}, "fn_var_occur": {"jmespath_queries": [["self", "jmespath_queries", "jmespath_queries"]], "response": [["self", "response", "response"]]}, "name": "__init__", "params": {"jmespath_queries": "builtins.list[builtins.str]", "response": "builtins.dict[builtins.str, typing.Any]", "self": ""}, "params_descr": {"jmespath_queries": "", "response": "", "self": ""}, "params_occur": {"jmespath_queries": [["self", "jmespath_queries", "jmespath_queries"]], "response": [["self", "response", "response"]], "self": [["self", "jmespath_queries", "jmespath_queries"], ["self", "response", "response"]]}, "params_p": {"args": [], "jmespath_queries": [["str", 0.10153650840785504], ["Optional[Dict]", 0.09446561457699439], ["Dict[str, str]", 0.09329407135659407]], "kwargs": [], "response": [["Dict[str, Any]", 0.20948788541817182], ["str", 0.19123175234952705], ["Optional[str]", 0.12066074451113792], ["bool", 0.1138003787927955], ["bytes", 0.0859050347740718], ["int", 0.0859050347740718]], "self": []}, "q_name": "_LazyStatusFormatter.__init__", "ret_exprs": [], "ret_type": "", "variables": {"jmespath_queries": "", "response": ""}, "variables_p": {"jmespath_queries": [["str", 0.7264886473770601], ["bool", 0.10417541794759726], ["int", 0.0989332578397759], ["Dict[int, Any]", 0.07040267683556685]], "response": [["Dict[str, str]", 0.22505426632006625], ["Dict[str, Optional[str]]", 0.07243731591314004], ["Dict[str, Any]", 0.06833231961315704], ["str", 0.0659288966346031]]}}, {"docstring": {"func": "Loop through the args list and generate a string containing values from the waiter response.", "long_descr": null, "ret": null}, "fn_lc": [[147, 4], [155, 33]], "fn_var_ln": {"value": [[151, 12], [151, 17]], "values": [[149, 8], [149, 14]]}, "fn_var_occur": {"value": [["value", "jmespath", "search", "query", "self", "response"], ["value", "None", "value"], ["values", "append", "str", "value"]], "values": [["values", "append", "str", "value"], ["join", "values"]]}, "name": "__str__", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "jmespath_queries"], ["value", "jmespath", "search", "query", "self", "response"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "_LazyStatusFormatter.__str__", "ret_exprs": ["return \" - \".join(values)"], "ret_type": "", "ret_type_p": [["str", 0.21966474267986347], ["Type[T]", 0.20680689628749077], ["dict", 0.09847008121045182], ["int", 0.09498102010990674]], "variables": {"value": "", "values": ""}, "variables_p": {"value": [["int", 0.0973949905840488], ["str", 0.07576411227016974]], "values": [["list", 0.44912357621202925], ["str", 0.28413750381789815], ["List[str]", 0.2667389199700726]]}}], "name": "_LazyStatusFormatter", "q_name": "_LazyStatusFormatter", "variables": {}, "variables_p": {}}], "funcs": [{"docstring": {"func": "Use a boto waiter to poll an AWS service for the specified state.", "long_descr": "Although this function uses boto waiters to poll the state of the\nservice, it logs the response of the service after every attempt,\nwhich is not currently supported by boto waiters.", "ret": null}, "fn_lc": [[32, 0], [81, 36]], "fn_var_ln": {"attempt": [[66, 4], [66, 11]], "log": [[65, 4], [65, 7]]}, "fn_var_occur": {"attempt": [["attempt", "waiter_max_attempts"]], "log": [["log", "logging", "getLogger", "__name__"], ["log", "error", "failure_message", "_LazyStatusFormatter", "status_args", "error", "last_response"], ["log", "info", "status_message", "_LazyStatusFormatter", "status_args", "error", "last_response"]]}, "name": "wait", "params": {"args": "builtins.dict[builtins.str, typing.Any]", "failure_message": "builtins.str", "status_args": "builtins.list[builtins.str]", "status_message": "builtins.str", "waiter": "botocore.waiter.Waiter", "waiter_delay": "builtins.int", "waiter_max_attempts": "builtins.int"}, "params_descr": {"args": "The arguments to pass to the waiter.", "failure_message": "The message to log if a failure state is reached.", "status_args": "A list containing the JMESPath queries to retrieve status information from\nthe waiter response.\ne.g.\nresponse = {\"Cluster\": {\"state\": \"CREATING\"}}\nstatus_args = [\"Cluster.state\"]\n\nresponse = {\n\"Clusters\": [{\"state\": \"CREATING\", \"details\": \"User initiated.\"},]\n}\nstatus_args = [\"Clusters[0].state\", \"Clusters[0].details\"]", "status_message": "The message logged when printing the status of the service.", "waiter": "The boto waiter to use.", "waiter_delay": "The amount of time in seconds to wait between attempts.", "waiter_max_attempts": "The maximum number of attempts to be made."}, "params_occur": {"args": [["waiter", "wait", "args", "WaiterConfig"]], "failure_message": [["log", "error", "failure_message", "_LazyStatusFormatter", "status_args", "error", "last_response"], ["AirflowException", "failure_message", "error"]], "status_args": [["log", "error", "failure_message", "_LazyStatusFormatter", "status_args", "error", "last_response"], ["log", "info", "status_message", "_LazyStatusFormatter", "status_args", "error", "last_response"]], "status_message": [["log", "info", "status_message", "_LazyStatusFormatter", "status_args", "error", "last_response"]], "waiter": [["waiter", "wait", "args", "WaiterConfig"]], "waiter_delay": [["time", "sleep", "waiter_delay"]], "waiter_max_attempts": [["attempt", "waiter_max_attempts"]]}, "params_p": {"args": [], "failure_message": [["str", 0.28807144696381215], ["bool", 0.17724514527118523], ["int", 0.1455616167519494], ["Callable[[Any], str]", 0.09536407151834148]], "kwargs": [], "status_args": [["str", 0.44264310444922955], ["int", 0.10121550855800393], ["Optional[float]", 0.09122827739855331]], "status_message": [["bool", 0.39752838750600594], ["str", 0.3410038918581766]], "waiter": [["List[Type]", 0.2980536061936448], ["Optional[float]", 0.11229067113699844], ["Callable", 0.10231399992183186], ["Dict[str, float]", 0.10231399992183186], ["tuple", 0.09565519617235556], ["bool", 0.08267722595229947]], "waiter_delay": [["bool", 0.45978241305206047], ["float", 0.36356943211079545]], "waiter_max_attempts": [["bool", 0.45978241305206047], ["float", 0.36356943211079545]]}, "q_name": "wait", "ret_exprs": [], "ret_type": "None", "variables": {"attempt": "", "log": ""}, "variables_p": {"attempt": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["str", 0.1]], "log": [["logging.Logger", 0.7930692660890474], ["nucypher.utilities.logging.Logger", 0.11922020442407158], ["rotkehlchen.logging.RotkehlchenLogsAdapter", 0.08771052948688128]]}}, {"docstring": {"func": "Use an async boto waiter to poll an AWS service for the specified state.", "long_descr": "Although this function uses boto waiters to poll the state of the\nservice, it logs the response of the service after every attempt,\nwhich is not currently supported by boto waiters.", "ret": null}, "fn_lc": [[84, 0], [133, 45]], "fn_var_ln": {"attempt": [[118, 4], [118, 11]], "log": [[117, 4], [117, 7]]}, "fn_var_occur": {"attempt": [["attempt", "waiter_max_attempts"]], "log": [["log", "logging", "getLogger", "__name__"], ["log", "error", "failure_message", "_LazyStatusFormatter", "status_args", "error", "last_response"], ["log", "info", "status_message", "_LazyStatusFormatter", "status_args", "error", "last_response"]]}, "name": "async_wait", "params": {"args": "builtins.dict[builtins.str, typing.Any]", "failure_message": "builtins.str", "status_args": "builtins.list[builtins.str]", "status_message": "builtins.str", "waiter": "botocore.waiter.Waiter", "waiter_delay": "builtins.int", "waiter_max_attempts": "builtins.int"}, "params_descr": {"args": "The arguments to pass to the waiter.", "failure_message": "The message to log if a failure state is reached.", "status_args": "A list containing the JMESPath queries to retrieve status information from\nthe waiter response.\ne.g.\nresponse = {\"Cluster\": {\"state\": \"CREATING\"}}\nstatus_args = [\"Cluster.state\"]\n\nresponse = {\n\"Clusters\": [{\"state\": \"CREATING\", \"details\": \"User initiated.\"},]\n}\nstatus_args = [\"Clusters[0].state\", \"Clusters[0].details\"]", "status_message": "The message logged when printing the status of the service.", "waiter": "The boto waiter to use.", "waiter_delay": "The amount of time in seconds to wait between attempts.", "waiter_max_attempts": "The maximum number of attempts to be made."}, "params_occur": {"args": [["waiter", "wait", "args", "WaiterConfig"]], "failure_message": [["log", "error", "failure_message", "_LazyStatusFormatter", "status_args", "error", "last_response"], ["AirflowException", "failure_message", "error"]], "status_args": [["log", "error", "failure_message", "_LazyStatusFormatter", "status_args", "error", "last_response"], ["log", "info", "status_message", "_LazyStatusFormatter", "status_args", "error", "last_response"]], "status_message": [["log", "info", "status_message", "_LazyStatusFormatter", "status_args", "error", "last_response"]], "waiter": [["waiter", "wait", "args", "WaiterConfig"]], "waiter_delay": [["asyncio", "sleep", "waiter_delay"]], "waiter_max_attempts": [["attempt", "waiter_max_attempts"]]}, "params_p": {"args": [], "failure_message": [["str", 0.28807144696381215], ["bool", 0.17724514527118523], ["int", 0.1455616167519494], ["Callable[[Any], str]", 0.09536407151834148]], "kwargs": [], "status_args": [["str", 0.44264310444922955], ["int", 0.10121550855800393], ["Optional[float]", 0.09122827739855331]], "status_message": [["bool", 0.39752838750600594], ["str", 0.3410038918581766]], "waiter": [["List[Type]", 0.2980536061936448], ["Optional[float]", 0.11229067113699844], ["Callable", 0.10231399992183186], ["Dict[str, float]", 0.10231399992183186], ["tuple", 0.09565519617235556], ["bool", 0.08267722595229947]], "waiter_delay": [["bool", 0.45978241305206047], ["float", 0.36356943211079545]], "waiter_max_attempts": [["bool", 0.45978241305206047], ["float", 0.36356943211079545]]}, "q_name": "async_wait", "ret_exprs": [], "ret_type": "", "variables": {"attempt": "", "log": ""}, "variables_p": {"attempt": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["str", 0.1]], "log": [["logging.Logger", 0.7930692660890474], ["nucypher.utilities.logging.Logger", 0.11922020442407158], ["rotkehlchen.logging.RotkehlchenLogsAdapter", 0.08771052948688128]]}}], "imports": ["__future__", "annotations", "asyncio", "logging", "time", "typing", "Any", "jmespath", "botocore", "exceptions", "WaiterError", "botocore", "waiter", "Waiter", "airflow", "exceptions", "AirflowException"], "mod_var_ln": {}, "mod_var_occur": {}, "no_types_annot": {"D": 15, "I": 0, "U": 11}, "session_id": "IoSPZag6-JnfQil_pwWe214s1GazfwbYX17m06g0bnM", "set": null, "tc": [false, null], "type_annot_cove": 0.58, "typed_seq": "", "untyped_seq": "", "variables": {}, "variables_p": {}}}