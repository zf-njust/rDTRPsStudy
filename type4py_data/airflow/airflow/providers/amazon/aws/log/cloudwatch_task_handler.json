{"error": null, "response": {"classes": [{"cls_lc": [[31, 0], [124, 50]], "cls_var_ln": {"trigger_should_wrap": [[43, 4], [43, 23]]}, "cls_var_occur": {"trigger_should_wrap": []}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[45, 4], [52, 27]], "fn_var_ln": {"closed": [[52, 8], [52, 19]], "handler": [[49, 8], [49, 20]], "log_group": [[50, 8], [50, 22]], "region_name": [[51, 8], [51, 24]], "split_arn": [[47, 8], [47, 17]]}, "fn_var_occur": {"closed": [["self", "closed", "False"]], "handler": [["self", "handler", "None"]], "log_group": [["self", "log_group", "split_arn"]], "region_name": [["self", "region_name", "split_arn"]], "split_arn": [["split_arn", "log_group_arn", "split"], ["self", "log_group", "split_arn"], ["self", "region_name", "split_arn"]]}, "name": "__init__", "params": {"base_log_folder": "builtins.str", "filename_template": "str | None", "log_group_arn": "builtins.str", "self": ""}, "params_descr": {"base_log_folder": "", "filename_template": "", "log_group_arn": "", "self": ""}, "params_occur": {"base_log_folder": [["super", "__init__", "base_log_folder", "filename_template"]], "filename_template": [["super", "__init__", "base_log_folder", "filename_template"]], "log_group_arn": [["split_arn", "log_group_arn", "split"]], "self": [["self", "handler", "None"], ["self", "log_group", "split_arn"], ["self", "region_name", "split_arn"], ["self", "closed", "False"]]}, "params_p": {"args": [], "base_log_folder": [["Optional[str]", 0.416126354821188], ["str", 0.19378703101816203], ["Optional[Dict]", 0.09819010795182206], ["List[str]", 0.09709772957197435], ["Union[str, IO]", 0.09545716666660098]], "filename_template": [["Optional[str]", 0.416126354821188], ["str", 0.19378703101816203], ["Optional[Dict]", 0.09819010795182206], ["List[str]", 0.09709772957197435], ["Union[str, IO]", 0.09545716666660098]], "kwargs": [], "log_group_arn": [["bool", 0.4964626265917298], ["str", 0.12346216136224986], ["raiden.utils.Address", 0.10287441123135016], ["BinaryIO", 0.09127387555184827]], "self": []}, "q_name": "CloudwatchTaskHandler.__init__", "ret_exprs": [], "ret_type": "", "variables": {"closed": "", "handler": "", "log_group": "", "region_name": "", "split_arn": ""}, "variables_p": {"closed": [["dict", 0.6169768722014776], ["Set[str]", 0.1902812595168529]], "handler": [["bool", 0.29739038425909714], ["str", 0.20063420887364605], ["Type[Dict[Any, Any]]", 0.10493548260651384], ["Tuple[Any, Dict[str, Any]]", 0.10267336084452491], ["float", 0.09662791989104953]], "log_group": [["str", 0.9999999999999999]], "region_name": [["str", 0.8830352437551482], ["list", 0.11696475624485164]], "split_arn": [["float", 0.13291003172864943], ["str", 0.12634492089498267], ["T", 0.12471478506351942], ["Tuple[Any, Any]", 0.09160428994107578], ["int", 0.09048221221456187]]}}, {"docstring": {"func": "Returns AwsLogsHook.", "long_descr": null, "ret": null}, "fn_lc": [[55, 4], [59, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "hook", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["AwsLogsHook", "aws_conn_id", "conf", "get", "region_name", "self", "region_name"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "CloudwatchTaskHandler.hook", "ret_exprs": ["return AwsLogsHook( aws_conn_id=conf.get(\"logging\", \"REMOTE_LOG_CONN_ID\"), region_name=self.region_name)"], "ret_type": "", "ret_type_p": [["str", 0.5853457469640203], ["Optional[dict]", 0.09169712822683816]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[61, 4], [63, 73]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "_render_filename", "params": {"self": "", "ti": "", "try_number": ""}, "params_descr": {"self": "", "ti": "", "try_number": ""}, "params_occur": {"self": [], "ti": [["super", "_render_filename", "ti", "try_number", "replace"]], "try_number": [["super", "_render_filename", "ti", "try_number", "replace"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "ti": [["str", 0.6720919799059938], ["Dict[str, str]", 0.10329999416567175], ["int", 0.08419312626409724]], "try_number": [["str", 0.6720919799059938], ["Dict[str, str]", 0.10329999416567175], ["int", 0.08419312626409724]]}, "q_name": "CloudwatchTaskHandler._render_filename", "ret_exprs": ["return super()._render_filename(ti, try_number).replace(\":\", \"_\")"], "ret_type": "", "ret_type_p": [["str", 1.0]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[65, 4], [72, 9]], "fn_var_ln": {"handler": [[67, 8], [67, 20]]}, "fn_var_occur": {"handler": [["self", "handler", "watchtower", "CloudWatchLogHandler", "log_group_name", "self", "log_group", "log_stream_name", "self", "_render_filename", "ti", "ti", "try_number", "use_queues", "getattr", "ti", "False", "boto3_client", "self", "hook", "get_conn"]]}, "name": "set_context", "params": {"self": "", "ti": ""}, "params_descr": {"self": "", "ti": ""}, "params_occur": {"self": [["self", "handler", "watchtower", "CloudWatchLogHandler", "log_group_name", "self", "log_group", "log_stream_name", "self", "_render_filename", "ti", "ti", "try_number", "use_queues", "getattr", "ti", "False", "boto3_client", "self", "hook", "get_conn"]], "ti": [["super", "set_context", "ti"], ["self", "handler", "watchtower", "CloudWatchLogHandler", "log_group_name", "self", "log_group", "log_stream_name", "self", "_render_filename", "ti", "ti", "try_number", "use_queues", "getattr", "ti", "False", "boto3_client", "self", "hook", "get_conn"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "ti": [["bool", 0.12935668074483045], ["Dict[str, List[str]]", 0.1041711690985334], ["str", 0.09953392845471865], ["List[str]", 0.0947275616450533], ["BaseException", 0.08537428301290885], ["int", 0.08149869467063565]]}, "q_name": "CloudwatchTaskHandler.set_context", "ret_exprs": [], "ret_type": "", "variables": {"handler": ""}, "variables_p": {"handler": [["str", 0.480105255826422], ["Dict[str, Any]", 0.08704651675181757], ["dict", 0.0782521310836642]]}}, {"docstring": {"func": "Close the handler responsible for the upload of the local log file to Cloudwatch.", "long_descr": null, "ret": null}, "fn_lc": [[74, 4], [86, 26]], "fn_var_ln": {"closed": [[86, 8], [86, 19]]}, "fn_var_occur": {"closed": [["self", "closed"], ["self", "closed", "True"]]}, "name": "close", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "closed"], ["self", "handler", "None"], ["self", "handler", "close"], ["self", "closed", "True"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "CloudwatchTaskHandler.close", "ret_exprs": ["return"], "ret_type": "", "ret_type_p": [["Union[tuple, list]", 0.12326783261663934], ["List[int]", 0.09124591253820835], ["Dict[str, Any]", 0.08769568774684897], ["str", 0.08682447752895113]], "variables": {"closed": ""}, "variables_p": {"closed": [["dict", 0.35915633792617185], ["int", 0.24405593695993985], ["str", 0.18091526088807333]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[88, 4], [104, 32]], "fn_var_ln": {"local_log": [[102, 12], [102, 21]], "log": [[97, 12], [97, 15]], "metadata": [[102, 23], [102, 31]], "stream_name": [[89, 8], [89, 19]]}, "fn_var_occur": {"local_log": [["local_log", "metadata", "super", "_read", "task_instance", "try_number", "metadata"], ["log", "local_log"]], "log": [["log", "self", "log_group", "stream_name", "str", "e"], ["self", "log", "error", "log"], ["log", "local_log"], ["log", "metadata"]], "metadata": [["local_log", "metadata", "super", "_read", "task_instance", "try_number", "metadata"], ["log", "metadata"]], "stream_name": [["stream_name", "self", "_render_filename", "task_instance", "try_number"], ["self", "log_group", "stream_name", "self", "get_cloudwatch_logs", "stream_name", "stream_name", "True"], ["log", "self", "log_group", "stream_name", "str", "e"]]}, "name": "_read", "params": {"metadata": "", "self": "", "task_instance": "", "try_number": ""}, "params_descr": {"metadata": "", "self": "", "task_instance": "", "try_number": ""}, "params_occur": {"metadata": [["local_log", "metadata", "super", "_read", "task_instance", "try_number", "metadata"], ["log", "metadata"]], "self": [["stream_name", "self", "_render_filename", "task_instance", "try_number"], ["self", "log_group", "stream_name", "self", "get_cloudwatch_logs", "stream_name", "stream_name", "True"], ["log", "self", "log_group", "stream_name", "str", "e"], ["self", "log", "error", "log"]], "task_instance": [["stream_name", "self", "_render_filename", "task_instance", "try_number"], ["local_log", "metadata", "super", "_read", "task_instance", "try_number", "metadata"]], "try_number": [["stream_name", "self", "_render_filename", "task_instance", "try_number"], ["local_log", "metadata", "super", "_read", "task_instance", "try_number", "metadata"]]}, "params_p": {"args": [], "kwargs": [], "metadata": [["float", 0.1901735134527228], ["IO[str]", 0.09511023924852727], ["int", 0.0910324703410728], ["str", 0.09094205140723935]], "self": [], "task_instance": [["str", 0.1867520969655449]], "try_number": [["str", 0.1867520969655449]]}, "q_name": "CloudwatchTaskHandler._read", "ret_exprs": ["return ( f\"*** Reading remote log from Cloudwatch log_group: {self.log_group} \" f\"log_stream: {stream_name}.n{self.get_cloudwatch_logs(stream_name=stream_name)}n\", {\"end_of_log\": True},)", "return log, metadata"], "ret_type": "", "ret_type_p": [["str", 0.9999999999999998]], "variables": {"local_log": "", "log": "", "metadata": "", "stream_name": ""}, "variables_p": {"local_log": [["int", 0.3432578651574578], ["str", 0.24366491147641167], ["bytes", 0.16488116602706895], ["bool", 0.16207328242539576], ["functools.partial[Any]", 0.08612277491366586]], "log": [["raiden.utils.Any", 0.0918727850573989]], "metadata": [["int", 0.1979252261275809], ["dict", 0.14585875314199637], ["cmk.utils.type_defs.UserId", 0.10612324520074363], ["classmethod", 0.09381391296156277], ["deque[str]", 0.09376496797064163], ["defaultdict", 0.09264056494697517]], "stream_name": [["str", 1.0000000000000002]]}}, {"docstring": {"func": "Return all logs from the given log stream.", "long_descr": null, "ret": "string of all logs from the given log stream"}, "fn_lc": [[106, 4], [118, 71]], "fn_var_ln": {"events": [[113, 8], [113, 14]]}, "fn_var_occur": {"events": [["events", "self", "hook", "get_log_events", "log_group", "self", "log_group", "log_stream_name", "stream_name", "start_from_head", "True"], ["join", "self", "_event_to_str", "event", "event", "events"]]}, "name": "get_cloudwatch_logs", "params": {"self": "", "stream_name": "builtins.str"}, "params_descr": {"self": "", "stream_name": "name of the Cloudwatch log stream to get all logs from"}, "params_occur": {"self": [["events", "self", "hook", "get_log_events", "log_group", "self", "log_group", "log_stream_name", "stream_name", "start_from_head", "True"], ["join", "self", "_event_to_str", "event", "event", "events"]], "stream_name": [["events", "self", "hook", "get_log_events", "log_group", "self", "log_group", "log_stream_name", "stream_name", "start_from_head", "True"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "stream_name": [["str", 0.6450351458183456], ["Optional[str]", 0.1308977169918032]]}, "q_name": "CloudwatchTaskHandler.get_cloudwatch_logs", "ret_exprs": ["return \"n\".join(self._event_to_str(event) for event in events)"], "ret_type": "builtins.str", "ret_type_p": [["str", 1.0]], "variables": {"events": ""}, "variables_p": {"events": [["str", 0.21599451728445093], ["List[str]", 0.1600382312471311], ["int", 0.09935380421559899]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[120, 4], [124, 50]], "fn_var_ln": {"event_dt": [[121, 8], [121, 16]], "formatted_event_dt": [[122, 8], [122, 26]], "message": [[123, 8], [123, 15]]}, "fn_var_occur": {"event_dt": [["event_dt", "datetime", "utcfromtimestamp", "event"], ["formatted_event_dt", "event_dt", "strftime"]], "formatted_event_dt": [["formatted_event_dt", "event_dt", "strftime"], ["formatted_event_dt", "message"]], "message": [["message", "event"], ["formatted_event_dt", "message"]]}, "name": "_event_to_str", "params": {"event": "builtins.dict", "self": ""}, "params_descr": {"event": "", "self": ""}, "params_occur": {"event": [["event_dt", "datetime", "utcfromtimestamp", "event"], ["message", "event"]], "self": []}, "params_p": {"args": [], "event": [["str", 0.2976726960145568], ["int", 0.09513796760937296], ["Dict[str, Any]", 0.09421872808133068]], "kwargs": [], "self": []}, "q_name": "CloudwatchTaskHandler._event_to_str", "ret_exprs": ["return f\"[{formatted_event_dt}] {message}\""], "ret_type": "builtins.str", "ret_type_p": [["str", 1.0]], "variables": {"event_dt": "", "formatted_event_dt": "", "message": ""}, "variables_p": {"event_dt": [["str", 0.29231226614255473], ["datetime.datetime.datetime", 0.26332649927045704], ["datetime.date", 0.1925089603306555], ["datetime.timedelta", 0.08670514618612245], ["datetime.datetime", 0.08256473116848768]], "formatted_event_dt": [["Dict[str, Union[Any, Any, Any]]", 0.10647738040750064], ["list", 0.0993936978239922], ["int", 0.08707812326894575]], "message": [["Dict[str, Union[Any, str]]", 0.29697446746711453], ["int", 0.22314770901934125], ["Dict[str, Dict[str, str]]", 0.08646752762758741]]}}], "name": "CloudwatchTaskHandler", "q_name": "CloudwatchTaskHandler", "variables": {"trigger_should_wrap": ""}, "variables_p": {"trigger_should_wrap": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]]}}], "funcs": [], "imports": ["__future__", "annotations", "datetime", "datetime", "functools", "cached_property", "watchtower", "airflow", "configuration", "conf", "airflow", "providers", "amazon", "aws", "hooks", "logs", "AwsLogsHook", "airflow", "utils", "log", "file_task_handler", "FileTaskHandler", "airflow", "utils", "log", "logging_mixin", "LoggingMixin"], "mod_var_ln": {}, "mod_var_occur": {}, "no_types_annot": {"D": 7, "I": 0, "U": 27}, "session_id": "DmHWlooCsSPKdxQwR86GLOmw8Ya6lU_gHIdnRIH1KB8", "set": null, "tc": [false, null], "type_annot_cove": 0.21, "typed_seq": "", "untyped_seq": "", "variables": {}, "variables_p": {}}}