{"error": null, "response": {"classes": [{"cls_lc": [[41, 0], [51, 16]], "cls_var_ln": {"COMPLETE": [[51, 4], [51, 12]], "JOB_COMPLETE": [[50, 4], [50, 16]], "STARTING": [[47, 4], [47, 12]], "TAILING": [[49, 4], [49, 11]], "WAIT_IN_PROGRESS": [[48, 4], [48, 20]]}, "cls_var_occur": {"COMPLETE": [], "JOB_COMPLETE": [], "STARTING": [], "TAILING": [], "WAIT_IN_PROGRESS": []}, "funcs": [], "name": "LogState", "q_name": "LogState", "variables": {"COMPLETE": "", "JOB_COMPLETE": "", "STARTING": "", "TAILING": "", "WAIT_IN_PROGRESS": ""}, "variables_p": {"COMPLETE": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "JOB_COMPLETE": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "STARTING": [["bool", 0.20000000000000004], ["str", 0.20000000000000004], ["int", 0.20000000000000004], ["datetime.datetime", 0.10000000000000002], ["List[Tuple[Any, Any]]", 0.10000000000000002]], "TAILING": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "WAIT_IN_PROGRESS": [["int", 0.9999999999999999]]}}, {"cls_lc": [[138, 0], [1298, 19]], "cls_var_ln": {"endpoint_non_terminal_states": [[152, 4], [152, 32]], "failed_states": [[154, 4], [154, 17]], "non_terminal_states": [[151, 4], [151, 23]], "pipeline_non_terminal_states": [[153, 4], [153, 32]]}, "cls_var_occur": {"endpoint_non_terminal_states": [], "failed_states": [], "non_terminal_states": [], "pipeline_non_terminal_states": []}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[156, 4], [159, 66]], "fn_var_ln": {"logs_hook": [[159, 8], [159, 22]], "s3_hook": [[158, 8], [158, 20]]}, "fn_var_occur": {"logs_hook": [["self", "logs_hook", "AwsLogsHook", "aws_conn_id", "self", "aws_conn_id"]], "s3_hook": [["self", "s3_hook", "S3Hook", "aws_conn_id", "self", "aws_conn_id"]]}, "name": "__init__", "params": {"args": "", "kwargs": "", "self": ""}, "params_descr": {"args": "", "kwargs": "", "self": ""}, "params_occur": {"args": [["super", "__init__", "client_type", "args", "kwargs"]], "kwargs": [["super", "__init__", "client_type", "args", "kwargs"]], "self": [["self", "s3_hook", "S3Hook", "aws_conn_id", "self", "aws_conn_id"], ["self", "logs_hook", "AwsLogsHook", "aws_conn_id", "self", "aws_conn_id"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "SageMakerHook.__init__", "ret_exprs": [], "ret_type": "", "variables": {"logs_hook": "", "s3_hook": ""}, "variables_p": {"logs_hook": [["str", 1.0]], "s3_hook": [["int", 0.7889952712611843], ["str", 0.21100472873881593]]}}, {"docstring": {"func": "Tar the local file or directory and upload to s3.", "long_descr": null, "ret": null}, "fn_lc": [[161, 4], [177, 76]], "fn_var_ln": {"files": [[172, 16], [172, 21]]}, "fn_var_occur": {"files": [["files", "os", "path", "join", "path", "name", "name", "os", "listdir", "path"], ["files", "path"]]}, "name": "tar_and_s3_upload", "params": {"bucket": "builtins.str", "key": "builtins.str", "path": "builtins.str", "self": ""}, "params_descr": {"bucket": "s3 bucket", "key": "s3 key", "path": "local file or directory", "self": ""}, "params_occur": {"bucket": [["self", "s3_hook", "load_file_obj", "temp_file", "key", "bucket", "replace", "True"]], "key": [["self", "s3_hook", "load_file_obj", "temp_file", "key", "bucket", "replace", "True"]], "path": [["os", "path", "isdir", "path"], ["files", "os", "path", "join", "path", "name", "name", "os", "listdir", "path"], ["files", "path"], ["tar_file", "add", "f", "arcname", "os", "path", "basename", "f"]], "self": [["self", "s3_hook", "load_file_obj", "temp_file", "key", "bucket", "replace", "True"]]}, "params_p": {"args": [], "bucket": [["str", 0.5932979042537821], ["dict", 0.10734137581916389], ["Optional[str]", 0.10531682427852705]], "key": [["str", 0.5932979042537821], ["dict", 0.10734137581916389], ["Optional[str]", 0.10531682427852705]], "kwargs": [], "path": [["str", 0.5035315845614498], ["bool", 0.09120745154538287]], "self": []}, "q_name": "SageMakerHook.tar_and_s3_upload", "ret_exprs": [], "ret_type": "None", "variables": {"files": ""}, "variables_p": {"files": [["List[Tuple[float, str]]", 0.4035623186055567], ["str", 0.27021661876989095], ["dict", 0.13528512381030938], ["List[Tuple[str, Any]]", 0.08493600549761852]]}}, {"docstring": {"func": "Extract the S3 operations from the configuration and execute them.", "long_descr": null, "ret": null}, "fn_lc": [[179, 4], [195, 79]], "fn_var_ln": {"create_bucket_ops": [[187, 12], [187, 29]], "s3_operations": [[184, 8], [184, 21]], "upload_ops": [[188, 12], [188, 22]]}, "fn_var_occur": {"create_bucket_ops": [["create_bucket_ops", "s3_operations", "get"]], "s3_operations": [["s3_operations", "config", "pop", "None"], ["s3_operations", "None"], ["create_bucket_ops", "s3_operations", "get"], ["upload_ops", "s3_operations", "get"]], "upload_ops": [["upload_ops", "s3_operations", "get"]]}, "name": "configure_s3_resources", "params": {"config": "builtins.dict", "self": ""}, "params_descr": {"config": "config of SageMaker operation", "self": ""}, "params_occur": {"config": [["s3_operations", "config", "pop", "None"]], "self": [["self", "s3_hook", "create_bucket", "bucket_name", "op"], ["self", "tar_and_s3_upload", "op", "op", "op"], ["self", "s3_hook", "load_file", "op", "op", "op"]]}, "params_p": {"args": [], "config": [["Dict[str, Any]", 0.39817561275402935]], "kwargs": [], "self": []}, "q_name": "SageMakerHook.configure_s3_resources", "ret_exprs": [], "ret_type": "None", "variables": {"create_bucket_ops": "", "s3_operations": "", "upload_ops": ""}, "variables_p": {"create_bucket_ops": [["Dict[str, Union[int, str]]", 0.1676272907658695], ["List[str]", 0.09995561079555637], ["list", 0.0930889852827182], ["str", 0.0885724714339993], ["Dict[str, str]", 0.08688014267355025]], "s3_operations": [["List[str]", 0.2041345327836216], ["str", 0.1865753366054217], ["Optional[str]", 0.18516394980224238]], "upload_ops": [["str", 0.4277529767945628], ["List[str]", 0.11105232025466719], ["list", 0.09718663029681364], ["Dict[str, List[str]]", 0.08010185854022882]]}}, {"docstring": {"func": "Check if an S3 URL exists.", "long_descr": null, "ret": null}, "fn_lc": [[197, 4], [216, 19]], "fn_var_ln": {"bucket": [[202, 8], [202, 14]], "key": [[202, 16], [202, 19]]}, "fn_var_occur": {"bucket": [["bucket", "key", "S3Hook", "parse_s3_url", "s3url"], ["self", "s3_hook", "check_for_bucket", "bucket_name", "bucket"], ["AirflowException", "bucket"], ["key", "self", "s3_hook", "check_for_key", "key", "key", "bucket_name", "bucket", "self", "s3_hook", "check_for_prefix", "prefix", "key", "bucket_name", "bucket", "delimiter"], ["AirflowException", "s3url", "bucket"]], "key": [["bucket", "key", "S3Hook", "parse_s3_url", "s3url"], ["key", "self", "s3_hook", "check_for_key", "key", "key", "bucket_name", "bucket", "self", "s3_hook", "check_for_prefix", "prefix", "key", "bucket_name", "bucket", "delimiter"]]}, "name": "check_s3_url", "params": {"s3url": "builtins.str", "self": ""}, "params_descr": {"s3url": "S3 url", "self": ""}, "params_occur": {"s3url": [["bucket", "key", "S3Hook", "parse_s3_url", "s3url"], ["AirflowException", "s3url", "bucket"]], "self": [["self", "s3_hook", "check_for_bucket", "bucket_name", "bucket"], ["key", "self", "s3_hook", "check_for_key", "key", "key", "bucket_name", "bucket", "self", "s3_hook", "check_for_prefix", "prefix", "key", "bucket_name", "bucket", "delimiter"]]}, "params_p": {"args": [], "kwargs": [], "s3url": [["str", 0.6137990515965962], ["Dict[str, str]", 0.09310447753752733], ["dict", 0.09259044204214383]], "self": []}, "q_name": "SageMakerHook.check_s3_url", "ret_exprs": ["return True"], "ret_type": "builtins.bool", "ret_type_p": [["bool", 0.9999999999999999]], "variables": {"bucket": "", "key": ""}, "variables_p": {"bucket": [["str", 0.20107901301050324], ["Dict[str, bool]", 0.18916599047949081], ["Dict[str, Any]", 0.10506351144292225], ["List[List[str]]", 0.10295552746927089], ["Callable(hash)[[object], int]", 0.1021835747433786], ["Dict[str, str]", 0.10141369095814454]], "key": [["List[str]", 0.22273336385126496], ["str", 0.19320807647777294], ["boto.s3.key.Key", 0.11315419244912897], ["Tuple[str]", 0.08681875971543432], ["int", 0.07590847980637665]]}}, {"docstring": {"func": "Check if a training configuration is valid.", "long_descr": null, "ret": null}, "fn_lc": [[218, 4], [226, 85]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "check_training_config", "params": {"self": "", "training_config": "builtins.dict"}, "params_descr": {"self": "", "training_config": "training_config"}, "params_occur": {"self": [["self", "check_s3_url", "channel"]], "training_config": []}, "params_p": {"args": [], "kwargs": [], "self": [], "training_config": [["bool", 0.30891076270419693]]}, "q_name": "SageMakerHook.check_training_config", "ret_exprs": [], "ret_type": "None", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Check if a tuning configuration is valid.", "long_descr": null, "ret": null}, "fn_lc": [[228, 4], [235, 81]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "check_tuning_config", "params": {"self": "", "tuning_config": "builtins.dict"}, "params_descr": {"self": "", "tuning_config": "tuning_config"}, "params_occur": {"self": [["self", "check_s3_url", "channel"]], "tuning_config": []}, "params_p": {"args": [], "kwargs": [], "self": [], "tuning_config": [["bool", 0.30891076270419693]]}, "q_name": "SageMakerHook.check_tuning_config", "ret_exprs": [], "ret_type": "None", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Iterate over the available events.", "long_descr": "The events coming from a set of log streams in a single log group\ninterleaving the events from each stream so they're yielded in timestamp order.", "ret": "A tuple of (stream number, cloudwatch log event)."}, "fn_lc": [[237, 4], [271, 32]], "fn_var_ln": {"event_iters": [[251, 8], [251, 19]], "events": [[255, 8], [255, 14]], "i": [[266, 12], [266, 13]], "positions": [[250, 8], [250, 17]]}, "fn_var_occur": {"event_iters": [["event_iters", "self", "logs_hook", "get_log_events", "log_group", "s", "positions", "s", "timestamp", "positions", "s", "skip", "s", "streams"], ["events", "i", "next", "event_iters", "i"]], "events": [["events", "builtins", "list", "Any", "None"], ["events", "append", "None"], ["events", "append", "next", "event_stream"], ["events", "append", "None"], ["any", "events"], ["i", "argmin", "events", "x", "x", "x"], ["i", "events", "i"], ["events", "i", "next", "event_iters", "i"], ["events", "i", "None"]], "i": [["i", "argmin", "events", "x", "x", "x"], ["i", "events", "i"], ["events", "i", "next", "event_iters", "i"], ["events", "i", "None"]], "positions": [["positions", "positions", "s", "Position", "timestamp", "skip", "s", "streams"], ["event_iters", "self", "logs_hook", "get_log_events", "log_group", "s", "positions", "s", "timestamp", "positions", "s", "skip", "s", "streams"]]}, "name": "multi_stream_iter", "params": {"log_group": "builtins.str", "positions": "", "self": "", "streams": "builtins.list"}, "params_descr": {"log_group": "The name of the log group.", "positions": "A list of pairs of (timestamp, skip) which represents the last record\nread from each stream.", "self": "", "streams": "A list of the log stream names. The position of the stream in this list is\nthe stream number."}, "params_occur": {"log_group": [["event_iters", "self", "logs_hook", "get_log_events", "log_group", "s", "positions", "s", "timestamp", "positions", "s", "skip", "s", "streams"]], "positions": [["positions", "positions", "s", "Position", "timestamp", "skip", "s", "streams"], ["event_iters", "self", "logs_hook", "get_log_events", "log_group", "s", "positions", "s", "timestamp", "positions", "s", "skip", "s", "streams"]], "self": [["event_iters", "self", "logs_hook", "get_log_events", "log_group", "s", "positions", "s", "timestamp", "positions", "s", "skip", "s", "streams"]], "streams": [["positions", "positions", "s", "Position", "timestamp", "skip", "s", "streams"], ["event_iters", "self", "logs_hook", "get_log_events", "log_group", "s", "positions", "s", "timestamp", "positions", "s", "skip", "s", "streams"]]}, "params_p": {"args": [], "kwargs": [], "log_group": [["Iterable[bytes]", 0.22523041181701667], ["Mapping", 0.10260875261380818]], "positions": [["bytes", 0.291911831495296], ["Mapping", 0.10269757374693148], ["int", 0.09702117448923331], ["float", 0.08816068227030219]], "self": [], "streams": [["bytes", 0.291911831495296], ["Mapping", 0.10269757374693148], ["int", 0.09702117448923331], ["float", 0.08816068227030219]]}, "q_name": "SageMakerHook.multi_stream_iter", "ret_exprs": [], "ret_type": "typing.Generator", "variables": {"event_iters": "", "events": "builtins.list[Any | None]", "i": "", "positions": ""}, "variables_p": {"event_iters": [["str", 0.3116471907962927], ["datetime.timedelta", 0.13067532617250707], ["Dict[str, Tuple[Any, Any]]", 0.09115589257925975], ["list", 0.08078135486177082]], "events": [["list", 0.7307252211429106], ["Dict[str, Any]", 0.2692747788570892]], "i": [["int", 0.6109971754850697], ["str", 0.09302156104343136]], "positions": [["dict", 0.1217976151479802], ["Dict[str, str]", 0.11624438865242717], ["int", 0.10197882390003611], ["float", 0.09377340972225306]]}}, {"docstring": {"func": "Start a model training job.", "long_descr": "After training completes, Amazon SageMaker saves the resulting model\nartifacts to an Amazon S3 location that you specify.", "ret": "A response to training job creation"}, "fn_lc": [[273, 4], [321, 23]], "fn_var_ln": {"billable_time": [[316, 12], [316, 25]], "describe_response": [[308, 12], [308, 29]], "response": [[297, 8], [297, 16]]}, "fn_var_occur": {"billable_time": [["billable_time", "describe_response", "describe_response", "describe_response"], ["self", "log", "info", "int", "billable_time", "total_seconds"]], "describe_response": [["describe_response", "self", "check_status", "config", "self", "describe_training_job", "check_interval", "max_ingestion_time"], ["billable_time", "describe_response", "describe_response", "describe_response"]], "response": [["response", "self", "get_conn", "create_training_job", "config"]]}, "name": "create_training_job", "params": {"check_interval": "builtins.int", "config": "builtins.dict", "max_ingestion_time": "int | None", "print_log": "builtins.bool", "self": "", "wait_for_completion": "builtins.bool"}, "params_descr": {"check_interval": "the time interval in seconds which the operator\nwill check the status of any SageMaker job", "config": "the config for training", "max_ingestion_time": "the maximum ingestion time in seconds. Any\nSageMaker jobs that run longer than this will fail. Setting this to\nNone implies no timeout for any SageMaker job.", "print_log": "", "self": "", "wait_for_completion": "if the program should keep running until job finishes"}, "params_occur": {"check_interval": [["self", "check_training_status_with_log", "config", "self", "non_terminal_states", "self", "failed_states", "wait_for_completion", "check_interval", "max_ingestion_time"], ["describe_response", "self", "check_status", "config", "self", "describe_training_job", "check_interval", "max_ingestion_time"]], "config": [["self", "check_training_config", "config"], ["response", "self", "get_conn", "create_training_job", "config"], ["self", "check_training_status_with_log", "config", "self", "non_terminal_states", "self", "failed_states", "wait_for_completion", "check_interval", "max_ingestion_time"], ["describe_response", "self", "check_status", "config", "self", "describe_training_job", "check_interval", "max_ingestion_time"]], "max_ingestion_time": [["self", "check_training_status_with_log", "config", "self", "non_terminal_states", "self", "failed_states", "wait_for_completion", "check_interval", "max_ingestion_time"], ["describe_response", "self", "check_status", "config", "self", "describe_training_job", "check_interval", "max_ingestion_time"]], "print_log": [], "self": [["self", "check_training_config", "config"], ["response", "self", "get_conn", "create_training_job", "config"], ["self", "check_training_status_with_log", "config", "self", "non_terminal_states", "self", "failed_states", "wait_for_completion", "check_interval", "max_ingestion_time"], ["describe_response", "self", "check_status", "config", "self", "describe_training_job", "check_interval", "max_ingestion_time"], ["self", "log", "info", "int", "billable_time", "total_seconds"]], "wait_for_completion": [["self", "check_training_status_with_log", "config", "self", "non_terminal_states", "self", "failed_states", "wait_for_completion", "check_interval", "max_ingestion_time"]]}, "params_p": {"args": [], "check_interval": [["bytes", 0.19574444378146827], ["bool", 0.1138017584457883]], "config": [["Optional[str]", 0.18828633867163747], ["dict", 0.1208020355052227], ["bool", 0.10495781912167787], ["str", 0.08910665132154208], ["datetime.timedelta", 0.08910665132154208]], "kwargs": [], "max_ingestion_time": [["bytes", 0.19574444378146827], ["bool", 0.1138017584457883]], "print_log": [["bool", 0.4039515515524866], ["List[Type]", 0.11084605502853702], ["Optional[Iterable[Any]]", 0.09397075878935575], ["Type[Any]", 0.09397075878935575], ["Optional[Mapping[str, Any]]", 0.09397075878935575]], "self": [], "wait_for_completion": [["bool", 0.329592356750105], ["Dict[str, Any]", 0.22490153999864806], ["int", 0.08408535738796329], ["raiden.utils.Address", 0.0816886543491298]]}, "q_name": "SageMakerHook.create_training_job", "ret_exprs": ["return response"], "ret_type": "", "ret_type_p": [["Dict[str, Any]", 0.1949629952776929], ["Optional[Dict[str, Any]]", 0.13829393985519683], ["bool", 0.09723985332281442], ["Dict[str, str]", 0.09450456231833013], ["bytes", 0.09287442719279393]], "variables": {"billable_time": "", "describe_response": "", "response": ""}, "variables_p": {"billable_time": [["int", 0.4076315341994546], ["str", 0.1673158614104303], ["float", 0.16541626582634614], ["datetime.timedelta", 0.15918247604203883], ["bytes", 0.10045386252173008]], "describe_response": [["Dict[str, Literal]", 0.4752393992771214], ["Dict[str, int]", 0.1214743749704047], ["Dict[str, str]", 0.10993865378588923], ["Dict[Tuple[str, str], float]", 0.10748339339779733], ["Dict[Tuple[str, str], str]", 0.09390043910772893], ["OrderedDict[str, int]", 0.09196373946105854]], "response": [["int", 0.5907147035778096], ["Final", 0.286837181537671], ["bytes", 0.12244811488451933]]}}, {"docstring": {"func": "Start a hyperparameter tuning job.", "long_descr": "A hyperparameter tuning job finds the best version of a model by running\nmany training jobs on your dataset using the algorithm you choose and\nvalues for hyperparameters within ranges that you specify. It then\nchooses the hyperparameter values that result in a model that performs\nthe best, as measured by an objective metric that you choose.", "ret": "A response to tuning job creation"}, "fn_lc": [[323, 4], [358, 23]], "fn_var_ln": {"response": [[349, 8], [349, 16]]}, "fn_var_occur": {"response": [["response", "self", "get_conn", "create_hyper_parameter_tuning_job", "config"]]}, "name": "create_tuning_job", "params": {"check_interval": "builtins.int", "config": "builtins.dict", "max_ingestion_time": "int | None", "self": "", "wait_for_completion": "builtins.bool"}, "params_descr": {"check_interval": "the time interval in seconds which the operator\nwill check the status of any SageMaker job", "config": "the config for tuning", "max_ingestion_time": "the maximum ingestion time in seconds. Any\nSageMaker jobs that run longer than this will fail. Setting this to\nNone implies no timeout for any SageMaker job.", "self": "", "wait_for_completion": "if the program should keep running until job finishes"}, "params_occur": {"check_interval": [["self", "check_status", "config", "self", "describe_tuning_job", "check_interval", "max_ingestion_time"]], "config": [["self", "check_tuning_config", "config"], ["response", "self", "get_conn", "create_hyper_parameter_tuning_job", "config"], ["self", "check_status", "config", "self", "describe_tuning_job", "check_interval", "max_ingestion_time"]], "max_ingestion_time": [["self", "check_status", "config", "self", "describe_tuning_job", "check_interval", "max_ingestion_time"]], "self": [["self", "check_tuning_config", "config"], ["response", "self", "get_conn", "create_hyper_parameter_tuning_job", "config"], ["self", "check_status", "config", "self", "describe_tuning_job", "check_interval", "max_ingestion_time"]], "wait_for_completion": []}, "params_p": {"args": [], "check_interval": [["bool", 0.38972120614421835], ["str", 0.11171309413068084], ["Optional[int]", 0.11171309413068084], ["int", 0.10419928897552953], ["float", 0.0896399072717144], ["Optional[Dict]", 0.0848989011022518]], "config": [["Dict[str, Any]", 0.21689667980970953], ["str", 0.19809129041667245], ["Dict[str, str]", 0.10844833990485477], ["int", 0.09915127743294416], ["Optional[int]", 0.0896429505118177], ["Optional[Sequence[str]]", 0.0896429505118177]], "kwargs": [], "max_ingestion_time": [["bool", 0.38972120614421835], ["str", 0.11171309413068084], ["Optional[int]", 0.11171309413068084], ["int", 0.10419928897552953], ["float", 0.0896399072717144], ["Optional[Dict]", 0.0848989011022518]], "self": [], "wait_for_completion": [["int", 0.29859843466716385], ["bool", 0.21035841663625665], ["str", 0.1915382663510039]]}, "q_name": "SageMakerHook.create_tuning_job", "ret_exprs": ["return response"], "ret_type": "", "ret_type_p": [["Dict[str, Any]", 0.1949629952776929], ["Optional[Dict[str, Any]]", 0.13829393985519683], ["bool", 0.09723985332281442], ["Dict[str, str]", 0.09450456231833013], ["bytes", 0.09287442719279393]], "variables": {"response": ""}, "variables_p": {"response": [["int", 0.9111276719836805], ["str", 0.08887232801631952]]}}, {"docstring": {"func": "Start a transform job.", "long_descr": "A transform job uses a trained model to get inferences on a dataset and\nsaves these results to an Amazon S3 location that you specify.\n\n.. seealso::\n    - :external+boto3:py:meth:`SageMaker.Client.create_transform_job`", "ret": "A response to transform job creation"}, "fn_lc": [[360, 4], [396, 23]], "fn_var_ln": {"response": [[387, 8], [387, 16]]}, "fn_var_occur": {"response": [["response", "self", "get_conn", "create_transform_job", "config"]]}, "name": "create_transform_job", "params": {"check_interval": "builtins.int", "config": "builtins.dict", "max_ingestion_time": "int | None", "self": "", "wait_for_completion": "builtins.bool"}, "params_descr": {"check_interval": "the time interval in seconds which the operator\nwill check the status of any SageMaker job", "config": "the config for transform job", "max_ingestion_time": "the maximum ingestion time in seconds. Any\nSageMaker jobs that run longer than this will fail. Setting this to\nNone implies no timeout for any SageMaker job.", "self": "", "wait_for_completion": "if the program should keep running until job finishes"}, "params_occur": {"check_interval": [["self", "check_status", "config", "self", "describe_transform_job", "check_interval", "max_ingestion_time"]], "config": [["self", "check_s3_url", "config"], ["response", "self", "get_conn", "create_transform_job", "config"], ["self", "check_status", "config", "self", "describe_transform_job", "check_interval", "max_ingestion_time"]], "max_ingestion_time": [["self", "check_status", "config", "self", "describe_transform_job", "check_interval", "max_ingestion_time"]], "self": [["self", "check_s3_url", "config"], ["response", "self", "get_conn", "create_transform_job", "config"], ["self", "check_status", "config", "self", "describe_transform_job", "check_interval", "max_ingestion_time"]], "wait_for_completion": []}, "params_p": {"args": [], "check_interval": [["bool", 0.38972120614421835], ["str", 0.11171309413068084], ["Optional[int]", 0.11171309413068084], ["int", 0.10419928897552953], ["float", 0.0896399072717144], ["Optional[Dict]", 0.0848989011022518]], "config": [["str", 0.20265410150483146], ["Dict[str, Any]", 0.20052152695629033], ["Optional[str]", 0.19151616852921532], ["Optional[int]", 0.10239333802668629], ["Optional[Sequence[str]]", 0.10239333802668629], ["Dict[str, str]", 0.10026076347814517]], "kwargs": [], "max_ingestion_time": [["bool", 0.38972120614421835], ["str", 0.11171309413068084], ["Optional[int]", 0.11171309413068084], ["int", 0.10419928897552953], ["float", 0.0896399072717144], ["Optional[Dict]", 0.0848989011022518]], "self": [], "wait_for_completion": [["int", 0.29859843466716385], ["bool", 0.21035841663625665], ["str", 0.1915382663510039]]}, "q_name": "SageMakerHook.create_transform_job", "ret_exprs": ["return response"], "ret_type": "", "ret_type_p": [["Dict[str, Any]", 0.1949629952776929], ["Optional[Dict[str, Any]]", 0.13829393985519683], ["bool", 0.09723985332281442], ["Dict[str, str]", 0.09450456231833013], ["bytes", 0.09287442719279393]], "variables": {"response": ""}, "variables_p": {"response": [["int", 0.5907147035778096], ["Final", 0.286837181537671], ["bytes", 0.12244811488451933]]}}, {"docstring": {"func": "Use Amazon SageMaker Processing to analyze data and evaluate models.", "long_descr": "With Processing, you can use a simplified, managed experience on\nSageMaker to run your data processing workloads, such as feature\nengineering, data validation, model evaluation, and model\ninterpretation.\n\n.. seealso::\n    - :external+boto3:py:meth:`SageMaker.Client.create_processing_job`", "ret": "A response to transform job creation"}, "fn_lc": [[398, 4], [433, 23]], "fn_var_ln": {"response": [[424, 8], [424, 16]]}, "fn_var_occur": {"response": [["response", "self", "get_conn", "create_processing_job", "config"]]}, "name": "create_processing_job", "params": {"check_interval": "builtins.int", "config": "builtins.dict", "max_ingestion_time": "int | None", "self": "", "wait_for_completion": "builtins.bool"}, "params_descr": {"check_interval": "the time interval in seconds which the operator\nwill check the status of any SageMaker job", "config": "the config for processing job", "max_ingestion_time": "the maximum ingestion time in seconds. Any\nSageMaker jobs that run longer than this will fail. Setting this to\nNone implies no timeout for any SageMaker job.", "self": "", "wait_for_completion": "if the program should keep running until job finishes"}, "params_occur": {"check_interval": [["self", "check_status", "config", "self", "describe_processing_job", "check_interval", "max_ingestion_time"]], "config": [["response", "self", "get_conn", "create_processing_job", "config"], ["self", "check_status", "config", "self", "describe_processing_job", "check_interval", "max_ingestion_time"]], "max_ingestion_time": [["self", "check_status", "config", "self", "describe_processing_job", "check_interval", "max_ingestion_time"]], "self": [["response", "self", "get_conn", "create_processing_job", "config"], ["self", "check_status", "config", "self", "describe_processing_job", "check_interval", "max_ingestion_time"]], "wait_for_completion": []}, "params_p": {"args": [], "check_interval": [["bool", 0.38972120614421835], ["str", 0.11171309413068084], ["Optional[int]", 0.11171309413068084], ["int", 0.10419928897552953], ["float", 0.0896399072717144], ["Optional[Dict]", 0.0848989011022518]], "config": [["bool", 0.5016466832809934], ["raiden.utils.OneToNAddress", 0.1014600295720951], ["int", 0.10102644890195589], ["float", 0.09723754395103118], ["Callable[[], int]", 0.09611555565748185]], "kwargs": [], "max_ingestion_time": [["bool", 0.38972120614421835], ["str", 0.11171309413068084], ["Optional[int]", 0.11171309413068084], ["int", 0.10419928897552953], ["float", 0.0896399072717144], ["Optional[Dict]", 0.0848989011022518]], "self": [], "wait_for_completion": [["int", 0.29859843466716385], ["bool", 0.21035841663625665], ["str", 0.1915382663510039]]}, "q_name": "SageMakerHook.create_processing_job", "ret_exprs": ["return response"], "ret_type": "", "ret_type_p": [["Dict[str, Any]", 0.1949629952776929], ["Optional[Dict[str, Any]]", 0.13829393985519683], ["bool", 0.09723985332281442], ["Dict[str, str]", 0.09450456231833013], ["bytes", 0.09287442719279393]], "variables": {"response": ""}, "variables_p": {"response": [["int", 0.5907147035778096], ["Final", 0.286837181537671], ["bytes", 0.12244811488451933]]}}, {"docstring": {"func": "Create a model in Amazon SageMaker.", "long_descr": "In the request, you name the model and describe a primary container. For\nthe primary container, you specify the Docker image that contains\ninference code, artifacts (from prior training), and a custom\nenvironment map that the inference code uses when you deploy the model\nfor predictions.\n\n.. seealso::\n    - :external+boto3:py:meth:`SageMaker.Client.create_model`", "ret": "A response to model creation"}, "fn_lc": [[435, 4], [450, 53]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "create_model", "params": {"config": "builtins.dict", "self": ""}, "params_descr": {"config": "the config for model", "self": ""}, "params_occur": {"config": [["self", "get_conn", "create_model", "config"]], "self": [["self", "get_conn", "create_model", "config"]]}, "params_p": {"args": [], "config": [["str", 0.24799110245305378], ["Mapping[str, Any]", 0.18171058142036323], ["int", 0.10062452946230037], ["Iterable[int]", 0.09705150258726973], ["Dict[str, Any]", 0.09319298842603901], ["Optional[Any]", 0.08904029479672339]], "kwargs": [], "self": []}, "q_name": "SageMakerHook.create_model", "ret_exprs": ["return self.get_conn().create_model(**config)"], "ret_type": "", "ret_type_p": [["str", 0.2225714467471298], ["Dict[str, Any]", 0.18408771644855862], ["cmk.utils.type_defs.HostName", 0.10439439251889199], ["cmk.utils.type_defs.ServiceName", 0.10439439251889199]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Create an endpoint configuration to deploy models.", "long_descr": "In the configuration, you identify one or more models, created using the\nCreateModel API, to deploy and the resources that you want Amazon\nSageMaker to provision.\n\n.. seealso::\n    - :external+boto3:py:meth:`SageMaker.Client.create_endpoint_config`\n    - :class:`airflow.providers.amazon.aws.hooks.sagemaker.SageMakerHook.create_model`\n    - :class:`airflow.providers.amazon.aws.hooks.sagemaker.SageMakerHook.create_endpoint`", "ret": "A response to endpoint config creation"}, "fn_lc": [[452, 4], [467, 63]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "create_endpoint_config", "params": {"config": "builtins.dict", "self": ""}, "params_descr": {"config": "the config for endpoint-config", "self": ""}, "params_occur": {"config": [["self", "get_conn", "create_endpoint_config", "config"]], "self": [["self", "get_conn", "create_endpoint_config", "config"]]}, "params_p": {"args": [], "config": [["bool", 0.18924996573657937], ["str", 0.10164275957715237], ["int", 0.08660290430120328]], "kwargs": [], "self": []}, "q_name": "SageMakerHook.create_endpoint_config", "ret_exprs": ["return self.get_conn().create_endpoint_config(**config)"], "ret_type": "", "ret_type_p": [["Optional[Dict[str, Any]]", 0.10761752771975179], ["bool", 0.10313194117130457], ["Dict[str, Any]", 0.10183867690948792], ["Optional[Dict]", 0.09071752844994323]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Create an endpoint from configuration.", "long_descr": "When you create a serverless endpoint, SageMaker provisions and manages\nthe compute resources for you. Then, you can make inference requests to\nthe endpoint and receive model predictions in response. SageMaker scales\nthe compute resources up and down as needed to handle your request traffic.\n\n.. seealso::\n    - :external+boto3:py:meth:`SageMaker.Client.create_endpoint`\n    - :class:`airflow.providers.amazon.aws.hooks.sagemaker.SageMakerHook.create_endpoint`", "ret": "A response to endpoint creation"}, "fn_lc": [[469, 4], [506, 23]], "fn_var_ln": {"response": [[496, 8], [496, 16]]}, "fn_var_occur": {"response": [["response", "self", "get_conn", "create_endpoint", "config"]]}, "name": "create_endpoint", "params": {"check_interval": "builtins.int", "config": "builtins.dict", "max_ingestion_time": "int | None", "self": "", "wait_for_completion": "builtins.bool"}, "params_descr": {"check_interval": "the time interval in seconds which the operator\nwill check the status of any SageMaker job", "config": "the config for endpoint", "max_ingestion_time": "the maximum ingestion time in seconds. Any\nSageMaker jobs that run longer than this will fail. Setting this to\nNone implies no timeout for any SageMaker job.", "self": "", "wait_for_completion": "if the program should keep running until job finishes"}, "params_occur": {"check_interval": [["self", "check_status", "config", "self", "describe_endpoint", "check_interval", "max_ingestion_time", "non_terminal_states", "self", "endpoint_non_terminal_states"]], "config": [["response", "self", "get_conn", "create_endpoint", "config"], ["self", "check_status", "config", "self", "describe_endpoint", "check_interval", "max_ingestion_time", "non_terminal_states", "self", "endpoint_non_terminal_states"]], "max_ingestion_time": [["self", "check_status", "config", "self", "describe_endpoint", "check_interval", "max_ingestion_time", "non_terminal_states", "self", "endpoint_non_terminal_states"]], "self": [["response", "self", "get_conn", "create_endpoint", "config"], ["self", "check_status", "config", "self", "describe_endpoint", "check_interval", "max_ingestion_time", "non_terminal_states", "self", "endpoint_non_terminal_states"]], "wait_for_completion": []}, "params_p": {"args": [], "check_interval": [["int", 0.40583949032347977], ["str", 0.30197702551569594], ["bool", 0.19339337469598933]], "config": [["Sequence", 0.33389698081308233], ["str", 0.09740779443322116], ["raiden.utils.Signature", 0.09652259585027903], ["raiden.utils.AdditionalHash", 0.09652259585027903], ["raiden.utils.BlockSpecification", 0.09652259585027903], ["raiden.utils.Nonce", 0.09652259585027903], ["raiden.utils.BalanceHash", 0.09652259585027903], ["Optional[float]", 0.08608224550230134]], "kwargs": [], "max_ingestion_time": [["int", 0.40583949032347977], ["str", 0.30197702551569594], ["bool", 0.19339337469598933]], "self": [], "wait_for_completion": [["int", 0.29859843466716385], ["bool", 0.21035841663625665], ["str", 0.1915382663510039]]}, "q_name": "SageMakerHook.create_endpoint", "ret_exprs": ["return response"], "ret_type": "", "ret_type_p": [["Dict[str, Any]", 0.1949629952776929], ["Optional[Dict[str, Any]]", 0.13829393985519683], ["bool", 0.09723985332281442], ["Dict[str, str]", 0.09450456231833013], ["bytes", 0.09287442719279393]], "variables": {"response": ""}, "variables_p": {"response": [["int", 0.5907147035778096], ["Final", 0.286837181537671], ["bytes", 0.12244811488451933]]}}, {"docstring": {"func": "Deploy the config in the request and switch to using the new endpoint.", "long_descr": "Resources provisioned for the endpoint using the previous EndpointConfig\nare deleted (there is no availability loss).\n\n.. seealso::\n    - :external+boto3:py:meth:`SageMaker.Client.update_endpoint`", "ret": "A response to endpoint update"}, "fn_lc": [[508, 4], [542, 23]], "fn_var_ln": {"response": [[532, 8], [532, 16]]}, "fn_var_occur": {"response": [["response", "self", "get_conn", "update_endpoint", "config"]]}, "name": "update_endpoint", "params": {"check_interval": "builtins.int", "config": "builtins.dict", "max_ingestion_time": "int | None", "self": "", "wait_for_completion": "builtins.bool"}, "params_descr": {"check_interval": "the time interval in seconds which the operator\nwill check the status of any SageMaker job", "config": "the config for endpoint", "max_ingestion_time": "the maximum ingestion time in seconds. Any\nSageMaker jobs that run longer than this will fail. Setting this to\nNone implies no timeout for any SageMaker job.", "self": "", "wait_for_completion": "if the program should keep running until job finishes"}, "params_occur": {"check_interval": [["self", "check_status", "config", "self", "describe_endpoint", "check_interval", "max_ingestion_time", "non_terminal_states", "self", "endpoint_non_terminal_states"]], "config": [["response", "self", "get_conn", "update_endpoint", "config"], ["self", "check_status", "config", "self", "describe_endpoint", "check_interval", "max_ingestion_time", "non_terminal_states", "self", "endpoint_non_terminal_states"]], "max_ingestion_time": [["self", "check_status", "config", "self", "describe_endpoint", "check_interval", "max_ingestion_time", "non_terminal_states", "self", "endpoint_non_terminal_states"]], "self": [["response", "self", "get_conn", "update_endpoint", "config"], ["self", "check_status", "config", "self", "describe_endpoint", "check_interval", "max_ingestion_time", "non_terminal_states", "self", "endpoint_non_terminal_states"]], "wait_for_completion": []}, "params_p": {"args": [], "check_interval": [["str", 0.31295282226899046], ["int", 0.2204907727733345], ["bool", 0.18987110490768766], ["Dict[str, int]", 0.18093782398067781]], "config": [["str", 0.21719400397464256], ["raiden.utils.OneToNAddress", 0.09721181558452097], ["raiden.utils.Address", 0.08684316623937813], ["float", 0.08469448667178973]], "kwargs": [], "max_ingestion_time": [["str", 0.31295282226899046], ["int", 0.2204907727733345], ["bool", 0.18987110490768766], ["Dict[str, int]", 0.18093782398067781]], "self": [], "wait_for_completion": [["bool", 0.8969766034030724], ["str", 0.1030233965969279]]}, "q_name": "SageMakerHook.update_endpoint", "ret_exprs": ["return response"], "ret_type": "", "ret_type_p": [["Dict[str, Any]", 0.3031726140617626], ["Optional[Dict[str, Any]]", 0.13628031756377695], ["bool", 0.09405071731602829], ["dict", 0.08555278913961452]], "variables": {"response": ""}, "variables_p": {"response": [["Dict[Any, str]", 0.7], ["dict", 0.30000000000000004]]}}, {"docstring": {"func": "Get the training job info associated with the name.", "long_descr": ".. seealso::\n    - :external+boto3:py:meth:`SageMaker.Client.describe_training_job`", "ret": "A dict contains all the training job info"}, "fn_lc": [[544, 4], [553, 74]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "describe_training_job", "params": {"name": "builtins.str", "self": ""}, "params_descr": {"name": "the name of the training job", "self": ""}, "params_occur": {"name": [["self", "get_conn", "describe_training_job", "TrainingJobName", "name"]], "self": [["self", "get_conn", "describe_training_job", "TrainingJobName", "name"]]}, "params_p": {"args": [], "kwargs": [], "name": [["str", 0.7780064614462676], ["int", 0.11812160799775737], ["float", 0.1038719305559752]], "self": []}, "q_name": "SageMakerHook.describe_training_job", "ret_exprs": ["return self.get_conn().describe_training_job(TrainingJobName=name)"], "ret_type": "", "ret_type_p": [["int", 0.30507176519492285], ["str", 0.30155569145666233], ["bool", 0.09789640643310017], ["Optional[BaseException]", 0.09789640643310017], ["Union[str, Tuple[str, ...]]", 0.09789640643310017]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Get the associated training job info and print CloudWatch logs.", "long_descr": null, "ret": null}, "fn_lc": [[555, 4], [614, 62]], "fn_var_ln": {"count": [[591, 20], [591, 25]], "description": [[603, 12], [603, 23]], "last_describe_job_call": [[604, 12], [604, 34]], "last_description": [[608, 16], [608, 32]], "log_group": [[566, 8], [566, 17]], "logs_conn": [[571, 12], [571, 21]], "state": [[613, 16], [613, 21]], "status": [[610, 12], [610, 18]], "stream_names": [[579, 16], [579, 28]], "streams": [[573, 16], [573, 23]], "ts": [[591, 16], [591, 18]]}, "fn_var_occur": {"count": [["ts", "count", "positions", "stream_names", "idx"], ["positions", "stream_names", "idx", "Position", "timestamp", "ts", "skip", "count"]], "description": [["description", "self", "describe_training_job", "job_name"], ["secondary_training_status_changed", "description", "last_description"], ["self", "log", "info", "secondary_training_status_message", "description", "last_description"], ["last_description", "description"], ["status", "description"]], "last_describe_job_call": [["state", "last_description", "last_describe_job_call"], ["time", "monotonic", "last_describe_job_call"], ["last_describe_job_call", "time", "monotonic"], ["state", "last_description", "last_describe_job_call"]], "last_description": [["state", "last_description", "last_describe_job_call"], ["secondary_training_status_changed", "description", "last_description"], ["self", "log", "info", "secondary_training_status_message", "description", "last_description"], ["last_description", "description"], ["state", "last_description", "last_describe_job_call"]], "log_group": [["streams", "logs_conn", "describe_log_streams", "logGroupName", "log_group", "logStreamNamePrefix", "job_name", "orderBy", "limit", "instance_count"], ["self", "multi_stream_iter", "log_group", "stream_names", "positions"]], "logs_conn": [["logs_conn", "self", "logs_hook", "get_conn"], ["streams", "logs_conn", "describe_log_streams", "logGroupName", "log_group", "logStreamNamePrefix", "job_name", "orderBy", "limit", "instance_count"]], "state": [["state", "LogState", "COMPLETE"], ["state", "last_description", "last_describe_job_call"], ["state", "LogState", "JOB_COMPLETE"], ["state", "LogState", "COMPLETE"], ["state", "LogState", "JOB_COMPLETE"], ["state", "last_description", "last_describe_job_call"]], "status": [["status", "description"], ["status", "self", "non_terminal_states"]], "stream_names": [["len", "stream_names", "instance_count"], ["stream_names", "s", "s", "streams"], ["positions", "update", "s", "Position", "timestamp", "skip", "s", "stream_names", "s", "positions"], ["len", "stream_names"], ["self", "multi_stream_iter", "log_group", "stream_names", "positions"], ["ts", "count", "positions", "stream_names", "idx"], ["positions", "stream_names", "idx", "Position", "timestamp", "ts", "skip", "count"], ["positions", "stream_names", "idx", "Position", "timestamp", "event", "skip"]], "streams": [["streams", "logs_conn", "describe_log_streams", "logGroupName", "log_group", "logStreamNamePrefix", "job_name", "orderBy", "limit", "instance_count"], ["stream_names", "s", "s", "streams"]], "ts": [["ts", "count", "positions", "stream_names", "idx"], ["event", "ts"], ["positions", "stream_names", "idx", "Position", "timestamp", "ts", "skip", "count"]]}, "name": "describe_training_job_with_log", "params": {"instance_count": "builtins.int", "job_name": "builtins.str", "last_describe_job_call": "builtins.float", "last_description": "builtins.dict", "positions": "", "self": "", "state": "builtins.int", "stream_names": "builtins.list"}, "params_descr": {"instance_count": "", "job_name": "", "last_describe_job_call": "", "last_description": "", "positions": "", "self": "", "state": "", "stream_names": ""}, "params_occur": {"instance_count": [["len", "stream_names", "instance_count"], ["streams", "logs_conn", "describe_log_streams", "logGroupName", "log_group", "logStreamNamePrefix", "job_name", "orderBy", "limit", "instance_count"]], "job_name": [["streams", "logs_conn", "describe_log_streams", "logGroupName", "log_group", "logStreamNamePrefix", "job_name", "orderBy", "limit", "instance_count"], ["description", "self", "describe_training_job", "job_name"]], "last_describe_job_call": [["state", "last_description", "last_describe_job_call"], ["time", "monotonic", "last_describe_job_call"], ["last_describe_job_call", "time", "monotonic"], ["state", "last_description", "last_describe_job_call"]], "last_description": [["state", "last_description", "last_describe_job_call"], ["secondary_training_status_changed", "description", "last_description"], ["self", "log", "info", "secondary_training_status_message", "description", "last_description"], ["last_description", "description"], ["state", "last_description", "last_describe_job_call"]], "positions": [["positions", "update", "s", "Position", "timestamp", "skip", "s", "stream_names", "s", "positions"], ["self", "multi_stream_iter", "log_group", "stream_names", "positions"], ["ts", "count", "positions", "stream_names", "idx"], ["positions", "stream_names", "idx", "Position", "timestamp", "ts", "skip", "count"], ["positions", "stream_names", "idx", "Position", "timestamp", "event", "skip"]], "self": [["logs_conn", "self", "logs_hook", "get_conn"], ["self", "multi_stream_iter", "log_group", "stream_names", "positions"], ["self", "log", "info", "event"], ["description", "self", "describe_training_job", "job_name"], ["self", "log", "info", "secondary_training_status_message", "description", "last_description"], ["status", "self", "non_terminal_states"]], "state": [["state", "LogState", "COMPLETE"], ["state", "last_description", "last_describe_job_call"], ["state", "LogState", "JOB_COMPLETE"], ["state", "LogState", "COMPLETE"], ["state", "LogState", "JOB_COMPLETE"], ["state", "last_description", "last_describe_job_call"]], "stream_names": [["len", "stream_names", "instance_count"], ["stream_names", "s", "s", "streams"], ["positions", "update", "s", "Position", "timestamp", "skip", "s", "stream_names", "s", "positions"], ["len", "stream_names"], ["self", "multi_stream_iter", "log_group", "stream_names", "positions"], ["ts", "count", "positions", "stream_names", "idx"], ["positions", "stream_names", "idx", "Position", "timestamp", "ts", "skip", "count"], ["positions", "stream_names", "idx", "Position", "timestamp", "event", "skip"]]}, "params_p": {"args": [], "instance_count": [["int", 0.5225229506972286], ["str", 0.18774430877677897], ["Tuple[str]", 0.12001649645850475], ["bool", 0.09084839914974717]], "job_name": [["str", 0.1991764455912397], ["bool", 0.19590130163405794], ["int", 0.10083260238925015], ["Optional[bool]", 0.095868121299428], ["List[str]", 0.09483440733883199]], "kwargs": [], "last_describe_job_call": [["bool", 0.3483592456457895], ["str", 0.18630572498556308], ["utils.CWLObjectType", 0.08708981141144738], ["float", 0.08708981141144738]], "last_description": [["Optional[str]", 0.30747192722357086], ["bool", 0.2875080729855799], ["int", 0.20003871497513537], ["float", 0.10249064240785695], ["Optional[int]", 0.10249064240785695]], "positions": [["dict", 0.2008158644677083], ["Optional[str]", 0.1418107709983975], ["int", 0.10040793223385415], ["str", 0.10040793223385415], ["bool", 0.10040793223385415], ["list", 0.08363416327966743]], "self": [], "state": [["str", 0.5128956048862457], ["int", 0.22778876705097006], ["Optional[\"Address\"]", 0.16770186158378933], ["bytes", 0.09161376647899487]], "stream_names": [["str", 0.48924803871304406], ["bool", 0.28927226313301335], ["Optional[str]", 0.11117124628682978]]}, "q_name": "SageMakerHook.describe_training_job_with_log", "ret_exprs": ["return state, last_description, last_describe_job_call", "return state, last_description, last_describe_job_call"], "ret_type": "", "ret_type_p": [["bool", 0.09864109370310888], ["int", 0.09333956365825445], ["str", 0.08311672505396464]], "variables": {"count": "", "description": "", "last_describe_job_call": "", "last_description": "", "log_group": "", "logs_conn": "", "state": "", "status": "", "stream_names": "", "streams": "", "ts": ""}, "variables_p": {"count": [["int", 0.35672544672366213], ["str", 0.1465586238787429], ["Tuple[str, str, str, str, str, str, str]", 0.1173277213118875], ["Optional[Match[str]]", 0.11489038209682349], ["datetime.datetime", 0.09996747325246104], ["float", 0.0858665605865605], ["functools.partial[Any]", 0.07866379214986251]], "description": [["str", 0.9065789175897505], ["Optional[str]", 0.0934210824102496]], "last_describe_job_call": [["str", 0.07753853580174797], ["float", 0.07157222754176099]], "last_description": [["Tuple[float, float]", 0.19475925606810862]], "log_group": [["List[Tuple[Any, int]]", 0.4079479536610737], ["str", 0.2440403138473597], ["Dict[str, str]", 0.10045145761600431], ["Union[Literal, str]", 0.08365478344955998], ["Dict[str, Any]", 0.07984784509994351]], "logs_conn": [], "state": [["str", 0.5188757340170995], ["int", 0.2957534133459201], ["Dict[str, str]", 0.09428257706031283]], "status": [["str", 0.6976610400959556], ["List[str]", 0.2192805683859376]], "stream_names": [["str", 1.0]], "streams": [["str", 0.6315955458390636], ["float", 0.09828793207494843], ["int", 0.08976287459690979]], "ts": [["str", 0.5089386846219697], ["Set[str]", 0.09565991262775878]]}}, {"docstring": {"func": "Get the tuning job info associated with the name.", "long_descr": ".. seealso::\n    - :external+boto3:py:meth:`SageMaker.Client.describe_hyper_parameter_tuning_job`", "ret": "A dict contains all the tuning job info"}, "fn_lc": [[616, 4], [625, 100]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "describe_tuning_job", "params": {"name": "builtins.str", "self": ""}, "params_descr": {"name": "the name of the tuning job", "self": ""}, "params_occur": {"name": [["self", "get_conn", "describe_hyper_parameter_tuning_job", "HyperParameterTuningJobName", "name"]], "self": [["self", "get_conn", "describe_hyper_parameter_tuning_job", "HyperParameterTuningJobName", "name"]]}, "params_p": {"args": [], "kwargs": [], "name": [["str", 0.6158362784945078], ["Tuple[int]", 0.08879587402254323]], "self": []}, "q_name": "SageMakerHook.describe_tuning_job", "ret_exprs": ["return self.get_conn().describe_hyper_parameter_tuning_job(HyperParameterTuningJobName=name)"], "ret_type": "builtins.dict", "ret_type_p": [["str", 0.3938324612734368], ["int", 0.298205222405817], ["bool", 0.10141724244490244]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Get the SageMaker model info associated with the name.", "long_descr": null, "ret": "A dict contains all the model info"}, "fn_lc": [[627, 4], [633, 61]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "describe_model", "params": {"name": "builtins.str", "self": ""}, "params_descr": {"name": "the name of the SageMaker model", "self": ""}, "params_occur": {"name": [["self", "get_conn", "describe_model", "ModelName", "name"]], "self": [["self", "get_conn", "describe_model", "ModelName", "name"]]}, "params_p": {"args": [], "kwargs": [], "name": [["str", 0.7950760300951786], ["float", 0.1140893111824586], ["Optional[int]", 0.0908346587223628]], "self": []}, "q_name": "SageMakerHook.describe_model", "ret_exprs": ["return self.get_conn().describe_model(ModelName=name)"], "ret_type": "builtins.dict", "ret_type_p": [["Optional[str]", 0.1281156701527494], ["Optional[Exception]", 0.10927496858571663], ["Dict[str, Dict[str, Any]]", 0.0979503985160804], ["Dict[str, Any]", 0.0979503985160804], ["Optional[Iterable[int]]", 0.09749217066113944], ["Optional[int]", 0.09529554216662958], ["Type", 0.09433991421236126]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Get the transform job info associated with the name.", "long_descr": ".. seealso::\n    - :external+boto3:py:meth:`SageMaker.Client.describe_transform_job`", "ret": "A dict contains all the transform job info"}, "fn_lc": [[635, 4], [644, 76]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "describe_transform_job", "params": {"name": "builtins.str", "self": ""}, "params_descr": {"name": "the name of the transform job", "self": ""}, "params_occur": {"name": [["self", "get_conn", "describe_transform_job", "TransformJobName", "name"]], "self": [["self", "get_conn", "describe_transform_job", "TransformJobName", "name"]]}, "params_p": {"args": [], "kwargs": [], "name": [["str", 0.7780064614462676], ["int", 0.11812160799775737], ["float", 0.1038719305559752]], "self": []}, "q_name": "SageMakerHook.describe_transform_job", "ret_exprs": ["return self.get_conn().describe_transform_job(TransformJobName=name)"], "ret_type": "builtins.dict", "ret_type_p": [["int", 0.30507176519492285], ["str", 0.30155569145666233], ["bool", 0.09789640643310017], ["Optional[BaseException]", 0.09789640643310017], ["Union[str, Tuple[str, ...]]", 0.09789640643310017]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Get the processing job info associated with the name.", "long_descr": ".. seealso::\n    - :external+boto3:py:meth:`SageMaker.Client.describe_processing_job`", "ret": "A dict contains all the processing job info"}, "fn_lc": [[646, 4], [655, 78]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "describe_processing_job", "params": {"name": "builtins.str", "self": ""}, "params_descr": {"name": "the name of the processing job", "self": ""}, "params_occur": {"name": [["self", "get_conn", "describe_processing_job", "ProcessingJobName", "name"]], "self": [["self", "get_conn", "describe_processing_job", "ProcessingJobName", "name"]]}, "params_p": {"args": [], "kwargs": [], "name": [["str", 0.7780064614462676], ["int", 0.11812160799775737], ["float", 0.1038719305559752]], "self": []}, "q_name": "SageMakerHook.describe_processing_job", "ret_exprs": ["return self.get_conn().describe_processing_job(ProcessingJobName=name)"], "ret_type": "builtins.dict", "ret_type_p": [["int", 0.30507176519492285], ["str", 0.30155569145666233], ["bool", 0.09789640643310017], ["Optional[BaseException]", 0.09789640643310017], ["Union[str, Tuple[str, ...]]", 0.09789640643310017]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Get the endpoint config info associated with the name.", "long_descr": ".. seealso::\n    - :external+boto3:py:meth:`SageMaker.Client.describe_endpoint_config`", "ret": "A dict contains all the endpoint config info"}, "fn_lc": [[657, 4], [666, 80]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "describe_endpoint_config", "params": {"name": "builtins.str", "self": ""}, "params_descr": {"name": "the name of the endpoint config", "self": ""}, "params_occur": {"name": [["self", "get_conn", "describe_endpoint_config", "EndpointConfigName", "name"]], "self": [["self", "get_conn", "describe_endpoint_config", "EndpointConfigName", "name"]]}, "params_p": {"args": [], "kwargs": [], "name": [["str", 1.0]], "self": []}, "q_name": "SageMakerHook.describe_endpoint_config", "ret_exprs": ["return self.get_conn().describe_endpoint_config(EndpointConfigName=name)"], "ret_type": "builtins.dict", "ret_type_p": [["cmk.utils.type_defs.HostName", 0.10213584282223608], ["cmk.utils.type_defs.ServiceName", 0.10213584282223608], ["bool", 0.09669223545738787], ["str", 0.08775723634270158]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Get the description of an endpoint.", "long_descr": ".. seealso::\n    - :external+boto3:py:meth:`SageMaker.Client.describe_endpoint`", "ret": "A dict contains all the endpoint info"}, "fn_lc": [[668, 4], [677, 67]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "describe_endpoint", "params": {"name": "builtins.str", "self": ""}, "params_descr": {"name": "the name of the endpoint", "self": ""}, "params_occur": {"name": [["self", "get_conn", "describe_endpoint", "EndpointName", "name"]], "self": [["self", "get_conn", "describe_endpoint", "EndpointName", "name"]]}, "params_p": {"args": [], "kwargs": [], "name": [["str", 0.7947230450802067], ["float", 0.10855794507091011], ["Optional[int]", 0.09671900984888306]], "self": []}, "q_name": "SageMakerHook.describe_endpoint", "ret_exprs": ["return self.get_conn().describe_endpoint(EndpointName=name)"], "ret_type": "builtins.dict", "ret_type_p": [["str", 0.18683743955427698], ["type", 0.13258016154778754], ["AbstractSet[str]", 0.09251749983694409], ["Callable", 0.09234945982207456]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Check status of a SageMaker resource.", "long_descr": null, "ret": "response of describe call after resource is done"}, "fn_lc": [[679, 4], [731, 23]], "fn_var_ln": {"non_terminal_states": [[704, 12], [704, 31]], "response": [[713, 16], [713, 24]], "sec": [[706, 8], [706, 11]], "status": [[714, 16], [714, 22]]}, "fn_var_occur": {"non_terminal_states": [["non_terminal_states", "self", "non_terminal_states"], ["status", "non_terminal_states"]], "response": [["response", "describe_function", "job_name"], ["status", "response", "key"], ["AirflowException", "response"]], "sec": [["sec", "check_interval"], ["self", "log", "info", "sec", "status"], ["max_ingestion_time", "sec", "max_ingestion_time"]], "status": [["status", "response", "key"], ["self", "log", "info", "sec", "status"], ["status", "self", "failed_states"], ["status", "non_terminal_states"]]}, "name": "check_status", "params": {"check_interval": "builtins.int", "describe_function": "typing.Callable", "job_name": "builtins.str", "key": "builtins.str", "max_ingestion_time": "int | None", "non_terminal_states": "set | None", "self": ""}, "params_descr": {"check_interval": "the time interval in seconds which the operator\nwill check the status of any SageMaker resource", "describe_function": "the function used to retrieve the status", "job_name": "name of the resource to check status, can be a job but\nalso pipeline for instance.", "key": "the key of the response dict that points to the state", "max_ingestion_time": "the maximum ingestion time in seconds. Any\nSageMaker resources that run longer than this will fail. Setting\nthis to None implies no timeout for any SageMaker resource.", "non_terminal_states": "the set of nonterminal states", "self": ""}, "params_occur": {"check_interval": [["time", "sleep", "check_interval"], ["sec", "check_interval"]], "describe_function": [["response", "describe_function", "job_name"]], "job_name": [["response", "describe_function", "job_name"]], "key": [["status", "response", "key"]], "max_ingestion_time": [["max_ingestion_time", "sec", "max_ingestion_time"], ["AirflowException", "max_ingestion_time"]], "non_terminal_states": [["non_terminal_states", "self", "non_terminal_states"], ["status", "non_terminal_states"]], "self": [["non_terminal_states", "self", "non_terminal_states"], ["self", "log", "info", "sec", "status"], ["status", "self", "failed_states"], ["self", "log", "info"]]}, "params_p": {"args": [], "check_interval": [["int", 0.40486113303025484], ["str", 0.3052132011727461], ["Optional[str]", 0.18440833714442537]], "describe_function": [["str", 0.8900127766919412], ["cmk.utils.type_defs.HostNameConditions", 0.10998722330805864]], "job_name": [["str", 0.8900127766919412], ["cmk.utils.type_defs.HostNameConditions", 0.10998722330805864]], "key": [["str", 0.8961157565520755], ["bool", 0.10388424344792457]], "kwargs": [], "max_ingestion_time": [["Optional[int]", 0.5792265952443753], ["float", 0.18811836697792436], ["datetime.datetime", 0.13542412068825446], ["Optional[str]", 0.09723091708944588]], "non_terminal_states": [["str", 0.8298687050481581], ["int", 0.17013129495184187]], "self": []}, "q_name": "SageMakerHook.check_status", "ret_exprs": ["return response"], "ret_type": "builtins.dict", "ret_type_p": [["dict", 0.2804514712927131], ["List[str]", 0.1831014995727467], ["Optional[str]", 0.17091243916377316], ["int", 0.14700327614248968], ["bool", 0.07574816975252874]], "variables": {"non_terminal_states": "", "response": "", "sec": "", "status": ""}, "variables_p": {"non_terminal_states": [["Dict[str, str]", 0.18761659814399484], ["Dict[str, Any]", 0.17951531731677378], ["str", 0.15547367573092324], ["List[str]", 0.10164447443411606], ["Tuple[str, str]", 0.09530814527904832], ["Optional[Literal[False]]", 0.08977813359387611]], "response": [["Dict[str, Union[Any, Any, Any, Any, Any, Any, Any]]", 0.15004572698625013], ["Dict[str, Type[Any]]", 0.0896466125976482], ["Dict[Any, List[Any]]", 0.08917652324078434], ["bytes", 0.08455511128842516]], "sec": [["str", 0.2262846698657054], ["datetime.timedelta", 0.10619696366724485], ["int", 0.08615060999668055]], "status": [["str", 0.10314485299753415], ["Dict[str, Any]", 0.0923222500116911], ["list", 0.08386659895982651], ["Dict[str, str]", 0.08359556187040329]]}}, {"docstring": {"func": "Display logs for a given training job.", "long_descr": "Optionally tailing them until the job is complete.", "ret": null}, "fn_lc": [[733, 4], [820, 89]], "fn_var_ln": {"billable_time": [[817, 12], [817, 25]], "description": [[757, 8], [757, 19]], "instance_count": [[759, 8], [759, 22]], "job_already_completed": [[765, 8], [765, 29]], "last_describe_job_call": [[796, 37], [796, 59]], "last_description": [[796, 19], [796, 35]], "positions": [[763, 8], [763, 17]], "reason": [[815, 16], [815, 22]], "sec": [[756, 8], [756, 11]], "state": [[796, 12], [796, 17]], "status": [[813, 12], [813, 18]], "stream_names": [[762, 8], [762, 20]]}, "fn_var_occur": {"billable_time": [["billable_time", "last_description", "last_description", "instance_count"], ["self", "log", "info", "int", "billable_time", "total_seconds"]], "description": [["description", "self", "describe_training_job", "job_name"], ["self", "log", "info", "secondary_training_status_message", "description", "None"], ["instance_count", "description"], ["status", "description"], ["last_description", "description"]], "instance_count": [["instance_count", "description"], ["state", "last_description", "last_describe_job_call", "self", "describe_training_job_with_log", "job_name", "positions", "stream_names", "instance_count", "state", "last_description", "last_describe_job_call"], ["billable_time", "last_description", "last_description", "instance_count"]], "job_already_completed": [["job_already_completed", "status", "non_terminal_states"], ["state", "LogState", "TAILING", "wait_for_completion", "job_already_completed", "LogState", "COMPLETE"]], "last_describe_job_call": [["last_describe_job_call", "time", "monotonic"], ["state", "last_description", "last_describe_job_call", "self", "describe_training_job_with_log", "job_name", "positions", "stream_names", "instance_count", "state", "last_description", "last_describe_job_call"]], "last_description": [["last_description", "description"], ["state", "last_description", "last_describe_job_call", "self", "describe_training_job_with_log", "job_name", "positions", "stream_names", "instance_count", "state", "last_description", "last_describe_job_call"], ["status", "last_description"], ["reason", "last_description", "get"], ["billable_time", "last_description", "last_description", "instance_count"]], "positions": [["positions", "builtins", "dict"], ["state", "last_description", "last_describe_job_call", "self", "describe_training_job_with_log", "job_name", "positions", "stream_names", "instance_count", "state", "last_description", "last_describe_job_call"]], "reason": [["reason", "last_description", "get"], ["AirflowException", "job_name", "status", "reason"]], "sec": [["sec", "check_interval"], ["max_ingestion_time", "sec", "max_ingestion_time"]], "state": [["state", "LogState", "TAILING", "wait_for_completion", "job_already_completed", "LogState", "COMPLETE"], ["state", "last_description", "last_describe_job_call", "self", "describe_training_job_with_log", "job_name", "positions", "stream_names", "instance_count", "state", "last_description", "last_describe_job_call"], ["state", "LogState", "COMPLETE"]], "status": [["status", "description"], ["job_already_completed", "status", "non_terminal_states"], ["status", "last_description"], ["status", "failed_states"], ["AirflowException", "job_name", "status", "reason"]], "stream_names": [["stream_names", "builtins", "list"], ["state", "last_description", "last_describe_job_call", "self", "describe_training_job_with_log", "job_name", "positions", "stream_names", "instance_count", "state", "last_description", "last_describe_job_call"]]}, "name": "check_training_status_with_log", "params": {"check_interval": "builtins.int", "failed_states": "builtins.set", "job_name": "builtins.str", "max_ingestion_time": "int | None", "non_terminal_states": "builtins.set", "self": "", "wait_for_completion": "builtins.bool"}, "params_descr": {"check_interval": "The interval in seconds between polling for new log entries and job completion", "failed_states": "the set of failed states", "job_name": "name of the training job to check status and display logs for", "max_ingestion_time": "the maximum ingestion time in seconds. Any\nSageMaker jobs that run longer than this will fail. Setting this to\nNone implies no timeout for any SageMaker job.", "non_terminal_states": "the set of non_terminal states", "self": "", "wait_for_completion": "Whether to keep looking for new log entries\nuntil the job completes"}, "params_occur": {"check_interval": [["time", "sleep", "check_interval"], ["sec", "check_interval"]], "failed_states": [["status", "failed_states"]], "job_name": [["description", "self", "describe_training_job", "job_name"], ["state", "last_description", "last_describe_job_call", "self", "describe_training_job_with_log", "job_name", "positions", "stream_names", "instance_count", "state", "last_description", "last_describe_job_call"], ["AirflowException", "job_name", "status", "reason"]], "max_ingestion_time": [["max_ingestion_time", "sec", "max_ingestion_time"], ["AirflowException", "max_ingestion_time"]], "non_terminal_states": [["job_already_completed", "status", "non_terminal_states"]], "self": [["description", "self", "describe_training_job", "job_name"], ["self", "log", "info", "secondary_training_status_message", "description", "None"], ["state", "last_description", "last_describe_job_call", "self", "describe_training_job_with_log", "job_name", "positions", "stream_names", "instance_count", "state", "last_description", "last_describe_job_call"], ["self", "log", "info", "int", "billable_time", "total_seconds"]], "wait_for_completion": [["state", "LogState", "TAILING", "wait_for_completion", "job_already_completed", "LogState", "COMPLETE"]]}, "params_p": {"args": [], "check_interval": [["str", 0.5982089448004326], ["bool", 0.29567673316733367]], "failed_states": [["str", 0.3046250785777311], ["bool", 0.2790666764298817], ["Iterable[str]", 0.0752644357540995], ["int", 0.06197713280840586]], "job_name": [["str", 0.6935679586936756], ["Optional[str]", 0.30643204130632423]], "kwargs": [], "max_ingestion_time": [["Optional[int]", 0.6381410164753598], ["Optional[str]", 0.09495410303435516], ["int", 0.09179465857562628]], "non_terminal_states": [["str", 0.5113229195107598], ["int", 0.25443089300782834], ["bool", 0.14565738506311915]], "self": [], "wait_for_completion": [["Optional[bool]", 0.30972044114245534], ["str", 0.22078607959871654], ["Optional[str]", 0.09911363292436173], ["int", 0.08298140465052892]]}, "q_name": "SageMakerHook.check_training_status_with_log", "ret_exprs": [], "ret_type": "", "variables": {"billable_time": "", "description": "", "instance_count": "", "job_already_completed": "", "last_describe_job_call": "", "last_description": "", "positions": "builtins.dict", "reason": "", "sec": "", "state": "", "status": "", "stream_names": "builtins.list"}, "variables_p": {"billable_time": [["int", 0.4228096106952666], ["float", 0.17309025003284184], ["str", 0.11155854128757382], ["Dict[str, int]", 0.10972369873431283], ["pringles.utils.vtime.VirtualTime", 0.10158527940777227], ["raiden.utils.PaymentAmount", 0.08123261984223251]], "description": [["str", 1.0]], "instance_count": [["List[List[int]]", 0.11613326313722036], ["dict", 0.10854543631466661], ["Dict[str, List[Any]]", 0.09437680584788534], ["Dict[str, List[str]]", 0.09415726814381524], ["list", 0.09015612260316931]], "job_already_completed": [], "last_describe_job_call": [["pydcop.utils.expressionfunction.ExpressionFunction", 0.3290576091964953], ["int", 0.09294385907297106]], "last_description": [["str", 0.2742621678735503], ["Tuple[Any, Any, Any]", 0.0969104145458561], ["tarfile.TarFile", 0.09211670757374174]], "positions": [["dict", 1.0]], "reason": [["int", 0.37919788483729877], ["dict", 0.08982114472586422], ["Dict[str, str]", 0.08910757351776302], ["List[str]", 0.08421170779259285], ["str", 0.08421170779259285], ["Tuple[Literal, Literal]", 0.07500374427580776], ["Set[str]", 0.0702251667451298]], "sec": [["int", 0.4945729251726084], ["Union[Literal, Literal]", 0.12153284972734266], ["str", 0.10292327638601446], ["Tuple[int, int, int]", 0.09843063873753752], ["Tuple[int, int]", 0.09843063873753752], ["List[str]", 0.08410967123895945]], "state": [["Optional[raiden.utils.TokenNetworkAddress]", 0.08220852392416936], ["str", 0.08110942882525143]], "status": [["int", 0.19273221579624966], ["str", 0.12111731003721823]], "stream_names": [["list", 0.9156894922543086]]}}, {"docstring": {"func": "Call boto3's ``list_training_jobs``.", "long_descr": "The training job name and max results are configurable via arguments.\nOther arguments are not, and should be provided via kwargs. Note that\nboto3 expects these in CamelCase, for example:\n\n.. code-block:: python\n\n    list_training_jobs(name_contains=\"myjob\", StatusEquals=\"Failed\")\n\n.. seealso::\n    - :external+boto3:py:meth:`SageMaker.Client.list_training_jobs`", "ret": "results of the list_training_jobs request"}, "fn_lc": [[822, 4], [848, 22]], "fn_var_ln": {"config": [[843, 8], [843, 14]], "list_training_jobs_request": [[844, 8], [844, 34]], "max_results": [[843, 16], [843, 27]], "results": [[845, 8], [845, 15]]}, "fn_var_occur": {"config": [["config", "max_results", "self", "_preprocess_list_request_args", "name_contains", "max_results", "kwargs"], ["list_training_jobs_request", "partial", "self", "get_conn", "list_training_jobs", "config"]], "list_training_jobs_request": [["list_training_jobs_request", "partial", "self", "get_conn", "list_training_jobs", "config"], ["results", "self", "_list_request", "list_training_jobs_request", "max_results", "max_results"]], "max_results": [["config", "max_results", "self", "_preprocess_list_request_args", "name_contains", "max_results", "kwargs"], ["results", "self", "_list_request", "list_training_jobs_request", "max_results", "max_results"]], "results": [["results", "self", "_list_request", "list_training_jobs_request", "max_results", "max_results"]]}, "name": "list_training_jobs", "params": {"kwargs": "", "max_results": "int | None", "name_contains": "str | None", "self": ""}, "params_descr": {"kwargs": "(optional) kwargs to boto3's list_training_jobs method", "max_results": "(optional) maximum number of results to return. None returns infinite results", "name_contains": "(optional) partial name to match", "self": ""}, "params_occur": {"kwargs": [["config", "max_results", "self", "_preprocess_list_request_args", "name_contains", "max_results", "kwargs"]], "max_results": [["config", "max_results", "self", "_preprocess_list_request_args", "name_contains", "max_results", "kwargs"], ["results", "self", "_list_request", "list_training_jobs_request", "max_results", "max_results"]], "name_contains": [["config", "max_results", "self", "_preprocess_list_request_args", "name_contains", "max_results", "kwargs"]], "self": [["config", "max_results", "self", "_preprocess_list_request_args", "name_contains", "max_results", "kwargs"], ["list_training_jobs_request", "partial", "self", "get_conn", "list_training_jobs", "config"], ["results", "self", "_list_request", "list_training_jobs_request", "max_results", "max_results"]]}, "params_p": {"args": [], "kwargs": [], "max_results": [["str", 0.3158031583652138], ["bool", 0.20036078715206262], ["cmk.utils.type_defs.SectionName", 0.11879083751069883], ["Tuple[str, Dict[str, Any]]", 0.08432676631868259], ["Optional[str]", 0.08374772306605434]], "name_contains": [["Tuple[str]", 0.28649856629765985], ["str", 0.2276286627887722], ["bool", 0.19420771330741649], ["Optional[bool]", 0.09549952209921996]], "self": []}, "q_name": "SageMakerHook.list_training_jobs", "ret_exprs": ["return results"], "ret_type": "builtins.list[builtins.dict]", "ret_type_p": [["str", 0.3130793686390235], ["object", 0.09813151876585378], ["list", 0.09813151876585378], ["List[str]", 0.09813151876585378], ["Callable[..., None]", 0.09813151876585378]], "variables": {"config": "", "list_training_jobs_request": "", "max_results": "", "results": ""}, "variables_p": {"config": [["str", 0.19932262184182747], ["Dict[str, List[str]]", 0.19312511979856478], ["Dict[str, Union[dict, int]]", 0.1033827134568744], ["Type[Dict[str, Any]]", 0.08834669394802389]], "list_training_jobs_request": [], "max_results": [["str", 0.22450274396236286], ["Dict[str, Any]", 0.21747849457121476], ["int", 0.17813484036032118], ["Dict[str, Union[Any, Any]]", 0.08757109655520601]], "results": [["int", 0.5526615448430167], ["List[List[int]]", 0.2546174531585307], ["float", 0.10177529170787585]]}}, {"docstring": {"func": "Call boto3's ``list_transform_jobs``.", "long_descr": "The transform job name and max results are configurable via arguments.\nOther arguments are not, and should be provided via kwargs. Note that\nboto3 expects these in CamelCase, for example:\n\n.. code-block:: python\n\n    list_transform_jobs(name_contains=\"myjob\", StatusEquals=\"Failed\")\n\n.. seealso::\n    - :external+boto3:py:meth:`SageMaker.Client.list_transform_jobs`", "ret": "results of the list_transform_jobs request."}, "fn_lc": [[850, 4], [877, 22]], "fn_var_ln": {"config": [[872, 8], [872, 14]], "list_transform_jobs_request": [[873, 8], [873, 35]], "max_results": [[872, 16], [872, 27]], "results": [[874, 8], [874, 15]]}, "fn_var_occur": {"config": [["config", "max_results", "self", "_preprocess_list_request_args", "name_contains", "max_results", "kwargs"], ["list_transform_jobs_request", "partial", "self", "get_conn", "list_transform_jobs", "config"]], "list_transform_jobs_request": [["list_transform_jobs_request", "partial", "self", "get_conn", "list_transform_jobs", "config"], ["results", "self", "_list_request", "list_transform_jobs_request", "max_results", "max_results"]], "max_results": [["config", "max_results", "self", "_preprocess_list_request_args", "name_contains", "max_results", "kwargs"], ["results", "self", "_list_request", "list_transform_jobs_request", "max_results", "max_results"]], "results": [["results", "self", "_list_request", "list_transform_jobs_request", "max_results", "max_results"]]}, "name": "list_transform_jobs", "params": {"kwargs": "", "max_results": "int | None", "name_contains": "str | None", "self": ""}, "params_descr": {"kwargs": "(optional) kwargs to boto3's list_transform_jobs method.", "max_results": "(optional) maximum number of results to return.\nNone returns infinite results.", "name_contains": "(optional) partial name to match.", "self": ""}, "params_occur": {"kwargs": [["config", "max_results", "self", "_preprocess_list_request_args", "name_contains", "max_results", "kwargs"]], "max_results": [["config", "max_results", "self", "_preprocess_list_request_args", "name_contains", "max_results", "kwargs"], ["results", "self", "_list_request", "list_transform_jobs_request", "max_results", "max_results"]], "name_contains": [["config", "max_results", "self", "_preprocess_list_request_args", "name_contains", "max_results", "kwargs"]], "self": [["config", "max_results", "self", "_preprocess_list_request_args", "name_contains", "max_results", "kwargs"], ["list_transform_jobs_request", "partial", "self", "get_conn", "list_transform_jobs", "config"], ["results", "self", "_list_request", "list_transform_jobs_request", "max_results", "max_results"]]}, "params_p": {"args": [], "kwargs": [], "max_results": [["str", 0.3158031583652138], ["bool", 0.20036078715206262], ["cmk.utils.type_defs.SectionName", 0.11879083751069883], ["Tuple[str, Dict[str, Any]]", 0.08432676631868259], ["Optional[str]", 0.08374772306605434]], "name_contains": [["Tuple[str]", 0.28649856629765985], ["str", 0.2276286627887722], ["bool", 0.19420771330741649], ["Optional[bool]", 0.09549952209921996]], "self": []}, "q_name": "SageMakerHook.list_transform_jobs", "ret_exprs": ["return results"], "ret_type": "builtins.list[builtins.dict]", "ret_type_p": [["str", 0.3130793686390235], ["object", 0.09813151876585378], ["list", 0.09813151876585378], ["List[str]", 0.09813151876585378], ["Callable[..., None]", 0.09813151876585378]], "variables": {"config": "", "list_transform_jobs_request": "", "max_results": "", "results": ""}, "variables_p": {"config": [["str", 0.19932262184182747], ["Dict[str, List[str]]", 0.19312511979856478], ["Dict[str, Union[dict, int]]", 0.1033827134568744], ["Type[Dict[str, Any]]", 0.08834669394802389]], "list_transform_jobs_request": [], "max_results": [["str", 0.22450274396236286], ["Dict[str, Any]", 0.21747849457121476], ["int", 0.17813484036032118], ["Dict[str, Union[Any, Any]]", 0.08757109655520601]], "results": [["int", 0.5526615448430167], ["List[List[int]]", 0.2546174531585307], ["float", 0.10177529170787585]]}}, {"docstring": {"func": "Call boto3's `list_processing_jobs`.", "long_descr": "All arguments should be provided via kwargs. Note that boto3 expects\nthese in CamelCase, for example:\n\n.. code-block:: python\n\n    list_processing_jobs(NameContains=\"myjob\", StatusEquals=\"Failed\")\n\n.. seealso::\n    - :external+boto3:py:meth:`SageMaker.Client.list_processing_jobs`", "ret": "results of the list_processing_jobs request"}, "fn_lc": [[879, 4], [899, 22]], "fn_var_ln": {"list_processing_jobs_request": [[895, 8], [895, 36]], "results": [[896, 8], [896, 15]]}, "fn_var_occur": {"list_processing_jobs_request": [["list_processing_jobs_request", "partial", "self", "get_conn", "list_processing_jobs", "kwargs"], ["results", "self", "_list_request", "list_processing_jobs_request", "max_results", "kwargs", "get"]], "results": [["results", "self", "_list_request", "list_processing_jobs_request", "max_results", "kwargs", "get"]]}, "name": "list_processing_jobs", "params": {"kwargs": "", "self": ""}, "params_descr": {"kwargs": "(optional) kwargs to boto3's list_training_jobs method", "self": ""}, "params_occur": {"kwargs": [["list_processing_jobs_request", "partial", "self", "get_conn", "list_processing_jobs", "kwargs"], ["results", "self", "_list_request", "list_processing_jobs_request", "max_results", "kwargs", "get"]], "self": [["list_processing_jobs_request", "partial", "self", "get_conn", "list_processing_jobs", "kwargs"], ["results", "self", "_list_request", "list_processing_jobs_request", "max_results", "kwargs", "get"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "SageMakerHook.list_processing_jobs", "ret_exprs": ["return results"], "ret_type": "builtins.list[builtins.dict]", "ret_type_p": [["str", 0.3130793686390235], ["object", 0.09813151876585378], ["list", 0.09813151876585378], ["List[str]", 0.09813151876585378], ["Callable[..., None]", 0.09813151876585378]], "variables": {"list_processing_jobs_request": "", "results": ""}, "variables_p": {"list_processing_jobs_request": [], "results": [["dict", 0.19809285270329174], ["telegram.utils.AsyncResult", 0.11588700445817468], ["str", 0.11302520442188106], ["Dict[str, Union[Any, Any, Any, Any]]", 0.09964194634204115], ["Dict[str, str]", 0.08727046112563673]]}}, {"docstring": {"func": "Preprocess arguments for boto3's ``list_*`` methods.", "long_descr": "It will turn arguments name_contains and max_results as boto3 compliant\nCamelCase format. This method also makes sure that these two arguments\nare only set once.", "ret": "Tuple with config dict to be passed to boto3's list_* method\nand max_results parameter"}, "fn_lc": [[901, 4], [932, 34]], "fn_var_ln": {"config": [[916, 8], [916, 14]], "max_results": [[927, 12], [927, 23]]}, "fn_var_occur": {"config": [["config", "name_contains"], ["config", "update", "kwargs"], ["config", "max_results"]], "max_results": [["max_results", "kwargs"], ["config", "max_results"]]}, "name": "_preprocess_list_request_args", "params": {"kwargs": "", "max_results": "int | None", "name_contains": "str | None", "self": ""}, "params_descr": {"kwargs": "(optional) kwargs to boto3's list_* method", "max_results": "the result key to iterate over", "name_contains": "boto3 function with arguments", "self": ""}, "params_occur": {"kwargs": [["kwargs", "kwargs", "None"], ["max_results", "kwargs"], ["config", "update", "kwargs"]], "max_results": [["max_results", "kwargs"], ["config", "max_results"]], "name_contains": [["config", "name_contains"]], "self": []}, "params_p": {"args": [], "kwargs": [], "max_results": [["int", 0.4098948345029693], ["bool", 0.29867205263069224], ["str", 0.19911470175379484], ["Tuple[int, int]", 0.09231841111254355]], "name_contains": [["str", 0.5760887651501755], ["Tuple[str, str]", 0.09928830892468171], ["float", 0.09022760261611797]], "self": []}, "q_name": "SageMakerHook._preprocess_list_request_args", "ret_exprs": ["return config, max_results"], "ret_type": "builtins.tuple[builtins.dict[builtins.str, typing.Any], int | None]", "ret_type_p": [["Optional[List[str]]", 0.18126860838182168], ["bool", 0.12155318012772715], ["str", 0.11926530370646189], ["Dict[str, str]", 0.11089653950402953], ["Sequence", 0.09593585241631881], ["List[Tuple[str, str, str, str, str, str, str]]", 0.09577787766606459]], "variables": {"config": "", "max_results": ""}, "variables_p": {"config": [["dict", 0.08687146423161073], ["Dict[str, Any]", 0.08288535021127834]], "max_results": [["int", 0.4787169126198747], ["Dict[int, int]", 0.16350001204626127], ["str", 0.1591047099640783], ["Type[Dict[str, Any]]", 0.10004137565913239], ["List[str]", 0.09863698971065325]]}}, {"docstring": {"func": "Process a list request to produce results.", "long_descr": "All AWS boto3 ``list_*`` requests return results in batches, and if the\nkey \"NextToken\" is contained in the result, there are more results to\nfetch. The default AWS batch size is 10, and configurable up to 100.\nThis function iteratively loads all results (or up to a given maximum).\n\nEach boto3 ``list_*`` function returns the results in a list with a\ndifferent name. The key of this structure must be given to iterate over\nthe results, e.g. \"TransformJobSummaries\" for ``list_transform_jobs()``.", "ret": "Results of the list_* request"}, "fn_lc": [[934, 4], [976, 50]], "fn_var_ln": {"kwargs": [[959, 12], [959, 18]], "next_token": [[976, 16], [976, 26]], "response": [[968, 12], [968, 20]], "results": [[955, 8], [955, 15]], "sagemaker_max_results": [[953, 8], [953, 29]]}, "fn_var_occur": {"kwargs": [["kwargs", "next_token"], ["kwargs", "sagemaker_max_results"], ["kwargs", "min", "max_results", "len", "results", "sagemaker_max_results"], ["response", "partial_func", "kwargs"]], "next_token": [["next_token", "None"], ["next_token", "None"], ["kwargs", "next_token"], ["next_token", "response"]], "response": [["response", "partial_func", "kwargs"], ["self", "log", "debug", "len", "response", "result_key"], ["results", "extend", "response", "result_key"], ["response", "max_results", "None", "len", "results", "max_results"], ["next_token", "response"]], "results": [["results", "builtins", "list", "builtins", "dict"], ["kwargs", "min", "max_results", "len", "results", "sagemaker_max_results"], ["results", "extend", "response", "result_key"], ["response", "max_results", "None", "len", "results", "max_results"]], "sagemaker_max_results": [["kwargs", "sagemaker_max_results"], ["kwargs", "min", "max_results", "len", "results", "sagemaker_max_results"]]}, "name": "_list_request", "params": {"max_results": "int | None", "partial_func": "typing.Callable", "result_key": "builtins.str", "self": ""}, "params_descr": {"max_results": "maximum number of results to return (None = infinite)", "partial_func": "boto3 function with arguments", "result_key": "the result key to iterate over", "self": ""}, "params_occur": {"max_results": [["max_results", "None"], ["kwargs", "min", "max_results", "len", "results", "sagemaker_max_results"], ["response", "max_results", "None", "len", "results", "max_results"]], "partial_func": [["response", "partial_func", "kwargs"]], "result_key": [["self", "log", "debug", "len", "response", "result_key"], ["results", "extend", "response", "result_key"]], "self": [["self", "log", "debug", "len", "response", "result_key"]]}, "params_p": {"args": [], "kwargs": [], "max_results": [["Optional[int]", 0.1932552740526001], ["str", 0.17348492159666146], ["bool", 0.14211456196990152], ["list", 0.10200234740031373]], "partial_func": [["int", 0.270921963315858], ["Callable", 0.22366801951448528], ["bool", 0.2111640767653351], ["Optional[str]", 0.08573703231473911]], "result_key": [["str", 0.40994921537233636], ["List[str]", 0.29207923055411916], ["Dict[str, Any]", 0.09299694638737639]], "self": []}, "q_name": "SageMakerHook._list_request", "ret_exprs": ["return results"], "ret_type": "builtins.list[builtins.dict]", "ret_type_p": [["Dict[str, Any]", 0.4136415241802959], ["dict", 0.31023114313522193], ["list", 0.17271695163940826]], "variables": {"kwargs": "", "next_token": "", "response": "", "results": "builtins.list[builtins.dict]", "sagemaker_max_results": ""}, "variables_p": {"kwargs": [["list", 0.2088537441997418], ["Set[str]", 0.10791927894707129], ["List[str]", 0.10256441874577718], ["List[Dict[str, Any]]", 0.09030862081253263], ["Dict[int, List[str]]", 0.09030862081253263], ["float", 0.09030862081253263]], "next_token": [["Optional[str]", 0.6204254030519745], ["str", 0.20872241494641486], ["bool", 0.10410344992691989], ["list", 0.06674873207469098]], "response": [["List[bytes]", 0.11919789667156723], ["Dict[str, Any]", 0.10042933091864592], ["list", 0.09826773042891121], ["dict", 0.09222894910851319], ["T", 0.09075806482986652]], "results": [["list", 0.9129812852197795], ["dict", 0.08701871478022036]], "sagemaker_max_results": [["list", 0.19211931474628507], ["List[List[Any]]", 0.10877091453085723], ["Set[str]", 0.10794411108841032], ["dict", 0.10525359400247253], ["int", 0.09323502671825319], ["List[int]", 0.09038903907805329], ["Pattern[str]", 0.08945345360935586]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[979, 4], [985, 56]], "fn_var_ln": {"pattern": [[984, 8], [984, 15]]}, "fn_var_occur": {"pattern": [["pattern", "re", "compile", "processing_job_name", "job_name_suffix"], ["pattern", "fullmatch", "found_name", "None"]]}, "name": "_name_matches_pattern", "params": {"found_name": "builtins.str", "job_name_suffix": "str | None", "processing_job_name": "builtins.str"}, "params_descr": {"found_name": "", "job_name_suffix": "", "processing_job_name": ""}, "params_occur": {"found_name": [["pattern", "fullmatch", "found_name", "None"]], "job_name_suffix": [["pattern", "re", "compile", "processing_job_name", "job_name_suffix"]], "processing_job_name": [["pattern", "re", "compile", "processing_job_name", "job_name_suffix"]]}, "params_p": {"args": [], "found_name": [["str", 0.7769090703942337], ["dict", 0.1142187302182621]], "job_name_suffix": [["str", 0.9086113469594848], ["bool", 0.09138865304051527]], "kwargs": [], "processing_job_name": [["str", 0.9086113469594848], ["bool", 0.09138865304051527]], "self": []}, "q_name": "SageMakerHook._name_matches_pattern", "ret_exprs": ["return pattern.fullmatch(found_name) is not None"], "ret_type": "builtins.bool", "ret_type_p": [["bool", 0.10720035300093729], ["str", 0.08665915937300274]], "variables": {"pattern": ""}, "variables_p": {"pattern": [["str", 0.7274408166267007], ["Union[Literal, str]", 0.1817061222488663], ["bool", 0.09085306112443314]]}}, {"docstring": {"func": "Get the number of processing jobs found with the provided name prefix.", "long_descr": null, "ret": "The number of processing jobs that start with the provided prefix."}, "fn_lc": [[987, 4], [1021, 17]], "fn_var_ln": {"jobs": [[1003, 12], [1003, 16]], "matching_jobs": [[1005, 12], [1005, 25]]}, "fn_var_occur": {"jobs": [["jobs", "self", "get_conn", "list_processing_jobs", "NameContains", "processing_job_name"], ["matching_jobs", "job", "job", "jobs", "self", "_name_matches_pattern", "processing_job_name", "job", "job_name_suffix"]], "matching_jobs": [["matching_jobs", "job", "job", "jobs", "self", "_name_matches_pattern", "processing_job_name", "job", "job_name_suffix"], ["len", "matching_jobs"]]}, "name": "count_processing_jobs_by_name", "params": {"job_name_suffix": "str | None", "processing_job_name": "builtins.str", "retries": "builtins.int", "self": "", "throttle_retry_delay": "builtins.int"}, "params_descr": {"job_name_suffix": "The optional suffix which may be appended to deduplicate an existing job name.", "processing_job_name": "The prefix to look for.", "retries": "The max number of times to retry.", "self": "", "throttle_retry_delay": "Seconds to wait if a ThrottlingException is hit."}, "params_occur": {"job_name_suffix": [["matching_jobs", "job", "job", "jobs", "self", "_name_matches_pattern", "processing_job_name", "job", "job_name_suffix"], ["self", "count_processing_jobs_by_name", "processing_job_name", "job_name_suffix", "throttle_retry_delay", "retries"]], "processing_job_name": [["jobs", "self", "get_conn", "list_processing_jobs", "NameContains", "processing_job_name"], ["matching_jobs", "job", "job", "jobs", "self", "_name_matches_pattern", "processing_job_name", "job", "job_name_suffix"], ["self", "count_processing_jobs_by_name", "processing_job_name", "job_name_suffix", "throttle_retry_delay", "retries"]], "retries": [["e", "response", "retries"], ["self", "count_processing_jobs_by_name", "processing_job_name", "job_name_suffix", "throttle_retry_delay", "retries"]], "self": [["jobs", "self", "get_conn", "list_processing_jobs", "NameContains", "processing_job_name"], ["matching_jobs", "job", "job", "jobs", "self", "_name_matches_pattern", "processing_job_name", "job", "job_name_suffix"], ["self", "count_processing_jobs_by_name", "processing_job_name", "job_name_suffix", "throttle_retry_delay", "retries"]], "throttle_retry_delay": [["time", "sleep", "throttle_retry_delay"], ["self", "count_processing_jobs_by_name", "processing_job_name", "job_name_suffix", "throttle_retry_delay", "retries"]]}, "params_p": {"args": [], "job_name_suffix": [["str", 0.4128365691773491], ["Sequence[str]", 0.1367731708504429], ["dict", 0.0877635701640012]], "kwargs": [], "processing_job_name": [["str", 0.8517711041850037], ["Optional[str]", 0.14822889581499654]], "retries": [["str", 1.0]], "self": [], "throttle_retry_delay": [["str", 0.8443588715326265]]}, "q_name": "SageMakerHook.count_processing_jobs_by_name", "ret_exprs": ["return len(matching_jobs)", "return 0", "return self.count_processing_jobs_by_name( processing_job_name, job_name_suffix, throttle_retry_delay * 2, retries - 1)"], "ret_type": "builtins.int", "ret_type_p": [["str", 0.10995208281305278], ["Type", 0.10405407622342891], ["int", 0.09287895093801955], ["bytes", 0.08690714013755034]], "variables": {"jobs": "", "matching_jobs": ""}, "variables_p": {"jobs": [["str", 0.5637278209832979], ["Dict[str, str]", 0.1202160210511616], ["int", 0.11158335968812026], ["Dict[Any, str]", 0.10640912854572832]], "matching_jobs": [["set", 0.3611819081052821], ["list", 0.1413155775328511], ["cmk.utils.rulesets.ruleset_matcher.RulesetMatchObject", 0.09971102638287428], ["Dict[str, Any]", 0.0992486745068658], ["str", 0.08749812151870702]]}}, {"docstring": {"func": "Delete a SageMaker model.", "long_descr": ".. seealso::\n    - :external+boto3:py:meth:`SageMaker.Client.delete_model`", "ret": null}, "fn_lc": [[1023, 4], [1035, 17]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "delete_model", "params": {"model_name": "builtins.str", "self": ""}, "params_descr": {"model_name": "name of the model", "self": ""}, "params_occur": {"model_name": [["self", "get_conn", "delete_model", "ModelName", "model_name"]], "self": [["self", "get_conn", "delete_model", "ModelName", "model_name"], ["self", "log", "error", "general_error"]]}, "params_p": {"args": [], "kwargs": [], "model_name": [["str", 0.9150016565881983], ["bool", 0.08499834341180172]], "self": []}, "q_name": "SageMakerHook.delete_model", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Get info about a SageMaker pipeline execution.", "long_descr": ".. seealso::\n    - :external+boto3:py:meth:`SageMaker.Client.describe_pipeline_execution`\n    - :external+boto3:py:meth:`SageMaker.Client.list_pipeline_execution_steps`", "ret": null}, "fn_lc": [[1037, 4], [1056, 92]], "fn_var_ln": {"count_by_state": [[1049, 12], [1049, 26]], "res": [[1048, 12], [1048, 15]], "running_steps": [[1050, 12], [1050, 25]]}, "fn_var_occur": {"count_by_state": [["count_by_state", "Counter", "s", "s", "res"], ["self", "log", "info", "count_by_state"]], "res": [["res", "self", "conn", "list_pipeline_execution_steps", "PipelineExecutionArn", "pipeline_exec_arn"], ["count_by_state", "Counter", "s", "s", "res"], ["running_steps", "s", "s", "res", "s"]], "running_steps": [["running_steps", "s", "s", "res", "s"], ["self", "log", "info", "running_steps"]]}, "name": "describe_pipeline_exec", "params": {"pipeline_exec_arn": "builtins.str", "self": "", "verbose": "builtins.bool"}, "params_descr": {"pipeline_exec_arn": "arn of the pipeline execution", "self": "", "verbose": "Whether to log details about the steps status in the pipeline execution"}, "params_occur": {"pipeline_exec_arn": [["res", "self", "conn", "list_pipeline_execution_steps", "PipelineExecutionArn", "pipeline_exec_arn"], ["self", "conn", "describe_pipeline_execution", "PipelineExecutionArn", "pipeline_exec_arn"]], "self": [["res", "self", "conn", "list_pipeline_execution_steps", "PipelineExecutionArn", "pipeline_exec_arn"], ["self", "log", "info", "count_by_state"], ["self", "log", "info", "running_steps"], ["self", "conn", "describe_pipeline_execution", "PipelineExecutionArn", "pipeline_exec_arn"]], "verbose": []}, "params_p": {"args": [], "kwargs": [], "pipeline_exec_arn": [["slice", 0.10508110841079599], ["dict", 0.09535649040294078]], "self": [], "verbose": [["int", 0.19999999999999998], ["str", 0.19999999999999998], ["Iterable['Context']", 0.09999999999999999], ["dict", 0.09999999999999999], ["bool", 0.09999999999999999]]}, "q_name": "SageMakerHook.describe_pipeline_exec", "ret_exprs": ["return self.conn.describe_pipeline_execution(PipelineExecutionArn=pipeline_exec_arn)"], "ret_type": "", "ret_type_p": [["float", 0.1763266508117007]], "variables": {"count_by_state": "", "res": "", "running_steps": ""}, "variables_p": {"count_by_state": [["str", 0.18696755963280354], ["bytes", 0.11618048686886084], ["List[str]", 0.10075766638560646], ["dict", 0.08324333860092094], ["raiden.utils.Any", 0.08191102636537516]], "res": [], "running_steps": [["int", 0.9183288695960842]]}}, {"docstring": {"func": "Start a new execution for a SageMaker pipeline.", "long_descr": ".. seealso::\n    - :external+boto3:py:meth:`SageMaker.Client.start_pipeline_execution`", "ret": "the ARN of the pipeline execution launched."}, "fn_lc": [[1058, 4], [1105, 18]], "fn_var_ln": {"arn": [[1096, 8], [1096, 11]], "formatted_params": [[1084, 8], [1084, 24]], "res": [[1087, 12], [1087, 15]]}, "fn_var_occur": {"arn": [["arn", "res"], ["self", "check_status", "arn", "p", "self", "describe_pipeline_exec", "p", "verbose", "check_interval", "non_terminal_states", "self", "pipeline_non_terminal_states"]], "formatted_params": [["formatted_params", "format_tags", "pipeline_params", "key_label"], ["res", "self", "conn", "start_pipeline_execution", "PipelineName", "pipeline_name", "PipelineExecutionDisplayName", "display_name", "PipelineParameters", "formatted_params"]], "res": [["res", "self", "conn", "start_pipeline_execution", "PipelineName", "pipeline_name", "PipelineExecutionDisplayName", "display_name", "PipelineParameters", "formatted_params"], ["arn", "res"]]}, "name": "start_pipeline", "params": {"check_interval": "builtins.int", "display_name": "builtins.str", "pipeline_name": "builtins.str", "pipeline_params": "dict | None", "self": "", "verbose": "builtins.bool", "wait_for_completion": "builtins.bool"}, "params_descr": {"check_interval": "How long to wait between checks for pipeline status when waiting for\ncompletion.", "display_name": "The name this pipeline execution will have in the UI. Doesn't need to be unique.", "pipeline_name": "Name of the pipeline to start (this is _not_ the ARN).", "pipeline_params": "Optional parameters for the pipeline.\nAll parameters supplied need to already be present in the pipeline definition.", "self": "", "verbose": "Whether to print steps details when waiting for completion.\nDefaults to true, consider turning off for pipelines that have thousands of steps.", "wait_for_completion": "Will only return once the pipeline is complete if true."}, "params_occur": {"check_interval": [["self", "check_status", "arn", "p", "self", "describe_pipeline_exec", "p", "verbose", "check_interval", "non_terminal_states", "self", "pipeline_non_terminal_states"]], "display_name": [["res", "self", "conn", "start_pipeline_execution", "PipelineName", "pipeline_name", "PipelineExecutionDisplayName", "display_name", "PipelineParameters", "formatted_params"]], "pipeline_name": [["res", "self", "conn", "start_pipeline_execution", "PipelineName", "pipeline_name", "PipelineExecutionDisplayName", "display_name", "PipelineParameters", "formatted_params"]], "pipeline_params": [["formatted_params", "format_tags", "pipeline_params", "key_label"]], "self": [["res", "self", "conn", "start_pipeline_execution", "PipelineName", "pipeline_name", "PipelineExecutionDisplayName", "display_name", "PipelineParameters", "formatted_params"], ["self", "log", "error", "ce"], ["self", "check_status", "arn", "p", "self", "describe_pipeline_exec", "p", "verbose", "check_interval", "non_terminal_states", "self", "pipeline_non_terminal_states"]], "verbose": [["self", "check_status", "arn", "p", "self", "describe_pipeline_exec", "p", "verbose", "check_interval", "non_terminal_states", "self", "pipeline_non_terminal_states"]], "wait_for_completion": []}, "params_p": {"args": [], "check_interval": [["bool", 0.2366232899689214], ["Optional[str]", 0.11667744471935951], ["Optional[int]", 0.11667744471935951], ["int", 0.08619742779890689]], "display_name": [["Optional[str]", 0.21341716533286648], ["Optional[float]", 0.12690316764419188], ["bool", 0.12690316764419188], ["Dict[str, 'LabwareDefinition']", 0.1002065109353769], ["str", 0.08651399768867458], ["Dict[str, Any]", 0.08651399768867458], ["Optional[List[str]]", 0.08651399768867458], ["datetime.datetime", 0.08651399768867458], ["List[Union[str, dataworkspaces.utils.lineage_utils.ResourceRef]]", 0.08651399768867458]], "kwargs": [], "pipeline_name": [["Optional[str]", 0.21341716533286648], ["Optional[float]", 0.12690316764419188], ["bool", 0.12690316764419188], ["Dict[str, 'LabwareDefinition']", 0.1002065109353769], ["str", 0.08651399768867458], ["Dict[str, Any]", 0.08651399768867458], ["Optional[List[str]]", 0.08651399768867458], ["datetime.datetime", 0.08651399768867458], ["List[Union[str, dataworkspaces.utils.lineage_utils.ResourceRef]]", 0.08651399768867458]], "pipeline_params": [["str", 0.5238235609365491], ["Optional[str]", 0.09089106534263426], ["bool", 0.08658799635709659], ["cmk.utils.type_defs.HostNameConditions", 0.08547469110390239]], "self": [], "verbose": [["bool", 0.2366232899689214], ["Optional[str]", 0.11667744471935951], ["Optional[int]", 0.11667744471935951], ["int", 0.08619742779890689]], "wait_for_completion": [["int", 0.6123389876115002], ["Iterable[float]", 0.20411299587050005], ["bool", 0.18354801651799985]]}, "q_name": "SageMakerHook.start_pipeline", "ret_exprs": ["return arn"], "ret_type": "builtins.str", "ret_type_p": [["int", 0.1999999999348446], ["Tuple[str, str]", 0.1999999999348446], ["str", 0.1999999999348446], ["list", 0.1999999999348446]], "variables": {"arn": "", "formatted_params": "", "res": ""}, "variables_p": {"arn": [["int", 1.0]], "formatted_params": [["str", 0.6360693660175658], ["dict", 0.0909701906205489]], "res": [["Dict[bytes, Any]", 0.10771558181041811], ["Dict[str, str]", 0.09447580516271847], ["dict", 0.09427703838313535]]}}, {"docstring": {"func": "Stop SageMaker pipeline execution.", "long_descr": ".. seealso::\n    - :external+boto3:py:meth:`SageMaker.Client.stop_pipeline_execution`", "ret": "Status of the pipeline execution after the operation.\nOne of 'Executing'|'Stopping'|'Stopped'|'Failed'|'Succeeded'."}, "fn_lc": [[1107, 4], [1177, 45]], "fn_var_ln": {"res": [[1169, 12], [1169, 15]], "retries": [[1144, 20], [1144, 27]]}, "fn_var_occur": {"res": [["res", "self", "describe_pipeline_exec", "pipeline_exec_arn"], ["wait_for_completion", "res", "self", "pipeline_non_terminal_states"], ["res", "self", "check_status", "pipeline_exec_arn", "p", "self", "describe_pipeline_exec", "p", "verbose", "check_interval", "non_terminal_states", "self", "pipeline_non_terminal_states"]], "retries": [["ce", "response", "retries"], ["retries", "retries"], ["self", "log", "warning", "retries", "ce"]]}, "name": "stop_pipeline", "params": {"check_interval": "builtins.int", "fail_if_not_running": "builtins.bool", "pipeline_exec_arn": "builtins.str", "self": "", "verbose": "builtins.bool", "wait_for_completion": "builtins.bool"}, "params_descr": {"check_interval": "How long to wait between checks for pipeline status when waiting for\ncompletion.", "fail_if_not_running": "This method will raise an exception if the pipeline we're trying to stop\nis not in an \"Executing\" state when the call is sent (which would mean that the pipeline is\nalready either stopping or stopped).\nNote that setting this to True will raise an error if the pipeline finished successfully before it\nwas stopped.", "pipeline_exec_arn": "Amazon Resource Name (ARN) of the pipeline execution.\nIt's the ARN of the pipeline itself followed by \"/execution/\" and an id.", "self": "", "verbose": "Whether to print steps details when waiting for completion.\nDefaults to true, consider turning off for pipelines that have thousands of steps.", "wait_for_completion": "Whether to wait for the pipeline to reach a final state.\n(i.e. either 'Stopped' or 'Failed')"}, "params_occur": {"check_interval": [["res", "self", "check_status", "pipeline_exec_arn", "p", "self", "describe_pipeline_exec", "p", "verbose", "check_interval", "non_terminal_states", "self", "pipeline_non_terminal_states"]], "fail_if_not_running": [["fail_if_not_running", "ce", "response"]], "pipeline_exec_arn": [["self", "conn", "stop_pipeline_execution", "PipelineExecutionArn", "pipeline_exec_arn"], ["res", "self", "describe_pipeline_exec", "pipeline_exec_arn"], ["res", "self", "check_status", "pipeline_exec_arn", "p", "self", "describe_pipeline_exec", "p", "verbose", "check_interval", "non_terminal_states", "self", "pipeline_non_terminal_states"]], "self": [["self", "conn", "stop_pipeline_execution", "PipelineExecutionArn", "pipeline_exec_arn"], ["self", "log", "warning", "retries", "ce"], ["self", "log", "warning", "ce"], ["self", "log", "error", "ce"], ["res", "self", "describe_pipeline_exec", "pipeline_exec_arn"], ["wait_for_completion", "res", "self", "pipeline_non_terminal_states"], ["res", "self", "check_status", "pipeline_exec_arn", "p", "self", "describe_pipeline_exec", "p", "verbose", "check_interval", "non_terminal_states", "self", "pipeline_non_terminal_states"]], "verbose": [["res", "self", "check_status", "pipeline_exec_arn", "p", "self", "describe_pipeline_exec", "p", "verbose", "check_interval", "non_terminal_states", "self", "pipeline_non_terminal_states"]], "wait_for_completion": [["wait_for_completion", "res", "self", "pipeline_non_terminal_states"]]}, "params_p": {"args": [], "check_interval": [["int", 1.0]], "fail_if_not_running": [["Mapping[str, Tuple[float, float, float]]", 0.39455227941500254], ["int", 0.05214915928507483], ["List[int]", 0.04788276665363879], ["float", 0.04328193884341248]], "kwargs": [], "pipeline_exec_arn": [["int", 0.4076103094096081], ["str", 0.2195640274788584], ["float", 0.1802050042693544]], "self": [], "verbose": [["int", 1.0]], "wait_for_completion": [["int", 0.8085566798225853], ["float", 0.09794355683281296], ["str", 0.09349976334460168]]}, "q_name": "SageMakerHook.stop_pipeline", "ret_exprs": ["return res[\"PipelineExecutionStatus\"]"], "ret_type": "builtins.str", "ret_type_p": [["str", 0.1753322478518135], ["bool", 0.12089880502880597], ["List[str]", 0.11888951128151455], ["raiden.utils.TokenAmount", 0.08337929097630599]], "variables": {"res": "", "retries": ""}, "variables_p": {"res": [["int", 0.6342047734927146], ["str", 0.27512689552168823], ["dict", 0.09066833098559733]], "retries": [["int", 0.694295684975949], ["str", 0.2076898551545548], ["bool", 0.0980144598694961]]}}, {"docstring": {"func": "Create a Model Package Group if it does not already exist.", "long_descr": ".. seealso::\n    - :external+boto3:py:meth:`SageMaker.Client.create_model_package_group`", "ret": "True if the model package group was created, False if it already existed."}, "fn_lc": [[1179, 4], [1212, 21]], "fn_var_ln": {"res": [[1191, 12], [1191, 15]]}, "fn_var_occur": {"res": [["res", "self", "conn", "create_model_package_group", "ModelPackageGroupName", "package_group_name", "ModelPackageGroupDescription", "package_group_desc"], ["self", "log", "info", "package_group_name", "res"]]}, "name": "create_model_package_group", "params": {"package_group_desc": "builtins.str", "package_group_name": "builtins.str", "self": ""}, "params_descr": {"package_group_desc": "Description of the model package group, if it was to be created (optional).", "package_group_name": "Name of the model package group to create if not already present.", "self": ""}, "params_occur": {"package_group_desc": [["res", "self", "conn", "create_model_package_group", "ModelPackageGroupName", "package_group_name", "ModelPackageGroupDescription", "package_group_desc"]], "package_group_name": [["res", "self", "conn", "create_model_package_group", "ModelPackageGroupName", "package_group_name", "ModelPackageGroupDescription", "package_group_desc"], ["self", "log", "info", "package_group_name", "res"]], "self": [["res", "self", "conn", "create_model_package_group", "ModelPackageGroupName", "package_group_name", "ModelPackageGroupDescription", "package_group_desc"], ["self", "log", "info", "package_group_name", "res"], ["self", "log", "info", "e", "response"], ["self", "log", "error", "e"]]}, "params_p": {"args": [], "kwargs": [], "package_group_desc": [["str", 0.3847901055570246], ["Optional[str]", 0.17951983543793412], ["Container", 0.16716050422512674], ["bool", 0.09433660783539914]], "package_group_name": [["str", 0.311667416253864], ["Callable[[str], str]", 0.18364277664735507], ["Container", 0.13740425380407065]], "self": []}, "q_name": "SageMakerHook.create_model_package_group", "ret_exprs": ["return True", "return False"], "ret_type": "builtins.bool", "ret_type_p": [["bool", 0.9999999999999999]], "variables": {"res": ""}, "variables_p": {"res": [["str", 0.8961417035024147], ["Dict[str, Set[str]]", 0.10385829649758546]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1214, 4], [1217, 18]], "fn_var_ln": {"res": [[1215, 8], [1215, 11]]}, "fn_var_occur": {"res": [["res", "self", "conn", "describe_auto_ml_job", "AutoMLJobName", "job_name"], ["self", "log", "info", "job_name", "res"]]}, "name": "_describe_auto_ml_job", "params": {"job_name": "builtins.str", "self": ""}, "params_descr": {"job_name": "", "self": ""}, "params_occur": {"job_name": [["res", "self", "conn", "describe_auto_ml_job", "AutoMLJobName", "job_name"], ["self", "log", "info", "job_name", "res"]], "self": [["res", "self", "conn", "describe_auto_ml_job", "AutoMLJobName", "job_name"], ["self", "log", "info", "job_name", "res"]]}, "params_p": {"args": [], "job_name": [["str", 0.6919542799308718], ["Optional[float]", 0.1222695640102726]], "kwargs": [], "self": []}, "q_name": "SageMakerHook._describe_auto_ml_job", "ret_exprs": ["return res"], "ret_type": "", "ret_type_p": [["List[int]", 0.18484792514470838], ["Iterable[str]", 0.10591950277114666], ["Iterable[T]", 0.09939167428097595], ["int", 0.09216146907175131]], "variables": {"res": ""}, "variables_p": {"res": [["str", 0.36153131973680397], ["Pattern[str]", 0.18942758104276258], ["int", 0.1124305780055304], ["List[str]", 0.09965091798017466]]}}, {"docstring": {"func": "Create an auto ML job to predict the given column.", "long_descr": "The learning input is based on data provided through S3 , and the output\nis written to the specified S3 location.\n\n.. seealso::\n    - :external+boto3:py:meth:`SageMaker.Client.create_auto_ml_job`", "ret": "Only if waiting for completion, a dictionary detailing the best model. The structure is that\nof the \"BestCandidate\" key in:\nhttps://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/sagemaker.html#SageMaker.Client.describe_auto_ml_job"}, "fn_lc": [[1219, 4], [1298, 19]], "fn_var_ln": {"input_data": [[1262, 8], [1262, 18]], "params_dict": [[1268, 8], [1268, 19]], "res": [[1289, 12], [1289, 15]]}, "fn_var_occur": {"input_data": [["input_data", "s3_input", "target_attribute"], ["params_dict", "job_name", "input_data", "s3_output", "role_arn"]], "params_dict": [["params_dict", "job_name", "input_data", "s3_output", "role_arn"], ["params_dict", "update", "time_limit"], ["params_dict", "update", "autodeploy_endpoint_name"], ["params_dict", "update", "extras"], ["self", "conn", "create_auto_ml_job", "params_dict"]], "res": [["res", "self", "check_status", "job_name", "self", "_describe_auto_ml_job", "check_interval"]]}, "name": "create_auto_ml_job", "params": {"autodeploy_endpoint_name": "str | None", "check_interval": "builtins.int", "compressed_input": "builtins.bool", "extras": "dict | None", "job_name": "builtins.str", "role_arn": "builtins.str", "s3_input": "builtins.str", "s3_output": "builtins.str", "self": "", "target_attribute": "builtins.str", "time_limit": "int | None", "wait_for_completion": "builtins.bool"}, "params_descr": {"autodeploy_endpoint_name": "If specified, the best model will be deployed to an endpoint with\nthat name. No deployment made otherwise.", "check_interval": "Interval in seconds between 2 status checks when waiting for completion.", "compressed_input": "Set to True if the input is gzipped.", "extras": "Use this dictionary to set any variable input variable for job creation that is not\noffered through the parameters of this function. The format is described in:\nhttps://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/sagemaker.html#SageMaker.Client.create_auto_ml_job", "job_name": "Name of the job to create, needs to be unique within the account.", "role_arn": "The ARN or the IAM role to use when interacting with S3.\nMust have read access to the input, and write access to the output folder.", "s3_input": "The S3 location (folder or file) where to fetch the data.\nBy default, it expects csv with headers.", "s3_output": "The S3 folder where to write the model artifacts. Must be 128 characters or fewer.", "self": "", "target_attribute": "The name of the column containing the values to predict.", "time_limit": "The maximum amount of time in seconds to spend training the model(s).", "wait_for_completion": "Whether to wait for the job to finish before returning. Defaults to True."}, "params_occur": {"autodeploy_endpoint_name": [["params_dict", "update", "autodeploy_endpoint_name"]], "check_interval": [["res", "self", "check_status", "job_name", "self", "_describe_auto_ml_job", "check_interval"]], "compressed_input": [], "extras": [["params_dict", "update", "extras"]], "job_name": [["params_dict", "job_name", "input_data", "s3_output", "role_arn"], ["res", "self", "check_status", "job_name", "self", "_describe_auto_ml_job", "check_interval"]], "role_arn": [["params_dict", "job_name", "input_data", "s3_output", "role_arn"]], "s3_input": [["input_data", "s3_input", "target_attribute"]], "s3_output": [["params_dict", "job_name", "input_data", "s3_output", "role_arn"]], "self": [["self", "conn", "create_auto_ml_job", "params_dict"], ["res", "self", "check_status", "job_name", "self", "_describe_auto_ml_job", "check_interval"]], "target_attribute": [["input_data", "s3_input", "target_attribute"]], "time_limit": [["params_dict", "update", "time_limit"]], "wait_for_completion": []}, "params_p": {"args": [], "autodeploy_endpoint_name": [["str", 0.35969595580278463], ["bool", 0.28280395723322754], ["Optional[str]", 0.172291050338571]], "check_interval": [["str", 0.40632838426446394], ["bool", 0.3342953472119082], ["Optional[\"InventoryMode\"]", 0.09013711301307194], ["Optional[\"TaxMode\"]", 0.09013711301307194], ["Optional[str]", 0.07910204249748388]], "compressed_input": [["int", 0.6437582433332587], ["Iterable[float]", 0.21458608111108624], ["bool", 0.1416556755556552]], "extras": [["Optional[int]", 0.1987717284428767], ["str", 0.10912209115228821], ["Optional[List[str]]", 0.10293884479539078], ["Dict[str, Any]", 0.09383179655027846], ["dict", 0.08550345050776424]], "job_name": [["str", 0.5994542768862541], ["list", 0.10474471931492282], ["bytes", 0.0989206859289915], ["Dict[str, str]", 0.0989206859289915], ["bool", 0.09795963194084009]], "kwargs": [], "role_arn": [["bool", 0.4096018001580222], ["str", 0.38135302557800954], ["Optional[str]", 0.11890309638408819]], "s3_input": [["str", 0.4770924648449004], ["Union[str, bytes, int]", 0.166128260315239], ["bool", 0.0927428478948004], ["Optional[str]", 0.07946599676153983]], "s3_output": [["bool", 0.4096018001580222], ["str", 0.38135302557800954], ["Optional[str]", 0.11890309638408819]], "self": [], "target_attribute": [["str", 0.4770924648449004], ["Union[str, bytes, int]", 0.166128260315239], ["bool", 0.0927428478948004], ["Optional[str]", 0.07946599676153983]], "time_limit": [["Optional[int]", 0.1987717284428767], ["str", 0.10912209115228821], ["Optional[List[str]]", 0.10293884479539078], ["Dict[str, Any]", 0.09383179655027846], ["dict", 0.08550345050776424]], "wait_for_completion": [["int", 0.6437582433332587], ["Iterable[float]", 0.21458608111108624], ["bool", 0.1416556755556552]]}, "q_name": "SageMakerHook.create_auto_ml_job", "ret_exprs": ["return res[\"BestCandidate\"]", "return None"], "ret_type": "dict | None", "ret_type_p": [["Optional[str]", 0.459475233765202], ["bool", 0.45016114347328096], ["Optional[int]", 0.09036362276151708]], "variables": {"input_data": "", "params_dict": "", "res": ""}, "variables_p": {"input_data": [["bool", 0.5454954955333885], ["str", 0.13994016012316196], ["kitovu.utils.JsonType", 0.10383946436176256], ["dict", 0.09844474291266388]], "params_dict": [["Dict[Any, str]", 0.3407848744862548], ["Dict[str, str]", 0.2688552852248717], ["Dict[str, Any]", 0.17369344744257142], ["dict", 0.11098816184234937]], "res": [["str", 0.7522117305175431], ["Pattern[str]", 0.09377081546539644], ["Type[str]", 0.07963316795796772], ["Type[Callable[..., None]]", 0.07438428605909271]]}}], "name": "SageMakerHook", "q_name": "SageMakerHook", "variables": {"endpoint_non_terminal_states": "", "failed_states": "", "non_terminal_states": "", "pipeline_non_terminal_states": ""}, "variables_p": {"endpoint_non_terminal_states": [["str", 0.7863100900656966], ["Optional[int]", 0.06283051975023701], ["int", 0.05400104773453836], ["Optional[str]", 0.04842917122476407]], "failed_states": [["str", 0.39999999999999997], ["int", 0.19999999999999998], ["list", 0.09999999999999999]], "non_terminal_states": [["str", 0.34215039614791937], ["Dict[str, Union[int, str]]", 0.16637664467454752], ["int", 0.153943369361779], ["raiden.utils.TokenAmount", 0.09245334675618576], ["List[str]", 0.08268902995069778], ["list", 0.0803237739401294]], "pipeline_non_terminal_states": [["str", 0.7863100900656966], ["Optional[int]", 0.06283051975023701], ["int", 0.05400104773453836], ["Optional[str]", 0.04842917122476407]]}}], "funcs": [{"docstring": {"func": "Given callable ``f``, find index in ``arr`` to minimize ``f(arr[i])``.", "long_descr": "None is returned if ``arr`` is empty.", "ret": null}, "fn_lc": [[59, 0], [71, 18]], "fn_var_ln": {"min_idx": [[70, 16], [70, 23]], "min_value": [[69, 16], [69, 25]]}, "fn_var_occur": {"min_idx": [["min_idx", "None"], ["min_idx", "idx"]], "min_value": [["min_value", "None"], ["min_value", "None", "f", "item", "min_value"], ["min_value", "f", "item"]]}, "name": "argmin", "params": {"arr": "", "f": "typing.Callable"}, "params_descr": {"arr": "", "f": ""}, "params_occur": {"arr": [["enumerate", "arr"]], "f": [["min_value", "None", "f", "item", "min_value"], ["min_value", "f", "item"]]}, "params_p": {"args": [], "arr": [["BinaryIO", 0.49999999951657015], ["str", 4.077575294826073e-10], ["int", 1.5134477163321553e-10], ["Type[T]", 1.3591917649420244e-10]], "f": [["dict", 0.2741988109874215], ["Mapping", 0.10806466914825699], ["Optional[str]", 0.0958506109373454], ["Callable", 0.08936775025424556]], "kwargs": []}, "q_name": "argmin", "ret_exprs": ["return min_idx"], "ret_type": "int | None", "ret_type_p": [["int", 0.6367382929579654], ["List[str]", 0.0354344198297591]], "variables": {"min_idx": "", "min_value": ""}, "variables_p": {"min_idx": [["str", 0.36023846498792955], ["list", 0.21268637766437967], ["List[str]", 0.0789659408110207], ["Dict[str, Dict[str, bool]]", 0.07516065012308766]], "min_value": [["str", 0.3451869811548782], ["Dict[str, Any]", 0.1418879251149154], ["Optional[int]", 0.1002524316389621], ["List[str]", 0.08365175700517331]]}}, {"docstring": {"func": "Check if training job's secondary status message has changed.", "long_descr": null, "ret": "Whether the secondary status message of a training job changed or not."}, "fn_lc": [[74, 0], [99, 34]], "fn_var_ln": {"current_secondary_status_transitions": [[82, 4], [82, 40]], "last_message": [[90, 4], [90, 16]], "message": [[97, 4], [97, 11]], "prev_job_secondary_status_transitions": [[86, 4], [86, 41]]}, "fn_var_occur": {"current_secondary_status_transitions": [["current_secondary_status_transitions", "current_job_description", "get"], ["current_secondary_status_transitions", "None", "len", "current_secondary_status_transitions"]], "last_message": [["last_message", "prev_job_secondary_status_transitions", "prev_job_secondary_status_transitions", "None", "len", "prev_job_secondary_status_transitions"], ["message", "last_message"]], "message": [["message", "current_job_description"], ["message", "last_message"]], "prev_job_secondary_status_transitions": [["prev_job_secondary_status_transitions", "prev_job_description", "get", "prev_job_description", "None", "None"], ["last_message", "prev_job_secondary_status_transitions", "prev_job_secondary_status_transitions", "None", "len", "prev_job_secondary_status_transitions"]]}, "name": "secondary_training_status_changed", "params": {"current_job_description": "builtins.dict", "prev_job_description": "builtins.dict"}, "params_descr": {"current_job_description": "Current job description, returned from DescribeTrainingJob call.", "prev_job_description": "Previous job description, returned from DescribeTrainingJob call."}, "params_occur": {"current_job_description": [["current_secondary_status_transitions", "current_job_description", "get"], ["message", "current_job_description"]], "prev_job_description": [["prev_job_secondary_status_transitions", "prev_job_description", "get", "prev_job_description", "None", "None"]]}, "params_p": {"args": [], "current_job_description": [["int", 0.19163260983683916], ["dict", 0.12138672691080332], ["Union[Dict, List]", 0.09702953176429938], ["Optional[Any]", 0.08514229064957403]], "kwargs": [], "prev_job_description": [["int", 0.24170208233804072], ["List[Optional[str]]", 0.19525078864165027], ["str", 0.1859469987213808], ["Optional[str]", 0.0972032167523542], ["Dict[str, Any]", 0.0939499148251932], ["bool", 0.0929734993606904]]}, "q_name": "secondary_training_status_changed", "ret_exprs": ["return False", "return message != last_message"], "ret_type": "builtins.bool", "ret_type_p": [["bool", 0.9999999999999999]], "variables": {"current_secondary_status_transitions": "", "last_message": "", "message": "", "prev_job_secondary_status_transitions": ""}, "variables_p": {"current_secondary_status_transitions": [["Dict[str, Type[Any]]", 0.19680531086144287], ["Dict[bytes, float]", 0.1845767754176501], ["Dict[int, Union[Any, Any]]", 0.13020090139790233], ["dict", 0.12382275005620906], ["Dict[int, Any]", 0.0977784464203133], ["Dict[int, str]", 0.09183954694985669], ["Dict[str, Any]", 0.09082175134295677], ["int", 0.08415451755366889]], "last_message": [["int", 0.09172746581148992]], "message": [["str", 0.8862035897376657]], "prev_job_secondary_status_transitions": [["Dict[int, Union[Any, Any]]", 0.1372918298821162], ["int", 0.10010555611276789], ["Dict[str, Optional[str]]", 0.09607980119074068], ["Dict[int, str]", 0.09508538285221363], ["Dict[str, Any]", 0.08851242140729451], ["Set[bytes]", 0.08787991383608175], ["Dict[str, str]", 0.0854126392859752]]}}, {"docstring": {"func": "Format string containing start time and the secondary training job status message.", "long_descr": null, "ret": "Job status string to be printed."}, "fn_lc": [[102, 0], [135, 33]], "fn_var_ln": {"current_transitions": [[112, 4], [112, 23]], "message": [[129, 8], [129, 15]], "prev_transitions_num": [[119, 12], [119, 32]], "status_strs": [[127, 4], [127, 15]], "time_str": [[130, 8], [130, 16]], "transitions_to_print": [[121, 4], [121, 24]]}, "fn_var_occur": {"current_transitions": [["current_transitions", "job_description", "get"], ["current_transitions", "None", "len", "current_transitions"], ["transitions_to_print", "current_transitions", "len", "current_transitions", "prev_transitions_num", "current_transitions", "prev_transitions_num", "len", "current_transitions"]], "message": [["message", "transition"], ["status_strs", "append", "time_str", "transition", "message"]], "prev_transitions_num": [["prev_transitions_num", "len", "prev_description"], ["transitions_to_print", "current_transitions", "len", "current_transitions", "prev_transitions_num", "current_transitions", "prev_transitions_num", "len", "current_transitions"]], "status_strs": [["status_strs", "append", "time_str", "transition", "message"], ["join", "status_strs"]], "time_str": [["time_str", "timezone", "convert_to_utc", "cast", "datetime", "job_description", "strftime"], ["status_strs", "append", "time_str", "transition", "message"]], "transitions_to_print": [["transitions_to_print", "current_transitions", "len", "current_transitions", "prev_transitions_num", "current_transitions", "prev_transitions_num", "len", "current_transitions"]]}, "name": "secondary_training_status_message", "params": {"job_description": "builtins.dict[builtins.str, builtins.list[typing.Any]]", "prev_description": "dict | None"}, "params_descr": {"job_description": "Returned response from DescribeTrainingJob call", "prev_description": "Previous job description from DescribeTrainingJob call"}, "params_occur": {"job_description": [["current_transitions", "job_description", "get"], ["time_str", "timezone", "convert_to_utc", "cast", "datetime", "job_description", "strftime"]], "prev_description": [["prev_description", "None"], ["prev_description", "get", "None"], ["prev_transitions_num", "len", "prev_description"]]}, "params_p": {"args": [], "job_description": [["str", 0.8094084031385848], ["Dict[str, Any]", 0.09876654217958811]], "kwargs": [], "prev_description": [["int", 0.19204761033494186], ["List[str]", 0.1851157363491117], ["str", 0.09416782900580567], ["bytes", 0.08587292794221016]]}, "q_name": "secondary_training_status_message", "ret_exprs": ["return \"\"", "return \"n\".join(status_strs)"], "ret_type": "builtins.str", "ret_type_p": [["str", 0.8807533934136218]], "variables": {"current_transitions": "", "message": "", "prev_transitions_num": "", "status_strs": "", "time_str": "", "transitions_to_print": ""}, "variables_p": {"current_transitions": [["Dict[str, Any]", 0.4497936161539669], ["Dict[Any, List[Any]]", 0.25911870624946054], ["int", 0.20004876177997294], ["Dict[str, List[str]]", 0.09103891581659955]], "message": [["str", 0.20853620191053562], ["List[dict]", 0.11046105419886047], ["Dict[str, List[str]]", 0.09905408520745207], ["list", 0.09618250103322977], ["float", 0.09124611819362796]], "prev_transitions_num": [["int", 0.9999999999999998]], "status_strs": [["list", 0.9999999999999998]], "time_str": [["str", 0.6230567797483556], ["Optional[str]", 0.09902483139871068], ["list", 0.09355555850936675]], "transitions_to_print": [["int", 0.429763531398068], ["str", 0.1881541120307127], ["Dict[str, float]", 0.09517134394392561], ["Type[List[int]]", 0.08541329808422954], ["Dict[str, int]", 0.08130306208527653]]}}], "imports": ["__future__", "annotations", "collections", "os", "re", "tarfile", "tempfile", "time", "collections", "Counter", "datetime", "datetime", "functools", "partial", "typing", "Any", "Callable", "Generator", "cast", "botocore", "exceptions", "ClientError", "airflow", "exceptions", "AirflowException", "airflow", "providers", "amazon", "aws", "hooks", "base_aws", "AwsBaseHook", "airflow", "providers", "amazon", "aws", "hooks", "logs", "AwsLogsHook", "airflow", "providers", "amazon", "aws", "hooks", "s3", "S3Hook", "airflow", "providers", "amazon", "aws", "utils", "tags", "format_tags", "airflow", "utils", "timezone"], "mod_var_ln": {"Position": [[56, 0], [56, 8]]}, "mod_var_occur": {"Position": [["positions", "positions", "s", "Position", "timestamp", "skip", "s", "streams"], ["positions", "update", "s", "Position", "timestamp", "skip", "s", "stream_names", "s", "positions"], ["positions", "stream_names", "idx", "Position", "timestamp", "ts", "skip", "count"], ["positions", "stream_names", "idx", "Position", "timestamp", "event", "skip"]]}, "no_types_annot": {"D": 133, "I": 0, "U": 121}, "session_id": "QPmEIuq6O_77cefvcjZ4YynXvO4kRqWgistHzbAT90c", "set": null, "tc": [false, null], "type_annot_cove": 0.52, "typed_seq": "", "untyped_seq": "", "variables": {"Position": ""}, "variables_p": {"Position": [["int", 0.5163272486100325], ["bool", 0.20097340871912517], ["str", 0.08565717003168069]]}}}