{"error": null, "response": {"classes": [{"cls_lc": [[32, 0], [353, 22]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[47, 4], [49, 41]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "__init__", "params": {"args": "", "kwargs": "", "self": ""}, "params_descr": {"args": "", "kwargs": "", "self": ""}, "params_occur": {"args": [["super", "__init__", "args", "kwargs"]], "kwargs": [["super", "__init__", "args", "kwargs"]], "self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "RdsHook.__init__", "ret_exprs": [], "ret_type": "None", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Get the current state of a DB instance snapshot.", "long_descr": ".. seealso::\n    - :external+boto3:py:meth:`RDS.Client.describe_db_snapshots`", "ret": "Returns the status of the DB snapshot as a string (eg. \"available\")"}, "fn_lc": [[51, 4], [68, 59]], "fn_var_ln": {"response": [[63, 12], [63, 20]]}, "fn_var_occur": {"response": [["response", "self", "conn", "describe_db_snapshots", "DBSnapshotIdentifier", "snapshot_id"], ["e", "response"], ["response", "lower"]]}, "name": "get_db_snapshot_state", "params": {"self": "", "snapshot_id": "builtins.str"}, "params_descr": {"self": "", "snapshot_id": "The ID of the target DB instance snapshot"}, "params_occur": {"self": [["response", "self", "conn", "describe_db_snapshots", "DBSnapshotIdentifier", "snapshot_id"]], "snapshot_id": [["response", "self", "conn", "describe_db_snapshots", "DBSnapshotIdentifier", "snapshot_id"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "snapshot_id": [["int", 0.40311523550678185], ["str", 0.28201243740922316]]}, "q_name": "RdsHook.get_db_snapshot_state", "ret_exprs": ["return response[\"DBSnapshots\"][0][\"Status\"].lower()"], "ret_type": "builtins.str", "ret_type_p": [["str", 0.39820103849308436], ["Optional[str]", 0.11854470309509098], ["bool", 0.09695381626572178], ["Optional[Callable]", 0.09233199956321562], ["list", 0.09152126960235747]], "variables": {"response": ""}, "variables_p": {"response": [["Dict[str, Union[Any, bool, str]]", 0.23453998193672113], ["dict", 0.1748197736590295], ["int", 0.12540191889276778], ["Dict[str, str]", 0.09356219212681066], ["Dict[str, None]", 0.08877920693901101], ["str", 0.08779489757827316], ["Dict[str, int]", 0.08138071857137276]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[85, 8], [86, 58]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "poke", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "RdsHook.wait_for_db_snapshot_state.<locals>.poke", "ret_exprs": ["return self.get_db_snapshot_state(snapshot_id)"], "ret_type": "", "ret_type_p": [["bool", 0.3717684803131511], ["str", 0.308096700229063], ["Optional[str]", 0.21187840519373716]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Poll DB Snapshots until target_state is reached; raise AirflowException after max_attempts.", "long_descr": ".. seealso::\n    - :external+boto3:py:meth:`RDS.Client.describe_db_snapshots`", "ret": null}, "fn_lc": [[70, 4], [97, 95]], "fn_var_ln": {"target_state": [[88, 8], [88, 20]], "waiter": [[90, 12], [90, 18]]}, "fn_var_occur": {"target_state": [["target_state", "target_state", "lower"], ["waiter", "self", "conn", "get_waiter", "target_state"], ["self", "_wait_for_state", "poke", "target_state", "check_interval", "max_attempts"], ["self", "log", "info", "snapshot_id", "target_state"]], "waiter": [["waiter", "self", "conn", "get_waiter", "target_state"], ["waiter", "wait", "DBSnapshotIdentifier", "snapshot_id", "WaiterConfig", "check_interval", "max_attempts"]]}, "name": "wait_for_db_snapshot_state", "params": {"check_interval": "builtins.int", "max_attempts": "builtins.int", "self": "", "snapshot_id": "builtins.str", "target_state": "builtins.str"}, "params_descr": {"check_interval": "The amount of time in seconds to wait between attempts", "max_attempts": "The maximum number of attempts to be made", "self": "", "snapshot_id": "The ID of the target DB instance snapshot", "target_state": "Wait until this state is reached"}, "params_occur": {"check_interval": [["waiter", "wait", "DBSnapshotIdentifier", "snapshot_id", "WaiterConfig", "check_interval", "max_attempts"], ["self", "_wait_for_state", "poke", "target_state", "check_interval", "max_attempts"]], "max_attempts": [["waiter", "wait", "DBSnapshotIdentifier", "snapshot_id", "WaiterConfig", "check_interval", "max_attempts"], ["self", "_wait_for_state", "poke", "target_state", "check_interval", "max_attempts"]], "self": [["waiter", "self", "conn", "get_waiter", "target_state"], ["self", "_wait_for_state", "poke", "target_state", "check_interval", "max_attempts"], ["self", "log", "info", "snapshot_id", "target_state"]], "snapshot_id": [["waiter", "wait", "DBSnapshotIdentifier", "snapshot_id", "WaiterConfig", "check_interval", "max_attempts"], ["self", "log", "info", "snapshot_id", "target_state"]], "target_state": [["target_state", "target_state", "lower"], ["waiter", "self", "conn", "get_waiter", "target_state"], ["self", "_wait_for_state", "poke", "target_state", "check_interval", "max_attempts"], ["self", "log", "info", "snapshot_id", "target_state"]]}, "params_p": {"args": [], "check_interval": [["str", 0.2055217695104486], ["int", 0.1901330044958845], ["Dict[str, Any]", 0.10658826855085507], ["Optional[int]", 0.09864769958928071]], "kwargs": [], "max_attempts": [["str", 0.2055217695104486], ["int", 0.1901330044958845], ["Dict[str, Any]", 0.10658826855085507], ["Optional[int]", 0.09864769958928071]], "self": [], "snapshot_id": [["int", 0.5983302216018919], ["str", 0.2025309198625425], ["raiden_contracts.utils.type_aliases.ChainID", 0.10081868167853189]], "target_state": [["int", 0.20636702768035625], ["Optional[float]", 0.10323871551650644], ["Optional[int]", 0.10323871551650644], ["str", 0.09723846094220599]]}, "q_name": "RdsHook.wait_for_db_snapshot_state", "ret_exprs": [], "ret_type": "None", "variables": {"target_state": "", "waiter": ""}, "variables_p": {"target_state": [["str", 0.2975544755234798], ["int", 0.13850245308239037], ["dict", 0.09235012828837907]], "waiter": [["int", 0.7182500371891216]]}}, {"docstring": {"func": "Get the current state of a DB cluster snapshot.", "long_descr": ".. seealso::\n    - :external+boto3:py:meth:`RDS.Client.describe_db_cluster_snapshots`", "ret": "Returns the status of the DB cluster snapshot as a string (eg. \"available\")"}, "fn_lc": [[99, 4], [116, 66]], "fn_var_ln": {"response": [[111, 12], [111, 20]]}, "fn_var_occur": {"response": [["response", "self", "conn", "describe_db_cluster_snapshots", "DBClusterSnapshotIdentifier", "snapshot_id"], ["e", "response"], ["response", "lower"]]}, "name": "get_db_cluster_snapshot_state", "params": {"self": "", "snapshot_id": "builtins.str"}, "params_descr": {"self": "", "snapshot_id": "The ID of the target DB cluster."}, "params_occur": {"self": [["response", "self", "conn", "describe_db_cluster_snapshots", "DBClusterSnapshotIdentifier", "snapshot_id"]], "snapshot_id": [["response", "self", "conn", "describe_db_cluster_snapshots", "DBClusterSnapshotIdentifier", "snapshot_id"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "snapshot_id": [["int", 0.3670061656996986], ["str", 0.29847765952031824], ["Dict[int, int]", 0.09287221819339045]]}, "q_name": "RdsHook.get_db_cluster_snapshot_state", "ret_exprs": ["return response[\"DBClusterSnapshots\"][0][\"Status\"].lower()"], "ret_type": "builtins.str", "ret_type_p": [["Dict[str, Any]", 0.3153051337872175], ["Optional[str]", 0.19661973906685007]], "variables": {"response": ""}, "variables_p": {"response": [["int", 0.15315899472345929], ["Dict[str, Union[Any, Any, str]]", 0.1477226857809944], ["float", 0.0698293283165968]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[133, 8], [134, 66]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "poke", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "RdsHook.wait_for_db_cluster_snapshot_state.<locals>.poke", "ret_exprs": ["return self.get_db_cluster_snapshot_state(snapshot_id)"], "ret_type": "", "ret_type_p": [["bool", 0.28872110771019793], ["str", 0.2279336198884515], ["Optional[str]", 0.2057860058959383]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Poll DB Cluster Snapshots until target_state is reached; raise AirflowException after a max_attempts.", "long_descr": ".. seealso::\n    - :external+boto3:py:meth:`RDS.Client.describe_db_cluster_snapshots`", "ret": null}, "fn_lc": [[118, 4], [145, 103]], "fn_var_ln": {"target_state": [[136, 8], [136, 20]], "waiter": [[138, 12], [138, 18]]}, "fn_var_occur": {"target_state": [["target_state", "target_state", "lower"], ["waiter", "self", "conn", "get_waiter", "target_state"], ["self", "_wait_for_state", "poke", "target_state", "check_interval", "max_attempts"], ["self", "log", "info", "snapshot_id", "target_state"]], "waiter": [["waiter", "self", "conn", "get_waiter", "target_state"], ["waiter", "wait", "DBClusterSnapshotIdentifier", "snapshot_id", "WaiterConfig", "check_interval", "max_attempts"]]}, "name": "wait_for_db_cluster_snapshot_state", "params": {"check_interval": "builtins.int", "max_attempts": "builtins.int", "self": "", "snapshot_id": "builtins.str", "target_state": "builtins.str"}, "params_descr": {"check_interval": "The amount of time in seconds to wait between attempts", "max_attempts": "The maximum number of attempts to be made", "self": "", "snapshot_id": "The ID of the target DB cluster snapshot", "target_state": "Wait until this state is reached"}, "params_occur": {"check_interval": [["waiter", "wait", "DBClusterSnapshotIdentifier", "snapshot_id", "WaiterConfig", "check_interval", "max_attempts"], ["self", "_wait_for_state", "poke", "target_state", "check_interval", "max_attempts"]], "max_attempts": [["waiter", "wait", "DBClusterSnapshotIdentifier", "snapshot_id", "WaiterConfig", "check_interval", "max_attempts"], ["self", "_wait_for_state", "poke", "target_state", "check_interval", "max_attempts"]], "self": [["waiter", "self", "conn", "get_waiter", "target_state"], ["self", "_wait_for_state", "poke", "target_state", "check_interval", "max_attempts"], ["self", "log", "info", "snapshot_id", "target_state"]], "snapshot_id": [["waiter", "wait", "DBClusterSnapshotIdentifier", "snapshot_id", "WaiterConfig", "check_interval", "max_attempts"], ["self", "log", "info", "snapshot_id", "target_state"]], "target_state": [["target_state", "target_state", "lower"], ["waiter", "self", "conn", "get_waiter", "target_state"], ["self", "_wait_for_state", "poke", "target_state", "check_interval", "max_attempts"], ["self", "log", "info", "snapshot_id", "target_state"]]}, "params_p": {"args": [], "check_interval": [["int", 0.29392990612225967], ["str", 0.19710048711010356], ["Dict[str, Any]", 0.10888170584826407]], "kwargs": [], "max_attempts": [["int", 0.29392990612225967], ["str", 0.19710048711010356], ["Dict[str, Any]", 0.10888170584826407]], "self": [], "snapshot_id": [["int", 0.41144771835089483], ["str", 0.1016759446377079]], "target_state": [["int", 0.20376287747565647], ["str", 0.10624512024121194], ["List[int]", 0.09428707512370799]]}, "q_name": "RdsHook.wait_for_db_cluster_snapshot_state", "ret_exprs": [], "ret_type": "None", "variables": {"target_state": "", "waiter": ""}, "variables_p": {"target_state": [["str", 0.2975544755234798], ["int", 0.13850245308239037], ["dict", 0.09235012828837907]], "waiter": [["int", 0.4429703487249957], ["float", 0.2682376957838171]]}}, {"docstring": {"func": "Gets the current state of an RDS snapshot export to Amazon S3.", "long_descr": ".. seealso::\n    - :external+boto3:py:meth:`RDS.Client.describe_export_tasks`", "ret": "Returns the status of the snapshot export task as a string (eg. \"canceled\")"}, "fn_lc": [[147, 4], [164, 59]], "fn_var_ln": {"response": [[159, 12], [159, 20]]}, "fn_var_occur": {"response": [["response", "self", "conn", "describe_export_tasks", "ExportTaskIdentifier", "export_task_id"], ["e", "response"], ["response", "lower"]]}, "name": "get_export_task_state", "params": {"export_task_id": "builtins.str", "self": ""}, "params_descr": {"export_task_id": "The identifier of the target snapshot export task.", "self": ""}, "params_occur": {"export_task_id": [["response", "self", "conn", "describe_export_tasks", "ExportTaskIdentifier", "export_task_id"]], "self": [["response", "self", "conn", "describe_export_tasks", "ExportTaskIdentifier", "export_task_id"]]}, "params_p": {"args": [], "export_task_id": [["str", 0.6266908321583152], ["int", 0.13604904374964727]], "kwargs": [], "self": []}, "q_name": "RdsHook.get_export_task_state", "ret_exprs": ["return response[\"ExportTasks\"][0][\"Status\"].lower()"], "ret_type": "builtins.str", "ret_type_p": [["str", 0.48974525276143843], ["Callable", 0.10663163064363948], ["List[str]", 0.10476719399275836], ["Optional[str]", 0.0956593468660354], ["Optional[Dict[str, bytes]]", 0.09156584320692228]], "variables": {"response": ""}, "variables_p": {"response": [["dict", 0.18871091207300444], ["Callable[[List[Any]], List[Any]]", 0.11796848604616357], ["set", 0.09462248167512684], ["Dict[str, Optional[int]]", 0.08825281962367858]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[181, 8], [182, 61]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "poke", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "RdsHook.wait_for_export_task_state.<locals>.poke", "ret_exprs": ["return self.get_export_task_state(export_task_id)"], "ret_type": "", "ret_type_p": [["str", 0.30087556884631517], ["int", 0.29413938542890683], ["bool", 0.21571088027229507], ["List[str]", 0.1041744540187918]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Poll export tasks until target_state is reached; raise AirflowException after max_attempts.", "long_descr": ".. seealso::\n    - :external+boto3:py:meth:`RDS.Client.describe_export_tasks`", "ret": null}, "fn_lc": [[166, 4], [186, 94]], "fn_var_ln": {"target_state": [[184, 8], [184, 20]]}, "fn_var_occur": {"target_state": [["target_state", "target_state", "lower"], ["self", "_wait_for_state", "poke", "target_state", "check_interval", "max_attempts"], ["self", "log", "info", "export_task_id", "target_state"]]}, "name": "wait_for_export_task_state", "params": {"check_interval": "builtins.int", "export_task_id": "builtins.str", "max_attempts": "builtins.int", "self": "", "target_state": "builtins.str"}, "params_descr": {"check_interval": "The amount of time in seconds to wait between attempts", "export_task_id": "The identifier of the target snapshot export task.", "max_attempts": "The maximum number of attempts to be made", "self": "", "target_state": "Wait until this state is reached"}, "params_occur": {"check_interval": [["self", "_wait_for_state", "poke", "target_state", "check_interval", "max_attempts"]], "export_task_id": [["self", "log", "info", "export_task_id", "target_state"]], "max_attempts": [["self", "_wait_for_state", "poke", "target_state", "check_interval", "max_attempts"]], "self": [["self", "_wait_for_state", "poke", "target_state", "check_interval", "max_attempts"], ["self", "log", "info", "export_task_id", "target_state"]], "target_state": [["target_state", "target_state", "lower"], ["self", "_wait_for_state", "poke", "target_state", "check_interval", "max_attempts"], ["self", "log", "info", "export_task_id", "target_state"]]}, "params_p": {"args": [], "check_interval": [["bytes", 0.21820786827654942], ["str", 0.1998142442101405], ["int", 0.14432500918276653], ["float", 0.08913747597671871], ["Optional[bytes]", 0.08129406556531624], ["Iterator[str]", 0.07877876184972805]], "export_task_id": [["str", 1.0]], "kwargs": [], "max_attempts": [["bytes", 0.21820786827654942], ["str", 0.1998142442101405], ["int", 0.14432500918276653], ["float", 0.08913747597671871], ["Optional[bytes]", 0.08129406556531624], ["Iterator[str]", 0.07877876184972805]], "self": [], "target_state": [["int", 0.310422265686358], ["float", 0.11120419095174258], ["List[int]", 0.0967850223142705], ["raiden.utils.Address", 0.09362003381046337], ["Optional[int]", 0.09315669178689596]]}, "q_name": "RdsHook.wait_for_export_task_state", "ret_exprs": [], "ret_type": "None", "variables": {"target_state": ""}, "variables_p": {"target_state": [["str", 0.16155825138059177], ["bytes", 0.0882216290028277], ["bytearray", 0.08610099363172806], ["dict", 0.08205555237844561]]}}, {"docstring": {"func": "Gets the current state of an RDS snapshot export to Amazon S3.", "long_descr": ".. seealso::\n    - :external+boto3:py:meth:`RDS.Client.describe_event_subscriptions`", "ret": "Returns the status of the event subscription as a string (eg. \"active\")"}, "fn_lc": [[188, 4], [205, 70]], "fn_var_ln": {"response": [[200, 12], [200, 20]]}, "fn_var_occur": {"response": [["response", "self", "conn", "describe_event_subscriptions", "SubscriptionName", "subscription_name"], ["e", "response"], ["response", "lower"]]}, "name": "get_event_subscription_state", "params": {"self": "", "subscription_name": "builtins.str"}, "params_descr": {"self": "", "subscription_name": "The name of the target RDS event notification subscription."}, "params_occur": {"self": [["response", "self", "conn", "describe_event_subscriptions", "SubscriptionName", "subscription_name"]], "subscription_name": [["response", "self", "conn", "describe_event_subscriptions", "SubscriptionName", "subscription_name"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "subscription_name": [["str", 0.794462295763268], ["Optional[str]", 0.10731958296060738], ["list", 0.09821812127612471]]}, "q_name": "RdsHook.get_event_subscription_state", "ret_exprs": ["return response[\"EventSubscriptionsList\"][0][\"Status\"].lower()"], "ret_type": "builtins.str", "ret_type_p": [["Optional[str]", 0.2048817775543076], ["dict", 0.1930539373789509], ["bool", 0.11627838337822889], ["Dict[str, Any]", 0.09663900299888185]], "variables": {"response": ""}, "variables_p": {"response": [["dict", 0.1954408521386583], ["Dict[str, None]", 0.12374144729396887], ["Dict[str, Union[bytes, str]]", 0.110761432809838], ["Dict[str, str]", 0.10523410341656429], ["list", 0.09394992916756219], ["str", 0.093901447137883], ["Dict[str, Type[Any]]", 0.08341606991330354]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[222, 8], [223, 71]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "poke", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "RdsHook.wait_for_event_subscription_state.<locals>.poke", "ret_exprs": ["return self.get_event_subscription_state(subscription_name)"], "ret_type": "", "ret_type_p": [["str", 0.6972706419398301], ["Tuple[str]", 0.1269387911955908]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Poll Event Subscriptions until target_state is reached; raise AirflowException after max_attempts.", "long_descr": ".. seealso::\n    - :external+boto3:py:meth:`RDS.Client.describe_event_subscriptions`", "ret": null}, "fn_lc": [[207, 4], [227, 104]], "fn_var_ln": {"target_state": [[225, 8], [225, 20]]}, "fn_var_occur": {"target_state": [["target_state", "target_state", "lower"], ["self", "_wait_for_state", "poke", "target_state", "check_interval", "max_attempts"], ["self", "log", "info", "subscription_name", "target_state"]]}, "name": "wait_for_event_subscription_state", "params": {"check_interval": "builtins.int", "max_attempts": "builtins.int", "self": "", "subscription_name": "builtins.str", "target_state": "builtins.str"}, "params_descr": {"check_interval": "The amount of time in seconds to wait between attempts", "max_attempts": "The maximum number of attempts to be made", "self": "", "subscription_name": "The name of the target RDS event notification subscription.", "target_state": "Wait until this state is reached"}, "params_occur": {"check_interval": [["self", "_wait_for_state", "poke", "target_state", "check_interval", "max_attempts"]], "max_attempts": [["self", "_wait_for_state", "poke", "target_state", "check_interval", "max_attempts"]], "self": [["self", "_wait_for_state", "poke", "target_state", "check_interval", "max_attempts"], ["self", "log", "info", "subscription_name", "target_state"]], "subscription_name": [["self", "log", "info", "subscription_name", "target_state"]], "target_state": [["target_state", "target_state", "lower"], ["self", "_wait_for_state", "poke", "target_state", "check_interval", "max_attempts"], ["self", "log", "info", "subscription_name", "target_state"]]}, "params_p": {"args": [], "check_interval": [["bool", 0.2143329781465317], ["list", 0.10864857435875411], ["int", 0.10120949936126565], ["str", 0.08913906415549185], ["List[Dict]", 0.08913906415549185], ["Optional[str]", 0.08867097331819002], ["raiden.utils.TokenNetworkID", 0.08768586156948582]], "kwargs": [], "max_attempts": [["bool", 0.2143329781465317], ["list", 0.10864857435875411], ["int", 0.10120949936126565], ["str", 0.08913906415549185], ["List[Dict]", 0.08913906415549185], ["Optional[str]", 0.08867097331819002], ["raiden.utils.TokenNetworkID", 0.08768586156948582]], "self": [], "subscription_name": [["str", 1.0]], "target_state": [["Optional[int]", 0.17778408365273088], ["int", 0.09826554723228778], ["bytes", 0.09401217105077349], ["raiden.utils.TokenNetworkAddress", 0.09091371238457274], ["Optional[float]", 0.08889204182636544]]}, "q_name": "RdsHook.wait_for_event_subscription_state", "ret_exprs": [], "ret_type": "None", "variables": {"target_state": ""}, "variables_p": {"target_state": [["int", 0.4476116226083894], ["str", 0.27412692696989566]]}}, {"docstring": {"func": "Get the current state of a DB instance.", "long_descr": ".. seealso::\n    - :external+boto3:py:meth:`RDS.Client.describe_db_instances`", "ret": "Returns the status of the DB instance as a string (eg. \"available\")"}, "fn_lc": [[229, 4], [246, 69]], "fn_var_ln": {"response": [[241, 12], [241, 20]]}, "fn_var_occur": {"response": [["response", "self", "conn", "describe_db_instances", "DBInstanceIdentifier", "db_instance_id"], ["e", "response"], ["response", "lower"]]}, "name": "get_db_instance_state", "params": {"db_instance_id": "builtins.str", "self": ""}, "params_descr": {"db_instance_id": "The ID of the target DB instance.", "self": ""}, "params_occur": {"db_instance_id": [["response", "self", "conn", "describe_db_instances", "DBInstanceIdentifier", "db_instance_id"]], "self": [["response", "self", "conn", "describe_db_instances", "DBInstanceIdentifier", "db_instance_id"]]}, "params_p": {"args": [], "db_instance_id": [["int", 0.2004090848939957], ["bool", 0.18160297835252362], ["str", 0.09923281889267116]], "kwargs": [], "self": []}, "q_name": "RdsHook.get_db_instance_state", "ret_exprs": ["return response[\"DBInstances\"][0][\"DBInstanceStatus\"].lower()"], "ret_type": "builtins.str", "ret_type_p": [["Dict[str, Any]", 0.3049723957122909], ["Optional[str]", 0.21278737004276602], ["bool", 0.09514662033465103]], "variables": {"response": ""}, "variables_p": {"response": [["Dict[str, Union[Any, bool, str]]", 0.15150908189611487], ["Dict[str, Union[Any, Any, str]]", 0.14663924792565755], ["dict", 0.14166917352872158], ["int", 0.08456774678944794], ["Dict[str, str]", 0.07559317452812837]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[263, 8], [264, 61]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "poke", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "RdsHook.wait_for_db_instance_state.<locals>.poke", "ret_exprs": ["return self.get_db_instance_state(db_instance_id)"], "ret_type": "", "ret_type_p": [["bool", 0.11500119836166232], ["Optional[Dict[str, Any]]", 0.11341446772120474], ["int", 0.09738362478070663], ["Dict[str, Any]", 0.08945195762240812], ["Optional[str]", 0.0894304974883466]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Poll DB Instances until target_state is reached; raise AirflowException after max_attempts.", "long_descr": ".. seealso::\n    - :external+boto3:py:meth:`RDS.Client.describe_db_instances`", "ret": null}, "fn_lc": [[248, 4], [280, 106]], "fn_var_ln": {"target_state": [[266, 8], [266, 20]], "waiter": [[268, 12], [268, 18]]}, "fn_var_occur": {"target_state": [["target_state", "target_state", "lower"], ["waiter", "self", "conn", "get_waiter", "target_state"], ["wait", "waiter", "waiter", "waiter_delay", "check_interval", "waiter_max_attempts", "max_attempts", "args", "db_instance_id", "failure_message", "target_state", "status_message", "status_args"], ["self", "_wait_for_state", "poke", "target_state", "check_interval", "max_attempts"], ["self", "log", "info", "db_instance_id", "target_state"]], "waiter": [["waiter", "self", "conn", "get_waiter", "target_state"], ["wait", "waiter", "waiter", "waiter_delay", "check_interval", "waiter_max_attempts", "max_attempts", "args", "db_instance_id", "failure_message", "target_state", "status_message", "status_args"]]}, "name": "wait_for_db_instance_state", "params": {"check_interval": "builtins.int", "db_instance_id": "builtins.str", "max_attempts": "builtins.int", "self": "", "target_state": "builtins.str"}, "params_descr": {"check_interval": "The amount of time in seconds to wait between attempts", "db_instance_id": "The ID of the target DB instance.", "max_attempts": "The maximum number of attempts to be made", "self": "", "target_state": "Wait until this state is reached"}, "params_occur": {"check_interval": [["wait", "waiter", "waiter", "waiter_delay", "check_interval", "waiter_max_attempts", "max_attempts", "args", "db_instance_id", "failure_message", "target_state", "status_message", "status_args"], ["self", "_wait_for_state", "poke", "target_state", "check_interval", "max_attempts"]], "db_instance_id": [["wait", "waiter", "waiter", "waiter_delay", "check_interval", "waiter_max_attempts", "max_attempts", "args", "db_instance_id", "failure_message", "target_state", "status_message", "status_args"], ["self", "log", "info", "db_instance_id", "target_state"]], "max_attempts": [["wait", "waiter", "waiter", "waiter_delay", "check_interval", "waiter_max_attempts", "max_attempts", "args", "db_instance_id", "failure_message", "target_state", "status_message", "status_args"], ["self", "_wait_for_state", "poke", "target_state", "check_interval", "max_attempts"]], "self": [["waiter", "self", "conn", "get_waiter", "target_state"], ["self", "_wait_for_state", "poke", "target_state", "check_interval", "max_attempts"], ["self", "log", "info", "db_instance_id", "target_state"]], "target_state": [["target_state", "target_state", "lower"], ["waiter", "self", "conn", "get_waiter", "target_state"], ["wait", "waiter", "waiter", "waiter_delay", "check_interval", "waiter_max_attempts", "max_attempts", "args", "db_instance_id", "failure_message", "target_state", "status_message", "status_args"], ["self", "_wait_for_state", "poke", "target_state", "check_interval", "max_attempts"], ["self", "log", "info", "db_instance_id", "target_state"]]}, "params_p": {"args": [], "check_interval": [["str", 0.2853812883426082], ["bool", 0.12416206746693484], ["Dict[str, Any]", 0.0941520960367189]], "db_instance_id": [["str", 0.2853812883426082], ["bool", 0.12416206746693484], ["Dict[str, Any]", 0.0941520960367189]], "kwargs": [], "max_attempts": [["str", 0.2853812883426082], ["bool", 0.12416206746693484], ["Dict[str, Any]", 0.0941520960367189]], "self": [], "target_state": [["int", 0.3130625220644395], ["raiden.utils.TokenAmount", 0.09330285022862535]]}, "q_name": "RdsHook.wait_for_db_instance_state", "ret_exprs": [], "ret_type": "None", "variables": {"target_state": "", "waiter": ""}, "variables_p": {"target_state": [["str", 0.41959397267002785], ["int", 0.22711675930947467], ["dict", 0.09558669857824416]], "waiter": [["int", 0.5077164558334957], ["Dict[int, Any]", 0.18221258894248143], ["list", 0.09874646912018732]]}}, {"docstring": {"func": "Get the current state of a DB cluster.", "long_descr": ".. seealso::\n    - :external+boto3:py:meth:`RDS.Client.describe_db_clusters`", "ret": "Returns the status of the DB cluster as a string (eg. \"available\")"}, "fn_lc": [[282, 4], [299, 58]], "fn_var_ln": {"response": [[294, 12], [294, 20]]}, "fn_var_occur": {"response": [["response", "self", "conn", "describe_db_clusters", "DBClusterIdentifier", "db_cluster_id"], ["e", "response"], ["response", "lower"]]}, "name": "get_db_cluster_state", "params": {"db_cluster_id": "builtins.str", "self": ""}, "params_descr": {"db_cluster_id": "The ID of the target DB cluster.", "self": ""}, "params_occur": {"db_cluster_id": [["response", "self", "conn", "describe_db_clusters", "DBClusterIdentifier", "db_cluster_id"]], "self": [["response", "self", "conn", "describe_db_clusters", "DBClusterIdentifier", "db_cluster_id"]]}, "params_p": {"args": [], "db_cluster_id": [["int", 0.28549929881762676], ["Optional[str]", 0.11285579923875629], ["raiden.utils.ChannelID", 0.09281027638764218], ["str", 0.08808534223625918]], "kwargs": [], "self": []}, "q_name": "RdsHook.get_db_cluster_state", "ret_exprs": ["return response[\"DBClusters\"][0][\"Status\"].lower()"], "ret_type": "builtins.str", "ret_type_p": [["str", 0.39820103849308436], ["Optional[str]", 0.11854470309509098], ["bool", 0.09695381626572178], ["Optional[Callable]", 0.09233199956321562], ["list", 0.09152126960235747]], "variables": {"response": ""}, "variables_p": {"response": [["int", 0.19580741812604643], ["Dict[str, Union[Any, bool, str]]", 0.18629181964170105], ["dict", 0.1706769992335443], ["Dict[str, str]", 0.08651628000203611], ["Dict[str, int]", 0.07038430484260907]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[316, 8], [317, 59]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "poke", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "RdsHook.wait_for_db_cluster_state.<locals>.poke", "ret_exprs": ["return self.get_db_cluster_state(db_cluster_id)"], "ret_type": "", "ret_type_p": [["bool", 0.11500119836166232], ["Optional[Dict[str, Any]]", 0.11341446772120474], ["int", 0.09738362478070663], ["Dict[str, Any]", 0.08945195762240812], ["Optional[str]", 0.0894304974883466]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Poll DB Clusters until target_state is reached; raise AirflowException after max_attempts.", "long_descr": ".. seealso::\n    - :external+boto3:py:meth:`RDS.Client.describe_db_clusters`", "ret": null}, "fn_lc": [[301, 4], [328, 105]], "fn_var_ln": {"target_state": [[319, 8], [319, 20]], "waiter": [[321, 12], [321, 18]]}, "fn_var_occur": {"target_state": [["target_state", "target_state", "lower"], ["waiter", "self", "conn", "get_waiter", "target_state"], ["self", "_wait_for_state", "poke", "target_state", "check_interval", "max_attempts"], ["self", "log", "info", "db_cluster_id", "target_state"]], "waiter": [["waiter", "self", "conn", "get_waiter", "target_state"], ["waiter", "wait", "DBClusterIdentifier", "db_cluster_id", "WaiterConfig", "check_interval", "max_attempts"]]}, "name": "wait_for_db_cluster_state", "params": {"check_interval": "builtins.int", "db_cluster_id": "builtins.str", "max_attempts": "builtins.int", "self": "", "target_state": "builtins.str"}, "params_descr": {"check_interval": "The amount of time in seconds to wait between attempts", "db_cluster_id": "The ID of the target DB cluster.", "max_attempts": "The maximum number of attempts to be made", "self": "", "target_state": "Wait until this state is reached"}, "params_occur": {"check_interval": [["waiter", "wait", "DBClusterIdentifier", "db_cluster_id", "WaiterConfig", "check_interval", "max_attempts"], ["self", "_wait_for_state", "poke", "target_state", "check_interval", "max_attempts"]], "db_cluster_id": [["waiter", "wait", "DBClusterIdentifier", "db_cluster_id", "WaiterConfig", "check_interval", "max_attempts"], ["self", "log", "info", "db_cluster_id", "target_state"]], "max_attempts": [["waiter", "wait", "DBClusterIdentifier", "db_cluster_id", "WaiterConfig", "check_interval", "max_attempts"], ["self", "_wait_for_state", "poke", "target_state", "check_interval", "max_attempts"]], "self": [["waiter", "self", "conn", "get_waiter", "target_state"], ["self", "_wait_for_state", "poke", "target_state", "check_interval", "max_attempts"], ["self", "log", "info", "db_cluster_id", "target_state"]], "target_state": [["target_state", "target_state", "lower"], ["waiter", "self", "conn", "get_waiter", "target_state"], ["self", "_wait_for_state", "poke", "target_state", "check_interval", "max_attempts"], ["self", "log", "info", "db_cluster_id", "target_state"]]}, "params_p": {"args": [], "check_interval": [["int", 0.23798199650267698], ["raiden.utils.ChannelID", 0.10246504348836706], ["float", 0.10217672858613747], ["bytes", 0.08729360796818976], ["List[raiden.utils.Address]", 0.08665274253571617], ["raiden.utils.List[raiden.transfer.architecture.Event]", 0.08433882948305978]], "db_cluster_id": [["int", 0.390456359967952], ["raiden.utils.ChannelID", 0.10276438643008723], ["raiden.utils.TokenAddress", 0.09380558296877617]], "kwargs": [], "max_attempts": [["int", 0.23798199650267698], ["raiden.utils.ChannelID", 0.10246504348836706], ["float", 0.10217672858613747], ["bytes", 0.08729360796818976], ["List[raiden.utils.Address]", 0.08665274253571617], ["raiden.utils.List[raiden.transfer.architecture.Event]", 0.08433882948305978]], "self": [], "target_state": [["int", 0.3090707674754452], ["str", 0.11094706863079619], ["raiden.utils.TokenAmount", 0.09965586988074997], ["raiden.utils.ChannelID", 0.09308200089556241]]}, "q_name": "RdsHook.wait_for_db_cluster_state", "ret_exprs": [], "ret_type": "None", "variables": {"target_state": "", "waiter": ""}, "variables_p": {"target_state": [["str", 0.2975544755234798], ["int", 0.13850245308239037], ["dict", 0.09235012828837907]], "waiter": [["int", 0.4429703487249957], ["float", 0.2682376957838171]]}}, {"docstring": {"func": "Polls the poke function for the current state until it reaches the target_state.", "long_descr": null, "ret": null}, "fn_lc": [[330, 4], [353, 22]], "fn_var_ln": {"state": [[352, 12], [352, 17]], "tries": [[346, 8], [346, 13]]}, "fn_var_occur": {"state": [["state", "poke"], ["state", "target_state"], ["self", "log", "info", "state"], ["state", "poke"]], "tries": [["tries", "max_attempts"]]}, "name": "_wait_for_state", "params": {"check_interval": "builtins.int", "max_attempts": "builtins.int", "poke": "typing.Callable[..., builtins.str]", "self": "", "target_state": "builtins.str"}, "params_descr": {"check_interval": "The amount of time in seconds to wait between attempts", "max_attempts": "The maximum number of attempts to be made", "poke": "A function that returns the current state of the target resource as a string.", "self": "", "target_state": "Wait until this state is reached"}, "params_occur": {"check_interval": [["time", "sleep", "check_interval"]], "max_attempts": [["tries", "max_attempts"]], "poke": [["state", "poke"], ["state", "poke"]], "self": [["self", "log", "info", "state"]], "target_state": [["state", "target_state"]]}, "params_p": {"args": [], "check_interval": [["str", 0.0907801308279831], ["Sequence[Sequence[str]]", 0.08583281839698755], ["Sequence[str]", 0.08583281839698755]], "kwargs": [], "max_attempts": [["int", 0.17205450639088993], ["bool", 0.17205450639088993], ["Tuple[int, int]", 0.10563330587998895], ["Optional[Union[int, float]]", 0.09898545882391425], ["utils.Rect", 0.07134939609677127]], "poke": [["str", 0.22735618181222142], ["dict", 0.13789817752814132]], "self": [], "target_state": [["List[int]", 0.10162908617371849]]}, "q_name": "RdsHook._wait_for_state", "ret_exprs": [], "ret_type": "None", "variables": {"state": "", "tries": ""}, "variables_p": {"state": [["dict", 0.18596820143885445], ["Dict[str, Any]", 0.10467994667063327]], "tries": [["int", 0.8999999999999999], ["List[int]", 0.09999999999999999]]}}], "name": "RdsHook", "q_name": "RdsHook", "variables": {}, "variables_p": {}}], "funcs": [], "imports": ["__future__", "annotations", "time", "typing", "TYPE_CHECKING", "Callable", "airflow", "exceptions", "AirflowException", "AirflowNotFoundException", "airflow", "providers", "amazon", "aws", "hooks", "base_aws", "AwsGenericHook", "airflow", "providers", "amazon", "aws", "utils", "waiter_with_logging", "wait", "mypy_boto3_rds", "RDSClient"], "mod_var_ln": {}, "mod_var_occur": {}, "no_types_annot": {"D": 42, "I": 0, "U": 21}, "session_id": "MboQBIrCp8b_zi5WLbZQ8SYzyZPQvu0f85xImwnKTbw", "set": null, "tc": [false, null], "type_annot_cove": 0.67, "typed_seq": "", "untyped_seq": "", "variables": {}, "variables_p": {}}}