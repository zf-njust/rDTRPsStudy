{"error": null, "response": {"classes": [{"cls_lc": [[31, 0], [150, 51]], "cls_var_ln": {"IGNORABLE": [[42, 4], [42, 13]], "IS_TASK_DEP": [[46, 4], [46, 15]]}, "cls_var_occur": {"IGNORABLE": [], "IS_TASK_DEP": []}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[48, 4], [49, 44]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "__eq__", "params": {"other": "typing.Any", "self": ""}, "params_descr": {"other": "", "self": ""}, "params_occur": {"other": [["isinstance", "self", "type", "other"]], "self": [["isinstance", "self", "type", "other"]]}, "params_p": {"args": [], "kwargs": [], "other": [["int", 0.11908575835603029], ["dict", 0.09379658155758351], ["Type", 0.09197020529441678], ["Callable", 0.09017037268674388], ["Optional[Dict[str, str]]", 0.08932219590253011]], "self": []}, "q_name": "BaseTIDep.__eq__", "ret_exprs": ["return isinstance(self, type(other))"], "ret_type": "builtins.bool", "ret_type_p": [["str", 0.06953315969803704]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[51, 4], [52, 31]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "__hash__", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["hash", "type", "self"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "BaseTIDep.__hash__", "ret_exprs": ["return hash(type(self))"], "ret_type": "builtins.int", "ret_type_p": [["int", 0.6147206945726204], ["bool", 0.10650877761553373], ["zerver.models.Realm", 0.08281839131027867]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[54, 4], [55, 38]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "__repr__", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "name"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "BaseTIDep.__repr__", "ret_exprs": ["return f\"<TIDep({self.name})>\""], "ret_type": "builtins.str", "ret_type_p": [["str", 1.0000000000000002]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "The human-readable name for the dependency.", "long_descr": "Use the class name as the default if ``NAME`` is not provided.", "ret": null}, "fn_lc": [[58, 4], [63, 61]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "name", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["getattr", "self", "self", "__class__", "__name__"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "BaseTIDep.name", "ret_exprs": ["return getattr(self, \"NAME\", self.__class__.__name__)"], "ret_type": "builtins.str", "ret_type_p": [["bool", 0.09091208430578722]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Abstract method that returns an iterable of TIDepStatus objects.", "long_descr": "Each object describes whether the given task instance has this dependency met.\n\nFor example a subclass could return an iterable of TIDepStatus objects, each one\nrepresenting if each of the passed in task's upstream tasks succeeded or not.", "ret": null}, "fn_lc": [[65, 4], [83, 33]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "_get_dep_statuses", "params": {"dep_context": "airflow.ti_deps.dep_context.DepContext", "self": "", "session": "sqlalchemy.orm.Session", "ti": "airflow.models.taskinstance.TaskInstance"}, "params_descr": {"dep_context": "the context for which this dependency should be evaluated for", "self": "", "session": "database session", "ti": "the task instance to get the dependency status for"}, "params_occur": {"dep_context": [], "self": [], "session": [], "ti": []}, "params_p": {"args": [], "dep_context": [["str", 0.621787082002511], ["Optional[requests.sessions.Session]", 0.28365968849811674], ["schema_salad.utils.CacheType", 0.09455322949937225]], "kwargs": [], "self": [], "session": [["str", 0.621787082002511], ["Optional[requests.sessions.Session]", 0.28365968849811674], ["schema_salad.utils.CacheType", 0.09455322949937225]], "ti": [["str", 0.621787082002511], ["Optional[requests.sessions.Session]", 0.28365968849811674], ["schema_salad.utils.CacheType", 0.09455322949937225]]}, "q_name": "BaseTIDep._get_dep_statuses", "ret_exprs": [], "ret_type": "typing.Iterator[TIDepStatus]", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Wrapper around the private _get_dep_statuses method.", "long_descr": "Contains some global checks for all dependencies.", "ret": null}, "fn_lc": [[86, 4], [111, 59]], "fn_var_ln": {"cxt": [[101, 8], [101, 11]]}, "fn_var_occur": {"cxt": [["cxt", "DepContext", "dep_context", "None", "dep_context"], ["self", "IGNORABLE", "cxt", "ignore_all_deps"], ["self", "IS_TASK_DEP", "cxt", "ignore_task_deps"], ["self", "_get_dep_statuses", "ti", "session", "cxt"]]}, "name": "get_dep_statuses", "params": {"dep_context": "DepContext | None", "self": "", "session": "sqlalchemy.orm.Session", "ti": "airflow.models.taskinstance.TaskInstance"}, "params_descr": {"dep_context": "the context for which this dependency should be evaluated for", "self": "", "session": "database session", "ti": "the task instance to get the dependency status for"}, "params_occur": {"dep_context": [["cxt", "DepContext", "dep_context", "None", "dep_context"]], "self": [["self", "IGNORABLE", "cxt", "ignore_all_deps"], ["self", "_passing_status", "reason"], ["self", "IS_TASK_DEP", "cxt", "ignore_task_deps"], ["self", "_passing_status", "reason"], ["self", "_get_dep_statuses", "ti", "session", "cxt"]], "session": [["self", "_get_dep_statuses", "ti", "session", "cxt"]], "ti": [["self", "_get_dep_statuses", "ti", "session", "cxt"]]}, "params_p": {"args": [], "dep_context": [["bool", 0.29893572969172183], ["zerver.models.Client", 0.1021861860172861], ["sqlalchemy.orm.scoped_session", 0.1007506385840049], ["str", 0.0902474988230039]], "kwargs": [], "self": [], "session": [["uita.auth.Session", 0.11737906700478208], ["sqlalchemy.orm.session.Session", 0.11048207575141919], ["app.models.User", 0.11032248410608317], ["recidiviz.persistence.database.session.Session", 0.09016510663847668], ["Optional[str]", 0.08922916269990654], ["Optional[sqlalchemy.orm.session.Session]", 0.08922916269990654], ["Optional[requests.sessions.Session]", 0.08922916269990654], ["sqlalchemy.orm.Session", 0.0890068618057798]], "ti": [["uita.auth.Session", 0.11737906700478208], ["sqlalchemy.orm.session.Session", 0.11048207575141919], ["app.models.User", 0.11032248410608317], ["recidiviz.persistence.database.session.Session", 0.09016510663847668], ["Optional[str]", 0.08922916269990654], ["Optional[sqlalchemy.orm.session.Session]", 0.08922916269990654], ["Optional[requests.sessions.Session]", 0.08922916269990654], ["sqlalchemy.orm.Session", 0.0890068618057798]]}, "q_name": "BaseTIDep.get_dep_statuses", "ret_exprs": ["return", "return"], "ret_type": "typing.Iterator[TIDepStatus]", "ret_type_p": [["List[django.db.models.Model]", 0.1056978188142825], ["Iterator[Dict[str, str]]", 0.09961790035474329], ["Iterable[Mapping[str, Any]]", 0.08655789498458304], ["Optional[bool]", 0.08655789498458304]], "variables": {"cxt": ""}, "variables_p": {"cxt": []}}, {"docstring": {"func": "Returns whether a dependency is met for a given task instance.", "long_descr": "A dependency is considered met if all the dependency statuses it reports are passing.", "ret": null}, "fn_lc": [[114, 4], [125, 95]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "is_met", "params": {"dep_context": "DepContext | None", "self": "", "session": "sqlalchemy.orm.Session", "ti": "airflow.models.taskinstance.TaskInstance"}, "params_descr": {"dep_context": "The context this dependency is being checked under that stores\nstate that can be used by this dependency.", "self": "", "session": "database session", "ti": "the task instance to see if this dependency is met for"}, "params_occur": {"dep_context": [["all", "status", "passed", "status", "self", "get_dep_statuses", "ti", "session", "dep_context"]], "self": [["all", "status", "passed", "status", "self", "get_dep_statuses", "ti", "session", "dep_context"]], "session": [["all", "status", "passed", "status", "self", "get_dep_statuses", "ti", "session", "dep_context"]], "ti": [["all", "status", "passed", "status", "self", "get_dep_statuses", "ti", "session", "dep_context"]]}, "params_p": {"args": [], "dep_context": [["sqlalchemy.orm.session.Session", 0.36718213201597666], ["recidiviz.persistence.database.session.Session", 0.11525789925004461], ["sqlalchemy.orm.Session", 0.08543371310785733], ["yawasscanner.session.Session", 0.08066927061243735], ["str", 0.07696215709117754]], "kwargs": [], "self": [], "session": [["sqlalchemy.orm.session.Session", 0.36718213201597666], ["recidiviz.persistence.database.session.Session", 0.11525789925004461], ["sqlalchemy.orm.Session", 0.08543371310785733], ["yawasscanner.session.Session", 0.08066927061243735], ["str", 0.07696215709117754]], "ti": [["sqlalchemy.orm.session.Session", 0.36718213201597666], ["recidiviz.persistence.database.session.Session", 0.11525789925004461], ["sqlalchemy.orm.Session", 0.08543371310785733], ["yawasscanner.session.Session", 0.08066927061243735], ["str", 0.07696215709117754]]}, "q_name": "BaseTIDep.is_met", "ret_exprs": ["return all(status.passed for status in self.get_dep_statuses(ti, session, dep_context))"], "ret_type": "builtins.bool", "ret_type_p": [["bool", 0.18897360411879494], ["str", 0.11443239924514313], ["List[str]", 0.11403413851924589], ["Dict[str, Tuple[int, int]]", 0.1039899895544707], ["Union[type, Tuple[type, ...]]", 0.10265982222905662], ["Dict[str, List[Any]]", 0.10251046036924237], ["transfer.models.Badge", 0.08946182707517485], ["List[int]", 0.08934836236030075]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Returns an iterable of strings that explain why this dependency wasn't met.", "long_descr": null, "ret": null}, "fn_lc": [[128, 4], [144, 39]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "get_failure_reasons", "params": {"dep_context": "DepContext | None", "self": "", "session": "sqlalchemy.orm.Session", "ti": "airflow.models.taskinstance.TaskInstance"}, "params_descr": {"dep_context": "The context this dependency is being checked under that stores\nstate that can be used by this dependency.", "self": "", "session": "database session", "ti": "the task instance to see if this dependency is met for"}, "params_occur": {"dep_context": [["self", "get_dep_statuses", "ti", "session", "dep_context"]], "self": [["self", "get_dep_statuses", "ti", "session", "dep_context"]], "session": [["self", "get_dep_statuses", "ti", "session", "dep_context"]], "ti": [["self", "get_dep_statuses", "ti", "session", "dep_context"]]}, "params_p": {"args": [], "dep_context": [["sqlalchemy.orm.session.Session", 0.304606997112538], ["sqlalchemy.orm.session.Session.Transaction", 0.09878701315070071], ["Optional[str]", 0.09522557731919087], ["Optional[sqlalchemy.orm.session.Session]", 0.09522557731919087], ["Optional[requests.sessions.Session]", 0.09522557731919087], ["bool", 0.0927097804591579]], "kwargs": [], "self": [], "session": [["sqlalchemy.orm.session.Session", 0.304606997112538], ["sqlalchemy.orm.session.Session.Transaction", 0.09878701315070071], ["Optional[str]", 0.09522557731919087], ["Optional[sqlalchemy.orm.session.Session]", 0.09522557731919087], ["Optional[requests.sessions.Session]", 0.09522557731919087], ["bool", 0.0927097804591579]], "ti": [["sqlalchemy.orm.session.Session", 0.304606997112538], ["sqlalchemy.orm.session.Session.Transaction", 0.09878701315070071], ["Optional[str]", 0.09522557731919087], ["Optional[sqlalchemy.orm.session.Session]", 0.09522557731919087], ["Optional[requests.sessions.Session]", 0.09522557731919087], ["bool", 0.0927097804591579]]}, "q_name": "BaseTIDep.get_failure_reasons", "ret_exprs": [], "ret_type": "typing.Iterator[builtins.str]", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[146, 4], [147, 52]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "_failing_status", "params": {"reason": "builtins.str", "self": ""}, "params_descr": {"reason": "", "self": ""}, "params_occur": {"reason": [["TIDepStatus", "self", "name", "False", "reason"]], "self": [["TIDepStatus", "self", "name", "False", "reason"]]}, "params_p": {"args": [], "kwargs": [], "reason": [["Optional[str]", 0.5571552207487794], ["float", 0.22371374756550955], ["int", 0.12627182822758087], ["Tuple[int]", 0.09285920345812991]], "self": []}, "q_name": "BaseTIDep._failing_status", "ret_exprs": ["return TIDepStatus(self.name, False, reason)"], "ret_type": "TIDepStatus", "ret_type_p": [["str", 0.7044845079989502], ["bool", 0.1951395449605729]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[149, 4], [150, 51]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "_passing_status", "params": {"reason": "builtins.str", "self": ""}, "params_descr": {"reason": "", "self": ""}, "params_occur": {"reason": [["TIDepStatus", "self", "name", "True", "reason"]], "self": [["TIDepStatus", "self", "name", "True", "reason"]]}, "params_p": {"args": [], "kwargs": [], "reason": [["float", 0.21182402731558458], ["str", 0.1915984910755313], ["core.models.Registration", 0.09916340860722532], ["List[str]", 0.09579924553776566]], "self": []}, "q_name": "BaseTIDep._passing_status", "ret_exprs": ["return TIDepStatus(self.name, True, reason)"], "ret_type": "TIDepStatus", "ret_type_p": [["str", 0.5939716788518545], ["bool", 0.1200751125508856], ["Optional[str]", 0.09707967881732533]], "variables": {}, "variables_p": {}}], "name": "BaseTIDep", "q_name": "BaseTIDep", "variables": {"IGNORABLE": "", "IS_TASK_DEP": ""}, "variables_p": {"IGNORABLE": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "IS_TASK_DEP": [["str", 0.44903946417492085], ["bool", 0.2915763872148458], ["Optional[str]", 0.08910826962238676], ["Optional[int]", 0.08513793949392329], ["int", 0.08513793949392329]]}}, {"cls_lc": [[153, 0], [158, 24]], "cls_var_ln": {"dep_name": [[156, 4], [156, 12]], "passed": [[157, 4], [157, 10]], "reason": [[158, 4], [158, 10]]}, "cls_var_occur": {"dep_name": [], "passed": [], "reason": []}, "funcs": [], "name": "TIDepStatus", "q_name": "TIDepStatus", "variables": {"dep_name": "builtins.str", "passed": "builtins.bool", "reason": "builtins.str"}, "variables_p": {"dep_name": [["str", 0.7], ["Optional[str]", 0.2], ["List[str]", 0.1]], "passed": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "reason": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]]}}], "funcs": [], "imports": ["__future__", "annotations", "typing", "TYPE_CHECKING", "Any", "Iterator", "NamedTuple", "airflow", "ti_deps", "dep_context", "DepContext", "airflow", "utils", "session", "provide_session", "sqlalchemy", "orm", "Session", "airflow", "models", "taskinstance", "TaskInstance"], "mod_var_ln": {}, "mod_var_occur": {}, "no_types_annot": {"D": 28, "I": 0, "U": 3}, "session_id": "zGKkCLYioHE-8Sj3ZqzJR68VY3LcsLkavjQ-Dct_D3g", "set": null, "tc": [false, null], "type_annot_cove": 0.9, "typed_seq": "", "untyped_seq": "", "variables": {}, "variables_p": {}}}