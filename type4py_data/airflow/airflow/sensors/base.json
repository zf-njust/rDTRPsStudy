{"error": null, "response": {"classes": [{"cls_lc": [[63, 0], [79, 27]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[74, 4], [76, 30]], "fn_var_ln": {"is_done": [[76, 8], [76, 20]], "xcom_value": [[75, 8], [75, 23]]}, "fn_var_occur": {"is_done": [["self", "is_done", "is_done"]], "xcom_value": [["self", "xcom_value", "xcom_value"]]}, "name": "__init__", "params": {"is_done": "builtins.bool", "self": "", "xcom_value": "Any | None"}, "params_descr": {"is_done": "", "self": "", "xcom_value": ""}, "params_occur": {"is_done": [["self", "is_done", "is_done"]], "self": [["self", "xcom_value", "xcom_value"], ["self", "is_done", "is_done"]], "xcom_value": [["self", "xcom_value", "xcom_value"]]}, "params_p": {"args": [], "is_done": [["bool", 0.3173244408548964], ["Optional[int]", 0.10358704064051154], ["str", 0.09946514245260865], ["int", 0.09823284369872494], ["Optional[str]", 0.09379285989339155]], "kwargs": [], "self": [], "xcom_value": [["int", 0.3926310312772401], ["datetime.datetime", 0.30875643813789044], ["bool", 0.19346329317057748], ["str", 0.10514923741429194]]}, "q_name": "PokeReturnValue.__init__", "ret_exprs": [], "ret_type": "None", "variables": {"is_done": "", "xcom_value": ""}, "variables_p": {"is_done": [["int", 0.712250357249623], ["datetime.datetime", 0.10351787900248384], ["bool", 0.09299640144570083]], "xcom_value": [["int", 0.5150091531957903], ["float", 0.2325143600068219], ["str", 0.08615926767097115], ["List[int]", 0.08369927582949417], ["list", 0.08261794329692228]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[78, 4], [79, 27]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "__bool__", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "is_done"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "PokeReturnValue.__bool__", "ret_exprs": ["return self.is_done"], "ret_type": "builtins.bool", "ret_type_p": [["bool", 1.0]], "variables": {}, "variables_p": {}}], "name": "PokeReturnValue", "q_name": "PokeReturnValue", "variables": {}, "variables_p": {}}, {"cls_lc": [[82, 0], [305, 63]], "cls_var_ln": {"deps": [[120, 4], [120, 8]], "ui_color": [[115, 4], [115, 12]], "valid_modes": [[116, 4], [116, 15]]}, "cls_var_occur": {"deps": [], "ui_color": [], "valid_modes": []}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[122, 4], [142, 37]], "fn_var_ln": {"exponential_backoff": [[139, 8], [139, 32]], "max_wait": [[140, 8], [140, 21]], "mode": [[138, 8], [138, 17]], "poke_interval": [[135, 8], [135, 26]], "silent_fail": [[141, 8], [141, 24]], "soft_fail": [[136, 8], [136, 22]], "timeout": [[137, 8], [137, 20]]}, "fn_var_occur": {"exponential_backoff": [["self", "exponential_backoff", "exponential_backoff"]], "max_wait": [["self", "max_wait", "self", "_coerce_max_wait", "max_wait"]], "mode": [["self", "mode", "mode"]], "poke_interval": [["self", "poke_interval", "poke_interval"]], "silent_fail": [["self", "silent_fail", "silent_fail"]], "soft_fail": [["self", "soft_fail", "soft_fail"]], "timeout": [["self", "timeout", "timeout"]]}, "name": "__init__", "params": {"exponential_backoff": "builtins.bool", "kwargs": "", "max_wait": "timedelta | float | None", "mode": "builtins.str", "poke_interval": "builtins.float", "self": "", "silent_fail": "builtins.bool", "soft_fail": "builtins.bool", "timeout": "builtins.float"}, "params_descr": {"exponential_backoff": "", "kwargs": "", "max_wait": "", "mode": "", "poke_interval": "", "self": "", "silent_fail": "", "soft_fail": "", "timeout": ""}, "params_occur": {"exponential_backoff": [["self", "exponential_backoff", "exponential_backoff"]], "kwargs": [["super", "__init__", "kwargs"]], "max_wait": [["self", "max_wait", "self", "_coerce_max_wait", "max_wait"]], "mode": [["self", "mode", "mode"]], "poke_interval": [["self", "poke_interval", "poke_interval"]], "self": [["self", "poke_interval", "poke_interval"], ["self", "soft_fail", "soft_fail"], ["self", "timeout", "timeout"], ["self", "mode", "mode"], ["self", "exponential_backoff", "exponential_backoff"], ["self", "max_wait", "self", "_coerce_max_wait", "max_wait"], ["self", "silent_fail", "silent_fail"], ["self", "_validate_input_values"]], "silent_fail": [["self", "silent_fail", "silent_fail"]], "soft_fail": [["self", "soft_fail", "soft_fail"]], "timeout": [["self", "timeout", "timeout"]]}, "params_p": {"args": [], "exponential_backoff": [["int", 0.1756817992186112], ["bytes", 0.14040426685296323], ["float", 0.1135410686679721], ["Optional[List[Any]]", 0.08897546522275274], ["Dict[str, Any]", 0.08203508611873234], ["bool", 0.08100711662049942]], "kwargs": [], "max_wait": [["int", 0.5830695697958885], ["float", 0.18370480363472352], ["Optional[int]", 0.11661281328469401], ["bool", 0.11661281328469401]], "mode": [["int", 0.1756817992186112], ["bytes", 0.14040426685296323], ["float", 0.1135410686679721], ["Optional[List[Any]]", 0.08897546522275274], ["Dict[str, Any]", 0.08203508611873234], ["bool", 0.08100711662049942]], "poke_interval": [["int", 0.1756817992186112], ["bytes", 0.14040426685296323], ["float", 0.1135410686679721], ["Optional[List[Any]]", 0.08897546522275274], ["Dict[str, Any]", 0.08203508611873234], ["bool", 0.08100711662049942]], "self": [], "silent_fail": [["int", 0.1756817992186112], ["bytes", 0.14040426685296323], ["float", 0.1135410686679721], ["Optional[List[Any]]", 0.08897546522275274], ["Dict[str, Any]", 0.08203508611873234], ["bool", 0.08100711662049942]], "soft_fail": [["int", 0.1756817992186112], ["bytes", 0.14040426685296323], ["float", 0.1135410686679721], ["Optional[List[Any]]", 0.08897546522275274], ["Dict[str, Any]", 0.08203508611873234], ["bool", 0.08100711662049942]], "timeout": [["int", 0.1756817992186112], ["bytes", 0.14040426685296323], ["float", 0.1135410686679721], ["Optional[List[Any]]", 0.08897546522275274], ["Dict[str, Any]", 0.08203508611873234], ["bool", 0.08100711662049942]]}, "q_name": "BaseSensorOperator.__init__", "ret_exprs": [], "ret_type": "None", "variables": {"exponential_backoff": "", "max_wait": "", "mode": "", "poke_interval": "", "silent_fail": "", "soft_fail": "", "timeout": ""}, "variables_p": {"exponential_backoff": [["str", 0.30000000000000004], ["Dict[str, Any]", 0.1], ["dict", 0.1], ["int", 0.1]], "max_wait": [["int", 1.0]], "mode": [["bytes", 0.9999999994610422], ["str", 2.3171916564612614e-10], ["List[str]", 1.784992048380376e-10], ["float", 1.2873921362155948e-10]], "poke_interval": [["str", 0.30000000000000004], ["Dict[str, Any]", 0.1], ["dict", 0.1], ["int", 0.1]], "silent_fail": [["str", 0.30000000000000004], ["Dict[str, Any]", 0.1], ["dict", 0.1], ["int", 0.1]], "soft_fail": [["str", 0.30000000000000004], ["Dict[str, Any]", 0.1], ["dict", 0.1], ["int", 0.1]], "timeout": [["int", 0.8927522692771194], ["float", 0.10724773072288042]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[145, 4], [150, 107]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "_coerce_max_wait", "params": {"max_wait": "float | timedelta | None"}, "params_descr": {"max_wait": ""}, "params_occur": {"max_wait": [["max_wait", "None", "isinstance", "max_wait", "timedelta"], ["isinstance", "max_wait", "int", "float", "max_wait"], ["timedelta", "seconds", "max_wait"]]}, "params_p": {"args": [], "kwargs": [], "max_wait": [["Optional[int]", 0.7285741068023192], ["int", 0.15849010772162633], ["Optional[str]", 0.05889088825402263]], "self": []}, "q_name": "BaseSensorOperator._coerce_max_wait", "ret_exprs": ["return max_wait", "return timedelta(seconds=max_wait)"], "ret_type": "timedelta | None", "ret_type_p": [["int", 0.30000000000000004], ["Callable", 0.2], ["models.Question", 0.1], ["str", 0.1]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[152, 4], [172, 17]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "_validate_input_values", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["isinstance", "self", "poke_interval", "int", "float", "self", "poke_interval"], ["isinstance", "self", "timeout", "int", "float", "self", "timeout"], ["self", "mode", "self", "valid_modes"], ["AirflowException", "self", "valid_modes", "self", "dag", "dag_id", "self", "has_dag", "self", "task_id", "self", "mode"], ["self", "reschedule", "_is_metadatabase_mysql"], ["timezone", "utcnow", "datetime", "timedelta", "seconds", "self", "poke_interval", "_MYSQL_TIMESTAMP_MAX"], ["AirflowException", "self", "poke_interval"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "BaseSensorOperator._validate_input_values", "ret_exprs": [], "ret_type": "None", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Function defined by the sensors while deriving this class should override.", "long_descr": null, "ret": null}, "fn_lc": [[174, 4], [176, 46]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "poke", "params": {"context": "airflow.utils.context.Context", "self": ""}, "params_descr": {"context": "", "self": ""}, "params_occur": {"context": [], "self": []}, "params_p": {"args": [], "context": [["int", 0.19999999999999998], ["str", 0.19999999999999998], ["Iterable['Context']", 0.09999999999999999], ["dict", 0.09999999999999999], ["bool", 0.09999999999999999]], "kwargs": [], "self": []}, "q_name": "BaseSensorOperator.poke", "ret_exprs": [], "ret_type": "bool | PokeReturnValue", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[195, 12], [198, 71]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "run_duration", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "BaseSensorOperator.execute.<locals>.run_duration", "ret_exprs": ["return (timezone.utcnow() - start_date).total_seconds()"], "ret_type": "builtins.float", "ret_type_p": [["str", 0.19424890941333725], ["Union[str, int]", 0.18333934918515687], ["Dict[str, Any]", 0.10497111564319338], ["T", 0.0976416349266039]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[203, 12], [204, 57]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "run_duration", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "BaseSensorOperator.execute.<locals>.run_duration", "ret_exprs": ["return time.monotonic() - start_monotonic"], "ret_type": "builtins.float", "ret_type_p": [["int", 0.9078390804478594], ["Dict[int, zam_repondeur.services.fetch.an.dossiers.models.TexteRef]", 0.09216091955214084]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[178, 4], [256, 25]], "fn_var_ln": {"first_try_number": [[185, 12], [185, 28]], "log_dag_id": [[207, 8], [207, 18]], "message": [[234, 16], [234, 23]], "next_poke_interval": [[244, 16], [244, 34]], "poke_return": [[223, 20], [223, 31]], "reschedule_date": [[245, 16], [245, 31]], "start_date": [[192, 16], [192, 26]], "start_monotonic": [[201, 25], [201, 40]], "started_at": [[201, 12], [201, 22]], "task_reschedules": [[186, 12], [186, 28]], "try_number": [[206, 8], [206, 18]], "xcom_value": [[229, 20], [229, 30]]}, "fn_var_occur": {"first_try_number": [], "log_dag_id": [["log_dag_id", "self", "dag", "dag_id", "self", "has_dag"], ["AirflowSensorTimeout", "log_dag_id", "reschedule_date", "isoformat"]], "message": [["message", "run_duration", "self", "timeout"], ["AirflowSkipException", "message"], ["AirflowSensorTimeout", "message"]], "next_poke_interval": [["next_poke_interval", "self", "_get_next_poke_interval", "started_at", "run_duration", "try_number"], ["reschedule_date", "timezone", "utcnow", "timedelta", "seconds", "next_poke_interval"]], "poke_return": [["poke_return", "self", "poke", "context"], ["poke_return", "False"], ["isinstance", "poke_return", "PokeReturnValue"], ["xcom_value", "poke_return", "xcom_value"]], "reschedule_date": [["reschedule_date", "timezone", "utcnow", "timedelta", "seconds", "next_poke_interval"], ["_is_metadatabase_mysql", "reschedule_date", "_MYSQL_TIMESTAMP_MAX"], ["AirflowSensorTimeout", "log_dag_id", "reschedule_date", "isoformat"], ["AirflowRescheduleException", "reschedule_date"]], "start_date": [], "start_monotonic": [], "started_at": [["next_poke_interval", "self", "_get_next_poke_interval", "started_at", "run_duration", "try_number"], ["time", "sleep", "self", "_get_next_poke_interval", "started_at", "run_duration", "try_number"]], "task_reschedules": [], "try_number": [["next_poke_interval", "self", "_get_next_poke_interval", "started_at", "run_duration", "try_number"], ["time", "sleep", "self", "_get_next_poke_interval", "started_at", "run_duration", "try_number"]], "xcom_value": [["xcom_value", "None"], ["xcom_value", "poke_return", "xcom_value"]]}, "name": "execute", "params": {"context": "airflow.utils.context.Context", "self": ""}, "params_descr": {"context": "", "self": ""}, "params_occur": {"context": [["poke_return", "self", "poke", "context"]], "self": [["log_dag_id", "self", "dag", "dag_id", "self", "has_dag"], ["poke_return", "self", "poke", "context"], ["self", "silent_fail"], ["run_duration", "self", "timeout"], ["message", "run_duration", "self", "timeout"], ["self", "soft_fail"], ["self", "reschedule"], ["next_poke_interval", "self", "_get_next_poke_interval", "started_at", "run_duration", "try_number"], ["time", "sleep", "self", "_get_next_poke_interval", "started_at", "run_duration", "try_number"], ["self", "log", "info"]]}, "params_p": {"args": [], "context": [["int", 0.30000000000000004], ["Callable", 0.2], ["models.Question", 0.1], ["str", 0.1]], "kwargs": [], "self": []}, "q_name": "BaseSensorOperator.execute", "ret_exprs": ["return xcom_value"], "ret_type": "typing.Any", "ret_type_p": [["str", 0.3809469648085811], ["int", 0.23059562124520283], ["Callable[[Mapping], T]", 0.09679852941586954], ["List[int]", 0.09430148677864111]], "variables": {"first_try_number": "", "log_dag_id": "", "message": "", "next_poke_interval": "", "poke_return": "", "reschedule_date": "", "start_date": "", "start_monotonic": "", "started_at": "", "task_reschedules": "", "try_number": "", "xcom_value": ""}, "variables_p": {"first_try_number": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "log_dag_id": [["str", 0.5144640324209223], ["List[str]", 0.2770312105398587], ["Pattern[str]", 0.208504757039219]], "message": [["Union[int, str]", 0.10014949807884925]], "next_poke_interval": [], "poke_return": [["dict", 0.38183846401783716], ["Dict[str, int]", 0.1029680341697012]], "reschedule_date": [["datetime.datetime", 0.30189019801441586], ["datetime.datetime.datetime", 0.20390438498930497], ["Dict[Any, List[str]]", 0.17012514626541334], ["list", 0.09077227552062388], ["Dict[str, Dict[int, Any]]", 0.08514002899153263], ["datetime.date", 0.06775144486398459]], "start_date": [["str", 0.10000000000000002], ["Type[app.models.entity.EntityToEntityRel]", 0.10000000000000002], ["Optional[str]", 0.10000000000000002], ["Type[leasing.models.renContractRent]", 0.10000000000000002], ["Type[leasing.models.renIndexAdjustedRent]", 0.10000000000000002], ["datetime.datetime", 0.10000000000000002], ["Type[finances.models.DiscountBase]", 0.10000000000000002], ["Type[guild_calendar.models.Event]", 0.10000000000000002], ["Optional[datetime.date]", 0.10000000000000002], ["datetime.date", 0.10000000000000002]], "start_monotonic": [["bool", 0.20000000000000004], ["str", 0.20000000000000004], ["int", 0.20000000000000004], ["datetime.datetime", 0.10000000000000002], ["List[Tuple[Any, Any]]", 0.10000000000000002]], "started_at": [["List[List[int]]", 0.18469707174869723], ["List[float]", 0.1130937939191882], ["str", 0.09975067996506551], ["List[Union[Any, Any]]", 0.09419218775801544]], "task_reschedules": [["str", 0.19999999999999998], ["annofabapi.models.TaskPhase", 0.09999999999999999], ["List[Dict[str, Any]]", 0.09999999999999999], ["bool", 0.09999999999999999], ["Type[src.app.models.TaskDevice]", 0.09999999999999999], ["Dict[str, Any]", 0.09999999999999999]], "try_number": [], "xcom_value": [["list", 0.22197122445740616], ["Type[datetime.datetime]", 0.09042659429419733], ["time.struct_time", 0.08451460325106183]]}}, {"docstring": {"func": "Using the similar logic which is used for exponential backoff retry delay for operators.", "long_descr": null, "ret": null}, "fn_lc": [[258, 4], [284, 27]], "fn_var_ln": {"delay_backoff_in_seconds": [[277, 8], [277, 32]], "min_backoff": [[269, 8], [269, 19]], "modded_hash": [[275, 8], [275, 19]], "new_interval": [[281, 12], [281, 24]], "run_hash": [[271, 8], [271, 16]]}, "fn_var_occur": {"delay_backoff_in_seconds": [["delay_backoff_in_seconds", "min", "modded_hash", "timedelta", "max", "total_seconds"], ["new_interval", "min", "self", "timeout", "int", "run_duration", "delay_backoff_in_seconds"]], "min_backoff": [["min_backoff", "max", "int", "self", "poke_interval", "try_number"], ["modded_hash", "min_backoff", "run_hash", "min_backoff"]], "modded_hash": [["modded_hash", "min_backoff", "run_hash", "min_backoff"], ["delay_backoff_in_seconds", "min", "modded_hash", "timedelta", "max", "total_seconds"]], "new_interval": [["new_interval", "min", "self", "timeout", "int", "run_duration", "delay_backoff_in_seconds"], ["new_interval", "min", "self", "max_wait", "total_seconds", "new_interval"], ["self", "log", "info", "self", "mode", "new_interval"]], "run_hash": [["run_hash", "int", "hashlib", "sha1", "self", "dag_id", "self", "task_id", "started_at", "try_number", "encode", "hexdigest"], ["modded_hash", "min_backoff", "run_hash", "min_backoff"]]}, "name": "_get_next_poke_interval", "params": {"run_duration": "typing.Callable[[], builtins.float]", "self": "", "started_at": "datetime.datetime | float", "try_number": "builtins.int"}, "params_descr": {"run_duration": "", "self": "", "started_at": "", "try_number": ""}, "params_occur": {"run_duration": [["new_interval", "min", "self", "timeout", "int", "run_duration", "delay_backoff_in_seconds"]], "self": [["self", "exponential_backoff"], ["self", "poke_interval"], ["min_backoff", "max", "int", "self", "poke_interval", "try_number"], ["run_hash", "int", "hashlib", "sha1", "self", "dag_id", "self", "task_id", "started_at", "try_number", "encode", "hexdigest"], ["new_interval", "min", "self", "timeout", "int", "run_duration", "delay_backoff_in_seconds"], ["self", "max_wait"], ["new_interval", "min", "self", "max_wait", "total_seconds", "new_interval"], ["self", "log", "info", "self", "mode", "new_interval"]], "started_at": [["run_hash", "int", "hashlib", "sha1", "self", "dag_id", "self", "task_id", "started_at", "try_number", "encode", "hexdigest"]], "try_number": [["min_backoff", "max", "int", "self", "poke_interval", "try_number"], ["run_hash", "int", "hashlib", "sha1", "self", "dag_id", "self", "task_id", "started_at", "try_number", "encode", "hexdigest"]]}, "params_p": {"args": [], "kwargs": [], "run_duration": [["int", 0.6187928393377686], ["str", 0.18829724040870344], ["Dict[int, int]", 0.10146445686438], ["bytes", 0.09144546338914793]], "self": [], "started_at": [["int", 0.9056750854486033], ["bool", 0.09432491455139663]], "try_number": [["int", 0.9076351064028362]]}, "q_name": "BaseSensorOperator._get_next_poke_interval", "ret_exprs": ["return self.poke_interval", "return new_interval"], "ret_type": "builtins.float", "ret_type_p": [["zerver.models.Realm", 0.20076908498839635], ["int", 0.18736938749487128], ["str", 0.12811730438184832], ["Tuple[str, str]", 0.10931160987663671], ["Set[str]", 0.09163612748505838], ["tuple", 0.09031332177458538]], "variables": {"delay_backoff_in_seconds": "", "min_backoff": "", "modded_hash": "", "new_interval": "", "run_hash": ""}, "variables_p": {"delay_backoff_in_seconds": [], "min_backoff": [["int", 0.31752199824390803], ["list", 0.16816444898346802]], "modded_hash": [["str", 0.3997820979482425], ["[str]", 0.10382233198667926], ["Dict[str, str]", 0.09739348184647394], ["int", 0.09097213853094457]], "new_interval": [["hashlib._Hash", 0.12968716076038195], ["Union[Literal, Literal]", 0.08919701862991944]], "run_hash": [["int", 0.605959879350074], ["Dict[str, Any]", 0.14768600650990799], ["Tuple[Any, Any]", 0.0846409161599625], ["bytes", 0.08356260365697656], ["list", 0.07815059432307879]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[286, 4], [296, 19]], "fn_var_ln": {"_": [[292, 18], [292, 19]], "executor": [[292, 8], [292, 16]], "mode": [[295, 12], [295, 21]], "task": [[287, 8], [287, 12]]}, "fn_var_occur": {"_": [["executor", "_", "ExecutorLoader", "import_default_executor_cls"]], "executor": [["executor", "_", "ExecutorLoader", "import_default_executor_cls"], ["executor", "change_sensor_mode_to_reschedule"], ["self", "log", "warning", "executor", "__name__"]], "mode": [["task", "mode"]], "task": [["task", "super", "prepare_for_execution"], ["task", "mode"]]}, "name": "prepare_for_execution", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "log", "warning", "executor", "__name__"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "BaseSensorOperator.prepare_for_execution", "ret_exprs": ["return task"], "ret_type": "airflow.models.baseoperator.BaseOperator", "ret_type_p": [["str", 0.25781608658781885], ["Callable[[str, str], None]", 0.1331939327306847], ["bool", 0.09364798362631577], ["daylighdb.models.Photo", 0.09079543943137967], ["medtagger.database.models.Task", 0.08746084264514986], ["zerver.models.UserProfile", 0.08458878467860229], ["Dict[str, object]", 0.08251253795151849]], "variables": {"_": "", "executor": "", "mode": "", "task": ""}, "variables_p": {"_": [["dict", 0.3964746040279995], ["int", 0.38804893659189255], ["str", 0.21547645938010807]], "executor": [["str", 0.5434247520220213], ["int", 0.12378618135979418]], "mode": [["int", 0.40339908930300516], ["Type[schedule.models.rules.Rule]", 0.09942102923175265], ["datetime.timedelta", 0.09942102923175265], ["Tuple[int, int, int, int]", 0.09590652217220304]], "task": [["dict", 0.2474585237841005], ["Dict[str, str]", 0.18768350149693674], ["list", 0.17800378788143], ["Dict[str, Dict[str, int]]", 0.09600255578492657], ["ValueError", 0.09255866748896403], ["int", 0.08960685225474074]]}}, {"docstring": {"func": "Define mode rescheduled sensors.", "long_descr": null, "ret": null}, "fn_lc": [[299, 4], [301, 40]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "reschedule", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "mode"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "BaseSensorOperator.reschedule", "ret_exprs": ["return self.mode == \"reschedule\""], "ret_type": "", "ret_type_p": [["Sequence[str]", 0.10274992319567822], ["int", 0.09196826990755536]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[304, 4], [305, 63]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "get_serialized_fields", "params": {"cls": ""}, "params_descr": {"cls": ""}, "params_occur": {"cls": []}, "params_p": {"args": [], "cls": [["bool", 0.30000000000000004], ["Optional[str]", 0.2], ["str", 0.1], ["Type[T]", 0.1], ["List[str]", 0.1]], "kwargs": [], "self": []}, "q_name": "BaseSensorOperator.get_serialized_fields", "ret_exprs": ["return super().get_serialized_fields() | {\"reschedule\"}"], "ret_type": "", "ret_type_p": [["Optional[str]", 0.25996202542723035], ["str", 0.18254632066720072], ["int", 0.0986737578545125], ["zerver.models.Realm", 0.09067699456284595], ["Callable[[], T]", 0.09044878603905246]], "variables": {}, "variables_p": {}}], "name": "BaseSensorOperator", "q_name": "BaseSensorOperator", "variables": {"deps": "", "ui_color": "builtins.str", "valid_modes": "typing.Iterable[builtins.str]"}, "variables_p": {"deps": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "ui_color": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "valid_modes": [["str", 0.514027442856633], ["Optional[str]", 0.26730916408911304]]}}], "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[57, 0], [60, 60]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "_is_metadatabase_mysql", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "_is_metadatabase_mysql", "ret_exprs": ["return settings.engine.url.get_backend_name() == \"mysql\""], "ret_type": "builtins.bool", "ret_type_p": [["Dict[str, Any]", 0.11968339105560105], ["zerver.models.Realm", 0.09947145170138436], ["str", 0.09717144654329322]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[321, 8], [322, 25]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "mode_getter", "params": {"_": ""}, "params_descr": {"_": ""}, "params_occur": {"_": []}, "params_p": {"_": [["list", 0.2412663651643523], ["List[str]", 0.12696432868981708], ["bool", 0.12476174068600208], ["str", 0.08577429119353847], ["int", 0.08538130141041717]], "args": [], "kwargs": []}, "q_name": "poke_mode_only.<locals>.decorate.<locals>.mode_getter", "ret_exprs": ["return \"poke\""], "ret_type": "", "ret_type_p": [["str", 0.9999999982659014], ["bool", 2.1553280682024156e-10]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[324, 8], [326, 92]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "mode_setter", "params": {"_": "", "value": ""}, "params_descr": {"_": "", "value": ""}, "params_occur": {"_": [], "value": [["ValueError", "value"]]}, "params_p": {"_": [["Optional[Any]", 0.2993448985374542], ["int", 0.1769641041214493], ["str", 0.1733502299734745], ["list", 0.08326765431242483], ["bytes", 0.08326765431242483]], "args": [], "kwargs": [], "value": [["str", 0.6975000807397653], ["int", 0.1562341686529811], ["datetime.datetime", 0.08095931876522558], ["datetime.time", 0.06530643184202821]]}, "q_name": "poke_mode_only.<locals>.decorate.<locals>.mode_setter", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[320, 4], [337, 23]], "fn_var_ln": {"mode": [[335, 8], [335, 21]]}, "fn_var_occur": {"mode": [["cls_type", "mode", "property", "mode_getter", "mode_setter"]]}, "name": "decorate", "params": {"cls_type": ""}, "params_descr": {"cls_type": ""}, "params_occur": {"cls_type": [["issubclass", "cls_type", "BaseSensorOperator"], ["ValueError", "cls_type"], ["cls_type", "mode", "property", "mode_getter", "mode_setter"]]}, "params_p": {"args": [], "cls_type": [["str", 0.5559207258919507]], "kwargs": []}, "q_name": "poke_mode_only.<locals>.decorate", "ret_exprs": ["return cls_type"], "ret_type": "", "ret_type_p": [["bool", 0.10496828769946676], ["Dict[str, Union[int, str, Any]]", 0.0907155015734576], ["str", 0.08749192956313523]], "variables": {"mode": ""}, "variables_p": {"mode": [["str", 0.40950099753948843], ["int", 0.1898604552828231], ["List[Union[Any, Any, Any, Any]]", 0.10942277309579478], ["Tuple[str, str, str]", 0.09866896221479658], ["Tuple[str, str, str, str]", 0.09866896221479658], ["Set[str]", 0.09387784965230046]]}}, {"docstring": {"func": "Decorate a subclass of BaseSensorOperator with poke.", "long_descr": "Indicate that instances of this class are only safe to use poke mode.\n\nWill decorate all methods in the class to assert they did not change\nthe mode from 'poke'.", "ret": null}, "fn_lc": [[308, 0], [339, 24]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "poke_mode_only", "params": {"cls": ""}, "params_descr": {"cls": "BaseSensor class to enforce methods only use 'poke' mode."}, "params_occur": {"cls": [["decorate", "cls"]]}, "params_p": {"args": [], "cls": [["str", 0.3268278198409022], ["int", 0.1579728508233182], ["list", 0.1004474649601418], ["callable", 0.1004474649601418], ["Type[django.db.models.base.Model]", 0.08069470325118791], ["float", 0.07715190433137745]], "kwargs": []}, "q_name": "poke_mode_only", "ret_exprs": ["return decorate(cls)"], "ret_type": "", "ret_type_p": [["str", 0.20218111770329228], ["bool", 0.0898939778511846], ["T_co", 0.08907814311609025]], "variables": {}, "variables_p": {}}], "imports": ["__future__", "annotations", "datetime", "functools", "hashlib", "logging", "time", "traceback", "datetime", "timedelta", "typing", "Any", "Callable", "Iterable", "airflow", "settings", "airflow", "configuration", "conf", "airflow", "exceptions", "AirflowException", "AirflowFailException", "AirflowRescheduleException", "AirflowSensorTimeout", "AirflowSkipException", "AirflowTaskTimeout", "airflow", "executors", "executor_loader", "ExecutorLoader", "airflow", "models", "baseoperator", "BaseOperator", "airflow", "models", "skipmixin", "SkipMixin", "airflow", "models", "taskreschedule", "TaskReschedule", "airflow", "ti_deps", "deps", "ready_to_reschedule", "ReadyToRescheduleDep", "airflow", "utils", "timezone", "airflow", "utils", "context", "Context", "airflow", "utils", "decorators", "apply_defaults"], "mod_var_ln": {"_MYSQL_TIMESTAMP_MAX": [[53, 0], [53, 20]]}, "mod_var_occur": {"_MYSQL_TIMESTAMP_MAX": [["timezone", "utcnow", "datetime", "timedelta", "seconds", "self", "poke_interval", "_MYSQL_TIMESTAMP_MAX"], ["_is_metadatabase_mysql", "reschedule_date", "_MYSQL_TIMESTAMP_MAX"]]}, "no_types_annot": {"D": 19, "I": 0, "U": 46}, "session_id": "TsqnMTWlONALjy5XED7UWZtVktOpgqFhYkcosxB9W6o", "set": null, "tc": [false, null], "type_annot_cove": 0.29, "typed_seq": "", "untyped_seq": "", "variables": {"_MYSQL_TIMESTAMP_MAX": ""}, "variables_p": {"_MYSQL_TIMESTAMP_MAX": [["datetime.timedelta", 1.0000000000000002]]}}}