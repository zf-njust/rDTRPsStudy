{"error": null, "response": {"classes": [{"cls_lc": [[238, 0], [410, 9]], "cls_var_ln": {"job_type": [[249, 4], [249, 12]]}, "cls_var_occur": {"job_type": []}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[251, 4], [283, 45]], "fn_var_ln": {"capacity": [[260, 12], [260, 25]], "listener": [[281, 12], [281, 25]], "should_queue": [[271, 12], [271, 24]], "trigger_runner": [[283, 8], [283, 27]]}, "fn_var_occur": {"capacity": [["capacity", "None"], ["self", "capacity", "conf", "getint", "fallback"], ["isinstance", "capacity", "int", "capacity"], ["self", "capacity", "capacity"], ["ValueError", "capacity"]], "listener": [["self", "listener", "None"], ["self", "listener", "setup_queue_listener"]], "should_queue": [["should_queue", "True"], ["should_queue", "configure_trigger_log_handler"], ["should_queue", "False"]], "trigger_runner": [["self", "trigger_runner", "TriggerRunner"]]}, "name": "__init__", "params": {"capacity": "", "job": "Job | JobPydantic", "self": ""}, "params_descr": {"capacity": "", "job": "", "self": ""}, "params_occur": {"capacity": [["capacity", "None"], ["self", "capacity", "conf", "getint", "fallback"], ["isinstance", "capacity", "int", "capacity"], ["self", "capacity", "capacity"], ["ValueError", "capacity"]], "job": [["super", "__init__", "job"]], "self": [["self", "capacity", "conf", "getint", "fallback"], ["self", "capacity", "capacity"], ["self", "log", "warning"], ["self", "listener", "None"], ["self", "log", "warning"], ["self", "log", "warning"], ["self", "listener", "setup_queue_listener"], ["self", "trigger_runner", "TriggerRunner"]]}, "params_p": {"args": [], "capacity": [["int", 0.3119292829506805], ["Optional[int]", 0.27966966263738974], ["Optional[List[str]]", 0.16078779961201617]], "job": [["Optional[asyncio.AbstractEventLoop]", 0.2], ["bool", 0.1], ["Dict[str, Any]", 0.1], ["Callable[[Any, Any], bool]", 0.1]], "kwargs": [], "self": []}, "q_name": "TriggererJobRunner.__init__", "ret_exprs": [], "ret_type": "", "variables": {"capacity": "", "listener": "", "should_queue": "", "trigger_runner": ""}, "variables_p": {"capacity": [["int", 0.38297561983488176], ["Optional[int]", 0.10778520622659014], ["time.time.struct_time", 0.08755183374009519], ["float", 0.0851176776110293]], "listener": [["list", 0.9999999998902384], ["int", 1.0976158836103766e-10]], "should_queue": [["list", 0.31637365157616304], ["str", 0.3107557343764813], ["bool", 0.15537786718824065], ["List[str]", 0.08004317391516948], ["int", 0.06930580024622322]], "trigger_runner": [["str", 0.30000000000000004], ["Dict[str, Any]", 0.1], ["dict", 0.1], ["int", 0.1]]}}, {"docstring": {"func": "Register signals that stop child processes.", "long_descr": null, "ret": null}, "fn_lc": [[285, 4], [288, 60]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "register_signals", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["signal", "signal", "signal", "SIGINT", "self", "_exit_gracefully"], ["signal", "signal", "signal", "SIGTERM", "self", "_exit_gracefully"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TriggererJobRunner.register_signals", "ret_exprs": [], "ret_type": "None", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Tests if the triggerer job needs to be run (i.e., if there are triggers", "long_descr": "in the trigger table).\nThis is used for the warning boxes in the UI.", "ret": null}, "fn_lc": [[292, 4], [298, 65]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "is_needed", "params": {"cls": "", "session": ""}, "params_descr": {"cls": "", "session": ""}, "params_occur": {"cls": [], "session": [["session", "query", "func", "count", "Trigger", "id", "scalar"]]}, "params_p": {"args": [], "cls": [["Type[T]", 0.22055095797950458], ["Callable", 0.16460840356397688], ["T", 0.11266686321012878], ["str", 0.09529281472134765], ["List[dict]", 0.08057632004392115]], "kwargs": [], "self": [], "session": [["str", 0.10993095974812225], ["List[zerver.models.Stream]", 0.09684312871973727], ["recidiviz.persistence.database.session.Session", 0.08473840388194691], ["cnaas_nms.db.session.sqla_session", 0.08052668415116757], ["int", 0.0745281832601927]]}, "q_name": "TriggererJobRunner.is_needed", "ret_exprs": ["return session.query(func.count(Trigger.id)).scalar() > 0"], "ret_type": "builtins.bool", "ret_type_p": [["cmk.utils.type_defs.UserId", 0.0976844883784625], ["bool", 0.09657752324634775], ["int", 0.0857782219794542]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Called when there is an external kill command (via the heartbeat", "long_descr": "mechanism, for example).", "ret": null}, "fn_lc": [[300, 4], [305, 39]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "on_kill", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "trigger_runner", "stop", "True"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TriggererJobRunner.on_kill", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[307, 4], [311, 32]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "_kill_listener", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "listener"], ["self", "listener", "handlers"], ["self", "listener", "stop"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TriggererJobRunner._kill_listener", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Helper method to clean up processor_agent to avoid leaving orphan processes.", "long_descr": null, "ret": null}, "fn_lc": [[313, 4], [322, 36]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "_exit_gracefully", "params": {"frame": "", "self": "", "signum": ""}, "params_descr": {"frame": "", "self": "", "signum": ""}, "params_occur": {"frame": [], "self": [["self", "trigger_runner", "stop"], ["self", "log", "info", "signum"], ["self", "trigger_runner", "stop", "True"], ["self", "_kill_listener"], ["self", "log", "warning", "signum"]], "signum": [["self", "log", "info", "signum"], ["self", "log", "warning", "signum"]]}, "params_p": {"args": [], "frame": [["int", 0.19999999999999998], ["str", 0.19999999999999998], ["Iterable['Context']", 0.09999999999999999], ["dict", 0.09999999999999999], ["bool", 0.09999999999999999]], "kwargs": [], "self": [], "signum": [["str", 0.4441695070884246], ["int", 0.20962589151093736], ["logging.Logger", 0.09154538225982761], ["dict", 0.07396126729678713]]}, "q_name": "TriggererJobRunner._exit_gracefully", "ret_exprs": [], "ret_type": "None", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[324, 4], [345, 19]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "_execute", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "log", "info"], ["self", "trigger_runner", "job_id", "self", "job", "id"], ["self", "trigger_runner", "start"], ["self", "_run_trigger_loop"], ["self", "log", "exception"], ["self", "log", "info"], ["self", "trigger_runner", "stop", "True"], ["self", "trigger_runner", "join"], ["self", "log", "info"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TriggererJobRunner._execute", "ret_exprs": ["return None"], "ret_type": "int | None", "ret_type_p": [["Optional[str]", 0.4816687749178866], ["str", 0.26383859750931377], ["Optional[int]", 0.08090181913493612]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "The main-thread trigger loop.", "long_descr": "This runs synchronously and handles all database reads/writes.", "ret": null}, "fn_lc": [[347, 4], [369, 25]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "_run_trigger_loop", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "trigger_runner", "stop"], ["self", "trigger_runner", "is_alive"], ["self", "log", "error"], ["self", "load_triggers"], ["self", "handle_events"], ["self", "handle_failed_triggers"], ["perform_heartbeat", "self", "job", "heartbeat_callback", "self", "heartbeat_callback", "only_if_necessary", "True"], ["self", "emit_metrics"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TriggererJobRunner._run_trigger_loop", "ret_exprs": [], "ret_type": "None", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Queries the database to get the triggers we're supposed to be running,", "long_descr": "adds them to our runner, and then removes ones from it we no longer\nneed.", "ret": null}, "fn_lc": [[371, 4], [379, 53]], "fn_var_ln": {"ids": [[378, 8], [378, 11]]}, "fn_var_occur": {"ids": [["ids", "Trigger", "ids_for_triggerer", "self", "job", "id"], ["self", "trigger_runner", "update_triggers", "set", "ids"]]}, "name": "load_triggers", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["Trigger", "assign_unassigned", "self", "job", "id", "self", "capacity", "self", "job", "heartrate"], ["ids", "Trigger", "ids_for_triggerer", "self", "job", "id"], ["self", "trigger_runner", "update_triggers", "set", "ids"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TriggererJobRunner.load_triggers", "ret_exprs": [], "ret_type": "", "variables": {"ids": ""}, "variables_p": {"ids": [["int", 0.8999999999999999], ["str", 0.1]]}}, {"docstring": {"func": "Handles outbound events from triggers - dispatching them into the Trigger", "long_descr": "model where they are then pushed into the relevant task instances.", "ret": null}, "fn_lc": [[381, 4], [392, 44]], "fn_var_ln": {"event": [[388, 24], [388, 29]], "trigger_id": [[388, 12], [388, 22]]}, "fn_var_occur": {"event": [["trigger_id", "event", "self", "trigger_runner", "events", "popleft"], ["Trigger", "submit_event", "trigger_id", "trigger_id", "event", "event"]], "trigger_id": [["trigger_id", "event", "self", "trigger_runner", "events", "popleft"], ["Trigger", "submit_event", "trigger_id", "trigger_id", "event", "event"]]}, "name": "handle_events", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "trigger_runner", "events"], ["trigger_id", "event", "self", "trigger_runner", "events", "popleft"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TriggererJobRunner.handle_events", "ret_exprs": [], "ret_type": "", "variables": {"event": "", "trigger_id": ""}, "variables_p": {"event": [["list", 0.45282380043669423], ["asyncio.locks.Event", 0.10414295199538692], ["Type[MutableMapping[Any, Any]]", 0.07962729488043757]], "trigger_id": [["cmk.utils.type_defs.UserId", 0.1990143376554522], ["str", 0.17435317795853567], ["int", 0.08517044835660627], ["Type[int]", 0.08283708248878888]]}}, {"docstring": {"func": "Handles \"failed\" triggers - ones that errored or exited before they", "long_descr": "sent an event. Task Instances that depend on them need failing.", "ret": null}, "fn_lc": [[394, 4], [404, 41]], "fn_var_ln": {"saved_exc": [[401, 24], [401, 33]], "trigger_id": [[401, 12], [401, 22]]}, "fn_var_occur": {"saved_exc": [["trigger_id", "saved_exc", "self", "trigger_runner", "failed_triggers", "popleft"], ["Trigger", "submit_failure", "trigger_id", "trigger_id", "exc", "saved_exc"]], "trigger_id": [["trigger_id", "saved_exc", "self", "trigger_runner", "failed_triggers", "popleft"], ["Trigger", "submit_failure", "trigger_id", "trigger_id", "exc", "saved_exc"]]}, "name": "handle_failed_triggers", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "trigger_runner", "failed_triggers"], ["trigger_id", "saved_exc", "self", "trigger_runner", "failed_triggers", "popleft"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TriggererJobRunner.handle_failed_triggers", "ret_exprs": [], "ret_type": "", "variables": {"saved_exc": "", "trigger_id": ""}, "variables_p": {"saved_exc": [["str", 0.4021591873642705], ["Dict[str, int]", 0.1544129837022979], ["Dict[str, str]", 0.10914749022528943], ["Dict[str, Union[Any, Any, Any, str]]", 0.08912084888610408], ["Counter[str]", 0.07767351853370685], ["int", 0.07272407370924142]], "trigger_id": [["int", 0.5449695741193596], ["str", 0.1348311730888518], ["bytes", 0.11262099221983095], ["list", 0.09455293316245204]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[406, 4], [410, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "emit_metrics", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["Stats", "gauge", "self", "job", "hostname", "len", "self", "trigger_runner", "triggers"], ["Stats", "gauge", "len", "self", "trigger_runner", "triggers", "tags", "self", "job", "hostname"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TriggererJobRunner.emit_metrics", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TriggererJobRunner", "q_name": "TriggererJobRunner", "variables": {"job_type": ""}, "variables_p": {"job_type": [["str", 0.19999999999999998], ["int", 0.19999999999999998], ["Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal]", 0.09999999999999999], ["Dict[str, str]", 0.09999999999999999], ["Tuple[Type[int], Type[float]]", 0.09999999999999999]]}}, {"cls_lc": [[413, 0], [418, 24]], "cls_var_ln": {"events": [[418, 4], [418, 10]], "name": [[417, 4], [417, 8]], "task": [[416, 4], [416, 8]]}, "cls_var_occur": {"events": [], "name": [], "task": []}, "funcs": [], "name": "TriggerDetails", "q_name": "TriggerDetails", "variables": {"events": "builtins.int", "name": "builtins.str", "task": "asyncio.Task"}, "variables_p": {"events": [["str", 0.6], ["int", 0.30000000000000004]], "name": [["str", 0.8999999999999999]], "task": [["str", 0.19999999999999998], ["annofabapi.models.TaskPhase", 0.09999999999999999], ["List[Dict[str, Any]]", 0.09999999999999999], ["bool", 0.09999999999999999], ["Type[src.app.models.TaskDevice]", 0.09999999999999999], ["Dict[str, Any]", 0.09999999999999999]]}}, {"cls_lc": [[421, 0], [730, 44]], "cls_var_ln": {"events": [[444, 4], [444, 10]], "failed_triggers": [[447, 4], [447, 19]], "stop": [[450, 4], [450, 8]], "to_cancel": [[441, 4], [441, 13]], "to_create": [[438, 4], [438, 13]], "trigger_cache": [[435, 4], [435, 17]], "triggers": [[432, 4], [432, 12]]}, "cls_var_occur": {"events": [], "failed_triggers": [], "stop": [], "to_cancel": [], "to_create": [], "trigger_cache": [], "triggers": []}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[452, 4], [460, 26]], "fn_var_ln": {"events": [[458, 8], [458, 19]], "failed_triggers": [[459, 8], [459, 28]], "job_id": [[460, 8], [460, 19]], "to_cancel": [[457, 8], [457, 22]], "to_create": [[456, 8], [456, 22]], "trigger_cache": [[455, 8], [455, 26]], "triggers": [[454, 8], [454, 21]]}, "fn_var_occur": {"events": [["self", "events", "deque"]], "failed_triggers": [["self", "failed_triggers", "deque"]], "job_id": [["self", "job_id", "None"]], "to_cancel": [["self", "to_cancel", "deque"]], "to_create": [["self", "to_create", "deque"]], "trigger_cache": [["self", "trigger_cache"]], "triggers": [["self", "triggers"]]}, "name": "__init__", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "triggers"], ["self", "trigger_cache"], ["self", "to_create", "deque"], ["self", "to_cancel", "deque"], ["self", "events", "deque"], ["self", "failed_triggers", "deque"], ["self", "job_id", "None"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TriggerRunner.__init__", "ret_exprs": [], "ret_type": "", "variables": {"events": "", "failed_triggers": "", "job_id": "", "to_cancel": "", "to_create": "", "trigger_cache": "", "triggers": ""}, "variables_p": {"events": [["queue.Queue", 0.49999999998646233], ["deque", 0.49999999998646233], ["dict", 6.697205939380892e-12], ["bool", 3.5791608916616567e-12], ["Callable[[str], bool]", 3.4762491509775847e-12], ["Dict[Any, int]", 3.4378618957046946e-12], ["str", 3.2600012877883566e-12]], "failed_triggers": [["str", 0.30000000000000004], ["Dict[str, Any]", 0.1], ["dict", 0.1], ["int", 0.1]], "job_id": [["IO[bytes]", 0.21069281959261485], ["str", 0.10243695793614274], ["int", 0.08466764028473907]], "to_cancel": [["str", 0.5175569151346491], ["int", 0.22033617163910657], ["bytes", 0.0902831445389395], ["Set[str]", 0.08721002042771112]], "to_create": [["int", 0.2435593668333355], ["List[str]", 0.17694848160085921], ["float", 0.14570119698439962], ["\"Point\"", 0.08752789406916651], ["bytes", 0.0810769770407523], ["str", 0.07448048806345163]], "trigger_cache": [["str", 0.30000000000000004], ["Dict[str, Any]", 0.1], ["dict", 0.1], ["int", 0.1]], "triggers": [["str", 0.30000000000000004], ["Dict[str, Any]", 0.1], ["dict", 0.1], ["int", 0.1]]}}, {"docstring": {"func": "Sync entrypoint - just runs arun in an async loop.", "long_descr": null, "ret": null}, "fn_lc": [[462, 4], [464, 32]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "run", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["asyncio", "run", "self", "arun"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TriggerRunner.run", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Main (asynchronous) logic loop.", "long_descr": "The loop in here runs trigger addition/deletion/cleanup. Actual\ntriggers run in their own separate coroutines.", "ret": null}, "fn_lc": [[466, 4], [492, 22]], "fn_var_ln": {"count": [[485, 20], [485, 25]], "last_status": [[487, 20], [487, 31]], "stop": [[489, 16], [489, 25]], "watchdog": [[473, 8], [473, 16]]}, "fn_var_occur": {"count": [["count", "len", "self", "triggers"], ["self", "log", "info", "count"]], "last_status": [["last_status", "time", "time"], ["time", "time", "last_status"], ["last_status", "time", "time"]], "stop": [["self", "stop"], ["self", "stop", "True"]], "watchdog": [["watchdog", "asyncio", "create_task", "self", "block_watchdog"]]}, "name": "arun", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["watchdog", "asyncio", "create_task", "self", "block_watchdog"], ["self", "stop"], ["self", "create_triggers"], ["self", "cancel_triggers"], ["self", "cleanup_finished_triggers"], ["count", "len", "self", "triggers"], ["self", "log", "info", "count"], ["self", "stop", "True"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TriggerRunner.arun", "ret_exprs": [], "ret_type": "", "variables": {"count": "", "last_status": "", "stop": "", "watchdog": ""}, "variables_p": {"count": [["int", 0.9999999999999999]], "last_status": [["int", 0.9999999999999999]], "stop": [["int", 1.0]], "watchdog": [["int", 0.1981036294045776], ["dict", 0.1052407968120426], ["Tuple[Literal, Literal]", 0.09623495634124384], ["float", 0.08545892519104088], ["Collection[int]", 0.08415660736131773]]}}, {"docstring": {"func": "Drain the to_create queue and create all triggers that have been", "long_descr": "requested in the DB that we don't yet have.", "ret": null}, "fn_lc": [[494, 4], [515, 34]], "fn_var_ln": {"dag_id": [[503, 16], [503, 22]], "map_index": [[506, 16], [506, 25]], "run_id": [[504, 16], [504, 22]], "task_id": [[505, 16], [505, 23]], "task_instance": [[502, 16], [502, 29]], "trigger_id": [[500, 12], [500, 22]], "trigger_instance": [[500, 24], [500, 40]], "try_number": [[507, 16], [507, 26]]}, "fn_var_occur": {"dag_id": [["dag_id", "task_instance", "dag_id"], ["self", "triggers", "trigger_id", "asyncio", "create_task", "self", "run_trigger", "trigger_id", "trigger_instance", "dag_id", "run_id", "task_id", "map_index", "try_number", "trigger_id"]], "map_index": [["map_index", "task_instance", "map_index"], ["self", "triggers", "trigger_id", "asyncio", "create_task", "self", "run_trigger", "trigger_id", "trigger_instance", "dag_id", "run_id", "task_id", "map_index", "try_number", "trigger_id"]], "run_id": [["run_id", "task_instance", "run_id"], ["self", "triggers", "trigger_id", "asyncio", "create_task", "self", "run_trigger", "trigger_id", "trigger_instance", "dag_id", "run_id", "task_id", "map_index", "try_number", "trigger_id"]], "task_id": [["task_id", "task_instance", "task_id"], ["self", "triggers", "trigger_id", "asyncio", "create_task", "self", "run_trigger", "trigger_id", "trigger_instance", "dag_id", "run_id", "task_id", "map_index", "try_number", "trigger_id"]], "task_instance": [["task_instance", "airflow", "models", "TaskInstance", "trigger_instance", "task_instance"], ["dag_id", "task_instance", "dag_id"], ["run_id", "task_instance", "run_id"], ["task_id", "task_instance", "task_id"], ["map_index", "task_instance", "map_index"], ["try_number", "task_instance", "try_number"]], "trigger_id": [["trigger_id", "trigger_instance", "self", "to_create", "popleft"], ["trigger_id", "self", "triggers"], ["self", "triggers", "trigger_id", "asyncio", "create_task", "self", "run_trigger", "trigger_id", "trigger_instance", "dag_id", "run_id", "task_id", "map_index", "try_number", "trigger_id"], ["self", "log", "warning", "trigger_id"]], "trigger_instance": [["trigger_id", "trigger_instance", "self", "to_create", "popleft"], ["task_instance", "airflow", "models", "TaskInstance", "trigger_instance", "task_instance"], ["self", "triggers", "trigger_id", "asyncio", "create_task", "self", "run_trigger", "trigger_id", "trigger_instance", "dag_id", "run_id", "task_id", "map_index", "try_number", "trigger_id"]], "try_number": [["try_number", "task_instance", "try_number"], ["self", "triggers", "trigger_id", "asyncio", "create_task", "self", "run_trigger", "trigger_id", "trigger_instance", "dag_id", "run_id", "task_id", "map_index", "try_number", "trigger_id"]]}, "name": "create_triggers", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "to_create"], ["trigger_id", "trigger_instance", "self", "to_create", "popleft"], ["trigger_id", "self", "triggers"], ["self", "triggers", "trigger_id", "asyncio", "create_task", "self", "run_trigger", "trigger_id", "trigger_instance", "dag_id", "run_id", "task_id", "map_index", "try_number", "trigger_id"], ["self", "log", "warning", "trigger_id"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TriggerRunner.create_triggers", "ret_exprs": [], "ret_type": "", "variables": {"dag_id": "", "map_index": "", "run_id": "", "task_id": "", "task_instance": "airflow.models.TaskInstance", "trigger_id": "", "trigger_instance": "", "try_number": ""}, "variables_p": {"dag_id": [["str", 0.5372266773702166], ["int", 0.1741867069785992], ["ClassVar[str]", 0.11195779414317275], ["Type[str]", 0.08508826241683688]], "map_index": [["Pattern[str]", 0.28777882706336644], ["str", 0.19620611176910804], ["Tuple[int, int, int, int]", 0.10026471276117932], ["Mapping", 0.09941598461050354]], "run_id": [["str", 0.5002686246136304], ["int", 0.20215419316299935], ["ClassVar[str]", 0.10712799640958591], ["Type[str]", 0.0882313388605278]], "task_id": [["int", 0.4385520731695963], ["Dict[str, str]", 0.2671431300091709], ["cmk.utils.type_defs.UserId", 0.10636642080806069], ["List[int]", 0.08628590242841917]], "task_instance": [["list", 0.08993348662423593]], "trigger_id": [["str", 0.3646811122085039], ["int", 0.3511855200076932], ["List[str]", 0.10327776115663471], ["Iterator[Any]", 0.0916049231468336], ["list", 0.08925068348033455]], "trigger_instance": [["str", 0.41098538648408955], ["Tuple[int, int, int, int]", 0.11569760643962586], ["pydynasync.models.Changes", 0.09743910012215715], ["dict", 0.09503587412346536], ["int", 0.09287696525985019], ["List[str]", 0.09202013909902283]], "try_number": [["Pattern[str]", 0.28777882706336644], ["str", 0.19620611176910804], ["Tuple[int, int, int, int]", 0.10026471276117932], ["Mapping", 0.09941598461050354]]}}, {"docstring": {"func": "Drain the to_cancel queue and ensure all triggers that are not in the", "long_descr": "DB are cancelled, so the cleanup job deletes them.", "ret": null}, "fn_lc": [[517, 4], [527, 34]], "fn_var_ln": {"trigger_id": [[523, 12], [523, 22]]}, "fn_var_occur": {"trigger_id": [["trigger_id", "self", "to_cancel", "popleft"], ["trigger_id", "self", "triggers"], ["self", "triggers", "trigger_id", "cancel"]]}, "name": "cancel_triggers", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "to_cancel"], ["trigger_id", "self", "to_cancel", "popleft"], ["trigger_id", "self", "triggers"], ["self", "triggers", "trigger_id", "cancel"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TriggerRunner.cancel_triggers", "ret_exprs": [], "ret_type": "", "variables": {"trigger_id": ""}, "variables_p": {"trigger_id": [["int", 0.488375474077974], ["Counter[int]", 0.20488711841966614], ["List[str]", 0.11168573689396603], ["Tuple[str, str, str, str, str, str]", 0.09876648837538027], ["Type[Tuple[str, Any, Any]]", 0.09628518223301356]]}}, {"docstring": {"func": "Go through all trigger tasks (coroutines) and clean up entries for", "long_descr": "ones that have exited, optionally warning users if the exit was\nnot normal.", "ret": null}, "fn_lc": [[529, 4], [566, 34]], "fn_var_ln": {"result": [[540, 20], [540, 26]], "saved_exc": [[550, 20], [550, 29]]}, "fn_var_occur": {"result": [["result", "details", "result"], ["isinstance", "result", "TriggerEvent"]], "saved_exc": [["saved_exc", "None"], ["saved_exc", "e"], ["self", "failed_triggers", "append", "trigger_id", "saved_exc"]]}, "name": "cleanup_finished_triggers", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["list", "self", "triggers", "items"], ["self", "triggers", "trigger_id"], ["self", "log", "exception", "details", "e"], ["self", "log", "error", "details"], ["self", "log", "error", "details"], ["self", "failed_triggers", "append", "trigger_id", "saved_exc"], ["self", "triggers", "trigger_id"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TriggerRunner.cleanup_finished_triggers", "ret_exprs": [], "ret_type": "", "variables": {"result": "", "saved_exc": ""}, "variables_p": {"result": [["List[Callable[[], Any]]", 0.2268009576886499], ["List[pydantic.fields.ModelField]", 0.1693390816128275], ["list", 0.09808707299972491], ["Dict[str, int]", 0.0838392168335877], ["dict", 0.07869145121009984], ["bool", 0.07791362416258935]], "saved_exc": [["Tuple[Type[tuple], Type[list]]", 0.17843683984863407], ["dict", 0.09710166058405671]]}}, {"docstring": {"func": "Watchdog loop that detects blocking (badly-written) triggers.", "long_descr": "Triggers should be well-behaved async coroutines and await whenever\nthey need to wait; this loop tries to run every 100ms to see if\nthere are badly-written triggers taking longer than that and blocking\nthe event loop.\n\nUnfortunately, we can't tell what trigger is blocking things, but\nwe can at least detect the top-level problem.", "ret": null}, "fn_lc": [[568, 4], [593, 58]], "fn_var_ln": {"last_run": [[581, 12], [581, 20]], "time_elapsed": [[585, 12], [585, 24]]}, "fn_var_occur": {"last_run": [["last_run", "time", "monotonic"], ["time_elapsed", "time", "monotonic", "last_run"]], "time_elapsed": [["time_elapsed", "time", "monotonic", "last_run"], ["self", "log", "error", "time_elapsed"]]}, "name": "block_watchdog", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "stop"], ["self", "log", "error", "time_elapsed"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TriggerRunner.block_watchdog", "ret_exprs": [], "ret_type": "", "variables": {"last_run": "", "time_elapsed": ""}, "variables_p": {"last_run": [["Dict[str, str]", 0.22268680439333088], ["int", 0.19919934041480208], ["float", 0.18579226387187475], ["threading._RLock", 0.10662444400602644], ["Final", 0.09888973349714143], ["Dict[int, Union[Any, Any]]", 0.09746431028957439], ["property", 0.08934310352724993]], "time_elapsed": [["int", 0.1693362801492933], ["List[float]", 0.14867818550667208], ["time.struct_time", 0.11362690223962425], ["datetime.date.time.datetime", 0.08072918512597467]]}}, {"docstring": {"func": "Setting these context vars allows log messages for individual triggers", "long_descr": "to be routed to distinct files and filtered from triggerer stdout.", "ret": null}, "fn_lc": [[596, 4], [607, 35]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "set_individual_trigger_logging", "params": {"trigger": ""}, "params_descr": {"trigger": ""}, "params_occur": {"trigger": [["ctx_task_instance", "set", "trigger", "task_instance"], ["ctx_trigger_id", "set", "trigger", "trigger_id"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "trigger": [["dict", 0.8754468157394809], ["Dict[str, str]", 0.12455318426051888]]}, "q_name": "TriggerRunner.set_individual_trigger_logging", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Wrapper which runs an actual trigger (they are async generators)", "long_descr": "and pushes their events into our outbound event deque.", "ret": null}, "fn_lc": [[609, 4], [641, 55]], "fn_var_ln": {"name": [[614, 8], [614, 12]], "timeout": [[624, 16], [624, 23]]}, "fn_var_occur": {"name": [["name", "self", "triggers", "trigger_id"], ["self", "log", "info", "name"], ["self", "log", "info", "name"]], "timeout": [["timeout", "trigger", "task_instance", "trigger_timeout"], ["timeout", "timeout", "replace", "tzinfo", "timezone", "utc", "timeout", "tzinfo", "timeout"], ["timeout", "timezone", "utcnow"]]}, "name": "run_trigger", "params": {"self": "", "trigger": "", "trigger_id": ""}, "params_descr": {"self": "", "trigger": "", "trigger_id": ""}, "params_occur": {"self": [["name", "self", "triggers", "trigger_id"], ["self", "log", "info", "name"], ["self", "set_individual_trigger_logging", "trigger"], ["self", "log", "info", "self", "triggers", "trigger_id", "event"], ["self", "triggers", "trigger_id"], ["self", "events", "append", "trigger_id", "event"], ["self", "log", "error"], ["self", "log", "error", "err"], ["self", "mark_trigger_end", "trigger"], ["self", "log", "info", "name"]], "trigger": [["self", "set_individual_trigger_logging", "trigger"], ["trigger", "run"], ["timeout", "trigger", "task_instance", "trigger_timeout"], ["trigger", "cleanup"], ["self", "mark_trigger_end", "trigger"]], "trigger_id": [["name", "self", "triggers", "trigger_id"], ["self", "log", "info", "self", "triggers", "trigger_id", "event"], ["self", "triggers", "trigger_id"], ["self", "events", "append", "trigger_id", "event"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "trigger": [["int", 0.20308416679114913], ["Dict[str, int]", 0.10442604299534347], ["str", 0.10058386907396967], ["bytes", 0.09329822376237606], ["bool", 0.09323938570398183]], "trigger_id": [["str", 0.5615768138629958], ["int", 0.3395152385929184]]}, "q_name": "TriggerRunner.run_trigger", "ret_exprs": [], "ret_type": "", "variables": {"name": "", "timeout": ""}, "variables_p": {"name": [["str", 0.8129153215767205], ["list", 0.0989057332349354], ["Any[Any]", 0.08817894518834403]], "timeout": [["int", 0.9102126439754722], ["float", 0.08978735602452782]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[644, 4], [652, 53]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "mark_trigger_end", "params": {"trigger": ""}, "params_descr": {"trigger": ""}, "params_occur": {"trigger": [["trigger", "log", "log", "level", "msg"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "trigger": [["str", 0.6910704902463162], ["int", 0.1326081887843824], ["Optional[str]", 0.08648369086276676]]}, "q_name": "TriggerRunner.mark_trigger_end", "ret_exprs": ["return"], "ret_type": "", "ret_type_p": [["Union[tuple, list]", 0.12326783261663934], ["List[int]", 0.09124591253820835], ["Dict[str, Any]", 0.08769568774684897], ["base.ConfigOptions", 0.08769568774684897], ["str", 0.08682447752895113]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Called from the main thread to request that we update what", "long_descr": "triggers we're running.\n\nWorks out the differences - ones to add, and ones to remove - then\nadds them to the deques so the subthread can actually mutate the running\ntrigger set.", "ret": null}, "fn_lc": [[654, 4], [705, 41]], "fn_var_ln": {"cancel_trigger_ids": [[676, 8], [676, 26]], "known_trigger_ids": [[668, 8], [668, 25]], "new_trigger_ids": [[675, 8], [675, 23]], "new_trigger_instance": [[695, 16], [695, 36]], "new_trigger_orm": [[687, 16], [687, 31]], "new_triggers": [[678, 8], [678, 20]], "running_trigger_ids": [[667, 8], [667, 27]], "trigger_class": [[688, 16], [688, 29]]}, "fn_var_occur": {"cancel_trigger_ids": [["cancel_trigger_ids", "running_trigger_ids", "requested_trigger_ids"]], "known_trigger_ids": [["known_trigger_ids", "running_trigger_ids", "union", "x", "x", "self", "events", "union", "self", "to_cancel", "union", "x", "x", "self", "to_create", "union", "trigger", "trigger", "self", "failed_triggers"], ["new_trigger_ids", "requested_trigger_ids", "known_trigger_ids"]], "new_trigger_ids": [["new_trigger_ids", "requested_trigger_ids", "known_trigger_ids"], ["new_triggers", "Trigger", "bulk_fetch", "new_trigger_ids"]], "new_trigger_instance": [["new_trigger_instance", "trigger_class", "new_trigger_orm", "kwargs"], ["self", "set_trigger_logging_metadata", "new_trigger_orm", "task_instance", "new_id", "new_trigger_instance"], ["self", "to_create", "append", "new_id", "new_trigger_instance"]], "new_trigger_orm": [["new_trigger_orm", "new_triggers", "new_id"], ["trigger_class", "self", "get_trigger_by_classpath", "new_trigger_orm", "classpath"], ["new_trigger_instance", "trigger_class", "new_trigger_orm", "kwargs"], ["self", "set_trigger_logging_metadata", "new_trigger_orm", "task_instance", "new_id", "new_trigger_instance"]], "new_triggers": [["new_triggers", "Trigger", "bulk_fetch", "new_trigger_ids"], ["new_id", "new_triggers"], ["new_trigger_orm", "new_triggers", "new_id"]], "running_trigger_ids": [["running_trigger_ids", "set", "self", "triggers", "keys"], ["known_trigger_ids", "running_trigger_ids", "union", "x", "x", "self", "events", "union", "self", "to_cancel", "union", "x", "x", "self", "to_create", "union", "trigger", "trigger", "self", "failed_triggers"], ["cancel_trigger_ids", "running_trigger_ids", "requested_trigger_ids"]], "trigger_class": [["trigger_class", "self", "get_trigger_by_classpath", "new_trigger_orm", "classpath"], ["new_trigger_instance", "trigger_class", "new_trigger_orm", "kwargs"]]}, "name": "update_triggers", "params": {"requested_trigger_ids": "builtins.set[builtins.int]", "self": ""}, "params_descr": {"requested_trigger_ids": "", "self": ""}, "params_occur": {"requested_trigger_ids": [["new_trigger_ids", "requested_trigger_ids", "known_trigger_ids"], ["cancel_trigger_ids", "running_trigger_ids", "requested_trigger_ids"]], "self": [["running_trigger_ids", "set", "self", "triggers", "keys"], ["known_trigger_ids", "running_trigger_ids", "union", "x", "x", "self", "events", "union", "self", "to_cancel", "union", "x", "x", "self", "to_create", "union", "trigger", "trigger", "self", "failed_triggers"], ["self", "log", "warning", "new_id"], ["trigger_class", "self", "get_trigger_by_classpath", "new_trigger_orm", "classpath"], ["self", "failed_triggers", "append", "new_id", "e"], ["self", "log", "error", "err"], ["self", "failed_triggers", "append", "new_id", "err"], ["self", "set_trigger_logging_metadata", "new_trigger_orm", "task_instance", "new_id", "new_trigger_instance"], ["self", "to_create", "append", "new_id", "new_trigger_instance"], ["self", "to_cancel", "append", "old_id"]]}, "params_p": {"args": [], "kwargs": [], "requested_trigger_ids": [], "self": []}, "q_name": "TriggerRunner.update_triggers", "ret_exprs": [], "ret_type": "", "variables": {"cancel_trigger_ids": "", "known_trigger_ids": "", "new_trigger_ids": "", "new_trigger_instance": "", "new_trigger_orm": "", "new_triggers": "", "running_trigger_ids": "", "trigger_class": ""}, "variables_p": {"cancel_trigger_ids": [["str", 0.7954217520732179], ["int", 0.12074148039180183], ["bytes", 0.08383676753498033]], "known_trigger_ids": [["list", 0.27730811573750425], ["int", 0.2292653099879581], ["Dict[str, Union[Any, Any]]", 0.19125089166262324], ["str", 0.08907555418633531]], "new_trigger_ids": [["Dict[str, str]", 0.7734250254508916]], "new_trigger_instance": [["gensim.models.Word2Vec", 0.09359387494330121], ["magic.models.Card", 0.09207962845682881], ["dict", 0.08525275089325061]], "new_trigger_orm": [["bool", 0.20451033531127366], ["str", 0.19875742116569817], ["Optional[str]", 0.10069726404427015], ["Optional[int]", 0.09556305206522128]], "new_triggers": [["str", 0.0963353156449895], ["int", 0.08855299983149781], ["raiden.utils.Any", 0.0851143503880411], ["Dict[str, int]", 0.08017831625266127]], "running_trigger_ids": [["set", 0.7958332300063327], ["list", 0.11306953674915188], ["tuple", 0.09109723324451531]], "trigger_class": [["dict", 0.3405390022223318], ["int", 0.0949563033828241]]}}, {"docstring": {"func": "Set up logging for triggers.", "long_descr": "We want to ensure that each trigger logs to its own file and that the log messages are not\npropagated to parent loggers.", "ret": null}, "fn_lc": [[707, 4], [720, 39]], "fn_var_ln": {"is_trigger_log_context": [[717, 12], [717, 37]], "task_instance": [[718, 8], [718, 29]], "trigger_id": [[720, 8], [720, 26]], "triggerer_job_id": [[719, 8], [719, 32]]}, "fn_var_occur": {"is_trigger_log_context": [["ti", "is_trigger_log_context", "True"]], "task_instance": [["trigger", "task_instance", "ti"]], "trigger_id": [["trigger", "trigger_id", "trigger_id"]], "triggerer_job_id": [["trigger", "triggerer_job_id", "self", "job_id"]]}, "name": "set_trigger_logging_metadata", "params": {"self": "", "ti": "airflow.models.TaskInstance", "trigger": "", "trigger_id": ""}, "params_descr": {"self": "", "ti": "", "trigger": "", "trigger_id": ""}, "params_occur": {"self": [["trigger", "triggerer_job_id", "self", "job_id"]], "ti": [["ti", "is_trigger_log_context", "True"], ["trigger", "task_instance", "ti"]], "trigger": [["trigger", "task_instance", "ti"], ["trigger", "triggerer_job_id", "self", "job_id"], ["trigger", "trigger_id", "trigger_id"]], "trigger_id": [["trigger", "trigger_id", "trigger_id"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "ti": [["str", 0.8173877225600247], ["bool", 0.09344628591905506]], "trigger": [["str", 0.4893334218619282], ["Optional[int]", 0.31768666317008265], ["int", 0.10121280027329176]], "trigger_id": [["str", 0.427952461585143], ["Set[int]", 0.35737092764544975], ["int", 0.21467661076940733]]}, "q_name": "TriggerRunner.set_trigger_logging_metadata", "ret_exprs": [], "ret_type": "", "variables": {"is_trigger_log_context": "", "task_instance": "", "trigger_id": "", "triggerer_job_id": ""}, "variables_p": {"is_trigger_log_context": [["Dict[str, str]", 0.18781892939407946], ["str", 0.17281203714288146], ["Dict[str, Any]", 0.145080783150636], ["cmk.base.config.HostConfig", 0.1332348351156574], ["Optional[Literal]", 0.09775107749438362], ["List[str]", 0.09155689212579454], ["bool", 0.08732407941325251]], "task_instance": [["str", 0.494227812665076], ["Dict[str, str]", 0.1986089188607404], ["threading.local", 0.09928753750444523]], "trigger_id": [["int", 0.9999999985339405], ["dict", 1.0471855208892496e-09], ["Dict[str, str]", 4.1887420835569983e-10]], "triggerer_job_id": [["str", 0.7353439480598513], ["int", 0.15086521651260468], ["List[str]", 0.11379083542754408]]}}, {"docstring": {"func": "Gets a trigger class by its classpath (\"path.to.module.classname\").", "long_descr": "Uses a cache dictionary to speed up lookups after the first time.", "ret": null}, "fn_lc": [[722, 4], [730, 44]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "get_trigger_by_classpath", "params": {"classpath": "builtins.str", "self": ""}, "params_descr": {"classpath": "", "self": ""}, "params_occur": {"classpath": [["classpath", "self", "trigger_cache"], ["self", "trigger_cache", "classpath", "import_string", "classpath"], ["self", "trigger_cache", "classpath"]], "self": [["classpath", "self", "trigger_cache"], ["self", "trigger_cache", "classpath", "import_string", "classpath"], ["self", "trigger_cache", "classpath"]]}, "params_p": {"args": [], "classpath": [["str", 0.3042232134011617]], "kwargs": [], "self": []}, "q_name": "TriggerRunner.get_trigger_by_classpath", "ret_exprs": ["return self.trigger_cache[classpath]"], "ret_type": "builtins.type[airflow.triggers.base.BaseTrigger]", "ret_type_p": [["str", 0.19999999999999998], ["bool", 0.09999999999999999]], "variables": {}, "variables_p": {}}], "name": "TriggerRunner", "q_name": "TriggerRunner", "variables": {"events": "collections.deque[builtins.tuple[builtins.int, airflow.triggers.base.TriggerEvent]]", "failed_triggers": "collections.deque[builtins.tuple[builtins.int, builtins.BaseException]]", "stop": "builtins.bool", "to_cancel": "collections.deque[builtins.int]", "to_create": "collections.deque[builtins.tuple[builtins.int, airflow.triggers.base.BaseTrigger]]", "trigger_cache": "builtins.dict[builtins.str, builtins.type[airflow.triggers.base.BaseTrigger]]", "triggers": "builtins.dict[builtins.int, TriggerDetails]"}, "variables_p": {"events": [["str", 0.6], ["int", 0.30000000000000004]], "failed_triggers": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "stop": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "to_cancel": [["classmethod", 0.2], ["raiden.utils.Address", 0.1], ["Type[questions.models.AnswerVote]", 0.1], ["staticmethod", 0.1], ["Type[questions.models.QuestionVote]", 0.1], ["Set[str]", 0.1], ["Type[app.models.relations.EntityToWorkRel]", 0.1], ["str", 0.1]], "to_create": [["int", 0.37147695073486653], ["str", 0.32516006230369465], ["bool", 0.06446612583961485], ["List[str]", 0.05978882528646196], ["dict", 0.05978882528646196]], "trigger_cache": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "triggers": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]]}}], "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[99, 4], [102, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "should_wrap", "params": {"handler": ""}, "params_descr": {"handler": ""}, "params_occur": {"handler": [["handler", "__dict__", "get", "False", "handler", "__class__", "__dict__", "get", "False"]]}, "params_p": {"args": [], "handler": [["Dict[str, Any]", 0.3723026786942641], ["dict", 0.09512502797570867]], "kwargs": []}, "q_name": "configure_trigger_log_handler.<locals>.should_wrap", "ret_exprs": ["return handler.__dict__.get(\"trigger_should_wrap\", False) or handler.__class__.__dict__.get( \"trigger_should_wrap\", False)"], "ret_type": "", "ret_type_p": [["bool", 0.11959801033339294]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[104, 4], [107, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "should_queue", "params": {"handler": ""}, "params_descr": {"handler": ""}, "params_occur": {"handler": [["handler", "__dict__", "get", "True", "handler", "__class__", "__dict__", "get", "True"]]}, "params_p": {"args": [], "handler": [["dict", 0.2815209203255337], ["Dict[str, str]", 0.11544543214120588], ["collector_utilities.type.Job", 0.10642997759028318]], "kwargs": []}, "q_name": "configure_trigger_log_handler.<locals>.should_queue", "ret_exprs": ["return handler.__dict__.get(\"trigger_should_queue\", True) or handler.__class__.__dict__.get( \"trigger_should_queue\", True)"], "ret_type": "", "ret_type_p": [["bool", 0.28978938868884313], ["str", 0.09369620735711796]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[109, 4], [117, 19]], "fn_var_ln": {"val": [[114, 8], [114, 11]]}, "fn_var_occur": {"val": [["val", "handler", "__dict__", "get", "None"], ["val", "None"], ["val", "handler", "__class__", "__dict__", "get", "None"], ["val", "None"]]}, "name": "send_trigger_end_marker", "params": {"handler": ""}, "params_descr": {"handler": ""}, "params_occur": {"handler": [["val", "handler", "__dict__", "get", "None"], ["val", "handler", "__class__", "__dict__", "get", "None"]]}, "params_p": {"args": [], "handler": [["dict", 0.19901647551689428], ["str", 0.19045479785853434]], "kwargs": []}, "q_name": "configure_trigger_log_handler.<locals>.send_trigger_end_marker", "ret_exprs": ["return val", "return val", "return True"], "ret_type": "", "ret_type_p": [["bool", 0.44046398421182986], ["Optional[int]", 0.1255520294935758], ["int", 0.123178118204177], ["str", 0.10130080979790215], ["Optional[bool]", 0.08632694008833819]], "variables": {"val": ""}, "variables_p": {"val": [["dict", 0.5373047835597345], ["Dict[str, Any]", 0.14781140328470577], ["str", 0.10666822397004601], ["Dict[str, str]", 0.09331766919709397]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[119, 4], [124, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "supports_triggerer", "params": {"handler": ""}, "params_descr": {"handler": ""}, "params_occur": {"handler": [["should_wrap", "handler", "handler", "__dict__", "get", "False", "handler", "__class__", "__dict__", "get", "False"]]}, "params_p": {"args": [], "handler": [["dict", 0.28416567501000384], ["Dict[str, Any]", 0.24450631574767254], ["Dict[str, str]", 0.10918658659665015], ["list", 0.10102922530555163], ["str", 0.08404512672201112]], "kwargs": []}, "q_name": "configure_trigger_log_handler.<locals>.supports_triggerer", "ret_exprs": ["return ( should_wrap(handler) or handler.__dict__.get(\"trigger_supported\", False) or handler.__class__.__dict__.get(\"trigger_supported\", False))"], "ret_type": "", "ret_type_p": [["esm.models.service_type.ServiceType", 0.14566626609682426], ["dict", 0.11244173793721442]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[126, 4], [136, 24]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "get_task_handler_from_logger", "params": {"logger_": ""}, "params_descr": {"logger_": ""}, "params_occur": {"logger_": [["logger_", "handlers"]]}, "params_p": {"args": [], "kwargs": [], "logger_": [["str", 0.30012579844281595], ["logging.Logger", 0.2308258123191549], ["Tuple[Tuple[str, ...]]", 0.09463544860630652], ["Union[str, List[str]]", 0.08781648283746567]]}, "q_name": "configure_trigger_log_handler.<locals>.get_task_handler_from_logger", "ret_exprs": ["return h"], "ret_type": "", "ret_type_p": [["str", 0.2103567293788407], ["int", 0.19229967147425694], ["Dict[str, Any]", 0.19229967147425694], ["bool", 0.11659442046126003]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[138, 4], [152, 16]], "fn_var_ln": {"h": [[146, 12], [146, 13]]}, "fn_var_occur": {"h": [["h", "get_task_handler_from_logger", "root_logger"], ["h", "get_task_handler_from_logger", "logging", "getLogger"]]}, "name": "find_suitable_task_handler", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "configure_trigger_log_handler.<locals>.find_suitable_task_handler", "ret_exprs": ["return None", "return h"], "ret_type": "", "ret_type_p": [["Optional[str]", 0.5347796350287044], ["Optional[float]", 0.09799783708419053], ["bool", 0.08589286888244949], ["dict", 0.083771117508695], ["Optional[Any]", 0.07819174039449996]], "variables": {"h": ""}, "variables_p": {"h": [["Optional[str]", 0.40160585067697724], ["str", 0.28345747075916305], ["list", 0.09970349463471617]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[154, 4], [163, 52]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "filter_trigger_logs_from_other_root_handlers", "params": {"new_hdlr": ""}, "params_descr": {"new_hdlr": ""}, "params_occur": {"new_hdlr": [["h", "new_hdlr"]]}, "params_p": {"args": [], "kwargs": [], "new_hdlr": [["str", 0.20404172806970627], ["Dict[str, Any]", 0.10095109466463571], ["Dict[str, List[amundsen_common.models.dashboard.DashboardSummary]]", 0.09148803073605867], ["list", 0.08823709021260961]]}, "q_name": "configure_trigger_log_handler.<locals>.filter_trigger_logs_from_other_root_handlers", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[165, 4], [178, 16]], "fn_var_ln": {"h": [[174, 8], [174, 9]]}, "fn_var_occur": {"h": [["h", "TriggererHandlerWrapper", "base_handler", "base_handler", "level", "base_handler", "level"], ["h", "root_logger", "handlers"], ["root_logger", "addHandler", "h"]]}, "name": "add_handler_wrapper_to_root", "params": {"base_handler": ""}, "params_descr": {"base_handler": ""}, "params_occur": {"base_handler": [["base_handler", "root_logger", "handlers"], ["root_logger", "removeHandler", "base_handler"], ["logger", "info", "base_handler"], ["h", "TriggererHandlerWrapper", "base_handler", "base_handler", "level", "base_handler", "level"]]}, "params_p": {"args": [], "base_handler": [["str", 0.21515300366162682], ["Exception", 0.19495666943793927], ["logging.Logger", 0.10797038389329995]], "kwargs": []}, "q_name": "configure_trigger_log_handler.<locals>.add_handler_wrapper_to_root", "ret_exprs": ["return h"], "ret_type": "", "ret_type_p": [["str", 0.4123006882782274], ["int", 0.3580132515914015], ["Optional[int]", 0.10962963383147173]], "variables": {"h": ""}, "variables_p": {"h": [["threading.Lock", 0.2174701052341947], ["int", 0.10637779107981656], ["str", 0.09163656274480071]]}}, {"docstring": {"func": "Configure logging such that each trigger logs to its own file and", "long_descr": "can be exposed through the airflow webserver.\n\nGenerally speaking, we take the log handler configured for logger ``airflow.task``,\nwrap it with TriggerHandlerWrapper, and set it as the handler for root logger.\n\nIf there already is a handler configured for the root logger\nand it supports triggers, we wrap it instead.", "ret": null}, "fn_lc": [[84, 0], [196, 40]], "fn_var_ln": {"HANDLER_SUPPORTS_TRIGGERER": [[195, 4], [195, 30]], "SEND_TRIGGER_END_MARKER": [[194, 8], [194, 31]], "root_logger": [[180, 4], [180, 15]], "task_handler": [[181, 4], [181, 16]], "trigger_handler": [[189, 8], [189, 23]]}, "fn_var_occur": {"HANDLER_SUPPORTS_TRIGGERER": [["HANDLER_SUPPORTS_TRIGGERER", "True"]], "SEND_TRIGGER_END_MARKER": [["SEND_TRIGGER_END_MARKER", "False"]], "root_logger": [["root_logger", "logging", "getLogger"], ["root_logger", "addHandler", "trigger_handler"]], "task_handler": [["task_handler", "find_suitable_task_handler"], ["isinstance", "task_handler", "FileTaskHandler"], ["should_wrap", "task_handler"], ["trigger_handler", "add_handler_wrapper_to_root", "task_handler"], ["trigger_handler", "copy", "task_handler"]], "trigger_handler": [["trigger_handler", "add_handler_wrapper_to_root", "task_handler"], ["trigger_handler", "copy", "task_handler"], ["root_logger", "addHandler", "trigger_handler"], ["filter_trigger_logs_from_other_root_handlers", "trigger_handler"], ["send_trigger_end_marker", "trigger_handler", "False"], ["should_queue", "trigger_handler"]]}, "name": "configure_trigger_log_handler", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "configure_trigger_log_handler", "ret_exprs": ["return None", "return should_queue(trigger_handler)"], "ret_type": "", "ret_type_p": [["Optional[str]", 0.5207164912917647], ["str", 0.2966560634426971]], "variables": {"HANDLER_SUPPORTS_TRIGGERER": "", "SEND_TRIGGER_END_MARKER": "", "root_logger": "", "task_handler": "", "trigger_handler": ""}, "variables_p": {"HANDLER_SUPPORTS_TRIGGERER": [["str", 0.8999999999999999], ["bool", 0.09999999999999999]], "SEND_TRIGGER_END_MARKER": [["float", 0.33333333331328874], ["bool", 0.33333333331328874], ["dict", 1.425524602308751e-11], ["Type[Dict[Any, Any]]", 1.2404887260056748e-11], ["str", 7.237119791854926e-12]], "root_logger": [["logging.Logger", 1.0]], "task_handler": [["logging.Logger", 0.5678074059352693], ["raiden.utils.Dict[str, raiden.utils.Any]", 0.20361798750355356], ["drel.core.models.FullRequestLog", 0.09983851755066522]], "trigger_handler": [["asyncio.events.AbstractEventLoop", 0.08593431297941671]]}}, {"docstring": {"func": "Route log messages to a queue and process them with QueueListener.", "long_descr": "Airflow task handlers make blocking I/O calls.\nWe replace trigger log handlers, with LocalQueueHandler,\nwhich sends log records to a queue.\nThen we start a QueueListener in a thread, which is configured\nto consume the queue and pass the records to the handlers as\noriginally configured. This keeps the handler I/O out of the\nasync event loop.", "ret": null}, "fn_lc": [[199, 0], [235, 19]], "fn_var_ln": {"handlers": [[216, 4], [216, 12]], "listener": [[230, 8], [230, 16]], "queue": [[213, 4], [213, 9]], "queue_handler": [[218, 4], [218, 17]], "root_logger": [[214, 4], [214, 15]], "this_logger": [[227, 4], [227, 15]]}, "fn_var_occur": {"handlers": [["handlers", "builtins", "list", "logging", "Handler"], ["root_logger", "handlers"], ["handlers", "append", "h"], ["this_logger", "info", "handlers"], ["listener", "logging", "handlers", "QueueListener", "queue", "handlers", "respect_handler_level", "True"]], "listener": [["listener", "logging", "handlers", "QueueListener", "queue", "handlers", "respect_handler_level", "True"], ["listener", "start"]], "queue": [["queue", "SimpleQueue"], ["queue_handler", "LocalQueueHandler", "queue"], ["listener", "logging", "handlers", "QueueListener", "queue", "handlers", "respect_handler_level", "True"]], "queue_handler": [["queue_handler", "LocalQueueHandler", "queue"], ["queue_handler", "addFilter", "TriggerMetadataFilter"], ["root_logger", "addHandler", "queue_handler"], ["h", "queue_handler", "h", "__module__"]], "root_logger": [["root_logger", "logging", "getLogger"], ["root_logger", "addHandler", "queue_handler"], ["root_logger", "handlers"], ["root_logger", "removeHandler", "h"]], "this_logger": [["this_logger", "logging", "getLogger", "__name__"], ["this_logger", "info", "handlers"], ["this_logger", "warning"]]}, "name": "setup_queue_listener", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "setup_queue_listener", "ret_exprs": ["return listener", "return None"], "ret_type": "", "ret_type_p": [["Optional[str]", 0.4107599539271617], ["list", 0.11332756664100202], ["str", 0.09128897707024994]], "variables": {"handlers": "builtins.list[logging.Handler]", "listener": "", "queue": "", "queue_handler": "", "root_logger": "", "this_logger": ""}, "variables_p": {"handlers": [["list", 0.8145392060387453], ["str", 0.10231043106609466], ["List[Pattern[str]]", 0.08315036289516005]], "listener": [["str", 0.5160444722289378], ["list", 0.10882963804115273], ["Exception", 0.09522385671871285], ["Callable(os.path.join)[..., Any][[[Named(a, Union[_PathLike[str], str]), Variable(Union[_PathLike[str], str])], str][Any, Any]]", 0.09480616948990826]], "queue": [["asyncio.events.AbstractEventLoop", 0.0965698628752624], ["int", 0.09362189736511796]], "queue_handler": [["Anaconda3.Lib.site-packages.conda.gateways.logging.StdStreamHandler", 0.10344669763963543]], "root_logger": [["logging.Logger", 1.0]], "this_logger": [["logging.Logger", 0.9999999999999998]]}}], "imports": ["__future__", "annotations", "asyncio", "logging", "os", "signal", "sys", "threading", "time", "warnings", "collections", "deque", "contextlib", "suppress", "copy", "copy", "queue", "SimpleQueue", "typing", "TYPE_CHECKING", "sqlalchemy", "func", "airflow", "configuration", "conf", "airflow", "jobs", "base_job_runner", "BaseJobRunner", "airflow", "jobs", "job", "Job", "perform_heartbeat", "airflow", "models", "trigger", "Trigger", "airflow", "serialization", "pydantic", "job", "JobPydantic", "airflow", "stats", "Stats", "airflow", "triggers", "base", "BaseTrigger", "TriggerEvent", "airflow", "typing_compat", "TypedDict", "airflow", "utils", "timezone", "airflow", "utils", "log", "file_task_handler", "FileTaskHandler", "airflow", "utils", "log", "logging_mixin", "LoggingMixin", "airflow", "utils", "log", "trigger_handler", "DropTriggerLogsFilter", "LocalQueueHandler", "TriggererHandlerWrapper", "TriggerMetadataFilter", "ctx_indiv_trigger", "ctx_task_instance", "ctx_trigger_end", "ctx_trigger_id", "airflow", "utils", "module_loading", "import_string", "airflow", "utils", "session", "provide_session", "airflow", "models", "TaskInstance"], "mod_var_ln": {"DISABLE_LISTENER": [[81, 0], [81, 16]], "DISABLE_WRAPPER": [[80, 0], [80, 15]], "HANDLER_SUPPORTS_TRIGGERER": [[62, 0], [62, 26]], "SEND_TRIGGER_END_MARKER": [[70, 0], [70, 23]], "logger": [[77, 0], [77, 6]]}, "mod_var_occur": {"DISABLE_LISTENER": [["DISABLE_LISTENER"]], "DISABLE_WRAPPER": [["DISABLE_WRAPPER"]], "HANDLER_SUPPORTS_TRIGGERER": [["HANDLER_SUPPORTS_TRIGGERER"], ["HANDLER_SUPPORTS_TRIGGERER", "True"], ["HANDLER_SUPPORTS_TRIGGERER"]], "SEND_TRIGGER_END_MARKER": [["SEND_TRIGGER_END_MARKER"], ["SEND_TRIGGER_END_MARKER", "False"], ["SEND_TRIGGER_END_MARKER"]], "logger": [["logger", "debug"], ["logger", "debug"], ["logger", "info", "base_handler"]]}, "no_types_annot": {"D": 22, "I": 0, "U": 110}, "session_id": "XYaBp5Sti4bj0VnsWxRNgO_Aljskqg22nt2GnyVjRZM", "set": null, "tc": [false, null], "type_annot_cove": 0.17, "typed_seq": "", "untyped_seq": "", "variables": {"DISABLE_LISTENER": "", "DISABLE_WRAPPER": "", "HANDLER_SUPPORTS_TRIGGERER": "", "SEND_TRIGGER_END_MARKER": "", "logger": ""}, "variables_p": {"DISABLE_LISTENER": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["str", 0.1]], "DISABLE_WRAPPER": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["str", 0.1]], "HANDLER_SUPPORTS_TRIGGERER": [["List[Tuple[int, Any]]", 0.19870554516815542], ["Tuple[Literal, int, Literal, int]", 0.13725918470877915], ["Iterator[Tuple[int, Any]]", 0.0970809521545855], ["bytearray", 0.08087939203903749], ["bytes", 0.08087939203903749], ["Type[Dict[str, Any]]", 0.08084215087460263], ["Callable", 0.07902330990479943]], "SEND_TRIGGER_END_MARKER": [["list", 0.24999999994693975], ["Tuple[str, str]", 0.24999999994693975], ["Tuple[Literal, Literal, Literal]", 8.00423289758237e-11], ["int", 8.00423289758237e-11]], "logger": [["logging.Logger", 0.9999999999999997]]}}}