{"error": null, "response": {"classes": [{"cls_lc": [[52, 0], [235, 62]], "cls_var_ln": {"__table_args__": [[76, 4], [76, 18]], "__tablename__": [[61, 4], [61, 17]], "dag_id": [[64, 4], [64, 10]], "dag_runs": [[88, 4], [88, 12]], "end_date": [[70, 4], [70, 12]], "executor_class": [[72, 4], [72, 18]], "heartrate": [[100, 4], [100, 13]], "hostname": [[73, 4], [73, 12]], "id": [[63, 4], [63, 6]], "job_type": [[68, 4], [68, 12]], "latest_heartbeat": [[71, 4], [71, 20]], "start_date": [[69, 4], [69, 14]], "state": [[67, 4], [67, 9]], "task_instances_enqueued": [[82, 4], [82, 27]], "unixname": [[74, 4], [74, 12]]}, "cls_var_occur": {"__table_args__": [], "__tablename__": [], "dag_id": [], "dag_runs": [["dag_runs", "relationship", "primaryjoin", "Job", "id", "foreign", "_resolve_dagrun_model", "creating_job_id", "backref"]], "end_date": [], "executor_class": [], "heartrate": [], "hostname": [], "id": [["dag_runs", "relationship", "primaryjoin", "Job", "id", "foreign", "_resolve_dagrun_model", "creating_job_id", "backref"], ["job", "session", "scalar", "select", "Job", "where", "Job", "id", "self", "id", "limit"]], "job_type": [], "latest_heartbeat": [], "start_date": [], "state": [], "task_instances_enqueued": [], "unixname": []}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[102, 4], [114, 34]], "fn_var_ln": {"executor": [[106, 12], [106, 25]], "heartrate": [[110, 12], [110, 26]], "hostname": [[104, 8], [104, 21]], "latest_heartbeat": [[108, 8], [108, 29]], "max_tis_per_query": [[112, 8], [112, 30]], "start_date": [[107, 8], [107, 23]], "unixname": [[111, 8], [111, 21]]}, "fn_var_occur": {"executor": [["self", "executor", "executor"]], "heartrate": [["heartrate", "None"], ["self", "heartrate", "heartrate"]], "hostname": [["self", "hostname", "get_hostname"]], "latest_heartbeat": [["self", "latest_heartbeat", "timezone", "utcnow"]], "max_tis_per_query": [["self", "max_tis_per_query", "builtins", "int", "conf", "getint"]], "start_date": [["self", "start_date", "timezone", "utcnow"]], "unixname": [["self", "unixname", "getuser"]]}, "name": "__init__", "params": {"executor": "", "heartrate": "", "kwargs": "", "self": ""}, "params_descr": {"executor": "", "heartrate": "", "kwargs": "", "self": ""}, "params_occur": {"executor": [["self", "executor", "executor"]], "heartrate": [["heartrate", "None"], ["self", "heartrate", "heartrate"]], "kwargs": [["super", "__init__", "kwargs"]], "self": [["self", "hostname", "get_hostname"], ["self", "executor", "executor"], ["self", "start_date", "timezone", "utcnow"], ["self", "latest_heartbeat", "timezone", "utcnow"], ["self", "heartrate", "heartrate"], ["self", "unixname", "getuser"], ["self", "max_tis_per_query", "builtins", "int", "conf", "getint"], ["get_listener_manager", "hook", "on_starting", "component", "self"]]}, "params_p": {"args": [], "executor": [["int", 0.3], ["bool", 0.09999999999999999], ["float", 0.09999999999999999]], "heartrate": [["Optional[float]", 0.32509245037463436], ["Optional[str]", 0.16877626943734203], ["Optional[int]", 0.08864493681308808], ["Optional[Callable]", 0.0880582926280287], ["Optional[Hashable]", 0.0880582926280287], ["int", 0.08110725388550906]], "kwargs": [], "self": []}, "q_name": "Job.__init__", "ret_exprs": [], "ret_type": "", "variables": {"executor": "", "heartrate": "", "hostname": "", "latest_heartbeat": "", "max_tis_per_query": "builtins.int", "start_date": "", "unixname": ""}, "variables_p": {"executor": [["str", 0.30000000000000004], ["Dict[str, Any]", 0.1], ["dict", 0.1], ["int", 0.1]], "heartrate": [["list", 0.13648104380685502], ["Optional[str]", 0.09926150665635557], ["Optional[aiozipkin.helpers.TraceContext]", 0.08193495725504887], ["Optional[Callable[[Any], Any]]", 0.07699176530736669]], "hostname": [["int", 0.5000000000179956], ["list", 0.49999999997243216]], "latest_heartbeat": [["str", 0.30000000000000004], ["Dict[str, Any]", 0.1], ["dict", 0.1], ["int", 0.1]], "max_tis_per_query": [["int", 0.9999999999999998]], "start_date": [["int", 0.2723704087139686]], "unixname": [["str", 0.30000000000000004], ["Dict[str, Any]", 0.1], ["dict", 0.1], ["int", 0.1]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[117, 4], [118, 52]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "executor", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "Job.executor", "ret_exprs": ["return ExecutorLoader.get_default_executor()"], "ret_type": "", "ret_type_p": [["str", 0.29659612112653183], ["Tuple[float, float]", 0.1885121949318137], ["Optional[List[Any]]", 0.10689111696643719], ["allennlp.models.archival.Archive", 0.10681798279085096], ["int", 0.1041935505450521], ["Optional[str]", 0.09855980668659378], ["bool", 0.09842922695272026]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Is this job currently alive.", "long_descr": "We define alive as in a state of RUNNING, and having sent a heartbeat\nwithin a multiple of the heartrate (default of 2.1)", "ret": null}, "fn_lc": [[120, 4], [137, 9]], "fn_var_ln": {"health_check_threshold": [[133, 12], [133, 34]]}, "fn_var_occur": {"health_check_threshold": [["health_check_threshold", "builtins", "int", "conf", "getint"], ["health_check_threshold", "builtins", "int", "self", "heartrate", "grace_multiplier"], ["self", "state", "State", "RUNNING", "timezone", "utcnow", "self", "latest_heartbeat", "total_seconds", "health_check_threshold"]]}, "name": "is_alive", "params": {"grace_multiplier": "", "self": ""}, "params_descr": {"grace_multiplier": "multiplier of heartrate to require heart beat\nwithin", "self": ""}, "params_occur": {"grace_multiplier": [["health_check_threshold", "builtins", "int", "self", "heartrate", "grace_multiplier"]], "self": [["self", "job_type"], ["health_check_threshold", "builtins", "int", "self", "heartrate", "grace_multiplier"], ["self", "state", "State", "RUNNING", "timezone", "utcnow", "self", "latest_heartbeat", "total_seconds", "health_check_threshold"]]}, "params_p": {"args": [], "grace_multiplier": [["int", 0.5305454028291402], ["app.models.dto.CoordinateDTO", 0.289494257943795], ["str", 0.07008103214003822], ["Mapping[str, int]", 0.03344730870068831]], "kwargs": [], "self": []}, "q_name": "Job.is_alive", "ret_exprs": ["return ( self.state == State.RUNNING and (timezone.utcnow() - self.latest_heartbeat).total_seconds() < health_check_threshold)"], "ret_type": "", "ret_type_p": [["bool", 0.32122946940040537], ["Callable", 0.1956372399423684], ["str", 0.10225255722855271], ["zerver.models.Realm", 0.08916292025507536]], "variables": {"health_check_threshold": "builtins.int"}, "variables_p": {"health_check_threshold": [["int", 1.0]]}}, {"docstring": {"func": "Handles on_kill callback and updates state in database.", "long_descr": null, "ret": null}, "fn_lc": [[140, 4], [150, 59]], "fn_var_ln": {"end_date": [[143, 8], [143, 20]], "job": [[142, 8], [142, 11]]}, "fn_var_occur": {"end_date": [["job", "end_date", "timezone", "utcnow"]], "job": [["job", "session", "scalar", "select", "Job", "where", "Job", "id", "self", "id", "limit"], ["job", "end_date", "timezone", "utcnow"], ["session", "merge", "job"]]}, "name": "kill", "params": {"self": "", "session": "sqlalchemy.orm.session.Session"}, "params_descr": {"self": "", "session": ""}, "params_occur": {"self": [["job", "session", "scalar", "select", "Job", "where", "Job", "id", "self", "id", "limit"], ["self", "on_kill"], ["self", "log", "error", "str", "e"]], "session": [["job", "session", "scalar", "select", "Job", "where", "Job", "id", "self", "id", "limit"], ["session", "merge", "job"], ["session", "commit"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "session": [["sqlalchemy.orm.scoping.scoped_session", 0.2916604854978394], ["sqlalchemy.orm.session.Session", 0.18325165549917727], ["sqlalchemy.orm.Session", 0.15732458284486367], ["str", 0.10631902933795766], ["labm8.py.sqlutil.Session", 0.08343819041090877], ["int", 0.073846807582323]]}, "q_name": "Job.kill", "ret_exprs": [], "ret_type": "typing.NoReturn", "variables": {"end_date": "", "job": ""}, "variables_p": {"end_date": [["Pattern[str]", 0.09946501927849112], ["str", 0.07391076109963028]], "job": [["raiden.utils.PaymentAmount", 0.12924553230978114], ["Optional[decksite.data.models.person.Person]", 0.1060233137234695], ["raiden.utils.SecretHash", 0.10507457510321702], ["list", 0.10351237820976328], ["byceps.services.user.transfer.models.User", 0.09679788762349398], ["zerver.models.Realm", 0.09251385944329296], ["str", 0.09061966087691373], ["jinete.models.stops.Stop", 0.08881304698566361], ["Optional[magic.models.deck.Deck]", 0.08502011277139404]]}}, {"docstring": {"func": "Will be called when an external kill command is received.", "long_descr": null, "ret": null}, "fn_lc": [[152, 4], [153, 71]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "on_kill", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "Job.on_kill", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Update the job's entry in the database with the latest_heartbeat timestamp.", "long_descr": "This allows for the job to be killed externally and allows the system\nto monitor what is actually active.  For instance, an old heartbeat\nfor SchedulerJob would mean something is wrong.  This also allows for\nany job to be killed externally, regardless of who is running it or on\nwhich machine it is running.\n\nNote that if your heart rate is set to 60 seconds and you call this\nmethod after 10 seconds of processing since the last heartbeat, it\nwill sleep 50 seconds to complete the 60 seconds and keep a steady\nheart rate. If you go over 60 seconds before calling it, it won't\nsleep at all.\n\n:param heartbeat_callback: Callback that will be run when the heartbeat is recorded in the Job\n:param session to use for saving the job", "ret": null}, "fn_lc": [[156, 4], [212, 54]], "fn_var_ln": {"latest_heartbeat": [[212, 12], [212, 33]], "previous_heartbeat": [[204, 16], [204, 34]], "seconds_remaining": [[191, 16], [191, 33]], "sleep_for": [[194, 16], [194, 25]]}, "fn_var_occur": {"latest_heartbeat": [["previous_heartbeat", "self", "latest_heartbeat"], ["previous_heartbeat", "self", "latest_heartbeat"], ["self", "latest_heartbeat"], ["seconds_remaining", "self", "heartrate", "timezone", "utcnow", "self", "latest_heartbeat", "total_seconds"], ["self", "latest_heartbeat", "timezone", "utcnow"], ["previous_heartbeat", "self", "latest_heartbeat"], ["self", "latest_heartbeat", "previous_heartbeat"]], "previous_heartbeat": [["previous_heartbeat", "self", "latest_heartbeat"], ["previous_heartbeat", "self", "latest_heartbeat"], ["previous_heartbeat", "self", "latest_heartbeat"], ["self", "latest_heartbeat", "previous_heartbeat"]], "seconds_remaining": [["seconds_remaining", "self", "heartrate", "timezone", "utcnow", "self", "latest_heartbeat", "total_seconds"], ["sleep_for", "max", "seconds_remaining"]], "sleep_for": [["sleep_for", "max", "seconds_remaining"], ["sleep", "sleep_for"]]}, "name": "heartbeat", "params": {"heartbeat_callback": "typing.Callable[[sqlalchemy.orm.session.Session], None]", "self": "", "session": "sqlalchemy.orm.session.Session"}, "params_descr": {"heartbeat_callback": "", "self": "", "session": ""}, "params_occur": {"heartbeat_callback": [["heartbeat_callback", "session"]], "self": [["previous_heartbeat", "self", "latest_heartbeat"], ["session", "merge", "self"], ["previous_heartbeat", "self", "latest_heartbeat"], ["self", "state", "State", "terminating_states"], ["self", "kill"], ["self", "latest_heartbeat"], ["seconds_remaining", "self", "heartrate", "timezone", "utcnow", "self", "latest_heartbeat", "total_seconds"], ["session", "merge", "self"], ["self", "latest_heartbeat", "timezone", "utcnow"], ["previous_heartbeat", "self", "latest_heartbeat"], ["self", "log", "debug"], ["Stats", "incr", "convert_camel_to_snake", "self", "__class__", "__name__"], ["self", "log", "exception", "self", "__class__", "__name__"], ["self", "latest_heartbeat", "previous_heartbeat"]], "session": [["session", "merge", "self"], ["create_session", "session"], ["session", "merge", "self"], ["session", "commit"], ["heartbeat_callback", "session"]]}, "params_p": {"args": [], "heartbeat_callback": [["str", 0.13756627492864526], ["bool", 0.13756627492864526], ["apistar.http.Session", 0.13756627492864526], ["sqlalchemy.orm.Session", 0.05326393719382102], ["session.DatabaseSession", 0.05326393719382102]], "kwargs": [], "self": [], "session": [["sqlalchemy.orm.Session", 0.3081092786438402], ["int", 0.17962513066832125], ["Dict[str, Any]", 0.10637708562736728], ["tnadmin.models.GvOrganisation", 0.0985678312770132], ["Optional[mwapi.Session]", 0.0866640211190544]]}, "q_name": "Job.heartbeat", "ret_exprs": [], "ret_type": "None", "variables": {"latest_heartbeat": "", "previous_heartbeat": "", "seconds_remaining": "", "sleep_for": ""}, "variables_p": {"latest_heartbeat": [["str", 0.9068300664370804], ["int", 0.0931699335629196]], "previous_heartbeat": [["str", 0.8755475829222372], ["int", 0.12445241707776268]], "seconds_remaining": [["bool", 0.9999999998254222], ["str", 8.214930691670352e-11]], "sleep_for": [["bool", 0.5714285714435733], ["int", 0.14285714288425502], ["Callable[[], str]", 0.1428571428360859], ["Set[str]", 0.1428571428360859]]}}, {"docstring": {"func": "Prepares the job for execution.", "long_descr": null, "ret": null}, "fn_lc": [[215, 4], [222, 28]], "fn_var_ln": {"start_date": [[219, 8], [219, 23]], "state": [[218, 8], [218, 18]]}, "fn_var_occur": {"start_date": [["self", "start_date", "timezone", "utcnow"]], "state": [["self", "state", "State", "RUNNING"]]}, "name": "prepare_for_execution", "params": {"self": "", "session": "sqlalchemy.orm.session.Session"}, "params_descr": {"self": "", "session": ""}, "params_occur": {"self": [["Stats", "incr", "self", "__class__", "__name__", "lower"], ["self", "state", "State", "RUNNING"], ["self", "start_date", "timezone", "utcnow"], ["session", "add", "self"], ["make_transient", "self"]], "session": [["session", "add", "self"], ["session", "commit"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "session": [["grouper.models.base.session.Session", 0.1917022603028911], ["sqlalchemy.orm.session.Session", 0.1710956229221584], ["sqlalchemy.orm.Session", 0.0983824095889021], ["requests.Session", 0.09781499732736904], ["mwapi.Session", 0.09440171824561214], ["nox.sessions.Session", 0.08331361575584373]]}, "q_name": "Job.prepare_for_execution", "ret_exprs": [], "ret_type": "", "variables": {"start_date": "", "state": ""}, "variables_p": {"start_date": [["int", 0.2723704087139686]], "state": [["str", 0.44444444443999087], ["Tuple[int, str]", 0.22222222221999544], ["Set[str]", 1.002069413939684e-11]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[225, 4], [230, 66]], "fn_var_ln": {"end_date": [[227, 8], [227, 21]]}, "fn_var_occur": {"end_date": [["self", "end_date", "timezone", "utcnow"]]}, "name": "complete_execution", "params": {"self": "", "session": "sqlalchemy.orm.session.Session"}, "params_descr": {"self": "", "session": ""}, "params_occur": {"self": [["get_listener_manager", "hook", "before_stopping", "component", "self"], ["self", "end_date", "timezone", "utcnow"], ["session", "merge", "self"], ["Stats", "incr", "self", "__class__", "__name__", "lower"]], "session": [["session", "merge", "self"], ["session", "commit"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "session": [["nox.sessions.Session", 0.6233209854704302], ["deeplearning.ml4pl.models.log_database.Database", 0.11525775038264033], ["bool", 0.053979398945353745]]}, "q_name": "Job.complete_execution", "ret_exprs": [], "ret_type": "", "variables": {"end_date": ""}, "variables_p": {"end_date": []}}, {"docstring": {"func": "Returns the most recent job of this type, if any, based on last heartbeat received.", "long_descr": null, "ret": null}, "fn_lc": [[233, 4], [235, 62]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "most_recent_job", "params": {"self": "", "session": "sqlalchemy.orm.session.Session"}, "params_descr": {"self": "", "session": ""}, "params_occur": {"self": [["most_recent_job", "self", "job_type", "session", "session"]], "session": [["most_recent_job", "self", "job_type", "session", "session"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "session": [["nox.sessions.Session", 0.5340927440127596], ["sqlalchemy.orm.session.Session", 0.16309628056209974], ["_pytesmain.Session", 0.07160137293074764]]}, "q_name": "Job.most_recent_job", "ret_exprs": ["return most_recent_job(self.job_type, session=session)"], "ret_type": "Job | None", "ret_type_p": [["tuple", 0.17400214188695312]], "variables": {}, "variables_p": {}}], "name": "Job", "q_name": "Job", "variables": {"__table_args__": "", "__tablename__": "", "dag_id": "", "dag_runs": "", "end_date": "", "executor_class": "", "heartrate": "", "hostname": "", "id": "", "job_type": "", "latest_heartbeat": "", "start_date": "", "state": "", "task_instances_enqueued": "", "unixname": ""}, "variables_p": {"__table_args__": [["Dict[str, str]", 0.5], ["Dict[str, Union[bool, str]]", 0.2], ["Dict[str, bool]", 0.1]], "__tablename__": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "dag_id": [["Optional[str]", 0.09999999999999999], ["int", 0.09999999999999999], ["List[int]", 0.09999999999999999], ["services.ticketing.transfer.models.TicketID", 0.09999999999999999], ["Type[models.User]", 0.09999999999999999], ["shop.transfer.models.ShopID", 0.09999999999999999], ["Type[pipeline.netfile.models.AbstractSchedule]", 0.09999999999999999], ["shortcuts.actions.base.GroupIDField", 0.09999999999999999]], "dag_runs": [["bytearray", 0.08679004215037672], ["List[str]", 0.07984512393205005]], "end_date": [["str", 0.2], ["Type[leasing.models.decision.Decision]", 0.1]], "executor_class": [["str", 0.49999999999999994]], "heartrate": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "hostname": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "id": [["int", 0.31624423830434456], ["list", 0.08799738122013787], ["Optional[str]", 0.08757392273618425]], "job_type": [["str", 0.19999999999999998], ["int", 0.19999999999999998], ["Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal]", 0.09999999999999999], ["Dict[str, str]", 0.09999999999999999], ["Tuple[Type[int], Type[float]]", 0.09999999999999999]], "latest_heartbeat": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "start_date": [["str", 0.10000000000000002], ["Type[app.models.entity.EntityToEntityRel]", 0.10000000000000002], ["Optional[str]", 0.10000000000000002], ["Type[leasing.models.renContractRent]", 0.10000000000000002], ["Type[leasing.models.renIndexAdjustedRent]", 0.10000000000000002], ["Type[finances.models.DiscountBase]", 0.10000000000000002], ["Type[guild_calendar.models.Event]", 0.10000000000000002]], "state": [["str", 0.29999999999999993], ["bool", 0.19999999999999996], ["Optional[\"StateResourceIdentifier\"]", 0.09999999999999998], ["Optional[str]", 0.09999999999999998], ["Type[demoboapp.models.Group]", 0.09999999999999998]], "task_instances_enqueued": [["str", 0.19999999999999998], ["annofabapi.models.TaskPhase", 0.09999999999999999], ["List[Dict[str, Any]]", 0.09999999999999999], ["bool", 0.09999999999999999], ["Type[src.app.models.TaskDevice]", 0.09999999999999999], ["Dict[str, Any]", 0.09999999999999999]], "unixname": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]]}}], "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[46, 0], [49, 17]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "_resolve_dagrun_model", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "_resolve_dagrun_model", "ret_exprs": ["return DagRun"], "ret_type": "", "ret_type_p": [["Callable", 0.11140187829831875], ["int", 0.10240157952069737], ["rads.xml.base.Element", 0.09525715189723431], ["bool", 0.09517499365129088]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Return the most recent job of this type, if any, based on last heartbeat received.", "long_descr": "Jobs in \"running\" state take precedence over others to make sure alive\njob is returned if it is available.", "ret": null}, "fn_lc": [[239, 0], [258, 5]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "most_recent_job", "params": {"job_type": "builtins.str", "session": "sqlalchemy.orm.session.Session"}, "params_descr": {"job_type": "job type to query for to get the most recent job for", "session": "Database session"}, "params_occur": {"job_type": [["session", "scalar", "select", "Job", "where", "Job", "job_type", "job_type", "order_by", "case", "State", "RUNNING", "value", "Job", "state", "else_", "Job", "latest_heartbeat", "desc", "limit"]], "session": [["session", "scalar", "select", "Job", "where", "Job", "job_type", "job_type", "order_by", "case", "State", "RUNNING", "value", "Job", "state", "else_", "Job", "latest_heartbeat", "desc", "limit"]]}, "params_p": {"args": [], "job_type": [["str", 0.41397852929888224], ["int", 0.15879209517987153], ["Callable", 0.13465906696089466]], "kwargs": [], "session": [["str", 0.41397852929888224], ["int", 0.15879209517987153], ["Callable", 0.13465906696089466]]}, "q_name": "most_recent_job", "ret_exprs": ["return session.scalar( select(Job) .where(Job.job_type == job_type) .order_by( # Put \"running\" jobs at the front. case({State.RUNNING: 0}, value=Job.state, else_=1), Job.latest_heartbeat.desc(), ) .limit(1))"], "ret_type": "Job | None", "ret_type_p": [["str", 0.3981806024237683], ["dict", 0.11056938361132322], ["int", 0.09845562433726729]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Runs the job.", "long_descr": "The Job is always an ORM object and setting the state is happening within the\nsame DB session and the session is kept open throughout the whole execution.", "ret": null}, "fn_lc": [[262, 0], [282, 47]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "run_job", "params": {"execute_callable": "typing.Callable[[], int | None]", "job": "Job | JobPydantic", "session": "sqlalchemy.orm.session.Session"}, "params_descr": {"execute_callable": "", "job": "", "session": ""}, "params_occur": {"execute_callable": [["execute_job", "job", "execute_callable", "execute_callable"]], "job": [["isinstance", "job", "JobPydantic"], ["job", "prepare_for_execution", "session", "session"], ["execute_job", "job", "execute_callable", "execute_callable"], ["job", "complete_execution", "session", "session"]], "session": [["job", "prepare_for_execution", "session", "session"], ["job", "complete_execution", "session", "session"]]}, "params_p": {"args": [], "execute_callable": [["asgard.models.user.User", 0.1415328697402055], ["asgard.models.accounAccount", 0.1415328697402055], ["app.models.dto.ClientInfo", 0.11128943723973025], ["bool", 0.08538530407438347], ["str", 0.08321684932276541], ["List[Tuple[bool, Any]]", 0.07960983863692407]], "job": [["users.models.JustfixUser", 0.20545221697058186], ["str", 0.18567190375449638], ["dict", 0.09640229776216153], ["django.contrib.auth.models.User", 0.08907419147716683]], "kwargs": [], "session": [["nox.sessions.Session", 0.19400017557215932], ["sqlalchemy.orm.Session", 0.17962952300799018], ["grouper.models.service_accounServiceAccount", 0.11600738992408656], ["uita.auth.Session", 0.100950770611668], ["recidiviz.persistence.database.session.Session", 0.09670768450878084], ["sqlalchemy.orm.session.Session", 0.09509714867339783]]}, "q_name": "run_job", "ret_exprs": ["return execute_job(job, execute_callable=execute_callable)"], "ret_type": "int | None", "ret_type_p": [["str", 0.2], ["int", 0.1], ["bool", 0.1], ["list", 0.1]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Executes the job.", "long_descr": "Job execution requires no session as generally executing session does not require an\nactive database connection. The session might be temporary acquired and used if the job\nruns heartbeat during execution, but this connection is only acquired for the time of heartbeat\nand in case of AIP-44 implementation it happens over the Internal API rather than directly via\nthe database.\n\nAfter the job is completed, state of the Job is updated and it should be updated in the database,\nwhich happens in the \"complete_execution\" step (which again can be executed locally in case of\ndatabase operations or over the Internal API call.", "ret": null}, "fn_lc": [[285, 0], [318, 14]], "fn_var_ln": {"ret": [[309, 8], [309, 11]], "state": [[316, 8], [316, 17]]}, "fn_var_occur": {"ret": [["ret", "None"], ["ret", "execute_callable"]], "state": [["job", "state", "State", "SUCCESS"], ["job", "state", "State", "SUCCESS"], ["job", "state", "State", "FAILED"]]}, "name": "execute_job", "params": {"execute_callable": "typing.Callable[[], int | None]", "job": "Job | JobPydantic"}, "params_descr": {"execute_callable": "callable to execute when running the job.", "job": "Job to execute - it can be either DB job or it's Pydantic serialized version. It does\nnot really matter, because except of running the heartbeat and state setting,\nthe runner should not modify the job state."}, "params_occur": {"execute_callable": [["ret", "execute_callable"]], "job": [["job", "state", "State", "SUCCESS"], ["job", "state", "State", "SUCCESS"], ["job", "state", "State", "FAILED"]]}, "params_p": {"args": [], "execute_callable": [["Pattern", 0.6666666664858469], ["str", 0.3333333334029531], ["int", 6.420116189411732e-11]], "job": [["str", 0.2710700926648818], ["Dict[str, Any]", 0.0948371255489352], ["Optional[Union[Any, Any]]", 0.09074019379427063]], "kwargs": []}, "q_name": "execute_job", "ret_exprs": ["return ret"], "ret_type": "int | None", "ret_type_p": [["bool", 0.2395657390539261], ["List[str]", 0.23338568586490194], ["Set[str]", 0.16051642331466923], ["Dict[str, Any]", 0.08608815791117343], ["str", 0.08416976611412513]], "variables": {"ret": "", "state": ""}, "variables_p": {"ret": [["Optional[str]", 0.4196631490312703], ["str", 0.27623495628214656], ["set", 0.10663745503315053], ["Optional[dict]", 0.09140837129503993]], "state": [["str", 0.1562852384781628], ["Tuple[str]", 0.1399866432594176], ["zproc.state.state.State", 0.11953539051344149], ["raiden.transfer.state.ChainState", 0.09834255725057504]]}}, {"docstring": {"func": "Performs heartbeat for the Job passed to it,optionally checking if it is necessary.", "long_descr": null, "ret": null}, "fn_lc": [[321, 0], [341, 77]], "fn_var_ln": {"seconds_remaining": [[337, 8], [337, 25]]}, "fn_var_occur": {"seconds_remaining": [["seconds_remaining", "builtins", "float"], ["seconds_remaining", "job", "heartrate", "timezone", "utcnow", "job", "latest_heartbeat", "total_seconds"], ["seconds_remaining", "only_if_necessary"]]}, "name": "perform_heartbeat", "params": {"heartbeat_callback": "typing.Callable[[sqlalchemy.orm.session.Session], None]", "job": "Job | JobPydantic", "only_if_necessary": "builtins.bool"}, "params_descr": {"heartbeat_callback": "callback to run by the heartbeat", "job": "job to perform heartbeat for", "only_if_necessary": "only heartbeat if it is necessary (i.e. if there are things to run for\ntriggerer for example)"}, "params_occur": {"heartbeat_callback": [["job", "heartbeat", "heartbeat_callback", "heartbeat_callback", "session", "session"]], "job": [["isinstance", "job", "JobPydantic"], ["job", "latest_heartbeat", "job", "heartrate"], ["seconds_remaining", "job", "heartrate", "timezone", "utcnow", "job", "latest_heartbeat", "total_seconds"], ["job", "heartbeat", "heartbeat_callback", "heartbeat_callback", "session", "session"]], "only_if_necessary": [["seconds_remaining", "only_if_necessary"]]}, "params_p": {"args": [], "heartbeat_callback": [["str", 0.4412781834682647], ["List[Dict[str, Any]]", 0.11506275115728064], ["Optional[str]", 0.10141395329717415], ["List[List[Any]]", 0.08188050839052445], ["x509_pki.models.Certificate", 0.07277298102096645]], "job": [["cmk.utils.type_defs.HostName", 0.11568001927052711], ["Optional[cmk.utils.type_defs.HostAddress]", 0.11568001927052711]], "kwargs": [], "only_if_necessary": [["int", 0.30000000000000004], ["Callable", 0.2], ["models.Question", 0.1], ["str", 0.1]]}, "q_name": "perform_heartbeat", "ret_exprs": ["return"], "ret_type": "None", "ret_type_p": [["Union[tuple, list]", 0.12326783261663934], ["List[int]", 0.09124591253820835], ["Dict[str, Any]", 0.08769568774684897], ["base.ConfigOptions", 0.08769568774684897], ["str", 0.08682447752895113]], "variables": {"seconds_remaining": ""}, "variables_p": {"seconds_remaining": [["float", 0.9999999999999999]]}}], "imports": ["__future__", "annotations", "functools", "cached_property", "time", "sleep", "typing", "Callable", "NoReturn", "sqlalchemy", "Column", "Index", "Integer", "String", "case", "select", "sqlalchemy", "exc", "OperationalError", "sqlalchemy", "orm", "backref", "foreign", "relationship", "sqlalchemy", "orm", "session", "Session", "make_transient", "airflow", "configuration", "conf", "airflow", "exceptions", "AirflowException", "airflow", "executors", "executor_loader", "ExecutorLoader", "airflow", "listeners", "listener", "get_listener_manager", "airflow", "models", "base", "ID_LEN", "Base", "airflow", "serialization", "pydantic", "job", "JobPydantic", "airflow", "stats", "Stats", "airflow", "utils", "timezone", "airflow", "utils", "helpers", "convert_camel_to_snake", "airflow", "utils", "log", "logging_mixin", "LoggingMixin", "airflow", "utils", "net", "get_hostname", "airflow", "utils", "platform", "getuser", "airflow", "utils", "session", "NEW_SESSION", "create_session", "provide_session", "airflow", "utils", "sqlalchemy", "UtcDateTime", "airflow", "utils", "state", "State", "airflow", "models", "dagrun", "DagRun"], "mod_var_ln": {}, "mod_var_occur": {}, "no_types_annot": {"D": 25, "I": 0, "U": 42}, "session_id": "Psi4Tpw7kS3VR28gQJhEPiuoRgmggKlg1eOBxXiu7Qk", "set": null, "tc": [false, null], "type_annot_cove": 0.37, "typed_seq": "", "untyped_seq": "", "variables": {}, "variables_p": {}}}