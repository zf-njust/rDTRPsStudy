{"error": null, "response": {"classes": [{"cls_lc": [[133, 0], [154, 13]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[143, 4], [147, 24]], "fn_var_ln": {"name": [[146, 8], [146, 17]], "otel_logger": [[145, 8], [145, 24]], "tags": [[147, 8], [147, 17]]}, "fn_var_occur": {"name": [["self", "name", "name"]], "otel_logger": [["self", "otel_logger", "otel_logger"]], "tags": [["self", "tags", "tags"]]}, "name": "__init__", "params": {"name": "str | None", "otel_logger": "SafeOtelLogger", "self": "", "tags": "opentelemetry.util.types.Attributes"}, "params_descr": {"name": "", "otel_logger": "", "self": "", "tags": ""}, "params_occur": {"name": [["self", "name", "name"]], "otel_logger": [["self", "otel_logger", "otel_logger"]], "self": [["self", "otel_logger", "otel_logger"], ["self", "name", "name"], ["self", "tags", "tags"]], "tags": [["self", "tags", "tags"]]}, "params_p": {"args": [], "kwargs": [], "name": [["str", 0.5094906840482367], ["Optional[str]", 0.2639499875481972]], "otel_logger": [["bool", 0.31055556996362593], ["Dict[str, Any]", 0.19253910748599498], ["str", 0.18634975258675313], ["int", 0.12420581737687279], ["Optional[str]", 0.09317487629337656], ["Optional[List[str]]", 0.09317487629337656]], "self": [], "tags": [["str", 0.4244921738906772], ["Optional[str]", 0.3791632495482978], ["bool", 0.10017259029604149]]}, "q_name": "_OtelTimer.__init__", "ret_exprs": [], "ret_type": "", "variables": {"name": "", "otel_logger": "", "tags": ""}, "variables_p": {"name": [["str", 0.9999999999637337], ["Dict[str, str]", 3.626623568486625e-11]], "otel_logger": [["logging.Logger", 0.8872528540896172], ["List[str]", 0.11274714591038265]], "tags": [["str", 0.6548051364748938], ["List[str]", 0.24673178911471083], ["Set[str]", 0.0984630744103954]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[149, 4], [154, 13]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "stop", "params": {"self": "", "send": "builtins.bool"}, "params_descr": {"self": "", "send": ""}, "params_occur": {"self": [["self", "name", "send"], ["self", "otel_logger", "metrics_map", "set_gauge_value", "full_name", "prefix", "self", "otel_logger", "prefix", "name", "self", "name", "self", "duration", "False", "self", "tags"]], "send": [["super", "stop", "send"], ["self", "name", "send"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "send": [["bool", 0.0916429697458323], ["Hashable", 0.09070277906384448]]}, "q_name": "_OtelTimer.stop", "ret_exprs": [], "ret_type": "None", "variables": {}, "variables_p": {}}], "name": "_OtelTimer", "q_name": "_OtelTimer", "variables": {}, "variables_p": {}}, {"cls_lc": [[157, 0], [279, 43]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[160, 4], [170, 49]], "fn_var_ln": {"meter": [[169, 8], [169, 18]], "metrics_map": [[170, 8], [170, 24]], "metrics_validator": [[168, 8], [168, 30]], "otel": [[166, 8], [166, 17]], "prefix": [[167, 8], [167, 19]]}, "fn_var_occur": {"meter": [["self", "meter", "otel_provider", "get_meter", "__name__"], ["self", "metrics_map", "MetricsMap", "self", "meter"]], "metrics_map": [["self", "metrics_map", "MetricsMap", "self", "meter"]], "metrics_validator": [["self", "metrics_validator", "allow_list_validator"]], "otel": [["self", "otel", "typing", "Callable", "otel_provider"]], "prefix": [["self", "prefix", "builtins", "str", "prefix"]]}, "name": "__init__", "params": {"allow_list_validator": "", "otel_provider": "", "prefix": "builtins.str", "self": ""}, "params_descr": {"allow_list_validator": "", "otel_provider": "", "prefix": "", "self": ""}, "params_occur": {"allow_list_validator": [["self", "metrics_validator", "allow_list_validator"]], "otel_provider": [["self", "otel", "typing", "Callable", "otel_provider"], ["self", "meter", "otel_provider", "get_meter", "__name__"]], "prefix": [["self", "prefix", "builtins", "str", "prefix"]], "self": [["self", "otel", "typing", "Callable", "otel_provider"], ["self", "prefix", "builtins", "str", "prefix"], ["self", "metrics_validator", "allow_list_validator"], ["self", "meter", "otel_provider", "get_meter", "__name__"], ["self", "metrics_map", "MetricsMap", "self", "meter"]]}, "params_p": {"allow_list_validator": [["bool", 0.18791028887668113], ["bytes", 0.12279349487180491], ["List[Tuple[str, int]]", 0.08222757926943909], ["\"Mat\"", 0.08187064695249367]], "args": [], "kwargs": [], "otel_provider": [["Optional[Callable[..., Any]]", 0.18263086448298887], ["Callable", 0.08432975345511075], ["float", 0.08015764350598631], ["mypy.types.Instance", 0.07945163895084832]], "prefix": [["str", 0.3192539165965512], ["bool", 0.17828612096925026], ["random.Random", 0.10879508646195321], ["int", 0.10756919961853154], ["Union[int, float]", 0.09604576913835759]], "self": []}, "q_name": "SafeOtelLogger.__init__", "ret_exprs": [], "ret_type": "", "variables": {"meter": "", "metrics_map": "", "metrics_validator": "", "otel": "typing.Callable", "prefix": "builtins.str"}, "variables_p": {"meter": [["DefaultDict[Any, List[Any]]", 0.21427191838824158], ["Dict[str, Any]", 0.18846893166821152], ["list", 0.12417186413585725], ["dict", 0.09811402698103938]], "metrics_map": [["float", 0.29999999999999993], ["str", 0.19999999999999996], ["int", 0.19999999999999996], ["Dict[str, str]", 0.09999999999999998]], "metrics_validator": [["int", 0.414733455290746], ["str", 0.3018273071012067], ["float", 0.09058184543397259]], "otel": [["dict", 0.7999999999999999], ["Deque", 0.1], ["list", 0.1]], "prefix": [["str", 1.0000000000000002]]}}, {"docstring": {"func": "Increment stat by count.", "long_descr": null, "ret": null}, "fn_lc": [[172, 4], [196, 26]], "fn_var_ln": {"counter": [[194, 12], [194, 19]]}, "fn_var_occur": {"counter": [["counter", "self", "metrics_map", "get_counter", "full_name", "prefix", "self", "prefix", "name", "stat", "attributes", "tags"], ["counter", "add", "count", "attributes", "tags"]]}, "name": "incr", "params": {"count": "builtins.int", "rate": "builtins.float", "self": "", "stat": "builtins.str", "tags": "opentelemetry.util.types.Attributes"}, "params_descr": {"count": "A positive integer to add to the current value of stat.", "rate": "value between 0 and 1 that represents the sample rate at\nwhich the metric is going to be emitted.", "self": "", "stat": "The name of the stat to increment.", "tags": "Tags to append to the stat."}, "params_occur": {"count": [["counter", "add", "count", "attributes", "tags"]], "rate": [["_skip_due_to_rate", "rate"]], "self": [["self", "metrics_validator", "test", "stat", "name_is_otel_safe", "self", "prefix", "stat"], ["counter", "self", "metrics_map", "get_counter", "full_name", "prefix", "self", "prefix", "name", "stat", "attributes", "tags"]], "stat": [["self", "metrics_validator", "test", "stat", "name_is_otel_safe", "self", "prefix", "stat"], ["counter", "self", "metrics_map", "get_counter", "full_name", "prefix", "self", "prefix", "name", "stat", "attributes", "tags"]], "tags": [["counter", "self", "metrics_map", "get_counter", "full_name", "prefix", "self", "prefix", "name", "stat", "attributes", "tags"], ["counter", "add", "count", "attributes", "tags"]]}, "params_p": {"args": [], "count": [["Set[T]", 0.19631743458167109], ["KT", 0.12649926419158908], ["str", 0.09592855385643052], ["bytes", 0.09442329782068562], ["int", 0.08807305822725232]], "kwargs": [], "rate": [["str", 0.467472803160633], ["float", 0.10107401540842902], ["int", 0.09661250378382556], ["[str]", 0.0939298630083327]], "self": [], "stat": [["str", 0.36216131788861256], ["Union[str, BinaryIO]", 0.084441349725415]], "tags": [["Dict[str, str]", 0.11452926537019556], ["Dict[str, Any]", 0.09693283225776478]]}, "q_name": "SafeOtelLogger.incr", "ret_exprs": ["return", "return counter"], "ret_type": "", "ret_type_p": [["Union[tuple, list]", 0.12326783261663934], ["List[int]", 0.09124591253820835], ["Dict[str, Any]", 0.08769568774684897], ["str", 0.08682447752895113]], "variables": {"counter": ""}, "variables_p": {"counter": [["str", 0.17023403278652308], ["Set[str]", 0.10975611360916229], ["Union[Literal, Literal]", 0.09565722301676766], ["Dict[str, str]", 0.09225245843624395]]}}, {"docstring": {"func": "Decrement stat by count.", "long_descr": null, "ret": null}, "fn_lc": [[198, 4], [222, 26]], "fn_var_ln": {"counter": [[220, 12], [220, 19]]}, "fn_var_occur": {"counter": [["counter", "self", "metrics_map", "get_counter", "full_name", "prefix", "self", "prefix", "name", "stat"], ["counter", "add", "count", "attributes", "tags"]]}, "name": "decr", "params": {"count": "builtins.int", "rate": "builtins.float", "self": "", "stat": "builtins.str", "tags": "opentelemetry.util.types.Attributes"}, "params_descr": {"count": "A positive integer to subtract from current value of stat.", "rate": "value between 0 and 1 that represents the sample rate at\nwhich the metric is going to be emitted.", "self": "", "stat": "The name of the stat to decrement.", "tags": "Tags to append to the stat."}, "params_occur": {"count": [["counter", "add", "count", "attributes", "tags"]], "rate": [["_skip_due_to_rate", "rate"]], "self": [["self", "metrics_validator", "test", "stat", "name_is_otel_safe", "self", "prefix", "stat"], ["counter", "self", "metrics_map", "get_counter", "full_name", "prefix", "self", "prefix", "name", "stat"]], "stat": [["self", "metrics_validator", "test", "stat", "name_is_otel_safe", "self", "prefix", "stat"], ["counter", "self", "metrics_map", "get_counter", "full_name", "prefix", "self", "prefix", "name", "stat"]], "tags": [["counter", "add", "count", "attributes", "tags"]]}, "params_p": {"args": [], "count": [["Set[T]", 0.19631743458167109], ["KT", 0.12649926419158908], ["str", 0.09592855385643052], ["bytes", 0.09442329782068562], ["int", 0.08807305822725232]], "kwargs": [], "rate": [["str", 0.467472803160633], ["float", 0.10107401540842902], ["int", 0.09661250378382556], ["[str]", 0.0939298630083327]], "self": [], "stat": [["str", 0.5291984311452584]], "tags": [["Set[T]", 0.19631743458167109], ["KT", 0.12649926419158908], ["str", 0.09592855385643052], ["bytes", 0.09442329782068562], ["int", 0.08807305822725232]]}, "q_name": "SafeOtelLogger.decr", "ret_exprs": ["return", "return counter"], "ret_type": "", "ret_type_p": [["Union[tuple, list]", 0.12326783261663934], ["List[int]", 0.09124591253820835], ["Dict[str, Any]", 0.08769568774684897], ["str", 0.08682447752895113]], "variables": {"counter": ""}, "variables_p": {"counter": [["str", 0.17090585570161626], ["Set[str]", 0.10456157301051697], ["Dict[str, str]", 0.09677127089289866], ["Dict[str, Union[Any, Any]]", 0.09648412444262032]]}}, {"docstring": {"func": "Record a new value for a Gauge.", "long_descr": null, "ret": null}, "fn_lc": [[224, 4], [256, 106]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "gauge", "params": {"back_compat_name": "builtins.str", "delta": "builtins.bool", "rate": "builtins.float", "self": "", "stat": "builtins.str", "tags": "opentelemetry.util.types.Attributes", "value": "int | float"}, "params_descr": {"back_compat_name": "If an alternative name is provided, the\nstat will be emitted using both names if possible.", "delta": "If true, the provided value will be added to the previous value.\nIf False the new value will override the previous.", "rate": "value between 0 and 1 that represents the sample rate at\nwhich the metric is going to be emitted.", "self": "", "stat": "The name of the stat to update.", "tags": "Tags to append to the stat.", "value": "The new value of stat, either a float or an int."}, "params_occur": {"back_compat_name": [["back_compat_name", "self", "metrics_validator", "test", "back_compat_name"], ["self", "metrics_map", "set_gauge_value", "full_name", "prefix", "self", "prefix", "name", "back_compat_name", "value", "delta", "tags"]], "delta": [["self", "metrics_map", "set_gauge_value", "full_name", "prefix", "self", "prefix", "name", "back_compat_name", "value", "delta", "tags"], ["self", "metrics_map", "set_gauge_value", "full_name", "prefix", "self", "prefix", "name", "stat", "value", "delta", "tags"]], "rate": [["_skip_due_to_rate", "rate"]], "self": [["back_compat_name", "self", "metrics_validator", "test", "back_compat_name"], ["self", "metrics_map", "set_gauge_value", "full_name", "prefix", "self", "prefix", "name", "back_compat_name", "value", "delta", "tags"], ["self", "metrics_validator", "test", "stat"], ["self", "metrics_map", "set_gauge_value", "full_name", "prefix", "self", "prefix", "name", "stat", "value", "delta", "tags"]], "stat": [["self", "metrics_validator", "test", "stat"], ["self", "metrics_map", "set_gauge_value", "full_name", "prefix", "self", "prefix", "name", "stat", "value", "delta", "tags"]], "tags": [["self", "metrics_map", "set_gauge_value", "full_name", "prefix", "self", "prefix", "name", "back_compat_name", "value", "delta", "tags"], ["self", "metrics_map", "set_gauge_value", "full_name", "prefix", "self", "prefix", "name", "stat", "value", "delta", "tags"]], "value": [["self", "metrics_map", "set_gauge_value", "full_name", "prefix", "self", "prefix", "name", "back_compat_name", "value", "delta", "tags"], ["self", "metrics_map", "set_gauge_value", "full_name", "prefix", "self", "prefix", "name", "stat", "value", "delta", "tags"]]}, "params_p": {"args": [], "back_compat_name": [["str", 0.4158344527922645], ["Iterable", 0.24563918921520045], ["Optional[bytes]", 0.08310999466365959]], "delta": [["str", 0.3060210060045061], ["Optional[Dict[str, Any]]", 0.10041634422734942], ["Optional[List[str]]", 0.09892710829469074], ["Optional[str]", 0.09892710829469074]], "kwargs": [], "rate": [["bool", 0.35052017001125013], ["Union[None, int, str]", 0.18467224072564487], ["Optional[str]", 0.09233612036282243], ["Optional[List[str]]", 0.07826912134207922]], "self": [], "stat": [["str", 0.300502324798935], ["Optional[bool]", 0.19404851703668297], ["Resource", 0.10645380776225206], ["Optional[str]", 0.1026626675122482], ["List[str]", 0.09702425851834148]], "tags": [["str", 0.3060210060045061], ["Optional[Dict[str, Any]]", 0.10041634422734942], ["Optional[List[str]]", 0.09892710829469074], ["Optional[str]", 0.09892710829469074]], "value": [["str", 0.3060210060045061], ["Optional[Dict[str, Any]]", 0.10041634422734942], ["Optional[List[str]]", 0.09892710829469074], ["Optional[str]", 0.09892710829469074]]}, "q_name": "SafeOtelLogger.gauge", "ret_exprs": ["return"], "ret_type": "None", "ret_type_p": [["Union[tuple, list]", 0.12326783261663934], ["List[int]", 0.09124591253820835], ["Dict[str, Any]", 0.08769568774684897], ["str", 0.08682447752895113]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "OTel does not have a native timer, stored as a Gauge whose value is number of seconds elapsed.", "long_descr": null, "ret": null}, "fn_lc": [[258, 4], [269, 110]], "fn_var_ln": {"dt": [[268, 16], [268, 18]]}, "fn_var_occur": {"dt": [["isinstance", "dt", "datetime", "timedelta"], ["dt", "dt", "total_seconds"], ["self", "metrics_map", "set_gauge_value", "full_name", "prefix", "self", "prefix", "name", "stat", "float", "dt", "False", "tags"]]}, "name": "timing", "params": {"dt": "airflow.metrics.protocols.DeltaType", "self": "", "stat": "builtins.str", "tags": "opentelemetry.util.types.Attributes"}, "params_descr": {"dt": "", "self": "", "stat": "", "tags": ""}, "params_occur": {"dt": [["isinstance", "dt", "datetime", "timedelta"], ["dt", "dt", "total_seconds"], ["self", "metrics_map", "set_gauge_value", "full_name", "prefix", "self", "prefix", "name", "stat", "float", "dt", "False", "tags"]], "self": [["self", "metrics_validator", "test", "stat", "name_is_otel_safe", "self", "prefix", "stat"], ["self", "metrics_map", "set_gauge_value", "full_name", "prefix", "self", "prefix", "name", "stat", "float", "dt", "False", "tags"]], "stat": [["self", "metrics_validator", "test", "stat", "name_is_otel_safe", "self", "prefix", "stat"], ["self", "metrics_map", "set_gauge_value", "full_name", "prefix", "self", "prefix", "name", "stat", "float", "dt", "False", "tags"]], "tags": [["self", "metrics_map", "set_gauge_value", "full_name", "prefix", "self", "prefix", "name", "stat", "float", "dt", "False", "tags"]]}, "params_p": {"args": [], "dt": [["datetime.datetime", 0.5372177003715911], ["Optional[datetime.date]", 0.18978064569144534], ["datetime.timedelta", 0.0988702124587218], ["datetime.date", 0.08830961074279618], ["float", 0.08582183073544551]], "kwargs": [], "self": [], "stat": [["str", 0.38889670965295436], ["List[str]", 0.14034468625219076], ["dict", 0.10978978712814001], ["bytes", 0.09843195741712393]], "tags": [["str", 0.7831953105884017], ["bool", 0.1265783321469562], ["Optional[str]", 0.09022635726464207]]}, "q_name": "SafeOtelLogger.timing", "ret_exprs": [], "ret_type": "None", "variables": {"dt": ""}, "variables_p": {"dt": [["datetime.datetime.datetime", 0.5697445417640127], ["datetime.timedelta", 0.19465957891063435], ["datetime.datetime.timedelta", 0.08360945494045778], ["datetime.date.time.datetime", 0.07638165311056186], ["datetime.date.time.date", 0.07560477127433347]]}}, {"docstring": {"func": "Timer context manager returns the duration and can be cancelled.", "long_descr": null, "ret": null}, "fn_lc": [[271, 4], [279, 43]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "timer", "params": {"args": "", "kwargs": "", "self": "", "stat": "str | None", "tags": "opentelemetry.util.types.Attributes"}, "params_descr": {"args": "", "kwargs": "", "self": "", "stat": "", "tags": ""}, "params_occur": {"args": [], "kwargs": [], "self": [["_OtelTimer", "self", "stat", "tags"]], "stat": [["_OtelTimer", "self", "stat", "tags"]], "tags": [["_OtelTimer", "self", "stat", "tags"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "stat": [["str", 0.6060973479342924], ["Optional[str]", 0.10045354468797703], ["List[str]", 0.10045354468797703], ["Iterable[str]", 0.09976412264003506]], "tags": [["str", 0.6060973479342924], ["Optional[str]", 0.10045354468797703], ["List[str]", 0.10045354468797703], ["Iterable[str]", 0.09976412264003506]]}, "q_name": "SafeOtelLogger.timer", "ret_exprs": ["return _OtelTimer(self, stat, tags)"], "ret_type": "airflow.metrics.protocols.TimerProtocol", "ret_type_p": [["str", 0.5358244971672437], ["denite.util.UserContext", 0.09855391594841076]], "variables": {}, "variables_p": {}}], "name": "SafeOtelLogger", "q_name": "SafeOtelLogger", "variables": {}, "variables_p": {}}, {"cls_lc": [[282, 0], [382, 34]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[285, 4], [287, 21]], "fn_var_ln": {"map": [[287, 8], [287, 16]], "meter": [[286, 8], [286, 18]]}, "fn_var_occur": {"map": [["self", "map"]], "meter": [["self", "meter", "meter"]]}, "name": "__init__", "params": {"meter": "", "self": ""}, "params_descr": {"meter": "", "self": ""}, "params_occur": {"meter": [["self", "meter", "meter"]], "self": [["self", "meter", "meter"], ["self", "map"]]}, "params_p": {"args": [], "kwargs": [], "meter": [["int", 0.3], ["bool", 0.09999999999999999], ["apistar.types.RouteConfig", 0.09999999999999999], ["float", 0.09999999999999999]], "self": []}, "q_name": "MetricsMap.__init__", "ret_exprs": [], "ret_type": "", "variables": {"map": "", "meter": ""}, "variables_p": {"map": [["str", 0.30000000000000004], ["Dict[str, Any]", 0.1], ["dict", 0.1], ["int", 0.1]], "meter": [["str", 0.30000000000000004], ["Dict[str, Any]", 0.1], ["dict", 0.1], ["int", 0.1]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[289, 4], [290, 24]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "clear", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "map", "clear"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "MetricsMap.clear", "ret_exprs": [], "ret_type": "None", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Creates a new counter or up_down_counter for the provided name.", "long_descr": null, "ret": null}, "fn_lc": [[292, 4], [302, 22]], "fn_var_ln": {"counter": [[299, 12], [299, 19]], "otel_safe_name": [[294, 8], [294, 22]]}, "fn_var_occur": {"counter": [["counter", "self", "meter", "create_up_down_counter", "name", "otel_safe_name"], ["counter", "self", "meter", "create_counter", "name", "otel_safe_name"], ["logging", "debug", "otel_safe_name", "_type_as_str", "counter"]], "otel_safe_name": [["otel_safe_name", "_get_otel_safe_name", "name"], ["counter", "self", "meter", "create_up_down_counter", "name", "otel_safe_name"], ["counter", "self", "meter", "create_counter", "name", "otel_safe_name"], ["logging", "debug", "otel_safe_name", "_type_as_str", "counter"]]}, "name": "_create_counter", "params": {"name": "", "self": ""}, "params_descr": {"name": "", "self": ""}, "params_occur": {"name": [["otel_safe_name", "_get_otel_safe_name", "name"], ["_is_up_down_counter", "name"], ["counter", "self", "meter", "create_up_down_counter", "name", "otel_safe_name"], ["counter", "self", "meter", "create_counter", "name", "otel_safe_name"]], "self": [["counter", "self", "meter", "create_up_down_counter", "name", "otel_safe_name"], ["counter", "self", "meter", "create_counter", "name", "otel_safe_name"]]}, "params_p": {"args": [], "kwargs": [], "name": [["str", 0.7116652630737247], ["Optional[str]", 0.10130058722144185], ["Dict[str, str]", 0.08498249763555826]], "self": []}, "q_name": "MetricsMap._create_counter", "ret_exprs": ["return counter"], "ret_type": "", "ret_type_p": [["bool", 0.5], ["float", 0.1]], "variables": {"counter": "", "otel_safe_name": ""}, "variables_p": {"counter": [["List[str]", 0.32107519828496883], ["Dict[str, List[str]]", 0.2265692602789138], ["dict", 0.1809965255538529], ["str", 0.1768530778762093], ["Dict[str, list]", 0.09450593800605504]], "otel_safe_name": [["List[str]", 0.294137477967772], ["str", 0.27233433075669045], ["Set[str]", 0.26923867876475177], ["Tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str]", 0.08699685811833412]]}}, {"docstring": {"func": "Returns the counter; creates a new one if it did not exist.", "long_descr": null, "ret": null}, "fn_lc": [[304, 4], [317, 30]], "fn_var_ln": {"key": [[311, 8], [311, 11]], "new_counter": [[315, 12], [315, 23]]}, "fn_var_occur": {"key": [["key", "_generate_key_name", "name", "attributes"], ["key", "self", "map", "keys"], ["self", "map", "key"], ["self", "map", "key", "new_counter"]], "new_counter": [["new_counter", "self", "_create_counter", "name"], ["self", "map", "key", "new_counter"]]}, "name": "get_counter", "params": {"attributes": "opentelemetry.util.types.Attributes", "name": "builtins.str", "self": ""}, "params_descr": {"attributes": "Counter attributes, used to generate a unique key to store the counter.", "name": "The name of the counter to fetch or create.", "self": ""}, "params_occur": {"attributes": [["key", "_generate_key_name", "name", "attributes"]], "name": [["key", "_generate_key_name", "name", "attributes"], ["new_counter", "self", "_create_counter", "name"]], "self": [["key", "self", "map", "keys"], ["self", "map", "key"], ["new_counter", "self", "_create_counter", "name"], ["self", "map", "key", "new_counter"]]}, "params_p": {"args": [], "attributes": [["str", 0.6691586967223138], ["Container[str]", 0.23783822159752058], ["Optional[str]", 0.09300308168016574]], "kwargs": [], "name": [["str", 0.5592030109920865], ["Dict[str, str]", 0.12098428854276645], ["List[str]", 0.11139931164386437], ["int", 0.10478085459198795]], "self": []}, "q_name": "MetricsMap.get_counter", "ret_exprs": ["return self.map[key]", "return new_counter"], "ret_type": "", "ret_type_p": [["str", 0.43230822646132294], ["bool", 0.10467493577616557], ["Deque[str]", 0.09227890068885233]], "variables": {"key": "", "new_counter": ""}, "variables_p": {"key": [["str", 0.4298848547667507], ["Dict[Any, str]", 0.1675308951627772], ["Tuple[str]", 0.12659588023372698], ["Tuple[Any, Any, Any, Any]", 0.08720252131057675]], "new_counter": [["dict", 0.3171636340404347], ["int", 0.1035004063700345], ["Dict[Tuple[Any, Any], Any]", 0.0938287217120181]]}}, {"docstring": {"func": "Deletes a counter.", "long_descr": null, "ret": null}, "fn_lc": [[319, 4], [328, 29]], "fn_var_ln": {"key": [[326, 8], [326, 11]]}, "fn_var_occur": {"key": [["key", "_generate_key_name", "name", "attributes"], ["key", "self", "map", "keys"], ["self", "map", "key"]]}, "name": "del_counter", "params": {"attributes": "opentelemetry.util.types.Attributes", "name": "builtins.str", "self": ""}, "params_descr": {"attributes": "Counter attributes which were used to generate a unique key to store the counter.", "name": "The name of the counter to delete.", "self": ""}, "params_occur": {"attributes": [["key", "_generate_key_name", "name", "attributes"]], "name": [["key", "_generate_key_name", "name", "attributes"]], "self": [["key", "self", "map", "keys"], ["self", "map", "key"]]}, "params_p": {"args": [], "attributes": [["str", 0.38769452038222185], ["Container[str]", 0.2254198878551716], ["Optional[str]", 0.19678845571562684], ["Sequence[str]", 0.09012564576886006]], "kwargs": [], "name": [["str", 0.38769452038222185], ["Container[str]", 0.2254198878551716], ["Optional[str]", 0.19678845571562684], ["Sequence[str]", 0.09012564576886006]], "self": []}, "q_name": "MetricsMap.del_counter", "ret_exprs": [], "ret_type": "None", "variables": {"key": ""}, "variables_p": {"key": [["str", 0.48815860279225937], ["Tuple[str]", 0.11897480369690162], ["Tuple[Any, Any, Any, Any]", 0.09588181016108702], ["Dict[Any, str]", 0.09148972929774098], ["list", 0.08666375940707138]]}}, {"docstring": {"func": "Overrides the last reading for a Gauge with a new value.", "long_descr": null, "ret": "None"}, "fn_lc": [[330, 4], [346, 52]], "fn_var_ln": {"key": [[340, 8], [340, 11]], "new_value": [[341, 8], [341, 17]], "old_value": [[342, 8], [342, 17]]}, "fn_var_occur": {"key": [["key", "builtins", "str", "_generate_key_name", "name", "tags"], ["self", "map", "key", "Observation", "new_value", "tags"]], "new_value": [["new_value", "value", "DEFAULT_GAUGE_VALUE"], ["new_value", "old_value"], ["self", "map", "key", "Observation", "new_value", "tags"]], "old_value": [["old_value", "self", "poke_gauge", "name", "tags"], ["new_value", "old_value"]]}, "name": "set_gauge_value", "params": {"delta": "builtins.bool", "name": "builtins.str", "self": "", "tags": "opentelemetry.util.types.Attributes", "value": "float | None"}, "params_descr": {"delta": "If True, value is added to the previous reading, else it overrides.", "name": "The name of the gauge to record.", "self": "", "tags": "Gauge attributes which were used to generate a unique key to store the counter.", "value": "The new reading to record."}, "params_occur": {"delta": [], "name": [["key", "builtins", "str", "_generate_key_name", "name", "tags"], ["old_value", "self", "poke_gauge", "name", "tags"]], "self": [["old_value", "self", "poke_gauge", "name", "tags"], ["self", "map", "key", "Observation", "new_value", "tags"]], "tags": [["key", "builtins", "str", "_generate_key_name", "name", "tags"], ["old_value", "self", "poke_gauge", "name", "tags"], ["self", "map", "key", "Observation", "new_value", "tags"]], "value": [["new_value", "value", "DEFAULT_GAUGE_VALUE"]]}, "params_p": {"args": [], "delta": [["str", 0.590390440163135], ["Callable[[], float]", 0.11490499694069613], ["List[str]", 0.10578610083758049], ["bool", 0.09537924113010883], ["Callable[[str, Any], None]", 0.0935392209284793]], "kwargs": [], "name": [["str", 1.0]], "self": [], "tags": [["str", 0.9999999999999998]], "value": [["int", 0.2812357465449969], ["bool", 0.11786225314008167], ["float", 0.09417586555962472], ["str", 0.09352571161077829], ["Iterable", 0.09339908805075095]]}, "q_name": "MetricsMap.set_gauge_value", "ret_exprs": [], "ret_type": "", "variables": {"key": "builtins.str", "new_value": "", "old_value": ""}, "variables_p": {"key": [["str", 1.0]], "new_value": [["str", 0.2058213665636658], ["Dict[str, str]", 0.13222063246702248], ["venv.Lib.site-packages.mypy.types.Instance", 0.09501932713725754], ["tuple", 0.0898883641102348], ["qcodes.configuration.config.DotDict", 0.08620682157487237]], "old_value": [["str", 0.19953744021894843], ["Type[bytes]", 0.1110536673185868], ["List[str]", 0.10619785232751466], ["Dict[int, str]", 0.10255525291944298], ["property", 0.09521826517983074], ["Dict[str, Union[Any, Any, Any, Any]]", 0.09336471677437165], ["Dict[Tuple[str, str], str]", 0.09309758373899038]]}}, {"docstring": {"func": "Creates a new Observable Gauge with the provided name and the default value.", "long_descr": null, "ret": null}, "fn_lc": [[348, 4], [364, 20]], "fn_var_ln": {"gauge": [[358, 8], [358, 13]], "key": [[356, 8], [356, 11]], "otel_safe_name": [[355, 8], [355, 22]]}, "fn_var_occur": {"gauge": [["gauge", "self", "meter", "create_observable_gauge", "name", "otel_safe_name", "callbacks", "partial", "self", "read_gauge", "_generate_key_name", "name", "attributes"]], "key": [["key", "_generate_key_name", "name", "attributes"], ["self", "map", "key", "Observation", "DEFAULT_GAUGE_VALUE", "attributes"]], "otel_safe_name": [["otel_safe_name", "_get_otel_safe_name", "name"], ["gauge", "self", "meter", "create_observable_gauge", "name", "otel_safe_name", "callbacks", "partial", "self", "read_gauge", "_generate_key_name", "name", "attributes"]]}, "name": "_create_gauge", "params": {"attributes": "opentelemetry.util.types.Attributes", "name": "builtins.str", "self": ""}, "params_descr": {"attributes": "Gauge attributes, used to generate a unique key to store the gauge.", "name": "The name of the gauge to fetch or create.", "self": ""}, "params_occur": {"attributes": [["key", "_generate_key_name", "name", "attributes"], ["gauge", "self", "meter", "create_observable_gauge", "name", "otel_safe_name", "callbacks", "partial", "self", "read_gauge", "_generate_key_name", "name", "attributes"], ["self", "map", "key", "Observation", "DEFAULT_GAUGE_VALUE", "attributes"]], "name": [["otel_safe_name", "_get_otel_safe_name", "name"], ["key", "_generate_key_name", "name", "attributes"], ["gauge", "self", "meter", "create_observable_gauge", "name", "otel_safe_name", "callbacks", "partial", "self", "read_gauge", "_generate_key_name", "name", "attributes"]], "self": [["gauge", "self", "meter", "create_observable_gauge", "name", "otel_safe_name", "callbacks", "partial", "self", "read_gauge", "_generate_key_name", "name", "attributes"], ["self", "map", "key", "Observation", "DEFAULT_GAUGE_VALUE", "attributes"]]}, "params_p": {"args": [], "attributes": [["str", 0.4086655962620557], ["Optional[str]", 0.1958144812511169], ["bytes", 0.1039512836414294], ["bool", 0.09720810757489054], ["int", 0.09076266808675237]], "kwargs": [], "name": [["str", 0.7112659684200662]], "self": []}, "q_name": "MetricsMap._create_gauge", "ret_exprs": ["return gauge"], "ret_type": "", "ret_type_p": [["bool", 0.5], ["float", 0.1]], "variables": {"gauge": "", "key": "", "otel_safe_name": ""}, "variables_p": {"gauge": [["str", 0.36639106780000774], ["Dict[str, str]", 0.27519875449855064], ["float", 0.17602710518714804], ["Callable(chr)[[int], str]", 0.09978461993631292], ["list", 0.08259845257798061]], "key": [["str", 0.5819872500694728], ["Tuple[Type[str], Type[bytes]]", 0.08665260092890573], ["Dict[str, List[str]]", 0.08111789076088237]], "otel_safe_name": [["str", 0.3059804764269306], ["Set[str]", 0.19658285208823045], ["Tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str]", 0.14145205781376627], ["Dict[str, str]", 0.08785090447813723], ["List[str]", 0.08692723157521023], ["set", 0.08334623043238312]]}}, {"docstring": {"func": "Callback for the Observable Gauges, returns the Observation for the provided key.", "long_descr": null, "ret": null}, "fn_lc": [[366, 4], [368, 27]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "read_gauge", "params": {"args": "", "key": "builtins.str", "self": ""}, "params_descr": {"args": "", "key": "", "self": ""}, "params_occur": {"args": [], "key": [["self", "map", "key"]], "self": [["self", "map", "key"]]}, "params_p": {"args": [], "key": [["Optional[str]", 0.9999999979631534], ["str", 8.071646809447669e-10], ["tuple", 3.729067702315592e-10], ["Dict[str, str]", 3.622830124507701e-10], ["int", 2.0209331518341324e-10], ["Callable[[KT], VT]", 2.0209331518341324e-10], ["Type[RuntimeError]", 9.030537234531495e-11]], "kwargs": [], "self": []}, "q_name": "MetricsMap.read_gauge", "ret_exprs": [], "ret_type": "typing.Iterable[opentelemetry.metrics.Observation]", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Returns the value of the gauge; creates a new one with the default value if it did not exist.", "long_descr": null, "ret": "The integer or float value last recorded for the provided Gauge name."}, "fn_lc": [[370, 4], [382, 34]], "fn_var_ln": {"key": [[378, 8], [378, 11]]}, "fn_var_occur": {"key": [["key", "_generate_key_name", "name", "attributes"], ["key", "self", "map"], ["self", "map", "key", "value"]]}, "name": "poke_gauge", "params": {"attributes": "opentelemetry.util.types.Attributes", "name": "builtins.str", "self": ""}, "params_descr": {"attributes": "Gauge attributes, used to generate a unique key to store the gauge.", "name": "The name of the gauge to fetch or create.", "self": ""}, "params_occur": {"attributes": [["key", "_generate_key_name", "name", "attributes"], ["self", "_create_gauge", "name", "attributes"]], "name": [["key", "_generate_key_name", "name", "attributes"], ["self", "_create_gauge", "name", "attributes"]], "self": [["key", "self", "map"], ["self", "_create_gauge", "name", "attributes"], ["self", "map", "key", "value"]]}, "params_p": {"args": [], "attributes": [["str", 0.8723106081374908], ["int", 0.1276893918625093]], "kwargs": [], "name": [["str", 0.8723106081374908], ["int", 0.1276893918625093]], "self": []}, "q_name": "MetricsMap.poke_gauge", "ret_exprs": ["return self.map[key].value"], "ret_type": "GaugeValues", "ret_type_p": [["str", 0.1790853359538891], ["datetime", 0.1164221942869997], ["Optional[bool]", 0.10704599475346267], ["float", 0.09925105200793488], ["Optional[float]", 0.09925105200793488], ["dict", 0.0984872946567451], ["List[AnyStr]", 0.08484105195268878]], "variables": {"key": ""}, "variables_p": {"key": [["str", 0.3122803028871236], ["Dict[str, str]", 0.2793273647928884], ["int", 0.1477973222918465], ["List[str]", 0.0902621972964516], ["Tuple[Any, Any, Any, Any]", 0.08709633507955658], ["Set[str]", 0.08323647765213349]]}}], "name": "MetricsMap", "q_name": "MetricsMap", "variables": {}, "variables_p": {}}], "funcs": [{"docstring": {"func": "Assembles the prefix, delimiter, and name and returns it as a string.", "long_descr": null, "ret": null}, "fn_lc": [[68, 0], [70, 59]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "full_name", "params": {"name": "builtins.str", "prefix": "builtins.str"}, "params_descr": {"name": "", "prefix": ""}, "params_occur": {"name": [["prefix", "DEFAULT_METRIC_NAME_DELIMITER", "name"]], "prefix": [["prefix", "DEFAULT_METRIC_NAME_DELIMITER", "name"]]}, "params_p": {"args": [], "kwargs": [], "name": [["str", 0.44483590747395274]], "prefix": [["str", 0.44483590747395274]]}, "q_name": "full_name", "ret_exprs": ["return f\"{prefix}{DEFAULT_METRIC_NAME_DELIMITER}{name}\""], "ret_type": "builtins.str", "ret_type_p": [["str", 0.9026232805348245], ["Optional[str]", 0.09737671946517543]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[73, 0], [74, 35]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "_is_up_down_counter", "params": {"name": ""}, "params_descr": {"name": ""}, "params_occur": {"name": [["name", "UP_DOWN_COUNTERS"]]}, "params_p": {"args": [], "kwargs": [], "name": [["str", 0.9999999969070321], ["type", 1.48505682526194e-09], ["bool", 1.1821888251236845e-09], ["Tuple[str, int]", 4.25722094669426e-10]]}, "q_name": "_is_up_down_counter", "ret_exprs": ["return name in UP_DOWN_COUNTERS"], "ret_type": "", "ret_type_p": [["bool", 0.9999999999999998]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[77, 0], [85, 14]], "fn_var_ln": {"key": [[83, 8], [83, 11]]}, "fn_var_occur": {"key": [["key", "name"], ["key", "item", "item"], ["key", "name"]]}, "name": "_generate_key_name", "params": {"attributes": "opentelemetry.util.types.Attributes", "name": "builtins.str"}, "params_descr": {"attributes": "", "name": ""}, "params_occur": {"attributes": [["attributes", "items"]], "name": [["key", "name"], ["key", "name"]]}, "params_p": {"args": [], "attributes": [["dict", 0.2611634457419487], ["Mapping[str, Dict[str, Any]]", 0.23639797026109147], ["Mapping[str, Any]", 0.1825828613804368], ["Optional[Dict[str, str]]", 0.09155098143661003], ["Iterable[str]", 0.08089828382387136], ["Dict[str, Any]", 0.05878873092710924], ["Mapping[int, str]", 0.04486080646032191]], "kwargs": [], "name": [["str", 0.9065429404855998], ["Optional[str]", 0.09345705951440006]]}, "q_name": "_generate_key_name", "ret_exprs": ["return key"], "ret_type": "", "ret_type_p": [["str", 0.7360140739931464], ["List[str]", 0.14133076090444094], ["bytes", 0.12265516510241262]], "variables": {"key": ""}, "variables_p": {"key": [["str", 0.39886188469595346], ["List[str]", 0.1882407832053144], ["list", 0.10935167850787098], ["Set[str]", 0.08676564571907515], ["List[int]", 0.08383234692421743]]}}, {"docstring": {"func": "Returns True if the provided name and prefix would result in a name that meets the OpenTelemetry standard.", "long_descr": "Legal names are defined here:\nhttps://opentelemetry.io/docs/reference/specification/metrics/api/#instrument-name-syntax", "ret": null}, "fn_lc": [[88, 0], [95, 86]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "name_is_otel_safe", "params": {"name": "builtins.str", "prefix": "builtins.str"}, "params_descr": {"name": "", "prefix": ""}, "params_occur": {"name": [["bool", "stat_name_otel_handler", "prefix", "name", "max_length", "OTEL_NAME_MAX_LENGTH"]], "prefix": [["bool", "stat_name_otel_handler", "prefix", "name", "max_length", "OTEL_NAME_MAX_LENGTH"]]}, "params_p": {"args": [], "kwargs": [], "name": [["str", 0.9041246572518067]], "prefix": [["str", 0.9041246572518067]]}, "q_name": "name_is_otel_safe", "ret_exprs": ["return bool(stat_name_otel_handler(prefix, name, max_length=OTEL_NAME_MAX_LENGTH))"], "ret_type": "builtins.bool", "ret_type_p": [["str", 0.4927922396325625], ["bool", 0.09934720536910449], ["dict", 0.09544515617358351]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Given an OpenTelemetry Instrument, returns the type of the instrument as a string.", "long_descr": null, "ret": "The type() of the Instrument without all the nested class info"}, "fn_lc": [[98, 0], [108, 33]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "_type_as_str", "params": {"obj": "opentelemetry.metrics.Instrument"}, "params_descr": {"obj": "An OTel Instrument or subclass"}, "params_occur": {"obj": [["type", "obj", "__name__"]]}, "params_p": {"args": [], "kwargs": [], "obj": [["mypy.types.Type", 0.2930712794846072], ["dict", 0.10922848306515123], ["int", 0.059943906452836426], ["Dict[str, Any]", 0.059943906452836426]]}, "q_name": "_type_as_str", "ret_exprs": ["return type(obj).__name__[1:]"], "ret_type": "builtins.str", "ret_type_p": [["str", 0.30349077497130506], ["bool", 0.09138863206898824], ["Tuple[str, str]", 0.08993307324788342]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Verifies that the provided name does not exceed OpenTelemetry's maximum length for metric names.", "long_descr": null, "ret": "The name, truncated to an OTel-acceptable length if required."}, "fn_lc": [[111, 0], [124, 25]], "fn_var_ln": {"otel_safe_name": [[118, 4], [118, 18]]}, "fn_var_occur": {"otel_safe_name": [["otel_safe_name", "name", "OTEL_NAME_MAX_LENGTH"], ["name", "otel_safe_name"], ["warnings", "warn", "name", "OTEL_NAME_MAX_LENGTH", "otel_safe_name"]]}, "name": "_get_otel_safe_name", "params": {"name": "builtins.str"}, "params_descr": {"name": "The original metric name"}, "params_occur": {"name": [["otel_safe_name", "name", "OTEL_NAME_MAX_LENGTH"], ["name", "otel_safe_name"], ["warnings", "warn", "name", "OTEL_NAME_MAX_LENGTH", "otel_safe_name"]]}, "params_p": {"args": [], "kwargs": [], "name": [["str", 0.6943511794293546], ["int", 0.12980181403084257], ["apistar.types.KeywordArgs", 0.08966197897471889], ["dict", 0.08618502756508384]]}, "q_name": "_get_otel_safe_name", "ret_exprs": ["return otel_safe_name"], "ret_type": "builtins.str", "ret_type_p": [["type", 0.13525036399589188], ["List[str]", 0.10621471829242665], ["List[Callable]", 0.10328395476403031], ["int", 0.08698245293120396], ["Callable[[str], None]", 0.08551662701575882], ["str", 0.08465134582120401], ["NamedTuple", 0.08421995976842872]], "variables": {"otel_safe_name": ""}, "variables_p": {"otel_safe_name": [["frozenset[Union[Any, Any]]", 0.3549873910885104], ["Pattern[str]", 0.20295033790097766], ["str", 0.1282731216938681], ["List[str]", 0.10963391147199301], ["set", 0.10681513114073636]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[127, 0], [130, 46]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "_skip_due_to_rate", "params": {"rate": "builtins.float"}, "params_descr": {"rate": ""}, "params_occur": {"rate": [["rate", "random", "random", "rate"]]}, "params_p": {"args": [], "kwargs": [], "rate": [["float", 0.675424770577491], ["random.Random", 0.11741038896626518], ["str", 0.05874651869838256], ["List[int]", 0.03793614482831734], ["int", 0.024987005547838798]]}, "q_name": "_skip_due_to_rate", "ret_exprs": ["return rate < 1 and random.random() > rate"], "ret_type": "builtins.bool", "ret_type_p": [["float", 0.30000000000000004], ["int", 0.2], ["Union[bool, None]", 0.1], ["str", 0.1]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[385, 0], [423, 85]], "fn_var_ln": {"allow_list": [[393, 4], [393, 14]], "allow_list_validator": [[394, 4], [394, 24]], "debug": [[391, 4], [391, 9]], "endpoint": [[398, 4], [398, 12]], "export_to_console": [[412, 8], [412, 25]], "host": [[386, 4], [386, 8]], "interval": [[390, 4], [390, 12]], "port": [[387, 4], [387, 8]], "prefix": [[388, 4], [388, 10]], "readers": [[401, 4], [401, 11]], "resource": [[396, 4], [396, 12]]}, "fn_var_occur": {"allow_list": [["allow_list", "conf", "get", "fallback", "None"], ["allow_list_validator", "AllowListValidator", "allow_list"]], "allow_list_validator": [["allow_list_validator", "AllowListValidator", "allow_list"], ["SafeOtelLogger", "metrics", "get_meter_provider", "prefix", "allow_list_validator"]], "debug": [["debug", "conf", "getboolean"]], "endpoint": [["endpoint", "host", "port"], ["logging", "info", "endpoint"], ["readers", "PeriodicExportingMetricReader", "OTLPMetricExporter", "endpoint", "endpoint", "headers", "export_interval_millis", "interval"]], "export_to_console": [["export_to_console", "PeriodicExportingMetricReader", "ConsoleMetricExporter"], ["readers", "append", "export_to_console"]], "host": [["host", "conf", "get"], ["endpoint", "host", "port"]], "interval": [["interval", "conf", "getint", "fallback", "None"], ["readers", "PeriodicExportingMetricReader", "OTLPMetricExporter", "endpoint", "endpoint", "headers", "export_interval_millis", "interval"]], "port": [["port", "conf", "getint"], ["endpoint", "host", "port"]], "prefix": [["prefix", "conf", "get"], ["SafeOtelLogger", "metrics", "get_meter_provider", "prefix", "allow_list_validator"]], "readers": [["readers", "PeriodicExportingMetricReader", "OTLPMetricExporter", "endpoint", "endpoint", "headers", "export_interval_millis", "interval"], ["readers", "append", "export_to_console"], ["metrics", "set_meter_provider", "MeterProvider", "resource", "resource", "metric_readers", "readers", "shutdown_on_exit", "False"]], "resource": [["resource", "Resource", "attributes", "SERVICE_NAME"], ["metrics", "set_meter_provider", "MeterProvider", "resource", "resource", "metric_readers", "readers", "shutdown_on_exit", "False"]]}, "name": "get_otel_logger", "params": {"cls": ""}, "params_descr": {"cls": ""}, "params_occur": {"cls": []}, "params_p": {"args": [], "cls": [["bool", 0.30000000000000004], ["Optional[str]", 0.2], ["str", 0.1], ["Type[T]", 0.1], ["List[str]", 0.1]], "kwargs": []}, "q_name": "get_otel_logger", "ret_exprs": ["return SafeOtelLogger(metrics.get_meter_provider(), prefix, allow_list_validator)"], "ret_type": "SafeOtelLogger", "ret_type_p": [["bool", 0.3587411887367813], ["str", 0.12686777577862077], ["Optional[Union[str, Any]]", 0.0808456988904942], ["Callable", 0.0803938874068542], ["static_frame.core.util.DepthLevelSpecifier", 0.07821568816629353]], "variables": {"allow_list": "", "allow_list_validator": "", "debug": "", "endpoint": "", "export_to_console": "", "host": "", "interval": "", "port": "", "prefix": "", "readers": "", "resource": ""}, "variables_p": {"allow_list": [["Dict[str, Union[float, str]]", 0.4177646979493091], ["starfish.core.types._spot_finding_results.SpotFindingResults", 0.22188613702545112], ["str", 0.09611902738382126], ["OrderedDict[str, Any]", 0.08840907376591718], ["List[str]", 0.08803663187383476]], "allow_list_validator": [["list", 0.9999999999999999]], "debug": [["bool", 0.6], ["str", 0.3], ["int", 0.09999999999999999]], "endpoint": [["str", 0.29683397473875683], ["int", 0.10423893301515678]], "export_to_console": [["list", 0.28120137714711063], ["Dict[str, List[Any]]", 0.13368500311077827], ["DefaultDict[str, List[int]]", 0.1068659991856153], ["List[List[float]]", 0.10629377750963075], ["Dict[str, str]", 0.0934213865440202], ["Dict[str, int]", 0.09122478839607145]], "host": [["int", 0.5693473920322617], ["str", 0.13997858875658362], ["Dict[str, str]", 0.07862197770514405], ["dict", 0.06952640698559454], ["Dict[str, Any]", 0.05564912194911519], ["Dict[str, Type[Any]]", 0.04272934772922361]], "interval": [["SMSShell.metrics.none.MetricsHelper", 0.83748931641993]], "port": [["str", 0.5378019519344961], ["Dict[str, str]", 0.11751613446523643], ["bool", 0.0922488408264704], ["Dict[str, List[str]]", 0.08685388204372367], ["Union[Literal, str]", 0.08161836013531319]], "prefix": [["str", 0.7766730729816138], ["Dict[str, List[Any]]", 0.13329468950572543]], "readers": [], "resource": [["str", 0.6275799451412042], ["list", 0.09999413290712536], ["Optional[str]", 0.09454790137141734], ["Dict[str, Union[float, str]]", 0.0899556915163839], ["Set[str]", 0.08792232906386911]]}}], "imports": ["__future__", "annotations", "datetime", "logging", "random", "warnings", "functools", "partial", "typing", "Callable", "Iterable", "Union", "opentelemetry", "metrics", "opentelemetry", "exporter", "otlp", "proto", "http", "metric_exporter", "OTLPMetricExporter", "opentelemetry", "metrics", "Instrument", "Observation", "opentelemetry", "sdk", "metrics", "MeterProvider", "opentelemetry", "sdk", "metrics", "_internal", "export", "ConsoleMetricExporter", "PeriodicExportingMetricReader", "opentelemetry", "sdk", "resources", "SERVICE_NAME", "Resource", "opentelemetry", "util", "types", "Attributes", "airflow", "configuration", "conf", "airflow", "metrics", "protocols", "DeltaType", "Timer", "TimerProtocol", "airflow", "metrics", "validators", "OTEL_NAME_MAX_LENGTH", "AllowListValidator", "stat_name_otel_handler"], "mod_var_ln": {"DEFAULT_GAUGE_VALUE": [[46, 0], [46, 19]], "DEFAULT_METRIC_NAME_DELIMITER": [[65, 0], [65, 29]], "DEFAULT_METRIC_NAME_PREFIX": [[63, 0], [63, 26]], "GaugeValues": [[44, 0], [44, 11]], "UP_DOWN_COUNTERS": [[61, 0], [61, 16]], "log": [[42, 0], [42, 3]]}, "mod_var_occur": {"DEFAULT_GAUGE_VALUE": [["new_value", "value", "DEFAULT_GAUGE_VALUE"], ["self", "map", "key", "Observation", "DEFAULT_GAUGE_VALUE", "attributes"]], "DEFAULT_METRIC_NAME_DELIMITER": [["prefix", "DEFAULT_METRIC_NAME_DELIMITER", "name"]], "DEFAULT_METRIC_NAME_PREFIX": [], "GaugeValues": [], "UP_DOWN_COUNTERS": [["name", "UP_DOWN_COUNTERS"]], "log": []}, "no_types_annot": {"D": 58, "I": 0, "U": 60}, "session_id": "2KdC_fUNKtnDVp3BgH4T_6mLDx6_pMm9mGF5tfr7_c8", "set": null, "tc": [false, null], "type_annot_cove": 0.49, "typed_seq": "", "untyped_seq": "", "variables": {"DEFAULT_GAUGE_VALUE": "", "DEFAULT_METRIC_NAME_DELIMITER": "", "DEFAULT_METRIC_NAME_PREFIX": "", "GaugeValues": "", "UP_DOWN_COUNTERS": "", "log": ""}, "variables_p": {"DEFAULT_GAUGE_VALUE": [["int", 0.6887673066255949], ["Dict[Any, int]", 0.10012081966863914], ["Optional[datetime.datetime]", 0.09534876385436364]], "DEFAULT_METRIC_NAME_DELIMITER": [["str", 0.3697564480443298], ["int", 0.2261761531527397], ["List[str]", 0.16883973294228416], ["Pattern[str]", 0.14141906687857966], ["Dict[str, Any]", 0.09380859898206675]], "DEFAULT_METRIC_NAME_PREFIX": [["str", 0.9999999999999999]], "GaugeValues": [["float", 0.39999999999999997], ["str", 0.19999999999999998], ["Set[str]", 0.09999999999999999], ["bool", 0.09999999999999999], ["Optional[str]", 0.09999999999999999]], "UP_DOWN_COUNTERS": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["Callable(functools.wraps)[[Named(wrapped, Callable[..., Any]), Named(assigned, Sequence[str], default), Named(updated, Sequence[str], default)], Callable[Any, Any]]", 0.1], ["str", 0.1], ["datetime.timedelta", 0.1]], "log": [["str", 0.30000000000000004], ["logging.Logger", 0.2], ["bool", 0.1], ["Dict[str, Union[Any, Any, Any]]", 0.1], ["Dict[str, Union[Any, Any, Any, Any]]", 0.1], ["Dict[str, Union[dict, Any, Any, Any, Any]]", 0.1]]}}}