{"error": null, "response": {"classes": [{"cls_lc": [[120, 0], [138, 17]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[130, 4], [133, 61]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "get_dagbag_import_timeout", "params": {"dag_file_path": "builtins.str"}, "params_descr": {"dag_file_path": ""}, "params_occur": {"dag_file_path": []}, "params_p": {"args": [], "dag_file_path": [["str", 0.42199341535751766], ["List[str]", 0.18333301856602896], ["Tuple[str]", 0.11757110971522315], ["Optional[str]", 0.09559833435847813]], "kwargs": [], "self": []}, "q_name": "DefaultPolicy.get_dagbag_import_timeout", "ret_exprs": ["return conf.getfloat(\"core\", \"DAGBAG_IMPORT_TIMEOUT\")"], "ret_type": "", "ret_type_p": [["int", 0.18228587746836186], ["bool", 0.17834677990145265], ["bytes", 0.17454604328728537], ["Dict[Optional[str], Set[abilian.services.security.models.Role]]", 0.10604647047749953], ["abilian.core.models.subjects.Principal", 0.10604647047749953], ["str", 0.0823392730568494]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[137, 4], [138, 17]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "get_airflow_context_vars", "params": {"context": ""}, "params_descr": {"context": ""}, "params_occur": {"context": []}, "params_p": {"args": [], "context": [["Dict[str, Any]", 0.43872528420744106], ["bool", 0.1909828368957115]], "kwargs": [], "self": []}, "q_name": "DefaultPolicy.get_airflow_context_vars", "ret_exprs": ["return {}"], "ret_type": "", "ret_type_p": [["List[str]", 0.12481097060258141], ["salon.models.Stylist", 0.0716931978831543], ["int", 0.06561664404419704], ["str", 0.05919432655838437], ["Callable", 0.054269128425614016]], "variables": {}, "variables_p": {}}], "name": "DefaultPolicy", "q_name": "DefaultPolicy", "variables": {}, "variables_p": {}}, {"cls_lc": [[184, 4], [190, 36]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[189, 8], [190, 36]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "__dir__", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "hook_methods"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "make_plugin_from_local_settings.<locals>.AirflowLocalSettingsPolicy.__dir__", "ret_exprs": ["return self.hook_methods"], "ret_type": "", "ret_type_p": [["str", 0.46770230811572855], ["zerver.models.Realm", 0.24127492967114933], ["IO[str]", 0.09342606808764604]], "variables": {}, "variables_p": {}}], "name": "AirflowLocalSettingsPolicy", "q_name": "make_plugin_from_local_settings.<locals>.AirflowLocalSettingsPolicy", "variables": {}, "variables_p": {}}], "funcs": [{"docstring": {"func": "This policy setting allows altering tasks after they are loaded in the DagBag.", "long_descr": "It allows administrator to rewire some task's parameters.  Alternatively you can raise\n``AirflowClusterPolicyViolation`` exception to stop DAG from being executed.\n\nHere are a few examples of how this can be useful:\n\n* You could enforce a specific queue (say the ``spark`` queue) for tasks using the ``SparkOperator`` to\n  make sure that these tasks get wired to the right workers\n* You could enforce a task timeout policy, making sure that no tasks run for more than 48 hours", "ret": null}, "fn_lc": [[36, 0], [50, 7]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "task_policy", "params": {"task": "airflow.models.baseoperator.BaseOperator"}, "params_descr": {"task": "task to be mutated"}, "params_occur": {"task": []}, "params_p": {"args": [], "kwargs": [], "task": [["dict", 0.4535658000488589], ["bool", 0.4093743102927245], ["taskiapplication.models.task.Task", 0.06430446657881095], ["Dict[str, Any]", 0.020097735630498353], ["Callable", 0.017199911161916735]]}, "q_name": "task_policy", "ret_exprs": [], "ret_type": "None", "variables": {}, "variables_p": {}}, {"docstring": {"func": "This policy setting allows altering DAGs after they are loaded in the DagBag.", "long_descr": "It allows administrator to rewire some DAG's parameters.\nAlternatively you can raise ``AirflowClusterPolicyViolation`` exception\nto stop DAG from being executed.\n\nHere are a few examples of how this can be useful:\n\n* You could enforce default user for DAGs\n* Check if every DAG has configured tags", "ret": null}, "fn_lc": [[54, 0], [68, 7]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "dag_policy", "params": {"dag": "airflow.models.dag.DAG"}, "params_descr": {"dag": "dag to be mutated"}, "params_occur": {"dag": []}, "params_p": {"args": [], "dag": [["int", 0.19999999999999998], ["str", 0.19999999999999998], ["Iterable['Context']", 0.09999999999999999], ["dict", 0.09999999999999999], ["bool", 0.09999999999999999]], "kwargs": []}, "q_name": "dag_policy", "ret_exprs": [], "ret_type": "None", "variables": {}, "variables_p": {}}, {"docstring": {"func": "This setting allows altering task instances before being queued by the Airflow scheduler.", "long_descr": "This could be used, for instance, to modify the task instance during retries.", "ret": null}, "fn_lc": [[72, 0], [79, 7]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "task_instance_mutation_hook", "params": {"task_instance": "airflow.models.taskinstance.TaskInstance"}, "params_descr": {"task_instance": "task instance to be mutated"}, "params_occur": {"task_instance": []}, "params_p": {"args": [], "kwargs": [], "task_instance": [["dict", 0.4535658000488589], ["bool", 0.4093743102927245], ["taskiapplication.models.task.Task", 0.06430446657881095], ["Dict[str, Any]", 0.020097735630498353], ["Callable", 0.017199911161916735]]}, "q_name": "task_instance_mutation_hook", "ret_exprs": [], "ret_type": "None", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Mutate pod before scheduling.", "long_descr": "This setting allows altering ``kubernetes.client.models.V1Pod`` object before they are passed to the\nKubernetes client for scheduling.\n\nThis could be used, for instance, to add sidecar or init containers to every worker pod launched by\nKubernetesExecutor or KubernetesPodOperator.", "ret": null}, "fn_lc": [[83, 0], [92, 7]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "pod_mutation_hook", "params": {"pod": ""}, "params_descr": {"pod": ""}, "params_occur": {"pod": []}, "params_p": {"args": [], "kwargs": [], "pod": [["int", 0.19999999999999998], ["str", 0.19999999999999998], ["Iterable['Context']", 0.09999999999999999], ["dict", 0.09999999999999999], ["bool", 0.09999999999999999]]}, "q_name": "pod_mutation_hook", "ret_exprs": [], "ret_type": "None", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Inject airflow context vars into default airflow context vars.", "long_descr": "This setting allows getting the airflow context vars, which are key value pairs.  They are then injected\nto default airflow context vars, which in the end are available as environment variables when running\ntasks dag_id, task_id, execution_date, dag_run_id, try_number are reserved keys.", "ret": null}, "fn_lc": [[96, 0], [105, 7]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "get_airflow_context_vars", "params": {"context": ""}, "params_descr": {"context": "The context for the task_instance of interest."}, "params_occur": {"context": []}, "params_p": {"args": [], "context": [["Dict[str, Any]", 0.43872528420744106], ["bool", 0.1909828368957115]], "kwargs": []}, "q_name": "get_airflow_context_vars", "ret_exprs": [], "ret_type": "builtins.dict[builtins.str, builtins.str]", "variables": {}, "variables_p": {}}, {"docstring": {"func": "This setting allows for dynamic control of the DAG file parsing timeout based on the DAG file path.", "long_descr": "It is useful when there are a few DAG files requiring longer parsing times, while others do not.\nYou can control them separately instead of having one value for all DAG files.\n\nIf the return value is less than or equal to 0, it means no timeout during the DAG parsing.", "ret": null}, "fn_lc": [[109, 0], [117, 7]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "get_dagbag_import_timeout", "params": {"dag_file_path": "builtins.str"}, "params_descr": {"dag_file_path": ""}, "params_occur": {"dag_file_path": []}, "params_p": {"args": [], "dag_file_path": [["str", 0.42199341535751766], ["List[str]", 0.18333301856602896], ["Tuple[str]", 0.11757110971522315], ["Optional[str]", 0.09559833435847813]], "kwargs": []}, "q_name": "get_dagbag_import_timeout", "ret_exprs": [], "ret_type": "int | float", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[160, 4], [181, 50]], "fn_var_ln": {"code": [[178, 8], [178, 12]], "codestr": [[172, 8], [172, 15]], "scope": [[179, 8], [179, 13]]}, "fn_var_occur": {"code": [["code", "compile", "codestr"], ["exec", "code", "scope", "scope"]], "codestr": [["codestr", "textwrap", "dedent", "name", "str", "desired_sig", "join", "desired_sig", "parameters"], ["code", "compile", "codestr"]], "scope": [["scope", "target"], ["exec", "code", "scope", "scope"], ["scope", "name"]]}, "name": "_make_shim_fn", "params": {"desired_sig": "", "name": "", "target": ""}, "params_descr": {"desired_sig": "", "name": "", "target": ""}, "params_occur": {"desired_sig": [["codestr", "textwrap", "dedent", "name", "str", "desired_sig", "join", "desired_sig", "parameters"]], "name": [["codestr", "textwrap", "dedent", "name", "str", "desired_sig", "join", "desired_sig", "parameters"], ["scope", "name"]], "target": [["scope", "target"]]}, "params_p": {"args": [], "desired_sig": [["str", 0.898790611316113]], "kwargs": [], "name": [["str", 0.6896200385888889], ["Optional[str]", 0.12727993793850528], ["bool", 0.09847492310577088]], "target": [["str", 0.7999999999999999], ["int", 0.1]]}, "q_name": "make_plugin_from_local_settings.<locals>._make_shim_fn", "ret_exprs": ["return scope[f\"{name}_name_mismatch_shim\"]"], "ret_type": "", "ret_type_p": [["str", 0.26716542213135436], ["int", 0.11501010269122805], ["Type", 0.0965788806792481]], "variables": {"code": "", "codestr": "", "scope": ""}, "variables_p": {"code": [["str", 0.592115245341309], ["Dict[str, int]", 0.12250225550796848], ["List[str]", 0.10247813533785571], ["Type[bytes]", 0.09377086144153517], ["Dict[int, str]", 0.0891335023713315]], "codestr": [["dict", 0.09430984359521592], ["Dict[str, Type[Any]]", 0.09206886395358103], ["str", 0.0885109632995896], ["bool", 0.08818813523017854], ["Dict[str, Tuple[str, str]]", 0.0881712286030443], ["List[str]", 0.08526422623937427]], "scope": [["Pattern[str]", 0.5079916096558557], ["str", 0.33111884750698006], ["list", 0.07841235890065659]]}}, {"docstring": {"func": "Turn the functions from airflow_local_settings module into a custom/local plugin.", "long_descr": "Allows plugin-registered functions to co-operate with pluggy/setuptool\nentrypoint plugins of the same methods.\n\nAirflow local settings will be \"win\" (i.e. they have the final say) as they are the last plugin\nregistered.", "ret": null}, "fn_lc": [[141, 0], [213, 23]], "fn_var_ln": {"__name__": [[187, 8], [187, 16]], "hook_methods": [[185, 8], [185, 20]], "local_sig": [[201, 8], [201, 17]], "policy": [[205, 12], [205, 18]], "policy_sig": [[202, 8], [202, 18]]}, "fn_var_occur": {"__name__": [], "hook_methods": [["hook_methods", "add", "name"], ["pm", "register", "AirflowLocalSettingsPolicy", "hook_methods", "tuple", "hook_methods"]], "local_sig": [["local_sig", "inspect", "signature", "policy"], ["local_sig", "parameters", "keys", "policy_sig", "parameters", "keys"]], "policy": [["policy", "getattr", "module", "name"], ["local_sig", "inspect", "signature", "policy"], ["policy", "_make_shim_fn", "name", "policy_sig", "target", "policy"], ["setattr", "AirflowLocalSettingsPolicy", "name", "staticmethod", "hookimpl", "policy", "specname", "name"]], "policy_sig": [["policy_sig", "inspect", "signature", "globals", "name"], ["local_sig", "parameters", "keys", "policy_sig", "parameters", "keys"], ["policy", "_make_shim_fn", "name", "policy_sig", "target", "policy"]]}, "name": "make_plugin_from_local_settings", "params": {"module": "", "names": "builtins.list[builtins.str]", "pm": "pluggy.PluginManager"}, "params_descr": {"module": "", "names": "", "pm": ""}, "params_occur": {"module": [["policy", "getattr", "module", "name"]], "names": [], "pm": [["hasattr", "pm", "hook", "name"], ["pm", "register", "AirflowLocalSettingsPolicy", "hook_methods", "tuple", "hook_methods"]]}, "params_p": {"args": [], "kwargs": [], "module": [["str", 0.5384254055615307], ["bool", 0.11380457952044477], ["Sequence[str]", 0.09428418073611904], ["transfer.models.Scope", 0.08199730304017935]], "names": [["bool", 0.43522815440692886], ["Optional[Set[str]]", 0.28678131623909675], ["str", 0.057939775688083575], ["Optional[bool]", 0.057939775688083575], ["Optional[str]", 0.054750741251932314]], "pm": [["str", 0.19503541806007516], ["dict", 0.18438070130678472], ["app.models.dto.CoordinateDTO", 0.10265320006722102], ["List[app.models.Question]", 0.10265320006722102]]}, "q_name": "make_plugin_from_local_settings", "ret_exprs": ["return hook_methods"], "ret_type": "", "ret_type_p": [["str", 0.5391163919012862], ["bool", 0.09712242461020669], ["Mapping[str, str]", 0.08776811239260607], ["float", 0.08728690200779131]], "variables": {"__name__": "", "hook_methods": "builtins.tuple[builtins.str, ...]", "local_sig": "", "policy": "", "policy_sig": ""}, "variables_p": {"__name__": [["str", 0.8999999999999999]], "hook_methods": [["set", 0.5067830063400827], ["Dict[str, str]", 0.17747404699612185], ["DefaultDict[Any, Set[Any]]", 0.11397361002472546], ["Iterator[Tuple[Any, Any]]", 0.10779836412723026], ["Dict[str, Set[str]]", 0.09397097251183978]], "local_sig": [["Dict[str, Any]", 0.09882026969174502]], "policy": [["str", 0.2849659708940858], ["bool", 0.18997731392939055], ["dict", 0.1705917525777659], ["Set[str]", 0.09673278599834435], ["List[str]", 0.09314338180879504]], "policy_sig": [["str", 0.10908440889213389], ["Dict[str, Any]", 0.09370055421018347]]}}], "imports": ["__future__", "annotations", "typing", "TYPE_CHECKING", "pluggy", "airflow", "models", "baseoperator", "BaseOperator", "airflow", "models", "dag", "DAG", "airflow", "models", "taskinstance", "TaskInstance", "airflow", "configuration", "conf", "inspect", "textwrap", "attr"], "mod_var_ln": {"__all__": [[27, 0], [27, 7]], "hookimpl": [[25, 0], [25, 8]], "local_settings_hookspec": [[24, 0], [24, 23]]}, "mod_var_occur": {"__all__": [], "hookimpl": [["setattr", "AirflowLocalSettingsPolicy", "name", "staticmethod", "hookimpl", "policy", "specname", "name"]], "local_settings_hookspec": []}, "no_types_annot": {"D": 15, "I": 0, "U": 22}, "session_id": "KJ3QFco3UvTCBFVvcIzYZb8E4sE6RtmpyF3rNp9ofqU", "set": null, "tc": [false, null], "type_annot_cove": 0.41, "typed_seq": "", "untyped_seq": "", "variables": {"__all__": "builtins.list[builtins.str]", "hookimpl": "", "local_settings_hookspec": ""}, "variables_p": {"__all__": [["List[str]", 0.7999999999999999], ["Tuple[str]", 0.09999999999999999], ["Tuple[str, str, str]", 0.09999999999999999]], "hookimpl": [["dict", 0.5698547105763584], ["Dict[str, Any]", 0.057813402156367426], ["Optional[float]", 0.054237687534932175], ["str", 0.05102078876649767], ["frozenset[str]", 0.04972928827494802]], "local_settings_hookspec": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]]}}}