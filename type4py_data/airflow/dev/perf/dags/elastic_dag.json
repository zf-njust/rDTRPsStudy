{"error": null, "response": {"classes": [{"cls_lc": [[139, 0], [148, 17]], "cls_var_ln": {"BINARY_TREE": [[146, 4], [146, 15]], "GRID": [[148, 4], [148, 8]], "LINEAR": [[145, 4], [145, 10]], "NO_STRUCTURE": [[144, 4], [144, 16]], "STAR": [[147, 4], [147, 8]]}, "cls_var_occur": {"BINARY_TREE": [], "GRID": [], "LINEAR": [], "NO_STRUCTURE": [], "STAR": []}, "funcs": [], "name": "DagShape", "q_name": "DagShape", "variables": {"BINARY_TREE": "", "GRID": "", "LINEAR": "", "NO_STRUCTURE": "", "STAR": ""}, "variables_p": {"BINARY_TREE": [["bool", 0.6]], "GRID": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "LINEAR": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "NO_STRUCTURE": [["str", 0.39999999999999997], ["bool", 0.3], ["List[str]", 0.19999999999999998], ["Tuple[Literal, Literal, Any, Dict[str, Any]]", 0.09999999999999999]], "STAR": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]]}}], "funcs": [{"docstring": {"func": "Parse a time string e.g. (2h13m) into a timedelta object.", "long_descr": null, "ret": "A datetime.timedelta object or \"@once\""}, "fn_lc": [[35, 0], [50, 35]], "fn_var_ln": {"parts": [[42, 4], [42, 9]], "time_params": [[49, 4], [49, 15]]}, "fn_var_occur": {"parts": [["parts", "RE_TIME_DELTA", "match", "time_str"], ["parts", "None", "time_str"], ["time_params", "name", "float", "param", "name", "param", "parts", "groupdict", "items", "param"]], "time_params": [["time_params", "name", "float", "param", "name", "param", "parts", "groupdict", "items", "param"], ["timedelta", "time_params"]]}, "name": "parse_time_delta", "params": {"time_str": "builtins.str"}, "params_descr": {"time_str": "A string identifying a duration.  (eg. 2h13m)"}, "params_occur": {"time_str": [["parts", "RE_TIME_DELTA", "match", "time_str"], ["parts", "None", "time_str"]]}, "params_p": {"args": [], "kwargs": [], "time_str": [["str", 0.8718331477403904], ["Pattern", 0.12816685225960964]]}, "q_name": "parse_time_delta", "ret_exprs": ["return timedelta(**time_params)"], "ret_type": "", "ret_type_p": [["int", 0.5121445248825558], ["Optional[bool]", 0.10550686536135835], ["Iterable[Any]", 0.09981594227095618], ["posts.models.Post", 0.09396399456810148], ["str", 0.08909633486418889]], "variables": {"parts": "", "time_params": ""}, "variables_p": {"parts": [["Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]", 0.7566764910515902], ["List[str]", 0.14634086865915183], ["set", 0.09698264028925811]], "time_params": [["dict", 0.20151211222164714], ["Dict[str, Any]", 0.18451002014030965], ["Set[str]", 0.13283750586856624], ["List[str]", 0.09464149959858284], ["int", 0.09363354112768905]]}}, {"docstring": {"func": "Parse a schedule interval string e.g. (2h13m) or \"@once\".", "long_descr": null, "ret": "A datetime.timedelta object or \"@once\" or None"}, "fn_lc": [[53, 0], [66, 37]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "parse_schedule_interval", "params": {"time_str": "builtins.str"}, "params_descr": {"time_str": "A string identifying a schedule interval.  (eg. 2h13m, None, @once)"}, "params_occur": {"time_str": [["parse_time_delta", "time_str"]]}, "params_p": {"args": [], "kwargs": [], "time_str": [["str", 0.5181366531474638], ["datetime.datetime", 0.23100440523832583], ["datetime.timedelta", 0.09717740199886798], ["List[int]", 0.07873620339993742], ["int", 0.07494533621540508]]}, "q_name": "parse_schedule_interval", "ret_exprs": ["return None", "return \"@once\"", "return parse_time_delta(time_str)"], "ret_type": "", "ret_type_p": [["str", 0.22736472190124912], ["Optional[zerver.models.Realm]", 0.12054028244791577], ["bool", 0.09641166026880409], ["Optional[Dict[str, int]]", 0.0944591812438481], ["Optional[Tuple[float, float]]", 0.09307853996412055], ["Optional[object]", 0.08856703613726571], ["Optional[Callable[..., Any]]", 0.08635543328172522]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Remove invalid characters for dag_id", "long_descr": null, "ret": null}, "fn_lc": [[69, 0], [73, 43]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "safe_dag_id", "params": {"s": "builtins.str"}, "params_descr": {"s": ""}, "params_occur": {"s": [["re", "sub", "s"]]}, "params_p": {"args": [], "kwargs": [], "s": [["str", 0.9999999999999999]]}, "q_name": "safe_dag_id", "ret_exprs": ["return re.sub(\"[^0-9a-zA-Z_]+\", \"_\", s)"], "ret_type": "builtins.str", "ret_type_p": [["str", 0.8001566554181132], ["bool", 0.09475740930063008]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Chain tasks as a binary tree where task i is child of task (i - 1) // 2 :", "long_descr": "t0 -> t1 -> t3 -> t7\n  |    \\\n  |      -> t4 -> t8\n  |\n   -> t2 -> t5 -> t9\n       \\\n         -> t6", "ret": null}, "fn_lc": [[76, 0], [89, 52]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "chain_as_binary_tree", "params": {"tasks": "airflow.operators.bash.BashOperator"}, "params_descr": {"tasks": ""}, "params_occur": {"tasks": [["range", "len", "tasks"], ["tasks", "i", "set_downstream", "tasks", "i"]]}, "params_p": {"args": [], "kwargs": [], "tasks": [["list", 0.5081846562586613], ["List[str]", 0.20102191379361495], ["int", 0.10186387589333246], ["List[None]", 0.09699358901467224], ["List[complex]", 0.09193596503971907]]}, "q_name": "chain_as_binary_tree", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Return the index of node (i, j) on the grid.", "long_descr": null, "ret": null}, "fn_lc": [[111, 4], [115, 55]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "index", "params": {"i": "", "j": ""}, "params_descr": {"i": "", "j": ""}, "params_occur": {"i": [["int", "grid_size", "i", "i", "i", "j"]], "j": [["int", "grid_size", "i", "i", "i", "j"]]}, "params_p": {"args": [], "i": [["int", 0.9119262103749677]], "j": [["int", 0.9119262103749677]], "kwargs": []}, "q_name": "chain_as_grid.<locals>.index", "ret_exprs": ["return int(grid_size * i - i * (i - 1) / 2 + j)"], "ret_type": "", "ret_type_p": [["float", 0.1015614301130934], ["Dict[str, Any]", 0.09205744488357671], ["Sequence[str]", 0.09078956010964921], ["int", 0.09078956010964921]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Chain tasks as a grid:", "long_descr": "t0 -> t1 -> t2 -> t3\n |     |     |\n v     v     v\nt4 -> t5 -> t6\n |     |\n v     v\nt7 -> t8\n |\n v\nt9", "ret": null}, "fn_lc": [[92, 0], [122, 73]], "fn_var_ln": {"grid_size": [[109, 4], [109, 13]]}, "fn_var_occur": {"grid_size": [["range", "grid_size"], ["range", "grid_size", "i"]]}, "name": "chain_as_grid", "params": {"tasks": "airflow.operators.bash.BashOperator"}, "params_descr": {"tasks": ""}, "params_occur": {"tasks": [["index", "i", "j", "len", "tasks"], ["tasks", "index", "i", "j", "set_downstream", "tasks", "index", "i", "j"], ["index", "i", "j", "len", "tasks"], ["tasks", "index", "i", "j", "set_downstream", "tasks", "index", "i", "j"]]}, "params_p": {"args": [], "kwargs": [], "tasks": [["bool", 0.12150516859817907], ["list", 0.10150343860427775], ["Mapping[str, Any]", 0.09858093809204994]]}, "q_name": "chain_as_grid", "ret_exprs": [], "ret_type": "", "variables": {"grid_size": ""}, "variables_p": {"grid_size": [["int", 0.5864465205253373], ["str", 0.2039167090915499], ["float", 0.12430607688067218]]}}, {"docstring": {"func": "Chain tasks as a star (all tasks are children of task 0)", "long_descr": "t0 -> t1\n | -> t2\n | -> t3\n | -> t4\n | -> t5", "ret": null}, "fn_lc": [[125, 0], [135, 42]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "chain_as_star", "params": {"tasks": "airflow.operators.bash.BashOperator"}, "params_descr": {"tasks": ""}, "params_occur": {"tasks": [["tasks", "set_upstream", "list", "tasks"]]}, "params_p": {"args": [], "kwargs": [], "tasks": [["List[Dict]", 0.12264728091933529], ["Dict[str, Any]", 0.11766626324386723], ["models.Match", 0.11092839883569532], ["models.User", 0.10500933448108864], ["List[str]", 0.09245141379455515], ["models.Dominion", 0.0862846586032361], ["bool", 0.08606098396678424]]}, "q_name": "chain_as_star", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "imports": ["__future__", "annotations", "enum", "os", "re", "datetime", "datetime", "timedelta", "enum", "Enum", "airflow", "DAG", "airflow", "models", "baseoperator", "chain", "airflow", "operators", "bash", "BashOperator"], "mod_var_ln": {"DAG_COUNT": [[152, 0], [152, 9]], "DAG_PREFIX": [[151, 0], [151, 10]], "RE_TIME_DELTA": [[30, 0], [30, 13]], "SCHEDULE_INTERVAL": [[157, 0], [157, 17]], "SCHEDULE_INTERVAL_ENV": [[156, 0], [156, 21]], "SHAPE": [[159, 0], [159, 5]], "START_DATE": [[155, 0], [155, 10]], "START_DATE_ENV": [[154, 0], [154, 14]], "TASKS_COUNT": [[153, 0], [153, 11]], "args": [[161, 0], [161, 4]], "dag": [[170, 4], [170, 7]], "elastic_dag_tasks": [[188, 4], [188, 21]], "num_runs": [[166, 4], [166, 12]], "shape_function_map": [[193, 4], [193, 22]]}, "mod_var_occur": {"DAG_COUNT": [["range", "DAG_COUNT"], ["dag", "DAG", "dag_id", "safe_dag_id", "join", "DAG_PREFIX", "SHAPE", "name", "lower", "dag_no", "DAG_COUNT", "TASKS_COUNT", "START_DATE_ENV", "SCHEDULE_INTERVAL_ENV", "is_paused_upon_creation", "False", "default_args", "args", "schedule", "SCHEDULE_INTERVAL"]], "DAG_PREFIX": [["dag", "DAG", "dag_id", "safe_dag_id", "join", "DAG_PREFIX", "SHAPE", "name", "lower", "dag_no", "DAG_COUNT", "TASKS_COUNT", "START_DATE_ENV", "SCHEDULE_INTERVAL_ENV", "is_paused_upon_creation", "False", "default_args", "args", "schedule", "SCHEDULE_INTERVAL"]], "RE_TIME_DELTA": [["parts", "RE_TIME_DELTA", "match", "time_str"]], "SCHEDULE_INTERVAL": [["isinstance", "SCHEDULE_INTERVAL", "str"], ["args", "START_DATE", "SCHEDULE_INTERVAL", "num_runs"], ["dag", "DAG", "dag_id", "safe_dag_id", "join", "DAG_PREFIX", "SHAPE", "name", "lower", "dag_no", "DAG_COUNT", "TASKS_COUNT", "START_DATE_ENV", "SCHEDULE_INTERVAL_ENV", "is_paused_upon_creation", "False", "default_args", "args", "schedule", "SCHEDULE_INTERVAL"]], "SCHEDULE_INTERVAL_ENV": [["SCHEDULE_INTERVAL", "parse_schedule_interval", "SCHEDULE_INTERVAL_ENV"], ["dag", "DAG", "dag_id", "safe_dag_id", "join", "DAG_PREFIX", "SHAPE", "name", "lower", "dag_no", "DAG_COUNT", "TASKS_COUNT", "START_DATE_ENV", "SCHEDULE_INTERVAL_ENV", "is_paused_upon_creation", "False", "default_args", "args", "schedule", "SCHEDULE_INTERVAL"]], "SHAPE": [["dag", "DAG", "dag_id", "safe_dag_id", "join", "DAG_PREFIX", "SHAPE", "name", "lower", "dag_no", "DAG_COUNT", "TASKS_COUNT", "START_DATE_ENV", "SCHEDULE_INTERVAL_ENV", "is_paused_upon_creation", "False", "default_args", "args", "schedule", "SCHEDULE_INTERVAL"], ["SHAPE", "DagShape", "NO_STRUCTURE"], ["shape_function_map", "SHAPE", "elastic_dag_tasks"]], "START_DATE": [["args", "START_DATE"], ["args", "START_DATE", "SCHEDULE_INTERVAL", "num_runs"]], "START_DATE_ENV": [["START_DATE", "datetime", "now", "parse_time_delta", "START_DATE_ENV"], ["dag", "DAG", "dag_id", "safe_dag_id", "join", "DAG_PREFIX", "SHAPE", "name", "lower", "dag_no", "DAG_COUNT", "TASKS_COUNT", "START_DATE_ENV", "SCHEDULE_INTERVAL_ENV", "is_paused_upon_creation", "False", "default_args", "args", "schedule", "SCHEDULE_INTERVAL"]], "TASKS_COUNT": [["dag", "DAG", "dag_id", "safe_dag_id", "join", "DAG_PREFIX", "SHAPE", "name", "lower", "dag_no", "DAG_COUNT", "TASKS_COUNT", "START_DATE_ENV", "SCHEDULE_INTERVAL_ENV", "is_paused_upon_creation", "False", "default_args", "args", "schedule", "SCHEDULE_INTERVAL"], ["elastic_dag_tasks", "BashOperator", "task_id", "join", "i", "TASKS_COUNT", "bash_command", "dag", "dag", "i", "range", "TASKS_COUNT"]], "args": [["args", "START_DATE", "SCHEDULE_INTERVAL", "num_runs"], ["dag", "DAG", "dag_id", "safe_dag_id", "join", "DAG_PREFIX", "SHAPE", "name", "lower", "dag_no", "DAG_COUNT", "TASKS_COUNT", "START_DATE_ENV", "SCHEDULE_INTERVAL_ENV", "is_paused_upon_creation", "False", "default_args", "args", "schedule", "SCHEDULE_INTERVAL"]], "dag": [["elastic_dag_tasks", "BashOperator", "task_id", "join", "i", "TASKS_COUNT", "bash_command", "dag", "dag", "i", "range", "TASKS_COUNT"], ["globals", "dag_no", "dag"]], "elastic_dag_tasks": [["shape_function_map", "SHAPE", "elastic_dag_tasks"]], "num_runs": [["args", "START_DATE", "SCHEDULE_INTERVAL", "num_runs"]], "shape_function_map": [["shape_function_map", "SHAPE", "elastic_dag_tasks"]]}, "no_types_annot": {"D": 7, "I": 0, "U": 30}, "session_id": "umF2ZLvY3bRsIca8IUlgFk_V3JkDN5h4TtxhIG7JbPo", "set": null, "tc": [false, null], "type_annot_cove": 0.19, "typed_seq": "", "untyped_seq": "", "variables": {"DAG_COUNT": "", "DAG_PREFIX": "", "RE_TIME_DELTA": "", "SCHEDULE_INTERVAL": "", "SCHEDULE_INTERVAL_ENV": "", "SHAPE": "", "START_DATE": "", "START_DATE_ENV": "", "TASKS_COUNT": "", "args": "", "dag": "", "elastic_dag_tasks": "", "num_runs": "", "shape_function_map": ""}, "variables_p": {"DAG_COUNT": [["tartare.core.models.Job", 0.18530266788012187], ["str", 0.10773634000299971], ["bokeh.models.ColumnDataSource", 0.0920174695150936], ["zerver.models.Realm", 0.08616754386060968]], "DAG_PREFIX": [["int", 0.5063259737236484], ["bool", 0.21269878306328974], ["List[dict]", 0.09864577465160582], ["app.models.Tweet", 0.09802900762362635], ["dict", 0.08430046093782984]], "RE_TIME_DELTA": [["Pattern[str]", 0.9999999999999999]], "SCHEDULE_INTERVAL": [["tuple", 0.3515683887600899], ["List[str]", 0.34603724634075306], ["int", 0.11877781222183498]], "SCHEDULE_INTERVAL_ENV": [["List[Union[Any, Any, Any, Any]]", 0.11391700636319417], ["Optional[str]", 0.10381945660054794], ["Dict[str, Type[Any]]", 0.09720791052307676], ["src.pip_shims.models.ShimmedPathCollection", 0.09178338471293783]], "SHAPE": [["int", 0.5063259737236484], ["bool", 0.21269878306328974], ["List[dict]", 0.09864577465160582], ["app.models.Tweet", 0.09802900762362635], ["dict", 0.08430046093782984]], "START_DATE": [["Union[None, datetime.date, datetime.datetime, str]", 0.18065614839792765], ["datetime.datetime", 0.1506534503309852], ["datetime.timedelta", 0.11310094933677386], ["datetime.datetime.datetime", 0.10599731810064209], ["Union[datetime.date, datetime.datetime]", 0.10207370228586342], ["str", 0.09147225849806477], ["datetime.date.time.timedelta", 0.08814073123991228], ["Optional[datetime.datetime]", 0.08463212952361741], ["datetime.datetime.timedelta", 0.0832733122862133]], "START_DATE_ENV": [["Pattern[str]", 0.40775053069970846], ["str", 0.2946131177741447], ["Optional[datetime.tzinfo]", 0.10912381852533003], ["Type[projeccore.models.Match]", 0.09433254279170764], ["Optional[Match[str]]", 0.09417999020910904]], "TASKS_COUNT": [["List[List[int]]", 0.22152880718418202], ["Dict[str, str]", 0.08669965904425214], ["List[str]", 0.08237464999274438], ["str", 0.08199904409283616], ["dict", 0.08087423077199996]], "args": [["str", 0.22301583932122537], ["list", 0.16996472118242528], ["List[str]", 0.11494612787607571], ["Dict[str, int]", 0.10730427404551422], ["Callable(id)[[object], int]", 0.10332988411240768], ["core.arxiv.submission.services.classic.models.Submission", 0.08770128439389506], ["Iterator[Dict[str, str]]", 0.08518427236768998]], "dag": [["int", 0.5931136720965271], ["List[dict]", 0.11707678819615246], ["List[str]", 0.10614451704578089], ["str", 0.09301830662860935], ["notifications.models.Notification", 0.09064671603293036]], "elastic_dag_tasks": [["bool", 0.4402899772821022], ["int", 0.10828978766249532], ["list", 0.09633589717575015], ["List[float]", 0.09173120783044654], ["List[str]", 0.09100969746283383]], "num_runs": [["int", 0.4643245666008317], ["datetime", 0.0959229253224622], ["Optional[int]", 0.09216587043636715], ["datetime.datetime", 0.090923888792847], ["Type[tuple]", 0.08531520706862404], ["datetime.date", 0.081537226700556]], "shape_function_map": [["bool", 0.9999999998944799], ["List[str]", 3.7833393518056446e-11], ["int", 2.2927638953439276e-11], ["Set[Type[Any]]", 1.4408525385709171e-11], ["Dict[str, Any]", 1.2611131172685481e-11], ["faustypes.models.IsInstanceArgT", 9.40249496506579e-12], ["Tuple[int, int]", 8.336954982077108e-12]]}}}