{"error": null, "response": {"classes": [], "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[40, 0], [48, 15]], "fn_var_ln": {"attempt": [[44, 8], [44, 15]], "d": [[47, 8], [47, 9]], "root": [[41, 4], [41, 8]]}, "fn_var_occur": {"attempt": [["attempt", "d", "AIRFLOW_CFG_FILE"], ["attempt", "exists", "attempt", "read_text"], ["attempt", "parent"]], "d": [["d", "start_from"], ["d", "root"], ["attempt", "d", "AIRFLOW_CFG_FILE"], ["d", "d", "parent"]], "root": [["root", "Path", "start_from", "root"], ["d", "root"]]}, "name": "search_upwards_for_airflow_sources_root", "params": {"start_from": "pathlib.Path"}, "params_descr": {"start_from": ""}, "params_occur": {"start_from": [["root", "Path", "start_from", "root"], ["d", "start_from"]]}, "params_p": {"args": [], "kwargs": [], "start_from": [["str", 0.8816551472917069], ["int", 0.11834485270829306]]}, "q_name": "search_upwards_for_airflow_sources_root", "ret_exprs": ["return attempt.parent", "return None"], "ret_type": "Path | None", "ret_type_p": [["Union[str, None]", 0.2007105180539685], ["Optional[bool]", 0.16975976006499127], ["dict", 0.13552611742817622]], "variables": {"attempt": "", "d": "", "root": ""}, "variables_p": {"attempt": [["str", 0.503284857709177], ["Dict[int, List[int]]", 0.10037338110028712]], "d": [["Counter[str]", 0.13527793864365686]], "root": [["str", 0.37211274393163385], ["pathlib.Path", 0.095307123752279], ["Tuple[str]", 0.08029434911459155]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[51, 0], [52, 66]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "in_autocomplete", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "in_autocomplete", "ret_exprs": ["return os.environ.get(f\"_{NAME.upper()}_COMPLETE\") is not None"], "ret_type": "builtins.bool", "ret_type_p": [["str", 0.19223649897056197], ["cmk.utils.type_defs.UserId", 0.1107377446080422], ["int", 0.0990805157725549], ["List[str]", 0.09263302604540795], ["Callable", 0.09225922672989191]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[55, 0], [56, 37]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "in_self_upgrade", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "in_self_upgrade", "ret_exprs": ["return \"self-upgrade\" in sys.argv"], "ret_type": "builtins.bool", "ret_type_p": [["bool", 0.9999999999999999]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[59, 0], [60, 51]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "in_help", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "in_help", "ret_exprs": ["return \"--help\" in sys.argv or \"-h\" in sys.argv"], "ret_type": "builtins.bool", "ret_type_p": [["bool", 0.9999999999999999]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[63, 0], [70, 5]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "skip_upgrade_check", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "skip_upgrade_check", "ret_exprs": ["return ( in_self_upgrade() or in_autocomplete() or in_help() or hasattr(sys, \"_called_from_test\") or os.environ.get(\"SKIP_UPGRADE_CHECK\"))"], "ret_type": "", "ret_type_p": [["bool", 1.0]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[73, 0], [74, 92]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "skip_group_output", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "skip_group_output", "ret_exprs": ["return in_autocomplete() or in_help() or os.environ.get(\"SKIP_GROUP_OUTPUT\") is not None"], "ret_type": "", "ret_type_p": [["bool", 1.0]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Retrieves hash of setup files from the source of installation of Breeze.", "long_descr": "This is used in order to determine if we need to upgrade Breeze, because some\nsetup files changed. Blake2b algorithm will not be flagged by security checkers\nas insecure algorithm (in Python 3.9 and above we can use `usedforsecurity=False`\nto disable it, but for now it's better to use more secure algorithms.", "ret": null}, "fn_lc": [[77, 0], [97, 22]], "fn_var_ln": {"prefix": [[92, 4], [92, 10]]}, "fn_var_occur": {"prefix": [["line", "startswith", "prefix"], ["line", "len", "prefix"]]}, "name": "get_package_setup_metadata_hash", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "get_package_setup_metadata_hash", "ret_exprs": ["return line[len(prefix) :]", "return \"NOT FOUND\""], "ret_type": "builtins.str", "ret_type_p": [["str", 0.6189782500738032], ["Optional[str]", 0.09396838703988836], ["Union[str, List[str]]", 0.09055423686828508]], "variables": {"prefix": ""}, "variables_p": {"prefix": [["str", 0.810890798902664], ["Optional[str]", 0.18910920109733598]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[100, 0], [108, 43]], "fn_var_ln": {"the_hash": [[102, 8], [102, 16]]}, "fn_var_occur": {"the_hash": [["the_hash", "hashlib", "new"], ["the_hash", "update", "sources", "read_bytes"], ["the_hash", "update", "sources", "read_bytes"], ["the_hash", "update", "sources", "read_bytes"], ["the_hash", "hexdigest"]]}, "name": "get_sources_setup_metadata_hash", "params": {"sources": "pathlib.Path"}, "params_descr": {"sources": ""}, "params_occur": {"sources": [["the_hash", "update", "sources", "read_bytes"], ["the_hash", "update", "sources", "read_bytes"], ["the_hash", "update", "sources", "read_bytes"]]}, "params_p": {"args": [], "kwargs": [], "sources": [["str", 0.19904579355134294], ["Optional[str]", 0.10421100704955649], ["Optional[Callable[[pathlib.Path], int]]", 0.10018449447120592], ["bytes", 0.09463495303965734], ["IO[bytes]", 0.09116663527397145]]}, "q_name": "get_sources_setup_metadata_hash", "ret_exprs": ["return the_hash.hexdigest()", "return f\"Missing file {e.filename}\""], "ret_type": "builtins.str", "ret_type_p": [["str", 0.27395184545923174], ["Dict[str, str]", 0.1275143669882578], ["Optional[str]", 0.10370218558969185], ["Any", 0.09172249958013098], ["raiden.utils.Address", 0.08751340504584082]], "variables": {"the_hash": ""}, "variables_p": {"the_hash": [["hashlib._Hash", 0.198551241500722], ["Dict[str, Union[Any, Any, str]]", 0.10993659257011229], ["str", 0.0987555039748742]]}}, {"docstring": {"func": "Retrieves hash of setup.py and setup.cfg files from the source of installation of Breeze.", "long_descr": "This is used in order to determine if we need to upgrade Breeze, because some\nsetup files changed. Blake2b algorithm will not be flagged by security checkers\nas insecure algorithm (in Python 3.9 and above we can use `usedforsecurity=False`\nto disable it, but for now it's better to use more secure algorithms.", "ret": null}, "fn_lc": [[111, 0], [123, 64]], "fn_var_ln": {"installation_sources": [[120, 4], [120, 24]]}, "fn_var_occur": {"installation_sources": [["installation_sources", "get_installation_airflow_sources"], ["installation_sources", "None"], ["get_sources_setup_metadata_hash", "installation_sources"]]}, "name": "get_installation_sources_config_metadata_hash", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "get_installation_sources_config_metadata_hash", "ret_exprs": ["return \"NOT FOUND\"", "return get_sources_setup_metadata_hash(installation_sources)"], "ret_type": "builtins.str", "ret_type_p": [["str", 0.4732716971794851], ["List[str]", 0.10343942845762577]], "variables": {"installation_sources": ""}, "variables_p": {"installation_sources": [["str", 0.32333248037577095], ["Dict[str, Union[Any, int, str]]", 0.15870956749253956], ["raiden.utils.PaymentAmount", 0.12209554931742418], ["raiden.utils.PaymentID", 0.1133660824000502], ["list", 0.10196367685900065]]}}, {"docstring": {"func": "Retrieves hash of setup files from the currently used sources.", "long_descr": null, "ret": null}, "fn_lc": [[126, 0], [130, 70]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "get_used_sources_setup_metadata_hash", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "get_used_sources_setup_metadata_hash", "ret_exprs": ["return get_sources_setup_metadata_hash(get_used_airflow_sources())"], "ret_type": "builtins.str", "ret_type_p": [["Dict[str, str]", 0.239580088646127], ["int", 0.12599322595255633], ["List[str]", 0.10232073463699533], ["Dict[str, Any]", 0.09036403264609633], ["Iterable[str]", 0.0884427544585634], ["Sequence[str]", 0.08235468762541362]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "When we run upgrade check --answer is not parsed yet, so we need to guess it.", "long_descr": null, "ret": null}, "fn_lc": [[133, 0], [140, 33]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "set_forced_answer_for_upgrade_check", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "set_forced_answer_for_upgrade_check", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[143, 0], [151, 51]], "fn_var_ln": {"breeze_readme": [[144, 4], [144, 17]], "line": [[149, 12], [149, 16]], "lines": [[145, 4], [145, 9]], "result_lines": [[146, 4], [146, 16]]}, "fn_var_occur": {"breeze_readme": [["breeze_readme", "breeze_sources"], ["lines", "breeze_readme", "read_text", "splitlines", "keepends", "True"], ["breeze_readme", "write_text", "join", "result_lines"]], "line": [["line", "startswith"], ["line", "sources_hash"], ["result_lines", "append", "line"]], "lines": [["lines", "breeze_readme", "read_text", "splitlines", "keepends", "True"]], "result_lines": [["result_lines", "append", "line"], ["breeze_readme", "write_text", "join", "result_lines"]]}, "name": "process_breeze_readme", "params": {"breeze_sources": "pathlib.Path", "sources_hash": "builtins.str"}, "params_descr": {"breeze_sources": "", "sources_hash": ""}, "params_occur": {"breeze_sources": [["breeze_readme", "breeze_sources"]], "sources_hash": [["line", "sources_hash"]]}, "params_p": {"args": [], "breeze_sources": [["float", 0.10751085611126934], ["str", 0.09374932059301581]], "kwargs": [], "sources_hash": [["Dict[str, Any]", 0.09557027852222597], ["str", 0.09016357350772386]]}, "q_name": "process_breeze_readme", "ret_exprs": [], "ret_type": "", "variables": {"breeze_readme": "", "line": "", "lines": "", "result_lines": ""}, "variables_p": {"breeze_readme": [["IO[bytes]", 0.10771001218781646], ["raiden.utils.List[raiden.utils.Any]", 0.08879197924776562]], "line": [["str", 0.8908347817107949], ["List[str]", 0.10916521828920508]], "lines": [["str", 0.41157217543980046], ["property", 0.18988981044336697], ["Type[ValueError]", 0.10310650129938852], ["pathlib.Path", 0.0971138848826321]], "result_lines": [["list", 0.7106510154979654], ["Type[List[Any]]", 0.10860485160720473], ["bytes", 0.10617661829660417], ["str", 0.07456751459822566]]}}, {"docstring": {"func": "Prints warning if detected airflow sources are not the ones that Breeze was installed with.", "long_descr": null, "ret": "True if warning was printed."}, "fn_lc": [[154, 0], [181, 16]], "fn_var_ln": {"breeze_sources": [[174, 12], [174, 26]], "installation_sources": [[172, 8], [172, 28]], "package_hash": [[160, 8], [160, 20]], "sources_hash": [[170, 4], [170, 16]]}, "fn_var_occur": {"breeze_sources": [["breeze_sources", "installation_sources"], ["process_breeze_readme", "breeze_sources", "sources_hash"], ["reinstall_breeze", "breeze_sources"]], "installation_sources": [["installation_sources", "get_installation_airflow_sources"], ["installation_sources", "None"], ["breeze_sources", "installation_sources"]], "package_hash": [["package_hash", "get_package_setup_metadata_hash"], ["sources_hash", "package_hash"]], "sources_hash": [["sources_hash", "get_installation_sources_config_metadata_hash"], ["sources_hash", "package_hash"], ["process_breeze_readme", "breeze_sources", "sources_hash"]]}, "name": "reinstall_if_setup_changed", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "reinstall_if_setup_changed", "ret_exprs": ["return False", "return False", "return True", "return False"], "ret_type": "builtins.bool", "ret_type_p": [["bool", 1.0000000000000002]], "variables": {"breeze_sources": "", "installation_sources": "", "package_hash": "", "sources_hash": ""}, "variables_p": {"breeze_sources": [["str", 0.8097867110438609], ["Union[Literal, str]", 0.10703370525052955], ["int", 0.08317958370560956]], "installation_sources": [["str", 0.29294544209876056], ["Dict[str, Union[Any, int, str]]", 0.14289479057395038], ["Optional[str]", 0.1025617002252852], ["int", 0.08452771516826821]], "package_hash": [["dict", 0.20284145436151807], ["str", 0.11966869784798499], ["Dict[str, str]", 0.09975441585362031], ["Dict[str, Tuple[str, str]]", 0.09806047903109649], ["List[Tuple[str, str]]", 0.08509161769503767], ["Dict[str, Any]", 0.08469041493570262], ["ChainMap", 0.08401106839804041]], "sources_hash": [["str", 0.817624667717626], ["Tuple[Literal]", 0.09502160777251209], ["Optional[str]", 0.08735372450986208]]}}, {"docstring": {"func": "Prints warning if detected airflow sources are not the ones that Breeze was installed with.", "long_descr": null, "ret": "True if warning was printed."}, "fn_lc": [[184, 0], [194, 16]], "fn_var_ln": {"installation_airflow_sources": [[190, 4], [190, 32]]}, "fn_var_occur": {"installation_airflow_sources": [["installation_airflow_sources", "get_installation_airflow_sources"], ["installation_airflow_sources", "airflow_sources", "installation_airflow_sources"]]}, "name": "reinstall_if_different_sources", "params": {"airflow_sources": "pathlib.Path"}, "params_descr": {"airflow_sources": "source for airflow code that we are operating on"}, "params_occur": {"airflow_sources": [["installation_airflow_sources", "airflow_sources", "installation_airflow_sources"], ["reinstall_breeze", "airflow_sources"]]}, "params_p": {"airflow_sources": [["str", 0.18282738026899545]], "args": [], "kwargs": []}, "q_name": "reinstall_if_different_sources", "ret_exprs": ["return True", "return False"], "ret_type": "builtins.bool", "ret_type_p": [["bool", 0.9999999999999999]], "variables": {"installation_airflow_sources": ""}, "variables_p": {"installation_airflow_sources": [["raiden.utils.PaymentAmount", 0.11086025669173354], ["Optional[str]", 0.10426515938470826], ["raiden.utils.PaymentID", 0.09963222669384997], ["str", 0.09506359908680238], ["int", 0.09436222609883374]]}}, {"docstring": {"func": "Retrieves the Root of the Airflow Sources where Breeze was installed from.", "long_descr": null, "ret": "the Path for Airflow sources."}, "fn_lc": [[197, 0], [202, 83]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "get_installation_airflow_sources", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "get_installation_airflow_sources", "ret_exprs": ["return search_upwards_for_airflow_sources_root(Path(__file__).resolve().parent)"], "ret_type": "Path | None", "ret_type_p": [["str", 0.40713472228106623], ["Dict[str, int]", 0.09434571605392363], ["bool", 0.09020246928399135]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Retrieves the Root of used Airflow Sources which we operate on. Those are either Airflow sources found", "long_descr": "upwards in directory tree or sources where Breeze was installed from.", "ret": "the Path for Airflow sources we use."}, "fn_lc": [[205, 0], [217, 26]], "fn_var_ln": {"current_sources": [[213, 8], [213, 23]]}, "fn_var_occur": {"current_sources": [["current_sources", "search_upwards_for_airflow_sources_root", "Path", "cwd"], ["current_sources", "None"], ["current_sources", "get_installation_airflow_sources"], ["current_sources", "None"]]}, "name": "get_used_airflow_sources", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "get_used_airflow_sources", "ret_exprs": ["return current_sources"], "ret_type": "pathlib.Path", "ret_type_p": [["str", 0.6014898913889997], ["List[str]", 0.2023208848140928], ["pathlib.Path", 0.19618922379690767]], "variables": {"current_sources": ""}, "variables_p": {"current_sources": [["str", 0.39184531088702046], ["pathlib.Path", 0.3805079280447433], ["Tuple[str, str]", 0.10264625725534374]]}}, {"docstring": {"func": "Find the root of airflow sources we operate on. Handle the case when Breeze is installed via `pipx` from", "long_descr": "a different source tree, so it searches upwards of the current directory to find the right root of\nairflow directory we are actually in. This **might** be different than the sources of Airflow Breeze\nwas installed from.\n\nIf not found, we operate on Airflow sources that we were installed it. This handles the case when\nwe run Breeze from a \"random\" directory.\n\nThis method also handles the following errors and warnings:\n\n   * It fails (and exits hard) if Breeze is installed in non-editable mode (in which case it will\n     not find the Airflow sources when walking upwards the directory where it is installed)\n   * It warns (with 2 seconds timeout) if you are using Breeze from a different airflow sources than\n     the one you operate on.\n   * If we are running in the same source tree as where Breeze was installed from (so no warning above),\n     it warns (with 2 seconds timeout) if there is a change in setup.* files of Breeze since installation\n     time. In such case usesr is encouraged to re-install Breeze to update dependencies.", "ret": "Path for the found sources."}, "fn_lc": [[221, 0], [261, 26]], "fn_var_ln": {"airflow_sources": [[255, 4], [255, 19]], "installation_airflow_sources": [[247, 4], [247, 32]], "sources_root_from_env": [[244, 4], [244, 25]]}, "fn_var_occur": {"airflow_sources": [["airflow_sources", "get_used_airflow_sources"], ["reinstall_if_different_sources", "airflow_sources"], ["os", "chdir", "str", "airflow_sources"]], "installation_airflow_sources": [["installation_airflow_sources", "get_installation_airflow_sources"], ["installation_airflow_sources", "None", "skip_upgrade_check"]], "sources_root_from_env": [["sources_root_from_env", "os", "getenv", "None"], ["Path", "sources_root_from_env"]]}, "name": "find_airflow_sources_root_to_operate_on", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "find_airflow_sources_root_to_operate_on", "ret_exprs": ["return Path(sources_root_from_env)", "return airflow_sources"], "ret_type": "pathlib.Path", "ret_type_p": [["str", 0.3805525282226907], ["bool", 0.10512817385276955], ["pathlib.Path", 0.09525248478857565], ["catalog.Path", 0.09353403610886583]], "variables": {"airflow_sources": "", "installation_airflow_sources": "", "sources_root_from_env": ""}, "variables_p": {"airflow_sources": [["str", 0.2269384251681234], ["Dict[str, Dict[str, bool]]", 0.10709467478239533], ["Dict[Any, str]", 0.09245172740417078], ["bool", 0.0901922406140614]], "installation_airflow_sources": [["Optional[str]", 0.3170019392379441], ["int", 0.2991240309062499], ["raiden.utils.PaymentID", 0.09599021683456482], ["str", 0.0950347838328496], ["Optional[cmk.gui.plugins.userdb.utils.UserConnector]", 0.09317396513217778]], "sources_root_from_env": [["Optional[str]", 0.43732656096524514], ["str", 0.39245672420894123], ["Optional['SparkSession']", 0.08615570524857358], ["Pattern", 0.08406100957724001]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[294, 0], [314, 13]], "fn_var_ln": {"res_inspect": [[297, 4], [297, 15]], "result": [[304, 8], [304, 14]]}, "fn_var_occur": {"res_inspect": [["res_inspect", "run_command", "cmd", "volume_name", "stdout", "subprocess", "DEVNULL", "stderr", "subprocess", "DEVNULL", "check", "False"], ["res_inspect", "returncode"]], "result": [["result", "run_command", "cmd", "volume_name", "check", "False", "capture_output", "True"], ["result", "returncode"], ["get_console", "print", "result", "stdout"]]}, "name": "create_volume_if_missing", "params": {"volume_name": "builtins.str"}, "params_descr": {"volume_name": ""}, "params_occur": {"volume_name": [["res_inspect", "run_command", "cmd", "volume_name", "stdout", "subprocess", "DEVNULL", "stderr", "subprocess", "DEVNULL", "check", "False"], ["result", "run_command", "cmd", "volume_name", "check", "False", "capture_output", "True"]]}, "params_p": {"args": [], "kwargs": [], "volume_name": [["str", 1.0000000000000002]]}, "q_name": "create_volume_if_missing", "ret_exprs": [], "ret_type": "", "variables": {"res_inspect": "", "result": ""}, "variables_p": {"res_inspect": [["List[str]", 0.22111354314062137], ["Dict[bytes, Any]", 0.12590428665278952]], "result": [["Set[str]", 0.100919178511114], ["str", 0.09636506409944838], ["bool", 0.09480293742641306], ["Dict[str, Any]", 0.09447550346439716], ["dict", 0.09023101756755438]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[317, 0], [318, 49]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "create_mypy_volume_if_needed", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "create_mypy_volume_if_needed", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Creates all directories and files that are needed for Breeze to work via docker-compose.", "long_descr": "Checks if setup has been updates since last time and proposes to upgrade if so.", "ret": null}, "fn_lc": [[321, 0], [336, 47]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "create_directories_and_files", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "create_directories_and_files", "ret_exprs": [], "ret_type": "None", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[339, 0], [370, 44]], "fn_var_ln": {"permission_errors": [[342, 4], [342, 21]]}, "fn_var_occur": {"permission_errors": [["permission_errors", "append", "path"], ["permission_errors", "append", "path"], ["get_console", "print", "permission_errors"], ["get_console", "print", "permission_errors"]]}, "name": "cleanup_python_generated_files", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "cleanup_python_generated_files", "ret_exprs": [], "ret_type": "", "variables": {"permission_errors": ""}, "variables_p": {"permission_errors": [["Dict[str, Union[Any, Any]]", 0.16863249217041432], ["Dict[str, List[str]]", 0.16863249217041432], ["DefaultDict[Any, List[Any]]", 0.14814957961426217], ["List[Tuple[str, Any]]", 0.14688165566187875], ["Dict[str, Any]", 0.11085285555672247], ["List[str]", 0.08656198767158646], ["Dict[str, list]", 0.08431624608520716]]}}], "imports": ["__future__", "annotations", "hashlib", "os", "platform", "shutil", "subprocess", "sys", "tempfile", "functools", "lru_cache", "pathlib", "Path", "airflow_breeze", "NAME", "airflow_breeze", "utils", "console", "get_console", "airflow_breeze", "utils", "reinstall", "reinstall_breeze", "warn_dependencies_changed", "warn_non_editable", "airflow_breeze", "utils", "shared_options", "get_verbose", "set_forced_answer", "importlib", "metadata", "distribution", "importlib_metadata", "distribution", "airflow_breeze", "utils", "run_utils", "run_command"], "mod_var_ln": {"AIRFLOW_CFG_FILE": [[37, 0], [37, 16]], "AIRFLOW_PROVIDERS_ROOT": [[267, 0], [267, 22]], "AIRFLOW_SOURCES_ROOT": [[264, 0], [264, 20]], "AIRFLOW_TMP_DIR_PATH": [[274, 0], [274, 20]], "BREEZE_SOURCES_ROOT": [[289, 0], [289, 19]], "BUILD_CACHE_DIR": [[268, 0], [268, 15]], "CACHE_TMP_FILE_DIR": [[287, 0], [287, 18]], "CONSTRAINTS_CACHE_DIR": [[270, 0], [270, 21]], "DAGS_DIR": [[278, 0], [278, 8]], "DIST_DIR": [[283, 0], [283, 8]], "DOCKER_CONTEXT_DIR": [[286, 0], [286, 18]], "DOCS_DIR": [[284, 0], [284, 8]], "FILES_DIR": [[279, 0], [279, 9]], "GENERATED_DIR": [[269, 0], [269, 13]], "HOOKS_DIR": [[280, 0], [280, 9]], "KUBE_DIR": [[281, 0], [281, 8]], "LOGS_DIR": [[282, 0], [282, 8]], "MSSQL_TMP_DIR_NAME": [[291, 0], [291, 18]], "OUTPUT_LOG": [[288, 0], [288, 10]], "PROVIDER_DEPENDENCIES_JSON_FILE_PATH": [[271, 0], [271, 36]], "PROVIDER_METADATA_JSON_FILE_PATH": [[272, 0], [272, 32]], "SCRIPTS_CI_DIR": [[285, 0], [285, 14]], "SYSTEM_TESTS_PROVIDERS_ROOT": [[266, 0], [266, 27]], "TESTS_PROVIDERS_ROOT": [[265, 0], [265, 20]], "WWW_ASSET_COMPILE_LOCK": [[275, 0], [275, 22]], "WWW_ASSET_OUT_DEV_MODE_FILE": [[277, 0], [277, 27]], "WWW_ASSET_OUT_FILE": [[276, 0], [276, 18]], "WWW_CACHE_DIR": [[273, 0], [273, 13]]}, "mod_var_occur": {"AIRFLOW_CFG_FILE": [["attempt", "d", "AIRFLOW_CFG_FILE"]], "AIRFLOW_PROVIDERS_ROOT": [], "AIRFLOW_SOURCES_ROOT": [["TESTS_PROVIDERS_ROOT", "AIRFLOW_SOURCES_ROOT"], ["SYSTEM_TESTS_PROVIDERS_ROOT", "AIRFLOW_SOURCES_ROOT"], ["AIRFLOW_PROVIDERS_ROOT", "AIRFLOW_SOURCES_ROOT"], ["BUILD_CACHE_DIR", "AIRFLOW_SOURCES_ROOT"], ["GENERATED_DIR", "AIRFLOW_SOURCES_ROOT"], ["AIRFLOW_TMP_DIR_PATH", "AIRFLOW_SOURCES_ROOT"], ["DAGS_DIR", "AIRFLOW_SOURCES_ROOT"], ["FILES_DIR", "AIRFLOW_SOURCES_ROOT"], ["HOOKS_DIR", "AIRFLOW_SOURCES_ROOT"], ["KUBE_DIR", "AIRFLOW_SOURCES_ROOT"], ["LOGS_DIR", "AIRFLOW_SOURCES_ROOT"], ["DIST_DIR", "AIRFLOW_SOURCES_ROOT"], ["DOCS_DIR", "AIRFLOW_SOURCES_ROOT"], ["SCRIPTS_CI_DIR", "AIRFLOW_SOURCES_ROOT"], ["DOCKER_CONTEXT_DIR", "AIRFLOW_SOURCES_ROOT"], ["BREEZE_SOURCES_ROOT", "AIRFLOW_SOURCES_ROOT"], ["AIRFLOW_SOURCES_ROOT", "touch"], ["AIRFLOW_SOURCES_ROOT", "touch"], ["AIRFLOW_SOURCES_ROOT", "touch"], ["AIRFLOW_SOURCES_ROOT", "rglob"], ["AIRFLOW_SOURCES_ROOT", "rglob"]], "AIRFLOW_TMP_DIR_PATH": [], "BREEZE_SOURCES_ROOT": [], "BUILD_CACHE_DIR": [["CONSTRAINTS_CACHE_DIR", "BUILD_CACHE_DIR"], ["WWW_CACHE_DIR", "BUILD_CACHE_DIR"], ["BUILD_CACHE_DIR", "mkdir", "parents", "True", "exist_ok", "True"]], "CACHE_TMP_FILE_DIR": [["OUTPUT_LOG", "Path", "CACHE_TMP_FILE_DIR", "name"]], "CONSTRAINTS_CACHE_DIR": [], "DAGS_DIR": [["DAGS_DIR", "mkdir", "parents", "True", "exist_ok", "True"]], "DIST_DIR": [["DIST_DIR", "mkdir", "parents", "True", "exist_ok", "True"]], "DOCKER_CONTEXT_DIR": [], "DOCS_DIR": [], "FILES_DIR": [["FILES_DIR", "mkdir", "parents", "True", "exist_ok", "True"]], "GENERATED_DIR": [["PROVIDER_DEPENDENCIES_JSON_FILE_PATH", "GENERATED_DIR"], ["PROVIDER_METADATA_JSON_FILE_PATH", "GENERATED_DIR"]], "HOOKS_DIR": [["HOOKS_DIR", "mkdir", "parents", "True", "exist_ok", "True"]], "KUBE_DIR": [["KUBE_DIR", "mkdir", "parents", "True", "exist_ok", "True"]], "LOGS_DIR": [["LOGS_DIR", "mkdir", "parents", "True", "exist_ok", "True"]], "MSSQL_TMP_DIR_NAME": [], "OUTPUT_LOG": [["OUTPUT_LOG", "mkdir", "parents", "True", "exist_ok", "True"]], "PROVIDER_DEPENDENCIES_JSON_FILE_PATH": [], "PROVIDER_METADATA_JSON_FILE_PATH": [], "SCRIPTS_CI_DIR": [], "SYSTEM_TESTS_PROVIDERS_ROOT": [], "TESTS_PROVIDERS_ROOT": [], "WWW_ASSET_COMPILE_LOCK": [], "WWW_ASSET_OUT_DEV_MODE_FILE": [], "WWW_ASSET_OUT_FILE": [], "WWW_CACHE_DIR": [["WWW_ASSET_COMPILE_LOCK", "WWW_CACHE_DIR"], ["WWW_ASSET_OUT_FILE", "WWW_CACHE_DIR"], ["WWW_ASSET_OUT_DEV_MODE_FILE", "WWW_CACHE_DIR"]]}, "no_types_annot": {"D": 20, "I": 0, "U": 57}, "session_id": "fqFmGwFm39ZQZiD8WethkVhnB6-7ejv32N78TbfqYzw", "set": null, "tc": [false, null], "type_annot_cove": 0.26, "typed_seq": "", "untyped_seq": "", "variables": {"AIRFLOW_CFG_FILE": "", "AIRFLOW_PROVIDERS_ROOT": "", "AIRFLOW_SOURCES_ROOT": "", "AIRFLOW_TMP_DIR_PATH": "", "BREEZE_SOURCES_ROOT": "", "BUILD_CACHE_DIR": "", "CACHE_TMP_FILE_DIR": "", "CONSTRAINTS_CACHE_DIR": "", "DAGS_DIR": "", "DIST_DIR": "", "DOCKER_CONTEXT_DIR": "", "DOCS_DIR": "", "FILES_DIR": "", "GENERATED_DIR": "", "HOOKS_DIR": "", "KUBE_DIR": "", "LOGS_DIR": "", "MSSQL_TMP_DIR_NAME": "", "OUTPUT_LOG": "", "PROVIDER_DEPENDENCIES_JSON_FILE_PATH": "", "PROVIDER_METADATA_JSON_FILE_PATH": "", "SCRIPTS_CI_DIR": "", "SYSTEM_TESTS_PROVIDERS_ROOT": "", "TESTS_PROVIDERS_ROOT": "", "WWW_ASSET_COMPILE_LOCK": "", "WWW_ASSET_OUT_DEV_MODE_FILE": "", "WWW_ASSET_OUT_FILE": "", "WWW_CACHE_DIR": ""}, "variables_p": {"AIRFLOW_CFG_FILE": [["str", 0.6325034847241011], ["List[pathlib.Path]", 0.10009483923121607], ["bytes", 0.09300347068953953], ["Dict[str, Union[Any, Any]]", 0.08597554225631945]], "AIRFLOW_PROVIDERS_ROOT": [["str", 0.7999999999999999], ["int", 0.1], ["set", 0.1]], "AIRFLOW_SOURCES_ROOT": [["str", 0.8084226684934691], ["List[str]", 0.1915773315065307]], "AIRFLOW_TMP_DIR_PATH": [["str", 0.892963741176309], ["Optional[str]", 0.10703625882369108]], "BREEZE_SOURCES_ROOT": [["str", 0.6620960749672097], ["List[str]", 0.09910939761375927]], "BUILD_CACHE_DIR": [["str", 0.6439084095961238], ["pathlib.Path", 0.2603320264565617]], "CACHE_TMP_FILE_DIR": [["str", 0.5841040347470065], ["pathlib.Path", 0.23350777430787267], ["Union[Literal, str]", 0.09789247716883877], ["List[str]", 0.08449571377628223]], "CONSTRAINTS_CACHE_DIR": [["str", 0.6], ["pathlib.Path", 0.2], ["Optional[pathlib.Path]", 0.2]], "DAGS_DIR": [["pathlib.Path", 0.6230755029931795], ["str", 0.37692449700682057]], "DIST_DIR": [["pathlib.Path", 0.6230755029931795], ["str", 0.37692449700682057]], "DOCKER_CONTEXT_DIR": [["str", 0.9999999999999998]], "DOCS_DIR": [["str", 0.6], ["pathlib.Path", 0.3], ["Optional[str]", 0.09999999999999999]], "FILES_DIR": [["pathlib.Path", 0.5499828842854227], ["str", 0.45001711571457725]], "GENERATED_DIR": [["str", 0.4628561560982265], ["pathlib.Path", 0.4311190224647101], ["bool", 0.10602482143706345]], "HOOKS_DIR": [["pathlib.Path", 0.6230755029931795], ["str", 0.37692449700682057]], "KUBE_DIR": [["pathlib.Path", 0.6230755029931795], ["str", 0.37692449700682057]], "LOGS_DIR": [["pathlib.Path", 0.8978091697147962], ["str", 0.1021908302852038]], "MSSQL_TMP_DIR_NAME": [["str", 0.9999999993227436], ["int", 3.1316005896747546e-10]], "OUTPUT_LOG": [["str", 0.3692944483634655], ["pathlib.Path", 0.3595770405126392], ["dict", 0.09230084109255955]], "PROVIDER_DEPENDENCIES_JSON_FILE_PATH": [["str", 0.6889964155883076], ["int", 0.10366786147056413], ["pathlib.Path", 0.10366786147056413], ["Optional[pathlib.Path]", 0.10366786147056413]], "PROVIDER_METADATA_JSON_FILE_PATH": [["str", 0.6889964155883076], ["int", 0.10366786147056413], ["pathlib.Path", 0.10366786147056413], ["Optional[pathlib.Path]", 0.10366786147056413]], "SCRIPTS_CI_DIR": [["str", 0.6], ["pathlib.Path", 0.2], ["Optional[pathlib.Path]", 0.2]], "SYSTEM_TESTS_PROVIDERS_ROOT": [["str", 0.6402178924737103], ["int", 0.20315621118876376], ["Dict[str, Dict[str, Any]]", 0.0795510180014736], ["Final", 0.07707487833605235]], "TESTS_PROVIDERS_ROOT": [["pathlib.Path", 0.9999999977522691], ["str", 2.247730849522308e-09]], "WWW_ASSET_COMPILE_LOCK": [["int", 0.39999999999999997], ["str", 0.3], ["Tuple[str, str]", 0.19999999999999998], ["bool", 0.09999999999999999]], "WWW_ASSET_OUT_DEV_MODE_FILE": [["str", 0.5163782059291073], ["int", 0.48362179407089256]], "WWW_ASSET_OUT_FILE": [["str", 0.6835083045160736], ["List[str]", 0.10129936663172259], ["pathlib.Path", 0.07243567718869806], ["Type[Callable[Any, Any]]", 0.07137832583175295], ["Dict[str, str]", 0.07137832583175295]], "WWW_CACHE_DIR": [["str", 0.6240680166203568], ["path.Path", 0.0975852019932753], ["Sequence[str]", 0.09735283298530799], ["bool", 0.09509998093811625], ["Union[pathlib.Path, str]", 0.08589396746294363]]}}}