{"error": null, "response": {"classes": [], "funcs": [{"docstring": {"func": "Find names of existing operators.", "long_descr": ":return names of existing operators.", "ret": null}, "fn_lc": [[36, 0], [48, 25]], "fn_var_ln": {"operator_names": [[41, 4], [41, 18]], "paths": [[43, 4], [43, 9]]}, "fn_var_occur": {"operator_names": [["operator_names", "set"], ["operator_names", "set", "re", "findall", "f", "read"]], "paths": [["paths", "glob", "src_dir_pattern", "recursive", "True"]]}, "name": "find_existing_guide_operator_names", "params": {"src_dir_pattern": "builtins.str"}, "params_descr": {"src_dir_pattern": ""}, "params_occur": {"src_dir_pattern": [["paths", "glob", "src_dir_pattern", "recursive", "True"]]}, "params_p": {"args": [], "kwargs": [], "src_dir_pattern": [["str", 0.39930728664534126]]}, "q_name": "find_existing_guide_operator_names", "ret_exprs": ["return operator_names"], "ret_type": "builtins.set[builtins.str]", "ret_type_p": [["str", 1.0]], "variables": {"operator_names": "", "paths": ""}, "variables_p": {"operator_names": [["set", 0.26998448323658447], ["str", 0.25815476921187014], ["List[Tuple[int, str]]", 0.17587655800768157], ["dict", 0.10846137198115782], ["Dict[int, str]", 0.10576845320966667], ["Dict[str, Dict[str, Any]]", 0.08175436435303952]], "paths": [["str", 0.4523688997473113]]}}, {"docstring": {"func": "Extracts class definition by name", "long_descr": null, "ret": "class node found"}, "fn_lc": [[51, 0], [63, 15]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "extract_ast_class_def_by_name", "params": {"ast_tree": "", "class_name": ""}, "params_descr": {"ast_tree": "AST tree", "class_name": "name of the class."}, "params_occur": {"ast_tree": [["ast", "walk", "ast_tree"]], "class_name": [["isinstance", "node", "ast", "ClassDef", "node", "name", "class_name"]]}, "params_p": {"args": [], "ast_tree": [["type", 0.17860595487113107], ["str", 0.09953132145608669], ["bytes", 0.09565836847679064], ["Type", 0.09319862402460465], ["List[str]", 0.08946014860648442]], "class_name": [], "kwargs": []}, "q_name": "extract_ast_class_def_by_name", "ret_exprs": ["return node", "return None"], "ret_type": "", "ret_type_p": [["str", 0.10425860784228744], ["Optional[int]", 0.101102387826459]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[66, 0], [78, 5]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "_generate_missing_guide_error", "params": {"line_no": "", "operator_name": "", "path": ""}, "params_descr": {"line_no": "", "operator_name": "", "path": ""}, "params_occur": {"line_no": [["DocBuildError", "file_path", "path", "line_no", "line_no", "message", "operator_name", "operator_name"]], "operator_name": [["DocBuildError", "file_path", "path", "line_no", "line_no", "message", "operator_name", "operator_name"]], "path": [["DocBuildError", "file_path", "path", "line_no", "line_no", "message", "operator_name", "operator_name"]]}, "params_p": {"args": [], "kwargs": [], "line_no": [["str", 1.0000000000000002]], "operator_name": [["str", 1.0000000000000002]], "path": [["str", 1.0000000000000002]]}, "q_name": "_generate_missing_guide_error", "ret_exprs": ["return DocBuildError( file_path=path, line_no=line_no, message=( f\"Link to the guide is missing in operator's description: {operator_name}.n\" f\"Please add link to the guide to the description in the following form:n\" f\"n\" f\".. seealso::n\" f\" For more information on how to use this operator, take a look at the guide:n\" f\" :ref:`howto/operator:{operator_name}`n\" ),)"], "ret_type": "", "ret_type_p": [["Dict[str, Any]", 0.09912040257867696], ["List[Dict[str, str]]", 0.09515933784361742]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Check if there are links to guides in operator's descriptions.", "long_descr": null, "ret": null}, "fn_lc": [[81, 0], [116, 23]], "fn_var_ln": {"build_errors": [[83, 4], [83, 16]], "operator_names": [[98, 8], [98, 22]], "python_module_paths": [[104, 8], [104, 27]]}, "fn_var_occur": {"build_errors": [["build_errors", "extend", "_check_missing_guide_references", "operator_names", "find_existing_guide_operator_names", "DOCS_DIR", "python_module_paths", "chain", "glob", "ROOT_PACKAGE_DIR", "glob", "ROOT_PACKAGE_DIR"], ["build_errors", "extend", "_check_missing_guide_references", "operator_names", "operator_names", "python_module_paths", "python_module_paths"]], "operator_names": [["build_errors", "extend", "_check_missing_guide_references", "operator_names", "find_existing_guide_operator_names", "DOCS_DIR", "python_module_paths", "chain", "glob", "ROOT_PACKAGE_DIR", "glob", "ROOT_PACKAGE_DIR"], ["operator_names", "find_existing_guide_operator_names", "DOCS_DIR", "provider", "find_existing_guide_operator_names", "DOCS_DIR", "provider"], ["build_errors", "extend", "_check_missing_guide_references", "operator_names", "operator_names", "python_module_paths", "python_module_paths"]], "python_module_paths": [["build_errors", "extend", "_check_missing_guide_references", "operator_names", "find_existing_guide_operator_names", "DOCS_DIR", "python_module_paths", "chain", "glob", "ROOT_PACKAGE_DIR", "glob", "ROOT_PACKAGE_DIR"], ["python_module_paths", "chain", "glob", "provider", "recursive", "True", "glob", "provider", "recursive", "True", "glob", "provider", "recursive", "True"], ["build_errors", "extend", "_check_missing_guide_references", "operator_names", "operator_names", "python_module_paths", "python_module_paths"]]}, "name": "check_guide_links_in_operator_descriptions", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "check_guide_links_in_operator_descriptions", "ret_exprs": ["return build_errors"], "ret_type": "builtins.list[docs.exts.docs_build.errors.DocBuildError]", "ret_type_p": [["str", 0.19998586447224753]], "variables": {"build_errors": "", "operator_names": "", "python_module_paths": ""}, "variables_p": {"build_errors": [["List[Tuple[str, str]]", 0.6038559465238331], ["Tuple[str, str, str]", 0.14132101582814147], ["float", 0.08574840133649421], ["List[Tuple[str, Any, str]]", 0.08538799435820256], ["Dict[str, List[Any]]", 0.08368664195332855]], "operator_names": [["str", 0.9999999999999999]], "python_module_paths": [["str", 0.40146490148103553], ["Tuple[str]", 0.09479425007882798]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[119, 0], [150, 23]], "fn_var_ln": {"ast_tree": [[133, 12], [133, 20]], "build_errors": [[120, 4], [120, 16]], "class_def": [[134, 12], [134, 21]], "docstring": [[139, 12], [139, 21]], "py_content": [[124, 12], [124, 22]]}, "fn_var_occur": {"ast_tree": [["ast_tree", "ast", "parse", "py_content"], ["class_def", "extract_ast_class_def_by_name", "ast_tree", "existing_operator"]], "build_errors": [["build_errors", "append", "_generate_missing_guide_error", "py_module_path", "class_def", "lineno", "existing_operator"]], "class_def": [["class_def", "extract_ast_class_def_by_name", "ast_tree", "existing_operator"], ["class_def", "None"], ["docstring", "ast", "get_docstring", "class_def"], ["build_errors", "append", "_generate_missing_guide_error", "py_module_path", "class_def", "lineno", "existing_operator"]], "docstring": [["docstring", "ast", "get_docstring", "class_def"], ["existing_operator", "docstring"]], "py_content": [["py_content", "f", "read"], ["existing_operator", "py_content"], ["ast_tree", "ast", "parse", "py_content"]]}, "name": "_check_missing_guide_references", "params": {"operator_names": "", "python_module_paths": ""}, "params_descr": {"operator_names": "", "python_module_paths": ""}, "params_occur": {"operator_names": [], "python_module_paths": []}, "params_p": {"args": [], "kwargs": [], "operator_names": [["str", 0.3474083666020417], ["Optional[str]", 0.2612113364165113], ["bool", 0.17414089094434085], ["BinaryIO", 0.08707044547217042]], "python_module_paths": [["str", 0.3474083666020417], ["Optional[str]", 0.2612113364165113], ["bool", 0.17414089094434085], ["BinaryIO", 0.08707044547217042]]}, "q_name": "_check_missing_guide_references", "ret_exprs": ["return build_errors"], "ret_type": "builtins.list[docs.exts.docs_build.errors.DocBuildError]", "ret_type_p": [["str", 0.09434808373479044], ["List[Dict[str, str]]", 0.0918434616649798]], "variables": {"ast_tree": "", "build_errors": "", "class_def": "", "docstring": "", "py_content": ""}, "variables_p": {"ast_tree": [["Dict[str, Union[dict, int]]", 0.09236491452504424], ["Dict[str, Any]", 0.08624171052130274]], "build_errors": [["Type[range]", 0.27644277626904434], ["list", 0.19899095392055122], ["bool", 0.11429308302364119], ["List[str]", 0.11181805197610341], ["int", 0.09479285381664114]], "class_def": [["str", 0.601276585937097], ["Dict[str, Any]", 0.10068965574618867]], "docstring": [["Dict[str, int]", 0.9999999998054235], ["list", 2.668682299364027e-11], ["Tuple[Literal, Literal, Literal]", 2.5973179132715253e-11]], "py_content": [["dict", 0.4313621886442189], ["Dict[str, str]", 0.1521658425567693], ["Dict[Any, str]", 0.08106286785793276], ["Dict[str, Any]", 0.08052262691468054], ["str", 0.07806935135061017]]}}, {"docstring": {"func": "Asserts that file does not contain the pattern. Return message error if it does.", "long_descr": null, "ret": null}, "fn_lc": [[153, 0], [163, 68]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "assert_file_not_contains", "params": {"file_path": "builtins.str", "message": "str | None", "pattern": "builtins.str"}, "params_descr": {"file_path": "file", "message": "message to return", "pattern": "pattern"}, "params_occur": {"file_path": [["_extract_file_content", "file_path", "message", "pattern", "False"]], "message": [["_extract_file_content", "file_path", "message", "pattern", "False"]], "pattern": [["_extract_file_content", "file_path", "message", "pattern", "False"]]}, "params_p": {"args": [], "file_path": [["str", 0.914085906326432]], "kwargs": [], "message": [["str", 0.914085906326432]], "pattern": [["str", 0.914085906326432]]}, "q_name": "assert_file_not_contains", "ret_exprs": ["return _extract_file_content(file_path, message, pattern, False)"], "ret_type": "DocBuildError | None", "ret_type_p": [["str", 0.3902453902446097], ["Tuple[str]", 0.10097117780038121], ["Optional[str]", 0.09079015957726097]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Asserts that file does contain the pattern. Return message error if it does not.", "long_descr": null, "ret": null}, "fn_lc": [[166, 0], [174, 67]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "assert_file_contains", "params": {"file_path": "builtins.str", "message": "str | None", "pattern": "builtins.str"}, "params_descr": {"file_path": "file", "message": "message to return", "pattern": "pattern"}, "params_occur": {"file_path": [["_extract_file_content", "file_path", "message", "pattern", "True"]], "message": [["_extract_file_content", "file_path", "message", "pattern", "True"]], "pattern": [["_extract_file_content", "file_path", "message", "pattern", "True"]]}, "params_p": {"args": [], "file_path": [["str", 0.9999999999999999]], "kwargs": [], "message": [["str", 0.9999999999999999]], "pattern": [["str", 0.9999999999999999]]}, "q_name": "assert_file_contains", "ret_exprs": ["return _extract_file_content(file_path, message, pattern, True)"], "ret_type": "DocBuildError | None", "ret_type_p": [["str", 0.3902453902446097], ["Tuple[str]", 0.10097117780038121], ["Optional[str]", 0.09079015957726097]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[177, 0], [193, 15]], "fn_var_ln": {"found": [[189, 16], [189, 21]], "line_decode": [[184, 12], [184, 23]], "message": [[179, 8], [179, 15]], "pattern_compiled": [[181, 8], [181, 24]], "result": [[185, 12], [185, 18]]}, "fn_var_occur": {"found": [["found", "False"], ["found", "True"], ["expected_contain", "found"]], "line_decode": [["line_decode", "line", "decode"], ["result", "re", "search", "pattern_compiled", "line_decode"]], "message": [["message", "pattern", "file_path"], ["DocBuildError", "file_path", "file_path", "line_no", "num", "message", "message"], ["DocBuildError", "file_path", "file_path", "line_no", "None", "message", "message"]], "pattern_compiled": [["pattern_compiled", "re", "compile", "pattern"], ["result", "re", "search", "pattern_compiled", "line_decode"]], "result": [["result", "re", "search", "pattern_compiled", "line_decode"], ["expected_contain", "result"], ["expected_contain", "result"]]}, "name": "_extract_file_content", "params": {"expected_contain": "builtins.bool", "file_path": "builtins.str", "message": "str | None", "pattern": "builtins.str"}, "params_descr": {"expected_contain": "", "file_path": "", "message": "", "pattern": ""}, "params_occur": {"expected_contain": [["expected_contain", "result"], ["expected_contain", "result"], ["expected_contain", "found"]], "file_path": [["message", "pattern", "file_path"], ["open", "file_path", "doc_file"], ["DocBuildError", "file_path", "file_path", "line_no", "num", "message", "message"], ["DocBuildError", "file_path", "file_path", "line_no", "None", "message", "message"]], "message": [["message", "pattern", "file_path"], ["DocBuildError", "file_path", "file_path", "line_no", "num", "message", "message"], ["DocBuildError", "file_path", "file_path", "line_no", "None", "message", "message"]], "pattern": [["message", "pattern", "file_path"], ["pattern_compiled", "re", "compile", "pattern"]]}, "params_p": {"args": [], "expected_contain": [["bool", 0.2887688414216729], ["List[Dict[str, Any]]", 0.17969981647919736], ["Dict[str, List[Any]]", 0.09960239090194879], ["str", 0.09563185236638302], ["List[str]", 0.08230221496357401]], "file_path": [["str", 0.5037632291032205], ["int", 0.41398916332744673], ["Optional[str]", 0.08224760756933282]], "kwargs": [], "message": [["str", 0.7034863365986659], ["int", 0.09861832490284443], ["bool", 0.09724629257052853]], "pattern": [["Optional[str]", 0.446409492986207], ["str", 0.35269549301146047], ["Dict[str, Any]", 0.10263949281534492]]}, "q_name": "_extract_file_content", "ret_exprs": ["return DocBuildError(file_path=file_path, line_no=num, message=message)", "return DocBuildError(file_path=file_path, line_no=None, message=message)", "return None"], "ret_type": "", "ret_type_p": [["str", 0.1884639056857384], ["Iterable[str]", 0.18757318771016007], ["Optional[str]", 0.13647630353899978]], "variables": {"found": "", "line_decode": "", "message": "", "pattern_compiled": "", "result": ""}, "variables_p": {"found": [["bool", 0.3040553971154161], ["str", 0.30073115616205753], ["List[Tuple[Any, Any]]", 0.11895605951535805], ["Dict[str, bool]", 0.09421178927670837], ["List[str]", 0.09421178927670837]], "line_decode": [["str", 0.7553141172117451], ["List[str]", 0.24468588278825504]], "message": [["str", 0.4139973982467148], ["Dict[str, str]", 0.0927967851792918]], "pattern_compiled": [["str", 0.9999999999999998]], "result": [["dict", 0.1987001358949376], ["Generator[Any, None, None]", 0.19361392257211515], ["List[str]", 0.08754677755134933], ["Pattern[str]", 0.08743843145552457], ["Dict[Any, Tuple[int, int]]", 0.08335403589873706]]}}, {"docstring": {"func": "Filters file list to those that content matches the pattern", "long_descr": null, "ret": "list of files matching the pattern"}, "fn_lc": [[196, 0], [210, 23]], "fn_var_ln": {"output_paths": [[203, 4], [203, 16]], "pattern_compiled": [[204, 4], [204, 20]], "text_file_content": [[207, 12], [207, 29]]}, "fn_var_occur": {"output_paths": [["output_paths", "append", "file_path"]], "pattern_compiled": [["pattern_compiled", "re", "compile", "pattern"], ["re", "findall", "pattern_compiled", "text_file_content"]], "text_file_content": [["text_file_content", "text_file", "read", "decode"], ["re", "findall", "pattern_compiled", "text_file_content"]]}, "name": "filter_file_list_by_pattern", "params": {"file_paths": "typing.Iterable[builtins.str]", "pattern": "builtins.str"}, "params_descr": {"file_paths": "file paths to check", "pattern": "pattern to match"}, "params_occur": {"file_paths": [], "pattern": [["pattern_compiled", "re", "compile", "pattern"]]}, "params_p": {"args": [], "file_paths": [["str", 0.32933199902871696], ["Tuple[str]", 0.2452528536242695], ["bool", 0.09811560963411736], ["bytes", 0.04706431949277482]], "kwargs": [], "pattern": [["str", 0.7022485513418373]]}, "q_name": "filter_file_list_by_pattern", "ret_exprs": ["return output_paths"], "ret_type": "builtins.list[builtins.str]", "ret_type_p": [["str", 0.43450486035382274]], "variables": {"output_paths": "", "pattern_compiled": "", "text_file_content": ""}, "variables_p": {"output_paths": [["str", 0.13510275058820403]], "pattern_compiled": [["str", 0.18764631078219865], ["int", 0.10443670054031716], ["Dict[str, Dict[str, Any]]", 0.09944675549058261], ["bool", 0.08894267056305978], ["Final", 0.07757884645540256], ["Dict[int, bytes]", 0.07573242266541469]], "text_file_content": [["str", 0.7029357662281086], ["Callable(open)[..., Any][[[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal], default), Named(buffering, int, default), Named(encoding, Optional[str], default), Named(errors, Optional[str], default), Named(newline, Optional[str], default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.TextIOWrapper][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, Literal), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.FileIO][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, Union[Literal[-1], Literal], default), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.BufferedRandom][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, Union[Literal[-1], Literal], default), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.BufferedWriter][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, Union[Literal[-1], Literal], default), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.BufferedReader][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, int), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], BinaryIO][Any, Any]]", 0.12720630442016212]]}}, {"docstring": {"func": "Finds all modules.", "long_descr": null, "ret": "set of all modules found"}, "fn_lc": [[213, 0], [228, 24]], "fn_var_ln": {"file_paths": [[225, 4], [225, 14]], "modules_names": [[227, 4], [227, 17]]}, "fn_var_occur": {"file_paths": [["file_paths", "glob", "ROOT_PACKAGE_DIR", "recursive", "True"], ["file_paths", "f", "f", "file_paths", "f", "endswith"], ["file_paths", "filter_file_list_by_pattern", "file_paths"], ["file_paths", "os", "path", "relpath", "f", "ROOT_PROJECT_DIR", "f", "file_paths"], ["modules_names", "file_path", "rpartition", "replace", "file_path", "file_paths"]], "modules_names": [["modules_names", "file_path", "rpartition", "replace", "file_path", "file_paths"]]}, "name": "find_modules", "params": {"deprecated_only": "builtins.bool"}, "params_descr": {"deprecated_only": "whether only deprecated modules should be found."}, "params_occur": {"deprecated_only": []}, "params_p": {"args": [], "deprecated_only": [["str", 0.3252903426144205], ["T", 0.09386679908350563], ["Optional[str]", 0.08475611864787004], ["bool", 0.0814561775289334]], "kwargs": []}, "q_name": "find_modules", "ret_exprs": ["return modules_names"], "ret_type": "builtins.set[builtins.str]", "ret_type_p": [["str", 0.48675689721165266], ["Optional[str]", 0.2000423036531559]], "variables": {"file_paths": "", "modules_names": ""}, "variables_p": {"file_paths": [["str", 0.41194235109460653]], "modules_names": [["str", 0.9080337028662884], ["Union[Literal, str]", 0.09196629713371177]]}}, {"docstring": {"func": "Checks all exampleincludes for example dags.", "long_descr": null, "ret": null}, "fn_lc": [[231, 0], [246, 23]], "fn_var_ln": {"all_docs_files": [[233, 4], [233, 18]], "build_error": [[236, 8], [236, 19]], "build_errors": [[234, 4], [234, 16]]}, "fn_var_occur": {"all_docs_files": [["all_docs_files", "glob", "DOCS_DIR", "recursive", "True"]], "build_error": [["build_error", "assert_file_not_contains", "file_path", "doc_file", "pattern", "message"], ["build_errors", "append", "build_error"]], "build_errors": [["build_errors", "append", "build_error"]]}, "name": "check_exampleinclude_for_example_dags", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "check_exampleinclude_for_example_dags", "ret_exprs": ["return build_errors"], "ret_type": "builtins.list[docs.exts.docs_build.errors.DocBuildError]", "ret_type_p": [["str", 0.10623679206094255]], "variables": {"all_docs_files": "", "build_error": "", "build_errors": ""}, "variables_p": {"all_docs_files": [["str", 0.9999999999999999]], "build_error": [["str", 0.3020601263716226], ["list", 0.16372340442426947], ["List[Optional[str]]", 0.15977546223069503], ["bool", 0.10982506059332608], ["List[str]", 0.09561692922569433], ["Dict[str, str]", 0.08481655080182944], ["Optional[int]", 0.08418246635256309]], "build_errors": [["List[str]", 0.8017794850347486], ["List[Tuple[str, str]]", 0.11001480854017669], ["int", 0.08820570642507464]]}}, {"docstring": {"func": "Checks all code:: blocks.", "long_descr": null, "ret": null}, "fn_lc": [[249, 0], [264, 23]], "fn_var_ln": {"all_docs_files": [[251, 4], [251, 18]], "build_error": [[254, 8], [254, 19]], "build_errors": [[252, 4], [252, 16]]}, "fn_var_occur": {"all_docs_files": [["all_docs_files", "glob", "DOCS_DIR", "recursive", "True"]], "build_error": [["build_error", "assert_file_not_contains", "file_path", "doc_file", "pattern", "message"], ["build_errors", "append", "build_error"]], "build_errors": [["build_errors", "append", "build_error"]]}, "name": "check_enforce_code_block", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "check_enforce_code_block", "ret_exprs": ["return build_errors"], "ret_type": "builtins.list[docs.exts.docs_build.errors.DocBuildError]", "ret_type_p": [["Dict[str, Any]", 0.10477783818311448], ["List[Dict[str, str]]", 0.09469638608736076]], "variables": {"all_docs_files": "", "build_error": "", "build_errors": ""}, "variables_p": {"all_docs_files": [["str", 0.9999999999999999]], "build_error": [["str", 0.3020601263716226], ["list", 0.16372340442426947], ["List[Optional[str]]", 0.15977546223069503], ["bool", 0.10982506059332608], ["List[str]", 0.09561692922569433], ["Dict[str, str]", 0.08481655080182944], ["Optional[int]", 0.08418246635256309]], "build_errors": [["List[str]", 0.8017794850347486], ["List[Tuple[str, str]]", 0.11001480854017669], ["int", 0.08820570642507464]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[267, 0], [270, 93]], "fn_var_ln": {"system_tests_dir": [[268, 4], [268, 20]]}, "fn_var_occur": {"system_tests_dir": [["system_tests_dir", "provider_dir", "replace", "ROOT_PACKAGE_DIR"], ["glob", "ROOT_PROJECT_DIR", "system_tests_dir", "recursive", "True"]]}, "name": "find_example_dags", "params": {"provider_dir": ""}, "params_descr": {"provider_dir": ""}, "params_occur": {"provider_dir": [["system_tests_dir", "provider_dir", "replace", "ROOT_PACKAGE_DIR"], ["glob", "provider_dir", "recursive", "True"]]}, "params_p": {"args": [], "kwargs": [], "provider_dir": [["str", 0.9072513112735567]]}, "q_name": "find_example_dags", "ret_exprs": [], "ret_type": "", "variables": {"system_tests_dir": ""}, "variables_p": {"system_tests_dir": [["str", 0.5868446306378231], ["Optional[str]", 0.11659361802135912]]}}, {"docstring": {"func": "Checks that each documentation for provider packages has a link to PyPI files in the TOC.", "long_descr": null, "ret": null}, "fn_lc": [[273, 0], [290, 23]], "fn_var_ln": {"build_error": [[279, 8], [279, 19]], "build_errors": [[275, 4], [275, 16]], "doc_file_path": [[277, 8], [277, 21]], "expected_text": [[278, 8], [278, 21]]}, "fn_var_occur": {"build_error": [["build_error", "assert_file_contains", "file_path", "doc_file_path", "pattern", "re", "escape", "expected_text", "message", "expected_text"], ["build_errors", "append", "build_error"]], "build_errors": [["build_errors", "append", "build_error"]], "doc_file_path": [["doc_file_path", "DOCS_DIR", "provider"], ["build_error", "assert_file_contains", "file_path", "doc_file_path", "pattern", "re", "escape", "expected_text", "message", "expected_text"]], "expected_text": [["expected_text", "provider"], ["build_error", "assert_file_contains", "file_path", "doc_file_path", "pattern", "re", "escape", "expected_text", "message", "expected_text"]]}, "name": "check_pypi_repository_in_provider_tocs", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "check_pypi_repository_in_provider_tocs", "ret_exprs": ["return build_errors"], "ret_type": "builtins.list[docs.exts.docs_build.errors.DocBuildError]", "ret_type_p": [], "variables": {"build_error": "", "build_errors": "", "doc_file_path": "", "expected_text": ""}, "variables_p": {"build_error": [["str", 0.4363377319556321], ["dict", 0.12089679242787547], ["tuple", 0.09498316077578106], ["int", 0.09195751897469158], ["List[str]", 0.08980984474148507], ["Dict[str, str]", 0.08427978818262961], ["bool", 0.08173516294190514]], "build_errors": [["List[str]", 0.8017794850347486], ["List[Tuple[str, str]]", 0.11001480854017669], ["int", 0.08820570642507464]], "doc_file_path": [["str", 0.713672358720715]], "expected_text": [["str", 0.6062587608839888], ["List[str]", 0.10697774553547282], ["Tuple[Any, Any]", 0.09682903313888057], ["Pattern[str]", 0.09606753439052482]]}}, {"docstring": {"func": "Run all checks from this module", "long_descr": null, "ret": null}, "fn_lc": [[293, 0], [301, 25]], "fn_var_ln": {"general_errors": [[295, 4], [295, 18]]}, "fn_var_occur": {"general_errors": [["general_errors", "extend", "check_guide_links_in_operator_descriptions"], ["general_errors", "extend", "check_enforce_code_block"], ["general_errors", "extend", "check_exampleinclude_for_example_dags"], ["general_errors", "extend", "check_pypi_repository_in_provider_tocs"]]}, "name": "run_all_check", "params": {"disable_provider_checks": "builtins.bool"}, "params_descr": {"disable_provider_checks": ""}, "params_occur": {"disable_provider_checks": []}, "params_p": {"args": [], "disable_provider_checks": [["bool", 0.20182920535827742], ["Type", 0.18584102944210915], ["List[Dict[int, float]]", 0.11015855188336099]], "kwargs": []}, "q_name": "run_all_check", "ret_exprs": ["return general_errors"], "ret_type": "builtins.list[docs.exts.docs_build.errors.DocBuildError]", "ret_type_p": [["bool", 0.18800621909567888], ["Optional[Union[Any, Any]]", 0.093294149113195], ["str", 0.0887753864415267]], "variables": {"general_errors": ""}, "variables_p": {"general_errors": [["str", 0.4118352729361323], ["bool", 0.1702064141324919], ["list", 0.11647444322917747], ["int", 0.08546861680904073], ["Type[Exception]", 0.08510320706624595]]}}], "imports": ["__future__", "annotations", "ast", "os", "re", "glob", "glob", "itertools", "chain", "typing", "Iterable", "docs", "exts", "docs_build", "docs_builder", "ALL_PROVIDER_YAMLS", "docs", "exts", "docs_build", "errors", "DocBuildError"], "mod_var_ln": {"DOCS_DIR": [[33, 0], [33, 8]], "ROOT_PACKAGE_DIR": [[32, 0], [32, 16]], "ROOT_PROJECT_DIR": [[29, 0], [29, 16]]}, "mod_var_occur": {"DOCS_DIR": [["build_errors", "extend", "_check_missing_guide_references", "operator_names", "find_existing_guide_operator_names", "DOCS_DIR", "python_module_paths", "chain", "glob", "ROOT_PACKAGE_DIR", "glob", "ROOT_PACKAGE_DIR"], ["operator_names", "find_existing_guide_operator_names", "DOCS_DIR", "provider", "find_existing_guide_operator_names", "DOCS_DIR", "provider"], ["all_docs_files", "glob", "DOCS_DIR", "recursive", "True"], ["all_docs_files", "glob", "DOCS_DIR", "recursive", "True"], ["doc_file_path", "DOCS_DIR", "provider"]], "ROOT_PACKAGE_DIR": [["build_errors", "extend", "_check_missing_guide_references", "operator_names", "find_existing_guide_operator_names", "DOCS_DIR", "python_module_paths", "chain", "glob", "ROOT_PACKAGE_DIR", "glob", "ROOT_PACKAGE_DIR"], ["file_paths", "glob", "ROOT_PACKAGE_DIR", "recursive", "True"], ["system_tests_dir", "provider_dir", "replace", "ROOT_PACKAGE_DIR"]], "ROOT_PROJECT_DIR": [["ROOT_PACKAGE_DIR", "os", "path", "join", "ROOT_PROJECT_DIR"], ["DOCS_DIR", "os", "path", "join", "ROOT_PROJECT_DIR"], ["file_paths", "os", "path", "relpath", "f", "ROOT_PROJECT_DIR", "f", "file_paths"], ["glob", "ROOT_PROJECT_DIR", "system_tests_dir", "recursive", "True"]]}, "no_types_annot": {"D": 25, "I": 0, "U": 47}, "session_id": "ZKU94wlGif1teF1pI1ZtNoAPq0DfM-I9TdBqoY0ika8", "set": null, "tc": [false, null], "type_annot_cove": 0.35, "typed_seq": "", "untyped_seq": "", "variables": {"DOCS_DIR": "", "ROOT_PACKAGE_DIR": "", "ROOT_PROJECT_DIR": ""}, "variables_p": {"DOCS_DIR": [["str", 0.29657952675556415], ["Tuple[str]", 0.09318515555105837], ["List[str]", 0.08800695325484076]], "ROOT_PACKAGE_DIR": [["str", 0.38357600093833893], ["List[str]", 0.10292411500279586], ["Tuple[str]", 0.09005461634745714]], "ROOT_PROJECT_DIR": [["str", 1.0]]}}}