{"error": null, "response": {"classes": [{"cls_lc": [[62, 0], [68, 32]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[63, 4], [65, 40]], "fn_var_ln": {"return_value": [[65, 8], [65, 25]]}, "fn_var_occur": {"return_value": [["self", "return_value", "return_value"]]}, "name": "__init__", "params": {"kwargs": "", "return_value": "", "self": ""}, "params_descr": {"kwargs": "", "return_value": "", "self": ""}, "params_occur": {"kwargs": [["super", "__init__", "kwargs"]], "return_value": [["self", "return_value", "return_value"]], "self": [["self", "return_value", "return_value"]]}, "params_p": {"args": [], "kwargs": [], "return_value": [["int", 0.6693364633392653], ["bool", 0.24047738978441988], ["str", 0.09018614687631468]], "self": []}, "q_name": "DummySensor.__init__", "ret_exprs": [], "ret_type": "", "variables": {"return_value": ""}, "variables_p": {"return_value": [["int", 0.19452321760254207], ["str", 0.18928615221697093], ["datetime.datetime.datetime", 0.11587380465395383], ["Dict[str, int]", 0.10374455129180508], ["Dict[str, Union[Any, Any, Any]]", 0.10279530248830075], ["Dict[str, str]", 0.09978721212753934], ["List[str]", 0.08980532518357047]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[67, 4], [68, 32]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "poke", "params": {"context": "airflow.utils.context.Context", "self": ""}, "params_descr": {"context": "", "self": ""}, "params_occur": {"context": [], "self": [["self", "return_value"]]}, "params_p": {"args": [], "context": [["int", 0.19999999999999998], ["str", 0.19999999999999998], ["Iterable['Context']", 0.09999999999999999], ["dict", 0.09999999999999999], ["bool", 0.09999999999999999]], "kwargs": [], "self": []}, "q_name": "DummySensor.poke", "ret_exprs": ["return self.return_value"], "ret_type": "", "ret_type_p": [["float", 0.5014281674021597], ["Optional[Callable[[str], bool]]", 0.1030664479276499], ["datetime.datetime", 0.09635527045384133]], "variables": {}, "variables_p": {}}], "name": "DummySensor", "q_name": "DummySensor", "variables": {}, "variables_p": {}}, {"cls_lc": [[71, 0], [78, 66]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[72, 4], [75, 40]], "fn_var_ln": {"return_value": [[75, 8], [75, 25]], "xcom_value": [[74, 8], [74, 23]]}, "fn_var_occur": {"return_value": [["self", "return_value", "return_value"]], "xcom_value": [["self", "xcom_value", "xcom_value"]]}, "name": "__init__", "params": {"kwargs": "", "return_value": "", "self": "", "xcom_value": ""}, "params_descr": {"kwargs": "", "return_value": "", "self": "", "xcom_value": ""}, "params_occur": {"kwargs": [["super", "__init__", "kwargs"]], "return_value": [["self", "return_value", "return_value"]], "self": [["self", "xcom_value", "xcom_value"], ["self", "return_value", "return_value"]], "xcom_value": [["self", "xcom_value", "xcom_value"]]}, "params_p": {"args": [], "kwargs": [], "return_value": [["int", 0.28114512873055153], ["bool", 0.23597945183436514], ["Dict[str, Any]", 0.1128040656074998], ["datetime.datetime", 0.10422027970242853], ["Union[int, float]", 0.09088623593224357]], "self": [], "xcom_value": [["int", 0.26040734144820804], ["Optional[bool]", 0.052559270871616603]]}, "q_name": "DummySensorWithXcomValue.__init__", "ret_exprs": [], "ret_type": "", "variables": {"return_value": "", "xcom_value": ""}, "variables_p": {"return_value": [["int", 0.19452321760254207], ["str", 0.18928615221697093], ["datetime.datetime.datetime", 0.11587380465395383], ["Dict[str, int]", 0.10374455129180508], ["Dict[str, Union[Any, Any, Any]]", 0.10279530248830075], ["Dict[str, str]", 0.09978721212753934], ["List[str]", 0.08980532518357047]], "xcom_value": [["int", 0.5150091531957903], ["float", 0.2325143600068219], ["str", 0.08615926767097115], ["List[int]", 0.08369927582949417], ["list", 0.08261794329692228]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[77, 4], [78, 66]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "poke", "params": {"context": "airflow.utils.context.Context", "self": ""}, "params_descr": {"context": "", "self": ""}, "params_occur": {"context": [], "self": [["PokeReturnValue", "self", "return_value", "self", "xcom_value"]]}, "params_p": {"args": [], "context": [["int", 0.19999999999999998], ["str", 0.19999999999999998], ["Iterable['Context']", 0.09999999999999999], ["dict", 0.09999999999999999], ["bool", 0.09999999999999999]], "kwargs": [], "self": []}, "q_name": "DummySensorWithXcomValue.poke", "ret_exprs": ["return PokeReturnValue(self.return_value, self.xcom_value)"], "ret_type": "", "ret_type_p": [["str", 0.3755511049749894]], "variables": {}, "variables_p": {}}], "name": "DummySensorWithXcomValue", "q_name": "DummySensorWithXcomValue", "variables": {}, "variables_p": {}}, {"cls_lc": [[81, 0], [863, 36]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[83, 4], [86, 26]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "clean_db", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestBaseSensor.clean_db", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "(auto use)", "long_descr": null, "ret": null}, "fn_lc": [[89, 4], [95, 23]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "_auto_clean", "params": {"dag_maker": "", "self": ""}, "params_descr": {"dag_maker": "", "self": ""}, "params_occur": {"dag_maker": [], "self": [["self", "clean_db"], ["self", "clean_db"]]}, "params_p": {"args": [], "dag_maker": [["int", 0.19999999999999998], ["str", 0.19999999999999998], ["Iterable['Context']", 0.09999999999999999], ["dict", 0.09999999999999999], ["bool", 0.09999999999999999]], "kwargs": [], "self": []}, "q_name": "TestBaseSensor._auto_clean", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[101, 8], [118, 52]], "fn_var_ln": {"dummy_op": [[116, 16], [116, 24]], "poke_interval": [[102, 12], [102, 25]], "sensor": [[114, 20], [114, 26]], "timeout": [[103, 12], [103, 19]]}, "fn_var_occur": {"dummy_op": [["dummy_op", "EmptyOperator", "task_id", "DUMMY_OP"], ["sensor", "dummy_op"]], "poke_interval": [["poke_interval", "kwargs"], ["kwargs", "poke_interval"]], "sensor": [["sensor", "DummySensorWithXcomValue", "task_id", "task_id", "return_value", "return_value", "kwargs"], ["sensor", "DummySensor", "task_id", "task_id", "return_value", "return_value", "kwargs"], ["sensor", "dummy_op"], ["sensor", "dag_maker", "create_dagrun"]], "timeout": [["timeout", "kwargs"], ["kwargs", "timeout"]]}, "name": "_make_sensor", "params": {"kwargs": "", "return_value": "", "task_id": ""}, "params_descr": {"kwargs": "", "return_value": "", "task_id": ""}, "params_occur": {"kwargs": [["poke_interval", "kwargs"], ["kwargs", "poke_interval"], ["timeout", "kwargs"], ["kwargs", "timeout"], ["sensor", "DummySensorWithXcomValue", "task_id", "task_id", "return_value", "return_value", "kwargs"], ["sensor", "DummySensor", "task_id", "task_id", "return_value", "return_value", "kwargs"]], "return_value": [["sensor", "DummySensorWithXcomValue", "task_id", "task_id", "return_value", "return_value", "kwargs"], ["sensor", "DummySensor", "task_id", "task_id", "return_value", "return_value", "kwargs"]], "task_id": [["sensor", "DummySensorWithXcomValue", "task_id", "task_id", "return_value", "return_value", "kwargs"], ["sensor", "DummySensor", "task_id", "task_id", "return_value", "return_value", "kwargs"], ["dummy_op", "EmptyOperator", "task_id", "DUMMY_OP"]]}, "params_p": {"args": [], "kwargs": [], "return_value": [["int", 0.2737776823815707], ["str", 0.21107669770101561], ["Dict[str, Any]", 0.1852027804468921], ["Optional[str]", 0.1107126485588404]], "self": [], "task_id": [["int", 0.2737776823815707], ["str", 0.21107669770101561], ["Dict[str, Any]", 0.1852027804468921], ["Optional[str]", 0.1107126485588404]]}, "q_name": "TestBaseSensor.make_sensor.<locals>._make_sensor", "ret_exprs": ["return sensor, dag_maker.create_dagrun()"], "ret_type": "", "ret_type_p": [["int", 0.2109077157891901]], "variables": {"dummy_op": "", "poke_interval": "", "sensor": "", "timeout": ""}, "variables_p": {"dummy_op": [["int", 0.3015410795607974], ["str", 0.1862782264314775], ["Dict[str, Union[datetime.timedelta, str]]", 0.14263919006015305], ["Dict[str, Dict[str, Any]]", 0.12257496406028633], ["bytes", 0.07636381367521491]], "poke_interval": [["Tuple[int, int, int]", 0.38103662589721504], ["list", 0.2165437983894039], ["List[int]", 0.1309802836659275], ["int", 0.08740545117221278]], "sensor": [["raiden.utils.PaymentID", 0.19743793510258012], ["str", 0.10275509187439509], ["Mapping", 0.10275509187439509], ["Dict[str, Any]", 0.0991426517348988]], "timeout": [["int", 0.7123315147295097], ["List[None]", 0.09701798849625357], ["List[int]", 0.09599004730812281]]}}, {"docstring": {"func": "Create a DummySensor and associated DagRun", "long_descr": null, "ret": null}, "fn_lc": [[98, 4], [120, 27]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "make_sensor", "params": {"dag_maker": "", "self": ""}, "params_descr": {"dag_maker": "", "self": ""}, "params_occur": {"dag_maker": [], "self": []}, "params_p": {"args": [], "dag_maker": [["int", 0.19999999999999998], ["str", 0.19999999999999998], ["Iterable['Context']", 0.09999999999999999], ["dict", 0.09999999999999999], ["bool", 0.09999999999999999]], "kwargs": [], "self": []}, "q_name": "TestBaseSensor.make_sensor", "ret_exprs": ["return _make_sensor"], "ret_type": "", "ret_type_p": [["int", 0.30000000000000004], ["Callable", 0.2], ["models.Question", 0.1], ["str", 0.1]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[123, 4], [124, 96]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "_run", "params": {"cls": "", "kwargs": "", "task": ""}, "params_descr": {"cls": "", "kwargs": "", "task": ""}, "params_occur": {"cls": [], "kwargs": [["task", "run", "start_date", "DEFAULT_DATE", "end_date", "DEFAULT_DATE", "ignore_ti_state", "True", "kwargs"]], "task": [["task", "run", "start_date", "DEFAULT_DATE", "end_date", "DEFAULT_DATE", "ignore_ti_state", "True", "kwargs"]]}, "params_p": {"args": [], "cls": [["List[aw_core.models.Event]", 0.1944479926999707], ["str", 0.09851756769801397], ["List[dict]", 0.09132469358163539]], "kwargs": [], "self": [], "task": [["int", 0.1045000244380388], ["raiden.utils.ChannelID", 0.0892115739243558], ["OrderedDict", 0.0890147461113609], ["aw_core.models.Event", 0.08263082693555417]]}, "q_name": "TestBaseSensor._run", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[126, 4], [136, 45]], "fn_var_ln": {"dr": [[127, 16], [127, 18]], "sensor": [[127, 8], [127, 14]], "tis": [[130, 8], [130, 11]]}, "fn_var_occur": {"dr": [["sensor", "dr", "make_sensor", "True"], ["tis", "dr", "get_task_instances"]], "sensor": [["sensor", "dr", "make_sensor", "True"], ["self", "_run", "sensor"]], "tis": [["tis", "dr", "get_task_instances"], ["len", "tis"]]}, "name": "test_ok", "params": {"make_sensor": "", "self": ""}, "params_descr": {"make_sensor": "", "self": ""}, "params_occur": {"make_sensor": [["sensor", "dr", "make_sensor", "True"]], "self": [["self", "_run", "sensor"]]}, "params_p": {"args": [], "kwargs": [], "make_sensor": [["tests.basilisp.helpers.CompileFn", 0.09192473280782588], ["str", 0.08225718754365409]], "self": []}, "q_name": "TestBaseSensor.test_ok", "ret_exprs": [], "ret_type": "", "variables": {"dr": "", "sensor": "", "tis": ""}, "variables_p": {"dr": [["List[str]", 0.2110373453242399], ["dict", 0.09704334005049581]], "sensor": [["bool", 0.10073418189437058]], "tis": [["list", 0.6176592411763635], ["List[str]", 0.1802440722184468]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[138, 4], [149, 45]], "fn_var_ln": {"dr": [[139, 16], [139, 18]], "sensor": [[139, 8], [139, 14]], "tis": [[143, 8], [143, 11]]}, "fn_var_occur": {"dr": [["sensor", "dr", "make_sensor", "False"], ["tis", "dr", "get_task_instances"]], "sensor": [["sensor", "dr", "make_sensor", "False"], ["self", "_run", "sensor"]], "tis": [["tis", "dr", "get_task_instances"], ["len", "tis"]]}, "name": "test_fail", "params": {"make_sensor": "", "self": ""}, "params_descr": {"make_sensor": "", "self": ""}, "params_occur": {"make_sensor": [["sensor", "dr", "make_sensor", "False"]], "self": [["self", "_run", "sensor"]]}, "params_p": {"args": [], "kwargs": [], "make_sensor": [["tests.basilisp.helpers.CompileFn", 2.8202489010330548e-11]], "self": []}, "q_name": "TestBaseSensor.test_fail", "ret_exprs": [], "ret_type": "", "variables": {"dr": "", "sensor": "", "tis": ""}, "variables_p": {"dr": [["str", 0.29447478844926855]], "sensor": [["str", 0.1054209104925942], ["pytch.utils.Position", 0.09396976240148751]], "tis": [["list", 0.6176592411763635], ["List[str]", 0.1802440722184468]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[151, 4], [161, 45]], "fn_var_ln": {"dr": [[152, 16], [152, 18]], "sensor": [[152, 8], [152, 14]], "tis": [[155, 8], [155, 11]]}, "fn_var_occur": {"dr": [["sensor", "dr", "make_sensor", "False", "soft_fail", "True"], ["tis", "dr", "get_task_instances"]], "sensor": [["sensor", "dr", "make_sensor", "False", "soft_fail", "True"], ["self", "_run", "sensor"]], "tis": [["tis", "dr", "get_task_instances"], ["len", "tis"]]}, "name": "test_soft_fail", "params": {"make_sensor": "", "self": ""}, "params_descr": {"make_sensor": "", "self": ""}, "params_occur": {"make_sensor": [["sensor", "dr", "make_sensor", "False", "soft_fail", "True"]], "self": [["self", "_run", "sensor"]]}, "params_p": {"args": [], "kwargs": [], "make_sensor": [], "self": []}, "q_name": "TestBaseSensor.test_soft_fail", "ret_exprs": [], "ret_type": "", "variables": {"dr": "", "sensor": "", "tis": ""}, "variables_p": {"dr": [["str", 0.27267594280488633], ["int", 0.14712240697075873], ["bytes", 0.10073721484456627]], "sensor": [["src.pip_shims.models.ShimmedPathCollection", 0.09531145750050306]], "tis": [["list", 0.6176592411763635], ["List[str]", 0.1802440722184468]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[163, 4], [176, 45]], "fn_var_ln": {"dr": [[164, 16], [164, 18]], "sensor": [[164, 8], [164, 14]], "tis": [[170, 8], [170, 11]]}, "fn_var_occur": {"dr": [["sensor", "dr", "make_sensor", "return_value", "False", "soft_fail", "True", "retries", "retry_delay", "timedelta", "milliseconds"], ["tis", "dr", "get_task_instances"]], "sensor": [["sensor", "dr", "make_sensor", "return_value", "False", "soft_fail", "True", "retries", "retry_delay", "timedelta", "milliseconds"], ["self", "_run", "sensor"]], "tis": [["tis", "dr", "get_task_instances"], ["len", "tis"]]}, "name": "test_soft_fail_with_retries", "params": {"make_sensor": "", "self": ""}, "params_descr": {"make_sensor": "", "self": ""}, "params_occur": {"make_sensor": [["sensor", "dr", "make_sensor", "return_value", "False", "soft_fail", "True", "retries", "retry_delay", "timedelta", "milliseconds"]], "self": [["self", "_run", "sensor"]]}, "params_p": {"args": [], "kwargs": [], "make_sensor": [["unittesmock.Mock", 0.0930430249559814]], "self": []}, "q_name": "TestBaseSensor.test_soft_fail_with_retries", "ret_exprs": [], "ret_type": "", "variables": {"dr": "", "sensor": "", "tis": ""}, "variables_p": {"dr": [["List[str]", 0.28743711065596445], ["int", 0.17035296921083265], ["List[Dict[str, Any]]", 0.15205774259537544], ["str", 0.12584143276190293], ["Dict[str, Union[Any, Any, Any, Any, str]]", 0.08339308960366462]], "sensor": [["float", 0.23925681630857437], ["int", 0.19464859475669644], ["str", 0.18681331039669408], ["bool", 0.10490881200495004], ["List[str]", 0.08644048827485167]], "tis": [["list", 0.6176592411763635], ["List[str]", 0.1802440722184468]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[178, 4], [233, 45]], "fn_var_ln": {"date1": [[183, 8], [183, 13]], "date2": [[204, 8], [204, 13]], "dr": [[179, 16], [179, 18]], "poke": [[180, 8], [180, 19]], "sensor": [[179, 8], [179, 14]], "task_reschedules": [[215, 16], [215, 32]], "tis": [[225, 8], [225, 11]]}, "fn_var_occur": {"date1": [["date1", "timezone", "utcnow"], ["time_machine", "move_to", "date1", "tick", "False"], ["ti", "start_date", "date1"], ["task_reschedules", "start_date", "date1"], ["task_reschedules", "reschedule_date", "date1", "timedelta", "seconds", "sensor", "poke_interval"], ["date2", "date1", "timedelta", "seconds", "sensor", "poke_interval"], ["ti", "start_date", "date1"], ["ti", "start_date", "date1"]], "date2": [["date2", "date1", "timedelta", "seconds", "sensor", "poke_interval"], ["task_reschedules", "start_date", "date2"], ["task_reschedules", "reschedule_date", "date2", "timedelta", "seconds", "sensor", "poke_interval"]], "dr": [["sensor", "dr", "make_sensor", "return_value", "None", "poke_interval", "timeout", "mode"], ["tis", "dr", "get_task_instances"], ["tis", "dr", "get_task_instances"], ["tis", "dr", "get_task_instances"]], "poke": [["sensor", "poke", "Mock", "side_effect", "False", "False", "True"]], "sensor": [["sensor", "dr", "make_sensor", "return_value", "None", "poke_interval", "timeout", "mode"], ["sensor", "poke", "Mock", "side_effect", "False", "False", "True"], ["self", "_run", "sensor"], ["task_reschedules", "reschedule_date", "date1", "timedelta", "seconds", "sensor", "poke_interval"], ["time_machine", "coordinates", "shift", "sensor", "poke_interval"], ["date2", "date1", "timedelta", "seconds", "sensor", "poke_interval"], ["self", "_run", "sensor"], ["task_reschedules", "reschedule_date", "date2", "timedelta", "seconds", "sensor", "poke_interval"], ["time_machine", "coordinates", "shift", "sensor", "poke_interval"], ["self", "_run", "sensor"]], "task_reschedules": [["task_reschedules", "TaskReschedule", "find_for_task_instance", "ti"], ["len", "task_reschedules"], ["task_reschedules", "start_date", "date1"], ["task_reschedules", "reschedule_date", "date1", "timedelta", "seconds", "sensor", "poke_interval"], ["task_reschedules", "TaskReschedule", "find_for_task_instance", "ti"], ["len", "task_reschedules"], ["task_reschedules", "start_date", "date2"], ["task_reschedules", "reschedule_date", "date2", "timedelta", "seconds", "sensor", "poke_interval"]], "tis": [["tis", "dr", "get_task_instances"], ["len", "tis"], ["tis", "dr", "get_task_instances"], ["len", "tis"], ["tis", "dr", "get_task_instances"], ["len", "tis"]]}, "name": "test_ok_with_reschedule", "params": {"make_sensor": "", "self": "", "time_machine": ""}, "params_descr": {"make_sensor": "", "self": "", "time_machine": ""}, "params_occur": {"make_sensor": [["sensor", "dr", "make_sensor", "return_value", "None", "poke_interval", "timeout", "mode"]], "self": [["self", "_run", "sensor"], ["self", "_run", "sensor"], ["self", "_run", "sensor"]], "time_machine": [["time_machine", "move_to", "date1", "tick", "False"], ["time_machine", "coordinates", "shift", "sensor", "poke_interval"], ["time_machine", "coordinates", "shift", "sensor", "poke_interval"]]}, "params_p": {"args": [], "kwargs": [], "make_sensor": [["Dict[str, Any]", 0.10988061708928054], ["List[src.main.core.models.area.Area]", 0.10936547782520101], ["raiden.utils.List[raiden.raiden_service.RaidenService]", 0.09632134176002974], ["str", 0.09506662286073642], ["tuple", 0.09354644642161708], ["mode.utils.types.trees.NodeT", 0.09353686973924567]], "self": [], "time_machine": [["str", 0.12815348737440857], ["Callable", 0.10155967727329815], ["raiden.utils.TokenAmount", 0.0935291728355206], ["raiden.utils.BlockNumber", 0.0935291728355206]]}, "q_name": "TestBaseSensor.test_ok_with_reschedule", "ret_exprs": [], "ret_type": "", "variables": {"date1": "", "date2": "", "dr": "", "poke": "", "sensor": "", "task_reschedules": "", "tis": ""}, "variables_p": {"date1": [["datetime.date", 0.2103178497105787], ["list", 0.18879343589636016], ["datetime.datetime", 0.17912338843339973], ["Pattern[bytes]", 0.11631347634550358], ["datetime.datetime.datetime", 0.11039711375846292], ["Type[leasing.models.invoice.InvoiceSet]", 0.10686922116996066], ["datetime.datetime.date", 0.08818551468573414]], "date2": [["datetime.datetime", 0.16875129768826314], ["Pattern[bytes]", 0.11328569596926405], ["list", 0.09475796152022943], ["Pattern[str]", 0.09452717618415742], ["datetime.datetime.datetime", 0.08345397569493476], ["Dict[Any, List[str]]", 0.08068971769679156], ["datetime.date", 0.07870921827156142]], "dr": [["str", 0.10076271686943152], ["int", 0.09064863459521637], ["viewer.models.Gallery", 0.08640636737742165]], "poke": [["unittesmock.Mock", 0.2436619055895337], ["str", 0.21662225520483497], ["Dict[int, Dict[str, Any]]", 0.1698730996176522], ["mock.MagicMock", 0.09102832409668954], ["List[int]", 0.09072568690318314], ["list", 0.08492581094986248]], "sensor": [["dict", 0.211966861716935], ["int", 0.20561045754611249], ["str", 0.10092161085223603]], "task_reschedules": [], "tis": [["list", 0.4087567805974396], ["str", 0.1931473826243494], ["List[Tuple[Any, Any]]", 0.10024061325633413], ["int", 0.09770672999564695], ["dict", 0.09691462021947148]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[235, 4], [260, 45]], "fn_var_ln": {"date1": [[239, 8], [239, 13]], "dr": [[236, 16], [236, 18]], "sensor": [[236, 8], [236, 14]], "tis": [[254, 8], [254, 11]]}, "fn_var_occur": {"date1": [["date1", "timezone", "utcnow"], ["time_machine", "move_to", "date1", "tick", "False"]], "dr": [["sensor", "dr", "make_sensor", "return_value", "False", "poke_interval", "timeout", "mode"], ["tis", "dr", "get_task_instances"], ["tis", "dr", "get_task_instances"]], "sensor": [["sensor", "dr", "make_sensor", "return_value", "False", "poke_interval", "timeout", "mode"], ["self", "_run", "sensor"], ["time_machine", "coordinates", "shift", "sensor", "poke_interval"], ["self", "_run", "sensor"]], "tis": [["tis", "dr", "get_task_instances"], ["len", "tis"], ["tis", "dr", "get_task_instances"], ["len", "tis"]]}, "name": "test_fail_with_reschedule", "params": {"make_sensor": "", "self": "", "time_machine": ""}, "params_descr": {"make_sensor": "", "self": "", "time_machine": ""}, "params_occur": {"make_sensor": [["sensor", "dr", "make_sensor", "return_value", "False", "poke_interval", "timeout", "mode"]], "self": [["self", "_run", "sensor"], ["self", "_run", "sensor"]], "time_machine": [["time_machine", "move_to", "date1", "tick", "False"], ["time_machine", "coordinates", "shift", "sensor", "poke_interval"]]}, "params_p": {"args": [], "kwargs": [], "make_sensor": [["raiden.utils.List[raiden.raiden_service.RaidenService]", 0.49865484635851026], ["raiden.utils.List[raiden.utils.TokenAddress]", 0.09360120007388645]], "self": [], "time_machine": [["raiden.utils.BlockNumber", 0.1901244085925382], ["str", 0.12961209867527423], ["Callable", 0.1001125151188681], ["raiden.utils.TokenAmount", 0.0950622042962691]]}, "q_name": "TestBaseSensor.test_fail_with_reschedule", "ret_exprs": [], "ret_type": "", "variables": {"date1": "", "dr": "", "sensor": "", "tis": ""}, "variables_p": {"date1": [["str", 0.10278294361150425], ["datetime.date", 0.10247360781942512], ["datetime.datetime.datetime", 0.0815838056286004], ["list", 0.06028153345250918]], "dr": [["str", 0.3502358376459521], ["bytes", 0.12756180967710698], ["Tuple[Any, Any]", 0.09040755577773729], ["int", 0.08480015666801047], ["Dict[str, Union[Any, Any, Any, Any]]", 0.08231919442442326], ["unittesmock.Mock", 0.08231919442442326]], "sensor": [["str", 0.30256772185691017], ["bytes", 0.1366854912285895], ["Tuple[Any, Any]", 0.11901988438815468], ["int", 0.09026950274634978], ["float", 0.08559786545234693]], "tis": [["list", 0.30936229868901094], ["str", 0.19693152313028695], ["int", 0.09330969569419027]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[262, 4], [288, 45]], "fn_var_ln": {"date1": [[268, 8], [268, 13]], "dr": [[263, 16], [263, 18]], "sensor": [[263, 8], [263, 14]], "tis": [[282, 8], [282, 11]]}, "fn_var_occur": {"date1": [["date1", "timezone", "utcnow"], ["time_machine", "move_to", "date1", "tick", "False"]], "dr": [["sensor", "dr", "make_sensor", "return_value", "False", "poke_interval", "timeout", "soft_fail", "True", "mode"], ["tis", "dr", "get_task_instances"], ["tis", "dr", "get_task_instances"]], "sensor": [["sensor", "dr", "make_sensor", "return_value", "False", "poke_interval", "timeout", "soft_fail", "True", "mode"], ["self", "_run", "sensor"], ["time_machine", "coordinates", "shift", "sensor", "poke_interval"], ["self", "_run", "sensor"]], "tis": [["tis", "dr", "get_task_instances"], ["len", "tis"], ["tis", "dr", "get_task_instances"], ["len", "tis"]]}, "name": "test_soft_fail_with_reschedule", "params": {"make_sensor": "", "self": "", "time_machine": ""}, "params_descr": {"make_sensor": "", "self": "", "time_machine": ""}, "params_occur": {"make_sensor": [["sensor", "dr", "make_sensor", "return_value", "False", "poke_interval", "timeout", "soft_fail", "True", "mode"]], "self": [["self", "_run", "sensor"], ["self", "_run", "sensor"]], "time_machine": [["time_machine", "move_to", "date1", "tick", "False"], ["time_machine", "coordinates", "shift", "sensor", "poke_interval"]]}, "params_p": {"args": [], "kwargs": [], "make_sensor": [["raiden.utils.List[raiden.raiden_service.RaidenService]", 0.40643116932340595], ["raiden.utils.List[raiden.utils.TokenAddress]", 0.09518004448442355]], "self": [], "time_machine": [["raiden.utils.BlockNumber", 0.1901244085925382], ["str", 0.12961209867527423], ["Callable", 0.1001125151188681], ["raiden.utils.TokenAmount", 0.0950622042962691]]}, "q_name": "TestBaseSensor.test_soft_fail_with_reschedule", "ret_exprs": [], "ret_type": "", "variables": {"date1": "", "dr": "", "sensor": "", "tis": ""}, "variables_p": {"date1": [["str", 0.10278294361150425], ["datetime.date", 0.10247360781942512], ["datetime.datetime.datetime", 0.0815838056286004], ["list", 0.06028153345250918]], "dr": [["str", 0.23447950908445978], ["int", 0.1806799605562514], ["bytes", 0.13293783773990434], ["Tuple[Any, Any]", 0.0959000078849639], ["float", 0.08575022146807947], ["bool", 0.08575022146807947]], "sensor": [["int", 0.19076951170596418], ["float", 0.18506669864512582], ["str", 0.12517591835310593], ["bytes", 0.11943812564942043], ["Tuple[Any, Any]", 0.11259820792933148], ["List[str]", 0.08947475840301565], ["bool", 0.08865404325183857]], "tis": [["list", 0.30936229868901094], ["str", 0.19693152313028695], ["int", 0.09330969569419027]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[290, 4], [363, 45]], "fn_var_ln": {"date1": [[302, 8], [302, 13]], "date3": [[335, 8], [335, 13]], "dr": [[291, 16], [291, 18]], "poke": [[299, 8], [299, 19]], "sensor": [[291, 8], [291, 14]], "task_reschedules": [[344, 16], [344, 32]], "tis": [[357, 8], [357, 11]]}, "fn_var_occur": {"date1": [["date1", "timezone", "utcnow"], ["time_machine", "move_to", "date1", "tick", "False"], ["task_reschedules", "start_date", "date1"], ["task_reschedules", "reschedule_date", "date1", "timedelta", "seconds", "sensor", "poke_interval"], ["date3", "date1", "timedelta", "seconds", "sensor", "poke_interval", "sensor", "retry_delay"]], "date3": [["date3", "date1", "timedelta", "seconds", "sensor", "poke_interval", "sensor", "retry_delay"], ["task_reschedules", "start_date", "date3"], ["task_reschedules", "reschedule_date", "date3", "timedelta", "seconds", "sensor", "poke_interval"]], "dr": [["sensor", "dr", "make_sensor", "return_value", "None", "poke_interval", "timeout", "retries", "retry_delay", "timedelta", "seconds", "mode"], ["tis", "dr", "get_task_instances"], ["tis", "dr", "get_task_instances"], ["tis", "dr", "get_task_instances"], ["tis", "dr", "get_task_instances"]], "poke": [["sensor", "poke", "Mock", "side_effect", "False", "False", "False", "True"]], "sensor": [["sensor", "dr", "make_sensor", "return_value", "None", "poke_interval", "timeout", "retries", "retry_delay", "timedelta", "seconds", "mode"], ["sensor", "poke", "Mock", "side_effect", "False", "False", "False", "True"], ["self", "_run", "sensor"], ["task_reschedules", "reschedule_date", "date1", "timedelta", "seconds", "sensor", "poke_interval"], ["time_machine", "coordinates", "shift", "sensor", "poke_interval"], ["self", "_run", "sensor"], ["sensor", "clear"], ["date3", "date1", "timedelta", "seconds", "sensor", "poke_interval", "sensor", "retry_delay"], ["time_machine", "coordinates", "shift", "sensor", "poke_interval", "sensor", "retry_delay", "total_seconds"], ["self", "_run", "sensor"], ["task_reschedules", "reschedule_date", "date3", "timedelta", "seconds", "sensor", "poke_interval"], ["time_machine", "coordinates", "shift", "sensor", "poke_interval"], ["self", "_run", "sensor"]], "task_reschedules": [["task_reschedules", "TaskReschedule", "find_for_task_instance", "ti"], ["len", "task_reschedules"], ["task_reschedules", "start_date", "date1"], ["task_reschedules", "reschedule_date", "date1", "timedelta", "seconds", "sensor", "poke_interval"], ["task_reschedules", "try_number"], ["task_reschedules", "TaskReschedule", "find_for_task_instance", "ti"], ["len", "task_reschedules"], ["task_reschedules", "start_date", "date3"], ["task_reschedules", "reschedule_date", "date3", "timedelta", "seconds", "sensor", "poke_interval"], ["task_reschedules", "try_number"]], "tis": [["tis", "dr", "get_task_instances"], ["len", "tis"], ["tis", "dr", "get_task_instances"], ["len", "tis"], ["tis", "dr", "get_task_instances"], ["len", "tis"], ["tis", "dr", "get_task_instances"], ["len", "tis"]]}, "name": "test_ok_with_reschedule_and_retry", "params": {"make_sensor": "", "self": "", "time_machine": ""}, "params_descr": {"make_sensor": "", "self": "", "time_machine": ""}, "params_occur": {"make_sensor": [["sensor", "dr", "make_sensor", "return_value", "None", "poke_interval", "timeout", "retries", "retry_delay", "timedelta", "seconds", "mode"]], "self": [["self", "_run", "sensor"], ["self", "_run", "sensor"], ["self", "_run", "sensor"], ["self", "_run", "sensor"]], "time_machine": [["time_machine", "move_to", "date1", "tick", "False"], ["time_machine", "coordinates", "shift", "sensor", "poke_interval"], ["time_machine", "coordinates", "shift", "sensor", "poke_interval", "sensor", "retry_delay", "total_seconds"], ["time_machine", "coordinates", "shift", "sensor", "poke_interval"]]}, "params_p": {"args": [], "kwargs": [], "make_sensor": [["List[src.main.core.models.area.Area]", 0.11798199367378188], ["raiden.utils.List[raiden.raiden_service.RaidenService]", 0.10233970959819728]], "self": [], "time_machine": [["str", 0.12815348737440857], ["Callable", 0.10155967727329815], ["raiden.utils.TokenAmount", 0.0935291728355206], ["raiden.utils.BlockNumber", 0.0935291728355206]]}, "q_name": "TestBaseSensor.test_ok_with_reschedule_and_retry", "ret_exprs": [], "ret_type": "", "variables": {"date1": "", "date3": "", "dr": "", "poke": "", "sensor": "", "task_reschedules": "", "tis": ""}, "variables_p": {"date1": [["datetime.datetime.datetime", 0.2884764816920449], ["datetime.date", 0.28598620440292355], ["str", 0.17363505419690284]], "date3": [["list", 0.16870417935843818], ["str", 0.10226324904690332], ["Dict[Any, List[str]]", 0.09612427106008412], ["datetime.datetime.datetime", 0.0940275897174206], ["datetime.datetime", 0.09089009723055264], ["datetime.date", 0.0803414933175066]], "dr": [["int", 0.11341276344466378], ["tests.core.test_task_map.DivTask", 0.09315565157014177], ["Dict[str, List[str]]", 0.0837196967115929]], "poke": [["list", 0.2641140856326374], ["Tuple[Literal, Literal]", 0.18832365277420116], ["unittesmock.Mock", 0.17634627462543817], ["Tuple[Literal, Literal, Literal]", 0.17049540062421745], ["str", 0.11772539347993416]], "sensor": [["str", 0.4787321559266545], ["tests.core.test_task_map.DivTask", 0.10346427026422647]], "task_reschedules": [], "tis": [["list", 0.4087567805974396], ["str", 0.1931473826243494], ["List[Tuple[Any, Any]]", 0.10024061325633413], ["int", 0.09770672999564695], ["dict", 0.09691462021947148]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[366, 4], [369, 45]], "fn_var_ln": {"deps": [[368, 8], [368, 12]], "sensor": [[367, 8], [367, 14]]}, "fn_var_occur": {"deps": [["deps", "sensor", "deps"], ["ReadyToRescheduleDep", "deps"]], "sensor": [["sensor", "DummySensor", "task_id", "return_value", "True", "mode", "mode"], ["deps", "sensor", "deps"]]}, "name": "test_should_include_ready_to_reschedule_dep", "params": {"mode": "", "self": ""}, "params_descr": {"mode": "", "self": ""}, "params_occur": {"mode": [["sensor", "DummySensor", "task_id", "return_value", "True", "mode", "mode"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mode": [["int", 0.1929457780718534], ["lunch_buddies.models.polls.Choice", 0.09402998860695773]], "self": []}, "q_name": "TestBaseSensor.test_should_include_ready_to_reschedule_dep", "ret_exprs": [], "ret_type": "", "variables": {"deps": "", "sensor": ""}, "variables_p": {"deps": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["str", 0.1], ["datetime.timedelta", 0.1]], "sensor": [["str", 0.28988107274888414], ["set", 0.1145027271537164], ["Optional[List[Any]]", 0.10979927020840542], ["list", 0.09226608016461896]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[371, 4], [373, 48]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_invalid_mode", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestBaseSensor.test_invalid_mode", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[375, 4], [427, 45]], "fn_var_ln": {"date1": [[377, 8], [377, 13]], "date2": [[378, 8], [378, 13]], "date3": [[379, 8], [379, 13]], "dr": [[376, 16], [376, 18]], "poke": [[380, 8], [380, 19]], "sensor": [[376, 8], [376, 14]], "task_reschedules": [[411, 16], [411, 32]], "tis": [[421, 8], [421, 11]]}, "fn_var_occur": {"date1": [["date1", "timezone", "utcnow"], ["date2", "date1", "timedelta", "seconds"], ["date3", "date1", "timedelta", "seconds"], ["time_machine", "travel", "date1", "tick", "False"], ["task_reschedules", "start_date", "date1"]], "date2": [["date2", "date1", "timedelta", "seconds"], ["sensor", "poke", "Mock", "side_effect", "AirflowRescheduleException", "date2", "AirflowRescheduleException", "date3", "True"], ["task_reschedules", "reschedule_date", "date2"], ["time_machine", "travel", "date2", "tick", "False"], ["task_reschedules", "start_date", "date2"]], "date3": [["date3", "date1", "timedelta", "seconds"], ["sensor", "poke", "Mock", "side_effect", "AirflowRescheduleException", "date2", "AirflowRescheduleException", "date3", "True"], ["task_reschedules", "reschedule_date", "date3"], ["time_machine", "travel", "date3", "tick", "False"]], "dr": [["sensor", "dr", "make_sensor", "return_value", "None", "mode"], ["tis", "dr", "get_task_instances"], ["tis", "dr", "get_task_instances"], ["tis", "dr", "get_task_instances"]], "poke": [["sensor", "poke", "Mock", "side_effect", "AirflowRescheduleException", "date2", "AirflowRescheduleException", "date3", "True"]], "sensor": [["sensor", "dr", "make_sensor", "return_value", "None", "mode"], ["sensor", "poke", "Mock", "side_effect", "AirflowRescheduleException", "date2", "AirflowRescheduleException", "date3", "True"], ["self", "_run", "sensor"], ["self", "_run", "sensor"], ["self", "_run", "sensor"]], "task_reschedules": [["task_reschedules", "TaskReschedule", "find_for_task_instance", "ti"], ["len", "task_reschedules"], ["task_reschedules", "start_date", "date1"], ["task_reschedules", "reschedule_date", "date2"], ["task_reschedules", "TaskReschedule", "find_for_task_instance", "ti"], ["len", "task_reschedules"], ["task_reschedules", "start_date", "date2"], ["task_reschedules", "reschedule_date", "date3"]], "tis": [["tis", "dr", "get_task_instances"], ["len", "tis"], ["tis", "dr", "get_task_instances"], ["len", "tis"], ["tis", "dr", "get_task_instances"], ["len", "tis"]]}, "name": "test_ok_with_custom_reschedule_exception", "params": {"make_sensor": "", "self": ""}, "params_descr": {"make_sensor": "", "self": ""}, "params_occur": {"make_sensor": [["sensor", "dr", "make_sensor", "return_value", "None", "mode"]], "self": [["self", "_run", "sensor"], ["self", "_run", "sensor"], ["self", "_run", "sensor"]]}, "params_p": {"args": [], "kwargs": [], "make_sensor": [["List[src.main.core.models.area.Area]", 0.09280825610570775]], "self": []}, "q_name": "TestBaseSensor.test_ok_with_custom_reschedule_exception", "ret_exprs": [], "ret_type": "", "variables": {"date1": "", "date2": "", "date3": "", "dr": "", "poke": "", "sensor": "", "task_reschedules": "", "tis": ""}, "variables_p": {"date1": [["datetime.datetime.timedelta", 0.38385060377172747], ["datetime.date", 0.3053879452179707], ["datetime.datetime", 0.12126873875853415], ["datetime.datetime.datetime", 0.0950967577186383], ["datetime.datetime.date", 0.09439595453312934]], "date2": [["Pattern[str]", 0.4159300094461579], ["datetime.date", 0.1005629866979464], ["datetime.datetime.date", 0.09703028361552953], ["str", 0.09090771285202252], ["Pattern[bytes]", 0.08342409726702046]], "date3": [["Pattern[str]", 0.4159300094461579], ["datetime.date", 0.1005629866979464], ["datetime.datetime.date", 0.09703028361552953], ["str", 0.09090771285202252], ["Pattern[bytes]", 0.08342409726702046]], "dr": [["str", 0.24848202608753883], ["core.models.MemberModels.Member", 0.09372558328553773]], "poke": [["rotkehlchen.tests.utils.rotkehlchen.BalancesTestSetup", 0.10376168784912053], ["str", 0.09521281581378932]], "sensor": [["str", 0.129943548532543]], "task_reschedules": [], "tis": [["list", 0.4087567805974396], ["str", 0.1931473826243494], ["List[Tuple[Any, Any]]", 0.10024061325633413], ["int", 0.09770672999564695], ["dict", 0.09691462021947148]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[429, 4], [447, 45]], "fn_var_ln": {"date1": [[434, 8], [434, 13]], "dr": [[430, 16], [430, 18]], "poke": [[431, 8], [431, 19]], "sensor": [[430, 8], [430, 14]], "task_reschedules": [[444, 16], [444, 32]], "tis": [[437, 8], [437, 11]]}, "fn_var_occur": {"date1": [["date1", "timezone", "utcnow"], ["time_machine", "travel", "date1", "tick", "False"]], "dr": [["sensor", "dr", "make_sensor", "return_value", "None", "poke_interval", "timeout", "mode"], ["tis", "dr", "get_task_instances"]], "poke": [["sensor", "poke", "Mock", "side_effect", "False"]], "sensor": [["sensor", "dr", "make_sensor", "return_value", "None", "poke_interval", "timeout", "mode"], ["sensor", "poke", "Mock", "side_effect", "False"], ["self", "_run", "sensor", "test_mode", "True"]], "task_reschedules": [["task_reschedules", "TaskReschedule", "find_for_task_instance", "ti"], ["len", "task_reschedules"]], "tis": [["tis", "dr", "get_task_instances"], ["len", "tis"]]}, "name": "test_reschedule_with_test_mode", "params": {"make_sensor": "", "self": ""}, "params_descr": {"make_sensor": "", "self": ""}, "params_occur": {"make_sensor": [["sensor", "dr", "make_sensor", "return_value", "None", "poke_interval", "timeout", "mode"]], "self": [["self", "_run", "sensor", "test_mode", "True"]]}, "params_p": {"args": [], "kwargs": [], "make_sensor": [["tests.setup.SetupTest", 0.28440447058977464]], "self": []}, "q_name": "TestBaseSensor.test_reschedule_with_test_mode", "ret_exprs": [], "ret_type": "", "variables": {"date1": "", "dr": "", "poke": "", "sensor": "", "task_reschedules": "", "tis": ""}, "variables_p": {"date1": [["str", 0.10278294361150425], ["datetime.date", 0.10247360781942512], ["datetime.datetime.datetime", 0.0815838056286004], ["list", 0.06028153345250918]], "dr": [["str", 0.27112697008885017], ["tests.core.test_task_map.DivTask", 0.10041550451924497], ["list", 0.08607633688873811]], "poke": [["Dict[int, Dict[str, Any]]", 0.3158156068436413], ["Tuple[Literal, Literal, Literal]", 0.23545844154417467], ["List[str]", 0.1324743985803862], ["str", 0.12447562220810234], ["int", 0.06803338690863665], ["libsoundtouch.tests.test_libsoundtouch.MockDevice", 0.05971499663582074]], "sensor": [["dict", 0.20249286032187383], ["int", 0.0979848013219225], ["str", 0.09666738433706432]], "task_reschedules": [["Dict[str, Union[Any, Any, str]]", 0.20867725231461318], ["int", 0.20369430670958258], ["List[List[int]]", 0.16207903472688673]], "tis": [["list", 0.6176592411763635], ["List[str]", 0.1802440722184468]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[449, 4], [471, 9]], "fn_var_ln": {"negative_poke_interval": [[450, 8], [450, 30]], "non_number_poke_interval": [[451, 8], [451, 32]], "positive_poke_interval": [[452, 8], [452, 30]]}, "fn_var_occur": {"negative_poke_interval": [["DummySensor", "task_id", "return_value", "None", "poke_interval", "negative_poke_interval", "timeout"]], "non_number_poke_interval": [["DummySensor", "task_id", "return_value", "None", "poke_interval", "non_number_poke_interval", "timeout"]], "positive_poke_interval": [["DummySensor", "task_id", "return_value", "None", "poke_interval", "positive_poke_interval", "timeout"]]}, "name": "test_sensor_with_invalid_poke_interval", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestBaseSensor.test_sensor_with_invalid_poke_interval", "ret_exprs": [], "ret_type": "", "variables": {"negative_poke_interval": "", "non_number_poke_interval": "", "positive_poke_interval": ""}, "variables_p": {"negative_poke_interval": [["str", 0.24022245380452112], ["Optional[List[Any]]", 0.12138862489601866], ["int", 0.096340568221309]], "non_number_poke_interval": [["Dict[str, Union[int, str]]", 0.2874707569862748], ["str", 0.27352761879494747], ["datetime.timedelta", 0.15177178862985202], ["Dict[str, Union[Any, Any, Any]]", 0.07726124982918475]], "positive_poke_interval": [["str", 0.24022245380452112], ["Optional[List[Any]]", 0.12138862489601866], ["int", 0.096340568221309]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[473, 4], [489, 9]], "fn_var_ln": {"negative_timeout": [[474, 8], [474, 24]], "non_number_timeout": [[475, 8], [475, 26]], "positive_timeout": [[476, 8], [476, 24]]}, "fn_var_occur": {"negative_timeout": [["DummySensor", "task_id", "return_value", "None", "poke_interval", "timeout", "negative_timeout"]], "non_number_timeout": [["DummySensor", "task_id", "return_value", "None", "poke_interval", "timeout", "non_number_timeout"]], "positive_timeout": [["DummySensor", "task_id", "return_value", "None", "poke_interval", "timeout", "positive_timeout"]]}, "name": "test_sensor_with_invalid_timeout", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestBaseSensor.test_sensor_with_invalid_timeout", "ret_exprs": [], "ret_type": "", "variables": {"negative_timeout": "", "non_number_timeout": "", "positive_timeout": ""}, "variables_p": {"negative_timeout": [["int", 0.49277912788388173], ["float", 0.12457163291949418], ["datetime.datetime", 0.0973241106196721], ["raiden.utils.PaymentAmount", 0.09627644301757768], ["datetime.timedelta", 0.09336404180296792]], "non_number_timeout": [["str", 0.1747439624352155], ["Dict[str, Dict[str, Any]]", 0.14199898937421643], ["Dict[str, Union[bool, str]]", 0.10148138352433579], ["Dict[str, Set[str]]", 0.09678407740946175], ["Dict[Union[int, str], int]", 0.09582191315036216], ["bool", 0.08446848754772783]], "positive_timeout": [["int", 0.49277912788388173], ["float", 0.12457163291949418], ["datetime.datetime", 0.0973241106196721], ["raiden.utils.PaymentAmount", 0.09627644301757768], ["datetime.timedelta", 0.09336404180296792]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[498, 8], [499, 65]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "run_duration", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestBaseSensor.test_sensor_with_exponential_backoff_off.<locals>.run_duration", "ret_exprs": ["return (timezone.utcnow - started_at).total_seconds()"], "ret_type": "", "ret_type_p": [["Awaitable[Any]", 0.1725550005422543], ["str", 0.16033890782534954], ["Dict[str, Optional[BaseException]]", 0.09079631263545644], ["Union[int, float]", 0.08328495366474761]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[491, 4], [502, 98]], "fn_var_ln": {"sensor": [[492, 8], [492, 14]], "started_at": [[496, 8], [496, 18]]}, "fn_var_occur": {"sensor": [["sensor", "_get_next_poke_interval", "started_at", "run_duration", "sensor", "poke_interval"], ["sensor", "_get_next_poke_interval", "started_at", "run_duration", "sensor", "poke_interval"]], "started_at": [["sensor", "_get_next_poke_interval", "started_at", "run_duration", "sensor", "poke_interval"], ["sensor", "_get_next_poke_interval", "started_at", "run_duration", "sensor", "poke_interval"]]}, "name": "test_sensor_with_exponential_backoff_off", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestBaseSensor.test_sensor_with_exponential_backoff_off", "ret_exprs": [], "ret_type": "", "variables": {"sensor": "", "started_at": ""}, "variables_p": {"sensor": [["str", 0.8484456027392757], ["int", 0.1515543972607241]], "started_at": [["str", 0.9052640788680921]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[515, 12], [516, 69]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "run_duration", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestBaseSensor.test_sensor_with_exponential_backoff_on.<locals>.run_duration", "ret_exprs": ["return (timezone.utcnow - started_at).total_seconds()"], "ret_type": "", "ret_type_p": [["Awaitable[Any]", 0.1725550005422543], ["str", 0.16033890782534954], ["Dict[str, Optional[BaseException]]", 0.09079631263545644], ["Union[int, float]", 0.08328495366474761]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[504, 4], [524, 40]], "fn_var_ln": {"interval1": [[518, 12], [518, 21]], "interval2": [[519, 12], [519, 21]], "return_value": [[511, 12], [511, 37]], "sensor": [[506, 8], [506, 14]], "started_at": [[513, 12], [513, 22]]}, "fn_var_occur": {"interval1": [["interval1", "sensor", "_get_next_poke_interval", "started_at", "run_duration"], ["interval1", "sensor", "poke_interval"], ["interval2", "interval1"]], "interval2": [["interval2", "sensor", "_get_next_poke_interval", "started_at", "run_duration"], ["interval2", "sensor", "poke_interval"], ["interval2", "interval1"]], "return_value": [], "sensor": [["interval1", "sensor", "_get_next_poke_interval", "started_at", "run_duration"], ["interval2", "sensor", "_get_next_poke_interval", "started_at", "run_duration"], ["interval1", "sensor", "poke_interval"], ["interval2", "sensor", "poke_interval"]], "started_at": [["interval1", "sensor", "_get_next_poke_interval", "started_at", "run_duration"], ["interval2", "sensor", "_get_next_poke_interval", "started_at", "run_duration"]]}, "name": "test_sensor_with_exponential_backoff_on", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestBaseSensor.test_sensor_with_exponential_backoff_on", "ret_exprs": [], "ret_type": "", "variables": {"interval1": "", "interval2": "", "return_value": "", "sensor": "", "started_at": ""}, "variables_p": {"interval1": [["str", 0.8092905723135572], ["int", 0.10558420603494903]], "interval2": [["str", 0.8092905723135572], ["int", 0.10558420603494903]], "return_value": [["str", 0.49999999999999994], ["list", 0.19999999999999998]], "sensor": [["str", 0.8803378673439185], ["int", 0.11966213265608155]], "started_at": [["str", 0.9037771023681576]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[543, 12], [544, 69]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "run_duration", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestBaseSensor.test_sensor_with_exponential_backoff_on_and_small_poke_interval.<locals>.run_duration", "ret_exprs": ["return (timezone.utcnow - started_at).total_seconds()"], "ret_type": "", "ret_type_p": [["Awaitable[Any]", 0.1725550005422543], ["str", 0.16033890782534954], ["Dict[str, Optional[BaseException]]", 0.09079631263545644], ["Union[int, float]", 0.08328495366474761]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Test that sensor works correctly when poke_interval is small and exponential_backoff is on", "long_descr": null, "ret": null}, "fn_lc": [[527, 4], [559, 52]], "fn_var_ln": {"intervals": [[546, 12], [546, 21]], "return_value": [[539, 12], [539, 37]], "sensor": [[530, 8], [530, 14]], "started_at": [[541, 12], [541, 22]]}, "fn_var_occur": {"intervals": [["intervals", "sensor", "_get_next_poke_interval", "started_at", "run_duration", "retry_number", "retry_number", "range"], ["range", "len", "intervals"], ["intervals", "i", "intervals", "i"], ["intervals", "intervals"], ["intervals", "intervals"]], "return_value": [], "sensor": [["intervals", "sensor", "_get_next_poke_interval", "started_at", "run_duration", "retry_number", "retry_number", "range"]], "started_at": [["intervals", "sensor", "_get_next_poke_interval", "started_at", "run_duration", "retry_number", "retry_number", "range"]]}, "name": "test_sensor_with_exponential_backoff_on_and_small_poke_interval", "params": {"poke_interval": "", "self": ""}, "params_descr": {"poke_interval": "", "self": ""}, "params_occur": {"poke_interval": [], "self": []}, "params_p": {"args": [], "kwargs": [], "poke_interval": [["tests.basilisp.helpers.CompileFn", 0.2], ["str", 0.2], ["tests.async_mock.MagicMock", 0.1], ["tests.async_mock.Mock", 0.1], ["Mapping[str, Any]", 0.1]], "self": []}, "q_name": "TestBaseSensor.test_sensor_with_exponential_backoff_on_and_small_poke_interval", "ret_exprs": [], "ret_type": "", "variables": {"intervals": "", "return_value": "", "sensor": "", "started_at": ""}, "variables_p": {"intervals": [["int", 0.601050441862462], ["str", 0.30119922821399886], ["list", 0.09775032992353906]], "return_value": [["str", 0.49999999999999994], ["list", 0.19999999999999998]], "sensor": [["str", 0.8092905723135572], ["int", 0.10558420603494903]], "started_at": [["str", 0.7768340418766261], ["int", 0.09240719234398402]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[577, 12], [578, 69]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "run_duration", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestBaseSensor.test_sensor_with_exponential_backoff_on_and_max_wait.<locals>.run_duration", "ret_exprs": ["return (timezone.utcnow - started_at).total_seconds()"], "ret_type": "", "ret_type_p": [["Awaitable[Any]", 0.1725550005422543], ["str", 0.16033890782534954], ["Dict[str, Optional[BaseException]]", 0.09079631263545644], ["Union[int, float]", 0.08328495366474761]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[561, 4], [581, 96]], "fn_var_ln": {"return_value": [[573, 12], [573, 37]], "sensor": [[563, 8], [563, 14]], "started_at": [[575, 12], [575, 22]]}, "fn_var_occur": {"return_value": [], "sensor": [["sensor", "_get_next_poke_interval", "started_at", "run_duration", "idx", "expected"]], "started_at": [["sensor", "_get_next_poke_interval", "started_at", "run_duration", "idx", "expected"]]}, "name": "test_sensor_with_exponential_backoff_on_and_max_wait", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestBaseSensor.test_sensor_with_exponential_backoff_on_and_max_wait", "ret_exprs": [], "ret_type": "", "variables": {"return_value": "", "sensor": "", "started_at": ""}, "variables_p": {"return_value": [["str", 0.49999999999999994], ["list", 0.19999999999999998]], "sensor": [["str", 0.9017331609346824]], "started_at": [["str", 0.7826555290131775], ["Pattern[str]", 0.10066711082336513]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[584, 4], [590, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_reschedule_poke_interval_too_long_on_mysql", "params": {"make_sensor": "", "self": ""}, "params_descr": {"make_sensor": "", "self": ""}, "params_occur": {"make_sensor": [["make_sensor", "poke_interval", "mode", "return_value"]], "self": []}, "params_p": {"args": [], "kwargs": [], "make_sensor": [["tests.basilisp.helpers.CompileFn", 0.19045216724751102], ["bool", 0.09285426922350877]], "self": []}, "q_name": "TestBaseSensor.test_reschedule_poke_interval_too_long_on_mysql", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[593, 4], [603, 9]], "fn_var_ln": {"_": [[594, 16], [594, 17]], "sensor": [[594, 8], [594, 14]]}, "fn_var_occur": {"_": [["sensor", "_", "make_sensor", "poke_interval", "mode", "return_value", "False"]], "sensor": [["sensor", "_", "make_sensor", "poke_interval", "mode", "return_value", "False"], ["self", "_run", "sensor"]]}, "name": "test_reschedule_date_too_late_on_mysql", "params": {"make_sensor": "", "self": ""}, "params_descr": {"make_sensor": "", "self": ""}, "params_occur": {"make_sensor": [["sensor", "_", "make_sensor", "poke_interval", "mode", "return_value", "False"]], "self": [["self", "_run", "sensor"]]}, "params_p": {"args": [], "kwargs": [], "make_sensor": [], "self": []}, "q_name": "TestBaseSensor.test_reschedule_date_too_late_on_mysql", "ret_exprs": [], "ret_type": "", "variables": {"_": "", "sensor": ""}, "variables_p": {"_": [["int", 0.27376651635163196], ["str", 0.16157122001535382], ["Dict[str, str]", 0.1421210191446621], ["list", 0.07106050957233105]], "sensor": [["int", 0.2160123117139675], ["float", 0.19961799160546706], ["qutebrowser.utils.log.ColoredFormatter", 0.18223891182280433], ["List[int]", 0.12103460691105918], ["bytearray", 0.0904194828373754]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[642, 8], [654, 45]], "fn_var_ln": {"tis": [[643, 12], [643, 15]]}, "fn_var_occur": {"tis": [["tis", "dr", "get_task_instances"], ["len", "tis"]]}, "name": "assert_ti_state", "params": {"max_tries": "", "state": "", "try_number": ""}, "params_descr": {"max_tries": "", "state": "", "try_number": ""}, "params_occur": {"max_tries": [["ti", "max_tries", "max_tries"]], "state": [["ti", "state", "state"]], "try_number": [["ti", "try_number", "try_number"]]}, "params_p": {"args": [], "kwargs": [], "max_tries": [["int", 0.2935483429122536], ["float", 0.18037375677180273], ["Optional[Union[int, float]]", 0.11317458614045094], ["bool", 0.11317458614045094], ["Tuple[int, int]", 0.09854763782858122]], "self": [], "state": [["str", 0.2970881529298251], ["Sequence[str]", 0.2001948311985418], ["dict", 0.10003987977766814]], "try_number": [["str", 0.2970881529298251], ["Sequence[str]", 0.2001948311985418], ["dict", 0.10003987977766814]]}, "q_name": "TestBaseSensor.test_reschedule_and_retry_timeout.<locals>.assert_ti_state", "ret_exprs": [], "ret_type": "", "variables": {"tis": ""}, "variables_p": {"tis": [["list", 0.6176592411763635], ["List[str]", 0.1802440722184468]]}}, {"docstring": {"func": "Test mode=\"reschedule\", retries and timeout configurations interact correctly.", "long_descr": "Given a sensor configured like this:\n\npoke_interval=5\ntimeout=10\nretries=2\nretry_delay=timedelta(seconds=3)\n\nIf the second poke raises RuntimeError, all other pokes return False, this is how it should\nbehave:\n\n00:00 Returns False                try_number=1, max_tries=2, state=up_for_reschedule\n00:05 Raises RuntimeError          try_number=2, max_tries=2, state=up_for_retry\n00:08 Returns False                try_number=2, max_tries=2, state=up_for_reschedule\n00:13 Raises AirflowSensorTimeout  try_number=3, max_tries=2, state=failed\n\nAnd then the sensor is cleared at 00:19. It should behave like this:\n\n00:19 Returns False                try_number=3, max_tries=4, state=up_for_reschedule\n00:24 Returns False                try_number=3, max_tries=4, state=up_for_reschedule\n00:26 Returns False                try_number=3, max_tries=4, state=up_for_reschedule\n00:31 Raises AirflowSensorTimeout, try_number=4, max_tries=4, state=failed", "ret": null}, "fn_lc": [[605, 4], [693, 43]], "fn_var_ln": {"date1": [[657, 8], [657, 13]], "dr": [[631, 16], [631, 18]], "poke": [[640, 8], [640, 19]], "sensor": [[631, 8], [631, 14]]}, "fn_var_occur": {"date1": [["date1", "timezone", "utcnow"], ["time_machine", "move_to", "date1", "tick", "False"]], "dr": [], "poke": [], "sensor": [["self", "_run", "sensor"], ["time_machine", "coordinates", "shift", "sensor", "poke_interval"], ["self", "_run", "sensor"], ["time_machine", "coordinates", "shift", "sensor", "retry_delay", "timedelta", "seconds"], ["self", "_run", "sensor"], ["time_machine", "coordinates", "shift", "sensor", "poke_interval"], ["self", "_run", "sensor"], ["sensor", "clear"], ["time_machine", "coordinates", "shift", "sensor", "poke_interval"], ["self", "_run", "sensor"], ["time_machine", "coordinates", "shift", "sensor", "poke_interval"], ["self", "_run", "sensor"]]}, "name": "test_reschedule_and_retry_timeout", "params": {"make_sensor": "", "self": "", "time_machine": ""}, "params_descr": {"make_sensor": "", "self": "", "time_machine": ""}, "params_occur": {"make_sensor": [], "self": [["self", "_run", "sensor"], ["self", "_run", "sensor"], ["self", "_run", "sensor"], ["self", "_run", "sensor"], ["self", "_run", "sensor"], ["self", "_run", "sensor"]], "time_machine": [["time_machine", "move_to", "date1", "tick", "False"], ["time_machine", "coordinates", "shift", "sensor", "poke_interval"], ["time_machine", "coordinates", "shift", "sensor", "retry_delay", "timedelta", "seconds"], ["time_machine", "coordinates", "shift", "sensor", "poke_interval"], ["time_machine", "coordinates", "shift"], ["time_machine", "coordinates", "shift", "sensor", "poke_interval"], ["time_machine", "coordinates", "shift", "sensor", "poke_interval"]]}, "params_p": {"args": [], "kwargs": [], "make_sensor": [["List[str]", 0.07524053793981794]], "self": [], "time_machine": [["raiden.utils.BlockNumber", 0.18590866942377043], ["str", 0.12853347648523875], ["Callable", 0.10542409108686521], ["raiden.utils.TokenAmount", 0.09295433471188522]]}, "q_name": "TestBaseSensor.test_reschedule_and_retry_timeout", "ret_exprs": [], "ret_type": "", "variables": {"date1": "", "dr": "", "poke": "", "sensor": ""}, "variables_p": {"date1": [["str", 0.10278294361150425], ["datetime.date", 0.10247360781942512], ["datetime.datetime.datetime", 0.0815838056286004], ["list", 0.06028153345250918]], "dr": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "poke": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "sensor": [["Mapping[str, float]", 0.25709295031471624], ["int", 0.10361109139677951]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[734, 8], [746, 45]], "fn_var_ln": {"tis": [[735, 12], [735, 15]]}, "fn_var_occur": {"tis": [["tis", "dr", "get_task_instances"], ["len", "tis"]]}, "name": "assert_ti_state", "params": {"max_tries": "", "state": "", "try_number": ""}, "params_descr": {"max_tries": "", "state": "", "try_number": ""}, "params_occur": {"max_tries": [["ti", "max_tries", "max_tries"]], "state": [["ti", "state", "state"]], "try_number": [["ti", "try_number", "try_number"]]}, "params_p": {"args": [], "kwargs": [], "max_tries": [["int", 0.2935483429122536], ["float", 0.18037375677180273], ["Optional[Union[int, float]]", 0.11317458614045094], ["bool", 0.11317458614045094], ["Tuple[int, int]", 0.09854763782858122]], "self": [], "state": [["str", 0.2970881529298251], ["Sequence[str]", 0.2001948311985418], ["dict", 0.10003987977766814]], "try_number": [["str", 0.2970881529298251], ["Sequence[str]", 0.2001948311985418], ["dict", 0.10003987977766814]]}, "q_name": "TestBaseSensor.test_reschedule_and_retry_timeout_and_silent_fail.<locals>.assert_ti_state", "ret_exprs": [], "ret_type": "", "variables": {"tis": ""}, "variables_p": {"tis": [["list", 0.6176592411763635], ["List[str]", 0.1802440722184468]]}}, {"docstring": {"func": "Test mode=\"reschedule\", silent_fail=True then retries and timeout configurations interact correctly.", "long_descr": "Given a sensor configured like this:\n\npoke_interval=5\ntimeout=10\nretries=2\nretry_delay=timedelta(seconds=3)\nsilent_fail=True\n\nIf the second poke raises RuntimeError, all other pokes return False, this is how it should\nbehave:\n\n00:00 Returns False                try_number=1, max_tries=2, state=up_for_reschedule\n00:05 Raises RuntimeError          try_number=1, max_tries=2, state=up_for_reschedule\n00:08 Returns False                try_number=1, max_tries=2, state=up_for_reschedule\n00:13 Raises AirflowSensorTimeout  try_number=2, max_tries=2, state=failed\n\nAnd then the sensor is cleared at 00:19. It should behave like this:\n\n00:19 Returns False                try_number=2, max_tries=3, state=up_for_reschedule\n00:24 Returns False                try_number=2, max_tries=3, state=up_for_reschedule\n00:26 Returns False                try_number=2, max_tries=3, state=up_for_reschedule\n00:31 Raises AirflowSensorTimeout, try_number=3, max_tries=3, state=failed", "ret": null}, "fn_lc": [[695, 4], [784, 43]], "fn_var_ln": {"date1": [[749, 8], [749, 13]], "dr": [[722, 16], [722, 18]], "poke": [[732, 8], [732, 19]], "sensor": [[722, 8], [722, 14]]}, "fn_var_occur": {"date1": [["date1", "timezone", "utcnow"], ["time_machine", "move_to", "date1", "tick", "False"]], "dr": [], "poke": [], "sensor": [["self", "_run", "sensor"], ["time_machine", "coordinates", "shift", "sensor", "poke_interval"], ["self", "_run", "sensor"], ["time_machine", "coordinates", "shift", "sensor", "retry_delay", "timedelta", "seconds"], ["self", "_run", "sensor"], ["time_machine", "coordinates", "shift", "sensor", "poke_interval"], ["self", "_run", "sensor"], ["sensor", "clear"], ["time_machine", "coordinates", "shift", "sensor", "poke_interval"], ["self", "_run", "sensor"], ["time_machine", "coordinates", "shift", "sensor", "poke_interval"], ["self", "_run", "sensor"]]}, "name": "test_reschedule_and_retry_timeout_and_silent_fail", "params": {"make_sensor": "", "self": "", "time_machine": ""}, "params_descr": {"make_sensor": "", "self": "", "time_machine": ""}, "params_occur": {"make_sensor": [], "self": [["self", "_run", "sensor"], ["self", "_run", "sensor"], ["self", "_run", "sensor"], ["self", "_run", "sensor"], ["self", "_run", "sensor"], ["self", "_run", "sensor"]], "time_machine": [["time_machine", "move_to", "date1", "tick", "False"], ["time_machine", "coordinates", "shift", "sensor", "poke_interval"], ["time_machine", "coordinates", "shift", "sensor", "retry_delay", "timedelta", "seconds"], ["time_machine", "coordinates", "shift", "sensor", "poke_interval"], ["time_machine", "coordinates", "shift"], ["time_machine", "coordinates", "shift", "sensor", "poke_interval"], ["time_machine", "coordinates", "shift", "sensor", "poke_interval"]]}, "params_p": {"args": [], "kwargs": [], "make_sensor": [["List[str]", 0.07524053793981794]], "self": [], "time_machine": [["raiden.utils.BlockNumber", 0.18590866942377043], ["str", 0.12853347648523875], ["Callable", 0.10542409108686521], ["raiden.utils.TokenAmount", 0.09295433471188522]]}, "q_name": "TestBaseSensor.test_reschedule_and_retry_timeout_and_silent_fail", "ret_exprs": [], "ret_type": "", "variables": {"date1": "", "dr": "", "poke": "", "sensor": ""}, "variables_p": {"date1": [["str", 0.10278294361150425], ["datetime.date", 0.10247360781942512], ["datetime.datetime.datetime", 0.0815838056286004], ["list", 0.06028153345250918]], "dr": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "poke": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "sensor": [["Mapping[str, float]", 0.25709295031471624], ["int", 0.10361109139677951]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[786, 4], [801, 46]], "fn_var_ln": {"actual_xcom_value": [[798, 8], [798, 25]], "dr": [[788, 16], [788, 18]], "sensor": [[788, 8], [788, 14]], "tis": [[791, 8], [791, 11]], "xcom_value": [[787, 8], [787, 18]]}, "fn_var_occur": {"actual_xcom_value": [["actual_xcom_value", "XCom", "get_one", "key", "task_id", "SENSOR_OP", "dag_id", "dr", "dag_id", "run_id", "dr", "run_id"], ["actual_xcom_value", "xcom_value"]], "dr": [["sensor", "dr", "make_sensor", "True", "xcom_value", "xcom_value"], ["tis", "dr", "get_task_instances"], ["actual_xcom_value", "XCom", "get_one", "key", "task_id", "SENSOR_OP", "dag_id", "dr", "dag_id", "run_id", "dr", "run_id"]], "sensor": [["sensor", "dr", "make_sensor", "True", "xcom_value", "xcom_value"], ["self", "_run", "sensor"]], "tis": [["tis", "dr", "get_task_instances"], ["len", "tis"]], "xcom_value": [["sensor", "dr", "make_sensor", "True", "xcom_value", "xcom_value"], ["actual_xcom_value", "xcom_value"]]}, "name": "test_sensor_with_xcom", "params": {"make_sensor": "", "self": ""}, "params_descr": {"make_sensor": "", "self": ""}, "params_occur": {"make_sensor": [["sensor", "dr", "make_sensor", "True", "xcom_value", "xcom_value"]], "self": [["self", "_run", "sensor"]]}, "params_p": {"args": [], "kwargs": [], "make_sensor": [["bool", 0.29476426445284437], ["unittesmock.Mock", 0.2070688040084522], ["float", 0.10426774699538967], ["Union[int, float]", 0.09627475422962375]], "self": []}, "q_name": "TestBaseSensor.test_sensor_with_xcom", "ret_exprs": [], "ret_type": "", "variables": {"actual_xcom_value": "", "dr": "", "sensor": "", "tis": "", "xcom_value": ""}, "variables_p": {"actual_xcom_value": [["str", 0.40320269870251424], ["int", 0.30091754000095816], ["Union[bytes, str]", 0.10207158331559046]], "dr": [["myia.utils.misc.Named", 0.1128520626689945], ["int", 0.10186545760988136], ["float", 0.09729106036771402]], "sensor": [["chalice.utils.UI", 0.10400999434827499]], "tis": [["list", 0.6176592411763635], ["List[str]", 0.1802440722184468]], "xcom_value": [["list", 0.17639020306590353], ["Tuple[Tuple[Any, Any]]", 0.16901053364329438], ["Union[float, int]", 0.15581728694720876], ["int", 0.06932348375603749], ["List[float]", 0.06555395435391581], ["float", 0.06535229510832159]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[803, 4], [819, 40]], "fn_var_ln": {"actual_xcom_value": [[816, 8], [816, 25]], "dr": [[805, 16], [805, 18]], "sensor": [[805, 8], [805, 14]], "tis": [[809, 8], [809, 11]], "xcom_value": [[804, 8], [804, 18]]}, "fn_var_occur": {"actual_xcom_value": [["actual_xcom_value", "XCom", "get_one", "key", "task_id", "SENSOR_OP", "dag_id", "dr", "dag_id", "run_id", "dr", "run_id"], ["actual_xcom_value", "None"]], "dr": [["sensor", "dr", "make_sensor", "False", "xcom_value", "xcom_value"], ["tis", "dr", "get_task_instances"], ["actual_xcom_value", "XCom", "get_one", "key", "task_id", "SENSOR_OP", "dag_id", "dr", "dag_id", "run_id", "dr", "run_id"]], "sensor": [["sensor", "dr", "make_sensor", "False", "xcom_value", "xcom_value"], ["self", "_run", "sensor"]], "tis": [["tis", "dr", "get_task_instances"], ["len", "tis"]], "xcom_value": [["sensor", "dr", "make_sensor", "False", "xcom_value", "xcom_value"]]}, "name": "test_sensor_with_xcom_fails", "params": {"make_sensor": "", "self": ""}, "params_descr": {"make_sensor": "", "self": ""}, "params_occur": {"make_sensor": [["sensor", "dr", "make_sensor", "False", "xcom_value", "xcom_value"]], "self": [["self", "_run", "sensor"]]}, "params_p": {"args": [], "kwargs": [], "make_sensor": [["bool", 0.1259359047550814], ["unittesmock.Mock", 0.08861012042713932]], "self": []}, "q_name": "TestBaseSensor.test_sensor_with_xcom_fails", "ret_exprs": [], "ret_type": "", "variables": {"actual_xcom_value": "", "dr": "", "sensor": "", "tis": "", "xcom_value": ""}, "variables_p": {"actual_xcom_value": [["str", 0.40320269870251424], ["int", 0.30091754000095816], ["Union[bytes, str]", 0.10207158331559046]], "dr": [["dict", 0.32581429939805984], ["utils.Archive[utils.MultiValue]", 0.10313943346965257], ["tuple", 0.10236703941279411], ["List[str]", 0.09093873296975559]], "sensor": [["bytes", 0.10857732331743965], ["chalice.utils.UI", 0.10356890666079568], ["str", 0.09099745909925903], ["qutebrowser.utils.usertypes.Question", 0.08999947541008882]], "tis": [["list", 0.6176592411763635], ["List[str]", 0.1802440722184468]], "xcom_value": [["float", 0.17716041312338474], ["str", 0.12079353559068191], ["list", 0.1153639201046962], ["Tuple[Tuple[Any, Any]]", 0.10506093095306124], ["int", 0.0854648321467321]]}}, {"docstring": {"func": "Should change mode of the task to reschedule if using DEBUG_EXECUTOR", "long_descr": null, "ret": null}, "fn_lc": [[844, 4], [863, 36]], "fn_var_ln": {"executor_cls": [[848, 23], [848, 35]], "executor_name": [[848, 8], [848, 21]], "mode": [[848, 37], [848, 41]], "return_value": [[861, 12], [861, 38]], "sensor": [[849, 8], [849, 14]], "task": [[862, 12], [862, 16]]}, "fn_var_occur": {"executor_cls": [["executor_name", "executor_cls", "mode", "executor_cls_mode"], ["load_executor", "return_value", "executor_cls"]], "executor_name": [["executor_name", "executor_cls", "mode", "executor_cls_mode"], ["get", "return_value", "executor_name"]], "mode": [["executor_name", "executor_cls", "mode", "executor_cls_mode"], ["task", "mode", "mode"]], "return_value": [["sensor", "DummySensor", "task_id", "SENSOR_OP", "return_value", "None", "poke_interval", "timeout", "exponential_backoff", "True", "max_wait", "timedelta", "seconds"], ["get", "return_value", "executor_name"], ["load_executor", "return_value", "executor_cls"]], "sensor": [["sensor", "DummySensor", "task_id", "SENSOR_OP", "return_value", "None", "poke_interval", "timeout", "exponential_backoff", "True", "max_wait", "timedelta", "seconds"], ["task", "sensor", "prepare_for_execution"]], "task": [["task", "sensor", "prepare_for_execution"], ["task", "mode", "mode"]]}, "name": "test_prepare_for_execution", "params": {"executor_cls_mode": "", "self": ""}, "params_descr": {"executor_cls_mode": "", "self": ""}, "params_occur": {"executor_cls_mode": [["executor_name", "executor_cls", "mode", "executor_cls_mode"]], "self": []}, "params_p": {"args": [], "executor_cls_mode": [["str", 0.7122341082809793], ["int", 0.1911228528881463]], "kwargs": [], "self": []}, "q_name": "TestBaseSensor.test_prepare_for_execution", "ret_exprs": [], "ret_type": "", "variables": {"executor_cls": "", "executor_name": "", "mode": "", "return_value": "", "sensor": "", "task": ""}, "variables_p": {"executor_cls": [["str", 0.5784168069521729], ["Union[Literal, str]", 0.11628615436910417], ["int", 0.10970177434693441], ["Union[Literal, Literal]", 0.10102392340049252]], "executor_name": [["str", 0.8987621533301361]], "mode": [["str", 1.0]], "return_value": [["str", 0.23094802251941032], ["Dict[str, Any]", 0.12223418946555711], ["deeplearning.ml4pl.models.checkpoints.CheckpointReference", 0.11337039859804625], ["dict", 0.09365058663648526], ["list", 0.08582704190360131], ["Dict[str, str]", 0.08569330408499712], ["Dict[str, Optional[str]]", 0.0821242513344863]], "sensor": [["int", 0.5879959394572638], ["bool", 0.11463366539051807], ["str", 0.1045515368226152], ["tests.factories.model.TaskPayment", 0.09650476613706438]], "task": [["dict", 0.19919869378554345]]}}], "name": "TestBaseSensor", "q_name": "TestBaseSensor", "variables": {}, "variables_p": {}}, {"cls_lc": [[867, 0], [880, 24]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[868, 4], [872, 32]], "fn_var_ln": {"mode": [[869, 8], [869, 17]], "poke_changes_mode": [[871, 8], [871, 30]], "return_value": [[872, 8], [872, 25]]}, "fn_var_occur": {"mode": [["self", "mode", "kwargs"]], "poke_changes_mode": [["self", "poke_changes_mode", "poke_changes_mode"]], "return_value": [["self", "return_value", "True"]]}, "name": "__init__", "params": {"kwargs": "", "poke_changes_mode": "", "self": ""}, "params_descr": {"kwargs": "", "poke_changes_mode": "", "self": ""}, "params_occur": {"kwargs": [["self", "mode", "kwargs"], ["super", "__init__", "kwargs"]], "poke_changes_mode": [["self", "poke_changes_mode", "poke_changes_mode"]], "self": [["self", "mode", "kwargs"], ["self", "poke_changes_mode", "poke_changes_mode"], ["self", "return_value", "True"]]}, "params_p": {"args": [], "kwargs": [], "poke_changes_mode": [["Optional[bool]", 0.21595433732454666], ["ofxtools.models.ofx.OFX", 0.10797716866227333], ["Optional[int]", 0.10797716866227333], ["float", 0.10553079116468525]], "self": []}, "q_name": "DummyPokeOnlySensor.__init__", "ret_exprs": [], "ret_type": "", "variables": {"mode": "", "poke_changes_mode": "", "return_value": ""}, "variables_p": {"mode": [["bytes", 0.9999999994610422], ["str", 2.3171916564612614e-10], ["List[str]", 1.784992048380376e-10], ["float", 1.2873921362155948e-10]], "poke_changes_mode": [["int", 0.7406099342610908], ["Set[str]", 0.08596242593877113]], "return_value": [["float", 0.1347858472183589], ["dict", 0.09503344223257755], ["str", 0.09427506632184962], ["list", 0.09394712262156568], ["List[str]", 0.09361401159731442], ["Tuple[Any, Any, int]", 0.09209752086223784], ["List[Dict[str, Any]]", 0.09194738512747819]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[874, 4], [877, 32]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "poke", "params": {"context": "airflow.utils.context.Context", "self": ""}, "params_descr": {"context": "", "self": ""}, "params_occur": {"context": [], "self": [["self", "poke_changes_mode"], ["self", "change_mode"], ["self", "return_value"]]}, "params_p": {"args": [], "context": [["int", 0.19999999999999998], ["str", 0.19999999999999998], ["Iterable['Context']", 0.09999999999999999], ["dict", 0.09999999999999999], ["bool", 0.09999999999999999]], "kwargs": [], "self": []}, "q_name": "DummyPokeOnlySensor.poke", "ret_exprs": ["return self.return_value"], "ret_type": "", "ret_type_p": [["float", 0.5014281674021597], ["Optional[Callable[[str], bool]]", 0.1030664479276499], ["datetime.datetime", 0.09635527045384133]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[879, 4], [880, 24]], "fn_var_ln": {"mode": [[880, 8], [880, 17]]}, "fn_var_occur": {"mode": [["self", "mode", "mode"]]}, "name": "change_mode", "params": {"mode": "", "self": ""}, "params_descr": {"mode": "", "self": ""}, "params_occur": {"mode": [["self", "mode", "mode"]], "self": [["self", "mode", "mode"]]}, "params_p": {"args": [], "kwargs": [], "mode": [["int", 0.4999999999470978], ["bool", 0.49999999991799227], ["str", 2.910556954754401e-11], ["Dict[str, Any]", 1.391110346387261e-11]], "self": []}, "q_name": "DummyPokeOnlySensor.change_mode", "ret_exprs": [], "ret_type": "", "variables": {"mode": ""}, "variables_p": {"mode": [["bytes", 0.9999999994610422], ["str", 2.3171916564612614e-10], ["List[str]", 1.784992048380376e-10], ["float", 1.2873921362155948e-10]]}}], "name": "DummyPokeOnlySensor", "q_name": "DummyPokeOnlySensor", "variables": {}, "variables_p": {}}, {"cls_lc": [[883, 0], [910, 27]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[884, 4], [896, 79]], "fn_var_ln": {"sensor": [[886, 12], [886, 18]]}, "fn_var_occur": {"sensor": [["sensor", "DummyPokeOnlySensor", "task_id", "mode", "poke_changes_mode", "False"], ["sensor", "poke"], ["sensor", "change_mode"]]}, "name": "test_poke_mode_only_allows_poke_mode", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "fail"], ["self", "fail"], ["self", "fail"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestPokeModeOnly.test_poke_mode_only_allows_poke_mode", "ret_exprs": [], "ret_type": "", "variables": {"sensor": ""}, "variables_p": {"sensor": [["int", 0.12716068459207333], ["Dict[str, str]", 0.11654249750910746], ["List[int]", 0.11472776334897235], ["str", 0.09549961423528791], ["List[Tuple[Any, Any]]", 0.08814090013718433], ["float", 0.08605554673087348]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[898, 4], [901, 44]], "fn_var_ln": {"sensor": [[899, 8], [899, 14]]}, "fn_var_occur": {"sensor": [["sensor", "DummyPokeOnlySensor", "task_id", "mode", "poke_changes_mode", "False"], ["sensor", "change_mode"]]}, "name": "test_poke_mode_only_bad_class_method", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestPokeModeOnly.test_poke_mode_only_bad_class_method", "ret_exprs": [], "ret_type": "", "variables": {"sensor": ""}, "variables_p": {"sensor": [["str", 0.18231445028204862], ["int", 0.13292281808696665], ["Dict[str, str]", 0.11922887075175316], ["List[int]", 0.11022271348045005], ["List[Tuple[Any, Any]]", 0.08737265533635133], ["byceps.services.user.transfer.models.User", 0.08461778637676877]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[903, 4], [905, 90]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_poke_mode_only_bad_init", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestPokeModeOnly.test_poke_mode_only_bad_init", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[907, 4], [910, 27]], "fn_var_ln": {"sensor": [[908, 8], [908, 14]]}, "fn_var_occur": {"sensor": [["sensor", "DummyPokeOnlySensor", "task_id", "mode", "poke_changes_mode", "True"], ["sensor", "poke"]]}, "name": "test_poke_mode_only_bad_poke", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestPokeModeOnly.test_poke_mode_only_bad_poke", "ret_exprs": [], "ret_type": "", "variables": {"sensor": ""}, "variables_p": {"sensor": [["str", 0.21217591195495272], ["List[int]", 0.11101229094754714], ["rotkehlchen.tests.utils.rotkehlchen.BalancesTestSetup", 0.08999942391015832], ["List[Dict[str, str]]", 0.08644114124930947]]}}], "name": "TestPokeModeOnly", "q_name": "TestPokeModeOnly", "variables": {}, "variables_p": {}}], "funcs": [], "imports": ["__future__", "annotations", "datetime", "timedelta", "unittest", "mock", "Mock", "patch", "pytest", "time_machine", "airflow", "exceptions", "AirflowException", "AirflowRescheduleException", "AirflowSensorTimeout", "airflow", "executors", "celery_executor", "CeleryExecutor", "airflow", "executors", "celery_kubernetes_executor", "CeleryKubernetesExecutor", "airflow", "executors", "debug_executor", "DebugExecutor", "airflow", "executors", "executor_constants", "CELERY_EXECUTOR", "CELERY_KUBERNETES_EXECUTOR", "DASK_EXECUTOR", "DEBUG_EXECUTOR", "KUBERNETES_EXECUTOR", "LOCAL_EXECUTOR", "LOCAL_KUBERNETES_EXECUTOR", "SEQUENTIAL_EXECUTOR", "airflow", "executors", "kubernetes_executor", "KubernetesExecutor", "airflow", "executors", "local_executor", "LocalExecutor", "airflow", "executors", "local_kubernetes_executor", "LocalKubernetesExecutor", "airflow", "executors", "sequential_executor", "SequentialExecutor", "airflow", "models", "TaskReschedule", "airflow", "models", "xcom", "XCom", "airflow", "operators", "empty", "EmptyOperator", "airflow", "sensors", "base", "BaseSensorOperator", "PokeReturnValue", "poke_mode_only", "airflow", "ti_deps", "deps", "ready_to_reschedule", "ReadyToRescheduleDep", "airflow", "utils", "timezone", "airflow", "utils", "context", "Context", "airflow", "utils", "state", "State", "airflow", "utils", "timezone", "datetime", "tests", "test_utils", "db"], "mod_var_ln": {"DEFAULT_DATE": [[55, 0], [55, 12]], "DEV_NULL": [[59, 0], [59, 8]], "DUMMY_OP": [[57, 0], [57, 8]], "SENSOR_OP": [[58, 0], [58, 9]], "TEST_DAG_ID": [[56, 0], [56, 11]]}, "mod_var_occur": {"DEFAULT_DATE": [["task", "run", "start_date", "DEFAULT_DATE", "end_date", "DEFAULT_DATE", "ignore_ti_state", "True", "kwargs"], ["mock_utctime", "return_value", "DEFAULT_DATE"], ["mock_utctime", "return_value", "DEFAULT_DATE"], ["mock_utctime", "return_value", "DEFAULT_DATE"]], "DEV_NULL": [], "DUMMY_OP": [["dummy_op", "EmptyOperator", "task_id", "DUMMY_OP"], ["ti", "task_id", "DUMMY_OP"], ["ti", "task_id", "DUMMY_OP"], ["ti", "task_id", "DUMMY_OP"], ["ti", "task_id", "DUMMY_OP"], ["ti", "task_id", "DUMMY_OP"], ["ti", "task_id", "DUMMY_OP"], ["ti", "task_id", "DUMMY_OP"], ["ti", "task_id", "DUMMY_OP"], ["ti", "task_id", "DUMMY_OP"], ["ti", "task_id", "DUMMY_OP"], ["ti", "task_id", "DUMMY_OP"], ["ti", "task_id", "DUMMY_OP"], ["ti", "task_id", "DUMMY_OP"], ["ti", "task_id", "DUMMY_OP"], ["ti", "task_id", "DUMMY_OP"], ["ti", "task_id", "DUMMY_OP"], ["ti", "task_id", "DUMMY_OP"], ["ti", "task_id", "DUMMY_OP"], ["ti", "task_id", "DUMMY_OP"], ["ti", "task_id", "DUMMY_OP"], ["ti", "task_id", "DUMMY_OP"]], "SENSOR_OP": [["ti", "task_id", "SENSOR_OP"], ["ti", "task_id", "SENSOR_OP"], ["ti", "task_id", "SENSOR_OP"], ["ti", "task_id", "SENSOR_OP"], ["ti", "task_id", "SENSOR_OP"], ["ti", "task_id", "SENSOR_OP"], ["ti", "task_id", "SENSOR_OP"], ["ti", "task_id", "SENSOR_OP"], ["ti", "task_id", "SENSOR_OP"], ["ti", "task_id", "SENSOR_OP"], ["ti", "task_id", "SENSOR_OP"], ["ti", "task_id", "SENSOR_OP"], ["ti", "task_id", "SENSOR_OP"], ["ti", "task_id", "SENSOR_OP"], ["ti", "task_id", "SENSOR_OP"], ["ti", "task_id", "SENSOR_OP"], ["ti", "task_id", "SENSOR_OP"], ["ti", "task_id", "SENSOR_OP"], ["ti", "task_id", "SENSOR_OP"], ["sensor", "DummySensor", "task_id", "SENSOR_OP", "return_value", "None", "poke_interval", "timeout", "exponential_backoff", "False"], ["sensor", "DummySensor", "task_id", "SENSOR_OP", "return_value", "None", "poke_interval", "timeout", "exponential_backoff", "True"], ["sensor", "DummySensor", "task_id", "SENSOR_OP", "return_value", "None", "poke_interval", "poke_interval", "timeout", "exponential_backoff", "True"], ["sensor", "DummySensor", "task_id", "SENSOR_OP", "return_value", "None", "poke_interval", "timeout", "exponential_backoff", "True", "max_wait", "timedelta", "seconds"], ["ti", "task_id", "SENSOR_OP"], ["ti", "task_id", "SENSOR_OP"], ["ti", "task_id", "SENSOR_OP"], ["actual_xcom_value", "XCom", "get_one", "key", "task_id", "SENSOR_OP", "dag_id", "dr", "dag_id", "run_id", "dr", "run_id"], ["ti", "task_id", "SENSOR_OP"], ["actual_xcom_value", "XCom", "get_one", "key", "task_id", "SENSOR_OP", "dag_id", "dr", "dag_id", "run_id", "dr", "run_id"], ["sensor", "DummySensor", "task_id", "SENSOR_OP", "return_value", "None", "poke_interval", "timeout", "exponential_backoff", "True", "max_wait", "timedelta", "seconds"]], "TEST_DAG_ID": [["dag_maker", "TEST_DAG_ID"]]}, "no_types_annot": {"D": 3, "I": 0, "U": 198}, "session_id": "tLu8Tv5FaFC--SZVuaxpg8Eaw9R5glad-OnvUic9OSw", "set": null, "tc": [false, null], "type_annot_cove": 0.01, "typed_seq": "", "untyped_seq": "", "variables": {"DEFAULT_DATE": "", "DEV_NULL": "", "DUMMY_OP": "", "SENSOR_OP": "", "TEST_DAG_ID": ""}, "variables_p": {"DEFAULT_DATE": [["datetime.datetime", 0.39803312163409493], ["str", 0.2956487618594161], ["datetime.datetime.date", 0.19462907603332225], ["Pattern[str]", 0.11168904047316672]], "DEV_NULL": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "DUMMY_OP": [["Dict[str, str]", 0.3221952501725505], ["str", 0.10273142483666048], ["Dict[str, Any]", 0.10156067975673706], ["Dict[str, Dict[str, Any]]", 0.09618122613294473], ["legistar.models.MatterStatus", 0.09236847770537568], ["int", 0.0839984113149538]], "SENSOR_OP": [["list", 0.32375284800649473], ["int", 0.20662670899881785], ["Dict[int, Any]", 0.17853768209899668], ["Dict[str, str]", 0.10654335716463414], ["dict", 0.09420205870424417], ["str", 0.0903373450268125]], "TEST_DAG_ID": [["str", 0.30001873163082327], ["property", 0.20661236092766808], ["List[int]", 0.10171643778207759]]}}}