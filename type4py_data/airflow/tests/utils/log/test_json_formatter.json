{"error": null, "response": {"classes": [{"cls_lc": [[30, 0], [83, 68]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": "JSONFormatter instance  should return not none", "long_descr": null, "ret": null}, "fn_lc": [[35, 4], [40, 35]], "fn_var_ln": {"json_fmt": [[39, 8], [39, 16]]}, "fn_var_occur": {"json_fmt": [["json_fmt", "JSONFormatter"], ["json_fmt", "None"]]}, "name": "test_json_formatter_is_not_none", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestJSONFormatter.test_json_formatter_is_not_none", "ret_exprs": [], "ret_type": "", "variables": {"json_fmt": ""}, "variables_p": {"json_fmt": [["str", 0.24888518490859224], ["float", 0.1541340122648401], ["bool", 0.08113976411869227]]}}, {"docstring": {"func": "Test usesTime method from JSONFormatter", "long_descr": null, "ret": null}, "fn_lc": [[42, 4], [49, 49]], "fn_var_ln": {"json_fmt_asctime": [[46, 8], [46, 24]], "json_fmt_no_asctime": [[47, 8], [47, 27]]}, "fn_var_occur": {"json_fmt_asctime": [["json_fmt_asctime", "JSONFormatter", "json_fields"], ["json_fmt_asctime", "usesTime"]], "json_fmt_no_asctime": [["json_fmt_no_asctime", "JSONFormatter", "json_fields"], ["json_fmt_no_asctime", "usesTime"]]}, "name": "test_uses_time", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestJSONFormatter.test_uses_time", "ret_exprs": [], "ret_type": "", "variables": {"json_fmt_asctime": "", "json_fmt_no_asctime": ""}, "variables_p": {"json_fmt_asctime": [["idom.utils.Ref[None]", 0.38544836516703845], ["str", 0.28025252832681086], ["set", 0.06958161980958702], ["int", 0.060910562854771304]], "json_fmt_no_asctime": [["str", 0.6006403166099779], ["int", 0.27368122065195355]]}}, {"docstring": {"func": "Test format method from JSONFormatter", "long_descr": null, "ret": null}, "fn_lc": [[51, 4], [57, 66]], "fn_var_ln": {"json_fmt": [[56, 8], [56, 16]], "log_record": [[55, 8], [55, 18]]}, "fn_var_occur": {"json_fmt": [["json_fmt", "JSONFormatter", "json_fields"], ["json_fmt", "format", "log_record"]], "log_record": [["log_record", "makeLogRecord"], ["json_fmt", "format", "log_record"]]}, "name": "test_format", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestJSONFormatter.test_format", "ret_exprs": [], "ret_type": "", "variables": {"json_fmt": "", "log_record": ""}, "variables_p": {"json_fmt": [["str", 0.8989117575016524], ["int", 0.10108824249834775]], "log_record": [["logging.Logger", 0.4148768481810745], ["str", 0.2479957482328068], ["bool", 0.2474585135907808], ["logging.LogRecord", 0.08966888999533792]]}}, {"docstring": {"func": "Test format with extras method from JSONFormatter", "long_descr": null, "ret": null}, "fn_lc": [[59, 4], [66, 107]], "fn_var_ln": {"json_fmt": [[64, 8], [64, 16]], "log_record": [[63, 8], [63, 18]]}, "fn_var_occur": {"json_fmt": [["json_fmt", "JSONFormatter", "json_fields", "extras"], ["json", "loads", "json_fmt", "format", "log_record"]], "log_record": [["log_record", "makeLogRecord"], ["json", "loads", "json_fmt", "format", "log_record"]]}, "name": "test_format_with_extras", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestJSONFormatter.test_format_with_extras", "ret_exprs": [], "ret_type": "", "variables": {"json_fmt": "", "log_record": ""}, "variables_p": {"json_fmt": [["str", 0.5116402125579766], ["List[str]", 0.2811268578166026], ["Pattern[str]", 0.11339799536086693]], "log_record": [["Dict[str, Union[Any, Any, Any, Any]]", 0.3790527054255527], ["logging.Logger", 0.3424979561713367], ["Dict[str, Union[Any, Any, Any]]", 0.09476317635638817], ["rotkehlchen.logging.RotkehlchenLogsAdapter", 0.09450640879897546], ["set", 0.08917975324774685]]}}, {"docstring": {"func": "Test exception is included in the message when using JSONFormatter", "long_descr": null, "ret": null}, "fn_lc": [[68, 4], [83, 68]], "fn_var_ln": {"exc_info": [[75, 12], [75, 20]], "json_fmt": [[78, 8], [78, 16]], "log_fmt": [[80, 8], [80, 15]], "log_record": [[77, 8], [77, 18]]}, "fn_var_occur": {"exc_info": [["exc_info", "sys", "exc_info"], ["log_record", "makeLogRecord", "exc_info"]], "json_fmt": [["json_fmt", "JSONFormatter", "json_fields"], ["log_fmt", "json", "loads", "json_fmt", "format", "log_record"]], "log_fmt": [["log_fmt", "json", "loads", "json_fmt", "format", "log_record"]], "log_record": [["log_record", "makeLogRecord", "exc_info"], ["log_fmt", "json", "loads", "json_fmt", "format", "log_record"]]}, "name": "test_format_with_exception", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestJSONFormatter.test_format_with_exception", "ret_exprs": [], "ret_type": "", "variables": {"exc_info": "", "json_fmt": "", "log_fmt": "", "log_record": ""}, "variables_p": {"exc_info": [["str", 0.5202536816389048], ["Dict[str, Any]", 0.0668923700520647], ["Dict[Any, str]", 0.0647722469235892], ["Dict[str, int]", 0.06287083737975678]], "json_fmt": [["str", 0.5450155086005446], ["List[str]", 0.2778043703683599], ["Dict[str, str]", 0.09251922069532138]], "log_fmt": [["str", 0.6393452753274036], ["Pattern[str]", 0.24941449919210967], ["Union[Literal, str]", 0.11124022548048672]], "log_record": [["logging.Formatter", 0.09221336653079099], ["logging.LogRecord", 0.07587585687892986], ["dict", 0.07109921212023396]]}}], "name": "TestJSONFormatter", "q_name": "TestJSONFormatter", "variables": {}, "variables_p": {}}], "funcs": [], "imports": ["__future__", "annotations", "json", "sys", "logging", "makeLogRecord", "airflow", "utils", "log", "json_formatter", "JSONFormatter"], "mod_var_ln": {}, "mod_var_occur": {}, "no_types_annot": {"D": 0, "I": 0, "U": 16}, "session_id": "6MGeHcGcuxzc7OXIgtiga306bhazzYuy5Q6dCARphUQ", "set": null, "tc": [false, null], "type_annot_cove": 0.0, "typed_seq": "", "untyped_seq": "", "variables": {}, "variables_p": {}}}