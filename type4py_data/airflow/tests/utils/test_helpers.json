{"error": null, "response": {"classes": [{"cls_lc": [[53, 0], [328, 52]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[55, 4], [69, 53]], "fn_var_ln": {"dag_id": [[57, 8], [57, 14]], "execution_date": [[59, 8], [59, 22]], "expected_filename": [[65, 8], [65, 25]], "filename_template": [[62, 8], [62, 25]], "rendered_filename": [[67, 8], [67, 25]], "task_id": [[58, 8], [58, 15]], "ti": [[61, 8], [61, 10]], "try_number": [[56, 8], [56, 18]], "ts": [[64, 8], [64, 10]]}, "fn_var_occur": {"dag_id": [["ti", "create_task_instance", "dag_id", "dag_id", "task_id", "task_id", "execution_date", "execution_date"], ["expected_filename", "dag_id", "task_id", "ts", "try_number"]], "execution_date": [["execution_date", "timezone", "datetime"], ["ti", "create_task_instance", "dag_id", "dag_id", "task_id", "task_id", "execution_date", "execution_date"]], "expected_filename": [["expected_filename", "dag_id", "task_id", "ts", "try_number"], ["rendered_filename", "expected_filename"]], "filename_template": [["rendered_filename", "helpers", "render_log_filename", "ti", "try_number", "filename_template"]], "rendered_filename": [["rendered_filename", "helpers", "render_log_filename", "ti", "try_number", "filename_template"], ["rendered_filename", "expected_filename"]], "task_id": [["ti", "create_task_instance", "dag_id", "dag_id", "task_id", "task_id", "execution_date", "execution_date"], ["expected_filename", "dag_id", "task_id", "ts", "try_number"]], "ti": [["ti", "create_task_instance", "dag_id", "dag_id", "task_id", "task_id", "execution_date", "execution_date"], ["ts", "ti", "get_template_context"], ["rendered_filename", "helpers", "render_log_filename", "ti", "try_number", "filename_template"]], "try_number": [["expected_filename", "dag_id", "task_id", "ts", "try_number"], ["rendered_filename", "helpers", "render_log_filename", "ti", "try_number", "filename_template"]], "ts": [["ts", "ti", "get_template_context"], ["expected_filename", "dag_id", "task_id", "ts", "try_number"]]}, "name": "test_render_log_filename", "params": {"create_task_instance": "", "self": ""}, "params_descr": {"create_task_instance": "", "self": ""}, "params_occur": {"create_task_instance": [["ti", "create_task_instance", "dag_id", "dag_id", "task_id", "task_id", "execution_date", "execution_date"]], "self": []}, "params_p": {"args": [], "create_task_instance": [["tests.test_util.aiohttp.AiohttpClientMocker", 0.06749889519597524]], "kwargs": [], "self": []}, "q_name": "TestHelpers.test_render_log_filename", "ret_exprs": [], "ret_type": "", "variables": {"dag_id": "", "execution_date": "", "expected_filename": "", "filename_template": "", "rendered_filename": "", "task_id": "", "ti": "", "try_number": "", "ts": ""}, "variables_p": {"dag_id": [["str", 0.38776563941084413], ["int", 0.33892388467736506]], "execution_date": [["str", 0.2874215584998568], ["Optional[int]", 0.10041812370725561], ["int", 0.10033211287634404]], "expected_filename": [["str", 0.36954974327002804], ["Dict[str, str]", 0.10457213788236251], ["dict", 0.08904908122027551]], "filename_template": [["str", 0.8933612107767736], ["Pattern[str]", 0.10663878922322652]], "rendered_filename": [["str", 0.9043623804674726]], "task_id": [["str", 0.5161448889873794], ["int", 0.2771683786216194]], "ti": [["int", 0.32139258584328106], ["List[str]", 0.17667055076775526], ["List[Dict[str, Any]]", 0.10187920041701738], ["str", 0.0828829374289856]], "try_number": [["str", 0.27065296750023127], ["list", 0.1005987229917637], ["int", 0.09568786273970474], ["dict", 0.0880434604072882]], "ts": [["str", 0.5194896890050199], ["int", 0.09472345374180256], ["Type[str]", 0.09107085224806796]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[71, 4], [80, 66]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_chunks", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestHelpers.test_chunks", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[82, 4], [87, 95]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_reduce_in_chunks", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestHelpers.test_reduce_in_chunks", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[89, 4], [96, 43]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_is_container", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestHelpers.test_is_container", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[98, 4], [107, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_as_tuple", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestHelpers.test_as_tuple", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[109, 4], [112, 41]], "fn_var_ln": {"as_tup": [[111, 8], [111, 14]], "test_list": [[110, 8], [110, 17]]}, "fn_var_occur": {"as_tup": [["as_tup", "helpers", "as_tuple", "test_list"], ["tuple", "test_list", "as_tup"]], "test_list": [["as_tup", "helpers", "as_tuple", "test_list"], ["tuple", "test_list", "as_tup"]]}, "name": "test_as_tuple_iter", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestHelpers.test_as_tuple_iter", "ret_exprs": [], "ret_type": "", "variables": {"as_tup": "", "test_list": ""}, "variables_p": {"as_tup": [["List[str]", 0.29320821636027494], ["list", 0.1863619965828654], ["starfish.core.types._spot_finding_results.SpotFindingResults", 0.12127538178161722], ["int", 0.10956113475737314], ["List[Tuple[int, int, int]]", 0.10561399162210693], ["str", 0.09266330878377561], ["List[List[Any]]", 0.09131597011198685]], "test_list": [["List[Tuple[int, int, int]]", 0.21501501737196768], ["int", 0.2034294186758296], ["Optional[str]", 0.09516962730865175], ["bool", 0.09516962730865175], ["Set[str]", 0.0908558605901412], ["List[Tuple[str, bool, str]]", 0.08982799874192224], ["str", 0.08896662946507487]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[114, 4], [117, 36]], "fn_var_ln": {"as_tup": [[116, 8], [116, 14]], "test_str": [[115, 8], [115, 16]]}, "fn_var_occur": {"as_tup": [["as_tup", "helpers", "as_tuple", "test_str"], ["test_str", "as_tup"]], "test_str": [["as_tup", "helpers", "as_tuple", "test_str"], ["test_str", "as_tup"]]}, "name": "test_as_tuple_no_iter", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestHelpers.test_as_tuple_no_iter", "ret_exprs": [], "ret_type": "", "variables": {"as_tup": "", "test_str": ""}, "variables_p": {"as_tup": [["Dict[str, str]", 0.18826575259507053], ["Dict[str, int]", 0.18826575259507053], ["dict", 0.12835867713005986], ["ChainMap[str, str]", 0.09623380329651038], ["str", 0.09507705531687964], ["Dict[str, Union[int, str]]", 0.09413287629753526], ["Dict[str, float]", 0.09413287629753526]], "test_str": [["str", 0.41298712592850684], ["Tuple[str, str, str, str, str, str, str, str]", 0.10062394361553541], ["Tuple[str, str, str, str, str, str, str, str, str, str]", 0.10062394361553541], ["Dict[str, Any]", 0.0986561176933475]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[119, 4], [121, 95]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_convert_camel_to_snake", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestHelpers.test_convert_camel_to_snake", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Test _merge method from JSONFormatter", "long_descr": null, "ret": null}, "fn_lc": [[123, 4], [130, 58]], "fn_var_ln": {"dict1": [[127, 8], [127, 13]], "dict2": [[128, 8], [128, 13]], "merged": [[129, 8], [129, 14]]}, "fn_var_occur": {"dict1": [["merged", "merge_dicts", "dict1", "dict2"]], "dict2": [["merged", "merge_dicts", "dict1", "dict2"]], "merged": [["merged", "merge_dicts", "dict1", "dict2"]]}, "name": "test_merge_dicts", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestHelpers.test_merge_dicts", "ret_exprs": [], "ret_type": "", "variables": {"dict1": "", "dict2": "", "merged": ""}, "variables_p": {"dict1": [["dict", 0.9999999999999999]], "dict2": [["dict", 0.9999999999999999]], "merged": [["dict", 0.21773284324957373], ["Dict[str, List[int]]", 0.21477998471349222], ["Dict[str, str]", 0.10738999235674611], ["frozenset[str]", 0.08016202842570957], ["Dict[str, Union[Any, Any, Any, Any, Any, Any]]", 0.07618831300541874], ["list", 0.07618831300541874], ["Type[Dict[str, float]]", 0.07618831300541874], ["str", 0.07618831300541874], ["List[int]", 0.07518189923280331]]}}, {"docstring": {"func": "Test merge_dicts with recursive dict; one level of nesting", "long_descr": null, "ret": null}, "fn_lc": [[132, 4], [139, 64]], "fn_var_ln": {"dict1": [[136, 8], [136, 13]], "dict2": [[137, 8], [137, 13]], "merged": [[138, 8], [138, 14]]}, "fn_var_occur": {"dict1": [["merged", "merge_dicts", "dict1", "dict2"]], "dict2": [["merged", "merge_dicts", "dict1", "dict2"]], "merged": [["merged", "merge_dicts", "dict1", "dict2"]]}, "name": "test_merge_dicts_recursive_overlap_l1", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestHelpers.test_merge_dicts_recursive_overlap_l1", "ret_exprs": [], "ret_type": "", "variables": {"dict1": "", "dict2": "", "merged": ""}, "variables_p": {"dict1": [["dict", 0.9999999999999999]], "dict2": [["dict", 0.9999999999999999]], "merged": [["dict", 0.21773284324957373], ["Dict[str, List[int]]", 0.21477998471349222], ["Dict[str, str]", 0.10738999235674611], ["frozenset[str]", 0.08016202842570957], ["Dict[str, Union[Any, Any, Any, Any, Any, Any]]", 0.07618831300541874], ["list", 0.07618831300541874], ["Type[Dict[str, float]]", 0.07618831300541874], ["str", 0.07618831300541874], ["List[int]", 0.07518189923280331]]}}, {"docstring": {"func": "Test merge_dicts with recursive dict; two levels of nesting", "long_descr": null, "ret": null}, "fn_lc": [[141, 4], [149, 79]], "fn_var_ln": {"dict1": [[146, 8], [146, 13]], "dict2": [[147, 8], [147, 13]], "merged": [[148, 8], [148, 14]]}, "fn_var_occur": {"dict1": [["merged", "merge_dicts", "dict1", "dict2"]], "dict2": [["merged", "merge_dicts", "dict1", "dict2"]], "merged": [["merged", "merge_dicts", "dict1", "dict2"]]}, "name": "test_merge_dicts_recursive_overlap_l2", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestHelpers.test_merge_dicts_recursive_overlap_l2", "ret_exprs": [], "ret_type": "", "variables": {"dict1": "", "dict2": "", "merged": ""}, "variables_p": {"dict1": [["dict", 0.9999999999999999]], "dict2": [["dict", 0.9999999999999999]], "merged": [["dict", 0.21773284324957373], ["Dict[str, List[int]]", 0.21477998471349222], ["Dict[str, str]", 0.10738999235674611], ["frozenset[str]", 0.08016202842570957], ["Dict[str, Union[Any, Any, Any, Any, Any, Any]]", 0.07618831300541874], ["list", 0.07618831300541874], ["Type[Dict[str, float]]", 0.07618831300541874], ["str", 0.07618831300541874], ["List[int]", 0.07518189923280331]]}}, {"docstring": {"func": "Test merge_dicts with recursive when dict1 doesn't have any nested dict", "long_descr": null, "ret": null}, "fn_lc": [[151, 4], [158, 56]], "fn_var_ln": {"dict1": [[155, 8], [155, 13]], "dict2": [[156, 8], [156, 13]], "merged": [[157, 8], [157, 14]]}, "fn_var_occur": {"dict1": [["merged", "merge_dicts", "dict1", "dict2"]], "dict2": [["merged", "merge_dicts", "dict1", "dict2"]], "merged": [["merged", "merge_dicts", "dict1", "dict2"]]}, "name": "test_merge_dicts_recursive_right_only", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestHelpers.test_merge_dicts_recursive_right_only", "ret_exprs": [], "ret_type": "", "variables": {"dict1": "", "dict2": "", "merged": ""}, "variables_p": {"dict1": [["dict", 0.9999999999999999]], "dict2": [["dict", 0.9999999999999999]], "merged": [["dict", 0.21773284324957373], ["Dict[str, List[int]]", 0.21477998471349222], ["Dict[str, str]", 0.10738999235674611], ["frozenset[str]", 0.08016202842570957], ["Dict[str, Union[Any, Any, Any, Any, Any, Any]]", 0.07618831300541874], ["list", 0.07618831300541874], ["Type[Dict[str, float]]", 0.07618831300541874], ["str", 0.07618831300541874], ["List[int]", 0.07518189923280331]]}}, {"docstring": {"func": "Test query generated with dag_id and params", "long_descr": null, "ret": null}, "fn_lc": [[165, 4], [175, 70]], "fn_var_ln": {"expected_url": [[170, 8], [170, 20]], "query": [[169, 8], [169, 13]]}, "fn_var_occur": {"expected_url": [["build_airflow_url_with_query", "query", "expected_url"]], "query": [["build_airflow_url_with_query", "query", "expected_url"]]}, "name": "test_build_airflow_url_with_query", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestHelpers.test_build_airflow_url_with_query", "ret_exprs": [], "ret_type": "", "variables": {"expected_url": "", "query": ""}, "variables_p": {"expected_url": [["Dict[str, str]", 0.7780014061254993], ["list", 0.1218283639262848], ["Dict[str, List[str]]", 0.10017022994821576]], "query": [["Final", 0.24799750528968892], ["List[str]", 0.12863962901257614], ["Dict[str, List[str]]", 0.12127434663954904], ["Set[Pattern[str]]", 0.0859575223984047], ["Sequence", 0.08215330669162813], ["str", 0.08202734015721946]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[201, 4], [206, 32]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_validate_key", "params": {"exception": "", "key_id": "", "message": "", "self": ""}, "params_descr": {"exception": "", "key_id": "", "message": "", "self": ""}, "params_occur": {"exception": [["pytest", "raises", "exception", "match", "re", "escape", "message"]], "key_id": [["validate_key", "key_id"], ["validate_key", "key_id"]], "message": [["pytest", "raises", "exception", "match", "re", "escape", "message"]], "self": []}, "params_p": {"args": [], "exception": [["str", 0.8066255493312092], ["int", 0.09981428410099678], ["bytes", 0.09356016656779402]], "key_id": [["str", 0.8769035668992822], ["bool", 0.12309643310071779]], "kwargs": [], "message": [["str", 0.8066255493312092], ["int", 0.09981428410099678], ["bytes", 0.09356016656779402]], "self": []}, "q_name": "TestHelpers.test_validate_key", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[242, 4], [247, 38]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_validate_group_key", "params": {"exception": "", "key_id": "", "message": "", "self": ""}, "params_descr": {"exception": "", "key_id": "", "message": "", "self": ""}, "params_occur": {"exception": [["pytest", "raises", "exception", "match", "re", "escape", "message"]], "key_id": [["validate_group_key", "key_id"], ["validate_group_key", "key_id"]], "message": [["pytest", "raises", "exception", "match", "re", "escape", "message"]], "self": []}, "params_p": {"args": [], "exception": [["str", 0.8985522153050832], ["int", 0.1014477846949169]], "key_id": [["str", 0.5833990200398357], ["bool", 0.20830048998008222], ["int", 0.20830048998008222]], "kwargs": [], "message": [["str", 0.8985522153050832], ["int", 0.1014477846949169]], "self": []}, "q_name": "TestHelpers.test_validate_group_key", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[258, 8], [265, 55]], "fn_var_ln": {"expected": [[264, 16], [264, 24]], "sample": [[259, 12], [259, 18]]}, "fn_var_occur": {"expected": [["expected", "True", "true", "truthy", "False"], ["exactly_one", "sample", "expected"]], "sample": [["sample", "extend", "truth_value", "num"], ["exactly_one", "sample", "expected"]]}, "name": "assert_exactly_one", "params": {"false": "", "falsy": "", "true": "", "truthy": ""}, "params_descr": {"false": "", "falsy": "", "true": "", "truthy": ""}, "params_occur": {"false": [["True", "true", "False", "false", "truthy", "falsy"]], "falsy": [["True", "true", "False", "false", "truthy", "falsy"]], "true": [["True", "true", "False", "false", "truthy", "falsy"], ["expected", "True", "true", "truthy", "False"]], "truthy": [["True", "true", "False", "false", "truthy", "falsy"], ["expected", "True", "true", "truthy", "False"]]}, "params_p": {"args": [], "false": [["Optional[int]", 0.2100470656175351], ["str", 0.19710619915052238], ["bool", 0.19142620582678077], ["Optional[float]", 0.10502353280876756], ["Optional[str]", 0.0992907974458719], ["list", 0.09855309957526119], ["Union[str, List[str]]", 0.09855309957526119]], "falsy": [["Optional[int]", 0.2100470656175351], ["str", 0.19710619915052238], ["bool", 0.19142620582678077], ["Optional[float]", 0.10502353280876756], ["Optional[str]", 0.0992907974458719], ["list", 0.09855309957526119], ["Union[str, List[str]]", 0.09855309957526119]], "kwargs": [], "self": [], "true": [["str", 0.30897225574113335], ["float", 0.19656029735579011], ["bool", 0.10884341656381724], ["int", 0.10084599875712165], ["Optional[int]", 0.09256218801009274], ["Dict[str, Any]", 0.0896329805302931]], "truthy": [["str", 0.30897225574113335], ["float", 0.19656029735579011], ["bool", 0.10884341656381724], ["int", 0.10084599875712165], ["Optional[int]", 0.09256218801009274], ["Dict[str, Any]", 0.0896329805302931]]}, "q_name": "TestHelpers.test_exactly_one.<locals>.assert_exactly_one", "ret_exprs": [], "ret_type": "", "variables": {"expected": "", "sample": ""}, "variables_p": {"expected": [["bool", 0.7102305898467438], ["str", 0.2897694101532563]], "sample": [["list", 0.6143380291428503], ["Generator[str, None, None]", 0.1035106131650878]]}}, {"docstring": {"func": "Checks that when we set ``true_count`` elements to \"truthy\", and others to \"falsy\",", "long_descr": "we get the expected return.\n\nWe check for both True / False, and truthy / falsy values 'a' and '', and verify that\nthey can safely be used in any combination.", "ret": null}, "fn_lc": [[249, 4], [268, 36]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_exactly_one", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestHelpers.test_exactly_one", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[270, 4], [272, 38]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_exactly_one_should_fail", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestHelpers.test_exactly_one_should_fail", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[283, 8], [296, 55]], "fn_var_ln": {"expected": [[295, 16], [295, 24]], "sample": [[284, 12], [284, 18]]}, "fn_var_occur": {"expected": [["expected", "True", "true", "truthy", "False"], ["at_most_one", "sample", "expected"]], "sample": [["sample", "extend", "truth_value", "num"], ["at_most_one", "sample", "expected"]]}, "name": "assert_at_most_one", "params": {"false": "", "falsy": "", "notset": "", "true": "", "truthy": ""}, "params_descr": {"false": "", "falsy": "", "notset": "", "true": "", "truthy": ""}, "params_occur": {"false": [["True", "true", "False", "false", "truthy", "falsy", "NOTSET", "notset"]], "falsy": [["True", "true", "False", "false", "truthy", "falsy", "NOTSET", "notset"]], "notset": [["True", "true", "False", "false", "truthy", "falsy", "NOTSET", "notset"]], "true": [["True", "true", "False", "false", "truthy", "falsy", "NOTSET", "notset"], ["expected", "True", "true", "truthy", "False"]], "truthy": [["True", "true", "False", "false", "truthy", "falsy", "NOTSET", "notset"], ["expected", "True", "true", "truthy", "False"]]}, "params_p": {"args": [], "false": [["Optional[int]", 0.2100470656175351], ["str", 0.19710619915052238], ["bool", 0.19142620582678077], ["Optional[float]", 0.10502353280876756], ["Optional[str]", 0.0992907974458719], ["list", 0.09855309957526119], ["Union[str, List[str]]", 0.09855309957526119]], "falsy": [["Optional[int]", 0.2100470656175351], ["str", 0.19710619915052238], ["bool", 0.19142620582678077], ["Optional[float]", 0.10502353280876756], ["Optional[str]", 0.0992907974458719], ["list", 0.09855309957526119], ["Union[str, List[str]]", 0.09855309957526119]], "kwargs": [], "notset": [["Optional[int]", 0.2100470656175351], ["str", 0.19710619915052238], ["bool", 0.19142620582678077], ["Optional[float]", 0.10502353280876756], ["Optional[str]", 0.0992907974458719], ["list", 0.09855309957526119], ["Union[str, List[str]]", 0.09855309957526119]], "self": [], "true": [["int", 0.22462650559345998], ["Optional[str]", 0.19154961712770924], ["float", 0.1061817702614877], ["List[int]", 0.10316295973564471], ["raiden.utils.BlockNumber", 0.09851306097040555], ["str", 0.0943756337157333], ["Optional[float]", 0.09014449949766833]], "truthy": [["int", 0.22462650559345998], ["Optional[str]", 0.19154961712770924], ["float", 0.1061817702614877], ["List[int]", 0.10316295973564471], ["raiden.utils.BlockNumber", 0.09851306097040555], ["str", 0.0943756337157333], ["Optional[float]", 0.09014449949766833]]}, "q_name": "TestHelpers.test_at_most_one.<locals>.assert_at_most_one", "ret_exprs": [], "ret_type": "", "variables": {"expected": "", "sample": ""}, "variables_p": {"expected": [["bool", 0.7102305898467438], ["str", 0.2897694101532563]], "sample": [["list", 0.6143380291428503], ["Generator[str, None, None]", 0.1035106131650878]]}}, {"docstring": {"func": "Checks that when we set ``true_count`` elements to \"truthy\", and others to \"falsy\",", "long_descr": "we get the expected return.\nWe check for both True / False, and truthy / falsy values 'a' and '', and verify that\nthey can safely be used in any combination.\nNOTSET values should be ignored.", "ret": null}, "fn_lc": [[274, 4], [300, 36]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_at_most_one", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestHelpers.test_at_most_one", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[324, 4], [328, 52]], "fn_var_ln": {"d1": [[326, 8], [326, 10]], "d2": [[327, 8], [327, 10]], "l1": [[325, 8], [325, 10]]}, "fn_var_occur": {"d1": [["d1", "None", "l1"], ["d2", "None", "d1", "l1", "None", "d1", "l1"]], "d2": [["d2", "None", "d1", "l1", "None", "d1", "l1"], ["prune_dict", "d2", "mode", "mode", "expected"]], "l1": [["l1", "None"], ["d1", "None", "l1"], ["d2", "None", "d1", "l1", "None", "d1", "l1"]]}, "name": "test_prune_dict", "params": {"expected": "", "mode": "", "self": ""}, "params_descr": {"expected": "", "mode": "", "self": ""}, "params_occur": {"expected": [["prune_dict", "d2", "mode", "mode", "expected"]], "mode": [["prune_dict", "d2", "mode", "mode", "expected"]], "self": []}, "params_p": {"args": [], "expected": [["List[str]", 0.07992965638745068], ["Callable", 0.0745941860426222]], "kwargs": [], "mode": [["List[str]", 0.07992965638745068], ["Callable", 0.0745941860426222]], "self": []}, "q_name": "TestHelpers.test_prune_dict", "ret_exprs": [], "ret_type": "", "variables": {"d1": "", "d2": "", "l1": ""}, "variables_p": {"d1": [["list", 0.18633940169611588], ["Type[bool]", 0.11566928896540825], ["List[str]", 0.10311686590969787], ["Union[None, float, int, str]", 0.08166889901944656]], "d2": [["Type[bool]", 0.10881885041745684], ["List[str]", 0.08709802086150674], ["list", 0.08234557638095838], ["Tuple[int, Any, Any]", 0.07879280028249996], ["Union[None, float, int, str]", 0.07826070843077022]], "l1": [["list", 0.3606209200303481], ["str", 0.17249469211981533], ["List[None]", 0.09632547601905345], ["int", 0.08708423690495352], ["Type[Exception]", 0.08240235090280973]]}}], "name": "TestHelpers", "q_name": "TestHelpers", "variables": {}, "variables_p": {}}, {"cls_lc": [[331, 0], [343, 19]], "cls_var_ln": {"job_type": [[332, 4], [332, 12]]}, "cls_var_occur": {"job_type": []}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[334, 4], [338, 24]], "fn_var_ln": {"func": [[338, 8], [338, 17]], "job": [[336, 8], [336, 16]]}, "fn_var_occur": {"func": [["self", "func", "func"]], "job": [["super", "__init__", "job"], ["self", "job", "job"], ["self", "job", "job_type", "self", "job_type"]]}, "name": "__init__", "params": {"func": "", "job": "Job | JobPydantic", "self": ""}, "params_descr": {"func": "", "job": "", "self": ""}, "params_occur": {"func": [["self", "func", "func"]], "job": [["super", "__init__", "job"], ["self", "job", "job"], ["self", "job", "job_type", "self", "job_type"]], "self": [["self", "job", "job"], ["self", "job", "job_type", "self", "job_type"], ["self", "func", "func"]]}, "params_p": {"args": [], "func": [["int", 0.28043375249822367], ["str", 0.22522735040632577], ["Optional[int]", 0.11781225255395564]], "job": [["bool", 0.15254500405945376], ["Callable", 0.09833336851369008], ["Dict[str, str]", 0.09589937080889396], ["Dict[str, Any]", 0.08029826703412145]], "kwargs": [], "self": []}, "q_name": "MockJobRunner.__init__", "ret_exprs": [], "ret_type": "", "variables": {"func": "", "job": ""}, "variables_p": {"func": [["List[List[int]]", 0.13155681558398147], ["float", 0.09561084199107348], ["int", 0.09443562079296385], ["List[int]", 0.09194009324166924], ["List[List[str]]", 0.08789297375360164]], "job": [["Dict[str, Dict[str, Any]]", 0.10710285272575101], ["Dict[str, Tuple[str, str]]", 0.10308862984568377], ["bool", 0.09741909621691874], ["Dict[str, str]", 0.09309220166313571], ["str", 0.0923822112301682], ["dict", 0.09145216741157082]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[340, 4], [343, 19]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "_execute", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "func", "None"], ["self", "func"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "MockJobRunner._execute", "ret_exprs": ["return self.func()", "return None"], "ret_type": "", "ret_type_p": [["str", 0.10604215848611416], ["Optional[str]", 0.09345979357219171], ["Optional[int]", 0.09320229767410418], ["type", 0.09251877717042703], ["Optional[float]", 0.08922607938840037]], "variables": {}, "variables_p": {}}], "name": "MockJobRunner", "q_name": "MockJobRunner", "variables": {"job_type": ""}, "variables_p": {"job_type": [["str", 0.19999999999999998], ["int", 0.19999999999999998], ["Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal]", 0.09999999999999999], ["Dict[str, str]", 0.09999999999999999], ["Tuple[Type[int], Type[float]]", 0.09999999999999999]]}}], "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[45, 0], [50, 19]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "clear_db", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "clear_db", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "imports": ["__future__", "annotations", "re", "itertools", "product", "pytest", "airflow", "AirflowException", "airflow", "jobs", "base_job_runner", "BaseJobRunner", "airflow", "jobs", "job", "Job", "airflow", "serialization", "pydantic", "job", "JobPydantic", "airflow", "utils", "helpers", "timezone", "airflow", "utils", "helpers", "at_most_one", "build_airflow_url_with_query", "exactly_one", "merge_dicts", "prune_dict", "validate_group_key", "validate_key", "airflow", "utils", "types", "NOTSET", "tests", "test_utils", "config", "conf_vars", "tests", "test_utils", "db", "clear_db_dags", "clear_db_runs", "airflow", "www", "app", "cached_app"], "mod_var_ln": {}, "mod_var_occur": {}, "no_types_annot": {"D": 0, "I": 0, "U": 79}, "session_id": "C0l-scmqQw7qXn8yCc7ZAMyvCKZx8CPsQ4xS95CmvwQ", "set": null, "tc": [false, null], "type_annot_cove": 0.0, "typed_seq": "", "untyped_seq": "", "variables": {}, "variables_p": {}}}