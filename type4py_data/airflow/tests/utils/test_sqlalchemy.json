{"error": null, "response": {"classes": [{"cls_lc": [[50, 0], [246, 33]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[51, 4], [59, 30]], "fn_var_ln": {"session": [[59, 8], [59, 20]]}, "fn_var_occur": {"session": [["session", "Session"], ["session", "bind", "dialect", "name"], ["session", "execute"], ["self", "session", "session"]]}, "name": "setup_method", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "session", "session"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSqlAlchemyUtils.setup_method", "ret_exprs": [], "ret_type": "", "variables": {"session": ""}, "variables_p": {"session": [["sqlalchemy.orm.session.Session", 0.3353976558193722], ["users.arxiv.users.domain.Session", 0.10786060179573626], ["requests.sessions.Session", 0.08374240052367209], ["Optional[str]", 0.08200843343356656], ["domain.Session", 0.06600964071833916], ["SMSShell.models.session.Session", 0.0622455705405036]]}}, {"docstring": {"func": "Test whether what we are storing is what we are retrieving", "long_descr": "for datetimes", "ret": null}, "fn_lc": [[61, 4], [94, 19]], "fn_var_ln": {"dag": [[71, 8], [71, 11]], "dag_id": [[66, 8], [66, 14]], "execution_date": [[69, 8], [69, 22]], "iso_date": [[68, 8], [68, 16]], "run": [[77, 8], [77, 11]], "start_date": [[67, 8], [67, 18]]}, "fn_var_occur": {"dag": [["dag", "DAG", "dag_id", "dag_id", "start_date", "start_date"], ["dag", "clear"], ["run", "dag", "create_dagrun", "run_id", "iso_date", "state", "State", "NONE", "execution_date", "execution_date", "start_date", "start_date", "session", "self", "session"], ["dag", "clear"]], "dag_id": [["dag", "DAG", "dag_id", "dag_id", "start_date", "start_date"]], "execution_date": [["execution_date", "start_date", "datetime", "timedelta", "hours", "days"], ["run", "dag", "create_dagrun", "run_id", "iso_date", "state", "State", "NONE", "execution_date", "execution_date", "start_date", "start_date", "session", "self", "session"], ["execution_date", "run", "execution_date"], ["execution_date", "utcoffset", "total_seconds"]], "iso_date": [["iso_date", "start_date", "isoformat"], ["run", "dag", "create_dagrun", "run_id", "iso_date", "state", "State", "NONE", "execution_date", "execution_date", "start_date", "start_date", "session", "self", "session"], ["iso_date", "run", "run_id"]], "run": [["run", "dag", "create_dagrun", "run_id", "iso_date", "state", "State", "NONE", "execution_date", "execution_date", "start_date", "start_date", "session", "self", "session"], ["execution_date", "run", "execution_date"], ["start_date", "run", "start_date"], ["iso_date", "run", "run_id"], ["run", "start_date", "isoformat", "run", "run_id"]], "start_date": [["start_date", "utcnow"], ["iso_date", "start_date", "isoformat"], ["execution_date", "start_date", "datetime", "timedelta", "hours", "days"], ["dag", "DAG", "dag_id", "dag_id", "start_date", "start_date"], ["run", "dag", "create_dagrun", "run_id", "iso_date", "state", "State", "NONE", "execution_date", "execution_date", "start_date", "start_date", "session", "self", "session"], ["start_date", "run", "start_date"], ["start_date", "utcoffset", "total_seconds"], ["run", "start_date", "isoformat", "run", "run_id"]]}, "name": "test_utc_transformations", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["run", "dag", "create_dagrun", "run_id", "iso_date", "state", "State", "NONE", "execution_date", "execution_date", "start_date", "start_date", "session", "self", "session"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSqlAlchemyUtils.test_utc_transformations", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "dag_id": "", "execution_date": "", "iso_date": "", "run": "", "start_date": ""}, "variables_p": {"dag": [["str", 0.3159719395128182], ["Dict[str, Any]", 0.19326696111803116], ["list", 0.12200605340797635], ["List[int]", 0.09596964031898275], ["float", 0.09001479018748579], ["dict", 0.08614633364703521]], "dag_id": [["str", 0.4160883680270817], ["int", 0.3405074691168967], ["List[None]", 0.07223115674898045], ["datetime.time", 0.05799967314950961], ["Optional[datetime.time]", 0.056586666478765736]], "execution_date": [["int", 0.30085907067997464], ["datetime.datetime", 0.18158460387813213], ["datetime.datetime.datetime", 0.1283487841792009], ["Type[prm.journals.models.moods.Mood]", 0.10989938241768742], ["datetime.date", 0.09427579605740169], ["str", 0.09079230193906607]], "iso_date": [["datetime.date", 0.29730320221132234], ["datetime.datetime", 0.25439250117391193], ["datetime.date.time.date", 0.22026098224113794], ["str", 0.12467628251857495], ["Type[leasing.models.vaVat]", 0.10336703185505255]], "run": [["int", 0.5848195728375555], ["datetime.timedelta", 0.11064119750722222], ["Pattern[str]", 0.10657589340740549], ["list", 0.10271667346892391], ["aw_core.models.Event", 0.09524666277889281]], "start_date": [["datetime.date", 0.21512595104255075], ["datetime.datetime", 0.19346154285400646], ["datetime.datetime.datetime", 0.1928032377557168], ["datetime.datetime.timedelta", 0.1911990559029841], ["str", 0.10605725150682381]]}}, {"docstring": {"func": "Check if naive datetimes are prevented from saving to the db", "long_descr": null, "ret": null}, "fn_lc": [[96, 4], [115, 19]], "fn_var_ln": {"dag": [[104, 8], [104, 11]], "dag_id": [[100, 8], [100, 14]], "start_date": [[103, 8], [103, 18]]}, "fn_var_occur": {"dag": [["dag", "DAG", "dag_id", "dag_id", "start_date", "start_date"], ["dag", "clear"], ["dag", "create_dagrun", "run_id", "start_date", "isoformat", "state", "State", "NONE", "execution_date", "start_date", "start_date", "start_date", "session", "self", "session"], ["dag", "clear"]], "dag_id": [["dag", "DAG", "dag_id", "dag_id", "start_date", "start_date"]], "start_date": [["start_date", "datetime", "datetime", "now"], ["dag", "DAG", "dag_id", "dag_id", "start_date", "start_date"], ["dag", "create_dagrun", "run_id", "start_date", "isoformat", "state", "State", "NONE", "execution_date", "start_date", "start_date", "start_date", "session", "self", "session"]]}, "name": "test_process_bind_param_naive", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["dag", "create_dagrun", "run_id", "start_date", "isoformat", "state", "State", "NONE", "execution_date", "start_date", "start_date", "start_date", "session", "self", "session"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSqlAlchemyUtils.test_process_bind_param_naive", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "dag_id": "", "start_date": ""}, "variables_p": {"dag": [["Dict[str, Any]", 0.15734506529737843], ["datetime.datetime", 0.11620397618041818], ["str", 0.11620397618041818], ["List[int]", 0.11618846288702421], ["dict", 0.09347184624579694], ["List[str]", 0.07593398482724224], ["List[Optional[str]]", 0.07593398482724224]], "dag_id": [["str", 0.4160883680270817], ["int", 0.3405074691168967], ["List[None]", 0.07223115674898045], ["datetime.time", 0.05799967314950961], ["Optional[datetime.time]", 0.056586666478765736]], "start_date": [["datetime.datetime", 0.7315063643433949], ["datetime.datetime.datetime", 0.18812410702434051], ["datetime.timedelta", 0.08036952863226467]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[142, 4], [146, 68]], "fn_var_ln": {"session": [[143, 8], [143, 15]]}, "fn_var_occur": {"session": [["session", "mock", "Mock"], ["session", "bind", "dialect", "name", "dialect"], ["session", "bind", "dialect", "supports_for_update_of", "supports_for_update_of"], ["skip_locked", "session", "session", "expected_return_value"]]}, "name": "test_skip_locked", "params": {"dialect": "", "expected_return_value": "", "self": "", "supports_for_update_of": ""}, "params_descr": {"dialect": "", "expected_return_value": "", "self": "", "supports_for_update_of": ""}, "params_occur": {"dialect": [["session", "bind", "dialect", "name", "dialect"], ["session", "bind", "dialect", "supports_for_update_of", "supports_for_update_of"]], "expected_return_value": [["skip_locked", "session", "session", "expected_return_value"]], "self": [], "supports_for_update_of": [["session", "bind", "dialect", "supports_for_update_of", "supports_for_update_of"]]}, "params_p": {"args": [], "dialect": [["type", 0.09368375732366886]], "expected_return_value": [["Optional[int]", 0.10164984879850571], ["app.models.farm.Farm", 0.09973163527947897], ["deeplearning.ml4pl.models.log_database.Database", 0.08916510617132574], ["int", 0.08687789004085271]], "kwargs": [], "self": [], "supports_for_update_of": [["str", 0.2318429285503868], ["Set[str]", 0.09528367864819999], ["raiden.utils.PaymentWithFeeAmount", 0.08609658578413966], ["Dict[str, Any]", 0.08555827709930391]]}, "q_name": "TestSqlAlchemyUtils.test_skip_locked", "ret_exprs": [], "ret_type": "", "variables": {"session": ""}, "variables_p": {"session": [["requests.Session", 0.13335753484552101], ["mock.Mock", 0.11993507176054038], ["mock.MagicMock", 0.08639124184527089], ["dict", 0.0850392995552166]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[175, 4], [179, 63]], "fn_var_ln": {"session": [[176, 8], [176, 15]]}, "fn_var_occur": {"session": [["session", "mock", "Mock"], ["session", "bind", "dialect", "name", "dialect"], ["session", "bind", "dialect", "supports_for_update_of", "supports_for_update_of"], ["nowait", "session", "session", "expected_return_value"]]}, "name": "test_nowait", "params": {"dialect": "", "expected_return_value": "", "self": "", "supports_for_update_of": ""}, "params_descr": {"dialect": "", "expected_return_value": "", "self": "", "supports_for_update_of": ""}, "params_occur": {"dialect": [["session", "bind", "dialect", "name", "dialect"], ["session", "bind", "dialect", "supports_for_update_of", "supports_for_update_of"]], "expected_return_value": [["nowait", "session", "session", "expected_return_value"]], "self": [], "supports_for_update_of": [["session", "bind", "dialect", "supports_for_update_of", "supports_for_update_of"]]}, "params_p": {"args": [], "dialect": [["type", 0.09368375732366886]], "expected_return_value": [["int", 0.10476930360355677], ["sqlalchemy.orm.Session", 0.10476930360355677], ["Optional[int]", 0.10046454304871508], ["app.models.farm.Farm", 0.09339385642154469], ["recidiviz.persistence.database.session.Session", 0.09056683583135629], ["tnadmin.models.GvOrganisation", 0.08971132483643979], ["List[fonduer.candidates.models.Candidate]", 0.08964734490015064]], "kwargs": [], "self": [], "supports_for_update_of": [["str", 0.2318429285503868], ["Set[str]", 0.09528367864819999], ["raiden.utils.PaymentWithFeeAmount", 0.08609658578413966], ["Dict[str, Any]", 0.08555827709930391]]}, "q_name": "TestSqlAlchemyUtils.test_nowait", "ret_exprs": [], "ret_type": "", "variables": {"session": ""}, "variables_p": {"session": [["requests.Session", 0.14072211461089532], ["mock.Mock", 0.12460330417889319]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[193, 4], [207, 53]], "fn_var_ln": {"query": [[196, 8], [196, 13]], "returned_value": [[201, 12], [201, 26]], "session": [[197, 8], [197, 15]]}, "fn_var_occur": {"query": [["query", "mock", "Mock"], ["returned_value", "with_row_locks", "query", "query", "session", "session", "nowait", "True"], ["query", "with_for_update", "assert_called_once_with", "nowait", "True"], ["returned_value", "query"], ["query", "with_for_update", "assert_not_called"]], "returned_value": [["returned_value", "with_row_locks", "query", "query", "session", "session", "nowait", "True"], ["returned_value", "query"]], "session": [["session", "mock", "Mock"], ["session", "bind", "dialect", "name", "dialect"], ["session", "bind", "dialect", "supports_for_update_of", "supports_for_update_of"], ["returned_value", "with_row_locks", "query", "query", "session", "session", "nowait", "True"]]}, "name": "test_with_row_locks", "params": {"dialect": "", "expected_use_row_level_lock": "", "self": "", "supports_for_update_of": "", "use_row_level_lock_conf": ""}, "params_descr": {"dialect": "", "expected_use_row_level_lock": "", "self": "", "supports_for_update_of": "", "use_row_level_lock_conf": ""}, "params_occur": {"dialect": [["session", "bind", "dialect", "name", "dialect"], ["session", "bind", "dialect", "supports_for_update_of", "supports_for_update_of"]], "expected_use_row_level_lock": [], "self": [], "supports_for_update_of": [["session", "bind", "dialect", "supports_for_update_of", "supports_for_update_of"]], "use_row_level_lock_conf": [["mock", "patch", "use_row_level_lock_conf"]]}, "params_p": {"args": [], "dialect": [["List[Dict]", 0.09872997603054655], ["List[str]", 0.09872997603054655]], "expected_use_row_level_lock": [["Callable", 0.37224649321467224], ["bool", 0.15895221907025298], ["Iterable[str]", 0.10614355678083348], ["List[Tuple[str, Any]]", 0.08470576804162372], ["Literal", 0.07697591009975344], ["Callable[[], None]", 0.07689388838797354]], "kwargs": [], "self": [], "supports_for_update_of": [["bool", 0.19952607542656797]], "use_row_level_lock_conf": [["bool", 0.424319568766388], ["Dict[str, Any]", 0.09541222835913438], ["tuple", 0.09541222835913438], ["raiden.utils.Callable", 0.0939909546885683]]}, "q_name": "TestSqlAlchemyUtils.test_with_row_locks", "ret_exprs": [], "ret_type": "", "variables": {"query": "", "returned_value": "", "session": ""}, "variables_p": {"query": [["unittesmock.MagicMock", 0.2996429611076621]], "returned_value": [["Optional[str]", 0.26701573869978457], ["Iterable[grpy.core.models.User]", 0.11309683504012112], ["dict", 0.10985653181085321], ["list", 0.09643839717776424], ["app.models.user.User", 0.09506240573511965]], "session": [["requests.Session", 0.13891734091253727], ["mock.Mock", 0.12301270012273353], ["dict", 0.09539847562545961]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[209, 4], [222, 37]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_prohibit_commit", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["prohibit_commit", "self", "session", "guard"], ["self", "session", "execute"], ["self", "session", "commit"], ["self", "session", "rollback"], ["self", "session", "execute"], ["self", "session", "execute"], ["self", "session", "commit"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSqlAlchemyUtils.test_prohibit_commit", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Test that \"prohibit_commit\" applies only to the given session object,", "long_descr": "not any other session objects that may be used", "ret": null}, "fn_lc": [[224, 4], [242, 34]], "fn_var_ln": {"other_session": [[232, 8], [232, 21]]}, "fn_var_occur": {"other_session": [["other_session", "Session", "session_factory"], ["other_session", "self", "session"], ["other_session", "execute"], ["other_session", "commit"]]}, "name": "test_prohibit_commit_specific_session_only", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["other_session", "self", "session"], ["prohibit_commit", "self", "session"], ["self", "session", "execute"], ["self", "session", "commit"], ["self", "session", "rollback"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSqlAlchemyUtils.test_prohibit_commit_specific_session_only", "ret_exprs": [], "ret_type": "", "variables": {"other_session": ""}, "variables_p": {"other_session": [["Dict[int, Any]", 0.4350864352651013], ["str", 0.1935954713073751], ["List[str]", 0.09517165277528286], ["Dict[object, Dict[str, Any]]", 0.0892485172159229]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[244, 4], [246, 33]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "teardown_method", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "session", "close"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSqlAlchemyUtils.teardown_method", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestSqlAlchemyUtils", "q_name": "TestSqlAlchemyUtils", "variables": {}, "variables_p": {}}, {"cls_lc": [[323, 8], [325, 45]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[324, 12], [325, 45]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "__eq__", "params": {"other": "", "self": ""}, "params_descr": {"other": "", "self": ""}, "params_occur": {"other": [], "self": []}, "params_p": {"args": [], "kwargs": [], "other": [["SupportsFloat", 0.09999999999999999], ["List[str]", 0.09999999999999999], ["Union[int, float]", 0.09999999999999999], ["AbstractSet[T]", 0.09999999999999999]], "self": []}, "q_name": "TestExecutorConfigType.test_compare_values.<locals>.MockAttrError.__eq__", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "MockAttrError", "q_name": "TestExecutorConfigType.test_compare_values.<locals>.MockAttrError", "variables": {}, "variables_p": {}}, {"cls_lc": [[249, 0], [377, 77]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": "The returned bind processor should pickle the object as is, unless it is a dictionary with", "long_descr": "a pod_override node, in which case it should run it through BaseSerialization.", "ret": null}, "fn_lc": [[265, 4], [275, 92]], "fn_var_ln": {"config_type": [[270, 8], [270, 19]], "dbapi": [[272, 8], [272, 26]], "mock_dialect": [[271, 8], [271, 20]], "process": [[273, 8], [273, 15]]}, "fn_var_occur": {"config_type": [["config_type", "ExecutorConfigType"], ["process", "config_type", "bind_processor", "mock_dialect"]], "dbapi": [["mock_dialect", "dbapi", "None"]], "mock_dialect": [["mock_dialect", "MagicMock"], ["mock_dialect", "dbapi", "None"], ["process", "config_type", "bind_processor", "mock_dialect"]], "process": [["process", "config_type", "bind_processor", "mock_dialect"], ["pickle", "loads", "process", "input", "expected"], ["pickle", "loads", "process", "input", "expected"]]}, "name": "test_bind_processor", "params": {"expected": "", "input": "", "self": ""}, "params_descr": {"expected": "", "input": "", "self": ""}, "params_occur": {"expected": [["pickle", "loads", "process", "input", "expected"], ["pickle", "loads", "process", "input", "expected"]], "input": [["pickle", "loads", "process", "input", "expected"], ["pickle", "loads", "process", "input", "expected"]], "self": []}, "params_p": {"args": [], "expected": [["str", 0.6755538668073012]], "input": [["str", 0.6755538668073012]], "kwargs": [], "self": []}, "q_name": "TestExecutorConfigType.test_bind_processor", "ret_exprs": [], "ret_type": "", "variables": {"config_type": "", "dbapi": "", "mock_dialect": "", "process": ""}, "variables_p": {"config_type": [["str", 0.28495576162989544], ["List[Dict[str, Any]]", 0.17189747162394622], ["Optional[str]", 0.1447281426158089], ["Dict[str, Dict[str, Any]]", 0.11054633438579577], ["Dict[str, Union[datetime.datetime, datetime.timedelta, int, str]]", 0.10178316722456873], ["List[str]", 0.09768397472197594]], "dbapi": [["str", 0.345519358554367]], "mock_dialect": [["unittesmock.MagicMock", 0.2609331553356099], ["Dict[str, Union[Any, Any]]", 0.1908179248613633], ["str", 0.16617920360716412], ["mock.mock.MagicMock", 0.08747494659004754], ["bytes", 0.08384130192837311]], "process": [["str", 0.30591580512047634], ["int", 0.18778320757261047], ["List[str]", 0.12804833445344097], ["bool", 0.10143337337339735], ["List[Tuple[int, str, str, str, int]]", 0.09306018900734833], ["dict", 0.09004552339212951]]}}, {"docstring": {"func": "The returned bind processor should pickle the object as is, unless it is a dictionary with", "long_descr": "a pod_override node whose value was serialized with BaseSerialization.", "ret": null}, "fn_lc": [[298, 4], [314, 33]], "fn_var_ln": {"config_type": [[303, 8], [303, 19]], "dbapi": [[305, 8], [305, 26]], "expected": [[308, 8], [308, 16]], "mock_dialect": [[304, 8], [304, 20]], "pod_override": [[309, 8], [309, 20]], "process": [[306, 8], [306, 15]], "result": [[307, 8], [307, 14]]}, "fn_var_occur": {"config_type": [["config_type", "ExecutorConfigType"], ["process", "config_type", "result_processor", "mock_dialect", "None"]], "dbapi": [["mock_dialect", "dbapi", "None"]], "expected": [["expected", "pickle", "loads", "input"], ["pod_override", "isinstance", "expected", "dict", "expected", "get"], ["expected", "BaseSerialization", "deserialize", "expected"], ["result", "expected"]], "mock_dialect": [["mock_dialect", "MagicMock"], ["mock_dialect", "dbapi", "None"], ["process", "config_type", "result_processor", "mock_dialect", "None"]], "pod_override": [["pod_override", "isinstance", "expected", "dict", "expected", "get"], ["pod_override", "isinstance", "pod_override", "dict", "pod_override", "get", "Encoding", "TYPE"]], "process": [["process", "config_type", "result_processor", "mock_dialect", "None"], ["result", "process", "input"]], "result": [["result", "process", "input"], ["result", "expected"]]}, "name": "test_result_processor", "params": {"input": "", "self": ""}, "params_descr": {"input": "", "self": ""}, "params_occur": {"input": [["result", "process", "input"], ["expected", "pickle", "loads", "input"]], "self": []}, "params_p": {"args": [], "input": [["Dict[str, Any]", 0.08178421038224333], ["Iterable[Any]", 0.08035473366972523]], "kwargs": [], "self": []}, "q_name": "TestExecutorConfigType.test_result_processor", "ret_exprs": [], "ret_type": "", "variables": {"config_type": "", "dbapi": "", "expected": "", "mock_dialect": "", "pod_override": "", "process": "", "result": ""}, "variables_p": {"config_type": [["int", 0.18765678749707626], ["Dict[str, str]", 0.10075074598977972], ["List[str]", 0.09728069386458386]], "dbapi": [["str", 0.345519358554367]], "expected": [["dict", 0.3038894178670082], ["Dict[Any, Dict[Any, Any]]", 0.18784463858769643], ["str", 0.1691612167543318], ["telegram.utils.AsyncResult", 0.16228689581911998], ["Dict[str, Dict[str, Any]]", 0.09071082510393394], ["Dict[str, None]", 0.08610700586790974]], "mock_dialect": [["str", 0.26079282253022923], ["unittesmock.MagicMock", 0.2043142009332838], ["mock._patch[Union[mock.AsyncMock, mock.MagicMock]]", 0.16175659715937488], ["datetime.datetime.datetime", 0.11628194026896355], ["mock.Mock", 0.08928011492506133], ["mock.mock.MagicMock", 0.0826818474086485]], "pod_override": [["Dict[Any, Tuple[str, str]]", 0.3704570202096883], ["Dict[str, Union[None, Any, bool, str]]", 0.23869113564650102], ["Dict[str, Union[Any, Any, Any]]", 0.19410476983350114], ["Dict[str, Any]", 0.10073990557362088], ["Type[\"ExtractableWordnet\"]", 0.09600716873668881]], "process": [["list", 0.307530764146598], ["Optional[str]", 0.11425906815962651], ["str", 0.1006412232038982], ["List[str]", 0.09838078726121782]], "result": [["str", 0.49999999998576294], ["list", 0.49999999997508854], ["Dict[int, List[str]]", 1.2808242792383486e-11], ["telegram.utils.AsyncResult", 8.563941173482633e-12]]}}, {"docstring": {"func": "When comparison raises AttributeError, return False.", "long_descr": "This can happen when executor config contains kubernetes objects pickled\nunder older kubernetes library version.", "ret": null}, "fn_lc": [[316, 4], [334, 56]], "fn_var_ln": {"a": [[327, 8], [327, 9]], "instance": [[332, 8], [332, 16]]}, "fn_var_occur": {"a": [["a", "MockAttrError"], ["a", "a"], ["instance", "compare_values", "a", "a", "False"]], "instance": [["instance", "ExecutorConfigType"], ["instance", "compare_values", "a", "a", "False"], ["instance", "compare_values", "True"]]}, "name": "test_compare_values", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestExecutorConfigType.test_compare_values", "ret_exprs": [], "ret_type": "", "variables": {"a": "", "instance": ""}, "variables_p": {"a": [["List[list]", 0.18424745920758906], ["bool", 0.18192393833823012], ["enums.Value", 0.11274529540510025], ["tuple", 0.09900145709021108]], "instance": [["str", 0.3137009982650133], ["datetime.timedelta", 0.2330635487312038], ["Optional[List[str]]", 0.09325430038328683], ["tracklater.models.Entry", 0.08381414341735093]]}}, {"docstring": {"func": "If unpickled obj is missing attrs that curr lib expects", "long_descr": null, "ret": null}, "fn_lc": [[336, 4], [377, 77]], "fn_var_ln": {"config_type": [[367, 8], [367, 19]], "copy_of_test_pod": [[342, 8], [342, 24]], "dbapi": [[369, 8], [369, 26]], "fixed_pod": [[355, 8], [355, 17]], "input": [[364, 8], [364, 13]], "mock_dialect": [[368, 8], [368, 20]], "process": [[370, 8], [370, 15]], "result": [[373, 8], [373, 14]], "test_container": [[340, 8], [340, 22]], "test_pod": [[341, 8], [341, 16]]}, "fn_var_occur": {"config_type": [["config_type", "ExecutorConfigType"], ["process", "config_type", "result_processor", "mock_dialect", "None"]], "copy_of_test_pod": [["copy_of_test_pod", "deepcopy", "test_pod"], ["copy_of_test_pod", "to_dict"], ["fixed_pod", "to_dict", "copy_of_test_pod", "to_dict"], ["result", "to_dict", "copy_of_test_pod", "to_dict"]], "dbapi": [["mock_dialect", "dbapi", "None"]], "fixed_pod": [["fixed_pod", "ensure_pod_is_valid_after_unpickling", "test_pod"], ["fixed_pod", "to_dict", "copy_of_test_pod", "to_dict"]], "input": [["input", "pickle", "dumps", "TEST_POD"], ["result", "process", "input"]], "mock_dialect": [["mock_dialect", "MagicMock"], ["mock_dialect", "dbapi", "None"], ["process", "config_type", "result_processor", "mock_dialect", "None"]], "process": [["process", "config_type", "result_processor", "mock_dialect", "None"], ["result", "process", "input"]], "result": [["result", "process", "input"], ["result", "to_dict", "copy_of_test_pod", "to_dict"]], "test_container": [["test_container", "k8s", "V1Container", "name"], ["test_pod", "k8s", "V1Pod", "spec", "k8s", "V1PodSpec", "containers", "test_container"], ["test_container", "openapi_types"], ["hasattr", "test_container"], ["test_container", "_tty"]], "test_pod": [["test_pod", "k8s", "V1Pod", "spec", "k8s", "V1PodSpec", "containers", "test_container"], ["copy_of_test_pod", "deepcopy", "test_pod"], ["test_pod", "to_dict"], ["fixed_pod", "ensure_pod_is_valid_after_unpickling", "test_pod"], ["test_pod", "to_dict"]]}, "name": "test_result_processor_bad_pickled_obj", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestExecutorConfigType.test_result_processor_bad_pickled_obj", "ret_exprs": [], "ret_type": "", "variables": {"config_type": "", "copy_of_test_pod": "", "dbapi": "", "fixed_pod": "", "input": "", "mock_dialect": "", "process": "", "result": "", "test_container": "", "test_pod": ""}, "variables_p": {"config_type": [["int", 0.18765678749707626], ["Dict[str, str]", 0.10075074598977972], ["List[str]", 0.09728069386458386]], "copy_of_test_pod": [["Dict[str, Literal]", 0.7993210031890453], ["Tuple[Literal, Dict[str, str]]", 0.11724039993336072], ["Dict[str, Dict[str, str]]", 0.08343859687759392]], "dbapi": [["str", 0.345519358554367]], "fixed_pod": [], "input": [["str", 0.6453817045049455], ["list", 0.10629249743569462], ["List[str]", 0.0834408285423005], ["Pattern[str]", 0.08144414097475909]], "mock_dialect": [["str", 0.26079282253022923], ["unittesmock.MagicMock", 0.2043142009332838], ["mock._patch[Union[mock.AsyncMock, mock.MagicMock]]", 0.16175659715937488], ["datetime.datetime.datetime", 0.11628194026896355], ["mock.Mock", 0.08928011492506133], ["mock.mock.MagicMock", 0.0826818474086485]], "process": [["list", 0.307530764146598], ["Optional[str]", 0.11425906815962651], ["str", 0.1006412232038982], ["List[str]", 0.09838078726121782]], "result": [["dict", 0.17958372622951463], ["OrderedDict", 0.15714440957587278], ["DefaultDict[Any, int]", 0.10637864129853643], ["Dict[str, str]", 0.10171324179753802], ["Dict[str, Any]", 0.10004572994893565], ["Dict[str, int]", 0.09519617120610345], ["Dict[int, List[Any]]", 0.08895986381374793], ["OrderedDict[Any, Dict[str, Any]]", 0.08663714330997174], ["Dict[str, Union[Any, Any, Any, Any, Any]]", 0.0843410728197793]], "test_container": [["str", 0.44327216116392376], ["Final", 0.1977912418098586], ["Type[Sequence[Any]]", 0.09535695501187655], ["Set[str]", 0.08788284211664876]], "test_pod": [["Dict[str, Union[int, str]]", 0.08467160113320653], ["pytch.utils.Position", 0.08048509944115684]]}}], "name": "TestExecutorConfigType", "q_name": "TestExecutorConfigType", "variables": {}, "variables_p": {}}], "funcs": [], "imports": ["__future__", "annotations", "datetime", "pickle", "copy", "deepcopy", "unittest", "mock", "unittest", "mock", "MagicMock", "pytest", "kubernetes", "client", "models", "k8s", "pytest", "param", "sqlalchemy", "exc", "StatementError", "airflow", "settings", "airflow", "models", "DAG", "airflow", "serialization", "enums", "DagAttributeTypes", "Encoding", "airflow", "serialization", "serialized_objects", "BaseSerialization", "airflow", "settings", "Session", "airflow", "utils", "sqlalchemy", "ExecutorConfigType", "ensure_pod_is_valid_after_unpickling", "nowait", "prohibit_commit", "skip_locked", "with_row_locks", "airflow", "utils", "state", "State", "airflow", "utils", "timezone", "utcnow"], "mod_var_ln": {"TEST_POD": [[47, 0], [47, 8]]}, "mod_var_occur": {"TEST_POD": [["input", "pickle", "dumps", "TEST_POD"]]}, "no_types_annot": {"D": 0, "I": 0, "U": 68}, "session_id": "KcKuyvSeF1iMCTXsaJU0xQC-00pAWlEn9U_PSBdxPyc", "set": null, "tc": [false, null], "type_annot_cove": 0.0, "typed_seq": "", "untyped_seq": "", "variables": {"TEST_POD": ""}, "variables_p": {"TEST_POD": [["str", 0.9999999999999999]]}}}