{"error": null, "response": {"classes": [{"cls_lc": [[65, 0], [500, 44]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[67, 4], [68, 44]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "clear_airflow_tables", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDBCleanup.clear_airflow_tables", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "test that delete confirmation input is called when appropriate", "long_descr": null, "ret": null}, "fn_lc": [[80, 4], [92, 51]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_run_cleanup_confirm", "params": {"called": "", "confirm_delete_mock": "", "kwargs": "", "self": ""}, "params_descr": {"called": "", "confirm_delete_mock": "", "kwargs": "", "self": ""}, "params_occur": {"called": [], "confirm_delete_mock": [["confirm_delete_mock", "assert_called"], ["confirm_delete_mock", "assert_not_called"]], "kwargs": [["run_cleanup", "clean_before_timestamp", "None", "table_names", "None", "dry_run", "None", "verbose", "None", "kwargs"]], "self": []}, "params_p": {"args": [], "called": [], "confirm_delete_mock": [["unittesmock.MagicMock", 1.0]], "kwargs": [], "self": []}, "q_name": "TestDBCleanup.test_run_cleanup_confirm", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "test that delete confirmation input is called when appropriate", "long_descr": null, "ret": null}, "fn_lc": [[103, 4], [113, 81]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_run_cleanup_skip_archive", "params": {"cleanup_table_mock": "", "kwargs": "", "self": "", "should_skip": ""}, "params_descr": {"cleanup_table_mock": "", "kwargs": "", "self": "", "should_skip": ""}, "params_occur": {"cleanup_table_mock": [["cleanup_table_mock", "call_args", "kwargs", "should_skip"]], "kwargs": [["run_cleanup", "clean_before_timestamp", "None", "table_names", "dry_run", "None", "verbose", "None", "confirm", "False", "kwargs"], ["cleanup_table_mock", "call_args", "kwargs", "should_skip"]], "self": [], "should_skip": [["cleanup_table_mock", "call_args", "kwargs", "should_skip"]]}, "params_p": {"args": [], "cleanup_table_mock": [["unittesmock.MagicMock", 0.3799018647730145]], "kwargs": [], "self": [], "should_skip": [["unittesmock.MagicMock", 0.3799018647730145]]}, "q_name": "TestDBCleanup.test_run_cleanup_skip_archive", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "``_cleanup_table`` should be called for each table in subset if one", "long_descr": "is provided else should be called for all tables.", "ret": null}, "fn_lc": [[124, 4], [135, 99]], "fn_var_ln": {"base_kwargs": [[129, 8], [129, 19]]}, "fn_var_occur": {"base_kwargs": [["base_kwargs", "dict", "clean_before_timestamp", "None", "dry_run", "None", "verbose", "None"], ["run_cleanup", "base_kwargs", "table_names", "table_names"]]}, "name": "test_run_cleanup_tables", "params": {"clean_table_mock": "", "self": "", "table_names": ""}, "params_descr": {"clean_table_mock": "", "self": "", "table_names": ""}, "params_occur": {"clean_table_mock": [["clean_table_mock", "call_count", "len", "table_names", "table_names", "len", "config_dict"]], "self": [], "table_names": [["run_cleanup", "base_kwargs", "table_names", "table_names"], ["clean_table_mock", "call_count", "len", "table_names", "table_names", "len", "config_dict"]]}, "params_p": {"args": [], "clean_table_mock": [["unittesmock.MagicMock", 0.16381650882234888], ["bool", 0.09307068805628109], ["kata.data.io.network.GithubApi", 0.09280954167537227], ["Dict[str, Sequence[Any]]", 0.09026801978072452]], "kwargs": [], "self": [], "table_names": [["app.models.dto.ClientInfo", 0.09874900218158365], ["tracim.models.data.Workspace", 0.09862775684858789], ["Dict[str, Any]", 0.0886179134203904]]}, "q_name": "TestDBCleanup.test_run_cleanup_tables", "ret_exprs": [], "ret_type": "", "variables": {"base_kwargs": ""}, "variables_p": {"base_kwargs": [["str", 0.5056191374395265], ["dict", 0.3989220578505145], ["Dict[str, Any]", 0.09545880470995893]]}}, {"docstring": {"func": "If only invalid tables are provided, don't try cleaning anything", "long_descr": null, "ret": null}, "fn_lc": [[139, 4], [149, 47]], "fn_var_ln": {"base_kwargs": [[141, 8], [141, 19]]}, "fn_var_occur": {"base_kwargs": [["base_kwargs", "dict", "clean_before_timestamp", "None", "dry_run", "None", "verbose", "None"], ["run_cleanup", "base_kwargs", "table_names"]]}, "name": "test_validate_tables_all_invalid", "params": {"clean_table_mock": "", "confirm_delete_mock": "", "self": ""}, "params_descr": {"clean_table_mock": "", "confirm_delete_mock": "", "self": ""}, "params_occur": {"clean_table_mock": [], "confirm_delete_mock": [["confirm_delete_mock", "assert_not_called"]], "self": []}, "params_p": {"args": [], "clean_table_mock": [["unittesmock.MagicMock", 0.36565449577504794], ["pathlib.Path", 0.10678686022026466]], "confirm_delete_mock": [["unittesmock.MagicMock", 0.14617540595191678]], "kwargs": [], "self": []}, "q_name": "TestDBCleanup.test_validate_tables_all_invalid", "ret_exprs": [], "ret_type": "", "variables": {"base_kwargs": ""}, "variables_p": {"base_kwargs": [["dict", 0.3947239995901814], ["str", 0.3144176662432364], ["frozenset[str]", 0.09952538763558308], ["Dict[str, Any]", 0.0976458912512845]]}}, {"docstring": {"func": "Delete should only be called when not dry_run", "long_descr": null, "ret": null}, "fn_lc": [[159, 4], [174, 37]], "fn_var_ln": {"base_kwargs": [[162, 8], [162, 19]], "return_value": [[161, 8], [161, 36]]}, "fn_var_occur": {"base_kwargs": [["base_kwargs", "dict", "table_names", "clean_before_timestamp", "None", "dry_run", "dry_run", "verbose", "None"], ["run_cleanup", "base_kwargs"]], "return_value": [["check_rows_mock", "return_value"]]}, "name": "test_run_cleanup_dry_run", "params": {"check_rows_mock": "", "do_delete": "", "dry_run": "", "self": ""}, "params_descr": {"check_rows_mock": "", "do_delete": "", "dry_run": "", "self": ""}, "params_occur": {"check_rows_mock": [["check_rows_mock", "return_value"]], "do_delete": [["do_delete", "assert_not_called"], ["do_delete", "assert_called"]], "dry_run": [["base_kwargs", "dict", "table_names", "clean_before_timestamp", "None", "dry_run", "dry_run", "verbose", "None"]], "self": []}, "params_p": {"args": [], "check_rows_mock": [["str", 0.20937757299446957], ["tests.async_mock.MagicMock", 0.19007984170247777], ["List[str]", 0.09980924266394389], ["tests.test_util.aiohttp.AiohttpClientMocker", 0.07928047014028027]], "do_delete": [["mock.MagicMock", 0.32685760830037774], ["unittesmock.MagicMock", 0.11810356371715146], ["mock.Mock", 0.11085540094661059]], "dry_run": [["str", 0.2170951969499138], ["dict", 0.12706700404186763], ["List['PydanticModelField']", 0.09421833517730865]], "kwargs": [], "self": []}, "q_name": "TestDBCleanup.test_run_cleanup_dry_run", "ret_exprs": [], "ret_type": "", "variables": {"base_kwargs": "", "return_value": ""}, "variables_p": {"base_kwargs": [["str", 0.3891558279014488], ["Type[bytes]", 0.2503446617644123], ["frozenset[str]", 0.09012877583487414]], "return_value": [["str", 0.19466837479404236], ["unittesmock.MagicMock", 0.18153296467863872], ["Dict[Any, Union[int, str]]", 0.11098554020967825], ["bool", 0.10135403022594656], ["Dict[str, Any]", 0.10067692725907666], ["list", 0.09581605430853037], ["Dict[str, Union[int, str]]", 0.08608804158750012]]}}, {"docstring": {"func": "Verify that ``_build_query`` produces a query that would delete the right", "long_descr": "task instance records depending on the value of ``clean_before_timestamp``.\n\nDagRun is a special case where we always keep the last dag run even if\nthe ``clean_before_timestamp`` is in the future, except for\nexternally-triggered dag runs. That is, only the last non-externally-triggered\ndag run is kept.", "ret": null}, "fn_lc": [[187, 4], [216, 51]], "fn_var_ln": {"base_date": [[198, 8], [198, 17]], "clean_before_date": [[206, 12], [206, 29]], "query": [[207, 12], [207, 17]], "res": [[214, 12], [214, 15]], "stmt": [[212, 12], [212, 16]], "target_table_name": [[204, 8], [204, 25]]}, "fn_var_occur": {"base_date": [["base_date", "pendulum", "DateTime", "tzinfo", "pendulum", "timezone"], ["create_tis", "base_date", "base_date", "num_tis", "external_trigger", "external_trigger"], ["clean_before_date", "base_date", "add", "date_add_kwargs"]], "clean_before_date": [["clean_before_date", "base_date", "add", "date_add_kwargs"], ["query", "_build_query", "config_dict", "table_name", "__dict__", "clean_before_timestamp", "clean_before_date", "session", "session"]], "query": [["query", "_build_query", "config_dict", "table_name", "__dict__", "clean_before_timestamp", "clean_before_date", "session", "session"], ["stmt", "CreateTableAs", "target_table_name", "query", "selectable"]], "res": [["res", "session", "execute", "target_table_name"]], "stmt": [["stmt", "CreateTableAs", "target_table_name", "query", "selectable"], ["session", "execute", "stmt"]], "target_table_name": [["stmt", "CreateTableAs", "target_table_name", "query", "selectable"], ["res", "session", "execute", "target_table_name"]]}, "name": "test__build_query", "params": {"date_add_kwargs": "", "expected_to_delete": "", "external_trigger": "", "self": "", "table_name": ""}, "params_descr": {"date_add_kwargs": "", "expected_to_delete": "", "external_trigger": "", "self": "", "table_name": ""}, "params_occur": {"date_add_kwargs": [["clean_before_date", "base_date", "add", "date_add_kwargs"]], "expected_to_delete": [["row", "expected_to_delete"]], "external_trigger": [["create_tis", "base_date", "base_date", "num_tis", "external_trigger", "external_trigger"]], "self": [], "table_name": [["query", "_build_query", "config_dict", "table_name", "__dict__", "clean_before_timestamp", "clean_before_date", "session", "session"]]}, "params_p": {"args": [], "date_add_kwargs": [["str", 0.5062432717850677], ["Tuple[str, str]", 0.10736665866057424], ["List[List[Any]]", 0.09946583398673114], ["int", 0.09741098053740212], ["datetime.datetime", 0.0948713520073749], ["Optional[str]", 0.09464190302285008]], "expected_to_delete": [["str", 0.6031505685575389], ["bool", 0.1986103612433367], ["int", 0.10500690795594587], ["bytes", 0.0932321622431786]], "external_trigger": [["str", 0.6734347400966264], ["datetime.datetime", 0.16057920272070356], ["bool", 0.0856944349249805], ["int", 0.08029162225768947]], "kwargs": [], "self": [], "table_name": [["str", 0.7262729697553527], ["Optional[str]", 0.0957844701849655], ["zerver.models.UserProfile", 0.08897128002984094], ["zerver.models.Message", 0.08897128002984094]]}, "q_name": "TestDBCleanup.test__build_query", "ret_exprs": [], "ret_type": "", "variables": {"base_date": "", "clean_before_date": "", "query": "", "res": "", "stmt": "", "target_table_name": ""}, "variables_p": {"base_date": [["datetime.datetime.date", 0.20990827970737908], ["datetime.date", 0.18087034223749518], ["datetime.datetime", 0.11659352696126543], ["Pattern[str]", 0.09789708217280328], ["pendulum.DateTime", 0.09163689722054698], ["datetime.date.time.date", 0.08542515776375958]], "clean_before_date": [["str", 0.45869663015104295], ["datetime.date", 0.2550467240096138], ["Pattern[str]", 0.10100940469230492], ["datetime.datetime", 0.09885644538186104], ["list", 0.08639079576517729]], "query": [["str", 0.3460014612530611], ["List[Union[Any, Any, Any, Any]]", 0.19956317261064555], ["List[Union[Any, Any, Any]]", 0.10086410686501608], ["Dict[str, Any]", 0.08848527517954372], ["stiff.models.Tagging", 0.08555258209543216]], "res": [["str", 0.3210838082575298], ["List[Tuple[str, str]]", 0.282316167888359], ["Pattern[str]", 0.22038372047950494], ["Optional[str]", 0.17621630337460642]], "stmt": [["str", 0.36102648882963073], ["list", 0.191290089151885], ["List[dict]", 0.13111882754891854], ["Optional[excars.models.profiles.Profile]", 0.11125106859864828], ["Dict[str, Union[datetime.datetime, str]]", 0.08274694897819489]], "target_table_name": [["str", 0.9999999999999999]]}}, {"docstring": {"func": "Verify that _cleanup_table actually deletes the rows it should.", "long_descr": "TaskInstance represents the \"normal\" case.  DagRun is the odd case where we want\nto keep the last non-externally-triggered DagRun record even if if it should be\ndeleted according to the provided timestamp.\n\nWe also verify that the \"on delete cascade\" behavior is as expected.  Some tables\nhave foreign keys defined so for example if we delete a dag run, all its associated\ntask instances should be purged as well.  But if we delete task instances the\nassociated dag runs should remain.", "ret": null}, "fn_lc": [[229, 4], [267, 45]], "fn_var_ln": {"base_date": [[243, 8], [243, 17]], "clean_before_date": [[251, 12], [251, 29]], "expected_remaining": [[260, 12], [260, 30]], "model": [[259, 12], [259, 17]], "num_tis": [[244, 8], [244, 15]]}, "fn_var_occur": {"base_date": [["base_date", "pendulum", "DateTime", "tzinfo", "pendulum", "timezone"], ["create_tis", "base_date", "base_date", "num_tis", "num_tis", "external_trigger", "external_trigger"], ["clean_before_date", "base_date", "add", "date_add_kwargs"]], "clean_before_date": [["clean_before_date", "base_date", "add", "date_add_kwargs"], ["_cleanup_table", "config_dict", "table_name", "__dict__", "clean_before_timestamp", "clean_before_date", "dry_run", "False", "session", "session", "table_names"]], "expected_remaining": [["expected_remaining", "num_tis", "expected_to_delete"], ["len", "session", "query", "model", "all", "expected_remaining"], ["len", "session", "query", "TaskInstance", "all", "expected_remaining"]], "model": [["model", "config_dict", "table_name", "orm_model"], ["len", "session", "query", "model", "all", "expected_remaining"], ["model", "name"], ["model", "name"]], "num_tis": [["create_tis", "base_date", "base_date", "num_tis", "num_tis", "external_trigger", "external_trigger"], ["expected_remaining", "num_tis", "expected_to_delete"], ["len", "session", "query", "DagRun", "all", "num_tis"]]}, "name": "test__cleanup_table", "params": {"date_add_kwargs": "", "expected_to_delete": "", "external_trigger": "", "self": "", "table_name": ""}, "params_descr": {"date_add_kwargs": "", "expected_to_delete": "", "external_trigger": "", "self": "", "table_name": ""}, "params_occur": {"date_add_kwargs": [["clean_before_date", "base_date", "add", "date_add_kwargs"]], "expected_to_delete": [["expected_remaining", "num_tis", "expected_to_delete"]], "external_trigger": [["create_tis", "base_date", "base_date", "num_tis", "num_tis", "external_trigger", "external_trigger"]], "self": [], "table_name": [["_cleanup_table", "config_dict", "table_name", "__dict__", "clean_before_timestamp", "clean_before_date", "dry_run", "False", "session", "session", "table_names"], ["model", "config_dict", "table_name", "orm_model"]]}, "params_p": {"args": [], "date_add_kwargs": [["str", 0.40062264163139377], ["datetime.date", 0.20404329746498576], ["Optional[str]", 0.1933065966702242], ["List[List[Any]]", 0.10445348692904466], ["datetime.datetime", 0.09757397730435158]], "expected_to_delete": [["int", 1.0]], "external_trigger": [["str", 0.3084984198772769], ["Optional[str]", 0.21251181352605264], ["int", 0.21168882320040633], ["datetime.datetime", 0.18235823889467562]], "kwargs": [], "self": [], "table_name": [["str", 0.9060302149515751], ["models.KippoProject", 0.09396978504842483]]}, "q_name": "TestDBCleanup.test__cleanup_table", "ret_exprs": [], "ret_type": "", "variables": {"base_date": "", "clean_before_date": "", "expected_remaining": "", "model": "", "num_tis": ""}, "variables_p": {"base_date": [["datetime.datetime", 0.288849397533292], ["datetime.date", 0.21525466097947862], ["Pattern[str]", 0.11710674190753119], ["datetime.datetime.date", 0.10651846589187623], ["datetime.datetime.datetime", 0.09518096863975371], ["datetime.date.time.date", 0.08895753114986517], ["pendulum.DateTime", 0.08813223389820316]], "clean_before_date": [["str", 0.5964718213529656], ["datetime.date", 0.15033085111335787], ["Pattern[str]", 0.09076921623141228], ["datetime.datetime.date", 0.07056033219720025]], "expected_remaining": [["list", 0.7984705228314573], ["int", 0.10267633240820062]], "model": [["list", 0.25452109948001117], ["dict", 0.2379818430459008], ["Dict[str, str]", 0.11977942666450567], ["T", 0.10564070609046601], ["Dict[str, Any]", 0.0746035209545144], ["Dict[str, Dict[str, str]]", 0.07149999690084828], ["Dict[str, Union[Any, Any, Any, Any, Any]]", 0.07034833695570641], ["Tuple[str]", 0.06562506990804721]], "num_tis": [["int", 0.4996545473155332], ["List[Union[Any, Any]]", 0.11322430586681877], ["Tuple[int, int, int]", 0.09977159202110389]]}}, {"docstring": {"func": "1. Verify that for all tables in `airflow.models`, we either have them enabled in db cleanup,", "long_descr": "or documented in the exclusion list in this test.\n2. Verify that no table is enabled for db cleanup and also in exclusion list.", "ret": null}, "fn_lc": [[269, 4], [320, 53]], "fn_var_ln": {"all_models": [[283, 8], [283, 18]], "exclusion_list": [[291, 8], [291, 22]], "mod": [[285, 12], [285, 15]], "mods": [[278, 8], [278, 12]], "proj_root": [[277, 8], [277, 17]]}, "fn_var_occur": {"all_models": [["all_models", "update", "class_", "__tablename__", "class_"], ["print", "set", "all_models"], ["set", "all_models", "exclusion_list", "union", "config_dict", "set"]], "exclusion_list": [["print", "exclusion_list", "union", "config_dict"], ["set", "all_models", "exclusion_list", "union", "config_dict", "set"], ["exclusion_list", "isdisjoint", "config_dict"]], "mod": [["mod", "import_module", "mod_name"], ["mod", "__dict__", "items"]], "mods": [["mods", "list", "name", "_", "name", "_", "pkgutil", "iter_modules", "str", "proj_root"]], "proj_root": [["proj_root", "Path", "__file__", "parents", "resolve"], ["mods", "list", "name", "_", "name", "_", "pkgutil", "iter_modules", "str", "proj_root"]]}, "name": "test_no_models_missing", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDBCleanup.test_no_models_missing", "ret_exprs": [], "ret_type": "", "variables": {"all_models": "", "exclusion_list": "", "mod": "", "mods": "", "proj_root": ""}, "variables_p": {"all_models": [["pynamodb.pagination.ResultIterator[tests.test_model.UserModel]", 0.4771777278168659], ["List[Tuple[Any, Any]]", 0.2200094511464736], ["List[str]", 0.10586846973896047], ["Dict[str, Union[None, Any, Any, str]]", 0.10181512523457496], ["dict", 0.09512922606312511]], "exclusion_list": [["list", 0.6927529498374819], ["Tuple[Literal, Literal, Literal, Literal, Literal]", 0.10870590374511271], ["List[Pattern[str]]", 0.10192407981675156]], "mod": [["Dict[Any, str]", 0.6423406410450399], ["Dict[Any, int]", 0.0902783237739143], ["Dict[str, float]", 0.08957680883056726], ["str", 0.08957680883056726], ["BinaryIO", 0.08822741751991132]], "mods": [["Type[str]", 0.20613156121656429], ["dict", 0.1985040365051304], ["str", 0.14483719434936276], ["Dict[str, str]", 0.09217101308967908], ["List[Optional[bool]]", 0.0901509059655055], ["int", 0.09012550268959912], ["List[str]", 0.08648392984400603]], "proj_root": [["pathlib.Path", 0.4095646426632059], ["norfs.fs.base.Path", 0.10292588225928614], ["str", 0.09170558687796741]]}}, {"docstring": {"func": "Ensure every table we have configured (and that is present in the db) can be cleaned successfully.", "long_descr": "For example, this checks that the recency column is actually a column.", "ret": null}, "fn_lc": [[322, 4], [334, 80]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_no_failure_warnings", "params": {"caplog": "", "self": ""}, "params_descr": {"caplog": "", "self": ""}, "params_occur": {"caplog": [["caplog", "text"], ["caplog", "clear"], ["caplog", "text"]], "self": []}, "params_p": {"args": [], "caplog": [], "kwargs": [], "self": []}, "q_name": "TestDBCleanup.test_no_failure_warnings", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "test that drop confirmation input is called when appropriate", "long_descr": null, "ret": null}, "fn_lc": [[343, 4], [355, 49]], "fn_var_ln": {"inspector": [[347, 8], [347, 17]]}, "fn_var_occur": {"inspector": [["inspector", "inspect_mock", "return_value"], ["inspector", "get_table_names", "return_value", "ARCHIVE_TABLE_PREFIX"]]}, "name": "test_confirm_drop_called_when_drop_archives_is_true_and_archive_exists", "params": {"_dump_table_to_file_mock": "", "confirm_drop_mock": "", "drop_archive": "", "inspect_mock": "", "self": ""}, "params_descr": {"_dump_table_to_file_mock": "", "confirm_drop_mock": "", "drop_archive": "", "inspect_mock": "", "self": ""}, "params_occur": {"_dump_table_to_file_mock": [], "confirm_drop_mock": [["confirm_drop_mock", "assert_called"], ["confirm_drop_mock", "assert_not_called"]], "drop_archive": [["export_archived_records", "export_format", "output_path", "drop_archives", "drop_archive", "session", "MagicMock"]], "inspect_mock": [["inspector", "inspect_mock", "return_value"]], "self": []}, "params_p": {"_dump_table_to_file_mock": [["unittesmock.MagicMock", 0.5098019516114456], ["pathlib.Path", 0.19761729994475802], ["mock.Mock", 0.18359415118085548]], "args": [], "confirm_drop_mock": [["unittesmock.MagicMock", 0.9133937169416857]], "drop_archive": [["unittesmock.MagicMock", 0.29509961897345066], ["mock.Mock", 0.10791337373235968]], "inspect_mock": [["unittesmock.MagicMock", 0.8003342082790772], ["mock.Mock", 0.10659036368802179]], "kwargs": [], "self": []}, "q_name": "TestDBCleanup.test_confirm_drop_called_when_drop_archives_is_true_and_archive_exists", "ret_exprs": [], "ret_type": "", "variables": {"inspector": ""}, "variables_p": {"inspector": [["str", 0.5283498959130121], ["Dict[str, Union[Any, Any, Any]]", 0.12881061334399652], ["List[Dict[str, str]]", 0.11127495266133271], ["property", 0.07245676041859776]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[366, 4], [387, 33]], "fn_var_ln": {"expected": [[372, 12], [372, 20]], "output": [[385, 12], [385, 18]], "return_value": [[380, 8], [380, 35]]}, "fn_var_occur": {"expected": [["expected", "tables"], ["expected", "len", "tables", "tables"], ["output", "expected"]], "output": [["output", "fake_out", "getvalue", "strip"], ["output", "expected"]], "return_value": [["mock_ask_yesno", "return_value", "True"]]}, "name": "test_confirm_drop_archives", "params": {"mock_ask_yesno": "", "self": "", "tables": ""}, "params_descr": {"mock_ask_yesno": "", "self": "", "tables": ""}, "params_occur": {"mock_ask_yesno": [["mock_ask_yesno", "return_value", "True"]], "self": [], "tables": [["expected", "tables"], ["len", "tables"], ["expected", "len", "tables", "tables"], ["_confirm_drop_archives", "tables", "tables"]]}, "params_p": {"args": [], "kwargs": [], "mock_ask_yesno": [["unittesmock.MagicMock", 0.4154096826752654], ["mock.MagicMock", 0.09619393774198166]], "self": [], "tables": [["float", 0.09316568481436535], ["pathlib.Path", 0.08439190161802987]]}, "q_name": "TestDBCleanup.test_confirm_drop_archives", "ret_exprs": [], "ret_type": "", "variables": {"expected": "", "output": "", "return_value": ""}, "variables_p": {"expected": [["str", 0.383474803276611], ["List[str]", 0.12960811244844062], ["Dict[str, Any]", 0.10961960450727257], ["Dict[str, Union[Any, Any]]", 0.10109326516573205], ["list", 0.09981542534003976], ["List[Dict[str, Any]]", 0.08865476428439249], ["List[int]", 0.08773402497751158]], "output": [["str", 0.7779149769401947], ["List[str]", 0.13404340876878926], ["Dict[str, bool]", 0.08804161429101608]], "return_value": [["list", 0.16029958167037964], ["List[str]", 0.14553720445254295], ["Optional[bytes]", 0.12694362101953677], ["str", 0.11176311340731358], ["Tuple[int, int]", 0.09377314312562458], ["int", 0.07926586939411204], ["Dict[str, Dict[str, Any]]", 0.06948960229955532]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[389, 4], [395, 64]], "fn_var_ln": {"tables": [[390, 8], [390, 14]]}, "fn_var_occur": {"tables": [["_confirm_drop_archives", "tables", "tables"]]}, "name": "test_user_did_not_confirm", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDBCleanup.test_user_did_not_confirm", "ret_exprs": [], "ret_type": "", "variables": {"tables": ""}, "variables_p": {"tables": [["dict", 0.3], ["list", 0.3], ["str", 0.09999999999999999], ["List[Union[Any, Any, Any, Any, Any, Any, Any, Any, Any]]", 0.09999999999999999], ["List[Type[Any]]", 0.09999999999999999]]}}, {"docstring": {"func": "Test export_archived_records and show that only tables with the archive prefix are exported.", "long_descr": null, "ret": null}, "fn_lc": [[401, 4], [422, 85]], "fn_var_ln": {"inspector": [[406, 8], [406, 17]], "session_mock": [[405, 8], [405, 20]]}, "fn_var_occur": {"inspector": [["inspector", "inspect_mock", "return_value"], ["inspector", "get_table_names", "return_value", "ARCHIVE_TABLE_PREFIX"]], "session_mock": [["session_mock", "MagicMock"], ["export_archived_records", "export_format", "output_path", "drop_archives", "drop_archive", "session", "session_mock"], ["dump_mock", "assert_called_once_with", "target_table", "ARCHIVE_TABLE_PREFIX", "file_path", "ARCHIVE_TABLE_PREFIX", "export_format", "session", "session_mock"]]}, "name": "test_export_archived_records_only_archived_tables", "params": {"caplog": "", "drop_archive": "", "dump_mock": "", "inspect_mock": "", "mock_input": "", "self": ""}, "params_descr": {"caplog": "", "drop_archive": "", "dump_mock": "", "inspect_mock": "", "mock_input": "", "self": ""}, "params_occur": {"caplog": [["ARCHIVE_TABLE_PREFIX", "caplog", "text"], ["caplog", "text"], ["caplog", "text"]], "drop_archive": [["export_archived_records", "export_format", "output_path", "drop_archives", "drop_archive", "session", "session_mock"]], "dump_mock": [["dump_mock", "assert_called_once_with", "target_table", "ARCHIVE_TABLE_PREFIX", "file_path", "ARCHIVE_TABLE_PREFIX", "export_format", "session", "session_mock"]], "inspect_mock": [["inspector", "inspect_mock", "return_value"]], "mock_input": [], "self": []}, "params_p": {"args": [], "caplog": [], "drop_archive": [["tests.e2e.Helper", 0.4684391333182521], ["unittesmock.MagicMock", 0.11584093523642676]], "dump_mock": [["unittesmock.MagicMock", 0.9063165566524927]], "inspect_mock": [["unittesmock.MagicMock", 0.29812525974517373]], "kwargs": [], "mock_input": [["unittesmock.MagicMock", 0.48976795204811097], ["mock.Mock", 0.18232587566608977], ["mock.MagicMock", 0.14275179664029938]], "self": []}, "q_name": "TestDBCleanup.test_export_archived_records_only_archived_tables", "ret_exprs": [], "ret_type": "", "variables": {"inspector": "", "session_mock": ""}, "variables_p": {"inspector": [["str", 0.5283498959130121], ["Dict[str, Union[Any, Any, Any]]", 0.12881061334399652], ["List[Dict[str, str]]", 0.11127495266133271], ["property", 0.07245676041859776]], "session_mock": [["unittesmock.MagicMock", 0.8288496204827918]]}}, {"docstring": {"func": "Test no confirmation if no archived tables found", "long_descr": null, "ret": null}, "fn_lc": [[429, 4], [442, 81]], "fn_var_ln": {"inspector": [[434, 8], [434, 17]], "session_mock": [[433, 8], [433, 20]]}, "fn_var_occur": {"inspector": [["inspector", "inspect_mock", "return_value"], ["inspector", "get_table_names", "return_value"]], "session_mock": [["session_mock", "MagicMock"], ["export_archived_records", "export_format", "output_path", "drop_archives", "drop_archive", "session", "session_mock"]]}, "name": "test_export_archived_no_confirm_if_no_tables", "params": {"caplog": "", "drop_archive": "", "dump_mock": "", "inspect_mock": "", "mock_confirm": "", "mock_input": "", "self": ""}, "params_descr": {"caplog": "", "drop_archive": "", "dump_mock": "", "inspect_mock": "", "mock_confirm": "", "mock_input": "", "self": ""}, "params_occur": {"caplog": [["caplog", "text"]], "drop_archive": [["export_archived_records", "export_format", "output_path", "drop_archives", "drop_archive", "session", "session_mock"]], "dump_mock": [["dump_mock", "assert_not_called"]], "inspect_mock": [["inspector", "inspect_mock", "return_value"]], "mock_confirm": [["mock_confirm", "assert_not_called"]], "mock_input": [], "self": []}, "params_p": {"args": [], "caplog": [["tests.test_util.aiohttp.AiohttpClientMocker", 0.44860866405344746], ["unittesmock.MagicMock", 0.14481443078630987]], "drop_archive": [["tests.e2e.Helper", 0.4775834970872855], ["unittesmock.MagicMock", 0.2188591070800997]], "dump_mock": [["unittesmock.MagicMock", 0.09152113509717036]], "inspect_mock": [["unittesmock.MagicMock", 0.10480641156688768]], "kwargs": [], "mock_confirm": [["unittesmock.MagicMock", 0.4123518503161629], ["mock.Mock", 0.06292364202191583]], "mock_input": [["mock.Mock", 0.7665064929159575], ["unittesmock.MagicMock", 0.0734530270658396]], "self": []}, "q_name": "TestDBCleanup.test_export_archived_no_confirm_if_no_tables", "ret_exprs": [], "ret_type": "", "variables": {"inspector": "", "session_mock": ""}, "variables_p": {"inspector": [["str", 0.5818338305237465], ["Dict[str, Union[Any, Any, Any]]", 0.15818092699891143], ["List[Dict[str, str]]", 0.08833431303917452], ["int", 0.07265880387459624]], "session_mock": [["unittesmock.MagicMock", 0.29738051061534243], ["mock.Mock", 0.1089087717370896]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[445, 4], [455, 62]], "fn_var_ln": {"mockopen": [[446, 8], [446, 16]], "writer": [[452, 12], [452, 18]]}, "fn_var_occur": {"mockopen": [["mockopen", "mock_open"], ["patch", "mockopen", "create", "True"], ["mockopen", "assert_called_once_with"]], "writer": [["writer", "mock_csv", "writer"], ["writer", "assert_called_once"], ["writer", "return_value", "writerow", "assert_called_once"], ["writer", "return_value", "writerows", "assert_called_once"]]}, "name": "test_dump_table_to_file_function_for_csv", "params": {"mock_csv": "", "self": ""}, "params_descr": {"mock_csv": "", "self": ""}, "params_occur": {"mock_csv": [["writer", "mock_csv", "writer"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_csv": [["unittesmock.MagicMock", 0.10454830400256275]], "self": []}, "q_name": "TestDBCleanup.test_dump_table_to_file_function_for_csv", "ret_exprs": [], "ret_type": "", "variables": {"mockopen": "", "writer": ""}, "variables_p": {"mockopen": [["Dict[int, Dict[str, Any]]", 0.2954532438023867], ["libsoundtouch.tests.test_libsoundtouch.MockDevice", 0.16784320030818586], ["Tuple[Literal, Literal, Literal]", 0.16391373740722762], ["mock.MagicMock", 0.12452361538295728], ["str", 0.11625468387277049], ["unittesmock.MagicMock", 0.06800994048383051]], "writer": [["list", 0.35696092559254117], ["Tuple[Literal, Literal, Literal]", 0.15068774612780567], ["List[str]", 0.07905333156533052], ["str", 0.07666019091306839]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[457, 4], [465, 75]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_dump_table_to_file_raises_if_format_not_supported", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDBCleanup.test_dump_table_to_file_raises_if_format_not_supported", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Test no confirmation if no archived tables found.", "long_descr": "Archived tables starts with a prefix defined in ARCHIVE_TABLE_PREFIX.", "ret": null}, "fn_lc": [[470, 4], [481, 55]], "fn_var_ln": {"inspector": [[477, 8], [477, 17]]}, "fn_var_occur": {"inspector": [["inspector", "inspect_mock", "return_value"], ["inspector", "get_table_names", "return_value", "tables"]]}, "name": "test_drop_archived_tables_no_confirm_if_no_archived_tables", "params": {"caplog": "", "inspect_mock": "", "mock_confirm": "", "self": "", "tables": ""}, "params_descr": {"caplog": "", "inspect_mock": "", "mock_confirm": "", "self": "", "tables": ""}, "params_occur": {"caplog": [["caplog", "text"]], "inspect_mock": [["inspector", "inspect_mock", "return_value"]], "mock_confirm": [["mock_confirm", "assert_not_called"]], "self": [], "tables": [["inspector", "get_table_names", "return_value", "tables"], ["drop_archived_tables", "tables", "needs_confirm", "True", "session", "MagicMock"]]}, "params_p": {"args": [], "caplog": [["tests.test_util.aiohttp.AiohttpClientMocker", 0.2209555412420766]], "inspect_mock": [["unittesmock.MagicMock", 0.814630058788097]], "kwargs": [], "mock_confirm": [["unittesmock.MagicMock", 0.806871257948653]], "self": [], "tables": [["aiohttp.test_utils.TestServer", 0.305166390261864], ["aiohttp.test_utils.TestClient", 0.09350153446303089]]}, "q_name": "TestDBCleanup.test_drop_archived_tables_no_confirm_if_no_archived_tables", "ret_exprs": [], "ret_type": "", "variables": {"inspector": ""}, "variables_p": {"inspector": [["str", 0.5015221348017694], ["Dict[str, Union[Any, Any, Any]]", 0.12901413737888326], ["List[Dict[str, str]]", 0.12122268147264656], ["int", 0.08024068004311724], ["property", 0.07645707361945331]]}}, {"docstring": {"func": "Test drop_archived_tables", "long_descr": null, "ret": null}, "fn_lc": [[487, 4], [500, 44]], "fn_var_ln": {"archived_table": [[489, 8], [489, 22]], "inspector": [[491, 8], [491, 17]], "normal_table": [[490, 8], [490, 20]]}, "fn_var_occur": {"archived_table": [["archived_table", "ARCHIVE_TABLE_PREFIX"], ["inspector", "get_table_names", "return_value", "archived_table", "normal_table"], ["archived_table", "caplog", "text"]], "inspector": [["inspector", "inspect_mock", "return_value"], ["inspector", "get_table_names", "return_value", "archived_table", "normal_table"]], "normal_table": [["inspector", "get_table_names", "return_value", "archived_table", "normal_table"], ["drop_archived_tables", "normal_table", "needs_confirm", "confirm", "session", "MagicMock"], ["normal_table", "caplog", "text"]]}, "name": "test_drop_archived_tables", "params": {"caplog": "", "confirm": "", "confirm_mock": "", "inspect_mock": "", "mock_input": "", "self": ""}, "params_descr": {"caplog": "", "confirm": "", "confirm_mock": "", "inspect_mock": "", "mock_input": "", "self": ""}, "params_occur": {"caplog": [["archived_table", "caplog", "text"], ["normal_table", "caplog", "text"], ["caplog", "text"]], "confirm": [["drop_archived_tables", "normal_table", "needs_confirm", "confirm", "session", "MagicMock"]], "confirm_mock": [["confirm_mock", "assert_called"], ["confirm_mock", "assert_not_called"]], "inspect_mock": [["inspector", "inspect_mock", "return_value"]], "mock_input": [], "self": []}, "params_p": {"args": [], "caplog": [["str", 0.10648720062646633], ["pathlib.Path", 0.09383720088015875]], "confirm": [], "confirm_mock": [["mock.Mock", 0.0790095478946103]], "inspect_mock": [["unittesmock.MagicMock", 0.29640024619676564]], "kwargs": [], "mock_input": [["unittesmock.MagicMock", 0.4569664079990321], ["mock.Mock", 0.13716112155512963], ["mock.MagicMock", 0.11151757614576037]], "self": []}, "q_name": "TestDBCleanup.test_drop_archived_tables", "ret_exprs": [], "ret_type": "", "variables": {"archived_table": "", "inspector": "", "normal_table": ""}, "variables_p": {"archived_table": [["List[Union[Any, Any, Any]]", 0.1427915453079334], ["Optional[dict]", 0.14086426386813003], ["myia.utils.misc.Named", 0.11466237897305687], ["examples.cloud.session.User", 0.08381355805048098], ["str", 0.07491533773977015], ["int", 0.07443942955499465], ["multinedb.models.table.Table", 0.07443603441427116]], "inspector": [["str", 0.5146739386683429], ["List[Dict[str, str]]", 0.13524883997005424], ["Dict[str, Union[Any, Any, Any]]", 0.10131212531662426], ["property", 0.08587404505998733]], "normal_table": [["list", 0.19863709758432405], ["Dict[datetime.date, Dict[str, Any]]", 0.11193769092948724], ["taxonomy.db.models.period.Period", 0.10608308739202078], ["kerckhoff.users.models.User", 0.09510979368342916]]}}], "name": "TestDBCleanup", "q_name": "TestDBCleanup", "variables": {}, "variables_p": {}}], "funcs": [{"docstring": {"func": "Fixture that cleans the database before and after every test.", "long_descr": null, "ret": null}, "fn_lc": [[54, 0], [62, 19]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "clean_database", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "clean_database", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[503, 0], [523, 24]], "fn_var_ln": {"dag": [[505, 8], [505, 11]], "dag_id": [[519, 12], [519, 21]], "dag_run": [[509, 12], [509, 19]], "start_date": [[520, 12], [520, 25]], "ti": [[516, 12], [516, 14]]}, "fn_var_occur": {"dag": [["dag", "DagModel", "dag_id", "uuid4"], ["session", "add", "dag"], ["dag_run", "DagRun", "dag", "dag_id", "run_id", "num", "run_type", "start_date", "start_date", "external_trigger", "external_trigger"], ["ti", "dag_id", "dag", "dag_id"]], "dag_id": [["dag", "DagModel", "dag_id", "uuid4"], ["dag_run", "DagRun", "dag", "dag_id", "run_id", "num", "run_type", "start_date", "start_date", "external_trigger", "external_trigger"], ["ti", "dag_id", "dag", "dag_id"]], "dag_run": [["dag_run", "DagRun", "dag", "dag_id", "run_id", "num", "run_type", "start_date", "start_date", "external_trigger", "external_trigger"], ["ti", "TaskInstance", "PythonOperator", "task_id", "python_callable", "print", "run_id", "dag_run", "run_id"], ["session", "add", "dag_run"]], "start_date": [["start_date", "base_date", "add", "days", "num"], ["dag_run", "DagRun", "dag", "dag_id", "run_id", "num", "run_type", "start_date", "start_date", "external_trigger", "external_trigger"], ["ti", "start_date", "start_date"]], "ti": [["ti", "TaskInstance", "PythonOperator", "task_id", "python_callable", "print", "run_id", "dag_run", "run_id"], ["ti", "dag_id", "dag", "dag_id"], ["ti", "start_date", "start_date"], ["session", "add", "ti"]]}, "name": "create_tis", "params": {"base_date": "", "external_trigger": "", "num_tis": ""}, "params_descr": {"base_date": "", "external_trigger": "", "num_tis": ""}, "params_occur": {"base_date": [["start_date", "base_date", "add", "days", "num"]], "external_trigger": [["dag_run", "DagRun", "dag", "dag_id", "run_id", "num", "run_type", "start_date", "start_date", "external_trigger", "external_trigger"]], "num_tis": [["range", "num_tis"]]}, "params_p": {"args": [], "base_date": [["Dict[datetime.date, Dict[str, Any]]", 0.10512799022438321], ["datetime.date", 0.0950585412437617], ["Set[str]", 0.0950585412437617], ["str", 0.09246567901622492], ["int", 0.08743754597380252], ["Tuple[str, str]", 0.08743754597380252]], "external_trigger": [["str", 0.39165808810975555], ["int", 0.1955848182213548], ["fal.models.Season", 0.1715989068467968], ["shop.transfer.models.ShopID", 0.12057909341104646], ["Optional[int]", 0.12057909341104646]], "kwargs": [], "num_tis": [["int", 0.6075575781948718], ["Optional[int]", 0.2842766221588782], ["bytes", 0.10816579964624992]]}, "q_name": "create_tis", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "dag_id": "", "dag_run": "", "start_date": "", "ti": ""}, "variables_p": {"dag": [["grpy.core.models.Grouping", 0.334396679232417], ["str", 0.2755602550025344], ["List[Tuple[Any, Any]]", 0.10713204561172156], ["list", 0.10548667238706377], ["accounts.models.Account", 0.08723838682114247]], "dag_id": [["str", 0.642703054201511], ["Optional[str]", 0.0951619943080219], ["Set[str]", 0.09041439449274483], ["int", 0.08867153465693381]], "dag_run": [["str", 0.18267208278369984], ["Set[str]", 0.11890707703305677], ["magic.models.card.Card", 0.09419708262839897], ["ajapaik.ajapaik.models.Album", 0.09346200533500028], ["list", 0.0931826401076603]], "start_date": [["datetime.datetime.datetime", 0.20740276157162568], ["datetime.datetime.timezone", 0.19071551263130465], ["datetime.datetime", 0.18635469385838443], ["datetime.date.time.date", 0.12515105620783795], ["Type[leasing.models.vaVat]", 0.10144760340341895], ["datetime.datetime.timedelta", 0.0994976647743278]], "ti": [["str", 0.6076288697813512], ["List[str]", 0.2130507267236474], ["Dict[Any, str]", 0.08627464779539318]]}}], "imports": ["__future__", "annotations", "contextlib", "suppress", "datetime", "datetime", "importlib", "import_module", "io", "StringIO", "pathlib", "Path", "unittest", "mock", "MagicMock", "mock_open", "patch", "uuid", "uuid4", "pendulum", "pytest", "pytest", "param", "sqlalchemy", "exc", "OperationalError", "sqlalchemy", "ext", "declarative", "DeclarativeMeta", "airflow", "AirflowException", "airflow", "models", "DagModel", "DagRun", "TaskInstance", "airflow", "operators", "python", "PythonOperator", "airflow", "utils", "db_cleanup", "ARCHIVE_TABLE_PREFIX", "CreateTableAs", "_build_query", "_cleanup_table", "_confirm_drop_archives", "_dump_table_to_file", "config_dict", "drop_archived_tables", "export_archived_records", "run_cleanup", "airflow", "utils", "session", "create_session", "tests", "test_utils", "db", "clear_db_dags", "clear_db_datasets", "clear_db_runs", "drop_tables_with_prefix", "pkgutil", "airflow", "utils", "db_cleanup", "config_dict"], "mod_var_ln": {}, "mod_var_occur": {}, "no_types_annot": {"D": 0, "I": 0, "U": 113}, "session_id": "SM2D8HjMEJoWYhCeae9DlbiR6tGT0X_EQ7bPwW9DnUE", "set": null, "tc": [false, null], "type_annot_cove": 0.0, "typed_seq": "", "untyped_seq": "", "variables": {}, "variables_p": {}}}