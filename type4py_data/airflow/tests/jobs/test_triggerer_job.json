{"error": null, "response": {"classes": [{"cls_lc": [[52, 0], [68, 9]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[53, 4], [56, 26]], "fn_var_ln": {"delta": [[56, 8], [56, 18]], "filename": [[55, 8], [55, 21]]}, "fn_var_occur": {"delta": [["super", "__init__", "delta", "delta"], ["self", "delta", "delta"]], "filename": [["self", "filename", "filename"]]}, "name": "__init__", "params": {"delta": "", "filename": "", "self": ""}, "params_descr": {"delta": "", "filename": "", "self": ""}, "params_occur": {"delta": [["super", "__init__", "delta", "delta"], ["self", "delta", "delta"]], "filename": [["self", "filename", "filename"]], "self": [["self", "filename", "filename"], ["self", "delta", "delta"]]}, "params_p": {"args": [], "delta": [["str", 0.13942003283791152], ["Dict[str, Any]", 0.08287858494047108], ["Optional[int]", 0.08287858494047108], ["TextIO", 0.08287858494047108], ["Optional[str]", 0.06971001641895576]], "filename": [["str", 0.9206248487131627]], "kwargs": [], "self": []}, "q_name": "TimeDeltaTrigger_.__init__", "ret_exprs": [], "ret_type": "", "variables": {"delta": "", "filename": ""}, "variables_p": {"delta": [["int", 0.5161333248040159], ["List[float]", 0.1226678609139962], ["qutebrowser.utils.urlmatch.UrlPattern", 0.0955801411859658], ["pymatgen.core.lattice.Lattice", 0.09053211634701298], ["float", 0.08702026826526855]], "filename": [["List[str]", 0.5087956633274014], ["str", 0.3947508878992566]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[58, 4], [62, 23]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "run", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["open", "self", "filename", "f"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TimeDeltaTrigger_.run", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[64, 4], [68, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "serialize", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "delta", "self", "filename"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TimeDeltaTrigger_.serialize", "ret_exprs": ["return ( \"tests.jobs.test_triggerer_job.TimeDeltaTrigger_\", {\"delta\": self.delta, \"filename\": self.filename},)"], "ret_type": "", "ret_type_p": [["str", 0.16953382404330844], ["float", 0.10626880293570852], ["List[recidiviz.persistence.entity.state.entities.StateSupervisionPeriod]", 0.09808001115812262], ["List[Dict[str, Any]]", 0.09519831496303496], ["int", 0.09109311746561692]], "variables": {}, "variables_p": {}}], "name": "TimeDeltaTrigger_", "q_name": "TimeDeltaTrigger_", "variables": {}, "variables_p": {}}, {"cls_lc": [[119, 4], [122, 38]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[120, 8], [122, 38]], "fn_var_ln": {"password": [[121, 12], [121, 25]]}, "fn_var_occur": {"password": [["self", "password", "password"]]}, "name": "__init__", "params": {"kwargs": "", "password": "", "self": ""}, "params_descr": {"kwargs": "", "password": "", "self": ""}, "params_occur": {"kwargs": [["super", "__init__", "kwargs"]], "password": [["self", "password", "password"]], "self": [["self", "password", "password"]]}, "params_p": {"args": [], "kwargs": [], "password": [["str", 0.8005515470418902], ["int", 0.10376997476652915]], "self": []}, "q_name": "test_trigger_logging_sensitive_info.<locals>.SensitiveArgOperator.__init__", "ret_exprs": [], "ret_type": "", "variables": {"password": ""}, "variables_p": {"password": [["str", 0.6022818534632302], ["int", 0.07069632070401946], ["Dict[Any, Tuple[Any, Any, Any]]", 0.0688817754905547]]}}], "name": "SensitiveArgOperator", "q_name": "test_trigger_logging_sensitive_info.<locals>.SensitiveArgOperator", "variables": {}, "variables_p": {}}, {"cls_lc": [[262, 0], [304, 83]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[265, 4], [273, 61]], "fn_var_ln": {"mock_trigger": [[268, 8], [268, 20]], "trigger_runner": [[266, 8], [266, 22]], "triggers": [[267, 8], [267, 31]]}, "fn_var_occur": {"mock_trigger": [["mock_trigger", "MagicMock"], ["mock_trigger", "task_instance", "trigger_timeout", "None"], ["mock_trigger", "run", "side_effect", "asyncio", "CancelledError"], ["trigger_runner", "run_trigger", "mock_trigger"]], "trigger_runner": [["trigger_runner", "TriggerRunner"], ["trigger_runner", "triggers", "MagicMock"], ["trigger_runner", "run_trigger", "mock_trigger"]], "triggers": [["trigger_runner", "triggers", "MagicMock"]]}, "name": "test_run_trigger_canceled", "params": {"self": "", "session": ""}, "params_descr": {"self": "", "session": ""}, "params_occur": {"self": [], "session": []}, "params_p": {"args": [], "kwargs": [], "self": [], "session": [["bool", 0.2788791466389804], ["db.RangeSelector", 0.18578054931337293]]}, "q_name": "TestTriggerRunner.test_run_trigger_canceled", "ret_exprs": [], "ret_type": "None", "variables": {"mock_trigger": "", "trigger_runner": "", "triggers": ""}, "variables_p": {"mock_trigger": [["mock.Mock", 0.42658692444042207], ["unittesmock.MagicMock", 0.28384129598403046], ["mock.MagicMock", 0.10016407572216401], ["str", 0.09423478402361228]], "trigger_runner": [["list", 0.33862817837156245], ["bool", 0.07607516936683896]], "triggers": [["Tuple[List[str], Tuple[Literal, Literal], List[str]]", 0.8076135627289727], ["str", 0.10757519573125623]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[277, 4], [286, 64]], "fn_var_ln": {"mock_trigger": [[280, 8], [280, 20]], "trigger_runner": [[278, 8], [278, 22]], "triggers": [[279, 8], [279, 31]]}, "fn_var_occur": {"mock_trigger": [["mock_trigger", "MagicMock"], ["mock_trigger", "task_instance", "trigger_timeout", "timezone", "utcnow", "datetime", "timedelta", "hours"], ["mock_trigger", "run", "side_effect", "asyncio", "CancelledError"], ["trigger_runner", "run_trigger", "mock_trigger"]], "trigger_runner": [["trigger_runner", "TriggerRunner"], ["trigger_runner", "triggers", "MagicMock"], ["trigger_runner", "run_trigger", "mock_trigger"]], "triggers": [["trigger_runner", "triggers", "MagicMock"]]}, "name": "test_run_trigger_timeout", "params": {"caplog": "", "self": "", "session": ""}, "params_descr": {"caplog": "", "self": "", "session": ""}, "params_occur": {"caplog": [["caplog", "text"]], "self": [], "session": []}, "params_p": {"args": [], "caplog": [["str", 0.37814445209245284], ["bool", 0.07889386863669295]], "kwargs": [], "self": [], "session": [["bool", 0.2530726831045222], ["sqlalchemy.orm.session.Session", 0.17603570984962222], ["str", 0.08801785492481111]]}, "q_name": "TestTriggerRunner.test_run_trigger_timeout", "ret_exprs": [], "ret_type": "None", "variables": {"mock_trigger": "", "trigger_runner": "", "triggers": ""}, "variables_p": {"mock_trigger": [["mock.Mock", 0.4695220067123279], ["unittesmock.MagicMock", 0.22644409374185054], ["str", 0.11472761030668932], ["mock.MagicMock", 0.09349151551281913]], "trigger_runner": [["list", 0.33862817837156245], ["bool", 0.07607516936683896]], "triggers": [["Tuple[List[str], Tuple[Literal, Literal], List[str]]", 0.8076135627289727], ["str", 0.10757519573125623]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[293, 4], [304, 83]], "fn_var_ln": {"kwargs": [[298, 8], [298, 31]], "mock_trigger_orm": [[297, 8], [297, 24]], "return_value": [[299, 8], [299, 50]], "trigger_runner": [[296, 8], [296, 22]]}, "fn_var_occur": {"kwargs": [["mock_trigger_orm", "kwargs"]], "mock_trigger_orm": [["mock_trigger_orm", "MagicMock"], ["mock_trigger_orm", "kwargs"], ["mock_get_trigger_by_classpath", "return_value", "mock_trigger_orm"]], "return_value": [["mock_get_trigger_by_classpath", "return_value", "mock_trigger_orm"]], "trigger_runner": [["trigger_runner", "TriggerRunner"], ["trigger_runner", "update_triggers"]]}, "name": "test_update_trigger_with_triggerer_argument_change", "params": {"caplog": "", "mock_bulk_fetch": "", "mock_get_trigger_by_classpath": "", "self": "", "session": ""}, "params_descr": {"caplog": "", "mock_bulk_fetch": "", "mock_get_trigger_by_classpath": "", "self": "", "session": ""}, "params_occur": {"caplog": [["caplog", "text"], ["caplog", "text"]], "mock_bulk_fetch": [], "mock_get_trigger_by_classpath": [["mock_get_trigger_by_classpath", "return_value", "mock_trigger_orm"]], "self": [], "session": []}, "params_p": {"args": [], "caplog": [["unittesmock.MagicMock", 0.4433426804867761]], "kwargs": [], "mock_bulk_fetch": [], "mock_get_trigger_by_classpath": [["unittesmock.MagicMock", 0.47084700042604827], ["tests.async_mock.Mock", 0.43632155316226495]], "self": [], "session": []}, "q_name": "TestTriggerRunner.test_update_trigger_with_triggerer_argument_change", "ret_exprs": [], "ret_type": "None", "variables": {"kwargs": "", "mock_trigger_orm": "", "return_value": "", "trigger_runner": ""}, "variables_p": {"kwargs": [["unittesmock.MagicMock", 0.35890633788620874], ["List[str]", 0.2629143168649953], ["tests.conftesConfluentAvroConsumerMock", 0.11182652414119165], ["tests.utils.MockCoroutine", 0.07368296323853031], ["Dict[str, Dict[str, str]]", 0.06291502293295705], ["Dict[str, Union[Any, Any, Any]]", 0.062279118522576705]], "mock_trigger_orm": [["Dict[str, Any]", 0.11144333659598893], ["unittesmock.MagicMock", 0.09597396041850186], ["List[int]", 0.09008323490218494], ["tests.conftesConfluentAvroConsumerMock", 0.08466780181814405], ["mock.Mock", 0.08398273553813781]], "return_value": [["List[Dict[str, Any]]", 0.1844615666150745], ["Dict[str, Union[Any, Any, Any]]", 0.17266179885403232], ["List[str]", 0.14054233984947803], ["datetime.datetime.datetime", 0.12040350787454353], ["Dict[str, Dict[str, Any]]", 0.10838795473888148], ["str", 0.09685823268006083], ["Dict[str, Union[int, str]]", 0.09112594068299144], ["List[Dict[str, str]]", 0.08555865870493772]], "trigger_runner": [["str", 0.10799300852998765]]}}], "name": "TestTriggerRunner", "q_name": "TestTriggerRunner", "variables": {}, "variables_p": {}}, {"cls_lc": [[328, 4], [352, 53]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[331, 8], [337, 84]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "wait_for_job_method_count", "params": {"count": "", "method": "", "self": ""}, "params_descr": {"count": "", "method": "", "self": ""}, "params_occur": {"count": [["getattr", "self", "method", "count"], ["pytest", "fail", "count", "method"]], "method": [["getattr", "self", "method", "count"], ["pytest", "fail", "count", "method"]], "self": [["getattr", "self", "method", "count"]]}, "params_p": {"args": [], "count": [["str", 0.6299733347461332], ["models.characters.states.State", 0.09025836219884742]], "kwargs": [], "method": [["str", 0.6299733347461332], ["models.characters.states.State", 0.09025836219884742]], "self": []}, "q_name": "test_trigger_create_race_condition_18392.<locals>.TriggerRunner_.wait_for_job_method_count", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "On first run, wait for job.load_triggers to make sure they are queued", "long_descr": null, "ret": null}, "fn_lc": [[339, 8], [346, 64]], "fn_var_ln": {"loop_count": [[346, 12], [346, 27]]}, "fn_var_occur": {"loop_count": [["self", "loop_count", "getattr", "self"]]}, "name": "create_triggers", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["getattr", "self"], ["self", "wait_for_job_method_count"], ["self", "loop_count", "getattr", "self"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "test_trigger_create_race_condition_18392.<locals>.TriggerRunner_.create_triggers", "ret_exprs": [], "ret_type": "", "variables": {"loop_count": ""}, "variables_p": {"loop_count": [["int", 0.49407466336132855], ["List[int]", 0.1871908388001414], ["defaultdict", 0.13305201819518211], ["Set[str]", 0.09418512571529562], ["str", 0.09149735392805232]]}}, {"docstring": {"func": "On loop 1, make sure that job.handle_events was already called", "long_descr": null, "ret": null}, "fn_lc": [[348, 8], [352, 53]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "cleanup_finished_triggers", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "loop_count"], ["self", "wait_for_job_method_count"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "test_trigger_create_race_condition_18392.<locals>.TriggerRunner_.cleanup_finished_triggers", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TriggerRunner_", "q_name": "test_trigger_create_race_condition_18392.<locals>.TriggerRunner_", "variables": {}, "variables_p": {}}, {"cls_lc": [[354, 4], [378, 13]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[357, 8], [363, 75]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "wait_for_runner_loop", "params": {"runner_loop_count": "", "self": ""}, "params_descr": {"runner_loop_count": "", "self": ""}, "params_occur": {"runner_loop_count": [["getattr", "self", "trigger_runner", "runner_loop_count"]], "self": [["getattr", "self", "trigger_runner", "runner_loop_count"]]}, "params_p": {"args": [], "kwargs": [], "runner_loop_count": [["int", 0.5], ["float", 0.4]], "self": []}, "q_name": "test_trigger_create_race_condition_18392.<locals>.TriggererJob_.wait_for_runner_loop", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "On second run, make sure that runner has called create_triggers in its second loop", "long_descr": null, "ret": null}, "fn_lc": [[365, 8], [372, 62]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "load_triggers", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "trigger_runner", "load_triggers_count", "getattr", "self", "trigger_runner"], ["self", "trigger_runner", "load_triggers_count"], ["self", "wait_for_runner_loop", "runner_loop_count"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "test_trigger_create_race_condition_18392.<locals>.TriggererJob_.load_triggers", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[374, 8], [378, 13]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "handle_events", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "trigger_runner", "handle_events_count", "getattr", "self", "trigger_runner"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "test_trigger_create_race_condition_18392.<locals>.TriggererJob_.handle_events", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TriggererJob_", "q_name": "test_trigger_create_race_condition_18392.<locals>.TriggererJob_", "variables": {}, "variables_p": {}}, {"cls_lc": [[470, 4], [471, 12]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [], "name": "MockTriggerException", "q_name": "test_trigger_runner_exception_stops_triggerer.<locals>.MockTriggerException", "variables": {}, "variables_p": {}}, {"cls_lc": [[473, 4], [475, 65]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[474, 8], [475, 65]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "create_triggers", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "test_trigger_runner_exception_stops_triggerer.<locals>.TriggerRunner_.create_triggers", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TriggerRunner_", "q_name": "test_trigger_runner_exception_stops_triggerer.<locals>.TriggerRunner_", "variables": {}, "variables_p": {}}], "funcs": [{"docstring": {"func": "Fixture that cleans the database before and after every test.", "long_descr": null, "ret": null}, "fn_lc": [[72, 0], [78, 19]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "clean_database", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "clean_database", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Fixture that provides a SQLAlchemy session", "long_descr": null, "ret": null}, "fn_lc": [[82, 0], [85, 21]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "session", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "session", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[88, 0], [110, 53]], "fn_var_ln": {"dag": [[100, 8], [100, 20]], "dag_model": [[89, 4], [89, 13]], "id": [[98, 4], [98, 18]], "operator": [[102, 8], [102, 16]], "run": [[91, 4], [91, 7]], "task_instance": [[103, 4], [103, 17]], "trigger_id": [[104, 4], [104, 28]], "trigger_orm": [[97, 4], [97, 15]]}, "fn_var_occur": {"dag": [["dag", "DAG", "dag_id", "dag_model", "dag_id", "start_date", "pendulum", "datetime"], ["operator", "dag", "dag"], ["operator", "BaseOperator", "task_id", "dag", "dag"]], "dag_model": [["dag_model", "DagModel", "dag_id"], ["dag", "DAG", "dag_id", "dag_model", "dag_id", "start_date", "pendulum", "datetime"], ["run", "DagRun", "dag_id", "dag_model", "dag_id", "run_id", "execution_date", "pendulum", "datetime", "run_type", "DagRunType", "MANUAL"], ["session", "add", "dag_model"], ["dag_model", "run", "trigger_orm", "task_instance"]], "id": [["trigger_orm", "id"], ["task_instance", "trigger_id", "trigger_orm", "id"]], "operator": [["operator", "dag", "dag"], ["operator", "BaseOperator", "task_id", "dag", "dag"], ["task_instance", "TaskInstance", "operator", "execution_date", "run", "execution_date", "run_id", "run", "run_id"]], "run": [["run", "DagRun", "dag_id", "dag_model", "dag_id", "run_id", "execution_date", "pendulum", "datetime", "run_type", "DagRunType", "MANUAL"], ["task_instance", "TaskInstance", "operator", "execution_date", "run", "execution_date", "run_id", "run", "run_id"], ["session", "add", "run"], ["dag_model", "run", "trigger_orm", "task_instance"]], "task_instance": [["task_instance", "TaskInstance", "operator", "execution_date", "run", "execution_date", "run_id", "run", "run_id"], ["task_instance", "trigger_id", "trigger_orm", "id"], ["session", "add", "task_instance"], ["dag_model", "run", "trigger_orm", "task_instance"]], "trigger_id": [["task_instance", "trigger_id", "trigger_orm", "id"]], "trigger_orm": [["trigger_orm", "Trigger", "from_object", "trigger"], ["trigger_orm", "id"], ["task_instance", "trigger_id", "trigger_orm", "id"], ["session", "add", "trigger_orm"], ["dag_model", "run", "trigger_orm", "task_instance"]]}, "name": "create_trigger_in_db", "params": {"operator": "", "session": "", "trigger": ""}, "params_descr": {"operator": "", "session": "", "trigger": ""}, "params_occur": {"operator": [["operator", "dag", "dag"], ["operator", "BaseOperator", "task_id", "dag", "dag"], ["task_instance", "TaskInstance", "operator", "execution_date", "run", "execution_date", "run_id", "run", "run_id"]], "session": [["session", "add", "dag_model"], ["session", "add", "run"], ["session", "add", "trigger_orm"], ["session", "add", "task_instance"], ["session", "commit"]], "trigger": [["trigger_orm", "Trigger", "from_object", "trigger"]]}, "params_p": {"args": [], "kwargs": [], "operator": [["grouper.models.user.User", 0.43858516244736084], ["grouper.models.base.session.Session", 0.21929258122368045], ["django.db.models.QuerySet", 0.0950555087523771], ["zam_repondeur.models.Amendement", 0.09041963540229006], ["int", 0.07915515857902905], ["Dict[str, Any]", 0.07749195359526244]], "session": [["sqlalchemy.orm.session.Session", 0.08524252692595981], ["recidiviz.persistence.database.session.Session", 0.07895686491474709]], "trigger": [["List[str]", 0.10248433750353804], ["str", 0.09882244217425337], ["Union[eth.rlp.transactions.BaseTransaction, eth.utils.spoof.SpoofTransaction]", 0.09830226753500569], ["Optional[\"libkol.Item\"]", 0.08798744233710959], ["abilian.core.sqlalchemy.SQLAlchemy", 0.08138962050192082]]}, "q_name": "create_trigger_in_db", "ret_exprs": ["return dag_model, run, trigger_orm, task_instance"], "ret_type": "", "ret_type_p": [["int", 0.19081028960978216], ["float", 0.09471937992415813], ["Union[int, List]", 0.09325918109680681]], "variables": {"dag": "", "dag_model": "", "id": "", "operator": "", "run": "", "task_instance": "", "trigger_id": "", "trigger_orm": ""}, "variables_p": {"dag": [["int", 0.1611182801526596], ["byceps.services.user.transfer.models.User", 0.11938690460161909], ["backend.api.models.group.Group", 0.11641890522853114], ["str", 0.09613223681251146], ["dict", 0.08406973011058634]], "dag_model": [["Tuple[str]", 0.18823070049367788], ["bench.models.Onlogn", 0.15605651977397705], ["dict", 0.10847124747981556], ["str", 0.09577751559888058], ["csvhound.core.BaseHound", 0.0712492320939254], ["tf_encrypted.keras.models.sequential.Sequential", 0.06926798470691282], ["Anaconda3.Lib.site-packages.astropy.stats.bls.core.BoxLeastSquares", 0.06856828812337844]], "id": [["int", 0.49366062142096745], ["Type[Tuple[str, Any]]", 0.2076446422799086], ["str", 0.1818140539531254]], "operator": [["raiden.utils.PaymentID", 0.12396953941053859], ["golem.rpc.session.WebSocketAddress", 0.09950911062474561], ["float", 0.09918961270104616], ["grpy.core.models.Grouping", 0.09436898701966723], ["correios.models.posting.TrackingCode", 0.09225547751666781]], "run": [["str", 0.3642993116836286], ["ajapaik.ajapaik.models.Album", 0.1077121057439166], ["Dict[str, int]", 0.09554577855147245], ["datetime.datetime", 0.09187401366118386], ["list", 0.09001930633466688], ["Dict[str, Dict[str, Any]]", 0.08583350129144295], ["List[int]", 0.08076310363591137]], "task_instance": [["asyncio.futures.Future[List[Any]]", 0.11104292660865495], ["List[str]", 0.10061731229852178], ["threading.Event", 0.09472145876731827]], "trigger_id": [["set", 0.18597678266615925], ["str", 0.12253760997287523], ["int", 0.09343692327350214], ["List[Optional[str]]", 0.08416100963785826]], "trigger_orm": [["cnaas_nms.db.device.Device", 0.13812540280697533], ["str", 0.11752803451202037], ["Optional[excars.models.profiles.Profile]", 0.08910781566605781]]}}, {"docstring": {"func": "Checks that when a trigger fires, it doesn't log any sensitive", "long_descr": "information from arguments", "ret": null}, "fn_lc": [[113, 0], [152, 40]], "fn_var_ln": {"daemon": [[132, 4], [132, 31]], "op": [[126, 4], [126, 6]], "stdout": [[149, 4], [149, 10]], "trigger": [[125, 4], [125, 11]], "triggerer_job": [[128, 4], [128, 17]], "triggerer_job_runner": [[129, 4], [129, 24]]}, "fn_var_occur": {"daemon": [["triggerer_job_runner", "daemon", "True"]], "op": [["op", "SensitiveArgOperator", "task_id", "password"], ["create_trigger_in_db", "session", "trigger", "operator", "op"]], "stdout": [["stdout", "capsys", "readouterr", "out"]], "trigger": [["trigger", "SuccessTrigger"], ["create_trigger_in_db", "session", "trigger", "operator", "op"]], "triggerer_job": [["triggerer_job", "Job"], ["triggerer_job_runner", "TriggererJobRunner", "triggerer_job"]], "triggerer_job_runner": [["triggerer_job_runner", "TriggererJobRunner", "triggerer_job"], ["triggerer_job_runner", "load_triggers"], ["triggerer_job_runner", "daemon", "True"], ["triggerer_job_runner", "trigger_runner", "start"], ["triggerer_job_runner", "trigger_runner", "events"], ["list", "triggerer_job_runner", "trigger_runner", "events", "TriggerEvent", "True"], ["triggerer_job_runner", "trigger_runner", "stop", "True"]]}, "name": "test_trigger_logging_sensitive_info", "params": {"capsys": "", "session": ""}, "params_descr": {"capsys": "", "session": ""}, "params_occur": {"capsys": [["stdout", "capsys", "readouterr", "out"]], "session": [["create_trigger_in_db", "session", "trigger", "operator", "op"]]}, "params_p": {"args": [], "capsys": [["Callable", 0.41128590543535415]], "kwargs": [], "session": [["deeplearning.ml4pl.models.log_database.Database", 0.1459026506904565]]}, "q_name": "test_trigger_logging_sensitive_info", "ret_exprs": [], "ret_type": "", "variables": {"daemon": "", "op": "", "stdout": "", "trigger": "", "triggerer_job": "", "triggerer_job_runner": ""}, "variables_p": {"daemon": [["float", 0.24999999998765618], ["List[str]", 0.24999999998765618], ["str", 4.114606809674833e-11], ["bool", 8.229213619349666e-12]], "op": [["Dict[str, str]", 0.09192040746134925], ["legistar.models.MatterStatus", 0.08572155335164826], ["List[str]", 0.07506276898220246], ["dict", 0.07429311043693938]], "stdout": [["List[int]", 0.3], ["Pattern[str]", 0.19999999999999998], ["list", 0.09999999999999999], ["List[str]", 0.09999999999999999], ["str", 0.09999999999999999]], "trigger": [["raiden.utils.Address", 0.12529284964186446], ["str", 0.0800835105111218]], "triggerer_job": [["threading.Event", 0.8742605813295526]], "triggerer_job_runner": [["base.cell.Cell", 0.33333333316185737]]}}, {"docstring": {"func": "Checks the heartbeat logic", "long_descr": null, "ret": null}, "fn_lc": [[155, 0], [172, 104]], "fn_var_ln": {"latest_heartbeat": [[171, 4], [171, 34]], "state": [[170, 4], [170, 23]], "triggerer_job": [[158, 4], [158, 17]]}, "fn_var_occur": {"latest_heartbeat": [["triggerer_job", "latest_heartbeat", "timezone", "utcnow", "datetime", "timedelta", "seconds"], ["triggerer_job", "latest_heartbeat", "timezone", "utcnow", "datetime", "timedelta", "seconds"], ["triggerer_job", "latest_heartbeat", "timezone", "utcnow", "datetime", "timedelta", "seconds"]], "state": [["triggerer_job", "Job", "heartrate", "state", "State", "RUNNING"], ["triggerer_job", "state", "State", "SUCCESS"]], "triggerer_job": [["triggerer_job", "Job", "heartrate", "state", "State", "RUNNING"], ["triggerer_job", "is_alive"], ["triggerer_job", "latest_heartbeat", "timezone", "utcnow", "datetime", "timedelta", "seconds"], ["triggerer_job", "is_alive"], ["triggerer_job", "latest_heartbeat", "timezone", "utcnow", "datetime", "timedelta", "seconds"], ["triggerer_job", "is_alive"], ["triggerer_job", "state", "State", "SUCCESS"], ["triggerer_job", "latest_heartbeat", "timezone", "utcnow", "datetime", "timedelta", "seconds"], ["triggerer_job", "is_alive"]]}, "name": "test_is_alive", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "test_is_alive", "ret_exprs": [], "ret_type": "", "variables": {"latest_heartbeat": "", "state": "", "triggerer_job": ""}, "variables_p": {"latest_heartbeat": [["datetime.timedelta", 0.8589313560585181], ["int", 0.09104877765790362]], "state": [["property", 0.19020796498315515], ["list", 0.11253488971440083], ["dict", 0.09615953512441967]], "triggerer_job": [["list", 0.37008972527604517], ["mythril.laser.ethereum.state.accounStorage", 0.09002222154404566]]}}, {"docstring": {"func": "Checks the triggerer-is-needed logic", "long_descr": null, "ret": null}, "fn_lc": [[175, 0], [187, 51]], "fn_var_ln": {"id": [[184, 4], [184, 18]], "trigger": [[182, 4], [182, 11]], "trigger_orm": [[183, 4], [183, 15]], "triggerer_job": [[178, 4], [178, 17]], "triggerer_job_runner": [[179, 4], [179, 24]]}, "fn_var_occur": {"id": [["trigger_orm", "id"]], "trigger": [["trigger", "TimeDeltaTrigger", "datetime", "timedelta", "days"], ["trigger_orm", "Trigger", "from_object", "trigger"]], "trigger_orm": [["trigger_orm", "Trigger", "from_object", "trigger"], ["trigger_orm", "id"], ["session", "add", "trigger_orm"]], "triggerer_job": [["triggerer_job", "Job", "heartrate", "state", "State", "RUNNING"], ["triggerer_job_runner", "TriggererJobRunner", "triggerer_job"]], "triggerer_job_runner": [["triggerer_job_runner", "TriggererJobRunner", "triggerer_job"], ["triggerer_job_runner", "is_needed", "False"], ["triggerer_job_runner", "is_needed", "True"]]}, "name": "test_is_needed", "params": {"session": ""}, "params_descr": {"session": ""}, "params_occur": {"session": [["session", "add", "trigger_orm"], ["session", "commit"]]}, "params_p": {"args": [], "kwargs": [], "session": [["recidiviz.persistence.database.session.Session", 0.10312343159307288], ["grouper.models.base.session.Session", 0.09544306484479324], ["bytes", 0.08159960569247388]]}, "q_name": "test_is_needed", "ret_exprs": [], "ret_type": "", "variables": {"id": "", "trigger": "", "trigger_orm": "", "triggerer_job": "", "triggerer_job_runner": ""}, "variables_p": {"id": [["List[str]", 0.257958085323323], ["int", 0.24607330050317044], ["str", 0.15785466938676723], ["float", 0.07191488216574116], ["list", 0.07143736887942308], ["cmk.utils.type_defs.ServiceCheckResult", 0.07050037356600629]], "trigger": [["datetime.timedelta", 0.568126757994325], ["datetime.date", 0.30274186720936025]], "trigger_orm": [["starfish.core.image.Filter.reduce.Reduce", 0.18630243291941334], ["dict", 0.18526157020008857], ["Dict[None, None]", 0.11446540163444649], ["blurr.core.aggregate_window.WindowAggregateSchema", 0.08588276796439029], ["core.arxiv.submission.domain.submission.Submission", 0.08243442306569863]], "triggerer_job": [["Tuple[Literal, Literal, Literal]", 0.10529054710962421], ["int", 0.10075615138903528], ["Dict[str, Any]", 0.09777283427890286], ["starfish.core.spots.DetectPixels.pixel_spot_decoder.PixelSpotDecoder", 0.09670873210026762]], "triggerer_job_runner": [["Dict[str, Union[Any, str]]", 0.10668675246882271]]}}, {"docstring": {"func": "Tests that TriggererJob correctly sets capacity to a valid value passed in as a CLI arg,", "long_descr": "handles invalid args, or sets it to a default value if no arg is passed.", "ret": null}, "fn_lc": [[190, 0], [215, 59]], "fn_var_ln": {"job": [[214, 12], [214, 15]], "job_runner": [[202, 8], [202, 18]], "variants": [[206, 4], [206, 12]]}, "fn_var_occur": {"job": [["job", "Job"], ["job_runner", "TriggererJobRunner", "job", "capacity", "input_str"], ["job", "Job"], ["TriggererJobRunner", "job", "job", "capacity", "input_str"]], "job_runner": [["job_runner", "TriggererJobRunner", "job", "capacity", "input_str"], ["job_runner", "capacity", "input_str", "job_runner", "capacity"]], "variants": [["variants", "None"]]}, "name": "test_capacity_decode", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "test_capacity_decode", "ret_exprs": [], "ret_type": "", "variables": {"job": "", "job_runner": "", "variants": ""}, "variables_p": {"job": [["dict", 0.27370668170122653], ["list", 0.11876298759700288], ["Dict[str, str]", 0.0967085047516985]], "job_runner": [["list", 0.3055367090252119], ["qiskiproviders.ibmq.job.ibmqjob.IBMQJob", 0.2821405763089899]], "variants": [["list", 0.49999999998796596], ["set", 0.166666666658644], ["Dict[str, Optional[bool]]", 0.166666666658644], ["Dict[str, Union[None, Any, Any]]", 0.166666666658644], ["Type[Optional[Any]]", 1.2033986723111486e-11]]}}, {"docstring": {"func": "Checks that the triggerer will correctly see a new Trigger in the database", "long_descr": "and send it to the trigger runner, and then delete it when it vanishes.", "ret": null}, "fn_lc": [[218, 0], [259, 45]], "fn_var_ln": {"daemon": [[234, 4], [234, 21]], "dag_model": [[226, 4], [226, 13]], "job": [[228, 4], [228, 7]], "job_runner": [[229, 4], [229, 14]], "run": [[226, 15], [226, 18]], "task_instance": [[226, 33], [226, 46]], "trigger": [[225, 4], [225, 11]], "trigger_orm": [[226, 20], [226, 31]]}, "fn_var_occur": {"daemon": [["job_runner", "daemon", "True"]], "dag_model": [["dag_model", "run", "trigger_orm", "task_instance", "create_trigger_in_db", "session", "trigger"]], "job": [["job", "Job"], ["job_runner", "TriggererJobRunner", "job"]], "job_runner": [["job_runner", "TriggererJobRunner", "job"], ["job_runner", "load_triggers"], ["x", "x", "y", "job_runner", "trigger_runner", "to_create"], ["job_runner", "daemon", "True"], ["job_runner", "trigger_runner", "start"], ["job_runner", "trigger_runner", "triggers"], ["list", "job_runner", "trigger_runner", "triggers", "keys"], ["job_runner", "load_triggers"], ["job_runner", "trigger_runner", "triggers"], ["job_runner", "trigger_runner", "stop", "True"]], "run": [["dag_model", "run", "trigger_orm", "task_instance", "create_trigger_in_db", "session", "trigger"]], "task_instance": [["dag_model", "run", "trigger_orm", "task_instance", "create_trigger_in_db", "session", "trigger"]], "trigger": [["trigger", "TimeDeltaTrigger", "datetime", "timedelta", "days"], ["dag_model", "run", "trigger_orm", "task_instance", "create_trigger_in_db", "session", "trigger"]], "trigger_orm": [["dag_model", "run", "trigger_orm", "task_instance", "create_trigger_in_db", "session", "trigger"], ["session", "delete", "trigger_orm"]]}, "name": "test_trigger_lifecycle", "params": {"session": ""}, "params_descr": {"session": ""}, "params_occur": {"session": [["dag_model", "run", "trigger_orm", "task_instance", "create_trigger_in_db", "session", "trigger"], ["session", "delete", "trigger_orm"], ["session", "commit"]]}, "params_p": {"args": [], "kwargs": [], "session": []}, "q_name": "test_trigger_lifecycle", "ret_exprs": [], "ret_type": "", "variables": {"daemon": "", "dag_model": "", "job": "", "job_runner": "", "run": "", "task_instance": "", "trigger": "", "trigger_orm": ""}, "variables_p": {"daemon": [["str", 0.8999999999999999], ["bool", 0.09999999999999999]], "dag_model": [["tests.ourmarshmallow.test_schema.FakeModel", 0.35118785817010956], ["Dict[str, Dict[str, Any]]", 0.17657385284261445], ["Optional[str]", 0.113332129612916], ["str", 0.09269702354089103], ["asyncio.locks.Semaphore", 0.08868103279700233], ["users.tests.factories.UserFactory", 0.08857651857069959]], "job": [["List[Optional[bool]]", 0.13944128280918863], ["str", 0.09746844312010054], ["cmk.base.plugins.agent_based.job.Job", 0.09060514061371316], ["List[str]", 0.09026267033321936], ["list", 0.08350065806939258], ["Dict[str, int]", 0.07930064084508279], ["Dict[str, Optional[str]]", 0.07825111312829024]], "job_runner": [["snorkel.labeling.apply.core.LFApplier", 0.21962533254385896], ["List[List[int]]", 0.14306272189891336], ["int", 0.08576274673412762]], "run": [["apps.events.tests.factories.EventFactory", 0.1958705804807187], ["byceps.services.email.transfer.models.Message", 0.11413666952416862]], "task_instance": [], "trigger": [["datetime.timedelta", 0.7094961621850779], ["datetime.date", 0.21026293398315002]], "trigger_orm": []}}, {"docstring": {"func": "This verifies the resolution of race condition documented in github issue #18392.", "long_descr": "Triggers are queued for creation by TriggerJob.load_triggers.\nThere was a race condition where multiple triggers would be created unnecessarily.\nWhat happens is the runner completes the trigger and purges from the \"running\" list.\nThen job.load_triggers is called and it looks like the trigger is not running but should,\nso it queues it again.\n\nThe scenario is as follows:\n    1. job.load_triggers (trigger now queued)\n    2. runner.create_triggers (trigger now running)\n    3. job.handle_events (trigger still appears running so state not updated in DB)\n    4. runner.cleanup_finished_triggers (trigger completed at this point; trigger from \"running\" set)\n    5. job.load_triggers (trigger not running, but also not purged from DB, so it is queued again)\n    6. runner.create_triggers (trigger created again)\n\nThis test verifies that under this scenario only one trigger is created.", "ret": null}, "fn_lc": [[307, 0], [414, 30]], "fn_var_ln": {"dag": [[385, 4], [385, 7]], "dag_id": [[388, 4], [388, 13]], "dag_run": [[386, 4], [386, 11]], "id": [[382, 4], [382, 18]], "instances": [[413, 4], [413, 13]], "job": [[396, 4], [396, 7]], "job_runner": [[397, 4], [397, 14]], "path": [[326, 4], [326, 8]], "thread": [[399, 4], [399, 10]], "ti": [[387, 4], [387, 6]], "trigger": [[380, 4], [380, 11]], "trigger_id": [[389, 4], [389, 17]], "trigger_orm": [[381, 4], [381, 15]], "trigger_runner": [[398, 4], [398, 29]]}, "fn_var_occur": {"dag": [["dag", "DagModel", "dag_id"], ["dag_run", "DagRun", "dag", "dag_id", "run_id", "run_type"], ["ti", "dag_id", "dag", "dag_id"], ["session", "add", "dag"]], "dag_id": [["dag", "DagModel", "dag_id"], ["dag_run", "DagRun", "dag", "dag_id", "run_id", "run_type"], ["ti", "dag_id", "dag", "dag_id"]], "dag_run": [["dag_run", "DagRun", "dag", "dag_id", "run_id", "run_type"], ["ti", "TaskInstance", "PythonOperator", "task_id", "python_callable", "print", "run_id", "dag_run", "run_id"], ["session", "add", "dag_run"]], "id": [["trigger_orm", "id"]], "instances": [["instances", "path", "read_text", "splitlines"], ["len", "instances"]], "job": [["job", "Job"], ["job_runner", "TriggererJob_", "job"]], "job_runner": [["job_runner", "TriggererJob_", "job"], ["job_runner", "trigger_runner", "TriggerRunner_"], ["thread", "Thread", "target", "job_runner", "_execute"], ["getattr", "job_runner", "trigger_runner"], ["job_runner", "trigger_runner", "stop", "True"], ["job_runner", "trigger_runner", "join"]], "path": [["trigger", "TimeDeltaTrigger_", "delta", "datetime", "timedelta", "microseconds", "filename", "path", "as_posix"], ["instances", "path", "read_text", "splitlines"]], "thread": [["thread", "Thread", "target", "job_runner", "_execute"], ["thread", "start"], ["thread", "join"]], "ti": [["ti", "TaskInstance", "PythonOperator", "task_id", "python_callable", "print", "run_id", "dag_run", "run_id"], ["ti", "dag_id", "dag", "dag_id"], ["ti", "trigger_id"], ["session", "add", "ti"]], "trigger": [["trigger", "TimeDeltaTrigger_", "delta", "datetime", "timedelta", "microseconds", "filename", "path", "as_posix"], ["trigger_orm", "Trigger", "from_object", "trigger"]], "trigger_id": [["ti", "trigger_id"]], "trigger_orm": [["trigger_orm", "Trigger", "from_object", "trigger"], ["trigger_orm", "id"], ["session", "add", "trigger_orm"]], "trigger_runner": [["job_runner", "trigger_runner", "TriggerRunner_"], ["getattr", "job_runner", "trigger_runner"], ["job_runner", "trigger_runner", "stop", "True"], ["job_runner", "trigger_runner", "join"]]}, "name": "test_trigger_create_race_condition_18392", "params": {"session": "", "tmp_path": ""}, "params_descr": {"session": "", "tmp_path": ""}, "params_occur": {"session": [["session", "add", "trigger_orm"], ["session", "add", "dag"], ["session", "add", "dag_run"], ["session", "add", "ti"], ["session", "commit"]], "tmp_path": []}, "params_p": {"args": [], "kwargs": [], "session": [["int", 0.20794644183390562], ["estimark.application.domain.models.Entity", 0.11454062069891147], ["utils.JobsType", 0.10243117186104063]], "tmp_path": [["Dict[str, Sequence[str]]", 0.10886751818574647]]}, "q_name": "test_trigger_create_race_condition_18392", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "dag_id": "", "dag_run": "", "id": "", "instances": "", "job": "", "job_runner": "", "path": "", "thread": "", "ti": "", "trigger": "", "trigger_id": "", "trigger_orm": "", "trigger_runner": ""}, "variables_p": {"dag": [["str", 0.22915058019948437], ["List[str]", 0.19317515671425284], ["int", 0.07616293712667702], ["Dict[str, str]", 0.07472797956717978], ["geode.models.common.Address", 0.07238988916694875]], "dag_id": [["str", 0.6504958124179415], ["int", 0.1812247550300655], ["Optional[str]", 0.08777931354429767]], "dag_run": [["apps.events.tests.factories.EventFactory", 0.25719326945122567], ["pathpy.core.edge.Edge", 0.12795383525053797], ["magic.models.deck.Deck", 0.10189402793779419], ["Set[str]", 0.08930339723048789]], "id": [["List[str]", 0.257958085323323], ["int", 0.24607330050317044], ["str", 0.15785466938676723], ["float", 0.07191488216574116], ["list", 0.07143736887942308], ["cmk.utils.type_defs.ServiceCheckResult", 0.07050037356600629]], "instances": [["list", 0.8552201997134076], ["Dict[str, Dict[str, Any]]", 0.14477980028659254]], "job": [["List[Optional[bool]]", 0.13944128280918863], ["str", 0.09746844312010054], ["cmk.base.plugins.agent_based.job.Job", 0.09060514061371316], ["List[str]", 0.09026267033321936], ["list", 0.08350065806939258], ["Dict[str, int]", 0.07930064084508279], ["Dict[str, Optional[str]]", 0.07825111312829024]], "job_runner": [["threading.Event", 0.26150838733961024], ["str", 0.18566372229061778], ["starfish.core.spots.FindSpots.blob.BlobDetector", 0.15996489575931147], ["yacron.job.RunningJob", 0.12390308194884982], ["float", 0.07998244787965574]], "path": [["str", 0.3006219994837205], ["int", 0.11193525650698155], ["Optional[Callable[[], bool]]", 0.10780515018181326], ["Type[hypha.apply.projects.models.Report]", 0.10777296402737613], ["datetime.date.time.timezone", 0.10459114029424667], ["datetime.datetime", 0.0927577691123844], ["Type[taxonomy.db.models.taxon.Taxon]", 0.08810937793315081], ["Optional[str]", 0.08640634246032694]], "thread": [["threading.Thread", 0.5065698723170218], ["bytes", 0.1109731034433147], ["str", 0.09775039322871654], ["threading.Semaphore", 0.0963039085807271], ["threading.Timer", 0.09519117890949483], ["List[str]", 0.09321154352072518]], "ti": [["str", 0.6076288697813512], ["List[str]", 0.2130507267236474], ["Dict[Any, str]", 0.08627464779539318]], "trigger": [["datetime.timedelta", 0.9118319250392051]], "trigger_id": [["Set[str]", 0.9999999997886457], ["str", 1.3920379633682437e-10], ["bytes", 4.8515466482690775e-11], ["int", 2.3634972983301778e-11]], "trigger_orm": [["starfish.core.image.Filter.reduce.Reduce", 0.18630243291941334], ["dict", 0.18526157020008857], ["Dict[None, None]", 0.11446540163444649], ["blurr.core.aggregate_window.WindowAggregateSchema", 0.08588276796439029], ["core.arxiv.submission.domain.submission.Submission", 0.08243442306569863]], "trigger_runner": [["str", 0.32940713847618286]]}}, {"docstring": {"func": "Checks that the triggerer will correctly claim a Trigger that is assigned to a", "long_descr": "triggerer that does not exist.", "ret": null}, "fn_lc": [[417, 0], [434, 69]], "fn_var_ln": {"id": [[425, 4], [425, 18]], "job": [[430, 4], [430, 7]], "job_runner": [[431, 4], [431, 14]], "trigger": [[423, 4], [423, 11]], "trigger_orm": [[424, 4], [424, 15]], "triggerer_id": [[426, 4], [426, 28]]}, "fn_var_occur": {"id": [["trigger_orm", "id"]], "job": [["job", "Job"], ["job_runner", "TriggererJobRunner", "job"]], "job_runner": [["job_runner", "TriggererJobRunner", "job"], ["job_runner", "load_triggers"], ["x", "x", "y", "job_runner", "trigger_runner", "to_create"]], "trigger": [["trigger", "TimeDeltaTrigger", "datetime", "timedelta", "days"], ["trigger_orm", "Trigger", "from_object", "trigger"]], "trigger_orm": [["trigger_orm", "Trigger", "from_object", "trigger"], ["trigger_orm", "id"], ["trigger_orm", "triggerer_id"], ["session", "add", "trigger_orm"]], "triggerer_id": [["trigger_orm", "triggerer_id"]]}, "name": "test_trigger_from_dead_triggerer", "params": {"session": ""}, "params_descr": {"session": ""}, "params_occur": {"session": [["session", "add", "trigger_orm"], ["session", "commit"]]}, "params_p": {"args": [], "kwargs": [], "session": [["recidiviz.persistence.database.session.Session", 0.10339848161653602], ["sqlalchemy.orm.session.Session", 0.0862563587169475]]}, "q_name": "test_trigger_from_dead_triggerer", "ret_exprs": [], "ret_type": "", "variables": {"id": "", "job": "", "job_runner": "", "trigger": "", "trigger_orm": "", "triggerer_id": ""}, "variables_p": {"id": [["List[str]", 0.257958085323323], ["int", 0.24607330050317044], ["str", 0.15785466938676723], ["float", 0.07191488216574116], ["list", 0.07143736887942308], ["cmk.utils.type_defs.ServiceCheckResult", 0.07050037356600629]], "job": [["List[Optional[bool]]", 0.13944128280918863], ["str", 0.09746844312010054], ["cmk.base.plugins.agent_based.job.Job", 0.09060514061371316], ["List[str]", 0.09026267033321936], ["list", 0.08350065806939258], ["Dict[str, int]", 0.07930064084508279], ["Dict[str, Optional[str]]", 0.07825111312829024]], "job_runner": [["snorkel.labeling.apply.core.LFApplier", 0.20101354197371607], ["List[List[int]]", 0.16137927834783977]], "trigger": [["datetime.timedelta", 0.568126757994325], ["datetime.date", 0.30274186720936025]], "trigger_orm": [["blurr.core.aggregate_window.WindowAggregateSchema", 0.2158838779611412], ["pymatgen.core.structure.Molecule", 0.1961265706773218], ["starfish.core.image.Filter.reduce.Reduce", 0.1832711009095854]], "triggerer_id": [["str", 0.9999999998710318], ["int", 1.078511434222292e-10]]}}, {"docstring": {"func": "Checks that the triggerer will correctly claim a Trigger that is assigned to a", "long_descr": "triggerer that has an expired heartbeat.", "ret": null}, "fn_lc": [[437, 0], [461, 69]], "fn_var_ln": {"end_date": [[452, 4], [452, 30]], "id": [[450, 4], [450, 24]], "job": [[457, 4], [457, 7]], "job_runner": [[458, 4], [458, 14]], "latest_heartbeat": [[453, 4], [453, 38]], "start_date": [[451, 4], [451, 32]], "trigger": [[443, 4], [443, 11]], "trigger_orm": [[444, 4], [444, 15]], "triggerer_id": [[446, 4], [446, 28]], "triggerer_job_orm": [[449, 4], [449, 21]]}, "fn_var_occur": {"end_date": [["triggerer_job_orm", "end_date", "None"]], "id": [["trigger_orm", "id"], ["triggerer_job_orm", "id"]], "job": [["job", "Job", "TriggererJobRunner", "job_type"], ["job_runner", "TriggererJobRunner", "job"]], "job_runner": [["job_runner", "TriggererJobRunner", "job"], ["job_runner", "load_triggers"], ["x", "x", "y", "job_runner", "trigger_runner", "to_create"]], "latest_heartbeat": [["triggerer_job_orm", "latest_heartbeat", "timezone", "utcnow", "datetime", "timedelta", "hours"]], "start_date": [["triggerer_job_orm", "start_date", "timezone", "utcnow", "datetime", "timedelta", "hours"]], "trigger": [["trigger", "TimeDeltaTrigger", "datetime", "timedelta", "days"], ["trigger_orm", "Trigger", "from_object", "trigger"]], "trigger_orm": [["trigger_orm", "Trigger", "from_object", "trigger"], ["trigger_orm", "id"], ["trigger_orm", "triggerer_id"], ["session", "add", "trigger_orm"]], "triggerer_id": [["trigger_orm", "triggerer_id"]], "triggerer_job_orm": [["triggerer_job_orm", "Job", "TriggererJobRunner", "job_type"], ["triggerer_job_orm", "id"], ["triggerer_job_orm", "start_date", "timezone", "utcnow", "datetime", "timedelta", "hours"], ["triggerer_job_orm", "end_date", "None"], ["triggerer_job_orm", "latest_heartbeat", "timezone", "utcnow", "datetime", "timedelta", "hours"], ["session", "add", "triggerer_job_orm"]]}, "name": "test_trigger_from_expired_triggerer", "params": {"session": ""}, "params_descr": {"session": ""}, "params_occur": {"session": [["session", "add", "trigger_orm"], ["session", "add", "triggerer_job_orm"], ["session", "commit"]]}, "params_p": {"args": [], "kwargs": [], "session": [["sqlalchemy.orm.session.Session", 0.20937386445018147], ["recidiviz.persistence.database.session.Session", 0.07936603182909054]]}, "q_name": "test_trigger_from_expired_triggerer", "ret_exprs": [], "ret_type": "", "variables": {"end_date": "", "id": "", "job": "", "job_runner": "", "latest_heartbeat": "", "start_date": "", "trigger": "", "trigger_orm": "", "triggerer_id": "", "triggerer_job_orm": ""}, "variables_p": {"end_date": [["str", 0.25430683825084743], ["datetime.datetime", 0.25097014468471474], ["Pattern[str]", 0.2479611977152535], ["datetime.datetime.date", 0.09398983407545723], ["datetime.date", 0.07381137194869633]], "id": [["int", 0.3404177283201154], ["Optional[str]", 0.11473777687540641], ["str", 0.10866409321336833], ["Optional[src.pythonfinder.models.path.PathEntry]", 0.08547992563213495], ["dict", 0.08308290094821454], ["Union[str, int]", 0.08084036518015127]], "job": [["dict", 0.20940452939857956], ["Type[Dict[Any, Any]]", 0.10214579477995252], ["int", 0.10214579477995252]], "job_runner": [["snorkel.labeling.apply.core.LFApplier", 0.20101354197371607], ["List[List[int]]", 0.16137927834783977]], "latest_heartbeat": [["datetime.timedelta", 0.38341301827269675], ["datetime.datetime.timedelta", 0.1894937151888402], ["datetime.datetime", 0.18402311787918493], ["int", 0.07951055897995725]], "start_date": [["datetime.date", 0.4146269570327995], ["datetime.datetime", 0.39714875578099085], ["float", 0.09854313471636257], ["datetime.datetime.timedelta", 0.08968115246984708]], "trigger": [["datetime.timedelta", 0.568126757994325], ["datetime.date", 0.30274186720936025]], "trigger_orm": [["blurr.core.aggregate_window.WindowAggregateSchema", 0.2158838779611412], ["pymatgen.core.structure.Molecule", 0.1961265706773218], ["starfish.core.image.Filter.reduce.Reduce", 0.1832711009095854]], "triggerer_id": [["str", 0.9999999998710318], ["int", 1.078511434222292e-10]], "triggerer_job_orm": [["Tuple[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any]", 0.1047679487051874], ["asyncio.events.AbstractEventLoop", 0.10374853250507313], ["Union[Literal, str]", 0.09528018513370201], ["bool", 0.09290029969222963], ["Dict[str, str]", 0.09060364185937772], ["dict", 0.090602779359247]]}}, {"docstring": {"func": "Checks that if an exception occurs when creating triggers, that the triggerer", "long_descr": "process stops", "ret": null}, "fn_lc": [[464, 0], [504, 21]], "fn_var_ln": {"job": [[482, 4], [482, 7]], "job_runner": [[483, 4], [483, 14]], "thread": [[485, 4], [485, 10]], "trigger": [[478, 4], [478, 11]], "trigger_runner": [[484, 4], [484, 29]]}, "fn_var_occur": {"job": [["job", "Job"], ["job_runner", "TriggererJobRunner", "job"]], "job_runner": [["job_runner", "TriggererJobRunner", "job"], ["job_runner", "trigger_runner", "TriggerRunner_"], ["thread", "Thread", "target", "job_runner", "_execute"], ["job_runner", "trigger_runner", "stop"], ["job_runner", "trigger_runner", "stop", "True"], ["job_runner", "trigger_runner", "join"]], "thread": [["thread", "Thread", "target", "job_runner", "_execute"], ["thread", "start"], ["thread", "is_alive"], ["thread", "join"]], "trigger": [["trigger", "SuccessTrigger"], ["create_trigger_in_db", "session", "trigger"]], "trigger_runner": [["job_runner", "trigger_runner", "TriggerRunner_"], ["job_runner", "trigger_runner", "stop"], ["job_runner", "trigger_runner", "stop", "True"], ["job_runner", "trigger_runner", "join"]]}, "name": "test_trigger_runner_exception_stops_triggerer", "params": {"session": ""}, "params_descr": {"session": ""}, "params_occur": {"session": [["create_trigger_in_db", "session", "trigger"]]}, "params_p": {"args": [], "kwargs": [], "session": [["Dict[str, Any]", 0.1102704916721779], ["sqlalchemy.orm.session.Session", 0.10194354050159897], ["deeplearning.ml4pl.models.log_database.Database", 0.09678454018277088]]}, "q_name": "test_trigger_runner_exception_stops_triggerer", "ret_exprs": [], "ret_type": "", "variables": {"job": "", "job_runner": "", "thread": "", "trigger": "", "trigger_runner": ""}, "variables_p": {"job": [["List[Optional[bool]]", 0.13944128280918863], ["str", 0.09746844312010054], ["cmk.base.plugins.agent_based.job.Job", 0.09060514061371316], ["List[str]", 0.09026267033321936], ["list", 0.08350065806939258], ["Dict[str, int]", 0.07930064084508279], ["Dict[str, Optional[str]]", 0.07825111312829024]], "job_runner": [["int", 0.11504202831252272], ["List[int]", 0.09187016252971998]], "thread": [["threading.Thread", 0.4319439372365196], ["threading.Event", 0.17415316688603552], ["bytes", 0.1070905777253854], ["threading.Timer", 0.09907399327358589], ["str", 0.09709575103290594], ["threading.Semaphore", 0.09064257384556752]], "trigger": [["raiden.utils.Address", 0.12529284964186446], ["str", 0.0800835105111218]], "trigger_runner": [["starfish.core.spots.FindSpots.blob.BlobDetector", 0.39503655679821686], ["int", 0.18890303948500609], ["starfish.core.types._spot_finding_results.SpotFindingResults", 0.1594305664522714], ["float", 0.11780299517297274]]}}, {"docstring": {"func": "Checks that when a trigger fires, it correctly makes it into the", "long_descr": "event queue.", "ret": null}, "fn_lc": [[507, 0], [533, 45]], "fn_var_ln": {"daemon": [[520, 4], [520, 21]], "job": [[516, 4], [516, 7]], "job_runner": [[517, 4], [517, 14]], "trigger": [[513, 4], [513, 11]]}, "fn_var_occur": {"daemon": [["job_runner", "daemon", "True"]], "job": [["job", "Job"], ["job_runner", "TriggererJobRunner", "job"]], "job_runner": [["job_runner", "TriggererJobRunner", "job"], ["job_runner", "load_triggers"], ["job_runner", "daemon", "True"], ["job_runner", "trigger_runner", "start"], ["job_runner", "trigger_runner", "events"], ["list", "job_runner", "trigger_runner", "events", "TriggerEvent", "True"], ["job_runner", "trigger_runner", "stop", "True"]], "trigger": [["trigger", "SuccessTrigger"], ["create_trigger_in_db", "session", "trigger"]]}, "name": "test_trigger_firing", "params": {"session": ""}, "params_descr": {"session": ""}, "params_occur": {"session": [["create_trigger_in_db", "session", "trigger"]]}, "params_p": {"args": [], "kwargs": [], "session": [["deeplearning.ml4pl.models.log_database.Database", 0.19834565681207605], ["sqlalchemy.orm.session.Session", 0.11369179310859097], ["Dict[str, Any]", 0.11204633176975344]]}, "q_name": "test_trigger_firing", "ret_exprs": [], "ret_type": "", "variables": {"daemon": "", "job": "", "job_runner": "", "trigger": ""}, "variables_p": {"daemon": [["str", 0.8999999999999999], ["bool", 0.09999999999999999]], "job": [["List[Optional[bool]]", 0.13944128280918863], ["str", 0.09746844312010054], ["cmk.base.plugins.agent_based.job.Job", 0.09060514061371316], ["List[str]", 0.09026267033321936], ["list", 0.08350065806939258], ["Dict[str, int]", 0.07930064084508279], ["Dict[str, Optional[str]]", 0.07825111312829024]], "job_runner": [["int", 0.1790167989119453], ["yacron.job.RunningJob", 0.13026421224975165], ["str", 0.07917426530893278]], "trigger": [["raiden.utils.Address", 0.12529284964186446], ["str", 0.0800835105111218]]}}, {"docstring": {"func": "Checks that when a trigger fails, it correctly makes it into the", "long_descr": "failure queue.", "ret": null}, "fn_lc": [[536, 0], [566, 45]], "fn_var_ln": {"daemon": [[549, 4], [549, 21]], "exc": [[556, 28], [556, 31]], "job": [[545, 4], [545, 7]], "job_runner": [[546, 4], [546, 14]], "trigger": [[542, 4], [542, 11]], "trigger_id": [[556, 16], [556, 26]]}, "fn_var_occur": {"daemon": [["job_runner", "daemon", "True"]], "exc": [["trigger_id", "exc", "list", "job_runner", "trigger_runner", "failed_triggers"], ["isinstance", "exc", "ValueError"], ["exc", "args"]], "job": [["job", "Job"], ["job_runner", "TriggererJobRunner", "job"]], "job_runner": [["job_runner", "TriggererJobRunner", "job"], ["job_runner", "load_triggers"], ["job_runner", "daemon", "True"], ["job_runner", "trigger_runner", "start"], ["job_runner", "trigger_runner", "failed_triggers"], ["len", "job_runner", "trigger_runner", "failed_triggers"], ["trigger_id", "exc", "list", "job_runner", "trigger_runner", "failed_triggers"], ["job_runner", "trigger_runner", "stop", "True"]], "trigger": [["trigger", "FailureTrigger"], ["create_trigger_in_db", "session", "trigger"]], "trigger_id": [["trigger_id", "exc", "list", "job_runner", "trigger_runner", "failed_triggers"]]}, "name": "test_trigger_failing", "params": {"session": ""}, "params_descr": {"session": ""}, "params_occur": {"session": [["create_trigger_in_db", "session", "trigger"]]}, "params_p": {"args": [], "kwargs": [], "session": [["deeplearning.ml4pl.models.log_database.Database", 0.19834565681207605], ["sqlalchemy.orm.session.Session", 0.11369179310859097], ["Dict[str, Any]", 0.11204633176975344]]}, "q_name": "test_trigger_failing", "ret_exprs": [], "ret_type": "", "variables": {"daemon": "", "exc": "", "job": "", "job_runner": "", "trigger": "", "trigger_id": ""}, "variables_p": {"daemon": [["str", 0.8999999999999999], ["bool", 0.09999999999999999]], "exc": [["list", 0.7965152086868253], ["Anaconda3.Lib.site-packages.sklearn.tests.test_pipeline.Mult", 0.12423974656679355], ["List[Dict[str, str]]", 0.07924504474638114]], "job": [["List[Optional[bool]]", 0.13944128280918863], ["str", 0.09746844312010054], ["cmk.base.plugins.agent_based.job.Job", 0.09060514061371316], ["List[str]", 0.09026267033321936], ["list", 0.08350065806939258], ["Dict[str, int]", 0.07930064084508279], ["Dict[str, Optional[str]]", 0.07825111312829024]], "job_runner": [["int", 0.1790167989119453], ["yacron.job.RunningJob", 0.13026421224975165], ["str", 0.07917426530893278]], "trigger": [["raiden.utils.Address", 0.12529284964186446], ["str", 0.0800835105111218]], "trigger_id": [["list", 0.8192822014899466], ["str", 0.09376404146378534], ["raiden.utils.List[EventID]", 0.08695375704626805]]}}, {"docstring": {"func": "Checks that the triggerer will correctly clean up triggers that do not", "long_descr": "have any task instances depending on them.", "ret": null}, "fn_lc": [[569, 0], [585, 46]], "fn_var_ln": {"id": [[578, 4], [578, 18]], "trigger": [[576, 4], [576, 11]], "trigger_orm": [[577, 4], [577, 15]]}, "fn_var_occur": {"id": [["trigger_orm", "id"]], "trigger": [["trigger", "TimeDeltaTrigger", "datetime", "timedelta", "days"], ["trigger_orm", "Trigger", "from_object", "trigger"]], "trigger_orm": [["trigger_orm", "Trigger", "from_object", "trigger"], ["trigger_orm", "id"], ["session", "add", "trigger_orm"]]}, "name": "test_trigger_cleanup", "params": {"session": ""}, "params_descr": {"session": ""}, "params_occur": {"session": [["session", "add", "trigger_orm"], ["session", "commit"], ["Trigger", "clean_unused", "session", "session"], ["session", "commit"], ["session", "query", "Trigger", "count"]]}, "params_p": {"args": [], "kwargs": [], "session": [["recidiviz.persistence.database.session.Session", 0.10755975036791204], ["Dict[str, Any]", 0.10476788263776743], ["sqlalchemy.orm.session.Session", 0.09336051202448413], ["serverwamp.session.WAMPSession", 0.08998487123305036]]}, "q_name": "test_trigger_cleanup", "ret_exprs": [], "ret_type": "", "variables": {"id": "", "trigger": "", "trigger_orm": ""}, "variables_p": {"id": [["List[str]", 0.257958085323323], ["int", 0.24607330050317044], ["str", 0.15785466938676723], ["float", 0.07191488216574116], ["list", 0.07143736887942308], ["cmk.utils.type_defs.ServiceCheckResult", 0.07050037356600629]], "trigger": [["datetime.timedelta", 0.568126757994325], ["datetime.date", 0.30274186720936025]], "trigger_orm": [["starfish.core.image.Filter.reduce.Reduce", 0.18630243291941334], ["dict", 0.18526157020008857], ["Dict[None, None]", 0.11446540163444649], ["blurr.core.aggregate_window.WindowAggregateSchema", 0.08588276796439029], ["core.arxiv.submission.domain.submission.Submission", 0.08243442306569863]]}}, {"docstring": {"func": "Checks that the triggerer will correctly fail task instances that depend on", "long_descr": "triggers that can't even be loaded.", "ret": null}, "fn_lc": [[588, 0], [627, 104]], "fn_var_ln": {"dr": [[603, 4], [603, 6]], "id": [[595, 4], [595, 18]], "job": [[611, 4], [611, 7]], "job_runner": [[612, 4], [612, 14]], "state": [[606, 4], [606, 23]], "task_instance": [[604, 4], [604, 17]], "trigger_id": [[607, 4], [607, 28]], "trigger_orm": [[594, 4], [594, 15]]}, "fn_var_occur": {"dr": [["dr", "dag_maker", "create_dagrun"], ["task_instance", "dr", "task_instances"]], "id": [["trigger_orm", "id"]], "job": [["job", "Job"], ["job_runner", "TriggererJobRunner", "job"]], "job_runner": [["job_runner", "TriggererJobRunner", "job"], ["job_runner", "load_triggers"], ["len", "job_runner", "trigger_runner", "failed_triggers"], ["job_runner", "handle_failed_triggers"]], "state": [["task_instance", "state", "TaskInstanceState", "DEFERRED"], ["task_instance", "state", "TaskInstanceState", "SCHEDULED"]], "task_instance": [["task_instance", "dr", "task_instances"], ["task_instance", "state", "TaskInstanceState", "DEFERRED"], ["task_instance", "trigger_id"], ["task_instance", "refresh_from_db"], ["task_instance", "state", "TaskInstanceState", "SCHEDULED"], ["task_instance", "next_method"], ["task_instance", "next_kwargs"], ["task_instance", "next_kwargs"]], "trigger_id": [["task_instance", "trigger_id"]], "trigger_orm": [["trigger_orm", "Trigger", "classpath", "kwargs"], ["trigger_orm", "id"], ["session", "add", "trigger_orm"]]}, "name": "test_invalid_trigger", "params": {"dag_maker": "", "session": ""}, "params_descr": {"dag_maker": "", "session": ""}, "params_occur": {"dag_maker": [["dag_maker", "dag_id", "session", "session"], ["dr", "dag_maker", "create_dagrun"]], "session": [["session", "add", "trigger_orm"], ["session", "commit"], ["dag_maker", "dag_id", "session", "session"], ["session", "commit"]]}, "params_p": {"args": [], "dag_maker": [["sqlalchemy.orm.session.Session", 0.37234475771445563], ["zerver.models.UserProfile", 0.1860647600724452], ["str", 0.13251330164464484], ["app.models.User", 0.08828193946190466]], "kwargs": [], "session": [["abilian.core.sqlalchemy.SQLAlchemy", 0.20843294498759307], ["sqlalchemy.orm.session.Session", 0.10182872166240377]]}, "q_name": "test_invalid_trigger", "ret_exprs": [], "ret_type": "", "variables": {"dr": "", "id": "", "job": "", "job_runner": "", "state": "", "task_instance": "", "trigger_id": "", "trigger_orm": ""}, "variables_p": {"dr": [["int", 0.5181392293212707], ["str", 0.3797878056800076], ["list", 0.10207296499872177]], "id": [["List[str]", 0.257958085323323], ["int", 0.24607330050317044], ["str", 0.15785466938676723], ["float", 0.07191488216574116], ["list", 0.07143736887942308], ["cmk.utils.type_defs.ServiceCheckResult", 0.07050037356600629]], "job": [["List[Optional[bool]]", 0.13944128280918863], ["str", 0.09746844312010054], ["cmk.base.plugins.agent_based.job.Job", 0.09060514061371316], ["List[str]", 0.09026267033321936], ["list", 0.08350065806939258], ["Dict[str, int]", 0.07930064084508279], ["Dict[str, Optional[str]]", 0.07825111312829024]], "job_runner": [["List[int]", 0.15442136117740568], ["List[str]", 0.1343077241676967], ["dict", 0.08648467186516956], ["int", 0.07965676189262247]], "state": [["alerta.models.token.Jwt", 0.2200784632908782], ["Dict[str, Any]", 0.20658981890586617], ["Optional[raiden.transfer.state.TokenNetworkState]", 0.11390213380785559], ["cmk.utils.type_defs.UserId", 0.10792969184752743], ["raiden.utils.Any", 0.10448468809376582], ["Optional[grouper.models.user_metadata.UserMetadata]", 0.08226569075280521], ["str", 0.08118274562182577]], "task_instance": [], "trigger_id": [["str", 0.6970353509834895], ["set", 0.10708665605230998], ["int", 0.09834308369614321], ["Callable[[], str]", 0.09753490926805734]], "trigger_orm": [["dict", 0.19421263695764235], ["Dict[str, float]", 0.11092388435319567], ["Union[List[Any], list]", 0.1022468958671907], ["tests.core.test_task_map.ListTask", 0.10024257737529234], ["datetime.datetime.datetime", 0.09808249589472044], ["int", 0.09429741009030249]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[632, 0], [641, 42]], "fn_var_ln": {"DISABLE_WRAPPER": [[635, 4], [635, 40]], "job": [[636, 4], [636, 7]]}, "fn_var_occur": {"DISABLE_WRAPPER": [["triggerer_job_runner", "DISABLE_WRAPPER", "should_wrap"]], "job": [["job", "Job"], ["TriggererJobRunner", "job", "job"]]}, "name": "test_handler_config_respects_donot_wrap", "params": {"mock_configure": "", "should_wrap": ""}, "params_descr": {"mock_configure": "", "should_wrap": ""}, "params_occur": {"mock_configure": [["mock_configure", "assert_called"], ["mock_configure", "assert_not_called"]], "should_wrap": [["triggerer_job_runner", "DISABLE_WRAPPER", "should_wrap"]]}, "params_p": {"args": [], "kwargs": [], "mock_configure": [["unittesmock.MagicMock", 0.9676019243403478]], "should_wrap": [["tests.test_util.aiohttp.AiohttpClientMocker", 0.2631177890406015], ["asyncio.AbstractEventLoop", 0.08559688776499107]]}, "q_name": "test_handler_config_respects_donot_wrap", "ret_exprs": [], "ret_type": "", "variables": {"DISABLE_WRAPPER": "", "job": ""}, "variables_p": {"DISABLE_WRAPPER": [["int", 0.32728076886958696], ["Counter[Any]", 0.11400678179236347], ["str", 0.09858601290143768], ["datetime.datetime", 0.08910430209133033], ["bytes", 0.08857588330252757]], "job": [["list", 0.38094150221326284], ["greenstalk.Job", 0.2543674320345012], ["dict", 0.10700665117434482], ["str", 0.08360434758458077]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[645, 0], [649, 30]], "fn_var_ln": {"job": [[647, 4], [647, 7]]}, "fn_var_occur": {"job": [["job", "Job"], ["TriggererJobRunner", "job", "job"]]}, "name": "test_triggerer_job_always_creates_listener", "params": {"mock_setup": ""}, "params_descr": {"mock_setup": ""}, "params_occur": {"mock_setup": [["mock_setup", "assert_not_called"], ["mock_setup", "assert_called"]]}, "params_p": {"args": [], "kwargs": [], "mock_setup": [["unittesmock.MagicMock", 0.9861759072019437], ["tests.test_util.aiohttp.AiohttpClientMocker", 0.01382409279805611]]}, "q_name": "test_triggerer_job_always_creates_listener", "ret_exprs": [], "ret_type": "", "variables": {"job": ""}, "variables_p": {"job": [["list", 0.38094150221326284], ["greenstalk.Job", 0.2543674320345012], ["dict", 0.10700665117434482], ["str", 0.08360434758458077]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[661, 4], [662, 63]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "non_pytest_handlers", "params": {"val": ""}, "params_descr": {"val": ""}, "params_occur": {"val": [["h", "h", "val", "h", "__module__"]]}, "params_p": {"args": [], "kwargs": [], "val": [["str", 0.5273901432356098], ["int", 0.2685466638046424]]}, "q_name": "test_queue_listener.<locals>.non_pytest_handlers", "ret_exprs": ["return [h for h in val if \"pytest\" not in h.__module__]"], "ret_type": "", "ret_type_p": [["List[int]", 0.2169073557333048], ["int", 0.20048723820747613], ["Tuple[int, int]", 0.11765772374471245], ["list", 0.09540147487132622], ["Set[str]", 0.09389932383242192], ["str", 0.09321299078400863], ["List[str]", 0.09176401387722022], ["bool", 0.09066987894952971]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "When listener func called, root handlers should be moved to queue listener", "long_descr": "and replaced with queuehandler.", "ret": null}, "fn_lc": [[652, 0], [676, 19]], "fn_var_ln": {"handler": [[669, 4], [669, 11]], "handlers": [[667, 4], [667, 12]], "listener": [[671, 4], [671, 12]], "log": [[666, 4], [666, 7]], "qh": [[673, 4], [673, 6]]}, "fn_var_occur": {"handler": [["handler", "handlers"], ["handler", "__class__", "RedirectStdHandler"], ["handler", "non_pytest_handlers", "log", "handlers"]], "handlers": [["handlers", "non_pytest_handlers", "log", "handlers"], ["len", "handlers"], ["handler", "handlers"], ["handler", "non_pytest_handlers", "log", "handlers"], ["qh", "log", "handlers"]], "listener": [["listener", "setup_queue_listener"], ["qh", "queue", "listener", "queue"], ["listener", "stop"]], "log": [["log", "logging", "getLogger"], ["handlers", "non_pytest_handlers", "log", "handlers"], ["handler", "non_pytest_handlers", "log", "handlers"], ["qh", "log", "handlers"]], "qh": [["qh", "log", "handlers"], ["qh", "__class__", "LocalQueueHandler"], ["qh", "queue", "listener", "queue"]]}, "name": "test_queue_listener", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "test_queue_listener", "ret_exprs": [], "ret_type": "", "variables": {"handler": "", "handlers": "", "listener": "", "log": "", "qh": ""}, "variables_p": {"handler": [["str", 0.8361296950661906], ["logging.handlers.QueueHandler", 0.08646188796484014]], "handlers": [["logging.StreamHandler", 0.2207122873258439], ["int", 0.17687197792354592], ["logging.Logger", 0.16604651370150403], ["logging.Formatter", 0.15258807023689241], ["datetime.timedelta", 0.148312420589967], ["Dict[int, int]", 0.13546873022224679]], "listener": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["str", 0.1], ["datetime.timedelta", 0.1]], "log": [["logging.Logger", 1.0]], "qh": [["logging.Logger", 0.20559578499081302], ["logging.handlers.QueueListener", 0.1534799187082839], ["List[str]", 0.1372368664285074], ["logging.handlers.SMTPHandler", 0.08117470543941352], ["List[List[str]]", 0.0686184332142537], ["logging.StreamHandler", 0.06589302310071615]]}}], "imports": ["__future__", "annotations", "asyncio", "datetime", "importlib", "time", "threading", "Thread", "unittest", "mock", "MagicMock", "patch", "pendulum", "pytest", "airflow", "DAG", "airflow", "config_templates", "airflow_local_settings", "airflow", "jobs", "job", "Job", "airflow", "jobs", "triggerer_job_runner", "TriggererJobRunner", "TriggerRunner", "setup_queue_listener", "airflow", "logging_config", "configure_logging", "airflow", "models", "DagModel", "DagRun", "TaskInstance", "Trigger", "airflow", "models", "baseoperator", "BaseOperator", "airflow", "operators", "empty", "EmptyOperator", "airflow", "operators", "python", "PythonOperator", "airflow", "triggers", "base", "TriggerEvent", "airflow", "triggers", "temporal", "DateTimeTrigger", "TimeDeltaTrigger", "airflow", "triggers", "testing", "FailureTrigger", "SuccessTrigger", "airflow", "utils", "timezone", "airflow", "utils", "log", "logging_mixin", "RedirectStdHandler", "airflow", "utils", "log", "trigger_handler", "LocalQueueHandler", "airflow", "utils", "session", "create_session", "airflow", "utils", "state", "State", "TaskInstanceState", "airflow", "utils", "types", "DagRunType", "tests", "core", "test_logging_config", "reset_logging", "tests", "test_utils", "db", "clear_db_dags", "clear_db_runs", "airflow", "jobs", "triggerer_job_runner", "logging"], "mod_var_ln": {}, "mod_var_occur": {}, "no_types_annot": {"D": 3, "I": 0, "U": 172}, "session_id": "82GXT6EaLlaMDiAf6OJWMz6oMPFoS8Wlq35fVoog7QE", "set": null, "tc": [false, null], "type_annot_cove": 0.02, "typed_seq": "", "untyped_seq": "", "variables": {}, "variables_p": {}}}