{"error": null, "response": {"classes": [{"cls_lc": [[31, 0], [101, 9]], "cls_var_ln": {"DAG_ID": [[32, 4], [32, 10]], "RUN_ID": [[34, 4], [34, 10]], "STATES": [[35, 4], [35, 10]], "TASK_ID": [[33, 4], [33, 11]]}, "cls_var_occur": {"DAG_ID": [], "RUN_ID": [], "STATES": [], "TASK_ID": []}, "funcs": [{"docstring": {"func": "Asserts that the TaskStateTrigger only goes off on or after a TaskInstance", "long_descr": "reaches an allowed state (i.e. SUCCESS).", "ret": null}, "fn_lc": [[38, 4], [79, 39]], "fn_var_ln": {"dag": [[43, 8], [43, 11]], "dag_run": [[44, 8], [44, 15]], "external_task": [[53, 8], [53, 21]], "instance": [[54, 8], [54, 16]], "state": [[73, 8], [73, 22]], "task": [[66, 8], [66, 12]], "trigger": [[58, 8], [58, 15]]}, "fn_var_occur": {"dag": [["dag", "DAG", "self", "DAG_ID", "start_date", "timezone", "datetime"], ["dag_run", "DagRun", "dag_id", "dag", "dag_id", "run_type", "execution_date", "timezone", "datetime", "run_id", "self", "RUN_ID"], ["external_task", "EmptyOperator", "task_id", "self", "TASK_ID", "dag", "dag"], ["trigger", "TaskStateTrigger", "dag_id", "dag", "dag_id", "task_id", "instance", "task_id", "states", "self", "STATES", "execution_dates", "timezone", "datetime", "poll_interval"]], "dag_run": [["dag_run", "DagRun", "dag_id", "dag", "dag_id", "run_type", "execution_date", "timezone", "datetime", "run_id", "self", "RUN_ID"], ["session", "add", "dag_run"]], "external_task": [["external_task", "EmptyOperator", "task_id", "self", "TASK_ID", "dag", "dag"], ["instance", "TaskInstance", "external_task", "timezone", "datetime"]], "instance": [["instance", "TaskInstance", "external_task", "timezone", "datetime"], ["session", "add", "instance"], ["trigger", "TaskStateTrigger", "dag_id", "dag", "dag_id", "task_id", "instance", "task_id", "states", "self", "STATES", "execution_dates", "timezone", "datetime", "poll_interval"], ["instance", "state", "TaskInstanceState", "SUCCESS"]], "state": [["instance", "state", "TaskInstanceState", "SUCCESS"]], "task": [["task", "asyncio", "create_task", "trigger", "run", "__anext__"], ["task", "done", "False"], ["task", "done", "True"]], "trigger": [["trigger", "TaskStateTrigger", "dag_id", "dag", "dag_id", "task_id", "instance", "task_id", "states", "self", "STATES", "execution_dates", "timezone", "datetime", "poll_interval"], ["task", "asyncio", "create_task", "trigger", "run", "__anext__"]]}, "name": "test_task_state_trigger", "params": {"self": "", "session": ""}, "params_descr": {"self": "", "session": ""}, "params_occur": {"self": [["dag", "DAG", "self", "DAG_ID", "start_date", "timezone", "datetime"], ["dag_run", "DagRun", "dag_id", "dag", "dag_id", "run_type", "execution_date", "timezone", "datetime", "run_id", "self", "RUN_ID"], ["external_task", "EmptyOperator", "task_id", "self", "TASK_ID", "dag", "dag"], ["trigger", "TaskStateTrigger", "dag_id", "dag", "dag_id", "task_id", "instance", "task_id", "states", "self", "STATES", "execution_dates", "timezone", "datetime", "poll_interval"]], "session": [["session", "add", "dag_run"], ["session", "commit"], ["session", "add", "instance"], ["session", "commit"], ["session", "commit"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "session": [["grouper.models.base.session.Session", 0.1084196505141713]]}, "q_name": "TestTaskStateTrigger.test_task_state_trigger", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "dag_run": "", "external_task": "", "instance": "", "state": "", "task": "", "trigger": ""}, "variables_p": {"dag": [["int", 0.4911895671901079], ["dict", 0.14949947703047284]], "dag_run": [["khetha.models.Task", 0.20037898215250338], ["magic.models.card.Card", 0.11863575449479154], ["int", 0.10477458428193377], ["str", 0.10425124044848871], ["bool", 0.1007556737566493], ["grpy.core.models.Grouping", 0.09354438566815643], ["alerta.models.alerAlert", 0.0930036885575792], ["list", 0.09152682104328576]], "external_task": [["List[str]", 0.08913636431722831]], "instance": [["str", 0.27430973866178965], ["geode.models.common.Address", 0.1345820720291095], ["list", 0.08732693236517057], ["Dict[str, str]", 0.08491165776675348]], "state": [["grpy.core.models.GroupingState", 0.2929065693635843], ["alerta.models.user.User", 0.18660478735256608], ["Dict[str, str]", 0.1019191404207408]], "task": [["Dict[str, int]", 0.10340161231233118], ["RuntimeError", 0.10156683378569566]], "trigger": [["Dict[str, str]", 0.19527532944533738], ["zerver.models.Realm", 0.09842254977553547], ["list", 0.07904278853526983], ["geode.models.common.Address", 0.06860646571597168]]}}, {"docstring": {"func": "Asserts that the TaskStateTrigger correctly serializes its arguments", "long_descr": "and classpath.", "ret": null}, "fn_lc": [[81, 4], [101, 9]], "fn_var_ln": {"classpath": [[93, 8], [93, 17]], "kwargs": [[93, 19], [93, 25]], "trigger": [[86, 8], [86, 15]]}, "fn_var_occur": {"classpath": [["classpath", "kwargs", "trigger", "serialize"]], "kwargs": [["classpath", "kwargs", "trigger", "serialize"], ["kwargs", "self", "DAG_ID", "self", "TASK_ID", "self", "STATES", "timezone", "datetime"]], "trigger": [["trigger", "TaskStateTrigger", "dag_id", "self", "DAG_ID", "task_id", "self", "TASK_ID", "states", "self", "STATES", "execution_dates", "timezone", "datetime", "poll_interval"], ["classpath", "kwargs", "trigger", "serialize"]]}, "name": "test_serialization", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["trigger", "TaskStateTrigger", "dag_id", "self", "DAG_ID", "task_id", "self", "TASK_ID", "states", "self", "STATES", "execution_dates", "timezone", "datetime", "poll_interval"], ["kwargs", "self", "DAG_ID", "self", "TASK_ID", "self", "STATES", "timezone", "datetime"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestTaskStateTrigger.test_serialization", "ret_exprs": [], "ret_type": "", "variables": {"classpath": "", "kwargs": "", "trigger": ""}, "variables_p": {"classpath": [["Set[str]", 0.4999999999750701], ["int", 0.49999999996228883], ["Dict[str, Union[int, str]]", 1.582796261262258e-11], ["List[str]", 1.3730011143514454e-11], ["str", 1.0971499556494418e-11], ["bool", 1.0865339793385232e-11]], "kwargs": [["Dict[str, Any]", 0.47872022788340374], ["Tuple[Tuple[str, Any]]", 0.12473592656374004], ["Dict[int, List[Any]]", 0.10841448775440245], ["Dict[str, List[Any]]", 0.10018958310482624], ["Dict[str, Tuple[Any, Any, Any]]", 0.09523303935913247], ["bool", 0.09270673533449515]], "trigger": [["pydynasync.models.Changes", 0.1140886521318251], ["Optional[\"Lecture\"]", 0.10286162947327264], ["tuple", 0.09940028269153689], ["Dict[str, str]", 0.095518280678118], ["list", 0.09511869742626952], ["Optional[dict]", 0.09396084760267284], ["dict", 0.08725765017514199]]}}], "name": "TestTaskStateTrigger", "q_name": "TestTaskStateTrigger", "variables": {"DAG_ID": "", "RUN_ID": "", "STATES": "", "TASK_ID": ""}, "variables_p": {"DAG_ID": [["Optional[str]", 0.09999999999999999], ["int", 0.09999999999999999], ["List[int]", 0.09999999999999999], ["services.ticketing.transfer.models.TicketID", 0.09999999999999999], ["Type[models.User]", 0.09999999999999999], ["shop.transfer.models.ShopID", 0.09999999999999999], ["Type[pipeline.netfile.models.AbstractSchedule]", 0.09999999999999999]], "RUN_ID": [["str", 0.4], ["int", 0.2]], "STATES": [["str", 0.29999999999999993], ["bool", 0.19999999999999996], ["Optional[\"StateResourceIdentifier\"]", 0.09999999999999998], ["Optional[str]", 0.09999999999999998], ["Type[demoboapp.models.Group]", 0.09999999999999998]], "TASK_ID": [["str", 0.4], ["Type[bot_app.models.Products]", 0.1], ["Type[str]", 0.1], ["Optional[str]", 0.1]]}}, {"cls_lc": [[104, 0], [162, 9]], "cls_var_ln": {"DAG_ID": [[105, 4], [105, 10]], "RUN_ID": [[106, 4], [106, 10]], "STATES": [[107, 4], [107, 10]]}, "cls_var_occur": {"DAG_ID": [], "RUN_ID": [], "STATES": []}, "funcs": [{"docstring": {"func": "Assert that the DagStateTrigger only goes off on or after a DagRun", "long_descr": "reaches an allowed state (i.e. SUCCESS).", "ret": null}, "fn_lc": [[110, 4], [145, 39]], "fn_var_ln": {"dag": [[115, 8], [115, 11]], "dag_run": [[116, 8], [116, 15]], "state": [[139, 8], [139, 21]], "task": [[132, 8], [132, 12]], "trigger": [[125, 8], [125, 15]]}, "fn_var_occur": {"dag": [["dag", "DAG", "self", "DAG_ID", "start_date", "timezone", "datetime"], ["dag_run", "DagRun", "dag_id", "dag", "dag_id", "run_type", "execution_date", "timezone", "datetime", "run_id", "self", "RUN_ID"], ["trigger", "DagStateTrigger", "dag_id", "dag", "dag_id", "states", "self", "STATES", "execution_dates", "timezone", "datetime", "poll_interval"]], "dag_run": [["dag_run", "DagRun", "dag_id", "dag", "dag_id", "run_type", "execution_date", "timezone", "datetime", "run_id", "self", "RUN_ID"], ["session", "add", "dag_run"], ["dag_run", "state", "DagRunState", "SUCCESS"]], "state": [["dag_run", "state", "DagRunState", "SUCCESS"]], "task": [["task", "asyncio", "create_task", "trigger", "run", "__anext__"], ["task", "done", "False"], ["task", "done", "True"]], "trigger": [["trigger", "DagStateTrigger", "dag_id", "dag", "dag_id", "states", "self", "STATES", "execution_dates", "timezone", "datetime", "poll_interval"], ["task", "asyncio", "create_task", "trigger", "run", "__anext__"]]}, "name": "test_dag_state_trigger", "params": {"self": "", "session": ""}, "params_descr": {"self": "", "session": ""}, "params_occur": {"self": [["dag", "DAG", "self", "DAG_ID", "start_date", "timezone", "datetime"], ["dag_run", "DagRun", "dag_id", "dag", "dag_id", "run_type", "execution_date", "timezone", "datetime", "run_id", "self", "RUN_ID"], ["trigger", "DagStateTrigger", "dag_id", "dag", "dag_id", "states", "self", "STATES", "execution_dates", "timezone", "datetime", "poll_interval"]], "session": [["session", "add", "dag_run"], ["session", "commit"], ["session", "commit"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "session": []}, "q_name": "TestDagStateTrigger.test_dag_state_trigger", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "dag_run": "", "state": "", "task": "", "trigger": ""}, "variables_p": {"dag": [["int", 0.4911895671901079], ["dict", 0.14949947703047284]], "dag_run": [["khetha.models.Task", 0.20037898215250338], ["magic.models.card.Card", 0.11863575449479154], ["int", 0.10477458428193377], ["str", 0.10425124044848871], ["bool", 0.1007556737566493], ["grpy.core.models.Grouping", 0.09354438566815643], ["alerta.models.alerAlert", 0.0930036885575792], ["list", 0.09152682104328576]], "state": [["int", 0.19451702400536947], ["Tuple[str, str, str, str, str, str, str, str, str, str, str, str, str]", 0.1045405913545307], ["Type[int]", 0.10122366090803724], ["Type[Dict[str, int]]", 0.10068074931123963], ["Tuple[Any, Any, Any]", 0.09238434418949325], ["str", 0.0846108804759619]], "task": [["Dict[str, int]", 0.10340161231233118], ["RuntimeError", 0.10156683378569566]], "trigger": [["str", 0.3674590179955216], ["Tuple[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any]", 0.07589471960921937], ["geode.models.common.Address", 0.07144103281928091]]}}, {"docstring": {"func": "Asserts that the DagStateTrigger correctly serializes its arguments and classpath.", "long_descr": null, "ret": null}, "fn_lc": [[147, 4], [162, 9]], "fn_var_ln": {"classpath": [[155, 8], [155, 17]], "kwargs": [[155, 19], [155, 25]], "trigger": [[149, 8], [149, 15]]}, "fn_var_occur": {"classpath": [["classpath", "kwargs", "trigger", "serialize"]], "kwargs": [["classpath", "kwargs", "trigger", "serialize"], ["kwargs", "self", "DAG_ID", "self", "STATES", "timezone", "datetime"]], "trigger": [["trigger", "DagStateTrigger", "dag_id", "self", "DAG_ID", "states", "self", "STATES", "execution_dates", "timezone", "datetime", "poll_interval"], ["classpath", "kwargs", "trigger", "serialize"]]}, "name": "test_serialization", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["trigger", "DagStateTrigger", "dag_id", "self", "DAG_ID", "states", "self", "STATES", "execution_dates", "timezone", "datetime", "poll_interval"], ["kwargs", "self", "DAG_ID", "self", "STATES", "timezone", "datetime"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagStateTrigger.test_serialization", "ret_exprs": [], "ret_type": "", "variables": {"classpath": "", "kwargs": "", "trigger": ""}, "variables_p": {"classpath": [["Set[str]", 0.4999999999750701], ["int", 0.49999999996228883], ["Dict[str, Union[int, str]]", 1.582796261262258e-11], ["List[str]", 1.3730011143514454e-11], ["str", 1.0971499556494418e-11], ["bool", 1.0865339793385232e-11]], "kwargs": [["dict", 0.30624128792467487], ["Dict[str, str]", 0.08938404358658561], ["Dict[Any, str]", 0.07385125132594966]], "trigger": [["str", 0.30697562061979666], ["int", 0.21753041612382987], ["byceps.services.user.transfer.models.User", 0.10135420669463345], ["Dict[str, Any]", 0.10117312836803745], ["backend.api.models.group.Group", 0.07829206179252879], ["Union[Literal, Literal]", 0.07828105388987693]]}}], "name": "TestDagStateTrigger", "q_name": "TestDagStateTrigger", "variables": {"DAG_ID": "", "RUN_ID": "", "STATES": ""}, "variables_p": {"DAG_ID": [["Optional[str]", 0.09999999999999999], ["int", 0.09999999999999999], ["List[int]", 0.09999999999999999], ["services.ticketing.transfer.models.TicketID", 0.09999999999999999], ["Type[models.User]", 0.09999999999999999], ["shop.transfer.models.ShopID", 0.09999999999999999], ["Type[pipeline.netfile.models.AbstractSchedule]", 0.09999999999999999]], "RUN_ID": [["str", 0.4], ["int", 0.2]], "STATES": [["str", 0.29999999999999993], ["bool", 0.19999999999999996], ["Optional[\"StateResourceIdentifier\"]", 0.09999999999999998], ["Optional[str]", 0.09999999999999998], ["Type[demoboapp.models.Group]", 0.09999999999999998]]}}], "funcs": [], "imports": ["__future__", "annotations", "asyncio", "pytest", "airflow", "DAG", "airflow", "models", "DagRun", "TaskInstance", "airflow", "operators", "empty", "EmptyOperator", "airflow", "triggers", "external_task", "DagStateTrigger", "TaskStateTrigger", "airflow", "utils", "timezone", "airflow", "utils", "state", "DagRunState", "TaskInstanceState"], "mod_var_ln": {}, "mod_var_occur": {}, "no_types_annot": {"D": 0, "I": 0, "U": 31}, "session_id": "c5Kb9ZtVdlKX_XYW-jjekCo-KAASVGfDGmmHuLBU374", "set": null, "tc": [false, null], "type_annot_cove": 0.0, "typed_seq": "", "untyped_seq": "", "variables": {}, "variables_p": {}}}