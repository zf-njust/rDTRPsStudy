{"error": null, "response": {"classes": [{"cls_lc": [[29, 0], [125, 60]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": "Make tmp folder and files that should be ignored. And set base path.", "long_descr": null, "ret": null}, "fn_lc": [[34, 4], [64, 9]], "fn_var_ln": {"files_content": [[46, 8], [46, 21]], "mock_plugins_folder": [[62, 8], [62, 32]], "plugin_folder_path": [[41, 8], [41, 31]], "test_dir": [[39, 8], [39, 21]], "test_file": [[40, 8], [40, 22]]}, "fn_var_occur": {"files_content": [], "mock_plugins_folder": [["self", "mock_plugins_folder", "patch", "object", "settings", "return_value", "self", "plugin_folder_path"]], "plugin_folder_path": [["self", "plugin_folder_path", "os", "path", "join", "self", "test_dir"], ["os", "mkdir", "self", "plugin_folder_path"], ["os", "mkdir", "os", "path", "join", "self", "plugin_folder_path"], ["os", "mkdir", "os", "path", "join", "self", "plugin_folder_path"], ["os", "mkdir", "os", "path", "join", "self", "plugin_folder_path"], ["open", "os", "path", "join", "self", "plugin_folder_path", "file_path", "f"], ["self", "mock_plugins_folder", "patch", "object", "settings", "return_value", "self", "plugin_folder_path"]], "test_dir": [["self", "test_dir", "tempfile", "mkdtemp", "prefix"], ["self", "test_file", "os", "path", "join", "self", "test_dir"], ["self", "plugin_folder_path", "os", "path", "join", "self", "test_dir"]], "test_file": [["self", "test_file", "os", "path", "join", "self", "test_dir"]]}, "name": "setup_method", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "test_dir", "tempfile", "mkdtemp", "prefix"], ["self", "test_file", "os", "path", "join", "self", "test_dir"], ["self", "plugin_folder_path", "os", "path", "join", "self", "test_dir"], ["os", "mkdir", "self", "plugin_folder_path"], ["os", "mkdir", "os", "path", "join", "self", "plugin_folder_path"], ["os", "mkdir", "os", "path", "join", "self", "plugin_folder_path"], ["os", "mkdir", "os", "path", "join", "self", "plugin_folder_path"], ["open", "os", "path", "join", "self", "plugin_folder_path", "file_path", "f"], ["self", "mock_plugins_folder", "patch", "object", "settings", "return_value", "self", "plugin_folder_path"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestIgnorePluginFile.setup_method", "ret_exprs": [], "ret_type": "", "variables": {"files_content": "", "mock_plugins_folder": "", "plugin_folder_path": "", "test_dir": "", "test_file": ""}, "variables_p": {"files_content": [["str", 0.4285714284612926], ["int", 0.14285714297974214], ["bytes", 0.14285714282043085], ["Type[str]", 0.14285714282043085], ["List[str]", 9.767277440590888e-11]], "mock_plugins_folder": [["str", 0.4018097209904538], ["List[Dict[str, Any]]", 0.1168007118018304], ["mock.Mock", 0.09158943207470416], ["List[List[str]]", 0.09015725838373984]], "plugin_folder_path": [["str", 1.0]], "test_dir": [["str", 0.8902568048062163]], "test_file": [["str", 1.0]]}}, {"docstring": {"func": "Delete tmp folder", "long_descr": null, "ret": null}, "fn_lc": [[66, 4], [70, 36]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "teardown_method", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["shutil", "rmtree", "self", "test_dir"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestIgnorePluginFile.teardown_method", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Test that the .airflowignore regexp works and whether the files are properly ignored.", "long_descr": null, "ret": null}, "fn_lc": [[72, 4], [98, 60]], "fn_var_ln": {"_": [[93, 12], [93, 13]], "detected_files": [[77, 8], [77, 22]], "file_ext": [[93, 15], [93, 23]], "ignore_list_file": [[89, 8], [89, 24]], "should_ignore_files": [[78, 8], [78, 27]], "should_not_ignore_files": [[85, 8], [85, 31]]}, "fn_var_occur": {"_": [["_", "file_ext", "os", "path", "splitext", "os", "path", "split", "file_path"]], "detected_files": [["detected_files", "set"], ["detected_files", "add", "os", "path", "basename", "file_path"], ["detected_files", "should_not_ignore_files"], ["detected_files", "should_ignore_files", "set"]], "file_ext": [["_", "file_ext", "os", "path", "splitext", "os", "path", "split", "file_path"]], "ignore_list_file": [["find_path_from_directory", "self", "plugin_folder_path", "ignore_list_file"]], "should_ignore_files": [["detected_files", "should_ignore_files", "set"]], "should_not_ignore_files": [["detected_files", "should_not_ignore_files"]]}, "name": "test_find_not_should_ignore_path_regexp", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["find_path_from_directory", "self", "plugin_folder_path", "ignore_list_file"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestIgnorePluginFile.test_find_not_should_ignore_path_regexp", "ret_exprs": [], "ret_type": "", "variables": {"_": "", "detected_files": "", "file_ext": "", "ignore_list_file": "", "should_ignore_files": "", "should_not_ignore_files": ""}, "variables_p": {"_": [["str", 1.0]], "detected_files": [["dict", 0.22583796692812286], ["str", 0.15669606809603215], ["Dict[str, str]", 0.12468402014997274], ["List[str]", 0.09170162356048847]], "file_ext": [["str", 0.8340674958626236], ["Tuple[Literal, Literal, Literal]", 0.0830173265940572], ["Callable(open)[..., Any][[[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal], default), Named(buffering, int, default), Named(encoding, Optional[str], default), Named(errors, Optional[str], default), Named(newline, Optional[str], default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.TextIOWrapper][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, Literal), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.FileIO][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, Union[Literal[-1], Literal], default), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.BufferedRandom][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, Union[Literal[-1], Literal], default), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.BufferedWriter][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, Union[Literal[-1], Literal], default), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.BufferedReader][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, int), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], BinaryIO][Any, Any]]", 0.082915177543319]], "ignore_list_file": [["str", 0.7306590846587634], ["Callable(open)[..., Any][[[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal], default), Named(buffering, int, default), Named(encoding, Optional[str], default), Named(errors, Optional[str], default), Named(newline, Optional[str], default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.TextIOWrapper][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, Literal), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.FileIO][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, Union[Literal[-1], Literal], default), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.BufferedRandom][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, Union[Literal[-1], Literal], default), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.BufferedWriter][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, Union[Literal[-1], Literal], default), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.BufferedReader][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, int), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], BinaryIO][Any, Any]]", 0.09491113796766981], ["List[Tuple[Any, str]]", 0.09005562541101772], ["List[Tuple[float, float]]", 0.08437415196254926]], "should_ignore_files": [["str", 0.7211864142895174], ["list", 0.15639245563008872]], "should_not_ignore_files": [["List[str]", 0.34489593438568217], ["str", 0.11163266941491416]]}}, {"docstring": {"func": "Test that the .airflowignore glob syntax works and whether the files are properly ignored.", "long_descr": null, "ret": null}, "fn_lc": [[100, 4], [125, 60]], "fn_var_ln": {"_": [[120, 12], [120, 13]], "detected_files": [[105, 8], [105, 22]], "file_ext": [[120, 15], [120, 23]], "ignore_list_file": [[116, 8], [116, 24]], "should_ignore_files": [[106, 8], [106, 27]], "should_not_ignore_files": [[112, 8], [112, 31]]}, "fn_var_occur": {"_": [["_", "file_ext", "os", "path", "splitext", "os", "path", "split", "file_path"]], "detected_files": [["detected_files", "set"], ["detected_files", "add", "os", "path", "basename", "file_path"], ["detected_files", "should_not_ignore_files"], ["detected_files", "should_ignore_files", "set"]], "file_ext": [["_", "file_ext", "os", "path", "splitext", "os", "path", "split", "file_path"]], "ignore_list_file": [["find_path_from_directory", "self", "plugin_folder_path", "ignore_list_file"]], "should_ignore_files": [["detected_files", "should_ignore_files", "set"]], "should_not_ignore_files": [["detected_files", "should_not_ignore_files"]]}, "name": "test_find_not_should_ignore_path_glob", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["find_path_from_directory", "self", "plugin_folder_path", "ignore_list_file"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestIgnorePluginFile.test_find_not_should_ignore_path_glob", "ret_exprs": [], "ret_type": "", "variables": {"_": "", "detected_files": "", "file_ext": "", "ignore_list_file": "", "should_ignore_files": "", "should_not_ignore_files": ""}, "variables_p": {"_": [["str", 1.0]], "detected_files": [["dict", 0.22583796692812286], ["str", 0.15669606809603215], ["Dict[str, str]", 0.12468402014997274], ["List[str]", 0.09170162356048847]], "file_ext": [["str", 0.8340674958626236], ["Tuple[Literal, Literal, Literal]", 0.0830173265940572], ["Callable(open)[..., Any][[[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal], default), Named(buffering, int, default), Named(encoding, Optional[str], default), Named(errors, Optional[str], default), Named(newline, Optional[str], default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.TextIOWrapper][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, Literal), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.FileIO][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, Union[Literal[-1], Literal], default), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.BufferedRandom][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, Union[Literal[-1], Literal], default), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.BufferedWriter][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, Union[Literal[-1], Literal], default), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.BufferedReader][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, int), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], BinaryIO][Any, Any]]", 0.082915177543319]], "ignore_list_file": [["str", 0.7306590846587634], ["Callable(open)[..., Any][[[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal], default), Named(buffering, int, default), Named(encoding, Optional[str], default), Named(errors, Optional[str], default), Named(newline, Optional[str], default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.TextIOWrapper][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, Literal), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.FileIO][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, Union[Literal[-1], Literal], default), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.BufferedRandom][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, Union[Literal[-1], Literal], default), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.BufferedWriter][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, Union[Literal[-1], Literal], default), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.BufferedReader][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, int), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], BinaryIO][Any, Any]]", 0.09491113796766981], ["List[Tuple[Any, str]]", 0.09005562541101772], ["List[Tuple[float, float]]", 0.08437415196254926]], "should_ignore_files": [["str", 0.7211864142895174], ["list", 0.15639245563008872]], "should_not_ignore_files": [["List[str]", 0.34489593438568217], ["str", 0.11163266941491416]]}}], "name": "TestIgnorePluginFile", "q_name": "TestIgnorePluginFile", "variables": {}, "variables_p": {}}], "funcs": [], "imports": ["__future__", "annotations", "os", "shutil", "tempfile", "unittest", "mock", "patch", "airflow", "settings", "airflow", "utils", "file", "find_path_from_directory"], "mod_var_ln": {}, "mod_var_occur": {}, "no_types_annot": {"D": 0, "I": 0, "U": 21}, "session_id": "nMkN2nPuV5ZhTdwH4SSW-f9OUTOdT3Y8sZSzDHBi3to", "set": null, "tc": [false, null], "type_annot_cove": 0.0, "typed_seq": "", "untyped_seq": "", "variables": {}, "variables_p": {}}}