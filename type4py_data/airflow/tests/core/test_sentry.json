{"error": null, "response": {"classes": [{"cls_lc": [[73, 0], [74, 8]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [], "name": "CustomTransport", "q_name": "CustomTransport", "variables": {}, "variables_p": {}}, {"cls_lc": [[77, 0], [188, 39]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[79, 4], [92, 36]], "fn_var_ln": {"dr": [[84, 8], [84, 10]], "state": [[86, 8], [86, 16]], "task": [[87, 8], [87, 15]], "ti": [[85, 8], [85, 10]]}, "fn_var_occur": {"dr": [["dr", "dag_maker", "create_dagrun", "data_interval", "DATA_INTERVAL", "execution_date", "EXECUTION_DATE"], ["ti", "dr", "task_instances"]], "state": [["ti", "state", "STATE"]], "task": [["task", "PythonOperator", "task_id", "TASK_ID", "python_callable", "int"], ["ti", "task", "task"]], "ti": [["ti", "dr", "task_instances"], ["ti", "state", "STATE"], ["ti", "task", "task"]]}, "name": "task_instance", "params": {"dag_maker": "", "self": ""}, "params_descr": {"dag_maker": "", "self": ""}, "params_occur": {"dag_maker": [["dag_maker", "DAG_ID", "schedule", "SCHEDULE_INTERVAL"], ["dr", "dag_maker", "create_dagrun", "data_interval", "DATA_INTERVAL", "execution_date", "EXECUTION_DATE"], ["dag_maker", "session", "flush"], ["dag_maker", "session", "rollback"]], "self": []}, "params_p": {"args": [], "dag_maker": [["raiden.transfer.state.NettingChannelState", 0.21491232068904242], ["List[recidiviz.persistence.database.schema.state.schema.StatePerson]", 0.15522505184768112], ["Dict[str, Any]", 0.08559810448121595]], "kwargs": [], "self": []}, "q_name": "TestSentryHook.task_instance", "ret_exprs": [], "ret_type": "", "variables": {"dr": "", "state": "", "task": "", "ti": ""}, "variables_p": {"dr": [["datetime.datetime.datetime", 0.21027986613969177], ["datetime.datetime.timedelta", 0.2028645197040072], ["list", 0.12188650787347086], ["Union[Literal, Literal]", 0.10053768077350743], ["Tuple[int, int]", 0.09413691419749719], ["int", 0.09059282089897104], ["Type[Dict[str, Any]]", 0.08322387814965525]], "state": [["str", 0.7999999999999999], ["Dict[str, str]", 0.1]], "task": [["int", 0.31482186922210376], ["List[List[int]]", 0.1709602754681912], ["Dict[str, str]", 0.09337744242002687]], "ti": [["int", 0.4843501353976447], ["float", 0.2973575862154031]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[95, 4], [97, 28]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "sentry_sdk", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSentryHook.sentry_sdk", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[100, 4], [113, 32]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "sentry", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSentryHook.sentry", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[116, 4], [129, 32]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "sentry_custom_transport", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSentryHook.sentry_custom_transport", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Minimum sentry config", "long_descr": null, "ret": null}, "fn_lc": [[132, 4], [142, 32]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "sentry_minimum", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSentryHook.sentry_minimum", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Test adding tags.", "long_descr": null, "ret": null}, "fn_lc": [[144, 4], [151, 47]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_add_tagging", "params": {"self": "", "sentry": "", "task_instance": ""}, "params_descr": {"self": "", "sentry": "", "task_instance": ""}, "params_occur": {"self": [], "sentry": [["sentry", "add_tagging", "task_instance", "task_instance"]], "task_instance": [["sentry", "add_tagging", "task_instance", "task_instance"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "sentry": [["tests.test_util.aiohttp.AiohttpClientMocker", 0.3883755632239856]], "task_instance": [["tests.test_util.aiohttp.AiohttpClientMocker", 0.3883755632239856]]}, "q_name": "TestSentryHook.test_add_tagging", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Test adding breadcrumbs.", "long_descr": null, "ret": null}, "fn_lc": [[154, 4], [163, 38]], "fn_var_ln": {"test_crumb": [[162, 12], [162, 22]]}, "fn_var_occur": {"test_crumb": [["test_crumb", "scope", "_breadcrumbs", "pop"], ["CRUMB", "test_crumb"]]}, "name": "test_add_breadcrumbs", "params": {"self": "", "sentry": "", "task_instance": ""}, "params_descr": {"self": "", "sentry": "", "task_instance": ""}, "params_occur": {"self": [], "sentry": [["sentry", "add_tagging", "task_instance", "task_instance"], ["sentry", "add_breadcrumbs", "task_instance", "task_instance"]], "task_instance": [["sentry", "add_tagging", "task_instance", "task_instance"], ["sentry", "add_breadcrumbs", "task_instance", "task_instance"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "sentry": [["tests.e2e.Helper", 0.09323007123257201]], "task_instance": [["tests.e2e.Helper", 0.09323007123257201]]}, "q_name": "TestSentryHook.test_add_breadcrumbs", "ret_exprs": [], "ret_type": "", "variables": {"test_crumb": ""}, "variables_p": {"test_crumb": [["str", 0.2944919857187293], ["List[str]", 0.2831657967385668], ["Dict[str, Any]", 0.10705529304281027], ["Iterator[str]", 0.09120345205505145], ["Dict[str, Dict[str, str]]", 0.07528618629167316], ["Dict[str, Union[Any, Any, Any]]", 0.07440956425386752], ["List[bool]", 0.07438772189930169]]}}, {"docstring": {"func": "Test before send callable gets passed to the sentry SDK.", "long_descr": null, "ret": null}, "fn_lc": [[165, 4], [172, 33]], "fn_var_ln": {"called": [[170, 8], [170, 14]], "expected": [[171, 8], [171, 16]]}, "fn_var_occur": {"called": [["called", "sentry_sdk", "call_args", "kwargs"], ["called", "expected"]], "expected": [["expected", "import_string"], ["called", "expected"]]}, "name": "test_before_send", "params": {"self": "", "sentry": "", "sentry_sdk": ""}, "params_descr": {"self": "", "sentry": "", "sentry_sdk": ""}, "params_occur": {"self": [], "sentry": [], "sentry_sdk": [["called", "sentry_sdk", "call_args", "kwargs"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "sentry": [["tests.basilisp.helpers.CompileFn", 0.2], ["str", 0.2], ["tests.async_mock.MagicMock", 0.1], ["tests.async_mock.Mock", 0.1], ["Mapping[str, Any]", 0.1]], "sentry_sdk": [["str", 0.20639462010175874], ["int", 0.10319731005087937], ["set", 0.09152358608059812]]}, "q_name": "TestSentryHook.test_before_send", "ret_exprs": [], "ret_type": "", "variables": {"called": "", "expected": ""}, "variables_p": {"called": [["list", 0.7911161315225489], ["List[int]", 0.12118230536992694]], "expected": [["List[bool]", 0.1160926509000446], ["Pattern[str]", 0.10796687467141723], ["list", 0.10719136614936259], ["List[str]", 0.09911561707011095], ["List[int]", 0.09911561707011095], ["Tuple[Tuple[Any, Any, Any, Any, Any, Any], Tuple[Any], Tuple[Any], Tuple[Any, Any, Any], Tuple[Any], Tuple[Any], Tuple[Any, Any, Any], Tuple[Any], Tuple[Any], Tuple[Any, Any, Any]]", 0.09911561707011095], ["Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]", 0.0967365587635233], ["Dict[str, List[int]]", 0.0947061773148165], ["MutableMapping[str, Any]", 0.09021307495640728]]}}, {"docstring": {"func": "Test transport gets passed to the sentry SDK", "long_descr": null, "ret": null}, "fn_lc": [[174, 4], [181, 33]], "fn_var_ln": {"called": [[179, 8], [179, 14]], "expected": [[180, 8], [180, 16]]}, "fn_var_occur": {"called": [["called", "sentry_sdk", "call_args", "kwargs"], ["called", "expected"]], "expected": [["expected", "import_string"], ["called", "expected"]]}, "name": "test_custom_transport", "params": {"self": "", "sentry_custom_transport": "", "sentry_sdk": ""}, "params_descr": {"self": "", "sentry_custom_transport": "", "sentry_sdk": ""}, "params_occur": {"self": [], "sentry_custom_transport": [], "sentry_sdk": [["called", "sentry_sdk", "call_args", "kwargs"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "sentry_custom_transport": [["tests.basilisp.helpers.CompileFn", 0.2], ["str", 0.2], ["tests.async_mock.MagicMock", 0.1], ["tests.async_mock.Mock", 0.1], ["Mapping[str, Any]", 0.1]], "sentry_sdk": [["str", 0.20639462010175874], ["int", 0.10319731005087937], ["set", 0.09152358608059812]]}, "q_name": "TestSentryHook.test_custom_transport", "ret_exprs": [], "ret_type": "", "variables": {"called": "", "expected": ""}, "variables_p": {"called": [["list", 0.7911161315225489], ["List[int]", 0.12118230536992694]], "expected": [["List[bool]", 0.1160926509000446], ["Pattern[str]", 0.10796687467141723], ["list", 0.10719136614936259], ["List[str]", 0.09911561707011095], ["List[int]", 0.09911561707011095], ["Tuple[Tuple[Any, Any, Any, Any, Any, Any], Tuple[Any], Tuple[Any], Tuple[Any, Any, Any], Tuple[Any], Tuple[Any], Tuple[Any, Any, Any], Tuple[Any], Tuple[Any], Tuple[Any, Any, Any]]", 0.09911561707011095], ["Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]", 0.0967365587635233], ["Dict[str, List[int]]", 0.0947061773148165], ["MutableMapping[str, Any]", 0.09021307495640728]]}}, {"docstring": {"func": "Test before_send doesn't raise an exception when not set", "long_descr": null, "ret": null}, "fn_lc": [[183, 4], [188, 39]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_minimum_config", "params": {"self": "", "sentry_minimum": "", "sentry_sdk": ""}, "params_descr": {"self": "", "sentry_minimum": "", "sentry_sdk": ""}, "params_occur": {"self": [], "sentry_minimum": [], "sentry_sdk": [["sentry_sdk", "assert_called_once"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "sentry_minimum": [["tests.async_mock.Mock", 0.22952801573267917], ["str", 0.13060958956191232], ["tests.basilisp.helpers.CompileFn", 0.12747791230316965]], "sentry_sdk": []}, "q_name": "TestSentryHook.test_minimum_config", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestSentryHook", "q_name": "TestSentryHook", "variables": {}, "variables_p": {}}], "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[69, 0], [70, 8]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "before_send", "params": {"_": ""}, "params_descr": {"_": ""}, "params_occur": {"_": []}, "params_p": {"_": [["int", 0.19999999999999998], ["str", 0.19999999999999998], ["Iterable['Context']", 0.09999999999999999], ["dict", 0.09999999999999999], ["bool", 0.09999999999999999]], "args": [], "kwargs": []}, "q_name": "before_send", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "imports": ["__future__", "annotations", "datetime", "importlib", "unittest", "mock", "pytest", "time_machine", "sentry_sdk", "configure_scope", "sentry_sdk", "transport", "Transport", "airflow", "operators", "python", "PythonOperator", "airflow", "utils", "timezone", "airflow", "utils", "module_loading", "import_string", "airflow", "utils", "state", "State", "tests", "test_utils", "config", "conf_vars", "airflow", "sentry", "airflow", "sentry", "airflow", "sentry"], "mod_var_ln": {"CRUMB": [[60, 0], [60, 5]], "CRUMB_DATE": [[59, 0], [59, 10]], "DAG_ID": [[38, 0], [38, 6]], "DATA_INTERVAL": [[37, 0], [37, 13]], "EXECUTION_DATE": [[35, 0], [35, 14]], "OPERATOR": [[40, 0], [40, 8]], "SCHEDULE_INTERVAL": [[36, 0], [36, 17]], "STATE": [[42, 0], [42, 5]], "TASK_DATA": [[52, 0], [52, 9]], "TASK_ID": [[39, 0], [39, 7]], "TEST_SCOPE": [[43, 0], [43, 10]], "TRY_NUMBER": [[41, 0], [41, 10]]}, "mod_var_occur": {"CRUMB": [["CRUMB", "test_crumb"]], "CRUMB_DATE": [["CRUMB", "CRUMB_DATE", "TASK_DATA"]], "DAG_ID": [["TEST_SCOPE", "DAG_ID", "TASK_ID", "DATA_INTERVAL", "DATA_INTERVAL", "EXECUTION_DATE", "OPERATOR", "TRY_NUMBER"], ["dag_maker", "DAG_ID", "schedule", "SCHEDULE_INTERVAL"]], "DATA_INTERVAL": [["TEST_SCOPE", "DAG_ID", "TASK_ID", "DATA_INTERVAL", "DATA_INTERVAL", "EXECUTION_DATE", "OPERATOR", "TRY_NUMBER"], ["dr", "dag_maker", "create_dagrun", "data_interval", "DATA_INTERVAL", "execution_date", "EXECUTION_DATE"]], "EXECUTION_DATE": [["DATA_INTERVAL", "EXECUTION_DATE", "EXECUTION_DATE", "SCHEDULE_INTERVAL"], ["TEST_SCOPE", "DAG_ID", "TASK_ID", "DATA_INTERVAL", "DATA_INTERVAL", "EXECUTION_DATE", "OPERATOR", "TRY_NUMBER"], ["dr", "dag_maker", "create_dagrun", "data_interval", "DATA_INTERVAL", "execution_date", "EXECUTION_DATE"]], "OPERATOR": [["TEST_SCOPE", "DAG_ID", "TASK_ID", "DATA_INTERVAL", "DATA_INTERVAL", "EXECUTION_DATE", "OPERATOR", "TRY_NUMBER"], ["TASK_DATA", "TASK_ID", "STATE", "OPERATOR", "None"]], "SCHEDULE_INTERVAL": [["DATA_INTERVAL", "EXECUTION_DATE", "EXECUTION_DATE", "SCHEDULE_INTERVAL"], ["dag_maker", "DAG_ID", "schedule", "SCHEDULE_INTERVAL"]], "STATE": [["TASK_DATA", "TASK_ID", "STATE", "OPERATOR", "None"], ["ti", "state", "STATE"]], "TASK_DATA": [["CRUMB", "CRUMB_DATE", "TASK_DATA"]], "TASK_ID": [["TEST_SCOPE", "DAG_ID", "TASK_ID", "DATA_INTERVAL", "DATA_INTERVAL", "EXECUTION_DATE", "OPERATOR", "TRY_NUMBER"], ["TASK_DATA", "TASK_ID", "STATE", "OPERATOR", "None"], ["task", "PythonOperator", "task_id", "TASK_ID", "python_callable", "int"]], "TEST_SCOPE": [["TEST_SCOPE", "key", "value"]], "TRY_NUMBER": [["TEST_SCOPE", "DAG_ID", "TASK_ID", "DATA_INTERVAL", "DATA_INTERVAL", "EXECUTION_DATE", "OPERATOR", "TRY_NUMBER"]]}, "no_types_annot": {"D": 0, "I": 0, "U": 44}, "session_id": "eEhY8RlFteHMItNv85yTITXLhgxxQVcDSxGw8iD4BQs", "set": null, "tc": [false, null], "type_annot_cove": 0.0, "typed_seq": "", "untyped_seq": "", "variables": {"CRUMB": "", "CRUMB_DATE": "", "DAG_ID": "", "DATA_INTERVAL": "", "EXECUTION_DATE": "", "OPERATOR": "", "SCHEDULE_INTERVAL": "", "STATE": "", "TASK_DATA": "", "TASK_ID": "", "TEST_SCOPE": "", "TRY_NUMBER": ""}, "variables_p": {"CRUMB": [["list", 8.147808049672547e-12], ["Union[Literal, str]", 5.627864846861835e-12], ["dict", 4.77209357021504e-12], ["int", 4.4508348818472164e-12], ["Dict[str, List[str]]", 4.0455574454897405e-12]], "CRUMB_DATE": [["str", 0.9109188192254782], ["Dict[str, int]", 0.08908118077452194]], "DAG_ID": [["str", 0.25782951844750934], ["int", 0.0787277686309063]], "DATA_INTERVAL": [["trakcore.config.TraktCredentials", 0.13972160421666174], ["str", 0.12393643171267245], ["List[str]", 0.10313399989017522], ["Dict[str, Any]", 0.10183889012145914], ["dict", 0.08252818802206245]], "EXECUTION_DATE": [["str", 0.2733501813348047], ["datetime.timedelta", 0.2286954579522731], ["int", 0.2280172351807596], ["Optional[datetime.tzinfo]", 0.10140167164668598], ["Optional[int]", 0.07149434046036986]], "OPERATOR": [["int", 0.2617077071349044], ["str", 0.1402661507529681], ["tuple", 0.10353677370147124], ["Dict[str, Any]", 0.09240595948901624], ["list", 0.08922483055664253]], "SCHEDULE_INTERVAL": [["str", 0.45418498669826274], ["dict", 0.2195637804274843], ["Dict[str, Any]", 0.14321725233810284], ["int", 0.10040699113836268]], "STATE": [["Dict[str, str]", 0.3982228690736882], ["Dict[str, Any]", 0.31015078376818395], ["str", 0.1953168270956906], ["int", 0.09630952006243722]], "TASK_DATA": [["str", 0.9999999999999999]], "TASK_ID": [["str", 0.30548988654236947], ["int", 0.27790794161363574], ["Dict[str, int]", 0.0974385447355915]], "TEST_SCOPE": [["Set[str]", 0.4756037352737448], ["str", 0.23706850325263717], ["List[str]", 0.08110209288134028], ["Dict[str, dict]", 0.06924728234620967], ["Dict[Any, Union[Any, Any]]", 0.06924728234620967]], "TRY_NUMBER": [["Dict[str, str]", 0.11340056305232983], ["list", 0.1102910791594416], ["tuple", 0.10970097097478496], ["dict", 0.10344244113073661], ["str", 0.09190654972357061], ["Dict[str, Callable]", 0.09110837598654613], ["Dict[str, Union[Any, Any, str]]", 0.09046184686585368]]}}}