{"error": null, "response": {"classes": [{"cls_lc": [[506, 4], [681, 50]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[509, 8], [513, 93]], "fn_var_ln": {"dagbag": [[513, 12], [513, 23]]}, "fn_var_occur": {"dagbag": [["self", "dagbag", "DagBag", "os", "devnull", "include_examples", "False", "read_dags_from_db", "False"]]}, "name": "__init__", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "dagbag", "DagBag", "os", "devnull", "include_examples", "False", "read_dags_from_db", "False"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "dag_maker.<locals>.DagFactory.__init__", "ret_exprs": [], "ret_type": "", "variables": {"dagbag": ""}, "variables_p": {"dagbag": [["int", 0.30429794856426273], ["float", 0.21760208517403118], ["str", 0.09633702684070836]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[515, 8], [519, 27]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "__enter__", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "dag", "__enter__"], ["self", "want_serialized"], ["lazy_object_proxy", "Proxy", "self", "_serialized_dag"], ["self", "dag"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "dag_maker.<locals>.DagFactory.__enter__", "ret_exprs": ["return lazy_object_proxy.Proxy(self._serialized_dag)", "return self.dag"], "ret_type": "", "ret_type_p": [["int", 0.30000000000000004], ["Callable", 0.2], ["models.Question", 0.1], ["str", 0.1]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[521, 8], [522, 44]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "_serialized_dag", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "serialized_model", "dag"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "dag_maker.<locals>.DagFactory._serialized_dag", "ret_exprs": ["return self.serialized_model.dag"], "ret_type": "", "ret_type_p": [["Optional[str]", 3.313661155136653e-11], ["int", 2.0508878210411594e-11]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[524, 8], [531, 23]], "fn_var_ln": {"data": [[526, 16], [526, 20]]}, "fn_var_occur": {"data": [["data", "self", "serialized_model", "data"], ["isinstance", "data", "str"], ["json", "loads", "data"]]}, "name": "get_serialized_data", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["data", "self", "serialized_model", "data"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "dag_maker.<locals>.DagFactory.get_serialized_data", "ret_exprs": ["return json.loads(data)", "return data"], "ret_type": "", "ret_type_p": [["dict", 0.19381931040742056], ["List[str]", 0.10312957553711666], ["saucerbogroupme.models.Bot", 0.10148484242579926], ["Mapping[str, Any]", 0.09222776469204429]], "variables": {"data": ""}, "variables_p": {"data": [["dict", 0.6105216919406853], ["Dict[str, object]", 0.21225212738646573], ["Dict[str, Union[int, str]]", 0.09317730232976483], ["Dict[int, List[str]]", 0.0840488783430841]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[533, 8], [555, 55]], "fn_var_ln": {"dag": [[537, 12], [537, 15]], "dag_model": [[544, 12], [544, 26]], "serialized_dag": [[551, 16], [551, 30]], "serialized_model": [[547, 16], [547, 37]]}, "fn_var_occur": {"dag": [["dag", "self", "dag"], ["dag", "__exit__", "type", "value", "traceback"], ["dag", "clear", "session", "self", "session"], ["dag", "sync_to_db", "processor_subdir", "self", "processor_subdir", "session", "self", "session"], ["self", "dag_model", "self", "session", "get", "DagModel", "dag", "dag_id"], ["self", "serialized_model", "SerializedDagModel", "dag", "processor_subdir", "self", "dag_model", "processor_subdir"], ["self", "dagbag", "bag_dag", "self", "dag", "self", "dag"]], "dag_model": [["self", "dag_model", "self", "session", "get", "DagModel", "dag", "dag_id"], ["self", "serialized_model", "SerializedDagModel", "dag", "processor_subdir", "self", "dag_model", "processor_subdir"]], "serialized_dag": [["airflow", "models", "serialized_dag", "SerializedDagModel"], ["serialized_dag", "self", "_serialized_dag"], ["self", "dagbag", "bag_dag", "serialized_dag", "root_dag", "serialized_dag"]], "serialized_model": [["self", "serialized_model", "SerializedDagModel", "dag", "processor_subdir", "self", "dag_model", "processor_subdir"], ["self", "session", "merge", "self", "serialized_model"]]}, "name": "__exit__", "params": {"self": "", "traceback": "", "type": "", "value": ""}, "params_descr": {"self": "", "traceback": "", "type": "", "value": ""}, "params_occur": {"self": [["dag", "self", "dag"], ["dag", "clear", "session", "self", "session"], ["dag", "sync_to_db", "processor_subdir", "self", "processor_subdir", "session", "self", "session"], ["self", "dag_model", "self", "session", "get", "DagModel", "dag", "dag_id"], ["self", "want_serialized"], ["self", "serialized_model", "SerializedDagModel", "dag", "processor_subdir", "self", "dag_model", "processor_subdir"], ["self", "session", "merge", "self", "serialized_model"], ["serialized_dag", "self", "_serialized_dag"], ["self", "dagbag", "bag_dag", "serialized_dag", "root_dag", "serialized_dag"], ["self", "session", "flush"], ["self", "dagbag", "bag_dag", "self", "dag", "self", "dag"]], "traceback": [["dag", "__exit__", "type", "value", "traceback"]], "type": [["dag", "__exit__", "type", "value", "traceback"], ["type", "None"]], "value": [["dag", "__exit__", "type", "value", "traceback"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "traceback": [["Type[BaseException]", 0.20650968123530866], ["BaseException", 0.20650968123530866]], "type": [["Optional[mypy.types.Type]", 0.18401478696318763], ["Type", 0.09781428898305881]], "value": [["Type[BaseException]", 0.20650968123530866], ["BaseException", 0.20650968123530866]]}, "q_name": "dag_maker.<locals>.DagFactory.__exit__", "ret_exprs": ["return"], "ret_type": "", "ret_type_p": [["Union[tuple, list]", 0.12326783261663934], ["List[int]", 0.09124591253820835], ["Dict[str, Any]", 0.08769568774684897], ["str", 0.08682447752895113]], "variables": {"dag": "", "dag_model": "", "serialized_dag": "", "serialized_model": ""}, "variables_p": {"dag": [["Optional[types.TracebackType]", 0.25663726976050216], ["float", 0.10773623030287935], ["int", 0.08316637614342301]], "dag_model": [["str", 1.0000000000000002]], "serialized_dag": [["buza.models.Question", 0.13878442930983398], ["jinete.models.routes.Route", 0.08314586352684912], ["list", 0.08056365050571768], ["allennlp.models.archival.Archive", 0.07591564344867761], ["salon.models.StylisAvailableWeekDay", 0.07380680677212678], ["jinete.models.vehicles.Fleet", 0.0737863058235847]], "serialized_model": [["str", 1.0]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[557, 8], [592, 31]], "fn_var_ln": {"dag": [[562, 12], [562, 15]], "dag_run": [[589, 12], [589, 24]], "data_interval": [[586, 20], [586, 33]], "kwargs": [[563, 12], [563, 18]], "logical_date": [[582, 16], [582, 28]]}, "fn_var_occur": {"dag": [["dag", "self", "dag"], ["kwargs", "dag", "next_dagrun_info", "None", "logical_date"], ["data_interval", "dag", "timetable", "infer_manual_data_interval", "run_after", "logical_date"], ["data_interval", "dag", "infer_automated_data_interval", "logical_date"], ["self", "dag_run", "dag", "create_dagrun", "kwargs"], ["ti", "refresh_from_task", "dag", "get_task", "ti", "task_id"]], "dag_run": [["self", "dag_run", "dag", "create_dagrun", "kwargs"], ["self", "dag_run", "task_instances"], ["self", "dag_run"]], "data_interval": [["data_interval", "dag", "timetable", "infer_manual_data_interval", "run_after", "logical_date"], ["data_interval", "dag", "infer_automated_data_interval", "logical_date"], ["kwargs", "data_interval"]], "kwargs": [["kwargs", "State", "RUNNING", "self", "start_date", "self", "session", "kwargs"], ["kwargs", "kwargs"], ["kwargs", "DagRunType", "from_run_id", "kwargs"], ["kwargs", "get", "None"], ["kwargs", "DagRunType", "MANUAL"], ["kwargs", "self", "start_date"], ["kwargs", "dag", "next_dagrun_info", "None", "logical_date"], ["logical_date", "timezone", "coerce_datetime", "kwargs"], ["kwargs", "DagRunType", "MANUAL"], ["kwargs", "data_interval"], ["self", "dag_run", "dag", "create_dagrun", "kwargs"]], "logical_date": [["kwargs", "dag", "next_dagrun_info", "None", "logical_date"], ["logical_date", "timezone", "coerce_datetime", "kwargs"], ["data_interval", "dag", "timetable", "infer_manual_data_interval", "run_after", "logical_date"], ["data_interval", "dag", "infer_automated_data_interval", "logical_date"]]}, "name": "create_dagrun", "params": {"kwargs": "", "self": ""}, "params_descr": {"kwargs": "", "self": ""}, "params_occur": {"kwargs": [["kwargs", "State", "RUNNING", "self", "start_date", "self", "session", "kwargs"], ["kwargs", "kwargs"], ["kwargs", "DagRunType", "from_run_id", "kwargs"], ["kwargs", "get", "None"], ["kwargs", "DagRunType", "MANUAL"], ["kwargs", "self", "start_date"], ["kwargs", "dag", "next_dagrun_info", "None", "logical_date"], ["logical_date", "timezone", "coerce_datetime", "kwargs"], ["kwargs", "DagRunType", "MANUAL"], ["kwargs", "data_interval"], ["self", "dag_run", "dag", "create_dagrun", "kwargs"]], "self": [["dag", "self", "dag"], ["kwargs", "State", "RUNNING", "self", "start_date", "self", "session", "kwargs"], ["kwargs", "self", "start_date"], ["self", "dag_run", "dag", "create_dagrun", "kwargs"], ["self", "dag_run", "task_instances"], ["self", "dag_run"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "dag_maker.<locals>.DagFactory.create_dagrun", "ret_exprs": ["return self.dag_run"], "ret_type": "", "ret_type_p": [["int", 0.7171655356965667], ["bool", 0.1868368860186871]], "variables": {"dag": "", "dag_run": "", "data_interval": "", "kwargs": "", "logical_date": ""}, "variables_p": {"dag": [["viewer.models.Gallery", 0.09664786040451025], ["Tuple[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any]", 0.09354290973003357], ["dict", 0.09138164232003385]], "dag_run": [["dict", 0.20603774050817525], ["List[Tuple[str, str]]", 0.12690203636128555], ["\"OrderedDict[str, float]\"", 0.10314191971557105], ["Dict[str, Dict[str, Any]]", 0.09755020318854737], ["DefaultDict[Any, int]", 0.09569836233095784], ["Dict[Any, int]", 0.09500906289372402], ["ValueError", 0.08996426498408629], ["Callable[[List[Any]], List[Any]]", 0.08702718164416405]], "data_interval": [["tikki.db.tables.Base", 0.197021317943011], ["int", 0.10060779237392528], ["List[salon.types.ClientPricingHint]", 0.09891177189200431], ["Dict[str, Union[Any, Any, Any]]", 0.09870234082957131]], "kwargs": [["dict", 0.4326804464926683], ["defaultdict", 0.09463747628784194], ["ValueError", 0.08841576919496236], ["Dict[str, List[Any]]", 0.0879511264561774], ["list", 0.08768674833745023]], "logical_date": [["Optional[datetime.datetime]", 0.3001891126849642], ["str", 0.20240938296038963], ["Optional[datetime.date]", 0.19610193870305023], ["Union[datetime.datetime, str]", 0.11510756954824757], ["Dict[datetime.date, Dict[str, Any]]", 0.09910930195445117], ["datetime.date", 0.08708269414889717]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[594, 8], [602, 13]], "fn_var_ln": {"next_info": [[595, 12], [595, 21]]}, "fn_var_occur": {"next_info": [["next_info", "self", "dag", "next_dagrun_info", "self", "dag", "get_run_data_interval", "dagrun"], ["next_info", "None"], ["self", "create_dagrun", "execution_date", "next_info", "logical_date", "data_interval", "next_info", "data_interval", "kwargs"]]}, "name": "create_dagrun_after", "params": {"dagrun": "", "kwargs": "", "self": ""}, "params_descr": {"dagrun": "", "kwargs": "", "self": ""}, "params_occur": {"dagrun": [["next_info", "self", "dag", "next_dagrun_info", "self", "dag", "get_run_data_interval", "dagrun"], ["ValueError", "dagrun"]], "kwargs": [["self", "create_dagrun", "execution_date", "next_info", "logical_date", "data_interval", "next_info", "data_interval", "kwargs"]], "self": [["next_info", "self", "dag", "next_dagrun_info", "self", "dag", "get_run_data_interval", "dagrun"], ["self", "create_dagrun", "execution_date", "next_info", "logical_date", "data_interval", "next_info", "data_interval", "kwargs"]]}, "params_p": {"args": [], "dagrun": [["cmk.utils.type_defs.HostName", 0.11096916814703833], ["purplship.core.models.TrackingRequest", 0.07820778891124348]], "kwargs": [], "self": []}, "q_name": "dag_maker.<locals>.DagFactory.create_dagrun_after", "ret_exprs": ["return self.create_dagrun( execution_date=next_info.logical_date, data_interval=next_info.data_interval, **kwargs,)"], "ret_type": "", "ret_type_p": [["recidiviz.calculator.pipeline.utils.incarceration_period_index.IncarcerationPeriodIndex", 0.1200833492149358], ["List[recidiviz.persistence.entity.state.entities.StateSupervisionContact]", 0.10791353705136078], ["List[recidiviz.persistence.entity.state.entities.StateIncarcerationSentence]", 0.10791353705136078], ["List[recidiviz.persistence.entity.state.entities.StateAssessment]", 0.10791353705136078], ["List[recidiviz.persistence.entity.state.entities.StateSupervisionViolation.Response]", 0.10791353705136078], ["Dict[int, dict]", 0.09586645781252243], ["float", 0.09439005406864344], ["Optional[str]", 0.08884199173043833], ["str", 0.08693390559118508]], "variables": {"next_info": ""}, "variables_p": {"next_info": [["str", 0.38484406846872565], ["Dict[str, Any]", 0.19689106420391853], ["Set[str]", 0.13224107321341255]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[604, 8], [641, 23]], "fn_var_ln": {"DEFAULT_DATE": [[633, 20], [633, 32]], "_own_session": [[618, 16], [618, 33]], "dag": [[636, 12], [636, 20]], "default_args": [[624, 12], [624, 24]], "kwargs": [[621, 12], [621, 23]], "processor_subdir": [[639, 12], [639, 33]], "session": [[622, 12], [622, 24]], "start_date": [[634, 20], [634, 35]], "want_serialized": [[638, 12], [638, 32]]}, "fn_var_occur": {"DEFAULT_DATE": [["DEFAULT_DATE", "timezone", "datetime"], ["self", "start_date", "DEFAULT_DATE"]], "_own_session": [["self", "_own_session", "True"]], "dag": [["self", "dag", "DAG", "dag_id", "self", "kwargs"], ["self", "dag", "fileloc", "fileloc", "request", "module", "__file__"]], "default_args": [["default_args", "kwargs", "get", "None"], ["default_args", "self", "start_date"], ["self", "start_date", "default_args", "get"]], "kwargs": [["self", "kwargs", "kwargs"], ["self", "start_date", "self", "kwargs", "get", "None"], ["default_args", "kwargs", "get", "None"], ["self", "kwargs", "self", "start_date"], ["self", "dag", "DAG", "dag_id", "self", "kwargs"]], "processor_subdir": [["self", "processor_subdir", "processor_subdir"]], "session": [["session", "None"], ["session", "settings", "Session"], ["self", "session", "session"]], "start_date": [["self", "start_date", "self", "kwargs", "get", "None"], ["default_args", "self", "start_date"], ["self", "start_date", "default_args", "get"], ["self", "start_date"], ["self", "start_date", "getattr", "request", "module"], ["self", "start_date", "DEFAULT_DATE"], ["self", "kwargs", "self", "start_date"]], "want_serialized": [["self", "want_serialized", "serialized"]]}, "name": "__call__", "params": {"dag_id": "", "fileloc": "", "kwargs": "", "processor_subdir": "", "self": "", "serialized": "", "session": ""}, "params_descr": {"dag_id": "", "fileloc": "", "kwargs": "", "processor_subdir": "", "self": "", "serialized": "", "session": ""}, "params_occur": {"dag_id": [["self", "dag", "DAG", "dag_id", "self", "kwargs"]], "fileloc": [["self", "dag", "fileloc", "fileloc", "request", "module", "__file__"]], "kwargs": [["self", "kwargs", "kwargs"], ["self", "start_date", "self", "kwargs", "get", "None"], ["default_args", "kwargs", "get", "None"], ["self", "kwargs", "self", "start_date"], ["self", "dag", "DAG", "dag_id", "self", "kwargs"]], "processor_subdir": [["self", "processor_subdir", "processor_subdir"]], "self": [["self", "_own_session", "True"], ["self", "kwargs", "kwargs"], ["self", "session", "session"], ["self", "start_date", "self", "kwargs", "get", "None"], ["default_args", "self", "start_date"], ["self", "start_date", "default_args", "get"], ["self", "start_date"], ["self", "start_date", "getattr", "request", "module"], ["self", "start_date", "DEFAULT_DATE"], ["self", "kwargs", "self", "start_date"], ["self", "dag", "DAG", "dag_id", "self", "kwargs"], ["self", "dag", "fileloc", "fileloc", "request", "module", "__file__"], ["self", "want_serialized", "serialized"], ["self", "processor_subdir", "processor_subdir"]], "serialized": [["self", "want_serialized", "serialized"]], "session": [["session", "None"], ["session", "settings", "Session"], ["self", "session", "session"]]}, "params_p": {"args": [], "dag_id": [["verification_token.models.Token", 0.2745927526019443], ["transfer.models.SubjectID", 0.2427206828358053], ["datetime.datetime", 0.2427206828358053], ["int", 0.07818137839416461], ["bool", 0.053788758189914625], ["core.types.FBUserID", 0.03867442495720601], ["Optional[int]", 0.03563059741580367], ["str", 0.03369072276935612]], "fileloc": [["str", 0.8055896418882977], ["bool", 0.19441035811170235]], "kwargs": [], "processor_subdir": [["int", 0.6361329599534394], ["float", 0.11164112002035245], ["str", 0.08735881178774119]], "self": [], "serialized": [["int", 0.6361329599534394], ["float", 0.11164112002035245], ["str", 0.08735881178774119]], "session": [["Optional[str]", 0.27847310522769914], ["int", 0.0935613612119954], ["Optional[int]", 0.08774694076966498], ["Union['HTMLSession', 'AsyncHTMLSession']", 0.07617774530433939]]}, "q_name": "dag_maker.<locals>.DagFactory.__call__", "ret_exprs": ["return self"], "ret_type": "", "ret_type_p": [["starlette.types.Receive", 0.09999999999999999], ["Callable", 0.09999999999999999], ["starlette.types.Send", 0.09999999999999999], ["int", 0.09999999999999999], ["float", 0.09999999999999999]], "variables": {"DEFAULT_DATE": "", "_own_session": "", "dag": "", "default_args": "", "kwargs": "", "processor_subdir": "", "session": "", "start_date": "", "want_serialized": ""}, "variables_p": {"DEFAULT_DATE": [["datetime.datetime", 0.28557250277042956], ["datetime.date", 0.20389862379518764], ["Dict[str, Dict[int, Any]]", 0.13307494042174098], ["datetime.datetime.datetime", 0.109269397157645], ["Dict[Any, List[str]]", 0.10265955335794294], ["list", 0.08171778479629276]], "_own_session": [["str", 0.2852546343516609], ["Optional[str]", 0.1975660075412058], ["List[str]", 0.13208629859656384], ["Dict[str, str]", 0.09783914736104869], ["datetime.timedelta", 0.09173411359206243]], "dag": [["int", 0.4038459827397678], ["str", 0.17356909936558676], ["Dict[Any, Dict[str, str]]", 0.12680394526525604], ["Dict[str, Any]", 0.11032360866929593], ["float", 0.08875442611732215]], "default_args": [["list", 0.13496825964157427], ["Dict[str, Dict[str, Any]]", 0.10790865510782521], ["Dict[str, dict]", 0.10509444506962057], ["str", 0.09757317233866676], ["Dict[str, Any]", 0.09538729674415596], ["Dict[str, str]", 0.09300824690972116], ["KeysView[str]", 0.08803231230159862], ["Dict[str, bool]", 0.08476736923316736]], "kwargs": [["dict", 0.377899172426055], ["Callable", 0.12197118506377425], ["str", 0.10742519854541924], ["List[str]", 0.10050342136108037], ["Tuple[Tuple[str, Any]]", 0.09593261657144161], ["Dict[int, str]", 0.09440990961886066]], "processor_subdir": [["str", 0.30000000000000004], ["Dict[str, Any]", 0.1], ["dict", 0.1], ["int", 0.1]], "session": [["Optional[str]", 0.31138073372376945], ["sqlalchemy.orm.session.Session", 0.11362605359401262], ["Mapping[str, str]", 0.08651871738751883], ["List[None]", 0.08351609748531666], ["Optional[homeassistancore.State]", 0.07637210789027948]], "start_date": [["datetime.datetime.datetime", 0.22226184686919748], ["datetime.datetime", 0.21435351535013275], ["Type[datetime.date]", 0.09728547532134223], ["Dict[str, List[str]]", 0.09622379286371256], ["Type[datetime.datetime]", 0.09443655991487454], ["Type[datetime.timedelta]", 0.09336872930946799], ["Pattern[str]", 0.09226710938163521], ["datetime.datetime.timedelta", 0.08980297098963723]], "want_serialized": [["str", 0.30000000000000004], ["Dict[str, Any]", 0.1], ["dict", 0.1], ["int", 0.1]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[643, 8], [681, 50]], "fn_var_ln": {"dag_ids": [[652, 20], [652, 27]]}, "fn_var_occur": {"dag_ids": [["dag_ids", "list", "self", "dagbag", "dag_ids"], ["self", "session", "query", "SerializedDagModel", "filter", "SerializedDagModel", "dag_id", "in_", "dag_ids", "delete", "synchronize_session", "False"], ["self", "session", "query", "DagRun", "filter", "DagRun", "dag_id", "in_", "dag_ids", "delete", "synchronize_session", "False"], ["self", "session", "query", "TaskInstance", "filter", "TaskInstance", "dag_id", "in_", "dag_ids", "delete", "synchronize_session", "False"], ["self", "session", "query", "XCom", "filter", "XCom", "dag_id", "in_", "dag_ids", "delete", "synchronize_session", "False"], ["self", "session", "query", "DagModel", "filter", "DagModel", "dag_id", "in_", "dag_ids", "delete", "synchronize_session", "False"], ["self", "session", "query", "TaskMap", "filter", "TaskMap", "dag_id", "in_", "dag_ids", "delete", "synchronize_session", "False"], ["self", "session", "query", "DatasetEvent", "filter", "DatasetEvent", "source_dag_id", "in_", "dag_ids", "delete", "synchronize_session", "False"]]}, "name": "cleanup", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["run_with_db_retries", "logger", "self", "log"], ["dag_ids", "list", "self", "dagbag", "dag_ids"], ["self", "session", "rollback"], ["self", "session", "query", "SerializedDagModel", "filter", "SerializedDagModel", "dag_id", "in_", "dag_ids", "delete", "synchronize_session", "False"], ["self", "session", "query", "DagRun", "filter", "DagRun", "dag_id", "in_", "dag_ids", "delete", "synchronize_session", "False"], ["self", "session", "query", "TaskInstance", "filter", "TaskInstance", "dag_id", "in_", "dag_ids", "delete", "synchronize_session", "False"], ["self", "session", "query", "XCom", "filter", "XCom", "dag_id", "in_", "dag_ids", "delete", "synchronize_session", "False"], ["self", "session", "query", "DagModel", "filter", "DagModel", "dag_id", "in_", "dag_ids", "delete", "synchronize_session", "False"], ["self", "session", "query", "TaskMap", "filter", "TaskMap", "dag_id", "in_", "dag_ids", "delete", "synchronize_session", "False"], ["self", "session", "query", "DatasetEvent", "filter", "DatasetEvent", "source_dag_id", "in_", "dag_ids", "delete", "synchronize_session", "False"], ["self", "session", "commit"], ["self", "_own_session"], ["self", "session", "expunge_all"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "dag_maker.<locals>.DagFactory.cleanup", "ret_exprs": ["return"], "ret_type": "", "ret_type_p": [["Union[tuple, list]", 0.12326783261663934], ["List[int]", 0.09124591253820835], ["Dict[str, Any]", 0.08769568774684897], ["str", 0.08682447752895113]], "variables": {"dag_ids": ""}, "variables_p": {"dag_ids": [["list", 0.5646821755743485], ["int", 0.15979798781840907], ["str", 0.11091869349703391], ["raiden.utils.List[EventID]", 0.08357155375287238]]}}], "name": "DagFactory", "q_name": "dag_maker.<locals>.DagFactory", "variables": {}, "variables_p": {}}], "funcs": [{"docstring": {"func": "Resets env variables.", "long_descr": null, "ret": null}, "fn_lc": [[65, 0], [74, 43]], "fn_var_ln": {"changed_env": [[69, 4], [69, 15]], "init_env": [[67, 4], [67, 12]]}, "fn_var_occur": {"changed_env": [["changed_env", "os", "environ"]], "init_env": [["init_env", "os", "environ", "copy"], ["key", "init_env"], ["os", "environ", "key", "init_env", "key"]]}, "name": "reset_environment", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "reset_environment", "ret_exprs": [], "ret_type": "", "variables": {"changed_env": "", "init_env": ""}, "variables_p": {"changed_env": [["int", 0.5941818065522815], ["str", 0.11701553414912003], ["Pattern[str]", 0.104555184508171], ["List[str]", 0.09164774330213249]], "init_env": [["Dict[Any, str]", 0.6309640460787134], ["dict", 0.16541822997429959]]}}, {"docstring": {"func": "Return secret key configured.", "long_descr": null, "ret": null}, "fn_lc": [[78, 0], [88, 18]], "fn_var_ln": {"the_key": [[82, 4], [82, 11]]}, "fn_var_occur": {"the_key": [["the_key", "conf", "get"], ["the_key", "None"]]}, "name": "secret_key", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "secret_key", "ret_exprs": ["return the_key"], "ret_type": "builtins.str", "ret_type_p": [["str", 0.8982883635001775], ["bool", 0.10171163649982236]], "variables": {"the_key": ""}, "variables_p": {"the_key": [["str", 0.24648260375575698], ["Dict[Any, str]", 0.16067481392957117], ["List[str]", 0.15857855344778513], ["Dict[str, Union[Any, Any]]", 0.10502519187493324], ["bytes", 0.09097496668226139], ["Dict[int, Any]", 0.08457250818388448], ["Dict[str, Any]", 0.08302011864035777], ["Tuple[Any, Any, Any, Any]", 0.07067124348544974]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[92, 0], [93, 40]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "url_safe_serializer", "params": {"secret_key": ""}, "params_descr": {"secret_key": ""}, "params_occur": {"secret_key": [["URLSafeSerializer", "secret_key"]]}, "params_p": {"args": [], "kwargs": [], "secret_key": [["str", 0.621519033191239], ["dict", 0.09419525652482963], ["bool", 0.0885945974394352], ["routemaster_sdk.types.LabelRef", 0.0873553069666977]]}, "q_name": "url_safe_serializer", "ret_exprs": ["return URLSafeSerializer(secret_key)"], "ret_type": "itsdangerous.URLSafeSerializer", "ret_type_p": [["str", 0.2849330874784007], ["bool", 0.1444814945913297], ["Set[str]", 0.09177041327912773], ["List[Dict[str, Any]]", 0.09136914724599059]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Resets Airflow db.", "long_descr": null, "ret": null}, "fn_lc": [[97, 0], [103, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "reset_db", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "reset_db", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[127, 4], [128, 49]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "pytest_print", "params": {"text": ""}, "params_descr": {"text": ""}, "params_occur": {"text": [["terminal_reporter", "write_line", "text"]]}, "params_p": {"args": [], "kwargs": [], "text": [["str", 0.9999999999999999]]}, "q_name": "trace_sql.<locals>.pytest_print", "ret_exprs": ["return terminal_reporter.write_line(text)"], "ret_type": "", "ret_type_p": [["int", 0.2068988360378442], ["str", 0.10729089735786516], ["Generator", 0.10174161098395602]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Displays queries from the tests to console.", "long_descr": null, "ret": null}, "fn_lc": [[110, 0], [147, 13]], "fn_var_ln": {"columns": [[125, 4], [125, 11]], "terminal_reporter": [[117, 4], [117, 21]], "trace_sql_option": [[112, 4], [112, 20]]}, "fn_var_occur": {"columns": [["exit_stack", "enter_context", "trace_queries", "display_num", "columns", "display_time", "columns", "display_trace", "columns", "display_sql", "columns", "display_parameters", "columns", "print_fn", "pytest_print"]], "terminal_reporter": [], "trace_sql_option": []}, "name": "trace_sql", "params": {"request": ""}, "params_descr": {"request": ""}, "params_occur": {"request": []}, "params_p": {"args": [], "kwargs": [], "request": [["bool", 0.1]]}, "q_name": "trace_sql", "ret_exprs": ["return", "return"], "ret_type": "", "ret_type_p": [["app.models.Article", 0.13399725164004506], ["core.models.Resource", 0.0889092504290877], ["Iterator", 0.08488967993129183]], "variables": {"columns": "", "terminal_reporter": "", "trace_sql_option": ""}, "variables_p": {"columns": [["int", 0.08988895956310924]], "terminal_reporter": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "trace_sql_option": [["int", 0.2], ["Dict[str, Union[bool, str]]", 0.2], ["Tuple[Tuple[str, str], Tuple[str, str], Tuple[str, str], Tuple[str, str]]", 0.1], ["Dict[str, int]", 0.1], ["Dict[str, None]", 0.1], ["Dict[str, Union[int, str]]", 0.1], ["str", 0.1]]}}, {"docstring": {"func": "Add options parser for custom plugins.", "long_descr": null, "ret": null}, "fn_lc": [[150, 0], [203, 5]], "fn_var_ln": {"allowed_trace_sql_columns_list": [[188, 4], [188, 34]], "group": [[152, 4], [152, 9]]}, "fn_var_occur": {"allowed_trace_sql_columns_list": [["allowed_trace_sql_columns_list", "join", "ALLOWED_TRACE_SQL_COLUMNS"], ["group", "addoption", "action", "help", "allowed_trace_sql_columns_list", "metavar"]], "group": [["group", "parser", "getgroup"], ["group", "addoption", "action", "dest", "help"], ["group", "addoption", "action", "metavar", "help"], ["group", "addoption", "action", "metavar", "help"], ["group", "addoption", "action", "metavar", "help"], ["group", "addoption", "action", "help"], ["group", "addoption", "action", "help"], ["group", "addoption", "action", "help", "allowed_trace_sql_columns_list", "metavar"], ["group", "addoption", "action", "dest", "help"]]}, "name": "pytest_addoption", "params": {"parser": ""}, "params_descr": {"parser": ""}, "params_occur": {"parser": [["group", "parser", "getgroup"]]}, "params_p": {"args": [], "kwargs": [], "parser": []}, "q_name": "pytest_addoption", "ret_exprs": [], "ret_type": "", "variables": {"allowed_trace_sql_columns_list": "", "group": ""}, "variables_p": {"allowed_trace_sql_columns_list": [["str", 0.18465225630470364], ["src.pip_shims.models.ShimmedPathCollection", 0.11652026307079409], ["Optional[str]", 0.09473943278928573]], "group": [["Tuple[str, str]", 0.21298258781756801], ["flask.blueprints.Blueprint", 0.1788800336102909], ["Tuple[str, str, str, str, str, str, str, str, str]", 0.10649129390878401], ["Tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str]", 0.10649129390878401], ["Tuple[str, str, str, str, str, str, str, str, str, str, str]", 0.10649129390878401], ["int", 0.09651698624730416], ["tuple", 0.0877607638238626]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[206, 0], [220, 36]], "fn_var_ln": {"flask_app": [[217, 4], [217, 13]]}, "fn_var_occur": {"flask_app": [["flask_app", "Flask", "__name__"], ["flask_app", "config", "conf", "get"], ["init_appbuilder", "flask_app"], ["sync_appbuilder_roles", "flask_app"]]}, "name": "initial_db_init", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "initial_db_init", "ret_exprs": [], "ret_type": "", "variables": {"flask_app": ""}, "variables_p": {"flask_app": [["flask.blueprints.Blueprint", 0.3106050086570623], ["Dict[str, Any]", 0.12333605956633195], ["dict", 0.10191576099562612], ["str", 0.09224314240897838], ["cerise.config.Config", 0.0900581736079446], ["Dict[str, Union[Any, str]]", 0.0863055578242552], ["flask.app.Flask", 0.08600303754663778]]}}, {"docstring": {"func": "Helper that setups Airflow testing environment.", "long_descr": null, "ret": null}, "fn_lc": [[224, 0], [261, 23]], "fn_var_ln": {"airflow_home": [[230, 4], [230, 16]], "home": [[229, 4], [229, 8]], "integration_kerberos": [[253, 4], [253, 24]], "kerberos": [[256, 8], [256, 16]], "lock_file": [[235, 4], [235, 13]]}, "fn_var_occur": {"airflow_home": [["airflow_home", "os", "environ", "get", "os", "path", "join", "home"], ["print", "home", "airflow_home"], ["lock_file", "os", "path", "join", "airflow_home"]], "home": [["home", "os", "path", "expanduser"], ["airflow_home", "os", "environ", "get", "os", "path", "join", "home"], ["print", "home", "airflow_home"]], "integration_kerberos": [["integration_kerberos", "os", "environ", "get"]], "kerberos": [["kerberos", "os", "environ", "get"], ["subprocess", "check_call", "kerberos"]], "lock_file": [["lock_file", "os", "path", "join", "airflow_home"], ["os", "path", "exists", "lock_file"], ["open", "lock_file"]]}, "name": "initialize_airflow_tests", "params": {"request": ""}, "params_descr": {"request": ""}, "params_occur": {"request": [["request", "config", "option", "db_init"]]}, "params_p": {"args": [], "kwargs": [], "request": [["Optional[dict]", 0.1314317224100765]]}, "q_name": "initialize_airflow_tests", "ret_exprs": [], "ret_type": "", "variables": {"airflow_home": "", "home": "", "integration_kerberos": "", "kerberos": "", "lock_file": ""}, "variables_p": {"airflow_home": [["str", 0.6111379209039658], ["List[str]", 0.1951325330855654]], "home": [["str", 0.5670751125243023], ["Dict[str, str]", 0.15239275756902199], ["list", 0.09684081059543856], ["Tuple[Type[str], Type[bytes]]", 0.0946610945883053], ["Dict[str, Any]", 0.08903022472293166]], "integration_kerberos": [["str", 0.45509310743266007], ["List[str]", 0.28731715456175194], ["int", 0.17071298549020492], ["Pattern[str]", 0.08687675251538295]], "kerberos": [["str", 0.7988275425562845], ["int", 0.11050481273165441], ["Dict[int, Any]", 0.09066764471206089]], "lock_file": [["str", 0.8941148367140752], ["Optional[str]", 0.10588516328592472]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[264, 0], [279, 76]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "pytest_configure", "params": {"config": ""}, "params_descr": {"config": ""}, "params_occur": {"config": [["config", "addinivalue_line"], ["config", "addinivalue_line"], ["config", "addinivalue_line"], ["config", "addinivalue_line"], ["config", "addinivalue_line"], ["config", "addinivalue_line"], ["config", "addinivalue_line"], ["config", "addinivalue_line"]]}, "params_p": {"args": [], "config": [["dict", 0.27025379351197093], ["Dict[str, Any]", 0.09107649041027634], ["pyramid.config.Configurator", 0.0787318748293791]], "kwargs": []}, "q_name": "pytest_configure", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[282, 0], [283, 74]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "pytest_unconfigure", "params": {"config": ""}, "params_descr": {"config": ""}, "params_occur": {"config": []}, "params_p": {"args": [], "config": [["Dict[str, Any]", 0.19999999999999998], ["bool", 0.09999999999999999], ["revlibs.connections.config.Config", 0.09999999999999999]], "kwargs": []}, "q_name": "pytest_unconfigure", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[286, 0], [295, 5]], "fn_var_ln": {"integration_name": [[288, 8], [288, 24]]}, "fn_var_occur": {"integration_name": [["integration_name", "marker", "args"], ["integration_name", "selected_integrations", "selected_integrations"]]}, "name": "skip_if_not_marked_with_integration", "params": {"item": "", "selected_integrations": ""}, "params_descr": {"item": "", "selected_integrations": ""}, "params_occur": {"item": [["item", "iter_markers", "name"], ["pytest", "skip", "selected_integrations", "item"]], "selected_integrations": [["integration_name", "selected_integrations", "selected_integrations"], ["pytest", "skip", "selected_integrations", "item"]]}, "params_p": {"args": [], "item": [["str", 0.4032354469723482], ["dict", 0.1064166653164248], ["Union[str, Dict]", 0.10198434235471016], ["Set[cmk.utils.type_defs.HostName]", 0.09832569494019021]], "kwargs": [], "selected_integrations": [["str", 0.30507336735316193], ["int", 0.11123991593450544], ["Callable", 0.10246259802001635]]}, "q_name": "skip_if_not_marked_with_integration", "ret_exprs": ["return"], "ret_type": "", "ret_type_p": [["Union[tuple, list]", 0.12326783261663934], ["List[int]", 0.09124591253820835], ["Dict[str, Any]", 0.08769568774684897], ["str", 0.08682447752895113]], "variables": {"integration_name": ""}, "variables_p": {"integration_name": [["str", 0.6529764645057047], ["Optional[str]", 0.16302165571292637], ["Type[taxonomy.db.models.name.Name]", 0.09826767344405743], ["List[str]", 0.08573420633731159]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[298, 0], [306, 5]], "fn_var_ln": {"backend_names": [[300, 8], [300, 21]]}, "fn_var_occur": {"backend_names": [["backend_names", "marker", "args"], ["selected_backend", "backend_names"]]}, "name": "skip_if_not_marked_with_backend", "params": {"item": "", "selected_backend": ""}, "params_descr": {"item": "", "selected_backend": ""}, "params_occur": {"item": [["item", "iter_markers", "name"], ["pytest", "skip", "selected_backend", "item"]], "selected_backend": [["selected_backend", "backend_names"], ["pytest", "skip", "selected_backend", "item"]]}, "params_p": {"args": [], "item": [["str", 0.4032354469723482], ["dict", 0.1064166653164248], ["Union[str, Dict]", 0.10198434235471016], ["Set[cmk.utils.type_defs.HostName]", 0.09832569494019021]], "kwargs": [], "selected_backend": [["Dict[str, int]", 0.13490585207927533], ["Dict[str, Dict[str, Any]]", 0.11252434305524045], ["bool", 0.1003932913964932], ["Mapping[str, Any]", 0.09647974730588142], ["Dict[str, Any]", 0.08854668276345579]]}, "q_name": "skip_if_not_marked_with_backend", "ret_exprs": ["return"], "ret_type": "", "ret_type_p": [["Union[tuple, list]", 0.12326783261663934], ["List[int]", 0.09124591253820835], ["Dict[str, Any]", 0.08769568774684897], ["str", 0.08682447752895113]], "variables": {"backend_names": ""}, "variables_p": {"backend_names": [["str", 0.4051517551146844], ["dict", 0.22961376619940987], ["Final", 0.17477995500275176], ["list", 0.08383702328585574]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[309, 0], [318, 5]], "fn_var_ln": {"systems_name": [[311, 8], [311, 20]]}, "fn_var_occur": {"systems_name": [["systems_name", "marker", "args"], ["systems_name", "selected_systems", "selected_systems"]]}, "name": "skip_if_not_marked_with_system", "params": {"item": "", "selected_systems": ""}, "params_descr": {"item": "", "selected_systems": ""}, "params_occur": {"item": [["item", "iter_markers", "name"], ["pytest", "skip", "selected_systems", "item"]], "selected_systems": [["systems_name", "selected_systems", "selected_systems"], ["pytest", "skip", "selected_systems", "item"]]}, "params_p": {"args": [], "item": [["str", 0.4032354469723482], ["dict", 0.1064166653164248], ["Union[str, Dict]", 0.10198434235471016], ["Set[cmk.utils.type_defs.HostName]", 0.09832569494019021]], "kwargs": [], "selected_systems": [["str", 0.30507336735316193], ["int", 0.11123991593450544], ["Callable", 0.10246259802001635]]}, "q_name": "skip_if_not_marked_with_system", "ret_exprs": ["return"], "ret_type": "", "ret_type_p": [["Union[tuple, list]", 0.12326783261663934], ["List[int]", 0.09124591253820835], ["Dict[str, Any]", 0.08769568774684897], ["str", 0.08682447752895113]], "variables": {"systems_name": ""}, "variables_p": {"systems_name": [["str", 0.6529764645057047], ["Optional[str]", 0.16302165571292637], ["Type[taxonomy.db.models.name.Name]", 0.09826767344405743], ["List[str]", 0.08573420633731159]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[321, 0], [326, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "skip_system_test", "params": {"item": ""}, "params_descr": {"item": ""}, "params_occur": {"item": [["item", "iter_markers", "name"], ["pytest", "skip", "marker", "args", "item"]]}, "params_p": {"args": [], "item": [["str", 0.2216622061619326], ["List[str]", 0.10681069683814741], ["dict", 0.097577485476074], ["utils.mssql_counters.Section", 0.08617833436358767]], "kwargs": []}, "q_name": "skip_system_test", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[329, 0], [334, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "skip_long_running_test", "params": {"item": ""}, "params_descr": {"item": ""}, "params_occur": {"item": [["item", "iter_markers", "name"], ["pytest", "skip", "item"]]}, "params_p": {"args": [], "item": [["str", 0.3827099334799199], ["Dict[str, Any]", 0.08344673187906279]], "kwargs": []}, "q_name": "skip_long_running_test", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[337, 0], [342, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "skip_quarantined_test", "params": {"item": ""}, "params_descr": {"item": ""}, "params_occur": {"item": [["item", "iter_markers", "name"], ["pytest", "skip", "item"]]}, "params_p": {"args": [], "item": [["utils.sap_hana.ParsedSection", 0.11055645601481116], ["str", 0.10331607197906531], ["dict", 0.09550706797722844], ["Dict[str, Any]", 0.0922384411650298]], "kwargs": []}, "q_name": "skip_quarantined_test", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[345, 0], [360, 9]], "fn_var_ln": {"environment_variable_name": [[347, 4], [347, 29]], "environment_variable_value": [[348, 4], [348, 30]], "integration_name": [[346, 4], [346, 20]]}, "fn_var_occur": {"environment_variable_name": [["environment_variable_name", "integration_name", "upper"], ["environment_variable_value", "os", "environ", "get", "environment_variable_name"], ["pytest", "skip", "format", "name", "environment_variable_name", "value", "environment_variable_value", "integration_name", "integration_name", "item", "item"]], "environment_variable_value": [["environment_variable_value", "os", "environ", "get", "environment_variable_name"], ["environment_variable_value", "environment_variable_value"], ["pytest", "skip", "format", "name", "environment_variable_name", "value", "environment_variable_value", "integration_name", "integration_name", "item", "item"]], "integration_name": [["integration_name", "marker", "args"], ["environment_variable_name", "integration_name", "upper"], ["pytest", "skip", "format", "name", "environment_variable_name", "value", "environment_variable_value", "integration_name", "integration_name", "item", "item"]]}, "name": "skip_if_integration_disabled", "params": {"item": "", "marker": ""}, "params_descr": {"item": "", "marker": ""}, "params_occur": {"item": [["pytest", "skip", "format", "name", "environment_variable_name", "value", "environment_variable_value", "integration_name", "integration_name", "item", "item"]], "marker": [["integration_name", "marker", "args"]]}, "params_p": {"args": [], "item": [["str", 0.29401248711339156], ["Exception", 0.09593541005163554]], "kwargs": [], "marker": [["str", 0.19871721123893904], ["django.db.models.Field", 0.12007832109259098], ["int", 0.10153989144933051]]}, "q_name": "skip_if_integration_disabled", "ret_exprs": [], "ret_type": "", "variables": {"environment_variable_name": "", "environment_variable_value": "", "integration_name": ""}, "variables_p": {"environment_variable_name": [["str", 0.4205570429163469], ["frozenset[Union[Any, Any]]", 0.39880220809965466], ["List[str]", 0.0973731259687095], ["Dict[str, str]", 0.08326762301528895]], "environment_variable_value": [["str", 0.19963072129859896], ["Pattern[str]", 0.09766115896315501], ["int", 0.09659287270554927], ["Dict[Any, Dict[str, str]]", 0.09574507577927995], ["Tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str]", 0.09498880383367765]], "integration_name": [["frozenset[Union[Any, Any]]", 0.39958876856462966], ["str", 0.2118238666505782], ["List[str]", 0.19602321765654496], ["Tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str]", 0.09947705721911052], ["Set[str]", 0.09308708990913672]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[363, 0], [372, 9]], "fn_var_ln": {"environment_variable_name": [[365, 4], [365, 29]], "environment_variable_value": [[366, 4], [366, 30]], "valid_backend_names": [[364, 4], [364, 23]]}, "fn_var_occur": {"environment_variable_name": [["environment_variable_value", "os", "environ", "get", "environment_variable_name"], ["pytest", "skip", "valid_backend_names", "environment_variable_name", "environment_variable_value", "item"]], "environment_variable_value": [["environment_variable_value", "os", "environ", "get", "environment_variable_name"], ["environment_variable_value", "environment_variable_value", "valid_backend_names"], ["pytest", "skip", "valid_backend_names", "environment_variable_name", "environment_variable_value", "item"]], "valid_backend_names": [["valid_backend_names", "marker", "args"], ["environment_variable_value", "environment_variable_value", "valid_backend_names"], ["pytest", "skip", "valid_backend_names", "environment_variable_name", "environment_variable_value", "item"]]}, "name": "skip_if_wrong_backend", "params": {"item": "", "marker": ""}, "params_descr": {"item": "", "marker": ""}, "params_occur": {"item": [["pytest", "skip", "valid_backend_names", "environment_variable_name", "environment_variable_value", "item"]], "marker": [["valid_backend_names", "marker", "args"]]}, "params_p": {"args": [], "item": [["Dict[str, Iterable[Any]]", 0.11082693988765008], ["dict", 0.09251082031496598], ["Dict[str, Tuple[int, int]]", 0.09135875249363515], ["float", 0.08702784420559315], ["bool", 0.08406317350723744], ["Dict[str, Any]", 0.08301661589042394]], "kwargs": [], "marker": [["str", 0.18983882470604746], ["type", 0.10582187004547186], ["Mapping[str, utils.mssql_counters.Section]", 0.10209629048888082], ["AnyStr", 0.0903195084487956], ["Exception", 0.08884437619409889], ["int", 0.08726178043925388]]}, "q_name": "skip_if_wrong_backend", "ret_exprs": [], "ret_type": "", "variables": {"environment_variable_name": "", "environment_variable_value": "", "valid_backend_names": ""}, "variables_p": {"environment_variable_name": [["str", 0.7452083460766051], ["List[str]", 0.0895469744753076], ["Optional[str]", 0.08137521438980055]], "environment_variable_value": [["str", 0.196687978243965], ["Dict[Optional[str], str]", 0.10705176892040438], ["dict", 0.10422924100121639], ["Tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str]", 0.10302748183769729], ["Dict[Any, Dict[str, str]]", 0.10217292911920421], ["datetime.timedelta", 0.10024964352813143], ["Pattern[str]", 0.09950884542724278], ["Dict[Any, str]", 0.09475641594890784], ["list", 0.09231569597323078]], "valid_backend_names": [["str", 0.469772529341326], ["Optional[str]", 0.12427392129269937], ["set", 0.08574293795963946], ["List[str]", 0.0790621846997052], ["Final", 0.07437336561376681], ["Set[str]", 0.07287686184570832]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[375, 0], [380, 87]], "fn_var_ln": {"credential_file": [[377, 8], [377, 23]], "credential_path": [[378, 8], [378, 23]]}, "fn_var_occur": {"credential_file": [["credential_file", "marker", "args"], ["credential_path", "os", "path", "join", "os", "environ", "get", "credential_file"]], "credential_path": [["credential_path", "os", "path", "join", "os", "environ", "get", "credential_file"], ["os", "path", "exists", "credential_path"], ["pytest", "skip", "credential_path", "item"]]}, "name": "skip_if_credential_file_missing", "params": {"item": ""}, "params_descr": {"item": ""}, "params_occur": {"item": [["item", "iter_markers", "name"], ["pytest", "skip", "credential_path", "item"]]}, "params_p": {"args": [], "item": [["str", 0.4637097730795249], ["Dict[str, Any]", 0.2518219960934383], ["IO[str]", 0.10940998656382724]], "kwargs": []}, "q_name": "skip_if_credential_file_missing", "ret_exprs": [], "ret_type": "", "variables": {"credential_file": "", "credential_path": ""}, "variables_p": {"credential_file": [["str", 0.9999999999999999]], "credential_path": [["str", 0.8535001623475487], ["Union[Literal, str]", 0.07428868822470445]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[383, 0], [407, 41]], "fn_var_ln": {"include_long_running": [[387, 4], [387, 24]], "include_quarantined": [[388, 4], [388, 23]], "selected_backend": [[400, 4], [400, 20]], "selected_integrations_list": [[384, 4], [384, 30]], "selected_systems_list": [[385, 4], [385, 25]]}, "fn_var_occur": {"include_long_running": [["include_long_running", "item", "config", "getoption"]], "include_quarantined": [["include_quarantined", "item", "config", "getoption"]], "selected_backend": [["selected_backend", "item", "config", "getoption"], ["skip_if_not_marked_with_backend", "selected_backend", "item"]], "selected_integrations_list": [["selected_integrations_list", "item", "config", "getoption"], ["skip_if_not_marked_with_integration", "selected_integrations_list", "item"]], "selected_systems_list": [["selected_systems_list", "item", "config", "getoption"], ["skip_if_not_marked_with_system", "selected_systems_list", "item"]]}, "name": "pytest_runtest_setup", "params": {"item": ""}, "params_descr": {"item": ""}, "params_occur": {"item": [["selected_integrations_list", "item", "config", "getoption"], ["selected_systems_list", "item", "config", "getoption"], ["include_long_running", "item", "config", "getoption"], ["include_quarantined", "item", "config", "getoption"], ["item", "iter_markers", "name"], ["skip_if_integration_disabled", "marker", "item"], ["skip_if_not_marked_with_integration", "selected_integrations_list", "item"], ["skip_if_not_marked_with_system", "selected_systems_list", "item"], ["skip_system_test", "item"], ["item", "iter_markers", "name"], ["skip_if_wrong_backend", "marker", "item"], ["selected_backend", "item", "config", "getoption"], ["skip_if_not_marked_with_backend", "selected_backend", "item"], ["skip_long_running_test", "item"], ["skip_quarantined_test", "item"], ["skip_if_credential_file_missing", "item"]]}, "params_p": {"args": [], "item": [["dict", 0.19238108452242642], ["ark.types.PrimalItem", 0.13005108067758603], ["cmk.utils.type_defs.ServiceName", 0.09184324527677087], ["ics.types.ContainerItem", 0.08677543643527923]], "kwargs": []}, "q_name": "pytest_runtest_setup", "ret_exprs": [], "ret_type": "", "variables": {"include_long_running": "", "include_quarantined": "", "selected_backend": "", "selected_integrations_list": "", "selected_systems_list": ""}, "variables_p": {"include_long_running": [["List[str]", 0.17394690442516858], ["monkq.config.Setting", 0.1737392591678629], ["qutebrowser.config.configtypes.List", 0.15827953583259644], ["cincoconfig.config.Config", 0.11475630052194552]], "include_quarantined": [["monkq.config.Setting", 0.24453466921293648], ["List[str]", 0.1719421454764905], ["cincoconfig.config.Config", 0.12084480033322713], ["qutebrowser.config.configtypes.List", 0.10020172690211379], ["int", 0.0918852663190282]], "selected_backend": [["dict", 0.10853782025945066], ["cincoconfig.config.Schema", 0.09501215571089047], ["qutebrowser.config.configtypes.List", 0.09222636079520792], ["cincoconfig.config.Config", 0.0884407373683515]], "selected_integrations_list": [["list", 0.9002944076176771], ["Tuple[Literal, Literal, Literal, Literal, Literal]", 0.0997055923823227]], "selected_systems_list": [["list", 0.9002944076176771], ["Tuple[Literal, Literal, Literal, Literal, Literal]", 0.0997055923823227]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[434, 4], [440, 25]], "fn_var_ln": {"traveller": [[439, 8], [439, 17]], "utcnow": [[436, 8], [436, 14]]}, "fn_var_occur": {"traveller": [["traveller", "None"], ["traveller", "None"], ["traveller", "stop"], ["traveller", "time_machine", "travel", "utcnow", "timedelta", "seconds", "seconds"], ["traveller", "start"]], "utcnow": [["utcnow", "datetime", "utcnow"], ["traveller", "time_machine", "travel", "utcnow", "timedelta", "seconds", "seconds"]]}, "name": "fake_sleep", "params": {"seconds": ""}, "params_descr": {"seconds": ""}, "params_occur": {"seconds": [["traveller", "time_machine", "travel", "utcnow", "timedelta", "seconds", "seconds"]]}, "params_p": {"args": [], "kwargs": [], "seconds": [["int", 0.30000000000000004], ["Callable", 0.2], ["models.Question", 0.1], ["str", 0.1]]}, "q_name": "frozen_sleep.<locals>.fake_sleep", "ret_exprs": [], "ret_type": "", "variables": {"traveller": "", "utcnow": ""}, "variables_p": {"traveller": [["Optional[int]", 0.21059365587907375], ["str", 0.18516337399742694], ["Optional[str]", 0.14743942242046304], ["List[None]", 0.14094977553064394], ["Dict[str, Any]", 0.08106136993689991], ["Tuple[Type[str]]", 0.0630003351755849]], "utcnow": [["datetime.timedelta", 0.7999999999999999], ["datetime.timezone", 0.09999999999999999], ["datetime.datetime", 0.09999999999999999]]}}, {"docstring": {"func": "Use time-machine to \"stub\" sleep.", "long_descr": "This means the ``sleep()`` takes no time, but ``datetime.now()`` appears to move forwards.\n\nIf your module under test does ``import time`` and then ``time.sleep``:\n\n.. code-block:: python\n\n    def test_something(frozen_sleep):\n        my_mod.fn_under_test()\n\nIf your module under test does ``from time import sleep`` then you will\nhave to mock that sleep function directly:\n\n.. code-block:: python\n\n    def test_something(frozen_sleep, monkeypatch):\n        monkeypatch.setattr(\"my_mod.sleep\", frozen_sleep)\n        my_mod.fn_under_test()", "ret": null}, "fn_lc": [[411, 0], [446, 24]], "fn_var_ln": {"traveller": [[432, 4], [432, 13]]}, "fn_var_occur": {"traveller": [["traveller", "None"], ["traveller", "stop"]]}, "name": "frozen_sleep", "params": {"monkeypatch": ""}, "params_descr": {"monkeypatch": ""}, "params_occur": {"monkeypatch": [["monkeypatch", "setattr", "fake_sleep"]]}, "params_p": {"args": [], "kwargs": [], "monkeypatch": [["bool", 0.30320799152945677], ["str", 0.20750945093824114], ["Iterable[T]", 0.11726024393088409], ["int", 0.10106933050981892], ["datetime", 0.08707101547516587]]}, "q_name": "frozen_sleep", "ret_exprs": [], "ret_type": "", "variables": {"traveller": ""}, "variables_p": {"traveller": [["Optional[str]", 0.30000000000000004], ["int", 0.30000000000000004], ["str", 0.2]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[450, 0], [456, 42]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "app", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "app", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Fixture to help create DAG, DagModel, and SerializedDAG automatically.", "long_descr": "You have to use the dag_maker as a context manager and it takes\nthe same argument as DAG::\n\n    with dag_maker(dag_id=\"mydag\") as dag:\n        task1 = EmptyOperator(task_id='mytask')\n        task2 = EmptyOperator(task_id='mytask2')\n\nIf the DagModel you want to use needs different parameters than the one\nautomatically created by the dag_maker, you have to update the DagModel as below::\n\n    dag_maker.dag_model.is_active = False\n    session.merge(dag_maker.dag_model)\n    session.commit()\n\nFor any test you use the dag_maker, make sure to create a DagRun::\n\n    dag_maker.create_dagrun()\n\nThe dag_maker.create_dagrun takes the same arguments as dag.create_dagrun\n\nIf you want to operate on serialized DAGs, then either pass\n``serialized=True`` to the ``dag_maker()`` call, or you can mark your\ntest/class/file with ``@pytest.mark.need_serialized_dag(True)``. In both of\nthese cases the ``dag`` returned by the context manager will be a\nlazily-evaluated proxy object to the SerializedDAG.", "ret": null}, "fn_lc": [[460, 0], [690, 31]], "fn_var_ln": {"_own_session": [[507, 8], [507, 20]], "factory": [[683, 4], [683, 11]], "serialized_marker": [[500, 4], [500, 21]], "want_serialized": [[502, 9], [502, 24]]}, "fn_var_occur": {"_own_session": [], "factory": [["factory", "DagFactory"], ["factory", "cleanup"], ["factory", "session"]], "serialized_marker": [], "want_serialized": []}, "name": "dag_maker", "params": {"request": ""}, "params_descr": {"request": ""}, "params_occur": {"request": []}, "params_p": {"args": [], "kwargs": [], "request": [["bool", 0.1]]}, "q_name": "dag_maker", "ret_exprs": [], "ret_type": "", "variables": {"_own_session": "", "factory": "", "serialized_marker": "", "want_serialized": ""}, "variables_p": {"_own_session": [["datetime.timedelta", 0.29999999999999993], ["str", 0.19999999999999996], ["dict", 0.09999999999999998], ["int", 0.09999999999999998], ["venv.Lib.site-packages.flask.config.ConfigAttribute", 0.09999999999999998], ["bool", 0.09999999999999998]], "factory": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["str", 0.1], ["datetime.timedelta", 0.1]], "serialized_marker": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "want_serialized": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[713, 4], [745, 22]], "fn_var_ln": {"op": [[730, 12], [730, 14]]}, "fn_var_occur": {"op": [["op", "EmptyOperator", "task_id", "task_id", "max_active_tis_per_dag", "max_active_tis_per_dag", "max_active_tis_per_dagrun", "max_active_tis_per_dagrun", "executor_config", "executor_config", "on_success_callback", "on_success_callback", "on_execute_callback", "on_execute_callback", "on_failure_callback", "on_failure_callback", "on_retry_callback", "on_retry_callback", "email", "email", "pool", "pool", "trigger_rule", "trigger_rule"], ["dag", "op"]]}, "name": "create_dag", "params": {"dag_id": "", "email": "", "executor_config": "", "kwargs": "", "max_active_tis_per_dag": "", "max_active_tis_per_dagrun": "", "on_execute_callback": "", "on_failure_callback": "", "on_retry_callback": "", "on_success_callback": "", "pool": "", "task_id": "", "trigger_rule": "", "with_dagrun_type": ""}, "params_descr": {"dag_id": "", "email": "", "executor_config": "", "kwargs": "", "max_active_tis_per_dag": "", "max_active_tis_per_dagrun": "", "on_execute_callback": "", "on_failure_callback": "", "on_retry_callback": "", "on_success_callback": "", "pool": "", "task_id": "", "trigger_rule": "", "with_dagrun_type": ""}, "params_occur": {"dag_id": [["dag_maker", "dag_id", "kwargs", "dag"]], "email": [["op", "EmptyOperator", "task_id", "task_id", "max_active_tis_per_dag", "max_active_tis_per_dag", "max_active_tis_per_dagrun", "max_active_tis_per_dagrun", "executor_config", "executor_config", "on_success_callback", "on_success_callback", "on_execute_callback", "on_execute_callback", "on_failure_callback", "on_failure_callback", "on_retry_callback", "on_retry_callback", "email", "email", "pool", "pool", "trigger_rule", "trigger_rule"]], "executor_config": [["op", "EmptyOperator", "task_id", "task_id", "max_active_tis_per_dag", "max_active_tis_per_dag", "max_active_tis_per_dagrun", "max_active_tis_per_dagrun", "executor_config", "executor_config", "on_success_callback", "on_success_callback", "on_execute_callback", "on_execute_callback", "on_failure_callback", "on_failure_callback", "on_retry_callback", "on_retry_callback", "email", "email", "pool", "pool", "trigger_rule", "trigger_rule"]], "kwargs": [["dag_maker", "dag_id", "kwargs", "dag"]], "max_active_tis_per_dag": [["op", "EmptyOperator", "task_id", "task_id", "max_active_tis_per_dag", "max_active_tis_per_dag", "max_active_tis_per_dagrun", "max_active_tis_per_dagrun", "executor_config", "executor_config", "on_success_callback", "on_success_callback", "on_execute_callback", "on_execute_callback", "on_failure_callback", "on_failure_callback", "on_retry_callback", "on_retry_callback", "email", "email", "pool", "pool", "trigger_rule", "trigger_rule"]], "max_active_tis_per_dagrun": [["op", "EmptyOperator", "task_id", "task_id", "max_active_tis_per_dag", "max_active_tis_per_dag", "max_active_tis_per_dagrun", "max_active_tis_per_dagrun", "executor_config", "executor_config", "on_success_callback", "on_success_callback", "on_execute_callback", "on_execute_callback", "on_failure_callback", "on_failure_callback", "on_retry_callback", "on_retry_callback", "email", "email", "pool", "pool", "trigger_rule", "trigger_rule"]], "on_execute_callback": [["op", "EmptyOperator", "task_id", "task_id", "max_active_tis_per_dag", "max_active_tis_per_dag", "max_active_tis_per_dagrun", "max_active_tis_per_dagrun", "executor_config", "executor_config", "on_success_callback", "on_success_callback", "on_execute_callback", "on_execute_callback", "on_failure_callback", "on_failure_callback", "on_retry_callback", "on_retry_callback", "email", "email", "pool", "pool", "trigger_rule", "trigger_rule"]], "on_failure_callback": [["op", "EmptyOperator", "task_id", "task_id", "max_active_tis_per_dag", "max_active_tis_per_dag", "max_active_tis_per_dagrun", "max_active_tis_per_dagrun", "executor_config", "executor_config", "on_success_callback", "on_success_callback", "on_execute_callback", "on_execute_callback", "on_failure_callback", "on_failure_callback", "on_retry_callback", "on_retry_callback", "email", "email", "pool", "pool", "trigger_rule", "trigger_rule"]], "on_retry_callback": [["op", "EmptyOperator", "task_id", "task_id", "max_active_tis_per_dag", "max_active_tis_per_dag", "max_active_tis_per_dagrun", "max_active_tis_per_dagrun", "executor_config", "executor_config", "on_success_callback", "on_success_callback", "on_execute_callback", "on_execute_callback", "on_failure_callback", "on_failure_callback", "on_retry_callback", "on_retry_callback", "email", "email", "pool", "pool", "trigger_rule", "trigger_rule"]], "on_success_callback": [["op", "EmptyOperator", "task_id", "task_id", "max_active_tis_per_dag", "max_active_tis_per_dag", "max_active_tis_per_dagrun", "max_active_tis_per_dagrun", "executor_config", "executor_config", "on_success_callback", "on_success_callback", "on_execute_callback", "on_execute_callback", "on_failure_callback", "on_failure_callback", "on_retry_callback", "on_retry_callback", "email", "email", "pool", "pool", "trigger_rule", "trigger_rule"]], "pool": [["op", "EmptyOperator", "task_id", "task_id", "max_active_tis_per_dag", "max_active_tis_per_dag", "max_active_tis_per_dagrun", "max_active_tis_per_dagrun", "executor_config", "executor_config", "on_success_callback", "on_success_callback", "on_execute_callback", "on_execute_callback", "on_failure_callback", "on_failure_callback", "on_retry_callback", "on_retry_callback", "email", "email", "pool", "pool", "trigger_rule", "trigger_rule"]], "task_id": [["op", "EmptyOperator", "task_id", "task_id", "max_active_tis_per_dag", "max_active_tis_per_dag", "max_active_tis_per_dagrun", "max_active_tis_per_dagrun", "executor_config", "executor_config", "on_success_callback", "on_success_callback", "on_execute_callback", "on_execute_callback", "on_failure_callback", "on_failure_callback", "on_retry_callback", "on_retry_callback", "email", "email", "pool", "pool", "trigger_rule", "trigger_rule"]], "trigger_rule": [["op", "EmptyOperator", "task_id", "task_id", "max_active_tis_per_dag", "max_active_tis_per_dag", "max_active_tis_per_dagrun", "max_active_tis_per_dagrun", "executor_config", "executor_config", "on_success_callback", "on_success_callback", "on_execute_callback", "on_execute_callback", "on_failure_callback", "on_failure_callback", "on_retry_callback", "on_retry_callback", "email", "email", "pool", "pool", "trigger_rule", "trigger_rule"]], "with_dagrun_type": [["with_dagrun_type", "None"], ["dag_maker", "create_dagrun", "run_type", "with_dagrun_type"]]}, "params_p": {"args": [], "dag_id": [["str", 0.625962488735456], ["int", 0.28970278261817445]], "email": [["int", 0.5060960207010394], ["Optional[str]", 0.10462156171437158], ["transfer.models.OrderNumber.SequenceID", 0.09338361511947368]], "executor_config": [["int", 0.5060960207010394], ["Optional[str]", 0.10462156171437158], ["transfer.models.OrderNumber.SequenceID", 0.09338361511947368]], "kwargs": [], "max_active_tis_per_dag": [["int", 0.5060960207010394], ["Optional[str]", 0.10462156171437158], ["transfer.models.OrderNumber.SequenceID", 0.09338361511947368]], "max_active_tis_per_dagrun": [["int", 0.5060960207010394], ["Optional[str]", 0.10462156171437158], ["transfer.models.OrderNumber.SequenceID", 0.09338361511947368]], "on_execute_callback": [["int", 0.5060960207010394], ["Optional[str]", 0.10462156171437158], ["transfer.models.OrderNumber.SequenceID", 0.09338361511947368]], "on_failure_callback": [["int", 0.5060960207010394], ["Optional[str]", 0.10462156171437158], ["transfer.models.OrderNumber.SequenceID", 0.09338361511947368]], "on_retry_callback": [["int", 0.5060960207010394], ["Optional[str]", 0.10462156171437158], ["transfer.models.OrderNumber.SequenceID", 0.09338361511947368]], "on_success_callback": [["int", 0.5060960207010394], ["Optional[str]", 0.10462156171437158], ["transfer.models.OrderNumber.SequenceID", 0.09338361511947368]], "pool": [["int", 0.5060960207010394], ["Optional[str]", 0.10462156171437158], ["transfer.models.OrderNumber.SequenceID", 0.09338361511947368]], "task_id": [["int", 0.5060960207010394], ["Optional[str]", 0.10462156171437158], ["transfer.models.OrderNumber.SequenceID", 0.09338361511947368]], "trigger_rule": [["int", 0.5060960207010394], ["Optional[str]", 0.10462156171437158], ["transfer.models.OrderNumber.SequenceID", 0.09338361511947368]], "with_dagrun_type": [["str", 0.8806323079216528], ["int", 0.11936769207834715]]}, "q_name": "create_dummy_dag.<locals>.create_dag", "ret_exprs": ["return dag, op"], "ret_type": "", "ret_type_p": [["str", 0.17110205039527115], ["float", 0.1709168223423838], ["bool", 0.11400823854393691], ["int", 0.10495923555915262]], "variables": {"op": ""}, "variables_p": {"op": [["int", 0.7770809592343862], ["Dict[int, bytes]", 0.1304656383653459], ["list", 0.09245340240026796]]}}, {"docstring": {"func": "Create a `DAG` with a single `EmptyOperator` task.", "long_descr": "DagRun and DagModel is also created.\n\nApart from the already existing arguments, any other argument in kwargs\nis passed to the DAG and not to the EmptyOperator task.\n\nIf you have an argument that you want to pass to the EmptyOperator that\nis not here, please use `default_args` so that the DAG will pass it to the\nTask::\n\n    dag, task = create_dummy_dag(default_args={'start_date':timezone.datetime(2016, 1, 1)})\n\nYou cannot be able to alter the created DagRun or DagModel, use `dag_maker` fixture instead.", "ret": null}, "fn_lc": [[694, 0], [747, 21]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "create_dummy_dag", "params": {"dag_maker": ""}, "params_descr": {"dag_maker": ""}, "params_occur": {"dag_maker": []}, "params_p": {"args": [], "dag_maker": [["str", 0.2], ["Iterator[str]", 0.1], ["bool", 0.1], ["float", 0.1]], "kwargs": []}, "q_name": "create_dummy_dag", "ret_exprs": ["return create_dag"], "ret_type": "", "ret_type_p": [["Tuple[int, int]", 0.10088967898236056], ["Dict[str, Any]", 0.09307119781735784], ["str", 0.09108092439697427]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[757, 4], [785, 17]], "fn_var_ln": {"_": [[770, 8], [770, 9]], "dagrun": [[779, 8], [779, 14]], "dagrun_kwargs": [[772, 8], [772, 21]], "execution_date": [[769, 12], [769, 26]], "state": [[782, 8], [782, 16]], "task": [[781, 8], [781, 15]], "ti": [[780, 9], [780, 11]]}, "fn_var_occur": {"_": [["_", "task", "create_dummy_dag", "with_dagrun_type", "None", "kwargs"]], "dagrun": [["dagrun", "dag_maker", "create_dagrun", "dagrun_kwargs"], ["ti", "dagrun", "task_instances"]], "dagrun_kwargs": [["dagrun_kwargs", "execution_date", "dagrun_state"], ["dagrun_kwargs", "run_id"], ["dagrun_kwargs", "run_type"], ["dagrun_kwargs", "data_interval"], ["dagrun", "dag_maker", "create_dagrun", "dagrun_kwargs"]], "execution_date": [["execution_date", "None"], ["execution_date", "timezone", "utcnow"], ["dagrun_kwargs", "execution_date", "dagrun_state"]], "state": [["ti", "state", "state"]], "task": [["_", "task", "create_dummy_dag", "with_dagrun_type", "None", "kwargs"], ["ti", "task", "task"]], "ti": [["ti", "dagrun", "task_instances"], ["ti", "task", "task"], ["ti", "state", "state"]]}, "name": "maker", "params": {"dagrun_state": "", "data_interval": "", "execution_date": "", "kwargs": "", "run_id": "", "run_type": "", "state": ""}, "params_descr": {"dagrun_state": "", "data_interval": "", "execution_date": "", "kwargs": "", "run_id": "", "run_type": "", "state": ""}, "params_occur": {"dagrun_state": [["dagrun_kwargs", "execution_date", "dagrun_state"]], "data_interval": [["data_interval", "None"], ["dagrun_kwargs", "data_interval"]], "execution_date": [["execution_date", "None"], ["execution_date", "timezone", "utcnow"], ["dagrun_kwargs", "execution_date", "dagrun_state"]], "kwargs": [["_", "task", "create_dummy_dag", "with_dagrun_type", "None", "kwargs"]], "run_id": [["run_id", "None"], ["dagrun_kwargs", "run_id"]], "run_type": [["run_type", "None"], ["dagrun_kwargs", "run_type"]], "state": [["ti", "state", "state"]]}, "params_p": {"args": [], "dagrun_state": [["str", 0.9230585894247396], ["datetime.timedelta", 0.07694141057526048]], "data_interval": [["Optional[str]", 0.5497192612169288], ["str", 0.17657306930503092], ["Optional[bool]", 0.1764808929719278], ["Optional[List[str]]", 0.09722677650611251]], "execution_date": [["str", 0.4077497370533707], ["datetime.date", 0.2935471736476173], ["Optional[str]", 0.1118507096717576], ["Set[str]", 0.09806188390838382], ["list", 0.08879049571887063]], "kwargs": [], "run_id": [["Optional[str]", 0.6289300106323685], ["List[annofabapi.models.LabelV1]", 0.11490339838278209], ["Optional[List[\"SoftwareApplication\"]]", 0.09028838167032184], ["str", 0.08314589449901488], ["Optional[int]", 0.08273231481551246]], "run_type": [["str", 0.4999684538331807], ["Optional[List[\"SoftwareApplication\"]]", 0.11932391694426872], ["Optional[int]", 0.09997818077158947], ["Optional[str]", 0.09803415493406184]], "state": [["str", 0.32620505487757284], ["int", 0.19503762668891483], ["bool", 0.19503762668891483], ["Optional[str]", 0.18031355694614354], ["airflow.models.TaskInstance", 0.10340613479845405]]}, "q_name": "create_task_instance.<locals>.maker", "ret_exprs": ["return ti"], "ret_type": "airflow.models.taskinstance.TaskInstance", "ret_type_p": [["int", 0.30000000000000004], ["Callable", 0.2], ["models.Question", 0.1], ["str", 0.1]], "variables": {"_": "", "dagrun": "", "dagrun_kwargs": "", "execution_date": "", "state": "", "task": "", "ti": ""}, "variables_p": {"_": [["str", 0.6962441973498464], ["int", 0.19267978850292283], ["Dict[str, str]", 0.11107601414723067]], "dagrun": [["str", 0.4910352663048221], ["bool", 0.14713651932929245], ["dict", 0.06755517570730041]], "dagrun_kwargs": [["Dict[str, Union[float, str]]", 0.1882529359212616], ["int", 0.1662286478283083], ["str", 0.15838322195052507], ["list", 0.1301974783192556], ["asgard.models.user.User", 0.087321869027563], ["Dict[str, Any]", 0.07897478856940135], ["dict", 0.0779302233843557]], "execution_date": [["str", 0.3999264256781454], ["Type[prm.journals.models.moods.Mood]", 0.10738401682138395], ["datetime.date", 0.10458532551073273], ["datetime.datetime.datetime", 0.09449374527737962], ["int", 0.09236059858868724], ["datetime.date.time.date", 0.09206595506993391]], "state": [["str", 0.7999999999999999], ["Dict[str, str]", 0.1]], "task": [["List[str]", 0.24582004881956754], ["str", 0.1751674343324871], ["dict", 0.09671168808035246]], "ti": [["str", 0.7321120393688458], ["Dict[str, List[Any]]", 0.08986410532634215], ["Union[Literal, str]", 0.0859451673673026]]}}, {"docstring": {"func": "Create a TaskInstance, and associated DB rows (DagRun, DagModel, etc).", "long_descr": "Uses ``create_dummy_dag`` to create the dag structure.", "ret": null}, "fn_lc": [[751, 0], [787, 16]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "create_task_instance", "params": {"create_dummy_dag": "", "dag_maker": ""}, "params_descr": {"create_dummy_dag": "", "dag_maker": ""}, "params_occur": {"create_dummy_dag": [], "dag_maker": []}, "params_p": {"args": [], "create_dummy_dag": [["bool", 0.49979080964970796], ["int", 0.1504668942107133], ["Dict[str, Dict[str, Any]]", 0.10220792570176752]], "dag_maker": [["bool", 0.49979080964970796], ["int", 0.1504668942107133], ["Dict[str, Dict[str, Any]]", 0.10220792570176752]], "kwargs": []}, "q_name": "create_task_instance", "ret_exprs": ["return maker"], "ret_type": "", "ret_type_p": [["bool", 0.24677850194336373], ["str", 0.2198029879488701], ["int", 0.16338391613052133], ["zam_repondeur.models.Lecture", 0.0909945622362819], ["float", 0.08056734819878586]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[792, 4], [807, 17]], "fn_var_ln": {"dagrun_kwargs": [[805, 12], [805, 25]], "ti": [[806, 9], [806, 11]]}, "fn_var_occur": {"dagrun_kwargs": [["dagrun_kwargs", "execution_date"], ["ti", "dag_maker", "create_dagrun", "dagrun_kwargs", "task_instances"]], "ti": [["ti", "dag_maker", "create_dagrun", "dagrun_kwargs", "task_instances"]]}, "name": "_create_task_instance", "params": {"dag_id": "", "execution_date": "", "operator_class": "", "operator_kwargs": "", "session": ""}, "params_descr": {"dag_id": "", "execution_date": "", "operator_class": "", "operator_kwargs": "", "session": ""}, "params_occur": {"dag_id": [["dag_maker", "dag_id", "dag_id", "session", "session"]], "execution_date": [["execution_date", "None"], ["dagrun_kwargs", "execution_date"]], "operator_class": [["operator_class", "operator_kwargs"]], "operator_kwargs": [["operator_class", "operator_kwargs"]], "session": [["dag_maker", "dag_id", "dag_id", "session", "session"]]}, "params_p": {"args": [], "dag_id": [["str", 0.22167190051363136], ["Optional[int]", 0.20008777730313332], ["bool", 0.18029002915014403], ["float", 0.12680912721616286], ["int", 0.08992126358735555], ["grouper.models.group.Group", 0.08635712893210433]], "execution_date": [["Optional[Union[\"Date\", str]]", 0.4353151649730717], ["str", 0.26591761907291833], ["Optional[datetime.date]", 0.2171280152824315], ["Optional[str]", 0.08163920067157845]], "kwargs": [], "operator_class": [["str", 0.39422404885848994], ["bool", 0.3012079545763535], ["int", 0.09702388587033745]], "operator_kwargs": [["str", 0.39422404885848994], ["bool", 0.3012079545763535], ["int", 0.09702388587033745]], "session": [["str", 0.22167190051363136], ["Optional[int]", 0.20008777730313332], ["bool", 0.18029002915014403], ["float", 0.12680912721616286], ["int", 0.08992126358735555], ["grouper.models.group.Group", 0.08635712893210433]]}, "q_name": "create_task_instance_of_operator.<locals>._create_task_instance", "ret_exprs": ["return ti"], "ret_type": "airflow.models.taskinstance.TaskInstance", "ret_type_p": [["bool", 0.24677850194336373], ["str", 0.2198029879488701], ["int", 0.16338391613052133], ["zam_repondeur.models.Lecture", 0.0909945622362819], ["float", 0.08056734819878586]], "variables": {"dagrun_kwargs": "", "ti": ""}, "variables_p": {"dagrun_kwargs": [["list", 0.17430914262939656], ["int", 0.09942238323038567], ["List[Dict[str, Any]]", 0.09937619575631153], ["str", 0.08289319804354867]], "ti": [["str", 0.19102769262823638], ["int", 0.17162166477055174], ["bytes", 0.13147271979782202], ["bool", 0.10824312554182834], ["dict", 0.10110987431707087], ["list", 0.0800386718608339]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[791, 0], [809, 32]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "create_task_instance_of_operator", "params": {"dag_maker": ""}, "params_descr": {"dag_maker": ""}, "params_occur": {"dag_maker": []}, "params_p": {"args": [], "dag_maker": [["str", 0.18579780057607312], ["List[int]", 0.10305456728413204], ["Callable", 0.08433069169747578], ["Optional", 0.08433069169747578], ["bytes", 0.0820117489319346], ["int", 0.07342024332731419]], "kwargs": []}, "q_name": "create_task_instance_of_operator", "ret_exprs": ["return _create_task_instance"], "ret_type": "", "ret_type_p": [["str", 0.22523035758090523], ["dict", 0.19271127110002262], ["List[lunch_buddies.models.polls.Poll]", 0.10832687646363945], ["raiden.utils.Dict", 0.09647929728579417], ["services.shop.order.models.order_evenOrderEvent", 0.08173970816058078]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[814, 4], [817, 19]], "fn_var_ln": {"task": [[816, 12], [816, 16]]}, "fn_var_occur": {"task": [["task", "operator_class", "operator_kwargs"]]}, "name": "_create_task_of_operator", "params": {"dag_id": "", "operator_class": "", "operator_kwargs": "", "session": ""}, "params_descr": {"dag_id": "", "operator_class": "", "operator_kwargs": "", "session": ""}, "params_occur": {"dag_id": [["dag_maker", "dag_id", "dag_id", "session", "session"]], "operator_class": [["task", "operator_class", "operator_kwargs"]], "operator_kwargs": [["task", "operator_class", "operator_kwargs"]], "session": [["dag_maker", "dag_id", "dag_id", "session", "session"]]}, "params_p": {"args": [], "dag_id": [["sqlalchemy.orm.session.Session", 0.21103608348179725], ["int", 0.19808389287053285], ["app.models.User", 0.19464732166444063], ["str", 0.10629608576987797], ["sqlalchemy.orm.Session", 0.08560245721155658]], "kwargs": [], "operator_class": [["str", 0.3562595604930341], ["bool", 0.18313068891705953], ["Optional[Callable]", 0.11068624249463947], ["Callable[[Any], bool]", 0.10579403925445183], ["float", 0.09500021880877708]], "operator_kwargs": [["str", 0.3562595604930341], ["bool", 0.18313068891705953], ["Optional[Callable]", 0.11068624249463947], ["Callable[[Any], bool]", 0.10579403925445183], ["float", 0.09500021880877708]], "session": [["sqlalchemy.orm.session.Session", 0.21103608348179725], ["int", 0.19808389287053285], ["app.models.User", 0.19464732166444063], ["str", 0.10629608576987797], ["sqlalchemy.orm.Session", 0.08560245721155658]]}, "q_name": "create_task_of_operator.<locals>._create_task_of_operator", "ret_exprs": ["return task"], "ret_type": "", "ret_type_p": [["str", 0.3074766892752872], ["Dict[str, Any]", 0.13749172329480674], ["bytes", 0.1009042756291374], ["List[lunch_buddies.models.polls.Poll]", 0.09974224628325654], ["viewer.models.Gallery", 0.07822871689513768]], "variables": {"task": ""}, "variables_p": {"task": [["str", 0.20023461852226537], ["dict", 0.12145878573686643], ["List[str]", 0.09526719081711041], ["Dict[str, Dict[str, Any]]", 0.08982821175804614], ["Dict[str, str]", 0.08943359799530387], ["int", 0.08886735256049948]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[813, 0], [819, 35]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "create_task_of_operator", "params": {"dag_maker": ""}, "params_descr": {"dag_maker": ""}, "params_occur": {"dag_maker": []}, "params_p": {"args": [], "dag_maker": [["str", 0.4176142324984755], ["bool", 0.25697041326643966], ["Sequence[int]", 0.07655685422889094]], "kwargs": []}, "q_name": "create_task_of_operator", "ret_exprs": ["return _create_task_of_operator"], "ret_type": "", "ret_type_p": [["str", 0.11246888540265211], ["exporwiki.types.PrimalEngramEntry", 0.09623199752806011], ["sqlalchemy.orm.session.Session", 0.09454391591884281], ["Dict[str, Any]", 0.09383063454135694], ["dict", 0.09343839174033373], ["List[int]", 0.09192048856867105]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[823, 0], [828, 26]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "session", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "session", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[833, 4], [844, 18]], "fn_var_ln": {"dag": [[840, 8], [840, 11]], "dag_file": [[837, 8], [837, 16]], "dagbag": [[838, 8], [838, 14]]}, "fn_var_occur": {"dag": [["dag", "dagbag", "get_dag", "dag_id"], ["dag", "sync_to_db"], ["SerializedDagModel", "write_dag", "dag"]], "dag_file": [["dag_file", "os", "path", "join", "os", "path", "dirname", "os", "path", "realpath", "__file__", "dag_id"], ["dagbag", "DagBag", "dag_folder", "dag_file", "include_examples", "False"]], "dagbag": [["airflow", "models", "dagbag", "DagBag"], ["dagbag", "DagBag", "dag_folder", "dag_file", "include_examples", "False"], ["dag", "dagbag", "get_dag", "dag_id"]]}, "name": "_get", "params": {"dag_id": ""}, "params_descr": {"dag_id": ""}, "params_occur": {"dag_id": [["dag_file", "os", "path", "join", "os", "path", "dirname", "os", "path", "realpath", "__file__", "dag_id"], ["dag", "dagbag", "get_dag", "dag_id"]]}, "params_p": {"args": [], "dag_id": [["str", 0.9189223329142714], ["int", 0.08107766708572832]], "kwargs": []}, "q_name": "get_test_dag.<locals>._get", "ret_exprs": ["return dag"], "ret_type": "", "ret_type_p": [["str", 0.19999999999999998], ["bool", 0.09999999999999999], ["pricemonitor.config.Coin", 0.09999999999999999]], "variables": {"dag": "", "dag_file": "", "dagbag": ""}, "variables_p": {"dag": [["str", 0.33749113578559453], ["list", 0.1504217932033797], ["decksite.data.models.person.Person", 0.10170913342297813], ["List[str]", 0.0763483648658988], ["flask.blueprints.Blueprint", 0.07067016995357107], ["List[Dict[str, Any]]", 0.07009805858660871]], "dag_file": [["str", 0.7664279175707607], ["list", 0.12363681894201789], ["List[str]", 0.10993526348722156]], "dagbag": [["int", 0.1380238568883762], ["list", 0.12487570715236826], ["crux.models.dataseDataset", 0.10941988215323649], ["zilencer.models.RemoteZulipServer", 0.0973528672240566], ["lms.lmsdb.models.Solution", 0.09556984331792755], ["List[int]", 0.08440483007647022], ["topicdb.core.models.occurrence.Occurrence", 0.08262156196154735]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[832, 0], [846, 15]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "get_test_dag", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "get_test_dag", "ret_exprs": ["return _get"], "ret_type": "", "ret_type_p": [["str", 0.4712169031480742], ["bool", 0.2420153668556278], ["Dict[str, Any]", 0.10201856490791132]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[858, 8], [860, 28]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "_delete_log_template", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "create_log_template.<locals>._create_log_template.<locals>._delete_log_template", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[853, 4], [862, 50]], "fn_var_ln": {"log_template": [[854, 8], [854, 20]]}, "fn_var_occur": {"log_template": []}, "name": "_create_log_template", "params": {"elasticsearch_id": "", "filename_template": ""}, "params_descr": {"elasticsearch_id": "", "filename_template": ""}, "params_occur": {"elasticsearch_id": [], "filename_template": []}, "params_p": {"args": [], "elasticsearch_id": [["str", 0.5090352469089923], ["bool", 0.2964175269767869], ["bytes", 0.10182044791377347], ["int", 0.09272677820044721]], "filename_template": [["str", 0.5090352469089923], ["bool", 0.2964175269767869], ["bytes", 0.10182044791377347], ["int", 0.09272677820044721]], "kwargs": []}, "q_name": "create_log_template.<locals>._create_log_template", "ret_exprs": [], "ret_type": "", "variables": {"log_template": ""}, "variables_p": {"log_template": [["str", 1.0000000000000002]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[850, 0], [864, 31]], "fn_var_ln": {"session": [[851, 4], [851, 11]]}, "fn_var_occur": {"session": []}, "name": "create_log_template", "params": {"request": ""}, "params_descr": {"request": ""}, "params_occur": {"request": []}, "params_p": {"args": [], "kwargs": [], "request": [["int", 0.18625234979007538]]}, "q_name": "create_log_template", "ret_exprs": ["return _create_log_template"], "ret_type": "", "ret_type_p": [["raiden.tests.integration.fixtures.raiden_network.RestartNode", 0.18156209669212395]], "variables": {"session": ""}, "variables_p": {"session": [["int", 0.29999999999999993], ["session.HexpySession", 0.09999999999999998], ["str", 0.09999999999999998], ["float", 0.09999999999999998], ["sqlalchemy.orm.session.Session", 0.09999999999999998]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[868, 0], [875, 45]], "fn_var_ln": {"logging_config": [[874, 4], [874, 18]]}, "fn_var_occur": {"logging_config": [["logging_config", "import_string", "settings", "LOGGING_CLASS_PATH"], ["logging", "config", "dictConfig", "logging_config"]]}, "name": "reset_logging_config", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "reset_logging_config", "ret_exprs": [], "ret_type": "", "variables": {"logging_config": ""}, "variables_p": {"logging_config": [["dict", 0.2680277384383293], ["str", 0.1861300301012911], ["Union[Literal, str]", 0.10984775783900125], ["Dict[str, Union[int, str]]", 0.08759033056399756], ["Tuple[str]", 0.08105657965362528]]}}, {"docstring": {"func": "Clear DB before each test module run.", "long_descr": null, "ret": null}, "fn_lc": [[879, 0], [896, 99]], "fn_var_ln": {"dist_option": [[883, 4], [883, 15]], "exc_module": [[892, 8], [892, 18]], "exc_name_parts": [[891, 8], [891, 22]], "extra_msg": [[895, 8], [895, 17]]}, "fn_var_occur": {"dist_option": [["dist_option", "getattr", "request", "config", "option"], ["dist_option", "hasattr", "request", "config"]], "exc_module": [["exc_module", "type", "ex", "__module__"], ["exc_name_parts", "insert", "exc_module"]], "exc_name_parts": [["exc_name_parts", "type", "ex", "__name__"], ["exc_name_parts", "insert", "exc_module"], ["pytest", "exit", "extra_msg", "join", "exc_name_parts", "ex"]], "extra_msg": [["extra_msg", "request", "config", "option", "db_init"], ["pytest", "exit", "extra_msg", "join", "exc_name_parts", "ex"]]}, "name": "_clear_db", "params": {"request": ""}, "params_descr": {"request": ""}, "params_occur": {"request": [["request", "config", "option", "db_cleanup"], ["dist_option", "getattr", "request", "config", "option"], ["dist_option", "hasattr", "request", "config"], ["extra_msg", "request", "config", "option", "db_init"]]}, "params_p": {"args": [], "kwargs": [], "request": [["flask.Request", 0.21458359719815806]]}, "q_name": "_clear_db", "ret_exprs": ["return", "return"], "ret_type": "", "ret_type_p": [["List[django.db.models.Model]", 0.14071156439686075], ["Iterator[Dict[str, str]]", 0.1020484053085523], ["mypy.types.Instance", 0.09611964794392859], ["Mapping[str, Any]", 0.08940651811578486], ["Type", 0.08617285170869451], ["Dict[str, Any]", 0.08089405974565986]], "variables": {"dist_option": "", "exc_module": "", "exc_name_parts": "", "extra_msg": ""}, "variables_p": {"dist_option": [["Dict[str, bool]", 0.20830427328577208], ["Dict[str, str]", 0.12279783761736522], ["Dict[str, Any]", 0.10398897586290272], ["Dict[str, Union[Any, str]]", 0.10198022350204704], ["Dict[str, Dict[str, Any]]", 0.09376469368148876], ["dict", 0.09095975454013276], ["int", 0.0877322943613835], ["Dict[str, Union[bytes, str]]", 0.08761393277945734]], "exc_module": [["MutableSequence[str]", 0.10986627977296896], ["Callable", 0.1095166095352982], ["Optional[Match[str]]", 0.10388310761495491], ["List[Tuple[Any, Any, str]]", 0.09164795857577725], ["Dict[str, Tuple[int, int]]", 0.09075908186939279], ["bytes", 0.09003435141821489]], "exc_name_parts": [["str", 0.5993002109644944], ["cmk.utils.type_defs.SectionName", 0.19456411654185135], ["Optional[str]", 0.09616501259618826]], "extra_msg": [["bool", 0.3226773839896734], ["str", 0.32012177795164404], ["List[Dict[str, Any]]", 0.18581069330605482], ["List[str]", 0.0870747925800661], ["bytes", 0.08431535217256166]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[900, 0], [905, 43]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "clear_lru_cache", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "clear_lru_cache", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "imports": ["__future__", "annotations", "json", "os", "subprocess", "sys", "contextlib", "ExitStack", "suppress", "datetime", "datetime", "timedelta", "typing", "TYPE_CHECKING", "pytest", "time_machine", "itsdangerous", "URLSafeSerializer", "airflow", "settings", "airflow", "models", "tasklog", "LogTemplate", "tests", "test_utils", "db", "clear_all", "tests", "test_utils", "perf", "perf_kit", "sqlalchemy", "count_queries", "trace_queries", "airflow", "models", "taskinstance", "TaskInstance", "airflow", "configuration", "conf", "airflow", "utils", "db", "flask", "Flask", "airflow", "configuration", "conf", "airflow", "utils", "db", "airflow", "www", "app", "sync_appbuilder_roles", "airflow", "www", "extensions", "init_appbuilder", "init_appbuilder", "tests", "test_utils", "config", "conf_vars", "airflow", "www", "app", "lazy_object_proxy", "airflow", "utils", "log", "logging_mixin", "LoggingMixin", "airflow", "models", "DagBag", "airflow", "models", "DagModel", "airflow", "models", "serialized_dag", "SerializedDagModel", "airflow", "utils", "timezone", "airflow", "utils", "state", "State", "airflow", "utils", "types", "DagRunType", "airflow", "settings", "airflow", "models", "DAG", "airflow", "utils", "timezone", "airflow", "models", "DagModel", "DagRun", "TaskInstance", "XCom", "airflow", "models", "dataset", "DatasetEvent", "airflow", "models", "serialized_dag", "SerializedDagModel", "airflow", "models", "taskmap", "TaskMap", "airflow", "utils", "retries", "run_with_db_retries", "airflow", "operators", "empty", "EmptyOperator", "airflow", "utils", "types", "DagRunType", "airflow", "utils", "timezone", "airflow", "utils", "session", "create_session", "airflow", "models", "dagbag", "DagBag", "airflow", "models", "serialized_dag", "SerializedDagModel", "logging.config", "airflow", "settings", "airflow", "utils", "module_loading", "import_string", "airflow", "executors", "executor_loader", "ExecutorLoader", "airflow", "utils", "entry_points", "_get_grouped_entry_points"], "mod_var_ln": {"ALLOWED_TRACE_SQL_COLUMNS": [[106, 0], [106, 25]], "collect_ignore": [[56, 0], [56, 14]], "tests_directory": [[35, 0], [35, 15]]}, "mod_var_occur": {"ALLOWED_TRACE_SQL_COLUMNS": [["allowed_trace_sql_columns_list", "join", "ALLOWED_TRACE_SQL_COLUMNS"]], "collect_ignore": [], "tests_directory": [["os", "environ", "os", "path", "join", "tests_directory"]]}, "no_types_annot": {"D": 4, "I": 0, "U": 201}, "session_id": "KYJbT6CF823KWHMiMfEjBD1xOWaFIZj0FCqxHxVphxs", "set": null, "tc": [false, null], "type_annot_cove": 0.02, "typed_seq": "", "untyped_seq": "", "variables": {"ALLOWED_TRACE_SQL_COLUMNS": "", "collect_ignore": "", "tests_directory": ""}, "variables_p": {"ALLOWED_TRACE_SQL_COLUMNS": [["str", 0.4897389009183548], ["List[str]", 0.20939378146843013], ["bool", 0.1098730389939485], ["int", 0.09720941168380871], ["Optional[str]", 0.09378486693545782]], "collect_ignore": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "tests_directory": [["str", 0.6966513744014458], ["List[str]", 0.10773620366822281], ["List[Union[Any, Any]]", 0.059583136595728566]]}}}