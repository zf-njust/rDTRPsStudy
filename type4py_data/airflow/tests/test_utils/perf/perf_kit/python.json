{"error": null, "response": {"classes": [], "funcs": [{"docstring": {"func": "This decorator provide deterministic profiling. It generate and save flame graph to file. It uses``pyspy``", "long_descr": "internally.\n\nRunning py-spy inside of a docker container will also usually bring up a permissions denied error\neven when running as root.\n\nThis error is caused by docker restricting the process_vm_readv system call we are using. This can be\noverridden by setting --cap-add SYS_PTRACE when starting the docker container.\n\nAlternatively you can edit the docker-compose yaml file\n\n.. code-block:: yaml\n\n    your_service:\n      cap_add:\n      - SYS_PTRACE\n\nIn the case of Airflow Breeze, you should modify the ``tests/utils/perf/perf_kit/python.py`` file.", "ret": null}, "fn_lc": [[31, 0], [62, 45]], "fn_var_ln": {"filename": [[54, 4], [54, 12]], "pid": [[52, 4], [52, 7]], "pyspy_pid": [[55, 4], [55, 13]], "suffix": [[53, 4], [53, 10]]}, "fn_var_occur": {"filename": [["filename", "PYSPY_OUTPUT", "suffix", "pid"], ["pyspy_pid", "os", "spawnlp", "os", "P_NOWAIT", "filename", "pid"], ["print", "filename"]], "pid": [["pid", "str", "os", "getpid"], ["filename", "PYSPY_OUTPUT", "suffix", "pid"], ["pyspy_pid", "os", "spawnlp", "os", "P_NOWAIT", "filename", "pid"]], "pyspy_pid": [["pyspy_pid", "os", "spawnlp", "os", "P_NOWAIT", "filename", "pid"], ["os", "kill", "pyspy_pid", "signal", "SIGINT"]], "suffix": [["suffix", "datetime", "datetime", "now", "isoformat"], ["filename", "PYSPY_OUTPUT", "suffix", "pid"]]}, "name": "pyspy", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "pyspy", "ret_exprs": [], "ret_type": "", "variables": {"filename": "", "pid": "", "pyspy_pid": "", "suffix": ""}, "variables_p": {"filename": [["List[str]", 0.7159268019406523], ["list", 0.10871805697582605], ["Tuple[str, str, str, str, str, str, str, str]", 0.0921370413879326], ["str", 0.08321809969558934]], "pid": [["str", 0.4026018819145365], ["Dict[int, str]", 0.09592087462623812], ["Callable(os.path.join)[..., Any][[[Named(a, Union[_PathLike[str], str]), Variable(Union[_PathLike[str], str])], str][Any, Any]]", 0.07699329224492994]], "pyspy_pid": [["slice", 0.35852115476637014], ["tuple", 0.128341330557782], ["float", 0.11349358610687235], ["List[int]", 0.11285734788480352], ["List[List[None]]", 0.10088396646701295], ["str", 0.08887477047918191]], "suffix": [["datetime.datetime", 0.7293982831163056], ["datetime.datetime.timedelta", 0.27060171688369444]]}}, {"docstring": {"func": "This decorator provide deterministic profiling. It uses ``cProfile`` internally.  It generates statistic", "long_descr": "and print on the screen.", "ret": null}, "fn_lc": [[66, 0], [83, 30]], "fn_var_ln": {"profile": [[71, 4], [71, 11]], "pstatistics": [[78, 8], [78, 19]], "stat": [[77, 8], [77, 12]]}, "fn_var_occur": {"profile": [["profile", "cProfile", "Profile"], ["profile", "enable"], ["profile", "disable"], ["pstatistics", "pstats", "Stats", "profile", "stream", "stat", "sort_stats"]], "pstatistics": [["pstatistics", "pstats", "Stats", "profile", "stream", "stat", "sort_stats"], ["pstatistics", "print_callers"], ["pstatistics", "print_stats"]], "stat": [["stat", "io", "StringIO"], ["pstatistics", "pstats", "Stats", "profile", "stream", "stat", "sort_stats"], ["print", "stat", "getvalue"]]}, "name": "profiled", "params": {"print_callers": ""}, "params_descr": {"print_callers": ""}, "params_occur": {"print_callers": [["pstatistics", "print_callers"]]}, "params_p": {"args": [], "kwargs": [], "print_callers": [["int", 0.30000000000000004], ["Callable", 0.2], ["str", 0.1]]}, "q_name": "profiled", "ret_exprs": [], "ret_type": "", "variables": {"profile": "", "pstatistics": "", "stat": ""}, "variables_p": {"profile": [["cProfile.Profile", 0.0666330222110775]], "pstatistics": [["Tuple[int, int, int]", 0.26494575637459333], ["bytes", 0.24751717949810945], ["str", 0.16147925507209193]], "stat": [["io.BufferedReader", 1.0]]}}, {"docstring": {"func": "Load modules.", "long_descr": null, "ret": ""}, "fn_lc": [[88, 4], [101, 72]], "fn_var_ln": {"dag_file": [[100, 8], [100, 16]], "log": [[98, 8], [98, 11]], "processor": [[99, 8], [99, 17]]}, "fn_var_occur": {"dag_file": [["dag_file", "os", "path", "join", "os", "path", "dirname", "airflow", "__file__"], ["processor", "process_file", "file_path", "dag_file", "callback_requests"]], "log": [["log", "logging", "getLogger", "__name__"], ["processor", "DagFileProcessor", "dag_ids", "log", "log"]], "processor": [["airflow", "dag_processing", "processor", "DagFileProcessor"], ["processor", "DagFileProcessor", "dag_ids", "log", "log"], ["processor", "process_file", "file_path", "dag_file", "callback_requests"]]}, "name": "case", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "case", "ret_exprs": [], "ret_type": "", "variables": {"dag_file": "", "log": "", "processor": ""}, "variables_p": {"dag_file": [["str", 0.9999999999999999]], "log": [["logging.Logger", 0.9999999999999999]], "processor": [["str", 0.08661763600754467]]}}], "imports": ["__future__", "annotations", "contextlib", "cProfile", "datetime", "io", "os", "pstats", "signal", "logging", "airflow", "airflow", "dag_processing", "processor", "DagFileProcessor"], "mod_var_ln": {"PYSPY_OUTPUT": [[27, 0], [27, 12]]}, "mod_var_occur": {"PYSPY_OUTPUT": [["filename", "PYSPY_OUTPUT", "suffix", "pid"]]}, "no_types_annot": {"D": 0, "I": 0, "U": 15}, "session_id": "rEA0l_d-Jm_4exDqFl0neznU3y7GhsC5XkMQ5SdJTvY", "set": null, "tc": [false, null], "type_annot_cove": 0.0, "typed_seq": "", "untyped_seq": "", "variables": {"PYSPY_OUTPUT": ""}, "variables_p": {"PYSPY_OUTPUT": [["str", 0.9199106689476915]]}}}