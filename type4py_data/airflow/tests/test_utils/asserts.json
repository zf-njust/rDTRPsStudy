{"error": null, "response": {"classes": [{"cls_lc": [[43, 0], [71, 41]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[51, 4], [52, 31]], "fn_var_ln": {"result": [[52, 8], [52, 19]]}, "fn_var_occur": {"result": [["self", "result", "Counter"]]}, "name": "__init__", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "result", "Counter"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "CountQueries.__init__", "ret_exprs": [], "ret_type": "", "variables": {"result": ""}, "variables_p": {"result": [["dict", 6.954089972286801e-11], ["Dict[str, str]", 2.649942908634091e-11], ["Dict[str, Any]", 2.5853681741566274e-11]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[54, 4], [56, 26]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "__enter__", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["event", "listen", "airflow", "settings", "engine", "self", "after_cursor_execute"], ["self", "result"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "CountQueries.__enter__", "ret_exprs": ["return self.result"], "ret_type": "", "ret_type_p": [["bool", 0.16408864410171026], ["Optional[Union[str, Any]]", 0.08753798278800795]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[58, 4], [60, 65]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "__exit__", "params": {"self": "", "tb": "", "type_": "", "value": ""}, "params_descr": {"self": "", "tb": "", "type_": "", "value": ""}, "params_occur": {"self": [["event", "remove", "airflow", "settings", "engine", "self", "after_cursor_execute"], ["log", "debug", "sum", "self", "result", "values"]], "tb": [], "type_": [], "value": []}, "params_p": {"args": [], "kwargs": [], "self": [], "tb": [["Optional[BaseException]", 0.1]], "type_": [["Optional[BaseException]", 0.1]], "value": [["Optional[BaseException]", 0.1]]}, "q_name": "CountQueries.__exit__", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[62, 4], [71, 41]], "fn_var_ln": {"stack": [[63, 8], [63, 13]], "stack_info": [[70, 8], [70, 18]]}, "fn_var_occur": {"stack": [["stack", "f", "f", "traceback", "extract_stack", "f", "filename", "__file__", "f", "filename", "f", "filename", "f", "name"], ["stack_info", "join", "f", "filename", "rpartition", "f", "name", "f", "lineno", "f", "stack"]], "stack_info": [["stack_info", "join", "f", "filename", "rpartition", "f", "name", "f", "lineno", "f", "stack"], ["self", "result", "stack_info"]]}, "name": "after_cursor_execute", "params": {"args": "", "kwargs": "", "self": ""}, "params_descr": {"args": "", "kwargs": "", "self": ""}, "params_occur": {"args": [], "kwargs": [], "self": [["self", "result", "stack_info"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "CountQueries.after_cursor_execute", "ret_exprs": [], "ret_type": "", "variables": {"stack": "", "stack_info": ""}, "variables_p": {"stack": [["list", 0.08937395526880498]], "stack_info": [["Dict[str, Optional[str]]", 0.30365755988939913], ["str", 0.2790631898315573], ["list", 0.20805311082273964], ["List[str]", 0.09640590169873096]]}}], "name": "CountQueries", "q_name": "CountQueries", "variables": {}, "variables_p": {}}], "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[34, 4], [35, 45]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "_trim", "params": {"s": ""}, "params_descr": {"s": ""}, "params_occur": {"s": [["re", "sub", "s", "strip"]]}, "params_p": {"args": [], "kwargs": [], "s": [["str", 0.4404795084354704], ["bool", 0.10190244168894771], ["float", 0.08787801986713564], ["int", 0.08573648667733971]]}, "q_name": "assert_equal_ignore_multiple_spaces.<locals>._trim", "ret_exprs": ["return re.sub(r\"s+\", \" \", s.strip())"], "ret_type": "", "ret_type_p": [["str", 0.9999999999999999]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[33, 0], [40, 41]], "fn_var_ln": {"first_trim": [[37, 4], [37, 14]], "msg": [[39, 4], [39, 7]], "second_trim": [[38, 4], [38, 15]]}, "fn_var_occur": {"first_trim": [["first_trim", "_trim", "first"], ["msg", "msg", "first_trim", "second_trim"], ["first_trim", "second_trim", "msg"]], "msg": [["msg", "msg", "first_trim", "second_trim"], ["first_trim", "second_trim", "msg"]], "second_trim": [["second_trim", "_trim", "second"], ["msg", "msg", "first_trim", "second_trim"], ["first_trim", "second_trim", "msg"]]}, "name": "assert_equal_ignore_multiple_spaces", "params": {"first": "", "msg": "", "second": ""}, "params_descr": {"first": "", "msg": "", "second": ""}, "params_occur": {"first": [["first_trim", "_trim", "first"]], "msg": [["msg", "msg", "first_trim", "second_trim"], ["first_trim", "second_trim", "msg"]], "second": [["second_trim", "_trim", "second"]]}, "params_p": {"args": [], "first": [["str", 0.333024175196077]], "kwargs": [], "msg": [["str", 3.345447144587242e-07], ["Optional[int]", 3.345447144587242e-07], ["int", 8.212028339880758e-11], ["bool", 5.823205489890194e-11], ["Optional[str]", 3.952744564624901e-11]], "second": [["str", 0.333024175196077]]}, "q_name": "assert_equal_ignore_multiple_spaces", "ret_exprs": [], "ret_type": "", "variables": {"first_trim": "", "msg": "", "second_trim": ""}, "variables_p": {"first_trim": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["str", 0.1]], "msg": [["str", 0.3333333333490821], ["Dict[str, Union[Any, Any]]", 0.3333333333196296], ["Dict[str, List[Any]]", 1.1658799617420679e-11]], "second_trim": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["str", 0.1]]}}, {"docstring": {"func": "Asserts that the number of queries is as expected with the margin applied", "long_descr": "The margin is helpful in case of complex cases where we do not want to change it every time we\nchanged queries, but we want to catch cases where we spin out of control", "ret": null}, "fn_lc": [[78, 0], [103, 37]], "fn_var_ln": {"count": [[90, 4], [90, 9]], "message": [[98, 8], [98, 15]], "message_fmt": [[92, 8], [92, 19]]}, "fn_var_occur": {"count": [["count", "sum", "result", "values"], ["count", "expected_count", "margin"], ["message", "message_fmt", "format", "current_count", "count", "expected_count", "expected_count", "margin", "margin"], ["message", "location", "count"]], "message": [["message", "message_fmt", "format", "current_count", "count", "expected_count", "expected_count", "margin", "margin"], ["message", "location", "count"], ["AssertionError", "message"]], "message_fmt": [["message_fmt", "message_fmt"], ["message", "message_fmt", "format", "current_count", "count", "expected_count", "expected_count", "margin", "margin"]]}, "name": "assert_queries_count", "params": {"expected_count": "builtins.int", "margin": "builtins.int", "message_fmt": "str | None"}, "params_descr": {"expected_count": "expected number of queries", "margin": "margin to add to expected number of calls", "message_fmt": "message printed optionally if the number is exceeded"}, "params_occur": {"expected_count": [["count", "expected_count", "margin"], ["message", "message_fmt", "format", "current_count", "count", "expected_count", "expected_count", "margin", "margin"]], "margin": [["count", "expected_count", "margin"], ["message", "message_fmt", "format", "current_count", "count", "expected_count", "expected_count", "margin", "margin"]], "message_fmt": [["message_fmt", "message_fmt"], ["message", "message_fmt", "format", "current_count", "count", "expected_count", "expected_count", "margin", "margin"]]}, "params_p": {"args": [], "expected_count": [["int", 0.39855300611526034], ["bool", 0.2431761577467273], ["float", 0.08763604951408654], ["Callable", 0.08540326165220989]], "kwargs": [], "margin": [["int", 0.39855300611526034], ["bool", 0.2431761577467273], ["float", 0.08763604951408654], ["Callable", 0.08540326165220989]], "message_fmt": [["Optional[int]", 0.10223787523259383], ["int", 0.09610319606580937]]}, "q_name": "assert_queries_count", "ret_exprs": [], "ret_type": "", "variables": {"count": "", "message": "", "message_fmt": ""}, "variables_p": {"count": [["int", 0.650702815622677], ["float", 0.20074997664393207], ["Dict[str, Any]", 0.07946573915085628]], "message": [["str", 0.796534831712656], ["Dict[str, Union[Any, Any]]", 0.09957763661443057]], "message_fmt": [["bytes", 0.28236994529891296], ["str", 0.0828827681506351], ["bool", 0.0828827681506351]]}}], "imports": ["__future__", "annotations", "logging", "re", "traceback", "collections", "Counter", "contextlib", "contextmanager", "sqlalchemy", "event", "airflow.settings"], "mod_var_ln": {"count_queries": [[74, 0], [74, 13]], "log": [[30, 0], [30, 3]]}, "mod_var_occur": {"count_queries": [["count_queries", "result"]], "log": [["log", "debug", "sum", "self", "result", "values"]]}, "no_types_annot": {"D": 2, "I": 0, "U": 26}, "session_id": "W0WOdo4wrzYU1oKfHMy5LwbLYzZUoTZI0Sdfken7-C4", "set": null, "tc": [false, null], "type_annot_cove": 0.07, "typed_seq": "", "untyped_seq": "", "variables": {"count_queries": "", "log": ""}, "variables_p": {"count_queries": [["str", 0.30849526613034406], ["Dict[str, Dict[str, str]]", 0.10585810373487517], ["Dict[Any, set]", 0.09555582963114256], ["int", 0.09322094604817917], ["List[str]", 0.09171881690434172]], "log": [["logging.Logger", 1.0]]}}}