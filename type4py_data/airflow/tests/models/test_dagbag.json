{"error": null, "response": {"classes": [{"cls_lc": [[310, 8], [316, 74]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[313, 12], [316, 74]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "process_file", "params": {"filepath": "", "only_if_updated": "", "safe_mode": "", "self": ""}, "params_descr": {"filepath": "", "only_if_updated": "", "safe_mode": "", "self": ""}, "params_occur": {"filepath": [["os", "path", "basename", "filepath"], ["super", "process_file", "filepath", "only_if_updated", "safe_mode"]], "only_if_updated": [["super", "process_file", "filepath", "only_if_updated", "safe_mode"]], "safe_mode": [["super", "process_file", "filepath", "only_if_updated", "safe_mode"]], "self": []}, "params_p": {"args": [], "filepath": [["str", 0.45628164398889237], ["int", 0.37242525505975765], ["Optional[str]", 0.08708371097794879], ["Dict[str, str]", 0.08420938997340123]], "kwargs": [], "only_if_updated": [["str", 0.19329339865115433], ["bool", 0.19329339865115433], ["int", 0.10862093830257119], ["dict", 0.09664669932557717], ["bytes", 0.09204874059355914]], "safe_mode": [["str", 0.19329339865115433], ["bool", 0.19329339865115433], ["int", 0.10862093830257119], ["dict", 0.09664669932557717], ["bytes", 0.09204874059355914]], "self": []}, "q_name": "TestDagBag.test_get_dag_without_refresh.<locals>._TestDagBag.process_file", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "_TestDagBag", "q_name": "TestDagBag.test_get_dag_without_refresh.<locals>._TestDagBag", "variables": {}, "variables_p": {}}, {"cls_lc": [[395, 8], [401, 81]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[398, 12], [401, 81]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "process_file", "params": {"filepath": "", "only_if_updated": "", "safe_mode": "", "self": ""}, "params_descr": {"filepath": "", "only_if_updated": "", "safe_mode": "", "self": ""}, "params_occur": {"filepath": [["filepath", "fileloc"], ["super", "process_file", "filepath", "only_if_updated", "safe_mode"]], "only_if_updated": [["super", "process_file", "filepath", "only_if_updated", "safe_mode"]], "safe_mode": [["super", "process_file", "filepath", "only_if_updated", "safe_mode"]], "self": []}, "params_p": {"args": [], "filepath": [["str", 0.29294633327255437], ["dict", 0.10937299326532633], ["Exception", 0.10937299326532633], ["Dict[str, str]", 0.10300843915396382], ["bool", 0.078391173129561]], "kwargs": [], "only_if_updated": [["str", 0.19329339865115433], ["bool", 0.19329339865115433], ["int", 0.10862093830257119], ["dict", 0.09664669932557717], ["bytes", 0.09204874059355914]], "safe_mode": [["str", 0.19329339865115433], ["bool", 0.19329339865115433], ["int", 0.10862093830257119], ["dict", 0.09664669932557717], ["bytes", 0.09204874059355914]], "self": []}, "q_name": "TestDagBag.test_refresh_py_dag.<locals>._TestDagBag.process_file", "ret_exprs": ["return super().process_file(filepath, only_if_updated, safe_mode)"], "ret_type": "", "ret_type_p": [["str", 0.8346829360816829], ["pathlib.Path", 0.08342821077084392], ["Optional[List[str]]", 0.081888853147473]], "variables": {}, "variables_p": {}}], "name": "_TestDagBag", "q_name": "TestDagBag.test_refresh_py_dag.<locals>._TestDagBag", "variables": {}, "variables_p": {}}, {"cls_lc": [[423, 8], [429, 81]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[426, 12], [429, 81]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "process_file", "params": {"filepath": "", "only_if_updated": "", "safe_mode": "", "self": ""}, "params_descr": {"filepath": "", "only_if_updated": "", "safe_mode": "", "self": ""}, "params_occur": {"filepath": [["filepath", "fileloc"], ["super", "process_file", "filepath", "only_if_updated", "safe_mode"]], "only_if_updated": [["super", "process_file", "filepath", "only_if_updated", "safe_mode"]], "safe_mode": [["super", "process_file", "filepath", "only_if_updated", "safe_mode"]], "self": []}, "params_p": {"args": [], "filepath": [["str", 0.29294633327255437], ["dict", 0.10937299326532633], ["Exception", 0.10937299326532633], ["Dict[str, str]", 0.10300843915396382], ["bool", 0.078391173129561]], "kwargs": [], "only_if_updated": [["str", 0.19329339865115433], ["bool", 0.19329339865115433], ["int", 0.10862093830257119], ["dict", 0.09664669932557717], ["bytes", 0.09204874059355914]], "safe_mode": [["str", 0.19329339865115433], ["bool", 0.19329339865115433], ["int", 0.10862093830257119], ["dict", 0.09664669932557717], ["bytes", 0.09204874059355914]], "self": []}, "q_name": "TestDagBag.test_refresh_packaged_dag.<locals>._TestDagBag.process_file", "ret_exprs": ["return super().process_file(filepath, only_if_updated, safe_mode)"], "ret_type": "", "ret_type_p": [["str", 0.8346829360816829], ["pathlib.Path", 0.08342821077084392], ["Optional[List[str]]", 0.081888853147473]], "variables": {}, "variables_p": {}}], "name": "_TestDagBag", "q_name": "TestDagBag.test_refresh_packaged_dag.<locals>._TestDagBag", "variables": {}, "variables_p": {}}, {"cls_lc": [[64, 0], [1124, 26]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[65, 4], [67, 21]], "fn_var_ln": {"empty_dir": [[66, 8], [66, 22]]}, "fn_var_occur": {"empty_dir": [["self", "empty_dir", "mkdtemp"]]}, "name": "setup_class", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "empty_dir", "mkdtemp"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagBag.setup_class", "ret_exprs": [], "ret_type": "", "variables": {"empty_dir": ""}, "variables_p": {"empty_dir": [["tempfile.TemporaryDirectory", 0.9999999997061878], ["pathlib.Path", 2.040510045337833e-10], ["Optional[str]", 3.020710562244122e-11], ["str", 2.9650266668917426e-11]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[69, 4], [71, 21]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "teardown_class", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["shutil", "rmtree", "self", "empty_dir"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagBag.teardown_class", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Test that we're able to parse some example DAGs and retrieve them", "long_descr": null, "ret": null}, "fn_lc": [[73, 4], [87, 33]], "fn_var_ln": {"dag": [[82, 12], [82, 15]], "dagbag": [[77, 8], [77, 14]], "some_expected_dag_ids": [[79, 8], [79, 29]]}, "fn_var_occur": {"dag": [["dag", "dagbag", "get_dag", "dag_id"], ["dag", "None"], ["dag_id", "dag", "dag_id"]], "dagbag": [["dagbag", "models", "DagBag", "dag_folder", "self", "empty_dir", "include_examples", "True"], ["dag", "dagbag", "get_dag", "dag_id"], ["dagbag", "size"]], "some_expected_dag_ids": []}, "name": "test_get_existing_dag", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["dagbag", "models", "DagBag", "dag_folder", "self", "empty_dir", "include_examples", "True"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagBag.test_get_existing_dag", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "dagbag": "", "some_expected_dag_ids": ""}, "variables_p": {"dag": [["int", 0.49066107876883003], ["bool", 0.20552245592101115], ["List[str]", 0.09551361608565391], ["str", 0.08600831615397966]], "dagbag": [["pykechain.models.widgets.widgeWidget", 0.20898515117893285], ["salon.models.Stylist", 0.18868510772690117], ["jinete.models.routes.Route", 0.10124539507564076], ["notifications.models.Notification", 0.09991026765726958], ["fal.models.anime.Anime", 0.09317566600999704]], "some_expected_dag_ids": [["str", 0.4644864678427909], ["int", 0.18862459268513465], ["List[str]", 0.14452443060859638], ["List[int]", 0.07360852585910622], ["Optional[int]", 0.07226221530429819], ["bytes", 0.056493767700073604]]}}, {"docstring": {"func": "test that retrieving a non existing dag id returns None without crashing", "long_descr": null, "ret": null}, "fn_lc": [[89, 4], [96, 58]], "fn_var_ln": {"dagbag": [[93, 8], [93, 14]], "non_existing_dag_id": [[95, 8], [95, 27]]}, "fn_var_occur": {"dagbag": [["dagbag", "models", "DagBag", "dag_folder", "self", "empty_dir", "include_examples", "False"], ["dagbag", "get_dag", "non_existing_dag_id", "None"]], "non_existing_dag_id": [["dagbag", "get_dag", "non_existing_dag_id", "None"]]}, "name": "test_get_non_existing_dag", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["dagbag", "models", "DagBag", "dag_folder", "self", "empty_dir", "include_examples", "False"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagBag.test_get_non_existing_dag", "ret_exprs": [], "ret_type": "", "variables": {"dagbag": "", "non_existing_dag_id": ""}, "variables_p": {"dagbag": [["pykechain.models.widgets.widgeWidget", 0.3507076390704422], ["salon.models.Stylist", 0.1913559907850391], ["notifications.models.Notification", 0.10080317145628245], ["fal.models.anime.Anime", 0.0916531868543948]], "non_existing_dag_id": [["str", 0.6169551655970206], ["int", 0.18952839404404104], ["Union[bytes, str]", 0.10471662491852161]]}}, {"docstring": {"func": "test that retrieving a non existing dag id returns None without crashing", "long_descr": null, "ret": null}, "fn_lc": [[98, 4], [105, 58]], "fn_var_ln": {"dagbag": [[102, 8], [102, 14]], "non_existing_dag_id": [[104, 8], [104, 27]]}, "fn_var_occur": {"dagbag": [["dagbag", "models", "DagBag", "dag_folder", "self", "empty_dir", "include_examples", "False", "read_dags_from_db", "True"], ["dagbag", "get_dag", "non_existing_dag_id", "None"]], "non_existing_dag_id": [["dagbag", "get_dag", "non_existing_dag_id", "None"]]}, "name": "test_serialized_dag_not_existing_doesnt_raise", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["dagbag", "models", "DagBag", "dag_folder", "self", "empty_dir", "include_examples", "False", "read_dags_from_db", "True"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagBag.test_serialized_dag_not_existing_doesnt_raise", "ret_exprs": [], "ret_type": "", "variables": {"dagbag": "", "non_existing_dag_id": ""}, "variables_p": {"dagbag": [["pykechain.models.widgets.widgeWidget", 0.3257487465403047], ["fal.models.anime.Anime", 0.100346695419084], ["notifications.models.Notification", 0.09431512273120517], ["jinete.models.routes.Route", 0.09298004755520173], ["salon.models.Stylist", 0.08949235228691364]], "non_existing_dag_id": [["str", 0.6169551655970206], ["int", 0.18952839404404104], ["Union[bytes, str]", 0.10471662491852161]]}}, {"docstring": {"func": "test that the example are not loaded", "long_descr": null, "ret": null}, "fn_lc": [[107, 4], [113, 33]], "fn_var_ln": {"dagbag": [[111, 8], [111, 14]]}, "fn_var_occur": {"dagbag": [["dagbag", "models", "DagBag", "dag_folder", "self", "empty_dir", "include_examples", "False"], ["dagbag", "size"]]}, "name": "test_dont_load_example", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["dagbag", "models", "DagBag", "dag_folder", "self", "empty_dir", "include_examples", "False"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagBag.test_dont_load_example", "ret_exprs": [], "ret_type": "", "variables": {"dagbag": ""}, "variables_p": {"dagbag": [["salon.models.Stylist", 0.37501035503086155], ["fal.models.anime.Anime", 0.21310117352865335], ["notifications.models.Notification", 0.1055052938445407], ["jinete.models.routes.Route", 0.102703350652349], ["salon.models.StylistService", 0.10197304327905875]]}}, {"docstring": {"func": "With safe mode enabled, a file matching the discovery heuristics", "long_descr": "should be discovered.", "ret": null}, "fn_lc": [[115, 4], [128, 80]], "fn_var_ln": {"dagbag": [[125, 16], [125, 22]]}, "fn_var_occur": {"dagbag": [["dagbag", "models", "DagBag", "include_examples", "False", "safe_mode", "True"], ["len", "dagbag", "dagbag_stats"], ["dagbag", "dagbag_stats", "file", "os", "path", "basename", "f", "name"]]}, "name": "test_safe_mode_heuristic_match", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["NamedTemporaryFile", "dir", "self", "empty_dir", "suffix", "f"], ["conf_vars", "self", "empty_dir"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagBag.test_safe_mode_heuristic_match", "ret_exprs": [], "ret_type": "", "variables": {"dagbag": ""}, "variables_p": {"dagbag": [["web.models.Notificacion", 0.3719376458257239], ["topicdb.core.models.association.Association", 0.12603916442695445], ["cards.models.Deck", 0.10423229102013691], ["topicdb.core.models.occurrence.Occurrence", 0.10241513862505415], ["models.profiles.Profiles", 0.09635413268370986], ["zam_repondeur.models.division.SubDiv", 0.09461101680773756]]}}, {"docstring": {"func": "With safe mode enabled, a file not matching the discovery heuristics", "long_descr": "should not be discovered.", "ret": null}, "fn_lc": [[130, 4], [137, 48]], "fn_var_ln": {"dagbag": [[136, 16], [136, 22]]}, "fn_var_occur": {"dagbag": [["dagbag", "models", "DagBag", "include_examples", "False", "safe_mode", "True"], ["len", "dagbag", "dagbag_stats"]]}, "name": "test_safe_mode_heuristic_mismatch", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["NamedTemporaryFile", "dir", "self", "empty_dir", "suffix"], ["conf_vars", "self", "empty_dir"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagBag.test_safe_mode_heuristic_mismatch", "ret_exprs": [], "ret_type": "", "variables": {"dagbag": ""}, "variables_p": {"dagbag": [["web.models.Notificacion", 0.4754303842589942], ["cards.models.Deck", 0.12367442767238994], ["str", 0.10255624167714605], ["models.profiles.Profiles", 0.10067201324436699]]}}, {"docstring": {"func": "With safe mode disabled, an empty python file should be discovered.", "long_descr": null, "ret": null}, "fn_lc": [[139, 4], [145, 80]], "fn_var_ln": {"dagbag": [[143, 16], [143, 22]]}, "fn_var_occur": {"dagbag": [["dagbag", "models", "DagBag", "include_examples", "False", "safe_mode", "False"], ["len", "dagbag", "dagbag_stats"], ["dagbag", "dagbag_stats", "file", "os", "path", "basename", "f", "name"]]}, "name": "test_safe_mode_disabled", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["NamedTemporaryFile", "dir", "self", "empty_dir", "suffix", "f"], ["conf_vars", "self", "empty_dir"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagBag.test_safe_mode_disabled", "ret_exprs": [], "ret_type": "", "variables": {"dagbag": ""}, "variables_p": {"dagbag": [["models.profiles.Profiles", 0.11106447851687183], ["topicdb.core.models.association.Association", 0.1041031837704919], ["int", 0.10293215047518177], ["topicdb.core.models.occurrence.Occurrence", 0.10203275932457558], ["List[int]", 0.10101560397525576], ["zam_repondeur.models.division.SubDiv", 0.10047121747640489], ["salon.models.StylistService", 0.09523912548679893], ["fastapi.dependencies.models.Dependant", 0.0951207563115082], ["jinete.models.vehicles.Fleet", 0.09357993685372633]]}}, {"docstring": {"func": "test that we're able to parse file that contains multi-byte char", "long_descr": null, "ret": null}, "fn_lc": [[147, 4], [156, 52]], "fn_var_ln": {"dagbag": [[155, 12], [155, 18]]}, "fn_var_occur": {"dagbag": [["dagbag", "models", "DagBag", "dag_folder", "self", "empty_dir", "include_examples", "False"], ["dagbag", "process_file", "f", "name"]]}, "name": "test_process_file_that_contains_multi_bytes_char", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["dagbag", "models", "DagBag", "dag_folder", "self", "empty_dir", "include_examples", "False"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagBag.test_process_file_that_contains_multi_bytes_char", "ret_exprs": [], "ret_type": "", "variables": {"dagbag": ""}, "variables_p": {"dagbag": [["salon.models.Stylist", 0.28845711315825284], ["fal.models.anime.Anime", 0.1309041663850268], ["notifications.models.Notification", 0.1110815255639516], ["passzero.models.documents.DecryptedDocument", 0.09009952130242159], ["jinete.models.routes.Route", 0.08806913424216478]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[166, 12], [167, 20]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "my_flow", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagBag.test_process_file_duplicated_dag_id.<locals>.create_dag.<locals>.my_flow", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[162, 8], [169, 30]], "fn_var_ln": {"my_dag": [[169, 12], [169, 18]]}, "fn_var_occur": {"my_dag": [["my_dag", "my_flow"]]}, "name": "create_dag", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagBag.test_process_file_duplicated_dag_id.<locals>.create_dag", "ret_exprs": [], "ret_type": "", "variables": {"my_dag": ""}, "variables_p": {"my_dag": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["str", 0.1], ["datetime.timedelta", 0.1]]}}, {"docstring": {"func": "Loading a DAG with ID that already existed in a DAG bag should result in an import error.", "long_descr": null, "ret": null}, "fn_lc": [[158, 4], [188, 45]], "fn_var_ln": {"dagbag": [[160, 8], [160, 14]], "dags_in_bag": [[183, 12], [183, 23]], "found_1": [[180, 12], [180, 19]], "found_2": [[185, 12], [185, 19]], "source_lines": [[171, 8], [171, 20]]}, "fn_var_occur": {"dagbag": [["found_1", "dagbag", "process_file", "tf_1", "name"], ["dagbag", "import_errors"], ["dags_in_bag", "dagbag", "dags"], ["found_2", "dagbag", "process_file", "tf_2", "name"], ["dagbag", "import_errors", "tf_2", "name", "startswith"], ["dagbag", "dags", "dags_in_bag"]], "dags_in_bag": [["dags_in_bag", "dagbag", "dags"], ["dagbag", "dags", "dags_in_bag"]], "found_1": [["found_1", "dagbag", "process_file", "tf_1", "name"], ["len", "found_1", "found_1", "dag_id"]], "found_2": [["found_2", "dagbag", "process_file", "tf_2", "name"], ["len", "found_2"]], "source_lines": [["source_lines", "line", "line", "inspect", "getsource", "create_dag", "splitlines", "keepends", "True"], ["tf_1", "writelines", "source_lines"], ["tf_2", "writelines", "source_lines"]]}, "name": "test_process_file_duplicated_dag_id", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagBag.test_process_file_duplicated_dag_id", "ret_exprs": [], "ret_type": "", "variables": {"dagbag": "", "dags_in_bag": "", "found_1": "", "found_2": "", "source_lines": ""}, "variables_p": {"dagbag": [["str", 0.6436594413024811], ["bool", 0.10446616680950953], ["List[str]", 0.08498703460084438]], "dags_in_bag": [["int", 0.624999999995482], ["list", 0.12499999999423564], ["Tuple[str, int]", 0.12499999999423564], ["List[int]", 2.181115061122669e-11]], "found_1": [["dict", 0.1816402795944388], ["list", 0.17608646755334034], ["str", 0.17310873442179825], ["int", 0.09897799854326596], ["Set[str]", 0.09735109095031166]], "found_2": [["str", 0.519116825509295], ["Set[str]", 0.10657370919372325], ["List[int]", 0.08276474860501362]], "source_lines": [["str", 1.0000000000000002]]}}, {"docstring": {"func": "test the loading of a DAG from within a zip file that skips another file because", "long_descr": "it doesn't have \"airflow\" and \"DAG\"", "ret": null}, "fn_lc": [[190, 4], [203, 9]], "fn_var_ln": {"dagbag": [[197, 8], [197, 14]], "test_zip_path": [[196, 8], [196, 21]]}, "fn_var_occur": {"dagbag": [["dagbag", "models", "DagBag", "dag_folder", "test_zip_path", "include_examples", "False"], ["dagbag", "has_logged"]], "test_zip_path": [["test_zip_path", "os", "path", "join", "TEST_DAGS_FOLDER"], ["dagbag", "models", "DagBag", "dag_folder", "test_zip_path", "include_examples", "False"], ["test_zip_path", "caplog", "text"]]}, "name": "test_zip_skip_log", "params": {"caplog": "", "self": ""}, "params_descr": {"caplog": "", "self": ""}, "params_occur": {"caplog": [["caplog", "set_level", "logging", "INFO"], ["test_zip_path", "caplog", "text"]], "self": []}, "params_p": {"args": [], "caplog": [["logging.Logger", 0.13869698147304402]], "kwargs": [], "self": []}, "q_name": "TestDagBag.test_zip_skip_log", "ret_exprs": [], "ret_type": "", "variables": {"dagbag": "", "test_zip_path": ""}, "variables_p": {"dagbag": [["circle_core.models.message_box.MessageBox", 0.21238644754026445], ["jumeaux.models.Report", 0.12550965029526842], ["salon.models.ServiceCategory", 0.1024509331653045], ["cards.models.Deck", 0.09745371020873497], ["passzero.models.documents.DecryptedDocument", 0.08857053556205036], ["alerta.models.alerAlert", 0.08418343001973849]], "test_zip_path": [["str", 1.0000000000000002]]}}, {"docstring": {"func": "test the loading of a DAG within a zip file that includes dependencies", "long_descr": null, "ret": null}, "fn_lc": [[205, 4], [213, 41]], "fn_var_ln": {"dagbag": [[210, 8], [210, 14]], "syspath_before": [[209, 8], [209, 22]]}, "fn_var_occur": {"dagbag": [["dagbag", "models", "DagBag", "dag_folder", "self", "empty_dir", "include_examples", "False"], ["dagbag", "process_file", "os", "path", "join", "TEST_DAGS_FOLDER"], ["dagbag", "get_dag"]], "syspath_before": [["syspath_before", "deepcopy", "sys", "path"], ["sys", "path", "syspath_before"]]}, "name": "test_zip", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["dagbag", "models", "DagBag", "dag_folder", "self", "empty_dir", "include_examples", "False"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagBag.test_zip", "ret_exprs": [], "ret_type": "", "variables": {"dagbag": "", "syspath_before": ""}, "variables_p": {"dagbag": [["circle_core.models.message_box.MessageBox", 0.29086470466290565], ["notifications.models.Notification", 0.0955221642425991], ["ofxtools.models.base.Aggregate", 0.09435996249346047], ["salon.models.Stylist", 0.09059774875902651]], "syspath_before": [["str", 0.9999999998546923], ["List[str]", 2.3832582747129557e-11], ["Dict[str, str]", 1.972242029252667e-11], ["Optional[str]", 1.8287264786858834e-11]]}}, {"docstring": {"func": "Test dag file parsing without timeout", "long_descr": null, "ret": null}, "fn_lc": [[217, 4], [230, 42]], "fn_var_ln": {"dagbag": [[228, 8], [228, 14]], "return_value": [[227, 8], [227, 53]]}, "fn_var_occur": {"dagbag": [["dagbag", "models", "DagBag", "dag_folder", "self", "empty_dir", "include_examples", "False"], ["dagbag", "process_file", "os", "path", "join", "TEST_DAGS_FOLDER"], ["dagbag", "models", "DagBag", "dag_folder", "self", "empty_dir", "include_examples", "False"], ["dagbag", "process_file", "os", "path", "join", "TEST_DAGS_FOLDER"]], "return_value": [["mocked_get_dagbag_import_timeout", "return_value"], ["mocked_get_dagbag_import_timeout", "return_value"]]}, "name": "test_process_dag_file_without_timeout", "params": {"mocked_get_dagbag_import_timeout": "", "mocked_timeout": "", "self": ""}, "params_descr": {"mocked_get_dagbag_import_timeout": "", "mocked_timeout": "", "self": ""}, "params_occur": {"mocked_get_dagbag_import_timeout": [["mocked_get_dagbag_import_timeout", "return_value"], ["mocked_get_dagbag_import_timeout", "return_value"]], "mocked_timeout": [["mocked_timeout", "assert_not_called"], ["mocked_timeout", "assert_not_called"]], "self": [["dagbag", "models", "DagBag", "dag_folder", "self", "empty_dir", "include_examples", "False"], ["dagbag", "models", "DagBag", "dag_folder", "self", "empty_dir", "include_examples", "False"]]}, "params_p": {"args": [], "kwargs": [], "mocked_get_dagbag_import_timeout": [], "mocked_timeout": [["mock.Mock", 0.1852451966473943], ["Tuple[str, mock.Mock]", 0.09655772611503999]], "self": []}, "q_name": "TestDagBag.test_process_dag_file_without_timeout", "ret_exprs": [], "ret_type": "", "variables": {"dagbag": "", "return_value": ""}, "variables_p": {"dagbag": [["circle_core.models.message_box.MessageBox", 0.29086470466290565], ["notifications.models.Notification", 0.0955221642425991], ["ofxtools.models.base.Aggregate", 0.09435996249346047], ["salon.models.Stylist", 0.09059774875902651]], "return_value": [["str", 0.21426941946656153], ["List[Union[Any, Any]]", 0.19700701413255914], ["float", 0.19446543676315778], ["Dict[str, Union[Any, Any]]", 0.10939183142369838], ["List[str]", 0.10398111451101415], ["Final", 0.0928273597009242], ["Dict[str, Union[float, str]]", 0.08805782400208483]]}}, {"docstring": {"func": "Test customized dag file parsing timeout", "long_descr": null, "ret": null}, "fn_lc": [[234, 4], [249, 85]], "fn_var_ln": {"dagbag": [[246, 8], [246, 14]], "return_value": [[241, 8], [241, 53]], "timeout_value": [[240, 8], [240, 21]]}, "fn_var_occur": {"dagbag": [["dagbag", "models", "DagBag", "dag_folder", "self", "empty_dir", "include_examples", "False"], ["dagbag", "process_file", "os", "path", "join", "TEST_DAGS_FOLDER"]], "return_value": [["mocked_get_dagbag_import_timeout", "return_value", "timeout_value"]], "timeout_value": [["mocked_get_dagbag_import_timeout", "return_value", "timeout_value"], ["timeout_value", "settings", "conf", "getfloat"], ["mocked_timeout", "assert_called_once_with", "timeout_value", "error_message", "mock", "ANY"]]}, "name": "test_process_dag_file_with_non_default_timeout", "params": {"mocked_get_dagbag_import_timeout": "", "mocked_timeout": "", "self": ""}, "params_descr": {"mocked_get_dagbag_import_timeout": "", "mocked_timeout": "", "self": ""}, "params_occur": {"mocked_get_dagbag_import_timeout": [["mocked_get_dagbag_import_timeout", "return_value", "timeout_value"]], "mocked_timeout": [["mocked_timeout", "assert_called_once_with", "timeout_value", "error_message", "mock", "ANY"]], "self": [["dagbag", "models", "DagBag", "dag_folder", "self", "empty_dir", "include_examples", "False"]]}, "params_p": {"args": [], "kwargs": [], "mocked_get_dagbag_import_timeout": [["mock.MagicMock", 0.08544207945799172]], "mocked_timeout": [["mock.Mock", 0.29169398597476776]], "self": []}, "q_name": "TestDagBag.test_process_dag_file_with_non_default_timeout", "ret_exprs": [], "ret_type": "", "variables": {"dagbag": "", "return_value": "", "timeout_value": ""}, "variables_p": {"dagbag": [["circle_core.models.message_box.MessageBox", 0.2942793901070234], ["salon.models.ServiceCategory", 0.09704513635026663], ["notifications.models.Notification", 0.09588485418732796], ["fal.models.anime.Anime", 0.0950592614815708]], "return_value": [["list", 0.1584486599867332], ["int", 0.09678135118385059], ["set", 0.0911523882492102], ["List[str]", 0.08715889871931293], ["float", 0.0788711003207438]], "timeout_value": [["list", 0.18072719248989083], ["int", 0.12791093129148431], ["float", 0.10807579161914468], ["List[Tuple[int, str]]", 0.09307705464430147]]}}, {"docstring": {"func": "Test correctness of value from get_dagbag_import_timeout", "long_descr": null, "ret": null}, "fn_lc": [[252, 4], [262, 88]], "fn_var_ln": {"dagbag": [[258, 8], [258, 14]], "return_value": [[256, 8], [256, 53]]}, "fn_var_occur": {"dagbag": [["dagbag", "models", "DagBag", "dag_folder", "self", "empty_dir", "include_examples", "False"], ["dagbag", "process_file", "os", "path", "join", "TEST_DAGS_FOLDER"]], "return_value": [["mocked_get_dagbag_import_timeout", "return_value"]]}, "name": "test_check_value_type_from_get_dagbag_import_timeout", "params": {"mocked_get_dagbag_import_timeout": "", "self": ""}, "params_descr": {"mocked_get_dagbag_import_timeout": "", "self": ""}, "params_occur": {"mocked_get_dagbag_import_timeout": [["mocked_get_dagbag_import_timeout", "return_value"]], "self": [["dagbag", "models", "DagBag", "dag_folder", "self", "empty_dir", "include_examples", "False"]]}, "params_p": {"args": [], "kwargs": [], "mocked_get_dagbag_import_timeout": [["aiohttp.test_utils.TestServer", 0.11416841495095885], ["mock.Mock", 0.09046401460894266]], "self": []}, "q_name": "TestDagBag.test_check_value_type_from_get_dagbag_import_timeout", "ret_exprs": [], "ret_type": "", "variables": {"dagbag": "", "return_value": ""}, "variables_p": {"dagbag": [["circle_core.models.message_box.MessageBox", 0.2942793901070234], ["salon.models.ServiceCategory", 0.09704513635026663], ["notifications.models.Notification", 0.09588485418732796], ["fal.models.anime.Anime", 0.0950592614815708]], "return_value": [["Tuple[Literal, Literal]", 0.2584211606381533], ["str", 0.17116358709871088], ["list", 0.14924963795370724], ["int", 0.10350301860463965], ["Type[tuple]", 0.09431169389357251]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[265, 4], [266, 69]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "invalid_cron_dag", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagBag.invalid_cron_dag", "ret_exprs": ["return os.path.join(TEST_DAGS_FOLDER, \"test_invalid_cron.py\")"], "ret_type": "builtins.str", "ret_type_p": [["str", 1.0000000000000002]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[269, 4], [274, 25]], "fn_var_ln": {"zipped": [[270, 8], [270, 14]]}, "fn_var_occur": {"zipped": [["zipped", "os", "path", "join", "tmp_path"], ["zipfile", "ZipFile", "zipped", "zf"], ["os", "unlink", "zipped"]]}, "name": "invalid_cron_zipped_dag", "params": {"invalid_cron_dag": "builtins.str", "self": "", "tmp_path": "pathlib.Path"}, "params_descr": {"invalid_cron_dag": "", "self": "", "tmp_path": ""}, "params_occur": {"invalid_cron_dag": [["zf", "write", "invalid_cron_dag", "os", "path", "basename", "invalid_cron_dag"]], "self": [], "tmp_path": [["zipped", "os", "path", "join", "tmp_path"]]}, "params_p": {"args": [], "invalid_cron_dag": [["str", 0.8060624059126953], ["List[str]", 0.10106788979270534], ["Optional[Exception]", 0.09286970429459931]], "kwargs": [], "self": [], "tmp_path": [["str", 0.6997088435207262], ["pathlib.Path", 0.10174106132951011], ["Optional[pathlib.Path]", 0.09927504757488187]]}, "q_name": "TestDagBag.invalid_cron_zipped_dag", "ret_exprs": [], "ret_type": "typing.Iterator[builtins.str]", "variables": {"zipped": ""}, "variables_p": {"zipped": [["str", 0.5491451426094469], ["bytes", 0.16849851248836528], ["float", 0.10231495271266997], ["Dict[str, str]", 0.09466210332555117]]}}, {"docstring": {"func": "test if an invalid cron expression as schedule interval can be identified", "long_descr": null, "ret": null}, "fn_lc": [[277, 4], [283, 36]], "fn_var_ln": {"dagbag": [[279, 8], [279, 14]]}, "fn_var_occur": {"dagbag": [["dagbag", "models", "DagBag", "dag_folder", "self", "empty_dir", "include_examples", "False"], ["len", "dagbag", "import_errors"], ["dagbag", "process_file", "request", "getfixturevalue", "invalid_dag_name"], ["len", "dagbag", "import_errors"], ["len", "dagbag", "dags"]]}, "name": "test_process_file_cron_validity_check", "params": {"invalid_dag_name": "builtins.str", "request": "pytest.FixtureRequest", "self": ""}, "params_descr": {"invalid_dag_name": "", "request": "", "self": ""}, "params_occur": {"invalid_dag_name": [["dagbag", "process_file", "request", "getfixturevalue", "invalid_dag_name"]], "request": [["dagbag", "process_file", "request", "getfixturevalue", "invalid_dag_name"]], "self": [["dagbag", "models", "DagBag", "dag_folder", "self", "empty_dir", "include_examples", "False"]]}, "params_p": {"args": [], "invalid_dag_name": [["str", 0.1826644129832792]], "kwargs": [], "request": [["str", 0.1826644129832792]], "self": []}, "q_name": "TestDagBag.test_process_file_cron_validity_check", "ret_exprs": [], "ret_type": "", "variables": {"dagbag": ""}, "variables_p": {"dagbag": [["circle_core.models.message_box.MessageBox", 0.27841465172415], ["salon.models.Stylist", 0.2175223925679003], ["notifications.models.Notification", 0.21262676384298423], ["fal.models.anime.Anime", 0.10451681262673286], ["pykechain.models.widgets.widgeWidget", 0.0979520299686245], ["passzero.models.documents.DecryptedDocument", 0.0889673492696081]]}}, {"docstring": {"func": "test if an invalid param in the dag param can be identified", "long_descr": null, "ret": null}, "fn_lc": [[285, 4], [296, 36]], "fn_var_ln": {"dagbag": [[290, 8], [290, 14]], "invalid_dag_files": [[289, 8], [289, 25]]}, "fn_var_occur": {"dagbag": [["dagbag", "models", "DagBag", "dag_folder", "self", "empty_dir", "include_examples", "False"], ["len", "dagbag", "import_errors"], ["dagbag", "process_file", "os", "path", "join", "TEST_DAGS_FOLDER", "file"], ["len", "dagbag", "import_errors", "len", "invalid_dag_files"], ["len", "dagbag", "dags"]], "invalid_dag_files": [["len", "dagbag", "import_errors", "len", "invalid_dag_files"]]}, "name": "test_process_file_invalid_param_check", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["dagbag", "models", "DagBag", "dag_folder", "self", "empty_dir", "include_examples", "False"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagBag.test_process_file_invalid_param_check", "ret_exprs": [], "ret_type": "", "variables": {"dagbag": "", "invalid_dag_files": ""}, "variables_p": {"dagbag": [["circle_core.models.message_box.MessageBox", 0.31492728181177254], ["notifications.models.Notification", 0.18868821552538734], ["nycdb.models.HPDRegistration", 0.13370032653605438], ["salon.models.Stylist", 0.10014346458775121], ["models.data_frames.data_frame.DataFrame", 0.08595995812906257]], "invalid_dag_files": [["str", 0.41433013410493813], ["Union[Dict[str, str], List[Any], str]", 0.18141350315364052], ["List[str]", 0.11269552231857032], ["pathlib.Path", 0.10630051401277817], ["Union[Dict[str, str], List[str], str]", 0.09070675157682026]]}}, {"docstring": {"func": "Test that, once a DAG is loaded, it doesn't get refreshed again if it", "long_descr": "hasn't been expired.", "ret": null}, "fn_lc": [[299, 4], [324, 45]], "fn_var_ln": {"dag_id": [[304, 8], [304, 14]], "dagbag": [[318, 8], [318, 14]], "process_file_calls": [[311, 12], [311, 30]], "return_value": [[306, 8], [306, 34]]}, "fn_var_occur": {"dag_id": [["dagbag", "get_dag", "dag_id", "None"]], "dagbag": [["dagbag", "_TestDagBag", "include_examples", "True"], ["dagbag", "process_file_calls"], ["dagbag", "process_file_calls"], ["dagbag", "get_dag", "dag_id", "None"], ["dagbag", "process_file_calls"]], "process_file_calls": [["dagbag", "process_file_calls"], ["dagbag", "process_file_calls"], ["dagbag", "process_file_calls"]], "return_value": []}, "name": "test_get_dag_without_refresh", "params": {"mock_dagmodel": "", "self": ""}, "params_descr": {"mock_dagmodel": "", "self": ""}, "params_occur": {"mock_dagmodel": [], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_dagmodel": [["mock.Mock", 0.7769422778905122], ["pathlib.Path", 0.1670215326989101]], "self": []}, "q_name": "TestDagBag.test_get_dag_without_refresh", "ret_exprs": [], "ret_type": "", "variables": {"dag_id": "", "dagbag": "", "process_file_calls": "", "return_value": ""}, "variables_p": {"dag_id": [["int", 0.5318603179967671], ["list", 0.19988189010888127], ["Type[Tuple[str, Any]]", 0.1649157735396959], ["List[str]", 0.10334201835465577]], "dagbag": [["vimiv.config.styles.Style", 0.09354390437832441], ["ultron8.config.base.BaseConfiguration", 0.08922652095165601]], "process_file_calls": [["str", 0.637427926552667], ["int", 0.16521918783243783], ["bool", 0.11889560034907712], ["List[List[int]]", 0.078457285265818]], "return_value": [["str", 0.49999999999999994], ["list", 0.19999999999999998]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[352, 4], [358, 45]], "fn_var_ln": {"dag": [[356, 12], [356, 15]], "dagbag": [[353, 8], [353, 14]]}, "fn_var_occur": {"dag": [["dag", "dagbag", "get_dag", "dag_id"], ["dag", "dag_id"], ["dag", "fileloc", "endswith", "path"]], "dagbag": [["dagbag", "models", "DagBag", "dag_folder", "os", "devnull", "include_examples", "False"], ["dagbag", "process_file", "str", "file_to_load"], ["dag", "dagbag", "get_dag", "dag_id"]]}, "name": "test_get_dag_registration", "params": {"expected": "", "file_to_load": "", "self": ""}, "params_descr": {"expected": "", "file_to_load": "", "self": ""}, "params_occur": {"expected": [["expected", "items"]], "file_to_load": [["dagbag", "process_file", "str", "file_to_load"]], "self": []}, "params_p": {"args": [], "expected": [["List[Dict[str, Any]]", 0.1653765895489054], ["Set[int]", 0.10241356063448033], ["Dict[str, str]", 0.09858547178014224], ["Dict[str, bool]", 0.09813003311445304], ["dict", 0.0895591786421466], ["Optional[dict]", 0.07951194858595162]], "file_to_load": [["str", 0.5689031746459268], ["int", 0.23433294319231834], ["bool", 0.07435737186142816]], "kwargs": [], "self": []}, "q_name": "TestDagBag.test_get_dag_registration", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "dagbag": ""}, "variables_p": {"dag": [["str", 0.40356375296976216], ["int", 0.18637869340136812]], "dagbag": [["alerta.models.alerAlert", 0.20126143979015781], ["buza.models.Question", 0.19394312763650845], ["zilencer.models.RemoteZulipServer", 0.11242271808101843], ["crux.models.dataseDataset", 0.11139887202930696], ["excars.models.profiles.Profile", 0.09325393623418793], ["models.logins.Logins", 0.08641828629200367]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[360, 4], [363, 26]], "fn_var_ln": {"dagbag": [[361, 8], [361, 14]], "found": [[362, 8], [362, 13]]}, "fn_var_occur": {"dagbag": [["dagbag", "models", "DagBag", "dag_folder", "os", "devnull", "include_examples", "False"], ["found", "dagbag", "process_file", "str", "TEST_DAGS_FOLDER"]], "found": [["found", "dagbag", "process_file", "str", "TEST_DAGS_FOLDER"]]}, "name": "test_dag_registration_with_failure", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagBag.test_dag_registration_with_failure", "ret_exprs": [], "ret_type": "", "variables": {"dagbag": "", "found": ""}, "variables_p": {"dagbag": [["str", 0.3549151110792158], ["alerta.models.alerAlert", 0.19970640615371205], ["crux.models.dataseDataset", 0.15623299775575786], ["salon.models.Stylist", 0.10202552136704385], ["ajapaik.ajapaik.models.Album", 0.09537896041066814]], "found": [["str", 0.2879609477105847], ["pathlib.Path", 0.08938443492933065]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[366, 4], [374, 25]], "fn_var_ln": {"failing_dag_file": [[367, 8], [367, 24]], "working_dag_file": [[368, 8], [368, 24]], "zipped": [[369, 8], [369, 14]]}, "fn_var_occur": {"failing_dag_file": [["failing_dag_file", "TEST_DAGS_FOLDER"], ["zf", "write", "failing_dag_file", "os", "path", "basename", "failing_dag_file"]], "working_dag_file": [["working_dag_file", "TEST_DAGS_FOLDER"], ["zf", "write", "working_dag_file", "os", "path", "basename", "working_dag_file"]], "zipped": [["zipped", "os", "path", "join", "tmp_path"], ["zipfile", "ZipFile", "zipped", "zf"], ["os", "unlink", "zipped"]]}, "name": "zip_with_valid_dag_and_dup_tasks", "params": {"self": "", "tmp_path": "pathlib.Path"}, "params_descr": {"self": "", "tmp_path": ""}, "params_occur": {"self": [], "tmp_path": [["zipped", "os", "path", "join", "tmp_path"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "tmp_path": [["str", 0.9999999999999999]]}, "q_name": "TestDagBag.zip_with_valid_dag_and_dup_tasks", "ret_exprs": [], "ret_type": "typing.Iterator[builtins.str]", "variables": {"failing_dag_file": "", "working_dag_file": "", "zipped": ""}, "variables_p": {"failing_dag_file": [["str", 1.0]], "working_dag_file": [["str", 1.0]], "zipped": [["str", 0.5491451426094469], ["bytes", 0.16849851248836528], ["float", 0.10231495271266997], ["Dict[str, str]", 0.09466210332555117]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[376, 4], [380, 78]], "fn_var_ln": {"dagbag": [[377, 8], [377, 14]], "found": [[378, 8], [378, 13]]}, "fn_var_occur": {"dagbag": [["dagbag", "models", "DagBag", "dag_folder", "os", "devnull", "include_examples", "False"], ["found", "dagbag", "process_file", "zip_with_valid_dag_and_dup_tasks"]], "found": [["found", "dagbag", "process_file", "zip_with_valid_dag_and_dup_tasks"], ["len", "found"], ["dag", "dag_id", "dag", "found"]]}, "name": "test_dag_registration_with_failure_zipped", "params": {"self": "", "zip_with_valid_dag_and_dup_tasks": ""}, "params_descr": {"self": "", "zip_with_valid_dag_and_dup_tasks": ""}, "params_occur": {"self": [], "zip_with_valid_dag_and_dup_tasks": [["found", "dagbag", "process_file", "zip_with_valid_dag_and_dup_tasks"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "zip_with_valid_dag_and_dup_tasks": [["pathlib.Path", 0.18451790176931115], ["str", 0.11013664709725922], ["int", 0.09244873449655953]]}, "q_name": "TestDagBag.test_dag_registration_with_failure_zipped", "ret_exprs": [], "ret_type": "", "variables": {"dagbag": "", "found": ""}, "variables_p": {"dagbag": [["str", 0.3919479166575439], ["alerta.models.alerAlert", 0.18648049500908942], ["crux.models.dataseDataset", 0.1205393468786524], ["ajapaik.ajapaik.models.Album", 0.10918519747112886], ["salon.models.Stylist", 0.10140616020986397]], "found": [["int", 0.09996783945569361], ["Dict[bytes, str]", 0.09633629841538058], ["List[int]", 0.09427857756622784], ["Tuple[Any, Literal]", 0.093873874790796], ["dict", 0.08800623307102053]]}}, {"docstring": {"func": "Test that we can refresh an ordinary .py DAG", "long_descr": null, "ret": null}, "fn_lc": [[383, 4], [409, 45]], "fn_var_ln": {"dag": [[406, 8], [406, 11]], "dag_id": [[388, 8], [388, 14]], "dagbag": [[403, 8], [403, 14]], "fileloc": [[389, 8], [389, 15]], "process_file_calls": [[396, 12], [396, 30]], "return_value": [[391, 8], [391, 34]]}, "fn_var_occur": {"dag": [["dag", "dagbag", "get_dag", "dag_id"], ["dag", "None"], ["dag_id", "dag", "dag_id"]], "dag_id": [["dag", "dagbag", "get_dag", "dag_id"], ["dag_id", "dag", "dag_id"]], "dagbag": [["dagbag", "_TestDagBag", "dag_folder", "self", "empty_dir", "include_examples", "True"], ["dagbag", "process_file_calls"], ["dag", "dagbag", "get_dag", "dag_id"], ["dagbag", "process_file_calls"]], "fileloc": [], "process_file_calls": [["dagbag", "process_file_calls"], ["dagbag", "process_file_calls"]], "return_value": []}, "name": "test_refresh_py_dag", "params": {"mock_dagmodel": "", "self": ""}, "params_descr": {"mock_dagmodel": "", "self": ""}, "params_occur": {"mock_dagmodel": [], "self": [["dagbag", "_TestDagBag", "dag_folder", "self", "empty_dir", "include_examples", "True"]]}, "params_p": {"args": [], "kwargs": [], "mock_dagmodel": [["mock.Mock", 0.7777777782457801]], "self": []}, "q_name": "TestDagBag.test_refresh_py_dag", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "dag_id": "", "dagbag": "", "fileloc": "", "process_file_calls": "", "return_value": ""}, "variables_p": {"dag": [["int", 0.49066107876883003], ["bool", 0.20552245592101115], ["List[str]", 0.09551361608565391], ["str", 0.08600831615397966]], "dag_id": [["int", 0.3956536027388519]], "dagbag": [["zipfile.ZipFile", 0.09451860287443234], ["pathlib.Path", 0.09235813301609844]], "fileloc": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "process_file_calls": [["str", 0.23223698159748507], ["int", 0.22845390731599952], ["Set[str]", 0.15478310858360822], ["bool", 0.14868481450004936], ["Tuple[Dict[str, Any], Dict[str, Any], Dict[str, Any], Dict[str, Any], Dict[str, Any]]", 0.07973316747428238]], "return_value": [["str", 0.49999999999999994], ["list", 0.19999999999999998]]}}, {"docstring": {"func": "Test that we can refresh a packaged DAG", "long_descr": null, "ret": null}, "fn_lc": [[412, 4], [437, 45]], "fn_var_ln": {"dag": [[434, 8], [434, 11]], "dag_id": [[416, 8], [416, 14]], "dagbag": [[431, 8], [431, 14]], "fileloc": [[417, 8], [417, 15]], "process_file_calls": [[424, 12], [424, 30]], "return_value": [[419, 8], [419, 34]]}, "fn_var_occur": {"dag": [["dag", "dagbag", "get_dag", "dag_id"], ["dag", "None"], ["dag_id", "dag", "dag_id"]], "dag_id": [["dag", "dagbag", "get_dag", "dag_id"], ["dag_id", "dag", "dag_id"]], "dagbag": [["dagbag", "_TestDagBag", "dag_folder", "os", "path", "realpath", "TEST_DAGS_FOLDER", "include_examples", "False"], ["dagbag", "process_file_calls"], ["dag", "dagbag", "get_dag", "dag_id"], ["dagbag", "process_file_calls"]], "fileloc": [], "process_file_calls": [["dagbag", "process_file_calls"], ["dagbag", "process_file_calls"]], "return_value": []}, "name": "test_refresh_packaged_dag", "params": {"mock_dagmodel": "", "self": ""}, "params_descr": {"mock_dagmodel": "", "self": ""}, "params_occur": {"mock_dagmodel": [], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_dagmodel": [["mock.Mock", 0.39429448384505106], ["pathlib.Path", 0.33230330224212645], ["Generator[None, Any, None]", 0.043210998894103965]], "self": []}, "q_name": "TestDagBag.test_refresh_packaged_dag", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "dag_id": "", "dagbag": "", "fileloc": "", "process_file_calls": "", "return_value": ""}, "variables_p": {"dag": [["int", 0.49066107876883003], ["bool", 0.20552245592101115], ["List[str]", 0.09551361608565391], ["str", 0.08600831615397966]], "dag_id": [["int", 0.3956536027388519]], "dagbag": [["tests.common.Point", 0.13425600237938762], ["list", 0.1105172543231379], ["Tuple[List[str]]", 0.10394966235238126], ["List[str]", 0.07551568648267276], ["tests._commandbus_tesEmptyMessage", 0.074949201048758]], "fileloc": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "process_file_calls": [["str", 0.23223698159748507], ["int", 0.22845390731599952], ["Set[str]", 0.15478310858360822], ["bool", 0.14868481450004936], ["Tuple[Dict[str, Any], Dict[str, Any], Dict[str, Any], Dict[str, Any], Dict[str, Any]]", 0.07973316747428238]], "return_value": [["str", 0.49999999999999994], ["list", 0.19999999999999998]]}}, {"docstring": {"func": "Test that if a DAG does not exist in serialized_dag table (as the DAG file was removed),", "long_descr": "remove dags from the DagBag", "ret": null}, "fn_lc": [[439, 4], [463, 49]], "fn_var_ln": {"dagbag": [[453, 8], [453, 14]], "dags": [[454, 8], [454, 19]], "dags_hash": [[456, 8], [456, 24]], "dags_last_fetched": [[455, 8], [455, 32]]}, "fn_var_occur": {"dagbag": [["dagbag", "DagBag", "dag_folder", "self", "empty_dir", "include_examples", "False", "read_dags_from_db", "True"], ["dagbag", "dags", "dag", "dag_id", "SerializedDAG", "from_dict", "SerializedDAG", "to_dict", "dag"], ["dagbag", "dags_last_fetched", "dag", "dag_id", "tz", "utcnow", "timedelta", "minutes"], ["dagbag", "dags_hash", "dag", "dag_id", "mock", "ANY"], ["dagbag", "get_dag", "dag", "dag_id", "None"], ["dag", "dag_id", "dagbag", "dags"], ["dag", "dag_id", "dagbag", "dags_last_fetched"], ["dag", "dag_id", "dagbag", "dags_hash"]], "dags": [["dagbag", "dags", "dag", "dag_id", "SerializedDAG", "from_dict", "SerializedDAG", "to_dict", "dag"], ["dag", "dag_id", "dagbag", "dags"]], "dags_hash": [["dagbag", "dags_hash", "dag", "dag_id", "mock", "ANY"], ["dag", "dag_id", "dagbag", "dags_hash"]], "dags_last_fetched": [["dagbag", "dags_last_fetched", "dag", "dag_id", "tz", "utcnow", "timedelta", "minutes"], ["dag", "dag_id", "dagbag", "dags_last_fetched"]]}, "name": "test_dag_removed_if_serialized_dag_is_removed", "params": {"dag_maker": "", "self": ""}, "params_descr": {"dag_maker": "", "self": ""}, "params_occur": {"dag_maker": [["dag_maker", "dag_id", "schedule", "None", "start_date", "tz", "datetime", "dag"], ["dag_maker", "create_dagrun"]], "self": [["dagbag", "DagBag", "dag_folder", "self", "empty_dir", "include_examples", "False", "read_dags_from_db", "True"]]}, "params_p": {"args": [], "dag_maker": [["raiden.utils.Address", 0.10901508002641055], ["Callable", 0.09409697566169298], ["bool", 0.09209833470170227]], "kwargs": [], "self": []}, "q_name": "TestDagBag.test_dag_removed_if_serialized_dag_is_removed", "ret_exprs": [], "ret_type": "", "variables": {"dagbag": "", "dags": "", "dags_hash": "", "dags_last_fetched": ""}, "variables_p": {"dagbag": [["str", 0.09951099318756823], ["flambe.cluster.utils.RemoteCommand", 0.09380771255891575]], "dags": [["str", 0.2650068888698431], ["list", 0.1861789947249034], ["Type[ddionrails.workspace.models.baskeBasket]", 0.11657062483441212], ["Dict[None, None]", 0.11100925836343942], ["List[Union[Any, Any, Any, Any]]", 0.08940050275885668]], "dags_hash": [["str", 0.38184832050472967], ["Dict[str, Union[Any, Any, Any, str]]", 0.14857242657242659], ["Dict[int, str]", 0.0974264500000098], ["int", 0.0907113093949801], ["tuple", 0.09064288456090099], ["Optional[str]", 0.0890353785516668]], "dags_last_fetched": [["str", 0.16698931415732315], ["Tuple[int, int, int]", 0.10741800600274339], ["Pattern[str]", 0.10441909881474196], ["list", 0.10148894352028807], ["Dict[str, str]", 0.08911349753804702], ["Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]", 0.0856408373866971]]}}, {"docstring": {"func": "Helper method to process a file generated from the input create_dag function.", "long_descr": null, "ret": null}, "fn_lc": [[465, 4], [477, 45]], "fn_var_ln": {"dagbag": [[475, 12], [475, 18]], "found_dags": [[476, 12], [476, 22]], "source": [[470, 8], [470, 14]]}, "fn_var_occur": {"dagbag": [["dagbag", "models", "DagBag", "dag_folder", "self", "empty_dir", "include_examples", "False"], ["found_dags", "dagbag", "process_file", "f", "name"], ["dagbag", "found_dags", "f", "name"]], "found_dags": [["found_dags", "dagbag", "process_file", "f", "name"], ["dagbag", "found_dags", "f", "name"]], "source": [["source", "textwrap", "dedent", "join", "inspect", "getsource", "create_dag", "splitlines", "True"], ["f", "write", "source", "encode"]]}, "name": "process_dag", "params": {"create_dag": "", "self": ""}, "params_descr": {"create_dag": "", "self": ""}, "params_occur": {"create_dag": [["source", "textwrap", "dedent", "join", "inspect", "getsource", "create_dag", "splitlines", "True"]], "self": [["dagbag", "models", "DagBag", "dag_folder", "self", "empty_dir", "include_examples", "False"]]}, "params_p": {"args": [], "create_dag": [["str", 0.40855968917738944]], "kwargs": [], "self": []}, "q_name": "TestDagBag.process_dag", "ret_exprs": ["return dagbag, found_dags, f.name"], "ret_type": "", "ret_type_p": [["List[str]", 0.19600156580646366], ["str", 0.09447283314804228], ["dict", 0.09426239101978115], ["Dict[str, Any]", 0.09383316287052017]], "variables": {"dagbag": "", "found_dags": "", "source": ""}, "variables_p": {"dagbag": [["circle_core.models.message_box.MessageBox", 0.499757211684975], ["ofxtools.models.base.Aggregate", 0.10736534846940686], ["fal.models.anime.Anime", 0.10108864766999678], ["nycdb.models.HPDRegistration", 0.09900259321217292]], "found_dags": [["logging.Logger", 0.10489320602955275]], "source": [["str", 0.6256240821914658], ["pathlib.Path", 0.37437591780853413]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[479, 4], [494, 13]], "fn_var_ln": {"actual_found_dag_ids": [[483, 8], [483, 28]], "expected_dag_ids": [[480, 8], [480, 24]]}, "fn_var_occur": {"actual_found_dag_ids": [["actual_found_dag_ids", "list", "map", "dag", "dag", "dag_id", "actual_found_dags"], ["dag_id", "actual_found_dag_ids", "should_be_found", "dag_id", "should_be_found", "expected_parent_dag", "dag_id"]], "expected_dag_ids": [["expected_dag_ids", "list", "map", "dag", "dag", "dag_id", "expected_parent_dag", "subdags"], ["expected_dag_ids", "append", "expected_parent_dag", "dag_id"]]}, "name": "validate_dags", "params": {"actual_dagbag": "", "actual_found_dags": "", "expected_parent_dag": "", "self": "", "should_be_found": ""}, "params_descr": {"actual_dagbag": "", "actual_found_dags": "", "expected_parent_dag": "", "self": "", "should_be_found": ""}, "params_occur": {"actual_dagbag": [["actual_dagbag", "log", "info", "dag_id"], ["dag_id", "actual_dagbag", "dags", "should_be_found", "dag_id", "should_be_found", "expected_parent_dag", "dag_id"]], "actual_found_dags": [["actual_found_dag_ids", "list", "map", "dag", "dag", "dag_id", "actual_found_dags"]], "expected_parent_dag": [["expected_dag_ids", "list", "map", "dag", "dag", "dag_id", "expected_parent_dag", "subdags"], ["expected_dag_ids", "append", "expected_parent_dag", "dag_id"], ["dag_id", "actual_found_dag_ids", "should_be_found", "dag_id", "should_be_found", "expected_parent_dag", "dag_id"], ["dag_id", "actual_dagbag", "dags", "should_be_found", "dag_id", "should_be_found", "expected_parent_dag", "dag_id"]], "self": [], "should_be_found": [["dag_id", "actual_found_dag_ids", "should_be_found", "dag_id", "should_be_found", "expected_parent_dag", "dag_id"], ["dag_id", "actual_dagbag", "dags", "should_be_found", "dag_id", "should_be_found", "expected_parent_dag", "dag_id"]]}, "params_p": {"actual_dagbag": [["int", 0.16980835579850237], ["str", 0.09115656130570189], ["stiff.models.TokenizedTagging", 0.09115656130570189], ["List[str]", 0.09115656130570189], ["List[int]", 0.09115656130570189]], "actual_found_dags": [["int", 0.2953216573056695], ["bool", 0.18806702066812217], ["tuple", 0.10486030677489669], ["str", 0.09374736407831863]], "args": [], "expected_parent_dag": [["Optional[int]", 0.28443675761226683], ["bool", 0.18962450507484457], ["list", 0.10959806195398038], ["Optional[str]", 0.10499340608839086], ["Dict[int, int]", 0.10095872546161641], ["Dict[int, Dict[str, str]]", 0.10079048185492048]], "kwargs": [], "self": [], "should_be_found": [["int", 0.37630081687688793], ["str", 0.10936373574940396], ["nucypher.config.storages.NodeStorage", 0.10489236286045077], ["float", 0.0972253267944049], ["zilencer.models.RemoteZulipServer", 0.09342743203651895]]}, "q_name": "TestDagBag.validate_dags", "ret_exprs": [], "ret_type": "", "variables": {"actual_found_dag_ids": "", "expected_dag_ids": ""}, "variables_p": {"actual_found_dag_ids": [["Pattern[str]", 0.3362470394954437], ["str", 0.16707620483783092], ["List[Tuple[str, bool, Any]]", 0.10133683252548824], ["Set[str]", 0.0968979156388597], ["set", 0.09527362599030297], ["list", 0.09146736762486711]], "expected_dag_ids": [["str", 0.35299163924728905], ["tagstore.models.entity.EntityId", 0.190406201587419], ["set", 0.17075411677191177], ["int", 0.11390414048310936], ["list", 0.08778432553071046], ["List[Tuple[str, Any, Any]]", 0.08415957637956047]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[519, 16], [522, 35]], "fn_var_ln": {"subdag_0": [[520, 20], [520, 28]]}, "fn_var_occur": {"subdag_0": [["subdag_0", "DAG", "default_args", "default_args"], ["EmptyOperator", "task_id", "dag", "subdag_0"]]}, "name": "subdag_0", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagBag.test_load_subdags.<locals>.standard_subdag.<locals>.subdag_0", "ret_exprs": ["return subdag_0"], "ret_type": "", "ret_type_p": [["int", 0.30000000000000004], ["Callable", 0.2], ["models.Question", 0.1], ["str", 0.1]], "variables": {"subdag_0": ""}, "variables_p": {"subdag_0": [["str", 0.30651372810732014], ["int", 0.1833614224378905], ["dss.config.Replica", 0.09924157470390858]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[524, 16], [527, 35]], "fn_var_ln": {"subdag_1": [[525, 20], [525, 28]]}, "fn_var_occur": {"subdag_1": [["subdag_1", "DAG", "default_args", "default_args"], ["EmptyOperator", "task_id", "dag", "subdag_1"]]}, "name": "subdag_1", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagBag.test_load_subdags.<locals>.standard_subdag.<locals>.subdag_1", "ret_exprs": ["return subdag_1"], "ret_type": "", "ret_type_p": [["int", 0.30000000000000004], ["Callable", 0.2], ["models.Question", 0.1], ["str", 0.1]], "variables": {"subdag_1": ""}, "variables_p": {"subdag_1": [["str", 0.30651372810732014], ["int", 0.1833614224378905], ["dss.config.Replica", 0.09924157470390858]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[498, 8], [535, 22]], "fn_var_ln": {"dag": [[507, 12], [507, 15]], "dag_name": [[505, 12], [505, 20]], "default_args": [[506, 12], [506, 24]], "op_a": [[532, 16], [532, 20]], "op_subdag_0": [[529, 16], [529, 27]], "op_subdag_1": [[530, 16], [530, 27]]}, "fn_var_occur": {"dag": [["op_subdag_0", "SubDagOperator", "task_id", "dag", "dag", "subdag", "subdag_0"], ["op_subdag_1", "SubDagOperator", "task_id", "dag", "dag", "subdag", "subdag_1"]], "dag_name": [], "default_args": [], "op_a": [["op_a", "EmptyOperator", "task_id"], ["op_a", "set_downstream", "op_subdag_0"], ["op_a", "set_downstream", "op_subdag_1"]], "op_subdag_0": [["op_subdag_0", "SubDagOperator", "task_id", "dag", "dag", "subdag", "subdag_0"], ["op_a", "set_downstream", "op_subdag_0"]], "op_subdag_1": [["op_subdag_1", "SubDagOperator", "task_id", "dag", "dag", "subdag", "subdag_1"], ["op_a", "set_downstream", "op_subdag_1"]]}, "name": "standard_subdag", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagBag.test_load_subdags.<locals>.standard_subdag", "ret_exprs": ["return dag"], "ret_type": "", "ret_type_p": [["int", 0.30000000000000004], ["Callable", 0.2], ["models.Question", 0.1], ["str", 0.1]], "variables": {"dag": "", "dag_name": "", "default_args": "", "op_a": "", "op_subdag_0": "", "op_subdag_1": ""}, "variables_p": {"dag": [["int", 0.27683589720920027], ["str", 0.19903228402515255], ["Optional[excars.models.profiles.Profile]", 0.13104552251628213], ["decksite.data.models.person.Person", 0.09967800246395987], ["Dict[str, str]", 0.09925110237043504], ["pathlib.Path", 0.09513961245419432]], "dag_name": [["str", 0.7], ["Optional[str]", 0.2], ["List[str]", 0.1]], "default_args": [["Dict[str, Union[float, str]]", 0.33333333320259995], ["Dict[str, Any]", 0.33333333320259995], ["Dict[str, Union[datetime.datetime, datetime.timedelta, int, str]]", 0.33333333320259995], ["dict", 3.022791746344274e-10], ["bool", 8.99213064939781e-11]], "op_a": [["int", 0.20568972916685369], ["str", 0.11650756134951615], ["Callable[[List[Any]], List[Any]]", 0.09421387612986087], ["\"OrderedDict[str, float]\"", 0.08937568085749467]], "op_subdag_0": [["tests.components.withings.common.WebhookResponse", 0.20028900108355313], ["Pattern[Any]", 0.11761974157116223], ["Dict[str, Union[int, str]]", 0.09783738315408681], ["pytch.utils.Position", 0.09282591235612317], ["List[Tuple[Any, str]]", 0.08817005314894337]], "op_subdag_1": [["tests.components.withings.common.WebhookResponse", 0.20028900108355313], ["Pattern[Any]", 0.11761974157116223], ["Dict[str, Union[int, str]]", 0.09783738315408681], ["pytch.utils.Position", 0.09282591235612317], ["List[Tuple[Any, str]]", 0.08817005314894337]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[580, 16], [583, 35]], "fn_var_ln": {"subdag_a": [[581, 20], [581, 28]]}, "fn_var_occur": {"subdag_a": [["subdag_a", "DAG", "default_args", "default_args"], ["EmptyOperator", "task_id", "dag", "subdag_a"]]}, "name": "subdag_a", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagBag.test_load_subdags.<locals>.nested_subdags.<locals>.subdag_a", "ret_exprs": ["return subdag_a"], "ret_type": "", "ret_type_p": [["int", 0.2716312154079975], ["float", 0.1775905690477026], ["str", 0.07299707801911687]], "variables": {"subdag_a": ""}, "variables_p": {"subdag_a": [["str", 0.2965846800990827], ["bool", 0.18395141758563793], ["tuple", 0.09903121644962401], ["faustypes.models.ModelT", 0.08816426932910264], ["TextIO", 0.08651617637928657], ["Optional[List[str]]", 0.08408400008896412], ["Optional[Iterable]", 0.08083412003415104], ["Optional[Dict[str, Any]]", 0.08083412003415104]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[585, 16], [588, 35]], "fn_var_ln": {"subdag_b": [[586, 20], [586, 28]]}, "fn_var_occur": {"subdag_b": [["subdag_b", "DAG", "default_args", "default_args"], ["EmptyOperator", "task_id", "dag", "subdag_b"]]}, "name": "subdag_b", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagBag.test_load_subdags.<locals>.nested_subdags.<locals>.subdag_b", "ret_exprs": ["return subdag_b"], "ret_type": "", "ret_type_p": [["bytes", 0.20434961434932974], ["str", 0.19688101115574802], ["pathlib.Path", 0.19279246175284076], ["bool", 0.11385691842192142]], "variables": {"subdag_b": ""}, "variables_p": {"subdag_b": [["int", 0.3636090034666847], ["str", 0.2217434061445393], ["Set[str]", 0.11644695413393613], ["datetime.datetime", 0.1080949092433406], ["datetime.timedelta", 0.08635876750061265]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[590, 16], [593, 35]], "fn_var_ln": {"subdag_c": [[591, 20], [591, 28]]}, "fn_var_occur": {"subdag_c": [["subdag_c", "DAG", "default_args", "default_args"], ["EmptyOperator", "task_id", "dag", "subdag_c"]]}, "name": "subdag_c", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagBag.test_load_subdags.<locals>.nested_subdags.<locals>.subdag_c", "ret_exprs": ["return subdag_c"], "ret_type": "", "ret_type_p": [["zerver.models.Realm", 0.3166348709098874], ["str", 0.171271306266685], ["List[str]", 0.09222255770565682], ["Tuple[float]", 0.0721180178788796]], "variables": {"subdag_c": ""}, "variables_p": {"subdag_c": [["str", 0.1563700680860145], ["ajapaik.ajapaik.models.Photo", 0.11440055438686038], ["int", 0.10693014416452537], ["List[Dict[str, str]]", 0.10133429027157613], ["List[str]", 0.10133429027157613], ["Dict[str, str]", 0.0905039310464091], ["ajapaik.ajapaik.models.Album", 0.0812902042994963]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[595, 16], [598, 35]], "fn_var_ln": {"subdag_d": [[596, 20], [596, 28]]}, "fn_var_occur": {"subdag_d": [["subdag_d", "DAG", "default_args", "default_args"], ["EmptyOperator", "task_id", "dag", "subdag_d"]]}, "name": "subdag_d", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagBag.test_load_subdags.<locals>.nested_subdags.<locals>.subdag_d", "ret_exprs": ["return subdag_d"], "ret_type": "", "ret_type_p": [["str", 0.21745557750377825], ["dict", 0.08064154708691182]], "variables": {"subdag_d": ""}, "variables_p": {"subdag_d": [["str", 0.2922987622868872], ["Type[Dict[Any, str]]", 0.11753890062993926], ["dict", 0.11108922921154211], ["Dict[str, Union[int, str]]", 0.0992028878022132], ["int", 0.09702369805655976], ["Dict[str, Any]", 0.09117961581008792]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[600, 16], [604, 35]], "fn_var_ln": {"subdag_0": [[601, 20], [601, 28]]}, "fn_var_occur": {"subdag_0": [["subdag_0", "DAG", "default_args", "default_args"], ["SubDagOperator", "task_id", "dag", "subdag_0", "subdag", "subdag_a"], ["SubDagOperator", "task_id", "dag", "subdag_0", "subdag", "subdag_b"]]}, "name": "subdag_0", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagBag.test_load_subdags.<locals>.nested_subdags.<locals>.subdag_0", "ret_exprs": ["return subdag_0"], "ret_type": "", "ret_type_p": [["int", 0.30000000000000004], ["Callable", 0.2], ["models.Question", 0.1], ["str", 0.1]], "variables": {"subdag_0": ""}, "variables_p": {"subdag_0": [["int", 0.211880533662802], ["str", 0.10557630777977854], ["dss.config.Replica", 0.09104937828467154]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[606, 16], [610, 35]], "fn_var_ln": {"subdag_1": [[607, 20], [607, 28]]}, "fn_var_occur": {"subdag_1": [["subdag_1", "DAG", "default_args", "default_args"], ["SubDagOperator", "task_id", "dag", "subdag_1", "subdag", "subdag_c"], ["SubDagOperator", "task_id", "dag", "subdag_1", "subdag", "subdag_d"]]}, "name": "subdag_1", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagBag.test_load_subdags.<locals>.nested_subdags.<locals>.subdag_1", "ret_exprs": ["return subdag_1"], "ret_type": "", "ret_type_p": [["int", 0.30000000000000004], ["Callable", 0.2], ["models.Question", 0.1], ["str", 0.1]], "variables": {"subdag_1": ""}, "variables_p": {"subdag_1": [["Dict[str, str]", 0.2709353366867928], ["Dict[str, Any]", 0.1036951586954091], ["int", 0.09810557320363845], ["dict", 0.0849534335471163], ["dss.config.Replica", 0.08396933519231815]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[549, 8], [619, 22]], "fn_var_ln": {"dag": [[558, 12], [558, 15]], "dag_name": [[556, 12], [556, 20]], "default_args": [[557, 12], [557, 24]], "op_a": [[615, 16], [615, 20]], "op_subdag_0": [[612, 16], [612, 27]], "op_subdag_1": [[613, 16], [613, 27]]}, "fn_var_occur": {"dag": [["op_subdag_0", "SubDagOperator", "task_id", "dag", "dag", "subdag", "subdag_0"], ["op_subdag_1", "SubDagOperator", "task_id", "dag", "dag", "subdag", "subdag_1"]], "dag_name": [], "default_args": [], "op_a": [["op_a", "EmptyOperator", "task_id"], ["op_a", "set_downstream", "op_subdag_0"], ["op_a", "set_downstream", "op_subdag_1"]], "op_subdag_0": [["op_subdag_0", "SubDagOperator", "task_id", "dag", "dag", "subdag", "subdag_0"], ["op_a", "set_downstream", "op_subdag_0"]], "op_subdag_1": [["op_subdag_1", "SubDagOperator", "task_id", "dag", "dag", "subdag", "subdag_1"], ["op_a", "set_downstream", "op_subdag_1"]]}, "name": "nested_subdags", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagBag.test_load_subdags.<locals>.nested_subdags", "ret_exprs": ["return dag"], "ret_type": "", "ret_type_p": [["int", 0.30000000000000004], ["Callable", 0.2], ["models.Question", 0.1], ["str", 0.1]], "variables": {"dag": "", "dag_name": "", "default_args": "", "op_a": "", "op_subdag_0": "", "op_subdag_1": ""}, "variables_p": {"dag": [["int", 0.27683589720920027], ["str", 0.19903228402515255], ["Optional[excars.models.profiles.Profile]", 0.13104552251628213], ["decksite.data.models.person.Person", 0.09967800246395987], ["Dict[str, str]", 0.09925110237043504], ["pathlib.Path", 0.09513961245419432]], "dag_name": [["str", 0.7], ["Optional[str]", 0.2], ["List[str]", 0.1]], "default_args": [["Dict[str, Union[float, str]]", 0.33333333320259995], ["Dict[str, Any]", 0.33333333320259995], ["Dict[str, Union[datetime.datetime, datetime.timedelta, int, str]]", 0.33333333320259995], ["dict", 3.022791746344274e-10], ["bool", 8.99213064939781e-11]], "op_a": [["int", 0.20568972916685369], ["str", 0.11650756134951615], ["Callable[[List[Any]], List[Any]]", 0.09421387612986087], ["\"OrderedDict[str, float]\"", 0.08937568085749467]], "op_subdag_0": [["tests.components.withings.common.WebhookResponse", 0.20028900108355313], ["Pattern[Any]", 0.11761974157116223], ["Dict[str, Union[int, str]]", 0.09783738315408681], ["pytch.utils.Position", 0.09282591235612317], ["List[Tuple[Any, str]]", 0.08817005314894337]], "op_subdag_1": [["tests.components.withings.common.WebhookResponse", 0.20028900108355313], ["Pattern[Any]", 0.11761974157116223], ["Dict[str, Union[int, str]]", 0.09783738315408681], ["pytch.utils.Position", 0.09282591235612317], ["List[Tuple[Any, str]]", 0.08817005314894337]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[496, 4], [633, 42]], "fn_var_ln": {"_": [[542, 28], [542, 29]], "dagbag": [[626, 8], [626, 14]], "filename": [[626, 28], [626, 36]], "found_dags": [[626, 16], [626, 26]], "test_dag": [[621, 8], [621, 16]]}, "fn_var_occur": {"_": [], "dagbag": [["dagbag", "found_dags", "filename", "self", "process_dag", "nested_subdags"], ["self", "validate_dags", "test_dag", "found_dags", "dagbag"], ["dagbag", "dags", "values"]], "filename": [["dagbag", "found_dags", "filename", "self", "process_dag", "nested_subdags"], ["dag", "fileloc", "filename"]], "found_dags": [["dagbag", "found_dags", "filename", "self", "process_dag", "nested_subdags"], ["self", "validate_dags", "test_dag", "found_dags", "dagbag"]], "test_dag": [["test_dag", "nested_subdags"], ["len", "test_dag", "subdags"], ["self", "validate_dags", "test_dag", "found_dags", "dagbag"]]}, "name": "test_load_subdags", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["dagbag", "found_dags", "filename", "self", "process_dag", "nested_subdags"], ["self", "validate_dags", "test_dag", "found_dags", "dagbag"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagBag.test_load_subdags", "ret_exprs": [], "ret_type": "", "variables": {"_": "", "dagbag": "", "filename": "", "found_dags": "", "test_dag": ""}, "variables_p": {"_": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "dagbag": [["str", 0.9999999999999999]], "filename": [["str", 0.9161333780567802], ["dict", 0.08386662194321977]], "found_dags": [["str", 1.0000000000000002]], "test_dag": [["str", 0.903866329331042], ["bool", 0.09613367066895802]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[642, 8], [657, 22]], "fn_var_ln": {"dag": [[650, 12], [650, 15]], "dag_name": [[648, 12], [648, 20]], "default_args": [[649, 12], [649, 24]], "op_a": [[654, 16], [654, 20]]}, "fn_var_occur": {"dag": [["dag", "DAG", "dag_name", "default_args", "default_args"]], "dag_name": [["dag", "DAG", "dag_name", "default_args", "default_args"]], "default_args": [["default_args", "datetime", "datetime"], ["dag", "DAG", "dag_name", "default_args", "default_args"]], "op_a": [["op_a", "EmptyOperator", "task_id"], ["op_a", "set_downstream", "op_a"]]}, "name": "basic_cycle", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagBag.test_skip_cycle_dags.<locals>.basic_cycle", "ret_exprs": ["return dag"], "ret_type": "", "ret_type_p": [["int", 0.30000000000000004], ["Callable", 0.2], ["models.Question", 0.1], ["str", 0.1]], "variables": {"dag": "", "dag_name": "", "default_args": "", "op_a": ""}, "variables_p": {"dag": [["str", 0.10992535398038362], ["List[str]", 0.08880045785371114], ["dss.config.Replica", 0.08616927560762008], ["Dict[str, Dict[str, str]]", 0.0820544163600264], ["int", 0.07983426880626704]], "dag_name": [["str", 0.6998922280186578], ["Tuple[str, str, str]", 0.11214069515805156], ["int", 0.10354107483947526], ["Set[str]", 0.0844260019838154]], "default_args": [["datetime.timedelta", 0.20349022373085324], ["datetime.datetime.timedelta", 0.19414572586139828], ["datetime.datetime.datetime", 0.1752112727433671], ["datetime.datetime", 0.10697150518165742], ["int", 0.10334890181055534], ["list", 0.10048049193364761]], "op_a": [["int", 0.4017705304131202], ["list", 0.23809517114547069], ["Dict[Any, str]", 0.08845807346120385], ["dict", 0.08814834742997474], ["Tuple[Any, Any]", 0.08814834742997474]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[703, 16], [706, 35]], "fn_var_ln": {"subdag_a": [[704, 20], [704, 28]]}, "fn_var_occur": {"subdag_a": [["subdag_a", "DAG", "default_args", "default_args"], ["EmptyOperator", "task_id", "dag", "subdag_a"]]}, "name": "subdag_a", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagBag.test_skip_cycle_dags.<locals>.nested_subdag_cycle.<locals>.subdag_a", "ret_exprs": ["return subdag_a"], "ret_type": "", "ret_type_p": [["int", 0.2716312154079975], ["float", 0.1775905690477026], ["str", 0.07299707801911687]], "variables": {"subdag_a": ""}, "variables_p": {"subdag_a": [["str", 0.2965846800990827], ["bool", 0.18395141758563793], ["tuple", 0.09903121644962401], ["faustypes.models.ModelT", 0.08816426932910264], ["TextIO", 0.08651617637928657], ["Optional[List[str]]", 0.08408400008896412], ["Optional[Iterable]", 0.08083412003415104], ["Optional[Dict[str, Any]]", 0.08083412003415104]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[708, 16], [711, 35]], "fn_var_ln": {"subdag_b": [[709, 20], [709, 28]]}, "fn_var_occur": {"subdag_b": [["subdag_b", "DAG", "default_args", "default_args"], ["EmptyOperator", "task_id", "dag", "subdag_b"]]}, "name": "subdag_b", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagBag.test_skip_cycle_dags.<locals>.nested_subdag_cycle.<locals>.subdag_b", "ret_exprs": ["return subdag_b"], "ret_type": "", "ret_type_p": [["bytes", 0.20434961434932974], ["str", 0.19688101115574802], ["pathlib.Path", 0.19279246175284076], ["bool", 0.11385691842192142]], "variables": {"subdag_b": ""}, "variables_p": {"subdag_b": [["int", 0.3636090034666847], ["str", 0.2217434061445393], ["Set[str]", 0.11644695413393613], ["datetime.datetime", 0.1080949092433406], ["datetime.timedelta", 0.08635876750061265]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[713, 16], [718, 35]], "fn_var_ln": {"op_subdag_c_task": [[715, 20], [715, 36]], "subdag_c": [[714, 20], [714, 28]]}, "fn_var_occur": {"op_subdag_c_task": [["op_subdag_c_task", "EmptyOperator", "task_id", "dag", "subdag_c"], ["op_subdag_c_task", "set_downstream", "op_subdag_c_task"]], "subdag_c": [["subdag_c", "DAG", "default_args", "default_args"], ["op_subdag_c_task", "EmptyOperator", "task_id", "dag", "subdag_c"]]}, "name": "subdag_c", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagBag.test_skip_cycle_dags.<locals>.nested_subdag_cycle.<locals>.subdag_c", "ret_exprs": ["return subdag_c"], "ret_type": "", "ret_type_p": [["zerver.models.Realm", 0.3166348709098874], ["str", 0.171271306266685], ["List[str]", 0.09222255770565682], ["Tuple[float]", 0.0721180178788796]], "variables": {"op_subdag_c_task": "", "subdag_c": ""}, "variables_p": {"op_subdag_c_task": [["Dict[str, Optional[str]]", 0.1295643488338565], ["List[Tuple[Any, str]]", 0.11764726001450411], ["list", 0.11683237706444143], ["Pattern[Any]", 0.08121073639000023]], "subdag_c": [["str", 0.19805255158724094], ["Dict[str, Tuple[Any, Any]]", 0.14092342764984717], ["List[Dict[str, str]]", 0.09844283681095513], ["List[str]", 0.09844283681095513], ["Dict[str, Union[int, str]]", 0.09029210977888215], ["bool", 0.08754244517440335], ["Dict[str, List[str]]", 0.08460667425159481]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[720, 16], [723, 35]], "fn_var_ln": {"subdag_d": [[721, 20], [721, 28]]}, "fn_var_occur": {"subdag_d": [["subdag_d", "DAG", "default_args", "default_args"], ["EmptyOperator", "task_id", "dag", "subdag_d"]]}, "name": "subdag_d", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagBag.test_skip_cycle_dags.<locals>.nested_subdag_cycle.<locals>.subdag_d", "ret_exprs": ["return subdag_d"], "ret_type": "", "ret_type_p": [["str", 0.21745557750377825], ["dict", 0.08064154708691182]], "variables": {"subdag_d": ""}, "variables_p": {"subdag_d": [["str", 0.2922987622868872], ["Type[Dict[Any, str]]", 0.11753890062993926], ["dict", 0.11108922921154211], ["Dict[str, Union[int, str]]", 0.0992028878022132], ["int", 0.09702369805655976], ["Dict[str, Any]", 0.09117961581008792]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[725, 16], [729, 35]], "fn_var_ln": {"subdag_0": [[726, 20], [726, 28]]}, "fn_var_occur": {"subdag_0": [["subdag_0", "DAG", "default_args", "default_args"], ["SubDagOperator", "task_id", "dag", "subdag_0", "subdag", "subdag_a"], ["SubDagOperator", "task_id", "dag", "subdag_0", "subdag", "subdag_b"]]}, "name": "subdag_0", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagBag.test_skip_cycle_dags.<locals>.nested_subdag_cycle.<locals>.subdag_0", "ret_exprs": ["return subdag_0"], "ret_type": "", "ret_type_p": [["int", 0.30000000000000004], ["Callable", 0.2], ["models.Question", 0.1], ["str", 0.1]], "variables": {"subdag_0": ""}, "variables_p": {"subdag_0": [["int", 0.211880533662802], ["str", 0.10557630777977854], ["dss.config.Replica", 0.09104937828467154]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[731, 16], [735, 35]], "fn_var_ln": {"subdag_1": [[732, 20], [732, 28]]}, "fn_var_occur": {"subdag_1": [["subdag_1", "DAG", "default_args", "default_args"], ["SubDagOperator", "task_id", "dag", "subdag_1", "subdag", "subdag_c"], ["SubDagOperator", "task_id", "dag", "subdag_1", "subdag", "subdag_d"]]}, "name": "subdag_1", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagBag.test_skip_cycle_dags.<locals>.nested_subdag_cycle.<locals>.subdag_1", "ret_exprs": ["return subdag_1"], "ret_type": "", "ret_type_p": [["int", 0.30000000000000004], ["Callable", 0.2], ["models.Question", 0.1], ["str", 0.1]], "variables": {"subdag_1": ""}, "variables_p": {"subdag_1": [["Dict[str, str]", 0.2709353366867928], ["Dict[str, Any]", 0.1036951586954091], ["int", 0.09810557320363845], ["dict", 0.0849534335471163], ["dss.config.Replica", 0.08396933519231815]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[672, 8], [744, 22]], "fn_var_ln": {"dag": [[681, 12], [681, 15]], "dag_name": [[679, 12], [679, 20]], "default_args": [[680, 12], [680, 24]], "op_a": [[740, 16], [740, 20]], "op_subdag_0": [[737, 16], [737, 27]], "op_subdag_1": [[738, 16], [738, 27]]}, "fn_var_occur": {"dag": [["op_subdag_0", "SubDagOperator", "task_id", "dag", "dag", "subdag", "subdag_0"], ["op_subdag_1", "SubDagOperator", "task_id", "dag", "dag", "subdag", "subdag_1"]], "dag_name": [], "default_args": [], "op_a": [["op_a", "EmptyOperator", "task_id"], ["op_a", "set_downstream", "op_subdag_0"], ["op_a", "set_downstream", "op_subdag_1"]], "op_subdag_0": [["op_subdag_0", "SubDagOperator", "task_id", "dag", "dag", "subdag", "subdag_0"], ["op_a", "set_downstream", "op_subdag_0"]], "op_subdag_1": [["op_subdag_1", "SubDagOperator", "task_id", "dag", "dag", "subdag", "subdag_1"], ["op_a", "set_downstream", "op_subdag_1"]]}, "name": "nested_subdag_cycle", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagBag.test_skip_cycle_dags.<locals>.nested_subdag_cycle", "ret_exprs": ["return dag"], "ret_type": "", "ret_type_p": [["int", 0.30000000000000004], ["Callable", 0.2], ["models.Question", 0.1], ["str", 0.1]], "variables": {"dag": "", "dag_name": "", "default_args": "", "op_a": "", "op_subdag_0": "", "op_subdag_1": ""}, "variables_p": {"dag": [["int", 0.27683589720920027], ["str", 0.19903228402515255], ["Optional[excars.models.profiles.Profile]", 0.13104552251628213], ["decksite.data.models.person.Person", 0.09967800246395987], ["Dict[str, str]", 0.09925110237043504], ["pathlib.Path", 0.09513961245419432]], "dag_name": [["str", 0.7], ["Optional[str]", 0.2], ["List[str]", 0.1]], "default_args": [["Dict[str, Union[float, str]]", 0.33333333320259995], ["Dict[str, Any]", 0.33333333320259995], ["Dict[str, Union[datetime.datetime, datetime.timedelta, int, str]]", 0.33333333320259995], ["dict", 3.022791746344274e-10], ["bool", 8.99213064939781e-11]], "op_a": [["int", 0.20568972916685369], ["str", 0.11650756134951615], ["Callable[[List[Any]], List[Any]]", 0.09421387612986087], ["\"OrderedDict[str, float]\"", 0.08937568085749467]], "op_subdag_0": [["tests.components.withings.common.WebhookResponse", 0.20028900108355313], ["Pattern[Any]", 0.11761974157116223], ["Dict[str, Union[int, str]]", 0.09783738315408681], ["pytch.utils.Position", 0.09282591235612317], ["List[Tuple[Any, str]]", 0.08817005314894337]], "op_subdag_1": [["tests.components.withings.common.WebhookResponse", 0.20028900108355313], ["Pattern[Any]", 0.11761974157116223], ["Dict[str, Union[int, str]]", 0.09783738315408681], ["pytch.utils.Position", 0.09282591235612317], ["List[Tuple[Any, str]]", 0.08817005314894337]]}}, {"docstring": {"func": "Don't crash when loading an invalid (contains a cycle) DAG file.", "long_descr": "Don't load the dag into the DagBag either", "ret": null}, "fn_lc": [[635, 4], [756, 48]], "fn_var_ln": {"dagbag": [[751, 8], [751, 14]], "file_path": [[751, 28], [751, 37]], "found_dags": [[751, 16], [751, 26]], "test_dag": [[746, 8], [746, 16]]}, "fn_var_occur": {"dagbag": [["dagbag", "found_dags", "file_path", "self", "process_dag", "nested_subdag_cycle"], ["self", "validate_dags", "test_dag", "found_dags", "dagbag", "should_be_found", "False"], ["file_path", "dagbag", "import_errors"]], "file_path": [["dagbag", "found_dags", "file_path", "self", "process_dag", "nested_subdag_cycle"], ["file_path", "dagbag", "import_errors"]], "found_dags": [["dagbag", "found_dags", "file_path", "self", "process_dag", "nested_subdag_cycle"], ["self", "validate_dags", "test_dag", "found_dags", "dagbag", "should_be_found", "False"]], "test_dag": [["test_dag", "nested_subdag_cycle"], ["len", "test_dag", "subdags"], ["self", "validate_dags", "test_dag", "found_dags", "dagbag", "should_be_found", "False"]]}, "name": "test_skip_cycle_dags", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["dagbag", "found_dags", "file_path", "self", "process_dag", "nested_subdag_cycle"], ["self", "validate_dags", "test_dag", "found_dags", "dagbag", "should_be_found", "False"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagBag.test_skip_cycle_dags", "ret_exprs": [], "ret_type": "", "variables": {"dagbag": "", "file_path": "", "found_dags": "", "test_dag": ""}, "variables_p": {"dagbag": [["str", 0.5853120788493571], ["int", 0.3338880692734964], ["Final", 0.08079985187714647]], "file_path": [["str", 0.4964151748432421], ["pathlib.Path", 0.4035933923751136]], "found_dags": [["str", 0.68558582949949], ["Dict[str, str]", 0.10660306544895398]], "test_dag": [["str", 0.9999999999999998]]}}, {"docstring": {"func": "test that process_file can handle Nones", "long_descr": null, "ret": null}, "fn_lc": [[758, 4], [764, 46]], "fn_var_ln": {"dagbag": [[762, 8], [762, 14]]}, "fn_var_occur": {"dagbag": [["dagbag", "models", "DagBag", "dag_folder", "self", "empty_dir", "include_examples", "False"], ["dagbag", "process_file", "None"]]}, "name": "test_process_file_with_none", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["dagbag", "models", "DagBag", "dag_folder", "self", "empty_dir", "include_examples", "False"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagBag.test_process_file_with_none", "ret_exprs": [], "ret_type": "", "variables": {"dagbag": ""}, "variables_p": {"dagbag": [["salon.models.Stylist", 0.2079753019140059], ["notifications.models.Notification", 0.20455569715873484], ["fal.models.anime.Anime", 0.11950456258606605], ["pykechain.models.widgets.widgeWidget", 0.0922739040837104], ["salon.models.ServiceCategory", 0.08918663329595844]]}}, {"docstring": {"func": "Test that dag_ids not passed into deactivate_unknown_dags", "long_descr": "are deactivated when function is invoked", "ret": null}, "fn_lc": [[766, 4], [787, 102]], "fn_var_ln": {"after_model": [[781, 8], [781, 19]], "dag_id": [[772, 8], [772, 14]], "dagbag": [[771, 8], [771, 14]], "expected_active_dags": [[773, 8], [773, 28]], "model_before": [[775, 8], [775, 20]]}, "fn_var_occur": {"after_model": [["after_model", "DagModel", "get_dagmodel", "dag_id"], ["after_model", "is_active"]], "dag_id": [["model_before", "DagModel", "dag_id", "dag_id", "is_active", "True"], ["after_model", "DagModel", "get_dagmodel", "dag_id"], ["session", "query", "DagModel", "filter", "DagModel", "dag_id", "delete"]], "dagbag": [["dagbag", "DagBag", "include_examples", "True"], ["expected_active_dags", "dagbag", "dags", "keys"]], "expected_active_dags": [["expected_active_dags", "dagbag", "dags", "keys"], ["models", "DAG", "deactivate_unknown_dags", "expected_active_dags"]], "model_before": [["model_before", "DagModel", "dag_id", "dag_id", "is_active", "True"], ["session", "merge", "model_before"], ["model_before", "is_active"]]}, "name": "test_deactivate_unknown_dags", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagBag.test_deactivate_unknown_dags", "ret_exprs": [], "ret_type": "", "variables": {"after_model": "", "dag_id": "", "dagbag": "", "expected_active_dags": "", "model_before": ""}, "variables_p": {"after_model": [["float", 0.29485898507288216], ["deeplearning.ml4pl.models.classifier_base_tesMockModel", 0.26356470882694194], ["str", 0.14409121069323905], ["dict", 0.10311581457750534], ["app.models.LoginModel", 0.09018400025124466]], "dag_id": [["str", 0.18735675501187535], ["models.File", 0.11814468755176746], ["Optional[str]", 0.10247791815529707], ["int", 0.09430227500516233]], "dagbag": [["bool", 0.22653357444520428], ["datetime.timedelta", 0.18409232041920737], ["float", 0.0946657833650263], ["List[str]", 0.0946657833650263], ["list", 0.07090750310938926]], "expected_active_dags": [["Dict[str, Any]", 0.2281938176608187], ["tikki.db.tables.Base", 0.17771065437300926], ["cmk.gui.utils.html.HTML", 0.09061228671745485]], "model_before": [["deeplearning.ml4pl.models.classifier_base_tesMockModel", 0.1714412200575086], ["str", 0.16574416623152016], ["Dict[str, str]", 0.13766718315644286], ["fastapi.openapi.models.APIKey", 0.10230186114238354], ["Optional[allennlp.models.model.Model]", 0.0971961041246716], ["dict", 0.08761169943353475]]}}, {"docstring": {"func": "Test that when dagbag.sync_to_db is called the DAGs are Serialized and written to DB", "long_descr": "even when dagbag.read_dags_from_db is False", "ret": null}, "fn_lc": [[789, 4], [807, 49]], "fn_var_ln": {"dagbag": [[798, 12], [798, 18]], "new_serialized_dags_count": [[806, 12], [806, 37]], "serialized_dags_count": [[795, 12], [795, 33]]}, "fn_var_occur": {"dagbag": [["dagbag", "DagBag", "dag_folder", "os", "path", "join", "TEST_DAGS_FOLDER", "include_examples", "False"], ["dagbag", "sync_to_db"], ["dagbag", "read_dags_from_db"]], "new_serialized_dags_count": [["new_serialized_dags_count", "session", "query", "func", "count", "SerializedDagModel", "dag_id", "scalar"]], "serialized_dags_count": [["serialized_dags_count", "session", "query", "func", "count", "SerializedDagModel", "dag_id", "scalar"]]}, "name": "test_serialized_dags_are_written_to_db_on_sync", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagBag.test_serialized_dags_are_written_to_db_on_sync", "ret_exprs": [], "ret_type": "", "variables": {"dagbag": "", "new_serialized_dags_count": "", "serialized_dags_count": ""}, "variables_p": {"dagbag": [["str", 0.40814700355597655], ["Dict[str, int]", 0.381639226990134], ["Dict[str, str]", 0.0991505795748573]], "new_serialized_dags_count": [["Type[projecbetting.models.Odd]", 0.11038086826279928], ["str", 0.09961312113304822], ["dict", 0.0988649991985694], ["raiden.utils.TokenNetworkAddress", 0.09652479043178235]], "serialized_dags_count": [["grpy.core.models.Grouping", 0.3982010793839946], ["str", 0.1177122705850098], ["golem.rpc.session.Publisher", 0.10446070763716715], ["dict", 0.09077347449163521], ["fal.models.Season", 0.08608364357440526]]}}, {"docstring": {"func": "Test that errors serializing a DAG are recorded as import_errors in the DB", "long_descr": null, "ret": null}, "fn_lc": [[810, 4], [832, 30]], "fn_var_ln": {"dagbag": [[819, 12], [819, 18]], "err": [[830, 12], [830, 15]], "path": [[817, 12], [817, 16]], "side_effect": [[814, 8], [814, 34]]}, "fn_var_occur": {"dagbag": [["dagbag", "DagBag", "dag_folder", "path", "include_examples", "False"], ["dagbag", "import_errors"], ["dagbag", "sync_to_db", "session", "session"], ["path", "dagbag", "import_errors"], ["err", "dagbag", "import_errors", "path"]], "err": [["err", "dagbag", "import_errors", "path"]], "path": [["path", "os", "path", "join", "TEST_DAGS_FOLDER"], ["dagbag", "DagBag", "dag_folder", "path", "include_examples", "False"], ["path", "dagbag", "import_errors"], ["err", "dagbag", "import_errors", "path"]], "side_effect": [["mock_serialize", "side_effect", "SerializationError"]]}, "name": "test_serialized_dag_errors_are_import_errors", "params": {"caplog": "", "mock_serialize": "", "self": ""}, "params_descr": {"caplog": "", "mock_serialize": "", "self": ""}, "params_occur": {"caplog": [["caplog", "set_level", "logging", "ERROR"], ["caplog", "text"]], "mock_serialize": [["mock_serialize", "side_effect", "SerializationError"]], "self": []}, "params_p": {"args": [], "caplog": [["logging.Logger", 0.7253969523714361]], "kwargs": [], "mock_serialize": [["mock.Mock", 0.06797116649994461], ["mock.MagicMock", 0.05395682485885664]], "self": []}, "q_name": "TestDagBag.test_serialized_dag_errors_are_import_errors", "ret_exprs": [], "ret_type": "", "variables": {"dagbag": "", "err": "", "path": "", "side_effect": ""}, "variables_p": {"dagbag": [["str", 0.3931076955722103], ["int", 0.1025346190913826], ["list", 0.09675126982657206]], "err": [["str", 0.3422905214188908], ["list", 0.18964942558958003], ["List[str]", 0.09535038190305895]], "path": [["str", 1.0]], "side_effect": [["str", 0.46146968833119484], ["List[Dict[str, float]]", 0.10543346334745063], ["Dict[str, Dict[str, str]]", 0.0831681400737581]]}}, {"docstring": {"func": "Test that dagbag.sync_to_db is retried on OperationalError", "long_descr": null, "ret": null}, "fn_lc": [[837, 4], [872, 9]], "fn_var_ln": {"dagbag": [[840, 8], [840, 14]], "is_subdag": [[842, 8], [842, 26]], "mock_dag": [[841, 8], [841, 16]], "mock_session": [[852, 8], [852, 20]], "op_error": [[845, 8], [845, 16]], "side_effect": [[850, 8], [850, 41]]}, "fn_var_occur": {"dagbag": [["dagbag", "DagBag"], ["dagbag", "dags", "mock_dag"], ["dagbag", "sync_to_db", "session", "mock_session"]], "is_subdag": [["mock_dag", "is_subdag", "False"]], "mock_dag": [["mock_dag", "mock", "MagicMock", "spec", "models", "DAG"], ["mock_dag", "is_subdag", "False"], ["dagbag", "dags", "mock_dag"], ["mock_s10n_write_dag", "assert_has_calls", "mock", "call", "mock_dag", "min_update_interval", "mock", "ANY", "session", "mock_session"]], "mock_session": [["mock_session", "mock", "MagicMock"], ["dagbag", "sync_to_db", "session", "mock_session"], ["mock_session", "rollback", "assert_has_calls", "mock", "call", "mock", "call"], ["mock_s10n_write_dag", "assert_has_calls", "mock", "call", "mock_dag", "min_update_interval", "mock", "ANY", "session", "mock_session"]], "op_error": [["op_error", "OperationalError", "statement", "mock", "ANY", "params", "mock", "ANY", "orig", "mock", "ANY"], ["side_effect", "op_error", "op_error", "mock", "ANY"]], "side_effect": [["side_effect", "op_error", "op_error", "mock", "ANY"], ["mock_bulk_write_to_db", "side_effect", "side_effect"]]}, "name": "test_sync_to_db_is_retried", "params": {"mock_bulk_write_to_db": "", "mock_collect_dags": "", "mock_s10n_write_dag": "", "self": ""}, "params_descr": {"mock_bulk_write_to_db": "", "mock_collect_dags": "", "mock_s10n_write_dag": "", "self": ""}, "params_occur": {"mock_bulk_write_to_db": [["mock_bulk_write_to_db", "side_effect", "side_effect"], ["mock_bulk_write_to_db", "assert_has_calls", "mock", "call", "mock", "ANY", "processor_subdir", "None", "session", "mock", "ANY", "mock", "call", "mock", "ANY", "processor_subdir", "None", "session", "mock", "ANY", "mock", "call", "mock", "ANY", "processor_subdir", "None", "session", "mock", "ANY"]], "mock_collect_dags": [], "mock_s10n_write_dag": [["mock_s10n_write_dag", "assert_has_calls", "mock", "call", "mock_dag", "min_update_interval", "mock", "ANY", "session", "mock_session"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_bulk_write_to_db": [["tests.async_mock.Mock", 0.10625657857383634], ["mock.Mock", 0.0901613317801676]], "mock_collect_dags": [["mock.Mock", 0.6983431485568412], ["mock.MagicMock", 0.09758576828030122]], "mock_s10n_write_dag": [], "self": []}, "q_name": "TestDagBag.test_sync_to_db_is_retried", "ret_exprs": [], "ret_type": "", "variables": {"dagbag": "", "is_subdag": "", "mock_dag": "", "mock_session": "", "op_error": "", "side_effect": ""}, "variables_p": {"dagbag": [["str", 0.39765912047383656], ["Dict[str, Any]", 0.11161352788665854], ["Mapping", 0.09886367453102154], ["float", 0.09510789614713419], ["Tuple[int, int, int, int]", 0.0844977969396261]], "is_subdag": [["Dict[str, List[Any]]", 0.29765383848010524], ["List[Union[Any, Any]]", 0.22168704171278045], ["Dict[str, Union[Any, Any, Any]]", 0.09921794616003508], ["str", 0.09848244139983073], ["List[Tuple[Any, Any, Any]]", 0.09003453338759222]], "mock_dag": [], "mock_session": [], "op_error": [["str", 0.7110199834984844], ["tests.utils.MockCoroutine", 0.10543734531117684]], "side_effect": [["str", 0.22750724327814603]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[889, 12], [892, 50]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "_sync_to_db", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagBag.test_sync_to_db_syncs_dag_specific_perms_on_update.<locals>._sync_to_db", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Test that dagbag.sync_to_db will sync DAG specific permissions when a DAG is", "long_descr": "new or updated", "ret": null}, "fn_lc": [[876, 4], [905, 80]], "fn_var_ln": {"dag": [[894, 12], [894, 15]], "dagbag": [[884, 12], [884, 18]], "session": [[882, 8], [882, 15]], "tags": [[903, 12], [903, 20]]}, "fn_var_occur": {"dag": [["dag", "dagbag", "dags"], ["mock_sync_perm_for_dag", "assert_called_once_with", "dag", "session", "session"], ["dag", "tags"], ["mock_sync_perm_for_dag", "assert_called_once_with", "dag", "session", "session"]], "dagbag": [["dag", "dagbag", "dags"]], "session": [["mock_sync_perm_for_dag", "assert_called_once_with", "dag", "session", "session"], ["mock_sync_perm_for_dag", "assert_called_once_with", "dag", "session", "session"]], "tags": [["dag", "tags"]]}, "name": "test_sync_to_db_syncs_dag_specific_perms_on_update", "params": {"mock_sync_perm_for_dag": "", "self": ""}, "params_descr": {"mock_sync_perm_for_dag": "", "self": ""}, "params_occur": {"mock_sync_perm_for_dag": [["mock_sync_perm_for_dag", "assert_called_once_with", "dag", "session", "session"], ["mock_sync_perm_for_dag", "assert_not_called"], ["mock_sync_perm_for_dag", "assert_called_once_with", "dag", "session", "session"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_sync_perm_for_dag": [], "self": []}, "q_name": "TestDagBag.test_sync_to_db_syncs_dag_specific_perms_on_update", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "dagbag": "", "session": "", "tags": ""}, "variables_p": {"dag": [["str", 0.1818748562484506], ["List[str]", 0.10360844076887625], ["list", 0.08384335715445226]], "dagbag": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["str", 0.1], ["datetime.timedelta", 0.1]], "session": [["rotkehlchen.tests.utils.mock.MockResponse", 0.3101149855422182], ["Dict[str, str]", 0.10249540024808937], ["Dict[str, Any]", 0.1012331660376082], ["str", 0.10036861696377085], ["dict", 0.09996774571972467], ["Counter", 0.09882801841888163], ["Dict[str, Dict[str, Any]]", 0.09493299643783942]], "tags": [["Dict[str, int]", 0.9999999998755409], ["Set[str]", 7.305818062877253e-11], ["int", 3.7433046024733044e-11], ["str", 1.3967818747092635e-11]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[924, 12], [926, 63]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "_sync_perms", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagBag.test_sync_perm_for_dag.<locals>._sync_perms", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Test that dagbag._sync_perm_for_dag will call ApplessAirflowSecurityManager.sync_perm_for_dag", "long_descr": null, "ret": null}, "fn_lc": [[908, 4], [941, 13]], "fn_var_ln": {"access_control": [[937, 12], [937, 30]], "dag": [[922, 12], [922, 15]], "dagbag": [[918, 12], [918, 18]], "mock_sync_perm_for_dag": [[915, 12], [915, 34]], "security_manager": [[914, 12], [914, 28]], "side_effect": [[916, 12], [916, 46]]}, "fn_var_occur": {"access_control": [["dag", "access_control"]], "dag": [["dag", "access_control"]], "dagbag": [], "mock_sync_perm_for_dag": [["mock_sync_perm_for_dag", "assert_called_once_with", "None"], ["mock_sync_perm_for_dag", "assert_called_once_with", "None"], ["mock_sync_perm_for_dag", "assert_called_once_with"]], "security_manager": [], "side_effect": []}, "name": "test_sync_perm_for_dag", "params": {"mock_security_manager": "", "self": ""}, "params_descr": {"mock_security_manager": "", "self": ""}, "params_occur": {"mock_security_manager": [], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_security_manager": [["mock.Mock", 0.8840499159545586], ["Generator[None, Any, None]", 0.06609013041796032], ["pathlib.Path", 0.04985995362748131]], "self": []}, "q_name": "TestDagBag.test_sync_perm_for_dag", "ret_exprs": [], "ret_type": "", "variables": {"access_control": "", "dag": "", "dagbag": "", "mock_sync_perm_for_dag": "", "security_manager": "", "side_effect": ""}, "variables_p": {"access_control": [["str", 0.4999999999659173], ["frozenset[Any]", 0.49999999987275584], ["bool", 6.21076293617507e-11], ["int", 6.21076293617507e-11], ["float", 3.711166272714891e-11]], "dag": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["str", 0.1], ["datetime.timedelta", 0.1]], "dagbag": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "mock_sync_perm_for_dag": [["routemaster.config.model.Gate", 0.24417542663471747], ["str", 0.10299670967445017], ["List[Dict[str, str]]", 0.10123279147733988], ["int", 0.09237878708469908], ["Dict[str, Union[Any, Any, Any]]", 0.09215317827757355]], "security_manager": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "side_effect": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]]}}, {"docstring": {"func": "Test that Serialized DAG is updated in DagBag when it is updated in", "long_descr": "Serialized DAG table after 'min_serialized_dag_fetch_interval' seconds are passed.", "ret": null}, "fn_lc": [[945, 4], [980, 68]], "fn_var_ln": {"dag_bag": [[955, 12], [955, 19]], "example_bash_op_dag": [[952, 12], [952, 31]], "ser_dag_1": [[956, 12], [956, 21]], "ser_dag_1_update_time": [[957, 12], [957, 33]], "updated_ser_dag_1": [[976, 16], [976, 33]], "updated_ser_dag_1_update_time": [[977, 16], [977, 45]]}, "fn_var_occur": {"dag_bag": [["dag_bag", "DagBag", "read_dags_from_db", "True"], ["ser_dag_1", "dag_bag", "get_dag"], ["ser_dag_1_update_time", "dag_bag", "dags_last_fetched"], ["dag_bag", "get_dag", "tags"], ["updated_ser_dag_1", "dag_bag", "get_dag"], ["updated_ser_dag_1_update_time", "dag_bag", "dags_last_fetched"]], "example_bash_op_dag": [["example_bash_op_dag", "DagBag", "include_examples", "True", "dags", "get"], ["SerializedDagModel", "write_dag", "dag", "example_bash_op_dag"], ["example_bash_op_dag", "tags", "ser_dag_1", "tags"], ["example_bash_op_dag", "tags"], ["SerializedDagModel", "write_dag", "dag", "example_bash_op_dag"]], "ser_dag_1": [["ser_dag_1", "dag_bag", "get_dag"], ["example_bash_op_dag", "tags", "ser_dag_1", "tags"]], "ser_dag_1_update_time": [["ser_dag_1_update_time", "dag_bag", "dags_last_fetched"], ["ser_dag_1_update_time", "tz", "datetime"], ["updated_ser_dag_1_update_time", "ser_dag_1_update_time"]], "updated_ser_dag_1": [["updated_ser_dag_1", "dag_bag", "get_dag"], ["set", "updated_ser_dag_1", "tags"]], "updated_ser_dag_1_update_time": [["updated_ser_dag_1_update_time", "dag_bag", "dags_last_fetched"], ["updated_ser_dag_1_update_time", "ser_dag_1_update_time"]]}, "name": "test_get_dag_with_dag_serialization", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagBag.test_get_dag_with_dag_serialization", "ret_exprs": [], "ret_type": "", "variables": {"dag_bag": "", "example_bash_op_dag": "", "ser_dag_1": "", "ser_dag_1_update_time": "", "updated_ser_dag_1": "", "updated_ser_dag_1_update_time": ""}, "variables_p": {"dag_bag": [["pathlib.Path", 0.3290449453507476], ["astrality.tests.utils.Retry", 0.09820403187292194], ["str", 0.09023431554031261], ["datetime.date", 0.08796040877767054]], "example_bash_op_dag": [["Dict[str, List[str]]", 0.2684473758002079], ["int", 0.23110058170935105], ["str", 0.11537025457253311], ["bytes", 0.10400211948410007], ["float", 0.09906704791709424], ["List[Tuple[str, str]]", 0.09229474746029415], ["Dict[str, List[Any]]", 0.08971787305641947]], "ser_dag_1": [["Dict[str, List[str]]", 0.08491090032331346]], "ser_dag_1_update_time": [["timedelta", 0.2264570446885565], ["List[Optional[int]]", 0.20185144160931773], ["str", 0.20005338956130359], ["datetime.timedelta", 0.09315184342162953], ["raiden.tests.integration.network.proxies.BalanceProof", 0.09292340266035834]], "updated_ser_dag_1": [["Dict[str, str]", 0.2186302295246817], ["int", 0.08591527571819238]], "updated_ser_dag_1_update_time": [["Tuple[Literal, Literal]", 0.293779371686659], ["int", 0.2923532805073539], ["List[str]", 0.11292950289716054], ["str", 0.1067199837703488], ["Pattern[str]", 0.10162703616445674], ["Tuple[Tuple[Literal, Literal, None], Tuple[Literal, Literal, None]]", 0.09259082497402116]]}}, {"docstring": {"func": "Test that DagBag.get_dag correctly refresh the Serialized DAG even if SerializedDagModel.last_updated", "long_descr": "is before DagBag.dags_last_fetched.", "ret": null}, "fn_lc": [[984, 4], [1028, 64]], "fn_var_ln": {"dag_bag": [[997, 12], [997, 19]], "example_bash_op_dag": [[992, 12], [992, 31]], "ser_dag": [[1000, 16], [1000, 23]], "ser_dag_update_time": [[1002, 12], [1002, 31]], "updated_ser_dag": [[1024, 16], [1024, 31]], "updated_ser_dag_update_time": [[1025, 16], [1025, 43]]}, "fn_var_occur": {"dag_bag": [["dag_bag", "DagBag", "read_dags_from_db", "True"], ["ser_dag", "dag_bag", "get_dag"], ["ser_dag_update_time", "dag_bag", "dags_last_fetched"], ["updated_ser_dag", "dag_bag", "get_dag"], ["updated_ser_dag_update_time", "dag_bag", "dags_last_fetched"]], "example_bash_op_dag": [["example_bash_op_dag", "DagBag", "include_examples", "True", "dags", "get"], ["SerializedDagModel", "write_dag", "dag", "example_bash_op_dag"], ["example_bash_op_dag", "tags"], ["SerializedDagModel", "write_dag", "dag", "example_bash_op_dag"]], "ser_dag": [["ser_dag", "dag_bag", "get_dag"], ["ser_dag", "tags"]], "ser_dag_update_time": [["ser_dag_update_time", "dag_bag", "dags_last_fetched"], ["ser_dag_update_time", "tz", "datetime"], ["updated_ser_dag_update_time", "ser_dag_update_time"]], "updated_ser_dag": [["updated_ser_dag", "dag_bag", "get_dag"], ["set", "updated_ser_dag", "tags"]], "updated_ser_dag_update_time": [["updated_ser_dag_update_time", "dag_bag", "dags_last_fetched"], ["updated_ser_dag_update_time", "ser_dag_update_time"]]}, "name": "test_get_dag_refresh_race_condition", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagBag.test_get_dag_refresh_race_condition", "ret_exprs": [], "ret_type": "", "variables": {"dag_bag": "", "example_bash_op_dag": "", "ser_dag": "", "ser_dag_update_time": "", "updated_ser_dag": "", "updated_ser_dag_update_time": ""}, "variables_p": {"dag_bag": [["pathlib.Path", 0.3290449453507476], ["astrality.tests.utils.Retry", 0.09820403187292194], ["str", 0.09023431554031261], ["datetime.date", 0.08796040877767054]], "example_bash_op_dag": [["Dict[str, List[str]]", 0.2684473758002079], ["int", 0.23110058170935105], ["str", 0.11537025457253311], ["bytes", 0.10400211948410007], ["float", 0.09906704791709424], ["List[Tuple[str, str]]", 0.09229474746029415], ["Dict[str, List[Any]]", 0.08971787305641947]], "ser_dag": [["str", 0.2814708384780621], ["decksite.data.models.person.Person", 0.19472886870091516]], "ser_dag_update_time": [["timedelta", 0.2264570446885565], ["List[Optional[int]]", 0.20185144160931773], ["str", 0.20005338956130359], ["datetime.timedelta", 0.09315184342162953], ["raiden.tests.integration.network.proxies.BalanceProof", 0.09292340266035834]], "updated_ser_dag": [["Dict[str, str]", 0.2186302295246817], ["int", 0.08591527571819238]], "updated_ser_dag_update_time": [["Tuple[Literal, Literal]", 0.293779371686659], ["int", 0.2923532805073539], ["List[str]", 0.11292950289716054], ["str", 0.1067199837703488], ["Pattern[str]", 0.10162703616445674], ["Tuple[Tuple[Literal, Literal, None], Tuple[Literal, Literal, None]]", 0.09259082497402116]]}}, {"docstring": {"func": "DAGs are collected from Database", "long_descr": null, "ret": null}, "fn_lc": [[1030, 4], [1048, 70]], "fn_var_ln": {"dagbag": [[1033, 8], [1033, 14]], "example_dags": [[1035, 8], [1035, 20]], "new_dagbag": [[1039, 8], [1039, 18]], "new_dags": [[1042, 8], [1042, 16]], "serialized_dag": [[1045, 12], [1045, 26]]}, "fn_var_occur": {"dagbag": [["dagbag", "DagBag", "str", "example_dags_folder"], ["example_dags", "dagbag", "dags"]], "example_dags": [["example_dags", "dagbag", "dags"], ["example_dags", "values"], ["len", "example_dags", "len", "new_dags"], ["example_dags", "items"]], "new_dagbag": [["new_dagbag", "DagBag", "read_dags_from_db", "True"], ["len", "new_dagbag", "dags"], ["new_dagbag", "collect_dags_from_db"], ["new_dags", "new_dagbag", "dags"]], "new_dags": [["new_dags", "new_dagbag", "dags"], ["len", "example_dags", "len", "new_dags"], ["serialized_dag", "new_dags", "dag_id"]], "serialized_dag": [["serialized_dag", "new_dags", "dag_id"], ["serialized_dag", "dag_id", "dag", "dag_id"], ["set", "serialized_dag", "task_dict", "set", "dag", "task_dict"]]}, "name": "test_collect_dags_from_db", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagBag.test_collect_dags_from_db", "ret_exprs": [], "ret_type": "", "variables": {"dagbag": "", "example_dags": "", "new_dagbag": "", "new_dags": "", "serialized_dag": ""}, "variables_p": {"dagbag": [["Counter[str]", 0.12655211151632187], ["int", 0.10142831583688865], ["ChainMap[str, str]", 0.08631315326303138]], "example_dags": [["List[int]", 0.1962209071608162], ["Dict[str, Any]", 0.1088657153886504], ["float", 0.07842642576213979]], "new_dagbag": [["List[str]", 0.18087466898849713], ["dict", 0.11075883353877745], ["str", 0.09151377692327131]], "new_dags": [["int", 0.5198875324133032], ["str", 0.09495976756306122], ["Dict[int, int]", 0.0908529928860692]], "serialized_dag": [["Dict[str, int]", 0.1034864185610969], ["dict", 0.09535225559922146]]}}, {"docstring": {"func": "test that file processing results in import error when task does not", "long_descr": "obey cluster policy.", "ret": null}, "fn_lc": [[1051, 4], [1069, 61]], "fn_var_ln": {"dag_file": [[1056, 8], [1056, 16]], "dag_id": [[1057, 8], [1057, 14]], "dagbag": [[1060, 8], [1060, 14]], "err_cls_name": [[1058, 8], [1058, 20]], "expected_import_errors": [[1062, 8], [1062, 30]]}, "fn_var_occur": {"dag_file": [["dag_file", "os", "path", "join", "TEST_DAGS_FOLDER"], ["dagbag", "DagBag", "dag_folder", "dag_file", "include_examples", "False"], ["expected_import_errors", "dag_file", "err_cls_name", "dag_id", "dag_file"]], "dag_id": [["expected_import_errors", "dag_file", "err_cls_name", "dag_id", "dag_file"]], "dagbag": [["dagbag", "DagBag", "dag_folder", "dag_file", "include_examples", "False"], ["set", "set", "dagbag", "dag_ids"], ["expected_import_errors", "dagbag", "import_errors"]], "err_cls_name": [["expected_import_errors", "dag_file", "err_cls_name", "dag_id", "dag_file"]], "expected_import_errors": [["expected_import_errors", "dag_file", "err_cls_name", "dag_id", "dag_file"], ["expected_import_errors", "dagbag", "import_errors"]]}, "name": "test_task_cluster_policy_violation", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagBag.test_task_cluster_policy_violation", "ret_exprs": [], "ret_type": "", "variables": {"dag_file": "", "dag_id": "", "dagbag": "", "err_cls_name": "", "expected_import_errors": ""}, "variables_p": {"dag_file": [["str", 0.9999999999999999]], "dag_id": [["str", 1.0]], "dagbag": [["tensorhive.core.utils.mailer.Message", 0.11494027730218129]], "err_cls_name": [["str", 0.9053983708016721]], "expected_import_errors": [["str", 0.7255942589775336], ["Pattern[str]", 0.09572286048564742], ["int", 0.08949444067464357], ["Union[Literal, str]", 0.08918843986217533]]}}, {"docstring": {"func": "test that file processing results in import error when task does not", "long_descr": "obey cluster policy and has owner whose type is not string.", "ret": null}, "fn_lc": [[1072, 4], [1091, 61]], "fn_var_ln": {"TEST_DAGS_CORRUPTED_FOLDER": [[1077, 8], [1077, 34]], "dag_file": [[1078, 8], [1078, 16]], "dag_id": [[1079, 8], [1079, 14]], "dagbag": [[1082, 8], [1082, 14]], "err_cls_name": [[1080, 8], [1080, 20]], "expected_import_errors": [[1084, 8], [1084, 30]]}, "fn_var_occur": {"TEST_DAGS_CORRUPTED_FOLDER": [["TEST_DAGS_CORRUPTED_FOLDER", "pathlib", "Path", "__file__", "parent", "with_name"], ["dag_file", "os", "path", "join", "TEST_DAGS_CORRUPTED_FOLDER"]], "dag_file": [["dag_file", "os", "path", "join", "TEST_DAGS_CORRUPTED_FOLDER"], ["dagbag", "DagBag", "dag_folder", "dag_file", "include_examples", "False"], ["expected_import_errors", "dag_file", "err_cls_name", "dag_id", "dag_file"]], "dag_id": [["expected_import_errors", "dag_file", "err_cls_name", "dag_id", "dag_file"]], "dagbag": [["dagbag", "DagBag", "dag_folder", "dag_file", "include_examples", "False"], ["set", "set", "dagbag", "dag_ids"], ["expected_import_errors", "dagbag", "import_errors"]], "err_cls_name": [["expected_import_errors", "dag_file", "err_cls_name", "dag_id", "dag_file"]], "expected_import_errors": [["expected_import_errors", "dag_file", "err_cls_name", "dag_id", "dag_file"], ["expected_import_errors", "dagbag", "import_errors"]]}, "name": "test_task_cluster_policy_nonstring_owner", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagBag.test_task_cluster_policy_nonstring_owner", "ret_exprs": [], "ret_type": "", "variables": {"TEST_DAGS_CORRUPTED_FOLDER": "", "dag_file": "", "dag_id": "", "dagbag": "", "err_cls_name": "", "expected_import_errors": ""}, "variables_p": {"TEST_DAGS_CORRUPTED_FOLDER": [["pathlib.Path", 0.8272915455288429], ["str", 0.17270845447115715]], "dag_file": [["str", 1.0]], "dag_id": [["str", 1.0]], "dagbag": [["tensorhive.core.utils.mailer.Message", 0.11494027730218129]], "err_cls_name": [["str", 0.9053983708016721]], "expected_import_errors": [["str", 0.7255942589775336], ["Pattern[str]", 0.09572286048564742], ["int", 0.08949444067464357], ["Union[Literal, str]", 0.08918843986217533]]}}, {"docstring": {"func": "test that dag successfully imported without import errors when tasks", "long_descr": "obey cluster policy.", "ret": null}, "fn_lc": [[1094, 4], [1104, 41]], "fn_var_ln": {"dag_file": [[1099, 8], [1099, 16]], "dagbag": [[1101, 8], [1101, 14]]}, "fn_var_occur": {"dag_file": [["dag_file", "os", "path", "join", "TEST_DAGS_FOLDER"], ["dagbag", "DagBag", "dag_folder", "dag_file", "include_examples", "False"]], "dagbag": [["dagbag", "DagBag", "dag_folder", "dag_file", "include_examples", "False"], ["set", "dagbag", "dag_ids"], ["dagbag", "import_errors"]]}, "name": "test_task_cluster_policy_obeyed", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagBag.test_task_cluster_policy_obeyed", "ret_exprs": [], "ret_type": "", "variables": {"dag_file": "", "dagbag": ""}, "variables_p": {"dag_file": [["str", 1.0]], "dagbag": [["str", 0.1779100206230989], ["libsoundtouch.tests.test_libsoundtouch.MockDevice", 0.15703581879837109], ["bool", 0.10150365958255209]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1107, 4], [1112, 62]], "fn_var_ln": {"dag_file": [[1108, 8], [1108, 16]], "dagbag": [[1110, 8], [1110, 14]]}, "fn_var_occur": {"dag_file": [["dag_file", "os", "path", "join", "TEST_DAGS_FOLDER"], ["dagbag", "DagBag", "dag_folder", "dag_file", "include_examples", "False"], ["dagbag", "import_errors", "dag_file"]], "dagbag": [["dagbag", "DagBag", "dag_folder", "dag_file", "include_examples", "False"], ["len", "dagbag", "dag_ids"], ["dagbag", "import_errors", "dag_file"]]}, "name": "test_dag_cluster_policy_obeyed", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagBag.test_dag_cluster_policy_obeyed", "ret_exprs": [], "ret_type": "", "variables": {"dag_file": "", "dagbag": ""}, "variables_p": {"dag_file": [["str", 1.0000000000000002]], "dagbag": [["str", 0.3105967390258936]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1114, 4], [1124, 26]], "fn_var_ln": {"dagbag": [[1123, 8], [1123, 14]]}, "fn_var_occur": {"dagbag": [["dagbag", "DagBag", "dag_folder", "TEST_DAGS_FOLDER", "include_examples", "False", "collect_dags", "False"], ["dagbag", "dags"], ["dagbag", "collect_dags"], ["dagbag", "dags"], ["dagbag", "DagBag", "dag_folder", "TEST_DAGS_FOLDER", "include_examples", "False"], ["dagbag", "dags"]]}, "name": "test_dagbag_dag_collection", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagBag.test_dagbag_dag_collection", "ret_exprs": [], "ret_type": "", "variables": {"dagbag": ""}, "variables_p": {"dagbag": [["str", 0.3736962915898082], ["grouper.fe.settings.FrontendSettings", 0.14671046534935828]]}}], "name": "TestDagBag", "q_name": "TestDagBag", "variables": {}, "variables_p": {}}], "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[57, 0], [61, 39]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "db_clean_up", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "db_clean_up", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "imports": ["__future__", "annotations", "inspect", "logging", "os", "pathlib", "shutil", "sys", "textwrap", "zipfile", "copy", "deepcopy", "datetime", "datetime", "timedelta", "timezone", "tempfile", "NamedTemporaryFile", "mkdtemp", "typing", "Iterator", "unittest", "mock", "unittest", "mock", "patch", "pytest", "time_machine", "sqlalchemy", "func", "sqlalchemy", "exc", "OperationalError", "airflow.example_dags", "airflow", "models", "settings", "airflow", "exceptions", "SerializationError", "airflow", "models", "DagBag", "DagModel", "airflow", "models", "serialized_dag", "SerializedDagModel", "airflow", "serialization", "serialized_objects", "SerializedDAG", "airflow", "utils", "dates", "timezone", "tz", "airflow", "utils", "session", "create_session", "airflow", "www", "security", "ApplessAirflowSecurityManager", "tests", "cluster_policies", "tests", "models", "TEST_DAGS_FOLDER", "tests", "test_utils", "db", "tests", "test_utils", "asserts", "assert_queries_count", "tests", "test_utils", "config", "conf_vars", "airflow", "decorators", "dag", "airflow", "operators", "empty", "EmptyOperator", "datetime", "airflow", "models", "DAG", "airflow", "operators", "empty", "EmptyOperator", "airflow", "operators", "subdag", "SubDagOperator", "datetime", "airflow", "models", "DAG", "airflow", "operators", "empty", "EmptyOperator", "airflow", "operators", "subdag", "SubDagOperator", "datetime", "airflow", "models", "DAG", "airflow", "operators", "empty", "EmptyOperator", "datetime", "airflow", "models", "DAG", "airflow", "operators", "empty", "EmptyOperator", "airflow", "operators", "subdag", "SubDagOperator"], "mod_var_ln": {"example_dags_folder": [[54, 0], [54, 19]]}, "mod_var_occur": {"example_dags_folder": [["fileloc", "str", "example_dags_folder"], ["dagbag", "DagBag", "str", "example_dags_folder"]]}, "no_types_annot": {"D": 8, "I": 0, "U": 257}, "session_id": "6MTiaz-rGeIVbuHAe2-ecDm335OGFteNkzfDN4qrOYY", "set": null, "tc": [false, null], "type_annot_cove": 0.03, "typed_seq": "", "untyped_seq": "", "variables": {"example_dags_folder": ""}, "variables_p": {"example_dags_folder": [["list", 0.22666871840466768], ["bytes", 0.0814874109911453], ["str", 0.07926072517039491], ["List[str]", 0.07887923095744079]]}}}