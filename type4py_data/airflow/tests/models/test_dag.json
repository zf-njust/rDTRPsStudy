{"error": null, "response": {"classes": [{"cls_lc": [[837, 8], [852, 43]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[845, 12], [846, 45]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "utcoffset", "params": {"dt": "", "self": ""}, "params_descr": {"dt": "", "self": ""}, "params_occur": {"dt": [], "self": [["self", "__class__", "_offset"]]}, "params_p": {"args": [], "dt": [["datetime.datetime", 0.9999999998248029], ["Callable[[], None]", 4.948886896232414e-11], ["server.models.PickupPoint", 3.451333795522636e-11], ["server.models.User", 3.451333795522636e-11], ["int", 2.9870448001512315e-11], ["bool", 2.6811216844717875e-11]], "kwargs": [], "self": []}, "q_name": "TestDag.test_following_schedule_datetime_timezone_utc0530.<locals>.UTC0530.utcoffset", "ret_exprs": ["return self.__class__._offset"], "ret_type": "", "ret_type_p": [["str", 0.29413696684203133], ["int", 0.09272489992822198]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[848, 12], [849, 42]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "dst", "params": {"dt": "", "self": ""}, "params_descr": {"dt": "", "self": ""}, "params_occur": {"dt": [], "self": [["self", "__class__", "_dst"]]}, "params_p": {"args": [], "dt": [["datetime.datetime", 0.9999999998248029], ["Callable[[], None]", 4.948886896232414e-11], ["server.models.PickupPoint", 3.451333795522636e-11], ["server.models.User", 3.451333795522636e-11], ["int", 2.9870448001512315e-11], ["bool", 2.6811216844717875e-11]], "kwargs": [], "self": []}, "q_name": "TestDag.test_following_schedule_datetime_timezone_utc0530.<locals>.UTC0530.dst", "ret_exprs": ["return self.__class__._dst"], "ret_type": "", "ret_type_p": [["str", 0.29413696684203133], ["int", 0.09272489992822198]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[851, 12], [852, 43]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "tzname", "params": {"dt": "", "self": ""}, "params_descr": {"dt": "", "self": ""}, "params_occur": {"dt": [], "self": [["self", "__class__", "_name"]]}, "params_p": {"args": [], "dt": [["datetime.datetime", 0.9999999998248029], ["Callable[[], None]", 4.948886896232414e-11], ["server.models.PickupPoint", 3.451333795522636e-11], ["server.models.User", 3.451333795522636e-11], ["int", 2.9870448001512315e-11], ["bool", 2.6811216844717875e-11]], "kwargs": [], "self": []}, "q_name": "TestDag.test_following_schedule_datetime_timezone_utc0530.<locals>.UTC0530.tzname", "ret_exprs": ["return self.__class__._name"], "ret_type": "", "ret_type_p": [["str", 0.4667024070234328], ["int", 0.07322555392845934]], "variables": {}, "variables_p": {}}], "name": "UTC0530", "q_name": "TestDag.test_following_schedule_datetime_timezone_utc0530.<locals>.UTC0530", "variables": {}, "variables_p": {}}, {"cls_lc": [[1573, 8], [1574, 16]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [], "name": "DAGsubclass", "q_name": "TestDag.test_rich_comparison_ops.<locals>.DAGsubclass", "variables": {}, "variables_p": {}}, {"cls_lc": [[2288, 8], [2290, 48]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[2289, 12], [2290, 48]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "next_dagrun_info", "params": {"last_automated_data_interval": "", "restriction": "", "self": ""}, "params_descr": {"last_automated_data_interval": "", "restriction": "", "self": ""}, "params_occur": {"last_automated_data_interval": [], "restriction": [], "self": []}, "params_p": {"args": [], "kwargs": [], "last_automated_data_interval": [["str", 0.35153164335350645], ["Dict[str, Any]", 0.34122851578256963], ["Sequence[str]", 0.11717721445116881], ["List[str]", 0.09523779150718316]], "restriction": [["str", 0.35153164335350645], ["Dict[str, Any]", 0.34122851578256963], ["Sequence[str]", 0.11717721445116881], ["List[str]", 0.09523779150718316]], "self": []}, "q_name": "TestDag.test_next_dagrun_info_timetable_exception.<locals>.FailingTimetable.next_dagrun_info", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "FailingTimetable", "q_name": "TestDag.test_next_dagrun_info_timetable_exception.<locals>.FailingTimetable", "variables": {}, "variables_p": {}}, {"cls_lc": [[109, 0], [2506, 13]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[110, 4], [115, 37]], "fn_var_ln": {"patcher_dag_code": [[114, 8], [114, 29]]}, "fn_var_occur": {"patcher_dag_code": [["self", "patcher_dag_code", "mock", "patch"], ["self", "patcher_dag_code", "start"]]}, "name": "setup_method", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "patcher_dag_code", "mock", "patch"], ["self", "patcher_dag_code", "start"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.setup_method", "ret_exprs": [], "ret_type": "None", "variables": {"patcher_dag_code": ""}, "variables_p": {"patcher_dag_code": [["str", 0.9999999999999998]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[117, 4], [121, 36]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "teardown_method", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "patcher_dag_code", "stop"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.teardown_method", "ret_exprs": [], "ret_type": "None", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[124, 4], [128, 103]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "_clean_up", "params": {"dag_id": "builtins.str"}, "params_descr": {"dag_id": ""}, "params_occur": {"dag_id": [["session", "query", "DagRun", "filter", "DagRun", "dag_id", "dag_id", "delete", "synchronize_session", "False"], ["session", "query", "TI", "filter", "TI", "dag_id", "dag_id", "delete", "synchronize_session", "False"], ["session", "query", "TaskFail", "filter", "TaskFail", "dag_id", "dag_id", "delete", "synchronize_session", "False"]]}, "params_p": {"args": [], "dag_id": [["int", 0.5033709588206449], ["transfer.models.ItemID", 0.1324926666540702], ["transfer.models.TopicID", 0.08835253382745985]], "kwargs": [], "self": []}, "q_name": "TestDag._clean_up", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Assert that a occurs before b in the list.", "long_descr": null, "ret": null}, "fn_lc": [[131, 4], [142, 37]], "fn_var_ln": {"a_index": [[139, 16], [139, 23]], "b_index": [[141, 16], [141, 23]]}, "fn_var_occur": {"a_index": [["a_index", "i"], ["a_index", "b_index"]], "b_index": [["b_index", "i"], ["a_index", "b_index"]]}, "name": "_occur_before", "params": {"a": "", "b": "", "list_": ""}, "params_descr": {"a": "", "b": "", "list_": ""}, "params_occur": {"a": [["e", "task_id", "a"]], "b": [["e", "task_id", "b"]], "list_": [["enumerate", "list_"]]}, "params_p": {"a": [["int", 0.7303220804877095], ["str", 0.08476139537695068]], "args": [], "b": [["int", 0.5812291727261061], ["dict", 0.33389398270349097]], "kwargs": [], "list_": [["int", 0.2745013322049547], ["bytes", 0.18504331025029724], ["tuple", 0.09292499521251182]], "self": []}, "q_name": "TestDag._occur_before", "ret_exprs": ["return 0 <= a_index < b_index"], "ret_type": "", "ret_type_p": [["str", 0.15835798148047175], ["list", 0.0856659018546924], ["List[T]", 0.0856659018546924], ["List[float]", 0.0856659018546924]], "variables": {"a_index": "", "b_index": ""}, "variables_p": {"a_index": [["int", 0.31378825396336046], ["List[int]", 0.2480381345072697], ["List[float]", 0.1965208745421434], ["str", 0.1805622393261799], ["list", 0.06109049766104646]], "b_index": [["float", 0.3313475321122972], ["int", 0.2383129164714166], ["str", 0.19171673285745774], ["list", 0.0826795904617853], ["List[int]", 0.07267236619854758]]}}, {"docstring": {"func": "Test that when 'params' is _not_ passed to a new Dag, that the params", "long_descr": "attribute is set to an empty dictionary.", "ret": null}, "fn_lc": [[144, 4], [152, 35]], "fn_var_ln": {"dag": [[149, 8], [149, 11]]}, "fn_var_occur": {"dag": [["dag", "models", "DAG"], ["isinstance", "dag", "params", "ParamsDict"], ["len", "dag", "params"]]}, "name": "test_params_not_passed_is_empty_dict", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_params_not_passed_is_empty_dict", "ret_exprs": [], "ret_type": "", "variables": {"dag": ""}, "variables_p": {"dag": [["pathpy.models.higher_order_network.HigherOrderEdge", 0.1664499002315794], ["jinete.models.vehicles.Fleet", 0.1559275242050337], ["magic.models.card.Card", 0.13307500120271373], ["magic.models.deck.Deck", 0.09786150116299074]]}}, {"docstring": {"func": "Test that when 'params' exists as a key passed to the default_args dict", "long_descr": "in addition to params being passed explicitly as an argument to the\ndag, that the 'params' key of the default_args dict is merged with the\ndict of the params argument.", "ret": null}, "fn_lc": [[154, 4], [167, 64]], "fn_var_ln": {"dag": [[164, 8], [164, 11]], "params1": [[161, 8], [161, 15]], "params2": [[162, 8], [162, 15]]}, "fn_var_occur": {"dag": [["dag", "models", "DAG", "default_args", "params1", "params", "params2"], ["params1", "dag", "params"], ["params2", "dag", "params"]], "params1": [["dag", "models", "DAG", "default_args", "params1", "params", "params2"], ["params1", "dag", "params"]], "params2": [["dag", "models", "DAG", "default_args", "params1", "params", "params2"], ["params2", "dag", "params"]]}, "name": "test_params_passed_and_params_in_default_args_no_override", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_params_passed_and_params_in_default_args_no_override", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "params1": "", "params2": ""}, "variables_p": {"dag": [["str", 0.7125536248005924], ["Dict[str, Dict[str, Any]]", 0.09779347344006852], ["dict", 0.09126012205778028]], "params1": [["str", 0.1954320388903339], ["List[str]", 0.19487692303554063], ["Optional[str]", 0.11002239582624555], ["Dict[str, Tuple[str, str]]", 0.09873984035420744], ["Dict[str, Dict[str, Any]]", 0.0975963253743], ["float", 0.0920942283478219]], "params2": [["str", 0.1954320388903339], ["List[str]", 0.19487692303554063], ["Optional[str]", 0.11002239582624555], ["Dict[str, Tuple[str, str]]", 0.09873984035420744], ["Dict[str, Dict[str, Any]]", 0.0975963253743], ["float", 0.0920942283478219]]}}, {"docstring": {"func": "Test if there is a DAG with not None schedule_interval and have some params that", "long_descr": "don't have a default value raise a error while DAG parsing", "ret": null}, "fn_lc": [[169, 4], [177, 50]], "fn_var_ln": {"params": [[174, 8], [174, 14]]}, "fn_var_occur": {"params": [["params", "Param", "type"], ["models", "DAG", "params", "params"]]}, "name": "test_not_none_schedule_with_non_default_params", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_not_none_schedule_with_non_default_params", "ret_exprs": [], "ret_type": "", "variables": {"params": ""}, "variables_p": {"params": [["str", 0.7454831158796789], ["Optional[taxonomy.db.models.name.Name]", 0.16421791971095961], ["datetime.datetime", 0.0902989644093618]]}}, {"docstring": {"func": "Test invalid `default_view` of DAG initialization", "long_descr": null, "ret": null}, "fn_lc": [[179, 4], [184, 82]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_dag_invalid_default_view", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_dag_invalid_default_view", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Test `default_view` default value of DAG initialization", "long_descr": null, "ret": null}, "fn_lc": [[186, 4], [191, 84]], "fn_var_ln": {"dag": [[190, 8], [190, 11]]}, "fn_var_occur": {"dag": [["dag", "models", "DAG", "dag_id"], ["conf", "get", "lower", "dag", "default_view"]]}, "name": "test_dag_default_view_default_value", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_dag_default_view_default_value", "ret_exprs": [], "ret_type": "", "variables": {"dag": ""}, "variables_p": {"dag": [["str", 0.8054077776889708], ["List[str]", 0.09576826353309065]]}}, {"docstring": {"func": "Test invalid `orientation` of DAG initialization", "long_descr": null, "ret": null}, "fn_lc": [[193, 4], [198, 80]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_dag_invalid_orientation", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_dag_invalid_orientation", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Test `orientation` default value of DAG initialization", "long_descr": null, "ret": null}, "fn_lc": [[200, 4], [205, 74]], "fn_var_ln": {"dag": [[204, 8], [204, 11]]}, "fn_var_occur": {"dag": [["dag", "models", "DAG", "dag_id"], ["conf", "get", "dag", "orientation"]]}, "name": "test_dag_orientation_default_value", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_dag_orientation_default_value", "ret_exprs": [], "ret_type": "", "variables": {"dag": ""}, "variables_p": {"dag": [["str", 0.18948904724835275], ["List[Tuple[str, Any]]", 0.0885087382445637], ["datetime.datetime.datetime", 0.08791620900288108], ["int", 0.08704580089533762]]}}, {"docstring": {"func": "Test DAG as a context manager.", "long_descr": "When used as a context manager, Operators are automatically added to\nthe DAG (unless they specify a different DAG)", "ret": null}, "fn_lc": [[207, 4], [256, 30]], "fn_var_ln": {"dag": [[252, 8], [252, 15]], "dag2": [[214, 8], [214, 12]], "op1": [[217, 12], [217, 15]], "op2": [[218, 12], [218, 15]], "op3": [[226, 12], [226, 15]], "op4": [[233, 16], [233, 19]], "op5": [[234, 12], [234, 15]], "op7": [[249, 16], [249, 19]], "op8": [[250, 12], [250, 15]], "op9": [[251, 8], [251, 11]]}, "fn_var_occur": {"dag": [["dag", "DAG", "start_date", "DEFAULT_DATE", "default_args"], ["op2", "EmptyOperator", "task_id", "dag", "dag2"], ["op1", "dag", "dag"], ["op2", "dag", "dag2"], ["op3", "dag", "dag2"], ["op4", "dag", "dag2"], ["op5", "dag", "dag"], ["DAG", "start_date", "DEFAULT_DATE", "dag"], ["dag", "dag_id"], ["dag", "tasks", "task_id"], ["op9", "dag", "dag2"], ["op7", "dag", "dag"], ["op8", "dag", "dag"], ["op9", "dag", "dag2"]], "dag2": [["dag2", "DAG", "start_date", "DEFAULT_DATE", "default_args"], ["op2", "EmptyOperator", "task_id", "dag", "dag2"], ["op2", "dag", "dag2"], ["op3", "dag", "dag2"], ["op4", "dag", "dag2"], ["op9", "dag", "dag2"], ["op9", "dag", "dag2"]], "op1": [["op1", "EmptyOperator", "task_id"], ["op1", "dag", "dag"], ["op1", "owner"]], "op2": [["op2", "EmptyOperator", "task_id", "dag", "dag2"], ["op2", "dag", "dag2"], ["op2", "owner"]], "op3": [["op3", "EmptyOperator", "task_id"], ["op3", "dag", "dag2"], ["op3", "owner"]], "op4": [["op4", "EmptyOperator", "task_id"], ["op4", "dag", "dag2"], ["op4", "owner"]], "op5": [["op5", "EmptyOperator", "task_id"], ["op5", "dag", "dag"], ["op5", "owner"]], "op7": [["op7", "EmptyOperator", "task_id"], ["op7", "dag", "dag"]], "op8": [["op8", "EmptyOperator", "task_id"], ["op8", "dag", "dag"]], "op9": [["op9", "EmptyOperator", "task_id"], ["op9", "dag", "dag2"], ["op9", "dag", "dag2"]]}, "name": "test_dag_as_context_manager", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_dag_as_context_manager", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "dag2": "", "op1": "", "op2": "", "op3": "", "op4": "", "op5": "", "op7": "", "op8": "", "op9": ""}, "variables_p": {"dag": [["int", 0.4262752155332361], ["str", 0.18396561188713736], ["datetime.datetime.timedelta", 0.1098035736397726], ["datetime.datetime.datetime", 0.1098035736397726], ["List[str]", 0.09026263004578154], ["Dict[str, str]", 0.07988939525429982]], "dag2": [["int", 0.4262752155332361], ["str", 0.18396561188713736], ["datetime.datetime.timedelta", 0.1098035736397726], ["datetime.datetime.datetime", 0.1098035736397726], ["List[str]", 0.09026263004578154], ["Dict[str, str]", 0.07988939525429982]], "op1": [["Pattern[Any]", 0.29948154170735447], ["list", 0.10693478050778088], ["Dict[str, Union[Any, Any, Any]]", 0.09277550369513604], ["Dict[str, str]", 0.09037594908321739], ["Dict[int, Union[Any, Any]]", 0.08592935185410887], ["dict", 0.08316335989363993], ["int", 0.08105333660146827], ["requests.models.Response", 0.08016399942723572]], "op2": [["Pattern[Any]", 0.26021981014300055], ["Dict[str, Union[Any, bool, str]]", 0.18867965976770643], ["o2a.converter.task.Task", 0.1043407168518815], ["Dict[int, str]", 0.10224899456347965], ["Dict[int, Union[Any, Any]]", 0.09926809745975276], ["int", 0.08275849691530116], ["Dict[str, Dict[str, Any]]", 0.0805699993760419]], "op3": [["Pattern[Any]", 0.29948154170735447], ["list", 0.10693478050778088], ["Dict[str, Union[Any, Any, Any]]", 0.09277550369513604], ["Dict[str, str]", 0.09037594908321739], ["Dict[int, Union[Any, Any]]", 0.08592935185410887], ["dict", 0.08316335989363993], ["int", 0.08105333660146827], ["requests.models.Response", 0.08016399942723572]], "op4": [["Pattern[Any]", 0.29948154170735447], ["list", 0.10693478050778088], ["Dict[str, Union[Any, Any, Any]]", 0.09277550369513604], ["Dict[str, str]", 0.09037594908321739], ["Dict[int, Union[Any, Any]]", 0.08592935185410887], ["dict", 0.08316335989363993], ["int", 0.08105333660146827], ["requests.models.Response", 0.08016399942723572]], "op5": [["Pattern[Any]", 0.29948154170735447], ["list", 0.10693478050778088], ["Dict[str, Union[Any, Any, Any]]", 0.09277550369513604], ["Dict[str, str]", 0.09037594908321739], ["Dict[int, Union[Any, Any]]", 0.08592935185410887], ["dict", 0.08316335989363993], ["int", 0.08105333660146827], ["requests.models.Response", 0.08016399942723572]], "op7": [["Pattern[Any]", 0.2650537788171139], ["Dict[str, Union[Any, Any, Any]]", 0.1161347669483028], ["Dict[str, str]", 0.10064090791402337], ["dict", 0.09286057147798296], ["str", 0.09276268242869652], ["list", 0.086678711119582], ["Dict[int, str]", 0.08220818865404256], ["Dict[str, Type[Any]]", 0.08142834839109074]], "op8": [["Pattern[Any]", 0.2650537788171139], ["Dict[str, Union[Any, Any, Any]]", 0.1161347669483028], ["Dict[str, str]", 0.10064090791402337], ["dict", 0.09286057147798296], ["str", 0.09276268242869652], ["list", 0.086678711119582], ["Dict[int, str]", 0.08220818865404256], ["Dict[str, Type[Any]]", 0.08142834839109074]], "op9": [["Pattern[Any]", 0.30423619811081093], ["Dict[str, str]", 0.17081823425694254], ["Dict[str, Union[Any, Any, Any]]", 0.09515445565735624], ["str", 0.091401795122478], ["Dict[str, Dict[str, Any]]", 0.08854176027637604], ["int", 0.08245862610283722], ["Dict[int, Any]", 0.08161639600248803]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[258, 4], [289, 74]], "fn_var_ln": {"child_dag": [[259, 8], [259, 17]], "op1": [[277, 12], [277, 15]], "op2": [[278, 12], [278, 15]], "op3": [[279, 12], [279, 15]], "parent_dag": [[269, 8], [269, 18]], "topological_list": [[283, 8], [283, 24]]}, "fn_var_occur": {"child_dag": [["child_dag", "DAG", "schedule", "start_date", "DEFAULT_DATE"], ["op2", "SubDagOperator", "task_id", "subdag", "child_dag"]], "op1": [["op1", "EmptyOperator", "task_id"], ["op1", "op2", "op3"]], "op2": [["op2", "SubDagOperator", "task_id", "subdag", "child_dag"], ["op1", "op2", "op3"]], "op3": [["op3", "EmptyOperator", "task_id"], ["op1", "op2", "op3"]], "parent_dag": [["parent_dag", "DAG", "schedule", "start_date", "DEFAULT_DATE"], ["topological_list", "parent_dag", "topological_sort", "include_subdag_tasks", "True"]], "topological_list": [["topological_list", "parent_dag", "topological_sort", "include_subdag_tasks", "True"], ["self", "_occur_before", "topological_list"], ["self", "_occur_before", "topological_list"], ["self", "_occur_before", "topological_list"], ["self", "_occur_before", "topological_list"], ["self", "_occur_before", "topological_list"]]}, "name": "test_dag_topological_sort_include_subdag_tasks", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "_occur_before", "topological_list"], ["self", "_occur_before", "topological_list"], ["self", "_occur_before", "topological_list"], ["self", "_occur_before", "topological_list"], ["self", "_occur_before", "topological_list"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_dag_topological_sort_include_subdag_tasks", "ret_exprs": [], "ret_type": "", "variables": {"child_dag": "", "op1": "", "op2": "", "op3": "", "parent_dag": "", "topological_list": ""}, "variables_p": {"child_dag": [["str", 0.4008942415525416], ["int", 0.3189806806624423], ["Dict[int, str]", 0.08074830460158992], ["list", 0.07928327651052436]], "op1": [["Pattern[Any]", 0.31009746229780155], ["str", 0.25306320510175906], ["Dict[str, str]", 0.17917338048540177], ["Dict[str, Union[Any, Any, Any]]", 0.09322078256194516], ["io.BufferedRandom", 0.08449169181711917], ["Dict[int, Any]", 0.07995347773597332]], "op2": [["Dict[str, Union[Any, bool, str]]", 0.1680649143669079], ["restful_functions.modules.task.TaskStore", 0.1457782287682828], ["Dict[str, Union[int, str]]", 0.129158850477574], ["o2a.converter.task.Task", 0.09401264437672087], ["golem.task.taskcomputer.TaskComputer", 0.08892916838274521], ["Dict[str, Any]", 0.0778439630234079]], "op3": [["Pattern[Any]", 0.31009746229780155], ["str", 0.25306320510175906], ["Dict[str, str]", 0.17917338048540177], ["Dict[str, Union[Any, Any, Any]]", 0.09322078256194516], ["io.BufferedRandom", 0.08449169181711917], ["Dict[int, Any]", 0.07995347773597332]], "parent_dag": [["Optional[pxl.state.Album]", 0.10115963317774485], ["Dict[str, Any]", 0.09452664543438721], ["List[int]", 0.08873981570864263], ["myia.utils.misc.Named", 0.08197759297028843]], "topological_list": [["list", 0.2893092298724212]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[291, 4], [294, 43]], "fn_var_ln": {"dag": [[292, 8], [292, 11]]}, "fn_var_occur": {"dag": [["dag", "DAG", "start_date", "DEFAULT_DATE", "default_args"], ["dag", "topological_sort"]]}, "name": "test_dag_topological_sort_dag_without_tasks", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_dag_topological_sort_dag_without_tasks", "ret_exprs": [], "ret_type": "", "variables": {"dag": ""}, "variables_p": {"dag": [["str", 0.3177223728013954], ["Type[Tuple[int, int]]", 0.17493483326114068], ["Pattern[str]", 0.10172320097781958], ["Optional[byceps.services.ticketing.models.tickeTicket]", 0.09577786248430288], ["int", 0.07777113388614551], ["Dict[str, Union[bool, datetime.datetime, str]]", 0.07608845856188985], ["Type[Dict[str, Any]]", 0.07542133632945244]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[296, 4], [297, 61]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_dag_naive_start_date_string", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_dag_naive_start_date_string", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[299, 4], [300, 87]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_dag_naive_start_end_dates_strings", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_dag_naive_start_end_dates_strings", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Tests that a start_date string with a timezone and an end_date string without a timezone", "long_descr": "are accepted and that the timezone from the start carries over the end\n\nThis test is a little indirect, it works by setting start and end equal except for the\ntimezone and then testing for equality after the DAG construction.  They'll be equal\nonly if the same timezone was applied to both.\n\nAn explicit check the `tzinfo` attributes for both are the same is an extra check.", "ret": null}, "fn_lc": [[302, 4], [317, 91]], "fn_var_ln": {"dag": [[313, 8], [313, 11]]}, "fn_var_occur": {"dag": [["dag", "DAG", "default_args"], ["dag", "default_args", "dag", "default_args"], ["dag", "default_args", "tzinfo", "dag", "default_args", "tzinfo"]]}, "name": "test_dag_start_date_propagates_to_end_date", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_dag_start_date_propagates_to_end_date", "ret_exprs": [], "ret_type": "", "variables": {"dag": ""}, "variables_p": {"dag": [["Dict[str, List[str]]", 0.19999162315154181], ["int", 0.09908757415068112], ["Tuple[None, Any]", 0.09306780350689309]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[319, 4], [323, 48]], "fn_var_ln": {"dag": [[322, 8], [322, 11]]}, "fn_var_occur": {"dag": [["dag", "DAG", "default_args", "datetime", "datetime"], ["dag", "timezone", "settings", "TIMEZONE"], ["dag", "DAG", "start_date", "datetime", "datetime"], ["dag", "timezone", "settings", "TIMEZONE"]]}, "name": "test_dag_naive_default_args_start_date", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_dag_naive_default_args_start_date", "ret_exprs": [], "ret_type": "", "variables": {"dag": ""}, "variables_p": {"dag": [["datetime.datetime.timedelta", 0.3136441022805697], ["datetime.date", 0.20154153174574213], ["datetime.datetime", 0.18675276114592615], ["datetime.datetime.datetime", 0.11069783417425831], ["int", 0.09966694730522169], ["str", 0.08769682334828181]]}}, {"docstring": {"func": "Tests if a start_date of None in default_args", "long_descr": "works.", "ret": null}, "fn_lc": [[325, 4], [331, 48]], "fn_var_ln": {"dag": [[330, 8], [330, 11]]}, "fn_var_occur": {"dag": [["dag", "DAG", "default_args", "None"], ["dag", "timezone", "settings", "TIMEZONE"]]}, "name": "test_dag_none_default_args_start_date", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_dag_none_default_args_start_date", "ret_exprs": [], "ret_type": "", "variables": {"dag": ""}, "variables_p": {"dag": [["str", 0.2796437874131511], ["pathlib.Path", 0.14982655526392938], ["chalice.config.DeployedResources", 0.08073106853571327], ["List[str]", 0.07949554811658804], ["Dict[str, Dict[str, dict]]", 0.07424453886603745], ["int", 0.06702704085308138]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[333, 4], [360, 58]], "fn_var_ln": {"calculated_weight": [[359, 16], [359, 33]], "correct_weight": [[357, 16], [357, 30]], "depth": [[335, 8], [335, 13]], "match": [[354, 16], [354, 21]], "pattern": [[337, 8], [337, 15]], "pipeline": [[342, 12], [342, 20]], "task_depth": [[355, 16], [355, 26]], "weight": [[336, 8], [336, 14]], "width": [[334, 8], [334, 13]]}, "fn_var_occur": {"calculated_weight": [["calculated_weight", "task", "priority_weight_total"], ["calculated_weight", "correct_weight"]], "correct_weight": [["correct_weight", "depth", "task_depth", "width", "weight"], ["calculated_weight", "correct_weight"]], "depth": [["pipeline", "EmptyOperator", "task_id", "i", "j", "priority_weight", "weight", "j", "range", "width", "i", "range", "depth"], ["correct_weight", "depth", "task_depth", "width", "weight"]], "match": [["match", "pattern", "match", "task", "task_id"], ["task_depth", "int", "match", "group"]], "pattern": [["pattern", "re", "compile"], ["match", "pattern", "match", "task", "task_id"]], "pipeline": [["pipeline", "EmptyOperator", "task_id", "i", "j", "priority_weight", "weight", "j", "range", "width", "i", "range", "depth"], ["enumerate", "pipeline"], ["pipeline", "i"]], "task_depth": [["task_depth", "int", "match", "group"], ["correct_weight", "depth", "task_depth", "width", "weight"]], "weight": [["pipeline", "EmptyOperator", "task_id", "i", "j", "priority_weight", "weight", "j", "range", "width", "i", "range", "depth"], ["correct_weight", "depth", "task_depth", "width", "weight"]], "width": [["pipeline", "EmptyOperator", "task_id", "i", "j", "priority_weight", "weight", "j", "range", "width", "i", "range", "depth"], ["correct_weight", "depth", "task_depth", "width", "weight"]]}, "name": "test_dag_task_priority_weight_total", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_dag_task_priority_weight_total", "ret_exprs": [], "ret_type": "", "variables": {"calculated_weight": "", "correct_weight": "", "depth": "", "match": "", "pattern": "", "pipeline": "", "task_depth": "", "weight": "", "width": ""}, "variables_p": {"calculated_weight": [["golem.task.taskproviderstats.ProviderStats", 0.9999999998132262], ["str", 5.738503200579123e-11], ["list", 4.040552087207321e-11], ["List[bool]", 2.0864123004692746e-11], ["int", 1.698987547885561e-11]], "correct_weight": [["str", 0.390840603467163], ["dict", 0.09990037213364415], ["alerta.models.alerAlert", 0.0993352273596799], ["int", 0.09733616834501933]], "depth": [["int", 0.5063217476546754], ["str", 0.2209253727573886], ["Dict[str, Union[Any, bytes]]", 0.08715862596770267]], "match": [["Dict[str, str]", 0.12160263877892959], ["str", 0.1116136014729588], ["Dict[int, Any]", 0.10757373249405745], ["dict", 0.09948545777658979], ["KeysView[str]", 0.09824002988050165], ["Type[str]", 0.0962219464510581], ["int", 0.09552375503608954], ["Type[Dict[str, Any]]", 0.09061160526599764], ["List[str]", 0.09009713744428226], ["BoundMethod[Callable(datetime.datetime.now)[Any, Any], Type[datetime.datetime]]", 0.08903009539953526]], "pattern": [["str", 0.5851325714424211], ["list", 0.1229914296504764], ["int", 0.10445221343241526], ["Dict[str, str]", 0.09646519621333981]], "pipeline": [["str", 0.27436714361764836], ["Pattern[str]", 0.20642011840199576], ["int", 0.154319720710533], ["db.Stock", 0.09624527446179582], ["List[str]", 0.08956161817790004], ["Type[manager.projects.models.snapshots.Snapshot]", 0.08724606593937119]], "task_depth": [["int", 0.2918756369815399], ["List[List[int]]", 0.21069625331000272], ["list", 0.16587680663298376], ["Dict[str, str]", 0.14164282403311718], ["Dict[str, List[Any]]", 0.08092124505544705]], "weight": [["int", 0.5063217476546754], ["str", 0.2209253727573886], ["Dict[str, Union[Any, bytes]]", 0.08715862596770267]], "width": [["int", 0.2911721381098954], ["list", 0.11516749009020406], ["List[float]", 0.0991323333440832], ["str", 0.09221405514877211]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[362, 4], [394, 58]], "fn_var_ln": {"calculated_weight": [[393, 16], [393, 33]], "correct_weight": [[391, 16], [391, 30]], "depth": [[366, 8], [366, 13]], "match": [[388, 16], [388, 21]], "pattern": [[367, 8], [367, 15]], "pipeline": [[369, 12], [369, 20]], "task_depth": [[389, 16], [389, 26]], "weight": [[364, 8], [364, 14]], "width": [[365, 8], [365, 13]]}, "fn_var_occur": {"calculated_weight": [["calculated_weight", "task", "priority_weight_total"], ["calculated_weight", "correct_weight"]], "correct_weight": [["correct_weight", "task_depth", "width", "weight"], ["calculated_weight", "correct_weight"]], "depth": [["pipeline", "EmptyOperator", "task_id", "i", "j", "priority_weight", "weight", "weight_rule", "WeightRule", "UPSTREAM", "j", "range", "width", "i", "range", "depth"]], "match": [["match", "pattern", "match", "task", "task_id"], ["task_depth", "int", "match", "group"]], "pattern": [["pattern", "re", "compile"], ["match", "pattern", "match", "task", "task_id"]], "pipeline": [["pipeline", "EmptyOperator", "task_id", "i", "j", "priority_weight", "weight", "weight_rule", "WeightRule", "UPSTREAM", "j", "range", "width", "i", "range", "depth"], ["enumerate", "pipeline"], ["pipeline", "i"]], "task_depth": [["task_depth", "int", "match", "group"], ["correct_weight", "task_depth", "width", "weight"]], "weight": [["pipeline", "EmptyOperator", "task_id", "i", "j", "priority_weight", "weight", "weight_rule", "WeightRule", "UPSTREAM", "j", "range", "width", "i", "range", "depth"], ["correct_weight", "task_depth", "width", "weight"]], "width": [["pipeline", "EmptyOperator", "task_id", "i", "j", "priority_weight", "weight", "weight_rule", "WeightRule", "UPSTREAM", "j", "range", "width", "i", "range", "depth"], ["correct_weight", "task_depth", "width", "weight"]]}, "name": "test_dag_task_priority_weight_total_using_upstream", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_dag_task_priority_weight_total_using_upstream", "ret_exprs": [], "ret_type": "", "variables": {"calculated_weight": "", "correct_weight": "", "depth": "", "match": "", "pattern": "", "pipeline": "", "task_depth": "", "weight": "", "width": ""}, "variables_p": {"calculated_weight": [["golem.task.taskproviderstats.ProviderStats", 0.9999999998132262], ["str", 5.738503200579123e-11], ["list", 4.040552087207321e-11], ["List[bool]", 2.0864123004692746e-11], ["int", 1.698987547885561e-11]], "correct_weight": [["int", 0.5266848944674649], ["dict", 0.10347350396818149], ["list", 0.09736512127639914], ["lists.models.Todo", 0.08918465084216368]], "depth": [["str", 0.10537472444262877], ["ide.pathx.Path", 0.09434253125655317]], "match": [["Dict[str, str]", 0.12160263877892959], ["str", 0.1116136014729588], ["Dict[int, Any]", 0.10757373249405745], ["dict", 0.09948545777658979], ["KeysView[str]", 0.09824002988050165], ["Type[str]", 0.0962219464510581], ["int", 0.09552375503608954], ["Type[Dict[str, Any]]", 0.09061160526599764], ["List[str]", 0.09009713744428226], ["BoundMethod[Callable(datetime.datetime.now)[Any, Any], Type[datetime.datetime]]", 0.08903009539953526]], "pattern": [["str", 0.5851325714424211], ["list", 0.1229914296504764], ["int", 0.10445221343241526], ["Dict[str, str]", 0.09646519621333981]], "pipeline": [["str", 0.10537472444262877], ["ide.pathx.Path", 0.09434253125655317]], "task_depth": [["int", 0.7138620611880507], ["Dict[str, str]", 0.19597094535091347]], "weight": [["str", 0.10537472444262877], ["ide.pathx.Path", 0.09434253125655317]], "width": [["int", 0.17531212594702172], ["str", 0.15759132500191297], ["bool", 0.1088792819045426], ["float", 0.09590232969679437]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[396, 4], [424, 58]], "fn_var_ln": {"calculated_weight": [[423, 16], [423, 33]], "correct_weight": [[422, 16], [422, 30]], "depth": [[400, 8], [400, 13]], "pipeline": [[402, 12], [402, 20]], "weight": [[398, 8], [398, 14]], "width": [[399, 8], [399, 13]]}, "fn_var_occur": {"calculated_weight": [["calculated_weight", "task", "priority_weight_total"], ["calculated_weight", "correct_weight"]], "correct_weight": [["correct_weight", "weight"], ["calculated_weight", "correct_weight"]], "depth": [["pipeline", "EmptyOperator", "task_id", "i", "j", "priority_weight", "weight", "weight_rule", "WeightRule", "ABSOLUTE", "j", "range", "width", "i", "range", "depth"]], "pipeline": [["pipeline", "EmptyOperator", "task_id", "i", "j", "priority_weight", "weight", "weight_rule", "WeightRule", "ABSOLUTE", "j", "range", "width", "i", "range", "depth"], ["enumerate", "pipeline"], ["pipeline", "i"]], "weight": [["pipeline", "EmptyOperator", "task_id", "i", "j", "priority_weight", "weight", "weight_rule", "WeightRule", "ABSOLUTE", "j", "range", "width", "i", "range", "depth"], ["correct_weight", "weight"]], "width": [["pipeline", "EmptyOperator", "task_id", "i", "j", "priority_weight", "weight", "weight_rule", "WeightRule", "ABSOLUTE", "j", "range", "width", "i", "range", "depth"]]}, "name": "test_dag_task_priority_weight_total_using_absolute", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_dag_task_priority_weight_total_using_absolute", "ret_exprs": [], "ret_type": "", "variables": {"calculated_weight": "", "correct_weight": "", "depth": "", "pipeline": "", "weight": "", "width": ""}, "variables_p": {"calculated_weight": [["golem.task.taskproviderstats.ProviderStats", 0.9999999998132262], ["str", 5.738503200579123e-11], ["list", 4.040552087207321e-11], ["List[bool]", 2.0864123004692746e-11], ["int", 1.698987547885561e-11]], "correct_weight": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["str", 0.1], ["datetime.timedelta", 0.1]], "depth": [["str", 0.10537472444262877], ["ide.pathx.Path", 0.09434253125655317]], "pipeline": [["str", 0.10537472444262877], ["ide.pathx.Path", 0.09434253125655317]], "weight": [["str", 0.10537472444262877], ["ide.pathx.Path", 0.09434253125655317]], "width": [["int", 0.17531212594702172], ["str", 0.15759132500191297], ["bool", 0.1088792819045426], ["float", 0.09590232969679437]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[426, 4], [430, 75]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_dag_task_invalid_weight_rule", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_dag_task_invalid_weight_rule", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[432, 4], [482, 23]], "fn_var_ln": {"dr1": [[439, 8], [439, 11]], "dr2": [[440, 8], [440, 11]], "dr3": [[443, 8], [443, 11]], "dr4": [[446, 8], [446, 11]], "session": [[458, 8], [458, 15]], "state": [[457, 8], [457, 17]], "test_dag": [[436, 8], [436, 16]], "test_dag_id": [[433, 8], [433, 19]], "test_task": [[437, 8], [437, 17]], "test_task_id": [[434, 8], [434, 20]], "ti1": [[450, 8], [450, 11]], "ti2": [[452, 8], [452, 11]], "ti3": [[454, 8], [454, 11]], "ti4": [[456, 8], [456, 11]]}, "fn_var_occur": {"dr1": [["dr1", "test_dag", "create_dagrun", "state", "None", "run_id", "execution_date", "DEFAULT_DATE"], ["ti1", "TI", "task", "test_task", "run_id", "dr1", "run_id"]], "dr2": [["dr2", "test_dag", "create_dagrun", "state", "None", "run_id", "execution_date", "DEFAULT_DATE", "datetime", "timedelta", "days"], ["ti2", "TI", "task", "test_task", "run_id", "dr2", "run_id"]], "dr3": [["dr3", "test_dag", "create_dagrun", "state", "None", "run_id", "execution_date", "DEFAULT_DATE", "datetime", "timedelta", "days"], ["ti3", "TI", "task", "test_task", "run_id", "dr3", "run_id"]], "dr4": [["dr4", "test_dag", "create_dagrun", "state", "None", "run_id", "execution_date", "DEFAULT_DATE", "datetime", "timedelta", "days"], ["ti4", "TI", "task", "test_task", "run_id", "dr4", "run_id"]], "session": [["session", "settings", "Session"], ["session", "merge", "ti1"], ["session", "merge", "ti2"], ["session", "merge", "ti3"], ["session", "merge", "ti4"], ["session", "commit"], ["DAG", "get_num_task_instances", "test_dag_id", "task_ids", "session", "session"], ["DAG", "get_num_task_instances", "test_dag_id", "task_ids", "test_task_id", "session", "session"], ["DAG", "get_num_task_instances", "test_dag_id", "task_ids", "test_task_id", "session", "session"], ["DAG", "get_num_task_instances", "test_dag_id", "task_ids", "test_task_id", "states", "None", "session", "session"], ["DAG", "get_num_task_instances", "test_dag_id", "task_ids", "test_task_id", "states", "State", "RUNNING", "session", "session"], ["DAG", "get_num_task_instances", "test_dag_id", "task_ids", "test_task_id", "states", "None", "State", "RUNNING", "session", "session"], ["DAG", "get_num_task_instances", "test_dag_id", "task_ids", "test_task_id", "states", "None", "State", "QUEUED", "State", "RUNNING", "session", "session"], ["session", "close"]], "state": [["dr1", "test_dag", "create_dagrun", "state", "None", "run_id", "execution_date", "DEFAULT_DATE"], ["dr2", "test_dag", "create_dagrun", "state", "None", "run_id", "execution_date", "DEFAULT_DATE", "datetime", "timedelta", "days"], ["dr3", "test_dag", "create_dagrun", "state", "None", "run_id", "execution_date", "DEFAULT_DATE", "datetime", "timedelta", "days"], ["dr4", "test_dag", "create_dagrun", "state", "None", "run_id", "execution_date", "DEFAULT_DATE", "datetime", "timedelta", "days"], ["ti1", "state", "None"], ["ti2", "state", "State", "RUNNING"], ["ti3", "state", "State", "QUEUED"], ["ti4", "state", "State", "RUNNING"]], "test_dag": [["test_dag", "DAG", "dag_id", "test_dag_id", "start_date", "DEFAULT_DATE"], ["test_task", "EmptyOperator", "task_id", "test_task_id", "dag", "test_dag"], ["dr1", "test_dag", "create_dagrun", "state", "None", "run_id", "execution_date", "DEFAULT_DATE"], ["dr2", "test_dag", "create_dagrun", "state", "None", "run_id", "execution_date", "DEFAULT_DATE", "datetime", "timedelta", "days"], ["dr3", "test_dag", "create_dagrun", "state", "None", "run_id", "execution_date", "DEFAULT_DATE", "datetime", "timedelta", "days"], ["dr4", "test_dag", "create_dagrun", "state", "None", "run_id", "execution_date", "DEFAULT_DATE", "datetime", "timedelta", "days"]], "test_dag_id": [["test_dag", "DAG", "dag_id", "test_dag_id", "start_date", "DEFAULT_DATE"], ["DAG", "get_num_task_instances", "test_dag_id", "task_ids", "session", "session"], ["DAG", "get_num_task_instances", "test_dag_id", "task_ids", "test_task_id", "session", "session"], ["DAG", "get_num_task_instances", "test_dag_id", "task_ids", "test_task_id", "session", "session"], ["DAG", "get_num_task_instances", "test_dag_id", "task_ids", "test_task_id", "states", "None", "session", "session"], ["DAG", "get_num_task_instances", "test_dag_id", "task_ids", "test_task_id", "states", "State", "RUNNING", "session", "session"], ["DAG", "get_num_task_instances", "test_dag_id", "task_ids", "test_task_id", "states", "None", "State", "RUNNING", "session", "session"], ["DAG", "get_num_task_instances", "test_dag_id", "task_ids", "test_task_id", "states", "None", "State", "QUEUED", "State", "RUNNING", "session", "session"]], "test_task": [["test_task", "EmptyOperator", "task_id", "test_task_id", "dag", "test_dag"], ["ti1", "TI", "task", "test_task", "run_id", "dr1", "run_id"], ["ti2", "TI", "task", "test_task", "run_id", "dr2", "run_id"], ["ti3", "TI", "task", "test_task", "run_id", "dr3", "run_id"], ["ti4", "TI", "task", "test_task", "run_id", "dr4", "run_id"]], "test_task_id": [["test_task", "EmptyOperator", "task_id", "test_task_id", "dag", "test_dag"], ["DAG", "get_num_task_instances", "test_dag_id", "task_ids", "test_task_id", "session", "session"], ["DAG", "get_num_task_instances", "test_dag_id", "task_ids", "test_task_id", "session", "session"], ["DAG", "get_num_task_instances", "test_dag_id", "task_ids", "test_task_id", "states", "None", "session", "session"], ["DAG", "get_num_task_instances", "test_dag_id", "task_ids", "test_task_id", "states", "State", "RUNNING", "session", "session"], ["DAG", "get_num_task_instances", "test_dag_id", "task_ids", "test_task_id", "states", "None", "State", "RUNNING", "session", "session"], ["DAG", "get_num_task_instances", "test_dag_id", "task_ids", "test_task_id", "states", "None", "State", "QUEUED", "State", "RUNNING", "session", "session"]], "ti1": [["ti1", "TI", "task", "test_task", "run_id", "dr1", "run_id"], ["ti1", "state", "None"], ["session", "merge", "ti1"]], "ti2": [["ti2", "TI", "task", "test_task", "run_id", "dr2", "run_id"], ["ti2", "state", "State", "RUNNING"], ["session", "merge", "ti2"]], "ti3": [["ti3", "TI", "task", "test_task", "run_id", "dr3", "run_id"], ["ti3", "state", "State", "QUEUED"], ["session", "merge", "ti3"]], "ti4": [["ti4", "TI", "task", "test_task", "run_id", "dr4", "run_id"], ["ti4", "state", "State", "RUNNING"], ["session", "merge", "ti4"]]}, "name": "test_get_num_task_instances", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_get_num_task_instances", "ret_exprs": [], "ret_type": "", "variables": {"dr1": "", "dr2": "", "dr3": "", "dr4": "", "session": "", "state": "", "test_dag": "", "test_dag_id": "", "test_task": "", "test_task_id": "", "ti1": "", "ti2": "", "ti3": "", "ti4": ""}, "variables_p": {"dr1": [["datetime.timedelta", 0.1904462772864305], ["str", 0.1865750202010853], ["Dict[str, str]", 0.11347965796327232], ["Tuple[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any]", 0.1047608723674925], ["list", 0.10133477465029357], ["int", 0.09381431341238163]], "dr2": [["str", 0.19137542567171723], ["Tuple[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any]", 0.10289279896384738], ["byceps.services.user.transfer.models.User", 0.09864543592898058], ["byceps.services.party.transfer.models.Party", 0.09707732464239424], ["backend.api.models.group.Group", 0.0913869942502248], ["int", 0.09013693154470706], ["Dict[str, str]", 0.08911977355188233], ["geode.models.common.Address", 0.08672629901393861]], "dr3": [["str", 0.19137542567171723], ["Tuple[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any]", 0.10289279896384738], ["byceps.services.user.transfer.models.User", 0.09864543592898058], ["byceps.services.party.transfer.models.Party", 0.09707732464239424], ["backend.api.models.group.Group", 0.0913869942502248], ["int", 0.09013693154470706], ["Dict[str, str]", 0.08911977355188233], ["geode.models.common.Address", 0.08672629901393861]], "dr4": [["str", 0.19137542567171723], ["Tuple[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any]", 0.10289279896384738], ["byceps.services.user.transfer.models.User", 0.09864543592898058], ["byceps.services.party.transfer.models.Party", 0.09707732464239424], ["backend.api.models.group.Group", 0.0913869942502248], ["int", 0.09013693154470706], ["Dict[str, str]", 0.08911977355188233], ["geode.models.common.Address", 0.08672629901393861]], "session": [["sqlalchemy.orm.session.Session", 0.3153193135090744], ["kedro.framework.session.session.KedroSession", 0.15266269998313858], ["Optional[str]", 0.1296814308145547], ["SMSShell.models.session.Session", 0.07638025213015276]], "state": [["str", 0.2595238947770868], ["dict", 0.2016940117624914], ["Optional[str]", 0.07973020386715393]], "test_dag": [["List[Union[Any, Any]]", 0.2245586442588139], ["str", 0.2010135456537235], ["int", 0.17934580142766304], ["enumerate[Any]", 0.1399318399527789], ["Dict[bool, bool]", 0.07961316369175798]], "test_dag_id": [["int", 0.5090926519743763], ["bool", 0.11189243381700555], ["Dict[str, Dict[str, Any]]", 0.10316273731659749], ["Tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str]", 0.09328729659132964], ["Tuple[int, int, int]", 0.09109110059058781]], "test_task": [["list", 0.526292484578243], ["Dict[str, Any]", 0.11575756937868706], ["Set[str]", 0.09974432700026029], ["str", 0.08416546570936885], ["Dict[str, Union[Any, Any]]", 0.08383232565657138]], "test_task_id": [["str", 0.7917562276763617], ["int", 0.2082437723236383]], "ti1": [["Set[str]", 0.11545034898362455], ["Dict[str, Any]", 0.11377807001951273], ["List[Union[Any, Any, Any, Any]]", 0.09234279960652317], ["bool", 0.08625368913109058], ["List[str]", 0.08577528893559803]], "ti2": [["str", 0.21611757999949077], ["int", 0.19128159836699696], ["Dict[str, Any]", 0.12037157429508051], ["List[Dict[str, str]]", 0.0985078856915862], ["datetime.timedelta", 0.09073992207814802]], "ti3": [["int", 0.19187864298856588], ["str", 0.17536874751882345], ["Dict[str, Any]", 0.1389227356294028], ["tests.mypy.modules.success.Model", 0.10160736667056723], ["bool", 0.10130818899447104], ["datetime.timedelta", 0.08914532916002328]], "ti4": [["str", 0.21611757999949077], ["int", 0.19128159836699696], ["Dict[str, Any]", 0.12037157429508051], ["List[Dict[str, str]]", 0.0985078856915862], ["datetime.timedelta", 0.09073992207814802]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[495, 8], [501, 25]], "fn_var_ln": {"dagrun": [[496, 12], [496, 18]], "execution_date": [[500, 12], [500, 33]], "start_date": [[499, 12], [499, 29]]}, "fn_var_occur": {"dagrun": [["dagrun", "test_dag", "create_dagrun", "state", "State", "SUCCESS", "run_type", "type", "run_id", "delta_h", "session", "session"], ["dagrun", "start_date", "BASE_DATE", "timedelta", "hours", "delta_h"], ["dagrun", "execution_date", "BASE_DATE", "timedelta", "hours", "delta_h"]], "execution_date": [["dagrun", "execution_date", "BASE_DATE", "timedelta", "hours", "delta_h"]], "start_date": [["test_dag", "DAG", "dag_id", "test_dag_id", "start_date", "BASE_DATE"], ["dagrun", "start_date", "BASE_DATE", "timedelta", "hours", "delta_h"]]}, "name": "dag_run_before", "params": {"delta_h": "", "type": ""}, "params_descr": {"delta_h": "", "type": ""}, "params_occur": {"delta_h": [["dagrun", "test_dag", "create_dagrun", "state", "State", "SUCCESS", "run_type", "type", "run_id", "delta_h", "session", "session"], ["dagrun", "start_date", "BASE_DATE", "timedelta", "hours", "delta_h"], ["dagrun", "execution_date", "BASE_DATE", "timedelta", "hours", "delta_h"]], "type": [["dagrun", "test_dag", "create_dagrun", "state", "State", "SUCCESS", "run_type", "type", "run_id", "delta_h", "session", "session"]]}, "params_p": {"args": [], "delta_h": [["cmk.utils.type_defs.HostName", 0.09948523207396721], ["cmk.utils.type_defs.Ruleset", 0.09948523207396721], ["int", 0.09382861563828554], ["Optional[int]", 0.09025762074579792]], "kwargs": [], "self": [], "type": [["int", 0.2821583287024125], ["cmk.utils.type_defs.HostName", 0.10380036561068566], ["cmk.utils.type_defs.Ruleset", 0.10380036561068566]]}, "q_name": "TestDag.test_get_task_instances_before.<locals>.dag_run_before", "ret_exprs": ["return dagrun"], "ret_type": "", "ret_type_p": [["int", 0.9999999977613667], ["List[int]", 6.064080292830154e-10], ["float", 5.406446105687368e-10]], "variables": {"dagrun": "", "execution_date": "", "start_date": ""}, "variables_p": {"dagrun": [["Dict[str, Union[float, str]]", 0.13314441852185704], ["Dict[str, str]", 0.08685299371343502]], "execution_date": [["str", 0.5597755594696123], ["Type[prm.journals.models.moods.Mood]", 0.12776644043503074], ["datetime.timedelta", 0.0965804216506441], ["datetime.date.time.date", 0.08970022688359162]], "start_date": [["datetime.datetime.datetime", 0.46766243746225644], ["datetime.timedelta", 0.29116239637106817], ["datetime.date", 0.11507675514696099]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[484, 4], [601, 23]], "fn_var_ln": {"BASE_DATE": [[485, 8], [485, 17]], "REF_DATE": [[580, 8], [580, 16]], "dr1": [[503, 8], [503, 11]], "dr2": [[504, 8], [504, 11]], "dr3": [[505, 8], [505, 11]], "dr4": [[506, 8], [506, 11]], "dr5": [[507, 8], [507, 11]], "dr6": [[508, 8], [508, 11]], "dr7": [[509, 8], [509, 11]], "dr8": [[510, 8], [510, 11]], "session": [[493, 8], [493, 15]], "test_dag": [[490, 8], [490, 16]], "test_dag_id": [[487, 8], [487, 19]], "test_task_id": [[488, 8], [488, 20]]}, "fn_var_occur": {"BASE_DATE": [["REF_DATE", "BASE_DATE"], ["REF_DATE", "BASE_DATE", "timedelta", "hours"], ["REF_DATE", "BASE_DATE", "timedelta", "hours"]], "REF_DATE": [["REF_DATE", "BASE_DATE"], ["set", "dr", "run_id", "dr", "dr1", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr1", "dr2", "dr3", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr1", "dr2", "dr3", "dr4", "dr5", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr1", "dr2", "dr3", "dr4", "dr5", "dr6", "dr7", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr1", "dr2", "dr3", "dr4", "dr5", "dr6", "dr7", "dr8", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr1", "dr2", "dr3", "dr4", "dr5", "dr6", "dr7", "dr8", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["REF_DATE", "BASE_DATE", "timedelta", "hours"], ["set", "dr", "run_id", "dr", "dr4", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr4", "dr5", "dr6", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr4", "dr5", "dr6", "dr7", "dr8", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr4", "dr5", "dr6", "dr7", "dr8", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["REF_DATE", "BASE_DATE", "timedelta", "hours"], ["set", "dr", "run_id", "dr", "dr8", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr8", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr8", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"]], "dr1": [["dr1", "dag_run_before", "delta_h", "type", "DagRunType", "MANUAL"], ["set", "dr", "run_id", "dr", "dr1", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr1", "dr2", "dr3", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr1", "dr2", "dr3", "dr4", "dr5", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr1", "dr2", "dr3", "dr4", "dr5", "dr6", "dr7", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr1", "dr2", "dr3", "dr4", "dr5", "dr6", "dr7", "dr8", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr1", "dr2", "dr3", "dr4", "dr5", "dr6", "dr7", "dr8", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"]], "dr2": [["dr2", "dag_run_before", "delta_h", "type", "DagRunType", "MANUAL"], ["set", "dr", "run_id", "dr", "dr1", "dr2", "dr3", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr1", "dr2", "dr3", "dr4", "dr5", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr1", "dr2", "dr3", "dr4", "dr5", "dr6", "dr7", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr1", "dr2", "dr3", "dr4", "dr5", "dr6", "dr7", "dr8", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr1", "dr2", "dr3", "dr4", "dr5", "dr6", "dr7", "dr8", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"]], "dr3": [["dr3", "dag_run_before", "delta_h", "type", "DagRunType", "MANUAL"], ["set", "dr", "run_id", "dr", "dr1", "dr2", "dr3", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr1", "dr2", "dr3", "dr4", "dr5", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr1", "dr2", "dr3", "dr4", "dr5", "dr6", "dr7", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr1", "dr2", "dr3", "dr4", "dr5", "dr6", "dr7", "dr8", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr1", "dr2", "dr3", "dr4", "dr5", "dr6", "dr7", "dr8", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"]], "dr4": [["dr4", "dag_run_before", "delta_h", "type", "DagRunType", "MANUAL"], ["set", "dr", "run_id", "dr", "dr1", "dr2", "dr3", "dr4", "dr5", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr1", "dr2", "dr3", "dr4", "dr5", "dr6", "dr7", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr1", "dr2", "dr3", "dr4", "dr5", "dr6", "dr7", "dr8", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr1", "dr2", "dr3", "dr4", "dr5", "dr6", "dr7", "dr8", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr4", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr4", "dr5", "dr6", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr4", "dr5", "dr6", "dr7", "dr8", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr4", "dr5", "dr6", "dr7", "dr8", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"]], "dr5": [["dr5", "dag_run_before", "delta_h"], ["set", "dr", "run_id", "dr", "dr1", "dr2", "dr3", "dr4", "dr5", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr1", "dr2", "dr3", "dr4", "dr5", "dr6", "dr7", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr1", "dr2", "dr3", "dr4", "dr5", "dr6", "dr7", "dr8", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr1", "dr2", "dr3", "dr4", "dr5", "dr6", "dr7", "dr8", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr4", "dr5", "dr6", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr4", "dr5", "dr6", "dr7", "dr8", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr4", "dr5", "dr6", "dr7", "dr8", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"]], "dr6": [["dr6", "dag_run_before", "delta_h"], ["set", "dr", "run_id", "dr", "dr1", "dr2", "dr3", "dr4", "dr5", "dr6", "dr7", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr1", "dr2", "dr3", "dr4", "dr5", "dr6", "dr7", "dr8", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr1", "dr2", "dr3", "dr4", "dr5", "dr6", "dr7", "dr8", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr4", "dr5", "dr6", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr4", "dr5", "dr6", "dr7", "dr8", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr4", "dr5", "dr6", "dr7", "dr8", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"]], "dr7": [["dr7", "dag_run_before", "delta_h"], ["set", "dr", "run_id", "dr", "dr1", "dr2", "dr3", "dr4", "dr5", "dr6", "dr7", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr1", "dr2", "dr3", "dr4", "dr5", "dr6", "dr7", "dr8", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr1", "dr2", "dr3", "dr4", "dr5", "dr6", "dr7", "dr8", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr4", "dr5", "dr6", "dr7", "dr8", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr4", "dr5", "dr6", "dr7", "dr8", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"]], "dr8": [["dr8", "dag_run_before", "delta_h"], ["set", "dr", "run_id", "dr", "dr1", "dr2", "dr3", "dr4", "dr5", "dr6", "dr7", "dr8", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr1", "dr2", "dr3", "dr4", "dr5", "dr6", "dr7", "dr8", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr4", "dr5", "dr6", "dr7", "dr8", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr4", "dr5", "dr6", "dr7", "dr8", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr8", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr8", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr8", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"]], "session": [["session", "commit"], ["set", "dr", "run_id", "dr", "dr1", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr1", "dr2", "dr3", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr1", "dr2", "dr3", "dr4", "dr5", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr1", "dr2", "dr3", "dr4", "dr5", "dr6", "dr7", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr1", "dr2", "dr3", "dr4", "dr5", "dr6", "dr7", "dr8", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr1", "dr2", "dr3", "dr4", "dr5", "dr6", "dr7", "dr8", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr4", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr4", "dr5", "dr6", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr4", "dr5", "dr6", "dr7", "dr8", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr4", "dr5", "dr6", "dr7", "dr8", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr8", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr8", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr8", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["session", "close"]], "test_dag": [["set", "dr", "run_id", "dr", "dr1", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr1", "dr2", "dr3", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr1", "dr2", "dr3", "dr4", "dr5", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr1", "dr2", "dr3", "dr4", "dr5", "dr6", "dr7", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr1", "dr2", "dr3", "dr4", "dr5", "dr6", "dr7", "dr8", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr1", "dr2", "dr3", "dr4", "dr5", "dr6", "dr7", "dr8", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr4", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr4", "dr5", "dr6", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr4", "dr5", "dr6", "dr7", "dr8", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr4", "dr5", "dr6", "dr7", "dr8", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr8", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr8", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"], ["set", "dr", "run_id", "dr", "dr8", "set", "ti", "run_id", "ti", "test_dag", "get_task_instances_before", "base_date", "REF_DATE", "num", "session", "session"]], "test_dag_id": [], "test_task_id": []}, "name": "test_get_task_instances_before", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_get_task_instances_before", "ret_exprs": [], "ret_type": "", "variables": {"BASE_DATE": "", "REF_DATE": "", "dr1": "", "dr2": "", "dr3": "", "dr4": "", "dr5": "", "dr6": "", "dr7": "", "dr8": "", "session": "", "test_dag": "", "test_dag_id": "", "test_task_id": ""}, "variables_p": {"BASE_DATE": [["datetime.datetime", 0.256441951578214], ["datetime.datetime.date", 0.20768935642140646], ["datetime.date", 0.16568053501679672], ["dateutil.relativedelta.relativedelta", 0.12170857468143259], ["Pattern[str]", 0.12140688099844696]], "REF_DATE": [["Type[int]", 0.34341984668743597], ["BoundMethod[Callable(datetime.datetime.now)[Any, Any], Type[datetime.datetime]]", 0.10707002312314053], ["list", 0.09828954671326037], ["Dict[str, str]", 0.07614929811910659], ["app.models.user.User", 0.07473483351331284]], "dr1": [["Anaconda3.Lib.site-packages.conda.models.match_spec.MatchSpec", 0.11528836750454556], ["str", 0.10198717910680533], ["int", 0.09693068982248763]], "dr2": [["str", 0.11457291010298323], ["Anaconda3.Lib.site-packages.conda.models.match_spec.MatchSpec", 0.10496390502414311], ["int", 0.08402787244075838]], "dr3": [["str", 0.11457291010298323], ["Anaconda3.Lib.site-packages.conda.models.match_spec.MatchSpec", 0.10496390502414311], ["int", 0.08402787244075838]], "dr4": [["Anaconda3.Lib.site-packages.conda.models.match_spec.MatchSpec", 0.1259108499817549], ["str", 0.0959984473679994]], "dr5": [["int", 0.31307041540076314], ["List[Tuple[int, int, int, int, int, int]]", 0.31036894699252493], ["bool", 0.09799272814833988]], "dr6": [["bool", 0.22451201123797818], ["int", 0.0896052024422878], ["List[Tuple[int, int, int, int, int, int]]", 0.08735141964232285]], "dr7": [["bool", 0.22451201123797818], ["int", 0.0896052024422878], ["List[Tuple[int, int, int, int, int, int]]", 0.08735141964232285]], "dr8": [["int", 0.2934180595402681], ["List[Tuple[int, int, int, int, int, int]]", 0.2917828144277394], ["bool", 0.10283703913670796]], "session": [["Dict[str, Union[Any, bool, str]]", 0.18938087361685577], ["dict", 0.1109225792792483], ["Dict[str, Optional[str]]", 0.09830319471382588], ["Dict[str, str]", 0.09585559711787076], ["Dict[str, Dict[str, Any]]", 0.09139138044563892], ["legistar.models.MatterStatus", 0.0889144554443922]], "test_dag": [["Dict[str, Any]", 0.20942337252460855], ["legistar.models.Body", 0.111600252640417], ["Dict[str, Tuple[int, int, int]]", 0.0991494191872125], ["Dict[str, Tuple[float, float]]", 0.0991494191872125], ["Dict[str, Tuple[int, int]]", 0.0991494191872125], ["Dict[str, int]", 0.0991494191872125], ["Dict[bool, Any]", 0.09584398105679647], ["set", 0.09580223888373811], ["Dict[str, str]", 0.09073247814558993]], "test_dag_id": [["str", 0.9999999998655771], ["dict", 1.3442296793178256e-10]], "test_task_id": [["str", 0.7960997175590496], ["int", 0.12338375855875997], ["Optional[str]", 0.08051652388219036]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[604, 8], [605, 34]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "jinja_udf", "params": {"name": ""}, "params_descr": {"name": ""}, "params_occur": {"name": []}, "params_p": {"args": [], "kwargs": [], "name": [["str", 0.6], ["Iterable[str]", 0.1], ["bool", 0.1]], "self": []}, "q_name": "TestDag.test_user_defined_filters_macros.<locals>.jinja_udf", "ret_exprs": ["return f\"Hello {name}\""], "ret_type": "", "ret_type_p": [["str", 1.0000000000000002]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[603, 4], [617, 48]], "fn_var_ln": {"dag": [[607, 8], [607, 11]], "jinja_env": [[613, 8], [613, 17]]}, "fn_var_occur": {"dag": [["dag", "models", "DAG", "start_date", "DEFAULT_DATE", "user_defined_filters", "jinja_udf", "user_defined_macros"], ["jinja_env", "dag", "get_template_env"]], "jinja_env": [["jinja_env", "dag", "get_template_env"], ["jinja_env", "filters"], ["jinja_env", "filters", "jinja_udf"], ["jinja_env", "globals"]]}, "name": "test_user_defined_filters_macros", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_user_defined_filters_macros", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "jinja_env": ""}, "variables_p": {"dag": [["grpy.core.models.Grouping", 0.2959338234264423], ["gardnr.models.Metric", 0.2132043185550203], ["buza.models.Subject", 0.18146835590326296], ["zerver.models.Realm", 0.10153148159833686]], "jinja_env": [["alerta.models.user.User", 0.16717146244947248], ["datetime.datetime", 0.08252464848752193]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[619, 4], [625, 60]], "fn_var_ln": {"dag": [[620, 8], [620, 11]], "jinja_env": [[621, 8], [621, 17]]}, "fn_var_occur": {"dag": [["dag", "DAG", "jinja_environment_kwargs", "True"], ["jinja_env", "dag", "get_template_env"]], "jinja_env": [["jinja_env", "dag", "get_template_env"], ["jinja_env", "keep_trailing_newline", "True"], ["jinja_env", "cache", "capacity"], ["jinja_env", "undefined", "jinja2", "StrictUndefined"]]}, "name": "test_set_jinja_env_additional_option", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_set_jinja_env_additional_option", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "jinja_env": ""}, "variables_p": {"dag": [["list", 0.11183997620088518], ["Dict[str, Any]", 0.10311142487003504], ["str", 0.10311142487003504], ["dict", 0.07155536717164337]], "jinja_env": [["Set[str]", 0.10776196273258368], ["list", 0.09909271909458328], ["Tuple[str]", 0.09792658999627589], ["str", 0.09421977651553451], ["Dict[str, Any]", 0.09233949314345369]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[627, 4], [630, 54]], "fn_var_ln": {"dag": [[628, 8], [628, 11]], "jinja_env": [[629, 8], [629, 17]]}, "fn_var_occur": {"dag": [["dag", "DAG", "template_undefined", "jinja2", "Undefined"], ["jinja_env", "dag", "get_template_env"]], "jinja_env": [["jinja_env", "dag", "get_template_env"], ["jinja_env", "undefined", "jinja2", "Undefined"]]}, "name": "test_template_undefined", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_template_undefined", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "jinja_env": ""}, "variables_p": {"dag": [["List[List[str]]", 0.18214511571614678]], "jinja_env": [["bool", 0.11599205914119207], ["list", 0.11107621618063616], ["List[Dict[str, str]]", 0.09629355638346981], ["List[str]", 0.09629355638346981], ["raiden.utils.Any", 0.09445059099559067], ["Set[str]", 0.09412103962820922], ["str", 0.09368797611269747]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[641, 4], [644, 50]], "fn_var_ln": {"dag": [[642, 8], [642, 11]], "jinja_env": [[643, 8], [643, 17]]}, "fn_var_occur": {"dag": [["dag", "DAG", "render_template_as_native_obj", "use_native_obj"], ["jinja_env", "dag", "get_template_env", "force_sandboxed", "force_sandboxed"]], "jinja_env": [["jinja_env", "dag", "get_template_env", "force_sandboxed", "force_sandboxed"], ["isinstance", "jinja_env", "expected_env"]]}, "name": "test_template_env", "params": {"expected_env": "", "force_sandboxed": "", "self": "", "use_native_obj": ""}, "params_descr": {"expected_env": "", "force_sandboxed": "", "self": "", "use_native_obj": ""}, "params_occur": {"expected_env": [["isinstance", "jinja_env", "expected_env"]], "force_sandboxed": [["jinja_env", "dag", "get_template_env", "force_sandboxed", "force_sandboxed"]], "self": [], "use_native_obj": [["dag", "DAG", "render_template_as_native_obj", "use_native_obj"]]}, "params_p": {"args": [], "expected_env": [["str", 0.282553096522424], ["bool", 0.17282359914696], ["Optional[str]", 0.10264852164348093], ["int", 0.09205985731919049], ["Optional[float]", 0.0870554080144235], ["bytes", 0.08491433791999954]], "force_sandboxed": [["raiden.utils.BlockTimeout", 0.21867025980230823], ["bool", 0.19148716347191258]], "kwargs": [], "self": [], "use_native_obj": [["str", 0.32306179651454536], ["Optional[str]", 0.20843213180774972], ["int", 0.11652699148403324], ["Optional[pathlib.Path]", 0.09023040714199419], ["Union[int, str]", 0.08724955768389249], ["bool", 0.08724955768389249]]}, "q_name": "TestDag.test_template_env", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "jinja_env": ""}, "variables_p": {"dag": [["str", 0.48414007578230417], ["Dict[str, str]", 0.22720646879597642]], "jinja_env": [["bool", 0.108434377917246], ["str", 0.10794814971865066], ["Set[str]", 0.10575073328765784], ["List[Dict[str, str]]", 0.10470550288218981], ["List[str]", 0.10470550288218981], ["dict", 0.09110317533326488]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[646, 4], [661, 44]], "fn_var_ln": {"task": [[654, 16], [654, 20]], "template_dir": [[650, 12], [650, 24]], "template_ext": [[658, 12], [658, 29]], "template_fields": [[657, 12], [657, 32]], "template_file": [[651, 12], [651, 25]], "test_field": [[656, 12], [656, 27]]}, "fn_var_occur": {"task": [["task", "EmptyOperator", "task_id"], ["task", "test_field", "template_file"], ["task", "template_fields"], ["task", "template_ext"], ["task", "resolve_template_files"], ["task", "test_field"]], "template_dir": [["template_dir", "os", "path", "dirname", "f", "name"], ["DAG", "start_date", "DEFAULT_DATE", "template_searchpath", "template_dir"]], "template_ext": [["task", "template_ext"]], "template_fields": [["task", "template_fields"]], "template_file": [["template_file", "os", "path", "basename", "f", "name"], ["task", "test_field", "template_file"]], "test_field": [["task", "test_field", "template_file"], ["task", "test_field"]]}, "name": "test_resolve_template_files_value", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_resolve_template_files_value", "ret_exprs": [], "ret_type": "", "variables": {"task": "", "template_dir": "", "template_ext": "", "template_fields": "", "template_file": "", "test_field": ""}, "variables_p": {"task": [["str", 0.3604587346473699], ["Dict[str, str]", 0.14783166548702298], ["List[str]", 0.10674243715978853], ["Dict[str, Any]", 0.09634471781792285], ["Dict[str, Union[Any, Any]]", 0.09380572652105779]], "template_dir": [["str", 0.8723853700232329], ["Optional[str]", 0.12761462997676723]], "template_ext": [["str", 0.9999999999999999]], "template_fields": [["str", 0.8116706508136636], ["bytes", 0.1883293491863365]], "template_file": [["str", 0.9999999999999999]], "test_field": [["str", 0.28982855722131007], ["List[Tuple[str, str, str, str]]", 0.2098355905284553], ["List[Tuple[str, str, str, str, Any]]", 0.2098355905284553], ["Dict[str, Union[Any, Any]]", 0.083367921786602], ["Dict[Tuple[Any, str], str]", 0.06985439143215272]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[663, 4], [678, 61]], "fn_var_ln": {"task": [[671, 16], [671, 20]], "template_dir": [[667, 12], [667, 24]], "template_ext": [[675, 12], [675, 29]], "template_fields": [[674, 12], [674, 32]], "template_file": [[668, 12], [668, 25]], "test_field": [[673, 12], [673, 27]]}, "fn_var_occur": {"task": [["task", "EmptyOperator", "task_id"], ["task", "test_field", "template_file"], ["task", "template_fields"], ["task", "template_ext"], ["task", "resolve_template_files"], ["task", "test_field"]], "template_dir": [["template_dir", "os", "path", "dirname", "f", "name"], ["DAG", "start_date", "DEFAULT_DATE", "template_searchpath", "template_dir"]], "template_ext": [["task", "template_ext"]], "template_fields": [["task", "template_fields"]], "template_file": [["template_file", "os", "path", "basename", "f", "name"], ["task", "test_field", "template_file"]], "test_field": [["task", "test_field", "template_file"], ["task", "test_field"]]}, "name": "test_resolve_template_files_list", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_resolve_template_files_list", "ret_exprs": [], "ret_type": "", "variables": {"task": "", "template_dir": "", "template_ext": "", "template_fields": "", "template_file": "", "test_field": ""}, "variables_p": {"task": [["str", 0.3604587346473699], ["Dict[str, str]", 0.14783166548702298], ["List[str]", 0.10674243715978853], ["Dict[str, Any]", 0.09634471781792285], ["Dict[str, Union[Any, Any]]", 0.09380572652105779]], "template_dir": [["str", 0.8723853700232329], ["Optional[str]", 0.12761462997676723]], "template_ext": [["str", 0.9999999999999999]], "template_fields": [["str", 0.8116706508136636], ["bytes", 0.1883293491863365]], "template_file": [["str", 0.9999999999999999]], "test_field": [["str", 0.28982855722131007], ["List[Tuple[str, str, str, str]]", 0.2098355905284553], ["List[Tuple[str, str, str, str, Any]]", 0.2098355905284553], ["Dict[str, Union[Any, Any]]", 0.083367921786602], ["Dict[Tuple[Any, str], str]", 0.06985439143215272]]}}, {"docstring": {"func": "Make sure DST transitions are properly observed", "long_descr": null, "ret": null}, "fn_lc": [[680, 4], [707, 26]], "fn_var_ln": {"_next": [[692, 8], [692, 13]], "dag": [[691, 8], [691, 11]], "local_tz": [[684, 8], [684, 16]], "next_local": [[693, 8], [693, 18]], "prev": [[703, 8], [703, 12]], "prev_local": [[704, 8], [704, 18]], "start": [[685, 8], [685, 13]], "utc": [[688, 8], [688, 11]]}, "fn_var_occur": {"_next": [["_next", "dag", "following_schedule", "utc"], ["next_local", "local_tz", "convert", "_next"], ["_next", "isoformat"], ["prev", "dag", "previous_schedule", "_next"]], "dag": [["dag", "DAG", "start_date", "start", "schedule"], ["_next", "dag", "following_schedule", "utc"], ["prev", "dag", "previous_schedule", "utc"], ["prev", "dag", "previous_schedule", "_next"]], "local_tz": [["local_tz", "pendulum", "timezone"], ["start", "local_tz", "convert", "datetime", "datetime", "dst_rule", "pendulum", "PRE_TRANSITION"], ["next_local", "local_tz", "convert", "_next"], ["prev_local", "local_tz", "convert", "prev"], ["prev_local", "local_tz", "convert", "prev"]], "next_local": [["next_local", "local_tz", "convert", "_next"], ["next_local", "isoformat"]], "prev": [["prev", "dag", "previous_schedule", "utc"], ["prev_local", "local_tz", "convert", "prev"], ["prev", "dag", "previous_schedule", "_next"], ["prev_local", "local_tz", "convert", "prev"], ["prev", "utc"]], "prev_local": [["prev_local", "local_tz", "convert", "prev"], ["prev_local", "isoformat"], ["prev_local", "local_tz", "convert", "prev"], ["prev_local", "isoformat"]], "start": [["start", "local_tz", "convert", "datetime", "datetime", "dst_rule", "pendulum", "PRE_TRANSITION"], ["start", "isoformat"], ["utc", "timezone", "convert_to_utc", "start"], ["dag", "DAG", "start_date", "start", "schedule"]], "utc": [["utc", "timezone", "convert_to_utc", "start"], ["utc", "isoformat"], ["_next", "dag", "following_schedule", "utc"], ["prev", "dag", "previous_schedule", "utc"], ["prev", "utc"]]}, "name": "test_following_previous_schedule", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_following_previous_schedule", "ret_exprs": [], "ret_type": "", "variables": {"_next": "", "dag": "", "local_tz": "", "next_local": "", "prev": "", "prev_local": "", "start": "", "utc": ""}, "variables_p": {"_next": [["int", 0.15631146107439772], ["str", 0.14728617629466628]], "dag": [["float", 0.2914087907598503], ["datetime.datetime.date", 0.11165987370673955], ["datetime.datetime.datetime", 0.09795042499620636], ["int", 0.09713626358661677], ["dict", 0.09183459695486686]], "local_tz": [["datetime.datetime", 0.6523282488174371], ["datetime.timezone", 0.2541892596177817], ["datetime.timedelta", 0.09348249156478103]], "next_local": [["str", 0.33155844285791614], ["List[str]", 0.1787457183148479], ["dict", 0.15547506025619406], ["Type[Dict[str, str]]", 0.15547506025619406], ["List[Tuple[str, str]]", 0.08937285915742395], ["List[Dict[str, Any]]", 0.08937285915742395]], "prev": [], "prev_local": [], "start": [["datetime.datetime", 0.8615451588218872], ["datetime.timedelta", 0.13845484117811271]], "utc": [["List[int]", 0.14151222952967293], ["Pattern[str]", 0.07811232441547761], ["list", 0.06541164544143908], ["int", 0.0653984738508003]]}}, {"docstring": {"func": "Make sure DST transitions are properly observed", "long_descr": null, "ret": null}, "fn_lc": [[709, 4], [736, 62]], "fn_var_ln": {"_next": [[726, 8], [726, 13]], "dag": [[718, 8], [718, 11]], "local_tz": [[713, 8], [713, 16]], "next_local": [[727, 8], [727, 18]], "prev": [[732, 8], [732, 12]], "prev_local": [[733, 8], [733, 18]], "start": [[714, 8], [714, 13]], "utc": [[716, 8], [716, 11]]}, "fn_var_occur": {"_next": [["_next", "dag", "following_schedule", "utc"], ["next_local", "local_tz", "convert", "_next"], ["_next", "isoformat"], ["prev", "dag", "previous_schedule", "_next"]], "dag": [["dag", "DAG", "start_date", "start", "schedule"], ["prev", "dag", "previous_schedule", "utc"], ["_next", "dag", "following_schedule", "utc"], ["prev", "dag", "previous_schedule", "_next"]], "local_tz": [["local_tz", "pendulum", "timezone"], ["start", "local_tz", "convert", "datetime", "datetime", "dst_rule", "pendulum", "PRE_TRANSITION"], ["prev_local", "local_tz", "convert", "prev"], ["next_local", "local_tz", "convert", "_next"], ["prev_local", "local_tz", "convert", "prev"]], "next_local": [["next_local", "local_tz", "convert", "_next"], ["next_local", "isoformat"]], "prev": [["prev", "dag", "previous_schedule", "utc"], ["prev_local", "local_tz", "convert", "prev"], ["prev", "isoformat"], ["prev", "dag", "previous_schedule", "_next"], ["prev_local", "local_tz", "convert", "prev"], ["prev", "isoformat"]], "prev_local": [["prev_local", "local_tz", "convert", "prev"], ["prev_local", "isoformat"], ["prev_local", "local_tz", "convert", "prev"], ["prev_local", "isoformat"]], "start": [["start", "local_tz", "convert", "datetime", "datetime", "dst_rule", "pendulum", "PRE_TRANSITION"], ["utc", "timezone", "convert_to_utc", "start"], ["dag", "DAG", "start_date", "start", "schedule"]], "utc": [["utc", "timezone", "convert_to_utc", "start"], ["prev", "dag", "previous_schedule", "utc"], ["_next", "dag", "following_schedule", "utc"]]}, "name": "test_following_previous_schedule_daily_dag_cest_to_cet", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_following_previous_schedule_daily_dag_cest_to_cet", "ret_exprs": [], "ret_type": "", "variables": {"_next": "", "dag": "", "local_tz": "", "next_local": "", "prev": "", "prev_local": "", "start": "", "utc": ""}, "variables_p": {"_next": [["int", 0.15631146107439772], ["str", 0.14728617629466628]], "dag": [["float", 0.2914087907598503], ["datetime.datetime.date", 0.11165987370673955], ["datetime.datetime.datetime", 0.09795042499620636], ["int", 0.09713626358661677], ["dict", 0.09183459695486686]], "local_tz": [["datetime.datetime", 0.6523282488174371], ["datetime.timezone", 0.2541892596177817], ["datetime.timedelta", 0.09348249156478103]], "next_local": [["str", 0.33155844285791614], ["List[str]", 0.1787457183148479], ["dict", 0.15547506025619406], ["Type[Dict[str, str]]", 0.15547506025619406], ["List[Tuple[str, str]]", 0.08937285915742395], ["List[Dict[str, Any]]", 0.08937285915742395]], "prev": [["int", 0.15631146107439772], ["str", 0.14728617629466628]], "prev_local": [], "start": [["datetime.datetime", 0.8324626058566282], ["datetime.datetime.timedelta", 0.08396239417777066], ["datetime.datetime.datetime", 0.08357499996560112]], "utc": [["List[int]", 0.14151222952967293], ["Pattern[str]", 0.07811232441547761], ["list", 0.06541164544143908], ["int", 0.0653984738508003]]}}, {"docstring": {"func": "Make sure DST transitions are properly observed", "long_descr": null, "ret": null}, "fn_lc": [[738, 4], [765, 62]], "fn_var_ln": {"_next": [[755, 8], [755, 13]], "dag": [[747, 8], [747, 11]], "local_tz": [[742, 8], [742, 16]], "next_local": [[756, 8], [756, 18]], "prev": [[761, 8], [761, 12]], "prev_local": [[762, 8], [762, 18]], "start": [[743, 8], [743, 13]], "utc": [[745, 8], [745, 11]]}, "fn_var_occur": {"_next": [["_next", "dag", "following_schedule", "utc"], ["next_local", "local_tz", "convert", "_next"], ["_next", "isoformat"], ["prev", "dag", "previous_schedule", "_next"]], "dag": [["dag", "DAG", "start_date", "start", "schedule"], ["prev", "dag", "previous_schedule", "utc"], ["_next", "dag", "following_schedule", "utc"], ["prev", "dag", "previous_schedule", "_next"]], "local_tz": [["local_tz", "pendulum", "timezone"], ["start", "local_tz", "convert", "datetime", "datetime", "dst_rule", "pendulum", "PRE_TRANSITION"], ["prev_local", "local_tz", "convert", "prev"], ["next_local", "local_tz", "convert", "_next"], ["prev_local", "local_tz", "convert", "prev"]], "next_local": [["next_local", "local_tz", "convert", "_next"], ["next_local", "isoformat"]], "prev": [["prev", "dag", "previous_schedule", "utc"], ["prev_local", "local_tz", "convert", "prev"], ["prev", "isoformat"], ["prev", "dag", "previous_schedule", "_next"], ["prev_local", "local_tz", "convert", "prev"], ["prev", "isoformat"]], "prev_local": [["prev_local", "local_tz", "convert", "prev"], ["prev_local", "isoformat"], ["prev_local", "local_tz", "convert", "prev"], ["prev_local", "isoformat"]], "start": [["start", "local_tz", "convert", "datetime", "datetime", "dst_rule", "pendulum", "PRE_TRANSITION"], ["utc", "timezone", "convert_to_utc", "start"], ["dag", "DAG", "start_date", "start", "schedule"]], "utc": [["utc", "timezone", "convert_to_utc", "start"], ["prev", "dag", "previous_schedule", "utc"], ["_next", "dag", "following_schedule", "utc"]]}, "name": "test_following_previous_schedule_daily_dag_cet_to_cest", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_following_previous_schedule_daily_dag_cet_to_cest", "ret_exprs": [], "ret_type": "", "variables": {"_next": "", "dag": "", "local_tz": "", "next_local": "", "prev": "", "prev_local": "", "start": "", "utc": ""}, "variables_p": {"_next": [["int", 0.15631146107439772], ["str", 0.14728617629466628]], "dag": [["float", 0.2914087907598503], ["datetime.datetime.date", 0.11165987370673955], ["datetime.datetime.datetime", 0.09795042499620636], ["int", 0.09713626358661677], ["dict", 0.09183459695486686]], "local_tz": [["datetime.datetime", 0.6523282488174371], ["datetime.timezone", 0.2541892596177817], ["datetime.timedelta", 0.09348249156478103]], "next_local": [["str", 0.33155844285791614], ["List[str]", 0.1787457183148479], ["dict", 0.15547506025619406], ["Type[Dict[str, str]]", 0.15547506025619406], ["List[Tuple[str, str]]", 0.08937285915742395], ["List[Dict[str, Any]]", 0.08937285915742395]], "prev": [["int", 0.15631146107439772], ["str", 0.14728617629466628]], "prev_local": [], "start": [["datetime.datetime", 0.8324626058566282], ["datetime.datetime.timedelta", 0.08396239417777066], ["datetime.datetime.datetime", 0.08357499996560112]], "utc": [["List[int]", 0.14151222952967293], ["Pattern[str]", 0.07811232441547761], ["list", 0.06541164544143908], ["int", 0.0653984738508003]]}}, {"docstring": {"func": "Tests following_schedule a dag with a relativedelta schedule", "long_descr": null, "ret": null}, "fn_lc": [[767, 4], [780, 63]], "fn_var_ln": {"_next": [[779, 8], [779, 13]], "dag": [[773, 8], [773, 11]], "dag_id": [[771, 8], [771, 14]], "delta": [[772, 8], [772, 13]]}, "fn_var_occur": {"_next": [["_next", "dag", "following_schedule", "TEST_DATE"], ["_next", "isoformat"], ["_next", "dag", "following_schedule", "_next"], ["_next", "isoformat"]], "dag": [["dag", "DAG", "dag_id", "dag_id", "schedule", "delta"], ["dag", "add_task", "BaseOperator", "task_id", "owner", "start_date", "TEST_DATE"], ["_next", "dag", "following_schedule", "TEST_DATE"], ["_next", "dag", "following_schedule", "_next"]], "dag_id": [["dag", "DAG", "dag_id", "dag_id", "schedule", "delta"]], "delta": [["delta", "relativedelta", "hours"], ["dag", "DAG", "dag_id", "dag_id", "schedule", "delta"]]}, "name": "test_following_schedule_relativedelta", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_following_schedule_relativedelta", "ret_exprs": [], "ret_type": "", "variables": {"_next": "", "dag": "", "dag_id": "", "delta": ""}, "variables_p": {"_next": [["datetime.timedelta", 0.18789101137328051], ["Type[List[Any]]", 0.11555217440940574], ["datetime.datetime", 0.10684128238872811], ["str", 0.10684128238872811], ["int", 0.09727659808648653]], "dag": [["dict", 0.19302447122423622], ["Dict[str, Callable]", 0.10632512093383055], ["golem.task.taskcomputer.TaskComputation", 0.09379174416570836], ["weakref.WeakKeyDictionary[Any, Any]", 0.08860201772208338]], "dag_id": [["int", 0.5784179031930052], ["list", 0.1848914798641481], ["Set[str]", 0.07872132975991047]], "delta": [["str", 0.5392165239094215], ["list", 0.16658365276750575]]}}, {"docstring": {"func": "Tests following_schedule a dag with a relativedelta schedule_interval", "long_descr": null, "ret": null}, "fn_lc": [[782, 4], [795, 63]], "fn_var_ln": {"_next": [[794, 8], [794, 13]], "dag": [[788, 8], [788, 11]], "dag_id": [[786, 8], [786, 14]], "delta": [[787, 8], [787, 13]]}, "fn_var_occur": {"_next": [["_next", "dag", "following_schedule", "TEST_DATE"], ["_next", "isoformat"], ["_next", "dag", "following_schedule", "_next"], ["_next", "isoformat"]], "dag": [["dag", "DAG", "dag_id", "dag_id", "schedule_interval", "delta"], ["dag", "add_task", "BaseOperator", "task_id", "owner", "start_date", "TEST_DATE"], ["_next", "dag", "following_schedule", "TEST_DATE"], ["_next", "dag", "following_schedule", "_next"]], "dag_id": [["dag", "DAG", "dag_id", "dag_id", "schedule_interval", "delta"]], "delta": [["delta", "relativedelta", "hours"], ["dag", "DAG", "dag_id", "dag_id", "schedule_interval", "delta"]]}, "name": "test_following_schedule_relativedelta_with_deprecated_schedule_interval", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_following_schedule_relativedelta_with_deprecated_schedule_interval", "ret_exprs": [], "ret_type": "", "variables": {"_next": "", "dag": "", "dag_id": "", "delta": ""}, "variables_p": {"_next": [["datetime.timedelta", 0.18789101137328051], ["Type[List[Any]]", 0.11555217440940574], ["datetime.datetime", 0.10684128238872811], ["str", 0.10684128238872811], ["int", 0.09727659808648653]], "dag": [["apps.rendering.task.renderingtaskstate.RenderingTaskDefinition", 0.09903454777921479], ["list", 0.09330408315135914], ["Dict[str, Callable]", 0.09020013188453797]], "dag_id": [["int", 0.5784179031930052], ["list", 0.1848914798641481], ["Set[str]", 0.07872132975991047]], "delta": [["str", 0.5392165239094215], ["list", 0.16658365276750575]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[808, 8], [809, 87]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "mydag", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_following_schedule_relativedelta_with_depr_schedule_interval_decorated_dag.<locals>.mydag", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Tests following_schedule a dag with a relativedelta schedule_interval", "long_descr": "using decorated dag", "ret": null}, "fn_lc": [[797, 4], [817, 63]], "fn_var_ln": {"_dag": [[811, 8], [811, 12]], "_next": [[816, 8], [816, 13]], "dag_id": [[804, 8], [804, 14]], "delta": [[805, 8], [805, 13]]}, "fn_var_occur": {"_dag": [["_dag", "mydag"], ["_next", "_dag", "following_schedule", "TEST_DATE"], ["_next", "_dag", "following_schedule", "_next"]], "_next": [["_next", "_dag", "following_schedule", "TEST_DATE"], ["_next", "isoformat"], ["_next", "_dag", "following_schedule", "_next"], ["_next", "isoformat"]], "dag_id": [], "delta": []}, "name": "test_following_schedule_relativedelta_with_depr_schedule_interval_decorated_dag", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_following_schedule_relativedelta_with_depr_schedule_interval_decorated_dag", "ret_exprs": [], "ret_type": "", "variables": {"_dag": "", "_next": "", "dag_id": "", "delta": ""}, "variables_p": {"_dag": [["datetime.timedelta", 0.16754044931141318], ["Dict[str, Dict[str, Any]]", 0.08414321350291751]], "_next": [["datetime.timedelta", 0.18789101137328051], ["Type[List[Any]]", 0.11555217440940574], ["datetime.datetime", 0.10684128238872811], ["str", 0.10684128238872811], ["int", 0.09727659808648653]], "dag_id": [["Optional[str]", 0.09999999999999999], ["int", 0.09999999999999999], ["List[int]", 0.09999999999999999], ["services.ticketing.transfer.models.TicketID", 0.09999999999999999], ["Type[models.User]", 0.09999999999999999], ["shop.transfer.models.ShopID", 0.09999999999999999], ["Type[pipeline.netfile.models.AbstractSchedule]", 0.09999999999999999], ["shortcuts.actions.base.GroupIDField", 0.09999999999999999]], "delta": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[819, 4], [825, 62]], "fn_var_ln": {"dag": [[823, 8], [823, 11]], "start": [[822, 8], [822, 13]], "when": [[824, 8], [824, 12]]}, "fn_var_occur": {"dag": [["dag", "DAG", "start_date", "start", "schedule"], ["when", "dag", "previous_schedule", "start"]], "start": [["start", "datetime", "datetime", "tzinfo", "datetime", "timezone", "utc"], ["dag", "DAG", "start_date", "start", "schedule"], ["when", "dag", "previous_schedule", "start"]], "when": [["when", "dag", "previous_schedule", "start"], ["when", "isoformat"]]}, "name": "test_previous_schedule_datetime_timezone", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_previous_schedule_datetime_timezone", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "start": "", "when": ""}, "variables_p": {"dag": [["str", 0.5149274435483461], ["datetime.datetime", 0.36796871024212996]], "start": [["datetime.datetime", 1.0000000000000002]], "when": [["List[int]", 0.16850718662847658], ["Pattern[str]", 0.09067597500645928], ["tuple", 0.08195669510612093], ["int", 0.07759173146247139], ["str", 0.07741628749565842]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[827, 4], [833, 62]], "fn_var_ln": {"dag": [[831, 8], [831, 11]], "start": [[830, 8], [830, 13]], "when": [[832, 8], [832, 12]]}, "fn_var_occur": {"dag": [["dag", "DAG", "start_date", "start", "schedule"], ["when", "dag", "following_schedule", "start"]], "start": [["start", "datetime", "datetime", "tzinfo", "datetime", "timezone", "utc"], ["dag", "DAG", "start_date", "start", "schedule"], ["when", "dag", "following_schedule", "start"]], "when": [["when", "dag", "following_schedule", "start"], ["when", "isoformat"]]}, "name": "test_following_schedule_datetime_timezone", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_following_schedule_datetime_timezone", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "start": "", "when": ""}, "variables_p": {"dag": [["str", 0.5149274435483461], ["datetime.datetime", 0.36796871024212996]], "start": [["datetime.datetime", 1.0000000000000002]], "when": [["List[int]", 0.16850718662847658], ["Pattern[str]", 0.09067597500645928], ["tuple", 0.08195669510612093], ["int", 0.07759173146247139], ["str", 0.07741628749565842]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[835, 4], [857, 62]], "fn_var_ln": {"_dst": [[842, 12], [842, 16]], "_name": [[843, 12], [843, 17]], "_offset": [[841, 12], [841, 19]], "dag": [[855, 8], [855, 11]], "start": [[854, 8], [854, 13]], "when": [[856, 8], [856, 12]]}, "fn_var_occur": {"_dst": [], "_name": [], "_offset": [], "dag": [["dag", "DAG", "start_date", "start", "schedule"], ["when", "dag", "following_schedule", "start"]], "start": [["start", "datetime", "datetime", "tzinfo", "UTC0530"], ["dag", "DAG", "start_date", "start", "schedule"], ["when", "dag", "following_schedule", "start"]], "when": [["when", "dag", "following_schedule", "start"], ["when", "isoformat"]]}, "name": "test_following_schedule_datetime_timezone_utc0530", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_following_schedule_datetime_timezone_utc0530", "ret_exprs": [], "ret_type": "", "variables": {"_dst": "", "_name": "", "_offset": "", "dag": "", "start": "", "when": ""}, "variables_p": {"_dst": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "_name": [["str", 0.8999999999999999]], "_offset": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "dag": [["str", 0.5149274435483461], ["datetime.datetime", 0.36796871024212996]], "start": [["datetime.datetime", 0.9598674506795992], ["datetime.datetime.datetime", 0.040132549320400564]], "when": [["List[int]", 0.16850718662847658], ["Pattern[str]", 0.09067597500645928], ["tuple", 0.08195669510612093], ["int", 0.07759173146247139], ["str", 0.07741628749565842]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[859, 4], [866, 13]], "fn_var_ln": {"dag": [[861, 8], [861, 11]]}, "fn_var_occur": {"dag": [["dag", "DAG", "start_date", "DEFAULT_DATE", "tags"], ["dag", "sync_to_db"]]}, "name": "test_dagtag_repr", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_dagtag_repr", "ret_exprs": [], "ret_type": "", "variables": {"dag": ""}, "variables_p": {"dag": [["datetime.datetime.datetime", 0.3784123075257778], ["Type[hypha.apply.projects.models.Report]", 0.2015286032419523], ["str", 0.1637438921651907], ["Union[None, datetime.date, datetime.datetime, str]", 0.08317705908650898]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[868, 4], [943, 41]], "fn_var_ln": {"dags": [[870, 8], [870, 12]], "tags": [[933, 12], [933, 20]]}, "fn_var_occur": {"dags": [["dags", "DAG", "i", "start_date", "DEFAULT_DATE", "tags", "i", "range"], ["DAG", "bulk_write_to_db", "dags"], ["DAG", "bulk_write_to_db", "dags"], ["DAG", "bulk_write_to_db", "dags"], ["DAG", "bulk_write_to_db", "dags"], ["DAG", "bulk_write_to_db", "dags"], ["DAG", "bulk_write_to_db", "dags"]], "tags": [["dags", "DAG", "i", "start_date", "DEFAULT_DATE", "tags", "i", "range"], ["dag", "tags", "append"], ["dag", "tags", "remove"], ["dag", "tags", "None"]]}, "name": "test_bulk_write_to_db", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_bulk_write_to_db", "ret_exprs": [], "ret_type": "", "variables": {"dags": "", "tags": ""}, "variables_p": {"dags": [["int", 0.3591315285847168], ["datetime.timedelta", 0.20851311975632403], ["float", 0.1773290439339329], ["list", 0.09447388260005854], ["datetime.datetime", 0.07689395395166723]], "tags": [["str", 0.1964852467297323], ["django.utils.six.moves.str", 0.11851372352603788], ["Set[str]", 0.10318483116248088], ["Callable(id)[[object], int]", 0.09894937192550989], ["list", 0.09562984818119326], ["tuple", 0.0955929791363332]]}}, {"docstring": {"func": "Test that DagModel.next_dagrun_create_after is set to NULL when the dag cannot be created due to max", "long_descr": "active runs being hit.", "ret": null}, "fn_lc": [[946, 4], [980, 53]], "fn_var_ln": {"dag": [[951, 8], [951, 11]], "dr": [[965, 8], [965, 10]], "max_active_runs": [[952, 8], [952, 27]], "model": [[979, 8], [979, 13]], "session": [[956, 8], [956, 15]]}, "fn_var_occur": {"dag": [["dag", "DAG", "dag_id", "start_date", "DEFAULT_DATE"], ["dag", "max_active_runs"], ["EmptyOperator", "task_id", "dag", "dag", "owner"], ["dag", "clear"], ["DAG", "bulk_write_to_db", "dag", "session", "session"], ["model", "session", "get", "DagModel", "dag", "dag_id"], ["dr", "dag", "create_dagrun", "state", "state", "execution_date", "model", "next_dagrun", "run_type", "DagRunType", "SCHEDULED", "session", "session"], ["DAG", "bulk_write_to_db", "dag"], ["model", "session", "get", "DagModel", "dag", "dag_id"], ["DAG", "bulk_write_to_db", "dag"], ["model", "session", "get", "DagModel", "dag", "dag_id"]], "dr": [["dr", "dag", "create_dagrun", "state", "state", "execution_date", "model", "next_dagrun", "run_type", "DagRunType", "SCHEDULED", "session", "session"], ["dr", "None"]], "max_active_runs": [["dag", "max_active_runs"]], "model": [["model", "session", "get", "DagModel", "dag", "dag_id"], ["model", "next_dagrun", "DEFAULT_DATE"], ["model", "next_dagrun_create_after", "DEFAULT_DATE", "timedelta", "days"], ["dr", "dag", "create_dagrun", "state", "state", "execution_date", "model", "next_dagrun", "run_type", "DagRunType", "SCHEDULED", "session", "session"], ["model", "session", "get", "DagModel", "dag", "dag_id"], ["model", "next_dagrun_create_after", "None"], ["model", "session", "get", "DagModel", "dag", "dag_id"], ["model", "next_dagrun_create_after", "None"]], "session": [["session", "settings", "Session"], ["DAG", "bulk_write_to_db", "dag", "session", "session"], ["model", "session", "get", "DagModel", "dag", "dag_id"], ["dr", "dag", "create_dagrun", "state", "state", "execution_date", "model", "next_dagrun", "run_type", "DagRunType", "SCHEDULED", "session", "session"], ["model", "session", "get", "DagModel", "dag", "dag_id"], ["model", "session", "get", "DagModel", "dag", "dag_id"]]}, "name": "test_bulk_write_to_db_max_active_runs", "params": {"self": "", "state": ""}, "params_descr": {"self": "", "state": ""}, "params_occur": {"self": [], "state": [["dr", "dag", "create_dagrun", "state", "state", "execution_date", "model", "next_dagrun", "run_type", "DagRunType", "SCHEDULED", "session", "session"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "state": [["Iterable[homeassistancore.State]", 0.5]]}, "q_name": "TestDag.test_bulk_write_to_db_max_active_runs", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "dr": "", "max_active_runs": "", "model": "", "session": ""}, "variables_p": {"dag": [["Type[backend.server.models.match.Match]", 0.1603020810193884], ["Type[Tuple[int, int]]", 0.14720464289948962], ["str", 0.10307058995324389], ["List[str]", 0.09736720734360861], ["Tuple[int, int]", 0.09477328969397374], ["datetime.datetime", 0.09184442348635095], ["Dict[str, str]", 0.08377112388219106]], "dr": [["str", 0.3832817853051892], ["List[str]", 0.23358406829482056], ["int", 0.2017724943756035], ["List[Tuple[str, Any]]", 0.09386494721497927], ["Dict[str, Any]", 0.08749670480940758]], "max_active_runs": [["int", 0.8995702550543281], ["Tuple[Any, Any, Literal]", 0.10042974494567171]], "model": [["deeplearning.ml4pl.models.classifier_base_tesMockModel", 0.17958119810133644], ["tensorflow.python.keras.models.Model", 0.12447851446268171], ["bench.models.Onlogn", 0.10650566092491402], ["tartare.core.models.Contributor", 0.0944015307258474], ["Optional[allennlp.models.model.Model]", 0.07046471546147189], ["Dict[str, str]", 0.06650863868437079]], "session": [["sqlalchemy.orm.session.Session", 0.3959100601021491], ["kedro.framework.session.session.KedroSession", 0.13588578835131293], ["Optional[str]", 0.07706727398056894]]}}, {"docstring": {"func": "Test that DagModel.has_import_error is set to false if no import errors.", "long_descr": null, "ret": null}, "fn_lc": [[982, 4], [1011, 23]], "fn_var_ln": {"dag": [[986, 8], [986, 11]], "has_import_errors": [[999, 8], [999, 31]], "model": [[1008, 8], [1008, 13]], "session": [[990, 8], [990, 15]]}, "fn_var_occur": {"dag": [["dag", "DAG", "dag_id", "start_date", "DEFAULT_DATE"], ["EmptyOperator", "task_id", "dag", "dag", "owner"], ["dag", "clear"], ["DAG", "bulk_write_to_db", "dag", "session", "session"], ["model", "session", "get", "DagModel", "dag", "dag_id"], ["model", "session", "get", "DagModel", "dag", "dag_id"], ["DAG", "bulk_write_to_db", "dag"], ["model", "session", "get", "DagModel", "dag", "dag_id"]], "has_import_errors": [["model", "has_import_errors"], ["model", "has_import_errors", "True"], ["model", "has_import_errors"], ["model", "has_import_errors"]], "model": [["model", "session", "get", "DagModel", "dag", "dag_id"], ["model", "has_import_errors"], ["model", "has_import_errors", "True"], ["session", "merge", "model"], ["model", "session", "get", "DagModel", "dag", "dag_id"], ["model", "has_import_errors"], ["model", "session", "get", "DagModel", "dag", "dag_id"], ["model", "has_import_errors"]], "session": [["session", "settings", "Session"], ["DAG", "bulk_write_to_db", "dag", "session", "session"], ["model", "session", "get", "DagModel", "dag", "dag_id"], ["session", "merge", "model"], ["session", "flush"], ["model", "session", "get", "DagModel", "dag", "dag_id"], ["model", "session", "get", "DagModel", "dag", "dag_id"], ["session", "close"]]}, "name": "test_bulk_write_to_db_has_import_error", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_bulk_write_to_db_has_import_error", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "has_import_errors": "", "model": "", "session": ""}, "variables_p": {"dag": [["int", 0.18587123232038272], ["str", 0.17431747293391525], ["list", 0.08725921532282867], ["Tuple[str, str, str]", 0.08230392617294027]], "has_import_errors": [["str", 0.5097507035948508], ["int", 0.18814101937282635], ["Optional[str]", 0.11035764541764918]], "model": [["str", 0.30493883048789006], ["dict", 0.17087032170636912], ["Dict[str, str]", 0.13903767115253815], ["fastapi.openapi.models.APIKey", 0.10400472365693682], ["list", 0.09361425377675205], ["serious.json.model.JsonModel[tests.test_case.Snack]", 0.08527430253132674]], "session": [["sqlalchemy.orm.session.Session", 0.2927246736922527], ["sqlalchemy.orm.scoped_session", 0.09878520197056093], ["sqlalchemy.orm.Session", 0.08327646126967862], ["Optional[str]", 0.07952140584603251], ["core.models.AnalyticsSession", 0.07539942929053832]]}}, {"docstring": {"func": "Ensure that datasets referenced in a dag are correctly loaded into the database.", "long_descr": null, "ret": null}, "fn_lc": [[1013, 4], [1076, 44]], "fn_var_ln": {"d1": [[1021, 8], [1021, 10]], "d1_orm": [[1065, 8], [1065, 14]], "d2": [[1022, 8], [1022, 10]], "d2_orm": [[1066, 8], [1066, 14]], "d3": [[1023, 8], [1023, 10]], "d3_orm": [[1035, 8], [1035, 14]], "dag1": [[1057, 8], [1057, 12]], "dag2": [[1059, 8], [1059, 12]], "dag_id1": [[1017, 8], [1017, 15]], "dag_id2": [[1018, 8], [1018, 15]], "session": [[1028, 8], [1028, 15]], "stored_datasets": [[1064, 8], [1064, 23]], "task_id": [[1019, 8], [1019, 15]], "uri1": [[1020, 8], [1020, 12]]}, "fn_var_occur": {"d1": [["d1", "Dataset", "uri1", "extra"], ["dag1", "DAG", "dag_id", "dag_id1", "start_date", "DEFAULT_DATE", "schedule", "d1"], ["d1_orm", "stored_datasets", "d1", "uri"], ["d1_orm", "stored_datasets", "d1", "uri"]], "d1_orm": [["d1_orm", "stored_datasets", "d1", "uri"], ["x", "dag_id", "x", "d1_orm", "consuming_dags", "dag_id1"], ["x", "task_id", "x", "dag_id", "x", "d1_orm", "producing_tasks", "task_id", "dag_id2"], ["set", "session", "query", "TaskOutletDatasetReference", "task_id", "TaskOutletDatasetReference", "dag_id", "TaskOutletDatasetReference", "dataset_id", "filter", "TaskOutletDatasetReference", "dag_id", "in_", "dag_id1", "dag_id2", "all", "task_id", "dag_id1", "d2_orm", "id", "task_id", "dag_id1", "d3_orm", "id", "task_id", "dag_id2", "d1_orm", "id"], ["d1_orm", "stored_datasets", "d1", "uri"], ["x", "dag_id", "x", "d1_orm", "consuming_dags"]], "d2": [["d2", "Dataset"], ["EmptyOperator", "task_id", "task_id", "dag", "dag1", "outlets", "d2", "d3"], ["d2_orm", "stored_datasets", "d2", "uri"], ["EmptyOperator", "task_id", "task_id", "dag", "dag1", "outlets", "d2"], ["d2_orm", "stored_datasets", "d2", "uri"]], "d2_orm": [["d2_orm", "stored_datasets", "d2", "uri"], ["set", "session", "query", "TaskOutletDatasetReference", "task_id", "TaskOutletDatasetReference", "dag_id", "TaskOutletDatasetReference", "dataset_id", "filter", "TaskOutletDatasetReference", "dag_id", "in_", "dag_id1", "dag_id2", "all", "task_id", "dag_id1", "d2_orm", "id", "task_id", "dag_id1", "d3_orm", "id", "task_id", "dag_id2", "d1_orm", "id"], ["d2_orm", "stored_datasets", "d2", "uri"], ["set", "session", "query", "TaskOutletDatasetReference", "task_id", "TaskOutletDatasetReference", "dag_id", "TaskOutletDatasetReference", "dataset_id", "filter", "TaskOutletDatasetReference", "dag_id", "in_", "dag_id1", "dag_id2", "all", "task_id", "dag_id1", "d2_orm", "id"]], "d3": [["d3", "Dataset"], ["EmptyOperator", "task_id", "task_id", "dag", "dag1", "outlets", "d2", "d3"], ["d3_orm", "stored_datasets", "d3", "uri"]], "d3_orm": [["d3_orm", "stored_datasets", "d3", "uri"], ["set", "session", "query", "TaskOutletDatasetReference", "task_id", "TaskOutletDatasetReference", "dag_id", "TaskOutletDatasetReference", "dataset_id", "filter", "TaskOutletDatasetReference", "dag_id", "in_", "dag_id1", "dag_id2", "all", "task_id", "dag_id1", "d2_orm", "id", "task_id", "dag_id1", "d3_orm", "id", "task_id", "dag_id2", "d1_orm", "id"]], "dag1": [["dag1", "DAG", "dag_id", "dag_id1", "start_date", "DEFAULT_DATE", "schedule", "d1"], ["EmptyOperator", "task_id", "task_id", "dag", "dag1", "outlets", "d2", "d3"], ["dag1", "clear"], ["DAG", "bulk_write_to_db", "dag1", "dag2", "session", "session"], ["dag1", "DAG", "dag_id", "dag_id1", "start_date", "DEFAULT_DATE", "schedule", "None"], ["EmptyOperator", "task_id", "task_id", "dag", "dag1", "outlets", "d2"], ["DAG", "bulk_write_to_db", "dag1", "dag2", "session", "session"]], "dag2": [["dag2", "DAG", "dag_id", "dag_id2", "start_date", "DEFAULT_DATE"], ["EmptyOperator", "task_id", "task_id", "dag", "dag2", "outlets", "Dataset", "uri1", "extra"], ["DAG", "bulk_write_to_db", "dag1", "dag2", "session", "session"], ["dag2", "DAG", "dag_id", "dag_id2", "start_date", "DEFAULT_DATE"], ["EmptyOperator", "task_id", "task_id", "dag", "dag2"], ["DAG", "bulk_write_to_db", "dag1", "dag2", "session", "session"]], "dag_id1": [["dag1", "DAG", "dag_id", "dag_id1", "start_date", "DEFAULT_DATE", "schedule", "d1"], ["x", "dag_id", "x", "d1_orm", "consuming_dags", "dag_id1"], ["set", "session", "query", "TaskOutletDatasetReference", "task_id", "TaskOutletDatasetReference", "dag_id", "TaskOutletDatasetReference", "dataset_id", "filter", "TaskOutletDatasetReference", "dag_id", "in_", "dag_id1", "dag_id2", "all", "task_id", "dag_id1", "d2_orm", "id", "task_id", "dag_id1", "d3_orm", "id", "task_id", "dag_id2", "d1_orm", "id"], ["dag1", "DAG", "dag_id", "dag_id1", "start_date", "DEFAULT_DATE", "schedule", "None"], ["set", "session", "query", "TaskOutletDatasetReference", "task_id", "TaskOutletDatasetReference", "dag_id", "TaskOutletDatasetReference", "dataset_id", "filter", "TaskOutletDatasetReference", "dag_id", "in_", "dag_id1", "dag_id2", "all", "task_id", "dag_id1", "d2_orm", "id"]], "dag_id2": [["dag2", "DAG", "dag_id", "dag_id2", "start_date", "DEFAULT_DATE"], ["x", "task_id", "x", "dag_id", "x", "d1_orm", "producing_tasks", "task_id", "dag_id2"], ["set", "session", "query", "TaskOutletDatasetReference", "task_id", "TaskOutletDatasetReference", "dag_id", "TaskOutletDatasetReference", "dataset_id", "filter", "TaskOutletDatasetReference", "dag_id", "in_", "dag_id1", "dag_id2", "all", "task_id", "dag_id1", "d2_orm", "id", "task_id", "dag_id1", "d3_orm", "id", "task_id", "dag_id2", "d1_orm", "id"], ["dag2", "DAG", "dag_id", "dag_id2", "start_date", "DEFAULT_DATE"], ["set", "session", "query", "TaskOutletDatasetReference", "task_id", "TaskOutletDatasetReference", "dag_id", "TaskOutletDatasetReference", "dataset_id", "filter", "TaskOutletDatasetReference", "dag_id", "in_", "dag_id1", "dag_id2", "all", "task_id", "dag_id1", "d2_orm", "id"]], "session": [["session", "settings", "Session"], ["DAG", "bulk_write_to_db", "dag1", "dag2", "session", "session"], ["session", "commit"], ["stored_datasets", "x", "uri", "x", "x", "session", "query", "DatasetModel", "all"], ["set", "session", "query", "TaskOutletDatasetReference", "task_id", "TaskOutletDatasetReference", "dag_id", "TaskOutletDatasetReference", "dataset_id", "filter", "TaskOutletDatasetReference", "dag_id", "in_", "dag_id1", "dag_id2", "all", "task_id", "dag_id1", "d2_orm", "id", "task_id", "dag_id1", "d3_orm", "id", "task_id", "dag_id2", "d1_orm", "id"], ["DAG", "bulk_write_to_db", "dag1", "dag2", "session", "session"], ["session", "commit"], ["session", "expunge_all"], ["stored_datasets", "x", "uri", "x", "x", "session", "query", "DatasetModel", "all"], ["set", "session", "query", "TaskOutletDatasetReference", "task_id", "TaskOutletDatasetReference", "dag_id", "TaskOutletDatasetReference", "dataset_id", "filter", "TaskOutletDatasetReference", "dag_id", "in_", "dag_id1", "dag_id2", "all", "task_id", "dag_id1", "d2_orm", "id"]], "stored_datasets": [["stored_datasets", "x", "uri", "x", "x", "session", "query", "DatasetModel", "all"], ["d1_orm", "stored_datasets", "d1", "uri"], ["d2_orm", "stored_datasets", "d2", "uri"], ["d3_orm", "stored_datasets", "d3", "uri"], ["stored_datasets", "uri1", "extra"], ["stored_datasets", "x", "uri", "x", "x", "session", "query", "DatasetModel", "all"], ["d1_orm", "stored_datasets", "d1", "uri"], ["d2_orm", "stored_datasets", "d2", "uri"]], "task_id": [["EmptyOperator", "task_id", "task_id", "dag", "dag1", "outlets", "d2", "d3"], ["EmptyOperator", "task_id", "task_id", "dag", "dag2", "outlets", "Dataset", "uri1", "extra"], ["x", "task_id", "x", "dag_id", "x", "d1_orm", "producing_tasks", "task_id", "dag_id2"], ["set", "session", "query", "TaskOutletDatasetReference", "task_id", "TaskOutletDatasetReference", "dag_id", "TaskOutletDatasetReference", "dataset_id", "filter", "TaskOutletDatasetReference", "dag_id", "in_", "dag_id1", "dag_id2", "all", "task_id", "dag_id1", "d2_orm", "id", "task_id", "dag_id1", "d3_orm", "id", "task_id", "dag_id2", "d1_orm", "id"], ["EmptyOperator", "task_id", "task_id", "dag", "dag1", "outlets", "d2"], ["EmptyOperator", "task_id", "task_id", "dag", "dag2"], ["set", "session", "query", "TaskOutletDatasetReference", "task_id", "TaskOutletDatasetReference", "dag_id", "TaskOutletDatasetReference", "dataset_id", "filter", "TaskOutletDatasetReference", "dag_id", "in_", "dag_id1", "dag_id2", "all", "task_id", "dag_id1", "d2_orm", "id"]], "uri1": [["d1", "Dataset", "uri1", "extra"], ["EmptyOperator", "task_id", "task_id", "dag", "dag2", "outlets", "Dataset", "uri1", "extra"], ["stored_datasets", "uri1", "extra"]]}, "name": "test_bulk_write_to_db_datasets", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_bulk_write_to_db_datasets", "ret_exprs": [], "ret_type": "", "variables": {"d1": "", "d1_orm": "", "d2": "", "d2_orm": "", "d3": "", "d3_orm": "", "dag1": "", "dag2": "", "dag_id1": "", "dag_id2": "", "session": "", "stored_datasets": "", "task_id": "", "uri1": ""}, "variables_p": {"d1": [["golem.task.taskstate.TaskState", 0.19505507573933828], ["raiden.utils.Any", 0.08955357192309117], ["int", 0.08727060059209375], ["float", 0.08466753386169767], ["magic.models.deck.Deck", 0.08291205631930268]], "d1_orm": [["int", 0.36059989123601727], ["float", 0.14982910673074132]], "d2": [["BoundMethod[Callable(tfchain.types.transactions.Base.InputSignatureHashFactory.signature_hash_new)[[Named(self, tfchain.types.transactions.Base.InputSignatureHashFactory), Variable(Any)], Any], tfchain.types.transactions.Base.InputSignatureHashFactory]", 0.14508535658021154], ["int", 0.07995849892967859]], "d2_orm": [["str", 0.4018419930229376], ["List[str]", 0.09926113589906696], ["Dict[str, Union[Any, Any, Any, Any]]", 0.08728413557798569]], "d3": [["int", 0.2582589616906885], ["BoundMethod[Callable(tfchain.types.transactions.Base.InputSignatureHashFactory.signature_hash_new)[[Named(self, tfchain.types.transactions.Base.InputSignatureHashFactory), Variable(Any)], Any], tfchain.types.transactions.Base.InputSignatureHashFactory]", 0.19003019204362442], ["datetime.datetime", 0.07696386671129761]], "d3_orm": [["str", 0.4018419930229376], ["List[str]", 0.09926113589906696], ["Dict[str, Union[Any, Any, Any, Any]]", 0.08728413557798569]], "dag1": [["List[int]", 0.2160420956946641], ["str", 0.19316155065733764], ["List[Tuple[Any, Any]]", 0.10790589756520542], ["list", 0.10468840788614105]], "dag2": [["List[int]", 0.2617631617464619], ["str", 0.18744948876706344], ["byceps.services.user.transfer.models.User", 0.10738558820386884], ["int", 0.09830006157256556], ["Optional[passzero.models.documents.EncryptedDocument]", 0.09463825520229666], ["List[str]", 0.08594355921722609], ["Union[Literal, int]", 0.08552988439200142]], "dag_id1": [["list", 0.32974127823766347], ["List[adam.situation.templates.phase1_templates.TemplateObjectVariable]", 0.20499473529378193], ["int", 0.1763153880593707]], "dag_id2": [["int", 0.2748768627833842], ["raiden.transfer.state.NettingChannelEndState", 0.22867108833662061], ["list", 0.14770369485395546], ["deque[Any]", 0.08832312610623584], ["raiden.utils.Balance", 0.08601103111502852]], "session": [["sqlalchemy.orm.session.Session", 0.06839637425802016]], "stored_datasets": [["dict", 0.19244516072801257], ["list", 0.12722709003349456], ["int", 0.09459782443445898]], "task_id": [["int", 0.22254641740830056], ["str", 0.19574059919103007], ["Pattern[Any]", 0.11575845478748525]], "uri1": [["int", 0.4079546189910839], ["str", 0.18929115327683915], ["float", 0.11053038276532727]]}}, {"docstring": {"func": "Datasets can lose their last reference and be orphaned, but then if a reference to them reappears, we", "long_descr": "need to un-orphan those datasets", "ret": null}, "fn_lc": [[1078, 4], [1125, 46]], "fn_var_ln": {"dag1": [[1116, 12], [1116, 16]], "dataset1": [[1086, 12], [1086, 20]], "dataset2": [[1087, 12], [1087, 20]], "dataset3": [[1089, 12], [1089, 20]], "dataset4": [[1090, 12], [1090, 20]], "non_orphaned_dataset_count": [[1122, 12], [1122, 38]], "non_orphaned_datasets": [[1100, 12], [1100, 33]], "orphaned_dataset_count": [[1124, 12], [1124, 34]], "orphaned_datasets": [[1107, 12], [1107, 29]]}, "fn_var_occur": {"dag1": [["dag1", "DAG", "dag_id", "start_date", "DEFAULT_DATE", "schedule", "dataset1"], ["BashOperator", "dag", "dag1", "task_id", "bash_command", "outlets", "dataset3"], ["DAG", "bulk_write_to_db", "dag1", "session", "session"], ["dag1", "DAG", "dag_id", "start_date", "DEFAULT_DATE", "schedule", "dataset1", "dataset2"], ["BashOperator", "dag", "dag1", "task_id", "bash_command", "outlets", "dataset3", "dataset4"], ["DAG", "bulk_write_to_db", "dag1", "session", "session"]], "dataset1": [["dataset1", "Dataset", "uri"], ["dag1", "DAG", "dag_id", "start_date", "DEFAULT_DATE", "schedule", "dataset1"], ["dag1", "DAG", "dag_id", "start_date", "DEFAULT_DATE", "schedule", "dataset1", "dataset2"]], "dataset2": [["dataset2", "Dataset", "uri"], ["session", "add", "DatasetModel", "uri", "dataset2", "uri", "is_orphaned", "True"], ["dag1", "DAG", "dag_id", "start_date", "DEFAULT_DATE", "schedule", "dataset1", "dataset2"]], "dataset3": [["dataset3", "Dataset", "uri"], ["BashOperator", "dag", "dag1", "task_id", "bash_command", "outlets", "dataset3"], ["BashOperator", "dag", "dag1", "task_id", "bash_command", "outlets", "dataset3", "dataset4"]], "dataset4": [["dataset4", "Dataset", "uri"], ["session", "add", "DatasetModel", "uri", "dataset4", "uri", "is_orphaned", "True"], ["BashOperator", "dag", "dag1", "task_id", "bash_command", "outlets", "dataset3", "dataset4"]], "non_orphaned_dataset_count": [["non_orphaned_dataset_count", "session", "query", "DatasetModel", "filter", "DatasetModel", "is_orphaned", "count"]], "non_orphaned_datasets": [["non_orphaned_datasets", "dataset", "uri", "dataset", "session", "query", "DatasetModel", "uri", "filter", "DatasetModel", "is_orphaned", "order_by", "DatasetModel", "uri"]], "orphaned_dataset_count": [["orphaned_dataset_count", "session", "query", "DatasetModel", "filter", "DatasetModel", "is_orphaned", "count"]], "orphaned_datasets": [["orphaned_datasets", "dataset", "uri", "dataset", "session", "query", "DatasetModel", "uri", "filter", "DatasetModel", "is_orphaned", "order_by", "DatasetModel", "uri"]]}, "name": "test_bulk_write_to_db_unorphan_datasets", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_bulk_write_to_db_unorphan_datasets", "ret_exprs": [], "ret_type": "", "variables": {"dag1": "", "dataset1": "", "dataset2": "", "dataset3": "", "dataset4": "", "non_orphaned_dataset_count": "", "non_orphaned_datasets": "", "orphaned_dataset_count": "", "orphaned_datasets": ""}, "variables_p": {"dag1": [["str", 0.31745909579889514], ["Tuple[int, int]", 0.22272735770960375], ["datetime.datetime", 0.15902667775096607], ["Dict[str, str]", 0.12918823464059243], ["datetime.date", 0.08632421798387013], ["dict", 0.08527441611607248]], "dataset1": [["str", 0.4778563506970118], ["datetime.datetime.datetime", 0.189535790534607], ["dict", 0.12940850191102568], ["datetime.datetime", 0.10565644620875725]], "dataset2": [["dict", 0.19650713993385954], ["str", 0.1385169225960484], ["golem.rpc.session.Publisher", 0.11624638771052381], ["Dict[None, None]", 0.08902860097583445], ["List[Union[Any, Any, Any, Any]]", 0.08685329427009465], ["list", 0.08244542386314299], ["float", 0.08217012828765333]], "dataset3": [["str", 0.08995301202295589]], "dataset4": [["str", 0.2710888574552927], ["list", 0.07803332389810436]], "non_orphaned_dataset_count": [["alerta.models.user.User", 0.19749385654054918], ["Optional[grpy.core.models.User]", 0.18282819275381454], ["str", 0.13719560497662983], ["set", 0.10231306424848383], ["Dict[int, str]", 0.09956428897417587], ["cmk.base.check_utils.CheckTable", 0.09009719629598742], ["List[Dict[str, Any]]", 0.08440911450126481]], "non_orphaned_datasets": [["legistar.models.RollCall", 0.4170025104507237], ["List[raiden.transfer.state.RouteState]", 0.08530820194079022], ["str", 0.0840808642879705], ["List[Optional[str]]", 0.07671396714425038]], "orphaned_dataset_count": [["Optional[str]", 0.3278151913309683], ["Dict[str, Any]", 0.11991302630614797], ["raiden.utils.List[raiden.utils.Address]", 0.1034182110152954], ["list", 0.09480567632483236], ["Dict[int, str]", 0.08596652015330933], ["Dict[str, Union[Any, Any]]", 0.07628538014121727]], "orphaned_datasets": [["Dict[None, None]", 0.12860836145619028], ["str", 0.08254047546541891], ["Dict[str, Any]", 0.08059316533985851]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1127, 4], [1156, 23]], "fn_var_ln": {"dag": [[1128, 8], [1128, 11]], "orm_dag": [[1144, 8], [1144, 15]], "orm_subdag": [[1151, 8], [1151, 18]], "parent_dag": [[1139, 12], [1139, 29]], "session": [[1141, 8], [1141, 15]], "subdag": [[1134, 12], [1134, 18]]}, "fn_var_occur": {"dag": [["dag", "DAG", "start_date", "DEFAULT_DATE"], ["subdag", "parent_dag", "dag"], ["dag", "sync_to_db", "session", "session"]], "orm_dag": [["orm_dag", "session", "query", "DagModel", "filter", "DagModel", "dag_id", "one"], ["set", "orm_dag", "owners", "split"], ["orm_dag", "is_active"], ["orm_dag", "default_view", "None"], ["orm_dag", "default_view", "conf", "get", "lower"], ["orm_dag", "safe_dag_id"], ["orm_subdag", "fileloc", "orm_dag", "fileloc"]], "orm_subdag": [["orm_subdag", "session", "query", "DagModel", "filter", "DagModel", "dag_id", "one"], ["set", "orm_subdag", "owners", "split"], ["orm_subdag", "is_active"], ["orm_subdag", "safe_dag_id"], ["orm_subdag", "fileloc", "orm_dag", "fileloc"]], "parent_dag": [["subdag", "parent_dag", "dag"]], "session": [["session", "settings", "Session"], ["dag", "sync_to_db", "session", "session"], ["orm_dag", "session", "query", "DagModel", "filter", "DagModel", "dag_id", "one"], ["orm_subdag", "session", "query", "DagModel", "filter", "DagModel", "dag_id", "one"], ["session", "close"]], "subdag": [["subdag", "DAG", "start_date", "DEFAULT_DATE"], ["subdag", "parent_dag", "dag"], ["SubDagOperator", "task_id", "owner", "subdag", "subdag"]]}, "name": "test_sync_to_db", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_sync_to_db", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "orm_dag": "", "orm_subdag": "", "parent_dag": "", "session": "", "subdag": ""}, "variables_p": {"dag": [["str", 0.4164518434025576], ["datetime.datetime", 0.2246891482314467], ["dict", 0.15445242555141947], ["Dict[str, Any]", 0.08869720772978552]], "orm_dag": [["list", 0.3305744886359497], ["str", 0.15317153395483396], ["abilian.core.models.subjects.User", 0.11748547588896108], ["golem.task.taskproviderstats.ProviderStats", 0.0917318248902371], ["dict", 0.0776026478812082]], "orm_subdag": [["list", 0.3305744886359497], ["str", 0.15317153395483396], ["abilian.core.models.subjects.User", 0.11748547588896108], ["golem.task.taskproviderstats.ProviderStats", 0.0917318248902371], ["dict", 0.0776026478812082]], "parent_dag": [["io.TextIOWrapper", 0.9999999998140968], ["bool", 2.967193962743239e-11], ["str", 2.109323892093714e-11], ["List[str]", 2.109323892093714e-11], ["Set[str]", 2.109323892093714e-11], ["list", 2.109323892093714e-11], ["Tuple[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any]", 2.109323892093714e-11]], "session": [["Optional[str]", 0.2661038758363574], ["dict", 0.15514756804262536], ["sqlalchemy.orm.session.Session", 0.0834092960014485]], "subdag": [["str", 0.2867323834522865], ["Type[Tuple[int, int]]", 0.11737752224640256], ["Tuple[int, int]", 0.10257726970180657], ["datetime.date", 0.0948280086918309], ["List[str]", 0.08731661108214832], ["datetime.datetime.date", 0.08666161270800243]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1158, 4], [1180, 23]], "fn_var_ln": {"dag": [[1159, 8], [1159, 11]], "orm_dag": [[1177, 8], [1177, 15]], "session": [[1174, 8], [1174, 15]]}, "fn_var_occur": {"dag": [["dag", "DAG", "start_date", "DEFAULT_DATE", "default_view"], ["dag", "sync_to_db", "session", "session"]], "orm_dag": [["orm_dag", "session", "query", "DagModel", "filter", "DagModel", "dag_id", "one"], ["orm_dag", "default_view", "None"], ["orm_dag", "default_view"]], "session": [["session", "settings", "Session"], ["dag", "sync_to_db", "session", "session"], ["orm_dag", "session", "query", "DagModel", "filter", "DagModel", "dag_id", "one"], ["session", "close"]]}, "name": "test_sync_to_db_default_view", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_sync_to_db_default_view", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "orm_dag": "", "session": ""}, "variables_p": {"dag": [["byceps.services.user.transfer.models.User", 0.11404204849057982], ["Dict[str, Any]", 0.11078460553665756], ["byceps.services.party.transfer.models.Party", 0.10092185596160495], ["Sequence[byceps.services.ticketing.models.tickeTicket]", 0.09661734633324584], ["byceps.services.user.models.detail.UserDetail", 0.09527728411729819], ["Optional[hpaction.models.HPActionDocuments]", 0.09377316592327885]], "orm_dag": [["list", 0.2400778633821407], ["dict", 0.21905030786291851], ["grpy.core.models.Grouping", 0.15589244758243181], ["List[Tuple[Any, Any]]", 0.08047242964687078], ["abilian.core.models.subjects.User", 0.0789868331271177]], "session": [["sqlalchemy.orm.session.Session", 0.10506740593202002], ["Optional[str]", 0.1019650137125506]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1183, 4], [1253, 29]], "fn_var_ln": {"dag": [[1195, 8], [1195, 11]], "dag_id": [[1194, 8], [1194, 14]], "parent_dag": [[1204, 8], [1204, 25]], "paused_dags": [[1242, 8], [1242, 19]], "subdag": [[1185, 8], [1185, 14]], "subdag_id": [[1184, 8], [1184, 17]], "unpaused_dags": [[1212, 8], [1212, 21]]}, "fn_var_occur": {"dag": [["dag", "DAG", "dag_id", "start_date", "DEFAULT_DATE"], ["subdag", "parent_dag", "dag"], ["dag", "sync_to_db", "session", "session"], ["DagModel", "get_dagmodel", "dag", "dag_id", "set_is_paused", "is_paused", "True", "including_subdags", "False"], ["DagModel", "get_dagmodel", "dag", "dag_id", "set_is_paused", "is_paused", "True"]], "dag_id": [["dag", "DAG", "dag_id", "start_date", "DEFAULT_DATE"], ["session", "query", "DagModel", "filter", "DagModel", "dag_id", "in_", "subdag_id", "dag_id", "delete", "synchronize_session", "False"], ["unpaused_dags", "session", "query", "DagModel", "dag_id", "DagModel", "is_paused", "filter", "DagModel", "dag_id", "in_", "subdag_id", "dag_id", "all"], ["dag_id", "False", "subdag_id", "False", "set", "unpaused_dags"], ["DagModel", "get_dagmodel", "dag", "dag_id", "set_is_paused", "is_paused", "True", "including_subdags", "False"], ["paused_dags", "session", "query", "DagModel", "dag_id", "DagModel", "is_paused", "filter", "DagModel", "dag_id", "in_", "subdag_id", "dag_id", "all"], ["dag_id", "True", "subdag_id", "False", "set", "paused_dags"], ["DagModel", "get_dagmodel", "dag", "dag_id", "set_is_paused", "is_paused", "True"], ["paused_dags", "session", "query", "DagModel", "dag_id", "DagModel", "is_paused", "filter", "DagModel", "dag_id", "in_", "subdag_id", "dag_id", "all"], ["dag_id", "True", "subdag_id", "True", "set", "paused_dags"]], "parent_dag": [["subdag", "parent_dag", "dag"]], "paused_dags": [["paused_dags", "session", "query", "DagModel", "dag_id", "DagModel", "is_paused", "filter", "DagModel", "dag_id", "in_", "subdag_id", "dag_id", "all"], ["dag_id", "True", "subdag_id", "False", "set", "paused_dags"], ["paused_dags", "session", "query", "DagModel", "dag_id", "DagModel", "is_paused", "filter", "DagModel", "dag_id", "in_", "subdag_id", "dag_id", "all"], ["dag_id", "True", "subdag_id", "True", "set", "paused_dags"]], "subdag": [["subdag", "DAG", "subdag_id", "start_date", "DEFAULT_DATE"], ["SubDagOperator", "task_id", "subdag", "subdag"], ["subdag", "parent_dag", "dag"]], "subdag_id": [["subdag", "DAG", "subdag_id", "start_date", "DEFAULT_DATE"], ["session", "query", "DagModel", "filter", "DagModel", "dag_id", "in_", "subdag_id", "dag_id", "delete", "synchronize_session", "False"], ["unpaused_dags", "session", "query", "DagModel", "dag_id", "DagModel", "is_paused", "filter", "DagModel", "dag_id", "in_", "subdag_id", "dag_id", "all"], ["dag_id", "False", "subdag_id", "False", "set", "unpaused_dags"], ["paused_dags", "session", "query", "DagModel", "dag_id", "DagModel", "is_paused", "filter", "DagModel", "dag_id", "in_", "subdag_id", "dag_id", "all"], ["dag_id", "True", "subdag_id", "False", "set", "paused_dags"], ["paused_dags", "session", "query", "DagModel", "dag_id", "DagModel", "is_paused", "filter", "DagModel", "dag_id", "in_", "subdag_id", "dag_id", "all"], ["dag_id", "True", "subdag_id", "True", "set", "paused_dags"]], "unpaused_dags": [["unpaused_dags", "session", "query", "DagModel", "dag_id", "DagModel", "is_paused", "filter", "DagModel", "dag_id", "in_", "subdag_id", "dag_id", "all"], ["dag_id", "False", "subdag_id", "False", "set", "unpaused_dags"]]}, "name": "test_is_paused_subdag", "params": {"self": "", "session": ""}, "params_descr": {"self": "", "session": ""}, "params_occur": {"self": [], "session": [["session", "query", "DagModel", "filter", "DagModel", "dag_id", "in_", "subdag_id", "dag_id", "delete", "synchronize_session", "False"], ["dag", "sync_to_db", "session", "session"], ["unpaused_dags", "session", "query", "DagModel", "dag_id", "DagModel", "is_paused", "filter", "DagModel", "dag_id", "in_", "subdag_id", "dag_id", "all"], ["paused_dags", "session", "query", "DagModel", "dag_id", "DagModel", "is_paused", "filter", "DagModel", "dag_id", "in_", "subdag_id", "dag_id", "all"], ["paused_dags", "session", "query", "DagModel", "dag_id", "DagModel", "is_paused", "filter", "DagModel", "dag_id", "in_", "subdag_id", "dag_id", "all"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "session": [["Dict[str, Any]", 0.2510279614655392], ["tracim.models.User", 0.1977472525407895], ["str", 0.19750826396313914], ["zerver.models.UserProfile", 0.18057996730869674], ["int", 0.08763849144975533], ["sqlalchemy.orm.session.Session", 0.08549806327208026]]}, "q_name": "TestDag.test_is_paused_subdag", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "dag_id": "", "parent_dag": "", "paused_dags": "", "subdag": "", "subdag_id": "", "unpaused_dags": ""}, "variables_p": {"dag": [["Dict[str, Any]", 0.3230158895081596], ["grpy.core.models.Grouping", 0.2476926896978395], ["datetime.datetime", 0.1280642240567913], ["str", 0.10510555557444672], ["float", 0.0733637406112139]], "dag_id": [["str", 0.5885503222548096], ["int", 0.2239590743971238], ["Optional[str]", 0.0918700453057198]], "parent_dag": [["io.TextIOWrapper", 0.9999999998140968], ["bool", 2.967193962743239e-11], ["str", 2.109323892093714e-11], ["List[str]", 2.109323892093714e-11], ["Set[str]", 2.109323892093714e-11], ["list", 2.109323892093714e-11], ["Tuple[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any]", 2.109323892093714e-11]], "paused_dags": [["str", 0.29079701459896534], ["backend.api.models.group.Group", 0.11144048019472695], ["List[int]", 0.10491991887103833], ["List[str]", 0.086042022703398], ["Union[Literal, int]", 0.08249934317388019]], "subdag": [["str", 0.40385406448167405], ["int", 0.393664849990121], ["Dict[int, str]", 0.09021547994205516]], "subdag_id": [["str", 0.5885503222548096], ["int", 0.2239590743971238], ["Optional[str]", 0.0918700453057198]], "unpaused_dags": [["str", 0.29079701459896534], ["backend.api.models.group.Group", 0.11144048019472695], ["List[int]", 0.10491991887103833], ["List[str]", 0.086042022703398], ["Union[Literal, int]", 0.08249934317388019]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1255, 4], [1263, 38]], "fn_var_ln": {"dag": [[1260, 8], [1260, 11]]}, "fn_var_occur": {"dag": [["dag", "DAG"], ["dag", "sync_to_db"], ["dag", "get_is_paused"], ["dag", "DAG", "is_paused_upon_creation", "True"], ["dag", "sync_to_db"], ["dag", "get_is_paused"]]}, "name": "test_existing_dag_is_paused_upon_creation", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_existing_dag_is_paused_upon_creation", "ret_exprs": [], "ret_type": "", "variables": {"dag": ""}, "variables_p": {"dag": []}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1265, 4], [1273, 23]], "fn_var_ln": {"dag": [[1266, 8], [1266, 11]], "orm_dag": [[1270, 8], [1270, 15]], "session": [[1267, 8], [1267, 15]]}, "fn_var_occur": {"dag": [["dag", "DAG", "is_paused_upon_creation", "True"], ["dag", "sync_to_db", "session", "session"]], "orm_dag": [["orm_dag", "session", "query", "DagModel", "filter", "DagModel", "dag_id", "one"], ["orm_dag", "is_paused"]], "session": [["session", "settings", "Session"], ["dag", "sync_to_db", "session", "session"], ["orm_dag", "session", "query", "DagModel", "filter", "DagModel", "dag_id", "one"], ["session", "close"]]}, "name": "test_new_dag_is_paused_upon_creation", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_new_dag_is_paused_upon_creation", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "orm_dag": "", "session": ""}, "variables_p": {"dag": [["dict", 0.3037481854501684], ["str", 0.29467930891353156], ["chalice.deploy.models.RestAPI", 0.1002782062786979], ["Dict[str, Dict[str, Any]]", 0.09821148243210785], ["Union[Dict[str, Any], str]", 0.0930118533223414]], "orm_dag": [["str", 0.410000634749735], ["grpy.core.models.Grouping", 0.19352489754402824], ["List[int]", 0.10119674740707313], ["geode.models.common.Address", 0.08616694196037927]], "session": [["sqlalchemy.orm.session.Session", 0.10506740593202002], ["Optional[str]", 0.1019650137125506]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1275, 4], [1281, 94]], "fn_var_ln": {"orm_dag": [[1279, 12], [1279, 19]]}, "fn_var_occur": {"orm_dag": [["orm_dag", "session", "query", "DagModel", "filter", "DagModel", "dag_id", "one"], ["orm_dag", "default_view", "None"], ["orm_dag", "get_default_view", "conf", "get", "lower"]]}, "name": "test_existing_dag_default_view", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_existing_dag_default_view", "ret_exprs": [], "ret_type": "", "variables": {"orm_dag": ""}, "variables_p": {"orm_dag": [["list", 0.26715369848944753], ["dict", 0.24947813612091324], ["Optional[\"Lecture\"]", 0.07928368109427943], ["Dict[str, str]", 0.07855419492084453], ["abilian.core.models.subjects.User", 0.07185428773330377], ["geode.models.common.Address", 0.061507806344561364]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1283, 4], [1306, 23]], "fn_var_ln": {"dag": [[1286, 8], [1286, 11]], "dag_fileloc": [[1285, 8], [1285, 19]], "dag_id": [[1284, 8], [1284, 14]], "fileloc": [[1290, 8], [1290, 19]], "orm_dag": [[1302, 8], [1302, 15]], "session": [[1291, 8], [1291, 15]]}, "fn_var_occur": {"dag": [["dag", "DAG", "dag_id", "is_paused_upon_creation", "True"], ["dag", "fileloc", "dag_fileloc"], ["dag", "sync_to_db", "session", "session"]], "dag_fileloc": [["dag", "fileloc", "dag_fileloc"], ["orm_dag", "fileloc", "dag_fileloc"]], "dag_id": [["dag", "DAG", "dag_id", "is_paused_upon_creation", "True"], ["orm_dag", "session", "query", "DagModel", "filter", "DagModel", "dag_id", "dag_id", "one"], ["orm_dag", "session", "query", "DagModel", "filter", "DagModel", "dag_id", "dag_id", "one"], ["session", "execute", "DagModel", "__table__", "delete", "where", "DagModel", "dag_id", "dag_id"]], "fileloc": [["dag", "fileloc", "dag_fileloc"], ["orm_dag", "fileloc", "dag_fileloc"]], "orm_dag": [["orm_dag", "session", "query", "DagModel", "filter", "DagModel", "dag_id", "dag_id", "one"], ["orm_dag", "is_active"], ["orm_dag", "fileloc", "dag_fileloc"], ["orm_dag", "session", "query", "DagModel", "filter", "DagModel", "dag_id", "dag_id", "one"], ["orm_dag", "is_active"]], "session": [["session", "settings", "Session"], ["dag", "sync_to_db", "session", "session"], ["orm_dag", "session", "query", "DagModel", "filter", "DagModel", "dag_id", "dag_id", "one"], ["orm_dag", "session", "query", "DagModel", "filter", "DagModel", "dag_id", "dag_id", "one"], ["session", "execute", "DagModel", "__table__", "delete", "where", "DagModel", "dag_id", "dag_id"], ["session", "close"]]}, "name": "test_dag_is_deactivated_upon_dagfile_deletion", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_dag_is_deactivated_upon_dagfile_deletion", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "dag_fileloc": "", "dag_id": "", "fileloc": "", "orm_dag": "", "session": ""}, "variables_p": {"dag": [["str", 0.468453399748126], ["Dict[str, Any]", 0.08921604328013341], ["List[str]", 0.07941156312745867]], "dag_fileloc": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["str", 0.1], ["datetime.timedelta", 0.1]], "dag_id": [["int", 0.3237742995984425], ["str", 0.20445999329231265]], "fileloc": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["str", 0.1], ["datetime.timedelta", 0.1]], "orm_dag": [["int", 0.47469361008292105], ["Tuple[str, str, str, str, str, str, str, str, str, str]", 0.07435491476219605]], "session": [["dict", 0.11364891605135015], ["sqlalchemy.orm.session.Session", 0.088751162602633], ["Optional[str]", 0.08701133364809915]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1308, 4], [1316, 49]], "fn_var_ln": {"dag": [[1315, 8], [1315, 11]], "default_args": [[1310, 8], [1310, 20]], "local_tz": [[1309, 8], [1309, 16]]}, "fn_var_occur": {"dag": [["dag", "DAG", "default_args", "default_args"], ["dag", "timezone", "name", "local_tz", "name"], ["dag", "DAG", "default_args", "default_args"], ["dag", "timezone", "name", "local_tz", "name"]], "default_args": [["default_args", "datetime", "datetime", "tzinfo", "local_tz"], ["dag", "DAG", "default_args", "default_args"], ["dag", "DAG", "default_args", "default_args"]], "local_tz": [["local_tz", "pendulum", "timezone"], ["default_args", "datetime", "datetime", "tzinfo", "local_tz"], ["dag", "timezone", "name", "local_tz", "name"], ["dag", "timezone", "name", "local_tz", "name"]]}, "name": "test_dag_naive_default_args_start_date_with_timezone", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_dag_naive_default_args_start_date_with_timezone", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "default_args": "", "local_tz": ""}, "variables_p": {"dag": [["bool", 0.09547082203854339], ["cmk.utils.type_defs.HostName", 0.0945965897369632]], "default_args": [["datetime.timedelta", 0.6137928772502635], ["datetime.datetime.datetime", 0.18631340402924904], ["datetime.datetime", 0.10417578901330593], ["datetime.datetime.timedelta", 0.09571792970718143]], "local_tz": [["datetime.datetime", 0.6370397433541959], ["datetime.timezone", 0.22651013228032352], ["datetime.datetime.timezone", 0.1364501243654806]]}}, {"docstring": {"func": "Verify if dag.roots returns the root tasks of a DAG.", "long_descr": null, "ret": null}, "fn_lc": [[1318, 4], [1328, 47]], "fn_var_ln": {"op1": [[1321, 12], [1321, 15]], "op2": [[1322, 12], [1322, 15]], "op3": [[1323, 12], [1323, 15]], "op4": [[1324, 12], [1324, 15]], "op5": [[1325, 12], [1325, 15]]}, "fn_var_occur": {"op1": [["op1", "EmptyOperator", "task_id"], ["op1", "op2", "op3", "op4", "op5"], ["set", "dag", "roots", "op1", "op2"]], "op2": [["op2", "EmptyOperator", "task_id"], ["op1", "op2", "op3", "op4", "op5"], ["set", "dag", "roots", "op1", "op2"]], "op3": [["op3", "EmptyOperator", "task_id"], ["op1", "op2", "op3", "op4", "op5"]], "op4": [["op4", "EmptyOperator", "task_id"], ["op1", "op2", "op3", "op4", "op5"]], "op5": [["op5", "EmptyOperator", "task_id"], ["op1", "op2", "op3", "op4", "op5"]]}, "name": "test_roots", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_roots", "ret_exprs": [], "ret_type": "", "variables": {"op1": "", "op2": "", "op3": "", "op4": "", "op5": ""}, "variables_p": {"op1": [["Dict[str, Any]", 0.26277801023162906], ["dict", 0.19211726719938976], ["Dict[int, int]", 0.10465395275821901], ["Dict[str, Literal]", 0.09495977740706851], ["List[str]", 0.09375604307917842], ["Dict[str, Dict[str, Any]]", 0.08283947828350145], ["int", 0.08112632320375704]], "op2": [["Dict[str, Any]", 0.26277801023162906], ["dict", 0.19211726719938976], ["Dict[int, int]", 0.10465395275821901], ["Dict[str, Literal]", 0.09495977740706851], ["List[str]", 0.09375604307917842], ["Dict[str, Dict[str, Any]]", 0.08283947828350145], ["int", 0.08112632320375704]], "op3": [["str", 0.3002001175622883], ["Pattern[Any]", 0.22992832987008952], ["int", 0.10657185799543573], ["dict", 0.09605105283913176], ["io.BufferedRandom", 0.09361522982758903], ["Dict[int, Any]", 0.08668204371755524]], "op4": [["str", 0.3002001175622883], ["Pattern[Any]", 0.22992832987008952], ["int", 0.10657185799543573], ["dict", 0.09605105283913176], ["io.BufferedRandom", 0.09361522982758903], ["Dict[int, Any]", 0.08668204371755524]], "op5": [["str", 0.3002001175622883], ["Pattern[Any]", 0.22992832987008952], ["int", 0.10657185799543573], ["dict", 0.09605105283913176], ["io.BufferedRandom", 0.09361522982758903], ["Dict[int, Any]", 0.08668204371755524]]}}, {"docstring": {"func": "Verify if dag.leaves returns the leaf tasks of a DAG.", "long_descr": null, "ret": null}, "fn_lc": [[1330, 4], [1340, 48]], "fn_var_ln": {"op1": [[1333, 12], [1333, 15]], "op2": [[1334, 12], [1334, 15]], "op3": [[1335, 12], [1335, 15]], "op4": [[1336, 12], [1336, 15]], "op5": [[1337, 12], [1337, 15]]}, "fn_var_occur": {"op1": [["op1", "EmptyOperator", "task_id"], ["op1", "op2", "op3", "op4", "op5"]], "op2": [["op2", "EmptyOperator", "task_id"], ["op1", "op2", "op3", "op4", "op5"]], "op3": [["op3", "EmptyOperator", "task_id"], ["op1", "op2", "op3", "op4", "op5"]], "op4": [["op4", "EmptyOperator", "task_id"], ["op1", "op2", "op3", "op4", "op5"], ["set", "dag", "leaves", "op4", "op5"]], "op5": [["op5", "EmptyOperator", "task_id"], ["op1", "op2", "op3", "op4", "op5"], ["set", "dag", "leaves", "op4", "op5"]]}, "name": "test_leaves", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_leaves", "ret_exprs": [], "ret_type": "", "variables": {"op1": "", "op2": "", "op3": "", "op4": "", "op5": ""}, "variables_p": {"op1": [["str", 0.3002001175622883], ["Pattern[Any]", 0.22992832987008952], ["int", 0.10657185799543573], ["dict", 0.09605105283913176], ["io.BufferedRandom", 0.09361522982758903], ["Dict[int, Any]", 0.08668204371755524]], "op2": [["str", 0.3002001175622883], ["Pattern[Any]", 0.22992832987008952], ["int", 0.10657185799543573], ["dict", 0.09605105283913176], ["io.BufferedRandom", 0.09361522982758903], ["Dict[int, Any]", 0.08668204371755524]], "op3": [["str", 0.3002001175622883], ["Pattern[Any]", 0.22992832987008952], ["int", 0.10657185799543573], ["dict", 0.09605105283913176], ["io.BufferedRandom", 0.09361522982758903], ["Dict[int, Any]", 0.08668204371755524]], "op4": [["Dict[str, Any]", 0.35313221813092815], ["dict", 0.1830881463438206], ["Dict[int, int]", 0.10056547501008743], ["Dict[str, Dict[str, Any]]", 0.0967499875486587], ["Dict[str, Literal]", 0.09109421146414133], ["List[str]", 0.09032396103264514]], "op5": [["Dict[str, Any]", 0.35313221813092815], ["dict", 0.1830881463438206], ["Dict[int, int]", 0.10056547501008743], ["Dict[str, Dict[str, Any]]", 0.0967499875486587], ["Dict[str, Literal]", 0.09109421146414133], ["List[str]", 0.09032396103264514]]}}, {"docstring": {"func": "Verify correctness of dag.tree_view().", "long_descr": null, "ret": null}, "fn_lc": [[1342, 4], [1357, 42]], "fn_var_ln": {"op1": [[1345, 12], [1345, 15]], "op2": [[1346, 12], [1346, 15]], "op3": [[1347, 12], [1347, 15]], "stdout": [[1352, 16], [1352, 22]], "stdout_lines": [[1354, 12], [1354, 24]]}, "fn_var_occur": {"op1": [["op1", "EmptyOperator", "task_id"], ["op1", "op2", "op3"]], "op2": [["op2", "EmptyOperator", "task_id"], ["op1", "op2", "op3"]], "op3": [["op3", "EmptyOperator", "task_id"], ["op1", "op2", "op3"]], "stdout": [["redirect_stdout", "io", "StringIO", "stdout"], ["stdout", "stdout", "getvalue"], ["stdout_lines", "stdout", "split"]], "stdout_lines": [["stdout_lines", "stdout", "split"]]}, "name": "test_tree_view", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_tree_view", "ret_exprs": [], "ret_type": "", "variables": {"op1": "", "op2": "", "op3": "", "stdout": "", "stdout_lines": ""}, "variables_p": {"op1": [["Pattern[Any]", 0.31009746229780155], ["str", 0.25306320510175906], ["Dict[str, str]", 0.17917338048540177], ["Dict[str, Union[Any, Any, Any]]", 0.09322078256194516], ["io.BufferedRandom", 0.08449169181711917], ["Dict[int, Any]", 0.07995347773597332]], "op2": [["Pattern[Any]", 0.31009746229780155], ["str", 0.25306320510175906], ["Dict[str, str]", 0.17917338048540177], ["Dict[str, Union[Any, Any, Any]]", 0.09322078256194516], ["io.BufferedRandom", 0.08449169181711917], ["Dict[int, Any]", 0.07995347773597332]], "op3": [["Pattern[Any]", 0.31009746229780155], ["str", 0.25306320510175906], ["Dict[str, str]", 0.17917338048540177], ["Dict[str, Union[Any, Any, Any]]", 0.09322078256194516], ["io.BufferedRandom", 0.08449169181711917], ["Dict[int, Any]", 0.07995347773597332]], "stdout": [["io.StringIO", 0.8011026184763368], ["pymatgen.io.vasp.outputs.Outcar", 0.09944869076183144], ["str", 0.09944869076183144]], "stdout_lines": [["str", 0.6728107263347243], ["List[str]", 0.224135024354024], ["int", 0.10305424931125176]]}}, {"docstring": {"func": "Verify tasks with Duplicate task_id raises error", "long_descr": null, "ret": null}, "fn_lc": [[1359, 4], [1367, 50]], "fn_var_ln": {"op1": [[1363, 16], [1363, 19]], "op2": [[1364, 16], [1364, 19]]}, "fn_var_occur": {"op1": [["op1", "EmptyOperator", "task_id"], ["op1", "op2"], ["dag", "task_dict", "op1", "task_id", "op1"]], "op2": [["op2", "BashOperator", "task_id", "bash_command"], ["op1", "op2"]]}, "name": "test_duplicate_task_ids_not_allowed_with_dag_context_manager", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_duplicate_task_ids_not_allowed_with_dag_context_manager", "ret_exprs": [], "ret_type": "", "variables": {"op1": "", "op2": ""}, "variables_p": {"op1": [["dict", 0.2823835076150207], ["Dict[Any, str]", 0.2682350937127714], ["Dict[int, str]", 0.1760658832477168], ["Pattern[Any]", 0.1645241242399607], ["Dict[str, str]", 0.1087913911845303]], "op2": [["Pattern[Any]", 0.269596669908622], ["Dict[str, str]", 0.2070103947282677], ["str", 0.0938127853498074], ["Dict[str, Union[Any, Any, Any]]", 0.09098574260171098], ["Dict[str, Dict[str, Any]]", 0.08777252456567543], ["Dict[int, str]", 0.08577172849005237], ["o2a.converter.task.Task", 0.08371487441149102], ["Type[Optional[Any]]", 0.08133527994437313]]}}, {"docstring": {"func": "Verify tasks with Duplicate task_id raises error", "long_descr": null, "ret": null}, "fn_lc": [[1369, 4], [1377, 50]], "fn_var_ln": {"dag": [[1372, 12], [1372, 15]], "op1": [[1373, 12], [1373, 15]], "op2": [[1374, 12], [1374, 15]]}, "fn_var_occur": {"dag": [["dag", "DAG", "start_date", "DEFAULT_DATE"], ["op1", "EmptyOperator", "task_id", "dag", "dag"], ["op2", "EmptyOperator", "task_id", "dag", "dag"], ["dag", "task_dict", "op1", "task_id", "op1"]], "op1": [["op1", "EmptyOperator", "task_id", "dag", "dag"], ["op1", "op2"], ["dag", "task_dict", "op1", "task_id", "op1"]], "op2": [["op2", "EmptyOperator", "task_id", "dag", "dag"], ["op1", "op2"]]}, "name": "test_duplicate_task_ids_not_allowed_without_dag_context_manager", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_duplicate_task_ids_not_allowed_without_dag_context_manager", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "op1": "", "op2": ""}, "variables_p": {"dag": [["str", 0.27305752804159505], ["int", 0.2537810885453239], ["notifications.models.Notification", 0.08929114048103709], ["List[str]", 0.08578527773034657], ["list", 0.07881583473539759]], "op1": [["Dict[str, Any]", 0.33431118255641823], ["dict", 0.1818822774210188], ["Dict[str, Dict[str, Any]]", 0.107370440748443], ["float", 0.0954411777280413], ["str", 0.09420775936269855], ["List[str]", 0.09383457674441037], ["Dict[Any, str]", 0.09295258543896975]], "op2": [["Pattern[Any]", 0.20773287274730046], ["o2a.converter.task.Task", 0.13050503392977536], ["Dict[int, str]", 0.1162308023418418], ["Dict[str, Optional[str]]", 0.11034767043656796], ["dict", 0.0917439608857646], ["Dict[str, str]", 0.08207426334167796], ["Dict[int, Union[Any, Any]]", 0.0813339791445775], ["str", 0.0801782970202841]]}}, {"docstring": {"func": "Verify that same tasks with Duplicate task_id do not raise error", "long_descr": null, "ret": null}, "fn_lc": [[1379, 4], [1389, 68]], "fn_var_ln": {"op1": [[1382, 12], [1382, 15]], "op2": [[1382, 18], [1382, 21]], "op3": [[1383, 12], [1383, 15]]}, "fn_var_occur": {"op1": [["op1", "op2", "EmptyOperator", "task_id"], ["op1", "op3"], ["op1", "op2"], ["dag", "task_dict", "op1", "task_id", "op1", "op3", "task_id", "op3"]], "op2": [["op1", "op2", "EmptyOperator", "task_id"], ["op2", "op3"], ["op1", "op2"], ["dag", "task_dict", "op2", "task_id", "op2", "op3", "task_id", "op3"]], "op3": [["op3", "EmptyOperator", "task_id"], ["op1", "op3"], ["op2", "op3"], ["dag", "task_dict", "op1", "task_id", "op1", "op3", "task_id", "op3"], ["dag", "task_dict", "op2", "task_id", "op2", "op3", "task_id", "op3"]]}, "name": "test_duplicate_task_ids_for_same_task_is_allowed", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_duplicate_task_ids_for_same_task_is_allowed", "ret_exprs": [], "ret_type": "", "variables": {"op1": "", "op2": "", "op3": ""}, "variables_p": {"op1": [["Dict[str, Any]", 0.42513172331862387], ["int", 0.12859741924719303], ["Dict[str, Literal]", 0.09628933441370387], ["Dict[str, Union[Any, Any]]", 0.08834957470360093], ["dict", 0.08645306566836955]], "op2": [["Dict[str, Any]", 0.42513172331862387], ["int", 0.12859741924719303], ["Dict[str, Literal]", 0.09628933441370387], ["Dict[str, Union[Any, Any]]", 0.08834957470360093], ["dict", 0.08645306566836955]], "op3": [["Dict[str, Any]", 0.4381257133449731], ["Dict[str, Dict[str, Any]]", 0.11475425525068778], ["List[str]", 0.10897629222825614], ["int", 0.09106213679833883], ["dict", 0.0838283447224617], ["Dict[int, int]", 0.08233027976288819], ["tuple", 0.08092297789239415]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1391, 4], [1403, 60]], "fn_var_ln": {"op1": [[1393, 12], [1393, 15]], "op2": [[1394, 12], [1394, 15]], "op3": [[1395, 12], [1395, 15]], "partial": [[1399, 8], [1399, 15]]}, "fn_var_occur": {"op1": [["op1", "EmptyOperator", "task_id"], ["op1", "op2"]], "op2": [["op2", "EmptyOperator", "task_id"], ["op1", "op2"], ["op2", "op3"]], "op3": [["op3", "EmptyOperator", "task_id"], ["op2", "op3"]], "partial": [["partial", "dag", "partial_subset", "include_upstream", "True", "include_downstream", "False"], ["id", "partial", "task_dict", "downstream_list", "dag", "id", "partial"], ["partial", "task_group", "used_group_ids"]]}, "name": "test_partial_subset_updates_all_references_while_deepcopy", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_partial_subset_updates_all_references_while_deepcopy", "ret_exprs": [], "ret_type": "", "variables": {"op1": "", "op2": "", "op3": "", "partial": ""}, "variables_p": {"op1": [["Pattern[Any]", 0.2650537788171139], ["Dict[str, Union[Any, Any, Any]]", 0.1161347669483028], ["Dict[str, str]", 0.10064090791402337], ["dict", 0.09286057147798296], ["str", 0.09276268242869652], ["list", 0.086678711119582], ["Dict[int, str]", 0.08220818865404256], ["Dict[str, Type[Any]]", 0.08142834839109074]], "op2": [["Pattern[Any]", 0.27105340030804526], ["str", 0.25241773028011444], ["Dict[str, str]", 0.10322112962627976], ["int", 0.09778070141683368], ["io.BufferedRandom", 0.09747129136421001], ["Dict[int, Any]", 0.09524521023640947], ["Dict[str, Any]", 0.0828105367681073]], "op3": [["Pattern[Any]", 0.2650537788171139], ["Dict[str, Union[Any, Any, Any]]", 0.1161347669483028], ["Dict[str, str]", 0.10064090791402337], ["dict", 0.09286057147798296], ["str", 0.09276268242869652], ["list", 0.086678711119582], ["Dict[int, str]", 0.08220818865404256], ["Dict[str, Type[Any]]", 0.08142834839109074]], "partial": [["str", 0.10019480383151136], ["list", 0.09654562760419483]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1405, 4], [1429, 98]], "fn_var_ln": {"copied_task": [[1423, 8], [1423, 19]], "partial": [[1422, 8], [1422, 15]], "start": [[1407, 12], [1407, 17]], "task": [[1417, 8], [1417, 12]]}, "fn_var_occur": {"copied_task": [["copied_task", "partial", "get_task"], ["copied_task", "task_group", "upstream_group_ids"], ["isinstance", "copied_task", "task_group", "parent_group", "weakref", "ProxyType"], ["copied_task", "task_group", "parent_group"], ["task", "task_group", "upstream_group_ids", "copied_task", "task_group", "upstream_group_ids"]], "partial": [["partial", "dag", "partial_subset", "include_upstream", "True", "include_downstream", "False"], ["copied_task", "partial", "get_task"]], "start": [["start", "EmptyOperator", "task_id"], ["start", "tg1", "tg2"]], "task": [["task", "dag", "get_task"], ["task", "task_group", "upstream_group_ids"], ["isinstance", "task", "task_group", "parent_group", "weakref", "ProxyType"], ["task", "task_group", "parent_group", "outer_group"], ["task", "task_group", "upstream_group_ids", "copied_task", "task_group", "upstream_group_ids"]]}, "name": "test_partial_subset_taskgroup_join_ids", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_partial_subset_taskgroup_join_ids", "ret_exprs": [], "ret_type": "", "variables": {"copied_task": "", "partial": "", "start": "", "task": ""}, "variables_p": {"copied_task": [["raiden.transfer.state.HopState", 0.34164336114355387], ["list", 0.14909611732794403], ["bytearray", 0.12822327977524456], ["List[Tuple[Any, Any, Any]]", 0.09321786951863034], ["int", 0.08586551409242957], ["Dict[str, Any]", 0.07599344399156027]], "partial": [["str", 0.1091941070763716], ["horizons.util.python.callback.Callback", 0.10831010500031665]], "start": [["int", 0.8134992899285289], ["datetime.datetime", 0.09371922697926222], ["datetime.date.time", 0.09278148309220899]], "task": [["golem.task.taskbase.Task", 0.30381661513158287], ["kippo.tasks.models.KippoTask", 0.2046783793980388], ["List[str]", 0.09628196596076784], ["taskiapplication.models.task.Task", 0.09610455176155881], ["khetha.models.Task", 0.09047501797892907]]}}, {"docstring": {"func": "Tests scheduling a dag with no previous runs", "long_descr": null, "ret": null}, "fn_lc": [[1431, 4], [1454, 30]], "fn_var_ln": {"dag": [[1436, 8], [1436, 11]], "dag_id": [[1435, 8], [1435, 14]], "dag_run": [[1439, 8], [1439, 15]]}, "fn_var_occur": {"dag": [["dag", "DAG", "dag_id", "dag_id"], ["dag", "add_task", "BaseOperator", "task_id", "owner", "start_date", "TEST_DATE"], ["dag_run", "dag", "create_dagrun", "run_type", "DagRunType", "SCHEDULED", "execution_date", "TEST_DATE", "state", "State", "RUNNING"], ["dag", "dag_id", "dag_run", "dag_id"], ["dag", "clear"]], "dag_id": [["dag", "DAG", "dag_id", "dag_id"], ["dag", "dag_id", "dag_run", "dag_id"], ["self", "_clean_up", "dag_id"]], "dag_run": [["dag_run", "dag", "create_dagrun", "run_type", "DagRunType", "SCHEDULED", "execution_date", "TEST_DATE", "state", "State", "RUNNING"], ["dag_run", "None"], ["dag", "dag_id", "dag_run", "dag_id"], ["dag_run", "run_id", "None"], ["dag_run", "run_id"], ["TEST_DATE", "dag_run", "execution_date", "dag_run", "execution_date"], ["State", "RUNNING", "dag_run", "state"], ["dag_run", "external_trigger"]]}, "name": "test_schedule_dag_no_previous_runs", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "_clean_up", "dag_id"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_schedule_dag_no_previous_runs", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "dag_id": "", "dag_run": ""}, "variables_p": {"dag": [["weakref.WeakKeyDictionary[Any, Any]", 0.16334602519983285], ["Dict[str, Callable]", 0.10400359989587046], ["parking.backend.db.dbaccess.DbAccess", 0.09729218503503916]], "dag_id": [["int", 0.6607078059342018], ["Dict[str, str]", 0.19126978304316472], ["Optional[int]", 0.07754178588665787], ["List[str]", 0.07048062513597574]], "dag_run": [["List[List[Any]]", 0.10106671610540174], ["str", 0.09231454751696595]]}}, {"docstring": {"func": "Tests avoid crashes from calling dag callbacks exceptions", "long_descr": null, "ret": null}, "fn_lc": [[1457, 4], [1486, 30]], "fn_var_ln": {"dag": [[1464, 8], [1464, 11]], "dag_id": [[1461, 8], [1461, 14]], "dag_run": [[1474, 12], [1474, 19]], "mock_callback_with_exception": [[1462, 8], [1462, 36]], "side_effect": [[1463, 8], [1463, 48]], "when": [[1470, 8], [1470, 12]]}, "fn_var_occur": {"dag": [["dag", "DAG", "dag_id", "dag_id", "on_success_callback", "on_failure_callback", "mock_callback_with_exception"], ["dag", "add_task", "BaseOperator", "task_id", "owner", "start_date", "when"], ["dag_run", "dag", "create_dagrun", "State", "RUNNING", "when", "run_type", "DagRunType", "MANUAL", "session", "session"], ["dag", "handle_callback", "dag_run", "success", "False"], ["dag", "handle_callback", "dag_run", "success", "True"], ["dag", "clear"]], "dag_id": [["dag", "DAG", "dag_id", "dag_id", "on_success_callback", "on_failure_callback", "mock_callback_with_exception"], ["self", "_clean_up", "dag_id"]], "dag_run": [["dag_run", "dag", "create_dagrun", "State", "RUNNING", "when", "run_type", "DagRunType", "MANUAL", "session", "session"], ["dag", "handle_callback", "dag_run", "success", "False"], ["dag", "handle_callback", "dag_run", "success", "True"]], "mock_callback_with_exception": [["mock_callback_with_exception", "mock", "MagicMock"], ["mock_callback_with_exception", "side_effect", "Exception"], ["dag", "DAG", "dag_id", "dag_id", "on_success_callback", "on_failure_callback", "mock_callback_with_exception"]], "side_effect": [["mock_callback_with_exception", "side_effect", "Exception"]], "when": [["when", "TEST_DATE"], ["dag", "add_task", "BaseOperator", "task_id", "owner", "start_date", "when"], ["dag_run", "dag", "create_dagrun", "State", "RUNNING", "when", "run_type", "DagRunType", "MANUAL", "session", "session"]]}, "name": "test_dag_handle_callback_crash", "params": {"mock_stats": "", "self": ""}, "params_descr": {"mock_stats": "", "self": ""}, "params_occur": {"mock_stats": [["mock_stats", "incr", "assert_called_with", "tags"]], "self": [["self", "_clean_up", "dag_id"]]}, "params_p": {"args": [], "kwargs": [], "mock_stats": [], "self": []}, "q_name": "TestDag.test_dag_handle_callback_crash", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "dag_id": "", "dag_run": "", "mock_callback_with_exception": "", "side_effect": "", "when": ""}, "variables_p": {"dag": [["backend.PyMatcha.utils.orm._model.Model", 0.10417303639091559], ["parking.backend.db.dbaccess.DbAccess", 0.09352002037844223]], "dag_id": [["List[str]", 0.21365520454477374], ["str", 0.17646338401670053]], "dag_run": [["str", 0.41721074562650035], ["list", 0.10793829314748304], ["int", 0.09232789537517906]], "mock_callback_with_exception": [["mock.Mock", 0.09863103370856104]], "side_effect": [["str", 0.3911282316398601], ["Dict[str, Dict[str, str]]", 0.10786139669024185], ["cincoconfig.config.Schema", 0.09812953981334996]], "when": [["int", 0.2771847797328981], ["Dict[str, Any]", 0.11255268832754915], ["datetime.date", 0.10114069331577787], ["List[Dict[str, Any]]", 0.09725873648345751], ["backend.api.models.group.Group", 0.09479382182901705], ["str", 0.08884720858110774], ["List[str]", 0.08873965873765821]]}}, {"docstring": {"func": "Test scheduling a dag where there is a prior DagRun", "long_descr": "which has the same run_id as the next run should have", "ret": null}, "fn_lc": [[1488, 4], [1513, 30]], "fn_var_ln": {"dag": [[1495, 8], [1495, 11]], "dag_id": [[1494, 8], [1494, 14]], "delta": [[1493, 8], [1493, 13]], "model": [[1506, 12], [1506, 17]]}, "fn_var_occur": {"dag": [["dag", "DAG", "dag_id", "dag_id", "schedule", "delta", "start_date", "DEFAULT_DATE"], ["dag", "add_task", "BaseOperator", "task_id", "owner", "start_date", "DEFAULT_DATE"], ["dag", "create_dagrun", "run_type", "DagRunType", "SCHEDULED", "execution_date", "DEFAULT_DATE", "state", "State", "SUCCESS", "external_trigger", "True"], ["dag", "sync_to_db"], ["model", "session", "get", "DagModel", "dag", "dag_id"]], "dag_id": [["dag", "DAG", "dag_id", "dag_id", "schedule", "delta", "start_date", "DEFAULT_DATE"], ["model", "session", "get", "DagModel", "dag", "dag_id"], ["self", "_clean_up", "dag_id"]], "delta": [["delta", "datetime", "timedelta", "hours"], ["dag", "DAG", "dag_id", "dag_id", "schedule", "delta", "start_date", "DEFAULT_DATE"], ["model", "next_dagrun_create_after", "DEFAULT_DATE", "delta"]], "model": [["model", "session", "get", "DagModel", "dag", "dag_id"], ["model", "next_dagrun", "DEFAULT_DATE"], ["model", "next_dagrun_create_after", "DEFAULT_DATE", "delta"]]}, "name": "test_next_dagrun_after_fake_scheduled_previous", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "_clean_up", "dag_id"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_next_dagrun_after_fake_scheduled_previous", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "dag_id": "", "delta": "", "model": ""}, "variables_p": {"dag": [["str", 0.18129886208658127]], "dag_id": [["models.File", 0.2054288403631518], ["str", 0.17572853602572525], ["correios.models.posting.TrackingCode", 0.10151110136829357], ["Type[projecbetting.models.Odd]", 0.07573357581229195], ["int", 0.07176701330591741]], "delta": [["datetime.timedelta", 0.9999999999999999]], "model": [["deeplearning.ml4pl.models.classifier_base_tesMockModel", 0.18108160142706123], ["tensorflow.python.keras.models.Model", 0.12389112073427268], ["bench.models.Onlogn", 0.10164428141826315], ["tartare.core.models.Contributor", 0.09551549996683957], ["Optional[allennlp.models.model.Model]", 0.06520067820372877], ["speedwagon.models.WorkflowListModel2", 0.064748761679151]]}}, {"docstring": {"func": "Tests scheduling a dag scheduled for @once - should be scheduled the first time", "long_descr": "it is called, and not scheduled the second.", "ret": null}, "fn_lc": [[1515, 4], [1537, 30]], "fn_var_ln": {"dag": [[1521, 8], [1521, 11]], "dag_id": [[1520, 8], [1520, 14]], "model": [[1533, 12], [1533, 17]]}, "fn_var_occur": {"dag": [["dag", "DAG", "dag_id", "dag_id", "schedule"], ["isinstance", "dag", "timetable", "OnceTimetable"], ["dag", "add_task", "BaseOperator", "task_id", "owner", "start_date", "TEST_DATE"], ["dag", "sync_to_db"], ["dag", "create_dagrun", "run_type", "DagRunType", "SCHEDULED", "execution_date", "TEST_DATE", "state", "State", "SUCCESS"], ["dag", "sync_to_db"], ["model", "session", "get", "DagModel", "dag", "dag_id"]], "dag_id": [["dag", "DAG", "dag_id", "dag_id", "schedule"], ["model", "session", "get", "DagModel", "dag", "dag_id"], ["self", "_clean_up", "dag_id"]], "model": [["model", "session", "get", "DagModel", "dag", "dag_id"], ["model", "next_dagrun", "None"], ["model", "next_dagrun_create_after", "None"]]}, "name": "test_schedule_dag_once", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "_clean_up", "dag_id"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_schedule_dag_once", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "dag_id": "", "model": ""}, "variables_p": {"dag": [["dict", 0.292535845283125], ["alerta.models.alerAlert", 0.22789951110347523], ["str", 0.09178845341125355], ["list", 0.09073242504332737], ["golem.task.taskrequestorstats.AggregateTaskStats", 0.08595826492368333]], "dag_id": [["medtagger.types.SliceID", 0.19728648295762988], ["str", 0.17856294671315553], ["models.File", 0.12187787016913927]], "model": [["bench.models.Onlogn", 0.15782276329342693], ["tf_encrypted.keras.models.sequential.Sequential", 0.13062285976928165], ["tensorflow.python.keras.models.Model", 0.0951347636515939]]}}, {"docstring": {"func": "Tests if fractional seconds are stored in the database", "long_descr": null, "ret": null}, "fn_lc": [[1539, 4], [1561, 30]], "fn_var_ln": {"dag": [[1544, 8], [1544, 11]], "dag_id": [[1543, 8], [1543, 14]], "run": [[1549, 8], [1549, 11]], "start_date": [[1547, 8], [1547, 18]]}, "fn_var_occur": {"dag": [["dag", "DAG", "dag_id", "dag_id", "schedule"], ["dag", "add_task", "BaseOperator", "task_id", "owner", "start_date", "TEST_DATE"], ["run", "dag", "create_dagrun", "run_id", "start_date", "isoformat", "execution_date", "start_date", "start_date", "start_date", "state", "State", "RUNNING", "external_trigger", "False"]], "dag_id": [["dag", "DAG", "dag_id", "dag_id", "schedule"], ["self", "_clean_up", "dag_id"]], "run": [["run", "dag", "create_dagrun", "run_id", "start_date", "isoformat", "execution_date", "start_date", "start_date", "start_date", "state", "State", "RUNNING", "external_trigger", "False"], ["run", "refresh_from_db"], ["start_date", "run", "execution_date"], ["start_date", "run", "start_date"]], "start_date": [["dag", "add_task", "BaseOperator", "task_id", "owner", "start_date", "TEST_DATE"], ["start_date", "timezone", "utcnow"], ["run", "dag", "create_dagrun", "run_id", "start_date", "isoformat", "execution_date", "start_date", "start_date", "start_date", "state", "State", "RUNNING", "external_trigger", "False"], ["start_date", "run", "execution_date"], ["start_date", "run", "start_date"]]}, "name": "test_fractional_seconds", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "_clean_up", "dag_id"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_fractional_seconds", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "dag_id": "", "run": "", "start_date": ""}, "variables_p": {"dag": [["Dict[str, Callable]", 0.10775068051694352], ["str", 0.10628506193604713], ["alerta.models.alerAlert", 0.10317092981979539]], "dag_id": [["str", 0.4285358003992142], ["List[int]", 0.10902054294308844], ["Union[None, MutableMapping[str, Any], MutableSequence[Any], bool, float, int, str]", 0.10462511662263752], ["list", 0.10131903735641963], ["int", 0.08951503351011646], ["Pattern[str]", 0.07966552992409633]], "run": [["int", 0.7160015846742057], ["datetime.timedelta", 0.10599268386398863], ["str", 0.09152765473123782]], "start_date": [["datetime.timedelta", 0.29682086935044066], ["datetime.datetime.datetime", 0.19577391027702742], ["datetime.date.time.datetime", 0.11802871239043265], ["datetime.datetime", 0.09185327682867361], ["datetime.date.time.timedelta", 0.0916359008035207]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1563, 4], [1568, 53]], "fn_var_ln": {"args": [[1565, 8], [1565, 12]], "dag": [[1566, 8], [1566, 11]], "dag_pickle": [[1567, 8], [1567, 18]], "test_dag_id": [[1564, 8], [1564, 19]]}, "fn_var_occur": {"args": [["args", "DEFAULT_DATE"], ["dag", "DAG", "test_dag_id", "default_args", "args"]], "dag": [["dag", "DAG", "test_dag_id", "default_args", "args"], ["dag_pickle", "dag", "pickle"], ["dag_pickle", "pickle", "dag_id", "dag", "dag_id"]], "dag_pickle": [["dag_pickle", "dag", "pickle"], ["dag_pickle", "pickle", "dag_id", "dag", "dag_id"]], "test_dag_id": [["dag", "DAG", "test_dag_id", "default_args", "args"]]}, "name": "test_pickling", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_pickling", "ret_exprs": [], "ret_type": "", "variables": {"args": "", "dag": "", "dag_pickle": "", "test_dag_id": ""}, "variables_p": {"args": [["dict", 0.14710642105377056], ["tuple", 0.14677109585846893], ["Dict[str, Union[Any, bool, str]]", 0.11589628741007202], ["Dict[str, Union[Any, Any, Any, bool, str]]", 0.11589628741007202], ["Dict[str, Union[Any, Any, bool, str]]", 0.11589628741007202], ["Dict[str, str]", 0.07473030195547072]], "dag": [["str", 0.5440557231772339], ["List[str]", 0.15658694543080087], ["Dict[str, List[Any]]", 0.14712539063426666]], "dag_pickle": [["str", 0.26067540965949476], ["dict", 0.10189753557276261], ["Tuple[int, int, int, int]", 0.08818397711414348]], "test_dag_id": [["str", 0.3783348212408371], ["List[str]", 0.11475084067820322], ["Callable(open)[..., Any][[[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal], default), Named(buffering, int, default), Named(encoding, Optional[str], default), Named(errors, Optional[str], default), Named(newline, Optional[str], default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.TextIOWrapper][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, Literal), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.FileIO][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, Union[Literal[-1], Literal], default), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.BufferedRandom][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, Union[Literal[-1], Literal], default), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.BufferedWriter][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, Union[Literal[-1], Literal], default), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.BufferedReader][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, int), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], BinaryIO][Any, Any]]", 0.10650431068530883]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1570, 4], [1617, 46]], "fn_var_ln": {"args": [[1576, 8], [1576, 12]], "dag": [[1577, 8], [1577, 11]], "dag_diff_load_time": [[1581, 8], [1581, 26]], "dag_diff_name": [[1582, 8], [1582, 21]], "dag_eq": [[1579, 8], [1579, 14]], "dag_subclass": [[1584, 8], [1584, 20]], "dag_subclass_diff_name": [[1585, 8], [1585, 30]], "dump": [[1602, 8], [1602, 12]], "last_loaded": [[1588, 12], [1588, 28]], "test_dag_id": [[1571, 8], [1571, 19]]}, "fn_var_occur": {"args": [["args", "DEFAULT_DATE"], ["dag", "DAG", "test_dag_id", "default_args", "args"], ["dag_eq", "DAG", "test_dag_id", "default_args", "args"], ["dag_diff_load_time", "DAG", "test_dag_id", "default_args", "args"], ["dag_diff_name", "DAG", "test_dag_id", "default_args", "args"], ["dag_subclass", "DAGsubclass", "test_dag_id", "default_args", "args"], ["dag_subclass_diff_name", "DAGsubclass", "test_dag_id", "default_args", "args"]], "dag": [["dag", "DAG", "test_dag_id", "default_args", "args"], ["dag_", "last_loaded", "dag", "last_loaded"], ["dag", "dag"], ["dag_eq", "dag"], ["dag_diff_name", "dag"], ["dag_diff_load_time", "dag"], ["dag_subclass", "dag"], ["dump", "pickle", "dumps", "dag"], ["pickle", "loads", "dump", "dag"], ["dag", "dag_diff_name"], ["dag", "dag_diff_load_time"], ["dag", "dag_subclass_diff_name"], ["dag_diff_name", "dag"], ["hash", "dag", "hash", "dag"], ["hash", "dag_eq", "hash", "dag"], ["hash", "dag_diff_name", "hash", "dag"], ["hash", "dag_subclass", "hash", "dag"]], "dag_diff_load_time": [["dag_diff_load_time", "DAG", "test_dag_id", "default_args", "args"], ["dag_diff_load_time", "dag"], ["dag", "dag_diff_load_time"]], "dag_diff_name": [["dag_diff_name", "DAG", "test_dag_id", "default_args", "args"], ["dag_eq", "dag_diff_name", "dag_subclass", "dag_subclass_diff_name"], ["dag_diff_name", "dag"], ["dag", "dag_diff_name"], ["dag_diff_name", "dag"], ["hash", "dag_diff_name", "hash", "dag"]], "dag_eq": [["dag_eq", "DAG", "test_dag_id", "default_args", "args"], ["dag_eq", "dag_diff_name", "dag_subclass", "dag_subclass_diff_name"], ["dag_eq", "dag"], ["hash", "dag_eq", "hash", "dag"]], "dag_subclass": [["dag_subclass", "DAGsubclass", "test_dag_id", "default_args", "args"], ["dag_eq", "dag_diff_name", "dag_subclass", "dag_subclass_diff_name"], ["dag_subclass", "dag"], ["hash", "dag_subclass", "hash", "dag"]], "dag_subclass_diff_name": [["dag_subclass_diff_name", "DAGsubclass", "test_dag_id", "default_args", "args"], ["dag_eq", "dag_diff_name", "dag_subclass", "dag_subclass_diff_name"], ["dag", "dag_subclass_diff_name"]], "dump": [["dump", "pickle", "dumps", "dag"], ["pickle", "loads", "dump", "dag"]], "last_loaded": [["dag_", "last_loaded", "dag", "last_loaded"]], "test_dag_id": [["dag", "DAG", "test_dag_id", "default_args", "args"], ["dag_eq", "DAG", "test_dag_id", "default_args", "args"], ["dag_diff_load_time", "DAG", "test_dag_id", "default_args", "args"], ["dag_diff_name", "DAG", "test_dag_id", "default_args", "args"], ["dag_subclass", "DAGsubclass", "test_dag_id", "default_args", "args"], ["dag_subclass_diff_name", "DAGsubclass", "test_dag_id", "default_args", "args"]]}, "name": "test_rich_comparison_ops", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_rich_comparison_ops", "ret_exprs": [], "ret_type": "", "variables": {"args": "", "dag": "", "dag_diff_load_time": "", "dag_diff_name": "", "dag_eq": "", "dag_subclass": "", "dag_subclass_diff_name": "", "dump": "", "last_loaded": "", "test_dag_id": ""}, "variables_p": {"args": [["List[str]", 0.5183186507189123]], "dag": [["List[str]", 0.30405698012795457], ["str", 0.2689663128033633], ["bool", 0.15747903255632117], ["int", 0.09143111668856044]], "dag_diff_load_time": [["int", 0.31530539508728866], ["str", 0.18993162205748568], ["List[Dict[str, Any]]", 0.10378818205860141], ["List[str]", 0.10145396412633968], ["busboy.util.Maybe[datetime.datetime]", 0.10011749358100186]], "dag_diff_name": [["str", 0.9056178861667392]], "dag_eq": [["str", 0.4844894805433747], ["Dict[str, List[Any]]", 0.09255044578777158], ["bool", 0.08914988733850318]], "dag_subclass": [["str", 0.19199716123935198], ["Dict[str, Any]", 0.1225582550570231], ["Dict[str, Type[Any]]", 0.1225582550570231], ["Dict[str, Union[Any, Any, Any, Any]]", 0.10705517546398563], ["Dict[str, str]", 0.09805843602079893], ["int", 0.09160892410118235]], "dag_subclass_diff_name": [["str", 0.8974171934316357], ["List[str]", 0.10258280656836419]], "dump": [["Dict[str, pathlib.Path]", 0.12835477869984005], ["RuntimeError", 0.09790736150825241], ["Any[Any]", 0.09723148507702309], ["str", 0.08557260129213808]], "last_loaded": [["Dict[str, int]", 0.29627460359285146], ["int", 0.2099343904190628], ["str", 0.1975164023952343], ["set", 0.09875820119761715]], "test_dag_id": [["str", 0.6284129269039616]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1619, 4], [1629, 103]], "fn_var_ln": {"dag": [[1621, 8], [1621, 11]], "dag_id": [[1620, 8], [1620, 14]], "paused_dag_ids": [[1625, 8], [1625, 22]]}, "fn_var_occur": {"dag": [["dag", "DAG", "dag_id", "is_paused_upon_creation", "True"], ["dag", "sync_to_db"]], "dag_id": [["dag", "DAG", "dag_id", "is_paused_upon_creation", "True"], ["DagModel", "get_dagmodel", "dag_id", "None"], ["paused_dag_ids", "DagModel", "get_paused_dag_ids", "dag_id"], ["paused_dag_ids", "dag_id"], ["session", "query", "DagModel", "filter", "DagModel", "dag_id", "dag_id", "delete", "synchronize_session", "False"]], "paused_dag_ids": [["paused_dag_ids", "DagModel", "get_paused_dag_ids", "dag_id"], ["paused_dag_ids", "dag_id"]]}, "name": "test_get_paused_dag_ids", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_get_paused_dag_ids", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "dag_id": "", "paused_dag_ids": ""}, "variables_p": {"dag": [["int", 0.3014215975396801], ["list", 0.1878215129421697], ["Tuple[str, str, str, str, str, str, str, str, str, str]", 0.11480451933874339], ["str", 0.10315618705507366], ["Dict[str, Dict[str, Any]]", 0.10315618705507366]], "dag_id": [["str", 0.4045232190967369], ["int", 0.2015546403982311], ["Pattern[Any]", 0.09228926529970331], ["medtagger.types.SliceID", 0.08658971897992945]], "paused_dag_ids": [["int", 0.46982366819223054], ["str", 0.26404166853317024], ["Optional[str]", 0.10896864240629567]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1646, 4], [1652, 64]], "fn_var_ln": {"dag": [[1649, 8], [1649, 11]]}, "fn_var_occur": {"dag": [["dag", "DAG", "schedule", "schedule_interval_arg"], ["dag", "timetable", "expected_timetable"], ["dag", "schedule_interval", "schedule_interval_arg"], ["dag", "timetable", "description", "interval_description"]]}, "name": "test_timetable_and_description_from_schedule_interval_arg", "params": {"expected_timetable": "", "interval_description": "", "schedule_interval_arg": "", "self": ""}, "params_descr": {"expected_timetable": "", "interval_description": "", "schedule_interval_arg": "", "self": ""}, "params_occur": {"expected_timetable": [["dag", "timetable", "expected_timetable"]], "interval_description": [["dag", "timetable", "description", "interval_description"]], "schedule_interval_arg": [["dag", "DAG", "schedule", "schedule_interval_arg"], ["dag", "schedule_interval", "schedule_interval_arg"]], "self": []}, "params_p": {"args": [], "expected_timetable": [["str", 0.14796748965392564], ["int", 0.10203769091964592]], "interval_description": [["str", 0.5954085368246168], ["list", 0.08392987888615865]], "kwargs": [], "schedule_interval_arg": [["tests.conftesWorker", 0.08174413058939073], ["bool", 0.07639703984940405]], "self": []}, "q_name": "TestDag.test_timetable_and_description_from_schedule_interval_arg", "ret_exprs": [], "ret_type": "", "variables": {"dag": ""}, "variables_p": {"dag": []}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1654, 4], [1658, 67]], "fn_var_ln": {"dag": [[1655, 8], [1655, 11]]}, "fn_var_occur": {"dag": [["dag", "DAG", "schedule", "Dataset", "uri"], ["dag", "timetable", "DatasetTriggeredTimetable"], ["dag", "schedule_interval"], ["dag", "timetable", "description"]]}, "name": "test_timetable_and_description_from_dataset", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_timetable_and_description_from_dataset", "ret_exprs": [], "ret_type": "", "variables": {"dag": ""}, "variables_p": {"dag": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["str", 0.1], ["datetime.timedelta", 0.1]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1660, 4], [1664, 61]], "fn_var_ln": {"dag": [[1661, 8], [1661, 11]]}, "fn_var_occur": {"dag": [["dag", "DAG", "schedule_interval"], ["dag", "timetable", "cron_timetable"], ["dag", "schedule_interval"], ["dag", "timetable", "description"]]}, "name": "test_schedule_interval_still_works", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_schedule_interval_still_works", "ret_exprs": [], "ret_type": "", "variables": {"dag": ""}, "variables_p": {"dag": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["str", 0.1], ["datetime.timedelta", 0.1]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1666, 4], [1670, 61]], "fn_var_ln": {"dag": [[1667, 8], [1667, 11]]}, "fn_var_occur": {"dag": [["dag", "DAG", "timetable", "cron_timetable"], ["dag", "timetable", "cron_timetable"], ["dag", "schedule_interval"], ["dag", "timetable", "description"]]}, "name": "test_timetable_still_works", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_timetable_still_works", "ret_exprs": [], "ret_type": "", "variables": {"dag": ""}, "variables_p": {"dag": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["str", 0.1], ["datetime.timedelta", 0.1]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1692, 4], [1695, 64]], "fn_var_ln": {"dag": [[1693, 8], [1693, 11]]}, "fn_var_occur": {"dag": [["dag", "DAG", "timetable", "timetable"], ["dag", "timetable", "timetable"], ["dag", "timetable", "description", "expected_description"]]}, "name": "test_description_from_timetable", "params": {"expected_description": "", "self": "", "timetable": ""}, "params_descr": {"expected_description": "", "self": "", "timetable": ""}, "params_occur": {"expected_description": [["dag", "timetable", "description", "expected_description"]], "self": [], "timetable": [["dag", "DAG", "timetable", "timetable"], ["dag", "timetable", "timetable"], ["dag", "timetable", "description", "expected_description"]]}, "params_p": {"args": [], "expected_description": [["str", 1.0]], "kwargs": [], "self": [], "timetable": [["str", 0.08753402127988705]]}, "q_name": "TestDag.test_description_from_timetable", "ret_exprs": [], "ret_type": "", "variables": {"dag": ""}, "variables_p": {"dag": [["nevergrad.optimization.base.ConfiguredOptimizer", 0.12110988280106261], ["registers.patch.Patch", 0.10612271090391787], ["Type[str]", 0.08325066059520753]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1697, 4], [1700, 65]], "fn_var_ln": {"dag": [[1698, 8], [1698, 11]], "dr": [[1699, 8], [1699, 10]]}, "fn_var_occur": {"dag": [["dag", "DAG", "dag_id"], ["dr", "dag", "create_dagrun", "run_type", "DagRunType", "MANUAL", "execution_date", "DEFAULT_DATE", "state", "State", "NONE"]], "dr": [["dr", "dag", "create_dagrun", "run_type", "DagRunType", "MANUAL", "execution_date", "DEFAULT_DATE", "state", "State", "NONE"], ["dr", "run_id", "DEFAULT_DATE", "isoformat"]]}, "name": "test_create_dagrun_run_id_is_generated", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_create_dagrun_run_id_is_generated", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "dr": ""}, "variables_p": {"dag": [["float", 0.12123885372013707], ["accounts.models.Account", 0.1133419734369746], ["int", 0.10611007249834353], ["datetime.timedelta", 0.1059094412753583], ["str", 0.09694372212740969], ["Optional[hpaction.models.HPActionDocuments]", 0.09542561431098902], ["byceps.services.user.models.detail.UserDetail", 0.09355779283809723], ["Tuple[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any]", 0.09155802269776203], ["grpy.core.models.Grouping", 0.08797216336693522], ["byceps.services.user.transfer.models.User", 0.08794234372799328]], "dr": [["str", 0.4890418680843415], ["Optional[hpaction.models.HPActionDocuments]", 0.1222849925372583], ["Union[Literal, Literal]", 0.10615392708988446], ["geode.models.common.Address", 0.09774325824917711], ["int", 0.09341096460693535], ["Dict[str, Union[int, str]]", 0.09136498943240322]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1702, 4], [1708, 47]], "fn_var_ln": {"dag": [[1703, 8], [1703, 11]], "dr": [[1707, 8], [1707, 10]]}, "fn_var_occur": {"dag": [["dag", "DAG", "dag_id"], ["dr", "dag", "create_dagrun", "run_id", "state", "State", "NONE"], ["dr", "dag", "create_dagrun", "run_id", "state", "State", "NONE"]], "dr": [["dr", "dag", "create_dagrun", "run_id", "state", "State", "NONE"], ["dr", "run_type", "DagRunType", "SCHEDULED"], ["dr", "dag", "create_dagrun", "run_id", "state", "State", "NONE"], ["dr", "run_type", "DagRunType", "MANUAL"]]}, "name": "test_create_dagrun_run_type_is_obtained_from_run_id", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_create_dagrun_run_type_is_obtained_from_run_id", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "dr": ""}, "variables_p": {"dag": [["int", 0.3812650549679391], ["bytearray", 0.09781520383858816], ["bool", 0.0900625277009152]], "dr": [["int", 0.5516764506403734], ["str", 0.13731598930635472], ["List[str]", 0.0809808223425671], ["List[dict]", 0.07190698967449276]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1710, 4], [1716, 43]], "fn_var_ln": {"dag": [[1712, 8], [1712, 11]], "dr": [[1713, 8], [1713, 10]], "job_id": [[1711, 8], [1711, 14]]}, "fn_var_occur": {"dag": [["dag", "DAG", "dag_id"], ["dr", "dag", "create_dagrun", "run_id", "state", "State", "NONE", "creating_job_id", "job_id"]], "dr": [["dr", "dag", "create_dagrun", "run_id", "state", "State", "NONE", "creating_job_id", "job_id"], ["dr", "creating_job_id", "job_id"]], "job_id": [["dr", "dag", "create_dagrun", "run_id", "state", "State", "NONE", "creating_job_id", "job_id"], ["dr", "creating_job_id", "job_id"]]}, "name": "test_create_dagrun_job_id_is_set", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_create_dagrun_job_id_is_set", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "dr": "", "job_id": ""}, "variables_p": {"dag": [["int", 0.4023849714237236], ["dict", 0.09629214318724776], ["List[dict]", 0.0902914102517248]], "dr": [["int", 0.7334985226260382], ["str", 0.18278322234354083], ["List[str]", 0.08371825503042099]], "job_id": [["transfer.models.StorefronID", 0.09835362074794335], ["transfer.models.ArticleID", 0.09835362074794335], ["transfer.models.ShopID", 0.09835362074794335], ["int", 0.09237516323848796], ["Optional[int]", 0.09064742713719925]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1718, 4], [1752, 70]], "fn_var_ln": {"fail_stop_dag": [[1737, 8], [1737, 21]], "non_fail_stop_dag": [[1726, 8], [1726, 25]], "task_with_default_trigger_rule": [[1740, 8], [1740, 38]], "task_with_non_default_trigger_rule": [[1723, 8], [1723, 42]]}, "fn_var_occur": {"fail_stop_dag": [["fail_stop_dag", "DAG", "dag_id", "start_date", "DEFAULT_DATE", "fail_stop", "True"], ["fail_stop_dag", "add_task", "task_with_default_trigger_rule"], ["fail_stop_dag", "add_task", "task_with_non_default_trigger_rule"]], "non_fail_stop_dag": [["non_fail_stop_dag", "DAG", "dag_id", "start_date", "DEFAULT_DATE", "fail_stop", "False"], ["non_fail_stop_dag", "add_task", "task_with_non_default_trigger_rule"]], "task_with_default_trigger_rule": [["task_with_default_trigger_rule", "EmptyOperator", "task_id", "trigger_rule", "DEFAULT_TRIGGER_RULE"], ["fail_stop_dag", "add_task", "task_with_default_trigger_rule"]], "task_with_non_default_trigger_rule": [["task_with_non_default_trigger_rule", "EmptyOperator", "task_id", "trigger_rule", "TriggerRule", "DUMMY"], ["non_fail_stop_dag", "add_task", "task_with_non_default_trigger_rule"], ["fail_stop_dag", "add_task", "task_with_non_default_trigger_rule"]]}, "name": "test_dag_add_task_checks_trigger_rule", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_dag_add_task_checks_trigger_rule", "ret_exprs": [], "ret_type": "", "variables": {"fail_stop_dag": "", "non_fail_stop_dag": "", "task_with_default_trigger_rule": "", "task_with_non_default_trigger_rule": ""}, "variables_p": {"fail_stop_dag": [["int", 0.25912006244969277], ["datetime.datetime.datetime", 0.2001764898434534], ["dict", 0.1449857251842908], ["Tuple[int, int]", 0.09723996886587581], ["datetime.datetime", 0.08618435319200503]], "non_fail_stop_dag": [["datetime.date.time.timedelta", 0.19181590603980422], ["int", 0.17669933383949726], ["browse.services.database.models.MemberInstitutionIP", 0.1346259993940253], ["float", 0.11434573111979499], ["ajapaik.ajapaik.models.Photo", 0.08897630249009078]], "task_with_default_trigger_rule": [["int", 0.32248729282026484], ["List[List[int]]", 0.2053354830748702], ["bool", 0.10548776603883686], ["str", 0.10548776603883686]], "task_with_non_default_trigger_rule": [["int", 0.3611986221308186], ["Dict[int, List[Any]]", 0.1449921291009465], ["List[Tuple[str, Any]]", 0.10323675194369065], ["str", 0.09107163556272821]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1754, 4], [1765, 86]], "fn_var_ln": {"dag": [[1755, 8], [1755, 11]], "default_task_group": [[1757, 8], [1757, 26]], "task_group": [[1761, 8], [1761, 18]], "task_with_task_group": [[1762, 8], [1762, 28]], "task_without_task_group": [[1756, 8], [1756, 31]]}, "fn_var_occur": {"dag": [["dag", "DAG", "dag_id", "start_date", "DEFAULT_DATE"], ["default_task_group", "TaskGroupContext", "get_current_task_group", "dag"], ["dag", "add_task", "task_without_task_group"], ["task_group", "TaskGroup", "group_id", "dag", "dag"], ["dag", "add_task", "task_with_task_group"], ["dag", "get_task", "task_with_task_group"]], "default_task_group": [["default_task_group", "TaskGroupContext", "get_current_task_group", "dag"], ["default_task_group", "get_child_by_label", "task_without_task_group"]], "task_group": [["task_group", "TaskGroup", "group_id", "dag", "dag"], ["task_with_task_group", "EmptyOperator", "task_id", "task_group", "task_group"], ["task_group", "get_child_by_label", "task_with_task_group"]], "task_with_task_group": [["task_with_task_group", "EmptyOperator", "task_id", "task_group", "task_group"], ["dag", "add_task", "task_with_task_group"], ["task_group", "get_child_by_label", "task_with_task_group"], ["dag", "get_task", "task_with_task_group"]], "task_without_task_group": [["task_without_task_group", "EmptyOperator", "task_id"], ["dag", "add_task", "task_without_task_group"], ["default_task_group", "get_child_by_label", "task_without_task_group"]]}, "name": "test_dag_add_task_sets_default_task_group", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_dag_add_task_sets_default_task_group", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "default_task_group": "", "task_group": "", "task_with_task_group": "", "task_without_task_group": ""}, "variables_p": {"dag": [["str", 0.10924574186917696], ["datetime.datetime", 0.10443871511748033], ["Tuple[int, int]", 0.10433844575386235], ["int", 0.10293142416745188], ["backend.api.models.group.Group", 0.0979246821899108], ["List[int]", 0.0968493779157385], ["datetime.date", 0.09093257500757239], ["Optional[magic.models.deck.Deck]", 0.09012480851552361]], "default_task_group": [["snorkel.classification.task.Task", 0.0870969582811279]], "task_group": [["apps.core.task.coretaskstate.TaskDefinition", 0.17900201616459208], ["List[str]", 0.11348149332236589], ["golem.task.task_api.EnvironmentTaskApiService", 0.1094253672257188], ["golem.task.taskbase.Task", 0.09594262543130609], ["golem.task.taskcomputer.TaskComputer", 0.09310862362643824]], "task_with_task_group": [["o2a.converter.task_group.TaskGroup", 0.41954698799086465], ["golem.task.taskstate.TaskState", 0.1989378215223136], ["golem.task.taskbase.Task", 0.17991333030809092], ["taskiapplication.models.task.Task", 0.08822273010327694]], "task_without_task_group": [["o2a.converter.task.Task", 0.1645243580968812], ["List[str]", 0.09445243171155944], ["kitovu.utils.JsonType", 0.09067725761125042]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1768, 4], [1809, 44]], "fn_var_ln": {"dag": [[1772, 8], [1772, 11]], "dag_id": [[1769, 8], [1769, 14]], "dagrun": [[1808, 8], [1808, 14]], "dagrun_1": [[1776, 8], [1776, 16]], "dagruns": [[1797, 8], [1797, 15]], "session": [[1775, 8], [1775, 15]], "t_1": [[1773, 8], [1773, 11]], "task_id": [[1771, 8], [1771, 15]], "task_instance_1": [[1784, 8], [1784, 23]]}, "fn_var_occur": {"dag": [["dag", "DAG", "dag_id", "start_date", "DEFAULT_DATE", "max_active_runs"], ["t_1", "EmptyOperator", "task_id", "task_id", "dag", "dag"], ["dagrun_1", "dag", "create_dagrun", "run_type", "DagRunType", "BACKFILL_JOB", "state", "State", "FAILED", "start_date", "DEFAULT_DATE", "execution_date", "DEFAULT_DATE"], ["dag", "clear", "start_date", "DEFAULT_DATE", "end_date", "DEFAULT_DATE", "datetime", "timedelta", "days", "dag_run_state", "dag_run_state", "include_subdags", "False", "include_parentdag", "False", "session", "session"]], "dag_id": [["self", "_clean_up", "dag_id"], ["dag", "DAG", "dag_id", "start_date", "DEFAULT_DATE", "max_active_runs"], ["dagruns", "session", "query", "DagRun", "filter", "DagRun", "dag_id", "dag_id", "all"]], "dagrun": [["dagrun", "airflow", "models", "DagRun", "dagruns"], ["dagrun", "state", "dag_run_state"]], "dagrun_1": [["dagrun_1", "dag", "create_dagrun", "run_type", "DagRunType", "BACKFILL_JOB", "state", "State", "FAILED", "start_date", "DEFAULT_DATE", "execution_date", "DEFAULT_DATE"], ["session", "merge", "dagrun_1"]], "dagruns": [["dagruns", "session", "query", "DagRun", "filter", "DagRun", "dag_id", "dag_id", "all"], ["len", "dagruns"], ["dagrun", "airflow", "models", "DagRun", "dagruns"]], "session": [["session", "settings", "Session"], ["session", "merge", "dagrun_1"], ["session", "merge", "task_instance_1"], ["session", "commit"], ["dag", "clear", "start_date", "DEFAULT_DATE", "end_date", "DEFAULT_DATE", "datetime", "timedelta", "days", "dag_run_state", "dag_run_state", "include_subdags", "False", "include_parentdag", "False", "session", "session"], ["dagruns", "session", "query", "DagRun", "filter", "DagRun", "dag_id", "dag_id", "all"]], "t_1": [["t_1", "EmptyOperator", "task_id", "task_id", "dag", "dag"], ["task_instance_1", "TI", "t_1", "execution_date", "DEFAULT_DATE", "state", "State", "RUNNING"]], "task_id": [["t_1", "EmptyOperator", "task_id", "task_id", "dag", "dag"]], "task_instance_1": [["task_instance_1", "TI", "t_1", "execution_date", "DEFAULT_DATE", "state", "State", "RUNNING"], ["session", "merge", "task_instance_1"]]}, "name": "test_clear_set_dagrun_state", "params": {"dag_run_state": "", "self": ""}, "params_descr": {"dag_run_state": "", "self": ""}, "params_occur": {"dag_run_state": [["dag", "clear", "start_date", "DEFAULT_DATE", "end_date", "DEFAULT_DATE", "datetime", "timedelta", "days", "dag_run_state", "dag_run_state", "include_subdags", "False", "include_parentdag", "False", "session", "session"], ["dagrun", "state", "dag_run_state"]], "self": [["self", "_clean_up", "dag_id"]]}, "params_p": {"args": [], "dag_run_state": [["mythril.laser.ethereum.state.constraints.Constraints", 0.2166861628739362], ["raiden.utils.BlockIdentifier", 0.18365575436081583], ["int", 0.13374138773900265], ["raiden.utils.MessageID", 0.09142180308210009], ["raiden.utils.Address", 0.08953834760257207]], "kwargs": [], "self": []}, "q_name": "TestDag.test_clear_set_dagrun_state", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "dag_id": "", "dagrun": "airflow.models.DagRun", "dagrun_1": "", "dagruns": "", "session": "", "t_1": "", "task_id": "", "task_instance_1": ""}, "variables_p": {"dag": [["str", 0.4392705501310409], ["Tuple[int, int]", 0.1355055019551469], ["Dict[str, str]", 0.0890527430638975], ["List[Tuple[Any, Any]]", 0.08789894922571233], ["datetime.datetime", 0.07877067605606673]], "dag_id": [["str", 0.596222630021643], ["int", 0.1254885400048163], ["Type[prm.journals.models.moods.Mood]", 0.09099641184498355]], "dagrun": [["jinete.models.vehicles.Fleet", 0.38867628997614634], ["models.profiles.Profiles", 0.124631596742136], ["models.confirmation.ConfirmationModel", 0.09078050900473769], ["topicdb.core.models.occurrence.Occurrence", 0.09022033287956402], ["zam_repondeur.models.division.SubDiv", 0.08040140585515997], ["chalice.deploy.models.SNSLambdaSubscription", 0.07687767321612103], ["finances.models.Discount", 0.07461329347195828], ["circle_core.models.message_box.MessageBox", 0.07379889885417662]], "dagrun_1": [["int", 0.44378743759795575], ["str", 0.2104023664906795], ["Union[Literal, Literal]", 0.1399084588523852], ["Dict[int, str]", 0.10414236301522842], ["list", 0.10175937404375125]], "dagruns": [["list", 0.36800803293923195], ["int", 0.1812482979231808]], "session": [["sqlalchemy.orm.session.Session", 0.3076776317465939], ["SMSShell.models.session.Session", 0.19285737609463086], ["Optional[str]", 0.17197664086008863]], "t_1": [["str", 0.6787074094175782], ["list", 0.11568875629915663], ["int", 0.09347305628015026]], "task_id": [["List[str]", 0.11508037862547912], ["Optional[str]", 0.08911309417666653], ["str", 0.0874584950473092], ["list", 0.08743710465945752]], "task_instance_1": [["raiden.transfer.state.HopState", 0.25678320557256884], ["datetime.datetime.datetime", 0.1381115777725505], ["datetime.timedelta", 0.13029423125594014], ["Optional[raiden.transfer.state.NettingChannelState]", 0.10369227111970222], ["Optional[dict]", 0.09674252857771781], ["Callable[[datetime.datetime], Awaitable[None]]", 0.09530402425938106], ["int", 0.0915384614989954], ["golem.task.taskrequestorstats.TaskStats", 0.087533699943144]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1820, 8], [1821, 43]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "make_arg_lists", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_clear_set_dagrun_state_for_mapped_task.<locals>.make_arg_lists", "ret_exprs": ["return [[1], [2], [{\"a\": \"b\"}]]"], "ret_type": "", "ret_type_p": [["int", 0.19109344577997947], ["Tuple[Any, Any, Any]", 0.12005683221434538], ["List[str]", 0.09940279581153652]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1823, 8], [1824, 24]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "consumer", "params": {"value": ""}, "params_descr": {"value": ""}, "params_occur": {"value": [["print", "value"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "value": [["str", 0.3058237174860281], ["float", 0.26733236917236985], ["dict", 0.1208497605490131], ["datetime.datetime", 0.1133075876200765], ["int", 0.09484914809440356]]}, "q_name": "TestDag.test_clear_set_dagrun_state_for_mapped_task.<locals>.consumer", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1812, 4], [1875, 44]], "fn_var_ln": {"dag": [[1817, 8], [1817, 11]], "dag_id": [[1813, 8], [1813, 14]], "dagrun": [[1874, 8], [1874, 14]], "dagrun_1": [[1831, 8], [1831, 16]], "dagruns": [[1863, 8], [1863, 15]], "mapped": [[1826, 8], [1826, 14]], "session": [[1830, 8], [1830, 15]], "state": [[1845, 8], [1845, 17]], "task_id": [[1815, 8], [1815, 15]], "ti": [[1841, 8], [1841, 10]], "ti2": [[1842, 8], [1842, 11]], "upstream_ti": [[1840, 8], [1840, 19]]}, "fn_var_occur": {"dag": [["mapped", "PythonOperator", "partial", "task_id", "task_id", "dag", "dag", "python_callable", "consumer", "expand", "op_args", "make_arg_lists"], ["dagrun_1", "dag", "create_dagrun", "run_type", "DagRunType", "BACKFILL_JOB", "state", "State", "FAILED", "start_date", "DEFAULT_DATE", "execution_date", "DEFAULT_DATE", "session", "session"], ["dag", "clear", "task_ids", "task_id", "start_date", "DEFAULT_DATE", "end_date", "DEFAULT_DATE", "datetime", "timedelta", "days", "dag_run_state", "dag_run_state", "include_subdags", "False", "include_parentdag", "False", "session", "session"]], "dag_id": [["dagruns", "session", "query", "DagRun", "filter", "DagRun", "dag_id", "dag_id", "all"]], "dagrun": [["dagrun", "airflow", "models", "DagRun", "dagruns"], ["dagrun", "state", "dag_run_state"]], "dagrun_1": [["dagrun_1", "dag", "create_dagrun", "run_type", "DagRunType", "BACKFILL_JOB", "state", "State", "FAILED", "start_date", "DEFAULT_DATE", "execution_date", "DEFAULT_DATE", "session", "session"], ["expand_mapped_task", "mapped", "dagrun_1", "run_id", "length", "session", "session"], ["upstream_ti", "dagrun_1", "get_task_instance", "session", "session"], ["ti", "dagrun_1", "get_task_instance", "task_id", "map_index", "session", "session"], ["ti2", "dagrun_1", "get_task_instance", "task_id", "map_index", "session", "session"]], "dagruns": [["dagruns", "session", "query", "DagRun", "filter", "DagRun", "dag_id", "dag_id", "all"], ["len", "dagruns"], ["dagrun", "airflow", "models", "DagRun", "dagruns"]], "mapped": [["mapped", "PythonOperator", "partial", "task_id", "task_id", "dag", "dag", "python_callable", "consumer", "expand", "op_args", "make_arg_lists"], ["expand_mapped_task", "mapped", "dagrun_1", "run_id", "length", "session", "session"]], "session": [["session", "settings", "Session"], ["dagrun_1", "dag", "create_dagrun", "run_type", "DagRunType", "BACKFILL_JOB", "state", "State", "FAILED", "start_date", "DEFAULT_DATE", "execution_date", "DEFAULT_DATE", "session", "session"], ["expand_mapped_task", "mapped", "dagrun_1", "run_id", "length", "session", "session"], ["upstream_ti", "dagrun_1", "get_task_instance", "session", "session"], ["ti", "dagrun_1", "get_task_instance", "task_id", "map_index", "session", "session"], ["ti2", "dagrun_1", "get_task_instance", "task_id", "map_index", "session", "session"], ["session", "flush"], ["dag", "clear", "task_ids", "task_id", "start_date", "DEFAULT_DATE", "end_date", "DEFAULT_DATE", "datetime", "timedelta", "days", "dag_run_state", "dag_run_state", "include_subdags", "False", "include_parentdag", "False", "session", "session"], ["session", "refresh", "upstream_ti"], ["session", "refresh", "ti"], ["session", "refresh", "ti2"], ["dagruns", "session", "query", "DagRun", "filter", "DagRun", "dag_id", "dag_id", "all"]], "state": [["dagrun_1", "dag", "create_dagrun", "run_type", "DagRunType", "BACKFILL_JOB", "state", "State", "FAILED", "start_date", "DEFAULT_DATE", "execution_date", "DEFAULT_DATE", "session", "session"], ["upstream_ti", "state", "State", "SUCCESS"], ["ti", "state", "State", "SUCCESS"], ["ti2", "state", "State", "SUCCESS"], ["upstream_ti", "state", "None"], ["ti", "state", "None"], ["ti2", "state", "State", "SUCCESS"], ["dagrun", "state", "dag_run_state"]], "task_id": [["mapped", "PythonOperator", "partial", "task_id", "task_id", "dag", "dag", "python_callable", "consumer", "expand", "op_args", "make_arg_lists"], ["ti", "dagrun_1", "get_task_instance", "task_id", "map_index", "session", "session"], ["ti2", "dagrun_1", "get_task_instance", "task_id", "map_index", "session", "session"], ["dag", "clear", "task_ids", "task_id", "start_date", "DEFAULT_DATE", "end_date", "DEFAULT_DATE", "datetime", "timedelta", "days", "dag_run_state", "dag_run_state", "include_subdags", "False", "include_parentdag", "False", "session", "session"]], "ti": [["ti", "dagrun_1", "get_task_instance", "task_id", "map_index", "session", "session"], ["ti", "state", "State", "SUCCESS"], ["session", "refresh", "ti"], ["ti", "state", "None"]], "ti2": [["ti2", "dagrun_1", "get_task_instance", "task_id", "map_index", "session", "session"], ["ti2", "state", "State", "SUCCESS"], ["session", "refresh", "ti2"], ["ti2", "state", "State", "SUCCESS"]], "upstream_ti": [["upstream_ti", "dagrun_1", "get_task_instance", "session", "session"], ["upstream_ti", "state", "State", "SUCCESS"], ["session", "refresh", "upstream_ti"], ["upstream_ti", "state", "None"]]}, "name": "test_clear_set_dagrun_state_for_mapped_task", "params": {"dag_run_state": "", "self": ""}, "params_descr": {"dag_run_state": "", "self": ""}, "params_occur": {"dag_run_state": [["dag", "clear", "task_ids", "task_id", "start_date", "DEFAULT_DATE", "end_date", "DEFAULT_DATE", "datetime", "timedelta", "days", "dag_run_state", "dag_run_state", "include_subdags", "False", "include_parentdag", "False", "session", "session"], ["dagrun", "state", "dag_run_state"]], "self": []}, "params_p": {"args": [], "dag_run_state": [["bool", 0.20305781268405773], ["raiden.utils.BlockIdentifier", 0.10945935229240407], ["zerver.models.UserProfile", 0.10152890634202887], ["Sequence[int]", 0.09319969648673017]], "kwargs": [], "self": []}, "q_name": "TestDag.test_clear_set_dagrun_state_for_mapped_task", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "dag_id": "", "dagrun": "airflow.models.DagRun", "dagrun_1": "", "dagruns": "", "mapped": "", "session": "", "state": "", "task_id": "", "ti": "", "ti2": "", "upstream_ti": ""}, "variables_p": {"dag": [["int", 0.27560456671596767], ["o2a.converter.task.Task", 0.14906423218379333], ["tests.factories.model.TaskPayment", 0.11058871621927428], ["bool", 0.09716538888471743], ["byceps.services.user.transfer.models.User", 0.0940339047946814], ["rotkehlchen.tests.utils.rotkehlchen.BalancesTestSetup", 0.09333507000189985], ["str", 0.09160908204412133], ["List[str]", 0.08859903915554464]], "dag_id": [["Type[Tuple[str, Any]]", 0.20632998575987466], ["int", 0.10658812147455653]], "dagrun": [["jinete.models.vehicles.Fleet", 0.38867628997614634], ["models.profiles.Profiles", 0.124631596742136], ["models.confirmation.ConfirmationModel", 0.09078050900473769], ["topicdb.core.models.occurrence.Occurrence", 0.09022033287956402], ["zam_repondeur.models.division.SubDiv", 0.08040140585515997], ["chalice.deploy.models.SNSLambdaSubscription", 0.07687767321612103], ["finances.models.Discount", 0.07461329347195828], ["circle_core.models.message_box.MessageBox", 0.07379889885417662]], "dagrun_1": [["int", 0.44378743759795575], ["str", 0.2104023664906795], ["Union[Literal, Literal]", 0.1399084588523852], ["Dict[int, str]", 0.10414236301522842], ["list", 0.10175937404375125]], "dagruns": [["list", 0.36800803293923195], ["int", 0.1812482979231808]], "mapped": [["int", 0.27560456671596767], ["o2a.converter.task.Task", 0.14906423218379333], ["tests.factories.model.TaskPayment", 0.11058871621927428], ["bool", 0.09716538888471743], ["byceps.services.user.transfer.models.User", 0.0940339047946814], ["rotkehlchen.tests.utils.rotkehlchen.BalancesTestSetup", 0.09333507000189985], ["str", 0.09160908204412133], ["List[str]", 0.08859903915554464]], "session": [["bool", 0.11959176962957876], ["Optional[planetsclub.users.base.BaseUser]", 0.10996087192981895], ["sqlalchemy.Column", 0.1011938804046136], ["dict", 0.09128871430450518], ["Dict[str, str]", 0.0858075350965591]], "state": [["str", 0.5278152184950152], ["dict", 0.27623178943655236], ["datetime.datetime", 0.09946012302506804], ["datetime.timedelta", 0.0964928690433643]], "task_id": [["str", 0.30692705396760767], ["int", 0.09994835333141769]], "ti": [["golem.task.taskstate.SubtaskState", 0.17870492217788198], ["restful_functions.modules.task.TaskStoreSettings", 0.13001419941935588], ["correios.models.posting.TrackingCode", 0.07728404035964838], ["golem.task.taskbase.AcceptClientVerdict", 0.0748375809542656], ["list", 0.07169439980334905], ["tuple", 0.07130733775561642]], "ti2": [["golem.task.taskstate.SubtaskState", 0.1746460856159106], ["zerver.models.Realm", 0.12685976045165046], ["restful_functions.modules.task.TaskStoreSettings", 0.10934225192397831], ["Dict[str, str]", 0.07729211448285986], ["str", 0.07690384296232217], ["golem.task.taskbase.AcceptClientVerdict", 0.07199264080913705], ["geode.models.common.Address", 0.06945308066736537]], "upstream_ti": [["golem.rpc.session.WebSocketAddress", 0.11690063480392517], ["golem.rpc.session.Publisher", 0.10680685284784917], ["grpy.core.models.Grouping", 0.10181117867922795], ["Optional[str]", 0.0945979799798091], ["raiden.utils.Address", 0.09417579131169933], ["golem.task.taskkeeper.TaskHeaderKeeper", 0.08787771193755317]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1882, 8], [1884, 25]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "check_task", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_dag_test_basic.<locals>.check_task", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1877, 4], [1890, 40]], "fn_var_ln": {"dag": [[1878, 8], [1878, 11]], "mock_object": [[1879, 8], [1879, 19]]}, "fn_var_occur": {"dag": [["dag", "test"]], "mock_object": [["mock_object", "assert_called_once"]]}, "name": "test_dag_test_basic", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_dag_test_basic", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "mock_object": ""}, "variables_p": {"dag": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["str", 0.1], ["datetime.timedelta", 0.1]], "mock_object": [["str", 0.36737793873604346], ["Dict[str, Union[Any, Any]]", 0.25625329599051294]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1897, 8], [1898, 41]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "check_task", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_dag_test_with_dependencies.<locals>.check_task", "ret_exprs": ["return \"output of first task\""], "ret_type": "", "ret_type_p": [["dict", 0.22325978031444305], ["List[str]", 0.2040663381476963], ["Tuple[int, List[str]]", 0.09591754009456298], ["bool", 0.09362173762010018], ["str", 0.0912556796441122]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1901, 8], [1903, 33]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "check_task_2", "params": {"my_input": ""}, "params_descr": {"my_input": ""}, "params_occur": {"my_input": [["mock_object", "my_input"]]}, "params_p": {"args": [], "kwargs": [], "my_input": [["Mapping[str, Any]", 0.23576530952880037], ["pyramid.config.Configurator", 0.17428547809672168], ["dict", 0.16508638848382962]], "self": []}, "q_name": "TestDag.test_dag_test_with_dependencies.<locals>.check_task_2", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1892, 4], [1909, 62]], "fn_var_ln": {"dag": [[1893, 8], [1893, 11]], "mock_object": [[1894, 8], [1894, 19]]}, "fn_var_occur": {"dag": [["dag", "test"]], "mock_object": [["mock_object", "assert_called_with"]]}, "name": "test_dag_test_with_dependencies", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_dag_test_with_dependencies", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "mock_object": ""}, "variables_p": {"dag": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["str", 0.1], ["datetime.timedelta", 0.1]], "mock_object": [["str", 0.36737793873604346], ["Dict[str, Union[Any, Any]]", 0.25625329599051294]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1915, 8], [1917, 64]], "fn_var_ln": {"ti": [[1916, 12], [1916, 14]]}, "fn_var_occur": {"ti": [["ti", "context"], ["mock_handle_object_1", "ti", "task_id"]]}, "name": "handle_task_failure", "params": {"context": ""}, "params_descr": {"context": ""}, "params_occur": {"context": [["ti", "context"]]}, "params_p": {"args": [], "context": [["str", 0.3112861806675614], ["bytes", 0.11946070067861228], ["bool", 0.0924205507939282], ["int", 0.08850011574520827], ["pathlib.Path", 0.0858346973038517]], "kwargs": [], "self": []}, "q_name": "TestDag.test_dag_test_with_fail_handler.<locals>.handle_task_failure", "ret_exprs": [], "ret_type": "", "variables": {"ti": ""}, "variables_p": {"ti": [["str", 0.8019069475519954], ["Dict[int, str]", 0.11111808722900321], ["Dict[str, List[Any]]", 0.0869749652190013]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1919, 8], [1921, 66]], "fn_var_ln": {"ti": [[1920, 12], [1920, 14]]}, "fn_var_occur": {"ti": [["ti", "context"], ["mock_handle_object_2", "ti", "dag_id"]]}, "name": "handle_dag_failure", "params": {"context": ""}, "params_descr": {"context": ""}, "params_occur": {"context": [["ti", "context"]]}, "params_p": {"args": [], "context": [["int", 0.30000000000000004], ["Callable", 0.2], ["models.Question", 0.1], ["str", 0.1]], "kwargs": [], "self": []}, "q_name": "TestDag.test_dag_test_with_fail_handler.<locals>.handle_dag_failure", "ret_exprs": [], "ret_type": "", "variables": {"ti": ""}, "variables_p": {"ti": [["str", 0.26845157685178905], ["list", 0.20692801141112463]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1934, 8], [1936, 44]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "check_task", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_dag_test_with_fail_handler.<locals>.check_task", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1939, 8], [1941, 40]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "check_task_2", "params": {"my_input": ""}, "params_descr": {"my_input": ""}, "params_occur": {"my_input": [["mock_task_object_2", "my_input"]]}, "params_p": {"args": [], "kwargs": [], "my_input": [["str", 0.2629126557698811], ["solo.config.app.Config", 0.10875750809892847]], "self": []}, "q_name": "TestDag.test_dag_test_with_fail_handler.<locals>.check_task_2", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1911, 4], [1951, 46]], "fn_var_ln": {"dag": [[1923, 8], [1923, 11]], "mock_handle_object_1": [[1912, 8], [1912, 28]], "mock_handle_object_2": [[1913, 8], [1913, 28]], "mock_task_object_1": [[1930, 8], [1930, 26]], "mock_task_object_2": [[1931, 8], [1931, 26]]}, "fn_var_occur": {"dag": [["dag", "test"]], "mock_handle_object_1": [["mock_handle_object_1", "assert_called_with"]], "mock_handle_object_2": [["mock_handle_object_2", "assert_called_with"]], "mock_task_object_1": [["mock_task_object_1", "assert_called"]], "mock_task_object_2": [["mock_task_object_2", "assert_not_called"]]}, "name": "test_dag_test_with_fail_handler", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_dag_test_with_fail_handler", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "mock_handle_object_1": "", "mock_handle_object_2": "", "mock_task_object_1": "", "mock_task_object_2": ""}, "variables_p": {"dag": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["str", 0.1], ["datetime.timedelta", 0.1]], "mock_handle_object_1": [["tests.conftesConfluentAvroConsumerMock", 0.07316690117258427], ["Dict[str, Tuple[str, Any]]", 0.07083109777046208]], "mock_handle_object_2": [["tests.conftesConfluentAvroConsumerMock", 0.07316690117258427], ["Dict[str, Tuple[str, Any]]", 0.07083109777046208]], "mock_task_object_1": [["mock._Call", 0.1943546590611527], ["Dict[str, int]", 0.13663345707392024], ["Dict[str, Any]", 0.10311492059692606], ["datetime.datetime", 0.10287101813399184], ["Dict[str, Dict[str, str]]", 0.09930069312536072], ["Dict[Any, Union[Any, Any]]", 0.09554060947211711], ["mock.Mock", 0.09258011931280906]], "mock_task_object_2": [["mock._Call", 0.1943546590611527], ["Dict[str, int]", 0.13663345707392024], ["Dict[str, Any]", 0.10311492059692606], ["datetime.datetime", 0.10287101813399184], ["Dict[str, Dict[str, str]]", 0.09930069312536072], ["Dict[Any, Union[Any, Any]]", 0.09554060947211711], ["mock.Mock", 0.09258011931280906]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1958, 8], [1959, 31]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "get_index", "params": {"current_val": "", "ti": ""}, "params_descr": {"current_val": "", "ti": ""}, "params_occur": {"current_val": [], "ti": [["ti", "map_index"]]}, "params_p": {"args": [], "current_val": [["bool", 0.39999999999999997], ["str", 0.39999999999999997], ["T", 0.09999999999999999], ["dict", 0.09999999999999999]], "kwargs": [], "self": [], "ti": [["str", 0.19999999999999998], ["bool", 0.09999999999999999], ["pricemonitor.config.Coin", 0.09999999999999999]]}, "q_name": "TestDag.test_dag_test_with_task_mapping.<locals>.get_index", "ret_exprs": ["return ti.map_index"], "ret_type": "", "ret_type_p": [["str", 0.19999999999999998], ["bool", 0.09999999999999999], ["pricemonitor.config.Coin", 0.09999999999999999]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1962, 8], [1964, 39]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "check_task", "params": {"my_input": ""}, "params_descr": {"my_input": ""}, "params_occur": {"my_input": [["mock_object", "list", "my_input"]]}, "params_p": {"args": [], "kwargs": [], "my_input": [["dict", 0.08772369914876467], ["List[Dict[str, Any]]", 0.08624447118275537]], "self": []}, "q_name": "TestDag.test_dag_test_with_task_mapping.<locals>.check_task", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1953, 4], [1971, 55]], "fn_var_ln": {"dag": [[1954, 8], [1954, 11]], "mapped_task": [[1967, 12], [1967, 23]], "mock_object": [[1955, 8], [1955, 19]]}, "fn_var_occur": {"dag": [["dag", "test"]], "mapped_task": [["mapped_task", "get_index", "expand", "current_val"], ["check_task", "mapped_task"]], "mock_object": [["mock_object", "assert_called_with"]]}, "name": "test_dag_test_with_task_mapping", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_dag_test_with_task_mapping", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "mapped_task": "", "mock_object": ""}, "variables_p": {"dag": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["str", 0.1], ["datetime.timedelta", 0.1]], "mapped_task": [["Optional[float]", 0.07992207465052606], ["bool", 0.07621079649625669]], "mock_object": [["str", 0.36737793873604346], ["Dict[str, Union[Any, Any]]", 0.25625329599051294]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1983, 8], [1989, 97]], "fn_var_ln": {"local_secrets": [[1988, 12], [1988, 25]]}, "fn_var_occur": {"local_secrets": [["local_secrets", "airflow", "secrets", "local_filesystem", "LocalFilesystemBackend", "secrets_backend_list"], ["local_secrets", "get_connection", "conn_id"]]}, "name": "check_task", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_dag_connection_file.<locals>.check_task", "ret_exprs": [], "ret_type": "", "variables": {"local_secrets": "airflow.secrets.local_filesystem.LocalFilesystemBackend"}, "variables_p": {"local_secrets": [["Counter", 0.23668314671322369], ["list", 0.09188955418935327], ["str", 0.091146043254446]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1973, 4], [1996, 45]], "fn_var_ln": {"dag": [[1980, 8], [1980, 11]], "test_connections_string": [[1974, 8], [1974, 31]]}, "fn_var_occur": {"dag": [["dag", "test", "conn_file_path", "tmp", "name"]], "test_connections_string": [["f", "write", "test_connections_string"]]}, "name": "test_dag_connection_file", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_dag_connection_file", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "test_connections_string": ""}, "variables_p": {"dag": [["str", 0.4574833710821223], ["List[str]", 0.10201501886964796], ["bool", 0.08486538885410357], ["list", 0.08372123922065441]], "test_connections_string": [["str", 0.9999999999999998]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1998, 4], [2031, 26]], "fn_var_ln": {"dag": [[2002, 8], [2002, 11]], "dag_id": [[1999, 8], [1999, 14]], "parent_dag": [[2007, 8], [2007, 25]], "session": [[2011, 8], [2011, 15]], "subdag": [[2004, 8], [2004, 14]], "t_1": [[2003, 8], [2003, 11]], "t_2": [[2006, 8], [2006, 11]], "task_id": [[2001, 8], [2001, 15]], "task_instance_1": [[2026, 8], [2026, 23]], "task_instance_2": [[2027, 8], [2027, 23]]}, "fn_var_occur": {"dag": [["dag", "DAG", "dag_id", "start_date", "DEFAULT_DATE", "max_active_runs"], ["t_1", "EmptyOperator", "task_id", "task_id", "dag", "dag"], ["SubDagOperator", "task_id", "subdag", "subdag", "dag", "dag"], ["t_2", "EmptyOperator", "task_id", "dag", "subdag"], ["subdag", "parent_dag", "dag"], ["dag", "sync_to_db"], ["dag", "create_dagrun", "run_type", "DagRunType", "MANUAL", "state", "State", "FAILED", "start_date", "DEFAULT_DATE", "execution_date", "DEFAULT_DATE", "session", "session"], ["dag", "subdag"]], "dag_id": [["self", "_clean_up", "dag_id"], ["dag", "DAG", "dag_id", "start_date", "DEFAULT_DATE", "max_active_runs"], ["subdag", "DAG", "dag_id", "start_date", "DEFAULT_DATE", "max_active_runs"]], "parent_dag": [["subdag", "parent_dag", "dag"]], "session": [["session", "settings", "Session"], ["dag", "create_dagrun", "run_type", "DagRunType", "MANUAL", "state", "State", "FAILED", "start_date", "DEFAULT_DATE", "execution_date", "DEFAULT_DATE", "session", "session"], ["subdag", "create_dagrun", "run_type", "DagRunType", "MANUAL", "state", "State", "FAILED", "start_date", "DEFAULT_DATE", "execution_date", "DEFAULT_DATE", "session", "session"], ["session", "merge", "task_instance_1"], ["session", "merge", "task_instance_2"]], "subdag": [["subdag", "DAG", "dag_id", "start_date", "DEFAULT_DATE", "max_active_runs"], ["SubDagOperator", "task_id", "subdag", "subdag", "dag", "dag"], ["t_2", "EmptyOperator", "task_id", "dag", "subdag"], ["subdag", "parent_dag", "dag"], ["subdag", "create_dagrun", "run_type", "DagRunType", "MANUAL", "state", "State", "FAILED", "start_date", "DEFAULT_DATE", "execution_date", "DEFAULT_DATE", "session", "session"], ["dag", "subdag"]], "t_1": [["t_1", "EmptyOperator", "task_id", "task_id", "dag", "dag"], ["task_instance_1", "TI", "t_1", "execution_date", "DEFAULT_DATE", "state", "State", "RUNNING"]], "t_2": [["t_2", "EmptyOperator", "task_id", "dag", "subdag"], ["task_instance_2", "TI", "t_2", "execution_date", "DEFAULT_DATE", "state", "State", "RUNNING"]], "task_id": [["t_1", "EmptyOperator", "task_id", "task_id", "dag", "dag"], ["SubDagOperator", "task_id", "subdag", "subdag", "dag", "dag"], ["t_2", "EmptyOperator", "task_id", "dag", "subdag"]], "task_instance_1": [["task_instance_1", "TI", "t_1", "execution_date", "DEFAULT_DATE", "state", "State", "RUNNING"], ["session", "merge", "task_instance_1"]], "task_instance_2": [["task_instance_2", "TI", "t_2", "execution_date", "DEFAULT_DATE", "state", "State", "RUNNING"], ["session", "merge", "task_instance_2"]]}, "name": "_make_test_subdag", "params": {"self": "", "session": ""}, "params_descr": {"self": "", "session": ""}, "params_occur": {"self": [["self", "_clean_up", "dag_id"]], "session": [["session", "settings", "Session"], ["dag", "create_dagrun", "run_type", "DagRunType", "MANUAL", "state", "State", "FAILED", "start_date", "DEFAULT_DATE", "execution_date", "DEFAULT_DATE", "session", "session"], ["subdag", "create_dagrun", "run_type", "DagRunType", "MANUAL", "state", "State", "FAILED", "start_date", "DEFAULT_DATE", "execution_date", "DEFAULT_DATE", "session", "session"], ["session", "merge", "task_instance_1"], ["session", "merge", "task_instance_2"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "session": [["str", 0.21811668607828194], ["recidiviz.persistence.database.session.Session", 0.20993481615789436], ["zerver.models.UserProfile", 0.18346179965736636], ["tracim.models.auth.User", 0.09412207287161103], ["django.contrib.auth.models.User", 0.08906425242251757]]}, "q_name": "TestDag._make_test_subdag", "ret_exprs": ["return dag, subdag"], "ret_type": "", "ret_type_p": [["int", 3.732973574780814e-10], ["str", 1.8816062282067376e-10], ["Dict[str, int]", 1.3701866015987673e-10]], "variables": {"dag": "", "dag_id": "", "parent_dag": "", "session": "", "subdag": "", "t_1": "", "t_2": "", "task_id": "", "task_instance_1": "", "task_instance_2": ""}, "variables_p": {"dag": [["str", 0.4392705501310409], ["Tuple[int, int]", 0.1355055019551469], ["Dict[str, str]", 0.0890527430638975], ["List[Tuple[Any, Any]]", 0.08789894922571233], ["datetime.datetime", 0.07877067605606673]], "dag_id": [["str", 0.3859606671925079], ["int", 0.29205535634884916]], "parent_dag": [["io.TextIOWrapper", 0.9999999998140968], ["bool", 2.967193962743239e-11], ["str", 2.109323892093714e-11], ["List[str]", 2.109323892093714e-11], ["Set[str]", 2.109323892093714e-11], ["list", 2.109323892093714e-11], ["Tuple[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any]", 2.109323892093714e-11]], "session": [["dict", 0.21526828503226486], ["bool", 0.11022491538808084], ["Optional[planetsclub.users.base.BaseUser]", 0.10513233028081939], ["sqlalchemy.orm.session.Session", 0.09705223911475913], ["Dict[str, Any]", 0.09512713552227317], ["kedro.framework.session.store.BaseSessionStore", 0.09180517523387424], ["sqlalchemy.Column", 0.09122380593133265]], "subdag": [["str", 0.2674550517894979], ["datetime.datetime.datetime", 0.17763412568432504], ["Tuple[int, int]", 0.14089914906011894], ["dict", 0.12811042388131164], ["datetime.timedelta", 0.09680875029973228], ["datetime.datetime", 0.09465061956336404], ["Dict[str, str]", 0.09444187972165007]], "t_1": [["str", 0.6787074094175782], ["list", 0.11568875629915663], ["int", 0.09347305628015026]], "t_2": [["str", 0.33683027709943225], ["datetime.datetime.timedelta", 0.3278014814235506], ["golem.task.taskbase.Task", 0.09255516084847999], ["Dict[str, int]", 0.07636764076908852]], "task_id": [["int", 0.31576683225641045], ["Optional[str]", 0.10090431719151849], ["str", 0.08752953322026971], ["Pattern[Any]", 0.08007412482388428]], "task_instance_1": [["raiden.transfer.state.HopState", 0.25678320557256884], ["datetime.datetime.datetime", 0.1381115777725505], ["datetime.timedelta", 0.13029423125594014], ["Optional[raiden.transfer.state.NettingChannelState]", 0.10369227111970222], ["Optional[dict]", 0.09674252857771781], ["Callable[[datetime.datetime], Awaitable[None]]", 0.09530402425938106], ["int", 0.0915384614989954], ["golem.task.taskrequestorstats.TaskStats", 0.087533699943144]], "task_instance_2": [["raiden.transfer.state.HopState", 0.25678320557256884], ["datetime.datetime.datetime", 0.1381115777725505], ["datetime.timedelta", 0.13029423125594014], ["Optional[raiden.transfer.state.NettingChannelState]", 0.10369227111970222], ["Optional[dict]", 0.09674252857771781], ["Callable[[datetime.datetime], Awaitable[None]]", 0.09530402425938106], ["int", 0.0915384614989954], ["golem.task.taskrequestorstats.TaskStats", 0.087533699943144]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[2034, 4], [2056, 26]], "fn_var_ln": {"dag": [[2036, 8], [2036, 11]], "dagrun": [[2048, 8], [2048, 14]], "session": [[2035, 8], [2035, 15]], "subdag": [[2036, 13], [2036, 19]]}, "fn_var_occur": {"dag": [["dag", "subdag", "self", "_make_test_subdag", "session"], ["dag", "clear", "start_date", "DEFAULT_DATE", "end_date", "DEFAULT_DATE", "datetime", "timedelta", "days", "dag_run_state", "dag_run_state", "include_subdags", "True", "include_parentdag", "False", "session", "session"]], "dagrun": [["dagrun", "session", "query", "DagRun", "filter", "DagRun", "dag_id", "subdag", "dag_id", "one"], ["dagrun", "state", "dag_run_state"]], "session": [["session", "settings", "Session"], ["dag", "subdag", "self", "_make_test_subdag", "session"], ["session", "flush"], ["dag", "clear", "start_date", "DEFAULT_DATE", "end_date", "DEFAULT_DATE", "datetime", "timedelta", "days", "dag_run_state", "dag_run_state", "include_subdags", "True", "include_parentdag", "False", "session", "session"], ["dagrun", "session", "query", "DagRun", "filter", "DagRun", "dag_id", "subdag", "dag_id", "one"], ["session", "rollback"]], "subdag": [["dag", "subdag", "self", "_make_test_subdag", "session"], ["dagrun", "session", "query", "DagRun", "filter", "DagRun", "dag_id", "subdag", "dag_id", "one"]]}, "name": "test_clear_set_dagrun_state_for_subdag", "params": {"dag_run_state": "", "self": ""}, "params_descr": {"dag_run_state": "", "self": ""}, "params_occur": {"dag_run_state": [["dag", "clear", "start_date", "DEFAULT_DATE", "end_date", "DEFAULT_DATE", "datetime", "timedelta", "days", "dag_run_state", "dag_run_state", "include_subdags", "True", "include_parentdag", "False", "session", "session"], ["dagrun", "state", "dag_run_state"]], "self": [["dag", "subdag", "self", "_make_test_subdag", "session"]]}, "params_p": {"args": [], "dag_run_state": [["bool", 0.10734970714370809], ["int", 0.10675287598140498], ["raiden.utils.SecretHash", 0.10287275515212624], ["raiden.utils.TokenAmount", 0.10287275515212624], ["raiden.utils.BlockIdentifier", 0.10014662069875711], ["raiden.utils.Address", 0.10014662069875711], ["datetime.datetime", 0.09971471849362364], ["raiden.utils.MessageID", 0.09242733665642532]], "kwargs": [], "self": []}, "q_name": "TestDag.test_clear_set_dagrun_state_for_subdag", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "dagrun": "", "session": "", "subdag": ""}, "variables_p": {"dag": [["dateutil.tz.tz.tzoffset", 0.3900515521370579], ["int", 0.21239514979728452], ["track.tests.factories.RecordFactory", 0.11158617449225512], ["Type[leasing.models.invoice.InvoiceSet]", 0.09640171535241064], ["datetime.datetime.timedelta", 0.088392846312614]], "dagrun": [["int", 0.56539474332311], ["lists.models.Todo", 0.12074518348585217], ["list", 0.11271177055775834], ["str", 0.09421532162873764]], "session": [["sqlalchemy.orm.session.Session", 0.17745690152217894], ["sqlalchemy.orm.Session", 0.13262547934153887], ["Dict[str, Any]", 0.11942690997942877]], "subdag": [["str", 0.33062298031957854], ["int", 0.2799053643217815], ["Dict[str, Any]", 0.09758982557259632], ["Any[Any]", 0.0916177317123562], ["dict", 0.08823060203455993]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[2059, 4], [2080, 44]], "fn_var_ln": {"dag": [[2061, 8], [2061, 11]], "dagrun": [[2073, 8], [2073, 14]], "session": [[2060, 8], [2060, 15]], "subdag": [[2061, 13], [2061, 19]]}, "fn_var_occur": {"dag": [["dag", "subdag", "self", "_make_test_subdag", "session"], ["dagrun", "session", "query", "DagRun", "filter", "DagRun", "dag_id", "dag", "dag_id", "one"]], "dagrun": [["dagrun", "session", "query", "DagRun", "filter", "DagRun", "dag_id", "dag", "dag_id", "one"], ["dagrun", "state", "dag_run_state"]], "session": [["session", "settings", "Session"], ["dag", "subdag", "self", "_make_test_subdag", "session"], ["session", "flush"], ["subdag", "clear", "start_date", "DEFAULT_DATE", "end_date", "DEFAULT_DATE", "datetime", "timedelta", "days", "dag_run_state", "dag_run_state", "include_subdags", "True", "include_parentdag", "True", "session", "session"], ["dagrun", "session", "query", "DagRun", "filter", "DagRun", "dag_id", "dag", "dag_id", "one"]], "subdag": [["dag", "subdag", "self", "_make_test_subdag", "session"], ["subdag", "clear", "start_date", "DEFAULT_DATE", "end_date", "DEFAULT_DATE", "datetime", "timedelta", "days", "dag_run_state", "dag_run_state", "include_subdags", "True", "include_parentdag", "True", "session", "session"]]}, "name": "test_clear_set_dagrun_state_for_parent_dag", "params": {"dag_run_state": "", "self": ""}, "params_descr": {"dag_run_state": "", "self": ""}, "params_occur": {"dag_run_state": [["subdag", "clear", "start_date", "DEFAULT_DATE", "end_date", "DEFAULT_DATE", "datetime", "timedelta", "days", "dag_run_state", "dag_run_state", "include_subdags", "True", "include_parentdag", "True", "session", "session"], ["dagrun", "state", "dag_run_state"]], "self": [["dag", "subdag", "self", "_make_test_subdag", "session"]]}, "params_p": {"args": [], "dag_run_state": [["int", 0.5263753391362059], ["raiden.utils.MessageID", 0.10256243087232833], ["bool", 0.09485282731153864], ["Optional[datetime.datetime]", 0.09299562640517031], ["datetime.date.time", 0.09240108917779287], ["raiden.utils.BlockIdentifier", 0.0908126870969639]], "kwargs": [], "self": []}, "q_name": "TestDag.test_clear_set_dagrun_state_for_parent_dag", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "dagrun": "", "session": "", "subdag": ""}, "variables_p": {"dag": [["str", 0.33062298031957854], ["int", 0.2799053643217815], ["Dict[str, Any]", 0.09758982557259632], ["Any[Any]", 0.0916177317123562], ["dict", 0.08823060203455993]], "dagrun": [["int", 0.56539474332311], ["lists.models.Todo", 0.12074518348585217], ["list", 0.11271177055775834], ["str", 0.09421532162873764]], "session": [["sqlalchemy.orm.session.Session", 0.17745690152217894], ["sqlalchemy.orm.Session", 0.13262547934153887], ["Dict[str, Any]", 0.11942690997942877]], "subdag": [["dateutil.tz.tz.tzoffset", 0.3900515521370579], ["int", 0.21239514979728452], ["track.tests.factories.RecordFactory", 0.11158617449225512], ["Type[leasing.models.invoice.InvoiceSet]", 0.09640171535241064], ["datetime.datetime.timedelta", 0.088392846312614]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[2089, 4], [2133, 30]], "fn_var_ln": {"dag": [[2097, 8], [2097, 11]], "dag_id": [[2094, 8], [2094, 14]], "dagrun_1": [[2101, 8], [2101, 16]], "job_id": [[2110, 8], [2110, 30]], "session": [[2100, 8], [2100, 15]], "t_1": [[2098, 8], [2098, 11]], "task_id": [[2096, 8], [2096, 15]], "task_instance": [[2131, 8], [2131, 21]], "task_instance_1": [[2109, 8], [2109, 23]], "task_instances": [[2120, 8], [2120, 22]]}, "fn_var_occur": {"dag": [["dag", "DAG", "dag_id", "start_date", "DEFAULT_DATE", "max_active_runs"], ["t_1", "EmptyOperator", "task_id", "task_id", "dag", "dag"], ["dagrun_1", "dag", "create_dagrun", "run_type", "DagRunType", "BACKFILL_JOB", "state", "DagRunState", "RUNNING", "start_date", "DEFAULT_DATE", "execution_date", "DEFAULT_DATE"], ["dag", "clear", "start_date", "DEFAULT_DATE", "end_date", "DEFAULT_DATE", "datetime", "timedelta", "days", "session", "session"]], "dag_id": [["self", "_clean_up", "dag_id"], ["dag", "DAG", "dag_id", "start_date", "DEFAULT_DATE", "max_active_runs"], ["task_instances", "session", "query", "TI", "filter", "TI", "dag_id", "dag_id", "all"], ["self", "_clean_up", "dag_id"]], "dagrun_1": [["dagrun_1", "dag", "create_dagrun", "run_type", "DagRunType", "BACKFILL_JOB", "state", "DagRunState", "RUNNING", "start_date", "DEFAULT_DATE", "execution_date", "DEFAULT_DATE"], ["session", "merge", "dagrun_1"]], "job_id": [["task_instance_1", "job_id"]], "session": [["session", "settings", "Session"], ["session", "merge", "dagrun_1"], ["session", "merge", "task_instance_1"], ["session", "commit"], ["dag", "clear", "start_date", "DEFAULT_DATE", "end_date", "DEFAULT_DATE", "datetime", "timedelta", "days", "session", "session"], ["task_instances", "session", "query", "TI", "filter", "TI", "dag_id", "dag_id", "all"]], "t_1": [["t_1", "EmptyOperator", "task_id", "task_id", "dag", "dag"], ["task_instance_1", "TI", "t_1", "execution_date", "DEFAULT_DATE", "state", "ti_state_begin"]], "task_id": [["t_1", "EmptyOperator", "task_id", "task_id", "dag", "dag"]], "task_instance": [["task_instance", "airflow", "models", "TaskInstance", "task_instances"], ["task_instance", "state", "ti_state_end"]], "task_instance_1": [["task_instance_1", "TI", "t_1", "execution_date", "DEFAULT_DATE", "state", "ti_state_begin"], ["task_instance_1", "job_id"], ["session", "merge", "task_instance_1"]], "task_instances": [["task_instances", "session", "query", "TI", "filter", "TI", "dag_id", "dag_id", "all"], ["len", "task_instances"], ["task_instance", "airflow", "models", "TaskInstance", "task_instances"]]}, "name": "test_clear_dag", "params": {"self": "", "ti_state_begin": "TaskInstanceState | None", "ti_state_end": "TaskInstanceState | None"}, "params_descr": {"self": "", "ti_state_begin": "", "ti_state_end": ""}, "params_occur": {"self": [["self", "_clean_up", "dag_id"], ["self", "_clean_up", "dag_id"]], "ti_state_begin": [["task_instance_1", "TI", "t_1", "execution_date", "DEFAULT_DATE", "state", "ti_state_begin"]], "ti_state_end": [["task_instance", "state", "ti_state_end"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "ti_state_begin": [["mythril.laser.ethereum.state.constraints.Constraints", 0.28108176532096335], ["int", 0.0863673546966424]], "ti_state_end": [["pathlib.Path", 0.29631965813446204], ["List[List[str]]", 0.10752151247721456], ["List[List[Any]]", 0.10232266560598774], ["str", 0.10063742247604228], ["bytes", 0.09471498439290274]]}, "q_name": "TestDag.test_clear_dag", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "dag_id": "", "dagrun_1": "", "job_id": "", "session": "", "t_1": "", "task_id": "", "task_instance": "airflow.models.TaskInstance", "task_instance_1": "", "task_instances": ""}, "variables_p": {"dag": [["str", 0.4392705501310409], ["Tuple[int, int]", 0.1355055019551469], ["Dict[str, str]", 0.0890527430638975], ["List[Tuple[Any, Any]]", 0.08789894922571233], ["datetime.datetime", 0.07877067605606673]], "dag_id": [["str", 0.6091567233166291], ["int", 0.12023728731117407], ["Optional[str]", 0.08757130145215516]], "dagrun_1": [["int", 0.384150303453077], ["str", 0.21993130612786083], ["Union[Literal, Literal]", 0.12071250758959774], ["list", 0.09833679081147118], ["Dict[str, str]", 0.08689539075454344]], "job_id": [["str", 0.7967798002969344], ["List[str]", 0.10833238952583632], ["Dict[int, str]", 0.09488781017722933]], "session": [["sqlalchemy.orm.session.Session", 0.3076776317465939], ["SMSShell.models.session.Session", 0.19285737609463086], ["Optional[str]", 0.17197664086008863]], "t_1": [["str", 0.7059735615586203], ["raiden.utils.FeeAmount", 0.10642718883833502], ["Type[str]", 0.09472605087782218], ["datetime.timedelta", 0.0928731987252226]], "task_id": [["List[str]", 0.11508037862547912], ["Optional[str]", 0.08911309417666653], ["str", 0.0874584950473092], ["list", 0.08743710465945752]], "task_instance": [["apps.dummy.task.dummytask.DummyTask", 0.11136896157216465], ["annofabapi.dataclass.task.Task", 0.10965748260074559]], "task_instance_1": [["raiden.transfer.state.HopState", 0.17775594850539905], ["dict", 0.12575701859705107], ["Callable[[datetime.datetime], Awaitable[None]]", 0.09832520463305951], ["Optional[raiden.transfer.state.NettingChannelState]", 0.09315350004148612], ["int", 0.0895711556634876], ["Dict[str, Any]", 0.08917754149397365]], "task_instances": [["Dict[str, Union[Any, Any, str]]", 0.17849364231378334], ["str", 0.14333845092445807], ["int", 0.12161168480253629], ["o2a.converter.task.Task", 0.08730970633552326], ["List[List[int]]", 0.08068395789926852]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[2135, 4], [2142, 32]], "fn_var_ln": {"dag": [[2136, 8], [2136, 11]], "next_info": [[2141, 8], [2141, 17]]}, "fn_var_occur": {"dag": [["dag", "DAG", "start_date", "timezone", "datetime", "schedule"], ["next_info", "dag", "next_dagrun_info", "None"], ["next_info", "dag", "next_dagrun_info", "next_info", "data_interval"]], "next_info": [["next_info", "dag", "next_dagrun_info", "None"], ["next_info", "next_info", "logical_date", "timezone", "datetime"], ["next_info", "dag", "next_dagrun_info", "next_info", "data_interval"], ["next_info", "None"]]}, "name": "test_next_dagrun_info_once", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_next_dagrun_info_once", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "next_info": ""}, "variables_p": {"dag": [["str", 0.2722858685386084], ["Type[Dict[str, Any]]", 0.09379907281409167], ["int", 0.09039914005809103], ["Dict[str, Union[int, str]]", 0.08924506697791387], ["datetime.timedelta", 0.08822463406260951]], "next_info": [["dict", 0.3981571375805065], ["Dict[str, None]", 0.1848647562340317], ["Tuple[None, Tuple[None, None]]", 0.1261118161512411], ["circle_core.models.cc_info.CcInfo", 0.09811200739022659]]}}, {"docstring": {"func": "Tests that an attempt to schedule a task after the Dag's end_date", "long_descr": "does not succeed.", "ret": null}, "fn_lc": [[2144, 4], [2170, 59]], "fn_var_ln": {"dag": [[2154, 8], [2154, 11]], "dag_id": [[2153, 8], [2153, 14]], "dates": [[2158, 8], [2158, 13]], "delta": [[2149, 8], [2149, 13]], "end_date": [[2152, 8], [2152, 16]], "interval": [[2165, 16], [2165, 24]], "next_info": [[2161, 12], [2161, 21]], "runs": [[2150, 8], [2150, 12]], "start_date": [[2151, 8], [2151, 18]]}, "fn_var_occur": {"dag": [["dag", "DAG", "dag_id", "dag_id", "start_date", "start_date", "end_date", "end_date", "schedule", "delta"], ["dag", "add_task", "BaseOperator", "task_id", "owner"], ["next_info", "dag", "next_dagrun_info", "interval"], ["dag", "next_dagrun_info", "interval", "start", "None"]], "dag_id": [["dag", "DAG", "dag_id", "dag_id", "start_date", "start_date", "end_date", "end_date", "schedule", "delta"]], "dates": [["dates", "append", "None"], ["dates", "append", "interval", "start"], ["all", "date", "None", "date", "dates"], ["dates", "end_date"]], "delta": [["delta", "datetime", "timedelta", "hours"], ["end_date", "start_date", "runs", "delta"], ["dag", "DAG", "dag_id", "dag_id", "start_date", "start_date", "end_date", "end_date", "schedule", "delta"]], "end_date": [["end_date", "start_date", "runs", "delta"], ["dag", "DAG", "dag_id", "dag_id", "start_date", "start_date", "end_date", "end_date", "schedule", "delta"], ["dates", "end_date"]], "interval": [["interval", "None"], ["next_info", "dag", "next_dagrun_info", "interval"], ["interval", "next_info", "data_interval"], ["dates", "append", "interval", "start"], ["dag", "next_dagrun_info", "interval", "start", "None"]], "next_info": [["next_info", "dag", "next_dagrun_info", "interval"], ["next_info", "None"], ["interval", "next_info", "data_interval"]], "runs": [["end_date", "start_date", "runs", "delta"], ["range", "runs"]], "start_date": [["start_date", "DEFAULT_DATE"], ["end_date", "start_date", "runs", "delta"], ["dag", "DAG", "dag_id", "dag_id", "start_date", "start_date", "end_date", "end_date", "schedule", "delta"]]}, "name": "test_next_dagrun_info_start_end_dates", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_next_dagrun_info_start_end_dates", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "dag_id": "", "dates": "", "delta": "", "end_date": "", "interval": "", "next_info": "", "runs": "", "start_date": ""}, "variables_p": {"dag": [["str", 0.1601015139710721], ["List[str]", 0.12314423270982475], ["List[Optional[str]]", 0.12314423270982475], ["dict", 0.1169357417678567], ["Dict[str, Any]", 0.10201749861991401], ["List[int]", 0.096325086426237], ["datetime.datetime", 0.09444661096015099]], "dag_id": [["str", 0.19073251325586893], ["Type[prm.journals.models.moods.Mood]", 0.13524237747937914], ["dict", 0.1069806277506402], ["Optional[hpaction.models.UploadToken]", 0.10527396720277593], ["datetime.datetime", 0.10085559483127143], ["list", 0.09320997353490562], ["int", 0.09280163538418688], ["datetime.datetime.datetime", 0.08756592359188523]], "dates": [["datetime.datetime", 0.38403076811747777], ["datetime.datetime.datetime", 0.22852507693946184], ["str", 0.20511979799781743], ["datetime.date", 0.10093457384803961], ["Generator[int, None, None]", 0.08138978309720332]], "delta": [["datetime.timedelta", 0.8906250224044985]], "end_date": [["datetime.date", 0.2730500500251543], ["Type[leasing.models.vaVat]", 0.1253448311800439], ["str", 0.12365161868897404], ["datetime.date.time.date", 0.12088665668517631], ["datetime.datetime.datetime", 0.10085760331291548], ["Pattern[str]", 0.08797363646941397], ["datetime.datetime", 0.08548510595448959], ["datetime.datetime.timezone", 0.0827504976838324]], "interval": [["str", 0.20359959241909642], ["bool", 0.09742381146827363], ["Optional[float]", 0.09286445242937011], ["dict", 0.09019407397713526]], "next_info": [["Optional[Dict[str, Any]]", 0.12406494520541461]], "runs": [["int", 0.7313955856037115], ["List[None]", 0.16449687151566755]], "start_date": [["datetime.date", 0.708302356096927], ["datetime.datetime", 0.19316948207337994], ["datetime.datetime.date", 0.09852816182969307]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[2177, 8], [2195, 22]], "fn_var_ln": {"dag": [[2182, 12], [2182, 15]], "default_args": [[2178, 12], [2178, 24]], "op1": [[2190, 12], [2190, 15]], "op2": [[2191, 12], [2191, 15]], "op3": [[2192, 12], [2192, 15]]}, "fn_var_occur": {"dag": [["dag", "DAG", "dag_id", "schedule", "schedule", "start_date", "start_date", "catchup", "catchup", "default_args", "default_args"], ["op1", "EmptyOperator", "task_id", "dag", "dag"], ["op2", "EmptyOperator", "task_id", "dag", "dag"], ["op3", "EmptyOperator", "task_id", "dag", "dag"]], "default_args": [["default_args", "False"], ["dag", "DAG", "dag_id", "schedule", "schedule", "start_date", "start_date", "catchup", "catchup", "default_args", "default_args"]], "op1": [["op1", "EmptyOperator", "task_id", "dag", "dag"], ["op1", "op2", "op3"]], "op2": [["op2", "EmptyOperator", "task_id", "dag", "dag"], ["op1", "op2", "op3"]], "op3": [["op3", "EmptyOperator", "task_id", "dag", "dag"], ["op1", "op2", "op3"]]}, "name": "make_dag", "params": {"catchup": "", "dag_id": "", "schedule": "", "start_date": ""}, "params_descr": {"catchup": "", "dag_id": "", "schedule": "", "start_date": ""}, "params_occur": {"catchup": [["dag", "DAG", "dag_id", "schedule", "schedule", "start_date", "start_date", "catchup", "catchup", "default_args", "default_args"]], "dag_id": [["dag", "DAG", "dag_id", "schedule", "schedule", "start_date", "start_date", "catchup", "catchup", "default_args", "default_args"]], "schedule": [["dag", "DAG", "dag_id", "schedule", "schedule", "start_date", "start_date", "catchup", "catchup", "default_args", "default_args"]], "start_date": [["dag", "DAG", "dag_id", "schedule", "schedule", "start_date", "start_date", "catchup", "catchup", "default_args", "default_args"]]}, "params_p": {"args": [], "catchup": [["datetime.date", 0.2812525067957351], ["datetime.datetime", 0.18389233345394107], ["Optional[datetime.datetime]", 0.1326901363508617], ["str", 0.10080955674445778]], "dag_id": [["datetime.date", 0.2812525067957351], ["datetime.datetime", 0.18389233345394107], ["Optional[datetime.datetime]", 0.1326901363508617], ["str", 0.10080955674445778]], "kwargs": [], "schedule": [["datetime.date", 0.2812525067957351], ["datetime.datetime", 0.18389233345394107], ["Optional[datetime.datetime]", 0.1326901363508617], ["str", 0.10080955674445778]], "self": [], "start_date": [["datetime.date", 0.2812525067957351], ["datetime.datetime", 0.18389233345394107], ["Optional[datetime.datetime]", 0.1326901363508617], ["str", 0.10080955674445778]]}, "q_name": "TestDag.test_next_dagrun_info_catchup.<locals>.make_dag", "ret_exprs": ["return dag"], "ret_type": "", "ret_type_p": [["int", 0.30000000000000004], ["Callable", 0.2], ["models.Question", 0.1], ["str", 0.1]], "variables": {"dag": "", "default_args": "", "op1": "", "op2": "", "op3": ""}, "variables_p": {"dag": [["datetime.timedelta", 0.19932428041538983], ["datetime.datetime", 0.11668475575482015], ["str", 0.11668475575482015], ["int", 0.10282811619204886], ["quantumflow.states.State", 0.08943435613968707]], "default_args": [["str", 0.2730317942818467], ["datetime.timedelta", 0.10883594040957284], ["int", 0.10700077342138449], ["datetime.datetime", 0.09707022581097782], ["Dict[str, Any]", 0.0930707155971291], ["float", 0.08986173288384258]], "op1": [["int", 0.16886324871555197], ["Pattern[Any]", 0.13236694277229785], ["Dict[int, str]", 0.12938140431544173], ["Dict[str, str]", 0.11227083163650003], ["dict", 0.10889702857432967], ["Dict[int, Any]", 0.0971867781996767], ["Dict[int, Union[Any, Any]]", 0.0855035697783021], ["str", 0.08404156012122795], ["Dict[str, Dict[str, Any]]", 0.08148863588667198]], "op2": [["int", 0.16886324871555197], ["Pattern[Any]", 0.13236694277229785], ["Dict[int, str]", 0.12938140431544173], ["Dict[str, str]", 0.11227083163650003], ["dict", 0.10889702857432967], ["Dict[int, Any]", 0.0971867781996767], ["Dict[int, Union[Any, Any]]", 0.0855035697783021], ["str", 0.08404156012122795], ["Dict[str, Dict[str, Any]]", 0.08148863588667198]], "op3": [["int", 0.16886324871555197], ["Pattern[Any]", 0.13236694277229785], ["Dict[int, str]", 0.12938140431544173], ["Dict[str, str]", 0.11227083163650003], ["dict", 0.10889702857432967], ["Dict[int, Any]", 0.0971867781996767], ["Dict[int, Union[Any, Any]]", 0.0855035697783021], ["str", 0.08404156012122795], ["Dict[str, Dict[str, Any]]", 0.08148863588667198]]}}, {"docstring": {"func": "Test to check that a DAG with catchup = False only schedules beginning now, not back to the start date", "long_descr": null, "ret": null}, "fn_lc": [[2172, 4], [2237, 53]], "fn_var_ln": {"_": [[2235, 19], [2235, 20]], "dag1": [[2204, 8], [2204, 12]], "dag2": [[2215, 8], [2215, 12]], "dag3": [[2228, 8], [2228, 12]], "half_an_hour_ago": [[2201, 8], [2201, 24]], "next_date": [[2235, 8], [2235, 17]], "now": [[2197, 8], [2197, 11]], "six_hours_ago_to_the_hour": [[2198, 8], [2198, 33]], "two_hours_ago": [[2202, 8], [2202, 21]]}, "fn_var_occur": {"_": [["next_date", "_", "dag1", "next_dagrun_info", "None"], ["next_date", "_", "dag2", "next_dagrun_info", "None"], ["next_date", "_", "dag3", "next_dagrun_info", "None"]], "dag1": [["dag1", "make_dag", "dag_id", "schedule", "start_date", "six_hours_ago_to_the_hour", "catchup", "False"], ["next_date", "_", "dag1", "next_dagrun_info", "None"]], "dag2": [["dag2", "make_dag", "dag_id", "schedule", "start_date", "six_hours_ago_to_the_hour", "catchup", "False"], ["next_date", "_", "dag2", "next_dagrun_info", "None"]], "dag3": [["dag3", "make_dag", "dag_id", "schedule", "start_date", "six_hours_ago_to_the_hour", "catchup", "False"], ["next_date", "_", "dag3", "next_dagrun_info", "None"]], "half_an_hour_ago": [["half_an_hour_ago", "now", "datetime", "timedelta", "minutes"], ["next_date", "half_an_hour_ago"]], "next_date": [["next_date", "_", "dag1", "next_dagrun_info", "None"], ["next_date", "half_an_hour_ago"], ["next_date", "timezone", "utcnow"], ["next_date", "_", "dag2", "next_dagrun_info", "None"], ["next_date", "two_hours_ago"], ["next_date", "timezone", "utcnow"], ["next_date", "_", "dag3", "next_dagrun_info", "None"], ["next_date", "six_hours_ago_to_the_hour"]], "now": [["now", "timezone", "utcnow"], ["six_hours_ago_to_the_hour", "now", "datetime", "timedelta", "hours", "replace", "minute", "second", "microsecond"], ["half_an_hour_ago", "now", "datetime", "timedelta", "minutes"], ["two_hours_ago", "now", "datetime", "timedelta", "hours"]], "six_hours_ago_to_the_hour": [["six_hours_ago_to_the_hour", "now", "datetime", "timedelta", "hours", "replace", "minute", "second", "microsecond"], ["dag1", "make_dag", "dag_id", "schedule", "start_date", "six_hours_ago_to_the_hour", "catchup", "False"], ["dag2", "make_dag", "dag_id", "schedule", "start_date", "six_hours_ago_to_the_hour", "catchup", "False"], ["dag3", "make_dag", "dag_id", "schedule", "start_date", "six_hours_ago_to_the_hour", "catchup", "False"], ["next_date", "six_hours_ago_to_the_hour"]], "two_hours_ago": [["two_hours_ago", "now", "datetime", "timedelta", "hours"], ["next_date", "two_hours_ago"]]}, "name": "test_next_dagrun_info_catchup", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_next_dagrun_info_catchup", "ret_exprs": [], "ret_type": "", "variables": {"_": "", "dag1": "", "dag2": "", "dag3": "", "half_an_hour_ago": "", "next_date": "", "now": "", "six_hours_ago_to_the_hour": "", "two_hours_ago": ""}, "variables_p": {"_": [["dict", 0.20602170272133957], ["List[int]", 0.10408311152447088], ["datetime.datetime", 0.10145745914271274], ["str", 0.09254505720357001], ["byceps.services.user.transfer.models.User", 0.08321537649775577], ["Dict[str, Any]", 0.0742633515505657], ["Optional[cmk.gui.plugins.userdb.utils.UserConnector]", 0.07370908952338626]], "dag1": [["list", 0.20236812652631359], ["int", 0.1031743789902076], ["str", 0.10175350872663766], ["Type[leasing.models.invoice.InvoiceSet]", 0.09081259578748506], ["List[int]", 0.08432397385286867], ["track.tests.factories.RecordFactory", 0.08092251210818738]], "dag2": [["list", 0.20236812652631359], ["int", 0.1031743789902076], ["str", 0.10175350872663766], ["Type[leasing.models.invoice.InvoiceSet]", 0.09081259578748506], ["List[int]", 0.08432397385286867], ["track.tests.factories.RecordFactory", 0.08092251210818738]], "dag3": [["list", 0.20236812652631359], ["int", 0.1031743789902076], ["str", 0.10175350872663766], ["Type[leasing.models.invoice.InvoiceSet]", 0.09081259578748506], ["List[int]", 0.08432397385286867], ["track.tests.factories.RecordFactory", 0.08092251210818738]], "half_an_hour_ago": [["int", 0.44078098007130806], ["datetime.datetime.timedelta", 0.224411537442504], ["List[Tuple[Any, bool]]", 0.12440428916852675], ["list", 0.10687812833065323], ["datetime.datetime.time", 0.10352506498700786]], "next_date": [["str", 0.44197060586320336], ["datetime.datetime", 0.15165617690990563], ["dateutil.relativedelta.relativedelta", 0.11776898784998353], ["Pattern[str]", 0.11584680780216747], ["datetime.datetime.date", 0.0945976446648524], ["datetime.date", 0.07815977690988754]], "now": [["int", 0.9043544642604163], ["list", 0.09564553573958352]], "six_hours_ago_to_the_hour": [["int", 0.18825922903850628], ["datetime.timedelta", 0.17207929621068785], ["Dict[int, datetime.datetime]", 0.12296471856762362], ["datetime.datetime.datetime", 0.11704057275696186], ["datetime", 0.10829552166460943], ["str", 0.09696291850858714], ["float", 0.08543346485808008]], "two_hours_ago": [["int", 0.44078098007130806], ["datetime.datetime.timedelta", 0.224411537442504], ["List[Tuple[Any, bool]]", 0.12440428916852675], ["list", 0.10687812833065323], ["datetime.datetime.time", 0.10352506498700786]]}}, {"docstring": {"func": "Test that the dag file processor does not create multiple dagruns", "long_descr": "if a dag is scheduled with 'timedelta' and catchup=False", "ret": null}, "fn_lc": [[2240, 4], [2257, 84]], "fn_var_ln": {"dag": [[2245, 8], [2245, 11]], "next_info": [[2256, 8], [2256, 17]]}, "fn_var_occur": {"dag": [["dag", "DAG", "start_date", "timezone", "datetime", "schedule", "timedelta", "days", "catchup", "False"], ["next_info", "dag", "next_dagrun_info", "None"], ["next_info", "dag", "next_dagrun_info", "next_info", "data_interval"]], "next_info": [["next_info", "dag", "next_dagrun_info", "None"], ["next_info", "next_info", "logical_date", "timezone", "datetime"], ["next_info", "dag", "next_dagrun_info", "next_info", "data_interval"], ["next_info", "next_info", "logical_date", "timezone", "datetime"]]}, "name": "test_next_dagrun_info_timedelta_schedule_and_catchup_false", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_next_dagrun_info_timedelta_schedule_and_catchup_false", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "next_info": ""}, "variables_p": {"dag": [["Type[hypha.apply.projects.models.Report]", 0.17455299910050848], ["datetime.datetime", 0.14048554770825547], ["datetime.datetime.datetime", 0.1304794446734445], ["datetime.date", 0.10063355111342877], ["dict", 0.08966477375002986], ["datetime.timedelta", 0.07936828877157659]], "next_info": [["dict", 0.3981571375805065], ["Dict[str, None]", 0.1848647562340317], ["Tuple[None, Tuple[None, None]]", 0.1261118161512411], ["circle_core.models.cc_info.CcInfo", 0.09811200739022659]]}}, {"docstring": {"func": "Test that the dag file processor creates multiple dagruns", "long_descr": "if a dag is scheduled with 'timedelta' and catchup=True", "ret": null}, "fn_lc": [[2260, 4], [2283, 84]], "fn_var_ln": {"dag": [[2265, 8], [2265, 11]], "next_info": [[2282, 8], [2282, 17]]}, "fn_var_occur": {"dag": [["dag", "DAG", "start_date", "timezone", "datetime", "schedule", "timedelta", "days", "catchup", "True"], ["next_info", "dag", "next_dagrun_info", "None"], ["next_info", "dag", "next_dagrun_info", "next_info", "data_interval"], ["next_info", "dag", "next_dagrun_info", "next_info", "data_interval"], ["next_info", "dag", "next_dagrun_info", "next_info", "data_interval"]], "next_info": [["next_info", "dag", "next_dagrun_info", "None"], ["next_info", "next_info", "logical_date", "timezone", "datetime"], ["next_info", "dag", "next_dagrun_info", "next_info", "data_interval"], ["next_info", "next_info", "logical_date", "timezone", "datetime"], ["next_info", "dag", "next_dagrun_info", "next_info", "data_interval"], ["next_info", "next_info", "logical_date", "timezone", "datetime"], ["next_info", "dag", "next_dagrun_info", "next_info", "data_interval"], ["next_info", "next_info", "logical_date", "timezone", "datetime"]]}, "name": "test_next_dagrun_info_timedelta_schedule_and_catchup_true", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_next_dagrun_info_timedelta_schedule_and_catchup_true", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "next_info": ""}, "variables_p": {"dag": [["datetime.timedelta", 0.1804883538195286], ["int", 0.17385441484915687], ["datetime.datetime", 0.1412206030596489], ["datetime.datetime.datetime", 0.11278567321796762], ["str", 0.08850226008614749]], "next_info": [["dict", 0.3981571375805065], ["Dict[str, None]", 0.1848647562340317], ["Tuple[None, Tuple[None, None]]", 0.1261118161512411], ["circle_core.models.cc_info.CcInfo", 0.09811200739022659]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[2299, 8], [2306, 13]], "fn_var_ln": {"record": [[2301, 12], [2301, 18]]}, "fn_var_occur": {"record": [["record", "records"], ["record", "exc_info", "None"], ["record", "getMessage", "data_interval"]]}, "name": "_check_logs", "params": {"data_interval": "airflow.timetables.base.DataInterval", "records": "builtins.list[logging.LogRecord]"}, "params_descr": {"data_interval": "", "records": ""}, "params_occur": {"data_interval": [["record", "getMessage", "data_interval"]], "records": [["len", "records"], ["record", "records"]]}, "params_p": {"args": [], "data_interval": [["str", 0.23819357697239024], ["Callable[[Any], Awaitable[None]]", 0.1343972213846785], ["List[str]", 0.09508489363104264], ["Optional[int]", 0.09456871845698635], ["List[dict]", 0.08195610343776664]], "kwargs": [], "records": [["int", 0.32475715536559135], ["str", 0.2256564891075849], ["Optional[Dict]", 0.08977305501735595], ["bool", 0.07497707138594294]], "self": []}, "q_name": "TestDag.test_next_dagrun_info_timetable_exception.<locals>._check_logs", "ret_exprs": [], "ret_type": "None", "variables": {"record": ""}, "variables_p": {"record": [["chalice.config.DeployedResources", 0.496821522026975], ["str", 0.130897192604034], ["int", 0.09939846590140332]]}}, {"docstring": {"func": "Test the DAG does not crash the scheduler if the timetable raises an exception.", "long_descr": null, "ret": null}, "fn_lc": [[2285, 4], [2317, 50]], "fn_var_ln": {"dag": [[2292, 8], [2292, 11]], "data_interval": [[2313, 8], [2313, 21]], "next_info": [[2315, 12], [2315, 21]]}, "fn_var_occur": {"dag": [["next_info", "dag", "next_dagrun_info", "None"], ["next_info", "dag", "next_dagrun_info", "data_interval"]], "data_interval": [["_check_logs", "caplog", "records", "data_interval", "None"], ["data_interval", "DataInterval", "timezone", "datetime", "timezone", "datetime"], ["next_info", "dag", "next_dagrun_info", "data_interval"], ["_check_logs", "caplog", "records", "data_interval"]], "next_info": [["next_info", "dag", "next_dagrun_info", "None"], ["next_info", "None"], ["next_info", "dag", "next_dagrun_info", "data_interval"], ["next_info", "None"]]}, "name": "test_next_dagrun_info_timetable_exception", "params": {"caplog": "", "self": ""}, "params_descr": {"caplog": "", "self": ""}, "params_occur": {"caplog": [["caplog", "at_level", "level", "logging", "ERROR"], ["_check_logs", "caplog", "records", "data_interval", "None"], ["caplog", "clear"], ["caplog", "at_level", "level", "logging", "ERROR"], ["_check_logs", "caplog", "records", "data_interval"]], "self": []}, "params_p": {"args": [], "caplog": [["pathlib.Path", 0.27702952481015763]], "kwargs": [], "self": []}, "q_name": "TestDag.test_next_dagrun_info_timetable_exception", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "data_interval": "", "next_info": ""}, "variables_p": {"dag": [["qutebrowser.config.configtypes.BaseType", 0.30553247283868723], ["dss.config.Replica", 0.11578185379170289], ["Optional[dict]", 0.10394388865938257], ["Mapping", 0.09471666561126472], ["Dict[str, Any]", 0.08733096424888454]], "data_interval": [["Dict[str, Any]", 0.10466995268466864], ["Dict[str, Union[int, str]]", 0.1039798907169104], ["Dict[str, str]", 0.09635157877588628], ["str", 0.0942147246282459], ["Dict[str, Tuple[int, int, int]]", 0.0899934891501205]], "next_info": [["dict", 0.3884508407848183], ["Dict[str, None]", 0.19066702946093858], ["circle_core.models.cc_info.CcInfo", 0.10272325118615364], ["Tuple[None, Tuple[None, None]]", 0.10221828355357689]]}}, {"docstring": {"func": "Test if the schedule_interval will be auto aligned with the start_date", "long_descr": "such that if the start_date coincides with the schedule the first\nexecution_date will be start_date, otherwise it will be start_date +\ninterval.", "ret": null}, "fn_lc": [[2319, 4], [2344, 92]], "fn_var_ln": {"dag": [[2336, 8], [2336, 11]], "next_info": [[2343, 8], [2343, 17]]}, "fn_var_occur": {"dag": [["dag", "DAG", "dag_id", "start_date", "timezone", "datetime", "schedule"], ["EmptyOperator", "task_id", "dag", "dag", "owner"], ["next_info", "dag", "next_dagrun_info", "None"], ["dag", "DAG", "dag_id", "start_date", "timezone", "datetime", "schedule"], ["EmptyOperator", "task_id", "dag", "dag", "owner"], ["next_info", "dag", "next_dagrun_info", "None"]], "next_info": [["next_info", "dag", "next_dagrun_info", "None"], ["next_info", "next_info", "logical_date", "timezone", "datetime"], ["next_info", "dag", "next_dagrun_info", "None"], ["next_info", "next_info", "logical_date", "timezone", "datetime"]]}, "name": "test_next_dagrun_after_auto_align", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_next_dagrun_after_auto_align", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "next_info": ""}, "variables_p": {"dag": [["int", 0.1961177124168933], ["List[str]", 0.1792657275555419], ["dict", 0.10454881885519487], ["Optional[Match[str]]", 0.10439964193481702], ["str", 0.09718140256522258], ["Dict[Any, str]", 0.09393331078665927]], "next_info": [["dict", 0.3981571375805065], ["Dict[str, None]", 0.1848647562340317], ["Tuple[None, Tuple[None, None]]", 0.1261118161512411], ["circle_core.models.cc_info.CcInfo", 0.09811200739022659]]}}, {"docstring": {"func": "Create a subdag.", "long_descr": null, "ret": null}, "fn_lc": [[2352, 8], [2365, 29]], "fn_var_ln": {"dag_subdag": [[2356, 12], [2356, 22]]}, "fn_var_occur": {"dag_subdag": [["dag_subdag", "DAG", "dag_id", "parent_dag_name", "child_dag_name", "schedule", "default_args", "args"], ["EmptyOperator", "task_id", "child_dag_name", "i", "dag", "dag_subdag"]]}, "name": "subdag", "params": {"args": "", "child_dag_name": "", "parent_dag_name": ""}, "params_descr": {"args": "", "child_dag_name": "", "parent_dag_name": ""}, "params_occur": {"args": [["dag_subdag", "DAG", "dag_id", "parent_dag_name", "child_dag_name", "schedule", "default_args", "args"]], "child_dag_name": [["dag_subdag", "DAG", "dag_id", "parent_dag_name", "child_dag_name", "schedule", "default_args", "args"], ["EmptyOperator", "task_id", "child_dag_name", "i", "dag", "dag_subdag"]], "parent_dag_name": [["dag_subdag", "DAG", "dag_id", "parent_dag_name", "child_dag_name", "schedule", "default_args", "args"]]}, "params_p": {"args": [], "child_dag_name": [["OrderedDict", 0.3138389127763604], ["str", 0.2919590451212143], ["dict", 0.11043151570861012], ["sqlalchemy.sql.schema.Table", 0.09321177865512553], ["Callable[..., Coroutine[Any, Any, Any]]", 0.0912338119684569]], "kwargs": [], "parent_dag_name": [["str", 0.5882625847860923], ["Optional[str]", 0.10730542558755929], ["int", 0.0964281072276874], ["topicdb.core.models.basename.BaseName", 0.0964281072276874]], "self": []}, "q_name": "TestDag.test_next_dagrun_after_not_for_subdags.<locals>.subdag", "ret_exprs": ["return dag_subdag"], "ret_type": "", "ret_type_p": [["int", 0.30000000000000004], ["Callable", 0.2], ["models.Question", 0.1], ["str", 0.1]], "variables": {"dag_subdag": ""}, "variables_p": {"dag_subdag": [["str", 0.21958137018648816], ["Optional[Callable]", 0.13364389806416022], ["Optional[Dict[str, Any]]", 0.0892005228751097], ["list", 0.08526241653061244]]}}, {"docstring": {"func": "Test the subdags are never marked to have dagruns created, as they are", "long_descr": "handled by the SubDagOperator, not the scheduler", "ret": null}, "fn_lc": [[2346, 4], [2386, 101]], "fn_var_ln": {"next_parent_info": [[2382, 8], [2382, 24]], "next_subdag_info": [[2385, 8], [2385, 24]], "parent_dag": [[2380, 8], [2380, 25]], "section_1": [[2373, 12], [2373, 21]], "subdag": [[2378, 8], [2378, 14]]}, "fn_var_occur": {"next_parent_info": [["next_parent_info", "dag", "next_dagrun_info", "None"], ["next_parent_info", "logical_date", "timezone", "datetime"]], "next_subdag_info": [["next_subdag_info", "subdag", "next_dagrun_info", "None"], ["next_subdag_info", "None"]], "parent_dag": [["subdag", "parent_dag", "dag"]], "section_1": [["section_1", "SubDagOperator", "task_id", "subdag", "subdag", "dag", "dag_id", "dag", "start_date"], ["subdag", "section_1", "subdag"]], "subdag": [["section_1", "SubDagOperator", "task_id", "subdag", "subdag", "dag", "dag_id", "dag", "start_date"], ["subdag", "section_1", "subdag"], ["subdag", "parent_dag", "dag"], ["next_subdag_info", "subdag", "next_dagrun_info", "None"]]}, "name": "test_next_dagrun_after_not_for_subdags", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_next_dagrun_after_not_for_subdags", "ret_exprs": [], "ret_type": "", "variables": {"next_parent_info": "", "next_subdag_info": "", "parent_dag": "", "section_1": "", "subdag": ""}, "variables_p": {"next_parent_info": [["int", 0.4167180686010469], ["str", 0.20121796054428565], ["Dict[str, int]", 0.11942498193562726]], "next_subdag_info": [["Type[Dict[str, Any]]", 0.12959663753315878], ["Type[str]", 0.1088016651118735], ["Tuple[None, Tuple[None, None]]", 0.1068216494176386], ["requests.models.Response", 0.10594753274202401], ["Optional[Tuple[str, str]]", 0.08923009781318748], ["Dict[str, str]", 0.08843527812541248]], "parent_dag": [["io.TextIOWrapper", 0.9999999998140968], ["bool", 2.967193962743239e-11], ["str", 2.109323892093714e-11], ["List[str]", 2.109323892093714e-11], ["Set[str]", 2.109323892093714e-11], ["list", 2.109323892093714e-11], ["Tuple[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any]", 2.109323892093714e-11]], "section_1": [["grpy.core.models.Grouping", 0.17526877924398304], ["tuple", 0.10471302903027102], ["geode.models.common.Address", 0.10184998467961019], ["float", 0.1018468321320108], ["Dict[str, str]", 0.09192591912997464], ["dict", 0.09100842822179707]], "subdag": [["grpy.core.models.Grouping", 0.17526877924398304], ["tuple", 0.10471302903027102], ["geode.models.common.Address", 0.10184998467961019], ["float", 0.1018468321320108], ["Dict[str, str]", 0.09192591912997464], ["dict", 0.09100842822179707]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[2388, 4], [2404, 56]], "fn_var_ln": {"access_control": [[2403, 12], [2403, 30]], "dag": [[2399, 12], [2399, 15]], "outdated_permissions": [[2389, 8], [2389, 28]], "updated_permissions": [[2393, 8], [2393, 27]]}, "fn_var_occur": {"access_control": [["dag", "DAG", "dag_id", "access_control", "outdated_permissions"], ["dag", "access_control", "updated_permissions"], ["dag", "access_control", "outdated_permissions"], ["dag", "access_control", "updated_permissions"]], "dag": [["dag", "DAG", "dag_id", "access_control", "outdated_permissions"], ["dag", "access_control", "updated_permissions"], ["dag", "access_control", "outdated_permissions"], ["dag", "access_control", "updated_permissions"]], "outdated_permissions": [["outdated_permissions", "permissions", "ACTION_CAN_READ", "permissions", "ACTION_CAN_EDIT", "permissions", "DEPRECATED_ACTION_CAN_DAG_READ", "permissions", "DEPRECATED_ACTION_CAN_DAG_EDIT"], ["dag", "DAG", "dag_id", "access_control", "outdated_permissions"], ["dag", "access_control", "outdated_permissions"]], "updated_permissions": [["updated_permissions", "permissions", "ACTION_CAN_READ", "permissions", "ACTION_CAN_EDIT", "permissions", "ACTION_CAN_READ", "permissions", "ACTION_CAN_EDIT"], ["dag", "access_control", "updated_permissions"], ["dag", "access_control", "updated_permissions"]]}, "name": "test_replace_outdated_access_control_actions", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_replace_outdated_access_control_actions", "ret_exprs": [], "ret_type": "", "variables": {"access_control": "", "dag": "", "outdated_permissions": "", "updated_permissions": ""}, "variables_p": {"access_control": [["str", 0.507252493781838], ["int", 0.223268690356487], ["List[int]", 0.09317036083271277], ["Pattern[Any]", 0.08306139212606745]], "dag": [["int", 0.6166552173645116], ["str", 0.16109155567178168], ["Dict[str, Union[Any, Any, Any, Any]]", 0.08132181989746093], ["Tuple[str, str, str, str, str, str, str, str, str, str]", 0.07182746046967087]], "outdated_permissions": [["Dict[str, str]", 0.15195288235836654], ["str", 0.1275243356264366], ["Dict[str, Any]", 0.11492570920045889], ["ddionrails.workspace.models.basket_variable.BasketVariable", 0.08137832150747437], ["cmk.base.discovery.ServiceFilters", 0.07572494570302499]], "updated_permissions": [["Dict[str, Union[Any, Any, Any]]", 0.2750784739144774], ["Dict[str, str]", 0.1891288497923283], ["str", 0.14268947256284306], ["Dict[str, Any]", 0.1114947757295956]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[2406, 4], [2432, 9]], "fn_var_ln": {"dag": [[2426, 8], [2426, 11]]}, "fn_var_occur": {"dag": [["dag", "models", "DAG", "schedule", "None", "params", "Param", "type"], ["dag", "create_dagrun", "run_id", "state", "State", "RUNNING", "execution_date", "TEST_DATE"], ["dag", "models", "DAG", "schedule", "None", "params", "Param", "type"], ["dag", "create_dagrun", "run_id", "state", "State", "RUNNING", "execution_date", "TEST_DATE", "conf", "None"], ["dag", "models", "DAG", "schedule", "None", "params", "Param", "type"], ["dag", "create_dagrun", "run_id", "state", "State", "RUNNING", "execution_date", "TEST_DATE", "conf"]]}, "name": "test_validate_params_on_trigger_dag", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_validate_params_on_trigger_dag", "ret_exprs": [], "ret_type": "", "variables": {"dag": ""}, "variables_p": {"dag": [["salon.models.Stylist", 0.3091606561142335], ["app.models.Stage", 0.14237096064456425], ["tartare.core.models.Contributor", 0.11610151841646323], ["track.models.Record", 0.10616436501985164], ["zerver.models.Message", 0.08574787379394962], ["grpy.core.models.Grouping", 0.08165896724704431], ["lms.lmsdb.models.Solution", 0.08088875513800496], ["track.models.Category", 0.07790690362588855]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[2434, 4], [2445, 9]], "fn_var_ln": {"dag": [[2438, 8], [2438, 11]], "dag_dates": [[2439, 8], [2439, 17]], "delta": [[2436, 8], [2436, 13]], "start_date": [[2435, 8], [2435, 18]]}, "fn_var_occur": {"dag": [["dag", "models", "DAG", "schedule", "delta"], ["dag_dates", "dag", "date_range", "start_date", "start_date", "num"]], "dag_dates": [["dag_dates", "dag", "date_range", "start_date", "start_date", "num"], ["dag_dates", "start_date", "start_date", "delta", "start_date", "delta"]], "delta": [["delta", "timedelta", "days"], ["dag", "models", "DAG", "schedule", "delta"], ["dag_dates", "start_date", "start_date", "delta", "start_date", "delta"]], "start_date": [["start_date", "TEST_DATE"], ["dag_dates", "dag", "date_range", "start_date", "start_date", "num"], ["dag_dates", "start_date", "start_date", "delta", "start_date", "delta"]]}, "name": "test_return_date_range_with_num_method", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_return_date_range_with_num_method", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "dag_dates": "", "delta": "", "start_date": ""}, "variables_p": {"dag": [["salon.models.Stylist", 0.4478102345313484], ["salon.models.StylistService", 0.11903817097967452], ["tweeter.models.Tweet", 0.09640989742542307], ["magic.models.deck.Deck", 0.09392794060184352], ["zilencer.models.RemoteZulipServer", 0.06447032428968749]], "dag_dates": [["datetime.date", 0.5032928600964268], ["datetime.date.time.date", 0.21029760226165464], ["Type[leasing.models.vaVat]", 0.11746300928201765], ["datetime.datetime.datetime", 0.08654203819991095], ["datetime.datetime", 0.08240449015998998]], "delta": [["grpy.core.models.Grouping", 0.3185740925726514], ["jinete.models.services.Service", 0.16875556013592696], ["salon.models.Stylist", 0.11974625302593984], ["tweeter.models.Tweet", 0.11153876853037875], ["finances.models.Discount", 0.09137748294536614]], "start_date": [["datetime.date", 0.5857815872091777], ["datetime.timedelta", 0.19660889696755238], ["Type[leasing.models.vaVat]", 0.12740454788889766], ["datetime.date.time.date", 0.0902049679343724]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[2447, 4], [2474, 86]], "fn_var_ln": {"dag": [[2463, 8], [2463, 11]], "expected_owners": [[2458, 8], [2458, 23]], "orm_dag_owners": [[2469, 8], [2469, 22]], "session": [[2455, 8], [2455, 15]]}, "fn_var_occur": {"dag": [["dag", "DAG", "start_date", "DEFAULT_DATE", "owner_links"], ["dag", "owner_links"], ["dag", "sync_to_db", "session", "session"], ["dag", "DAG", "start_date", "DEFAULT_DATE"], ["dag", "sync_to_db", "session", "session"]], "expected_owners": [["orm_dag_owners", "expected_owners"]], "orm_dag_owners": [["orm_dag_owners", "DagOwnerAttributes", "get_all", "session"], ["orm_dag_owners", "expected_owners"], ["orm_dag_owners", "session", "query", "DagOwnerAttributes", "all"]], "session": [["session", "settings", "Session"], ["dag", "sync_to_db", "session", "session"], ["orm_dag_owners", "DagOwnerAttributes", "get_all", "session"], ["dag", "sync_to_db", "session", "session"], ["orm_dag_owners", "session", "query", "DagOwnerAttributes", "all"]]}, "name": "test_dag_owner_links", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_dag_owner_links", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "expected_owners": "", "orm_dag_owners": "", "session": ""}, "variables_p": {"dag": [["str", 0.601125358369063], ["Union[Literal, Literal]", 0.10391545831652048], ["Dict[int, str]", 0.10242311448933046], ["int", 0.09539650418579305]], "expected_owners": [["float", 0.20784242442899034], ["int", 0.1873522063859107], ["list", 0.11283977826144238], ["str", 0.09167425804528913], ["MutableMapping[str, Any]", 0.09165102222853432], ["Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]", 0.08955145544906432]], "orm_dag_owners": [["str", 0.3949383235564216], ["Dict[str, str]", 0.16898417526680354], ["Dict[str, bool]", 0.1263476995119758], ["Dict[str, Union[int, str]]", 0.08525324285858654], ["List[str]", 0.08413642914886772]], "session": [["sqlalchemy.orm.session.Session", 0.1306958319995383], ["sqlalchemy.orm.Session", 0.08782067930794474]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[2489, 4], [2492, 20]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_schedule_dag_param", "params": {"kwargs": "", "self": ""}, "params_descr": {"kwargs": "", "self": ""}, "params_occur": {"kwargs": [["DAG", "dag_id", "kwargs"]], "self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_schedule_dag_param", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[2494, 4], [2506, 13]], "fn_var_ln": {"dag": [[2504, 12], [2504, 15]]}, "fn_var_occur": {"dag": [["dag", "DAG", "start_date", "DEFAULT_DATE", "schedule_interval", "max_active_runs"], ["isinstance", "dag", "timetable", "ContinuousTimetable"], ["dag", "max_active_runs"], ["dag", "DAG", "start_date", "DEFAULT_DATE", "schedule_interval", "max_active_runs"], ["isinstance", "dag", "timetable", "ContinuousTimetable"], ["dag", "max_active_runs"], ["dag", "DAG", "start_date", "DEFAULT_DATE", "schedule_interval", "max_active_runs"]]}, "name": "test_continuous_schedule_interval_limits_max_active_runs", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDag.test_continuous_schedule_interval_limits_max_active_runs", "ret_exprs": [], "ret_type": "", "variables": {"dag": ""}, "variables_p": {"dag": [["str", 0.5281378928462246], ["datetime.datetime", 0.1115555857810227], ["dateutil.tz.tz.tzutc", 0.1006244824633665], ["datetime.datetime.date", 0.08735834827486623], ["datetime.datetime.datetime", 0.08496534235965382]]}}], "name": "TestDag", "q_name": "TestDag", "variables": {}, "variables_p": {}}, {"cls_lc": [[2509, 0], [2766, 68]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[2510, 4], [2513, 23]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "_clean", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagModel._clean", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[2515, 4], [2516, 21]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "setup_method", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "_clean"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagModel.setup_method", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[2518, 4], [2519, 21]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "teardown_method", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "_clean"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagModel.teardown_method", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[2521, 4], [2542, 23]], "fn_var_ln": {"_": [[2537, 15], [2537, 16]], "dag": [[2522, 8], [2522, 11]], "dag_models": [[2538, 8], [2538, 18]], "orm_dag": [[2526, 8], [2526, 15]], "query": [[2537, 8], [2537, 13]], "session": [[2525, 8], [2525, 15]]}, "fn_var_occur": {"_": [["query", "_", "DagModel", "dags_needing_dagruns", "session"]], "dag": [["dag", "DAG", "dag_id", "start_date", "timezone", "datetime"], ["EmptyOperator", "task_id", "dag", "dag", "owner"], ["orm_dag", "DagModel", "dag_id", "dag", "dag_id", "max_active_tasks", "has_task_concurrency_limits", "False", "next_dagrun", "dag", "start_date", "next_dagrun_create_after", "timezone", "datetime", "is_active", "True"]], "dag_models": [["dag_models", "query", "all"]], "orm_dag": [["orm_dag", "DagModel", "dag_id", "dag", "dag_id", "max_active_tasks", "has_task_concurrency_limits", "False", "next_dagrun", "dag", "start_date", "next_dagrun_create_after", "timezone", "datetime", "is_active", "True"], ["session", "add", "orm_dag"]], "query": [["query", "_", "DagModel", "dags_needing_dagruns", "session"], ["dag_models", "query", "all"]], "session": [["session", "settings", "Session"], ["session", "add", "orm_dag"], ["session", "flush"], ["query", "_", "DagModel", "dags_needing_dagruns", "session"], ["session", "rollback"], ["session", "close"]]}, "name": "test_dags_needing_dagruns_not_too_early", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagModel.test_dags_needing_dagruns_not_too_early", "ret_exprs": [], "ret_type": "", "variables": {"_": "", "dag": "", "dag_models": "", "orm_dag": "", "query": "", "session": ""}, "variables_p": {"_": [["int", 0.19999999999999998], ["str", 0.19999999999999998], ["List[str]", 0.09999999999999999], ["Union[bytes, int]", 0.09999999999999999], ["bool", 0.09999999999999999], ["Tuple[int, int]", 0.09999999999999999]], "dag": [["str", 0.6771301409486947], ["int", 0.1411959258717477]], "dag_models": [["set", 0.6207795314111749]], "orm_dag": [["int", 0.2655351294638387], ["datetime.datetime", 0.20563028070019884], ["decksite.data.models.person.Person", 0.12101148316082153], ["str", 0.10281514035009942], ["bool", 0.09899193247483276], ["tests.factories.model.TaskPayment", 0.0978797832715411]], "query": [["list", 0.47716860339378075], ["str", 0.21423726560810585], ["tuple", 0.10061681671502502], ["List[str]", 0.09644174736392132]], "session": [["sqlalchemy.orm.session.Session", 0.09138348282132411]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[2544, 4], [2584, 40]], "fn_var_ln": {"_": [[2582, 15], [2582, 16]], "dag_model": [[2561, 8], [2561, 17]], "dag_models": [[2583, 8], [2583, 18]], "dataset": [[2545, 8], [2545, 15]], "dataset_model": [[2562, 8], [2562, 21]], "query": [[2582, 8], [2582, 13]]}, "fn_var_occur": {"_": [["query", "_", "DagModel", "dags_needing_dagruns", "session"], ["query", "_", "DagModel", "dags_needing_dagruns", "session"], ["query", "_", "DagModel", "dags_needing_dagruns", "session"], ["query", "_", "DagModel", "dags_needing_dagruns", "session"]], "dag_model": [["dag_model", "session", "query", "DagModel", "filter", "DagModel", "dag_id", "dag", "dag_id", "one"], ["dataset_model", "airflow", "models", "dataset", "DatasetModel", "dag_model", "schedule_datasets"], ["session", "add", "DatasetDagRunQueue", "dataset_id", "dataset_model", "id", "target_dag_id", "dag_model", "dag_id"], ["dag_models", "dag_model"], ["dag_maker", "dag_model", "max_active_runs"], ["dag_models", "dag_model"]], "dag_models": [["dag_models", "query", "all"], ["dag_models", "query", "all"], ["dag_models", "dag_model"], ["dag_models", "query", "all"], ["dag_models", "query", "all"], ["dag_models", "dag_model"]], "dataset": [["dataset", "Dataset", "uri"], ["dag_maker", "session", "session", "dag_id", "max_active_runs", "schedule", "dataset", "start_date", "pendulum", "now", "add", "days", "dag"], ["dataset_model", "airflow", "models", "dataset", "DatasetModel", "dag_model", "schedule_datasets"]], "dataset_model": [["dataset_model", "airflow", "models", "dataset", "DatasetModel", "dag_model", "schedule_datasets"], ["session", "add", "DatasetDagRunQueue", "dataset_id", "dataset_model", "id", "target_dag_id", "dag_model", "dag_id"]], "query": [["query", "_", "DagModel", "dags_needing_dagruns", "session"], ["dag_models", "query", "all"], ["dag_model", "session", "query", "DagModel", "filter", "DagModel", "dag_id", "dag", "dag_id", "one"], ["query", "_", "DagModel", "dags_needing_dagruns", "session"], ["dag_models", "query", "all"], ["query", "_", "DagModel", "dags_needing_dagruns", "session"], ["dag_models", "query", "all"], ["query", "_", "DagModel", "dags_needing_dagruns", "session"], ["dag_models", "query", "all"]]}, "name": "test_dags_needing_dagruns_datasets", "params": {"dag_maker": "", "self": "", "session": ""}, "params_descr": {"dag_maker": "", "self": "", "session": ""}, "params_occur": {"dag_maker": [["dag_maker", "session", "session", "dag_id", "max_active_runs", "schedule", "dataset", "start_date", "pendulum", "now", "add", "days", "dag"], ["dag_maker", "create_dagrun", "run_type", "DagRunType", "DATASET_TRIGGERED", "state", "DagRunState", "QUEUED", "execution_date", "pendulum", "now"], ["dag_maker", "dag_model", "max_active_runs"]], "self": [], "session": [["dag_maker", "session", "session", "dag_id", "max_active_runs", "schedule", "dataset", "start_date", "pendulum", "now", "add", "days", "dag"], ["query", "_", "DagModel", "dags_needing_dagruns", "session"], ["dag_model", "session", "query", "DagModel", "filter", "DagModel", "dag_id", "dag", "dag_id", "one"], ["session", "add", "DatasetDagRunQueue", "dataset_id", "dataset_model", "id", "target_dag_id", "dag_model", "dag_id"], ["session", "flush"], ["query", "_", "DagModel", "dags_needing_dagruns", "session"], ["query", "_", "DagModel", "dags_needing_dagruns", "session"], ["session", "flush"], ["query", "_", "DagModel", "dags_needing_dagruns", "session"]]}, "params_p": {"args": [], "dag_maker": [["sqlalchemy.orm.session.Session", 0.10514849157378407], ["float", 0.10378621944265846], ["server.models.bike.Bike", 0.10378621944265846], ["server.models.Rental", 0.10378621944265846], ["raiden.utils.Dict", 0.09696544805097637], ["lms.lmsdb.models.User", 0.09394925517478443]], "kwargs": [], "self": [], "session": [["sqlalchemy.orm.Session", 0.19618604867130807], ["sqlalchemy.orm.session.Session", 0.12174721520678408], ["float", 0.09642563124465957], ["server.models.bike.Bike", 0.09642563124465957], ["server.models.Rental", 0.09642563124465957], ["raiden_libs.types.ChannelIdentifier", 0.09334966594737784]]}, "q_name": "TestDagModel.test_dags_needing_dagruns_datasets", "ret_exprs": [], "ret_type": "", "variables": {"_": "", "dag_model": "", "dag_models": "", "dataset": "", "dataset_model": "airflow.models.dataset.DatasetModel", "query": ""}, "variables_p": {"_": [["int", 0.29248470087204925], ["list", 0.17516167628456789], ["datetime.datetime.datetime", 0.14876306525695124], ["dict", 0.11983168985073155], ["DefaultDict[str, Set[str]]", 0.08544607571165286]], "dag_model": [["dict", 0.22942247602786398], ["Tuple[str]", 0.1348549133350241], ["app.models.LoginModel", 0.09849080123437423], ["tensorflow.python.keras.models.Model", 0.08609101416527158], ["Dict[str, str]", 0.08424414232974077]], "dag_models": [["set", 0.1904406807475384], ["Iterator[Tuple[Any, Any]]", 0.18246687906154402], ["tf_encrypted.keras.models.sequential.Sequential", 0.15252346903000463], ["list", 0.09438487524069636], ["int", 0.09438487524069636]], "dataset": [["exporwiki.maps.models.Box", 0.20239965613911165], ["int", 0.14237201349220133], ["byceps.services.user.transfer.models.User", 0.10089829718986883], ["str", 0.096148910227296], ["buza.models.Subject", 0.09473282654778953], ["decksite.data.models.person.Person", 0.08861076444903318], ["cnaas_nms.db.device.Device", 0.0819894857276564], ["Optional[excars.models.profiles.Profile]", 0.07812867311743572]], "dataset_model": [["app.models.LoginModel", 0.3983626227273652], ["fatf.utils.models.models.KNN", 0.12891041463980726], ["pringles.models.models.Model", 0.12792714928238988], ["speedwagon.models.SettingsModel", 0.09424571814850914]], "query": [["str", 0.6994933051427191], ["int", 0.1170259411840015], ["Dict[str, str]", 0.09319349089174395], ["list", 0.09028726278153547]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[2586, 4], [2605, 23]], "fn_var_ln": {"dag": [[2587, 8], [2587, 11]], "orm_dag": [[2591, 8], [2591, 15]], "session": [[2590, 8], [2590, 15]]}, "fn_var_occur": {"dag": [["dag", "DAG", "dag_id", "start_date", "timezone", "datetime"], ["EmptyOperator", "task_id", "dag", "dag", "owner"], ["orm_dag", "DagModel", "dag_id", "dag", "dag_id", "has_task_concurrency_limits", "False", "next_dagrun", "None", "next_dagrun_create_after", "None", "is_active", "True"]], "orm_dag": [["orm_dag", "DagModel", "dag_id", "dag", "dag_id", "has_task_concurrency_limits", "False", "next_dagrun", "None", "next_dagrun_create_after", "None", "is_active", "True"], ["orm_dag", "max_active_runs"], ["session", "add", "orm_dag"], ["orm_dag", "max_active_runs", "None"]], "session": [["session", "settings", "Session"], ["session", "add", "orm_dag"], ["session", "flush"], ["session", "rollback"], ["session", "close"]]}, "name": "test_max_active_runs_not_none", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagModel.test_max_active_runs_not_none", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "orm_dag": "", "session": ""}, "variables_p": {"dag": [["str", 0.6771301409486947], ["int", 0.1411959258717477]], "orm_dag": [["bool", 0.20298091440546706], ["int", 0.17710071069447142], ["str", 0.1761726728192881], ["decksite.data.models.person.Person", 0.14221330213353495], ["tests.factories.model.TaskPayment", 0.1202257258914099], ["byceps.services.user.transfer.models.User", 0.08653843760055661]], "session": [["sqlalchemy.orm.session.Session", 0.34459570979082726], ["kedro.framework.session.session.KedroSession", 0.09235253524184409], ["Optional[str]", 0.0904586699292479]]}}, {"docstring": {"func": "We should never create dagruns for unpaused DAGs", "long_descr": null, "ret": null}, "fn_lc": [[2607, 4], [2637, 23]], "fn_var_ln": {"_": [[2632, 15], [2632, 16]], "dag": [[2611, 8], [2611, 11]], "dag_models": [[2633, 8], [2633, 18]], "is_paused": [[2629, 8], [2629, 25]], "needed": [[2626, 8], [2626, 14]], "orm_dag": [[2615, 8], [2615, 15]], "query": [[2632, 8], [2632, 13]], "session": [[2614, 8], [2614, 15]]}, "fn_var_occur": {"_": [["query", "_", "DagModel", "dags_needing_dagruns", "session"], ["query", "_", "DagModel", "dags_needing_dagruns", "session"]], "dag": [["dag", "DAG", "dag_id", "start_date", "DEFAULT_DATE"], ["EmptyOperator", "task_id", "dag", "dag", "owner"], ["orm_dag", "DagModel", "dag_id", "dag", "dag_id", "has_task_concurrency_limits", "False", "next_dagrun", "DEFAULT_DATE", "next_dagrun_create_after", "DEFAULT_DATE", "timedelta", "days", "is_active", "True"]], "dag_models": [["dag_models", "query", "all"]], "is_paused": [["orm_dag", "is_paused", "True"]], "needed": [["needed", "query", "all"], ["needed", "orm_dag"]], "orm_dag": [["orm_dag", "DagModel", "dag_id", "dag", "dag_id", "has_task_concurrency_limits", "False", "next_dagrun", "DEFAULT_DATE", "next_dagrun_create_after", "DEFAULT_DATE", "timedelta", "days", "is_active", "True"], ["session", "add", "orm_dag"], ["needed", "orm_dag"], ["orm_dag", "is_paused", "True"]], "query": [["query", "_", "DagModel", "dags_needing_dagruns", "session"], ["needed", "query", "all"], ["query", "_", "DagModel", "dags_needing_dagruns", "session"], ["dag_models", "query", "all"]], "session": [["session", "settings", "Session"], ["session", "add", "orm_dag"], ["session", "flush"], ["query", "_", "DagModel", "dags_needing_dagruns", "session"], ["session", "flush"], ["query", "_", "DagModel", "dags_needing_dagruns", "session"], ["session", "rollback"], ["session", "close"]]}, "name": "test_dags_needing_dagruns_only_unpaused", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagModel.test_dags_needing_dagruns_only_unpaused", "ret_exprs": [], "ret_type": "", "variables": {"_": "", "dag": "", "dag_models": "", "is_paused": "", "needed": "", "orm_dag": "", "query": "", "session": ""}, "variables_p": {"_": [["int", 0.3243159941873868], ["str", 0.1826470370869634], ["datetime.datetime.datetime", 0.0983281577067035], ["dict", 0.09590474807952686], ["list", 0.09385369997945185], ["List[Dict[str, Any]]", 0.08939580030478106]], "dag": [["int", 0.31846751362165215], ["str", 0.2006092422576199], ["list", 0.1199887487141078]], "dag_models": [["set", 0.6207795314111749]], "is_paused": [["bool", 0.8086492437839186], ["List[Tuple[int, int]]", 0.10876987246390077], ["str", 0.08258088375218073]], "needed": [["str", 0.6803697269458132], ["Set[str]", 0.2597235959216128], ["Pattern[str]", 0.05990667713257399]], "orm_dag": [["int", 0.1924945498819114], ["decksite.data.models.person.Person", 0.1388349873746722], ["Optional[excars.models.profiles.Profile]", 0.10218655372850097], ["tests.factories.model.TaskPayment", 0.10107913370588997], ["byceps.services.user.transfer.models.User", 0.09986385265781456], ["cnaas_nms.db.device.Device", 0.09440535823304894], ["bool", 0.09205708877073912]], "query": [["str", 0.20559303287193528], ["List[str]", 0.11252263580259485], ["deque[Any]", 0.09356423271604505], ["int", 0.09297410671912812], ["list", 0.09189384646001865]], "session": [["sqlalchemy.orm.session.Session", 0.08543265937908111]]}}, {"docstring": {"func": "We check that has_import_error is false for dags", "long_descr": "being set to scheduler to create dagruns", "ret": null}, "fn_lc": [[2639, 4], [2666, 27]], "fn_var_ln": {"_": [[2664, 15], [2664, 16]], "dag": [[2644, 8], [2644, 11]], "has_import_errors": [[2661, 8], [2661, 33]], "needed": [[2665, 8], [2665, 14]], "orm_dag": [[2647, 8], [2647, 15]], "query": [[2664, 8], [2664, 13]]}, "fn_var_occur": {"_": [["query", "_", "DagModel", "dags_needing_dagruns", "session"], ["query", "_", "DagModel", "dags_needing_dagruns", "session"]], "dag": [["dag", "DAG", "dag_id", "start_date", "DEFAULT_DATE"], ["EmptyOperator", "task_id", "dag", "dag", "owner"], ["orm_dag", "DagModel", "dag_id", "dag", "dag_id", "has_task_concurrency_limits", "False", "next_dagrun", "DEFAULT_DATE", "next_dagrun_create_after", "DEFAULT_DATE", "timedelta", "days", "is_active", "True"]], "has_import_errors": [["orm_dag", "has_import_errors"], ["orm_dag", "has_import_errors", "True"]], "needed": [["needed", "query", "all"], ["needed", "orm_dag"], ["needed", "query", "all"]], "orm_dag": [["orm_dag", "DagModel", "dag_id", "dag", "dag_id", "has_task_concurrency_limits", "False", "next_dagrun", "DEFAULT_DATE", "next_dagrun_create_after", "DEFAULT_DATE", "timedelta", "days", "is_active", "True"], ["orm_dag", "has_import_errors"], ["session", "add", "orm_dag"], ["needed", "orm_dag"], ["orm_dag", "has_import_errors", "True"], ["session", "merge", "orm_dag"]], "query": [["query", "_", "DagModel", "dags_needing_dagruns", "session"], ["needed", "query", "all"], ["query", "_", "DagModel", "dags_needing_dagruns", "session"], ["needed", "query", "all"]]}, "name": "test_dags_needing_dagruns_doesnot_send_dagmodel_with_import_errors", "params": {"self": "", "session": ""}, "params_descr": {"self": "", "session": ""}, "params_occur": {"self": [], "session": [["session", "add", "orm_dag"], ["session", "flush"], ["query", "_", "DagModel", "dags_needing_dagruns", "session"], ["session", "merge", "orm_dag"], ["session", "flush"], ["query", "_", "DagModel", "dags_needing_dagruns", "session"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "session": [["sqlalchemy.orm.Session", 0.18888480009687725], ["Dict[str, Any]", 0.09503195768302465], ["sqlalchemy.orm.session.Session", 0.09467890642534928]]}, "q_name": "TestDagModel.test_dags_needing_dagruns_doesnot_send_dagmodel_with_import_errors", "ret_exprs": [], "ret_type": "", "variables": {"_": "", "dag": "", "has_import_errors": "", "needed": "", "orm_dag": "", "query": ""}, "variables_p": {"_": [["int", 0.3243159941873868], ["str", 0.1826470370869634], ["datetime.datetime.datetime", 0.0983281577067035], ["dict", 0.09590474807952686], ["list", 0.09385369997945185], ["List[Dict[str, Any]]", 0.08939580030478106]], "dag": [["int", 0.31846751362165215], ["str", 0.2006092422576199], ["list", 0.1199887487141078]], "has_import_errors": [["str", 0.8402514336188999], ["int", 0.07563328767970041]], "needed": [["int", 0.2947902421009165], ["str", 0.10542824066856069], ["List[int]", 0.1043998663956749], ["tests.core.test_task_map.ListTask", 0.08782551572995656], ["Union[List[Any], list]", 0.08526740014891926]], "orm_dag": [["int", 0.1924945498819114], ["decksite.data.models.person.Person", 0.1388349873746722], ["Optional[excars.models.profiles.Profile]", 0.10218655372850097], ["tests.factories.model.TaskPayment", 0.10107913370588997], ["byceps.services.user.transfer.models.User", 0.09986385265781456], ["cnaas_nms.db.device.Device", 0.09440535823304894], ["bool", 0.09205708877073912]], "query": [["list", 0.1785253492234528], ["int", 0.09430700190875568], ["str", 0.08913550625904135], ["List[Tuple[str, Any, Any]]", 0.08600506371612467]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[2675, 4], [2679, 56]], "fn_var_ln": {"dag": [[2676, 8], [2676, 11]], "fileloc": [[2677, 8], [2677, 19]]}, "fn_var_occur": {"dag": [["dag", "DAG", "dag_id"], ["dag", "fileloc", "fileloc"], ["dag", "relative_fileloc", "expected_relative"]], "fileloc": [["dag", "fileloc", "fileloc"]]}, "name": "test_relative_fileloc", "params": {"expected_relative": "", "fileloc": "", "self": ""}, "params_descr": {"expected_relative": "", "fileloc": "", "self": ""}, "params_occur": {"expected_relative": [["dag", "relative_fileloc", "expected_relative"]], "fileloc": [["dag", "fileloc", "fileloc"]], "self": []}, "params_p": {"args": [], "expected_relative": [["str", 0.5677068258482907], ["dict", 0.13885868947464083], ["io.TextIO", 0.0940574344889556], ["catalog.Path", 0.09266326238485345]], "fileloc": [["str", 0.9999999999564805], ["Dict[str, Any]", 4.351966694179409e-11]], "kwargs": [], "self": []}, "q_name": "TestDagModel.test_relative_fileloc", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "fileloc": ""}, "variables_p": {"dag": [["str", 0.26665811300912506], ["golem.rpc.session.Publisher", 0.06272405153225483]], "fileloc": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["str", 0.1], ["datetime.timedelta", 0.1]]}}, {"docstring": {"func": "The serialized dag model includes the dags folder as configured on the thing serializing", "long_descr": "the dag.  On the thing deserializing the dag, when determining relative fileloc,\nwe should use the dags folder of the processor.  So even if the dags folder of\nthe deserializer is different (meaning that the full path is no longer relative to\nthe dags folder) then we should still get the relative fileloc as it existed on the\nserializer process.  When the full path is not relative to the configured dags folder,\nthen relative fileloc should just be the full path.", "ret": null}, "fn_lc": [[2691, 4], [2712, 60]], "fn_var_ln": {"dag": [[2710, 8], [2710, 11]], "fileloc": [[2704, 8], [2704, 19]], "sdm": [[2709, 8], [2709, 11]]}, "fn_var_occur": {"dag": [["dag", "DAG", "dag_id"], ["dag", "fileloc", "fileloc"], ["sdm", "SerializedDagModel", "dag"], ["sdm", "SerializedDagModel", "get", "dag", "dag_id", "session"], ["dag", "sdm", "dag"], ["dag", "relative_fileloc", "expected_relative"]], "fileloc": [["dag", "fileloc", "fileloc"]], "sdm": [["sdm", "SerializedDagModel", "dag"], ["session", "add", "sdm"], ["sdm", "SerializedDagModel", "get", "dag", "dag_id", "session"], ["dag", "sdm", "dag"]]}, "name": "test_relative_fileloc_serialized", "params": {"clear_dags": "", "expected_relative": "", "fileloc": "", "reader_dags_folder": "", "self": "", "session": ""}, "params_descr": {"clear_dags": "", "expected_relative": "", "fileloc": "", "reader_dags_folder": "", "self": "", "session": ""}, "params_occur": {"clear_dags": [], "expected_relative": [["dag", "relative_fileloc", "expected_relative"]], "fileloc": [["dag", "fileloc", "fileloc"]], "reader_dags_folder": [["conf_vars", "reader_dags_folder"]], "self": [], "session": [["session", "add", "sdm"], ["session", "commit"], ["session", "expunge_all"], ["sdm", "SerializedDagModel", "get", "dag", "dag_id", "session"]]}, "params_p": {"args": [], "clear_dags": [["str", 0.517595529518184]], "expected_relative": [["str", 0.6775287838240067], ["dict", 0.11625920217373473]], "fileloc": [["str", 0.31360721623471804], ["bool", 0.23721079313139043], ["float", 0.08578751466993376], ["Callable", 0.08562303193081364]], "kwargs": [], "reader_dags_folder": [["str", 0.61213911383832], ["Optional[str]", 0.11448531724239834], ["List[str]", 0.09402963198064694], ["zerver.models.Realm", 0.08915637482639989]], "self": [], "session": [["str", 0.3808570820628331], ["int", 0.30789463541262163], ["raiden.utils.List[raiden.utils.Tuple[str, raiden.utils.Any]]", 0.10833912565216931], ["bool", 0.10833912565216931], ["yawasscanner.session.Session", 0.0945700312202066]]}, "q_name": "TestDagModel.test_relative_fileloc_serialized", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "fileloc": "", "sdm": ""}, "variables_p": {"dag": [["dict", 0.2223845246289638], ["str", 0.1805652122149478], ["abilian.core.models.subjects.User", 0.10264559069318296], ["golem.rpc.session.Publisher", 0.09256132538196919], ["list", 0.08615561640835842]], "fileloc": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["str", 0.1], ["datetime.timedelta", 0.1]], "sdm": [["golem.rpc.session.Publisher", 0.0997749363038924], ["tests.mypy.modules.success.Model", 0.08892808878455381], ["dict", 0.07992183392275237], ["Dict[str, Any]", 0.07559964918153834]]}}, {"docstring": {"func": "Only populated after deserializtion", "long_descr": null, "ret": null}, "fn_lc": [[2714, 4], [2720, 69]], "fn_var_ln": {"dag": [[2716, 8], [2716, 11]], "fileloc": [[2717, 8], [2717, 19]], "sdm": [[2719, 8], [2719, 11]]}, "fn_var_occur": {"dag": [["dag", "DAG", "dag_id"], ["dag", "fileloc"], ["dag", "_processor_dags_folder", "None"], ["sdm", "SerializedDagModel", "dag"], ["sdm", "dag", "_processor_dags_folder", "settings", "DAGS_FOLDER"]], "fileloc": [["dag", "fileloc"]], "sdm": [["sdm", "SerializedDagModel", "dag"], ["sdm", "dag", "_processor_dags_folder", "settings", "DAGS_FOLDER"]]}, "name": "test__processor_dags_folder", "params": {"self": "", "session": ""}, "params_descr": {"self": "", "session": ""}, "params_occur": {"self": [], "session": []}, "params_p": {"args": [], "kwargs": [], "self": [], "session": [["bool", 0.21826093928980106], ["sqlalchemy.orm.session.Session", 0.16368339706028617], ["str", 0.08184169853014309]]}, "q_name": "TestDagModel.test__processor_dags_folder", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "fileloc": "", "sdm": ""}, "variables_p": {"dag": [["str", 0.4303028947898879], ["int", 0.10124995660301299], ["Type[Tuple[str, Any]]", 0.10086500439760673], ["Optional[int]", 0.09486442446583196], ["list", 0.09339402646540279], ["float", 0.09027270461221146], ["Dict[str, str]", 0.0890509886660462]], "fileloc": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["str", 0.1], ["datetime.timedelta", 0.1]], "sdm": [["pathlib.Path", 0.12980097120991518], ["bool", 0.0746562601704813]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[2723, 4], [2766, 68]], "fn_var_ln": {"dataset1": [[2724, 8], [2724, 16]], "dataset2": [[2725, 8], [2725, 16]], "dataset_triggered_dag_info": [[2761, 15], [2761, 41]], "dr": [[2730, 12], [2730, 14]], "ds1_id": [[2744, 8], [2744, 14]], "ds2_id": [[2745, 8], [2745, 14]], "ds_id": [[2732, 12], [2732, 17]], "first_queued_time": [[2764, 8], [2764, 25]], "last_queued_time": [[2764, 27], [2764, 43]], "query": [[2761, 8], [2761, 13]]}, "fn_var_occur": {"dataset1": [["dataset1", "Dataset", "uri"], ["dataset1", "dataset2"], ["ds1_id", "session", "query", "DatasetModel", "id", "filter_by", "uri", "dataset1", "uri", "scalar"], ["dag_maker", "dag_id", "schedule", "dataset1", "dataset2", "dag"]], "dataset2": [["dataset2", "Dataset", "uri"], ["dataset1", "dataset2"], ["ds2_id", "session", "query", "DatasetModel", "id", "filter_by", "uri", "dataset2", "uri", "scalar"], ["dag_maker", "dag_id", "schedule", "dataset1", "dataset2", "dag"]], "dataset_triggered_dag_info": [["query", "dataset_triggered_dag_info", "DagModel", "dags_needing_dagruns", "session"], ["len", "dataset_triggered_dag_info"], ["dag", "dag_id", "dataset_triggered_dag_info"], ["first_queued_time", "last_queued_time", "dataset_triggered_dag_info", "dag", "dag_id"]], "dr": [["dr", "dag_maker", "create_dagrun"], ["session", "add", "DatasetEvent", "dataset_id", "ds_id", "source_task_id", "source_dag_id", "dr", "dag_id", "source_run_id", "dr", "run_id", "source_map_index"]], "ds1_id": [["ds1_id", "session", "query", "DatasetModel", "id", "filter_by", "uri", "dataset1", "uri", "scalar"], ["session", "add_all", "DatasetDagRunQueue", "dataset_id", "ds1_id", "target_dag_id", "dag", "dag_id", "created_at", "DEFAULT_DATE", "DatasetDagRunQueue", "dataset_id", "ds2_id", "target_dag_id", "dag", "dag_id", "created_at", "DEFAULT_DATE", "timedelta", "hours"]], "ds2_id": [["ds2_id", "session", "query", "DatasetModel", "id", "filter_by", "uri", "dataset2", "uri", "scalar"], ["session", "add_all", "DatasetDagRunQueue", "dataset_id", "ds1_id", "target_dag_id", "dag", "dag_id", "created_at", "DEFAULT_DATE", "DatasetDagRunQueue", "dataset_id", "ds2_id", "target_dag_id", "dag", "dag_id", "created_at", "DEFAULT_DATE", "timedelta", "hours"]], "ds_id": [["ds_id", "session", "query", "DatasetModel", "id", "filter_by", "uri", "dataset", "uri", "scalar"], ["session", "add", "DatasetEvent", "dataset_id", "ds_id", "source_task_id", "source_dag_id", "dr", "dag_id", "source_run_id", "dr", "run_id", "source_map_index"]], "first_queued_time": [["first_queued_time", "last_queued_time", "dataset_triggered_dag_info", "dag", "dag_id"], ["first_queued_time", "DEFAULT_DATE"]], "last_queued_time": [["first_queued_time", "last_queued_time", "dataset_triggered_dag_info", "dag", "dag_id"], ["last_queued_time", "DEFAULT_DATE", "timedelta", "hours"]], "query": [["ds_id", "session", "query", "DatasetModel", "id", "filter_by", "uri", "dataset", "uri", "scalar"], ["ds1_id", "session", "query", "DatasetModel", "id", "filter_by", "uri", "dataset1", "uri", "scalar"], ["ds2_id", "session", "query", "DatasetModel", "id", "filter_by", "uri", "dataset2", "uri", "scalar"], ["query", "dataset_triggered_dag_info", "DagModel", "dags_needing_dagruns", "session"]]}, "name": "test_dags_needing_dagruns_dataset_triggered_dag_info_queued_times", "params": {"dag_maker": "", "self": "", "session": ""}, "params_descr": {"dag_maker": "", "self": "", "session": ""}, "params_occur": {"dag_maker": [["dag_maker", "dag_id", "dag_id", "start_date", "timezone", "utcnow", "session", "session"], ["dr", "dag_maker", "create_dagrun"], ["dag_maker", "dag_id", "schedule", "dataset1", "dataset2", "dag"]], "self": [], "session": [["dag_maker", "dag_id", "dag_id", "start_date", "timezone", "utcnow", "session", "session"], ["ds_id", "session", "query", "DatasetModel", "id", "filter_by", "uri", "dataset", "uri", "scalar"], ["session", "add", "DatasetEvent", "dataset_id", "ds_id", "source_task_id", "source_dag_id", "dr", "dag_id", "source_run_id", "dr", "run_id", "source_map_index"], ["ds1_id", "session", "query", "DatasetModel", "id", "filter_by", "uri", "dataset1", "uri", "scalar"], ["ds2_id", "session", "query", "DatasetModel", "id", "filter_by", "uri", "dataset2", "uri", "scalar"], ["session", "flush"], ["session", "add_all", "DatasetDagRunQueue", "dataset_id", "ds1_id", "target_dag_id", "dag", "dag_id", "created_at", "DEFAULT_DATE", "DatasetDagRunQueue", "dataset_id", "ds2_id", "target_dag_id", "dag", "dag_id", "created_at", "DEFAULT_DATE", "timedelta", "hours"], ["session", "flush"], ["query", "dataset_triggered_dag_info", "DagModel", "dags_needing_dagruns", "session"]]}, "params_p": {"args": [], "dag_maker": [["sqlalchemy.orm.Session", 0.21045219545304383], ["deeplearning.deepsmith.db.session_t", 0.10063442017978079], ["Optional[str]", 0.09571311365474797], ["raiden.utils.TokenNetworkAddress", 0.09556861496688857]], "kwargs": [], "self": [], "session": [["sqlalchemy.orm.session.Session", 0.2053303580942245], ["sqlalchemy.orm.scoping.scoped_session", 0.11945133064813651], ["grouper.models.permission.Permission", 0.09611323281892013], ["zerver.models.UserProfile", 0.09461355962066625], ["sqlalchemy.orm.Session", 0.09156011711827129]]}, "q_name": "TestDagModel.test_dags_needing_dagruns_dataset_triggered_dag_info_queued_times", "ret_exprs": [], "ret_type": "", "variables": {"dataset1": "", "dataset2": "", "dataset_triggered_dag_info": "", "dr": "", "ds1_id": "", "ds2_id": "", "ds_id": "", "first_queued_time": "", "last_queued_time": "", "query": ""}, "variables_p": {"dataset1": [["str", 0.26402121500415004], ["byceps.services.user.transfer.models.User", 0.1378736456764072], ["int", 0.13665799872999462], ["cnaas_nms.db.device.Device", 0.09710134074051398], ["decksite.data.models.person.Person", 0.09566377078953141], ["app.models.Journey", 0.0862870438763343], ["List[Tuple[Any, Any]]", 0.08572000934358334]], "dataset2": [["str", 0.26402121500415004], ["byceps.services.user.transfer.models.User", 0.1378736456764072], ["int", 0.13665799872999462], ["cnaas_nms.db.device.Device", 0.09710134074051398], ["decksite.data.models.person.Person", 0.09566377078953141], ["app.models.Journey", 0.0862870438763343], ["List[Tuple[Any, Any]]", 0.08572000934358334]], "dataset_triggered_dag_info": [["str", 0.19639707688651495], ["cmk.base.discovered_labels.DiscoveredHostLabels", 0.18773898387974391], ["Dict[str, str]", 0.10656244416211966], ["pymatgen.io.qchem.sets.QChemDictSet", 0.10626534301493219]], "dr": [["int", 0.2986529993279459], ["str", 0.2089234891463161], ["Dict[str, Union[Any, Any, Any]]", 0.10389920786481187]], "ds1_id": [["int", 0.39818884154132816], ["Type[Tuple[str, Any]]", 0.2062694176334042], ["list", 0.10065418499264983]], "ds2_id": [["int", 0.39818884154132816], ["Type[Tuple[str, Any]]", 0.2062694176334042], ["list", 0.10065418499264983]], "ds_id": [["int", 0.2635244262607811], ["cmk.utils.type_defs.UserId", 0.12809019752563097], ["Iterator[Any]", 0.12614483789670158], ["Tuple[int]", 0.10225721689915984], ["List[str]", 0.10186641864934413], ["str", 0.09462756779721869], ["list", 0.0917574538879731]], "first_queued_time": [["int", 0.4402367146299917], ["float", 0.10410436473173355], ["raiden.utils.PaymentAmount", 0.08123198193655955]], "last_queued_time": [["datetime.datetime", 0.2150595558535523], ["List[str]", 0.13463697788782258], ["datetime.timedelta", 0.10025351631879711], ["timedelta", 0.09669413795059328], ["datetime.datetime.datetime", 0.09571242120436092], ["Optional[raiden.transfer.state.NettingChannelState]", 0.08552204431395206]], "query": [["str", 0.34164450170969884], ["sqlalchemy.orm.Session", 0.22031067588270298], ["dict", 0.14342078400344477], ["Dict[str, Any]", 0.07681181142567464], ["cmk.utils.type_defs.UserId", 0.0725397293588843], ["Set[str]", 0.07231831135916186]]}}], "name": "TestDagModel", "q_name": "TestDagModel", "variables": {}, "variables_p": {}}, {"cls_lc": [[2769, 0], [2786, 13]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[2770, 4], [2771, 23]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "setup_method", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestQueries.setup_method", "ret_exprs": [], "ret_type": "None", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[2773, 4], [2774, 23]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "teardown_method", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestQueries.teardown_method", "ret_exprs": [], "ret_type": "None", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[2777, 4], [2786, 13]], "fn_var_ln": {"dag": [[2778, 8], [2778, 11]]}, "fn_var_occur": {"dag": [["dag", "DAG", "start_date", "DEFAULT_DATE"], ["EmptyOperator", "task_id", "i", "owner", "dag", "dag"], ["dag", "create_dagrun", "run_id", "state", "State", "RUNNING", "execution_date", "TEST_DATE"]]}, "name": "test_count_number_queries", "params": {"self": "", "tasks_count": ""}, "params_descr": {"self": "", "tasks_count": ""}, "params_occur": {"self": [], "tasks_count": [["range", "tasks_count"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "tasks_count": [["mock.MagicMock", 0.1258816370991626], ["app.models.Game", 0.12412973876885523], ["str", 0.08612694339533797]]}, "q_name": "TestQueries.test_count_number_queries", "ret_exprs": [], "ret_type": "", "variables": {"dag": ""}, "variables_p": {"dag": [["int", 0.28268160087969874], ["List[int]", 0.1855270349961451], ["str", 0.09206505231956362], ["list", 0.09066813023183254], ["List[str]", 0.08530293639905832], ["Tuple[Literal, Literal, Literal]", 0.08469809290858521]]}}], "name": "TestQueries", "q_name": "TestQueries", "variables": {}, "variables_p": {}}, {"cls_lc": [[2789, 0], [2997, 31]], "cls_var_ln": {"DEFAULT_ARGS": [[2790, 4], [2790, 16]], "DEFAULT_DATE": [[2797, 4], [2797, 16]], "VALUE": [[2798, 4], [2798, 9]]}, "cls_var_occur": {"DEFAULT_ARGS": [], "DEFAULT_DATE": [], "VALUE": []}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[2800, 4], [2801, 28]], "fn_var_ln": {"operator": [[2801, 8], [2801, 21]]}, "fn_var_occur": {"operator": [["self", "operator", "None"]]}, "name": "setup_method", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "operator", "None"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagDecorator.setup_method", "ret_exprs": [], "ret_type": "", "variables": {"operator": ""}, "variables_p": {"operator": [["\"Frame\"", 0.19999999999676038], ["str", 3.971941177518544e-12], ["Dict[str, Any]", 3.6175949269712212e-12]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[2803, 4], [2804, 23]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "teardown_method", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagDecorator.teardown_method", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[2808, 8], [2809, 15]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "noop_pipeline", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagDecorator.test_fileloc.<locals>.noop_pipeline", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[2806, 4], [2814, 38]], "fn_var_ln": {"dag": [[2811, 8], [2811, 11]]}, "fn_var_occur": {"dag": [["dag", "noop_pipeline"], ["isinstance", "dag", "DAG"], ["dag", "dag_id"], ["dag", "fileloc", "__file__"]]}, "name": "test_fileloc", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagDecorator.test_fileloc", "ret_exprs": [], "ret_type": "", "variables": {"dag": ""}, "variables_p": {"dag": [["str", 0.26614354175040333]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[2820, 8], [2821, 15]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "noop_pipeline", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagDecorator.test_set_dag_id.<locals>.noop_pipeline", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Test that checks you can set dag_id from decorator.", "long_descr": null, "ret": null}, "fn_lc": [[2816, 4], [2825, 35]], "fn_var_ln": {"dag": [[2823, 8], [2823, 11]]}, "fn_var_occur": {"dag": [["dag", "noop_pipeline"], ["isinstance", "dag", "DAG"], ["dag", "dag_id"]]}, "name": "test_set_dag_id", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagDecorator.test_set_dag_id", "ret_exprs": [], "ret_type": "", "variables": {"dag": ""}, "variables_p": {"dag": [["Dict[str, Dict[Any, Any]]", 0.2237199260824848], ["dict", 0.12042041374157232], ["list", 0.10311929902660177], ["str", 0.09336130819423125], ["Tuple[Literal, Literal, Literal, Literal, Literal, Literal]", 0.08615702522283676]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[2831, 8], [2832, 15]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "noop_pipeline", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagDecorator.test_default_dag_id.<locals>.noop_pipeline", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Test that @dag uses function name as default dag id.", "long_descr": null, "ret": null}, "fn_lc": [[2827, 4], [2836, 44]], "fn_var_ln": {"dag": [[2834, 8], [2834, 11]]}, "fn_var_occur": {"dag": [["dag", "noop_pipeline"], ["isinstance", "dag", "DAG"], ["dag", "dag_id"]]}, "name": "test_default_dag_id", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagDecorator.test_default_dag_id", "ret_exprs": [], "ret_type": "", "variables": {"dag": ""}, "variables_p": {"dag": [["Dict[str, Dict[Any, Any]]", 0.2237199260824848], ["dict", 0.12042041374157232], ["list", 0.10311929902660177], ["str", 0.09336130819423125], ["Tuple[Literal, Literal, Literal, Literal, Literal, Literal]", 0.08615702522283676]]}}, {"docstring": {"func": "Regular DAG documentation", "long_descr": null, "ret": null}, "fn_lc": [[2849, 8], [2850, 43]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "noop_pipeline", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagDecorator.test_documentation_added.<locals>.noop_pipeline", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Test that @dag uses function docs as doc_md for DAG object if doc_md is not explicitly set.", "long_descr": null, "ret": null}, "fn_lc": [[2845, 4], [2855, 44]], "fn_var_ln": {"dag": [[2852, 8], [2852, 11]]}, "fn_var_occur": {"dag": [["dag", "noop_pipeline"], ["isinstance", "dag", "DAG"], ["dag", "dag_id"], ["dag", "doc_md", "expected_doc_md"]]}, "name": "test_documentation_added", "params": {"dag_doc_md": "", "expected_doc_md": "", "self": ""}, "params_descr": {"dag_doc_md": "", "expected_doc_md": "", "self": ""}, "params_occur": {"dag_doc_md": [], "expected_doc_md": [["dag", "doc_md", "expected_doc_md"]], "self": []}, "params_p": {"args": [], "dag_doc_md": [["List[Tuple[str, str]]", 0.1051417493685633]], "expected_doc_md": [["str", 0.3960778504136965], ["bool", 0.09556785985914105], ["cmk.utils.type_defs.UserId", 0.09284717803473412], ["float", 0.09284717803473412]], "kwargs": [], "self": []}, "q_name": "TestDagDecorator.test_documentation_added", "ret_exprs": [], "ret_type": "", "variables": {"dag": ""}, "variables_p": {"dag": [["Dict[str, Any]", 0.1889329612596568], ["dict", 0.12903872681675088], ["Dict[str, Dict[str, Any]]", 0.10113327621066712], ["str", 0.09789684210657071]]}}, {"docstring": {"func": "{% if True %}", "long_descr": "Regular DAG documentation\n{% endif %}", "ret": null}, "fn_lc": [[2861, 8], [2866, 15]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "noop_pipeline", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagDecorator.test_documentation_template_rendered.<locals>.noop_pipeline", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Test that @dag uses function docs as doc_md for DAG object", "long_descr": null, "ret": null}, "fn_lc": [[2857, 4], [2871, 56]], "fn_var_ln": {"dag": [[2868, 8], [2868, 11]]}, "fn_var_occur": {"dag": [["dag", "noop_pipeline"], ["isinstance", "dag", "DAG"], ["dag", "dag_id"], ["dag", "doc_md"]]}, "name": "test_documentation_template_rendered", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagDecorator.test_documentation_template_rendered", "ret_exprs": [], "ret_type": "", "variables": {"dag": ""}, "variables_p": {"dag": [["Dict[str, Dict[Any, Any]]", 0.1803239347376169], ["list", 0.13178937060581594], ["Counter", 0.13178937060581594], ["Tuple[Type[str], Type[bytes]]", 0.097194685706264], ["Type[str]", 0.097194685706264]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[2891, 12], [2892, 19]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "markdown_docs", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagDecorator.test_resolve_documentation_template_file_rendered.<locals>.markdown_docs", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Test that @dag uses function docs as doc_md for DAG object", "long_descr": null, "ret": null}, "fn_lc": [[2873, 4], [2897, 78]], "fn_var_ln": {"dag": [[2894, 12], [2894, 15]], "template_dir": [[2885, 12], [2885, 24]], "template_file": [[2886, 12], [2886, 25]]}, "fn_var_occur": {"dag": [["dag", "markdown_docs"], ["isinstance", "dag", "DAG"], ["dag", "dag_id"], ["dag", "doc_md", "strip"]], "template_dir": [], "template_file": []}, "name": "test_resolve_documentation_template_file_rendered", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagDecorator.test_resolve_documentation_template_file_rendered", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "template_dir": "", "template_file": ""}, "variables_p": {"dag": [["str", 0.38622529057689114], ["Type[multigtfs.models.service.Service]", 0.11835597986127631], ["Tuple[Literal, Literal, Literal, Literal, Literal, Literal]", 0.09459991124161596]], "template_dir": [["str", 0.7999999999999999], ["pathlib.Path", 0.2]], "template_file": [["str", 0.8749999999023218], ["pathlib.Path", 0.12499999997090468], ["Tuple[str, List[str]]", 1.2677356400606722e-10]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[2905, 12], [2906, 26]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "return_num", "params": {"num": ""}, "params_descr": {"num": ""}, "params_occur": {"num": []}, "params_p": {"args": [], "kwargs": [], "num": [["bool", 0.3159965031912249], ["list", 0.2347285821430993], ["List[str]", 0.13372000055018546], ["int", 0.078053507813857]], "self": []}, "q_name": "TestDagDecorator.test_fails_if_arg_not_set.<locals>.noop_pipeline.<locals>.return_num", "ret_exprs": ["return num"], "ret_type": "", "ret_type_p": [["Match", 0.2120840194961611], ["List[Dict[str, str]]", 0.09784676916008989], ["list", 0.09784676916008989], ["int", 0.09710842770840941]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[2903, 8], [2908, 29]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "noop_pipeline", "params": {"value": ""}, "params_descr": {"value": ""}, "params_occur": {"value": [["return_num", "value"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "value": [["str", 0.28571428572636753], ["int", 0.28571428570222906], ["bytes", 0.14285714285111453], ["float", 0.14285714285111453], ["Union[str, bytes]", 1.8060030194106246e-11]]}, "q_name": "TestDagDecorator.test_fails_if_arg_not_set.<locals>.noop_pipeline", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Test that @dag decorated function fails if positional argument is not set", "long_descr": null, "ret": null}, "fn_lc": [[2899, 4], [2912, 27]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_fails_if_arg_not_set", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagDecorator.test_fails_if_arg_not_set", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[2920, 12], [2921, 26]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "return_num", "params": {"num": ""}, "params_descr": {"num": ""}, "params_occur": {"num": []}, "params_p": {"args": [], "kwargs": [], "num": [["bool", 0.3159965031912249], ["list", 0.2347285821430993], ["List[str]", 0.13372000055018546], ["int", 0.078053507813857]], "self": []}, "q_name": "TestDagDecorator.test_dag_param_resolves.<locals>.xcom_pass_to_op.<locals>.return_num", "ret_exprs": ["return num"], "ret_type": "", "ret_type_p": [["Match", 0.2120840194961611], ["List[Dict[str, str]]", 0.09784676916008989], ["list", 0.09784676916008989], ["int", 0.09710842770840941]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[2918, 8], [2924, 45]], "fn_var_ln": {"operator": [[2924, 12], [2924, 25]], "xcom_arg": [[2923, 12], [2923, 20]]}, "fn_var_occur": {"operator": [["self", "operator", "xcom_arg", "operator"]], "xcom_arg": [["xcom_arg", "return_num", "value"], ["self", "operator", "xcom_arg", "operator"]]}, "name": "xcom_pass_to_op", "params": {"value": ""}, "params_descr": {"value": ""}, "params_occur": {"value": [["xcom_arg", "return_num", "value"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "value": [["str", 0.4223113043069469], ["zam_repondeur.models.Amendement", 0.10943853958517094], ["Dict[str, float]", 0.08495607814608815], ["Dict[str, Dict[str, int]]", 0.08495607814608815], ["Union[bytes, str]", 0.08243131682078136]]}, "q_name": "TestDagDecorator.test_dag_param_resolves.<locals>.xcom_pass_to_op", "ret_exprs": [], "ret_type": "", "variables": {"operator": "", "xcom_arg": ""}, "variables_p": {"operator": [["str", 0.30000000000000004], ["Dict[str, Any]", 0.1], ["dict", 0.1], ["int", 0.1]], "xcom_arg": [["int", 0.39882713798922426], ["Dict[str, int]", 0.230451139213685], ["Dict[Any, str]", 0.09441497088286809], ["float", 0.08914467227205035]]}}, {"docstring": {"func": "Test that dag param is correctly resolved by operator", "long_descr": null, "ret": null}, "fn_lc": [[2914, 4], [2938, 43]], "fn_var_ln": {"dag": [[2926, 8], [2926, 11]], "dr": [[2928, 8], [2928, 10]], "ti": [[2937, 8], [2937, 10]]}, "fn_var_occur": {"dag": [["dag", "xcom_pass_to_op"], ["dr", "dag", "create_dagrun", "run_id", "DagRunType", "MANUAL", "value", "start_date", "timezone", "utcnow", "execution_date", "self", "DEFAULT_DATE", "data_interval", "self", "DEFAULT_DATE", "self", "DEFAULT_DATE", "state", "State", "RUNNING"]], "dr": [["dr", "dag", "create_dagrun", "run_id", "DagRunType", "MANUAL", "value", "start_date", "timezone", "utcnow", "execution_date", "self", "DEFAULT_DATE", "data_interval", "self", "DEFAULT_DATE", "self", "DEFAULT_DATE", "state", "State", "RUNNING"], ["ti", "dr", "get_task_instances"]], "ti": [["ti", "dr", "get_task_instances"], ["ti", "xcom_pull", "self", "VALUE"]]}, "name": "test_dag_param_resolves", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["dr", "dag", "create_dagrun", "run_id", "DagRunType", "MANUAL", "value", "start_date", "timezone", "utcnow", "execution_date", "self", "DEFAULT_DATE", "data_interval", "self", "DEFAULT_DATE", "self", "DEFAULT_DATE", "state", "State", "RUNNING"], ["self", "operator", "run", "start_date", "self", "DEFAULT_DATE", "end_date", "self", "DEFAULT_DATE"], ["ti", "xcom_pull", "self", "VALUE"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagDecorator.test_dag_param_resolves", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "dr": "", "ti": ""}, "variables_p": {"dag": [["float", 0.11842226126499905], ["raiden.utils.PaymentAmount", 0.09071081304826872], ["src.pip_shims.models.PipVersion", 0.09035789799621351]], "dr": [["str", 0.17633814094484396], ["datetime.datetime", 0.11718796789651062], ["dict", 0.1137336601046603], ["Union[Literal, Literal]", 0.11172617933157095], ["int", 0.09645153614933563], ["byceps.services.user.transfer.models.User", 0.09461623311750939], ["Dict[str, Union[int, str]]", 0.08951616796655802]], "ti": [["str", 0.1130829279098281], ["rotkehlchen.db.settings.DBSettings", 0.10929659444015491], ["types.SimpleNamespace", 0.09418936513673949]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[2946, 12], [2947, 26]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "return_num", "params": {"num": ""}, "params_descr": {"num": ""}, "params_occur": {"num": []}, "params_p": {"args": [], "kwargs": [], "num": [["bool", 0.3159965031912249], ["list", 0.2347285821430993], ["List[str]", 0.13372000055018546], ["int", 0.078053507813857]], "self": []}, "q_name": "TestDagDecorator.test_dag_param_dagrun_parameterized.<locals>.xcom_pass_to_op.<locals>.return_num", "ret_exprs": ["return num"], "ret_type": "", "ret_type_p": [["Match", 0.2120840194961611], ["List[Dict[str, str]]", 0.09784676916008989], ["list", 0.09784676916008989], ["int", 0.09710842770840941]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[2944, 8], [2952, 45]], "fn_var_ln": {"operator": [[2952, 12], [2952, 25]], "xcom_arg": [[2951, 12], [2951, 20]]}, "fn_var_occur": {"operator": [["self", "operator", "xcom_arg", "operator"]], "xcom_arg": [["xcom_arg", "return_num", "value"], ["self", "operator", "xcom_arg", "operator"]]}, "name": "xcom_pass_to_op", "params": {"value": ""}, "params_descr": {"value": ""}, "params_occur": {"value": [["isinstance", "value", "DagParam"], ["xcom_arg", "return_num", "value"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "value": [["str", 0.5128805355289255], ["Union[int, float]", 0.10745150092521785], ["T", 0.0926208137050774], ["dict", 0.08063122881159976]]}, "q_name": "TestDagDecorator.test_dag_param_dagrun_parameterized.<locals>.xcom_pass_to_op", "ret_exprs": [], "ret_type": "", "variables": {"operator": "", "xcom_arg": ""}, "variables_p": {"operator": [["str", 0.30000000000000004], ["Dict[str, Any]", 0.1], ["dict", 0.1], ["int", 0.1]], "xcom_arg": [["int", 0.39882713798922426], ["Dict[str, int]", 0.230451139213685], ["Dict[Any, str]", 0.09441497088286809], ["float", 0.08914467227205035]]}}, {"docstring": {"func": "Test that dag param is correctly overwritten when set in dag run", "long_descr": null, "ret": null}, "fn_lc": [[2940, 4], [2967, 42]], "fn_var_ln": {"dag": [[2954, 8], [2954, 11]], "dr": [[2956, 8], [2956, 10]], "new_value": [[2955, 8], [2955, 17]], "ti": [[2966, 8], [2966, 10]]}, "fn_var_occur": {"dag": [["dag", "xcom_pass_to_op"], ["dr", "dag", "create_dagrun", "run_id", "DagRunType", "MANUAL", "value", "start_date", "timezone", "utcnow", "execution_date", "self", "DEFAULT_DATE", "data_interval", "self", "DEFAULT_DATE", "self", "DEFAULT_DATE", "state", "State", "RUNNING", "conf", "new_value"]], "dr": [["dr", "dag", "create_dagrun", "run_id", "DagRunType", "MANUAL", "value", "start_date", "timezone", "utcnow", "execution_date", "self", "DEFAULT_DATE", "data_interval", "self", "DEFAULT_DATE", "self", "DEFAULT_DATE", "state", "State", "RUNNING", "conf", "new_value"], ["ti", "dr", "get_task_instances"]], "new_value": [["dr", "dag", "create_dagrun", "run_id", "DagRunType", "MANUAL", "value", "start_date", "timezone", "utcnow", "execution_date", "self", "DEFAULT_DATE", "data_interval", "self", "DEFAULT_DATE", "self", "DEFAULT_DATE", "state", "State", "RUNNING", "conf", "new_value"], ["ti", "xcom_pull", "new_value"]], "ti": [["ti", "dr", "get_task_instances"], ["ti", "xcom_pull", "new_value"]]}, "name": "test_dag_param_dagrun_parameterized", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["dr", "dag", "create_dagrun", "run_id", "DagRunType", "MANUAL", "value", "start_date", "timezone", "utcnow", "execution_date", "self", "DEFAULT_DATE", "data_interval", "self", "DEFAULT_DATE", "self", "DEFAULT_DATE", "state", "State", "RUNNING", "conf", "new_value"], ["self", "operator", "run", "start_date", "self", "DEFAULT_DATE", "end_date", "self", "DEFAULT_DATE"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagDecorator.test_dag_param_dagrun_parameterized", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "dr": "", "new_value": "", "ti": ""}, "variables_p": {"dag": [["float", 0.11842226126499905], ["raiden.utils.PaymentAmount", 0.09071081304826872], ["src.pip_shims.models.PipVersion", 0.09035789799621351]], "dr": [["str", 0.17633814094484396], ["datetime.datetime", 0.11718796789651062], ["dict", 0.1137336601046603], ["Union[Literal, Literal]", 0.11172617933157095], ["int", 0.09645153614933563], ["byceps.services.user.transfer.models.User", 0.09461623311750939], ["Dict[str, Union[int, str]]", 0.08951616796655802]], "new_value": [["str", 0.26569271283899626], ["List[Union[Any, Any]]", 0.12125623079414434], ["correios.models.posting.TrackingCode", 0.11857990441271159], ["datetime.date.time.date", 0.10923069538298819], ["datetime.date.time.timedelta", 0.10624197067719778], ["raiden.utils.Balance", 0.10197748738617413], ["Tuple[int, int, int]", 0.08152743629610627]], "ti": [["str", 0.2085903183181462], ["List[str]", 0.08797130490742906], ["Dict[str, Any]", 0.07963187008112535]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[2976, 12], [2977, 26]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "return_num", "params": {"num": ""}, "params_descr": {"num": ""}, "params_occur": {"num": []}, "params_p": {"args": [], "kwargs": [], "num": [["bool", 0.3159965031912249], ["list", 0.2347285821430993], ["List[str]", 0.13372000055018546], ["int", 0.078053507813857]], "self": []}, "q_name": "TestDagDecorator.test_set_params_for_dag.<locals>.xcom_pass_to_op.<locals>.return_num", "ret_exprs": ["return num"], "ret_type": "", "ret_type_p": [["Match", 0.2120840194961611], ["List[Dict[str, str]]", 0.09784676916008989], ["list", 0.09784676916008989], ["int", 0.09710842770840941]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[2974, 8], [2980, 45]], "fn_var_ln": {"operator": [[2980, 12], [2980, 25]], "xcom_arg": [[2979, 12], [2979, 20]]}, "fn_var_occur": {"operator": [["self", "operator", "xcom_arg", "operator"]], "xcom_arg": [["xcom_arg", "return_num", "value"], ["self", "operator", "xcom_arg", "operator"]]}, "name": "xcom_pass_to_op", "params": {"value": ""}, "params_descr": {"value": ""}, "params_occur": {"value": [["xcom_arg", "return_num", "value"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "value": [["str", 0.4223113043069469], ["zam_repondeur.models.Amendement", 0.10943853958517094], ["Dict[str, float]", 0.08495607814608815], ["Dict[str, Dict[str, int]]", 0.08495607814608815], ["Union[bytes, str]", 0.08243131682078136]]}, "q_name": "TestDagDecorator.test_set_params_for_dag.<locals>.xcom_pass_to_op", "ret_exprs": [], "ret_type": "", "variables": {"operator": "", "xcom_arg": ""}, "variables_p": {"operator": [["str", 0.30000000000000004], ["Dict[str, Any]", 0.1], ["dict", 0.1], ["int", 0.1]], "xcom_arg": [["int", 0.39882713798922426], ["Dict[str, int]", 0.230451139213685], ["Dict[Any, str]", 0.09441497088286809], ["float", 0.08914467227205035]]}}, {"docstring": {"func": "Test that dag param is correctly set when using dag decorator", "long_descr": null, "ret": null}, "fn_lc": [[2970, 4], [2983, 43]], "fn_var_ln": {"dag": [[2982, 8], [2982, 11]]}, "fn_var_occur": {"dag": [["dag", "xcom_pass_to_op"], ["dag", "params", "value"]]}, "name": "test_set_params_for_dag", "params": {"self": "", "value": ""}, "params_descr": {"self": "", "value": ""}, "params_occur": {"self": [], "value": [["dag", "params", "value"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "value": [["str", 0.6015463212252925], ["Callable", 0.21473028238487923], ["bool", 0.09186169819491401], ["Union[int, float]", 0.09186169819491401]]}, "q_name": "TestDagDecorator.test_set_params_for_dag", "ret_exprs": [], "ret_type": "", "variables": {"dag": ""}, "variables_p": {"dag": [["Dict[str, str]", 0.19143814104615697], ["list", 0.10128815891764872], ["List[str]", 0.09886696111579213], ["str", 0.09651502186245715], ["float", 0.09570311546940842], ["frozenset[str]", 0.09426050192176771]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[2988, 8], [2989, 15]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "mydag", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagDecorator.test_warning_location.<locals>.mydag", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[2985, 4], [2997, 31]], "fn_var_ln": {"line": [[2992, 12], [2992, 16]], "w": [[2995, 8], [2995, 9]]}, "fn_var_occur": {"line": [["line", "sys", "_getframe", "f_lineno"], ["w", "lineno", "line"]], "w": [["w", "warnings", "pop", "RemovedInAirflow3Warning"], ["w", "filename", "__file__"], ["w", "lineno", "line"]]}, "name": "test_warning_location", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagDecorator.test_warning_location", "ret_exprs": [], "ret_type": "", "variables": {"line": "", "w": ""}, "variables_p": {"line": [["str", 0.17867348170674735], ["int", 0.17831261247433516], ["email.mime.base.MIMEBase", 0.15088377284169308], ["Counter[str]", 0.08173111614927514]], "w": [["qutebrowser.utils.objreg.ObjectRegistry", 0.10194339824097552], ["freqtrade.configuration.timerange.TimeRange", 0.08349787997245885]]}}], "name": "TestDagDecorator", "q_name": "TestDagDecorator", "variables": {"DEFAULT_ARGS": "", "DEFAULT_DATE": "", "VALUE": ""}, "variables_p": {"DEFAULT_ARGS": [["Dict[str, Union[float, str]]", 0.33333333320259995], ["Dict[str, Any]", 0.33333333320259995], ["Dict[str, Union[datetime.datetime, datetime.timedelta, int, str]]", 0.33333333320259995], ["dict", 3.022791746344274e-10], ["bool", 8.99213064939781e-11]], "DEFAULT_DATE": [["str", 0.6363860493653496], ["List[str]", 0.09854130901534286], ["Dict[str, Callable[[Any], bool]]", 0.09209337908587], ["Optional[datetime.datetime]", 0.08610035725256096]], "VALUE": [["int", 0.6], ["str", 0.3], ["List[float]", 0.09999999999999999]]}}, {"cls_lc": [[3328, 4], [3332, 44]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[3329, 8], [3332, 44]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "next_dagrun_info", "params": {"last_automated_data_interval": "", "restriction": "", "self": ""}, "params_descr": {"last_automated_data_interval": "", "restriction": "", "self": ""}, "params_occur": {"last_automated_data_interval": [["last_automated_data_interval", "None"]], "restriction": [], "self": []}, "params_p": {"args": [], "kwargs": [], "last_automated_data_interval": [["dict", 0.3603584008963051], ["bool", 0.11451069953107111], ["django.db.models.Model", 0.11451069953107111], ["Optional[gdpr.models.LegalReason]", 0.11451069953107111], ["rotkehlchen.db.dbhandler.DBHandler", 0.1074218064211454]], "restriction": [["str", 0.35153164335350645], ["Dict[str, Any]", 0.34122851578256963], ["Sequence[str]", 0.11717721445116881], ["List[str]", 0.09523779150718316]], "self": []}, "q_name": "test_iter_dagrun_infos_between_error.<locals>.FailingAfterOneTimetable.next_dagrun_info", "ret_exprs": ["return DagRunInfo.interval(start, end)"], "ret_type": "", "ret_type_p": [["str", 0.4299563266738018], ["List[str]", 0.11798199713519793], ["eth.chains.base.BaseChain", 0.08355729528474175], ["bool", 0.08326142865936167]], "variables": {}, "variables_p": {}}], "name": "FailingAfterOneTimetable", "q_name": "test_iter_dagrun_infos_between_error.<locals>.FailingAfterOneTimetable", "variables": {}, "variables_p": {}}, {"cls_lc": [[3489, 4], [3491, 24]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[3490, 8], [3491, 24]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "generate_run_id", "params": {"data_interval": "", "extra": "", "logical_date": "", "run_type": "", "self": ""}, "params_descr": {"data_interval": "", "extra": "", "logical_date": "", "run_type": "", "self": ""}, "params_occur": {"data_interval": [], "extra": [], "logical_date": [], "run_type": [], "self": []}, "params_p": {"args": [], "data_interval": [["bytes", 0.2408847720544409], ["int", 0.2408847720544409], ["Type[object]", 0.10586449880632348], ["MutableSequence[str]", 0.0891916934130785], ["Literal", 0.08297171407820376], ["Iterable[str]", 0.07926410751007801], ["dict", 0.07926410751007801]], "extra": [["bytes", 0.2408847720544409], ["int", 0.2408847720544409], ["Type[object]", 0.10586449880632348], ["MutableSequence[str]", 0.0891916934130785], ["Literal", 0.08297171407820376], ["Iterable[str]", 0.07926410751007801], ["dict", 0.07926410751007801]], "kwargs": [], "logical_date": [["bytes", 0.2408847720544409], ["int", 0.2408847720544409], ["Type[object]", 0.10586449880632348], ["MutableSequence[str]", 0.0891916934130785], ["Literal", 0.08297171407820376], ["Iterable[str]", 0.07926410751007801], ["dict", 0.07926410751007801]], "run_type": [["bytes", 0.2408847720544409], ["int", 0.2408847720544409], ["Type[object]", 0.10586449880632348], ["MutableSequence[str]", 0.0891916934130785], ["Literal", 0.08297171407820376], ["Iterable[str]", 0.07926410751007801], ["dict", 0.07926410751007801]], "self": []}, "q_name": "test_dag_uses_timetable_for_run_id.<locals>.CustomRunIdTimetable.generate_run_id", "ret_exprs": ["return \"abc\""], "ret_type": "builtins.str", "ret_type_p": [["str", 0.409253028798237], ["int", 0.29398195668663396], ["Type[Any]", 0.1007770433907064], ["models.Name", 0.09799398556221131], ["Tuple[str, int]", 0.09799398556221131]], "variables": {}, "variables_p": {}}], "name": "CustomRunIdTimetable", "q_name": "test_dag_uses_timetable_for_run_id.<locals>.CustomRunIdTimetable", "variables": {}, "variables_p": {}}, {"cls_lc": [[3525, 0], [3903, 21]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[3543, 8], [3544, 62]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "teardown_task", "params": {"task_id": ""}, "params_descr": {"task_id": ""}, "params_occur": {"task_id": [["BaseOperator", "task_id", "task_id", "as_teardown"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "task_id": [["str", 0.9141385195733089]]}, "q_name": "TestTaskClearingSetupTeardownBehavior.make_tasks.<locals>.teardown_task", "ret_exprs": ["return BaseOperator(task_id=task_id).as_teardown()"], "ret_type": "", "ret_type_p": [["str", 0.30956289447710655], ["Optional[str]", 0.19333162249153635], ["Dict[str, str]", 0.10276857230336343], ["bytes", 0.09912761806575814], ["int", 0.09261250509674747]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[3546, 8], [3547, 89]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "teardown_task_f", "params": {"task_id": ""}, "params_descr": {"task_id": ""}, "params_occur": {"task_id": [["BaseOperator", "task_id", "task_id", "as_teardown", "on_failure_fail_dagrun", "True"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "task_id": [["str", 0.820166879843532], ["Dict[str, Any]", 0.09289645035755113], ["Union[Literal, str]", 0.08693666979891677]]}, "q_name": "TestTaskClearingSetupTeardownBehavior.make_tasks.<locals>.teardown_task_f", "ret_exprs": ["return BaseOperator(task_id=task_id).as_teardown(on_failure_fail_dagrun=True)"], "ret_type": "", "ret_type_p": [["str", 0.30859585111385995], ["Mapping[str, Any]", 0.27359334468700985], ["Optional[str]", 0.11223238481222049], ["Dict[str, Any]", 0.1051306536188515], ["int", 0.10022388288402909]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[3549, 8], [3550, 48]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "work_task", "params": {"task_id": ""}, "params_descr": {"task_id": ""}, "params_occur": {"task_id": [["BaseOperator", "task_id", "task_id"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "task_id": [["str", 0.8809423941891378], ["List[str]", 0.11905760581086224]]}, "q_name": "TestTaskClearingSetupTeardownBehavior.make_tasks.<locals>.work_task", "ret_exprs": ["return BaseOperator(task_id=task_id)"], "ret_type": "", "ret_type_p": [["str", 0.4124503918282507], ["cmk.utils.type_defs.UserId", 0.10331455863364385], ["Optional[str]", 0.09511614227156646], ["zerver.models.UserProfile", 0.08949505347693472], ["Dict[str, str]", 0.08794043353335694]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[3552, 8], [3553, 59]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "setup_task", "params": {"task_id": ""}, "params_descr": {"task_id": ""}, "params_occur": {"task_id": [["BaseOperator", "task_id", "task_id", "as_setup"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "task_id": [["str", 0.9141385195733089]]}, "q_name": "TestTaskClearingSetupTeardownBehavior.make_tasks.<locals>.setup_task", "ret_exprs": ["return BaseOperator(task_id=task_id).as_setup()"], "ret_type": "", "ret_type_p": [["str", 0.30956289447710655], ["Optional[str]", 0.19333162249153635], ["Dict[str, str]", 0.10276857230336343], ["bytes", 0.09912761806575814], ["int", 0.09261250509674747]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Task factory helper.", "long_descr": "Will give a setup, teardown, work, or teardown-with-dagrun-failure task depending on input.", "ret": null}, "fn_lc": [[3555, 8], [3571, 73]], "fn_var_ln": {"factory": [[3568, 16], [3568, 23]]}, "fn_var_occur": {"factory": [["factory", "setup_task"], ["factory", "work_task"], ["factory", "teardown_task_f"], ["factory", "teardown_task"], ["dag", "task_dict", "get", "task_id", "factory", "task_id", "task_id"]]}, "name": "make_task", "params": {"task_id": ""}, "params_descr": {"task_id": ""}, "params_occur": {"task_id": [["task_id", "startswith"], ["task_id", "startswith"], ["task_id", "startswith"], ["task_id", "startswith"], ["dag", "task_dict", "get", "task_id", "factory", "task_id", "task_id"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "task_id": [["str", 0.7008138316018577], ["int", 0.10893803166835252]]}, "q_name": "TestTaskClearingSetupTeardownBehavior.make_tasks.<locals>.make_task", "ret_exprs": ["return dag.task_dict.get(task_id) or factory(task_id=task_id)"], "ret_type": "", "ret_type_p": [["str", 0.40326075792810445], ["Sequence[str]", 0.18865281476273849], ["audiopyle.lib.models.plugin.VampyPlugin", 0.11804239007970718], ["Optional[Dict[str, Any]]", 0.09479729768021003], ["bool", 0.09185505348117654]], "variables": {"factory": ""}, "variables_p": {"factory": [["Dict[str, Any]", 0.2920966999059759], ["str", 0.2430343760223242], ["float", 0.1101440158156365], ["Dict[Any, str]", 0.09797045472569584], ["raiden.utils.Any", 0.08245611920388063]]}}, {"docstring": {"func": "Helper for building setup and teardown tasks for testing.", "long_descr": "Given an input such as 's1, w1, t1, tf1', returns setup task \"s1\", normal task \"w1\"\n(the w means *work*), teardown task \"t1\", and teardown task \"tf1\" where the f means\non_failure_fail_dagrun has been set to true.", "ret": null}, "fn_lc": [[3534, 4], [3573, 60]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "make_tasks", "params": {"dag": "", "input_str": ""}, "params_descr": {"dag": "", "input_str": ""}, "params_occur": {"dag": [], "input_str": [["make_task", "x", "x", "input_str", "split"]]}, "params_p": {"args": [], "dag": [["bool", 0.733804232546979], ["float", 0.18392108012874367], ["Union[bool, int]", 0.08227468732427726]], "input_str": [["str", 0.5566583823881177], ["List[str]", 0.23149578173615773], ["int", 0.1100580704049868], ["float", 0.10178776547073787]], "kwargs": [], "self": []}, "q_name": "TestTaskClearingSetupTeardownBehavior.make_tasks", "ret_exprs": ["return (make_task(x) for x in input_str.split(\", \"))"], "ret_type": "", "ret_type_p": [["str", 0.2119838999640958], ["float", 0.1833353924140486], ["List[str]", 0.17309583724593083], ["bool", 0.0927196568662063]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Helper to return tasks that would be cleared if **downstream** selected.", "long_descr": null, "ret": null}, "fn_lc": [[3576, 4], [3585, 9]], "fn_var_ln": {"upstream": [[3578, 8], [3578, 16]]}, "fn_var_occur": {"upstream": [["upstream", "False"], ["set", "task", "dag", "partial_subset", "task_ids_or_regex", "task", "task_id", "include_downstream", "upstream", "include_upstream", "upstream", "tasks"]]}, "name": "cleared_downstream", "params": {"task": ""}, "params_descr": {"task": ""}, "params_occur": {"task": [["set", "task", "dag", "partial_subset", "task_ids_or_regex", "task", "task_id", "include_downstream", "upstream", "include_upstream", "upstream", "tasks"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "task": [["str", 0.21897019031516646], ["Mapping[str, Any]", 0.09920690174802188], ["annofabapi.models.Task", 0.09609576462936992], ["List[google.cloud.tasks_v2.types.task_pb2.Task]", 0.09478671287032696], ["taskiapplication.models.task.Task", 0.07419243657873625], ["golem.task.taskbase.Task", 0.0701392739852081], ["int", 0.06551449389394719]]}, "q_name": "TestTaskClearingSetupTeardownBehavior.cleared_downstream", "ret_exprs": ["return set( task.dag.partial_subset( task_ids_or_regex=[task.task_id], include_downstream=not upstream, include_upstream=upstream, ).tasks)"], "ret_type": "", "ret_type_p": [["int", 0.20725411180518205], ["str", 0.20647076028048394], ["Iterable[str]", 0.11134668967731919], ["excars.models.profiles.Profile", 0.09544624561303201]], "variables": {"upstream": ""}, "variables_p": {"upstream": [["str", 0.2860939655730285], ["Dict[str, Any]", 0.2014947758695843], ["o2a.converter.task.Task", 0.11373331917417696], ["Dict[str, str]", 0.1042744520175687], ["List[Tuple[str, Any]]", 0.08949826282310187]]}}, {"docstring": {"func": "Helper to return tasks that would be cleared if **upstream** selected.", "long_descr": null, "ret": null}, "fn_lc": [[3588, 4], [3597, 9]], "fn_var_ln": {"upstream": [[3590, 8], [3590, 16]]}, "fn_var_occur": {"upstream": [["upstream", "True"], ["set", "task", "dag", "partial_subset", "task_ids_or_regex", "task", "task_id", "include_downstream", "upstream", "include_upstream", "upstream", "tasks"]]}, "name": "cleared_upstream", "params": {"task": ""}, "params_descr": {"task": ""}, "params_occur": {"task": [["set", "task", "dag", "partial_subset", "task_ids_or_regex", "task", "task_id", "include_downstream", "upstream", "include_upstream", "upstream", "tasks"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "task": [["str", 0.21897019031516646], ["Mapping[str, Any]", 0.09920690174802188], ["annofabapi.models.Task", 0.09609576462936992], ["List[google.cloud.tasks_v2.types.task_pb2.Task]", 0.09478671287032696], ["taskiapplication.models.task.Task", 0.07419243657873625], ["golem.task.taskbase.Task", 0.0701392739852081], ["int", 0.06551449389394719]]}, "q_name": "TestTaskClearingSetupTeardownBehavior.cleared_upstream", "ret_exprs": ["return set( task.dag.partial_subset( task_ids_or_regex=task.task_id, include_downstream=not upstream, include_upstream=upstream, ).tasks)"], "ret_type": "", "ret_type_p": [["int", 0.20725411180518205], ["str", 0.20647076028048394], ["Iterable[str]", 0.11134668967731919], ["excars.models.profiles.Profile", 0.09544624561303201]], "variables": {"upstream": ""}, "variables_p": {"upstream": [["str", 0.19306774229244722], ["dict", 0.1554447491373834], ["Dict[int, Set[Any]]", 0.14936275846726466], ["Optional[\"Lecture\"]", 0.08903014632234207], ["Union[Literal, Literal]", 0.08758807353435953], ["bool", 0.085531494396759], ["int", 0.08148477528217055], ["OrderedDict", 0.07885117436478899]]}}, {"docstring": {"func": "Helper to return tasks that would be cleared if **upstream** selected.", "long_descr": null, "ret": null}, "fn_lc": [[3600, 4], [3608, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "cleared_neither", "params": {"task": ""}, "params_descr": {"task": ""}, "params_occur": {"task": [["set", "task", "dag", "partial_subset", "task_ids_or_regex", "task", "task_id", "include_downstream", "False", "include_upstream", "False", "tasks"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "task": [["str", 0.2365439245196696], ["Mapping[str, Any]", 0.10499272322386351], ["annofabapi.models.Task", 0.10300884037116564], ["List[google.cloud.tasks_v2.types.task_pb2.Task]", 0.08454702188852234], ["khetha.models.Task", 0.06541258102473511], ["golem.task.taskbase.Task", 0.0648903273907907]]}, "q_name": "TestTaskClearingSetupTeardownBehavior.cleared_neither", "ret_exprs": ["return set( task.dag.partial_subset( task_ids_or_regex=[task.task_id], include_downstream=False, include_upstream=False, ).tasks)"], "ret_type": "", "ret_type_p": [["int", 0.20725411180518205], ["str", 0.20647076028048394], ["Iterable[str]", 0.11134668967731919], ["excars.models.profiles.Profile", 0.09544624561303201]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[3610, 4], [3645, 64]], "fn_var_ln": {"s1": [[3612, 12], [3612, 14]], "t1": [[3612, 28], [3612, 30]], "w1": [[3612, 16], [3612, 18]], "w2": [[3612, 20], [3612, 22]], "w3": [[3612, 24], [3612, 26]]}, "fn_var_occur": {"s1": [["s1", "w1", "w2", "w3", "t1", "self", "make_tasks", "dag"], ["s1", "w1", "w2", "w3"], ["s1", "t1"], ["set", "w1", "get_upstreams_only_setups_and_teardowns", "s1", "t1"], ["self", "cleared_downstream", "w1", "s1", "w1", "w2", "w3", "t1"], ["self", "cleared_upstream", "w1", "s1", "w1", "t1"], ["set", "w2", "get_upstreams_only_setups_and_teardowns", "s1", "t1"], ["set", "w2", "get_upstreams_follow_setups", "s1", "w1", "t1"], ["self", "cleared_downstream", "w2", "s1", "w2", "w3", "t1"], ["self", "cleared_upstream", "w2", "s1", "w1", "w2", "t1"], ["self", "cleared_downstream", "w3", "s1", "w3", "t1"], ["self", "cleared_upstream", "w3", "s1", "w1", "w2", "w3", "t1"]], "t1": [["s1", "w1", "w2", "w3", "t1", "self", "make_tasks", "dag"], ["w3", "t1"], ["self", "cleared_downstream", "w2", "w2", "w3", "t1"], ["s1", "t1"], ["set", "w1", "get_upstreams_only_setups_and_teardowns", "s1", "t1"], ["self", "cleared_downstream", "w1", "s1", "w1", "w2", "w3", "t1"], ["self", "cleared_upstream", "w1", "s1", "w1", "t1"], ["set", "w2", "get_upstreams_only_setups_and_teardowns", "s1", "t1"], ["set", "w2", "get_upstreams_follow_setups", "s1", "w1", "t1"], ["self", "cleared_downstream", "w2", "s1", "w2", "w3", "t1"], ["self", "cleared_upstream", "w2", "s1", "w1", "w2", "t1"], ["self", "cleared_downstream", "w3", "s1", "w3", "t1"], ["self", "cleared_upstream", "w3", "s1", "w1", "w2", "w3", "t1"]], "w1": [["s1", "w1", "w2", "w3", "t1", "self", "make_tasks", "dag"], ["s1", "w1", "w2", "w3"], ["set", "w1", "get_upstreams_only_setups_and_teardowns", "set"], ["set", "w1", "get_upstreams_only_setups_and_teardowns", "s1", "t1"], ["self", "cleared_downstream", "w1", "s1", "w1", "w2", "w3", "t1"], ["self", "cleared_upstream", "w1", "s1", "w1", "t1"], ["set", "w2", "get_upstreams_follow_setups", "s1", "w1", "t1"], ["self", "cleared_upstream", "w2", "s1", "w1", "w2", "t1"], ["self", "cleared_upstream", "w3", "s1", "w1", "w2", "w3", "t1"]], "w2": [["s1", "w1", "w2", "w3", "t1", "self", "make_tasks", "dag"], ["s1", "w1", "w2", "w3"], ["set", "w2", "get_upstreams_only_setups_and_teardowns", "set"], ["self", "cleared_downstream", "w2", "w2", "w3"], ["set", "w2", "get_upstreams_only_setups_and_teardowns", "set"], ["self", "cleared_downstream", "w2", "w2", "w3", "t1"], ["self", "cleared_downstream", "w1", "s1", "w1", "w2", "w3", "t1"], ["set", "w2", "get_upstreams_only_setups_and_teardowns", "s1", "t1"], ["set", "w2", "get_upstreams_follow_setups", "s1", "w1", "t1"], ["self", "cleared_downstream", "w2", "s1", "w2", "w3", "t1"], ["self", "cleared_upstream", "w2", "s1", "w1", "w2", "t1"], ["self", "cleared_upstream", "w3", "s1", "w1", "w2", "w3", "t1"]], "w3": [["s1", "w1", "w2", "w3", "t1", "self", "make_tasks", "dag"], ["s1", "w1", "w2", "w3"], ["set", "w3", "get_upstreams_only_setups_and_teardowns", "set"], ["self", "cleared_downstream", "w2", "w2", "w3"], ["w3", "t1"], ["self", "cleared_downstream", "w2", "w2", "w3", "t1"], ["self", "cleared_downstream", "w1", "s1", "w1", "w2", "w3", "t1"], ["self", "cleared_downstream", "w2", "s1", "w2", "w3", "t1"], ["self", "cleared_downstream", "w3", "s1", "w3", "t1"], ["self", "cleared_upstream", "w3", "s1", "w1", "w2", "w3", "t1"]]}, "name": "test_get_flat_relative_ids_with_setup", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["s1", "w1", "w2", "w3", "t1", "self", "make_tasks", "dag"], ["self", "cleared_downstream", "w2", "w2", "w3"], ["self", "cleared_downstream", "w2", "w2", "w3", "t1"], ["self", "cleared_downstream", "w1", "s1", "w1", "w2", "w3", "t1"], ["self", "cleared_upstream", "w1", "s1", "w1", "t1"], ["self", "cleared_downstream", "w2", "s1", "w2", "w3", "t1"], ["self", "cleared_upstream", "w2", "s1", "w1", "w2", "t1"], ["self", "cleared_downstream", "w3", "s1", "w3", "t1"], ["self", "cleared_upstream", "w3", "s1", "w1", "w2", "w3", "t1"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestTaskClearingSetupTeardownBehavior.test_get_flat_relative_ids_with_setup", "ret_exprs": [], "ret_type": "", "variables": {"s1": "", "t1": "", "w1": "", "w2": "", "w3": ""}, "variables_p": {"s1": [["str", 0.08115293870760419]], "t1": [["List[datetime.datetime]", 0.10875260019391063]], "w1": [["str", 0.10367019607580943], ["Dict[int, Dict[int, Any]]", 0.10252954532665146]], "w2": [["Dict[int, Dict[int, Any]]", 0.10022663258887461]], "w3": [["Dict[int, Dict[int, Any]]", 0.10022663258887461]]}}, {"docstring": {"func": "Let's test some gnarlier cases here", "long_descr": null, "ret": null}, "fn_lc": [[3647, 4], [3655, 46]], "fn_var_ln": {"s1": [[3650, 12], [3650, 14]], "s2": [[3650, 20], [3650, 22]], "t1": [[3650, 16], [3650, 18]], "t2": [[3650, 24], [3650, 26]]}, "fn_var_occur": {"s1": [["s1", "t1", "s2", "t2", "self", "make_tasks", "dag"], ["s1", "t1"]], "s2": [["s1", "t1", "s2", "t2", "self", "make_tasks", "dag"], ["s2", "t2"]], "t1": [["s1", "t1", "s2", "t2", "self", "make_tasks", "dag"], ["s1", "t1"]], "t2": [["s1", "t1", "s2", "t2", "self", "make_tasks", "dag"], ["s2", "t2"]]}, "name": "test_get_flat_relative_ids_with_setup_nested_ctx_mgr", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["s1", "t1", "s2", "t2", "self", "make_tasks", "dag"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestTaskClearingSetupTeardownBehavior.test_get_flat_relative_ids_with_setup_nested_ctx_mgr", "ret_exprs": [], "ret_type": "", "variables": {"s1": "", "s2": "", "t1": "", "t2": ""}, "variables_p": {"s1": [["float", 0.26699792033809255], ["List[str]", 0.1616724479041669], ["str", 0.09839560629377606]], "s2": [["float", 0.26699792033809255], ["List[str]", 0.1616724479041669], ["str", 0.09839560629377606]], "t1": [["float", 0.42797911516852855], ["List[datetime.datetime]", 0.1458844119697994], ["Tuple[Literal, Literal]", 0.09220632692235642], ["List[str]", 0.08743787169647023], ["Tuple[List[Any], List[Any], List[Any], List[Any], List[Any], List[Any], float]", 0.07940883274889377]], "t2": [["float", 0.42797911516852855], ["List[datetime.datetime]", 0.1458844119697994], ["Tuple[Literal, Literal]", 0.09220632692235642], ["List[str]", 0.08743787169647023], ["Tuple[List[Any], List[Any], List[Any], List[Any], List[Any], List[Any], float]", 0.07940883274889377]]}}, {"docstring": {"func": "Let's test some gnarlier cases here", "long_descr": null, "ret": null}, "fn_lc": [[3658, 4], [3682, 58]], "fn_var_ln": {"s1": [[3661, 12], [3661, 14]], "s2": [[3661, 20], [3661, 22]], "t1": [[3661, 16], [3661, 18]], "t2": [[3661, 24], [3661, 26]], "w1": [[3661, 28], [3661, 30]], "w2": [[3661, 32], [3661, 34]], "w3": [[3661, 36], [3661, 38]]}, "fn_var_occur": {"s1": [["s1", "t1", "s2", "t2", "w1", "w2", "w3", "self", "make_tasks", "dag"], ["s1", "t1"], ["s1", "w1", "t1"], ["s1", "s2"], ["self", "cleared_downstream", "w1", "s1", "w1", "t1"], ["self", "cleared_upstream", "w1", "s1", "w1", "t1"], ["self", "cleared_upstream", "w2", "s1", "t1", "s2", "w2", "t2"], ["self", "cleared_upstream", "w3", "s1", "t1", "s2", "w2", "w3", "t2"]], "s2": [["s1", "t1", "s2", "t2", "w1", "w2", "w3", "self", "make_tasks", "dag"], ["s1", "s2"], ["s2", "t2"], ["s2", "w2", "w3", "t2"], ["self", "cleared_upstream", "w2", "s1", "t1", "s2", "w2", "t2"], ["self", "cleared_downstream", "w2", "s2", "w2", "w3", "t2"], ["self", "cleared_upstream", "w3", "s1", "t1", "s2", "w2", "w3", "t2"], ["self", "cleared_downstream", "w3", "s2", "w3", "t2"]], "t1": [["s1", "t1", "s2", "t2", "w1", "w2", "w3", "self", "make_tasks", "dag"], ["s1", "t1"], ["s1", "w1", "t1"], ["self", "cleared_downstream", "w1", "s1", "w1", "t1"], ["self", "cleared_upstream", "w1", "s1", "w1", "t1"], ["t1", "w2", "get_flat_relatives", "upstream", "False"], ["self", "cleared_upstream", "w2", "s1", "t1", "s2", "w2", "t2"], ["self", "cleared_upstream", "w3", "s1", "t1", "s2", "w2", "w3", "t2"]], "t2": [["s1", "t1", "s2", "t2", "w1", "w2", "w3", "self", "make_tasks", "dag"], ["s2", "t2"], ["s2", "w2", "w3", "t2"], ["self", "cleared_upstream", "w2", "s1", "t1", "s2", "w2", "t2"], ["self", "cleared_downstream", "w2", "s2", "w2", "w3", "t2"], ["self", "cleared_upstream", "w3", "s1", "t1", "s2", "w2", "w3", "t2"], ["self", "cleared_downstream", "w3", "s2", "w3", "t2"]], "w1": [["s1", "t1", "s2", "t2", "w1", "w2", "w3", "self", "make_tasks", "dag"], ["s1", "w1", "t1"], ["w1", "get_flat_relative_ids", "upstream", "True"], ["w1", "get_flat_relative_ids", "upstream", "False"], ["self", "cleared_downstream", "w1", "s1", "w1", "t1"], ["self", "cleared_upstream", "w1", "s1", "w1", "t1"]], "w2": [["s1", "t1", "s2", "t2", "w1", "w2", "w3", "self", "make_tasks", "dag"], ["s2", "w2", "w3", "t2"], ["t1", "w2", "get_flat_relatives", "upstream", "False"], ["self", "cleared_upstream", "w2", "s1", "t1", "s2", "w2", "t2"], ["self", "cleared_downstream", "w2", "s2", "w2", "w3", "t2"], ["self", "cleared_upstream", "w3", "s1", "t1", "s2", "w2", "w3", "t2"]], "w3": [["s1", "t1", "s2", "t2", "w1", "w2", "w3", "self", "make_tasks", "dag"], ["s2", "w2", "w3", "t2"], ["w3", "get_flat_relative_ids", "upstream", "True"], ["w3", "get_flat_relative_ids", "upstream", "False"], ["self", "cleared_downstream", "w2", "s2", "w2", "w3", "t2"], ["self", "cleared_upstream", "w3", "s1", "t1", "s2", "w2", "w3", "t2"], ["self", "cleared_downstream", "w3", "s2", "w3", "t2"]]}, "name": "test_get_flat_relative_ids_with_setup_nested_no_ctx_mgr", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["s1", "t1", "s2", "t2", "w1", "w2", "w3", "self", "make_tasks", "dag"], ["self", "cleared_downstream", "w1", "s1", "w1", "t1"], ["self", "cleared_upstream", "w1", "s1", "w1", "t1"], ["self", "cleared_upstream", "w2", "s1", "t1", "s2", "w2", "t2"], ["self", "cleared_downstream", "w2", "s2", "w2", "w3", "t2"], ["self", "cleared_upstream", "w3", "s1", "t1", "s2", "w2", "w3", "t2"], ["self", "cleared_downstream", "w3", "s2", "w3", "t2"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestTaskClearingSetupTeardownBehavior.test_get_flat_relative_ids_with_setup_nested_no_ctx_mgr", "ret_exprs": [], "ret_type": "", "variables": {"s1": "", "s2": "", "t1": "", "t2": "", "w1": "", "w2": "", "w3": ""}, "variables_p": {"s1": [["Set[int]", 0.21774484781009737], ["str", 0.16105567188753328], ["Tuple[Literal, Literal]", 0.11129652590555991], ["int", 0.11122544637415167], ["List[str]", 0.08588446741966563], ["float", 0.07881912209322796]], "s2": [["Set[int]", 0.24619586172474486], ["int", 0.10763490729878693], ["Tuple[Literal, Literal]", 0.10523655093011176], ["List[str]", 0.08595388578018268], ["Tuple[int, int]", 0.07846432551938191], ["float", 0.07782713357081068], ["str", 0.07369948596248262], ["List[int]", 0.07362115076591483]], "t1": [["int", 0.21336212642507346], ["str", 0.16525672780851047], ["Type[T]", 0.09826774812570067], ["datetime.datetime.datetime", 0.07357065578230992]], "t2": [["int", 0.21371851325473434], ["float", 0.15751386604383952], ["datetime.datetime.datetime", 0.09620679276460385], ["Tuple[int, int]", 0.07872148688524809]], "w1": [["float", 0.356526460029566], ["list", 0.20411975593462328], ["int", 0.17437581864230892], ["Set[datetime.date]", 0.09223001559466239], ["str", 0.08727667752269799], ["datetime.datetime.timedelta", 0.0854712722761414]], "w2": [["List[float]", 0.2633493240434818], ["int", 0.228329450368602], ["list", 0.19364853147238154], ["str", 0.0976890116634844]], "w3": [["List[float]", 0.5763130284433459], ["int", 0.21050535228844652], ["list", 0.09304181396714765]]}}, {"docstring": {"func": "A setup needs a teardown to define its scope.", "long_descr": null, "ret": null}, "fn_lc": [[3684, 4], [3708, 37]], "fn_var_ln": {"s1": [[3687, 12], [3687, 14]], "t1": [[3687, 20], [3687, 22]], "w1": [[3687, 16], [3687, 18]]}, "fn_var_occur": {"s1": [["s1", "w1", "t1", "self", "make_tasks", "dag"], ["s1", "w1"], ["s1", "t1"]], "t1": [["s1", "w1", "t1", "self", "make_tasks", "dag"], ["w1", "t1"], ["s1", "t1"]], "w1": [["s1", "w1", "t1", "self", "make_tasks", "dag"], ["s1", "w1"], ["w1", "t1"]]}, "name": "test_setup_without_teardown", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["s1", "w1", "t1", "self", "make_tasks", "dag"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestTaskClearingSetupTeardownBehavior.test_setup_without_teardown", "ret_exprs": [], "ret_type": "", "variables": {"s1": "", "t1": "", "w1": ""}, "variables_p": {"s1": [["int", 0.07691126902006103]], "t1": [["float", 0.2776398247203552], ["str", 0.2283281491887245], ["Tuple[float]", 0.1675080880577417], ["int", 0.09366572697968492]], "w1": [["str", 0.0907519281361882]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[3710, 4], [3726, 66]], "fn_var_ln": {"s1": [[3712, 12], [3712, 14]], "s2": [[3723, 8], [3723, 10]], "t1": [[3712, 24], [3712, 26]], "w1": [[3712, 16], [3712, 18]], "w2": [[3712, 20], [3712, 22]]}, "fn_var_occur": {"s1": [["s1", "w1", "w2", "t1", "self", "make_tasks", "dag"], ["s1", "w1", "w2", "t1"], ["s1", "t1"], ["set", "w1", "get_upstreams_only_setups_and_teardowns", "s1", "t1"], ["self", "cleared_downstream", "w1", "s1", "w1", "w2", "t1"], ["self", "cleared_downstream", "w1", "s1", "w1", "w2", "t1", "s2"]], "s2": [["s2", "BaseOperator", "task_id", "dag", "dag", "as_setup"], ["t1", "s2"], ["self", "cleared_downstream", "w1", "s1", "w1", "w2", "t1", "s2"]], "t1": [["s1", "w1", "w2", "t1", "self", "make_tasks", "dag"], ["s1", "w1", "w2", "t1"], ["s1", "t1"], ["set", "w1", "get_upstreams_only_setups_and_teardowns", "s1", "t1"], ["self", "cleared_downstream", "w1", "s1", "w1", "w2", "t1"], ["t1", "s2"], ["self", "cleared_downstream", "w1", "s1", "w1", "w2", "t1", "s2"]], "w1": [["s1", "w1", "w2", "t1", "self", "make_tasks", "dag"], ["s1", "w1", "w2", "t1"], ["set", "w1", "get_upstreams_only_setups_and_teardowns", "s1", "t1"], ["self", "cleared_downstream", "w1", "s1", "w1", "w2", "t1"], ["w1", "get_flat_relative_ids", "upstream", "False"], ["self", "cleared_downstream", "w1", "s1", "w1", "w2", "t1", "s2"]], "w2": [["s1", "w1", "w2", "t1", "self", "make_tasks", "dag"], ["s1", "w1", "w2", "t1"], ["set", "w2", "get_upstreams_only_setups_and_teardowns", "set"], ["self", "cleared_downstream", "w1", "s1", "w1", "w2", "t1"], ["self", "cleared_downstream", "w2", "w2"], ["self", "cleared_downstream", "w1", "s1", "w1", "w2", "t1", "s2"]]}, "name": "test_get_flat_relative_ids_follows_teardowns", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["s1", "w1", "w2", "t1", "self", "make_tasks", "dag"], ["self", "cleared_downstream", "w1", "s1", "w1", "w2", "t1"], ["self", "cleared_downstream", "w2", "w2"], ["self", "cleared_downstream", "w1", "s1", "w1", "w2", "t1", "s2"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestTaskClearingSetupTeardownBehavior.test_get_flat_relative_ids_follows_teardowns", "ret_exprs": [], "ret_type": "", "variables": {"s1": "", "s2": "", "t1": "", "w1": "", "w2": ""}, "variables_p": {"s1": [], "s2": [["list", 0.21221671824026975], ["int", 0.19312057978462738], ["Type[T]", 0.08796860881844779], ["str", 0.08710884792207689]], "t1": [["List[datetime.datetime]", 0.09923122724178049]], "w1": [["Optional[str]", 0.10080901686412776], ["Dict[int, Dict[int, Any]]", 0.09932191725105917]], "w2": []}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[3728, 4], [3739, 58]], "fn_var_ln": {"s1": [[3730, 12], [3730, 14]], "s2": [[3730, 20], [3730, 22]], "t1": [[3730, 16], [3730, 18]], "t2": [[3730, 24], [3730, 26]], "w1": [[3730, 28], [3730, 30]], "w2": [[3730, 32], [3730, 34]]}, "fn_var_occur": {"s1": [["s1", "t1", "s2", "t2", "w1", "w2", "self", "make_tasks", "dag"], ["s1", "w1", "w2", "t1"], ["s1", "t1"], ["set", "w1", "get_upstreams_only_setups_and_teardowns", "s1", "t1"], ["self", "cleared_downstream", "w1", "s1", "w1", "t1", "w2", "t2"]], "s2": [["s1", "t1", "s2", "t2", "w1", "w2", "self", "make_tasks", "dag"], ["s2", "t2"], ["s2", "w2", "t2"], ["set", "w2", "get_upstreams_only_setups_and_teardowns", "s2", "t2"], ["self", "cleared_downstream", "w2", "s2", "w2", "t2"]], "t1": [["s1", "t1", "s2", "t2", "w1", "w2", "self", "make_tasks", "dag"], ["s1", "w1", "w2", "t1"], ["s1", "t1"], ["set", "w1", "get_upstreams_only_setups_and_teardowns", "s1", "t1"], ["self", "cleared_downstream", "w1", "s1", "w1", "t1", "w2", "t2"]], "t2": [["s1", "t1", "s2", "t2", "w1", "w2", "self", "make_tasks", "dag"], ["s2", "t2"], ["s2", "w2", "t2"], ["self", "cleared_downstream", "w1", "s1", "w1", "t1", "w2", "t2"], ["set", "w2", "get_upstreams_only_setups_and_teardowns", "s2", "t2"], ["self", "cleared_downstream", "w2", "s2", "w2", "t2"]], "w1": [["s1", "t1", "s2", "t2", "w1", "w2", "self", "make_tasks", "dag"], ["s1", "w1", "w2", "t1"], ["set", "w1", "get_upstreams_only_setups_and_teardowns", "s1", "t1"], ["self", "cleared_downstream", "w1", "s1", "w1", "t1", "w2", "t2"]], "w2": [["s1", "t1", "s2", "t2", "w1", "w2", "self", "make_tasks", "dag"], ["s1", "w1", "w2", "t1"], ["s2", "w2", "t2"], ["self", "cleared_downstream", "w1", "s1", "w1", "t1", "w2", "t2"], ["set", "w2", "get_upstreams_only_setups_and_teardowns", "s2", "t2"], ["self", "cleared_downstream", "w2", "s2", "w2", "t2"]]}, "name": "test_get_flat_relative_ids_two_tasks_diff_setup_teardowns", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["s1", "t1", "s2", "t2", "w1", "w2", "self", "make_tasks", "dag"], ["self", "cleared_downstream", "w1", "s1", "w1", "t1", "w2", "t2"], ["self", "cleared_downstream", "w2", "s2", "w2", "t2"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestTaskClearingSetupTeardownBehavior.test_get_flat_relative_ids_two_tasks_diff_setup_teardowns", "ret_exprs": [], "ret_type": "", "variables": {"s1": "", "s2": "", "t1": "", "t2": "", "w1": "", "w2": ""}, "variables_p": {"s1": [["int", 0.22167519838022703], ["str", 0.10103121950805702]], "s2": [["int", 0.14202861287906585], ["str", 0.09601676158170482], ["List[str]", 0.08932171889959113], ["Set[int]", 0.08499265081018982], ["Tuple[Literal, Literal]", 0.08198075843491276]], "t1": [["float", 0.2669074437937152], ["int", 0.12420385025184125], ["List[datetime.datetime]", 0.1193165748370502], ["str", 0.08668708211387421], ["Type[T]", 0.08561504648880823]], "t2": [["int", 0.20567773050762794], ["float", 0.16069052449759624], ["datetime.datetime.datetime", 0.08382374487217575], ["Tuple[int, int]", 0.0822151975034319]], "w1": [["bytes", 0.36196915138317515], ["int", 0.3437317283869631], ["list", 0.20664957597717956]], "w2": [["int", 0.29806738397863475], ["float", 0.2045176877491422], ["list", 0.12038723760128402], ["List[int]", 0.09218488589366852], ["List[float]", 0.08295496087749817]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[3741, 4], [3759, 72]], "fn_var_ln": {"s1a": [[3743, 12], [3743, 15]], "s1b": [[3743, 17], [3743, 20]], "s2": [[3743, 26], [3743, 28]], "s3": [[3743, 34], [3743, 36]], "t1": [[3743, 22], [3743, 24]], "t2": [[3743, 30], [3743, 32]], "t3a": [[3743, 38], [3743, 41]], "t3b": [[3743, 43], [3743, 46]], "w1": [[3743, 48], [3743, 50]], "w2": [[3743, 52], [3743, 54]]}, "fn_var_occur": {"s1a": [["s1a", "s1b", "t1", "s2", "t2", "s3", "t3a", "t3b", "w1", "w2", "self", "make_tasks", "dag"], ["s1a", "s1b", "t1"], ["s1a", "s1b", "w1", "w2", "t1"], ["set", "w1", "get_upstreams_only_setups_and_teardowns", "s1a", "s1b", "t1"], ["self", "cleared_downstream", "w1", "s1a", "s1b", "w1", "t1", "t3a", "t3b", "w2", "t2"]], "s1b": [["s1a", "s1b", "t1", "s2", "t2", "s3", "t3a", "t3b", "w1", "w2", "self", "make_tasks", "dag"], ["s1a", "s1b", "t1"], ["s1a", "s1b", "w1", "w2", "t1"], ["set", "w1", "get_upstreams_only_setups_and_teardowns", "s1a", "s1b", "t1"], ["self", "cleared_downstream", "w1", "s1a", "s1b", "w1", "t1", "t3a", "t3b", "w2", "t2"]], "s2": [["s1a", "s1b", "t1", "s2", "t2", "s3", "t3a", "t3b", "w1", "w2", "self", "make_tasks", "dag"], ["s2", "t2"], ["s2", "w2", "t2"], ["set", "w2", "get_upstreams_only_setups_and_teardowns", "s2", "t2", "s3", "t3a", "t3b"], ["self", "cleared_downstream", "w2", "s2", "s3", "w2", "t2", "t3a", "t3b"]], "s3": [["s1a", "s1b", "t1", "s2", "t2", "s3", "t3a", "t3b", "w1", "w2", "self", "make_tasks", "dag"], ["s3", "w2", "t3a", "t3b"], ["s3", "t3a", "t3b"], ["set", "w2", "get_upstreams_only_setups_and_teardowns", "s2", "t2", "s3", "t3a", "t3b"], ["self", "cleared_downstream", "w2", "s2", "s3", "w2", "t2", "t3a", "t3b"]], "t1": [["s1a", "s1b", "t1", "s2", "t2", "s3", "t3a", "t3b", "w1", "w2", "self", "make_tasks", "dag"], ["s1a", "s1b", "t1"], ["s1a", "s1b", "w1", "w2", "t1"], ["set", "w1", "get_upstreams_only_setups_and_teardowns", "s1a", "s1b", "t1"], ["self", "cleared_downstream", "w1", "s1a", "s1b", "w1", "t1", "t3a", "t3b", "w2", "t2"]], "t2": [["s1a", "s1b", "t1", "s2", "t2", "s3", "t3a", "t3b", "w1", "w2", "self", "make_tasks", "dag"], ["s2", "t2"], ["s2", "w2", "t2"], ["self", "cleared_downstream", "w1", "s1a", "s1b", "w1", "t1", "t3a", "t3b", "w2", "t2"], ["set", "w2", "get_upstreams_only_setups_and_teardowns", "s2", "t2", "s3", "t3a", "t3b"], ["self", "cleared_downstream", "w2", "s2", "s3", "w2", "t2", "t3a", "t3b"]], "t3a": [["s1a", "s1b", "t1", "s2", "t2", "s3", "t3a", "t3b", "w1", "w2", "self", "make_tasks", "dag"], ["s3", "w2", "t3a", "t3b"], ["s3", "t3a", "t3b"], ["self", "cleared_downstream", "w1", "s1a", "s1b", "w1", "t1", "t3a", "t3b", "w2", "t2"], ["set", "w2", "get_upstreams_only_setups_and_teardowns", "s2", "t2", "s3", "t3a", "t3b"], ["self", "cleared_downstream", "w2", "s2", "s3", "w2", "t2", "t3a", "t3b"]], "t3b": [["s1a", "s1b", "t1", "s2", "t2", "s3", "t3a", "t3b", "w1", "w2", "self", "make_tasks", "dag"], ["s3", "w2", "t3a", "t3b"], ["s3", "t3a", "t3b"], ["self", "cleared_downstream", "w1", "s1a", "s1b", "w1", "t1", "t3a", "t3b", "w2", "t2"], ["set", "w2", "get_upstreams_only_setups_and_teardowns", "s2", "t2", "s3", "t3a", "t3b"], ["self", "cleared_downstream", "w2", "s2", "s3", "w2", "t2", "t3a", "t3b"]], "w1": [["s1a", "s1b", "t1", "s2", "t2", "s3", "t3a", "t3b", "w1", "w2", "self", "make_tasks", "dag"], ["s1a", "s1b", "w1", "w2", "t1"], ["set", "w1", "get_upstreams_only_setups_and_teardowns", "s1a", "s1b", "t1"], ["self", "cleared_downstream", "w1", "s1a", "s1b", "w1", "t1", "t3a", "t3b", "w2", "t2"]], "w2": [["s1a", "s1b", "t1", "s2", "t2", "s3", "t3a", "t3b", "w1", "w2", "self", "make_tasks", "dag"], ["s1a", "s1b", "w1", "w2", "t1"], ["s2", "w2", "t2"], ["s3", "w2", "t3a", "t3b"], ["self", "cleared_downstream", "w1", "s1a", "s1b", "w1", "t1", "t3a", "t3b", "w2", "t2"], ["set", "w2", "get_upstreams_only_setups_and_teardowns", "s2", "t2", "s3", "t3a", "t3b"], ["self", "cleared_downstream", "w2", "s2", "s3", "w2", "t2", "t3a", "t3b"]]}, "name": "test_get_flat_relative_ids_one_task_multiple_setup_teardowns", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["s1a", "s1b", "t1", "s2", "t2", "s3", "t3a", "t3b", "w1", "w2", "self", "make_tasks", "dag"], ["self", "cleared_downstream", "w1", "s1a", "s1b", "w1", "t1", "t3a", "t3b", "w2", "t2"], ["self", "cleared_downstream", "w2", "s2", "s3", "w2", "t2", "t3a", "t3b"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestTaskClearingSetupTeardownBehavior.test_get_flat_relative_ids_one_task_multiple_setup_teardowns", "ret_exprs": [], "ret_type": "", "variables": {"s1a": "", "s1b": "", "s2": "", "s3": "", "t1": "", "t2": "", "t3a": "", "t3b": "", "w1": "", "w2": ""}, "variables_p": {"s1a": [["float", 0.41518299703462413], ["str", 0.09951606423370891], ["Tuple[Literal, Literal]", 0.09941135893933019]], "s1b": [["float", 0.32928325846838585], ["int", 0.09547144685293722], ["List[Union[Any, Any]]", 0.09333379740809833], ["Dict[str, int]", 0.09125941642666364], ["List[int]", 0.08952696704501431]], "s2": [["float", 0.1910259598480503], ["str", 0.10042883381839547]], "s3": [["int", 0.13741057822572073], ["Set[int]", 0.09108343341206616], ["float", 0.08632790203929919], ["List[int]", 0.08592522217646108]], "t1": [["float", 0.26546843189765934], ["str", 0.07886330034796635]], "t2": [["int", 0.24953720392092293], ["float", 0.10461972998424758], ["Tuple[int, int]", 0.0939900485782983], ["Set[int]", 0.08473753048760614]], "t3a": [["List[float]", 0.17406606736142216]], "t3b": [["float", 0.30160832358281797], ["List[int]", 0.21547568479988782], ["int", 0.095356589218988]], "w1": [["int", 0.2797332967755511], ["float", 0.10773717162862335], ["List[int]", 0.10540872289565814], ["Counter[Any]", 0.09437097702563264]], "w2": [["float", 0.3102276130335629], ["bool", 0.11000759165832616], ["Counter[Any]", 0.10987163093636572], ["int", 0.10864353322874656], ["List[int]", 0.10766072552773728], ["myia.utils.unify.SVar", 0.08687631646770164], ["List[List[str]]", 0.08230176011766642]]}}, {"docstring": {"func": "This is a dag with a setup / teardown at dag level and two task groups that have", "long_descr": "their own setups / teardowns.\n\nWhen we do tg >> dag_teardown, teardowns should be excluded from tg leaves.", "ret": null}, "fn_lc": [[3761, 4], [3825, 9]], "fn_var_ln": {"dag": [[3767, 8], [3767, 11]], "dag_setup": [[3769, 12], [3769, 21]], "dag_teardown": [[3770, 12], [3770, 24]], "g2_group_teardown": [[3784, 8], [3784, 25]], "g2_w2": [[3782, 8], [3782, 13]], "g2_w3": [[3783, 8], [3783, 13]], "group_setup": [[3774, 20], [3774, 31]], "group_teardown": [[3778, 20], [3778, 34]], "w1": [[3775, 20], [3775, 22]], "w2": [[3776, 20], [3776, 22]], "w3": [[3777, 20], [3777, 22]]}, "fn_var_occur": {"dag": [["dag", "DAG", "dag_id", "start_date", "pendulum", "now"], ["g2_w2", "dag", "task_dict"], ["g2_w3", "dag", "task_dict"], ["g2_group_teardown", "dag", "task_dict"]], "dag_setup": [["dag_setup", "BaseOperator", "task_id", "as_setup"], ["dag_setup", "dag_teardown"], ["dag_setup", "tg", "dag_teardown"]], "dag_teardown": [["dag_teardown", "BaseOperator", "task_id", "as_teardown"], ["dag_setup", "dag_teardown"], ["dag_setup", "tg", "dag_teardown"], ["dag_teardown", "upstream_task_ids"]], "g2_group_teardown": [["g2_group_teardown", "dag", "task_dict"], ["g2_group_teardown", "downstream_task_ids"], ["g2_group_teardown", "downstream_task_ids", "set"]], "g2_w2": [["g2_w2", "dag", "task_dict"], ["x", "task_id", "x", "g2_w2", "get_upstreams_only_setups_and_teardowns"], ["x", "task_id", "x", "self", "cleared_downstream", "g2_w2"], ["x", "task_id", "x", "self", "cleared_upstream", "g2_w2"]], "g2_w3": [["g2_w3", "dag", "task_dict"], ["g2_w3", "downstream_task_ids"]], "group_setup": [["group_setup", "BaseOperator", "task_id", "as_setup"], ["group_setup", "w1", "w2", "w3", "group_teardown"], ["group_setup", "group_teardown"]], "group_teardown": [["group_teardown", "BaseOperator", "task_id", "as_teardown"], ["group_setup", "w1", "w2", "w3", "group_teardown"], ["group_setup", "group_teardown"]], "w1": [["w1", "BaseOperator", "task_id"], ["group_setup", "w1", "w2", "w3", "group_teardown"]], "w2": [["w2", "BaseOperator", "task_id"], ["group_setup", "w1", "w2", "w3", "group_teardown"]], "w3": [["w3", "BaseOperator", "task_id"], ["group_setup", "w1", "w2", "w3", "group_teardown"]]}, "name": "test_get_flat_relative_ids_with_setup_and_groups", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["x", "task_id", "x", "self", "cleared_downstream", "g2_w2"], ["x", "task_id", "x", "self", "cleared_upstream", "g2_w2"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestTaskClearingSetupTeardownBehavior.test_get_flat_relative_ids_with_setup_and_groups", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "dag_setup": "", "dag_teardown": "", "g2_group_teardown": "", "g2_w2": "", "g2_w3": "", "group_setup": "", "group_teardown": "", "w1": "", "w2": "", "w3": ""}, "variables_p": {"dag": [["str", 0.6444449988934204], ["List[Tuple[str, Any]]", 0.21775893368227314], ["khetha.models.Question", 0.07531862637244133]], "dag_setup": [["str", 0.4207431954599512], ["int", 0.29288028961422735], ["List[str]", 0.11320923670764513], ["Dict[str, Union[Any, Any, Any, Any]]", 0.08897563091948497], ["ide.pathx.Path", 0.08419164729869132]], "dag_teardown": [["str", 0.39710934135481263], ["dict", 0.11332084985467449], ["Dict[str, Dict[str, int]]", 0.09633822485029286], ["Dict[str, Union[Any, Any]]", 0.0939616558182942], ["golem.rpc.session.Publisher", 0.0938398839595887]], "g2_group_teardown": [["Dict[str, dict]", 0.10123575193660399]], "g2_w2": [["list", 0.5715308581611331]], "g2_w3": [["str", 0.18832270829224523], ["List[Union[Any, Any]]", 0.0935286993042736], ["dict", 0.09241582650036274], ["List[str]", 0.0891985719626771]], "group_setup": [["int", 0.7324495625132156]], "group_teardown": [["int", 0.7324495625132156]], "w1": [["int", 0.5175555505775559], ["str", 0.18411296266072513], ["Counter[int]", 0.08960537000504594]], "w2": [["int", 0.5175555505775559], ["str", 0.18411296266072513], ["Counter[int]", 0.08960537000504594]], "w3": [["int", 0.5175555505775559], ["str", 0.18411296266072513], ["Counter[int]", 0.08960537000504594]]}}, {"docstring": {"func": "When you have a work task that comes after a setup, then if you clear upstream", "long_descr": "the setup (and its teardown) will be cleared even though strictly speaking you don't\n\"require\" it since, depending on speed of execution, it might be torn down by t1\nbefore / while w2 runs.  It just gets cleared by virtue of it being upstream, and\nthat's what you requested.  And it's teardown gets cleared too.  But w1 doesn't.", "ret": null}, "fn_lc": [[3827, 4], [3841, 60]], "fn_var_ln": {"s1": [[3836, 12], [3836, 14]], "t1": [[3836, 24], [3836, 26]], "w1": [[3836, 16], [3836, 18]], "w2": [[3836, 20], [3836, 22]]}, "fn_var_occur": {"s1": [["s1", "w1", "w2", "t1", "self", "make_tasks", "dag"], ["s1", "w1", "t1", "as_teardown", "setups", "s1"], ["s1", "w2"], ["self", "cleared_upstream", "w2", "s1", "w2", "t1"]], "t1": [["s1", "w1", "w2", "t1", "self", "make_tasks", "dag"], ["s1", "w1", "t1", "as_teardown", "setups", "s1"], ["self", "cleared_upstream", "w2", "s1", "w2", "t1"]], "w1": [["s1", "w1", "w2", "t1", "self", "make_tasks", "dag"], ["s1", "w1", "t1", "as_teardown", "setups", "s1"]], "w2": [["s1", "w1", "w2", "t1", "self", "make_tasks", "dag"], ["s1", "w2"], ["self", "cleared_upstream", "w2", "s1", "w2", "t1"]]}, "name": "test_clear_upstream_not_your_setup", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["s1", "w1", "w2", "t1", "self", "make_tasks", "dag"], ["self", "cleared_upstream", "w2", "s1", "w2", "t1"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestTaskClearingSetupTeardownBehavior.test_clear_upstream_not_your_setup", "ret_exprs": [], "ret_type": "", "variables": {"s1": "", "t1": "", "w1": "", "w2": ""}, "variables_p": {"s1": [], "t1": [], "w1": [["Optional[str]", 0.12778501618742266]], "w2": []}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[3843, 4], [3853, 62]], "fn_var_ln": {"s1": [[3845, 12], [3845, 14]], "t1": [[3845, 20], [3845, 22]], "w1": [[3845, 16], [3845, 18]]}, "fn_var_occur": {"s1": [["s1", "w1", "t1", "self", "make_tasks", "dag"], ["s1", "t1"], ["s1", "w1", "t1"], ["self", "cleared_downstream", "w1", "s1", "w1", "t1"]], "t1": [["s1", "w1", "t1", "self", "make_tasks", "dag"], ["s1", "t1"], ["self", "cleared_downstream", "t1", "t1"], ["s1", "w1", "t1"], ["self", "cleared_downstream", "t1", "t1"], ["self", "cleared_downstream", "w1", "s1", "w1", "t1"]], "w1": [["s1", "w1", "t1", "self", "make_tasks", "dag"], ["s1", "w1", "t1"], ["self", "cleared_downstream", "w1", "s1", "w1", "t1"]]}, "name": "test_clearing_teardown_no_clear_setup", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["s1", "w1", "t1", "self", "make_tasks", "dag"], ["self", "cleared_downstream", "t1", "t1"], ["self", "cleared_downstream", "t1", "t1"], ["self", "cleared_downstream", "w1", "s1", "w1", "t1"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestTaskClearingSetupTeardownBehavior.test_clearing_teardown_no_clear_setup", "ret_exprs": [], "ret_type": "", "variables": {"s1": "", "t1": "", "w1": ""}, "variables_p": {"s1": [["float", 0.19318460830272274], ["Tuple[float]", 0.09918734163657848], ["int", 0.09735402234795391]], "t1": [["float", 0.23672236739910935], ["List[datetime.datetime]", 0.10748793001744586], ["str", 0.0768065589946273]], "w1": [["List[Tuple[int, int]]", 0.11612660425968037]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[3855, 4], [3867, 55]], "fn_var_ln": {"s1": [[3857, 12], [3857, 14]], "t1": [[3857, 20], [3857, 22]], "w1": [[3857, 16], [3857, 18]]}, "fn_var_occur": {"s1": [["s1", "w1", "t1", "self", "make_tasks", "dag"], ["s1", "t1"], ["s1", "w1", "t1"], ["self", "cleared_upstream", "w1", "s1", "w1", "t1"], ["self", "cleared_downstream", "w1", "s1", "w1", "t1"], ["self", "cleared_neither", "w1", "s1", "w1", "t1"], ["self", "cleared_upstream", "s1", "s1", "t1"], ["self", "cleared_downstream", "s1", "s1", "w1", "t1"], ["self", "cleared_neither", "s1", "s1", "t1"]], "t1": [["s1", "w1", "t1", "self", "make_tasks", "dag"], ["s1", "t1"], ["s1", "w1", "t1"], ["self", "cleared_upstream", "w1", "s1", "w1", "t1"], ["self", "cleared_downstream", "w1", "s1", "w1", "t1"], ["self", "cleared_neither", "w1", "s1", "w1", "t1"], ["self", "cleared_upstream", "s1", "s1", "t1"], ["self", "cleared_downstream", "s1", "s1", "w1", "t1"], ["self", "cleared_neither", "s1", "s1", "t1"]], "w1": [["s1", "w1", "t1", "self", "make_tasks", "dag"], ["s1", "w1", "t1"], ["self", "cleared_upstream", "w1", "s1", "w1", "t1"], ["self", "cleared_downstream", "w1", "s1", "w1", "t1"], ["self", "cleared_neither", "w1", "s1", "w1", "t1"], ["self", "cleared_downstream", "s1", "s1", "w1", "t1"]]}, "name": "test_clearing_setup_clears_teardown", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["s1", "w1", "t1", "self", "make_tasks", "dag"], ["self", "cleared_upstream", "w1", "s1", "w1", "t1"], ["self", "cleared_downstream", "w1", "s1", "w1", "t1"], ["self", "cleared_neither", "w1", "s1", "w1", "t1"], ["self", "cleared_upstream", "s1", "s1", "t1"], ["self", "cleared_downstream", "s1", "s1", "w1", "t1"], ["self", "cleared_neither", "s1", "s1", "t1"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestTaskClearingSetupTeardownBehavior.test_clearing_setup_clears_teardown", "ret_exprs": [], "ret_type": "", "variables": {"s1": "", "t1": "", "w1": ""}, "variables_p": {"s1": [["tuple", 0.42732950983429424], ["float", 0.28068900693836657], ["Tuple[float]", 0.19768346133833398]], "t1": [["float", 0.17767844879677483], ["List[datetime.datetime]", 0.14863801555675607], ["str", 0.08951112314081473]], "w1": [["List[Tuple[int, int]]", 0.10541840539025078], ["str", 0.09773199157882248]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[3882, 12], [3883, 19]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "my_setup", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestTaskClearingSetupTeardownBehavior.test_clearing_setup_clears_teardown_taskflow.<locals>.my_setup", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[3886, 12], [3887, 19]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "my_work", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestTaskClearingSetupTeardownBehavior.test_clearing_setup_clears_teardown_taskflow.<locals>.my_work", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[3890, 12], [3891, 19]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "my_teardown", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestTaskClearingSetupTeardownBehavior.test_clearing_setup_clears_teardown_taskflow.<locals>.my_teardown", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[3878, 4], [3903, 21]], "fn_var_ln": {"s1": [[3893, 12], [3893, 14]], "t1": [[3895, 12], [3895, 14]], "w1": [[3894, 12], [3894, 14]]}, "fn_var_occur": {"s1": [["s1", "my_setup"], ["s1", "w1", "t1"], ["s1", "t1"]], "t1": [["t1", "my_teardown"], ["s1", "w1", "t1"], ["s1", "t1"]], "w1": [["w1", "my_work"], ["s1", "w1", "t1"]]}, "name": "test_clearing_setup_clears_teardown_taskflow", "params": {"downstream": "", "expected": "", "self": "", "upstream": ""}, "params_descr": {"downstream": "", "expected": "", "self": "", "upstream": ""}, "params_occur": {"downstream": [["x", "task_id", "x", "dag", "partial_subset", "include_upstream", "upstream", "include_downstream", "downstream", "tasks", "expected"]], "expected": [["x", "task_id", "x", "dag", "partial_subset", "include_upstream", "upstream", "include_downstream", "downstream", "tasks", "expected"]], "self": [], "upstream": [["x", "task_id", "x", "dag", "partial_subset", "include_upstream", "upstream", "include_downstream", "downstream", "tasks", "expected"]]}, "params_p": {"args": [], "downstream": [["int", 0.0853004507126916]], "expected": [["int", 0.0853004507126916]], "kwargs": [], "self": [], "upstream": [["int", 0.0853004507126916]]}, "q_name": "TestTaskClearingSetupTeardownBehavior.test_clearing_setup_clears_teardown_taskflow", "ret_exprs": [], "ret_type": "", "variables": {"s1": "", "t1": "", "w1": ""}, "variables_p": {"s1": [["str", 0.31161199281094143], ["set", 0.16336794251963177], ["int", 0.12420468620098349], ["List[int]", 0.09748577489948408], ["Set[str]", 0.07443490150828454], ["Generator[int, None, None]", 0.07443490150828454], ["os.terminal_size", 0.07254879231477596]], "t1": [["float", 0.16756294991963466], ["datetime.date.time.timedelta", 0.12218775379092878], ["str", 0.11826836286009461], ["Type[T]", 0.09938418286189118], ["set", 0.09064700625148146], ["os.terminal_size", 0.087031522248499], ["int", 0.08417410275868296]], "w1": [["list", 5.5529804983375574e-11], ["List[int]", 4.8733530425256647e-11], ["List[float]", 4.2605041346893967e-11], ["Dict[str, Any]", 4.209050742793773e-11], ["str", 4.026129513119589e-11], ["int", 3.686551438919584e-11]]}}], "name": "TestTaskClearingSetupTeardownBehavior", "q_name": "TestTaskClearingSetupTeardownBehavior", "variables": {}, "variables_p": {}}], "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[94, 0], [99, 30]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "clear_dags", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "clear_dags", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[103, 0], [106, 23]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "clear_datasets", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "clear_datasets", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[3001, 0], [3003, 59]], "fn_var_ln": {"dag": [[3002, 4], [3002, 7]]}, "fn_var_occur": {"dag": [["dag", "DAG", "timetable", "timetable"], ["dag", "_check_schedule_interval_matches_timetable"]]}, "name": "test_dag_timetable_match_schedule_interval", "params": {"timetable": ""}, "params_descr": {"timetable": ""}, "params_occur": {"timetable": [["dag", "DAG", "timetable", "timetable"]]}, "params_p": {"args": [], "kwargs": [], "timetable": [["pathlib.Path", 0.24576300061642709], ["tests.basilisp.helpers.CompileFn", 0.10625062253754862]]}, "q_name": "test_dag_timetable_match_schedule_interval", "ret_exprs": [], "ret_type": "", "variables": {"dag": ""}, "variables_p": {"dag": [["list", 0.19913377165375157], ["Tuple[Literal, Literal, Literal]", 0.10193450442872863], ["int", 0.10193450442872863], ["Tuple[str, str]", 0.0998981327428368]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[3007, 0], [3009, 59]], "fn_var_ln": {"dag": [[3008, 4], [3008, 7]]}, "fn_var_occur": {"dag": [["dag", "DAG", "schedule", "schedule_interval"], ["dag", "_check_schedule_interval_matches_timetable"]]}, "name": "test_dag_schedule_interval_match_timetable", "params": {"schedule_interval": ""}, "params_descr": {"schedule_interval": ""}, "params_occur": {"schedule_interval": [["dag", "DAG", "schedule", "schedule_interval"]]}, "params_p": {"args": [], "kwargs": [], "schedule_interval": [["datasets.opencl.device_mapping.opencl_device_mapping_dataseOpenClDeviceMappingsDataset", 0.1918325127748891], ["tests.basilisp.helpers.CompileFn", 0.06619659845084196], ["str", 0.06619659845084196]]}, "q_name": "test_dag_schedule_interval_match_timetable", "ret_exprs": [], "ret_type": "", "variables": {"dag": ""}, "variables_p": {"dag": [["List[str]", 0.08120747403314897]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[3013, 0], [3016, 63]], "fn_var_ln": {"dag": [[3014, 4], [3014, 7]], "schedule_interval": [[3015, 4], [3015, 25]]}, "fn_var_occur": {"dag": [["dag", "DAG", "timetable", "OnceTimetable"], ["dag", "schedule_interval", "schedule_interval"], ["dag", "_check_schedule_interval_matches_timetable"]], "schedule_interval": [["dag", "schedule_interval", "schedule_interval"]]}, "name": "test_dag_schedule_interval_change_after_init", "params": {"schedule_interval": ""}, "params_descr": {"schedule_interval": ""}, "params_occur": {"schedule_interval": [["dag", "schedule_interval", "schedule_interval"]]}, "params_p": {"args": [], "kwargs": [], "schedule_interval": [["tests.basilisp.helpers.CompileFn", 0.3092609419479726], ["Type", 0.14301327861349147], ["str", 0.09091482145024905], ["tests.async_mock.Mock", 0.09091482145024905]]}, "q_name": "test_dag_schedule_interval_change_after_init", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "schedule_interval": ""}, "variables_p": {"dag": [["str", 0.28241437042132267], ["List[List[int]]", 0.13059140488132123], ["bool", 0.09323321061223942]], "schedule_interval": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["str", 0.1], ["datetime.timedelta", 0.1]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[3020, 0], [3023, 63]], "fn_var_ln": {"dag": [[3021, 4], [3021, 7]], "timetable": [[3022, 4], [3022, 17]]}, "fn_var_occur": {"dag": [["dag", "DAG"], ["dag", "timetable", "timetable"], ["dag", "_check_schedule_interval_matches_timetable"]], "timetable": [["dag", "timetable", "timetable"]]}, "name": "test_dag_timetable_change_after_init", "params": {"timetable": ""}, "params_descr": {"timetable": ""}, "params_occur": {"timetable": [["dag", "timetable", "timetable"]]}, "params_p": {"args": [], "kwargs": [], "timetable": [["tests.basilisp.helpers.CompileFn", 0.2915259909605926], ["Type", 0.16028581142152834], ["str", 0.09041138160412591]]}, "q_name": "test_dag_timetable_change_after_init", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "timetable": ""}, "variables_p": {"dag": [["List[str]", 0.08120747403314897]], "timetable": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["str", 0.1], ["datetime.timedelta", 0.1]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[3047, 4], [3056, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "get_ti_from_db", "params": {"task": ""}, "params_descr": {"task": ""}, "params_occur": {"task": [["session", "query", "TI", "filter", "TI", "dag_id", "dag", "dag_id", "TI", "task_id", "task", "task_id", "TI", "run_id", "dagrun", "run_id", "one"]]}, "params_p": {"args": [], "kwargs": [], "task": [["str", 0.539936349390342], ["int", 0.10224595353439221], ["Dict[str, Any]", 0.09319652020591523], ["nufb.task.Task", 0.08772731853755042]]}, "q_name": "test_set_task_instance_state.<locals>.get_ti_from_db", "ret_exprs": ["return ( session.query(TI) .filter( TI.dag_id == dag.dag_id, TI.task_id == task.task_id, TI.run_id == dagrun.run_id, ) .one())"], "ret_type": "", "ret_type_p": [["Exception", 0.13774338566737143], ["tartare.core.models.Job", 0.13774338566737143], ["Dict[str, str]", 0.09745696750386804], ["djmoney.contrib.exchange.models.Rate", 0.08990273567037503], ["zerver.models.Realm", 0.08990273567037503], ["dict", 0.08888408810482504], ["Dict[str, Any]", 0.0813396613617467]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Test that set_task_instance_state updates the TaskInstance state and clear downstream failed", "long_descr": null, "ret": null}, "fn_lc": [[3027, 0], [3090, 105]], "fn_var_ln": {"altered": [[3066, 4], [3066, 11]], "dagrun": [[3040, 4], [3040, 10]], "start_date": [[3030, 4], [3030, 14]], "task_1": [[3032, 8], [3032, 14]], "task_2": [[3033, 8], [3033, 14]], "task_3": [[3034, 8], [3034, 14]], "task_4": [[3035, 8], [3035, 14]], "task_5": [[3036, 8], [3036, 14]], "ti1": [[3075, 4], [3075, 7]]}, "fn_var_occur": {"altered": [["altered", "dag", "set_task_instance_state", "task_id", "task_1", "task_id", "run_id", "run_id", "execution_date", "execution_date", "state", "State", "SUCCESS", "session", "session"], ["t", "key", "t", "altered", "dagrun", "run_id"]], "dagrun": [["dagrun", "refresh_from_db", "session", "session"], ["dagrun", "get_state", "State", "QUEUED"], ["t", "key", "t", "altered", "dagrun", "run_id"]], "start_date": [], "task_1": [["get_ti_from_db", "task_1", "state", "State", "FAILED"], ["altered", "dag", "set_task_instance_state", "task_id", "task_1", "task_id", "run_id", "run_id", "execution_date", "execution_date", "state", "State", "SUCCESS", "session", "session"], ["ti1", "get_ti_from_db", "task_1"]], "task_2": [["get_ti_from_db", "task_2", "state", "State", "SUCCESS"], ["get_ti_from_db", "task_2", "state", "State", "SUCCESS"]], "task_3": [["get_ti_from_db", "task_3", "state", "State", "UPSTREAM_FAILED"], ["get_ti_from_db", "task_3", "state", "State", "NONE"]], "task_4": [["get_ti_from_db", "task_4", "state", "State", "FAILED"], ["get_ti_from_db", "task_4", "state", "State", "NONE"]], "task_5": [["get_ti_from_db", "task_5", "state", "State", "SKIPPED"], ["get_ti_from_db", "task_5", "state", "State", "SKIPPED"]], "ti1": [["ti1", "get_ti_from_db", "task_1"], ["ti1", "state", "State", "SUCCESS"], ["isinstance", "inspect", "ti1", "attrs", "dag_run", "loaded_value", "DagRun"]]}, "name": "test_set_task_instance_state", "params": {"dag_maker": "", "execution_date": "", "run_id": "", "session": ""}, "params_descr": {"dag_maker": "", "execution_date": "", "run_id": "", "session": ""}, "params_occur": {"dag_maker": [], "execution_date": [["altered", "dag", "set_task_instance_state", "task_id", "task_1", "task_id", "run_id", "run_id", "execution_date", "execution_date", "state", "State", "SUCCESS", "session", "session"]], "run_id": [["altered", "dag", "set_task_instance_state", "task_id", "task_1", "task_id", "run_id", "run_id", "execution_date", "execution_date", "state", "State", "SUCCESS", "session", "session"], ["t", "key", "t", "altered", "dagrun", "run_id"]], "session": [["session", "flush"], ["altered", "dag", "set_task_instance_state", "task_id", "task_1", "task_id", "run_id", "run_id", "execution_date", "execution_date", "state", "State", "SUCCESS", "session", "session"], ["dagrun", "refresh_from_db", "session", "session"]]}, "params_p": {"args": [], "dag_maker": [["int", 0.29874489049440167], ["bool", 0.25888485644957443], ["datetime.datetime", 0.2072145082231276], ["List[str]", 0.07913656175390399], ["str", 0.07867317664681638], ["dict", 0.07734600643217593]], "execution_date": [["str", 0.20552781513143314], ["int", 0.19474654061990737], ["Dict[str, Any]", 0.19474654061990737], ["Optional[str]", 0.09972564424865948]], "kwargs": [], "run_id": [["str", 0.20552781513143314], ["int", 0.19474654061990737], ["Dict[str, Any]", 0.19474654061990737], ["Optional[str]", 0.09972564424865948]], "session": [["str", 0.39650016460010523], ["int", 0.29832673687865585], ["Dict[str, Any]", 0.09365102205855629]]}, "q_name": "test_set_task_instance_state", "ret_exprs": [], "ret_type": "", "variables": {"altered": "", "dagrun": "", "start_date": "", "task_1": "", "task_2": "", "task_3": "", "task_4": "", "task_5": "", "ti1": ""}, "variables_p": {"altered": [["str", 0.5875880530191333]], "dagrun": [["Optional[str]", 0.1725339383567129], ["dict", 0.09866320021792596], ["grpy.core.models.Grouping", 0.0910477653354654], ["golem.rpc.session.WebSocketAddress", 0.08225997925729188]], "start_date": [["str", 0.10000000000000002], ["Type[app.models.entity.EntityToEntityRel]", 0.10000000000000002], ["Optional[str]", 0.10000000000000002], ["Type[leasing.models.renContractRent]", 0.10000000000000002], ["Type[leasing.models.renIndexAdjustedRent]", 0.10000000000000002], ["datetime.datetime", 0.10000000000000002], ["Type[finances.models.DiscountBase]", 0.10000000000000002], ["Type[guild_calendar.models.Event]", 0.10000000000000002], ["Optional[datetime.date]", 0.10000000000000002], ["datetime.date", 0.10000000000000002]], "task_1": [["taskiapplication.models.task.Task", 0.4103202156391194], ["golem.task.taskbase.Task", 0.10056640244310605], ["apps.blender.task.blenderrendertask.BlenderRenderTask", 0.08664005803668938]], "task_2": [["snorkel.classification.task.Task", 0.10624290680381615], ["magic.models.card.Card", 0.07422282930771178]], "task_3": [["snorkel.classification.task.Task", 0.10437349285138141], ["magic.models.card.Card", 0.0864619625802692]], "task_4": [["snorkel.classification.task.Task", 0.09489935821546609], ["khetha.models.Task", 0.07385454852531954], ["apps.blender.task.blenderrendertask.BlenderRenderTask", 0.06889042125626574]], "task_5": [["snorkel.classification.task.Task", 0.10624290680381615], ["magic.models.card.Card", 0.07422282930771178]], "ti1": [["decksite.data.models.person.Person", 0.13087916980567368], ["Dict[str, Callable]", 0.11349224913353768]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[3100, 8], [3101, 43]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "make_arg_lists", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "test_set_task_instance_state_mapped.<locals>.make_arg_lists", "ret_exprs": ["return [[1], [2], [{\"a\": \"b\"}]]"], "ret_type": "", "ret_type_p": [["int", 0.19109344577997947], ["Tuple[Any, Any, Any]", 0.12005683221434538], ["List[str]", 0.09940279581153652]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[3103, 8], [3104, 24]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "consumer", "params": {"value": ""}, "params_descr": {"value": ""}, "params_occur": {"value": [["print", "value"]]}, "params_p": {"args": [], "kwargs": [], "value": [["str", 0.3058237174860281], ["float", 0.26733236917236985], ["dict", 0.1208497605490131], ["datetime.datetime", 0.1133075876200765], ["int", 0.09484914809440356]]}, "q_name": "test_set_task_instance_state_mapped.<locals>.consumer", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Test that when setting an individual mapped TI that the other TIs are not affected", "long_descr": null, "ret": null}, "fn_lc": [[3093, 0], [3161, 5]], "fn_var_ln": {"dr1": [[3112, 4], [3112, 7]], "dr2": [[3119, 4], [3119, 7]], "mapped": [[3106, 8], [3106, 14]], "task_id": [[3095, 4], [3095, 11]], "ti_query": [[3128, 4], [3128, 12]]}, "fn_var_occur": {"dr1": [["dr1", "dag_maker", "create_dagrun", "run_type", "DagRunType", "SCHEDULED", "state", "DagRunState", "FAILED"], ["expand_mapped_task", "mapped", "dr1", "run_id", "length", "session", "session"], ["ti_query", "all", "dr1", "run_id", "TaskInstanceState", "FAILED", "task_id", "dr1", "run_id", "TaskInstanceState", "FAILED", "task_id", "dr1", "run_id", "TaskInstanceState", "FAILED", "dr2", "run_id", "TaskInstanceState", "FAILED", "task_id", "dr2", "run_id", "TaskInstanceState", "FAILED", "task_id", "dr2", "run_id", "TaskInstanceState", "FAILED"], ["dag", "set_task_instance_state", "task_id", "task_id", "map_indexes", "future", "True", "run_id", "dr1", "run_id", "state", "TaskInstanceState", "SUCCESS", "session", "session"], ["dr1", "session"], ["ti_query", "all", "dr1", "run_id", "None", "task_id", "dr1", "run_id", "TaskInstanceState", "FAILED", "task_id", "dr1", "run_id", "TaskInstanceState", "SUCCESS", "dr2", "run_id", "None", "task_id", "dr2", "run_id", "TaskInstanceState", "FAILED", "task_id", "dr2", "run_id", "TaskInstanceState", "SUCCESS"]], "dr2": [["dr2", "dag_maker", "create_dagrun", "run_type", "DagRunType", "SCHEDULED", "state", "DagRunState", "FAILED", "execution_date", "DEFAULT_DATE", "datetime", "timedelta", "days"], ["expand_mapped_task", "mapped", "dr2", "run_id", "length", "session", "session"], ["ti_query", "all", "dr1", "run_id", "TaskInstanceState", "FAILED", "task_id", "dr1", "run_id", "TaskInstanceState", "FAILED", "task_id", "dr1", "run_id", "TaskInstanceState", "FAILED", "dr2", "run_id", "TaskInstanceState", "FAILED", "task_id", "dr2", "run_id", "TaskInstanceState", "FAILED", "task_id", "dr2", "run_id", "TaskInstanceState", "FAILED"], ["ti_query", "all", "dr1", "run_id", "None", "task_id", "dr1", "run_id", "TaskInstanceState", "FAILED", "task_id", "dr1", "run_id", "TaskInstanceState", "SUCCESS", "dr2", "run_id", "None", "task_id", "dr2", "run_id", "TaskInstanceState", "FAILED", "task_id", "dr2", "run_id", "TaskInstanceState", "SUCCESS"]], "mapped": [["mapped", "PythonOperator", "partial", "task_id", "task_id", "dag", "dag", "python_callable", "consumer", "expand", "op_args", "make_arg_lists"], ["mapped", "BaseOperator", "task_id"], ["expand_mapped_task", "mapped", "dr1", "run_id", "length", "session", "session"], ["expand_mapped_task", "mapped", "dr2", "run_id", "length", "session", "session"]], "task_id": [["mapped", "PythonOperator", "partial", "task_id", "task_id", "dag", "dag", "python_callable", "consumer", "expand", "op_args", "make_arg_lists"], ["mapped", "BaseOperator", "task_id"], ["ti_query", "session", "query", "TI", "task_id", "TI", "map_index", "TI", "run_id", "TI", "state", "filter", "TI", "dag_id", "dag", "dag_id", "TI", "task_id", "in_", "task_id", "order_by", "TI", "run_id", "TI", "task_id", "TI", "map_index"], ["ti_query", "all", "dr1", "run_id", "TaskInstanceState", "FAILED", "task_id", "dr1", "run_id", "TaskInstanceState", "FAILED", "task_id", "dr1", "run_id", "TaskInstanceState", "FAILED", "dr2", "run_id", "TaskInstanceState", "FAILED", "task_id", "dr2", "run_id", "TaskInstanceState", "FAILED", "task_id", "dr2", "run_id", "TaskInstanceState", "FAILED"], ["dag", "set_task_instance_state", "task_id", "task_id", "map_indexes", "future", "True", "run_id", "dr1", "run_id", "state", "TaskInstanceState", "SUCCESS", "session", "session"], ["ti_query", "all", "dr1", "run_id", "None", "task_id", "dr1", "run_id", "TaskInstanceState", "FAILED", "task_id", "dr1", "run_id", "TaskInstanceState", "SUCCESS", "dr2", "run_id", "None", "task_id", "dr2", "run_id", "TaskInstanceState", "FAILED", "task_id", "dr2", "run_id", "TaskInstanceState", "SUCCESS"]], "ti_query": [["ti_query", "session", "query", "TI", "task_id", "TI", "map_index", "TI", "run_id", "TI", "state", "filter", "TI", "dag_id", "dag", "dag_id", "TI", "task_id", "in_", "task_id", "order_by", "TI", "run_id", "TI", "task_id", "TI", "map_index"], ["ti_query", "all", "dr1", "run_id", "TaskInstanceState", "FAILED", "task_id", "dr1", "run_id", "TaskInstanceState", "FAILED", "task_id", "dr1", "run_id", "TaskInstanceState", "FAILED", "dr2", "run_id", "TaskInstanceState", "FAILED", "task_id", "dr2", "run_id", "TaskInstanceState", "FAILED", "task_id", "dr2", "run_id", "TaskInstanceState", "FAILED"], ["ti_query", "all", "dr1", "run_id", "None", "task_id", "dr1", "run_id", "TaskInstanceState", "FAILED", "task_id", "dr1", "run_id", "TaskInstanceState", "SUCCESS", "dr2", "run_id", "None", "task_id", "dr2", "run_id", "TaskInstanceState", "FAILED", "task_id", "dr2", "run_id", "TaskInstanceState", "SUCCESS"]]}, "name": "test_set_task_instance_state_mapped", "params": {"dag_maker": "", "session": ""}, "params_descr": {"dag_maker": "", "session": ""}, "params_occur": {"dag_maker": [["dr1", "dag_maker", "create_dagrun", "run_type", "DagRunType", "SCHEDULED", "state", "DagRunState", "FAILED"], ["dr2", "dag_maker", "create_dagrun", "run_type", "DagRunType", "SCHEDULED", "state", "DagRunState", "FAILED", "execution_date", "DEFAULT_DATE", "datetime", "timedelta", "days"]], "session": [["expand_mapped_task", "mapped", "dr1", "run_id", "length", "session", "session"], ["expand_mapped_task", "mapped", "dr2", "run_id", "length", "session", "session"], ["session", "query", "TI", "filter_by", "dag_id", "dag", "dag_id", "update", "TaskInstanceState", "FAILED"], ["ti_query", "session", "query", "TI", "task_id", "TI", "map_index", "TI", "run_id", "TI", "state", "filter", "TI", "dag_id", "dag", "dag_id", "TI", "task_id", "in_", "task_id", "order_by", "TI", "run_id", "TI", "task_id", "TI", "map_index"], ["dag", "set_task_instance_state", "task_id", "task_id", "map_indexes", "future", "True", "run_id", "dr1", "run_id", "state", "TaskInstanceState", "SUCCESS", "session", "session"], ["dr1", "session"]]}, "params_p": {"args": [], "dag_maker": [["str", 0.1916407741987226], ["guillotina.db.orm.interfaces.IBaseObject", 0.09027549912950059]], "kwargs": [], "session": [["sqlalchemy.orm.Session", 0.20366571404633152], ["grouper.models.user.User", 0.19323883824550828], ["grouper.models.base.session.Session", 0.09661941912275414], ["authentication.session.models.current_user.CurrentUser", 0.09373512841388662]]}, "q_name": "test_set_task_instance_state_mapped", "ret_exprs": [], "ret_type": "", "variables": {"dr1": "", "dr2": "", "mapped": "", "task_id": "", "ti_query": ""}, "variables_p": {"dr1": [["str", 0.4037114245418752], ["int", 0.3669759761400461], ["Dict[str, Union[int, str]]", 0.14973822154108424], ["raiden.utils.PaymentID", 0.07957437777699454]], "dr2": [["Tuple[str, str, str]", 0.5926879719357189], ["str", 0.25175116793527375], ["Dict[str, Union[int, str]]", 0.15556086012900733]], "mapped": [["int", 0.29353609747242093], ["str", 0.19310284842624265], ["o2a.converter.task.Task", 0.1405340655686682], ["bool", 0.09560379107031168], ["raiden.utils.PaymentID", 0.09256571095269737], ["tests.factories.model.TaskPayment", 0.09135231255001287]], "task_id": [["int", 0.1703803633454461], ["cmk.utils.type_defs.UserId", 0.10161308794763807], ["str", 0.10149911991515097], ["Pattern[Any]", 0.09667891084626712]], "ti_query": [["int", 0.8088163950096006], ["List[int]", 0.09411136598502534]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[3194, 4], [3203, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "get_ti_from_db", "params": {"task": ""}, "params_descr": {"task": ""}, "params_occur": {"task": [["session", "query", "TI", "filter", "TI", "dag_id", "dag", "dag_id", "TI", "task_id", "task", "task_id", "TI", "run_id", "dagrun", "run_id", "one"]]}, "params_p": {"args": [], "kwargs": [], "task": [["str", 0.539936349390342], ["int", 0.10224595353439221], ["Dict[str, Any]", 0.09319652020591523], ["nufb.task.Task", 0.08772731853755042]]}, "q_name": "test_set_task_group_state.<locals>.get_ti_from_db", "ret_exprs": ["return ( session.query(TI) .filter( TI.dag_id == dag.dag_id, TI.task_id == task.task_id, TI.run_id == dagrun.run_id, ) .one())"], "ret_type": "", "ret_type_p": [["Exception", 0.13774338566737143], ["tartare.core.models.Job", 0.13774338566737143], ["Dict[str, str]", 0.09745696750386804], ["djmoney.contrib.exchange.models.Rate", 0.08990273567037503], ["zerver.models.Realm", 0.08990273567037503], ["dict", 0.08888408810482504], ["Dict[str, Any]", 0.0813396613617467]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Test that set_task_group_state updates the TaskGroup state and clear downstream failed", "long_descr": null, "ret": null}, "fn_lc": [[3165, 0], [3243, 5]], "fn_var_ln": {"altered": [[3215, 4], [3215, 11]], "dagrun": [[3187, 4], [3187, 10]], "start": [[3170, 8], [3170, 13]], "start_date": [[3168, 4], [3168, 14]], "task_1": [[3173, 12], [3173, 18]], "task_2": [[3174, 12], [3174, 18]], "task_3": [[3175, 12], [3175, 18]], "task_4": [[3179, 8], [3179, 14]], "task_5": [[3180, 8], [3180, 14]], "task_6": [[3181, 8], [3181, 14]], "task_7": [[3182, 8], [3182, 14]], "task_8": [[3183, 8], [3183, 14]]}, "fn_var_occur": {"altered": [["altered", "dag", "set_task_group_state", "group_id", "section_1", "group_id", "run_id", "run_id", "execution_date", "execution_date", "state", "State", "SUCCESS", "session", "session"], ["t", "key", "t", "altered", "dagrun", "run_id", "dagrun", "run_id"]], "dagrun": [["dagrun", "refresh_from_db", "session", "session"], ["dagrun", "get_state", "State", "QUEUED"], ["t", "key", "t", "altered", "dagrun", "run_id", "dagrun", "run_id"]], "start": [], "start_date": [], "task_1": [["get_ti_from_db", "task_1", "state", "State", "FAILED"], ["get_ti_from_db", "task_1", "state", "State", "SUCCESS"]], "task_2": [["get_ti_from_db", "task_2", "state", "State", "SUCCESS"], ["get_ti_from_db", "task_2", "state", "State", "SUCCESS"]], "task_3": [["get_ti_from_db", "task_3", "state", "State", "UPSTREAM_FAILED"], ["get_ti_from_db", "task_3", "state", "State", "SUCCESS"]], "task_4": [["get_ti_from_db", "task_4", "state", "State", "SUCCESS"], ["get_ti_from_db", "task_4", "state", "State", "SUCCESS"]], "task_5": [["get_ti_from_db", "task_5", "state", "State", "UPSTREAM_FAILED"], ["get_ti_from_db", "task_5", "state", "State", "NONE"]], "task_6": [["get_ti_from_db", "task_6", "state", "State", "FAILED"], ["get_ti_from_db", "task_6", "state", "State", "NONE"]], "task_7": [["get_ti_from_db", "task_7", "state", "State", "SKIPPED"], ["get_ti_from_db", "task_7", "state", "State", "SKIPPED"]], "task_8": []}, "name": "test_set_task_group_state", "params": {"dag_maker": "", "execution_date": "", "run_id": "", "session": ""}, "params_descr": {"dag_maker": "", "execution_date": "", "run_id": "", "session": ""}, "params_occur": {"dag_maker": [], "execution_date": [["altered", "dag", "set_task_group_state", "group_id", "section_1", "group_id", "run_id", "run_id", "execution_date", "execution_date", "state", "State", "SUCCESS", "session", "session"]], "run_id": [["altered", "dag", "set_task_group_state", "group_id", "section_1", "group_id", "run_id", "run_id", "execution_date", "execution_date", "state", "State", "SUCCESS", "session", "session"], ["t", "key", "t", "altered", "dagrun", "run_id", "dagrun", "run_id"]], "session": [["session", "flush"], ["altered", "dag", "set_task_group_state", "group_id", "section_1", "group_id", "run_id", "run_id", "execution_date", "execution_date", "state", "State", "SUCCESS", "session", "session"], ["dagrun", "refresh_from_db", "session", "session"]]}, "params_p": {"args": [], "dag_maker": [["int", 0.29874489049440167], ["bool", 0.25888485644957443], ["datetime.datetime", 0.2072145082231276], ["List[str]", 0.07913656175390399], ["str", 0.07867317664681638], ["dict", 0.07734600643217593]], "execution_date": [["int", 0.40282258340763005], ["datetime.timedelta", 0.19089604596157606], ["str", 0.11022923024990056], ["zerver.models.UserProfile", 0.09544802298078803], ["zerver.models.Realm", 0.09037488715020485]], "kwargs": [], "run_id": [["int", 0.40282258340763005], ["datetime.timedelta", 0.19089604596157606], ["str", 0.11022923024990056], ["zerver.models.UserProfile", 0.09544802298078803], ["zerver.models.Realm", 0.09037488715020485]], "session": [["str", 0.30832359732552916], ["Optional[List[str]]", 0.10028745855400203], ["Optional[str]", 0.0998521828529197], ["int", 0.09252174650512451], ["Optional[List[int]]", 0.0906914174368954]]}, "q_name": "test_set_task_group_state", "ret_exprs": [], "ret_type": "", "variables": {"altered": "", "dagrun": "", "start": "", "start_date": "", "task_1": "", "task_2": "", "task_3": "", "task_4": "", "task_5": "", "task_6": "", "task_7": "", "task_8": ""}, "variables_p": {"altered": [["Optional[magic.models.deck.Deck]", 0.2599599730698223], ["int", 0.13183926890804298], ["List[str]", 0.09249424075929522], ["float", 0.08240755719081526], ["str", 0.07891430148990564]], "dagrun": [["posts.models.Post", 0.1814023935421746], ["Optional[str]", 0.16069581817915532], ["grouper.models.permission.Permission", 0.0993227598003358], ["dict", 0.09251439829296683], ["dep_check.models.Rules", 0.08988287746768539], ["tortoise.models.MetaInfo", 0.08918623276165062], ["salon.models.Stylist", 0.08746631174831604]], "start": [["bool", 0.20000000000000004], ["str", 0.20000000000000004], ["int", 0.20000000000000004], ["datetime.datetime", 0.10000000000000002], ["List[Tuple[Any, Any]]", 0.10000000000000002]], "start_date": [["str", 0.10000000000000002], ["Type[app.models.entity.EntityToEntityRel]", 0.10000000000000002], ["Optional[str]", 0.10000000000000002], ["Type[leasing.models.renContractRent]", 0.10000000000000002], ["Type[leasing.models.renIndexAdjustedRent]", 0.10000000000000002], ["datetime.datetime", 0.10000000000000002], ["Type[finances.models.DiscountBase]", 0.10000000000000002], ["Type[guild_calendar.models.Event]", 0.10000000000000002], ["Optional[datetime.date]", 0.10000000000000002], ["datetime.date", 0.10000000000000002]], "task_1": [["snorkel.classification.task.Task", 0.09038271898480242], ["apps.blender.task.blenderrendertask.BlenderRenderTask", 0.06810283568700932], ["khetha.models.Task", 0.0664137220177196]], "task_2": [["snorkel.classification.task.Task", 0.10624290680381615], ["magic.models.card.Card", 0.07422282930771178]], "task_3": [["magic.models.card.Card", 0.10756682671069998], ["snorkel.classification.task.Task", 0.10190189241902406], ["apps.blender.task.blenderrendertask.BlenderRenderTask", 0.09074197219999443], ["apps.wasm.task.SubtaskInstance", 0.08727480865489579]], "task_4": [["snorkel.classification.task.Task", 0.10624290680381615], ["magic.models.card.Card", 0.07422282930771178]], "task_5": [["snorkel.classification.task.Task", 0.10437349285138141], ["magic.models.card.Card", 0.0864619625802692]], "task_6": [["snorkel.classification.task.Task", 0.09489935821546609], ["khetha.models.Task", 0.07385454852531954], ["apps.blender.task.blenderrendertask.BlenderRenderTask", 0.06889042125626574]], "task_7": [["snorkel.classification.task.Task", 0.10624290680381615], ["magic.models.card.Card", 0.07422282930771178]], "task_8": [["str", 0.19999999999999998], ["annofabapi.models.TaskPhase", 0.09999999999999999], ["List[Dict[str, Any]]", 0.09999999999999999], ["bool", 0.09999999999999999], ["Type[src.app.models.TaskDevice]", 0.09999999999999999], ["Dict[str, Any]", 0.09999999999999999]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[3248, 4], [3249, 16]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "setup_task", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "test_dag_teardowns_property_lists_all_teardown_tasks.<locals>.setup_task", "ret_exprs": ["return 1"], "ret_type": "", "ret_type_p": [["str", 0.3112861806675614], ["bytes", 0.11946070067861228], ["bool", 0.0924205507939282], ["int", 0.08850011574520827], ["pathlib.Path", 0.0858346973038517]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[3252, 4], [3253, 16]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "teardown_task", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "test_dag_teardowns_property_lists_all_teardown_tasks.<locals>.teardown_task", "ret_exprs": ["return 1"], "ret_type": "", "ret_type_p": [["str", 0.3112861806675614], ["bytes", 0.11946070067861228], ["bool", 0.0924205507939282], ["int", 0.08850011574520827], ["pathlib.Path", 0.0858346973038517]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[3256, 4], [3257, 16]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "teardown_task2", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "test_dag_teardowns_property_lists_all_teardown_tasks.<locals>.teardown_task2", "ret_exprs": ["return 1"], "ret_type": "", "ret_type_p": [["str", 0.3112861806675614], ["bytes", 0.11946070067861228], ["bool", 0.0924205507939282], ["int", 0.08850011574520827], ["pathlib.Path", 0.0858346973038517]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[3260, 4], [3261, 16]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "teardown_task3", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "test_dag_teardowns_property_lists_all_teardown_tasks.<locals>.teardown_task3", "ret_exprs": ["return 1"], "ret_type": "", "ret_type_p": [["str", 0.3112861806675614], ["bytes", 0.11946070067861228], ["bool", 0.0924205507939282], ["int", 0.08850011574520827], ["pathlib.Path", 0.0858346973038517]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[3264, 4], [3265, 16]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "mytask", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "test_dag_teardowns_property_lists_all_teardown_tasks.<locals>.mytask", "ret_exprs": ["return 1"], "ret_type": "", "ret_type_p": [["int", 0.30000000000000004], ["Callable", 0.2], ["models.Question", 0.1], ["str", 0.1]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[3246, 0], [3278, 91]], "fn_var_ln": {"t1": [[3268, 8], [3268, 10]], "t2": [[3269, 8], [3269, 10]], "t3": [[3270, 8], [3270, 10]], "t4": [[3271, 8], [3271, 10]]}, "fn_var_occur": {"t1": [["t1", "setup_task"], ["t1", "t2"]], "t2": [["t2", "teardown_task"], ["t1", "t2"]], "t3": [["t3", "teardown_task2"]], "t4": [["t4", "teardown_task3"]]}, "name": "test_dag_teardowns_property_lists_all_teardown_tasks", "params": {"dag_maker": ""}, "params_descr": {"dag_maker": ""}, "params_occur": {"dag_maker": [["dag_maker", "dag"]]}, "params_p": {"args": [], "dag_maker": [["datasets.opencl.device_mapping.opencl_device_mapping_dataseOpenClDeviceMappingsDataset", 0.1437323698480453], ["tests.basilisp.helpers.CompileFn", 0.09648351566420572], ["bool", 0.0861826903639141], ["pathlib.Path", 0.0861826903639141]], "kwargs": []}, "q_name": "test_dag_teardowns_property_lists_all_teardown_tasks", "ret_exprs": [], "ret_type": "", "variables": {"t1": "", "t2": "", "t3": "", "t4": ""}, "variables_p": {"t1": [["float", 0.212427237388465], ["str", 0.07094793558025309]], "t2": [["float", 0.212427237388465], ["str", 0.07094793558025309]], "t3": [["\"Token\"", 0.09999999999999999]], "t4": [["\"Token\"", 0.09999999999999999]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[3312, 0], [3321, 43]], "fn_var_ln": {"dag": [[3313, 4], [3313, 7]], "iterator": [[3316, 4], [3316, 12]]}, "fn_var_occur": {"dag": [["dag", "DAG", "dag_id", "start_date", "DEFAULT_DATE", "schedule"], ["EmptyOperator", "task_id", "dag", "dag"], ["iterator", "dag", "iter_dagrun_infos_between", "earliest", "pendulum", "instance", "start_date", "latest", "pendulum", "instance", "DEFAULT_DATE", "align", "True"]], "iterator": [["iterator", "dag", "iter_dagrun_infos_between", "earliest", "pendulum", "instance", "start_date", "latest", "pendulum", "instance", "DEFAULT_DATE", "align", "True"], ["expected_infos", "list", "iterator"]]}, "name": "test_iter_dagrun_infos_between", "params": {"expected_infos": "", "start_date": ""}, "params_descr": {"expected_infos": "", "start_date": ""}, "params_occur": {"expected_infos": [["expected_infos", "list", "iterator"]], "start_date": [["dag", "DAG", "dag_id", "start_date", "DEFAULT_DATE", "schedule"], ["iterator", "dag", "iter_dagrun_infos_between", "earliest", "pendulum", "instance", "start_date", "latest", "pendulum", "instance", "DEFAULT_DATE", "align", "True"]]}, "params_p": {"args": [], "expected_infos": [["List[int]", 0.206373301722304], ["Dict[str, str]", 0.09379737813223542], ["Dict[str, Any]", 0.09379737813223542], ["dict", 0.09179662039773193], ["list", 0.09058011026514533]], "kwargs": [], "start_date": [["int", 0.6054175615696487], ["Optional[datetime.datetime]", 0.1825234576810128], ["Optional[base.cell.Cell]", 0.1138302333959708], ["Optional[datetime.timedelta]", 0.09822874735336784]]}, "q_name": "test_iter_dagrun_infos_between", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "iterator": ""}, "variables_p": {"dag": [["str", 0.3821967580538953], ["int", 0.1808747880839627], ["Optional[Match[str]]", 0.10480364177592146], ["Tuple[Literal, Literal, Literal]", 0.09579879334260502]], "iterator": [["Optional[magic.models.deck.Deck]", 0.18911932850742838], ["int", 0.17670261161678344], ["str", 0.1435475471283165], ["Sequence[byceps.services.ticketing.models.tickeTicket]", 0.11364317761360998], ["dateutil.relativedelta.relativedelta", 0.09511418979451616], ["track.tests.factories.RecordFactory", 0.09470983834717503]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[3324, 0], [3354, 85]], "fn_var_ln": {"dag": [[3334, 4], [3334, 7]], "end": [[3326, 4], [3326, 7]], "infos": [[3342, 8], [3342, 13]], "iterator": [[3340, 4], [3340, 12]], "start": [[3325, 4], [3325, 9]]}, "fn_var_occur": {"dag": [["dag", "DAG", "dag_id", "start_date", "DEFAULT_DATE", "timetable", "FailingAfterOneTimetable"], ["iterator", "dag", "iter_dagrun_infos_between", "earliest", "start", "latest", "end", "align", "True"], ["caplog", "record_tuples", "logging", "ERROR", "DataInterval", "start", "end", "dag", "dag_id"]], "end": [["iterator", "dag", "iter_dagrun_infos_between", "earliest", "start", "latest", "end", "align", "True"], ["infos", "DagRunInfo", "interval", "start", "end"], ["caplog", "record_tuples", "logging", "ERROR", "DataInterval", "start", "end", "dag", "dag_id"]], "infos": [["infos", "list", "iterator"], ["infos", "DagRunInfo", "interval", "start", "end"]], "iterator": [["iterator", "dag", "iter_dagrun_infos_between", "earliest", "start", "latest", "end", "align", "True"], ["infos", "list", "iterator"]], "start": [["iterator", "dag", "iter_dagrun_infos_between", "earliest", "start", "latest", "end", "align", "True"], ["infos", "DagRunInfo", "interval", "start", "end"], ["caplog", "record_tuples", "logging", "ERROR", "DataInterval", "start", "end", "dag", "dag_id"]]}, "name": "test_iter_dagrun_infos_between_error", "params": {"caplog": ""}, "params_descr": {"caplog": ""}, "params_occur": {"caplog": [["caplog", "at_level", "logging", "ERROR"], ["caplog", "record_tuples", "logging", "ERROR", "DataInterval", "start", "end", "dag", "dag_id"], ["caplog", "records", "exc_info", "None"]]}, "params_p": {"args": [], "caplog": [["Dict[str, Any]", 0.08906085377649588]], "kwargs": []}, "q_name": "test_iter_dagrun_infos_between_error", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "end": "", "infos": "", "iterator": "", "start": ""}, "variables_p": {"dag": [["str", 0.3168330603636022], ["List[str]", 0.18630496597552756], ["Dict[str, str]", 0.11920105539616913], ["Tuple[int, int]", 0.11864592183822015], ["Type[Tuple[int, int]]", 0.09093741283441653], ["int", 0.08537902601442145], ["List[Tuple[Any, Any]]", 0.08269855757764309]], "end": [["bytes", 0.183533461347801]], "infos": [["str", 0.19449023854910052], ["Dict[str, Union[Any, str]]", 0.11410351617227775], ["Dict[str, Union[Any, int]]", 0.10343186448481394], ["List[str]", 0.10174878442105652]], "iterator": [["cmk.base.api.agent_based.type_defs.Parameters", 0.09753895198524899], ["abilian.services.base.Service", 0.0850064380273616]], "start": [["int", 0.38945708680504143]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[3377, 0], [3391, 74]], "fn_var_ln": {"dag": [[3383, 4], [3383, 7]], "dag_model": [[3384, 4], [3384, 13]]}, "fn_var_occur": {"dag": [["dag", "DAG", "dag_id", "schedule"], ["dag", "get_next_data_interval", "dag_model", "expected_data_interval"]], "dag_model": [["dag_model", "DagModel", "dag_id", "next_dagrun", "logical_date", "next_dagrun_data_interval_start", "data_interval_start", "next_dagrun_data_interval_end", "data_interval_end"], ["dag", "get_next_data_interval", "dag_model", "expected_data_interval"]]}, "name": "test_get_next_data_interval", "params": {"data_interval_end": "", "data_interval_start": "", "expected_data_interval": "", "logical_date": ""}, "params_descr": {"data_interval_end": "", "data_interval_start": "", "expected_data_interval": "", "logical_date": ""}, "params_occur": {"data_interval_end": [["dag_model", "DagModel", "dag_id", "next_dagrun", "logical_date", "next_dagrun_data_interval_start", "data_interval_start", "next_dagrun_data_interval_end", "data_interval_end"]], "data_interval_start": [["dag_model", "DagModel", "dag_id", "next_dagrun", "logical_date", "next_dagrun_data_interval_start", "data_interval_start", "next_dagrun_data_interval_end", "data_interval_end"]], "expected_data_interval": [["dag", "get_next_data_interval", "dag_model", "expected_data_interval"]], "logical_date": [["dag_model", "DagModel", "dag_id", "next_dagrun", "logical_date", "next_dagrun_data_interval_start", "data_interval_start", "next_dagrun_data_interval_end", "data_interval_end"]]}, "params_p": {"args": [], "data_interval_end": [["bytes", 0.28643213348491386], ["Optional[Any]", 0.10940048999822738], ["jumeaux.models.JudgementAddOnReference", 0.10939932174187426], ["owlmixin.owlTDict[jumeaux.models.DiffKeys]", 0.10939932174187426], ["int", 0.09547737782830462], ["raiden.utils.Address", 0.09379769188628415]], "data_interval_start": [["bytes", 0.28643213348491386], ["Optional[Any]", 0.10940048999822738], ["jumeaux.models.JudgementAddOnReference", 0.10939932174187426], ["owlmixin.owlTDict[jumeaux.models.DiffKeys]", 0.10939932174187426], ["int", 0.09547737782830462], ["raiden.utils.Address", 0.09379769188628415]], "expected_data_interval": [["int", 0.3432902116164235], ["raiden.utils.BlockIdentifier", 0.09089087219828854], ["str", 0.08686765788008748]], "kwargs": [], "logical_date": [["bytes", 0.28643213348491386], ["Optional[Any]", 0.10940048999822738], ["jumeaux.models.JudgementAddOnReference", 0.10939932174187426], ["owlmixin.owlTDict[jumeaux.models.DiffKeys]", 0.10939932174187426], ["int", 0.09547737782830462], ["raiden.utils.Address", 0.09379769188628415]]}, "q_name": "test_get_next_data_interval", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "dag_model": ""}, "variables_p": {"dag": [["int", 0.4456870694091024], ["str", 0.42950100529731844]], "dag_model": [["float", 0.48476719115054445], ["str", 0.13690616734593108], ["tf_encrypted.keras.models.sequential.Sequential", 0.10903449456152568], ["dict", 0.09990876172175703]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[3412, 0], [3417, 44]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test__time_restriction", "params": {"dag_date": "", "dag_maker": "", "restrict": "", "tasks_date": ""}, "params_descr": {"dag_date": "", "dag_maker": "", "restrict": "", "tasks_date": ""}, "params_occur": {"dag_date": [["dag_maker", "start_date", "dag_date", "end_date", "dag_date", "dag"]], "dag_maker": [["dag_maker", "start_date", "dag_date", "end_date", "dag_date", "dag"]], "restrict": [["dag", "_time_restriction", "restrict"]], "tasks_date": [["EmptyOperator", "task_id", "start_date", "tasks_date", "end_date", "tasks_date"], ["EmptyOperator", "task_id", "start_date", "tasks_date", "end_date", "tasks_date"]]}, "params_p": {"args": [], "dag_date": [["int", 0.23909724904383267], ["datetime.date", 0.20124097319972273], ["datetime", 0.10101033148976508], ["List[recidiviz.persistence.entity.state.entities.SentenceType]", 0.09311551293867872], ["Optional[datetime.date]", 0.09146933854852445], ["datetime.datetime", 0.09141102332414927], ["List[recidiviz.persistence.entity.state.entities.StateSupervisionSentence]", 0.09132778572766356], ["List[recidiviz.persistence.entity.state.entities.StateIncarcerationSentence]", 0.09132778572766356]], "dag_maker": [["int", 0.23909724904383267], ["datetime.date", 0.20124097319972273], ["datetime", 0.10101033148976508], ["List[recidiviz.persistence.entity.state.entities.SentenceType]", 0.09311551293867872], ["Optional[datetime.date]", 0.09146933854852445], ["datetime.datetime", 0.09141102332414927], ["List[recidiviz.persistence.entity.state.entities.StateSupervisionSentence]", 0.09132778572766356], ["List[recidiviz.persistence.entity.state.entities.StateIncarcerationSentence]", 0.09132778572766356]], "kwargs": [], "restrict": [["str", 0.19374119237083054], ["float", 0.11133332312259483], ["bool", 0.10877833983351946]], "tasks_date": [["str", 0.19190750901122688], ["Optional[str]", 0.13134366033695194], ["recidiviz.calculator.pipeline.utils.incarceration_period_index.IncarcerationPeriodIndex", 0.10643218901576625], ["dict", 0.09806236825357023], ["datetime.datetime", 0.09522585100691859], ["datetime.date", 0.09094891116668347]]}, "q_name": "test__time_restriction", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[3430, 0], [3435, 45]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test__tags_length", "params": {"should_pass": "builtins.bool", "tags": "builtins.list[builtins.str]"}, "params_descr": {"should_pass": "", "tags": ""}, "params_occur": {"should_pass": [], "tags": [["models", "DAG", "tags", "tags"], ["models", "DAG", "tags", "tags"]]}, "params_p": {"args": [], "kwargs": [], "should_pass": [["list", 0.22390395794776846], ["str", 0.19739303017372622], ["Iterable[str]", 0.17835518632193173], ["int", 0.11195197897388423], ["List[str]", 0.10156541030903775], ["Optional[str]", 0.09765284311268563]], "tags": [["str", 0.2838914238677103], ["Union[zerver.models.UserProfile, zilencer.models.RemoteZulipServer]", 0.1136199864598807], ["sqlalchemy.orm.session.Session", 0.09780705464845596], ["grouper.models.base.session.Session", 0.09399435159683169], ["List[str]", 0.09181597201786294]]}, "q_name": "test__tags_length", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[3439, 0], [3485, 5]], "fn_var_ln": {"dag1": [[3445, 4], [3445, 8]], "dag2": [[3449, 4], [3449, 8]], "dag3": [[3453, 4], [3453, 8]], "dataset1": [[3440, 4], [3440, 12]], "dataset2": [[3441, 4], [3441, 12]], "dataset3": [[3442, 4], [3442, 12]], "datasets": [[3465, 4], [3465, 12]], "ds1_id": [[3456, 4], [3456, 10]], "info": [[3475, 4], [3475, 8]], "session": [[3455, 4], [3455, 11]]}, "fn_var_occur": {"dag1": [["dag1", "dag_maker", "dag"], ["info", "get_dataset_triggered_next_run_info", "dag1", "dag_id", "session", "session"], ["info", "dag1", "dag_id", "datasets", "uri"]], "dag2": [["dag2", "dag_maker", "dag"], ["session", "bulk_save_objects", "DatasetDagRunQueue", "dataset_id", "ds1_id", "target_dag_id", "dag2", "dag_id", "DatasetDagRunQueue", "dataset_id", "ds1_id", "target_dag_id", "dag3", "dag_id"], ["info", "get_dataset_triggered_next_run_info", "dag2", "dag_id", "dag3", "dag_id", "session", "session"], ["info", "dag2", "dag_id"]], "dag3": [["dag3", "dag_maker", "dag"], ["session", "bulk_save_objects", "DatasetDagRunQueue", "dataset_id", "ds1_id", "target_dag_id", "dag2", "dag_id", "DatasetDagRunQueue", "dataset_id", "ds1_id", "target_dag_id", "dag3", "dag_id"], ["info", "get_dataset_triggered_next_run_info", "dag2", "dag_id", "dag3", "dag_id", "session", "session"], ["info", "dag3", "dag_id"]], "dataset1": [["dataset1", "Dataset", "uri"], ["dag_maker", "dag_id", "schedule", "dataset1", "dataset2"], ["dag_maker", "dag_id", "schedule", "dataset1", "dataset2", "dataset3"], ["ds1_id", "session", "query", "DatasetModel", "id", "filter_by", "uri", "dataset1", "uri", "scalar"]], "dataset2": [["dataset2", "Dataset", "uri"], ["dag_maker", "dag_id", "schedule", "dataset2"], ["dag_maker", "dag_id", "schedule", "dataset1", "dataset2"], ["dag_maker", "dag_id", "schedule", "dataset1", "dataset2", "dataset3"]], "dataset3": [["dataset3", "Dataset", "uri"], ["dag_maker", "dag_id", "schedule", "dataset1", "dataset2", "dataset3"]], "datasets": [["datasets", "session", "query", "DatasetModel", "uri", "order_by", "DatasetModel", "id", "all"], ["info", "dag1", "dag_id", "datasets", "uri"]], "ds1_id": [["ds1_id", "session", "query", "DatasetModel", "id", "filter_by", "uri", "dataset1", "uri", "scalar"], ["session", "bulk_save_objects", "DatasetDagRunQueue", "dataset_id", "ds1_id", "target_dag_id", "dag2", "dag_id", "DatasetDagRunQueue", "dataset_id", "ds1_id", "target_dag_id", "dag3", "dag_id"]], "info": [["info", "get_dataset_triggered_next_run_info", "dag1", "dag_id", "session", "session"], ["info", "dag1", "dag_id", "datasets", "uri"], ["info", "get_dataset_triggered_next_run_info", "dag2", "dag_id", "dag3", "dag_id", "session", "session"], ["info", "dag2", "dag_id"], ["info", "dag3", "dag_id"]], "session": [["session", "dag_maker", "session"], ["ds1_id", "session", "query", "DatasetModel", "id", "filter_by", "uri", "dataset1", "uri", "scalar"], ["session", "bulk_save_objects", "DatasetDagRunQueue", "dataset_id", "ds1_id", "target_dag_id", "dag2", "dag_id", "DatasetDagRunQueue", "dataset_id", "ds1_id", "target_dag_id", "dag3", "dag_id"], ["session", "flush"], ["datasets", "session", "query", "DatasetModel", "uri", "order_by", "DatasetModel", "id", "all"], ["info", "get_dataset_triggered_next_run_info", "dag1", "dag_id", "session", "session"], ["info", "get_dataset_triggered_next_run_info", "dag2", "dag_id", "dag3", "dag_id", "session", "session"]]}, "name": "test_get_dataset_triggered_next_run_info", "params": {"clear_datasets": "", "dag_maker": ""}, "params_descr": {"clear_datasets": "", "dag_maker": ""}, "params_occur": {"clear_datasets": [], "dag_maker": [["dag_maker", "dag_id", "schedule", "dataset2"], ["dag1", "dag_maker", "dag"], ["dag_maker", "dag_id", "schedule", "dataset1", "dataset2"], ["dag2", "dag_maker", "dag"], ["dag_maker", "dag_id", "schedule", "dataset1", "dataset2", "dataset3"], ["dag3", "dag_maker", "dag"], ["session", "dag_maker", "session"]]}, "params_p": {"args": [], "clear_datasets": [["tests.basilisp.helpers.CompileFn", 0.6560796894698183], ["str", 0.11057462213802915]], "dag_maker": [["base.Connection", 0.19734692312083862]], "kwargs": []}, "q_name": "test_get_dataset_triggered_next_run_info", "ret_exprs": [], "ret_type": "", "variables": {"dag1": "", "dag2": "", "dag3": "", "dataset1": "", "dataset2": "", "dataset3": "", "datasets": "", "ds1_id": "", "info": "", "session": ""}, "variables_p": {"dag1": [["speedwagon.config.AbsConfig", 0.07341411763848946]], "dag2": [["str", 0.46862026683781444], ["int", 0.09757864332226114]], "dag3": [["str", 0.46862026683781444], ["int", 0.09757864332226114]], "dataset1": [["str", 0.3672765517967909], ["bool", 0.0920548742289565]], "dataset2": [["str", 0.2747542758268222], ["pathlib.Path", 0.11438900143131207], ["list", 0.08607857507865718]], "dataset3": [["list", 0.9999999997671283], ["str", 8.312334999058097e-11], ["float", 4.954316388304144e-11], ["pathlib.Path", 3.9194225488227497e-11]], "datasets": [["str", 0.43177680931545076], ["int", 0.17850897217854145], ["notifications.models.Notification", 0.0889707693056302]], "ds1_id": [["int", 0.616066352260086], ["str", 0.09424230948790083], ["transfer.models.TopicID", 0.0803876701093685]], "info": [["Dict[str, str]", 0.29718208928704154], ["tracim.models.data.Content", 0.11982158008790295], ["Tuple[Any, Any, int]", 0.10882993704039978], ["str", 0.09409623061147068], ["Dict[str, Type[Any]]", 0.09151967032093665]], "session": [["sqlalchemy.orm.session.Session", 0.19025300498713107], ["SMSShell.models.session.Session", 0.10680392591953324], ["Optional[str]", 0.0976301923303609], ["dict", 0.09097329196814825]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[3488, 0], [3502, 34]], "fn_var_ln": {"dag": [[3493, 4], [3493, 7]], "dag_run": [[3495, 4], [3495, 11]]}, "fn_var_occur": {"dag": [["dag", "DAG", "dag_id", "start_date", "DEFAULT_DATE", "schedule", "CustomRunIdTimetable"], ["dag_run", "dag", "create_dagrun", "run_type", "DagRunType", "MANUAL", "state", "DagRunState", "QUEUED", "execution_date", "DEFAULT_DATE", "data_interval", "DEFAULT_DATE", "DEFAULT_DATE"]], "dag_run": [["dag_run", "dag", "create_dagrun", "run_type", "DagRunType", "MANUAL", "state", "DagRunState", "QUEUED", "execution_date", "DEFAULT_DATE", "data_interval", "DEFAULT_DATE", "DEFAULT_DATE"], ["dag_run", "run_id"]]}, "name": "test_dag_uses_timetable_for_run_id", "params": {"session": ""}, "params_descr": {"session": ""}, "params_occur": {"session": []}, "params_p": {"args": [], "kwargs": [], "session": [["bool", 0.4217600749043953], ["int", 0.08039836054201643], ["raiden.utils.List[raiden.raiden_service.RaidenService]", 0.05573963275955734]]}, "q_name": "test_dag_uses_timetable_for_run_id", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "dag_run": ""}, "variables_p": {"dag": [["str", 0.5131611578771006], ["io.TextIOWrapper", 0.175500936711146], ["Dict[str, Tuple[str, str]]", 0.1067884784146911], ["int", 0.1046282931111092], ["List[str]", 0.0999211338859531]], "dag_run": [["int", 0.29148619796118386], ["datetime.datetime", 0.10777903584015155], ["datetime.date", 0.10561038124645775], ["Dict[str, List[str]]", 0.10392649954336135], ["datetime.date.time", 0.09881152614384482], ["ajapaik.ajapaik.models.Album", 0.09515181253733923]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[3509, 0], [3522, 5]], "fn_var_ln": {"dag": [[3510, 4], [3510, 7]], "run_id": [[3511, 4], [3511, 10]]}, "fn_var_occur": {"dag": [["dag", "DAG", "dag_id", "start_date", "DEFAULT_DATE", "schedule"], ["dag", "create_dagrun", "run_type", "DagRunType", "MANUAL", "run_id", "run_id", "execution_date", "DEFAULT_DATE", "data_interval", "DEFAULT_DATE", "DEFAULT_DATE", "state", "DagRunState", "QUEUED"]], "run_id": [["run_id", "run_id_type", "generate_run_id", "DEFAULT_DATE"], ["dag", "create_dagrun", "run_type", "DagRunType", "MANUAL", "run_id", "run_id", "execution_date", "DEFAULT_DATE", "data_interval", "DEFAULT_DATE", "DEFAULT_DATE", "state", "DagRunState", "QUEUED"], ["str", "ctx", "value", "run_id", "run_id_type", "value"]]}, "name": "test_create_dagrun_disallow_manual_to_use_automated_run_id", "params": {"run_id_type": "airflow.utils.types.DagRunType"}, "params_descr": {"run_id_type": ""}, "params_occur": {"run_id_type": [["run_id", "run_id_type", "generate_run_id", "DEFAULT_DATE"], ["str", "ctx", "value", "run_id", "run_id_type", "value"]]}, "params_p": {"args": [], "kwargs": [], "run_id_type": [["str", 1.0]]}, "q_name": "test_create_dagrun_disallow_manual_to_use_automated_run_id", "ret_exprs": [], "ret_type": "None", "variables": {"dag": "", "run_id": ""}, "variables_p": {"dag": [["str", 0.39714124682145735], ["io.TextIOWrapper", 0.18919603007989635], ["Dict[str, Tuple[str, str]]", 0.12404019974724939], ["List[str]", 0.10209910108612129]], "run_id": [["int", 0.37674185964926954], ["str", 0.34203594595869513], ["Set[int]", 0.1893580437178707]]}}], "imports": ["__future__", "annotations", "datetime", "io", "logging", "os", "pickle", "re", "sys", "weakref", "contextlib", "redirect_stdout", "datetime", "timedelta", "pathlib", "Path", "tempfile", "NamedTemporaryFile", "unittest", "mock", "unittest", "mock", "patch", "jinja2", "pendulum", "pytest", "time_machine", "dateutil", "relativedelta", "relativedelta", "sqlalchemy", "inspect", "airflow", "airflow", "models", "settings", "airflow", "configuration", "conf", "airflow", "datasets", "Dataset", "airflow", "decorators", "setup", "task", "task_decorator", "teardown", "airflow", "exceptions", "AirflowDagInconsistent", "AirflowException", "DuplicateTaskIdFound", "ParamValidationError", "RemovedInAirflow3Warning", "airflow", "models", "DAG", "DagModel", "DagRun", "DagTag", "TaskFail", "TaskInstance", "TI", "airflow", "models", "baseoperator", "BaseOperator", "airflow", "models", "dag", "DagOwnerAttributes", "dag", "dag_decorator", "get_dataset_triggered_next_run_info", "airflow", "models", "dataset", "DatasetDagRunQueue", "DatasetEvent", "DatasetModel", "TaskOutletDatasetReference", "airflow", "models", "param", "DagParam", "Param", "ParamsDict", "airflow", "models", "serialized_dag", "SerializedDagModel", "airflow", "operators", "bash", "BashOperator", "airflow", "operators", "empty", "EmptyOperator", "airflow", "operators", "python", "PythonOperator", "airflow", "operators", "subdag", "SubDagOperator", "airflow", "security", "permissions", "airflow", "templates", "NativeEnvironment", "SandboxedEnvironment", "airflow", "timetables", "base", "DagRunInfo", "DataInterval", "TimeRestriction", "Timetable", "airflow", "timetables", "simple", "ContinuousTimetable", "DatasetTriggeredTimetable", "NullTimetable", "OnceTimetable", "airflow", "utils", "timezone", "airflow", "utils", "file", "list_py_file_paths", "airflow", "utils", "session", "create_session", "provide_session", "airflow", "utils", "state", "DagRunState", "State", "TaskInstanceState", "airflow", "utils", "task_group", "TaskGroup", "TaskGroupContext", "airflow", "utils", "timezone", "datetime", "datetime_tz", "airflow", "utils", "types", "DagRunType", "airflow", "utils", "weight_rule", "WeightRule", "tests", "models", "DEFAULT_DATE", "tests", "test_utils", "asserts", "assert_queries_count", "tests", "test_utils", "config", "conf_vars", "tests", "test_utils", "db", "clear_db_dags", "clear_db_datasets", "clear_db_runs", "clear_db_serialized_dags", "tests", "test_utils", "mapping", "expand_mapped_task", "tests", "test_utils", "timetables", "cron_timetable", "delta_timetable", "airflow", "decorators", "dag", "airflow", "exceptions", "DagInvalidTriggerRule", "airflow", "utils", "trigger_rule", "TriggerRule", "airflow", "models", "abstractoperator", "DEFAULT_TRIGGER_RULE", "airflow", "configuration", "secrets_backend_list", "airflow", "secrets", "local_filesystem", "LocalFilesystemBackend"], "mod_var_ln": {"TEST_DATE": [[88, 0], [88, 9]], "repo_root": [[90, 0], [90, 9]]}, "mod_var_occur": {"TEST_DATE": [["dag", "add_task", "BaseOperator", "task_id", "owner", "start_date", "TEST_DATE"], ["_next", "dag", "following_schedule", "TEST_DATE"], ["dag", "add_task", "BaseOperator", "task_id", "owner", "start_date", "TEST_DATE"], ["_next", "dag", "following_schedule", "TEST_DATE"], ["BaseOperator", "task_id", "owner", "start_date", "TEST_DATE"], ["_next", "_dag", "following_schedule", "TEST_DATE"], ["dag", "add_task", "BaseOperator", "task_id", "owner", "start_date", "TEST_DATE"], ["dag_run", "dag", "create_dagrun", "run_type", "DagRunType", "SCHEDULED", "execution_date", "TEST_DATE", "state", "State", "RUNNING"], ["TEST_DATE", "dag_run", "execution_date", "dag_run", "execution_date"], ["when", "TEST_DATE"], ["dag", "add_task", "BaseOperator", "task_id", "owner", "start_date", "TEST_DATE"], ["dag", "create_dagrun", "run_type", "DagRunType", "SCHEDULED", "execution_date", "TEST_DATE", "state", "State", "SUCCESS"], ["dag", "add_task", "BaseOperator", "task_id", "owner", "start_date", "TEST_DATE"], ["dag", "create_dagrun", "run_id", "state", "State", "RUNNING", "execution_date", "TEST_DATE"], ["dag", "create_dagrun", "run_id", "state", "State", "RUNNING", "execution_date", "TEST_DATE", "conf", "None"], ["dag", "create_dagrun", "run_id", "state", "State", "RUNNING", "execution_date", "TEST_DATE", "conf"], ["start_date", "TEST_DATE"], ["dag", "create_dagrun", "run_id", "state", "State", "RUNNING", "execution_date", "TEST_DATE"]], "repo_root": []}, "no_types_annot": {"D": 20, "I": 0, "U": 931}, "session_id": "EOsu9waoCIJcn9hjY6ZRhotSDKcfKXy-tSpjPJnhnoM", "set": null, "tc": [false, null], "type_annot_cove": 0.02, "typed_seq": "", "untyped_seq": "", "variables": {"TEST_DATE": "", "repo_root": ""}, "variables_p": {"TEST_DATE": [["datetime.datetime.datetime", 0.30739850026378723], ["datetime.date.time.timedelta", 0.1032021563836988], ["datetime.datetime", 0.09598999403312104], ["datetime.date", 0.09598547808998083], ["datetime.date.time.datetime", 0.09010462222477834]], "repo_root": [["str", 0.9999999989102197], ["click.decorators._IdentityFunction", 4.980090998994927e-10], ["pathlib.Path", 2.9588555511373894e-10], ["Optional[pathlib.Path]", 2.9588555511373894e-10]]}}}