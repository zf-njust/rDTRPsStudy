{"error": null, "response": {"classes": [{"cls_lc": [[41, 0], [160, 72]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[44, 4], [45, 27]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "setup_method", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagCode.setup_method", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[47, 4], [48, 27]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "teardown_method", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagCode.teardown_method", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[50, 4], [56, 35]], "fn_var_ln": {"bash_dag": [[52, 8], [52, 16]], "example_dags": [[51, 8], [51, 20]], "xcom_dag": [[54, 8], [54, 16]]}, "fn_var_occur": {"bash_dag": [["bash_dag", "example_dags"], ["DagCode", "bash_dag", "fileloc", "sync_to_db"], ["bash_dag", "xcom_dag"]], "example_dags": [["example_dags", "make_example_dags", "example_dags_module"], ["bash_dag", "example_dags"], ["xcom_dag", "example_dags"]], "xcom_dag": [["xcom_dag", "example_dags"], ["DagCode", "xcom_dag", "fileloc", "sync_to_db"], ["bash_dag", "xcom_dag"]]}, "name": "_write_two_example_dags", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagCode._write_two_example_dags", "ret_exprs": ["return [bash_dag, xcom_dag]"], "ret_type": "", "ret_type_p": [["int", 0.30000000000000004], ["Callable", 0.2], ["models.Question", 0.1], ["str", 0.1]], "variables": {"bash_dag": "", "example_dags": "", "xcom_dag": ""}, "variables_p": {"bash_dag": [["str", 0.7571899428228731], ["int", 0.24281005717712703]], "example_dags": [["int", 0.2760587510878418], ["str", 0.1380293755439209], ["Pattern[str]", 0.10023234077149738]], "xcom_dag": [["str", 0.7571899428228731], ["int", 0.24281005717712703]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[58, 4], [62, 27]], "fn_var_ln": {"example_dags": [[59, 8], [59, 20]]}, "fn_var_occur": {"example_dags": [["example_dags", "make_example_dags", "example_dags_module"], ["example_dags", "values"]]}, "name": "_write_example_dags", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagCode._write_example_dags", "ret_exprs": ["return example_dags"], "ret_type": "", "ret_type_p": [["int", 0.30000000000000004], ["Callable", 0.2], ["models.Question", 0.1], ["str", 0.1]], "variables": {"example_dags": ""}, "variables_p": {"example_dags": []}}, {"docstring": {"func": "Dg code can be written into database.", "long_descr": null, "ret": null}, "fn_lc": [[64, 4], [68, 48]], "fn_var_ln": {"example_dags": [[66, 8], [66, 20]]}, "fn_var_occur": {"example_dags": [["example_dags", "self", "_write_example_dags"], ["self", "_compare_example_dags", "example_dags"]]}, "name": "test_sync_to_db", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["example_dags", "self", "_write_example_dags"], ["self", "_compare_example_dags", "example_dags"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagCode.test_sync_to_db", "ret_exprs": [], "ret_type": "", "variables": {"example_dags": ""}, "variables_p": {"example_dags": [["bool", 0.9999999998254222], ["str", 8.214930691670352e-11]]}}, {"docstring": {"func": "Dg code can be bulk written into database.", "long_descr": null, "ret": null}, "fn_lc": [[70, 4], [78, 48]], "fn_var_ln": {"example_dags": [[72, 8], [72, 20]], "files": [[73, 8], [73, 13]]}, "fn_var_occur": {"example_dags": [["example_dags", "make_example_dags", "example_dags_module"], ["files", "dag", "fileloc", "dag", "example_dags", "values"], ["self", "_compare_example_dags", "example_dags"]], "files": [["files", "dag", "fileloc", "dag", "example_dags", "values"], ["DagCode", "bulk_sync_to_db", "files", "session", "session"]]}, "name": "test_bulk_sync_to_db", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "_compare_example_dags", "example_dags"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagCode.test_bulk_sync_to_db", "ret_exprs": [], "ret_type": "", "variables": {"example_dags": "", "files": ""}, "variables_p": {"example_dags": [], "files": [["Dict[str, Any]", 0.22362555937539466], ["Dict[str, Union[float, str]]", 0.09174781557132809], ["str", 0.08742455584639049], ["List[None]", 0.08607326119964089], ["list", 0.08166298793630976]]}}, {"docstring": {"func": "Dg code can be bulk written into database.", "long_descr": null, "ret": null}, "fn_lc": [[80, 4], [92, 48]], "fn_var_ln": {"example_dags": [[82, 8], [82, 20]], "files": [[83, 8], [83, 13]], "half_files": [[84, 8], [84, 18]]}, "fn_var_occur": {"example_dags": [["example_dags", "make_example_dags", "example_dags_module"], ["files", "dag", "fileloc", "dag", "example_dags", "values"], ["self", "_compare_example_dags", "example_dags"]], "files": [["files", "dag", "fileloc", "dag", "example_dags", "values"], ["half_files", "files", "int", "len", "files"], ["DagCode", "bulk_sync_to_db", "files", "session", "session"]], "half_files": [["half_files", "files", "int", "len", "files"], ["DagCode", "bulk_sync_to_db", "half_files", "session", "session"]]}, "name": "test_bulk_sync_to_db_half_files", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "_compare_example_dags", "example_dags"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagCode.test_bulk_sync_to_db_half_files", "ret_exprs": [], "ret_type": "", "variables": {"example_dags": "", "files": "", "half_files": ""}, "variables_p": {"example_dags": [], "files": [["int", 0.20486411908800428], ["List[str]", 0.10282599341860241], ["list", 0.08763975144519297]], "half_files": [["int", 0.4212668870889551], ["str", 0.2821851756983544]]}}, {"docstring": {"func": "Dag code detects duplicate key.", "long_descr": null, "ret": null}, "fn_lc": [[95, 4], [100, 42]], "fn_var_ln": {"return_value": [[97, 8], [97, 30]]}, "fn_var_occur": {"return_value": [["mock_hash", "return_value"]]}, "name": "test_detecting_duplicate_key", "params": {"mock_hash": "", "self": ""}, "params_descr": {"mock_hash": "", "self": ""}, "params_occur": {"mock_hash": [["mock_hash", "return_value"]], "self": [["self", "_write_two_example_dags"]]}, "params_p": {"args": [], "kwargs": [], "mock_hash": [], "self": []}, "q_name": "TestDagCode.test_detecting_duplicate_key", "ret_exprs": [], "ret_type": "", "variables": {"return_value": ""}, "variables_p": {"return_value": [["Set[str]", 0.31968019372842504], ["str", 0.28974495331495453], ["list", 0.1978080233656786], ["int", 0.09819123429613609], ["List[str]", 0.09457559529480569]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[102, 4], [119, 56]], "fn_var_ln": {"dag_fileloc_hash": [[108, 16], [108, 32]], "fileloc": [[106, 20], [106, 31]], "result": [[109, 16], [109, 22]], "source_code": [[118, 20], [118, 31]]}, "fn_var_occur": {"dag_fileloc_hash": [["dag_fileloc_hash", "DagCode", "dag_fileloc_hash", "dag", "fileloc"], ["result", "session", "query", "DagCode", "fileloc", "DagCode", "fileloc_hash", "DagCode", "source_code", "filter", "DagCode", "fileloc", "dag", "fileloc", "filter", "DagCode", "fileloc_hash", "dag_fileloc_hash", "one"]], "fileloc": [["dag", "fileloc", "dag", "parent_dag", "fileloc"], ["DagCode", "has_dag", "dag", "fileloc"], ["dag_fileloc_hash", "DagCode", "dag_fileloc_hash", "dag", "fileloc"], ["result", "session", "query", "DagCode", "fileloc", "DagCode", "fileloc_hash", "DagCode", "source_code", "filter", "DagCode", "fileloc", "dag", "fileloc", "filter", "DagCode", "fileloc_hash", "dag_fileloc_hash", "one"], ["result", "fileloc", "dag", "fileloc"], ["open_maybe_zipped", "dag", "fileloc", "source"]], "result": [["result", "session", "query", "DagCode", "fileloc", "DagCode", "fileloc_hash", "DagCode", "source_code", "filter", "DagCode", "fileloc", "dag", "fileloc", "filter", "DagCode", "fileloc_hash", "dag_fileloc_hash", "one"], ["result", "fileloc", "dag", "fileloc"], ["result", "source_code", "source_code"]], "source_code": [["result", "session", "query", "DagCode", "fileloc", "DagCode", "fileloc_hash", "DagCode", "source_code", "filter", "DagCode", "fileloc", "dag", "fileloc", "filter", "DagCode", "fileloc_hash", "dag_fileloc_hash", "one"], ["source_code", "source", "read"], ["result", "source_code", "source_code"]]}, "name": "_compare_example_dags", "params": {"example_dags": "", "self": ""}, "params_descr": {"example_dags": "", "self": ""}, "params_occur": {"example_dags": [["example_dags", "values"]], "self": []}, "params_p": {"args": [], "example_dags": [["dict", 1.0940661152697802e-10], ["str", 4.179877302070475e-11], ["List[str]", 2.4639980849536406e-11]], "kwargs": [], "self": []}, "q_name": "TestDagCode._compare_example_dags", "ret_exprs": [], "ret_type": "", "variables": {"dag_fileloc_hash": "", "fileloc": "", "result": "", "source_code": ""}, "variables_p": {"dag_fileloc_hash": [["str", 0.8938254242496582], ["Union[bytes, str]", 0.10617457575034177]], "fileloc": [["tikki.db.tables.Base", 0.10992303025573331], ["int", 0.09517038294947916], ["Tuple[Literal]", 0.09158328217403237]], "result": [["list", 0.18502336410162323], ["Tuple[str, str]", 0.12075280633088241], ["str", 0.10825311136090744], ["Dict[str, Optional[str]]", 0.10604895759857932], ["dict", 0.09886005078855027], ["int", 0.08865585868963713]], "source_code": [["str", 0.5696256165505053], ["int", 0.2230532386716839], ["cmk.utils.type_defs.UserId", 0.11445895284535014], ["bool", 0.09286219193246047]]}}, {"docstring": {"func": "Test that code can be retrieved from DB when you do not have access to Code file.", "long_descr": "Source Code should at least exist in one of DB or File.", "ret": null}, "fn_lc": [[121, 4], [135, 46]], "fn_var_ln": {"dag_code": [[132, 12], [132, 20]], "example_dag": [[126, 8], [126, 19]], "side_effect": [[131, 12], [131, 33]]}, "fn_var_occur": {"dag_code": [["dag_code", "DagCode", "get_code_by_fileloc", "example_dag", "fileloc"], ["test_string", "dag_code"]], "example_dag": [["example_dag", "make_example_dags", "example_dags_module", "get"], ["example_dag", "sync_to_db"], ["dag_code", "DagCode", "get_code_by_fileloc", "example_dag", "fileloc"]], "side_effect": [["mock_open", "side_effect", "FileNotFoundError"]]}, "name": "test_code_can_be_read_when_no_access_to_file", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagCode.test_code_can_be_read_when_no_access_to_file", "ret_exprs": [], "ret_type": "", "variables": {"dag_code": "", "example_dag": "", "side_effect": ""}, "variables_p": {"dag_code": [["str", 0.5629621266237724], ["int", 0.34361273478775894], ["Dict[str, str]", 0.09342513858846845]], "example_dag": [], "side_effect": [["str", 0.37080176454269076], ["mock._patch[Literal]", 0.09301507231955213], ["int", 0.08655833422117606]]}}, {"docstring": {"func": "Test if DagCode is updated in DB when DAG file is changed", "long_descr": null, "ret": null}, "fn_lc": [[137, 4], [160, 72]], "fn_var_ln": {"example_dag": [[139, 8], [139, 19]], "new_result": [[156, 20], [156, 30]], "result": [[143, 12], [143, 18]], "return_value": [[152, 16], [152, 38]]}, "fn_var_occur": {"example_dag": [["example_dag", "make_example_dags", "example_dags_module", "get"], ["example_dag", "sync_to_db"], ["result", "session", "query", "DagCode", "filter", "DagCode", "fileloc", "example_dag", "fileloc", "one"], ["result", "fileloc", "example_dag", "fileloc"], ["example_dag", "sync_to_db"], ["new_result", "session", "query", "DagCode", "filter", "DagCode", "fileloc", "example_dag", "fileloc", "one"], ["new_result", "fileloc", "example_dag", "fileloc"]], "new_result": [["new_result", "session", "query", "DagCode", "filter", "DagCode", "fileloc", "example_dag", "fileloc", "one"], ["new_result", "fileloc", "example_dag", "fileloc"], ["new_result", "source_code"], ["new_result", "last_updated", "result", "last_updated"]], "result": [["result", "session", "query", "DagCode", "filter", "DagCode", "fileloc", "example_dag", "fileloc", "one"], ["result", "fileloc", "example_dag", "fileloc"], ["result", "source_code", "None"], ["mock_mtime", "return_value", "result", "last_updated", "timedelta", "seconds", "timestamp"], ["new_result", "last_updated", "result", "last_updated"]], "return_value": [["mock_mtime", "return_value", "result", "last_updated", "timedelta", "seconds", "timestamp"], ["mock_code", "return_value"]]}, "name": "test_db_code_updated_on_dag_file_change", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDagCode.test_db_code_updated_on_dag_file_change", "ret_exprs": [], "ret_type": "", "variables": {"example_dag": "", "new_result": "", "result": "", "return_value": ""}, "variables_p": {"example_dag": [["dict", 0.20843844465639041], ["Dict[str, Set[str]]", 0.19450051036076205], ["str", 0.0973156191961179]], "new_result": [["str", 0.2845632321107741], ["Type[int]", 0.1815555389071779], ["Dict[str, str]", 0.1066310000540648], ["int", 0.09368548910419158]], "result": [["list", 0.20323071593438974], ["dict", 0.11481113347405865], ["BoundMethod[Callable(datetime.datetime.now)[Any, Any], Type[datetime.datetime]]", 0.11226106455137069], ["List[Tuple[Any, str]]", 0.10425675342027987], ["str", 0.0906544164853284]], "return_value": [["int", 0.1602352892084722], ["str", 0.1599513202904851], ["Dict[str, Dict[str, Any]]", 0.09900233506545145], ["Dict[str, int]", 0.08677251164596445], ["Dict[str, Tuple[str, int]]", 0.07387115991602536]]}}], "name": "TestDagCode", "q_name": "TestDagCode", "variables": {}, "variables_p": {}}], "funcs": [{"docstring": {"func": "Loads DAGs from a module for test.", "long_descr": null, "ret": null}, "fn_lc": [[35, 0], [38, 22]], "fn_var_ln": {"dagbag": [[37, 4], [37, 10]]}, "fn_var_occur": {"dagbag": [["dagbag", "DagBag", "module", "__path__"], ["dagbag", "dags"]]}, "name": "make_example_dags", "params": {"module": ""}, "params_descr": {"module": ""}, "params_occur": {"module": [["dagbag", "DagBag", "module", "__path__"]]}, "params_p": {"args": [], "kwargs": [], "module": [["str", 0.33331794142513543], ["datetime.datetime", 0.10772869369749455], ["dict", 0.10519334916621548]]}, "q_name": "make_example_dags", "ret_exprs": ["return dagbag.dags"], "ret_type": "", "ret_type_p": [["int", 0.30000000000000004], ["Callable", 0.2], ["models.Question", 0.1], ["str", 0.1]], "variables": {"dagbag": ""}, "variables_p": {"dagbag": [["str", 0.9076306509149353], ["list", 0.09236934908506463]]}}], "imports": ["__future__", "annotations", "datetime", "timedelta", "unittest", "mock", "patch", "pytest", "airflow", "AirflowException", "example_dags", "example_dags_module", "airflow", "models", "DagBag", "airflow", "models", "dagcode", "DagCode", "airflow", "utils", "file", "open_maybe_zipped", "airflow", "utils", "session", "create_session", "tests", "test_utils", "db", "clear_db_dag_code"], "mod_var_ln": {}, "mod_var_occur": {}, "no_types_annot": {"D": 0, "I": 0, "U": 38}, "session_id": "WPHwwcQ2i6ZWbOJxHLyU94tmJyV0TPEPWzeLZ45DnzI", "set": null, "tc": [false, null], "type_annot_cove": 0.0, "typed_seq": "", "untyped_seq": "", "variables": {}, "variables_p": {}}}