{"error": null, "response": {"classes": [{"cls_lc": [[36, 0], [48, 58]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[37, 4], [41, 54]], "fn_var_ln": {"naive": [[40, 8], [40, 18]], "timezoned": [[41, 8], [41, 22]]}, "fn_var_occur": {"naive": [["self", "naive", "datetime", "now"]], "timezoned": [["self", "timezoned", "datetime", "now", "tz", "timezone", "utc"]]}, "name": "setup_method", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "naive", "datetime", "now"], ["self", "timezoned", "datetime", "now", "tz", "timezone", "utc"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestValidateIsTimezone.setup_method", "ret_exprs": [], "ret_type": "None", "variables": {"naive": "", "timezoned": ""}, "variables_p": {"naive": [["Optional[datetime.datetime]", 0.5421476727527055], ["datetime.datetime", 0.1810923730367613], ["raiden.utils.List[raiden.utils.ChannelID]", 0.09146482453819285], ["datetime.date", 0.0906514302096744]], "timezoned": [["datetime.datetime.timedelta", 0.2812219122393424], ["datetime.timedelta", 0.21208112445706173], ["int", 0.19060850649496588], ["datetime.datetime.time", 0.1145884095179108], ["datetime.datetime.datetime", 0.11130214320694341], ["datetime.datetime", 0.09019790408377588]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[43, 4], [45, 43]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_gives_400_for_naive", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["validate_istimezone", "self", "naive"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestValidateIsTimezone.test_gives_400_for_naive", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[47, 4], [48, 58]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_timezone_passes", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["validate_istimezone", "self", "timezoned", "None"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestValidateIsTimezone.test_timezone_passes", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestValidateIsTimezone", "q_name": "TestValidateIsTimezone", "variables": {}, "variables_p": {}}, {"cls_lc": [[51, 0], [71, 45]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[52, 4], [54, 52]], "fn_var_ln": {"default_time": [[53, 8], [53, 25]], "default_time_2": [[54, 8], [54, 27]]}, "fn_var_occur": {"default_time": [["self", "default_time"]], "default_time_2": [["self", "default_time_2"]]}, "name": "setup_method", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "default_time"], ["self", "default_time_2"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDateTimeParser.setup_method", "ret_exprs": [], "ret_type": "None", "variables": {"default_time": "", "default_time_2": ""}, "variables_p": {"default_time": [["int", 0.6929102165768604], ["str", 0.30708978342313953]], "default_time_2": [["int", 0.6929102165768604], ["str", 0.30708978342313953]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[56, 4], [60, 56]], "fn_var_ln": {"datetime": [[57, 8], [57, 16]], "datetime2": [[58, 8], [58, 17]]}, "fn_var_occur": {"datetime": [["datetime", "format_datetime", "self", "default_time"], ["datetime", "datetime2"], ["datetime", "isoformat", "self", "default_time"]], "datetime2": [["datetime2", "timezone", "parse", "self", "default_time"], ["datetime", "datetime2"]]}, "name": "test_works_with_datestring_ending_00_00", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["datetime", "format_datetime", "self", "default_time"], ["datetime2", "timezone", "parse", "self", "default_time"], ["datetime", "isoformat", "self", "default_time"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDateTimeParser.test_works_with_datestring_ending_00_00", "ret_exprs": [], "ret_type": "", "variables": {"datetime": "", "datetime2": ""}, "variables_p": {"datetime": [["datetime.datetime", 0.6100781502619074], ["datetime.datetime.datetime", 0.2930488145867653], ["datetime.timedelta", 0.09687303515132745]], "datetime2": [["str", 1.0]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[62, 4], [66, 56]], "fn_var_ln": {"datetime": [[63, 8], [63, 16]], "datetime2": [[64, 8], [64, 17]]}, "fn_var_occur": {"datetime": [["datetime", "format_datetime", "self", "default_time_2"], ["datetime", "datetime2"], ["datetime", "isoformat", "self", "default_time"]], "datetime2": [["datetime2", "timezone", "parse", "self", "default_time_2"], ["datetime", "datetime2"]]}, "name": "test_works_with_datestring_ending_with_zed", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["datetime", "format_datetime", "self", "default_time_2"], ["datetime2", "timezone", "parse", "self", "default_time_2"], ["datetime", "isoformat", "self", "default_time"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDateTimeParser.test_works_with_datestring_ending_with_zed", "ret_exprs": [], "ret_type": "", "variables": {"datetime": "", "datetime2": ""}, "variables_p": {"datetime": [["datetime.datetime", 0.6100781502619074], ["datetime.datetime.datetime", 0.2930488145867653], ["datetime.timedelta", 0.09687303515132745]], "datetime2": [["str", 1.0]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[68, 4], [71, 45]], "fn_var_ln": {"invalid_datetime": [[69, 8], [69, 24]]}, "fn_var_occur": {"invalid_datetime": [["format_datetime", "invalid_datetime"]]}, "name": "test_raises_400_for_invalid_arg", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDateTimeParser.test_raises_400_for_invalid_arg", "ret_exprs": [], "ret_type": "", "variables": {"invalid_datetime": ""}, "variables_p": {"invalid_datetime": [["datetime.datetime", 0.9999999994097455], ["Tuple[int, int]", 1.9544379962891088e-10], ["str", 1.3029586641927393e-10], ["float", 6.907104198966822e-11], ["List[int]", 6.514793320963696e-11], ["List[str]", 6.514793320963696e-11], ["int", 6.514793320963696e-11]]}}], "name": "TestDateTimeParser", "q_name": "TestDateTimeParser", "variables": {}, "variables_p": {}}, {"cls_lc": [[74, 0], [98, 27]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[76, 4], [78, 27]], "fn_var_ln": {"limit": [[77, 8], [77, 13]]}, "fn_var_occur": {"limit": [["limit", "check_limit"]]}, "name": "test_maximum_limit_return_val", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestMaximumPagelimit.test_maximum_limit_return_val", "ret_exprs": [], "ret_type": "", "variables": {"limit": ""}, "variables_p": {"limit": [["str", 0.3333333333468328], ["Optional[str]", 0.3333333333213805], ["list", 0.16666666666069024], ["Dict[str, Union[Any, Any]]", 1.0406311091486327e-11]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[81, 4], [83, 27]], "fn_var_ln": {"limit": [[82, 8], [82, 13]]}, "fn_var_occur": {"limit": [["limit", "check_limit"]]}, "name": "test_maximum_limit_returns_configured_if_limit_above_conf", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestMaximumPagelimit.test_maximum_limit_returns_configured_if_limit_above_conf", "ret_exprs": [], "ret_type": "", "variables": {"limit": ""}, "variables_p": {"limit": [["str", 0.3333333333468328], ["Optional[str]", 0.3333333333213805], ["list", 0.16666666666069024], ["Dict[str, Union[Any, Any]]", 1.0406311091486327e-11]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[86, 4], [88, 28]], "fn_var_ln": {"limit": [[87, 8], [87, 13]]}, "fn_var_occur": {"limit": [["limit", "check_limit"]]}, "name": "test_limit_returns_set_max_if_give_limit_is_exceeded", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestMaximumPagelimit.test_limit_returns_set_max_if_give_limit_is_exceeded", "ret_exprs": [], "ret_type": "", "variables": {"limit": ""}, "variables_p": {"limit": [["str", 0.3333333333468328], ["Optional[str]", 0.3333333333213805], ["list", 0.16666666666069024], ["Dict[str, Union[Any, Any]]", 1.0406311091486327e-11]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[91, 4], [93, 27]], "fn_var_ln": {"limit": [[92, 8], [92, 13]]}, "fn_var_occur": {"limit": [["limit", "check_limit"]]}, "name": "test_limit_of_zero_returns_default", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestMaximumPagelimit.test_limit_of_zero_returns_default", "ret_exprs": [], "ret_type": "", "variables": {"limit": ""}, "variables_p": {"limit": [["str", 0.3333333333468328], ["Optional[str]", 0.3333333333213805], ["list", 0.16666666666069024], ["Dict[str, Union[Any, Any]]", 1.0406311091486327e-11]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[96, 4], [98, 27]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_negative_limit_raises", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestMaximumPagelimit.test_negative_limit_raises", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestMaximumPagelimit", "q_name": "TestMaximumPagelimit", "variables": {}, "variables_p": {}}, {"cls_lc": [[101, 0], [124, 50]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[102, 4], [109, 97]], "fn_var_ln": {"decorated_endpoint": [[105, 8], [105, 26]], "decorator": [[103, 8], [103, 17]], "endpoint": [[104, 8], [104, 16]]}, "fn_var_occur": {"decorated_endpoint": [["decorated_endpoint", "decorator", "endpoint"], ["decorated_endpoint", "param_a"]], "decorator": [["decorator", "format_parameters", "format_datetime"], ["decorated_endpoint", "decorator", "endpoint"]], "endpoint": [["endpoint", "mock", "MagicMock"], ["decorated_endpoint", "decorator", "endpoint"], ["endpoint", "assert_called_once_with", "param_a", "DateTime", "tzinfo", "Timezone"]]}, "name": "test_should_works_with_datetime_formatter", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestFormatParameters.test_should_works_with_datetime_formatter", "ret_exprs": [], "ret_type": "", "variables": {"decorated_endpoint": "", "decorator": "", "endpoint": ""}, "variables_p": {"decorated_endpoint": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["str", 0.1], ["datetime.timedelta", 0.1]], "decorator": [["int", 0.20055237221559863], ["str", 0.11023597563800148], ["list", 0.08068057448563118]], "endpoint": [["mock.Mock", 0.9177997662361274]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[111, 4], [116, 47]], "fn_var_ln": {"decorated_endpoint": [[114, 8], [114, 26]], "decorator": [[112, 8], [112, 17]], "endpoint": [[113, 8], [113, 16]]}, "fn_var_occur": {"decorated_endpoint": [["decorated_endpoint", "decorator", "endpoint"], ["decorated_endpoint", "param_a"]], "decorator": [["decorator", "format_parameters", "format_datetime"], ["decorated_endpoint", "decorator", "endpoint"]], "endpoint": [["endpoint", "mock", "MagicMock"], ["decorated_endpoint", "decorator", "endpoint"]]}, "name": "test_should_propagate_exceptions", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestFormatParameters.test_should_propagate_exceptions", "ret_exprs": [], "ret_type": "", "variables": {"decorated_endpoint": "", "decorator": "", "endpoint": ""}, "variables_p": {"decorated_endpoint": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["str", 0.1], ["datetime.timedelta", 0.1]], "decorator": [["int", 0.20055237221559863], ["str", 0.11023597563800148], ["list", 0.08068057448563118]], "endpoint": [["mock.Mock", 0.8797191769962394]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[119, 4], [124, 50]], "fn_var_ln": {"decorated_endpoint": [[122, 8], [122, 26]], "decorator": [[120, 8], [120, 17]], "endpoint": [[121, 8], [121, 16]]}, "fn_var_occur": {"decorated_endpoint": [["decorated_endpoint", "decorator", "endpoint"], ["decorated_endpoint", "limit"]], "decorator": [["decorator", "format_parameters", "check_limit"], ["decorated_endpoint", "decorator", "endpoint"]], "endpoint": [["endpoint", "mock", "MagicMock"], ["decorated_endpoint", "decorator", "endpoint"], ["endpoint", "assert_called_once_with", "limit"]]}, "name": "test_should_work_with_limit", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestFormatParameters.test_should_work_with_limit", "ret_exprs": [], "ret_type": "", "variables": {"decorated_endpoint": "", "decorator": "", "endpoint": ""}, "variables_p": {"decorated_endpoint": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["str", 0.1], ["datetime.timedelta", 0.1]], "decorator": [["int", 0.7003988367380389], ["Dict[str, Dict[str, str]]", 0.10220112611588236], ["List[int]", 0.1021445424916147], ["List[str]", 0.09525549465446398]], "endpoint": [["mock.Mock", 0.8467301854969598]]}}], "name": "TestFormatParameters", "q_name": "TestFormatParameters", "variables": {}, "variables_p": {}}], "funcs": [], "imports": ["__future__", "annotations", "unittest", "mock", "pytest", "pendulum", "DateTime", "pendulum", "tz", "timezone", "Timezone", "airflow", "api_connexion", "exceptions", "BadRequest", "airflow", "api_connexion", "parameters", "check_limit", "format_datetime", "format_parameters", "validate_istimezone", "airflow", "utils", "timezone", "tests", "test_utils", "config", "conf_vars", "datetime", "datetime"], "mod_var_ln": {}, "mod_var_occur": {}, "no_types_annot": {"D": 2, "I": 0, "U": 35}, "session_id": "iH7972_hejc5m9IuBG-G4Bswglp09TcxOy4Zk8hhPns", "set": null, "tc": [false, null], "type_annot_cove": 0.05, "typed_seq": "", "untyped_seq": "", "variables": {}, "variables_p": {}}}