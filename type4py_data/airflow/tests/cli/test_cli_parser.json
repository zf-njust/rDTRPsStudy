{"error": null, "response": {"classes": [{"cls_lc": [[41, 0], [270, 9]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": "Test if the name of cli.args long option valid", "long_descr": null, "ret": null}, "fn_lc": [[42, 4], [50, 106]], "fn_var_ln": {"optional_long": [[46, 8], [46, 21]]}, "fn_var_occur": {"optional_long": [["optional_long", "arg", "arg", "cli_args", "values", "len", "arg", "flags", "arg", "flags", "startswith"]]}, "name": "test_arg_option_long_only", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestCli.test_arg_option_long_only", "ret_exprs": [], "ret_type": "", "variables": {"optional_long": ""}, "variables_p": {"optional_long": [["list", 0.41192452603740226], ["Set[str]", 0.117582641676048], ["List[int]", 0.10288384115876982], ["Dict[str, int]", 0.09491510552609932], ["List[Tuple[str, Any, Any]]", 0.09312470406807705], ["str", 0.09082079809646247], ["List[str]", 0.08874838343714106]]}}, {"docstring": {"func": "Test if the name of cli.args mix option (-s, --long) valid", "long_descr": null, "ret": null}, "fn_lc": [[52, 4], [61, 106]], "fn_var_ln": {"optional_mix": [[56, 8], [56, 20]]}, "fn_var_occur": {"optional_mix": [["optional_mix", "arg", "arg", "cli_args", "values", "len", "arg", "flags", "arg", "flags", "startswith"]]}, "name": "test_arg_option_mix_short_long", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestCli.test_arg_option_mix_short_long", "ret_exprs": [], "ret_type": "", "variables": {"optional_mix": ""}, "variables_p": {"optional_mix": [["list", 0.41192452603740226], ["Set[str]", 0.117582641676048], ["List[int]", 0.10288384115876982], ["Dict[str, int]", 0.09491510552609932], ["List[Tuple[str, Any, Any]]", 0.09312470406807705], ["str", 0.09082079809646247], ["List[str]", 0.08874838343714106]]}}, {"docstring": {"func": "Test if each of cli.*_COMMANDS without conflict subcommand", "long_descr": null, "ret": null}, "fn_lc": [[63, 4], [74, 102]], "fn_var_ln": {"name": [[73, 12], [73, 16]], "subcommand": [[67, 8], [67, 18]]}, "fn_var_occur": {"name": [["name", "command", "name", "lower", "command", "sub"], ["len", "name", "len", "set", "name", "group_name"]], "subcommand": [["subcommand", "var", "cli_parser", "__dict__", "get", "var", "var", "cli_parser", "__dict__", "var", "isupper", "var", "startswith"], ["subcommand", "items"]]}, "name": "test_subcommand_conflict", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestCli.test_subcommand_conflict", "ret_exprs": [], "ret_type": "", "variables": {"name": "", "subcommand": ""}, "variables_p": {"name": [["List[str]", 0.27798160518725074], ["str", 0.20327536490475656], ["dict", 0.11990201534937057], ["Pattern[str]", 0.11262990491195551], ["int", 0.09583838773160908], ["set", 0.09180744821370788]], "subcommand": [["str", 0.28503631432393217], ["dss.config.Replica", 0.12982013650282856], ["Tuple[Literal, Literal]", 0.09948076649721938], ["vimiv.config.styles.Style", 0.09757965535441857]]}}, {"docstring": {"func": "Test if each of cli.*_COMMANDS.arg name without conflict", "long_descr": null, "ret": null}, "fn_lc": [[76, 4], [90, 102]], "fn_var_ln": {"conflict_arg": [[87, 16], [87, 28]], "subcommand": [[80, 8], [80, 18]]}, "fn_var_occur": {"conflict_arg": [["conflict_arg", "arg", "arg", "count", "Counter", "com", "args", "items", "count"], ["conflict_arg", "group", "com", "name", "conflict_arg"]], "subcommand": [["subcommand", "var", "cli_parser", "__dict__", "get", "var", "var", "cli_parser", "__dict__", "var", "isupper", "var", "startswith"], ["subcommand", "items"]]}, "name": "test_subcommand_arg_name_conflict", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestCli.test_subcommand_arg_name_conflict", "ret_exprs": [], "ret_type": "", "variables": {"conflict_arg": "", "subcommand": ""}, "variables_p": {"conflict_arg": [["list", 0.27335549557060046], ["Set[str]", 0.12584749482132934], ["set", 0.12584749482132934], ["Tuple[Literal, Literal, Literal, Literal, Literal]", 0.0967664195089749], ["Optional[bytes]", 0.08536666061757271]], "subcommand": [["str", 0.28503631432393217], ["dss.config.Replica", 0.12982013650282856], ["Tuple[Literal, Literal]", 0.09948076649721938], ["vimiv.config.styles.Style", 0.09757965535441857]]}}, {"docstring": {"func": "Test if each of cli.*_COMMANDS.arg flags without conflict", "long_descr": null, "ret": null}, "fn_lc": [[92, 4], [126, 17]], "fn_var_ln": {"conflict_long_option": [[115, 16], [115, 36]], "conflict_position": [[106, 16], [106, 33]], "conflict_short_option": [[122, 16], [122, 37]], "long_option": [[112, 16], [112, 27]], "position": [[103, 16], [103, 24]], "short_option": [[121, 16], [121, 28]], "subcommand": [[96, 8], [96, 18]]}, "fn_var_occur": {"conflict_long_option": [["conflict_long_option", "arg", "arg", "count", "Counter", "long_option", "items", "count"], ["conflict_long_option", "group", "com", "name", "conflict_long_option"]], "conflict_position": [["conflict_position", "arg", "arg", "count", "Counter", "position", "items", "count"], ["conflict_position", "group", "com", "name", "conflict_position"]], "conflict_short_option": [["conflict_short_option", "arg", "arg", "count", "Counter", "short_option", "items", "count"], ["conflict_short_option", "group", "com", "name", "conflict_short_option"]], "long_option": [["long_option", "a", "flags", "a", "com", "args", "len", "a", "flags", "a", "flags", "startswith", "a", "flags", "a", "com", "args", "len", "a", "flags"], ["conflict_long_option", "arg", "arg", "count", "Counter", "long_option", "items", "count"]], "position": [["position", "a", "flags", "a", "com", "args", "len", "a", "flags", "a", "flags", "startswith"], ["conflict_position", "arg", "arg", "count", "Counter", "position", "items", "count"]], "short_option": [["short_option", "a", "flags", "a", "com", "args", "len", "a", "flags"], ["conflict_short_option", "arg", "arg", "count", "Counter", "short_option", "items", "count"]], "subcommand": [["subcommand", "key", "val", "key", "val", "cli_parser", "__dict__", "items", "key", "isupper", "key", "startswith"], ["subcommand", "items"]]}, "name": "test_subcommand_arg_flag_conflict", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestCli.test_subcommand_arg_flag_conflict", "ret_exprs": [], "ret_type": "", "variables": {"conflict_long_option": "", "conflict_position": "", "conflict_short_option": "", "long_option": "", "position": "", "short_option": "", "subcommand": ""}, "variables_p": {"conflict_long_option": [["Dict[str, Any]", 0.19121492698430997], ["list", 0.1221188548055423], ["dict", 0.11836269968662869], ["Tuple[None]", 0.09706379897671517], ["str", 0.0963288135857124], ["List[str]", 0.09584243249644413]], "conflict_position": [["Tuple[int, int, int]", 0.3723337705829634], ["str", 0.21940105803696708], ["MutableMapping[str, Any]", 0.10795013750491347], ["Dict[str, Callable[[], Any]]", 0.0953562646780095], ["set", 0.08962433707649559]], "conflict_short_option": [["Dict[str, Any]", 0.19121492698430997], ["list", 0.1221188548055423], ["dict", 0.11836269968662869], ["Tuple[None]", 0.09706379897671517], ["str", 0.0963288135857124], ["List[str]", 0.09584243249644413]], "long_option": [["int", 0.28657909904304446], ["List[str]", 0.2025011972741183], ["Pattern[str]", 0.1293569849789101], ["Dict[str, List[str]]", 0.10129381541015797], ["list", 0.10024191936506816], ["Dict[str, Union[bool, str]]", 0.09165564038965103], ["List[int]", 0.08837134353905002]], "position": [["int", 0.4200246432996476], ["Dict[str, int]", 0.20238559733061023], ["str", 0.10588174088324318], ["list", 0.09295054410084819]], "short_option": [["int", 0.40408921980961227], ["Tuple[int, int]", 0.15552976461393747], ["List[int]", 0.10322452775165294], ["Pattern[str]", 0.09681218496740938], ["Type[List[Any]]", 0.08469311059358194], ["list", 0.07933094788145827]], "subcommand": [["Dict[str, bool]", 0.4508129290484448], ["DefaultDict[Any, List[Any]]", 0.21202460134714118], ["int", 0.14482591789807353], ["dict", 0.10310227102012405], ["str", 0.08923428068621654]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[128, 4], [137, 29]], "fn_var_ln": {"arg": [[129, 8], [129, 11]], "args": [[136, 8], [136, 12]], "parser": [[130, 8], [130, 14]]}, "fn_var_occur": {"arg": [["arg", "cli_parser", "Arg", "default", "type", "int"], ["arg", "add_to_parser", "parser"]], "args": [["args", "parser", "parse_args"], ["args", "test"], ["args", "parser", "parse_args"], ["args", "test"]], "parser": [["parser", "argparse", "ArgumentParser"], ["arg", "add_to_parser", "parser"], ["args", "parser", "parse_args"], ["args", "parser", "parse_args"]]}, "name": "test_falsy_default_value", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestCli.test_falsy_default_value", "ret_exprs": [], "ret_type": "", "variables": {"arg": "", "args": "", "parser": ""}, "variables_p": {"arg": [["List[str]", 0.4406854574077501], ["argparse._MutuallyExclusiveGroup", 0.19948587911289595], ["str", 0.0944922157879081], ["argparse._ArgumentGroup", 0.09318467798878977], ["flask.cli.AppGroup", 0.08784745909654983], ["Tuple[str, str, str]", 0.08430431060610627]], "args": [["argparse.Namespace", 1.0000000000000002]], "parser": [["argparse.ArgumentParser", 1.0]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[139, 4], [147, 33]], "fn_var_ln": {"parser": [[140, 8], [140, 14]], "stdout": [[145, 12], [145, 18]]}, "fn_var_occur": {"parser": [["parser", "cli_parser", "get_parser"], ["parser", "parse_args"]], "stdout": [["contextlib", "redirect_stdout", "io", "StringIO", "stdout"], ["stdout", "stdout", "getvalue"]]}, "name": "test_commands_and_command_group_sections", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestCli.test_commands_and_command_group_sections", "ret_exprs": [], "ret_type": "", "variables": {"parser": "", "stdout": ""}, "variables_p": {"parser": [["argparse.ArgumentParser", 0.6572456230249213]], "stdout": [["List[str]", 0.37435567784175405], ["str", 0.34174469474262553], ["Dict[str, Type[Any]]", 0.10719749799931165]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[149, 4], [157, 33]], "fn_var_ln": {"parser": [[150, 8], [150, 14]], "stdout": [[155, 12], [155, 18]]}, "fn_var_occur": {"parser": [["parser", "cli_parser", "get_parser", "dag_parser", "True"], ["parser", "parse_args"]], "stdout": [["contextlib", "redirect_stdout", "io", "StringIO", "stdout"], ["stdout", "stdout", "getvalue"]]}, "name": "test_dag_parser_commands_and_comamnd_group_sections", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestCli.test_dag_parser_commands_and_comamnd_group_sections", "ret_exprs": [], "ret_type": "", "variables": {"parser": "", "stdout": ""}, "variables_p": {"parser": [["argparse.ArgumentParser", 0.9999999999999999]], "stdout": [["List[str]", 0.37435567784175405], ["str", 0.34174469474262553], ["Dict[str, Type[Any]]", 0.10719749799931165]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[159, 4], [173, 56]], "fn_var_ln": {"all_command_as_args": [[162, 8], [162, 27]], "parser": [[160, 8], [160, 14]]}, "fn_var_occur": {"all_command_as_args": [["all_command_as_args", "command_as_args", "top_command", "cli_parser", "airflow_commands", "command_as_args", "top_command", "name", "isinstance", "top_command", "cli_parser", "ActionCommand", "top_command", "name", "nested_command", "name", "nested_command", "top_command", "subcommands"]], "parser": [["parser", "cli_parser", "get_parser"], ["parser", "parse_args", "cmd_args"]]}, "name": "test_should_display_help", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestCli.test_should_display_help", "ret_exprs": [], "ret_type": "", "variables": {"all_command_as_args": "", "parser": ""}, "variables_p": {"all_command_as_args": [["Dict[str, str]", 0.4494493431379181], ["str", 0.19689749116459393], ["Set[str]", 0.09076545533646743], ["dict", 0.08979445177504221]], "parser": [["argparse.ArgumentParser", 0.9999999999999999]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[175, 4], [189, 56]], "fn_var_ln": {"all_command_as_args": [[178, 8], [178, 27]], "parser": [[176, 8], [176, 14]]}, "fn_var_occur": {"all_command_as_args": [["all_command_as_args", "command_as_args", "top_command", "cli_config", "dag_cli_commands", "command_as_args", "top_command", "name", "isinstance", "top_command", "cli_parser", "ActionCommand", "top_command", "name", "nested_command", "name", "nested_command", "top_command", "subcommands"]], "parser": [["parser", "cli_parser", "get_parser", "dag_parser", "True"], ["parser", "parse_args", "cmd_args"]]}, "name": "test_dag_cli_should_display_help", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestCli.test_dag_cli_should_display_help", "ret_exprs": [], "ret_type": "", "variables": {"all_command_as_args": "", "parser": ""}, "variables_p": {"all_command_as_args": [["Dict[str, Any]", 0.2863362506883047], ["Dict[str, str]", 0.25099890923481794], ["dict", 0.09020530651547239], ["List[str]", 0.08770323581598463]], "parser": [["argparse.ArgumentParser", 0.9999999999999998]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[191, 4], [197, 58]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_positive_int", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestCli.test_positive_int", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[199, 4], [211, 19]], "fn_var_ln": {"parser": [[203, 12], [203, 18]], "stderr": [[206, 12], [206, 18]]}, "fn_var_occur": {"parser": [["parser", "cli_parser", "get_parser"], ["parser", "parse_args"]], "stderr": [["stderr", "stderr", "getvalue"]]}, "name": "test_dag_parser_celery_command_require_celery_executor", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestCli.test_dag_parser_celery_command_require_celery_executor", "ret_exprs": [], "ret_type": "", "variables": {"parser": "", "stderr": ""}, "variables_p": {"parser": [["argparse.ArgumentParser", 0.6572456230249213]], "stderr": [["TextIO", 0.19999999999546336], ["Tuple[str, str]", 0.19999999999546336], ["dict", 5.613385683956837e-12], ["str", 3.66875026611313e-12]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[222, 4], [230, 19]], "fn_var_ln": {"parser": [[224, 12], [224, 18]], "stderr": [[227, 12], [227, 18]]}, "fn_var_occur": {"parser": [["parser", "cli_parser", "get_parser"], ["parser", "parse_args"]], "stderr": [["stderr", "stderr", "getvalue"]]}, "name": "test_dag_parser_celery_command_accept_celery_executor", "params": {"executor": "", "self": ""}, "params_descr": {"executor": "", "self": ""}, "params_occur": {"executor": [["conf_vars", "executor"]], "self": []}, "params_p": {"args": [], "executor": [["tests.basilisp.helpers.CompileFn", 0.6091588456372814], ["str", 0.2286950698429388]], "kwargs": [], "self": []}, "q_name": "TestCli.test_dag_parser_celery_command_accept_celery_executor", "ret_exprs": [], "ret_type": "", "variables": {"parser": "", "stderr": ""}, "variables_p": {"parser": [["argparse.ArgumentParser", 0.6572456230249213]], "stderr": [["TextIO", 0.19999999999546336], ["Tuple[str, str]", 0.19999999999546336], ["dict", 5.613385683956837e-12], ["str", 3.66875026611313e-12]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[232, 4], [238, 33]], "fn_var_ln": {"parser": [[236, 12], [236, 18]]}, "fn_var_occur": {"parser": [["parser", "cli_parser", "get_parser"], ["parser", "parse_args"]]}, "name": "test_dag_parser_config_command_dont_required_celery_executor", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestCli.test_dag_parser_config_command_dont_required_celery_executor", "ret_exprs": [], "ret_type": "", "variables": {"parser": ""}, "variables_p": {"parser": [["argparse.ArgumentParser", 0.6572456230249213]]}}, {"docstring": {"func": "Test that the error message is correct when the directory does not exist.", "long_descr": null, "ret": null}, "fn_lc": [[240, 4], [251, 9]], "fn_var_ln": {"error_msg": [[246, 12], [246, 21]], "parser": [[244, 16], [244, 22]]}, "fn_var_occur": {"error_msg": [["error_msg", "stderr", "getvalue"]], "parser": [["parser", "cli_parser", "get_parser"], ["parser", "parse_args"]]}, "name": "test_non_existing_directory_raises_when_metavar_is_dir_for_db_export_cleaned", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestCli.test_non_existing_directory_raises_when_metavar_is_dir_for_db_export_cleaned", "ret_exprs": [], "ret_type": "", "variables": {"error_msg": "", "parser": ""}, "variables_p": {"error_msg": [["str", 0.3937483509568072], ["Optional[str]", 0.11277734736946225], ["list", 0.108741619524576], ["Exception", 0.108741619524576], ["Callable[[bytes], bytes]", 0.09897515681385707], ["Callable(open)[..., Any][[[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal], default), Named(buffering, int, default), Named(encoding, Optional[str], default), Named(errors, Optional[str], default), Named(newline, Optional[str], default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.TextIOWrapper][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, Literal), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.FileIO][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, Union[Literal[-1], Literal], default), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.BufferedRandom][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, Union[Literal[-1], Literal], default), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.BufferedWriter][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, Union[Literal[-1], Literal], default), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.BufferedReader][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, int), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], BinaryIO][Any, Any]]", 0.09584447990968875], ["int", 0.0811714259010327]], "parser": [["argparse.ArgumentParser", 0.6572456230249213]]}}, {"docstring": {"func": "Test that invalid choice raises for export-format in db export-cleaned command.", "long_descr": null, "ret": null}, "fn_lc": [[255, 4], [270, 9]], "fn_var_ln": {"error_msg": [[265, 12], [265, 21]], "parser": [[261, 16], [261, 22]]}, "fn_var_occur": {"error_msg": [["error_msg", "stderr", "getvalue"], ["error_msg", "export_format"]], "parser": [["parser", "cli_parser", "get_parser"], ["parser", "parse_args", "export_format"]]}, "name": "test_invalid_choice_raises_for_export_format_in_db_export_archived_command", "params": {"export_format": "", "mock_isdir": "", "self": ""}, "params_descr": {"export_format": "", "mock_isdir": "", "self": ""}, "params_occur": {"export_format": [["parser", "parse_args", "export_format"], ["error_msg", "export_format"]], "mock_isdir": [], "self": []}, "params_p": {"args": [], "export_format": [["bool", 0.21132247038820556], ["neuromation.cli.rooRoot", 0.20278111778768418], ["str", 0.0987468071955983], ["list", 0.0948326434203794]], "kwargs": [], "mock_isdir": [["List[T]", 0.06935043936480165], ["tests.test_util.aiohttp.AiohttpClientMocker", 0.06895538014152035], ["mock.MagicMock", 0.06792060365524018], ["str", 0.06790606090260488], ["contextlib.contextmanager", 0.06482140433733231], ["mock.Mock", 0.06412536627513776]], "self": []}, "q_name": "TestCli.test_invalid_choice_raises_for_export_format_in_db_export_archived_command", "ret_exprs": [], "ret_type": "", "variables": {"error_msg": "", "parser": ""}, "variables_p": {"error_msg": [["str", 0.4240844250631387], ["Union[Literal, Literal]", 0.11389440378443177], ["Optional[str]", 0.09075429788452181], ["int", 0.08486622217804846], ["Tuple[str, str, str]", 0.08274316883751348]], "parser": [["argparse.ArgumentParser", 0.30894047197247704]]}}], "name": "TestCli", "q_name": "TestCli", "variables": {}, "variables_p": {}}], "funcs": [], "imports": ["__future__", "annotations", "argparse", "contextlib", "io", "re", "collections", "Counter", "unittest", "mock", "patch", "pytest", "airflow", "cli", "cli_config", "cli_parser", "tests", "test_utils", "config", "conf_vars"], "mod_var_ln": {"ILLEGAL_LONG_OPTION_PATTERN": [[34, 0], [34, 27]], "LEGAL_SHORT_OPTION_PATTERN": [[36, 0], [36, 26]], "cli_args": [[38, 0], [38, 8]]}, "mod_var_occur": {"ILLEGAL_LONG_OPTION_PATTERN": [["ILLEGAL_LONG_OPTION_PATTERN", "match", "arg", "flags", "None", "arg", "flags"], ["ILLEGAL_LONG_OPTION_PATTERN", "match", "arg", "flags", "None", "arg", "flags"]], "LEGAL_SHORT_OPTION_PATTERN": [["LEGAL_SHORT_OPTION_PATTERN", "match", "arg", "flags", "None", "arg", "flags"]], "cli_args": [["optional_long", "arg", "arg", "cli_args", "values", "len", "arg", "flags", "arg", "flags", "startswith"], ["optional_mix", "arg", "arg", "cli_args", "values", "len", "arg", "flags", "arg", "flags", "startswith"]]}, "no_types_annot": {"D": 0, "I": 0, "U": 55}, "session_id": "mBDOXz0vS5TWXJ1-4JyOSdfAtOBZnodhzNOU3xJKaCA", "set": null, "tc": [false, null], "type_annot_cove": 0.0, "typed_seq": "", "untyped_seq": "", "variables": {"ILLEGAL_LONG_OPTION_PATTERN": "", "LEGAL_SHORT_OPTION_PATTERN": "", "cli_args": ""}, "variables_p": {"ILLEGAL_LONG_OPTION_PATTERN": [["Type[bytes]", 0.3138057043918171], ["Type[int]", 0.20672983749307974], ["set", 0.13658652674139954], ["dict", 0.09078667214918024], ["Set[str]", 0.08408144335228575], ["Pattern[str]", 0.08081153972820951]], "LEGAL_SHORT_OPTION_PATTERN": [["Pattern[str]", 0.5061624660551066], ["Dict[str, Union[Any, str]]", 0.13973149089941767], ["Dict[Any, Type[str]]", 0.10347554757125613], ["Dict[str, str]", 0.09241864456696666], ["str", 0.0803349906461882], ["List[bool]", 0.07787686026106486]], "cli_args": [["list", 0.618914373088842], ["List[Tuple[Any, Any]]", 0.1061965557808921], ["List[str]", 0.0929092724613614], ["List[int]", 0.09010887134313354]]}}}