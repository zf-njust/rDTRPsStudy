{"error": null, "response": {"classes": [{"cls_lc": [[34, 0], [61, 59]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": "Test to verify the exit mechanism of airflow-worker cli", "long_descr": "by mocking validate_session method", "ret": null}, "fn_lc": [[36, 4], [44, 87]], "fn_var_ln": {"return_value": [[41, 8], [41, 42]]}, "fn_var_occur": {"return_value": [["mock_validate_session", "return_value", "False"]]}, "name": "test_error", "params": {"mock_validate_session": "", "self": ""}, "params_descr": {"mock_validate_session": "", "self": ""}, "params_occur": {"mock_validate_session": [["mock_validate_session", "return_value", "False"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_validate_session": [], "self": []}, "q_name": "TestWorkerPrecheck.test_error", "ret_exprs": [], "ret_type": "", "variables": {"return_value": ""}, "variables_p": {"return_value": [["str", 0.27756462947660077], ["List[Dict[str, Any]]", 0.10964501164520683], ["list", 0.09484716369459655], ["Optional[bytes]", 0.08393615049284692], ["int", 0.0800199028726177]]}}, {"docstring": {"func": "Test to check the behaviour of validate_session method", "long_descr": "when worker_precheck is absent in airflow configuration", "ret": null}, "fn_lc": [[47, 4], [52, 50]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_worker_precheck_exception", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestWorkerPrecheck.test_worker_precheck_exception", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Test to validate connection failure scenario on SELECT 1 query", "long_descr": null, "ret": null}, "fn_lc": [[56, 4], [61, 59]], "fn_var_ln": {"side_effect": [[60, 8], [60, 32]]}, "fn_var_occur": {"side_effect": [["mock_session", "side_effect", "sqlalchemy", "exc", "OperationalError"]]}, "name": "test_validate_session_dbapi_exception", "params": {"mock_session": "", "self": ""}, "params_descr": {"mock_session": "", "self": ""}, "params_occur": {"mock_session": [["mock_session", "side_effect", "sqlalchemy", "exc", "OperationalError"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_session": [["tests.test_util.aiohttp.AiohttpClientMocker", 0.10158689981915381]], "self": []}, "q_name": "TestWorkerPrecheck.test_validate_session_dbapi_exception", "ret_exprs": [], "ret_type": "", "variables": {"side_effect": ""}, "variables_p": {"side_effect": [["str", 0.23712751423995698], ["list", 0.08394162264519074]]}}], "name": "TestWorkerPrecheck", "q_name": "TestWorkerPrecheck", "variables": {}, "variables_p": {}}, {"cls_lc": [[65, 0], [143, 70]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[67, 4], [68, 44]], "fn_var_ln": {"parser": [[68, 8], [68, 18]]}, "fn_var_occur": {"parser": [["cls", "parser", "cli_parser", "get_parser"]]}, "name": "setup_class", "params": {"cls": ""}, "params_descr": {"cls": ""}, "params_occur": {"cls": [["cls", "parser", "cli_parser", "get_parser"]]}, "params_p": {"args": [], "cls": [["Callable", 0.2043654510322698], ["List[str]", 0.15935622434553923], ["dict", 0.08429449144280911]], "kwargs": [], "self": []}, "q_name": "TestCeleryStopCommand.setup_class", "ret_exprs": [], "ret_type": "", "variables": {"parser": ""}, "variables_p": {"parser": [["argparse.ArgumentParser", 0.21070795635731943], ["shared.configuration.configuration_parser.Parser", 0.11823783625099267]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[73, 4], [88, 77]], "fn_var_ln": {"args": [[74, 8], [74, 12]], "pid": [[75, 8], [75, 11]], "return_value": [[84, 16], [84, 49]]}, "fn_var_occur": {"args": [["args", "self", "parser", "parse_args"], ["celery_command", "stop_worker", "args"]], "pid": [["f", "write", "pid"], ["mock_process", "assert_called_once_with", "int", "pid"]], "return_value": [["mock_setup_locations", "return_value", "f", "name", "None", "None", "None"], ["mock_process", "return_value", "terminate", "assert_called_once_with"]]}, "name": "test_if_right_pid_is_read", "params": {"mock_process": "", "mock_setup_locations": "", "self": ""}, "params_descr": {"mock_process": "", "mock_setup_locations": "", "self": ""}, "params_occur": {"mock_process": [["mock_process", "assert_called_once_with", "int", "pid"], ["mock_process", "return_value", "terminate", "assert_called_once_with"]], "mock_setup_locations": [["mock_setup_locations", "return_value", "f", "name", "None", "None", "None"]], "self": [["args", "self", "parser", "parse_args"]]}, "params_p": {"args": [], "kwargs": [], "mock_process": [["mock.MagicMock", 0.17316450251768511]], "mock_setup_locations": [], "self": []}, "q_name": "TestCeleryStopCommand.test_if_right_pid_is_read", "ret_exprs": [], "ret_type": "", "variables": {"args": "", "pid": "", "return_value": ""}, "variables_p": {"args": [["argparse.Namespace", 0.730525001071576], ["tuple", 0.1681481642069882], ["List[str]", 0.10132683472143578]], "pid": [["str", 0.7737714308492329], ["Union[Literal, Literal]", 0.22622856915076686]], "return_value": [["Dict[str, Dict[str, Any]]", 0.28345623416520443], ["list", 0.16625502102267956], ["dict", 0.10352951253850624], ["Dict[str, None]", 0.0981129977716072], ["int", 0.09301784303445974], ["Dict[str, List[Any]]", 0.09144735306600231], ["mock._Call", 0.07979260092798107]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[94, 4], [112, 68]], "fn_var_ln": {"_": [[105, 14], [105, 15]], "args": [[105, 8], [105, 12]], "args_str": [[106, 8], [106, 16]], "pid_file": [[97, 8], [97, 16]], "return_value": [[99, 8], [99, 47]], "stop_args": [[110, 8], [110, 17]], "worker_args": [[102, 8], [102, 19]]}, "fn_var_occur": {"_": [["args", "_", "mock_celery_app", "worker_main", "call_args"]], "args": [["args", "_", "mock_celery_app", "worker_main", "call_args"], ["args_str", "join", "map", "str", "args"]], "args_str": [["args_str", "join", "map", "str", "args"], ["pid_file", "args_str"]], "pid_file": [["mock_setup_locations", "return_value", "pid_file", "None", "None", "None"], ["pid_file", "args_str"], ["mock_read_pid_from_pidfile", "assert_called_once_with", "pid_file"]], "return_value": [["mock_setup_locations", "return_value", "pid_file", "None", "None", "None"], ["mock_read_pid_from_pidfile", "return_value", "None"]], "stop_args": [["stop_args", "self", "parser", "parse_args"], ["celery_command", "stop_worker", "stop_args"]], "worker_args": [["worker_args", "self", "parser", "parse_args"], ["celery_command", "worker", "worker_args"]]}, "name": "test_same_pid_file_is_used_in_start_and_stop", "params": {"mock_celery_app": "", "mock_read_pid_from_pidfile": "", "mock_setup_locations": "", "self": ""}, "params_descr": {"mock_celery_app": "", "mock_read_pid_from_pidfile": "", "mock_setup_locations": "", "self": ""}, "params_occur": {"mock_celery_app": [["mock_celery_app", "worker_main", "call_args"], ["args", "_", "mock_celery_app", "worker_main", "call_args"]], "mock_read_pid_from_pidfile": [["mock_read_pid_from_pidfile", "return_value", "None"], ["mock_read_pid_from_pidfile", "assert_called_once_with", "pid_file"]], "mock_setup_locations": [["mock_setup_locations", "return_value", "pid_file", "None", "None", "None"]], "self": [["worker_args", "self", "parser", "parse_args"], ["stop_args", "self", "parser", "parse_args"]]}, "params_p": {"args": [], "kwargs": [], "mock_celery_app": [["mock.Mock", 0.5505998236746386]], "mock_read_pid_from_pidfile": [], "mock_setup_locations": [["bool", 0.09582765820017815], ["int", 0.09582765820017815]], "self": []}, "q_name": "TestCeleryStopCommand.test_same_pid_file_is_used_in_start_and_stop", "ret_exprs": [], "ret_type": "", "variables": {"_": "", "args": "", "args_str": "", "pid_file": "", "return_value": "", "stop_args": "", "worker_args": ""}, "variables_p": {"_": [["int", 0.781926227968754], ["str", 0.13057923658240364], ["set", 0.0874945354488424]], "args": [["list", 0.15827633222359794], ["Dict[str, str]", 0.144795297130018], ["Dict[str, int]", 0.11324491690131913], ["List[str]", 0.1007350191514767], ["bool", 0.08847770996058506]], "args_str": [["list", 0.42766057265506424], ["List[bytes]", 0.18825841240691224], ["Optional[tuple]", 0.10872841958086243], ["int", 0.09906642020465352], ["dict", 0.08956859325360735], ["List[str]", 0.08671758189890023]], "pid_file": [["Optional[str]", 0.12395984122470625], ["str", 0.0872064537906356]], "return_value": [["str", 0.20150225285996543], ["dict", 0.19654133142580027], ["Set[str]", 0.1018033497284779], ["Optional[str]", 0.09721986074205179]], "stop_args": [["List[str]", 0.4094680743973271], ["argparse.Namespace", 0.21201762596307738], ["list", 0.10243838216653538], ["Dict[str, Union[Any, Any]]", 0.09800763806197625], ["str", 0.0908141342579651]], "worker_args": [["List[str]", 0.5054392503249072], ["argparse.Namespace", 0.20709649789124837], ["list", 0.0991492013991736], ["Dict[str, Union[Any, Any]]", 0.09729023031825008], ["str", 0.09102482006642076]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[120, 4], [143, 70]], "fn_var_ln": {"_": [[134, 14], [134, 15]], "args": [[134, 8], [134, 12]], "args_str": [[135, 8], [135, 16]], "pid_file": [[128, 8], [128, 16]], "return_value": [[129, 8], [129, 41]], "stop_args": [[138, 8], [138, 17]], "worker_args": [[131, 8], [131, 19]]}, "fn_var_occur": {"_": [["args", "_", "mock_celery_app", "worker_main", "call_args"]], "args": [["args", "_", "mock_celery_app", "worker_main", "call_args"], ["args_str", "join", "map", "str", "args"]], "args_str": [["args_str", "join", "map", "str", "args"], ["pid_file", "args_str"]], "pid_file": [["mock_setup_locations", "return_value", "pid_file", "None", "None", "None"], ["worker_args", "self", "parser", "parse_args", "pid_file"], ["pid_file", "args_str"], ["stop_args", "self", "parser", "parse_args", "pid_file"], ["mock_read_pid_from_pidfile", "assert_called_once_with", "pid_file"], ["mock_remove_existing_pidfile", "assert_called_once_with", "pid_file"]], "return_value": [["mock_setup_locations", "return_value", "pid_file", "None", "None", "None"], ["mock_process", "return_value", "terminate", "assert_called"]], "stop_args": [["stop_args", "self", "parser", "parse_args", "pid_file"], ["celery_command", "stop_worker", "stop_args"]], "worker_args": [["worker_args", "self", "parser", "parse_args", "pid_file"], ["celery_command", "worker", "worker_args"]]}, "name": "test_custom_pid_file_is_used_in_start_and_stop", "params": {"mock_celery_app": "", "mock_process": "", "mock_read_pid_from_pidfile": "", "mock_remove_existing_pidfile": "", "mock_setup_locations": "", "self": ""}, "params_descr": {"mock_celery_app": "", "mock_process": "", "mock_read_pid_from_pidfile": "", "mock_remove_existing_pidfile": "", "mock_setup_locations": "", "self": ""}, "params_occur": {"mock_celery_app": [["mock_celery_app", "worker_main", "call_args"], ["args", "_", "mock_celery_app", "worker_main", "call_args"]], "mock_process": [["mock_process", "return_value", "terminate", "assert_called"]], "mock_read_pid_from_pidfile": [["mock_read_pid_from_pidfile", "assert_called_once_with", "pid_file"]], "mock_remove_existing_pidfile": [["mock_remove_existing_pidfile", "assert_called_once_with", "pid_file"]], "mock_setup_locations": [["mock_setup_locations", "return_value", "pid_file", "None", "None", "None"]], "self": [["worker_args", "self", "parser", "parse_args", "pid_file"], ["stop_args", "self", "parser", "parse_args", "pid_file"]]}, "params_p": {"args": [], "kwargs": [], "mock_celery_app": [["mock.Mock", 0.6549620825887996]], "mock_process": [["mock.Mock", 0.19450251873053226], ["mock.MagicMock", 0.08694416962275496]], "mock_read_pid_from_pidfile": [["mock.Mock", 0.22892704986831253]], "mock_remove_existing_pidfile": [["mock.Mock", 0.22892704986831253]], "mock_setup_locations": [["tests.e2e.Helper", 0.18060383241780167], ["bool", 0.10024565719323661], ["int", 0.10024565719323661]], "self": []}, "q_name": "TestCeleryStopCommand.test_custom_pid_file_is_used_in_start_and_stop", "ret_exprs": [], "ret_type": "", "variables": {"_": "", "args": "", "args_str": "", "pid_file": "", "return_value": "", "stop_args": "", "worker_args": ""}, "variables_p": {"_": [["int", 0.781926227968754], ["str", 0.13057923658240364], ["set", 0.0874945354488424]], "args": [["list", 0.15827633222359794], ["Dict[str, str]", 0.144795297130018], ["Dict[str, int]", 0.11324491690131913], ["List[str]", 0.1007350191514767], ["bool", 0.08847770996058506]], "args_str": [["list", 0.42766057265506424], ["List[bytes]", 0.18825841240691224], ["Optional[tuple]", 0.10872841958086243], ["int", 0.09906642020465352], ["dict", 0.08956859325360735], ["List[str]", 0.08671758189890023]], "pid_file": [["Optional[str]", 0.10703439781244752], ["str", 0.10322106914597406]], "return_value": [["dict", 0.17704244685006212], ["Optional[dict]", 0.11615681275379736], ["Optional[object]", 0.09906201387808461], ["Set[str]", 0.09008411383872818], ["Type[str]", 0.08882894005155947]], "stop_args": [["list", 0.2809809145155655], ["argparse.Namespace", 0.11936782787208286], ["Dict[str, str]", 0.10621022761466696], ["str", 0.09589949955603329]], "worker_args": [["list", 0.2806121194086203], ["argparse.Namespace", 0.12299655371407445], ["Dict[str, str]", 0.10937519704415594], ["str", 0.09828238037760147]]}}], "name": "TestCeleryStopCommand", "q_name": "TestCeleryStopCommand", "variables": {}, "variables_p": {}}, {"cls_lc": [[147, 0], [204, 9]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[149, 4], [150, 44]], "fn_var_ln": {"parser": [[150, 8], [150, 18]]}, "fn_var_occur": {"parser": [["cls", "parser", "cli_parser", "get_parser"]]}, "name": "setup_class", "params": {"cls": ""}, "params_descr": {"cls": ""}, "params_occur": {"cls": [["cls", "parser", "cli_parser", "get_parser"]]}, "params_p": {"args": [], "cls": [["Callable", 0.2043654510322698], ["List[str]", 0.15935622434553923], ["dict", 0.08429449144280911]], "kwargs": [], "self": []}, "q_name": "TestWorkerStart.setup_class", "ret_exprs": [], "ret_type": "", "variables": {"parser": ""}, "variables_p": {"parser": [["argparse.ArgumentParser", 0.21070795635731943], ["shared.configuration.configuration_parser.Parser", 0.11823783625099267]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[156, 4], [204, 9]], "fn_var_ln": {"args": [[163, 8], [163, 12]], "autoscale": [[162, 8], [162, 17]], "celery_hostname": [[160, 8], [160, 23]], "concurrency": [[159, 8], [159, 19]], "pid_file": [[157, 8], [157, 16]], "queues": [[161, 8], [161, 14]], "return_value": [[158, 8], [158, 35]]}, "fn_var_occur": {"args": [["args", "self", "parser", "parse_args", "autoscale", "concurrency", "celery_hostname", "queues"], ["celery_command", "worker", "args"]], "autoscale": [["args", "self", "parser", "parse_args", "autoscale", "concurrency", "celery_hostname", "queues"], ["mock_celery_app", "worker_main", "assert_called_once_with", "queues", "int", "concurrency", "celery_hostname", "conf", "get", "pid_file", "autoscale"]], "celery_hostname": [["args", "self", "parser", "parse_args", "autoscale", "concurrency", "celery_hostname", "queues"], ["mock_celery_app", "worker_main", "assert_called_once_with", "queues", "int", "concurrency", "celery_hostname", "conf", "get", "pid_file", "autoscale"]], "concurrency": [["args", "self", "parser", "parse_args", "autoscale", "concurrency", "celery_hostname", "queues"], ["mock_celery_app", "worker_main", "assert_called_once_with", "queues", "int", "concurrency", "celery_hostname", "conf", "get", "pid_file", "autoscale"]], "pid_file": [["mock_locations", "return_value", "pid_file", "None", "None", "None"], ["mock_celery_app", "worker_main", "assert_called_once_with", "queues", "int", "concurrency", "celery_hostname", "conf", "get", "pid_file", "autoscale"]], "queues": [["args", "self", "parser", "parse_args", "autoscale", "concurrency", "celery_hostname", "queues"], ["mock_celery_app", "worker_main", "assert_called_once_with", "queues", "int", "concurrency", "celery_hostname", "conf", "get", "pid_file", "autoscale"]], "return_value": [["mock_locations", "return_value", "pid_file", "None", "None", "None"]]}, "name": "test_worker_started_with_required_arguments", "params": {"mock_celery_app": "", "mock_locations": "", "mock_popen": "", "self": ""}, "params_descr": {"mock_celery_app": "", "mock_locations": "", "mock_popen": "", "self": ""}, "params_occur": {"mock_celery_app": [["mock_celery_app", "worker_main", "assert_called_once_with", "queues", "int", "concurrency", "celery_hostname", "conf", "get", "pid_file", "autoscale"]], "mock_locations": [["mock_locations", "return_value", "pid_file", "None", "None", "None"]], "mock_popen": [], "self": [["args", "self", "parser", "parse_args", "autoscale", "concurrency", "celery_hostname", "queues"]]}, "params_p": {"args": [], "kwargs": [], "mock_celery_app": [], "mock_locations": [["bool", 0.09951033020222251], ["int", 0.09951033020222251]], "mock_popen": [["mock.Mock", 0.17880310552660647]], "self": []}, "q_name": "TestWorkerStart.test_worker_started_with_required_arguments", "ret_exprs": [], "ret_type": "", "variables": {"args": "", "autoscale": "", "celery_hostname": "", "concurrency": "", "pid_file": "", "queues": "", "return_value": ""}, "variables_p": {"args": [["argparse.Namespace", 0.7374063364355367], ["List[str]", 0.1783569501686001], ["Dict[str, Any]", 0.08423671339586317]], "autoscale": [["tuple", 0.2813976959890754], ["List[str]", 0.20896639434690772], ["list", 0.1877149768874446], ["Dict[str, Optional[Any]]", 0.1135138134185777], ["int", 0.0938574884437223]], "celery_hostname": [["tuple", 0.2813976959890754], ["List[str]", 0.20896639434690772], ["list", 0.1877149768874446], ["Dict[str, Optional[Any]]", 0.1135138134185777], ["int", 0.0938574884437223]], "concurrency": [["tuple", 0.2813976959890754], ["List[str]", 0.20896639434690772], ["list", 0.1877149768874446], ["Dict[str, Optional[Any]]", 0.1135138134185777], ["int", 0.0938574884437223]], "pid_file": [["str", 0.5684678395156519], ["Optional[str]", 0.18963283059103708], ["Type[str]", 0.15191427307422437]], "queues": [["tuple", 0.2813976959890754], ["List[str]", 0.20896639434690772], ["list", 0.1877149768874446], ["Dict[str, Optional[Any]]", 0.1135138134185777], ["int", 0.0938574884437223]], "return_value": [["str", 0.5485594010062234], ["Optional[str]", 0.1870073275833618], ["ImportError", 0.13634087804623538]]}}], "name": "TestWorkerStart", "q_name": "TestWorkerStart", "variables": {}, "variables_p": {}}, {"cls_lc": [[208, 0], [222, 50]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[210, 4], [211, 44]], "fn_var_ln": {"parser": [[211, 8], [211, 18]]}, "fn_var_occur": {"parser": [["cls", "parser", "cli_parser", "get_parser"]]}, "name": "setup_class", "params": {"cls": ""}, "params_descr": {"cls": ""}, "params_occur": {"cls": [["cls", "parser", "cli_parser", "get_parser"]]}, "params_p": {"args": [], "cls": [["Callable", 0.2043654510322698], ["List[str]", 0.15935622434553923], ["dict", 0.08429449144280911]], "kwargs": [], "self": []}, "q_name": "TestWorkerFailure.setup_class", "ret_exprs": [], "ret_type": "", "variables": {"parser": ""}, "variables_p": {"parser": [["argparse.ArgumentParser", 0.21070795635731943], ["shared.configuration.configuration_parser.Parser", 0.11823783625099267]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[216, 4], [222, 50]], "fn_var_ln": {"args": [[217, 8], [217, 12]]}, "fn_var_occur": {"args": [["args", "self", "parser", "parse_args"], ["celery_command", "worker", "args"]]}, "name": "test_worker_failure_gracefull_shutdown", "params": {"mock_celery_app": "", "mock_popen": "", "self": ""}, "params_descr": {"mock_celery_app": "", "mock_popen": "", "self": ""}, "params_occur": {"mock_celery_app": [["mock_celery_app", "run", "side_effect", "Exception"]], "mock_popen": [["mock_popen", "terminate", "assert_called"]], "self": [["args", "self", "parser", "parse_args"]]}, "params_p": {"args": [], "kwargs": [], "mock_celery_app": [["mock.MagicMock", 0.1046063619589735]], "mock_popen": [["mock.Mock", 0.08728486924475173]], "self": []}, "q_name": "TestWorkerFailure.test_worker_failure_gracefull_shutdown", "ret_exprs": [], "ret_type": "", "variables": {"args": ""}, "variables_p": {"args": [["argparse.Namespace", 0.7178054964021685], ["int", 0.18711608449417655], ["List[str]", 0.09507841910365493]]}}], "name": "TestWorkerFailure", "q_name": "TestWorkerFailure", "variables": {}, "variables_p": {}}, {"cls_lc": [[226, 0], [352, 9]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[228, 4], [229, 44]], "fn_var_ln": {"parser": [[229, 8], [229, 18]]}, "fn_var_occur": {"parser": [["cls", "parser", "cli_parser", "get_parser"]]}, "name": "setup_class", "params": {"cls": ""}, "params_descr": {"cls": ""}, "params_occur": {"cls": [["cls", "parser", "cli_parser", "get_parser"]]}, "params_p": {"args": [], "cls": [["Callable", 0.2043654510322698], ["List[str]", 0.15935622434553923], ["dict", 0.08429449144280911]], "kwargs": [], "self": []}, "q_name": "TestFlowerCommand.setup_class", "ret_exprs": [], "ret_type": "", "variables": {"parser": ""}, "variables_p": {"parser": [["argparse.ArgumentParser", 0.21070795635731943], ["shared.configuration.configuration_parser.Parser", 0.11823783625099267]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[233, 4], [265, 9]], "fn_var_ln": {"args": [[234, 8], [234, 12]]}, "fn_var_occur": {"args": [["args", "self", "parser", "parse_args"], ["celery_command", "flower", "args"]]}, "name": "test_run_command", "params": {"mock_celery_app": "", "self": ""}, "params_descr": {"mock_celery_app": "", "self": ""}, "params_occur": {"mock_celery_app": [["mock_celery_app", "start", "assert_called_once_with"]], "self": [["args", "self", "parser", "parse_args"]]}, "params_p": {"args": [], "kwargs": [], "mock_celery_app": [["mock.Mock", 0.17509061801204368]], "self": []}, "q_name": "TestFlowerCommand.test_run_command", "ret_exprs": [], "ret_type": "", "variables": {"args": ""}, "variables_p": {"args": [["argparse.Namespace", 0.7178054964021685], ["int", 0.18711608449417655], ["List[str]", 0.09507841910365493]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[272, 4], [352, 9]], "fn_var_ln": {"args": [[279, 8], [279, 12]], "mock_open": [[306, 8], [306, 17]], "return_value": [[273, 8], [273, 41]]}, "fn_var_occur": {"args": [["args", "self", "parser", "parse_args"], ["celery_command", "flower", "args"]], "mock_open": [["mock_open", "mock", "mock_open"], ["mock", "patch", "mock_open"], ["mock_daemon", "mock_calls", "mock", "call", "DaemonContext", "pidfile", "mock_pid_file", "return_value", "stderr", "mock_open", "return_value", "stdout", "mock_open", "return_value", "umask", "mock", "call", "DaemonContext", "__enter__", "mock", "call", "DaemonContext", "__exit__", "None", "None", "None"], ["mock_open", "mock_calls", "mock", "call", "mock_setup_locations", "return_value", "mock", "call", "__enter__", "mock", "call", "mock_setup_locations", "return_value", "mock", "call", "__enter__", "mock", "call", "truncate", "mock", "call", "truncate", "mock", "call", "__exit__", "None", "None", "None", "mock", "call", "__exit__", "None", "None", "None"]], "return_value": [["mock_setup_locations", "return_value", "mock", "MagicMock", "name", "mock", "MagicMock", "name", "mock", "MagicMock", "name", "mock", "MagicMock", "name"], ["mock_daemon", "mock_calls", "mock", "call", "DaemonContext", "pidfile", "mock_pid_file", "return_value", "stderr", "mock_open", "return_value", "stdout", "mock_open", "return_value", "umask", "mock", "call", "DaemonContext", "__enter__", "mock", "call", "DaemonContext", "__exit__", "None", "None", "None"], ["mock_pid_file", "assert_has_calls", "mock", "call", "mock_setup_locations", "return_value"], ["mock_open", "mock_calls", "mock", "call", "mock_setup_locations", "return_value", "mock", "call", "__enter__", "mock", "call", "mock_setup_locations", "return_value", "mock", "call", "__enter__", "mock", "call", "truncate", "mock", "call", "truncate", "mock", "call", "__exit__", "None", "None", "None", "mock", "call", "__exit__", "None", "None", "None"]]}, "name": "test_run_command_daemon", "params": {"mock_celery_app": "", "mock_daemon": "", "mock_pid_file": "", "mock_setup_locations": "", "self": ""}, "params_descr": {"mock_celery_app": "", "mock_daemon": "", "mock_pid_file": "", "mock_setup_locations": "", "self": ""}, "params_occur": {"mock_celery_app": [["mock_celery_app", "start", "assert_called_once_with"]], "mock_daemon": [["mock_daemon", "mock_calls", "mock", "call", "DaemonContext", "pidfile", "mock_pid_file", "return_value", "stderr", "mock_open", "return_value", "stdout", "mock_open", "return_value", "umask", "mock", "call", "DaemonContext", "__enter__", "mock", "call", "DaemonContext", "__exit__", "None", "None", "None"]], "mock_pid_file": [["mock_daemon", "mock_calls", "mock", "call", "DaemonContext", "pidfile", "mock_pid_file", "return_value", "stderr", "mock_open", "return_value", "stdout", "mock_open", "return_value", "umask", "mock", "call", "DaemonContext", "__enter__", "mock", "call", "DaemonContext", "__exit__", "None", "None", "None"], ["mock_pid_file", "assert_has_calls", "mock", "call", "mock_setup_locations", "return_value"]], "mock_setup_locations": [["mock_setup_locations", "return_value", "mock", "MagicMock", "name", "mock", "MagicMock", "name", "mock", "MagicMock", "name", "mock", "MagicMock", "name"], ["mock_setup_locations", "mock_calls", "mock", "call", "log", "pid", "process", "stderr", "stdout"], ["mock_pid_file", "assert_has_calls", "mock", "call", "mock_setup_locations", "return_value"], ["mock_open", "mock_calls", "mock", "call", "mock_setup_locations", "return_value", "mock", "call", "__enter__", "mock", "call", "mock_setup_locations", "return_value", "mock", "call", "__enter__", "mock", "call", "truncate", "mock", "call", "truncate", "mock", "call", "__exit__", "None", "None", "None", "mock", "call", "__exit__", "None", "None", "None"]], "self": [["args", "self", "parser", "parse_args"]]}, "params_p": {"args": [], "kwargs": [], "mock_celery_app": [], "mock_daemon": [], "mock_pid_file": [], "mock_setup_locations": [], "self": []}, "q_name": "TestFlowerCommand.test_run_command_daemon", "ret_exprs": [], "ret_type": "", "variables": {"args": "", "mock_open": "", "return_value": ""}, "variables_p": {"args": [["argparse.Namespace", 0.7178054964021685], ["int", 0.18711608449417655], ["List[str]", 0.09507841910365493]], "mock_open": [["Dict[str, str]", 0.09631108279232589]], "return_value": [["MagicMock[Union[mock.AsyncMock, mock.MagicMock]]", 0.19925957662214683], ["tests.test_protocols.TransportMock", 0.10304397718718364], ["mock.Mock", 0.10214467384609878]]}}], "name": "TestFlowerCommand", "q_name": "TestFlowerCommand", "variables": {}, "variables_p": {}}], "funcs": [], "imports": ["__future__", "annotations", "argparse", "Namespace", "tempfile", "NamedTemporaryFile", "unittest", "mock", "pytest", "sqlalchemy", "airflow", "airflow", "cli", "cli_parser", "airflow", "cli", "commands", "celery_command", "airflow", "configuration", "conf", "tests", "test_utils", "config", "conf_vars"], "mod_var_ln": {}, "mod_var_occur": {}, "no_types_annot": {"D": 0, "I": 0, "U": 75}, "session_id": "kq19gQ2qRGVyj-M6RrNo3WFIy6LQhzO1YLKR8af7les", "set": null, "tc": [false, null], "type_annot_cove": 0.0, "typed_seq": "", "untyped_seq": "", "variables": {}, "variables_p": {}}}