{"error": null, "response": {"classes": [], "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[34, 0], [67, 19]], "fn_var_ln": {"dag_bag": [[41, 4], [41, 11]], "logical_date": [[49, 8], [49, 20]]}, "fn_var_occur": {"dag_bag": [["dag_bag", "DagBag", "include_examples", "False"], ["dag_bag", "bag_dag", "dag", "root_dag", "dag"], ["dag_bag", "sync_to_db", "session", "session"]], "logical_date": [["logical_date", "timezone", "datetime"], ["subdag", "create_dagrun", "run_id", "state", "State", "RUNNING", "execution_date", "logical_date", "data_interval", "logical_date", "logical_date", "start_date", "timezone", "datetime", "session", "session"]]}, "name": "running_subdag", "params": {"admin_client": "", "dag_maker": ""}, "params_descr": {"admin_client": "", "dag_maker": ""}, "params_occur": {"admin_client": [], "dag_maker": [["dag_maker", "dag_id", "subdag"]]}, "params_p": {"admin_client": [["bool", 0.29898733944745237], ["List[Tuple[int, str]]", 0.20368721495829925], ["str", 0.1432409976224786], ["Callable", 0.1432409976224786], ["raiden.utils.BlockTimeout", 0.07290431729619978]], "args": [], "dag_maker": [["tracim.models.User", 0.19863216375442053], ["Optional[str]", 0.18545814612441616], ["str", 0.1146339719153881], ["models.characters.character_base.Character", 0.10348921739530538], ["Optional[Dict[str, Any]]", 0.09358936303552431], ["zerver.models.UserProfile", 0.09332676513868508]], "kwargs": []}, "q_name": "running_subdag", "ret_exprs": [], "ret_type": "", "variables": {"dag_bag": "", "logical_date": ""}, "variables_p": {"dag_bag": [["str", 0.19839237676662502], ["dict", 0.11058870811917913], ["List[str]", 0.11058870811917913]], "logical_date": [["Type[leasing.models.vaVat]", 0.0955978425954441], ["Type[hypha.apply.projects.models.Report]", 0.08999993531654372]]}}, {"docstring": {"func": "Test the /blocked endpoint works when a DAG is deleted.", "long_descr": "When a DAG is bagged, it is written to both DagModel and SerializedDagModel,\nbut its subdags are only written to DagModel (without serialization). Thus,\n``DagBag.get_dag(subdag_id)`` would raise ``SerializedDagNotFound`` if the\nsubdag was not previously bagged in the dagbag (perhaps due to its root DAG\nbeing deleted). ``DagBag.get_dag()`` calls should catch the exception and\nproperly handle this situation.", "ret": null}, "fn_lc": [[70, 0], [88, 5]], "fn_var_ln": {"resp": [[80, 4], [80, 8]]}, "fn_var_occur": {"resp": [["resp", "admin_client", "post", "data", "running_subdag", "dag_id"], ["resp", "status_code"], ["resp", "json", "running_subdag", "dag_id"]]}, "name": "test_blocked_subdag_success", "params": {"admin_client": "", "running_subdag": ""}, "params_descr": {"admin_client": "", "running_subdag": ""}, "params_occur": {"admin_client": [["resp", "admin_client", "post", "data", "running_subdag", "dag_id"]], "running_subdag": [["resp", "admin_client", "post", "data", "running_subdag", "dag_id"], ["resp", "json", "running_subdag", "dag_id"]]}, "params_p": {"admin_client": [["str", 0.26841400071921306]], "args": [], "kwargs": [], "running_subdag": [["str", 0.3284647835041461], ["core.models.Recipe", 0.1943490550512648], ["bool", 0.09398459842274769], ["raiden.transfer.mediated_transfer.state.LockedTransferSignedState", 0.09327732607459556], ["aiohttp.test_utils.TestClient", 0.08514164059089062]]}, "q_name": "test_blocked_subdag_success", "ret_exprs": [], "ret_type": "", "variables": {"resp": ""}, "variables_p": {"resp": [["requests.models.Response", 0.20381124011535992], ["str", 0.12155355385170787], ["Dict[str, str]", 0.08764389878548826]]}}], "imports": ["__future__", "annotations", "pytest", "airflow", "models", "DagModel", "airflow", "models", "dagbag", "DagBag", "airflow", "models", "serialized_dag", "SerializedDagModel", "airflow", "operators", "empty", "EmptyOperator", "airflow", "operators", "subdag", "SubDagOperator", "airflow", "utils", "timezone", "airflow", "utils", "session", "create_session", "airflow", "utils", "state", "State", "tests", "test_utils", "db", "clear_db_runs"], "mod_var_ln": {}, "mod_var_occur": {}, "no_types_annot": {"D": 0, "I": 0, "U": 9}, "session_id": "LWbN8-P8hEq-6SZg4wO3OX9FUDu5Yhdk1AgIwneZ-iU", "set": null, "tc": [false, null], "type_annot_cove": 0.0, "typed_seq": "", "untyped_seq": "", "variables": {}, "variables_p": {}}}