{"error": null, "response": {"classes": [], "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[42, 0], [52, 5]], "fn_var_ln": {"resp": [[44, 8], [44, 12]]}, "fn_var_occur": {"resp": [["resp", "admin_client", "get", "follow_redirects", "True"], ["check_content_in_response", "resp"]]}, "name": "test_configuration_do_not_expose_config", "params": {"admin_client": ""}, "params_descr": {"admin_client": ""}, "params_occur": {"admin_client": [["resp", "admin_client", "get", "follow_redirects", "True"]]}, "params_p": {"admin_client": [], "args": [], "kwargs": []}, "q_name": "test_configuration_do_not_expose_config", "ret_exprs": [], "ret_type": "", "variables": {"resp": ""}, "variables_p": {"resp": [["str", 0.08709594757407084], ["dict", 0.08364183811482602]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[56, 0], [62, 62]], "fn_var_ln": {"conf": [[58, 4], [58, 8]], "resp": [[61, 8], [61, 12]]}, "fn_var_occur": {"conf": [["conf", "initialize_config"], ["conf", "validate"]], "resp": [["resp", "admin_client", "get", "follow_redirects", "True"], ["check_content_in_response", "resp"]]}, "name": "test_configuration_expose_config", "params": {"admin_client": ""}, "params_descr": {"admin_client": ""}, "params_occur": {"admin_client": [["resp", "admin_client", "get", "follow_redirects", "True"]]}, "params_p": {"admin_client": [], "args": [], "kwargs": []}, "q_name": "test_configuration_expose_config", "ret_exprs": [], "ret_type": "", "variables": {"conf": "", "resp": ""}, "variables_p": {"conf": [["str", 0.30475355411324384], ["int", 0.18868030408536227], ["Union[dict, Dict[str, Any]]", 0.1266609658717469], ["Dict[str, int]", 0.11571777304957898], ["dss.config.Replica", 0.058941364245174314], ["Set[str]", 0.057975395176464245]], "resp": [["str", 0.08709594757407084], ["dict", 0.08364183811482602]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[66, 0], [74, 38]], "fn_var_ln": {"config_file": [[69, 4], [69, 15]]}, "fn_var_occur": {"config_file": [["config_file", "str", "tmp_path"], ["mock", "patch", "dict", "os", "environ", "config_file"], ["airflow", "configuration", "WEBSERVER_CONFIG", "config_file"], ["os", "path", "isfile", "config_file"]]}, "name": "test_webserver_configuration_config_file", "params": {"admin_client": "", "mock_webserver_config_global": "", "tmp_path": ""}, "params_descr": {"admin_client": "", "mock_webserver_config_global": "", "tmp_path": ""}, "params_occur": {"admin_client": [], "mock_webserver_config_global": [], "tmp_path": [["config_file", "str", "tmp_path"]]}, "params_p": {"admin_client": [], "args": [], "kwargs": [], "mock_webserver_config_global": [], "tmp_path": [["str", 0.09224364199960006]]}, "q_name": "test_webserver_configuration_config_file", "ret_exprs": [], "ret_type": "", "variables": {"config_file": ""}, "variables_p": {"config_file": [["str", 0.4473393761957352], ["dep_check.models.SourceFile", 0.17318938524511018]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[77, 0], [91, 5]], "fn_var_ln": {"resp": [[81, 8], [81, 12]]}, "fn_var_occur": {"resp": [["resp", "admin_client", "get"], ["check_content_in_response", "resp"]]}, "name": "test_redoc_should_render_template", "params": {"admin_client": "", "capture_templates": ""}, "params_descr": {"admin_client": "", "capture_templates": ""}, "params_occur": {"admin_client": [["resp", "admin_client", "get"]], "capture_templates": [["capture_templates", "templates"]]}, "params_p": {"admin_client": [["str", 0.09728140644763042]], "args": [], "capture_templates": [["tests.conftesWorker", 0.22417094240091986], ["str", 0.15840142341966926]], "kwargs": []}, "q_name": "test_redoc_should_render_template", "ret_exprs": [], "ret_type": "", "variables": {"resp": ""}, "variables_p": {"resp": [["bytes", 0.10157802984019915], ["Dict[str, Union[bytes, str]]", 0.09993710946252578], ["dict", 0.09510213962934812], ["str", 0.08916156643103082]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[94, 0], [99, 78]], "fn_var_ln": {"resp": [[95, 4], [95, 8]]}, "fn_var_occur": {"resp": [["resp", "admin_client", "get"], ["check_content_in_response", "resp"], ["check_content_in_response", "resp"], ["check_content_in_response", "resp"], ["check_content_in_response", "resp"]]}, "name": "test_plugin_should_list_on_page_with_details", "params": {"admin_client": ""}, "params_descr": {"admin_client": ""}, "params_occur": {"admin_client": [["resp", "admin_client", "get"]]}, "params_p": {"admin_client": [], "args": [], "kwargs": []}, "q_name": "test_plugin_should_list_on_page_with_details", "ret_exprs": [], "ret_type": "", "variables": {"resp": ""}, "variables_p": {"resp": [["requests.models.Response", 0.32124570182594053], ["Dict[str, str]", 0.18300376035087265], ["Generator[Any, None, None]", 0.10765311139918968]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[102, 0], [114, 96]], "fn_var_ln": {"mock_plugin": [[103, 4], [103, 15]], "name": [[104, 4], [104, 20]], "resp": [[109, 8], [109, 12]], "source": [[105, 4], [105, 22]]}, "fn_var_occur": {"mock_plugin": [["mock_plugin", "AirflowPlugin"], ["mock_plugin", "name"], ["mock_plugin", "source", "EntryPointSource", "mock", "Mock", "mock", "Mock", "version", "metadata"], ["mock_plugin_manager", "plugins", "mock_plugin"]], "name": [["mock_plugin", "name"]], "resp": [["resp", "admin_client", "get"], ["check_content_in_response", "resp"], ["check_content_in_response", "resp"], ["check_content_in_response", "resp"], ["check_content_in_response", "resp"]], "source": [["mock_plugin", "source", "EntryPointSource", "mock", "Mock", "mock", "Mock", "version", "metadata"]]}, "name": "test_plugin_should_list_entrypoint_on_page_with_details", "params": {"admin_client": ""}, "params_descr": {"admin_client": ""}, "params_occur": {"admin_client": [["resp", "admin_client", "get"]]}, "params_p": {"admin_client": [], "args": [], "kwargs": []}, "q_name": "test_plugin_should_list_entrypoint_on_page_with_details", "ret_exprs": [], "ret_type": "", "variables": {"mock_plugin": "", "name": "", "resp": "", "source": ""}, "variables_p": {"mock_plugin": [["Dict[str, Tuple[str, Any]]", 0.1722453842357079], ["Dict[str, Any]", 0.08287244895539225]], "name": [["str", 0.6994101492596789], ["Dict[str, str]", 0.1112620213890281], ["cmk.gui.plugins.views.utils.Command", 0.09552302875709505]], "resp": [["requests.models.Response", 0.32124570182594053], ["Dict[str, str]", 0.18300376035087265], ["Generator[Any, None, None]", 0.10765311139918968]], "source": []}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[117, 0], [120, 56]], "fn_var_ln": {"resp": [[118, 4], [118, 8]]}, "fn_var_occur": {"resp": [["resp", "app", "test_client", "get", "follow_redirects", "True"], ["check_content_not_in_response", "resp"], ["check_content_in_response", "resp"]]}, "name": "test_plugin_endpoint_should_not_be_unauthenticated", "params": {"app": ""}, "params_descr": {"app": ""}, "params_occur": {"app": [["resp", "app", "test_client", "get", "follow_redirects", "True"]]}, "params_p": {"app": [["app.GrpyApp", 0.19171623381463762], ["routemaster.app.App", 0.09114447556976445]], "args": [], "kwargs": []}, "q_name": "test_plugin_endpoint_should_not_be_unauthenticated", "ret_exprs": [], "ret_type": "", "variables": {"resp": ""}, "variables_p": {"resp": [["RuntimeError", 0.16736552119371942], ["Dict[str, Dict[str, Any]]", 0.0836161682278724], ["app.config.HealthCheckConfig", 0.08177765218330836]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[123, 0], [131, 48]], "fn_var_ln": {"beam_description": [[127, 4], [127, 20]], "beam_href": [[125, 4], [125, 13]], "beam_text": [[126, 4], [126, 13]], "resp": [[124, 4], [124, 8]]}, "fn_var_occur": {"beam_description": [["check_content_in_response", "beam_description", "resp"]], "beam_href": [["check_content_in_response", "beam_href", "resp"]], "beam_text": [["check_content_in_response", "beam_text", "resp"]], "resp": [["resp", "admin_client", "get"], ["check_content_in_response", "beam_href", "resp"], ["check_content_in_response", "beam_text", "resp"], ["check_content_in_response", "beam_description", "resp"], ["check_content_in_response", "resp"]]}, "name": "test_should_list_providers_on_page_with_details", "params": {"admin_client": ""}, "params_descr": {"admin_client": ""}, "params_occur": {"admin_client": [["resp", "admin_client", "get"]]}, "params_p": {"admin_client": [], "args": [], "kwargs": []}, "q_name": "test_should_list_providers_on_page_with_details", "ret_exprs": [], "ret_type": "", "variables": {"beam_description": "", "beam_href": "", "beam_text": "", "resp": ""}, "variables_p": {"beam_description": [["Pattern[str]", 0.24375036434700792], ["List[Tuple[str, str]]", 0.2005610760037814], ["str", 0.17703190041674183], ["Tuple[str, int]", 0.16977672269543057], ["Type[bytes]", 0.140220421201954], ["Dict[Optional[str], str]", 0.0686595153350843]], "beam_href": [["str", 0.6386186985576012], ["Dict[str, float]", 0.11036464409728863], ["Dict[int, str]", 0.09195545445451554], ["frozenset[str]", 0.08008701327912199]], "beam_text": [["str", 0.39226951316317665], ["Dict[str, Union[Any, Any, Any, Any]]", 0.11293009277813792], ["Dict[Any, Dict[str, str]]", 0.10390797994613471], ["Tuple[str, int]", 0.09528265441869341], ["Pattern[str]", 0.08841650267100569]], "resp": [["requests.models.Response", 0.20079061624888733]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[134, 0], [137, 56]], "fn_var_ln": {"resp": [[135, 4], [135, 8]]}, "fn_var_occur": {"resp": [["resp", "app", "test_client", "get", "follow_redirects", "True"], ["check_content_not_in_response", "resp"], ["check_content_in_response", "resp"]]}, "name": "test_endpoint_should_not_be_unauthenticated", "params": {"app": ""}, "params_descr": {"app": ""}, "params_occur": {"app": [["resp", "app", "test_client", "get", "follow_redirects", "True"]]}, "params_p": {"app": [["app.GrpyApp", 0.19225689692176973], ["routemaster.app.App", 0.08931172348277464]], "args": [], "kwargs": []}, "q_name": "test_endpoint_should_not_be_unauthenticated", "ret_exprs": [], "ret_type": "", "variables": {"resp": ""}, "variables_p": {"resp": [["RuntimeError", 0.16736552119371942], ["Dict[str, Dict[str, Any]]", 0.0836161682278724], ["app.config.HealthCheckConfig", 0.08177765218330836]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[154, 0], [159, 44]], "fn_var_ln": {"resp": [[155, 4], [155, 8]]}, "fn_var_occur": {"resp": [["resp", "admin_client", "get", "url"], ["check_content_in_response", "content", "resp"]]}, "name": "test_task_start_date_filter", "params": {"admin_client": "", "content": "", "url": ""}, "params_descr": {"admin_client": "", "content": "", "url": ""}, "params_occur": {"admin_client": [["resp", "admin_client", "get", "url"]], "content": [["check_content_in_response", "content", "resp"]], "url": [["resp", "admin_client", "get", "url"]]}, "params_p": {"admin_client": [["tests._TestServerFactory", 0.2626807061146376]], "args": [], "content": [["str", 0.18547962450891], ["core.models.Grouping", 0.08742817971750037]], "kwargs": [], "url": [["tests._TestServerFactory", 0.2626807061146376]]}, "q_name": "test_task_start_date_filter", "ret_exprs": [], "ret_type": "", "variables": {"resp": ""}, "variables_p": {"resp": [["requests.models.Response", 0.38139944506424833], ["Dict[str, List[str]]", 0.09915399255358025]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[169, 0], [172, 57]], "fn_var_ln": {"resp": [[170, 4], [170, 8]]}, "fn_var_occur": {"resp": [["resp", "admin_client", "get", "url"], ["check_content_in_response", "resp"]]}, "name": "test_try_number_filter", "params": {"admin_client": "", "url": ""}, "params_descr": {"admin_client": "", "url": ""}, "params_occur": {"admin_client": [["resp", "admin_client", "get", "url"]], "url": [["resp", "admin_client", "get", "url"]]}, "params_p": {"admin_client": [], "args": [], "kwargs": [], "url": []}, "q_name": "test_try_number_filter", "ret_exprs": [], "ret_type": "", "variables": {"resp": ""}, "variables_p": {"resp": [["requests.models.Response", 0.6194048546429217]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[185, 0], [189, 44]], "fn_var_ln": {"resp": [[186, 4], [186, 8]]}, "fn_var_occur": {"resp": [["resp", "admin_client", "get", "url"], ["check_content_in_response", "content", "resp"]]}, "name": "test_task_dag_id_equals_filter", "params": {"admin_client": "", "content": "", "url": ""}, "params_descr": {"admin_client": "", "content": "", "url": ""}, "params_occur": {"admin_client": [["resp", "admin_client", "get", "url"]], "content": [["check_content_in_response", "content", "resp"]], "url": [["resp", "admin_client", "get", "url"]]}, "params_p": {"admin_client": [["tests._TestServerFactory", 0.0929126626911769], ["str", 0.07769441988641475]], "args": [], "content": [["str", 0.3554937773043257], ["tests.test_util.aiohttp.AiohttpClientMocker", 0.09581135914345904], ["Optional[str]", 0.0891240703681571], ["Dict[str, Any]", 0.0891240703681571], ["Optional[Dict[str, Any]]", 0.08680625407364165]], "kwargs": [], "url": [["tests._TestServerFactory", 0.0929126626911769], ["str", 0.07769441988641475]]}, "q_name": "test_task_dag_id_equals_filter", "ret_exprs": [], "ret_type": "", "variables": {"resp": ""}, "variables_p": {"resp": [["requests.models.Response", 0.38139944506424833], ["Dict[str, List[str]]", 0.09915399255358025]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[219, 0], [222, 53]], "fn_var_ln": {"return_value": [[220, 4], [220, 29]]}, "fn_var_occur": {"return_value": [["mock_url_for", "return_value"]]}, "name": "test_get_safe_url", "params": {"app": "", "expected_url": "", "mock_url_for": "", "test_url": ""}, "params_descr": {"app": "", "expected_url": "", "mock_url_for": "", "test_url": ""}, "params_occur": {"app": [["app", "test_request_context", "base_url"]], "expected_url": [["get_safe_url", "test_url", "expected_url"]], "mock_url_for": [["mock_url_for", "return_value"]], "test_url": [["get_safe_url", "test_url", "expected_url"]]}, "params_p": {"app": [], "args": [], "expected_url": [], "kwargs": [], "mock_url_for": [["bool", 0.20606414891654884]], "test_url": []}, "q_name": "test_get_safe_url", "ret_exprs": [], "ret_type": "", "variables": {"return_value": ""}, "variables_p": {"return_value": [["str", 0.3293225963909155], ["int", 0.27686266493131495], ["List[Dict[str, Any]]", 0.13224520476214705], ["datetime.datetime.datetime", 0.08904714307045555], ["List[str]", 0.08767375872263335]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[226, 0], [229, 39]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_app", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "test_app", "ret_exprs": ["return app.create_app(testing=True)"], "ret_type": "", "ret_type_p": [["tests.e2e.Helper", 0.5613894425445601], ["tests.setup.SetupTest", 0.334039558523307]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[267, 4], [276, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "get_task_instance", "params": {"session": "", "task": ""}, "params_descr": {"session": "", "task": ""}, "params_occur": {"session": [["airflow", "utils", "session", "create_session"], ["session", "query", "TaskInstance", "filter", "TaskInstance", "dag_id", "dag", "dag_id", "TaskInstance", "task_id", "task", "task_id", "TaskInstance", "execution_date", "start_date", "one"]], "task": [["session", "query", "TaskInstance", "filter", "TaskInstance", "dag_id", "dag", "dag_id", "TaskInstance", "task_id", "task", "task_id", "TaskInstance", "execution_date", "start_date", "one"]]}, "params_p": {"args": [], "kwargs": [], "session": [["sqlalchemy.orm.session.Session", 0.266661156204427], ["int", 0.17450790112710474], ["types.EventT", 0.0943012814687706], ["Dict[str, Any]", 0.09381949949915648]], "task": [["str", 0.273893526391822], ["Dict[str, object]", 0.18220888265769292], ["Dict[str, taskiapplication.models.task.Task]", 0.12884431636931243], ["bool", 0.10033133662911092], ["int", 0.0985727342533962]]}, "q_name": "test_mark_task_instance_state.<locals>.get_task_instance", "ret_exprs": ["return ( session.query(TaskInstance) .filter( TaskInstance.dag_id == dag.dag_id, TaskInstance.task_id == task.task_id, TaskInstance.execution_date == start_date, ) .one())"], "ret_type": "", "ret_type_p": [["cmk.utils.type_defs.UserId", 0.13515404303590267], ["Union[float, str]", 0.09849953911830175], ["float", 0.09849953911830175], ["List[models.CommentBase]", 0.09787160109198942], ["bool", 0.0968477366135547], ["raiden.utils.Address", 0.09529550134966548], ["str", 0.09123539979052067], ["Callable[..., None]", 0.09017725665935587]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Test that _mark_task_instance_state() does all three things:", "long_descr": "- Marks the given TaskInstance as SUCCESS;\n- Clears downstream TaskInstances in FAILED/UPSTREAM_FAILED state;\n- Set DagRun to QUEUED.", "ret": null}, "fn_lc": [[232, 0], [318, 49]], "fn_var_ln": {"dag_bag": [[287, 4], [287, 20]], "dagrun": [[259, 4], [259, 10]], "start_date": [[249, 4], [249, 14]], "task_1": [[251, 8], [251, 14]], "task_2": [[252, 8], [252, 14]], "task_3": [[253, 8], [253, 14]], "task_4": [[254, 8], [254, 14]], "task_5": [[255, 8], [255, 14]], "view": [[291, 8], [291, 12]]}, "fn_var_occur": {"dag_bag": [["test_app", "dag_bag", "DagBag", "dag_folder", "include_examples", "False"], ["test_app", "dag_bag", "bag_dag", "dag", "dag", "root_dag", "dag"]], "dagrun": [["view", "_mark_task_instance_state", "dag_id", "dag", "dag_id", "run_id", "dagrun", "run_id", "task_id", "task_1", "task_id", "map_indexes", "None", "origin", "upstream", "False", "downstream", "False", "future", "False", "past", "False", "state", "State", "SUCCESS"], ["dagrun", "refresh_from_db", "session", "session"], ["dagrun", "get_state", "State", "QUEUED"]], "start_date": [], "task_1": [["get_task_instance", "session", "task_1", "state", "State", "FAILED"], ["view", "_mark_task_instance_state", "dag_id", "dag", "dag_id", "run_id", "dagrun", "run_id", "task_id", "task_1", "task_id", "map_indexes", "None", "origin", "upstream", "False", "downstream", "False", "future", "False", "past", "False", "state", "State", "SUCCESS"], ["get_task_instance", "session", "task_1", "state", "State", "SUCCESS"]], "task_2": [["get_task_instance", "session", "task_2", "state", "State", "SUCCESS"], ["get_task_instance", "session", "task_2", "state", "State", "SUCCESS"]], "task_3": [["get_task_instance", "session", "task_3", "state", "State", "UPSTREAM_FAILED"], ["get_task_instance", "session", "task_3", "state", "State", "NONE"]], "task_4": [["get_task_instance", "session", "task_4", "state", "State", "FAILED"], ["get_task_instance", "session", "task_4", "state", "State", "NONE"]], "task_5": [["get_task_instance", "session", "task_5", "state", "State", "SKIPPED"], ["get_task_instance", "session", "task_5", "state", "State", "SKIPPED"]], "view": [["view", "Airflow"], ["view", "_mark_task_instance_state", "dag_id", "dag", "dag_id", "run_id", "dagrun", "run_id", "task_id", "task_1", "task_id", "map_indexes", "None", "origin", "upstream", "False", "downstream", "False", "future", "False", "past", "False", "state", "State", "SUCCESS"]]}, "name": "test_mark_task_instance_state", "params": {"test_app": ""}, "params_descr": {"test_app": ""}, "params_occur": {"test_app": [["test_app", "dag_bag", "DagBag", "dag_folder", "include_examples", "False"], ["test_app", "dag_bag", "bag_dag", "dag", "dag", "root_dag", "dag"], ["test_app", "test_request_context"]]}, "params_p": {"args": [], "kwargs": [], "test_app": [["app.GrpyApp", 0.1786226076789646]]}, "q_name": "test_mark_task_instance_state", "ret_exprs": [], "ret_type": "", "variables": {"dag_bag": "", "dagrun": "", "start_date": "", "task_1": "", "task_2": "", "task_3": "", "task_4": "", "task_5": "", "view": ""}, "variables_p": {"dag_bag": [], "dagrun": [["Dict[str, Callable]", 0.1149260046897003], ["cg_broker.models.Runner", 0.08651205273313954], ["list", 0.08517265323423133]], "start_date": [["str", 0.10000000000000002], ["Type[app.models.entity.EntityToEntityRel]", 0.10000000000000002], ["Optional[str]", 0.10000000000000002], ["Type[leasing.models.renContractRent]", 0.10000000000000002], ["Type[leasing.models.renIndexAdjustedRent]", 0.10000000000000002], ["datetime.datetime", 0.10000000000000002], ["Type[finances.models.DiscountBase]", 0.10000000000000002], ["Type[guild_calendar.models.Event]", 0.10000000000000002], ["Optional[datetime.date]", 0.10000000000000002], ["datetime.date", 0.10000000000000002]], "task_1": [["List[str]", 0.1298976552182058], ["khetha.models.Task", 0.08677777252455668]], "task_2": [["int", 0.123952407596898], ["list", 0.09689890625029184], ["taskiapplication.models.task.Task", 0.0946189174094928]], "task_3": [["int", 0.11743721471807579], ["taskiapplication.models.task.Task", 0.09330822766298084]], "task_4": [["Dict[str, Union[Any, Any]]", 0.12516613588736933], ["taskiapplication.models.task.Task", 0.0928121700229564], ["int", 0.08901622139676156]], "task_5": [["int", 0.123952407596898], ["list", 0.09689890625029184], ["taskiapplication.models.task.Task", 0.0946189174094928]], "view": [["Dict[str, Dict[str, str]]", 0.17889023893675696], ["List[magic.models.Deck]", 0.11797636413440381], ["List[str]", 0.11159182900689138], ["buza.models.Subject", 0.10701166165175223], ["str", 0.1064903177731705], ["int", 0.09834079083339106], ["ofxtools.models.signon.SONRS", 0.09019806263690448]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[365, 4], [374, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "get_task_instance", "params": {"session": "", "task": ""}, "params_descr": {"session": "", "task": ""}, "params_occur": {"session": [["airflow", "utils", "session", "create_session"], ["session", "query", "TaskInstance", "filter", "TaskInstance", "dag_id", "dag", "dag_id", "TaskInstance", "task_id", "task", "task_id", "TaskInstance", "execution_date", "start_date", "one"]], "task": [["session", "query", "TaskInstance", "filter", "TaskInstance", "dag_id", "dag", "dag_id", "TaskInstance", "task_id", "task", "task_id", "TaskInstance", "execution_date", "start_date", "one"]]}, "params_p": {"args": [], "kwargs": [], "session": [["sqlalchemy.orm.session.Session", 0.266661156204427], ["int", 0.17450790112710474], ["types.EventT", 0.0943012814687706], ["Dict[str, Any]", 0.09381949949915648]], "task": [["str", 0.273893526391822], ["Dict[str, object]", 0.18220888265769292], ["Dict[str, taskiapplication.models.task.Task]", 0.12884431636931243], ["bool", 0.10033133662911092], ["int", 0.0985727342533962]]}, "q_name": "test_mark_task_group_state.<locals>.get_task_instance", "ret_exprs": ["return ( session.query(TaskInstance) .filter( TaskInstance.dag_id == dag.dag_id, TaskInstance.task_id == task.task_id, TaskInstance.execution_date == start_date, ) .one())"], "ret_type": "", "ret_type_p": [["cmk.utils.type_defs.UserId", 0.13515404303590267], ["Union[float, str]", 0.09849953911830175], ["float", 0.09849953911830175], ["List[models.CommentBase]", 0.09787160109198942], ["bool", 0.0968477366135547], ["raiden.utils.Address", 0.09529550134966548], ["str", 0.09123539979052067], ["Callable[..., None]", 0.09017725665935587]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Test that _mark_task_group_state() does all three things:", "long_descr": "- Marks the given TaskGroup as SUCCESS;\n- Clears downstream TaskInstances in FAILED/UPSTREAM_FAILED state;\n- Set DagRun to QUEUED.", "ret": null}, "fn_lc": [[321, 0], [421, 49]], "fn_var_ln": {"dag_bag": [[387, 4], [387, 20]], "dagrun": [[357, 4], [357, 10]], "start": [[340, 8], [340, 13]], "start_date": [[338, 4], [338, 14]], "task_1": [[343, 12], [343, 18]], "task_2": [[344, 12], [344, 18]], "task_3": [[345, 12], [345, 18]], "task_4": [[349, 8], [349, 14]], "task_5": [[350, 8], [350, 14]], "task_6": [[351, 8], [351, 14]], "task_7": [[352, 8], [352, 14]], "task_8": [[353, 8], [353, 14]], "view": [[391, 8], [391, 12]]}, "fn_var_occur": {"dag_bag": [["test_app", "dag_bag", "DagBag", "dag_folder", "include_examples", "False"], ["test_app", "dag_bag", "bag_dag", "dag", "dag", "root_dag", "dag"]], "dagrun": [["view", "_mark_task_group_state", "dag_id", "dag", "dag_id", "run_id", "dagrun", "run_id", "group_id", "section_1", "group_id", "origin", "upstream", "False", "downstream", "False", "future", "False", "past", "False", "state", "State", "SUCCESS"], ["dagrun", "refresh_from_db", "session", "session"], ["dagrun", "get_state", "State", "QUEUED"]], "start": [], "start_date": [], "task_1": [["get_task_instance", "session", "task_1", "state", "State", "FAILED"], ["get_task_instance", "session", "task_1", "state", "State", "SUCCESS"]], "task_2": [["get_task_instance", "session", "task_2", "state", "State", "SUCCESS"], ["get_task_instance", "session", "task_2", "state", "State", "SUCCESS"]], "task_3": [["get_task_instance", "session", "task_3", "state", "State", "UPSTREAM_FAILED"], ["get_task_instance", "session", "task_3", "state", "State", "SUCCESS"]], "task_4": [["get_task_instance", "session", "task_4", "state", "State", "SUCCESS"], ["get_task_instance", "session", "task_4", "state", "State", "SUCCESS"]], "task_5": [["get_task_instance", "session", "task_5", "state", "State", "UPSTREAM_FAILED"], ["get_task_instance", "session", "task_5", "state", "State", "NONE"]], "task_6": [["get_task_instance", "session", "task_6", "state", "State", "FAILED"], ["get_task_instance", "session", "task_6", "state", "State", "NONE"]], "task_7": [["get_task_instance", "session", "task_7", "state", "State", "SKIPPED"], ["get_task_instance", "session", "task_7", "state", "State", "SKIPPED"]], "task_8": [], "view": [["view", "Airflow"], ["view", "_mark_task_group_state", "dag_id", "dag", "dag_id", "run_id", "dagrun", "run_id", "group_id", "section_1", "group_id", "origin", "upstream", "False", "downstream", "False", "future", "False", "past", "False", "state", "State", "SUCCESS"]]}, "name": "test_mark_task_group_state", "params": {"test_app": ""}, "params_descr": {"test_app": ""}, "params_occur": {"test_app": [["test_app", "dag_bag", "DagBag", "dag_folder", "include_examples", "False"], ["test_app", "dag_bag", "bag_dag", "dag", "dag", "root_dag", "dag"], ["test_app", "test_request_context"]]}, "params_p": {"args": [], "kwargs": [], "test_app": [["app.GrpyApp", 0.1786226076789646]]}, "q_name": "test_mark_task_group_state", "ret_exprs": [], "ret_type": "", "variables": {"dag_bag": "", "dagrun": "", "start": "", "start_date": "", "task_1": "", "task_2": "", "task_3": "", "task_4": "", "task_5": "", "task_6": "", "task_7": "", "task_8": "", "view": ""}, "variables_p": {"dag_bag": [], "dagrun": [["str", 0.1867164931158664], ["Dict[str, Callable]", 0.12818397623008043], ["buza.models.Subject", 0.10648099513987248], ["list", 0.08866534113223462], ["track.models.Category", 0.08339877806656652], ["hub2labhook.github.models.evenGithubEvent", 0.08339581078405442]], "start": [["bool", 0.20000000000000004], ["str", 0.20000000000000004], ["int", 0.20000000000000004], ["datetime.datetime", 0.10000000000000002], ["List[Tuple[Any, Any]]", 0.10000000000000002]], "start_date": [["str", 0.10000000000000002], ["Type[app.models.entity.EntityToEntityRel]", 0.10000000000000002], ["Optional[str]", 0.10000000000000002], ["Type[leasing.models.renContractRent]", 0.10000000000000002], ["Type[leasing.models.renIndexAdjustedRent]", 0.10000000000000002], ["datetime.datetime", 0.10000000000000002], ["Type[finances.models.DiscountBase]", 0.10000000000000002], ["Type[guild_calendar.models.Event]", 0.10000000000000002], ["Optional[datetime.date]", 0.10000000000000002], ["datetime.date", 0.10000000000000002]], "task_1": [["Dict[str, Union[Any, Any]]", 0.15491741866266287], ["List[str]", 0.10321300974267043], ["int", 0.08951268216486012], ["list", 0.08134072015445555]], "task_2": [["int", 0.123952407596898], ["list", 0.09689890625029184], ["taskiapplication.models.task.Task", 0.0946189174094928]], "task_3": [["int", 0.13636969085521664], ["taskiapplication.models.task.Task", 0.09358768976178963]], "task_4": [["int", 0.123952407596898], ["list", 0.09689890625029184], ["taskiapplication.models.task.Task", 0.0946189174094928]], "task_5": [["int", 0.11743721471807579], ["taskiapplication.models.task.Task", 0.09330822766298084]], "task_6": [["Dict[str, Union[Any, Any]]", 0.12516613588736933], ["taskiapplication.models.task.Task", 0.0928121700229564], ["int", 0.08901622139676156]], "task_7": [["int", 0.123952407596898], ["list", 0.09689890625029184], ["taskiapplication.models.task.Task", 0.0946189174094928]], "task_8": [["str", 0.19999999999999998], ["annofabapi.models.TaskPhase", 0.09999999999999999], ["List[Dict[str, Any]]", 0.09999999999999999], ["bool", 0.09999999999999999], ["Type[src.app.models.TaskDevice]", 0.09999999999999999], ["Dict[str, Any]", 0.09999999999999999]], "view": [["int", 0.4619562184726252], ["str", 0.17663194482847688], ["bool", 0.16504800145863863]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[430, 0], [432, 41]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_generate_key_paths", "params": {"expected_paths": "", "test_content_dict": ""}, "params_descr": {"expected_paths": "", "test_content_dict": ""}, "params_occur": {"expected_paths": [["key_path", "expected_paths"]], "test_content_dict": [["get_key_paths", "test_content_dict"]]}, "params_p": {"args": [], "expected_paths": [["str", 0.37622743157020805], ["BinaryIO", 0.23184198146531448]], "kwargs": [], "test_content_dict": [["tests.testlibraries.parametrizer.file_states.MultipleFilePathState", 0.2237964441347686], ["bool", 0.1988732534978701], ["int", 0.1348347820196917], ["str", 0.08776742312825939]]}, "q_name": "test_generate_key_paths", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[443, 0], [444, 82]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_get_value_from_path", "params": {"expected_value": "", "test_content_dict": "", "test_key_path": ""}, "params_descr": {"expected_value": "", "test_content_dict": "", "test_key_path": ""}, "params_occur": {"expected_value": [["expected_value", "get_value_from_path", "test_key_path", "test_content_dict"]], "test_content_dict": [["expected_value", "get_value_from_path", "test_key_path", "test_content_dict"]], "test_key_path": [["expected_value", "get_value_from_path", "test_key_path", "test_content_dict"]]}, "params_p": {"args": [], "expected_value": [["Optional[str]", 0.4976656155519643], ["str", 0.397911795431474]], "kwargs": [], "test_content_dict": [["Optional[str]", 0.4976656155519643], ["str", 0.397911795431474]], "test_key_path": [["Optional[str]", 0.4976656155519643], ["str", 0.397911795431474]]}, "q_name": "test_get_value_from_path", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[447, 0], [456, 90]], "fn_var_ln": {"code": [[449, 4], [449, 8]], "fn": [[455, 8], [455, 10]]}, "fn_var_occur": {"code": [["code", "decorator", "None", "__code__"], ["fn", "__code__", "code"]], "fn": [["fn", "getattr", "cls", "fn_name"], ["fn", "None"], ["fn", "__code__", "code"], ["hasattr", "fn"], ["fn", "getattr", "fn"]]}, "name": "assert_decorator_used", "params": {"cls": "builtins.type", "decorator": "typing.Callable", "fn_name": "builtins.str"}, "params_descr": {"cls": "", "decorator": "", "fn_name": ""}, "params_occur": {"cls": [["fn", "getattr", "cls", "fn_name"], ["False", "cls", "__name__", "fn_name", "decorator", "__name__"]], "decorator": [["code", "decorator", "None", "__code__"], ["False", "cls", "__name__", "fn_name", "decorator", "__name__"]], "fn_name": [["fn", "getattr", "cls", "fn_name"], ["False", "cls", "__name__", "fn_name", "decorator", "__name__"]]}, "params_p": {"args": [], "cls": [["Optional[object]", 0.21479283547957512], ["types.ModuleType", 0.2109760797657152], ["Optional[str]", 0.18187912111353993], ["Optional[bool]", 0.1217616789065153], ["str", 0.09537326873736865], ["Dict[str, str]", 0.0867707740544546]], "decorator": [["Optional[str]", 0.42287082429987344], ["str", 0.13042941450622947], ["Dict[str, str]", 0.11313725234669107], ["Optional[List[str]]", 0.08666381504426612], ["Optional[Set[str]]", 0.08391204151881788]], "fn_name": [["Optional[object]", 0.21479283547957512], ["types.ModuleType", 0.2109760797657152], ["Optional[str]", 0.18187912111353993], ["Optional[bool]", 0.1217616789065153], ["str", 0.09537326873736865], ["Dict[str, str]", 0.0867707740544546]], "kwargs": []}, "q_name": "assert_decorator_used", "ret_exprs": ["return"], "ret_type": "", "ret_type_p": [["int", 0.11318523750698545], ["str", 0.08947882113978002], ["Dict[str, Any]", 0.08908907646875358], ["bool", 0.08883299485590161]], "variables": {"code": "", "fn": ""}, "variables_p": {"code": [["str", 0.28522295517351215], ["int", 0.28358392190357035], ["Optional[str]", 0.15311108767415832]], "fn": [["str", 0.29069193815588923], ["Dict[str, Tuple[str, str]]", 0.11809091830399925], ["List[Tuple[str, Any]]", 0.09953400065705705], ["Dict[str, str]", 0.08907533723565039]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[466, 0], [472, 85]], "fn_var_ln": {"action_funcs": [[470, 4], [470, 16]]}, "fn_var_occur": {"action_funcs": [["action_funcs", "func", "func", "dir", "cls", "callable", "getattr", "cls", "func", "func", "startswith"], ["action_funcs", "action_funcs"]]}, "name": "test_dag_edit_privileged_requires_view_has_action_decorators", "params": {"cls": "builtins.type"}, "params_descr": {"cls": ""}, "params_occur": {"cls": [["action_funcs", "func", "func", "dir", "cls", "callable", "getattr", "cls", "func", "func", "startswith"], ["assert_decorator_used", "cls", "action_function", "views", "action_has_dag_edit_access"]]}, "params_p": {"args": [], "cls": [["str", 0.201070999566446], ["Dict[str, Any]", 0.10212442768642904], ["Callable", 0.1002288951926568], ["zerver.models.Realm.Domain", 0.09400970595386761]], "kwargs": []}, "q_name": "test_dag_edit_privileged_requires_view_has_action_decorators", "ret_exprs": [], "ret_type": "", "variables": {"action_funcs": ""}, "variables_p": {"action_funcs": [["datetime.datetime", 0.19999099778395613], ["dict", 0.1862114209539372], ["backend.api.models.rlc.Rlc", 0.10823668633746537], ["Pattern[str]", 0.1064787146146245]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[475, 0], [499, 32]], "fn_var_ln": {"data": [[498, 4], [498, 8]], "expected_data": [[484, 4], [484, 17]], "query_data": [[476, 4], [476, 14]]}, "fn_var_occur": {"data": [["data", "get_task_stats_from_query", "query_data"], ["data", "expected_data"]], "expected_data": [["data", "expected_data"]], "query_data": [["query_data", "True", "True", "False", "True", "True", "False"], ["data", "get_task_stats_from_query", "query_data"]]}, "name": "test_get_task_stats_from_query", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "test_get_task_stats_from_query", "ret_exprs": [], "ret_type": "", "variables": {"data": "", "expected_data": "", "query_data": ""}, "variables_p": {"data": [["List[str]", 0.19798017432307322], ["T", 0.14354499714265426], ["List[Dict[str, Any]]", 0.11076001008084445], ["Dict[str, Any]", 0.10035477653145738], ["dict", 0.09137776882671624], ["str", 0.08830997913657213], ["int", 0.08796114607865102], ["kitovu.utils.JsonType", 0.08742607660343413]], "expected_data": [["List[Tuple[str, str, str, str, Any]]", 0.2337119521824179], ["List[Tuple[str, str]]", 0.2337119521824179], ["List[Tuple[Any, Any, Any, str]]", 0.11685597609120894], ["Dict[str, Union[Any, Any]]", 0.0860021164384621], ["Dict[Any, Dict[str, Any]]", 0.08421829366043926], ["dict", 0.08400880976085301]], "query_data": [["List[Dict[str, Any]]", 0.2937686981451292], ["List[Tuple[str, str, str, str]]", 0.11648892205688438], ["int", 0.09774123773230228], ["Dict[int, Any]", 0.09345925496846827], ["list", 0.09293629309910591]]}}, {"docstring": {"func": "Test invalid date format doesn't crash page.", "long_descr": null, "ret": null}, "fn_lc": [[554, 0], [559, 55]], "fn_var_ln": {"resp": [[556, 4], [556, 8]]}, "fn_var_occur": {"resp": [["resp", "admin_client", "get", "url", "follow_redirects", "True"], ["resp", "status_code"], ["re", "search", "content", "resp", "get_data", "decode"]]}, "name": "test_invalid_dates", "params": {"admin_client": "", "app": "", "content": "", "url": ""}, "params_descr": {"admin_client": "", "app": "", "content": "", "url": ""}, "params_occur": {"admin_client": [["resp", "admin_client", "get", "url", "follow_redirects", "True"]], "app": [], "content": [["re", "search", "content", "resp", "get_data", "decode"]], "url": [["resp", "admin_client", "get", "url", "follow_redirects", "True"]]}, "params_p": {"admin_client": [], "app": [["list", 0.10484912112250248], ["app.GrpyApp", 0.07665193356662023]], "args": [], "content": [["str", 0.09886279307084737], ["bytes", 0.09483087021329487]], "kwargs": [], "url": []}, "q_name": "test_invalid_dates", "ret_exprs": [], "ret_type": "", "variables": {"resp": ""}, "variables_p": {"resp": [["requests.models.Response", 0.365905405873707], ["Generator[Any, None, None]", 0.12932112292586367]]}}], "imports": ["__future__", "annotations", "os", "re", "typing", "Callable", "unittest", "mock", "pytest", "airflow", "configuration", "initialize_config", "airflow", "plugins_manager", "AirflowPlugin", "EntryPointSource", "airflow", "utils", "task_group", "TaskGroup", "airflow", "www", "views", "airflow", "www", "views", "get_key_paths", "get_safe_url", "get_task_stats_from_query", "get_value_from_path", "tests", "test_utils", "config", "conf_vars", "tests", "test_utils", "mock_plugins", "mock_plugin_manager", "tests", "test_utils", "www", "check_content_in_response", "check_content_not_in_response", "airflow.configuration", "airflow", "utils", "docs", "get_docs_url", "airflow", "www", "app", "airflow", "models", "DAG", "DagBag", "TaskInstance", "airflow", "operators", "empty", "EmptyOperator", "airflow", "utils", "session", "create_session", "airflow", "utils", "state", "State", "airflow", "utils", "timezone", "datetime", "airflow", "utils", "types", "DagRunType", "airflow", "www", "views", "Airflow", "tests", "test_utils", "db", "clear_db_runs", "airflow", "models", "DAG", "DagBag", "TaskInstance", "airflow", "operators", "empty", "EmptyOperator", "airflow", "utils", "session", "create_session", "airflow", "utils", "state", "State", "airflow", "utils", "timezone", "datetime", "airflow", "utils", "types", "DagRunType", "airflow", "www", "views", "Airflow", "tests", "test_utils", "db", "clear_db_runs"], "mod_var_ln": {"INVALID_DATETIME_RESPONSE": [[502, 0], [502, 25]], "TEST_CONTENT_DICT": [[424, 0], [424, 17]]}, "mod_var_occur": {"INVALID_DATETIME_RESPONSE": [], "TEST_CONTENT_DICT": []}, "no_types_annot": {"D": 4, "I": 0, "U": 111}, "session_id": "9pRJETdxvbY12LuMmf3_iwlF9B7uJQsFb0M-sZfO9po", "set": null, "tc": [false, null], "type_annot_cove": 0.03, "typed_seq": "", "untyped_seq": "", "variables": {"INVALID_DATETIME_RESPONSE": "", "TEST_CONTENT_DICT": ""}, "variables_p": {"INVALID_DATETIME_RESPONSE": [["str", 0.33894623920163564], ["Dict[str, Union[Any, Any]]", 0.11783580087521278], ["Optional[float]", 0.10697780167994463], ["int", 0.09938755022001317], ["Dict[str, str]", 0.09141818990619306], ["Optional[Dict[str, Any]]", 0.08181147270566685], ["Type[axes.models.AccessAttempt]", 0.08181147270566685], ["Optional[str]", 0.08181147270566685]], "TEST_CONTENT_DICT": [["str", 0.8182270400161453], ["bytes", 0.09507325841455205], ["Dict[str, Union[Any, Any, bool, str]]", 0.08669970156930257]]}}}