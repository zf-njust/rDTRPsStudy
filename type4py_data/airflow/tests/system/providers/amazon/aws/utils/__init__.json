{"error": null, "response": {"classes": [{"cls_lc": [[113, 0], [160, 20]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[123, 4], [136, 98]], "fn_var_ln": {"delimiter": [[134, 12], [134, 26]], "name": [[130, 8], [130, 17]], "test_name": [[131, 8], [131, 22]], "to_split": [[132, 8], [132, 21]]}, "fn_var_occur": {"delimiter": [["self", "delimiter", "delimiter"]], "name": [["self", "name", "name"], ["ValueError", "name"]], "test_name": [["self", "test_name", "test_name"]], "to_split": [["self", "to_split", "to_split"]]}, "name": "__init__", "params": {"delimiter": "str | None", "name": "builtins.str", "self": "", "test_name": "str | None", "to_split": "builtins.bool"}, "params_descr": {"delimiter": "", "name": "", "self": "", "test_name": "", "to_split": ""}, "params_occur": {"delimiter": [["self", "delimiter", "delimiter"]], "name": [["self", "name", "name"], ["ValueError", "name"]], "self": [["self", "name", "name"], ["self", "test_name", "test_name"], ["self", "to_split", "to_split"], ["self", "delimiter", "delimiter"]], "test_name": [["self", "test_name", "test_name"]], "to_split": [["self", "to_split", "to_split"]]}, "params_p": {"args": [], "delimiter": [["Optional[str]", 0.5094697512847631], ["bool", 0.3178420770642262], ["str", 0.10362517276084152], ["Optional[List[Any]]", 0.06906299889016917]], "kwargs": [], "name": [["str", 0.679697767165115], ["List[str]", 0.320302232834885]], "self": [], "test_name": [["str", 0.8108738788811821], ["Optional[str]", 0.09723917655370555]], "to_split": [["str", 0.597850673461987], ["Optional[str]", 0.4021493265380129]]}, "q_name": "Variable.__init__", "ret_exprs": [], "ret_type": "", "variables": {"delimiter": "", "name": "", "test_name": "", "to_split": ""}, "variables_p": {"delimiter": [["bytes", 0.24649504477061418], ["int", 0.17686898748536273], ["str", 0.12324752238530709], ["Dict[str, Any]", 0.08491128722763235], ["Union[Literal, str]", 0.07588435627046672]], "name": [["str", 0.57206634883378], ["Optional[str]", 0.20476354050469292], ["Dict[str, str]", 0.12703105819758384], ["List[str]", 0.09613905246394328]], "test_name": [["List[str]", 0.5182664847193545], ["str", 0.17783384438293753], ["list", 0.11917211601640253], ["dict", 0.09550101427930083], ["Dict[str, str]", 0.08922654060200441]], "to_split": [["str", 1.0]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[138, 4], [148, 90]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "get_value", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["hasattr", "self"], ["self", "_format_value", "fetch_variable", "key", "self", "name", "default_value", "self", "default_value", "test_name", "self", "test_name"], ["self", "_format_value", "fetch_variable", "key", "self", "name", "test_name", "self", "test_name"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "Variable.get_value", "ret_exprs": ["return self._format_value( fetch_variable( key=self.name, default_value=self.default_value, test_name=self.test_name, ))", "return self._format_value(fetch_variable(key=self.name, test_name=self.test_name))"], "ret_type": "", "ret_type_p": [["str", 0.8033132387529904], ["Optional[str]", 0.09910994053384238], ["bool", 0.09757682071316698]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[150, 4], [153, 36]], "fn_var_ln": {"default_value": [[153, 8], [153, 26]]}, "fn_var_occur": {"default_value": [["self", "default_value", "default"]]}, "name": "set_default", "params": {"default": "", "self": ""}, "params_descr": {"default": "", "self": ""}, "params_occur": {"default": [["self", "default_value", "default"]], "self": [["self", "default_value", "default"]]}, "params_p": {"args": [], "default": [["int", 0.498017098279559], ["float", 0.16482293149110344], ["Callable", 0.1363411568895303], ["Type", 0.09553995630812233]], "kwargs": [], "self": []}, "q_name": "Variable.set_default", "ret_exprs": [], "ret_type": "", "variables": {"default_value": ""}, "variables_p": {"default_value": [["str", 0.9999999999296202], ["int", 2.980168002474388e-11], ["float", 2.6078032491932333e-11], ["List[Optional[str]]", 1.4500344305716007e-11]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[155, 4], [160, 20]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "_format_value", "params": {"self": "", "value": ""}, "params_descr": {"self": "", "value": ""}, "params_occur": {"self": [["self", "to_split"], ["TypeError", "self", "name", "type", "value"], ["value", "split", "self", "delimiter"]], "value": [["type", "value", "str"], ["TypeError", "self", "name", "type", "value"], ["value", "split", "self", "delimiter"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "value": [["str", 0.9999999999999999]]}, "q_name": "Variable._format_value", "ret_exprs": ["return value.split(self.delimiter)", "return value"], "ret_type": "", "ret_type_p": [["list", 0.11747283454351318], ["Optional[str]", 0.1137645963316583], ["Set[str]", 0.10353460892833184], ["Optional[Tuple[str]]", 0.10341685995153112], ["bool", 0.0926239192227457], ["Optional[List[int]]", 0.0919498646000912], ["Optional[float]", 0.09064472263948897]], "variables": {}, "variables_p": {}}], "name": "Variable", "q_name": "Variable", "variables": {}, "variables_p": {}}, {"cls_lc": [[163, 0], [215, 31]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[170, 4], [173, 41]], "fn_var_ln": {"env_id": [[172, 8], [172, 19]], "test_name": [[173, 8], [173, 22]], "variables": [[171, 8], [171, 22]]}, "fn_var_occur": {"env_id": [["self", "env_id", "set_env_id"]], "test_name": [["self", "test_name", "_get_test_name"]], "variables": [["self", "variables", "set"]]}, "name": "__init__", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "variables", "set"], ["self", "env_id", "set_env_id"], ["self", "test_name", "_get_test_name"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "SystemTestContextBuilder.__init__", "ret_exprs": [], "ret_type": "", "variables": {"env_id": "", "test_name": "", "variables": ""}, "variables_p": {"env_id": [["str", 0.6942963406592967], ["Type[str]", 0.23081100820903488], ["IO[bytes]", 0.07489265113166849]], "test_name": [["str", 1.0000000000000002]], "variables": [["Dict[str, bool]", 0.21451572945575545], ["str", 0.19021822266276595], ["dict", 0.11378814915480169], ["list", 0.0931551670900319]]}}, {"docstring": {"func": "Register a variable to fetch from environment or cloud parameter store", "long_descr": null, "ret": null}, "fn_lc": [[175, 4], [202, 19]], "fn_var_ln": {"new_variable": [[186, 8], [186, 20]]}, "fn_var_occur": {"new_variable": [["new_variable", "Variable", "name", "variable_name", "to_split", "split_string", "delimiter", "delimiter", "test_name", "self", "test_name"], ["new_variable", "set_default", "kwargs"], ["self", "variables", "add", "new_variable"]]}, "name": "add_variable", "params": {"delimiter": "str | None", "kwargs": "", "self": "", "split_string": "builtins.bool", "variable_name": "builtins.str"}, "params_descr": {"delimiter": "", "kwargs": "", "self": "", "split_string": "", "variable_name": ""}, "params_occur": {"delimiter": [["new_variable", "Variable", "name", "variable_name", "to_split", "split_string", "delimiter", "delimiter", "test_name", "self", "test_name"]], "kwargs": [["new_variable", "set_default", "kwargs"]], "self": [["variable_name", "variable", "name", "variable", "self", "variables"], ["new_variable", "Variable", "name", "variable_name", "to_split", "split_string", "delimiter", "delimiter", "test_name", "self", "test_name"], ["self", "variables", "add", "new_variable"]], "split_string": [["new_variable", "Variable", "name", "variable_name", "to_split", "split_string", "delimiter", "delimiter", "test_name", "self", "test_name"]], "variable_name": [["variable_name", "variable", "name", "variable", "self", "variables"], ["ValueError", "variable_name"], ["new_variable", "Variable", "name", "variable_name", "to_split", "split_string", "delimiter", "delimiter", "test_name", "self", "test_name"]]}, "params_p": {"args": [], "delimiter": [["str", 0.9012270261041595], ["dict", 0.09877297389584049]], "kwargs": [], "self": [], "split_string": [["str", 0.9012270261041595], ["dict", 0.09877297389584049]], "variable_name": [["str", 0.7086573852745042], ["Optional[str]", 0.1053146105449492], ["dict", 0.09183530631776252]]}, "q_name": "SystemTestContextBuilder.add_variable", "ret_exprs": ["return self"], "ret_type": "", "ret_type_p": [["str", 0.15438596927982914], ["bool", 0.1434730855231521], ["Iterator", 0.09030324345256885], ["int", 0.07173654276157605]], "variables": {"new_variable": ""}, "variables_p": {"new_variable": [["Tuple[str]", 0.103359529172484], ["Tuple[Type[type], Any]", 0.09230539610674178], ["Tuple[Literal]", 0.09212094899053469], ["str", 0.07200666489732768], ["list", 0.07112065019077143]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[210, 8], [213, 65]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "variable_fetcher", "params": {"ti": ""}, "params_descr": {"ti": ""}, "params_occur": {"ti": [["ti", "xcom_push", "ENV_ID_KEY", "self", "env_id"], ["ti", "xcom_push", "variable", "name", "variable", "get_value"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "ti": [["str", 0.3737731302169146], ["purplship.providers.canadaposutils.Settings", 0.10038378978917528]]}, "q_name": "SystemTestContextBuilder.build.<locals>.variable_fetcher", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Build and return a TaskFlow task which will create an env_id and", "long_descr": "fetch requested variables. Storing everything in xcom for downstream\ntasks to use.", "ret": null}, "fn_lc": [[204, 4], [215, 31]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "build", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "SystemTestContextBuilder.build", "ret_exprs": ["return variable_fetcher"], "ret_type": "", "ret_type_p": [["Dict[str, Set[str]]", 0.08281055834252289], ["dict", 0.07891125354212904]], "variables": {}, "variables_p": {}}], "name": "SystemTestContextBuilder", "q_name": "SystemTestContextBuilder", "variables": {}, "variables_p": {}}], "funcs": [{"docstring": {"func": "Extracts the module name from the test module.", "long_descr": null, "ret": "The name of the test module that called the helper method."}, "fn_lc": [[59, 0], [70, 47]], "fn_var_ln": {"test_filename": [[67, 4], [67, 17]]}, "fn_var_occur": {"test_filename": [["test_filename", "builtins", "str", "frame", "filename", "frame", "inspect", "stack", "TEST_FILE_IDENTIFIER", "frame", "filename"], ["splitext", "basename", "test_filename"]]}, "name": "_get_test_name", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "_get_test_name", "ret_exprs": ["return splitext(basename(test_filename))[0]"], "ret_type": "builtins.str", "ret_type_p": [["str", 0.1268629224565004], ["bool", 0.1238430902870255], ["int", 0.0845461983336283]], "variables": {"test_filename": "builtins.str"}, "variables_p": {"test_filename": [["str", 1.0]]}}, {"docstring": {"func": "Verifies that a prospective Environment ID value fits requirements.", "long_descr": "An Environment ID for an AWS System test must be a lowercase alphanumeric\nstring which starts with a letter.", "ret": "A validated string cast to lowercase."}, "fn_lc": [[73, 0], [87, 25]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "_validate_env_id", "params": {"env_id": "builtins.str"}, "params_descr": {"env_id": "An Environment ID to validate."}, "params_occur": {"env_id": [["any", "char", "isupper", "char", "str", "env_id"], ["env_id", "isalnum", "env_id", "isalpha"], ["env_id", "lower"]]}, "params_p": {"args": [], "env_id": [["int", 0.7513508950877572], ["uuid.UUID", 0.0849416569127265], ["str", 0.08338002465956419]], "kwargs": []}, "q_name": "_validate_env_id", "ret_exprs": ["return env_id.lower()"], "ret_type": "builtins.str", "ret_type_p": [["str", 0.8226816592329748], ["int", 0.17731834076702505]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Test values are stored in the SSM Value as a JSON-encoded dict of key/value pairs.", "long_descr": null, "ret": "The value of the provided key from SSM"}, "fn_lc": [[90, 0], [110, 16]], "fn_var_ln": {"_test_name": [[97, 4], [97, 14]], "hook": [[98, 4], [98, 8]], "value": [[102, 8], [102, 13]]}, "fn_var_occur": {"_test_name": [["_test_name", "builtins", "str", "test_name", "test_name", "_get_test_name"], ["value", "json", "loads", "hook", "get_parameter_value", "_test_name", "key"]], "hook": [["hook", "SsmHook", "aws_conn_id", "None"], ["value", "json", "loads", "hook", "get_parameter_value", "_test_name", "key"]], "value": [["value", "builtins", "str"], ["value", "json", "loads", "hook", "get_parameter_value", "_test_name", "key"]]}, "name": "_fetch_from_ssm", "params": {"key": "builtins.str", "test_name": "str | None"}, "params_descr": {"key": "The key to search for within the returned Parameter Value.", "test_name": ""}, "params_occur": {"key": [["value", "json", "loads", "hook", "get_parameter_value", "_test_name", "key"]], "test_name": [["_test_name", "builtins", "str", "test_name", "test_name", "_get_test_name"]]}, "params_p": {"args": [], "key": [["str", 0.31261419068334056]], "kwargs": [], "test_name": [["str", 0.3834841711883251], ["Dict[str, Any]", 0.09358939123440599]]}, "q_name": "_fetch_from_ssm", "ret_exprs": ["return value"], "ret_type": "builtins.str", "ret_type_p": [["str", 0.4050689028466057], ["Type", 0.19814915224668814], ["Dict[str, int]", 0.09337047768129125]], "variables": {"_test_name": "builtins.str", "hook": "", "value": ""}, "variables_p": {"_test_name": [["str", 0.9999999999999999]], "hook": [["Dict[str, str]", 0.16583771622432006], ["str", 0.11785932364389705], ["int", 0.11348517665113093], ["bool", 0.10609369151800647], ["Dict[str, Any]", 0.09418437508901488]], "value": [["str", 1.0]]}}, {"docstring": {"func": "Given a Parameter name: first check for an existing Environment Variable,", "long_descr": "then check SSM for a value. If neither are available, fall back on the\noptional default value.", "ret": "The value of the parameter."}, "fn_lc": [[218, 0], [233, 16]], "fn_var_ln": {"value": [[230, 4], [230, 9]]}, "fn_var_occur": {"value": [["value", "str", "None", "os", "getenv", "key", "_fetch_from_ssm", "key", "test_name", "default_value"]]}, "name": "fetch_variable", "params": {"default_value": "str | None", "key": "builtins.str", "test_name": "str | None"}, "params_descr": {"default_value": "The default value to use if no value can be found.", "key": "The name of the Parameter to fetch a value for.", "test_name": "The system test name."}, "params_occur": {"default_value": [["value", "str", "None", "os", "getenv", "key", "_fetch_from_ssm", "key", "test_name", "default_value"]], "key": [["value", "str", "None", "os", "getenv", "key", "_fetch_from_ssm", "key", "test_name", "default_value"], ["ValueError", "NO_VALUE_MSG", "format", "key", "key"]], "test_name": [["value", "str", "None", "os", "getenv", "key", "_fetch_from_ssm", "key", "test_name", "default_value"]]}, "params_p": {"args": [], "default_value": [["str", 0.40399402543053486], ["Optional[str]", 0.1979640479430696], ["Optional[Set[str]]", 0.11539098590580572], ["Tuple[Optional[str], Optional[str]]", 0.09511180328119659]], "key": [["Optional[str]", 0.5101626044316772], ["str", 0.28032724931751496]], "kwargs": [], "test_name": [["str", 0.40399402543053486], ["Optional[str]", 0.1979640479430696], ["Optional[Set[str]]", 0.11539098590580572], ["Tuple[Optional[str], Optional[str]]", 0.09511180328119659]]}, "q_name": "fetch_variable", "ret_exprs": ["return value"], "ret_type": "builtins.str", "ret_type_p": [["str", 0.5801292950638919], ["list", 0.11893087129037365], ["T", 0.11384270159965772], ["Type", 0.09769535310555849], ["float", 0.08940177894051822]], "variables": {"value": "str | None"}, "variables_p": {"value": [["str", 0.18484613268304456], ["OrderedDict[str, Any]", 0.10928458369626187], ["Tuple[Literal, Literal]", 0.09024703019729546], ["List[str]", 0.08712963819748507], ["bool", 0.08680948125586822], ["Union[None, bytes, str]", 0.08664307267949078], ["Pattern[str]", 0.08432463228067574]]}}, {"docstring": {"func": "Retrieves or generates an Environment ID, validate that it is suitable,", "long_descr": "export it as an Environment Variable, and return it.\n\nIf an Environment ID has already been generated, use that.\nOtherwise, try to fetch it and export it as an Environment Variable.\nIf there is not one available to fetch then generate one and export it as an Environment Variable.", "ret": "A valid System Test Environment ID."}, "fn_lc": [[236, 0], [251, 17]], "fn_var_ln": {"env_id": [[248, 4], [248, 10]]}, "fn_var_occur": {"env_id": [["env_id", "builtins", "str", "fetch_variable", "ENV_ID_ENVIRON_KEY", "DEFAULT_ENV_ID"], ["env_id", "_validate_env_id", "env_id"], ["os", "environ", "ENV_ID_ENVIRON_KEY", "env_id"]]}, "name": "set_env_id", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "set_env_id", "ret_exprs": ["return env_id"], "ret_type": "builtins.str", "ret_type_p": [["str", 0.9059441223844086], ["int", 0.09405587761559149]], "variables": {"env_id": ""}, "variables_p": {"env_id": [["str", 0.9999999999999998]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[254, 0], [256, 68]], "fn_var_ln": {"task_runs": [[255, 4], [255, 13]]}, "fn_var_occur": {"task_runs": [["task_runs", "ti", "get_dagrun", "get_task_instances"], ["all", "_task", "state", "State", "FAILED", "_task", "task_runs"]]}, "name": "all_tasks_passed", "params": {"ti": ""}, "params_descr": {"ti": ""}, "params_occur": {"ti": [["task_runs", "ti", "get_dagrun", "get_task_instances"]]}, "params_p": {"args": [], "kwargs": [], "ti": [["int", 0.12466239771337508], ["\"User\"", 0.1056576840584839], ["List[str]", 0.09723069817795323]]}, "q_name": "all_tasks_passed", "ret_exprs": ["return all([_task.state != State.FAILED for _task in task_runs])"], "ret_type": "builtins.bool", "ret_type_p": [["bool", 0.6110056143614578]], "variables": {"task_runs": ""}, "variables_p": {"task_runs": [["Dict[str, Union[Any, bool, str]]", 0.2080425559859374], ["str", 0.2021609392442832], ["taskiapplication.models.task.Task", 0.10667286134789469], ["golem.task.task_api.EnvironmentTaskApiService", 0.10069985555863965], ["taskiinfrastructure.data.json.repositories.task_repository.JsonTaskRepository", 0.09939655757309372], ["int", 0.09042337965959764]]}}, {"docstring": {"func": "If all tasks in this dagrun have succeeded, then delete the associated logs.", "long_descr": "Otherwise, append the logs with a retention policy.  This allows the logs\nto be used for troubleshooting but assures they won't build up indefinitely.", "ret": null}, "fn_lc": [[260, 0], [287, 79]], "fn_var_ln": {"client": [[285, 8], [285, 14]]}, "fn_var_occur": {"client": [["client", "botocore", "client", "BaseClient", "boto3", "client"], ["client", "put_retention_policy", "logGroupName", "group", "retentionInDays"]]}, "name": "prune_logs", "params": {"force_delete": "builtins.bool", "logs": "builtins.list[builtins.tuple[builtins.str, str | None]]", "retry": "builtins.bool", "retry_times": "builtins.int", "ti": ""}, "params_descr": {"force_delete": "Whether to check log streams within the log group before\nremoval. If True, removes the log group and all its log streams inside it.", "logs": "A list of log_group/stream_prefix tuples to delete.", "retry": "Whether to retry if the log group/stream was not found. In some\ncases, the log group/stream is created seconds after the main resource has\nbeen created. By default, it retries for 3 times with a 5s waiting period.", "retry_times": "Number of retries.", "ti": "Used to check the status of the tasks. This gets pulled from the\nDAG's context and does not need to be passed manually."}, "params_occur": {"force_delete": [["_purge_logs", "logs", "force_delete", "retry", "retry_times"]], "logs": [["_purge_logs", "logs", "force_delete", "retry", "retry_times"]], "retry": [["_purge_logs", "logs", "force_delete", "retry", "retry_times"]], "retry_times": [["_purge_logs", "logs", "force_delete", "retry", "retry_times"]], "ti": [["all_tasks_passed", "ti"]]}, "params_p": {"args": [], "force_delete": [["str", 0.26394703008569864], ["logging.Logger", 0.2343962247410536], ["int", 0.1402371844341798], ["Optional[bool]", 0.08795066233295298], ["bytes", 0.08764894656330495]], "kwargs": [], "logs": [["str", 0.26394703008569864], ["logging.Logger", 0.2343962247410536], ["int", 0.1402371844341798], ["Optional[bool]", 0.08795066233295298], ["bytes", 0.08764894656330495]], "retry": [["str", 0.26394703008569864], ["logging.Logger", 0.2343962247410536], ["int", 0.1402371844341798], ["Optional[bool]", 0.08795066233295298], ["bytes", 0.08764894656330495]], "retry_times": [["str", 0.26394703008569864], ["logging.Logger", 0.2343962247410536], ["int", 0.1402371844341798], ["Optional[bool]", 0.08795066233295298], ["bytes", 0.08764894656330495]], "ti": [["str", 0.30623381118313453], ["List[str]", 0.11281133787746012], ["int", 0.09465191282858941], ["float", 0.09465191282858941]]}, "q_name": "prune_logs", "ret_exprs": [], "ret_type": "", "variables": {"client": "botocore.client.BaseClient"}, "variables_p": {"client": []}}, {"docstring": {"func": "Accepts a tuple in the format: ('log group name', 'log stream prefix').", "long_descr": "For each log group, it will delete any log streams matching the provided\nprefix then if the log group is empty, delete the group. If the group\nis not empty that indicates there are logs not generated by the test and\nthose are left intact. If `check_log_streams` is True, it will simply delete the log group regardless\nof log streams within that log group.", "ret": null}, "fn_lc": [[290, 0], [337, 13]], "fn_var_ln": {"client": [[312, 4], [312, 10]], "log_streams": [[317, 16], [317, 27]]}, "fn_var_occur": {"client": [["client", "botocore", "client", "BaseClient", "boto3", "client"], ["log_streams", "client", "describe_log_streams", "logGroupName", "group", "logStreamNamePrefix", "prefix"], ["client", "delete_log_stream", "logGroupName", "group", "logStreamName", "stream_name"], ["force_delete", "client", "describe_log_streams", "logGroupName", "group"], ["client", "delete_log_group", "logGroupName", "group"]], "log_streams": [["log_streams", "client", "describe_log_streams", "logGroupName", "group", "logStreamNamePrefix", "prefix"], ["stream", "stream", "log_streams"]]}, "name": "_purge_logs", "params": {"force_delete": "builtins.bool", "retry": "builtins.bool", "retry_times": "builtins.int", "test_logs": "builtins.list[builtins.tuple[builtins.str, str | None]]"}, "params_descr": {"force_delete": "Whether to check log streams within the log group before removal. If True,\nremoves the log group and all its log streams inside it", "retry": "Whether to retry if the log group/stream was not found. In some cases, the log group/stream\nis created seconds after the main resource has been created. By default, it retries for 3 times\nwith a 5s waiting period", "retry_times": "Number of retries", "test_logs": "A list of log_group/stream_prefix tuples to delete."}, "params_occur": {"force_delete": [["force_delete", "client", "describe_log_streams", "logGroupName", "group"], ["_purge_logs", "test_logs", "test_logs", "force_delete", "force_delete", "retry", "retry", "retry_times", "retry_times"]], "retry": [["retry", "retry_times", "e", "response"], ["_purge_logs", "test_logs", "test_logs", "force_delete", "force_delete", "retry", "retry", "retry_times", "retry_times"]], "retry_times": [["retry", "retry_times", "e", "response"], ["_purge_logs", "test_logs", "test_logs", "force_delete", "force_delete", "retry", "retry", "retry_times", "retry_times"]], "test_logs": [["_purge_logs", "test_logs", "test_logs", "force_delete", "force_delete", "retry", "retry", "retry_times", "retry_times"]]}, "params_p": {"args": [], "force_delete": [["bool", 0.1951431252549195], ["Dict[str, Any]", 0.11199480014155995], ["Optional[int]", 0.11143642277986335], ["Optional[Dict[str, Any]]", 0.09835437109243886], ["str", 0.09617922740969485], ["Optional[cmk.utils.type_defs.HostAddress]", 0.09617922740969485], ["dict", 0.09617922740969485]], "kwargs": [], "retry": [["bool", 0.3144355970296211], ["Optional[bytes]", 0.10843793858452627], ["dict", 0.0936335158158751], ["Dict[str, Any]", 0.09320875816352937], ["Optional[Dict[str, Any]]", 0.09007977729370441], ["List[Tuple[str, ...]]", 0.08885663222850648]], "retry_times": [["bool", 0.3144355970296211], ["Optional[bytes]", 0.10843793858452627], ["dict", 0.0936335158158751], ["Dict[str, Any]", 0.09320875816352937], ["Optional[Dict[str, Any]]", 0.09007977729370441], ["List[Tuple[str, ...]]", 0.08885663222850648]], "test_logs": [["List[str]", 0.533356393380227], ["str", 0.3616670829553181], ["list", 0.10497652366445506]]}, "q_name": "_purge_logs", "ret_exprs": [], "ret_type": "None", "variables": {"client": "botocore.client.BaseClient", "log_streams": ""}, "variables_p": {"client": [], "log_streams": [["str", 0.35761790661763465], ["logging.Logger", 0.2419613755613672], ["Set[str]", 0.11819692825224934], ["Union[Literal, str]", 0.1059679117373435], ["Dict[str, Union[Any, Any, Any, Any]]", 0.08273341486425462]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[341, 0], [342, 28]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "split_string", "params": {"string": ""}, "params_descr": {"string": ""}, "params_occur": {"string": [["string", "split"]]}, "params_p": {"args": [], "kwargs": [], "string": [["str", 1.0]]}, "q_name": "split_string", "ret_exprs": ["return string.split(\",\")"], "ret_type": "", "ret_type_p": [["str", 1.0]], "variables": {}, "variables_p": {}}], "imports": ["__future__", "annotations", "inspect", "json", "logging", "os", "os", "path", "basename", "splitext", "time", "sleep", "uuid", "uuid4", "boto3", "botocore", "client", "BaseClient", "botocore", "exceptions", "ClientError", "NoCredentialsError", "airflow", "decorators", "task", "airflow", "providers", "amazon", "aws", "hooks", "ssm", "SsmHook", "airflow", "utils", "state", "State", "airflow", "utils", "trigger_rule", "TriggerRule"], "mod_var_ln": {"DEFAULT_ENV_ID": [[40, 0], [40, 14]], "DEFAULT_ENV_ID_LEN": [[39, 0], [39, 18]], "DEFAULT_ENV_ID_PREFIX": [[38, 0], [38, 21]], "ENV_ID_ENVIRON_KEY": [[36, 0], [36, 18]], "ENV_ID_KEY": [[37, 0], [37, 10]], "INVALID_ENV_ID_MSG": [[46, 0], [46, 18]], "LOWERCASE_ENV_ID_MSG": [[50, 0], [50, 20]], "NO_VALUE_MSG": [[54, 0], [54, 12]], "PURGE_LOGS_INTERVAL_PERIOD": [[41, 0], [41, 26]], "TEST_FILE_IDENTIFIER": [[44, 0], [44, 20]], "log": [[56, 0], [56, 3]]}, "mod_var_occur": {"DEFAULT_ENV_ID": [["env_id", "builtins", "str", "fetch_variable", "ENV_ID_ENVIRON_KEY", "DEFAULT_ENV_ID"]], "DEFAULT_ENV_ID_LEN": [["DEFAULT_ENV_ID", "builtins", "str", "DEFAULT_ENV_ID_PREFIX", "str", "uuid4", "DEFAULT_ENV_ID_LEN"]], "DEFAULT_ENV_ID_PREFIX": [["DEFAULT_ENV_ID", "builtins", "str", "DEFAULT_ENV_ID_PREFIX", "str", "uuid4", "DEFAULT_ENV_ID_LEN"]], "ENV_ID_ENVIRON_KEY": [["env_id", "builtins", "str", "fetch_variable", "ENV_ID_ENVIRON_KEY", "DEFAULT_ENV_ID"], ["os", "environ", "ENV_ID_ENVIRON_KEY", "env_id"]], "ENV_ID_KEY": [["ti", "xcom_push", "ENV_ID_KEY", "self", "env_id"]], "INVALID_ENV_ID_MSG": [["ValueError", "INVALID_ENV_ID_MSG"]], "LOWERCASE_ENV_ID_MSG": [["print", "LOWERCASE_ENV_ID_MSG"]], "NO_VALUE_MSG": [["ValueError", "NO_VALUE_MSG", "format", "key", "key"]], "PURGE_LOGS_INTERVAL_PERIOD": [["sleep", "PURGE_LOGS_INTERVAL_PERIOD"]], "TEST_FILE_IDENTIFIER": [["test_filename", "builtins", "str", "frame", "filename", "frame", "inspect", "stack", "TEST_FILE_IDENTIFIER", "frame", "filename"]], "log": [["log", "info", "e"], ["log", "info", "e"], ["log", "info", "e"]]}, "no_types_annot": {"D": 38, "I": 0, "U": 33}, "session_id": "fDib-zk8D9L0C2IwutlKlzhc_DFFLN-MgYr2LZhsen8", "set": null, "tc": [false, null], "type_annot_cove": 0.54, "typed_seq": "", "untyped_seq": "", "variables": {"DEFAULT_ENV_ID": "builtins.str", "DEFAULT_ENV_ID_LEN": "builtins.int", "DEFAULT_ENV_ID_PREFIX": "builtins.str", "ENV_ID_ENVIRON_KEY": "builtins.str", "ENV_ID_KEY": "builtins.str", "INVALID_ENV_ID_MSG": "builtins.str", "LOWERCASE_ENV_ID_MSG": "builtins.str", "NO_VALUE_MSG": "builtins.str", "PURGE_LOGS_INTERVAL_PERIOD": "", "TEST_FILE_IDENTIFIER": "builtins.str", "log": ""}, "variables_p": {"DEFAULT_ENV_ID": [["str", 0.9999999999999999]], "DEFAULT_ENV_ID_LEN": [["str", 1.0]], "DEFAULT_ENV_ID_PREFIX": [["str", 1.0]], "ENV_ID_ENVIRON_KEY": [["str", 1.0]], "ENV_ID_KEY": [["str", 1.0000000000000002]], "INVALID_ENV_ID_MSG": [["str", 0.8846443758355316], ["Type[str]", 0.11535562416446833]], "LOWERCASE_ENV_ID_MSG": [["int", 0.6579655355525477], ["str", 0.3420344644474523]], "NO_VALUE_MSG": [["str", 0.45576017969654387], ["Type[bytes]", 0.17403757463610936], ["Pattern[str]", 0.10385681119929041], ["Tuple[Literal, None]", 0.09119418579697164], ["Dict[str, int]", 0.0881902123393722], ["List[str]", 0.08696103633171255]], "PURGE_LOGS_INTERVAL_PERIOD": [["Dict[str, float]", 0.5242493965832494], ["Dict[str, Union[Any, Any, Any, str]]", 0.12111916519066725], ["str", 0.09616175560755821], ["Dict[str, str]", 0.08579564111009415], ["Tuple[Literal, Literal, Literal]", 0.08574077390168446]], "TEST_FILE_IDENTIFIER": [["str", 0.8634711293310959]], "log": [["logging.Logger", 0.9999999999999998]]}}}