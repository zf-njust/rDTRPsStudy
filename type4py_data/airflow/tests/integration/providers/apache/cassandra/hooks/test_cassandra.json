{"error": null, "response": {"classes": [{"cls_lc": [[37, 0], [234, 31]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[38, 4], [72, 31]], "fn_var_ln": {"cqls": [[61, 8], [61, 12]], "hook": [[59, 8], [59, 12]], "session": [[60, 8], [60, 15]]}, "fn_var_occur": {"cqls": [], "hook": [["hook", "CassandraHook"], ["session", "hook", "get_conn"], ["hook", "shutdown_cluster"]], "session": [["session", "hook", "get_conn"], ["session", "execute", "cql"], ["session", "shutdown"]]}, "name": "setup_method", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestCassandraHook.setup_method", "ret_exprs": [], "ret_type": "", "variables": {"cqls": "", "hook": "", "session": ""}, "variables_p": {"cqls": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "hook": [["str", 0.48184596432388416], ["raiden.utils.Address", 0.13616162639473933], ["bool", 0.08801769858503992]], "session": [["Optional[str]", 0.33052575528946654], ["SMSShell.models.session.Session", 0.07012204870457664]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[74, 4], [85, 108]], "fn_var_ln": {"return_value": [[76, 12], [76, 42]]}, "fn_var_occur": {"return_value": [["mock_cluster_ctor", "return_value", "None"]]}, "name": "test_get_conn", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestCassandraHook.test_get_conn", "ret_exprs": [], "ret_type": "", "variables": {"return_value": ""}, "variables_p": {"return_value": [["List[str]", 0.16544419770216628], ["Optional[bytes]", 0.11421579233741967], ["str", 0.10592257460104532], ["Dict[str, Union[Any, Any, Any, Any]]", 0.09310094270014513], ["List[Union[Any, Any, Any]]", 0.09310094270014513], ["List[Dict[str, str]]", 0.08976871927140356], ["list", 0.08784034965360603]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[87, 4], [93, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_get_lb_policy_with_no_args", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "_assert_get_lb_policy", "RoundRobinPolicy"], ["self", "_assert_get_lb_policy", "DCAwareRoundRobinPolicy"], ["self", "_assert_get_lb_policy", "TokenAwarePolicy", "expected_child_policy_type", "RoundRobinPolicy"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestCassandraHook.test_get_lb_policy_with_no_args", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[95, 4], [122, 13]], "fn_var_ln": {"fake_addr_info": [[104, 8], [104, 22]]}, "fn_var_occur": {"fake_addr_info": [["mock", "patch", "return_value", "fake_addr_info"], ["mock", "patch", "return_value", "fake_addr_info"]]}, "name": "test_get_lb_policy_with_args", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "_assert_get_lb_policy", "DCAwareRoundRobinPolicy"], ["self", "_assert_get_lb_policy", "WhiteListRoundRobinPolicy"], ["self", "_assert_get_lb_policy", "TokenAwarePolicy", "expected_child_policy_type", "WhiteListRoundRobinPolicy"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestCassandraHook.test_get_lb_policy_with_args", "ret_exprs": [], "ret_type": "", "variables": {"fake_addr_info": ""}, "variables_p": {"fake_addr_info": [["str", 0.35540538977572467], ["int", 0.2346864242749528], ["List[Dict[str, str]]", 0.08380995285487582]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[124, 4], [137, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_get_lb_policy_invalid_policy", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "_assert_get_lb_policy", "RoundRobinPolicy"], ["self", "_assert_get_lb_policy", "TokenAwarePolicy", "expected_child_policy_type", "RoundRobinPolicy"], ["self", "_assert_get_lb_policy", "TokenAwarePolicy", "expected_child_policy_type", "RoundRobinPolicy"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestCassandraHook.test_get_lb_policy_invalid_policy", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[139, 4], [150, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_get_lb_policy_no_host_for_allow_list", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "_assert_get_lb_policy", "WhiteListRoundRobinPolicy", "should_throw", "True"], ["self", "_assert_get_lb_policy", "TokenAwarePolicy", "expected_child_policy_type", "RoundRobinPolicy", "should_throw", "True"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestCassandraHook.test_get_lb_policy_no_host_for_allow_list", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[152, 4], [168, 37]], "fn_var_ln": {"policy": [[162, 12], [162, 18]], "thrown": [[167, 12], [167, 18]]}, "fn_var_occur": {"policy": [["policy", "CassandraHook", "get_lb_policy", "policy_name", "policy_args"], ["isinstance", "policy", "expected_policy_type"], ["isinstance", "policy", "_child_policy", "expected_child_policy_type"]], "thrown": [["thrown", "False"], ["thrown", "True"], ["should_throw", "thrown"]]}, "name": "_assert_get_lb_policy", "params": {"expected_child_policy_type": "", "expected_policy_type": "", "policy_args": "", "policy_name": "", "self": "", "should_throw": ""}, "params_descr": {"expected_child_policy_type": "", "expected_policy_type": "", "policy_args": "", "policy_name": "", "self": "", "should_throw": ""}, "params_occur": {"expected_child_policy_type": [["isinstance", "policy", "_child_policy", "expected_child_policy_type"]], "expected_policy_type": [["isinstance", "policy", "expected_policy_type"]], "policy_args": [["policy", "CassandraHook", "get_lb_policy", "policy_name", "policy_args"]], "policy_name": [["policy", "CassandraHook", "get_lb_policy", "policy_name", "policy_args"]], "self": [], "should_throw": [["should_throw", "thrown"]]}, "params_p": {"args": [], "expected_child_policy_type": [["str", 0.5912598228453979], ["int", 0.14210560215128296], ["Optional[str]", 0.0908700130278927]], "expected_policy_type": [["str", 0.6944806622388694], ["Set[mtg_ssm.scryfall.models.ScrySetType]", 0.12075064668446484], ["audiopyle.lib.models.compressed_feature.CompressionType", 0.09292079337694267], ["Dict[str, str]", 0.0918478976997231]], "kwargs": [], "policy_args": [["str", 0.48224506179878535], ["Type", 0.11475891440359365], ["Set[mtg_ssm.scryfall.models.ScrySetType]", 0.10224948202351741], ["Type[Exception]", 0.09447331471263207], ["Dict[str, str]", 0.0877969498526813]], "policy_name": [["str", 0.48224506179878535], ["Type", 0.11475891440359365], ["Set[mtg_ssm.scryfall.models.ScrySetType]", 0.10224948202351741], ["Type[Exception]", 0.09447331471263207], ["Dict[str, str]", 0.0877969498526813]], "self": [], "should_throw": [["str", 0.7870650789704061], ["int", 0.12399281399281406]]}, "q_name": "TestCassandraHook._assert_get_lb_policy", "ret_exprs": [], "ret_type": "", "variables": {"policy": "", "thrown": ""}, "variables_p": {"policy": [["Dict[str, Dict[str, Any]]", 0.10374599974541882], ["Anaconda3.Lib.site-packages.conda.models.match_spec.MatchSpec", 0.09715762390421508], ["str", 0.09209691869725607], ["Tuple[Literal, Literal, Literal]", 0.08507991095744812]], "thrown": [["list", 0.6666666666416292], ["int", 0.3333333333208146], ["str", 1.581340141885634e-11], ["bool", 1.3613298750341383e-11], ["List[str]", 3.511580396818342e-12]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[170, 4], [185, 31]], "fn_var_ln": {"cqls": [[173, 8], [173, 12]], "hook": [[171, 8], [171, 12]], "session": [[172, 8], [172, 15]]}, "fn_var_occur": {"cqls": [], "hook": [["hook", "CassandraHook"], ["session", "hook", "get_conn"], ["hook", "record_exists"], ["hook", "record_exists"], ["hook", "shutdown_cluster"]], "session": [["session", "hook", "get_conn"], ["session", "execute", "cql"], ["session", "shutdown"]]}, "name": "test_record_exists_with_keyspace_from_cql", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestCassandraHook.test_record_exists_with_keyspace_from_cql", "ret_exprs": [], "ret_type": "", "variables": {"cqls": "", "hook": "", "session": ""}, "variables_p": {"cqls": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "hook": [["str", 0.48184596432388416], ["raiden.utils.Address", 0.13616162639473933], ["bool", 0.08801769858503992]], "session": [["Optional[str]", 0.33052575528946654], ["SMSShell.models.session.Session", 0.07012204870457664]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[187, 4], [202, 31]], "fn_var_ln": {"cqls": [[190, 8], [190, 12]], "hook": [[188, 8], [188, 12]], "session": [[189, 8], [189, 15]]}, "fn_var_occur": {"cqls": [], "hook": [["hook", "CassandraHook"], ["session", "hook", "get_conn"], ["hook", "record_exists"], ["hook", "record_exists"], ["hook", "shutdown_cluster"]], "session": [["session", "hook", "get_conn"], ["session", "execute", "cql"], ["session", "shutdown"]]}, "name": "test_record_exists_with_keyspace_from_session", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestCassandraHook.test_record_exists_with_keyspace_from_session", "ret_exprs": [], "ret_type": "", "variables": {"cqls": "", "hook": "", "session": ""}, "variables_p": {"cqls": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "hook": [["str", 0.48184596432388416], ["raiden.utils.Address", 0.13616162639473933], ["bool", 0.08801769858503992]], "session": [["Optional[str]", 0.33052575528946654], ["SMSShell.models.session.Session", 0.07012204870457664]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[204, 4], [218, 31]], "fn_var_ln": {"cqls": [[207, 8], [207, 12]], "hook": [[205, 8], [205, 12]], "session": [[206, 8], [206, 15]]}, "fn_var_occur": {"cqls": [], "hook": [["hook", "CassandraHook"], ["session", "hook", "get_conn"], ["hook", "table_exists"], ["hook", "table_exists"], ["hook", "shutdown_cluster"]], "session": [["session", "hook", "get_conn"], ["session", "execute", "cql"], ["session", "shutdown"]]}, "name": "test_table_exists_with_keyspace_from_cql", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestCassandraHook.test_table_exists_with_keyspace_from_cql", "ret_exprs": [], "ret_type": "", "variables": {"cqls": "", "hook": "", "session": ""}, "variables_p": {"cqls": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "hook": [["str", 0.48299075486920073], ["raiden.utils.Address", 0.15899649239585778], ["bool", 0.09315222775049987]], "session": [["Optional[str]", 0.33052575528946654], ["SMSShell.models.session.Session", 0.07012204870457664]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[220, 4], [234, 31]], "fn_var_ln": {"cqls": [[223, 8], [223, 12]], "hook": [[221, 8], [221, 12]], "session": [[222, 8], [222, 15]]}, "fn_var_occur": {"cqls": [], "hook": [["hook", "CassandraHook"], ["session", "hook", "get_conn"], ["hook", "table_exists"], ["hook", "table_exists"], ["hook", "shutdown_cluster"]], "session": [["session", "hook", "get_conn"], ["session", "execute", "cql"], ["session", "shutdown"]]}, "name": "test_table_exists_with_keyspace_from_session", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestCassandraHook.test_table_exists_with_keyspace_from_session", "ret_exprs": [], "ret_type": "", "variables": {"cqls": "", "hook": "", "session": ""}, "variables_p": {"cqls": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "hook": [["str", 0.48299075486920073], ["raiden.utils.Address", 0.15899649239585778], ["bool", 0.09315222775049987]], "session": [["Optional[str]", 0.33052575528946654], ["SMSShell.models.session.Session", 0.07012204870457664]]}}], "name": "TestCassandraHook", "q_name": "TestCassandraHook", "variables": {}, "variables_p": {}}], "funcs": [], "imports": ["__future__", "annotations", "unittest", "mock", "pytest", "cassandra", "cluster", "Cluster", "cassandra", "policies", "DCAwareRoundRobinPolicy", "RoundRobinPolicy", "TokenAwarePolicy", "WhiteListRoundRobinPolicy", "airflow", "models", "Connection", "airflow", "providers", "apache", "cassandra", "hooks", "cassandra", "CassandraHook", "airflow", "utils", "db"], "mod_var_ln": {}, "mod_var_occur": {}, "no_types_annot": {"D": 0, "I": 0, "U": 35}, "session_id": "cI-T1eNE8lM2WwzJ5rz9PWS7lZU79RNwzBxCwNHBJtQ", "set": null, "tc": [false, null], "type_annot_cove": 0.0, "typed_seq": "", "untyped_seq": "", "variables": {}, "variables_p": {}}}