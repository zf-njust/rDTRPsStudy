{"error": null, "response": {"classes": [{"cls_lc": [[63, 0], [314, 47]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[64, 4], [85, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "setup_method", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestImapHook.setup_method", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[88, 4], [96, 47]], "fn_var_ln": {"mock_conn": [[89, 8], [89, 17]]}, "fn_var_occur": {"mock_conn": [["mock_conn", "_create_fake_imap", "mock_imaplib"], ["mock_conn", "login", "assert_called_once_with"], ["mock_conn", "logout", "call_count"]]}, "name": "test_connect_and_disconnect", "params": {"mock_imaplib": "", "self": ""}, "params_descr": {"mock_imaplib": "", "self": ""}, "params_occur": {"mock_imaplib": [["mock_conn", "_create_fake_imap", "mock_imaplib"], ["mock_imaplib", "IMAP4_SSL", "assert_called_once_with"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_imaplib": [["unittesmock.Mock", 0.20353648818570502]], "self": []}, "q_name": "TestImapHook.test_connect_and_disconnect", "ret_exprs": [], "ret_type": "", "variables": {"mock_conn": ""}, "variables_p": {"mock_conn": [["Dict[str, Union[Any, Any]]", 0.16612615108966333], ["str", 0.15954195535322546]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[99, 4], [107, 47]], "fn_var_ln": {"mock_conn": [[100, 8], [100, 17]]}, "fn_var_occur": {"mock_conn": [["mock_conn", "_create_fake_imap", "mock_imaplib", "use_ssl", "False"], ["mock_conn", "login", "assert_called_once_with"], ["mock_conn", "logout", "call_count"]]}, "name": "test_connect_and_disconnect_via_nonssl", "params": {"mock_imaplib": "", "self": ""}, "params_descr": {"mock_imaplib": "", "self": ""}, "params_occur": {"mock_imaplib": [["mock_conn", "_create_fake_imap", "mock_imaplib", "use_ssl", "False"], ["mock_imaplib", "IMAP4", "assert_called_once_with"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_imaplib": [["unittesmock.Mock", 0.2929098425947906], ["mock.MagicMock", 0.12404242114752724]], "self": []}, "q_name": "TestImapHook.test_connect_and_disconnect_via_nonssl", "ret_exprs": [], "ret_type": "", "variables": {"mock_conn": ""}, "variables_p": {"mock_conn": [["unittesmock.Mock", 0.6883608765862321], ["Dict[str, str]", 0.11307162059125142]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[110, 4], [116, 38]], "fn_var_ln": {"has_attachment_in_inbox": [[114, 12], [114, 35]]}, "fn_var_occur": {"has_attachment_in_inbox": [["has_attachment_in_inbox", "imap_hook", "has_mail_attachment"]]}, "name": "test_has_mail_attachment_found", "params": {"mock_imaplib": "", "self": ""}, "params_descr": {"mock_imaplib": "", "self": ""}, "params_occur": {"mock_imaplib": [["_create_fake_imap", "mock_imaplib", "with_mail", "True"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_imaplib": [], "self": []}, "q_name": "TestImapHook.test_has_mail_attachment_found", "ret_exprs": [], "ret_type": "", "variables": {"has_attachment_in_inbox": ""}, "variables_p": {"has_attachment_in_inbox": [["int", 0.6633399097124602], ["Dict[str, Union[Any, str]]", 0.13389485094936351], ["str", 0.06858175863649962], ["list", 0.06594992289155217], ["List[Tuple[Any, str]]", 0.03532511114402654], ["bool", 0.032908446666097886]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[119, 4], [125, 42]], "fn_var_ln": {"has_attachment_in_inbox": [[123, 12], [123, 35]]}, "fn_var_occur": {"has_attachment_in_inbox": [["has_attachment_in_inbox", "imap_hook", "has_mail_attachment"]]}, "name": "test_has_mail_attachment_not_found", "params": {"mock_imaplib": "", "self": ""}, "params_descr": {"mock_imaplib": "", "self": ""}, "params_occur": {"mock_imaplib": [["_create_fake_imap", "mock_imaplib", "with_mail", "True"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_imaplib": [], "self": []}, "q_name": "TestImapHook.test_has_mail_attachment_not_found", "ret_exprs": [], "ret_type": "", "variables": {"has_attachment_in_inbox": ""}, "variables_p": {"has_attachment_in_inbox": [["int", 0.6633399097124602], ["Dict[str, Union[Any, str]]", 0.13389485094936351], ["str", 0.06858175863649962], ["list", 0.06594992289155217], ["List[Tuple[Any, str]]", 0.03532511114402654], ["bool", 0.032908446666097886]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[128, 4], [134, 38]], "fn_var_ln": {"has_attachment_in_inbox": [[132, 12], [132, 35]]}, "fn_var_occur": {"has_attachment_in_inbox": [["has_attachment_in_inbox", "imap_hook", "has_mail_attachment", "name", "check_regex", "True"]]}, "name": "test_has_mail_attachment_with_regex_found", "params": {"mock_imaplib": "", "self": ""}, "params_descr": {"mock_imaplib": "", "self": ""}, "params_occur": {"mock_imaplib": [["_create_fake_imap", "mock_imaplib", "with_mail", "True"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_imaplib": [], "self": []}, "q_name": "TestImapHook.test_has_mail_attachment_with_regex_found", "ret_exprs": [], "ret_type": "", "variables": {"has_attachment_in_inbox": ""}, "variables_p": {"has_attachment_in_inbox": [["int", 0.420129429679718], ["str", 0.28671810409521664], ["Optional[float]", 0.10428275304444445], ["float", 0.09916101684330889], ["complex", 0.08970869633731197]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[137, 4], [143, 42]], "fn_var_ln": {"has_attachment_in_inbox": [[141, 12], [141, 35]]}, "fn_var_occur": {"has_attachment_in_inbox": [["has_attachment_in_inbox", "imap_hook", "has_mail_attachment", "name", "check_regex", "True"]]}, "name": "test_has_mail_attachment_with_regex_not_found", "params": {"mock_imaplib": "", "self": ""}, "params_descr": {"mock_imaplib": "", "self": ""}, "params_occur": {"mock_imaplib": [["_create_fake_imap", "mock_imaplib", "with_mail", "True"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_imaplib": [], "self": []}, "q_name": "TestImapHook.test_has_mail_attachment_with_regex_not_found", "ret_exprs": [], "ret_type": "", "variables": {"has_attachment_in_inbox": ""}, "variables_p": {"has_attachment_in_inbox": [["int", 0.420129429679718], ["str", 0.28671810409521664], ["Optional[float]", 0.10428275304444445], ["float", 0.09916101684330889], ["complex", 0.08970869633731197]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[146, 4], [153, 93]], "fn_var_ln": {"mail_filter": [[148, 8], [148, 19]]}, "fn_var_occur": {"mail_filter": [["imap_hook", "has_mail_attachment", "name", "mail_filter", "mail_filter"], ["mock_imaplib", "IMAP4_SSL", "return_value", "search", "assert_called_once_with", "None", "mail_filter"]]}, "name": "test_has_mail_attachment_with_mail_filter", "params": {"mock_imaplib": "", "self": ""}, "params_descr": {"mock_imaplib": "", "self": ""}, "params_occur": {"mock_imaplib": [["_create_fake_imap", "mock_imaplib", "with_mail", "True"], ["mock_imaplib", "IMAP4_SSL", "return_value", "search", "assert_called_once_with", "None", "mail_filter"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_imaplib": [["unittesmock.Mock", 0.28752734176277706], ["mock.MagicMock", 0.09793326145950092]], "self": []}, "q_name": "TestImapHook.test_has_mail_attachment_with_mail_filter", "ret_exprs": [], "ret_type": "", "variables": {"mail_filter": ""}, "variables_p": {"mail_filter": [["cmk.gui.plugins.views.utils.PainterOptions", 0.8055736459625178], ["Dict[str, Union[int, str]]", 0.1944263540374822]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[156, 4], [162, 79]], "fn_var_ln": {"attachments_in_inbox": [[160, 12], [160, 32]]}, "fn_var_occur": {"attachments_in_inbox": [["attachments_in_inbox", "imap_hook", "retrieve_mail_attachments"]]}, "name": "test_retrieve_mail_attachments_found", "params": {"mock_imaplib": "", "self": ""}, "params_descr": {"mock_imaplib": "", "self": ""}, "params_occur": {"mock_imaplib": [["_create_fake_imap", "mock_imaplib", "with_mail", "True"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_imaplib": [], "self": []}, "q_name": "TestImapHook.test_retrieve_mail_attachments_found", "ret_exprs": [], "ret_type": "", "variables": {"attachments_in_inbox": ""}, "variables_p": {"attachments_in_inbox": [["int", 0.7286992671089838], ["str", 0.1826575835746171], ["T", 0.08864314931639902]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[165, 4], [170, 64]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_retrieve_mail_attachments_not_found", "params": {"mock_imaplib": "", "self": ""}, "params_descr": {"mock_imaplib": "", "self": ""}, "params_occur": {"mock_imaplib": [["_create_fake_imap", "mock_imaplib", "with_mail", "True"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_imaplib": [], "self": []}, "q_name": "TestImapHook.test_retrieve_mail_attachments_not_found", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[173, 4], [181, 79]], "fn_var_ln": {"attachments_in_inbox": [[177, 12], [177, 32]]}, "fn_var_occur": {"attachments_in_inbox": [["attachments_in_inbox", "imap_hook", "retrieve_mail_attachments", "name", "check_regex", "True"]]}, "name": "test_retrieve_mail_attachments_with_regex_found", "params": {"mock_imaplib": "", "self": ""}, "params_descr": {"mock_imaplib": "", "self": ""}, "params_occur": {"mock_imaplib": [["_create_fake_imap", "mock_imaplib", "with_mail", "True"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_imaplib": [], "self": []}, "q_name": "TestImapHook.test_retrieve_mail_attachments_with_regex_found", "ret_exprs": [], "ret_type": "", "variables": {"attachments_in_inbox": ""}, "variables_p": {"attachments_in_inbox": [["int", 0.7012812600117394], ["Dict[str, int]", 0.1040987556625439], ["Dict[str, Union[int, Any]]", 0.10065824780714545], ["bool", 0.0939617365185714]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[184, 4], [192, 17]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_retrieve_mail_attachments_with_regex_not_found", "params": {"mock_imaplib": "", "self": ""}, "params_descr": {"mock_imaplib": "", "self": ""}, "params_occur": {"mock_imaplib": [["_create_fake_imap", "mock_imaplib", "with_mail", "True"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_imaplib": [], "self": []}, "q_name": "TestImapHook.test_retrieve_mail_attachments_with_regex_not_found", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[195, 4], [201, 79]], "fn_var_ln": {"attachments_in_inbox": [[199, 12], [199, 32]]}, "fn_var_occur": {"attachments_in_inbox": [["attachments_in_inbox", "imap_hook", "retrieve_mail_attachments", "name", "latest_only", "True"]]}, "name": "test_retrieve_mail_attachments_latest_only", "params": {"mock_imaplib": "", "self": ""}, "params_descr": {"mock_imaplib": "", "self": ""}, "params_occur": {"mock_imaplib": [["_create_fake_imap", "mock_imaplib", "with_mail", "True"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_imaplib": [], "self": []}, "q_name": "TestImapHook.test_retrieve_mail_attachments_latest_only", "ret_exprs": [], "ret_type": "", "variables": {"attachments_in_inbox": ""}, "variables_p": {"attachments_in_inbox": [["int", 0.6776890695138384], ["Optional[str]", 0.21993355636333717]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[204, 4], [211, 93]], "fn_var_ln": {"mail_filter": [[206, 8], [206, 19]]}, "fn_var_occur": {"mail_filter": [["imap_hook", "retrieve_mail_attachments", "name", "mail_filter", "mail_filter"], ["mock_imaplib", "IMAP4_SSL", "return_value", "search", "assert_called_once_with", "None", "mail_filter"]]}, "name": "test_retrieve_mail_attachments_with_mail_filter", "params": {"mock_imaplib": "", "self": ""}, "params_descr": {"mock_imaplib": "", "self": ""}, "params_occur": {"mock_imaplib": [["_create_fake_imap", "mock_imaplib", "with_mail", "True"], ["mock_imaplib", "IMAP4_SSL", "return_value", "search", "assert_called_once_with", "None", "mail_filter"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_imaplib": [["unittesmock.Mock", 0.09747049477828586], ["mock.MagicMock", 0.09123464989274155]], "self": []}, "q_name": "TestImapHook.test_retrieve_mail_attachments_with_mail_filter", "ret_exprs": [], "ret_type": "", "variables": {"mail_filter": ""}, "variables_p": {"mail_filter": [["cmk.gui.plugins.views.utils.PainterOptions", 0.29911092672837264], ["Dict[Any, str]", 0.08983805477328916]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[215, 4], [222, 92]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_download_mail_attachments_found", "params": {"mock_imaplib": "", "mock_open_method": "", "self": ""}, "params_descr": {"mock_imaplib": "", "mock_open_method": "", "self": ""}, "params_occur": {"mock_imaplib": [["_create_fake_imap", "mock_imaplib", "with_mail", "True"]], "mock_open_method": [["mock_open_method", "assert_called_once_with"], ["mock_open_method", "return_value", "write", "assert_called_once_with"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_imaplib": [], "mock_open_method": [["mock.Mock", 0.1200981300056893], ["unittesmock.Mock", 0.11789007070625147]], "self": []}, "q_name": "TestImapHook.test_download_mail_attachments_found", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[226, 4], [234, 63]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_download_mail_attachments_not_found", "params": {"mock_imaplib": "", "mock_open_method": "", "self": ""}, "params_descr": {"mock_imaplib": "", "mock_open_method": "", "self": ""}, "params_occur": {"mock_imaplib": [["_create_fake_imap", "mock_imaplib", "with_mail", "True"]], "mock_open_method": [["mock_open_method", "assert_not_called"], ["mock_open_method", "return_value", "write", "assert_not_called"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_imaplib": [], "mock_open_method": [["mock.Mock", 0.12007310917306264], ["unittesmock.Mock", 0.11771020551900417]], "self": []}, "q_name": "TestImapHook.test_download_mail_attachments_not_found", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[238, 4], [247, 92]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_download_mail_attachments_with_regex_found", "params": {"mock_imaplib": "", "mock_open_method": "", "self": ""}, "params_descr": {"mock_imaplib": "", "mock_open_method": "", "self": ""}, "params_occur": {"mock_imaplib": [["_create_fake_imap", "mock_imaplib", "with_mail", "True"]], "mock_open_method": [["mock_open_method", "assert_called_once_with"], ["mock_open_method", "return_value", "write", "assert_called_once_with"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_imaplib": [], "mock_open_method": [["mock.Mock", 0.11837608642030421], ["unittesmock.Mock", 0.11753391589468545]], "self": []}, "q_name": "TestImapHook.test_download_mail_attachments_with_regex_found", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[251, 4], [263, 63]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_download_mail_attachments_with_regex_not_found", "params": {"mock_imaplib": "", "mock_open_method": "", "self": ""}, "params_descr": {"mock_imaplib": "", "mock_open_method": "", "self": ""}, "params_occur": {"mock_imaplib": [["_create_fake_imap", "mock_imaplib", "with_mail", "True"]], "mock_open_method": [["mock_open_method", "assert_not_called"], ["mock_open_method", "return_value", "write", "assert_not_called"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_imaplib": [], "mock_open_method": [["unittesmock.Mock", 0.11626443522354529], ["mock.Mock", 0.1158941230276571]], "self": []}, "q_name": "TestImapHook.test_download_mail_attachments_with_regex_not_found", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[267, 4], [276, 92]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_download_mail_attachments_with_latest_only", "params": {"mock_imaplib": "", "mock_open_method": "", "self": ""}, "params_descr": {"mock_imaplib": "", "mock_open_method": "", "self": ""}, "params_occur": {"mock_imaplib": [["_create_fake_imap", "mock_imaplib", "with_mail", "True"]], "mock_open_method": [["mock_open_method", "assert_called_once_with"], ["mock_open_method", "return_value", "write", "assert_called_once_with"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_imaplib": [], "mock_open_method": [["unittesmock.Mock", 0.11362490533868345], ["mock.Mock", 0.10688787784578754]], "self": []}, "q_name": "TestImapHook.test_download_mail_attachments_with_latest_only", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[280, 4], [287, 63]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_download_mail_attachments_with_escaping_chars", "params": {"mock_imaplib": "", "mock_open_method": "", "self": ""}, "params_descr": {"mock_imaplib": "", "mock_open_method": "", "self": ""}, "params_occur": {"mock_imaplib": [["_create_fake_imap", "mock_imaplib", "with_mail", "True", "attachment_name"]], "mock_open_method": [["mock_open_method", "assert_not_called"], ["mock_open_method", "return_value", "write", "assert_not_called"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_imaplib": [["unittesmock.Mock", 0.09541582785110905]], "mock_open_method": [["mock.Mock", 0.097406874612322]], "self": []}, "q_name": "TestImapHook.test_download_mail_attachments_with_escaping_chars", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[292, 4], [300, 63]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_download_mail_attachments_with_symlink", "params": {"mock_imaplib": "", "mock_is_symlink": "", "mock_open_method": "", "self": ""}, "params_descr": {"mock_imaplib": "", "mock_is_symlink": "", "mock_open_method": "", "self": ""}, "params_occur": {"mock_imaplib": [["_create_fake_imap", "mock_imaplib", "with_mail", "True", "attachment_name"]], "mock_is_symlink": [["mock_is_symlink", "call_count"]], "mock_open_method": [["mock_open_method", "assert_not_called"], ["mock_open_method", "return_value", "write", "assert_not_called"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_imaplib": [["unittesmock.Mock", 0.5086894822153579]], "mock_is_symlink": [["unittesmock.Mock", 0.3693754954816745], ["mock.Mock", 0.15646817166794338], ["mock.MagicMock", 0.06585027166290186]], "mock_open_method": [["unittesmock.Mock", 0.5485468190563006], ["mock.Mock", 0.11224488608189694]], "self": []}, "q_name": "TestImapHook.test_download_mail_attachments_with_symlink", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[304, 4], [314, 47]], "fn_var_ln": {"mail_filter": [[306, 8], [306, 19]]}, "fn_var_occur": {"mail_filter": [["imap_hook", "download_mail_attachments", "name", "local_output_directory", "mail_filter", "mail_filter"], ["mock_imaplib", "IMAP4_SSL", "return_value", "search", "assert_called_once_with", "None", "mail_filter"]]}, "name": "test_download_mail_attachments_with_mail_filter", "params": {"mock_imaplib": "", "mock_open_method": "", "self": ""}, "params_descr": {"mock_imaplib": "", "mock_open_method": "", "self": ""}, "params_occur": {"mock_imaplib": [["_create_fake_imap", "mock_imaplib", "with_mail", "True"], ["mock_imaplib", "IMAP4_SSL", "return_value", "search", "assert_called_once_with", "None", "mail_filter"]], "mock_open_method": [["mock_open_method", "call_count"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_imaplib": [["unittesmock.Mock", 0.6177848736226587], ["mock.MagicMock", 0.09083371531865658]], "mock_open_method": [["unittesmock.Mock", 0.23624993433908947], ["mock.Mock", 0.16836367090904283], ["mock.MagicMock", 0.07457881167889463]], "self": []}, "q_name": "TestImapHook.test_download_mail_attachments_with_mail_filter", "ret_exprs": [], "ret_type": "", "variables": {"mail_filter": ""}, "variables_p": {"mail_filter": [["List[str]", 0.28819288255286896]]}}], "name": "TestImapHook", "q_name": "TestImapHook", "variables": {}, "variables_p": {}}], "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[35, 0], [60, 20]], "fn_var_ln": {"mail_string": [[48, 8], [48, 19]], "mock_conn": [[40, 8], [40, 17]]}, "fn_var_occur": {"mail_string": [["mail_string", "attachment_name"], ["mock_conn", "fetch", "return_value", "mail_string", "encode"]], "mock_conn": [["mock_conn", "Mock", "spec", "imaplib", "IMAP4_SSL"], ["mock_imaplib", "IMAP4_SSL", "return_value", "mock_conn"], ["mock_conn", "Mock", "spec", "imaplib", "IMAP4"], ["mock_imaplib", "IMAP4", "return_value", "mock_conn"], ["mock_conn", "login", "return_value"], ["mock_conn", "select", "return_value"], ["mock_conn", "search", "return_value"], ["mock_conn", "fetch", "return_value", "mail_string", "encode"], ["mock_conn", "close", "return_value"], ["mock_conn", "logout", "return_value"]]}, "name": "_create_fake_imap", "params": {"attachment_name": "", "mock_imaplib": "", "use_ssl": "", "with_mail": ""}, "params_descr": {"attachment_name": "", "mock_imaplib": "", "use_ssl": "", "with_mail": ""}, "params_occur": {"attachment_name": [["mail_string", "attachment_name"]], "mock_imaplib": [["mock_imaplib", "IMAP4_SSL", "return_value", "mock_conn"], ["mock_imaplib", "IMAP4", "return_value", "mock_conn"]], "use_ssl": [], "with_mail": []}, "params_p": {"args": [], "attachment_name": [["str", 0.455502619774221], ["Optional[str]", 0.285560895396368], ["bool", 0.17394065460263552], ["List[str]", 0.08499583022677565]], "kwargs": [], "mock_imaplib": [["bool", 0.40676321427041573], ["str", 0.3214032488167823], ["cmk.gui.plugins.visuals.utils.VisualInfo", 0.08535996545363346], ["int", 0.07933915518690784]], "use_ssl": [["str", 0.289045832503817], ["bool", 0.23260061923453995], ["Optional[str]", 0.17769032043242483], ["List[annofabapi.models.LabelV1]", 0.12297290739679333], ["Optional[int]", 0.08884516021621242], ["Mapping[str, Any]", 0.08884516021621242]], "with_mail": [["str", 0.289045832503817], ["bool", 0.23260061923453995], ["Optional[str]", 0.17769032043242483], ["List[annofabapi.models.LabelV1]", 0.12297290739679333], ["Optional[int]", 0.08884516021621242], ["Mapping[str, Any]", 0.08884516021621242]]}, "q_name": "_create_fake_imap", "ret_exprs": ["return mock_conn"], "ret_type": "", "ret_type_p": [["Dict[str, Sequence[str]]", 0.09130287601382642], ["List[str]", 0.09126555439820867]], "variables": {"mail_string": "", "mock_conn": ""}, "variables_p": {"mail_string": [["str", 0.3770218231416283], ["int", 0.11966830268744329], ["Tuple[Type[str], Type[bytes]]", 0.11952265169346123], ["FrozenSet", 0.11599983402637057], ["List[str]", 0.0899621852451327], ["Pattern[str]", 0.08845748389239003]], "mock_conn": [["unittesmock.Mock", 0.10720055746302462], ["Dict[str, Tuple[str, Any]]", 0.09189850975210251]]}}], "imports": ["__future__", "annotations", "imaplib", "json", "unittest", "mock", "Mock", "mock_open", "patch", "pytest", "airflow", "exceptions", "AirflowException", "airflow", "models", "Connection", "airflow", "providers", "imap", "hooks", "imap", "ImapHook", "airflow", "utils", "db"], "mod_var_ln": {"imaplib_string": [[31, 0], [31, 14]], "open_string": [[32, 0], [32, 11]]}, "mod_var_occur": {"imaplib_string": [], "open_string": []}, "no_types_annot": {"D": 0, "I": 0, "U": 73}, "session_id": "MM-uQ-j0qv06e51bj7Nyxgamy1o7DwnnCJI7cEDlWkg", "set": null, "tc": [false, null], "type_annot_cove": 0.0, "typed_seq": "", "untyped_seq": "", "variables": {"imaplib_string": "", "open_string": ""}, "variables_p": {"imaplib_string": [["str", 0.7], ["int", 0.2]], "open_string": [["int", 0.6087233768979116], ["str", 0.2934574673265663], ["list", 0.0978191557755221]]}}}