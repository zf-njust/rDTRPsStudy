{"error": null, "response": {"classes": [{"cls_lc": [[32, 0], [80, 84]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[33, 4], [40, 73]], "fn_var_ln": {"args": [[39, 8], [39, 12]], "dag": [[40, 8], [40, 16]], "kwargs": [[34, 8], [34, 19]]}, "fn_var_occur": {"args": [["args", "DEFAULT_DATE"], ["self", "dag", "DAG", "default_args", "args"]], "dag": [["self", "dag", "DAG", "default_args", "args"]], "kwargs": [["self", "kwargs", "dict", "sql", "mysql_table", "task_id"]]}, "name": "setup_method", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "kwargs", "dict", "sql", "mysql_table", "task_id"], ["self", "dag", "DAG", "default_args", "args"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestTrinoToMySqlTransfer.setup_method", "ret_exprs": [], "ret_type": "", "variables": {"args": "", "dag": "", "kwargs": ""}, "variables_p": {"args": [["dict", 0.23158237319952885], ["Tuple[Any, Any]", 0.09138477310665434]], "dag": [["bool", 0.2048703308790552], ["dict", 0.19090330750955672], ["str", 0.08800142005137496], ["Exception", 0.08517259256046432]], "kwargs": [["str", 0.26919810226919205], ["dict", 0.19408776889564416], ["list", 0.09956691878520449], ["List[Tuple[Any, str]]", 0.08529482661126073]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[44, 4], [50, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_execute", "params": {"mock_mysql_hook": "", "mock_trino_hook": "", "self": ""}, "params_descr": {"mock_mysql_hook": "", "mock_trino_hook": "", "self": ""}, "params_occur": {"mock_mysql_hook": [["mock_mysql_hook", "return_value", "insert_rows", "assert_called_once_with", "table", "self", "kwargs", "rows", "mock_trino_hook", "return_value", "get_records", "return_value"]], "mock_trino_hook": [["mock_trino_hook", "return_value", "get_records", "assert_called_once_with", "self", "kwargs"], ["mock_mysql_hook", "return_value", "insert_rows", "assert_called_once_with", "table", "self", "kwargs", "rows", "mock_trino_hook", "return_value", "get_records", "return_value"]], "self": [["TrinoToMySqlOperator", "self", "kwargs", "execute", "context"], ["mock_trino_hook", "return_value", "get_records", "assert_called_once_with", "self", "kwargs"], ["mock_mysql_hook", "return_value", "insert_rows", "assert_called_once_with", "table", "self", "kwargs", "rows", "mock_trino_hook", "return_value", "get_records", "return_value"]]}, "params_p": {"args": [], "kwargs": [], "mock_mysql_hook": [], "mock_trino_hook": [], "self": []}, "q_name": "TestTrinoToMySqlTransfer.test_execute", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[54, 4], [63, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_execute_with_mysql_preoperator", "params": {"mock_mysql_hook": "", "mock_trino_hook": "", "self": ""}, "params_descr": {"mock_mysql_hook": "", "mock_trino_hook": "", "self": ""}, "params_occur": {"mock_mysql_hook": [["mock_mysql_hook", "return_value", "run", "assert_called_once_with", "self", "kwargs"], ["mock_mysql_hook", "return_value", "insert_rows", "assert_called_once_with", "table", "self", "kwargs", "rows", "mock_trino_hook", "return_value", "get_records", "return_value"]], "mock_trino_hook": [["mock_trino_hook", "return_value", "get_records", "assert_called_once_with", "self", "kwargs"], ["mock_mysql_hook", "return_value", "insert_rows", "assert_called_once_with", "table", "self", "kwargs", "rows", "mock_trino_hook", "return_value", "get_records", "return_value"]], "self": [["self", "kwargs", "update", "dict", "mysql_preoperator"], ["TrinoToMySqlOperator", "self", "kwargs", "execute", "context"], ["mock_trino_hook", "return_value", "get_records", "assert_called_once_with", "self", "kwargs"], ["mock_mysql_hook", "return_value", "run", "assert_called_once_with", "self", "kwargs"], ["mock_mysql_hook", "return_value", "insert_rows", "assert_called_once_with", "table", "self", "kwargs", "rows", "mock_trino_hook", "return_value", "get_records", "return_value"]]}, "params_p": {"args": [], "kwargs": [], "mock_mysql_hook": [["mock.Mock", 0.10873479378961644]], "mock_trino_hook": [], "self": []}, "q_name": "TestTrinoToMySqlTransfer.test_execute_with_mysql_preoperator", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[68, 4], [80, 84]], "fn_var_ln": {"op": [[69, 8], [69, 10]]}, "fn_var_occur": {"op": [["op", "TrinoToMySqlOperator", "task_id", "sql", "mysql_table", "mysql_preoperator", "dag", "self", "dag"], ["op", "run", "start_date", "DEFAULT_DATE", "end_date", "DEFAULT_DATE", "ignore_ti_state", "True"]]}, "name": "test_trino_to_mysql", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["op", "TrinoToMySqlOperator", "task_id", "sql", "mysql_table", "mysql_preoperator", "dag", "self", "dag"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestTrinoToMySqlTransfer.test_trino_to_mysql", "ret_exprs": [], "ret_type": "", "variables": {"op": ""}, "variables_p": {"op": [["int", 0.11511697678771643], ["taskiapplication.models.task.Task", 0.1088624211628355], ["correios.models.posting.TrackingCode", 0.09273376226707811]]}}], "name": "TestTrinoToMySqlTransfer", "q_name": "TestTrinoToMySqlTransfer", "variables": {}, "variables_p": {}}], "funcs": [], "imports": ["__future__", "annotations", "os", "datetime", "datetime", "unittest", "mock", "patch", "pytest", "airflow", "models", "dag", "DAG", "airflow", "providers", "mysql", "transfers", "trino_to_mysql", "TrinoToMySqlOperator"], "mod_var_ln": {"DEFAULT_DATE": [[29, 0], [29, 12]]}, "mod_var_occur": {"DEFAULT_DATE": [["args", "DEFAULT_DATE"], ["op", "run", "start_date", "DEFAULT_DATE", "end_date", "DEFAULT_DATE", "ignore_ti_state", "True"]]}, "no_types_annot": {"D": 0, "I": 0, "U": 13}, "session_id": "T_M5AaqeHn3J_-f1LRWyA8IQQvFOO1AXY3MLcE9qNVA", "set": null, "tc": [false, null], "type_annot_cove": 0.0, "typed_seq": "", "untyped_seq": "", "variables": {"DEFAULT_DATE": ""}, "variables_p": {"DEFAULT_DATE": [["Dict[str, bool]", 0.24825662900303702], ["datetime.datetime.datetime", 0.19885399756448902], ["datetime.date.time.datetime", 0.1923880171235643], ["datetime.date.time.timedelta", 0.15908926863897846], ["str", 0.11763061494640514]]}}}