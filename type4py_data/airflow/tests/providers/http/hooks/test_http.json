{"error": null, "response": {"classes": [{"cls_lc": [[54, 0], [396, 36]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[57, 4], [65, 48]], "fn_var_ln": {"adapter": [[61, 8], [61, 15]], "get_hook": [[63, 8], [63, 21]], "get_lowercase_hook": [[64, 8], [64, 31]], "post_hook": [[65, 8], [65, 22]], "session": [[60, 8], [60, 15]]}, "fn_var_occur": {"adapter": [["adapter", "requests_mock", "Adapter"], ["session", "mount", "adapter"]], "get_hook": [["self", "get_hook", "HttpHook", "method"]], "get_lowercase_hook": [["self", "get_lowercase_hook", "HttpHook", "method"]], "post_hook": [["self", "post_hook", "HttpHook", "method"]], "session": [["session", "requests", "Session"], ["session", "mount", "adapter"]]}, "name": "setup_method", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "get_hook", "HttpHook", "method"], ["self", "get_lowercase_hook", "HttpHook", "method"], ["self", "post_hook", "HttpHook", "method"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestHttpHook.setup_method", "ret_exprs": [], "ret_type": "", "variables": {"adapter": "", "get_hook": "", "get_lowercase_hook": "", "post_hook": "", "session": ""}, "variables_p": {"adapter": [["str", 0.10307917415857036], ["Dict[str, Any]", 0.0972268337502874], ["Dict[str, Dict[str, str]]", 0.09590973075754794], ["frozenset[int]", 0.09028801570420521], ["dict", 0.08432431489931515]], "get_hook": [["str", 0.7823270686350703], ["Dict[str, str]", 0.1221547556903573], ["int", 0.09551817567457231]], "get_lowercase_hook": [["str", 0.7823270686350703], ["Dict[str, str]", 0.1221547556903573], ["int", 0.09551817567457231]], "post_hook": [["str", 0.2085393107603619], ["tuple", 0.12735258279128925], ["int", 0.10763927907618658], ["bytes", 0.07999523717850493]], "session": [["requests.sessions.Session", 0.28613327925116566], ["list", 0.08703752690756174], ["cmk.gui.http.Request", 0.08453630106791], ["Dict[str, Any]", 0.08185451964003623]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[67, 4], [73, 60]], "fn_var_ln": {"resp": [[72, 12], [72, 16]]}, "fn_var_occur": {"resp": [["resp", "self", "get_hook", "run"], ["resp", "text"]]}, "name": "test_raise_for_status_with_200", "params": {"requests_mock": "", "self": ""}, "params_descr": {"requests_mock": "", "self": ""}, "params_occur": {"requests_mock": [["requests_mock", "get", "status_code", "text", "reason"]], "self": [["resp", "self", "get_hook", "run"]]}, "params_p": {"args": [], "kwargs": [], "requests_mock": [], "self": []}, "q_name": "TestHttpHook.test_raise_for_status_with_200", "ret_exprs": [], "ret_type": "", "variables": {"resp": ""}, "variables_p": {"resp": [["bytes", 0.10368807983676046], ["List[str]", 0.09612220722923787], ["dict", 0.08901551930049058]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[77, 4], [94, 41]], "fn_var_ln": {"expected_url": [[83, 12], [83, 24]]}, "fn_var_occur": {"expected_url": [["mock_request", "assert_called_once_with", "mock", "ANY", "expected_url", "headers", "mock", "ANY", "params", "mock", "ANY"]]}, "name": "test_get_request_with_port", "params": {"mock_request": "", "mock_session": "", "self": ""}, "params_descr": {"mock_request": "", "mock_session": "", "self": ""}, "params_occur": {"mock_request": [["mock_request", "assert_called_once_with", "mock", "ANY", "expected_url", "headers", "mock", "ANY", "params", "mock", "ANY"], ["mock_request", "reset_mock"]], "mock_session": [], "self": [["self", "get_hook", "run", "endpoint"]]}, "params_p": {"args": [], "kwargs": [], "mock_request": [["requests_mock.Mocker", 0.16256036428496037]], "mock_session": [["str", 0.18694672607738097], ["List[str]", 0.09012112666163155], ["bool", 0.08466715728746152], ["Dict[str, Any]", 0.08284404024879424]], "self": []}, "q_name": "TestHttpHook.test_get_request_with_port", "ret_exprs": [], "ret_type": "", "variables": {"expected_url": ""}, "variables_p": {"expected_url": [["str", 0.5075747999160949], ["list", 0.09749988409678038], ["Dict[str, Union[Any, Any]]", 0.08303209114312136]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[96, 4], [106, 60]], "fn_var_ln": {"resp": [[105, 12], [105, 16]]}, "fn_var_occur": {"resp": [["resp", "self", "get_hook", "run", "extra_options", "False"], ["resp", "text"]]}, "name": "test_get_request_do_not_raise_for_status_if_check_response_is_false", "params": {"requests_mock": "", "self": ""}, "params_descr": {"requests_mock": "", "self": ""}, "params_occur": {"requests_mock": [["requests_mock", "get", "status_code", "text", "reason"]], "self": [["resp", "self", "get_hook", "run", "extra_options", "False"]]}, "params_p": {"args": [], "kwargs": [], "requests_mock": [["str", 0.6315536148455274], ["bool", 0.09498353166068879], ["Dict[str, Any]", 0.09049528885387015], ["int", 0.08798403297922505]], "self": []}, "q_name": "TestHttpHook.test_get_request_do_not_raise_for_status_if_check_response_is_false", "ret_exprs": [], "ret_type": "", "variables": {"resp": ""}, "variables_p": {"resp": [["bool", 0.7785175622413558]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[108, 4], [113, 55]], "fn_var_ln": {"conn": [[111, 12], [111, 16]], "expected_conn": [[110, 12], [110, 25]]}, "fn_var_occur": {"conn": [["conn", "self", "get_hook", "get_conn"], ["dict", "conn", "headers", "json", "loads", "expected_conn", "extra", "conn", "headers"], ["conn", "headers", "get"]], "expected_conn": [["expected_conn", "get_airflow_connection"], ["dict", "conn", "headers", "json", "loads", "expected_conn", "extra", "conn", "headers"]]}, "name": "test_hook_contains_header_from_extra_field", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["conn", "self", "get_hook", "get_conn"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestHttpHook.test_hook_contains_header_from_extra_field", "ret_exprs": [], "ret_type": "", "variables": {"conn": "", "expected_conn": ""}, "variables_p": {"conn": [["List[dict]", 0.505027192630475], ["List[Dict]", 0.09351519828056969], ["List[str]", 0.09162538319735529]], "expected_conn": [["str", 0.5928877133495956], ["dict", 0.210473592563512], ["Dict[str, int]", 0.105088945364247]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[116, 4], [127, 100]], "fn_var_ln": {"data": [[122, 12], [122, 16]]}, "fn_var_occur": {"data": [["self", "get_lowercase_hook", "run", "data", "data"], ["mock_requests", "assert_called_once_with", "mock", "ANY", "mock", "ANY", "headers", "mock", "ANY", "params", "data"]]}, "name": "test_hook_with_method_in_lowercase", "params": {"mock_requests": "", "self": ""}, "params_descr": {"mock_requests": "", "self": ""}, "params_occur": {"mock_requests": [["mock_requests", "assert_called_once_with", "mock", "ANY", "mock", "ANY", "headers", "mock", "ANY", "params", "data"]], "self": [["self", "get_lowercase_hook", "run", "data", "data"]]}, "params_p": {"args": [], "kwargs": [], "mock_requests": [["mock.Mock", 0.0953868084476946]], "self": []}, "q_name": "TestHttpHook.test_hook_with_method_in_lowercase", "ret_exprs": [], "ret_type": "", "variables": {"data": ""}, "variables_p": {"data": [["Dict[str, str]", 0.6871903474786463], ["bytes", 0.12975672984210415], ["Dict[str, Dict[str, Any]]", 0.09266415201916982]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[129, 4], [131, 55]], "fn_var_ln": {"conn": [[130, 8], [130, 12]]}, "fn_var_occur": {"conn": [["conn", "self", "get_hook", "get_conn", "headers"], ["conn", "headers", "get"]]}, "name": "test_hook_uses_provided_header", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["conn", "self", "get_hook", "get_conn", "headers"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestHttpHook.test_hook_uses_provided_header", "ret_exprs": [], "ret_type": "", "variables": {"conn": ""}, "variables_p": {"conn": [["str", 0.3177111791160091], ["list", 0.2207415565639972], ["int", 0.09325652822501163], ["dict", 0.09121138982984511], ["List[int]", 0.08956108466154995]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[133, 4], [135, 49]], "fn_var_ln": {"conn": [[134, 8], [134, 12]]}, "fn_var_occur": {"conn": [["conn", "self", "get_hook", "get_conn"], ["conn", "headers", "get", "None"]]}, "name": "test_hook_has_no_header_from_extra", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["conn", "self", "get_hook", "get_conn"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestHttpHook.test_hook_has_no_header_from_extra", "ret_exprs": [], "ret_type": "", "variables": {"conn": ""}, "variables_p": {"conn": [["dict", 0.2888575757426717], ["Dict[str, str]", 0.186658619752607], ["list", 0.1005770240625837], ["Dict[str, list]", 0.09156748524859572], ["str", 0.09125896260285193]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[137, 4], [140, 59]], "fn_var_ln": {"conn": [[139, 12], [139, 16]]}, "fn_var_occur": {"conn": [["conn", "self", "get_hook", "get_conn", "headers"], ["conn", "headers", "get"]]}, "name": "test_hooks_header_from_extra_is_overridden", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["conn", "self", "get_hook", "get_conn", "headers"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestHttpHook.test_hooks_header_from_extra_is_overridden", "ret_exprs": [], "ret_type": "", "variables": {"conn": ""}, "variables_p": {"conn": [["str", 0.3177111791160091], ["list", 0.2207415565639972], ["int", 0.09325652822501163], ["dict", 0.09121138982984511], ["List[int]", 0.08956108466154995]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[142, 4], [149, 42]], "fn_var_ln": {"resp": [[148, 12], [148, 16]]}, "fn_var_occur": {"resp": [["resp", "self", "post_hook", "run"], ["resp", "status_code"]]}, "name": "test_post_request", "params": {"requests_mock": "", "self": ""}, "params_descr": {"requests_mock": "", "self": ""}, "params_occur": {"requests_mock": [["requests_mock", "post", "status_code", "text", "reason"]], "self": [["resp", "self", "post_hook", "run"]]}, "params_p": {"args": [], "kwargs": [], "requests_mock": [["requests_mock.Mocker", 0.1110525658454021]], "self": []}, "q_name": "TestHttpHook.test_post_request", "ret_exprs": [], "ret_type": "", "variables": {"resp": ""}, "variables_p": {"resp": [["List[Tuple[str, str]]", 0.1188387216547401], ["Dict[str, Union[Any, Any, Any, Any, Any, Any]]", 0.11172140968403048], ["str", 0.10789555083529803], ["Dict[str, str]", 0.10555692455183126], ["Dict[str, Union[Any, Any, str]]", 0.10553731362098479], ["Dict[str, Union[Any, Any, Any]]", 0.10187322741523573]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[151, 4], [161, 45]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_post_request_with_error_code", "params": {"requests_mock": "", "self": ""}, "params_descr": {"requests_mock": "", "self": ""}, "params_occur": {"requests_mock": [["requests_mock", "post", "status_code", "text", "reason"]], "self": [["self", "post_hook", "run"]]}, "params_p": {"args": [], "kwargs": [], "requests_mock": [["requests_mock.Mocker", 0.1925232097653636]], "self": []}, "q_name": "TestHttpHook.test_post_request_with_error_code", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[163, 4], [173, 42]], "fn_var_ln": {"resp": [[172, 12], [172, 16]]}, "fn_var_occur": {"resp": [["resp", "self", "post_hook", "run", "extra_options", "False"], ["resp", "status_code"]]}, "name": "test_post_request_do_not_raise_for_status_if_check_response_is_false", "params": {"requests_mock": "", "self": ""}, "params_descr": {"requests_mock": "", "self": ""}, "params_occur": {"requests_mock": [["requests_mock", "post", "status_code", "text", "reason"]], "self": [["resp", "self", "post_hook", "run", "extra_options", "False"]]}, "params_p": {"args": [], "kwargs": [], "requests_mock": [["requests_mock.Mocker", 0.21548937080096847]], "self": []}, "q_name": "TestHttpHook.test_post_request_do_not_raise_for_status_if_check_response_is_false", "ret_exprs": [], "ret_type": "", "variables": {"resp": ""}, "variables_p": {"resp": [["dict", 0.30455093686706386], ["Dict[int, int]", 0.20488161964139875], ["Type[Callable[..., Any]]", 0.1100570177865547], ["Dict[int, str]", 0.09897597418317956], ["Dict[str, Union[Any, Any, str]]", 0.09416674718937688]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[183, 8], [184, 53]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "send_and_raise", "params": {"kwargs": "", "unused_request": ""}, "params_descr": {"kwargs": "", "unused_request": ""}, "params_occur": {"kwargs": [], "unused_request": []}, "params_p": {"args": [], "kwargs": [], "self": [], "unused_request": []}, "q_name": "TestHttpHook.test_retry_on_conn_error.<locals>.send_and_raise", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[176, 4], [190, 96]], "fn_var_ln": {"retry_args": [[177, 8], [177, 18]]}, "fn_var_occur": {"retry_args": [["self", "get_hook", "run_with_advanced_retry", "endpoint", "_retry_args", "retry_args"]]}, "name": "test_retry_on_conn_error", "params": {"mocked_session": "", "self": ""}, "params_descr": {"mocked_session": "", "self": ""}, "params_occur": {"mocked_session": [["mocked_session", "send", "side_effect", "send_and_raise"], ["self", "get_hook", "_retry_obj", "stop", "max_attempt_number", "mocked_session", "call_count"]], "self": [["self", "get_hook", "run_with_advanced_retry", "endpoint", "_retry_args", "retry_args"], ["self", "get_hook", "_retry_obj", "stop", "max_attempt_number", "mocked_session", "call_count"]]}, "params_p": {"args": [], "kwargs": [], "mocked_session": [], "self": []}, "q_name": "TestHttpHook.test_retry_on_conn_error", "ret_exprs": [], "ret_type": "", "variables": {"retry_args": ""}, "variables_p": {"retry_args": [["str", 0.8387501416357194], ["set", 0.08407978413537782], ["List[float]", 0.07717007422890292]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[192, 4], [203, 58]], "fn_var_ln": {"response": [[202, 12], [202, 20]], "retry_args": [[195, 8], [195, 18]]}, "fn_var_occur": {"response": [["response", "self", "get_hook", "run_with_advanced_retry", "endpoint", "_retry_args", "retry_args"], ["isinstance", "response", "requests", "Response"]], "retry_args": [["retry_args", "dict", "wait", "tenacity", "wait_none", "stop", "tenacity", "stop_after_attempt", "retry", "tenacity", "retry_if_exception_type", "Exception", "reraise", "True"], ["response", "self", "get_hook", "run_with_advanced_retry", "endpoint", "_retry_args", "retry_args"]]}, "name": "test_run_with_advanced_retry", "params": {"requests_mock": "", "self": ""}, "params_descr": {"requests_mock": "", "self": ""}, "params_occur": {"requests_mock": [["requests_mock", "get", "status_code", "reason"]], "self": [["response", "self", "get_hook", "run_with_advanced_retry", "endpoint", "_retry_args", "retry_args"]]}, "params_p": {"args": [], "kwargs": [], "requests_mock": [["int", 0.24423030678422733], ["bytes", 0.10501740381882188]], "self": []}, "q_name": "TestHttpHook.test_run_with_advanced_retry", "ret_exprs": [], "ret_type": "", "variables": {"response": "", "retry_args": ""}, "variables_p": {"response": [["phial.wrappers.Response", 0.4515433666772786], ["requests.structures.CaseInsensitiveDict[requests.compastr]", 0.12559852970673596], ["Response", 0.11283549263451864], ["List[Dict[str, Any]]", 0.10331168434771659], ["rotkehlchen.tests.utils.mock.MockResponse", 0.10278592298787954]], "retry_args": [["dict", 0.6010247947256652], ["KeysView[str]", 0.11217901480561022], ["Dict[str, Any]", 0.09450549173125491]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[206, 8], [207, 34]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "run_and_return", "params": {"kwargs": "", "prepped_request": "", "unused_extra_options": "", "unused_session": ""}, "params_descr": {"kwargs": "", "prepped_request": "", "unused_extra_options": "", "unused_session": ""}, "params_occur": {"kwargs": [], "prepped_request": [], "unused_extra_options": [], "unused_session": []}, "params_p": {"args": [], "kwargs": [], "prepped_request": [["bool", 0.2916890768742372], ["List[\"libkol.types.ItemQuantity\"]", 0.116951302758081], ["Optional[int]", 0.10703446462650987], ["Dict[str, Iterable[Any]]", 0.09074419510456404], ["Optional[List[str]]", 0.09074419510456404], ["Iterable[str]", 0.08196473129326017]], "self": [], "unused_extra_options": [["bool", 0.2916890768742372], ["List[\"libkol.types.ItemQuantity\"]", 0.116951302758081], ["Optional[int]", 0.10703446462650987], ["Dict[str, Iterable[Any]]", 0.09074419510456404], ["Optional[List[str]]", 0.09074419510456404], ["Iterable[str]", 0.08196473129326017]], "unused_session": [["bool", 0.2916890768742372], ["List[\"libkol.types.ItemQuantity\"]", 0.116951302758081], ["Optional[int]", 0.10703446462650987], ["Dict[str, Iterable[Any]]", 0.09074419510456404], ["Optional[List[str]]", 0.09074419510456404], ["Iterable[str]", 0.08196473129326017]]}, "q_name": "TestHttpHook.test_header_from_extra_and_run_method_are_merged.<locals>.run_and_return", "ret_exprs": ["return prepped_request"], "ret_type": "", "ret_type_p": [["int", 0.19543845708650984], ["str", 0.07146466670116353], ["List[str]", 0.07038746187963621], ["Dict[str, Any]", 0.05603862101467945]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[205, 4], [217, 64]], "fn_var_ln": {"actual": [[215, 16], [215, 22]], "prepared_request": [[214, 16], [214, 32]]}, "fn_var_occur": {"actual": [["actual", "dict", "prepared_request", "headers"], ["actual", "get"], ["actual", "get"]], "prepared_request": [["prepared_request", "self", "get_hook", "run", "headers"], ["actual", "dict", "prepared_request", "headers"]]}, "name": "test_header_from_extra_and_run_method_are_merged", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["prepared_request", "self", "get_hook", "run", "headers"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestHttpHook.test_header_from_extra_and_run_method_are_merged", "ret_exprs": [], "ret_type": "", "variables": {"actual": "", "prepared_request": ""}, "variables_p": {"actual": [["str", 0.4132408494738591], ["Dict[str, str]", 0.18651734989830976], ["Dict[str, Any]", 0.10431791546508049], ["Optional[str]", 0.10145555024124106], ["List[str]", 0.10145555024124106]], "prepared_request": [["requests.Response", 0.2564482989773432], ["flask.wrappers.Response", 0.21593657971848365], ["werkzeug.wrappers.Response", 0.18543423731641215], ["django.http.JsonResponse", 0.1381810752792546]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[220, 4], [225, 50]], "fn_var_ln": {"conn": [[221, 8], [221, 12]], "hook": [[223, 8], [223, 12]], "return_value": [[222, 8], [222, 40]]}, "fn_var_occur": {"conn": [["conn", "Connection", "conn_id", "conn_type", "host", "schema"], ["mock_get_connection", "return_value", "conn"]], "hook": [["hook", "HttpHook"], ["hook", "get_conn"], ["hook", "base_url"]], "return_value": [["mock_get_connection", "return_value", "conn"]]}, "name": "test_http_connection", "params": {"mock_get_connection": "", "self": ""}, "params_descr": {"mock_get_connection": "", "self": ""}, "params_occur": {"mock_get_connection": [["mock_get_connection", "return_value", "conn"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_get_connection": [["mock.MagicMock", 0.17416209555620893]], "self": []}, "q_name": "TestHttpHook.test_http_connection", "ret_exprs": [], "ret_type": "", "variables": {"conn": "", "hook": "", "return_value": ""}, "variables_p": {"conn": [["str", 0.1982033124158929], ["Dict[str, int]", 0.09736120973368294], ["int", 0.0961200837145806]], "hook": [["str", 0.3003461959557312], ["int", 0.21403979919591062], ["Tuple[Literal]", 0.09170612949582711]], "return_value": [["str", 0.2604361665626643], ["int", 0.1914968371785965], ["List[Dict[str, Any]]", 0.12623080368784928], ["list", 0.08534104615198508]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[228, 4], [233, 51]], "fn_var_ln": {"conn": [[229, 8], [229, 12]], "hook": [[231, 8], [231, 12]], "return_value": [[230, 8], [230, 40]]}, "fn_var_occur": {"conn": [["conn", "Connection", "conn_id", "conn_type", "host", "schema"], ["mock_get_connection", "return_value", "conn"]], "hook": [["hook", "HttpHook"], ["hook", "get_conn"], ["hook", "base_url"]], "return_value": [["mock_get_connection", "return_value", "conn"]]}, "name": "test_https_connection", "params": {"mock_get_connection": "", "self": ""}, "params_descr": {"mock_get_connection": "", "self": ""}, "params_occur": {"mock_get_connection": [["mock_get_connection", "return_value", "conn"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_get_connection": [["mock.MagicMock", 0.17416209555620893]], "self": []}, "q_name": "TestHttpHook.test_https_connection", "ret_exprs": [], "ret_type": "", "variables": {"conn": "", "hook": "", "return_value": ""}, "variables_p": {"conn": [["str", 0.1982033124158929], ["Dict[str, int]", 0.09736120973368294], ["int", 0.0961200837145806]], "hook": [["str", 0.3003461959557312], ["int", 0.21403979919591062], ["Tuple[Literal]", 0.09170612949582711]], "return_value": [["str", 0.2604361665626643], ["int", 0.1914968371785965], ["List[Dict[str, Any]]", 0.12623080368784928], ["list", 0.08534104615198508]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[236, 4], [241, 50]], "fn_var_ln": {"conn": [[237, 8], [237, 12]], "hook": [[239, 8], [239, 12]], "return_value": [[238, 8], [238, 40]]}, "fn_var_occur": {"conn": [["conn", "Connection", "conn_id", "conn_type", "host"], ["mock_get_connection", "return_value", "conn"]], "hook": [["hook", "HttpHook"], ["hook", "get_conn"], ["hook", "base_url"]], "return_value": [["mock_get_connection", "return_value", "conn"]]}, "name": "test_host_encoded_http_connection", "params": {"mock_get_connection": "", "self": ""}, "params_descr": {"mock_get_connection": "", "self": ""}, "params_occur": {"mock_get_connection": [["mock_get_connection", "return_value", "conn"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_get_connection": [["mock.MagicMock", 0.17416209555620893]], "self": []}, "q_name": "TestHttpHook.test_host_encoded_http_connection", "ret_exprs": [], "ret_type": "", "variables": {"conn": "", "hook": "", "return_value": ""}, "variables_p": {"conn": [["dict", 0.20054661311709712], ["str", 0.09726559518915283]], "hook": [["str", 0.3003461959557312], ["int", 0.21403979919591062], ["Tuple[Literal]", 0.09170612949582711]], "return_value": [["str", 0.2604361665626643], ["int", 0.1914968371785965], ["List[Dict[str, Any]]", 0.12623080368784928], ["list", 0.08534104615198508]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[244, 4], [249, 51]], "fn_var_ln": {"conn": [[245, 8], [245, 12]], "hook": [[247, 8], [247, 12]], "return_value": [[246, 8], [246, 40]]}, "fn_var_occur": {"conn": [["conn", "Connection", "conn_id", "conn_type", "host"], ["mock_get_connection", "return_value", "conn"]], "hook": [["hook", "HttpHook"], ["hook", "get_conn"], ["hook", "base_url"]], "return_value": [["mock_get_connection", "return_value", "conn"]]}, "name": "test_host_encoded_https_connection", "params": {"mock_get_connection": "", "self": ""}, "params_descr": {"mock_get_connection": "", "self": ""}, "params_occur": {"mock_get_connection": [["mock_get_connection", "return_value", "conn"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_get_connection": [["mock.MagicMock", 0.17416209555620893]], "self": []}, "q_name": "TestHttpHook.test_host_encoded_https_connection", "ret_exprs": [], "ret_type": "", "variables": {"conn": "", "hook": "", "return_value": ""}, "variables_p": {"conn": [["dict", 0.20054661311709712], ["str", 0.09726559518915283]], "hook": [["str", 0.3003461959557312], ["int", 0.21403979919591062], ["Tuple[Literal]", 0.09170612949582711]], "return_value": [["str", 0.2604361665626643], ["int", 0.1914968371785965], ["List[Dict[str, Any]]", 0.12623080368784928], ["list", 0.08534104615198508]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[251, 4], [252, 54]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_method_converted_to_uppercase_when_created_in_lowercase", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "get_lowercase_hook", "method"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestHttpHook.test_method_converted_to_uppercase_when_created_in_lowercase", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[255, 4], [261, 41]], "fn_var_ln": {"conn": [[256, 8], [256, 12]], "hook": [[259, 8], [259, 12]], "return_value": [[257, 8], [257, 40]]}, "fn_var_occur": {"conn": [["conn", "Connection", "conn_id", "conn_type"], ["mock_get_connection", "return_value", "conn"]], "hook": [["hook", "HttpHook"], ["hook", "get_conn"], ["hook", "base_url"]], "return_value": [["mock_get_connection", "return_value", "conn"]]}, "name": "test_connection_without_host", "params": {"mock_get_connection": "", "self": ""}, "params_descr": {"mock_get_connection": "", "self": ""}, "params_occur": {"mock_get_connection": [["mock_get_connection", "return_value", "conn"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_get_connection": [["mock.MagicMock", 0.17416209555620893]], "self": []}, "q_name": "TestHttpHook.test_connection_without_host", "ret_exprs": [], "ret_type": "", "variables": {"conn": "", "hook": "", "return_value": ""}, "variables_p": {"conn": [["str", 0.3926683107174941], ["int", 0.24199076984304835], ["List[str]", 0.1568380980672598], ["Dict[Any, str]", 0.05997472035247069]], "hook": [["str", 0.3003461959557312], ["int", 0.21403979919591062], ["Tuple[Literal]", 0.09170612949582711]], "return_value": [["str", 0.2604361665626643], ["int", 0.1914968371785965], ["List[Dict[str, Any]]", 0.12623080368784928], ["list", 0.08534104615198508]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[267, 8], [268, 41]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "match_obj1", "params": {"request": ""}, "params_descr": {"request": ""}, "params_occur": {"request": [["request", "json", "obj1"]]}, "params_p": {"args": [], "kwargs": [], "request": [["django.http.HttpRequest", 0.2820084143173676], ["bytes", 0.1389652368152843]], "self": []}, "q_name": "TestHttpHook.test_json_request.<locals>.match_obj1", "ret_exprs": ["return request.json() == obj1"], "ret_type": "", "ret_type_p": [["int", 0.48434606416852566], ["str", 0.10151933124985897]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[264, 4], [274, 61]], "fn_var_ln": {"obj1": [[265, 8], [265, 12]]}, "fn_var_occur": {"obj1": [["HttpHook", "method", "method", "run", "json", "obj1"]]}, "name": "test_json_request", "params": {"method": "", "requests_mock": "", "self": ""}, "params_descr": {"method": "", "requests_mock": "", "self": ""}, "params_occur": {"method": [["requests_mock", "request", "method", "method", "url", "additional_matcher", "match_obj1"], ["HttpHook", "method", "method", "run", "json", "obj1"]], "requests_mock": [["requests_mock", "request", "method", "method", "url", "additional_matcher", "match_obj1"]], "self": []}, "params_p": {"args": [], "kwargs": [], "method": [["requests_mock.Mocker", 0.5120160770404156], ["requests_mock._RequestObjectProxy", 0.11793764589455354], ["dict", 0.09121415386342836]], "requests_mock": [["requests_mock.Mocker", 0.25833317380601384], ["requests_mock._RequestObjectProxy", 0.10951672128719028]], "self": []}, "q_name": "TestHttpHook.test_json_request", "ret_exprs": [], "ret_type": "", "variables": {"obj1": ""}, "variables_p": {"obj1": [["str", 0.6797662429110181], ["Tuple[Type[str], Type[bytes]]", 0.12442240864838922], ["bool", 0.1010082203928931], ["Dict[str, List[str]]", 0.09480312804769943]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[277, 4], [290, 13]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_verify_set_to_true_by_default", "params": {"mock_session_send": "", "self": ""}, "params_descr": {"mock_session_send": "", "self": ""}, "params_occur": {"mock_session_send": [["mock_session_send", "assert_called_once_with", "mock", "ANY", "allow_redirects", "True", "cert", "None", "proxies", "OrderedDict", "stream", "False", "timeout", "None", "verify", "True"]], "self": [["self", "get_hook", "run"]]}, "params_p": {"args": [], "kwargs": [], "mock_session_send": [], "self": []}, "q_name": "TestHttpHook.test_verify_set_to_true_by_default", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[294, 4], [308, 13]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_requests_ca_bundle_env_var", "params": {"mock_session_send": "", "self": ""}, "params_descr": {"mock_session_send": "", "self": ""}, "params_occur": {"mock_session_send": [["mock_session_send", "assert_called_once_with", "mock", "ANY", "allow_redirects", "True", "cert", "None", "proxies", "OrderedDict", "stream", "False", "timeout", "None", "verify"]], "self": [["self", "get_hook", "run"]]}, "params_p": {"args": [], "kwargs": [], "mock_session_send": [], "self": []}, "q_name": "TestHttpHook.test_requests_ca_bundle_env_var", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[312, 4], [326, 13]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_verify_respects_requests_ca_bundle_env_var", "params": {"mock_session_send": "", "self": ""}, "params_descr": {"mock_session_send": "", "self": ""}, "params_occur": {"mock_session_send": [["mock_session_send", "assert_called_once_with", "mock", "ANY", "allow_redirects", "True", "cert", "None", "proxies", "OrderedDict", "stream", "False", "timeout", "None", "verify"]], "self": [["self", "get_hook", "run", "extra_options", "True"]]}, "params_p": {"args": [], "kwargs": [], "mock_session_send": [], "self": []}, "q_name": "TestHttpHook.test_verify_respects_requests_ca_bundle_env_var", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[330, 4], [344, 13]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_verify_false_parameter_overwrites_set_requests_ca_bundle_env_var", "params": {"mock_session_send": "", "self": ""}, "params_descr": {"mock_session_send": "", "self": ""}, "params_occur": {"mock_session_send": [["mock_session_send", "assert_called_once_with", "mock", "ANY", "allow_redirects", "True", "cert", "None", "proxies", "OrderedDict", "stream", "False", "timeout", "None", "verify", "False"]], "self": [["self", "get_hook", "run", "extra_options", "False"]]}, "params_p": {"args": [], "kwargs": [], "mock_session_send": [], "self": []}, "q_name": "TestHttpHook.test_verify_false_parameter_overwrites_set_requests_ca_bundle_env_var", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[346, 4], [351, 58]], "fn_var_ln": {"msg": [[349, 20], [349, 23]], "status": [[349, 12], [349, 18]]}, "fn_var_occur": {"msg": [["status", "msg", "self", "get_hook", "test_connection"]], "status": [["status", "msg", "self", "get_hook", "test_connection"], ["status", "True"]]}, "name": "test_connection_success", "params": {"requests_mock": "", "self": ""}, "params_descr": {"requests_mock": "", "self": ""}, "params_occur": {"requests_mock": [["requests_mock", "get", "status_code", "json", "reason"]], "self": [["status", "msg", "self", "get_hook", "test_connection"]]}, "params_p": {"args": [], "kwargs": [], "requests_mock": [["requests_mock.Mocker", 0.3950869141336256], ["mock.MagicMock", 0.07632597943158283]], "self": []}, "q_name": "TestHttpHook.test_connection_success", "ret_exprs": [], "ret_type": "", "variables": {"msg": "", "status": ""}, "variables_p": {"msg": [["List[int]", 0.19023905981844455], ["list", 0.1873814202017414], ["dict", 0.10898755766478346]], "status": [["str", 1.0000000000000002]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[353, 4], [360, 38]], "fn_var_ln": {"msg": [[358, 20], [358, 23]], "status": [[358, 12], [358, 18]]}, "fn_var_occur": {"msg": [["status", "msg", "self", "get_hook", "test_connection"]], "status": [["status", "msg", "self", "get_hook", "test_connection"], ["status", "False"]]}, "name": "test_connection_failure", "params": {"requests_mock": "", "self": ""}, "params_descr": {"requests_mock": "", "self": ""}, "params_occur": {"requests_mock": [["requests_mock", "get", "status_code", "json", "reason"]], "self": [["status", "msg", "self", "get_hook", "test_connection"]]}, "params_p": {"args": [], "kwargs": [], "requests_mock": [["requests_mock.Mocker", 0.3950869141336256], ["mock.MagicMock", 0.07632597943158283]], "self": []}, "q_name": "TestHttpHook.test_connection_failure", "ret_exprs": [], "ret_type": "", "variables": {"msg": "", "status": ""}, "variables_p": {"msg": [["List[int]", 0.19023905981844455], ["list", 0.1873814202017414], ["dict", 0.10898755766478346]], "status": [["str", 0.8695964176737054]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[363, 4], [368, 42]], "fn_var_ln": {"hook": [[366, 12], [366, 16]], "return_value": [[365, 12], [365, 29]]}, "fn_var_occur": {"hook": [["hook", "HttpHook", "AuthBase"], ["hook", "get_conn"]], "return_value": [["auth", "return_value", "None"]]}, "name": "test_loginless_custom_auth_initialized_with_no_args", "params": {"auth": "", "self": ""}, "params_descr": {"auth": "", "self": ""}, "params_occur": {"auth": [["auth", "return_value", "None"], ["auth", "assert_called_once_with"]], "self": []}, "params_p": {"args": [], "auth": [["Optional[Tuple[float, float]]", 0.10081424650839428]], "kwargs": [], "self": []}, "q_name": "TestHttpHook.test_loginless_custom_auth_initialized_with_no_args", "ret_exprs": [], "ret_type": "", "variables": {"hook": "", "return_value": ""}, "variables_p": {"hook": [["src.pip_shims.models.ShimmedPathCollection", 0.12165477609849581]], "return_value": [["str", 0.2634655102172568], ["int", 0.25350093926400447], ["Optional[bytes]", 0.12508630689673708], ["Dict[str, Dict[str, Any]]", 0.0986339214486634], ["Tuple[int, int]", 0.08950217541964084]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[371, 4], [377, 52]], "fn_var_ln": {"auth_with_args": [[374, 12], [374, 26]], "hook": [[375, 12], [375, 16]], "return_value": [[373, 12], [373, 29]]}, "fn_var_occur": {"auth_with_args": [["auth_with_args", "functools", "partial", "AuthBase"], ["hook", "HttpHook", "auth_with_args"]], "hook": [["hook", "HttpHook", "auth_with_args"], ["hook", "get_conn"]], "return_value": [["auth", "return_value", "None"]]}, "name": "test_loginless_custom_auth_initialized_with_args", "params": {"auth": "", "self": ""}, "params_descr": {"auth": "", "self": ""}, "params_occur": {"auth": [["auth", "return_value", "None"], ["auth", "assert_called_once_with"]], "self": []}, "params_p": {"args": [], "auth": [["Optional[Tuple[float, float]]", 0.10270943025161416]], "kwargs": [], "self": []}, "q_name": "TestHttpHook.test_loginless_custom_auth_initialized_with_args", "ret_exprs": [], "ret_type": "", "variables": {"auth_with_args": "", "hook": "", "return_value": ""}, "variables_p": {"auth_with_args": [], "hook": [["int", 0.12183731727725775], ["list", 0.10239538112204428], ["Tuple[str, str, str, str, str, str, str, str, str, str]", 0.0842406337177259], ["Tuple[str, str, str, str, str, str, str]", 0.0842406337177259], ["dict", 0.07879302524974564]], "return_value": [["str", 0.2634655102172568], ["int", 0.25350093926400447], ["Optional[bytes]", 0.12508630689673708], ["Dict[str, Dict[str, Any]]", 0.0986339214486634], ["Tuple[int, int]", 0.08950217541964084]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[380, 4], [388, 60]], "fn_var_ln": {"hook": [[386, 12], [386, 16]], "return_value": [[385, 12], [385, 29]]}, "fn_var_occur": {"hook": [["hook", "HttpHook", "HTTPBasicAuth"], ["hook", "get_conn"]], "return_value": [["auth", "return_value", "None"]]}, "name": "test_login_password_basic_auth_initialized", "params": {"auth": "", "self": ""}, "params_descr": {"auth": "", "self": ""}, "params_occur": {"auth": [["auth", "return_value", "None"], ["auth", "assert_called_once_with"]], "self": []}, "params_p": {"args": [], "auth": [], "kwargs": [], "self": []}, "q_name": "TestHttpHook.test_login_password_basic_auth_initialized", "ret_exprs": [], "ret_type": "", "variables": {"hook": "", "return_value": ""}, "variables_p": {"hook": [], "return_value": [["str", 0.2634655102172568], ["int", 0.25350093926400447], ["Optional[bytes]", 0.12508630689673708], ["Dict[str, Dict[str, Any]]", 0.0986339214486634], ["Tuple[int, int]", 0.08950217541964084]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[391, 4], [396, 36]], "fn_var_ln": {"hook": [[394, 12], [394, 16]], "return_value": [[393, 12], [393, 29]]}, "fn_var_occur": {"hook": [["hook", "HttpHook"], ["hook", "get_conn"]], "return_value": [["auth", "return_value", "None"]]}, "name": "test_default_auth_not_initialized", "params": {"auth": "", "self": ""}, "params_descr": {"auth": "", "self": ""}, "params_occur": {"auth": [["auth", "return_value", "None"], ["auth", "assert_not_called"]], "self": []}, "params_p": {"args": [], "auth": [["str", 0.19087400399026996], ["Optional[Tuple[float, float]]", 0.1033624521739601]], "kwargs": [], "self": []}, "q_name": "TestHttpHook.test_default_auth_not_initialized", "ret_exprs": [], "ret_type": "", "variables": {"hook": "", "return_value": ""}, "variables_p": {"hook": [["str", 0.4999999999845869], ["int", 0.49999999996751665]], "return_value": [["str", 0.2634655102172568], ["int", 0.25350093926400447], ["Optional[bytes]", 0.12508630689673708], ["Dict[str, Dict[str, Any]]", 0.0986339214486634], ["Tuple[int, int]", 0.08950217541964084]]}}], "name": "TestHttpHook", "q_name": "TestHttpHook", "variables": {}, "variables_p": {}}, {"cls_lc": [[399, 0], [432, 37]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[400, 4], [415, 41]], "fn_var_ln": {"hook": [[408, 12], [408, 16]], "response": [[409, 12], [409, 20]], "return_value": [[412, 12], [412, 34]], "status_code": [[410, 12], [410, 32]]}, "fn_var_occur": {"hook": [["hook", "HttpHook", "method"], ["hook", "run"]], "response": [["response", "Response"], ["response", "status_code", "HTTPStatus", "OK"], ["tcp_keep_alive_send", "return_value", "response"], ["http_send", "return_value", "response"]], "return_value": [["tcp_keep_alive_send", "return_value", "response"], ["http_send", "return_value", "response"]], "status_code": [["response", "status_code", "HTTPStatus", "OK"]]}, "name": "test_keep_alive_enabled", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestKeepAlive.test_keep_alive_enabled", "ret_exprs": [], "ret_type": "", "variables": {"hook": "", "response": "", "return_value": "", "status_code": ""}, "variables_p": {"hook": [["int", 0.9999999995415298], ["str", 4.584702350492753e-10]], "response": [["int", 0.8700648214127071], ["http_server.responses.Response", 0.12993517858729295]], "return_value": [["int", 0.36317462829713754], ["str", 0.22179777552620583], ["Dict[str, Dict[str, Any]]", 0.1330445247756809], ["Dict[str, Optional[str]]", 0.07978320305105337]], "status_code": [["int", 0.4223978490242674], ["List[int]", 0.13263357606246456], ["Dict[int, Any]", 0.12138729313017946], ["Optional[str]", 0.07903638843217735], ["str", 0.07498404461757271]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[417, 4], [432, 37]], "fn_var_ln": {"hook": [[425, 12], [425, 16]], "response": [[426, 12], [426, 20]], "return_value": [[429, 12], [429, 34]], "status_code": [[427, 12], [427, 32]]}, "fn_var_occur": {"hook": [["hook", "HttpHook", "method", "tcp_keep_alive", "False"], ["hook", "run"]], "response": [["response", "Response"], ["response", "status_code", "HTTPStatus", "OK"], ["tcp_keep_alive_send", "return_value", "response"], ["http_send", "return_value", "response"]], "return_value": [["tcp_keep_alive_send", "return_value", "response"], ["http_send", "return_value", "response"]], "status_code": [["response", "status_code", "HTTPStatus", "OK"]]}, "name": "test_keep_alive_disabled", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestKeepAlive.test_keep_alive_disabled", "ret_exprs": [], "ret_type": "", "variables": {"hook": "", "response": "", "return_value": "", "status_code": ""}, "variables_p": {"hook": [["str", 0.9999999999999999]], "response": [["int", 0.8700648214127071], ["http_server.responses.Response", 0.12993517858729295]], "return_value": [["int", 0.36317462829713754], ["str", 0.22179777552620583], ["Dict[str, Dict[str, Any]]", 0.1330445247756809], ["Dict[str, Optional[str]]", 0.07978320305105337]], "status_code": [["int", 0.4223978490242674], ["List[int]", 0.13263357606246456], ["Dict[int, Any]", 0.12138729313017946], ["Optional[str]", 0.07903638843217735], ["str", 0.07498404461757271]]}}], "name": "TestKeepAlive", "q_name": "TestKeepAlive", "variables": {}, "variables_p": {}}], "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[40, 0], [41, 110]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "get_airflow_connection", "params": {"unused_conn_id": ""}, "params_descr": {"unused_conn_id": ""}, "params_occur": {"unused_conn_id": []}, "params_p": {"args": [], "kwargs": [], "unused_conn_id": [["str", 0.50000000004025], ["Optional[str]", 3.8656790286463316e-10], ["models.CloudConfig", 1.4964112608512405e-10]]}, "q_name": "get_airflow_connection", "ret_exprs": ["return Connection(conn_id=\"http_default\", conn_type=\"http\", host=\"test:8080/\", extra='{\"bareer\": \"test\"}')"], "ret_type": "", "ret_type_p": [["Dict[str, Any]", 0.19347961984677486], ["str", 0.19087611960907105], ["Optional[str]", 0.14650789099446415], ["int", 0.09796802490041227]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[44, 0], [45, 91]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "get_airflow_connection_with_port", "params": {"unused_conn_id": ""}, "params_descr": {"unused_conn_id": ""}, "params_occur": {"unused_conn_id": []}, "params_p": {"args": [], "kwargs": [], "unused_conn_id": [["str", 0.50000000004025], ["Optional[str]", 3.8656790286463316e-10], ["models.CloudConfig", 1.4964112608512405e-10]]}, "q_name": "get_airflow_connection_with_port", "ret_exprs": ["return Connection(conn_id=\"http_default\", conn_type=\"http\", host=\"test.com\", port=1234)"], "ret_type": "", "ret_type_p": [["Dict[str, Any]", 0.19347961984677486], ["str", 0.19087611960907105], ["Optional[str]", 0.14650789099446415], ["int", 0.09796802490041227]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[48, 0], [51, 5]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "get_airflow_connection_with_login_and_password", "params": {"unused_conn_id": ""}, "params_descr": {"unused_conn_id": ""}, "params_occur": {"unused_conn_id": []}, "params_p": {"args": [], "kwargs": [], "unused_conn_id": [["str", 0.5830329138628165], ["Optional[str]", 0.09404413306688779], ["models.CloudConfig", 0.04167725700035808]]}, "q_name": "get_airflow_connection_with_login_and_password", "ret_exprs": ["return Connection( conn_id=\"http_default\", conn_type=\"http\", host=\"test.com\", login=\"username\", password=\"pass\")"], "ret_type": "", "ret_type_p": [["str", 0.18950200750339782], ["Optional[str]", 0.13220731974394065], ["int", 0.10319539409395373], ["Dict[str, Any]", 0.09924625414068083]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Creates an mock async API response.", "long_descr": "This comes from a mock library specific to the aiohttp package:\nhttps://github.com/pnuckowski/aioresponses", "ret": null}, "fn_lc": [[439, 0], [447, 28]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "aioresponse", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "aioresponse", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Test api call asynchronously with non retryable error.", "long_descr": null, "ret": null}, "fn_lc": [[451, 0], [462, 46]], "fn_var_ln": {"hook": [[453, 4], [453, 8]]}, "fn_var_occur": {"hook": [["hook", "HttpAsyncHook", "method"], ["hook", "run", "endpoint"]]}, "name": "test_do_api_call_async_non_retryable_error", "params": {"aioresponse": ""}, "params_descr": {"aioresponse": ""}, "params_occur": {"aioresponse": [["aioresponse", "get", "status"]]}, "params_p": {"aioresponse": [["requests_mock.Mocker", 1.0]], "args": [], "kwargs": []}, "q_name": "test_do_api_call_async_non_retryable_error", "ret_exprs": [], "ret_type": "", "variables": {"hook": ""}, "variables_p": {"hook": [["str", 0.6259450747218112], ["List[str]", 0.19268661787863706], ["int", 0.0913006115565252], ["Dict[str, str]", 0.09006769584302649]]}}, {"docstring": {"func": "Test api call asynchronously with retryable error.", "long_descr": null, "ret": null}, "fn_lc": [[466, 0], [479, 99]], "fn_var_ln": {"hook": [[469, 4], [469, 8]]}, "fn_var_occur": {"hook": [["hook", "HttpAsyncHook", "method"], ["hook", "run", "endpoint"]]}, "name": "test_do_api_call_async_retryable_error", "params": {"aioresponse": "", "caplog": ""}, "params_descr": {"aioresponse": "", "caplog": ""}, "params_occur": {"aioresponse": [["aioresponse", "get", "status", "repeat", "True"]], "caplog": [["caplog", "set_level", "logging", "WARNING", "logger"], ["caplog", "text"]]}, "params_p": {"aioresponse": [["requests_mock.Mocker", 0.2788432733019073], ["str", 0.11111571041614603]], "args": [], "caplog": [["logging.Logger", 0.5066639252942617]], "kwargs": []}, "q_name": "test_do_api_call_async_retryable_error", "ret_exprs": [], "ret_type": "", "variables": {"hook": ""}, "variables_p": {"hook": [["str", 0.6259450747218112], ["List[str]", 0.19268661787863706], ["int", 0.0913006115565252], ["Dict[str, str]", 0.09006769584302649]]}}, {"docstring": {"func": "Test api call asynchronously for unknown method.", "long_descr": null, "ret": null}, "fn_lc": [[483, 0], [493, 59]], "fn_var_ln": {"hook": [[485, 4], [485, 8]], "json": [[486, 4], [486, 8]]}, "fn_var_occur": {"hook": [["hook", "HttpAsyncHook", "method"], ["hook", "run", "endpoint", "data", "json"]], "json": [["hook", "run", "endpoint", "data", "json"]]}, "name": "test_do_api_call_async_unknown_method", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "test_do_api_call_async_unknown_method", "ret_exprs": [], "ret_type": "", "variables": {"hook": "", "json": ""}, "variables_p": {"hook": [["str", 0.8829574065598598]], "json": [["ValueError", 0.10054762158628841]]}}, {"docstring": {"func": "Test api call asynchronously for POST request.", "long_descr": null, "ret": null}, "fn_lc": [[497, 0], [510, 33]], "fn_var_ln": {"hook": [[499, 4], [499, 8]], "resp": [[509, 8], [509, 12]]}, "fn_var_occur": {"hook": [["hook", "HttpAsyncHook"], ["resp", "hook", "run"]], "resp": [["resp", "hook", "run"], ["resp", "status"]]}, "name": "test_async_post_request", "params": {"aioresponse": ""}, "params_descr": {"aioresponse": ""}, "params_occur": {"aioresponse": [["aioresponse", "post", "status", "payload", "reason"]]}, "params_p": {"aioresponse": [["str", 0.2612203748055374], ["core.models.Grouping", 0.15284237738228573], ["requests_mock.Mocker", 0.08376206971058407]], "args": [], "kwargs": []}, "q_name": "test_async_post_request", "ret_exprs": [], "ret_type": "", "variables": {"hook": "", "resp": ""}, "variables_p": {"hook": [["bytearray", 0.14583623336515686], ["bytes", 0.14583623336515686], ["float", 0.09440144682382805]], "resp": [["List[float]", 0.12498405010229767], ["Set[str]", 0.10974147172404701], ["Pattern[str]", 0.10142487921503526], ["list", 0.10083398580372943], ["str", 0.09850720311751389], ["List[bool]", 0.09362929563596002], ["List[str]", 0.09203791387743734], ["property", 0.09155594489278228]]}}, {"docstring": {"func": "Test api call asynchronously for POST request with error.", "long_descr": null, "ret": null}, "fn_lc": [[514, 0], [527, 37]], "fn_var_ln": {"hook": [[516, 4], [516, 8]]}, "fn_var_occur": {"hook": [["hook", "HttpAsyncHook"], ["hook", "run"]]}, "name": "test_async_post_request_with_error_code", "params": {"aioresponse": ""}, "params_descr": {"aioresponse": ""}, "params_occur": {"aioresponse": [["aioresponse", "post", "status", "payload", "reason"]]}, "params_p": {"aioresponse": [["str", 0.2963410204763335], ["core.models.Grouping", 0.08408217356214173], ["requests_mock.Mocker", 0.0762516957672789]], "args": [], "kwargs": []}, "q_name": "test_async_post_request_with_error_code", "ret_exprs": [], "ret_type": "", "variables": {"hook": ""}, "variables_p": {"hook": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["Callable(functools.wraps)[[Named(wrapped, Callable[..., Any]), Named(assigned, Sequence[str], default), Named(updated, Sequence[str], default)], Callable[Any, Any]]", 0.1], ["str", 0.1]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[537, 4], [540, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "get_airflow_connection_with_extra", "params": {"unused_conn_id": ""}, "params_descr": {"unused_conn_id": ""}, "params_occur": {"unused_conn_id": []}, "params_p": {"args": [], "kwargs": [], "unused_conn_id": [["str", 0.50000000004025], ["Optional[str]", 3.8656790286463316e-10], ["models.CloudConfig", 1.4964112608512405e-10]]}, "q_name": "test_async_request_uses_connection_extra.<locals>.get_airflow_connection_with_extra", "ret_exprs": ["return Connection( conn_id=connection_id, conn_type=\"http\", host=\"test:8080/\", extra=json.dumps(connection_extra))"], "ret_type": "", "ret_type_p": [["bool", 0.11526334705275575], ["models.Payment", 0.08662589003442103]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Test api call asynchronously with a connection that has extra field.", "long_descr": null, "ret": null}, "fn_lc": [[531, 0], [556, 107]], "fn_var_ln": {"connection_extra": [[534, 4], [534, 20]], "connection_id": [[535, 4], [535, 17]], "headers": [[555, 12], [555, 19]], "hook": [[552, 8], [552, 12]]}, "fn_var_occur": {"connection_extra": [["all", "key", "headers", "headers", "key", "value", "key", "value", "connection_extra", "items"]], "connection_id": [], "headers": [["headers", "mocked_function", "call_args", "kwargs", "get"], ["all", "key", "headers", "headers", "key", "value", "key", "value", "connection_extra", "items"]], "hook": [["hook", "HttpAsyncHook"], ["hook", "run"]]}, "name": "test_async_request_uses_connection_extra", "params": {"aioresponse": ""}, "params_descr": {"aioresponse": ""}, "params_occur": {"aioresponse": [["aioresponse", "post", "status", "payload", "reason"]]}, "params_p": {"aioresponse": [["requests_mock.Mocker", 0.2902277851970201], ["str", 0.22398585891204104], ["core.models.Grouping", 0.088667836760876]], "args": [], "kwargs": []}, "q_name": "test_async_request_uses_connection_extra", "ret_exprs": [], "ret_type": "", "variables": {"connection_extra": "", "connection_id": "", "headers": "", "hook": ""}, "variables_p": {"connection_extra": [["str", 0.7823446394886794]], "connection_id": [["Optional[str]", 0.09999999999999999], ["int", 0.09999999999999999], ["List[int]", 0.09999999999999999], ["services.ticketing.transfer.models.TicketID", 0.09999999999999999], ["Type[models.User]", 0.09999999999999999], ["shop.transfer.models.ShopID", 0.09999999999999999], ["Type[pipeline.netfile.models.AbstractSchedule]", 0.09999999999999999]], "headers": [["Dict[str, Dict[str, Any]]", 0.26853374149642545], ["str", 0.23724564452961566], ["Dict[str, Union[Any, Any]]", 0.22353867413148534], ["Dict[str, Any]", 0.11334155681021485], ["Dict[str, List[Any]]", 0.08263688438429309], ["Dict[str, Union[None, Any, int]]", 0.07470349864796565]], "hook": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["Callable(functools.wraps)[[Named(wrapped, Callable[..., Any]), Named(assigned, Sequence[str], default), Named(updated, Sequence[str], default)], Callable[Any, Any]]", 0.1], ["str", 0.1]]}}], "imports": ["__future__", "annotations", "functools", "json", "logging", "os", "collections", "OrderedDict", "http", "HTTPStatus", "unittest", "mock", "pytest", "requests", "tenacity", "aioresponses", "aioresponses", "requests", "adapters", "Response", "requests", "auth", "AuthBase", "HTTPBasicAuth", "airflow", "exceptions", "AirflowException", "airflow", "models", "Connection", "airflow", "providers", "http", "hooks", "http", "HttpAsyncHook", "HttpHook", "requests_mock", "requests", "exceptions", "MissingSchema", "requests", "exceptions", "InvalidURL", "MissingSchema"], "mod_var_ln": {"send_email_test": [[435, 0], [435, 15]]}, "mod_var_occur": {"send_email_test": []}, "no_types_annot": {"D": 0, "I": 0, "U": 162}, "session_id": "8S2jZnBKU6IDKKy9KeBVSk92p60f_4-vm_IjxCsB7mQ", "set": null, "tc": [false, null], "type_annot_cove": 0.0, "typed_seq": "", "untyped_seq": "", "variables": {"send_email_test": ""}, "variables_p": {"send_email_test": [["int", 1.3289168553900475e-09], ["str", 1.1112615658777528e-09], ["bool", 9.463927267865303e-10]]}}}