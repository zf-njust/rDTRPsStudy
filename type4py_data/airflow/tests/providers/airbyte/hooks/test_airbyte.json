{"error": null, "response": {"classes": [{"cls_lc": [[30, 0], [164, 60]], "cls_var_ln": {"_mock_job_cancel_status": [[45, 4], [45, 27]], "_mock_job_status_success_response_body": [[44, 4], [44, 42]], "_mock_sync_conn_success_response_body": [[43, 4], [43, 41]], "airbyte_conn_id": [[35, 4], [35, 19]], "cancel_job_endpoint": [[40, 4], [40, 23]], "connection_id": [[36, 4], [36, 17]], "get_job_endpoint": [[39, 4], [39, 20]], "health_endpoint": [[42, 4], [42, 19]], "job_id": [[37, 4], [37, 10]], "sync_connection_endpoint": [[38, 4], [38, 28]]}, "cls_var_occur": {"_mock_job_cancel_status": [], "_mock_job_status_success_response_body": [], "_mock_sync_conn_success_response_body": [], "airbyte_conn_id": [], "cancel_job_endpoint": [], "connection_id": [], "get_job_endpoint": [], "health_endpoint": [], "job_id": [], "sync_connection_endpoint": []}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[47, 4], [53, 69]], "fn_var_ln": {"hook": [[53, 8], [53, 17]]}, "fn_var_occur": {"hook": [["self", "hook", "AirbyteHook", "airbyte_conn_id", "self", "airbyte_conn_id"]]}, "name": "setup_method", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "hook", "AirbyteHook", "airbyte_conn_id", "self", "airbyte_conn_id"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestAirbyteHook.setup_method", "ret_exprs": [], "ret_type": "", "variables": {"hook": ""}, "variables_p": {"hook": [["str", 0.19425792359410501], ["set", 0.11068914084013058], ["Dict[str, str]", 0.09509911668278458], ["dict", 0.09280596383048055]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[55, 4], [58, 23]], "fn_var_ln": {"response": [[56, 8], [56, 16]]}, "fn_var_occur": {"response": [["response", "mock", "Mock"], ["response", "json", "return_value", "status"]]}, "name": "return_value_get_job", "params": {"self": "", "status": ""}, "params_descr": {"self": "", "status": ""}, "params_occur": {"self": [], "status": [["response", "json", "return_value", "status"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "status": [["int", 0.3146072370944714], ["str", 0.3112054777201121], ["bool", 0.10895643172867471], ["list", 0.08656578845446734]]}, "q_name": "TestAirbyteHook.return_value_get_job", "ret_exprs": ["return response"], "ret_type": "", "ret_type_p": [["int", 0.3304848549005372], ["dict", 0.09682377481781128], ["Dict[str, str]", 0.0863015630179116], ["Dict[str, Union[str, int]]", 0.08560434780733024]], "variables": {"response": ""}, "variables_p": {"response": [["mock.Mock", 0.4044952514231537], ["Dict[str, str]", 0.12604287018914614]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[60, 4], [66, 72]], "fn_var_ln": {"resp": [[64, 8], [64, 12]]}, "fn_var_occur": {"resp": [["resp", "self", "hook", "submit_sync_connection", "connection_id", "self", "connection_id"], ["resp", "status_code"], ["resp", "json", "self", "_mock_sync_conn_success_response_body"]]}, "name": "test_submit_sync_connection", "params": {"requests_mock": "", "self": ""}, "params_descr": {"requests_mock": "", "self": ""}, "params_occur": {"requests_mock": [["requests_mock", "post", "self", "sync_connection_endpoint", "status_code", "json", "self", "_mock_sync_conn_success_response_body"]], "self": [["requests_mock", "post", "self", "sync_connection_endpoint", "status_code", "json", "self", "_mock_sync_conn_success_response_body"], ["resp", "self", "hook", "submit_sync_connection", "connection_id", "self", "connection_id"], ["resp", "json", "self", "_mock_sync_conn_success_response_body"]]}, "params_p": {"args": [], "kwargs": [], "requests_mock": [], "self": []}, "q_name": "TestAirbyteHook.test_submit_sync_connection", "ret_exprs": [], "ret_type": "", "variables": {"resp": ""}, "variables_p": {"resp": [["Dict[str, str]", 0.1752154616540387], ["Dict[str, Union[Any, Any, str]]", 0.12525350418098816], ["str", 0.11759043492025356], ["Dict[str, Dict[str, Any]]", 0.10330876380457592], ["Dict[Any, str]", 0.09530204404097314], ["Dict[int, str]", 0.09522809811277234], ["dict", 0.08875552218241517]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[68, 4], [74, 73]], "fn_var_ln": {"resp": [[72, 8], [72, 12]]}, "fn_var_occur": {"resp": [["resp", "self", "hook", "get_job", "job_id", "self", "job_id"], ["resp", "status_code"], ["resp", "json", "self", "_mock_job_status_success_response_body"]]}, "name": "test_get_job_status", "params": {"requests_mock": "", "self": ""}, "params_descr": {"requests_mock": "", "self": ""}, "params_occur": {"requests_mock": [["requests_mock", "post", "self", "get_job_endpoint", "status_code", "json", "self", "_mock_job_status_success_response_body"]], "self": [["requests_mock", "post", "self", "get_job_endpoint", "status_code", "json", "self", "_mock_job_status_success_response_body"], ["resp", "self", "hook", "get_job", "job_id", "self", "job_id"], ["resp", "json", "self", "_mock_job_status_success_response_body"]]}, "params_p": {"args": [], "kwargs": [], "requests_mock": [], "self": []}, "q_name": "TestAirbyteHook.test_get_job_status", "ret_exprs": [], "ret_type": "", "variables": {"resp": ""}, "variables_p": {"resp": [["Dict[str, str]", 0.5094306380926348], ["Dict[str, Callable[[], Any]]", 0.18379472829689686], ["str", 0.11575952956511726], ["Dict[str, Union[Any, Any]]", 0.09852020938271003], ["Dict[str, Optional[int]]", 0.09249489466264105]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[76, 4], [81, 38]], "fn_var_ln": {"resp": [[80, 8], [80, 12]]}, "fn_var_occur": {"resp": [["resp", "self", "hook", "cancel_job", "job_id", "self", "job_id"], ["resp", "status_code"]]}, "name": "test_cancel_job", "params": {"requests_mock": "", "self": ""}, "params_descr": {"requests_mock": "", "self": ""}, "params_occur": {"requests_mock": [["requests_mock", "post", "self", "cancel_job_endpoint", "status_code", "json", "self", "_mock_job_status_success_response_body"]], "self": [["requests_mock", "post", "self", "cancel_job_endpoint", "status_code", "json", "self", "_mock_job_status_success_response_body"], ["resp", "self", "hook", "cancel_job", "job_id", "self", "job_id"]]}, "params_p": {"args": [], "kwargs": [], "requests_mock": [], "self": []}, "q_name": "TestAirbyteHook.test_cancel_job", "ret_exprs": [], "ret_type": "", "variables": {"resp": ""}, "variables_p": {"resp": [["Dict[str, str]", 0.38778055831361974], ["List[Union[Any, Any, Any, str]]", 0.11099148721144743], ["DefaultDict[Any, int]", 0.10434230595656599], ["str", 0.09713169495752222], ["Dict[str, Dict[str, Any]]", 0.09414483591246638], ["dict", 0.09318105618199096]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[84, 4], [87, 64]], "fn_var_ln": {"side_effect": [[85, 8], [85, 32]]}, "fn_var_occur": {"side_effect": [["mock_get_job", "side_effect", "self", "return_value_get_job", "self", "hook", "SUCCEEDED"]]}, "name": "test_wait_for_job_succeeded", "params": {"mock_get_job": "", "self": ""}, "params_descr": {"mock_get_job": "", "self": ""}, "params_occur": {"mock_get_job": [["mock_get_job", "side_effect", "self", "return_value_get_job", "self", "hook", "SUCCEEDED"], ["mock_get_job", "assert_called_once_with", "job_id", "self", "job_id"]], "self": [["mock_get_job", "side_effect", "self", "return_value_get_job", "self", "hook", "SUCCEEDED"], ["self", "hook", "wait_for_job", "job_id", "self", "job_id", "wait_seconds"], ["mock_get_job", "assert_called_once_with", "job_id", "self", "job_id"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_job": [], "self": []}, "q_name": "TestAirbyteHook.test_wait_for_job_succeeded", "ret_exprs": [], "ret_type": "", "variables": {"side_effect": ""}, "variables_p": {"side_effect": [["Dict[str, Dict[str, Any]]", 0.11115458156213774], ["list", 0.08179131114966795]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[90, 4], [99, 44]], "fn_var_ln": {"calls": [[98, 8], [98, 13]], "side_effect": [[91, 8], [91, 32]]}, "fn_var_occur": {"calls": [["calls", "mock", "call", "job_id", "self", "job_id", "mock", "call", "job_id", "self", "job_id"], ["mock_get_job", "assert_has_calls", "calls"]], "side_effect": [["mock_get_job", "side_effect", "self", "return_value_get_job", "self", "hook", "RUNNING", "self", "return_value_get_job", "self", "hook", "ERROR"]]}, "name": "test_wait_for_job_error", "params": {"mock_get_job": "", "self": ""}, "params_descr": {"mock_get_job": "", "self": ""}, "params_occur": {"mock_get_job": [["mock_get_job", "side_effect", "self", "return_value_get_job", "self", "hook", "RUNNING", "self", "return_value_get_job", "self", "hook", "ERROR"], ["mock_get_job", "assert_has_calls", "calls"]], "self": [["mock_get_job", "side_effect", "self", "return_value_get_job", "self", "hook", "RUNNING", "self", "return_value_get_job", "self", "hook", "ERROR"], ["self", "hook", "wait_for_job", "job_id", "self", "job_id", "wait_seconds"], ["calls", "mock", "call", "job_id", "self", "job_id", "mock", "call", "job_id", "self", "job_id"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_job": [["bytes", 0.1203391350992408], ["Dict[str, str]", 0.100555073243458]], "self": []}, "q_name": "TestAirbyteHook.test_wait_for_job_error", "ret_exprs": [], "ret_type": "", "variables": {"calls": "", "side_effect": ""}, "variables_p": {"calls": [["list", 0.2685893465910371], ["Dict[str, Union[Any, Any, Any]]", 0.18966960689587498], ["mock._Call", 0.14743433223588692], ["mock.Mock", 0.10619581734188924], ["Dict[str, Union[Any, bool, str]]", 0.09483480344793749], ["Dict[str, Union[Any, Any]]", 0.09007162880590076]], "side_effect": [["str", 0.08971574682004275], ["Mapping", 0.08971574682004275], ["list", 0.07661525984570487], ["int", 0.07639203866145489]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[102, 4], [110, 44]], "fn_var_ln": {"calls": [[109, 8], [109, 13]], "side_effect": [[103, 8], [103, 32]]}, "fn_var_occur": {"calls": [["calls", "mock", "call", "job_id", "self", "job_id", "mock", "call", "job_id", "self", "job_id"], ["mock_get_job", "assert_has_calls", "calls"]], "side_effect": [["mock_get_job", "side_effect", "self", "return_value_get_job", "self", "hook", "INCOMPLETE", "self", "return_value_get_job", "self", "hook", "SUCCEEDED"]]}, "name": "test_wait_for_job_incomplete_succeeded", "params": {"mock_get_job": "", "self": ""}, "params_descr": {"mock_get_job": "", "self": ""}, "params_occur": {"mock_get_job": [["mock_get_job", "side_effect", "self", "return_value_get_job", "self", "hook", "INCOMPLETE", "self", "return_value_get_job", "self", "hook", "SUCCEEDED"], ["mock_get_job", "assert_has_calls", "calls"]], "self": [["mock_get_job", "side_effect", "self", "return_value_get_job", "self", "hook", "INCOMPLETE", "self", "return_value_get_job", "self", "hook", "SUCCEEDED"], ["self", "hook", "wait_for_job", "job_id", "self", "job_id", "wait_seconds"], ["calls", "mock", "call", "job_id", "self", "job_id", "mock", "call", "job_id", "self", "job_id"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_job": [["bytes", 0.1154734638245229], ["core.models.MyUser", 0.08817479239023833]], "self": []}, "q_name": "TestAirbyteHook.test_wait_for_job_incomplete_succeeded", "ret_exprs": [], "ret_type": "", "variables": {"calls": "", "side_effect": ""}, "variables_p": {"calls": [["list", 0.2685893465910371], ["Dict[str, Union[Any, Any, Any]]", 0.18966960689587498], ["mock._Call", 0.14743433223588692], ["mock.Mock", 0.10619581734188924], ["Dict[str, Union[Any, bool, str]]", 0.09483480344793749], ["Dict[str, Union[Any, Any]]", 0.09007162880590076]], "side_effect": [["str", 0.18974704783989743], ["Mapping", 0.10584052707720006], ["list", 0.08441853444893602]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[113, 4], [123, 47]], "fn_var_ln": {"calls": [[121, 8], [121, 13]], "side_effect": [[114, 8], [114, 32]]}, "fn_var_occur": {"calls": [["calls", "mock", "call", "job_id", "self", "job_id"], ["mock_get_job", "assert_has_calls", "calls"], ["mock_get_job", "mock_calls", "calls"]], "side_effect": [["mock_get_job", "side_effect", "self", "return_value_get_job", "self", "hook", "PENDING", "self", "return_value_get_job", "self", "hook", "RUNNING"]]}, "name": "test_wait_for_job_timeout", "params": {"mock_get_job": "", "self": ""}, "params_descr": {"mock_get_job": "", "self": ""}, "params_occur": {"mock_get_job": [["mock_get_job", "side_effect", "self", "return_value_get_job", "self", "hook", "PENDING", "self", "return_value_get_job", "self", "hook", "RUNNING"], ["mock_get_job", "assert_has_calls", "calls"], ["mock_get_job", "mock_calls", "calls"]], "self": [["mock_get_job", "side_effect", "self", "return_value_get_job", "self", "hook", "PENDING", "self", "return_value_get_job", "self", "hook", "RUNNING"], ["self", "hook", "wait_for_job", "job_id", "self", "job_id", "wait_seconds", "timeout"], ["calls", "mock", "call", "job_id", "self", "job_id"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_job": [["bytes", 0.10762411566145708]], "self": []}, "q_name": "TestAirbyteHook.test_wait_for_job_timeout", "ret_exprs": [], "ret_type": "", "variables": {"calls": "", "side_effect": ""}, "variables_p": {"calls": [["Dict[str, Union[Any, Any, Any]]", 0.19722583218826242], ["mock._Call", 0.13370811943298785], ["mock.Mock", 0.12094833459650423], ["Dict[str, Union[Any, Any]]", 0.09867990737961976], ["Dict[str, Union[Any, bool, str]]", 0.09861291609413121], ["List[str]", 0.0942254476630358], ["Dict[str, Any]", 0.08633004496685615], ["int", 0.0851346988393013]], "side_effect": [["str", 0.18974704783989743], ["Mapping", 0.10584052707720006], ["list", 0.08441853444893602]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[126, 4], [135, 44]], "fn_var_ln": {"calls": [[134, 8], [134, 13]], "side_effect": [[127, 8], [127, 32]]}, "fn_var_occur": {"calls": [["calls", "mock", "call", "job_id", "self", "job_id", "mock", "call", "job_id", "self", "job_id"], ["mock_get_job", "assert_has_calls", "calls"]], "side_effect": [["mock_get_job", "side_effect", "self", "return_value_get_job", "self", "hook", "RUNNING", "self", "return_value_get_job"]]}, "name": "test_wait_for_job_state_unrecognized", "params": {"mock_get_job": "", "self": ""}, "params_descr": {"mock_get_job": "", "self": ""}, "params_occur": {"mock_get_job": [["mock_get_job", "side_effect", "self", "return_value_get_job", "self", "hook", "RUNNING", "self", "return_value_get_job"], ["mock_get_job", "assert_has_calls", "calls"]], "self": [["mock_get_job", "side_effect", "self", "return_value_get_job", "self", "hook", "RUNNING", "self", "return_value_get_job"], ["self", "hook", "wait_for_job", "job_id", "self", "job_id", "wait_seconds"], ["calls", "mock", "call", "job_id", "self", "job_id", "mock", "call", "job_id", "self", "job_id"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_job": [], "self": []}, "q_name": "TestAirbyteHook.test_wait_for_job_state_unrecognized", "ret_exprs": [], "ret_type": "", "variables": {"calls": "", "side_effect": ""}, "variables_p": {"calls": [["list", 0.2685893465910371], ["Dict[str, Union[Any, Any, Any]]", 0.18966960689587498], ["mock._Call", 0.14743433223588692], ["mock.Mock", 0.10619581734188924], ["Dict[str, Union[Any, bool, str]]", 0.09483480344793749], ["Dict[str, Union[Any, Any]]", 0.09007162880590076]], "side_effect": [["str", 0.09018788567723095], ["Optional[bool]", 0.08753786222230839], ["int", 0.08690289658988834], ["vjemmie.utils.voting.VotingSession", 0.08545202325597688]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[138, 4], [147, 44]], "fn_var_ln": {"calls": [[146, 8], [146, 13]], "side_effect": [[139, 8], [139, 32]]}, "fn_var_occur": {"calls": [["calls", "mock", "call", "job_id", "self", "job_id", "mock", "call", "job_id", "self", "job_id"], ["mock_get_job", "assert_has_calls", "calls"]], "side_effect": [["mock_get_job", "side_effect", "self", "return_value_get_job", "self", "hook", "RUNNING", "self", "return_value_get_job", "self", "hook", "CANCELLED"]]}, "name": "test_wait_for_job_cancelled", "params": {"mock_get_job": "", "self": ""}, "params_descr": {"mock_get_job": "", "self": ""}, "params_occur": {"mock_get_job": [["mock_get_job", "side_effect", "self", "return_value_get_job", "self", "hook", "RUNNING", "self", "return_value_get_job", "self", "hook", "CANCELLED"], ["mock_get_job", "assert_has_calls", "calls"]], "self": [["mock_get_job", "side_effect", "self", "return_value_get_job", "self", "hook", "RUNNING", "self", "return_value_get_job", "self", "hook", "CANCELLED"], ["self", "hook", "wait_for_job", "job_id", "self", "job_id", "wait_seconds"], ["calls", "mock", "call", "job_id", "self", "job_id", "mock", "call", "job_id", "self", "job_id"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_job": [["bytes", 0.12232861753840507]], "self": []}, "q_name": "TestAirbyteHook.test_wait_for_job_cancelled", "ret_exprs": [], "ret_type": "", "variables": {"calls": "", "side_effect": ""}, "variables_p": {"calls": [["list", 0.2685893465910371], ["Dict[str, Union[Any, Any, Any]]", 0.18966960689587498], ["mock._Call", 0.14743433223588692], ["mock.Mock", 0.10619581734188924], ["Dict[str, Union[Any, bool, str]]", 0.09483480344793749], ["Dict[str, Union[Any, Any]]", 0.09007162880590076]], "side_effect": [["str", 0.08971574682004275], ["Mapping", 0.08971574682004275], ["list", 0.07661525984570487], ["int", 0.07639203866145489]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[149, 4], [157, 54]], "fn_var_ln": {"msg": [[155, 16], [155, 19]], "status": [[155, 8], [155, 14]]}, "fn_var_occur": {"msg": [["status", "msg", "self", "hook", "test_connection"]], "status": [["status", "msg", "self", "hook", "test_connection"], ["status", "True"]]}, "name": "test_connection_success", "params": {"requests_mock": "", "self": ""}, "params_descr": {"requests_mock": "", "self": ""}, "params_occur": {"requests_mock": [["requests_mock", "get", "self", "health_endpoint", "status_code"]], "self": [["requests_mock", "get", "self", "health_endpoint", "status_code"], ["status", "msg", "self", "hook", "test_connection"]]}, "params_p": {"args": [], "kwargs": [], "requests_mock": [["mock.Mock", 0.09632035607335952]], "self": []}, "q_name": "TestAirbyteHook.test_connection_success", "ret_exprs": [], "ret_type": "", "variables": {"msg": "", "status": ""}, "variables_p": {"msg": [["str", 0.39202411317564634], ["Tuple[Literal, Literal, Literal]", 0.10916495382756196], ["Type[Callable[Any, str]]", 0.1049019950647309], ["Optional[bool]", 0.10007823252784954], ["Dict[str, Any]", 0.09896818358956447], ["Final", 0.09654597108777738]], "status": [["str", 0.5742095244906419], ["Dict[Any, str]", 0.12384865629855586], ["Pattern[Any]", 0.10259058960510446], ["list", 0.09827173669193309]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[159, 4], [164, 60]], "fn_var_ln": {"msg": [[162, 16], [162, 19]], "status": [[162, 8], [162, 14]]}, "fn_var_occur": {"msg": [["status", "msg", "self", "hook", "test_connection"]], "status": [["status", "msg", "self", "hook", "test_connection"], ["status", "False"]]}, "name": "test_connection_failure", "params": {"requests_mock": "", "self": ""}, "params_descr": {"requests_mock": "", "self": ""}, "params_occur": {"requests_mock": [["requests_mock", "get", "self", "health_endpoint", "status_code", "json"]], "self": [["requests_mock", "get", "self", "health_endpoint", "status_code", "json"], ["status", "msg", "self", "hook", "test_connection"]]}, "params_p": {"args": [], "kwargs": [], "requests_mock": [["mock.Mock", 0.10318568768251085]], "self": []}, "q_name": "TestAirbyteHook.test_connection_failure", "ret_exprs": [], "ret_type": "", "variables": {"msg": "", "status": ""}, "variables_p": {"msg": [["str", 0.39202411317564634], ["Tuple[Literal, Literal, Literal]", 0.10916495382756196], ["Type[Callable[Any, str]]", 0.1049019950647309], ["Optional[bool]", 0.10007823252784954], ["Dict[str, Any]", 0.09896818358956447], ["Final", 0.09654597108777738]], "status": [["str", 0.18665291540680884], ["int", 0.17737017895031587], ["float", 0.11448812855792452], ["Pattern[Any]", 0.10234497510719598], ["Dict[str, Any]", 0.10046473846079472]]}}], "name": "TestAirbyteHook", "q_name": "TestAirbyteHook", "variables": {"_mock_job_cancel_status": "", "_mock_job_status_success_response_body": "", "_mock_sync_conn_success_response_body": "", "airbyte_conn_id": "", "cancel_job_endpoint": "", "connection_id": "", "get_job_endpoint": "", "health_endpoint": "", "job_id": "", "sync_connection_endpoint": ""}, "variables_p": {"_mock_job_cancel_status": [["int", 0.5046973553329822], ["str", 0.49530264466701784]], "_mock_job_status_success_response_body": [["str", 0.588567195227052], ["Callable[[], List[Any]]", 0.23074522966070599]], "_mock_sync_conn_success_response_body": [["str", 0.44009316039566865], ["int", 0.28362065781397217], ["List[str]", 0.09873279563664102], ["cmk.gui.plugins.wato.utils.main_menu.MainModuleTopic", 0.09142931263928557], ["bool", 0.08612407351443267]], "airbyte_conn_id": [["Optional[str]", 0.3], ["int", 0.3], ["str", 0.19999999999999998], ["Optional[int]", 0.09999999999999999]], "cancel_job_endpoint": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "connection_id": [["Optional[str]", 0.09999999999999999], ["int", 0.09999999999999999], ["List[int]", 0.09999999999999999], ["services.ticketing.transfer.models.TicketID", 0.09999999999999999], ["Type[models.User]", 0.09999999999999999], ["shop.transfer.models.ShopID", 0.09999999999999999], ["Type[pipeline.netfile.models.AbstractSchedule]", 0.09999999999999999]], "get_job_endpoint": [["str", 0.6], ["bool", 0.1], ["Type[bot_app.models.ConnectedApi]", 0.1]], "health_endpoint": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "job_id": [["Optional[str]", 0.09999999999999999], ["int", 0.09999999999999999], ["List[int]", 0.09999999999999999], ["services.ticketing.transfer.models.TicketID", 0.09999999999999999], ["Type[models.User]", 0.09999999999999999], ["shop.transfer.models.ShopID", 0.09999999999999999], ["Type[pipeline.netfile.models.AbstractSchedule]", 0.09999999999999999]], "sync_connection_endpoint": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]]}}], "funcs": [], "imports": ["__future__", "annotations", "unittest", "mock", "pytest", "airflow", "exceptions", "AirflowException", "airflow", "models", "Connection", "airflow", "providers", "airbyte", "hooks", "airbyte", "AirbyteHook", "airflow", "utils", "db"], "mod_var_ln": {}, "mod_var_occur": {}, "no_types_annot": {"D": 0, "I": 0, "U": 55}, "session_id": "on4lVFzL7mGqfP2GZdritEtqKdYoL6sF6RxMnnxTbL0", "set": null, "tc": [false, null], "type_annot_cove": 0.0, "typed_seq": "", "untyped_seq": "", "variables": {}, "variables_p": {}}}