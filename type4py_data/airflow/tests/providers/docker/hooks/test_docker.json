{"error": null, "response": {"classes": [], "funcs": [{"docstring": {"func": "Valid attributes for DockerHook.", "long_descr": null, "ret": null}, "fn_lc": [[43, 0], [51, 5]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "hook_kwargs", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "hook_kwargs", "ret_exprs": ["return { \"base_url\": TEST_BASE_URL, \"docker_conn_id\": \"docker_default\", \"tls\": False, \"version\": TEST_VERSION, \"timeout\": 42,}"], "ret_type": "", "ret_type_p": [["str", 1.0]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Hook shouldn't create client during initialisation and retrieve Airflow connection.", "long_descr": null, "ret": null}, "fn_lc": [[54, 0], [58, 49]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_no_connection_during_initialisation", "params": {"docker_api_client_patcher": "", "hook_conn": "", "hook_kwargs": ""}, "params_descr": {"docker_api_client_patcher": "", "hook_conn": "", "hook_kwargs": ""}, "params_occur": {"docker_api_client_patcher": [["docker_api_client_patcher", "assert_not_called"]], "hook_conn": [["hook_conn", "assert_not_called"]], "hook_kwargs": [["DockerHook", "hook_kwargs"]]}, "params_p": {"args": [], "docker_api_client_patcher": [], "hook_conn": [], "hook_kwargs": [["slice", 0.06986602725809793], ["str", 0.06804032602501615]], "kwargs": []}, "q_name": "test_no_connection_during_initialisation", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Test mandatory `base_url` Hook argument.", "long_descr": null, "ret": null}, "fn_lc": [[61, 0], [65, 33]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_init_fails_when_no_base_url_given", "params": {"hook_kwargs": ""}, "params_descr": {"hook_kwargs": ""}, "params_occur": {"hook_kwargs": [["hook_kwargs", "pop"], ["DockerHook", "hook_kwargs"]]}, "params_p": {"args": [], "hook_kwargs": [], "kwargs": []}, "q_name": "test_init_fails_when_no_base_url_given", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Test warning if user specified tls but use non-https scheme.", "long_descr": null, "ret": null}, "fn_lc": [[72, 0], [78, 96]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_init_warn_on_non_https_host_with_enabled_tls", "params": {"base_url": "", "caplog": "", "hook_kwargs": "", "tls_config": ""}, "params_descr": {"base_url": "", "caplog": "", "hook_kwargs": "", "tls_config": ""}, "params_occur": {"base_url": [["hook_kwargs", "base_url"]], "caplog": [["caplog", "set_level", "logging", "WARNING", "logger", "HOOK_LOGGER_NAME"], ["caplog", "messages"]], "hook_kwargs": [["hook_kwargs", "base_url"], ["hook_kwargs", "tls_config"], ["DockerHook", "hook_kwargs"]], "tls_config": [["hook_kwargs", "tls_config"]]}, "params_p": {"args": [], "base_url": [["Callable[[Any, Any], Any]", 0.10310171313937641], ["str", 0.10010866273346414]], "caplog": [["logging.Logger", 0.6152316160870037]], "hook_kwargs": [["int", 0.08027099715064989]], "kwargs": [], "tls_config": [["bool", 0.08372510578745151]]}, "q_name": "test_init_warn_on_non_https_host_with_enabled_tls", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Test if not provided optional arguments than Hook init nop failed.", "long_descr": null, "ret": null}, "fn_lc": [[82, 0], [85, 29]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_optional_hook_attributes", "params": {"hook_attr": "", "hook_kwargs": ""}, "params_descr": {"hook_attr": "", "hook_kwargs": ""}, "params_occur": {"hook_attr": [["hook_kwargs", "pop", "hook_attr"]], "hook_kwargs": [["hook_kwargs", "pop", "hook_attr"], ["DockerHook", "hook_kwargs"]]}, "params_p": {"args": [], "hook_attr": [["str", 0.4871805507371898], ["Callable", 0.14259434757772543], ["float", 0.11501522747511882], ["bool", 0.11388866273690348]], "hook_kwargs": [["str", 0.5694496967651654], ["Iterator[bytes]", 0.1299600480637715], ["Dict[str, Any]", 0.09836599136930142]], "kwargs": []}, "q_name": "test_optional_hook_attributes", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Test creation ``docker.APIClient`` from hook arguments.", "long_descr": "Additionally check:\n    - Is tls:// changed to https://\n    - Is ``api_client`` property and ``get_conn`` method cacheable.\n    - If `docker_conn_id` not provided that hook doesn't try access to Airflow Connections.", "ret": null}, "fn_lc": [[96, 0], [116, 38]], "fn_var_ln": {"api_client": [[111, 4], [111, 14]], "hook": [[105, 4], [105, 8]]}, "fn_var_occur": {"api_client": [["api_client", "hook", "api_client"], ["api_client", "hook", "get_conn"]], "hook": [["hook", "DockerHook", "docker_conn_id", "conn_id", "base_url", "TEST_TLS_BASE_URL", "version", "TEST_VERSION", "tls", "True", "timeout"], ["hook", "client_created", "False"], ["api_client", "hook", "api_client"], ["api_client", "hook", "get_conn"], ["hook", "client_created", "True"]]}, "name": "test_create_api_client", "params": {"caplog": "", "conn_id": "", "docker_api_client_patcher": "", "hook_conn": ""}, "params_descr": {"caplog": "", "conn_id": "", "docker_api_client_patcher": "", "hook_conn": ""}, "params_occur": {"caplog": [["caplog", "set_level", "logging", "DEBUG", "logger", "HOOK_LOGGER_NAME"], ["caplog", "messages"], ["caplog", "clear"]], "conn_id": [["hook", "DockerHook", "docker_conn_id", "conn_id", "base_url", "TEST_TLS_BASE_URL", "version", "TEST_VERSION", "tls", "True", "timeout"]], "docker_api_client_patcher": [["docker_api_client_patcher", "assert_called_once_with", "base_url", "TEST_HTTPS_BASE_URL", "version", "TEST_VERSION", "tls", "True", "timeout"]], "hook_conn": []}, "params_p": {"args": [], "caplog": [["logging.Logger", 0.4153853194302446], ["str", 0.18852286348308678], ["logging.Formatter", 0.10539083795574075], ["bool", 0.09811683686781567]], "conn_id": [["str", 0.10069127366670517], ["int", 0.09052811725363977]], "docker_api_client_patcher": [["str", 0.5684099161622866]], "hook_conn": [["bool", 0.12722940464256718], ["str", 0.10008472543783759], ["int", 0.10008472543783759]], "kwargs": []}, "q_name": "test_create_api_client", "ret_exprs": [], "ret_type": "", "variables": {"api_client": "", "hook": ""}, "variables_p": {"api_client": [], "hook": [["str", 0.29976526169875056], ["bool", 0.12188430138153607], ["list", 0.09835865720456417], ["Tuple[Literal, Literal]", 0.08916167445716731], ["Optional[List[str]]", 0.08562615150608686]]}}, {"docstring": {"func": "Test failures during creation ``docker.APIClient`` from hook arguments.", "long_descr": null, "ret": null}, "fn_lc": [[119, 0], [125, 39]], "fn_var_ln": {"hook": [[121, 4], [121, 8]], "side_effect": [[122, 4], [122, 41]]}, "fn_var_occur": {"hook": [["hook", "DockerHook", "base_url", "TEST_BASE_URL"], ["hook", "get_conn"], ["hook", "client_created", "False"]], "side_effect": [["docker_api_client_patcher", "side_effect", "Exception"]]}, "name": "test_failed_create_api_client", "params": {"docker_api_client_patcher": ""}, "params_descr": {"docker_api_client_patcher": ""}, "params_occur": {"docker_api_client_patcher": [["docker_api_client_patcher", "side_effect", "Exception"]]}, "params_p": {"args": [], "docker_api_client_patcher": [], "kwargs": []}, "q_name": "test_failed_create_api_client", "ret_exprs": [], "ret_type": "", "variables": {"hook": "", "side_effect": ""}, "variables_p": {"hook": [["str", 0.27801101560258756], ["list", 0.10344156555240104]], "side_effect": [["str", 0.8081905285340462], ["int", 0.19180947146595378]]}}, {"docstring": {"func": "Test success login to Docker Registry with provided connection.", "long_descr": null, "ret": null}, "fn_lc": [[178, 0], [185, 50]], "fn_var_ln": {"hook": [[183, 4], [183, 8]], "mock_login": [[180, 4], [180, 14]]}, "fn_var_occur": {"hook": [["hook", "DockerHook", "docker_conn_id", "TEST_CONN_ID", "base_url", "TEST_BASE_URL"], ["hook", "get_conn"]], "mock_login": [["mock_login", "mock", "MagicMock"], ["docker_api_client_patcher", "return_value", "login", "mock_login"], ["mock_login", "assert_called_once_with", "expected"]]}, "name": "test_success_login_to_registry", "params": {"docker_api_client_patcher": "", "expected": "builtins.dict", "hook_conn": ""}, "params_descr": {"docker_api_client_patcher": "", "expected": "", "hook_conn": ""}, "params_occur": {"docker_api_client_patcher": [["docker_api_client_patcher", "return_value", "login", "mock_login"]], "expected": [["mock_login", "assert_called_once_with", "expected"]], "hook_conn": []}, "params_p": {"args": [], "docker_api_client_patcher": [], "expected": [], "hook_conn": [], "kwargs": []}, "q_name": "test_success_login_to_registry", "ret_exprs": [], "ret_type": "", "variables": {"hook": "", "mock_login": ""}, "variables_p": {"hook": [["Dict[str, str]", 0.26251376308665353], ["str", 0.1892678507078846], ["bool", 0.17686827025484206], ["int", 0.09389700083244541], ["List[str]", 0.08926004511267233]], "mock_login": [["mock.Mock", 0.40808514992972406]]}}, {"docstring": {"func": "Test error during Docker Registry login.", "long_descr": null, "ret": null}, "fn_lc": [[188, 0], [196, 44]], "fn_var_ln": {"hook": [[193, 4], [193, 8]]}, "fn_var_occur": {"hook": [["hook", "DockerHook", "docker_conn_id", "TEST_CONN_ID", "base_url", "TEST_BASE_URL"], ["hook", "get_conn"]]}, "name": "test_failed_login_to_registry", "params": {"caplog": "", "docker_api_client_patcher": "", "hook_conn": ""}, "params_descr": {"caplog": "", "docker_api_client_patcher": "", "hook_conn": ""}, "params_occur": {"caplog": [["caplog", "set_level", "logging", "ERROR", "logger", "HOOK_LOGGER_NAME"], ["caplog", "messages"]], "docker_api_client_patcher": [["docker_api_client_patcher", "return_value", "login", "side_effect", "APIError"]], "hook_conn": []}, "params_p": {"args": [], "caplog": [["logging.Logger", 0.6421484919182769]], "docker_api_client_patcher": [["mock.MagicMock", 0.09088698315470996]], "hook_conn": [["Callable[[], int]", 0.10200183557816458]], "kwargs": []}, "q_name": "test_failed_login_to_registry", "ret_exprs": [], "ret_type": "", "variables": {"hook": ""}, "variables_p": {"hook": [["Dict[str, str]", 0.26251376308665353], ["str", 0.1892678507078846], ["bool", 0.17686827025484206], ["int", 0.09389700083244541], ["List[str]", 0.08926004511267233]]}}, {"docstring": {"func": "Test invalid/missing connection parameters.", "long_descr": null, "ret": null}, "fn_lc": [[229, 0], [233, 23]], "fn_var_ln": {"hook": [[231, 4], [231, 8]]}, "fn_var_occur": {"hook": [["hook", "DockerHook", "docker_conn_id", "TEST_CONN_ID", "base_url", "TEST_BASE_URL"], ["hook", "get_conn"]]}, "name": "test_invalid_conn_parameters", "params": {"docker_api_client_patcher": "", "error_message": "", "ex": "", "hook_conn": ""}, "params_descr": {"docker_api_client_patcher": "", "error_message": "", "ex": "", "hook_conn": ""}, "params_occur": {"docker_api_client_patcher": [], "error_message": [["pytest", "raises", "ex", "match", "error_message"]], "ex": [["pytest", "raises", "ex", "match", "error_message"]], "hook_conn": []}, "params_p": {"args": [], "docker_api_client_patcher": [["Dict[str, Any]", 0.09699574434439229]], "error_message": [["int", 0.19758701774858128]], "ex": [["int", 0.19758701774858128]], "hook_conn": [["Dict[str, Any]", 0.09699574434439229]], "kwargs": []}, "q_name": "test_invalid_conn_parameters", "ret_exprs": [], "ret_type": "", "variables": {"hook": ""}, "variables_p": {"hook": [["Dict[str, str]", 0.26251376308665353], ["str", 0.1892678507078846], ["bool", 0.17686827025484206], ["int", 0.09389700083244541], ["List[str]", 0.08926004511267233]]}}, {"docstring": {"func": "Test that return False on missing cert/keys arguments.", "long_descr": null, "ret": null}, "fn_lc": [[245, 0], [247, 65]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_construct_tls_config_missing_certs_args", "params": {"tls_params": "builtins.dict"}, "params_descr": {"tls_params": ""}, "params_occur": {"tls_params": [["DockerHook", "construct_tls_config", "tls_params", "False"]]}, "params_p": {"args": [], "kwargs": [], "tls_params": []}, "q_name": "test_construct_tls_config_missing_certs_args", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Test construct ``docker.tls.TLSConfig`` object.", "long_descr": null, "ret": null}, "fn_lc": [[259, 0], [272, 9]], "fn_var_ln": {"expected_call_args": [[262, 4], [262, 22]], "tls_params": [[261, 4], [261, 14]]}, "fn_var_occur": {"expected_call_args": [["expected_call_args", "True"], ["mock_tls_config", "assert_called_once_with", "expected_call_args", "assert_hostname", "assert_hostname", "ssl_version", "ssl_version"]], "tls_params": [["tls_params", "assert_hostname"], ["tls_params", "ssl_version"], ["DockerHook", "construct_tls_config", "tls_params"]]}, "name": "test_construct_tls_config", "params": {"assert_hostname": "", "ssl_version": ""}, "params_descr": {"assert_hostname": "", "ssl_version": ""}, "params_occur": {"assert_hostname": [["assert_hostname", "None"], ["tls_params", "assert_hostname"], ["mock_tls_config", "assert_called_once_with", "expected_call_args", "assert_hostname", "assert_hostname", "ssl_version", "ssl_version"]], "ssl_version": [["ssl_version", "None"], ["tls_params", "ssl_version"], ["mock_tls_config", "assert_called_once_with", "expected_call_args", "assert_hostname", "assert_hostname", "ssl_version", "ssl_version"]]}, "params_p": {"args": [], "assert_hostname": [["Optional[Tuple[float, float]]", 0.1241275063881582], ["dict", 0.0830418486446531], ["str", 0.0830418486446531]], "kwargs": [], "ssl_version": []}, "q_name": "test_construct_tls_config", "ret_exprs": [], "ret_type": "", "variables": {"expected_call_args": "", "tls_params": ""}, "variables_p": {"expected_call_args": [["float", 0.12709433090690025], ["List[int]", 0.11183434197984543], ["str", 0.09976998958817863], ["Tuple[int, int, int, int]", 0.09948598802247835], ["List[Tuple[str, Any]]", 0.09576449189481254], ["list", 0.09556343064843027], ["List[Tuple[int, str]]", 0.0917809253227838], ["Dict[str, Any]", 0.09175289831322522], ["List[List[Any]]", 0.0909746089304553]], "tls_params": []}}], "imports": ["__future__", "annotations", "logging", "ssl", "unittest", "mock", "pytest", "docker", "TLSConfig", "docker", "errors", "APIError", "airflow", "exceptions", "AirflowException", "AirflowNotFoundException", "airflow", "providers", "docker", "hooks", "docker", "DockerHook"], "mod_var_ln": {"HOOK_LOGGER_NAME": [[39, 0], [39, 16]], "MOCK_CONNECTION_NOT_EXISTS_EX": [[38, 0], [38, 29]], "MOCK_CONNECTION_NOT_EXIST_MSG": [[37, 0], [37, 29]], "TEST_BASE_URL": [[32, 0], [32, 13]], "TEST_CONN": [[36, 0], [36, 9]], "TEST_CONN_ID": [[31, 0], [31, 12]], "TEST_HTTPS_BASE_URL": [[34, 0], [34, 19]], "TEST_TLS_BASE_URL": [[33, 0], [33, 17]], "TEST_VERSION": [[35, 0], [35, 12]]}, "mod_var_occur": {"HOOK_LOGGER_NAME": [["caplog", "set_level", "logging", "WARNING", "logger", "HOOK_LOGGER_NAME"], ["caplog", "set_level", "logging", "DEBUG", "logger", "HOOK_LOGGER_NAME"], ["caplog", "set_level", "logging", "ERROR", "logger", "HOOK_LOGGER_NAME"]], "MOCK_CONNECTION_NOT_EXISTS_EX": [], "MOCK_CONNECTION_NOT_EXIST_MSG": [["MOCK_CONNECTION_NOT_EXISTS_EX", "AirflowNotFoundException", "MOCK_CONNECTION_NOT_EXIST_MSG"]], "TEST_BASE_URL": [["TEST_BASE_URL", "False", "TEST_VERSION"], ["hook", "DockerHook", "base_url", "TEST_BASE_URL"], ["hook", "DockerHook", "docker_conn_id", "TEST_CONN_ID", "base_url", "TEST_BASE_URL"], ["hook", "DockerHook", "docker_conn_id", "TEST_CONN_ID", "base_url", "TEST_BASE_URL"], ["hook", "DockerHook", "docker_conn_id", "TEST_CONN_ID", "base_url", "TEST_BASE_URL"]], "TEST_CONN": [], "TEST_CONN_ID": [["hook", "DockerHook", "docker_conn_id", "TEST_CONN_ID", "base_url", "TEST_BASE_URL"], ["hook", "DockerHook", "docker_conn_id", "TEST_CONN_ID", "base_url", "TEST_BASE_URL"], ["hook", "DockerHook", "docker_conn_id", "TEST_CONN_ID", "base_url", "TEST_BASE_URL"]], "TEST_HTTPS_BASE_URL": [["docker_api_client_patcher", "assert_called_once_with", "base_url", "TEST_HTTPS_BASE_URL", "version", "TEST_VERSION", "tls", "True", "timeout"]], "TEST_TLS_BASE_URL": [["hook", "DockerHook", "docker_conn_id", "conn_id", "base_url", "TEST_TLS_BASE_URL", "version", "TEST_VERSION", "tls", "True", "timeout"]], "TEST_VERSION": [["TEST_BASE_URL", "False", "TEST_VERSION"], ["hook", "DockerHook", "docker_conn_id", "conn_id", "base_url", "TEST_TLS_BASE_URL", "version", "TEST_VERSION", "tls", "True", "timeout"], ["docker_api_client_patcher", "assert_called_once_with", "base_url", "TEST_HTTPS_BASE_URL", "version", "TEST_VERSION", "tls", "True", "timeout"]]}, "no_types_annot": {"D": 2, "I": 0, "U": 57}, "session_id": "0oqzijZ0qOUQE5WteEQYV0sEKGso_kI1684qbAGPIAg", "set": null, "tc": [false, null], "type_annot_cove": 0.03, "typed_seq": "", "untyped_seq": "", "variables": {"HOOK_LOGGER_NAME": "", "MOCK_CONNECTION_NOT_EXISTS_EX": "", "MOCK_CONNECTION_NOT_EXIST_MSG": "", "TEST_BASE_URL": "", "TEST_CONN": "", "TEST_CONN_ID": "", "TEST_HTTPS_BASE_URL": "", "TEST_TLS_BASE_URL": "", "TEST_VERSION": ""}, "variables_p": {"HOOK_LOGGER_NAME": [["logging.Formatter", 0.6137885942521023], ["str", 0.11978473218948185], ["logging.Handler", 0.0945488269557687], ["logging.Logger", 0.08646934278449164], ["int", 0.08540850381815553]], "MOCK_CONNECTION_NOT_EXISTS_EX": [["Dict[str, Any]", 0.19999999999999996], ["str", 0.19999999999999996], ["Dict[str, Union[Any, str]]", 0.09999999999999998], ["Dict[str, Dict[str, str]]", 0.09999999999999998], ["dict", 0.09999999999999998], ["Dict[str, Union[Any, Any]]", 0.09999999999999998], ["Dict[str, Dict[str, Any]]", 0.09999999999999998]], "MOCK_CONNECTION_NOT_EXIST_MSG": [["Optional[bytes]", 0.1175811645145691], ["list", 0.0974179854481889], ["Dict[str, Union[Any, Any, Any]]", 0.09024543203204187], ["str", 0.08544334092396523], ["Dict[str, Union[Any, Any, Any, Any]]", 0.08441487721003643], ["List[Union[Any, Any, Any]]", 0.08441487721003643], ["List[Dict[str, str]]", 0.08403946547275916]], "TEST_BASE_URL": [["str", 0.784657168281311], ["Dict[str, str]", 0.12237747146350278], ["dict", 0.09296536025518638]], "TEST_CONN": [["List[Union[Any, Any]]", 0.39999999999999997], ["Dict[str, Any]", 0.19999999999999998], ["List[Dict[str, Any]]", 0.09999999999999999], ["str", 0.09999999999999999], ["List[Union[Any, Any, Any]]", 0.09999999999999999], ["bool", 0.09999999999999999]], "TEST_CONN_ID": [["str", 0.7857642257419534], ["int", 0.13209205723110995], ["Pattern[str]", 0.08214371702693678]], "TEST_HTTPS_BASE_URL": [["str", 1.0]], "TEST_TLS_BASE_URL": [["str", 0.8091075373387656], ["dict", 0.1908924626612343]], "TEST_VERSION": [["List[Dict[str, Any]]", 0.2597271855886512], ["Dict[str, str]", 0.24349888288566326], ["int", 0.10241692673932737], ["Dict[str, Any]", 0.09360205811137462], ["Dict[str, Dict[str, Any]]", 0.09255548357289703]]}}}