{"error": null, "response": {"classes": [{"cls_lc": [[63, 0], [141, 73]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": "Asserts that the GCSBlobTrigger correctly serializes its arguments", "long_descr": "and classpath.", "ret": null}, "fn_lc": [[64, 4], [78, 9]], "fn_var_ln": {"classpath": [[70, 8], [70, 17]], "kwargs": [[70, 19], [70, 25]]}, "fn_var_occur": {"classpath": [["classpath", "kwargs", "trigger", "serialize"]], "kwargs": [["classpath", "kwargs", "trigger", "serialize"], ["kwargs", "TEST_BUCKET", "TEST_OBJECT", "TEST_POLLING_INTERVAL", "TEST_GCP_CONN_ID", "TEST_HOOK_PARAMS"]]}, "name": "test_gcs_blob_trigger_serialization", "params": {"self": "", "trigger": ""}, "params_descr": {"self": "", "trigger": ""}, "params_occur": {"self": [], "trigger": [["classpath", "kwargs", "trigger", "serialize"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "trigger": [["antidote.providers.tag.TagProvider", 0.21603869508253054], ["str", 0.16352105402406064], ["Callable", 0.10688414078483373]]}, "q_name": "TestGCSBlobTrigger.test_gcs_blob_trigger_serialization", "ret_exprs": [], "ret_type": "", "variables": {"classpath": "", "kwargs": ""}, "variables_p": {"classpath": [["Set[str]", 0.4999999999750701], ["int", 0.49999999996228883], ["Dict[str, Union[int, str]]", 1.582796261262258e-11], ["List[str]", 1.3730011143514454e-11], ["str", 1.0971499556494418e-11], ["bool", 1.0865339793385232e-11]], "kwargs": [["Dict[str, Union[int, str]]", 0.18794028247565953], ["int", 0.13458536437235444], ["bool", 0.09894311547339944], ["staticmethod", 0.07808226633687841], ["dict", 0.07698915804088444], ["tuple", 0.07636536566617536]]}}, {"docstring": {"func": "Tests that the GCSBlobTrigger is success case", "long_descr": null, "ret": null}, "fn_lc": [[82, 4], [90, 82]], "fn_var_ln": {"actual": [[89, 8], [89, 14]], "generator": [[88, 8], [88, 17]], "return_value": [[86, 8], [86, 39]]}, "fn_var_occur": {"actual": [["actual", "generator", "asend", "None"], ["TriggerEvent", "actual"]], "generator": [["generator", "trigger", "run"], ["actual", "generator", "asend", "None"]], "return_value": [["mock_object_exists", "return_value"]]}, "name": "test_gcs_blob_trigger_success", "params": {"mock_object_exists": "", "self": "", "trigger": ""}, "params_descr": {"mock_object_exists": "", "self": "", "trigger": ""}, "params_occur": {"mock_object_exists": [["mock_object_exists", "return_value"]], "self": [], "trigger": [["generator", "trigger", "run"]]}, "params_p": {"args": [], "kwargs": [], "mock_object_exists": [["mock.Mock", 0.09184833365406136]], "self": [], "trigger": []}, "q_name": "TestGCSBlobTrigger.test_gcs_blob_trigger_success", "ret_exprs": [], "ret_type": "", "variables": {"actual": "", "generator": "", "return_value": ""}, "variables_p": {"actual": [["int", 0.19412407945911686], ["Tuple[Any, Any, Any, Any, Any, Any, Any]", 0.09850073403783119], ["Dict[str, float]", 0.08348205718629689], ["List[int]", 0.08277127376192583], ["Optional[str]", 0.07748136730496737]], "generator": [["kornia.augmentation.base._BasicAugmentationBase", 0.16174662751959534], ["Union[Literal, Literal]", 0.12016314415089882]], "return_value": [["list", 0.2310538081472759], ["float", 0.2148768641748539], ["List[Tuple[str, str, bytes]]", 0.09790772925240514], ["Tuple[int, int]", 0.09267950398663324], ["int", 0.09266991817001902], ["tests.mock.zwave.MockNode", 0.08900189597391767], ["List[str]", 0.08765749204567162]]}}, {"docstring": {"func": "Test that GCSBlobTrigger is in loop if file isn't found.", "long_descr": null, "ret": null}, "fn_lc": [[94, 4], [105, 39]], "fn_var_ln": {"return_value": [[98, 8], [98, 39]], "task": [[100, 8], [100, 12]]}, "fn_var_occur": {"return_value": [["mock_object_exists", "return_value"]], "task": [["task", "asyncio", "create_task", "trigger", "run", "__anext__"], ["task", "done", "False"]]}, "name": "test_gcs_blob_trigger_pending", "params": {"mock_object_exists": "", "self": "", "trigger": ""}, "params_descr": {"mock_object_exists": "", "self": "", "trigger": ""}, "params_occur": {"mock_object_exists": [["mock_object_exists", "return_value"]], "self": [], "trigger": [["task", "asyncio", "create_task", "trigger", "run", "__anext__"]]}, "params_p": {"args": [], "kwargs": [], "mock_object_exists": [["mock.Mock", 0.09184833365406136]], "self": [], "trigger": []}, "q_name": "TestGCSBlobTrigger.test_gcs_blob_trigger_pending", "ret_exprs": [], "ret_type": "", "variables": {"return_value": "", "task": ""}, "variables_p": {"return_value": [["list", 0.2310538081472759], ["float", 0.2148768641748539], ["List[Tuple[str, str, bytes]]", 0.09790772925240514], ["Tuple[int, int]", 0.09267950398663324], ["int", 0.09266991817001902], ["tests.mock.zwave.MockNode", 0.08900189597391767], ["List[str]", 0.08765749204567162]], "task": [["asyncio.tasks.Task[None]", 0.19643276539820578], ["List[str]", 0.11367958078351113], ["Dict[str, int]", 0.09946648513600341], ["asyncio.tasks.Task[Any]", 0.0829218957480618]]}}, {"docstring": {"func": "Tests the GCSBlobTrigger does fire if there is an exception.", "long_descr": null, "ret": null}, "fn_lc": [[109, 4], [117, 85]], "fn_var_ln": {"side_effect": [[113, 8], [113, 38]], "task": [[115, 8], [115, 12]]}, "fn_var_occur": {"side_effect": [["mock_object_exists", "side_effect", "AsyncMock", "side_effect", "Exception"]], "task": [["task", "i", "i", "trigger", "run"], ["len", "task"], ["TriggerEvent", "task"]]}, "name": "test_gcs_blob_trigger_exception", "params": {"mock_object_exists": "", "self": "", "trigger": ""}, "params_descr": {"mock_object_exists": "", "self": "", "trigger": ""}, "params_occur": {"mock_object_exists": [["mock_object_exists", "side_effect", "AsyncMock", "side_effect", "Exception"]], "self": [], "trigger": [["task", "i", "i", "trigger", "run"]]}, "params_p": {"args": [], "kwargs": [], "mock_object_exists": [["mock.Mock", 0.4989929982527671]], "self": [], "trigger": [["Iterable[int]", 0.08609627289345305]]}, "q_name": "TestGCSBlobTrigger.test_gcs_blob_trigger_exception", "ret_exprs": [], "ret_type": "", "variables": {"side_effect": "", "task": ""}, "variables_p": {"side_effect": [["int", 0.43355124561197594], ["bytes", 0.09937605663238973], ["Dict[str, Union[Any, Any, Any]]", 0.09209904716121263], ["Dict[str, Dict[str, Any]]", 0.09209904716121263], ["List[Dict[str, Any]]", 0.09209904716121263], ["list", 0.09209904716121263]], "task": [["int", 0.26408094420020856], ["str", 0.24454604595886914], ["List[int]", 0.1834850492947484]]}}, {"docstring": {"func": "Tests to check if a particular object in Google Cloud Storage", "long_descr": "is found or not", "ret": null}, "fn_lc": [[127, 4], [141, 73]], "fn_var_ln": {"bucket": [[135, 8], [135, 14]], "hook": [[132, 8], [132, 12]], "res": [[139, 8], [139, 11]], "storage": [[133, 8], [133, 15]]}, "fn_var_occur": {"bucket": [["bucket", "AsyncMock", "Bucket"], ["storage", "get_bucket", "return_value", "bucket"], ["bucket", "blob_exists", "return_value", "exists"], ["bucket", "blob_exists", "assert_called_once_with", "blob_name", "TEST_OBJECT"]], "hook": [["hook", "AsyncMock", "GCSAsyncHook"], ["hook", "get_storage_client", "return_value", "storage"], ["res", "trigger", "_object_exists", "hook", "TEST_BUCKET", "TEST_OBJECT"]], "res": [["res", "trigger", "_object_exists", "hook", "TEST_BUCKET", "TEST_OBJECT"], ["res", "response"]], "storage": [["storage", "AsyncMock", "Storage"], ["hook", "get_storage_client", "return_value", "storage"], ["storage", "get_bucket", "return_value", "bucket"]]}, "name": "test_object_exists", "params": {"exists": "", "response": "", "self": "", "trigger": ""}, "params_descr": {"exists": "", "response": "", "self": "", "trigger": ""}, "params_occur": {"exists": [["bucket", "blob_exists", "return_value", "exists"]], "response": [["res", "response"]], "self": [], "trigger": [["res", "trigger", "_object_exists", "hook", "TEST_BUCKET", "TEST_OBJECT"]]}, "params_p": {"args": [], "exists": [["Dict[str, str]", 0.06848856350901192]], "kwargs": [], "response": [["str", 0.30973274113686855], ["bool", 0.2891936258155794], ["Iterator", 0.0986121450892971]], "self": [], "trigger": [["str", 0.3835280433427165], ["bytes", 0.11782362695230185], ["Dict[str, Any]", 0.09631722077467665]]}, "q_name": "TestGCSBlobTrigger.test_object_exists", "ret_exprs": [], "ret_type": "", "variables": {"bucket": "", "hook": "", "res": "", "storage": ""}, "variables_p": {"bucket": [["str", 0.2801494277257198], ["dict", 0.19202557173648538]], "hook": [["str", 0.16298880809957722], ["List[str]", 0.12229337373382934], ["unittesmock._patch[Union[unittesmock.AsyncMock, unittesmock.MagicMock]]", 0.09544080688053815]], "res": [["bytes", 0.3187916129181676], ["Optional[bool]", 0.09782723690390228], ["int", 0.0948306702909829], ["str", 0.09241214181147087], ["Pattern[str]", 0.09209007479066661]], "storage": [["str", 0.11901529984681763], ["List[str]", 0.10357225838818876]]}}], "name": "TestGCSBlobTrigger", "q_name": "TestGCSBlobTrigger", "variables": {}, "variables_p": {}}, {"cls_lc": [[144, 0], [226, 69]], "cls_var_ln": {"TRIGGER": [[145, 4], [145, 11]]}, "cls_var_occur": {"TRIGGER": []}, "funcs": [{"docstring": {"func": "Asserts that the GCSPrefixBlobTrigger correctly serializes its arguments", "long_descr": "and classpath.", "ret": null}, "fn_lc": [[153, 4], [167, 9]], "fn_var_ln": {"classpath": [[159, 8], [159, 17]], "kwargs": [[159, 19], [159, 25]]}, "fn_var_occur": {"classpath": [["classpath", "kwargs", "self", "TRIGGER", "serialize"]], "kwargs": [["classpath", "kwargs", "self", "TRIGGER", "serialize"], ["kwargs", "TEST_BUCKET", "TEST_PREFIX", "TEST_POLLING_INTERVAL", "TEST_GCP_CONN_ID", "TEST_HOOK_PARAMS"]]}, "name": "test_gcs_prefix_blob_trigger_serialization", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["classpath", "kwargs", "self", "TRIGGER", "serialize"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestGCSPrefixBlobTrigger.test_gcs_prefix_blob_trigger_serialization", "ret_exprs": [], "ret_type": "", "variables": {"classpath": "", "kwargs": ""}, "variables_p": {"classpath": [["int", 0.9072467587489553], ["float", 0.09275324125104448]], "kwargs": [["tests.engine.cloud.test_cloud_flows.MockedCloudClient", 0.18822631265659692], ["bool", 0.11470244671991649]]}}, {"docstring": {"func": "Tests that the GCSPrefixBlobTrigger is success case", "long_descr": null, "ret": null}, "fn_lc": [[171, 4], [182, 9]], "fn_var_ln": {"actual": [[178, 8], [178, 14]], "generator": [[177, 8], [177, 17]], "return_value": [[175, 8], [175, 49]]}, "fn_var_occur": {"actual": [["actual", "generator", "asend", "None"], ["TriggerEvent", "actual"]], "generator": [["generator", "self", "TRIGGER", "run"], ["actual", "generator", "asend", "None"]], "return_value": [["mock_list_blobs_with_prefixs", "return_value"]]}, "name": "test_gcs_prefix_blob_trigger_success", "params": {"mock_list_blobs_with_prefixs": "", "self": ""}, "params_descr": {"mock_list_blobs_with_prefixs": "", "self": ""}, "params_occur": {"mock_list_blobs_with_prefixs": [["mock_list_blobs_with_prefixs", "return_value"]], "self": [["generator", "self", "TRIGGER", "run"]]}, "params_p": {"args": [], "kwargs": [], "mock_list_blobs_with_prefixs": [], "self": []}, "q_name": "TestGCSPrefixBlobTrigger.test_gcs_prefix_blob_trigger_success", "ret_exprs": [], "ret_type": "", "variables": {"actual": "", "generator": "", "return_value": ""}, "variables_p": {"actual": [["int", 0.19412407945911686], ["Tuple[Any, Any, Any, Any, Any, Any, Any]", 0.09850073403783119], ["Dict[str, float]", 0.08348205718629689], ["List[int]", 0.08277127376192583], ["Optional[str]", 0.07748136730496737]], "generator": [["float", 0.11160429968213009], ["dict", 0.09860471174282338], ["DefaultDict[str, Set[str]]", 0.09638409246411558]], "return_value": [["str", 0.27599496767196297], ["list", 0.18798702270380463], ["int", 0.12362941464667727], ["Dict[str, Any]", 0.0913853213308408], ["Dict[str, str]", 0.08349106125593549]]}}, {"docstring": {"func": "Tests the GCSPrefixBlobTrigger does fire if there is an exception.", "long_descr": null, "ret": null}, "fn_lc": [[186, 4], [194, 85]], "fn_var_ln": {"side_effect": [[190, 8], [190, 48]], "task": [[192, 8], [192, 12]]}, "fn_var_occur": {"side_effect": [["mock_list_blobs_with_prefixs", "side_effect", "AsyncMock", "side_effect", "Exception"]], "task": [["task", "i", "i", "self", "TRIGGER", "run"], ["len", "task"], ["TriggerEvent", "task"]]}, "name": "test_gcs_prefix_blob_trigger_exception", "params": {"mock_list_blobs_with_prefixs": "", "self": ""}, "params_descr": {"mock_list_blobs_with_prefixs": "", "self": ""}, "params_occur": {"mock_list_blobs_with_prefixs": [["mock_list_blobs_with_prefixs", "side_effect", "AsyncMock", "side_effect", "Exception"]], "self": [["task", "i", "i", "self", "TRIGGER", "run"]]}, "params_p": {"args": [], "kwargs": [], "mock_list_blobs_with_prefixs": [], "self": []}, "q_name": "TestGCSPrefixBlobTrigger.test_gcs_prefix_blob_trigger_exception", "ret_exprs": [], "ret_type": "", "variables": {"side_effect": "", "task": ""}, "variables_p": {"side_effect": [["Dict[str, Dict[str, Any]]", 0.3365839952312927], ["mock.MagicMock", 0.09564709214747089], ["str", 0.08005876440892619], ["Dict[str, Union[Any, Any, Any, Any]]", 0.06896818210487198]], "task": [["dict", 0.08634703812155624], ["Dict[str, float]", 0.0862222665001587], ["str", 0.08288875652529604]]}}, {"docstring": {"func": "Test that GCSPrefixBlobTrigger is in loop if file isn't found.", "long_descr": null, "ret": null}, "fn_lc": [[198, 4], [209, 39]], "fn_var_ln": {"return_value": [[202, 8], [202, 49]], "task": [[204, 8], [204, 12]]}, "fn_var_occur": {"return_value": [["mock_list_blobs_with_prefixs", "return_value"]], "task": [["task", "asyncio", "create_task", "self", "TRIGGER", "run", "__anext__"], ["task", "done", "False"]]}, "name": "test_gcs_prefix_blob_trigger_pending", "params": {"mock_list_blobs_with_prefixs": "", "self": ""}, "params_descr": {"mock_list_blobs_with_prefixs": "", "self": ""}, "params_occur": {"mock_list_blobs_with_prefixs": [["mock_list_blobs_with_prefixs", "return_value"]], "self": [["task", "asyncio", "create_task", "self", "TRIGGER", "run", "__anext__"]]}, "params_p": {"args": [], "kwargs": [], "mock_list_blobs_with_prefixs": [], "self": []}, "q_name": "TestGCSPrefixBlobTrigger.test_gcs_prefix_blob_trigger_pending", "ret_exprs": [], "ret_type": "", "variables": {"return_value": "", "task": ""}, "variables_p": {"return_value": [["str", 0.27599496767196297], ["list", 0.18798702270380463], ["int", 0.12362941464667727], ["Dict[str, Any]", 0.0913853213308408], ["Dict[str, str]", 0.08349106125593549]], "task": [["asyncio.tasks.Task[Any]", 0.23982604312238753], ["asyncio.tasks.Task[None]", 0.172053880956072]]}}, {"docstring": {"func": "Tests to check if a particular object in Google Cloud Storage", "long_descr": "is found or not", "ret": null}, "fn_lc": [[212, 4], [226, 69]], "fn_var_ln": {"bucket": [[220, 8], [220, 14]], "hook": [[217, 8], [217, 12]], "res": [[224, 8], [224, 11]], "storage": [[218, 8], [218, 15]]}, "fn_var_occur": {"bucket": [["bucket", "AsyncMock", "Bucket"], ["storage", "get_bucket", "return_value", "bucket"], ["bucket", "list_blobs", "return_value"], ["bucket", "list_blobs", "assert_called_once_with", "prefix", "TEST_PREFIX"]], "hook": [["hook", "AsyncMock", "GCSAsyncHook"], ["hook", "get_storage_client", "return_value", "storage"], ["res", "self", "TRIGGER", "_list_blobs_with_prefix", "hook", "TEST_BUCKET", "TEST_PREFIX"]], "res": [["res", "self", "TRIGGER", "_list_blobs_with_prefix", "hook", "TEST_BUCKET", "TEST_PREFIX"]], "storage": [["storage", "AsyncMock", "Storage"], ["hook", "get_storage_client", "return_value", "storage"], ["storage", "get_bucket", "return_value", "bucket"]]}, "name": "test_list_blobs_with_prefix", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["res", "self", "TRIGGER", "_list_blobs_with_prefix", "hook", "TEST_BUCKET", "TEST_PREFIX"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestGCSPrefixBlobTrigger.test_list_blobs_with_prefix", "ret_exprs": [], "ret_type": "", "variables": {"bucket": "", "hook": "", "res": "", "storage": ""}, "variables_p": {"bucket": [["str", 0.2976334474386948], ["Dict[str, Any]", 0.10271524153833705], ["bytes", 0.09401486412797821], ["Dict[str, Union[int, str]]", 0.09357787683609249], ["Dict[Any, Union[int, str]]", 0.08894264519478425]], "hook": [["unittesmock._patch[Union[unittesmock.AsyncMock, unittesmock.MagicMock]]", 0.10780265955538793], ["mock.NonCallableMock", 0.08763498541394983]], "res": [["str", 0.3082142451612199], ["Dict[str, Union[int, str]]", 0.2712322146079984], ["List[Tuple[float, float]]", 0.10365914887130444], ["List[str]", 0.08843294483355293]], "storage": [["str", 0.11901529984681763], ["List[str]", 0.10357225838818876]]}}], "name": "TestGCSPrefixBlobTrigger", "q_name": "TestGCSPrefixBlobTrigger", "variables": {"TRIGGER": ""}, "variables_p": {"TRIGGER": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]]}}, {"cls_lc": [[229, 0], [365, 39]], "cls_var_ln": {"TRIGGER": [[230, 4], [230, 11]]}, "cls_var_occur": {"TRIGGER": []}, "funcs": [{"docstring": {"func": "Asserts that the GCSCheckBlobUpdateTimeTrigger correctly serializes its arguments", "long_descr": "and classpath.", "ret": null}, "fn_lc": [[239, 4], [254, 9]], "fn_var_ln": {"classpath": [[245, 8], [245, 17]], "kwargs": [[245, 19], [245, 25]]}, "fn_var_occur": {"classpath": [["classpath", "kwargs", "self", "TRIGGER", "serialize"]], "kwargs": [["classpath", "kwargs", "self", "TRIGGER", "serialize"], ["kwargs", "TEST_BUCKET", "TEST_OBJECT", "TEST_TS_OBJECT", "TEST_POLLING_INTERVAL", "TEST_GCP_CONN_ID", "TEST_HOOK_PARAMS"]]}, "name": "test_gcs_blob_update_trigger_serialization", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["classpath", "kwargs", "self", "TRIGGER", "serialize"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestGCSCheckBlobUpdateTimeTrigger.test_gcs_blob_update_trigger_serialization", "ret_exprs": [], "ret_type": "", "variables": {"classpath": "", "kwargs": ""}, "variables_p": {"classpath": [["int", 0.9072467587489553], ["float", 0.09275324125104448]], "kwargs": [["raiden.storage.sqlite.EventRecord", 0.10244463584254142], ["bytes", 0.09687342839394318], ["bool", 0.09664039850790067]]}}, {"docstring": {"func": "Tests success case GCSCheckBlobUpdateTimeTrigger", "long_descr": null, "ret": null}, "fn_lc": [[260, 4], [268, 82]], "fn_var_ln": {"actual": [[267, 8], [267, 14]], "generator": [[266, 8], [266, 17]], "return_value": [[264, 8], [264, 38]]}, "fn_var_occur": {"actual": [["actual", "generator", "asend", "None"], ["TriggerEvent", "actual"]], "generator": [["generator", "self", "TRIGGER", "run"], ["actual", "generator", "asend", "None"]], "return_value": [["mock_blob_updated", "return_value", "True"]]}, "name": "test_gcs_blob_update_trigger_success", "params": {"mock_blob_updated": "", "self": ""}, "params_descr": {"mock_blob_updated": "", "self": ""}, "params_occur": {"mock_blob_updated": [["mock_blob_updated", "return_value", "True"]], "self": [["generator", "self", "TRIGGER", "run"]]}, "params_p": {"args": [], "kwargs": [], "mock_blob_updated": [], "self": []}, "q_name": "TestGCSCheckBlobUpdateTimeTrigger.test_gcs_blob_update_trigger_success", "ret_exprs": [], "ret_type": "", "variables": {"actual": "", "generator": "", "return_value": ""}, "variables_p": {"actual": [["int", 0.19412407945911686], ["Tuple[Any, Any, Any, Any, Any, Any, Any]", 0.09850073403783119], ["Dict[str, float]", 0.08348205718629689], ["List[int]", 0.08277127376192583], ["Optional[str]", 0.07748136730496737]], "generator": [["float", 0.11160429968213009], ["dict", 0.09860471174282338], ["DefaultDict[str, Set[str]]", 0.09638409246411558]], "return_value": [["list", 0.16029958167037964], ["List[str]", 0.14553720445254295], ["Optional[bytes]", 0.12694362101953677], ["str", 0.11176311340731358], ["Tuple[int, int]", 0.09377314312562458], ["int", 0.07926586939411204], ["Dict[str, Dict[str, Any]]", 0.06948960229955532]]}}, {"docstring": {"func": "Test that GCSCheckBlobUpdateTimeTrigger is in loop till file isn't updated.", "long_descr": null, "ret": null}, "fn_lc": [[274, 4], [285, 39]], "fn_var_ln": {"return_value": [[278, 8], [278, 38]], "task": [[280, 8], [280, 12]]}, "fn_var_occur": {"return_value": [["mock_blob_updated", "return_value", "False"]], "task": [["task", "asyncio", "create_task", "self", "TRIGGER", "run", "__anext__"], ["task", "done", "False"]]}, "name": "test_gcs_blob_update_trigger_pending", "params": {"mock_blob_updated": "", "self": ""}, "params_descr": {"mock_blob_updated": "", "self": ""}, "params_occur": {"mock_blob_updated": [["mock_blob_updated", "return_value", "False"]], "self": [["task", "asyncio", "create_task", "self", "TRIGGER", "run", "__anext__"]]}, "params_p": {"args": [], "kwargs": [], "mock_blob_updated": [], "self": []}, "q_name": "TestGCSCheckBlobUpdateTimeTrigger.test_gcs_blob_update_trigger_pending", "ret_exprs": [], "ret_type": "", "variables": {"return_value": "", "task": ""}, "variables_p": {"return_value": [["str", 0.32734597058835074], ["Dict[str, Dict[str, Any]]", 0.1580116078228232], ["float", 0.14163793755070184], ["Dict[str, Union[Any, int]]", 0.0840377256230441], ["list", 0.08311870144653177], ["set", 0.07561662443219579], ["int", 0.06772012563800678]], "task": [["asyncio.tasks.Task[Any]", 0.23982604312238753], ["asyncio.tasks.Task[None]", 0.172053880956072]]}}, {"docstring": {"func": "Tests the GCSCheckBlobUpdateTimeTrigger does fire if there is an exception.", "long_descr": null, "ret": null}, "fn_lc": [[291, 4], [299, 85]], "fn_var_ln": {"side_effect": [[295, 8], [295, 38]], "task": [[297, 8], [297, 12]]}, "fn_var_occur": {"side_effect": [["mock_object_exists", "side_effect", "AsyncMock", "side_effect", "Exception"]], "task": [["task", "i", "i", "self", "TRIGGER", "run"], ["len", "task"], ["TriggerEvent", "task"]]}, "name": "test_gcs_blob_update_trigger_exception", "params": {"mock_object_exists": "", "self": ""}, "params_descr": {"mock_object_exists": "", "self": ""}, "params_occur": {"mock_object_exists": [["mock_object_exists", "side_effect", "AsyncMock", "side_effect", "Exception"]], "self": [["task", "i", "i", "self", "TRIGGER", "run"]]}, "params_p": {"args": [], "kwargs": [], "mock_object_exists": [["mock.Mock", 0.3007746150142566]], "self": []}, "q_name": "TestGCSCheckBlobUpdateTimeTrigger.test_gcs_blob_update_trigger_exception", "ret_exprs": [], "ret_type": "", "variables": {"side_effect": "", "task": ""}, "variables_p": {"side_effect": [["int", 0.43355124561197594], ["bytes", 0.09937605663238973], ["Dict[str, Union[Any, Any, Any]]", 0.09209904716121263], ["Dict[str, Dict[str, Any]]", 0.09209904716121263], ["List[Dict[str, Any]]", 0.09209904716121263], ["list", 0.09209904716121263]], "task": [["dict", 0.08634703812155624], ["Dict[str, float]", 0.0862222665001587], ["str", 0.08288875652529604]]}}, {"docstring": {"func": "Tests to check if a particular object in Google Cloud Storage", "long_descr": "is found or not", "ret": null}, "fn_lc": [[317, 4], [337, 39]], "fn_var_ln": {"bucket": [[325, 8], [325, 14]], "hook": [[322, 8], [322, 12]], "res": [[336, 8], [336, 11]], "storage": [[323, 8], [323, 15]], "trigger": [[328, 8], [328, 15]]}, "fn_var_occur": {"bucket": [["bucket", "AsyncMock", "Bucket"], ["storage", "get_bucket", "return_value", "bucket"], ["bucket", "get_blob", "return_value", "updated", "blob_object_update_datetime"], ["trigger", "GCSCheckBlobUpdateTimeTrigger", "bucket", "TEST_BUCKET", "object_name", "TEST_OBJECT", "target_date", "ts_object", "poke_interval", "TEST_POLLING_INTERVAL", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "hook_params", "TEST_HOOK_PARAMS"]], "hook": [["hook", "AsyncMock", "GCSAsyncHook"], ["hook", "get_storage_client", "return_value", "storage"], ["res", "trigger", "_is_blob_updated_after", "hook", "TEST_BUCKET", "TEST_OBJECT", "ts_object"]], "res": [["res", "trigger", "_is_blob_updated_after", "hook", "TEST_BUCKET", "TEST_OBJECT", "ts_object"], ["res", "expected_response"]], "storage": [["storage", "AsyncMock", "Storage"], ["hook", "get_storage_client", "return_value", "storage"], ["storage", "get_bucket", "return_value", "bucket"]], "trigger": [["trigger", "GCSCheckBlobUpdateTimeTrigger", "bucket", "TEST_BUCKET", "object_name", "TEST_OBJECT", "target_date", "ts_object", "poke_interval", "TEST_POLLING_INTERVAL", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "hook_params", "TEST_HOOK_PARAMS"], ["res", "trigger", "_is_blob_updated_after", "hook", "TEST_BUCKET", "TEST_OBJECT", "ts_object"]]}, "name": "test_is_blob_updated_after", "params": {"blob_object_update_datetime": "", "expected_response": "", "self": "", "ts_object": ""}, "params_descr": {"blob_object_update_datetime": "", "expected_response": "", "self": "", "ts_object": ""}, "params_occur": {"blob_object_update_datetime": [["bucket", "get_blob", "return_value", "updated", "blob_object_update_datetime"]], "expected_response": [["res", "expected_response"]], "self": [], "ts_object": [["trigger", "GCSCheckBlobUpdateTimeTrigger", "bucket", "TEST_BUCKET", "object_name", "TEST_OBJECT", "target_date", "ts_object", "poke_interval", "TEST_POLLING_INTERVAL", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "hook_params", "TEST_HOOK_PARAMS"], ["res", "trigger", "_is_blob_updated_after", "hook", "TEST_BUCKET", "TEST_OBJECT", "ts_object"]]}, "params_p": {"args": [], "blob_object_update_datetime": [["str", 0.1232488147410468]], "expected_response": [["Callable", 0.5445150274562774], ["Callable[[float], float]", 0.08440683454285156]], "kwargs": [], "self": [], "ts_object": [["str", 0.3050933457847096], ["dict", 0.10483108406232801]]}, "q_name": "TestGCSCheckBlobUpdateTimeTrigger.test_is_blob_updated_after", "ret_exprs": [], "ret_type": "", "variables": {"bucket": "", "hook": "", "res": "", "storage": "", "trigger": ""}, "variables_p": {"bucket": [["int", 0.4992298600447055], ["str", 0.30752649661592824], ["Dict[str, Any]", 0.19324364333936625]], "hook": [["str", 0.16298880809957722], ["List[str]", 0.12229337373382934], ["unittesmock._patch[Union[unittesmock.AsyncMock, unittesmock.MagicMock]]", 0.09544080688053815]], "res": [["Optional[List[str]]", 0.12950070000190395], ["str", 0.0905033177880447]], "storage": [["str", 0.11901529984681763], ["List[str]", 0.10357225838818876]], "trigger": [["str", 0.4820133449122298], ["int", 0.2177741662210852], ["Dict[str, Any]", 0.10331346659817998]]}}, {"docstring": {"func": "Tests to check if a particular object in Google Cloud Storage", "long_descr": "is found or not", "ret": null}, "fn_lc": [[352, 4], [365, 39]], "fn_var_ln": {"bucket": [[360, 8], [360, 14]], "hook": [[357, 8], [357, 12]], "res": [[364, 8], [364, 11]], "storage": [[358, 8], [358, 15]]}, "fn_var_occur": {"bucket": [["bucket", "AsyncMock", "Bucket"], ["storage", "get_bucket", "return_value", "bucket"], ["bucket", "get_blob", "return_value", "blob_object"]], "hook": [["hook", "AsyncMock", "GCSAsyncHook"], ["hook", "get_storage_client", "return_value", "storage"], ["res", "self", "TRIGGER", "_is_blob_updated_after", "hook", "TEST_BUCKET", "TEST_OBJECT", "TEST_TS_OBJECT"]], "res": [["res", "self", "TRIGGER", "_is_blob_updated_after", "hook", "TEST_BUCKET", "TEST_OBJECT", "TEST_TS_OBJECT"], ["res", "expected_response"]], "storage": [["storage", "AsyncMock", "Storage"], ["hook", "get_storage_client", "return_value", "storage"], ["storage", "get_bucket", "return_value", "bucket"]]}, "name": "test_is_blob_updated_after_with_none", "params": {"blob_object": "", "expected_response": "", "self": ""}, "params_descr": {"blob_object": "", "expected_response": "", "self": ""}, "params_occur": {"blob_object": [["bucket", "get_blob", "return_value", "blob_object"]], "expected_response": [["res", "expected_response"]], "self": [["res", "self", "TRIGGER", "_is_blob_updated_after", "hook", "TEST_BUCKET", "TEST_OBJECT", "TEST_TS_OBJECT"]]}, "params_p": {"args": [], "blob_object": [["bytes", 0.14943103649210632], ["mock.MagicMock", 0.0769754650898355]], "expected_response": [["str", 0.22185060265805717], ["bool", 0.1025564795630643], ["Iterator", 0.1025564795630643], ["int", 0.09234672833306148]], "kwargs": [], "self": []}, "q_name": "TestGCSCheckBlobUpdateTimeTrigger.test_is_blob_updated_after_with_none", "ret_exprs": [], "ret_type": "", "variables": {"bucket": "", "hook": "", "res": "", "storage": ""}, "variables_p": {"bucket": [["int", 0.50578714569734], ["str", 0.30263939088824876], ["Dict[str, Any]", 0.09843116511426621], ["Dict[str, Union[Any, Any]]", 0.09314229830014518]], "hook": [["unittesmock._patch[Union[unittesmock.AsyncMock, unittesmock.MagicMock]]", 0.10088628483080483], ["mock.NonCallableMock", 0.08383433586231964], ["dict", 0.07609768855514439]], "res": [["list", 0.08614922599061262]], "storage": [["str", 0.11901529984681763], ["List[str]", 0.10357225838818876]]}}], "name": "TestGCSCheckBlobUpdateTimeTrigger", "q_name": "TestGCSCheckBlobUpdateTimeTrigger", "variables": {"TRIGGER": ""}, "variables_p": {"TRIGGER": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]]}}, {"cls_lc": [[368, 0], [543, 30]], "cls_var_ln": {"TRIGGER": [[369, 4], [369, 11]]}, "cls_var_occur": {"TRIGGER": []}, "funcs": [{"docstring": {"func": "Asserts that the GCSUploadSessionTrigger correctly serializes its arguments", "long_descr": "and classpath.", "ret": null}, "fn_lc": [[381, 4], [399, 9]], "fn_var_ln": {"classpath": [[387, 8], [387, 17]], "kwargs": [[387, 19], [387, 25]]}, "fn_var_occur": {"classpath": [["classpath", "kwargs", "self", "TRIGGER", "serialize"]], "kwargs": [["classpath", "kwargs", "self", "TRIGGER", "serialize"], ["kwargs", "TEST_BUCKET", "TEST_PREFIX", "TEST_POLLING_INTERVAL", "TEST_GCP_CONN_ID", "TEST_HOOK_PARAMS", "TEST_INACTIVITY_PERIOD", "TEST_MIN_OBJECTS", "TEST_PREVIOUS_OBJECTS", "TEST_ALLOW_DELETE"]]}, "name": "test_gcs_upload_session_trigger_serialization", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["classpath", "kwargs", "self", "TRIGGER", "serialize"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestGCSUploadSessionTrigger.test_gcs_upload_session_trigger_serialization", "ret_exprs": [], "ret_type": "", "variables": {"classpath": "", "kwargs": ""}, "variables_p": {"classpath": [["int", 0.9072467587489553], ["float", 0.09275324125104448]], "kwargs": [["tests.engine.cloud.test_cloud_flows.MockedCloudClient", 0.2833533048131147], ["bytes", 0.12703263529674244], ["raiden.storage.sqlite.EventRecord", 0.10025724637871], ["bool", 0.09713723918783428]]}}, {"docstring": {"func": "Test that GCSUploadSessionTrigger is in loop if Upload is still in progress till inactivity period.", "long_descr": null, "ret": null}, "fn_lc": [[404, 4], [416, 39]], "fn_var_ln": {"return_value": [[409, 8], [409, 36]], "task": [[411, 8], [411, 12]]}, "fn_var_occur": {"return_value": [["mock_is_bucket_updated", "return_value"], ["mock_list_blobs", "return_value", "TEST_PREVIOUS_OBJECTS"]], "task": [["task", "asyncio", "create_task", "self", "TRIGGER", "run", "__anext__"], ["task", "done", "False"]]}, "name": "test_gcs_upload_session_trigger_pending", "params": {"mock_is_bucket_updated": "", "mock_list_blobs": "", "self": ""}, "params_descr": {"mock_is_bucket_updated": "", "mock_list_blobs": "", "self": ""}, "params_occur": {"mock_is_bucket_updated": [["mock_is_bucket_updated", "return_value"]], "mock_list_blobs": [["mock_list_blobs", "return_value", "TEST_PREVIOUS_OBJECTS"]], "self": [["task", "asyncio", "create_task", "self", "TRIGGER", "run", "__anext__"]]}, "params_p": {"args": [], "kwargs": [], "mock_is_bucket_updated": [["mock.Mock", 0.09427773885820152]], "mock_list_blobs": [], "self": []}, "q_name": "TestGCSUploadSessionTrigger.test_gcs_upload_session_trigger_pending", "ret_exprs": [], "ret_type": "", "variables": {"return_value": "", "task": ""}, "variables_p": {"return_value": [["Optional[bytes]", 0.14831446670733078], ["int", 0.1352888036546032], ["datetime.datetime", 0.08471577393508102], ["Dict[str, Union[Any, Any, Any, Any]]", 0.07771833947078112], ["List[Union[Any, Any, Any]]", 0.07771833947078112], ["List[Dict[str, str]]", 0.07763598093083307]], "task": [["asyncio.tasks.Task[Any]", 0.23982604312238753], ["asyncio.tasks.Task[None]", 0.172053880956072]]}}, {"docstring": {"func": "Tests that the GCSUploadSessionTrigger is success case", "long_descr": null, "ret": null}, "fn_lc": [[427, 4], [438, 61]], "fn_var_ln": {"actual": [[437, 8], [437, 14]], "generator": [[436, 8], [436, 17]], "return_value": [[434, 8], [434, 36]]}, "fn_var_occur": {"actual": [["actual", "generator", "asend", "None"], ["TriggerEvent", "is_bucket_return_value", "actual"]], "generator": [["generator", "self", "TRIGGER", "run"], ["actual", "generator", "asend", "None"]], "return_value": [["mock_is_bucket_updated", "return_value", "is_bucket_return_value"], ["mock_list_blobs", "return_value", "TEST_PREVIOUS_OBJECTS"]]}, "name": "test_gcs_upload_session_trigger_success", "params": {"is_bucket_return_value": "", "mock_is_bucket_updated": "", "mock_list_blobs": "", "self": ""}, "params_descr": {"is_bucket_return_value": "", "mock_is_bucket_updated": "", "mock_list_blobs": "", "self": ""}, "params_occur": {"is_bucket_return_value": [["mock_is_bucket_updated", "return_value", "is_bucket_return_value"], ["TriggerEvent", "is_bucket_return_value", "actual"]], "mock_is_bucket_updated": [["mock_is_bucket_updated", "return_value", "is_bucket_return_value"]], "mock_list_blobs": [["mock_list_blobs", "return_value", "TEST_PREVIOUS_OBJECTS"]], "self": [["generator", "self", "TRIGGER", "run"]]}, "params_p": {"args": [], "is_bucket_return_value": [["mock.Mock", 0.3031288286412765]], "kwargs": [], "mock_is_bucket_updated": [], "mock_list_blobs": [], "self": []}, "q_name": "TestGCSUploadSessionTrigger.test_gcs_upload_session_trigger_success", "ret_exprs": [], "ret_type": "", "variables": {"actual": "", "generator": "", "return_value": ""}, "variables_p": {"actual": [["float", 0.12507920320681523], ["Dict[str, Optional[float]]", 0.09229562538645748], ["bool", 0.0802194860043449], ["list", 0.07658564402742757], ["Type[Dict[Any, Any]]", 0.06954229578168193]], "generator": [["float", 0.11160429968213009], ["dict", 0.09860471174282338], ["DefaultDict[str, Set[str]]", 0.09638409246411558]], "return_value": [["str", 0.24494797345294644], ["int", 0.225080723199082], ["Tuple[int, int]", 0.12028134311588969], ["Dict[str, Dict[str, Any]]", 0.11319143608553611], ["tests.mock.zwave.MockNode", 0.09789291662675947], ["Optional[bytes]", 0.08685889065727655]]}}, {"docstring": {"func": "Tests that the GCSUploadSessionTrigger is error case", "long_descr": null, "ret": null}, "fn_lc": [[449, 4], [460, 61]], "fn_var_ln": {"actual": [[459, 8], [459, 14]], "generator": [[458, 8], [458, 17]], "return_value": [[456, 8], [456, 36]]}, "fn_var_occur": {"actual": [["actual", "generator", "asend", "None"], ["TriggerEvent", "is_bucket_return_value", "actual"]], "generator": [["generator", "self", "TRIGGER", "run"], ["actual", "generator", "asend", "None"]], "return_value": [["mock_is_bucket_updated", "return_value", "is_bucket_return_value"], ["mock_list_blobs", "return_value", "TEST_PREVIOUS_OBJECTS"]]}, "name": "test_gcs_upload_session_trigger_error", "params": {"is_bucket_return_value": "", "mock_is_bucket_updated": "", "mock_list_blobs": "", "self": ""}, "params_descr": {"is_bucket_return_value": "", "mock_is_bucket_updated": "", "mock_list_blobs": "", "self": ""}, "params_occur": {"is_bucket_return_value": [["mock_is_bucket_updated", "return_value", "is_bucket_return_value"], ["TriggerEvent", "is_bucket_return_value", "actual"]], "mock_is_bucket_updated": [["mock_is_bucket_updated", "return_value", "is_bucket_return_value"]], "mock_list_blobs": [["mock_list_blobs", "return_value", "TEST_PREVIOUS_OBJECTS"]], "self": [["generator", "self", "TRIGGER", "run"]]}, "params_p": {"args": [], "is_bucket_return_value": [["mock.Mock", 0.4014359152167892]], "kwargs": [], "mock_is_bucket_updated": [], "mock_list_blobs": [], "self": []}, "q_name": "TestGCSUploadSessionTrigger.test_gcs_upload_session_trigger_error", "ret_exprs": [], "ret_type": "", "variables": {"actual": "", "generator": "", "return_value": ""}, "variables_p": {"actual": [["float", 0.12507920320681523], ["Dict[str, Optional[float]]", 0.09229562538645748], ["bool", 0.0802194860043449], ["list", 0.07658564402742757], ["Type[Dict[Any, Any]]", 0.06954229578168193]], "generator": [["float", 0.11160429968213009], ["dict", 0.09860471174282338], ["DefaultDict[str, Set[str]]", 0.09638409246411558]], "return_value": [["str", 0.24494797345294644], ["int", 0.225080723199082], ["Tuple[int, int]", 0.12028134311588969], ["Dict[str, Dict[str, Any]]", 0.11319143608553611], ["tests.mock.zwave.MockNode", 0.09789291662675947], ["Optional[bytes]", 0.08685889065727655]]}}, {"docstring": {"func": "Tests the GCSUploadSessionTrigger does fire if there is an exception.", "long_descr": null, "ret": null}, "fn_lc": [[464, 4], [472, 87]], "fn_var_ln": {"actual": [[471, 8], [471, 14]], "generator": [[470, 8], [470, 17]], "side_effect": [[468, 8], [468, 35]]}, "fn_var_occur": {"actual": [["actual", "generator", "asend", "None"], ["TriggerEvent", "actual"]], "generator": [["generator", "self", "TRIGGER", "run"], ["actual", "generator", "asend", "None"]], "side_effect": [["mock_list_blobs", "side_effect", "AsyncMock", "side_effect", "Exception"]]}, "name": "test_gcs_upload_session_trigger_exception", "params": {"mock_list_blobs": "", "self": ""}, "params_descr": {"mock_list_blobs": "", "self": ""}, "params_occur": {"mock_list_blobs": [["mock_list_blobs", "side_effect", "AsyncMock", "side_effect", "Exception"]], "self": [["generator", "self", "TRIGGER", "run"]]}, "params_p": {"args": [], "kwargs": [], "mock_list_blobs": [], "self": []}, "q_name": "TestGCSUploadSessionTrigger.test_gcs_upload_session_trigger_exception", "ret_exprs": [], "ret_type": "", "variables": {"actual": "", "generator": "", "side_effect": ""}, "variables_p": {"actual": [["int", 0.19412407945911686], ["Tuple[Any, Any, Any, Any, Any, Any, Any]", 0.09850073403783119], ["Dict[str, float]", 0.08348205718629689], ["List[int]", 0.08277127376192583], ["Optional[str]", 0.07748136730496737]], "generator": [["float", 0.11160429968213009], ["dict", 0.09860471174282338], ["DefaultDict[str, Set[str]]", 0.09638409246411558]], "side_effect": [["Dict[str, Dict[str, Any]]", 0.2800731076680759], ["property", 0.19063294827359756], ["Tuple[Literal, Literal]", 0.1762082223284229], ["str", 0.0945116977092523], ["list", 0.08301021896957185], ["mock.MagicMock", 0.07412079338569534]]}}, {"docstring": {"func": "Tests to check if there is less items or more items than expected and reset the inactivity period", "long_descr": "along with the proper status", "ret": null}, "fn_lc": [[481, 4], [499, 30]], "fn_var_ln": {"res": [[498, 8], [498, 11]], "trigger": [[487, 8], [487, 15]]}, "fn_var_occur": {"res": [["res", "trigger", "_is_bucket_updated", "current_objects", "current_objects"], ["res", "response"]], "trigger": [["trigger", "GCSUploadSessionTrigger", "TEST_BUCKET", "TEST_PREFIX", "TEST_POLLING_INTERVAL", "TEST_GCP_CONN_ID", "TEST_HOOK_PARAMS", "TEST_INACTIVITY_PERIOD", "TEST_MIN_OBJECTS", "TEST_PREVIOUS_OBJECTS", "allow_delete"], ["res", "trigger", "_is_bucket_updated", "current_objects", "current_objects"]]}, "name": "test_is_bucket_updated_pending_status", "params": {"allow_delete": "", "current_objects": "", "response": "", "self": ""}, "params_descr": {"allow_delete": "", "current_objects": "", "response": "", "self": ""}, "params_occur": {"allow_delete": [["trigger", "GCSUploadSessionTrigger", "TEST_BUCKET", "TEST_PREFIX", "TEST_POLLING_INTERVAL", "TEST_GCP_CONN_ID", "TEST_HOOK_PARAMS", "TEST_INACTIVITY_PERIOD", "TEST_MIN_OBJECTS", "TEST_PREVIOUS_OBJECTS", "allow_delete"]], "current_objects": [["res", "trigger", "_is_bucket_updated", "current_objects", "current_objects"]], "response": [["res", "response"]], "self": []}, "params_p": {"allow_delete": [["str", 0.12800507841918646]], "args": [], "current_objects": [["str", 0.5972062104535042], ["Optional[Callable[..., Any]]", 0.09252407107986761]], "kwargs": [], "response": [["str", 0.31763114622208344], ["int", 0.26218058917012554]], "self": []}, "q_name": "TestGCSUploadSessionTrigger.test_is_bucket_updated_pending_status", "ret_exprs": [], "ret_type": "", "variables": {"res": "", "trigger": ""}, "variables_p": {"res": [["Optional[Match[str]]", 0.1928138051863063], ["Pattern[str]", 0.09235216892058956], ["str", 0.07288988652996142]], "trigger": [["int", 0.3275616845553093], ["str", 0.10350849247316303]]}}, {"docstring": {"func": "Tests to check if inactivity period is finished and found min objects or not and return status", "long_descr": "based on that.", "ret": null}, "fn_lc": [[519, 4], [543, 30]], "fn_var_ln": {"last_activity_time": [[541, 8], [541, 34]], "res": [[542, 8], [542, 11]], "return_value": [[526, 8], [526, 30]], "trigger": [[530, 8], [530, 15]]}, "fn_var_occur": {"last_activity_time": [["mock_time", "return_value", "last_activity_time", "timedelta", "seconds", "last_activity_time", "datetime", "now"], ["trigger", "last_activity_time", "last_activity_time"]], "res": [["res", "trigger", "_is_bucket_updated", "current_objects", "TEST_PREVIOUS_OBJECTS"], ["res", "response"]], "return_value": [["mock_time", "return_value", "last_activity_time", "timedelta", "seconds", "last_activity_time", "datetime", "now"]], "trigger": [["trigger", "GCSUploadSessionTrigger", "TEST_BUCKET", "TEST_PREFIX", "TEST_POLLING_INTERVAL", "TEST_GCP_CONN_ID", "TEST_HOOK_PARAMS", "TEST_INACTIVITY_PERIOD", "min_objects", "TEST_PREVIOUS_OBJECTS", "TEST_ALLOW_DELETE"], ["trigger", "last_activity_time", "last_activity_time"], ["res", "trigger", "_is_bucket_updated", "current_objects", "TEST_PREVIOUS_OBJECTS"]]}, "name": "test_is_bucket_updated_success_failure_status", "params": {"last_activity_time": "", "min_objects": "", "mock_time": "", "response": "", "self": ""}, "params_descr": {"last_activity_time": "", "min_objects": "", "mock_time": "", "response": "", "self": ""}, "params_occur": {"last_activity_time": [["mock_time", "return_value", "last_activity_time", "timedelta", "seconds", "last_activity_time", "datetime", "now"], ["trigger", "last_activity_time", "last_activity_time"]], "min_objects": [["trigger", "GCSUploadSessionTrigger", "TEST_BUCKET", "TEST_PREFIX", "TEST_POLLING_INTERVAL", "TEST_GCP_CONN_ID", "TEST_HOOK_PARAMS", "TEST_INACTIVITY_PERIOD", "min_objects", "TEST_PREVIOUS_OBJECTS", "TEST_ALLOW_DELETE"]], "mock_time": [["mock_time", "return_value", "last_activity_time", "timedelta", "seconds", "last_activity_time", "datetime", "now"]], "response": [["res", "response"]], "self": []}, "params_p": {"args": [], "kwargs": [], "last_activity_time": [["int", 0.37855590431595354], ["bytes", 0.09961428399256647], ["str", 0.06476900026027115]], "min_objects": [["str", 0.19231274918697389], ["mock.MagicMock", 0.09829508408284313]], "mock_time": [["int", 0.35054083165327216], ["bool", 0.18133324336784848], ["Type[Any]", 0.09249719303452722]], "response": [["str", 0.3888197036773291], ["bool", 0.08814002034846108]], "self": []}, "q_name": "TestGCSUploadSessionTrigger.test_is_bucket_updated_success_failure_status", "ret_exprs": [], "ret_type": "", "variables": {"last_activity_time": "", "res": "", "return_value": "", "trigger": ""}, "variables_p": {"last_activity_time": [["int", 0.706780999448731], ["Pattern[Any]", 0.10566138554262591], ["Optional[int]", 0.10462692426700354], ["datetime.datetime.datetime", 0.08293069074163949]], "res": [["Pattern[str]", 0.22825027028287573], ["Optional[Match[str]]", 0.1320678627132944], ["list", 0.06976100029413958]], "return_value": [["List[Dict[str, Any]]", 0.23290422562416896], ["int", 0.2013343478547937], ["str", 0.19799579600903983], ["Dict[str, int]", 0.09563655675257363], ["datetime.datetime.datetime", 0.09168021098424815], ["float", 0.08637156356555058]], "trigger": [["int", 0.3275616845553093], ["str", 0.10350849247316303]]}}], "name": "TestGCSUploadSessionTrigger", "q_name": "TestGCSUploadSessionTrigger", "variables": {"TRIGGER": ""}, "variables_p": {"TRIGGER": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]]}}], "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[53, 0], [60, 5]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "trigger", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "trigger", "ret_exprs": ["return GCSBlobTrigger( bucket=TEST_BUCKET, object_name=TEST_OBJECT, poke_interval=TEST_POLLING_INTERVAL, google_cloud_conn_id=TEST_GCP_CONN_ID, hook_params=TEST_HOOK_PARAMS,)"], "ret_type": "", "ret_type_p": [["Iterable[str]", 0.12548694010215508], ["str", 0.1096693507379549], ["IO[str]", 0.08317302787490333]], "variables": {}, "variables_p": {}}], "imports": ["__future__", "annotations", "asyncio", "datetime", "datetime", "timedelta", "unittest", "mock", "unittest", "mock", "AsyncMock", "pytest", "gcloud", "aio", "storage", "Bucket", "Storage", "airflow", "providers", "google", "cloud", "hooks", "gcs", "GCSAsyncHook", "airflow", "providers", "google", "cloud", "triggers", "gcs", "GCSBlobTrigger", "GCSCheckBlobUpdateTimeTrigger", "GCSPrefixBlobTrigger", "GCSUploadSessionTrigger", "airflow", "triggers", "base", "TriggerEvent"], "mod_var_ln": {"TEST_ALLOW_DELETE": [[48, 0], [48, 17]], "TEST_BUCKET": [[37, 0], [37, 11]], "TEST_GCP_CONN_ID": [[40, 0], [40, 16]], "TEST_HOOK_PARAMS": [[42, 0], [42, 16]], "TEST_INACTIVITY_PERIOD": [[46, 0], [46, 22]], "TEST_MIN_OBJECTS": [[47, 0], [47, 16]], "TEST_OBJECT": [[38, 0], [38, 11]], "TEST_POLLING_INTERVAL": [[41, 0], [41, 21]], "TEST_PREFIX": [[39, 0], [39, 11]], "TEST_PREVIOUS_OBJECTS": [[49, 0], [49, 21]], "TEST_TS_OBJECT": [[43, 0], [43, 14]]}, "mod_var_occur": {"TEST_ALLOW_DELETE": [["TRIGGER", "GCSUploadSessionTrigger", "bucket", "TEST_BUCKET", "prefix", "TEST_PREFIX", "poke_interval", "TEST_POLLING_INTERVAL", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "hook_params", "TEST_HOOK_PARAMS", "inactivity_period", "TEST_INACTIVITY_PERIOD", "min_objects", "TEST_MIN_OBJECTS", "previous_objects", "TEST_PREVIOUS_OBJECTS", "allow_delete", "TEST_ALLOW_DELETE"], ["kwargs", "TEST_BUCKET", "TEST_PREFIX", "TEST_POLLING_INTERVAL", "TEST_GCP_CONN_ID", "TEST_HOOK_PARAMS", "TEST_INACTIVITY_PERIOD", "TEST_MIN_OBJECTS", "TEST_PREVIOUS_OBJECTS", "TEST_ALLOW_DELETE"], ["trigger", "GCSUploadSessionTrigger", "TEST_BUCKET", "TEST_PREFIX", "TEST_POLLING_INTERVAL", "TEST_GCP_CONN_ID", "TEST_HOOK_PARAMS", "TEST_INACTIVITY_PERIOD", "min_objects", "TEST_PREVIOUS_OBJECTS", "TEST_ALLOW_DELETE"]], "TEST_BUCKET": [["GCSBlobTrigger", "bucket", "TEST_BUCKET", "object_name", "TEST_OBJECT", "poke_interval", "TEST_POLLING_INTERVAL", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "hook_params", "TEST_HOOK_PARAMS"], ["kwargs", "TEST_BUCKET", "TEST_OBJECT", "TEST_POLLING_INTERVAL", "TEST_GCP_CONN_ID", "TEST_HOOK_PARAMS"], ["res", "trigger", "_object_exists", "hook", "TEST_BUCKET", "TEST_OBJECT"], ["TRIGGER", "GCSPrefixBlobTrigger", "bucket", "TEST_BUCKET", "prefix", "TEST_PREFIX", "poke_interval", "TEST_POLLING_INTERVAL", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "hook_params", "TEST_HOOK_PARAMS"], ["kwargs", "TEST_BUCKET", "TEST_PREFIX", "TEST_POLLING_INTERVAL", "TEST_GCP_CONN_ID", "TEST_HOOK_PARAMS"], ["res", "self", "TRIGGER", "_list_blobs_with_prefix", "hook", "TEST_BUCKET", "TEST_PREFIX"], ["TRIGGER", "GCSCheckBlobUpdateTimeTrigger", "bucket", "TEST_BUCKET", "object_name", "TEST_OBJECT", "target_date", "TEST_TS_OBJECT", "poke_interval", "TEST_POLLING_INTERVAL", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "hook_params", "TEST_HOOK_PARAMS"], ["kwargs", "TEST_BUCKET", "TEST_OBJECT", "TEST_TS_OBJECT", "TEST_POLLING_INTERVAL", "TEST_GCP_CONN_ID", "TEST_HOOK_PARAMS"], ["trigger", "GCSCheckBlobUpdateTimeTrigger", "bucket", "TEST_BUCKET", "object_name", "TEST_OBJECT", "target_date", "ts_object", "poke_interval", "TEST_POLLING_INTERVAL", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "hook_params", "TEST_HOOK_PARAMS"], ["res", "trigger", "_is_blob_updated_after", "hook", "TEST_BUCKET", "TEST_OBJECT", "ts_object"], ["res", "self", "TRIGGER", "_is_blob_updated_after", "hook", "TEST_BUCKET", "TEST_OBJECT", "TEST_TS_OBJECT"], ["TRIGGER", "GCSUploadSessionTrigger", "bucket", "TEST_BUCKET", "prefix", "TEST_PREFIX", "poke_interval", "TEST_POLLING_INTERVAL", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "hook_params", "TEST_HOOK_PARAMS", "inactivity_period", "TEST_INACTIVITY_PERIOD", "min_objects", "TEST_MIN_OBJECTS", "previous_objects", "TEST_PREVIOUS_OBJECTS", "allow_delete", "TEST_ALLOW_DELETE"], ["kwargs", "TEST_BUCKET", "TEST_PREFIX", "TEST_POLLING_INTERVAL", "TEST_GCP_CONN_ID", "TEST_HOOK_PARAMS", "TEST_INACTIVITY_PERIOD", "TEST_MIN_OBJECTS", "TEST_PREVIOUS_OBJECTS", "TEST_ALLOW_DELETE"], ["trigger", "GCSUploadSessionTrigger", "TEST_BUCKET", "TEST_PREFIX", "TEST_POLLING_INTERVAL", "TEST_GCP_CONN_ID", "TEST_HOOK_PARAMS", "TEST_INACTIVITY_PERIOD", "TEST_MIN_OBJECTS", "TEST_PREVIOUS_OBJECTS", "allow_delete"], ["trigger", "GCSUploadSessionTrigger", "TEST_BUCKET", "TEST_PREFIX", "TEST_POLLING_INTERVAL", "TEST_GCP_CONN_ID", "TEST_HOOK_PARAMS", "TEST_INACTIVITY_PERIOD", "min_objects", "TEST_PREVIOUS_OBJECTS", "TEST_ALLOW_DELETE"]], "TEST_GCP_CONN_ID": [["GCSBlobTrigger", "bucket", "TEST_BUCKET", "object_name", "TEST_OBJECT", "poke_interval", "TEST_POLLING_INTERVAL", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "hook_params", "TEST_HOOK_PARAMS"], ["kwargs", "TEST_BUCKET", "TEST_OBJECT", "TEST_POLLING_INTERVAL", "TEST_GCP_CONN_ID", "TEST_HOOK_PARAMS"], ["TRIGGER", "GCSPrefixBlobTrigger", "bucket", "TEST_BUCKET", "prefix", "TEST_PREFIX", "poke_interval", "TEST_POLLING_INTERVAL", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "hook_params", "TEST_HOOK_PARAMS"], ["kwargs", "TEST_BUCKET", "TEST_PREFIX", "TEST_POLLING_INTERVAL", "TEST_GCP_CONN_ID", "TEST_HOOK_PARAMS"], ["TRIGGER", "GCSCheckBlobUpdateTimeTrigger", "bucket", "TEST_BUCKET", "object_name", "TEST_OBJECT", "target_date", "TEST_TS_OBJECT", "poke_interval", "TEST_POLLING_INTERVAL", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "hook_params", "TEST_HOOK_PARAMS"], ["kwargs", "TEST_BUCKET", "TEST_OBJECT", "TEST_TS_OBJECT", "TEST_POLLING_INTERVAL", "TEST_GCP_CONN_ID", "TEST_HOOK_PARAMS"], ["trigger", "GCSCheckBlobUpdateTimeTrigger", "bucket", "TEST_BUCKET", "object_name", "TEST_OBJECT", "target_date", "ts_object", "poke_interval", "TEST_POLLING_INTERVAL", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "hook_params", "TEST_HOOK_PARAMS"], ["TRIGGER", "GCSUploadSessionTrigger", "bucket", "TEST_BUCKET", "prefix", "TEST_PREFIX", "poke_interval", "TEST_POLLING_INTERVAL", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "hook_params", "TEST_HOOK_PARAMS", "inactivity_period", "TEST_INACTIVITY_PERIOD", "min_objects", "TEST_MIN_OBJECTS", "previous_objects", "TEST_PREVIOUS_OBJECTS", "allow_delete", "TEST_ALLOW_DELETE"], ["kwargs", "TEST_BUCKET", "TEST_PREFIX", "TEST_POLLING_INTERVAL", "TEST_GCP_CONN_ID", "TEST_HOOK_PARAMS", "TEST_INACTIVITY_PERIOD", "TEST_MIN_OBJECTS", "TEST_PREVIOUS_OBJECTS", "TEST_ALLOW_DELETE"], ["trigger", "GCSUploadSessionTrigger", "TEST_BUCKET", "TEST_PREFIX", "TEST_POLLING_INTERVAL", "TEST_GCP_CONN_ID", "TEST_HOOK_PARAMS", "TEST_INACTIVITY_PERIOD", "TEST_MIN_OBJECTS", "TEST_PREVIOUS_OBJECTS", "allow_delete"], ["trigger", "GCSUploadSessionTrigger", "TEST_BUCKET", "TEST_PREFIX", "TEST_POLLING_INTERVAL", "TEST_GCP_CONN_ID", "TEST_HOOK_PARAMS", "TEST_INACTIVITY_PERIOD", "min_objects", "TEST_PREVIOUS_OBJECTS", "TEST_ALLOW_DELETE"]], "TEST_HOOK_PARAMS": [["GCSBlobTrigger", "bucket", "TEST_BUCKET", "object_name", "TEST_OBJECT", "poke_interval", "TEST_POLLING_INTERVAL", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "hook_params", "TEST_HOOK_PARAMS"], ["kwargs", "TEST_BUCKET", "TEST_OBJECT", "TEST_POLLING_INTERVAL", "TEST_GCP_CONN_ID", "TEST_HOOK_PARAMS"], ["TRIGGER", "GCSPrefixBlobTrigger", "bucket", "TEST_BUCKET", "prefix", "TEST_PREFIX", "poke_interval", "TEST_POLLING_INTERVAL", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "hook_params", "TEST_HOOK_PARAMS"], ["kwargs", "TEST_BUCKET", "TEST_PREFIX", "TEST_POLLING_INTERVAL", "TEST_GCP_CONN_ID", "TEST_HOOK_PARAMS"], ["TRIGGER", "GCSCheckBlobUpdateTimeTrigger", "bucket", "TEST_BUCKET", "object_name", "TEST_OBJECT", "target_date", "TEST_TS_OBJECT", "poke_interval", "TEST_POLLING_INTERVAL", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "hook_params", "TEST_HOOK_PARAMS"], ["kwargs", "TEST_BUCKET", "TEST_OBJECT", "TEST_TS_OBJECT", "TEST_POLLING_INTERVAL", "TEST_GCP_CONN_ID", "TEST_HOOK_PARAMS"], ["trigger", "GCSCheckBlobUpdateTimeTrigger", "bucket", "TEST_BUCKET", "object_name", "TEST_OBJECT", "target_date", "ts_object", "poke_interval", "TEST_POLLING_INTERVAL", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "hook_params", "TEST_HOOK_PARAMS"], ["TRIGGER", "GCSUploadSessionTrigger", "bucket", "TEST_BUCKET", "prefix", "TEST_PREFIX", "poke_interval", "TEST_POLLING_INTERVAL", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "hook_params", "TEST_HOOK_PARAMS", "inactivity_period", "TEST_INACTIVITY_PERIOD", "min_objects", "TEST_MIN_OBJECTS", "previous_objects", "TEST_PREVIOUS_OBJECTS", "allow_delete", "TEST_ALLOW_DELETE"], ["kwargs", "TEST_BUCKET", "TEST_PREFIX", "TEST_POLLING_INTERVAL", "TEST_GCP_CONN_ID", "TEST_HOOK_PARAMS", "TEST_INACTIVITY_PERIOD", "TEST_MIN_OBJECTS", "TEST_PREVIOUS_OBJECTS", "TEST_ALLOW_DELETE"], ["trigger", "GCSUploadSessionTrigger", "TEST_BUCKET", "TEST_PREFIX", "TEST_POLLING_INTERVAL", "TEST_GCP_CONN_ID", "TEST_HOOK_PARAMS", "TEST_INACTIVITY_PERIOD", "TEST_MIN_OBJECTS", "TEST_PREVIOUS_OBJECTS", "allow_delete"], ["trigger", "GCSUploadSessionTrigger", "TEST_BUCKET", "TEST_PREFIX", "TEST_POLLING_INTERVAL", "TEST_GCP_CONN_ID", "TEST_HOOK_PARAMS", "TEST_INACTIVITY_PERIOD", "min_objects", "TEST_PREVIOUS_OBJECTS", "TEST_ALLOW_DELETE"]], "TEST_INACTIVITY_PERIOD": [["TRIGGER", "GCSUploadSessionTrigger", "bucket", "TEST_BUCKET", "prefix", "TEST_PREFIX", "poke_interval", "TEST_POLLING_INTERVAL", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "hook_params", "TEST_HOOK_PARAMS", "inactivity_period", "TEST_INACTIVITY_PERIOD", "min_objects", "TEST_MIN_OBJECTS", "previous_objects", "TEST_PREVIOUS_OBJECTS", "allow_delete", "TEST_ALLOW_DELETE"], ["kwargs", "TEST_BUCKET", "TEST_PREFIX", "TEST_POLLING_INTERVAL", "TEST_GCP_CONN_ID", "TEST_HOOK_PARAMS", "TEST_INACTIVITY_PERIOD", "TEST_MIN_OBJECTS", "TEST_PREVIOUS_OBJECTS", "TEST_ALLOW_DELETE"], ["trigger", "GCSUploadSessionTrigger", "TEST_BUCKET", "TEST_PREFIX", "TEST_POLLING_INTERVAL", "TEST_GCP_CONN_ID", "TEST_HOOK_PARAMS", "TEST_INACTIVITY_PERIOD", "TEST_MIN_OBJECTS", "TEST_PREVIOUS_OBJECTS", "allow_delete"], ["trigger", "GCSUploadSessionTrigger", "TEST_BUCKET", "TEST_PREFIX", "TEST_POLLING_INTERVAL", "TEST_GCP_CONN_ID", "TEST_HOOK_PARAMS", "TEST_INACTIVITY_PERIOD", "min_objects", "TEST_PREVIOUS_OBJECTS", "TEST_ALLOW_DELETE"]], "TEST_MIN_OBJECTS": [["TRIGGER", "GCSUploadSessionTrigger", "bucket", "TEST_BUCKET", "prefix", "TEST_PREFIX", "poke_interval", "TEST_POLLING_INTERVAL", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "hook_params", "TEST_HOOK_PARAMS", "inactivity_period", "TEST_INACTIVITY_PERIOD", "min_objects", "TEST_MIN_OBJECTS", "previous_objects", "TEST_PREVIOUS_OBJECTS", "allow_delete", "TEST_ALLOW_DELETE"], ["kwargs", "TEST_BUCKET", "TEST_PREFIX", "TEST_POLLING_INTERVAL", "TEST_GCP_CONN_ID", "TEST_HOOK_PARAMS", "TEST_INACTIVITY_PERIOD", "TEST_MIN_OBJECTS", "TEST_PREVIOUS_OBJECTS", "TEST_ALLOW_DELETE"], ["trigger", "GCSUploadSessionTrigger", "TEST_BUCKET", "TEST_PREFIX", "TEST_POLLING_INTERVAL", "TEST_GCP_CONN_ID", "TEST_HOOK_PARAMS", "TEST_INACTIVITY_PERIOD", "TEST_MIN_OBJECTS", "TEST_PREVIOUS_OBJECTS", "allow_delete"]], "TEST_OBJECT": [["GCSBlobTrigger", "bucket", "TEST_BUCKET", "object_name", "TEST_OBJECT", "poke_interval", "TEST_POLLING_INTERVAL", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "hook_params", "TEST_HOOK_PARAMS"], ["kwargs", "TEST_BUCKET", "TEST_OBJECT", "TEST_POLLING_INTERVAL", "TEST_GCP_CONN_ID", "TEST_HOOK_PARAMS"], ["res", "trigger", "_object_exists", "hook", "TEST_BUCKET", "TEST_OBJECT"], ["bucket", "blob_exists", "assert_called_once_with", "blob_name", "TEST_OBJECT"], ["TRIGGER", "GCSCheckBlobUpdateTimeTrigger", "bucket", "TEST_BUCKET", "object_name", "TEST_OBJECT", "target_date", "TEST_TS_OBJECT", "poke_interval", "TEST_POLLING_INTERVAL", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "hook_params", "TEST_HOOK_PARAMS"], ["kwargs", "TEST_BUCKET", "TEST_OBJECT", "TEST_TS_OBJECT", "TEST_POLLING_INTERVAL", "TEST_GCP_CONN_ID", "TEST_HOOK_PARAMS"], ["trigger", "GCSCheckBlobUpdateTimeTrigger", "bucket", "TEST_BUCKET", "object_name", "TEST_OBJECT", "target_date", "ts_object", "poke_interval", "TEST_POLLING_INTERVAL", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "hook_params", "TEST_HOOK_PARAMS"], ["res", "trigger", "_is_blob_updated_after", "hook", "TEST_BUCKET", "TEST_OBJECT", "ts_object"], ["res", "self", "TRIGGER", "_is_blob_updated_after", "hook", "TEST_BUCKET", "TEST_OBJECT", "TEST_TS_OBJECT"]], "TEST_POLLING_INTERVAL": [["GCSBlobTrigger", "bucket", "TEST_BUCKET", "object_name", "TEST_OBJECT", "poke_interval", "TEST_POLLING_INTERVAL", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "hook_params", "TEST_HOOK_PARAMS"], ["kwargs", "TEST_BUCKET", "TEST_OBJECT", "TEST_POLLING_INTERVAL", "TEST_GCP_CONN_ID", "TEST_HOOK_PARAMS"], ["TRIGGER", "GCSPrefixBlobTrigger", "bucket", "TEST_BUCKET", "prefix", "TEST_PREFIX", "poke_interval", "TEST_POLLING_INTERVAL", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "hook_params", "TEST_HOOK_PARAMS"], ["kwargs", "TEST_BUCKET", "TEST_PREFIX", "TEST_POLLING_INTERVAL", "TEST_GCP_CONN_ID", "TEST_HOOK_PARAMS"], ["TRIGGER", "GCSCheckBlobUpdateTimeTrigger", "bucket", "TEST_BUCKET", "object_name", "TEST_OBJECT", "target_date", "TEST_TS_OBJECT", "poke_interval", "TEST_POLLING_INTERVAL", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "hook_params", "TEST_HOOK_PARAMS"], ["kwargs", "TEST_BUCKET", "TEST_OBJECT", "TEST_TS_OBJECT", "TEST_POLLING_INTERVAL", "TEST_GCP_CONN_ID", "TEST_HOOK_PARAMS"], ["trigger", "GCSCheckBlobUpdateTimeTrigger", "bucket", "TEST_BUCKET", "object_name", "TEST_OBJECT", "target_date", "ts_object", "poke_interval", "TEST_POLLING_INTERVAL", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "hook_params", "TEST_HOOK_PARAMS"], ["TRIGGER", "GCSUploadSessionTrigger", "bucket", "TEST_BUCKET", "prefix", "TEST_PREFIX", "poke_interval", "TEST_POLLING_INTERVAL", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "hook_params", "TEST_HOOK_PARAMS", "inactivity_period", "TEST_INACTIVITY_PERIOD", "min_objects", "TEST_MIN_OBJECTS", "previous_objects", "TEST_PREVIOUS_OBJECTS", "allow_delete", "TEST_ALLOW_DELETE"], ["kwargs", "TEST_BUCKET", "TEST_PREFIX", "TEST_POLLING_INTERVAL", "TEST_GCP_CONN_ID", "TEST_HOOK_PARAMS", "TEST_INACTIVITY_PERIOD", "TEST_MIN_OBJECTS", "TEST_PREVIOUS_OBJECTS", "TEST_ALLOW_DELETE"], ["trigger", "GCSUploadSessionTrigger", "TEST_BUCKET", "TEST_PREFIX", "TEST_POLLING_INTERVAL", "TEST_GCP_CONN_ID", "TEST_HOOK_PARAMS", "TEST_INACTIVITY_PERIOD", "TEST_MIN_OBJECTS", "TEST_PREVIOUS_OBJECTS", "allow_delete"], ["trigger", "GCSUploadSessionTrigger", "TEST_BUCKET", "TEST_PREFIX", "TEST_POLLING_INTERVAL", "TEST_GCP_CONN_ID", "TEST_HOOK_PARAMS", "TEST_INACTIVITY_PERIOD", "min_objects", "TEST_PREVIOUS_OBJECTS", "TEST_ALLOW_DELETE"]], "TEST_PREFIX": [["TRIGGER", "GCSPrefixBlobTrigger", "bucket", "TEST_BUCKET", "prefix", "TEST_PREFIX", "poke_interval", "TEST_POLLING_INTERVAL", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "hook_params", "TEST_HOOK_PARAMS"], ["kwargs", "TEST_BUCKET", "TEST_PREFIX", "TEST_POLLING_INTERVAL", "TEST_GCP_CONN_ID", "TEST_HOOK_PARAMS"], ["res", "self", "TRIGGER", "_list_blobs_with_prefix", "hook", "TEST_BUCKET", "TEST_PREFIX"], ["bucket", "list_blobs", "assert_called_once_with", "prefix", "TEST_PREFIX"], ["TRIGGER", "GCSUploadSessionTrigger", "bucket", "TEST_BUCKET", "prefix", "TEST_PREFIX", "poke_interval", "TEST_POLLING_INTERVAL", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "hook_params", "TEST_HOOK_PARAMS", "inactivity_period", "TEST_INACTIVITY_PERIOD", "min_objects", "TEST_MIN_OBJECTS", "previous_objects", "TEST_PREVIOUS_OBJECTS", "allow_delete", "TEST_ALLOW_DELETE"], ["kwargs", "TEST_BUCKET", "TEST_PREFIX", "TEST_POLLING_INTERVAL", "TEST_GCP_CONN_ID", "TEST_HOOK_PARAMS", "TEST_INACTIVITY_PERIOD", "TEST_MIN_OBJECTS", "TEST_PREVIOUS_OBJECTS", "TEST_ALLOW_DELETE"], ["trigger", "GCSUploadSessionTrigger", "TEST_BUCKET", "TEST_PREFIX", "TEST_POLLING_INTERVAL", "TEST_GCP_CONN_ID", "TEST_HOOK_PARAMS", "TEST_INACTIVITY_PERIOD", "TEST_MIN_OBJECTS", "TEST_PREVIOUS_OBJECTS", "allow_delete"], ["trigger", "GCSUploadSessionTrigger", "TEST_BUCKET", "TEST_PREFIX", "TEST_POLLING_INTERVAL", "TEST_GCP_CONN_ID", "TEST_HOOK_PARAMS", "TEST_INACTIVITY_PERIOD", "min_objects", "TEST_PREVIOUS_OBJECTS", "TEST_ALLOW_DELETE"]], "TEST_PREVIOUS_OBJECTS": [["TRIGGER", "GCSUploadSessionTrigger", "bucket", "TEST_BUCKET", "prefix", "TEST_PREFIX", "poke_interval", "TEST_POLLING_INTERVAL", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "hook_params", "TEST_HOOK_PARAMS", "inactivity_period", "TEST_INACTIVITY_PERIOD", "min_objects", "TEST_MIN_OBJECTS", "previous_objects", "TEST_PREVIOUS_OBJECTS", "allow_delete", "TEST_ALLOW_DELETE"], ["kwargs", "TEST_BUCKET", "TEST_PREFIX", "TEST_POLLING_INTERVAL", "TEST_GCP_CONN_ID", "TEST_HOOK_PARAMS", "TEST_INACTIVITY_PERIOD", "TEST_MIN_OBJECTS", "TEST_PREVIOUS_OBJECTS", "TEST_ALLOW_DELETE"], ["mock_list_blobs", "return_value", "TEST_PREVIOUS_OBJECTS"], ["mock_list_blobs", "return_value", "TEST_PREVIOUS_OBJECTS"], ["mock_list_blobs", "return_value", "TEST_PREVIOUS_OBJECTS"], ["trigger", "GCSUploadSessionTrigger", "TEST_BUCKET", "TEST_PREFIX", "TEST_POLLING_INTERVAL", "TEST_GCP_CONN_ID", "TEST_HOOK_PARAMS", "TEST_INACTIVITY_PERIOD", "TEST_MIN_OBJECTS", "TEST_PREVIOUS_OBJECTS", "allow_delete"], ["trigger", "GCSUploadSessionTrigger", "TEST_BUCKET", "TEST_PREFIX", "TEST_POLLING_INTERVAL", "TEST_GCP_CONN_ID", "TEST_HOOK_PARAMS", "TEST_INACTIVITY_PERIOD", "min_objects", "TEST_PREVIOUS_OBJECTS", "TEST_ALLOW_DELETE"], ["res", "trigger", "_is_bucket_updated", "current_objects", "TEST_PREVIOUS_OBJECTS"]], "TEST_TS_OBJECT": [["TRIGGER", "GCSCheckBlobUpdateTimeTrigger", "bucket", "TEST_BUCKET", "object_name", "TEST_OBJECT", "target_date", "TEST_TS_OBJECT", "poke_interval", "TEST_POLLING_INTERVAL", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "hook_params", "TEST_HOOK_PARAMS"], ["kwargs", "TEST_BUCKET", "TEST_OBJECT", "TEST_TS_OBJECT", "TEST_POLLING_INTERVAL", "TEST_GCP_CONN_ID", "TEST_HOOK_PARAMS"], ["res", "self", "TRIGGER", "_is_blob_updated_after", "hook", "TEST_BUCKET", "TEST_OBJECT", "TEST_TS_OBJECT"]]}, "no_types_annot": {"D": 0, "I": 0, "U": 137}, "session_id": "677QZT0-RjsPc2RfnfUnvvQe99vdf_CJnebBpHnKkJA", "set": null, "tc": [false, null], "type_annot_cove": 0.0, "typed_seq": "", "untyped_seq": "", "variables": {"TEST_ALLOW_DELETE": "", "TEST_BUCKET": "", "TEST_GCP_CONN_ID": "", "TEST_HOOK_PARAMS": "", "TEST_INACTIVITY_PERIOD": "", "TEST_MIN_OBJECTS": "", "TEST_OBJECT": "", "TEST_POLLING_INTERVAL": "", "TEST_PREFIX": "", "TEST_PREVIOUS_OBJECTS": "", "TEST_TS_OBJECT": ""}, "variables_p": {"TEST_ALLOW_DELETE": [["str", 0.7605484335398202], ["int", 0.12824312826389192], ["bytes", 0.11120843819628784]], "TEST_BUCKET": [["str", 0.9999999999999998]], "TEST_GCP_CONN_ID": [["str", 1.0]], "TEST_HOOK_PARAMS": [["str", 0.7993029948514976], ["Dict[str, Union[None, Any, Any, int, str]]", 0.1174421606876319], ["int", 0.08325484446087048]], "TEST_INACTIVITY_PERIOD": [["str", 0.7073691886533813], ["int", 0.11158227928235138], ["Optional[str]", 0.08952062595096716]], "TEST_MIN_OBJECTS": [["str", 0.7073691886533813], ["int", 0.11158227928235138], ["Optional[str]", 0.08952062595096716]], "TEST_OBJECT": [["str", 0.7993029948514976], ["Dict[str, Union[None, Any, Any, int, str]]", 0.1174421606876319], ["int", 0.08325484446087048]], "TEST_POLLING_INTERVAL": [["str", 0.7993029948514976], ["Dict[str, Union[None, Any, Any, int, str]]", 0.1174421606876319], ["int", 0.08325484446087048]], "TEST_PREFIX": [["str", 0.39752653596018184], ["Dict[str, Tuple[Any]]", 0.11665033292180312], ["List[str]", 0.10016207013632525], ["List[Dict[str, str]]", 0.09975958874398115], ["Union[Literal, str]", 0.09522594071168582], ["Dict[str, Union[Any, str]]", 0.09513690155096634]], "TEST_PREVIOUS_OBJECTS": [["str", 0.7073691886533813], ["int", 0.11158227928235138], ["Optional[str]", 0.08952062595096716]], "TEST_TS_OBJECT": [["str", 0.4394085500179135], ["List[str]", 0.23957460020112809], ["Dict[str, Union[int, str]]", 0.07622415758607103], ["List[google.cloud.bigquery.ScalarQueryParameter]", 0.07421444899859873]]}}}