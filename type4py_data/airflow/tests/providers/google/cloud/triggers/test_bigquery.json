{"error": null, "response": {"classes": [{"cls_lc": [[146, 0], [218, 87]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": "Asserts that the BigQueryInsertJobTrigger correctly serializes its arguments and classpath.", "long_descr": null, "ret": null}, "fn_lc": [[147, 4], [160, 9]], "fn_var_ln": {"classpath": [[151, 8], [151, 17]], "kwargs": [[151, 19], [151, 25]]}, "fn_var_occur": {"classpath": [["classpath", "kwargs", "insert_job_trigger", "serialize"]], "kwargs": [["classpath", "kwargs", "insert_job_trigger", "serialize"], ["kwargs", "TEST_CONN_ID", "TEST_JOB_ID", "TEST_GCP_PROJECT_ID", "TEST_DATASET_ID", "TEST_TABLE_ID", "POLLING_PERIOD_SECONDS"]]}, "name": "test_serialization", "params": {"insert_job_trigger": "", "self": ""}, "params_descr": {"insert_job_trigger": "", "self": ""}, "params_occur": {"insert_job_trigger": [["classpath", "kwargs", "insert_job_trigger", "serialize"]], "self": []}, "params_p": {"args": [], "insert_job_trigger": [["antidote.providers.tag.TagProvider", 0.21603869508253054], ["str", 0.16352105402406064], ["Callable", 0.10688414078483373]], "kwargs": [], "self": []}, "q_name": "TestBigQueryInsertJobTrigger.test_serialization", "ret_exprs": [], "ret_type": "", "variables": {"classpath": "", "kwargs": ""}, "variables_p": {"classpath": [["Set[str]", 0.4999999999750701], ["int", 0.49999999996228883], ["Dict[str, Union[int, str]]", 1.582796261262258e-11], ["List[str]", 1.3730011143514454e-11], ["str", 1.0971499556494418e-11], ["bool", 1.0865339793385232e-11]], "kwargs": [["str", 0.11876353700702764], ["int", 0.10823483034568988], ["List[Dict[str, Any]]", 0.10106653961677511], ["Dict[str, Tuple[Any, Any]]", 0.09998977196699463], ["List[Tuple[int, Any]]", 0.09282301607904574], ["Dict[str, float]", 0.09260244286371071], ["bytes", 0.08903768775911446]]}}, {"docstring": {"func": "Tests the BigQueryInsertJobTrigger only fires once the query execution reaches a successful state.", "long_descr": null, "ret": null}, "fn_lc": [[164, 4], [174, 9]], "fn_var_ln": {"actual": [[171, 8], [171, 14]], "generator": [[170, 8], [170, 17]], "return_value": [[168, 8], [168, 36]]}, "fn_var_occur": {"actual": [["actual", "generator", "asend", "None"], ["TriggerEvent", "TEST_JOB_ID", "actual"]], "generator": [["generator", "insert_job_trigger", "run"], ["actual", "generator", "asend", "None"]], "return_value": [["mock_job_status", "return_value"]]}, "name": "test_bigquery_insert_job_op_trigger_success", "params": {"insert_job_trigger": "", "mock_job_status": "", "self": ""}, "params_descr": {"insert_job_trigger": "", "mock_job_status": "", "self": ""}, "params_occur": {"insert_job_trigger": [["generator", "insert_job_trigger", "run"]], "mock_job_status": [["mock_job_status", "return_value"]], "self": []}, "params_p": {"args": [], "insert_job_trigger": [["tests.test_util.aiohttp.AiohttpClientMocker", 0.3559546157110539], ["str", 0.10108547809120466]], "kwargs": [], "mock_job_status": [], "self": []}, "q_name": "TestBigQueryInsertJobTrigger.test_bigquery_insert_job_op_trigger_success", "ret_exprs": [], "ret_type": "", "variables": {"actual": "", "generator": "", "return_value": ""}, "variables_p": {"actual": [["str", 0.26194570437589926], ["int", 0.2508230291637528]], "generator": [], "return_value": [["int", 0.2019394697254881], ["str", 0.19308589920525446], ["List[Dict[str, Any]]", 0.14243513930147336], ["Dict[str, Dict[str, Any]]", 0.11827891728138035], ["Dict[str, Union[Any, Any, Any]]", 0.08293675731555421], ["bytes", 0.07921306490725989], ["Dict[str, int]", 0.07324341594128495]]}}, {"docstring": {"func": "Test that BigQuery Triggers do not fire while a query is still running.", "long_descr": null, "ret": null}, "fn_lc": [[178, 4], [196, 39]], "fn_var_ln": {"mock_job_client": [[181, 8], [181, 23]], "return_value": [[182, 8], [182, 38]], "task": [[186, 8], [186, 12]]}, "fn_var_occur": {"mock_job_client": [["mock_job_client", "AsyncMock", "Job"], ["mock_job_instance", "return_value", "mock_job_client"]], "return_value": [["mock_job_instance", "return_value", "mock_job_client"], ["mock_job_instance", "return_value", "result", "side_effect", "OSError"]], "task": [["task", "asyncio", "create_task", "insert_job_trigger", "run", "__anext__"], ["task", "done", "False"]]}, "name": "test_bigquery_insert_job_trigger_running", "params": {"caplog": "", "insert_job_trigger": "", "mock_job_instance": "", "self": ""}, "params_descr": {"caplog": "", "insert_job_trigger": "", "mock_job_instance": "", "self": ""}, "params_occur": {"caplog": [["caplog", "set_level", "logging", "INFO"], ["caplog", "text"], ["POLLING_PERIOD_SECONDS", "caplog", "text"]], "insert_job_trigger": [["task", "asyncio", "create_task", "insert_job_trigger", "run", "__anext__"]], "mock_job_instance": [["mock_job_instance", "return_value", "mock_job_client"], ["mock_job_instance", "return_value", "result", "side_effect", "OSError"]], "self": []}, "params_p": {"args": [], "caplog": [["logging.Logger", 0.1674969769998424]], "insert_job_trigger": [], "kwargs": [], "mock_job_instance": [], "self": []}, "q_name": "TestBigQueryInsertJobTrigger.test_bigquery_insert_job_trigger_running", "ret_exprs": [], "ret_type": "", "variables": {"mock_job_client": "", "return_value": "", "task": ""}, "variables_p": {"mock_job_client": [], "return_value": [["str", 0.33016085864990574], ["Optional[bytes]", 0.11356017914994307], ["int", 0.09631186257864305]], "task": [["asyncio.tasks.Task[Any]", 0.21419771520032854], ["Dict[Any, Dict[str, str]]", 0.0961602250048649], ["List[Dict[str, Any]]", 0.092983408897632]]}}, {"docstring": {"func": "Test that BigQuery Triggers fire the correct event in case of an error.", "long_descr": null, "ret": null}, "fn_lc": [[200, 4], [208, 78]], "fn_var_ln": {"actual": [[207, 8], [207, 14]], "generator": [[206, 8], [206, 17]], "return_value": [[204, 8], [204, 36]]}, "fn_var_occur": {"actual": [["actual", "generator", "asend", "None"], ["TriggerEvent", "actual"]], "generator": [["generator", "insert_job_trigger", "run"], ["actual", "generator", "asend", "None"]], "return_value": [["mock_job_status", "return_value"]]}, "name": "test_bigquery_op_trigger_terminated", "params": {"caplog": "", "insert_job_trigger": "", "mock_job_status": "", "self": ""}, "params_descr": {"caplog": "", "insert_job_trigger": "", "mock_job_status": "", "self": ""}, "params_occur": {"caplog": [], "insert_job_trigger": [["generator", "insert_job_trigger", "run"]], "mock_job_status": [["mock_job_status", "return_value"]], "self": []}, "params_p": {"args": [], "caplog": [["List[T]", 0.09710628208474482], ["mock.Mock", 0.09626309978057569], ["Generator[None, Any, None]", 0.09077321792803164]], "insert_job_trigger": [["tests.test_util.aiohttp.AiohttpClientMocker", 0.5594947296240023], ["str", 0.09678887649453173]], "kwargs": [], "mock_job_status": [], "self": []}, "q_name": "TestBigQueryInsertJobTrigger.test_bigquery_op_trigger_terminated", "ret_exprs": [], "ret_type": "", "variables": {"actual": "", "generator": "", "return_value": ""}, "variables_p": {"actual": [["int", 0.19412407945911686], ["Tuple[Any, Any, Any, Any, Any, Any, Any]", 0.09850073403783119], ["Dict[str, float]", 0.08348205718629689], ["List[int]", 0.08277127376192583], ["Optional[str]", 0.07748136730496737]], "generator": [], "return_value": [["int", 0.2019394697254881], ["str", 0.19308589920525446], ["List[Dict[str, Any]]", 0.14243513930147336], ["Dict[str, Dict[str, Any]]", 0.11827891728138035], ["Dict[str, Union[Any, Any, Any]]", 0.08293675731555421], ["bytes", 0.07921306490725989], ["Dict[str, int]", 0.07324341594128495]]}}, {"docstring": {"func": "Test that BigQuery Triggers fire the correct event in case of an error.", "long_descr": null, "ret": null}, "fn_lc": [[212, 4], [218, 87]], "fn_var_ln": {"actual": [[217, 8], [217, 14]], "generator": [[216, 8], [216, 17]], "side_effect": [[214, 8], [214, 35]]}, "fn_var_occur": {"actual": [["actual", "generator", "asend", "None"], ["TriggerEvent", "actual"]], "generator": [["generator", "insert_job_trigger", "run"], ["actual", "generator", "asend", "None"]], "side_effect": [["mock_job_status", "side_effect", "Exception"]]}, "name": "test_bigquery_op_trigger_exception", "params": {"caplog": "", "insert_job_trigger": "", "mock_job_status": "", "self": ""}, "params_descr": {"caplog": "", "insert_job_trigger": "", "mock_job_status": "", "self": ""}, "params_occur": {"caplog": [], "insert_job_trigger": [["generator", "insert_job_trigger", "run"]], "mock_job_status": [["mock_job_status", "side_effect", "Exception"]], "self": []}, "params_p": {"args": [], "caplog": [["mock.Mock", 0.1940722984933817], ["List[T]", 0.10698139253315289], ["Generator[None, Any, None]", 0.09781500555436892]], "insert_job_trigger": [["tests.test_util.aiohttp.AiohttpClientMocker", 0.5601501328345627], ["str", 0.09807864780098298]], "kwargs": [], "mock_job_status": [["tests.test_util.aiohttp.AiohttpClientMocker", 0.7361676814472953]], "self": []}, "q_name": "TestBigQueryInsertJobTrigger.test_bigquery_op_trigger_exception", "ret_exprs": [], "ret_type": "", "variables": {"actual": "", "generator": "", "side_effect": ""}, "variables_p": {"actual": [["int", 0.19412407945911686], ["Tuple[Any, Any, Any, Any, Any, Any, Any]", 0.09850073403783119], ["Dict[str, float]", 0.08348205718629689], ["List[int]", 0.08277127376192583], ["Optional[str]", 0.07748136730496737]], "generator": [], "side_effect": [["str", 0.2763625119115123], ["List[str]", 0.11604543685408512]]}}], "name": "TestBigQueryInsertJobTrigger", "q_name": "TestBigQueryInsertJobTrigger", "variables": {}, "variables_p": {}}, {"cls_lc": [[221, 0], [328, 39]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": "Asserts that the BigQueryGetDataTrigger correctly serializes its arguments and classpath.", "long_descr": null, "ret": null}, "fn_lc": [[222, 4], [235, 9]], "fn_var_ln": {"classpath": [[225, 8], [225, 17]], "kwargs": [[225, 19], [225, 25]]}, "fn_var_occur": {"classpath": [["classpath", "kwargs", "get_data_trigger", "serialize"]], "kwargs": [["classpath", "kwargs", "get_data_trigger", "serialize"], ["kwargs", "False", "TEST_CONN_ID", "TEST_JOB_ID", "TEST_DATASET_ID", "TEST_GCP_PROJECT_ID", "TEST_TABLE_ID", "POLLING_PERIOD_SECONDS"]]}, "name": "test_bigquery_get_data_trigger_serialization", "params": {"get_data_trigger": "", "self": ""}, "params_descr": {"get_data_trigger": "", "self": ""}, "params_occur": {"get_data_trigger": [["classpath", "kwargs", "get_data_trigger", "serialize"]], "self": []}, "params_p": {"args": [], "get_data_trigger": [["Optional[Any]", 0.19477807586266743], ["int", 0.11988437275024062], ["bool", 0.09926722393499748], ["str", 0.0968928713670667], ["bytes", 0.0968928713670667]], "kwargs": [], "self": []}, "q_name": "TestBigQueryGetDataTrigger.test_bigquery_get_data_trigger_serialization", "ret_exprs": [], "ret_type": "", "variables": {"classpath": "", "kwargs": ""}, "variables_p": {"classpath": [["list", 0.22043985012606185], ["List[str]", 0.18281822859158686], ["str", 0.11934098992140219], ["int", 0.1130769897546745], ["Pattern[str]", 0.0795442561804663], ["List[int]", 0.07644581676625091]], "kwargs": [["str", 0.22553958048989164], ["Dict[str, Tuple[Any, Any]]", 0.1381856310865143], ["bool", 0.0999919616417904], ["Tuple[str]", 0.08811887747732039], ["List[str]", 0.08811887747732039], ["set", 0.08811887747732039], ["Tuple[str, str]", 0.08811887747732039]]}}, {"docstring": {"func": "Test that BigQuery Triggers do not fire while a query is still running.", "long_descr": null, "ret": null}, "fn_lc": [[239, 4], [257, 39]], "fn_var_ln": {"mock_job_client": [[242, 8], [242, 23]], "return_value": [[243, 8], [243, 38]], "task": [[247, 8], [247, 12]]}, "fn_var_occur": {"mock_job_client": [["mock_job_client", "AsyncMock", "Job"], ["mock_job_instance", "return_value", "mock_job_client"]], "return_value": [["mock_job_instance", "return_value", "mock_job_client"], ["mock_job_instance", "return_value", "result", "side_effect", "OSError"]], "task": [["task", "asyncio", "create_task", "get_data_trigger", "run", "__anext__"], ["task", "done", "False"]]}, "name": "test_bigquery_get_data_trigger_running", "params": {"caplog": "", "get_data_trigger": "", "mock_job_instance": "", "self": ""}, "params_descr": {"caplog": "", "get_data_trigger": "", "mock_job_instance": "", "self": ""}, "params_occur": {"caplog": [["caplog", "set_level", "logging", "INFO"], ["caplog", "text"], ["POLLING_PERIOD_SECONDS", "caplog", "text"]], "get_data_trigger": [["task", "asyncio", "create_task", "get_data_trigger", "run", "__anext__"]], "mock_job_instance": [["mock_job_instance", "return_value", "mock_job_client"], ["mock_job_instance", "return_value", "result", "side_effect", "OSError"]], "self": []}, "params_p": {"args": [], "caplog": [["logging.Logger", 0.20560040962576884]], "get_data_trigger": [], "kwargs": [], "mock_job_instance": [["tests.test_util.aiohttp.AiohttpClientMocker", 0.16616086866360802]], "self": []}, "q_name": "TestBigQueryGetDataTrigger.test_bigquery_get_data_trigger_running", "ret_exprs": [], "ret_type": "", "variables": {"mock_job_client": "", "return_value": "", "task": ""}, "variables_p": {"mock_job_client": [], "return_value": [["str", 0.33016085864990574], ["Optional[bytes]", 0.11356017914994307], ["int", 0.09631186257864305]], "task": [["asyncio.tasks.Task[Any]", 0.25553903223496854], ["asyncio.tasks.Task[None]", 0.19794049077253187], ["List[str]", 0.10720573803780543], ["List[List[Any]]", 0.0935322942507239]]}}, {"docstring": {"func": "Test that BigQuery Triggers fire the correct event in case of an error.", "long_descr": null, "ret": null}, "fn_lc": [[261, 4], [269, 78]], "fn_var_ln": {"actual": [[268, 8], [268, 14]], "generator": [[267, 8], [267, 17]], "return_value": [[265, 8], [265, 36]]}, "fn_var_occur": {"actual": [["actual", "generator", "asend", "None"], ["TriggerEvent", "actual"]], "generator": [["generator", "get_data_trigger", "run"], ["actual", "generator", "asend", "None"]], "return_value": [["mock_job_status", "return_value"]]}, "name": "test_bigquery_get_data_trigger_terminated", "params": {"caplog": "", "get_data_trigger": "", "mock_job_status": "", "self": ""}, "params_descr": {"caplog": "", "get_data_trigger": "", "mock_job_status": "", "self": ""}, "params_occur": {"caplog": [], "get_data_trigger": [["generator", "get_data_trigger", "run"]], "mock_job_status": [["mock_job_status", "return_value"]], "self": []}, "params_p": {"args": [], "caplog": [["str", 0.21086385093814766], ["bool", 0.19450016814323084], ["Callable[..., None]", 0.19135374411580836], ["type", 0.10280524077314666], ["tests.test_util.aiohttp.AiohttpClientMocker", 0.09486651448337327]], "get_data_trigger": [["Callable", 0.20483730346427753]], "kwargs": [], "mock_job_status": [["asyncio.StreamReader", 0.18337547782861183], ["aiohttp.test_utils.TestServer", 0.11517660628154863]], "self": []}, "q_name": "TestBigQueryGetDataTrigger.test_bigquery_get_data_trigger_terminated", "ret_exprs": [], "ret_type": "", "variables": {"actual": "", "generator": "", "return_value": ""}, "variables_p": {"actual": [["int", 0.19412407945911686], ["Tuple[Any, Any, Any, Any, Any, Any, Any]", 0.09850073403783119], ["Dict[str, float]", 0.08348205718629689], ["List[int]", 0.08277127376192583], ["Optional[str]", 0.07748136730496737]], "generator": [], "return_value": [["int", 0.2019394697254881], ["str", 0.19308589920525446], ["List[Dict[str, Any]]", 0.14243513930147336], ["Dict[str, Dict[str, Any]]", 0.11827891728138035], ["Dict[str, Union[Any, Any, Any]]", 0.08293675731555421], ["bytes", 0.07921306490725989], ["Dict[str, int]", 0.07324341594128495]]}}, {"docstring": {"func": "Test that BigQuery Triggers fire the correct event in case of an error.", "long_descr": null, "ret": null}, "fn_lc": [[273, 4], [279, 87]], "fn_var_ln": {"actual": [[278, 8], [278, 14]], "generator": [[277, 8], [277, 17]], "side_effect": [[275, 8], [275, 35]]}, "fn_var_occur": {"actual": [["actual", "generator", "asend", "None"], ["TriggerEvent", "actual"]], "generator": [["generator", "get_data_trigger", "run"], ["actual", "generator", "asend", "None"]], "side_effect": [["mock_job_status", "side_effect", "Exception"]]}, "name": "test_bigquery_get_data_trigger_exception", "params": {"caplog": "", "get_data_trigger": "", "mock_job_status": "", "self": ""}, "params_descr": {"caplog": "", "get_data_trigger": "", "mock_job_status": "", "self": ""}, "params_occur": {"caplog": [], "get_data_trigger": [["generator", "get_data_trigger", "run"]], "mock_job_status": [["mock_job_status", "side_effect", "Exception"]], "self": []}, "params_p": {"args": [], "caplog": [["bool", 0.31032949826152045], ["str", 0.22191456222442205], ["tests.test_util.aiohttp.AiohttpClientMocker", 0.1051723253418638], ["type", 0.0910782022076414]], "get_data_trigger": [["Callable", 0.20862616688951513]], "kwargs": [], "mock_job_status": [["str", 0.19735858982299748], ["bytes", 0.09006717570876556]], "self": []}, "q_name": "TestBigQueryGetDataTrigger.test_bigquery_get_data_trigger_exception", "ret_exprs": [], "ret_type": "", "variables": {"actual": "", "generator": "", "side_effect": ""}, "variables_p": {"actual": [["int", 0.19412407945911686], ["Tuple[Any, Any, Any, Any, Any, Any, Any]", 0.09850073403783119], ["Dict[str, float]", 0.08348205718629689], ["List[int]", 0.08277127376192583], ["Optional[str]", 0.07748136730496737]], "generator": [], "side_effect": [["str", 0.2763625119115123], ["List[str]", 0.11604543685408512]]}}, {"docstring": {"func": "Tests that BigQueryGetDataTrigger only fires once the query execution reaches a successful state.", "long_descr": null, "ret": null}, "fn_lc": [[284, 4], [328, 39]], "fn_var_ln": {"actual": [[313, 8], [313, 14]], "generator": [[312, 8], [312, 17]], "return_value": [[291, 8], [291, 36]]}, "fn_var_occur": {"actual": [["actual", "generator", "asend", "None"], ["TriggerEvent", "actual"]], "generator": [["generator", "get_data_trigger", "run"], ["actual", "generator", "asend", "None"]], "return_value": [["mock_job_status", "return_value"], ["mock_job_output", "return_value", "True", "False"]]}, "name": "test_bigquery_get_data_trigger_success_with_data", "params": {"get_data_trigger": "", "mock_job_output": "", "mock_job_status": "", "self": ""}, "params_descr": {"get_data_trigger": "", "mock_job_output": "", "mock_job_status": "", "self": ""}, "params_occur": {"get_data_trigger": [["generator", "get_data_trigger", "run"]], "mock_job_output": [["mock_job_output", "return_value", "True", "False"]], "mock_job_status": [["mock_job_status", "return_value"]], "self": []}, "params_p": {"args": [], "get_data_trigger": [["int", 0.09524669397191712], ["Callable", 0.09488138535106236]], "kwargs": [], "mock_job_output": [["mock.MagicMock", 0.09658739362517682]], "mock_job_status": [], "self": []}, "q_name": "TestBigQueryGetDataTrigger.test_bigquery_get_data_trigger_success_with_data", "ret_exprs": [], "ret_type": "", "variables": {"actual": "", "generator": "", "return_value": ""}, "variables_p": {"actual": [["int", 0.19412407945911686], ["Tuple[Any, Any, Any, Any, Any, Any, Any]", 0.09850073403783119], ["Dict[str, float]", 0.08348205718629689], ["List[int]", 0.08277127376192583], ["Optional[str]", 0.07748136730496737]], "generator": [], "return_value": [["str", 0.18429786093164094], ["Optional[bytes]", 0.1656245022779971], ["int", 0.10645654166826955], ["List[str]", 0.08730346645623081], ["Dict[str, Union[Any, Any, Any]]", 0.0872310275951889]]}}], "name": "TestBigQueryGetDataTrigger", "q_name": "TestBigQueryGetDataTrigger", "variables": {}, "variables_p": {}}, {"cls_lc": [[331, 0], [451, 77]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": "Test that BigQuery Triggers do not fire while a query is still running.", "long_descr": null, "ret": null}, "fn_lc": [[334, 4], [352, 39]], "fn_var_ln": {"mock_job_client": [[337, 8], [337, 23]], "return_value": [[338, 8], [338, 38]], "task": [[342, 8], [342, 12]]}, "fn_var_occur": {"mock_job_client": [["mock_job_client", "AsyncMock", "Job"], ["mock_job_instance", "return_value", "mock_job_client"]], "return_value": [["mock_job_instance", "return_value", "mock_job_client"], ["mock_job_instance", "return_value", "result", "side_effect", "OSError"]], "task": [["task", "asyncio", "create_task", "check_trigger", "run", "__anext__"], ["task", "done", "False"]]}, "name": "test_bigquery_check_trigger_running", "params": {"caplog": "", "check_trigger": "", "mock_job_instance": "", "self": ""}, "params_descr": {"caplog": "", "check_trigger": "", "mock_job_instance": "", "self": ""}, "params_occur": {"caplog": [["caplog", "set_level", "logging", "INFO"], ["caplog", "text"], ["POLLING_PERIOD_SECONDS", "caplog", "text"]], "check_trigger": [["task", "asyncio", "create_task", "check_trigger", "run", "__anext__"]], "mock_job_instance": [["mock_job_instance", "return_value", "mock_job_client"], ["mock_job_instance", "return_value", "result", "side_effect", "OSError"]], "self": []}, "params_p": {"args": [], "caplog": [["logging.Logger", 0.16743482136181218]], "check_trigger": [["tests.test_util.aiohttp.AiohttpClientMocker", 0.07819070686456032]], "kwargs": [], "mock_job_instance": [], "self": []}, "q_name": "TestBigQueryCheckTrigger.test_bigquery_check_trigger_running", "ret_exprs": [], "ret_type": "", "variables": {"mock_job_client": "", "return_value": "", "task": ""}, "variables_p": {"mock_job_client": [], "return_value": [["str", 0.33016085864990574], ["Optional[bytes]", 0.11356017914994307], ["int", 0.09631186257864305]], "task": [["Dict[str, Any]", 0.23891041725833062], ["List[str]", 0.0868414769048936]]}}, {"docstring": {"func": "Test that BigQuery Triggers fire the correct event in case of an error.", "long_descr": null, "ret": null}, "fn_lc": [[356, 4], [364, 78]], "fn_var_ln": {"actual": [[363, 8], [363, 14]], "generator": [[362, 8], [362, 17]], "return_value": [[360, 8], [360, 36]]}, "fn_var_occur": {"actual": [["actual", "generator", "asend", "None"], ["TriggerEvent", "actual"]], "generator": [["generator", "check_trigger", "run"], ["actual", "generator", "asend", "None"]], "return_value": [["mock_job_status", "return_value"]]}, "name": "test_bigquery_check_trigger_terminated", "params": {"caplog": "", "check_trigger": "", "mock_job_status": "", "self": ""}, "params_descr": {"caplog": "", "check_trigger": "", "mock_job_status": "", "self": ""}, "params_occur": {"caplog": [], "check_trigger": [["generator", "check_trigger", "run"]], "mock_job_status": [["mock_job_status", "return_value"]], "self": []}, "params_p": {"args": [], "caplog": [["tests.test_util.aiohttp.AiohttpClientMocker", 0.07991649869264919], ["str", 0.07745320844418281]], "check_trigger": [["str", 0.6145196947618704]], "kwargs": [], "mock_job_status": [], "self": []}, "q_name": "TestBigQueryCheckTrigger.test_bigquery_check_trigger_terminated", "ret_exprs": [], "ret_type": "", "variables": {"actual": "", "generator": "", "return_value": ""}, "variables_p": {"actual": [["int", 0.19412407945911686], ["Tuple[Any, Any, Any, Any, Any, Any, Any]", 0.09850073403783119], ["Dict[str, float]", 0.08348205718629689], ["List[int]", 0.08277127376192583], ["Optional[str]", 0.07748136730496737]], "generator": [["str", 0.3790336510003868], ["bool", 0.11147025905886783], ["List[str]", 0.11147025905886783]], "return_value": [["int", 0.2019394697254881], ["str", 0.19308589920525446], ["List[Dict[str, Any]]", 0.14243513930147336], ["Dict[str, Dict[str, Any]]", 0.11827891728138035], ["Dict[str, Union[Any, Any, Any]]", 0.08293675731555421], ["bytes", 0.07921306490725989], ["Dict[str, int]", 0.07324341594128495]]}}, {"docstring": {"func": "Test that BigQuery Triggers fire the correct event in case of an error.", "long_descr": null, "ret": null}, "fn_lc": [[368, 4], [374, 87]], "fn_var_ln": {"actual": [[373, 8], [373, 14]], "generator": [[372, 8], [372, 17]], "side_effect": [[370, 8], [370, 35]]}, "fn_var_occur": {"actual": [["actual", "generator", "asend", "None"], ["TriggerEvent", "actual"]], "generator": [["generator", "check_trigger", "run"], ["actual", "generator", "asend", "None"]], "side_effect": [["mock_job_status", "side_effect", "Exception"]]}, "name": "test_check_trigger_exception", "params": {"caplog": "", "check_trigger": "", "mock_job_status": "", "self": ""}, "params_descr": {"caplog": "", "check_trigger": "", "mock_job_status": "", "self": ""}, "params_occur": {"caplog": [], "check_trigger": [["generator", "check_trigger", "run"]], "mock_job_status": [["mock_job_status", "side_effect", "Exception"]], "self": []}, "params_p": {"args": [], "caplog": [["tests.test_util.aiohttp.AiohttpClientMocker", 0.0900891863811888]], "check_trigger": [["str", 0.6194947195387405]], "kwargs": [], "mock_job_status": [["tests.test_util.aiohttp.AiohttpClientMocker", 0.7248089716692651]], "self": []}, "q_name": "TestBigQueryCheckTrigger.test_check_trigger_exception", "ret_exprs": [], "ret_type": "", "variables": {"actual": "", "generator": "", "side_effect": ""}, "variables_p": {"actual": [["int", 0.19412407945911686], ["Tuple[Any, Any, Any, Any, Any, Any, Any]", 0.09850073403783119], ["Dict[str, float]", 0.08348205718629689], ["List[int]", 0.08277127376192583], ["Optional[str]", 0.07748136730496737]], "generator": [["str", 0.3790336510003868], ["bool", 0.11147025905886783], ["List[str]", 0.11147025905886783]], "side_effect": [["str", 0.2763625119115123], ["List[str]", 0.11604543685408512]]}}, {"docstring": {"func": "Asserts that the BigQueryCheckTrigger correctly serializes its arguments and classpath.", "long_descr": null, "ret": null}, "fn_lc": [[376, 4], [388, 9]], "fn_var_ln": {"classpath": [[379, 8], [379, 17]], "kwargs": [[379, 19], [379, 25]]}, "fn_var_occur": {"classpath": [["classpath", "kwargs", "check_trigger", "serialize"]], "kwargs": [["classpath", "kwargs", "check_trigger", "serialize"], ["kwargs", "TEST_CONN_ID", "TEST_JOB_ID", "TEST_DATASET_ID", "TEST_GCP_PROJECT_ID", "TEST_TABLE_ID", "POLLING_PERIOD_SECONDS"]]}, "name": "test_check_trigger_serialization", "params": {"check_trigger": "", "self": ""}, "params_descr": {"check_trigger": "", "self": ""}, "params_occur": {"check_trigger": [["classpath", "kwargs", "check_trigger", "serialize"]], "self": []}, "params_p": {"args": [], "check_trigger": [["asyncio.StreamReader", 0.17880732108704744]], "kwargs": [], "self": []}, "q_name": "TestBigQueryCheckTrigger.test_check_trigger_serialization", "ret_exprs": [], "ret_type": "", "variables": {"classpath": "", "kwargs": ""}, "variables_p": {"classpath": [["str", 0.7853054410471708], ["List[str]", 0.21469455895282932]], "kwargs": [["str", 0.19288175917542083], ["int", 0.10585876602594628], ["Dict[str, str]", 0.09622108175033167], ["Dict[str, Tuple]", 0.09438709801123096], ["Dict[str, Union[Any, str]]", 0.09353630504123091], ["Dict[str, Optional[int]]", 0.09280452672932488]]}}, {"docstring": {"func": "Test the BigQueryCheckTrigger only fires once the query execution reaches a successful state.", "long_descr": null, "ret": null}, "fn_lc": [[393, 4], [417, 77]], "fn_var_ln": {"actual": [[415, 8], [415, 14]], "generator": [[414, 8], [414, 17]], "return_value": [[398, 8], [398, 36]]}, "fn_var_occur": {"actual": [["actual", "generator", "asend", "None"], ["TriggerEvent", "actual"]], "generator": [["generator", "check_trigger", "run"], ["actual", "generator", "asend", "None"]], "return_value": [["mock_job_status", "return_value"], ["mock_job_output", "return_value", "True", "False"]]}, "name": "test_check_trigger_success_with_data", "params": {"check_trigger": "", "mock_job_output": "", "mock_job_status": "", "self": ""}, "params_descr": {"check_trigger": "", "mock_job_output": "", "mock_job_status": "", "self": ""}, "params_occur": {"check_trigger": [["generator", "check_trigger", "run"]], "mock_job_output": [["mock_job_output", "return_value", "True", "False"]], "mock_job_status": [["mock_job_status", "return_value"]], "self": []}, "params_p": {"args": [], "check_trigger": [["str", 0.30455386729095135], ["tests.test_util.aiohttp.AiohttpClientMocker", 0.11044062049049036], ["bytes", 0.09811936855526025]], "kwargs": [], "mock_job_output": [], "mock_job_status": [["bool", 0.09121605956088419]], "self": []}, "q_name": "TestBigQueryCheckTrigger.test_check_trigger_success_with_data", "ret_exprs": [], "ret_type": "", "variables": {"actual": "", "generator": "", "return_value": ""}, "variables_p": {"actual": [["int", 0.19412407945911686], ["Tuple[Any, Any, Any, Any, Any, Any, Any]", 0.09850073403783119], ["Dict[str, float]", 0.08348205718629689], ["List[int]", 0.08277127376192583], ["Optional[str]", 0.07748136730496737]], "generator": [["str", 0.3790336510003868], ["bool", 0.11147025905886783], ["List[str]", 0.11147025905886783]], "return_value": [["str", 0.18429786093164094], ["Optional[bytes]", 0.1656245022779971], ["int", 0.10645654166826955], ["List[str]", 0.08730346645623081], ["Dict[str, Union[Any, Any, Any]]", 0.0872310275951889]]}}, {"docstring": {"func": "Tests that BigQueryCheckTrigger sends TriggerEvent as  { \"status\": \"success\", \"records\": None}", "long_descr": "when no rows are available in the query result.", "ret": null}, "fn_lc": [[422, 4], [451, 77]], "fn_var_ln": {"actual": [[450, 8], [450, 14]], "generator": [[449, 8], [449, 17]], "return_value": [[428, 8], [428, 36]]}, "fn_var_occur": {"actual": [["actual", "generator", "asend", "None"], ["TriggerEvent", "None", "actual"]], "generator": [["generator", "check_trigger", "run"], ["actual", "generator", "asend", "None"]], "return_value": [["mock_job_status", "return_value"], ["mock_job_output", "return_value", "True", "False"]]}, "name": "test_check_trigger_success_without_data", "params": {"check_trigger": "", "mock_job_output": "", "mock_job_status": "", "self": ""}, "params_descr": {"check_trigger": "", "mock_job_output": "", "mock_job_status": "", "self": ""}, "params_occur": {"check_trigger": [["generator", "check_trigger", "run"]], "mock_job_output": [["mock_job_output", "return_value", "True", "False"]], "mock_job_status": [["mock_job_status", "return_value"]], "self": []}, "params_p": {"args": [], "check_trigger": [["str", 0.30455386729095135], ["tests.test_util.aiohttp.AiohttpClientMocker", 0.11044062049049036], ["bytes", 0.09811936855526025]], "kwargs": [], "mock_job_output": [], "mock_job_status": [["bool", 0.09121605956088419]], "self": []}, "q_name": "TestBigQueryCheckTrigger.test_check_trigger_success_without_data", "ret_exprs": [], "ret_type": "", "variables": {"actual": "", "generator": "", "return_value": ""}, "variables_p": {"actual": [["str", 0.20696225889645015], ["Optional[str]", 0.10418006875251312], ["int", 0.10408978380593048], ["List[None]", 0.09668966366624092], ["Dict[str, Any]", 0.09529384069258018], ["Union[Literal, Literal]", 0.07690368107961369]], "generator": [["str", 0.3790336510003868], ["bool", 0.11147025905886783], ["List[str]", 0.11147025905886783]], "return_value": [["str", 0.18429786093164094], ["Optional[bytes]", 0.1656245022779971], ["int", 0.10645654166826955], ["List[str]", 0.08730346645623081], ["Dict[str, Union[Any, Any, Any]]", 0.0872310275951889]]}}], "name": "TestBigQueryCheckTrigger", "q_name": "TestBigQueryCheckTrigger", "variables": {}, "variables_p": {}}, {"cls_lc": [[454, 0], [534, 87]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": "Asserts that the BigQueryIntervalCheckTrigger correctly serializes its arguments and classpath.", "long_descr": null, "ret": null}, "fn_lc": [[455, 4], [473, 9]], "fn_var_ln": {"classpath": [[460, 8], [460, 17]], "kwargs": [[460, 19], [460, 25]]}, "fn_var_occur": {"classpath": [["classpath", "kwargs", "interval_check_trigger", "serialize"]], "kwargs": [["classpath", "kwargs", "interval_check_trigger", "serialize"], ["kwargs", "TEST_CONN_ID", "TEST_FIRST_JOB_ID", "TEST_SECOND_JOB_ID", "TEST_GCP_PROJECT_ID", "TEST_TABLE_ID", "TEST_METRIC_THRESHOLDS", "TEST_DATE_FILTER_COLUMN", "TEST_DAYS_BACK", "TEST_RATIO_FORMULA", "TEST_IGNORE_ZERO"]]}, "name": "test_interval_check_trigger_serialization", "params": {"interval_check_trigger": "", "self": ""}, "params_descr": {"interval_check_trigger": "", "self": ""}, "params_occur": {"interval_check_trigger": [["classpath", "kwargs", "interval_check_trigger", "serialize"]], "self": []}, "params_p": {"args": [], "interval_check_trigger": [["antidote.providers.tag.TagProvider", 0.21603869508253054], ["str", 0.16352105402406064], ["Callable", 0.10688414078483373]], "kwargs": [], "self": []}, "q_name": "TestBigQueryIntervalCheckTrigger.test_interval_check_trigger_serialization", "ret_exprs": [], "ret_type": "", "variables": {"classpath": "", "kwargs": ""}, "variables_p": {"classpath": [["Set[str]", 0.4999999999750701], ["int", 0.49999999996228883], ["Dict[str, Union[int, str]]", 1.582796261262258e-11], ["List[str]", 1.3730011143514454e-11], ["str", 1.0971499556494418e-11], ["bool", 1.0865339793385232e-11]], "kwargs": [["List[Tuple[int, Any]]", 0.1137861810206365], ["RuntimeError", 0.1118212596852902], ["List[Dict[str, Any]]", 0.10321426918614515], ["Dict[str, Any]", 0.10123017968403174], ["list", 0.09904220778880765], ["bytes", 0.092097424699701], ["Dict[str, str]", 0.08393774986073194]]}}, {"docstring": {"func": "Tests the BigQueryIntervalCheckTrigger only fires once the query execution reaches a successful state.", "long_descr": null, "ret": null}, "fn_lc": [[478, 4], [489, 107]], "fn_var_ln": {"actual": [[488, 8], [488, 14]], "generator": [[487, 8], [487, 17]], "return_value": [[485, 8], [485, 40]]}, "fn_var_occur": {"actual": [["actual", "generator", "asend", "None"], ["actual", "TriggerEvent"]], "generator": [["generator", "interval_check_trigger", "run"], ["actual", "generator", "asend", "None"]], "return_value": [["mock_job_status", "return_value"], ["mock_get_job_output", "return_value"]]}, "name": "test_interval_check_trigger_success", "params": {"interval_check_trigger": "", "mock_get_job_output": "", "mock_job_status": "", "self": ""}, "params_descr": {"interval_check_trigger": "", "mock_get_job_output": "", "mock_job_status": "", "self": ""}, "params_occur": {"interval_check_trigger": [["generator", "interval_check_trigger", "run"]], "mock_get_job_output": [["mock_get_job_output", "return_value"]], "mock_job_status": [["mock_job_status", "return_value"]], "self": []}, "params_p": {"args": [], "interval_check_trigger": [["str", 0.15962043560745157]], "kwargs": [], "mock_get_job_output": [], "mock_job_status": [], "self": []}, "q_name": "TestBigQueryIntervalCheckTrigger.test_interval_check_trigger_success", "ret_exprs": [], "ret_type": "", "variables": {"actual": "", "generator": "", "return_value": ""}, "variables_p": {"actual": [["Optional[str]", 0.2], ["frozenset[str]", 0.1], ["ImportError", 0.1], ["bool", 0.1], ["str", 0.1], ["Dict[str, str]", 0.1]], "generator": [], "return_value": [["Dict[str, Union[Any, Any]]", 0.21911137854650609], ["Dict[str, Dict[str, Any]]", 0.17167523788048378], ["Dict[str, Union[Any, Any, Any]]", 0.09325151376449153], ["Dict[str, int]", 0.08821383477385653], ["str", 0.08141442675953711]]}}, {"docstring": {"func": "Tests that the BigQueryIntervalCheckTrigger do not fire while a query is still running.", "long_descr": null, "ret": null}, "fn_lc": [[493, 4], [510, 39]], "fn_var_ln": {"return_value": [[497, 8], [497, 36]], "task": [[500, 8], [500, 12]]}, "fn_var_occur": {"return_value": [["mock_job_status", "return_value"]], "task": [["task", "asyncio", "create_task", "interval_check_trigger", "run", "__anext__"], ["task", "done", "False"]]}, "name": "test_interval_check_trigger_pending", "params": {"caplog": "", "interval_check_trigger": "", "mock_job_status": "", "self": ""}, "params_descr": {"caplog": "", "interval_check_trigger": "", "mock_job_status": "", "self": ""}, "params_occur": {"caplog": [["caplog", "set_level", "logging", "INFO"], ["caplog", "text"], ["POLLING_PERIOD_SECONDS", "caplog", "text"]], "interval_check_trigger": [["task", "asyncio", "create_task", "interval_check_trigger", "run", "__anext__"]], "mock_job_status": [["mock_job_status", "return_value"]], "self": []}, "params_p": {"args": [], "caplog": [["logging.Logger", 0.36669129741109163]], "interval_check_trigger": [], "kwargs": [], "mock_job_status": [], "self": []}, "q_name": "TestBigQueryIntervalCheckTrigger.test_interval_check_trigger_pending", "ret_exprs": [], "ret_type": "", "variables": {"return_value": "", "task": ""}, "variables_p": {"return_value": [["int", 0.2019394697254881], ["str", 0.19308589920525446], ["List[Dict[str, Any]]", 0.14243513930147336], ["Dict[str, Dict[str, Any]]", 0.11827891728138035], ["Dict[str, Union[Any, Any, Any]]", 0.08293675731555421], ["bytes", 0.07921306490725989], ["Dict[str, int]", 0.07324341594128495]], "task": [["asyncio.tasks.Task[Any]", 0.21419771520032854], ["Dict[Any, Dict[str, str]]", 0.0961602250048649], ["List[Dict[str, Any]]", 0.092983408897632]]}}, {"docstring": {"func": "Tests the BigQueryIntervalCheckTrigger fires the correct event in case of an error.", "long_descr": null, "ret": null}, "fn_lc": [[514, 4], [522, 92]], "fn_var_ln": {"actual": [[520, 8], [520, 14]], "generator": [[519, 8], [519, 17]], "return_value": [[517, 8], [517, 36]]}, "fn_var_occur": {"actual": [["actual", "generator", "asend", "None"], ["TriggerEvent", "None", "actual"]], "generator": [["generator", "interval_check_trigger", "run"], ["actual", "generator", "asend", "None"]], "return_value": [["mock_job_status", "return_value"]]}, "name": "test_interval_check_trigger_terminated", "params": {"interval_check_trigger": "", "mock_job_status": "", "self": ""}, "params_descr": {"interval_check_trigger": "", "mock_job_status": "", "self": ""}, "params_occur": {"interval_check_trigger": [["generator", "interval_check_trigger", "run"]], "mock_job_status": [["mock_job_status", "return_value"]], "self": []}, "params_p": {"args": [], "interval_check_trigger": [["tests.test_util.aiohttp.AiohttpClientMocker", 0.2896444105313882], ["str", 0.11363691859769125]], "kwargs": [], "mock_job_status": [], "self": []}, "q_name": "TestBigQueryIntervalCheckTrigger.test_interval_check_trigger_terminated", "ret_exprs": [], "ret_type": "", "variables": {"actual": "", "generator": "", "return_value": ""}, "variables_p": {"actual": [["str", 0.20696225889645015], ["Optional[str]", 0.10418006875251312], ["int", 0.10408978380593048], ["List[None]", 0.09668966366624092], ["Dict[str, Any]", 0.09529384069258018], ["Union[Literal, Literal]", 0.07690368107961369]], "generator": [], "return_value": [["int", 0.2019394697254881], ["str", 0.19308589920525446], ["List[Dict[str, Any]]", 0.14243513930147336], ["Dict[str, Dict[str, Any]]", 0.11827891728138035], ["Dict[str, Union[Any, Any, Any]]", 0.08293675731555421], ["bytes", 0.07921306490725989], ["Dict[str, int]", 0.07324341594128495]]}}, {"docstring": {"func": "Tests that the BigQueryIntervalCheckTrigger fires the correct event in case of an error.", "long_descr": null, "ret": null}, "fn_lc": [[526, 4], [534, 87]], "fn_var_ln": {"actual": [[532, 8], [532, 14]], "generator": [[531, 8], [531, 17]], "side_effect": [[528, 8], [528, 35]]}, "fn_var_occur": {"actual": [["actual", "generator", "asend", "None"], ["TriggerEvent", "actual"]], "generator": [["generator", "interval_check_trigger", "run"], ["actual", "generator", "asend", "None"]], "side_effect": [["mock_job_status", "side_effect", "Exception"]]}, "name": "test_interval_check_trigger_exception", "params": {"caplog": "", "interval_check_trigger": "", "mock_job_status": "", "self": ""}, "params_descr": {"caplog": "", "interval_check_trigger": "", "mock_job_status": "", "self": ""}, "params_occur": {"caplog": [["caplog", "set_level", "logging", "DEBUG"]], "interval_check_trigger": [["generator", "interval_check_trigger", "run"]], "mock_job_status": [["mock_job_status", "side_effect", "Exception"]], "self": []}, "params_p": {"args": [], "caplog": [["logging.Logger", 0.6061068445298777]], "interval_check_trigger": [["tests.test_util.aiohttp.AiohttpClientMocker", 0.27860545928280245], ["str", 0.11327276540665203]], "kwargs": [], "mock_job_status": [["tests.test_util.aiohttp.AiohttpClientMocker", 0.6317126637769863], ["str", 0.0822350642610963]], "self": []}, "q_name": "TestBigQueryIntervalCheckTrigger.test_interval_check_trigger_exception", "ret_exprs": [], "ret_type": "", "variables": {"actual": "", "generator": "", "side_effect": ""}, "variables_p": {"actual": [["int", 0.19412407945911686], ["Tuple[Any, Any, Any, Any, Any, Any, Any]", 0.09850073403783119], ["Dict[str, float]", 0.08348205718629689], ["List[int]", 0.08277127376192583], ["Optional[str]", 0.07748136730496737]], "generator": [], "side_effect": [["str", 0.2763625119115123], ["List[str]", 0.11604543685408512]]}}], "name": "TestBigQueryIntervalCheckTrigger", "q_name": "TestBigQueryIntervalCheckTrigger", "variables": {}, "variables_p": {}}, {"cls_lc": [[537, 0], [627, 87]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": "Asserts that the BigQueryValueCheckTrigger correctly serializes its arguments and classpath.", "long_descr": null, "ret": null}, "fn_lc": [[538, 4], [554, 9]], "fn_var_ln": {"classpath": [[541, 8], [541, 17]], "kwargs": [[541, 19], [541, 25]]}, "fn_var_occur": {"classpath": [["classpath", "kwargs", "value_check_trigger", "serialize"]], "kwargs": [["classpath", "kwargs", "value_check_trigger", "serialize"], ["kwargs", "TEST_CONN_ID", "TEST_PASS_VALUE", "TEST_JOB_ID", "TEST_DATASET_ID", "TEST_GCP_PROJECT_ID", "TEST_SQL_QUERY", "TEST_TABLE_ID", "TEST_TOLERANCE", "POLLING_PERIOD_SECONDS"]]}, "name": "test_bigquery_value_check_op_trigger_serialization", "params": {"self": "", "value_check_trigger": ""}, "params_descr": {"self": "", "value_check_trigger": ""}, "params_occur": {"self": [], "value_check_trigger": [["classpath", "kwargs", "value_check_trigger", "serialize"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "value_check_trigger": [["Dict[str, Dict[str, int]]", 0.17936712165702193], ["int", 0.12350131681792463], ["frozenset", 0.11632014386873528], ["Iterable[str]", 0.10484966410917385], ["Callable", 0.09451996893494936]]}, "q_name": "TestBigQueryValueCheckTrigger.test_bigquery_value_check_op_trigger_serialization", "ret_exprs": [], "ret_type": "", "variables": {"classpath": "", "kwargs": ""}, "variables_p": {"classpath": [["int", 0.41061692576299375], ["Set[str]", 0.18423418887156595]], "kwargs": [["List[str]", 0.1951781178328848], ["bool", 0.11642562167816801], ["Dict[str, Tuple[Any, Any]]", 0.11274744500520803], ["List[Dict[str, str]]", 0.10292488348592806], ["int", 0.09469355483181584], ["Tuple[str]", 0.09225323434695673], ["set", 0.09225323434695673]]}}, {"docstring": {"func": "Tests BigQueryValueCheckTrigger only fires once the query execution reaches a successful state.", "long_descr": null, "ret": null}, "fn_lc": [[560, 4], [575, 104]], "fn_var_ln": {"actual": [[574, 8], [574, 14]], "generator": [[573, 8], [573, 17]], "return_value": [[568, 8], [568, 32]]}, "fn_var_occur": {"actual": [["actual", "generator", "asend", "None"], ["actual", "TriggerEvent"]], "generator": [["generator", "value_check_trigger", "run"], ["actual", "generator", "asend", "None"]], "return_value": [["mock_job_status", "return_value"], ["get_job_output", "return_value"], ["get_records", "return_value"]]}, "name": "test_value_check_op_trigger_success", "params": {"get_job_output": "", "get_records": "", "mock_job_status": "", "self": "", "value_check_trigger": ""}, "params_descr": {"get_job_output": "", "get_records": "", "mock_job_status": "", "self": "", "value_check_trigger": ""}, "params_occur": {"get_job_output": [["get_job_output", "return_value"]], "get_records": [["get_records", "return_value"]], "mock_job_status": [["mock_job_status", "return_value"]], "self": [], "value_check_trigger": [["asyncio", "create_task", "value_check_trigger", "run", "__anext__"], ["generator", "value_check_trigger", "run"]]}, "params_p": {"args": [], "get_job_output": [["Callable", 0.20439761926235472], ["bytes", 0.09729979793214209], ["List[str]", 0.09286423832394143]], "get_records": [["bool", 0.09851083835716626], ["Dict[str, Any]", 0.0976252537518537]], "kwargs": [], "mock_job_status": [["str", 0.22205161085644176], ["asyncio.AbstractEventLoop", 0.08689366667112947]], "self": [], "value_check_trigger": [["dict", 0.20244395171698165], ["str", 0.09989508130064018]]}, "q_name": "TestBigQueryValueCheckTrigger.test_value_check_op_trigger_success", "ret_exprs": [], "ret_type": "", "variables": {"actual": "", "generator": "", "return_value": ""}, "variables_p": {"actual": [["Optional[str]", 0.2], ["frozenset[str]", 0.1], ["ImportError", 0.1], ["bool", 0.1], ["str", 0.1], ["Dict[str, str]", 0.1]], "generator": [["str", 0.10651316354686825], ["Tuple[str]", 0.09340802777983645]], "return_value": [["str", 0.4516493439381646], ["int", 0.15951327018406813], ["list", 0.0946791042854055], ["List[Dict[str, str]]", 0.07185542352415053], ["Dict[str, str]", 0.06766063028043996]]}}, {"docstring": {"func": "Tests BigQueryValueCheckTrigger only fires once the query execution reaches a successful state.", "long_descr": null, "ret": null}, "fn_lc": [[579, 4], [597, 39]], "fn_var_ln": {"return_value": [[583, 8], [583, 36]], "task": [[586, 8], [586, 12]]}, "fn_var_occur": {"return_value": [["mock_job_status", "return_value"]], "task": [["task", "asyncio", "create_task", "value_check_trigger", "run", "__anext__"], ["task", "done", "False"]]}, "name": "test_value_check_op_trigger_pending", "params": {"caplog": "", "mock_job_status": "", "self": "", "value_check_trigger": ""}, "params_descr": {"caplog": "", "mock_job_status": "", "self": "", "value_check_trigger": ""}, "params_occur": {"caplog": [["caplog", "set_level", "logging", "INFO"], ["caplog", "text"], ["POLLING_PERIOD_SECONDS", "caplog", "text"]], "mock_job_status": [["mock_job_status", "return_value"]], "self": [], "value_check_trigger": [["task", "asyncio", "create_task", "value_check_trigger", "run", "__anext__"]]}, "params_p": {"args": [], "caplog": [["logging.Logger", 0.4254975389400689]], "kwargs": [], "mock_job_status": [], "self": [], "value_check_trigger": [["asyncio.AbstractEventLoop", 0.20231815348969834], ["str", 0.10218939784851795]]}, "q_name": "TestBigQueryValueCheckTrigger.test_value_check_op_trigger_pending", "ret_exprs": [], "ret_type": "", "variables": {"return_value": "", "task": ""}, "variables_p": {"return_value": [["int", 0.2019394697254881], ["str", 0.19308589920525446], ["List[Dict[str, Any]]", 0.14243513930147336], ["Dict[str, Dict[str, Any]]", 0.11827891728138035], ["Dict[str, Union[Any, Any, Any]]", 0.08293675731555421], ["bytes", 0.07921306490725989], ["Dict[str, int]", 0.07324341594128495]], "task": [["int", 0.20530061138044967], ["str", 0.11546079552089544], ["Dict[str, Any]", 0.10510655092332565], ["Dict[str, str]", 0.09107655932278005]]}}, {"docstring": {"func": "Tests BigQueryValueCheckTrigger only fires once the query execution reaches a successful state.", "long_descr": null, "ret": null}, "fn_lc": [[601, 4], [609, 95]], "fn_var_ln": {"actual": [[608, 8], [608, 14]], "generator": [[607, 8], [607, 17]], "return_value": [[605, 8], [605, 36]]}, "fn_var_occur": {"actual": [["actual", "generator", "asend", "None"], ["TriggerEvent", "None", "actual"]], "generator": [["generator", "value_check_trigger", "run"], ["actual", "generator", "asend", "None"]], "return_value": [["mock_job_status", "return_value"]]}, "name": "test_value_check_op_trigger_fail", "params": {"mock_job_status": "", "self": "", "value_check_trigger": ""}, "params_descr": {"mock_job_status": "", "self": "", "value_check_trigger": ""}, "params_occur": {"mock_job_status": [["mock_job_status", "return_value"]], "self": [], "value_check_trigger": [["generator", "value_check_trigger", "run"]]}, "params_p": {"args": [], "kwargs": [], "mock_job_status": [], "self": [], "value_check_trigger": [["asyncio.StreamReader", 0.2888205421632289], ["bytes", 0.10451610129351609], ["BinaryIO", 0.10451610129351609], ["str", 0.09884966084986022], ["bool", 0.09725729708125548]]}, "q_name": "TestBigQueryValueCheckTrigger.test_value_check_op_trigger_fail", "ret_exprs": [], "ret_type": "", "variables": {"actual": "", "generator": "", "return_value": ""}, "variables_p": {"actual": [["str", 0.20696225889645015], ["Optional[str]", 0.10418006875251312], ["int", 0.10408978380593048], ["List[None]", 0.09668966366624092], ["Dict[str, Any]", 0.09529384069258018], ["Union[Literal, Literal]", 0.07690368107961369]], "generator": [["str", 0.10651316354686825], ["Tuple[str]", 0.09340802777983645]], "return_value": [["int", 0.2019394697254881], ["str", 0.19308589920525446], ["List[Dict[str, Any]]", 0.14243513930147336], ["Dict[str, Dict[str, Any]]", 0.11827891728138035], ["Dict[str, Union[Any, Any, Any]]", 0.08293675731555421], ["bytes", 0.07921306490725989], ["Dict[str, int]", 0.07324341594128495]]}}, {"docstring": {"func": "Tests the BigQueryValueCheckTrigger does not fire if there is an exception.", "long_descr": null, "ret": null}, "fn_lc": [[613, 4], [627, 87]], "fn_var_ln": {"actual": [[626, 8], [626, 14]], "generator": [[625, 8], [625, 17]], "side_effect": [[615, 8], [615, 35]], "trigger": [[617, 8], [617, 15]]}, "fn_var_occur": {"actual": [["actual", "generator", "asend", "None"], ["TriggerEvent", "actual"]], "generator": [["generator", "trigger", "run"], ["actual", "generator", "asend", "None"]], "side_effect": [["mock_job_status", "side_effect", "Exception"]], "trigger": [["trigger", "BigQueryValueCheckTrigger", "conn_id", "TEST_CONN_ID", "sql", "TEST_SQL_QUERY", "pass_value", "TEST_PASS_VALUE", "tolerance", "job_id", "TEST_JOB_ID", "project_id", "TEST_GCP_PROJECT_ID"], ["generator", "trigger", "run"]]}, "name": "test_value_check_trigger_exception", "params": {"mock_job_status": "", "self": ""}, "params_descr": {"mock_job_status": "", "self": ""}, "params_occur": {"mock_job_status": [["mock_job_status", "side_effect", "Exception"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_job_status": [["tests.test_util.aiohttp.AiohttpClientMocker", 0.6938381368321995], ["str", 0.10224676713774423]], "self": []}, "q_name": "TestBigQueryValueCheckTrigger.test_value_check_trigger_exception", "ret_exprs": [], "ret_type": "", "variables": {"actual": "", "generator": "", "side_effect": "", "trigger": ""}, "variables_p": {"actual": [["int", 0.19412407945911686], ["Tuple[Any, Any, Any, Any, Any, Any, Any]", 0.09850073403783119], ["Dict[str, float]", 0.08348205718629689], ["List[int]", 0.08277127376192583], ["Optional[str]", 0.07748136730496737]], "generator": [["kornia.augmentation.base._BasicAugmentationBase", 0.16174662751959534], ["Union[Literal, Literal]", 0.12016314415089882]], "side_effect": [["str", 0.2763625119115123], ["List[str]", 0.11604543685408512]], "trigger": [["str", 0.30007428716735424], ["Dict[Any, str]", 0.12241210238147636], ["List[Tuple[int, str]]", 0.08260553348293073]]}}], "name": "TestBigQueryValueCheckTrigger", "q_name": "TestBigQueryValueCheckTrigger", "variables": {}, "variables_p": {}}, {"cls_lc": [[630, 0], [744, 13]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": "Asserts that the BigQueryTableExistenceTrigger correctly serializes its arguments and classpath.", "long_descr": null, "ret": null}, "fn_lc": [[631, 4], [645, 9]], "fn_var_ln": {"classpath": [[636, 8], [636, 17]], "kwargs": [[636, 19], [636, 25]]}, "fn_var_occur": {"classpath": [["classpath", "kwargs", "table_existence_trigger", "serialize"]], "kwargs": [["classpath", "kwargs", "table_existence_trigger", "serialize"], ["kwargs", "TEST_DATASET_ID", "TEST_GCP_PROJECT_ID", "TEST_TABLE_ID", "TEST_GCP_CONN_ID", "POLLING_PERIOD_SECONDS", "TEST_HOOK_PARAMS"]]}, "name": "test_table_existence_trigger_serialization", "params": {"self": "", "table_existence_trigger": ""}, "params_descr": {"self": "", "table_existence_trigger": ""}, "params_occur": {"self": [], "table_existence_trigger": [["classpath", "kwargs", "table_existence_trigger", "serialize"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "table_existence_trigger": [["str", 0.18740942540072403], ["List[int]", 0.16978011433869616], ["int", 0.10383594828877724], ["dict", 0.0841004326225328]]}, "q_name": "TestBigQueryTableExistenceTrigger.test_table_existence_trigger_serialization", "ret_exprs": [], "ret_type": "", "variables": {"classpath": "", "kwargs": ""}, "variables_p": {"classpath": [["int", 0.3340010683201349], ["Set[str]", 0.12718998188084762], ["Type[str]", 0.08245252766998915], ["DefaultDict[Any, Set[Any]]", 0.08017072803776888], ["Type[float]", 0.07834364674720276]], "kwargs": [["Dict[str, Union[int, str]]", 0.13697471908257006], ["tuple", 0.11570194136085955], ["int", 0.10856111848859405], ["bool", 0.10533178865414583], ["OrderedDict[str, Any]", 0.09984401193530308], ["Type[dict]", 0.09095302144609388], ["List[float]", 0.08528609107231215], ["List[Tuple[None, Any, str]]", 0.08375541106742282]]}}, {"docstring": {"func": "Tests success case BigQueryTableExistenceTrigger", "long_descr": null, "ret": null}, "fn_lc": [[651, 4], [659, 82]], "fn_var_ln": {"actual": [[658, 8], [658, 14]], "generator": [[657, 8], [657, 17]], "return_value": [[655, 8], [655, 38]]}, "fn_var_occur": {"actual": [["actual", "generator", "asend", "None"], ["TriggerEvent", "actual"]], "generator": [["generator", "table_existence_trigger", "run"], ["actual", "generator", "asend", "None"]], "return_value": [["mock_table_exists", "return_value", "True"]]}, "name": "test_big_query_table_existence_trigger_success", "params": {"mock_table_exists": "", "self": "", "table_existence_trigger": ""}, "params_descr": {"mock_table_exists": "", "self": "", "table_existence_trigger": ""}, "params_occur": {"mock_table_exists": [["mock_table_exists", "return_value", "True"]], "self": [], "table_existence_trigger": [["generator", "table_existence_trigger", "run"]]}, "params_p": {"args": [], "kwargs": [], "mock_table_exists": [["mock.MagicMock", 0.12742252195915255]], "self": [], "table_existence_trigger": [["bool", 0.11239703505926467]]}, "q_name": "TestBigQueryTableExistenceTrigger.test_big_query_table_existence_trigger_success", "ret_exprs": [], "ret_type": "", "variables": {"actual": "", "generator": "", "return_value": ""}, "variables_p": {"actual": [["int", 0.19412407945911686], ["Tuple[Any, Any, Any, Any, Any, Any, Any]", 0.09850073403783119], ["Dict[str, float]", 0.08348205718629689], ["List[int]", 0.08277127376192583], ["Optional[str]", 0.07748136730496737]], "generator": [["bool", 0.09798443645170417], ["Optional[str]", 0.0925589195956807], ["str", 0.08901831980221184], ["asyncio.events.AbstractEventLoop", 0.08843899387305898]], "return_value": [["list", 0.2596653634478312], ["str", 0.22338470776206304], ["Optional[bytes]", 0.10690231555900659], ["Tuple[int, int]", 0.10477791248428987], ["List[str]", 0.09381268881424835], ["Dict[str, Dict[str, Any]]", 0.08346328785996857]]}}, {"docstring": {"func": "Test that BigQueryTableExistenceTrigger is in loop till the table exist.", "long_descr": null, "ret": null}, "fn_lc": [[665, 4], [674, 39]], "fn_var_ln": {"return_value": [[667, 8], [667, 38]], "task": [[669, 8], [669, 12]]}, "fn_var_occur": {"return_value": [["mock_table_exists", "return_value", "False"]], "task": [["task", "asyncio", "create_task", "table_existence_trigger", "run", "__anext__"], ["task", "done", "False"]]}, "name": "test_table_existence_trigger_pending", "params": {"mock_table_exists": "", "self": "", "table_existence_trigger": ""}, "params_descr": {"mock_table_exists": "", "self": "", "table_existence_trigger": ""}, "params_occur": {"mock_table_exists": [["mock_table_exists", "return_value", "False"]], "self": [], "table_existence_trigger": [["task", "asyncio", "create_task", "table_existence_trigger", "run", "__anext__"]]}, "params_p": {"args": [], "kwargs": [], "mock_table_exists": [], "self": [], "table_existence_trigger": [["tests.test_util.aiohttp.AiohttpClientMocker", 0.17709160293497653]]}, "q_name": "TestBigQueryTableExistenceTrigger.test_table_existence_trigger_pending", "ret_exprs": [], "ret_type": "", "variables": {"return_value": "", "task": ""}, "variables_p": {"return_value": [["str", 0.22934882972076825], ["list", 0.15253854943259354], ["List[str]", 0.1277359833332263], ["Dict[str, Dict[str, Any]]", 0.10403407725888787], ["Optional[bytes]", 0.0975889236113442], ["Tuple[int, int]", 0.094731377437766], ["Type[Dict[Any, Any]]", 0.07308052935149305]], "task": [["Dict[str, Any]", 0.09794732927759864], ["Dict[str, dict]", 0.08931282644639803]]}}, {"docstring": {"func": "Test BigQueryTableExistenceTrigger throws exception if any error.", "long_descr": null, "ret": null}, "fn_lc": [[680, 4], [686, 87]], "fn_var_ln": {"actual": [[685, 8], [685, 14]], "generator": [[684, 8], [684, 17]], "side_effect": [[682, 8], [682, 37]]}, "fn_var_occur": {"actual": [["actual", "generator", "asend", "None"], ["TriggerEvent", "actual"]], "generator": [["generator", "table_existence_trigger", "run"], ["actual", "generator", "asend", "None"]], "side_effect": [["mock_table_exists", "side_effect", "AsyncMock", "side_effect", "Exception"]]}, "name": "test_table_existence_trigger_exception", "params": {"mock_table_exists": "", "self": "", "table_existence_trigger": ""}, "params_descr": {"mock_table_exists": "", "self": "", "table_existence_trigger": ""}, "params_occur": {"mock_table_exists": [["mock_table_exists", "side_effect", "AsyncMock", "side_effect", "Exception"]], "self": [], "table_existence_trigger": [["generator", "table_existence_trigger", "run"]]}, "params_p": {"args": [], "kwargs": [], "mock_table_exists": [["mock.Mock", 0.17885158997870668]], "self": [], "table_existence_trigger": [["bool", 0.11212456050839867]]}, "q_name": "TestBigQueryTableExistenceTrigger.test_table_existence_trigger_exception", "ret_exprs": [], "ret_type": "", "variables": {"actual": "", "generator": "", "side_effect": ""}, "variables_p": {"actual": [["int", 0.19412407945911686], ["Tuple[Any, Any, Any, Any, Any, Any, Any]", 0.09850073403783119], ["Dict[str, float]", 0.08348205718629689], ["List[int]", 0.08277127376192583], ["Optional[str]", 0.07748136730496737]], "generator": [["bool", 0.09798443645170417], ["Optional[str]", 0.0925589195956807], ["str", 0.08901831980221184], ["asyncio.events.AbstractEventLoop", 0.08843899387305898]], "side_effect": [["str", 0.09418525928395377], ["int", 0.09212873441065995]]}}, {"docstring": {"func": "Test BigQueryTableExistenceTrigger._table_exists async function with mocked value", "long_descr": "and mocked return value", "ret": null}, "fn_lc": [[690, 4], [699, 26]], "fn_var_ln": {"hook": [[693, 8], [693, 12]], "res": [[696, 8], [696, 11]], "return_value": [[694, 8], [694, 42]]}, "fn_var_occur": {"hook": [["hook", "BigQueryTableAsyncHook"], ["res", "table_existence_trigger", "_table_exists", "hook", "TEST_DATASET_ID", "TEST_TABLE_ID", "TEST_GCP_PROJECT_ID"]], "res": [["res", "table_existence_trigger", "_table_exists", "hook", "TEST_DATASET_ID", "TEST_TABLE_ID", "TEST_GCP_PROJECT_ID"], ["res", "True"]], "return_value": [["mock_get_table_client", "return_value", "AsyncMock", "Table"]]}, "name": "test_table_exists", "params": {"mock_get_table_client": "", "self": "", "table_existence_trigger": ""}, "params_descr": {"mock_get_table_client": "", "self": "", "table_existence_trigger": ""}, "params_occur": {"mock_get_table_client": [["mock_get_table_client", "return_value", "AsyncMock", "Table"]], "self": [], "table_existence_trigger": [["res", "table_existence_trigger", "_table_exists", "hook", "TEST_DATASET_ID", "TEST_TABLE_ID", "TEST_GCP_PROJECT_ID"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_table_client": [["Dict[str, Any]", 0.09866862241508668]], "self": [], "table_existence_trigger": [["List[str]", 0.2455927897023435], ["str", 0.1929641895548467], ["bool", 0.10234444462932796], ["int", 0.10234444462932796], ["Optional[Mapping]", 0.08863617787666202]]}, "q_name": "TestBigQueryTableExistenceTrigger.test_table_exists", "ret_exprs": [], "ret_type": "", "variables": {"hook": "", "res": "", "return_value": ""}, "variables_p": {"hook": [["str", 0.39813852285357904], ["property", 0.11195522224833278], ["Tuple[str, str, str, str, str]", 0.10333157821805526], ["bool", 0.09635330735537131], ["Tuple[int]", 0.08538203881060093]], "res": [["str", 0.33095135440348467], ["List[str]", 0.19219462625395473], ["Dict[str, Union[Any, Any, Any, Any]]", 0.1141884488549774], ["Dict[str, Dict[str, float]]", 0.0920836210799163], ["Union[Literal, str]", 0.08889196596442445]], "return_value": [["str", 0.27361612639759764], ["Dict[str, Union[int, str]]", 0.1443329442861327], ["bytes", 0.09323415608505721], ["Dict[str, Any]", 0.09192948011646347]]}}, {"docstring": {"func": "Test BigQueryTableExistenceTrigger._table_exists async function with exception and return False", "long_descr": null, "ret": null}, "fn_lc": [[703, 4], [722, 39]], "fn_var_ln": {"expected_response": [[721, 8], [721, 25]], "hook": [[705, 8], [705, 12]], "res": [[718, 8], [718, 11]], "side_effect": [[706, 8], [706, 41]]}, "fn_var_occur": {"expected_response": [["expected_response", "False"], ["res", "expected_response"]], "hook": [["hook", "BigQueryTableAsyncHook"], ["res", "table_existence_trigger", "_table_exists", "hook", "TEST_DATASET_ID", "TEST_TABLE_ID", "TEST_GCP_PROJECT_ID"]], "res": [["res", "table_existence_trigger", "_table_exists", "hook", "TEST_DATASET_ID", "TEST_TABLE_ID", "TEST_GCP_PROJECT_ID"], ["res", "expected_response"]], "side_effect": [["mock_get_table_client", "side_effect", "ClientResponseError", "history", "request_info", "RequestInfo", "headers", "CIMultiDict", "real_url", "URL", "method", "url", "URL", "status", "message"]]}, "name": "test_table_exists_exception", "params": {"mock_get_table_client": "", "self": "", "table_existence_trigger": ""}, "params_descr": {"mock_get_table_client": "", "self": "", "table_existence_trigger": ""}, "params_occur": {"mock_get_table_client": [["mock_get_table_client", "side_effect", "ClientResponseError", "history", "request_info", "RequestInfo", "headers", "CIMultiDict", "real_url", "URL", "method", "url", "URL", "status", "message"]], "self": [], "table_existence_trigger": [["res", "table_existence_trigger", "_table_exists", "hook", "TEST_DATASET_ID", "TEST_TABLE_ID", "TEST_GCP_PROJECT_ID"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_table_client": [["graphql.execution.base.ResolveInfo", 0.4970010380672869], ["aiohttp.ClientSession", 0.10677455517603068]], "self": [], "table_existence_trigger": [["List[str]", 0.2467780346846931], ["bool", 0.10085819748669546], ["int", 0.10085819748669546], ["str", 0.09985419786365893], ["TextIO", 0.09312623803721931], ["dict", 0.08900667176828624]]}, "q_name": "TestBigQueryTableExistenceTrigger.test_table_exists_exception", "ret_exprs": [], "ret_type": "", "variables": {"expected_response": "", "hook": "", "res": "", "side_effect": ""}, "variables_p": {"expected_response": [["list", 0.28378032949247045], ["List[dict]", 0.11340375568083365], ["List[str]", 0.11013317677556578], ["int", 0.09423686582360119], ["Dict[str, int]", 0.09227952000325047], ["str", 0.09126333695573978]], "hook": [["str", 0.39813852285357904], ["property", 0.11195522224833278], ["Tuple[str, str, str, str, str]", 0.10333157821805526], ["bool", 0.09635330735537131], ["Tuple[int]", 0.08538203881060093]], "res": [["str", 0.38781150091355676], ["Dict[str, Union[Any, Any, Any, Any]]", 0.10788875492379159], ["set", 0.10344785681638992], ["List[str]", 0.08983676064158451], ["Union[Literal, str]", 0.08762244352613875]], "side_effect": [["str", 0.137409319643537], ["List[str]", 0.09577870956751877]]}}, {"docstring": {"func": "Test BigQueryTableExistenceTrigger._table_exists async function with raise exception", "long_descr": null, "ret": null}, "fn_lc": [[726, 4], [744, 13]], "fn_var_ln": {"hook": [[728, 8], [728, 12]], "side_effect": [[729, 8], [729, 41]]}, "fn_var_occur": {"hook": [["hook", "BigQueryTableAsyncHook"], ["table_existence_trigger", "_table_exists", "hook", "TEST_DATASET_ID", "TEST_TABLE_ID", "TEST_GCP_PROJECT_ID"]], "side_effect": [["mock_get_table_client", "side_effect", "ClientResponseError", "history", "request_info", "RequestInfo", "headers", "CIMultiDict", "real_url", "URL", "method", "url", "URL", "status", "message"]]}, "name": "test_table_exists_raise_exception", "params": {"mock_get_table_client": "", "self": "", "table_existence_trigger": ""}, "params_descr": {"mock_get_table_client": "", "self": "", "table_existence_trigger": ""}, "params_occur": {"mock_get_table_client": [["mock_get_table_client", "side_effect", "ClientResponseError", "history", "request_info", "RequestInfo", "headers", "CIMultiDict", "real_url", "URL", "method", "url", "URL", "status", "message"]], "self": [], "table_existence_trigger": [["table_existence_trigger", "_table_exists", "hook", "TEST_DATASET_ID", "TEST_TABLE_ID", "TEST_GCP_PROJECT_ID"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_table_client": [["graphql.execution.base.ResolveInfo", 0.28352796803657254], ["aiohttp.ClientSession", 0.1158228777428826]], "self": [], "table_existence_trigger": [["List[str]", 0.20062644195219165], ["Optional[Mapping]", 0.11411659178364622], ["dict", 0.0955649798599686]]}, "q_name": "TestBigQueryTableExistenceTrigger.test_table_exists_raise_exception", "ret_exprs": [], "ret_type": "", "variables": {"hook": "", "side_effect": ""}, "variables_p": {"hook": [["tuple", 0.10135840200560639], ["Dict[str, Any]", 0.09554457503385518], ["Dict[Any, str]", 0.09386040007518714]], "side_effect": [["str", 0.137409319643537], ["List[str]", 0.09577870956751877]]}}], "name": "TestBigQueryTableExistenceTrigger", "q_name": "TestBigQueryTableExistenceTrigger", "variables": {}, "variables_p": {}}, {"cls_lc": [[747, 0], [777, 9]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": "Asserts that the BigQueryTablePartitionExistenceTrigger correctly serializes its arguments", "long_descr": "and classpath.", "ret": null}, "fn_lc": [[748, 4], [777, 9]], "fn_var_ln": {"classpath": [[764, 8], [764, 17]], "kwargs": [[764, 19], [764, 25]], "trigger": [[754, 8], [754, 15]]}, "fn_var_occur": {"classpath": [["classpath", "kwargs", "trigger", "serialize"]], "kwargs": [["classpath", "kwargs", "trigger", "serialize"], ["kwargs", "TEST_DATASET_ID", "TEST_GCP_PROJECT_ID", "TEST_TABLE_ID", "TEST_PARTITION_ID", "TEST_GCP_CONN_ID", "POLLING_PERIOD_SECONDS", "TEST_HOOK_PARAMS"]], "trigger": [["trigger", "BigQueryTablePartitionExistenceTrigger", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "project_id", "TEST_GCP_PROJECT_ID", "partition_id", "TEST_PARTITION_ID", "poll_interval", "POLLING_PERIOD_SECONDS", "gcp_conn_id", "TEST_GCP_CONN_ID", "hook_params"], ["classpath", "kwargs", "trigger", "serialize"]]}, "name": "test_serialization_successfully", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestBigQueryTablePartitionExistenceTrigger.test_serialization_successfully", "ret_exprs": [], "ret_type": "", "variables": {"classpath": "", "kwargs": "", "trigger": ""}, "variables_p": {"classpath": [["Set[str]", 0.4999999999750701], ["int", 0.49999999996228883], ["Dict[str, Union[int, str]]", 1.582796261262258e-11], ["List[str]", 1.3730011143514454e-11], ["str", 1.0971499556494418e-11], ["bool", 1.0865339793385232e-11]], "kwargs": [["Dict[str, List[Any]]", 0.19658553136622375], ["dict", 0.18405420379279258], ["Tuple[Tuple[str, Any]]", 0.08701183297380821]], "trigger": [["str", 0.4077726100556278], ["float", 0.08702821000098955]]}}], "name": "TestBigQueryTablePartitionExistenceTrigger", "q_name": "TestBigQueryTablePartitionExistenceTrigger", "variables": {}, "variables_p": {}}], "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[65, 0], [73, 5]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "insert_job_trigger", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "insert_job_trigger", "ret_exprs": ["return BigQueryInsertJobTrigger( conn_id=TEST_CONN_ID, job_id=TEST_JOB_ID, project_id=TEST_GCP_PROJECT_ID, dataset_id=TEST_DATASET_ID, table_id=TEST_TABLE_ID, poll_interval=POLLING_PERIOD_SECONDS,)"], "ret_type": "", "ret_type_p": [["str", 0.3183752256702853], ["Dict[str, Any]", 0.2807222957946504], ["List[Dict[str, Any]]", 0.10264638708265517], ["dict", 0.09941869715080305]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[77, 0], [85, 5]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "get_data_trigger", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "get_data_trigger", "ret_exprs": ["return BigQueryGetDataTrigger( conn_id=TEST_CONN_ID, job_id=TEST_JOB_ID, project_id=TEST_GCP_PROJECT_ID, dataset_id=TEST_DATASET_ID, table_id=TEST_TABLE_ID, poll_interval=POLLING_PERIOD_SECONDS,)"], "ret_type": "", "ret_type_p": [["dict", 0.19791821039160398], ["Dict[str, str]", 0.10324394657970651], ["Optional[List[str]]", 0.09789626110396404]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[89, 0], [97, 5]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "table_existence_trigger", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "table_existence_trigger", "ret_exprs": ["return BigQueryTableExistenceTrigger( TEST_GCP_PROJECT_ID, TEST_DATASET_ID, TEST_TABLE_ID, TEST_GCP_CONN_ID, TEST_HOOK_PARAMS, POLLING_PERIOD_SECONDS,)"], "ret_type": "", "ret_type_p": [["Dict[str, Any]", 0.3871909384384581], ["dict", 0.08818670730403033], ["Mapping[str, Any]", 0.08794160220489472], ["Mapping[Tuple[str, str], Any]", 0.08742837758668748]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[101, 0], [116, 5]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "interval_check_trigger", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "interval_check_trigger", "ret_exprs": ["return BigQueryIntervalCheckTrigger( conn_id=TEST_CONN_ID, first_job_id=TEST_FIRST_JOB_ID, second_job_id=TEST_SECOND_JOB_ID, project_id=TEST_GCP_PROJECT_ID, table=TEST_TABLE_ID, metrics_thresholds=TEST_METRIC_THRESHOLDS, date_filter_column=TEST_DATE_FILTER_COLUMN, days_back=TEST_DAYS_BACK, ratio_formula=TEST_RATIO_FORMULA, ignore_zero=TEST_IGNORE_ZERO, dataset_id=TEST_DATASET_ID, table_id=TEST_TABLE_ID, poll_interval=POLLING_PERIOD_SECONDS,)"], "ret_type": "", "ret_type_p": [["str", 0.3183752256702853], ["Dict[str, Any]", 0.2807222957946504], ["List[Dict[str, Any]]", 0.10264638708265517], ["dict", 0.09941869715080305]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[120, 0], [128, 5]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "check_trigger", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "check_trigger", "ret_exprs": ["return BigQueryCheckTrigger( conn_id=TEST_CONN_ID, job_id=TEST_JOB_ID, project_id=TEST_GCP_PROJECT_ID, dataset_id=TEST_DATASET_ID, table_id=TEST_TABLE_ID, poll_interval=POLLING_PERIOD_SECONDS,)"], "ret_type": "", "ret_type_p": [["int", 0.11327878064785042], ["Dict[str, int]", 0.1039374340010734], ["str", 0.09817123345386021], ["bool", 0.09419618956273412]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[132, 0], [143, 5]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "value_check_trigger", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "value_check_trigger", "ret_exprs": ["return BigQueryValueCheckTrigger( conn_id=TEST_CONN_ID, pass_value=TEST_PASS_VALUE, job_id=TEST_JOB_ID, dataset_id=TEST_DATASET_ID, project_id=TEST_GCP_PROJECT_ID, sql=TEST_SQL_QUERY, table_id=TEST_TABLE_ID, tolerance=TEST_TOLERANCE, poll_interval=POLLING_PERIOD_SECONDS,)"], "ret_type": "", "ret_type_p": [["bool", 0.20849974650451997], ["Dict[str, Any]", 0.20457693011473974], ["int", 0.09545034649928684]], "variables": {}, "variables_p": {}}], "imports": ["__future__", "annotations", "asyncio", "logging", "typing", "Any", "unittest", "mock", "unittest", "mock", "AsyncMock", "pytest", "aiohttp", "ClientResponseError", "RequestInfo", "gcloud", "aio", "bigquery", "Job", "Table", "multidict", "CIMultiDict", "yarl", "URL", "airflow", "providers", "google", "cloud", "hooks", "bigquery", "BigQueryTableAsyncHook", "airflow", "providers", "google", "cloud", "triggers", "bigquery", "BigQueryCheckTrigger", "BigQueryGetDataTrigger", "BigQueryInsertJobTrigger", "BigQueryIntervalCheckTrigger", "BigQueryTableExistenceTrigger", "BigQueryTablePartitionExistenceTrigger", "BigQueryValueCheckTrigger", "airflow", "triggers", "base", "TriggerEvent"], "mod_var_ln": {"POLLING_PERIOD_SECONDS": [[48, 0], [48, 22]], "TEST_CONN_ID": [[43, 0], [43, 12]], "TEST_DATASET_ID": [[46, 0], [46, 15]], "TEST_DATE_FILTER_COLUMN": [[55, 0], [55, 23]], "TEST_DAYS_BACK": [[56, 0], [56, 14]], "TEST_FIRST_JOB_ID": [[52, 0], [52, 17]], "TEST_GCP_CONN_ID": [[59, 0], [59, 16]], "TEST_GCP_PROJECT_ID": [[45, 0], [45, 19]], "TEST_HOOK_PARAMS": [[60, 0], [60, 16]], "TEST_IGNORE_ZERO": [[58, 0], [58, 16]], "TEST_JOB_ID": [[44, 0], [44, 11]], "TEST_METRIC_THRESHOLDS": [[54, 0], [54, 22]], "TEST_PARTITION_ID": [[61, 0], [61, 17]], "TEST_PASS_VALUE": [[50, 0], [50, 15]], "TEST_RATIO_FORMULA": [[57, 0], [57, 18]], "TEST_SECOND_JOB_ID": [[53, 0], [53, 18]], "TEST_SQL_QUERY": [[49, 0], [49, 14]], "TEST_TABLE_ID": [[47, 0], [47, 13]], "TEST_TOLERANCE": [[51, 0], [51, 14]]}, "mod_var_occur": {"POLLING_PERIOD_SECONDS": [["BigQueryInsertJobTrigger", "conn_id", "TEST_CONN_ID", "job_id", "TEST_JOB_ID", "project_id", "TEST_GCP_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "poll_interval", "POLLING_PERIOD_SECONDS"], ["BigQueryGetDataTrigger", "conn_id", "TEST_CONN_ID", "job_id", "TEST_JOB_ID", "project_id", "TEST_GCP_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "poll_interval", "POLLING_PERIOD_SECONDS"], ["BigQueryTableExistenceTrigger", "TEST_GCP_PROJECT_ID", "TEST_DATASET_ID", "TEST_TABLE_ID", "TEST_GCP_CONN_ID", "TEST_HOOK_PARAMS", "POLLING_PERIOD_SECONDS"], ["BigQueryIntervalCheckTrigger", "conn_id", "TEST_CONN_ID", "first_job_id", "TEST_FIRST_JOB_ID", "second_job_id", "TEST_SECOND_JOB_ID", "project_id", "TEST_GCP_PROJECT_ID", "table", "TEST_TABLE_ID", "metrics_thresholds", "TEST_METRIC_THRESHOLDS", "date_filter_column", "TEST_DATE_FILTER_COLUMN", "days_back", "TEST_DAYS_BACK", "ratio_formula", "TEST_RATIO_FORMULA", "ignore_zero", "TEST_IGNORE_ZERO", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "poll_interval", "POLLING_PERIOD_SECONDS"], ["BigQueryCheckTrigger", "conn_id", "TEST_CONN_ID", "job_id", "TEST_JOB_ID", "project_id", "TEST_GCP_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "poll_interval", "POLLING_PERIOD_SECONDS"], ["BigQueryValueCheckTrigger", "conn_id", "TEST_CONN_ID", "pass_value", "TEST_PASS_VALUE", "job_id", "TEST_JOB_ID", "dataset_id", "TEST_DATASET_ID", "project_id", "TEST_GCP_PROJECT_ID", "sql", "TEST_SQL_QUERY", "table_id", "TEST_TABLE_ID", "tolerance", "TEST_TOLERANCE", "poll_interval", "POLLING_PERIOD_SECONDS"], ["kwargs", "TEST_CONN_ID", "TEST_JOB_ID", "TEST_GCP_PROJECT_ID", "TEST_DATASET_ID", "TEST_TABLE_ID", "POLLING_PERIOD_SECONDS"], ["POLLING_PERIOD_SECONDS", "caplog", "text"], ["kwargs", "False", "TEST_CONN_ID", "TEST_JOB_ID", "TEST_DATASET_ID", "TEST_GCP_PROJECT_ID", "TEST_TABLE_ID", "POLLING_PERIOD_SECONDS"], ["POLLING_PERIOD_SECONDS", "caplog", "text"], ["POLLING_PERIOD_SECONDS", "caplog", "text"], ["kwargs", "TEST_CONN_ID", "TEST_JOB_ID", "TEST_DATASET_ID", "TEST_GCP_PROJECT_ID", "TEST_TABLE_ID", "POLLING_PERIOD_SECONDS"], ["POLLING_PERIOD_SECONDS", "caplog", "text"], ["kwargs", "TEST_CONN_ID", "TEST_PASS_VALUE", "TEST_JOB_ID", "TEST_DATASET_ID", "TEST_GCP_PROJECT_ID", "TEST_SQL_QUERY", "TEST_TABLE_ID", "TEST_TOLERANCE", "POLLING_PERIOD_SECONDS"], ["POLLING_PERIOD_SECONDS", "caplog", "text"], ["kwargs", "TEST_DATASET_ID", "TEST_GCP_PROJECT_ID", "TEST_TABLE_ID", "TEST_GCP_CONN_ID", "POLLING_PERIOD_SECONDS", "TEST_HOOK_PARAMS"], ["trigger", "BigQueryTablePartitionExistenceTrigger", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "project_id", "TEST_GCP_PROJECT_ID", "partition_id", "TEST_PARTITION_ID", "poll_interval", "POLLING_PERIOD_SECONDS", "gcp_conn_id", "TEST_GCP_CONN_ID", "hook_params"], ["kwargs", "TEST_DATASET_ID", "TEST_GCP_PROJECT_ID", "TEST_TABLE_ID", "TEST_PARTITION_ID", "TEST_GCP_CONN_ID", "POLLING_PERIOD_SECONDS", "TEST_HOOK_PARAMS"]], "TEST_CONN_ID": [["BigQueryInsertJobTrigger", "conn_id", "TEST_CONN_ID", "job_id", "TEST_JOB_ID", "project_id", "TEST_GCP_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "poll_interval", "POLLING_PERIOD_SECONDS"], ["BigQueryGetDataTrigger", "conn_id", "TEST_CONN_ID", "job_id", "TEST_JOB_ID", "project_id", "TEST_GCP_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "poll_interval", "POLLING_PERIOD_SECONDS"], ["BigQueryIntervalCheckTrigger", "conn_id", "TEST_CONN_ID", "first_job_id", "TEST_FIRST_JOB_ID", "second_job_id", "TEST_SECOND_JOB_ID", "project_id", "TEST_GCP_PROJECT_ID", "table", "TEST_TABLE_ID", "metrics_thresholds", "TEST_METRIC_THRESHOLDS", "date_filter_column", "TEST_DATE_FILTER_COLUMN", "days_back", "TEST_DAYS_BACK", "ratio_formula", "TEST_RATIO_FORMULA", "ignore_zero", "TEST_IGNORE_ZERO", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "poll_interval", "POLLING_PERIOD_SECONDS"], ["BigQueryCheckTrigger", "conn_id", "TEST_CONN_ID", "job_id", "TEST_JOB_ID", "project_id", "TEST_GCP_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "poll_interval", "POLLING_PERIOD_SECONDS"], ["BigQueryValueCheckTrigger", "conn_id", "TEST_CONN_ID", "pass_value", "TEST_PASS_VALUE", "job_id", "TEST_JOB_ID", "dataset_id", "TEST_DATASET_ID", "project_id", "TEST_GCP_PROJECT_ID", "sql", "TEST_SQL_QUERY", "table_id", "TEST_TABLE_ID", "tolerance", "TEST_TOLERANCE", "poll_interval", "POLLING_PERIOD_SECONDS"], ["kwargs", "TEST_CONN_ID", "TEST_JOB_ID", "TEST_GCP_PROJECT_ID", "TEST_DATASET_ID", "TEST_TABLE_ID", "POLLING_PERIOD_SECONDS"], ["kwargs", "False", "TEST_CONN_ID", "TEST_JOB_ID", "TEST_DATASET_ID", "TEST_GCP_PROJECT_ID", "TEST_TABLE_ID", "POLLING_PERIOD_SECONDS"], ["kwargs", "TEST_CONN_ID", "TEST_JOB_ID", "TEST_DATASET_ID", "TEST_GCP_PROJECT_ID", "TEST_TABLE_ID", "POLLING_PERIOD_SECONDS"], ["kwargs", "TEST_CONN_ID", "TEST_FIRST_JOB_ID", "TEST_SECOND_JOB_ID", "TEST_GCP_PROJECT_ID", "TEST_TABLE_ID", "TEST_METRIC_THRESHOLDS", "TEST_DATE_FILTER_COLUMN", "TEST_DAYS_BACK", "TEST_RATIO_FORMULA", "TEST_IGNORE_ZERO"], ["kwargs", "TEST_CONN_ID", "TEST_PASS_VALUE", "TEST_JOB_ID", "TEST_DATASET_ID", "TEST_GCP_PROJECT_ID", "TEST_SQL_QUERY", "TEST_TABLE_ID", "TEST_TOLERANCE", "POLLING_PERIOD_SECONDS"], ["trigger", "BigQueryValueCheckTrigger", "conn_id", "TEST_CONN_ID", "sql", "TEST_SQL_QUERY", "pass_value", "TEST_PASS_VALUE", "tolerance", "job_id", "TEST_JOB_ID", "project_id", "TEST_GCP_PROJECT_ID"]], "TEST_DATASET_ID": [["BigQueryInsertJobTrigger", "conn_id", "TEST_CONN_ID", "job_id", "TEST_JOB_ID", "project_id", "TEST_GCP_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "poll_interval", "POLLING_PERIOD_SECONDS"], ["BigQueryGetDataTrigger", "conn_id", "TEST_CONN_ID", "job_id", "TEST_JOB_ID", "project_id", "TEST_GCP_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "poll_interval", "POLLING_PERIOD_SECONDS"], ["BigQueryTableExistenceTrigger", "TEST_GCP_PROJECT_ID", "TEST_DATASET_ID", "TEST_TABLE_ID", "TEST_GCP_CONN_ID", "TEST_HOOK_PARAMS", "POLLING_PERIOD_SECONDS"], ["BigQueryIntervalCheckTrigger", "conn_id", "TEST_CONN_ID", "first_job_id", "TEST_FIRST_JOB_ID", "second_job_id", "TEST_SECOND_JOB_ID", "project_id", "TEST_GCP_PROJECT_ID", "table", "TEST_TABLE_ID", "metrics_thresholds", "TEST_METRIC_THRESHOLDS", "date_filter_column", "TEST_DATE_FILTER_COLUMN", "days_back", "TEST_DAYS_BACK", "ratio_formula", "TEST_RATIO_FORMULA", "ignore_zero", "TEST_IGNORE_ZERO", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "poll_interval", "POLLING_PERIOD_SECONDS"], ["BigQueryCheckTrigger", "conn_id", "TEST_CONN_ID", "job_id", "TEST_JOB_ID", "project_id", "TEST_GCP_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "poll_interval", "POLLING_PERIOD_SECONDS"], ["BigQueryValueCheckTrigger", "conn_id", "TEST_CONN_ID", "pass_value", "TEST_PASS_VALUE", "job_id", "TEST_JOB_ID", "dataset_id", "TEST_DATASET_ID", "project_id", "TEST_GCP_PROJECT_ID", "sql", "TEST_SQL_QUERY", "table_id", "TEST_TABLE_ID", "tolerance", "TEST_TOLERANCE", "poll_interval", "POLLING_PERIOD_SECONDS"], ["kwargs", "TEST_CONN_ID", "TEST_JOB_ID", "TEST_GCP_PROJECT_ID", "TEST_DATASET_ID", "TEST_TABLE_ID", "POLLING_PERIOD_SECONDS"], ["kwargs", "False", "TEST_CONN_ID", "TEST_JOB_ID", "TEST_DATASET_ID", "TEST_GCP_PROJECT_ID", "TEST_TABLE_ID", "POLLING_PERIOD_SECONDS"], ["kwargs", "TEST_CONN_ID", "TEST_JOB_ID", "TEST_DATASET_ID", "TEST_GCP_PROJECT_ID", "TEST_TABLE_ID", "POLLING_PERIOD_SECONDS"], ["kwargs", "TEST_CONN_ID", "TEST_PASS_VALUE", "TEST_JOB_ID", "TEST_DATASET_ID", "TEST_GCP_PROJECT_ID", "TEST_SQL_QUERY", "TEST_TABLE_ID", "TEST_TOLERANCE", "POLLING_PERIOD_SECONDS"], ["kwargs", "TEST_DATASET_ID", "TEST_GCP_PROJECT_ID", "TEST_TABLE_ID", "TEST_GCP_CONN_ID", "POLLING_PERIOD_SECONDS", "TEST_HOOK_PARAMS"], ["res", "table_existence_trigger", "_table_exists", "hook", "TEST_DATASET_ID", "TEST_TABLE_ID", "TEST_GCP_PROJECT_ID"], ["res", "table_existence_trigger", "_table_exists", "hook", "TEST_DATASET_ID", "TEST_TABLE_ID", "TEST_GCP_PROJECT_ID"], ["table_existence_trigger", "_table_exists", "hook", "TEST_DATASET_ID", "TEST_TABLE_ID", "TEST_GCP_PROJECT_ID"], ["trigger", "BigQueryTablePartitionExistenceTrigger", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "project_id", "TEST_GCP_PROJECT_ID", "partition_id", "TEST_PARTITION_ID", "poll_interval", "POLLING_PERIOD_SECONDS", "gcp_conn_id", "TEST_GCP_CONN_ID", "hook_params"], ["kwargs", "TEST_DATASET_ID", "TEST_GCP_PROJECT_ID", "TEST_TABLE_ID", "TEST_PARTITION_ID", "TEST_GCP_CONN_ID", "POLLING_PERIOD_SECONDS", "TEST_HOOK_PARAMS"]], "TEST_DATE_FILTER_COLUMN": [["BigQueryIntervalCheckTrigger", "conn_id", "TEST_CONN_ID", "first_job_id", "TEST_FIRST_JOB_ID", "second_job_id", "TEST_SECOND_JOB_ID", "project_id", "TEST_GCP_PROJECT_ID", "table", "TEST_TABLE_ID", "metrics_thresholds", "TEST_METRIC_THRESHOLDS", "date_filter_column", "TEST_DATE_FILTER_COLUMN", "days_back", "TEST_DAYS_BACK", "ratio_formula", "TEST_RATIO_FORMULA", "ignore_zero", "TEST_IGNORE_ZERO", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "poll_interval", "POLLING_PERIOD_SECONDS"], ["kwargs", "TEST_CONN_ID", "TEST_FIRST_JOB_ID", "TEST_SECOND_JOB_ID", "TEST_GCP_PROJECT_ID", "TEST_TABLE_ID", "TEST_METRIC_THRESHOLDS", "TEST_DATE_FILTER_COLUMN", "TEST_DAYS_BACK", "TEST_RATIO_FORMULA", "TEST_IGNORE_ZERO"]], "TEST_DAYS_BACK": [["BigQueryIntervalCheckTrigger", "conn_id", "TEST_CONN_ID", "first_job_id", "TEST_FIRST_JOB_ID", "second_job_id", "TEST_SECOND_JOB_ID", "project_id", "TEST_GCP_PROJECT_ID", "table", "TEST_TABLE_ID", "metrics_thresholds", "TEST_METRIC_THRESHOLDS", "date_filter_column", "TEST_DATE_FILTER_COLUMN", "days_back", "TEST_DAYS_BACK", "ratio_formula", "TEST_RATIO_FORMULA", "ignore_zero", "TEST_IGNORE_ZERO", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "poll_interval", "POLLING_PERIOD_SECONDS"], ["kwargs", "TEST_CONN_ID", "TEST_FIRST_JOB_ID", "TEST_SECOND_JOB_ID", "TEST_GCP_PROJECT_ID", "TEST_TABLE_ID", "TEST_METRIC_THRESHOLDS", "TEST_DATE_FILTER_COLUMN", "TEST_DAYS_BACK", "TEST_RATIO_FORMULA", "TEST_IGNORE_ZERO"]], "TEST_FIRST_JOB_ID": [["BigQueryIntervalCheckTrigger", "conn_id", "TEST_CONN_ID", "first_job_id", "TEST_FIRST_JOB_ID", "second_job_id", "TEST_SECOND_JOB_ID", "project_id", "TEST_GCP_PROJECT_ID", "table", "TEST_TABLE_ID", "metrics_thresholds", "TEST_METRIC_THRESHOLDS", "date_filter_column", "TEST_DATE_FILTER_COLUMN", "days_back", "TEST_DAYS_BACK", "ratio_formula", "TEST_RATIO_FORMULA", "ignore_zero", "TEST_IGNORE_ZERO", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "poll_interval", "POLLING_PERIOD_SECONDS"], ["kwargs", "TEST_CONN_ID", "TEST_FIRST_JOB_ID", "TEST_SECOND_JOB_ID", "TEST_GCP_PROJECT_ID", "TEST_TABLE_ID", "TEST_METRIC_THRESHOLDS", "TEST_DATE_FILTER_COLUMN", "TEST_DAYS_BACK", "TEST_RATIO_FORMULA", "TEST_IGNORE_ZERO"]], "TEST_GCP_CONN_ID": [["BigQueryTableExistenceTrigger", "TEST_GCP_PROJECT_ID", "TEST_DATASET_ID", "TEST_TABLE_ID", "TEST_GCP_CONN_ID", "TEST_HOOK_PARAMS", "POLLING_PERIOD_SECONDS"], ["kwargs", "TEST_DATASET_ID", "TEST_GCP_PROJECT_ID", "TEST_TABLE_ID", "TEST_GCP_CONN_ID", "POLLING_PERIOD_SECONDS", "TEST_HOOK_PARAMS"], ["trigger", "BigQueryTablePartitionExistenceTrigger", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "project_id", "TEST_GCP_PROJECT_ID", "partition_id", "TEST_PARTITION_ID", "poll_interval", "POLLING_PERIOD_SECONDS", "gcp_conn_id", "TEST_GCP_CONN_ID", "hook_params"], ["kwargs", "TEST_DATASET_ID", "TEST_GCP_PROJECT_ID", "TEST_TABLE_ID", "TEST_PARTITION_ID", "TEST_GCP_CONN_ID", "POLLING_PERIOD_SECONDS", "TEST_HOOK_PARAMS"]], "TEST_GCP_PROJECT_ID": [["BigQueryInsertJobTrigger", "conn_id", "TEST_CONN_ID", "job_id", "TEST_JOB_ID", "project_id", "TEST_GCP_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "poll_interval", "POLLING_PERIOD_SECONDS"], ["BigQueryGetDataTrigger", "conn_id", "TEST_CONN_ID", "job_id", "TEST_JOB_ID", "project_id", "TEST_GCP_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "poll_interval", "POLLING_PERIOD_SECONDS"], ["BigQueryTableExistenceTrigger", "TEST_GCP_PROJECT_ID", "TEST_DATASET_ID", "TEST_TABLE_ID", "TEST_GCP_CONN_ID", "TEST_HOOK_PARAMS", "POLLING_PERIOD_SECONDS"], ["BigQueryIntervalCheckTrigger", "conn_id", "TEST_CONN_ID", "first_job_id", "TEST_FIRST_JOB_ID", "second_job_id", "TEST_SECOND_JOB_ID", "project_id", "TEST_GCP_PROJECT_ID", "table", "TEST_TABLE_ID", "metrics_thresholds", "TEST_METRIC_THRESHOLDS", "date_filter_column", "TEST_DATE_FILTER_COLUMN", "days_back", "TEST_DAYS_BACK", "ratio_formula", "TEST_RATIO_FORMULA", "ignore_zero", "TEST_IGNORE_ZERO", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "poll_interval", "POLLING_PERIOD_SECONDS"], ["BigQueryCheckTrigger", "conn_id", "TEST_CONN_ID", "job_id", "TEST_JOB_ID", "project_id", "TEST_GCP_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "poll_interval", "POLLING_PERIOD_SECONDS"], ["BigQueryValueCheckTrigger", "conn_id", "TEST_CONN_ID", "pass_value", "TEST_PASS_VALUE", "job_id", "TEST_JOB_ID", "dataset_id", "TEST_DATASET_ID", "project_id", "TEST_GCP_PROJECT_ID", "sql", "TEST_SQL_QUERY", "table_id", "TEST_TABLE_ID", "tolerance", "TEST_TOLERANCE", "poll_interval", "POLLING_PERIOD_SECONDS"], ["kwargs", "TEST_CONN_ID", "TEST_JOB_ID", "TEST_GCP_PROJECT_ID", "TEST_DATASET_ID", "TEST_TABLE_ID", "POLLING_PERIOD_SECONDS"], ["kwargs", "False", "TEST_CONN_ID", "TEST_JOB_ID", "TEST_DATASET_ID", "TEST_GCP_PROJECT_ID", "TEST_TABLE_ID", "POLLING_PERIOD_SECONDS"], ["kwargs", "TEST_CONN_ID", "TEST_JOB_ID", "TEST_DATASET_ID", "TEST_GCP_PROJECT_ID", "TEST_TABLE_ID", "POLLING_PERIOD_SECONDS"], ["kwargs", "TEST_CONN_ID", "TEST_FIRST_JOB_ID", "TEST_SECOND_JOB_ID", "TEST_GCP_PROJECT_ID", "TEST_TABLE_ID", "TEST_METRIC_THRESHOLDS", "TEST_DATE_FILTER_COLUMN", "TEST_DAYS_BACK", "TEST_RATIO_FORMULA", "TEST_IGNORE_ZERO"], ["kwargs", "TEST_CONN_ID", "TEST_PASS_VALUE", "TEST_JOB_ID", "TEST_DATASET_ID", "TEST_GCP_PROJECT_ID", "TEST_SQL_QUERY", "TEST_TABLE_ID", "TEST_TOLERANCE", "POLLING_PERIOD_SECONDS"], ["trigger", "BigQueryValueCheckTrigger", "conn_id", "TEST_CONN_ID", "sql", "TEST_SQL_QUERY", "pass_value", "TEST_PASS_VALUE", "tolerance", "job_id", "TEST_JOB_ID", "project_id", "TEST_GCP_PROJECT_ID"], ["kwargs", "TEST_DATASET_ID", "TEST_GCP_PROJECT_ID", "TEST_TABLE_ID", "TEST_GCP_CONN_ID", "POLLING_PERIOD_SECONDS", "TEST_HOOK_PARAMS"], ["res", "table_existence_trigger", "_table_exists", "hook", "TEST_DATASET_ID", "TEST_TABLE_ID", "TEST_GCP_PROJECT_ID"], ["res", "table_existence_trigger", "_table_exists", "hook", "TEST_DATASET_ID", "TEST_TABLE_ID", "TEST_GCP_PROJECT_ID"], ["table_existence_trigger", "_table_exists", "hook", "TEST_DATASET_ID", "TEST_TABLE_ID", "TEST_GCP_PROJECT_ID"], ["trigger", "BigQueryTablePartitionExistenceTrigger", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "project_id", "TEST_GCP_PROJECT_ID", "partition_id", "TEST_PARTITION_ID", "poll_interval", "POLLING_PERIOD_SECONDS", "gcp_conn_id", "TEST_GCP_CONN_ID", "hook_params"], ["kwargs", "TEST_DATASET_ID", "TEST_GCP_PROJECT_ID", "TEST_TABLE_ID", "TEST_PARTITION_ID", "TEST_GCP_CONN_ID", "POLLING_PERIOD_SECONDS", "TEST_HOOK_PARAMS"]], "TEST_HOOK_PARAMS": [["BigQueryTableExistenceTrigger", "TEST_GCP_PROJECT_ID", "TEST_DATASET_ID", "TEST_TABLE_ID", "TEST_GCP_CONN_ID", "TEST_HOOK_PARAMS", "POLLING_PERIOD_SECONDS"], ["kwargs", "TEST_DATASET_ID", "TEST_GCP_PROJECT_ID", "TEST_TABLE_ID", "TEST_GCP_CONN_ID", "POLLING_PERIOD_SECONDS", "TEST_HOOK_PARAMS"], ["kwargs", "TEST_DATASET_ID", "TEST_GCP_PROJECT_ID", "TEST_TABLE_ID", "TEST_PARTITION_ID", "TEST_GCP_CONN_ID", "POLLING_PERIOD_SECONDS", "TEST_HOOK_PARAMS"]], "TEST_IGNORE_ZERO": [["BigQueryIntervalCheckTrigger", "conn_id", "TEST_CONN_ID", "first_job_id", "TEST_FIRST_JOB_ID", "second_job_id", "TEST_SECOND_JOB_ID", "project_id", "TEST_GCP_PROJECT_ID", "table", "TEST_TABLE_ID", "metrics_thresholds", "TEST_METRIC_THRESHOLDS", "date_filter_column", "TEST_DATE_FILTER_COLUMN", "days_back", "TEST_DAYS_BACK", "ratio_formula", "TEST_RATIO_FORMULA", "ignore_zero", "TEST_IGNORE_ZERO", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "poll_interval", "POLLING_PERIOD_SECONDS"], ["kwargs", "TEST_CONN_ID", "TEST_FIRST_JOB_ID", "TEST_SECOND_JOB_ID", "TEST_GCP_PROJECT_ID", "TEST_TABLE_ID", "TEST_METRIC_THRESHOLDS", "TEST_DATE_FILTER_COLUMN", "TEST_DAYS_BACK", "TEST_RATIO_FORMULA", "TEST_IGNORE_ZERO"]], "TEST_JOB_ID": [["BigQueryInsertJobTrigger", "conn_id", "TEST_CONN_ID", "job_id", "TEST_JOB_ID", "project_id", "TEST_GCP_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "poll_interval", "POLLING_PERIOD_SECONDS"], ["BigQueryGetDataTrigger", "conn_id", "TEST_CONN_ID", "job_id", "TEST_JOB_ID", "project_id", "TEST_GCP_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "poll_interval", "POLLING_PERIOD_SECONDS"], ["BigQueryCheckTrigger", "conn_id", "TEST_CONN_ID", "job_id", "TEST_JOB_ID", "project_id", "TEST_GCP_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "poll_interval", "POLLING_PERIOD_SECONDS"], ["BigQueryValueCheckTrigger", "conn_id", "TEST_CONN_ID", "pass_value", "TEST_PASS_VALUE", "job_id", "TEST_JOB_ID", "dataset_id", "TEST_DATASET_ID", "project_id", "TEST_GCP_PROJECT_ID", "sql", "TEST_SQL_QUERY", "table_id", "TEST_TABLE_ID", "tolerance", "TEST_TOLERANCE", "poll_interval", "POLLING_PERIOD_SECONDS"], ["kwargs", "TEST_CONN_ID", "TEST_JOB_ID", "TEST_GCP_PROJECT_ID", "TEST_DATASET_ID", "TEST_TABLE_ID", "POLLING_PERIOD_SECONDS"], ["TriggerEvent", "TEST_JOB_ID", "actual"], ["kwargs", "False", "TEST_CONN_ID", "TEST_JOB_ID", "TEST_DATASET_ID", "TEST_GCP_PROJECT_ID", "TEST_TABLE_ID", "POLLING_PERIOD_SECONDS"], ["kwargs", "TEST_CONN_ID", "TEST_JOB_ID", "TEST_DATASET_ID", "TEST_GCP_PROJECT_ID", "TEST_TABLE_ID", "POLLING_PERIOD_SECONDS"], ["kwargs", "TEST_CONN_ID", "TEST_PASS_VALUE", "TEST_JOB_ID", "TEST_DATASET_ID", "TEST_GCP_PROJECT_ID", "TEST_SQL_QUERY", "TEST_TABLE_ID", "TEST_TOLERANCE", "POLLING_PERIOD_SECONDS"], ["trigger", "BigQueryValueCheckTrigger", "conn_id", "TEST_CONN_ID", "sql", "TEST_SQL_QUERY", "pass_value", "TEST_PASS_VALUE", "tolerance", "job_id", "TEST_JOB_ID", "project_id", "TEST_GCP_PROJECT_ID"]], "TEST_METRIC_THRESHOLDS": [["BigQueryIntervalCheckTrigger", "conn_id", "TEST_CONN_ID", "first_job_id", "TEST_FIRST_JOB_ID", "second_job_id", "TEST_SECOND_JOB_ID", "project_id", "TEST_GCP_PROJECT_ID", "table", "TEST_TABLE_ID", "metrics_thresholds", "TEST_METRIC_THRESHOLDS", "date_filter_column", "TEST_DATE_FILTER_COLUMN", "days_back", "TEST_DAYS_BACK", "ratio_formula", "TEST_RATIO_FORMULA", "ignore_zero", "TEST_IGNORE_ZERO", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "poll_interval", "POLLING_PERIOD_SECONDS"], ["kwargs", "TEST_CONN_ID", "TEST_FIRST_JOB_ID", "TEST_SECOND_JOB_ID", "TEST_GCP_PROJECT_ID", "TEST_TABLE_ID", "TEST_METRIC_THRESHOLDS", "TEST_DATE_FILTER_COLUMN", "TEST_DAYS_BACK", "TEST_RATIO_FORMULA", "TEST_IGNORE_ZERO"]], "TEST_PARTITION_ID": [["trigger", "BigQueryTablePartitionExistenceTrigger", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "project_id", "TEST_GCP_PROJECT_ID", "partition_id", "TEST_PARTITION_ID", "poll_interval", "POLLING_PERIOD_SECONDS", "gcp_conn_id", "TEST_GCP_CONN_ID", "hook_params"], ["kwargs", "TEST_DATASET_ID", "TEST_GCP_PROJECT_ID", "TEST_TABLE_ID", "TEST_PARTITION_ID", "TEST_GCP_CONN_ID", "POLLING_PERIOD_SECONDS", "TEST_HOOK_PARAMS"]], "TEST_PASS_VALUE": [["BigQueryValueCheckTrigger", "conn_id", "TEST_CONN_ID", "pass_value", "TEST_PASS_VALUE", "job_id", "TEST_JOB_ID", "dataset_id", "TEST_DATASET_ID", "project_id", "TEST_GCP_PROJECT_ID", "sql", "TEST_SQL_QUERY", "table_id", "TEST_TABLE_ID", "tolerance", "TEST_TOLERANCE", "poll_interval", "POLLING_PERIOD_SECONDS"], ["kwargs", "TEST_CONN_ID", "TEST_PASS_VALUE", "TEST_JOB_ID", "TEST_DATASET_ID", "TEST_GCP_PROJECT_ID", "TEST_SQL_QUERY", "TEST_TABLE_ID", "TEST_TOLERANCE", "POLLING_PERIOD_SECONDS"], ["trigger", "BigQueryValueCheckTrigger", "conn_id", "TEST_CONN_ID", "sql", "TEST_SQL_QUERY", "pass_value", "TEST_PASS_VALUE", "tolerance", "job_id", "TEST_JOB_ID", "project_id", "TEST_GCP_PROJECT_ID"]], "TEST_RATIO_FORMULA": [["BigQueryIntervalCheckTrigger", "conn_id", "TEST_CONN_ID", "first_job_id", "TEST_FIRST_JOB_ID", "second_job_id", "TEST_SECOND_JOB_ID", "project_id", "TEST_GCP_PROJECT_ID", "table", "TEST_TABLE_ID", "metrics_thresholds", "TEST_METRIC_THRESHOLDS", "date_filter_column", "TEST_DATE_FILTER_COLUMN", "days_back", "TEST_DAYS_BACK", "ratio_formula", "TEST_RATIO_FORMULA", "ignore_zero", "TEST_IGNORE_ZERO", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "poll_interval", "POLLING_PERIOD_SECONDS"], ["kwargs", "TEST_CONN_ID", "TEST_FIRST_JOB_ID", "TEST_SECOND_JOB_ID", "TEST_GCP_PROJECT_ID", "TEST_TABLE_ID", "TEST_METRIC_THRESHOLDS", "TEST_DATE_FILTER_COLUMN", "TEST_DAYS_BACK", "TEST_RATIO_FORMULA", "TEST_IGNORE_ZERO"]], "TEST_SECOND_JOB_ID": [["BigQueryIntervalCheckTrigger", "conn_id", "TEST_CONN_ID", "first_job_id", "TEST_FIRST_JOB_ID", "second_job_id", "TEST_SECOND_JOB_ID", "project_id", "TEST_GCP_PROJECT_ID", "table", "TEST_TABLE_ID", "metrics_thresholds", "TEST_METRIC_THRESHOLDS", "date_filter_column", "TEST_DATE_FILTER_COLUMN", "days_back", "TEST_DAYS_BACK", "ratio_formula", "TEST_RATIO_FORMULA", "ignore_zero", "TEST_IGNORE_ZERO", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "poll_interval", "POLLING_PERIOD_SECONDS"], ["kwargs", "TEST_CONN_ID", "TEST_FIRST_JOB_ID", "TEST_SECOND_JOB_ID", "TEST_GCP_PROJECT_ID", "TEST_TABLE_ID", "TEST_METRIC_THRESHOLDS", "TEST_DATE_FILTER_COLUMN", "TEST_DAYS_BACK", "TEST_RATIO_FORMULA", "TEST_IGNORE_ZERO"]], "TEST_SQL_QUERY": [["BigQueryValueCheckTrigger", "conn_id", "TEST_CONN_ID", "pass_value", "TEST_PASS_VALUE", "job_id", "TEST_JOB_ID", "dataset_id", "TEST_DATASET_ID", "project_id", "TEST_GCP_PROJECT_ID", "sql", "TEST_SQL_QUERY", "table_id", "TEST_TABLE_ID", "tolerance", "TEST_TOLERANCE", "poll_interval", "POLLING_PERIOD_SECONDS"], ["kwargs", "TEST_CONN_ID", "TEST_PASS_VALUE", "TEST_JOB_ID", "TEST_DATASET_ID", "TEST_GCP_PROJECT_ID", "TEST_SQL_QUERY", "TEST_TABLE_ID", "TEST_TOLERANCE", "POLLING_PERIOD_SECONDS"], ["trigger", "BigQueryValueCheckTrigger", "conn_id", "TEST_CONN_ID", "sql", "TEST_SQL_QUERY", "pass_value", "TEST_PASS_VALUE", "tolerance", "job_id", "TEST_JOB_ID", "project_id", "TEST_GCP_PROJECT_ID"]], "TEST_TABLE_ID": [["BigQueryInsertJobTrigger", "conn_id", "TEST_CONN_ID", "job_id", "TEST_JOB_ID", "project_id", "TEST_GCP_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "poll_interval", "POLLING_PERIOD_SECONDS"], ["BigQueryGetDataTrigger", "conn_id", "TEST_CONN_ID", "job_id", "TEST_JOB_ID", "project_id", "TEST_GCP_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "poll_interval", "POLLING_PERIOD_SECONDS"], ["BigQueryTableExistenceTrigger", "TEST_GCP_PROJECT_ID", "TEST_DATASET_ID", "TEST_TABLE_ID", "TEST_GCP_CONN_ID", "TEST_HOOK_PARAMS", "POLLING_PERIOD_SECONDS"], ["BigQueryIntervalCheckTrigger", "conn_id", "TEST_CONN_ID", "first_job_id", "TEST_FIRST_JOB_ID", "second_job_id", "TEST_SECOND_JOB_ID", "project_id", "TEST_GCP_PROJECT_ID", "table", "TEST_TABLE_ID", "metrics_thresholds", "TEST_METRIC_THRESHOLDS", "date_filter_column", "TEST_DATE_FILTER_COLUMN", "days_back", "TEST_DAYS_BACK", "ratio_formula", "TEST_RATIO_FORMULA", "ignore_zero", "TEST_IGNORE_ZERO", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "poll_interval", "POLLING_PERIOD_SECONDS"], ["BigQueryCheckTrigger", "conn_id", "TEST_CONN_ID", "job_id", "TEST_JOB_ID", "project_id", "TEST_GCP_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "poll_interval", "POLLING_PERIOD_SECONDS"], ["BigQueryValueCheckTrigger", "conn_id", "TEST_CONN_ID", "pass_value", "TEST_PASS_VALUE", "job_id", "TEST_JOB_ID", "dataset_id", "TEST_DATASET_ID", "project_id", "TEST_GCP_PROJECT_ID", "sql", "TEST_SQL_QUERY", "table_id", "TEST_TABLE_ID", "tolerance", "TEST_TOLERANCE", "poll_interval", "POLLING_PERIOD_SECONDS"], ["kwargs", "TEST_CONN_ID", "TEST_JOB_ID", "TEST_GCP_PROJECT_ID", "TEST_DATASET_ID", "TEST_TABLE_ID", "POLLING_PERIOD_SECONDS"], ["kwargs", "False", "TEST_CONN_ID", "TEST_JOB_ID", "TEST_DATASET_ID", "TEST_GCP_PROJECT_ID", "TEST_TABLE_ID", "POLLING_PERIOD_SECONDS"], ["kwargs", "TEST_CONN_ID", "TEST_JOB_ID", "TEST_DATASET_ID", "TEST_GCP_PROJECT_ID", "TEST_TABLE_ID", "POLLING_PERIOD_SECONDS"], ["kwargs", "TEST_CONN_ID", "TEST_FIRST_JOB_ID", "TEST_SECOND_JOB_ID", "TEST_GCP_PROJECT_ID", "TEST_TABLE_ID", "TEST_METRIC_THRESHOLDS", "TEST_DATE_FILTER_COLUMN", "TEST_DAYS_BACK", "TEST_RATIO_FORMULA", "TEST_IGNORE_ZERO"], ["kwargs", "TEST_CONN_ID", "TEST_PASS_VALUE", "TEST_JOB_ID", "TEST_DATASET_ID", "TEST_GCP_PROJECT_ID", "TEST_SQL_QUERY", "TEST_TABLE_ID", "TEST_TOLERANCE", "POLLING_PERIOD_SECONDS"], ["kwargs", "TEST_DATASET_ID", "TEST_GCP_PROJECT_ID", "TEST_TABLE_ID", "TEST_GCP_CONN_ID", "POLLING_PERIOD_SECONDS", "TEST_HOOK_PARAMS"], ["res", "table_existence_trigger", "_table_exists", "hook", "TEST_DATASET_ID", "TEST_TABLE_ID", "TEST_GCP_PROJECT_ID"], ["res", "table_existence_trigger", "_table_exists", "hook", "TEST_DATASET_ID", "TEST_TABLE_ID", "TEST_GCP_PROJECT_ID"], ["table_existence_trigger", "_table_exists", "hook", "TEST_DATASET_ID", "TEST_TABLE_ID", "TEST_GCP_PROJECT_ID"], ["trigger", "BigQueryTablePartitionExistenceTrigger", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "project_id", "TEST_GCP_PROJECT_ID", "partition_id", "TEST_PARTITION_ID", "poll_interval", "POLLING_PERIOD_SECONDS", "gcp_conn_id", "TEST_GCP_CONN_ID", "hook_params"], ["kwargs", "TEST_DATASET_ID", "TEST_GCP_PROJECT_ID", "TEST_TABLE_ID", "TEST_PARTITION_ID", "TEST_GCP_CONN_ID", "POLLING_PERIOD_SECONDS", "TEST_HOOK_PARAMS"]], "TEST_TOLERANCE": [["BigQueryValueCheckTrigger", "conn_id", "TEST_CONN_ID", "pass_value", "TEST_PASS_VALUE", "job_id", "TEST_JOB_ID", "dataset_id", "TEST_DATASET_ID", "project_id", "TEST_GCP_PROJECT_ID", "sql", "TEST_SQL_QUERY", "table_id", "TEST_TABLE_ID", "tolerance", "TEST_TOLERANCE", "poll_interval", "POLLING_PERIOD_SECONDS"], ["kwargs", "TEST_CONN_ID", "TEST_PASS_VALUE", "TEST_JOB_ID", "TEST_DATASET_ID", "TEST_GCP_PROJECT_ID", "TEST_SQL_QUERY", "TEST_TABLE_ID", "TEST_TOLERANCE", "POLLING_PERIOD_SECONDS"]]}, "no_types_annot": {"D": 2, "I": 0, "U": 228}, "session_id": "u9fjCF7mi8GgO7M2tysXL5WPkXlDcsNvTE4hyvEhUY4", "set": null, "tc": [false, null], "type_annot_cove": 0.01, "typed_seq": "", "untyped_seq": "", "variables": {"POLLING_PERIOD_SECONDS": "", "TEST_CONN_ID": "", "TEST_DATASET_ID": "", "TEST_DATE_FILTER_COLUMN": "", "TEST_DAYS_BACK": "", "TEST_FIRST_JOB_ID": "", "TEST_GCP_CONN_ID": "", "TEST_GCP_PROJECT_ID": "", "TEST_HOOK_PARAMS": "builtins.dict[builtins.str, typing.Any]", "TEST_IGNORE_ZERO": "", "TEST_JOB_ID": "", "TEST_METRIC_THRESHOLDS": "builtins.dict[builtins.str, builtins.int]", "TEST_PARTITION_ID": "", "TEST_PASS_VALUE": "", "TEST_RATIO_FORMULA": "", "TEST_SECOND_JOB_ID": "", "TEST_SQL_QUERY": "", "TEST_TABLE_ID": "", "TEST_TOLERANCE": ""}, "variables_p": {"POLLING_PERIOD_SECONDS": [["str", 0.24594720551769078], ["Dict[str, Any]", 0.10659331448859306], ["Type[List[Any]]", 0.09389899241985528], ["List[Union[Any, Any, Any, Any]]", 0.09215824176414207], ["Dict[Any, str]", 0.09150425305786346], ["int", 0.08933096452775732]], "TEST_CONN_ID": [["str", 0.8166287594932312], ["Dict[str, Any]", 0.09455206916035705]], "TEST_DATASET_ID": [["str", 0.8166287594932312], ["Dict[str, Any]", 0.09455206916035705]], "TEST_DATE_FILTER_COLUMN": [["deque", 0.09779205643254078], ["list", 0.09758108653784349]], "TEST_DAYS_BACK": [["int", 0.4052782921820333], ["Type[bytes]", 0.09884686885111241], ["Pattern[str]", 0.09150286379251067]], "TEST_FIRST_JOB_ID": [["str", 0.30650365415891884], ["int", 0.1917514087016618], ["Dict[Any, str]", 0.09969978591457851], ["Pattern[str]", 0.09683195426328342]], "TEST_GCP_CONN_ID": [["str", 0.6497630942595808], ["Dict[str, str]", 0.1724459910553014], ["Pattern[str]", 0.09028957768808525], ["List[str]", 0.08750133699703266]], "TEST_GCP_PROJECT_ID": [["str", 0.8257342187383114], ["cmk.base.api.agent_based.checking_classes.state", 0.0887954196800142], ["bool", 0.08547036158167429]], "TEST_HOOK_PARAMS": [["Dict[bool, Any]", 0.28617723693539804], ["str", 0.21675284871723158], ["Dict[str, Union[Any, Any]]", 0.19542861508642478], ["Dict[str, Dict[str, Any]]", 0.11343914243849373], ["Dict[str, Type[Any]]", 0.09521667106038843], ["Dict[str, bool]", 0.09298548576206336]], "TEST_IGNORE_ZERO": [["Dict[Any, List[float]]", 0.3183478431578722], ["Dict[Any, List[Any]]", 0.3008253513574364], ["Dict[bool, Any]", 0.27459752445803964], ["Dict[str, Literal]", 0.10622928102665176]], "TEST_JOB_ID": [["str", 0.8166287594932312], ["Dict[str, Any]", 0.09455206916035705]], "TEST_METRIC_THRESHOLDS": [["Dict[Any, List[float]]", 0.3183478431578722], ["Dict[Any, List[Any]]", 0.3008253513574364], ["Dict[bool, Any]", 0.27459752445803964], ["Dict[str, Literal]", 0.10622928102665176]], "TEST_PARTITION_ID": [["str", 0.6273101849615729], ["Tuple[str, str]", 0.167391660848623], ["dict", 0.12221001448348227], ["Tuple[str, str, str]", 0.08308813970632178]], "TEST_PASS_VALUE": [["Tuple[str, str]", 0.19113632557157573], ["List[Tuple[str, str, str, str]]", 0.1570308385247644], ["str", 0.09595783671387344], ["List[Dict[str, Any]]", 0.09233118570815194], ["Dict[str, str]", 0.09072316778888058], ["List[float]", 0.09002977138447273]], "TEST_RATIO_FORMULA": [["Dict[Any, List[float]]", 0.3183478431578722], ["Dict[Any, List[Any]]", 0.3008253513574364], ["Dict[bool, Any]", 0.27459752445803964], ["Dict[str, Literal]", 0.10622928102665176]], "TEST_SECOND_JOB_ID": [["str", 0.30650365415891884], ["int", 0.1917514087016618], ["Dict[Any, str]", 0.09969978591457851], ["Pattern[str]", 0.09683195426328342]], "TEST_SQL_QUERY": [["List[Tuple[str, str, str, str]]", 0.13550275523971678], ["str", 0.11269802476460146], ["Dict[str, List[str]]", 0.10204218793483648], ["Dict[str, Union[Any, Any, Any, str]]", 0.10132120014845312], ["list", 0.09359102882600759], ["int", 0.09221902432250882], ["Optional[str]", 0.09173483124475378], ["dict", 0.09059883844321094]], "TEST_TABLE_ID": [["str", 0.579958723398492], ["int", 0.19592141725809786], ["Dict[str, int]", 0.12054391343552104]], "TEST_TOLERANCE": [["str", 0.28476678251025545], ["List[Tuple[str, str, str, str]]", 0.11474313058586462], ["Dict[str, Union[Any, Any, Any]]", 0.11386057324789847], ["Dict[str, Union[Any, int]]", 0.10855594821782465], ["Dict[Any, Union[Any, Any, Any, Any]]", 0.09436589503704197], ["Dict[Any, Union[Any, Any]]", 0.08883909130518437]]}}}