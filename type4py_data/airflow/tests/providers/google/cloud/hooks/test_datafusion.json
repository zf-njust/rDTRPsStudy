{"error": null, "response": {"classes": [{"cls_lc": [[77, 0], [432, 9]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[78, 4], [80, 80]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_delegate_to_runtime_error", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDataFusionHook.test_delegate_to_runtime_error", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[83, 4], [84, 109]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "mock_endpoint", "params": {"get_conn_mock": ""}, "params_descr": {"get_conn_mock": ""}, "params_occur": {"get_conn_mock": [["get_conn_mock", "return_value", "projects", "return_value", "locations", "return_value", "instances", "return_value"]]}, "params_p": {"args": [], "get_conn_mock": [["Dict[str, Any]", 0.2591162904823001], ["raiden.utils.TokenAmount", 0.10573121694800831], ["set", 0.08712220591149572], ["str", 0.08694872281723061], ["dict", 0.08694872281723061], ["bool", 0.08413130966711739]], "kwargs": [], "self": []}, "q_name": "TestDataFusionHook.mock_endpoint", "ret_exprs": ["return get_conn_mock.return_value.projects.return_value.locations.return_value.instances.return_value"], "ret_type": "", "ret_type_p": [["str", 0.20147303837020897], ["raiden.utils.Address", 0.1125765396078074], ["Optional[IO[str]]", 0.09918528672829038], ["Dict[str, Any]", 0.09857204775680087], ["dict", 0.09478417873412467], ["NamedTuple", 0.09015965811729554]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[86, 4], [88, 74]], "fn_var_ln": {"expected": [[87, 8], [87, 16]]}, "fn_var_occur": {"expected": [["expected", "PROJECT_ID", "LOCATION", "INSTANCE_NAME"], ["hook", "_name", "PROJECT_ID", "LOCATION", "INSTANCE_NAME", "expected"]]}, "name": "test_name", "params": {"hook": "", "self": ""}, "params_descr": {"hook": "", "self": ""}, "params_occur": {"hook": [["hook", "_name", "PROJECT_ID", "LOCATION", "INSTANCE_NAME", "expected"]], "self": []}, "params_p": {"args": [], "hook": [["antidote.providers.tag.TagProvider", 0.08264403895254223], ["str", 0.0825056189925848], ["google.oauth2.credentials.Credentials", 0.0790124136238524]], "kwargs": [], "self": []}, "q_name": "TestDataFusionHook.test_name", "ret_exprs": [], "ret_type": "", "variables": {"expected": ""}, "variables_p": {"expected": [["str", 0.17897182349615237], ["Dict[str, str]", 0.14682252346444766], ["dict", 0.09962592469284613], ["Dict[str, Tuple[str, str]]", 0.0938777131131393], ["list", 0.08918167362897193], ["ChainMap", 0.08056916726140582]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[90, 4], [92, 61]], "fn_var_ln": {"expected": [[91, 8], [91, 16]]}, "fn_var_occur": {"expected": [["expected", "PROJECT_ID", "LOCATION"], ["hook", "_parent", "PROJECT_ID", "LOCATION", "expected"]]}, "name": "test_parent", "params": {"hook": "", "self": ""}, "params_descr": {"hook": "", "self": ""}, "params_occur": {"hook": [["hook", "_parent", "PROJECT_ID", "LOCATION", "expected"]], "self": []}, "params_p": {"args": [], "hook": [["List[str]", 0.10739601024954136], ["bool", 0.09330946076352879]], "kwargs": [], "self": []}, "q_name": "TestDataFusionHook.test_parent", "ret_exprs": [], "ret_type": "", "variables": {"expected": ""}, "variables_p": {"expected": [["str", 0.24299674999624143], ["bool", 0.24299674999624143], ["int", 0.10357591757082518], ["List[str]", 0.09314680599775231], ["Optional[str]", 0.08966117430358622], ["dict", 0.0778992413077174], ["Dict[str, str]", 0.07358084163043652]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[96, 4], [99, 110]], "fn_var_ln": {"return_value": [[97, 8], [97, 35]]}, "fn_var_occur": {"return_value": [["mock_authorize", "return_value"]]}, "name": "test_get_conn", "params": {"hook": "", "mock_authorize": "", "mock_build": "", "self": ""}, "params_descr": {"hook": "", "mock_authorize": "", "mock_build": "", "self": ""}, "params_occur": {"hook": [["hook", "get_conn"], ["mock_build", "assert_called_once_with", "hook", "api_version", "http", "cache_discovery", "False"]], "mock_authorize": [["mock_authorize", "return_value"]], "mock_build": [["mock_build", "assert_called_once_with", "hook", "api_version", "http", "cache_discovery", "False"]], "self": []}, "params_p": {"args": [], "hook": [], "kwargs": [], "mock_authorize": [], "mock_build": [], "self": []}, "q_name": "TestDataFusionHook.test_get_conn", "ret_exprs": [], "ret_type": "", "variables": {"return_value": ""}, "variables_p": {"return_value": [["Set[str]", 0.31968019372842504], ["str", 0.28974495331495453], ["list", 0.1978080233656786], ["int", 0.09819123429613609], ["List[str]", 0.09457559529480569]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[102, 4], [108, 97]], "fn_var_ln": {"method_mock": [[103, 8], [103, 19]], "result": [[105, 8], [105, 14]]}, "fn_var_occur": {"method_mock": [["method_mock", "self", "mock_endpoint", "get_conn_mock", "restart"], ["method_mock", "return_value", "execute", "return_value"], ["method_mock", "assert_called_once_with", "name", "hook", "_name", "PROJECT_ID", "LOCATION", "INSTANCE_NAME"]], "result": [["result", "hook", "restart_instance", "instance_name", "INSTANCE_NAME", "location", "LOCATION", "project_id", "PROJECT_ID"]]}, "name": "test_restart_instance", "params": {"get_conn_mock": "", "hook": "", "self": ""}, "params_descr": {"get_conn_mock": "", "hook": "", "self": ""}, "params_occur": {"get_conn_mock": [["method_mock", "self", "mock_endpoint", "get_conn_mock", "restart"]], "hook": [["result", "hook", "restart_instance", "instance_name", "INSTANCE_NAME", "location", "LOCATION", "project_id", "PROJECT_ID"], ["method_mock", "assert_called_once_with", "name", "hook", "_name", "PROJECT_ID", "LOCATION", "INSTANCE_NAME"]], "self": [["method_mock", "self", "mock_endpoint", "get_conn_mock", "restart"]]}, "params_p": {"args": [], "get_conn_mock": [["tests.test_util.aiohttp.AiohttpClientMocker", 0.499585562590177]], "hook": [["str", 0.11010865447909438]], "kwargs": [], "self": []}, "q_name": "TestDataFusionHook.test_restart_instance", "ret_exprs": [], "ret_type": "", "variables": {"method_mock": "", "result": ""}, "variables_p": {"method_mock": [["tests.conftesConfluentAvroConsumerMock", 0.09820539051556496]], "result": [["str", 0.18506056656993108], ["Dict[str, str]", 0.10662090740400569], ["list", 0.0893845162555115], ["Optional[str]", 0.08881996731635955]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[111, 4], [117, 97]], "fn_var_ln": {"method_mock": [[112, 8], [112, 19]], "result": [[114, 8], [114, 14]]}, "fn_var_occur": {"method_mock": [["method_mock", "self", "mock_endpoint", "get_conn_mock", "delete"], ["method_mock", "return_value", "execute", "return_value"], ["method_mock", "assert_called_once_with", "name", "hook", "_name", "PROJECT_ID", "LOCATION", "INSTANCE_NAME"]], "result": [["result", "hook", "delete_instance", "instance_name", "INSTANCE_NAME", "location", "LOCATION", "project_id", "PROJECT_ID"]]}, "name": "test_delete_instance", "params": {"get_conn_mock": "", "hook": "", "self": ""}, "params_descr": {"get_conn_mock": "", "hook": "", "self": ""}, "params_occur": {"get_conn_mock": [["method_mock", "self", "mock_endpoint", "get_conn_mock", "delete"]], "hook": [["result", "hook", "delete_instance", "instance_name", "INSTANCE_NAME", "location", "LOCATION", "project_id", "PROJECT_ID"], ["method_mock", "assert_called_once_with", "name", "hook", "_name", "PROJECT_ID", "LOCATION", "INSTANCE_NAME"]], "self": [["method_mock", "self", "mock_endpoint", "get_conn_mock", "delete"]]}, "params_p": {"args": [], "get_conn_mock": [["tests.test_util.aiohttp.AiohttpClientMocker", 0.4155524415896093]], "hook": [["str", 0.18241347590083978], ["Callable", 0.07326256502435712], ["aiohttp.web.Application", 0.07326256502435712]], "kwargs": [], "self": []}, "q_name": "TestDataFusionHook.test_delete_instance", "ret_exprs": [], "ret_type": "", "variables": {"method_mock": "", "result": ""}, "variables_p": {"method_mock": [["tests.conftesConfluentAvroConsumerMock", 0.09820539051556496]], "result": [["str", 0.18506056656993108], ["Dict[str, str]", 0.10662090740400569], ["list", 0.0893845162555115], ["Optional[str]", 0.08881996731635955]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[120, 4], [135, 9]], "fn_var_ln": {"method_mock": [[121, 8], [121, 19]], "result": [[123, 8], [123, 14]]}, "fn_var_occur": {"method_mock": [["method_mock", "self", "mock_endpoint", "get_conn_mock", "create"], ["method_mock", "return_value", "execute", "return_value"], ["method_mock", "assert_called_once_with", "parent", "hook", "_parent", "PROJECT_ID", "LOCATION", "body", "INSTANCE", "instanceId", "INSTANCE_NAME"]], "result": [["result", "hook", "create_instance", "instance_name", "INSTANCE_NAME", "instance", "INSTANCE", "location", "LOCATION", "project_id", "PROJECT_ID"]]}, "name": "test_create_instance", "params": {"get_conn_mock": "", "hook": "", "self": ""}, "params_descr": {"get_conn_mock": "", "hook": "", "self": ""}, "params_occur": {"get_conn_mock": [["method_mock", "self", "mock_endpoint", "get_conn_mock", "create"]], "hook": [["result", "hook", "create_instance", "instance_name", "INSTANCE_NAME", "instance", "INSTANCE", "location", "LOCATION", "project_id", "PROJECT_ID"], ["method_mock", "assert_called_once_with", "parent", "hook", "_parent", "PROJECT_ID", "LOCATION", "body", "INSTANCE", "instanceId", "INSTANCE_NAME"]], "self": [["method_mock", "self", "mock_endpoint", "get_conn_mock", "create"]]}, "params_p": {"args": [], "get_conn_mock": [["tests.test_util.aiohttp.AiohttpClientMocker", 0.4997924348224553]], "hook": [["str", 0.3078553126470238], ["aiohttp.ClientSession", 0.09854155758079947], ["dict", 0.09611420062144015]], "kwargs": [], "self": []}, "q_name": "TestDataFusionHook.test_create_instance", "ret_exprs": [], "ret_type": "", "variables": {"method_mock": "", "result": ""}, "variables_p": {"method_mock": [["tests.conftesConfluentAvroConsumerMock", 0.09546438525842137], ["tests.utils.MockProvider", 0.0886513208384037]], "result": [["str", 0.42839867569770335], ["Dict[str, set]", 0.09813175344314766]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[138, 4], [154, 9]], "fn_var_ln": {"method_mock": [[139, 8], [139, 19]], "result": [[141, 8], [141, 14]]}, "fn_var_occur": {"method_mock": [["method_mock", "self", "mock_endpoint", "get_conn_mock", "patch"], ["method_mock", "return_value", "execute", "return_value"], ["method_mock", "assert_called_once_with", "name", "hook", "_name", "PROJECT_ID", "LOCATION", "INSTANCE_NAME", "body", "INSTANCE", "updateMask"]], "result": [["result", "hook", "patch_instance", "instance_name", "INSTANCE_NAME", "instance", "INSTANCE", "update_mask", "location", "LOCATION", "project_id", "PROJECT_ID"]]}, "name": "test_patch_instance", "params": {"get_conn_mock": "", "hook": "", "self": ""}, "params_descr": {"get_conn_mock": "", "hook": "", "self": ""}, "params_occur": {"get_conn_mock": [["method_mock", "self", "mock_endpoint", "get_conn_mock", "patch"]], "hook": [["result", "hook", "patch_instance", "instance_name", "INSTANCE_NAME", "instance", "INSTANCE", "update_mask", "location", "LOCATION", "project_id", "PROJECT_ID"], ["method_mock", "assert_called_once_with", "name", "hook", "_name", "PROJECT_ID", "LOCATION", "INSTANCE_NAME", "body", "INSTANCE", "updateMask"]], "self": [["method_mock", "self", "mock_endpoint", "get_conn_mock", "patch"]]}, "params_p": {"args": [], "get_conn_mock": [["tests.test_util.aiohttp.AiohttpClientMocker", 0.499585562590177]], "hook": [["purplship.core.utils.xml.Element", 0.19504292574895774], ["str", 0.09544825647087625]], "kwargs": [], "self": []}, "q_name": "TestDataFusionHook.test_patch_instance", "ret_exprs": [], "ret_type": "", "variables": {"method_mock": "", "result": ""}, "variables_p": {"method_mock": [["tests.conftesConfluentAvroConsumerMock", 0.09820539051556496]], "result": [["str", 0.3300871952982127], ["list", 0.08729437565412744]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[157, 4], [163, 97]], "fn_var_ln": {"method_mock": [[158, 8], [158, 19]], "result": [[160, 8], [160, 14]]}, "fn_var_occur": {"method_mock": [["method_mock", "self", "mock_endpoint", "get_conn_mock", "get"], ["method_mock", "return_value", "execute", "return_value"], ["method_mock", "assert_called_once_with", "name", "hook", "_name", "PROJECT_ID", "LOCATION", "INSTANCE_NAME"]], "result": [["result", "hook", "get_instance", "instance_name", "INSTANCE_NAME", "location", "LOCATION", "project_id", "PROJECT_ID"]]}, "name": "test_get_instance", "params": {"get_conn_mock": "", "hook": "", "self": ""}, "params_descr": {"get_conn_mock": "", "hook": "", "self": ""}, "params_occur": {"get_conn_mock": [["method_mock", "self", "mock_endpoint", "get_conn_mock", "get"]], "hook": [["result", "hook", "get_instance", "instance_name", "INSTANCE_NAME", "location", "LOCATION", "project_id", "PROJECT_ID"], ["method_mock", "assert_called_once_with", "name", "hook", "_name", "PROJECT_ID", "LOCATION", "INSTANCE_NAME"]], "self": [["method_mock", "self", "mock_endpoint", "get_conn_mock", "get"]]}, "params_p": {"args": [], "get_conn_mock": [["tests.test_util.aiohttp.AiohttpClientMocker", 0.19182214372498854]], "hook": [["str", 0.2562489645753019], ["aiohttp.web.Application", 0.10874693637195132], ["raiden.utils.List[raiden.raiden_service.RaidenService]", 0.0887698423742904]], "kwargs": [], "self": []}, "q_name": "TestDataFusionHook.test_get_instance", "ret_exprs": [], "ret_type": "", "variables": {"method_mock": "", "result": ""}, "variables_p": {"method_mock": [["tests.conftesConfluentAvroConsumerMock", 0.09868211389185191]], "result": [["Optional[str]", 0.22804119753818428], ["str", 0.17573076426766215], ["Dict[str, str]", 0.10987947954488846], ["Dict[str, Tuple[str, str]]", 0.10468733794663775], ["List[Union[Any, Any, Any]]", 0.10316388240965302], ["Iterator[str]", 0.09482517316491976], ["List[Union[Any, Any, Any, Any]]", 0.09165738110480064]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[167, 4], [182, 45]], "fn_var_ln": {"body": [[173, 8], [173, 12]], "headers": [[169, 8], [169, 15]], "method": [[170, 8], [170, 14]], "request": [[171, 8], [171, 15]], "result": [[175, 8], [175, 14]], "return_value": [[172, 8], [172, 28]], "url": [[168, 8], [168, 11]]}, "fn_var_occur": {"body": [["result", "hook", "_cdap_request", "url", "url", "method", "method", "body", "body"], ["request", "assert_called_once_with", "method", "method", "url", "url", "headers", "headers", "body", "json", "dumps", "body"]], "headers": [["get_credentials_mock", "return_value", "before_request", "assert_called_once_with", "request", "request", "method", "method", "url", "url", "headers", "headers"], ["request", "assert_called_once_with", "method", "method", "url", "url", "headers", "headers", "body", "json", "dumps", "body"]], "method": [["result", "hook", "_cdap_request", "url", "url", "method", "method", "body", "body"], ["get_credentials_mock", "return_value", "before_request", "assert_called_once_with", "request", "request", "method", "method", "url", "url", "headers", "headers"], ["request", "assert_called_once_with", "method", "method", "url", "url", "headers", "headers", "body", "json", "dumps", "body"]], "request": [["request", "mock_request", "return_value"], ["request", "return_value", "mock", "MagicMock"], ["get_credentials_mock", "return_value", "before_request", "assert_called_once_with", "request", "request", "method", "method", "url", "url", "headers", "headers"], ["request", "assert_called_once_with", "method", "method", "url", "url", "headers", "headers", "body", "json", "dumps", "body"], ["result", "request", "return_value"]], "result": [["result", "hook", "_cdap_request", "url", "url", "method", "method", "body", "body"], ["result", "request", "return_value"]], "return_value": [["request", "mock_request", "return_value"], ["request", "return_value", "mock", "MagicMock"], ["get_credentials_mock", "return_value", "before_request", "assert_called_once_with", "request", "request", "method", "method", "url", "url", "headers", "headers"], ["result", "request", "return_value"]], "url": [["result", "hook", "_cdap_request", "url", "url", "method", "method", "body", "body"], ["get_credentials_mock", "return_value", "before_request", "assert_called_once_with", "request", "request", "method", "method", "url", "url", "headers", "headers"], ["request", "assert_called_once_with", "method", "method", "url", "url", "headers", "headers", "body", "json", "dumps", "body"]]}, "name": "test_cdap_request", "params": {"get_credentials_mock": "", "hook": "", "mock_request": "", "self": ""}, "params_descr": {"get_credentials_mock": "", "hook": "", "mock_request": "", "self": ""}, "params_occur": {"get_credentials_mock": [["get_credentials_mock", "assert_called_once_with"], ["get_credentials_mock", "return_value", "before_request", "assert_called_once_with", "request", "request", "method", "method", "url", "url", "headers", "headers"]], "hook": [["result", "hook", "_cdap_request", "url", "url", "method", "method", "body", "body"]], "mock_request": [["request", "mock_request", "return_value"], ["mock_request", "assert_called_once_with"]], "self": []}, "params_p": {"args": [], "get_credentials_mock": [["mock.MagicMock", 0.24335621947844113], ["tests.test_util.aiohttp.AiohttpClientMocker", 0.14372053507955385]], "hook": [["aiohttp.ClientSession", 0.09774971288299729]], "kwargs": [], "mock_request": [["aiohttp.test_utils.TestClient", 0.4515357346457496]], "self": []}, "q_name": "TestDataFusionHook.test_cdap_request", "ret_exprs": [], "ret_type": "", "variables": {"body": "", "headers": "", "method": "", "request": "", "result": "", "return_value": "", "url": ""}, "variables_p": {"body": [["Dict[str, Any]", 0.32128316564770376], ["str", 0.2954397681058353], ["Dict[str, Union[str, Any]]", 0.10709438854923459], ["list", 0.09291932357077472], ["Optional[str]", 0.09236884688464504], ["bytes", 0.09089450724180666]], "headers": [["rotkehlchen.tests.utils.mock.MockResponse", 0.5168896623736424], ["Dict[str, str]", 0.16447479574994903], ["list", 0.09227039090503705], ["Counter", 0.08324543400380799]], "method": [["str", 0.71490455255665], ["Dict[str, str]", 0.1910019370733131], ["Dict[str, Union[Any, Any]]", 0.09409351037003684]], "request": [["str", 0.09113119030197227], ["rotkehlchen.tests.utils.mock.MockResponse", 0.08958065825205366], ["Dict[str, List[str]]", 0.08815769348342359]], "result": [["str", 0.0994752011186856]], "return_value": [["tests.test_slack.Mock_Request", 0.22265792278540006], ["str", 0.18449400319720094]], "url": [["str", 0.42321297441642747], ["Dict[str, str]", 0.2975594285193666], ["Dict[str, Any]", 0.09450676921090474], ["Dict[str, Union[Any, Any, Any]]", 0.08948557670688824]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[185, 4], [192, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_create_pipeline", "params": {"hook": "", "mock_request": "", "self": ""}, "params_descr": {"hook": "", "mock_request": "", "self": ""}, "params_occur": {"hook": [["hook", "create_pipeline", "pipeline_name", "PIPELINE_NAME", "pipeline", "PIPELINE", "instance_url", "INSTANCE_URL"]], "mock_request": [["mock_request", "return_value", "status"], ["mock_request", "assert_called_once_with", "url", "INSTANCE_URL", "PIPELINE_NAME", "method", "body", "PIPELINE"]], "self": []}, "params_p": {"args": [], "hook": [["str", 0.221917243695107], ["aiohttp.test_utils.TestClient", 0.11081935250140122]], "kwargs": [], "mock_request": [], "self": []}, "q_name": "TestDataFusionHook.test_create_pipeline", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[195, 4], [208, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_create_pipeline_should_fail_if_empty_data_response", "params": {"hook": "", "mock_request": "", "self": ""}, "params_descr": {"hook": "", "mock_request": "", "self": ""}, "params_occur": {"hook": [["hook", "create_pipeline", "pipeline_name", "PIPELINE_NAME", "pipeline", "PIPELINE", "instance_url", "INSTANCE_URL"]], "mock_request": [["mock_request", "return_value", "status"], ["mock_request", "return_value", "data", "None"], ["mock_request", "assert_called_once_with", "url", "INSTANCE_URL", "PIPELINE_NAME", "method", "body", "PIPELINE"]], "self": []}, "params_p": {"args": [], "hook": [["str", 0.2925232996319154], ["aiohttp.test_utils.TestClient", 0.19030066772479065]], "kwargs": [], "mock_request": [["tests.test_util.aiohttp.AiohttpClientMocker", 0.11624975170799152]], "self": []}, "q_name": "TestDataFusionHook.test_create_pipeline_should_fail_if_empty_data_response", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[211, 4], [219, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_create_pipeline_should_fail_if_status_not_200", "params": {"hook": "", "mock_request": "", "self": ""}, "params_descr": {"hook": "", "mock_request": "", "self": ""}, "params_occur": {"hook": [["hook", "create_pipeline", "pipeline_name", "PIPELINE_NAME", "pipeline", "PIPELINE", "instance_url", "INSTANCE_URL"]], "mock_request": [["mock_request", "return_value", "status"], ["mock_request", "assert_called_once_with", "url", "INSTANCE_URL", "PIPELINE_NAME", "method", "body", "PIPELINE"]], "self": []}, "params_p": {"args": [], "hook": [["str", 0.2267961692140359], ["aiohttp.test_utils.TestClient", 0.11040157698543963]], "kwargs": [], "mock_request": [], "self": []}, "q_name": "TestDataFusionHook.test_create_pipeline_should_fail_if_status_not_200", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[222, 4], [229, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_delete_pipeline", "params": {"hook": "", "mock_request": "", "self": ""}, "params_descr": {"hook": "", "mock_request": "", "self": ""}, "params_occur": {"hook": [["hook", "delete_pipeline", "pipeline_name", "PIPELINE_NAME", "instance_url", "INSTANCE_URL"]], "mock_request": [["mock_request", "return_value", "status"], ["mock_request", "assert_called_once_with", "url", "INSTANCE_URL", "PIPELINE_NAME", "method", "body", "None"]], "self": []}, "params_p": {"args": [], "hook": [["tests.test_util.aiohttp.AiohttpClientMocker", 0.08371727040594602]], "kwargs": [], "mock_request": [], "self": []}, "q_name": "TestDataFusionHook.test_delete_pipeline", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[232, 4], [245, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_delete_pipeline_should_fail_if_empty_data_response", "params": {"hook": "", "mock_request": "", "self": ""}, "params_descr": {"hook": "", "mock_request": "", "self": ""}, "params_occur": {"hook": [["hook", "delete_pipeline", "pipeline_name", "PIPELINE_NAME", "instance_url", "INSTANCE_URL"]], "mock_request": [["mock_request", "return_value", "status"], ["mock_request", "return_value", "data", "None"], ["mock_request", "assert_called_once_with", "url", "INSTANCE_URL", "PIPELINE_NAME", "method", "body", "None"]], "self": []}, "params_p": {"args": [], "hook": [], "kwargs": [], "mock_request": [["tests.test_util.aiohttp.AiohttpClientMocker", 0.1063778101407346]], "self": []}, "q_name": "TestDataFusionHook.test_delete_pipeline_should_fail_if_empty_data_response", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[248, 4], [256, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_delete_pipeline_should_fail_if_status_not_200", "params": {"hook": "", "mock_request": "", "self": ""}, "params_descr": {"hook": "", "mock_request": "", "self": ""}, "params_occur": {"hook": [["hook", "delete_pipeline", "pipeline_name", "PIPELINE_NAME", "instance_url", "INSTANCE_URL"]], "mock_request": [["mock_request", "return_value", "status"], ["mock_request", "assert_called_once_with", "url", "INSTANCE_URL", "PIPELINE_NAME", "method", "body", "None"]], "self": []}, "params_p": {"args": [], "hook": [["tests.test_util.aiohttp.AiohttpClientMocker", 0.1881454562392842]], "kwargs": [], "mock_request": [], "self": []}, "q_name": "TestDataFusionHook.test_delete_pipeline_should_fail_if_status_not_200", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[259, 4], [267, 29]], "fn_var_ln": {"data": [[260, 8], [260, 12]], "result": [[263, 8], [263, 14]]}, "fn_var_occur": {"data": [["mock_request", "return_value", "data", "json", "dumps", "data"], ["result", "data"]], "result": [["result", "hook", "list_pipelines", "instance_url", "INSTANCE_URL"], ["result", "data"]]}, "name": "test_list_pipelines", "params": {"hook": "", "mock_request": "", "self": ""}, "params_descr": {"hook": "", "mock_request": "", "self": ""}, "params_occur": {"hook": [["result", "hook", "list_pipelines", "instance_url", "INSTANCE_URL"]], "mock_request": [["mock_request", "return_value", "status"], ["mock_request", "return_value", "data", "json", "dumps", "data"], ["mock_request", "assert_called_once_with", "url", "INSTANCE_URL", "method", "body", "None"]], "self": []}, "params_p": {"args": [], "hook": [["tests.test_util.aiohttp.AiohttpClientMocker", 0.10035434444984034]], "kwargs": [], "mock_request": [["tests.test_util.aiohttp.AiohttpClientMocker", 0.09233051028182354]], "self": []}, "q_name": "TestDataFusionHook.test_list_pipelines", "ret_exprs": [], "ret_type": "", "variables": {"data": "", "result": ""}, "variables_p": {"data": [["List[Dict[str, str]]", 0.309975652951188], ["str", 0.18455669540076652], ["Dict[str, Union[float, str]]", 0.0904681157967187], ["bytes", 0.08017957570531584], ["Dict[str, str]", 0.07880077204076891]], "result": [["str", 0.5880841435524693], ["dict", 0.16749454041988232], ["tuple", 0.08009200755084378]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[270, 4], [281, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_list_pipelines_should_fail_if_empty_data_response", "params": {"hook": "", "mock_request": "", "self": ""}, "params_descr": {"hook": "", "mock_request": "", "self": ""}, "params_occur": {"hook": [["hook", "list_pipelines", "instance_url", "INSTANCE_URL"]], "mock_request": [["mock_request", "return_value", "status"], ["mock_request", "return_value", "data", "None"], ["mock_request", "assert_called_once_with", "url", "INSTANCE_URL", "method", "body", "None"]], "self": []}, "params_p": {"args": [], "hook": [["str", 0.40069348154483403], ["tests.test_util.aiohttp.AiohttpClientMocker", 0.3302121049332004]], "kwargs": [], "mock_request": [["tests.test_util.aiohttp.AiohttpClientMocker", 0.12090629153478054]], "self": []}, "q_name": "TestDataFusionHook.test_list_pipelines_should_fail_if_empty_data_response", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[284, 4], [290, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_list_pipelines_should_fail_if_status_not_200", "params": {"hook": "", "mock_request": "", "self": ""}, "params_descr": {"hook": "", "mock_request": "", "self": ""}, "params_occur": {"hook": [["hook", "list_pipelines", "instance_url", "INSTANCE_URL"]], "mock_request": [["mock_request", "return_value", "status"], ["mock_request", "assert_called_once_with", "url", "INSTANCE_URL", "method", "body", "None"]], "self": []}, "params_p": {"args": [], "hook": [["tests.test_util.aiohttp.AiohttpClientMocker", 0.3295656871627332], ["str", 0.28299342050504184]], "kwargs": [], "mock_request": [], "self": []}, "q_name": "TestDataFusionHook.test_list_pipelines_should_fail_if_status_not_200", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[293, 4], [308, 9]], "fn_var_ln": {"body": [[298, 8], [298, 12]], "return_value": [[295, 8], [295, 33]], "run_id": [[294, 8], [294, 14]]}, "fn_var_occur": {"body": [["body", "PIPELINE_NAME", "RUNTIME_ARGS"], ["mock_request", "assert_called_once_with", "url", "INSTANCE_URL", "method", "body", "body"]], "return_value": [["mock_request", "return_value", "mock", "MagicMock", "status", "data", "run_id"]], "run_id": [["mock_request", "return_value", "mock", "MagicMock", "status", "data", "run_id"]]}, "name": "test_start_pipeline", "params": {"hook": "", "mock_request": "", "self": ""}, "params_descr": {"hook": "", "mock_request": "", "self": ""}, "params_occur": {"hook": [["hook", "start_pipeline", "pipeline_name", "PIPELINE_NAME", "instance_url", "INSTANCE_URL", "runtime_args", "RUNTIME_ARGS"]], "mock_request": [["mock_request", "return_value", "mock", "MagicMock", "status", "data", "run_id"], ["mock_request", "assert_called_once_with", "url", "INSTANCE_URL", "method", "body", "body"]], "self": []}, "params_p": {"args": [], "hook": [["aiohttp.test_utils.TestClient", 0.08239005366330249]], "kwargs": [], "mock_request": [["Dict[str, Any]", 0.44716770334759015]], "self": []}, "q_name": "TestDataFusionHook.test_start_pipeline", "ret_exprs": [], "ret_type": "", "variables": {"body": "", "return_value": "", "run_id": ""}, "variables_p": {"body": [["str", 0.5008234812450238], ["Dict[str, str]", 0.3035385260795016], ["Dict[str, Any]", 0.10600696499615081], ["Optional[str]", 0.08963102767932388]], "return_value": [], "run_id": [["str", 0.1204539331707768], ["bool", 0.09465836540455115], ["Dict[str, Dict[str, str]]", 0.09396248411376655]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[311, 4], [332, 9]], "fn_var_ln": {"body": [[322, 8], [322, 12]]}, "fn_var_occur": {"body": [["body", "PIPELINE_NAME", "RUNTIME_ARGS"], ["mock_request", "assert_called_once_with", "url", "INSTANCE_URL", "method", "body", "body"]]}, "name": "test_start_pipeline_should_fail_if_empty_data_response", "params": {"hook": "", "mock_request": "", "self": ""}, "params_descr": {"hook": "", "mock_request": "", "self": ""}, "params_occur": {"hook": [["hook", "start_pipeline", "pipeline_name", "PIPELINE_NAME", "instance_url", "INSTANCE_URL", "runtime_args", "RUNTIME_ARGS"]], "mock_request": [["mock_request", "return_value", "status"], ["mock_request", "return_value", "data", "None"], ["mock_request", "assert_called_once_with", "url", "INSTANCE_URL", "method", "body", "body"]], "self": []}, "params_p": {"args": [], "hook": [], "kwargs": [], "mock_request": [["tests.test_util.aiohttp.AiohttpClientMocker", 0.10585172095870372]], "self": []}, "q_name": "TestDataFusionHook.test_start_pipeline_should_fail_if_empty_data_response", "ret_exprs": [], "ret_type": "", "variables": {"body": ""}, "variables_p": {"body": [["str", 0.5008234812450238], ["Dict[str, str]", 0.3035385260795016], ["Dict[str, Any]", 0.10600696499615081], ["Optional[str]", 0.08963102767932388]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[335, 4], [351, 9]], "fn_var_ln": {"body": [[341, 8], [341, 12]]}, "fn_var_occur": {"body": [["body", "PIPELINE_NAME", "RUNTIME_ARGS"], ["mock_request", "assert_called_once_with", "url", "INSTANCE_URL", "method", "body", "body"]]}, "name": "test_start_pipeline_should_fail_if_status_not_200", "params": {"hook": "", "mock_request": "", "self": ""}, "params_descr": {"hook": "", "mock_request": "", "self": ""}, "params_occur": {"hook": [["hook", "start_pipeline", "pipeline_name", "PIPELINE_NAME", "instance_url", "INSTANCE_URL", "runtime_args", "RUNTIME_ARGS"]], "mock_request": [["mock_request", "return_value", "status"], ["mock_request", "assert_called_once_with", "url", "INSTANCE_URL", "method", "body", "body"]], "self": []}, "params_p": {"args": [], "hook": [["aiohttp.test_utils.TestClient", 0.07893701058977601]], "kwargs": [], "mock_request": [["mock.Mock", 0.0949700042320957]], "self": []}, "q_name": "TestDataFusionHook.test_start_pipeline_should_fail_if_status_not_200", "ret_exprs": [], "ret_type": "", "variables": {"body": ""}, "variables_p": {"body": [["str", 0.5008234812450238], ["Dict[str, str]", 0.3035385260795016], ["Dict[str, Any]", 0.10600696499615081], ["Optional[str]", 0.08963102767932388]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[354, 4], [361, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_stop_pipeline", "params": {"hook": "", "mock_request": "", "self": ""}, "params_descr": {"hook": "", "mock_request": "", "self": ""}, "params_occur": {"hook": [["hook", "stop_pipeline", "pipeline_name", "PIPELINE_NAME", "instance_url", "INSTANCE_URL"]], "mock_request": [["mock_request", "return_value", "status"], ["mock_request", "assert_called_once_with", "url", "INSTANCE_URL", "PIPELINE_NAME", "method"]], "self": []}, "params_p": {"args": [], "hook": [], "kwargs": [], "mock_request": [["mock.Mock", 0.10299940739602002]], "self": []}, "q_name": "TestDataFusionHook.test_stop_pipeline", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[364, 4], [377, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_stop_pipeline_should_fail_if_empty_data_response", "params": {"hook": "", "mock_request": "", "self": ""}, "params_descr": {"hook": "", "mock_request": "", "self": ""}, "params_occur": {"hook": [["hook", "stop_pipeline", "pipeline_name", "PIPELINE_NAME", "instance_url", "INSTANCE_URL"]], "mock_request": [["mock_request", "return_value", "status"], ["mock_request", "return_value", "data", "None"], ["mock_request", "assert_called_once_with", "url", "INSTANCE_URL", "PIPELINE_NAME", "method"]], "self": []}, "params_p": {"args": [], "hook": [], "kwargs": [], "mock_request": [["tests.test_util.aiohttp.AiohttpClientMocker", 0.12041341100173103]], "self": []}, "q_name": "TestDataFusionHook.test_stop_pipeline_should_fail_if_empty_data_response", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[380, 4], [388, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_stop_pipeline_should_fail_if_status_not_200", "params": {"hook": "", "mock_request": "", "self": ""}, "params_descr": {"hook": "", "mock_request": "", "self": ""}, "params_occur": {"hook": [["hook", "stop_pipeline", "pipeline_name", "PIPELINE_NAME", "instance_url", "INSTANCE_URL"]], "mock_request": [["mock_request", "return_value", "status"], ["mock_request", "assert_called_once_with", "url", "INSTANCE_URL", "PIPELINE_NAME", "method"]], "self": []}, "params_p": {"args": [], "hook": [["tests.test_util.aiohttp.AiohttpClientMocker", 0.17487586651770992]], "kwargs": [], "mock_request": [["mock.Mock", 0.0922096021938268]], "self": []}, "q_name": "TestDataFusionHook.test_stop_pipeline_should_fail_if_status_not_200", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[391, 4], [401, 9]], "fn_var_ln": {"return_value": [[393, 8], [393, 33]], "run_id": [[392, 8], [392, 14]]}, "fn_var_occur": {"return_value": [["mock_request", "return_value", "mock", "MagicMock", "status", "data", "run_id"]], "run_id": [["mock_request", "return_value", "mock", "MagicMock", "status", "data", "run_id"]]}, "name": "test_get_pipeline_workflow", "params": {"hook": "", "mock_request": "", "self": ""}, "params_descr": {"hook": "", "mock_request": "", "self": ""}, "params_occur": {"hook": [["hook", "get_pipeline_workflow", "pipeline_name", "PIPELINE_NAME", "instance_url", "INSTANCE_URL", "pipeline_id", "PIPELINE_ID"]], "mock_request": [["mock_request", "return_value", "mock", "MagicMock", "status", "data", "run_id"], ["mock_request", "assert_called_once_with", "url", "INSTANCE_URL", "PIPELINE_NAME", "PIPELINE_ID", "method"]], "self": []}, "params_p": {"args": [], "hook": [["tests.test_util.aiohttp.AiohttpClientMocker", 0.3402154628420712], ["str", 0.18290040733896507]], "kwargs": [], "mock_request": [["Dict[str, Any]", 0.41010620054260183]], "self": []}, "q_name": "TestDataFusionHook.test_get_pipeline_workflow", "ret_exprs": [], "ret_type": "", "variables": {"return_value": "", "run_id": ""}, "variables_p": {"return_value": [], "run_id": [["str", 0.1204539331707768], ["bool", 0.09465836540455115], ["Dict[str, Dict[str, str]]", 0.09396248411376655]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[404, 4], [419, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_get_pipeline_workflow_should_fail_if_empty_data_response", "params": {"hook": "", "mock_request": "", "self": ""}, "params_descr": {"hook": "", "mock_request": "", "self": ""}, "params_occur": {"hook": [["hook", "get_pipeline_workflow", "pipeline_name", "PIPELINE_NAME", "instance_url", "INSTANCE_URL", "pipeline_id", "PIPELINE_ID"]], "mock_request": [["mock_request", "return_value", "status"], ["mock_request", "return_value", "data", "None"], ["mock_request", "assert_called_once_with", "url", "INSTANCE_URL", "PIPELINE_NAME", "PIPELINE_ID", "method"]], "self": []}, "params_p": {"args": [], "hook": [["tests.test_util.aiohttp.AiohttpClientMocker", 0.6177899604480718], ["str", 0.08955432140662035]], "kwargs": [], "mock_request": [["tests.test_util.aiohttp.AiohttpClientMocker", 0.12008746417635763]], "self": []}, "q_name": "TestDataFusionHook.test_get_pipeline_workflow_should_fail_if_empty_data_response", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[422, 4], [432, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_get_pipeline_workflow_should_fail_if_status_not_200", "params": {"hook": "", "mock_request": "", "self": ""}, "params_descr": {"hook": "", "mock_request": "", "self": ""}, "params_occur": {"hook": [["hook", "get_pipeline_workflow", "pipeline_name", "PIPELINE_NAME", "instance_url", "INSTANCE_URL", "pipeline_id", "PIPELINE_ID"]], "mock_request": [["mock_request", "return_value", "status"], ["mock_request", "assert_called_once_with", "url", "INSTANCE_URL", "PIPELINE_NAME", "PIPELINE_ID", "method"]], "self": []}, "params_p": {"args": [], "hook": [["tests.test_util.aiohttp.AiohttpClientMocker", 0.3621734515939289], ["str", 0.09209770760338314], ["tests.async_mock.MagicMock", 0.0837919962665961]], "kwargs": [], "mock_request": [], "self": []}, "q_name": "TestDataFusionHook.test_get_pipeline_workflow_should_fail_if_status_not_200", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestDataFusionHook", "q_name": "TestDataFusionHook", "variables": {}, "variables_p": {}}, {"cls_lc": [[435, 0], [545, 82]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[436, 4], [438, 85]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_delegate_to_runtime_error", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDataFusionHookAsynch.test_delegate_to_runtime_error", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[442, 4], [450, 91]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_async_get_pipeline_should_execute_successfully", "params": {"hook_async": "", "mocked_link": "", "self": ""}, "params_descr": {"hook_async": "", "mocked_link": "", "self": ""}, "params_occur": {"hook_async": [["hook_async", "get_pipeline", "instance_url", "INSTANCE_URL", "namespace", "NAMESPACE", "pipeline_name", "PIPELINE_NAME", "pipeline_id", "PIPELINE_ID", "session", "session"]], "mocked_link": [["mocked_link", "assert_awaited_once_with", "url", "CONSTRUCTED_PIPELINE_URL", "session", "session"]], "self": []}, "params_p": {"args": [], "hook_async": [], "kwargs": [], "mocked_link": [], "self": []}, "q_name": "TestDataFusionHookAsynch.test_async_get_pipeline_should_execute_successfully", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[454, 4], [480, 43]], "fn_var_ln": {"pipeline_status": [[473, 8], [473, 23]], "response": [[457, 8], [457, 16]], "return_value": [[469, 8], [469, 31]], "status": [[468, 8], [468, 23]]}, "fn_var_occur": {"pipeline_status": [["pipeline_status", "hook_async", "get_pipeline_status", "pipeline_name", "PIPELINE_NAME", "instance_url", "INSTANCE_URL", "pipeline_id", "PIPELINE_ID", "namespace", "NAMESPACE"]], "response": [["response", "aiohttp", "ClientResponse", "URL", "CONSTRUCTED_PIPELINE_URL_GET", "request_info", "mock", "Mock", "writer", "mock", "Mock", "continue100", "None", "timer", "TimerNoop", "traces", "loop", "mock", "Mock", "session", "session"], ["response", "status"], ["mocked_get", "return_value", "response"]], "return_value": [["mocked_get", "return_value", "response"], ["mocked_get", "return_value", "_headers"], ["mocked_get", "return_value", "_body"]], "status": [["response", "status"]]}, "name": "test_async_get_pipeline_status_completed_should_execute_successfully", "params": {"hook_async": "", "mocked_get": "", "self": ""}, "params_descr": {"hook_async": "", "mocked_get": "", "self": ""}, "params_occur": {"hook_async": [["pipeline_status", "hook_async", "get_pipeline_status", "pipeline_name", "PIPELINE_NAME", "instance_url", "INSTANCE_URL", "pipeline_id", "PIPELINE_ID", "namespace", "NAMESPACE"]], "mocked_get": [["mocked_get", "return_value", "response"], ["mocked_get", "return_value", "_headers"], ["mocked_get", "return_value", "_body"], ["mocked_get", "assert_awaited_once"]], "self": []}, "params_p": {"args": [], "hook_async": [["taskiinfrastructure.data.json.repositories.task_repository.JsonTaskRepository", 0.19378267117597436], ["str", 0.1897959607708652]], "kwargs": [], "mocked_get": [], "self": []}, "q_name": "TestDataFusionHookAsynch.test_async_get_pipeline_status_completed_should_execute_successfully", "ret_exprs": [], "ret_type": "", "variables": {"pipeline_status": "", "response": "", "return_value": "", "status": ""}, "variables_p": {"pipeline_status": [["int", 0.22538623770640856], ["str", 0.19284425473203537], ["Dict[str, str]", 0.18026862044689446], ["List[str]", 0.09139579445693392]], "response": [["jj.mock._remote_mock.RemoteMock", 0.0860388831766185]], "return_value": [["tests.mock.zwave.MockValue", 0.16267413667320757], ["List[str]", 0.1472535270937122], ["Tuple[int, int]", 0.12592139278316508], ["list", 0.10414275520581374], ["int", 0.10155758399963943], ["Type[Dict[Any, Any]]", 0.09444508641981705], ["List[int]", 0.09387124869535499], ["Dict[str, Union[Any, Any]]", 0.08296503241052224]], "status": [["List[Tuple[bool, Any]]", 0.24999999994926284], ["List[Tuple[Any, Any, Any]]", 0.24999999994926284], ["List[List[Any]]", 0.24999999994926284], ["int", 0.24999999994926284], ["bytes", 1.2260541388420966e-10], ["List[str]", 4.305737791840312e-11], ["str", 2.433357688996171e-11], ["Dict[str, str]", 1.2952254864646594e-11]]}}, {"docstring": {"func": "Assets that the DataFusionAsyncHook returns pending response when job is still in running state", "long_descr": null, "ret": null}, "fn_lc": [[484, 4], [511, 43]], "fn_var_ln": {"pipeline_status": [[504, 8], [504, 23]], "response": [[488, 8], [488, 16]], "return_value": [[500, 8], [500, 31]], "status": [[499, 8], [499, 23]]}, "fn_var_occur": {"pipeline_status": [["pipeline_status", "hook_async", "get_pipeline_status", "pipeline_name", "PIPELINE_NAME", "instance_url", "INSTANCE_URL", "pipeline_id", "PIPELINE_ID", "namespace", "NAMESPACE"]], "response": [["response", "aiohttp", "ClientResponse", "URL", "CONSTRUCTED_PIPELINE_URL_GET", "request_info", "mock", "Mock", "writer", "mock", "Mock", "continue100", "None", "timer", "TimerNoop", "traces", "loop", "mock", "Mock", "session", "session"], ["response", "status"], ["mocked_get", "return_value", "response"]], "return_value": [["mocked_get", "return_value", "response"], ["mocked_get", "return_value", "_headers"], ["mocked_get", "return_value", "_body"]], "status": [["response", "status"]]}, "name": "test_async_get_pipeline_status_running_should_execute_successfully", "params": {"hook_async": "", "mocked_get": "", "self": ""}, "params_descr": {"hook_async": "", "mocked_get": "", "self": ""}, "params_occur": {"hook_async": [["pipeline_status", "hook_async", "get_pipeline_status", "pipeline_name", "PIPELINE_NAME", "instance_url", "INSTANCE_URL", "pipeline_id", "PIPELINE_ID", "namespace", "NAMESPACE"]], "mocked_get": [["mocked_get", "return_value", "response"], ["mocked_get", "return_value", "_headers"], ["mocked_get", "return_value", "_body"], ["mocked_get", "assert_awaited_once"]], "self": []}, "params_p": {"args": [], "hook_async": [["str", 0.20601190931179938], ["Optional[str]", 0.09410582441774659]], "kwargs": [], "mocked_get": [], "self": []}, "q_name": "TestDataFusionHookAsynch.test_async_get_pipeline_status_running_should_execute_successfully", "ret_exprs": [], "ret_type": "", "variables": {"pipeline_status": "", "response": "", "return_value": "", "status": ""}, "variables_p": {"pipeline_status": [["int", 0.22538623770640856], ["str", 0.19284425473203537], ["Dict[str, str]", 0.18026862044689446], ["List[str]", 0.09139579445693392]], "response": [["jj.mock._remote_mock.RemoteMock", 0.0860388831766185]], "return_value": [["tests.mock.zwave.MockValue", 0.16267413667320757], ["List[str]", 0.1472535270937122], ["Tuple[int, int]", 0.12592139278316508], ["list", 0.10414275520581374], ["int", 0.10155758399963943], ["Type[Dict[Any, Any]]", 0.09444508641981705], ["List[int]", 0.09387124869535499], ["Dict[str, Union[Any, Any]]", 0.08296503241052224]], "status": [["List[Tuple[bool, Any]]", 0.24999999994926284], ["List[Tuple[Any, Any, Any]]", 0.24999999994926284], ["List[List[Any]]", 0.24999999994926284], ["int", 0.24999999994926284], ["bytes", 1.2260541388420966e-10], ["List[str]", 4.305737791840312e-11], ["str", 2.433357688996171e-11], ["Dict[str, str]", 1.2952254864646594e-11]]}}, {"docstring": {"func": "Assets that the DataFusionAsyncHook returns a pending response when OSError is raised", "long_descr": null, "ret": null}, "fn_lc": [[515, 4], [528, 43]], "fn_var_ln": {"pipeline_status": [[521, 8], [521, 23]], "side_effect": [[519, 8], [519, 30]]}, "fn_var_occur": {"pipeline_status": [["pipeline_status", "hook_async", "get_pipeline_status", "pipeline_name", "PIPELINE_NAME", "instance_url", "INSTANCE_URL", "pipeline_id", "PIPELINE_ID", "namespace", "NAMESPACE"]], "side_effect": [["mocked_get", "side_effect", "OSError"]]}, "name": "test_async_get_pipeline_status_os_error_should_execute_successfully", "params": {"hook_async": "", "mocked_get": "", "self": ""}, "params_descr": {"hook_async": "", "mocked_get": "", "self": ""}, "params_occur": {"hook_async": [["pipeline_status", "hook_async", "get_pipeline_status", "pipeline_name", "PIPELINE_NAME", "instance_url", "INSTANCE_URL", "pipeline_id", "PIPELINE_ID", "namespace", "NAMESPACE"]], "mocked_get": [["mocked_get", "side_effect", "OSError"], ["mocked_get", "assert_awaited_once"]], "self": []}, "params_p": {"args": [], "hook_async": [["str", 0.19850454252123817], ["Optional[str]", 0.0950968111589195]], "kwargs": [], "mocked_get": [], "self": []}, "q_name": "TestDataFusionHookAsynch.test_async_get_pipeline_status_os_error_should_execute_successfully", "ret_exprs": [], "ret_type": "", "variables": {"pipeline_status": "", "side_effect": ""}, "variables_p": {"pipeline_status": [["int", 0.22538623770640856], ["str", 0.19284425473203537], ["Dict[str, str]", 0.18026862044689446], ["List[str]", 0.09139579445693392]], "side_effect": [["str", 0.46146968833119484], ["List[Dict[str, float]]", 0.10543346334745063], ["Dict[str, Dict[str, str]]", 0.0831681400737581]]}}, {"docstring": {"func": "Assets that the logging is done correctly when DataFusionAsyncHook raises Exception", "long_descr": null, "ret": null}, "fn_lc": [[532, 4], [545, 82]], "fn_var_ln": {"side_effect": [[536, 8], [536, 30]]}, "fn_var_occur": {"side_effect": [["mocked_get", "side_effect", "Exception"]]}, "name": "test_async_get_pipeline_status_exception_should_execute_successfully", "params": {"caplog": "", "hook_async": "", "mocked_get": "", "self": ""}, "params_descr": {"caplog": "", "hook_async": "", "mocked_get": "", "self": ""}, "params_occur": {"caplog": [["caplog", "text"]], "hook_async": [["hook_async", "get_pipeline_status", "pipeline_name", "PIPELINE_NAME", "instance_url", "INSTANCE_URL", "pipeline_id", "PIPELINE_ID", "namespace", "NAMESPACE"]], "mocked_get": [["mocked_get", "side_effect", "Exception"], ["mocked_get", "assert_awaited_once"]], "self": []}, "params_p": {"args": [], "caplog": [], "hook_async": [["str", 0.2927763806825411], ["Optional[str]", 0.09722426799203143], ["taskiinfrastructure.data.json.repositories.task_repository.JsonTaskRepository", 0.09128675061339842]], "kwargs": [], "mocked_get": [["tests.test_util.aiohttp.AiohttpClientMocker", 0.29531976846863056]], "self": []}, "q_name": "TestDataFusionHookAsynch.test_async_get_pipeline_status_exception_should_execute_successfully", "ret_exprs": [], "ret_type": "", "variables": {"side_effect": ""}, "variables_p": {"side_effect": [["str", 0.46146968833119484], ["List[Dict[str, float]]", 0.10543346334745063], ["Dict[str, Dict[str, str]]", 0.0831681400737581]]}}], "name": "TestDataFusionHookAsynch", "q_name": "TestDataFusionHookAsynch", "variables": {}, "variables_p": {}}], "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[56, 0], [61, 53]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "hook", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "hook", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[65, 0], [70, 35]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "hook_async", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "hook_async", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[73, 0], [74, 22]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "session", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "session", "ret_exprs": ["return mock.Mock()"], "ret_type": "", "ret_type_p": [["tests.e2e.Helper", 0.31003709405226776], ["str", 0.10582916912486787], ["aiohttp.web.Application", 0.09956461621780334], ["Tuple[Callable, Callable]", 0.09651368528888478]], "variables": {}, "variables_p": {}}], "imports": ["__future__", "annotations", "json", "unittest", "mock", "aiohttp", "pytest", "aiohttp", "helpers", "TimerNoop", "yarl", "URL", "airflow", "AirflowException", "airflow", "providers", "google", "cloud", "hooks", "datafusion", "DataFusionAsyncHook", "DataFusionHook", "tests", "providers", "google", "cloud", "utils", "base_gcp_mock", "mock_base_gcp_hook_default_project_id"], "mod_var_ln": {"API_VERSION": [[31, 0], [31, 11]], "CONSTRUCTED_PIPELINE_URL": [[44, 0], [44, 24]], "CONSTRUCTED_PIPELINE_URL_GET": [[48, 0], [48, 28]], "GCP_CONN_ID": [[32, 0], [32, 11]], "HOOK_STR": [[33, 0], [33, 8]], "INSTANCE": [[37, 0], [37, 8]], "INSTANCE_NAME": [[35, 0], [35, 13]], "INSTANCE_URL": [[36, 0], [36, 12]], "LOCATION": [[34, 0], [34, 8]], "NAMESPACE": [[38, 0], [38, 9]], "PIPELINE": [[42, 0], [42, 8]], "PIPELINE_ID": [[41, 0], [41, 11]], "PIPELINE_NAME": [[40, 0], [40, 13]], "PROJECT_ID": [[39, 0], [39, 10]], "RUNTIME_ARGS": [[43, 0], [43, 12]]}, "mod_var_occur": {"API_VERSION": [], "CONSTRUCTED_PIPELINE_URL": [["mocked_link", "assert_awaited_once_with", "url", "CONSTRUCTED_PIPELINE_URL", "session", "session"]], "CONSTRUCTED_PIPELINE_URL_GET": [["response", "aiohttp", "ClientResponse", "URL", "CONSTRUCTED_PIPELINE_URL_GET", "request_info", "mock", "Mock", "writer", "mock", "Mock", "continue100", "None", "timer", "TimerNoop", "traces", "loop", "mock", "Mock", "session", "session"], ["response", "aiohttp", "ClientResponse", "URL", "CONSTRUCTED_PIPELINE_URL_GET", "request_info", "mock", "Mock", "writer", "mock", "Mock", "continue100", "None", "timer", "TimerNoop", "traces", "loop", "mock", "Mock", "session", "session"]], "GCP_CONN_ID": [["DataFusionHook", "gcp_conn_id", "GCP_CONN_ID"]], "HOOK_STR": [], "INSTANCE": [["result", "hook", "create_instance", "instance_name", "INSTANCE_NAME", "instance", "INSTANCE", "location", "LOCATION", "project_id", "PROJECT_ID"], ["method_mock", "assert_called_once_with", "parent", "hook", "_parent", "PROJECT_ID", "LOCATION", "body", "INSTANCE", "instanceId", "INSTANCE_NAME"], ["result", "hook", "patch_instance", "instance_name", "INSTANCE_NAME", "instance", "INSTANCE", "update_mask", "location", "LOCATION", "project_id", "PROJECT_ID"], ["method_mock", "assert_called_once_with", "name", "hook", "_name", "PROJECT_ID", "LOCATION", "INSTANCE_NAME", "body", "INSTANCE", "updateMask"]], "INSTANCE_NAME": [["INSTANCE", "INSTANCE_NAME"], ["CONSTRUCTED_PIPELINE_URL_GET", "INSTANCE_NAME", "PROJECT_ID", "NAMESPACE", "PIPELINE_NAME", "PIPELINE_ID"], ["expected", "PROJECT_ID", "LOCATION", "INSTANCE_NAME"], ["hook", "_name", "PROJECT_ID", "LOCATION", "INSTANCE_NAME", "expected"], ["result", "hook", "restart_instance", "instance_name", "INSTANCE_NAME", "location", "LOCATION", "project_id", "PROJECT_ID"], ["method_mock", "assert_called_once_with", "name", "hook", "_name", "PROJECT_ID", "LOCATION", "INSTANCE_NAME"], ["result", "hook", "delete_instance", "instance_name", "INSTANCE_NAME", "location", "LOCATION", "project_id", "PROJECT_ID"], ["method_mock", "assert_called_once_with", "name", "hook", "_name", "PROJECT_ID", "LOCATION", "INSTANCE_NAME"], ["result", "hook", "create_instance", "instance_name", "INSTANCE_NAME", "instance", "INSTANCE", "location", "LOCATION", "project_id", "PROJECT_ID"], ["method_mock", "assert_called_once_with", "parent", "hook", "_parent", "PROJECT_ID", "LOCATION", "body", "INSTANCE", "instanceId", "INSTANCE_NAME"], ["result", "hook", "patch_instance", "instance_name", "INSTANCE_NAME", "instance", "INSTANCE", "update_mask", "location", "LOCATION", "project_id", "PROJECT_ID"], ["method_mock", "assert_called_once_with", "name", "hook", "_name", "PROJECT_ID", "LOCATION", "INSTANCE_NAME", "body", "INSTANCE", "updateMask"], ["result", "hook", "get_instance", "instance_name", "INSTANCE_NAME", "location", "LOCATION", "project_id", "PROJECT_ID"], ["method_mock", "assert_called_once_with", "name", "hook", "_name", "PROJECT_ID", "LOCATION", "INSTANCE_NAME"]], "INSTANCE_URL": [["CONSTRUCTED_PIPELINE_URL", "INSTANCE_URL", "NAMESPACE", "PIPELINE_NAME", "PIPELINE_ID"], ["hook", "create_pipeline", "pipeline_name", "PIPELINE_NAME", "pipeline", "PIPELINE", "instance_url", "INSTANCE_URL"], ["mock_request", "assert_called_once_with", "url", "INSTANCE_URL", "PIPELINE_NAME", "method", "body", "PIPELINE"], ["hook", "create_pipeline", "pipeline_name", "PIPELINE_NAME", "pipeline", "PIPELINE", "instance_url", "INSTANCE_URL"], ["mock_request", "assert_called_once_with", "url", "INSTANCE_URL", "PIPELINE_NAME", "method", "body", "PIPELINE"], ["hook", "create_pipeline", "pipeline_name", "PIPELINE_NAME", "pipeline", "PIPELINE", "instance_url", "INSTANCE_URL"], ["mock_request", "assert_called_once_with", "url", "INSTANCE_URL", "PIPELINE_NAME", "method", "body", "PIPELINE"], ["hook", "delete_pipeline", "pipeline_name", "PIPELINE_NAME", "instance_url", "INSTANCE_URL"], ["mock_request", "assert_called_once_with", "url", "INSTANCE_URL", "PIPELINE_NAME", "method", "body", "None"], ["hook", "delete_pipeline", "pipeline_name", "PIPELINE_NAME", "instance_url", "INSTANCE_URL"], ["mock_request", "assert_called_once_with", "url", "INSTANCE_URL", "PIPELINE_NAME", "method", "body", "None"], ["hook", "delete_pipeline", "pipeline_name", "PIPELINE_NAME", "instance_url", "INSTANCE_URL"], ["mock_request", "assert_called_once_with", "url", "INSTANCE_URL", "PIPELINE_NAME", "method", "body", "None"], ["result", "hook", "list_pipelines", "instance_url", "INSTANCE_URL"], ["mock_request", "assert_called_once_with", "url", "INSTANCE_URL", "method", "body", "None"], ["hook", "list_pipelines", "instance_url", "INSTANCE_URL"], ["mock_request", "assert_called_once_with", "url", "INSTANCE_URL", "method", "body", "None"], ["hook", "list_pipelines", "instance_url", "INSTANCE_URL"], ["mock_request", "assert_called_once_with", "url", "INSTANCE_URL", "method", "body", "None"], ["hook", "start_pipeline", "pipeline_name", "PIPELINE_NAME", "instance_url", "INSTANCE_URL", "runtime_args", "RUNTIME_ARGS"], ["mock_request", "assert_called_once_with", "url", "INSTANCE_URL", "method", "body", "body"], ["hook", "start_pipeline", "pipeline_name", "PIPELINE_NAME", "instance_url", "INSTANCE_URL", "runtime_args", "RUNTIME_ARGS"], ["mock_request", "assert_called_once_with", "url", "INSTANCE_URL", "method", "body", "body"], ["hook", "start_pipeline", "pipeline_name", "PIPELINE_NAME", "instance_url", "INSTANCE_URL", "runtime_args", "RUNTIME_ARGS"], ["mock_request", "assert_called_once_with", "url", "INSTANCE_URL", "method", "body", "body"], ["hook", "stop_pipeline", "pipeline_name", "PIPELINE_NAME", "instance_url", "INSTANCE_URL"], ["mock_request", "assert_called_once_with", "url", "INSTANCE_URL", "PIPELINE_NAME", "method"], ["hook", "stop_pipeline", "pipeline_name", "PIPELINE_NAME", "instance_url", "INSTANCE_URL"], ["mock_request", "assert_called_once_with", "url", "INSTANCE_URL", "PIPELINE_NAME", "method"], ["hook", "stop_pipeline", "pipeline_name", "PIPELINE_NAME", "instance_url", "INSTANCE_URL"], ["mock_request", "assert_called_once_with", "url", "INSTANCE_URL", "PIPELINE_NAME", "method"], ["hook", "get_pipeline_workflow", "pipeline_name", "PIPELINE_NAME", "instance_url", "INSTANCE_URL", "pipeline_id", "PIPELINE_ID"], ["mock_request", "assert_called_once_with", "url", "INSTANCE_URL", "PIPELINE_NAME", "PIPELINE_ID", "method"], ["hook", "get_pipeline_workflow", "pipeline_name", "PIPELINE_NAME", "instance_url", "INSTANCE_URL", "pipeline_id", "PIPELINE_ID"], ["mock_request", "assert_called_once_with", "url", "INSTANCE_URL", "PIPELINE_NAME", "PIPELINE_ID", "method"], ["hook", "get_pipeline_workflow", "pipeline_name", "PIPELINE_NAME", "instance_url", "INSTANCE_URL", "pipeline_id", "PIPELINE_ID"], ["mock_request", "assert_called_once_with", "url", "INSTANCE_URL", "PIPELINE_NAME", "PIPELINE_ID", "method"], ["hook_async", "get_pipeline", "instance_url", "INSTANCE_URL", "namespace", "NAMESPACE", "pipeline_name", "PIPELINE_NAME", "pipeline_id", "PIPELINE_ID", "session", "session"], ["pipeline_status", "hook_async", "get_pipeline_status", "pipeline_name", "PIPELINE_NAME", "instance_url", "INSTANCE_URL", "pipeline_id", "PIPELINE_ID", "namespace", "NAMESPACE"], ["pipeline_status", "hook_async", "get_pipeline_status", "pipeline_name", "PIPELINE_NAME", "instance_url", "INSTANCE_URL", "pipeline_id", "PIPELINE_ID", "namespace", "NAMESPACE"], ["pipeline_status", "hook_async", "get_pipeline_status", "pipeline_name", "PIPELINE_NAME", "instance_url", "INSTANCE_URL", "pipeline_id", "PIPELINE_ID", "namespace", "NAMESPACE"], ["hook_async", "get_pipeline_status", "pipeline_name", "PIPELINE_NAME", "instance_url", "INSTANCE_URL", "pipeline_id", "PIPELINE_ID", "namespace", "NAMESPACE"]], "LOCATION": [["expected", "PROJECT_ID", "LOCATION", "INSTANCE_NAME"], ["hook", "_name", "PROJECT_ID", "LOCATION", "INSTANCE_NAME", "expected"], ["expected", "PROJECT_ID", "LOCATION"], ["hook", "_parent", "PROJECT_ID", "LOCATION", "expected"], ["result", "hook", "restart_instance", "instance_name", "INSTANCE_NAME", "location", "LOCATION", "project_id", "PROJECT_ID"], ["method_mock", "assert_called_once_with", "name", "hook", "_name", "PROJECT_ID", "LOCATION", "INSTANCE_NAME"], ["result", "hook", "delete_instance", "instance_name", "INSTANCE_NAME", "location", "LOCATION", "project_id", "PROJECT_ID"], ["method_mock", "assert_called_once_with", "name", "hook", "_name", "PROJECT_ID", "LOCATION", "INSTANCE_NAME"], ["result", "hook", "create_instance", "instance_name", "INSTANCE_NAME", "instance", "INSTANCE", "location", "LOCATION", "project_id", "PROJECT_ID"], ["method_mock", "assert_called_once_with", "parent", "hook", "_parent", "PROJECT_ID", "LOCATION", "body", "INSTANCE", "instanceId", "INSTANCE_NAME"], ["result", "hook", "patch_instance", "instance_name", "INSTANCE_NAME", "instance", "INSTANCE", "update_mask", "location", "LOCATION", "project_id", "PROJECT_ID"], ["method_mock", "assert_called_once_with", "name", "hook", "_name", "PROJECT_ID", "LOCATION", "INSTANCE_NAME", "body", "INSTANCE", "updateMask"], ["result", "hook", "get_instance", "instance_name", "INSTANCE_NAME", "location", "LOCATION", "project_id", "PROJECT_ID"], ["method_mock", "assert_called_once_with", "name", "hook", "_name", "PROJECT_ID", "LOCATION", "INSTANCE_NAME"]], "NAMESPACE": [["CONSTRUCTED_PIPELINE_URL", "INSTANCE_URL", "NAMESPACE", "PIPELINE_NAME", "PIPELINE_ID"], ["CONSTRUCTED_PIPELINE_URL_GET", "INSTANCE_NAME", "PROJECT_ID", "NAMESPACE", "PIPELINE_NAME", "PIPELINE_ID"], ["hook_async", "get_pipeline", "instance_url", "INSTANCE_URL", "namespace", "NAMESPACE", "pipeline_name", "PIPELINE_NAME", "pipeline_id", "PIPELINE_ID", "session", "session"], ["pipeline_status", "hook_async", "get_pipeline_status", "pipeline_name", "PIPELINE_NAME", "instance_url", "INSTANCE_URL", "pipeline_id", "PIPELINE_ID", "namespace", "NAMESPACE"], ["pipeline_status", "hook_async", "get_pipeline_status", "pipeline_name", "PIPELINE_NAME", "instance_url", "INSTANCE_URL", "pipeline_id", "PIPELINE_ID", "namespace", "NAMESPACE"], ["pipeline_status", "hook_async", "get_pipeline_status", "pipeline_name", "PIPELINE_NAME", "instance_url", "INSTANCE_URL", "pipeline_id", "PIPELINE_ID", "namespace", "NAMESPACE"], ["hook_async", "get_pipeline_status", "pipeline_name", "PIPELINE_NAME", "instance_url", "INSTANCE_URL", "pipeline_id", "PIPELINE_ID", "namespace", "NAMESPACE"]], "PIPELINE": [["hook", "create_pipeline", "pipeline_name", "PIPELINE_NAME", "pipeline", "PIPELINE", "instance_url", "INSTANCE_URL"], ["mock_request", "assert_called_once_with", "url", "INSTANCE_URL", "PIPELINE_NAME", "method", "body", "PIPELINE"], ["hook", "create_pipeline", "pipeline_name", "PIPELINE_NAME", "pipeline", "PIPELINE", "instance_url", "INSTANCE_URL"], ["mock_request", "assert_called_once_with", "url", "INSTANCE_URL", "PIPELINE_NAME", "method", "body", "PIPELINE"], ["hook", "create_pipeline", "pipeline_name", "PIPELINE_NAME", "pipeline", "PIPELINE", "instance_url", "INSTANCE_URL"], ["mock_request", "assert_called_once_with", "url", "INSTANCE_URL", "PIPELINE_NAME", "method", "body", "PIPELINE"]], "PIPELINE_ID": [["CONSTRUCTED_PIPELINE_URL", "INSTANCE_URL", "NAMESPACE", "PIPELINE_NAME", "PIPELINE_ID"], ["CONSTRUCTED_PIPELINE_URL_GET", "INSTANCE_NAME", "PROJECT_ID", "NAMESPACE", "PIPELINE_NAME", "PIPELINE_ID"], ["hook", "get_pipeline_workflow", "pipeline_name", "PIPELINE_NAME", "instance_url", "INSTANCE_URL", "pipeline_id", "PIPELINE_ID"], ["mock_request", "assert_called_once_with", "url", "INSTANCE_URL", "PIPELINE_NAME", "PIPELINE_ID", "method"], ["hook", "get_pipeline_workflow", "pipeline_name", "PIPELINE_NAME", "instance_url", "INSTANCE_URL", "pipeline_id", "PIPELINE_ID"], ["mock_request", "assert_called_once_with", "url", "INSTANCE_URL", "PIPELINE_NAME", "PIPELINE_ID", "method"], ["hook", "get_pipeline_workflow", "pipeline_name", "PIPELINE_NAME", "instance_url", "INSTANCE_URL", "pipeline_id", "PIPELINE_ID"], ["mock_request", "assert_called_once_with", "url", "INSTANCE_URL", "PIPELINE_NAME", "PIPELINE_ID", "method"], ["hook_async", "get_pipeline", "instance_url", "INSTANCE_URL", "namespace", "NAMESPACE", "pipeline_name", "PIPELINE_NAME", "pipeline_id", "PIPELINE_ID", "session", "session"], ["pipeline_status", "hook_async", "get_pipeline_status", "pipeline_name", "PIPELINE_NAME", "instance_url", "INSTANCE_URL", "pipeline_id", "PIPELINE_ID", "namespace", "NAMESPACE"], ["pipeline_status", "hook_async", "get_pipeline_status", "pipeline_name", "PIPELINE_NAME", "instance_url", "INSTANCE_URL", "pipeline_id", "PIPELINE_ID", "namespace", "NAMESPACE"], ["pipeline_status", "hook_async", "get_pipeline_status", "pipeline_name", "PIPELINE_NAME", "instance_url", "INSTANCE_URL", "pipeline_id", "PIPELINE_ID", "namespace", "NAMESPACE"], ["hook_async", "get_pipeline_status", "pipeline_name", "PIPELINE_NAME", "instance_url", "INSTANCE_URL", "pipeline_id", "PIPELINE_ID", "namespace", "NAMESPACE"]], "PIPELINE_NAME": [["CONSTRUCTED_PIPELINE_URL", "INSTANCE_URL", "NAMESPACE", "PIPELINE_NAME", "PIPELINE_ID"], ["CONSTRUCTED_PIPELINE_URL_GET", "INSTANCE_NAME", "PROJECT_ID", "NAMESPACE", "PIPELINE_NAME", "PIPELINE_ID"], ["hook", "create_pipeline", "pipeline_name", "PIPELINE_NAME", "pipeline", "PIPELINE", "instance_url", "INSTANCE_URL"], ["mock_request", "assert_called_once_with", "url", "INSTANCE_URL", "PIPELINE_NAME", "method", "body", "PIPELINE"], ["hook", "create_pipeline", "pipeline_name", "PIPELINE_NAME", "pipeline", "PIPELINE", "instance_url", "INSTANCE_URL"], ["mock_request", "assert_called_once_with", "url", "INSTANCE_URL", "PIPELINE_NAME", "method", "body", "PIPELINE"], ["hook", "create_pipeline", "pipeline_name", "PIPELINE_NAME", "pipeline", "PIPELINE", "instance_url", "INSTANCE_URL"], ["mock_request", "assert_called_once_with", "url", "INSTANCE_URL", "PIPELINE_NAME", "method", "body", "PIPELINE"], ["hook", "delete_pipeline", "pipeline_name", "PIPELINE_NAME", "instance_url", "INSTANCE_URL"], ["mock_request", "assert_called_once_with", "url", "INSTANCE_URL", "PIPELINE_NAME", "method", "body", "None"], ["hook", "delete_pipeline", "pipeline_name", "PIPELINE_NAME", "instance_url", "INSTANCE_URL"], ["mock_request", "assert_called_once_with", "url", "INSTANCE_URL", "PIPELINE_NAME", "method", "body", "None"], ["hook", "delete_pipeline", "pipeline_name", "PIPELINE_NAME", "instance_url", "INSTANCE_URL"], ["mock_request", "assert_called_once_with", "url", "INSTANCE_URL", "PIPELINE_NAME", "method", "body", "None"], ["hook", "start_pipeline", "pipeline_name", "PIPELINE_NAME", "instance_url", "INSTANCE_URL", "runtime_args", "RUNTIME_ARGS"], ["body", "PIPELINE_NAME", "RUNTIME_ARGS"], ["hook", "start_pipeline", "pipeline_name", "PIPELINE_NAME", "instance_url", "INSTANCE_URL", "runtime_args", "RUNTIME_ARGS"], ["body", "PIPELINE_NAME", "RUNTIME_ARGS"], ["hook", "start_pipeline", "pipeline_name", "PIPELINE_NAME", "instance_url", "INSTANCE_URL", "runtime_args", "RUNTIME_ARGS"], ["body", "PIPELINE_NAME", "RUNTIME_ARGS"], ["hook", "stop_pipeline", "pipeline_name", "PIPELINE_NAME", "instance_url", "INSTANCE_URL"], ["mock_request", "assert_called_once_with", "url", "INSTANCE_URL", "PIPELINE_NAME", "method"], ["hook", "stop_pipeline", "pipeline_name", "PIPELINE_NAME", "instance_url", "INSTANCE_URL"], ["mock_request", "assert_called_once_with", "url", "INSTANCE_URL", "PIPELINE_NAME", "method"], ["hook", "stop_pipeline", "pipeline_name", "PIPELINE_NAME", "instance_url", "INSTANCE_URL"], ["mock_request", "assert_called_once_with", "url", "INSTANCE_URL", "PIPELINE_NAME", "method"], ["hook", "get_pipeline_workflow", "pipeline_name", "PIPELINE_NAME", "instance_url", "INSTANCE_URL", "pipeline_id", "PIPELINE_ID"], ["mock_request", "assert_called_once_with", "url", "INSTANCE_URL", "PIPELINE_NAME", "PIPELINE_ID", "method"], ["hook", "get_pipeline_workflow", "pipeline_name", "PIPELINE_NAME", "instance_url", "INSTANCE_URL", "pipeline_id", "PIPELINE_ID"], ["mock_request", "assert_called_once_with", "url", "INSTANCE_URL", "PIPELINE_NAME", "PIPELINE_ID", "method"], ["hook", "get_pipeline_workflow", "pipeline_name", "PIPELINE_NAME", "instance_url", "INSTANCE_URL", "pipeline_id", "PIPELINE_ID"], ["mock_request", "assert_called_once_with", "url", "INSTANCE_URL", "PIPELINE_NAME", "PIPELINE_ID", "method"], ["hook_async", "get_pipeline", "instance_url", "INSTANCE_URL", "namespace", "NAMESPACE", "pipeline_name", "PIPELINE_NAME", "pipeline_id", "PIPELINE_ID", "session", "session"], ["pipeline_status", "hook_async", "get_pipeline_status", "pipeline_name", "PIPELINE_NAME", "instance_url", "INSTANCE_URL", "pipeline_id", "PIPELINE_ID", "namespace", "NAMESPACE"], ["pipeline_status", "hook_async", "get_pipeline_status", "pipeline_name", "PIPELINE_NAME", "instance_url", "INSTANCE_URL", "pipeline_id", "PIPELINE_ID", "namespace", "NAMESPACE"], ["pipeline_status", "hook_async", "get_pipeline_status", "pipeline_name", "PIPELINE_NAME", "instance_url", "INSTANCE_URL", "pipeline_id", "PIPELINE_ID", "namespace", "NAMESPACE"], ["hook_async", "get_pipeline_status", "pipeline_name", "PIPELINE_NAME", "instance_url", "INSTANCE_URL", "pipeline_id", "PIPELINE_ID", "namespace", "NAMESPACE"]], "PROJECT_ID": [["CONSTRUCTED_PIPELINE_URL_GET", "INSTANCE_NAME", "PROJECT_ID", "NAMESPACE", "PIPELINE_NAME", "PIPELINE_ID"], ["expected", "PROJECT_ID", "LOCATION", "INSTANCE_NAME"], ["hook", "_name", "PROJECT_ID", "LOCATION", "INSTANCE_NAME", "expected"], ["expected", "PROJECT_ID", "LOCATION"], ["hook", "_parent", "PROJECT_ID", "LOCATION", "expected"], ["result", "hook", "restart_instance", "instance_name", "INSTANCE_NAME", "location", "LOCATION", "project_id", "PROJECT_ID"], ["method_mock", "assert_called_once_with", "name", "hook", "_name", "PROJECT_ID", "LOCATION", "INSTANCE_NAME"], ["result", "hook", "delete_instance", "instance_name", "INSTANCE_NAME", "location", "LOCATION", "project_id", "PROJECT_ID"], ["method_mock", "assert_called_once_with", "name", "hook", "_name", "PROJECT_ID", "LOCATION", "INSTANCE_NAME"], ["result", "hook", "create_instance", "instance_name", "INSTANCE_NAME", "instance", "INSTANCE", "location", "LOCATION", "project_id", "PROJECT_ID"], ["method_mock", "assert_called_once_with", "parent", "hook", "_parent", "PROJECT_ID", "LOCATION", "body", "INSTANCE", "instanceId", "INSTANCE_NAME"], ["result", "hook", "patch_instance", "instance_name", "INSTANCE_NAME", "instance", "INSTANCE", "update_mask", "location", "LOCATION", "project_id", "PROJECT_ID"], ["method_mock", "assert_called_once_with", "name", "hook", "_name", "PROJECT_ID", "LOCATION", "INSTANCE_NAME", "body", "INSTANCE", "updateMask"], ["result", "hook", "get_instance", "instance_name", "INSTANCE_NAME", "location", "LOCATION", "project_id", "PROJECT_ID"], ["method_mock", "assert_called_once_with", "name", "hook", "_name", "PROJECT_ID", "LOCATION", "INSTANCE_NAME"]], "RUNTIME_ARGS": [["hook", "start_pipeline", "pipeline_name", "PIPELINE_NAME", "instance_url", "INSTANCE_URL", "runtime_args", "RUNTIME_ARGS"], ["body", "PIPELINE_NAME", "RUNTIME_ARGS"], ["hook", "start_pipeline", "pipeline_name", "PIPELINE_NAME", "instance_url", "INSTANCE_URL", "runtime_args", "RUNTIME_ARGS"], ["body", "PIPELINE_NAME", "RUNTIME_ARGS"], ["hook", "start_pipeline", "pipeline_name", "PIPELINE_NAME", "instance_url", "INSTANCE_URL", "runtime_args", "RUNTIME_ARGS"], ["body", "PIPELINE_NAME", "RUNTIME_ARGS"]]}, "no_types_annot": {"D": 0, "I": 0, "U": 159}, "session_id": "QbBIFZVSfTCleo-1qFT4mC-ForrcVJG4zv4Z38DUVAk", "set": null, "tc": [false, null], "type_annot_cove": 0.0, "typed_seq": "", "untyped_seq": "", "variables": {"API_VERSION": "", "CONSTRUCTED_PIPELINE_URL": "", "CONSTRUCTED_PIPELINE_URL_GET": "", "GCP_CONN_ID": "", "HOOK_STR": "", "INSTANCE": "", "INSTANCE_NAME": "", "INSTANCE_URL": "", "LOCATION": "", "NAMESPACE": "", "PIPELINE": "", "PIPELINE_ID": "", "PIPELINE_NAME": "", "PROJECT_ID": "", "RUNTIME_ARGS": ""}, "variables_p": {"API_VERSION": [["str", 0.6], ["List[int]", 0.1], ["bool", 0.1], ["Union[int, str]", 0.1], ["int", 0.1]], "CONSTRUCTED_PIPELINE_URL": [["str", 0.9159893165306461], ["list", 0.08401068346935377]], "CONSTRUCTED_PIPELINE_URL_GET": [["mock._patch[Union[mock.AsyncMock, mock.MagicMock]]", 0.32601537964343064], ["Dict[str, Union[Any, Any, Any, Any]]", 0.20656083477636014], ["Dict[str, Union[Any, int]]", 0.09175937539076573], ["dict", 0.08660844313207199], ["Dict[str, List[str]]", 0.08427595271531968]], "GCP_CONN_ID": [["int", 0.489065704953108], ["Dict[str, str]", 0.1406085380561041], ["bytes", 0.10802897462504996], ["list", 0.09557371584477412]], "HOOK_STR": [["str", 0.6], ["Type[Optional[str]]", 0.2], ["property", 0.1]], "INSTANCE": [["str", 0.21185294922908166], ["utils.sap_hana.ParsedSection", 0.10000717312637813]], "INSTANCE_NAME": [["str", 0.7213955405986169], ["Set[str]", 0.10316291035568347], ["list", 0.08875851036505573], ["List[str]", 0.08668303868064388]], "INSTANCE_URL": [["str", 0.9999999999999999]], "LOCATION": [["Dict[str, Any]", 0.20208388663546364], ["str", 0.16689153371927395], ["List[Tuple[str, bytes]]", 0.11168954355435994]], "NAMESPACE": [["str", 0.49686910138033824], ["list", 0.12335685318992305], ["dict", 0.09274473840809264], ["Tuple[Any, Any]", 0.09234531026965934], ["Dict[str, Tuple[str, str, str]]", 0.08742766603161164]], "PIPELINE": [["str", 0.3941856322676282], ["list", 0.12322730495058092], ["Optional[str]", 0.11293399342539366], ["Dict[str, Union[Any, Any, Any, Any]]", 0.09688968964102414], ["int", 0.08353669009680875]], "PIPELINE_ID": [["str", 0.8033200018124408]], "PIPELINE_NAME": [["str", 0.8825217218338904], ["List[str]", 0.11747827816610965]], "PROJECT_ID": [["str", 0.9999999999999999]], "RUNTIME_ARGS": [["str", 0.26177296179786896], ["List[Tuple[str, Any]]", 0.21581244263558136], ["List[str]", 0.13928984053491938], ["Tuple[Literal]", 0.12993464195201607], ["dict", 0.08534001094596258], ["Dict[str, Dict[str, Any]]", 0.07999716909148356]]}}}