{"error": null, "response": {"classes": [{"cls_lc": [[44, 0], [860, 9]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[45, 4], [47, 83]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_delegate_to_runtime_error", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestMLEngineHook.test_delegate_to_runtime_error", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[49, 4], [50, 39]], "fn_var_ln": {"hook": [[50, 8], [50, 17]]}, "fn_var_occur": {"hook": [["self", "hook", "hook", "MLEngineHook"]]}, "name": "setup_method", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "hook", "hook", "MLEngineHook"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestMLEngineHook.setup_method", "ret_exprs": [], "ret_type": "", "variables": {"hook": ""}, "variables_p": {"hook": [["str", 0.30000000000000004], ["Dict[str, Any]", 0.1], ["dict", 0.1], ["int", 0.1]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[54, 4], [58, 106]], "fn_var_ln": {"result": [[55, 8], [55, 14]]}, "fn_var_occur": {"result": [["result", "self", "hook", "get_conn"], ["mock_build", "return_value", "result"]]}, "name": "test_mle_engine_client_creation", "params": {"mock_authorize": "", "mock_build": "", "self": ""}, "params_descr": {"mock_authorize": "", "mock_build": "", "self": ""}, "params_occur": {"mock_authorize": [["mock_build", "assert_called_with", "http", "mock_authorize", "return_value", "cache_discovery", "False"]], "mock_build": [["mock_build", "return_value", "result"], ["mock_build", "assert_called_with", "http", "mock_authorize", "return_value", "cache_discovery", "False"]], "self": [["result", "self", "hook", "get_conn"]]}, "params_p": {"args": [], "kwargs": [], "mock_authorize": [], "mock_build": [], "self": []}, "q_name": "TestMLEngineHook.test_mle_engine_client_creation", "ret_exprs": [], "ret_type": "", "variables": {"result": ""}, "variables_p": {"result": [["list", 0.8797665722654332]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[61, 4], [107, 9]], "fn_var_ln": {"create_version_response": [[90, 8], [90, 31]], "model_name": [[63, 8], [63, 18]], "model_path": [[71, 8], [71, 18]], "operation_done": [[72, 8], [72, 22]], "operation_path": [[70, 8], [70, 22]], "project_id": [[62, 8], [62, 18]], "version": [[65, 8], [65, 15]], "version_name": [[64, 8], [64, 20]], "version_with_airflow_version": [[66, 8], [66, 36]]}, "fn_var_occur": {"create_version_response": [["create_version_response", "self", "hook", "create_version", "project_id", "project_id", "model_name", "model_name", "version_spec", "deepcopy", "version"], ["create_version_response", "operation_done"]], "model_name": [["model_path", "project_id", "model_name"], ["create_version_response", "self", "hook", "create_version", "project_id", "project_id", "model_name", "model_name", "version_spec", "deepcopy", "version"]], "model_path": [["model_path", "project_id", "model_name"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "models", "versions", "create", "body", "version_with_airflow_version", "parent", "model_path", "mock", "call", "projects", "models", "versions", "create", "execute", "num_retries", "mock", "call", "projects", "operations", "get", "name", "version_name", "any_order", "True"]], "operation_done": [["operation_done", "operation_path", "True"], ["create_version_response", "operation_done"]], "operation_path": [["operation_path", "project_id"], ["operation_done", "operation_path", "True"], ["mock_get_conn", "return_value", "projects", "return_value", "operations", "return_value", "get", "return_value", "execute", "return_value", "operation_path", "True"]], "project_id": [["operation_path", "project_id"], ["model_path", "project_id", "model_name"], ["create_version_response", "self", "hook", "create_version", "project_id", "project_id", "model_name", "model_name", "version_spec", "deepcopy", "version"]], "version": [["version", "version_name"], ["mock_get_conn", "return_value", "projects", "return_value", "models", "return_value", "versions", "return_value", "create", "return_value", "execute", "return_value", "version"], ["create_version_response", "self", "hook", "create_version", "project_id", "project_id", "model_name", "model_name", "version_spec", "deepcopy", "version"]], "version_name": [["version", "version_name"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "models", "versions", "create", "body", "version_with_airflow_version", "parent", "model_path", "mock", "call", "projects", "models", "versions", "create", "execute", "num_retries", "mock", "call", "projects", "operations", "get", "name", "version_name", "any_order", "True"]], "version_with_airflow_version": [["version_with_airflow_version", "hook", "_AIRFLOW_VERSION"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "models", "versions", "create", "body", "version_with_airflow_version", "parent", "model_path", "mock", "call", "projects", "models", "versions", "create", "execute", "num_retries", "mock", "call", "projects", "operations", "get", "name", "version_name", "any_order", "True"]]}, "name": "test_create_version", "params": {"mock_get_conn": "", "self": ""}, "params_descr": {"mock_get_conn": "", "self": ""}, "params_occur": {"mock_get_conn": [["mock_get_conn", "return_value", "projects", "return_value", "models", "return_value", "versions", "return_value", "create", "return_value", "execute", "return_value", "version"], ["mock_get_conn", "return_value", "projects", "return_value", "operations", "return_value", "get", "return_value", "execute", "return_value", "operation_path", "True"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "models", "versions", "create", "body", "version_with_airflow_version", "parent", "model_path", "mock", "call", "projects", "models", "versions", "create", "execute", "num_retries", "mock", "call", "projects", "operations", "get", "name", "version_name", "any_order", "True"]], "self": [["create_version_response", "self", "hook", "create_version", "project_id", "project_id", "model_name", "model_name", "version_spec", "deepcopy", "version"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_conn": [["mock.MagicMock", 0.4075249745901325]], "self": []}, "q_name": "TestMLEngineHook.test_create_version", "ret_exprs": [], "ret_type": "", "variables": {"create_version_response": "", "model_name": "", "model_path": "", "operation_done": "", "operation_path": "", "project_id": "", "version": "", "version_name": "", "version_with_airflow_version": ""}, "variables_p": {"create_version_response": [["Dict[str, int]", 0.36397007791736413], ["str", 0.32092910195618685], ["List[google.cloud.bigquery.ScalarQueryParameter]", 0.10804510257903274], ["int", 0.10670473505099247], ["List[Tuple[str, str]]", 0.10035098249642363]], "model_name": [["str", 1.0000000000000002]], "model_path": [["str", 0.7360767402272689], ["Optional[str]", 0.09135313753971691], ["Dict[str, str]", 0.084070683968599]], "operation_done": [["int", 0.33729956881499873], ["str", 0.19627218865796947], ["List[Tuple[str, Any]]", 0.1305258874953459]], "operation_path": [["str", 0.9999999999999998]], "project_id": [["str", 0.820731055577659], ["int", 0.08977836788474731], ["bytes", 0.0894905765375937]], "version": [["str", 0.7847232470550749], ["bytes", 0.21527675294492502]], "version_name": [["str", 0.9054079256306011]], "version_with_airflow_version": [["str", 0.41634874696914526], ["Dict[Any, Union[int, str]]", 0.10376586901820192]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[110, 4], [159, 9]], "fn_var_ln": {"create_version_response": [[139, 8], [139, 31]], "model_name": [[112, 8], [112, 18]], "model_path": [[120, 8], [120, 18]], "operation_done": [[121, 8], [121, 22]], "operation_path": [[119, 8], [119, 22]], "project_id": [[111, 8], [111, 18]], "version": [[114, 8], [114, 15]], "version_name": [[113, 8], [113, 20]], "version_with_airflow_version": [[115, 8], [115, 36]]}, "fn_var_occur": {"create_version_response": [["create_version_response", "self", "hook", "create_version", "project_id", "project_id", "model_name", "model_name", "version_spec", "deepcopy", "version"], ["create_version_response", "operation_done"]], "model_name": [["model_path", "project_id", "model_name"], ["create_version_response", "self", "hook", "create_version", "project_id", "project_id", "model_name", "model_name", "version_spec", "deepcopy", "version"]], "model_path": [["model_path", "project_id", "model_name"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "models", "versions", "create", "body", "version_with_airflow_version", "parent", "model_path", "mock", "call", "projects", "models", "versions", "create", "execute", "num_retries", "mock", "call", "projects", "operations", "get", "name", "version_name", "any_order", "True"]], "operation_done": [["operation_done", "operation_path", "True"], ["create_version_response", "operation_done"]], "operation_path": [["operation_path", "project_id"], ["operation_done", "operation_path", "True"], ["mock_get_conn", "return_value", "projects", "return_value", "operations", "return_value", "get", "return_value", "execute", "return_value", "operation_path", "True"]], "project_id": [["operation_path", "project_id"], ["model_path", "project_id", "model_name"], ["create_version_response", "self", "hook", "create_version", "project_id", "project_id", "model_name", "model_name", "version_spec", "deepcopy", "version"]], "version": [["version", "version_name"], ["mock_get_conn", "return_value", "projects", "return_value", "models", "return_value", "versions", "return_value", "create", "return_value", "execute", "return_value", "version"], ["create_version_response", "self", "hook", "create_version", "project_id", "project_id", "model_name", "model_name", "version_spec", "deepcopy", "version"]], "version_name": [["version", "version_name"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "models", "versions", "create", "body", "version_with_airflow_version", "parent", "model_path", "mock", "call", "projects", "models", "versions", "create", "execute", "num_retries", "mock", "call", "projects", "operations", "get", "name", "version_name", "any_order", "True"]], "version_with_airflow_version": [["version_with_airflow_version", "hook", "_AIRFLOW_VERSION"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "models", "versions", "create", "body", "version_with_airflow_version", "parent", "model_path", "mock", "call", "projects", "models", "versions", "create", "execute", "num_retries", "mock", "call", "projects", "operations", "get", "name", "version_name", "any_order", "True"]]}, "name": "test_create_version_with_labels", "params": {"mock_get_conn": "", "self": ""}, "params_descr": {"mock_get_conn": "", "self": ""}, "params_occur": {"mock_get_conn": [["mock_get_conn", "return_value", "projects", "return_value", "models", "return_value", "versions", "return_value", "create", "return_value", "execute", "return_value", "version"], ["mock_get_conn", "return_value", "projects", "return_value", "operations", "return_value", "get", "return_value", "execute", "return_value", "operation_path", "True"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "models", "versions", "create", "body", "version_with_airflow_version", "parent", "model_path", "mock", "call", "projects", "models", "versions", "create", "execute", "num_retries", "mock", "call", "projects", "operations", "get", "name", "version_name", "any_order", "True"]], "self": [["create_version_response", "self", "hook", "create_version", "project_id", "project_id", "model_name", "model_name", "version_spec", "deepcopy", "version"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_conn": [["mock.MagicMock", 0.3117003945396063]], "self": []}, "q_name": "TestMLEngineHook.test_create_version_with_labels", "ret_exprs": [], "ret_type": "", "variables": {"create_version_response": "", "model_name": "", "model_path": "", "operation_done": "", "operation_path": "", "project_id": "", "version": "", "version_name": "", "version_with_airflow_version": ""}, "variables_p": {"create_version_response": [["Dict[str, int]", 0.36397007791736413], ["str", 0.32092910195618685], ["List[google.cloud.bigquery.ScalarQueryParameter]", 0.10804510257903274], ["int", 0.10670473505099247], ["List[Tuple[str, str]]", 0.10035098249642363]], "model_name": [["str", 1.0000000000000002]], "model_path": [["str", 0.7360767402272689], ["Optional[str]", 0.09135313753971691], ["Dict[str, str]", 0.084070683968599]], "operation_done": [["int", 0.33729956881499873], ["str", 0.19627218865796947], ["List[Tuple[str, Any]]", 0.1305258874953459]], "operation_path": [["str", 0.9999999999999998]], "project_id": [["str", 0.820731055577659], ["int", 0.08977836788474731], ["bytes", 0.0894905765375937]], "version": [["str", 0.7847232470550749], ["bytes", 0.21527675294492502]], "version_name": [["str", 0.9054079256306011]], "version_with_airflow_version": [["str", 0.41634874696914526], ["Dict[Any, Union[int, str]]", 0.10376586901820192]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[162, 4], [191, 9]], "fn_var_ln": {"model_name": [[164, 8], [164, 18]], "operation_done": [[168, 8], [168, 22]], "operation_path": [[166, 8], [166, 22]], "project_id": [[163, 8], [163, 18]], "set_default_version_response": [[179, 8], [179, 36]], "version_name": [[165, 8], [165, 20]], "version_path": [[167, 8], [167, 20]]}, "fn_var_occur": {"model_name": [["version_path", "project_id", "model_name", "version_name"], ["set_default_version_response", "self", "hook", "set_default_version", "project_id", "project_id", "model_name", "model_name", "version_name", "version_name"]], "operation_done": [["operation_done", "operation_path", "True"], ["mock_get_conn", "return_value", "projects", "return_value", "models", "return_value", "versions", "return_value", "setDefault", "return_value", "execute", "return_value", "operation_done"], ["set_default_version_response", "operation_done"]], "operation_path": [["operation_path", "project_id"], ["operation_done", "operation_path", "True"]], "project_id": [["operation_path", "project_id"], ["version_path", "project_id", "model_name", "version_name"], ["set_default_version_response", "self", "hook", "set_default_version", "project_id", "project_id", "model_name", "model_name", "version_name", "version_name"]], "set_default_version_response": [["set_default_version_response", "self", "hook", "set_default_version", "project_id", "project_id", "model_name", "model_name", "version_name", "version_name"], ["set_default_version_response", "operation_done"]], "version_name": [["version_path", "project_id", "model_name", "version_name"], ["set_default_version_response", "self", "hook", "set_default_version", "project_id", "project_id", "model_name", "model_name", "version_name", "version_name"]], "version_path": [["version_path", "project_id", "model_name", "version_name"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "models", "versions", "setDefault", "body", "name", "version_path", "mock", "call", "projects", "models", "versions", "setDefault", "execute", "num_retries", "any_order", "True"]]}, "name": "test_set_default_version", "params": {"mock_get_conn": "", "self": ""}, "params_descr": {"mock_get_conn": "", "self": ""}, "params_occur": {"mock_get_conn": [["mock_get_conn", "return_value", "projects", "return_value", "models", "return_value", "versions", "return_value", "setDefault", "return_value", "execute", "return_value", "operation_done"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "models", "versions", "setDefault", "body", "name", "version_path", "mock", "call", "projects", "models", "versions", "setDefault", "execute", "num_retries", "any_order", "True"]], "self": [["set_default_version_response", "self", "hook", "set_default_version", "project_id", "project_id", "model_name", "model_name", "version_name", "version_name"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_conn": [["mock.MagicMock", 0.38543087768345075]], "self": []}, "q_name": "TestMLEngineHook.test_set_default_version", "ret_exprs": [], "ret_type": "", "variables": {"model_name": "", "operation_done": "", "operation_path": "", "project_id": "", "set_default_version_response": "", "version_name": "", "version_path": ""}, "variables_p": {"model_name": [["str", 1.0000000000000002]], "operation_done": [["int", 0.3941368551738269], ["str", 0.2990217421681408], ["Dict[str, Union[int, str]]", 0.1069564724104897], ["list", 0.10254125076982253], ["bytes", 0.09734367947771982]], "operation_path": [["str", 0.5011953142018956]], "project_id": [["str", 0.9999999999999999]], "set_default_version_response": [["str", 0.9012998286413484], ["Dict[str, Dict[str, Any]]", 0.09870017135865151]], "version_name": [["str", 0.9999999999999998]], "version_path": [["str", 0.9160981541623711]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[195, 4], [235, 9]], "fn_var_ln": {"list_versions_response": [[217, 8], [217, 30]], "model_name": [[197, 8], [197, 18]], "model_path": [[198, 8], [198, 18]], "pages_requests": [[205, 8], [205, 22]], "project_id": [[196, 8], [196, 18]], "response_bodies": [[200, 8], [200, 23]], "version_names": [[199, 8], [199, 21]], "versions_mock": [[206, 8], [206, 21]]}, "fn_var_occur": {"list_versions_response": [["list_versions_response", "self", "hook", "list_versions", "project_id", "project_id", "model_name", "model_name"], ["list_versions_response", "version_names"]], "model_name": [["model_path", "project_id", "model_name"], ["list_versions_response", "self", "hook", "list_versions", "project_id", "project_id", "model_name", "model_name"]], "model_path": [["model_path", "project_id", "model_name"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "models", "versions", "list", "pageSize", "parent", "model_path", "mock", "call", "projects", "models", "versions", "list", "execute", "num_retries", "mock", "call", "projects", "models", "versions", "list_next", "previous_request", "pages_requests", "i", "previous_response", "response_bodies", "i", "i", "range", "any_order", "True"]], "pages_requests": [["pages_requests", "mock", "Mock", "body", "body", "response_bodies"], ["versions_mock", "mock", "Mock", "pages_requests", "pages_requests", "None"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "models", "versions", "list", "pageSize", "parent", "model_path", "mock", "call", "projects", "models", "versions", "list", "execute", "num_retries", "mock", "call", "projects", "models", "versions", "list_next", "previous_request", "pages_requests", "i", "previous_response", "response_bodies", "i", "i", "range", "any_order", "True"]], "project_id": [["model_path", "project_id", "model_name"], ["list_versions_response", "self", "hook", "list_versions", "project_id", "project_id", "model_name", "model_name"]], "response_bodies": [["response_bodies", "ix", "ver", "ix", "ver", "enumerate", "version_names"], ["response_bodies", "pop"], ["pages_requests", "mock", "Mock", "body", "body", "response_bodies"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "models", "versions", "list", "pageSize", "parent", "model_path", "mock", "call", "projects", "models", "versions", "list", "execute", "num_retries", "mock", "call", "projects", "models", "versions", "list_next", "previous_request", "pages_requests", "i", "previous_response", "response_bodies", "i", "i", "range", "any_order", "True"]], "version_names": [["version_names", "ix", "ix", "range"], ["response_bodies", "ix", "ver", "ix", "ver", "enumerate", "version_names"], ["list_versions_response", "version_names"]], "versions_mock": [["versions_mock", "mock", "Mock", "pages_requests", "pages_requests", "None"], ["mock_get_conn", "return_value", "projects", "return_value", "models", "return_value", "versions", "return_value", "versions_mock"]]}, "name": "test_list_versions", "params": {"mock_get_conn": "", "mock_sleep": "", "self": ""}, "params_descr": {"mock_get_conn": "", "mock_sleep": "", "self": ""}, "params_occur": {"mock_get_conn": [["mock_get_conn", "return_value", "projects", "return_value", "models", "return_value", "versions", "return_value", "versions_mock"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "models", "versions", "list", "pageSize", "parent", "model_path", "mock", "call", "projects", "models", "versions", "list", "execute", "num_retries", "mock", "call", "projects", "models", "versions", "list_next", "previous_request", "pages_requests", "i", "previous_response", "response_bodies", "i", "i", "range", "any_order", "True"]], "mock_sleep": [], "self": [["list_versions_response", "self", "hook", "list_versions", "project_id", "project_id", "model_name", "model_name"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_conn": [], "mock_sleep": [["mock.MagicMock", 0.3748210873115492]], "self": []}, "q_name": "TestMLEngineHook.test_list_versions", "ret_exprs": [], "ret_type": "", "variables": {"list_versions_response": "", "model_name": "", "model_path": "", "pages_requests": "", "project_id": "", "response_bodies": "", "version_names": "", "versions_mock": ""}, "variables_p": {"list_versions_response": [["str", 0.386842302699351], ["Dict[str, Dict[str, Any]]", 0.11823953950528084], ["Dict[str, List[Any]]", 0.10907346838693421], ["List[str]", 0.10382989241673357]], "model_name": [["str", 1.0]], "model_path": [["str", 0.8131029653600286], ["Optional[str]", 0.09654165737851227]], "pages_requests": [["str", 0.13872945030140382], ["int", 0.09462998008231625], ["mock.MagicMock", 0.089206611811792]], "project_id": [["str", 0.9999999999999997]], "response_bodies": [["Dict[str, Dict[str, Any]]", 0.19298512744425275], ["Dict[str, str]", 0.10686486280864801], ["Dict[str, Any]", 0.09712890946414546], ["raiden.utils.list", 0.09287836509024293]], "version_names": [["str", 0.6782473813607868], ["Set[str]", 0.1282146183251071], ["dict", 0.09601085921441571]], "versions_mock": [["mock.Mock", 0.30592871187592485]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[238, 4], [278, 9]], "fn_var_ln": {"delete_version_response": [[265, 8], [265, 31]], "model_name": [[240, 8], [240, 18]], "operation_done": [[246, 8], [246, 22]], "operation_not_done": [[245, 8], [245, 26]], "operation_path": [[242, 8], [242, 22]], "project_id": [[239, 8], [239, 18]], "version": [[244, 8], [244, 15]], "version_name": [[241, 8], [241, 20]], "version_path": [[243, 8], [243, 20]]}, "fn_var_occur": {"delete_version_response": [["delete_version_response", "self", "hook", "delete_version", "project_id", "project_id", "model_name", "model_name", "version_name", "version_name"], ["delete_version_response", "operation_done"]], "model_name": [["version_path", "project_id", "model_name", "version_name"], ["delete_version_response", "self", "hook", "delete_version", "project_id", "project_id", "model_name", "model_name", "version_name", "version_name"]], "operation_done": [["operation_done", "operation_path", "True"], ["mock_get_conn", "return_value", "projects", "return_value", "operations", "return_value", "get", "return_value", "execute", "side_effect", "operation_not_done", "operation_done"], ["delete_version_response", "operation_done"]], "operation_not_done": [["operation_not_done", "operation_path", "False"], ["mock_get_conn", "return_value", "projects", "return_value", "operations", "return_value", "get", "return_value", "execute", "side_effect", "operation_not_done", "operation_done"]], "operation_path": [["operation_path", "project_id"], ["version", "operation_path"], ["operation_not_done", "operation_path", "False"], ["operation_done", "operation_path", "True"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "models", "versions", "delete", "name", "version_path", "mock", "call", "projects", "models", "versions", "delete", "execute", "num_retries", "mock", "call", "projects", "operations", "get", "name", "operation_path", "mock", "call", "projects", "operations", "get", "execute", "num_retries", "any_order", "True"]], "project_id": [["operation_path", "project_id"], ["version_path", "project_id", "model_name", "version_name"], ["delete_version_response", "self", "hook", "delete_version", "project_id", "project_id", "model_name", "model_name", "version_name", "version_name"]], "version": [["version", "operation_path"], ["mock_get_conn", "return_value", "projects", "return_value", "models", "return_value", "versions", "return_value", "delete", "return_value", "execute", "return_value", "version"]], "version_name": [["version_path", "project_id", "model_name", "version_name"], ["delete_version_response", "self", "hook", "delete_version", "project_id", "project_id", "model_name", "model_name", "version_name", "version_name"]], "version_path": [["version_path", "project_id", "model_name", "version_name"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "models", "versions", "delete", "name", "version_path", "mock", "call", "projects", "models", "versions", "delete", "execute", "num_retries", "mock", "call", "projects", "operations", "get", "name", "operation_path", "mock", "call", "projects", "operations", "get", "execute", "num_retries", "any_order", "True"]]}, "name": "test_delete_version", "params": {"mock_get_conn": "", "self": ""}, "params_descr": {"mock_get_conn": "", "self": ""}, "params_occur": {"mock_get_conn": [["mock_get_conn", "return_value", "projects", "return_value", "operations", "return_value", "get", "return_value", "execute", "side_effect", "operation_not_done", "operation_done"], ["mock_get_conn", "return_value", "projects", "return_value", "models", "return_value", "versions", "return_value", "delete", "return_value", "execute", "return_value", "version"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "models", "versions", "delete", "name", "version_path", "mock", "call", "projects", "models", "versions", "delete", "execute", "num_retries", "mock", "call", "projects", "operations", "get", "name", "operation_path", "mock", "call", "projects", "operations", "get", "execute", "num_retries", "any_order", "True"]], "self": [["delete_version_response", "self", "hook", "delete_version", "project_id", "project_id", "model_name", "model_name", "version_name", "version_name"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_conn": [["mock.MagicMock", 0.2793943738244975]], "self": []}, "q_name": "TestMLEngineHook.test_delete_version", "ret_exprs": [], "ret_type": "", "variables": {"delete_version_response": "", "model_name": "", "operation_done": "", "operation_not_done": "", "operation_path": "", "project_id": "", "version": "", "version_name": "", "version_path": ""}, "variables_p": {"delete_version_response": [["Dict[str, int]", 0.49500534546972], ["int", 0.3063508092568439], ["str", 0.09734967135414417]], "model_name": [["str", 0.903210927084428], ["Optional[str]", 0.09678907291557198]], "operation_done": [["float", 0.4472971118394042], ["int", 0.18855944597130214], ["list", 0.1194139568944103], ["Dict[str, Union[Any, Any, Any, Any]]", 0.08433936071519392], ["str", 0.08037754578290363], ["Dict[int, Any]", 0.08001257879678585]], "operation_not_done": [["Dict[str, str]", 0.60825052764484], ["int", 0.3917494723551599]], "operation_path": [["str", 0.6809479976067976], ["Optional[str]", 0.11628920507669681]], "project_id": [["str", 1.0]], "version": [["str", 1.0]], "version_name": [["str", 0.49828637464336223], ["Optional[str]", 0.2068769164860614], ["dict", 0.10147888183152005], ["Set[str]", 0.10119643274979902], ["Dict[str, str]", 0.09216139428925721]], "version_path": [["str", 0.742101052360747], ["Dict[str, str]", 0.08665802170848745]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[281, 4], [309, 9]], "fn_var_ln": {"create_model_response": [[301, 8], [301, 29]], "model": [[284, 8], [284, 13]], "model_name": [[283, 8], [283, 18]], "model_with_airflow_version": [[287, 8], [287, 34]], "project_id": [[282, 8], [282, 18]], "project_path": [[291, 8], [291, 20]]}, "fn_var_occur": {"create_model_response": [["create_model_response", "self", "hook", "create_model", "project_id", "project_id", "model", "deepcopy", "model"], ["create_model_response", "model"]], "model": [["model", "model_name"], ["mock_get_conn", "return_value", "projects", "return_value", "models", "return_value", "create", "return_value", "execute", "return_value", "model"], ["create_model_response", "self", "hook", "create_model", "project_id", "project_id", "model", "deepcopy", "model"], ["create_model_response", "model"]], "model_name": [["model", "model_name"], ["model_with_airflow_version", "model_name", "hook", "_AIRFLOW_VERSION"]], "model_with_airflow_version": [["model_with_airflow_version", "model_name", "hook", "_AIRFLOW_VERSION"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "models", "create", "body", "model_with_airflow_version", "parent", "project_path", "mock", "call", "projects", "models", "create", "execute", "num_retries"]], "project_id": [["project_path", "project_id"], ["create_model_response", "self", "hook", "create_model", "project_id", "project_id", "model", "deepcopy", "model"]], "project_path": [["project_path", "project_id"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "models", "create", "body", "model_with_airflow_version", "parent", "project_path", "mock", "call", "projects", "models", "create", "execute", "num_retries"]]}, "name": "test_create_model", "params": {"mock_get_conn": "", "self": ""}, "params_descr": {"mock_get_conn": "", "self": ""}, "params_occur": {"mock_get_conn": [["mock_get_conn", "return_value", "projects", "return_value", "models", "return_value", "create", "return_value", "execute", "return_value", "model"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "models", "create", "body", "model_with_airflow_version", "parent", "project_path", "mock", "call", "projects", "models", "create", "execute", "num_retries"]], "self": [["create_model_response", "self", "hook", "create_model", "project_id", "project_id", "model", "deepcopy", "model"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_conn": [["mock.MagicMock", 0.19598517484489092]], "self": []}, "q_name": "TestMLEngineHook.test_create_model", "ret_exprs": [], "ret_type": "", "variables": {"create_model_response": "", "model": "", "model_name": "", "model_with_airflow_version": "", "project_id": "", "project_path": ""}, "variables_p": {"create_model_response": [["Dict[str, Any]", 0.3142875416137742], ["Dict[str, Literal]", 0.11782310603583454], ["str", 0.09128987983617295], ["Dict[str, None]", 0.09024734449561828], ["Dict[Any, str]", 0.08887079851155404]], "model": [["str", 0.2948266578147101], ["list", 0.109182091339937], ["Union[Literal, Literal]", 0.10503901259435845], ["dict", 0.09213020704359584], ["Dict[str, str]", 0.09189704915989645]], "model_name": [["str", 0.39192722075871766], ["Dict[str, str]", 0.24836176698461773], ["Dict[int, str]", 0.10582375697878503], ["Dict[Any, str]", 0.08454596122107425]], "model_with_airflow_version": [["serious.json.model.JsonModel[tests.test_case.Snack]", 0.2838526402770433], ["str", 0.196264411175203], ["Dict[str, str]", 0.10612265626796673], ["list", 0.09914616694658897]], "project_id": [["str", 0.42826128730654334], ["Dict[str, str]", 0.13861290977593094], ["Tuple[Literal]", 0.11652758656149705], ["List[str]", 0.08576558149810903], ["Optional[str]", 0.0759377545651774]], "project_path": [["str", 0.2754079397403522], ["list", 0.1884275518348933]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[312, 4], [378, 9]], "fn_var_ln": {"create_model_response": [[364, 8], [364, 29]], "model": [[315, 8], [315, 13]], "model_name": [[314, 8], [314, 18]], "model_with_airflow_version": [[318, 8], [318, 34]], "project_id": [[313, 8], [313, 18]], "project_path": [[322, 8], [322, 20]]}, "fn_var_occur": {"create_model_response": [["create_model_response", "self", "hook", "create_model", "project_id", "project_id", "model", "deepcopy", "model"], ["create_model_response", "model"]], "model": [["model", "model_name"], ["mock_get_conn", "return_value", "projects", "return_value", "models", "return_value", "get", "return_value", "execute", "return_value", "deepcopy", "model"], ["create_model_response", "self", "hook", "create_model", "project_id", "project_id", "model", "deepcopy", "model"], ["create_model_response", "model"]], "model_name": [["model", "model_name"], ["model_with_airflow_version", "model_name", "hook", "_AIRFLOW_VERSION"]], "model_with_airflow_version": [["model_with_airflow_version", "model_name", "hook", "_AIRFLOW_VERSION"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "models", "create", "body", "model_with_airflow_version", "parent", "project_path", "mock", "call", "projects", "models", "create", "execute", "num_retries"]], "project_id": [["project_path", "project_id"], ["create_model_response", "self", "hook", "create_model", "project_id", "project_id", "model", "deepcopy", "model"]], "project_path": [["project_path", "project_id"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "models", "create", "body", "model_with_airflow_version", "parent", "project_path", "mock", "call", "projects", "models", "create", "execute", "num_retries"]]}, "name": "test_create_model_idempotency", "params": {"mock_get_conn": "", "self": ""}, "params_descr": {"mock_get_conn": "", "self": ""}, "params_occur": {"mock_get_conn": [["mock_get_conn", "return_value", "projects", "return_value", "models", "return_value", "create", "return_value", "execute", "side_effect", "HttpError", "resp", "httplib2", "Response", "content", "json", "dumps", "encode"], ["mock_get_conn", "return_value", "projects", "return_value", "models", "return_value", "get", "return_value", "execute", "return_value", "deepcopy", "model"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "models", "create", "body", "model_with_airflow_version", "parent", "project_path", "mock", "call", "projects", "models", "create", "execute", "num_retries"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "models", "get", "name", "mock", "call", "projects", "models", "get", "execute", "num_retries"]], "self": [["create_model_response", "self", "hook", "create_model", "project_id", "project_id", "model", "deepcopy", "model"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_conn": [["mock.MagicMock", 0.3393989361948418]], "self": []}, "q_name": "TestMLEngineHook.test_create_model_idempotency", "ret_exprs": [], "ret_type": "", "variables": {"create_model_response": "", "model": "", "model_name": "", "model_with_airflow_version": "", "project_id": "", "project_path": ""}, "variables_p": {"create_model_response": [["Dict[str, Any]", 0.3142875416137742], ["Dict[str, Literal]", 0.11782310603583454], ["str", 0.09128987983617295], ["Dict[str, None]", 0.09024734449561828], ["Dict[Any, str]", 0.08887079851155404]], "model": [["str", 0.43258657070061995], ["Dict[str, str]", 0.3671227478719529], ["Dict[str, int]", 0.10295183900197176], ["list", 0.09733884242545551]], "model_name": [["str", 0.39192722075871766], ["Dict[str, str]", 0.24836176698461773], ["Dict[int, str]", 0.10582375697878503], ["Dict[Any, str]", 0.08454596122107425]], "model_with_airflow_version": [["serious.json.model.JsonModel[tests.test_case.Snack]", 0.2838526402770433], ["str", 0.196264411175203], ["Dict[str, str]", 0.10612265626796673], ["list", 0.09914616694658897]], "project_id": [["str", 0.42826128730654334], ["Dict[str, str]", 0.13861290977593094], ["Tuple[Literal]", 0.11652758656149705], ["List[str]", 0.08576558149810903], ["Optional[str]", 0.0759377545651774]], "project_path": [["str", 0.2754079397403522], ["list", 0.1884275518348933]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[381, 4], [409, 9]], "fn_var_ln": {"create_model_response": [[399, 8], [399, 29]], "model": [[384, 8], [384, 13]], "model_name": [[383, 8], [383, 18]], "model_with_airflow_version": [[385, 8], [385, 34]], "project_id": [[382, 8], [382, 18]], "project_path": [[389, 8], [389, 20]]}, "fn_var_occur": {"create_model_response": [["create_model_response", "self", "hook", "create_model", "project_id", "project_id", "model", "deepcopy", "model"], ["create_model_response", "model"]], "model": [["model", "model_name"], ["mock_get_conn", "return_value", "projects", "return_value", "models", "return_value", "create", "return_value", "execute", "return_value", "model"], ["create_model_response", "self", "hook", "create_model", "project_id", "project_id", "model", "deepcopy", "model"], ["create_model_response", "model"]], "model_name": [["model", "model_name"], ["model_with_airflow_version", "model_name", "hook", "_AIRFLOW_VERSION"]], "model_with_airflow_version": [["model_with_airflow_version", "model_name", "hook", "_AIRFLOW_VERSION"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "models", "create", "body", "model_with_airflow_version", "parent", "project_path", "mock", "call", "projects", "models", "create", "execute", "num_retries"]], "project_id": [["project_path", "project_id"], ["create_model_response", "self", "hook", "create_model", "project_id", "project_id", "model", "deepcopy", "model"]], "project_path": [["project_path", "project_id"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "models", "create", "body", "model_with_airflow_version", "parent", "project_path", "mock", "call", "projects", "models", "create", "execute", "num_retries"]]}, "name": "test_create_model_with_labels", "params": {"mock_get_conn": "", "self": ""}, "params_descr": {"mock_get_conn": "", "self": ""}, "params_occur": {"mock_get_conn": [["mock_get_conn", "return_value", "projects", "return_value", "models", "return_value", "create", "return_value", "execute", "return_value", "model"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "models", "create", "body", "model_with_airflow_version", "parent", "project_path", "mock", "call", "projects", "models", "create", "execute", "num_retries"]], "self": [["create_model_response", "self", "hook", "create_model", "project_id", "project_id", "model", "deepcopy", "model"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_conn": [["mock.MagicMock", 0.40751866739425147]], "self": []}, "q_name": "TestMLEngineHook.test_create_model_with_labels", "ret_exprs": [], "ret_type": "", "variables": {"create_model_response": "", "model": "", "model_name": "", "model_with_airflow_version": "", "project_id": "", "project_path": ""}, "variables_p": {"create_model_response": [["Dict[str, Any]", 0.3142875416137742], ["Dict[str, Literal]", 0.11782310603583454], ["str", 0.09128987983617295], ["Dict[str, None]", 0.09024734449561828], ["Dict[Any, str]", 0.08887079851155404]], "model": [["str", 0.2948266578147101], ["list", 0.109182091339937], ["Union[Literal, Literal]", 0.10503901259435845], ["dict", 0.09213020704359584], ["Dict[str, str]", 0.09189704915989645]], "model_name": [["str", 0.39192722075871766], ["Dict[str, str]", 0.24836176698461773], ["Dict[int, str]", 0.10582375697878503], ["Dict[Any, str]", 0.08454596122107425]], "model_with_airflow_version": [["serious.json.model.JsonModel[tests.test_case.Snack]", 0.2838526402770433], ["str", 0.196264411175203], ["Dict[str, str]", 0.10612265626796673], ["list", 0.09914616694658897]], "project_id": [["str", 0.42826128730654334], ["Dict[str, str]", 0.13861290977593094], ["Tuple[Literal]", 0.11652758656149705], ["List[str]", 0.08576558149810903], ["Optional[str]", 0.0759377545651774]], "project_path": [["str", 0.2754079397403522], ["list", 0.1884275518348933]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[412, 4], [434, 9]], "fn_var_ln": {"get_model_response": [[426, 8], [426, 26]], "model": [[415, 8], [415, 13]], "model_name": [[414, 8], [414, 18]], "model_path": [[416, 8], [416, 18]], "project_id": [[413, 8], [413, 18]]}, "fn_var_occur": {"get_model_response": [["get_model_response", "self", "hook", "get_model", "project_id", "project_id", "model_name", "model_name"], ["get_model_response", "model"]], "model": [["model", "model_name"], ["mock_get_conn", "return_value", "projects", "return_value", "models", "return_value", "get", "return_value", "execute", "return_value", "model"], ["get_model_response", "model"]], "model_name": [["model", "model_name"], ["model_path", "project_id", "model_name"], ["get_model_response", "self", "hook", "get_model", "project_id", "project_id", "model_name", "model_name"]], "model_path": [["model_path", "project_id", "model_name"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "models", "get", "name", "model_path", "mock", "call", "projects", "models", "get", "execute", "num_retries"]], "project_id": [["model_path", "project_id", "model_name"], ["get_model_response", "self", "hook", "get_model", "project_id", "project_id", "model_name", "model_name"]]}, "name": "test_get_model", "params": {"mock_get_conn": "", "self": ""}, "params_descr": {"mock_get_conn": "", "self": ""}, "params_occur": {"mock_get_conn": [["mock_get_conn", "return_value", "projects", "return_value", "models", "return_value", "get", "return_value", "execute", "return_value", "model"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "models", "get", "name", "model_path", "mock", "call", "projects", "models", "get", "execute", "num_retries"]], "self": [["get_model_response", "self", "hook", "get_model", "project_id", "project_id", "model_name", "model_name"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_conn": [["mock.MagicMock", 0.31912764446631586]], "self": []}, "q_name": "TestMLEngineHook.test_get_model", "ret_exprs": [], "ret_type": "", "variables": {"get_model_response": "", "model": "", "model_name": "", "model_path": "", "project_id": ""}, "variables_p": {"get_model_response": [["Dict[str, Any]", 0.20232961267161842], ["Dict[str, str]", 0.18982969326014365], ["List[str]", 0.1132586511448194], ["Dict[str, int]", 0.1055956214554633], ["Dict[str, bool]", 0.10387337298657592], ["str", 0.0978057982423212], ["int", 0.09562702976269753], ["Dict[str, Union[Any, str]]", 0.09168022047636055]], "model": [["Dict[str, str]", 0.20012786311468764], ["str", 0.19788116878252954], ["list", 0.10833463963719844], ["Dict[str, int]", 0.10083653395863137], ["Union[Literal, Literal]", 0.09161470778975334]], "model_name": [["str", 0.7195221701219349], ["list", 0.09887141168114086], ["Union[Literal, str]", 0.09593109479382865], ["Optional[str]", 0.0856753234030956]], "model_path": [["str", 0.903369975230117], ["bool", 0.09663002476988301]], "project_id": [["str", 0.7936257239952406], ["List[str]", 0.2063742760047595]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[437, 4], [458, 9]], "fn_var_ln": {"model": [[440, 8], [440, 13]], "model_name": [[439, 8], [439, 18]], "model_path": [[441, 8], [441, 18]], "project_id": [[438, 8], [438, 18]]}, "fn_var_occur": {"model": [["model", "model_name"], ["mock_get_conn", "return_value", "projects", "return_value", "models", "return_value", "delete", "return_value", "execute", "return_value", "model"]], "model_name": [["model", "model_name"], ["model_path", "project_id", "model_name"], ["self", "hook", "delete_model", "project_id", "project_id", "model_name", "model_name"]], "model_path": [["model_path", "project_id", "model_name"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "models", "delete", "name", "model_path", "mock", "call", "projects", "models", "delete", "execute", "num_retries"]], "project_id": [["model_path", "project_id", "model_name"], ["self", "hook", "delete_model", "project_id", "project_id", "model_name", "model_name"]]}, "name": "test_delete_model", "params": {"mock_get_conn": "", "self": ""}, "params_descr": {"mock_get_conn": "", "self": ""}, "params_occur": {"mock_get_conn": [["mock_get_conn", "return_value", "projects", "return_value", "models", "return_value", "delete", "return_value", "execute", "return_value", "model"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "models", "delete", "name", "model_path", "mock", "call", "projects", "models", "delete", "execute", "num_retries"]], "self": [["self", "hook", "delete_model", "project_id", "project_id", "model_name", "model_name"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_conn": [["mock.MagicMock", 0.3319688388596215]], "self": []}, "q_name": "TestMLEngineHook.test_delete_model", "ret_exprs": [], "ret_type": "", "variables": {"model": "", "model_name": "", "model_path": "", "project_id": ""}, "variables_p": {"model": [["str", 0.3157983114759046], ["list", 0.10785327945719148], ["Dict[str, str]", 0.10210853958436357], ["Dict[str, int]", 0.0945755603979475]], "model_name": [["str", 1.0000000000000002]], "model_path": [["str", 0.815852404738035], ["bool", 0.09203038256255157]], "project_id": [["str", 0.9021860342802417], ["List[str]", 0.0978139657197582]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[462, 4], [486, 85]], "fn_var_ln": {"http_error": [[466, 8], [466, 18]], "model_name": [[464, 8], [464, 18]], "model_path": [[465, 8], [465, 18]], "project_id": [[463, 8], [463, 18]]}, "fn_var_occur": {"http_error": [["http_error", "HttpError", "resp", "mock", "MagicMock", "status", "reason", "content"], ["mock_get_conn", "return_value", "projects", "return_value", "models", "return_value", "delete", "return_value", "execute", "side_effect", "http_error"], ["mock_log", "error", "assert_called_once_with", "http_error"]], "model_name": [["model_path", "project_id", "model_name"], ["self", "hook", "delete_model", "project_id", "project_id", "model_name", "model_name"]], "model_path": [["model_path", "project_id", "model_name"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "models", "delete", "name", "model_path", "mock", "call", "projects", "models", "delete", "execute", "num_retries"]], "project_id": [["model_path", "project_id", "model_name"], ["self", "hook", "delete_model", "project_id", "project_id", "model_name", "model_name"]]}, "name": "test_delete_model_when_not_exists", "params": {"mock_get_conn": "", "mock_log": "", "self": ""}, "params_descr": {"mock_get_conn": "", "mock_log": "", "self": ""}, "params_occur": {"mock_get_conn": [["mock_get_conn", "return_value", "projects", "return_value", "models", "return_value", "delete", "return_value", "execute", "side_effect", "http_error"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "models", "delete", "name", "model_path", "mock", "call", "projects", "models", "delete", "execute", "num_retries"]], "mock_log": [["mock_log", "error", "assert_called_once_with", "http_error"]], "self": [["self", "hook", "delete_model", "project_id", "project_id", "model_name", "model_name"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_conn": [], "mock_log": [["tests.test_util.aiohttp.AiohttpClientMocker", 0.08744736097150389]], "self": []}, "q_name": "TestMLEngineHook.test_delete_model_when_not_exists", "ret_exprs": [], "ret_type": "", "variables": {"http_error": "", "model_name": "", "model_path": "", "project_id": ""}, "variables_p": {"http_error": [["mock.Mock", 0.1368861243608775], ["dict", 0.10468486301043774], ["bytes", 0.09459634878531005], ["set", 0.09384492804823154], ["int", 0.09368488451338533]], "model_name": [["str", 0.9999999999999999]], "model_path": [["str", 0.815852404738035], ["bool", 0.09203038256255157]], "project_id": [["str", 0.9021860342802417], ["List[str]", 0.0978139657197582]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[490, 4], [546, 9]], "fn_var_ln": {"model_name": [[492, 8], [492, 18]], "model_path": [[493, 8], [493, 18]], "operation_done": [[495, 8], [495, 22]], "operation_path": [[494, 8], [494, 22]], "project_id": [[491, 8], [491, 18]], "version_names": [[496, 8], [496, 21]], "versions": [[497, 8], [497, 16]]}, "fn_var_occur": {"model_name": [["model_path", "project_id", "model_name"], ["versions", "project_id", "model_name", "version_name", "i", "i", "version_name", "enumerate", "version_names"], ["self", "hook", "delete_model", "project_id", "project_id", "model_name", "model_name", "delete_contents", "True"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "models", "delete", "name", "model_path", "mock", "call", "projects", "models", "delete", "execute", "num_retries", "mock", "call", "projects", "models", "versions", "delete", "name", "project_id", "model_name", "version_name", "version_name", "version_names", "any_order", "True"]], "model_path": [["model_path", "project_id", "model_name"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "models", "delete", "name", "model_path", "mock", "call", "projects", "models", "delete", "execute", "num_retries", "mock", "call", "projects", "models", "versions", "delete", "name", "project_id", "model_name", "version_name", "version_name", "version_names", "any_order", "True"]], "operation_done": [["operation_done", "operation_path", "True"], ["mock_get_conn", "return_value", "projects", "return_value", "operations", "return_value", "get", "return_value", "execute", "return_value", "operation_done"]], "operation_path": [["operation_path", "project_id"], ["operation_done", "operation_path", "True"]], "project_id": [["model_path", "project_id", "model_name"], ["operation_path", "project_id"], ["versions", "project_id", "model_name", "version_name", "i", "i", "version_name", "enumerate", "version_names"], ["self", "hook", "delete_model", "project_id", "project_id", "model_name", "model_name", "delete_contents", "True"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "models", "delete", "name", "model_path", "mock", "call", "projects", "models", "delete", "execute", "num_retries", "mock", "call", "projects", "models", "versions", "delete", "name", "project_id", "model_name", "version_name", "version_name", "version_names", "any_order", "True"]], "version_names": [["versions", "project_id", "model_name", "version_name", "i", "i", "version_name", "enumerate", "version_names"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "models", "delete", "name", "model_path", "mock", "call", "projects", "models", "delete", "execute", "num_retries", "mock", "call", "projects", "models", "versions", "delete", "name", "project_id", "model_name", "version_name", "version_name", "version_names", "any_order", "True"]], "versions": [["versions", "project_id", "model_name", "version_name", "i", "i", "version_name", "enumerate", "version_names"], ["mock_get_conn", "return_value", "projects", "return_value", "models", "return_value", "versions", "return_value", "list", "return_value", "execute", "return_value", "versions"], ["mock_get_conn", "return_value", "projects", "return_value", "models", "return_value", "versions", "return_value", "list_next", "return_value", "None"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "models", "delete", "name", "model_path", "mock", "call", "projects", "models", "delete", "execute", "num_retries", "mock", "call", "projects", "models", "versions", "delete", "name", "project_id", "model_name", "version_name", "version_name", "version_names", "any_order", "True"]]}, "name": "test_delete_model_with_contents", "params": {"mock_get_conn": "", "mock_sleep": "", "self": ""}, "params_descr": {"mock_get_conn": "", "mock_sleep": "", "self": ""}, "params_occur": {"mock_get_conn": [["mock_get_conn", "return_value", "projects", "return_value", "operations", "return_value", "get", "return_value", "execute", "return_value", "operation_done"], ["mock_get_conn", "return_value", "projects", "return_value", "models", "return_value", "versions", "return_value", "list", "return_value", "execute", "return_value", "versions"], ["mock_get_conn", "return_value", "projects", "return_value", "models", "return_value", "versions", "return_value", "list_next", "return_value", "None"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "models", "delete", "name", "model_path", "mock", "call", "projects", "models", "delete", "execute", "num_retries", "mock", "call", "projects", "models", "versions", "delete", "name", "project_id", "model_name", "version_name", "version_name", "version_names", "any_order", "True"]], "mock_sleep": [], "self": [["self", "hook", "delete_model", "project_id", "project_id", "model_name", "model_name", "delete_contents", "True"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_conn": [], "mock_sleep": [["mock.MagicMock", 0.43686639644355835]], "self": []}, "q_name": "TestMLEngineHook.test_delete_model_with_contents", "ret_exprs": [], "ret_type": "", "variables": {"model_name": "", "model_path": "", "operation_done": "", "operation_path": "", "project_id": "", "version_names": "", "versions": ""}, "variables_p": {"model_name": [["str", 1.0]], "model_path": [["str", 0.815852404738035], ["bool", 0.09203038256255157]], "operation_done": [["int", 0.29980850747136445], ["str", 0.2932065668817413], ["list", 0.13205715491616668], ["Dict[Any, int]", 0.09359025371319271], ["Dict[str, int]", 0.0917326773326702], ["float", 0.08960483968486459]], "operation_path": [["str", 0.5011953142018956]], "project_id": [["str", 0.8251661676520199], ["int", 0.08904983165122626]], "version_names": [["str", 0.7992703878103131]], "versions": [["str", 0.5950446093594198], ["List[str]", 0.1128523262988361], ["dict", 0.09953821383511925], ["list", 0.09842896770598171]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[550, 4], [599, 9]], "fn_var_ln": {"create_job_response": [[589, 8], [589, 27]], "job_id": [[552, 8], [552, 14]], "job_path": [[554, 8], [554, 16]], "job_queued": [[569, 8], [569, 18]], "job_succeeded": [[565, 8], [565, 21]], "new_job": [[555, 8], [555, 15]], "new_job_with_airflow_version": [[559, 8], [559, 36]], "project_id": [[551, 8], [551, 18]], "project_path": [[553, 8], [553, 20]]}, "fn_var_occur": {"create_job_response": [["create_job_response", "self", "hook", "create_job", "project_id", "project_id", "job", "deepcopy", "new_job"], ["create_job_response", "job_succeeded"]], "job_id": [["job_path", "project_id", "job_id"], ["new_job", "job_id"], ["new_job_with_airflow_version", "job_id", "hook", "_AIRFLOW_VERSION"], ["job_succeeded", "job_id"], ["job_queued", "job_id"]], "job_path": [["job_path", "project_id", "job_id"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "jobs", "create", "body", "new_job_with_airflow_version", "parent", "project_path", "mock", "call", "projects", "jobs", "get", "name", "job_path", "mock", "call", "projects", "jobs", "get", "execute", "num_retries", "any_order", "True"]], "job_queued": [["job_queued", "job_id"], ["mock_get_conn", "return_value", "projects", "return_value", "jobs", "return_value", "create", "return_value", "execute", "return_value", "job_queued"], ["mock_get_conn", "return_value", "projects", "return_value", "jobs", "return_value", "get", "return_value", "execute", "side_effect", "job_queued", "job_succeeded"]], "job_succeeded": [["job_succeeded", "job_id"], ["mock_get_conn", "return_value", "projects", "return_value", "jobs", "return_value", "get", "return_value", "execute", "side_effect", "job_queued", "job_succeeded"], ["create_job_response", "job_succeeded"]], "new_job": [["new_job", "job_id"], ["create_job_response", "self", "hook", "create_job", "project_id", "project_id", "job", "deepcopy", "new_job"]], "new_job_with_airflow_version": [["new_job_with_airflow_version", "job_id", "hook", "_AIRFLOW_VERSION"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "jobs", "create", "body", "new_job_with_airflow_version", "parent", "project_path", "mock", "call", "projects", "jobs", "get", "name", "job_path", "mock", "call", "projects", "jobs", "get", "execute", "num_retries", "any_order", "True"]], "project_id": [["project_path", "project_id"], ["job_path", "project_id", "job_id"], ["create_job_response", "self", "hook", "create_job", "project_id", "project_id", "job", "deepcopy", "new_job"]], "project_path": [["project_path", "project_id"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "jobs", "create", "body", "new_job_with_airflow_version", "parent", "project_path", "mock", "call", "projects", "jobs", "get", "name", "job_path", "mock", "call", "projects", "jobs", "get", "execute", "num_retries", "any_order", "True"]]}, "name": "test_create_mlengine_job", "params": {"mock_get_conn": "", "mock_sleep": "", "self": ""}, "params_descr": {"mock_get_conn": "", "mock_sleep": "", "self": ""}, "params_occur": {"mock_get_conn": [["mock_get_conn", "return_value", "projects", "return_value", "jobs", "return_value", "create", "return_value", "execute", "return_value", "job_queued"], ["mock_get_conn", "return_value", "projects", "return_value", "jobs", "return_value", "get", "return_value", "execute", "side_effect", "job_queued", "job_succeeded"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "jobs", "create", "body", "new_job_with_airflow_version", "parent", "project_path", "mock", "call", "projects", "jobs", "get", "name", "job_path", "mock", "call", "projects", "jobs", "get", "execute", "num_retries", "any_order", "True"]], "mock_sleep": [], "self": [["create_job_response", "self", "hook", "create_job", "project_id", "project_id", "job", "deepcopy", "new_job"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_conn": [], "mock_sleep": [["mock.MagicMock", 0.37364821509337465], ["mock.Mock", 0.08789572130119354]], "self": []}, "q_name": "TestMLEngineHook.test_create_mlengine_job", "ret_exprs": [], "ret_type": "", "variables": {"create_job_response": "", "job_id": "", "job_path": "", "job_queued": "", "job_succeeded": "", "new_job": "", "new_job_with_airflow_version": "", "project_id": "", "project_path": ""}, "variables_p": {"create_job_response": [["dict", 0.21735117935697137], ["Tuple[None, Any]", 0.10827655205773565], ["Callable[[List[Any]], List[Any]]", 0.09109089810608259], ["List[Dict[str, Any]]", 0.09046744306710933], ["str", 0.08694177632056904], ["Dict[str, Dict[str, Any]]", 0.08641379625671626]], "job_id": [["str", 0.5165644834154682], ["Set[int]", 0.19860280985673523], ["int", 0.19233116274874795]], "job_path": [["str", 0.6824944705448978], ["bool", 0.12615850345038898]], "job_queued": [["Dict[str, Dict[str, str]]", 0.20015390099364938]], "job_succeeded": [["str", 0.25660446525818753], ["Dict[str, Dict[str, str]]", 0.12792264241010792], ["Dict[str, Dict[str, Any]]", 0.07759381613931778]], "new_job": [["aiozipkin.helpers.TraceContext", 0.12364846564992679], ["Tuple[int]", 0.09978560579928106], ["bytes", 0.08899461361096059]], "new_job_with_airflow_version": [["bytes", 0.22094028174873925], ["str", 0.1730455347244088], ["int", 0.14938952297707564], ["Dict[str, Any]", 0.09809871950584692], ["Dict[int, int]", 0.09130571128407082], ["tools.bots.cloud.status_manager.StatusManager", 0.08867492530853091]], "project_id": [["str", 0.8928456543316708]], "project_path": [["list", 0.21507309191778004], ["str", 0.1995363918978502], ["Tuple[Literal, Literal, Literal]", 0.17004503202792712]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[603, 4], [651, 9]], "fn_var_ln": {"create_job_response": [[639, 8], [639, 27]], "job_id": [[605, 8], [605, 14]], "job_path": [[607, 8], [607, 16]], "job_queued": [[619, 8], [619, 18]], "job_succeeded": [[615, 8], [615, 21]], "new_job": [[608, 8], [608, 15]], "new_job_with_airflow_version": [[609, 8], [609, 36]], "project_id": [[604, 8], [604, 18]], "project_path": [[606, 8], [606, 20]]}, "fn_var_occur": {"create_job_response": [["create_job_response", "self", "hook", "create_job", "project_id", "project_id", "job", "deepcopy", "new_job"], ["create_job_response", "job_succeeded"]], "job_id": [["job_path", "project_id", "job_id"], ["new_job", "job_id"], ["new_job_with_airflow_version", "job_id", "hook", "_AIRFLOW_VERSION"], ["job_succeeded", "job_id"], ["job_queued", "job_id"]], "job_path": [["job_path", "project_id", "job_id"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "jobs", "create", "body", "new_job_with_airflow_version", "parent", "project_path", "mock", "call", "projects", "jobs", "get", "name", "job_path", "mock", "call", "projects", "jobs", "get", "execute", "num_retries", "any_order", "True"]], "job_queued": [["job_queued", "job_id"], ["mock_get_conn", "return_value", "projects", "return_value", "jobs", "return_value", "create", "return_value", "execute", "return_value", "job_queued"], ["mock_get_conn", "return_value", "projects", "return_value", "jobs", "return_value", "get", "return_value", "execute", "side_effect", "job_queued", "job_succeeded"]], "job_succeeded": [["job_succeeded", "job_id"], ["mock_get_conn", "return_value", "projects", "return_value", "jobs", "return_value", "get", "return_value", "execute", "side_effect", "job_queued", "job_succeeded"], ["create_job_response", "job_succeeded"]], "new_job": [["new_job", "job_id"], ["create_job_response", "self", "hook", "create_job", "project_id", "project_id", "job", "deepcopy", "new_job"]], "new_job_with_airflow_version": [["new_job_with_airflow_version", "job_id", "hook", "_AIRFLOW_VERSION"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "jobs", "create", "body", "new_job_with_airflow_version", "parent", "project_path", "mock", "call", "projects", "jobs", "get", "name", "job_path", "mock", "call", "projects", "jobs", "get", "execute", "num_retries", "any_order", "True"]], "project_id": [["project_path", "project_id"], ["job_path", "project_id", "job_id"], ["create_job_response", "self", "hook", "create_job", "project_id", "project_id", "job", "deepcopy", "new_job"]], "project_path": [["project_path", "project_id"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "jobs", "create", "body", "new_job_with_airflow_version", "parent", "project_path", "mock", "call", "projects", "jobs", "get", "name", "job_path", "mock", "call", "projects", "jobs", "get", "execute", "num_retries", "any_order", "True"]]}, "name": "test_create_mlengine_job_with_labels", "params": {"mock_get_conn": "", "mock_sleep": "", "self": ""}, "params_descr": {"mock_get_conn": "", "mock_sleep": "", "self": ""}, "params_occur": {"mock_get_conn": [["mock_get_conn", "return_value", "projects", "return_value", "jobs", "return_value", "create", "return_value", "execute", "return_value", "job_queued"], ["mock_get_conn", "return_value", "projects", "return_value", "jobs", "return_value", "get", "return_value", "execute", "side_effect", "job_queued", "job_succeeded"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "jobs", "create", "body", "new_job_with_airflow_version", "parent", "project_path", "mock", "call", "projects", "jobs", "get", "name", "job_path", "mock", "call", "projects", "jobs", "get", "execute", "num_retries", "any_order", "True"]], "mock_sleep": [], "self": [["create_job_response", "self", "hook", "create_job", "project_id", "project_id", "job", "deepcopy", "new_job"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_conn": [], "mock_sleep": [["mock.MagicMock", 0.405012967493083]], "self": []}, "q_name": "TestMLEngineHook.test_create_mlengine_job_with_labels", "ret_exprs": [], "ret_type": "", "variables": {"create_job_response": "", "job_id": "", "job_path": "", "job_queued": "", "job_succeeded": "", "new_job": "", "new_job_with_airflow_version": "", "project_id": "", "project_path": ""}, "variables_p": {"create_job_response": [["dict", 0.21735117935697137], ["Tuple[None, Any]", 0.10827655205773565], ["Callable[[List[Any]], List[Any]]", 0.09109089810608259], ["List[Dict[str, Any]]", 0.09046744306710933], ["str", 0.08694177632056904], ["Dict[str, Dict[str, Any]]", 0.08641379625671626]], "job_id": [["str", 0.5165644834154682], ["Set[int]", 0.19860280985673523], ["int", 0.19233116274874795]], "job_path": [["str", 0.6824944705448978], ["bool", 0.12615850345038898]], "job_queued": [["Dict[str, Dict[str, str]]", 0.20015390099364938]], "job_succeeded": [["str", 0.25660446525818753], ["Dict[str, Dict[str, str]]", 0.12792264241010792], ["Dict[str, Dict[str, Any]]", 0.07759381613931778]], "new_job": [["aiozipkin.helpers.TraceContext", 0.12364846564992679], ["Tuple[int]", 0.09978560579928106], ["bytes", 0.08899461361096059]], "new_job_with_airflow_version": [["bytes", 0.22094028174873925], ["str", 0.1730455347244088], ["int", 0.14938952297707564], ["Dict[str, Any]", 0.09809871950584692], ["Dict[int, int]", 0.09130571128407082], ["tools.bots.cloud.status_manager.StatusManager", 0.08867492530853091]], "project_id": [["str", 0.8928456543316708]], "project_path": [["list", 0.21507309191778004], ["str", 0.1995363918978502], ["Tuple[Literal, Literal, Literal]", 0.17004503202792712]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[654, 4], [692, 9]], "fn_var_ln": {"create_job_response": [[681, 8], [681, 27]], "error_job_exists": [[664, 8], [664, 24]], "job_id": [[656, 8], [656, 14]], "job_path": [[658, 8], [658, 16]], "job_succeeded": [[659, 8], [659, 21]], "project_id": [[655, 8], [655, 18]], "project_path": [[657, 8], [657, 20]]}, "fn_var_occur": {"create_job_response": [["create_job_response", "self", "hook", "create_job", "project_id", "project_id", "job", "job_succeeded"], ["create_job_response", "job_succeeded"]], "error_job_exists": [["error_job_exists", "HttpError", "resp", "mock", "MagicMock", "status", "content"], ["mock_get_conn", "return_value", "projects", "return_value", "jobs", "return_value", "create", "return_value", "execute", "side_effect", "error_job_exists"]], "job_id": [["job_path", "project_id", "job_id"], ["job_succeeded", "job_id"]], "job_path": [["job_path", "project_id", "job_id"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "jobs", "create", "body", "job_succeeded", "parent", "project_path", "mock", "call", "projects", "jobs", "create", "execute", "num_retries", "mock", "call", "projects", "jobs", "get", "name", "job_path", "mock", "call", "projects", "jobs", "get", "execute", "num_retries", "any_order", "True"]], "job_succeeded": [["job_succeeded", "job_id"], ["mock_get_conn", "return_value", "projects", "return_value", "jobs", "return_value", "get", "return_value", "execute", "return_value", "job_succeeded"], ["create_job_response", "self", "hook", "create_job", "project_id", "project_id", "job", "job_succeeded"], ["create_job_response", "job_succeeded"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "jobs", "create", "body", "job_succeeded", "parent", "project_path", "mock", "call", "projects", "jobs", "create", "execute", "num_retries", "mock", "call", "projects", "jobs", "get", "name", "job_path", "mock", "call", "projects", "jobs", "get", "execute", "num_retries", "any_order", "True"]], "project_id": [["project_path", "project_id"], ["job_path", "project_id", "job_id"], ["create_job_response", "self", "hook", "create_job", "project_id", "project_id", "job", "job_succeeded"]], "project_path": [["project_path", "project_id"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "jobs", "create", "body", "job_succeeded", "parent", "project_path", "mock", "call", "projects", "jobs", "create", "execute", "num_retries", "mock", "call", "projects", "jobs", "get", "name", "job_path", "mock", "call", "projects", "jobs", "get", "execute", "num_retries", "any_order", "True"]]}, "name": "test_create_mlengine_job_reuse_existing_job_by_default", "params": {"mock_get_conn": "", "self": ""}, "params_descr": {"mock_get_conn": "", "self": ""}, "params_occur": {"mock_get_conn": [["mock_get_conn", "return_value", "projects", "return_value", "jobs", "return_value", "create", "return_value", "execute", "side_effect", "error_job_exists"], ["mock_get_conn", "return_value", "projects", "return_value", "jobs", "return_value", "get", "return_value", "execute", "return_value", "job_succeeded"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "jobs", "create", "body", "job_succeeded", "parent", "project_path", "mock", "call", "projects", "jobs", "create", "execute", "num_retries", "mock", "call", "projects", "jobs", "get", "name", "job_path", "mock", "call", "projects", "jobs", "get", "execute", "num_retries", "any_order", "True"]], "self": [["create_job_response", "self", "hook", "create_job", "project_id", "project_id", "job", "job_succeeded"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_conn": [], "self": []}, "q_name": "TestMLEngineHook.test_create_mlengine_job_reuse_existing_job_by_default", "ret_exprs": [], "ret_type": "", "variables": {"create_job_response": "", "error_job_exists": "", "job_id": "", "job_path": "", "job_succeeded": "", "project_id": "", "project_path": ""}, "variables_p": {"create_job_response": [["dict", 0.219358183692464], ["list", 0.09456026296295846], ["str", 0.0915696325140886], ["Dict[str, Union[None, int, str]]", 0.09109416054249665], ["List[str]", 0.09024218208921873]], "error_job_exists": [["Dict[str, Union[bool, str]]", 0.10232008408769945], ["Dict[str, bool]", 0.10232008408769945], ["mock.MagicMock", 0.09626203702477193]], "job_id": [["str", 0.8684365723767666], ["int", 0.13156342762323348]], "job_path": [["str", 0.3291117117098936], ["int", 0.10185404224434397], ["bool", 0.10147083957834808]], "job_succeeded": [["Dict[str, Dict[str, str]]", 0.19616942190243042], ["Dict[str, Any]", 0.19193783176316484]], "project_id": [["str", 0.8928456543316708]], "project_path": [["str", 0.5703650499307503], ["list", 0.204605761406695], ["List[str]", 0.09933642206702649]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[729, 8], [730, 71]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "check_input", "params": {"existing_job": ""}, "params_descr": {"existing_job": ""}, "params_occur": {"existing_job": [["existing_job", "get", "my_job"]]}, "params_p": {"args": [], "existing_job": [["str", 0.9999999992154303], ["Dict[str, Any]", 3.24741157823635e-10], ["dict", 2.0873955747093315e-10], ["int", 1.989864301649913e-10], ["Dict[str, Dict[str, str]]", 5.210267323311878e-11]], "kwargs": [], "self": []}, "q_name": "TestMLEngineHook.test_create_mlengine_job_check_existing_job_failed.<locals>.check_input", "ret_exprs": ["return existing_job.get(\"someInput\") == my_job[\"someInput\"]"], "ret_type": "", "ret_type_p": [["str", 0.3919166526051754], ["bool", 0.08873129089612308]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[695, 4], [733, 100]], "fn_var_ln": {"different_job": [[704, 8], [704, 21]], "error_job_exists": [[710, 8], [710, 24]], "job_id": [[697, 8], [697, 14]], "my_job": [[698, 8], [698, 14]], "project_id": [[696, 8], [696, 18]]}, "fn_var_occur": {"different_job": [], "error_job_exists": [], "job_id": [], "my_job": [["self", "hook", "create_job", "project_id", "project_id", "job", "my_job", "use_existing_job_fn", "check_input"]], "project_id": [["self", "hook", "create_job", "project_id", "project_id", "job", "my_job", "use_existing_job_fn", "check_input"]]}, "name": "test_create_mlengine_job_check_existing_job_failed", "params": {"mock_get_conn": "", "self": ""}, "params_descr": {"mock_get_conn": "", "self": ""}, "params_occur": {"mock_get_conn": [], "self": [["self", "hook", "create_job", "project_id", "project_id", "job", "my_job", "use_existing_job_fn", "check_input"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_conn": [["mock.Mock", 0.2534575744411845], ["Callable", 0.13886921957938111], ["tests.test_util.aiohttp.AiohttpClientMocker", 0.09881730370837435], ["tests.async_mock.MagicMock", 0.09881730370837435], ["Generator[None, Any, None]", 0.06874557862319432]], "self": []}, "q_name": "TestMLEngineHook.test_create_mlengine_job_check_existing_job_failed", "ret_exprs": [], "ret_type": "", "variables": {"different_job": "", "error_job_exists": "", "job_id": "", "my_job": "", "project_id": ""}, "variables_p": {"different_job": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "error_job_exists": [["str", 0.3], ["int", 0.19999999999999998], ["Dict[str, str]", 0.09999999999999999], ["List[errors.Error]", 0.09999999999999999], ["Optional[List[str]]", 0.09999999999999999]], "job_id": [["Optional[str]", 0.09999999999999999], ["int", 0.09999999999999999], ["List[int]", 0.09999999999999999]], "my_job": [["str", 0.399285152345108], ["Dict[str, Any]", 0.11352818717377657], ["Set[str]", 0.0911637776301817], ["Dict[str, str]", 0.08833133836357225]], "project_id": [["str", 1.0]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[763, 8], [764, 71]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "check_input", "params": {"existing_job": ""}, "params_descr": {"existing_job": ""}, "params_occur": {"existing_job": [["existing_job", "get", "my_job"]]}, "params_p": {"args": [], "existing_job": [["str", 0.9999999992154303], ["Dict[str, Any]", 3.24741157823635e-10], ["dict", 2.0873955747093315e-10], ["int", 1.989864301649913e-10], ["Dict[str, Dict[str, str]]", 5.210267323311878e-11]], "kwargs": [], "self": []}, "q_name": "TestMLEngineHook.test_create_mlengine_job_check_existing_job_success.<locals>.check_input", "ret_exprs": ["return existing_job.get(\"someInput\") == my_job[\"someInput\"]"], "ret_type": "", "ret_type_p": [["str", 0.3919166526051754], ["bool", 0.08873129089612308]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[736, 4], [770, 44]], "fn_var_ln": {"create_job_response": [[766, 8], [766, 27]], "error_job_exists": [[745, 8], [745, 24]], "job_id": [[738, 8], [738, 14]], "my_job": [[739, 8], [739, 14]], "project_id": [[737, 8], [737, 18]]}, "fn_var_occur": {"create_job_response": [["create_job_response", "self", "hook", "create_job", "project_id", "project_id", "job", "my_job", "use_existing_job_fn", "check_input"], ["create_job_response", "my_job"]], "error_job_exists": [], "job_id": [], "my_job": [["create_job_response", "self", "hook", "create_job", "project_id", "project_id", "job", "my_job", "use_existing_job_fn", "check_input"], ["create_job_response", "my_job"]], "project_id": [["create_job_response", "self", "hook", "create_job", "project_id", "project_id", "job", "my_job", "use_existing_job_fn", "check_input"]]}, "name": "test_create_mlengine_job_check_existing_job_success", "params": {"mock_get_conn": "", "self": ""}, "params_descr": {"mock_get_conn": "", "self": ""}, "params_occur": {"mock_get_conn": [], "self": [["create_job_response", "self", "hook", "create_job", "project_id", "project_id", "job", "my_job", "use_existing_job_fn", "check_input"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_conn": [["mock.Mock", 0.2534575744411845], ["Callable", 0.13886921957938111], ["tests.test_util.aiohttp.AiohttpClientMocker", 0.09881730370837435], ["tests.async_mock.MagicMock", 0.09881730370837435], ["Generator[None, Any, None]", 0.06874557862319432]], "self": []}, "q_name": "TestMLEngineHook.test_create_mlengine_job_check_existing_job_success", "ret_exprs": [], "ret_type": "", "variables": {"create_job_response": "", "error_job_exists": "", "job_id": "", "my_job": "", "project_id": ""}, "variables_p": {"create_job_response": [["Tuple[None, Any]", 0.11058812131563237], ["List[Dict[str, Any]]", 0.09724552767745007], ["Dict[str, dict]", 0.0957108189304201], ["Dict[str, Union[None, Any, Any, str]]", 0.09279693543684374], ["str", 0.08915676561630419]], "error_job_exists": [["str", 0.3], ["int", 0.19999999999999998], ["Dict[str, str]", 0.09999999999999999], ["List[errors.Error]", 0.09999999999999999], ["Optional[List[str]]", 0.09999999999999999]], "job_id": [["Optional[str]", 0.09999999999999999], ["int", 0.09999999999999999], ["List[int]", 0.09999999999999999]], "my_job": [["Union[Literal, Literal]", 0.42291728671136813], ["Dict[str, str]", 0.09636605511631335], ["List[tuple]", 0.09383136285386381], ["list", 0.09068176961285714], ["raiden.utils.Any", 0.08984247341205615]], "project_id": [["str", 0.19341413550457356], ["Dict[str, List[Any]]", 0.10534237486730527], ["Dict[str, Optional[str]]", 0.10292074610546581], ["List[str]", 0.1012128811413813], ["Dict[str, Union[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any]]", 0.09886852311128799], ["Dict[str, int]", 0.0949893596252338], ["dict", 0.0941597674522785]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[773, 4], [797, 9]], "fn_var_ln": {"cancel_job_response": [[788, 8], [788, 27]], "job_cancelled": [[778, 8], [778, 21]], "job_id": [[775, 8], [775, 14]], "job_path": [[776, 8], [776, 16]], "project_id": [[774, 8], [774, 18]]}, "fn_var_occur": {"cancel_job_response": [["cancel_job_response", "self", "hook", "cancel_job", "job_id", "job_id", "project_id", "project_id"], ["cancel_job_response", "job_cancelled"]], "job_cancelled": [["mock_get_conn", "return_value", "projects", "return_value", "jobs", "return_value", "cancel", "return_value", "execute", "return_value", "job_cancelled"], ["cancel_job_response", "job_cancelled"]], "job_id": [["job_path", "project_id", "job_id"], ["cancel_job_response", "self", "hook", "cancel_job", "job_id", "job_id", "project_id", "project_id"]], "job_path": [["job_path", "project_id", "job_id"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "jobs", "cancel", "name", "job_path", "mock", "call", "projects", "jobs", "cancel", "execute", "num_retries", "any_order", "True"]], "project_id": [["job_path", "project_id", "job_id"], ["cancel_job_response", "self", "hook", "cancel_job", "job_id", "job_id", "project_id", "project_id"]]}, "name": "test_cancel_mlengine_job", "params": {"mock_get_conn": "", "self": ""}, "params_descr": {"mock_get_conn": "", "self": ""}, "params_occur": {"mock_get_conn": [["mock_get_conn", "return_value", "projects", "return_value", "jobs", "return_value", "cancel", "return_value", "execute", "return_value", "job_cancelled"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "jobs", "cancel", "name", "job_path", "mock", "call", "projects", "jobs", "cancel", "execute", "num_retries", "any_order", "True"]], "self": [["cancel_job_response", "self", "hook", "cancel_job", "job_id", "job_id", "project_id", "project_id"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_conn": [], "self": []}, "q_name": "TestMLEngineHook.test_cancel_mlengine_job", "ret_exprs": [], "ret_type": "", "variables": {"cancel_job_response": "", "job_cancelled": "", "job_id": "", "job_path": "", "project_id": ""}, "variables_p": {"cancel_job_response": [["str", 0.3617331840001963], ["list", 0.17287212305146554], ["Dict[str, List[str]]", 0.1574787005543797], ["Dict[str, List[Any]]", 0.0804413073814578], ["List[str]", 0.07810847593488297], ["Dict[str, Dict[str, Any]]", 0.0755300868219109], ["dict", 0.07383612225570689]], "job_cancelled": [["Dict[str, Dict[str, Any]]", 0.3513723148494711], ["str", 0.19726294984007797], ["List[Dict[str, Any]]", 0.09325180261553957], ["int", 0.08686925190623489], ["list", 0.08686925190623489]], "job_id": [["str", 0.5935519468009696], ["bool", 0.11458039038470237], ["ClassVar[str]", 0.10674542269166204], ["Optional[str]", 0.09509558536557168]], "job_path": [["str", 0.7474981475507727], ["bool", 0.13129683131968956]], "project_id": [["str", 0.7347137634856533], ["List[str]", 0.18669062312473436]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[800, 4], [823, 70]], "fn_var_ln": {"error_job_does_not_exist": [[805, 8], [805, 32]], "job_cancelled": [[803, 8], [803, 21]], "job_id": [[802, 8], [802, 14]], "project_id": [[801, 8], [801, 18]]}, "fn_var_occur": {"error_job_does_not_exist": [["error_job_does_not_exist", "HttpError", "resp", "mock", "MagicMock", "status", "content"], ["mock_get_conn", "return_value", "projects", "return_value", "jobs", "return_value", "cancel", "return_value", "execute", "side_effect", "error_job_does_not_exist"]], "job_cancelled": [["mock_get_conn", "return_value", "projects", "return_value", "jobs", "return_value", "cancel", "return_value", "execute", "return_value", "job_cancelled"]], "job_id": [["self", "hook", "cancel_job", "job_id", "job_id", "project_id", "project_id"]], "project_id": [["self", "hook", "cancel_job", "job_id", "job_id", "project_id", "project_id"]]}, "name": "test_cancel_mlengine_job_nonexistent_job", "params": {"mock_get_conn": "", "self": ""}, "params_descr": {"mock_get_conn": "", "self": ""}, "params_occur": {"mock_get_conn": [["mock_get_conn", "return_value", "projects", "return_value", "jobs", "return_value", "cancel", "return_value", "execute", "side_effect", "error_job_does_not_exist"], ["mock_get_conn", "return_value", "projects", "return_value", "jobs", "return_value", "cancel", "return_value", "execute", "return_value", "job_cancelled"]], "self": [["self", "hook", "cancel_job", "job_id", "job_id", "project_id", "project_id"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_conn": [], "self": []}, "q_name": "TestMLEngineHook.test_cancel_mlengine_job_nonexistent_job", "ret_exprs": [], "ret_type": "", "variables": {"error_job_does_not_exist": "", "job_cancelled": "", "job_id": "", "project_id": ""}, "variables_p": {"error_job_does_not_exist": [["int", 0.32332398583163957], ["mock.MagicMock", 0.11096261195276398], ["List[str]", 0.09553059474028726], ["str", 0.08753605675726157]], "job_cancelled": [["Dict[str, Dict[str, Any]]", 0.3670759131410981], ["str", 0.1963842919568774], ["List[Dict[str, Any]]", 0.09020223225858019], ["int", 0.08308145816147405]], "job_id": [["str", 0.18225792659438098], ["Optional[str]", 0.08733873188836469]], "project_id": [["str", 0.9999999999999999]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[826, 4], [860, 9]], "fn_var_ln": {"cancel_job_response": [[851, 8], [851, 27]], "error_job_already_completed": [[832, 8], [832, 35]], "job_cancelled": [[830, 8], [830, 21]], "job_id": [[828, 8], [828, 14]], "job_path": [[829, 8], [829, 16]], "project_id": [[827, 8], [827, 18]]}, "fn_var_occur": {"cancel_job_response": [["cancel_job_response", "self", "hook", "cancel_job", "job_id", "job_id", "project_id", "project_id"], ["cancel_job_response", "job_cancelled"]], "error_job_already_completed": [["error_job_already_completed", "HttpError", "resp", "mock", "MagicMock", "status", "content"], ["mock_get_conn", "return_value", "projects", "return_value", "jobs", "return_value", "cancel", "return_value", "execute", "side_effect", "error_job_already_completed"]], "job_cancelled": [["mock_get_conn", "return_value", "projects", "return_value", "jobs", "return_value", "cancel", "return_value", "execute", "return_value", "job_cancelled"], ["cancel_job_response", "job_cancelled"]], "job_id": [["job_path", "project_id", "job_id"], ["cancel_job_response", "self", "hook", "cancel_job", "job_id", "job_id", "project_id", "project_id"]], "job_path": [["job_path", "project_id", "job_id"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "jobs", "cancel", "name", "job_path", "mock", "call", "projects", "jobs", "cancel", "execute", "num_retries", "any_order", "True"]], "project_id": [["job_path", "project_id", "job_id"], ["cancel_job_response", "self", "hook", "cancel_job", "job_id", "job_id", "project_id", "project_id"]]}, "name": "test_cancel_mlengine_job_completed_job", "params": {"mock_get_conn": "", "self": ""}, "params_descr": {"mock_get_conn": "", "self": ""}, "params_occur": {"mock_get_conn": [["mock_get_conn", "return_value", "projects", "return_value", "jobs", "return_value", "cancel", "return_value", "execute", "side_effect", "error_job_already_completed"], ["mock_get_conn", "return_value", "projects", "return_value", "jobs", "return_value", "cancel", "return_value", "execute", "return_value", "job_cancelled"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "jobs", "cancel", "name", "job_path", "mock", "call", "projects", "jobs", "cancel", "execute", "num_retries", "any_order", "True"]], "self": [["cancel_job_response", "self", "hook", "cancel_job", "job_id", "job_id", "project_id", "project_id"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_conn": [], "self": []}, "q_name": "TestMLEngineHook.test_cancel_mlengine_job_completed_job", "ret_exprs": [], "ret_type": "", "variables": {"cancel_job_response": "", "error_job_already_completed": "", "job_cancelled": "", "job_id": "", "job_path": "", "project_id": ""}, "variables_p": {"cancel_job_response": [["str", 0.3617331840001963], ["list", 0.17287212305146554], ["Dict[str, List[str]]", 0.1574787005543797], ["Dict[str, List[Any]]", 0.0804413073814578], ["List[str]", 0.07810847593488297], ["Dict[str, Dict[str, Any]]", 0.0755300868219109], ["dict", 0.07383612225570689]], "error_job_already_completed": [["str", 0.0879805437326408], ["Dict[str, Any]", 0.08249735449765765]], "job_cancelled": [["Dict[str, Dict[str, Any]]", 0.3513723148494711], ["str", 0.19726294984007797], ["List[Dict[str, Any]]", 0.09325180261553957], ["int", 0.08686925190623489], ["list", 0.08686925190623489]], "job_id": [["str", 0.5935519468009696], ["bool", 0.11458039038470237], ["ClassVar[str]", 0.10674542269166204], ["Optional[str]", 0.09509558536557168]], "job_path": [["str", 0.7474981475507727], ["bool", 0.13129683131968956]], "project_id": [["str", 0.7347137634856533], ["List[str]", 0.18669062312473436]]}}], "name": "TestMLEngineHook", "q_name": "TestMLEngineHook", "variables": {}, "variables_p": {}}, {"cls_lc": [[863, 0], [1220, 9]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[864, 4], [869, 43]], "fn_var_ln": {"hook": [[869, 12], [869, 21]]}, "fn_var_occur": {"hook": [["self", "hook", "hook", "MLEngineHook"]]}, "name": "setup_method", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "hook", "hook", "MLEngineHook"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestMLEngineHookWithDefaultProjectId.setup_method", "ret_exprs": [], "ret_type": "", "variables": {"hook": ""}, "variables_p": {"hook": [["str", 0.30000000000000004], ["Dict[str, Any]", 0.1], ["dict", 0.1], ["int", 0.1]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[877, 4], [914, 9]], "fn_var_ln": {"create_version_response": [[901, 8], [901, 31]], "model_name": [[878, 8], [878, 18]], "model_path": [[882, 8], [882, 18]], "operation_done": [[883, 8], [883, 22]], "operation_path": [[881, 8], [881, 22]], "version": [[880, 8], [880, 15]], "version_name": [[879, 8], [879, 20]]}, "fn_var_occur": {"create_version_response": [["create_version_response", "self", "hook", "create_version", "model_name", "model_name", "version_spec", "version", "project_id", "GCP_PROJECT_ID_HOOK_UNIT_TEST"], ["create_version_response", "operation_done"]], "model_name": [["model_path", "GCP_PROJECT_ID_HOOK_UNIT_TEST", "model_name"], ["create_version_response", "self", "hook", "create_version", "model_name", "model_name", "version_spec", "version", "project_id", "GCP_PROJECT_ID_HOOK_UNIT_TEST"]], "model_path": [["model_path", "GCP_PROJECT_ID_HOOK_UNIT_TEST", "model_name"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "models", "versions", "create", "body", "version", "parent", "model_path", "mock", "call", "projects", "models", "versions", "create", "execute", "num_retries", "mock", "call", "projects", "operations", "get", "name", "version_name", "mock", "call", "projects", "operations", "get", "execute", "num_retries", "any_order", "True"]], "operation_done": [["operation_done", "operation_path", "True"], ["create_version_response", "operation_done"]], "operation_path": [["operation_path", "GCP_PROJECT_ID_HOOK_UNIT_TEST"], ["operation_done", "operation_path", "True"], ["mock_get_conn", "return_value", "projects", "return_value", "operations", "return_value", "get", "return_value", "execute", "return_value", "operation_path", "True"]], "version": [["version", "version_name"], ["mock_get_conn", "return_value", "projects", "return_value", "models", "return_value", "versions", "return_value", "create", "return_value", "execute", "return_value", "version"], ["create_version_response", "self", "hook", "create_version", "model_name", "model_name", "version_spec", "version", "project_id", "GCP_PROJECT_ID_HOOK_UNIT_TEST"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "models", "versions", "create", "body", "version", "parent", "model_path", "mock", "call", "projects", "models", "versions", "create", "execute", "num_retries", "mock", "call", "projects", "operations", "get", "name", "version_name", "mock", "call", "projects", "operations", "get", "execute", "num_retries", "any_order", "True"]], "version_name": [["version", "version_name"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "models", "versions", "create", "body", "version", "parent", "model_path", "mock", "call", "projects", "models", "versions", "create", "execute", "num_retries", "mock", "call", "projects", "operations", "get", "name", "version_name", "mock", "call", "projects", "operations", "get", "execute", "num_retries", "any_order", "True"]]}, "name": "test_create_version", "params": {"mock_get_conn": "", "mock_project_id": "", "self": ""}, "params_descr": {"mock_get_conn": "", "mock_project_id": "", "self": ""}, "params_occur": {"mock_get_conn": [["mock_get_conn", "return_value", "projects", "return_value", "models", "return_value", "versions", "return_value", "create", "return_value", "execute", "return_value", "version"], ["mock_get_conn", "return_value", "projects", "return_value", "operations", "return_value", "get", "return_value", "execute", "return_value", "operation_path", "True"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "models", "versions", "create", "body", "version", "parent", "model_path", "mock", "call", "projects", "models", "versions", "create", "execute", "num_retries", "mock", "call", "projects", "operations", "get", "name", "version_name", "mock", "call", "projects", "operations", "get", "execute", "num_retries", "any_order", "True"]], "mock_project_id": [], "self": [["create_version_response", "self", "hook", "create_version", "model_name", "model_name", "version_spec", "version", "project_id", "GCP_PROJECT_ID_HOOK_UNIT_TEST"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_conn": [["mock.MagicMock", 0.08888253562250299]], "mock_project_id": [["mock.Mock", 0.19148247197469503]], "self": []}, "q_name": "TestMLEngineHookWithDefaultProjectId.test_create_version", "ret_exprs": [], "ret_type": "", "variables": {"create_version_response": "", "model_name": "", "model_path": "", "operation_done": "", "operation_path": "", "version": "", "version_name": ""}, "variables_p": {"create_version_response": [["str", 0.523166653887301], ["Dict[str, int]", 0.3755530525983423]], "model_name": [["str", 0.7829400946750149], ["Dict[str, Tuple[str, Any]]", 0.10629281451495501]], "model_path": [["str", 0.8804553188036249]], "operation_done": [["int", 0.33729956881499873], ["str", 0.19627218865796947], ["List[Tuple[str, Any]]", 0.1305258874953459]], "operation_path": [["str", 0.8956567116323841]], "version": [["str", 0.7847232470550749], ["bytes", 0.21527675294492502]], "version_name": [["str", 0.5982203061533526], ["Dict[str, Union[Any, Any]]", 0.10863954569959815], ["Dict[str, Union[Any, str]]", 0.10255212902962021], ["List[str]", 0.09621818098827031], ["Dict[str, Union[Any, Any, Any, Any, Any, Any, Any]]", 0.09436983812915865]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[922, 4], [951, 9]], "fn_var_ln": {"model_name": [[923, 8], [923, 18]], "operation_done": [[927, 8], [927, 22]], "operation_path": [[925, 8], [925, 22]], "set_default_version_response": [[938, 8], [938, 36]], "version_name": [[924, 8], [924, 20]], "version_path": [[926, 8], [926, 20]]}, "fn_var_occur": {"model_name": [["version_path", "GCP_PROJECT_ID_HOOK_UNIT_TEST", "model_name", "version_name"], ["set_default_version_response", "self", "hook", "set_default_version", "model_name", "model_name", "version_name", "version_name", "project_id", "GCP_PROJECT_ID_HOOK_UNIT_TEST"]], "operation_done": [["operation_done", "operation_path", "True"], ["mock_get_conn", "return_value", "projects", "return_value", "models", "return_value", "versions", "return_value", "setDefault", "return_value", "execute", "return_value", "operation_done"], ["set_default_version_response", "operation_done"]], "operation_path": [["operation_path", "GCP_PROJECT_ID_HOOK_UNIT_TEST"], ["operation_done", "operation_path", "True"]], "set_default_version_response": [["set_default_version_response", "self", "hook", "set_default_version", "model_name", "model_name", "version_name", "version_name", "project_id", "GCP_PROJECT_ID_HOOK_UNIT_TEST"], ["set_default_version_response", "operation_done"]], "version_name": [["version_path", "GCP_PROJECT_ID_HOOK_UNIT_TEST", "model_name", "version_name"], ["set_default_version_response", "self", "hook", "set_default_version", "model_name", "model_name", "version_name", "version_name", "project_id", "GCP_PROJECT_ID_HOOK_UNIT_TEST"]], "version_path": [["version_path", "GCP_PROJECT_ID_HOOK_UNIT_TEST", "model_name", "version_name"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "models", "versions", "setDefault", "body", "name", "version_path", "mock", "call", "projects", "models", "versions", "setDefault", "execute", "num_retries", "any_order", "True"]]}, "name": "test_set_default_version", "params": {"mock_get_conn": "", "mock_project_id": "", "self": ""}, "params_descr": {"mock_get_conn": "", "mock_project_id": "", "self": ""}, "params_occur": {"mock_get_conn": [["mock_get_conn", "return_value", "projects", "return_value", "models", "return_value", "versions", "return_value", "setDefault", "return_value", "execute", "return_value", "operation_done"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "models", "versions", "setDefault", "body", "name", "version_path", "mock", "call", "projects", "models", "versions", "setDefault", "execute", "num_retries", "any_order", "True"]], "mock_project_id": [], "self": [["set_default_version_response", "self", "hook", "set_default_version", "model_name", "model_name", "version_name", "version_name", "project_id", "GCP_PROJECT_ID_HOOK_UNIT_TEST"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_conn": [["mock.MagicMock", 0.19743508039060653]], "mock_project_id": [["mock.Mock", 0.20247740355466268]], "self": []}, "q_name": "TestMLEngineHookWithDefaultProjectId.test_set_default_version", "ret_exprs": [], "ret_type": "", "variables": {"model_name": "", "operation_done": "", "operation_path": "", "set_default_version_response": "", "version_name": "", "version_path": ""}, "variables_p": {"model_name": [["str", 0.9068819947997828], ["Optional[str]", 0.0931180052002174]], "operation_done": [["int", 0.3941368551738269], ["str", 0.2990217421681408], ["Dict[str, Union[int, str]]", 0.1069564724104897], ["list", 0.10254125076982253], ["bytes", 0.09734367947771982]], "operation_path": [["str", 0.43022561249939595], ["list", 0.09019304361355425], ["bool", 0.08596937011046636]], "set_default_version_response": [["Dict[str, str]", 0.4114006209764699], ["Dict[str, Any]", 0.2077771976250627], ["dict", 0.19542594505504673], ["Dict[str, Optional[int]]", 0.09425739819268421], ["google.protobuf.reflection.GeneratedProtocolMessageType", 0.09113883815073663]], "version_name": [["str", 0.8006758510734312], ["Optional[str]", 0.09876666429937302]], "version_path": [["str", 0.8056485833659346]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[960, 4], [1000, 9]], "fn_var_ln": {"list_versions_response": [[981, 8], [981, 30]], "model_name": [[961, 8], [961, 18]], "model_path": [[962, 8], [962, 18]], "pages_requests": [[969, 8], [969, 22]], "response_bodies": [[964, 8], [964, 23]], "version_names": [[963, 8], [963, 21]], "versions_mock": [[970, 8], [970, 21]]}, "fn_var_occur": {"list_versions_response": [["list_versions_response", "self", "hook", "list_versions", "model_name", "model_name", "project_id", "GCP_PROJECT_ID_HOOK_UNIT_TEST"], ["list_versions_response", "version_names"]], "model_name": [["model_path", "GCP_PROJECT_ID_HOOK_UNIT_TEST", "model_name"], ["list_versions_response", "self", "hook", "list_versions", "model_name", "model_name", "project_id", "GCP_PROJECT_ID_HOOK_UNIT_TEST"]], "model_path": [["model_path", "GCP_PROJECT_ID_HOOK_UNIT_TEST", "model_name"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "models", "versions", "list", "pageSize", "parent", "model_path", "mock", "call", "projects", "models", "versions", "list", "execute", "num_retries", "mock", "call", "projects", "models", "versions", "list_next", "previous_request", "pages_requests", "i", "previous_response", "response_bodies", "i", "i", "range", "any_order", "True"]], "pages_requests": [["pages_requests", "mock", "Mock", "body", "body", "response_bodies"], ["versions_mock", "mock", "Mock", "pages_requests", "pages_requests", "None"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "models", "versions", "list", "pageSize", "parent", "model_path", "mock", "call", "projects", "models", "versions", "list", "execute", "num_retries", "mock", "call", "projects", "models", "versions", "list_next", "previous_request", "pages_requests", "i", "previous_response", "response_bodies", "i", "i", "range", "any_order", "True"]], "response_bodies": [["response_bodies", "ix", "ver", "ix", "ver", "enumerate", "version_names"], ["response_bodies", "pop"], ["pages_requests", "mock", "Mock", "body", "body", "response_bodies"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "models", "versions", "list", "pageSize", "parent", "model_path", "mock", "call", "projects", "models", "versions", "list", "execute", "num_retries", "mock", "call", "projects", "models", "versions", "list_next", "previous_request", "pages_requests", "i", "previous_response", "response_bodies", "i", "i", "range", "any_order", "True"]], "version_names": [["version_names", "ix", "ix", "range"], ["response_bodies", "ix", "ver", "ix", "ver", "enumerate", "version_names"], ["list_versions_response", "version_names"]], "versions_mock": [["versions_mock", "mock", "Mock", "pages_requests", "pages_requests", "None"], ["mock_get_conn", "return_value", "projects", "return_value", "models", "return_value", "versions", "return_value", "versions_mock"]]}, "name": "test_list_versions", "params": {"mock_get_conn": "", "mock_project_id": "", "mock_sleep": "", "self": ""}, "params_descr": {"mock_get_conn": "", "mock_project_id": "", "mock_sleep": "", "self": ""}, "params_occur": {"mock_get_conn": [["mock_get_conn", "return_value", "projects", "return_value", "models", "return_value", "versions", "return_value", "versions_mock"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "models", "versions", "list", "pageSize", "parent", "model_path", "mock", "call", "projects", "models", "versions", "list", "execute", "num_retries", "mock", "call", "projects", "models", "versions", "list_next", "previous_request", "pages_requests", "i", "previous_response", "response_bodies", "i", "i", "range", "any_order", "True"]], "mock_project_id": [], "mock_sleep": [], "self": [["list_versions_response", "self", "hook", "list_versions", "model_name", "model_name", "project_id", "GCP_PROJECT_ID_HOOK_UNIT_TEST"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_conn": [["mock.Mock", 0.10058699422856485]], "mock_project_id": [["mock.Mock", 0.27023306466043895]], "mock_sleep": [["mock.Mock", 0.27023306466043895]], "self": []}, "q_name": "TestMLEngineHookWithDefaultProjectId.test_list_versions", "ret_exprs": [], "ret_type": "", "variables": {"list_versions_response": "", "model_name": "", "model_path": "", "pages_requests": "", "response_bodies": "", "version_names": "", "versions_mock": ""}, "variables_p": {"list_versions_response": [["Dict[Any, str]", 0.790154572157228], ["Dict[str, List[Any]]", 0.11083036752484572], ["str", 0.09901506031792612]], "model_name": [["str", 0.803712301523109], ["list", 0.10315035400562943]], "model_path": [["str", 0.8122115538323413], ["Dict[str, Any]", 0.09401419058950879], ["list", 0.09377425557814979]], "pages_requests": [["str", 0.13872945030140382], ["int", 0.09462998008231625], ["mock.MagicMock", 0.089206611811792]], "response_bodies": [["Dict[str, Dict[str, Any]]", 0.19298512744425275], ["Dict[str, str]", 0.10686486280864801], ["Dict[str, Any]", 0.09712890946414546], ["raiden.utils.list", 0.09287836509024293]], "version_names": [["str", 0.6782473813607868], ["Set[str]", 0.1282146183251071], ["dict", 0.09601085921441571]], "versions_mock": [["mock.Mock", 0.30592871187592485]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1008, 4], [1048, 9]], "fn_var_ln": {"delete_version_response": [[1035, 8], [1035, 31]], "model_name": [[1009, 8], [1009, 18]], "operation_done": [[1016, 8], [1016, 22]], "operation_not_done": [[1015, 8], [1015, 26]], "operation_path": [[1012, 8], [1012, 22]], "version": [[1014, 8], [1014, 15]], "version_name": [[1010, 8], [1010, 20]], "version_path": [[1013, 8], [1013, 20]]}, "fn_var_occur": {"delete_version_response": [["delete_version_response", "self", "hook", "delete_version", "model_name", "model_name", "version_name", "version_name", "project_id", "GCP_PROJECT_ID_HOOK_UNIT_TEST"], ["delete_version_response", "operation_done"]], "model_name": [["version_path", "GCP_PROJECT_ID_HOOK_UNIT_TEST", "model_name", "version_name"], ["delete_version_response", "self", "hook", "delete_version", "model_name", "model_name", "version_name", "version_name", "project_id", "GCP_PROJECT_ID_HOOK_UNIT_TEST"]], "operation_done": [["operation_done", "operation_path", "True"], ["mock_get_conn", "return_value", "projects", "return_value", "operations", "return_value", "get", "return_value", "execute", "side_effect", "operation_not_done", "operation_done"], ["delete_version_response", "operation_done"]], "operation_not_done": [["operation_not_done", "operation_path", "False"], ["mock_get_conn", "return_value", "projects", "return_value", "operations", "return_value", "get", "return_value", "execute", "side_effect", "operation_not_done", "operation_done"]], "operation_path": [["operation_path", "GCP_PROJECT_ID_HOOK_UNIT_TEST"], ["version", "operation_path"], ["operation_not_done", "operation_path", "False"], ["operation_done", "operation_path", "True"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "models", "versions", "delete", "name", "version_path", "mock", "call", "projects", "models", "versions", "delete", "execute", "num_retries", "mock", "call", "projects", "operations", "get", "name", "operation_path", "mock", "call", "projects", "operations", "get", "execute", "num_retries", "any_order", "True"]], "version": [["version", "operation_path"], ["mock_get_conn", "return_value", "projects", "return_value", "models", "return_value", "versions", "return_value", "delete", "return_value", "execute", "return_value", "version"]], "version_name": [["version_path", "GCP_PROJECT_ID_HOOK_UNIT_TEST", "model_name", "version_name"], ["delete_version_response", "self", "hook", "delete_version", "model_name", "model_name", "version_name", "version_name", "project_id", "GCP_PROJECT_ID_HOOK_UNIT_TEST"]], "version_path": [["version_path", "GCP_PROJECT_ID_HOOK_UNIT_TEST", "model_name", "version_name"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "models", "versions", "delete", "name", "version_path", "mock", "call", "projects", "models", "versions", "delete", "execute", "num_retries", "mock", "call", "projects", "operations", "get", "name", "operation_path", "mock", "call", "projects", "operations", "get", "execute", "num_retries", "any_order", "True"]]}, "name": "test_delete_version", "params": {"mock_get_conn": "", "mock_project_id": "", "self": ""}, "params_descr": {"mock_get_conn": "", "mock_project_id": "", "self": ""}, "params_occur": {"mock_get_conn": [["mock_get_conn", "return_value", "projects", "return_value", "operations", "return_value", "get", "return_value", "execute", "side_effect", "operation_not_done", "operation_done"], ["mock_get_conn", "return_value", "projects", "return_value", "models", "return_value", "versions", "return_value", "delete", "return_value", "execute", "return_value", "version"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "models", "versions", "delete", "name", "version_path", "mock", "call", "projects", "models", "versions", "delete", "execute", "num_retries", "mock", "call", "projects", "operations", "get", "name", "operation_path", "mock", "call", "projects", "operations", "get", "execute", "num_retries", "any_order", "True"]], "mock_project_id": [], "self": [["delete_version_response", "self", "hook", "delete_version", "model_name", "model_name", "version_name", "version_name", "project_id", "GCP_PROJECT_ID_HOOK_UNIT_TEST"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_conn": [], "mock_project_id": [["mock.Mock", 0.1964474261206567]], "self": []}, "q_name": "TestMLEngineHookWithDefaultProjectId.test_delete_version", "ret_exprs": [], "ret_type": "", "variables": {"delete_version_response": "", "model_name": "", "operation_done": "", "operation_not_done": "", "operation_path": "", "version": "", "version_name": "", "version_path": ""}, "variables_p": {"delete_version_response": [["Dict[str, Any]", 0.22949944347661635], ["list", 0.18505440532040404], ["DefaultDict[Any, List[Any]]", 0.1056074850390335], ["str", 0.10237740073992815], ["List[Dict[str, Any]]", 0.09492272988683116], ["dict", 0.09466770681692438], ["int", 0.09423348328241002], ["deque", 0.0936373454378524]], "model_name": [["str", 0.6711714758122368]], "operation_done": [["float", 0.4472971118394042], ["int", 0.18855944597130214], ["list", 0.1194139568944103], ["Dict[str, Union[Any, Any, Any, Any]]", 0.08433936071519392], ["str", 0.08037754578290363], ["Dict[int, Any]", 0.08001257879678585]], "operation_not_done": [["Dict[str, str]", 0.60825052764484], ["int", 0.3917494723551599]], "operation_path": [["str", 0.3870886221736829], ["waterbutler.providers.bitbuckepath.BitbucketPath", 0.11816175926599186]], "version": [["str", 1.0]], "version_name": [["str", 0.5654921818530241], ["list", 0.09078640786743065]], "version_path": [["str", 0.8056485833659346]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1056, 4], [1079, 9]], "fn_var_ln": {"create_model_response": [[1071, 8], [1071, 29]], "model": [[1058, 8], [1058, 13]], "model_name": [[1057, 8], [1057, 18]], "project_path": [[1061, 8], [1061, 20]]}, "fn_var_occur": {"create_model_response": [["create_model_response", "self", "hook", "create_model", "model", "model", "project_id", "GCP_PROJECT_ID_HOOK_UNIT_TEST"], ["create_model_response", "model"]], "model": [["model", "model_name"], ["mock_get_conn", "return_value", "projects", "return_value", "models", "return_value", "create", "return_value", "execute", "return_value", "model"], ["create_model_response", "self", "hook", "create_model", "model", "model", "project_id", "GCP_PROJECT_ID_HOOK_UNIT_TEST"], ["create_model_response", "model"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "models", "create", "body", "model", "parent", "project_path", "mock", "call", "projects", "models", "create", "execute", "num_retries"]], "model_name": [["model", "model_name"]], "project_path": [["project_path", "GCP_PROJECT_ID_HOOK_UNIT_TEST"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "models", "create", "body", "model", "parent", "project_path", "mock", "call", "projects", "models", "create", "execute", "num_retries"]]}, "name": "test_create_model", "params": {"mock_get_conn": "", "mock_project_id": "", "self": ""}, "params_descr": {"mock_get_conn": "", "mock_project_id": "", "self": ""}, "params_occur": {"mock_get_conn": [["mock_get_conn", "return_value", "projects", "return_value", "models", "return_value", "create", "return_value", "execute", "return_value", "model"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "models", "create", "body", "model", "parent", "project_path", "mock", "call", "projects", "models", "create", "execute", "num_retries"]], "mock_project_id": [], "self": [["create_model_response", "self", "hook", "create_model", "model", "model", "project_id", "GCP_PROJECT_ID_HOOK_UNIT_TEST"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_conn": [["mock.MagicMock", 0.09067489653427437]], "mock_project_id": [["mock.Mock", 0.20250729461232256]], "self": []}, "q_name": "TestMLEngineHookWithDefaultProjectId.test_create_model", "ret_exprs": [], "ret_type": "", "variables": {"create_model_response": "", "model": "", "model_name": "", "project_path": ""}, "variables_p": {"create_model_response": [["Dict[str, List[str]]", 0.31504570967364803], ["str", 0.17681495990137186], ["List[Tuple[str, str]]", 0.12857211355966994], ["list", 0.09769937029199528], ["Dict[Optional[str], str]", 0.09643513949104003]], "model": [["str", 0.2948266578147101], ["list", 0.109182091339937], ["Union[Literal, Literal]", 0.10503901259435845], ["dict", 0.09213020704359584], ["Dict[str, str]", 0.09189704915989645]], "model_name": [["str", 0.37302526880921694], ["Tuple[str, str, str, str, str]", 0.1253949462381566], ["List[str]", 0.1253949462381566], ["Tuple[str, str, str]", 0.1253949462381566], ["frozenset[str]", 0.1253949462381566]], "project_path": [["str", 1.0]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1087, 4], [1110, 9]], "fn_var_ln": {"get_model_response": [[1100, 8], [1100, 26]], "model": [[1089, 8], [1089, 13]], "model_name": [[1088, 8], [1088, 18]], "model_path": [[1090, 8], [1090, 18]]}, "fn_var_occur": {"get_model_response": [["get_model_response", "self", "hook", "get_model", "model_name", "model_name", "project_id", "GCP_PROJECT_ID_HOOK_UNIT_TEST"], ["get_model_response", "model"]], "model": [["model", "model_name"], ["mock_get_conn", "return_value", "projects", "return_value", "models", "return_value", "get", "return_value", "execute", "return_value", "model"], ["get_model_response", "model"]], "model_name": [["model", "model_name"], ["model_path", "GCP_PROJECT_ID_HOOK_UNIT_TEST", "model_name"], ["get_model_response", "self", "hook", "get_model", "model_name", "model_name", "project_id", "GCP_PROJECT_ID_HOOK_UNIT_TEST"]], "model_path": [["model_path", "GCP_PROJECT_ID_HOOK_UNIT_TEST", "model_name"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "models", "get", "name", "model_path", "mock", "call", "projects", "models", "get", "execute", "num_retries"]]}, "name": "test_get_model", "params": {"mock_get_conn": "", "mock_project_id": "", "self": ""}, "params_descr": {"mock_get_conn": "", "mock_project_id": "", "self": ""}, "params_occur": {"mock_get_conn": [["mock_get_conn", "return_value", "projects", "return_value", "models", "return_value", "get", "return_value", "execute", "return_value", "model"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "models", "get", "name", "model_path", "mock", "call", "projects", "models", "get", "execute", "num_retries"]], "mock_project_id": [], "self": [["get_model_response", "self", "hook", "get_model", "model_name", "model_name", "project_id", "GCP_PROJECT_ID_HOOK_UNIT_TEST"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_conn": [["mock.MagicMock", 0.302145553037364]], "mock_project_id": [["mock.Mock", 0.21284156167233914]], "self": []}, "q_name": "TestMLEngineHookWithDefaultProjectId.test_get_model", "ret_exprs": [], "ret_type": "", "variables": {"get_model_response": "", "model": "", "model_name": "", "model_path": ""}, "variables_p": {"get_model_response": [["Dict[str, str]", 0.4147037933597206], ["Dict[str, Any]", 0.19933983084742393], ["Dict[str, int]", 0.09128719426913286], ["List[str]", 0.08872384853058383]], "model": [["Dict[str, str]", 0.20012786311468764], ["str", 0.19788116878252954], ["list", 0.10833463963719844], ["Dict[str, int]", 0.10083653395863137], ["Union[Literal, Literal]", 0.09161470778975334]], "model_name": [["str", 0.8114310610292166], ["Dict[str, Tuple[str, Any]]", 0.09840013948926855], ["int", 0.09016879948151496]], "model_path": [["str", 0.6016284941290765], ["Optional[str]", 0.11078554155645615], ["int", 0.09641237327108157]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1118, 4], [1138, 9]], "fn_var_ln": {"model": [[1120, 8], [1120, 13]], "model_name": [[1119, 8], [1119, 18]], "model_path": [[1121, 8], [1121, 18]]}, "fn_var_occur": {"model": [["model", "model_name"], ["mock_get_conn", "return_value", "projects", "return_value", "models", "return_value", "delete", "return_value", "execute", "return_value", "model"]], "model_name": [["model", "model_name"], ["model_path", "GCP_PROJECT_ID_HOOK_UNIT_TEST", "model_name"], ["self", "hook", "delete_model", "model_name", "model_name", "project_id", "GCP_PROJECT_ID_HOOK_UNIT_TEST"]], "model_path": [["model_path", "GCP_PROJECT_ID_HOOK_UNIT_TEST", "model_name"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "models", "delete", "name", "model_path", "mock", "call", "projects", "models", "delete", "execute", "num_retries"]]}, "name": "test_delete_model", "params": {"mock_get_conn": "", "mock_project_id": "", "self": ""}, "params_descr": {"mock_get_conn": "", "mock_project_id": "", "self": ""}, "params_occur": {"mock_get_conn": [["mock_get_conn", "return_value", "projects", "return_value", "models", "return_value", "delete", "return_value", "execute", "return_value", "model"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "models", "delete", "name", "model_path", "mock", "call", "projects", "models", "delete", "execute", "num_retries"]], "mock_project_id": [], "self": [["self", "hook", "delete_model", "model_name", "model_name", "project_id", "GCP_PROJECT_ID_HOOK_UNIT_TEST"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_conn": [["mock.MagicMock", 0.18855337204311817]], "mock_project_id": [["mock.Mock", 0.20862984604332488]], "self": []}, "q_name": "TestMLEngineHookWithDefaultProjectId.test_delete_model", "ret_exprs": [], "ret_type": "", "variables": {"model": "", "model_name": "", "model_path": ""}, "variables_p": {"model": [["str", 0.3157983114759046], ["list", 0.10785327945719148], ["Dict[str, str]", 0.10210853958436357], ["Dict[str, int]", 0.0945755603979475]], "model_name": [["str", 0.9043198989137109], ["list", 0.09568010108628891]], "model_path": [["str", 0.5776259250299822], ["Optional[str]", 0.11578504280338435], ["int", 0.10533622827532803]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1147, 4], [1189, 9]], "fn_var_ln": {"create_job_response": [[1179, 8], [1179, 27]], "job_id": [[1148, 8], [1148, 14]], "job_path": [[1150, 8], [1150, 16]], "job_queued": [[1159, 8], [1159, 18]], "job_succeeded": [[1155, 8], [1155, 21]], "new_job": [[1151, 8], [1151, 15]], "project_path": [[1149, 8], [1149, 20]]}, "fn_var_occur": {"create_job_response": [["create_job_response", "self", "hook", "create_job", "job", "new_job", "project_id", "GCP_PROJECT_ID_HOOK_UNIT_TEST"], ["create_job_response", "job_succeeded"]], "job_id": [["job_path", "GCP_PROJECT_ID_HOOK_UNIT_TEST", "job_id"], ["new_job", "job_id"], ["job_succeeded", "job_id"], ["job_queued", "job_id"]], "job_path": [["job_path", "GCP_PROJECT_ID_HOOK_UNIT_TEST", "job_id"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "jobs", "create", "body", "new_job", "parent", "project_path", "mock", "call", "projects", "jobs", "get", "name", "job_path", "mock", "call", "projects", "jobs", "get", "execute", "num_retries", "any_order", "True"]], "job_queued": [["job_queued", "job_id"], ["mock_get_conn", "return_value", "projects", "return_value", "jobs", "return_value", "create", "return_value", "execute", "return_value", "job_queued"], ["mock_get_conn", "return_value", "projects", "return_value", "jobs", "return_value", "get", "return_value", "execute", "side_effect", "job_queued", "job_succeeded"]], "job_succeeded": [["job_succeeded", "job_id"], ["mock_get_conn", "return_value", "projects", "return_value", "jobs", "return_value", "get", "return_value", "execute", "side_effect", "job_queued", "job_succeeded"], ["create_job_response", "job_succeeded"]], "new_job": [["new_job", "job_id"], ["create_job_response", "self", "hook", "create_job", "job", "new_job", "project_id", "GCP_PROJECT_ID_HOOK_UNIT_TEST"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "jobs", "create", "body", "new_job", "parent", "project_path", "mock", "call", "projects", "jobs", "get", "name", "job_path", "mock", "call", "projects", "jobs", "get", "execute", "num_retries", "any_order", "True"]], "project_path": [["project_path", "GCP_PROJECT_ID_HOOK_UNIT_TEST"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "jobs", "create", "body", "new_job", "parent", "project_path", "mock", "call", "projects", "jobs", "get", "name", "job_path", "mock", "call", "projects", "jobs", "get", "execute", "num_retries", "any_order", "True"]]}, "name": "test_create_mlengine_job", "params": {"mock_get_conn": "", "mock_project_id": "", "mock_sleep": "", "self": ""}, "params_descr": {"mock_get_conn": "", "mock_project_id": "", "mock_sleep": "", "self": ""}, "params_occur": {"mock_get_conn": [["mock_get_conn", "return_value", "projects", "return_value", "jobs", "return_value", "create", "return_value", "execute", "return_value", "job_queued"], ["mock_get_conn", "return_value", "projects", "return_value", "jobs", "return_value", "get", "return_value", "execute", "side_effect", "job_queued", "job_succeeded"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "jobs", "create", "body", "new_job", "parent", "project_path", "mock", "call", "projects", "jobs", "get", "name", "job_path", "mock", "call", "projects", "jobs", "get", "execute", "num_retries", "any_order", "True"]], "mock_project_id": [], "mock_sleep": [], "self": [["create_job_response", "self", "hook", "create_job", "job", "new_job", "project_id", "GCP_PROJECT_ID_HOOK_UNIT_TEST"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_conn": [], "mock_project_id": [["mock.Mock", 0.26157350800415713]], "mock_sleep": [["mock.Mock", 0.26157350800415713]], "self": []}, "q_name": "TestMLEngineHookWithDefaultProjectId.test_create_mlengine_job", "ret_exprs": [], "ret_type": "", "variables": {"create_job_response": "", "job_id": "", "job_path": "", "job_queued": "", "job_succeeded": "", "new_job": "", "project_path": ""}, "variables_p": {"create_job_response": [["str", 0.23997818884177669], ["List[str]", 0.1086585173613737], ["Dict[str, int]", 0.10491476904417932], ["Dict[str, str]", 0.0940611121119443], ["Pattern[str]", 0.09131213835174874], ["Dict[Optional[str], str]", 0.08958654206682232], ["List[dict]", 0.08566245618790422], ["Dict[Any, str]", 0.08212585733346064]], "job_id": [["str", 0.7208206345068155], ["ClassVar[str]", 0.1048747883837513], ["Dict[str, int]", 0.08742036729239852], ["int", 0.08688420981703439]], "job_path": [["str", 0.8725755748798083], ["Dict[str, Dict[str, Any]]", 0.12742442512019167]], "job_queued": [["Dict[str, Dict[str, str]]", 0.20015390099364938]], "job_succeeded": [["str", 0.25660446525818753], ["Dict[str, Dict[str, str]]", 0.12792264241010792], ["Dict[str, Dict[str, Any]]", 0.07759381613931778]], "new_job": [["str", 0.417655078157923], ["int", 0.09697327473702676], ["Dict[str, str]", 0.09335771369065916], ["dict", 0.08746274205156485]], "project_path": [["str", 1.0]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1197, 4], [1220, 9]], "fn_var_ln": {"cancel_job_response": [[1211, 8], [1211, 27]], "job_cancelled": [[1201, 8], [1201, 21]], "job_id": [[1198, 8], [1198, 14]], "job_path": [[1199, 8], [1199, 16]]}, "fn_var_occur": {"cancel_job_response": [["cancel_job_response", "self", "hook", "cancel_job", "job_id", "job_id", "project_id", "GCP_PROJECT_ID_HOOK_UNIT_TEST"], ["cancel_job_response", "job_cancelled"]], "job_cancelled": [["mock_get_conn", "return_value", "projects", "return_value", "jobs", "return_value", "cancel", "return_value", "execute", "return_value", "job_cancelled"], ["cancel_job_response", "job_cancelled"]], "job_id": [["job_path", "GCP_PROJECT_ID_HOOK_UNIT_TEST", "job_id"], ["cancel_job_response", "self", "hook", "cancel_job", "job_id", "job_id", "project_id", "GCP_PROJECT_ID_HOOK_UNIT_TEST"]], "job_path": [["job_path", "GCP_PROJECT_ID_HOOK_UNIT_TEST", "job_id"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "jobs", "cancel", "name", "job_path", "mock", "call", "projects", "jobs", "cancel", "execute", "num_retries", "any_order", "True"]]}, "name": "test_cancel_mlengine_job", "params": {"mock_get_conn": "", "mock_project_id": "", "self": ""}, "params_descr": {"mock_get_conn": "", "mock_project_id": "", "self": ""}, "params_occur": {"mock_get_conn": [["mock_get_conn", "return_value", "projects", "return_value", "jobs", "return_value", "cancel", "return_value", "execute", "return_value", "job_cancelled"], ["mock_get_conn", "assert_has_calls", "mock", "call", "projects", "jobs", "cancel", "name", "job_path", "mock", "call", "projects", "jobs", "cancel", "execute", "num_retries", "any_order", "True"]], "mock_project_id": [], "self": [["cancel_job_response", "self", "hook", "cancel_job", "job_id", "job_id", "project_id", "GCP_PROJECT_ID_HOOK_UNIT_TEST"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_conn": [], "mock_project_id": [["mock.Mock", 0.1947540123288775]], "self": []}, "q_name": "TestMLEngineHookWithDefaultProjectId.test_cancel_mlengine_job", "ret_exprs": [], "ret_type": "", "variables": {"cancel_job_response": "", "job_cancelled": "", "job_id": "", "job_path": ""}, "variables_p": {"cancel_job_response": [["Dict[str, List[Any]]", 0.44940692054373216], ["str", 0.32337273745551726], ["Dict[str, List[str]]", 0.14925197094734158], ["Dict[str, Union[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any]]", 0.07796837105340901]], "job_cancelled": [["Dict[str, Dict[str, Any]]", 0.3513723148494711], ["str", 0.19726294984007797], ["List[Dict[str, Any]]", 0.09325180261553957], ["int", 0.08686925190623489], ["list", 0.08686925190623489]], "job_id": [["str", 0.2068149265119827], ["Optional[str]", 0.09997663617004517], ["int", 0.09245215075334741]], "job_path": [["str", 1.0]]}}], "name": "TestMLEngineHookWithDefaultProjectId", "q_name": "TestMLEngineHookWithDefaultProjectId", "variables": {}, "variables_p": {}}], "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1223, 0], [1224, 22]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "session", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "session", "ret_exprs": ["return mock.Mock()"], "ret_type": "", "ret_type_p": [["tests.e2e.Helper", 0.31003709405226776], ["str", 0.10582916912486787], ["aiohttp.web.Application", 0.09956461621780334], ["Tuple[Callable, Callable]", 0.09651368528888478]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1229, 0], [1233, 5]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_async_get_job_should_execute_successfully", "params": {"mocked_link": ""}, "params_descr": {"mocked_link": ""}, "params_occur": {"mocked_link": [["mocked_link", "assert_awaited_once_with", "url", "pytest", "PROJECT_ID", "pytest", "JOB_ID", "session", "session"]]}, "params_p": {"args": [], "kwargs": [], "mocked_link": [["tests.test_util.aiohttp.AiohttpClientMocker", 0.23119581035515774], ["mock.Mock", 0.21073391301800598]]}, "q_name": "test_async_get_job_should_execute_successfully", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1237, 0], [1241, 102]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_async_get_job_should_fail_if_no_job_id", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "test_async_get_job_should_fail_if_no_job_id", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1245, 0], [1247, 98]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_async_get_job_should_fail_if_no_project_id", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "test_async_get_job_should_fail_if_no_project_id", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1252, 0], [1269, 34]], "fn_var_ln": {"job_status": [[1267, 4], [1267, 14]], "return_value": [[1253, 4], [1253, 27]]}, "fn_var_occur": {"job_status": [["job_status", "pytest", "mlengine_hook", "get_job_status", "job_id", "pytest", "JOB_ID", "project_id", "pytest", "PROJECT_ID"]], "return_value": [["mocked_get", "return_value", "ClientResponse", "URL", "pytest", "PROJECT_ID", "pytest", "JOB_ID", "request_info", "mock", "Mock", "writer", "mock", "Mock", "continue100", "None", "timer", "TimerNoop", "traces", "loop", "mock", "Mock", "session", "session"], ["mocked_get", "return_value", "_headers"], ["mocked_get", "return_value", "_body"]]}, "name": "test_async_get_job_status_should_execute_successfully", "params": {"mocked_get": ""}, "params_descr": {"mocked_get": ""}, "params_occur": {"mocked_get": [["mocked_get", "return_value", "ClientResponse", "URL", "pytest", "PROJECT_ID", "pytest", "JOB_ID", "request_info", "mock", "Mock", "writer", "mock", "Mock", "continue100", "None", "timer", "TimerNoop", "traces", "loop", "mock", "Mock", "session", "session"], ["mocked_get", "return_value", "_headers"], ["mocked_get", "return_value", "_body"], ["mocked_get", "assert_awaited_once"]]}, "params_p": {"args": [], "kwargs": [], "mocked_get": []}, "q_name": "test_async_get_job_status_should_execute_successfully", "ret_exprs": [], "ret_type": "", "variables": {"job_status": "", "return_value": ""}, "variables_p": {"job_status": [["str", 0.1937604577168104], ["dict", 0.12356176779285757], ["int", 0.12303212093946544], ["List[str]", 0.0804448948524422]], "return_value": [["str", 0.9286783363493091], ["Dict[str, Union[Any, Any]]", 0.07132166365069098]]}}, {"docstring": {"func": "Assets that the MLEngineAsyncHook returns a pending response when job is still in running state", "long_descr": null, "ret": null}, "fn_lc": [[1274, 0], [1292, 34]], "fn_var_ln": {"job_status": [[1290, 4], [1290, 14]], "return_value": [[1276, 4], [1276, 27]]}, "fn_var_occur": {"job_status": [["job_status", "pytest", "mlengine_hook", "get_job_status", "job_id", "pytest", "JOB_ID", "project_id", "pytest", "PROJECT_ID"]], "return_value": [["mocked_get", "return_value", "ClientResponse", "URL", "pytest", "PROJECT_ID", "pytest", "JOB_ID", "request_info", "mock", "Mock", "writer", "mock", "Mock", "continue100", "None", "timer", "TimerNoop", "traces", "loop", "mock", "Mock", "session", "session"], ["mocked_get", "return_value", "_headers"], ["mocked_get", "return_value", "_body"]]}, "name": "test_async_get_job_status_still_running_should_execute_successfully", "params": {"mocked_get": ""}, "params_descr": {"mocked_get": ""}, "params_occur": {"mocked_get": [["mocked_get", "return_value", "ClientResponse", "URL", "pytest", "PROJECT_ID", "pytest", "JOB_ID", "request_info", "mock", "Mock", "writer", "mock", "Mock", "continue100", "None", "timer", "TimerNoop", "traces", "loop", "mock", "Mock", "session", "session"], ["mocked_get", "return_value", "_headers"], ["mocked_get", "return_value", "_body"], ["mocked_get", "assert_awaited_once"]]}, "params_p": {"args": [], "kwargs": [], "mocked_get": []}, "q_name": "test_async_get_job_status_still_running_should_execute_successfully", "ret_exprs": [], "ret_type": "", "variables": {"job_status": "", "return_value": ""}, "variables_p": {"job_status": [["str", 0.1937604577168104], ["dict", 0.12356176779285757], ["int", 0.12303212093946544], ["List[str]", 0.0804448948524422]], "return_value": [["str", 0.9286783363493091], ["Dict[str, Union[Any, Any]]", 0.07132166365069098]]}}, {"docstring": {"func": "Assets that the MLEngineAsyncHook returns a pending response when OSError is raised", "long_descr": null, "ret": null}, "fn_lc": [[1297, 0], [1303, 34]], "fn_var_ln": {"job_status": [[1301, 4], [1301, 14]], "side_effect": [[1299, 4], [1299, 26]]}, "fn_var_occur": {"job_status": [["job_status", "pytest", "mlengine_hook", "get_job_status", "job_id", "pytest", "JOB_ID", "project_id", "pytest", "PROJECT_ID"]], "side_effect": [["mocked_get", "side_effect", "OSError"]]}, "name": "test_async_get_job_status_with_oserror_should_execute_successfully", "params": {"mocked_get": ""}, "params_descr": {"mocked_get": ""}, "params_occur": {"mocked_get": [["mocked_get", "side_effect", "OSError"], ["mocked_get", "assert_awaited_once"]]}, "params_p": {"args": [], "kwargs": [], "mocked_get": []}, "q_name": "test_async_get_job_status_with_oserror_should_execute_successfully", "ret_exprs": [], "ret_type": "", "variables": {"job_status": "", "side_effect": ""}, "variables_p": {"job_status": [["str", 0.1937604577168104], ["dict", 0.12356176779285757], ["int", 0.12303212093946544], ["List[str]", 0.0804448948524422]], "side_effect": [["str", 0.46146968833119484], ["List[Dict[str, float]]", 0.10543346334745063], ["Dict[str, Dict[str, str]]", 0.0831681400737581]]}}, {"docstring": {"func": "Assets that the logging is done correctly when MLEngineAsyncHook raises Exception", "long_descr": null, "ret": null}, "fn_lc": [[1308, 0], [1313, 67]], "fn_var_ln": {"side_effect": [[1310, 4], [1310, 26]]}, "fn_var_occur": {"side_effect": [["mocked_get", "side_effect", "Exception"]]}, "name": "test_async_get_job_status_with_exception_should_execute_successfully", "params": {"caplog": "", "mocked_get": ""}, "params_descr": {"caplog": "", "mocked_get": ""}, "params_occur": {"caplog": [["caplog", "text"]], "mocked_get": [["mocked_get", "side_effect", "Exception"]]}, "params_p": {"args": [], "caplog": [], "kwargs": [], "mocked_get": [["mock.Mock", 0.09446162348890924], ["mock.MagicMock", 0.05646960845676635], ["tests.test_util.aiohttp.AiohttpClientMocker", 0.05089760317709082]]}, "q_name": "test_async_get_job_status_with_exception_should_execute_successfully", "ret_exprs": [], "ret_type": "", "variables": {"side_effect": ""}, "variables_p": {"side_effect": [["str", 0.46146968833119484], ["List[Dict[str, float]]", 0.10543346334745063], ["Dict[str, Dict[str, str]]", 0.0831681400737581]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1317, 0], [1321, 92]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_async_get_job_status_should_fail_if_no_job_id", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "test_async_get_job_status_should_fail_if_no_job_id", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1325, 0], [1327, 88]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_async_get_job_status_should_fail_if_no_project_id", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "test_async_get_job_status_should_fail_if_no_project_id", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "imports": ["__future__", "annotations", "json", "copy", "deepcopy", "unittest", "mock", "unittest", "mock", "PropertyMock", "httplib2", "pytest", "aiohttp", "ClientResponse", "aiohttp", "helpers", "TimerNoop", "googleapiclient", "errors", "HttpError", "yarl", "URL", "airflow", "AirflowException", "airflow", "providers", "google", "cloud", "hooks", "mlengine", "hook", "airflow", "providers", "google", "cloud", "hooks", "mlengine", "MLEngineAsyncHook", "tests", "providers", "google", "cloud", "utils", "base_gcp_mock", "GCP_PROJECT_ID_HOOK_UNIT_TEST", "mock_base_gcp_hook_default_project_id"], "mod_var_ln": {"JOB_ID": [[41, 0], [41, 13]], "PROJECT_ID": [[40, 0], [40, 17]], "mlengine_hook": [[39, 0], [39, 20]]}, "mod_var_occur": {"JOB_ID": [["pytest", "mlengine_hook", "get_job", "project_id", "pytest", "PROJECT_ID", "job_id", "pytest", "JOB_ID", "session", "session"], ["mocked_link", "assert_awaited_once_with", "url", "pytest", "PROJECT_ID", "pytest", "JOB_ID", "session", "session"], ["pytest", "mlengine_hook", "get_job", "project_id", "None", "job_id", "pytest", "JOB_ID", "session", "session"], ["mocked_get", "return_value", "ClientResponse", "URL", "pytest", "PROJECT_ID", "pytest", "JOB_ID", "request_info", "mock", "Mock", "writer", "mock", "Mock", "continue100", "None", "timer", "TimerNoop", "traces", "loop", "mock", "Mock", "session", "session"], ["job_status", "pytest", "mlengine_hook", "get_job_status", "job_id", "pytest", "JOB_ID", "project_id", "pytest", "PROJECT_ID"], ["mocked_get", "return_value", "ClientResponse", "URL", "pytest", "PROJECT_ID", "pytest", "JOB_ID", "request_info", "mock", "Mock", "writer", "mock", "Mock", "continue100", "None", "timer", "TimerNoop", "traces", "loop", "mock", "Mock", "session", "session"], ["job_status", "pytest", "mlengine_hook", "get_job_status", "job_id", "pytest", "JOB_ID", "project_id", "pytest", "PROJECT_ID"], ["job_status", "pytest", "mlengine_hook", "get_job_status", "job_id", "pytest", "JOB_ID", "project_id", "pytest", "PROJECT_ID"], ["pytest", "mlengine_hook", "get_job_status", "job_id", "pytest", "JOB_ID", "project_id", "pytest", "PROJECT_ID"], ["pytest", "mlengine_hook", "get_job_status", "project_id", "None", "job_id", "pytest", "JOB_ID"]], "PROJECT_ID": [["pytest", "mlengine_hook", "get_job", "project_id", "pytest", "PROJECT_ID", "job_id", "pytest", "JOB_ID", "session", "session"], ["mocked_link", "assert_awaited_once_with", "url", "pytest", "PROJECT_ID", "pytest", "JOB_ID", "session", "session"], ["pytest", "mlengine_hook", "get_job", "project_id", "pytest", "PROJECT_ID", "job_id", "None", "session", "session"], ["mocked_get", "return_value", "ClientResponse", "URL", "pytest", "PROJECT_ID", "pytest", "JOB_ID", "request_info", "mock", "Mock", "writer", "mock", "Mock", "continue100", "None", "timer", "TimerNoop", "traces", "loop", "mock", "Mock", "session", "session"], ["job_status", "pytest", "mlengine_hook", "get_job_status", "job_id", "pytest", "JOB_ID", "project_id", "pytest", "PROJECT_ID"], ["mocked_get", "return_value", "ClientResponse", "URL", "pytest", "PROJECT_ID", "pytest", "JOB_ID", "request_info", "mock", "Mock", "writer", "mock", "Mock", "continue100", "None", "timer", "TimerNoop", "traces", "loop", "mock", "Mock", "session", "session"], ["job_status", "pytest", "mlengine_hook", "get_job_status", "job_id", "pytest", "JOB_ID", "project_id", "pytest", "PROJECT_ID"], ["job_status", "pytest", "mlengine_hook", "get_job_status", "job_id", "pytest", "JOB_ID", "project_id", "pytest", "PROJECT_ID"], ["pytest", "mlengine_hook", "get_job_status", "job_id", "pytest", "JOB_ID", "project_id", "pytest", "PROJECT_ID"], ["pytest", "mlengine_hook", "get_job_status", "project_id", "pytest", "PROJECT_ID", "job_id", "None"]], "mlengine_hook": [["pytest", "mlengine_hook", "get_job", "project_id", "pytest", "PROJECT_ID", "job_id", "pytest", "JOB_ID", "session", "session"], ["pytest", "mlengine_hook", "get_job", "project_id", "pytest", "PROJECT_ID", "job_id", "None", "session", "session"], ["pytest", "mlengine_hook", "get_job", "project_id", "None", "job_id", "pytest", "JOB_ID", "session", "session"], ["job_status", "pytest", "mlengine_hook", "get_job_status", "job_id", "pytest", "JOB_ID", "project_id", "pytest", "PROJECT_ID"], ["job_status", "pytest", "mlengine_hook", "get_job_status", "job_id", "pytest", "JOB_ID", "project_id", "pytest", "PROJECT_ID"], ["job_status", "pytest", "mlengine_hook", "get_job_status", "job_id", "pytest", "JOB_ID", "project_id", "pytest", "PROJECT_ID"], ["pytest", "mlengine_hook", "get_job_status", "job_id", "pytest", "JOB_ID", "project_id", "pytest", "PROJECT_ID"], ["pytest", "mlengine_hook", "get_job_status", "project_id", "pytest", "PROJECT_ID", "job_id", "None"], ["pytest", "mlengine_hook", "get_job_status", "project_id", "None", "job_id", "pytest", "JOB_ID"]]}, "no_types_annot": {"D": 0, "I": 0, "U": 291}, "session_id": "B9620J8MS6Svr5JI-haHs5vsH7i4ofDT6Gx0gzBnaaM", "set": null, "tc": [false, null], "type_annot_cove": 0.0, "typed_seq": "", "untyped_seq": "", "variables": {"JOB_ID": "", "PROJECT_ID": "", "mlengine_hook": ""}, "variables_p": {"JOB_ID": [["str", 0.9094187049947908], ["int", 0.09058129500520912]], "PROJECT_ID": [["str", 0.802771939920804], ["Union[Literal, str]", 0.10630938757892916], ["List[str]", 0.09091867250026676]], "mlengine_hook": [["str", 0.3397748049194312], ["dict", 0.09801310826441084], ["list", 0.09510779022679296], ["float", 0.08602364430076584]]}}}