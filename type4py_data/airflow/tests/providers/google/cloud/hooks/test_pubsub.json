{"error": null, "response": {"classes": [{"cls_lc": [[75, 0], [578, 46]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[76, 4], [78, 76]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_delegate_to_runtime_error", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestPubSubHook.test_delegate_to_runtime_error", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[80, 4], [82, 61]], "fn_var_ln": {"pubsub_hook": [[82, 12], [82, 28]]}, "fn_var_occur": {"pubsub_hook": [["self", "pubsub_hook", "PubSubHook", "gcp_conn_id"]]}, "name": "setup_method", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "pubsub_hook", "PubSubHook", "gcp_conn_id"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestPubSubHook.setup_method", "ret_exprs": [], "ret_type": "", "variables": {"pubsub_hook": ""}, "variables_p": {"pubsub_hook": [["str", 0.48878370992584536], ["int", 0.20303442839768704]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[86, 4], [91, 49]], "fn_var_ln": {"result": [[88, 8], [88, 14]]}, "fn_var_occur": {"result": [["result", "self", "pubsub_hook", "get_conn"], ["mock_client", "return_value", "result"], ["self", "pubsub_hook", "_client", "result"]]}, "name": "test_publisher_client_creation", "params": {"mock_client": "", "mock_get_creds": "", "self": ""}, "params_descr": {"mock_client": "", "mock_get_creds": "", "self": ""}, "params_occur": {"mock_client": [["mock_client", "assert_called_once_with", "credentials", "mock_get_creds", "return_value", "client_info", "CLIENT_INFO"], ["mock_client", "return_value", "result"]], "mock_get_creds": [["mock_client", "assert_called_once_with", "credentials", "mock_get_creds", "return_value", "client_info", "CLIENT_INFO"]], "self": [["self", "pubsub_hook", "_client", "None"], ["result", "self", "pubsub_hook", "get_conn"], ["self", "pubsub_hook", "_client", "result"]]}, "params_p": {"args": [], "kwargs": [], "mock_client": [], "mock_get_creds": [["mock.MagicMock", 0.5023605757742623]], "self": []}, "q_name": "TestPubSubHook.test_publisher_client_creation", "ret_exprs": [], "ret_type": "", "variables": {"result": ""}, "variables_p": {"result": [["Type[Callable[..., Any]]", 0.1977110829294143], ["Dict[str, str]", 0.18986996015765753], ["Dict[str, Any]", 0.12040361248874532], ["list", 0.10257328084243915]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[95, 4], [99, 49]], "fn_var_ln": {"result": [[97, 8], [97, 14]]}, "fn_var_occur": {"result": [["result", "self", "pubsub_hook", "subscriber_client"], ["mock_client", "return_value", "result"]]}, "name": "test_subscriber_client_creation", "params": {"mock_client": "", "mock_get_creds": "", "self": ""}, "params_descr": {"mock_client": "", "mock_get_creds": "", "self": ""}, "params_occur": {"mock_client": [["mock_client", "assert_called_once_with", "credentials", "mock_get_creds", "return_value", "client_info", "CLIENT_INFO"], ["mock_client", "return_value", "result"]], "mock_get_creds": [["mock_client", "assert_called_once_with", "credentials", "mock_get_creds", "return_value", "client_info", "CLIENT_INFO"]], "self": [["self", "pubsub_hook", "_client", "None"], ["result", "self", "pubsub_hook", "subscriber_client"]]}, "params_p": {"args": [], "kwargs": [], "mock_client": [], "mock_get_creds": [["mock.MagicMock", 0.5023605757742623]], "self": []}, "q_name": "TestPubSubHook.test_subscriber_client_creation", "ret_exprs": [], "ret_type": "", "variables": {"result": ""}, "variables_p": {"result": [["Dict[str, List[Any]]", 0.18841886307653533], ["Optional[bytes]", 0.09838578462446057], ["list", 0.09719464460775545], ["Dict[str, Any]", 0.09489834673105767], ["str", 0.094328281798937], ["Dict[str, str]", 0.09002292130555829], ["List[Dict[str, Any]]", 0.08902769249940008], ["dict", 0.0833528881177705]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[102, 4], [110, 9]], "fn_var_ln": {"create_method": [[103, 8], [103, 21]]}, "fn_var_occur": {"create_method": [["create_method", "mock_service", "return_value", "create_topic"], ["create_method", "assert_called_once_with", "request", "dict", "name", "EXPANDED_TOPIC", "labels", "LABELS", "message_storage_policy", "None", "kms_key_name", "None", "retry", "DEFAULT", "timeout", "None", "metadata"]]}, "name": "test_create_nonexistent_topic", "params": {"mock_service": "", "self": ""}, "params_descr": {"mock_service": "", "self": ""}, "params_occur": {"mock_service": [["create_method", "mock_service", "return_value", "create_topic"]], "self": [["self", "pubsub_hook", "create_topic", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC"]]}, "params_p": {"args": [], "kwargs": [], "mock_service": [["mock.MagicMock", 0.0904716364000672]], "self": []}, "q_name": "TestPubSubHook.test_create_nonexistent_topic", "ret_exprs": [], "ret_type": "", "variables": {"create_method": ""}, "variables_p": {"create_method": [["str", 0.47109277985673303], ["int", 0.13872182005857575], ["List[Tuple[str, str]]", 0.1261394196010049], ["Dict[str, List[Any]]", 0.07209038814563053]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[113, 4], [118, 9]], "fn_var_ln": {"delete_method": [[114, 8], [114, 21]]}, "fn_var_occur": {"delete_method": [["delete_method", "mock_service", "return_value", "delete_topic"], ["delete_method", "assert_called_once_with", "request", "dict", "topic", "EXPANDED_TOPIC", "retry", "DEFAULT", "timeout", "None", "metadata"]]}, "name": "test_delete_topic", "params": {"mock_service": "", "self": ""}, "params_descr": {"mock_service": "", "self": ""}, "params_occur": {"mock_service": [["delete_method", "mock_service", "return_value", "delete_topic"]], "self": [["self", "pubsub_hook", "delete_topic", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC"]]}, "params_p": {"args": [], "kwargs": [], "mock_service": [["mock.MagicMock", 0.0784754677094385]], "self": []}, "q_name": "TestPubSubHook.test_delete_topic", "ret_exprs": [], "ret_type": "", "variables": {"delete_method": ""}, "variables_p": {"delete_method": [["str", 0.7586791018784295], ["Dict[str, List[Any]]", 0.07534658054316704], ["int", 0.06841659600848746]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[121, 4], [128, 74]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_delete_nonexisting_topic_failifnotexists", "params": {"mock_service": "", "self": ""}, "params_descr": {"mock_service": "", "self": ""}, "params_occur": {"mock_service": [["mock_service", "return_value", "delete_topic", "side_effect", "NotFound", "EXPANDED_TOPIC"]], "self": [["self", "pubsub_hook", "delete_topic", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "fail_if_not_exists", "True"]]}, "params_p": {"args": [], "kwargs": [], "mock_service": [["mock.MagicMock", 0.22334449343203516]], "self": []}, "q_name": "TestPubSubHook.test_delete_nonexisting_topic_failifnotexists", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[131, 4], [136, 109]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_delete_topic_api_call_error", "params": {"mock_service": "", "self": ""}, "params_descr": {"mock_service": "", "self": ""}, "params_occur": {"mock_service": [["mock_service", "return_value", "delete_topic", "side_effect", "GoogleAPICallError", "EXPANDED_TOPIC"]], "self": [["self", "pubsub_hook", "delete_topic", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "fail_if_not_exists", "True"]]}, "params_p": {"args": [], "kwargs": [], "mock_service": [["mock.Mock", 0.10067151084531845]], "self": []}, "q_name": "TestPubSubHook.test_delete_topic_api_call_error", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[139, 4], [145, 70]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_create_preexisting_topic_failifexists", "params": {"mock_service": "", "self": ""}, "params_descr": {"mock_service": "", "self": ""}, "params_occur": {"mock_service": [["mock_service", "return_value", "create_topic", "side_effect", "AlreadyExists", "TEST_TOPIC"]], "self": [["self", "pubsub_hook", "create_topic", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "fail_if_exists", "True"]]}, "params_p": {"args": [], "kwargs": [], "mock_service": [], "self": []}, "q_name": "TestPubSubHook.test_create_preexisting_topic_failifexists", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[148, 4], [152, 80]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_create_preexisting_topic_nofailifexists", "params": {"mock_service": "", "self": ""}, "params_descr": {"mock_service": "", "self": ""}, "params_occur": {"mock_service": [["mock_service", "return_value", "create_topic", "side_effect", "AlreadyExists", "EXPANDED_TOPIC"]], "self": [["self", "pubsub_hook", "create_topic", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC"]]}, "params_p": {"args": [], "kwargs": [], "mock_service": [], "self": []}, "q_name": "TestPubSubHook.test_create_preexisting_topic_nofailifexists", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[155, 4], [160, 105]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_create_topic_api_call_error", "params": {"mock_service": "", "self": ""}, "params_descr": {"mock_service": "", "self": ""}, "params_occur": {"mock_service": [["mock_service", "return_value", "create_topic", "side_effect", "GoogleAPICallError", "TEST_TOPIC"]], "self": [["self", "pubsub_hook", "create_topic", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "fail_if_exists", "True"]]}, "params_p": {"args": [], "kwargs": [], "mock_service": [["mock.MagicMock", 0.08966588074876358], ["mock.Mock", 0.08949773500663583]], "self": []}, "q_name": "TestPubSubHook.test_create_topic_api_call_error", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[163, 4], [188, 44]], "fn_var_ln": {"create_method": [[164, 8], [164, 21]], "response": [[166, 8], [166, 16]]}, "fn_var_occur": {"create_method": [["create_method", "mock_service", "create_subscription"], ["create_method", "assert_called_once_with", "request", "dict", "name", "EXPANDED_SUBSCRIPTION", "topic", "EXPANDED_TOPIC", "push_config", "None", "ack_deadline_seconds", "retain_acked_messages", "None", "message_retention_duration", "None", "labels", "LABELS", "enable_message_ordering", "False", "expiration_policy", "None", "filter", "None", "dead_letter_policy", "None", "retry_policy", "None", "retry", "DEFAULT", "timeout", "None", "metadata"]], "response": [["response", "self", "pubsub_hook", "create_subscription", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "subscription", "TEST_SUBSCRIPTION"], ["TEST_SUBSCRIPTION", "response"]]}, "name": "test_create_nonexistent_subscription", "params": {"mock_service": "", "self": ""}, "params_descr": {"mock_service": "", "self": ""}, "params_occur": {"mock_service": [["create_method", "mock_service", "create_subscription"]], "self": [["response", "self", "pubsub_hook", "create_subscription", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "subscription", "TEST_SUBSCRIPTION"]]}, "params_p": {"args": [], "kwargs": [], "mock_service": [["mock.MagicMock", 0.0866319022140961]], "self": []}, "q_name": "TestPubSubHook.test_create_nonexistent_subscription", "ret_exprs": [], "ret_type": "", "variables": {"create_method": "", "response": ""}, "variables_p": {"create_method": [["List[Tuple[str, str]]", 0.11728599864182201], ["Dict[str, str]", 0.08609572849822586], ["set", 0.08591460727789883], ["Dict[str, Any]", 0.08517535114648407]], "response": []}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[191, 4], [220, 44]], "fn_var_ln": {"create_method": [[192, 8], [192, 21]], "expected_subscription": [[199, 8], [199, 29]], "response": [[193, 8], [193, 16]]}, "fn_var_occur": {"create_method": [["create_method", "mock_service", "create_subscription"], ["create_method", "assert_called_once_with", "request", "dict", "name", "expected_subscription", "topic", "EXPANDED_TOPIC", "push_config", "None", "ack_deadline_seconds", "retain_acked_messages", "None", "message_retention_duration", "None", "labels", "LABELS", "enable_message_ordering", "False", "expiration_policy", "None", "filter", "None", "dead_letter_policy", "None", "retry_policy", "None", "retry", "DEFAULT", "timeout", "None", "metadata"]], "expected_subscription": [["expected_subscription", "TEST_SUBSCRIPTION"], ["create_method", "assert_called_once_with", "request", "dict", "name", "expected_subscription", "topic", "EXPANDED_TOPIC", "push_config", "None", "ack_deadline_seconds", "retain_acked_messages", "None", "message_retention_duration", "None", "labels", "LABELS", "enable_message_ordering", "False", "expiration_policy", "None", "filter", "None", "dead_letter_policy", "None", "retry_policy", "None", "retry", "DEFAULT", "timeout", "None", "metadata"]], "response": [["response", "self", "pubsub_hook", "create_subscription", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "subscription", "TEST_SUBSCRIPTION", "subscription_project_id"], ["TEST_SUBSCRIPTION", "response"]]}, "name": "test_create_subscription_different_project_topic", "params": {"mock_service": "", "self": ""}, "params_descr": {"mock_service": "", "self": ""}, "params_occur": {"mock_service": [["create_method", "mock_service", "create_subscription"]], "self": [["response", "self", "pubsub_hook", "create_subscription", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "subscription", "TEST_SUBSCRIPTION", "subscription_project_id"]]}, "params_p": {"args": [], "kwargs": [], "mock_service": [], "self": []}, "q_name": "TestPubSubHook.test_create_subscription_different_project_topic", "ret_exprs": [], "ret_type": "", "variables": {"create_method": "", "expected_subscription": "", "response": ""}, "variables_p": {"create_method": [["List[Tuple[str, str]]", 0.11822199321388396], ["Dict[str, str]", 0.0889117314359687], ["Dict[str, Any]", 0.08776618396438636], ["set", 0.08696836135481073]], "expected_subscription": [["str", 0.21455511391803506], ["dict", 0.11610051761905267]], "response": [["tests.engine.cloud.test_cloud_flows.MockedCloudClient", 0.47894872162629665], ["list", 0.08607244506640274], ["bytes", 0.08099274836268784], ["Dict[str, Dict[str, Any]]", 0.07925610596912597], ["set", 0.07721819223509867]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[223, 4], [228, 9]], "fn_var_ln": {"delete_method": [[225, 8], [225, 21]]}, "fn_var_occur": {"delete_method": [["delete_method", "mock_service", "delete_subscription"], ["delete_method", "assert_called_once_with", "request", "dict", "subscription", "EXPANDED_SUBSCRIPTION", "retry", "DEFAULT", "timeout", "None", "metadata"]]}, "name": "test_delete_subscription", "params": {"mock_service": "", "self": ""}, "params_descr": {"mock_service": "", "self": ""}, "params_occur": {"mock_service": [["delete_method", "mock_service", "delete_subscription"]], "self": [["self", "pubsub_hook", "delete_subscription", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION"]]}, "params_p": {"args": [], "kwargs": [], "mock_service": [], "self": []}, "q_name": "TestPubSubHook.test_delete_subscription", "ret_exprs": [], "ret_type": "", "variables": {"delete_method": ""}, "variables_p": {"delete_method": [["str", 0.18328307253102277], ["dict", 0.10146677796371423], ["int", 0.09231052888178344], ["Dict[str, Union[Any, Any]]", 0.09158627480709283], ["Dict[int, int]", 0.09058332280422769], ["Type[Dict[Any, Any]]", 0.08449900237500321]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[231, 4], [239, 88]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_delete_nonexisting_subscription_failifnotexists", "params": {"mock_service": "", "self": ""}, "params_descr": {"mock_service": "", "self": ""}, "params_occur": {"mock_service": [["mock_service", "delete_subscription", "side_effect", "NotFound", "EXPANDED_SUBSCRIPTION"]], "self": [["self", "pubsub_hook", "delete_subscription", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "fail_if_not_exists", "True"]]}, "params_p": {"args": [], "kwargs": [], "mock_service": [["mock.MagicMock", 0.09215567728916732], ["mock.Mock", 0.08528022414261413]], "self": []}, "q_name": "TestPubSubHook.test_delete_nonexisting_subscription_failifnotexists", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[242, 4], [249, 13]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_delete_subscription_api_call_error", "params": {"mock_service": "", "self": ""}, "params_descr": {"mock_service": "", "self": ""}, "params_occur": {"mock_service": [["mock_service", "delete_subscription", "side_effect", "GoogleAPICallError", "EXPANDED_SUBSCRIPTION"]], "self": [["self", "pubsub_hook", "delete_subscription", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "fail_if_not_exists", "True"]]}, "params_p": {"args": [], "kwargs": [], "mock_service": [], "self": []}, "q_name": "TestPubSubHook.test_delete_subscription_api_call_error", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[253, 4], [277, 45]], "fn_var_ln": {"create_method": [[254, 8], [254, 21]], "expected_name": [[255, 8], [255, 21]], "response": [[257, 8], [257, 16]]}, "fn_var_occur": {"create_method": [["create_method", "mock_service", "create_subscription"], ["create_method", "assert_called_once_with", "request", "dict", "name", "expected_name", "topic", "EXPANDED_TOPIC", "push_config", "None", "ack_deadline_seconds", "retain_acked_messages", "None", "message_retention_duration", "None", "labels", "LABELS", "enable_message_ordering", "False", "expiration_policy", "None", "filter", "None", "dead_letter_policy", "None", "retry_policy", "None", "retry", "DEFAULT", "timeout", "None", "metadata"]], "expected_name": [["expected_name", "EXPANDED_SUBSCRIPTION", "replace", "TEST_SUBSCRIPTION", "TEST_UUID"], ["create_method", "assert_called_once_with", "request", "dict", "name", "expected_name", "topic", "EXPANDED_TOPIC", "push_config", "None", "ack_deadline_seconds", "retain_acked_messages", "None", "message_retention_duration", "None", "labels", "LABELS", "enable_message_ordering", "False", "expiration_policy", "None", "filter", "None", "dead_letter_policy", "None", "retry_policy", "None", "retry", "DEFAULT", "timeout", "None", "metadata"]], "response": [["response", "self", "pubsub_hook", "create_subscription", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC"], ["TEST_UUID", "response"]]}, "name": "test_create_subscription_without_subscription_name", "params": {"mock_service": "", "mock_uuid": "", "self": ""}, "params_descr": {"mock_service": "", "mock_uuid": "", "self": ""}, "params_occur": {"mock_service": [["create_method", "mock_service", "create_subscription"]], "mock_uuid": [], "self": [["response", "self", "pubsub_hook", "create_subscription", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC"]]}, "params_p": {"args": [], "kwargs": [], "mock_service": [], "mock_uuid": [["mock.MagicMock", 0.17854530685655995]], "self": []}, "q_name": "TestPubSubHook.test_create_subscription_without_subscription_name", "ret_exprs": [], "ret_type": "", "variables": {"create_method": "", "expected_name": "", "response": ""}, "variables_p": {"create_method": [["List[Tuple[str, str]]", 0.13409348105096025], ["Dict[str, Any]", 0.09812947075528758], ["Dict[str, str]", 0.09604632057456292], ["set", 0.08347643666007153]], "expected_name": [["str", 0.9999999999999999]], "response": []}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[280, 4], [305, 44]], "fn_var_ln": {"create_method": [[281, 8], [281, 21]], "response": [[283, 8], [283, 16]]}, "fn_var_occur": {"create_method": [["create_method", "mock_service", "create_subscription"], ["create_method", "assert_called_once_with", "request", "dict", "name", "EXPANDED_SUBSCRIPTION", "topic", "EXPANDED_TOPIC", "push_config", "None", "ack_deadline_seconds", "retain_acked_messages", "None", "message_retention_duration", "None", "labels", "LABELS", "enable_message_ordering", "False", "expiration_policy", "None", "filter", "None", "dead_letter_policy", "None", "retry_policy", "None", "retry", "DEFAULT", "timeout", "None", "metadata"]], "response": [["response", "self", "pubsub_hook", "create_subscription", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "subscription", "TEST_SUBSCRIPTION", "ack_deadline_secs"], ["TEST_SUBSCRIPTION", "response"]]}, "name": "test_create_subscription_with_ack_deadline", "params": {"mock_service": "", "self": ""}, "params_descr": {"mock_service": "", "self": ""}, "params_occur": {"mock_service": [["create_method", "mock_service", "create_subscription"]], "self": [["response", "self", "pubsub_hook", "create_subscription", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "subscription", "TEST_SUBSCRIPTION", "ack_deadline_secs"]]}, "params_p": {"args": [], "kwargs": [], "mock_service": [["mock.MagicMock", 0.0866319022140961]], "self": []}, "q_name": "TestPubSubHook.test_create_subscription_with_ack_deadline", "ret_exprs": [], "ret_type": "", "variables": {"create_method": "", "response": ""}, "variables_p": {"create_method": [["List[Tuple[str, str]]", 0.11728599864182201], ["Dict[str, str]", 0.08609572849822586], ["set", 0.08591460727789883], ["Dict[str, Any]", 0.08517535114648407]], "response": [["tests.engine.cloud.test_cloud_flows.MockedCloudClient", 0.43680482476089333], ["bool", 0.09296118722459754], ["list", 0.0924870206022797], ["str", 0.08579983015978741]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[308, 4], [336, 44]], "fn_var_ln": {"create_method": [[309, 8], [309, 21]], "response": [[311, 8], [311, 16]]}, "fn_var_occur": {"create_method": [["create_method", "mock_service", "create_subscription"], ["create_method", "assert_called_once_with", "request", "dict", "name", "EXPANDED_SUBSCRIPTION", "topic", "EXPANDED_TOPIC", "push_config", "None", "ack_deadline_seconds", "retain_acked_messages", "None", "message_retention_duration", "None", "labels", "LABELS", "enable_message_ordering", "False", "expiration_policy", "None", "filter", "dead_letter_policy", "None", "retry_policy", "None", "retry", "DEFAULT", "timeout", "None", "metadata"]], "response": [["response", "self", "pubsub_hook", "create_subscription", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "subscription", "TEST_SUBSCRIPTION", "filter_"], ["TEST_SUBSCRIPTION", "response"]]}, "name": "test_create_subscription_with_filter", "params": {"mock_service": "", "self": ""}, "params_descr": {"mock_service": "", "self": ""}, "params_occur": {"mock_service": [["create_method", "mock_service", "create_subscription"]], "self": [["response", "self", "pubsub_hook", "create_subscription", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "subscription", "TEST_SUBSCRIPTION", "filter_"]]}, "params_p": {"args": [], "kwargs": [], "mock_service": [], "self": []}, "q_name": "TestPubSubHook.test_create_subscription_with_filter", "ret_exprs": [], "ret_type": "", "variables": {"create_method": "", "response": ""}, "variables_p": {"create_method": [["List[Tuple[str, str]]", 0.11728599864182201], ["Dict[str, str]", 0.08609572849822586], ["set", 0.08591460727789883], ["Dict[str, Any]", 0.08517535114648407]], "response": [["Dict[str, Union[Any, Any, Any]]", 0.09704438775041767]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[339, 4], [347, 88]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_create_subscription_failifexists", "params": {"mock_service": "", "self": ""}, "params_descr": {"mock_service": "", "self": ""}, "params_occur": {"mock_service": [["mock_service", "create_subscription", "side_effect", "AlreadyExists", "EXPANDED_SUBSCRIPTION"]], "self": [["self", "pubsub_hook", "create_subscription", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "subscription", "TEST_SUBSCRIPTION", "fail_if_exists", "True"]]}, "params_p": {"args": [], "kwargs": [], "mock_service": [], "self": []}, "q_name": "TestPubSubHook.test_create_subscription_failifexists", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[350, 4], [357, 13]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_create_subscription_api_call_error", "params": {"mock_service": "", "self": ""}, "params_descr": {"mock_service": "", "self": ""}, "params_occur": {"mock_service": [["mock_service", "create_subscription", "side_effect", "GoogleAPICallError", "EXPANDED_SUBSCRIPTION"]], "self": [["self", "pubsub_hook", "create_subscription", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "subscription", "TEST_SUBSCRIPTION", "fail_if_exists", "True"]]}, "params_p": {"args": [], "kwargs": [], "mock_service": [], "self": []}, "q_name": "TestPubSubHook.test_create_subscription_api_call_error", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[360, 4], [367, 44]], "fn_var_ln": {"response": [[364, 8], [364, 16]]}, "fn_var_occur": {"response": [["response", "self", "pubsub_hook", "create_subscription", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "subscription", "TEST_SUBSCRIPTION"], ["TEST_SUBSCRIPTION", "response"]]}, "name": "test_create_subscription_nofailifexists", "params": {"mock_service": "", "self": ""}, "params_descr": {"mock_service": "", "self": ""}, "params_occur": {"mock_service": [["mock_service", "create_subscription", "side_effect", "AlreadyExists", "EXPANDED_SUBSCRIPTION"]], "self": [["response", "self", "pubsub_hook", "create_subscription", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "subscription", "TEST_SUBSCRIPTION"]]}, "params_p": {"args": [], "kwargs": [], "mock_service": [], "self": []}, "q_name": "TestPubSubHook.test_create_subscription_nofailifexists", "ret_exprs": [], "ret_type": "", "variables": {"response": ""}, "variables_p": {"response": []}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[370, 4], [380, 38]], "fn_var_ln": {"calls": [[374, 8], [374, 13]], "mock_calls_result": [[378, 8], [378, 25]], "publish_method": [[371, 8], [371, 22]], "result_refined": [[379, 8], [379, 22]]}, "fn_var_occur": {"calls": [["calls", "mock", "call", "topic", "EXPANDED_TOPIC", "data", "message", "get", "message", "get", "message", "TEST_MESSAGES"], ["result_refined", "calls"]], "mock_calls_result": [["mock_calls_result", "publish_method", "mock_calls"], ["result_refined", "mock_calls_result", "mock_calls_result", "mock_calls_result"]], "publish_method": [["publish_method", "mock_service", "return_value", "publish"], ["mock_calls_result", "publish_method", "mock_calls"]], "result_refined": [["result_refined", "mock_calls_result", "mock_calls_result", "mock_calls_result"], ["result_refined", "calls"]]}, "name": "test_publish", "params": {"mock_service": "", "self": ""}, "params_descr": {"mock_service": "", "self": ""}, "params_occur": {"mock_service": [["publish_method", "mock_service", "return_value", "publish"]], "self": [["self", "pubsub_hook", "publish", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "messages", "TEST_MESSAGES"]]}, "params_p": {"args": [], "kwargs": [], "mock_service": [["mock.MagicMock", 0.1204232869145647]], "self": []}, "q_name": "TestPubSubHook.test_publish", "ret_exprs": [], "ret_type": "", "variables": {"calls": "", "mock_calls_result": "", "publish_method": "", "result_refined": ""}, "variables_p": {"calls": [["Dict[str, Union[Any, Any, Any]]", 0.20768577300029228], ["list", 0.19511956851556056], ["Dict[str, Union[Any, bool, str]]", 0.10384288650014614], ["float", 0.09766404912399024], ["tests.mock.zwave.MockNode", 0.09463771090891018]], "mock_calls_result": [["Dict[Any, int]", 0.4938722820776912], ["Dict[int, Any]", 0.11709280595801254], ["int", 0.09935731583127358], ["Dict[Any, str]", 0.099323790995573], ["Dict[Union[int, str], int]", 0.09299332426262527]], "publish_method": [["str", 0.2797102112926383], ["Dict[str, Dict[str, Any]]", 0.17812535464187212], ["Dict[str, Union[Any, Any]]", 0.128860560287479], ["Dict[str, Any]", 0.10835906736435982], ["list", 0.10647051331120629]], "result_refined": [["Dict[str, Tuple[str, Any]]", 0.18982090866586876], ["mock._Call", 0.17071305675047804], ["str", 0.12433622537890862]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[383, 4], [388, 103]], "fn_var_ln": {"publish_method": [[384, 8], [384, 22]], "side_effect": [[385, 8], [385, 34]]}, "fn_var_occur": {"publish_method": [["publish_method", "mock_service", "return_value", "publish"], ["publish_method", "side_effect", "GoogleAPICallError", "EXPANDED_SUBSCRIPTION"]], "side_effect": [["publish_method", "side_effect", "GoogleAPICallError", "EXPANDED_SUBSCRIPTION"]]}, "name": "test_publish_api_call_error", "params": {"mock_service": "", "self": ""}, "params_descr": {"mock_service": "", "self": ""}, "params_occur": {"mock_service": [["publish_method", "mock_service", "return_value", "publish"]], "self": [["self", "pubsub_hook", "publish", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "messages", "TEST_MESSAGES"]]}, "params_p": {"args": [], "kwargs": [], "mock_service": [["mock.MagicMock", 0.09085396445507787]], "self": []}, "q_name": "TestPubSubHook.test_publish_api_call_error", "ret_exprs": [], "ret_type": "", "variables": {"publish_method": "", "side_effect": ""}, "variables_p": {"publish_method": [["str", 0.2753210121653079], ["List[str]", 0.1806110469681448], ["list", 0.12860016270505195]], "side_effect": [["List[str]", 0.12753013595724713], ["Tuple[Literal, Literal]", 0.12753013595724713], ["set", 0.1263484942491746], ["str", 0.09989242185651989], ["Dict[str, int]", 0.09167104510194539], ["Dict[str, str]", 0.08280075067650802]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[391, 4], [411, 42]], "fn_var_ln": {"pull_method": [[392, 8], [392, 19]], "pulled_messages": [[393, 8], [393, 23]], "response": [[398, 8], [398, 16]]}, "fn_var_occur": {"pull_method": [["pull_method", "mock_service", "pull"], ["pull_method", "return_value", "received_messages", "pulled_messages"], ["pull_method", "assert_called_once_with", "request", "dict", "subscription", "EXPANDED_SUBSCRIPTION", "max_messages", "return_immediately", "False", "retry", "DEFAULT", "timeout", "None", "metadata"]], "pulled_messages": [["pulled_messages", "append", "i", "msg"], ["pull_method", "return_value", "received_messages", "pulled_messages"], ["pulled_messages", "response"]], "response": [["response", "self", "pubsub_hook", "pull", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "max_messages"], ["pulled_messages", "response"]]}, "name": "test_pull", "params": {"mock_service": "", "self": ""}, "params_descr": {"mock_service": "", "self": ""}, "params_occur": {"mock_service": [["pull_method", "mock_service", "pull"]], "self": [["response", "self", "pubsub_hook", "pull", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "max_messages"]]}, "params_p": {"args": [], "kwargs": [], "mock_service": [], "self": []}, "q_name": "TestPubSubHook.test_pull", "ret_exprs": [], "ret_type": "", "variables": {"pull_method": "", "pulled_messages": "", "response": ""}, "variables_p": {"pull_method": [["str", 0.6405748815268976], ["Dict[Any, Union[int, str]]", 0.13291383100982723]], "pulled_messages": [["list", 0.9068066917719756], ["dict", 0.09319330822802442]], "response": []}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[414, 4], [431, 29]], "fn_var_ln": {"pull_method": [[415, 8], [415, 19]], "response": [[418, 8], [418, 16]]}, "fn_var_occur": {"pull_method": [["pull_method", "mock_service", "pull"], ["pull_method", "return_value", "received_messages"], ["pull_method", "assert_called_once_with", "request", "dict", "subscription", "EXPANDED_SUBSCRIPTION", "max_messages", "return_immediately", "False", "retry", "DEFAULT", "timeout", "None", "metadata"]], "response": [["response", "self", "pubsub_hook", "pull", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "max_messages"]]}, "name": "test_pull_no_messages", "params": {"mock_service": "", "self": ""}, "params_descr": {"mock_service": "", "self": ""}, "params_occur": {"mock_service": [["pull_method", "mock_service", "pull"]], "self": [["response", "self", "pubsub_hook", "pull", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "max_messages"]]}, "params_p": {"args": [], "kwargs": [], "mock_service": [], "self": []}, "q_name": "TestPubSubHook.test_pull_no_messages", "ret_exprs": [], "ret_type": "", "variables": {"pull_method": "", "response": ""}, "variables_p": {"pull_method": [["str", 0.6715235813983859], ["Dict[Any, Union[int, str]]", 0.11452928090610079], ["List[Dict[str, str]]", 0.06821098493582801]], "response": []}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[443, 4], [458, 13]], "fn_var_ln": {"pull_method": [[444, 8], [444, 19]], "side_effect": [[445, 8], [445, 31]]}, "fn_var_occur": {"pull_method": [["pull_method", "mock_service", "pull"], ["pull_method", "side_effect", "exception"], ["pull_method", "assert_called_once_with", "request", "dict", "subscription", "EXPANDED_SUBSCRIPTION", "max_messages", "return_immediately", "False", "retry", "DEFAULT", "timeout", "None", "metadata"]], "side_effect": [["pull_method", "side_effect", "exception"]]}, "name": "test_pull_fails_on_exception", "params": {"exception": "", "mock_service": "", "self": ""}, "params_descr": {"exception": "", "mock_service": "", "self": ""}, "params_occur": {"exception": [["pull_method", "side_effect", "exception"]], "mock_service": [["pull_method", "mock_service", "pull"]], "self": [["self", "pubsub_hook", "pull", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "max_messages"]]}, "params_p": {"args": [], "exception": [], "kwargs": [], "mock_service": [], "self": []}, "q_name": "TestPubSubHook.test_pull_fails_on_exception", "ret_exprs": [], "ret_type": "", "variables": {"pull_method": "", "side_effect": ""}, "variables_p": {"pull_method": [["str", 0.08900463437057703]], "side_effect": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["str", 0.1]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[461, 4], [475, 9]], "fn_var_ln": {"ack_method": [[462, 8], [462, 18]]}, "fn_var_occur": {"ack_method": [["ack_method", "mock_service", "acknowledge"], ["ack_method", "assert_called_once_with", "request", "dict", "subscription", "EXPANDED_SUBSCRIPTION", "ack_ids", "retry", "DEFAULT", "timeout", "None", "metadata"]]}, "name": "test_acknowledge_by_ack_ids", "params": {"mock_service": "", "self": ""}, "params_descr": {"mock_service": "", "self": ""}, "params_occur": {"mock_service": [["ack_method", "mock_service", "acknowledge"]], "self": [["self", "pubsub_hook", "acknowledge", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "ack_ids"]]}, "params_p": {"args": [], "kwargs": [], "mock_service": [], "self": []}, "q_name": "TestPubSubHook.test_acknowledge_by_ack_ids", "ret_exprs": [], "ret_type": "", "variables": {"ack_method": ""}, "variables_p": {"ack_method": [["tests.components.vera.common.ComponentData", 0.10424805068993877], ["list", 0.10132877365189596], ["frozenset[str]", 0.10074398134148299], ["tests.mock.zwave.MockNode", 0.09619102817107399], ["Dict[str, Any]", 0.09521019823265667]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[478, 4], [494, 9]], "fn_var_ln": {"ack_method": [[479, 8], [479, 18]]}, "fn_var_occur": {"ack_method": [["ack_method", "mock_service", "acknowledge"], ["ack_method", "assert_called_once_with", "request", "dict", "subscription", "EXPANDED_SUBSCRIPTION", "ack_ids", "retry", "DEFAULT", "timeout", "None", "metadata"]]}, "name": "test_acknowledge_by_message_objects", "params": {"mock_service": "", "self": ""}, "params_descr": {"mock_service": "", "self": ""}, "params_occur": {"mock_service": [["ack_method", "mock_service", "acknowledge"]], "self": [["self", "pubsub_hook", "acknowledge", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "messages", "_generate_messages"]]}, "params_p": {"args": [], "kwargs": [], "mock_service": [], "self": []}, "q_name": "TestPubSubHook.test_acknowledge_by_message_objects", "ret_exprs": [], "ret_type": "", "variables": {"ack_method": ""}, "variables_p": {"ack_method": [["tests.components.vera.common.ComponentData", 0.10424805068993877], ["list", 0.10132877365189596], ["frozenset[str]", 0.10074398134148299], ["tests.mock.zwave.MockNode", 0.09619102817107399], ["Dict[str, Any]", 0.09521019823265667]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[504, 4], [515, 38]], "fn_var_ln": {"ack_method": [[505, 8], [505, 18]], "error_message": [[507, 8], [507, 21]]}, "fn_var_occur": {"ack_method": [["ack_method", "mock_service", "acknowledge"], ["ack_method", "assert_not_called"]], "error_message": [["pytest", "raises", "ValueError", "match", "error_message"]]}, "name": "test_acknowledge_fails_on_method_args_validation", "params": {"ack_ids": "", "messages": "", "mock_service": "", "self": ""}, "params_descr": {"ack_ids": "", "messages": "", "mock_service": "", "self": ""}, "params_occur": {"ack_ids": [["self", "pubsub_hook", "acknowledge", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "ack_ids", "ack_ids", "messages", "messages"]], "messages": [["self", "pubsub_hook", "acknowledge", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "ack_ids", "ack_ids", "messages", "messages"]], "mock_service": [["ack_method", "mock_service", "acknowledge"]], "self": [["self", "pubsub_hook", "acknowledge", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "ack_ids", "ack_ids", "messages", "messages"]]}, "params_p": {"ack_ids": [["str", 0.3022494932141522], ["Optional[str]", 0.1087182019124364]], "args": [], "kwargs": [], "messages": [["str", 0.3022494932141522], ["Optional[str]", 0.1087182019124364]], "mock_service": [["mock.Mock", 0.10110426166833843]], "self": []}, "q_name": "TestPubSubHook.test_acknowledge_fails_on_method_args_validation", "ret_exprs": [], "ret_type": "", "variables": {"ack_method": "", "error_message": ""}, "variables_p": {"ack_method": [["Dict[str, Tuple[str, Any]]", 0.1788710722633243]], "error_message": [["str", 0.8501218406451738], ["Callable(open)[..., Any][[[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal], default), Named(buffering, int, default), Named(encoding, Optional[str], default), Named(errors, Optional[str], default), Named(newline, Optional[str], default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.TextIOWrapper][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, Literal), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.FileIO][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, Union[Literal[-1], Literal], default), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.BufferedRandom][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, Union[Literal[-1], Literal], default), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.BufferedWriter][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, Union[Literal[-1], Literal], default), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.BufferedReader][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, int), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], BinaryIO][Any, Any]]", 0.07569075429409607], ["Union[Literal, Literal]", 0.07418740506073011]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[527, 4], [543, 13]], "fn_var_ln": {"ack_method": [[528, 8], [528, 18]], "side_effect": [[529, 8], [529, 30]]}, "fn_var_occur": {"ack_method": [["ack_method", "mock_service", "acknowledge"], ["ack_method", "side_effect", "exception"], ["ack_method", "assert_called_once_with", "request", "dict", "subscription", "EXPANDED_SUBSCRIPTION", "ack_ids", "retry", "DEFAULT", "timeout", "None", "metadata"]], "side_effect": [["ack_method", "side_effect", "exception"]]}, "name": "test_acknowledge_fails_on_exception", "params": {"exception": "", "mock_service": "", "self": ""}, "params_descr": {"exception": "", "mock_service": "", "self": ""}, "params_occur": {"exception": [["ack_method", "side_effect", "exception"]], "mock_service": [["ack_method", "mock_service", "acknowledge"]], "self": [["self", "pubsub_hook", "acknowledge", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "ack_ids"]]}, "params_p": {"args": [], "exception": [], "kwargs": [], "mock_service": [], "self": []}, "q_name": "TestPubSubHook.test_acknowledge_fails_on_exception", "ret_exprs": [], "ret_type": "", "variables": {"ack_method": "", "side_effect": ""}, "variables_p": {"ack_method": [["Dict[str, Type[Any]]", 0.1223427760428427], ["Type[Dict[Any, Any]]", 0.0934385632464459], ["list", 0.0888396994689115]], "side_effect": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["str", 0.1]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[555, 4], [556, 47]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_messages_validation_positive", "params": {"messages": "", "self": ""}, "params_descr": {"messages": "", "self": ""}, "params_occur": {"messages": [["PubSubHook", "_validate_messages", "messages"]], "self": []}, "params_p": {"args": [], "kwargs": [], "messages": [], "self": []}, "q_name": "TestPubSubHook.test_messages_validation_positive", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[575, 4], [578, 46]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_messages_validation_negative", "params": {"error_message": "", "messages": "", "self": ""}, "params_descr": {"error_message": "", "messages": "", "self": ""}, "params_occur": {"error_message": [["str", "ctx", "value", "error_message"]], "messages": [["PubSubHook", "_validate_messages", "messages"]], "self": []}, "params_p": {"args": [], "error_message": [["int", 0.1378771060279444]], "kwargs": [], "messages": [["str", 0.19221543556527995], ["Sequence[int]", 0.11785025330724476], ["Optional[str]", 0.09567875291469635]], "self": []}, "q_name": "TestPubSubHook.test_messages_validation_negative", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestPubSubHook", "q_name": "TestPubSubHook", "variables": {}, "variables_p": {}}, {"cls_lc": [[581, 0], [627, 9]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[583, 4], [584, 32]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "hook", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestPubSubAsyncHook.hook", "ret_exprs": ["return PubSubAsyncHook()"], "ret_type": "", "ret_type_p": [["int", 0.30000000000000004], ["Callable", 0.2], ["str", 0.1]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[588, 4], [605, 9]], "fn_var_ln": {"client": [[589, 8], [589, 14]]}, "fn_var_occur": {"client": [["client", "mock_subscriber_client", "return_value"], ["client", "pull", "assert_called_once_with", "request", "dict", "subscription", "EXPANDED_SUBSCRIPTION", "max_messages", "return_immediately", "False", "retry", "DEFAULT", "timeout", "None", "metadata"]]}, "name": "test_pull", "params": {"hook": "", "mock_subscriber_client": "", "self": ""}, "params_descr": {"hook": "", "mock_subscriber_client": "", "self": ""}, "params_occur": {"hook": [["hook", "pull", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "max_messages", "return_immediately", "False"]], "mock_subscriber_client": [["client", "mock_subscriber_client", "return_value"], ["mock_subscriber_client", "assert_called_once"]], "self": []}, "params_p": {"args": [], "hook": [], "kwargs": [], "mock_subscriber_client": [], "self": []}, "q_name": "TestPubSubAsyncHook.test_pull", "ret_exprs": [], "ret_type": "", "variables": {"client": ""}, "variables_p": {"client": [["Dict[str, str]", 0.09051920885410299]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[609, 4], [627, 9]], "fn_var_ln": {"client": [[610, 8], [610, 14]]}, "fn_var_occur": {"client": [["client", "mock_subscriber_client", "return_value"], ["client", "acknowledge", "assert_called_once_with", "request", "dict", "subscription", "EXPANDED_SUBSCRIPTION", "ack_ids", "retry", "DEFAULT", "timeout", "None", "metadata"]]}, "name": "test_acknowledge", "params": {"hook": "", "mock_subscriber_client": "", "self": ""}, "params_descr": {"hook": "", "mock_subscriber_client": "", "self": ""}, "params_occur": {"hook": [["hook", "acknowledge", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "messages", "_generate_messages"]], "mock_subscriber_client": [["client", "mock_subscriber_client", "return_value"], ["mock_subscriber_client", "assert_called_once"]], "self": []}, "params_p": {"args": [], "hook": [], "kwargs": [], "mock_subscriber_client": [], "self": []}, "q_name": "TestPubSubAsyncHook.test_acknowledge", "ret_exprs": [], "ret_type": "", "variables": {"client": ""}, "variables_p": {"client": []}}], "name": "TestPubSubAsyncHook", "q_name": "TestPubSubAsyncHook", "variables": {}, "variables_p": {}}], "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[54, 0], [59, 8]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "mock_init", "params": {"gcp_conn_id": "", "impersonation_chain": "", "self": ""}, "params_descr": {"gcp_conn_id": "", "impersonation_chain": "", "self": ""}, "params_occur": {"gcp_conn_id": [], "impersonation_chain": [], "self": []}, "params_p": {"args": [], "gcp_conn_id": [["str", 0.22309396388262298], ["Set[int]", 0.1348902946641084], ["Optional[Set[int]]", 0.1348902946641084], ["bool", 0.07902146925380046], ["List[int]", 0.07554342860998617]], "impersonation_chain": [["str", 0.22309396388262298], ["Set[int]", 0.1348902946641084], ["Optional[Set[int]]", 0.1348902946641084], ["bool", 0.07902146925380046], ["List[int]", 0.07554342860998617]], "kwargs": [], "self": [["str", 0.22309396388262298], ["Set[int]", 0.1348902946641084], ["Optional[Set[int]]", 0.1348902946641084], ["bool", 0.07902146925380046], ["List[int]", 0.07554342860998617]]}, "q_name": "mock_init", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[62, 0], [72, 5]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "_generate_messages", "params": {"count": ""}, "params_descr": {"count": ""}, "params_occur": {"count": [["ReceivedMessage", "ack_id", "str", "i", "message", "i", "encode", "i", "range", "count"]]}, "params_p": {"args": [], "count": [["str", 0.8104836080782176]], "kwargs": []}, "q_name": "_generate_messages", "ret_exprs": ["return [ ReceivedMessage( ack_id=str(i), message={ \"data\": f\"Message {i}\".encode(), \"attributes\": {\"type\": \"generated message\"}, }, ) for i in range(1, count + 1)]"], "ret_type": "builtins.list[google.cloud.pubsub_v1.types.ReceivedMessage]", "ret_type_p": [["str", 0.42695585592756313], ["int", 0.21694008514522584], ["List[Union[int, Any]]", 0.17805202946360546], ["List[Union[int, str]]", 0.17805202946360546]], "variables": {}, "variables_p": {}}], "imports": ["__future__", "annotations", "unittest", "mock", "uuid", "UUID", "httplib2", "pytest", "google", "api_core", "exceptions", "AlreadyExists", "GoogleAPICallError", "google", "api_core", "gapic_v1", "method", "DEFAULT", "google", "cloud", "exceptions", "NotFound", "google", "cloud", "pubsub_v1", "types", "ReceivedMessage", "googleapiclient", "errors", "HttpError", "airflow", "providers", "google", "cloud", "hooks", "pubsub", "PubSubAsyncHook", "PubSubException", "PubSubHook", "airflow", "providers", "google", "common", "consts", "CLIENT_INFO", "airflow", "version", "version"], "mod_var_ln": {"BASE_STRING": [[35, 0], [35, 11]], "EMPTY_CONTENT": [[38, 0], [38, 13]], "EXPANDED_SUBSCRIPTION": [[50, 0], [50, 21]], "EXPANDED_TOPIC": [[49, 0], [49, 14]], "LABELS": [[51, 0], [51, 6]], "PUBSUB_STRING": [[36, 0], [36, 13]], "TEST_MESSAGES": [[43, 0], [43, 13]], "TEST_PROJECT": [[39, 0], [39, 12]], "TEST_SUBSCRIPTION": [[41, 0], [41, 17]], "TEST_TOPIC": [[40, 0], [40, 10]], "TEST_UUID": [[42, 0], [42, 9]]}, "mod_var_occur": {"BASE_STRING": [["mock", "patch", "BASE_STRING", "format", "new", "mock_init"]], "EMPTY_CONTENT": [], "EXPANDED_SUBSCRIPTION": [["create_method", "assert_called_once_with", "request", "dict", "name", "EXPANDED_SUBSCRIPTION", "topic", "EXPANDED_TOPIC", "push_config", "None", "ack_deadline_seconds", "retain_acked_messages", "None", "message_retention_duration", "None", "labels", "LABELS", "enable_message_ordering", "False", "expiration_policy", "None", "filter", "None", "dead_letter_policy", "None", "retry_policy", "None", "retry", "DEFAULT", "timeout", "None", "metadata"], ["delete_method", "assert_called_once_with", "request", "dict", "subscription", "EXPANDED_SUBSCRIPTION", "retry", "DEFAULT", "timeout", "None", "metadata"], ["mock_service", "delete_subscription", "side_effect", "NotFound", "EXPANDED_SUBSCRIPTION"], ["str", "ctx", "value", "EXPANDED_SUBSCRIPTION"], ["mock_service", "delete_subscription", "side_effect", "GoogleAPICallError", "EXPANDED_SUBSCRIPTION"], ["expected_name", "EXPANDED_SUBSCRIPTION", "replace", "TEST_SUBSCRIPTION", "TEST_UUID"], ["create_method", "assert_called_once_with", "request", "dict", "name", "EXPANDED_SUBSCRIPTION", "topic", "EXPANDED_TOPIC", "push_config", "None", "ack_deadline_seconds", "retain_acked_messages", "None", "message_retention_duration", "None", "labels", "LABELS", "enable_message_ordering", "False", "expiration_policy", "None", "filter", "None", "dead_letter_policy", "None", "retry_policy", "None", "retry", "DEFAULT", "timeout", "None", "metadata"], ["create_method", "assert_called_once_with", "request", "dict", "name", "EXPANDED_SUBSCRIPTION", "topic", "EXPANDED_TOPIC", "push_config", "None", "ack_deadline_seconds", "retain_acked_messages", "None", "message_retention_duration", "None", "labels", "LABELS", "enable_message_ordering", "False", "expiration_policy", "None", "filter", "dead_letter_policy", "None", "retry_policy", "None", "retry", "DEFAULT", "timeout", "None", "metadata"], ["mock_service", "create_subscription", "side_effect", "AlreadyExists", "EXPANDED_SUBSCRIPTION"], ["str", "ctx", "value", "EXPANDED_SUBSCRIPTION"], ["mock_service", "create_subscription", "side_effect", "GoogleAPICallError", "EXPANDED_SUBSCRIPTION"], ["mock_service", "create_subscription", "side_effect", "AlreadyExists", "EXPANDED_SUBSCRIPTION"], ["publish_method", "side_effect", "GoogleAPICallError", "EXPANDED_SUBSCRIPTION"], ["pull_method", "assert_called_once_with", "request", "dict", "subscription", "EXPANDED_SUBSCRIPTION", "max_messages", "return_immediately", "False", "retry", "DEFAULT", "timeout", "None", "metadata"], ["pull_method", "assert_called_once_with", "request", "dict", "subscription", "EXPANDED_SUBSCRIPTION", "max_messages", "return_immediately", "False", "retry", "DEFAULT", "timeout", "None", "metadata"], ["pull_method", "assert_called_once_with", "request", "dict", "subscription", "EXPANDED_SUBSCRIPTION", "max_messages", "return_immediately", "False", "retry", "DEFAULT", "timeout", "None", "metadata"], ["ack_method", "assert_called_once_with", "request", "dict", "subscription", "EXPANDED_SUBSCRIPTION", "ack_ids", "retry", "DEFAULT", "timeout", "None", "metadata"], ["ack_method", "assert_called_once_with", "request", "dict", "subscription", "EXPANDED_SUBSCRIPTION", "ack_ids", "retry", "DEFAULT", "timeout", "None", "metadata"], ["ack_method", "assert_called_once_with", "request", "dict", "subscription", "EXPANDED_SUBSCRIPTION", "ack_ids", "retry", "DEFAULT", "timeout", "None", "metadata"], ["client", "pull", "assert_called_once_with", "request", "dict", "subscription", "EXPANDED_SUBSCRIPTION", "max_messages", "return_immediately", "False", "retry", "DEFAULT", "timeout", "None", "metadata"], ["client", "acknowledge", "assert_called_once_with", "request", "dict", "subscription", "EXPANDED_SUBSCRIPTION", "ack_ids", "retry", "DEFAULT", "timeout", "None", "metadata"]], "EXPANDED_TOPIC": [["create_method", "assert_called_once_with", "request", "dict", "name", "EXPANDED_TOPIC", "labels", "LABELS", "message_storage_policy", "None", "kms_key_name", "None", "retry", "DEFAULT", "timeout", "None", "metadata"], ["delete_method", "assert_called_once_with", "request", "dict", "topic", "EXPANDED_TOPIC", "retry", "DEFAULT", "timeout", "None", "metadata"], ["mock_service", "return_value", "delete_topic", "side_effect", "NotFound", "EXPANDED_TOPIC"], ["str", "ctx", "value", "EXPANDED_TOPIC"], ["mock_service", "return_value", "delete_topic", "side_effect", "GoogleAPICallError", "EXPANDED_TOPIC"], ["mock_service", "return_value", "create_topic", "side_effect", "AlreadyExists", "EXPANDED_TOPIC"], ["create_method", "assert_called_once_with", "request", "dict", "name", "EXPANDED_SUBSCRIPTION", "topic", "EXPANDED_TOPIC", "push_config", "None", "ack_deadline_seconds", "retain_acked_messages", "None", "message_retention_duration", "None", "labels", "LABELS", "enable_message_ordering", "False", "expiration_policy", "None", "filter", "None", "dead_letter_policy", "None", "retry_policy", "None", "retry", "DEFAULT", "timeout", "None", "metadata"], ["create_method", "assert_called_once_with", "request", "dict", "name", "expected_subscription", "topic", "EXPANDED_TOPIC", "push_config", "None", "ack_deadline_seconds", "retain_acked_messages", "None", "message_retention_duration", "None", "labels", "LABELS", "enable_message_ordering", "False", "expiration_policy", "None", "filter", "None", "dead_letter_policy", "None", "retry_policy", "None", "retry", "DEFAULT", "timeout", "None", "metadata"], ["create_method", "assert_called_once_with", "request", "dict", "name", "expected_name", "topic", "EXPANDED_TOPIC", "push_config", "None", "ack_deadline_seconds", "retain_acked_messages", "None", "message_retention_duration", "None", "labels", "LABELS", "enable_message_ordering", "False", "expiration_policy", "None", "filter", "None", "dead_letter_policy", "None", "retry_policy", "None", "retry", "DEFAULT", "timeout", "None", "metadata"], ["create_method", "assert_called_once_with", "request", "dict", "name", "EXPANDED_SUBSCRIPTION", "topic", "EXPANDED_TOPIC", "push_config", "None", "ack_deadline_seconds", "retain_acked_messages", "None", "message_retention_duration", "None", "labels", "LABELS", "enable_message_ordering", "False", "expiration_policy", "None", "filter", "None", "dead_letter_policy", "None", "retry_policy", "None", "retry", "DEFAULT", "timeout", "None", "metadata"], ["create_method", "assert_called_once_with", "request", "dict", "name", "EXPANDED_SUBSCRIPTION", "topic", "EXPANDED_TOPIC", "push_config", "None", "ack_deadline_seconds", "retain_acked_messages", "None", "message_retention_duration", "None", "labels", "LABELS", "enable_message_ordering", "False", "expiration_policy", "None", "filter", "dead_letter_policy", "None", "retry_policy", "None", "retry", "DEFAULT", "timeout", "None", "metadata"], ["calls", "mock", "call", "topic", "EXPANDED_TOPIC", "data", "message", "get", "message", "get", "message", "TEST_MESSAGES"]], "LABELS": [["create_method", "assert_called_once_with", "request", "dict", "name", "EXPANDED_TOPIC", "labels", "LABELS", "message_storage_policy", "None", "kms_key_name", "None", "retry", "DEFAULT", "timeout", "None", "metadata"], ["create_method", "assert_called_once_with", "request", "dict", "name", "EXPANDED_SUBSCRIPTION", "topic", "EXPANDED_TOPIC", "push_config", "None", "ack_deadline_seconds", "retain_acked_messages", "None", "message_retention_duration", "None", "labels", "LABELS", "enable_message_ordering", "False", "expiration_policy", "None", "filter", "None", "dead_letter_policy", "None", "retry_policy", "None", "retry", "DEFAULT", "timeout", "None", "metadata"], ["create_method", "assert_called_once_with", "request", "dict", "name", "expected_subscription", "topic", "EXPANDED_TOPIC", "push_config", "None", "ack_deadline_seconds", "retain_acked_messages", "None", "message_retention_duration", "None", "labels", "LABELS", "enable_message_ordering", "False", "expiration_policy", "None", "filter", "None", "dead_letter_policy", "None", "retry_policy", "None", "retry", "DEFAULT", "timeout", "None", "metadata"], ["create_method", "assert_called_once_with", "request", "dict", "name", "expected_name", "topic", "EXPANDED_TOPIC", "push_config", "None", "ack_deadline_seconds", "retain_acked_messages", "None", "message_retention_duration", "None", "labels", "LABELS", "enable_message_ordering", "False", "expiration_policy", "None", "filter", "None", "dead_letter_policy", "None", "retry_policy", "None", "retry", "DEFAULT", "timeout", "None", "metadata"], ["create_method", "assert_called_once_with", "request", "dict", "name", "EXPANDED_SUBSCRIPTION", "topic", "EXPANDED_TOPIC", "push_config", "None", "ack_deadline_seconds", "retain_acked_messages", "None", "message_retention_duration", "None", "labels", "LABELS", "enable_message_ordering", "False", "expiration_policy", "None", "filter", "None", "dead_letter_policy", "None", "retry_policy", "None", "retry", "DEFAULT", "timeout", "None", "metadata"], ["create_method", "assert_called_once_with", "request", "dict", "name", "EXPANDED_SUBSCRIPTION", "topic", "EXPANDED_TOPIC", "push_config", "None", "ack_deadline_seconds", "retain_acked_messages", "None", "message_retention_duration", "None", "labels", "LABELS", "enable_message_ordering", "False", "expiration_policy", "None", "filter", "dead_letter_policy", "None", "retry_policy", "None", "retry", "DEFAULT", "timeout", "None", "metadata"]], "PUBSUB_STRING": [], "TEST_MESSAGES": [["self", "pubsub_hook", "publish", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "messages", "TEST_MESSAGES"], ["calls", "mock", "call", "topic", "EXPANDED_TOPIC", "data", "message", "get", "message", "get", "message", "TEST_MESSAGES"], ["self", "pubsub_hook", "publish", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "messages", "TEST_MESSAGES"], ["enumerate", "TEST_MESSAGES"]], "TEST_PROJECT": [["EXPANDED_TOPIC", "TEST_PROJECT", "TEST_TOPIC"], ["EXPANDED_SUBSCRIPTION", "TEST_PROJECT", "TEST_SUBSCRIPTION"], ["self", "pubsub_hook", "create_topic", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC"], ["self", "pubsub_hook", "delete_topic", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC"], ["self", "pubsub_hook", "delete_topic", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "fail_if_not_exists", "True"], ["self", "pubsub_hook", "delete_topic", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "fail_if_not_exists", "True"], ["self", "pubsub_hook", "create_topic", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "fail_if_exists", "True"], ["self", "pubsub_hook", "create_topic", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC"], ["self", "pubsub_hook", "create_topic", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "fail_if_exists", "True"], ["response", "self", "pubsub_hook", "create_subscription", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "subscription", "TEST_SUBSCRIPTION"], ["response", "self", "pubsub_hook", "create_subscription", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "subscription", "TEST_SUBSCRIPTION", "subscription_project_id"], ["self", "pubsub_hook", "delete_subscription", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION"], ["self", "pubsub_hook", "delete_subscription", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "fail_if_not_exists", "True"], ["self", "pubsub_hook", "delete_subscription", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "fail_if_not_exists", "True"], ["response", "self", "pubsub_hook", "create_subscription", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC"], ["response", "self", "pubsub_hook", "create_subscription", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "subscription", "TEST_SUBSCRIPTION", "ack_deadline_secs"], ["response", "self", "pubsub_hook", "create_subscription", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "subscription", "TEST_SUBSCRIPTION", "filter_"], ["self", "pubsub_hook", "create_subscription", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "subscription", "TEST_SUBSCRIPTION", "fail_if_exists", "True"], ["self", "pubsub_hook", "create_subscription", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "subscription", "TEST_SUBSCRIPTION", "fail_if_exists", "True"], ["response", "self", "pubsub_hook", "create_subscription", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "subscription", "TEST_SUBSCRIPTION"], ["self", "pubsub_hook", "publish", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "messages", "TEST_MESSAGES"], ["self", "pubsub_hook", "publish", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "messages", "TEST_MESSAGES"], ["response", "self", "pubsub_hook", "pull", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "max_messages"], ["response", "self", "pubsub_hook", "pull", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "max_messages"], ["self", "pubsub_hook", "pull", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "max_messages"], ["self", "pubsub_hook", "acknowledge", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "ack_ids"], ["self", "pubsub_hook", "acknowledge", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "messages", "_generate_messages"], ["self", "pubsub_hook", "acknowledge", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "ack_ids", "ack_ids", "messages", "messages"], ["self", "pubsub_hook", "acknowledge", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "ack_ids"], ["hook", "pull", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "max_messages", "return_immediately", "False"], ["hook", "acknowledge", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "messages", "_generate_messages"]], "TEST_SUBSCRIPTION": [["EXPANDED_SUBSCRIPTION", "TEST_PROJECT", "TEST_SUBSCRIPTION"], ["response", "self", "pubsub_hook", "create_subscription", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "subscription", "TEST_SUBSCRIPTION"], ["TEST_SUBSCRIPTION", "response"], ["response", "self", "pubsub_hook", "create_subscription", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "subscription", "TEST_SUBSCRIPTION", "subscription_project_id"], ["expected_subscription", "TEST_SUBSCRIPTION"], ["TEST_SUBSCRIPTION", "response"], ["self", "pubsub_hook", "delete_subscription", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION"], ["self", "pubsub_hook", "delete_subscription", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "fail_if_not_exists", "True"], ["self", "pubsub_hook", "delete_subscription", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "fail_if_not_exists", "True"], ["expected_name", "EXPANDED_SUBSCRIPTION", "replace", "TEST_SUBSCRIPTION", "TEST_UUID"], ["response", "self", "pubsub_hook", "create_subscription", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "subscription", "TEST_SUBSCRIPTION", "ack_deadline_secs"], ["TEST_SUBSCRIPTION", "response"], ["response", "self", "pubsub_hook", "create_subscription", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "subscription", "TEST_SUBSCRIPTION", "filter_"], ["TEST_SUBSCRIPTION", "response"], ["self", "pubsub_hook", "create_subscription", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "subscription", "TEST_SUBSCRIPTION", "fail_if_exists", "True"], ["self", "pubsub_hook", "create_subscription", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "subscription", "TEST_SUBSCRIPTION", "fail_if_exists", "True"], ["response", "self", "pubsub_hook", "create_subscription", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "subscription", "TEST_SUBSCRIPTION"], ["TEST_SUBSCRIPTION", "response"], ["response", "self", "pubsub_hook", "pull", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "max_messages"], ["response", "self", "pubsub_hook", "pull", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "max_messages"], ["self", "pubsub_hook", "pull", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "max_messages"], ["self", "pubsub_hook", "acknowledge", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "ack_ids"], ["self", "pubsub_hook", "acknowledge", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "messages", "_generate_messages"], ["self", "pubsub_hook", "acknowledge", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "ack_ids", "ack_ids", "messages", "messages"], ["self", "pubsub_hook", "acknowledge", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "ack_ids"], ["hook", "pull", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "max_messages", "return_immediately", "False"], ["hook", "acknowledge", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "messages", "_generate_messages"]], "TEST_TOPIC": [["EXPANDED_TOPIC", "TEST_PROJECT", "TEST_TOPIC"], ["self", "pubsub_hook", "create_topic", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC"], ["self", "pubsub_hook", "delete_topic", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC"], ["self", "pubsub_hook", "delete_topic", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "fail_if_not_exists", "True"], ["self", "pubsub_hook", "delete_topic", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "fail_if_not_exists", "True"], ["mock_service", "return_value", "create_topic", "side_effect", "AlreadyExists", "TEST_TOPIC"], ["self", "pubsub_hook", "create_topic", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "fail_if_exists", "True"], ["str", "ctx", "value", "TEST_TOPIC"], ["self", "pubsub_hook", "create_topic", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC"], ["mock_service", "return_value", "create_topic", "side_effect", "GoogleAPICallError", "TEST_TOPIC"], ["self", "pubsub_hook", "create_topic", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "fail_if_exists", "True"], ["response", "self", "pubsub_hook", "create_subscription", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "subscription", "TEST_SUBSCRIPTION"], ["response", "self", "pubsub_hook", "create_subscription", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "subscription", "TEST_SUBSCRIPTION", "subscription_project_id"], ["response", "self", "pubsub_hook", "create_subscription", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC"], ["response", "self", "pubsub_hook", "create_subscription", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "subscription", "TEST_SUBSCRIPTION", "ack_deadline_secs"], ["response", "self", "pubsub_hook", "create_subscription", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "subscription", "TEST_SUBSCRIPTION", "filter_"], ["self", "pubsub_hook", "create_subscription", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "subscription", "TEST_SUBSCRIPTION", "fail_if_exists", "True"], ["self", "pubsub_hook", "create_subscription", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "subscription", "TEST_SUBSCRIPTION", "fail_if_exists", "True"], ["response", "self", "pubsub_hook", "create_subscription", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "subscription", "TEST_SUBSCRIPTION"], ["self", "pubsub_hook", "publish", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "messages", "TEST_MESSAGES"], ["self", "pubsub_hook", "publish", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "messages", "TEST_MESSAGES"]], "TEST_UUID": [["expected_name", "EXPANDED_SUBSCRIPTION", "replace", "TEST_SUBSCRIPTION", "TEST_UUID"], ["TEST_UUID", "response"]]}, "no_types_annot": {"D": 1, "I": 0, "U": 134}, "session_id": "vvbvTGjGcJ-7TvdffCQAy7wAoOa86cx4WDBxF4b9eXs", "set": null, "tc": [false, null], "type_annot_cove": 0.01, "typed_seq": "", "untyped_seq": "", "variables": {"BASE_STRING": "", "EMPTY_CONTENT": "", "EXPANDED_SUBSCRIPTION": "", "EXPANDED_TOPIC": "", "LABELS": "", "PUBSUB_STRING": "", "TEST_MESSAGES": "", "TEST_PROJECT": "", "TEST_SUBSCRIPTION": "", "TEST_TOPIC": "", "TEST_UUID": ""}, "variables_p": {"BASE_STRING": [["Pattern[str]", 0.26967428345698286], ["tuple", 0.25550728062029376], ["int", 0.1971208335976603], ["Dict[str, Dict[str, Any]]", 0.09267221506021547], ["Dict[str, Optional[int]]", 0.09218085466864967]], "EMPTY_CONTENT": [["str", 0.49999999999999994], ["bool", 0.39999999999999997], ["bytearray", 0.09999999999999999]], "EXPANDED_SUBSCRIPTION": [["Dict[str, Union[int, str]]", 0.11447457569863125], ["Dict[str, Union[Any, Any, Any, str]]", 0.11085363253422631], ["Optional[str]", 0.10319509260231857], ["str", 0.09852116028825395], ["list", 0.0969659570156576], ["bool", 0.09502428611122397], ["Dict[str, Any]", 0.09345633446432333]], "EXPANDED_TOPIC": [["Tuple[Literal, Literal, Literal]", 0.1308478464422481], ["Dict[str, Any]", 0.1059176515136489], ["Dict[str, Union[int, str]]", 0.08785961765947557]], "LABELS": [["List[Tuple[str, str]]", 0.08998303100615897], ["List[bool]", 0.08575004416335509], ["Set[str]", 0.08354925959447491]], "PUBSUB_STRING": [["str", 0.7], ["int", 0.2]], "TEST_MESSAGES": [["float", 0.09579139306732194], ["Dict[Any, Dict[str, int]]", 0.09552881430408885]], "TEST_PROJECT": [], "TEST_SUBSCRIPTION": [], "TEST_TOPIC": [], "TEST_UUID": [["str", 0.6881397736155191], ["List[str]", 0.12058917448080424], ["int", 0.10313872087929063]]}}}