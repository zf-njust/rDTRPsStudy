{"error": null, "response": {"classes": [{"cls_lc": [[65, 8], [67, 46]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[66, 12], [67, 46]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "get_credentials_and_project_id", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "_BigQueryBaseTestClass.setup_method.<locals>.MockedBigQueryHook.get_credentials_and_project_id", "ret_exprs": ["return CREDENTIALS, PROJECT_ID"], "ret_type": "", "ret_type_p": [["str", 0.8034951363272067], ["int", 0.09184800755589267]], "variables": {}, "variables_p": {}}], "name": "MockedBigQueryHook", "q_name": "_BigQueryBaseTestClass.setup_method.<locals>.MockedBigQueryHook", "variables": {}, "variables_p": {}}, {"cls_lc": [[63, 0], [69, 40]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[64, 4], [69, 40]], "fn_var_ln": {"hook": [[69, 8], [69, 17]]}, "fn_var_occur": {"hook": [["self", "hook", "MockedBigQueryHook"]]}, "name": "setup_method", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "hook", "MockedBigQueryHook"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "_BigQueryBaseTestClass.setup_method", "ret_exprs": [], "ret_type": "None", "variables": {"hook": ""}, "variables_p": {"hook": [["int", 0.6524554245688015], ["str", 0.17513485560729566], ["list", 0.1724097198239029]]}}], "name": "_BigQueryBaseTestClass", "q_name": "_BigQueryBaseTestClass", "variables": {}, "variables_p": {}}, {"cls_lc": [[77, 0], [956, 40]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[81, 4], [94, 62]], "fn_var_ln": {"result": [[82, 8], [82, 14]]}, "fn_var_occur": {"result": [["result", "self", "hook", "get_conn"], ["mock_bigquery_connection", "return_value", "result"]]}, "name": "test_bigquery_client_creation", "params": {"mock_authorize": "", "mock_bigquery_connection": "", "mock_build": "", "self": ""}, "params_descr": {"mock_authorize": "", "mock_bigquery_connection": "", "mock_build": "", "self": ""}, "params_occur": {"mock_authorize": [["mock_build", "assert_called_once_with", "http", "mock_authorize", "return_value", "cache_discovery", "False"]], "mock_bigquery_connection": [["mock_bigquery_connection", "assert_called_once_with", "service", "mock_build", "return_value", "project_id", "PROJECT_ID", "hook", "self", "hook", "use_legacy_sql", "self", "hook", "use_legacy_sql", "location", "self", "hook", "location", "num_retries", "self", "hook", "num_retries"], ["mock_bigquery_connection", "return_value", "result"]], "mock_build": [["mock_build", "assert_called_once_with", "http", "mock_authorize", "return_value", "cache_discovery", "False"], ["mock_bigquery_connection", "assert_called_once_with", "service", "mock_build", "return_value", "project_id", "PROJECT_ID", "hook", "self", "hook", "use_legacy_sql", "self", "hook", "use_legacy_sql", "location", "self", "hook", "location", "num_retries", "self", "hook", "num_retries"]], "self": [["result", "self", "hook", "get_conn"], ["mock_bigquery_connection", "assert_called_once_with", "service", "mock_build", "return_value", "project_id", "PROJECT_ID", "hook", "self", "hook", "use_legacy_sql", "self", "hook", "use_legacy_sql", "location", "self", "hook", "location", "num_retries", "self", "hook", "num_retries"]]}, "params_p": {"args": [], "kwargs": [], "mock_authorize": [], "mock_bigquery_connection": [], "mock_build": [], "self": []}, "q_name": "TestBigQueryHookMethods.test_bigquery_client_creation", "ret_exprs": [], "ret_type": "", "variables": {"result": ""}, "variables_p": {"result": [["list", 0.887662197266321]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[96, 4], [98, 61]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_bigquery_insert_rows_not_implemented", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "hook", "insert_rows", "table", "rows"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestBigQueryHookMethods.test_bigquery_insert_rows_not_implemented", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[101, 4], [105, 29]], "fn_var_ln": {"result": [[102, 8], [102, 14]]}, "fn_var_occur": {"result": [["result", "self", "hook", "table_exists", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID"], ["result", "True"]]}, "name": "test_bigquery_table_exists_true", "params": {"mock_client": "", "self": ""}, "params_descr": {"mock_client": "", "self": ""}, "params_occur": {"mock_client": [["mock_client", "return_value", "get_table", "assert_called_once_with", "TABLE_REFERENCE"], ["mock_client", "assert_called_once_with", "project_id", "PROJECT_ID"]], "self": [["result", "self", "hook", "table_exists", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID"]]}, "params_p": {"args": [], "kwargs": [], "mock_client": [], "self": []}, "q_name": "TestBigQueryHookMethods.test_bigquery_table_exists_true", "ret_exprs": [], "ret_type": "", "variables": {"result": ""}, "variables_p": {"result": [["dict", 0.12076759748297286], ["Optional[str]", 0.11839932287581956], ["list", 0.09595455961357909], ["List[Tuple[str, str, str, str]]", 0.0955080136635901], ["str", 0.09318148693895725], ["List[Tuple[str, bytes]]", 0.09124777084062993], ["bool", 0.08857293693938725]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[108, 4], [113, 30]], "fn_var_ln": {"result": [[110, 8], [110, 14]]}, "fn_var_occur": {"result": [["result", "self", "hook", "table_exists", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID"], ["result", "False"]]}, "name": "test_bigquery_table_exists_false", "params": {"mock_client": "", "self": ""}, "params_descr": {"mock_client": "", "self": ""}, "params_occur": {"mock_client": [["mock_client", "return_value", "get_table", "side_effect", "NotFound"], ["mock_client", "return_value", "get_table", "assert_called_once_with", "TABLE_REFERENCE"], ["mock_client", "assert_called_once_with", "project_id", "PROJECT_ID"]], "self": [["result", "self", "hook", "table_exists", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID"]]}, "params_p": {"args": [], "kwargs": [], "mock_client": [], "self": []}, "q_name": "TestBigQueryHookMethods.test_bigquery_table_exists_false", "ret_exprs": [], "ret_type": "", "variables": {"result": ""}, "variables_p": {"result": [["dict", 0.21313356965740618], ["Optional[str]", 0.11601122395869641], ["list", 0.10126484733717529], ["List[Tuple[str, str, str, str]]", 0.0957281994703663], ["bool", 0.09151417554848468]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[116, 4], [123, 29]], "fn_var_ln": {"result": [[118, 8], [118, 14]]}, "fn_var_occur": {"result": [["result", "self", "hook", "table_partition_exists", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "partition_id", "PARTITION_ID"], ["result", "True"]]}, "name": "test_bigquery_table_partition_exists_true", "params": {"mock_client": "", "self": ""}, "params_descr": {"mock_client": "", "self": ""}, "params_occur": {"mock_client": [["mock_client", "return_value", "list_partitions", "return_value", "PARTITION_ID"], ["mock_client", "return_value", "list_partitions", "assert_called_once_with", "TABLE_REFERENCE"], ["mock_client", "assert_called_once_with", "project_id", "PROJECT_ID"]], "self": [["result", "self", "hook", "table_partition_exists", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "partition_id", "PARTITION_ID"]]}, "params_p": {"args": [], "kwargs": [], "mock_client": [], "self": []}, "q_name": "TestBigQueryHookMethods.test_bigquery_table_partition_exists_true", "ret_exprs": [], "ret_type": "", "variables": {"result": ""}, "variables_p": {"result": [["list", 0.21728060584377457], ["bool", 0.1949915519408606], ["str", 0.10584073700208303], ["List[Dict[str, Any]]", 0.09643183230849632], ["Dict[str, Optional[int]]", 0.09630513969317567], ["Dict[str, Any]", 0.09449779526231789], ["Dict[str, List[Any]]", 0.09438563953689844]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[126, 4], [133, 30]], "fn_var_ln": {"result": [[128, 8], [128, 14]]}, "fn_var_occur": {"result": [["result", "self", "hook", "table_partition_exists", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "partition_id", "PARTITION_ID"], ["result", "False"]]}, "name": "test_bigquery_table_partition_exists_false_no_table", "params": {"mock_client": "", "self": ""}, "params_descr": {"mock_client": "", "self": ""}, "params_occur": {"mock_client": [["mock_client", "return_value", "get_table", "side_effect", "NotFound"], ["mock_client", "return_value", "list_partitions", "assert_called_once_with", "TABLE_REFERENCE"], ["mock_client", "assert_called_once_with", "project_id", "PROJECT_ID"]], "self": [["result", "self", "hook", "table_partition_exists", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "partition_id", "PARTITION_ID"]]}, "params_p": {"args": [], "kwargs": [], "mock_client": [], "self": []}, "q_name": "TestBigQueryHookMethods.test_bigquery_table_partition_exists_false_no_table", "ret_exprs": [], "ret_type": "", "variables": {"result": ""}, "variables_p": {"result": [["list", 0.21728060584377457], ["bool", 0.1949915519408606], ["str", 0.10584073700208303], ["List[Dict[str, Any]]", 0.09643183230849632], ["Dict[str, Optional[int]]", 0.09630513969317567], ["Dict[str, Any]", 0.09449779526231789], ["Dict[str, List[Any]]", 0.09438563953689844]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[136, 4], [143, 30]], "fn_var_ln": {"result": [[138, 8], [138, 14]]}, "fn_var_occur": {"result": [["result", "self", "hook", "table_partition_exists", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "partition_id", "PARTITION_ID"], ["result", "False"]]}, "name": "test_bigquery_table_partition_exists_false_no_partition", "params": {"mock_client": "", "self": ""}, "params_descr": {"mock_client": "", "self": ""}, "params_occur": {"mock_client": [["mock_client", "return_value", "list_partitions", "return_value"], ["mock_client", "return_value", "list_partitions", "assert_called_once_with", "TABLE_REFERENCE"], ["mock_client", "assert_called_once_with", "project_id", "PROJECT_ID"]], "self": [["result", "self", "hook", "table_partition_exists", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "partition_id", "PARTITION_ID"]]}, "params_p": {"args": [], "kwargs": [], "mock_client": [], "self": []}, "q_name": "TestBigQueryHookMethods.test_bigquery_table_partition_exists_false_no_partition", "ret_exprs": [], "ret_type": "", "variables": {"result": ""}, "variables_p": {"result": [["list", 0.21728060584377457], ["bool", 0.1949915519408606], ["str", 0.10584073700208303], ["List[Dict[str, Any]]", 0.09643183230849632], ["Dict[str, Optional[int]]", 0.09630513969317567], ["Dict[str, Any]", 0.09449779526231789], ["Dict[str, List[Any]]", 0.09438563953689844]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[146, 4], [151, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_get_pandas_df", "params": {"mock_read_gbq": "", "self": ""}, "params_descr": {"mock_read_gbq": "", "self": ""}, "params_occur": {"mock_read_gbq": [["mock_read_gbq", "assert_called_once_with", "credentials", "CREDENTIALS", "dialect", "project_id", "PROJECT_ID", "verbose", "False"]], "self": [["self", "hook", "get_pandas_df"]]}, "params_p": {"args": [], "kwargs": [], "mock_read_gbq": [], "self": []}, "q_name": "TestBigQueryHookMethods.test_get_pandas_df", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[154, 4], [168, 13]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_invalid_schema_update_options", "params": {"mock_get_service": "", "self": ""}, "params_descr": {"mock_get_service": "", "self": ""}, "params_occur": {"mock_get_service": [], "self": [["self", "hook", "run_load", "schema_update_options"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_service": [["mock.MagicMock", 0.32136483448697795], ["mock.Mock", 0.21773018121612475], ["Callable", 0.08540435710941223]], "self": []}, "q_name": "TestBigQueryHookMethods.test_invalid_schema_update_options", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[171, 4], [183, 13]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_invalid_schema_update_and_write_disposition", "params": {"mock_get_service": "", "self": ""}, "params_descr": {"mock_get_service": "", "self": ""}, "params_occur": {"mock_get_service": [], "self": [["self", "hook", "run_load", "schema_update_options", "write_disposition"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_service": [["mock.MagicMock", 0.42430783264205363], ["mock.Mock", 0.27844908950198555], ["Callable", 0.09250445066362563]], "self": []}, "q_name": "TestBigQueryHookMethods.test_invalid_schema_update_and_write_disposition", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[190, 4], [202, 90]], "fn_var_ln": {"calls": [[196, 8], [196, 13]], "running_job_id": [[191, 8], [191, 22]]}, "fn_var_occur": {"calls": [["calls", "mock", "call", "job_id", "running_job_id", "project_id", "PROJECT_ID", "location", "None", "mock", "call", "job_id", "running_job_id", "project_id", "PROJECT_ID", "location", "None"], ["mock_poll_job_complete", "assert_has_calls", "calls"]], "running_job_id": [["self", "hook", "running_job_id", "running_job_id"], ["calls", "mock", "call", "job_id", "running_job_id", "project_id", "PROJECT_ID", "location", "None", "mock", "call", "job_id", "running_job_id", "project_id", "PROJECT_ID", "location", "None"], ["mock_client", "return_value", "cancel_job", "assert_called_once_with", "job_id", "running_job_id"]]}, "name": "test_cancel_queries", "params": {"mock_client": "", "mock_poll_job_complete": "", "self": ""}, "params_descr": {"mock_client": "", "mock_poll_job_complete": "", "self": ""}, "params_occur": {"mock_client": [["mock_client", "assert_called_once_with", "project_id", "PROJECT_ID", "location", "None"], ["mock_client", "return_value", "cancel_job", "assert_called_once_with", "job_id", "running_job_id"]], "mock_poll_job_complete": [["mock_poll_job_complete", "assert_has_calls", "calls"]], "self": [["self", "hook", "running_job_id", "running_job_id"], ["self", "hook", "cancel_query"]]}, "params_p": {"args": [], "kwargs": [], "mock_client": [], "mock_poll_job_complete": [["mock.MagicMock", 0.14709229485107955]], "self": []}, "q_name": "TestBigQueryHookMethods.test_cancel_queries", "ret_exprs": [], "ret_type": "", "variables": {"calls": "", "running_job_id": ""}, "variables_p": {"calls": [["list", 0.39866334228618217], ["Set[str]", 0.11092486232867751], ["List[Tuple[str, Any]]", 0.10102828425395009], ["int", 0.09814977687556438], ["List[Union[Any, Any]]", 0.09552277779889425]], "running_job_id": [["str", 0.9128369754961082], ["int", 0.08716302450389174]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[206, 4], [213, 71]], "fn_var_ln": {"_": [[212, 8], [212, 9]], "kwargs": [[212, 11], [212, 17]]}, "fn_var_occur": {"_": [["_", "kwargs", "mock_insert", "call_args"]], "kwargs": [["_", "kwargs", "mock_insert", "call_args"], ["kwargs", "True"]]}, "name": "test_run_query_sql_dialect_default", "params": {"_": "", "mock_insert": "", "self": ""}, "params_descr": {"_": "", "mock_insert": "", "self": ""}, "params_occur": {"_": [["_", "kwargs", "mock_insert", "call_args"]], "mock_insert": [["_", "kwargs", "mock_insert", "call_args"]], "self": [["self", "hook", "run_query"]]}, "params_p": {"_": [], "args": [], "kwargs": [], "mock_insert": [], "self": []}, "q_name": "TestBigQueryHookMethods.test_run_query_sql_dialect_default", "ret_exprs": [], "ret_type": "", "variables": {"_": "", "kwargs": ""}, "variables_p": {"_": [["int", 0.3803869320637631], ["float", 0.15802746558517075], ["Tuple[str, str, str]", 0.09454442272977188], ["str", 0.09247700941394743]], "kwargs": [["list", 0.203192773420265], ["Union[dict, Dict[str, int]]", 0.18308947098250974], ["List[int]", 0.11134761293704293], ["List[Dict[str, str]]", 0.10744412680669574], ["List[str]", 0.10744412680669574], ["str", 0.09703200537097144], ["Dict[str, str]", 0.09588664397891898], ["staticmethod", 0.09456323969690034]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[217, 4], [220, 72]], "fn_var_ln": {"_": [[219, 8], [219, 9]], "kwargs": [[219, 11], [219, 17]]}, "fn_var_occur": {"_": [["_", "kwargs", "mock_insert", "call_args"]], "kwargs": [["_", "kwargs", "mock_insert", "call_args"], ["kwargs", "False"]]}, "name": "test_run_query_sql_dialect", "params": {"_": "", "mock_insert": "", "self": ""}, "params_descr": {"_": "", "mock_insert": "", "self": ""}, "params_occur": {"_": [["_", "kwargs", "mock_insert", "call_args"]], "mock_insert": [["_", "kwargs", "mock_insert", "call_args"]], "self": [["self", "hook", "run_query", "use_legacy_sql", "False"]]}, "params_p": {"_": [["mock.MagicMock", 0.08664261522210785], ["str", 0.06434990030782615]], "args": [], "kwargs": [], "mock_insert": [["mock.MagicMock", 0.08664261522210785], ["str", 0.06434990030782615]], "self": []}, "q_name": "TestBigQueryHookMethods.test_run_query_sql_dialect", "ret_exprs": [], "ret_type": "", "variables": {"_": "", "kwargs": ""}, "variables_p": {"_": [["int", 0.3803869320637631], ["float", 0.15802746558517075], ["Tuple[str, str, str]", 0.09454442272977188], ["str", 0.09247700941394743]], "kwargs": [["list", 0.17791350967713432], ["dict", 0.1748204545379023], ["str", 0.09618512640492528], ["bool", 0.09138752560851301]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[224, 4], [234, 72]], "fn_var_ln": {"_": [[233, 8], [233, 9]], "kwargs": [[233, 11], [233, 17]], "params": [[225, 8], [225, 14]]}, "fn_var_occur": {"_": [["_", "kwargs", "mock_insert", "call_args"]], "kwargs": [["_", "kwargs", "mock_insert", "call_args"], ["kwargs", "False"]], "params": [["self", "hook", "run_query", "use_legacy_sql", "False", "query_params", "params"]]}, "name": "test_run_query_sql_dialect_legacy_with_query_params", "params": {"_": "", "mock_insert": "", "self": ""}, "params_descr": {"_": "", "mock_insert": "", "self": ""}, "params_occur": {"_": [["_", "kwargs", "mock_insert", "call_args"]], "mock_insert": [["_", "kwargs", "mock_insert", "call_args"]], "self": [["self", "hook", "run_query", "use_legacy_sql", "False", "query_params", "params"]]}, "params_p": {"_": [["mock.MagicMock", 0.08783110729934192]], "args": [], "kwargs": [], "mock_insert": [["mock.MagicMock", 0.08783110729934192]], "self": []}, "q_name": "TestBigQueryHookMethods.test_run_query_sql_dialect_legacy_with_query_params", "ret_exprs": [], "ret_type": "", "variables": {"_": "", "kwargs": "", "params": ""}, "variables_p": {"_": [["int", 0.3803869320637631], ["float", 0.15802746558517075], ["Tuple[str, str, str]", 0.09454442272977188], ["str", 0.09247700941394743]], "kwargs": [["list", 0.17791350967713432], ["dict", 0.1748204545379023], ["str", 0.09618512640492528], ["bool", 0.09138752560851301]], "params": [["bool", 0.4132364709863101], ["List[str]", 0.3799244951667702], ["Set[str]", 0.06750077378245821], ["str", 0.06750077378245821]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[237, 4], [246, 82]], "fn_var_ln": {"params": [[238, 8], [238, 14]]}, "fn_var_occur": {"params": [["self", "hook", "run_query", "use_legacy_sql", "True", "query_params", "params"]]}, "name": "test_run_query_sql_dialect_legacy_with_query_params_fails", "params": {"_": "", "self": ""}, "params_descr": {"_": "", "self": ""}, "params_occur": {"_": [], "self": [["self", "hook", "run_query", "use_legacy_sql", "True", "query_params", "params"]]}, "params_p": {"_": [["str", 0.40375672524378825], ["bool", 0.18111938057762605]], "args": [], "kwargs": [], "self": []}, "q_name": "TestBigQueryHookMethods.test_run_query_sql_dialect_legacy_with_query_params_fails", "ret_exprs": [], "ret_type": "", "variables": {"params": ""}, "variables_p": {"params": [["List[str]", 0.48147569895352504], ["Tuple[str, Literal]", 0.2082283678114279], ["Tuple[str, str]", 0.2051085986805139], ["Tuple[str]", 0.10518733455453301]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[249, 4], [253, 41]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_run_query_without_sql_fails", "params": {"_": "", "self": ""}, "params_descr": {"_": "", "self": ""}, "params_occur": {"_": [], "self": [["self", "hook", "run_query", "sql", "None"]]}, "params_p": {"_": [["str", 0.15399031235518604]], "args": [], "kwargs": [], "self": []}, "q_name": "TestBigQueryHookMethods.test_run_query_without_sql_fails", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[268, 4], [283, 88]], "fn_var_ln": {"_": [[281, 8], [281, 9]], "kwargs": [[281, 11], [281, 17]]}, "fn_var_occur": {"_": [["_", "kwargs", "mock_insert", "call_args"]], "kwargs": [["_", "kwargs", "mock_insert", "call_args"], ["kwargs", "schema_update_options"], ["kwargs", "write_disposition"]]}, "name": "test_run_query_schema_update_options", "params": {"_": "", "mock_insert": "", "schema_update_options": "", "self": "", "write_disposition": ""}, "params_descr": {"_": "", "mock_insert": "", "schema_update_options": "", "self": "", "write_disposition": ""}, "params_occur": {"_": [["_", "kwargs", "mock_insert", "call_args"]], "mock_insert": [["_", "kwargs", "mock_insert", "call_args"]], "schema_update_options": [["self", "hook", "run_query", "sql", "destination_dataset_table", "schema_update_options", "schema_update_options", "write_disposition", "write_disposition"], ["kwargs", "schema_update_options"]], "self": [["self", "hook", "run_query", "sql", "destination_dataset_table", "schema_update_options", "schema_update_options", "write_disposition", "write_disposition"]], "write_disposition": [["self", "hook", "run_query", "sql", "destination_dataset_table", "schema_update_options", "schema_update_options", "write_disposition", "write_disposition"], ["kwargs", "write_disposition"]]}, "params_p": {"_": [["mock.MagicMock", 0.09931856411664636]], "args": [], "kwargs": [], "mock_insert": [["mock.MagicMock", 0.09931856411664636]], "schema_update_options": [], "self": [], "write_disposition": []}, "q_name": "TestBigQueryHookMethods.test_run_query_schema_update_options", "ret_exprs": [], "ret_type": "", "variables": {"_": "", "kwargs": ""}, "variables_p": {"_": [["int", 0.3803869320637631], ["float", 0.15802746558517075], ["Tuple[str, str, str]", 0.09454442272977188], ["str", 0.09247700941394743]], "kwargs": [["dict", 0.1429811263652555], ["bool", 0.1043826169398482], ["google.protobuf.Any_pb2.Any", 0.09676802071686082], ["List[Dict[str, Any]]", 0.09213424089201887], ["List[Dict[str, str]]", 0.08966308374004202], ["List[str]", 0.08966308374004202], ["Tuple[Literal, Literal, Literal]", 0.08521195458035288], ["Dict[str, Union[dict, int]]", 0.08330477161499433]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[311, 4], [320, 13]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_run_query_schema_update_options_incorrect", "params": {"_": "", "expected_regex": "", "schema_update_options": "", "self": "", "write_disposition": ""}, "params_descr": {"_": "", "expected_regex": "", "schema_update_options": "", "self": "", "write_disposition": ""}, "params_occur": {"_": [], "expected_regex": [["pytest", "raises", "ValueError", "match", "expected_regex"]], "schema_update_options": [["self", "hook", "run_query", "sql", "destination_dataset_table", "schema_update_options", "schema_update_options", "write_disposition", "write_disposition"]], "self": [["self", "hook", "run_query", "sql", "destination_dataset_table", "schema_update_options", "schema_update_options", "write_disposition", "write_disposition"]], "write_disposition": [["self", "hook", "run_query", "sql", "destination_dataset_table", "schema_update_options", "schema_update_options", "write_disposition", "write_disposition"]]}, "params_p": {"_": [["int", 0.30600897781250425], ["List[str]", 0.18960885645629824], ["bool", 0.10880374379723566], ["str", 0.07877159755742912]], "args": [], "expected_regex": [["str", 1.0]], "kwargs": [], "schema_update_options": [["Optional[str]", 0.21848297604577305], ["str", 0.14573866475127795], ["bool", 0.09211227964556545], ["Dict[str, list]", 0.08854810553945323]], "self": [], "write_disposition": [["Optional[str]", 0.21848297604577305], ["str", 0.14573866475127795], ["bool", 0.09211227964556545], ["Dict[str, list]", 0.08854810553945323]]}, "q_name": "TestBigQueryHookMethods.test_run_query_schema_update_options_incorrect", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[325, 4], [329, 71]], "fn_var_ln": {"_": [[327, 8], [327, 9]], "kwargs": [[327, 11], [327, 17]]}, "fn_var_occur": {"_": [["_", "kwargs", "mock_insert", "call_args"]], "kwargs": [["_", "kwargs", "mock_insert", "call_args"], ["kwargs", "bool_val"], ["kwargs", "True"]]}, "name": "test_api_resource_configs", "params": {"_": "", "bool_val": "", "mock_insert": "", "self": ""}, "params_descr": {"_": "", "bool_val": "", "mock_insert": "", "self": ""}, "params_occur": {"_": [["_", "kwargs", "mock_insert", "call_args"]], "bool_val": [["self", "hook", "run_query", "api_resource_configs", "bool_val"], ["kwargs", "bool_val"]], "mock_insert": [["_", "kwargs", "mock_insert", "call_args"]], "self": [["self", "hook", "run_query", "api_resource_configs", "bool_val"]]}, "params_p": {"_": [["mock.MagicMock", 0.08998496236157015]], "args": [], "bool_val": [["mock.MagicMock", 0.13818341731480943]], "kwargs": [], "mock_insert": [["mock.MagicMock", 0.08998496236157015]], "self": []}, "q_name": "TestBigQueryHookMethods.test_api_resource_configs", "ret_exprs": [], "ret_type": "", "variables": {"_": "", "kwargs": ""}, "variables_p": {"_": [["int", 0.3803869320637631], ["float", 0.15802746558517075], ["Tuple[str, str, str]", 0.09454442272977188], ["str", 0.09247700941394743]], "kwargs": [["list", 0.3054883026333567]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[332, 4], [343, 13]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_api_resource_configs_duplication_warning", "params": {"mock_get_service": "", "self": ""}, "params_descr": {"mock_get_service": "", "self": ""}, "params_occur": {"mock_get_service": [], "self": [["self", "hook", "run_query", "use_legacy_sql", "True", "api_resource_configs", "False"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_service": [["mock.Mock", 0.23429002039770136], ["mock.MagicMock", 0.07651449514085545], ["Callable", 0.07317602523400349]], "self": []}, "q_name": "TestBigQueryHookMethods.test_api_resource_configs_duplication_warning", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[345, 4], [350, 56]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_validate_value", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestBigQueryHookMethods.test_validate_value", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[352, 4], [361, 101]], "fn_var_ln": {"key_one": [[359, 12], [359, 19]]}, "fn_var_occur": {"key_one": [["key_one", "True"], ["_api_resource_configs_duplication_check", "key_one", "False"], ["_api_resource_configs_duplication_check", "key_one", "True", "None"]]}, "name": "test_duplication_check", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestBigQueryHookMethods.test_duplication_check", "ret_exprs": [], "ret_type": "", "variables": {"key_one": ""}, "variables_p": {"key_one": [["bool", 0.3073000201665329], ["int", 0.20378119393561533], ["Dict[str, Dict[str, str]]", 0.11729565429642527], ["ClassVar[bool]", 0.1038318949991916], ["List[str]", 0.0899676723200879], ["str", 0.08995707025725173], ["Dict[str, str]", 0.08786649402489535]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[363, 4], [387, 79]], "fn_var_ln": {"backward_compatibility_configs": [[366, 8], [366, 38]], "source_format": [[364, 8], [364, 21]], "src_fmt_configs": [[378, 8], [378, 23]], "valid_configs": [[365, 8], [365, 21]]}, "fn_var_occur": {"backward_compatibility_configs": [["_validate_src_fmt_configs", "source_format", "src_fmt_configs", "valid_configs", "backward_compatibility_configs"], ["src_fmt_configs", "_validate_src_fmt_configs", "source_format", "src_fmt_configs", "valid_configs", "backward_compatibility_configs"]], "source_format": [["_validate_src_fmt_configs", "source_format", "src_fmt_configs", "valid_configs", "backward_compatibility_configs"], ["src_fmt_configs", "_validate_src_fmt_configs", "source_format", "src_fmt_configs", "valid_configs", "backward_compatibility_configs"]], "src_fmt_configs": [["_validate_src_fmt_configs", "source_format", "src_fmt_configs", "valid_configs", "backward_compatibility_configs"], ["src_fmt_configs", "_validate_src_fmt_configs", "source_format", "src_fmt_configs", "valid_configs", "backward_compatibility_configs"]], "valid_configs": [["_validate_src_fmt_configs", "source_format", "src_fmt_configs", "valid_configs", "backward_compatibility_configs"], ["src_fmt_configs", "_validate_src_fmt_configs", "source_format", "src_fmt_configs", "valid_configs", "backward_compatibility_configs"]]}, "name": "test_validate_src_fmt_configs", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestBigQueryHookMethods.test_validate_src_fmt_configs", "ret_exprs": [], "ret_type": "", "variables": {"backward_compatibility_configs": "", "source_format": "", "src_fmt_configs": "", "valid_configs": ""}, "variables_p": {"backward_compatibility_configs": [["str", 0.7185781596538656], ["Dict[str, Union[int, str]]", 0.0959410206484788], ["Dict[str, str]", 0.09362460272828912]], "source_format": [["str", 0.9999999999999999]], "src_fmt_configs": [["str", 0.8951220839011693], ["Optional[str]", 0.10487791609883063]], "valid_configs": [["str", 0.7409656640424194], ["Dict[str, str]", 0.14019955942933715], ["List[str]", 0.11883477652824323]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[391, 4], [401, 73]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_run_load_with_non_csv_as_src_fmt", "params": {"_": "", "fmt": "", "self": ""}, "params_descr": {"_": "", "fmt": "", "self": ""}, "params_occur": {"_": [], "fmt": [["self", "hook", "run_load", "destination_project_dataset_table", "source_uris", "source_format", "fmt", "autodetect", "True"]], "self": [["self", "hook", "run_load", "destination_project_dataset_table", "source_uris", "source_format", "fmt", "autodetect", "True"]]}, "params_p": {"_": [["bool", 0.901005333823103]], "args": [], "fmt": [["Callable", 0.1099785744500122]], "kwargs": [], "self": []}, "q_name": "TestBigQueryHookMethods.test_run_load_with_non_csv_as_src_fmt", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[404, 4], [426, 104]], "fn_var_ln": {"destination_cloud_storage_uris": [[406, 8], [406, 38]], "expected_configuration": [[407, 8], [407, 30]], "source_project_dataset_table": [[405, 8], [405, 36]]}, "fn_var_occur": {"destination_cloud_storage_uris": [["expected_configuration", "PROJECT_ID", "DATASET_ID", "TABLE_ID", "destination_cloud_storage_uris", "True"], ["self", "hook", "run_extract", "source_project_dataset_table", "source_project_dataset_table", "destination_cloud_storage_uris", "destination_cloud_storage_uris"]], "expected_configuration": [["expected_configuration", "PROJECT_ID", "DATASET_ID", "TABLE_ID", "destination_cloud_storage_uris", "True"], ["mock_insert", "assert_called_once_with", "configuration", "expected_configuration", "project_id", "PROJECT_ID"]], "source_project_dataset_table": [["source_project_dataset_table", "PROJECT_ID", "DATASET_ID", "TABLE_ID"], ["self", "hook", "run_extract", "source_project_dataset_table", "source_project_dataset_table", "destination_cloud_storage_uris", "destination_cloud_storage_uris"]]}, "name": "test_run_extract", "params": {"mock_insert": "", "self": ""}, "params_descr": {"mock_insert": "", "self": ""}, "params_occur": {"mock_insert": [["mock_insert", "assert_called_once_with", "configuration", "expected_configuration", "project_id", "PROJECT_ID"]], "self": [["self", "hook", "run_extract", "source_project_dataset_table", "source_project_dataset_table", "destination_cloud_storage_uris", "destination_cloud_storage_uris"]]}, "params_p": {"args": [], "kwargs": [], "mock_insert": [], "self": []}, "q_name": "TestBigQueryHookMethods.test_run_extract", "ret_exprs": [], "ret_type": "", "variables": {"destination_cloud_storage_uris": "", "expected_configuration": "", "source_project_dataset_table": ""}, "variables_p": {"destination_cloud_storage_uris": [["float", 0.23906232690553061], ["str", 0.1772936046223761], ["list", 0.08527741194969857], ["Optional[str]", 0.08039985348018878]], "expected_configuration": [["str", 0.5281022297133213], ["List[Tuple[str, str]]", 0.2798038256203575], ["Generator[Any, None, None]", 0.09675189305568387]], "source_project_dataset_table": [["Dict[str, dict]", 0.08831030611635876]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[431, 4], [458, 59]], "fn_var_ln": {"actual": [[436, 12], [436, 18]], "mock_row_iterator": [[432, 8], [432, 25]]}, "fn_var_occur": {"actual": [["actual", "self", "hook", "list_rows", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "max_results", "selected_fields", "page_token", "start_index", "location", "LOCATION", "return_iterator", "return_iterator"], ["actual", "expected"]], "mock_row_iterator": [["mock_row_iterator", "_EmptyRowIterator"], ["mock_client", "return_value", "list_rows", "return_value", "mock_row_iterator"], ["False", "True", "mock_row_iterator"]]}, "name": "test_list_rows", "params": {"mock_client": "", "mock_schema": "", "mock_table": "", "self": ""}, "params_descr": {"mock_client": "", "mock_schema": "", "mock_table": "", "self": ""}, "params_occur": {"mock_client": [["mock_client", "return_value", "list_rows", "return_value", "mock_row_iterator"], ["mock_client", "return_value", "list_rows", "assert_called_once_with", "table", "mock_table", "from_api_repr", "return_value", "max_results", "selected_fields", "mock", "ANY", "page_token", "start_index", "retry", "DEFAULT_RETRY"], ["mock_client", "return_value", "list_rows", "reset_mock"]], "mock_schema": [["mock_schema", "assert_has_calls", "mock", "call", "x", "x"]], "mock_table": [["mock_table", "from_api_repr", "assert_called_once_with", "TABLE_REFERENCE_REPR"], ["mock_client", "return_value", "list_rows", "assert_called_once_with", "table", "mock_table", "from_api_repr", "return_value", "max_results", "selected_fields", "mock", "ANY", "page_token", "start_index", "retry", "DEFAULT_RETRY"], ["mock_table", "from_api_repr", "reset_mock"]], "self": [["actual", "self", "hook", "list_rows", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "max_results", "selected_fields", "page_token", "start_index", "location", "LOCATION", "return_iterator", "return_iterator"]]}, "params_p": {"args": [], "kwargs": [], "mock_client": [], "mock_schema": [], "mock_table": [], "self": []}, "q_name": "TestBigQueryHookMethods.test_list_rows", "ret_exprs": [], "ret_type": "", "variables": {"actual": "", "mock_row_iterator": ""}, "variables_p": {"actual": [["list", 0.23112156237195614], ["dict", 0.19131919371836204], ["Dict[str, str]", 0.09721142940656449], ["TextIO", 0.0843805839271179], ["Optional[Match[str]]", 0.08118896305128409], ["datetime.datetime.datetime", 0.08010288910298925], ["Dict[str, Optional[str]]", 0.07387636949476512]], "mock_row_iterator": [["Dict[str, Dict[str, Any]]", 0.45573427506245656], ["Dict[str, Union[Any, str]]", 0.3129585910547836], ["Dict[Any, Union[Any, Any]]", 0.12095048293047755], ["Dict[str, Any]", 0.1103566509522824]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[462, 4], [488, 59]], "fn_var_ln": {"actual": [[467, 12], [467, 18]], "mock_row_iterator": [[463, 8], [463, 25]]}, "fn_var_occur": {"actual": [["actual", "self", "hook", "list_rows", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "max_results", "page_token", "selected_fields", "start_index", "location", "LOCATION", "return_iterator", "return_iterator"], ["actual", "expected"]], "mock_row_iterator": [["mock_row_iterator", "_EmptyRowIterator"], ["mock_client", "return_value", "list_rows", "return_value", "mock_row_iterator"], ["False", "True", "mock_row_iterator"]]}, "name": "test_list_rows_with_empty_selected_fields", "params": {"mock_client": "", "mock_table": "", "self": ""}, "params_descr": {"mock_client": "", "mock_table": "", "self": ""}, "params_occur": {"mock_client": [["mock_client", "return_value", "list_rows", "return_value", "mock_row_iterator"], ["mock_client", "return_value", "list_rows", "assert_called_once_with", "table", "mock_table", "from_api_repr", "return_value", "max_results", "page_token", "selected_fields", "None", "start_index", "retry", "DEFAULT_RETRY"], ["mock_client", "return_value", "list_rows", "reset_mock"]], "mock_table": [["mock_table", "from_api_repr", "assert_called_once_with", "TABLE_REFERENCE_REPR"], ["mock_client", "return_value", "list_rows", "assert_called_once_with", "table", "mock_table", "from_api_repr", "return_value", "max_results", "page_token", "selected_fields", "None", "start_index", "retry", "DEFAULT_RETRY"], ["mock_table", "from_api_repr", "reset_mock"]], "self": [["actual", "self", "hook", "list_rows", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "max_results", "page_token", "selected_fields", "start_index", "location", "LOCATION", "return_iterator", "return_iterator"]]}, "params_p": {"args": [], "kwargs": [], "mock_client": [], "mock_table": [], "self": []}, "q_name": "TestBigQueryHookMethods.test_list_rows_with_empty_selected_fields", "ret_exprs": [], "ret_type": "", "variables": {"actual": "", "mock_row_iterator": ""}, "variables_p": {"actual": [["list", 0.23112156237195614], ["dict", 0.19131919371836204], ["Dict[str, str]", 0.09721142940656449], ["TextIO", 0.0843805839271179], ["Optional[Match[str]]", 0.08118896305128409], ["datetime.datetime.datetime", 0.08010288910298925], ["Dict[str, Optional[str]]", 0.07387636949476512]], "mock_row_iterator": [["Dict[str, Dict[str, Any]]", 0.45573427506245656], ["Dict[str, Union[Any, str]]", 0.3129585910547836], ["Dict[Any, Union[Any, Any]]", 0.12095048293047755], ["Dict[str, Any]", 0.1103566509522824]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[491, 4], [496, 9]], "fn_var_ln": {"source_dataset_table": [[492, 8], [492, 28]]}, "fn_var_occur": {"source_dataset_table": [["source_dataset_table", "DATASET_ID", "TABLE_ID"], ["self", "hook", "run_table_delete", "source_dataset_table", "ignore_if_missing", "False"], ["mock_client", "return_value", "delete_table", "assert_called_once_with", "table", "source_dataset_table", "not_found_ok", "False"]]}, "name": "test_run_table_delete", "params": {"mock_client": "", "self": ""}, "params_descr": {"mock_client": "", "self": ""}, "params_occur": {"mock_client": [["mock_client", "return_value", "delete_table", "assert_called_once_with", "table", "source_dataset_table", "not_found_ok", "False"]], "self": [["self", "hook", "run_table_delete", "source_dataset_table", "ignore_if_missing", "False"]]}, "params_p": {"args": [], "kwargs": [], "mock_client": [], "self": []}, "q_name": "TestBigQueryHookMethods.test_run_table_delete", "ret_exprs": [], "ret_type": "", "variables": {"source_dataset_table": ""}, "variables_p": {"source_dataset_table": [["dict", 0.13242194586745268], ["Dict[str, int]", 0.11228656588755254], ["int", 0.09455018822971867], ["Iterator[Any]", 0.0930477191667253], ["float", 0.08629210539275575], ["str", 0.08534442655634257], ["List['Book']", 0.08460731708566259], ["List['Photo']", 0.08460731708566259]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[500, 4], [507, 97]], "fn_var_ln": {"return_value": [[502, 8], [502, 29]], "table_resource": [[501, 8], [501, 22]]}, "fn_var_occur": {"return_value": [["mock_get", "return_value"]], "table_resource": [["table_resource", "TABLE_ID"], ["self", "hook", "run_table_upsert", "dataset_id", "DATASET_ID", "table_resource", "table_resource"], ["mock_create", "assert_called_once_with", "table_resource", "table_resource", "project_id", "PROJECT_ID"]]}, "name": "test_table_upsert_create_new_table", "params": {"mock_create": "", "mock_get": "", "self": ""}, "params_descr": {"mock_create": "", "mock_get": "", "self": ""}, "params_occur": {"mock_create": [["mock_create", "assert_called_once_with", "table_resource", "table_resource", "project_id", "PROJECT_ID"]], "mock_get": [["mock_get", "return_value"], ["mock_get", "assert_called_once_with", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID"]], "self": [["self", "hook", "run_table_upsert", "dataset_id", "DATASET_ID", "table_resource", "table_resource"]]}, "params_p": {"args": [], "kwargs": [], "mock_create": [], "mock_get": [], "self": []}, "q_name": "TestBigQueryHookMethods.test_table_upsert_create_new_table", "ret_exprs": [], "ret_type": "", "variables": {"return_value": "", "table_resource": ""}, "variables_p": {"return_value": [["Set[str]", 0.31968019372842504], ["str", 0.28974495331495453], ["list", 0.1978080233656786], ["int", 0.09819123429613609], ["List[str]", 0.09457559529480569]], "table_resource": [["dict", 0.206612303676128], ["str", 0.09435405440103102]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[511, 4], [518, 74]], "fn_var_ln": {"return_value": [[513, 8], [513, 29]], "table_resource": [[512, 8], [512, 22]]}, "fn_var_occur": {"return_value": [["mock_get", "return_value", "TABLE_ID"]], "table_resource": [["table_resource", "TABLE_ID"], ["self", "hook", "run_table_upsert", "dataset_id", "DATASET_ID", "table_resource", "table_resource"], ["mock_update", "assert_called_once_with", "table_resource", "table_resource"]]}, "name": "test_table_upsert_already_exists", "params": {"mock_get": "", "mock_update": "", "self": ""}, "params_descr": {"mock_get": "", "mock_update": "", "self": ""}, "params_occur": {"mock_get": [["mock_get", "return_value", "TABLE_ID"], ["mock_get", "assert_called_once_with", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID"]], "mock_update": [["mock_update", "assert_called_once_with", "table_resource", "table_resource"]], "self": [["self", "hook", "run_table_upsert", "dataset_id", "DATASET_ID", "table_resource", "table_resource"]]}, "params_p": {"args": [], "kwargs": [], "mock_get": [], "mock_update": [["str", 0.07522077815253175]], "self": []}, "q_name": "TestBigQueryHookMethods.test_table_upsert_already_exists", "ret_exprs": [], "ret_type": "", "variables": {"return_value": "", "table_resource": ""}, "variables_p": {"return_value": [["str", 0.4546867876264694], ["int", 0.14454271912929145], ["List[Dict[str, Any]]", 0.08010081809963705]], "table_resource": [["dict", 0.206612303676128], ["str", 0.09435405440103102]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[522, 4], [545, 9]], "fn_var_ln": {"access_entries": [[532, 8], [532, 30]], "dataset": [[531, 8], [531, 15]], "return_value": [[533, 8], [533, 29]], "view_access": [[525, 8], [525, 19]], "view_dataset": [[524, 8], [524, 20]], "view_table": [[523, 8], [523, 18]]}, "fn_var_occur": {"access_entries": [["dataset", "access_entries"], ["view_access", "dataset", "access_entries"]], "dataset": [["dataset", "Dataset", "DatasetReference", "from_string", "DATASET_ID", "PROJECT_ID"], ["dataset", "access_entries"], ["mock_get", "return_value", "dataset"], ["view_access", "dataset", "access_entries"], ["mock_update", "assert_called_once_with", "fields", "dataset_resource", "dataset", "to_api_repr", "project_id", "PROJECT_ID"]], "return_value": [["mock_get", "return_value", "dataset"]], "view_access": [["view_access", "AccessEntry", "role", "None", "entity_type", "entity_id", "PROJECT_ID", "view_dataset", "view_table"], ["view_access", "dataset", "access_entries"]], "view_dataset": [["view_dataset", "DATASET_ID"], ["view_access", "AccessEntry", "role", "None", "entity_type", "entity_id", "PROJECT_ID", "view_dataset", "view_table"], ["self", "hook", "run_grant_dataset_view_access", "source_dataset", "DATASET_ID", "view_dataset", "view_dataset", "view_table", "view_table"]], "view_table": [["view_table", "TABLE_ID"], ["view_access", "AccessEntry", "role", "None", "entity_type", "entity_id", "PROJECT_ID", "view_dataset", "view_table"], ["self", "hook", "run_grant_dataset_view_access", "source_dataset", "DATASET_ID", "view_dataset", "view_dataset", "view_table", "view_table"]]}, "name": "test_run_grant_dataset_view_access_granting", "params": {"mock_get": "", "mock_update": "", "self": ""}, "params_descr": {"mock_get": "", "mock_update": "", "self": ""}, "params_occur": {"mock_get": [["mock_get", "return_value", "dataset"], ["mock_get", "assert_called_once_with", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID"]], "mock_update": [["mock_update", "assert_called_once_with", "fields", "dataset_resource", "dataset", "to_api_repr", "project_id", "PROJECT_ID"]], "self": [["self", "hook", "run_grant_dataset_view_access", "source_dataset", "DATASET_ID", "view_dataset", "view_dataset", "view_table", "view_table"]]}, "params_p": {"args": [], "kwargs": [], "mock_get": [], "mock_update": [["mock.Mock", 0.15685112433913256]], "self": []}, "q_name": "TestBigQueryHookMethods.test_run_grant_dataset_view_access_granting", "ret_exprs": [], "ret_type": "", "variables": {"access_entries": "", "dataset": "", "return_value": "", "view_access": "", "view_dataset": "", "view_table": ""}, "variables_p": {"access_entries": [["str", 0.4999999999659173], ["frozenset[Any]", 0.49999999987275584], ["bool", 6.21076293617507e-11], ["int", 6.21076293617507e-11], ["float", 3.711166272714891e-11]], "dataset": [["list", 0.1946105755717524], ["str", 0.17639885392555088], ["float", 0.11828036483378863], ["Optional[List[Any]]", 0.09395593573379764], ["Dict[str, List[str]]", 0.07886158413291393]], "return_value": [["int", 0.2854560711354669], ["str", 0.22297769573804777], ["Dict[str, Dict[str, Any]]", 0.09353613298236951], ["List[Dict[str, str]]", 0.07299156962240015]], "view_access": [["str", 0.4042640244070653], ["int", 0.2665170106993967], ["datetime.datetime", 0.1239930026041815], ["List[int]", 0.11459275097334733]], "view_dataset": [["str", 0.45701462517481983], ["int", 0.36256856001304527], ["List[str]", 0.08916415071862935]], "view_table": [["str", 0.18455561264331366], ["Dict[int, str]", 0.1350149673939552], ["list", 0.11664369296031048], ["Dict[str, str]", 0.11072258776061177], ["List[Optional[str]]", 0.10788197967460723], ["List[str]", 0.08639492300435174], ["Optional[str]", 0.08584446616923629]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[549, 4], [567, 42]], "fn_var_ln": {"access_entries": [[559, 8], [559, 30]], "dataset": [[558, 8], [558, 15]], "return_value": [[560, 8], [560, 29]], "view_access": [[552, 8], [552, 19]], "view_dataset": [[551, 8], [551, 20]], "view_table": [[550, 8], [550, 18]]}, "fn_var_occur": {"access_entries": [["dataset", "access_entries", "view_access"]], "dataset": [["dataset", "Dataset", "DatasetReference", "from_string", "DATASET_ID", "PROJECT_ID"], ["dataset", "access_entries", "view_access"], ["mock_get", "return_value", "dataset"]], "return_value": [["mock_get", "return_value", "dataset"]], "view_access": [["view_access", "AccessEntry", "role", "None", "entity_type", "entity_id", "PROJECT_ID", "view_dataset", "view_table"], ["dataset", "access_entries", "view_access"]], "view_dataset": [["view_dataset", "DATASET_ID"], ["view_access", "AccessEntry", "role", "None", "entity_type", "entity_id", "PROJECT_ID", "view_dataset", "view_table"], ["self", "hook", "run_grant_dataset_view_access", "source_dataset", "DATASET_ID", "view_dataset", "view_dataset", "view_table", "view_table"]], "view_table": [["view_table", "TABLE_ID"], ["view_access", "AccessEntry", "role", "None", "entity_type", "entity_id", "PROJECT_ID", "view_dataset", "view_table"], ["self", "hook", "run_grant_dataset_view_access", "source_dataset", "DATASET_ID", "view_dataset", "view_dataset", "view_table", "view_table"]]}, "name": "test_run_grant_dataset_view_access_already_granted", "params": {"mock_get": "", "mock_update": "", "self": ""}, "params_descr": {"mock_get": "", "mock_update": "", "self": ""}, "params_occur": {"mock_get": [["mock_get", "return_value", "dataset"], ["mock_get", "assert_called_once_with", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID"]], "mock_update": [["len", "mock_update", "calls"]], "self": [["self", "hook", "run_grant_dataset_view_access", "source_dataset", "DATASET_ID", "view_dataset", "view_dataset", "view_table", "view_table"]]}, "params_p": {"args": [], "kwargs": [], "mock_get": [], "mock_update": [], "self": []}, "q_name": "TestBigQueryHookMethods.test_run_grant_dataset_view_access_already_granted", "ret_exprs": [], "ret_type": "", "variables": {"access_entries": "", "dataset": "", "return_value": "", "view_access": "", "view_dataset": "", "view_table": ""}, "variables_p": {"access_entries": [["str", 0.4999999999659173], ["frozenset[Any]", 0.49999999987275584], ["bool", 6.21076293617507e-11], ["int", 6.21076293617507e-11], ["float", 3.711166272714891e-11]], "dataset": [["str", 0.27271932544832633], ["float", 0.13332151281059765], ["list", 0.0922168801963696], ["int", 0.08617161536458867]], "return_value": [["int", 0.2854560711354669], ["str", 0.22297769573804777], ["Dict[str, Dict[str, Any]]", 0.09353613298236951], ["List[Dict[str, str]]", 0.07299156962240015]], "view_access": [["str", 0.4042640244070653], ["int", 0.2665170106993967], ["datetime.datetime", 0.1239930026041815], ["List[int]", 0.11459275097334733]], "view_dataset": [["str", 0.45701462517481983], ["int", 0.36256856001304527], ["List[str]", 0.08916415071862935]], "view_table": [["str", 0.18455561264331366], ["Dict[int, str]", 0.1350149673939552], ["list", 0.11664369296031048], ["Dict[str, str]", 0.11072258776061177], ["List[Optional[str]]", 0.10788197967460723], ["List[str]", 0.08639492300435174], ["Optional[str]", 0.08584446616923629]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[570, 4], [586, 35]], "fn_var_ln": {"dataset_reference": [[580, 8], [580, 25]], "result": [[581, 8], [581, 14]], "table_list": [[571, 8], [571, 18]], "table_list_response": [[577, 8], [577, 27]]}, "fn_var_occur": {"dataset_reference": [["dataset_reference", "DatasetReference", "PROJECT_ID", "DATASET_ID"], ["mock_client", "return_value", "list_tables", "assert_called_once_with", "dataset", "dataset_reference", "max_results", "None"]], "result": [["result", "self", "hook", "get_dataset_tables_list", "dataset_id", "DATASET_ID", "project_id", "PROJECT_ID"], ["table_list", "result"]], "table_list": [["table_list", "PROJECT_ID", "DATASET_ID", "PROJECT_ID", "DATASET_ID", "PROJECT_ID", "DATASET_ID", "PROJECT_ID", "DATASET_ID"], ["table_list_response", "Table", "from_api_repr", "t", "t", "table_list"], ["table_list", "result"]], "table_list_response": [["table_list_response", "Table", "from_api_repr", "t", "t", "table_list"], ["mock_client", "return_value", "list_tables", "return_value", "table_list_response"]]}, "name": "test_get_dataset_tables_list", "params": {"mock_client": "", "self": ""}, "params_descr": {"mock_client": "", "self": ""}, "params_occur": {"mock_client": [["mock_client", "return_value", "list_tables", "return_value", "table_list_response"], ["mock_client", "return_value", "list_tables", "assert_called_once_with", "dataset", "dataset_reference", "max_results", "None"]], "self": [["result", "self", "hook", "get_dataset_tables_list", "dataset_id", "DATASET_ID", "project_id", "PROJECT_ID"]]}, "params_p": {"args": [], "kwargs": [], "mock_client": [], "self": []}, "q_name": "TestBigQueryHookMethods.test_get_dataset_tables_list", "ret_exprs": [], "ret_type": "", "variables": {"dataset_reference": "", "result": "", "table_list": "", "table_list_response": ""}, "variables_p": {"dataset_reference": [["str", 0.5079656630170704], ["Dict[str, Union[int, str]]", 0.10801442871731429], ["Dict[str, str]", 0.09499526739105286], ["Optional[str]", 0.09327538924522977]], "result": [["str", 0.28147510682849586], ["List[Dict[str, str]]", 0.1297631450655486], ["int", 0.11356621810216419], ["Dict[str, int]", 0.0915261051091505], ["list", 0.08832655607146855]], "table_list": [["str", 0.40248640128851165], ["Dict[str, str]", 0.22145032228149142], ["Dict[str, List[str]]", 0.19092131989456135], ["List[str]", 0.09490236061988301], ["Tuple[str, str]", 0.09023959591555242]], "table_list_response": [["str", 0.2881714624419987], ["Dict[str, str]", 0.2014048357491022], ["Dict[str, List[Any]]", 0.1958794604859618], ["Dict[str, Dict[str, Any]]", 0.08614097844495901]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[589, 4], [593, 103]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_poll_job_complete", "params": {"mock_client": "", "self": ""}, "params_descr": {"mock_client": "", "self": ""}, "params_occur": {"mock_client": [["mock_client", "assert_called_once_with", "location", "LOCATION", "project_id", "PROJECT_ID"], ["mock_client", "return_value", "get_job", "assert_called_once_with", "job_id", "JOB_ID"], ["mock_client", "return_value", "get_job", "return_value", "done", "assert_called_once_with", "retry", "DEFAULT_RETRY"]], "self": [["self", "hook", "poll_job_complete", "job_id", "JOB_ID", "location", "LOCATION", "project_id", "PROJECT_ID"]]}, "params_p": {"args": [], "kwargs": [], "mock_client": [], "self": []}, "q_name": "TestBigQueryHookMethods.test_poll_job_complete", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[597, 4], [607, 83]], "fn_var_ln": {"return_value": [[602, 8], [602, 38]]}, "fn_var_occur": {"return_value": [["poll_job_complete", "return_value", "True"]]}, "name": "test_cancel_query_jobs_to_cancel", "params": {"mock_logger_info": "", "poll_job_complete": "", "self": ""}, "params_descr": {"mock_logger_info": "", "poll_job_complete": "", "self": ""}, "params_occur": {"mock_logger_info": [["mock_logger_info", "has_call", "mock", "call"]], "poll_job_complete": [["poll_job_complete", "return_value", "True"], ["poll_job_complete", "assert_called_once_with", "job_id", "JOB_ID", "project_id", "PROJECT_ID", "location", "None"]], "self": [["self", "hook", "running_job_id", "JOB_ID"], ["self", "hook", "cancel_query"]]}, "params_p": {"args": [], "kwargs": [], "mock_logger_info": [], "poll_job_complete": [["mock.Mock", 0.0943877243706835]], "self": []}, "q_name": "TestBigQueryHookMethods.test_cancel_query_jobs_to_cancel", "ret_exprs": [], "ret_type": "", "variables": {"return_value": ""}, "variables_p": {"return_value": [["str", 0.1926029787717986], ["Dict[str, Union[int, str]]", 0.09606037961660045], ["list", 0.07896799391912494], ["Dict[Any, Union[int, str]]", 0.07027753282771057], ["Dict[str, Any]", 0.06642827795778186], ["Optional[bytes]", 0.061113191391861436], ["Optional[str]", 0.0588993313933327]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[613, 4], [632, 9]], "fn_var_ln": {"side_effect": [[620, 8], [620, 37]]}, "fn_var_occur": {"side_effect": [["poll_job_complete", "side_effect", "False"]]}, "name": "test_cancel_query_cancel_timeout", "params": {"mock_client": "", "mock_logger_info": "", "mock_sleep": "", "poll_job_complete": "", "self": ""}, "params_descr": {"mock_client": "", "mock_logger_info": "", "mock_sleep": "", "poll_job_complete": "", "self": ""}, "params_occur": {"mock_client": [["mock_client", "return_value", "cancel_job", "assert_called_once_with", "job_id", "JOB_ID"]], "mock_logger_info": [["mock_logger_info", "has_call", "mock", "call", "JOB_ID"]], "mock_sleep": [["mock_sleep", "call_count"]], "poll_job_complete": [["poll_job_complete", "side_effect", "False"], ["poll_job_complete", "call_count"]], "self": [["self", "hook", "running_job_id", "JOB_ID"], ["self", "hook", "cancel_query"]]}, "params_p": {"args": [], "kwargs": [], "mock_client": [], "mock_logger_info": [], "mock_sleep": [["mock.Mock", 0.2331864256441627], ["mock.MagicMock", 0.07142701589332172]], "poll_job_complete": [], "self": []}, "q_name": "TestBigQueryHookMethods.test_cancel_query_cancel_timeout", "ret_exprs": [], "ret_type": "", "variables": {"side_effect": ""}, "variables_p": {"side_effect": [["str", 0.2440451311499846], ["List[List[int]]", 0.11460657785671309], ["tuple", 0.09005575769557843]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[638, 4], [652, 102]], "fn_var_ln": {"side_effect": [[645, 8], [645, 37]]}, "fn_var_occur": {"side_effect": [["poll_job_complete", "side_effect", "False", "True"]]}, "name": "test_cancel_query_cancel_completed", "params": {"mock_client": "", "mock_logger_info": "", "mock_sleep": "", "poll_job_complete": "", "self": ""}, "params_descr": {"mock_client": "", "mock_logger_info": "", "mock_sleep": "", "poll_job_complete": "", "self": ""}, "params_occur": {"mock_client": [["mock_client", "return_value", "cancel_job", "assert_called_once_with", "job_id", "JOB_ID"]], "mock_logger_info": [["mock_logger_info", "has_call", "mock", "call", "PROJECT_ID", "PROJECT_ID"]], "mock_sleep": [["mock_sleep", "call_count"]], "poll_job_complete": [["poll_job_complete", "side_effect", "False", "True"], ["poll_job_complete", "call_count"]], "self": [["self", "hook", "running_job_id", "JOB_ID"], ["self", "hook", "cancel_query"]]}, "params_p": {"args": [], "kwargs": [], "mock_client": [], "mock_logger_info": [], "mock_sleep": [["mock.Mock", 0.20421683819621758], ["mock.MagicMock", 0.0723254317144087]], "poll_job_complete": [["antidote.providers.lazy.LazyCallProvider", 0.08791397862410674]], "self": []}, "q_name": "TestBigQueryHookMethods.test_cancel_query_cancel_completed", "ret_exprs": [], "ret_type": "", "variables": {"side_effect": ""}, "variables_p": {"side_effect": [["str", 0.8999999999999999], ["bool", 0.1]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[655, 4], [671, 41]], "fn_var_ln": {"result": [[667, 8], [667, 14]], "table": [[656, 8], [656, 13]]}, "fn_var_occur": {"result": [["result", "self", "hook", "get_schema", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID"], ["len", "result"]], "table": [["table", "TABLE_REFERENCE_REPR"], ["mock_client", "return_value", "get_table", "return_value", "Table", "from_api_repr", "table"]]}, "name": "test_get_schema", "params": {"mock_client": "", "self": ""}, "params_descr": {"mock_client": "", "self": ""}, "params_occur": {"mock_client": [["mock_client", "return_value", "get_table", "return_value", "Table", "from_api_repr", "table"], ["mock_client", "return_value", "get_table", "assert_called_once_with", "TABLE_REFERENCE"]], "self": [["result", "self", "hook", "get_schema", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID"]]}, "params_p": {"args": [], "kwargs": [], "mock_client": [], "self": []}, "q_name": "TestBigQueryHookMethods.test_get_schema", "ret_exprs": [], "ret_type": "", "variables": {"result": "", "table": ""}, "variables_p": {"result": [["list", 0.5380846348905786], ["Dict[str, Any]", 0.09577392089799638], ["deque[Any]", 0.09502070552181881], ["Dict[str, int]", 0.09019413097248284]], "table": [["str", 0.09199825194677014]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[675, 4], [766, 9]], "fn_var_ln": {"expected_result_schema": [[718, 8], [718, 30]], "return_value": [[676, 8], [676, 36]], "schema_fields_updates": [[702, 8], [702, 29]]}, "fn_var_occur": {"expected_result_schema": [["mock_update", "assert_called_once_with", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "project_id", "PROJECT_ID", "table_resource", "expected_result_schema", "fields"]], "return_value": [["mock_get_schema", "return_value"]], "schema_fields_updates": [["self", "hook", "update_table_schema", "schema_fields_updates", "schema_fields_updates", "include_policy_tags", "True", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID"]]}, "name": "test_update_table_schema_with_policy_tags", "params": {"mock_get_schema": "", "mock_update": "", "self": ""}, "params_descr": {"mock_get_schema": "", "mock_update": "", "self": ""}, "params_occur": {"mock_get_schema": [["mock_get_schema", "return_value"]], "mock_update": [["mock_update", "assert_called_once_with", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "project_id", "PROJECT_ID", "table_resource", "expected_result_schema", "fields"]], "self": [["self", "hook", "update_table_schema", "schema_fields_updates", "schema_fields_updates", "include_policy_tags", "True", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_schema": [], "mock_update": [], "self": []}, "q_name": "TestBigQueryHookMethods.test_update_table_schema_with_policy_tags", "ret_exprs": [], "ret_type": "", "variables": {"expected_result_schema": "", "return_value": "", "schema_fields_updates": ""}, "variables_p": {"expected_result_schema": [["str", 1.0]], "return_value": [["int", 0.3135222837064679], ["str", 0.23052785147261584], ["Tuple[int, int]", 0.11094316168745796], ["Dict[str, Union[int, str]]", 0.07347137688931107]], "schema_fields_updates": [["str", 0.5179861820991455], ["Dict[Tuple[str, str], Tuple[float, float]]", 0.12130823104430574], ["list", 0.089919532822634], ["Dict[str, Union[int, str]]", 0.08791551227579077]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[770, 4], [843, 9]], "fn_var_ln": {"expected_result_schema": [[803, 8], [803, 30]], "return_value": [[771, 8], [771, 36]], "schema_fields_updates": [[787, 8], [787, 29]]}, "fn_var_occur": {"expected_result_schema": [["mock_update", "assert_called_once_with", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "project_id", "PROJECT_ID", "table_resource", "expected_result_schema", "fields"]], "return_value": [["mock_get_schema", "return_value"]], "schema_fields_updates": [["self", "hook", "update_table_schema", "schema_fields_updates", "schema_fields_updates", "include_policy_tags", "False", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID"]]}, "name": "test_update_table_schema_without_policy_tags", "params": {"mock_get_schema": "", "mock_update": "", "self": ""}, "params_descr": {"mock_get_schema": "", "mock_update": "", "self": ""}, "params_occur": {"mock_get_schema": [["mock_get_schema", "return_value"]], "mock_update": [["mock_update", "assert_called_once_with", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "project_id", "PROJECT_ID", "table_resource", "expected_result_schema", "fields"]], "self": [["self", "hook", "update_table_schema", "schema_fields_updates", "schema_fields_updates", "include_policy_tags", "False", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_schema": [], "mock_update": [], "self": []}, "q_name": "TestBigQueryHookMethods.test_update_table_schema_without_policy_tags", "ret_exprs": [], "ret_type": "", "variables": {"expected_result_schema": "", "return_value": "", "schema_fields_updates": ""}, "variables_p": {"expected_result_schema": [["str", 1.0]], "return_value": [["int", 0.3135222837064679], ["str", 0.23052785147261584], ["Tuple[int, int]", 0.11094316168745796], ["Dict[str, Union[int, str]]", 0.07347137688931107]], "schema_fields_updates": [["str", 0.6275574557842383], ["Dict[Tuple[str, str], Tuple[float, float]]", 0.1014427540602588], ["list", 0.09075052994795794]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[846, 4], [852, 105]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_invalid_source_format", "params": {"mock_get_service": "", "self": ""}, "params_descr": {"mock_get_service": "", "self": ""}, "params_occur": {"mock_get_service": [], "self": [["self", "hook", "run_load", "source_format"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_service": [["mock.Mock", 0.16089369290889732]], "self": []}, "q_name": "TestBigQueryHookMethods.test_invalid_source_format", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[855, 4], [872, 9]], "fn_var_ln": {"rows": [[856, 8], [856, 12]]}, "fn_var_occur": {"rows": [["self", "hook", "insert_all", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "rows", "rows", "ignore_unknown_values", "True", "skip_invalid_rows", "True"], ["mock_client", "return_value", "insert_rows", "assert_called_once_with", "table", "mock_client", "return_value", "get_table", "return_value", "rows", "rows", "ignore_unknown_values", "True", "skip_invalid_rows", "True"]]}, "name": "test_insert_all_succeed", "params": {"mock_client": "", "self": ""}, "params_descr": {"mock_client": "", "self": ""}, "params_occur": {"mock_client": [["mock_client", "return_value", "get_table", "assert_called_once_with", "TABLE_REFERENCE"], ["mock_client", "return_value", "insert_rows", "assert_called_once_with", "table", "mock_client", "return_value", "get_table", "return_value", "rows", "rows", "ignore_unknown_values", "True", "skip_invalid_rows", "True"]], "self": [["self", "hook", "insert_all", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "rows", "rows", "ignore_unknown_values", "True", "skip_invalid_rows", "True"]]}, "params_p": {"args": [], "kwargs": [], "mock_client": [], "self": []}, "q_name": "TestBigQueryHookMethods.test_insert_all_succeed", "ret_exprs": [], "ret_type": "", "variables": {"rows": ""}, "variables_p": {"rows": [["str", 0.9999999999999999]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[875, 4], [882, 13]], "fn_var_ln": {"rows": [[876, 8], [876, 12]]}, "fn_var_occur": {"rows": [["self", "hook", "insert_all", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "rows", "rows", "fail_on_error", "True"]]}, "name": "test_insert_all_fail", "params": {"mock_client": "", "self": ""}, "params_descr": {"mock_client": "", "self": ""}, "params_occur": {"mock_client": [["mock_client", "return_value", "insert_rows", "return_value"]], "self": [["self", "hook", "insert_all", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "rows", "rows", "fail_on_error", "True"]]}, "params_p": {"args": [], "kwargs": [], "mock_client": [], "self": []}, "q_name": "TestBigQueryHookMethods.test_insert_all_fail", "ret_exprs": [], "ret_type": "", "variables": {"rows": ""}, "variables_p": {"rows": [["str", 0.8925408292753902], ["Dict[str, Dict[str, Any]]", 0.10745917072460967]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[885, 4], [893, 90]], "fn_var_ln": {"_": [[892, 8], [892, 9]], "kwargs": [[892, 11], [892, 17]]}, "fn_var_occur": {"_": [["_", "kwargs", "mock_insert", "call_args"]], "kwargs": [["_", "kwargs", "mock_insert", "call_args"]]}, "name": "test_run_query_with_arg", "params": {"mock_insert": "", "self": ""}, "params_descr": {"mock_insert": "", "self": ""}, "params_occur": {"mock_insert": [["_", "kwargs", "mock_insert", "call_args"]], "self": [["self", "hook", "run_query", "sql", "destination_dataset_table", "labels"]]}, "params_p": {"args": [], "kwargs": [], "mock_insert": [["mock.MagicMock", 0.08664261522210785], ["str", 0.06434990030782615]], "self": []}, "q_name": "TestBigQueryHookMethods.test_run_query_with_arg", "ret_exprs": [], "ret_type": "", "variables": {"_": "", "kwargs": ""}, "variables_p": {"_": [["int", 0.3803869320637631], ["float", 0.15802746558517075], ["Tuple[str, str, str]", 0.09454442272977188], ["str", 0.09247700941394743]], "kwargs": [["int", 0.5439011198006943], ["list", 0.19311380422647983], ["str", 0.10541968104699509], ["List[str]", 0.07954444374400955]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[898, 4], [928, 81]], "fn_var_ln": {"_JOB_TYPE": [[905, 8], [905, 32]], "job_conf": [[899, 8], [899, 16]]}, "fn_var_occur": {"_JOB_TYPE": [["mock_query_job", "_JOB_TYPE"]], "job_conf": [["self", "hook", "insert_job", "configuration", "job_conf", "job_id", "JOB_ID", "project_id", "PROJECT_ID", "location", "LOCATION", "nowait", "nowait"], ["mock_query_job", "from_api_repr", "assert_called_once_with", "job_conf", "JOB_ID", "PROJECT_ID", "LOCATION", "mock_client", "return_value"]]}, "name": "test_insert_job", "params": {"mock_client": "", "mock_query_job": "", "nowait": "", "self": ""}, "params_descr": {"mock_client": "", "mock_query_job": "", "nowait": "", "self": ""}, "params_occur": {"mock_client": [["mock_client", "assert_called_once_with", "project_id", "PROJECT_ID", "location", "LOCATION"], ["mock_query_job", "from_api_repr", "assert_called_once_with", "job_conf", "JOB_ID", "PROJECT_ID", "LOCATION", "mock_client", "return_value"]], "mock_query_job": [["mock_query_job", "_JOB_TYPE"], ["mock_query_job", "from_api_repr", "assert_called_once_with", "job_conf", "JOB_ID", "PROJECT_ID", "LOCATION", "mock_client", "return_value"], ["mock_query_job", "from_api_repr", "return_value", "_begin", "assert_called_once"], ["mock_query_job", "from_api_repr", "return_value", "result", "assert_not_called"], ["mock_query_job", "from_api_repr", "return_value", "_begin", "assert_not_called"], ["mock_query_job", "from_api_repr", "return_value", "result", "assert_called_once"]], "nowait": [["self", "hook", "insert_job", "configuration", "job_conf", "job_id", "JOB_ID", "project_id", "PROJECT_ID", "location", "LOCATION", "nowait", "nowait"]], "self": [["self", "hook", "insert_job", "configuration", "job_conf", "job_id", "JOB_ID", "project_id", "PROJECT_ID", "location", "LOCATION", "nowait", "nowait"]]}, "params_p": {"args": [], "kwargs": [], "mock_client": [], "mock_query_job": [], "nowait": [], "self": []}, "q_name": "TestBigQueryHookMethods.test_insert_job", "ret_exprs": [], "ret_type": "", "variables": {"_JOB_TYPE": "", "job_conf": ""}, "variables_p": {"_JOB_TYPE": [["Dict[str, str]", 0.280117040424005], ["str", 0.24790225330548263], ["Dict[str, Union[Any, Any]]", 0.18595078616749955], ["Dict[str, Union[Any, Any, Any, Any]]", 0.09637107634888561], ["List[str]", 0.09582081478684938], ["Dict[str, List[str]]", 0.09383802896727783]], "job_conf": [["str", 0.8036363497548309], ["bool", 0.0803288556956322]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[930, 4], [931, 60]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_dbapi_get_uri", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "hook", "get_uri", "startswith"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestBigQueryHookMethods.test_dbapi_get_uri", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[939, 4], [956, 40]], "fn_var_ln": {"configuration": [[942, 8], [942, 21]], "hash_": [[940, 8], [940, 13]], "job_id": [[949, 8], [949, 14]]}, "fn_var_occur": {"configuration": [["configuration", "False"], ["job_id", "self", "hook", "generate_job_id", "job_id", "None", "dag_id", "test_dag_id", "task_id", "logical_date", "datetime", "configuration", "configuration"]], "hash_": [["mock_md5", "return_value", "hexdigest", "return_value", "hash_"]], "job_id": [["job_id", "self", "hook", "generate_job_id", "job_id", "None", "dag_id", "test_dag_id", "task_id", "logical_date", "datetime", "configuration", "configuration"], ["job_id", "expected_job_id"]]}, "name": "test_job_id_validity", "params": {"expected_job_id": "", "mock_md5": "", "self": "", "test_dag_id": ""}, "params_descr": {"expected_job_id": "", "mock_md5": "", "self": "", "test_dag_id": ""}, "params_occur": {"expected_job_id": [["job_id", "expected_job_id"]], "mock_md5": [["mock_md5", "return_value", "hexdigest", "return_value", "hash_"]], "self": [["job_id", "self", "hook", "generate_job_id", "job_id", "None", "dag_id", "test_dag_id", "task_id", "logical_date", "datetime", "configuration", "configuration"]], "test_dag_id": [["job_id", "self", "hook", "generate_job_id", "job_id", "None", "dag_id", "test_dag_id", "task_id", "logical_date", "datetime", "configuration", "configuration"]]}, "params_p": {"args": [], "expected_job_id": [["str", 0.5774794709321185], ["int", 0.21623227896805752], ["list", 0.116432072460784]], "kwargs": [], "mock_md5": [["int", 0.8084368590288091], ["str", 0.19156314097119076]], "self": [], "test_dag_id": [["str", 0.6213467677120027], ["int", 0.1234105398331372]]}, "q_name": "TestBigQueryHookMethods.test_job_id_validity", "ret_exprs": [], "ret_type": "", "variables": {"configuration": "", "hash_": "", "job_id": ""}, "variables_p": {"configuration": [["dict", 0.39879921346845854], ["Tuple[str, str]", 0.21447189873716588], ["Dict[Any, list]", 0.1941409744625251], ["Optional[float]", 0.09472606753363465]], "hash_": [["datetime.datetime.datetime", 0.251541944838304], ["int", 0.24113817282488256], ["list", 0.09531940878744799], ["List[Dict[str, str]]", 0.07960099250234376], ["str", 0.07267665100178226]], "job_id": [["str", 0.4348662675090119], ["int", 0.19410258107390055], ["list", 0.10131695661671106], ["Dict[str, int]", 0.09332190658282255]]}}], "name": "TestBigQueryHookMethods", "q_name": "TestBigQueryHookMethods", "variables": {}, "variables_p": {}}, {"cls_lc": [[959, 0], [1011, 70]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[960, 4], [962, 50]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_internal_need_default_project", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestBigQueryTableSplitter.test_internal_need_default_project", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[974, 4], [979, 38]], "fn_var_ln": {"dataset": [[976, 17], [976, 24]], "default_project_id": [[975, 8], [975, 26]], "project": [[976, 8], [976, 15]], "table": [[976, 26], [976, 31]]}, "fn_var_occur": {"dataset": [["project", "dataset", "table", "split_tablename", "table_input", "default_project_id"], ["dataset_expected", "dataset"]], "default_project_id": [["project", "dataset", "table", "split_tablename", "table_input", "default_project_id"]], "project": [["project", "dataset", "table", "split_tablename", "table_input", "default_project_id"], ["project_expected", "project"]], "table": [["project", "dataset", "table", "split_tablename", "table_input", "default_project_id"], ["table_expected", "table"]]}, "name": "test_split_tablename", "params": {"dataset_expected": "", "project_expected": "", "self": "", "table_expected": "", "table_input": ""}, "params_descr": {"dataset_expected": "", "project_expected": "", "self": "", "table_expected": "", "table_input": ""}, "params_occur": {"dataset_expected": [["dataset_expected", "dataset"]], "project_expected": [["project_expected", "project"]], "self": [], "table_expected": [["table_expected", "table"]], "table_input": [["project", "dataset", "table", "split_tablename", "table_input", "default_project_id"]]}, "params_p": {"args": [], "dataset_expected": [], "kwargs": [], "project_expected": [], "self": [], "table_expected": [], "table_input": [["IO[str]", 0.08902967846047682]]}, "q_name": "TestBigQueryTableSplitter.test_split_tablename", "ret_exprs": [], "ret_type": "", "variables": {"dataset": "", "default_project_id": "", "project": "", "table": ""}, "variables_p": {"dataset": [["str", 0.5109999249528425], ["float", 0.2123474413693981]], "default_project_id": [["str", 1.0]], "project": [["str", 0.6278215029213996]], "table": [["str", 0.8558036838263625], ["int", 0.14419631617363748]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1008, 4], [1011, 70]], "fn_var_ln": {"default_project_id": [[1009, 8], [1009, 26]]}, "fn_var_occur": {"default_project_id": [["split_tablename", "table_input", "default_project_id", "var_name"]]}, "name": "test_invalid_syntax", "params": {"exception_message": "", "self": "", "table_input": "", "var_name": ""}, "params_descr": {"exception_message": "", "self": "", "table_input": "", "var_name": ""}, "params_occur": {"exception_message": [["pytest", "raises", "Exception", "match", "exception_message", "format", "table_input"]], "self": [], "table_input": [["pytest", "raises", "Exception", "match", "exception_message", "format", "table_input"], ["split_tablename", "table_input", "default_project_id", "var_name"]], "var_name": [["split_tablename", "table_input", "default_project_id", "var_name"]]}, "params_p": {"args": [], "exception_message": [["str", 0.6973838899233905], ["List[str]", 0.19738388992339054], ["bool", 0.10523222015321883]], "kwargs": [], "self": [], "table_input": [["str", 0.7991465198837687], ["List[str]", 0.2008534801162313]], "var_name": [["str", 0.7987390982580532]]}, "q_name": "TestBigQueryTableSplitter.test_invalid_syntax", "ret_exprs": [], "ret_type": "", "variables": {"default_project_id": ""}, "variables_p": {"default_project_id": [["str", 0.9999999999999999]]}}], "name": "TestBigQueryTableSplitter", "q_name": "TestBigQueryTableSplitter", "variables": {}, "variables_p": {}}, {"cls_lc": [[1014, 0], [1205, 9]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1017, 4], [1032, 9]], "fn_var_ln": {"body": [[1026, 8], [1026, 12]], "view": [[1018, 8], [1018, 12]]}, "fn_var_occur": {"body": [["body", "TABLE_REFERENCE_REPR", "view"], ["mock_table", "from_api_repr", "assert_called_once_with", "body"]], "view": [["view", "False"], ["self", "hook", "create_empty_table", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "view", "view", "retry", "DEFAULT_RETRY"], ["body", "TABLE_REFERENCE_REPR", "view"]]}, "name": "test_create_view", "params": {"mock_bq_client": "", "mock_table": "", "self": ""}, "params_descr": {"mock_bq_client": "", "mock_table": "", "self": ""}, "params_occur": {"mock_bq_client": [["mock_bq_client", "return_value", "create_table", "assert_called_once_with", "table", "mock_table", "from_api_repr", "return_value", "exists_ok", "True", "retry", "DEFAULT_RETRY"]], "mock_table": [["mock_table", "from_api_repr", "assert_called_once_with", "body"], ["mock_bq_client", "return_value", "create_table", "assert_called_once_with", "table", "mock_table", "from_api_repr", "return_value", "exists_ok", "True", "retry", "DEFAULT_RETRY"]], "self": [["self", "hook", "create_empty_table", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "view", "view", "retry", "DEFAULT_RETRY"]]}, "params_p": {"args": [], "kwargs": [], "mock_bq_client": [], "mock_table": [["mock.Mock", 0.11488350040695208]], "self": []}, "q_name": "TestTableOperations.test_create_view", "ret_exprs": [], "ret_type": "", "variables": {"body": "", "view": ""}, "variables_p": {"body": [["Set[str]", 0.28886590216463504], ["str", 0.10969769223411295], ["int", 0.09722454777690291]], "view": [["str", 0.4265850116639189], ["Union[Literal, Literal]", 0.1095863562118085], ["Dict[str, Dict[str, Any]]", 0.10614608025148561], ["Dict[str, str]", 0.08769182336116811], ["List[List[str]]", 0.08651679299591909]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1036, 4], [1084, 9]], "fn_var_ln": {"body": [[1068, 8], [1068, 12]], "description_patched": [[1037, 8], [1037, 27]], "expiration_time_patched": [[1038, 8], [1038, 31]], "fields": [[1078, 8], [1078, 14]], "friendly_name_patched": [[1039, 8], [1039, 29]], "labels_patched": [[1040, 8], [1040, 22]], "require_partition_filter_patched": [[1048, 8], [1048, 40]], "schema_patched": [[1041, 8], [1041, 22]], "time_partitioning_patched": [[1047, 8], [1047, 33]], "view_patched": [[1049, 8], [1049, 20]]}, "fn_var_occur": {"body": [["body", "description_patched", "expiration_time_patched", "friendly_name_patched", "labels_patched", "schema_patched", "time_partitioning_patched", "view_patched", "require_partition_filter_patched"], ["fields", "list", "body", "keys"], ["body", "TABLE_REFERENCE_REPR"], ["mock_table", "from_api_repr", "assert_called_once_with", "body"]], "description_patched": [["self", "hook", "patch_table", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "project_id", "PROJECT_ID", "description", "description_patched", "expiration_time", "expiration_time_patched", "friendly_name", "friendly_name_patched", "labels", "labels_patched", "schema", "schema_patched", "time_partitioning", "time_partitioning_patched", "require_partition_filter", "require_partition_filter_patched", "view", "view_patched"], ["body", "description_patched", "expiration_time_patched", "friendly_name_patched", "labels_patched", "schema_patched", "time_partitioning_patched", "view_patched", "require_partition_filter_patched"]], "expiration_time_patched": [["self", "hook", "patch_table", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "project_id", "PROJECT_ID", "description", "description_patched", "expiration_time", "expiration_time_patched", "friendly_name", "friendly_name_patched", "labels", "labels_patched", "schema", "schema_patched", "time_partitioning", "time_partitioning_patched", "require_partition_filter", "require_partition_filter_patched", "view", "view_patched"], ["body", "description_patched", "expiration_time_patched", "friendly_name_patched", "labels_patched", "schema_patched", "time_partitioning_patched", "view_patched", "require_partition_filter_patched"]], "fields": [["fields", "list", "body", "keys"], ["mock_client", "return_value", "update_table", "assert_called_once_with", "table", "mock_table", "from_api_repr", "return_value", "fields", "fields"]], "friendly_name_patched": [["self", "hook", "patch_table", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "project_id", "PROJECT_ID", "description", "description_patched", "expiration_time", "expiration_time_patched", "friendly_name", "friendly_name_patched", "labels", "labels_patched", "schema", "schema_patched", "time_partitioning", "time_partitioning_patched", "require_partition_filter", "require_partition_filter_patched", "view", "view_patched"], ["body", "description_patched", "expiration_time_patched", "friendly_name_patched", "labels_patched", "schema_patched", "time_partitioning_patched", "view_patched", "require_partition_filter_patched"]], "labels_patched": [["self", "hook", "patch_table", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "project_id", "PROJECT_ID", "description", "description_patched", "expiration_time", "expiration_time_patched", "friendly_name", "friendly_name_patched", "labels", "labels_patched", "schema", "schema_patched", "time_partitioning", "time_partitioning_patched", "require_partition_filter", "require_partition_filter_patched", "view", "view_patched"], ["body", "description_patched", "expiration_time_patched", "friendly_name_patched", "labels_patched", "schema_patched", "time_partitioning_patched", "view_patched", "require_partition_filter_patched"]], "require_partition_filter_patched": [["require_partition_filter_patched", "True"], ["self", "hook", "patch_table", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "project_id", "PROJECT_ID", "description", "description_patched", "expiration_time", "expiration_time_patched", "friendly_name", "friendly_name_patched", "labels", "labels_patched", "schema", "schema_patched", "time_partitioning", "time_partitioning_patched", "require_partition_filter", "require_partition_filter_patched", "view", "view_patched"], ["body", "description_patched", "expiration_time_patched", "friendly_name_patched", "labels_patched", "schema_patched", "time_partitioning_patched", "view_patched", "require_partition_filter_patched"]], "schema_patched": [["self", "hook", "patch_table", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "project_id", "PROJECT_ID", "description", "description_patched", "expiration_time", "expiration_time_patched", "friendly_name", "friendly_name_patched", "labels", "labels_patched", "schema", "schema_patched", "time_partitioning", "time_partitioning_patched", "require_partition_filter", "require_partition_filter_patched", "view", "view_patched"], ["body", "description_patched", "expiration_time_patched", "friendly_name_patched", "labels_patched", "schema_patched", "time_partitioning_patched", "view_patched", "require_partition_filter_patched"]], "time_partitioning_patched": [["self", "hook", "patch_table", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "project_id", "PROJECT_ID", "description", "description_patched", "expiration_time", "expiration_time_patched", "friendly_name", "friendly_name_patched", "labels", "labels_patched", "schema", "schema_patched", "time_partitioning", "time_partitioning_patched", "require_partition_filter", "require_partition_filter_patched", "view", "view_patched"], ["body", "description_patched", "expiration_time_patched", "friendly_name_patched", "labels_patched", "schema_patched", "time_partitioning_patched", "view_patched", "require_partition_filter_patched"]], "view_patched": [["view_patched", "False"], ["self", "hook", "patch_table", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "project_id", "PROJECT_ID", "description", "description_patched", "expiration_time", "expiration_time_patched", "friendly_name", "friendly_name_patched", "labels", "labels_patched", "schema", "schema_patched", "time_partitioning", "time_partitioning_patched", "require_partition_filter", "require_partition_filter_patched", "view", "view_patched"], ["body", "description_patched", "expiration_time_patched", "friendly_name_patched", "labels_patched", "schema_patched", "time_partitioning_patched", "view_patched", "require_partition_filter_patched"]]}, "name": "test_patch_table", "params": {"mock_client": "", "mock_table": "", "self": ""}, "params_descr": {"mock_client": "", "mock_table": "", "self": ""}, "params_occur": {"mock_client": [["mock_client", "return_value", "update_table", "assert_called_once_with", "table", "mock_table", "from_api_repr", "return_value", "fields", "fields"]], "mock_table": [["mock_table", "from_api_repr", "assert_called_once_with", "body"], ["mock_client", "return_value", "update_table", "assert_called_once_with", "table", "mock_table", "from_api_repr", "return_value", "fields", "fields"]], "self": [["self", "hook", "patch_table", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "project_id", "PROJECT_ID", "description", "description_patched", "expiration_time", "expiration_time_patched", "friendly_name", "friendly_name_patched", "labels", "labels_patched", "schema", "schema_patched", "time_partitioning", "time_partitioning_patched", "require_partition_filter", "require_partition_filter_patched", "view", "view_patched"]]}, "params_p": {"args": [], "kwargs": [], "mock_client": [], "mock_table": [["mock.Mock", 0.11080635188249179], ["mock.MagicMock", 0.0926427711996176]], "self": []}, "q_name": "TestTableOperations.test_patch_table", "ret_exprs": [], "ret_type": "", "variables": {"body": "", "description_patched": "", "expiration_time_patched": "", "fields": "", "friendly_name_patched": "", "labels_patched": "", "require_partition_filter_patched": "", "schema_patched": "", "time_partitioning_patched": "", "view_patched": ""}, "variables_p": {"body": [["str", 0.4785791279320502], ["property", 0.21720103116254713], ["int", 0.09215366668992253], ["datetime.timedelta", 0.08722091881846589]], "description_patched": [["str", 1.0]], "expiration_time_patched": [["str", 0.635366787936512], ["datetime.timedelta", 0.19393611406874897], ["int", 0.08862730255516622]], "fields": [["list", 0.8043059744537483], ["str", 0.10411843465892676], ["List[List[Any]]", 0.09157559088732496]], "friendly_name_patched": [["str", 1.0]], "labels_patched": [["str", 0.8948893114719086], ["List[str]", 0.1051106885280913]], "require_partition_filter_patched": [["list", 0.4937310235437532], ["int", 0.20714705474052109], ["List[str]", 0.1974924094175013], ["List[Type[Any]]", 0.10162951229822449]], "schema_patched": [["str", 0.907400724509392], ["int", 0.09259927549060804]], "time_partitioning_patched": [["str", 0.8562403276887275], ["int", 0.14375967231127246]], "view_patched": [["list", 0.2176547212904537], ["str", 0.1917146559584304], ["tuple", 0.1258081567948374], ["Dict[str, Union[Any, Any, Any]]", 0.09506543381391873], ["Dict[str, Any]", 0.094570217081871], ["dict", 0.09239650943546578], ["bool", 0.08987841114628288]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1088, 4], [1101, 9]], "fn_var_ln": {"body": [[1091, 8], [1091, 12]]}, "fn_var_occur": {"body": [["body", "TABLE_ID", "PROJECT_ID", "DATASET_ID"], ["mock_table", "from_api_repr", "assert_called_once_with", "body"]]}, "name": "test_create_empty_table_succeed", "params": {"mock_bq_client": "", "mock_table": "", "self": ""}, "params_descr": {"mock_bq_client": "", "mock_table": "", "self": ""}, "params_occur": {"mock_bq_client": [["mock_bq_client", "return_value", "create_table", "assert_called_once_with", "table", "mock_table", "from_api_repr", "return_value", "exists_ok", "True", "retry", "DEFAULT_RETRY"]], "mock_table": [["mock_table", "from_api_repr", "assert_called_once_with", "body"], ["mock_bq_client", "return_value", "create_table", "assert_called_once_with", "table", "mock_table", "from_api_repr", "return_value", "exists_ok", "True", "retry", "DEFAULT_RETRY"]], "self": [["self", "hook", "create_empty_table", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID"]]}, "params_p": {"args": [], "kwargs": [], "mock_bq_client": [], "mock_table": [["mock.Mock", 0.11198534148382625]], "self": []}, "q_name": "TestTableOperations.test_create_empty_table_succeed", "ret_exprs": [], "ret_type": "", "variables": {"body": ""}, "variables_p": {"body": [["str", 0.3102646987395575], ["list", 0.10905477270589728], ["OrderedDict[str, Any]", 0.10223493583117847], ["List[Tuple[Any, Any, Any]]", 0.10065739048522698], ["dict", 0.09883128695825702], ["Dict[str, Dict[str, str]]", 0.09273436579802394]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1105, 4], [1136, 9]], "fn_var_ln": {"body": [[1123, 8], [1123, 12]], "cluster_fields": [[1112, 8], [1112, 22]], "schema_fields": [[1106, 8], [1106, 21]], "time_partitioning": [[1111, 8], [1111, 25]]}, "fn_var_occur": {"body": [["body", "TABLE_ID", "PROJECT_ID", "DATASET_ID", "schema_fields", "time_partitioning", "cluster_fields"], ["mock_table", "from_api_repr", "assert_called_once_with", "body"]], "cluster_fields": [["self", "hook", "create_empty_table", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "schema_fields", "schema_fields", "time_partitioning", "time_partitioning", "cluster_fields", "cluster_fields"], ["body", "TABLE_ID", "PROJECT_ID", "DATASET_ID", "schema_fields", "time_partitioning", "cluster_fields"]], "schema_fields": [["self", "hook", "create_empty_table", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "schema_fields", "schema_fields", "time_partitioning", "time_partitioning", "cluster_fields", "cluster_fields"], ["body", "TABLE_ID", "PROJECT_ID", "DATASET_ID", "schema_fields", "time_partitioning", "cluster_fields"]], "time_partitioning": [["self", "hook", "create_empty_table", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "schema_fields", "schema_fields", "time_partitioning", "time_partitioning", "cluster_fields", "cluster_fields"], ["body", "TABLE_ID", "PROJECT_ID", "DATASET_ID", "schema_fields", "time_partitioning", "cluster_fields"]]}, "name": "test_create_empty_table_with_extras_succeed", "params": {"mock_bq_client": "", "mock_table": "", "self": ""}, "params_descr": {"mock_bq_client": "", "mock_table": "", "self": ""}, "params_occur": {"mock_bq_client": [["mock_bq_client", "return_value", "create_table", "assert_called_once_with", "table", "mock_table", "from_api_repr", "return_value", "exists_ok", "True", "retry", "DEFAULT_RETRY"]], "mock_table": [["mock_table", "from_api_repr", "assert_called_once_with", "body"], ["mock_bq_client", "return_value", "create_table", "assert_called_once_with", "table", "mock_table", "from_api_repr", "return_value", "exists_ok", "True", "retry", "DEFAULT_RETRY"]], "self": [["self", "hook", "create_empty_table", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "schema_fields", "schema_fields", "time_partitioning", "time_partitioning", "cluster_fields", "cluster_fields"]]}, "params_p": {"args": [], "kwargs": [], "mock_bq_client": [], "mock_table": [["mock.Mock", 0.11198534148382625]], "self": []}, "q_name": "TestTableOperations.test_create_empty_table_with_extras_succeed", "ret_exprs": [], "ret_type": "", "variables": {"body": "", "cluster_fields": "", "schema_fields": "", "time_partitioning": ""}, "variables_p": {"body": [["str", 0.693209109412035], ["ClassVar[str]", 0.10245088187483109], ["List[int]", 0.09072829861355401]], "cluster_fields": [["str", 0.8274406860359315], ["list", 0.08967492622765234], ["int", 0.08288438773641615]], "schema_fields": [["str", 0.8274406860359315], ["list", 0.08967492622765234], ["int", 0.08288438773641615]], "time_partitioning": [["str", 0.9169545118522768]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1139, 4], [1176, 69]], "fn_var_ln": {"dataset_reference": [[1167, 8], [1167, 25]], "result": [[1168, 8], [1168, 14]], "table_list": [[1140, 8], [1140, 18]], "table_list_response": [[1164, 8], [1164, 27]]}, "fn_var_occur": {"dataset_reference": [["dataset_reference", "DatasetReference", "PROJECT_ID", "DATASET_ID"], ["mock_client", "return_value", "list_tables", "assert_called_once_with", "dataset", "dataset_reference", "max_results", "None", "retry", "DEFAULT_RETRY"]], "result": [["result", "self", "hook", "get_dataset_tables", "dataset_id", "DATASET_ID", "project_id", "PROJECT_ID"], ["zip", "result", "table_list"]], "table_list": [["table_list_response", "Table", "from_api_repr", "t", "t", "table_list"], ["zip", "result", "table_list"]], "table_list_response": [["table_list_response", "Table", "from_api_repr", "t", "t", "table_list"], ["mock_client", "return_value", "list_tables", "return_value", "table_list_response"]]}, "name": "test_get_tables_list", "params": {"mock_client": "", "self": ""}, "params_descr": {"mock_client": "", "self": ""}, "params_occur": {"mock_client": [["mock_client", "return_value", "list_tables", "return_value", "table_list_response"], ["mock_client", "return_value", "list_tables", "assert_called_once_with", "dataset", "dataset_reference", "max_results", "None", "retry", "DEFAULT_RETRY"]], "self": [["result", "self", "hook", "get_dataset_tables", "dataset_id", "DATASET_ID", "project_id", "PROJECT_ID"]]}, "params_p": {"args": [], "kwargs": [], "mock_client": [], "self": []}, "q_name": "TestTableOperations.test_get_tables_list", "ret_exprs": [], "ret_type": "", "variables": {"dataset_reference": "", "result": "", "table_list": "", "table_list_response": ""}, "variables_p": {"dataset_reference": [["str", 0.5079656630170704], ["Dict[str, Union[int, str]]", 0.10801442871731429], ["Dict[str, str]", 0.09499526739105286], ["Optional[str]", 0.09327538924522977]], "result": [["Dict[str, Union[int, str]]", 0.12245170241974328], ["List[Tuple[str, bytes]]", 0.10840494292202771], ["bool", 0.10557543658283605], ["tuple", 0.10139123294437088], ["List[Dict[str, str]]", 0.09954438727446531], ["List[str]", 0.09954438727446531]], "table_list": [["List[str]", 0.17011616910919058], ["Union[Literal, Literal]", 0.10395366926266243], ["int", 0.09043245333986447]], "table_list_response": [["str", 0.2881714624419987], ["Dict[str, str]", 0.2014048357491022], ["Dict[str, List[Any]]", 0.1958794604859618], ["Dict[str, Dict[str, Any]]", 0.08614097844495901]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1180, 4], [1205, 9]], "fn_var_ln": {"body": [[1199, 8], [1199, 12]], "materialized_view": [[1186, 8], [1186, 25]], "query": [[1181, 8], [1181, 13]]}, "fn_var_occur": {"body": [["body", "TABLE_REFERENCE_REPR", "materialized_view"], ["mock_table", "from_api_repr", "assert_called_once_with", "body"]], "materialized_view": [["materialized_view", "query", "True"], ["self", "hook", "create_empty_table", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "materialized_view", "materialized_view", "retry", "DEFAULT_RETRY"], ["body", "TABLE_REFERENCE_REPR", "materialized_view"]], "query": [["materialized_view", "query", "True"]]}, "name": "test_create_materialized_view", "params": {"mock_bq_client": "", "mock_table": "", "self": ""}, "params_descr": {"mock_bq_client": "", "mock_table": "", "self": ""}, "params_occur": {"mock_bq_client": [["mock_bq_client", "return_value", "create_table", "assert_called_once_with", "table", "mock_table", "from_api_repr", "return_value", "exists_ok", "True", "retry", "DEFAULT_RETRY"]], "mock_table": [["mock_table", "from_api_repr", "assert_called_once_with", "body"], ["mock_bq_client", "return_value", "create_table", "assert_called_once_with", "table", "mock_table", "from_api_repr", "return_value", "exists_ok", "True", "retry", "DEFAULT_RETRY"]], "self": [["self", "hook", "create_empty_table", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "materialized_view", "materialized_view", "retry", "DEFAULT_RETRY"]]}, "params_p": {"args": [], "kwargs": [], "mock_bq_client": [], "mock_table": [["mock.Mock", 0.11488350040695208]], "self": []}, "q_name": "TestTableOperations.test_create_materialized_view", "ret_exprs": [], "ret_type": "", "variables": {"body": "", "materialized_view": "", "query": ""}, "variables_p": {"body": [["dict", 0.19025912039222234], ["int", 0.11857272928972064], ["Dict[str, Any]", 0.1111164009582664], ["Dict[str, Union[int, str]]", 0.08874485306549226], ["Dict[str, str]", 0.08802662939773163], ["str", 0.08692005417689348]], "materialized_view": [["int", 0.299182796171805], ["str", 0.19154686502300594], ["List['Book']", 0.10521859943816574], ["float", 0.0978837906085449], ["List[int]", 0.0943408981831311]], "query": [["str", 0.3705716255244772], ["int", 0.1991097117552285], ["Type[List[Any]]", 0.09206782899619395]]}}], "name": "TestTableOperations", "q_name": "TestTableOperations", "variables": {}, "variables_p": {}}, {"cls_lc": [[1208, 0], [1450, 40]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1211, 4], [1222, 101]], "fn_var_ln": {"bq_cursor": [[1212, 8], [1212, 17]], "conf": [[1214, 8], [1214, 12]]}, "fn_var_occur": {"bq_cursor": [["bq_cursor", "self", "hook", "get_cursor"], ["bq_cursor", "execute"]], "conf": [["conf", "True"], ["mock_insert", "assert_called_once_with", "configuration", "conf", "project_id", "PROJECT_ID", "location", "None"]]}, "name": "test_execute_with_parameters", "params": {"_": "", "mock_insert": "", "self": ""}, "params_descr": {"_": "", "mock_insert": "", "self": ""}, "params_occur": {"_": [], "mock_insert": [["mock_insert", "assert_called_once_with", "configuration", "conf", "project_id", "PROJECT_ID", "location", "None"]], "self": [["bq_cursor", "self", "hook", "get_cursor"]]}, "params_p": {"_": [["mock.Mock", 0.9999999999999999]], "args": [], "kwargs": [], "mock_insert": [], "self": []}, "q_name": "TestBigQueryCursor.test_execute_with_parameters", "ret_exprs": [], "ret_type": "", "variables": {"bq_cursor": "", "conf": ""}, "variables_p": {"bq_cursor": [["int", 0.5850847756112161], ["str", 0.1892259532299707], ["float", 0.08644105480584088]], "conf": [["str", 0.2955990212052684], ["Union[Literal, str]", 0.10953911401353926], ["Tuple[str, str, str, str, str]", 0.10161288113212145]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1226, 4], [1257, 9]], "fn_var_ln": {"bq_cursor": [[1227, 8], [1227, 17]]}, "fn_var_occur": {"bq_cursor": [["bq_cursor", "self", "hook", "get_cursor"], ["bq_cursor", "executemany"]]}, "name": "test_execute_many", "params": {"_": "", "mock_insert": "", "self": ""}, "params_descr": {"_": "", "mock_insert": "", "self": ""}, "params_occur": {"_": [], "mock_insert": [["mock_insert", "call_count"], ["mock_insert", "assert_has_calls", "mock", "call", "location", "None", "configuration", "True", "project_id", "PROJECT_ID", "mock", "call", "location", "None", "configuration", "True", "project_id", "PROJECT_ID"]], "self": [["bq_cursor", "self", "hook", "get_cursor"]]}, "params_p": {"_": [["mock.Mock", 0.7777777782457801]], "args": [], "kwargs": [], "mock_insert": [], "self": []}, "q_name": "TestBigQueryCursor.test_execute_many", "ret_exprs": [], "ret_type": "", "variables": {"bq_cursor": ""}, "variables_p": {"bq_cursor": [["int", 0.5850847756112161], ["str", 0.1892259532299707], ["float", 0.08644105480584088]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1259, 4], [1274, 9]], "fn_var_ln": {"description": [[1269, 8], [1269, 19]], "test_query_result": [[1260, 8], [1260, 25]]}, "fn_var_occur": {"description": [["description", "_format_schema_for_description", "test_query_result"], ["description", "None", "None", "None", "None", "True", "None", "None", "None", "None", "True", "None", "None", "None", "None", "False"]], "test_query_result": [["description", "_format_schema_for_description", "test_query_result"]]}, "name": "test_format_schema_for_description", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestBigQueryCursor.test_format_schema_for_description", "ret_exprs": [], "ret_type": "", "variables": {"description": "", "test_query_result": ""}, "variables_p": {"description": [["str", 0.7976797357527174], ["List[str]", 0.09919299990270208]], "test_query_result": [["int", 0.5382957734523686], ["str", 0.26708833744615934], ["Generator[Any, None, None]", 0.10709724190203296], ["complex", 0.08751864719943907]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1278, 4], [1291, 91]], "fn_var_ln": {"bq_cursor": [[1289, 8], [1289, 17]], "mock_execute": [[1280, 8], [1280, 20]], "mock_get_query_results": [[1279, 8], [1279, 30]], "return_value": [[1281, 8], [1281, 33]]}, "fn_var_occur": {"bq_cursor": [["bq_cursor", "self", "hook", "get_cursor"], ["bq_cursor", "execute"], ["bq_cursor", "description", "None", "None", "None", "None", "True"]], "mock_execute": [["mock_execute", "mock_get_query_results", "return_value", "execute"], ["mock_execute", "return_value"]], "mock_get_query_results": [["mock_get_query_results", "mock_get_service", "return_value", "jobs", "return_value", "getQueryResults"], ["mock_execute", "mock_get_query_results", "return_value", "execute"]], "return_value": [["mock_get_query_results", "mock_get_service", "return_value", "jobs", "return_value", "getQueryResults"], ["mock_execute", "mock_get_query_results", "return_value", "execute"], ["mock_execute", "return_value"]]}, "name": "test_description", "params": {"mock_get_service": "", "mock_insert": "", "self": ""}, "params_descr": {"mock_get_service": "", "mock_insert": "", "self": ""}, "params_occur": {"mock_get_service": [["mock_get_query_results", "mock_get_service", "return_value", "jobs", "return_value", "getQueryResults"]], "mock_insert": [], "self": [["bq_cursor", "self", "hook", "get_cursor"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_service": [], "mock_insert": [["mock.MagicMock", 0.8442490411087433], ["mock.Mock", 0.05435072495377907]], "self": []}, "q_name": "TestBigQueryCursor.test_description", "ret_exprs": [], "ret_type": "", "variables": {"bq_cursor": "", "mock_execute": "", "mock_get_query_results": "", "return_value": ""}, "variables_p": {"bq_cursor": [["int", 0.12058141586619756], ["list", 0.09147279887492478], ["Tuple[Type[str], Type[bytes]]", 0.08616380368664776]], "mock_execute": [["mock.Mock", 0.11481152089364123]], "mock_get_query_results": [["str", 0.4623926657483125], ["Dict[str, List[Any]]", 0.2409387590755755], ["List[Tuple[str, Any]]", 0.11067864070067468], ["Dict[str, Union[Any, Any, Any]]", 0.08549112192042563]], "return_value": [["str", 0.3799429066851585], ["Pattern[str]", 0.17650571244249197], ["Dict[str, List[Any]]", 0.17046097127096782], ["List[Dict[str, str]]", 0.09687116726983262], ["Dict[Any, Union[int, str]]", 0.09376288470892376], ["rotkehlchen.tests.utils.mock.MockResponse", 0.08245635762262522]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1295, 4], [1302, 42]], "fn_var_ln": {"bq_cursor": [[1300, 8], [1300, 17]], "mock_execute": [[1297, 8], [1297, 20]], "mock_get_query_results": [[1296, 8], [1296, 30]], "return_value": [[1298, 8], [1298, 33]]}, "fn_var_occur": {"bq_cursor": [["bq_cursor", "self", "hook", "get_cursor"], ["bq_cursor", "execute"], ["bq_cursor", "description"]], "mock_execute": [["mock_execute", "mock_get_query_results", "return_value", "execute"], ["mock_execute", "return_value"]], "mock_get_query_results": [["mock_get_query_results", "mock_get_service", "return_value", "jobs", "return_value", "getQueryResults"], ["mock_execute", "mock_get_query_results", "return_value", "execute"]], "return_value": [["mock_get_query_results", "mock_get_service", "return_value", "jobs", "return_value", "getQueryResults"], ["mock_execute", "mock_get_query_results", "return_value", "execute"], ["mock_execute", "return_value"]]}, "name": "test_description_no_schema", "params": {"mock_get_service": "", "mock_insert": "", "self": ""}, "params_descr": {"mock_get_service": "", "mock_insert": "", "self": ""}, "params_occur": {"mock_get_service": [["mock_get_query_results", "mock_get_service", "return_value", "jobs", "return_value", "getQueryResults"]], "mock_insert": [], "self": [["bq_cursor", "self", "hook", "get_cursor"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_service": [], "mock_insert": [["mock.MagicMock", 0.7416176013779147], ["mock.Mock", 0.08668463327228325]], "self": []}, "q_name": "TestBigQueryCursor.test_description_no_schema", "ret_exprs": [], "ret_type": "", "variables": {"bq_cursor": "", "mock_execute": "", "mock_get_query_results": "", "return_value": ""}, "variables_p": {"bq_cursor": [["int", 0.5850847756112161], ["str", 0.1892259532299707], ["float", 0.08644105480584088]], "mock_execute": [["mock.Mock", 0.11481152089364123]], "mock_get_query_results": [["str", 0.4623926657483125], ["Dict[str, List[Any]]", 0.2409387590755755], ["List[Tuple[str, Any]]", 0.11067864070067468], ["Dict[str, Union[Any, Any, Any]]", 0.08549112192042563]], "return_value": [["str", 0.3799429066851585], ["Pattern[str]", 0.17650571244249197], ["Dict[str, List[Any]]", 0.17046097127096782], ["List[Dict[str, str]]", 0.09687116726983262], ["Dict[Any, Union[int, str]]", 0.09376288470892376], ["rotkehlchen.tests.utils.mock.MockResponse", 0.08245635762262522]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1305, 4], [1308, 29]], "fn_var_ln": {"bq_cursor": [[1306, 8], [1306, 17]], "result": [[1307, 8], [1307, 14]]}, "fn_var_occur": {"bq_cursor": [["bq_cursor", "self", "hook", "get_cursor"], ["result", "bq_cursor", "close"]], "result": [["result", "bq_cursor", "close"], ["result", "None"]]}, "name": "test_close", "params": {"mock_get_service": "", "self": ""}, "params_descr": {"mock_get_service": "", "self": ""}, "params_occur": {"mock_get_service": [], "self": [["bq_cursor", "self", "hook", "get_cursor"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_service": [["mock.Mock", 0.23429002039770136], ["mock.MagicMock", 0.07651449514085545], ["Callable", 0.07317602523400349]], "self": []}, "q_name": "TestBigQueryCursor.test_close", "ret_exprs": [], "ret_type": "", "variables": {"bq_cursor": "", "result": ""}, "variables_p": {"bq_cursor": [["List[List[str]]", 0.16441912487396643], ["Tuple[str, str]", 0.14955073254973705], ["Tuple[str, str, str, str, str]", 0.14955073254973705], ["str", 0.08992096742175114]], "result": [["str", 0.19806200872447005], ["Set[str]", 0.11415654538370211], ["Dict[str, Any]", 0.10597382662849938], ["Dict[str, Union[int, str]]", 0.08964501587563443], ["dict", 0.08872814592917388]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1311, 4], [1314, 27]], "fn_var_ln": {"bq_cursor": [[1312, 8], [1312, 17]], "result": [[1313, 8], [1313, 14]]}, "fn_var_occur": {"bq_cursor": [["bq_cursor", "self", "hook", "get_cursor"], ["result", "bq_cursor", "rowcount"]], "result": [["result", "bq_cursor", "rowcount"]]}, "name": "test_rowcount", "params": {"mock_get_service": "", "self": ""}, "params_descr": {"mock_get_service": "", "self": ""}, "params_occur": {"mock_get_service": [], "self": [["bq_cursor", "self", "hook", "get_cursor"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_service": [["mock.Mock", 0.23429002039770136], ["mock.MagicMock", 0.07651449514085545], ["Callable", 0.07317602523400349]], "self": []}, "q_name": "TestBigQueryCursor.test_rowcount", "ret_exprs": [], "ret_type": "", "variables": {"bq_cursor": "", "result": ""}, "variables_p": {"bq_cursor": [["int", 0.1821888821867278], ["bool", 0.09224935680364586], ["Tuple[Any, Any, Any]", 0.08288640717869127]], "result": [["list", 0.7]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1318, 4], [1322, 47]], "fn_var_ln": {"bq_cursor": [[1319, 8], [1319, 17]], "result": [[1320, 8], [1320, 14]]}, "fn_var_occur": {"bq_cursor": [["bq_cursor", "self", "hook", "get_cursor"], ["result", "bq_cursor", "fetchone"]], "result": [["result", "bq_cursor", "fetchone"], ["mock_next", "return_value", "result"]]}, "name": "test_fetchone", "params": {"mock_get_service": "", "mock_next": "", "self": ""}, "params_descr": {"mock_get_service": "", "mock_next": "", "self": ""}, "params_occur": {"mock_get_service": [], "mock_next": [["mock_next", "call_count"], ["mock_next", "return_value", "result"]], "self": [["bq_cursor", "self", "hook", "get_cursor"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_service": [["mock.MagicMock", 0.7537806592441302], ["mock.Mock", 0.038612339522960164]], "mock_next": [], "self": []}, "q_name": "TestBigQueryCursor.test_fetchone", "ret_exprs": [], "ret_type": "", "variables": {"bq_cursor": "", "result": ""}, "variables_p": {"bq_cursor": [["int", 0.1821888821867278], ["bool", 0.09224935680364586], ["Tuple[Any, Any, Any]", 0.08288640717869127]], "result": [["Optional[bytes]", 0.1829769240940034], ["Dict[str, List[Any]]", 0.12809393901402746], ["Dict[str, int]", 0.08993151145774791], ["Tuple[int, int]", 0.08750910035075633]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1328, 4], [1331, 34]], "fn_var_ln": {"bq_cursor": [[1329, 8], [1329, 17]], "result": [[1330, 8], [1330, 14]]}, "fn_var_occur": {"bq_cursor": [["bq_cursor", "self", "hook", "get_cursor"], ["result", "bq_cursor", "fetchall"]], "result": [["result", "bq_cursor", "fetchall"]]}, "name": "test_fetchall", "params": {"mock_fetchone": "", "mock_get_service": "", "self": ""}, "params_descr": {"mock_fetchone": "", "mock_get_service": "", "self": ""}, "params_occur": {"mock_fetchone": [], "mock_get_service": [], "self": [["bq_cursor", "self", "hook", "get_cursor"]]}, "params_p": {"args": [], "kwargs": [], "mock_fetchone": [["mock.MagicMock", 0.7537806592441302], ["mock.Mock", 0.038612339522960164]], "mock_get_service": [["mock.MagicMock", 0.7537806592441302], ["mock.Mock", 0.038612339522960164]], "self": []}, "q_name": "TestBigQueryCursor.test_fetchall", "ret_exprs": [], "ret_type": "", "variables": {"bq_cursor": "", "result": ""}, "variables_p": {"bq_cursor": [["int", 0.1821888821867278], ["bool", 0.09224935680364586], ["Tuple[Any, Any, Any]", 0.08288640717869127]], "result": [["list", 0.7]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1335, 4], [1348, 34]], "fn_var_ln": {"bq_cursor": [[1337, 8], [1337, 17]], "result": [[1347, 8], [1347, 14]], "side_effect": [[1346, 8], [1346, 33]], "side_effect_values": [[1336, 8], [1336, 26]]}, "fn_var_occur": {"bq_cursor": [["bq_cursor", "self", "hook", "get_cursor"], ["result", "bq_cursor", "fetchmany"], ["result", "bq_cursor", "fetchmany"], ["result", "bq_cursor", "fetchmany"]], "result": [["result", "bq_cursor", "fetchmany"], ["result", "bq_cursor", "fetchmany"], ["result", "bq_cursor", "fetchmany"]], "side_effect": [["mock_fetchone", "side_effect", "side_effect_values"], ["mock_fetchone", "side_effect", "side_effect_values"], ["mock_fetchone", "side_effect", "side_effect_values"]], "side_effect_values": [["side_effect_values", "None"], ["mock_fetchone", "side_effect", "side_effect_values"], ["mock_fetchone", "side_effect", "side_effect_values"], ["mock_fetchone", "side_effect", "side_effect_values"]]}, "name": "test_fetchmany", "params": {"mock_fetchone": "", "mock_get_service": "", "self": ""}, "params_descr": {"mock_fetchone": "", "mock_get_service": "", "self": ""}, "params_occur": {"mock_fetchone": [["mock_fetchone", "side_effect", "side_effect_values"], ["mock_fetchone", "side_effect", "side_effect_values"], ["mock_fetchone", "side_effect", "side_effect_values"]], "mock_get_service": [], "self": [["bq_cursor", "self", "hook", "get_cursor"]]}, "params_p": {"args": [], "kwargs": [], "mock_fetchone": [["mock.MagicMock", 0.16539998872738534]], "mock_get_service": [["mock.MagicMock", 0.7537806592441302], ["mock.Mock", 0.038612339522960164]], "self": []}, "q_name": "TestBigQueryCursor.test_fetchmany", "ret_exprs": [], "ret_type": "", "variables": {"bq_cursor": "", "result": "", "side_effect": "", "side_effect_values": ""}, "variables_p": {"bq_cursor": [], "result": [], "side_effect": [["int", 0.8055598240989685], ["bytes", 0.041354904612818], ["Dict[str, Union[Any, Any, Any]]", 0.03010959728057918], ["Dict[str, Dict[str, Any]]", 0.03010959728057918], ["List[Dict[str, Any]]", 0.03010959728057918]], "side_effect_values": [["int", 0.4110663137518761], ["list", 0.1121536451662127], ["Dict[str, None]", 0.09381945109330096], ["str", 0.08680973859905837], ["List[Dict[str, str]]", 0.08667452482124158]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1351, 4], [1355, 29]], "fn_var_ln": {"bq_cursor": [[1352, 8], [1352, 17]], "job_id": [[1353, 8], [1353, 24]], "result": [[1354, 8], [1354, 14]]}, "fn_var_occur": {"bq_cursor": [["bq_cursor", "self", "hook", "get_cursor"], ["bq_cursor", "job_id", "None"], ["result", "bq_cursor", "next"]], "job_id": [["bq_cursor", "job_id", "None"]], "result": [["result", "bq_cursor", "next"], ["result", "None"]]}, "name": "test_next_no_jobid", "params": {"mock_get_service": "", "self": ""}, "params_descr": {"mock_get_service": "", "self": ""}, "params_occur": {"mock_get_service": [], "self": [["bq_cursor", "self", "hook", "get_cursor"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_service": [["mock.MagicMock", 0.41986868386745085], ["mock.Mock", 0.27468021492830336], ["Callable", 0.08564786534349055]], "self": []}, "q_name": "TestBigQueryCursor.test_next_no_jobid", "ret_exprs": [], "ret_type": "", "variables": {"bq_cursor": "", "job_id": "", "result": ""}, "variables_p": {"bq_cursor": [["int", 0.2863031917830589], ["List[str]", 0.09687379263227354], ["dict", 0.09424631463901754], ["str", 0.08836336458101103]], "job_id": [["Dict[str, str]", 0.4738602621429349], ["list", 0.2653297293296948], ["int", 0.17802195778728197], ["str", 0.08278805074008845]], "result": []}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1358, 4], [1368, 29]], "fn_var_ln": {"all_pages_loaded": [[1366, 8], [1366, 34]], "bq_cursor": [[1359, 8], [1359, 17]], "buffer": [[1361, 8], [1361, 24]], "job_id": [[1360, 8], [1360, 24]], "result": [[1367, 8], [1367, 14]]}, "fn_var_occur": {"all_pages_loaded": [["bq_cursor", "all_pages_loaded", "True"]], "bq_cursor": [["bq_cursor", "self", "hook", "get_cursor"], ["bq_cursor", "job_id", "JOB_ID"], ["bq_cursor", "buffer"], ["result", "bq_cursor", "next"], ["result", "bq_cursor", "next"], ["bq_cursor", "all_pages_loaded", "True"], ["result", "bq_cursor", "next"]], "buffer": [["bq_cursor", "buffer"]], "job_id": [["bq_cursor", "job_id", "JOB_ID"]], "result": [["result", "bq_cursor", "next"], ["result", "bq_cursor", "next"], ["result", "bq_cursor", "next"], ["result", "None"]]}, "name": "test_next_buffer", "params": {"mock_get_service": "", "self": ""}, "params_descr": {"mock_get_service": "", "self": ""}, "params_occur": {"mock_get_service": [], "self": [["bq_cursor", "self", "hook", "get_cursor"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_service": [["mock.Mock", 0.23429002039770136], ["mock.MagicMock", 0.07651449514085545], ["Callable", 0.07317602523400349]], "self": []}, "q_name": "TestBigQueryCursor.test_next_buffer", "ret_exprs": [], "ret_type": "", "variables": {"all_pages_loaded": "", "bq_cursor": "", "buffer": "", "job_id": "", "result": ""}, "variables_p": {"all_pages_loaded": [["str", 0.49986436571668763], ["dict", 0.20021701485329957], ["Pattern[str]", 0.19994574628667505], ["list", 0.09997287314333753]], "bq_cursor": [["Dict[str, Any]", 0.09054204670857581], ["Tuple[Any, Any, Any]", 0.08949538836873853], ["str", 0.08821854290476777], ["dict", 0.08705691701879585]], "buffer": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["str", 0.1], ["datetime.timedelta", 0.1]], "job_id": [["int", 0.2697464266281954], ["str", 0.08389912197372663]], "result": [["Tuple[Any, Any]", 0.3334650733960411], ["Tuple[Any, None]", 0.08069122060933892]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1371, 4], [1401, 79]], "fn_var_ln": {"bq_cursor": [[1388, 8], [1388, 17]], "job_id": [[1389, 8], [1389, 24]], "location": [[1390, 8], [1390, 26]], "mock_execute": [[1373, 8], [1373, 20]], "mock_get_query_results": [[1372, 8], [1372, 30]], "result": [[1395, 8], [1395, 14]], "return_value": [[1374, 8], [1374, 33]]}, "fn_var_occur": {"bq_cursor": [["bq_cursor", "self", "hook", "get_cursor"], ["bq_cursor", "job_id", "JOB_ID"], ["bq_cursor", "location", "LOCATION"], ["result", "bq_cursor", "next"], ["result", "bq_cursor", "next"], ["mock_execute", "assert_called_once_with", "num_retries", "bq_cursor", "num_retries"]], "job_id": [["bq_cursor", "job_id", "JOB_ID"]], "location": [["bq_cursor", "location", "LOCATION"], ["mock_get_query_results", "assert_called_once_with", "jobId", "JOB_ID", "location", "LOCATION", "pageToken", "None", "projectId"]], "mock_execute": [["mock_execute", "mock_get_query_results", "return_value", "execute"], ["mock_execute", "return_value", "None"], ["mock_execute", "assert_called_once_with", "num_retries", "bq_cursor", "num_retries"]], "mock_get_query_results": [["mock_get_query_results", "mock_get_service", "return_value", "jobs", "return_value", "getQueryResults"], ["mock_execute", "mock_get_query_results", "return_value", "execute"], ["mock_get_query_results", "assert_called_once_with", "jobId", "JOB_ID", "location", "LOCATION", "pageToken", "None", "projectId"]], "result": [["result", "bq_cursor", "next"], ["result", "bq_cursor", "next"]], "return_value": [["mock_get_query_results", "mock_get_service", "return_value", "jobs", "return_value", "getQueryResults"], ["mock_execute", "mock_get_query_results", "return_value", "execute"], ["mock_execute", "return_value", "None"]]}, "name": "test_next", "params": {"mock_get_service": "", "self": ""}, "params_descr": {"mock_get_service": "", "self": ""}, "params_occur": {"mock_get_service": [["mock_get_query_results", "mock_get_service", "return_value", "jobs", "return_value", "getQueryResults"]], "self": [["bq_cursor", "self", "hook", "get_cursor"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_service": [], "self": []}, "q_name": "TestBigQueryCursor.test_next", "ret_exprs": [], "ret_type": "", "variables": {"bq_cursor": "", "job_id": "", "location": "", "mock_execute": "", "mock_get_query_results": "", "result": "", "return_value": ""}, "variables_p": {"bq_cursor": [["Tuple[Any, Any, Any]", 0.09432109896455923], ["Dict[str, Any]", 0.08704259685507779], ["dict", 0.08472656837914186], ["str", 0.08268313056852944]], "job_id": [["int", 0.2697464266281954], ["str", 0.08389912197372663]], "location": [["Dict[str, Union[Any, Any, Any]]", 0.13431340683190443], ["Dict[str, Any]", 0.11204927952827452], ["Dict[str, None]", 0.10363548824817374], ["Pattern[str]", 0.09934799094837751], ["Dict[Any, str]", 0.0913188802391229], ["str", 0.08729273014902124], ["Dict[str, str]", 0.0867368272836562]], "mock_execute": [["mock.Mock", 0.10685268275564826]], "mock_get_query_results": [["str", 0.4623926657483125], ["Dict[str, List[Any]]", 0.2409387590755755], ["List[Tuple[str, Any]]", 0.11067864070067468], ["Dict[str, Union[Any, Any, Any]]", 0.08549112192042563]], "result": [["list", 0.17606193388213134], ["str", 0.17606193388213134]], "return_value": [["str", 0.3799429066851585], ["Pattern[str]", 0.17650571244249197], ["Dict[str, List[Any]]", 0.17046097127096782], ["List[Dict[str, str]]", 0.09687116726983262], ["Dict[Any, Union[int, str]]", 0.09376288470892376], ["rotkehlchen.tests.utils.mock.MockResponse", 0.08245635762262522]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1405, 4], [1420, 49]], "fn_var_ln": {"bq_cursor": [[1410, 8], [1410, 17]], "job_id": [[1411, 8], [1411, 24]], "mock_execute": [[1407, 8], [1407, 20]], "mock_get_query_results": [[1406, 8], [1406, 30]], "result": [[1413, 8], [1413, 14]], "return_value": [[1408, 8], [1408, 33]]}, "fn_var_occur": {"bq_cursor": [["bq_cursor", "self", "hook", "get_cursor"], ["bq_cursor", "job_id", "JOB_ID"], ["result", "bq_cursor", "next"], ["mock_execute", "assert_called_once_with", "num_retries", "bq_cursor", "num_retries"]], "job_id": [["bq_cursor", "job_id", "JOB_ID"]], "mock_execute": [["mock_execute", "mock_get_query_results", "return_value", "execute"], ["mock_execute", "return_value"], ["mock_execute", "assert_called_once_with", "num_retries", "bq_cursor", "num_retries"]], "mock_get_query_results": [["mock_get_query_results", "mock_get_service", "return_value", "jobs", "return_value", "getQueryResults"], ["mock_execute", "mock_get_query_results", "return_value", "execute"], ["mock_get_query_results", "assert_called_once_with", "jobId", "JOB_ID", "location", "None", "pageToken", "None", "projectId"]], "result": [["result", "bq_cursor", "next"], ["result", "None"]], "return_value": [["mock_get_query_results", "mock_get_service", "return_value", "jobs", "return_value", "getQueryResults"], ["mock_execute", "mock_get_query_results", "return_value", "execute"], ["mock_execute", "return_value"]]}, "name": "test_next_no_rows", "params": {"mock_flush_results": "", "mock_get_service": "", "self": ""}, "params_descr": {"mock_flush_results": "", "mock_get_service": "", "self": ""}, "params_occur": {"mock_flush_results": [["mock_flush_results", "call_count"]], "mock_get_service": [["mock_get_query_results", "mock_get_service", "return_value", "jobs", "return_value", "getQueryResults"]], "self": [["bq_cursor", "self", "hook", "get_cursor"]]}, "params_p": {"args": [], "kwargs": [], "mock_flush_results": [["mock.Mock", 0.2505287459569861], ["mock.MagicMock", 0.08459913396619666]], "mock_get_service": [["mock.Mock", 0.09680602693465491]], "self": []}, "q_name": "TestBigQueryCursor.test_next_no_rows", "ret_exprs": [], "ret_type": "", "variables": {"bq_cursor": "", "job_id": "", "mock_execute": "", "mock_get_query_results": "", "result": "", "return_value": ""}, "variables_p": {"bq_cursor": [["dict", 0.14600070997795123], ["Dict[str, str]", 0.08482336630742508], ["int", 0.08428051406569805]], "job_id": [["int", 0.2697464266281954], ["str", 0.08389912197372663]], "mock_execute": [["mock.Mock", 0.1099395810387497]], "mock_get_query_results": [["str", 0.4623926657483125], ["Dict[str, List[Any]]", 0.2409387590755755], ["List[Tuple[str, Any]]", 0.11067864070067468], ["Dict[str, Union[Any, Any, Any]]", 0.08549112192042563]], "result": [], "return_value": [["str", 0.3799429066851585], ["Pattern[str]", 0.17650571244249197], ["Dict[str, List[Any]]", 0.17046097127096782], ["List[Dict[str, str]]", 0.09687116726983262], ["Dict[Any, Union[int, str]]", 0.09376288470892376], ["rotkehlchen.tests.utils.mock.MockResponse", 0.08245635762262522]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1425, 4], [1428, 42]], "fn_var_ln": {"bq_cursor": [[1426, 8], [1426, 17]]}, "fn_var_occur": {"bq_cursor": [["bq_cursor", "self", "hook", "get_cursor"], ["bq_cursor", "execute"]]}, "name": "test_flush_cursor_in_execute", "params": {"_": "", "mock_get_service": "", "mock_insert": "", "self": ""}, "params_descr": {"_": "", "mock_get_service": "", "mock_insert": "", "self": ""}, "params_occur": {"_": [], "mock_get_service": [], "mock_insert": [["mock_insert", "call_count"]], "self": [["bq_cursor", "self", "hook", "get_cursor"]]}, "params_p": {"_": [["mock.MagicMock", 0.8556969302483642], ["mock.Mock", 0.02401229356929577]], "args": [], "kwargs": [], "mock_get_service": [["mock.MagicMock", 0.8556969302483642], ["mock.Mock", 0.02401229356929577]], "mock_insert": [["mock.Mock", 0.33922924020946493], ["mock.MagicMock", 0.052577393796357015]], "self": []}, "q_name": "TestBigQueryCursor.test_flush_cursor_in_execute", "ret_exprs": [], "ret_type": "", "variables": {"bq_cursor": ""}, "variables_p": {"bq_cursor": [["int", 0.5850847756112161], ["str", 0.1892259532299707], ["float", 0.08644105480584088]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1431, 4], [1441, 37]], "fn_var_ln": {"all_pages_loaded": [[1435, 8], [1435, 34]], "bq_cursor": [[1432, 8], [1432, 17]], "buffer": [[1436, 8], [1436, 24]], "job_id": [[1434, 8], [1434, 24]], "page_token": [[1433, 8], [1433, 28]]}, "fn_var_occur": {"all_pages_loaded": [["bq_cursor", "all_pages_loaded", "True"], ["bq_cursor", "all_pages_loaded"]], "bq_cursor": [["bq_cursor", "self", "hook", "get_cursor"], ["bq_cursor", "page_token"], ["bq_cursor", "job_id"], ["bq_cursor", "all_pages_loaded", "True"], ["bq_cursor", "buffer"], ["bq_cursor", "flush_results"], ["bq_cursor", "page_token", "None"], ["bq_cursor", "job_id", "None"], ["bq_cursor", "all_pages_loaded"], ["bq_cursor", "buffer"]], "buffer": [["bq_cursor", "buffer"], ["bq_cursor", "buffer"]], "job_id": [["bq_cursor", "job_id"], ["bq_cursor", "job_id", "None"]], "page_token": [["bq_cursor", "page_token"], ["bq_cursor", "page_token", "None"]]}, "name": "test_flush_cursor", "params": {"mock_get_service": "", "self": ""}, "params_descr": {"mock_get_service": "", "self": ""}, "params_occur": {"mock_get_service": [], "self": [["bq_cursor", "self", "hook", "get_cursor"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_service": [["mock.Mock", 0.23429002039770136], ["mock.MagicMock", 0.07651449514085545], ["Callable", 0.07317602523400349]], "self": []}, "q_name": "TestBigQueryCursor.test_flush_cursor", "ret_exprs": [], "ret_type": "", "variables": {"all_pages_loaded": "", "bq_cursor": "", "buffer": "", "job_id": "", "page_token": ""}, "variables_p": {"all_pages_loaded": [["Pattern[str]", 0.3965556878490103], ["Optional[Match[str]]", 0.2931366566975218], ["Dict[str, Any]", 0.12173183946295661], ["list", 0.10092999815748485], ["str", 0.08764581783302675]], "bq_cursor": [["int", 0.38998908718862035], ["Dict[str, Union[float, str]]", 0.11805380390294085], ["Tuple[str, str, str, str]", 0.09024617511268238]], "buffer": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["str", 0.1], ["datetime.timedelta", 0.1]], "job_id": [["dict", 0.26819251911315717], ["int", 0.2609453840111983], ["str", 0.16744976408264395]], "page_token": [["bytes", 0.261575724739101], ["Dict[Any, Dict[str, Any]]", 0.1139127856206246], ["Dict[str, float]", 0.08638019137564426]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1444, 4], [1450, 40]], "fn_var_ln": {"bq_cursor": [[1445, 8], [1445, 17]]}, "fn_var_occur": {"bq_cursor": [["bq_cursor", "self", "hook", "get_cursor"], ["bq_cursor", "buffersize", "None"], ["bq_cursor", "arraysize"], ["bq_cursor", "set_arraysize"], ["bq_cursor", "buffersize"], ["bq_cursor", "arraysize"]]}, "name": "test_arraysize", "params": {"mock_get_service": "", "self": ""}, "params_descr": {"mock_get_service": "", "self": ""}, "params_occur": {"mock_get_service": [], "self": [["bq_cursor", "self", "hook", "get_cursor"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_service": [["mock.Mock", 0.23429002039770136], ["mock.MagicMock", 0.07651449514085545], ["Callable", 0.07317602523400349]], "self": []}, "q_name": "TestBigQueryCursor.test_arraysize", "ret_exprs": [], "ret_type": "", "variables": {"bq_cursor": ""}, "variables_p": {"bq_cursor": [["int", 0.20378545599263953], ["Tuple[Any, Any, Any, Any, Any, Any, Any]", 0.10208958686648774]]}}], "name": "TestBigQueryCursor", "q_name": "TestBigQueryCursor", "variables": {}, "variables_p": {}}, {"cls_lc": [[1453, 0], [1646, 32]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1454, 4], [1456, 76]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_create_empty_dataset_no_dataset_id_err", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "hook", "create_empty_dataset", "dataset_id", "None", "project_id", "None"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDatasetsOperations.test_create_empty_dataset_no_dataset_id_err", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1460, 4], [1471, 9]], "fn_var_ln": {"api_repr": [[1467, 8], [1467, 16]], "expected_body": [[1462, 8], [1462, 21]]}, "fn_var_occur": {"api_repr": [["api_repr", "mock_dataset", "from_api_repr"], ["api_repr", "assert_called_once_with", "expected_body"], ["mock_client", "return_value", "create_dataset", "assert_called_once_with", "dataset", "api_repr", "return_value", "exists_ok", "True"]], "expected_body": [["expected_body", "LOCATION", "DATASET_ID", "PROJECT_ID"], ["api_repr", "assert_called_once_with", "expected_body"]]}, "name": "test_create_empty_dataset_with_params", "params": {"mock_client": "", "mock_dataset": "", "self": ""}, "params_descr": {"mock_client": "", "mock_dataset": "", "self": ""}, "params_occur": {"mock_client": [["mock_client", "return_value", "create_dataset", "assert_called_once_with", "dataset", "api_repr", "return_value", "exists_ok", "True"]], "mock_dataset": [["api_repr", "mock_dataset", "from_api_repr"]], "self": [["self", "hook", "create_empty_dataset", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "location", "LOCATION"]]}, "params_p": {"args": [], "kwargs": [], "mock_client": [], "mock_dataset": [], "self": []}, "q_name": "TestDatasetsOperations.test_create_empty_dataset_with_params", "ret_exprs": [], "ret_type": "", "variables": {"api_repr": "", "expected_body": ""}, "variables_p": {"api_repr": [["Dict[int, Dict[str, Any]]", 0.19697137199564485], ["str", 0.1048263987774842], ["unittesmock._patch[Union[unittesmock.AsyncMock, unittesmock.MagicMock]]", 0.09811612991276646], ["int", 0.09278182157566435]], "expected_body": [["str", 0.499948362684889], ["List[Tuple[Any, str]]", 0.10555817012311285], ["Tuple[str, str]", 0.10123795621708724], ["Dict[str, Any]", 0.08988734650057574], ["dict", 0.08527921922177158]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1475, 4], [1486, 9]], "fn_var_ln": {"api_repr": [[1482, 8], [1482, 16]], "dataset": [[1476, 8], [1476, 15]]}, "fn_var_occur": {"api_repr": [["api_repr", "mock_dataset", "from_api_repr"], ["api_repr", "assert_called_once_with", "dataset"], ["mock_client", "return_value", "create_dataset", "assert_called_once_with", "dataset", "api_repr", "return_value", "exists_ok", "True"]], "dataset": [["self", "hook", "create_empty_dataset", "dataset_reference", "dataset"], ["api_repr", "assert_called_once_with", "dataset"], ["mock_client", "return_value", "create_dataset", "assert_called_once_with", "dataset", "api_repr", "return_value", "exists_ok", "True"]]}, "name": "test_create_empty_dataset_with_object", "params": {"mock_client": "", "mock_dataset": "", "self": ""}, "params_descr": {"mock_client": "", "mock_dataset": "", "self": ""}, "params_occur": {"mock_client": [["mock_client", "return_value", "create_dataset", "assert_called_once_with", "dataset", "api_repr", "return_value", "exists_ok", "True"]], "mock_dataset": [["api_repr", "mock_dataset", "from_api_repr"]], "self": [["self", "hook", "create_empty_dataset", "dataset_reference", "dataset"]]}, "params_p": {"args": [], "kwargs": [], "mock_client": [], "mock_dataset": [], "self": []}, "q_name": "TestDatasetsOperations.test_create_empty_dataset_with_object", "ret_exprs": [], "ret_type": "", "variables": {"api_repr": "", "dataset": ""}, "variables_p": {"api_repr": [["Dict[int, Dict[str, Any]]", 0.23025847874450056], ["str", 0.12584396725468988], ["int", 0.09370235485184318], ["unittesmock._patch[Union[unittesmock.AsyncMock, unittesmock.MagicMock]]", 0.08475919869562051]], "dataset": [["Type[Tuple[Any, Any, Any]]", 0.17685323896286576], ["Type[Dict[str, Any]]", 0.10805154294143923], ["str", 0.07981995933631174], ["Type[Iterable[Any]]", 0.07819009381419642], ["Type[Tuple[int, int, int]]", 0.07796062059389103], ["dict", 0.07409397587293798]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1490, 4], [1506, 9]], "fn_var_ln": {"api_repr": [[1502, 8], [1502, 16]], "dataset": [[1491, 8], [1491, 15]]}, "fn_var_occur": {"api_repr": [["api_repr", "mock_dataset", "from_api_repr"], ["api_repr", "assert_called_once_with", "dataset"], ["mock_client", "return_value", "create_dataset", "assert_called_once_with", "dataset", "api_repr", "return_value", "exists_ok", "True"]], "dataset": [["self", "hook", "create_empty_dataset", "dataset_reference", "dataset", "location", "dataset_id", "project_id"], ["api_repr", "assert_called_once_with", "dataset"], ["mock_client", "return_value", "create_dataset", "assert_called_once_with", "dataset", "api_repr", "return_value", "exists_ok", "True"]]}, "name": "test_create_empty_dataset_use_values_from_object", "params": {"mock_client": "", "mock_dataset": "", "self": ""}, "params_descr": {"mock_client": "", "mock_dataset": "", "self": ""}, "params_occur": {"mock_client": [["mock_client", "return_value", "create_dataset", "assert_called_once_with", "dataset", "api_repr", "return_value", "exists_ok", "True"]], "mock_dataset": [["api_repr", "mock_dataset", "from_api_repr"]], "self": [["self", "hook", "create_empty_dataset", "dataset_reference", "dataset", "location", "dataset_id", "project_id"]]}, "params_p": {"args": [], "kwargs": [], "mock_client": [], "mock_dataset": [], "self": []}, "q_name": "TestDatasetsOperations.test_create_empty_dataset_use_values_from_object", "ret_exprs": [], "ret_type": "", "variables": {"api_repr": "", "dataset": ""}, "variables_p": {"api_repr": [["Dict[int, Dict[str, Any]]", 0.23025847874450056], ["str", 0.12584396725468988], ["int", 0.09370235485184318], ["unittesmock._patch[Union[unittesmock.AsyncMock, unittesmock.MagicMock]]", 0.08475919869562051]], "dataset": [["str", 0.3939095003695978], ["dict", 0.09553366125439483], ["List[str]", 0.09443485989478581], ["int", 0.09125723487926714], ["Tuple[Tuple[str, str], Tuple[str, str], Tuple[str, str], Tuple[str, str]]", 0.08776090035817147]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1510, 4], [1522, 9]], "fn_var_ln": {"api_repr": [[1518, 8], [1518, 16]], "dataset": [[1511, 8], [1511, 15]], "dataset_copy": [[1512, 8], [1512, 20]]}, "fn_var_occur": {"api_repr": [["api_repr", "mock_dataset", "from_api_repr"], ["api_repr", "assert_called_once_with", "dataset"], ["mock_client", "return_value", "create_dataset", "assert_called_once_with", "dataset", "api_repr", "return_value", "exists_ok", "True"]], "dataset": [["dataset", "str"], ["dataset_copy", "dataset", "copy"], ["self", "hook", "create_empty_dataset", "dataset_reference", "dataset", "dataset_id", "project_id"], ["dataset", "dataset_copy"], ["api_repr", "assert_called_once_with", "dataset"], ["mock_client", "return_value", "create_dataset", "assert_called_once_with", "dataset", "api_repr", "return_value", "exists_ok", "True"]], "dataset_copy": [["dataset_copy", "dataset", "copy"], ["dataset", "dataset_copy"]]}, "name": "test_create_empty_dataset_without_datasetreference_key", "params": {"mock_client": "", "mock_dataset": "", "self": ""}, "params_descr": {"mock_client": "", "mock_dataset": "", "self": ""}, "params_occur": {"mock_client": [["mock_client", "return_value", "create_dataset", "assert_called_once_with", "dataset", "api_repr", "return_value", "exists_ok", "True"]], "mock_dataset": [["api_repr", "mock_dataset", "from_api_repr"]], "self": [["self", "hook", "create_empty_dataset", "dataset_reference", "dataset", "dataset_id", "project_id"]]}, "params_p": {"args": [], "kwargs": [], "mock_client": [], "mock_dataset": [], "self": []}, "q_name": "TestDatasetsOperations.test_create_empty_dataset_without_datasetreference_key", "ret_exprs": [], "ret_type": "", "variables": {"api_repr": "", "dataset": "", "dataset_copy": ""}, "variables_p": {"api_repr": [["Dict[int, Dict[str, Any]]", 0.23025847874450056], ["str", 0.12584396725468988], ["int", 0.09370235485184318], ["unittesmock._patch[Union[unittesmock.AsyncMock, unittesmock.MagicMock]]", 0.08475919869562051]], "dataset": [["str", 0.7181909122985698], ["int", 0.2818090877014302]], "dataset_copy": [["str", 0.277855673453177], ["slice", 0.14586145323524263], ["float", 0.10031213417907728], ["List[str]", 0.10031213417907728], ["bool", 0.09090974924040628]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1525, 4], [1540, 40]], "fn_var_ln": {"_expected_result": [[1526, 8], [1526, 24]], "expected_result": [[1532, 8], [1532, 23]], "result": [[1535, 8], [1535, 14]]}, "fn_var_occur": {"_expected_result": [["expected_result", "Dataset", "from_api_repr", "_expected_result"]], "expected_result": [["expected_result", "Dataset", "from_api_repr", "_expected_result"], ["mock_client", "return_value", "get_dataset", "return_value", "expected_result"], ["result", "expected_result"]], "result": [["result", "self", "hook", "get_dataset", "dataset_id", "DATASET_ID", "project_id", "PROJECT_ID"], ["result", "expected_result"]]}, "name": "test_get_dataset", "params": {"mock_client": "", "self": ""}, "params_descr": {"mock_client": "", "self": ""}, "params_occur": {"mock_client": [["mock_client", "return_value", "get_dataset", "return_value", "expected_result"], ["mock_client", "return_value", "get_dataset", "assert_called_once_with", "dataset_ref", "DatasetReference", "PROJECT_ID", "DATASET_ID"]], "self": [["result", "self", "hook", "get_dataset", "dataset_id", "DATASET_ID", "project_id", "PROJECT_ID"]]}, "params_p": {"args": [], "kwargs": [], "mock_client": [], "self": []}, "q_name": "TestDatasetsOperations.test_get_dataset", "ret_exprs": [], "ret_type": "", "variables": {"_expected_result": "", "expected_result": "", "result": ""}, "variables_p": {"_expected_result": [["int", 0.26396571631331717], ["list", 0.21095547243892632], ["Set[int]", 0.10391886598948251], ["str", 0.0962272723455091], ["List[Optional[tuple]]", 0.09328663386143235]], "expected_result": [], "result": [["dict", 0.1829279090202065], ["Dict[str, int]", 0.15310074526423675], ["List[str]", 0.11304199542744928], ["str", 0.10592153580083816], ["List[Tuple[str, str, str, str]]", 0.09124097256685254], ["list", 0.08929117819816251], ["Dict[str, List[str]]", 0.08576987604806224]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1543, 4], [1572, 51]], "fn_var_ln": {"datasets": [[1544, 8], [1544, 16]], "result": [[1561, 8], [1561, 14]], "return_value": [[1558, 8], [1558, 20]]}, "fn_var_occur": {"datasets": [["return_value", "DatasetListItem", "d", "d", "datasets"], ["zip", "datasets", "result"]], "result": [["result", "self", "hook", "get_datasets_list", "project_id", "PROJECT_ID"], ["zip", "datasets", "result"]], "return_value": [["return_value", "DatasetListItem", "d", "d", "datasets"], ["mock_client", "return_value", "list_datasets", "return_value", "return_value"], ["mock_client", "return_value", "list_datasets", "assert_called_once_with", "project", "PROJECT_ID", "include_all", "False", "filter", "None", "max_results", "None", "page_token", "None", "retry", "DEFAULT_RETRY"]]}, "name": "test_get_datasets_list", "params": {"mock_client": "", "self": ""}, "params_descr": {"mock_client": "", "self": ""}, "params_occur": {"mock_client": [["mock_client", "return_value", "list_datasets", "return_value", "return_value"], ["mock_client", "return_value", "list_datasets", "assert_called_once_with", "project", "PROJECT_ID", "include_all", "False", "filter", "None", "max_results", "None", "page_token", "None", "retry", "DEFAULT_RETRY"]], "self": [["result", "self", "hook", "get_datasets_list", "project_id", "PROJECT_ID"]]}, "params_p": {"args": [], "kwargs": [], "mock_client": [], "self": []}, "q_name": "TestDatasetsOperations.test_get_datasets_list", "ret_exprs": [], "ret_type": "", "variables": {"datasets": "", "result": "", "return_value": ""}, "variables_p": {"datasets": [["Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]", 0.10808944074583866], ["List[int]", 0.10808944074583866], ["int", 0.10581459567803207], ["dict", 0.10581459567803207]], "result": [["dict", 0.19501123519644822], ["List[Dict[str, Any]]", 0.11697152516818192], ["Set[str]", 0.10330479335659137], ["list", 0.09768444553295719], ["List[Union[Any, Any, Any, Any]]", 0.0967452973520306], ["Dict[str, int]", 0.09431054311395115]], "return_value": [["Dict[str, List[Any]]", 0.10991932772546417], ["Dict[str, Any]", 0.10030680179628551], ["str", 0.09726823780747926], ["Dict[str, Union[Any, str]]", 0.09612299493633232]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1575, 4], [1591, 38]], "fn_var_ln": {"actual": [[1581, 8], [1581, 14]], "client": [[1576, 8], [1576, 14]], "mock_iterator": [[1577, 8], [1577, 21]]}, "fn_var_occur": {"actual": [["actual", "self", "hook", "get_datasets_list", "project_id", "PROJECT_ID", "return_iterator", "True"], ["actual", "mock_iterator"]], "client": [["client", "mock", "sentinel", "client"], ["mock_iterator", "page_iterator", "HTTPIterator", "client", "mock", "sentinel", "api_request", "mock", "sentinel", "item_to_value"]], "mock_iterator": [["mock_iterator", "page_iterator", "HTTPIterator", "client", "mock", "sentinel", "api_request", "mock", "sentinel", "item_to_value"], ["mock_client", "return_value", "list_datasets", "return_value", "mock_iterator"], ["actual", "mock_iterator"]]}, "name": "test_get_datasets_list_returns_iterator", "params": {"mock_client": "", "self": ""}, "params_descr": {"mock_client": "", "self": ""}, "params_occur": {"mock_client": [["mock_client", "return_value", "list_datasets", "return_value", "mock_iterator"], ["mock_client", "return_value", "list_datasets", "assert_called_once_with", "project", "PROJECT_ID", "include_all", "False", "filter", "None", "max_results", "None", "page_token", "None", "retry", "DEFAULT_RETRY"]], "self": [["actual", "self", "hook", "get_datasets_list", "project_id", "PROJECT_ID", "return_iterator", "True"]]}, "params_p": {"args": [], "kwargs": [], "mock_client": [], "self": []}, "q_name": "TestDatasetsOperations.test_get_datasets_list_returns_iterator", "ret_exprs": [], "ret_type": "", "variables": {"actual": "", "client": "", "mock_iterator": ""}, "variables_p": {"actual": [["List[str]", 0.3666291413407395], ["int", 0.16561285864095626], ["Dict[str, List[str]]", 0.09616331796918125], ["str", 0.08768549228226384]], "client": [], "mock_iterator": [["Dict[str, Union[Any, Any]]", 0.15670558159945852], ["Dict[str, str]", 0.08395655174525835], ["Dict[str, Dict[str, str]]", 0.08159171315667121]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1594, 4], [1605, 9]], "fn_var_ln": {"delete_contents": [[1595, 8], [1595, 23]]}, "fn_var_occur": {"delete_contents": [["delete_contents", "True"], ["self", "hook", "delete_dataset", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "delete_contents", "delete_contents"], ["mock_client", "return_value", "delete_dataset", "assert_called_once_with", "dataset", "DatasetReference", "PROJECT_ID", "DATASET_ID", "delete_contents", "delete_contents", "retry", "DEFAULT_RETRY", "not_found_ok", "True"]]}, "name": "test_delete_dataset", "params": {"mock_client": "", "self": ""}, "params_descr": {"mock_client": "", "self": ""}, "params_occur": {"mock_client": [["mock_client", "return_value", "delete_dataset", "assert_called_once_with", "dataset", "DatasetReference", "PROJECT_ID", "DATASET_ID", "delete_contents", "delete_contents", "retry", "DEFAULT_RETRY", "not_found_ok", "True"]], "self": [["self", "hook", "delete_dataset", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "delete_contents", "delete_contents"]]}, "params_p": {"args": [], "kwargs": [], "mock_client": [], "self": []}, "q_name": "TestDatasetsOperations.test_delete_dataset", "ret_exprs": [], "ret_type": "", "variables": {"delete_contents": ""}, "variables_p": {"delete_contents": [["str", 0.31040762754526247], ["set", 0.19743445023953632], ["List[None]", 0.1011716248697564], ["Dict[str, Dict[str, str]]", 0.09930477066871345], ["int", 0.09919566021413195], ["list", 0.09707061086884429]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1608, 4], [1616, 105]], "fn_var_ln": {"dataset_resource": [[1609, 8], [1609, 24]], "method": [[1611, 8], [1611, 14]]}, "fn_var_occur": {"dataset_resource": [["self", "hook", "patch_dataset", "dataset_id", "DATASET_ID", "project_id", "PROJECT_ID", "dataset_resource", "dataset_resource"], ["method", "assert_called_once_with", "projectId", "PROJECT_ID", "datasetId", "DATASET_ID", "body", "dataset_resource"]], "method": [["method", "mock_get_service", "return_value", "datasets", "return_value", "patch"], ["method", "assert_called_once_with", "projectId", "PROJECT_ID", "datasetId", "DATASET_ID", "body", "dataset_resource"]]}, "name": "test_patch_dataset", "params": {"mock_get_service": "", "self": ""}, "params_descr": {"mock_get_service": "", "self": ""}, "params_occur": {"mock_get_service": [["method", "mock_get_service", "return_value", "datasets", "return_value", "patch"]], "self": [["self", "hook", "patch_dataset", "dataset_id", "DATASET_ID", "project_id", "PROJECT_ID", "dataset_resource", "dataset_resource"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_service": [["mock.MagicMock", 0.08234592630244249]], "self": []}, "q_name": "TestDatasetsOperations.test_patch_dataset", "ret_exprs": [], "ret_type": "", "variables": {"dataset_resource": "", "method": ""}, "variables_p": {"dataset_resource": [["List[str]", 0.2296289767406903], ["str", 0.19475581415420104], ["list", 0.1831236630166384], ["Tuple[str, str]", 0.12150775604206784]], "method": [["str", 0.4111570816170456], ["List[Tuple[str, str, str, str]]", 0.2880285204981981], ["List[Union[Any, Any]]", 0.1920190136654654], ["List[str]", 0.10879538421929096]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1620, 4], [1646, 32]], "fn_var_ln": {"dataset": [[1629, 8], [1629, 15]], "dataset_resource": [[1621, 8], [1621, 24]], "method": [[1628, 8], [1628, 14]], "result": [[1633, 8], [1633, 14]], "return_value": [[1631, 8], [1631, 27]]}, "fn_var_occur": {"dataset": [["dataset", "Dataset", "from_api_repr", "dataset_resource"], ["mock_dataset", "from_api_repr", "return_value", "dataset"], ["method", "return_value", "dataset"], ["method", "assert_called_once_with", "dataset", "dataset", "fields", "retry", "DEFAULT_RETRY"], ["result", "dataset"]], "dataset_resource": [["dataset", "Dataset", "from_api_repr", "dataset_resource"], ["result", "self", "hook", "update_dataset", "dataset_id", "DATASET_ID", "project_id", "PROJECT_ID", "dataset_resource", "dataset_resource", "fields"], ["mock_dataset", "from_api_repr", "assert_called_once_with", "dataset_resource"]], "method": [["method", "mock_client", "return_value", "update_dataset"], ["method", "return_value", "dataset"], ["method", "assert_called_once_with", "dataset", "dataset", "fields", "retry", "DEFAULT_RETRY"]], "result": [["result", "self", "hook", "update_dataset", "dataset_id", "DATASET_ID", "project_id", "PROJECT_ID", "dataset_resource", "dataset_resource", "fields"], ["result", "dataset"]], "return_value": [["method", "mock_client", "return_value", "update_dataset"], ["mock_dataset", "from_api_repr", "return_value", "dataset"], ["method", "return_value", "dataset"]]}, "name": "test_update_dataset", "params": {"mock_client": "", "mock_dataset": "", "self": ""}, "params_descr": {"mock_client": "", "mock_dataset": "", "self": ""}, "params_occur": {"mock_client": [["method", "mock_client", "return_value", "update_dataset"]], "mock_dataset": [["mock_dataset", "from_api_repr", "return_value", "dataset"], ["mock_dataset", "from_api_repr", "assert_called_once_with", "dataset_resource"]], "self": [["result", "self", "hook", "update_dataset", "dataset_id", "DATASET_ID", "project_id", "PROJECT_ID", "dataset_resource", "dataset_resource", "fields"]]}, "params_p": {"args": [], "kwargs": [], "mock_client": [], "mock_dataset": [["mock.MagicMock", 0.09234826902440217]], "self": []}, "q_name": "TestDatasetsOperations.test_update_dataset", "ret_exprs": [], "ret_type": "", "variables": {"dataset": "", "dataset_resource": "", "method": "", "result": "", "return_value": ""}, "variables_p": {"dataset": [["str", 0.2772797316521402], ["Tuple[List[str], Tuple[Literal, Literal], List[str]]", 0.08219769666000237]], "dataset_resource": [["Optional[List[Any]]", 0.09755886500622687], ["str", 0.09755886500622687]], "method": [["str", 0.461770087344468], ["Dict[str, str]", 0.0980236593817574], ["Dict[str, Union[Any, Any]]", 0.09260897356292014], ["Dict[str, Union[None, Any, int]]", 0.08774902344966112], ["Dict[str, Union[int, str]]", 0.08297027527892854], ["Dict[Any, Union[int, str]]", 0.07406011988799265]], "result": [["List[Dict[str, Any]]", 0.19594379722356348], ["Dict[str, Any]", 0.09089860813199492], ["List[str]", 0.08220858210863499]], "return_value": [["str", 0.4789008797052421], ["Dict[Any, Union[int, str]]", 0.09379177237547999], ["Optional[bytes]", 0.08692605553636308]]}}], "name": "TestDatasetsOperations", "q_name": "TestDatasetsOperations", "variables": {}, "variables_p": {}}, {"cls_lc": [[1649, 0], [1732, 31]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1651, 4], [1659, 78]], "fn_var_ln": {"_": [[1658, 8], [1658, 9]], "kwargs": [[1658, 11], [1658, 17]]}, "fn_var_occur": {"_": [["_", "kwargs", "mock_insert", "call_args"]], "kwargs": [["_", "kwargs", "mock_insert", "call_args"], ["kwargs", "get", "None"]]}, "name": "test_run_load_default", "params": {"mock_insert": "", "self": ""}, "params_descr": {"mock_insert": "", "self": ""}, "params_occur": {"mock_insert": [["_", "kwargs", "mock_insert", "call_args"]], "self": [["self", "hook", "run_load", "destination_project_dataset_table", "schema_fields", "source_uris"]]}, "params_p": {"args": [], "kwargs": [], "mock_insert": [], "self": []}, "q_name": "TestTimePartitioningInRunJob.test_run_load_default", "ret_exprs": [], "ret_type": "", "variables": {"_": "", "kwargs": ""}, "variables_p": {"_": [["int", 0.3803869320637631], ["float", 0.15802746558517075], ["Tuple[str, str, str]", 0.09454442272977188], ["str", 0.09247700941394743]], "kwargs": [["str", 0.3290324293843948], ["int", 0.19122497492930593], ["dict", 0.10183859631054948], ["Dict[str, Any]", 0.097157635564186], ["Dict[str, List[str]]", 0.08888379905808833]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1662, 4], [1666, 68]], "fn_var_ln": {"_": [[1665, 8], [1665, 9]], "destination_project_dataset_table": [[1663, 8], [1663, 41]], "kwargs": [[1665, 11], [1665, 17]]}, "fn_var_occur": {"_": [["_", "kwargs", "mock_insert", "call_args"]], "destination_project_dataset_table": [["self", "hook", "run_load", "destination_project_dataset_table", "autodetect", "True"]], "kwargs": [["_", "kwargs", "mock_insert", "call_args"], ["kwargs", "True"]]}, "name": "test_run_with_auto_detect", "params": {"mock_insert": "", "self": ""}, "params_descr": {"mock_insert": "", "self": ""}, "params_occur": {"mock_insert": [["_", "kwargs", "mock_insert", "call_args"]], "self": [["self", "hook", "run_load", "destination_project_dataset_table", "autodetect", "True"]]}, "params_p": {"args": [], "kwargs": [], "mock_insert": [["mock.MagicMock", 0.08466323563236164]], "self": []}, "q_name": "TestTimePartitioningInRunJob.test_run_with_auto_detect", "ret_exprs": [], "ret_type": "", "variables": {"_": "", "destination_project_dataset_table": "", "kwargs": ""}, "variables_p": {"_": [["int", 0.3803869320637631], ["float", 0.15802746558517075], ["Tuple[str, str, str]", 0.09454442272977188], ["str", 0.09247700941394743]], "destination_project_dataset_table": [["str", 0.41250439841185577], ["List[str]", 0.29211268273159197], ["Dict[str, str]", 0.12816781942152805], ["Dict[str, Dict[str, float]]", 0.08419194704329373], ["Dict[Optional[str], str]", 0.08302315239173055]], "kwargs": [["list", 0.203192773420265], ["Union[dict, Dict[str, int]]", 0.18308947098250974], ["List[int]", 0.11134761293704293], ["List[Dict[str, str]]", 0.10744412680669574], ["List[str]", 0.10744412680669574], ["str", 0.09703200537097144], ["Dict[str, str]", 0.09588664397891898], ["staticmethod", 0.09456323969690034]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1669, 4], [1693, 95]], "fn_var_ln": {"configuration": [[1676, 8], [1676, 21]]}, "fn_var_occur": {"configuration": [["configuration", "False", "PROJECT_ID", "DATASET_ID", "TABLE_ID", "False", "None", "False"], ["mock_insert", "assert_called_once_with", "configuration", "configuration", "project_id", "PROJECT_ID"]]}, "name": "test_run_load_with_arg", "params": {"mock_insert": "", "self": ""}, "params_descr": {"mock_insert": "", "self": ""}, "params_occur": {"mock_insert": [["mock_insert", "assert_called_once_with", "configuration", "configuration", "project_id", "PROJECT_ID"]], "self": [["self", "hook", "run_load", "destination_project_dataset_table", "DATASET_ID", "TABLE_ID", "schema_fields", "source_uris", "time_partitioning"]]}, "params_p": {"args": [], "kwargs": [], "mock_insert": [], "self": []}, "q_name": "TestTimePartitioningInRunJob.test_run_load_with_arg", "ret_exprs": [], "ret_type": "", "variables": {"configuration": ""}, "variables_p": {"configuration": [["Dict[str, Any]", 0.20860625926473295], ["str", 0.1767993242305818], ["int", 0.08263170739733809]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1696, 4], [1719, 110]], "fn_var_ln": {"configuration": [[1704, 8], [1704, 21]]}, "fn_var_occur": {"configuration": [["configuration", "True", "PROJECT_ID", "DATASET_ID", "TABLE_ID", "False", "None"], ["mock_insert", "assert_called_once_with", "configuration", "configuration", "project_id", "PROJECT_ID", "location", "None"]]}, "name": "test_run_query_with_arg", "params": {"mock_insert": "", "self": ""}, "params_descr": {"mock_insert": "", "self": ""}, "params_occur": {"mock_insert": [["mock_insert", "assert_called_once_with", "configuration", "configuration", "project_id", "PROJECT_ID", "location", "None"]], "self": [["self", "hook", "run_query", "sql", "destination_dataset_table", "DATASET_ID", "TABLE_ID", "priority", "time_partitioning"]]}, "params_p": {"args": [], "kwargs": [], "mock_insert": [["mock.Mock", 0.08965752861353941]], "self": []}, "q_name": "TestTimePartitioningInRunJob.test_run_query_with_arg", "ret_exprs": [], "ret_type": "", "variables": {"configuration": ""}, "variables_p": {"configuration": [["int", 0.18531880151208963], ["list", 0.17723799881021096], ["Dict[str, Any]", 0.11998173223307636], ["str", 0.11983437914177944]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1721, 4], [1724, 31]], "fn_var_ln": {"expect": [[1723, 8], [1723, 14]], "tp_out": [[1722, 8], [1722, 14]]}, "fn_var_occur": {"expect": [["tp_out", "expect"]], "tp_out": [["tp_out", "_cleanse_time_partitioning"], ["tp_out", "expect"]]}, "name": "test_dollar_makes_partition", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestTimePartitioningInRunJob.test_dollar_makes_partition", "ret_exprs": [], "ret_type": "", "variables": {"expect": "", "tp_out": ""}, "variables_p": {"expect": [["str", 0.4], ["Dict[int, List[Any]]", 0.1], ["List[Union[int, str]]", 0.1], ["List[str]", 0.1]], "tp_out": [["int", 0.40908231519725446], ["str", 0.2963100801993292], ["List[str]", 0.10670580784800376], ["datetime.timedelta", 0.0952908462109675], ["list", 0.0926109505444449]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1726, 4], [1732, 31]], "fn_var_ln": {"expect": [[1731, 8], [1731, 14]], "tp_out": [[1727, 8], [1727, 14]]}, "fn_var_occur": {"expect": [["tp_out", "expect"]], "tp_out": [["tp_out", "_cleanse_time_partitioning"], ["tp_out", "expect"]]}, "name": "test_extra_time_partitioning_options", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestTimePartitioningInRunJob.test_extra_time_partitioning_options", "ret_exprs": [], "ret_type": "", "variables": {"expect": "", "tp_out": ""}, "variables_p": {"expect": [["str", 0.4], ["Dict[int, List[Any]]", 0.1], ["List[Union[int, str]]", 0.1], ["List[str]", 0.1]], "tp_out": [["int", 0.40908231519725446], ["str", 0.2963100801993292], ["List[str]", 0.10670580784800376], ["datetime.timedelta", 0.0952908462109675], ["list", 0.0926109505444449]]}}], "name": "TestTimePartitioningInRunJob", "q_name": "TestTimePartitioningInRunJob", "variables": {}, "variables_p": {}}, {"cls_lc": [[1735, 0], [1777, 97]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1737, 4], [1745, 72]], "fn_var_ln": {"_": [[1744, 8], [1744, 9]], "kwargs": [[1744, 11], [1744, 17]]}, "fn_var_occur": {"_": [["_", "kwargs", "mock_insert", "call_args"]], "kwargs": [["_", "kwargs", "mock_insert", "call_args"], ["kwargs", "get", "None"]]}, "name": "test_run_load_default", "params": {"mock_insert": "", "self": ""}, "params_descr": {"mock_insert": "", "self": ""}, "params_occur": {"mock_insert": [["_", "kwargs", "mock_insert", "call_args"]], "self": [["self", "hook", "run_load", "destination_project_dataset_table", "schema_fields", "source_uris"]]}, "params_p": {"args": [], "kwargs": [], "mock_insert": [], "self": []}, "q_name": "TestClusteringInRunJob.test_run_load_default", "ret_exprs": [], "ret_type": "", "variables": {"_": "", "kwargs": ""}, "variables_p": {"_": [["int", 0.3803869320637631], ["float", 0.15802746558517075], ["Tuple[str, str, str]", 0.09454442272977188], ["str", 0.09247700941394743]], "kwargs": [["str", 0.3290324293843948], ["int", 0.19122497492930593], ["dict", 0.10183859631054948], ["Dict[str, Any]", 0.097157635564186], ["Dict[str, List[str]]", 0.08888379905808833]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1748, 4], [1758, 96]], "fn_var_ln": {"_": [[1757, 8], [1757, 9]], "kwargs": [[1757, 11], [1757, 17]]}, "fn_var_occur": {"_": [["_", "kwargs", "mock_insert", "call_args"]], "kwargs": [["_", "kwargs", "mock_insert", "call_args"]]}, "name": "test_run_load_with_arg", "params": {"mock_insert": "", "self": ""}, "params_descr": {"mock_insert": "", "self": ""}, "params_occur": {"mock_insert": [["_", "kwargs", "mock_insert", "call_args"]], "self": [["self", "hook", "run_load", "destination_project_dataset_table", "schema_fields", "source_uris", "cluster_fields", "time_partitioning"]]}, "params_p": {"args": [], "kwargs": [], "mock_insert": [["mock.MagicMock", 0.08754267114979856], ["str", 0.06313182801123711]], "self": []}, "q_name": "TestClusteringInRunJob.test_run_load_with_arg", "ret_exprs": [], "ret_type": "", "variables": {"_": "", "kwargs": ""}, "variables_p": {"_": [["int", 0.3803869320637631], ["float", 0.15802746558517075], ["Tuple[str, str, str]", 0.09454442272977188], ["str", 0.09247700941394743]], "kwargs": [["int", 0.5439011198006943], ["list", 0.19311380422647983], ["str", 0.10541968104699509], ["List[str]", 0.07954444374400955]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1761, 4], [1765, 73]], "fn_var_ln": {"_": [[1764, 8], [1764, 9]], "kwargs": [[1764, 11], [1764, 17]]}, "fn_var_occur": {"_": [["_", "kwargs", "mock_insert", "call_args"]], "kwargs": [["_", "kwargs", "mock_insert", "call_args"], ["kwargs", "get", "None"]]}, "name": "test_run_query_default", "params": {"mock_insert": "", "self": ""}, "params_descr": {"mock_insert": "", "self": ""}, "params_occur": {"mock_insert": [["_", "kwargs", "mock_insert", "call_args"]], "self": [["self", "hook", "run_query", "sql"]]}, "params_p": {"args": [], "kwargs": [], "mock_insert": [["mock.MagicMock", 0.08457539057395552]], "self": []}, "q_name": "TestClusteringInRunJob.test_run_query_default", "ret_exprs": [], "ret_type": "", "variables": {"_": "", "kwargs": ""}, "variables_p": {"_": [["int", 0.3803869320637631], ["float", 0.15802746558517075], ["Tuple[str, str, str]", 0.09454442272977188], ["str", 0.09247700941394743]], "kwargs": [["str", 0.3290324293843948], ["int", 0.19122497492930593], ["dict", 0.10183859631054948], ["Dict[str, Any]", 0.097157635564186], ["Dict[str, List[str]]", 0.08888379905808833]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1768, 4], [1777, 97]], "fn_var_ln": {"_": [[1776, 8], [1776, 9]], "kwargs": [[1776, 11], [1776, 17]]}, "fn_var_occur": {"_": [["_", "kwargs", "mock_insert", "call_args"]], "kwargs": [["_", "kwargs", "mock_insert", "call_args"]]}, "name": "test_run_query_with_arg", "params": {"mock_insert": "", "self": ""}, "params_descr": {"mock_insert": "", "self": ""}, "params_occur": {"mock_insert": [["_", "kwargs", "mock_insert", "call_args"]], "self": [["self", "hook", "run_query", "sql", "destination_dataset_table", "cluster_fields", "time_partitioning"]]}, "params_p": {"args": [], "kwargs": [], "mock_insert": [["mock.MagicMock", 0.08664261522210785], ["str", 0.06434990030782615]], "self": []}, "q_name": "TestClusteringInRunJob.test_run_query_with_arg", "ret_exprs": [], "ret_type": "", "variables": {"_": "", "kwargs": ""}, "variables_p": {"_": [["int", 0.3803869320637631], ["float", 0.15802746558517075], ["Tuple[str, str, str]", 0.09454442272977188], ["str", 0.09247700941394743]], "kwargs": [["int", 0.5439011198006943], ["list", 0.19311380422647983], ["str", 0.10541968104699509], ["List[str]", 0.07954444374400955]]}}], "name": "TestClusteringInRunJob", "q_name": "TestClusteringInRunJob", "variables": {}, "variables_p": {}}, {"cls_lc": [[1780, 0], [1802, 72]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1785, 4], [1788, 71]], "fn_var_ln": {"_": [[1787, 8], [1787, 9]], "kwargs": [[1787, 11], [1787, 17]]}, "fn_var_occur": {"_": [["_", "kwargs", "mock_insert", "call_args"]], "kwargs": [["_", "kwargs", "mock_insert", "call_args"], ["kwargs", "True"]]}, "name": "test_hook_uses_legacy_sql_by_default", "params": {"_": "", "mock_insert": "", "self": ""}, "params_descr": {"_": "", "mock_insert": "", "self": ""}, "params_occur": {"_": [["_", "kwargs", "mock_insert", "call_args"]], "mock_insert": [["_", "kwargs", "mock_insert", "call_args"]], "self": [["self", "hook", "get_first"]]}, "params_p": {"_": [["mock.MagicMock", 0.08945250021392659]], "args": [], "kwargs": [], "mock_insert": [["mock.MagicMock", 0.08945250021392659]], "self": []}, "q_name": "TestBigQueryHookLegacySql.test_hook_uses_legacy_sql_by_default", "ret_exprs": [], "ret_type": "", "variables": {"_": "", "kwargs": ""}, "variables_p": {"_": [["int", 0.3803869320637631], ["float", 0.15802746558517075], ["Tuple[str, str, str]", 0.09454442272977188], ["str", 0.09247700941394743]], "kwargs": [["list", 0.203192773420265], ["Union[dict, Dict[str, int]]", 0.18308947098250974], ["List[int]", 0.11134761293704293], ["List[Dict[str, str]]", 0.10744412680669574], ["List[str]", 0.10744412680669574], ["str", 0.09703200537097144], ["Dict[str, str]", 0.09588664397891898], ["staticmethod", 0.09456323969690034]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1796, 4], [1802, 72]], "fn_var_ln": {"_": [[1801, 8], [1801, 9]], "bq_hook": [[1799, 8], [1799, 15]], "kwargs": [[1801, 11], [1801, 17]]}, "fn_var_occur": {"_": [["_", "kwargs", "mock_insert", "call_args"]], "bq_hook": [["bq_hook", "BigQueryHook", "use_legacy_sql", "False"], ["bq_hook", "get_first"]], "kwargs": [["_", "kwargs", "mock_insert", "call_args"], ["kwargs", "False"]]}, "name": "test_legacy_sql_override_propagates_properly", "params": {"mock_get_creds_and_proj_id": "", "mock_get_service": "", "mock_insert": "", "self": ""}, "params_descr": {"mock_get_creds_and_proj_id": "", "mock_get_service": "", "mock_insert": "", "self": ""}, "params_occur": {"mock_get_creds_and_proj_id": [], "mock_get_service": [], "mock_insert": [["_", "kwargs", "mock_insert", "call_args"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_get_creds_and_proj_id": [["mock.Mock", 0.5234176813841235], ["mock.MagicMock", 0.4765823186158764]], "mock_get_service": [["mock.Mock", 0.5234176813841235], ["mock.MagicMock", 0.4765823186158764]], "mock_insert": [["mock.MagicMock", 0.15446840351014113]], "self": []}, "q_name": "TestBigQueryHookLegacySql.test_legacy_sql_override_propagates_properly", "ret_exprs": [], "ret_type": "", "variables": {"_": "", "bq_hook": "", "kwargs": ""}, "variables_p": {"_": [["int", 0.3803869320637631], ["float", 0.15802746558517075], ["Tuple[str, str, str]", 0.09454442272977188], ["str", 0.09247700941394743]], "bq_hook": [["Tuple[str, str]", 0.23153378192371254], ["bool", 0.12354492593772472], ["str", 0.0833066589449311]], "kwargs": [["list", 0.17791350967713432], ["dict", 0.1748204545379023], ["str", 0.09618512640492528], ["bool", 0.09138752560851301]]}}], "name": "TestBigQueryHookLegacySql", "q_name": "TestBigQueryHookLegacySql", "variables": {}, "variables_p": {}}, {"cls_lc": [[1805, 0], [1824, 9]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1808, 4], [1824, 9]], "fn_var_ln": {"_JOB_TYPE": [[1811, 8], [1811, 26]], "conf": [[1813, 8], [1813, 12]], "location": [[1810, 8], [1810, 16]], "running_job_id": [[1809, 8], [1809, 22]]}, "fn_var_occur": {"_JOB_TYPE": [["mock_job", "_JOB_TYPE"]], "conf": [["self", "hook", "run_with_configuration", "conf"], ["mock_job", "from_api_repr", "assert_called_once_with", "conf", "mock", "ANY", "PROJECT_ID", "location", "mock_client", "return_value"]], "location": [["self", "hook", "location", "location"], ["mock_client", "assert_called_once_with", "project_id", "PROJECT_ID", "location", "location"], ["mock_job", "from_api_repr", "assert_called_once_with", "conf", "mock", "ANY", "PROJECT_ID", "location", "mock_client", "return_value"]], "running_job_id": [["self", "hook", "running_job_id", "running_job_id"]]}, "name": "test_run_with_configuration_location", "params": {"mock_client": "", "mock_job": "", "self": ""}, "params_descr": {"mock_client": "", "mock_job": "", "self": ""}, "params_occur": {"mock_client": [["mock_client", "assert_called_once_with", "project_id", "PROJECT_ID", "location", "location"], ["mock_job", "from_api_repr", "assert_called_once_with", "conf", "mock", "ANY", "PROJECT_ID", "location", "mock_client", "return_value"]], "mock_job": [["mock_job", "_JOB_TYPE"], ["mock_job", "from_api_repr", "assert_called_once_with", "conf", "mock", "ANY", "PROJECT_ID", "location", "mock_client", "return_value"]], "self": [["self", "hook", "running_job_id", "running_job_id"], ["self", "hook", "location", "location"], ["self", "hook", "run_with_configuration", "conf"]]}, "params_p": {"args": [], "kwargs": [], "mock_client": [["mock.MagicMock", 0.09329300437382881]], "mock_job": [], "self": []}, "q_name": "TestBigQueryHookRunWithConfiguration.test_run_with_configuration_location", "ret_exprs": [], "ret_type": "", "variables": {"_JOB_TYPE": "", "conf": "", "location": "", "running_job_id": ""}, "variables_p": {"_JOB_TYPE": [["str", 0.42484413570199797], ["Dict[str, Dict[str, Any]]", 0.17710284604358717], ["Tuple[List[str], List[str], List[str]]", 0.1304969752280935], ["Dict[str, Union[Any, Any]]", 0.0952625422807718], ["Dict[str, List[str]]", 0.08735468435709486], ["Dict[str, Type[Any]]", 0.08493881638845475]], "conf": [["str", 0.6520806666712937], ["Dict[str, Union[Any, Any, Any]]", 0.0928564975904992], ["int", 0.08928409782617203], ["IO[bytes]", 0.08249706029384596]], "location": [["str", 0.1775320814545579], ["Dict[Any, str]", 0.15846703732709136], ["Tuple[Literal, Literal]", 0.09547483428620926], ["Dict[str, Dict[str, Any]]", 0.08882788626217092], ["Dict[str, str]", 0.08560435395365297]], "running_job_id": [["str", 0.9026191784389342], ["int", 0.09738082156106585]]}}], "name": "TestBigQueryHookRunWithConfiguration", "q_name": "TestBigQueryHookRunWithConfiguration", "variables": {}, "variables_p": {}}, {"cls_lc": [[1827, 0], [2019, 9]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1830, 4], [1852, 9]], "fn_var_ln": {"body": [[1842, 8], [1842, 12]], "encryption_configuration": [[1832, 8], [1832, 32]], "schema_fields": [[1831, 8], [1831, 21]]}, "fn_var_occur": {"body": [["body", "TABLE_ID", "PROJECT_ID", "DATASET_ID", "schema_fields", "encryption_configuration"], ["mock_table", "from_api_repr", "assert_called_once_with", "body"]], "encryption_configuration": [["self", "hook", "create_empty_table", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "schema_fields", "schema_fields", "encryption_configuration", "encryption_configuration"], ["body", "TABLE_ID", "PROJECT_ID", "DATASET_ID", "schema_fields", "encryption_configuration"]], "schema_fields": [["self", "hook", "create_empty_table", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "schema_fields", "schema_fields", "encryption_configuration", "encryption_configuration"], ["body", "TABLE_ID", "PROJECT_ID", "DATASET_ID", "schema_fields", "encryption_configuration"]]}, "name": "test_create_empty_table_with_kms", "params": {"mock_bq_client": "", "mock_table": "", "self": ""}, "params_descr": {"mock_bq_client": "", "mock_table": "", "self": ""}, "params_occur": {"mock_bq_client": [["mock_bq_client", "return_value", "create_table", "assert_called_once_with", "table", "mock_table", "from_api_repr", "return_value", "exists_ok", "True", "retry", "DEFAULT_RETRY"]], "mock_table": [["mock_table", "from_api_repr", "assert_called_once_with", "body"], ["mock_bq_client", "return_value", "create_table", "assert_called_once_with", "table", "mock_table", "from_api_repr", "return_value", "exists_ok", "True", "retry", "DEFAULT_RETRY"]], "self": [["self", "hook", "create_empty_table", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "schema_fields", "schema_fields", "encryption_configuration", "encryption_configuration"]]}, "params_p": {"args": [], "kwargs": [], "mock_bq_client": [], "mock_table": [["mock.Mock", 0.11198534148382625]], "self": []}, "q_name": "TestBigQueryWithKMS.test_create_empty_table_with_kms", "ret_exprs": [], "ret_type": "", "variables": {"body": "", "encryption_configuration": "", "schema_fields": ""}, "variables_p": {"body": [["str", 0.5810997871836711], ["ClassVar[str]", 0.1188627871408097], ["List[int]", 0.09327314504371426]], "encryption_configuration": [["str", 0.9013158413386229], ["Iterator[str]", 0.09868415866137711]], "schema_fields": [["str", 0.8274406860359315], ["list", 0.08967492622765234], ["int", 0.08288438773641615]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1855, 4], [1931, 9]], "fn_var_ln": {"allow_jagged_rows": [[1867, 8], [1867, 25]], "allow_quoted_newlines": [[1866, 8], [1866, 29]], "autodetect": [[1859, 8], [1859, 18]], "body": [[1900, 8], [1900, 12]], "compression": [[1860, 8], [1860, 19]], "encoding": [[1868, 8], [1868, 16]], "encryption_configuration": [[1879, 8], [1879, 32]], "external_project_dataset_table": [[1856, 8], [1856, 38]], "field_delimiter": [[1864, 8], [1864, 23]], "ignore_unknown_values": [[1861, 8], [1861, 29]], "labels": [[1869, 8], [1869, 14]], "max_bad_records": [[1862, 8], [1862, 23]], "quote_character": [[1865, 8], [1865, 23]], "schema_fields": [[1870, 8], [1870, 21]], "skip_leading_rows": [[1863, 8], [1863, 25]], "source_format": [[1858, 8], [1858, 21]], "source_uris": [[1857, 8], [1857, 19]]}, "fn_var_occur": {"allow_jagged_rows": [["allow_jagged_rows", "False"], ["self", "hook", "create_external_table", "external_project_dataset_table", "external_project_dataset_table", "source_uris", "source_uris", "source_format", "source_format", "autodetect", "autodetect", "compression", "compression", "ignore_unknown_values", "ignore_unknown_values", "max_bad_records", "max_bad_records", "skip_leading_rows", "skip_leading_rows", "field_delimiter", "field_delimiter", "quote_character", "quote_character", "allow_jagged_rows", "allow_jagged_rows", "encoding", "encoding", "allow_quoted_newlines", "allow_quoted_newlines", "labels", "labels", "schema_fields", "schema_fields", "encryption_configuration", "encryption_configuration"], ["body", "autodetect", "source_format", "source_uris", "compression", "ignore_unknown_values", "schema_fields", "max_bad_records", "skip_leading_rows", "field_delimiter", "quote_character", "allow_quoted_newlines", "allow_jagged_rows", "encoding", "PROJECT_ID", "DATASET_ID", "TABLE_ID", "labels", "encryption_configuration"]], "allow_quoted_newlines": [["allow_quoted_newlines", "False"], ["self", "hook", "create_external_table", "external_project_dataset_table", "external_project_dataset_table", "source_uris", "source_uris", "source_format", "source_format", "autodetect", "autodetect", "compression", "compression", "ignore_unknown_values", "ignore_unknown_values", "max_bad_records", "max_bad_records", "skip_leading_rows", "skip_leading_rows", "field_delimiter", "field_delimiter", "quote_character", "quote_character", "allow_jagged_rows", "allow_jagged_rows", "encoding", "encoding", "allow_quoted_newlines", "allow_quoted_newlines", "labels", "labels", "schema_fields", "schema_fields", "encryption_configuration", "encryption_configuration"], ["body", "autodetect", "source_format", "source_uris", "compression", "ignore_unknown_values", "schema_fields", "max_bad_records", "skip_leading_rows", "field_delimiter", "quote_character", "allow_quoted_newlines", "allow_jagged_rows", "encoding", "PROJECT_ID", "DATASET_ID", "TABLE_ID", "labels", "encryption_configuration"]], "autodetect": [["autodetect", "False"], ["self", "hook", "create_external_table", "external_project_dataset_table", "external_project_dataset_table", "source_uris", "source_uris", "source_format", "source_format", "autodetect", "autodetect", "compression", "compression", "ignore_unknown_values", "ignore_unknown_values", "max_bad_records", "max_bad_records", "skip_leading_rows", "skip_leading_rows", "field_delimiter", "field_delimiter", "quote_character", "quote_character", "allow_jagged_rows", "allow_jagged_rows", "encoding", "encoding", "allow_quoted_newlines", "allow_quoted_newlines", "labels", "labels", "schema_fields", "schema_fields", "encryption_configuration", "encryption_configuration"], ["body", "autodetect", "source_format", "source_uris", "compression", "ignore_unknown_values", "schema_fields", "max_bad_records", "skip_leading_rows", "field_delimiter", "quote_character", "allow_quoted_newlines", "allow_jagged_rows", "encoding", "PROJECT_ID", "DATASET_ID", "TABLE_ID", "labels", "encryption_configuration"]], "body": [["body", "autodetect", "source_format", "source_uris", "compression", "ignore_unknown_values", "schema_fields", "max_bad_records", "skip_leading_rows", "field_delimiter", "quote_character", "allow_quoted_newlines", "allow_jagged_rows", "encoding", "PROJECT_ID", "DATASET_ID", "TABLE_ID", "labels", "encryption_configuration"], ["mock_create", "assert_called_once_with", "table_resource", "body", "project_id", "PROJECT_ID", "location", "None", "exists_ok", "True"]], "compression": [["self", "hook", "create_external_table", "external_project_dataset_table", "external_project_dataset_table", "source_uris", "source_uris", "source_format", "source_format", "autodetect", "autodetect", "compression", "compression", "ignore_unknown_values", "ignore_unknown_values", "max_bad_records", "max_bad_records", "skip_leading_rows", "skip_leading_rows", "field_delimiter", "field_delimiter", "quote_character", "quote_character", "allow_jagged_rows", "allow_jagged_rows", "encoding", "encoding", "allow_quoted_newlines", "allow_quoted_newlines", "labels", "labels", "schema_fields", "schema_fields", "encryption_configuration", "encryption_configuration"], ["body", "autodetect", "source_format", "source_uris", "compression", "ignore_unknown_values", "schema_fields", "max_bad_records", "skip_leading_rows", "field_delimiter", "quote_character", "allow_quoted_newlines", "allow_jagged_rows", "encoding", "PROJECT_ID", "DATASET_ID", "TABLE_ID", "labels", "encryption_configuration"]], "encoding": [["self", "hook", "create_external_table", "external_project_dataset_table", "external_project_dataset_table", "source_uris", "source_uris", "source_format", "source_format", "autodetect", "autodetect", "compression", "compression", "ignore_unknown_values", "ignore_unknown_values", "max_bad_records", "max_bad_records", "skip_leading_rows", "skip_leading_rows", "field_delimiter", "field_delimiter", "quote_character", "quote_character", "allow_jagged_rows", "allow_jagged_rows", "encoding", "encoding", "allow_quoted_newlines", "allow_quoted_newlines", "labels", "labels", "schema_fields", "schema_fields", "encryption_configuration", "encryption_configuration"], ["body", "autodetect", "source_format", "source_uris", "compression", "ignore_unknown_values", "schema_fields", "max_bad_records", "skip_leading_rows", "field_delimiter", "quote_character", "allow_quoted_newlines", "allow_jagged_rows", "encoding", "PROJECT_ID", "DATASET_ID", "TABLE_ID", "labels", "encryption_configuration"]], "encryption_configuration": [["self", "hook", "create_external_table", "external_project_dataset_table", "external_project_dataset_table", "source_uris", "source_uris", "source_format", "source_format", "autodetect", "autodetect", "compression", "compression", "ignore_unknown_values", "ignore_unknown_values", "max_bad_records", "max_bad_records", "skip_leading_rows", "skip_leading_rows", "field_delimiter", "field_delimiter", "quote_character", "quote_character", "allow_jagged_rows", "allow_jagged_rows", "encoding", "encoding", "allow_quoted_newlines", "allow_quoted_newlines", "labels", "labels", "schema_fields", "schema_fields", "encryption_configuration", "encryption_configuration"], ["body", "autodetect", "source_format", "source_uris", "compression", "ignore_unknown_values", "schema_fields", "max_bad_records", "skip_leading_rows", "field_delimiter", "quote_character", "allow_quoted_newlines", "allow_jagged_rows", "encoding", "PROJECT_ID", "DATASET_ID", "TABLE_ID", "labels", "encryption_configuration"]], "external_project_dataset_table": [["external_project_dataset_table", "PROJECT_ID", "DATASET_ID", "TABLE_ID"], ["self", "hook", "create_external_table", "external_project_dataset_table", "external_project_dataset_table", "source_uris", "source_uris", "source_format", "source_format", "autodetect", "autodetect", "compression", "compression", "ignore_unknown_values", "ignore_unknown_values", "max_bad_records", "max_bad_records", "skip_leading_rows", "skip_leading_rows", "field_delimiter", "field_delimiter", "quote_character", "quote_character", "allow_jagged_rows", "allow_jagged_rows", "encoding", "encoding", "allow_quoted_newlines", "allow_quoted_newlines", "labels", "labels", "schema_fields", "schema_fields", "encryption_configuration", "encryption_configuration"]], "field_delimiter": [["self", "hook", "create_external_table", "external_project_dataset_table", "external_project_dataset_table", "source_uris", "source_uris", "source_format", "source_format", "autodetect", "autodetect", "compression", "compression", "ignore_unknown_values", "ignore_unknown_values", "max_bad_records", "max_bad_records", "skip_leading_rows", "skip_leading_rows", "field_delimiter", "field_delimiter", "quote_character", "quote_character", "allow_jagged_rows", "allow_jagged_rows", "encoding", "encoding", "allow_quoted_newlines", "allow_quoted_newlines", "labels", "labels", "schema_fields", "schema_fields", "encryption_configuration", "encryption_configuration"], ["body", "autodetect", "source_format", "source_uris", "compression", "ignore_unknown_values", "schema_fields", "max_bad_records", "skip_leading_rows", "field_delimiter", "quote_character", "allow_quoted_newlines", "allow_jagged_rows", "encoding", "PROJECT_ID", "DATASET_ID", "TABLE_ID", "labels", "encryption_configuration"]], "ignore_unknown_values": [["ignore_unknown_values", "False"], ["self", "hook", "create_external_table", "external_project_dataset_table", "external_project_dataset_table", "source_uris", "source_uris", "source_format", "source_format", "autodetect", "autodetect", "compression", "compression", "ignore_unknown_values", "ignore_unknown_values", "max_bad_records", "max_bad_records", "skip_leading_rows", "skip_leading_rows", "field_delimiter", "field_delimiter", "quote_character", "quote_character", "allow_jagged_rows", "allow_jagged_rows", "encoding", "encoding", "allow_quoted_newlines", "allow_quoted_newlines", "labels", "labels", "schema_fields", "schema_fields", "encryption_configuration", "encryption_configuration"], ["body", "autodetect", "source_format", "source_uris", "compression", "ignore_unknown_values", "schema_fields", "max_bad_records", "skip_leading_rows", "field_delimiter", "quote_character", "allow_quoted_newlines", "allow_jagged_rows", "encoding", "PROJECT_ID", "DATASET_ID", "TABLE_ID", "labels", "encryption_configuration"]], "labels": [["self", "hook", "create_external_table", "external_project_dataset_table", "external_project_dataset_table", "source_uris", "source_uris", "source_format", "source_format", "autodetect", "autodetect", "compression", "compression", "ignore_unknown_values", "ignore_unknown_values", "max_bad_records", "max_bad_records", "skip_leading_rows", "skip_leading_rows", "field_delimiter", "field_delimiter", "quote_character", "quote_character", "allow_jagged_rows", "allow_jagged_rows", "encoding", "encoding", "allow_quoted_newlines", "allow_quoted_newlines", "labels", "labels", "schema_fields", "schema_fields", "encryption_configuration", "encryption_configuration"], ["body", "autodetect", "source_format", "source_uris", "compression", "ignore_unknown_values", "schema_fields", "max_bad_records", "skip_leading_rows", "field_delimiter", "quote_character", "allow_quoted_newlines", "allow_jagged_rows", "encoding", "PROJECT_ID", "DATASET_ID", "TABLE_ID", "labels", "encryption_configuration"]], "max_bad_records": [["self", "hook", "create_external_table", "external_project_dataset_table", "external_project_dataset_table", "source_uris", "source_uris", "source_format", "source_format", "autodetect", "autodetect", "compression", "compression", "ignore_unknown_values", "ignore_unknown_values", "max_bad_records", "max_bad_records", "skip_leading_rows", "skip_leading_rows", "field_delimiter", "field_delimiter", "quote_character", "quote_character", "allow_jagged_rows", "allow_jagged_rows", "encoding", "encoding", "allow_quoted_newlines", "allow_quoted_newlines", "labels", "labels", "schema_fields", "schema_fields", "encryption_configuration", "encryption_configuration"], ["body", "autodetect", "source_format", "source_uris", "compression", "ignore_unknown_values", "schema_fields", "max_bad_records", "skip_leading_rows", "field_delimiter", "quote_character", "allow_quoted_newlines", "allow_jagged_rows", "encoding", "PROJECT_ID", "DATASET_ID", "TABLE_ID", "labels", "encryption_configuration"]], "quote_character": [["quote_character", "None"], ["self", "hook", "create_external_table", "external_project_dataset_table", "external_project_dataset_table", "source_uris", "source_uris", "source_format", "source_format", "autodetect", "autodetect", "compression", "compression", "ignore_unknown_values", "ignore_unknown_values", "max_bad_records", "max_bad_records", "skip_leading_rows", "skip_leading_rows", "field_delimiter", "field_delimiter", "quote_character", "quote_character", "allow_jagged_rows", "allow_jagged_rows", "encoding", "encoding", "allow_quoted_newlines", "allow_quoted_newlines", "labels", "labels", "schema_fields", "schema_fields", "encryption_configuration", "encryption_configuration"], ["body", "autodetect", "source_format", "source_uris", "compression", "ignore_unknown_values", "schema_fields", "max_bad_records", "skip_leading_rows", "field_delimiter", "quote_character", "allow_quoted_newlines", "allow_jagged_rows", "encoding", "PROJECT_ID", "DATASET_ID", "TABLE_ID", "labels", "encryption_configuration"]], "schema_fields": [["schema_fields", "None"], ["self", "hook", "create_external_table", "external_project_dataset_table", "external_project_dataset_table", "source_uris", "source_uris", "source_format", "source_format", "autodetect", "autodetect", "compression", "compression", "ignore_unknown_values", "ignore_unknown_values", "max_bad_records", "max_bad_records", "skip_leading_rows", "skip_leading_rows", "field_delimiter", "field_delimiter", "quote_character", "quote_character", "allow_jagged_rows", "allow_jagged_rows", "encoding", "encoding", "allow_quoted_newlines", "allow_quoted_newlines", "labels", "labels", "schema_fields", "schema_fields", "encryption_configuration", "encryption_configuration"], ["body", "autodetect", "source_format", "source_uris", "compression", "ignore_unknown_values", "schema_fields", "max_bad_records", "skip_leading_rows", "field_delimiter", "quote_character", "allow_quoted_newlines", "allow_jagged_rows", "encoding", "PROJECT_ID", "DATASET_ID", "TABLE_ID", "labels", "encryption_configuration"]], "skip_leading_rows": [["self", "hook", "create_external_table", "external_project_dataset_table", "external_project_dataset_table", "source_uris", "source_uris", "source_format", "source_format", "autodetect", "autodetect", "compression", "compression", "ignore_unknown_values", "ignore_unknown_values", "max_bad_records", "max_bad_records", "skip_leading_rows", "skip_leading_rows", "field_delimiter", "field_delimiter", "quote_character", "quote_character", "allow_jagged_rows", "allow_jagged_rows", "encoding", "encoding", "allow_quoted_newlines", "allow_quoted_newlines", "labels", "labels", "schema_fields", "schema_fields", "encryption_configuration", "encryption_configuration"], ["body", "autodetect", "source_format", "source_uris", "compression", "ignore_unknown_values", "schema_fields", "max_bad_records", "skip_leading_rows", "field_delimiter", "quote_character", "allow_quoted_newlines", "allow_jagged_rows", "encoding", "PROJECT_ID", "DATASET_ID", "TABLE_ID", "labels", "encryption_configuration"]], "source_format": [["self", "hook", "create_external_table", "external_project_dataset_table", "external_project_dataset_table", "source_uris", "source_uris", "source_format", "source_format", "autodetect", "autodetect", "compression", "compression", "ignore_unknown_values", "ignore_unknown_values", "max_bad_records", "max_bad_records", "skip_leading_rows", "skip_leading_rows", "field_delimiter", "field_delimiter", "quote_character", "quote_character", "allow_jagged_rows", "allow_jagged_rows", "encoding", "encoding", "allow_quoted_newlines", "allow_quoted_newlines", "labels", "labels", "schema_fields", "schema_fields", "encryption_configuration", "encryption_configuration"], ["body", "autodetect", "source_format", "source_uris", "compression", "ignore_unknown_values", "schema_fields", "max_bad_records", "skip_leading_rows", "field_delimiter", "quote_character", "allow_quoted_newlines", "allow_jagged_rows", "encoding", "PROJECT_ID", "DATASET_ID", "TABLE_ID", "labels", "encryption_configuration"]], "source_uris": [["self", "hook", "create_external_table", "external_project_dataset_table", "external_project_dataset_table", "source_uris", "source_uris", "source_format", "source_format", "autodetect", "autodetect", "compression", "compression", "ignore_unknown_values", "ignore_unknown_values", "max_bad_records", "max_bad_records", "skip_leading_rows", "skip_leading_rows", "field_delimiter", "field_delimiter", "quote_character", "quote_character", "allow_jagged_rows", "allow_jagged_rows", "encoding", "encoding", "allow_quoted_newlines", "allow_quoted_newlines", "labels", "labels", "schema_fields", "schema_fields", "encryption_configuration", "encryption_configuration"], ["body", "autodetect", "source_format", "source_uris", "compression", "ignore_unknown_values", "schema_fields", "max_bad_records", "skip_leading_rows", "field_delimiter", "quote_character", "allow_quoted_newlines", "allow_jagged_rows", "encoding", "PROJECT_ID", "DATASET_ID", "TABLE_ID", "labels", "encryption_configuration"]]}, "name": "test_create_external_table_with_kms", "params": {"mock_create": "", "self": ""}, "params_descr": {"mock_create": "", "self": ""}, "params_occur": {"mock_create": [["mock_create", "assert_called_once_with", "table_resource", "body", "project_id", "PROJECT_ID", "location", "None", "exists_ok", "True"]], "self": [["self", "hook", "create_external_table", "external_project_dataset_table", "external_project_dataset_table", "source_uris", "source_uris", "source_format", "source_format", "autodetect", "autodetect", "compression", "compression", "ignore_unknown_values", "ignore_unknown_values", "max_bad_records", "max_bad_records", "skip_leading_rows", "skip_leading_rows", "field_delimiter", "field_delimiter", "quote_character", "quote_character", "allow_jagged_rows", "allow_jagged_rows", "encoding", "encoding", "allow_quoted_newlines", "allow_quoted_newlines", "labels", "labels", "schema_fields", "schema_fields", "encryption_configuration", "encryption_configuration"]]}, "params_p": {"args": [], "kwargs": [], "mock_create": [], "self": []}, "q_name": "TestBigQueryWithKMS.test_create_external_table_with_kms", "ret_exprs": [], "ret_type": "", "variables": {"allow_jagged_rows": "", "allow_quoted_newlines": "", "autodetect": "", "body": "", "compression": "", "encoding": "", "encryption_configuration": "", "external_project_dataset_table": "", "field_delimiter": "", "ignore_unknown_values": "", "labels": "", "max_bad_records": "", "quote_character": "", "schema_fields": "", "skip_leading_rows": "", "source_format": "", "source_uris": ""}, "variables_p": {"allow_jagged_rows": [["dict", 0.12922982096762065], ["deque", 0.09073727075439271]], "allow_quoted_newlines": [["Optional[str]", 0.11697170506476562], ["List[str]", 0.11290237401996739], ["float", 0.09912333007840493], ["bool", 0.08905162808750255], ["str", 0.08453448064480905], ["Union[Literal, Literal]", 0.08382118086475498]], "autodetect": [["str", 0.20649606446071184], ["List[str]", 0.179804902063382], ["Optional[str]", 0.11438377274083944], ["Dict[str, Any]", 0.11438377274083944], ["int", 0.10206987818498627], ["Set[str]", 0.09431212640321109]], "body": [["list", 0.30846706631748516], ["int", 0.10676994150954805], ["Tuple[Any, Any]", 0.1014596873309861], ["str", 0.09906633453941269], ["Dict[str, Type[Any]]", 0.09893234826765995], ["List[Dict[str, Any]]", 0.08974534049814469]], "compression": [["str", 0.1927313396061679], ["google.protobuf.descriptor.Descriptor", 0.18378257146960875], ["dict", 0.11054855096438569], ["int", 0.10048701906232925], ["Dict[Type[Any], Type[Any]]", 0.08737411764750065]], "encoding": [["str", 0.1927313396061679], ["google.protobuf.descriptor.Descriptor", 0.18378257146960875], ["dict", 0.11054855096438569], ["int", 0.10048701906232925], ["Dict[Type[Any], Type[Any]]", 0.08737411764750065]], "encryption_configuration": [["str", 0.1927313396061679], ["google.protobuf.descriptor.Descriptor", 0.18378257146960875], ["dict", 0.11054855096438569], ["int", 0.10048701906232925], ["Dict[Type[Any], Type[Any]]", 0.08737411764750065]], "external_project_dataset_table": [["int", 0.19136550320838314], ["Dict[str, str]", 0.09918098790465615], ["List[int]", 0.0899904640692439]], "field_delimiter": [["List[str]", 0.23032162209888646], ["str", 0.10131886045736245]], "ignore_unknown_values": [["int", 0.37664081818077705], ["List[List[Any]]", 0.12641507946246652]], "labels": [["Set[str]", 0.316369906266429], ["Type[Dict[Any, Any]]", 0.09678102473155349], ["Dict[Type[Any], str]", 0.09503618040327284], ["str", 0.09006224028550382], ["Dict[str, List[Any]]", 0.08160501557895306], ["set", 0.07933106424746321], ["Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]", 0.07685408495370635]], "max_bad_records": [["str", 0.1927313396061679], ["google.protobuf.descriptor.Descriptor", 0.18378257146960875], ["dict", 0.11054855096438569], ["int", 0.10048701906232925], ["Dict[Type[Any], Type[Any]]", 0.08737411764750065]], "quote_character": [], "schema_fields": [["Tuple[int, int, int]", 0.11021310824685729], ["Dict[Type[Any], str]", 0.10871621453534619], ["dict", 0.10585997705375018], ["Tuple[str, str]", 0.10435127600371817], ["Dict[str, List[str]]", 0.09626115008284099]], "skip_leading_rows": [["Set[str]", 0.215845685133138], ["int", 0.10911609346920252], ["Pattern[str]", 0.10760239367813529], ["List[str]", 0.1047594081024267], ["Type[str]", 0.09730243400691865], ["Tuple[Any, Any, Any]", 0.09538499544159423], ["Optional[Match[str]]", 0.09320183425196524], ["Dict[int, str]", 0.08839357795830971], ["str", 0.08839357795830971]], "source_format": [["str", 0.29812116443946174], ["Pattern[str]", 0.2064270405952976], ["int", 0.10441951622616001], ["Dict[str, str]", 0.10246746420921884], ["List[str]", 0.09711341543330283], ["Dict[str, Any]", 0.0927908852963643]], "source_uris": [["str", 0.5970355730002556], ["List[str]", 0.11258904137082713], ["dict", 0.09395779848404645], ["Dict[str, Set[str]]", 0.09306991954010874]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1935, 4], [1983, 9]], "fn_var_ln": {"body": [[1953, 8], [1953, 12]], "description_patched": [[1936, 8], [1936, 27]], "expiration_time_patched": [[1937, 8], [1937, 31]], "fields": [[1969, 8], [1969, 14]], "friendly_name_patched": [[1938, 8], [1938, 29]], "labels_patched": [[1939, 8], [1939, 22]], "require_partition_filter_patched": [[1947, 8], [1947, 40]], "schema_patched": [[1940, 8], [1940, 22]], "time_partitioning_patched": [[1946, 8], [1946, 33]], "view_patched": [[1948, 8], [1948, 20]]}, "fn_var_occur": {"body": [["body", "PROJECT_ID", "DATASET_ID", "TABLE_ID", "description_patched", "expiration_time_patched", "friendly_name_patched", "labels_patched", "schema_patched", "time_partitioning_patched", "view_patched", "require_partition_filter_patched"], ["fields", "list", "body", "keys"], ["self", "hook", "update_table", "table_resource", "body", "fields", "fields", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "project_id", "PROJECT_ID"], ["mock_table", "from_api_repr", "assert_called_once_with", "body"]], "description_patched": [["body", "PROJECT_ID", "DATASET_ID", "TABLE_ID", "description_patched", "expiration_time_patched", "friendly_name_patched", "labels_patched", "schema_patched", "time_partitioning_patched", "view_patched", "require_partition_filter_patched"]], "expiration_time_patched": [["body", "PROJECT_ID", "DATASET_ID", "TABLE_ID", "description_patched", "expiration_time_patched", "friendly_name_patched", "labels_patched", "schema_patched", "time_partitioning_patched", "view_patched", "require_partition_filter_patched"]], "fields": [["fields", "list", "body", "keys"], ["self", "hook", "update_table", "table_resource", "body", "fields", "fields", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "project_id", "PROJECT_ID"], ["mock_client", "return_value", "update_table", "assert_called_once_with", "table", "mock_table", "from_api_repr", "return_value", "fields", "fields"]], "friendly_name_patched": [["body", "PROJECT_ID", "DATASET_ID", "TABLE_ID", "description_patched", "expiration_time_patched", "friendly_name_patched", "labels_patched", "schema_patched", "time_partitioning_patched", "view_patched", "require_partition_filter_patched"]], "labels_patched": [["body", "PROJECT_ID", "DATASET_ID", "TABLE_ID", "description_patched", "expiration_time_patched", "friendly_name_patched", "labels_patched", "schema_patched", "time_partitioning_patched", "view_patched", "require_partition_filter_patched"]], "require_partition_filter_patched": [["require_partition_filter_patched", "True"], ["body", "PROJECT_ID", "DATASET_ID", "TABLE_ID", "description_patched", "expiration_time_patched", "friendly_name_patched", "labels_patched", "schema_patched", "time_partitioning_patched", "view_patched", "require_partition_filter_patched"]], "schema_patched": [["body", "PROJECT_ID", "DATASET_ID", "TABLE_ID", "description_patched", "expiration_time_patched", "friendly_name_patched", "labels_patched", "schema_patched", "time_partitioning_patched", "view_patched", "require_partition_filter_patched"]], "time_partitioning_patched": [["body", "PROJECT_ID", "DATASET_ID", "TABLE_ID", "description_patched", "expiration_time_patched", "friendly_name_patched", "labels_patched", "schema_patched", "time_partitioning_patched", "view_patched", "require_partition_filter_patched"]], "view_patched": [["view_patched", "False"], ["body", "PROJECT_ID", "DATASET_ID", "TABLE_ID", "description_patched", "expiration_time_patched", "friendly_name_patched", "labels_patched", "schema_patched", "time_partitioning_patched", "view_patched", "require_partition_filter_patched"]]}, "name": "test_update_table", "params": {"mock_client": "", "mock_table": "", "self": ""}, "params_descr": {"mock_client": "", "mock_table": "", "self": ""}, "params_occur": {"mock_client": [["mock_client", "return_value", "update_table", "assert_called_once_with", "table", "mock_table", "from_api_repr", "return_value", "fields", "fields"]], "mock_table": [["mock_table", "from_api_repr", "assert_called_once_with", "body"], ["mock_client", "return_value", "update_table", "assert_called_once_with", "table", "mock_table", "from_api_repr", "return_value", "fields", "fields"]], "self": [["self", "hook", "update_table", "table_resource", "body", "fields", "fields", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "project_id", "PROJECT_ID"]]}, "params_p": {"args": [], "kwargs": [], "mock_client": [], "mock_table": [["mock.Mock", 0.11204541384819688], ["mock.MagicMock", 0.09389683012174156]], "self": []}, "q_name": "TestBigQueryWithKMS.test_update_table", "ret_exprs": [], "ret_type": "", "variables": {"body": "", "description_patched": "", "expiration_time_patched": "", "fields": "", "friendly_name_patched": "", "labels_patched": "", "require_partition_filter_patched": "", "schema_patched": "", "time_partitioning_patched": "", "view_patched": ""}, "variables_p": {"body": [["str", 0.39027319590301685], ["Optional[str]", 0.12149389331572064], ["datetime.timedelta", 0.10025350915647961], ["int", 0.0968249267861426], ["Final", 0.08847433261407946]], "description_patched": [["str", 0.9068804716825671], ["int", 0.09311952831743286]], "expiration_time_patched": [["int", 0.5806255254799904], ["datetime.timedelta", 0.22428235411463873], ["List[None]", 0.19509212040537105]], "fields": [["Type[str]", 0.19200633156872904], ["dict", 0.11613235915855429], ["list", 0.0961723774554389], ["List[str]", 0.0951701348799077]], "friendly_name_patched": [["str", 0.9999999999999999]], "labels_patched": [["str", 0.19123180639059767], ["List[Dict[str, str]]", 0.13202823737790806], ["Final", 0.12721130260952915], ["datetime.timedelta", 0.0930401120086499], ["Set[str]", 0.09095075614292632], ["Tuple[str, str]", 0.08572779066235854], ["Dict[str, str]", 0.08338202243094035]], "require_partition_filter_patched": [["str", 0.5391779985538643], ["Dict[int, Optional[int]]", 0.278708085714693], ["int", 0.09581268647281715], ["List[google.cloud.bigquery.ScalarQueryParameter]", 0.08630122925862546]], "schema_patched": [["str", 0.30287284951379867], ["list", 0.22546840015637604], ["int", 0.18285678194231786], ["List[Tuple[str, str]]", 0.09061540602705777]], "time_partitioning_patched": [["int", 0.5899406855552397], ["str", 0.30814199083489846], ["Tuple[int, int, int]", 0.1019173236098619]], "view_patched": [["str", 0.5710219841925526], ["int", 0.18599042213170816]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1986, 4], [1992, 9]], "fn_var_ln": {"_": [[1989, 8], [1989, 9]], "encryption_configuration": [[1987, 8], [1987, 32]], "kwargs": [[1989, 11], [1989, 17]]}, "fn_var_occur": {"_": [["_", "kwargs", "mock_insert", "call_args"]], "encryption_configuration": [["self", "hook", "run_query", "sql", "encryption_configuration", "encryption_configuration"], ["kwargs", "encryption_configuration"]], "kwargs": [["_", "kwargs", "mock_insert", "call_args"], ["kwargs", "encryption_configuration"]]}, "name": "test_run_query_with_kms", "params": {"mock_insert": "", "self": ""}, "params_descr": {"mock_insert": "", "self": ""}, "params_occur": {"mock_insert": [["_", "kwargs", "mock_insert", "call_args"]], "self": [["self", "hook", "run_query", "sql", "encryption_configuration", "encryption_configuration"]]}, "params_p": {"args": [], "kwargs": [], "mock_insert": [["mock.MagicMock", 0.08664261522210785], ["str", 0.06434990030782615]], "self": []}, "q_name": "TestBigQueryWithKMS.test_run_query_with_kms", "ret_exprs": [], "ret_type": "", "variables": {"_": "", "encryption_configuration": "", "kwargs": ""}, "variables_p": {"_": [["int", 0.3803869320637631], ["float", 0.15802746558517075], ["Tuple[str, str, str]", 0.09454442272977188], ["str", 0.09247700941394743]], "encryption_configuration": [["int", 0.6532511015444153], ["Pattern[str]", 0.11715866499979198], ["list", 0.09078702898236549]], "kwargs": [["Union[dict, Dict[str, int]]", 0.20350107289576594]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1995, 4], [2005, 9]], "fn_var_ln": {"_": [[2002, 8], [2002, 9]], "encryption_configuration": [[1996, 8], [1996, 32]], "kwargs": [[2002, 11], [2002, 17]]}, "fn_var_occur": {"_": [["_", "kwargs", "mock_insert", "call_args"]], "encryption_configuration": [["self", "hook", "run_copy", "source_project_dataset_tables", "destination_project_dataset_table", "encryption_configuration", "encryption_configuration"], ["kwargs", "encryption_configuration"]], "kwargs": [["_", "kwargs", "mock_insert", "call_args"], ["kwargs", "encryption_configuration"]]}, "name": "test_run_copy_with_kms", "params": {"mock_insert": "", "self": ""}, "params_descr": {"mock_insert": "", "self": ""}, "params_occur": {"mock_insert": [["_", "kwargs", "mock_insert", "call_args"]], "self": [["self", "hook", "run_copy", "source_project_dataset_tables", "destination_project_dataset_table", "encryption_configuration", "encryption_configuration"]]}, "params_p": {"args": [], "kwargs": [], "mock_insert": [["mock.MagicMock", 0.08466323563236164]], "self": []}, "q_name": "TestBigQueryWithKMS.test_run_copy_with_kms", "ret_exprs": [], "ret_type": "", "variables": {"_": "", "encryption_configuration": "", "kwargs": ""}, "variables_p": {"_": [["int", 0.3803869320637631], ["float", 0.15802746558517075], ["Tuple[str, str, str]", 0.09454442272977188], ["str", 0.09247700941394743]], "encryption_configuration": [["str", 0.21500629070377994], ["dict", 0.12341079803022657], ["Dict[str, Dict[str, Any]]", 0.12078756850225755], ["google.protobuf.descriptor.Descriptor", 0.09452188596912331]], "kwargs": [["Union[dict, Dict[str, int]]", 0.20350107289576594]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[2008, 4], [2019, 9]], "fn_var_ln": {"_": [[2016, 8], [2016, 9]], "encryption_configuration": [[2009, 8], [2009, 32]], "kwargs": [[2016, 11], [2016, 17]]}, "fn_var_occur": {"_": [["_", "kwargs", "mock_insert", "call_args"]], "encryption_configuration": [["self", "hook", "run_load", "destination_project_dataset_table", "source_uris", "autodetect", "True", "encryption_configuration", "encryption_configuration"], ["kwargs", "encryption_configuration"]], "kwargs": [["_", "kwargs", "mock_insert", "call_args"], ["kwargs", "encryption_configuration"]]}, "name": "test_run_load_with_kms", "params": {"mock_insert": "", "self": ""}, "params_descr": {"mock_insert": "", "self": ""}, "params_occur": {"mock_insert": [["_", "kwargs", "mock_insert", "call_args"]], "self": [["self", "hook", "run_load", "destination_project_dataset_table", "source_uris", "autodetect", "True", "encryption_configuration", "encryption_configuration"]]}, "params_p": {"args": [], "kwargs": [], "mock_insert": [["mock.MagicMock", 0.08754267114979856], ["str", 0.06313182801123711]], "self": []}, "q_name": "TestBigQueryWithKMS.test_run_load_with_kms", "ret_exprs": [], "ret_type": "", "variables": {"_": "", "encryption_configuration": "", "kwargs": ""}, "variables_p": {"_": [["int", 0.3803869320637631], ["float", 0.15802746558517075], ["Tuple[str, str, str]", 0.09454442272977188], ["str", 0.09247700941394743]], "encryption_configuration": [["int", 0.3102802722511203], ["str", 0.1024213855363506], ["dict", 0.10134054124620848], ["float", 0.08897601819118672]], "kwargs": [["Union[dict, Dict[str, int]]", 0.20350107289576594]]}}], "name": "TestBigQueryWithKMS", "q_name": "TestBigQueryWithKMS", "variables": {}, "variables_p": {}}, {"cls_lc": [[2022, 0], [2068, 66]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[2053, 4], [2068, 66]], "fn_var_ln": {"_": [[2064, 12], [2064, 13]], "args": [[2054, 8], [2054, 12]], "bq_cursor": [[2060, 8], [2060, 17]], "func": [[2061, 8], [2061, 12]], "kwargs": [[2054, 14], [2054, 20]], "message_pattern": [[2056, 8], [2056, 23]], "message_regex": [[2057, 8], [2057, 21]], "mocked_func": [[2059, 8], [2059, 19]], "new_path": [[2055, 8], [2055, 16]]}, "fn_var_occur": {"_": [["_", "func", "args", "kwargs"]], "args": [["args", "kwargs"], ["_", "func", "args", "kwargs"], ["mocked_func", "assert_called_once_with", "args", "kwargs"]], "bq_cursor": [["bq_cursor", "BigQueryCursor", "mock", "MagicMock", "PROJECT_ID", "mock_bq_hook"], ["func", "getattr", "bq_cursor", "func_name"]], "func": [["func", "getattr", "bq_cursor", "func_name"], ["_", "func", "args", "kwargs"], ["re", "search", "new_path", "func", "__doc__"]], "kwargs": [["args", "kwargs"], ["_", "func", "args", "kwargs"], ["mocked_func", "assert_called_once_with", "args", "kwargs"]], "message_pattern": [["message_pattern", "new_path"], ["message_regex", "re", "compile", "message_pattern", "re", "MULTILINE"]], "message_regex": [["message_regex", "re", "compile", "message_pattern", "re", "MULTILINE"], ["pytest", "warns", "AirflowProviderDeprecationWarning", "match", "message_regex"]], "mocked_func": [["mocked_func", "getattr", "mock_bq_hook", "func_name"], ["mocked_func", "assert_called_once_with", "args", "kwargs"]], "new_path": [["new_path", "re", "escape", "func_name"], ["message_pattern", "new_path"], ["re", "search", "new_path", "func", "__doc__"]]}, "name": "test_deprecation_warning", "params": {"func_name": "", "mock_bq_hook": "", "self": ""}, "params_descr": {"func_name": "", "mock_bq_hook": "", "self": ""}, "params_occur": {"func_name": [["new_path", "re", "escape", "func_name"], ["mocked_func", "getattr", "mock_bq_hook", "func_name"], ["func", "getattr", "bq_cursor", "func_name"]], "mock_bq_hook": [["mocked_func", "getattr", "mock_bq_hook", "func_name"], ["bq_cursor", "BigQueryCursor", "mock", "MagicMock", "PROJECT_ID", "mock_bq_hook"]], "self": []}, "params_p": {"args": [], "func_name": [["str", 0.11823107837799976], ["Optional[str]", 0.09905171889233988]], "kwargs": [], "mock_bq_hook": [], "self": []}, "q_name": "TestBigQueryBaseCursorMethodsDeprecationWarning.test_deprecation_warning", "ret_exprs": [], "ret_type": "", "variables": {"_": "", "args": "", "bq_cursor": "", "func": "", "kwargs": "", "message_pattern": "", "message_regex": "", "mocked_func": "", "new_path": ""}, "variables_p": {"_": [["list", 0.3310934377467775], ["tuple", 0.2194949584514791], ["int", 0.15184014006220659], ["bool", 0.1093277982306326], ["str", 0.09600562604757035], ["List[None]", 0.09223803946133391]], "args": [["Dict[Any, Tuple[str, Any]]", 0.08610660949022092]], "bq_cursor": [], "func": [["str", 0.8298400642789859], ["List[str]", 0.09719458661685695]], "kwargs": [["str", 0.21913892899324328], ["List[str]", 0.09672721073118418], ["dict", 0.09575091529480229], ["Dict[str, Any]", 0.09435273118316978], ["list", 0.09143796838732522]], "message_pattern": [["str", 0.8505709384116541], ["Tuple[str, str, str]", 0.14942906158834604]], "message_regex": [["str", 0.9006679215224741]], "mocked_func": [["str", 0.49631086040053307], ["Dict[str, Union[Any, Any]]", 0.2969654154145581]], "new_path": [["List[str]", 0.5052661274462068], ["str", 0.39939478991391164], ["list", 0.09533908263988157]]}}], "name": "TestBigQueryBaseCursorMethodsDeprecationWarning", "q_name": "TestBigQueryBaseCursorMethodsDeprecationWarning", "variables": {}, "variables_p": {}}, {"cls_lc": [[2071, 0], [2122, 69]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[2073, 4], [2083, 96]], "fn_var_ln": {"_": [[2082, 8], [2082, 9]], "kwargs": [[2082, 11], [2082, 17]], "labels": [[2074, 8], [2074, 14]]}, "fn_var_occur": {"_": [["_", "kwargs", "mock_insert", "call_args"]], "kwargs": [["_", "kwargs", "mock_insert", "call_args"], ["kwargs", "labels"]], "labels": [["self", "hook", "run_load", "destination_project_dataset_table", "schema_fields", "source_uris", "labels", "labels"], ["kwargs", "labels"]]}, "name": "test_run_load_labels", "params": {"mock_insert": "", "self": ""}, "params_descr": {"mock_insert": "", "self": ""}, "params_occur": {"mock_insert": [["_", "kwargs", "mock_insert", "call_args"]], "self": [["self", "hook", "run_load", "destination_project_dataset_table", "schema_fields", "source_uris", "labels", "labels"]]}, "params_p": {"args": [], "kwargs": [], "mock_insert": [["mock.MagicMock", 0.08796458503092904], ["str", 0.06612342096075954]], "self": []}, "q_name": "TestBigQueryWithLabelsAndDescription.test_run_load_labels", "ret_exprs": [], "ret_type": "", "variables": {"_": "", "kwargs": "", "labels": ""}, "variables_p": {"_": [["int", 0.3803869320637631], ["float", 0.15802746558517075], ["Tuple[str, str, str]", 0.09454442272977188], ["str", 0.09247700941394743]], "kwargs": [["Union[dict, Dict[str, int]]", 0.20350107289576594]], "labels": [["dict", 0.21213599624285612], ["str", 0.1884092723842285], ["bytes", 0.10315455835752552], ["Tuple[int]", 0.0918813624548628]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[2086, 4], [2096, 106]], "fn_var_ln": {"_": [[2095, 8], [2095, 9]], "description": [[2087, 8], [2087, 19]], "kwargs": [[2095, 11], [2095, 17]]}, "fn_var_occur": {"_": [["_", "kwargs", "mock_insert", "call_args"]], "description": [["self", "hook", "run_load", "destination_project_dataset_table", "schema_fields", "source_uris", "description", "description"], ["kwargs", "description"]], "kwargs": [["_", "kwargs", "mock_insert", "call_args"], ["kwargs", "description"]]}, "name": "test_run_load_description", "params": {"mock_insert": "", "self": ""}, "params_descr": {"mock_insert": "", "self": ""}, "params_occur": {"mock_insert": [["_", "kwargs", "mock_insert", "call_args"]], "self": [["self", "hook", "run_load", "destination_project_dataset_table", "schema_fields", "source_uris", "description", "description"]]}, "params_p": {"args": [], "kwargs": [], "mock_insert": [], "self": []}, "q_name": "TestBigQueryWithLabelsAndDescription.test_run_load_description", "ret_exprs": [], "ret_type": "", "variables": {"_": "", "description": "", "kwargs": ""}, "variables_p": {"_": [["int", 0.3803869320637631], ["float", 0.15802746558517075], ["Tuple[str, str, str]", 0.09454442272977188], ["str", 0.09247700941394743]], "description": [["str", 0.6199982919471598], ["int", 0.2949815653580126], ["Pattern[Any]", 0.08502014269482751]], "kwargs": [["Union[dict, Dict[str, int]]", 0.20350107289576594]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[2099, 4], [2109, 59]], "fn_var_ln": {"_": [[2108, 8], [2108, 9]], "kwargs": [[2108, 11], [2108, 17]], "labels": [[2100, 8], [2100, 14]]}, "fn_var_occur": {"_": [["_", "kwargs", "mock_create", "call_args"]], "kwargs": [["_", "kwargs", "mock_create", "call_args"], ["kwargs", "labels"]], "labels": [["self", "hook", "create_external_table", "external_project_dataset_table", "schema_fields", "source_uris", "labels", "labels"], ["kwargs", "labels"]]}, "name": "test_create_external_table_labels", "params": {"mock_create": "", "self": ""}, "params_descr": {"mock_create": "", "self": ""}, "params_occur": {"mock_create": [["_", "kwargs", "mock_create", "call_args"]], "self": [["self", "hook", "create_external_table", "external_project_dataset_table", "schema_fields", "source_uris", "labels", "labels"]]}, "params_p": {"args": [], "kwargs": [], "mock_create": [["mock.MagicMock", 0.0905329360668442]], "self": []}, "q_name": "TestBigQueryWithLabelsAndDescription.test_create_external_table_labels", "ret_exprs": [], "ret_type": "", "variables": {"_": "", "kwargs": "", "labels": ""}, "variables_p": {"_": [["int", 0.3803869320637631], ["float", 0.15802746558517075], ["Tuple[str, str, str]", 0.09454442272977188], ["str", 0.09247700941394743]], "kwargs": [["Union[dict, Dict[str, int]]", 0.20350107289576594]], "labels": [["Set[str]", 0.22965718949058295], ["str", 0.1903548384772197], ["Dict[Type[Any], str]", 0.09458012900471695], ["set", 0.09359241479447081], ["dict", 0.09131755465742368]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[2112, 4], [2122, 69]], "fn_var_ln": {"_": [[2121, 8], [2121, 9]], "description": [[2113, 8], [2113, 19]], "kwargs": [[2121, 11], [2121, 17]]}, "fn_var_occur": {"_": [["_", "kwargs", "mock_create", "call_args"]], "description": [["self", "hook", "create_external_table", "external_project_dataset_table", "schema_fields", "source_uris", "description", "description"], ["kwargs", "description"]], "kwargs": [["_", "kwargs", "mock_create", "call_args"], ["kwargs", "description"]]}, "name": "test_create_external_table_description", "params": {"mock_create": "", "self": ""}, "params_descr": {"mock_create": "", "self": ""}, "params_occur": {"mock_create": [["_", "kwargs", "mock_create", "call_args"]], "self": [["self", "hook", "create_external_table", "external_project_dataset_table", "schema_fields", "source_uris", "description", "description"]]}, "params_p": {"args": [], "kwargs": [], "mock_create": [["mock.MagicMock", 0.09020944350670214]], "self": []}, "q_name": "TestBigQueryWithLabelsAndDescription.test_create_external_table_description", "ret_exprs": [], "ret_type": "", "variables": {"_": "", "description": "", "kwargs": ""}, "variables_p": {"_": [["int", 0.3803869320637631], ["float", 0.15802746558517075], ["Tuple[str, str, str]", 0.09454442272977188], ["str", 0.09247700941394743]], "description": [["str", 0.48342598001980164], ["Dict[str, str]", 0.13321388907403395]], "kwargs": [["Union[dict, Dict[str, int]]", 0.20350107289576594]]}}], "name": "TestBigQueryWithLabelsAndDescription", "q_name": "TestBigQueryWithLabelsAndDescription", "variables": {}, "variables_p": {}}, {"cls_lc": [[2127, 8], [2129, 46]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[2128, 12], [2129, 46]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "get_credentials_and_project_id", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "_BigQueryBaseAsyncTestClass.setup_method.<locals>.MockedBigQueryAsyncHook.get_credentials_and_project_id", "ret_exprs": ["return CREDENTIALS, PROJECT_ID"], "ret_type": "", "ret_type_p": [["str", 0.8034951363272067], ["int", 0.09184800755589267]], "variables": {}, "variables_p": {}}], "name": "MockedBigQueryAsyncHook", "q_name": "_BigQueryBaseAsyncTestClass.setup_method.<locals>.MockedBigQueryAsyncHook", "variables": {}, "variables_p": {}}, {"cls_lc": [[2125, 0], [2131, 45]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[2126, 4], [2131, 45]], "fn_var_ln": {"hook": [[2131, 8], [2131, 17]]}, "fn_var_occur": {"hook": [["self", "hook", "MockedBigQueryAsyncHook"]]}, "name": "setup_method", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "hook", "MockedBigQueryAsyncHook"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "_BigQueryBaseAsyncTestClass.setup_method", "ret_exprs": [], "ret_type": "None", "variables": {"hook": ""}, "variables_p": {"hook": [["int", 0.6524554245688015], ["str", 0.17513485560729566], ["list", 0.1724097198239029]]}}], "name": "_BigQueryBaseAsyncTestClass", "q_name": "_BigQueryBaseAsyncTestClass", "variables": {}, "variables_p": {}}, {"cls_lc": [[2134, 0], [2377, 64]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[2137, 4], [2140, 38]], "fn_var_ln": {"hook": [[2138, 8], [2138, 12]], "result": [[2139, 8], [2139, 14]]}, "fn_var_occur": {"hook": [["hook", "BigQueryAsyncHook"], ["result", "hook", "get_job_instance", "project_id", "PROJECT_ID", "job_id", "JOB_ID", "session", "mock_session"]], "result": [["result", "hook", "get_job_instance", "project_id", "PROJECT_ID", "job_id", "JOB_ID", "session", "mock_session"], ["isinstance", "result", "Job"]]}, "name": "test_get_job_instance", "params": {"mock_session": "", "self": ""}, "params_descr": {"mock_session": "", "self": ""}, "params_occur": {"mock_session": [["result", "hook", "get_job_instance", "project_id", "PROJECT_ID", "job_id", "JOB_ID", "session", "mock_session"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_session": [["str", 0.11238640137983073]], "self": []}, "q_name": "TestBigQueryAsyncHookMethods.test_get_job_instance", "ret_exprs": [], "ret_type": "", "variables": {"hook": "", "result": ""}, "variables_p": {"hook": [["Dict[str, Union[float, str]]", 0.1893939988106201], ["list", 0.18569243921396744], ["str", 0.11862705267806221], ["int", 0.11862705267806221]], "result": [["str", 0.19300775788352345], ["Optional[str]", 0.108703421806705], ["Dict[str, Any]", 0.09624381097906502], ["list", 0.09190397081974334], ["Dict[str, str]", 0.09185943882762053]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[2144, 4], [2151, 31]], "fn_var_ln": {"hook": [[2145, 8], [2145, 12]], "mock_job_client": [[2146, 8], [2146, 23]], "resp": [[2150, 8], [2150, 12]], "response": [[2148, 8], [2148, 16]], "return_value": [[2147, 8], [2147, 38]]}, "fn_var_occur": {"hook": [["hook", "BigQueryAsyncHook"], ["resp", "hook", "get_job_status", "job_id", "JOB_ID", "project_id", "PROJECT_ID"]], "mock_job_client": [["mock_job_client", "AsyncMock", "Job"], ["mock_job_instance", "return_value", "mock_job_client"]], "resp": [["resp", "hook", "get_job_status", "job_id", "JOB_ID", "project_id", "PROJECT_ID"], ["resp", "response"]], "response": [["mock_job_instance", "return_value", "result", "return_value", "response"], ["resp", "response"]], "return_value": [["mock_job_instance", "return_value", "mock_job_client"], ["mock_job_instance", "return_value", "result", "return_value", "response"]]}, "name": "test_get_job_status_success", "params": {"mock_job_instance": "", "self": ""}, "params_descr": {"mock_job_instance": "", "self": ""}, "params_occur": {"mock_job_instance": [["mock_job_instance", "return_value", "mock_job_client"], ["mock_job_instance", "return_value", "result", "return_value", "response"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_job_instance": [], "self": []}, "q_name": "TestBigQueryAsyncHookMethods.test_get_job_status_success", "ret_exprs": [], "ret_type": "", "variables": {"hook": "", "mock_job_client": "", "resp": "", "response": "", "return_value": ""}, "variables_p": {"hook": [["Dict[str, str]", 0.3047019915999928], ["Pattern[str]", 0.10403460645252266], ["int", 0.10109907322061665], ["Dict[str, Literal]", 0.0989167558688242], ["list", 0.09838238402983651], ["str", 0.0963982151047665], ["Dict[str, List[str]]", 0.09575959950192046]], "mock_job_client": [], "resp": [["str", 0.39694435562469926], ["List[str]", 0.10409964526698819], ["List[List[int]]", 0.10103274160081198], ["Dict[str, str]", 0.09734919352555638], ["Dict[str, Optional[int]]", 0.09585472122739425]], "response": [["Dict[str, Union[Any, Any]]", 0.18038153122958314], ["datetime.datetime", 0.11909717340097616], ["rotkehlchen.tests.utils.mock.MockResponse", 0.11447520735395586], ["str", 0.09621583841788814], ["Dict[str, Union[None, Any, Any]]", 0.07246829594064923]], "return_value": [["str", 0.4438848856964173], ["int", 0.08883322933582435]]}}, {"docstring": {"func": "Assets that the BigQueryAsyncHook returns a pending response when OSError is raised", "long_descr": null, "ret": null}, "fn_lc": [[2155, 4], [2160, 38]], "fn_var_ln": {"hook": [[2158, 8], [2158, 12]], "job_status": [[2159, 8], [2159, 18]]}, "fn_var_occur": {"hook": [["hook", "BigQueryAsyncHook"], ["job_status", "hook", "get_job_status", "job_id", "JOB_ID", "project_id", "PROJECT_ID"]], "job_status": [["job_status", "hook", "get_job_status", "job_id", "JOB_ID", "project_id", "PROJECT_ID"]]}, "name": "test_get_job_status_oserror", "params": {"mock_job_instance": "", "self": ""}, "params_descr": {"mock_job_instance": "", "self": ""}, "params_occur": {"mock_job_instance": [["mock_job_instance", "return_value", "result", "side_effect", "OSError"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_job_instance": [["mock.MagicMock", 0.053128870235177615]], "self": []}, "q_name": "TestBigQueryAsyncHookMethods.test_get_job_status_oserror", "ret_exprs": [], "ret_type": "", "variables": {"hook": "", "job_status": ""}, "variables_p": {"hook": [["str", 0.5001473851379679], ["int", 0.19719959148446553], ["list", 0.10934312881638042], ["Optional[str]", 0.10044346906799638], ["dict", 0.09286642549318962]], "job_status": [["str", 0.3541365672223052], ["Dict[int, str]", 0.11062081070911707]]}}, {"docstring": {"func": "Assets that the logging is done correctly when BigQueryAsyncHook raises Exception", "long_descr": null, "ret": null}, "fn_lc": [[2164, 4], [2169, 71]], "fn_var_ln": {"hook": [[2167, 8], [2167, 12]]}, "fn_var_occur": {"hook": [["hook", "BigQueryAsyncHook"], ["hook", "get_job_status", "job_id", "JOB_ID", "project_id", "PROJECT_ID"]]}, "name": "test_get_job_status_exception", "params": {"caplog": "", "mock_job_instance": "", "self": ""}, "params_descr": {"caplog": "", "mock_job_instance": "", "self": ""}, "params_occur": {"caplog": [["caplog", "text"]], "mock_job_instance": [["mock_job_instance", "return_value", "result", "side_effect", "Exception"]], "self": []}, "params_p": {"args": [], "caplog": [], "kwargs": [], "mock_job_instance": [], "self": []}, "q_name": "TestBigQueryAsyncHookMethods.test_get_job_status_exception", "ret_exprs": [], "ret_type": "", "variables": {"hook": ""}, "variables_p": {"hook": [["str", 0.504970123340426], ["Dict[str, Dict[str, Any]]", 0.09336594773325943], ["bool", 0.08409917947945349]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[2173, 4], [2180, 31]], "fn_var_ln": {"hook": [[2174, 8], [2174, 12]], "mock_job_client": [[2175, 8], [2175, 23]], "resp": [[2179, 8], [2179, 12]], "response": [[2177, 8], [2177, 16]], "return_value": [[2176, 8], [2176, 38]]}, "fn_var_occur": {"hook": [["hook", "BigQueryAsyncHook"], ["resp", "hook", "get_job_output", "job_id", "JOB_ID", "project_id", "PROJECT_ID"]], "mock_job_client": [["mock_job_client", "AsyncMock", "Job"], ["mock_job_instance", "return_value", "mock_job_client"]], "resp": [["resp", "hook", "get_job_output", "job_id", "JOB_ID", "project_id", "PROJECT_ID"], ["resp", "response"]], "response": [["mock_job_instance", "return_value", "get_query_results", "return_value", "response"], ["resp", "response"]], "return_value": [["mock_job_instance", "return_value", "mock_job_client"], ["mock_job_instance", "return_value", "get_query_results", "return_value", "response"]]}, "name": "test_get_job_output_assert_once_with", "params": {"mock_job_instance": "", "self": ""}, "params_descr": {"mock_job_instance": "", "self": ""}, "params_occur": {"mock_job_instance": [["mock_job_instance", "return_value", "mock_job_client"], ["mock_job_instance", "return_value", "get_query_results", "return_value", "response"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_job_instance": [], "self": []}, "q_name": "TestBigQueryAsyncHookMethods.test_get_job_output_assert_once_with", "ret_exprs": [], "ret_type": "", "variables": {"hook": "", "mock_job_client": "", "resp": "", "response": "", "return_value": ""}, "variables_p": {"hook": [["Dict[str, str]", 0.3072658124973798], ["str", 0.21446508325950564], ["list", 0.10301085999280599], ["int", 0.09815489178901524], ["Dict[str, Literal]", 0.09065361048834178]], "mock_job_client": [], "resp": [["str", 0.31012737341738944], ["Dict[str, Any]", 0.10255370364052803], ["Dict[int, str]", 0.09745681476526999], ["ClassVar", 0.0973817585245939], ["List[List[int]]", 0.09424378181621096], ["Optional[str]", 0.09387338576733807], ["List[Union[Any, Any]]", 0.0929747867706889]], "response": [["Dict[str, Union[Any, Any]]", 0.19924061864217205], ["rotkehlchen.tests.utils.mock.MockResponse", 0.10760812298361784], ["Tuple[Literal, Literal]", 0.10199782593341783], ["datetime.datetime", 0.09310987255455491], ["Dict[str, Any]", 0.08835292321297086], ["str", 0.08823968237054998]], "return_value": [["str", 0.534469538877357], ["int", 0.09873537410321243]]}}, {"docstring": {"func": "Assert that check return AirflowException", "long_descr": null, "ret": null}, "fn_lc": [[2182, 4], [2216, 91]], "fn_var_ln": {"hook": [[2186, 8], [2186, 12]], "ignore_zero": [[2208, 40], [2208, 51]], "metrics_thresholds": [[2208, 20], [2208, 38]], "ratio_formula": [[2208, 53], [2208, 66]], "row1": [[2208, 8], [2208, 12]], "row2": [[2208, 14], [2208, 18]]}, "fn_var_occur": {"hook": [["hook", "BigQueryAsyncHook"], ["hook", "interval_check", "row1", "row2", "metrics_thresholds", "ignore_zero", "ratio_formula"], ["hook", "interval_check", "row1", "row2", "metrics_thresholds", "ignore_zero", "ratio_formula"], ["hook", "interval_check", "row1", "row2", "metrics_thresholds", "ignore_zero", "ratio_formula"]], "ignore_zero": [["row1", "row2", "metrics_thresholds", "ignore_zero", "ratio_formula", "None", "True"], ["hook", "interval_check", "row1", "row2", "metrics_thresholds", "ignore_zero", "ratio_formula"], ["row1", "row2", "metrics_thresholds", "ignore_zero", "ratio_formula", "None", "True"], ["hook", "interval_check", "row1", "row2", "metrics_thresholds", "ignore_zero", "ratio_formula"], ["row1", "row2", "metrics_thresholds", "ignore_zero", "ratio_formula", "True"], ["hook", "interval_check", "row1", "row2", "metrics_thresholds", "ignore_zero", "ratio_formula"]], "metrics_thresholds": [["row1", "row2", "metrics_thresholds", "ignore_zero", "ratio_formula", "None", "True"], ["hook", "interval_check", "row1", "row2", "metrics_thresholds", "ignore_zero", "ratio_formula"], ["row1", "row2", "metrics_thresholds", "ignore_zero", "ratio_formula", "None", "True"], ["hook", "interval_check", "row1", "row2", "metrics_thresholds", "ignore_zero", "ratio_formula"], ["row1", "row2", "metrics_thresholds", "ignore_zero", "ratio_formula", "True"], ["hook", "interval_check", "row1", "row2", "metrics_thresholds", "ignore_zero", "ratio_formula"]], "ratio_formula": [["row1", "row2", "metrics_thresholds", "ignore_zero", "ratio_formula", "None", "True"], ["hook", "interval_check", "row1", "row2", "metrics_thresholds", "ignore_zero", "ratio_formula"], ["row1", "row2", "metrics_thresholds", "ignore_zero", "ratio_formula", "None", "True"], ["hook", "interval_check", "row1", "row2", "metrics_thresholds", "ignore_zero", "ratio_formula"], ["row1", "row2", "metrics_thresholds", "ignore_zero", "ratio_formula", "True"], ["hook", "interval_check", "row1", "row2", "metrics_thresholds", "ignore_zero", "ratio_formula"]], "row1": [["row1", "row2", "metrics_thresholds", "ignore_zero", "ratio_formula", "None", "True"], ["hook", "interval_check", "row1", "row2", "metrics_thresholds", "ignore_zero", "ratio_formula"], ["row1", "row2", "metrics_thresholds", "ignore_zero", "ratio_formula", "None", "True"], ["hook", "interval_check", "row1", "row2", "metrics_thresholds", "ignore_zero", "ratio_formula"], ["row1", "row2", "metrics_thresholds", "ignore_zero", "ratio_formula", "True"], ["hook", "interval_check", "row1", "row2", "metrics_thresholds", "ignore_zero", "ratio_formula"]], "row2": [["row1", "row2", "metrics_thresholds", "ignore_zero", "ratio_formula", "None", "True"], ["hook", "interval_check", "row1", "row2", "metrics_thresholds", "ignore_zero", "ratio_formula"], ["row1", "row2", "metrics_thresholds", "ignore_zero", "ratio_formula", "None", "True"], ["hook", "interval_check", "row1", "row2", "metrics_thresholds", "ignore_zero", "ratio_formula"], ["row1", "row2", "metrics_thresholds", "ignore_zero", "ratio_formula", "True"], ["hook", "interval_check", "row1", "row2", "metrics_thresholds", "ignore_zero", "ratio_formula"]]}, "name": "test_interval_check_for_airflow_exception", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestBigQueryAsyncHookMethods.test_interval_check_for_airflow_exception", "ret_exprs": [], "ret_type": "", "variables": {"hook": "", "ignore_zero": "", "metrics_thresholds": "", "ratio_formula": "", "row1": "", "row2": ""}, "variables_p": {"hook": [["int", 0.2161973397823229], ["List[Union[int, Any, Any]]", 0.111988353738426], ["dict", 0.10810314916716941], ["Dict[str, Union[Any, Any, Any]]", 0.10507878745657552], ["OrderedDict[str, str]", 0.10070577848111527], ["Dict[str, str]", 0.10070577848111527], ["str", 0.08791605164922751], ["list", 0.08546914881383703], ["Dict[str, int]", 0.0838356124302111]], "ignore_zero": [["dict", 0.3550973221938989], ["list", 0.18029408631385355], ["Type[str]", 0.09949608051525034], ["List[str]", 0.09206650860618752], ["Tuple[Literal, Literal, Literal, Literal]", 0.08843153773186373], ["set", 0.08585314182917744]], "metrics_thresholds": [["dict", 0.3550973221938989], ["list", 0.18029408631385355], ["Type[str]", 0.09949608051525034], ["List[str]", 0.09206650860618752], ["Tuple[Literal, Literal, Literal, Literal]", 0.08843153773186373], ["set", 0.08585314182917744]], "ratio_formula": [["dict", 0.3550973221938989], ["list", 0.18029408631385355], ["Type[str]", 0.09949608051525034], ["List[str]", 0.09206650860618752], ["Tuple[Literal, Literal, Literal, Literal]", 0.08843153773186373], ["set", 0.08585314182917744]], "row1": [["list", 0.20629964038096904], ["defaultdict", 0.12331749364246904], ["Dict[Any, str]", 0.10911555292061723], ["Dict[str, int]", 0.1072062298554073], ["int", 0.09935071844384244]], "row2": [["list", 0.20629964038096904], ["defaultdict", 0.12331749364246904], ["Dict[Any, str]", 0.10911555292061723], ["Dict[str, int]", 0.1072062298554073], ["int", 0.09935071844384244]]}}, {"docstring": {"func": "Assert that check return None", "long_descr": null, "ret": null}, "fn_lc": [[2218, 4], [2232, 31]], "fn_var_ln": {"hook": [[2222, 8], [2222, 12]], "ignore_zero": [[2224, 40], [2224, 51]], "metrics_thresholds": [[2224, 20], [2224, 38]], "ratio_formula": [[2224, 53], [2224, 66]], "response": [[2231, 8], [2231, 16]], "row1": [[2224, 8], [2224, 12]], "row2": [[2224, 14], [2224, 18]]}, "fn_var_occur": {"hook": [["hook", "BigQueryAsyncHook"], ["response", "hook", "interval_check", "row1", "row2", "metrics_thresholds", "ignore_zero", "ratio_formula"]], "ignore_zero": [["row1", "row2", "metrics_thresholds", "ignore_zero", "ratio_formula", "True"], ["response", "hook", "interval_check", "row1", "row2", "metrics_thresholds", "ignore_zero", "ratio_formula"]], "metrics_thresholds": [["row1", "row2", "metrics_thresholds", "ignore_zero", "ratio_formula", "True"], ["response", "hook", "interval_check", "row1", "row2", "metrics_thresholds", "ignore_zero", "ratio_formula"]], "ratio_formula": [["row1", "row2", "metrics_thresholds", "ignore_zero", "ratio_formula", "True"], ["response", "hook", "interval_check", "row1", "row2", "metrics_thresholds", "ignore_zero", "ratio_formula"]], "response": [["response", "hook", "interval_check", "row1", "row2", "metrics_thresholds", "ignore_zero", "ratio_formula"], ["response", "None"]], "row1": [["row1", "row2", "metrics_thresholds", "ignore_zero", "ratio_formula", "True"], ["response", "hook", "interval_check", "row1", "row2", "metrics_thresholds", "ignore_zero", "ratio_formula"]], "row2": [["row1", "row2", "metrics_thresholds", "ignore_zero", "ratio_formula", "True"], ["response", "hook", "interval_check", "row1", "row2", "metrics_thresholds", "ignore_zero", "ratio_formula"]]}, "name": "test_interval_check_for_success", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestBigQueryAsyncHookMethods.test_interval_check_for_success", "ret_exprs": [], "ret_type": "", "variables": {"hook": "", "ignore_zero": "", "metrics_thresholds": "", "ratio_formula": "", "response": "", "row1": "", "row2": ""}, "variables_p": {"hook": [["int", 0.37257800605744573], ["Dict[str, str]", 0.12043913744079525], ["dict", 0.09960953564903122], ["Dict[bytes, bytes]", 0.09268125032697648]], "ignore_zero": [["dict", 0.7115252147143015], ["str", 0.10470231920745998], ["Dict[str, Any]", 0.09188623303911926]], "metrics_thresholds": [["dict", 0.7115252147143015], ["str", 0.10470231920745998], ["Dict[str, Any]", 0.09188623303911926]], "ratio_formula": [["dict", 0.7115252147143015], ["str", 0.10470231920745998], ["Dict[str, Any]", 0.09188623303911926]], "response": [["str", 0.21302094869267507], ["Dict[str, Union[Any, Any, Any]]", 0.08214901391745351]], "row1": [["int", 0.18664672485536193], ["tuple", 0.10727014548562687], ["dict", 0.10011472870583234], ["List[Dict[str, str]]", 0.0899047393412105], ["List[str]", 0.0899047393412105]], "row2": [["int", 0.18664672485536193], ["tuple", 0.10727014548562687], ["dict", 0.10011472870583234], ["List[Dict[str, str]]", 0.0899047393412105], ["List[str]", 0.0899047393412105]]}}, {"docstring": {"func": "Tests to check if a particular object in Google Cloud Storage", "long_descr": "is found or not", "ret": null}, "fn_lc": [[2236, 4], [2261, 31]], "fn_var_ln": {"hook": [[2256, 8], [2256, 12]], "mock_job_client": [[2257, 8], [2257, 23]], "resp": [[2260, 8], [2260, 12]], "response": [[2241, 8], [2241, 16]], "return_value": [[2258, 8], [2258, 38]]}, "fn_var_occur": {"hook": [["hook", "BigQueryAsyncHook"], ["resp", "hook", "get_job_output", "job_id", "JOB_ID", "project_id", "PROJECT_ID"]], "mock_job_client": [["mock_job_client", "AsyncMock", "Job"], ["mock_job_instance", "return_value", "mock_job_client"], ["mock_job_client", "get_query_results", "return_value", "response"]], "resp": [["resp", "hook", "get_job_output", "job_id", "JOB_ID", "project_id", "PROJECT_ID"], ["resp", "response"]], "response": [["response", "True", "False"], ["mock_job_client", "get_query_results", "return_value", "response"], ["resp", "response"]], "return_value": [["mock_job_instance", "return_value", "mock_job_client"], ["mock_job_client", "get_query_results", "return_value", "response"]]}, "name": "test_get_job_output", "params": {"mock_job_instance": "", "self": ""}, "params_descr": {"mock_job_instance": "", "self": ""}, "params_occur": {"mock_job_instance": [["mock_job_instance", "return_value", "mock_job_client"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_job_instance": [["mock.MagicMock", 0.07852320170185323]], "self": []}, "q_name": "TestBigQueryAsyncHookMethods.test_get_job_output", "ret_exprs": [], "ret_type": "", "variables": {"hook": "", "mock_job_client": "", "resp": "", "response": "", "return_value": ""}, "variables_p": {"hook": [["Dict[str, str]", 0.3072658124973798], ["str", 0.21446508325950564], ["list", 0.10301085999280599], ["int", 0.09815489178901524], ["Dict[str, Literal]", 0.09065361048834178]], "mock_job_client": [], "resp": [["str", 0.31012737341738944], ["Dict[str, Any]", 0.10255370364052803], ["Dict[int, str]", 0.09745681476526999], ["ClassVar", 0.0973817585245939], ["List[List[int]]", 0.09424378181621096], ["Optional[str]", 0.09387338576733807], ["List[Union[Any, Any]]", 0.0929747867706889]], "response": [["Dict[str, str]", 0.419415110468798], ["Dict[str, Any]", 0.10373811557358198]], "return_value": [["str", 0.6091872336613888], ["Dict[str, Union[int, str]]", 0.10988325158110337], ["Dict[str, Union[Any, Any]]", 0.09398843730405419], ["Dict[Any, Union[int, str]]", 0.08865614696290995]]}}, {"docstring": {"func": "Assert that value_check method execution succeed", "long_descr": null, "ret": null}, "fn_lc": [[2266, 4], [2273, 31]], "fn_var_ln": {"hook": [[2270, 8], [2270, 12]], "query": [[2271, 8], [2271, 13]], "response": [[2272, 8], [2272, 16]]}, "fn_var_occur": {"hook": [["hook", "BigQueryAsyncHook"], ["response", "hook", "value_check", "query", "pass_value", "records", "tolerance"]], "query": [["response", "hook", "value_check", "query", "pass_value", "records", "tolerance"]], "response": [["response", "hook", "value_check", "query", "pass_value", "records", "tolerance"], ["response", "None"]]}, "name": "test_value_check_success", "params": {"pass_value": "", "records": "", "self": "", "tolerance": ""}, "params_descr": {"pass_value": "", "records": "", "self": "", "tolerance": ""}, "params_occur": {"pass_value": [["response", "hook", "value_check", "query", "pass_value", "records", "tolerance"]], "records": [["response", "hook", "value_check", "query", "pass_value", "records", "tolerance"]], "self": [], "tolerance": [["response", "hook", "value_check", "query", "pass_value", "records", "tolerance"]]}, "params_p": {"args": [], "kwargs": [], "pass_value": [["str", 0.07944712717771238]], "records": [["str", 0.07944712717771238]], "self": [], "tolerance": [["str", 0.07944712717771238]]}, "q_name": "TestBigQueryAsyncHookMethods.test_value_check_success", "ret_exprs": [], "ret_type": "", "variables": {"hook": "", "query": "", "response": ""}, "variables_p": {"hook": [["str", 0.213697222823122], ["int", 0.17523265417053313]], "query": [["str", 0.20131392298950718], ["Set[str]", 0.10493502483283529], ["dict", 0.10279754325300158], ["List[int]", 0.08704663748417363], ["list", 0.08246122432342014]], "response": []}}, {"docstring": {"func": "Assert that check raise AirflowException", "long_descr": null, "ret": null}, "fn_lc": [[2279, 4], [2286, 53]], "fn_var_ln": {"hook": [[2281, 8], [2281, 12]], "query": [[2282, 8], [2282, 13]]}, "fn_var_occur": {"hook": [["hook", "BigQueryAsyncHook"], ["hook", "value_check", "query", "pass_value", "records", "tolerance"]], "query": [["hook", "value_check", "query", "pass_value", "records", "tolerance"]]}, "name": "test_value_check_fail", "params": {"pass_value": "", "records": "", "self": "", "tolerance": ""}, "params_descr": {"pass_value": "", "records": "", "self": "", "tolerance": ""}, "params_occur": {"pass_value": [["hook", "value_check", "query", "pass_value", "records", "tolerance"]], "records": [["hook", "value_check", "query", "pass_value", "records", "tolerance"]], "self": [], "tolerance": [["hook", "value_check", "query", "pass_value", "records", "tolerance"]]}, "params_p": {"args": [], "kwargs": [], "pass_value": [["str", 0.07875484403624547]], "records": [["str", 0.07875484403624547]], "self": [], "tolerance": [["str", 0.07875484403624547]]}, "q_name": "TestBigQueryAsyncHookMethods.test_value_check_fail", "ret_exprs": [], "ret_type": "", "variables": {"hook": "", "query": ""}, "variables_p": {"hook": [["bytes", 0.10893562817259708], ["List[Dict[str, Any]]", 0.10469259316668607], ["int", 0.09901420020927272], ["Dict[str, Dict[str, Any]]", 0.09822529191839179], ["dict", 0.09822529191839179], ["str", 0.09822529191839179]], "query": [["list", 0.10106130482878328], ["str", 0.10013153059141303], ["List[Optional[str]]", 0.08982294245767065], ["int", 0.08339870114619789], ["List[str]", 0.08325756499340649]]}}, {"docstring": {"func": "Assert the if response list have all element match with pass_value with tolerance", "long_descr": null, "ret": null}, "fn_lc": [[2300, 4], [2303, 97]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_get_numeric_matches", "params": {"expected": "", "pass_value": "", "records": "", "self": "", "tolerance": ""}, "params_descr": {"expected": "", "pass_value": "", "records": "", "self": "", "tolerance": ""}, "params_occur": {"expected": [["BigQueryAsyncHook", "_get_numeric_matches", "records", "pass_value", "tolerance", "expected"]], "pass_value": [["BigQueryAsyncHook", "_get_numeric_matches", "records", "pass_value", "tolerance", "expected"]], "records": [["BigQueryAsyncHook", "_get_numeric_matches", "records", "pass_value", "tolerance", "expected"]], "self": [], "tolerance": [["BigQueryAsyncHook", "_get_numeric_matches", "records", "pass_value", "tolerance", "expected"]]}, "params_p": {"args": [], "expected": [["Callable[[List, bool], None]", 0.6156182053165613], ["str", 0.100108505835745], ["Dict[type, Any]", 0.09165582515674316]], "kwargs": [], "pass_value": [["Callable[[List, bool], None]", 0.6156182053165613], ["str", 0.100108505835745], ["Dict[type, Any]", 0.09165582515674316]], "records": [["Callable[[List, bool], None]", 0.6156182053165613], ["str", 0.100108505835745], ["Dict[type, Any]", 0.09165582515674316]], "self": [], "tolerance": [["Callable[[List, bool], None]", 0.6156182053165613], ["str", 0.100108505835745], ["Dict[type, Any]", 0.09165582515674316]]}, "q_name": "TestBigQueryAsyncHookMethods.test_get_numeric_matches", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Assert that type casting succeed for the possible value", "long_descr": "Otherwise return the same value", "ret": null}, "fn_lc": [[2306, 4], [2312, 86]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_convert_to_float_if_possible", "params": {"expected": "", "self": "", "test_input": ""}, "params_descr": {"expected": "", "self": "", "test_input": ""}, "params_occur": {"expected": [["BigQueryAsyncHook", "_convert_to_float_if_possible", "test_input", "expected"]], "self": [], "test_input": [["BigQueryAsyncHook", "_convert_to_float_if_possible", "test_input", "expected"]]}, "params_p": {"args": [], "expected": [["str", 0.8390076252926543], ["Dict[str, Any]", 0.08243224761734069]], "kwargs": [], "self": [], "test_input": [["str", 0.8390076252926543], ["Dict[str, Any]", 0.08243224761734069]]}, "q_name": "TestBigQueryAsyncHookMethods.test_convert_to_float_if_possible", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Test get_table_client async function and check whether the return value is a", "long_descr": "Table instance object", "ret": null}, "fn_lc": [[2316, 4], [2323, 46]], "fn_var_ln": {"hook": [[2319, 8], [2319, 12]], "result": [[2320, 8], [2320, 14]]}, "fn_var_occur": {"hook": [["hook", "BigQueryTableAsyncHook"], ["result", "hook", "get_table_client", "dataset", "DATASET_ID", "project_id", "PROJECT_ID", "table_id", "TABLE_ID", "session", "mock_session"]], "result": [["result", "hook", "get_table_client", "dataset", "DATASET_ID", "project_id", "PROJECT_ID", "table_id", "TABLE_ID", "session", "mock_session"], ["isinstance", "result", "Table_async"]]}, "name": "test_get_table_client", "params": {"mock_session": "", "self": ""}, "params_descr": {"mock_session": "", "self": ""}, "params_occur": {"mock_session": [["result", "hook", "get_table_client", "dataset", "DATASET_ID", "project_id", "PROJECT_ID", "table_id", "TABLE_ID", "session", "mock_session"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_session": [], "self": []}, "q_name": "TestBigQueryAsyncHookMethods.test_get_table_client", "ret_exprs": [], "ret_type": "", "variables": {"hook": "", "result": ""}, "variables_p": {"hook": [["Dict[str, Union[float, str]]", 0.33664930961949313], ["Dict[str, str]", 0.2293960717532308], ["Dict[str, int]", 0.10926459430587307], ["str", 0.08810776707141867]], "result": [["str", 0.28404921116007636], ["int", 0.10689004801793185], ["Optional[str]", 0.0939076363208628], ["dict", 0.09265135958242679]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[2325, 4], [2351, 44]], "fn_var_ln": {"hook": [[2347, 8], [2347, 12]], "query_result": [[2326, 8], [2326, 20]], "result": [[2348, 8], [2348, 14]]}, "fn_var_occur": {"hook": [["hook", "BigQueryAsyncHook"], ["result", "hook", "get_records", "query_result"]], "query_result": [["query_result", "True", "False"], ["result", "hook", "get_records", "query_result"]], "result": [["result", "hook", "get_records", "query_result"], ["isinstance", "result", "int"], ["isinstance", "result", "float"], ["isinstance", "result", "str"]]}, "name": "test_get_records_return_type", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestBigQueryAsyncHookMethods.test_get_records_return_type", "ret_exprs": [], "ret_type": "", "variables": {"hook": "", "query_result": "", "result": ""}, "variables_p": {"hook": [["Dict[str, Union[float, str]]", 0.198396303018448], ["list", 0.19747036444337862], ["float", 0.18735571173915727], ["dict", 0.11190075119079201], ["str", 0.09868721995149003], ["int", 0.09868721995149003]], "query_result": [["Type[int]", 0.20818600836411486], ["set", 0.18163139838189893], ["Optional[Match[str]]", 0.10777768567125401], ["bool", 0.10550016183704078], ["Dict[str, str]", 0.10234860502989475], ["int", 0.09996450699347642], ["Set[str]", 0.09965692427005594], ["Optional[Tuple[int, int]]", 0.09493470945226427]], "result": [["List[List[Any]]", 0.12124875919566731], ["float", 0.10340071499628248]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[2353, 4], [2377, 64]], "fn_var_ln": {"hook": [[2375, 8], [2375, 12]], "query_result": [[2354, 8], [2354, 20]], "result": [[2376, 8], [2376, 14]]}, "fn_var_occur": {"hook": [["hook", "BigQueryAsyncHook"], ["result", "hook", "get_records", "query_result", "as_dict", "True"]], "query_result": [["query_result", "True", "False"], ["result", "hook", "get_records", "query_result", "as_dict", "True"]], "result": [["result", "hook", "get_records", "query_result", "as_dict", "True"]]}, "name": "test_get_records_as_dict", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestBigQueryAsyncHookMethods.test_get_records_as_dict", "ret_exprs": [], "ret_type": "", "variables": {"hook": "", "query_result": "", "result": ""}, "variables_p": {"hook": [["dict", 0.21360794127323346], ["str", 0.17626748774575707], ["list", 0.10145082045987339], ["float", 0.09152672269901842], ["Tuple[Literal, Literal]", 0.08514798532574068]], "query_result": [["Pattern[str]", 0.19727230661062112], ["Type[Optional[str]]", 0.09573370406496812]], "result": [["Dict[str, Union[Any, int]]", 0.3617936129887746], ["Dict[str, Any]", 0.13996841179151], ["dict", 0.0934278169534753], ["Dict[str, str]", 0.0900752182888478], ["list", 0.08530350624379805]]}}], "name": "TestBigQueryAsyncHookMethods", "q_name": "TestBigQueryAsyncHookMethods", "variables": {}, "variables_p": {}}], "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[72, 0], [74, 74]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_delegate_to_runtime_error", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "test_delegate_to_runtime_error", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "imports": ["__future__", "annotations", "re", "datetime", "datetime", "unittest", "mock", "unittest", "mock", "AsyncMock", "pytest", "gcloud", "aio", "bigquery", "Job", "Table", "Table_async", "google", "api_core", "page_iterator", "google", "cloud", "bigquery", "DEFAULT_RETRY", "DatasetReference", "Table", "TableReference", "google", "cloud", "bigquery", "dataset", "AccessEntry", "Dataset", "DatasetListItem", "google", "cloud", "bigquery", "table", "_EmptyRowIterator", "google", "cloud", "exceptions", "NotFound", "airflow", "exceptions", "AirflowException", "AirflowProviderDeprecationWarning", "airflow", "providers", "google", "cloud", "hooks", "bigquery", "BigQueryAsyncHook", "BigQueryCursor", "BigQueryHook", "BigQueryTableAsyncHook", "_api_resource_configs_duplication_check", "_cleanse_time_partitioning", "_format_schema_for_description", "_validate_src_fmt_configs", "_validate_value", "split_tablename"], "mod_var_ln": {"CREDENTIALS": [[48, 0], [48, 11]], "DATASET_ID": [[49, 0], [49, 10]], "JOB_ID": [[53, 0], [53, 6]], "LOCATION": [[54, 0], [54, 8]], "PARTITION_ID": [[51, 0], [51, 12]], "PROJECT_ID": [[47, 0], [47, 10]], "TABLE_ID": [[50, 0], [50, 8]], "TABLE_REFERENCE": [[60, 0], [60, 15]], "TABLE_REFERENCE_REPR": [[55, 0], [55, 20]], "VIEW_ID": [[52, 0], [52, 7]]}, "mod_var_occur": {"CREDENTIALS": [["CREDENTIALS", "PROJECT_ID"], ["mock_read_gbq", "assert_called_once_with", "credentials", "CREDENTIALS", "dialect", "project_id", "PROJECT_ID", "verbose", "False"], ["CREDENTIALS", "PROJECT_ID"]], "DATASET_ID": [["TABLE_REFERENCE_REPR", "TABLE_ID", "DATASET_ID", "PROJECT_ID"], ["result", "self", "hook", "table_exists", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID"], ["result", "self", "hook", "table_exists", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID"], ["result", "self", "hook", "table_partition_exists", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "partition_id", "PARTITION_ID"], ["result", "self", "hook", "table_partition_exists", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "partition_id", "PARTITION_ID"], ["result", "self", "hook", "table_partition_exists", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "partition_id", "PARTITION_ID"], ["source_project_dataset_table", "PROJECT_ID", "DATASET_ID", "TABLE_ID"], ["expected_configuration", "PROJECT_ID", "DATASET_ID", "TABLE_ID", "destination_cloud_storage_uris", "True"], ["actual", "self", "hook", "list_rows", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "max_results", "selected_fields", "page_token", "start_index", "location", "LOCATION", "return_iterator", "return_iterator"], ["actual", "self", "hook", "list_rows", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "max_results", "page_token", "selected_fields", "start_index", "location", "LOCATION", "return_iterator", "return_iterator"], ["source_dataset_table", "DATASET_ID", "TABLE_ID"], ["self", "hook", "run_table_upsert", "dataset_id", "DATASET_ID", "table_resource", "table_resource"], ["mock_get", "assert_called_once_with", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID"], ["self", "hook", "run_table_upsert", "dataset_id", "DATASET_ID", "table_resource", "table_resource"], ["mock_get", "assert_called_once_with", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID"], ["view_dataset", "DATASET_ID"], ["dataset", "Dataset", "DatasetReference", "from_string", "DATASET_ID", "PROJECT_ID"], ["self", "hook", "run_grant_dataset_view_access", "source_dataset", "DATASET_ID", "view_dataset", "view_dataset", "view_table", "view_table"], ["mock_get", "assert_called_once_with", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID"], ["view_dataset", "DATASET_ID"], ["dataset", "Dataset", "DatasetReference", "from_string", "DATASET_ID", "PROJECT_ID"], ["self", "hook", "run_grant_dataset_view_access", "source_dataset", "DATASET_ID", "view_dataset", "view_dataset", "view_table", "view_table"], ["mock_get", "assert_called_once_with", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID"], ["table_list", "PROJECT_ID", "DATASET_ID", "PROJECT_ID", "DATASET_ID", "PROJECT_ID", "DATASET_ID", "PROJECT_ID", "DATASET_ID"], ["dataset_reference", "DatasetReference", "PROJECT_ID", "DATASET_ID"], ["result", "self", "hook", "get_dataset_tables_list", "dataset_id", "DATASET_ID", "project_id", "PROJECT_ID"], ["result", "self", "hook", "get_schema", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID"], ["self", "hook", "update_table_schema", "schema_fields_updates", "schema_fields_updates", "include_policy_tags", "True", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID"], ["mock_update", "assert_called_once_with", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "project_id", "PROJECT_ID", "table_resource", "expected_result_schema", "fields"], ["self", "hook", "update_table_schema", "schema_fields_updates", "schema_fields_updates", "include_policy_tags", "False", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID"], ["mock_update", "assert_called_once_with", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "project_id", "PROJECT_ID", "table_resource", "expected_result_schema", "fields"], ["self", "hook", "insert_all", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "rows", "rows", "ignore_unknown_values", "True", "skip_invalid_rows", "True"], ["self", "hook", "insert_all", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "rows", "rows", "fail_on_error", "True"], ["self", "hook", "create_empty_table", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "view", "view", "retry", "DEFAULT_RETRY"], ["self", "hook", "patch_table", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "project_id", "PROJECT_ID", "description", "description_patched", "expiration_time", "expiration_time_patched", "friendly_name", "friendly_name_patched", "labels", "labels_patched", "schema", "schema_patched", "time_partitioning", "time_partitioning_patched", "require_partition_filter", "require_partition_filter_patched", "view", "view_patched"], ["self", "hook", "create_empty_table", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID"], ["body", "TABLE_ID", "PROJECT_ID", "DATASET_ID"], ["self", "hook", "create_empty_table", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "schema_fields", "schema_fields", "time_partitioning", "time_partitioning", "cluster_fields", "cluster_fields"], ["body", "TABLE_ID", "PROJECT_ID", "DATASET_ID", "schema_fields", "time_partitioning", "cluster_fields"], ["dataset_reference", "DatasetReference", "PROJECT_ID", "DATASET_ID"], ["result", "self", "hook", "get_dataset_tables", "dataset_id", "DATASET_ID", "project_id", "PROJECT_ID"], ["self", "hook", "create_empty_table", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "materialized_view", "materialized_view", "retry", "DEFAULT_RETRY"], ["self", "hook", "create_empty_dataset", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "location", "LOCATION"], ["expected_body", "LOCATION", "DATASET_ID", "PROJECT_ID"], ["result", "self", "hook", "get_dataset", "dataset_id", "DATASET_ID", "project_id", "PROJECT_ID"], ["mock_client", "return_value", "get_dataset", "assert_called_once_with", "dataset_ref", "DatasetReference", "PROJECT_ID", "DATASET_ID"], ["self", "hook", "delete_dataset", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "delete_contents", "delete_contents"], ["mock_client", "return_value", "delete_dataset", "assert_called_once_with", "dataset", "DatasetReference", "PROJECT_ID", "DATASET_ID", "delete_contents", "delete_contents", "retry", "DEFAULT_RETRY", "not_found_ok", "True"], ["self", "hook", "patch_dataset", "dataset_id", "DATASET_ID", "project_id", "PROJECT_ID", "dataset_resource", "dataset_resource"], ["method", "assert_called_once_with", "projectId", "PROJECT_ID", "datasetId", "DATASET_ID", "body", "dataset_resource"], ["result", "self", "hook", "update_dataset", "dataset_id", "DATASET_ID", "project_id", "PROJECT_ID", "dataset_resource", "dataset_resource", "fields"], ["self", "hook", "run_load", "destination_project_dataset_table", "DATASET_ID", "TABLE_ID", "schema_fields", "source_uris", "time_partitioning"], ["configuration", "False", "PROJECT_ID", "DATASET_ID", "TABLE_ID", "False", "None", "False"], ["self", "hook", "run_query", "sql", "destination_dataset_table", "DATASET_ID", "TABLE_ID", "priority", "time_partitioning"], ["configuration", "True", "PROJECT_ID", "DATASET_ID", "TABLE_ID", "False", "None"], ["self", "hook", "create_empty_table", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "schema_fields", "schema_fields", "encryption_configuration", "encryption_configuration"], ["body", "TABLE_ID", "PROJECT_ID", "DATASET_ID", "schema_fields", "encryption_configuration"], ["external_project_dataset_table", "PROJECT_ID", "DATASET_ID", "TABLE_ID"], ["body", "autodetect", "source_format", "source_uris", "compression", "ignore_unknown_values", "schema_fields", "max_bad_records", "skip_leading_rows", "field_delimiter", "quote_character", "allow_quoted_newlines", "allow_jagged_rows", "encoding", "PROJECT_ID", "DATASET_ID", "TABLE_ID", "labels", "encryption_configuration"], ["body", "PROJECT_ID", "DATASET_ID", "TABLE_ID", "description_patched", "expiration_time_patched", "friendly_name_patched", "labels_patched", "schema_patched", "time_partitioning_patched", "view_patched", "require_partition_filter_patched"], ["self", "hook", "update_table", "table_resource", "body", "fields", "fields", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "project_id", "PROJECT_ID"], ["result", "hook", "get_table_client", "dataset", "DATASET_ID", "project_id", "PROJECT_ID", "table_id", "TABLE_ID", "session", "mock_session"]], "JOB_ID": [["self", "hook", "poll_job_complete", "job_id", "JOB_ID", "location", "LOCATION", "project_id", "PROJECT_ID"], ["mock_client", "return_value", "get_job", "assert_called_once_with", "job_id", "JOB_ID"], ["self", "hook", "running_job_id", "JOB_ID"], ["poll_job_complete", "assert_called_once_with", "job_id", "JOB_ID", "project_id", "PROJECT_ID", "location", "None"], ["self", "hook", "running_job_id", "JOB_ID"], ["mock_client", "return_value", "cancel_job", "assert_called_once_with", "job_id", "JOB_ID"], ["mock_logger_info", "has_call", "mock", "call", "JOB_ID"], ["self", "hook", "running_job_id", "JOB_ID"], ["mock_client", "return_value", "cancel_job", "assert_called_once_with", "job_id", "JOB_ID"], ["self", "hook", "insert_job", "configuration", "job_conf", "job_id", "JOB_ID", "project_id", "PROJECT_ID", "location", "LOCATION", "nowait", "nowait"], ["mock_query_job", "from_api_repr", "assert_called_once_with", "job_conf", "JOB_ID", "PROJECT_ID", "LOCATION", "mock_client", "return_value"], ["bq_cursor", "job_id", "JOB_ID"], ["bq_cursor", "job_id", "JOB_ID"], ["mock_get_query_results", "assert_called_once_with", "jobId", "JOB_ID", "location", "LOCATION", "pageToken", "None", "projectId"], ["bq_cursor", "job_id", "JOB_ID"], ["mock_get_query_results", "assert_called_once_with", "jobId", "JOB_ID", "location", "None", "pageToken", "None", "projectId"], ["result", "hook", "get_job_instance", "project_id", "PROJECT_ID", "job_id", "JOB_ID", "session", "mock_session"], ["resp", "hook", "get_job_status", "job_id", "JOB_ID", "project_id", "PROJECT_ID"], ["job_status", "hook", "get_job_status", "job_id", "JOB_ID", "project_id", "PROJECT_ID"], ["hook", "get_job_status", "job_id", "JOB_ID", "project_id", "PROJECT_ID"], ["resp", "hook", "get_job_output", "job_id", "JOB_ID", "project_id", "PROJECT_ID"], ["resp", "hook", "get_job_output", "job_id", "JOB_ID", "project_id", "PROJECT_ID"]], "LOCATION": [["actual", "self", "hook", "list_rows", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "max_results", "selected_fields", "page_token", "start_index", "location", "LOCATION", "return_iterator", "return_iterator"], ["actual", "self", "hook", "list_rows", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "max_results", "page_token", "selected_fields", "start_index", "location", "LOCATION", "return_iterator", "return_iterator"], ["self", "hook", "poll_job_complete", "job_id", "JOB_ID", "location", "LOCATION", "project_id", "PROJECT_ID"], ["mock_client", "assert_called_once_with", "location", "LOCATION", "project_id", "PROJECT_ID"], ["self", "hook", "insert_job", "configuration", "job_conf", "job_id", "JOB_ID", "project_id", "PROJECT_ID", "location", "LOCATION", "nowait", "nowait"], ["mock_client", "assert_called_once_with", "project_id", "PROJECT_ID", "location", "LOCATION"], ["mock_query_job", "from_api_repr", "assert_called_once_with", "job_conf", "JOB_ID", "PROJECT_ID", "LOCATION", "mock_client", "return_value"], ["bq_cursor", "location", "LOCATION"], ["mock_get_query_results", "assert_called_once_with", "jobId", "JOB_ID", "location", "LOCATION", "pageToken", "None", "projectId"], ["self", "hook", "create_empty_dataset", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "location", "LOCATION"], ["expected_body", "LOCATION", "DATASET_ID", "PROJECT_ID"]], "PARTITION_ID": [["mock_client", "return_value", "list_partitions", "return_value", "PARTITION_ID"], ["result", "self", "hook", "table_partition_exists", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "partition_id", "PARTITION_ID"], ["result", "self", "hook", "table_partition_exists", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "partition_id", "PARTITION_ID"], ["result", "self", "hook", "table_partition_exists", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "partition_id", "PARTITION_ID"]], "PROJECT_ID": [["TABLE_REFERENCE_REPR", "TABLE_ID", "DATASET_ID", "PROJECT_ID"], ["CREDENTIALS", "PROJECT_ID"], ["mock_bigquery_connection", "assert_called_once_with", "service", "mock_build", "return_value", "project_id", "PROJECT_ID", "hook", "self", "hook", "use_legacy_sql", "self", "hook", "use_legacy_sql", "location", "self", "hook", "location", "num_retries", "self", "hook", "num_retries"], ["result", "self", "hook", "table_exists", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID"], ["mock_client", "assert_called_once_with", "project_id", "PROJECT_ID"], ["result", "self", "hook", "table_exists", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID"], ["mock_client", "assert_called_once_with", "project_id", "PROJECT_ID"], ["result", "self", "hook", "table_partition_exists", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "partition_id", "PARTITION_ID"], ["mock_client", "assert_called_once_with", "project_id", "PROJECT_ID"], ["result", "self", "hook", "table_partition_exists", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "partition_id", "PARTITION_ID"], ["mock_client", "assert_called_once_with", "project_id", "PROJECT_ID"], ["result", "self", "hook", "table_partition_exists", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "partition_id", "PARTITION_ID"], ["mock_client", "assert_called_once_with", "project_id", "PROJECT_ID"], ["mock_read_gbq", "assert_called_once_with", "credentials", "CREDENTIALS", "dialect", "project_id", "PROJECT_ID", "verbose", "False"], ["calls", "mock", "call", "job_id", "running_job_id", "project_id", "PROJECT_ID", "location", "None", "mock", "call", "job_id", "running_job_id", "project_id", "PROJECT_ID", "location", "None"], ["mock_client", "assert_called_once_with", "project_id", "PROJECT_ID", "location", "None"], ["source_project_dataset_table", "PROJECT_ID", "DATASET_ID", "TABLE_ID"], ["expected_configuration", "PROJECT_ID", "DATASET_ID", "TABLE_ID", "destination_cloud_storage_uris", "True"], ["mock_insert", "assert_called_once_with", "configuration", "expected_configuration", "project_id", "PROJECT_ID"], ["mock_get", "assert_called_once_with", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID"], ["mock_create", "assert_called_once_with", "table_resource", "table_resource", "project_id", "PROJECT_ID"], ["mock_get", "assert_called_once_with", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID"], ["view_access", "AccessEntry", "role", "None", "entity_type", "entity_id", "PROJECT_ID", "view_dataset", "view_table"], ["dataset", "Dataset", "DatasetReference", "from_string", "DATASET_ID", "PROJECT_ID"], ["mock_get", "assert_called_once_with", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID"], ["mock_update", "assert_called_once_with", "fields", "dataset_resource", "dataset", "to_api_repr", "project_id", "PROJECT_ID"], ["view_access", "AccessEntry", "role", "None", "entity_type", "entity_id", "PROJECT_ID", "view_dataset", "view_table"], ["dataset", "Dataset", "DatasetReference", "from_string", "DATASET_ID", "PROJECT_ID"], ["mock_get", "assert_called_once_with", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID"], ["table_list", "PROJECT_ID", "DATASET_ID", "PROJECT_ID", "DATASET_ID", "PROJECT_ID", "DATASET_ID", "PROJECT_ID", "DATASET_ID"], ["dataset_reference", "DatasetReference", "PROJECT_ID", "DATASET_ID"], ["result", "self", "hook", "get_dataset_tables_list", "dataset_id", "DATASET_ID", "project_id", "PROJECT_ID"], ["self", "hook", "poll_job_complete", "job_id", "JOB_ID", "location", "LOCATION", "project_id", "PROJECT_ID"], ["mock_client", "assert_called_once_with", "location", "LOCATION", "project_id", "PROJECT_ID"], ["poll_job_complete", "assert_called_once_with", "job_id", "JOB_ID", "project_id", "PROJECT_ID", "location", "None"], ["mock_logger_info", "has_call", "mock", "call", "PROJECT_ID", "PROJECT_ID"], ["mock_update", "assert_called_once_with", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "project_id", "PROJECT_ID", "table_resource", "expected_result_schema", "fields"], ["mock_update", "assert_called_once_with", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "project_id", "PROJECT_ID", "table_resource", "expected_result_schema", "fields"], ["self", "hook", "insert_all", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "rows", "rows", "ignore_unknown_values", "True", "skip_invalid_rows", "True"], ["self", "hook", "insert_all", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "rows", "rows", "fail_on_error", "True"], ["self", "hook", "insert_job", "configuration", "job_conf", "job_id", "JOB_ID", "project_id", "PROJECT_ID", "location", "LOCATION", "nowait", "nowait"], ["mock_client", "assert_called_once_with", "project_id", "PROJECT_ID", "location", "LOCATION"], ["mock_query_job", "from_api_repr", "assert_called_once_with", "job_conf", "JOB_ID", "PROJECT_ID", "LOCATION", "mock_client", "return_value"], ["self", "hook", "create_empty_table", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "view", "view", "retry", "DEFAULT_RETRY"], ["self", "hook", "patch_table", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "project_id", "PROJECT_ID", "description", "description_patched", "expiration_time", "expiration_time_patched", "friendly_name", "friendly_name_patched", "labels", "labels_patched", "schema", "schema_patched", "time_partitioning", "time_partitioning_patched", "require_partition_filter", "require_partition_filter_patched", "view", "view_patched"], ["self", "hook", "create_empty_table", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID"], ["body", "TABLE_ID", "PROJECT_ID", "DATASET_ID"], ["self", "hook", "create_empty_table", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "schema_fields", "schema_fields", "time_partitioning", "time_partitioning", "cluster_fields", "cluster_fields"], ["body", "TABLE_ID", "PROJECT_ID", "DATASET_ID", "schema_fields", "time_partitioning", "cluster_fields"], ["dataset_reference", "DatasetReference", "PROJECT_ID", "DATASET_ID"], ["result", "self", "hook", "get_dataset_tables", "dataset_id", "DATASET_ID", "project_id", "PROJECT_ID"], ["self", "hook", "create_empty_table", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "materialized_view", "materialized_view", "retry", "DEFAULT_RETRY"], ["mock_insert", "assert_called_once_with", "configuration", "conf", "project_id", "PROJECT_ID", "location", "None"], ["mock_insert", "assert_has_calls", "mock", "call", "location", "None", "configuration", "True", "project_id", "PROJECT_ID", "mock", "call", "location", "None", "configuration", "True", "project_id", "PROJECT_ID"], ["self", "hook", "create_empty_dataset", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "location", "LOCATION"], ["expected_body", "LOCATION", "DATASET_ID", "PROJECT_ID"], ["result", "self", "hook", "get_dataset", "dataset_id", "DATASET_ID", "project_id", "PROJECT_ID"], ["mock_client", "return_value", "get_dataset", "assert_called_once_with", "dataset_ref", "DatasetReference", "PROJECT_ID", "DATASET_ID"], ["result", "self", "hook", "get_datasets_list", "project_id", "PROJECT_ID"], ["mock_client", "return_value", "list_datasets", "assert_called_once_with", "project", "PROJECT_ID", "include_all", "False", "filter", "None", "max_results", "None", "page_token", "None", "retry", "DEFAULT_RETRY"], ["actual", "self", "hook", "get_datasets_list", "project_id", "PROJECT_ID", "return_iterator", "True"], ["mock_client", "return_value", "list_datasets", "assert_called_once_with", "project", "PROJECT_ID", "include_all", "False", "filter", "None", "max_results", "None", "page_token", "None", "retry", "DEFAULT_RETRY"], ["self", "hook", "delete_dataset", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "delete_contents", "delete_contents"], ["mock_client", "return_value", "delete_dataset", "assert_called_once_with", "dataset", "DatasetReference", "PROJECT_ID", "DATASET_ID", "delete_contents", "delete_contents", "retry", "DEFAULT_RETRY", "not_found_ok", "True"], ["self", "hook", "patch_dataset", "dataset_id", "DATASET_ID", "project_id", "PROJECT_ID", "dataset_resource", "dataset_resource"], ["method", "assert_called_once_with", "projectId", "PROJECT_ID", "datasetId", "DATASET_ID", "body", "dataset_resource"], ["result", "self", "hook", "update_dataset", "dataset_id", "DATASET_ID", "project_id", "PROJECT_ID", "dataset_resource", "dataset_resource", "fields"], ["configuration", "False", "PROJECT_ID", "DATASET_ID", "TABLE_ID", "False", "None", "False"], ["mock_insert", "assert_called_once_with", "configuration", "configuration", "project_id", "PROJECT_ID"], ["configuration", "True", "PROJECT_ID", "DATASET_ID", "TABLE_ID", "False", "None"], ["mock_insert", "assert_called_once_with", "configuration", "configuration", "project_id", "PROJECT_ID", "location", "None"], ["mock_client", "assert_called_once_with", "project_id", "PROJECT_ID", "location", "location"], ["mock_job", "from_api_repr", "assert_called_once_with", "conf", "mock", "ANY", "PROJECT_ID", "location", "mock_client", "return_value"], ["self", "hook", "create_empty_table", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "schema_fields", "schema_fields", "encryption_configuration", "encryption_configuration"], ["body", "TABLE_ID", "PROJECT_ID", "DATASET_ID", "schema_fields", "encryption_configuration"], ["external_project_dataset_table", "PROJECT_ID", "DATASET_ID", "TABLE_ID"], ["body", "autodetect", "source_format", "source_uris", "compression", "ignore_unknown_values", "schema_fields", "max_bad_records", "skip_leading_rows", "field_delimiter", "quote_character", "allow_quoted_newlines", "allow_jagged_rows", "encoding", "PROJECT_ID", "DATASET_ID", "TABLE_ID", "labels", "encryption_configuration"], ["mock_create", "assert_called_once_with", "table_resource", "body", "project_id", "PROJECT_ID", "location", "None", "exists_ok", "True"], ["body", "PROJECT_ID", "DATASET_ID", "TABLE_ID", "description_patched", "expiration_time_patched", "friendly_name_patched", "labels_patched", "schema_patched", "time_partitioning_patched", "view_patched", "require_partition_filter_patched"], ["self", "hook", "update_table", "table_resource", "body", "fields", "fields", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "project_id", "PROJECT_ID"], ["bq_cursor", "BigQueryCursor", "mock", "MagicMock", "PROJECT_ID", "mock_bq_hook"], ["CREDENTIALS", "PROJECT_ID"], ["result", "hook", "get_job_instance", "project_id", "PROJECT_ID", "job_id", "JOB_ID", "session", "mock_session"], ["resp", "hook", "get_job_status", "job_id", "JOB_ID", "project_id", "PROJECT_ID"], ["job_status", "hook", "get_job_status", "job_id", "JOB_ID", "project_id", "PROJECT_ID"], ["hook", "get_job_status", "job_id", "JOB_ID", "project_id", "PROJECT_ID"], ["resp", "hook", "get_job_output", "job_id", "JOB_ID", "project_id", "PROJECT_ID"], ["resp", "hook", "get_job_output", "job_id", "JOB_ID", "project_id", "PROJECT_ID"], ["result", "hook", "get_table_client", "dataset", "DATASET_ID", "project_id", "PROJECT_ID", "table_id", "TABLE_ID", "session", "mock_session"]], "TABLE_ID": [["TABLE_REFERENCE_REPR", "TABLE_ID", "DATASET_ID", "PROJECT_ID"], ["result", "self", "hook", "table_exists", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID"], ["result", "self", "hook", "table_exists", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID"], ["result", "self", "hook", "table_partition_exists", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "partition_id", "PARTITION_ID"], ["result", "self", "hook", "table_partition_exists", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "partition_id", "PARTITION_ID"], ["result", "self", "hook", "table_partition_exists", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "partition_id", "PARTITION_ID"], ["source_project_dataset_table", "PROJECT_ID", "DATASET_ID", "TABLE_ID"], ["expected_configuration", "PROJECT_ID", "DATASET_ID", "TABLE_ID", "destination_cloud_storage_uris", "True"], ["actual", "self", "hook", "list_rows", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "max_results", "selected_fields", "page_token", "start_index", "location", "LOCATION", "return_iterator", "return_iterator"], ["actual", "self", "hook", "list_rows", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "max_results", "page_token", "selected_fields", "start_index", "location", "LOCATION", "return_iterator", "return_iterator"], ["source_dataset_table", "DATASET_ID", "TABLE_ID"], ["table_resource", "TABLE_ID"], ["table_resource", "TABLE_ID"], ["mock_get", "return_value", "TABLE_ID"], ["view_table", "TABLE_ID"], ["view_table", "TABLE_ID"], ["result", "self", "hook", "get_schema", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID"], ["self", "hook", "update_table_schema", "schema_fields_updates", "schema_fields_updates", "include_policy_tags", "True", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID"], ["mock_update", "assert_called_once_with", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "project_id", "PROJECT_ID", "table_resource", "expected_result_schema", "fields"], ["self", "hook", "update_table_schema", "schema_fields_updates", "schema_fields_updates", "include_policy_tags", "False", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID"], ["mock_update", "assert_called_once_with", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "project_id", "PROJECT_ID", "table_resource", "expected_result_schema", "fields"], ["self", "hook", "insert_all", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "rows", "rows", "ignore_unknown_values", "True", "skip_invalid_rows", "True"], ["self", "hook", "insert_all", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "rows", "rows", "fail_on_error", "True"], ["self", "hook", "create_empty_table", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "view", "view", "retry", "DEFAULT_RETRY"], ["self", "hook", "patch_table", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "project_id", "PROJECT_ID", "description", "description_patched", "expiration_time", "expiration_time_patched", "friendly_name", "friendly_name_patched", "labels", "labels_patched", "schema", "schema_patched", "time_partitioning", "time_partitioning_patched", "require_partition_filter", "require_partition_filter_patched", "view", "view_patched"], ["self", "hook", "create_empty_table", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID"], ["body", "TABLE_ID", "PROJECT_ID", "DATASET_ID"], ["self", "hook", "create_empty_table", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "schema_fields", "schema_fields", "time_partitioning", "time_partitioning", "cluster_fields", "cluster_fields"], ["body", "TABLE_ID", "PROJECT_ID", "DATASET_ID", "schema_fields", "time_partitioning", "cluster_fields"], ["self", "hook", "create_empty_table", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "materialized_view", "materialized_view", "retry", "DEFAULT_RETRY"], ["self", "hook", "run_load", "destination_project_dataset_table", "DATASET_ID", "TABLE_ID", "schema_fields", "source_uris", "time_partitioning"], ["configuration", "False", "PROJECT_ID", "DATASET_ID", "TABLE_ID", "False", "None", "False"], ["self", "hook", "run_query", "sql", "destination_dataset_table", "DATASET_ID", "TABLE_ID", "priority", "time_partitioning"], ["configuration", "True", "PROJECT_ID", "DATASET_ID", "TABLE_ID", "False", "None"], ["self", "hook", "create_empty_table", "project_id", "PROJECT_ID", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "schema_fields", "schema_fields", "encryption_configuration", "encryption_configuration"], ["body", "TABLE_ID", "PROJECT_ID", "DATASET_ID", "schema_fields", "encryption_configuration"], ["external_project_dataset_table", "PROJECT_ID", "DATASET_ID", "TABLE_ID"], ["body", "autodetect", "source_format", "source_uris", "compression", "ignore_unknown_values", "schema_fields", "max_bad_records", "skip_leading_rows", "field_delimiter", "quote_character", "allow_quoted_newlines", "allow_jagged_rows", "encoding", "PROJECT_ID", "DATASET_ID", "TABLE_ID", "labels", "encryption_configuration"], ["body", "PROJECT_ID", "DATASET_ID", "TABLE_ID", "description_patched", "expiration_time_patched", "friendly_name_patched", "labels_patched", "schema_patched", "time_partitioning_patched", "view_patched", "require_partition_filter_patched"], ["self", "hook", "update_table", "table_resource", "body", "fields", "fields", "dataset_id", "DATASET_ID", "table_id", "TABLE_ID", "project_id", "PROJECT_ID"], ["result", "hook", "get_table_client", "dataset", "DATASET_ID", "project_id", "PROJECT_ID", "table_id", "TABLE_ID", "session", "mock_session"]], "TABLE_REFERENCE": [["mock_client", "return_value", "get_table", "assert_called_once_with", "TABLE_REFERENCE"], ["mock_client", "return_value", "get_table", "assert_called_once_with", "TABLE_REFERENCE"], ["mock_client", "return_value", "list_partitions", "assert_called_once_with", "TABLE_REFERENCE"], ["mock_client", "return_value", "list_partitions", "assert_called_once_with", "TABLE_REFERENCE"], ["mock_client", "return_value", "list_partitions", "assert_called_once_with", "TABLE_REFERENCE"], ["mock_client", "return_value", "get_table", "assert_called_once_with", "TABLE_REFERENCE"], ["mock_client", "return_value", "get_table", "assert_called_once_with", "TABLE_REFERENCE"]], "TABLE_REFERENCE_REPR": [["TABLE_REFERENCE", "TableReference", "from_api_repr", "TABLE_REFERENCE_REPR"], ["mock_table", "from_api_repr", "assert_called_once_with", "TABLE_REFERENCE_REPR"], ["mock_table", "from_api_repr", "assert_called_once_with", "TABLE_REFERENCE_REPR"], ["table", "TABLE_REFERENCE_REPR"], ["body", "TABLE_REFERENCE_REPR", "view"], ["body", "TABLE_REFERENCE_REPR"], ["body", "TABLE_REFERENCE_REPR", "materialized_view"]], "VIEW_ID": []}, "no_types_annot": {"D": 2, "I": 0, "U": 632}, "session_id": "IA1MMOxQS78bO20LRifCSrKlAMFOkzvZBpbdQe3meRo", "set": null, "tc": [false, null], "type_annot_cove": 0.0, "typed_seq": "", "untyped_seq": "", "variables": {"CREDENTIALS": "", "DATASET_ID": "", "JOB_ID": "", "LOCATION": "", "PARTITION_ID": "", "PROJECT_ID": "", "TABLE_ID": "", "TABLE_REFERENCE": "", "TABLE_REFERENCE_REPR": "", "VIEW_ID": ""}, "variables_p": {"CREDENTIALS": [["Dict[str, str]", 0.30913458656617765], ["List[Dict[str, Any]]", 0.1606242902670402], ["str", 0.15900606749802687], ["bytes", 0.11108380348029706], ["int", 0.09775834195999317]], "DATASET_ID": [["int", 0.2823037758550826], ["str", 0.277911798802124], ["ClassVar[str]", 0.08557735312488643]], "JOB_ID": [["int", 0.40562180775021395], ["str", 0.29668656361623585]], "LOCATION": [["str", 0.1855870786781806], ["List[str]", 0.12447729406280802], ["Dict[str, Union[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any]]", 0.10765627341943328], ["Dict[str, int]", 0.10117746468682731], ["List[Dict[str, Any]]", 0.09762038690163714], ["list", 0.09333200894378404]], "PARTITION_ID": [["str", 0.8128175450188098], ["Dict[str, Dict[str, Any]]", 0.0968437009125123]], "PROJECT_ID": [["str", 0.7870927165786193], ["int", 0.12167954064913078]], "TABLE_ID": [["str", 0.2871854734943138], ["int", 0.17374947213988923], ["Type[Dict[Any, Any]]", 0.07825899842308061]], "TABLE_REFERENCE": [["Dict[str, str]", 0.31224896849295913], ["Dict[str, Dict[str, Any]]", 0.20698663856389168], ["Dict[str, List[Any]]", 0.19260497081708813], ["Dict[str, Union[None, int, str]]", 0.10555784725241811], ["List[str]", 0.0926208798241214], ["Dict[str, Union[Any, str]]", 0.08998069504952177]], "TABLE_REFERENCE_REPR": [["str", 0.2153220756307876], ["List[Union[Any, Any, Any, Any]]", 0.08894922646366077]], "VIEW_ID": [["Optional[str]", 0.09999999999999999], ["int", 0.09999999999999999], ["List[int]", 0.09999999999999999]]}}}