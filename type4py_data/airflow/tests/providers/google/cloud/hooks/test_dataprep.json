{"error": null, "response": {"classes": [{"cls_lc": [[42, 0], [273, 42]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[43, 4], [46, 79]], "fn_var_ln": {"hook": [[46, 12], [46, 21]]}, "fn_var_occur": {"hook": [["self", "hook", "GoogleDataprepHook", "dataprep_conn_id"]]}, "name": "setup_method", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "hook", "GoogleDataprepHook", "dataprep_conn_id"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestGoogleDataprepHook.setup_method", "ret_exprs": [], "ret_type": "", "variables": {"hook": ""}, "variables_p": {"hook": [["List[int]", 0.48648793344640595], ["int", 0.12102247359681272], ["Tuple[bytes, bytes]", 0.09454323230612932], ["str", 0.09268397231168002], ["List[str]", 0.08487504227962583]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[49, 4], [54, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_get_jobs_for_job_group_should_be_called_once_with_params", "params": {"mock_get_request": "", "self": ""}, "params_descr": {"mock_get_request": "", "self": ""}, "params_occur": {"mock_get_request": [["mock_get_request", "assert_called_once_with", "URL", "JOB_ID", "headers", "TOKEN"]], "self": [["self", "hook", "get_jobs_for_job_group", "JOB_ID"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_request": [["str", 0.47641504266172036], ["bool", 0.10574860426408889], ["List[Dict[str, Any]]", 0.09788295373087699]], "self": []}, "q_name": "TestGoogleDataprepHook.test_get_jobs_for_job_group_should_be_called_once_with_params", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[60, 4], [62, 47]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_get_jobs_for_job_group_should_pass_after_retry", "params": {"mock_get_request": "", "self": ""}, "params_descr": {"mock_get_request": "", "self": ""}, "params_occur": {"mock_get_request": [["mock_get_request", "call_count"]], "self": [["self", "hook", "get_jobs_for_job_group", "JOB_ID"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_request": [], "self": []}, "q_name": "TestGoogleDataprepHook.test_get_jobs_for_job_group_should_pass_after_retry", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[68, 4], [72, 47]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_get_jobs_for_job_group_should_not_retry_after_success", "params": {"mock_get_request": "", "self": ""}, "params_descr": {"mock_get_request": "", "self": ""}, "params_occur": {"mock_get_request": [["mock_get_request", "call_count"]], "self": [["self", "hook", "get_jobs_for_job_group", "retry", "sleep", "mock", "Mock"], ["self", "hook", "get_jobs_for_job_group", "JOB_ID"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_request": [], "self": []}, "q_name": "TestGoogleDataprepHook.test_get_jobs_for_job_group_should_not_retry_after_success", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[78, 4], [82, 47]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_get_jobs_for_job_group_should_retry_after_four_errors", "params": {"mock_get_request": "", "self": ""}, "params_descr": {"mock_get_request": "", "self": ""}, "params_occur": {"mock_get_request": [["mock_get_request", "call_count"]], "self": [["self", "hook", "get_jobs_for_job_group", "retry", "sleep", "mock", "Mock"], ["self", "hook", "get_jobs_for_job_group", "JOB_ID"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_request": [], "self": []}, "q_name": "TestGoogleDataprepHook.test_get_jobs_for_job_group_should_retry_after_four_errors", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[88, 4], [94, 47]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_get_jobs_for_job_group_raise_error_after_five_calls", "params": {"mock_get_request": "", "self": ""}, "params_descr": {"mock_get_request": "", "self": ""}, "params_occur": {"mock_get_request": [["mock_get_request", "call_count"]], "self": [["self", "hook", "get_jobs_for_job_group", "retry", "sleep", "mock", "Mock"], ["self", "hook", "get_jobs_for_job_group", "JOB_ID"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_request": [["dict", 0.0946047747653896]], "self": []}, "q_name": "TestGoogleDataprepHook.test_get_jobs_for_job_group_raise_error_after_five_calls", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[97, 4], [106, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_get_job_group_should_be_called_once_with_params", "params": {"mock_get_request": "", "self": ""}, "params_descr": {"mock_get_request": "", "self": ""}, "params_occur": {"mock_get_request": [["mock_get_request", "assert_called_once_with", "URL", "JOB_ID", "headers", "TOKEN", "params", "False"]], "self": [["self", "hook", "get_job_group", "JOB_ID", "EMBED", "INCLUDE_DELETED"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_request": [["str", 0.27921716653588524], ["bool", 0.10897527516928841], ["List[Dict[str, Any]]", 0.09113709517889991]], "self": []}, "q_name": "TestGoogleDataprepHook.test_get_job_group_should_be_called_once_with_params", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[112, 4], [114, 47]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_get_job_group_should_pass_after_retry", "params": {"mock_get_request": "", "self": ""}, "params_descr": {"mock_get_request": "", "self": ""}, "params_occur": {"mock_get_request": [["mock_get_request", "call_count"]], "self": [["self", "hook", "get_job_group", "JOB_ID", "EMBED", "INCLUDE_DELETED"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_request": [["Dict[str, Any]", 0.09219639590562355]], "self": []}, "q_name": "TestGoogleDataprepHook.test_get_job_group_should_pass_after_retry", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[120, 4], [123, 47]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_get_job_group_should_not_retry_after_success", "params": {"mock_get_request": "", "self": ""}, "params_descr": {"mock_get_request": "", "self": ""}, "params_occur": {"mock_get_request": [["mock_get_request", "call_count"]], "self": [["self", "hook", "get_job_group", "retry", "sleep", "mock", "Mock"], ["self", "hook", "get_job_group", "JOB_ID", "EMBED", "INCLUDE_DELETED"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_request": [["Dict[str, Any]", 0.09219639590562355]], "self": []}, "q_name": "TestGoogleDataprepHook.test_get_job_group_should_not_retry_after_success", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[135, 4], [138, 47]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_get_job_group_should_retry_after_four_errors", "params": {"mock_get_request": "", "self": ""}, "params_descr": {"mock_get_request": "", "self": ""}, "params_occur": {"mock_get_request": [["mock_get_request", "call_count"]], "self": [["self", "hook", "get_job_group", "retry", "sleep", "mock", "Mock"], ["self", "hook", "get_job_group", "JOB_ID", "EMBED", "INCLUDE_DELETED"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_request": [["Dict[str, Any]", 0.09607174334242652]], "self": []}, "q_name": "TestGoogleDataprepHook.test_get_job_group_should_retry_after_four_errors", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[144, 4], [150, 47]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_get_job_group_raise_error_after_five_calls", "params": {"mock_get_request": "", "self": ""}, "params_descr": {"mock_get_request": "", "self": ""}, "params_occur": {"mock_get_request": [["mock_get_request", "call_count"]], "self": [["self", "hook", "get_job_group", "retry", "sleep", "mock", "Mock"], ["self", "hook", "get_job_group", "JOB_ID", "EMBED", "INCLUDE_DELETED"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_request": [], "self": []}, "q_name": "TestGoogleDataprepHook.test_get_job_group_raise_error_after_five_calls", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[153, 4], [162, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_run_job_group_should_be_called_once_with_params", "params": {"mock_get_request": "", "self": ""}, "params_descr": {"mock_get_request": "", "self": ""}, "params_occur": {"mock_get_request": [["mock_get_request", "assert_called_once_with", "URL", "headers", "TOKEN", "data", "json", "dumps", "DATA"]], "self": [["self", "hook", "run_job_group", "body_request", "DATA"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_request": [["dict", 0.11080384388751692], ["requests.Response", 0.09469126865089601], ["Mapping[str, str]", 0.09241563096429532]], "self": []}, "q_name": "TestGoogleDataprepHook.test_run_job_group_should_be_called_once_with_params", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[168, 4], [170, 47]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_run_job_group_should_pass_after_retry", "params": {"mock_get_request": "", "self": ""}, "params_descr": {"mock_get_request": "", "self": ""}, "params_occur": {"mock_get_request": [["mock_get_request", "call_count"]], "self": [["self", "hook", "run_job_group", "body_request", "DATA"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_request": [["dict", 0.09527594603115985]], "self": []}, "q_name": "TestGoogleDataprepHook.test_run_job_group_should_pass_after_retry", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[176, 4], [179, 47]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_run_job_group_should_not_retry_after_success", "params": {"mock_get_request": "", "self": ""}, "params_descr": {"mock_get_request": "", "self": ""}, "params_occur": {"mock_get_request": [["mock_get_request", "call_count"]], "self": [["self", "hook", "run_job_group", "retry", "sleep", "mock", "Mock"], ["self", "hook", "run_job_group", "body_request", "DATA"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_request": [["dict", 0.09527594603115985]], "self": []}, "q_name": "TestGoogleDataprepHook.test_run_job_group_should_not_retry_after_success", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[191, 4], [194, 47]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_run_job_group_should_retry_after_four_errors", "params": {"mock_get_request": "", "self": ""}, "params_descr": {"mock_get_request": "", "self": ""}, "params_occur": {"mock_get_request": [["mock_get_request", "call_count"]], "self": [["self", "hook", "run_job_group", "retry", "sleep", "mock", "Mock"], ["self", "hook", "run_job_group", "body_request", "DATA"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_request": [["dict", 0.0935019578967776]], "self": []}, "q_name": "TestGoogleDataprepHook.test_run_job_group_should_retry_after_four_errors", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[200, 4], [206, 47]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_run_job_group_raise_error_after_five_calls", "params": {"mock_get_request": "", "self": ""}, "params_descr": {"mock_get_request": "", "self": ""}, "params_occur": {"mock_get_request": [["mock_get_request", "call_count"]], "self": [["self", "hook", "run_job_group", "retry", "sleep", "mock", "Mock"], ["self", "hook", "run_job_group", "body_request", "DATA"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_request": [["dict", 0.09518779018698668]], "self": []}, "q_name": "TestGoogleDataprepHook.test_run_job_group_raise_error_after_five_calls", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[209, 4], [217, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_get_job_group_status_should_be_called_once_with_params", "params": {"mock_get_request": "", "self": ""}, "params_descr": {"mock_get_request": "", "self": ""}, "params_occur": {"mock_get_request": [["mock_get_request", "assert_called_once_with", "URL", "JOB_ID", "headers", "TOKEN"]], "self": [["self", "hook", "get_job_group_status", "job_group_id", "JOB_ID"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_request": [["str", 0.7943919658686858], ["bool", 0.09973272186364678]], "self": []}, "q_name": "TestGoogleDataprepHook.test_get_job_group_status_should_be_called_once_with_params", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[223, 4], [225, 47]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_get_job_group_status_should_pass_after_retry", "params": {"mock_get_request": "", "self": ""}, "params_descr": {"mock_get_request": "", "self": ""}, "params_occur": {"mock_get_request": [["mock_get_request", "call_count"]], "self": [["self", "hook", "get_job_group_status", "job_group_id", "JOB_ID"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_request": [], "self": []}, "q_name": "TestGoogleDataprepHook.test_get_job_group_status_should_pass_after_retry", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[231, 4], [234, 47]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_get_job_group_status_retry_after_success", "params": {"mock_get_request": "", "self": ""}, "params_descr": {"mock_get_request": "", "self": ""}, "params_occur": {"mock_get_request": [["mock_get_request", "call_count"]], "self": [["self", "hook", "run_job_group", "retry", "sleep", "mock", "Mock"], ["self", "hook", "get_job_group_status", "job_group_id", "JOB_ID"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_request": [], "self": []}, "q_name": "TestGoogleDataprepHook.test_get_job_group_status_retry_after_success", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[246, 4], [249, 47]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_get_job_group_status_four_errors", "params": {"mock_get_request": "", "self": ""}, "params_descr": {"mock_get_request": "", "self": ""}, "params_occur": {"mock_get_request": [["mock_get_request", "call_count"]], "self": [["self", "hook", "run_job_group", "retry", "sleep", "mock", "Mock"], ["self", "hook", "get_job_group_status", "job_group_id", "JOB_ID"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_request": [["dict", 0.09272735209117014]], "self": []}, "q_name": "TestGoogleDataprepHook.test_get_job_group_status_four_errors", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[255, 4], [260, 47]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_get_job_group_status_five_calls", "params": {"mock_get_request": "", "self": ""}, "params_descr": {"mock_get_request": "", "self": ""}, "params_occur": {"mock_get_request": [["mock_get_request", "call_count"]], "self": [["self", "hook", "get_job_group_status", "retry", "sleep", "mock", "Mock"], ["self", "hook", "get_job_group_status", "job_group_id", "JOB_ID"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_request": [["dict", 0.09307849669023442]], "self": []}, "q_name": "TestGoogleDataprepHook.test_get_job_group_status_five_calls", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[269, 4], [273, 42]], "fn_var_ln": {"hook": [[271, 12], [271, 16]]}, "fn_var_occur": {"hook": [["hook", "GoogleDataprepHook"], ["hook", "_token"], ["hook", "_base_url"]]}, "name": "test_conn_extra_backcompat_prefix", "params": {"self": "", "uri": ""}, "params_descr": {"self": "", "uri": ""}, "params_occur": {"self": [], "uri": [["patch", "dict", "os", "environ", "uri"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "uri": [["str", 0.08425886067818614]]}, "q_name": "TestGoogleDataprepHook.test_conn_extra_backcompat_prefix", "ret_exprs": [], "ret_type": "", "variables": {"hook": ""}, "variables_p": {"hook": [["str", 0.5961864610310503]]}}], "name": "TestGoogleDataprepHook", "q_name": "TestGoogleDataprepHook", "variables": {}, "variables_p": {}}, {"cls_lc": [[276, 0], [474, 47]], "cls_var_ln": {"_url": [[277, 4], [277, 8]]}, "cls_var_occur": {"_url": []}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[279, 4], [291, 79]], "fn_var_ln": {"_expected_copy_flow_hook_data": [[281, 8], [281, 42]], "_expected_run_flow_hook_data": [[288, 8], [288, 41]], "_flow_id": [[280, 8], [280, 21]], "hook": [[291, 12], [291, 21]]}, "fn_var_occur": {"_expected_copy_flow_hook_data": [["self", "_expected_copy_flow_hook_data", "json", "dumps", "False"]], "_expected_run_flow_hook_data": [["self", "_expected_run_flow_hook_data", "json", "dumps"]], "_flow_id": [["self", "_flow_id"]], "hook": [["self", "hook", "GoogleDataprepHook", "dataprep_conn_id"]]}, "name": "setup_method", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "_flow_id"], ["self", "_expected_copy_flow_hook_data", "json", "dumps", "False"], ["self", "_expected_run_flow_hook_data", "json", "dumps"], ["self", "hook", "GoogleDataprepHook", "dataprep_conn_id"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestGoogleDataprepFlowPathHooks.setup_method", "ret_exprs": [], "ret_type": "", "variables": {"_expected_copy_flow_hook_data": "", "_expected_run_flow_hook_data": "", "_flow_id": "", "hook": ""}, "variables_p": {"_expected_copy_flow_hook_data": [["str", 0.20490765289025567], ["os._Environ[str]", 0.11570788457170715], ["float", 0.10157841376688172], ["Dict[str, Optional[str]]", 0.098686621593526], ["Dict[str, str]", 0.09495987133694586], ["List[str]", 0.08874730490725942], ["int", 0.0868125236120513]], "_expected_run_flow_hook_data": [["bytes", 0.38827985127481035], ["Dict[str, str]", 0.2118061886143392], ["str", 0.19513419761202344], ["List[str]", 0.10618566579686335], ["OrderedDict[str, int]", 0.09859409670196366]], "_flow_id": [["str", 0.8866914571927804], ["int", 0.1133085428072196]], "hook": [["List[int]", 0.48648793344640595], ["int", 0.12102247359681272], ["Tuple[bytes, bytes]", 0.09454323230612932], ["str", 0.09268397231168002], ["List[str]", 0.08487504227962583]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[294, 4], [305, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_copy_flow_should_be_called_once_with_params", "params": {"mock_get_request": "", "self": ""}, "params_descr": {"mock_get_request": "", "self": ""}, "params_occur": {"mock_get_request": [["mock_get_request", "assert_called_once_with", "self", "_url", "self", "_flow_id", "headers", "TOKEN", "data", "self", "_expected_copy_flow_hook_data"]], "self": [["self", "hook", "copy_flow", "flow_id", "self", "_flow_id"], ["mock_get_request", "assert_called_once_with", "self", "_url", "self", "_flow_id", "headers", "TOKEN", "data", "self", "_expected_copy_flow_hook_data"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_request": [["str", 0.4785504367037726], ["List[List[int]]", 0.25135514017103416]], "self": []}, "q_name": "TestGoogleDataprepFlowPathHooks.test_copy_flow_should_be_called_once_with_params", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[311, 4], [313, 47]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_copy_flow_should_pass_after_retry", "params": {"mock_get_request": "", "self": ""}, "params_descr": {"mock_get_request": "", "self": ""}, "params_occur": {"mock_get_request": [["mock_get_request", "call_count"]], "self": [["self", "hook", "copy_flow", "flow_id", "self", "_flow_id"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_request": [["Dict[str, Any]", 0.09052919503904931]], "self": []}, "q_name": "TestGoogleDataprepFlowPathHooks.test_copy_flow_should_pass_after_retry", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[319, 4], [322, 47]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_copy_flow_should_not_retry_after_success", "params": {"mock_get_request": "", "self": ""}, "params_descr": {"mock_get_request": "", "self": ""}, "params_occur": {"mock_get_request": [["mock_get_request", "call_count"]], "self": [["self", "hook", "copy_flow", "retry", "sleep", "mock", "Mock"], ["self", "hook", "copy_flow", "flow_id", "self", "_flow_id"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_request": [["Dict[str, Any]", 0.09052919503904931]], "self": []}, "q_name": "TestGoogleDataprepFlowPathHooks.test_copy_flow_should_not_retry_after_success", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[334, 4], [337, 47]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_copy_flow_should_retry_after_four_errors", "params": {"mock_get_request": "", "self": ""}, "params_descr": {"mock_get_request": "", "self": ""}, "params_occur": {"mock_get_request": [["mock_get_request", "call_count"]], "self": [["self", "hook", "copy_flow", "retry", "sleep", "mock", "Mock"], ["self", "hook", "copy_flow", "flow_id", "self", "_flow_id"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_request": [], "self": []}, "q_name": "TestGoogleDataprepFlowPathHooks.test_copy_flow_should_retry_after_four_errors", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[343, 4], [348, 47]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_copy_flow_raise_error_after_five_calls", "params": {"mock_get_request": "", "self": ""}, "params_descr": {"mock_get_request": "", "self": ""}, "params_occur": {"mock_get_request": [["mock_get_request", "call_count"]], "self": [["self", "hook", "copy_flow", "retry", "sleep", "mock", "Mock"], ["self", "hook", "copy_flow", "flow_id", "self", "_flow_id"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_request": [["dict", 0.09349759040680501]], "self": []}, "q_name": "TestGoogleDataprepFlowPathHooks.test_copy_flow_raise_error_after_five_calls", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[351, 4], [361, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_delete_flow_should_be_called_once_with_params", "params": {"mock_get_request": "", "self": ""}, "params_descr": {"mock_get_request": "", "self": ""}, "params_occur": {"mock_get_request": [["mock_get_request", "assert_called_once_with", "self", "_url", "self", "_flow_id", "headers", "TOKEN"]], "self": [["self", "hook", "delete_flow", "flow_id", "self", "_flow_id"], ["mock_get_request", "assert_called_once_with", "self", "_url", "self", "_flow_id", "headers", "TOKEN"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_request": [["str", 0.48296031153225555], ["List[Dict[str, Any]]", 0.11593090576127558], ["bool", 0.09699983908709511]], "self": []}, "q_name": "TestGoogleDataprepFlowPathHooks.test_delete_flow_should_be_called_once_with_params", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[367, 4], [369, 47]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_delete_flow_should_pass_after_retry", "params": {"mock_get_request": "", "self": ""}, "params_descr": {"mock_get_request": "", "self": ""}, "params_occur": {"mock_get_request": [["mock_get_request", "call_count"]], "self": [["self", "hook", "delete_flow", "flow_id", "self", "_flow_id"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_request": [], "self": []}, "q_name": "TestGoogleDataprepFlowPathHooks.test_delete_flow_should_pass_after_retry", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[375, 4], [378, 47]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_delete_flow_should_not_retry_after_success", "params": {"mock_get_request": "", "self": ""}, "params_descr": {"mock_get_request": "", "self": ""}, "params_occur": {"mock_get_request": [["mock_get_request", "call_count"]], "self": [["self", "hook", "delete_flow", "retry", "sleep", "mock", "Mock"], ["self", "hook", "delete_flow", "flow_id", "self", "_flow_id"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_request": [], "self": []}, "q_name": "TestGoogleDataprepFlowPathHooks.test_delete_flow_should_not_retry_after_success", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[390, 4], [393, 47]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_delete_flow_should_retry_after_four_errors", "params": {"mock_get_request": "", "self": ""}, "params_descr": {"mock_get_request": "", "self": ""}, "params_occur": {"mock_get_request": [["mock_get_request", "call_count"]], "self": [["self", "hook", "delete_flow", "retry", "sleep", "mock", "Mock"], ["self", "hook", "delete_flow", "flow_id", "self", "_flow_id"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_request": [["dict", 0.09584625664994259], ["Dict[str, Any]", 0.0857006998767233]], "self": []}, "q_name": "TestGoogleDataprepFlowPathHooks.test_delete_flow_should_retry_after_four_errors", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[399, 4], [404, 47]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_delete_flow_raise_error_after_five_calls", "params": {"mock_get_request": "", "self": ""}, "params_descr": {"mock_get_request": "", "self": ""}, "params_occur": {"mock_get_request": [["mock_get_request", "call_count"]], "self": [["self", "hook", "delete_flow", "retry", "sleep", "mock", "Mock"], ["self", "hook", "delete_flow", "flow_id", "self", "_flow_id"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_request": [["dict", 0.09422582030861583]], "self": []}, "q_name": "TestGoogleDataprepFlowPathHooks.test_delete_flow_raise_error_after_five_calls", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[407, 4], [419, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_run_flow_should_be_called_once_with_params", "params": {"mock_get_request": "", "self": ""}, "params_descr": {"mock_get_request": "", "self": ""}, "params_occur": {"mock_get_request": [["mock_get_request", "assert_called_once_with", "self", "_url", "self", "_flow_id", "headers", "TOKEN", "data", "self", "_expected_run_flow_hook_data"]], "self": [["self", "hook", "run_flow", "flow_id", "self", "_flow_id", "body_request"], ["mock_get_request", "assert_called_once_with", "self", "_url", "self", "_flow_id", "headers", "TOKEN", "data", "self", "_expected_run_flow_hook_data"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_request": [["List[Dict[str, Any]]", 0.11104654337326336], ["bool", 0.09882585431344099], ["List[List[int]]", 0.0948668410792022]], "self": []}, "q_name": "TestGoogleDataprepFlowPathHooks.test_run_flow_should_be_called_once_with_params", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[425, 4], [430, 47]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_run_flow_should_pass_after_retry", "params": {"mock_get_request": "", "self": ""}, "params_descr": {"mock_get_request": "", "self": ""}, "params_occur": {"mock_get_request": [["mock_get_request", "call_count"]], "self": [["self", "hook", "run_flow", "flow_id", "self", "_flow_id", "body_request"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_request": [["dict", 0.09203712518765389]], "self": []}, "q_name": "TestGoogleDataprepFlowPathHooks.test_run_flow_should_pass_after_retry", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[436, 4], [442, 47]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_run_flow_should_not_retry_after_success", "params": {"mock_get_request": "", "self": ""}, "params_descr": {"mock_get_request": "", "self": ""}, "params_occur": {"mock_get_request": [["mock_get_request", "call_count"]], "self": [["self", "hook", "run_flow", "retry", "sleep", "mock", "Mock"], ["self", "hook", "run_flow", "flow_id", "self", "_flow_id", "body_request"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_request": [["dict", 0.09203712518765389]], "self": []}, "q_name": "TestGoogleDataprepFlowPathHooks.test_run_flow_should_not_retry_after_success", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[454, 4], [460, 47]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_run_flow_should_retry_after_four_errors", "params": {"mock_get_request": "", "self": ""}, "params_descr": {"mock_get_request": "", "self": ""}, "params_occur": {"mock_get_request": [["mock_get_request", "call_count"]], "self": [["self", "hook", "run_flow", "retry", "sleep", "mock", "Mock"], ["self", "hook", "run_flow", "flow_id", "self", "_flow_id", "body_request"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_request": [["dict", 0.09404457422058714]], "self": []}, "q_name": "TestGoogleDataprepFlowPathHooks.test_run_flow_should_retry_after_four_errors", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[466, 4], [474, 47]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_run_flow_raise_error_after_five_calls", "params": {"mock_get_request": "", "self": ""}, "params_descr": {"mock_get_request": "", "self": ""}, "params_occur": {"mock_get_request": [["mock_get_request", "call_count"]], "self": [["self", "hook", "run_flow", "retry", "sleep", "mock", "Mock"], ["self", "hook", "run_flow", "flow_id", "self", "_flow_id", "body_request"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_request": [["dict", 0.09421882051937729]], "self": []}, "q_name": "TestGoogleDataprepFlowPathHooks.test_run_flow_raise_error_after_five_calls", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestGoogleDataprepFlowPathHooks", "q_name": "TestGoogleDataprepFlowPathHooks", "variables": {"_url": ""}, "variables_p": {"_url": [["str", 0.8999999999999999], ["ClassVar[str]", 0.09999999999999999]]}}], "funcs": [], "imports": ["__future__", "annotations", "json", "os", "unittest", "mock", "unittest", "mock", "patch", "pytest", "pytest", "param", "requests", "HTTPError", "tenacity", "RetryError", "airflow", "providers", "google", "cloud", "hooks", "dataprep", "GoogleDataprepHook"], "mod_var_ln": {"DATA": [[38, 0], [38, 4]], "EMBED": [[36, 0], [36, 5]], "EXTRA": [[35, 0], [35, 5]], "INCLUDE_DELETED": [[37, 0], [37, 15]], "JOB_ID": [[32, 0], [32, 6]], "RECIPE_ID": [[33, 0], [33, 9]], "TOKEN": [[34, 0], [34, 5]], "URL": [[39, 0], [39, 3]]}, "mod_var_occur": {"DATA": [["self", "hook", "run_job_group", "body_request", "DATA"], ["mock_get_request", "assert_called_once_with", "URL", "headers", "TOKEN", "data", "json", "dumps", "DATA"], ["self", "hook", "run_job_group", "body_request", "DATA"], ["self", "hook", "run_job_group", "body_request", "DATA"], ["self", "hook", "run_job_group", "body_request", "DATA"], ["self", "hook", "run_job_group", "body_request", "DATA"]], "EMBED": [["self", "hook", "get_job_group", "JOB_ID", "EMBED", "INCLUDE_DELETED"], ["self", "hook", "get_job_group", "JOB_ID", "EMBED", "INCLUDE_DELETED"], ["self", "hook", "get_job_group", "JOB_ID", "EMBED", "INCLUDE_DELETED"], ["self", "hook", "get_job_group", "JOB_ID", "EMBED", "INCLUDE_DELETED"], ["self", "hook", "get_job_group", "JOB_ID", "EMBED", "INCLUDE_DELETED"]], "EXTRA": [["conn", "return_value", "extra_dejson", "EXTRA"], ["conn", "return_value", "extra_dejson", "EXTRA"]], "INCLUDE_DELETED": [["self", "hook", "get_job_group", "JOB_ID", "EMBED", "INCLUDE_DELETED"], ["self", "hook", "get_job_group", "JOB_ID", "EMBED", "INCLUDE_DELETED"], ["self", "hook", "get_job_group", "JOB_ID", "EMBED", "INCLUDE_DELETED"], ["self", "hook", "get_job_group", "JOB_ID", "EMBED", "INCLUDE_DELETED"], ["self", "hook", "get_job_group", "JOB_ID", "EMBED", "INCLUDE_DELETED"]], "JOB_ID": [["self", "hook", "get_jobs_for_job_group", "JOB_ID"], ["mock_get_request", "assert_called_once_with", "URL", "JOB_ID", "headers", "TOKEN"], ["self", "hook", "get_jobs_for_job_group", "JOB_ID"], ["self", "hook", "get_jobs_for_job_group", "JOB_ID"], ["self", "hook", "get_jobs_for_job_group", "JOB_ID"], ["self", "hook", "get_jobs_for_job_group", "JOB_ID"], ["self", "hook", "get_job_group", "JOB_ID", "EMBED", "INCLUDE_DELETED"], ["mock_get_request", "assert_called_once_with", "URL", "JOB_ID", "headers", "TOKEN", "params", "False"], ["self", "hook", "get_job_group", "JOB_ID", "EMBED", "INCLUDE_DELETED"], ["self", "hook", "get_job_group", "JOB_ID", "EMBED", "INCLUDE_DELETED"], ["self", "hook", "get_job_group", "JOB_ID", "EMBED", "INCLUDE_DELETED"], ["self", "hook", "get_job_group", "JOB_ID", "EMBED", "INCLUDE_DELETED"], ["self", "hook", "get_job_group_status", "job_group_id", "JOB_ID"], ["mock_get_request", "assert_called_once_with", "URL", "JOB_ID", "headers", "TOKEN"], ["self", "hook", "get_job_group_status", "job_group_id", "JOB_ID"], ["self", "hook", "get_job_group_status", "job_group_id", "JOB_ID"], ["self", "hook", "get_job_group_status", "job_group_id", "JOB_ID"], ["self", "hook", "get_job_group_status", "job_group_id", "JOB_ID"]], "RECIPE_ID": [["DATA", "RECIPE_ID"]], "TOKEN": [["EXTRA", "TOKEN"], ["mock_get_request", "assert_called_once_with", "URL", "JOB_ID", "headers", "TOKEN"], ["mock_get_request", "assert_called_once_with", "URL", "JOB_ID", "headers", "TOKEN", "params", "False"], ["mock_get_request", "assert_called_once_with", "URL", "headers", "TOKEN", "data", "json", "dumps", "DATA"], ["mock_get_request", "assert_called_once_with", "URL", "JOB_ID", "headers", "TOKEN"], ["mock_get_request", "assert_called_once_with", "self", "_url", "self", "_flow_id", "headers", "TOKEN", "data", "self", "_expected_copy_flow_hook_data"], ["mock_get_request", "assert_called_once_with", "self", "_url", "self", "_flow_id", "headers", "TOKEN"], ["mock_get_request", "assert_called_once_with", "self", "_url", "self", "_flow_id", "headers", "TOKEN", "data", "self", "_expected_run_flow_hook_data"]], "URL": [["mock_get_request", "assert_called_once_with", "URL", "JOB_ID", "headers", "TOKEN"], ["mock_get_request", "assert_called_once_with", "URL", "JOB_ID", "headers", "TOKEN", "params", "False"], ["mock_get_request", "assert_called_once_with", "URL", "headers", "TOKEN", "data", "json", "dumps", "DATA"], ["mock_get_request", "assert_called_once_with", "URL", "JOB_ID", "headers", "TOKEN"]]}, "no_types_annot": {"D": 0, "I": 0, "U": 89}, "session_id": "KLSHpvJxC3iRdhtuxzH2xhgYZ1NZdP1DlzqJHUz8v7s", "set": null, "tc": [false, null], "type_annot_cove": 0.0, "typed_seq": "", "untyped_seq": "", "variables": {"DATA": "", "EMBED": "", "EXTRA": "", "INCLUDE_DELETED": "", "JOB_ID": "", "RECIPE_ID": "", "TOKEN": "", "URL": ""}, "variables_p": {"DATA": [["str", 0.39700261329709957], ["dict", 0.29588260630636215], ["List[Dict[str, Any]]", 0.1038603357355134], ["Counter[str]", 0.0972774213273575]], "EMBED": [["int", 0.6020297151285097]], "EXTRA": [["int", 0.5721761269087605], ["bytes", 0.08982847629946533], ["Dict[str, Union[Any, Any, Any]]", 0.08449884919794355], ["Dict[str, Dict[str, Any]]", 0.08449884919794355], ["List[Dict[str, Any]]", 0.08449884919794355], ["list", 0.08449884919794355]], "INCLUDE_DELETED": [["int", 0.9073571173584376], ["str", 0.0926428826415624]], "JOB_ID": [["int", 0.5476913160941753], ["str", 0.21531665980736964]], "RECIPE_ID": [["str", 0.5678119199479292], ["int", 0.43218808005207077]], "TOKEN": [["str", 0.733260263184936], ["Dict[str, str]", 0.2667397368150641]], "URL": [["str", 1.0]]}}}