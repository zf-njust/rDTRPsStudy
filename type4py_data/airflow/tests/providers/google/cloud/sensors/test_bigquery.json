{"error": null, "response": {"classes": [{"cls_lc": [[43, 0], [138, 57]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[45, 4], [65, 9]], "fn_var_ln": {"results": [[55, 8], [55, 15]], "task": [[46, 8], [46, 12]]}, "fn_var_occur": {"results": [["results", "task", "poke", "mock", "MagicMock"], ["results", "True"]], "task": [["task", "BigQueryTableExistenceSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "gcp_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN"], ["results", "task", "poke", "mock", "MagicMock"]]}, "name": "test_passing_arguments_to_hook", "params": {"mock_hook": "", "self": ""}, "params_descr": {"mock_hook": "", "self": ""}, "params_occur": {"mock_hook": [["mock_hook", "return_value", "table_exists", "return_value", "True"], ["mock_hook", "assert_called_once_with", "gcp_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN"], ["mock_hook", "return_value", "table_exists", "assert_called_once_with", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_hook": [["mock.Mock", 0.18148633366687186]], "self": []}, "q_name": "TestBigqueryTableExistenceSensor.test_passing_arguments_to_hook", "ret_exprs": [], "ret_type": "", "variables": {"results": "", "task": ""}, "variables_p": {"results": [], "task": [["str", 0.09950138189795207], ["Dict[str, Any]", 0.08959874959019201], ["int", 0.08797648865878058], ["list", 0.08604531608300976]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[69, 4], [81, 36]], "fn_var_ln": {"task": [[70, 8], [70, 12]]}, "fn_var_occur": {"task": [["task", "BigQueryTableExistenceSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "gcp_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN", "deferrable", "True"], ["task", "execute", "mock", "MagicMock"]]}, "name": "test_table_existence_sensor_finish_before_deferred", "params": {"mock_defer": "", "mock_hook": "", "self": ""}, "params_descr": {"mock_defer": "", "mock_hook": "", "self": ""}, "params_occur": {"mock_defer": [["mock_defer", "called"]], "mock_hook": [["mock_hook", "return_value", "table_exists", "return_value", "True"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_defer": [["mock.Mock", 0.11317430297496633], ["mock.MagicMock", 0.05739707368022763]], "mock_hook": [], "self": []}, "q_name": "TestBigqueryTableExistenceSensor.test_table_existence_sensor_finish_before_deferred", "ret_exprs": [], "ret_type": "", "variables": {"task": ""}, "variables_p": {"task": [["str", 0.09950138189795207], ["Dict[str, Any]", 0.08959874959019201], ["int", 0.08797648865878058], ["list", 0.08604531608300976]]}}, {"docstring": {"func": "Asserts that a task is deferred and a BigQueryTableExistenceTrigger will be fired", "long_descr": "when the BigQueryTableExistenceAsyncSensor is executed.", "ret": null}, "fn_lc": [[84, 4], [101, 59]], "fn_var_ln": {"task": [[89, 8], [89, 12]]}, "fn_var_occur": {"task": [["task", "BigQueryTableExistenceSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "deferrable", "True"], ["task", "execute", "mock", "MagicMock"]]}, "name": "test_execute_deferred", "params": {"mock_hook": "", "self": ""}, "params_descr": {"mock_hook": "", "self": ""}, "params_occur": {"mock_hook": [["mock_hook", "return_value", "table_exists", "return_value", "False"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_hook": [], "self": []}, "q_name": "TestBigqueryTableExistenceSensor.test_execute_deferred", "ret_exprs": [], "ret_type": "", "variables": {"task": ""}, "variables_p": {"task": [["str", 0.09950138189795207], ["Dict[str, Any]", 0.08959874959019201], ["int", 0.08797648865878058], ["list", 0.08604531608300976]]}}, {"docstring": {"func": "Tests that an AirflowException is raised in case of error event", "long_descr": null, "ret": null}, "fn_lc": [[103, 4], [113, 107]], "fn_var_ln": {"task": [[105, 8], [105, 12]]}, "fn_var_occur": {"task": [["task", "BigQueryTableExistenceSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "deferrable", "True"], ["task", "execute_complete", "context", "event"]]}, "name": "test_execute_deferred_failure", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestBigqueryTableExistenceSensor.test_execute_deferred_failure", "ret_exprs": [], "ret_type": "", "variables": {"task": ""}, "variables_p": {"task": [["str", 0.09950138189795207], ["Dict[str, Any]", 0.08959874959019201], ["int", 0.08797648865878058], ["list", 0.08604531608300976]]}}, {"docstring": {"func": "Asserts that logging occurs as expected", "long_descr": null, "ret": null}, "fn_lc": [[115, 4], [127, 91]], "fn_var_ln": {"table_uri": [[124, 8], [124, 17]], "task": [[117, 8], [117, 12]]}, "fn_var_occur": {"table_uri": [["table_uri", "TEST_PROJECT_ID", "TEST_DATASET_ID", "TEST_TABLE_ID"], ["mock_log_info", "assert_called_with", "table_uri"]], "task": [["task", "BigQueryTableExistenceSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "deferrable", "True"], ["mock", "patch", "object", "task", "log", "mock_log_info"], ["task", "execute_complete", "context", "event"]]}, "name": "test_execute_complete", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestBigqueryTableExistenceSensor.test_execute_complete", "ret_exprs": [], "ret_type": "", "variables": {"table_uri": "", "task": ""}, "variables_p": {"table_uri": [["Type[Callable[..., Any]]", 0.20536771872417448], ["Dict[str, Any]", 0.1168512749485418], ["list", 0.0991527252011927], ["Dict[str, bool]", 0.09636940023255149], ["Dict[str, Union[Any, Any]]", 0.09376049641158597]], "task": [["str", 0.09950138189795207], ["Dict[str, Any]", 0.08959874959019201], ["int", 0.08797648865878058], ["list", 0.08604531608300976]]}}, {"docstring": {"func": "Asserts that logging occurs as expected", "long_descr": null, "ret": null}, "fn_lc": [[129, 4], [138, 57]], "fn_var_ln": {"task": [[131, 8], [131, 12]]}, "fn_var_occur": {"task": [["task", "BigQueryTableExistenceSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID"], ["task", "execute_complete", "context", "event", "None"]]}, "name": "test_execute_defered_complete_event_none", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestBigqueryTableExistenceSensor.test_execute_defered_complete_event_none", "ret_exprs": [], "ret_type": "", "variables": {"task": ""}, "variables_p": {"task": [["str", 0.09950138189795207], ["Dict[str, Any]", 0.08959874959019201], ["int", 0.08797648865878058], ["list", 0.08604531608300976]]}}], "name": "TestBigqueryTableExistenceSensor", "q_name": "TestBigqueryTableExistenceSensor", "variables": {}, "variables_p": {}}, {"cls_lc": [[141, 0], [250, 9]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[143, 4], [167, 9]], "fn_var_ln": {"results": [[154, 8], [154, 15]], "task": [[144, 8], [144, 12]]}, "fn_var_occur": {"results": [["results", "task", "poke", "mock", "MagicMock"], ["results", "True"]], "task": [["task", "BigQueryTablePartitionExistenceSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "partition_id", "TEST_PARTITION_ID", "gcp_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN"], ["results", "task", "poke", "mock", "MagicMock"]]}, "name": "test_passing_arguments_to_hook", "params": {"mock_hook": "", "self": ""}, "params_descr": {"mock_hook": "", "self": ""}, "params_occur": {"mock_hook": [["mock_hook", "return_value", "table_partition_exists", "return_value", "True"], ["mock_hook", "assert_called_once_with", "gcp_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN"], ["mock_hook", "return_value", "table_partition_exists", "assert_called_once_with", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "partition_id", "TEST_PARTITION_ID"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_hook": [], "self": []}, "q_name": "TestBigqueryTablePartitionExistenceSensor.test_passing_arguments_to_hook", "ret_exprs": [], "ret_type": "", "variables": {"results": "", "task": ""}, "variables_p": {"results": [], "task": [["Dict[str, Any]", 0.17061262659608187], ["int", 0.10404110909431573], ["str", 0.08959450822016728], ["Tuple[int]", 0.08553462390163724]]}}, {"docstring": {"func": "Asserts that a task is deferred and a BigQueryTablePartitionExistenceTrigger will be fired", "long_descr": "when the BigQueryTablePartitionExistenceSensor is executed and deferrable is set to True.", "ret": null}, "fn_lc": [[171, 4], [186, 36]], "fn_var_ln": {"task": [[176, 8], [176, 12]]}, "fn_var_occur": {"task": [["task", "BigQueryTablePartitionExistenceSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "partition_id", "TEST_PARTITION_ID", "deferrable", "True"], ["task", "execute", "mock", "MagicMock"]]}, "name": "test_table_partition_existence_sensor_finish_before_deferred", "params": {"mock_defer": "", "mock_hook": "", "self": ""}, "params_descr": {"mock_defer": "", "mock_hook": "", "self": ""}, "params_occur": {"mock_defer": [["mock_defer", "called"]], "mock_hook": [["mock_hook", "return_value", "table_partition_exists", "return_value", "True"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_defer": [["mock.Mock", 0.11317430297496633], ["mock.MagicMock", 0.05739707368022763]], "mock_hook": [], "self": []}, "q_name": "TestBigqueryTablePartitionExistenceSensor.test_table_partition_existence_sensor_finish_before_deferred", "ret_exprs": [], "ret_type": "", "variables": {"task": ""}, "variables_p": {"task": [["Dict[str, Any]", 0.17061262659608187], ["int", 0.10404110909431573], ["str", 0.08959450822016728], ["Tuple[int]", 0.08553462390163724]]}}, {"docstring": {"func": "Asserts that a task is deferred and a BigQueryTablePartitionExistenceTrigger will be fired", "long_descr": "when the BigQueryTablePartitionExistenceSensor is executed and deferrable is set to True.", "ret": null}, "fn_lc": [[189, 4], [207, 68]], "fn_var_ln": {"task": [[194, 8], [194, 12]]}, "fn_var_occur": {"task": [["task", "BigQueryTablePartitionExistenceSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "partition_id", "TEST_PARTITION_ID", "deferrable", "True"], ["task", "execute", "context"]]}, "name": "test_execute_with_deferrable_mode", "params": {"mock_hook": "", "self": ""}, "params_descr": {"mock_hook": "", "self": ""}, "params_occur": {"mock_hook": [["mock_hook", "return_value", "table_partition_exists", "return_value", "False"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_hook": [["mock.Mock", 0.1933053069714844]], "self": []}, "q_name": "TestBigqueryTablePartitionExistenceSensor.test_execute_with_deferrable_mode", "ret_exprs": [], "ret_type": "", "variables": {"task": ""}, "variables_p": {"task": [["Dict[str, Any]", 0.17061262659608187], ["int", 0.10404110909431573], ["str", 0.08959450822016728], ["Tuple[int]", 0.08553462390163724]]}}, {"docstring": {"func": "Tests that an AirflowException is raised in case of error event", "long_descr": null, "ret": null}, "fn_lc": [[209, 4], [220, 107]], "fn_var_ln": {"task": [[211, 8], [211, 12]]}, "fn_var_occur": {"task": [["task", "BigQueryTablePartitionExistenceSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "partition_id", "TEST_PARTITION_ID", "deferrable", "True"], ["task", "execute_complete", "context", "event"]]}, "name": "test_execute_with_deferrable_mode_execute_failure", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestBigqueryTablePartitionExistenceSensor.test_execute_with_deferrable_mode_execute_failure", "ret_exprs": [], "ret_type": "", "variables": {"task": ""}, "variables_p": {"task": [["Dict[str, Any]", 0.17061262659608187], ["int", 0.10404110909431573], ["str", 0.08959450822016728], ["Tuple[int]", 0.08553462390163724]]}}, {"docstring": {"func": "Asserts that logging occurs as expected", "long_descr": null, "ret": null}, "fn_lc": [[222, 4], [233, 57]], "fn_var_ln": {"task": [[224, 8], [224, 12]]}, "fn_var_occur": {"task": [["task", "BigQueryTablePartitionExistenceSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "partition_id", "TEST_PARTITION_ID", "deferrable", "True"], ["task", "execute_complete", "context", "event", "None"]]}, "name": "test_execute_complete_event_none", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestBigqueryTablePartitionExistenceSensor.test_execute_complete_event_none", "ret_exprs": [], "ret_type": "", "variables": {"task": ""}, "variables_p": {"task": [["Dict[str, Any]", 0.17061262659608187], ["int", 0.10404110909431573], ["str", 0.08959450822016728], ["Tuple[int]", 0.08553462390163724]]}}, {"docstring": {"func": "Asserts that logging occurs as expected", "long_descr": null, "ret": null}, "fn_lc": [[235, 4], [250, 9]], "fn_var_ln": {"table_uri": [[245, 8], [245, 17]], "task": [[237, 8], [237, 12]]}, "fn_var_occur": {"table_uri": [["table_uri", "TEST_PROJECT_ID", "TEST_DATASET_ID", "TEST_TABLE_ID"], ["mock_log_info", "assert_called_with", "TEST_PARTITION_ID", "table_uri"]], "task": [["task", "BigQueryTablePartitionExistenceSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "partition_id", "TEST_PARTITION_ID", "deferrable", "True"], ["mock", "patch", "object", "task", "log", "mock_log_info"], ["task", "execute_complete", "context", "event"]]}, "name": "test_execute_complete", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestBigqueryTablePartitionExistenceSensor.test_execute_complete", "ret_exprs": [], "ret_type": "", "variables": {"table_uri": "", "task": ""}, "variables_p": {"table_uri": [["list", 0.3684834448308729], ["Dict[str, bool]", 0.10565977081033613], ["Dict[str, Any]", 0.10352016571130528], ["Union[Literal, str]", 0.09622812639156697]], "task": [["Dict[str, Any]", 0.17061262659608187], ["int", 0.10404110909431573], ["str", 0.08959450822016728], ["Tuple[int]", 0.08553462390163724]]}}], "name": "TestBigqueryTablePartitionExistenceSensor", "q_name": "TestBigqueryTablePartitionExistenceSensor", "variables": {}, "variables_p": {}}, {"cls_lc": [[262, 0], [326, 57]], "cls_var_ln": {"depcrecation_message": [[263, 4], [263, 24]]}, "cls_var_occur": {"depcrecation_message": []}, "funcs": [{"docstring": {"func": "Asserts that a task is deferred and a BigQueryTableExistenceTrigger will be fired", "long_descr": "when the BigQueryTableExistenceAsyncSensor is executed.", "ret": null}, "fn_lc": [[271, 4], [288, 59]], "fn_var_ln": {"task": [[277, 12], [277, 16]]}, "fn_var_occur": {"task": [["task", "BigQueryTableExistenceAsyncSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID"], ["task", "execute", "context"]]}, "name": "test_big_query_table_existence_sensor_async", "params": {"mock_hook": "", "self": ""}, "params_descr": {"mock_hook": "", "self": ""}, "params_occur": {"mock_hook": [["mock_hook", "return_value", "table_exists", "return_value", "False"]], "self": [["pytest", "warns", "AirflowProviderDeprecationWarning", "match", "self", "depcrecation_message"]]}, "params_p": {"args": [], "kwargs": [], "mock_hook": [], "self": []}, "q_name": "TestBigQueryTableExistenceAsyncSensor.test_big_query_table_existence_sensor_async", "ret_exprs": [], "ret_type": "", "variables": {"task": ""}, "variables_p": {"task": [["Dict[str, Any]", 0.17061262659608187], ["int", 0.10404110909431573], ["str", 0.08959450822016728], ["Tuple[int]", 0.08553462390163724]]}}, {"docstring": {"func": "Tests that an AirflowException is raised in case of error event", "long_descr": null, "ret": null}, "fn_lc": [[290, 4], [300, 107]], "fn_var_ln": {"task": [[293, 12], [293, 16]]}, "fn_var_occur": {"task": [["task", "BigQueryTableExistenceAsyncSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID"], ["task", "execute_complete", "context", "event"]]}, "name": "test_big_query_table_existence_sensor_async_execute_failure", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["pytest", "warns", "AirflowProviderDeprecationWarning", "match", "self", "depcrecation_message"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestBigQueryTableExistenceAsyncSensor.test_big_query_table_existence_sensor_async_execute_failure", "ret_exprs": [], "ret_type": "", "variables": {"task": ""}, "variables_p": {"task": [["Dict[str, Any]", 0.17061262659608187], ["int", 0.10404110909431573], ["str", 0.08959450822016728], ["Tuple[int]", 0.08553462390163724]]}}, {"docstring": {"func": "Asserts that logging occurs as expected", "long_descr": null, "ret": null}, "fn_lc": [[302, 4], [314, 91]], "fn_var_ln": {"table_uri": [[311, 8], [311, 17]], "task": [[305, 12], [305, 16]]}, "fn_var_occur": {"table_uri": [["table_uri", "TEST_PROJECT_ID", "TEST_DATASET_ID", "TEST_TABLE_ID"], ["mock_log_info", "assert_called_with", "table_uri"]], "task": [["task", "BigQueryTableExistenceAsyncSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID"], ["mock", "patch", "object", "task", "log", "mock_log_info"], ["task", "execute_complete", "context", "event"]]}, "name": "test_big_query_table_existence_sensor_async_execute_complete", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["pytest", "warns", "AirflowProviderDeprecationWarning", "match", "self", "depcrecation_message"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestBigQueryTableExistenceAsyncSensor.test_big_query_table_existence_sensor_async_execute_complete", "ret_exprs": [], "ret_type": "", "variables": {"table_uri": "", "task": ""}, "variables_p": {"table_uri": [["Type[Callable[..., Any]]", 0.20536771872417448], ["Dict[str, Any]", 0.1168512749485418], ["list", 0.0991527252011927], ["Dict[str, bool]", 0.09636940023255149], ["Dict[str, Union[Any, Any]]", 0.09376049641158597]], "task": [["Dict[str, Any]", 0.17061262659608187], ["int", 0.10404110909431573], ["str", 0.08959450822016728], ["Tuple[int]", 0.08553462390163724]]}}, {"docstring": {"func": "Asserts that logging occurs as expected", "long_descr": null, "ret": null}, "fn_lc": [[316, 4], [326, 57]], "fn_var_ln": {"task": [[319, 12], [319, 16]]}, "fn_var_occur": {"task": [["task", "BigQueryTableExistenceAsyncSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID"], ["task", "execute_complete", "context", "event", "None"]]}, "name": "test_big_query_sensor_async_execute_complete_event_none", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["pytest", "warns", "AirflowProviderDeprecationWarning", "match", "self", "depcrecation_message"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestBigQueryTableExistenceAsyncSensor.test_big_query_sensor_async_execute_complete_event_none", "ret_exprs": [], "ret_type": "", "variables": {"task": ""}, "variables_p": {"task": [["Dict[str, Any]", 0.17061262659608187], ["int", 0.10404110909431573], ["str", 0.08959450822016728], ["Tuple[int]", 0.08553462390163724]]}}], "name": "TestBigQueryTableExistenceAsyncSensor", "q_name": "TestBigQueryTableExistenceAsyncSensor", "variables": {"depcrecation_message": ""}, "variables_p": {"depcrecation_message": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]]}}, {"cls_lc": [[329, 0], [399, 9]], "cls_var_ln": {"depcrecation_message": [[330, 4], [330, 24]]}, "cls_var_occur": {"depcrecation_message": []}, "funcs": [{"docstring": {"func": "Asserts that a task is deferred and a BigQueryTablePartitionExistenceTrigger will be fired", "long_descr": "when the BigQueryTableExistencePartitionAsyncSensor is executed.", "ret": null}, "fn_lc": [[338, 4], [356, 68]], "fn_var_ln": {"task": [[344, 12], [344, 16]]}, "fn_var_occur": {"task": [["task", "BigQueryTableExistencePartitionAsyncSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "partition_id", "TEST_PARTITION_ID"], ["task", "execute", "mock", "MagicMock"]]}, "name": "test_big_query_table_existence_partition_sensor_async", "params": {"mock_hook": "", "self": ""}, "params_descr": {"mock_hook": "", "self": ""}, "params_occur": {"mock_hook": [["mock_hook", "return_value", "table_partition_exists", "return_value", "False"]], "self": [["pytest", "warns", "AirflowProviderDeprecationWarning", "match", "self", "depcrecation_message"]]}, "params_p": {"args": [], "kwargs": [], "mock_hook": [["mock.Mock", 0.2084799636066072]], "self": []}, "q_name": "TestBigQueryTableExistencePartitionAsyncSensor.test_big_query_table_existence_partition_sensor_async", "ret_exprs": [], "ret_type": "", "variables": {"task": ""}, "variables_p": {"task": [["Tuple[int]", 0.17889050989917388], ["str", 0.09024736206962648], ["int", 0.08712266439534072]]}}, {"docstring": {"func": "Tests that an AirflowException is raised in case of error event", "long_descr": null, "ret": null}, "fn_lc": [[358, 4], [369, 107]], "fn_var_ln": {"task": [[361, 12], [361, 16]]}, "fn_var_occur": {"task": [["task", "BigQueryTableExistencePartitionAsyncSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "partition_id", "TEST_PARTITION_ID"], ["task", "execute_complete", "context", "event"]]}, "name": "test_big_query_table_existence_partition_sensor_async_execute_failure", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["pytest", "warns", "AirflowProviderDeprecationWarning", "match", "self", "depcrecation_message"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestBigQueryTableExistencePartitionAsyncSensor.test_big_query_table_existence_partition_sensor_async_execute_failure", "ret_exprs": [], "ret_type": "", "variables": {"task": ""}, "variables_p": {"task": [["Tuple[int]", 0.17889050989917388], ["str", 0.09024736206962648], ["int", 0.08712266439534072]]}}, {"docstring": {"func": "Asserts that logging occurs as expected", "long_descr": null, "ret": null}, "fn_lc": [[371, 4], [382, 57]], "fn_var_ln": {"task": [[374, 12], [374, 16]]}, "fn_var_occur": {"task": [["task", "BigQueryTableExistencePartitionAsyncSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "partition_id", "TEST_PARTITION_ID"], ["task", "execute_complete", "context", "event", "None"]]}, "name": "test_big_query_table_existence_partition_sensor_async_execute_complete_event_none", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["pytest", "warns", "AirflowProviderDeprecationWarning", "match", "self", "depcrecation_message"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestBigQueryTableExistencePartitionAsyncSensor.test_big_query_table_existence_partition_sensor_async_execute_complete_event_none", "ret_exprs": [], "ret_type": "", "variables": {"task": ""}, "variables_p": {"task": [["Tuple[int]", 0.17889050989917388], ["str", 0.09024736206962648], ["int", 0.08712266439534072]]}}, {"docstring": {"func": "Asserts that logging occurs as expected", "long_descr": null, "ret": null}, "fn_lc": [[384, 4], [399, 9]], "fn_var_ln": {"table_uri": [[394, 8], [394, 17]], "task": [[387, 12], [387, 16]]}, "fn_var_occur": {"table_uri": [["table_uri", "TEST_PROJECT_ID", "TEST_DATASET_ID", "TEST_TABLE_ID"], ["mock_log_info", "assert_called_with", "TEST_PARTITION_ID", "table_uri"]], "task": [["task", "BigQueryTableExistencePartitionAsyncSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "partition_id", "TEST_PARTITION_ID"], ["mock", "patch", "object", "task", "log", "mock_log_info"], ["task", "execute_complete", "context", "event"]]}, "name": "test_big_query_table_existence_partition_sensor_async_execute_complete", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["pytest", "warns", "AirflowProviderDeprecationWarning", "match", "self", "depcrecation_message"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestBigQueryTableExistencePartitionAsyncSensor.test_big_query_table_existence_partition_sensor_async_execute_complete", "ret_exprs": [], "ret_type": "", "variables": {"table_uri": "", "task": ""}, "variables_p": {"table_uri": [["list", 0.3684834448308729], ["Dict[str, bool]", 0.10565977081033613], ["Dict[str, Any]", 0.10352016571130528], ["Union[Literal, str]", 0.09622812639156697]], "task": [["Tuple[int]", 0.17889050989917388], ["str", 0.09024736206962648], ["int", 0.08712266439534072]]}}], "name": "TestBigQueryTableExistencePartitionAsyncSensor", "q_name": "TestBigQueryTableExistencePartitionAsyncSensor", "variables": {"depcrecation_message": ""}, "variables_p": {"depcrecation_message": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]]}}], "funcs": [{"docstring": {"func": "Creates an empty context.", "long_descr": null, "ret": null}, "fn_lc": [[254, 0], [259, 17]], "fn_var_ln": {"context": [[258, 4], [258, 11]]}, "fn_var_occur": {"context": []}, "name": "context", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "context", "ret_exprs": [], "ret_type": "", "variables": {"context": ""}, "variables_p": {"context": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]]}}], "imports": ["__future__", "annotations", "unittest", "mock", "pytest", "airflow", "exceptions", "AirflowException", "AirflowProviderDeprecationWarning", "TaskDeferred", "airflow", "providers", "google", "cloud", "sensors", "bigquery", "BigQueryTableExistenceAsyncSensor", "BigQueryTableExistencePartitionAsyncSensor", "BigQueryTableExistenceSensor", "BigQueryTablePartitionExistenceSensor", "airflow", "providers", "google", "cloud", "triggers", "bigquery", "BigQueryTableExistenceTrigger", "BigQueryTablePartitionExistenceTrigger"], "mod_var_ln": {"TEST_DATASET_ID": [[36, 0], [36, 15]], "TEST_GCP_CONN_ID": [[38, 0], [38, 16]], "TEST_IMPERSONATION_CHAIN": [[40, 0], [40, 24]], "TEST_PARTITION_ID": [[39, 0], [39, 17]], "TEST_PROJECT_ID": [[35, 0], [35, 15]], "TEST_TABLE_ID": [[37, 0], [37, 13]]}, "mod_var_occur": {"TEST_DATASET_ID": [["task", "BigQueryTableExistenceSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "gcp_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN"], ["mock_hook", "return_value", "table_exists", "assert_called_once_with", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID"], ["task", "BigQueryTableExistenceSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "gcp_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN", "deferrable", "True"], ["task", "BigQueryTableExistenceSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "deferrable", "True"], ["task", "BigQueryTableExistenceSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "deferrable", "True"], ["task", "BigQueryTableExistenceSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "deferrable", "True"], ["table_uri", "TEST_PROJECT_ID", "TEST_DATASET_ID", "TEST_TABLE_ID"], ["task", "BigQueryTableExistenceSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID"], ["task", "BigQueryTablePartitionExistenceSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "partition_id", "TEST_PARTITION_ID", "gcp_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN"], ["mock_hook", "return_value", "table_partition_exists", "assert_called_once_with", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "partition_id", "TEST_PARTITION_ID"], ["task", "BigQueryTablePartitionExistenceSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "partition_id", "TEST_PARTITION_ID", "deferrable", "True"], ["task", "BigQueryTablePartitionExistenceSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "partition_id", "TEST_PARTITION_ID", "deferrable", "True"], ["task", "BigQueryTablePartitionExistenceSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "partition_id", "TEST_PARTITION_ID", "deferrable", "True"], ["task", "BigQueryTablePartitionExistenceSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "partition_id", "TEST_PARTITION_ID", "deferrable", "True"], ["task", "BigQueryTablePartitionExistenceSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "partition_id", "TEST_PARTITION_ID", "deferrable", "True"], ["table_uri", "TEST_PROJECT_ID", "TEST_DATASET_ID", "TEST_TABLE_ID"], ["task", "BigQueryTableExistenceAsyncSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID"], ["task", "BigQueryTableExistenceAsyncSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID"], ["task", "BigQueryTableExistenceAsyncSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID"], ["table_uri", "TEST_PROJECT_ID", "TEST_DATASET_ID", "TEST_TABLE_ID"], ["task", "BigQueryTableExistenceAsyncSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID"], ["task", "BigQueryTableExistencePartitionAsyncSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "partition_id", "TEST_PARTITION_ID"], ["task", "BigQueryTableExistencePartitionAsyncSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "partition_id", "TEST_PARTITION_ID"], ["task", "BigQueryTableExistencePartitionAsyncSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "partition_id", "TEST_PARTITION_ID"], ["task", "BigQueryTableExistencePartitionAsyncSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "partition_id", "TEST_PARTITION_ID"], ["table_uri", "TEST_PROJECT_ID", "TEST_DATASET_ID", "TEST_TABLE_ID"]], "TEST_GCP_CONN_ID": [["task", "BigQueryTableExistenceSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "gcp_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN"], ["mock_hook", "assert_called_once_with", "gcp_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN"], ["task", "BigQueryTableExistenceSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "gcp_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN", "deferrable", "True"], ["task", "BigQueryTablePartitionExistenceSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "partition_id", "TEST_PARTITION_ID", "gcp_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN"], ["mock_hook", "assert_called_once_with", "gcp_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN"]], "TEST_IMPERSONATION_CHAIN": [["task", "BigQueryTableExistenceSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "gcp_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN"], ["mock_hook", "assert_called_once_with", "gcp_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN"], ["task", "BigQueryTableExistenceSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "gcp_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN", "deferrable", "True"], ["task", "BigQueryTablePartitionExistenceSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "partition_id", "TEST_PARTITION_ID", "gcp_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN"], ["mock_hook", "assert_called_once_with", "gcp_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN"]], "TEST_PARTITION_ID": [["task", "BigQueryTablePartitionExistenceSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "partition_id", "TEST_PARTITION_ID", "gcp_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN"], ["mock_hook", "return_value", "table_partition_exists", "assert_called_once_with", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "partition_id", "TEST_PARTITION_ID"], ["task", "BigQueryTablePartitionExistenceSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "partition_id", "TEST_PARTITION_ID", "deferrable", "True"], ["task", "BigQueryTablePartitionExistenceSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "partition_id", "TEST_PARTITION_ID", "deferrable", "True"], ["task", "BigQueryTablePartitionExistenceSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "partition_id", "TEST_PARTITION_ID", "deferrable", "True"], ["task", "BigQueryTablePartitionExistenceSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "partition_id", "TEST_PARTITION_ID", "deferrable", "True"], ["task", "BigQueryTablePartitionExistenceSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "partition_id", "TEST_PARTITION_ID", "deferrable", "True"], ["mock_log_info", "assert_called_with", "TEST_PARTITION_ID", "table_uri"], ["task", "BigQueryTableExistencePartitionAsyncSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "partition_id", "TEST_PARTITION_ID"], ["task", "BigQueryTableExistencePartitionAsyncSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "partition_id", "TEST_PARTITION_ID"], ["task", "BigQueryTableExistencePartitionAsyncSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "partition_id", "TEST_PARTITION_ID"], ["task", "BigQueryTableExistencePartitionAsyncSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "partition_id", "TEST_PARTITION_ID"], ["mock_log_info", "assert_called_with", "TEST_PARTITION_ID", "table_uri"]], "TEST_PROJECT_ID": [["task", "BigQueryTableExistenceSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "gcp_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN"], ["mock_hook", "return_value", "table_exists", "assert_called_once_with", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID"], ["task", "BigQueryTableExistenceSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "gcp_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN", "deferrable", "True"], ["task", "BigQueryTableExistenceSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "deferrable", "True"], ["task", "BigQueryTableExistenceSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "deferrable", "True"], ["task", "BigQueryTableExistenceSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "deferrable", "True"], ["table_uri", "TEST_PROJECT_ID", "TEST_DATASET_ID", "TEST_TABLE_ID"], ["task", "BigQueryTableExistenceSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID"], ["task", "BigQueryTablePartitionExistenceSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "partition_id", "TEST_PARTITION_ID", "gcp_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN"], ["mock_hook", "return_value", "table_partition_exists", "assert_called_once_with", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "partition_id", "TEST_PARTITION_ID"], ["task", "BigQueryTablePartitionExistenceSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "partition_id", "TEST_PARTITION_ID", "deferrable", "True"], ["task", "BigQueryTablePartitionExistenceSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "partition_id", "TEST_PARTITION_ID", "deferrable", "True"], ["task", "BigQueryTablePartitionExistenceSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "partition_id", "TEST_PARTITION_ID", "deferrable", "True"], ["task", "BigQueryTablePartitionExistenceSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "partition_id", "TEST_PARTITION_ID", "deferrable", "True"], ["task", "BigQueryTablePartitionExistenceSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "partition_id", "TEST_PARTITION_ID", "deferrable", "True"], ["table_uri", "TEST_PROJECT_ID", "TEST_DATASET_ID", "TEST_TABLE_ID"], ["task", "BigQueryTableExistenceAsyncSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID"], ["task", "BigQueryTableExistenceAsyncSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID"], ["task", "BigQueryTableExistenceAsyncSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID"], ["table_uri", "TEST_PROJECT_ID", "TEST_DATASET_ID", "TEST_TABLE_ID"], ["task", "BigQueryTableExistenceAsyncSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID"], ["task", "BigQueryTableExistencePartitionAsyncSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "partition_id", "TEST_PARTITION_ID"], ["task", "BigQueryTableExistencePartitionAsyncSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "partition_id", "TEST_PARTITION_ID"], ["task", "BigQueryTableExistencePartitionAsyncSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "partition_id", "TEST_PARTITION_ID"], ["task", "BigQueryTableExistencePartitionAsyncSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "partition_id", "TEST_PARTITION_ID"], ["table_uri", "TEST_PROJECT_ID", "TEST_DATASET_ID", "TEST_TABLE_ID"]], "TEST_TABLE_ID": [["task", "BigQueryTableExistenceSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "gcp_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN"], ["mock_hook", "return_value", "table_exists", "assert_called_once_with", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID"], ["task", "BigQueryTableExistenceSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "gcp_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN", "deferrable", "True"], ["task", "BigQueryTableExistenceSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "deferrable", "True"], ["task", "BigQueryTableExistenceSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "deferrable", "True"], ["task", "BigQueryTableExistenceSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "deferrable", "True"], ["table_uri", "TEST_PROJECT_ID", "TEST_DATASET_ID", "TEST_TABLE_ID"], ["task", "BigQueryTableExistenceSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID"], ["task", "BigQueryTablePartitionExistenceSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "partition_id", "TEST_PARTITION_ID", "gcp_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN"], ["mock_hook", "return_value", "table_partition_exists", "assert_called_once_with", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "partition_id", "TEST_PARTITION_ID"], ["task", "BigQueryTablePartitionExistenceSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "partition_id", "TEST_PARTITION_ID", "deferrable", "True"], ["task", "BigQueryTablePartitionExistenceSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "partition_id", "TEST_PARTITION_ID", "deferrable", "True"], ["task", "BigQueryTablePartitionExistenceSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "partition_id", "TEST_PARTITION_ID", "deferrable", "True"], ["task", "BigQueryTablePartitionExistenceSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "partition_id", "TEST_PARTITION_ID", "deferrable", "True"], ["task", "BigQueryTablePartitionExistenceSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "partition_id", "TEST_PARTITION_ID", "deferrable", "True"], ["table_uri", "TEST_PROJECT_ID", "TEST_DATASET_ID", "TEST_TABLE_ID"], ["task", "BigQueryTableExistenceAsyncSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID"], ["task", "BigQueryTableExistenceAsyncSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID"], ["task", "BigQueryTableExistenceAsyncSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID"], ["table_uri", "TEST_PROJECT_ID", "TEST_DATASET_ID", "TEST_TABLE_ID"], ["task", "BigQueryTableExistenceAsyncSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID"], ["task", "BigQueryTableExistencePartitionAsyncSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "partition_id", "TEST_PARTITION_ID"], ["task", "BigQueryTableExistencePartitionAsyncSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "partition_id", "TEST_PARTITION_ID"], ["task", "BigQueryTableExistencePartitionAsyncSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "partition_id", "TEST_PARTITION_ID"], ["task", "BigQueryTableExistencePartitionAsyncSensor", "task_id", "project_id", "TEST_PROJECT_ID", "dataset_id", "TEST_DATASET_ID", "table_id", "TEST_TABLE_ID", "partition_id", "TEST_PARTITION_ID"], ["table_uri", "TEST_PROJECT_ID", "TEST_DATASET_ID", "TEST_TABLE_ID"]]}, "no_types_annot": {"D": 0, "I": 0, "U": 66}, "session_id": "UEqhaYp__1-NhrdUCacLE9PPurJZxD14BC-19VcZwHY", "set": null, "tc": [false, null], "type_annot_cove": 0.0, "typed_seq": "", "untyped_seq": "", "variables": {"TEST_DATASET_ID": "", "TEST_GCP_CONN_ID": "", "TEST_IMPERSONATION_CHAIN": "", "TEST_PARTITION_ID": "", "TEST_PROJECT_ID": "", "TEST_TABLE_ID": ""}, "variables_p": {"TEST_DATASET_ID": [["str", 0.5909535730743829], ["Dict[str, str]", 0.08477956754939336], ["DefaultDict[Any, dict]", 0.08178609836729768], ["dict", 0.07672001041475003], ["int", 0.0751970257128653]], "TEST_GCP_CONN_ID": [["str", 0.7962124362470469], ["bool", 0.1024704612706483], ["dict", 0.10131710248230488]], "TEST_IMPERSONATION_CHAIN": [["List[Dict[str, str]]", 0.2647503890982125], ["str", 0.21221052986013883], ["Dict[str, Union[Any, Any, Any]]", 0.0984659060664239]], "TEST_PARTITION_ID": [["str", 0.49272107050067177], ["int", 0.20833350979701365], ["bool", 0.09245548187879178]], "TEST_PROJECT_ID": [["str", 0.49122213699449835], ["int", 0.18348167189213044], ["Optional[str]", 0.13827462465886228], ["bytes", 0.09414105887536765], ["List[str]", 0.09288050757914128]], "TEST_TABLE_ID": [["str", 0.5038831221069355], ["int", 0.29413554454092844], ["Optional[str]", 0.1100041341499726]]}}}