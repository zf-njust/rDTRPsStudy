{"error": null, "response": {"classes": [{"cls_lc": [[85, 0], [161, 101]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[87, 4], [104, 102]], "fn_var_ln": {"result": [[97, 8], [97, 14]], "task": [[88, 8], [88, 12]]}, "fn_var_occur": {"result": [["result", "task", "poke", "mock", "MagicMock"], ["result", "True"]], "task": [["task", "GCSObjectExistenceSensor", "task_id", "bucket", "TEST_BUCKET", "object", "TEST_OBJECT", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN"], ["result", "task", "poke", "mock", "MagicMock"]]}, "name": "test_should_pass_argument_to_hook", "params": {"mock_hook": "", "self": ""}, "params_descr": {"mock_hook": "", "self": ""}, "params_occur": {"mock_hook": [["mock_hook", "return_value", "exists", "return_value", "True"], ["mock_hook", "assert_called_once_with", "gcp_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN"], ["mock_hook", "return_value", "exists", "assert_called_once_with", "TEST_BUCKET", "TEST_OBJECT", "DEFAULT_RETRY"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_hook": [], "self": []}, "q_name": "TestGoogleCloudStorageObjectSensor.test_should_pass_argument_to_hook", "ret_exprs": [], "ret_type": "", "variables": {"result": "", "task": ""}, "variables_p": {"result": [], "task": [["bytearray", 0.1700973539199083], ["int", 0.12116022904893876], ["List[Tuple[int, Any]]", 0.09842532513335477], ["list", 0.09045842860636005], ["List[float]", 0.08695807398413045], ["List[aw_core.models.Event]", 0.08632809879457304]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[108, 4], [118, 36]], "fn_var_ln": {"task": [[109, 8], [109, 12]]}, "fn_var_occur": {"task": [["task", "GCSObjectExistenceSensor", "task_id", "bucket", "TEST_BUCKET", "object", "TEST_OBJECT", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "deferrable", "True"], ["task", "execute", "mock", "MagicMock"]]}, "name": "test_gcs_object_existence_sensor_finish_before_deferred", "params": {"mock_defer": "", "mock_hook": "", "self": ""}, "params_descr": {"mock_defer": "", "mock_hook": "", "self": ""}, "params_occur": {"mock_defer": [["mock_defer", "called"]], "mock_hook": [["mock_hook", "return_value", "exists", "return_value", "True"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_defer": [["mock.Mock", 0.11171395832916362], ["mock.MagicMock", 0.05917791428557309]], "mock_hook": [], "self": []}, "q_name": "TestGoogleCloudStorageObjectSensor.test_gcs_object_existence_sensor_finish_before_deferred", "ret_exprs": [], "ret_type": "", "variables": {"task": ""}, "variables_p": {"task": [["bytearray", 0.1700973539199083], ["int", 0.12116022904893876], ["List[Tuple[int, Any]]", 0.09842532513335477], ["list", 0.09045842860636005], ["List[float]", 0.08695807398413045], ["List[aw_core.models.Event]", 0.08632809879457304]]}}, {"docstring": {"func": "Asserts that a task is deferred and a GCSBlobTrigger will be fired", "long_descr": "when the GCSObjectExistenceSensor is executed and deferrable is set to True.", "ret": null}, "fn_lc": [[121, 4], [136, 95]], "fn_var_ln": {"task": [[126, 8], [126, 12]]}, "fn_var_occur": {"task": [["task", "GCSObjectExistenceSensor", "task_id", "bucket", "TEST_BUCKET", "object", "TEST_OBJECT", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "deferrable", "True"], ["task", "execute", "context"]]}, "name": "test_gcs_object_existence_sensor_deferred", "params": {"mock_hook": "", "self": ""}, "params_descr": {"mock_hook": "", "self": ""}, "params_occur": {"mock_hook": [["mock_hook", "return_value", "exists", "return_value", "False"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_hook": [["mock.MagicMock", 0.07221281809606808]], "self": []}, "q_name": "TestGoogleCloudStorageObjectSensor.test_gcs_object_existence_sensor_deferred", "ret_exprs": [], "ret_type": "", "variables": {"task": ""}, "variables_p": {"task": [["bytearray", 0.1700973539199083], ["int", 0.12116022904893876], ["List[Tuple[int, Any]]", 0.09842532513335477], ["list", 0.09045842860636005], ["List[float]", 0.08695807398413045], ["List[aw_core.models.Event]", 0.08632809879457304]]}}, {"docstring": {"func": "Tests that an AirflowException is raised in case of error event when deferrable is set to True", "long_descr": null, "ret": null}, "fn_lc": [[138, 4], [148, 109]], "fn_var_ln": {"task": [[140, 8], [140, 12]]}, "fn_var_occur": {"task": [["task", "GCSObjectExistenceSensor", "task_id", "bucket", "TEST_BUCKET", "object", "TEST_OBJECT", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "deferrable", "True"], ["task", "execute_complete", "context", "None", "event"]]}, "name": "test_gcs_object_existence_sensor_deferred_execute_failure", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestGoogleCloudStorageObjectSensor.test_gcs_object_existence_sensor_deferred_execute_failure", "ret_exprs": [], "ret_type": "", "variables": {"task": ""}, "variables_p": {"task": [["bytearray", 0.1700973539199083], ["int", 0.12116022904893876], ["List[Tuple[int, Any]]", 0.09842532513335477], ["list", 0.09045842860636005], ["List[float]", 0.08695807398413045], ["List[aw_core.models.Event]", 0.08632809879457304]]}}, {"docstring": {"func": "Asserts that logging occurs as expected when deferrable is set to True", "long_descr": null, "ret": null}, "fn_lc": [[150, 4], [161, 101]], "fn_var_ln": {"task": [[152, 8], [152, 12]]}, "fn_var_occur": {"task": [["task", "GCSObjectExistenceSensor", "task_id", "bucket", "TEST_BUCKET", "object", "TEST_OBJECT", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "deferrable", "True"], ["mock", "patch", "object", "task", "log", "mock_log_info"], ["task", "execute_complete", "context", "None", "event"]]}, "name": "test_gcs_object_existence_sensor_async_execute_complete", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestGoogleCloudStorageObjectSensor.test_gcs_object_existence_sensor_async_execute_complete", "ret_exprs": [], "ret_type": "", "variables": {"task": ""}, "variables_p": {"task": [["bytearray", 0.1700973539199083], ["int", 0.12116022904893876], ["List[Tuple[int, Any]]", 0.09842532513335477], ["list", 0.09045842860636005], ["List[float]", 0.08695807398413045], ["List[aw_core.models.Event]", 0.08632809879457304]]}}], "name": "TestGoogleCloudStorageObjectSensor", "q_name": "TestGoogleCloudStorageObjectSensor", "variables": {}, "variables_p": {}}, {"cls_lc": [[164, 0], [211, 101]], "cls_var_ln": {"depcrecation_message": [[165, 4], [165, 24]]}, "cls_var_occur": {"depcrecation_message": []}, "funcs": [{"docstring": {"func": "Asserts that a task is deferred and a GCSBlobTrigger will be fired", "long_descr": "when the GCSObjectExistenceAsyncSensor is executed.", "ret": null}, "fn_lc": [[171, 4], [186, 95]], "fn_var_ln": {"task": [[177, 12], [177, 16]]}, "fn_var_occur": {"task": [["task", "GCSObjectExistenceAsyncSensor", "task_id", "bucket", "TEST_BUCKET", "object", "TEST_OBJECT", "google_cloud_conn_id", "TEST_GCP_CONN_ID"], ["task", "execute", "context"]]}, "name": "test_gcs_object_existence_sensor_async", "params": {"mock_hook": "", "self": ""}, "params_descr": {"mock_hook": "", "self": ""}, "params_occur": {"mock_hook": [["mock_hook", "return_value", "exists", "return_value", "False"]], "self": [["pytest", "warns", "AirflowProviderDeprecationWarning", "match", "self", "depcrecation_message"]]}, "params_p": {"args": [], "kwargs": [], "mock_hook": [["mock.MagicMock", 0.07221281809606808]], "self": []}, "q_name": "TestGoogleCloudStorageObjectSensorAsync.test_gcs_object_existence_sensor_async", "ret_exprs": [], "ret_type": "", "variables": {"task": ""}, "variables_p": {"task": [["bytes", 0.22867517876578025], ["accounts.models.Account", 0.08013623588208003], ["List[str]", 0.07789642923414508], ["models.MedstationData", 0.07336727296813506]]}}, {"docstring": {"func": "Tests that an AirflowException is raised in case of error event", "long_descr": null, "ret": null}, "fn_lc": [[188, 4], [198, 109]], "fn_var_ln": {"task": [[191, 12], [191, 16]]}, "fn_var_occur": {"task": [["task", "GCSObjectExistenceAsyncSensor", "task_id", "bucket", "TEST_BUCKET", "object", "TEST_OBJECT", "google_cloud_conn_id", "TEST_GCP_CONN_ID"], ["task", "execute_complete", "context", "None", "event"]]}, "name": "test_gcs_object_existence_sensor_async_execute_failure", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["pytest", "warns", "AirflowProviderDeprecationWarning", "match", "self", "depcrecation_message"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestGoogleCloudStorageObjectSensorAsync.test_gcs_object_existence_sensor_async_execute_failure", "ret_exprs": [], "ret_type": "", "variables": {"task": ""}, "variables_p": {"task": [["bytes", 0.22867517876578025], ["accounts.models.Account", 0.08013623588208003], ["List[str]", 0.07789642923414508], ["models.MedstationData", 0.07336727296813506]]}}, {"docstring": {"func": "Asserts that logging occurs as expected", "long_descr": null, "ret": null}, "fn_lc": [[200, 4], [211, 101]], "fn_var_ln": {"task": [[203, 12], [203, 16]]}, "fn_var_occur": {"task": [["task", "GCSObjectExistenceAsyncSensor", "task_id", "bucket", "TEST_BUCKET", "object", "TEST_OBJECT", "google_cloud_conn_id", "TEST_GCP_CONN_ID"], ["mock", "patch", "object", "task", "log", "mock_log_info"], ["task", "execute_complete", "context", "None", "event"]]}, "name": "test_gcs_object_existence_sensor_async_execute_complete", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["pytest", "warns", "AirflowProviderDeprecationWarning", "match", "self", "depcrecation_message"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestGoogleCloudStorageObjectSensorAsync.test_gcs_object_existence_sensor_async_execute_complete", "ret_exprs": [], "ret_type": "", "variables": {"task": ""}, "variables_p": {"task": [["bytes", 0.22867517876578025], ["accounts.models.Account", 0.08013623588208003], ["List[str]", 0.07789642923414508], ["models.MedstationData", 0.07336727296813506]]}}], "name": "TestGoogleCloudStorageObjectSensorAsync", "q_name": "TestGoogleCloudStorageObjectSensorAsync", "variables": {"depcrecation_message": ""}, "variables_p": {"depcrecation_message": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]]}}, {"cls_lc": [[214, 0], [231, 89]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[215, 4], [221, 73]], "fn_var_ln": {"context": [[216, 8], [216, 15]], "result": [[220, 8], [220, 14]]}, "fn_var_occur": {"context": [["context", "DAG", "dag_id", "TEST_DAG_ID", "schedule", "timedelta", "days", "datetime"], ["result", "ts_function", "context"]], "result": [["result", "ts_function", "context"], ["datetime", "tzinfo", "timezone", "utc", "result"]]}, "name": "test_should_support_datetime", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestTsFunction.test_should_support_datetime", "ret_exprs": [], "ret_type": "", "variables": {"context": "", "result": ""}, "variables_p": {"context": [["int", 0.3472915700390648], ["str", 0.2883365357481863], ["Dict[str, Any]", 0.08227469930973419]], "result": [["datetime.timedelta", 0.7329854197874107], ["datetime.date.time.datetime", 0.09077086687938041], ["datetime.datetime", 0.0887145032628577], ["datetime.datetime.datetime", 0.08752921007035104]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[223, 4], [231, 89]], "fn_var_ln": {"context": [[226, 8], [226, 15]], "dag": [[224, 8], [224, 11]], "result": [[230, 8], [230, 14]]}, "fn_var_occur": {"context": [["context", "dag", "datetime"], ["result", "ts_function", "context"]], "dag": [["dag", "DAG", "dag_id", "TEST_DAG_ID", "start_date", "datetime", "schedule"], ["context", "dag", "datetime"]], "result": [["result", "ts_function", "context"], ["pendulum", "instance", "datetime", "isoformat", "result", "isoformat"]]}, "name": "test_should_support_cron", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestTsFunction.test_should_support_cron", "ret_exprs": [], "ret_type": "", "variables": {"context": "", "dag": "", "result": ""}, "variables_p": {"context": [["datetime.timedelta", 0.5040952674209436], ["int", 0.11484182456507158], ["datetime", 0.11238854297742774], ["str", 0.09688142566712069], ["datetime.time.delta", 0.08169737989751612]], "dag": [["str", 0.4443928982515867], ["Tuple[int, int]", 0.11362883624525838], ["Dict[str, str]", 0.09773997979201561], ["List[str]", 0.09511729888828668], ["dict", 0.08653959592131728], ["datetime.date", 0.08271516341500834], ["Type[Tuple[int, int]]", 0.079866227486527]], "result": [["datetime.date.time.timedelta", 0.27074860189347594], ["Dict[str, bool]", 0.2703540694753117], ["datetime.timedelta", 0.17944190977366986], ["datetime.time", 0.16939210812920868]]}}], "name": "TestTsFunction", "q_name": "TestTsFunction", "variables": {}, "variables_p": {}}, {"cls_lc": [[234, 0], [267, 36]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[236, 4], [252, 29]], "fn_var_ln": {"result": [[245, 8], [245, 14]], "task": [[237, 8], [237, 12]]}, "fn_var_occur": {"result": [["result", "task", "poke", "mock", "MagicMock"], ["result", "True"]], "task": [["task", "GCSObjectUpdateSensor", "task_id", "bucket", "TEST_BUCKET", "object", "TEST_OBJECT", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN"], ["result", "task", "poke", "mock", "MagicMock"]]}, "name": "test_should_pass_argument_to_hook", "params": {"mock_hook": "", "self": ""}, "params_descr": {"mock_hook": "", "self": ""}, "params_occur": {"mock_hook": [["mock_hook", "return_value", "is_updated_after", "return_value", "True"], ["mock_hook", "assert_called_once_with", "gcp_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN"], ["mock_hook", "return_value", "is_updated_after", "assert_called_once_with", "TEST_BUCKET", "TEST_OBJECT", "mock", "ANY"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_hook": [], "self": []}, "q_name": "TestGoogleCloudStorageObjectUpdatedSensor.test_should_pass_argument_to_hook", "ret_exprs": [], "ret_type": "", "variables": {"result": "", "task": ""}, "variables_p": {"result": [], "task": [["buza.models.Answer", 0.12154370382249685], ["List[str]", 0.08971676684293028], ["list", 0.08919912775852662], ["Dict[str, Any]", 0.0890550815703426]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[256, 4], [267, 36]], "fn_var_ln": {"task": [[257, 8], [257, 12]]}, "fn_var_occur": {"task": [["task", "GCSObjectUpdateSensor", "task_id", "bucket", "TEST_BUCKET", "object", "TEST_OBJECT", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN", "deferrable", "True"], ["task", "execute", "mock", "MagicMock"]]}, "name": "test_gcs_object_update_sensor_finish_before_deferred", "params": {"mock_defer": "", "mock_hook": "", "self": ""}, "params_descr": {"mock_defer": "", "mock_hook": "", "self": ""}, "params_occur": {"mock_defer": [["mock_defer", "called"]], "mock_hook": [["mock_hook", "return_value", "is_updated_after", "return_value", "True"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_defer": [["mock.Mock", 0.12106952983223937], ["mock.MagicMock", 0.0658844164908708]], "mock_hook": [], "self": []}, "q_name": "TestGoogleCloudStorageObjectUpdatedSensor.test_gcs_object_update_sensor_finish_before_deferred", "ret_exprs": [], "ret_type": "", "variables": {"task": ""}, "variables_p": {"task": [["buza.models.Answer", 0.12154370382249685], ["List[str]", 0.08971676684293028], ["list", 0.08919912775852662], ["Dict[str, Any]", 0.0890550815703426]]}}], "name": "TestGoogleCloudStorageObjectUpdatedSensor", "q_name": "TestGoogleCloudStorageObjectUpdatedSensor", "variables": {}, "variables_p": {}}, {"cls_lc": [[270, 0], [309, 9]], "cls_var_ln": {"OPERATOR": [[271, 4], [271, 12]]}, "cls_var_occur": {"OPERATOR": []}, "funcs": [{"docstring": {"func": "Asserts that a task is deferred and a GCSBlobTrigger will be fired", "long_descr": "when the GCSObjectUpdateSensorAsync is executed.", "ret": null}, "fn_lc": [[280, 4], [290, 59]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_gcs_object_update_sensor_async", "params": {"mock_hook": "", "self": ""}, "params_descr": {"mock_hook": "", "self": ""}, "params_occur": {"mock_hook": [["mock_hook", "return_value", "is_updated_after", "return_value", "False"]], "self": [["self", "OPERATOR", "execute", "mock", "MagicMock"]]}, "params_p": {"args": [], "kwargs": [], "mock_hook": [], "self": []}, "q_name": "TestGCSObjectUpdateSensorAsync.test_gcs_object_update_sensor_async", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Tests that an AirflowException is raised in case of error event", "long_descr": null, "ret": null}, "fn_lc": [[292, 4], [298, 13]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_gcs_object_update_sensor_async_execute_failure", "params": {"context": "", "self": ""}, "params_descr": {"context": "", "self": ""}, "params_occur": {"context": [["self", "OPERATOR", "execute_complete", "context", "context", "event"]], "self": [["self", "OPERATOR", "execute_complete", "context", "context", "event"]]}, "params_p": {"args": [], "context": [], "kwargs": [], "self": []}, "q_name": "TestGCSObjectUpdateSensorAsync.test_gcs_object_update_sensor_async_execute_failure", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Asserts that logging occurs as expected", "long_descr": null, "ret": null}, "fn_lc": [[300, 4], [309, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_gcs_object_update_sensor_async_execute_complete", "params": {"context": "", "self": ""}, "params_descr": {"context": "", "self": ""}, "params_occur": {"context": [["self", "OPERATOR", "execute_complete", "context", "context", "event"]], "self": [["mock", "patch", "object", "self", "OPERATOR", "log", "mock_log_info"], ["self", "OPERATOR", "execute_complete", "context", "context", "event"]]}, "params_p": {"args": [], "context": [], "kwargs": [], "self": []}, "q_name": "TestGCSObjectUpdateSensorAsync.test_gcs_object_update_sensor_async_execute_complete", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestGCSObjectUpdateSensorAsync", "q_name": "TestGCSObjectUpdateSensorAsync", "variables": {"OPERATOR": ""}, "variables_p": {"OPERATOR": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]]}}, {"cls_lc": [[312, 0], [390, 36]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[314, 4], [330, 29]], "fn_var_ln": {"result": [[323, 8], [323, 14]], "task": [[315, 8], [315, 12]]}, "fn_var_occur": {"result": [["result", "task", "poke", "mock", "MagicMock"], ["result", "True"]], "task": [["task", "GCSObjectsWithPrefixExistenceSensor", "task_id", "bucket", "TEST_BUCKET", "prefix", "TEST_PREFIX", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN"], ["result", "task", "poke", "mock", "MagicMock"]]}, "name": "test_should_pass_arguments_to_hook", "params": {"mock_hook": "", "self": ""}, "params_descr": {"mock_hook": "", "self": ""}, "params_occur": {"mock_hook": [["mock_hook", "return_value", "list", "return_value"], ["mock_hook", "assert_called_once_with", "gcp_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN"], ["mock_hook", "return_value", "list", "assert_called_once_with", "TEST_BUCKET", "prefix", "TEST_PREFIX"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_hook": [["mock.MagicMock", 0.0962182682188121]], "self": []}, "q_name": "TestGoogleCloudStoragePrefixSensor.test_should_pass_arguments_to_hook", "ret_exprs": [], "ret_type": "", "variables": {"result": "", "task": ""}, "variables_p": {"result": [], "task": [["bytes", 0.19072069894944155], ["RuntimeError", 0.07719734439084164], ["Tuple[int]", 0.07435415201901689], ["Dict[str, Any]", 0.06799255526142545]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[333, 4], [343, 30]], "fn_var_ln": {"result": [[341, 8], [341, 14]], "task": [[334, 8], [334, 12]]}, "fn_var_occur": {"result": [["result", "task", "poke", "mock", "MagicMock"], ["result", "False"]], "task": [["task", "GCSObjectsWithPrefixExistenceSensor", "task_id", "bucket", "TEST_BUCKET", "prefix", "TEST_PREFIX", "google_cloud_conn_id", "TEST_GCP_CONN_ID"], ["result", "task", "poke", "mock", "MagicMock"]]}, "name": "test_should_return_false_on_empty_list", "params": {"mock_hook": "", "self": ""}, "params_descr": {"mock_hook": "", "self": ""}, "params_occur": {"mock_hook": [["mock_hook", "return_value", "list", "return_value"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_hook": [], "self": []}, "q_name": "TestGoogleCloudStoragePrefixSensor.test_should_return_false_on_empty_list", "ret_exprs": [], "ret_type": "", "variables": {"result": "", "task": ""}, "variables_p": {"result": [], "task": [["bytes", 0.19072069894944155], ["RuntimeError", 0.07719734439084164], ["Tuple[int]", 0.07435415201901689], ["Dict[str, Any]", 0.06799255526142545]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[346, 4], [365, 45]], "fn_var_ln": {"generated_messages": [[355, 8], [355, 26]], "response": [[358, 8], [358, 16]], "task": [[347, 8], [347, 12]]}, "fn_var_occur": {"generated_messages": [["generated_messages", "i", "i", "range"], ["mock_hook", "return_value", "list", "return_value", "generated_messages"], ["response", "generated_messages"]], "response": [["response", "task", "execute", "None"], ["response", "generated_messages"]], "task": [["task", "GCSObjectsWithPrefixExistenceSensor", "task_id", "bucket", "TEST_BUCKET", "prefix", "TEST_PREFIX", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN", "poke_interval"], ["response", "task", "execute", "None"]]}, "name": "test_execute", "params": {"mock_hook": "", "self": ""}, "params_descr": {"mock_hook": "", "self": ""}, "params_occur": {"mock_hook": [["mock_hook", "return_value", "list", "return_value", "generated_messages"], ["mock_hook", "assert_called_once_with", "gcp_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN"], ["mock_hook", "return_value", "list", "assert_called_once_with", "TEST_BUCKET", "prefix", "TEST_PREFIX"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_hook": [["mock.MagicMock", 0.13507587723716658]], "self": []}, "q_name": "TestGoogleCloudStoragePrefixSensor.test_execute", "ret_exprs": [], "ret_type": "", "variables": {"generated_messages": "", "response": "", "task": ""}, "variables_p": {"generated_messages": [["int", 0.2149052107415284], ["List[Dict[str, Any]]", 0.17792563258720887], ["list", 0.1688425449479241], ["Dict[Any, str]", 0.09337620479824563], ["str", 0.09032575374809515], ["List[List[str]]", 0.08624771667773547], ["Tuple[Any, Any]", 0.08474481608151353], ["Dict[str, Any]", 0.08363212041774881]], "response": [["Dict[int, Any]", 0.16486455460149158], ["Dict[str, int]", 0.1395253734418466], ["str", 0.11859013472330242], ["google.protobuf.reflection.GeneratedProtocolMessageType", 0.08654394666991123], ["List[str]", 0.0859934843727053]], "task": [["bytes", 0.19072069894944155], ["RuntimeError", 0.07719734439084164], ["Tuple[int]", 0.07435415201901689], ["Dict[str, Any]", 0.06799255526142545]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[368, 4], [375, 96]], "fn_var_ln": {"task": [[369, 8], [369, 12]]}, "fn_var_occur": {"task": [["task", "GCSObjectsWithPrefixExistenceSensor", "task_id", "bucket", "TEST_BUCKET", "prefix", "TEST_PREFIX", "poke_interval", "timeout"], ["task", "execute", "mock", "MagicMock"]]}, "name": "test_execute_timeout", "params": {"mock_hook": "", "self": ""}, "params_descr": {"mock_hook": "", "self": ""}, "params_occur": {"mock_hook": [["mock_hook", "return_value", "list", "return_value"], ["mock_hook", "return_value", "list", "assert_called_once_with", "TEST_BUCKET", "prefix", "TEST_PREFIX"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_hook": [["Tuple[str, mock.Mock]", 0.1399109409177325]], "self": []}, "q_name": "TestGoogleCloudStoragePrefixSensor.test_execute_timeout", "ret_exprs": [], "ret_type": "", "variables": {"task": ""}, "variables_p": {"task": [["taskiapplication.models.task.Task", 0.18333257306731804], ["dict", 0.11600661631496711], ["Dict[str, Any]", 0.10616125235849312], ["List[Dict[str, Any]]", 0.10495419492371312], ["RuntimeError", 0.09500873581317411]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[379, 4], [390, 36]], "fn_var_ln": {"task": [[380, 8], [380, 12]]}, "fn_var_occur": {"task": [["task", "GCSObjectsWithPrefixExistenceSensor", "task_id", "bucket", "TEST_BUCKET", "prefix", "TEST_PREFIX", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN", "deferrable", "True"], ["task", "execute", "mock", "MagicMock"]]}, "name": "test_gcs_object_prefix_existence_sensor_finish_before_deferred", "params": {"mock_defer": "", "mock_hook": "", "self": ""}, "params_descr": {"mock_defer": "", "mock_hook": "", "self": ""}, "params_occur": {"mock_defer": [["mock_defer", "called"]], "mock_hook": [["mock_hook", "return_value", "list", "return_value", "True"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_defer": [["mock.Mock", 0.11171395832916362], ["mock.MagicMock", 0.05917791428557309]], "mock_hook": [["mock.MagicMock", 0.12971001991503414]], "self": []}, "q_name": "TestGoogleCloudStoragePrefixSensor.test_gcs_object_prefix_existence_sensor_finish_before_deferred", "ret_exprs": [], "ret_type": "", "variables": {"task": ""}, "variables_p": {"task": [["bytes", 0.19072069894944155], ["RuntimeError", 0.07719734439084164], ["Tuple[int]", 0.07435415201901689], ["Dict[str, Any]", 0.06799255526142545]]}}], "name": "TestGoogleCloudStoragePrefixSensor", "q_name": "TestGoogleCloudStoragePrefixSensor", "variables": {}, "variables_p": {}}, {"cls_lc": [[393, 0], [429, 85]], "cls_var_ln": {"OPERATOR": [[394, 4], [394, 12]]}, "cls_var_occur": {"OPERATOR": []}, "funcs": [{"docstring": {"func": "Asserts that a task is deferred and a GCSPrefixBlobTrigger will be fired", "long_descr": "when the GCSObjectsWithPrefixExistenceSensorAsync is executed.", "ret": null}, "fn_lc": [[403, 4], [411, 107]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_gcs_object_with_prefix_existence_sensor_async", "params": {"mock_hook": "", "self": ""}, "params_descr": {"mock_hook": "", "self": ""}, "params_occur": {"mock_hook": [["mock_hook", "return_value", "list", "return_value", "False"]], "self": [["self", "OPERATOR", "execute", "mock", "MagicMock"]]}, "params_p": {"args": [], "kwargs": [], "mock_hook": [["mock.MagicMock", 0.1303417805582003]], "self": []}, "q_name": "TestGCSObjectsWithPrefixExistenceSensorAsync.test_gcs_object_with_prefix_existence_sensor_async", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Tests that an AirflowException is raised in case of error event", "long_descr": null, "ret": null}, "fn_lc": [[413, 4], [419, 13]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_gcs_object_with_prefix_existence_sensor_async_execute_failure", "params": {"context": "", "self": ""}, "params_descr": {"context": "", "self": ""}, "params_occur": {"context": [["self", "OPERATOR", "execute_complete", "context", "context", "event"]], "self": [["self", "OPERATOR", "execute_complete", "context", "context", "event"]]}, "params_p": {"args": [], "context": [["Dict[str, Any]", 0.09290978312631222]], "kwargs": [], "self": []}, "q_name": "TestGCSObjectsWithPrefixExistenceSensorAsync.test_gcs_object_with_prefix_existence_sensor_async_execute_failure", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Asserts that logging occurs as expected", "long_descr": null, "ret": null}, "fn_lc": [[421, 4], [429, 85]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_gcs_object_with_prefix_existence_sensor_async_execute_complete", "params": {"context": "", "self": ""}, "params_descr": {"context": "", "self": ""}, "params_occur": {"context": [["self", "OPERATOR", "execute_complete", "context", "context", "event", "TEST_OBJECT"]], "self": [["mock", "patch", "object", "self", "OPERATOR", "log", "mock_log_info"], ["self", "OPERATOR", "execute_complete", "context", "context", "event", "TEST_OBJECT"]]}, "params_p": {"args": [], "context": [["str", 0.23245046886568488]], "kwargs": [], "self": []}, "q_name": "TestGCSObjectsWithPrefixExistenceSensorAsync.test_gcs_object_with_prefix_existence_sensor_async_execute_complete", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestGCSObjectsWithPrefixExistenceSensorAsync", "q_name": "TestGCSObjectsWithPrefixExistenceSensorAsync", "variables": {"OPERATOR": ""}, "variables_p": {"OPERATOR": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]]}}, {"cls_lc": [[432, 0], [525, 55]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[433, 4], [453, 62]], "fn_var_ln": {"dag": [[434, 8], [434, 16]], "last_mocked_date": [[453, 8], [453, 29]], "sensor": [[440, 8], [440, 19]]}, "fn_var_occur": {"dag": [["self", "dag", "DAG", "TEST_DAG_ID", "schedule", "start_date", "DEFAULT_DATE"], ["self", "sensor", "GCSUploadSessionCompleteSensor", "task_id", "bucket", "prefix", "inactivity_period", "poke_interval", "min_objects", "allow_delete", "False", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN", "dag", "self", "dag"]], "last_mocked_date": [["self", "last_mocked_date", "datetime"]], "sensor": [["self", "sensor", "GCSUploadSessionCompleteSensor", "task_id", "bucket", "prefix", "inactivity_period", "poke_interval", "min_objects", "allow_delete", "False", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN", "dag", "self", "dag"]]}, "name": "setup_method", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "dag", "DAG", "TEST_DAG_ID", "schedule", "start_date", "DEFAULT_DATE"], ["self", "sensor", "GCSUploadSessionCompleteSensor", "task_id", "bucket", "prefix", "inactivity_period", "poke_interval", "min_objects", "allow_delete", "False", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN", "dag", "self", "dag"], ["self", "last_mocked_date", "datetime"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestGCSUploadSessionCompleteSensor.setup_method", "ret_exprs": [], "ret_type": "", "variables": {"dag": "", "last_mocked_date": "", "sensor": ""}, "variables_p": {"dag": [["datetime.datetime", 0.2439480380119307], ["datetime.datetime.timedelta", 0.2406057098781233], ["str", 0.16697277480605582], ["List[Tuple[Any, Any]]", 0.1618641829695131], ["datetime.timezone", 0.09724987844135641], ["Dict[str, Union[int, str]]", 0.0893594158930206]], "last_mocked_date": [["datetime.datetime.datetime", 0.3772081832330874], ["datetime.datetime", 0.20775507963743353], ["str", 0.20027848629697684], ["datetime.datetime.date", 0.1188172514029232], ["datetime.date", 0.09594099942957902]], "sensor": [["str", 1.0000000000000004]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[456, 4], [462, 57]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_get_gcs_hook", "params": {"mock_hook": "", "self": ""}, "params_descr": {"mock_hook": "", "self": ""}, "params_occur": {"mock_hook": [["mock_hook", "assert_called_once_with", "gcp_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN"], ["mock_hook", "return_value", "self", "sensor", "hook"]], "self": [["self", "sensor", "_get_gcs_hook"], ["mock_hook", "return_value", "self", "sensor", "hook"]]}, "params_p": {"args": [], "kwargs": [], "mock_hook": [], "self": []}, "q_name": "TestGCSUploadSessionCompleteSensor.test_get_gcs_hook", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[465, 4], [468, 48]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_files_deleted_between_pokes_throw_error", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "sensor", "is_bucket_updated"], ["self", "sensor", "is_bucket_updated"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestGCSUploadSessionCompleteSensor.test_files_deleted_between_pokes_throw_error", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[471, 4], [493, 56]], "fn_var_ln": {"sensor": [[472, 8], [472, 19]]}, "fn_var_occur": {"sensor": [["self", "sensor", "GCSUploadSessionCompleteSensor", "task_id", "bucket", "prefix", "inactivity_period", "poke_interval", "min_objects", "allow_delete", "True", "dag", "self", "dag"], ["self", "sensor", "is_bucket_updated"], ["self", "sensor", "inactivity_seconds"], ["self", "sensor", "is_bucket_updated"], ["len", "self", "sensor", "previous_objects"], ["self", "sensor", "inactivity_seconds"], ["self", "sensor", "is_bucket_updated"], ["self", "sensor", "inactivity_seconds"], ["self", "sensor", "is_bucket_updated"], ["self", "sensor", "inactivity_seconds"], ["self", "sensor", "is_bucket_updated"], ["self", "sensor", "inactivity_seconds"], ["self", "sensor", "is_bucket_updated"]]}, "name": "test_files_deleted_between_pokes_allow_delete", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "sensor", "GCSUploadSessionCompleteSensor", "task_id", "bucket", "prefix", "inactivity_period", "poke_interval", "min_objects", "allow_delete", "True", "dag", "self", "dag"], ["self", "sensor", "is_bucket_updated"], ["self", "sensor", "inactivity_seconds"], ["self", "sensor", "is_bucket_updated"], ["len", "self", "sensor", "previous_objects"], ["self", "sensor", "inactivity_seconds"], ["self", "sensor", "is_bucket_updated"], ["self", "sensor", "inactivity_seconds"], ["self", "sensor", "is_bucket_updated"], ["self", "sensor", "inactivity_seconds"], ["self", "sensor", "is_bucket_updated"], ["self", "sensor", "inactivity_seconds"], ["self", "sensor", "is_bucket_updated"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestGCSUploadSessionCompleteSensor.test_files_deleted_between_pokes_allow_delete", "ret_exprs": [], "ret_type": "", "variables": {"sensor": ""}, "variables_p": {"sensor": [["str", 0.8286345860416557], ["datetime.datetime.timedelta", 0.08568270697917216], ["datetime.datetime.datetime", 0.08568270697917216]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[496, 4], [502, 50]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_incoming_data", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "sensor", "is_bucket_updated"], ["self", "sensor", "inactivity_seconds"], ["self", "sensor", "is_bucket_updated"], ["self", "sensor", "inactivity_seconds"], ["self", "sensor", "is_bucket_updated"], ["self", "sensor", "inactivity_seconds"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestGCSUploadSessionCompleteSensor.test_incoming_data", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[505, 4], [509, 51]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_no_new_data", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "sensor", "is_bucket_updated"], ["self", "sensor", "inactivity_seconds"], ["self", "sensor", "is_bucket_updated"], ["self", "sensor", "inactivity_seconds"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestGCSUploadSessionCompleteSensor.test_no_new_data", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[512, 4], [517, 51]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_no_new_data_success_criteria", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "sensor", "is_bucket_updated"], ["self", "sensor", "inactivity_seconds"], ["self", "sensor", "is_bucket_updated"], ["self", "sensor", "inactivity_seconds"], ["self", "sensor", "is_bucket_updated"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestGCSUploadSessionCompleteSensor.test_no_new_data_success_criteria", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[520, 4], [525, 55]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_not_enough_objects", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "sensor", "is_bucket_updated", "set"], ["self", "sensor", "inactivity_seconds"], ["self", "sensor", "is_bucket_updated", "set"], ["self", "sensor", "inactivity_seconds"], ["self", "sensor", "is_bucket_updated", "set"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestGCSUploadSessionCompleteSensor.test_not_enough_objects", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestGCSUploadSessionCompleteSensor", "q_name": "TestGCSUploadSessionCompleteSensor", "variables": {}, "variables_p": {}}, {"cls_lc": [[528, 0], [565, 9]], "cls_var_ln": {"OPERATOR": [[529, 4], [529, 12]]}, "cls_var_occur": {"OPERATOR": []}, "funcs": [{"docstring": {"func": "Asserts that a task is deferred and a GCSUploadSessionTrigger will be fired", "long_descr": "when the GCSUploadSessionCompleteSensorAsync is executed.", "ret": null}, "fn_lc": [[540, 4], [550, 53]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_gcs_upload_session_complete_sensor_async", "params": {"mock_hook": "", "self": ""}, "params_descr": {"mock_hook": "", "self": ""}, "params_occur": {"mock_hook": [["mock_hook", "return_value", "is_bucket_updated", "return_value", "False"]], "self": [["self", "OPERATOR", "execute", "mock", "MagicMock"]]}, "params_p": {"args": [], "kwargs": [], "mock_hook": [], "self": []}, "q_name": "TestGCSUploadSessionCompleteSensorAsync.test_gcs_upload_session_complete_sensor_async", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Tests that an AirflowException is raised in case of error event", "long_descr": null, "ret": null}, "fn_lc": [[552, 4], [558, 13]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_gcs_upload_session_complete_sensor_execute_failure", "params": {"context": "", "self": ""}, "params_descr": {"context": "", "self": ""}, "params_occur": {"context": [["self", "OPERATOR", "execute_complete", "context", "context", "event"]], "self": [["self", "OPERATOR", "execute_complete", "context", "context", "event"]]}, "params_p": {"args": [], "context": [], "kwargs": [], "self": []}, "q_name": "TestGCSUploadSessionCompleteSensorAsync.test_gcs_upload_session_complete_sensor_execute_failure", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Asserts that execute complete is completed as expected", "long_descr": null, "ret": null}, "fn_lc": [[560, 4], [565, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_gcs_upload_session_complete_sensor_async_execute_complete", "params": {"context": "", "self": ""}, "params_descr": {"context": "", "self": ""}, "params_occur": {"context": [["self", "OPERATOR", "execute_complete", "context", "context", "event"]], "self": [["self", "OPERATOR", "execute_complete", "context", "context", "event"]]}, "params_p": {"args": [], "context": [], "kwargs": [], "self": []}, "q_name": "TestGCSUploadSessionCompleteSensorAsync.test_gcs_upload_session_complete_sensor_async_execute_complete", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestGCSUploadSessionCompleteSensorAsync", "q_name": "TestGCSUploadSessionCompleteSensorAsync", "variables": {"OPERATOR": ""}, "variables_p": {"OPERATOR": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]]}}], "funcs": [{"docstring": {"func": "Creates an empty context.", "long_descr": null, "ret": null}, "fn_lc": [[66, 0], [71, 17]], "fn_var_ln": {"context": [[70, 4], [70, 11]]}, "fn_var_occur": {"context": [["context", "datetime", "utcnow"]]}, "name": "context", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "context", "ret_exprs": [], "ret_type": "", "variables": {"context": ""}, "variables_p": {"context": [["datetime.timedelta", 0.7999999999999999], ["datetime.timezone", 0.09999999999999999], ["datetime.datetime", 0.09999999999999999]]}}, {"docstring": {"func": "This each time this is called mock a time 10 seconds later", "long_descr": "than the previous call.", "ret": null}, "fn_lc": [[74, 0], [79, 32]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "next_time_side_effect", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "next_time_side_effect", "ret_exprs": ["return MOCK_DATE_ARRAY.pop()"], "ret_type": "", "ret_type_p": [["str", 0.4083269690318455], ["Iterable[int]", 0.08914164577789217]], "variables": {}, "variables_p": {}}], "imports": ["__future__", "annotations", "datetime", "datetime", "timedelta", "timezone", "unittest", "mock", "pendulum", "pytest", "google", "cloud", "storage", "retry", "DEFAULT_RETRY", "airflow", "exceptions", "AirflowProviderDeprecationWarning", "AirflowSensorTimeout", "TaskDeferred", "airflow", "models", "dag", "DAG", "AirflowException", "airflow", "providers", "google", "cloud", "sensors", "gcs", "GCSObjectExistenceAsyncSensor", "GCSObjectExistenceSensor", "GCSObjectsWithPrefixExistenceSensor", "GCSObjectUpdateSensor", "GCSUploadSessionCompleteSensor", "ts_function", "airflow", "providers", "google", "cloud", "triggers", "gcs", "GCSBlobTrigger", "GCSCheckBlobUpdateTimeTrigger", "GCSPrefixBlobTrigger", "GCSUploadSessionTrigger"], "mod_var_ln": {"DEFAULT_DATE": [[56, 0], [56, 12]], "MOCK_DATE_ARRAY": [[58, 0], [58, 15]], "TEST_BUCKET": [[44, 0], [44, 11]], "TEST_DAG_ID": [[54, 0], [54, 11]], "TEST_GCP_CONN_ID": [[48, 0], [48, 16]], "TEST_IMPERSONATION_CHAIN": [[50, 0], [50, 24]], "TEST_INACTIVITY_PERIOD": [[60, 0], [60, 22]], "TEST_MIN_OBJECTS": [[62, 0], [62, 16]], "TEST_OBJECT": [[46, 0], [46, 11]], "TEST_PREFIX": [[52, 0], [52, 11]], "mock_time": [[82, 0], [82, 9]]}, "mod_var_occur": {"DEFAULT_DATE": [["self", "dag", "DAG", "TEST_DAG_ID", "schedule", "start_date", "DEFAULT_DATE"]], "MOCK_DATE_ARRAY": [["MOCK_DATE_ARRAY", "pop"]], "TEST_BUCKET": [["task", "GCSObjectExistenceSensor", "task_id", "bucket", "TEST_BUCKET", "object", "TEST_OBJECT", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN"], ["mock_hook", "return_value", "exists", "assert_called_once_with", "TEST_BUCKET", "TEST_OBJECT", "DEFAULT_RETRY"], ["task", "GCSObjectExistenceSensor", "task_id", "bucket", "TEST_BUCKET", "object", "TEST_OBJECT", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "deferrable", "True"], ["task", "GCSObjectExistenceSensor", "task_id", "bucket", "TEST_BUCKET", "object", "TEST_OBJECT", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "deferrable", "True"], ["task", "GCSObjectExistenceSensor", "task_id", "bucket", "TEST_BUCKET", "object", "TEST_OBJECT", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "deferrable", "True"], ["task", "GCSObjectExistenceSensor", "task_id", "bucket", "TEST_BUCKET", "object", "TEST_OBJECT", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "deferrable", "True"], ["mock_log_info", "assert_called_with", "TEST_OBJECT", "TEST_BUCKET"], ["task", "GCSObjectExistenceAsyncSensor", "task_id", "bucket", "TEST_BUCKET", "object", "TEST_OBJECT", "google_cloud_conn_id", "TEST_GCP_CONN_ID"], ["task", "GCSObjectExistenceAsyncSensor", "task_id", "bucket", "TEST_BUCKET", "object", "TEST_OBJECT", "google_cloud_conn_id", "TEST_GCP_CONN_ID"], ["task", "GCSObjectExistenceAsyncSensor", "task_id", "bucket", "TEST_BUCKET", "object", "TEST_OBJECT", "google_cloud_conn_id", "TEST_GCP_CONN_ID"], ["mock_log_info", "assert_called_with", "TEST_OBJECT", "TEST_BUCKET"], ["task", "GCSObjectUpdateSensor", "task_id", "bucket", "TEST_BUCKET", "object", "TEST_OBJECT", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN"], ["mock_hook", "return_value", "is_updated_after", "assert_called_once_with", "TEST_BUCKET", "TEST_OBJECT", "mock", "ANY"], ["task", "GCSObjectUpdateSensor", "task_id", "bucket", "TEST_BUCKET", "object", "TEST_OBJECT", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN", "deferrable", "True"], ["OPERATOR", "GCSObjectUpdateSensor", "task_id", "bucket", "TEST_BUCKET", "object", "TEST_OBJECT", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "deferrable", "True"], ["mock_log_info", "assert_called_with", "TEST_OBJECT", "TEST_BUCKET"], ["task", "GCSObjectsWithPrefixExistenceSensor", "task_id", "bucket", "TEST_BUCKET", "prefix", "TEST_PREFIX", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN"], ["mock_hook", "return_value", "list", "assert_called_once_with", "TEST_BUCKET", "prefix", "TEST_PREFIX"], ["task", "GCSObjectsWithPrefixExistenceSensor", "task_id", "bucket", "TEST_BUCKET", "prefix", "TEST_PREFIX", "google_cloud_conn_id", "TEST_GCP_CONN_ID"], ["task", "GCSObjectsWithPrefixExistenceSensor", "task_id", "bucket", "TEST_BUCKET", "prefix", "TEST_PREFIX", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN", "poke_interval"], ["mock_hook", "return_value", "list", "assert_called_once_with", "TEST_BUCKET", "prefix", "TEST_PREFIX"], ["task", "GCSObjectsWithPrefixExistenceSensor", "task_id", "bucket", "TEST_BUCKET", "prefix", "TEST_PREFIX", "poke_interval", "timeout"], ["mock_hook", "return_value", "list", "assert_called_once_with", "TEST_BUCKET", "prefix", "TEST_PREFIX"], ["task", "GCSObjectsWithPrefixExistenceSensor", "task_id", "bucket", "TEST_BUCKET", "prefix", "TEST_PREFIX", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN", "deferrable", "True"], ["OPERATOR", "GCSObjectsWithPrefixExistenceSensor", "task_id", "bucket", "TEST_BUCKET", "prefix", "TEST_OBJECT", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "deferrable", "True"], ["OPERATOR", "GCSUploadSessionCompleteSensor", "task_id", "bucket", "TEST_BUCKET", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "prefix", "TEST_OBJECT", "inactivity_period", "TEST_INACTIVITY_PERIOD", "min_objects", "TEST_MIN_OBJECTS", "deferrable", "True"]], "TEST_DAG_ID": [["context", "DAG", "dag_id", "TEST_DAG_ID", "schedule", "timedelta", "days", "datetime"], ["dag", "DAG", "dag_id", "TEST_DAG_ID", "start_date", "datetime", "schedule"], ["self", "dag", "DAG", "TEST_DAG_ID", "schedule", "start_date", "DEFAULT_DATE"]], "TEST_GCP_CONN_ID": [["task", "GCSObjectExistenceSensor", "task_id", "bucket", "TEST_BUCKET", "object", "TEST_OBJECT", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN"], ["mock_hook", "assert_called_once_with", "gcp_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN"], ["task", "GCSObjectExistenceSensor", "task_id", "bucket", "TEST_BUCKET", "object", "TEST_OBJECT", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "deferrable", "True"], ["task", "GCSObjectExistenceSensor", "task_id", "bucket", "TEST_BUCKET", "object", "TEST_OBJECT", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "deferrable", "True"], ["task", "GCSObjectExistenceSensor", "task_id", "bucket", "TEST_BUCKET", "object", "TEST_OBJECT", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "deferrable", "True"], ["task", "GCSObjectExistenceSensor", "task_id", "bucket", "TEST_BUCKET", "object", "TEST_OBJECT", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "deferrable", "True"], ["task", "GCSObjectExistenceAsyncSensor", "task_id", "bucket", "TEST_BUCKET", "object", "TEST_OBJECT", "google_cloud_conn_id", "TEST_GCP_CONN_ID"], ["task", "GCSObjectExistenceAsyncSensor", "task_id", "bucket", "TEST_BUCKET", "object", "TEST_OBJECT", "google_cloud_conn_id", "TEST_GCP_CONN_ID"], ["task", "GCSObjectExistenceAsyncSensor", "task_id", "bucket", "TEST_BUCKET", "object", "TEST_OBJECT", "google_cloud_conn_id", "TEST_GCP_CONN_ID"], ["task", "GCSObjectUpdateSensor", "task_id", "bucket", "TEST_BUCKET", "object", "TEST_OBJECT", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN"], ["mock_hook", "assert_called_once_with", "gcp_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN"], ["task", "GCSObjectUpdateSensor", "task_id", "bucket", "TEST_BUCKET", "object", "TEST_OBJECT", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN", "deferrable", "True"], ["OPERATOR", "GCSObjectUpdateSensor", "task_id", "bucket", "TEST_BUCKET", "object", "TEST_OBJECT", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "deferrable", "True"], ["task", "GCSObjectsWithPrefixExistenceSensor", "task_id", "bucket", "TEST_BUCKET", "prefix", "TEST_PREFIX", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN"], ["mock_hook", "assert_called_once_with", "gcp_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN"], ["task", "GCSObjectsWithPrefixExistenceSensor", "task_id", "bucket", "TEST_BUCKET", "prefix", "TEST_PREFIX", "google_cloud_conn_id", "TEST_GCP_CONN_ID"], ["task", "GCSObjectsWithPrefixExistenceSensor", "task_id", "bucket", "TEST_BUCKET", "prefix", "TEST_PREFIX", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN", "poke_interval"], ["mock_hook", "assert_called_once_with", "gcp_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN"], ["task", "GCSObjectsWithPrefixExistenceSensor", "task_id", "bucket", "TEST_BUCKET", "prefix", "TEST_PREFIX", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN", "deferrable", "True"], ["OPERATOR", "GCSObjectsWithPrefixExistenceSensor", "task_id", "bucket", "TEST_BUCKET", "prefix", "TEST_OBJECT", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "deferrable", "True"], ["self", "sensor", "GCSUploadSessionCompleteSensor", "task_id", "bucket", "prefix", "inactivity_period", "poke_interval", "min_objects", "allow_delete", "False", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN", "dag", "self", "dag"], ["mock_hook", "assert_called_once_with", "gcp_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN"], ["OPERATOR", "GCSUploadSessionCompleteSensor", "task_id", "bucket", "TEST_BUCKET", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "prefix", "TEST_OBJECT", "inactivity_period", "TEST_INACTIVITY_PERIOD", "min_objects", "TEST_MIN_OBJECTS", "deferrable", "True"]], "TEST_IMPERSONATION_CHAIN": [["task", "GCSObjectExistenceSensor", "task_id", "bucket", "TEST_BUCKET", "object", "TEST_OBJECT", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN"], ["mock_hook", "assert_called_once_with", "gcp_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN"], ["task", "GCSObjectUpdateSensor", "task_id", "bucket", "TEST_BUCKET", "object", "TEST_OBJECT", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN"], ["mock_hook", "assert_called_once_with", "gcp_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN"], ["task", "GCSObjectUpdateSensor", "task_id", "bucket", "TEST_BUCKET", "object", "TEST_OBJECT", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN", "deferrable", "True"], ["task", "GCSObjectsWithPrefixExistenceSensor", "task_id", "bucket", "TEST_BUCKET", "prefix", "TEST_PREFIX", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN"], ["mock_hook", "assert_called_once_with", "gcp_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN"], ["task", "GCSObjectsWithPrefixExistenceSensor", "task_id", "bucket", "TEST_BUCKET", "prefix", "TEST_PREFIX", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN", "poke_interval"], ["mock_hook", "assert_called_once_with", "gcp_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN"], ["task", "GCSObjectsWithPrefixExistenceSensor", "task_id", "bucket", "TEST_BUCKET", "prefix", "TEST_PREFIX", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN", "deferrable", "True"], ["self", "sensor", "GCSUploadSessionCompleteSensor", "task_id", "bucket", "prefix", "inactivity_period", "poke_interval", "min_objects", "allow_delete", "False", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN", "dag", "self", "dag"], ["mock_hook", "assert_called_once_with", "gcp_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN"]], "TEST_INACTIVITY_PERIOD": [["OPERATOR", "GCSUploadSessionCompleteSensor", "task_id", "bucket", "TEST_BUCKET", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "prefix", "TEST_OBJECT", "inactivity_period", "TEST_INACTIVITY_PERIOD", "min_objects", "TEST_MIN_OBJECTS", "deferrable", "True"]], "TEST_MIN_OBJECTS": [["OPERATOR", "GCSUploadSessionCompleteSensor", "task_id", "bucket", "TEST_BUCKET", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "prefix", "TEST_OBJECT", "inactivity_period", "TEST_INACTIVITY_PERIOD", "min_objects", "TEST_MIN_OBJECTS", "deferrable", "True"]], "TEST_OBJECT": [["task", "GCSObjectExistenceSensor", "task_id", "bucket", "TEST_BUCKET", "object", "TEST_OBJECT", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN"], ["mock_hook", "return_value", "exists", "assert_called_once_with", "TEST_BUCKET", "TEST_OBJECT", "DEFAULT_RETRY"], ["task", "GCSObjectExistenceSensor", "task_id", "bucket", "TEST_BUCKET", "object", "TEST_OBJECT", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "deferrable", "True"], ["task", "GCSObjectExistenceSensor", "task_id", "bucket", "TEST_BUCKET", "object", "TEST_OBJECT", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "deferrable", "True"], ["task", "GCSObjectExistenceSensor", "task_id", "bucket", "TEST_BUCKET", "object", "TEST_OBJECT", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "deferrable", "True"], ["task", "GCSObjectExistenceSensor", "task_id", "bucket", "TEST_BUCKET", "object", "TEST_OBJECT", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "deferrable", "True"], ["mock_log_info", "assert_called_with", "TEST_OBJECT", "TEST_BUCKET"], ["task", "GCSObjectExistenceAsyncSensor", "task_id", "bucket", "TEST_BUCKET", "object", "TEST_OBJECT", "google_cloud_conn_id", "TEST_GCP_CONN_ID"], ["task", "GCSObjectExistenceAsyncSensor", "task_id", "bucket", "TEST_BUCKET", "object", "TEST_OBJECT", "google_cloud_conn_id", "TEST_GCP_CONN_ID"], ["task", "GCSObjectExistenceAsyncSensor", "task_id", "bucket", "TEST_BUCKET", "object", "TEST_OBJECT", "google_cloud_conn_id", "TEST_GCP_CONN_ID"], ["mock_log_info", "assert_called_with", "TEST_OBJECT", "TEST_BUCKET"], ["task", "GCSObjectUpdateSensor", "task_id", "bucket", "TEST_BUCKET", "object", "TEST_OBJECT", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN"], ["mock_hook", "return_value", "is_updated_after", "assert_called_once_with", "TEST_BUCKET", "TEST_OBJECT", "mock", "ANY"], ["task", "GCSObjectUpdateSensor", "task_id", "bucket", "TEST_BUCKET", "object", "TEST_OBJECT", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN", "deferrable", "True"], ["OPERATOR", "GCSObjectUpdateSensor", "task_id", "bucket", "TEST_BUCKET", "object", "TEST_OBJECT", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "deferrable", "True"], ["mock_log_info", "assert_called_with", "TEST_OBJECT", "TEST_BUCKET"], ["OPERATOR", "GCSObjectsWithPrefixExistenceSensor", "task_id", "bucket", "TEST_BUCKET", "prefix", "TEST_OBJECT", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "deferrable", "True"], ["self", "OPERATOR", "execute_complete", "context", "context", "event", "TEST_OBJECT"], ["OPERATOR", "GCSUploadSessionCompleteSensor", "task_id", "bucket", "TEST_BUCKET", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "prefix", "TEST_OBJECT", "inactivity_period", "TEST_INACTIVITY_PERIOD", "min_objects", "TEST_MIN_OBJECTS", "deferrable", "True"]], "TEST_PREFIX": [["task", "GCSObjectsWithPrefixExistenceSensor", "task_id", "bucket", "TEST_BUCKET", "prefix", "TEST_PREFIX", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN"], ["mock_hook", "return_value", "list", "assert_called_once_with", "TEST_BUCKET", "prefix", "TEST_PREFIX"], ["task", "GCSObjectsWithPrefixExistenceSensor", "task_id", "bucket", "TEST_BUCKET", "prefix", "TEST_PREFIX", "google_cloud_conn_id", "TEST_GCP_CONN_ID"], ["task", "GCSObjectsWithPrefixExistenceSensor", "task_id", "bucket", "TEST_BUCKET", "prefix", "TEST_PREFIX", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN", "poke_interval"], ["mock_hook", "return_value", "list", "assert_called_once_with", "TEST_BUCKET", "prefix", "TEST_PREFIX"], ["task", "GCSObjectsWithPrefixExistenceSensor", "task_id", "bucket", "TEST_BUCKET", "prefix", "TEST_PREFIX", "poke_interval", "timeout"], ["mock_hook", "return_value", "list", "assert_called_once_with", "TEST_BUCKET", "prefix", "TEST_PREFIX"], ["task", "GCSObjectsWithPrefixExistenceSensor", "task_id", "bucket", "TEST_BUCKET", "prefix", "TEST_PREFIX", "google_cloud_conn_id", "TEST_GCP_CONN_ID", "impersonation_chain", "TEST_IMPERSONATION_CHAIN", "deferrable", "True"]], "mock_time": []}, "no_types_annot": {"D": 0, "I": 0, "U": 106}, "session_id": "E0bz0AWYRl_0LuAnKpOJZzGQp3ILArNSNiKwCofH91o", "set": null, "tc": [false, null], "type_annot_cove": 0.0, "typed_seq": "", "untyped_seq": "", "variables": {"DEFAULT_DATE": "", "MOCK_DATE_ARRAY": "", "TEST_BUCKET": "", "TEST_DAG_ID": "", "TEST_GCP_CONN_ID": "", "TEST_IMPERSONATION_CHAIN": "", "TEST_INACTIVITY_PERIOD": "", "TEST_MIN_OBJECTS": "", "TEST_OBJECT": "", "TEST_PREFIX": "", "mock_time": ""}, "variables_p": {"DEFAULT_DATE": [["int", 0.21512141331668871], ["datetime.timezone", 0.16716051164068513], ["Type[prm.journals.models.moods.Mood]", 0.10384720644173227], ["List[Union[Any, Any]]", 0.1001410261141234], ["Optional[datetime.tzinfo]", 0.0988275033216755], ["datetime.timedelta", 0.08661600893372415], ["datetime.datetime", 0.08357694759126715]], "MOCK_DATE_ARRAY": [["datetime.datetime", 0.5044299298027897], ["Optional[str]", 0.10437870131747018], ["str", 0.10437870131747018], ["datetime.datetime.date", 0.097638110882397], ["datetime.date", 0.09285938547758552]], "TEST_BUCKET": [["str", 0.18036895691816807], ["list", 0.11680568130515337], ["deeplearning.ml4pl.models.checkpoints.CheckpointReference", 0.11640924356829493], ["int", 0.08811350731142897]], "TEST_DAG_ID": [["int", 0.38211917665130624], ["str", 0.3324036193503478], ["dict", 0.1927339829991893], ["bool", 0.0927432209991567]], "TEST_GCP_CONN_ID": [["str", 0.38291997704059716], ["Tuple[str, str]", 0.1505340285235446], ["int", 0.09482873122473064], ["Optional[str]", 0.09181312279140805], ["dict", 0.08840739925118127]], "TEST_IMPERSONATION_CHAIN": [["Dict[str, Union[Any, Any, Any, Any]]", 0.18071608214552184], ["List[List[int]]", 0.12362404983454858], ["Pattern[str]", 0.12040223843194274], ["List[int]", 0.09843546022230745], ["List[Tuple[int, Any]]", 0.0978950982765675], ["Dict[str, float]", 0.09233977152502726], ["enumerate[Any]", 0.08915386624576002]], "TEST_INACTIVITY_PERIOD": [["int", 0.26368894663390297], ["str", 0.24304171932045843], ["Dict[str, Any]", 0.08818195862302552]], "TEST_MIN_OBJECTS": [["int", 0.26368894663390297], ["str", 0.24304171932045843], ["Dict[str, Any]", 0.08818195862302552]], "TEST_OBJECT": [["Dict[str, Union[Any, Any, Any, Any]]", 0.18071608214552184], ["List[List[int]]", 0.12362404983454858], ["Pattern[str]", 0.12040223843194274], ["List[int]", 0.09843546022230745], ["List[Tuple[int, Any]]", 0.0978950982765675], ["Dict[str, float]", 0.09233977152502726], ["enumerate[Any]", 0.08915386624576002]], "TEST_PREFIX": [["str", 0.5511033412851727], ["dict", 0.18694237250441886], ["list", 0.08996613950348291], ["mock.Mock", 0.08608194646368518], ["List[Tuple[str, str, str, str, Any]]", 0.08590620024324037]], "mock_time": [["Dict[str, Union[Any, Any]]", 0.999999996639361], ["property", 1.1903939801107088e-09], ["List[str]", 1.0500320068624797e-09], ["str", 5.951969900553544e-10], ["Tuple[str]", 5.250160034312399e-10]]}}}