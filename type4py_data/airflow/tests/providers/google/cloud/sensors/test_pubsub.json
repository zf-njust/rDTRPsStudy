{"error": null, "response": {"classes": [{"cls_lc": [[35, 0], [205, 83]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[36, 4], [46, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "_generate_messages", "params": {"count": "", "self": ""}, "params_descr": {"count": "", "self": ""}, "params_occur": {"count": [["ReceivedMessage", "ack_id", "i", "message", "i", "encode", "i", "range", "count"]], "self": []}, "params_p": {"args": [], "count": [["int", 0.6167689409318424], ["str", 0.2781217620157077]], "kwargs": [], "self": []}, "q_name": "TestPubSubPullSensor._generate_messages", "ret_exprs": ["return [ ReceivedMessage( ack_id=f\"{i}\", message={ \"data\": f\"Message {i}\".encode(), \"attributes\": {\"type\": \"generated message\"}, }, ) for i in range(1, count + 1)]"], "ret_type": "", "ret_type_p": [["str", 0.4200668497583132], ["IO[str]", 0.10316305066313752], ["Optional[str]", 0.09849670650528557], ["int", 0.08818500132150817]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[48, 4], [49, 83]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "_generate_dicts", "params": {"count": "", "self": ""}, "params_descr": {"count": "", "self": ""}, "params_occur": {"count": [["ReceivedMessage", "to_dict", "m", "m", "self", "_generate_messages", "count"]], "self": [["ReceivedMessage", "to_dict", "m", "m", "self", "_generate_messages", "count"]]}, "params_p": {"args": [], "count": [["str", 0.1779506372123435], ["int", 0.12751765600054224]], "kwargs": [], "self": []}, "q_name": "TestPubSubPullSensor._generate_dicts", "ret_exprs": ["return [ReceivedMessage.to_dict(m) for m in self._generate_messages(count)]"], "ret_type": "", "ret_type_p": [["List[str]", 0.19279264008720162], ["int", 0.10215012547291102], ["bytes", 0.10208968892009641], ["Dict[str, \"Outcome\"]", 0.10008034175095169], ["bool", 0.09894428235278041], ["\"DescriptionObserver\"", 0.09693986144830652]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[52, 4], [60, 41]], "fn_var_ln": {"operator": [[53, 8], [53, 16]]}, "fn_var_occur": {"operator": [["operator", "PubSubPullSensor", "task_id", "TASK_ID", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION"], ["operator", "poke", "False"]]}, "name": "test_poke_no_messages", "params": {"mock_hook": "", "self": ""}, "params_descr": {"mock_hook": "", "self": ""}, "params_occur": {"mock_hook": [["mock_hook", "return_value", "pull", "return_value"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_hook": [["mock.MagicMock", 0.12981820936082433]], "self": []}, "q_name": "TestPubSubPullSensor.test_poke_no_messages", "ret_exprs": [], "ret_type": "", "variables": {"operator": ""}, "variables_p": {"operator": [["str", 0.7088149157897586]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[63, 4], [80, 9]], "fn_var_ln": {"generated_messages": [[71, 8], [71, 26]], "operator": [[64, 8], [64, 16]]}, "fn_var_occur": {"generated_messages": [["generated_messages", "self", "_generate_messages"], ["mock_hook", "return_value", "pull", "return_value", "generated_messages"], ["mock_hook", "return_value", "acknowledge", "assert_called_once_with", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "messages", "generated_messages"]], "operator": [["operator", "PubSubPullSensor", "task_id", "TASK_ID", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "ack_messages", "True"], ["operator", "poke", "True"]]}, "name": "test_poke_with_ack_messages", "params": {"mock_hook": "", "self": ""}, "params_descr": {"mock_hook": "", "self": ""}, "params_occur": {"mock_hook": [["mock_hook", "return_value", "pull", "return_value", "generated_messages"], ["mock_hook", "return_value", "acknowledge", "assert_called_once_with", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "messages", "generated_messages"]], "self": [["generated_messages", "self", "_generate_messages"]]}, "params_p": {"args": [], "kwargs": [], "mock_hook": [["mock.MagicMock", 0.11913551036554748]], "self": []}, "q_name": "TestPubSubPullSensor.test_poke_with_ack_messages", "ret_exprs": [], "ret_type": "", "variables": {"generated_messages": "", "operator": ""}, "variables_p": {"generated_messages": [["Dict[str, Dict[str, Any]]", 0.30589034605295334], ["list", 0.2711179568078491], ["str", 0.1166768886553779]], "operator": [["str", 0.702058822674055], ["List[str]", 0.09913012569380267]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[83, 4], [99, 42]], "fn_var_ln": {"generated_dicts": [[92, 8], [92, 23]], "generated_messages": [[91, 8], [91, 26]], "operator": [[84, 8], [84, 16]], "response": [[95, 8], [95, 16]]}, "fn_var_occur": {"generated_dicts": [["generated_dicts", "self", "_generate_dicts"], ["generated_dicts", "response"]], "generated_messages": [["generated_messages", "self", "_generate_messages"], ["mock_hook", "return_value", "pull", "return_value", "generated_messages"]], "operator": [["operator", "PubSubPullSensor", "task_id", "TASK_ID", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "poke_interval"], ["response", "operator", "execute"]], "response": [["response", "operator", "execute"], ["generated_dicts", "response"]]}, "name": "test_execute", "params": {"mock_hook": "", "self": ""}, "params_descr": {"mock_hook": "", "self": ""}, "params_occur": {"mock_hook": [["mock_hook", "return_value", "pull", "return_value", "generated_messages"], ["mock_hook", "return_value", "pull", "assert_called_once_with", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "max_messages", "return_immediately", "True"]], "self": [["generated_messages", "self", "_generate_messages"], ["generated_dicts", "self", "_generate_dicts"]]}, "params_p": {"args": [], "kwargs": [], "mock_hook": [["mock.MagicMock", 0.10281683231557744]], "self": []}, "q_name": "TestPubSubPullSensor.test_execute", "ret_exprs": [], "ret_type": "", "variables": {"generated_dicts": "", "generated_messages": "", "operator": "", "response": ""}, "variables_p": {"generated_dicts": [["int", 0.3719730676730677], ["str", 0.25656285864208117], ["float", 0.18376000694001826], ["list", 0.09385203337241636], ["List[Callable[[], bool]]", 0.09385203337241636]], "generated_messages": [["Dict[str, Dict[str, Any]]", 0.4019450723040635], ["list", 0.2382751356750637], ["str", 0.1603204731188579]], "operator": [["str", 0.7253250888299108]], "response": [["int", 0.18882622503606133], ["list", 0.10905140591188883], ["List[str]", 0.10105436042041871], ["tuple", 0.09579620652953753]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[102, 4], [120, 13]], "fn_var_ln": {"operator": [[103, 8], [103, 16]]}, "fn_var_occur": {"operator": [["operator", "PubSubPullSensor", "task_id", "TASK_ID", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "poke_interval", "timeout"], ["operator", "execute"]]}, "name": "test_execute_timeout", "params": {"mock_hook": "", "self": ""}, "params_descr": {"mock_hook": "", "self": ""}, "params_occur": {"mock_hook": [["mock_hook", "return_value", "pull", "return_value"], ["mock_hook", "return_value", "pull", "assert_called_once_with", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "max_messages", "return_immediately", "False"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_hook": [["mock.MagicMock", 0.08844398634828135]], "self": []}, "q_name": "TestPubSubPullSensor.test_execute_timeout", "ret_exprs": [], "ret_type": "", "variables": {"operator": ""}, "variables_p": {"operator": [["str", 0.8048015286980024]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[127, 8], [137, 49]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "messages_callback", "params": {"context": "builtins.dict[builtins.str, typing.Any]", "pulled_messages": "builtins.list[google.cloud.pubsub_v1.types.ReceivedMessage]"}, "params_descr": {"context": "", "pulled_messages": ""}, "params_occur": {"context": [["isinstance", "context", "dict"], ["context", "keys"]], "pulled_messages": [["pulled_messages", "generated_messages"]]}, "params_p": {"args": [], "context": [["str", 0.3921833187868301], ["dict", 0.19480625535292023], ["Dict[str, str]", 0.09959941530458385]], "kwargs": [], "pulled_messages": [["str", 0.28178043608482084], ["T", 0.10855061988427452], ["dict", 0.09287516840386946], ["Tuple[int, int]", 0.0870696307834293]], "self": []}, "q_name": "TestPubSubPullSensor.test_execute_with_messages_callback.<locals>.messages_callback", "ret_exprs": ["return messages_callback_return_value"], "ret_type": "", "ret_type_p": [["bool", 0.17897302351030472], ["int", 0.14645496213876694]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[123, 4], [158, 57]], "fn_var_ln": {"generated_messages": [[124, 8], [124, 26]], "messages_callback": [[139, 8], [139, 25]], "messages_callback_return_value": [[125, 8], [125, 38]], "operator": [[141, 8], [141, 16]], "response": [[151, 8], [151, 16]]}, "fn_var_occur": {"generated_messages": [["mock_hook", "return_value", "pull", "return_value", "generated_messages"]], "messages_callback": [["messages_callback", "mock", "Mock", "side_effect", "messages_callback"], ["operator", "PubSubPullSensor", "task_id", "TASK_ID", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "poke_interval", "messages_callback", "messages_callback"], ["messages_callback", "assert_called_once"]], "messages_callback_return_value": [["response", "messages_callback_return_value"]], "operator": [["operator", "PubSubPullSensor", "task_id", "TASK_ID", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "poke_interval", "messages_callback", "messages_callback"], ["response", "operator", "execute"]], "response": [["response", "operator", "execute"], ["response", "messages_callback_return_value"]]}, "name": "test_execute_with_messages_callback", "params": {"mock_hook": "", "self": ""}, "params_descr": {"mock_hook": "", "self": ""}, "params_occur": {"mock_hook": [["mock_hook", "return_value", "pull", "return_value", "generated_messages"], ["mock_hook", "return_value", "pull", "assert_called_once_with", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "max_messages", "return_immediately", "True"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_hook": [["mock.MagicMock", 0.10281683231557744]], "self": []}, "q_name": "TestPubSubPullSensor.test_execute_with_messages_callback", "ret_exprs": [], "ret_type": "", "variables": {"generated_messages": "", "messages_callback": "", "messages_callback_return_value": "", "operator": "", "response": ""}, "variables_p": {"generated_messages": [["Dict[str, Dict[str, Any]]", 0.5740051325091369], ["Tuple[Literal, Literal]", 0.13013616594402094], ["str", 0.05955191660124834], ["List[str]", 0.05794221932181548], ["List[Dict[str, Any]]", 0.057038881293596425], ["int", 0.05511025487012756]], "messages_callback": [["mock.Mock", 0.3757118950721107]], "messages_callback_return_value": [["int", 0.34669645672802085], ["Pattern[str]", 0.22542562103030453], ["str", 0.12587610359967533], ["Dict[str, str]", 0.10693451794137794], ["Dict[int, bytes]", 0.10654967828419576], ["List[str]", 0.08851762241642563]], "operator": [["str", 0.8095920819367717]], "response": [["list", 0.07817214677359058]]}}, {"docstring": {"func": "Asserts that a task is deferred and a PubsubPullTrigger will be fired", "long_descr": "when the PubSubPullSensor is executed.", "ret": null}, "fn_lc": [[160, 4], [174, 101]], "fn_var_ln": {"task": [[165, 8], [165, 12]]}, "fn_var_occur": {"task": [["task", "PubSubPullSensor", "task_id", "ack_messages", "True", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "deferrable", "True"], ["task", "execute", "context"]]}, "name": "test_pubsub_pull_sensor_async", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestPubSubPullSensor.test_pubsub_pull_sensor_async", "ret_exprs": [], "ret_type": "", "variables": {"task": ""}, "variables_p": {"task": [["str", 0.46793175615074334], ["Dict[str, str]", 0.18624042124982512], ["Dict[str, Any]", 0.08525440962108845], ["Counter[str]", 0.08298895199390792]]}}, {"docstring": {"func": "Tests that an AirflowException is raised in case of error event", "long_descr": null, "ret": null}, "fn_lc": [[176, 4], [190, 13]], "fn_var_ln": {"operator": [[179, 8], [179, 16]]}, "fn_var_occur": {"operator": [["operator", "PubSubPullSensor", "task_id", "ack_messages", "True", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "deferrable", "True"], ["operator", "execute_complete", "context", "mock", "MagicMock", "event"]]}, "name": "test_pubsub_pull_sensor_async_execute_should_throw_exception", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestPubSubPullSensor.test_pubsub_pull_sensor_async_execute_should_throw_exception", "ret_exprs": [], "ret_type": "", "variables": {"operator": ""}, "variables_p": {"operator": [["str", 0.7967662704677345], ["list", 0.11761710507642943], ["int", 0.08561662445583637]]}}, {"docstring": {"func": "Asserts that logging occurs as expected", "long_descr": null, "ret": null}, "fn_lc": [[192, 4], [205, 83]], "fn_var_ln": {"operator": [[194, 8], [194, 16]], "test_message": [[202, 8], [202, 20]]}, "fn_var_occur": {"operator": [["operator", "PubSubPullSensor", "task_id", "ack_messages", "True", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "deferrable", "True"], ["mock", "patch", "object", "operator", "log", "mock_log_info"], ["operator", "execute_complete", "context", "event", "test_message"]], "test_message": [["operator", "execute_complete", "context", "event", "test_message"], ["mock_log_info", "assert_called_with", "test_message"]]}, "name": "test_pubsub_pull_sensor_async_execute_complete", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestPubSubPullSensor.test_pubsub_pull_sensor_async_execute_complete", "ret_exprs": [], "ret_type": "", "variables": {"operator": "", "test_message": ""}, "variables_p": {"operator": [["str", 1.0000000000000002]], "test_message": [["str", 0.1424841253616656], ["Dict[str, Dict[str, Any]]", 0.10284118021003079], ["google.protobuf.descriptor.FieldDescriptor", 0.07971385696552644]]}}], "name": "TestPubSubPullSensor", "q_name": "TestPubSubPullSensor", "variables": {}, "variables_p": {}}], "funcs": [], "imports": ["__future__", "annotations", "typing", "Any", "unittest", "mock", "pytest", "google", "cloud", "pubsub_v1", "types", "ReceivedMessage", "airflow", "exceptions", "AirflowException", "AirflowSensorTimeout", "TaskDeferred", "airflow", "providers", "google", "cloud", "sensors", "pubsub", "PubSubPullSensor", "airflow", "providers", "google", "cloud", "triggers", "pubsub", "PubsubPullTrigger"], "mod_var_ln": {"TASK_ID": [[30, 0], [30, 7]], "TEST_PROJECT": [[31, 0], [31, 12]], "TEST_SUBSCRIPTION": [[32, 0], [32, 17]]}, "mod_var_occur": {"TASK_ID": [["operator", "PubSubPullSensor", "task_id", "TASK_ID", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION"], ["operator", "PubSubPullSensor", "task_id", "TASK_ID", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "ack_messages", "True"], ["operator", "PubSubPullSensor", "task_id", "TASK_ID", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "poke_interval"], ["operator", "PubSubPullSensor", "task_id", "TASK_ID", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "poke_interval", "timeout"], ["operator", "PubSubPullSensor", "task_id", "TASK_ID", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "poke_interval", "messages_callback", "messages_callback"]], "TEST_PROJECT": [["operator", "PubSubPullSensor", "task_id", "TASK_ID", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION"], ["operator", "PubSubPullSensor", "task_id", "TASK_ID", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "ack_messages", "True"], ["mock_hook", "return_value", "acknowledge", "assert_called_once_with", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "messages", "generated_messages"], ["operator", "PubSubPullSensor", "task_id", "TASK_ID", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "poke_interval"], ["mock_hook", "return_value", "pull", "assert_called_once_with", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "max_messages", "return_immediately", "True"], ["operator", "PubSubPullSensor", "task_id", "TASK_ID", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "poke_interval", "timeout"], ["mock_hook", "return_value", "pull", "assert_called_once_with", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "max_messages", "return_immediately", "False"], ["operator", "PubSubPullSensor", "task_id", "TASK_ID", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "poke_interval", "messages_callback", "messages_callback"], ["mock_hook", "return_value", "pull", "assert_called_once_with", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "max_messages", "return_immediately", "True"], ["task", "PubSubPullSensor", "task_id", "ack_messages", "True", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "deferrable", "True"], ["operator", "PubSubPullSensor", "task_id", "ack_messages", "True", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "deferrable", "True"], ["operator", "PubSubPullSensor", "task_id", "ack_messages", "True", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "deferrable", "True"]], "TEST_SUBSCRIPTION": [["operator", "PubSubPullSensor", "task_id", "TASK_ID", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION"], ["operator", "PubSubPullSensor", "task_id", "TASK_ID", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "ack_messages", "True"], ["mock_hook", "return_value", "acknowledge", "assert_called_once_with", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "messages", "generated_messages"], ["operator", "PubSubPullSensor", "task_id", "TASK_ID", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "poke_interval"], ["mock_hook", "return_value", "pull", "assert_called_once_with", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "max_messages", "return_immediately", "True"], ["operator", "PubSubPullSensor", "task_id", "TASK_ID", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "poke_interval", "timeout"], ["mock_hook", "return_value", "pull", "assert_called_once_with", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "max_messages", "return_immediately", "False"], ["operator", "PubSubPullSensor", "task_id", "TASK_ID", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "poke_interval", "messages_callback", "messages_callback"], ["mock_hook", "return_value", "pull", "assert_called_once_with", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "max_messages", "return_immediately", "True"], ["task", "PubSubPullSensor", "task_id", "ack_messages", "True", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "deferrable", "True"], ["operator", "PubSubPullSensor", "task_id", "ack_messages", "True", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "deferrable", "True"], ["operator", "PubSubPullSensor", "task_id", "ack_messages", "True", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "deferrable", "True"]]}, "no_types_annot": {"D": 2, "I": 0, "U": 38}, "session_id": "OJCbK_kSQzZbIBy-E6dVBp3JRjDWm8Cu_8DHv06Oo0A", "set": null, "tc": [false, null], "type_annot_cove": 0.05, "typed_seq": "", "untyped_seq": "", "variables": {"TASK_ID": "", "TEST_PROJECT": "", "TEST_SUBSCRIPTION": ""}, "variables_p": {"TASK_ID": [["str", 0.9044241959433507], ["int", 0.09557580405664913]], "TEST_PROJECT": [["str", 0.9999999999999999]], "TEST_SUBSCRIPTION": [["str", 0.8270086843773606], ["Dict[str, Union[None, Any, Any, int, str]]", 0.09936596705013524], ["int", 0.07362534857250407]]}}}