{"error": null, "response": {"classes": [{"cls_lc": [[46, 0], [85, 9]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[48, 4], [65, 9]], "fn_var_ln": {"context": [[53, 8], [53, 15]], "operator": [[49, 8], [49, 16]]}, "fn_var_occur": {"context": [["context", "mock", "MagicMock"], ["operator", "execute", "context", "context"]], "operator": [["operator", "PubSubCreateTopicOperator", "task_id", "TASK_ID", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "fail_if_exists", "True"], ["operator", "execute", "context", "context"]]}, "name": "test_failifexists", "params": {"mock_hook": "", "self": ""}, "params_descr": {"mock_hook": "", "self": ""}, "params_occur": {"mock_hook": [["mock_hook", "return_value", "create_topic", "assert_called_once_with", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "fail_if_exists", "True", "labels", "None", "message_storage_policy", "None", "kms_key_name", "None", "retry", "DEFAULT", "timeout", "None", "metadata"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_hook": [], "self": []}, "q_name": "TestPubSubTopicCreateOperator.test_failifexists", "ret_exprs": [], "ret_type": "", "variables": {"context": "", "operator": ""}, "variables_p": {"context": [["mock.Mock", 0.8668319609292552]], "operator": [["str", 0.9067532379707925]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[68, 4], [85, 9]], "fn_var_ln": {"context": [[73, 8], [73, 15]], "operator": [[69, 8], [69, 16]]}, "fn_var_occur": {"context": [["context", "mock", "MagicMock"], ["operator", "execute", "context", "context"]], "operator": [["operator", "PubSubCreateTopicOperator", "task_id", "TASK_ID", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "fail_if_exists", "False"], ["operator", "execute", "context", "context"]]}, "name": "test_succeedifexists", "params": {"mock_hook": "", "self": ""}, "params_descr": {"mock_hook": "", "self": ""}, "params_occur": {"mock_hook": [["mock_hook", "return_value", "create_topic", "assert_called_once_with", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "fail_if_exists", "False", "labels", "None", "message_storage_policy", "None", "kms_key_name", "None", "retry", "DEFAULT", "timeout", "None", "metadata"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_hook": [], "self": []}, "q_name": "TestPubSubTopicCreateOperator.test_succeedifexists", "ret_exprs": [], "ret_type": "", "variables": {"context": "", "operator": ""}, "variables_p": {"context": [["mock.Mock", 0.8668319609292552]], "operator": [["str", 0.7105615647557427], ["int", 0.09599949975438256]]}}], "name": "TestPubSubTopicCreateOperator", "q_name": "TestPubSubTopicCreateOperator", "variables": {}, "variables_p": {}}, {"cls_lc": [[88, 0], [101, 9]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[90, 4], [101, 9]], "fn_var_ln": {"operator": [[91, 8], [91, 16]]}, "fn_var_occur": {"operator": [["operator", "PubSubDeleteTopicOperator", "task_id", "TASK_ID", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC"], ["operator", "execute", "None"]]}, "name": "test_execute", "params": {"mock_hook": "", "self": ""}, "params_descr": {"mock_hook": "", "self": ""}, "params_occur": {"mock_hook": [["mock_hook", "return_value", "delete_topic", "assert_called_once_with", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "fail_if_not_exists", "False", "retry", "DEFAULT", "timeout", "None", "metadata"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_hook": [], "self": []}, "q_name": "TestPubSubTopicDeleteOperator.test_execute", "ret_exprs": [], "ret_type": "", "variables": {"operator": ""}, "variables_p": {"operator": [["str", 0.903220669331419]]}}], "name": "TestPubSubTopicDeleteOperator", "q_name": "TestPubSubTopicDeleteOperator", "variables": {}, "variables_p": {}}, {"cls_lc": [[104, 0], [198, 44]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[106, 4], [133, 44]], "fn_var_ln": {"context": [[111, 8], [111, 15]], "operator": [[107, 8], [107, 16]], "response": [[112, 8], [112, 16]]}, "fn_var_occur": {"context": [["context", "mock", "MagicMock"], ["response", "operator", "execute", "context", "context"]], "operator": [["operator", "PubSubCreateSubscriptionOperator", "task_id", "TASK_ID", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "subscription", "TEST_SUBSCRIPTION"], ["response", "operator", "execute", "context", "context"]], "response": [["response", "operator", "execute", "context", "context"], ["response", "TEST_SUBSCRIPTION"]]}, "name": "test_execute", "params": {"mock_hook": "", "self": ""}, "params_descr": {"mock_hook": "", "self": ""}, "params_occur": {"mock_hook": [["mock_hook", "return_value", "create_subscription", "return_value", "TEST_SUBSCRIPTION"], ["mock_hook", "return_value", "create_subscription", "assert_called_once_with", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "subscription", "TEST_SUBSCRIPTION", "subscription_project_id", "None", "ack_deadline_secs", "fail_if_exists", "False", "push_config", "None", "retain_acked_messages", "None", "message_retention_duration", "None", "labels", "None", "enable_message_ordering", "False", "expiration_policy", "None", "filter_", "None", "dead_letter_policy", "None", "retry_policy", "None", "retry", "DEFAULT", "timeout", "None", "metadata"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_hook": [], "self": []}, "q_name": "TestPubSubSubscriptionCreateOperator.test_execute", "ret_exprs": [], "ret_type": "", "variables": {"context": "", "operator": "", "response": ""}, "variables_p": {"context": [["mock.Mock", 0.4492567428798603]], "operator": [["str", 0.2943913777927803], ["Dict[str, str]", 0.20089027306234675], ["int", 0.10556733055333084], ["Set[int]", 0.10401665055161113], ["Dict[str, Any]", 0.09720203054855059], ["Dict[str, Type[Any]]", 0.09720203054855059]], "response": [["dict", 0.18079476285475457]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[136, 4], [168, 44]], "fn_var_ln": {"another_project": [[137, 8], [137, 23]], "context": [[146, 8], [146, 15]], "operator": [[138, 8], [138, 16]], "response": [[147, 8], [147, 16]]}, "fn_var_occur": {"another_project": [["operator", "PubSubCreateSubscriptionOperator", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "subscription", "TEST_SUBSCRIPTION", "subscription_project_id", "another_project", "task_id", "TASK_ID"], ["mock_hook", "return_value", "create_subscription", "assert_called_once_with", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "subscription", "TEST_SUBSCRIPTION", "subscription_project_id", "another_project", "ack_deadline_secs", "fail_if_exists", "False", "push_config", "None", "retain_acked_messages", "None", "message_retention_duration", "None", "labels", "None", "enable_message_ordering", "False", "expiration_policy", "None", "filter_", "None", "dead_letter_policy", "None", "retry_policy", "None", "retry", "DEFAULT", "timeout", "None", "metadata"]], "context": [["context", "mock", "MagicMock"], ["response", "operator", "execute", "context", "context"]], "operator": [["operator", "PubSubCreateSubscriptionOperator", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "subscription", "TEST_SUBSCRIPTION", "subscription_project_id", "another_project", "task_id", "TASK_ID"], ["response", "operator", "execute", "context", "context"]], "response": [["response", "operator", "execute", "context", "context"], ["response", "TEST_SUBSCRIPTION"]]}, "name": "test_execute_different_project_ids", "params": {"mock_hook": "", "self": ""}, "params_descr": {"mock_hook": "", "self": ""}, "params_occur": {"mock_hook": [["mock_hook", "return_value", "create_subscription", "return_value", "TEST_SUBSCRIPTION"], ["mock_hook", "return_value", "create_subscription", "assert_called_once_with", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "subscription", "TEST_SUBSCRIPTION", "subscription_project_id", "another_project", "ack_deadline_secs", "fail_if_exists", "False", "push_config", "None", "retain_acked_messages", "None", "message_retention_duration", "None", "labels", "None", "enable_message_ordering", "False", "expiration_policy", "None", "filter_", "None", "dead_letter_policy", "None", "retry_policy", "None", "retry", "DEFAULT", "timeout", "None", "metadata"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_hook": [], "self": []}, "q_name": "TestPubSubSubscriptionCreateOperator.test_execute_different_project_ids", "ret_exprs": [], "ret_type": "", "variables": {"another_project": "", "context": "", "operator": "", "response": ""}, "variables_p": {"another_project": [["str", 0.5382013722325355]], "context": [["mock.Mock", 0.4492567428798603]], "operator": [["str", 0.49758346878505316], ["List[str]", 0.10106073196939684], ["Dict[str, Union[Any, int]]", 0.10079158106688114]], "response": [["dict", 0.18079476285475457]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[171, 4], [198, 44]], "fn_var_ln": {"context": [[176, 8], [176, 15]], "operator": [[172, 8], [172, 16]], "response": [[177, 8], [177, 16]]}, "fn_var_occur": {"context": [["context", "mock", "MagicMock"], ["response", "operator", "execute", "context", "context"]], "operator": [["operator", "PubSubCreateSubscriptionOperator", "task_id", "TASK_ID", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC"], ["response", "operator", "execute", "context", "context"]], "response": [["response", "operator", "execute", "context", "context"], ["response", "TEST_SUBSCRIPTION"]]}, "name": "test_execute_no_subscription", "params": {"mock_hook": "", "self": ""}, "params_descr": {"mock_hook": "", "self": ""}, "params_occur": {"mock_hook": [["mock_hook", "return_value", "create_subscription", "return_value", "TEST_SUBSCRIPTION"], ["mock_hook", "return_value", "create_subscription", "assert_called_once_with", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "subscription", "None", "subscription_project_id", "None", "ack_deadline_secs", "fail_if_exists", "False", "push_config", "None", "retain_acked_messages", "None", "message_retention_duration", "None", "labels", "None", "enable_message_ordering", "False", "expiration_policy", "None", "filter_", "None", "dead_letter_policy", "None", "retry_policy", "None", "retry", "DEFAULT", "timeout", "None", "metadata"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_hook": [], "self": []}, "q_name": "TestPubSubSubscriptionCreateOperator.test_execute_no_subscription", "ret_exprs": [], "ret_type": "", "variables": {"context": "", "operator": "", "response": ""}, "variables_p": {"context": [["mock.Mock", 0.4492567428798603]], "operator": [["str", 0.49910782792901626], ["int", 0.1973038655031582], ["Dict[str, str]", 0.10162890870322933], ["Set[int]", 0.09240705938248213]], "response": [["dict", 0.18079476285475457]]}}], "name": "TestPubSubSubscriptionCreateOperator", "q_name": "TestPubSubSubscriptionCreateOperator", "variables": {}, "variables_p": {}}, {"cls_lc": [[201, 0], [216, 9]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[203, 4], [216, 9]], "fn_var_ln": {"operator": [[204, 8], [204, 16]]}, "fn_var_occur": {"operator": [["operator", "PubSubDeleteSubscriptionOperator", "task_id", "TASK_ID", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION"], ["operator", "execute", "None"]]}, "name": "test_execute", "params": {"mock_hook": "", "self": ""}, "params_descr": {"mock_hook": "", "self": ""}, "params_occur": {"mock_hook": [["mock_hook", "return_value", "delete_subscription", "assert_called_once_with", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "fail_if_not_exists", "False", "retry", "DEFAULT", "timeout", "None", "metadata"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_hook": [], "self": []}, "q_name": "TestPubSubSubscriptionDeleteOperator.test_execute", "ret_exprs": [], "ret_type": "", "variables": {"operator": ""}, "variables_p": {"operator": [["str", 0.903220669331419]]}}], "name": "TestPubSubSubscriptionDeleteOperator", "q_name": "TestPubSubSubscriptionDeleteOperator", "variables": {}, "variables_p": {}}, {"cls_lc": [[219, 0], [232, 9]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[221, 4], [232, 9]], "fn_var_ln": {"operator": [[222, 8], [222, 16]]}, "fn_var_occur": {"operator": [["operator", "PubSubPublishMessageOperator", "task_id", "TASK_ID", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "messages", "TEST_MESSAGES"], ["operator", "execute", "None"]]}, "name": "test_publish", "params": {"mock_hook": "", "self": ""}, "params_descr": {"mock_hook": "", "self": ""}, "params_occur": {"mock_hook": [["mock_hook", "return_value", "publish", "assert_called_once_with", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "messages", "TEST_MESSAGES"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_hook": [], "self": []}, "q_name": "TestPubSubPublishOperator.test_publish", "ret_exprs": [], "ret_type": "", "variables": {"operator": ""}, "variables_p": {"operator": [["str", 0.5564400837577533], ["float", 0.25827407133538577], ["list", 0.09063439358505888]]}}], "name": "TestPubSubPublishOperator", "q_name": "TestPubSubPublishOperator", "variables": {}, "variables_p": {}}, {"cls_lc": [[235, 0], [317, 57]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[236, 4], [246, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "_generate_messages", "params": {"count": "", "self": ""}, "params_descr": {"count": "", "self": ""}, "params_occur": {"count": [["ReceivedMessage", "ack_id", "i", "message", "i", "encode", "i", "range", "count"]], "self": []}, "params_p": {"args": [], "count": [["int", 0.6167689409318424], ["str", 0.2781217620157077]], "kwargs": [], "self": []}, "q_name": "TestPubSubPullOperator._generate_messages", "ret_exprs": ["return [ ReceivedMessage( ack_id=f\"{i}\", message={ \"data\": f\"Message {i}\".encode(), \"attributes\": {\"type\": \"generated message\"}, }, ) for i in range(1, count + 1)]"], "ret_type": "", "ret_type_p": [["str", 0.4200668497583132], ["IO[str]", 0.10316305066313752], ["Optional[str]", 0.09849670650528557], ["int", 0.08818500132150817]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[248, 4], [249, 83]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "_generate_dicts", "params": {"count": "", "self": ""}, "params_descr": {"count": "", "self": ""}, "params_occur": {"count": [["ReceivedMessage", "to_dict", "m", "m", "self", "_generate_messages", "count"]], "self": [["ReceivedMessage", "to_dict", "m", "m", "self", "_generate_messages", "count"]]}, "params_p": {"args": [], "count": [["str", 0.1779506372123435], ["int", 0.12751765600054224]], "kwargs": [], "self": []}, "q_name": "TestPubSubPullOperator._generate_dicts", "ret_exprs": ["return [ReceivedMessage.to_dict(m) for m in self._generate_messages(count)]"], "ret_type": "", "ret_type_p": [["List[str]", 0.19279264008720162], ["int", 0.10215012547291102], ["bytes", 0.10208968892009641], ["Dict[str, \"Outcome\"]", 0.10008034175095169], ["bool", 0.09894428235278041], ["\"DescriptionObserver\"", 0.09693986144830652]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[252, 4], [260, 41]], "fn_var_ln": {"operator": [[253, 8], [253, 16]]}, "fn_var_occur": {"operator": [["operator", "PubSubPullOperator", "task_id", "TASK_ID", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION"], ["operator", "execute"]]}, "name": "test_execute_no_messages", "params": {"mock_hook": "", "self": ""}, "params_descr": {"mock_hook": "", "self": ""}, "params_occur": {"mock_hook": [["mock_hook", "return_value", "pull", "return_value"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_hook": [["mock.MagicMock", 0.12981820936082433]], "self": []}, "q_name": "TestPubSubPullOperator.test_execute_no_messages", "ret_exprs": [], "ret_type": "", "variables": {"operator": ""}, "variables_p": {"operator": [["str", 0.8095920819367717]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[263, 4], [280, 9]], "fn_var_ln": {"generated_dicts": [[272, 8], [272, 23]], "generated_messages": [[271, 8], [271, 26]], "operator": [[264, 8], [264, 16]]}, "fn_var_occur": {"generated_dicts": [["generated_dicts", "self", "_generate_dicts"], ["generated_dicts", "operator", "execute"]], "generated_messages": [["generated_messages", "self", "_generate_messages"], ["mock_hook", "return_value", "pull", "return_value", "generated_messages"], ["mock_hook", "return_value", "acknowledge", "assert_called_once_with", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "messages", "generated_messages"]], "operator": [["operator", "PubSubPullOperator", "task_id", "TASK_ID", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "ack_messages", "True"], ["generated_dicts", "operator", "execute"]]}, "name": "test_execute_with_ack_messages", "params": {"mock_hook": "", "self": ""}, "params_descr": {"mock_hook": "", "self": ""}, "params_occur": {"mock_hook": [["mock_hook", "return_value", "pull", "return_value", "generated_messages"], ["mock_hook", "return_value", "acknowledge", "assert_called_once_with", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "messages", "generated_messages"]], "self": [["generated_messages", "self", "_generate_messages"], ["generated_dicts", "self", "_generate_dicts"]]}, "params_p": {"args": [], "kwargs": [], "mock_hook": [["mock.MagicMock", 0.11913551036554748]], "self": []}, "q_name": "TestPubSubPullOperator.test_execute_with_ack_messages", "ret_exprs": [], "ret_type": "", "variables": {"generated_dicts": "", "generated_messages": "", "operator": ""}, "variables_p": {"generated_dicts": [["int", 0.3719730676730677], ["str", 0.25656285864208117], ["float", 0.18376000694001826], ["list", 0.09385203337241636], ["List[Callable[[], bool]]", 0.09385203337241636]], "generated_messages": [["Dict[str, Dict[str, Any]]", 0.30589034605295334], ["list", 0.2711179568078491], ["str", 0.1166768886553779]], "operator": [["str", 0.5899477556210312], ["List[str]", 0.10450143494199772], ["List[int]", 0.09230186663632627]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[287, 8], [297, 49]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "messages_callback", "params": {"context": "builtins.dict[builtins.str, typing.Any]", "pulled_messages": "builtins.list[google.cloud.pubsub_v1.types.ReceivedMessage]"}, "params_descr": {"context": "", "pulled_messages": ""}, "params_occur": {"context": [["isinstance", "context", "dict"], ["context", "keys"]], "pulled_messages": [["pulled_messages", "generated_messages"]]}, "params_p": {"args": [], "context": [["str", 0.3921833187868301], ["dict", 0.19480625535292023], ["Dict[str, str]", 0.09959941530458385]], "kwargs": [], "pulled_messages": [["str", 0.28178043608482084], ["T", 0.10855061988427452], ["dict", 0.09287516840386946], ["Tuple[int, int]", 0.0870696307834293]], "self": []}, "q_name": "TestPubSubPullOperator.test_execute_with_messages_callback.<locals>.messages_callback", "ret_exprs": ["return messages_callback_return_value"], "ret_type": "", "ret_type_p": [["bool", 0.17897302351030472], ["int", 0.14645496213876694]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[283, 4], [317, 57]], "fn_var_ln": {"generated_messages": [[284, 8], [284, 26]], "messages_callback": [[299, 8], [299, 25]], "messages_callback_return_value": [[285, 8], [285, 38]], "operator": [[301, 8], [301, 16]], "response": [[310, 8], [310, 16]]}, "fn_var_occur": {"generated_messages": [["mock_hook", "return_value", "pull", "return_value", "generated_messages"]], "messages_callback": [["messages_callback", "mock", "Mock", "side_effect", "messages_callback"], ["operator", "PubSubPullOperator", "task_id", "TASK_ID", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "messages_callback", "messages_callback"], ["messages_callback", "assert_called_once"]], "messages_callback_return_value": [["response", "messages_callback_return_value"]], "operator": [["operator", "PubSubPullOperator", "task_id", "TASK_ID", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "messages_callback", "messages_callback"], ["response", "operator", "execute"]], "response": [["response", "operator", "execute"], ["response", "messages_callback_return_value"]]}, "name": "test_execute_with_messages_callback", "params": {"mock_hook": "", "self": ""}, "params_descr": {"mock_hook": "", "self": ""}, "params_occur": {"mock_hook": [["mock_hook", "return_value", "pull", "return_value", "generated_messages"], ["mock_hook", "return_value", "pull", "assert_called_once_with", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "max_messages", "return_immediately", "True"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_hook": [["mock.MagicMock", 0.10281683231557744]], "self": []}, "q_name": "TestPubSubPullOperator.test_execute_with_messages_callback", "ret_exprs": [], "ret_type": "", "variables": {"generated_messages": "", "messages_callback": "", "messages_callback_return_value": "", "operator": "", "response": ""}, "variables_p": {"generated_messages": [["Dict[str, Dict[str, Any]]", 0.5740051325091369], ["Tuple[Literal, Literal]", 0.13013616594402094], ["str", 0.05955191660124834], ["List[str]", 0.05794221932181548], ["List[Dict[str, Any]]", 0.057038881293596425], ["int", 0.05511025487012756]], "messages_callback": [["mock.Mock", 0.3757118950721107]], "messages_callback_return_value": [["int", 0.34669645672802085], ["Pattern[str]", 0.22542562103030453], ["str", 0.12587610359967533], ["Dict[str, str]", 0.10693451794137794], ["Dict[int, bytes]", 0.10654967828419576], ["List[str]", 0.08851762241642563]], "operator": [["str", 0.7050295603898455]], "response": [["list", 0.07817214677359058]]}}], "name": "TestPubSubPullOperator", "q_name": "TestPubSubPullOperator", "variables": {}, "variables_p": {}}], "funcs": [], "imports": ["__future__", "annotations", "typing", "Any", "unittest", "mock", "google", "api_core", "gapic_v1", "method", "DEFAULT", "google", "cloud", "pubsub_v1", "types", "ReceivedMessage", "airflow", "providers", "google", "cloud", "operators", "pubsub", "PubSubCreateSubscriptionOperator", "PubSubCreateTopicOperator", "PubSubDeleteSubscriptionOperator", "PubSubDeleteTopicOperator", "PubSubPublishMessageOperator", "PubSubPullOperator"], "mod_var_ln": {"TASK_ID": [[35, 0], [35, 7]], "TEST_MESSAGES": [[39, 0], [39, 13]], "TEST_PROJECT": [[36, 0], [36, 12]], "TEST_SUBSCRIPTION": [[38, 0], [38, 17]], "TEST_TOPIC": [[37, 0], [37, 10]]}, "mod_var_occur": {"TASK_ID": [["operator", "PubSubCreateTopicOperator", "task_id", "TASK_ID", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "fail_if_exists", "True"], ["operator", "PubSubCreateTopicOperator", "task_id", "TASK_ID", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "fail_if_exists", "False"], ["operator", "PubSubDeleteTopicOperator", "task_id", "TASK_ID", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC"], ["operator", "PubSubCreateSubscriptionOperator", "task_id", "TASK_ID", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "subscription", "TEST_SUBSCRIPTION"], ["operator", "PubSubCreateSubscriptionOperator", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "subscription", "TEST_SUBSCRIPTION", "subscription_project_id", "another_project", "task_id", "TASK_ID"], ["operator", "PubSubCreateSubscriptionOperator", "task_id", "TASK_ID", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC"], ["operator", "PubSubDeleteSubscriptionOperator", "task_id", "TASK_ID", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION"], ["operator", "PubSubPublishMessageOperator", "task_id", "TASK_ID", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "messages", "TEST_MESSAGES"], ["operator", "PubSubPullOperator", "task_id", "TASK_ID", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION"], ["operator", "PubSubPullOperator", "task_id", "TASK_ID", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "ack_messages", "True"], ["operator", "PubSubPullOperator", "task_id", "TASK_ID", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "messages_callback", "messages_callback"]], "TEST_MESSAGES": [["operator", "PubSubPublishMessageOperator", "task_id", "TASK_ID", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "messages", "TEST_MESSAGES"], ["mock_hook", "return_value", "publish", "assert_called_once_with", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "messages", "TEST_MESSAGES"]], "TEST_PROJECT": [["operator", "PubSubCreateTopicOperator", "task_id", "TASK_ID", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "fail_if_exists", "True"], ["mock_hook", "return_value", "create_topic", "assert_called_once_with", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "fail_if_exists", "True", "labels", "None", "message_storage_policy", "None", "kms_key_name", "None", "retry", "DEFAULT", "timeout", "None", "metadata"], ["operator", "PubSubCreateTopicOperator", "task_id", "TASK_ID", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "fail_if_exists", "False"], ["mock_hook", "return_value", "create_topic", "assert_called_once_with", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "fail_if_exists", "False", "labels", "None", "message_storage_policy", "None", "kms_key_name", "None", "retry", "DEFAULT", "timeout", "None", "metadata"], ["operator", "PubSubDeleteTopicOperator", "task_id", "TASK_ID", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC"], ["mock_hook", "return_value", "delete_topic", "assert_called_once_with", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "fail_if_not_exists", "False", "retry", "DEFAULT", "timeout", "None", "metadata"], ["operator", "PubSubCreateSubscriptionOperator", "task_id", "TASK_ID", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "subscription", "TEST_SUBSCRIPTION"], ["mock_hook", "return_value", "create_subscription", "assert_called_once_with", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "subscription", "TEST_SUBSCRIPTION", "subscription_project_id", "None", "ack_deadline_secs", "fail_if_exists", "False", "push_config", "None", "retain_acked_messages", "None", "message_retention_duration", "None", "labels", "None", "enable_message_ordering", "False", "expiration_policy", "None", "filter_", "None", "dead_letter_policy", "None", "retry_policy", "None", "retry", "DEFAULT", "timeout", "None", "metadata"], ["operator", "PubSubCreateSubscriptionOperator", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "subscription", "TEST_SUBSCRIPTION", "subscription_project_id", "another_project", "task_id", "TASK_ID"], ["mock_hook", "return_value", "create_subscription", "assert_called_once_with", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "subscription", "TEST_SUBSCRIPTION", "subscription_project_id", "another_project", "ack_deadline_secs", "fail_if_exists", "False", "push_config", "None", "retain_acked_messages", "None", "message_retention_duration", "None", "labels", "None", "enable_message_ordering", "False", "expiration_policy", "None", "filter_", "None", "dead_letter_policy", "None", "retry_policy", "None", "retry", "DEFAULT", "timeout", "None", "metadata"], ["operator", "PubSubCreateSubscriptionOperator", "task_id", "TASK_ID", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC"], ["mock_hook", "return_value", "create_subscription", "assert_called_once_with", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "subscription", "None", "subscription_project_id", "None", "ack_deadline_secs", "fail_if_exists", "False", "push_config", "None", "retain_acked_messages", "None", "message_retention_duration", "None", "labels", "None", "enable_message_ordering", "False", "expiration_policy", "None", "filter_", "None", "dead_letter_policy", "None", "retry_policy", "None", "retry", "DEFAULT", "timeout", "None", "metadata"], ["operator", "PubSubDeleteSubscriptionOperator", "task_id", "TASK_ID", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION"], ["mock_hook", "return_value", "delete_subscription", "assert_called_once_with", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "fail_if_not_exists", "False", "retry", "DEFAULT", "timeout", "None", "metadata"], ["operator", "PubSubPublishMessageOperator", "task_id", "TASK_ID", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "messages", "TEST_MESSAGES"], ["mock_hook", "return_value", "publish", "assert_called_once_with", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "messages", "TEST_MESSAGES"], ["operator", "PubSubPullOperator", "task_id", "TASK_ID", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION"], ["operator", "PubSubPullOperator", "task_id", "TASK_ID", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "ack_messages", "True"], ["mock_hook", "return_value", "acknowledge", "assert_called_once_with", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "messages", "generated_messages"], ["operator", "PubSubPullOperator", "task_id", "TASK_ID", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "messages_callback", "messages_callback"], ["mock_hook", "return_value", "pull", "assert_called_once_with", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "max_messages", "return_immediately", "True"]], "TEST_SUBSCRIPTION": [["operator", "PubSubCreateSubscriptionOperator", "task_id", "TASK_ID", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "subscription", "TEST_SUBSCRIPTION"], ["mock_hook", "return_value", "create_subscription", "return_value", "TEST_SUBSCRIPTION"], ["mock_hook", "return_value", "create_subscription", "assert_called_once_with", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "subscription", "TEST_SUBSCRIPTION", "subscription_project_id", "None", "ack_deadline_secs", "fail_if_exists", "False", "push_config", "None", "retain_acked_messages", "None", "message_retention_duration", "None", "labels", "None", "enable_message_ordering", "False", "expiration_policy", "None", "filter_", "None", "dead_letter_policy", "None", "retry_policy", "None", "retry", "DEFAULT", "timeout", "None", "metadata"], ["response", "TEST_SUBSCRIPTION"], ["operator", "PubSubCreateSubscriptionOperator", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "subscription", "TEST_SUBSCRIPTION", "subscription_project_id", "another_project", "task_id", "TASK_ID"], ["mock_hook", "return_value", "create_subscription", "return_value", "TEST_SUBSCRIPTION"], ["mock_hook", "return_value", "create_subscription", "assert_called_once_with", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "subscription", "TEST_SUBSCRIPTION", "subscription_project_id", "another_project", "ack_deadline_secs", "fail_if_exists", "False", "push_config", "None", "retain_acked_messages", "None", "message_retention_duration", "None", "labels", "None", "enable_message_ordering", "False", "expiration_policy", "None", "filter_", "None", "dead_letter_policy", "None", "retry_policy", "None", "retry", "DEFAULT", "timeout", "None", "metadata"], ["response", "TEST_SUBSCRIPTION"], ["mock_hook", "return_value", "create_subscription", "return_value", "TEST_SUBSCRIPTION"], ["response", "TEST_SUBSCRIPTION"], ["operator", "PubSubDeleteSubscriptionOperator", "task_id", "TASK_ID", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION"], ["mock_hook", "return_value", "delete_subscription", "assert_called_once_with", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "fail_if_not_exists", "False", "retry", "DEFAULT", "timeout", "None", "metadata"], ["operator", "PubSubPullOperator", "task_id", "TASK_ID", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION"], ["operator", "PubSubPullOperator", "task_id", "TASK_ID", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "ack_messages", "True"], ["mock_hook", "return_value", "acknowledge", "assert_called_once_with", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "messages", "generated_messages"], ["operator", "PubSubPullOperator", "task_id", "TASK_ID", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "messages_callback", "messages_callback"], ["mock_hook", "return_value", "pull", "assert_called_once_with", "project_id", "TEST_PROJECT", "subscription", "TEST_SUBSCRIPTION", "max_messages", "return_immediately", "True"]], "TEST_TOPIC": [["operator", "PubSubCreateTopicOperator", "task_id", "TASK_ID", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "fail_if_exists", "True"], ["mock_hook", "return_value", "create_topic", "assert_called_once_with", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "fail_if_exists", "True", "labels", "None", "message_storage_policy", "None", "kms_key_name", "None", "retry", "DEFAULT", "timeout", "None", "metadata"], ["operator", "PubSubCreateTopicOperator", "task_id", "TASK_ID", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "fail_if_exists", "False"], ["mock_hook", "return_value", "create_topic", "assert_called_once_with", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "fail_if_exists", "False", "labels", "None", "message_storage_policy", "None", "kms_key_name", "None", "retry", "DEFAULT", "timeout", "None", "metadata"], ["operator", "PubSubDeleteTopicOperator", "task_id", "TASK_ID", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC"], ["mock_hook", "return_value", "delete_topic", "assert_called_once_with", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "fail_if_not_exists", "False", "retry", "DEFAULT", "timeout", "None", "metadata"], ["operator", "PubSubCreateSubscriptionOperator", "task_id", "TASK_ID", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "subscription", "TEST_SUBSCRIPTION"], ["mock_hook", "return_value", "create_subscription", "assert_called_once_with", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "subscription", "TEST_SUBSCRIPTION", "subscription_project_id", "None", "ack_deadline_secs", "fail_if_exists", "False", "push_config", "None", "retain_acked_messages", "None", "message_retention_duration", "None", "labels", "None", "enable_message_ordering", "False", "expiration_policy", "None", "filter_", "None", "dead_letter_policy", "None", "retry_policy", "None", "retry", "DEFAULT", "timeout", "None", "metadata"], ["operator", "PubSubCreateSubscriptionOperator", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "subscription", "TEST_SUBSCRIPTION", "subscription_project_id", "another_project", "task_id", "TASK_ID"], ["mock_hook", "return_value", "create_subscription", "assert_called_once_with", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "subscription", "TEST_SUBSCRIPTION", "subscription_project_id", "another_project", "ack_deadline_secs", "fail_if_exists", "False", "push_config", "None", "retain_acked_messages", "None", "message_retention_duration", "None", "labels", "None", "enable_message_ordering", "False", "expiration_policy", "None", "filter_", "None", "dead_letter_policy", "None", "retry_policy", "None", "retry", "DEFAULT", "timeout", "None", "metadata"], ["operator", "PubSubCreateSubscriptionOperator", "task_id", "TASK_ID", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC"], ["mock_hook", "return_value", "create_subscription", "assert_called_once_with", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "subscription", "None", "subscription_project_id", "None", "ack_deadline_secs", "fail_if_exists", "False", "push_config", "None", "retain_acked_messages", "None", "message_retention_duration", "None", "labels", "None", "enable_message_ordering", "False", "expiration_policy", "None", "filter_", "None", "dead_letter_policy", "None", "retry_policy", "None", "retry", "DEFAULT", "timeout", "None", "metadata"], ["operator", "PubSubPublishMessageOperator", "task_id", "TASK_ID", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "messages", "TEST_MESSAGES"], ["mock_hook", "return_value", "publish", "assert_called_once_with", "project_id", "TEST_PROJECT", "topic", "TEST_TOPIC", "messages", "TEST_MESSAGES"]]}, "no_types_annot": {"D": 2, "I": 0, "U": 58}, "session_id": "g_9T9BO9YQc0kkl8yPj02f9hKlV-vF4oEbJ-WDnxIws", "set": null, "tc": [false, null], "type_annot_cove": 0.03, "typed_seq": "", "untyped_seq": "", "variables": {"TASK_ID": "", "TEST_MESSAGES": "", "TEST_PROJECT": "", "TEST_SUBSCRIPTION": "", "TEST_TOPIC": ""}, "variables_p": {"TASK_ID": [["str", 0.89258656040369], ["int", 0.10741343959630999]], "TEST_MESSAGES": [["str", 0.8285147328404314]], "TEST_PROJECT": [["str", 0.9085490292019075], ["int", 0.09145097079809263]], "TEST_SUBSCRIPTION": [["str", 0.6956996012568559], ["Dict[str, str]", 0.11910135705454084], ["Dict[str, Union[Any, str]]", 0.08410048631225572]], "TEST_TOPIC": [["str", 0.5346854640254424], ["float", 0.17309327885251613], ["Dict[str, Union[None, Any, Any, int, str]]", 0.11517666964942132], ["Dict[str, Union[Any, str]]", 0.09198666376880364], ["Dict[str, Tuple[Any, Any]]", 0.08505792370381653]]}}}