{"error": null, "response": {"classes": [{"cls_lc": [[45, 0], [173, 9]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[46, 4], [48, 60]], "fn_var_ln": {"client": [[47, 8], [47, 19]], "hook": [[48, 8], [48, 17]]}, "fn_var_occur": {"client": [["self", "client", "boto3", "client", "region_name"]], "hook": [["self", "hook", "GlueCatalogHook", "region_name"]]}, "name": "setup_method", "params": {"method": "", "self": ""}, "params_descr": {"method": "", "self": ""}, "params_occur": {"method": [], "self": [["self", "client", "boto3", "client", "region_name"], ["self", "hook", "GlueCatalogHook", "region_name"]]}, "params_p": {"args": [], "kwargs": [], "method": [["str", 0.43170161069000196], ["dict", 0.19965377379201232], ["Iterable[str]", 0.16899084172597337], ["tuple", 0.08464006255844603]], "self": []}, "q_name": "TestGlueCatalogHook.setup_method", "ret_exprs": [], "ret_type": "", "variables": {"client": "", "hook": ""}, "variables_p": {"client": [["\"Client\"", 0.10921333549203449]], "hook": [["int", 0.30791500880089046], ["List[None]", 0.09068185910867603], ["Dict[str, Any]", 0.08931823230196245]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[50, 4], [52, 42]], "fn_var_ln": {"hook": [[51, 8], [51, 12]]}, "fn_var_occur": {"hook": [["hook", "GlueCatalogHook", "region_name"], ["hook", "get_conn", "None"]]}, "name": "test_get_conn_returns_a_boto3_connection", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestGlueCatalogHook.test_get_conn_returns_a_boto3_connection", "ret_exprs": [], "ret_type": "", "variables": {"hook": ""}, "variables_p": {"hook": [["dict", 0.2233978128935199], ["List[Union[Any, Any]]", 0.11859067436289583], ["Dict[str, bool]", 0.09735041371247148], ["str", 0.09083209256430576]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[54, 4], [56, 51]], "fn_var_ln": {"hook": [[55, 8], [55, 12]]}, "fn_var_occur": {"hook": [["hook", "GlueCatalogHook", "aws_conn_id", "region_name"], ["hook", "aws_conn_id"]]}, "name": "test_conn_id", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestGlueCatalogHook.test_conn_id", "ret_exprs": [], "ret_type": "", "variables": {"hook": ""}, "variables_p": {"hook": [["str", 0.8208960533410207], ["List[int]", 0.08660025571950279]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[58, 4], [60, 46]], "fn_var_ln": {"hook": [[59, 8], [59, 12]]}, "fn_var_occur": {"hook": [["hook", "GlueCatalogHook", "region_name"], ["hook", "region_name"]]}, "name": "test_region", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestGlueCatalogHook.test_region", "ret_exprs": [], "ret_type": "", "variables": {"hook": ""}, "variables_p": {"hook": [["str", 0.8125727596973261], ["dict", 0.10377086081884847], ["Tuple[str, str]", 0.08365637948382525]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[63, 4], [68, 56]], "fn_var_ln": {"hook": [[66, 8], [66, 12]], "response": [[64, 8], [64, 16]]}, "fn_var_occur": {"hook": [["hook", "GlueCatalogHook", "region_name"], ["hook", "get_partitions", "set"]], "response": [["response", "set"], ["mock_get_conn", "get_paginator", "paginate", "return_value", "response"]]}, "name": "test_get_partitions_empty", "params": {"mock_get_conn": "", "self": ""}, "params_descr": {"mock_get_conn": "", "self": ""}, "params_occur": {"mock_get_conn": [["mock_get_conn", "get_paginator", "paginate", "return_value", "response"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_get_conn": [["mock.MagicMock", 0.16430851860711265]], "self": []}, "q_name": "TestGlueCatalogHook.test_get_partitions_empty", "ret_exprs": [], "ret_type": "", "variables": {"hook": "", "response": ""}, "variables_p": {"hook": [["dict", 0.0998564939523201], ["float", 0.09654412710147814], ["List[str]", 0.09654412710147814]], "response": [["Dict[str, str]", 0.6732159601292433], ["Dict[str, Any]", 0.10597382248532433]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[71, 4], [88, 9]], "fn_var_ln": {"hook": [[78, 8], [78, 12]], "mock_conn": [[75, 8], [75, 17]], "mock_paginator": [[73, 8], [73, 22]], "response": [[72, 8], [72, 16]], "result": [[79, 8], [79, 14]], "return_value": [[77, 8], [77, 34]]}, "fn_var_occur": {"hook": [["hook", "GlueCatalogHook", "region_name"], ["result", "hook", "get_partitions", "expression", "page_size", "max_items"]], "mock_conn": [["mock_conn", "mock", "Mock"], ["mock_conn", "get_paginator", "return_value", "mock_paginator"], ["mock_get_conn", "return_value", "mock_conn"], ["mock_conn", "get_paginator", "assert_called_once_with"]], "mock_paginator": [["mock_paginator", "mock", "Mock"], ["mock_paginator", "paginate", "return_value", "response"], ["mock_conn", "get_paginator", "return_value", "mock_paginator"], ["mock_paginator", "paginate", "assert_called_once_with", "DatabaseName", "TableName", "Expression", "PaginationConfig"]], "response": [["mock_paginator", "paginate", "return_value", "response"]], "result": [["result", "hook", "get_partitions", "expression", "page_size", "max_items"]], "return_value": [["mock_paginator", "paginate", "return_value", "response"], ["mock_conn", "get_paginator", "return_value", "mock_paginator"], ["mock_get_conn", "return_value", "mock_conn"]]}, "name": "test_get_partitions", "params": {"mock_get_conn": "", "self": ""}, "params_descr": {"mock_get_conn": "", "self": ""}, "params_occur": {"mock_get_conn": [["mock_get_conn", "return_value", "mock_conn"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_get_conn": [], "self": []}, "q_name": "TestGlueCatalogHook.test_get_partitions", "ret_exprs": [], "ret_type": "", "variables": {"hook": "", "mock_conn": "", "mock_paginator": "", "response": "", "result": "", "return_value": ""}, "variables_p": {"hook": [["int", 0.7022409539247376]], "mock_conn": [["mock.Mock", 0.39431402994796283]], "mock_paginator": [["List[int]", 0.12286324641001578], ["Dict[str, Any]", 0.1071452923939545], ["mock.Mock", 0.09079253718417699]], "response": [["Dict[str, Union[Any, Any]]", 0.1821922725802269], ["Dict[str, str]", 0.10987999370610156], ["Dict[str, Union[Any, Any, Any]]", 0.08388177554078449], ["rotkehlchen.tests.utils.mock.MockResponse", 0.06920815680158081], ["dict", 0.06892300100468093]], "result": [["int", 0.6875661399741558], ["list", 0.11298216764193927]], "return_value": [["str", 0.24281991683760898], ["int", 0.07991842584027804]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[91, 4], [96, 85]], "fn_var_ln": {"hook": [[93, 8], [93, 12]], "return_value": [[92, 8], [92, 40]]}, "fn_var_occur": {"hook": [["hook", "GlueCatalogHook", "region_name"], ["hook", "check_for_partition"]], "return_value": [["mock_get_partitions", "return_value"]]}, "name": "test_check_for_partition", "params": {"mock_get_partitions": "", "self": ""}, "params_descr": {"mock_get_partitions": "", "self": ""}, "params_occur": {"mock_get_partitions": [["mock_get_partitions", "return_value"], ["mock_get_partitions", "assert_called_once_with", "max_items"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_get_partitions": [["mock.MagicMock", 0.14862570759728302]], "self": []}, "q_name": "TestGlueCatalogHook.test_check_for_partition", "ret_exprs": [], "ret_type": "", "variables": {"hook": "", "return_value": ""}, "variables_p": {"hook": [["str", 0.37764800108831575], ["Tuple[str, Any]", 0.18132559263767054], ["Type[Callable[Any, str]]", 0.11640104356913977], ["int", 0.09127206808099537], ["Dict[str, Any]", 0.08586914844770378]], "return_value": [["int", 0.3135222837064679], ["str", 0.23052785147261584], ["Tuple[int, int]", 0.11094316168745796], ["Dict[str, Union[int, str]]", 0.07347137688931107]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[99, 4], [103, 64]], "fn_var_ln": {"hook": [[101, 8], [101, 12]], "return_value": [[100, 8], [100, 40]]}, "fn_var_occur": {"hook": [["hook", "GlueCatalogHook", "region_name"], ["hook", "check_for_partition"]], "return_value": [["mock_get_partitions", "return_value", "set"]]}, "name": "test_check_for_partition_false", "params": {"mock_get_partitions": "", "self": ""}, "params_descr": {"mock_get_partitions": "", "self": ""}, "params_occur": {"mock_get_partitions": [["mock_get_partitions", "return_value", "set"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_get_partitions": [], "self": []}, "q_name": "TestGlueCatalogHook.test_check_for_partition_false", "ret_exprs": [], "ret_type": "", "variables": {"hook": "", "return_value": ""}, "variables_p": {"hook": [["str", 0.37764800108831575], ["Tuple[str, Any]", 0.18132559263767054], ["Type[Callable[Any, str]]", 0.11640104356913977], ["int", 0.09127206808099537], ["Dict[str, Any]", 0.08586914844770378]], "return_value": [["str", 0.17623074857304438], ["List[Dict[str, Any]]", 0.16422735104199548], ["List[str]", 0.15974118034107473], ["Dict[str, Dict[str, Any]]", 0.15010374326762468], ["List[Dict[str, str]]", 0.0889158596298259], ["Dict[str, Union[Any, Any, Any]]", 0.08825290760432263], ["Dict[str, int]", 0.08742576786110288]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[105, 4], [112, 102]], "fn_var_ln": {"result": [[109, 8], [109, 14]]}, "fn_var_occur": {"result": [["result", "self", "hook", "get_table", "DB_NAME", "TABLE_NAME"], ["result", "TABLE_INPUT"], ["result", "TABLE_INPUT"]]}, "name": "test_get_table_exists", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "client", "create_database", "DatabaseInput", "DB_NAME"], ["self", "client", "create_table", "DatabaseName", "DB_NAME", "TableInput", "TABLE_INPUT"], ["result", "self", "hook", "get_table", "DB_NAME", "TABLE_NAME"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestGlueCatalogHook.test_get_table_exists", "ret_exprs": [], "ret_type": "", "variables": {"result": ""}, "variables_p": {"result": [["str", 0.2967733408930984], ["List[Tuple[str, ...]]", 0.25987408599982886], ["Dict[str, Union[Any, Any]]", 0.12284347304930929], ["KeysView[str]", 0.11292312541991133], ["dict", 0.08496255090954233]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[114, 4], [119, 55]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_get_table_not_exists", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "client", "create_database", "DatabaseInput", "DB_NAME"], ["self", "client", "create_table", "DatabaseName", "DB_NAME", "TableInput", "TABLE_INPUT"], ["self", "hook", "get_table", "DB_NAME"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestGlueCatalogHook.test_get_table_not_exists", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[121, 4], [126, 69]], "fn_var_ln": {"result": [[125, 8], [125, 14]]}, "fn_var_occur": {"result": [["result", "self", "hook", "get_table_location", "DB_NAME", "TABLE_NAME"], ["result", "TABLE_INPUT"]]}, "name": "test_get_table_location", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "client", "create_database", "DatabaseInput", "DB_NAME"], ["self", "client", "create_table", "DatabaseName", "DB_NAME", "TableInput", "TABLE_INPUT"], ["result", "self", "hook", "get_table_location", "DB_NAME", "TABLE_NAME"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestGlueCatalogHook.test_get_table_location", "ret_exprs": [], "ret_type": "", "variables": {"result": ""}, "variables_p": {"result": [["str", 0.5049910723968386], ["Dict[str, str]", 0.10181984679552832], ["List[str]", 0.10069382266410577], ["Tuple[Literal]", 0.0986267361943307], ["Set[str]", 0.09710920603575154]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[128, 4], [139, 57]], "fn_var_ln": {"result": [[135, 8], [135, 14]]}, "fn_var_occur": {"result": [["result", "self", "hook", "get_partition", "DB_NAME", "TABLE_NAME", "PARTITION_INPUT"], ["result", "PARTITION_INPUT"], ["result", "DB_NAME"], ["result", "TABLE_INPUT"]]}, "name": "test_get_partition", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "client", "create_database", "DatabaseInput", "DB_NAME"], ["self", "client", "create_table", "DatabaseName", "DB_NAME", "TableInput", "TABLE_INPUT"], ["self", "client", "create_partition", "DatabaseName", "DB_NAME", "TableName", "TABLE_NAME", "PartitionInput", "PARTITION_INPUT"], ["result", "self", "hook", "get_partition", "DB_NAME", "TABLE_NAME", "PARTITION_INPUT"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestGlueCatalogHook.test_get_partition", "ret_exprs": [], "ret_type": "", "variables": {"result": ""}, "variables_p": {"result": [["str", 0.40351580512193463], ["Dict[str, Tuple[str, int]]", 0.08399193249941574], ["int", 0.0803152950858421]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[142, 4], [152, 9]], "fn_var_ln": {"mocked_client": [[143, 8], [143, 21]], "return_value": [[145, 8], [145, 38]]}, "fn_var_occur": {"mocked_client": [["mocked_client", "mock", "Mock"], ["mocked_client", "get_partition", "side_effect", "ClientError"], ["mocked_connection", "return_value", "mocked_client"], ["mocked_client", "get_partition", "assert_called_once_with", "DatabaseName", "DB_NAME", "TableName", "TABLE_NAME", "PartitionValues", "PARTITION_INPUT"]], "return_value": [["mocked_connection", "return_value", "mocked_client"]]}, "name": "test_get_partition_with_client_error", "params": {"mocked_connection": "", "self": ""}, "params_descr": {"mocked_connection": "", "self": ""}, "params_occur": {"mocked_connection": [["mocked_connection", "return_value", "mocked_client"]], "self": [["self", "hook", "get_partition", "DB_NAME", "TABLE_NAME", "PARTITION_INPUT"]]}, "params_p": {"args": [], "kwargs": [], "mocked_connection": [["mock.MagicMock", 0.10815737924502351]], "self": []}, "q_name": "TestGlueCatalogHook.test_get_partition_with_client_error", "ret_exprs": [], "ret_type": "", "variables": {"mocked_client": "", "return_value": ""}, "variables_p": {"mocked_client": [["mock.Mock", 0.13936703073174042]], "return_value": [["str", 0.2739727328165447], ["int", 0.1817088953945033], ["List[Dict[str, Any]]", 0.1510729310435544], ["Dict[str, Union[Any, Any]]", 0.07799393828890551]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[154, 4], [160, 21]], "fn_var_ln": {"result": [[158, 8], [158, 14]]}, "fn_var_occur": {"result": [["result", "self", "hook", "create_partition", "DB_NAME", "TABLE_NAME", "PARTITION_INPUT"]]}, "name": "test_create_partition", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "client", "create_database", "DatabaseInput", "DB_NAME"], ["self", "client", "create_table", "DatabaseName", "DB_NAME", "TableInput", "TABLE_INPUT"], ["result", "self", "hook", "create_partition", "DB_NAME", "TABLE_NAME", "PARTITION_INPUT"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestGlueCatalogHook.test_create_partition", "ret_exprs": [], "ret_type": "", "variables": {"result": ""}, "variables_p": {"result": [["dict", 0.3100136646135333], ["Dict[str, Any]", 0.21503878094241718], ["set", 0.09705874545529235], ["Dict[str, str]", 0.09627513945822798], ["Dict[str, int]", 0.09127947284366571]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[163, 4], [173, 9]], "fn_var_ln": {"mocked_client": [[164, 8], [164, 21]], "return_value": [[166, 8], [166, 38]]}, "fn_var_occur": {"mocked_client": [["mocked_client", "mock", "Mock"], ["mocked_client", "create_partition", "side_effect", "ClientError"], ["mocked_connection", "return_value", "mocked_client"], ["mocked_client", "create_partition", "assert_called_once_with", "DatabaseName", "DB_NAME", "TableName", "TABLE_NAME", "PartitionInput", "PARTITION_INPUT"]], "return_value": [["mocked_connection", "return_value", "mocked_client"]]}, "name": "test_create_partition_with_client_error", "params": {"mocked_connection": "", "self": ""}, "params_descr": {"mocked_connection": "", "self": ""}, "params_occur": {"mocked_connection": [["mocked_connection", "return_value", "mocked_client"]], "self": [["self", "hook", "create_partition", "DB_NAME", "TABLE_NAME", "PARTITION_INPUT"]]}, "params_p": {"args": [], "kwargs": [], "mocked_connection": [["mock.MagicMock", 0.20484929280612252]], "self": []}, "q_name": "TestGlueCatalogHook.test_create_partition_with_client_error", "ret_exprs": [], "ret_type": "", "variables": {"mocked_client": "", "return_value": ""}, "variables_p": {"mocked_client": [], "return_value": [["str", 0.2739727328165447], ["int", 0.1817088953945033], ["List[Dict[str, Any]]", 0.1510729310435544], ["Dict[str, Union[Any, Any]]", 0.07799393828890551]]}}], "name": "TestGlueCatalogHook", "q_name": "TestGlueCatalogHook", "variables": {}, "variables_p": {}}], "funcs": [], "imports": ["__future__", "annotations", "unittest", "mock", "boto3", "pytest", "botocore", "exceptions", "ClientError", "moto", "mock_glue", "airflow", "exceptions", "AirflowException", "airflow", "providers", "amazon", "aws", "hooks", "glue_catalog", "GlueCatalogHook"], "mod_var_ln": {"DB_NAME": [[30, 0], [30, 7]], "PARTITION_INPUT": [[39, 0], [39, 15]], "TABLE_INPUT": [[32, 0], [32, 11]], "TABLE_NAME": [[31, 0], [31, 10]]}, "mod_var_occur": {"DB_NAME": [["TABLE_INPUT", "TABLE_NAME", "DB_NAME", "TABLE_NAME"], ["self", "client", "create_database", "DatabaseInput", "DB_NAME"], ["self", "client", "create_table", "DatabaseName", "DB_NAME", "TableInput", "TABLE_INPUT"], ["result", "self", "hook", "get_table", "DB_NAME", "TABLE_NAME"], ["self", "client", "create_database", "DatabaseInput", "DB_NAME"], ["self", "client", "create_table", "DatabaseName", "DB_NAME", "TableInput", "TABLE_INPUT"], ["self", "hook", "get_table", "DB_NAME"], ["self", "client", "create_database", "DatabaseInput", "DB_NAME"], ["self", "client", "create_table", "DatabaseName", "DB_NAME", "TableInput", "TABLE_INPUT"], ["result", "self", "hook", "get_table_location", "DB_NAME", "TABLE_NAME"], ["self", "client", "create_database", "DatabaseInput", "DB_NAME"], ["self", "client", "create_table", "DatabaseName", "DB_NAME", "TableInput", "TABLE_INPUT"], ["self", "client", "create_partition", "DatabaseName", "DB_NAME", "TableName", "TABLE_NAME", "PartitionInput", "PARTITION_INPUT"], ["result", "self", "hook", "get_partition", "DB_NAME", "TABLE_NAME", "PARTITION_INPUT"], ["result", "DB_NAME"], ["self", "hook", "get_partition", "DB_NAME", "TABLE_NAME", "PARTITION_INPUT"], ["mocked_client", "get_partition", "assert_called_once_with", "DatabaseName", "DB_NAME", "TableName", "TABLE_NAME", "PartitionValues", "PARTITION_INPUT"], ["self", "client", "create_database", "DatabaseInput", "DB_NAME"], ["self", "client", "create_table", "DatabaseName", "DB_NAME", "TableInput", "TABLE_INPUT"], ["result", "self", "hook", "create_partition", "DB_NAME", "TABLE_NAME", "PARTITION_INPUT"], ["self", "hook", "create_partition", "DB_NAME", "TABLE_NAME", "PARTITION_INPUT"], ["mocked_client", "create_partition", "assert_called_once_with", "DatabaseName", "DB_NAME", "TableName", "TABLE_NAME", "PartitionInput", "PARTITION_INPUT"]], "PARTITION_INPUT": [["self", "client", "create_partition", "DatabaseName", "DB_NAME", "TableName", "TABLE_NAME", "PartitionInput", "PARTITION_INPUT"], ["result", "self", "hook", "get_partition", "DB_NAME", "TABLE_NAME", "PARTITION_INPUT"], ["result", "PARTITION_INPUT"], ["self", "hook", "get_partition", "DB_NAME", "TABLE_NAME", "PARTITION_INPUT"], ["mocked_client", "get_partition", "assert_called_once_with", "DatabaseName", "DB_NAME", "TableName", "TABLE_NAME", "PartitionValues", "PARTITION_INPUT"], ["result", "self", "hook", "create_partition", "DB_NAME", "TABLE_NAME", "PARTITION_INPUT"], ["self", "hook", "create_partition", "DB_NAME", "TABLE_NAME", "PARTITION_INPUT"], ["mocked_client", "create_partition", "assert_called_once_with", "DatabaseName", "DB_NAME", "TableName", "TABLE_NAME", "PartitionInput", "PARTITION_INPUT"]], "TABLE_INPUT": [["self", "client", "create_table", "DatabaseName", "DB_NAME", "TableInput", "TABLE_INPUT"], ["result", "TABLE_INPUT"], ["result", "TABLE_INPUT"], ["self", "client", "create_table", "DatabaseName", "DB_NAME", "TableInput", "TABLE_INPUT"], ["self", "client", "create_table", "DatabaseName", "DB_NAME", "TableInput", "TABLE_INPUT"], ["result", "TABLE_INPUT"], ["self", "client", "create_table", "DatabaseName", "DB_NAME", "TableInput", "TABLE_INPUT"], ["result", "TABLE_INPUT"], ["self", "client", "create_table", "DatabaseName", "DB_NAME", "TableInput", "TABLE_INPUT"]], "TABLE_NAME": [["TABLE_INPUT", "TABLE_NAME", "DB_NAME", "TABLE_NAME"], ["result", "self", "hook", "get_table", "DB_NAME", "TABLE_NAME"], ["result", "self", "hook", "get_table_location", "DB_NAME", "TABLE_NAME"], ["self", "client", "create_partition", "DatabaseName", "DB_NAME", "TableName", "TABLE_NAME", "PartitionInput", "PARTITION_INPUT"], ["result", "self", "hook", "get_partition", "DB_NAME", "TABLE_NAME", "PARTITION_INPUT"], ["self", "hook", "get_partition", "DB_NAME", "TABLE_NAME", "PARTITION_INPUT"], ["mocked_client", "get_partition", "assert_called_once_with", "DatabaseName", "DB_NAME", "TableName", "TABLE_NAME", "PartitionValues", "PARTITION_INPUT"], ["result", "self", "hook", "create_partition", "DB_NAME", "TABLE_NAME", "PARTITION_INPUT"], ["self", "hook", "create_partition", "DB_NAME", "TABLE_NAME", "PARTITION_INPUT"], ["mocked_client", "create_partition", "assert_called_once_with", "DatabaseName", "DB_NAME", "TableName", "TABLE_NAME", "PartitionInput", "PARTITION_INPUT"]]}, "no_types_annot": {"D": 1, "I": 0, "U": 50}, "session_id": "_ffG-xjeflYj0AsQbQSOZ4l61SlpR0LmuTnga9xIjTI", "set": null, "tc": [false, null], "type_annot_cove": 0.02, "typed_seq": "", "untyped_seq": "", "variables": {"DB_NAME": "", "PARTITION_INPUT": "builtins.dict", "TABLE_INPUT": "", "TABLE_NAME": ""}, "variables_p": {"DB_NAME": [["str", 0.9999999999999999]], "PARTITION_INPUT": [["str", 0.2766316270649951], ["List[str]", 0.10356106137844014], ["int", 0.10281461898756364]], "TABLE_INPUT": [["str", 0.702974845238756], ["int", 0.20057771871036176]], "TABLE_NAME": [["str", 0.7094416533314742]]}}}