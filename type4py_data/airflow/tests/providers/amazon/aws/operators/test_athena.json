{"error": null, "response": {"classes": [{"cls_lc": [[48, 0], [171, 64]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[49, 4], [66, 9]], "fn_var_ln": {"args": [[50, 8], [50, 12]], "athena": [[57, 8], [57, 19]], "dag": [[55, 8], [55, 16]]}, "fn_var_occur": {"args": [["args", "DEFAULT_DATE"], ["self", "dag", "DAG", "TEST_DAG_ID", "default_args", "args", "schedule"]], "athena": [["self", "athena", "AthenaOperator", "task_id", "query", "database", "output_location", "client_request_token", "sleep_time", "max_polling_attempts", "dag", "self", "dag"]], "dag": [["self", "dag", "DAG", "TEST_DAG_ID", "default_args", "args", "schedule"], ["self", "athena", "AthenaOperator", "task_id", "query", "database", "output_location", "client_request_token", "sleep_time", "max_polling_attempts", "dag", "self", "dag"]]}, "name": "setup_method", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "dag", "DAG", "TEST_DAG_ID", "default_args", "args", "schedule"], ["self", "athena", "AthenaOperator", "task_id", "query", "database", "output_location", "client_request_token", "sleep_time", "max_polling_attempts", "dag", "self", "dag"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestAthenaOperator.setup_method", "ret_exprs": [], "ret_type": "", "variables": {"args": "", "athena": "", "dag": ""}, "variables_p": {"args": [["List[str]", 0.30340122720349644]], "athena": [["int", 0.8007982514848337], ["datetime.datetime.date", 0.10727644302994022]], "dag": []}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[68, 4], [74, 42]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_init", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "athena", "task_id", "MOCK_DATA"], ["self", "athena", "query", "MOCK_DATA"], ["self", "athena", "database", "MOCK_DATA"], ["self", "athena", "aws_conn_id"], ["self", "athena", "client_request_token", "MOCK_DATA"], ["self", "athena", "sleep_time"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestAthenaOperator.test_init", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[79, 4], [88, 54]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_hook_run_small_success_query", "params": {"mock_check_query_status": "", "mock_conn": "", "mock_run_query": "", "self": ""}, "params_descr": {"mock_check_query_status": "", "mock_conn": "", "mock_run_query": "", "self": ""}, "params_occur": {"mock_check_query_status": [["mock_check_query_status", "call_count"]], "mock_conn": [], "mock_run_query": [["mock_run_query", "assert_called_once_with", "MOCK_DATA", "query_context", "result_configuration", "MOCK_DATA", "MOCK_DATA"]], "self": [["self", "athena", "execute"]]}, "params_p": {"args": [], "kwargs": [], "mock_check_query_status": [["mock.Mock", 0.614417465987489]], "mock_conn": [["mock.Mock", 0.1426558076406362]], "mock_run_query": [], "self": []}, "q_name": "TestAthenaOperator.test_hook_run_small_success_query", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[97, 4], [105, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_hook_run_big_success_query", "params": {"mock_check_query_status": "", "mock_conn": "", "mock_run_query": "", "self": ""}, "params_descr": {"mock_check_query_status": "", "mock_conn": "", "mock_run_query": "", "self": ""}, "params_occur": {"mock_check_query_status": [], "mock_conn": [], "mock_run_query": [["mock_run_query", "assert_called_once_with", "MOCK_DATA", "query_context", "result_configuration", "MOCK_DATA", "MOCK_DATA"]], "self": [["self", "athena", "execute"]]}, "params_p": {"args": [], "kwargs": [], "mock_check_query_status": [["mock.Mock", 0.1426558076406362]], "mock_conn": [["mock.Mock", 0.1426558076406362]], "mock_run_query": [], "self": []}, "q_name": "TestAthenaOperator.test_hook_run_big_success_query", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[111, 4], [123, 59]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_hook_run_failure_query", "params": {"mock_check_query_status": "", "mock_conn": "", "mock_get_state_change_reason": "", "mock_run_query": "", "self": ""}, "params_descr": {"mock_check_query_status": "", "mock_conn": "", "mock_get_state_change_reason": "", "mock_run_query": "", "self": ""}, "params_occur": {"mock_check_query_status": [], "mock_conn": [], "mock_get_state_change_reason": [["mock_get_state_change_reason", "call_count"]], "mock_run_query": [["mock_run_query", "assert_called_once_with", "MOCK_DATA", "query_context", "result_configuration", "MOCK_DATA", "MOCK_DATA"]], "self": [["self", "athena", "execute"]]}, "params_p": {"args": [], "kwargs": [], "mock_check_query_status": [["mock.Mock", 0.6543508989510198]], "mock_conn": [["mock.Mock", 0.6543508989510198]], "mock_get_state_change_reason": [["mock.Mock", 0.3942497251006085]], "mock_run_query": [["mock.Mock", 0.13289406756347646]], "self": []}, "q_name": "TestAthenaOperator.test_hook_run_failure_query", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[128, 4], [137, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_hook_run_cancelled_query", "params": {"mock_check_query_status": "", "mock_conn": "", "mock_run_query": "", "self": ""}, "params_descr": {"mock_check_query_status": "", "mock_conn": "", "mock_run_query": "", "self": ""}, "params_occur": {"mock_check_query_status": [], "mock_conn": [], "mock_run_query": [["mock_run_query", "assert_called_once_with", "MOCK_DATA", "query_context", "result_configuration", "MOCK_DATA", "MOCK_DATA"]], "self": [["self", "athena", "execute"]]}, "params_p": {"args": [], "kwargs": [], "mock_check_query_status": [["mock.Mock", 0.13627695142855714]], "mock_conn": [["mock.Mock", 0.13627695142855714]], "mock_run_query": [], "self": []}, "q_name": "TestAthenaOperator.test_hook_run_cancelled_query", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[142, 4], [151, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_hook_run_failed_query_with_max_tries", "params": {"mock_check_query_status": "", "mock_conn": "", "mock_run_query": "", "self": ""}, "params_descr": {"mock_check_query_status": "", "mock_conn": "", "mock_run_query": "", "self": ""}, "params_occur": {"mock_check_query_status": [], "mock_conn": [], "mock_run_query": [["mock_run_query", "assert_called_once_with", "MOCK_DATA", "query_context", "result_configuration", "MOCK_DATA", "MOCK_DATA"]], "self": [["self", "athena", "execute"]]}, "params_p": {"args": [], "kwargs": [], "mock_check_query_status": [["mock.Mock", 0.13627695142855714]], "mock_conn": [["mock.Mock", 0.13627695142855714]], "mock_run_query": [], "self": []}, "q_name": "TestAthenaOperator.test_hook_run_failed_query_with_max_tries", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Test we return the right value -- that will get put in to XCom by the execution engine", "long_descr": null, "ret": null}, "fn_lc": [[156, 4], [162, 80]], "fn_var_ln": {"dag_run": [[160, 8], [160, 18]], "ti": [[159, 8], [159, 10]]}, "fn_var_occur": {"dag_run": [["dag_run", "DagRun", "dag_id", "self", "dag", "dag_id", "execution_date", "timezone", "utcnow", "run_id"], ["ti", "dag_run", "dag_run"]], "ti": [["ti", "TaskInstance", "task", "self", "athena"], ["ti", "dag_run", "dag_run"], ["self", "athena", "execute", "ti", "get_template_context", "ATHENA_QUERY_ID"]]}, "name": "test_return_value", "params": {"mock_check_query_status": "", "mock_conn": "", "mock_run_query": "", "self": ""}, "params_descr": {"mock_check_query_status": "", "mock_conn": "", "mock_run_query": "", "self": ""}, "params_occur": {"mock_check_query_status": [], "mock_conn": [], "mock_run_query": [], "self": [["dag_run", "DagRun", "dag_id", "self", "dag", "dag_id", "execution_date", "timezone", "utcnow", "run_id"], ["ti", "TaskInstance", "task", "self", "athena"], ["self", "athena", "execute", "ti", "get_template_context", "ATHENA_QUERY_ID"]]}, "params_p": {"args": [], "kwargs": [], "mock_check_query_status": [["mock.Mock", 0.6725216702437514]], "mock_conn": [["mock.Mock", 0.6725216702437514]], "mock_run_query": [["mock.Mock", 0.6725216702437514]], "self": []}, "q_name": "TestAthenaOperator.test_return_value", "ret_exprs": [], "ret_type": "", "variables": {"dag_run": "", "ti": ""}, "variables_p": {"dag_run": [["list", 0.10811067838319159], ["List[str]", 0.10764936689387634], ["int", 0.10226999000746924], ["bytearray", 0.08901170411494687]], "ti": [["list", 0.9999999999999999]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[165, 4], [171, 64]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_is_deferred", "params": {"mock_run_query": "", "self": ""}, "params_descr": {"mock_run_query": "", "self": ""}, "params_occur": {"mock_run_query": [], "self": [["self", "athena", "deferrable", "True"], ["self", "athena", "execute", "None"]]}, "params_p": {"args": [], "kwargs": [], "mock_run_query": [["mock.Mock", 0.19343894490872887], ["str", 0.08319044359283609]], "self": []}, "q_name": "TestAthenaOperator.test_is_deferred", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestAthenaOperator", "q_name": "TestAthenaOperator", "variables": {}, "variables_p": {}}], "funcs": [], "imports": ["__future__", "annotations", "unittest", "mock", "pytest", "airflow", "exceptions", "TaskDeferred", "airflow", "models", "DAG", "DagRun", "TaskInstance", "airflow", "providers", "amazon", "aws", "hooks", "athena", "AthenaHook", "airflow", "providers", "amazon", "aws", "operators", "athena", "AthenaOperator", "airflow", "providers", "amazon", "aws", "triggers", "athena", "AthenaTrigger", "airflow", "utils", "timezone", "airflow", "utils", "timezone", "datetime"], "mod_var_ln": {"ATHENA_QUERY_ID": [[33, 0], [33, 15]], "DEFAULT_DATE": [[32, 0], [32, 12]], "MOCK_DATA": [[35, 0], [35, 9]], "TEST_DAG_ID": [[31, 0], [31, 11]], "query_context": [[44, 0], [44, 13]], "result_configuration": [[45, 0], [45, 20]]}, "mod_var_occur": {"ATHENA_QUERY_ID": [["self", "athena", "execute", "ti", "get_template_context", "ATHENA_QUERY_ID"]], "DEFAULT_DATE": [["args", "DEFAULT_DATE"]], "MOCK_DATA": [["query_context", "MOCK_DATA"], ["result_configuration", "MOCK_DATA"], ["self", "athena", "task_id", "MOCK_DATA"], ["self", "athena", "query", "MOCK_DATA"], ["self", "athena", "database", "MOCK_DATA"], ["self", "athena", "client_request_token", "MOCK_DATA"], ["mock_run_query", "assert_called_once_with", "MOCK_DATA", "query_context", "result_configuration", "MOCK_DATA", "MOCK_DATA"], ["mock_run_query", "assert_called_once_with", "MOCK_DATA", "query_context", "result_configuration", "MOCK_DATA", "MOCK_DATA"], ["mock_run_query", "assert_called_once_with", "MOCK_DATA", "query_context", "result_configuration", "MOCK_DATA", "MOCK_DATA"], ["mock_run_query", "assert_called_once_with", "MOCK_DATA", "query_context", "result_configuration", "MOCK_DATA", "MOCK_DATA"], ["mock_run_query", "assert_called_once_with", "MOCK_DATA", "query_context", "result_configuration", "MOCK_DATA", "MOCK_DATA"]], "TEST_DAG_ID": [["self", "dag", "DAG", "TEST_DAG_ID", "default_args", "args", "schedule"]], "query_context": [["mock_run_query", "assert_called_once_with", "MOCK_DATA", "query_context", "result_configuration", "MOCK_DATA", "MOCK_DATA"], ["mock_run_query", "assert_called_once_with", "MOCK_DATA", "query_context", "result_configuration", "MOCK_DATA", "MOCK_DATA"], ["mock_run_query", "assert_called_once_with", "MOCK_DATA", "query_context", "result_configuration", "MOCK_DATA", "MOCK_DATA"], ["mock_run_query", "assert_called_once_with", "MOCK_DATA", "query_context", "result_configuration", "MOCK_DATA", "MOCK_DATA"], ["mock_run_query", "assert_called_once_with", "MOCK_DATA", "query_context", "result_configuration", "MOCK_DATA", "MOCK_DATA"]], "result_configuration": [["mock_run_query", "assert_called_once_with", "MOCK_DATA", "query_context", "result_configuration", "MOCK_DATA", "MOCK_DATA"], ["mock_run_query", "assert_called_once_with", "MOCK_DATA", "query_context", "result_configuration", "MOCK_DATA", "MOCK_DATA"], ["mock_run_query", "assert_called_once_with", "MOCK_DATA", "query_context", "result_configuration", "MOCK_DATA", "MOCK_DATA"], ["mock_run_query", "assert_called_once_with", "MOCK_DATA", "query_context", "result_configuration", "MOCK_DATA", "MOCK_DATA"], ["mock_run_query", "assert_called_once_with", "MOCK_DATA", "query_context", "result_configuration", "MOCK_DATA", "MOCK_DATA"]]}, "no_types_annot": {"D": 0, "I": 0, "U": 40}, "session_id": "OE-EjwUexhkmRU8bi5jdd8X3B02t8AjRLdiAksWMy6o", "set": null, "tc": [false, null], "type_annot_cove": 0.0, "typed_seq": "", "untyped_seq": "", "variables": {"ATHENA_QUERY_ID": "", "DEFAULT_DATE": "", "MOCK_DATA": "", "TEST_DAG_ID": "", "query_context": "", "result_configuration": ""}, "variables_p": {"ATHENA_QUERY_ID": [["int", 0.4100821520672613], ["str", 0.2937842632177229]], "DEFAULT_DATE": [["str", 0.40571561154314545], ["Dict[str, Any]", 0.12993690078695638], ["int", 0.09257737549276539], ["myia.utils.misc.Named", 0.09091309555855764]], "MOCK_DATA": [["Dict[Any, List[Any]]", 0.29549248086427493], ["Dict[str, str]", 0.2891867565956154], ["Dict[str, int]", 0.11259524853156354], ["Dict[str, Union[float, str]]", 0.11186880844265043], ["List[Dict[str, Any]]", 0.1001473548032706], ["Dict[str, List[Any]]", 0.09070935076262501]], "TEST_DAG_ID": [["str", 0.9999999999999999]], "query_context": [["str", 0.7680461997576902], ["Dict[str, Dict[str, str]]", 0.1321948546318195], ["Dict[str, Union[int, str]]", 0.09975894561049026]], "result_configuration": [["str", 0.38039422700290926], ["Dict[str, Union[Any, Any]]", 0.19975021833550666], ["Dict[str, List[Any]]", 0.12132102453927947], ["Dict[Any, Union[Any, Any]]", 0.10620938535056426], ["Dict[str, Union[int, str]]", 0.09913485599862126], ["Dict[str, str]", 0.09319028877311894]]}}}