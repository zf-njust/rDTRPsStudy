{"error": null, "response": {"classes": [{"cls_lc": [[31, 0], [247, 9]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": "Test if exception is raised when bucket_name is None", "long_descr": "and bucket_key is provided as relative path rather than s3:// url.", "ret": ""}, "fn_lc": [[32, 4], [40, 25]], "fn_var_ln": {"op": [[38, 8], [38, 10]]}, "fn_var_occur": {"op": [["op", "S3KeySensor", "task_id", "bucket_key"], ["op", "poke", "None"]]}, "name": "test_bucket_name_none_and_bucket_key_as_relative_path", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestS3KeySensor.test_bucket_name_none_and_bucket_key_as_relative_path", "ret_exprs": [], "ret_type": "", "variables": {"op": ""}, "variables_p": {"op": [["Pattern[Any]", 0.26078592312118354], ["int", 0.19434454655923336], ["list", 0.09734576557042621], ["List[Dict[str, Any]]", 0.09563113214397087], ["requests.models.Response", 0.09445197600633683], ["Dict[str, str]", 0.09262566932582278], ["str", 0.08330535711928781], ["dict", 0.08150963015373862]]}}, {"docstring": {"func": "Test if exception is raised when bucket_name is None", "long_descr": "and bucket_key is provided with one of the two keys as relative path rather than s3:// url.", "ret": ""}, "fn_lc": [[43, 4], [52, 25]], "fn_var_ln": {"op": [[50, 8], [50, 10]], "return_value": [[49, 8], [49, 37]]}, "fn_var_occur": {"op": [["op", "S3KeySensor", "task_id", "bucket_key"], ["op", "poke", "None"]], "return_value": [["mock_head_object", "return_value"]]}, "name": "test_bucket_name_none_and_bucket_key_is_list_and_contain_relative_path", "params": {"mock_head_object": "", "self": ""}, "params_descr": {"mock_head_object": "", "self": ""}, "params_occur": {"mock_head_object": [["mock_head_object", "return_value"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_head_object": [], "self": []}, "q_name": "TestS3KeySensor.test_bucket_name_none_and_bucket_key_is_list_and_contain_relative_path", "ret_exprs": [], "ret_type": "", "variables": {"op": "", "return_value": ""}, "variables_p": {"op": [["Pattern[Any]", 0.26078592312118354], ["int", 0.19434454655923336], ["list", 0.09734576557042621], ["List[Dict[str, Any]]", 0.09563113214397087], ["requests.models.Response", 0.09445197600633683], ["Dict[str, str]", 0.09262566932582278], ["str", 0.08330535711928781], ["dict", 0.08150963015373862]], "return_value": [["str", 0.26592148989167363], ["list", 0.12082962998229546], ["Dict[str, Any]", 0.107348553164377], ["tests.utils.MockCoroutine", 0.10301481997246939], ["tests.mock.zwave.MockNode", 0.1026593629089069]]}}, {"docstring": {"func": "Test if exception is raised when bucket_name is provided", "long_descr": "while bucket_key is provided as a full s3:// url.", "ret": ""}, "fn_lc": [[54, 4], [64, 25]], "fn_var_ln": {"op": [[60, 8], [60, 10]]}, "fn_var_occur": {"op": [["op", "S3KeySensor", "task_id", "bucket_key", "bucket_name"], ["op", "poke", "None"]]}, "name": "test_bucket_name_provided_and_bucket_key_is_s3_url", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestS3KeySensor.test_bucket_name_provided_and_bucket_key_is_s3_url", "ret_exprs": [], "ret_type": "", "variables": {"op": ""}, "variables_p": {"op": [["str", 0.2903139487195865], ["int", 0.22646629312886574], ["Pattern[str]", 0.1074007828093687], ["Dict[Variable[_KT], Variable[_VT]]", 0.10070693278598503], ["Dict[str, Any]", 0.09082653662028267], ["List[Dict[str, Any]]", 0.08420569823634604]]}}, {"docstring": {"func": "Test if exception is raised when bucket_name is provided", "long_descr": "while bucket_key contains a full s3:// url.", "ret": ""}, "fn_lc": [[67, 4], [80, 25]], "fn_var_ln": {"op": [[74, 8], [74, 10]], "return_value": [[73, 8], [73, 37]]}, "fn_var_occur": {"op": [["op", "S3KeySensor", "task_id", "bucket_key", "bucket_name"], ["op", "poke", "None"]], "return_value": [["mock_head_object", "return_value"]]}, "name": "test_bucket_name_provided_and_bucket_key_is_list_and_contains_s3_url", "params": {"mock_head_object": "", "self": ""}, "params_descr": {"mock_head_object": "", "self": ""}, "params_occur": {"mock_head_object": [["mock_head_object", "return_value"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_head_object": [], "self": []}, "q_name": "TestS3KeySensor.test_bucket_name_provided_and_bucket_key_is_list_and_contains_s3_url", "ret_exprs": [], "ret_type": "", "variables": {"op": "", "return_value": ""}, "variables_p": {"op": [["str", 0.2903139487195865], ["int", 0.22646629312886574], ["Pattern[str]", 0.1074007828093687], ["Dict[Variable[_KT], Variable[_VT]]", 0.10070693278598503], ["Dict[str, Any]", 0.09082653662028267], ["List[Dict[str, Any]]", 0.08420569823634604]], "return_value": [["str", 0.26592148989167363], ["list", 0.12082962998229546], ["Dict[str, Any]", 0.107348553164377], ["tests.utils.MockCoroutine", 0.10301481997246939], ["tests.mock.zwave.MockNode", 0.1026593629089069]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[90, 4], [102, 75]], "fn_var_ln": {"op": [[94, 8], [94, 10]], "return_value": [[92, 8], [92, 37]]}, "fn_var_occur": {"op": [["op", "S3KeySensor", "task_id", "bucket_key", "key", "bucket_name", "bucket"], ["op", "poke", "None"]], "return_value": [["mock_head_object", "return_value", "None"]]}, "name": "test_parse_bucket_key", "params": {"bucket": "", "key": "", "mock_head_object": "", "parsed_bucket": "", "parsed_key": "", "self": ""}, "params_descr": {"bucket": "", "key": "", "mock_head_object": "", "parsed_bucket": "", "parsed_key": "", "self": ""}, "params_occur": {"bucket": [["print", "key", "bucket", "parsed_key", "parsed_bucket"], ["op", "S3KeySensor", "task_id", "bucket_key", "key", "bucket_name", "bucket"]], "key": [["print", "key", "bucket", "parsed_key", "parsed_bucket"], ["op", "S3KeySensor", "task_id", "bucket_key", "key", "bucket_name", "bucket"]], "mock_head_object": [["mock_head_object", "return_value", "None"], ["mock_head_object", "assert_called_once_with", "parsed_key", "parsed_bucket"]], "parsed_bucket": [["print", "key", "bucket", "parsed_key", "parsed_bucket"], ["mock_head_object", "assert_called_once_with", "parsed_key", "parsed_bucket"]], "parsed_key": [["print", "key", "bucket", "parsed_key", "parsed_bucket"], ["mock_head_object", "assert_called_once_with", "parsed_key", "parsed_bucket"]], "self": []}, "params_p": {"args": [], "bucket": [["str", 0.8371984956130516], ["Dict[str, Any]", 0.080652583948153]], "key": [["str", 0.8371984956130516], ["Dict[str, Any]", 0.080652583948153]], "kwargs": [], "mock_head_object": [["str", 0.35147835693683177], ["bool", 0.2659669306030855]], "parsed_bucket": [["str", 0.19292674035812551], ["dict", 0.10800576020907078], ["tracim.models.context_models.ContentInContext", 0.09115243799835551], ["Optional[MutableMapping[Any, Any]]", 0.0898030665954162]], "parsed_key": [["str", 0.19292674035812551], ["dict", 0.10800576020907078], ["tracim.models.context_models.ContentInContext", 0.09115243799835551], ["Optional[MutableMapping[Any, Any]]", 0.0898030665954162]], "self": []}, "q_name": "TestS3KeySensor.test_parse_bucket_key", "ret_exprs": [], "ret_type": "", "variables": {"op": "", "return_value": ""}, "variables_p": {"op": [["str", 0.2378920840003497], ["Dict[str, Union[Any, Any]]", 0.17665372512141317], ["Dict[str, Any]", 0.1073956620569985], ["Type[Optional[Any]]", 0.1067491829895026], ["Pattern[Any]", 0.10555955103521933], ["List[str]", 0.09108904711364002], ["int", 0.08756832639825049], ["Dict[str, Union[Any, Any, Any]]", 0.08709242128462613]], "return_value": [["List[str]", 0.16838361416861827], ["str", 0.1154474385294658], ["Optional[bytes]", 0.10524483773918952], ["list", 0.09718305992094756], ["List[Dict[str, str]]", 0.08997004180549528], ["Dict[str, Union[Any, Any, Any, Any]]", 0.08779920652122995], ["List[Union[Any, Any, Any]]", 0.08779920652122995]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[105, 4], [127, 65]], "fn_var_ln": {"context": [[123, 8], [123, 15]], "dag": [[112, 8], [112, 11]], "dag_run": [[122, 8], [122, 18]], "execution_date": [[110, 8], [110, 22]], "op": [[113, 8], [113, 10]], "return_value": [[106, 8], [106, 37]], "ti": [[121, 8], [121, 10]]}, "fn_var_occur": {"context": [["context", "ti", "get_template_context"], ["ti", "render_templates", "context"]], "dag": [["dag", "DAG", "start_date", "execution_date"], ["op", "S3KeySensor", "task_id", "bucket_key", "bucket_name", "None", "dag", "dag"], ["dag_run", "DagRun", "dag_id", "dag", "dag_id", "execution_date", "execution_date", "run_id"]], "dag_run": [["dag_run", "DagRun", "dag_id", "dag", "dag_id", "execution_date", "execution_date", "run_id"], ["ti", "dag_run", "dag_run"]], "execution_date": [["execution_date", "timezone", "datetime"], ["dag", "DAG", "start_date", "execution_date"], ["dag_run", "DagRun", "dag_id", "dag", "dag_id", "execution_date", "execution_date", "run_id"]], "op": [["op", "S3KeySensor", "task_id", "bucket_key", "bucket_name", "None", "dag", "dag"], ["ti", "TaskInstance", "task", "op"], ["op", "poke", "None"]], "return_value": [["mock_head_object", "return_value", "None"]], "ti": [["ti", "TaskInstance", "task", "op"], ["ti", "dag_run", "dag_run"], ["context", "ti", "get_template_context"], ["ti", "render_templates", "context"]]}, "name": "test_parse_bucket_key_from_jinja", "params": {"mock_head_object": "", "self": ""}, "params_descr": {"mock_head_object": "", "self": ""}, "params_occur": {"mock_head_object": [["mock_head_object", "return_value", "None"], ["mock_head_object", "assert_called_once_with"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_head_object": [], "self": []}, "q_name": "TestS3KeySensor.test_parse_bucket_key_from_jinja", "ret_exprs": [], "ret_type": "", "variables": {"context": "", "dag": "", "dag_run": "", "execution_date": "", "op": "", "return_value": "", "ti": ""}, "variables_p": {"context": [["dict", 0.15945118206608705], ["int", 0.1378854297997767], ["bytes", 0.0987821952223095]], "dag": [["int", 0.4737401007329907], ["str", 0.20656199837419068], ["Union[Literal, Literal]", 0.10097109281982973], ["Optional[Match[str]]", 0.09946754321613]], "dag_run": [["int", 0.3364791053383646], ["str", 0.17843954532595224], ["Dict[str, str]", 0.11359696630847406], ["ajapaik.ajapaik.models.Album", 0.09528574158160026], ["raiden.utils.Any", 0.09218632572049267], ["buza.models.Subject", 0.09127194749262177]], "execution_date": [["int", 0.32717025601819116], ["Type[prm.journals.models.moods.Mood]", 0.09214255211391063], ["str", 0.08724977331459383]], "op": [["str", 0.1709828406505514], ["Type[django.applications.catmaid.models.ChangeRequest]", 0.11730520997716601], ["Optional[str]", 0.1163111267422741], ["cmk.utils.type_defs.UserId", 0.10758421553304996], ["Dict[str, Dict[str, Any]]", 0.10199484406120388], ["int", 0.0976520890541067], ["List[str]", 0.09121581724790341]], "return_value": [["List[str]", 0.16838361416861827], ["str", 0.1154474385294658], ["Optional[bytes]", 0.10524483773918952], ["list", 0.09718305992094756], ["List[Dict[str, str]]", 0.08997004180549528], ["Dict[str, Union[Any, Any, Any, Any]]", 0.08779920652122995], ["List[Union[Any, Any, Any]]", 0.08779920652122995]], "ti": [["str", 0.5695450181445371], ["float", 0.23269080589479849], ["Dict[str, List[Any]]", 0.10928484284140481]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[130, 4], [154, 59]], "fn_var_ln": {"context": [[149, 8], [149, 15]], "dag": [[138, 8], [138, 11]], "dag_run": [[148, 8], [148, 18]], "execution_date": [[136, 8], [136, 22]], "op": [[139, 8], [139, 10]], "return_value": [[131, 8], [131, 37]], "side_effect": [[132, 8], [132, 36]], "ti": [[147, 8], [147, 10]]}, "fn_var_occur": {"context": [["context", "ti", "get_template_context"], ["ti", "render_templates", "context"]], "dag": [["dag", "DAG", "start_date", "execution_date", "render_template_as_native_obj", "True"], ["op", "S3KeySensor", "task_id", "bucket_key", "bucket_name", "None", "dag", "dag"], ["dag_run", "DagRun", "dag_id", "dag", "dag_id", "execution_date", "execution_date", "run_id"]], "dag_run": [["dag_run", "DagRun", "dag_id", "dag", "dag_id", "execution_date", "execution_date", "run_id"], ["ti", "dag_run", "dag_run"]], "execution_date": [["execution_date", "timezone", "datetime"], ["dag", "DAG", "start_date", "execution_date", "render_template_as_native_obj", "True"], ["dag_run", "DagRun", "dag_id", "dag", "dag_id", "execution_date", "execution_date", "run_id"]], "op": [["op", "S3KeySensor", "task_id", "bucket_key", "bucket_name", "None", "dag", "dag"], ["ti", "TaskInstance", "task", "op"], ["op", "poke", "None"]], "return_value": [["mock_head_object", "return_value", "None"]], "side_effect": [["mock_head_object", "side_effect"]], "ti": [["ti", "TaskInstance", "task", "op"], ["ti", "dag_run", "dag_run"], ["context", "ti", "get_template_context"], ["ti", "render_templates", "context"]]}, "name": "test_parse_list_of_bucket_keys_from_jinja", "params": {"mock_head_object": "", "self": ""}, "params_descr": {"mock_head_object": "", "self": ""}, "params_occur": {"mock_head_object": [["mock_head_object", "return_value", "None"], ["mock_head_object", "side_effect"], ["mock_head_object", "assert_any_call"], ["mock_head_object", "assert_any_call"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_head_object": [], "self": []}, "q_name": "TestS3KeySensor.test_parse_list_of_bucket_keys_from_jinja", "ret_exprs": [], "ret_type": "", "variables": {"context": "", "dag": "", "dag_run": "", "execution_date": "", "op": "", "return_value": "", "side_effect": "", "ti": ""}, "variables_p": {"context": [["dict", 0.15945118206608705], ["int", 0.1378854297997767], ["bytes", 0.0987821952223095]], "dag": [["str", 0.40270252311254484], ["List[str]", 0.09484483438486746], ["List[Variable[_T]]", 0.09362956593599676]], "dag_run": [["int", 0.3364791053383646], ["str", 0.17843954532595224], ["Dict[str, str]", 0.11359696630847406], ["ajapaik.ajapaik.models.Album", 0.09528574158160026], ["raiden.utils.Any", 0.09218632572049267], ["buza.models.Subject", 0.09127194749262177]], "execution_date": [["int", 0.3287332142904233], ["Type[prm.journals.models.moods.Mood]", 0.09100331684711954], ["str", 0.08876798991922008]], "op": [["str", 0.1709828406505514], ["Type[django.applications.catmaid.models.ChangeRequest]", 0.11730520997716601], ["Optional[str]", 0.1163111267422741], ["cmk.utils.type_defs.UserId", 0.10758421553304996], ["Dict[str, Dict[str, Any]]", 0.10199484406120388], ["int", 0.0976520890541067], ["List[str]", 0.09121581724790341]], "return_value": [["List[str]", 0.16838361416861827], ["str", 0.1154474385294658], ["Optional[bytes]", 0.10524483773918952], ["list", 0.09718305992094756], ["List[Dict[str, str]]", 0.08997004180549528], ["Dict[str, Union[Any, Any, Any, Any]]", 0.08779920652122995], ["List[Union[Any, Any, Any]]", 0.08779920652122995]], "side_effect": [["str", 0.25296016875384525], ["Dict[int, Dict[str, Any]]", 0.15311531832450015], ["property", 0.13046472535401749], ["alibi.tests.utils.MockPredictor", 0.12416538329046213], ["mock.MagicMock", 0.08053516524173954], ["List[str]", 0.07894067505746549]], "ti": [["str", 0.5695450181445371], ["float", 0.23269080589479849], ["Dict[str, List[Any]]", 0.10928484284140481]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[157, 4], [165, 36]], "fn_var_ln": {"op": [[158, 8], [158, 10]], "return_value": [[164, 8], [164, 37]]}, "fn_var_occur": {"op": [["op", "S3KeySensor", "task_id", "bucket_key"], ["op", "poke", "None", "False"], ["op", "poke", "None", "True"]], "return_value": [["mock_head_object", "return_value", "None"], ["mock_head_object", "return_value"]]}, "name": "test_poke", "params": {"mock_head_object": "", "self": ""}, "params_descr": {"mock_head_object": "", "self": ""}, "params_occur": {"mock_head_object": [["mock_head_object", "return_value", "None"], ["mock_head_object", "assert_called_once_with"], ["mock_head_object", "return_value"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_head_object": [["mock.Mock", 0.09579640005964435]], "self": []}, "q_name": "TestS3KeySensor.test_poke", "ret_exprs": [], "ret_type": "", "variables": {"op": "", "return_value": ""}, "variables_p": {"op": [["str", 0.6963321344012489], ["Type[django.applications.catmaid.models.ChangeRequest]", 0.09492527816966205]], "return_value": [["str", 0.27162298431094556], ["int", 0.13569943393614958], ["Optional[bytes]", 0.11618034916035655], ["Tuple[int, int]", 0.08715296486896777], ["Dict[str, Dict[str, Any]]", 0.0855610262708072], ["List[str]", 0.068231044556603]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[168, 4], [180, 64]], "fn_var_ln": {"op": [[169, 8], [169, 10]], "side_effect": [[176, 8], [176, 36]]}, "fn_var_occur": {"op": [["op", "S3KeySensor", "task_id", "bucket_key"], ["op", "poke", "None", "False"], ["op", "poke", "None", "True"]], "side_effect": [["mock_head_object", "side_effect", "None"], ["mock_head_object", "side_effect"]]}, "name": "test_poke_multiple_files", "params": {"mock_head_object": "", "self": ""}, "params_descr": {"mock_head_object": "", "self": ""}, "params_occur": {"mock_head_object": [["mock_head_object", "side_effect", "None"], ["mock_head_object", "side_effect"], ["mock_head_object", "assert_any_call"], ["mock_head_object", "assert_any_call"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_head_object": [["mock.MagicMock", 0.09416182680950494]], "self": []}, "q_name": "TestS3KeySensor.test_poke_multiple_files", "ret_exprs": [], "ret_type": "", "variables": {"op": "", "side_effect": ""}, "variables_p": {"op": [["str", 0.6963321344012489], ["Type[django.applications.catmaid.models.ChangeRequest]", 0.09492527816966205]], "side_effect": [["str", 0.26204232510674147], ["property", 0.09297836787890906], ["Union[Literal, str]", 0.08735920214957825], ["alibi.tests.utils.MockPredictor", 0.07854962467620612]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[183, 4], [194, 36]], "fn_var_ln": {"op": [[184, 8], [184, 10]], "return_value": [[193, 8], [193, 43]]}, "fn_var_occur": {"op": [["op", "S3KeySensor", "task_id", "bucket_key", "wildcard_match", "True"], ["op", "poke", "None", "False"], ["op", "poke", "None", "False"], ["op", "poke", "None", "True"]], "return_value": [["mock_get_file_metadata", "return_value"], ["mock_get_file_metadata", "return_value"], ["mock_get_file_metadata", "return_value"]]}, "name": "test_poke_wildcard", "params": {"mock_get_file_metadata": "", "self": ""}, "params_descr": {"mock_get_file_metadata": "", "self": ""}, "params_occur": {"mock_get_file_metadata": [["mock_get_file_metadata", "return_value"], ["mock_get_file_metadata", "assert_called_once_with"], ["mock_get_file_metadata", "return_value"], ["mock_get_file_metadata", "return_value"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_get_file_metadata": [], "self": []}, "q_name": "TestS3KeySensor.test_poke_wildcard", "ret_exprs": [], "ret_type": "", "variables": {"op": "", "return_value": ""}, "variables_p": {"op": [["str", 0.4924440211934658], ["Dict[str, Any]", 0.21769731385084706], ["List[List[Any]]", 0.09117844458515023]], "return_value": [["str", 0.5389171111777313], ["Dict[str, int]", 0.11241768248263473], ["Dict[str, Dict[str, Any]]", 0.07889994444454115], ["list", 0.07783147008902196]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[197, 4], [214, 65]], "fn_var_ln": {"op": [[198, 8], [198, 10]], "side_effect": [[210, 8], [210, 42]]}, "fn_var_occur": {"op": [["op", "S3KeySensor", "task_id", "bucket_key", "wildcard_match", "True"], ["op", "poke", "None", "False"], ["op", "poke", "None", "False"], ["op", "poke", "None", "True"]], "side_effect": [["mock_get_file_metadata", "side_effect"], ["mock_get_file_metadata", "side_effect"], ["mock_get_file_metadata", "side_effect"]]}, "name": "test_poke_wildcard_multiple_files", "params": {"mock_get_file_metadata": "", "self": ""}, "params_descr": {"mock_get_file_metadata": "", "self": ""}, "params_occur": {"mock_get_file_metadata": [["mock_get_file_metadata", "side_effect"], ["mock_get_file_metadata", "side_effect"], ["mock_get_file_metadata", "side_effect"], ["mock_get_file_metadata", "assert_any_call"], ["mock_get_file_metadata", "assert_any_call"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_get_file_metadata": [["mock.MagicMock", 0.11015410743850308], ["Dict[str, Any]", 0.09602102761964187]], "self": []}, "q_name": "TestS3KeySensor.test_poke_wildcard_multiple_files", "ret_exprs": [], "ret_type": "", "variables": {"op": "", "side_effect": ""}, "variables_p": {"op": [["str", 0.4924440211934658], ["Dict[str, Any]", 0.21769731385084706], ["List[List[Any]]", 0.09117844458515023]], "side_effect": [["str", 0.2808773493278456], ["Dict[str, Any]", 0.21347455304139076], ["Dict[str, Union[Any, Any]]", 0.1189590369905911], ["ClassVar[bool]", 0.09952751617890328]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[218, 8], [219, 59]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "check_fn", "params": {"files": "builtins.list"}, "params_descr": {"files": ""}, "params_occur": {"files": [["all", "f", "get", "f", "files"]]}, "params_p": {"args": [], "files": [["str", 0.3899566161449327], ["Dict[str, str]", 0.10119384331808468], ["Callable[[str], str]", 0.09867045243708282], ["IO[Any]", 0.09867045243708282], ["dict", 0.09731394876564944]], "kwargs": [], "self": []}, "q_name": "TestS3KeySensor.test_poke_with_check_function.<locals>.check_fn", "ret_exprs": ["return all(f.get(\"Size\", 0) > 0 for f in files)"], "ret_type": "builtins.bool", "ret_type_p": [["List[str]", 0.19642023330191172], ["List[Dict[str, Any]]", 0.11169828680008309], ["List[List[int]]", 0.11169828680008309], ["Set[int]", 0.09877325077765288], ["List[Tuple[str, int]]", 0.09314145371481466], ["Iterable[int]", 0.09199998628722898], ["dict", 0.09160304341788002]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[217, 4], [227, 36]], "fn_var_ln": {"op": [[221, 8], [221, 10]], "return_value": [[226, 8], [226, 37]]}, "fn_var_occur": {"op": [["op", "S3KeySensor", "task_id", "bucket_key", "check_fn", "check_fn"], ["op", "poke", "None", "False"], ["op", "poke", "None", "True"]], "return_value": [["mock_head_object", "return_value"], ["mock_head_object", "return_value"]]}, "name": "test_poke_with_check_function", "params": {"mock_head_object": "", "self": ""}, "params_descr": {"mock_head_object": "", "self": ""}, "params_occur": {"mock_head_object": [["mock_head_object", "return_value"], ["mock_head_object", "return_value"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_head_object": [], "self": []}, "q_name": "TestS3KeySensor.test_poke_with_check_function", "ret_exprs": [], "ret_type": "", "variables": {"op": "", "return_value": ""}, "variables_p": {"op": [["str", 0.6822450420476495], ["dict", 0.11179191060189489], ["list", 0.10311942183271514], ["Final", 0.10284362551774036]], "return_value": [["Dict[str, Dict[str, Any]]", 0.21433383890724844], ["Dict[str, Union[Any, Any]]", 0.16141640035002958], ["Dict[str, int]", 0.08793237556199668], ["Dict[str, Union[Any, Any, Any]]", 0.08202894138014004], ["list", 0.07308785529876898]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[235, 8], [236, 59]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "check_fn", "params": {"files": "builtins.list"}, "params_descr": {"files": ""}, "params_occur": {"files": [["all", "f", "get", "f", "files"]]}, "params_p": {"args": [], "files": [["str", 0.3899566161449327], ["Dict[str, str]", 0.10119384331808468], ["Callable[[str], str]", 0.09867045243708282], ["IO[Any]", 0.09867045243708282], ["dict", 0.09731394876564944]], "kwargs": [], "self": []}, "q_name": "TestS3KeySensor.test_s3_key_sensor_execute_complete_success_with_keys.<locals>.check_fn", "ret_exprs": ["return all(f.get(\"Size\", 0) > 0 for f in files)"], "ret_type": "builtins.bool", "ret_type_p": [["List[str]", 0.19642023330191172], ["List[Dict[str, Any]]", 0.11169828680008309], ["List[List[int]]", 0.11169828680008309], ["Set[int]", 0.09877325077765288], ["List[Tuple[str, int]]", 0.09314145371481466], ["Iterable[int]", 0.09199998628722898], ["dict", 0.09160304341788002]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Asserts that a task is completed with success status and check function", "long_descr": null, "ret": null}, "fn_lc": [[230, 4], [247, 9]], "fn_var_ln": {"sensor": [[238, 8], [238, 14]]}, "fn_var_occur": {"sensor": [["sensor", "S3KeySensor", "task_id", "bucket_key", "bucket_name", "check_fn", "check_fn", "deferrable", "True"], ["sensor", "execute_complete", "context", "event", "None"]]}, "name": "test_s3_key_sensor_execute_complete_success_with_keys", "params": {"mock_poke": "", "self": ""}, "params_descr": {"mock_poke": "", "self": ""}, "params_occur": {"mock_poke": [], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_poke": [["mock.Mock", 0.6071567104394778], ["mock.MagicMock", 0.09431620699908803]], "self": []}, "q_name": "TestS3KeySensor.test_s3_key_sensor_execute_complete_success_with_keys", "ret_exprs": [], "ret_type": "", "variables": {"sensor": ""}, "variables_p": {"sensor": [["int", 0.2895440830378258], ["Dict[int, str]", 0.12468684775711848], ["dict", 0.09651469434594194], ["str", 0.09651469434594194], ["Type[str]", 0.09651469434594194]]}}], "name": "TestS3KeySensor", "q_name": "TestS3KeySensor", "variables": {}, "variables_p": {}}], "funcs": [], "imports": ["__future__", "annotations", "unittest", "mock", "pytest", "airflow", "exceptions", "AirflowException", "airflow", "models", "DAG", "DagRun", "TaskInstance", "airflow", "models", "variable", "Variable", "airflow", "providers", "amazon", "aws", "sensors", "s3", "S3KeySensor", "airflow", "utils", "timezone"], "mod_var_ln": {}, "mod_var_occur": {}, "no_types_annot": {"D": 2, "I": 0, "U": 62}, "session_id": "5FR3q06YqkznF_C5hZfFe8zUHI5szNuALjcbjk6lE4Q", "set": null, "tc": [false, null], "type_annot_cove": 0.03, "typed_seq": "", "untyped_seq": "", "variables": {}, "variables_p": {}}}