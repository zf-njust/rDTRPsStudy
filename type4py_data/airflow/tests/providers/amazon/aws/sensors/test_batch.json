{"error": null, "response": {"classes": [{"cls_lc": [[37, 0], [74, 64]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[38, 4], [42, 9]], "fn_var_ln": {"batch_sensor": [[39, 8], [39, 25]]}, "fn_var_occur": {"batch_sensor": [["self", "batch_sensor", "BatchSensor", "task_id", "job_id", "JOB_ID"]]}, "name": "setup_method", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "batch_sensor", "BatchSensor", "task_id", "job_id", "JOB_ID"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestBatchSensor.setup_method", "ret_exprs": [], "ret_type": "", "variables": {"batch_sensor": ""}, "variables_p": {"batch_sensor": [["str", 0.9119533032916443]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[45, 4], [48, 64]], "fn_var_ln": {"return_value": [[46, 8], [46, 45]]}, "fn_var_occur": {"return_value": [["mock_get_job_description", "return_value"]]}, "name": "test_poke_on_success_state", "params": {"mock_get_job_description": "", "self": ""}, "params_descr": {"mock_get_job_description": "", "self": ""}, "params_occur": {"mock_get_job_description": [["mock_get_job_description", "return_value"], ["mock_get_job_description", "assert_called_once_with", "JOB_ID"]], "self": [["self", "batch_sensor", "poke", "True"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_job_description": [["mock.MagicMock", 0.09841400463304582]], "self": []}, "q_name": "TestBatchSensor.test_poke_on_success_state", "ret_exprs": [], "ret_type": "", "variables": {"return_value": ""}, "variables_p": {"return_value": [["int", 0.3665507553780211], ["str", 0.2541895441762737], ["Dict[str, str]", 0.10457706291344292], ["list", 0.07754679758824992]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[51, 4], [56, 64]], "fn_var_ln": {"return_value": [[52, 8], [52, 45]]}, "fn_var_occur": {"return_value": [["mock_get_job_description", "return_value"]]}, "name": "test_poke_on_failure_state", "params": {"mock_get_job_description": "", "self": ""}, "params_descr": {"mock_get_job_description": "", "self": ""}, "params_occur": {"mock_get_job_description": [["mock_get_job_description", "return_value"], ["mock_get_job_description", "assert_called_once_with", "JOB_ID"]], "self": [["self", "batch_sensor", "poke"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_job_description": [["mock.MagicMock", 0.09841400463304582]], "self": []}, "q_name": "TestBatchSensor.test_poke_on_failure_state", "ret_exprs": [], "ret_type": "", "variables": {"return_value": ""}, "variables_p": {"return_value": [["int", 0.3665507553780211], ["str", 0.2541895441762737], ["Dict[str, str]", 0.10457706291344292], ["list", 0.07754679758824992]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[59, 4], [66, 64]], "fn_var_ln": {"return_value": [[60, 8], [60, 45]]}, "fn_var_occur": {"return_value": [["mock_get_job_description", "return_value"]]}, "name": "test_poke_on_invalid_state", "params": {"mock_get_job_description": "", "self": ""}, "params_descr": {"mock_get_job_description": "", "self": ""}, "params_occur": {"mock_get_job_description": [["mock_get_job_description", "return_value"], ["mock_get_job_description", "assert_called_once_with", "JOB_ID"]], "self": [["self", "batch_sensor", "poke"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_job_description": [["mock.MagicMock", 0.09841400463304582]], "self": []}, "q_name": "TestBatchSensor.test_poke_on_invalid_state", "ret_exprs": [], "ret_type": "", "variables": {"return_value": ""}, "variables_p": {"return_value": [["int", 0.3665507553780211], ["str", 0.2541895441762737], ["Dict[str, str]", 0.10457706291344292], ["list", 0.07754679758824992]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[70, 4], [74, 64]], "fn_var_ln": {"return_value": [[72, 8], [72, 45]]}, "fn_var_occur": {"return_value": [["mock_get_job_description", "return_value", "job_status"]]}, "name": "test_poke_on_intermediate_state", "params": {"job_status": "", "mock_get_job_description": "", "self": ""}, "params_descr": {"job_status": "", "mock_get_job_description": "", "self": ""}, "params_occur": {"job_status": [["print", "job_status"], ["mock_get_job_description", "return_value", "job_status"]], "mock_get_job_description": [["mock_get_job_description", "return_value", "job_status"], ["mock_get_job_description", "assert_called_once_with", "JOB_ID"]], "self": [["self", "batch_sensor", "poke", "False"]]}, "params_p": {"args": [], "job_status": [["str", 0.09775531044446296], ["List[List[int]]", 0.0910149623934781]], "kwargs": [], "mock_get_job_description": [["mock.MagicMock", 0.1046024854521642]], "self": []}, "q_name": "TestBatchSensor.test_poke_on_intermediate_state", "ret_exprs": [], "ret_type": "", "variables": {"return_value": ""}, "variables_p": {"return_value": [["int", 0.3181598085906534], ["str", 0.1972902484736916], ["Optional[bytes]", 0.0987604191965543], ["Dict[str, str]", 0.07963387343288912], ["Tuple[int, int]", 0.07739039600094699]]}}], "name": "TestBatchSensor", "q_name": "TestBatchSensor", "variables": {}, "variables_p": {}}, {"cls_lc": [[77, 0], [133, 71]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[78, 4], [83, 9]], "fn_var_ln": {"environment_name": [[79, 8], [79, 29]], "sensor": [[80, 8], [80, 19]]}, "fn_var_occur": {"environment_name": [["self", "environment_name"], ["self", "sensor", "BatchComputeEnvironmentSensor", "task_id", "compute_environment", "self", "environment_name"]], "sensor": [["self", "sensor", "BatchComputeEnvironmentSensor", "task_id", "compute_environment", "self", "environment_name"]]}, "name": "setup_method", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "environment_name"], ["self", "sensor", "BatchComputeEnvironmentSensor", "task_id", "compute_environment", "self", "environment_name"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestBatchComputeEnvironmentSensor.setup_method", "ret_exprs": [], "ret_type": "", "variables": {"environment_name": "", "sensor": ""}, "variables_p": {"environment_name": [["str", 0.9999999999999997]], "sensor": [["str", 0.8079024561481771], ["int", 0.09450731319611154]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[86, 4], [93, 44]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_poke_no_environment", "params": {"mock_batch_client": "", "self": ""}, "params_descr": {"mock_batch_client": "", "self": ""}, "params_occur": {"mock_batch_client": [["mock_batch_client", "describe_compute_environments", "return_value"], ["mock_batch_client", "describe_compute_environments", "assert_called_once_with", "computeEnvironments", "self", "environment_name"]], "self": [["self", "sensor", "poke"], ["mock_batch_client", "describe_compute_environments", "assert_called_once_with", "computeEnvironments", "self", "environment_name"]]}, "params_p": {"args": [], "kwargs": [], "mock_batch_client": [], "self": []}, "q_name": "TestBatchComputeEnvironmentSensor.test_poke_no_environment", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[96, 4], [103, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_poke_valid", "params": {"mock_batch_client": "", "self": ""}, "params_descr": {"mock_batch_client": "", "self": ""}, "params_occur": {"mock_batch_client": [["mock_batch_client", "describe_compute_environments", "return_value"], ["mock_batch_client", "describe_compute_environments", "assert_called_once_with", "computeEnvironments", "self", "environment_name"]], "self": [["self", "sensor", "poke", "True"], ["mock_batch_client", "describe_compute_environments", "assert_called_once_with", "computeEnvironments", "self", "environment_name"]]}, "params_p": {"args": [], "kwargs": [], "mock_batch_client": [], "self": []}, "q_name": "TestBatchComputeEnvironmentSensor.test_poke_valid", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[106, 4], [117, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_poke_running", "params": {"mock_batch_client": "", "self": ""}, "params_descr": {"mock_batch_client": "", "self": ""}, "params_occur": {"mock_batch_client": [["mock_batch_client", "describe_compute_environments", "return_value"], ["mock_batch_client", "describe_compute_environments", "assert_called_once_with", "computeEnvironments", "self", "environment_name"]], "self": [["self", "sensor", "poke", "False"], ["mock_batch_client", "describe_compute_environments", "assert_called_once_with", "computeEnvironments", "self", "environment_name"]]}, "params_p": {"args": [], "kwargs": [], "mock_batch_client": [], "self": []}, "q_name": "TestBatchComputeEnvironmentSensor.test_poke_running", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[120, 4], [133, 71]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_poke_invalid", "params": {"mock_batch_client": "", "self": ""}, "params_descr": {"mock_batch_client": "", "self": ""}, "params_occur": {"mock_batch_client": [["mock_batch_client", "describe_compute_environments", "return_value"], ["mock_batch_client", "describe_compute_environments", "assert_called_once_with", "computeEnvironments", "self", "environment_name"]], "self": [["self", "sensor", "poke"], ["mock_batch_client", "describe_compute_environments", "assert_called_once_with", "computeEnvironments", "self", "environment_name"]]}, "params_p": {"args": [], "kwargs": [], "mock_batch_client": [], "self": []}, "q_name": "TestBatchComputeEnvironmentSensor.test_poke_invalid", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestBatchComputeEnvironmentSensor", "q_name": "TestBatchComputeEnvironmentSensor", "variables": {}, "variables_p": {}}, {"cls_lc": [[136, 0], [199, 61]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[137, 4], [142, 9]], "fn_var_ln": {"job_queue": [[138, 8], [138, 22]], "sensor": [[139, 8], [139, 19]]}, "fn_var_occur": {"job_queue": [["self", "job_queue"], ["self", "sensor", "BatchJobQueueSensor", "task_id", "job_queue", "self", "job_queue"]], "sensor": [["self", "sensor", "BatchJobQueueSensor", "task_id", "job_queue", "self", "job_queue"]]}, "name": "setup_method", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "job_queue"], ["self", "sensor", "BatchJobQueueSensor", "task_id", "job_queue", "self", "job_queue"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestBatchJobQueueSensor.setup_method", "ret_exprs": [], "ret_type": "", "variables": {"job_queue": "", "sensor": ""}, "variables_p": {"job_queue": [["int", 0.8281516938025316], ["str", 0.08634455181116447]], "sensor": [["str", 0.8447106023347166], ["int", 0.085768632513641]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[145, 4], [152, 44]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_poke_no_queue", "params": {"mock_batch_client": "", "self": ""}, "params_descr": {"mock_batch_client": "", "self": ""}, "params_occur": {"mock_batch_client": [["mock_batch_client", "describe_job_queues", "return_value"], ["mock_batch_client", "describe_job_queues", "assert_called_once_with", "jobQueues", "self", "job_queue"]], "self": [["self", "sensor", "poke"], ["mock_batch_client", "describe_job_queues", "assert_called_once_with", "jobQueues", "self", "job_queue"]]}, "params_p": {"args": [], "kwargs": [], "mock_batch_client": [], "self": []}, "q_name": "TestBatchJobQueueSensor.test_poke_no_queue", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[155, 4], [161, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_poke_no_queue_with_treat_non_existing_as_deleted", "params": {"mock_batch_client": "", "self": ""}, "params_descr": {"mock_batch_client": "", "self": ""}, "params_occur": {"mock_batch_client": [["mock_batch_client", "describe_job_queues", "return_value"], ["mock_batch_client", "describe_job_queues", "assert_called_once_with", "jobQueues", "self", "job_queue"]], "self": [["self", "sensor", "treat_non_existing_as_deleted", "True"], ["self", "sensor", "poke", "True"], ["mock_batch_client", "describe_job_queues", "assert_called_once_with", "jobQueues", "self", "job_queue"]]}, "params_p": {"args": [], "kwargs": [], "mock_batch_client": [], "self": []}, "q_name": "TestBatchJobQueueSensor.test_poke_no_queue_with_treat_non_existing_as_deleted", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[164, 4], [169, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_poke_valid", "params": {"mock_batch_client": "", "self": ""}, "params_descr": {"mock_batch_client": "", "self": ""}, "params_occur": {"mock_batch_client": [["mock_batch_client", "describe_job_queues", "return_value"], ["mock_batch_client", "describe_job_queues", "assert_called_once_with", "jobQueues", "self", "job_queue"]], "self": [["self", "sensor", "poke", "True"], ["mock_batch_client", "describe_job_queues", "assert_called_once_with", "jobQueues", "self", "job_queue"]]}, "params_p": {"args": [], "kwargs": [], "mock_batch_client": [], "self": []}, "q_name": "TestBatchJobQueueSensor.test_poke_valid", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[172, 4], [183, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_poke_running", "params": {"mock_batch_client": "", "self": ""}, "params_descr": {"mock_batch_client": "", "self": ""}, "params_occur": {"mock_batch_client": [["mock_batch_client", "describe_job_queues", "return_value"], ["mock_batch_client", "describe_job_queues", "assert_called_once_with", "jobQueues", "self", "job_queue"]], "self": [["self", "sensor", "poke", "False"], ["mock_batch_client", "describe_job_queues", "assert_called_once_with", "jobQueues", "self", "job_queue"]]}, "params_p": {"args": [], "kwargs": [], "mock_batch_client": [], "self": []}, "q_name": "TestBatchJobQueueSensor.test_poke_running", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[186, 4], [199, 61]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_poke_invalid", "params": {"mock_batch_client": "", "self": ""}, "params_descr": {"mock_batch_client": "", "self": ""}, "params_occur": {"mock_batch_client": [["mock_batch_client", "describe_job_queues", "return_value"], ["mock_batch_client", "describe_job_queues", "assert_called_once_with", "jobQueues", "self", "job_queue"]], "self": [["self", "sensor", "poke"], ["mock_batch_client", "describe_job_queues", "assert_called_once_with", "jobQueues", "self", "job_queue"]]}, "params_p": {"args": [], "kwargs": [], "mock_batch_client": [], "self": []}, "q_name": "TestBatchJobQueueSensor.test_poke_invalid", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestBatchJobQueueSensor", "q_name": "TestBatchJobQueueSensor", "variables": {}, "variables_p": {}}, {"cls_lc": [[202, 0], [219, 79]], "cls_var_ln": {"TASK": [[203, 4], [203, 8]]}, "cls_var_occur": {"TASK": []}, "funcs": [{"docstring": {"func": "Asserts that a task is deferred and a BatchSensorTrigger will be fired", "long_descr": "when the BatchSensorAsync is executed.", "ret": null}, "fn_lc": [[205, 4], [213, 97]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_batch_sensor_async", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "TASK", "execute"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestBatchAsyncSensor.test_batch_sensor_async", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Tests that an AirflowException is raised in case of error event", "long_descr": null, "ret": null}, "fn_lc": [[215, 4], [219, 79]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_batch_sensor_async_execute_failure", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "TASK", "execute_complete", "context", "event"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestBatchAsyncSensor.test_batch_sensor_async_execute_failure", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestBatchAsyncSensor", "q_name": "TestBatchAsyncSensor", "variables": {"TASK": ""}, "variables_p": {"TASK": [["str", 0.19999999999999998], ["List[Dict[str, Any]]", 0.09999999999999999], ["bool", 0.09999999999999999], ["Dict[str, Any]", 0.09999999999999999]]}}], "funcs": [], "imports": ["__future__", "annotations", "unittest", "mock", "pytest", "airflow", "exceptions", "AirflowException", "TaskDeferred", "airflow", "providers", "amazon", "aws", "hooks", "batch_client", "BatchClientHook", "airflow", "providers", "amazon", "aws", "sensors", "batch", "BatchComputeEnvironmentSensor", "BatchJobQueueSensor", "BatchSensor", "airflow", "providers", "amazon", "aws", "triggers", "batch", "BatchJobTrigger"], "mod_var_ln": {"AWS_REGION": [[34, 0], [34, 10]], "JOB_ID": [[33, 0], [33, 6]], "TASK_ID": [[32, 0], [32, 7]]}, "mod_var_occur": {"AWS_REGION": [["TASK", "BatchSensor", "task_id", "job_id", "JOB_ID", "region_name", "AWS_REGION", "deferrable", "True"]], "JOB_ID": [["self", "batch_sensor", "BatchSensor", "task_id", "job_id", "JOB_ID"], ["mock_get_job_description", "assert_called_once_with", "JOB_ID"], ["mock_get_job_description", "assert_called_once_with", "JOB_ID"], ["mock_get_job_description", "assert_called_once_with", "JOB_ID"], ["mock_get_job_description", "assert_called_once_with", "JOB_ID"], ["TASK", "BatchSensor", "task_id", "job_id", "JOB_ID", "region_name", "AWS_REGION", "deferrable", "True"]], "TASK_ID": []}, "no_types_annot": {"D": 0, "I": 0, "U": 45}, "session_id": "QAcRXwE0Xm5oE5Xx1aFHVZEap7nCpRNMvKgOMDVYj2s", "set": null, "tc": [false, null], "type_annot_cove": 0.0, "typed_seq": "", "untyped_seq": "", "variables": {"AWS_REGION": "", "JOB_ID": "", "TASK_ID": ""}, "variables_p": {"AWS_REGION": [["str", 0.619584146403181]], "JOB_ID": [["str", 0.7015555856558915], ["Dict[Any, str]", 0.10455881552303221], ["List[str]", 0.09212826989259788]], "TASK_ID": [["str", 0.4], ["Type[str]", 0.1], ["Optional[str]", 0.1]]}}}