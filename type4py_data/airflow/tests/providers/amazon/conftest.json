{"error": null, "response": {"classes": [], "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[32, 0], [43, 19]], "fn_var_ln": {"version": [[34, 8], [34, 15]]}, "fn_var_occur": {"version": [["version", "importlib_metadata", "version"], ["tuple", "map", "int", "version", "split"], ["warnings", "warn", "version", "UserWarning"]]}, "name": "botocore_version", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "botocore_version", "ret_exprs": ["return None", "return tuple(map(int, version.split(\".\")[:3]))", "return None"], "ret_type": "", "ret_type_p": [["Optional[str]", 0.19501058308080144], ["Optional[Literal[\"only_clustered\", \"include_clustered\"]]", 0.11165888985197946], ["Optional[bool]", 0.10421251710151427], ["bool", 0.1023620604845176], ["Optional[float]", 0.0985212327173812]], "variables": {"version": ""}, "variables_p": {"version": [["str", 0.7857660204453282], ["bytes", 0.11509242203348514]]}}, {"docstring": {"func": "Filter known botocore future warnings.", "long_descr": null, "ret": null}, "fn_lc": [[47, 0], [62, 13]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "filter_botocore_warnings", "params": {"botocore_version": ""}, "params_descr": {"botocore_version": ""}, "params_occur": {"botocore_version": [["botocore_version", "botocore_version"]]}, "params_p": {"args": [], "botocore_version": [["int", 0.3139066675712546], ["str", 0.17951106806977957], ["float", 0.10609908931690017]], "kwargs": []}, "q_name": "filter_botocore_warnings", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[70, 4], [73, 26]], "fn_var_ln": {"config": [[71, 8], [71, 14]]}, "fn_var_occur": {"config": [["config", "tmp_dir", "name"], ["config", "touch"], ["str", "config"]]}, "name": "empty_config", "params": {"name": "builtins.str"}, "params_descr": {"name": ""}, "params_occur": {"name": [["config", "tmp_dir", "name"]]}, "params_p": {"args": [], "kwargs": [], "name": [["bool", 0.30712266606950855], ["str", 0.288743945452539], ["Optional[str]", 0.1900599718427482], ["Container", 0.11694869845196902]]}, "q_name": "aws_testing_env_vars.<locals>.empty_config", "ret_exprs": ["return str(config)"], "ret_type": "builtins.str", "ret_type_p": [["str", 0.9012189833784712]], "variables": {"config": ""}, "variables_p": {"config": []}}, {"docstring": {"func": "Session scoped fixture, return mock AWS specific environment variables for unit tests.", "long_descr": null, "ret": null}, "fn_lc": [[66, 0], [89, 5]], "fn_var_ln": {"tmp_dir": [[68, 4], [68, 11]]}, "fn_var_occur": {"tmp_dir": []}, "name": "aws_testing_env_vars", "params": {"tmp_path_factory": ""}, "params_descr": {"tmp_path_factory": ""}, "params_occur": {"tmp_path_factory": []}, "params_p": {"args": [], "kwargs": [], "tmp_path_factory": [["str", 0.5363061427997511], ["bool", 0.13528447269948385], ["Iterable[str]", 0.10354501876741744], ["List[str]", 0.06681049704758234]]}, "q_name": "aws_testing_env_vars", "ret_exprs": ["return { # Mock values for access_key, secret_key and token \"AWS_ACCESS_KEY_ID\": \"airflow-testing\", \"AWS_SECRET_ACCESS_KEY\": \"airflow-testing\", \"AWS_SESSION_TOKEN\": \"airflow-testing\", \"AWS_SECURITY_TOKEN\": \"airflow-testing\", # Set default region as N.Virginia (eu-west-1). # Otherwise some unit tests might fail if this sets to other region. \"AWS_DEFAULT_REGION\": \"us-east-1\", \"AWS_REGION\": \"us-east-1\", # Create empty configuration file \"AWS_SHARED_CREDENTIALS_FILE\": empty_config(\"aws_shared_credentials_file\"), \"AWS_CONFIG_FILE\": empty_config(\"aws_config_file\"), \"BOTO_CONFIG\": empty_config(\"legacy_boto2_config.cfg\"),}"], "ret_type": "", "ret_type_p": [["List[str]", 0.3289333146030464], ["Set[str]", 0.17665867863187878], ["tuple", 0.10491031171435326], ["Dict[str, str]", 0.096916390029902], ["Dict[str, Any]", 0.09384624407599536]], "variables": {"tmp_dir": ""}, "variables_p": {"tmp_dir": [["str", 0.6], ["Optional[str]", 0.09999999999999999]]}}, {"docstring": {"func": "Change AWS configurations (env vars) before start each test.", "long_descr": "1. Remove all existed variables which prefixed by AWS.\n    It might be some credentials, botocore configurations, etc.\n2. Use pre-defined variables for unit testing.", "ret": null}, "fn_lc": [[93, 0], [105, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "set_default_aws_settings", "params": {"aws_testing_env_vars": "", "monkeypatch": ""}, "params_descr": {"aws_testing_env_vars": "", "monkeypatch": ""}, "params_occur": {"aws_testing_env_vars": [["aws_testing_env_vars", "items"]], "monkeypatch": [["monkeypatch", "delenv", "env_name", "raising", "False"], ["monkeypatch", "setenv", "env_name", "value"]]}, "params_p": {"args": [], "aws_testing_env_vars": [["str", 0.40618953242818395], ["Dict[str, Any]", 0.10869264737009157], ["dict", 0.09323693174814549]], "kwargs": [], "monkeypatch": [["str", 0.633756406788367], ["Optional[bool]", 0.09499290796255454], ["bool", 0.08899459698904452], ["dict", 0.08899459698904452]]}, "q_name": "set_default_aws_settings", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "imports": ["__future__", "annotations", "os", "warnings", "importlib_metadata", "importlib", "metadata", "importlib_metadata", "pytest"], "mod_var_ln": {}, "mod_var_occur": {}, "no_types_annot": {"D": 2, "I": 0, "U": 11}, "session_id": "wAs41bM7uwjUs7qWQwPbU0Wgdwkpm2zve3vMCuTQtls", "set": null, "tc": [false, null], "type_annot_cove": 0.15, "typed_seq": "", "untyped_seq": "", "variables": {}, "variables_p": {}}}