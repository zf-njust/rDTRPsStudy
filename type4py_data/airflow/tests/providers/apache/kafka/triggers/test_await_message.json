{"error": null, "response": {"classes": [{"cls_lc": [[38, 0], [43, 20]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[39, 4], [40, 12]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "__init__", "params": {"args": "", "kwargs": ""}, "params_descr": {"args": "", "kwargs": ""}, "params_occur": {"args": [], "kwargs": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "MockedMessage.__init__", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[42, 4], [43, 20]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "error", "params": {"args": "", "kwargs": ""}, "params_descr": {"args": "", "kwargs": ""}, "params_occur": {"args": [], "kwargs": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "MockedMessage.error", "ret_exprs": ["return False"], "ret_type": "", "ret_type_p": [["bool", 0.9999999999999999]], "variables": {}, "variables_p": {}}], "name": "MockedMessage", "q_name": "MockedMessage", "variables": {}, "variables_p": {}}, {"cls_lc": [[46, 0], [54, 19]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[47, 4], [48, 12]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "__init__", "params": {"args": "", "kwargs": ""}, "params_descr": {"args": "", "kwargs": ""}, "params_occur": {"args": [], "kwargs": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "MockedConsumer.__init__", "ret_exprs": [], "ret_type": "None", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[50, 4], [51, 30]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "poll", "params": {"args": "", "kwargs": ""}, "params_descr": {"args": "", "kwargs": ""}, "params_occur": {"args": [], "kwargs": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "MockedConsumer.poll", "ret_exprs": ["return MockedMessage()"], "ret_type": "", "ret_type_p": [], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[53, 4], [54, 19]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "commit", "params": {"args": "", "kwargs": ""}, "params_descr": {"args": "", "kwargs": ""}, "params_occur": {"args": [], "kwargs": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "MockedConsumer.commit", "ret_exprs": ["return True"], "ret_type": "", "ret_type_p": [["bool", 0.9999999999999999]], "variables": {}, "variables_p": {}}], "name": "MockedConsumer", "q_name": "MockedConsumer", "variables": {}, "variables_p": {}}, {"cls_lc": [[57, 0], [129, 39]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[58, 4], [67, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "setup_method", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestTrigger.setup_method", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[69, 4], [93, 9]], "fn_var_ln": {"classpath": [[82, 8], [82, 17]], "kwargs": [[82, 19], [82, 25]], "trigger": [[70, 8], [70, 15]]}, "fn_var_occur": {"classpath": [["classpath", "kwargs", "trigger", "serialize"]], "kwargs": [["classpath", "kwargs", "trigger", "serialize"], ["kwargs", "dict", "kafka_config_id", "apply_function", "topics", "apply_function_args", "apply_function_kwargs", "dict", "one", "two", "poll_timeout", "poll_interval"]], "trigger": [["trigger", "AwaitMessageTrigger", "kafka_config_id", "apply_function", "topics", "apply_function_args", "apply_function_kwargs", "dict", "one", "two", "poll_timeout", "poll_interval"], ["isinstance", "trigger", "AwaitMessageTrigger"], ["classpath", "kwargs", "trigger", "serialize"]]}, "name": "test_trigger_serialization", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestTrigger.test_trigger_serialization", "ret_exprs": [], "ret_type": "", "variables": {"classpath": "", "kwargs": "", "trigger": ""}, "variables_p": {"classpath": [["Set[str]", 0.4999999999750701], ["int", 0.49999999996228883], ["Dict[str, Union[int, str]]", 1.582796261262258e-11], ["List[str]", 1.3730011143514454e-11], ["str", 1.0971499556494418e-11], ["bool", 1.0865339793385232e-11]], "kwargs": [["list", 0.3370721206274089], ["KeysView[str]", 0.2312223938259036], ["Dict[str, Dict[str, str]]", 0.09940930768191604], ["dict", 0.09077702128904008], ["Dict[Any, List[Any]]", 0.08063222127243158], ["Dict[str, Any]", 0.07722315064618525]], "trigger": [["str", 0.8051070307590024], ["int", 0.1004607261639441]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[96, 4], [111, 39]], "fn_var_ln": {"task": [[108, 8], [108, 12]], "trigger": [[100, 8], [100, 15]]}, "fn_var_occur": {"task": [["task", "asyncio", "create_task", "trigger", "run", "__anext__"], ["task", "done", "True"]], "trigger": [["trigger", "AwaitMessageTrigger", "kafka_config_id", "apply_function", "topics", "poll_timeout", "poll_interval"], ["task", "asyncio", "create_task", "trigger", "run", "__anext__"]]}, "name": "test_trigger_run_good", "params": {"mocker": "", "self": ""}, "params_descr": {"mocker": "", "self": ""}, "params_occur": {"mocker": [["mocker", "patch", "object", "KafkaConsumerHook", "return_value", "MockedConsumer"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mocker": [["core.models.Recipe", 0.16504198324873656], ["int", 0.123978970870175]], "self": []}, "q_name": "TestTrigger.test_trigger_run_good", "ret_exprs": [], "ret_type": "", "variables": {"task": "", "trigger": ""}, "variables_p": {"task": [["RuntimeError", 0.09683070525385769]], "trigger": [["str", 0.4477960855059669], ["float", 0.25721237017761495]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[114, 4], [129, 39]], "fn_var_ln": {"task": [[126, 8], [126, 12]], "trigger": [[118, 8], [118, 15]]}, "fn_var_occur": {"task": [["task", "asyncio", "create_task", "trigger", "run", "__anext__"], ["task", "done", "False"]], "trigger": [["trigger", "AwaitMessageTrigger", "kafka_config_id", "apply_function", "topics", "poll_timeout", "poll_interval"], ["task", "asyncio", "create_task", "trigger", "run", "__anext__"]]}, "name": "test_trigger_run_bad", "params": {"mocker": "", "self": ""}, "params_descr": {"mocker": "", "self": ""}, "params_occur": {"mocker": [["mocker", "patch", "object", "KafkaConsumerHook", "return_value", "MockedConsumer"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mocker": [["core.models.Recipe", 0.16504198324873656], ["int", 0.123978970870175]], "self": []}, "q_name": "TestTrigger.test_trigger_run_bad", "ret_exprs": [], "ret_type": "", "variables": {"task": "", "trigger": ""}, "variables_p": {"task": [["asyncio.tasks.Task[None]", 0.19643276539820578], ["List[str]", 0.11367958078351113], ["Dict[str, int]", 0.09946648513600341], ["kitovu.utils.JsonType", 0.08595370781491674], ["asyncio.tasks.Task[Any]", 0.0829218957480618]], "trigger": [["str", 0.4477960855059669], ["float", 0.25721237017761495]]}}], "name": "TestTrigger", "q_name": "TestTrigger", "variables": {}, "variables_p": {}}], "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[30, 0], [31, 16]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "apply_function_false", "params": {"message": ""}, "params_descr": {"message": ""}, "params_occur": {"message": []}, "params_p": {"args": [], "kwargs": [], "message": [["django.db.backends.postgresql_psycopg2.schema.DatabaseSchemaEditor", 0.1987283149454279], ["str", 0.0861351890629883], ["List[object]", 0.0861351890629883]]}, "q_name": "apply_function_false", "ret_exprs": ["return False"], "ret_type": "", "ret_type_p": [["bool", 0.9999999999999998]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[34, 0], [35, 15]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "apply_function_true", "params": {"message": ""}, "params_descr": {"message": ""}, "params_occur": {"message": []}, "params_p": {"args": [], "kwargs": [], "message": [["List[str]", 0.08145160751091948], ["str", 0.06984985711840595], ["django.db.backends.postgresql_psycopg2.schema.DatabaseSchemaEditor", 0.06984985711840595], ["List[object]", 0.06984985711840595]]}, "q_name": "apply_function_true", "ret_exprs": ["return True"], "ret_type": "", "ret_type_p": [["bool", 1.0]], "variables": {}, "variables_p": {}}], "imports": ["__future__", "annotations", "asyncio", "json", "pytest", "airflow", "models", "Connection", "airflow", "providers", "apache", "kafka", "hooks", "consume", "KafkaConsumerHook", "airflow", "providers", "apache", "kafka", "triggers", "await_message", "AwaitMessageTrigger", "airflow", "utils", "db"], "mod_var_ln": {}, "mod_var_occur": {}, "no_types_annot": {"D": 1, "I": 0, "U": 31}, "session_id": "-FdKpRNl9wAn-wP944PQrLSvDzZXlM25i0YPgY1tvIU", "set": null, "tc": [false, null], "type_annot_cove": 0.03, "typed_seq": "", "untyped_seq": "", "variables": {}, "variables_p": {}}}