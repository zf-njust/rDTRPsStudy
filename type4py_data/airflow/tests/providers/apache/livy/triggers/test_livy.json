{"error": null, "response": {"classes": [{"cls_lc": [[30, 0], [202, 39]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": "Asserts that the TaskStateTrigger correctly serializes its arguments", "long_descr": "and classpath.", "ret": null}, "fn_lc": [[31, 4], [49, 9]], "fn_var_ln": {"classpath": [[39, 8], [39, 17]], "kwargs": [[39, 19], [39, 25]], "trigger": [[36, 8], [36, 15]]}, "fn_var_occur": {"classpath": [["classpath", "kwargs", "trigger", "serialize"]], "kwargs": [["classpath", "kwargs", "trigger", "serialize"], ["kwargs", "LivyHook", "default_conn_name", "None", "None", "None"]], "trigger": [["trigger", "LivyTrigger", "batch_id", "spark_params", "livy_conn_id", "LivyHook", "default_conn_name", "polling_interval"], ["classpath", "kwargs", "trigger", "serialize"]]}, "name": "test_livy_trigger_serialization", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestLivyTrigger.test_livy_trigger_serialization", "ret_exprs": [], "ret_type": "", "variables": {"classpath": "", "kwargs": "", "trigger": ""}, "variables_p": {"classpath": [["Set[str]", 0.4999999999750701], ["int", 0.49999999996228883], ["Dict[str, Union[int, str]]", 1.582796261262258e-11], ["List[str]", 1.3730011143514454e-11], ["str", 1.0971499556494418e-11], ["bool", 1.0865339793385232e-11]], "kwargs": [["Set[str]", 0.195388384048143], ["Dict[str, str]", 0.09556851272342018], ["List[Dict[str, Any]]", 0.09061134379806914], ["dict", 0.08841394225257027], ["Union[dict, List[Any]]", 0.08282663446459469], ["int", 0.08042349438301587]], "trigger": [["List[str]", 0.13941651775544364], ["List[int]", 0.13381900961837992], ["str", 0.11325461503894856], ["Dict[str, Any]", 0.06591611642193687], ["int", 0.06552894050899939], ["Dict[str, Union[Any, Any, Any, Any]]", 0.06552894050899939]]}}, {"docstring": {"func": "Test if the task ran in the triggerer successfully with poll interval=0.", "long_descr": "In the case when polling_interval=0, it should return the batch_id", "ret": null}, "fn_lc": [[53, 4], [69, 9]], "fn_var_ln": {"actual": [[63, 8], [63, 14]], "generator": [[62, 8], [62, 17]], "return_value": [[58, 8], [58, 46]], "trigger": [[59, 8], [59, 15]]}, "fn_var_occur": {"actual": [["actual", "generator", "asend", "None"], ["TriggerEvent", "None", "actual"]], "generator": [["generator", "trigger", "run"], ["actual", "generator", "asend", "None"]], "return_value": [["mock_poll_for_termination", "return_value"]], "trigger": [["trigger", "LivyTrigger", "batch_id", "spark_params", "livy_conn_id", "LivyHook", "default_conn_name", "polling_interval"], ["generator", "trigger", "run"]]}, "name": "test_livy_trigger_run_with_no_poll_interval", "params": {"mock_poll_for_termination": "", "self": ""}, "params_descr": {"mock_poll_for_termination": "", "self": ""}, "params_occur": {"mock_poll_for_termination": [["mock_poll_for_termination", "return_value"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_poll_for_termination": [["mock.Mock", 0.29706842483234475]], "self": []}, "q_name": "TestLivyTrigger.test_livy_trigger_run_with_no_poll_interval", "ret_exprs": [], "ret_type": "", "variables": {"actual": "", "generator": "", "return_value": "", "trigger": ""}, "variables_p": {"actual": [["str", 0.20696225889645015], ["Optional[str]", 0.10418006875251312], ["int", 0.10408978380593048], ["List[None]", 0.09668966366624092], ["Dict[str, Any]", 0.09529384069258018], ["Union[Literal, Literal]", 0.07690368107961369]], "generator": [["kornia.augmentation.base._BasicAugmentationBase", 0.16174662751959534], ["Union[Literal, Literal]", 0.12016314415089882]], "return_value": [["list", 0.2310538081472759], ["float", 0.2148768641748539], ["List[Tuple[str, str, bytes]]", 0.09790772925240514], ["Tuple[int, int]", 0.09267950398663324], ["int", 0.09266991817001902], ["tests.mock.zwave.MockNode", 0.08900189597391767], ["List[str]", 0.08765749204567162]], "trigger": [["str", 0.23032690151395854], ["List[int]", 0.15692555282985038]]}}, {"docstring": {"func": "Test if the task ran in the triggerer successfully with poll interval>0. In the case when", "long_descr": "polling_interval > 0, it should return a success or failure status.", "ret": null}, "fn_lc": [[73, 4], [85, 60]], "fn_var_ln": {"actual": [[84, 8], [84, 14]], "generator": [[83, 8], [83, 17]], "return_value": [[78, 8], [78, 46]], "trigger": [[79, 8], [79, 15]]}, "fn_var_occur": {"actual": [["actual", "generator", "asend", "None"], ["TriggerEvent", "actual"]], "generator": [["generator", "trigger", "run"], ["actual", "generator", "asend", "None"]], "return_value": [["mock_poll_for_termination", "return_value"]], "trigger": [["trigger", "LivyTrigger", "batch_id", "spark_params", "livy_conn_id", "LivyHook", "default_conn_name", "polling_interval"], ["generator", "trigger", "run"]]}, "name": "test_livy_trigger_run_with_poll_interval_success", "params": {"mock_poll_for_termination": "", "self": ""}, "params_descr": {"mock_poll_for_termination": "", "self": ""}, "params_occur": {"mock_poll_for_termination": [["mock_poll_for_termination", "return_value"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_poll_for_termination": [["mock.Mock", 0.25761154535793174]], "self": []}, "q_name": "TestLivyTrigger.test_livy_trigger_run_with_poll_interval_success", "ret_exprs": [], "ret_type": "", "variables": {"actual": "", "generator": "", "return_value": "", "trigger": ""}, "variables_p": {"actual": [["int", 0.19412407945911686], ["Tuple[Any, Any, Any, Any, Any, Any, Any]", 0.09850073403783119], ["Dict[str, float]", 0.08348205718629689], ["List[int]", 0.08277127376192583], ["Optional[str]", 0.07748136730496737]], "generator": [["kornia.augmentation.base._BasicAugmentationBase", 0.16174662751959534], ["Union[Literal, Literal]", 0.12016314415089882]], "return_value": [["list", 0.2310538081472759], ["float", 0.2148768641748539], ["List[Tuple[str, str, bytes]]", 0.09790772925240514], ["Tuple[int, int]", 0.09267950398663324], ["int", 0.09266991817001902], ["tests.mock.zwave.MockNode", 0.08900189597391767], ["List[str]", 0.08765749204567162]], "trigger": [["str", 0.23032690151395854], ["List[int]", 0.15692555282985038]]}}, {"docstring": {"func": "Test if the task in the trigger returned an error when poll_for_termination returned error.", "long_descr": null, "ret": null}, "fn_lc": [[89, 4], [98, 56]], "fn_var_ln": {"return_value": [[91, 8], [91, 46]], "task": [[96, 8], [96, 12]], "trigger": [[92, 8], [92, 15]]}, "fn_var_occur": {"return_value": [["mock_poll_for_termination", "return_value"]], "task": [["task", "i", "i", "trigger", "run"], ["len", "task"], ["TriggerEvent", "task"]], "trigger": [["trigger", "LivyTrigger", "batch_id", "spark_params", "livy_conn_id", "LivyHook", "default_conn_name", "polling_interval"], ["task", "i", "i", "trigger", "run"]]}, "name": "test_livy_trigger_run_with_poll_interval_error", "params": {"mock_poll_for_termination": "", "self": ""}, "params_descr": {"mock_poll_for_termination": "", "self": ""}, "params_occur": {"mock_poll_for_termination": [["mock_poll_for_termination", "return_value"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_poll_for_termination": [["mock.Mock", 0.28749920857005223]], "self": []}, "q_name": "TestLivyTrigger.test_livy_trigger_run_with_poll_interval_error", "ret_exprs": [], "ret_type": "", "variables": {"return_value": "", "task": "", "trigger": ""}, "variables_p": {"return_value": [["list", 0.2310538081472759], ["float", 0.2148768641748539], ["List[Tuple[str, str, bytes]]", 0.09790772925240514], ["Tuple[int, int]", 0.09267950398663324], ["int", 0.09266991817001902], ["tests.mock.zwave.MockNode", 0.08900189597391767], ["List[str]", 0.08765749204567162]], "task": [["int", 0.26408094420020856], ["str", 0.24454604595886914], ["List[int]", 0.1834850492947484]], "trigger": [["bool", 0.43075686568823496], ["List[int]", 0.13754249856328424], ["float", 0.086151373137647], ["str", 0.08235896895782906]]}}, {"docstring": {"func": "Test if the task in the trigger failed with a connection error when no connection is mocked.", "long_descr": null, "ret": null}, "fn_lc": [[101, 4], [120, 9]], "fn_var_ln": {"task": [[107, 8], [107, 12]], "trigger": [[103, 8], [103, 15]]}, "fn_var_occur": {"task": [["task", "i", "i", "trigger", "run"], ["len", "task"], ["TriggerEvent", "None", "task"]], "trigger": [["trigger", "LivyTrigger", "batch_id", "spark_params", "livy_conn_id", "LivyHook", "default_conn_name", "polling_interval"], ["task", "i", "i", "trigger", "run"]]}, "name": "test_livy_trigger_run_with_exception", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestLivyTrigger.test_livy_trigger_run_with_exception", "ret_exprs": [], "ret_type": "", "variables": {"task": "", "trigger": ""}, "variables_p": {"task": [["int", 1.0]], "trigger": [["bool", 0.43075686568823496], ["List[int]", 0.13754249856328424], ["float", 0.086151373137647], ["str", 0.08235896895782906]]}}, {"docstring": {"func": "Test if the poll_for_termination() in the trigger failed with a ClientConnectionError", "long_descr": "when no connection is mocked.", "ret": null}, "fn_lc": [[123, 4], [133, 49]], "fn_var_ln": {"trigger": [[128, 8], [128, 15]]}, "fn_var_occur": {"trigger": [["trigger", "LivyTrigger", "batch_id", "spark_params", "livy_conn_id", "LivyHook", "default_conn_name", "polling_interval"], ["trigger", "poll_for_termination"]]}, "name": "test_livy_trigger_poll_for_termination_with_client_error", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestLivyTrigger.test_livy_trigger_poll_for_termination_with_client_error", "ret_exprs": [], "ret_type": "", "variables": {"trigger": ""}, "variables_p": {"trigger": [["str", 0.23032690151395854], ["List[int]", 0.15692555282985038]]}}, {"docstring": {"func": "Test if the poll_for_termination() in the triggerer returned success response when get_batch_state()", "long_descr": "runs successfully.", "ret": null}, "fn_lc": [[138, 4], [158, 9]], "fn_var_ln": {"return_value": [[146, 8], [146, 41]], "task": [[151, 8], [151, 12]], "trigger": [[147, 8], [147, 15]]}, "fn_var_occur": {"return_value": [["mock_get_batch_state", "return_value", "BatchState", "SUCCESS"], ["mock_dump_batch_logs", "return_value"]], "task": [["task", "trigger", "poll_for_termination"]], "trigger": [["trigger", "LivyTrigger", "batch_id", "spark_params", "livy_conn_id", "LivyHook", "default_conn_name", "polling_interval"], ["task", "trigger", "poll_for_termination"]]}, "name": "test_livy_trigger_poll_for_termination_success", "params": {"mock_dump_batch_logs": "", "mock_get_batch_state": "", "self": ""}, "params_descr": {"mock_dump_batch_logs": "", "mock_get_batch_state": "", "self": ""}, "params_occur": {"mock_dump_batch_logs": [["mock_dump_batch_logs", "return_value"]], "mock_get_batch_state": [["mock_get_batch_state", "return_value", "BatchState", "SUCCESS"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_dump_batch_logs": [["mock.Mock", 0.30324160192273003], ["mock.MagicMock", 0.10341217672540268]], "mock_get_batch_state": [["mock.MagicMock", 0.09670010884472667]], "self": []}, "q_name": "TestLivyTrigger.test_livy_trigger_poll_for_termination_success", "ret_exprs": [], "ret_type": "", "variables": {"return_value": "", "task": "", "trigger": ""}, "variables_p": {"return_value": [["Dict[str, Dict[str, Any]]", 0.22103482008762457], ["Dict[str, int]", 0.07456829254147533], ["Dict[str, Union[Any, Any, Any, Any]]", 0.07338655731242692]], "task": [["str", 0.49931840579826064], ["dict", 0.29440772649687985], ["bytes", 0.10722916660358038], ["List[str]", 0.09904470110127891]], "trigger": [["bool", 0.34594030012166405], ["List[int]", 0.1688243328055763], ["Dict[str, str]", 0.07844318209340441], ["str", 0.07348328285563915], ["float", 0.06918806002433281]]}}, {"docstring": {"func": "Test if the poll_for_termination() in the trigger returned error response when get_batch_state()", "long_descr": "failed.", "ret": null}, "fn_lc": [[163, 4], [181, 9]], "fn_var_ln": {"return_value": [[169, 8], [169, 41]], "task": [[174, 8], [174, 12]], "trigger": [[170, 8], [170, 15]]}, "fn_var_occur": {"return_value": [["mock_get_batch_state", "return_value", "BatchState", "ERROR"], ["mock_dump_batch_logs", "return_value"]], "task": [["task", "trigger", "poll_for_termination"]], "trigger": [["trigger", "LivyTrigger", "batch_id", "spark_params", "livy_conn_id", "LivyHook", "default_conn_name", "polling_interval"], ["task", "trigger", "poll_for_termination"]]}, "name": "test_livy_trigger_poll_for_termination_error", "params": {"mock_dump_batch_logs": "", "mock_get_batch_state": "", "self": ""}, "params_descr": {"mock_dump_batch_logs": "", "mock_get_batch_state": "", "self": ""}, "params_occur": {"mock_dump_batch_logs": [["mock_dump_batch_logs", "return_value"]], "mock_get_batch_state": [["mock_get_batch_state", "return_value", "BatchState", "ERROR"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_dump_batch_logs": [["mock.MagicMock", 0.1033042426007694]], "mock_get_batch_state": [], "self": []}, "q_name": "TestLivyTrigger.test_livy_trigger_poll_for_termination_error", "ret_exprs": [], "ret_type": "", "variables": {"return_value": "", "task": "", "trigger": ""}, "variables_p": {"return_value": [["Dict[str, Dict[str, Any]]", 0.20089348018282804], ["Dict[str, Union[Any, Any, Any, Any]]", 0.08335791422215047], ["List[Union[Any, Any, Any]]", 0.08335791422215047]], "task": [["str", 0.49931840579826064], ["dict", 0.29440772649687985], ["bytes", 0.10722916660358038], ["List[str]", 0.09904470110127891]], "trigger": [["bool", 0.34594030012166405], ["List[int]", 0.1688243328055763], ["Dict[str, str]", 0.07844318209340441], ["str", 0.07348328285563915], ["float", 0.06918806002433281]]}}, {"docstring": {"func": "Test if the poll_for_termination() in the trigger is still polling when get_batch_state() returned", "long_descr": "NOT_STARTED.", "ret": null}, "fn_lc": [[186, 4], [202, 39]], "fn_var_ln": {"return_value": [[192, 8], [192, 41]], "task": [[197, 8], [197, 12]], "trigger": [[193, 8], [193, 15]]}, "fn_var_occur": {"return_value": [["mock_get_batch_state", "return_value", "BatchState", "NOT_STARTED"], ["mock_dump_batch_logs", "return_value"]], "task": [["task", "asyncio", "create_task", "trigger", "poll_for_termination"], ["task", "done", "False"]], "trigger": [["trigger", "LivyTrigger", "batch_id", "spark_params", "livy_conn_id", "LivyHook", "default_conn_name", "polling_interval"], ["task", "asyncio", "create_task", "trigger", "poll_for_termination"]]}, "name": "test_livy_trigger_poll_for_termination_state", "params": {"mock_dump_batch_logs": "", "mock_get_batch_state": "", "self": ""}, "params_descr": {"mock_dump_batch_logs": "", "mock_get_batch_state": "", "self": ""}, "params_occur": {"mock_dump_batch_logs": [["mock_dump_batch_logs", "return_value"]], "mock_get_batch_state": [["mock_get_batch_state", "return_value", "BatchState", "NOT_STARTED"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_dump_batch_logs": [["mock.Mock", 0.30259822613887716], ["mock.MagicMock", 0.10925440148747982]], "mock_get_batch_state": [["mock.MagicMock", 0.09797990057327136]], "self": []}, "q_name": "TestLivyTrigger.test_livy_trigger_poll_for_termination_state", "ret_exprs": [], "ret_type": "", "variables": {"return_value": "", "task": "", "trigger": ""}, "variables_p": {"return_value": [["str", 0.23109846555267008], ["List[Dict[str, Any]]", 0.1538457428287659], ["int", 0.09971809102611462], ["Dict[str, Dict[str, Any]]", 0.08657962539894734], ["Dict[str, int]", 0.08496425945153073], ["float", 0.07912547669102207], ["Dict[str, Union[Any, Any, Any]]", 0.07609246433693477], ["Dict[str, Union[Any, Any, str]]", 0.07565332954151073]], "task": [["List[str]", 0.14429537070101073], ["Dict[str, Type[Any]]", 0.10909377990665468], ["Callable", 0.10193303295797922], ["list", 0.0940628412406796], ["Dict[str, Any]", 0.08335545366210212]], "trigger": [["str", 0.20301748148049806], ["list", 0.08362763642179284]]}}], "name": "TestLivyTrigger", "q_name": "TestLivyTrigger", "variables": {}, "variables_p": {}}], "funcs": [], "imports": ["__future__", "annotations", "asyncio", "unittest", "mock", "pytest", "aiohttp", "ClientConnectionError", "airflow", "providers", "apache", "livy", "hooks", "livy", "BatchState", "LivyHook", "airflow", "providers", "apache", "livy", "triggers", "livy", "LivyTrigger", "airflow", "triggers", "base", "TriggerEvent"], "mod_var_ln": {}, "mod_var_occur": {}, "no_types_annot": {"D": 0, "I": 0, "U": 44}, "session_id": "fdGSVtqCsn9iV_um7B2_pFXK9d2gcyEzV1dspkr907Y", "set": null, "tc": [false, null], "type_annot_cove": 0.0, "typed_seq": "", "untyped_seq": "", "variables": {}, "variables_p": {}}}