{"error": null, "response": {"classes": [{"cls_lc": [[59, 0], [62, 26]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[60, 4], [62, 26]], "fn_var_ln": {"iterable": [[62, 8], [62, 21]]}, "fn_var_occur": {"iterable": [["self", "iterable"]]}, "name": "__init__", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "iterable"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "EmptyMockConnectionCursor.__init__", "ret_exprs": [], "ret_type": "", "variables": {"iterable": ""}, "variables_p": {"iterable": [["str", 0.30000000000000004], ["Dict[str, Any]", 0.1], ["dict", 0.1], ["int", 0.1]]}}], "name": "EmptyMockConnectionCursor", "q_name": "EmptyMockConnectionCursor", "variables": {}, "variables_p": {}}, {"cls_lc": [[65, 0], [336, 88]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[69, 4], [124, 9]], "fn_var_ln": {"hive_cmd": [[90, 8], [90, 16]], "hook": [[87, 12], [87, 16]], "mock_subprocess": [[70, 8], [70, 23]], "return_value": [[72, 8], [72, 34]]}, "fn_var_occur": {"hive_cmd": [["mock_popen", "assert_called_with", "hive_cmd", "stdout", "mock_subprocess", "PIPE", "stderr", "mock_subprocess", "STDOUT", "cwd", "close_fds", "True"]], "hook": [["hook", "MockHiveCliHook"], ["hook", "run_cli"]], "mock_subprocess": [["mock_subprocess", "MockSubProcess"], ["mock_popen", "return_value", "mock_subprocess"], ["mock_popen", "assert_called_with", "hive_cmd", "stdout", "mock_subprocess", "PIPE", "stderr", "mock_subprocess", "STDOUT", "cwd", "close_fds", "True"]], "return_value": [["mock_popen", "return_value", "mock_subprocess"], ["mock_temp_dir", "return_value"]]}, "name": "test_run_cli", "params": {"mock_popen": "", "mock_temp_dir": "", "self": ""}, "params_descr": {"mock_popen": "", "mock_temp_dir": "", "self": ""}, "params_occur": {"mock_popen": [["mock_popen", "return_value", "mock_subprocess"], ["mock_popen", "assert_called_with", "hive_cmd", "stdout", "mock_subprocess", "PIPE", "stderr", "mock_subprocess", "STDOUT", "cwd", "close_fds", "True"]], "mock_temp_dir": [["mock_temp_dir", "return_value"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_popen": [], "mock_temp_dir": [], "self": []}, "q_name": "TestHiveCliHook.test_run_cli", "ret_exprs": [], "ret_type": "", "variables": {"hive_cmd": "", "hook": "", "mock_subprocess": "", "return_value": ""}, "variables_p": {"hive_cmd": [["str", 0.5032337893350641], ["Dict[str, Union[int, str]]", 0.1883707439939754], ["Union[Literal, str]", 0.1538236420023181], ["Dict[str, Union[Any, Any]]", 0.07788951647578213]], "hook": [["list", 0.37935904148022725], ["Dict[int, Dict[str, Any]]", 0.15798697766592365], ["libsoundtouch.tests.test_libsoundtouch.MockDevice", 0.10162168141308439], ["str", 0.07899348883296183], ["List[str]", 0.07638513874452256]], "mock_subprocess": [["Dict[str, Tuple[str, Any]]", 0.209635858390889]], "return_value": [["str", 0.7804479198572908], ["Dict[str, Union[int, str]]", 0.13577990220152364]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[126, 4], [131, 89]], "fn_var_ln": {"hook": [[128, 12], [128, 16]]}, "fn_var_occur": {"hook": [["hook", "InvalidHiveCliHook"], ["hook", "run_cli"]]}, "name": "test_hive_cli_hook_invalid_schema", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestHiveCliHook.test_hive_cli_hook_invalid_schema", "ret_exprs": [], "ret_type": "", "variables": {"hook": ""}, "variables_p": {"hook": [["dict", 0.09010999958756341], ["List[List[int]]", 0.08368290034443152], ["str", 0.08289266150320158]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[134, 4], [227, 46]], "fn_var_ln": {"dag_id_ctx_var_name": [[141, 8], [141, 27]], "dag_run_id_ctx_var_name": [[146, 8], [146, 31]], "execution_date_ctx_var_name": [[143, 8], [143, 35]], "hook": [[211, 12], [211, 16]], "hql": [[135, 8], [135, 11]], "mock_output": [[150, 8], [150, 19]], "output": [[214, 12], [214, 18]], "process_inputs": [[215, 12], [215, 26]], "return_value": [[212, 12], [212, 35]], "task_id_ctx_var_name": [[142, 8], [142, 28]]}, "fn_var_occur": {"dag_id_ctx_var_name": [["dag_id_ctx_var_name", "AIRFLOW_VAR_NAME_FORMAT_MAPPING"], ["mock", "patch", "dict", "dag_id_ctx_var_name", "task_id_ctx_var_name", "execution_date_ctx_var_name", "dag_run_id_ctx_var_name"]], "dag_run_id_ctx_var_name": [["dag_run_id_ctx_var_name", "AIRFLOW_VAR_NAME_FORMAT_MAPPING"], ["mock", "patch", "dict", "dag_id_ctx_var_name", "task_id_ctx_var_name", "execution_date_ctx_var_name", "dag_run_id_ctx_var_name"]], "execution_date_ctx_var_name": [["execution_date_ctx_var_name", "AIRFLOW_VAR_NAME_FORMAT_MAPPING"], ["mock", "patch", "dict", "dag_id_ctx_var_name", "task_id_ctx_var_name", "execution_date_ctx_var_name", "dag_run_id_ctx_var_name"]], "hook": [["hook", "MockHiveCliHook"], ["output", "hook", "run_cli", "hql", "hql", "hive_conf"]], "hql": [["output", "hook", "run_cli", "hql", "hql", "hive_conf"]], "mock_output": [["mock_popen", "return_value", "MockSubProcess", "output", "mock_output"]], "output": [["mock_popen", "return_value", "MockSubProcess", "output", "mock_output"], ["output", "hook", "run_cli", "hql", "hql", "hive_conf"]], "process_inputs": [["process_inputs", "join", "mock_popen", "call_args_list"]], "return_value": [["mock_popen", "return_value", "MockSubProcess", "output", "mock_output"]], "task_id_ctx_var_name": [["task_id_ctx_var_name", "AIRFLOW_VAR_NAME_FORMAT_MAPPING"], ["mock", "patch", "dict", "dag_id_ctx_var_name", "task_id_ctx_var_name", "execution_date_ctx_var_name", "dag_run_id_ctx_var_name"]]}, "name": "test_run_cli_with_hive_conf", "params": {"mock_popen": "", "self": ""}, "params_descr": {"mock_popen": "", "self": ""}, "params_occur": {"mock_popen": [["mock_popen", "return_value", "MockSubProcess", "output", "mock_output"], ["process_inputs", "join", "mock_popen", "call_args_list"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_popen": [], "self": []}, "q_name": "TestHiveCliHook.test_run_cli_with_hive_conf", "ret_exprs": [], "ret_type": "", "variables": {"dag_id_ctx_var_name": "", "dag_run_id_ctx_var_name": "", "execution_date_ctx_var_name": "", "hook": "", "hql": "", "mock_output": "", "output": "", "process_inputs": "", "return_value": "", "task_id_ctx_var_name": ""}, "variables_p": {"dag_id_ctx_var_name": [["Dict[Any, str]", 0.3089103207919615], ["str", 0.30061709609895326], ["Dict[str, str]", 0.1960842556652363], ["Tuple[str]", 0.09856838100845276], ["dict", 0.09581994643539606]], "dag_run_id_ctx_var_name": [["str", 0.9018387816440337], ["Optional[str]", 0.09816121835596647]], "execution_date_ctx_var_name": [["str", 0.7111932373950889], ["Dict[str, Dict[str, str]]", 0.09567620756711513]], "hook": [["list", 0.3202551822039631], ["libsoundtouch.tests.test_libsoundtouch.MockDevice", 0.2409844103495828], ["Dict[int, Dict[str, Any]]", 0.08912048300109894], ["str", 0.08912048300109894]], "hql": [["str", 0.8999999999999999], ["float", 0.09999999999999999]], "mock_output": [["str", 0.7988529969301276]], "output": [["str", 0.7698019936386012], ["int", 0.09696389225710045]], "process_inputs": [["str", 0.2719694529543375], ["List[str]", 0.18588641489744848], ["Optional[Match[str]]", 0.13015725052415686], ["List[List[str]]", 0.11049271943665638], ["Type[List[int]]", 0.10509769999567654], ["list", 0.09819823109586209], ["Iterator[str]", 0.09819823109586209]], "return_value": [["str", 0.9005579406127618]], "task_id_ctx_var_name": [["str", 1.0]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[230, 4], [239, 60]], "fn_var_ln": {"calls": [[238, 8], [238, 13]], "filepath": [[231, 8], [231, 16]], "hook": [[234, 8], [234, 12]], "query": [[237, 8], [237, 13]], "table": [[232, 8], [232, 13]]}, "fn_var_occur": {"calls": [["calls", "mock", "call", "query"], ["mock_run_cli", "assert_has_calls", "calls", "any_order", "True"]], "filepath": [["hook", "load_file", "filepath", "filepath", "table", "table", "create", "False"], ["query", "filepath", "table"]], "hook": [["hook", "MockHiveCliHook"], ["hook", "load_file", "filepath", "filepath", "table", "table", "create", "False"]], "query": [["query", "filepath", "table"], ["calls", "mock", "call", "query"]], "table": [["hook", "load_file", "filepath", "filepath", "table", "table", "create", "False"], ["query", "filepath", "table"]]}, "name": "test_load_file_without_create_table", "params": {"mock_run_cli": "", "self": ""}, "params_descr": {"mock_run_cli": "", "self": ""}, "params_occur": {"mock_run_cli": [["mock_run_cli", "assert_has_calls", "calls", "any_order", "True"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_run_cli": [], "self": []}, "q_name": "TestHiveCliHook.test_load_file_without_create_table", "ret_exprs": [], "ret_type": "", "variables": {"calls": "", "filepath": "", "hook": "", "query": "", "table": ""}, "variables_p": {"calls": [["list", 0.17942109106840354], ["dict", 0.1681409901007011], ["mock._Call", 0.15949180751426795], ["List[int]", 0.13662890591661953], ["Tuple[int, int]", 0.1066590008222103], ["Dict[str, Union[Any, Any]]", 0.08528298193590328], ["int", 0.08218761132094717]], "filepath": [["str", 0.192401909837609], ["Tuple[Any, Any]", 0.10290563853465194], ["bytes", 0.09960289789842067], ["Set[str]", 0.09423275088932927], ["List[List[Any]]", 0.09405877641027828], ["Dict[str, str]", 0.09311316769721059], ["List[Tuple[str, str, str]]", 0.0910854637848266]], "hook": [["List[Dict[str, Any]]", 0.1292772128577695], ["list", 0.09813890382698315], ["int", 0.09534414902931564]], "query": [["int", 0.18432197677059942], ["Type[Dict[str, Any]]", 0.10893873000420208], ["List[int]", 0.10717384123811106], ["Dict[int, bool]", 0.08297741518212087]], "table": [["str", 0.5769571809235166], ["List[str]", 0.228699851795852]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[242, 4], [261, 60]], "fn_var_ln": {"calls": [[260, 8], [260, 13]], "create_table": [[251, 8], [251, 20]], "field_dict": [[245, 8], [245, 18]], "fields": [[246, 8], [246, 14]], "filepath": [[243, 8], [243, 16]], "hook": [[248, 8], [248, 12]], "load_data": [[259, 8], [259, 17]], "table": [[244, 8], [244, 13]]}, "fn_var_occur": {"calls": [["calls", "mock", "call", "create_table", "mock", "call", "load_data"], ["mock_run_cli", "assert_has_calls", "calls", "any_order", "True"]], "create_table": [["create_table", "format", "table", "table", "fields", "fields"], ["calls", "mock", "call", "create_table", "mock", "call", "load_data"]], "field_dict": [["field_dict", "OrderedDict"], ["fields", "join", "k", "strip", "v", "k", "v", "field_dict", "items"], ["hook", "load_file", "filepath", "filepath", "table", "table", "field_dict", "field_dict", "create", "True", "recreate", "True"]], "fields": [["fields", "join", "k", "strip", "v", "k", "v", "field_dict", "items"], ["create_table", "format", "table", "table", "fields", "fields"]], "filepath": [["hook", "load_file", "filepath", "filepath", "table", "table", "field_dict", "field_dict", "create", "True", "recreate", "True"], ["load_data", "filepath", "table"]], "hook": [["hook", "MockHiveCliHook"], ["hook", "load_file", "filepath", "filepath", "table", "table", "field_dict", "field_dict", "create", "True", "recreate", "True"]], "load_data": [["load_data", "filepath", "table"], ["calls", "mock", "call", "create_table", "mock", "call", "load_data"]], "table": [["hook", "load_file", "filepath", "filepath", "table", "table", "field_dict", "field_dict", "create", "True", "recreate", "True"], ["create_table", "format", "table", "table", "fields", "fields"], ["load_data", "filepath", "table"]]}, "name": "test_load_file_create_table", "params": {"mock_run_cli": "", "self": ""}, "params_descr": {"mock_run_cli": "", "self": ""}, "params_occur": {"mock_run_cli": [["mock_run_cli", "assert_has_calls", "calls", "any_order", "True"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_run_cli": [["tests.test_util.aiohttp.AiohttpClientMocker", 0.09051917574356343]], "self": []}, "q_name": "TestHiveCliHook.test_load_file_create_table", "ret_exprs": [], "ret_type": "", "variables": {"calls": "", "create_table": "", "field_dict": "", "fields": "", "filepath": "", "hook": "", "load_data": "", "table": ""}, "variables_p": {"calls": [["List[mock.Mock]", 0.08399502057758682]], "create_table": [["str", 0.2808356021100012], ["int", 0.1280835404180772], ["Dict[int, str]", 0.10662311994492019]], "field_dict": [["Dict[str, Literal]", 0.5063412772696527], ["Dict[Any, str]", 0.17383346563813265], ["Dict[Tuple[Any, Any], Any]", 0.11168909639164361], ["Pattern[str]", 0.11157024536331907], ["Dict[str, Union[Any, Any]]", 0.0965659153372518]], "fields": [["list", 0.29895519491782674], ["Dict[str, Tuple[str, str]]", 0.10543728767443387], ["Mapping[str, Type[Any]]", 0.10543728767443387], ["List[str]", 0.09275107557985814], ["List[shromazdeni.reports.utils.Field]", 0.09102873051351143], ["List[Tuple[str, Any]]", 0.0866685681750057]], "filepath": [["str", 0.41790656902586293], ["Set[taxonomy.db.models.name.Name]", 0.09264124937919141], ["list", 0.08925942130983024]], "hook": [["List[Dict[str, Any]]", 0.11213692721818455], ["str", 0.08690885692558456]], "load_data": [["tests.components.vera.common.ComponentData", 0.14454290821366603], ["Dict[str, int]", 0.1004329875409748]], "table": [["dep_check.models.Module", 0.27079186144744344], ["str", 0.2081646768139661], ["list", 0.09769964328641491], ["Tuple[Any, Any, Any, Any]", 0.0913144109362108], ["dict", 0.09027414108487883]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[265, 4], [285, 39]], "fn_var_ln": {"delimiter": [[268, 8], [268, 17]], "df": [[266, 8], [266, 10]], "encoding": [[269, 8], [269, 16]], "hook": [[271, 8], [271, 12]], "kwargs": [[281, 8], [281, 14]], "table": [[267, 8], [267, 13]]}, "fn_var_occur": {"delimiter": [["hook", "load_df", "df", "df", "table", "table", "delimiter", "delimiter", "encoding", "encoding"], ["kwargs", "delimiter"], ["kwargs", "delimiter"]], "df": [["df", "pd", "DataFrame"], ["hook", "load_df", "df", "df", "table", "table", "delimiter", "delimiter", "encoding", "encoding"]], "encoding": [["hook", "load_df", "df", "df", "table", "table", "delimiter", "delimiter", "encoding", "encoding"]], "hook": [["hook", "MockHiveCliHook"], ["hook", "load_df", "df", "df", "table", "table", "delimiter", "delimiter", "encoding", "encoding"]], "kwargs": [["kwargs", "mock_to_csv", "call_args", "kwargs"], ["kwargs", "False"], ["kwargs", "False"], ["kwargs", "delimiter"], ["kwargs", "mock_load_file", "call_args", "kwargs"], ["kwargs", "delimiter"], ["isinstance", "kwargs", "OrderedDict"], ["kwargs", "table"]], "table": [["hook", "load_df", "df", "df", "table", "table", "delimiter", "delimiter", "encoding", "encoding"], ["kwargs", "table"]]}, "name": "test_load_df", "params": {"mock_load_file": "", "mock_to_csv": "", "self": ""}, "params_descr": {"mock_load_file": "", "mock_to_csv": "", "self": ""}, "params_occur": {"mock_load_file": [["mock_load_file", "call_count"], ["kwargs", "mock_load_file", "call_args", "kwargs"]], "mock_to_csv": [["mock_to_csv", "call_count"], ["kwargs", "mock_to_csv", "call_args", "kwargs"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_load_file": [["Tuple[str, mock.Mock]", 0.09560448890065251]], "mock_to_csv": [], "self": []}, "q_name": "TestHiveCliHook.test_load_df", "ret_exprs": [], "ret_type": "", "variables": {"delimiter": "", "df": "", "encoding": "", "hook": "", "kwargs": "", "table": ""}, "variables_p": {"delimiter": [], "df": [["dict", 0.0879834828910253]], "encoding": [["int", 0.08492859308982949]], "hook": [], "kwargs": [["Dict[str, Tuple[str, Any]]", 0.17746132640446502], ["Dict[str, Union[int, str]]", 0.09453545572892176], ["Dict[str, int]", 0.0943485249782867]], "table": [["src.pip_shims.models.ShimmedPathCollection", 0.10523035308901202], ["str", 0.09641433887176436]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[289, 4], [299, 49]], "fn_var_ln": {"bools": [[291, 8], [291, 13]], "hook": [[290, 8], [290, 12]], "kwargs": [[297, 12], [297, 18]]}, "fn_var_occur": {"bools": [["bools", "True", "False"], ["itertools", "product", "bools", "bools"]], "hook": [["hook", "MockHiveCliHook"], ["hook", "load_df", "df", "pd", "DataFrame", "range", "table", "create", "create", "recreate", "recreate"]], "kwargs": [["kwargs", "mock_load_file", "call_args", "kwargs"], ["kwargs", "create"], ["kwargs", "recreate"]]}, "name": "test_load_df_with_optional_parameters", "params": {"mock_load_file": "", "mock_to_csv": "", "self": ""}, "params_descr": {"mock_load_file": "", "mock_to_csv": "", "self": ""}, "params_occur": {"mock_load_file": [["mock_load_file", "reset_mock"], ["mock_load_file", "call_count"], ["kwargs", "mock_load_file", "call_args", "kwargs"]], "mock_to_csv": [], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_load_file": [], "mock_to_csv": [["mock.MagicMock", 0.07938971540733045]], "self": []}, "q_name": "TestHiveCliHook.test_load_df_with_optional_parameters", "ret_exprs": [], "ret_type": "", "variables": {"bools": "", "hook": "", "kwargs": ""}, "variables_p": {"bools": [["str", 0.41111060522016124], ["List[str]", 0.19762804430957828], ["int", 0.09963165935872856]], "hook": [["libsoundtouch.tests.test_libsoundtouch.MockDevice", 0.11659843074315225], ["Dict[int, Dict[str, Any]]", 0.09060429933211674], ["str", 0.09060429933211674]], "kwargs": [["str", 0.3907943556026841], ["Type[ValueError]", 0.11719448328946706], ["Dict[str, Union[bool, str]]", 0.087209306213]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[302, 4], [336, 88]], "fn_var_ln": {"df": [[314, 8], [314, 10]], "hook": [[316, 8], [316, 12]], "ord_dict": [[303, 8], [303, 16]], "query": [[319, 8], [319, 13]]}, "fn_var_occur": {"df": [["df", "pd", "DataFrame", "ord_dict"], ["hook", "load_df", "df"]], "hook": [["hook", "MockHiveCliHook"], ["hook", "load_df", "df"]], "ord_dict": [["ord_dict", "OrderedDict"], ["ord_dict", "True"], ["ord_dict", "datetime", "datetime"], ["ord_dict", "object"], ["ord_dict", "None"], ["df", "pd", "DataFrame", "ord_dict"]], "query": [["assert_equal_ignore_multiple_spaces", "mock_run_cli", "call_args_list", "query"]]}, "name": "test_load_df_with_data_types", "params": {"mock_run_cli": "", "self": ""}, "params_descr": {"mock_run_cli": "", "self": ""}, "params_occur": {"mock_run_cli": [["assert_equal_ignore_multiple_spaces", "mock_run_cli", "call_args_list", "query"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_run_cli": [["tests.e2e.Helper", 0.16733185881264995], ["Exception", 0.10094660164510558]], "self": []}, "q_name": "TestHiveCliHook.test_load_df_with_data_types", "ret_exprs": [], "ret_type": "", "variables": {"df": "", "hook": "", "ord_dict": "", "query": ""}, "variables_p": {"df": [["Tuple[List[int], List[float]]", 2.5018542796343455e-11], ["Dict[str, Union[Any, Any]]", 2.0444869264254374e-11], ["str", 2.0330681447263774e-11], ["Dict[int, str]", 1.5734556026171116e-11], ["Anaconda3.Lib.site-packages.bokeh.tests.test_model.SomeModel", 1.5164982372190937e-11], ["Pattern[str]", 1.3485836484108284e-11], ["float", 1.2748852533769383e-11], ["Type[hansberger.analysis.models.analysis.MapperAnalysis]", 1.265960378564631e-11]], "hook": [["int", 0.045176490335107095], ["str", 0.044252241470152325]], "ord_dict": [["Dict[str, int]", 0.1317146867897262], ["str", 0.10989844140185727], ["dict", 0.1056041284390765], ["Dict[str, Optional[int]]", 0.09542497523520757]], "query": [["str", 0.09389504220918624], ["Dict[str, Union[Any, str]]", 0.09389504220918624], ["Dict[str, Any]", 0.09300380217601617]]}}], "name": "TestHiveCliHook", "q_name": "TestHiveCliHook", "variables": {}, "variables_p": {}}, {"cls_lc": [[339, 0], [592, 108]], "cls_var_ln": {"VALID_FILTER_MAP": [[354, 4], [354, 20]]}, "cls_var_occur": {"VALID_FILTER_MAP": []}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[340, 4], [352, 43]], "fn_var_ln": {"database": [[342, 8], [342, 21]], "hook": [[352, 12], [352, 21]], "next_day": [[341, 8], [341, 21]], "partition_by": [[343, 8], [343, 25]], "return_value": [[350, 12], [350, 43]], "table": [[344, 8], [344, 18]]}, "fn_var_occur": {"database": [["self", "database"]], "hook": [["self", "hook", "HiveMetastoreHook"]], "next_day": [["self", "next_day", "DEFAULT_DATE", "datetime", "timedelta", "days", "isoformat"]], "partition_by": [["self", "partition_by"]], "return_value": [["get_metastore_mock", "return_value", "mock", "MagicMock"]], "table": [["self", "table"]]}, "name": "setup_method", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "next_day", "DEFAULT_DATE", "datetime", "timedelta", "days", "isoformat"], ["self", "database"], ["self", "partition_by"], ["self", "table"], ["self", "hook", "HiveMetastoreHook"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestHiveMetastoreHook.setup_method", "ret_exprs": [], "ret_type": "", "variables": {"database": "", "hook": "", "next_day": "", "partition_by": "", "return_value": "", "table": ""}, "variables_p": {"database": [["str", 0.30000000000000004], ["Dict[str, Any]", 0.1], ["dict", 0.1], ["int", 0.1]], "hook": [["str", 0.30000000000000004], ["Dict[str, Any]", 0.1], ["dict", 0.1], ["int", 0.1]], "next_day": [["datetime.date", 0.3457066895133507], ["datetime.timedelta", 0.3224012861741086], ["datetime.datetime.timedelta", 0.1365032321346443], ["datetime.datetime", 0.10571484465573198], ["datetime.datetime.datetime", 0.08967394752216436]], "partition_by": [["str", 0.30000000000000004], ["Dict[str, Any]", 0.1], ["dict", 0.1], ["int", 0.1]], "return_value": [], "table": [["set", 0.49999999994974037]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[356, 4], [360, 36]], "fn_var_ln": {"max_partition": [[357, 8], [357, 21]]}, "fn_var_occur": {"max_partition": [["max_partition", "HiveMetastoreHook", "_get_max_partition_from_part_specs", "self", "VALID_FILTER_MAP"], ["max_partition", "None"]]}, "name": "test_get_max_partition_from_empty_part_specs", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["max_partition", "HiveMetastoreHook", "_get_max_partition_from_part_specs", "self", "VALID_FILTER_MAP"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestHiveMetastoreHook.test_get_max_partition_from_empty_part_specs", "ret_exprs": [], "ret_type": "", "variables": {"max_partition": ""}, "variables_p": {"max_partition": []}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[362, 4], [368, 13]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_get_max_partition_from_valid_part_specs_and_invalid_filter_map", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestHiveMetastoreHook.test_get_max_partition_from_valid_part_specs_and_invalid_filter_map", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[370, 4], [376, 13]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_get_max_partition_from_valid_part_specs_and_invalid_partition_key", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["HiveMetastoreHook", "_get_max_partition_from_part_specs", "self", "VALID_FILTER_MAP"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestHiveMetastoreHook.test_get_max_partition_from_valid_part_specs_and_invalid_partition_key", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[378, 4], [384, 13]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_get_max_partition_from_valid_part_specs_and_none_partition_key", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["HiveMetastoreHook", "_get_max_partition_from_part_specs", "None", "self", "VALID_FILTER_MAP"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestHiveMetastoreHook.test_get_max_partition_from_valid_part_specs_and_none_partition_key", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[386, 4], [392, 40]], "fn_var_ln": {"max_partition": [[387, 8], [387, 21]]}, "fn_var_occur": {"max_partition": [["max_partition", "HiveMetastoreHook", "_get_max_partition_from_part_specs", "None"]]}, "name": "test_get_max_partition_from_valid_part_specs_and_none_filter_map", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestHiveMetastoreHook.test_get_max_partition_from_valid_part_specs_and_none_filter_map", "ret_exprs": [], "ret_type": "", "variables": {"max_partition": ""}, "variables_p": {"max_partition": []}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[394, 4], [400, 40]], "fn_var_ln": {"max_partition": [[395, 8], [395, 21]]}, "fn_var_occur": {"max_partition": [["max_partition", "HiveMetastoreHook", "_get_max_partition_from_part_specs", "self", "VALID_FILTER_MAP"]]}, "name": "test_get_max_partition_from_valid_part_specs", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["max_partition", "HiveMetastoreHook", "_get_max_partition_from_part_specs", "self", "VALID_FILTER_MAP"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestHiveMetastoreHook.test_get_max_partition_from_valid_part_specs", "ret_exprs": [], "ret_type": "", "variables": {"max_partition": ""}, "variables_p": {"max_partition": [["str", 0.18144938194177945]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[402, 4], [408, 45]], "fn_var_ln": {"max_partition": [[403, 8], [403, 21]]}, "fn_var_occur": {"max_partition": [["max_partition", "HiveMetastoreHook", "_get_max_partition_from_part_specs", "self", "VALID_FILTER_MAP"], ["isinstance", "max_partition", "str"]]}, "name": "test_get_max_partition_from_valid_part_specs_return_type", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["max_partition", "HiveMetastoreHook", "_get_max_partition_from_part_specs", "self", "VALID_FILTER_MAP"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestHiveMetastoreHook.test_get_max_partition_from_valid_part_specs_return_type", "ret_exprs": [], "ret_type": "", "variables": {"max_partition": ""}, "variables_p": {"max_partition": [["List[str]", 0.27298904022009923]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[415, 4], [417, 40]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_error_metastore_client", "params": {"_find_valid_host_mock": "", "self": "", "socket_mock": ""}, "params_descr": {"_find_valid_host_mock": "", "self": "", "socket_mock": ""}, "params_occur": {"_find_valid_host_mock": [], "self": [["self", "hook", "get_metastore_client"]], "socket_mock": [["socket_mock", "socket", "return_value", "connect_ex", "return_value"]]}, "params_p": {"_find_valid_host_mock": [["mock.Mock", 0.4742924397114488]], "args": [], "kwargs": [], "self": [], "socket_mock": []}, "q_name": "TestHiveMetastoreHook.test_error_metastore_client", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[424, 4], [428, 49]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_ha_hosts", "params": {"get_connection_mock": "", "self": "", "socket_mock": ""}, "params_descr": {"get_connection_mock": "", "self": "", "socket_mock": ""}, "params_occur": {"get_connection_mock": [], "self": [], "socket_mock": [["socket_mock", "socket", "return_value", "connect_ex", "return_value"], ["socket_mock", "socket", "call_count"]]}, "params_p": {"args": [], "get_connection_mock": [["mock.MagicMock", 0.08602841515966768]], "kwargs": [], "self": [], "socket_mock": []}, "q_name": "TestHiveMetastoreHook.test_ha_hosts", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[430, 4], [440, 63]], "fn_var_ln": {"metastore_hook": [[438, 12], [438, 26]], "return_value": [[437, 12], [437, 39]]}, "fn_var_occur": {"metastore_hook": [["metastore_hook", "HiveMetastoreHook"], ["isinstance", "metastore_hook", "get_conn", "HMSClient"]], "return_value": [["find_valid_host", "return_value", "mock", "MagicMock", "return_value"], ["get_connection", "return_value", "mock", "MagicMock", "return_value"]]}, "name": "test_get_conn", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestHiveMetastoreHook.test_get_conn", "ret_exprs": [], "ret_type": "", "variables": {"metastore_hook": "", "return_value": ""}, "variables_p": {"metastore_hook": [["bool", 0.10989571613821515]], "return_value": [["Union[mock.AsyncMock, mock.MagicMock]", 0.09008237346189955]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[442, 4], [467, 9]], "fn_var_ln": {"FakePartition": [[444, 8], [444, 21]], "fake_partition": [[445, 8], [445, 22]], "get_partitions_by_filter": [[461, 8], [461, 42]], "metastore": [[447, 8], [447, 17]], "missing_partition": [[460, 8], [460, 25]], "partition": [[449, 8], [449, 17]]}, "fn_var_occur": {"FakePartition": [["FakePartition", "namedtuple"], ["fake_partition", "FakePartition"]], "fake_partition": [["fake_partition", "FakePartition"], ["metastore", "get_partitions_by_filter", "mock", "MagicMock", "return_value", "fake_partition"]], "get_partitions_by_filter": [["metastore", "get_partitions_by_filter", "mock", "MagicMock", "return_value", "fake_partition"], ["metastore", "get_partitions_by_filter", "self", "database", "self", "table", "partition", "HiveMetastoreHook", "MAX_PART_COUNT"], ["metastore", "get_partitions_by_filter", "mock", "MagicMock", "return_value"], ["metastore", "get_partitions_by_filter", "assert_called_with", "self", "database", "self", "table", "missing_partition", "HiveMetastoreHook", "MAX_PART_COUNT"]], "metastore": [["metastore", "self", "hook", "metastore", "__enter__"], ["metastore", "get_partitions_by_filter", "mock", "MagicMock", "return_value", "fake_partition"], ["metastore", "get_partitions_by_filter", "self", "database", "self", "table", "partition", "HiveMetastoreHook", "MAX_PART_COUNT"], ["metastore", "get_partitions_by_filter", "mock", "MagicMock", "return_value"], ["metastore", "get_partitions_by_filter", "assert_called_with", "self", "database", "self", "table", "missing_partition", "HiveMetastoreHook", "MAX_PART_COUNT"]], "missing_partition": [["missing_partition", "self", "partition_by", "self", "next_day"], ["self", "hook", "check_for_partition", "self", "database", "self", "table", "missing_partition"], ["metastore", "get_partitions_by_filter", "assert_called_with", "self", "database", "self", "table", "missing_partition", "HiveMetastoreHook", "MAX_PART_COUNT"]], "partition": [["partition", "self", "partition_by", "DEFAULT_DATE_DS"], ["self", "hook", "check_for_partition", "self", "database", "self", "table", "partition"], ["metastore", "get_partitions_by_filter", "self", "database", "self", "table", "partition", "HiveMetastoreHook", "MAX_PART_COUNT"]]}, "name": "test_check_for_partition", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["metastore", "self", "hook", "metastore", "__enter__"], ["partition", "self", "partition_by", "DEFAULT_DATE_DS"], ["self", "hook", "check_for_partition", "self", "database", "self", "table", "partition"], ["metastore", "get_partitions_by_filter", "self", "database", "self", "table", "partition", "HiveMetastoreHook", "MAX_PART_COUNT"], ["missing_partition", "self", "partition_by", "self", "next_day"], ["self", "hook", "check_for_partition", "self", "database", "self", "table", "missing_partition"], ["metastore", "get_partitions_by_filter", "assert_called_with", "self", "database", "self", "table", "missing_partition", "HiveMetastoreHook", "MAX_PART_COUNT"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestHiveMetastoreHook.test_check_for_partition", "ret_exprs": [], "ret_type": "", "variables": {"FakePartition": "", "fake_partition": "", "get_partitions_by_filter": "", "metastore": "", "missing_partition": "", "partition": ""}, "variables_p": {"FakePartition": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["str", 0.1], ["datetime.timedelta", 0.1]], "fake_partition": [["mock.MagicMock", 0.17401434332543594]], "get_partitions_by_filter": [], "metastore": [["mock.MagicMock", 0.2876947620932454], ["Dict[str, str]", 0.1400239072994791]], "missing_partition": [["int", 0.2099196013448691], ["Callable", 0.10902545575536893], ["float", 0.08502441190718803], ["Union[Literal, Literal]", 0.08272086999156548]], "partition": [["int", 0.4957537082573825], ["str", 0.2095195427985206], ["dict", 0.1026679056788699], ["taxonomy.db.models.base.EnumField", 0.09335836906186494]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[469, 4], [491, 9]], "fn_var_ln": {"missing_partition": [[484, 8], [484, 25]], "partition": [[473, 8], [473, 17]]}, "fn_var_occur": {"missing_partition": [["missing_partition", "self", "partition_by", "self", "next_day"], ["self", "hook", "check_for_named_partition", "self", "database", "self", "table", "missing_partition"], ["self", "hook", "metastore", "__enter__", "check_for_named_partition", "assert_called_with", "self", "database", "self", "table", "missing_partition"]], "partition": [["partition", "self", "partition_by", "DEFAULT_DATE_DS"], ["self", "hook", "check_for_named_partition", "self", "database", "self", "table", "partition"], ["self", "hook", "metastore", "__enter__", "check_for_named_partition", "assert_called_with", "self", "database", "self", "table", "partition"]]}, "name": "test_check_for_named_partition", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["partition", "self", "partition_by", "DEFAULT_DATE_DS"], ["self", "hook", "metastore", "__enter__", "check_for_named_partition", "mock", "MagicMock", "return_value", "True"], ["self", "hook", "check_for_named_partition", "self", "database", "self", "table", "partition"], ["self", "hook", "metastore", "__enter__", "check_for_named_partition", "assert_called_with", "self", "database", "self", "table", "partition"], ["missing_partition", "self", "partition_by", "self", "next_day"], ["self", "hook", "metastore", "__enter__", "check_for_named_partition", "mock", "MagicMock", "return_value", "False"], ["self", "hook", "check_for_named_partition", "self", "database", "self", "table", "missing_partition"], ["self", "hook", "metastore", "__enter__", "check_for_named_partition", "assert_called_with", "self", "database", "self", "table", "missing_partition"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestHiveMetastoreHook.test_check_for_named_partition", "ret_exprs": [], "ret_type": "", "variables": {"missing_partition": "", "partition": ""}, "variables_p": {"missing_partition": [["str", 0.37673677426916213], ["Type[str]", 0.18431465680598655], ["int", 0.1261078793245955], ["List[str]", 0.10173059378322002], ["Dict[str, list]", 0.10173059378322002]], "partition": [["str", 0.4817966615781134], ["int", 0.10748072099655916], ["Type[zanhu.qa.models.Answer]", 0.10518901566367007], ["Type[zhihu.qa.models.Answer]", 0.10518901566367007], ["Type[bootcamp.qa.models.Answer]", 0.10518901566367007], ["Dict[str, Dict[str, Any]]", 0.09515557043431727]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[493, 4], [499, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_get_table", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "hook", "metastore", "__enter__", "get_table", "mock", "MagicMock"], ["self", "hook", "get_table", "db", "self", "database", "table_name", "self", "table"], ["self", "hook", "metastore", "__enter__", "get_table", "assert_called_with", "dbname", "self", "database", "tbl_name", "self", "table"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestHiveMetastoreHook.test_get_table", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[501, 4], [513, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_get_tables", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "hook", "metastore", "__enter__", "get_tables", "mock", "MagicMock", "return_value"], ["self", "hook", "get_tables", "db", "self", "database", "pattern", "self", "table"], ["self", "hook", "metastore", "__enter__", "get_tables", "assert_called_with", "db_name", "pattern"], ["self", "hook", "metastore", "__enter__", "get_table_objects_by_name", "assert_called_with"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestHiveMetastoreHook.test_get_tables", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[515, 4], [520, 55]], "fn_var_ln": {"get_databases": [[517, 8], [517, 31]], "metastore": [[516, 8], [516, 17]]}, "fn_var_occur": {"get_databases": [["metastore", "get_databases", "mock", "MagicMock"], ["self", "hook", "get_databases", "pattern"], ["metastore", "get_databases", "assert_called_with"]], "metastore": [["metastore", "self", "hook", "metastore", "__enter__"], ["metastore", "get_databases", "mock", "MagicMock"], ["metastore", "get_databases", "assert_called_with"]]}, "name": "test_get_databases", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["metastore", "self", "hook", "metastore", "__enter__"], ["self", "hook", "get_databases", "pattern"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestHiveMetastoreHook.test_get_databases", "ret_exprs": [], "ret_type": "", "variables": {"get_databases": "", "metastore": ""}, "variables_p": {"get_databases": [], "metastore": [["mode.utils.mocks.Mock", 0.30941587527988135], ["mock.MagicMock", 0.3009495940324055]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[522, 4], [542, 9]], "fn_var_ln": {"FakeFieldSchema": [[523, 8], [523, 23]], "FakePartition": [[527, 8], [527, 21]], "FakeTable": [[525, 8], [525, 17]], "fake_partition": [[528, 8], [528, 22]], "fake_schema": [[524, 8], [524, 19]], "fake_table": [[526, 8], [526, 18]], "get_partitions": [[533, 8], [533, 32]], "get_table": [[531, 8], [531, 27]], "metastore": [[530, 8], [530, 17]], "partitions": [[535, 8], [535, 18]]}, "fn_var_occur": {"FakeFieldSchema": [["FakeFieldSchema", "namedtuple"], ["fake_schema", "FakeFieldSchema"]], "FakePartition": [["FakePartition", "namedtuple"], ["fake_partition", "FakePartition"]], "FakeTable": [["FakeTable", "namedtuple"], ["fake_table", "FakeTable", "fake_schema"]], "fake_partition": [["fake_partition", "FakePartition"], ["metastore", "get_partitions", "mock", "MagicMock", "return_value", "fake_partition"]], "fake_schema": [["fake_schema", "FakeFieldSchema"], ["fake_table", "FakeTable", "fake_schema"]], "fake_table": [["fake_table", "FakeTable", "fake_schema"], ["metastore", "get_table", "mock", "MagicMock", "return_value", "fake_table"]], "get_partitions": [["metastore", "get_partitions", "mock", "MagicMock", "return_value", "fake_partition"], ["partitions", "self", "hook", "get_partitions", "schema", "self", "database", "table_name", "self", "table"], ["metastore", "get_partitions", "assert_called_with", "db_name", "self", "database", "tbl_name", "self", "table", "max_parts", "HiveMetastoreHook", "MAX_PART_COUNT"]], "get_table": [["metastore", "get_table", "mock", "MagicMock", "return_value", "fake_table"], ["metastore", "get_table", "assert_called_with", "dbname", "self", "database", "tbl_name", "self", "table"]], "metastore": [["metastore", "self", "hook", "metastore", "__enter__"], ["metastore", "get_table", "mock", "MagicMock", "return_value", "fake_table"], ["metastore", "get_partitions", "mock", "MagicMock", "return_value", "fake_partition"], ["metastore", "get_table", "assert_called_with", "dbname", "self", "database", "tbl_name", "self", "table"], ["metastore", "get_partitions", "assert_called_with", "db_name", "self", "database", "tbl_name", "self", "table", "max_parts", "HiveMetastoreHook", "MAX_PART_COUNT"]], "partitions": [["partitions", "self", "hook", "get_partitions", "schema", "self", "database", "table_name", "self", "table"], ["len", "partitions"], ["partitions", "self", "partition_by", "DEFAULT_DATE_DS"]]}, "name": "test_get_partitions", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["metastore", "self", "hook", "metastore", "__enter__"], ["partitions", "self", "hook", "get_partitions", "schema", "self", "database", "table_name", "self", "table"], ["partitions", "self", "partition_by", "DEFAULT_DATE_DS"], ["metastore", "get_table", "assert_called_with", "dbname", "self", "database", "tbl_name", "self", "table"], ["metastore", "get_partitions", "assert_called_with", "db_name", "self", "database", "tbl_name", "self", "table", "max_parts", "HiveMetastoreHook", "MAX_PART_COUNT"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestHiveMetastoreHook.test_get_partitions", "ret_exprs": [], "ret_type": "", "variables": {"FakeFieldSchema": "", "FakePartition": "", "FakeTable": "", "fake_partition": "", "fake_schema": "", "fake_table": "", "get_partitions": "", "get_table": "", "metastore": "", "partitions": ""}, "variables_p": {"FakeFieldSchema": [["List[str]", 0.18870867361572968], ["Dict[str, List[str]]", 0.18009331443699922], ["dict", 0.16248269886660757], ["Dict[str, str]", 0.10675361750840029], ["Tuple[str, str, str, str]", 0.09753772818849336], ["List[shromazdeni.reports.utils.Field]", 0.09676243464470816], ["set", 0.08559494009984656], ["Dict[str, Union[Any, Any, Any]]", 0.08206659263921506]], "FakePartition": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["str", 0.1], ["datetime.timedelta", 0.1]], "FakeTable": [["Set[str]", 0.23635067959357753], ["Type[Dict[Any, Any]]", 0.11069215243565696], ["list", 0.09990376526049172], ["dict", 0.09293489397245056], ["str", 0.0855010101834844], ["Tuple[str, str, str, str, str, str]", 0.07993465307526598]], "fake_partition": [["Dict[str, str]", 0.10925499917646746], ["mock.MagicMock", 0.08300148994221554]], "fake_schema": [["list", 0.10479241229417341], ["float", 0.10180984046580012], ["List[int]", 0.0867664890936066], ["dict", 0.08062822909314615]], "fake_table": [["str", 0.19886576906432735], ["dict", 0.1984949271401663], ["Dict[str, str]", 0.10657928202485716]], "get_partitions": [["str", 0.1980408111693919], ["Callable", 0.09162390060026036]], "get_table": [], "metastore": [], "partitions": [["str", 0.7015798344096046], ["List[str]", 0.11348029650709779], ["Union[Literal, Literal]", 0.09785118490952166], ["List[List[int]]", 0.08708868417377597]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[544, 4], [566, 76]], "fn_var_ln": {"FakeFieldSchema": [[545, 8], [545, 23]], "FakeTable": [[547, 8], [547, 17]], "fake_schema": [[546, 8], [546, 19]], "fake_table": [[548, 8], [548, 18]], "filter_map": [[556, 8], [556, 18]], "get_partition_names": [[553, 8], [553, 37]], "get_table": [[551, 8], [551, 27]], "metastore": [[550, 8], [550, 17]], "partition": [[557, 8], [557, 17]], "partition_name_to_spec": [[554, 8], [554, 40]]}, "fn_var_occur": {"FakeFieldSchema": [["FakeFieldSchema", "namedtuple"], ["fake_schema", "FakeFieldSchema"]], "FakeTable": [["FakeTable", "namedtuple"], ["fake_table", "FakeTable", "fake_schema"]], "fake_schema": [["fake_schema", "FakeFieldSchema"], ["fake_table", "FakeTable", "fake_schema"]], "fake_table": [["fake_table", "FakeTable", "fake_schema"], ["metastore", "get_table", "mock", "MagicMock", "return_value", "fake_table"]], "filter_map": [["filter_map", "self", "partition_by", "DEFAULT_DATE_DS"], ["partition", "self", "hook", "max_partition", "schema", "self", "database", "table_name", "self", "table", "field", "self", "partition_by", "filter_map", "filter_map"]], "get_partition_names": [["metastore", "get_partition_names", "mock", "MagicMock", "return_value"], ["metastore", "get_partition_names", "assert_called_with", "self", "database", "self", "table", "max_parts", "HiveMetastoreHook", "MAX_PART_COUNT"]], "get_table": [["metastore", "get_table", "mock", "MagicMock", "return_value", "fake_table"], ["metastore", "get_table", "assert_called_with", "dbname", "self", "database", "tbl_name", "self", "table"]], "metastore": [["metastore", "self", "hook", "metastore", "__enter__"], ["metastore", "get_table", "mock", "MagicMock", "return_value", "fake_table"], ["metastore", "get_partition_names", "mock", "MagicMock", "return_value"], ["metastore", "partition_name_to_spec", "mock", "MagicMock", "return_value"], ["metastore", "get_table", "assert_called_with", "dbname", "self", "database", "tbl_name", "self", "table"], ["metastore", "get_partition_names", "assert_called_with", "self", "database", "self", "table", "max_parts", "HiveMetastoreHook", "MAX_PART_COUNT"], ["metastore", "partition_name_to_spec", "assert_called_with"]], "partition": [["partition", "self", "hook", "max_partition", "schema", "self", "database", "table_name", "self", "table", "field", "self", "partition_by", "filter_map", "filter_map"], ["partition", "DEFAULT_DATE_DS"]], "partition_name_to_spec": [["metastore", "partition_name_to_spec", "mock", "MagicMock", "return_value"], ["metastore", "partition_name_to_spec", "assert_called_with"]]}, "name": "test_max_partition", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["metastore", "self", "hook", "metastore", "__enter__"], ["filter_map", "self", "partition_by", "DEFAULT_DATE_DS"], ["partition", "self", "hook", "max_partition", "schema", "self", "database", "table_name", "self", "table", "field", "self", "partition_by", "filter_map", "filter_map"], ["metastore", "get_table", "assert_called_with", "dbname", "self", "database", "tbl_name", "self", "table"], ["metastore", "get_partition_names", "assert_called_with", "self", "database", "self", "table", "max_parts", "HiveMetastoreHook", "MAX_PART_COUNT"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestHiveMetastoreHook.test_max_partition", "ret_exprs": [], "ret_type": "", "variables": {"FakeFieldSchema": "", "FakeTable": "", "fake_schema": "", "fake_table": "", "filter_map": "", "get_partition_names": "", "get_table": "", "metastore": "", "partition": "", "partition_name_to_spec": ""}, "variables_p": {"FakeFieldSchema": [["List[str]", 0.18870867361572968], ["Dict[str, List[str]]", 0.18009331443699922], ["dict", 0.16248269886660757], ["Dict[str, str]", 0.10675361750840029], ["Tuple[str, str, str, str]", 0.09753772818849336], ["List[shromazdeni.reports.utils.Field]", 0.09676243464470816], ["set", 0.08559494009984656], ["Dict[str, Union[Any, Any, Any]]", 0.08206659263921506]], "FakeTable": [["Set[str]", 0.23635067959357753], ["Type[Dict[Any, Any]]", 0.11069215243565696], ["list", 0.09990376526049172], ["dict", 0.09293489397245056], ["str", 0.0855010101834844], ["Tuple[str, str, str, str, str, str]", 0.07993465307526598]], "fake_schema": [["list", 0.10479241229417341], ["float", 0.10180984046580012], ["List[int]", 0.0867664890936066], ["dict", 0.08062822909314615]], "fake_table": [["str", 0.19886576906432735], ["dict", 0.1984949271401663], ["Dict[str, str]", 0.10657928202485716]], "filter_map": [["int", 0.25282337615506306], ["str", 0.22074620059062566], ["datetime.date.time.datetime", 0.141881965929553], ["list", 0.09393846614273411]], "get_partition_names": [["str", 0.1626818139855488]], "get_table": [], "metastore": [], "partition": [["str", 0.1899411057539903], ["Dict[str, int]", 0.17081377614342794], ["int", 0.14631131676428605], ["qcodes.utils.validators.Ints", 0.1173393179188121], ["Type[apps.blog.models.Post]", 0.10073804495974802], ["Dict[int, str]", 0.0919230884616677]], "partition_name_to_spec": [["mock.Mock", 0.2000986342834157], ["mock.MagicMock", 0.10733839901640882]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[568, 4], [583, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_table_exists", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "hook", "metastore", "__enter__", "get_table", "mock", "MagicMock", "return_value", "True"], ["self", "hook", "table_exists", "self", "table", "db", "self", "database"], ["self", "hook", "metastore", "__enter__", "get_table", "assert_called_with", "dbname", "tbl_name"], ["self", "hook", "metastore", "__enter__", "get_table", "mock", "MagicMock", "side_effect", "Exception"], ["self", "hook", "table_exists"], ["self", "hook", "metastore", "__enter__", "get_table", "assert_called_with", "dbname", "tbl_name"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestHiveMetastoreHook.test_table_exists", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[587, 4], [592, 108]], "fn_var_ln": {"metastore_mock": [[588, 8], [588, 22]], "ret": [[590, 8], [590, 11]], "return_value": [[589, 8], [589, 37]]}, "fn_var_occur": {"metastore_mock": [["metastore_mock", "get_metastore_client_mock", "return_value"], ["metastore_mock", "drop_partition", "self", "table", "db", "self", "database", "part_vals", "DEFAULT_DATE_DS", "ret"]], "ret": [["ret", "self", "hook", "drop_partitions", "self", "table", "db", "self", "database", "part_vals", "DEFAULT_DATE_DS"], ["metastore_mock", "drop_partition", "self", "table", "db", "self", "database", "part_vals", "DEFAULT_DATE_DS", "ret"]], "return_value": [["metastore_mock", "get_metastore_client_mock", "return_value"], ["table_exist_mock", "return_value", "True"]]}, "name": "test_drop_partition", "params": {"get_metastore_client_mock": "", "self": "", "table_exist_mock": ""}, "params_descr": {"get_metastore_client_mock": "", "self": "", "table_exist_mock": ""}, "params_occur": {"get_metastore_client_mock": [["metastore_mock", "get_metastore_client_mock", "return_value"]], "self": [["ret", "self", "hook", "drop_partitions", "self", "table", "db", "self", "database", "part_vals", "DEFAULT_DATE_DS"], ["table_exist_mock", "assert_called_once_with", "self", "table", "self", "database"], ["metastore_mock", "drop_partition", "self", "table", "db", "self", "database", "part_vals", "DEFAULT_DATE_DS", "ret"]], "table_exist_mock": [["table_exist_mock", "return_value", "True"], ["table_exist_mock", "assert_called_once_with", "self", "table", "self", "database"]]}, "params_p": {"args": [], "get_metastore_client_mock": [], "kwargs": [], "self": [], "table_exist_mock": []}, "q_name": "TestHiveMetastoreHook.test_drop_partition", "ret_exprs": [], "ret_type": "", "variables": {"metastore_mock": "", "ret": "", "return_value": ""}, "variables_p": {"metastore_mock": [["mock._patch[Union[mock.AsyncMock, mock.MagicMock]]", 0.1801845502292049], ["mock.MagicMock", 0.0874103718288886]], "ret": [["Dict[str, Union[float, str]]", 0.2538966261565484], ["pytch.utils.Position", 0.10780501875839356], ["dict", 0.10449922788731217], ["str", 0.08801065063103053], ["bytes", 0.08756905817484242], ["int", 0.08626390226880258], ["DefaultDict[Any, int]", 0.08456908551677204]], "return_value": [["mock._Call", 0.18249170366413442], ["int", 0.12399407137014568], ["Optional[bytes]", 0.1016342964811037], ["str", 0.08666700024426881]]}}], "name": "TestHiveMetastoreHook", "q_name": "TestHiveMetastoreHook", "variables": {"VALID_FILTER_MAP": ""}, "variables_p": {"VALID_FILTER_MAP": [["str", 0.9999999999999999]]}}, {"cls_lc": [[595, 0], [874, 42]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[596, 4], [599, 61]], "fn_var_ln": {"df": [[597, 8], [597, 10]], "local_path": [[598, 8], [598, 23]]}, "fn_var_occur": {"df": [["df", "pd", "DataFrame"], ["df", "to_csv", "self", "local_path", "header", "False", "index", "False"]], "local_path": [["self", "local_path"], ["df", "to_csv", "self", "local_path", "header", "False", "index", "False"]]}, "name": "_upload_dataframe", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "local_path"], ["df", "to_csv", "self", "local_path", "header", "False", "index", "False"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestHiveServer2Hook._upload_dataframe", "ret_exprs": [], "ret_type": "", "variables": {"df": "", "local_path": ""}, "variables_p": {"df": [], "local_path": [["str", 0.7103994201137529]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[601, 4], [627, 43]], "fn_var_ln": {"args": [[603, 8], [603, 12]], "columns": [[620, 8], [620, 20]], "dag": [[604, 8], [604, 16]], "database": [[605, 8], [605, 21]], "hook": [[627, 12], [627, 21]], "hql": [[608, 8], [608, 16]], "return_value": [[625, 12], [625, 43]], "table": [[606, 8], [606, 18]]}, "fn_var_occur": {"args": [["args", "DEFAULT_DATE"], ["self", "dag", "DAG", "default_args", "args"]], "columns": [["self", "columns", "self", "table", "self", "table"]], "dag": [["self", "dag", "DAG", "default_args", "args"]], "database": [["self", "database"]], "hook": [["self", "hook", "HiveMetastoreHook"]], "hql": [["self", "hql"]], "return_value": [["get_metastore_mock", "return_value", "mock", "MagicMock"]], "table": [["self", "table"], ["self", "columns", "self", "table", "self", "table"]]}, "name": "setup_method", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "_upload_dataframe"], ["self", "dag", "DAG", "default_args", "args"], ["self", "database"], ["self", "table"], ["self", "hql"], ["self", "columns", "self", "table", "self", "table"], ["self", "hook", "HiveMetastoreHook"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestHiveServer2Hook.setup_method", "ret_exprs": [], "ret_type": "", "variables": {"args": "", "columns": "", "dag": "", "database": "", "hook": "", "hql": "", "return_value": "", "table": ""}, "variables_p": {"args": [["dict", 0.23158237319952885], ["Tuple[Any, Any]", 0.09138477310665434]], "columns": [["int", 0.9999999999999999]], "dag": [["bool", 0.2048703308790552], ["dict", 0.19090330750955672], ["str", 0.08800142005137496], ["Exception", 0.08517259256046432]], "database": [["str", 0.30000000000000004], ["Dict[str, Any]", 0.1], ["dict", 0.1], ["int", 0.1]], "hook": [["str", 0.30000000000000004], ["Dict[str, Any]", 0.1], ["dict", 0.1], ["int", 0.1]], "hql": [["str", 0.30000000000000004], ["Dict[str, Any]", 0.1], ["dict", 0.1], ["int", 0.1]], "return_value": [], "table": [["Dict[str, str]", 0.5489542259451696], ["int", 0.24300373463298972], ["Set[str]", 0.13286769445662414]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[629, 4], [631, 23]], "fn_var_ln": {"hook": [[630, 8], [630, 12]]}, "fn_var_occur": {"hook": [["hook", "MockHiveServer2Hook"], ["hook", "get_conn"]]}, "name": "test_get_conn", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestHiveServer2Hook.test_get_conn", "ret_exprs": [], "ret_type": "", "variables": {"hook": ""}, "variables_p": {"hook": [["list", 0.21494951372983456], ["libsoundtouch.tests.test_libsoundtouch.MockDevice", 0.05868597500956241]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[634, 4], [651, 13]], "fn_var_ln": {"conn_env": [[636, 8], [636, 16]], "conn_id": [[635, 8], [635, 15]]}, "fn_var_occur": {"conn_env": [["conn_env", "CONN_ENV_PREFIX", "conn_id", "upper"], ["mock", "patch", "dict", "conn_env"]], "conn_id": [["conn_env", "CONN_ENV_PREFIX", "conn_id", "upper"], ["HiveServer2Hook", "hiveserver2_conn_id", "conn_id", "get_conn"]]}, "name": "test_get_conn_with_password", "params": {"mock_connect": "", "self": ""}, "params_descr": {"mock_connect": "", "self": ""}, "params_occur": {"mock_connect": [["mock_connect", "assert_called_once_with", "host", "port", "auth", "kerberos_service_name", "None", "username", "password", "database"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_connect": [["tests.test_util.aiohttp.AiohttpClientMocker", 0.09150829322858045], ["mock.MagicMock", 0.08570272979604049]], "self": []}, "q_name": "TestHiveServer2Hook.test_get_conn_with_password", "ret_exprs": [], "ret_type": "", "variables": {"conn_env": "", "conn_id": ""}, "variables_p": {"conn_env": [["str", 0.1910748396931437], ["dict", 0.1059345795846504], ["Dict[str, int]", 0.10177917875785016]], "conn_id": [["str", 0.5458271527041116], ["int", 0.36138987728227095]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[669, 4], [682, 57]], "fn_var_ln": {"connection": [[670, 8], [670, 18]], "hook": [[677, 8], [677, 12]]}, "fn_var_occur": {"connection": [["connection", "Connection", "conn_id", "conn_type", "host", "host", "port", "port", "schema", "schema"], ["hook", "_validate_beeline_parameters", "connection"], ["hook", "_validate_beeline_parameters", "connection"]], "hook": [["hook", "HiveCliHook"], ["hook", "_validate_beeline_parameters", "connection"], ["hook", "_validate_beeline_parameters", "connection"]]}, "name": "test_get_conn_with_wrong_connection_parameters", "params": {"host": "", "message": "", "port": "", "schema": "", "self": ""}, "params_descr": {"host": "", "message": "", "port": "", "schema": "", "self": ""}, "params_occur": {"host": [["connection", "Connection", "conn_id", "conn_type", "host", "host", "port", "port", "schema", "schema"]], "message": [["pytest", "raises", "Exception", "match", "message"]], "port": [["connection", "Connection", "conn_id", "conn_type", "host", "host", "port", "port", "schema", "schema"]], "schema": [["connection", "Connection", "conn_id", "conn_type", "host", "host", "port", "port", "schema", "schema"]], "self": []}, "params_p": {"args": [], "host": [["int", 0.10338466735503128], ["str", 0.09863299350096844], ["lms.lmsdb.models.Comment", 0.08490809602891179]], "kwargs": [], "message": [["str", 0.2948165312336295], ["Optional[str]", 0.10607031287408865], ["core.models.Recipe", 0.07994933659884497]], "port": [["int", 0.10338466735503128], ["str", 0.09863299350096844], ["lms.lmsdb.models.Comment", 0.08490809602891179]], "schema": [["int", 0.10338466735503128], ["str", 0.09863299350096844], ["lms.lmsdb.models.Comment", 0.08490809602891179]], "self": []}, "q_name": "TestHiveServer2Hook.test_get_conn_with_wrong_connection_parameters", "ret_exprs": [], "ret_type": "", "variables": {"connection": "", "hook": ""}, "variables_p": {"connection": [["int", 0.5279863094155334], ["str", 0.29598199746166237]], "hook": [["dict", 0.10263511084400234]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[684, 4], [709, 94]], "fn_var_ln": {"hook": [[685, 8], [685, 12]], "query": [[686, 8], [686, 13]], "results": [[699, 12], [699, 19]]}, "fn_var_occur": {"hook": [["hook", "MockHiveServer2Hook"], ["results", "hook", "get_records", "query", "schema", "self", "database"], ["hook", "get_conn", "assert_called_with", "self", "database"], ["hook", "mock_cursor", "execute", "assert_any_call"], ["hook", "mock_cursor", "execute", "assert_any_call"], ["hook", "mock_cursor", "execute", "assert_any_call"], ["hook", "mock_cursor", "execute", "assert_any_call"], ["hook", "mock_cursor", "execute", "assert_any_call"], ["hook", "mock_cursor", "execute", "assert_any_call"]], "query": [["query", "self", "table"], ["results", "hook", "get_records", "query", "schema", "self", "database"]], "results": [["results", "hook", "get_records", "query", "schema", "self", "database"]]}, "name": "test_get_records", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["query", "self", "table"], ["results", "hook", "get_records", "query", "schema", "self", "database"], ["hook", "get_conn", "assert_called_with", "self", "database"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestHiveServer2Hook.test_get_records", "ret_exprs": [], "ret_type": "", "variables": {"hook": "", "query": "", "results": ""}, "variables_p": {"hook": [["myia.utils.misc.Registry[Any, Any]", 0.3566003035423448]], "query": [["int", 0.289932703320367], ["str", 0.22774681310359818], ["List[dict]", 0.09675768157097717], ["T", 0.09391710143098153]], "results": [["int", 0.18972881434300642], ["Dict[str, Union[Any, Any, Any, Any, Any]]", 0.10385295127679293], ["str", 0.10219808064481102], ["list", 0.10202540461490124], ["Dict[str, Any]", 0.09651620493310364], ["Type[jazmin_leon_llc.fluent_pages.models.db.UrlNode]", 0.09517298636919223]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[711, 4], [744, 27]], "fn_var_ln": {"df": [[742, 8], [742, 10]], "hook": [[739, 8], [739, 12]], "query": [[740, 8], [740, 13]]}, "fn_var_occur": {"df": [["df", "hook", "get_pandas_df", "query", "schema", "self", "database"], ["len", "df"], ["df", "values", "tolist"], ["df", "hook", "get_pandas_df", "query", "schema", "self", "database"], ["len", "df"]], "hook": [["hook", "MockHiveServer2Hook"], ["df", "hook", "get_pandas_df", "query", "schema", "self", "database"], ["hook", "get_conn", "assert_called_with", "self", "database"], ["hook", "mock_cursor", "execute", "assert_any_call"], ["hook", "mock_cursor", "execute", "assert_any_call"], ["hook", "mock_cursor", "execute", "assert_any_call"], ["hook", "mock_cursor", "execute", "assert_any_call"], ["hook", "mock_cursor", "execute", "assert_any_call"], ["hook", "mock_cursor", "execute", "assert_any_call"], ["hook", "MockHiveServer2Hook", "connection_cursor", "EmptyMockConnectionCursor"], ["df", "hook", "get_pandas_df", "query", "schema", "self", "database"]], "query": [["query", "self", "table"], ["df", "hook", "get_pandas_df", "query", "schema", "self", "database"], ["query", "self", "table"], ["df", "hook", "get_pandas_df", "query", "schema", "self", "database"]]}, "name": "test_get_pandas_df", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["query", "self", "table"], ["df", "hook", "get_pandas_df", "query", "schema", "self", "database"], ["hook", "get_conn", "assert_called_with", "self", "database"], ["query", "self", "table"], ["df", "hook", "get_pandas_df", "query", "schema", "self", "database"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestHiveServer2Hook.test_get_pandas_df", "ret_exprs": [], "ret_type": "", "variables": {"df": "", "hook": "", "query": ""}, "variables_p": {"df": [["list", 0.3122999303198916], ["int", 0.28399976218684864], ["pandas.DataFrame", 0.11623658979624793], ["str", 0.09007199320228068]], "hook": [], "query": [["List[List[str]]", 0.10796602751098984], ["dict", 0.10364830045216723]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[746, 4], [752, 68]], "fn_var_ln": {"hook": [[747, 8], [747, 12]], "query": [[749, 8], [749, 13]], "results": [[750, 8], [750, 15]]}, "fn_var_occur": {"hook": [["hook", "MockHiveServer2Hook"], ["results", "hook", "get_results", "query", "schema", "self", "database"]], "query": [["query", "self", "table"], ["results", "hook", "get_results", "query", "schema", "self", "database"]], "results": [["results", "hook", "get_results", "query", "schema", "self", "database"], ["col", "col", "results", "self", "columns"]]}, "name": "test_get_results_header", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["query", "self", "table"], ["results", "hook", "get_results", "query", "schema", "self", "database"], ["col", "col", "results", "self", "columns"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestHiveServer2Hook.test_get_results_header", "ret_exprs": [], "ret_type": "", "variables": {"hook": "", "query": "", "results": ""}, "variables_p": {"hook": [["src.pip_shims.models.ShimmedPathCollection", 0.10146040617831845]], "query": [["bytes", 0.18020300012631602], ["str", 0.11506893724614092], ["set", 0.10906119974208156]], "results": [["int", 0.7236391923915145], ["List[int]", 0.09458883075328757], ["datetime.date.time", 0.0936289724797829]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[754, 4], [760, 50]], "fn_var_ln": {"hook": [[755, 8], [755, 12]], "query": [[757, 8], [757, 13]], "results": [[758, 8], [758, 15]]}, "fn_var_occur": {"hook": [["hook", "MockHiveServer2Hook"], ["results", "hook", "get_results", "query", "schema", "self", "database"]], "query": [["query", "self", "table"], ["results", "hook", "get_results", "query", "schema", "self", "database"]], "results": [["results", "hook", "get_results", "query", "schema", "self", "database"]]}, "name": "test_get_results_data", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["query", "self", "table"], ["results", "hook", "get_results", "query", "schema", "self", "database"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestHiveServer2Hook.test_get_results_data", "ret_exprs": [], "ret_type": "", "variables": {"hook": "", "query": "", "results": ""}, "variables_p": {"hook": [["src.pip_shims.models.ShimmedPathCollection", 0.10146040617831845]], "query": [["bytes", 0.18020300012631602], ["str", 0.11506893724614092], ["set", 0.10906119974208156]], "results": [["int", 0.5070717349530931], ["List[int]", 0.1344621365694244], ["Iterator[Any]", 0.09639879796370059], ["Mapping[str, List[Any]]", 0.08672926975085835], ["str", 0.0843580720260366]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[762, 4], [790, 27]], "fn_var_ln": {"_get_results": [[764, 8], [764, 25]], "csv_filepath": [[777, 8], [777, 20]], "df": [[787, 8], [787, 10]], "hook": [[763, 8], [763, 12]], "query": [[776, 8], [776, 13]]}, "fn_var_occur": {"_get_results": [["hook", "_get_results", "mock", "MagicMock", "return_value", "iter", "None", "None", "None", "None", "True", "None", "None", "None", "None", "True"]], "csv_filepath": [["hook", "to_csv", "query", "csv_filepath", "schema", "self", "database", "delimiter", "lineterminator", "output_header", "True", "fetch_size"], ["df", "pd", "read_csv", "csv_filepath", "sep"]], "df": [["df", "pd", "read_csv", "csv_filepath", "sep"], ["df", "columns", "tolist", "self", "columns"], ["df", "self", "columns", "values", "tolist"], ["len", "df"]], "hook": [["hook", "MockHiveServer2Hook"], ["hook", "_get_results", "mock", "MagicMock", "return_value", "iter", "None", "None", "None", "None", "True", "None", "None", "None", "None", "True"], ["hook", "to_csv", "query", "csv_filepath", "schema", "self", "database", "delimiter", "lineterminator", "output_header", "True", "fetch_size"]], "query": [["query", "self", "table"], ["hook", "to_csv", "query", "csv_filepath", "schema", "self", "database", "delimiter", "lineterminator", "output_header", "True", "fetch_size"]]}, "name": "test_to_csv", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["query", "self", "table"], ["hook", "to_csv", "query", "csv_filepath", "schema", "self", "database", "delimiter", "lineterminator", "output_header", "True", "fetch_size"], ["df", "columns", "tolist", "self", "columns"], ["df", "self", "columns", "values", "tolist"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestHiveServer2Hook.test_to_csv", "ret_exprs": [], "ret_type": "", "variables": {"_get_results": "", "csv_filepath": "", "df": "", "hook": "", "query": ""}, "variables_p": {"_get_results": [["bool", 0.603736120738031]], "csv_filepath": [["int", 0.3997363906588469], ["Dict[str, Union[Any, bytes]]", 0.2331356855966964], ["Pattern[str]", 0.09507616940884], ["str", 0.08377227907597412]], "df": [["list", 0.18279670285777871], ["str", 0.12986179007163312], ["Tuple[Literal, Literal, Literal, Literal, Literal]", 0.10304597840874548]], "hook": [], "query": [["dict", 0.17529239047228284], ["Tuple[Any, Any]", 0.08865619895221759]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[792, 4], [824, 94]], "fn_var_ln": {"hook": [[799, 8], [799, 12]], "results": [[812, 12], [812, 19]], "sqls": [[793, 8], [793, 12]]}, "fn_var_occur": {"hook": [["hook", "MockHiveServer2Hook"], ["results", "hook", "get_records", "sqls", "schema", "self", "database"], ["hook", "get_conn", "assert_called_with", "self", "database"], ["hook", "mock_cursor", "execute", "assert_any_call"], ["hook", "mock_cursor", "execute", "assert_any_call", "self", "table"], ["hook", "mock_cursor", "execute", "assert_any_call"], ["hook", "mock_cursor", "execute", "assert_any_call"], ["hook", "mock_cursor", "execute", "assert_any_call"], ["hook", "mock_cursor", "execute", "assert_any_call"], ["hook", "mock_cursor", "execute", "assert_any_call"], ["hook", "mock_cursor", "execute", "assert_any_call"], ["hook", "mock_cursor", "execute", "assert_any_call"]], "results": [["results", "hook", "get_records", "sqls", "schema", "self", "database"]], "sqls": [["sqls", "self", "table"], ["results", "hook", "get_records", "sqls", "schema", "self", "database"]]}, "name": "test_multi_statements", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["sqls", "self", "table"], ["results", "hook", "get_records", "sqls", "schema", "self", "database"], ["hook", "get_conn", "assert_called_with", "self", "database"], ["hook", "mock_cursor", "execute", "assert_any_call", "self", "table"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestHiveServer2Hook.test_multi_statements", "ret_exprs": [], "ret_type": "", "variables": {"hook": "", "results": "", "sqls": ""}, "variables_p": {"hook": [], "results": [["dict", 0.2342432910652837], ["Union[Literal, Literal]", 0.11100165705839181]], "sqls": [["str", 0.21257297675736814], ["bool", 0.10355610503825805], ["list", 0.08579142803835929], ["float", 0.0758088031728828]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[826, 4], [874, 42]], "fn_var_ln": {"_get_results": [[854, 12], [854, 29]], "dag_id_ctx_var_name": [[835, 8], [835, 27]], "dag_run_id_ctx_var_name": [[840, 8], [840, 31]], "execution_date_ctx_var_name": [[837, 8], [837, 35]], "hook": [[853, 12], [853, 16]], "hql": [[827, 8], [827, 11]], "output": [[867, 12], [867, 18]], "task_id_ctx_var_name": [[836, 8], [836, 28]]}, "fn_var_occur": {"_get_results": [["hook", "_get_results", "mock", "MagicMock", "return_value", "iter"]], "dag_id_ctx_var_name": [["dag_id_ctx_var_name", "AIRFLOW_VAR_NAME_FORMAT_MAPPING"], ["mock", "patch", "dict", "dag_id_ctx_var_name", "task_id_ctx_var_name", "execution_date_ctx_var_name", "dag_run_id_ctx_var_name"]], "dag_run_id_ctx_var_name": [["dag_run_id_ctx_var_name", "AIRFLOW_VAR_NAME_FORMAT_MAPPING"], ["mock", "patch", "dict", "dag_id_ctx_var_name", "task_id_ctx_var_name", "execution_date_ctx_var_name", "dag_run_id_ctx_var_name"]], "execution_date_ctx_var_name": [["execution_date_ctx_var_name", "AIRFLOW_VAR_NAME_FORMAT_MAPPING"], ["mock", "patch", "dict", "dag_id_ctx_var_name", "task_id_ctx_var_name", "execution_date_ctx_var_name", "dag_run_id_ctx_var_name"]], "hook": [["hook", "MockHiveServer2Hook"], ["hook", "_get_results", "mock", "MagicMock", "return_value", "iter"], ["output", "join", "res_tuple", "res_tuple", "hook", "get_results", "hql", "hive_conf"]], "hql": [["output", "join", "res_tuple", "res_tuple", "hook", "get_results", "hql", "hive_conf"]], "output": [["output", "join", "res_tuple", "res_tuple", "hook", "get_results", "hql", "hive_conf"]], "task_id_ctx_var_name": [["task_id_ctx_var_name", "AIRFLOW_VAR_NAME_FORMAT_MAPPING"], ["mock", "patch", "dict", "dag_id_ctx_var_name", "task_id_ctx_var_name", "execution_date_ctx_var_name", "dag_run_id_ctx_var_name"]]}, "name": "test_get_results_with_hive_conf", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestHiveServer2Hook.test_get_results_with_hive_conf", "ret_exprs": [], "ret_type": "", "variables": {"_get_results": "", "dag_id_ctx_var_name": "", "dag_run_id_ctx_var_name": "", "execution_date_ctx_var_name": "", "hook": "", "hql": "", "output": "", "task_id_ctx_var_name": ""}, "variables_p": {"_get_results": [], "dag_id_ctx_var_name": [["Dict[Any, str]", 0.3089103207919615], ["str", 0.30061709609895326], ["Dict[str, str]", 0.1960842556652363], ["Tuple[str]", 0.09856838100845276], ["dict", 0.09581994643539606]], "dag_run_id_ctx_var_name": [["str", 0.9018387816440337], ["Optional[str]", 0.09816121835596647]], "execution_date_ctx_var_name": [["str", 0.7111932373950889], ["Dict[str, Dict[str, str]]", 0.09567620756711513]], "hook": [["mock.MagicMock", 0.1902301995446634], ["Dict[str, str]", 0.11103864554979179], ["mock.Mock", 0.10254279349218766], ["mode.utils.mocks.Mock", 0.09365455916114065]], "hql": [["tuple", 1.0000000000000002]], "output": [["tuple", 0.9045868569925937], ["Tuple[Any, str]", 0.09541314300740653]], "task_id_ctx_var_name": [["str", 1.0]]}}], "name": "TestHiveServer2Hook", "q_name": "TestHiveServer2Hook", "variables": {}, "variables_p": {}}, {"cls_lc": [[878, 0], [904, 35]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[879, 4], [880, 45]], "fn_var_ln": {"nondefault_schema": [[880, 8], [880, 30]]}, "fn_var_occur": {"nondefault_schema": [["self", "nondefault_schema"]]}, "name": "setup_method", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "nondefault_schema"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestHiveCli.setup_method", "ret_exprs": [], "ret_type": "", "variables": {"nondefault_schema": ""}, "variables_p": {"nondefault_schema": [["str", 0.30000000000000004], ["Dict[str, Any]", 0.1], ["dict", 0.1], ["int", 0.1]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[882, 4], [893, 66]], "fn_var_ln": {"conn": [[887, 8], [887, 17]], "extra_dejson": [[885, 8], [885, 29]], "hook": [[883, 8], [883, 12]], "result": [[890, 8], [890, 14]], "returner": [[884, 8], [884, 16]], "use_beeline": [[886, 8], [886, 24]]}, "fn_var_occur": {"conn": [["hook", "conn", "returner"]], "extra_dejson": [["returner", "extra_dejson"]], "hook": [["hook", "MockHiveCliHook"], ["hook", "use_beeline", "True"], ["hook", "conn", "returner"], ["result", "hook", "_prepare_cli_cmd"]], "result": [["result", "hook", "_prepare_cli_cmd"]], "returner": [["returner", "mock", "MagicMock"], ["returner", "extra_dejson"], ["hook", "conn", "returner"]], "use_beeline": [["hook", "use_beeline", "True"]]}, "name": "test_get_proxy_user_value", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestHiveCli.test_get_proxy_user_value", "ret_exprs": [], "ret_type": "", "variables": {"conn": "", "extra_dejson": "", "hook": "", "result": "", "returner": "", "use_beeline": ""}, "variables_p": {"conn": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["str", 0.1], ["datetime.timedelta", 0.1]], "extra_dejson": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["str", 0.1], ["datetime.timedelta", 0.1]], "hook": [["libsoundtouch.tests.test_libsoundtouch.MockDevice", 0.2796528365945079], ["list", 0.17316603609605685], ["Dict[int, Dict[str, Any]]", 0.1684299286273867], ["str", 0.08733030537758588]], "result": [["list", 0.7]], "returner": [["mock.Mock", 0.8797191769962394]], "use_beeline": [["List[str]", 0.24722938071061223], ["bool", 0.2468155330197936], ["str", 0.18748752852515277], ["int", 0.1373307412382224], ["Dict[str, Any]", 0.0877787254583528]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[895, 4], [904, 35]], "fn_var_ln": {"conn": [[900, 8], [900, 17]], "extra_dejson": [[898, 8], [898, 29]], "hook": [[896, 8], [896, 12]], "returner": [[897, 8], [897, 16]], "use_beeline": [[899, 8], [899, 24]]}, "fn_var_occur": {"conn": [["hook", "conn", "returner"]], "extra_dejson": [["returner", "extra_dejson"]], "hook": [["hook", "MockHiveCliHook"], ["hook", "use_beeline", "True"], ["hook", "conn", "returner"], ["hook", "_prepare_cli_cmd"]], "returner": [["returner", "mock", "MagicMock"], ["returner", "extra_dejson"], ["hook", "conn", "returner"]], "use_beeline": [["hook", "use_beeline", "True"]]}, "name": "test_get_wrong_principal", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestHiveCli.test_get_wrong_principal", "ret_exprs": [], "ret_type": "", "variables": {"conn": "", "extra_dejson": "", "hook": "", "returner": "", "use_beeline": ""}, "variables_p": {"conn": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["str", 0.1], ["datetime.timedelta", 0.1]], "extra_dejson": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["str", 0.1], ["datetime.timedelta", 0.1]], "hook": [["libsoundtouch.tests.test_libsoundtouch.MockDevice", 0.24336129258546396], ["list", 0.19064938734960965], ["Dict[int, Dict[str, Any]]", 0.17445004826630625], ["List[str]", 0.09399964950978733], ["str", 0.08722502413315313]], "returner": [["mock.Mock", 0.8797191769962394]], "use_beeline": [["List[str]", 0.24722938071061223], ["bool", 0.2468155330197936], ["str", 0.18748752852515277], ["int", 0.1373307412382224], ["Dict[str, Any]", 0.0877787254583528]]}}], "name": "TestHiveCli", "q_name": "TestHiveCli", "variables": {}, "variables_p": {}}], "funcs": [], "imports": ["__future__", "annotations", "pytest", "airflow", "PY311", "datetime", "itertools", "collections", "OrderedDict", "namedtuple", "unittest", "mock", "pandas", "pd", "hmsclient", "HMSClient", "airflow", "exceptions", "AirflowException", "airflow", "models", "connection", "Connection", "airflow", "models", "dag", "DAG", "airflow", "providers", "apache", "hive", "hooks", "hive", "HiveCliHook", "HiveMetastoreHook", "HiveServer2Hook", "airflow", "secrets", "environment_variables", "CONN_ENV_PREFIX", "airflow", "utils", "timezone", "airflow", "utils", "operator_helpers", "AIRFLOW_VAR_NAME_FORMAT_MAPPING", "tests", "providers", "apache", "hive", "BaseMockConnectionCursor", "InvalidHiveCliHook", "MockHiveCliHook", "MockHiveServer2Hook", "MockSubProcess", "tests", "test_utils", "asserts", "assert_equal_ignore_multiple_spaces"], "mod_var_ln": {"DEFAULT_DATE": [[54, 0], [54, 12]], "DEFAULT_DATE_DS": [[56, 0], [56, 15]], "DEFAULT_DATE_ISO": [[55, 0], [55, 16]]}, "mod_var_occur": {"DEFAULT_DATE": [["DEFAULT_DATE_ISO", "DEFAULT_DATE", "isoformat"], ["self", "next_day", "DEFAULT_DATE", "datetime", "timedelta", "days", "isoformat"], ["args", "DEFAULT_DATE"]], "DEFAULT_DATE_DS": [["partition", "self", "partition_by", "DEFAULT_DATE_DS"], ["partition", "self", "partition_by", "DEFAULT_DATE_DS"], ["partitions", "self", "partition_by", "DEFAULT_DATE_DS"], ["filter_map", "self", "partition_by", "DEFAULT_DATE_DS"], ["partition", "DEFAULT_DATE_DS"], ["ret", "self", "hook", "drop_partitions", "self", "table", "db", "self", "database", "part_vals", "DEFAULT_DATE_DS"], ["metastore_mock", "drop_partition", "self", "table", "db", "self", "database", "part_vals", "DEFAULT_DATE_DS", "ret"]], "DEFAULT_DATE_ISO": [["DEFAULT_DATE_DS", "DEFAULT_DATE_ISO"]]}, "no_types_annot": {"D": 0, "I": 0, "U": 211}, "session_id": "qPHSthRkIn4ljSVGJyWooSaC6WV4yl9rJg9uRCsNG_k", "set": null, "tc": [false, null], "type_annot_cove": 0.0, "typed_seq": "", "untyped_seq": "", "variables": {"DEFAULT_DATE": "", "DEFAULT_DATE_DS": "", "DEFAULT_DATE_ISO": ""}, "variables_p": {"DEFAULT_DATE": [["datetime.datetime", 0.30728532063354813], ["Dict[str, Dict[int, Any]]", 0.10967244914872883], ["int", 0.10891052769522652], ["Pattern[str]", 0.1034240816016298], ["Dict[Any, List[str]]", 0.09742531667440846], ["Pattern[bytes]", 0.0962639468257778], ["datetime.date", 0.08871837347538473]], "DEFAULT_DATE_DS": [["datetime.datetime.datetime", 0.534974075893392], ["datetime.datetime", 0.27415818208414366], ["Pattern[str]", 0.09087210867905565]], "DEFAULT_DATE_ISO": [["datetime.datetime", 0.7668903076749892], ["int", 0.11824233664115807], ["Dict[Any, List[str]]", 0.11486735568385283]]}}}