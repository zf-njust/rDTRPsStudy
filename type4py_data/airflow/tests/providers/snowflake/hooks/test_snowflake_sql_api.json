{"error": null, "response": {"classes": [{"cls_lc": [[448, 8], [454, 32]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[449, 12], [451, 32]], "fn_var_ln": {"data": [[451, 16], [451, 25]], "status_code": [[450, 16], [450, 32]]}, "fn_var_occur": {"data": [["self", "data", "data"]], "status_code": [["self", "status_code", "status_code"]]}, "name": "__init__", "params": {"data": "", "self": "", "status_code": ""}, "params_descr": {"data": "", "self": "", "status_code": ""}, "params_occur": {"data": [["self", "data", "data"]], "self": [["self", "status_code", "status_code"], ["self", "data", "data"]], "status_code": [["self", "status_code", "status_code"]]}, "params_p": {"args": [], "data": [["int", 0.1924835568507386], ["str", 0.19098253342581595], ["Iterable[dict]", 0.11002709853713177], ["dict", 0.11002709853713177], ["Dict[str, str]", 0.10922181299389122], ["Optional[Dict]", 0.09209182444939061], ["Optional[str]", 0.08631045346469117]], "kwargs": [], "self": [], "status_code": [["int", 1.0]]}, "q_name": "TestSnowflakeSqlApiHook.test_get_sql_api_query_status.<locals>.MockResponse.__init__", "ret_exprs": [], "ret_type": "", "variables": {"data": "", "status_code": ""}, "variables_p": {"data": [["str", 0.462250797883658], ["dict", 0.13768206853990242], ["List[Dict[str, Any]]", 0.1201689055326541], ["float", 0.09440845285040626], ["requests.models.Response", 0.09209882510280241]], "status_code": [["int", 1.0]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[453, 12], [454, 32]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "json", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "data"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSnowflakeSqlApiHook.test_get_sql_api_query_status.<locals>.MockResponse.json", "ret_exprs": ["return self.data"], "ret_type": "", "ret_type_p": [["str", 0.2618957145135596], ["Optional[float]", 0.16455688318651607], ["int", 0.10872215137970408], ["List[Dict[str, Any]]", 0.10515277519084046], ["Dict[str, str]", 0.0958053345631056], ["bool", 0.0888678741243269]], "variables": {}, "variables_p": {}}], "name": "MockResponse", "q_name": "TestSnowflakeSqlApiHook.test_get_sql_api_query_status.<locals>.MockResponse", "variables": {}, "variables_p": {}}, {"cls_lc": [[133, 0], [512, 44]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": "Test execute_query method, run query by mocking post request method and return the query ids", "long_descr": null, "ret": null}, "fn_lc": [[144, 4], [164, 46]], "fn_var_ln": {"hook": [[162, 8], [162, 12]], "query_ids": [[163, 8], [163, 17]], "status_code_mock": [[159, 8], [159, 24]]}, "fn_var_occur": {"hook": [["hook", "SnowflakeSqlApiHook"], ["query_ids", "hook", "execute_query", "sql", "statement_count"]], "query_ids": [["query_ids", "hook", "execute_query", "sql", "statement_count"], ["query_ids", "expected_query_ids"]], "status_code_mock": [["status_code_mock", "mock", "PropertyMock", "return_value"], ["type", "mock_requests", "post", "return_value", "status_code", "status_code_mock"]]}, "name": "test_execute_query", "params": {"expected_query_ids": "", "expected_response": "", "mock_conn_param": "", "mock_get_header": "", "mock_requests": "", "self": "", "sql": "", "statement_count": ""}, "params_descr": {"expected_query_ids": "", "expected_response": "", "mock_conn_param": "", "mock_get_header": "", "mock_requests": "", "self": "", "sql": "", "statement_count": ""}, "params_occur": {"expected_query_ids": [["query_ids", "expected_query_ids"]], "expected_response": [["mock_requests", "post", "side_effect", "create_successful_response_mock", "expected_response"]], "mock_conn_param": [], "mock_get_header": [], "mock_requests": [["mock_requests", "codes", "ok"], ["mock_requests", "post", "side_effect", "create_successful_response_mock", "expected_response"], ["type", "mock_requests", "post", "return_value", "status_code", "status_code_mock"]], "self": [], "sql": [["query_ids", "hook", "execute_query", "sql", "statement_count"]], "statement_count": [["query_ids", "hook", "execute_query", "sql", "statement_count"]]}, "params_p": {"args": [], "expected_query_ids": [["mock.Mock", 0.1952276539805058]], "expected_response": [], "kwargs": [], "mock_conn_param": [["mock.Mock", 0.7826570529046353]], "mock_get_header": [["mock.Mock", 0.7826570529046353]], "mock_requests": [], "self": [], "sql": [["Iterable", 0.11076381555991459], ["ValueError", 0.08745636003089277]], "statement_count": [["Iterable", 0.11076381555991459], ["ValueError", 0.08745636003089277]]}, "q_name": "TestSnowflakeSqlApiHook.test_execute_query", "ret_exprs": [], "ret_type": "", "variables": {"hook": "", "query_ids": "", "status_code_mock": ""}, "variables_p": {"hook": [["int", 0.15929495986568434], ["Counter", 0.0955977181021817]], "query_ids": [["int", 0.24593759295075335], ["set", 0.21493496393910463], ["str", 0.08896036670510774], ["List[Dict[str, Any]]", 0.08585566457804537], ["list", 0.08530011657829076], ["Pattern[str]", 0.08041245719858502]], "status_code_mock": []}}, {"docstring": {"func": "Test execute_query method by mocking the exception response and raise airflow exception", "long_descr": "without statementHandle in the response", "ret": null}, "fn_lc": [[173, 4], [193, 29]], "fn_var_ln": {"hook": [[189, 8], [189, 12]], "side_effect": [[187, 8], [187, 19]]}, "fn_var_occur": {"hook": [["hook", "SnowflakeSqlApiHook"], ["hook", "execute_query", "sql", "statement_count"]], "side_effect": [["side_effect", "create_post_side_effect"], ["mock_requests", "post", "side_effect", "side_effect"]]}, "name": "test_execute_query_exception_without_statement_handel", "params": {"expected_query_ids": "", "expected_response": "", "mock_conn_param": "", "mock_get_header": "", "mock_requests": "", "self": "", "sql": "", "statement_count": ""}, "params_descr": {"expected_query_ids": "", "expected_response": "", "mock_conn_param": "", "mock_get_header": "", "mock_requests": "", "self": "", "sql": "", "statement_count": ""}, "params_occur": {"expected_query_ids": [], "expected_response": [], "mock_conn_param": [], "mock_get_header": [], "mock_requests": [["mock_requests", "post", "side_effect", "side_effect"]], "self": [], "sql": [["hook", "execute_query", "sql", "statement_count"]], "statement_count": [["hook", "execute_query", "sql", "statement_count"]]}, "params_p": {"args": [], "expected_query_ids": [["mock.Mock", 0.7649774240524386]], "expected_response": [["mock.Mock", 0.7649774240524386]], "kwargs": [], "mock_conn_param": [["mock.Mock", 0.7649774240524386]], "mock_get_header": [["mock.Mock", 0.7649774240524386]], "mock_requests": [["core_lib.core.models.Venue", 0.10384343752359648], ["mock.Mock", 0.08566811394538713]], "self": [], "sql": [], "statement_count": []}, "q_name": "TestSnowflakeSqlApiHook.test_execute_query_exception_without_statement_handel", "ret_exprs": [], "ret_type": "", "variables": {"hook": "", "side_effect": ""}, "variables_p": {"hook": [["str", 0.21382338853196511]], "side_effect": [["str", 0.7441219848463714], ["requests.compastr", 0.10238255489006354], ["dict", 0.08147439525498223]]}}, {"docstring": {"func": "Test check_query_output by passing query ids as params and mock get_request_url_header_params", "long_descr": null, "ret": null}, "fn_lc": [[206, 4], [215, 54]], "fn_var_ln": {"hook": [[212, 8], [212, 12]], "params": [[209, 8], [209, 14]], "req_id": [[208, 8], [208, 14]], "return_value": [[210, 8], [210, 46]]}, "fn_var_occur": {"hook": [["hook", "SnowflakeSqlApiHook"], ["mock", "patch", "object", "hook", "log", "mock_log_info"], ["hook", "check_query_output", "query_ids"]], "params": [["params", "str", "req_id"], ["mock_geturl_header_params", "return_value", "HEADERS", "params"]], "req_id": [["req_id", "uuid", "uuid4"], ["params", "str", "req_id"]], "return_value": [["mock_geturl_header_params", "return_value", "HEADERS", "params"], ["mock_requests", "get", "return_value", "json", "return_value", "GET_RESPONSE"]]}, "name": "test_check_query_output", "params": {"mock_geturl_header_params": "", "mock_requests": "", "query_ids": "", "self": ""}, "params_descr": {"mock_geturl_header_params": "", "mock_requests": "", "query_ids": "", "self": ""}, "params_occur": {"mock_geturl_header_params": [["mock_geturl_header_params", "return_value", "HEADERS", "params"]], "mock_requests": [["mock_requests", "get", "return_value", "json", "return_value", "GET_RESPONSE"]], "query_ids": [["hook", "check_query_output", "query_ids"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_geturl_header_params": [], "mock_requests": [], "query_ids": [["str", 0.4077465113324104], ["List[Dict[str, Any]]", 0.10394438646178138]], "self": []}, "q_name": "TestSnowflakeSqlApiHook.test_check_query_output", "ret_exprs": [], "ret_type": "", "variables": {"hook": "", "params": "", "req_id": "", "return_value": ""}, "variables_p": {"hook": [["str", 0.08841251659882858]], "params": [["int", 0.6001107327754356], ["str", 0.20346394220729264], ["Dict[str, str]", 0.10492890592275624], ["Dict[str, int]", 0.09149641909451563]], "req_id": [["uuid.UUID", 0.47597324323814527], ["int", 0.34691971247986797], ["str", 0.1771070442819866]], "return_value": [["rotkehlchen.tests.utils.mock.MockResponse", 0.3213462756538452], ["str", 0.11063363057177622], ["Dict[str, List[Any]]", 0.09786933378978413], ["Pattern[str]", 0.09355867048249025]]}}, {"docstring": {"func": "Test check_query_output by passing query ids as params and mock get_request_url_header_params", "long_descr": "to raise airflow exception and mock with http error", "ret": null}, "fn_lc": [[228, 4], [243, 36]], "fn_var_ln": {"hook": [[239, 8], [239, 12]], "mock_resp": [[236, 8], [236, 17]], "params": [[234, 8], [234, 14]], "req_id": [[233, 8], [233, 14]], "return_value": [[238, 8], [238, 34]], "status_code": [[237, 8], [237, 29]]}, "fn_var_occur": {"hook": [["hook", "SnowflakeSqlApiHook"], ["mock", "patch", "object", "hook", "log"], ["hook", "check_query_output", "query_ids"]], "mock_resp": [["mock_resp", "requests", "models", "Response"], ["mock_resp", "status_code"], ["mock_requests", "return_value", "mock_resp"]], "params": [["params", "str", "req_id"], ["mock_geturl_header_params", "return_value", "HEADERS", "params"]], "req_id": [["req_id", "uuid", "uuid4"], ["params", "str", "req_id"]], "return_value": [["mock_geturl_header_params", "return_value", "HEADERS", "params"], ["mock_requests", "return_value", "mock_resp"]], "status_code": [["mock_resp", "status_code"]]}, "name": "test_check_query_output_exception", "params": {"mock_geturl_header_params": "", "mock_requests": "", "query_ids": "", "self": ""}, "params_descr": {"mock_geturl_header_params": "", "mock_requests": "", "query_ids": "", "self": ""}, "params_occur": {"mock_geturl_header_params": [["mock_geturl_header_params", "return_value", "HEADERS", "params"]], "mock_requests": [["mock_requests", "return_value", "mock_resp"]], "query_ids": [["hook", "check_query_output", "query_ids"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_geturl_header_params": [], "mock_requests": [["int", 0.3192678988933035], ["str", 0.1842080181000993], ["bytes", 0.09706025378640522]], "query_ids": [["str", 0.387756179799648], ["List[Dict[str, Any]]", 0.12214908184207354], ["List[str]", 0.10472482009662641], ["Dict[str, Any]", 0.100017939495199], ["bytes", 0.09773517609298848]], "self": []}, "q_name": "TestSnowflakeSqlApiHook.test_check_query_output_exception", "ret_exprs": [], "ret_type": "", "variables": {"hook": "", "mock_resp": "", "params": "", "req_id": "", "return_value": "", "status_code": ""}, "variables_p": {"hook": [["Dict[str, Union[Any, Any, Any]]", 0.08539409781383195]], "mock_resp": [["requests.models.Response", 0.9999999999999998]], "params": [["int", 0.6001107327754356], ["str", 0.20346394220729264], ["Dict[str, str]", 0.10492890592275624], ["Dict[str, int]", 0.09149641909451563]], "req_id": [["uuid.UUID", 0.47597324323814527], ["int", 0.34691971247986797], ["str", 0.1771070442819866]], "return_value": [["str", 0.1989991583225616], ["Optional[bytes]", 0.18466648149938275], ["Dict[str, List[Any]]", 0.1784614427441194], ["mock._patch[Union[mock.AsyncMock, mock.MagicMock]]", 0.09121077100938023], ["rotkehlchen.tests.utils.mock.MockResponse", 0.08840286130246582]], "status_code": [["int", 0.5238294991761197], ["str", 0.47617050082388057]]}}, {"docstring": {"func": "Test get_request_url_header_params by mocking _get_conn_params and get_headers", "long_descr": null, "ret": null}, "fn_lc": [[247, 4], [254, 95]], "fn_var_ln": {"header": [[252, 8], [252, 14]], "hook": [[251, 8], [251, 12]], "params": [[252, 16], [252, 22]], "return_value": [[250, 8], [250, 36]], "url": [[252, 24], [252, 27]]}, "fn_var_occur": {"header": [["header", "params", "url", "hook", "get_request_url_header_params"], ["header", "HEADERS"]], "hook": [["hook", "SnowflakeSqlApiHook"], ["header", "params", "url", "hook", "get_request_url_header_params"]], "params": [["header", "params", "url", "hook", "get_request_url_header_params"]], "return_value": [["mock_conn_param", "return_value", "CONN_PARAMS"], ["mock_get_header", "return_value", "HEADERS"]], "url": [["header", "params", "url", "hook", "get_request_url_header_params"]]}, "name": "test_get_request_url_header_params", "params": {"mock_conn_param": "", "mock_get_header": "", "self": ""}, "params_descr": {"mock_conn_param": "", "mock_get_header": "", "self": ""}, "params_occur": {"mock_conn_param": [["mock_conn_param", "return_value", "CONN_PARAMS"]], "mock_get_header": [["mock_get_header", "return_value", "HEADERS"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_conn_param": [], "mock_get_header": [], "self": []}, "q_name": "TestSnowflakeSqlApiHook.test_get_request_url_header_params", "ret_exprs": [], "ret_type": "", "variables": {"header": "", "hook": "", "params": "", "return_value": "", "url": ""}, "variables_p": {"header": [["Dict[str, Any]", 0.19718270256130288], ["dict", 0.18233612965738177], ["Dict[str, str]", 0.11452550824993614], ["Dict[str, Union[bytes, str]]", 0.09699113849049253], ["requests.structures.CaseInsensitiveDict[requests.compastr]", 0.08906822858948743]], "hook": [["str", 0.11121307131803951], ["Dict[str, Any]", 0.09085790473099684]], "params": [["Dict[str, Any]", 0.44236652978247115], ["dict", 0.2724758879728681], ["int", 0.1032006074242714], ["Dict[str, Union[Any, str]]", 0.09096233320310193]], "return_value": [["Dict[str, Dict[str, Any]]", 0.313708837420281], ["str", 0.20352396859730632], ["Dict[int, Tuple[str, str, str, str]]", 0.18523398523334175], ["int", 0.11055371509631355], ["float", 0.09501550588114646]], "url": [["str", 0.46944673005288046], ["Dict[str, Any]", 0.09227919113074028]]}}, {"docstring": {"func": "Test get_headers method by mocking get_private_key and _get_conn_params method", "long_descr": null, "ret": null}, "fn_lc": [[259, 4], [265, 32]], "fn_var_ln": {"hook": [[263, 8], [263, 12]], "result": [[264, 8], [264, 14]], "return_value": [[262, 8], [262, 36]]}, "fn_var_occur": {"hook": [["hook", "SnowflakeSqlApiHook", "snowflake_conn_id"], ["result", "hook", "get_headers"]], "result": [["result", "hook", "get_headers"], ["result", "HEADERS"]], "return_value": [["mock_get_token", "return_value"], ["mock_conn_param", "return_value", "CONN_PARAMS"]]}, "name": "test_get_headers", "params": {"mock_conn_param": "", "mock_get_token": "", "mock_private_key": "", "self": ""}, "params_descr": {"mock_conn_param": "", "mock_get_token": "", "mock_private_key": "", "self": ""}, "params_occur": {"mock_conn_param": [["mock_conn_param", "return_value", "CONN_PARAMS"]], "mock_get_token": [["mock_get_token", "return_value"]], "mock_private_key": [], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_conn_param": [], "mock_get_token": [], "mock_private_key": [["mock.Mock", 0.31233346234382797]], "self": []}, "q_name": "TestSnowflakeSqlApiHook.test_get_headers", "ret_exprs": [], "ret_type": "", "variables": {"hook": "", "result": "", "return_value": ""}, "variables_p": {"hook": [["str", 0.21513031160765933]], "result": [["str", 0.7144973235929643], ["Dict[str, Any]", 0.11467372063531786], ["Dict[str, str]", 0.0865407644775294], ["OrderedDict[str, str]", 0.08428819129418844]], "return_value": [["list", 0.20764074821529555], ["List[str]", 0.13924710555618824], ["str", 0.10464933579986264], ["Tuple[int, int]", 0.10217605473733168], ["Dict[str, Dict[str, Any]]", 0.0905315814139121], ["Optional[bytes]", 0.08866641135879565], ["List[int]", 0.07301914676111726], ["Dict[str, Union[Any, Any, Any, Any]]", 0.07080385659802933]]}}, {"docstring": {"func": "Encrypt the pem file from the path", "long_descr": null, "ret": null}, "fn_lc": [[268, 4], [276, 28]], "fn_var_ln": {"key": [[270, 8], [270, 11]], "private_key": [[271, 8], [271, 19]], "test_key_file": [[274, 8], [274, 21]]}, "fn_var_occur": {"key": [["key", "rsa", "generate_private_key", "backend", "default_backend", "public_exponent", "key_size"], ["private_key", "key", "private_bytes", "serialization", "Encoding", "PEM", "serialization", "PrivateFormat", "PKCS8", "serialization", "NoEncryption"]], "private_key": [["private_key", "key", "private_bytes", "serialization", "Encoding", "PEM", "serialization", "PrivateFormat", "PKCS8", "serialization", "NoEncryption"], ["test_key_file", "write_bytes", "private_key"]], "test_key_file": [["test_key_file", "tmp_path"], ["test_key_file", "write_bytes", "private_key"]]}, "name": "non_encrypted_temporary_private_key", "params": {"self": "", "tmp_path": "pathlib.Path"}, "params_descr": {"self": "", "tmp_path": ""}, "params_occur": {"self": [], "tmp_path": [["test_key_file", "tmp_path"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "tmp_path": [["pathlib.Path", 0.5875146770539749], ["pathlib.PurePath", 0.21005340520836313], ["Iterable[str]", 0.10750814630727225], ["str", 0.09492377143038981]]}, "q_name": "TestSnowflakeSqlApiHook.non_encrypted_temporary_private_key", "ret_exprs": ["return test_key_file"], "ret_type": "pathlib.Path", "ret_type_p": [["str", 0.1956642089715885], ["dict", 0.17974457620649376], ["List[int]", 0.1175963432180135], ["salon.models.Stylist", 0.11123073702007848], ["Mapping[str, Any]", 0.09229844483035694]], "variables": {"key": "", "private_key": "", "test_key_file": ""}, "variables_p": {"key": [["bytes", 0.45861204867277444]], "private_key": [["str", 0.589338786583619], ["Dict[str, List[str]]", 0.10468774818030648], ["Dict[str, str]", 0.07126588445141452], ["bytes", 0.06702430291376883]], "test_key_file": [["str", 0.667396442415038], ["pathlib.Path", 0.22772872624663254]]}}, {"docstring": {"func": "Encrypt private key from the temp path", "long_descr": null, "ret": null}, "fn_lc": [[279, 4], [289, 28]], "fn_var_ln": {"key": [[281, 8], [281, 11]], "private_key": [[282, 8], [282, 19]], "test_key_file": [[287, 8], [287, 21]]}, "fn_var_occur": {"key": [["key", "rsa", "generate_private_key", "backend", "default_backend", "public_exponent", "key_size"], ["private_key", "key", "private_bytes", "serialization", "Encoding", "PEM", "serialization", "PrivateFormat", "PKCS8", "encryption_algorithm", "serialization", "BestAvailableEncryption", "_PASSWORD", "encode"]], "private_key": [["private_key", "key", "private_bytes", "serialization", "Encoding", "PEM", "serialization", "PrivateFormat", "PKCS8", "encryption_algorithm", "serialization", "BestAvailableEncryption", "_PASSWORD", "encode"], ["test_key_file", "write_bytes", "private_key"]], "test_key_file": [["test_key_file", "pathlib", "Path", "tmp_path"], ["test_key_file", "write_bytes", "private_key"]]}, "name": "encrypted_temporary_private_key", "params": {"self": "", "tmp_path": "pathlib.Path"}, "params_descr": {"self": "", "tmp_path": ""}, "params_occur": {"self": [], "tmp_path": [["test_key_file", "pathlib", "Path", "tmp_path"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "tmp_path": [["pathlib.Path", 0.6780857197060677], ["str", 0.253354463717896]]}, "q_name": "TestSnowflakeSqlApiHook.encrypted_temporary_private_key", "ret_exprs": ["return test_key_file"], "ret_type": "pathlib.Path", "ret_type_p": [["List[int]", 0.1216501931768469], ["Iterable[Tuple[str, str]]", 0.11191714240071485], ["dict", 0.10259619117455517], ["MutableMapping[str, Any]", 0.09754376355766428], ["str", 0.0947965395121045], ["List[str]", 0.08823650795523158], ["Mapping[str, Any]", 0.0876387781626865], ["salon.models.Stylist", 0.08733731326304697]], "variables": {"key": "", "private_key": "", "test_key_file": "pathlib.Path"}, "variables_p": {"key": [["bytes", 0.45861204867277444]], "private_key": [["str", 0.8724369634198912], ["Dict[str, List[str]]", 0.1275630365801088]], "test_key_file": [["pathlib.Path", 1.0]]}}, {"docstring": {"func": "Test get_private_key function with private_key_content in connection", "long_descr": null, "ret": null}, "fn_lc": [[291, 4], [312, 47]], "fn_var_ln": {"connection_kwargs": [[295, 8], [295, 25]], "hook": [[310, 12], [310, 16]]}, "fn_var_occur": {"connection_kwargs": [["connection_kwargs", "typing", "Any", "BASE_CONNECTION_KWARGS", "_PASSWORD", "str", "encrypted_temporary_private_key", "read_text"], ["unittest", "mock", "patch", "dict", "AIRFLOW_CONN_TEST_CONN", "Connection", "connection_kwargs", "get_uri"]], "hook": [["hook", "SnowflakeSqlApiHook", "snowflake_conn_id"], ["hook", "get_private_key"], ["hook", "private_key", "None"]]}, "name": "test_get_private_key_should_support_private_auth_in_connection", "params": {"encrypted_temporary_private_key": "pathlib.Path", "self": ""}, "params_descr": {"encrypted_temporary_private_key": "", "self": ""}, "params_occur": {"encrypted_temporary_private_key": [["connection_kwargs", "typing", "Any", "BASE_CONNECTION_KWARGS", "_PASSWORD", "str", "encrypted_temporary_private_key", "read_text"]], "self": []}, "params_p": {"args": [], "encrypted_temporary_private_key": [["str", 0.8034280318748243]], "kwargs": [], "self": []}, "q_name": "TestSnowflakeSqlApiHook.test_get_private_key_should_support_private_auth_in_connection", "ret_exprs": [], "ret_type": "", "variables": {"connection_kwargs": "typing.Any", "hook": ""}, "variables_p": {"connection_kwargs": [["Dict[str, str]", 0.2579293187905584], ["list", 0.19919497582128678], ["dict", 0.1586129614923329], ["str", 0.10373990542518521], ["pathlib.Path", 0.09703716123818076], ["Dict[str, Any]", 0.08661761714240336]], "hook": []}}, {"docstring": {"func": "Test get_private_key function with private_key_content and private_key_file in connection", "long_descr": "and raise airflow exception", "ret": null}, "fn_lc": [[314, 4], [340, 34]], "fn_var_ln": {"connection_kwargs": [[319, 8], [319, 25]], "hook": [[332, 8], [332, 12]]}, "fn_var_occur": {"connection_kwargs": [["connection_kwargs", "typing", "Any", "BASE_CONNECTION_KWARGS", "_PASSWORD", "str", "encrypted_temporary_private_key", "read_text", "str", "encrypted_temporary_private_key"], ["unittest", "mock", "patch", "dict", "AIRFLOW_CONN_TEST_CONN", "Connection", "connection_kwargs", "get_uri"]], "hook": [["hook", "SnowflakeSqlApiHook", "snowflake_conn_id"], ["hook", "get_private_key"]]}, "name": "test_get_private_key_raise_exception", "params": {"encrypted_temporary_private_key": "pathlib.Path", "self": ""}, "params_descr": {"encrypted_temporary_private_key": "", "self": ""}, "params_occur": {"encrypted_temporary_private_key": [["connection_kwargs", "typing", "Any", "BASE_CONNECTION_KWARGS", "_PASSWORD", "str", "encrypted_temporary_private_key", "read_text", "str", "encrypted_temporary_private_key"]], "self": []}, "params_p": {"args": [], "encrypted_temporary_private_key": [["str", 0.6034934328195027], ["bytes", 0.1026766100582878], ["dict", 0.09617237432655455], ["Optional[str]", 0.09213303406780747]], "kwargs": [], "self": []}, "q_name": "TestSnowflakeSqlApiHook.test_get_private_key_raise_exception", "ret_exprs": [], "ret_type": "", "variables": {"connection_kwargs": "typing.Any", "hook": ""}, "variables_p": {"connection_kwargs": [["str", 0.46918132524025524], ["list", 0.24952167186310897], ["Dict[str, Any]", 0.10019187759406391], ["Dict[str, Union[None, Any, str]]", 0.09169005454988878]], "hook": [["uuid.UUID", 0.09542852496895533], ["str", 0.08562480238734665]]}}, {"docstring": {"func": "Test get_private_key method by supporting for private auth encrypted_key", "long_descr": null, "ret": null}, "fn_lc": [[342, 4], [363, 47]], "fn_var_ln": {"connection_kwargs": [[346, 8], [346, 25]], "hook": [[361, 12], [361, 16]]}, "fn_var_occur": {"connection_kwargs": [["connection_kwargs", "BASE_CONNECTION_KWARGS", "_PASSWORD", "str", "encrypted_temporary_private_key"], ["unittest", "mock", "patch", "dict", "AIRFLOW_CONN_TEST_CONN", "Connection", "connection_kwargs", "get_uri"]], "hook": [["hook", "SnowflakeSqlApiHook", "snowflake_conn_id"], ["hook", "get_private_key"], ["hook", "private_key", "None"]]}, "name": "test_get_private_key_should_support_private_auth_with_encrypted_key", "params": {"encrypted_temporary_private_key": "", "self": ""}, "params_descr": {"encrypted_temporary_private_key": "", "self": ""}, "params_occur": {"encrypted_temporary_private_key": [["connection_kwargs", "BASE_CONNECTION_KWARGS", "_PASSWORD", "str", "encrypted_temporary_private_key"]], "self": []}, "params_p": {"args": [], "encrypted_temporary_private_key": [["bytes", 0.2920728258045934], ["str", 0.1892496712185555], ["pathlib.Path", 0.09816238352393863]], "kwargs": [], "self": []}, "q_name": "TestSnowflakeSqlApiHook.test_get_private_key_should_support_private_auth_with_encrypted_key", "ret_exprs": [], "ret_type": "", "variables": {"connection_kwargs": "", "hook": ""}, "variables_p": {"connection_kwargs": [["Dict[str, Union[Any, Any]]", 0.0908141994938383]], "hook": []}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[365, 4], [398, 80]], "fn_var_ln": {"connection_kwargs": [[369, 8], [369, 25]], "hook": [[391, 12], [391, 16]]}, "fn_var_occur": {"connection_kwargs": [["connection_kwargs", "BASE_CONNECTION_KWARGS", "None", "str", "non_encrypted_temporary_private_key"], ["unittest", "mock", "patch", "dict", "AIRFLOW_CONN_TEST_CONN", "Connection", "connection_kwargs", "get_uri"], ["unittest", "mock", "patch", "dict", "AIRFLOW_CONN_TEST_CONN", "Connection", "connection_kwargs", "get_uri"], ["connection_kwargs", "_PASSWORD"], ["unittest", "mock", "patch", "dict", "AIRFLOW_CONN_TEST_CONN", "Connection", "connection_kwargs", "get_uri"]], "hook": [["hook", "SnowflakeSqlApiHook", "snowflake_conn_id"], ["hook", "get_private_key"], ["hook", "private_key", "None"], ["hook", "SnowflakeSqlApiHook", "snowflake_conn_id"], ["hook", "get_private_key"], ["hook", "private_key", "None"]]}, "name": "test_get_private_key_should_support_private_auth_with_unencrypted_key", "params": {"non_encrypted_temporary_private_key": "", "self": ""}, "params_descr": {"non_encrypted_temporary_private_key": "", "self": ""}, "params_occur": {"non_encrypted_temporary_private_key": [["connection_kwargs", "BASE_CONNECTION_KWARGS", "None", "str", "non_encrypted_temporary_private_key"]], "self": []}, "params_p": {"args": [], "kwargs": [], "non_encrypted_temporary_private_key": [["bool", 0.30266449197175016], ["Optional[\"Frame\"]", 0.10075238946001402], ["Optional[\"Page\"]", 0.09698095618858392], ["Optional[Mapping[str, Any]]", 0.09601613204539355], ["str", 0.09601613204539355]], "self": []}, "q_name": "TestSnowflakeSqlApiHook.test_get_private_key_should_support_private_auth_with_unencrypted_key", "ret_exprs": [], "ret_type": "", "variables": {"connection_kwargs": "", "hook": ""}, "variables_p": {"connection_kwargs": [["Dict[str, Any]", 0.10831875705570798], ["Dict[str, str]", 0.09732538496676804], ["Union[Literal, Literal]", 0.08853835290263981], ["Dict[str, List[int]]", 0.08828168083764375]], "hook": [["Dict[str, str]", 0.21258443113063552], ["str", 0.17784105576190304], ["List[Optional[Any]]", 0.1226823759041431]]}}, {"docstring": {"func": "Test get_sql_api_query_status function by mocking the status, response and expected", "long_descr": "response", "ret": null}, "fn_lc": [[439, 4], [458, 73]], "fn_var_ln": {"hook": [[457, 8], [457, 12]], "params": [[445, 8], [445, 14]], "req_id": [[444, 8], [444, 14]], "return_value": [[446, 8], [446, 46]]}, "fn_var_occur": {"hook": [["hook", "SnowflakeSqlApiHook", "snowflake_conn_id"], ["hook", "get_sql_api_query_status", "expected_response"]], "params": [], "req_id": [], "return_value": [["mock_requests", "get", "return_value", "MockResponse", "status_code", "response"]]}, "name": "test_get_sql_api_query_status", "params": {"expected_response": "", "mock_geturl_header_params": "", "mock_requests": "", "response": "", "self": "", "status_code": ""}, "params_descr": {"expected_response": "", "mock_geturl_header_params": "", "mock_requests": "", "response": "", "self": "", "status_code": ""}, "params_occur": {"expected_response": [["hook", "get_sql_api_query_status", "expected_response"]], "mock_geturl_header_params": [], "mock_requests": [["mock_requests", "get", "return_value", "MockResponse", "status_code", "response"]], "response": [["mock_requests", "get", "return_value", "MockResponse", "status_code", "response"]], "self": [], "status_code": [["mock_requests", "get", "return_value", "MockResponse", "status_code", "response"]]}, "params_p": {"args": [], "expected_response": [["mock.Mock", 0.19250212120238694]], "kwargs": [], "mock_geturl_header_params": [["mock.Mock", 0.2975948346915792]], "mock_requests": [["bool", 0.19397244566454344], ["bytes", 0.11452375904194795]], "response": [["bool", 0.19397244566454344], ["bytes", 0.11452375904194795]], "self": [], "status_code": [["bool", 0.19397244566454344], ["bytes", 0.11452375904194795]]}, "q_name": "TestSnowflakeSqlApiHook.test_get_sql_api_query_status", "ret_exprs": [], "ret_type": "", "variables": {"hook": "", "params": "", "req_id": "", "return_value": ""}, "variables_p": {"hook": [["str", 0.09361155428900526]], "params": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "req_id": [["Optional[str]", 0.09999999999999999], ["int", 0.09999999999999999], ["List[int]", 0.09999999999999999], ["services.ticketing.transfer.models.TicketID", 0.09999999999999999], ["Type[models.User]", 0.09999999999999999], ["shop.transfer.models.ShopID", 0.09999999999999999], ["Type[pipeline.netfile.models.AbstractSchedule]", 0.09999999999999999]], "return_value": [["List[str]", 0.30601313849095174], ["staticmethod", 0.1924908014516039], ["Dict[str, Union[int, str]]", 0.10773275075579197], ["List[Dict[str, Any]]", 0.09211873247713376], ["Dict[str, Union[Any, Any, Any]]", 0.0895818116542784], ["int", 0.08927307891644351]]}}, {"docstring": {"func": "Test Async get_sql_api_query_status_async function by mocking the status,", "long_descr": "response and expected response", "ret": null}, "fn_lc": [[500, 4], [512, 44]], "fn_var_ln": {"hook": [[510, 8], [510, 12]], "params": [[506, 8], [506, 14]], "req_id": [[505, 8], [505, 14]], "response": [[511, 8], [511, 16]], "return_value": [[507, 8], [507, 46]]}, "fn_var_occur": {"hook": [["hook", "SnowflakeSqlApiHook", "snowflake_conn_id"], ["response", "hook", "get_sql_api_query_status_async"]], "params": [["params", "str", "req_id"], ["mock_geturl_header_params", "return_value", "HEADERS", "params"]], "req_id": [["req_id", "uuid", "uuid4"], ["params", "str", "req_id"]], "response": [["mock_get", "return_value", "__aenter__", "return_value", "json", "AsyncMock", "return_value", "response"], ["response", "hook", "get_sql_api_query_status_async"], ["response", "expected_response"]], "return_value": [["mock_geturl_header_params", "return_value", "HEADERS", "params"], ["mock_get", "return_value", "__aenter__", "return_value", "status", "status_code"], ["mock_get", "return_value", "__aenter__", "return_value", "json", "AsyncMock", "return_value", "response"]]}, "name": "test_get_sql_api_query_status_async", "params": {"expected_response": "", "mock_get": "", "mock_geturl_header_params": "", "response": "", "self": "", "status_code": ""}, "params_descr": {"expected_response": "", "mock_get": "", "mock_geturl_header_params": "", "response": "", "self": "", "status_code": ""}, "params_occur": {"expected_response": [["response", "expected_response"]], "mock_get": [["mock_get", "return_value", "__aenter__", "return_value", "status", "status_code"], ["mock_get", "return_value", "__aenter__", "return_value", "json", "AsyncMock", "return_value", "response"]], "mock_geturl_header_params": [["mock_geturl_header_params", "return_value", "HEADERS", "params"]], "response": [["mock_get", "return_value", "__aenter__", "return_value", "json", "AsyncMock", "return_value", "response"], ["response", "hook", "get_sql_api_query_status_async"], ["response", "expected_response"]], "self": [], "status_code": [["mock_get", "return_value", "__aenter__", "return_value", "status", "status_code"]]}, "params_p": {"args": [], "expected_response": [["Dict[str, Sequence[Any]]", 0.09728319083948131]], "kwargs": [], "mock_get": [["int", 0.22502033355523804]], "mock_geturl_header_params": [], "response": [], "self": [], "status_code": []}, "q_name": "TestSnowflakeSqlApiHook.test_get_sql_api_query_status_async", "ret_exprs": [], "ret_type": "", "variables": {"hook": "", "params": "", "req_id": "", "response": "", "return_value": ""}, "variables_p": {"hook": [], "params": [["int", 0.6001107327754356], ["str", 0.20346394220729264], ["Dict[str, str]", 0.10492890592275624], ["Dict[str, int]", 0.09149641909451563]], "req_id": [["uuid.UUID", 0.47597324323814527], ["int", 0.34691971247986797], ["str", 0.1771070442819866]], "response": [["bytes", 0.17884456749668592], ["Counter", 0.13561381327772729], ["str", 0.09251557881180952], ["Dict[str, str]", 0.08611742118670525], ["requests.auth.HTTPDigestAuth", 0.0825648918061393], ["list", 0.078015857780096], ["requests.models.Response", 0.07653651336822785], ["Dict[str, Dict[str, Any]]", 0.07528882427691783]], "return_value": [["Dict[str, int]", 0.18102531675067562], ["Dict[str, List[Any]]", 0.11063496847174532], ["float", 0.10628759741563817], ["Tuple[int, int]", 0.09310665396363184], ["str", 0.08813358598195455], ["int", 0.08404084155552943]]}}], "name": "TestSnowflakeSqlApiHook", "q_name": "TestSnowflakeSqlApiHook", "variables": {}, "variables_p": {}}], "funcs": [{"docstring": {"func": "Create mock response for success state", "long_descr": null, "ret": null}, "fn_lc": [[116, 0], [121, 19]], "fn_var_ln": {"response": [[118, 4], [118, 12]], "status_code": [[120, 4], [120, 24]]}, "fn_var_occur": {"response": [["response", "mock", "MagicMock"], ["response", "json", "return_value", "content"], ["response", "status_code"]], "status_code": [["response", "status_code"]]}, "name": "create_successful_response_mock", "params": {"content": ""}, "params_descr": {"content": ""}, "params_occur": {"content": [["response", "json", "return_value", "content"]]}, "params_p": {"args": [], "content": [["str", 0.3693545074557515], ["List[str]", 0.10769260903460652], ["dict", 0.10108152326506795], ["int", 0.08125509027247325], ["Dict[str, Any]", 0.07866207764176907]], "kwargs": []}, "q_name": "create_successful_response_mock", "ret_exprs": ["return response"], "ret_type": "", "ret_type_p": [["dict", 0.3171781601544934], ["Optional[str]", 0.12476370858927086], ["Dict[str, Any]", 0.09839339880123994], ["bool", 0.08856856093692717], ["List[dict]", 0.08573598788282824], ["List[str]", 0.081432411437158]], "variables": {"response": "", "status_code": ""}, "variables_p": {"response": [["mock.MagicMock", 0.10193243203350784], ["mock.Mock", 0.09835446805704372]], "status_code": [["int", 0.3477481137026018], ["List[int]", 0.2005213624357815], ["Dict[int, bytes]", 0.18599700152737064], ["List[Tuple[Any, str]]", 0.08936090893080435], ["Set[int]", 0.08887963446956011], ["frozenset[int]", 0.08749297893388158]]}}, {"docstring": {"func": "create mock response for post side effect", "long_descr": null, "ret": null}, "fn_lc": [[124, 0], [130, 19]], "fn_var_ln": {"reason": [[128, 4], [128, 19]], "response": [[126, 4], [126, 12]], "status_code": [[127, 4], [127, 24]]}, "fn_var_occur": {"reason": [["response", "reason"]], "response": [["response", "mock", "MagicMock"], ["response", "status_code", "status_code"], ["response", "reason"], ["response", "raise_for_status", "side_effect", "requests", "exceptions", "HTTPError", "response", "response"]], "status_code": [["response", "status_code", "status_code"]]}, "name": "create_post_side_effect", "params": {"status_code": ""}, "params_descr": {"status_code": ""}, "params_occur": {"status_code": [["response", "status_code", "status_code"]]}, "params_p": {"args": [], "kwargs": [], "status_code": [["int", 0.9999999999999998]]}, "q_name": "create_post_side_effect", "ret_exprs": ["return response"], "ret_type": "", "ret_type_p": [["List[str]", 0.10830375273670301], ["bool", 0.10564608420994895], ["dict", 0.09471560159253693], ["Dict[str, Tuple[str, str]]", 0.0909494200022016]], "variables": {"reason": "", "response": "", "status_code": ""}, "variables_p": {"reason": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["str", 0.1]], "response": [["mock.MagicMock", 0.1829643711733906]], "status_code": [["int", 0.9999999999999999]]}}], "imports": ["__future__", "annotations", "unittest", "uuid", "pathlib", "Path", "typing", "Any", "unittest", "mock", "unittest", "mock", "AsyncMock", "pytest", "requests", "cryptography", "hazmat", "backends", "default_backend", "cryptography", "hazmat", "primitives", "serialization", "cryptography", "hazmat", "primitives", "asymmetric", "rsa", "airflow", "AirflowException", "airflow", "models", "Connection", "airflow", "providers", "snowflake", "hooks", "snowflake_sql_api", "SnowflakeSqlApiHook"], "mod_var_ln": {"BASE_CONNECTION_KWARGS": [[45, 0], [45, 22]], "CONN_PARAMS": [[58, 0], [58, 11]], "GET_RESPONSE": [[79, 0], [79, 12]], "HEADERS": [[71, 0], [71, 7]], "SINGLE_STMT": [[44, 0], [44, 11]], "SQL_MULTIPLE_STMTS": [[38, 0], [38, 18]], "_PASSWORD": [[42, 0], [42, 9]]}, "mod_var_occur": {"BASE_CONNECTION_KWARGS": [["connection_kwargs", "typing", "Any", "BASE_CONNECTION_KWARGS", "_PASSWORD", "str", "encrypted_temporary_private_key", "read_text"], ["connection_kwargs", "typing", "Any", "BASE_CONNECTION_KWARGS", "_PASSWORD", "str", "encrypted_temporary_private_key", "read_text", "str", "encrypted_temporary_private_key"], ["connection_kwargs", "BASE_CONNECTION_KWARGS", "_PASSWORD", "str", "encrypted_temporary_private_key"], ["connection_kwargs", "BASE_CONNECTION_KWARGS", "None", "str", "non_encrypted_temporary_private_key"]], "CONN_PARAMS": [["mock_conn_param", "return_value", "CONN_PARAMS"], ["mock_conn_param", "return_value", "CONN_PARAMS"]], "GET_RESPONSE": [["mock_requests", "get", "return_value", "json", "return_value", "GET_RESPONSE"], ["mock_log_info", "assert_called_with", "GET_RESPONSE"]], "HEADERS": [["mock_geturl_header_params", "return_value", "HEADERS", "params"], ["mock_geturl_header_params", "return_value", "HEADERS", "params"], ["mock_get_header", "return_value", "HEADERS"], ["header", "HEADERS"], ["result", "HEADERS"], ["mock_geturl_header_params", "return_value", "HEADERS", "params"], ["mock_geturl_header_params", "return_value", "HEADERS", "params"]], "SINGLE_STMT": [], "SQL_MULTIPLE_STMTS": [], "_PASSWORD": [["private_key", "key", "private_bytes", "serialization", "Encoding", "PEM", "serialization", "PrivateFormat", "PKCS8", "encryption_algorithm", "serialization", "BestAvailableEncryption", "_PASSWORD", "encode"], ["connection_kwargs", "typing", "Any", "BASE_CONNECTION_KWARGS", "_PASSWORD", "str", "encrypted_temporary_private_key", "read_text"], ["connection_kwargs", "typing", "Any", "BASE_CONNECTION_KWARGS", "_PASSWORD", "str", "encrypted_temporary_private_key", "read_text", "str", "encrypted_temporary_private_key"], ["connection_kwargs", "BASE_CONNECTION_KWARGS", "_PASSWORD", "str", "encrypted_temporary_private_key"], ["connection_kwargs", "_PASSWORD"]]}, "no_types_annot": {"D": 10, "I": 0, "U": 109}, "session_id": "L-eCDgJbHTW3HGSnT_qshO6Wk5qOapcqhDdwynUKpjo", "set": null, "tc": [false, null], "type_annot_cove": 0.08, "typed_seq": "", "untyped_seq": "", "variables": {"BASE_CONNECTION_KWARGS": "builtins.dict", "CONN_PARAMS": "", "GET_RESPONSE": "", "HEADERS": "", "SINGLE_STMT": "", "SQL_MULTIPLE_STMTS": "", "_PASSWORD": ""}, "variables_p": {"BASE_CONNECTION_KWARGS": [["str", 0.900900803059677], ["Final", 0.09909919694032318]], "CONN_PARAMS": [["int", 0.4566638755690749], ["bytes", 0.1607984169048908], ["Dict[str, Union[Any, Any, Any]]", 0.07761261395638584], ["Dict[str, Dict[str, Any]]", 0.07761261395638584], ["List[Dict[str, Any]]", 0.07761261395638584], ["list", 0.07761261395638584], ["Dict[str, Optional[Any]]", 0.07208725170049106]], "GET_RESPONSE": [["Dict[str, str]", 0.16344468023423428], ["Dict[str, List[Any]]", 0.1617597451231022], ["List[Tuple[str, Any]]", 0.1205900993722093], ["Dict[str, List[str]]", 0.11812940806223582], ["Dict[str, Union[Any, int, str]]", 0.09771597421420347], ["str", 0.08218799526273848]], "HEADERS": [["Dict[str, str]", 0.5674771278940487], ["Dict[Any, Union[Any, Any]]", 0.10369442497371524], ["Pattern[str]", 0.08836244763657512], ["Dict[Any, str]", 0.0815518023170356], ["Dict[str, Union[None, Any, int]]", 0.08030287397493002]], "SINGLE_STMT": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "SQL_MULTIPLE_STMTS": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "_PASSWORD": [["str", 0.6991030411426994], ["List[str]", 0.12027404213701379], ["Dict[str, List[str]]", 0.0911943622802518], ["Tuple[Literal]", 0.08942855444003511]]}}}