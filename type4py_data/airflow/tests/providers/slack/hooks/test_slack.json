{"error": null, "response": {"classes": [{"cls_lc": [[78, 0], [527, 43]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": "Test deprecation warning if token provided as hook argument.", "long_descr": null, "ret": null}, "fn_lc": [[79, 4], [86, 79]], "fn_var_ln": {"warning_message": [[81, 8], [81, 23]]}, "fn_var_occur": {"warning_message": [["pytest", "warns", "AirflowProviderDeprecationWarning", "match", "warning_message"]]}, "name": "test_token_arg_deprecated", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSlackHook.test_token_arg_deprecated", "ret_exprs": [], "ret_type": "", "variables": {"warning_message": ""}, "variables_p": {"warning_message": [["Pattern[str]", 1.0000000000000002]]}}, {"docstring": {"func": "Test deprecation warning if access to ``SlackHook.token`` property.", "long_descr": null, "ret": null}, "fn_lc": [[88, 4], [93, 53]], "fn_var_ln": {"hook": [[90, 8], [90, 12]], "warning_message": [[91, 8], [91, 23]]}, "fn_var_occur": {"hook": [["hook", "SlackHook", "slack_conn_id", "SLACK_API_DEFAULT_CONN_ID"], ["hook", "token", "MOCK_SLACK_API_TOKEN"]], "warning_message": [["pytest", "warns", "AirflowProviderDeprecationWarning", "match", "warning_message"]]}, "name": "test_token_property_deprecated", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSlackHook.test_token_property_deprecated", "ret_exprs": [], "ret_type": "", "variables": {"hook": "", "warning_message": ""}, "variables_p": {"hook": [["Tuple[Literal, Literal, int]", 0.07841363294525179], ["float", 0.0667724344787825], ["property", 0.055906073291215816]], "warning_message": [["Pattern[str]", 1.0000000000000002]]}}, {"docstring": {"func": "Test deprecation warning if not set connection ID.", "long_descr": null, "ret": null}, "fn_lc": [[95, 4], [102, 38]], "fn_var_ln": {"warning_message": [[97, 8], [97, 23]]}, "fn_var_occur": {"warning_message": [["pytest", "warns", "FutureWarning", "match", "warning_message"]]}, "name": "test_optional_conn_id_deprecated", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSlackHook.test_optional_conn_id_deprecated", "ret_exprs": [], "ret_type": "", "variables": {"warning_message": ""}, "variables_p": {"warning_message": [["Pattern[str]", 0.8999999999999999]]}}, {"docstring": {"func": "Test that specified previously in docstring `use_session` take no affect.", "long_descr": null, "ret": null}, "fn_lc": [[104, 4], [109, 58]], "fn_var_ln": {"hook": [[108, 12], [108, 16]], "warning_message": [[106, 8], [106, 23]]}, "fn_var_occur": {"hook": [["hook", "SlackHook", "slack_conn_id", "SLACK_API_DEFAULT_CONN_ID", "use_session"], ["hook", "extra_client_args"]], "warning_message": [["pytest", "warns", "UserWarning", "match", "warning_message"]]}, "name": "test_use_session_has_no_affect", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSlackHook.test_use_session_has_no_affect", "ret_exprs": [], "ret_type": "", "variables": {"hook": "", "warning_message": ""}, "variables_p": {"hook": [["int", 0.39230516039256186], ["str", 0.10718598959502268], ["List[str]", 0.09865240882715226], ["List[Dict[str, Any]]", 0.09861477577032361], ["Dict[str, Union[Any, Any, Any, Any]]", 0.0952895178745962]], "warning_message": [["str", 0.454658800522061], ["List[str]", 0.2788456985013123], ["int", 0.08710269649984069]]}}, {"docstring": {"func": "Test retrieve token when only hook arg provided without Slack API Connection ID.", "long_descr": null, "ret": null}, "fn_lc": [[111, 4], [114, 102]], "fn_var_ln": {"test_hook_arg_token": [[113, 8], [113, 27]]}, "fn_var_occur": {"test_hook_arg_token": [["SlackHook", "test_hook_arg_token", "None", "_get_conn_params", "test_hook_arg_token"]]}, "name": "test_get_token_with_token_only", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSlackHook.test_get_token_with_token_only", "ret_exprs": [], "ret_type": "", "variables": {"test_hook_arg_token": ""}, "variables_p": {"test_hook_arg_token": [["str", 0.25991408972152], ["list", 0.17840909456441817], ["Dict[str, Union[Any, int, str]]", 0.09930700249773224]]}}, {"docstring": {"func": "Test retrieve token from Slack API Connection ID.", "long_descr": null, "ret": null}, "fn_lc": [[123, 4], [126, 71]], "fn_var_ln": {"hook": [[125, 8], [125, 12]]}, "fn_var_occur": {"hook": [["hook", "SlackHook", "slack_conn_id", "SLACK_API_DEFAULT_CONN_ID"], ["hook", "_get_conn_params", "MOCK_SLACK_API_TOKEN"]]}, "name": "test_get_token_from_connection", "params": {"conn_id": "", "self": ""}, "params_descr": {"conn_id": "", "self": ""}, "params_occur": {"conn_id": [], "self": []}, "params_p": {"args": [], "conn_id": [["str", 0.3294472173751013], ["int", 0.20723149876808855], ["bool", 0.09878194497941178], ["Optional[bool]", 0.08320681418950512], ["Optional[int]", 0.08320681418950512], ["Optional[float]", 0.08320681418950512]], "kwargs": [], "self": []}, "q_name": "TestSlackHook.test_get_token_from_connection", "ret_exprs": [], "ret_type": "", "variables": {"hook": ""}, "variables_p": {"hook": [["List[int]", 0.13090094531114307], ["str", 0.08398412708774744]]}}, {"docstring": {"func": "Test retrieve token when both hook arg and Slack API Connection ID provided.", "long_descr": null, "ret": null}, "fn_lc": [[128, 4], [132, 70]], "fn_var_ln": {"hook": [[131, 8], [131, 12]], "test_hook_arg_token": [[130, 8], [130, 27]]}, "fn_var_occur": {"hook": [["hook", "SlackHook", "slack_conn_id", "SLACK_API_DEFAULT_CONN_ID", "token", "test_hook_arg_token"], ["hook", "_get_conn_params", "test_hook_arg_token"]], "test_hook_arg_token": [["hook", "SlackHook", "slack_conn_id", "SLACK_API_DEFAULT_CONN_ID", "token", "test_hook_arg_token"], ["hook", "_get_conn_params", "test_hook_arg_token"]]}, "name": "test_resolve_token", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSlackHook.test_resolve_token", "ret_exprs": [], "ret_type": "", "variables": {"hook": "", "test_hook_arg_token": ""}, "variables_p": {"hook": [["str", 0.09112237244046781], ["List[int]", 0.07739379944240175]], "test_hook_arg_token": [["str", 0.4382856556200677], ["Dict[str, str]", 0.10949303396085579], ["List[Dict[str, str]]", 0.0961509372810717], ["Type[bootcamp.news.models.News]", 0.09457058977709137]]}}, {"docstring": {"func": "Test neither hook arg and Slack API Connection ID provided.", "long_descr": null, "ret": null}, "fn_lc": [[134, 4], [137, 53]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_nor_token_and_nor_conn_id_provided", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSlackHook.test_nor_token_and_nor_conn_id_provided", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Test password field defined in the connection.", "long_descr": null, "ret": null}, "fn_lc": [[139, 4], [144, 35]], "fn_var_ln": {"error_message": [[142, 8], [142, 21]], "hook": [[141, 8], [141, 12]]}, "fn_var_occur": {"error_message": [["pytest", "raises", "AirflowNotFoundException", "match", "error_message"]], "hook": [["hook", "SlackHook", "slack_conn_id"], ["hook", "_get_conn_params"]]}, "name": "test_empty_password", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSlackHook.test_empty_password", "ret_exprs": [], "ret_type": "", "variables": {"error_message": "", "hook": ""}, "variables_p": {"error_message": [["Pattern[str]", 0.8389343553507135], ["str", 0.16106564464928635]], "hook": [["str", 0.3538978608627726], ["int", 0.17114204745917724]]}}, {"docstring": {"func": "Test read/parse/merge WebClient config from connection and hook arguments.", "long_descr": null, "ret": null}, "fn_lc": [[237, 4], [261, 66]], "fn_var_ln": {"client": [[257, 12], [257, 18]], "conn_params": [[254, 12], [254, 23]], "hook": [[252, 12], [252, 16]], "mock_webclient": [[249, 8], [249, 22]], "test_conn": [[242, 8], [242, 17]], "test_conn_env": [[248, 8], [248, 21]]}, "fn_var_occur": {"client": [["client", "hook", "client"], ["client", "mock_webclient"], ["hook", "get_conn", "client"]], "conn_params": [["conn_params", "hook", "_get_conn_params"], ["conn_params", "expected"]], "hook": [["hook", "SlackHook", "slack_conn_id", "test_conn", "conn_id", "hook_config"], ["expected", "hook", "log"], ["conn_params", "hook", "_get_conn_params"], ["client", "hook", "client"], ["hook", "get_conn", "mock_webclient"], ["hook", "get_conn", "client"]], "mock_webclient": [["mock_webclient", "mock_webclient_cls", "return_value"], ["client", "mock_webclient"], ["hook", "get_conn", "mock_webclient"]], "test_conn": [["test_conn", "Connection", "conn_id", "conn_type", "CONN_TYPE", "password", "MOCK_SLACK_API_TOKEN", "extra", "conn_extra"], ["test_conn_env", "test_conn", "conn_id", "upper"], ["mock", "patch", "dict", "values", "test_conn_env", "test_conn", "get_uri"], ["hook", "SlackHook", "slack_conn_id", "test_conn", "conn_id", "hook_config"]], "test_conn_env": [["test_conn_env", "test_conn", "conn_id", "upper"], ["mock", "patch", "dict", "values", "test_conn_env", "test_conn", "get_uri"]]}, "name": "test_client_configuration", "params": {"conn_extra": "", "expected": "builtins.dict[builtins.str, typing.Any]", "hook_config": "", "mock_webclient_cls": "", "self": ""}, "params_descr": {"conn_extra": "", "expected": "", "hook_config": "", "mock_webclient_cls": "", "self": ""}, "params_occur": {"conn_extra": [["test_conn", "Connection", "conn_id", "conn_type", "CONN_TYPE", "password", "MOCK_SLACK_API_TOKEN", "extra", "conn_extra"]], "expected": [["expected", "MOCK_SLACK_API_TOKEN"], ["expected", "hook", "log"], ["conn_params", "expected"], ["mock_webclient_cls", "assert_called_once_with", "expected"]], "hook_config": [["hook", "SlackHook", "slack_conn_id", "test_conn", "conn_id", "hook_config"]], "mock_webclient_cls": [["mock_webclient", "mock_webclient_cls", "return_value"], ["mock_webclient_cls", "assert_called_once_with", "expected"]], "self": []}, "params_p": {"args": [], "conn_extra": [["tuple", 0.1305608570227616]], "expected": [["mock.Mock", 0.08716120545238265]], "hook_config": [["str", 0.1912381965946001], ["int", 0.11013291270979396], ["aiohttp.web.Application", 0.09720462913625362], ["dict", 0.09575564586833514], ["Mapping[str, str]", 0.09566516138106046]], "kwargs": [], "mock_webclient_cls": [["mock.MagicMock", 0.09235495070584496]], "self": []}, "q_name": "TestSlackHook.test_client_configuration", "ret_exprs": [], "ret_type": "", "variables": {"client": "", "conn_params": "", "hook": "", "mock_webclient": "", "test_conn": "", "test_conn_env": ""}, "variables_p": {"client": [["Generator[Any, None, None]", 0.17780459058249515]], "conn_params": [["Tuple[Literal, Literal, Literal]", 0.166666666664164], ["Optional[gardnr.models.Grow]", 0.166666666664164], ["int", 6.787451833966716e-12], ["Dict[str, int]", 4.834950806013953e-12], ["str", 3.393725916983358e-12]], "hook": [["str", 0.36379564838943446], ["List[int]", 0.09002347566594446], ["list", 0.08735359522331926], ["int", 0.08507034512080201]], "mock_webclient": [["str", 0.6120398414744181], ["Dict[str, Union[Any, Any]]", 0.24106373805680176], ["Dict[str, str]", 0.07677124149302794]], "test_conn": [["str", 0.10310438986524109], ["Dict[str, Union[int, str]]", 0.09259480822973451]], "test_conn_env": [["str", 0.20693032192409816], ["int", 0.10702690594923313], ["circle_core.models.cc_info.CcInfo", 0.08959510543242495]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[264, 4], [275, 62]], "fn_var_ln": {"api_call": [[268, 8], [268, 34]], "expected_exception": [[267, 8], [267, 26]], "return_value": [[266, 8], [266, 44]], "slack_client_mock": [[265, 8], [265, 25]], "slack_hook": [[270, 8], [270, 18]], "test_api_params": [[272, 8], [272, 23]], "test_method": [[271, 8], [271, 19]]}, "fn_var_occur": {"api_call": [["slack_client_mock", "api_call", "mock", "Mock", "side_effect", "expected_exception"]], "expected_exception": [["expected_exception", "SlackApiError", "message", "response"], ["slack_client_mock", "api_call", "mock", "Mock", "side_effect", "expected_exception"]], "return_value": [["slack_client_class_mock", "return_value", "slack_client_mock"]], "slack_client_mock": [["slack_client_mock", "mock", "Mock"], ["slack_client_class_mock", "return_value", "slack_client_mock"], ["slack_client_mock", "api_call", "mock", "Mock", "side_effect", "expected_exception"]], "slack_hook": [["slack_hook", "SlackHook", "slack_conn_id", "SLACK_API_DEFAULT_CONN_ID"], ["slack_hook", "call", "test_method", "data", "test_api_params"]], "test_api_params": [["slack_hook", "call", "test_method", "data", "test_api_params"]], "test_method": [["slack_hook", "call", "test_method", "data", "test_api_params"]]}, "name": "test_call_with_failure", "params": {"self": "", "slack_client_class_mock": ""}, "params_descr": {"self": "", "slack_client_class_mock": ""}, "params_occur": {"self": [], "slack_client_class_mock": [["slack_client_class_mock", "return_value", "slack_client_mock"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "slack_client_class_mock": [["tests.test_util.aiohttp.AiohttpClientMocker", 0.32047470085654434]]}, "q_name": "TestSlackHook.test_call_with_failure", "ret_exprs": [], "ret_type": "", "variables": {"api_call": "", "expected_exception": "", "return_value": "", "slack_client_mock": "", "slack_hook": "", "test_api_params": "", "test_method": ""}, "variables_p": {"api_call": [["List[mock.Mock]", 0.10274932292991047]], "expected_exception": [["jj.mock._remote_mock.RemoteMock", 0.12328621301585872]], "return_value": [["str", 0.38692181729741637], ["Optional[bytes]", 0.12049371046815195], ["list", 0.10903286459258722], ["tests.utils.MockCoroutine", 0.08861887083776239]], "slack_client_mock": [], "slack_hook": [["str", 0.11711878114429987], ["list", 0.10671342554883996], ["decksite.data.models.person.Person", 0.10444988199607354], ["List[int]", 0.0827588403035344]], "test_api_params": [["Tuple[Literal, Literal]", 0.6191513956021897], ["Dict[str, str]", 0.07285795516813699], ["str", 0.07163838983736258]], "test_method": []}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[278, 4], [287, 93]], "fn_var_ln": {"return_value": [[280, 8], [280, 44]], "slack_client_mock": [[279, 8], [279, 25]], "slack_hook": [[283, 8], [283, 18]], "test_api_json": [[284, 8], [284, 21]]}, "fn_var_occur": {"return_value": [["slack_client_class_mock", "return_value", "slack_client_mock"], ["slack_client_mock", "api_call", "return_value", "True"]], "slack_client_mock": [["slack_client_mock", "mock", "Mock"], ["slack_client_class_mock", "return_value", "slack_client_mock"], ["slack_client_mock", "api_call", "return_value", "True"], ["slack_client_mock", "api_call", "assert_called_with", "json", "test_api_json"]], "slack_hook": [["slack_hook", "SlackHook", "slack_conn_id", "SLACK_API_DEFAULT_CONN_ID"], ["slack_hook", "call", "json", "test_api_json"]], "test_api_json": [["slack_hook", "call", "json", "test_api_json"], ["slack_client_mock", "api_call", "assert_called_with", "json", "test_api_json"]]}, "name": "test_api_call", "params": {"self": "", "slack_client_class_mock": ""}, "params_descr": {"self": "", "slack_client_class_mock": ""}, "params_occur": {"self": [], "slack_client_class_mock": [["slack_client_class_mock", "return_value", "slack_client_mock"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "slack_client_class_mock": [["tests.test_util.aiohttp.AiohttpClientMocker", 0.3300871553530525]]}, "q_name": "TestSlackHook.test_api_call", "ret_exprs": [], "ret_type": "", "variables": {"return_value": "", "slack_client_mock": "", "slack_hook": "", "test_api_json": ""}, "variables_p": {"return_value": [["Optional[bytes]", 0.12322817824182208], ["tests.utils.MockCoroutine", 0.11323176297761278], ["str", 0.09055138969556999], ["Dict[str, int]", 0.09053673888783179]], "slack_client_mock": [], "slack_hook": [["bool", 0.3620069432869278], ["str", 0.15583653045490406], ["Tuple[int, int, int, int]", 0.10782798836567929], ["int", 0.09309063953493765], ["Dict[str, int]", 0.09112148110109052], ["float", 0.09050173582173195]], "test_api_json": [["int", 0.18460733283679814]]}}, {"docstring": {"func": "Test SlackHook success connection.", "long_descr": null, "ret": null}, "fn_lc": [[313, 4], [326, 27]], "fn_var_ln": {"conn_test": [[324, 8], [324, 17]], "hook": [[323, 8], [323, 12]], "mock_webclient": [[315, 8], [315, 22]], "mock_webclient_call": [[316, 8], [316, 27]], "return_value": [[317, 8], [317, 40]]}, "fn_var_occur": {"conn_test": [["conn_test", "hook", "test_connection"]], "hook": [["hook", "SlackHook", "slack_conn_id", "SLACK_API_DEFAULT_CONN_ID"], ["conn_test", "hook", "test_connection"]], "mock_webclient": [["mock_webclient", "mock_webclient_cls", "return_value"], ["mock_webclient_call", "mock_webclient", "api_call"]], "mock_webclient_call": [["mock_webclient_call", "mock_webclient", "api_call"], ["mock_webclient_call", "return_value", "SlackResponse", "status_code", "data", "response_data", "ma", "mock", "MagicMock", "ma"], ["mock_webclient_call", "assert_called_once_with"]], "return_value": [["mock_webclient", "mock_webclient_cls", "return_value"], ["mock_webclient_call", "return_value", "SlackResponse", "status_code", "data", "response_data", "ma", "mock", "MagicMock", "ma"]]}, "name": "test_hook_connection_success", "params": {"mock_webclient_cls": "", "response_data": "", "self": ""}, "params_descr": {"mock_webclient_cls": "", "response_data": "", "self": ""}, "params_occur": {"mock_webclient_cls": [["mock_webclient", "mock_webclient_cls", "return_value"]], "response_data": [["mock_webclient_call", "return_value", "SlackResponse", "status_code", "data", "response_data", "ma", "mock", "MagicMock", "ma"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_webclient_cls": [], "response_data": [], "self": []}, "q_name": "TestSlackHook.test_hook_connection_success", "ret_exprs": [], "ret_type": "", "variables": {"conn_test": "", "hook": "", "mock_webclient": "", "mock_webclient_call": "", "return_value": ""}, "variables_p": {"conn_test": [["int", 0.2946498491120946], ["List[List[Any]]", 0.15298676702548872], ["List[str]", 0.131713093233657], ["Dict[str, Union[Any, Any]]", 0.11319023881289647], ["Mapping[str, Any]", 0.08097816986171531], ["Dict[str, str]", 0.054864622930381086]], "hook": [["List[int]", 0.15657314887978738], ["str", 0.07990606448305533]], "mock_webclient": [["Dict[str, Union[int, str]]", 0.12874092216376687], ["list", 0.09568815924203099], ["mock.Mock", 0.07311101438591007]], "mock_webclient_call": [["int", 0.3415233382514904], ["float", 0.16729781231334262], ["str", 0.13006128631273892], ["set", 0.10283738686236343], ["list", 0.08626657353131253]], "return_value": [["Dict[str, int]", 0.1371628918372938], ["Counter[Any]", 0.12734704521549647], ["Tuple[int, int]", 0.09684896771636708], ["List[str]", 0.09069099876281601], ["Optional[bytes]", 0.08970386555283609], ["List[Dict[str, Any]]", 0.08482741891334841]]}}, {"docstring": {"func": "Test SlackHook failure connection.", "long_descr": null, "ret": null}, "fn_lc": [[337, 4], [350, 31]], "fn_var_ln": {"conn_test": [[348, 8], [348, 17]], "hook": [[347, 8], [347, 12]], "mock_webclient": [[339, 8], [339, 22]], "mock_webclient_call": [[340, 8], [340, 27]], "return_value": [[341, 8], [341, 40]]}, "fn_var_occur": {"conn_test": [["conn_test", "hook", "test_connection"]], "hook": [["hook", "SlackHook", "slack_conn_id", "SLACK_API_DEFAULT_CONN_ID"], ["conn_test", "hook", "test_connection"]], "mock_webclient": [["mock_webclient", "mock_webclient_cls", "return_value"], ["mock_webclient_call", "mock_webclient", "api_call"]], "mock_webclient_call": [["mock_webclient_call", "mock_webclient", "api_call"], ["mock_webclient_call", "return_value", "SlackResponse", "status_code", "data", "response_data", "ma", "mock", "MagicMock", "ma"], ["mock_webclient_call", "assert_called_once_with"]], "return_value": [["mock_webclient", "mock_webclient_cls", "return_value"], ["mock_webclient_call", "return_value", "SlackResponse", "status_code", "data", "response_data", "ma", "mock", "MagicMock", "ma"]]}, "name": "test_hook_connection_failed", "params": {"mock_webclient_cls": "", "response_data": "", "self": ""}, "params_descr": {"mock_webclient_cls": "", "response_data": "", "self": ""}, "params_occur": {"mock_webclient_cls": [["mock_webclient", "mock_webclient_cls", "return_value"]], "response_data": [["mock_webclient_call", "return_value", "SlackResponse", "status_code", "data", "response_data", "ma", "mock", "MagicMock", "ma"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_webclient_cls": [], "response_data": [], "self": []}, "q_name": "TestSlackHook.test_hook_connection_failed", "ret_exprs": [], "ret_type": "", "variables": {"conn_test": "", "hook": "", "mock_webclient": "", "mock_webclient_call": "", "return_value": ""}, "variables_p": {"conn_test": [["int", 0.2946498491120946], ["List[List[Any]]", 0.15298676702548872], ["List[str]", 0.131713093233657], ["Dict[str, Union[Any, Any]]", 0.11319023881289647], ["Mapping[str, Any]", 0.08097816986171531], ["Dict[str, str]", 0.054864622930381086]], "hook": [["List[int]", 0.15657314887978738], ["str", 0.07990606448305533]], "mock_webclient": [["Dict[str, Union[int, str]]", 0.12874092216376687], ["list", 0.09568815924203099], ["mock.Mock", 0.07311101438591007]], "mock_webclient_call": [["int", 0.3415233382514904], ["float", 0.16729781231334262], ["str", 0.13006128631273892], ["set", 0.10283738686236343], ["list", 0.08626657353131253]], "return_value": [["Dict[str, int]", 0.1371628918372938], ["Counter[Any]", 0.12734704521549647], ["Tuple[int, int]", 0.09684896771636708], ["List[str]", 0.09069099876281601], ["Optional[bytes]", 0.08970386555283609], ["List[Dict[str, Any]]", 0.08482741891334841]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[353, 4], [357, 54]], "fn_var_ln": {"error_message": [[355, 8], [355, 21]], "hook": [[354, 8], [354, 12]]}, "fn_var_occur": {"error_message": [["pytest", "raises", "ValueError", "match", "error_message"]], "hook": [["hook", "SlackHook", "slack_conn_id", "SLACK_API_DEFAULT_CONN_ID"], ["hook", "send_file", "file", "file", "content", "content"]]}, "name": "test_send_file_wrong_parameters", "params": {"content": "", "file": "", "self": ""}, "params_descr": {"content": "", "file": "", "self": ""}, "params_occur": {"content": [["hook", "send_file", "file", "file", "content", "content"]], "file": [["hook", "send_file", "file", "file", "content", "content"]], "self": []}, "params_p": {"args": [], "content": [["str", 0.2023678880963808], ["BinaryIO", 0.10270010198141016]], "file": [["str", 0.2023678880963808], ["BinaryIO", 0.10270010198141016]], "kwargs": [], "self": []}, "q_name": "TestSlackHook.test_send_file_wrong_parameters", "ret_exprs": [], "ret_type": "", "variables": {"error_message": "", "hook": ""}, "variables_p": {"error_message": [["str", 0.8501218406451738], ["Callable(open)[..., Any][[[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal], default), Named(buffering, int, default), Named(encoding, Optional[str], default), Named(errors, Optional[str], default), Named(newline, Optional[str], default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.TextIOWrapper][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, Literal), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.FileIO][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, Union[Literal[-1], Literal], default), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.BufferedRandom][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, Union[Literal[-1], Literal], default), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.BufferedWriter][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, Union[Literal[-1], Literal], default), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], io.BufferedReader][[Named(file, Union[_PathLike[bytes], _PathLike[str], bytes, int, str]), Named(mode, Union[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]), Named(buffering, int), Named(encoding, None, default), Named(errors, None, default), Named(newline, None, default), Named(closefd, bool, default), Named(opener, Optional[Callable[[str, int], int]], default)], BinaryIO][Any, Any]]", 0.07569075429409607], ["Union[Literal, Literal]", 0.07418740506073011]], "hook": [["str", 0.5087258768352592], ["Union[Literal, str]", 0.1042966587610852], ["Dict[str, List[Any]]", 0.10091252884043915], ["float", 0.10065276469826652], ["List[int]", 0.09284634710016737]]}}, {"docstring": {"func": "Test send file by providing filepath.", "long_descr": null, "ret": null}, "fn_lc": [[364, 4], [397, 42]], "fn_var_ln": {"file": [[372, 8], [372, 12]], "hook": [[375, 8], [375, 12]], "mock_file": [[395, 8], [395, 17]], "mock_files_upload": [[368, 8], [368, 25]], "tmp": [[371, 8], [371, 11]]}, "fn_var_occur": {"file": [["file", "tmp"], ["file", "write_bytes"], ["hook", "send_file", "channels", "channels", "file", "file", "filename", "initial_comment", "initial_comment", "title", "title", "filetype", "filetype"], ["mock_files_upload", "assert_called_once_with", "channels", "channels", "file", "mock", "ANY", "filename", "initial_comment", "initial_comment", "title", "title", "filetype", "filetype"], ["mock_file", "name", "str", "file"]], "hook": [["hook", "SlackHook", "slack_conn_id", "SLACK_API_DEFAULT_CONN_ID"], ["hook", "send_file", "channels", "channels", "file", "file", "filename", "initial_comment", "initial_comment", "title", "title", "filetype", "filetype"]], "mock_file": [["mock_file", "mock_files_upload", "call_args", "kwargs"], ["mock_file", "mode"], ["mock_file", "name", "str", "file"]], "mock_files_upload": [["mock_files_upload", "mock", "MagicMock"], ["mock_webclient_cls", "return_value", "files_upload", "mock_files_upload"], ["mock_files_upload", "assert_called_once_with", "channels", "channels", "file", "mock", "ANY", "filename", "initial_comment", "initial_comment", "title", "title", "filetype", "filetype"], ["mock_file", "mock_files_upload", "call_args", "kwargs"]], "tmp": [["tmp", "tmp_path_factory", "mktemp"], ["file", "tmp"]]}, "name": "test_send_file_path", "params": {"channels": "", "filetype": "", "initial_comment": "", "mock_webclient_cls": "", "self": "", "title": "", "tmp_path_factory": ""}, "params_descr": {"channels": "", "filetype": "", "initial_comment": "", "mock_webclient_cls": "", "self": "", "title": "", "tmp_path_factory": ""}, "params_occur": {"channels": [["hook", "send_file", "channels", "channels", "file", "file", "filename", "initial_comment", "initial_comment", "title", "title", "filetype", "filetype"], ["mock_files_upload", "assert_called_once_with", "channels", "channels", "file", "mock", "ANY", "filename", "initial_comment", "initial_comment", "title", "title", "filetype", "filetype"]], "filetype": [["hook", "send_file", "channels", "channels", "file", "file", "filename", "initial_comment", "initial_comment", "title", "title", "filetype", "filetype"], ["mock_files_upload", "assert_called_once_with", "channels", "channels", "file", "mock", "ANY", "filename", "initial_comment", "initial_comment", "title", "title", "filetype", "filetype"]], "initial_comment": [["hook", "send_file", "channels", "channels", "file", "file", "filename", "initial_comment", "initial_comment", "title", "title", "filetype", "filetype"], ["mock_files_upload", "assert_called_once_with", "channels", "channels", "file", "mock", "ANY", "filename", "initial_comment", "initial_comment", "title", "title", "filetype", "filetype"]], "mock_webclient_cls": [["mock_webclient_cls", "return_value", "files_upload", "mock_files_upload"]], "self": [], "title": [["hook", "send_file", "channels", "channels", "file", "file", "filename", "initial_comment", "initial_comment", "title", "title", "filetype", "filetype"], ["mock_files_upload", "assert_called_once_with", "channels", "channels", "file", "mock", "ANY", "filename", "initial_comment", "initial_comment", "title", "title", "filetype", "filetype"]], "tmp_path_factory": [["tmp", "tmp_path_factory", "mktemp"]]}, "params_p": {"args": [], "channels": [], "filetype": [], "initial_comment": [], "kwargs": [], "mock_webclient_cls": [], "self": [], "title": [], "tmp_path_factory": []}, "q_name": "TestSlackHook.test_send_file_path", "ret_exprs": [], "ret_type": "", "variables": {"file": "", "hook": "", "mock_file": "", "mock_files_upload": "", "tmp": ""}, "variables_p": {"file": [["dict", 0.16926017632888246], ["IO", 0.12806359572520287], ["IO[bytes]", 0.0799980918117243], ["bytes", 0.07344985068102651]], "hook": [["str", 0.28491754630451094], ["float", 0.14658544502179682], ["dict", 0.10266427138576353], ["List[str]", 0.10013565066933673]], "mock_file": [["List[str]", 0.14859496079341974], ["Dict[str, bytes]", 0.06628308997734625]], "mock_files_upload": [["Dict[str, str]", 0.20228092200462613], ["str", 0.19831090926878137], ["int", 0.08673974734394783]], "tmp": [["str", 0.30418934640052797], ["dict", 0.19357328602524426], ["Set[str]", 0.10546476511522714], ["List[str]", 0.09837460781501643], ["Dict[str, Union[Any, Any]]", 0.09782030604062873]]}}, {"docstring": {"func": "Test set filename in send_file method if it not set.", "long_descr": null, "ret": null}, "fn_lc": [[401, 4], [416, 48]], "fn_var_ln": {"call_args": [[414, 8], [414, 17]], "file": [[407, 8], [407, 12]], "hook": [[410, 8], [410, 12]], "mock_files_upload": [[403, 8], [403, 25]], "tmp": [[406, 8], [406, 11]]}, "fn_var_occur": {"call_args": [["call_args", "mock_files_upload", "call_args", "kwargs"], ["call_args", "filename"]], "file": [["file", "tmp", "filename"], ["file", "write_bytes"], ["hook", "send_file", "file", "file"]], "hook": [["hook", "SlackHook", "slack_conn_id", "SLACK_API_DEFAULT_CONN_ID"], ["hook", "send_file", "file", "file"]], "mock_files_upload": [["mock_files_upload", "mock", "MagicMock"], ["mock_webclient_cls", "return_value", "files_upload", "mock_files_upload"], ["mock_files_upload", "call_count"], ["call_args", "mock_files_upload", "call_args", "kwargs"]], "tmp": [["tmp", "tmp_path_factory", "mktemp"], ["file", "tmp", "filename"]]}, "name": "test_send_file_path_set_filename", "params": {"filename": "", "mock_webclient_cls": "", "self": "", "tmp_path_factory": ""}, "params_descr": {"filename": "", "mock_webclient_cls": "", "self": "", "tmp_path_factory": ""}, "params_occur": {"filename": [["file", "tmp", "filename"], ["call_args", "filename"]], "mock_webclient_cls": [["mock_webclient_cls", "return_value", "files_upload", "mock_files_upload"]], "self": [], "tmp_path_factory": [["tmp", "tmp_path_factory", "mktemp"]]}, "params_p": {"args": [], "filename": [["str", 0.39436075252463865], ["taskiinfrastructure.data.json.repositories.project_repository.JsonProjectRepository", 0.0888364609838974]], "kwargs": [], "mock_webclient_cls": [], "self": [], "tmp_path_factory": []}, "q_name": "TestSlackHook.test_send_file_path_set_filename", "ret_exprs": [], "ret_type": "", "variables": {"call_args": "", "file": "", "hook": "", "mock_files_upload": "", "tmp": ""}, "variables_p": {"call_args": [["Dict[str, Any]", 0.23801759445697238], ["list", 0.22900279705550433], ["List[Dict[str, Any]]", 0.08179189840901355], ["Set[str]", 0.0802850355171159], ["KeysView[str]", 0.07672062619168554]], "file": [["TextIO", 0.18597146768561673], ["IO", 0.13743699945200932], ["IO[bytes]", 0.08713665471305353], ["Optional[str]", 0.08542086298010225]], "hook": [["str", 0.5624301595863297], ["float", 0.13552837634431636], ["Dict[str, List[Any]]", 0.11388011877917467], ["Union[Literal, str]", 0.08916766124974981]], "mock_files_upload": [["str", 0.4929249317230721], ["Dict[str, List[Any]]", 0.10899377855734921], ["Dict[str, str]", 0.097658870210893]], "tmp": [["str", 0.3754114319547748], ["bool", 0.10640561375679526], ["Set[str]", 0.09504560728247453]]}}, {"docstring": {"func": "Test send file by providing content.", "long_descr": null, "ret": null}, "fn_lc": [[424, 4], [446, 9]], "fn_var_ln": {"hook": [[430, 8], [430, 12]], "mock_files_upload": [[428, 8], [428, 25]]}, "fn_var_occur": {"hook": [["hook", "SlackHook", "slack_conn_id", "SLACK_API_DEFAULT_CONN_ID"], ["hook", "send_file", "channels", "channels", "content", "filename", "filename", "initial_comment", "initial_comment", "title", "title", "filetype", "filetype"]], "mock_files_upload": [["mock_files_upload", "mock", "MagicMock"], ["mock_webclient_cls", "return_value", "files_upload", "mock_files_upload"], ["mock_files_upload", "assert_called_once_with", "channels", "channels", "content", "filename", "filename", "initial_comment", "initial_comment", "title", "title", "filetype", "filetype"]]}, "name": "test_send_file_content", "params": {"channels": "", "filename": "", "filetype": "", "initial_comment": "", "mock_webclient_cls": "", "self": "", "title": ""}, "params_descr": {"channels": "", "filename": "", "filetype": "", "initial_comment": "", "mock_webclient_cls": "", "self": "", "title": ""}, "params_occur": {"channels": [["hook", "send_file", "channels", "channels", "content", "filename", "filename", "initial_comment", "initial_comment", "title", "title", "filetype", "filetype"], ["mock_files_upload", "assert_called_once_with", "channels", "channels", "content", "filename", "filename", "initial_comment", "initial_comment", "title", "title", "filetype", "filetype"]], "filename": [["hook", "send_file", "channels", "channels", "content", "filename", "filename", "initial_comment", "initial_comment", "title", "title", "filetype", "filetype"], ["mock_files_upload", "assert_called_once_with", "channels", "channels", "content", "filename", "filename", "initial_comment", "initial_comment", "title", "title", "filetype", "filetype"]], "filetype": [["hook", "send_file", "channels", "channels", "content", "filename", "filename", "initial_comment", "initial_comment", "title", "title", "filetype", "filetype"], ["mock_files_upload", "assert_called_once_with", "channels", "channels", "content", "filename", "filename", "initial_comment", "initial_comment", "title", "title", "filetype", "filetype"]], "initial_comment": [["hook", "send_file", "channels", "channels", "content", "filename", "filename", "initial_comment", "initial_comment", "title", "title", "filetype", "filetype"], ["mock_files_upload", "assert_called_once_with", "channels", "channels", "content", "filename", "filename", "initial_comment", "initial_comment", "title", "title", "filetype", "filetype"]], "mock_webclient_cls": [["mock_webclient_cls", "return_value", "files_upload", "mock_files_upload"]], "self": [], "title": [["hook", "send_file", "channels", "channels", "content", "filename", "filename", "initial_comment", "initial_comment", "title", "title", "filetype", "filetype"], ["mock_files_upload", "assert_called_once_with", "channels", "channels", "content", "filename", "filename", "initial_comment", "initial_comment", "title", "title", "filetype", "filetype"]]}, "params_p": {"args": [], "channels": [["str", 0.0911771308172118]], "filename": [["str", 0.0911771308172118]], "filetype": [["str", 0.0911771308172118]], "initial_comment": [["str", 0.0911771308172118]], "kwargs": [], "mock_webclient_cls": [], "self": [], "title": [["str", 0.0911771308172118]]}, "q_name": "TestSlackHook.test_send_file_content", "ret_exprs": [], "ret_type": "", "variables": {"hook": "", "mock_files_upload": ""}, "variables_p": {"hook": [["str", 0.6926403588580237], ["float", 0.12045703571707486], ["Dict[str, List[Any]]", 0.1064373944928203], ["Dict[str, str]", 0.08046521093208105]], "mock_files_upload": [["Dict[str, str]", 0.20228092200462613], ["str", 0.19831090926878137], ["int", 0.08673974734394783]]}}, {"docstring": {"func": "Ensure that _ensure_prefixes is removed from snowflake when airflow min version >= 2.5.0.", "long_descr": null, "ret": null}, "fn_lc": [[448, 4], [461, 13]], "fn_var_ln": {"path": [[450, 8], [450, 12]]}, "fn_var_occur": {"path": [["object_exists", "path"]]}, "name": "test__ensure_prefixes_removal", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSlackHook.test__ensure_prefixes_removal", "ret_exprs": [], "ret_type": "", "variables": {"path": ""}, "variables_p": {"path": [["str", 0.3333333333865924], ["List[Tuple[float, float]]", 0.3333333332854392], ["Tuple[str, str]", 2.978817973747046e-11]]}}, {"docstring": {"func": "Check that ensure_prefixes decorator working properly", "long_descr": "Note: remove this test when removing ensure_prefixes (after min airflow version >= 2.5.0", "ret": null}, "fn_lc": [[463, 4], [474, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test___ensure_prefixes", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSlackHook.test___ensure_prefixes", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[488, 4], [495, 45]], "fn_var_ln": {"hook": [[490, 12], [490, 16]], "params": [[491, 12], [491, 18]]}, "fn_var_occur": {"hook": [["hook", "SlackHook", "slack_conn_id"], ["params", "hook", "_get_conn_params"]], "params": [["params", "hook", "_get_conn_params"]]}, "name": "test_backcompat_prefix_works", "params": {"self": "", "uri": ""}, "params_descr": {"self": "", "uri": ""}, "params_occur": {"self": [], "uri": [["patch", "dict", "os", "environ", "AIRFLOW_CONN_MY_CONN", "uri"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "uri": [["str", 0.08425886067818614]]}, "q_name": "TestSlackHook.test_backcompat_prefix_works", "ret_exprs": [], "ret_type": "", "variables": {"hook": "", "params": ""}, "variables_p": {"hook": [["str", 0.21356501330212468]], "params": [["Dict[str, int]", 0.9999999998054235], ["list", 2.668682299364027e-11], ["Tuple[Literal, Literal, Literal]", 2.5973179132715253e-11], ["Optional[gardnr.models.Grow]", 2.5973179132715253e-11]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[497, 4], [505, 47]], "fn_var_ln": {"hook": [[502, 12], [502, 16]], "params": [[504, 16], [504, 22]]}, "fn_var_occur": {"hook": [["hook", "SlackHook", "slack_conn_id"], ["params", "hook", "_get_conn_params"]], "params": [["params", "hook", "_get_conn_params"]]}, "name": "test_backcompat_prefix_both_causes_warning", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSlackHook.test_backcompat_prefix_both_causes_warning", "ret_exprs": [], "ret_type": "", "variables": {"hook": "", "params": ""}, "variables_p": {"hook": [["str", 0.21356501330212468]], "params": [["Dict[str, int]", 0.9999999998054235], ["list", 2.668682299364027e-11], ["Tuple[Literal, Literal, Literal]", 2.5973179132715253e-11], ["Optional[gardnr.models.Grow]", 2.5973179132715253e-11]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[507, 4], [517, 43]], "fn_var_ln": {"hook": [[514, 12], [514, 16]], "params": [[515, 12], [515, 18]]}, "fn_var_occur": {"hook": [["hook", "SlackHook", "slack_conn_id"], ["params", "hook", "_get_conn_params"]], "params": [["params", "hook", "_get_conn_params"]]}, "name": "test_empty_string_ignored_prefixed", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSlackHook.test_empty_string_ignored_prefixed", "ret_exprs": [], "ret_type": "", "variables": {"hook": "", "params": ""}, "variables_p": {"hook": [["str", 0.21356501330212468]], "params": [["Dict[str, int]", 0.9999999998054235], ["list", 2.668682299364027e-11], ["Tuple[Literal, Literal, Literal]", 2.5973179132715253e-11], ["Optional[gardnr.models.Grow]", 2.5973179132715253e-11]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[519, 4], [527, 43]], "fn_var_ln": {"hook": [[524, 12], [524, 16]], "params": [[525, 12], [525, 18]]}, "fn_var_occur": {"hook": [["hook", "SlackHook", "slack_conn_id"], ["params", "hook", "_get_conn_params"]], "params": [["params", "hook", "_get_conn_params"]]}, "name": "test_empty_string_ignored_non_prefixed", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSlackHook.test_empty_string_ignored_non_prefixed", "ret_exprs": [], "ret_type": "", "variables": {"hook": "", "params": ""}, "variables_p": {"hook": [["str", 0.21356501330212468]], "params": [["Dict[str, int]", 0.9999999998054235], ["list", 2.668682299364027e-11], ["Tuple[Literal, Literal, Literal]", 2.5973179132715253e-11], ["Optional[gardnr.models.Grow]", 2.5973179132715253e-11]]}}], "name": "TestSlackHook", "q_name": "TestSlackHook", "variables": {}, "variables_p": {}}], "funcs": [{"docstring": {"func": "Create tests connections.", "long_descr": null, "ret": null}, "fn_lc": [[53, 0], [75, 13]], "fn_var_ln": {"conn_uris": [[72, 4], [72, 13]], "connections": [[55, 4], [55, 15]]}, "fn_var_occur": {"conn_uris": [["conn_uris", "c", "conn_id", "upper", "c", "get_uri", "c", "connections"], ["mock", "patch", "dict", "values", "conn_uris"]], "connections": [["connections", "Connection", "conn_id", "SLACK_API_DEFAULT_CONN_ID", "conn_type", "CONN_TYPE", "password", "MOCK_SLACK_API_TOKEN", "Connection", "conn_id", "conn_type", "password", "MOCK_SLACK_API_TOKEN", "Connection", "conn_id", "conn_type", "CONN_TYPE"], ["conn_uris", "c", "conn_id", "upper", "c", "get_uri", "c", "connections"]]}, "name": "slack_api_connections", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "slack_api_connections", "ret_exprs": [], "ret_type": "", "variables": {"conn_uris": "", "connections": ""}, "variables_p": {"conn_uris": [["tests.data.Pri", 0.20785721630852486], ["Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]", 0.13396207845379005], ["List[Tuple[int, int, int, int, int, int]]", 0.0855275112317092]], "connections": [["str", 0.5146968388523961], ["int", 0.10991231532519312], ["List[str]", 0.10459177651800136]]}}], "imports": ["__future__", "annotations", "json", "os", "typing", "Any", "unittest", "mock", "unittest", "mock", "patch", "pytest", "pytest", "param", "slack_sdk", "errors", "SlackApiError", "slack_sdk", "http_retry", "builtin_handlers", "ConnectionErrorRetryHandler", "RateLimitErrorRetryHandler", "slack_sdk", "web", "slack_response", "SlackResponse", "airflow", "exceptions", "AirflowException", "AirflowNotFoundException", "AirflowProviderDeprecationWarning", "airflow", "models", "connection", "Connection", "airflow", "providers", "slack", "hooks", "slack", "SlackHook", "tests", "test_utils", "providers", "get_provider_min_airflow_version", "object_exists"], "mod_var_ln": {"CONN_TYPE": [[43, 0], [43, 9]], "MOCK_SLACK_API_TOKEN": [[37, 0], [37, 20]], "SLACK_API_DEFAULT_CONN_ID": [[38, 0], [38, 25]], "SLACK_CONN_TYPE": [[39, 0], [39, 15]], "TEST_CONN_ERROR_RETRY_HANDLER": [[40, 0], [40, 29]], "TEST_RATE_LIMIT_RETRY_HANDLER": [[41, 0], [41, 29]], "VALID_CONN_IDS": [[44, 0], [44, 14]]}, "mod_var_occur": {"CONN_TYPE": [["connections", "Connection", "conn_id", "SLACK_API_DEFAULT_CONN_ID", "conn_type", "CONN_TYPE", "password", "MOCK_SLACK_API_TOKEN", "Connection", "conn_id", "conn_type", "password", "MOCK_SLACK_API_TOKEN", "Connection", "conn_id", "conn_type", "CONN_TYPE"], ["test_conn", "Connection", "conn_id", "conn_type", "CONN_TYPE", "password", "MOCK_SLACK_API_TOKEN", "extra", "conn_extra"]], "MOCK_SLACK_API_TOKEN": [["connections", "Connection", "conn_id", "SLACK_API_DEFAULT_CONN_ID", "conn_type", "CONN_TYPE", "password", "MOCK_SLACK_API_TOKEN", "Connection", "conn_id", "conn_type", "password", "MOCK_SLACK_API_TOKEN", "Connection", "conn_id", "conn_type", "CONN_TYPE"], ["hook", "token", "MOCK_SLACK_API_TOKEN"], ["hook", "_get_conn_params", "MOCK_SLACK_API_TOKEN"], ["expected", "MOCK_SLACK_API_TOKEN"], ["test_conn", "Connection", "conn_id", "conn_type", "CONN_TYPE", "password", "MOCK_SLACK_API_TOKEN", "extra", "conn_extra"]], "SLACK_API_DEFAULT_CONN_ID": [["connections", "Connection", "conn_id", "SLACK_API_DEFAULT_CONN_ID", "conn_type", "CONN_TYPE", "password", "MOCK_SLACK_API_TOKEN", "Connection", "conn_id", "conn_type", "password", "MOCK_SLACK_API_TOKEN", "Connection", "conn_id", "conn_type", "CONN_TYPE"], ["SlackHook", "slack_conn_id", "SLACK_API_DEFAULT_CONN_ID", "token"], ["hook", "SlackHook", "slack_conn_id", "SLACK_API_DEFAULT_CONN_ID"], ["hook", "SlackHook", "slack_conn_id", "SLACK_API_DEFAULT_CONN_ID", "use_session"], ["hook", "SlackHook", "slack_conn_id", "SLACK_API_DEFAULT_CONN_ID"], ["hook", "SlackHook", "slack_conn_id", "SLACK_API_DEFAULT_CONN_ID", "token", "test_hook_arg_token"], ["slack_hook", "SlackHook", "slack_conn_id", "SLACK_API_DEFAULT_CONN_ID"], ["slack_hook", "SlackHook", "slack_conn_id", "SLACK_API_DEFAULT_CONN_ID"], ["hook", "SlackHook", "slack_conn_id", "SLACK_API_DEFAULT_CONN_ID"], ["hook", "SlackHook", "slack_conn_id", "SLACK_API_DEFAULT_CONN_ID"], ["hook", "SlackHook", "slack_conn_id", "SLACK_API_DEFAULT_CONN_ID"], ["hook", "SlackHook", "slack_conn_id", "SLACK_API_DEFAULT_CONN_ID"], ["hook", "SlackHook", "slack_conn_id", "SLACK_API_DEFAULT_CONN_ID"], ["hook", "SlackHook", "slack_conn_id", "SLACK_API_DEFAULT_CONN_ID"]], "SLACK_CONN_TYPE": [], "TEST_CONN_ERROR_RETRY_HANDLER": [], "TEST_RATE_LIMIT_RETRY_HANDLER": [], "VALID_CONN_IDS": []}, "no_types_annot": {"D": 1, "I": 0, "U": 124}, "session_id": "sOXLagE7QVlCVm0T4C3ou20iu0hBp25bF6FkTFs9Y0E", "set": null, "tc": [false, null], "type_annot_cove": 0.01, "typed_seq": "", "untyped_seq": "", "variables": {"CONN_TYPE": "", "MOCK_SLACK_API_TOKEN": "", "SLACK_API_DEFAULT_CONN_ID": "", "SLACK_CONN_TYPE": "", "TEST_CONN_ERROR_RETRY_HANDLER": "", "TEST_RATE_LIMIT_RETRY_HANDLER": "", "VALID_CONN_IDS": ""}, "variables_p": {"CONN_TYPE": [["Dict[str, List[str]]", 0.3225184721537086], ["dict", 0.19086714411167066], ["str", 0.17905358522275264], ["int", 0.11276042902195971], ["Dict[str, Any]", 0.10299753226133095]], "MOCK_SLACK_API_TOKEN": [["str", 0.3848695600059366], ["bytes", 0.1906536067446547], ["dict", 0.10347218279995078]], "SLACK_API_DEFAULT_CONN_ID": [["int", 0.3908794287069213], ["str", 0.2843106104317069], ["List[int]", 0.1256537108881514], ["Pattern[str]", 0.10582281460430255], ["Set[int]", 0.09333343536891776]], "SLACK_CONN_TYPE": [["int", 0.3999999999999999], ["List[str]", 0.19999999999999996], ["str", 0.09999999999999998], ["Dict[str, str]", 0.09999999999999998]], "TEST_CONN_ERROR_RETRY_HANDLER": [["str", 0.5065695024067933], ["List[Tuple[Any, Any, Any, bool]]", 0.100375906147231], ["Pattern[str]", 0.10034498535710029], ["int", 0.09845045918316263], ["Dict[str, Union[int, str]]", 0.09754966707989672], ["bool", 0.09670947982581585]], "TEST_RATE_LIMIT_RETRY_HANDLER": [["List[Union[Any, Any]]", 0.39999999999999997], ["Dict[str, Any]", 0.19999999999999998], ["List[Dict[str, Any]]", 0.09999999999999999], ["str", 0.09999999999999999], ["List[Union[Any, Any, Any]]", 0.09999999999999999], ["bool", 0.09999999999999999]], "VALID_CONN_IDS": [["Pattern[str]", 0.9999999989663836], ["str", 7.382972381985679e-10], ["int", 1.4765944763971358e-10]]}}}