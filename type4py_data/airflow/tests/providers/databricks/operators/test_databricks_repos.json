{"error": null, "response": {"classes": [{"cls_lc": [[35, 0], [97, 73]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": "Test the execute function using Repo ID.", "long_descr": null, "ret": null}, "fn_lc": [[37, 4], [54, 82]], "fn_var_ln": {"db_mock": [[42, 8], [42, 15]], "op": [[41, 8], [41, 10]]}, "fn_var_occur": {"db_mock": [["db_mock", "db_mock_class", "return_value"], ["db_mock", "update_repo", "return_value"], ["db_mock", "update_repo", "assert_called_once_with"]], "op": [["op", "DatabricksReposUpdateOperator", "task_id", "TASK_ID", "branch", "repo_id"], ["op", "execute", "None"], ["db_mock_class", "assert_called_once_with", "DEFAULT_CONN_ID", "retry_limit", "op", "databricks_retry_limit", "retry_delay", "op", "databricks_retry_delay", "caller"]]}, "name": "test_update_with_id", "params": {"db_mock_class": "", "self": ""}, "params_descr": {"db_mock_class": "", "self": ""}, "params_occur": {"db_mock_class": [["db_mock", "db_mock_class", "return_value"], ["db_mock_class", "assert_called_once_with", "DEFAULT_CONN_ID", "retry_limit", "op", "databricks_retry_limit", "retry_delay", "op", "databricks_retry_delay", "caller"]], "self": []}, "params_p": {"args": [], "db_mock_class": [], "kwargs": [], "self": []}, "q_name": "TestDatabricksReposUpdateOperator.test_update_with_id", "ret_exprs": [], "ret_type": "", "variables": {"db_mock": "", "op": ""}, "variables_p": {"db_mock": [["Union[mock.AsyncMock, mock.MagicMock]", 0.17319650259299807]], "op": [["str", 0.2155912359002064], ["Dict[str, Dict[str, Any]]", 0.1836637742073743], ["List[Tuple[Any, Any]]", 0.10297335029965046], ["int", 0.0820303740283433]]}}, {"docstring": {"func": "Test the execute function using Repo path.", "long_descr": null, "ret": null}, "fn_lc": [[57, 4], [77, 77]], "fn_var_ln": {"db_mock": [[64, 8], [64, 15]], "op": [[61, 8], [61, 10]]}, "fn_var_occur": {"db_mock": [["db_mock", "db_mock_class", "return_value"], ["db_mock", "get_repo_by_path", "return_value"], ["db_mock", "update_repo", "return_value"], ["db_mock", "update_repo", "assert_called_once_with"]], "op": [["op", "DatabricksReposUpdateOperator", "task_id", "TASK_ID", "tag", "repo_path"], ["op", "execute", "None"], ["db_mock_class", "assert_called_once_with", "DEFAULT_CONN_ID", "retry_limit", "op", "databricks_retry_limit", "retry_delay", "op", "databricks_retry_delay", "caller"]]}, "name": "test_update_with_path", "params": {"db_mock_class": "", "self": ""}, "params_descr": {"db_mock_class": "", "self": ""}, "params_occur": {"db_mock_class": [["db_mock", "db_mock_class", "return_value"], ["db_mock_class", "assert_called_once_with", "DEFAULT_CONN_ID", "retry_limit", "op", "databricks_retry_limit", "retry_delay", "op", "databricks_retry_delay", "caller"]], "self": []}, "params_p": {"args": [], "db_mock_class": [], "kwargs": [], "self": []}, "q_name": "TestDatabricksReposUpdateOperator.test_update_with_path", "ret_exprs": [], "ret_type": "", "variables": {"db_mock": "", "op": ""}, "variables_p": {"db_mock": [["Union[mock.AsyncMock, mock.MagicMock]", 0.3443517282031273]], "op": [["dict", 0.21863645961457168], ["int", 0.09656845166617894]]}}, {"docstring": {"func": "Tests handling of incorrect parameters passed to ``__init__``", "long_descr": null, "ret": null}, "fn_lc": [[79, 4], [97, 73]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_init_exception", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDatabricksReposUpdateOperator.test_init_exception", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestDatabricksReposUpdateOperator", "q_name": "TestDatabricksReposUpdateOperator", "variables": {}, "variables_p": {}}, {"cls_lc": [[100, 0], [152, 58]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": "Test the execute function using Repo ID.", "long_descr": null, "ret": null}, "fn_lc": [[102, 4], [119, 58]], "fn_var_ln": {"db_mock": [[107, 8], [107, 15]], "op": [[106, 8], [106, 10]]}, "fn_var_occur": {"db_mock": [["db_mock", "db_mock_class", "return_value"], ["db_mock", "delete_repo", "return_value", "None"], ["db_mock", "delete_repo", "assert_called_once_with"]], "op": [["op", "DatabricksReposDeleteOperator", "task_id", "TASK_ID", "repo_id"], ["op", "execute", "None"], ["db_mock_class", "assert_called_once_with", "DEFAULT_CONN_ID", "retry_limit", "op", "databricks_retry_limit", "retry_delay", "op", "databricks_retry_delay", "caller"]]}, "name": "test_delete_with_id", "params": {"db_mock_class": "", "self": ""}, "params_descr": {"db_mock_class": "", "self": ""}, "params_occur": {"db_mock_class": [["db_mock", "db_mock_class", "return_value"], ["db_mock_class", "assert_called_once_with", "DEFAULT_CONN_ID", "retry_limit", "op", "databricks_retry_limit", "retry_delay", "op", "databricks_retry_delay", "caller"]], "self": []}, "params_p": {"args": [], "db_mock_class": [], "kwargs": [], "self": []}, "q_name": "TestDatabricksReposDeleteOperator.test_delete_with_id", "ret_exprs": [], "ret_type": "", "variables": {"db_mock": "", "op": ""}, "variables_p": {"db_mock": [], "op": [["dict", 0.1042886590995736], ["list", 0.09173641868738742], ["Optional[str]", 0.08753286108207385], ["int", 0.08489408101816079]]}}, {"docstring": {"func": "Test the execute function using Repo path.", "long_descr": null, "ret": null}, "fn_lc": [[122, 4], [140, 58]], "fn_var_ln": {"db_mock": [[127, 8], [127, 15]], "op": [[126, 8], [126, 10]]}, "fn_var_occur": {"db_mock": [["db_mock", "db_mock_class", "return_value"], ["db_mock", "get_repo_by_path", "return_value"], ["db_mock", "delete_repo", "return_value", "None"], ["db_mock", "delete_repo", "assert_called_once_with"]], "op": [["op", "DatabricksReposDeleteOperator", "task_id", "TASK_ID", "repo_path"], ["op", "execute", "None"], ["db_mock_class", "assert_called_once_with", "DEFAULT_CONN_ID", "retry_limit", "op", "databricks_retry_limit", "retry_delay", "op", "databricks_retry_delay", "caller"]]}, "name": "test_delete_with_path", "params": {"db_mock_class": "", "self": ""}, "params_descr": {"db_mock_class": "", "self": ""}, "params_occur": {"db_mock_class": [["db_mock", "db_mock_class", "return_value"], ["db_mock_class", "assert_called_once_with", "DEFAULT_CONN_ID", "retry_limit", "op", "databricks_retry_limit", "retry_delay", "op", "databricks_retry_delay", "caller"]], "self": []}, "params_p": {"args": [], "db_mock_class": [], "kwargs": [], "self": []}, "q_name": "TestDatabricksReposDeleteOperator.test_delete_with_path", "ret_exprs": [], "ret_type": "", "variables": {"db_mock": "", "op": ""}, "variables_p": {"db_mock": [["Union[mock.AsyncMock, mock.MagicMock]", 0.332126727709707]], "op": [["dict", 0.09918916183384327], ["str", 0.09914698786583384], ["Dict[str, Dict[str, Any]]", 0.09669844025997602], ["int", 0.09175526247019307]]}}, {"docstring": {"func": "Tests handling of incorrect parameters passed to ``__init__``", "long_descr": null, "ret": null}, "fn_lc": [[142, 4], [152, 58]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_init_exception", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDatabricksReposDeleteOperator.test_init_exception", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestDatabricksReposDeleteOperator", "q_name": "TestDatabricksReposDeleteOperator", "variables": {}, "variables_p": {}}, {"cls_lc": [[155, 0], [230, 100]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": "Test the execute function creating new Repo.", "long_descr": null, "ret": null}, "fn_lc": [[157, 4], [181, 82]], "fn_var_ln": {"db_mock": [[166, 8], [166, 15]], "git_url": [[161, 8], [161, 15]], "op": [[163, 8], [163, 10]], "repo_path": [[162, 8], [162, 17]]}, "fn_var_occur": {"db_mock": [["db_mock", "db_mock_class", "return_value"], ["db_mock", "update_repo", "return_value"], ["db_mock", "create_repo", "return_value"], ["db_mock", "get_repo_by_path", "return_value", "None"], ["db_mock", "create_repo", "assert_called_once_with", "git_url", "repo_path"], ["db_mock", "update_repo", "assert_called_once_with"]], "git_url": [["op", "DatabricksReposCreateOperator", "task_id", "TASK_ID", "git_url", "git_url", "repo_path", "repo_path", "branch"], ["db_mock", "create_repo", "assert_called_once_with", "git_url", "repo_path"]], "op": [["op", "DatabricksReposCreateOperator", "task_id", "TASK_ID", "git_url", "git_url", "repo_path", "repo_path", "branch"], ["op", "execute", "None"], ["db_mock_class", "assert_called_once_with", "DEFAULT_CONN_ID", "retry_limit", "op", "databricks_retry_limit", "retry_delay", "op", "databricks_retry_delay", "caller"]], "repo_path": [["op", "DatabricksReposCreateOperator", "task_id", "TASK_ID", "git_url", "git_url", "repo_path", "repo_path", "branch"], ["db_mock", "create_repo", "assert_called_once_with", "git_url", "repo_path"]]}, "name": "test_create_plus_checkout", "params": {"db_mock_class": "", "self": ""}, "params_descr": {"db_mock_class": "", "self": ""}, "params_occur": {"db_mock_class": [["db_mock", "db_mock_class", "return_value"], ["db_mock_class", "assert_called_once_with", "DEFAULT_CONN_ID", "retry_limit", "op", "databricks_retry_limit", "retry_delay", "op", "databricks_retry_delay", "caller"]], "self": []}, "params_p": {"args": [], "db_mock_class": [], "kwargs": [], "self": []}, "q_name": "TestDatabricksReposCreateOperator.test_create_plus_checkout", "ret_exprs": [], "ret_type": "", "variables": {"db_mock": "", "git_url": "", "op": "", "repo_path": ""}, "variables_p": {"db_mock": [["Union[mock.AsyncMock, mock.MagicMock]", 0.2489391918171313], ["Dict[str, str]", 0.09732712492027142]], "git_url": [["str", 0.8792071160136743], ["Union[Literal, str]", 0.12079288398632572]], "op": [["str", 0.502215636492803], ["int", 0.10697888465313174], ["Dict[str, Dict[str, Any]]", 0.10318989251004682], ["List[str]", 0.09004313683785142]], "repo_path": [["str", 0.8831209712394116], ["int", 0.11687902876058845]]}}, {"docstring": {"func": "Test the execute function creating new Repo.", "long_descr": null, "ret": null}, "fn_lc": [[184, 4], [211, 82]], "fn_var_ln": {"db_mock": [[197, 8], [197, 15]], "git_url": [[188, 8], [188, 15]], "op": [[190, 8], [190, 10]], "repo_path": [[189, 8], [189, 17]]}, "fn_var_occur": {"db_mock": [["db_mock", "db_mock_class", "return_value"], ["db_mock", "update_repo", "return_value"], ["db_mock", "get_repo_by_path", "return_value"], ["db_mock", "get_repo_by_path", "assert_called_once_with", "repo_path"], ["db_mock", "update_repo", "assert_called_once_with"]], "git_url": [["op", "DatabricksReposCreateOperator", "task_id", "TASK_ID", "git_url", "git_url", "repo_path", "repo_path", "branch", "ignore_existing_repo", "True"]], "op": [["op", "DatabricksReposCreateOperator", "task_id", "TASK_ID", "git_url", "git_url", "repo_path", "repo_path", "branch", "ignore_existing_repo", "True"], ["op", "execute", "None"], ["db_mock_class", "assert_called_once_with", "DEFAULT_CONN_ID", "retry_limit", "op", "databricks_retry_limit", "retry_delay", "op", "databricks_retry_delay", "caller"]], "repo_path": [["op", "DatabricksReposCreateOperator", "task_id", "TASK_ID", "git_url", "git_url", "repo_path", "repo_path", "branch", "ignore_existing_repo", "True"], ["db_mock", "get_repo_by_path", "assert_called_once_with", "repo_path"]]}, "name": "test_create_ignore_existing_plus_checkout", "params": {"db_mock_class": "", "self": ""}, "params_descr": {"db_mock_class": "", "self": ""}, "params_occur": {"db_mock_class": [["db_mock", "db_mock_class", "return_value"], ["db_mock_class", "assert_called_once_with", "DEFAULT_CONN_ID", "retry_limit", "op", "databricks_retry_limit", "retry_delay", "op", "databricks_retry_delay", "caller"]], "self": []}, "params_p": {"args": [], "db_mock_class": [], "kwargs": [], "self": []}, "q_name": "TestDatabricksReposCreateOperator.test_create_ignore_existing_plus_checkout", "ret_exprs": [], "ret_type": "", "variables": {"db_mock": "", "git_url": "", "op": "", "repo_path": ""}, "variables_p": {"db_mock": [["Union[mock.AsyncMock, mock.MagicMock]", 0.26668509890147385]], "git_url": [["str", 0.8955122552039243]], "op": [["str", 0.5278573278198491], ["int", 0.09678351794569934], ["List[str]", 0.09161189828851236]], "repo_path": [["str", 0.6812967816913047], ["Dict[str, Any]", 0.11478004053102372], ["Union[Literal, str]", 0.10073359220994266]]}}, {"docstring": {"func": "Tests handling of incorrect parameters passed to ``__init__``", "long_descr": null, "ret": null}, "fn_lc": [[213, 4], [230, 100]], "fn_var_ln": {"exception_message": [[219, 8], [219, 25]], "git_url": [[217, 8], [217, 15]], "op": [[224, 12], [224, 14]], "repo_path": [[218, 8], [218, 17]]}, "fn_var_occur": {"exception_message": [["exception_message", "repo_path"], ["pytest", "raises", "AirflowException", "match", "exception_message"]], "git_url": [["op", "DatabricksReposCreateOperator", "task_id", "TASK_ID", "git_url", "git_url", "repo_path", "repo_path"], ["DatabricksReposCreateOperator", "task_id", "TASK_ID", "git_url", "git_url", "branch", "tag"]], "op": [["op", "DatabricksReposCreateOperator", "task_id", "TASK_ID", "git_url", "git_url", "repo_path", "repo_path"], ["op", "execute", "None"]], "repo_path": [["exception_message", "repo_path"], ["op", "DatabricksReposCreateOperator", "task_id", "TASK_ID", "git_url", "git_url", "repo_path", "repo_path"]]}, "name": "test_init_exception", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDatabricksReposCreateOperator.test_init_exception", "ret_exprs": [], "ret_type": "", "variables": {"exception_message": "", "git_url": "", "op": "", "repo_path": ""}, "variables_p": {"exception_message": [["str", 0.19183501913638884], ["List[Tuple[str, str]]", 0.09560290369953771], ["DefaultDict[Any, List[Any]]", 0.0911841930984333]], "git_url": [["str", 0.9059273555372597]], "op": [["str", 0.5285541098513802], ["int", 0.09433355590864666], ["List[str]", 0.0940480247206308]], "repo_path": [["str", 0.4859361571555225]]}}], "name": "TestDatabricksReposCreateOperator", "q_name": "TestDatabricksReposCreateOperator", "variables": {}, "variables_p": {}}], "funcs": [], "imports": ["__future__", "annotations", "unittest", "mock", "pytest", "airflow", "AirflowException", "airflow", "providers", "databricks", "operators", "databricks_repos", "DatabricksReposCreateOperator", "DatabricksReposDeleteOperator", "DatabricksReposUpdateOperator"], "mod_var_ln": {"DEFAULT_CONN_ID": [[32, 0], [32, 15]], "TASK_ID": [[31, 0], [31, 7]]}, "mod_var_occur": {"DEFAULT_CONN_ID": [["db_mock_class", "assert_called_once_with", "DEFAULT_CONN_ID", "retry_limit", "op", "databricks_retry_limit", "retry_delay", "op", "databricks_retry_delay", "caller"], ["db_mock_class", "assert_called_once_with", "DEFAULT_CONN_ID", "retry_limit", "op", "databricks_retry_limit", "retry_delay", "op", "databricks_retry_delay", "caller"], ["db_mock_class", "assert_called_once_with", "DEFAULT_CONN_ID", "retry_limit", "op", "databricks_retry_limit", "retry_delay", "op", "databricks_retry_delay", "caller"], ["db_mock_class", "assert_called_once_with", "DEFAULT_CONN_ID", "retry_limit", "op", "databricks_retry_limit", "retry_delay", "op", "databricks_retry_delay", "caller"], ["db_mock_class", "assert_called_once_with", "DEFAULT_CONN_ID", "retry_limit", "op", "databricks_retry_limit", "retry_delay", "op", "databricks_retry_delay", "caller"], ["db_mock_class", "assert_called_once_with", "DEFAULT_CONN_ID", "retry_limit", "op", "databricks_retry_limit", "retry_delay", "op", "databricks_retry_delay", "caller"]], "TASK_ID": [["op", "DatabricksReposUpdateOperator", "task_id", "TASK_ID", "branch", "repo_id"], ["op", "DatabricksReposUpdateOperator", "task_id", "TASK_ID", "tag", "repo_path"], ["DatabricksReposUpdateOperator", "task_id", "TASK_ID", "repo_id", "repo_path", "branch"], ["DatabricksReposUpdateOperator", "task_id", "TASK_ID", "branch"], ["DatabricksReposUpdateOperator", "task_id", "TASK_ID", "repo_id", "branch", "tag"], ["DatabricksReposUpdateOperator", "task_id", "TASK_ID", "repo_id"], ["op", "DatabricksReposDeleteOperator", "task_id", "TASK_ID", "repo_id"], ["op", "DatabricksReposDeleteOperator", "task_id", "TASK_ID", "repo_path"], ["DatabricksReposDeleteOperator", "task_id", "TASK_ID", "repo_id", "repo_path"], ["DatabricksReposDeleteOperator", "task_id", "TASK_ID"], ["op", "DatabricksReposCreateOperator", "task_id", "TASK_ID", "git_url", "git_url", "repo_path", "repo_path", "branch"], ["op", "DatabricksReposCreateOperator", "task_id", "TASK_ID", "git_url", "git_url", "repo_path", "repo_path", "branch", "ignore_existing_repo", "True"], ["op", "DatabricksReposCreateOperator", "task_id", "TASK_ID", "git_url", "git_url", "repo_path", "repo_path"], ["DatabricksReposCreateOperator", "task_id", "TASK_ID", "git_url", "git_url", "branch", "tag"]]}, "no_types_annot": {"D": 0, "I": 0, "U": 37}, "session_id": "l8fQ9FO5vS4E0dkgIuV4vmvL-aOy-Xtur7qQD7aY5ik", "set": null, "tc": [false, null], "type_annot_cove": 0.0, "typed_seq": "", "untyped_seq": "", "variables": {"DEFAULT_CONN_ID": "", "TASK_ID": ""}, "variables_p": {"DEFAULT_CONN_ID": [["int", 0.3299150728694782], ["str", 0.12578437363633999], ["Pattern[Any]", 0.0942057377488627], ["List[str]", 0.08231601546191053], ["Dict[str, Optional[str]]", 0.08142270664387614]], "TASK_ID": [["str", 0.6665901326592985], ["int", 0.19092214436920174], ["Optional[str]", 0.14248772297149975]]}}}