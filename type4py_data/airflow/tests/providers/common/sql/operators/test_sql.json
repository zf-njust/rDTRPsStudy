{"error": null, "response": {"classes": [{"cls_lc": [[47, 0], [49, 14]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[48, 4], [49, 14]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "get_records", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "MockHook.get_records", "ret_exprs": ["return"], "ret_type": "", "ret_type_p": [["Iterator[object]", 0.1812078102264969], ["bool", 0.17789972300001594], ["Union[tuple, list]", 0.11498831518859183]], "variables": {}, "variables_p": {}}], "name": "MockHook", "q_name": "MockHook", "variables": {}, "variables_p": {}}, {"cls_lc": [[56, 0], [95, 47]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[57, 4], [65, 9]], "fn_var_ln": {"dag": [[58, 8], [58, 11]]}, "fn_var_occur": {"dag": [["dag", "DAG", "start_date", "datetime", "datetime"], ["SQLExecuteQueryOperator", "task_id", "conn_id", "sql", "sql", "kwargs", "dag", "dag"]]}, "name": "_construct_operator", "params": {"kwargs": "", "self": "", "sql": ""}, "params_descr": {"kwargs": "", "self": "", "sql": ""}, "params_occur": {"kwargs": [["SQLExecuteQueryOperator", "task_id", "conn_id", "sql", "sql", "kwargs", "dag", "dag"]], "self": [], "sql": [["SQLExecuteQueryOperator", "task_id", "conn_id", "sql", "sql", "kwargs", "dag", "dag"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "sql": [["Union[server.models.Bike, int]", 0.13658974383843595], ["Callable", 0.09536499114858847], ["Dict[str, Any]", 0.09536499114858847], ["dict", 0.0923075648630807], ["Dict[str, Dict[str, int]]", 0.09021081770656202]]}, "q_name": "TestSQLExecuteQueryOperator._construct_operator", "ret_exprs": ["return SQLExecuteQueryOperator( task_id=\"test_task\", conn_id=\"default_conn\", sql=sql, **kwargs, dag=dag,)"], "ret_type": "", "ret_type_p": [["List[str]", 0.10948094437828497], ["allennlp.common.util.JsonDict", 0.10948094437828497], ["Iterable[str]", 0.10691616197297028], ["IO[str]", 0.10491330722016606], ["int", 0.10426430096387353]], "variables": {"dag": ""}, "variables_p": {"dag": [["datetime.timedelta", 0.29337057760184615], ["datetime.datetime.timedelta", 0.1870794834975657], ["datetime.datetime.datetime", 0.1135307644291861], ["str", 0.1081702950665595], ["datetime.timezone", 0.10536697258644917], ["datetime.datetime", 0.10322142170732829], ["int", 0.08926048511106517]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[69, 4], [80, 43]], "fn_var_ln": {"operator": [[70, 8], [70, 16]]}, "fn_var_occur": {"operator": [["operator", "self", "_construct_operator", "do_xcom_push", "True"], ["operator", "execute", "context", "MagicMock"]]}, "name": "test_do_xcom_push", "params": {"mock_get_db_hook": "", "mock_process_output": "", "self": ""}, "params_descr": {"mock_get_db_hook": "", "mock_process_output": "", "self": ""}, "params_occur": {"mock_get_db_hook": [["mock_get_db_hook", "return_value", "run", "assert_called_once_with", "sql", "autocommit", "False", "handler", "fetch_all_handler", "parameters", "None", "return_last", "True"]], "mock_process_output": [["mock_process_output", "assert_called"]], "self": [["operator", "self", "_construct_operator", "do_xcom_push", "True"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_db_hook": [["unittesmock.MagicMock", 0.54072977647069]], "mock_process_output": [["unittesmock.MagicMock", 0.9119135007156245]], "self": []}, "q_name": "TestSQLExecuteQueryOperator.test_do_xcom_push", "ret_exprs": [], "ret_type": "", "variables": {"operator": ""}, "variables_p": {"operator": [["List[int]", 0.10711230930620447], ["int", 0.10319007924243101], ["List[list]", 0.09861146154180807], ["unittesmock.MagicMock", 0.09043875793793459], ["mock._patch[Union[mock.AsyncMock, mock.MagicMock]]", 0.09013666858470397]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[84, 4], [95, 47]], "fn_var_ln": {"operator": [[85, 8], [85, 16]]}, "fn_var_occur": {"operator": [["operator", "self", "_construct_operator", "do_xcom_push", "False"], ["operator", "execute", "context", "MagicMock"]]}, "name": "test_dont_xcom_push", "params": {"mock_get_db_hook": "", "mock_process_output": "", "self": ""}, "params_descr": {"mock_get_db_hook": "", "mock_process_output": "", "self": ""}, "params_occur": {"mock_get_db_hook": [["mock_get_db_hook", "return_value", "run", "assert_called_once_with", "sql", "autocommit", "False", "parameters", "None", "handler", "None", "return_last", "True"]], "mock_process_output": [["mock_process_output", "assert_not_called"]], "self": [["operator", "self", "_construct_operator", "do_xcom_push", "False"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_db_hook": [["unittesmock.MagicMock", 0.44759269138876356]], "mock_process_output": [["unittesmock.MagicMock", 0.9112003296213675]], "self": []}, "q_name": "TestSQLExecuteQueryOperator.test_dont_xcom_push", "ret_exprs": [], "ret_type": "", "variables": {"operator": ""}, "variables_p": {"operator": [["Dict[str, Dict[str, Any]]", 0.289987000156943], ["Tuple[Literal, Literal]", 0.18381041914438034], ["unittesmock.MagicMock", 0.1388144886562961], ["str", 0.10237932777215994], ["property", 0.09367884755164313]]}}], "name": "TestSQLExecuteQueryOperator", "q_name": "TestSQLExecuteQueryOperator", "variables": {}, "variables_p": {}}, {"cls_lc": [[98, 0], [335, 9]], "cls_var_ln": {"correct_generate_sql_query_no_partitions": [[119, 4], [119, 44]], "correct_generate_sql_query_with_partition": [[127, 4], [127, 45]], "correct_generate_sql_query_with_partition_and_where": [[135, 4], [135, 55]], "correct_generate_sql_query_with_where": [[143, 4], [143, 41]], "invalid_column_mapping": [[117, 4], [117, 26]], "short_valid_column_mapping": [[110, 4], [110, 30]], "valid_column_mapping": [[100, 4], [100, 24]]}, "cls_var_occur": {"correct_generate_sql_query_no_partitions": [], "correct_generate_sql_query_with_partition": [], "correct_generate_sql_query_with_partition_and_where": [], "correct_generate_sql_query_with_where": [], "invalid_column_mapping": [], "short_valid_column_mapping": [], "valid_column_mapping": []}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[152, 8], [153, 26]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "get_records", "params": {"arg": ""}, "params_descr": {"arg": ""}, "params_occur": {"arg": []}, "params_p": {"arg": [["bool", 0.39999999999999997], ["str", 0.39999999999999997], ["T", 0.09999999999999999], ["dict", 0.09999999999999999]], "args": [], "kwargs": [], "self": []}, "q_name": "TestColumnCheckOperator._construct_operator.<locals>.get_records", "ret_exprs": ["return records"], "ret_type": "", "ret_type_p": [["str", 0.19999999999999998], ["bool", 0.09999999999999999], ["pyspark.sql.SparkSession", 0.09999999999999999]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[151, 4], [160, 23]], "fn_var_ln": {"operator": [[155, 8], [155, 16]]}, "fn_var_occur": {"operator": [["operator", "SQLColumnCheckOperator", "task_id", "table", "column_mapping", "column_mapping"], ["monkeypatch", "setattr", "operator", "_get_mock_db_hook"]]}, "name": "_construct_operator", "params": {"column_mapping": "", "monkeypatch": "", "records": "", "self": ""}, "params_descr": {"column_mapping": "", "monkeypatch": "", "records": "", "self": ""}, "params_occur": {"column_mapping": [["operator", "SQLColumnCheckOperator", "task_id", "table", "column_mapping", "column_mapping"]], "monkeypatch": [["monkeypatch", "setattr", "operator", "_get_mock_db_hook"], ["monkeypatch", "setattr", "MockHook", "get_records"]], "records": [], "self": []}, "params_p": {"args": [], "column_mapping": [["int", 0.1958940648063609], ["lunch_buddies.models.poll_responses.PollResponse", 0.09626429843713934]], "kwargs": [], "monkeypatch": [["str", 0.2964945363495536], ["int", 0.2070747358404919], ["Mapping[str, str]", 0.11270586574086353], ["Optional[Exception]", 0.0958606875892535], ["Optional[Dict]", 0.0932727051888215], ["Dict[str, str]", 0.09268993540205497]], "records": [["int", 0.31991411727414815], ["List[str]", 0.19329712346075845], ["bool", 0.12499225691127945], ["Sequence[str]", 0.08849617748383146], ["float", 0.08849617748383146]], "self": []}, "q_name": "TestColumnCheckOperator._construct_operator", "ret_exprs": ["return operator"], "ret_type": "", "ret_type_p": [["int", 0.30000000000000004], ["Callable", 0.2], ["models.Question", 0.1], ["str", 0.1]], "variables": {"operator": ""}, "variables_p": {"operator": [["zerver.models.Realm", 0.11988914141925595], ["int", 0.10904319495761912], ["str", 0.09523333982129968], ["List[dict]", 0.09018205539228177], ["bool", 0.08856750178666044]]}}, {"docstring": {"func": "Wraps the check fragment in the outer parts of the sql query", "long_descr": null, "ret": null}, "fn_lc": [[162, 4], [166, 89]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "_full_check_sql", "params": {"self": "", "sql": "builtins.str"}, "params_descr": {"self": "", "sql": ""}, "params_occur": {"self": [], "sql": []}, "params_p": {"args": [], "kwargs": [], "self": [], "sql": [["int", 0.19999999999999998], ["str", 0.19999999999999998], ["Iterable['Context']", 0.09999999999999999], ["dict", 0.09999999999999999], ["bool", 0.09999999999999999]]}, "q_name": "TestColumnCheckOperator._full_check_sql", "ret_exprs": ["return f\"SELECT col_name, check_type, check_result FROM ({sql}) AS check_columns\""], "ret_type": "builtins.str", "ret_type_p": [["str", 0.5049941933386933], ["Tuple[Tuple[int, ...]]", 0.08627608432057429]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[168, 4], [170, 82]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_check_not_in_column_checks", "params": {"monkeypatch": "", "self": ""}, "params_descr": {"monkeypatch": "", "self": ""}, "params_occur": {"monkeypatch": [["self", "_construct_operator", "monkeypatch", "self", "invalid_column_mapping"]], "self": [["self", "_construct_operator", "monkeypatch", "self", "invalid_column_mapping"]]}, "params_p": {"args": [], "kwargs": [], "monkeypatch": [["str", 0.0934597937186653]], "self": []}, "q_name": "TestColumnCheckOperator.test_check_not_in_column_checks", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[172, 4], [185, 9]], "fn_var_ln": {"operator": [[180, 8], [180, 16]], "records": [[173, 8], [173, 15]]}, "fn_var_occur": {"operator": [["operator", "self", "_construct_operator", "monkeypatch", "self", "valid_column_mapping", "records"], ["operator", "execute", "context", "MagicMock"], ["operator", "column_mapping", "check", "True", "check", "operator", "column_mapping"]], "records": [["operator", "self", "_construct_operator", "monkeypatch", "self", "valid_column_mapping", "records"]]}, "name": "test_pass_all_checks_exact_check", "params": {"monkeypatch": "", "self": ""}, "params_descr": {"monkeypatch": "", "self": ""}, "params_occur": {"monkeypatch": [["operator", "self", "_construct_operator", "monkeypatch", "self", "valid_column_mapping", "records"]], "self": [["operator", "self", "_construct_operator", "monkeypatch", "self", "valid_column_mapping", "records"]]}, "params_p": {"args": [], "kwargs": [], "monkeypatch": [["Dict[str, Sequence[str]]", 0.096500963615516]], "self": []}, "q_name": "TestColumnCheckOperator.test_pass_all_checks_exact_check", "ret_exprs": [], "ret_type": "", "variables": {"operator": "", "records": ""}, "variables_p": {"operator": [["raiden.tests.utils.mocks.MockRaidenService", 0.1809974797345414], ["unittesmock.MagicMock", 0.13945352067383687], ["dict", 0.10804648677442666], ["Dict[str, str]", 0.09861873923477031], ["str", 0.09474121977475315], ["int", 0.09080888963810349]], "records": [["str", 0.5012362418734558], ["bool", 0.12975022239660716], ["Pattern[str]", 0.06670591684767045]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[187, 4], [198, 74]], "fn_var_ln": {"operator": [[196, 12], [196, 20]], "records": [[189, 12], [189, 19]]}, "fn_var_occur": {"operator": [["operator", "self", "_construct_operator", "monkeypatch", "self", "valid_column_mapping", "records"], ["operator", "execute", "context", "MagicMock"], ["operator", "column_mapping", "False"]], "records": [["operator", "self", "_construct_operator", "monkeypatch", "self", "valid_column_mapping", "records"]]}, "name": "test_max_less_than_fails_check", "params": {"monkeypatch": "", "self": ""}, "params_descr": {"monkeypatch": "", "self": ""}, "params_occur": {"monkeypatch": [["operator", "self", "_construct_operator", "monkeypatch", "self", "valid_column_mapping", "records"]], "self": [["operator", "self", "_construct_operator", "monkeypatch", "self", "valid_column_mapping", "records"]]}, "params_p": {"args": [], "kwargs": [], "monkeypatch": [], "self": []}, "q_name": "TestColumnCheckOperator.test_max_less_than_fails_check", "ret_exprs": [], "ret_type": "", "variables": {"operator": "", "records": ""}, "variables_p": {"operator": [["raiden.tests.utils.mocks.MockRaidenService", 0.45943386638816613], ["Tuple[Literal, Literal]", 0.2135718639268582], ["Dict[str, str]", 0.11343841378687734], ["unittesmock.MagicMock", 0.10972261122719407]], "records": [["str", 0.5012362418734558], ["bool", 0.12975022239660716], ["Pattern[str]", 0.06670591684767045]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[200, 4], [211, 74]], "fn_var_ln": {"operator": [[209, 12], [209, 20]], "records": [[202, 12], [202, 19]]}, "fn_var_occur": {"operator": [["operator", "self", "_construct_operator", "monkeypatch", "self", "valid_column_mapping", "records"], ["operator", "execute", "context", "MagicMock"], ["operator", "column_mapping", "False"]], "records": [["operator", "self", "_construct_operator", "monkeypatch", "self", "valid_column_mapping", "records"]]}, "name": "test_max_greater_than_fails_check", "params": {"monkeypatch": "", "self": ""}, "params_descr": {"monkeypatch": "", "self": ""}, "params_occur": {"monkeypatch": [["operator", "self", "_construct_operator", "monkeypatch", "self", "valid_column_mapping", "records"]], "self": [["operator", "self", "_construct_operator", "monkeypatch", "self", "valid_column_mapping", "records"]]}, "params_p": {"args": [], "kwargs": [], "monkeypatch": [], "self": []}, "q_name": "TestColumnCheckOperator.test_max_greater_than_fails_check", "ret_exprs": [], "ret_type": "", "variables": {"operator": "", "records": ""}, "variables_p": {"operator": [["raiden.tests.utils.mocks.MockRaidenService", 0.45943386638816613], ["Tuple[Literal, Literal]", 0.2135718639268582], ["Dict[str, str]", 0.11343841378687734], ["unittesmock.MagicMock", 0.10972261122719407]], "records": [["str", 0.5012362418734558], ["bool", 0.12975022239660716], ["Pattern[str]", 0.06670591684767045]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[213, 4], [226, 9]], "fn_var_ln": {"operator": [[221, 8], [221, 16]], "records": [[214, 8], [214, 15]]}, "fn_var_occur": {"operator": [["operator", "self", "_construct_operator", "monkeypatch", "self", "valid_column_mapping", "records"], ["operator", "execute", "context", "MagicMock"], ["operator", "column_mapping", "check", "True", "check", "operator", "column_mapping"]], "records": [["operator", "self", "_construct_operator", "monkeypatch", "self", "valid_column_mapping", "records"]]}, "name": "test_pass_all_checks_inexact_check", "params": {"monkeypatch": "", "self": ""}, "params_descr": {"monkeypatch": "", "self": ""}, "params_occur": {"monkeypatch": [["operator", "self", "_construct_operator", "monkeypatch", "self", "valid_column_mapping", "records"]], "self": [["operator", "self", "_construct_operator", "monkeypatch", "self", "valid_column_mapping", "records"]]}, "params_p": {"args": [], "kwargs": [], "monkeypatch": [["Dict[str, Sequence[str]]", 0.096500963615516]], "self": []}, "q_name": "TestColumnCheckOperator.test_pass_all_checks_inexact_check", "ret_exprs": [], "ret_type": "", "variables": {"operator": "", "records": ""}, "variables_p": {"operator": [["raiden.tests.utils.mocks.MockRaidenService", 0.1809974797345414], ["unittesmock.MagicMock", 0.13945352067383687], ["dict", 0.10804648677442666], ["Dict[str, str]", 0.09861873923477031], ["str", 0.09474121977475315], ["int", 0.09080888963810349]], "records": [["str", 0.5012362418734558], ["bool", 0.12975022239660716], ["Pattern[str]", 0.06670591684767045]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[228, 4], [238, 49]], "fn_var_ln": {"operator": [[236, 19], [236, 27]], "records": [[229, 8], [229, 15]]}, "fn_var_occur": {"operator": [["operator", "operator", "self", "_construct_operator", "monkeypatch", "self", "valid_column_mapping", "records"], ["operator", "execute", "context", "MagicMock"]], "records": [["operator", "operator", "self", "_construct_operator", "monkeypatch", "self", "valid_column_mapping", "records"]]}, "name": "test_fail_all_checks_check", "params": {"monkeypatch": "", "self": ""}, "params_descr": {"monkeypatch": "", "self": ""}, "params_occur": {"monkeypatch": [["operator", "operator", "self", "_construct_operator", "monkeypatch", "self", "valid_column_mapping", "records"]], "self": [["operator", "operator", "self", "_construct_operator", "monkeypatch", "self", "valid_column_mapping", "records"]]}, "params_p": {"args": [], "kwargs": [], "monkeypatch": [["common.ComponentFactory", 0.2792157456066523], ["Dict[str, Sequence[str]]", 0.13057392843664206]], "self": []}, "q_name": "TestColumnCheckOperator.test_fail_all_checks_check", "ret_exprs": [], "ret_type": "", "variables": {"operator": "", "records": ""}, "variables_p": {"operator": [["Pattern[str]", 0.12116008905114305], ["DefaultDict[Any, Optional[float]]", 0.10900572988361582], ["dict", 0.10444585556594001], ["list", 0.10063565160119675], ["DefaultDict[Any, List[Any]]", 0.09171731919662719]], "records": [["Dict[str, Any]", 0.34994314933597354], ["int", 0.25157082402525555], ["str", 0.14890291178593212], ["bytes", 0.08656944780706397], ["Dict[str, str]", 0.08540542529426423]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[240, 4], [246, 9]], "fn_var_ln": {"checks": [[241, 8], [241, 14]], "operator": [[242, 8], [242, 16]]}, "fn_var_occur": {"checks": [["checks", "self", "short_valid_column_mapping"], ["operator", "_generate_sql_query", "checks", "lstrip", "self", "correct_generate_sql_query_no_partitions", "lstrip"]], "operator": [["operator", "self", "_construct_operator", "monkeypatch", "self", "short_valid_column_mapping"], ["operator", "_generate_sql_query", "checks", "lstrip", "self", "correct_generate_sql_query_no_partitions", "lstrip"]]}, "name": "test_generate_sql_query_no_partitions", "params": {"monkeypatch": "", "self": ""}, "params_descr": {"monkeypatch": "", "self": ""}, "params_occur": {"monkeypatch": [["operator", "self", "_construct_operator", "monkeypatch", "self", "short_valid_column_mapping"]], "self": [["checks", "self", "short_valid_column_mapping"], ["operator", "self", "_construct_operator", "monkeypatch", "self", "short_valid_column_mapping"], ["operator", "_generate_sql_query", "checks", "lstrip", "self", "correct_generate_sql_query_no_partitions", "lstrip"]]}, "params_p": {"args": [], "kwargs": [], "monkeypatch": [], "self": []}, "q_name": "TestColumnCheckOperator.test_generate_sql_query_no_partitions", "ret_exprs": [], "ret_type": "", "variables": {"checks": "", "operator": ""}, "variables_p": {"checks": [["int", 0.2141318829494645], ["List[int]", 0.20805502864066405], ["Dict[str, Union[dict, Any]]", 0.18863400303129607]], "operator": [["str", 0.8155441237405537], ["float", 0.09952639388366892], ["Type[UserWarning]", 0.08492948237577742]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[248, 4], [255, 9]], "fn_var_ln": {"checks": [[249, 8], [249, 14]], "operator": [[250, 8], [250, 16]], "partition_clause": [[251, 8], [251, 33]]}, "fn_var_occur": {"checks": [["checks", "self", "short_valid_column_mapping"], ["operator", "_generate_sql_query", "checks", "lstrip", "self", "correct_generate_sql_query_with_partition", "lstrip"]], "operator": [["operator", "self", "_construct_operator", "monkeypatch", "self", "short_valid_column_mapping"], ["operator", "partition_clause"], ["operator", "_generate_sql_query", "checks", "lstrip", "self", "correct_generate_sql_query_with_partition", "lstrip"]], "partition_clause": [["operator", "partition_clause"]]}, "name": "test_generate_sql_query_with_partitions", "params": {"monkeypatch": "", "self": ""}, "params_descr": {"monkeypatch": "", "self": ""}, "params_occur": {"monkeypatch": [["operator", "self", "_construct_operator", "monkeypatch", "self", "short_valid_column_mapping"]], "self": [["checks", "self", "short_valid_column_mapping"], ["operator", "self", "_construct_operator", "monkeypatch", "self", "short_valid_column_mapping"], ["operator", "_generate_sql_query", "checks", "lstrip", "self", "correct_generate_sql_query_with_partition", "lstrip"]]}, "params_p": {"args": [], "kwargs": [], "monkeypatch": [], "self": []}, "q_name": "TestColumnCheckOperator.test_generate_sql_query_with_partitions", "ret_exprs": [], "ret_type": "", "variables": {"checks": "", "operator": "", "partition_clause": ""}, "variables_p": {"checks": [["int", 0.2141318829494645], ["List[int]", 0.20805502864066405], ["Dict[str, Union[dict, Any]]", 0.18863400303129607]], "operator": [["int", 0.4499241529802146], ["str", 0.35174741719675484], ["List[str]", 0.1007449992076969], ["List[Tuple[int, int]]", 0.09758343061533364]], "partition_clause": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["str", 0.1], ["datetime.timedelta", 0.1]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[257, 4], [265, 9]], "fn_var_ln": {"checks": [[258, 8], [258, 14]], "operator": [[259, 8], [259, 16]], "partition_clause": [[260, 8], [260, 33]]}, "fn_var_occur": {"checks": [["checks", "self", "short_valid_column_mapping"], ["operator", "_generate_sql_query", "checks", "lstrip", "self", "correct_generate_sql_query_with_partition", "lstrip"]], "operator": [["operator", "self", "_construct_operator", "monkeypatch", "self", "short_valid_column_mapping"], ["operator", "partition_clause"], ["operator", "render_template_fields"], ["operator", "_generate_sql_query", "checks", "lstrip", "self", "correct_generate_sql_query_with_partition", "lstrip"]], "partition_clause": [["operator", "partition_clause"]]}, "name": "test_generate_sql_query_with_templated_partitions", "params": {"monkeypatch": "", "self": ""}, "params_descr": {"monkeypatch": "", "self": ""}, "params_occur": {"monkeypatch": [["operator", "self", "_construct_operator", "monkeypatch", "self", "short_valid_column_mapping"]], "self": [["checks", "self", "short_valid_column_mapping"], ["operator", "self", "_construct_operator", "monkeypatch", "self", "short_valid_column_mapping"], ["operator", "_generate_sql_query", "checks", "lstrip", "self", "correct_generate_sql_query_with_partition", "lstrip"]]}, "params_p": {"args": [], "kwargs": [], "monkeypatch": [], "self": []}, "q_name": "TestColumnCheckOperator.test_generate_sql_query_with_templated_partitions", "ret_exprs": [], "ret_type": "", "variables": {"checks": "", "operator": "", "partition_clause": ""}, "variables_p": {"checks": [["int", 0.2141318829494645], ["List[int]", 0.20805502864066405], ["Dict[str, Union[dict, Any]]", 0.18863400303129607]], "operator": [["int", 0.3654977757815372], ["str", 0.2055167474938075], ["List[Tuple[int, int]]", 0.13602618538283429], ["List[str]", 0.08752324818858889]], "partition_clause": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["str", 0.1], ["datetime.timedelta", 0.1]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[267, 4], [276, 82]], "fn_var_ln": {"checks": [[269, 8], [269, 14]], "operator": [[270, 8], [270, 16]], "partition_clause": [[271, 8], [271, 33]]}, "fn_var_occur": {"checks": [["checks", "self", "short_valid_column_mapping"], ["operator", "_generate_sql_query", "checks", "lstrip", "self", "correct_generate_sql_query_with_partition_and_where", "lstrip"]], "operator": [["operator", "self", "_construct_operator", "monkeypatch", "self", "short_valid_column_mapping"], ["operator", "partition_clause"], ["operator", "_generate_sql_query", "checks", "lstrip", "self", "correct_generate_sql_query_with_partition_and_where", "lstrip"]], "partition_clause": [["operator", "partition_clause"]]}, "name": "test_generate_sql_query_with_partitions_and_check_partition", "params": {"monkeypatch": "", "self": ""}, "params_descr": {"monkeypatch": "", "self": ""}, "params_occur": {"monkeypatch": [["operator", "self", "_construct_operator", "monkeypatch", "self", "short_valid_column_mapping"]], "self": [["self", "short_valid_column_mapping"], ["checks", "self", "short_valid_column_mapping"], ["operator", "self", "_construct_operator", "monkeypatch", "self", "short_valid_column_mapping"], ["operator", "_generate_sql_query", "checks", "lstrip", "self", "correct_generate_sql_query_with_partition_and_where", "lstrip"], ["self", "short_valid_column_mapping"]]}, "params_p": {"args": [], "kwargs": [], "monkeypatch": [], "self": []}, "q_name": "TestColumnCheckOperator.test_generate_sql_query_with_partitions_and_check_partition", "ret_exprs": [], "ret_type": "", "variables": {"checks": "", "operator": "", "partition_clause": ""}, "variables_p": {"checks": [["int", 0.2141318829494645], ["List[int]", 0.20805502864066405], ["Dict[str, Union[dict, Any]]", 0.18863400303129607]], "operator": [["int", 0.4499241529802146], ["str", 0.35174741719675484], ["List[str]", 0.1007449992076969], ["List[Tuple[int, int]]", 0.09758343061533364]], "partition_clause": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["str", 0.1], ["datetime.timedelta", 0.1]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[278, 4], [286, 86]], "fn_var_ln": {"checks": [[280, 8], [280, 14]], "operator": [[281, 8], [281, 16]]}, "fn_var_occur": {"checks": [["checks", "self", "short_valid_column_mapping"], ["operator", "_generate_sql_query", "checks", "lstrip", "self", "correct_generate_sql_query_with_where", "lstrip"]], "operator": [["operator", "self", "_construct_operator", "monkeypatch", "self", "short_valid_column_mapping"], ["operator", "_generate_sql_query", "checks", "lstrip", "self", "correct_generate_sql_query_with_where", "lstrip"]]}, "name": "test_generate_sql_query_with_check_partition", "params": {"monkeypatch": "", "self": ""}, "params_descr": {"monkeypatch": "", "self": ""}, "params_occur": {"monkeypatch": [["operator", "self", "_construct_operator", "monkeypatch", "self", "short_valid_column_mapping"]], "self": [["self", "short_valid_column_mapping"], ["checks", "self", "short_valid_column_mapping"], ["operator", "self", "_construct_operator", "monkeypatch", "self", "short_valid_column_mapping"], ["operator", "_generate_sql_query", "checks", "lstrip", "self", "correct_generate_sql_query_with_where", "lstrip"], ["self", "short_valid_column_mapping"]]}, "params_p": {"args": [], "kwargs": [], "monkeypatch": [], "self": []}, "q_name": "TestColumnCheckOperator.test_generate_sql_query_with_check_partition", "ret_exprs": [], "ret_type": "", "variables": {"checks": "", "operator": ""}, "variables_p": {"checks": [["int", 0.25794653993105066], ["Dict[str, int]", 0.07443820653810107], ["dict", 0.0710763995370515]], "operator": [["str", 0.9149249258047437], ["Type[UserWarning]", 0.08507507419525617]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[289, 4], [311, 9]], "fn_var_ln": {"mock_hook": [[295, 8], [295, 17]], "operator": [[299, 8], [299, 16]], "records": [[290, 8], [290, 15]], "return_value": [[297, 8], [297, 37]]}, "fn_var_occur": {"mock_hook": [["mock_hook", "mock", "Mock"], ["mock_hook", "get_records", "return_value", "records"], ["mock_get_db_hook", "return_value", "mock_hook"]], "operator": [["operator", "SQLColumnCheckOperator", "task_id", "table", "column_mapping", "self", "short_valid_column_mapping", "partition_clause"], ["operator", "render_template_fields"], ["operator", "execute", "context", "MagicMock"]], "records": [["mock_hook", "get_records", "return_value", "records"]], "return_value": [["mock_hook", "get_records", "return_value", "records"], ["mock_get_db_hook", "return_value", "mock_hook"], ["mock_get_db_hook", "return_value", "get_records", "assert_called_once_with", "self", "_full_check_sql", "self", "correct_generate_sql_query_with_partition"]]}, "name": "test_generated_sql_respects_templated_partitions", "params": {"mock_get_db_hook": "", "self": ""}, "params_descr": {"mock_get_db_hook": "", "self": ""}, "params_occur": {"mock_get_db_hook": [["mock_get_db_hook", "return_value", "mock_hook"], ["mock_get_db_hook", "return_value", "get_records", "assert_called_once_with", "self", "_full_check_sql", "self", "correct_generate_sql_query_with_partition"]], "self": [["operator", "SQLColumnCheckOperator", "task_id", "table", "column_mapping", "self", "short_valid_column_mapping", "partition_clause"], ["mock_get_db_hook", "return_value", "get_records", "assert_called_once_with", "self", "_full_check_sql", "self", "correct_generate_sql_query_with_partition"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_db_hook": [["mock.Mock", 0.17921614035325656]], "self": []}, "q_name": "TestColumnCheckOperator.test_generated_sql_respects_templated_partitions", "ret_exprs": [], "ret_type": "", "variables": {"mock_hook": "", "operator": "", "records": "", "return_value": ""}, "variables_p": {"mock_hook": [["mock.Mock", 0.2746127777357559], ["str", 0.12744646522621755], ["unittesmock.MagicMock", 0.11137728772467365], ["mock.MagicMock", 0.08259670314250069]], "operator": [["int", 0.3103705514400946], ["str", 0.2815321258141785], ["bool", 0.10738372195160523]], "records": [["Dict[str, Dict[str, Any]]", 0.372653096522467], ["List[str]", 0.18801302088125174], ["unittesmock.MagicMock", 0.09889612002940396], ["Dict[str, Union[Any, Any, Any, Any]]", 0.09647672860009691], ["List[Union[Any, Any, Any]]", 0.09647672860009691]], "return_value": [["str", 0.5995642186687997], ["Dict[str, str]", 0.20371761573646452], ["Union[Literal, Literal]", 0.09983100079666953], ["Dict[str, Dict[str, Any]]", 0.09688716479806614]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[314, 4], [335, 9]], "fn_var_ln": {"mock_hook": [[320, 8], [320, 17]], "operator": [[324, 8], [324, 16]], "records": [[315, 8], [315, 15]], "return_value": [[322, 8], [322, 37]]}, "fn_var_occur": {"mock_hook": [["mock_hook", "mock", "Mock"], ["mock_hook", "get_records", "return_value", "records"], ["mock_get_db_hook", "return_value", "mock_hook"]], "operator": [["operator", "SQLColumnCheckOperator", "task_id", "table", "column_mapping", "self", "short_valid_column_mapping"], ["operator", "render_template_fields"], ["operator", "execute", "context", "MagicMock"]], "records": [["mock_hook", "get_records", "return_value", "records"]], "return_value": [["mock_hook", "get_records", "return_value", "records"], ["mock_get_db_hook", "return_value", "mock_hook"], ["mock_get_db_hook", "return_value", "get_records", "assert_called_once_with", "self", "_full_check_sql", "self", "correct_generate_sql_query_no_partitions"]]}, "name": "test_generated_sql_respects_templated_table", "params": {"mock_get_db_hook": "", "self": ""}, "params_descr": {"mock_get_db_hook": "", "self": ""}, "params_occur": {"mock_get_db_hook": [["mock_get_db_hook", "return_value", "mock_hook"], ["mock_get_db_hook", "return_value", "get_records", "assert_called_once_with", "self", "_full_check_sql", "self", "correct_generate_sql_query_no_partitions"]], "self": [["operator", "SQLColumnCheckOperator", "task_id", "table", "column_mapping", "self", "short_valid_column_mapping"], ["mock_get_db_hook", "return_value", "get_records", "assert_called_once_with", "self", "_full_check_sql", "self", "correct_generate_sql_query_no_partitions"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_db_hook": [["unittesmock.MagicMock", 0.0928943534734239]], "self": []}, "q_name": "TestColumnCheckOperator.test_generated_sql_respects_templated_table", "ret_exprs": [], "ret_type": "", "variables": {"mock_hook": "", "operator": "", "records": "", "return_value": ""}, "variables_p": {"mock_hook": [["mock.Mock", 0.2746127777357559], ["str", 0.12744646522621755], ["unittesmock.MagicMock", 0.11137728772467365], ["mock.MagicMock", 0.08259670314250069]], "operator": [["int", 0.3210267083166841], ["str", 0.2795320440512712], ["bool", 0.1078744206663598]], "records": [["Dict[str, Dict[str, Any]]", 0.372653096522467], ["List[str]", 0.18801302088125174], ["unittesmock.MagicMock", 0.09889612002940396], ["Dict[str, Union[Any, Any, Any, Any]]", 0.09647672860009691], ["List[Union[Any, Any, Any]]", 0.09647672860009691]], "return_value": [["str", 0.5995642186687997], ["Dict[str, str]", 0.20371761573646452], ["Union[Literal, Literal]", 0.09983100079666953], ["Dict[str, Dict[str, Any]]", 0.09688716479806614]]}}], "name": "TestColumnCheckOperator", "q_name": "TestColumnCheckOperator", "variables": {"correct_generate_sql_query_no_partitions": "", "correct_generate_sql_query_with_partition": "", "correct_generate_sql_query_with_partition_and_where": "", "correct_generate_sql_query_with_where": "", "invalid_column_mapping": "", "short_valid_column_mapping": "", "valid_column_mapping": ""}, "variables_p": {"correct_generate_sql_query_no_partitions": [["int", 0.7745237670472279], ["str", 0.2254762329527722]], "correct_generate_sql_query_with_partition": [["str", 0.4999999999999999], ["int", 0.49999999950523966], ["bool", 4.947602542935607e-10]], "correct_generate_sql_query_with_partition_and_where": [["str", 0.4999999999999999], ["int", 0.49999999950523966], ["bool", 4.947602542935607e-10]], "correct_generate_sql_query_with_where": [["str", 0.4999999999999999], ["int", 0.49999999950523966], ["bool", 4.947602542935607e-10]], "invalid_column_mapping": [["str", 0.529471109825195], ["bool", 0.18968488659746566], ["int", 0.13240181373030566], ["Optional[str]", 0.0742210949235168], ["List[str]", 0.0742210949235168]], "short_valid_column_mapping": [["int", 1.0]], "valid_column_mapping": [["str", 0.6967445498072125], ["Dict[str, Union[bool, str]]", 0.09806150900862624], ["Dict[str, Set[int]]", 0.09260792321448076]]}}, {"cls_lc": [[338, 0], [530, 63]], "cls_var_ln": {"checks": [[342, 4], [342, 10]], "correct_generate_sql_query_no_partitions": [[347, 4], [347, 44]], "correct_generate_sql_query_with_partition": [[357, 4], [357, 45]], "correct_generate_sql_query_with_partition_and_where": [[367, 4], [367, 55]], "correct_generate_sql_query_with_where": [[377, 4], [377, 41]], "count_check": [[340, 4], [340, 15]], "sum_check": [[341, 4], [341, 13]]}, "cls_var_occur": {"checks": [], "correct_generate_sql_query_no_partitions": [], "correct_generate_sql_query_with_partition": [], "correct_generate_sql_query_with_partition_and_where": [], "correct_generate_sql_query_with_where": [], "count_check": [], "sum_check": []}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[388, 8], [389, 26]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "get_records", "params": {"arg": ""}, "params_descr": {"arg": ""}, "params_occur": {"arg": []}, "params_p": {"arg": [["bool", 0.39999999999999997], ["str", 0.39999999999999997], ["T", 0.09999999999999999], ["dict", 0.09999999999999999]], "args": [], "kwargs": [], "self": []}, "q_name": "TestTableCheckOperator._construct_operator.<locals>.get_records", "ret_exprs": ["return records"], "ret_type": "", "ret_type_p": [["str", 0.19999999999999998], ["bool", 0.09999999999999999], ["pyspark.sql.SparkSession", 0.09999999999999999]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[387, 4], [394, 23]], "fn_var_ln": {"operator": [[391, 8], [391, 16]]}, "fn_var_occur": {"operator": [["operator", "SQLTableCheckOperator", "task_id", "table", "checks", "checks"], ["monkeypatch", "setattr", "operator", "_get_mock_db_hook"]]}, "name": "_construct_operator", "params": {"checks": "", "monkeypatch": "", "records": "", "self": ""}, "params_descr": {"checks": "", "monkeypatch": "", "records": "", "self": ""}, "params_occur": {"checks": [["operator", "SQLTableCheckOperator", "task_id", "table", "checks", "checks"]], "monkeypatch": [["monkeypatch", "setattr", "operator", "_get_mock_db_hook"], ["monkeypatch", "setattr", "MockHook", "get_records"]], "records": [], "self": []}, "params_p": {"args": [], "checks": [["int", 0.31894311719006946], ["Optional[float]", 0.09690873280439614], ["float", 0.09690873280439614], ["zerver.models.Stream", 0.0929209728100234], ["zerver.models.Realm", 0.08391344851425434]], "kwargs": [], "monkeypatch": [["bool", 0.2185484525137657], ["bytes", 0.11245362114319668], ["jumeaux.models.Log2ReqsAddOnPayload", 0.10802786540825268], ["models.User", 0.094502630955262], ["List[str]", 0.094502630955262], ["str", 0.09263400883681543], ["Exception", 0.0916191510127354]], "records": [["int", 0.19999999999999998], ["str", 0.19999999999999998], ["Iterable['Context']", 0.09999999999999999], ["dict", 0.09999999999999999], ["bool", 0.09999999999999999]], "self": []}, "q_name": "TestTableCheckOperator._construct_operator", "ret_exprs": ["return operator"], "ret_type": "", "ret_type_p": [["int", 0.30000000000000004], ["Callable", 0.2], ["models.Question", 0.1], ["str", 0.1]], "variables": {"operator": ""}, "variables_p": {"operator": [["int", 0.27225787956386827], ["bool", 0.12678430303307509], ["lists.models.Todo", 0.12211077778620986], ["Dict[str, Any]", 0.11796412315533814], ["list", 0.1054627833351158], ["str", 0.09030259091993867]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[403, 4], [431, 46]], "fn_var_ln": {"hook": [[411, 8], [411, 12]], "operator": [[404, 8], [404, 16]]}, "fn_var_occur": {"hook": [["hook", "operator", "get_db_hook"], ["hook", "run"], ["hook", "run"]], "operator": [["operator", "SQLTableCheckOperator", "task_id", "table", "checks", "conn_id", "conn_id"], ["hook", "operator", "get_db_hook"], ["operator", "execute"]]}, "name": "test_sql_check", "params": {"conn_id": "", "self": ""}, "params_descr": {"conn_id": "", "self": ""}, "params_occur": {"conn_id": [["operator", "SQLTableCheckOperator", "task_id", "table", "checks", "conn_id", "conn_id"]], "self": []}, "params_p": {"args": [], "conn_id": [["int", 0.3041550772703414], ["str", 0.10743509389880847], ["bytearray", 0.0997690155488226], ["Dict[UserID, services.user.transfer.models.User]", 0.08980282012244312]], "kwargs": [], "self": []}, "q_name": "TestTableCheckOperator.test_sql_check", "ret_exprs": [], "ret_type": "", "variables": {"hook": "", "operator": ""}, "variables_p": {"hook": [["List[Dict[str, Any]]", 0.13421589879483706]], "operator": [["str", 0.20409553624982796], ["Dict[str, Any]", 0.15250005529282526], ["bool", 0.09464247104570402], ["int", 0.08877156325333951], ["List[str]", 0.08704389095414525], ["raiden.utils.PaymentID", 0.08513375487301728]]}}, {"docstring": {"func": "Checks that the generated sql respects a templated partition clause", "long_descr": null, "ret": null}, "fn_lc": [[440, 4], [473, 46]], "fn_var_ln": {"hook": [[452, 8], [452, 12]], "operator": [[444, 8], [444, 16]]}, "fn_var_occur": {"hook": [["hook", "operator", "get_db_hook"], ["hook", "run"], ["hook", "run"]], "operator": [["operator", "SQLTableCheckOperator", "task_id", "table", "checks", "conn_id", "conn_id", "partition_clause"], ["hook", "operator", "get_db_hook"], ["operator", "render_template_fields"], ["operator", "execute"]]}, "name": "test_sql_check_partition_clause_templating", "params": {"conn_id": "", "self": ""}, "params_descr": {"conn_id": "", "self": ""}, "params_occur": {"conn_id": [["operator", "SQLTableCheckOperator", "task_id", "table", "checks", "conn_id", "conn_id", "partition_clause"]], "self": []}, "params_p": {"args": [], "conn_id": [["str", 0.18570696299477135], ["int", 0.11004696172924354], ["bytearray", 0.10197902024642272], ["datetime.datetime", 0.09713302183843088]], "kwargs": [], "self": []}, "q_name": "TestTableCheckOperator.test_sql_check_partition_clause_templating", "ret_exprs": [], "ret_type": "", "variables": {"hook": "", "operator": ""}, "variables_p": {"hook": [["List[Dict[str, Any]]", 0.13421589879483706]], "operator": [["str", 0.2034595001314166], ["Dict[str, Any]", 0.1656550996700582], ["bool", 0.09456288432675607], ["int", 0.08818672095632131], ["list", 0.08522606279145367]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[475, 4], [479, 94]], "fn_var_ln": {"operator": [[477, 8], [477, 16]], "records": [[476, 8], [476, 15]]}, "fn_var_occur": {"operator": [["operator", "self", "_construct_operator", "monkeypatch", "self", "checks", "records"], ["operator", "execute", "context", "MagicMock"], ["operator", "checks", "check", "True", "check", "operator", "checks", "keys"]], "records": [["operator", "self", "_construct_operator", "monkeypatch", "self", "checks", "records"]]}, "name": "test_pass_all_checks_check", "params": {"monkeypatch": "", "self": ""}, "params_descr": {"monkeypatch": "", "self": ""}, "params_occur": {"monkeypatch": [["operator", "self", "_construct_operator", "monkeypatch", "self", "checks", "records"]], "self": [["operator", "self", "_construct_operator", "monkeypatch", "self", "checks", "records"]]}, "params_p": {"args": [], "kwargs": [], "monkeypatch": [["dict", 0.12229329913591704]], "self": []}, "q_name": "TestTableCheckOperator.test_pass_all_checks_check", "ret_exprs": [], "ret_type": "", "variables": {"operator": "", "records": ""}, "variables_p": {"operator": [["Dict[int, Dict[str, Any]]", 0.221197293376462], ["unittesmock._patch[Union[unittesmock.AsyncMock, unittesmock.MagicMock]]", 0.16161094200101084], ["int", 0.1399039351371193], ["str", 0.1325828755629265], ["unittesmock.MagicMock", 0.10547950939219053]], "records": [["str", 0.6178515038866348], ["int", 0.28536119279865196], ["Union[Literal, str]", 0.09678730331471336]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[481, 4], [485, 49]], "fn_var_ln": {"operator": [[483, 8], [483, 16]], "records": [[482, 8], [482, 15]]}, "fn_var_occur": {"operator": [["operator", "self", "_construct_operator", "monkeypatch", "self", "checks", "records"], ["operator", "execute", "context", "MagicMock"]], "records": [["operator", "self", "_construct_operator", "monkeypatch", "self", "checks", "records"]]}, "name": "test_fail_all_checks_check", "params": {"monkeypatch": "", "self": ""}, "params_descr": {"monkeypatch": "", "self": ""}, "params_occur": {"monkeypatch": [["operator", "self", "_construct_operator", "monkeypatch", "self", "checks", "records"]], "self": [["operator", "self", "_construct_operator", "monkeypatch", "self", "checks", "records"]]}, "params_p": {"args": [], "kwargs": [], "monkeypatch": [["dict", 0.12229329913591704]], "self": []}, "q_name": "TestTableCheckOperator.test_fail_all_checks_check", "ret_exprs": [], "ret_type": "", "variables": {"operator": "", "records": ""}, "variables_p": {"operator": [["Tuple[List[str], Tuple[Literal, Literal], List[str]]", 0.2674461281705103], ["Tuple[Literal, Literal]", 0.17568214011455505], ["Dict[str, Dict[str, Any]]", 0.17447780051155576], ["unittesmock.MagicMock", 0.09904658274662927], ["int", 0.08784107005727752]], "records": [["str", 0.6178515038866348], ["int", 0.28536119279865196], ["Union[Literal, str]", 0.09678730331471336]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[487, 4], [491, 9]], "fn_var_ln": {"operator": [[488, 8], [488, 16]]}, "fn_var_occur": {"operator": [["operator", "self", "_construct_operator", "monkeypatch", "self", "checks"], ["operator", "_generate_sql_query", "lstrip", "self", "correct_generate_sql_query_no_partitions", "lstrip"]]}, "name": "test_generate_sql_query_no_partitions", "params": {"monkeypatch": "", "self": ""}, "params_descr": {"monkeypatch": "", "self": ""}, "params_occur": {"monkeypatch": [["operator", "self", "_construct_operator", "monkeypatch", "self", "checks"]], "self": [["operator", "self", "_construct_operator", "monkeypatch", "self", "checks"], ["operator", "_generate_sql_query", "lstrip", "self", "correct_generate_sql_query_no_partitions", "lstrip"]]}, "params_p": {"args": [], "kwargs": [], "monkeypatch": [], "self": []}, "q_name": "TestTableCheckOperator.test_generate_sql_query_no_partitions", "ret_exprs": [], "ret_type": "", "variables": {"operator": ""}, "variables_p": {"operator": [["str", 1.0]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[493, 4], [498, 9]], "fn_var_ln": {"operator": [[494, 8], [494, 16]], "partition_clause": [[495, 8], [495, 33]]}, "fn_var_occur": {"operator": [["operator", "self", "_construct_operator", "monkeypatch", "self", "checks"], ["operator", "partition_clause"], ["operator", "_generate_sql_query", "lstrip", "self", "correct_generate_sql_query_with_partition", "lstrip"]], "partition_clause": [["operator", "partition_clause"]]}, "name": "test_generate_sql_query_with_partitions", "params": {"monkeypatch": "", "self": ""}, "params_descr": {"monkeypatch": "", "self": ""}, "params_occur": {"monkeypatch": [["operator", "self", "_construct_operator", "monkeypatch", "self", "checks"]], "self": [["operator", "self", "_construct_operator", "monkeypatch", "self", "checks"], ["operator", "_generate_sql_query", "lstrip", "self", "correct_generate_sql_query_with_partition", "lstrip"]]}, "params_p": {"args": [], "kwargs": [], "monkeypatch": [], "self": []}, "q_name": "TestTableCheckOperator.test_generate_sql_query_with_partitions", "ret_exprs": [], "ret_type": "", "variables": {"operator": "", "partition_clause": ""}, "variables_p": {"operator": [["str", 1.0]], "partition_clause": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["str", 0.1], ["datetime.timedelta", 0.1]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[500, 4], [506, 9]], "fn_var_ln": {"operator": [[501, 8], [501, 16]], "partition_clause": [[502, 8], [502, 33]]}, "fn_var_occur": {"operator": [["operator", "self", "_construct_operator", "monkeypatch", "self", "checks"], ["operator", "partition_clause"], ["operator", "render_template_fields"], ["operator", "_generate_sql_query", "lstrip", "self", "correct_generate_sql_query_with_partition", "lstrip"]], "partition_clause": [["operator", "partition_clause"]]}, "name": "test_generate_sql_query_with_templated_partitions", "params": {"monkeypatch": "", "self": ""}, "params_descr": {"monkeypatch": "", "self": ""}, "params_occur": {"monkeypatch": [["operator", "self", "_construct_operator", "monkeypatch", "self", "checks"]], "self": [["operator", "self", "_construct_operator", "monkeypatch", "self", "checks"], ["operator", "_generate_sql_query", "lstrip", "self", "correct_generate_sql_query_with_partition", "lstrip"]]}, "params_p": {"args": [], "kwargs": [], "monkeypatch": [], "self": []}, "q_name": "TestTableCheckOperator.test_generate_sql_query_with_templated_partitions", "ret_exprs": [], "ret_type": "", "variables": {"operator": "", "partition_clause": ""}, "variables_p": {"operator": [["str", 0.7962501106678536], ["int", 0.20374988933214655]], "partition_clause": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["str", 0.1], ["datetime.timedelta", 0.1]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[508, 4], [514, 9]], "fn_var_ln": {"operator": [[509, 8], [509, 16]], "table": [[510, 8], [510, 22]]}, "fn_var_occur": {"operator": [["operator", "self", "_construct_operator", "monkeypatch", "self", "checks"], ["operator", "table"], ["operator", "render_template_fields"], ["operator", "_generate_sql_query", "lstrip", "self", "correct_generate_sql_query_no_partitions", "lstrip"]], "table": [["operator", "table"]]}, "name": "test_generate_sql_query_with_templated_table", "params": {"monkeypatch": "", "self": ""}, "params_descr": {"monkeypatch": "", "self": ""}, "params_occur": {"monkeypatch": [["operator", "self", "_construct_operator", "monkeypatch", "self", "checks"]], "self": [["operator", "self", "_construct_operator", "monkeypatch", "self", "checks"], ["operator", "_generate_sql_query", "lstrip", "self", "correct_generate_sql_query_no_partitions", "lstrip"]]}, "params_p": {"args": [], "kwargs": [], "monkeypatch": [], "self": []}, "q_name": "TestTableCheckOperator.test_generate_sql_query_with_templated_table", "ret_exprs": [], "ret_type": "", "variables": {"operator": "", "table": ""}, "variables_p": {"operator": [["str", 0.900243074038914], ["int", 0.09975692596108608]], "table": [["dict", 0.3], ["list", 0.3], ["str", 0.09999999999999999], ["List[Union[Any, Any, Any, Any, Any, Any, Any, Any, Any]]", 0.09999999999999999], ["List[Type[Any]]", 0.09999999999999999]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[516, 4], [524, 62]], "fn_var_ln": {"operator": [[518, 8], [518, 16]], "partition_clause": [[519, 8], [519, 33]]}, "fn_var_occur": {"operator": [["operator", "self", "_construct_operator", "monkeypatch", "self", "checks"], ["operator", "partition_clause"], ["operator", "_generate_sql_query", "lstrip", "self", "correct_generate_sql_query_with_partition_and_where", "lstrip"]], "partition_clause": [["operator", "partition_clause"]]}, "name": "test_generate_sql_query_with_partitions_and_check_partition", "params": {"monkeypatch": "", "self": ""}, "params_descr": {"monkeypatch": "", "self": ""}, "params_occur": {"monkeypatch": [["operator", "self", "_construct_operator", "monkeypatch", "self", "checks"]], "self": [["self", "checks"], ["operator", "self", "_construct_operator", "monkeypatch", "self", "checks"], ["operator", "_generate_sql_query", "lstrip", "self", "correct_generate_sql_query_with_partition_and_where", "lstrip"], ["self", "checks"]]}, "params_p": {"args": [], "kwargs": [], "monkeypatch": [], "self": []}, "q_name": "TestTableCheckOperator.test_generate_sql_query_with_partitions_and_check_partition", "ret_exprs": [], "ret_type": "", "variables": {"operator": "", "partition_clause": ""}, "variables_p": {"operator": [["str", 1.0]], "partition_clause": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["str", 0.1], ["datetime.timedelta", 0.1]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[526, 4], [530, 63]], "fn_var_ln": {"operator": [[528, 8], [528, 16]]}, "fn_var_occur": {"operator": [["operator", "self", "_construct_operator", "monkeypatch", "self", "checks"], ["operator", "_generate_sql_query", "lstrip", "self", "correct_generate_sql_query_with_where", "lstrip"]]}, "name": "test_generate_sql_query_with_check_partition", "params": {"monkeypatch": "", "self": ""}, "params_descr": {"monkeypatch": "", "self": ""}, "params_occur": {"monkeypatch": [["operator", "self", "_construct_operator", "monkeypatch", "self", "checks"]], "self": [["self", "checks"], ["operator", "self", "_construct_operator", "monkeypatch", "self", "checks"], ["operator", "_generate_sql_query", "lstrip", "self", "correct_generate_sql_query_with_where", "lstrip"], ["self", "checks"]]}, "params_p": {"args": [], "kwargs": [], "monkeypatch": [], "self": []}, "q_name": "TestTableCheckOperator.test_generate_sql_query_with_check_partition", "ret_exprs": [], "ret_type": "", "variables": {"operator": ""}, "variables_p": {"operator": [["str", 1.0000000000000002]]}}], "name": "TestTableCheckOperator", "q_name": "TestTableCheckOperator", "variables": {"checks": "", "correct_generate_sql_query_no_partitions": "", "correct_generate_sql_query_with_partition": "", "correct_generate_sql_query_with_partition_and_where": "", "correct_generate_sql_query_with_where": "", "count_check": "", "sum_check": ""}, "variables_p": {"checks": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "correct_generate_sql_query_no_partitions": [["int", 0.7745237670472279], ["str", 0.2254762329527722]], "correct_generate_sql_query_with_partition": [["str", 0.4999999999999999], ["int", 0.49999999950523966], ["bool", 4.947602542935607e-10]], "correct_generate_sql_query_with_partition_and_where": [["str", 0.4999999999999999], ["int", 0.49999999950523966], ["bool", 4.947602542935607e-10]], "correct_generate_sql_query_with_where": [["str", 0.4999999999999999], ["int", 0.49999999950523966], ["bool", 4.947602542935607e-10]], "count_check": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "sum_check": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["raiden.utils.WithdrawAmount", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]]}}, {"cls_lc": [[565, 0], [606, 58]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[566, 4], [569, 96]], "fn_var_ln": {"_operator": [[569, 8], [569, 22]], "conn_id": [[568, 8], [568, 20]], "task_id": [[567, 8], [567, 20]]}, "fn_var_occur": {"_operator": [["self", "_operator", "SQLCheckOperator", "task_id", "self", "task_id", "conn_id", "self", "conn_id", "sql"]], "conn_id": [["self", "conn_id"], ["self", "_operator", "SQLCheckOperator", "task_id", "self", "task_id", "conn_id", "self", "conn_id", "sql"]], "task_id": [["self", "task_id"], ["self", "_operator", "SQLCheckOperator", "task_id", "self", "task_id", "conn_id", "self", "conn_id", "sql"]]}, "name": "setup_method", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "task_id"], ["self", "conn_id"], ["self", "_operator", "SQLCheckOperator", "task_id", "self", "task_id", "conn_id", "self", "conn_id", "sql"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSQLCheckOperatorDbHook.setup_method", "ret_exprs": [], "ret_type": "", "variables": {"_operator": "", "conn_id": "", "task_id": ""}, "variables_p": {"_operator": [["str", 0.7005012007300133], ["int", 0.29949879926998674]], "conn_id": [["int", 0.7739209419312624], ["str", 0.12988179629488722], ["Dict[str, str]", 0.09619726177385059]], "task_id": [["int", 0.5951844773476469], ["Dict[str, str]", 0.21320869616989152], ["Type[int]", 0.10273530639517509]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[572, 4], [576, 59]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_get_hook", "params": {"database": "", "mock_get_conn": "", "self": ""}, "params_descr": {"database": "", "mock_get_conn": "", "self": ""}, "params_occur": {"database": [["self", "_operator", "database", "database"]], "mock_get_conn": [["mock_get_conn", "assert_called_once_with", "self", "conn_id"]], "self": [["self", "_operator", "database", "database"], ["isinstance", "self", "_operator", "_hook", "PostgresHook"], ["mock_get_conn", "assert_called_once_with", "self", "conn_id"]]}, "params_p": {"args": [], "database": [], "kwargs": [], "mock_get_conn": [["unittesmock.MagicMock", 0.25011734823687054]], "self": []}, "q_name": "TestSQLCheckOperatorDbHook.test_get_hook", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[578, 4], [581, 32]], "fn_var_ln": {"return_value": [[579, 8], [579, 34]]}, "fn_var_occur": {"return_value": [["mock_get_conn", "return_value", "Connection", "conn_id", "conn_type"]]}, "name": "test_not_allowed_conn_type", "params": {"mock_get_conn": "", "self": ""}, "params_descr": {"mock_get_conn": "", "self": ""}, "params_occur": {"mock_get_conn": [["mock_get_conn", "return_value", "Connection", "conn_id", "conn_type"]], "self": [["self", "_operator", "_hook"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_conn": [["unittesmock.MagicMock", 0.5138345850125698], ["mock.Mock", 0.3962015212276123]], "self": []}, "q_name": "TestSQLCheckOperatorDbHook.test_not_allowed_conn_type", "ret_exprs": [], "ret_type": "", "variables": {"return_value": ""}, "variables_p": {"return_value": [["str", 0.5938998503393051], ["int", 0.10649524534965821], ["list", 0.0944260190818065], ["List[Dict[str, str]]", 0.08680370491694113]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[583, 4], [597, 47]], "fn_var_ln": {"return_value": [[584, 8], [584, 34]]}, "fn_var_occur": {"return_value": [["mock_get_conn", "return_value", "Connection", "conn_id", "conn_type"]]}, "name": "test_sql_operator_hook_params_snowflake", "params": {"mock_get_conn": "", "self": ""}, "params_descr": {"mock_get_conn": "", "self": ""}, "params_occur": {"mock_get_conn": [["mock_get_conn", "return_value", "Connection", "conn_id", "conn_type"]], "self": [["self", "_operator", "hook_params", "False"], ["self", "_operator", "_hook", "conn_type"], ["self", "_operator", "_hook", "warehouse"], ["self", "_operator", "_hook", "database"], ["self", "_operator", "_hook", "role"], ["self", "_operator", "_hook", "schema"], ["self", "_operator", "_hook", "log_sql"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_conn": [["unittesmock.MagicMock", 1.0]], "self": []}, "q_name": "TestSQLCheckOperatorDbHook.test_sql_operator_hook_params_snowflake", "ret_exprs": [], "ret_type": "", "variables": {"return_value": ""}, "variables_p": {"return_value": [["str", 0.5938998503393051], ["int", 0.10649524534965821], ["list", 0.0944260190818065], ["List[Dict[str, str]]", 0.08680370491694113]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[599, 4], [606, 58]], "fn_var_ln": {"return_value": [[600, 8], [600, 34]]}, "fn_var_occur": {"return_value": [["mock_get_conn", "return_value", "Connection", "conn_id", "conn_type"]]}, "name": "test_sql_operator_hook_params_biguery", "params": {"mock_get_conn": "", "self": ""}, "params_descr": {"mock_get_conn": "", "self": ""}, "params_occur": {"mock_get_conn": [["mock_get_conn", "return_value", "Connection", "conn_id", "conn_type"]], "self": [["self", "_operator", "hook_params", "True"], ["self", "_operator", "_hook", "conn_type"], ["self", "_operator", "_hook", "use_legacy_sql"], ["self", "_operator", "_hook", "location"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_conn": [["unittesmock.MagicMock", 1.0]], "self": []}, "q_name": "TestSQLCheckOperatorDbHook.test_sql_operator_hook_params_biguery", "ret_exprs": [], "ret_type": "", "variables": {"return_value": ""}, "variables_p": {"return_value": [["str", 0.5938998503393051], ["int", 0.10649524534965821], ["list", 0.0944260190818065], ["List[Dict[str, str]]", 0.08680370491694113]]}}], "name": "TestSQLCheckOperatorDbHook", "q_name": "TestSQLCheckOperatorDbHook", "variables": {}, "variables_p": {}}, {"cls_lc": [[609, 0], [630, 92]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[610, 4], [611, 98]], "fn_var_ln": {"_operator": [[611, 8], [611, 22]]}, "fn_var_occur": {"_operator": [["self", "_operator", "SQLCheckOperator", "task_id", "sql", "parameters"]]}, "name": "setup_method", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "_operator", "SQLCheckOperator", "task_id", "sql", "parameters"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestCheckOperator.setup_method", "ret_exprs": [], "ret_type": "", "variables": {"_operator": ""}, "variables_p": {"_operator": [["int", 0.30954465331949244], ["datetime.datetime.datetime", 0.10361346301847207], ["str", 0.10208501315026118], ["bool", 0.10208501315026118], ["dict", 0.07964252750033894]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[614, 4], [618, 38]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_execute_no_records", "params": {"mock_get_db_hook": "", "self": ""}, "params_descr": {"mock_get_db_hook": "", "self": ""}, "params_occur": {"mock_get_db_hook": [["mock_get_db_hook", "return_value", "get_first", "return_value"]], "self": [["self", "_operator", "execute"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_db_hook": [["unittesmock.MagicMock", 0.1212367272063822], ["raiden.utils.List[raiden.raiden_service.RaidenService]", 0.1164645996880709], ["mock.MagicMock", 0.09808264709080933], ["core_lib.core.models.Venue", 0.09605621029157904]], "self": []}, "q_name": "TestCheckOperator.test_execute_no_records", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[621, 4], [625, 38]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_execute_not_all_records_are_true", "params": {"mock_get_db_hook": "", "self": ""}, "params_descr": {"mock_get_db_hook": "", "self": ""}, "params_occur": {"mock_get_db_hook": [["mock_get_db_hook", "return_value", "get_first", "return_value"]], "self": [["self", "_operator", "execute"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_db_hook": [["unittesmock.MagicMock", 0.3198004601009669], ["raiden.utils.List[raiden.raiden_service.RaidenService]", 0.09832036238028104]], "self": []}, "q_name": "TestCheckOperator.test_execute_not_all_records_are_true", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[628, 4], [630, 92]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_sqlcheckoperator_parameters", "params": {"mock_get_db_hook": "", "self": ""}, "params_descr": {"mock_get_db_hook": "", "self": ""}, "params_occur": {"mock_get_db_hook": [["mock_get_db_hook", "return_value", "get_first", "assert_called_once_with"]], "self": [["self", "_operator", "execute"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_db_hook": [["unittesmock.MagicMock", 0.11008181046438052], ["mock.MagicMock", 0.08841276013024205]], "self": []}, "q_name": "TestCheckOperator.test_sqlcheckoperator_parameters", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestCheckOperator", "q_name": "TestCheckOperator", "variables": {}, "variables_p": {}}, {"cls_lc": [[633, 0], [689, 49]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[634, 4], [636, 37]], "fn_var_ln": {"conn_id": [[636, 8], [636, 20]], "task_id": [[635, 8], [635, 20]]}, "fn_var_occur": {"conn_id": [["self", "conn_id"]], "task_id": [["self", "task_id"]]}, "name": "setup_method", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "task_id"], ["self", "conn_id"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestValueCheckOperator.setup_method", "ret_exprs": [], "ret_type": "", "variables": {"conn_id": "", "task_id": ""}, "variables_p": {"conn_id": [["str", 1.0]], "task_id": [["dict", 0.37514486263863556], ["int", 0.19104806705887983], ["List[str]", 0.14825105706497352], ["set", 0.09768261296656006], ["bytes", 0.09408718461129206], ["Dict[str, str]", 0.09378621565965889]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[638, 4], [648, 9]], "fn_var_ln": {"dag": [[639, 8], [639, 11]]}, "fn_var_occur": {"dag": [["dag", "DAG", "start_date", "datetime", "datetime"], ["SQLValueCheckOperator", "dag", "dag", "task_id", "self", "task_id", "conn_id", "self", "conn_id", "sql", "sql", "pass_value", "pass_value", "tolerance", "tolerance"]]}, "name": "_construct_operator", "params": {"pass_value": "", "self": "", "sql": "", "tolerance": ""}, "params_descr": {"pass_value": "", "self": "", "sql": "", "tolerance": ""}, "params_occur": {"pass_value": [["SQLValueCheckOperator", "dag", "dag", "task_id", "self", "task_id", "conn_id", "self", "conn_id", "sql", "sql", "pass_value", "pass_value", "tolerance", "tolerance"]], "self": [["SQLValueCheckOperator", "dag", "dag", "task_id", "self", "task_id", "conn_id", "self", "conn_id", "sql", "sql", "pass_value", "pass_value", "tolerance", "tolerance"]], "sql": [["SQLValueCheckOperator", "dag", "dag", "task_id", "self", "task_id", "conn_id", "self", "conn_id", "sql", "sql", "pass_value", "pass_value", "tolerance", "tolerance"]], "tolerance": [["SQLValueCheckOperator", "dag", "dag", "task_id", "self", "task_id", "conn_id", "self", "conn_id", "sql", "sql", "pass_value", "pass_value", "tolerance", "tolerance"]]}, "params_p": {"args": [], "kwargs": [], "pass_value": [["int", 0.31386200591794533], ["raiden.utils.PaymentWithFeeAmount", 0.12771282909064283], ["Optional[int]", 0.0908966147359925], ["datetime.datetime", 0.09016399020740261], ["dict", 0.09016399020740261], ["zam_repondeur.services.fetch.an.dossiers.models.DossierRef", 0.08834611810515693]], "self": [], "sql": [["int", 0.31386200591794533], ["raiden.utils.PaymentWithFeeAmount", 0.12771282909064283], ["Optional[int]", 0.0908966147359925], ["datetime.datetime", 0.09016399020740261], ["dict", 0.09016399020740261], ["zam_repondeur.services.fetch.an.dossiers.models.DossierRef", 0.08834611810515693]], "tolerance": [["int", 0.31386200591794533], ["raiden.utils.PaymentWithFeeAmount", 0.12771282909064283], ["Optional[int]", 0.0908966147359925], ["datetime.datetime", 0.09016399020740261], ["dict", 0.09016399020740261], ["zam_repondeur.services.fetch.an.dossiers.models.DossierRef", 0.08834611810515693]]}, "q_name": "TestValueCheckOperator._construct_operator", "ret_exprs": ["return SQLValueCheckOperator( dag=dag, task_id=self.task_id, conn_id=self.conn_id, sql=sql, pass_value=pass_value, tolerance=tolerance,)"], "ret_type": "", "ret_type_p": [["dict", 0.2271456981397077], ["raiden.utils.TokenAmount", 0.10743949949415767], ["IO[str]", 0.10473746575504984], ["str", 0.09649373448149162], ["Dict[str, Any]", 0.09003357122643225], ["Iterable[str]", 0.0860006192163158]], "variables": {"dag": ""}, "variables_p": {"dag": [["datetime.datetime.timedelta", 0.4049240280803881], ["datetime.datetime", 0.27926610934041485], ["str", 0.21578439277135672], ["datetime.timezone", 0.10002546980784047]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[650, 4], [657, 52]], "fn_var_ln": {"operator": [[652, 8], [652, 16]], "pass_value_str": [[651, 8], [651, 22]]}, "fn_var_occur": {"operator": [["operator", "self", "_construct_operator"], ["operator", "render_template_fields", "pass_value_str"], ["operator", "task_id", "self", "task_id"], ["operator", "pass_value", "pass_value_str"]], "pass_value_str": [["operator", "render_template_fields", "pass_value_str"], ["operator", "pass_value", "pass_value_str"]]}, "name": "test_pass_value_template_string", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["operator", "self", "_construct_operator"], ["operator", "task_id", "self", "task_id"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestValueCheckOperator.test_pass_value_template_string", "ret_exprs": [], "ret_type": "", "variables": {"operator": "", "pass_value_str": ""}, "variables_p": {"operator": [["int", 0.5327941519008302], ["str", 0.24721501053941], ["raiden.utils.PaymentID", 0.10612808950561911]], "pass_value_str": [["str", 1.0]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[659, 4], [666, 59]], "fn_var_ln": {"operator": [[661, 8], [661, 16]], "pass_value_float": [[660, 8], [660, 24]]}, "fn_var_occur": {"operator": [["operator", "self", "_construct_operator", "pass_value_float"], ["operator", "render_template_fields"], ["operator", "task_id", "self", "task_id"], ["operator", "pass_value", "str", "pass_value_float"]], "pass_value_float": [["operator", "self", "_construct_operator", "pass_value_float"], ["operator", "pass_value", "str", "pass_value_float"]]}, "name": "test_pass_value_template_string_float", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["operator", "self", "_construct_operator", "pass_value_float"], ["operator", "task_id", "self", "task_id"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestValueCheckOperator.test_pass_value_template_string_float", "ret_exprs": [], "ret_type": "", "variables": {"operator": "", "pass_value_float": ""}, "variables_p": {"operator": [["str", 0.38183374072781506], ["float", 0.12304884111467011], ["int", 0.0960585848015655], ["Dict[Any, Dict[str, str]]", 0.08578659629284234]], "pass_value_float": [["Dict[str, Any]", 0.300614274846668], ["Dict[str, str]", 0.11124524003888178], ["int", 0.0925579348078463]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[669, 4], [678, 56]], "fn_var_ln": {"mock_hook": [[670, 8], [670, 17]], "operator": [[674, 8], [674, 16]], "return_value": [[672, 8], [672, 37]], "sql": [[673, 8], [673, 11]]}, "fn_var_occur": {"mock_hook": [["mock_hook", "mock", "Mock"], ["mock_hook", "get_first", "return_value"], ["mock_get_db_hook", "return_value", "mock_hook"], ["mock_hook", "get_first", "assert_called_once_with", "sql"]], "operator": [["operator", "self", "_construct_operator", "sql"], ["operator", "execute", "None"]], "return_value": [["mock_hook", "get_first", "return_value"], ["mock_get_db_hook", "return_value", "mock_hook"]], "sql": [["operator", "self", "_construct_operator", "sql"], ["mock_hook", "get_first", "assert_called_once_with", "sql"]]}, "name": "test_execute_pass", "params": {"mock_get_db_hook": "", "self": ""}, "params_descr": {"mock_get_db_hook": "", "self": ""}, "params_occur": {"mock_get_db_hook": [["mock_get_db_hook", "return_value", "mock_hook"]], "self": [["operator", "self", "_construct_operator", "sql"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_db_hook": [["unittesmock.MagicMock", 0.28175561270314764], ["mock.MagicMock", 0.26461643453993017]], "self": []}, "q_name": "TestValueCheckOperator.test_execute_pass", "ret_exprs": [], "ret_type": "", "variables": {"mock_hook": "", "operator": "", "return_value": "", "sql": ""}, "variables_p": {"mock_hook": [["unittesmock.MagicMock", 0.3016274270248982], ["mock.Mock", 0.25096513466830467], ["str", 0.1532157106892613]], "operator": [["str", 0.2934082874332606], ["int", 0.28880181364903623], ["bool", 0.12733687383595046], ["app.models.Tweet", 0.10823259207512133]], "return_value": [["str", 0.44151220690259685], ["int", 0.16702260445424785], ["tuple", 0.09716567064975623]], "sql": [["list", 0.39792145021885955], ["List[str]", 0.10821012279467807], ["Dict[int, Optional[str]]", 0.10552414360054185], ["Type[Callable[..., Any]]", 0.09228037558794078]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[681, 4], [689, 49]], "fn_var_ln": {"mock_hook": [[682, 8], [682, 17]], "operator": [[686, 8], [686, 16]], "return_value": [[684, 8], [684, 37]]}, "fn_var_occur": {"mock_hook": [["mock_hook", "mock", "Mock"], ["mock_hook", "get_first", "return_value"], ["mock_get_db_hook", "return_value", "mock_hook"]], "operator": [["operator", "self", "_construct_operator"], ["operator", "execute", "context", "MagicMock"]], "return_value": [["mock_hook", "get_first", "return_value"], ["mock_get_db_hook", "return_value", "mock_hook"]]}, "name": "test_execute_fail", "params": {"mock_get_db_hook": "", "self": ""}, "params_descr": {"mock_get_db_hook": "", "self": ""}, "params_occur": {"mock_get_db_hook": [["mock_get_db_hook", "return_value", "mock_hook"]], "self": [["operator", "self", "_construct_operator"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_db_hook": [["unittesmock.MagicMock", 0.28175561270314764], ["mock.MagicMock", 0.26461643453993017]], "self": []}, "q_name": "TestValueCheckOperator.test_execute_fail", "ret_exprs": [], "ret_type": "", "variables": {"mock_hook": "", "operator": "", "return_value": ""}, "variables_p": {"mock_hook": [["unittesmock.MagicMock", 0.4816321758176303], ["str", 0.11297567115630502], ["mock.MagicMock", 0.09639975227011381], ["mock.Mock", 0.09103842978049917]], "operator": [["str", 0.20950112001609772], ["Dict[str, Union[Any, Any, Any, Any]]", 0.09036558424959575], ["List[Union[Any, Any, Any]]", 0.09036558424959575]], "return_value": [["str", 0.44151220690259685], ["int", 0.16702260445424785], ["tuple", 0.09716567064975623]]}}], "name": "TestValueCheckOperator", "q_name": "TestValueCheckOperator", "variables": {}, "variables_p": {}}, {"cls_lc": [[692, 0], [806, 49]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[693, 4], [700, 9]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "_construct_operator", "params": {"ignore_zero": "", "metric_thresholds": "", "ratio_formula": "", "self": "", "table": ""}, "params_descr": {"ignore_zero": "", "metric_thresholds": "", "ratio_formula": "", "self": "", "table": ""}, "params_occur": {"ignore_zero": [["SQLIntervalCheckOperator", "task_id", "table", "table", "metrics_thresholds", "metric_thresholds", "ratio_formula", "ratio_formula", "ignore_zero", "ignore_zero"]], "metric_thresholds": [["SQLIntervalCheckOperator", "task_id", "table", "table", "metrics_thresholds", "metric_thresholds", "ratio_formula", "ratio_formula", "ignore_zero", "ignore_zero"]], "ratio_formula": [["SQLIntervalCheckOperator", "task_id", "table", "table", "metrics_thresholds", "metric_thresholds", "ratio_formula", "ratio_formula", "ignore_zero", "ignore_zero"]], "self": [], "table": [["SQLIntervalCheckOperator", "task_id", "table", "table", "metrics_thresholds", "metric_thresholds", "ratio_formula", "ratio_formula", "ignore_zero", "ignore_zero"]]}, "params_p": {"args": [], "ignore_zero": [["str", 0.18868910645842324], ["Dict[str, Any]", 0.1070836442237049], ["grouper.models.group.Group", 0.09458951086547586]], "kwargs": [], "metric_thresholds": [["str", 0.18868910645842324], ["Dict[str, Any]", 0.1070836442237049], ["grouper.models.group.Group", 0.09458951086547586]], "ratio_formula": [["str", 0.18868910645842324], ["Dict[str, Any]", 0.1070836442237049], ["grouper.models.group.Group", 0.09458951086547586]], "self": [], "table": [["str", 0.18868910645842324], ["Dict[str, Any]", 0.1070836442237049], ["grouper.models.group.Group", 0.09458951086547586]]}, "q_name": "TestIntervalCheckOperator._construct_operator", "ret_exprs": ["return SQLIntervalCheckOperator( task_id=\"test_task\", table=table, metrics_thresholds=metric_thresholds, ratio_formula=ratio_formula, ignore_zero=ignore_zero,)"], "ret_type": "", "ret_type_p": [["bool", 0.1214005156989149], ["List[str]", 0.09321205650689057], ["allennlp.common.util.JsonDict", 0.09321205650689057], ["str", 0.09202772455092291], ["salon.models.Stylist", 0.08838271993755975]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[702, 4], [711, 13]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_invalid_ratio_formula", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "_construct_operator", "table", "metric_thresholds", "ratio_formula", "ignore_zero", "False"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestIntervalCheckOperator.test_invalid_ratio_formula", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[714, 4], [729, 49]], "fn_var_ln": {"mock_hook": [[715, 8], [715, 17]], "operator": [[719, 8], [719, 16]], "return_value": [[717, 8], [717, 37]]}, "fn_var_occur": {"mock_hook": [["mock_hook", "mock", "Mock"], ["mock_hook", "get_first", "return_value"], ["mock_get_db_hook", "return_value", "mock_hook"]], "operator": [["operator", "self", "_construct_operator", "table", "metric_thresholds", "ratio_formula", "ignore_zero", "False"], ["operator", "execute", "context", "MagicMock"]], "return_value": [["mock_hook", "get_first", "return_value"], ["mock_get_db_hook", "return_value", "mock_hook"]]}, "name": "test_execute_not_ignore_zero", "params": {"mock_get_db_hook": "", "self": ""}, "params_descr": {"mock_get_db_hook": "", "self": ""}, "params_occur": {"mock_get_db_hook": [["mock_get_db_hook", "return_value", "mock_hook"]], "self": [["operator", "self", "_construct_operator", "table", "metric_thresholds", "ratio_formula", "ignore_zero", "False"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_db_hook": [["unittesmock.MagicMock", 0.28175561270314764], ["mock.MagicMock", 0.26461643453993017]], "self": []}, "q_name": "TestIntervalCheckOperator.test_execute_not_ignore_zero", "ret_exprs": [], "ret_type": "", "variables": {"mock_hook": "", "operator": "", "return_value": ""}, "variables_p": {"mock_hook": [["unittesmock.MagicMock", 0.4816321758176303], ["str", 0.11297567115630502], ["mock.MagicMock", 0.09639975227011381], ["mock.Mock", 0.09103842978049917]], "operator": [["float", 0.2717347968994208], ["int", 0.2414111783065557], ["Dict[str, Union[Any, Any, Any]]", 0.11037798211647502], ["Tuple[Literal, Literal]", 0.08852214196550186]], "return_value": [["str", 0.44151220690259685], ["int", 0.16702260445424785], ["tuple", 0.09716567064975623]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[732, 4], [746, 45]], "fn_var_ln": {"mock_hook": [[733, 8], [733, 17]], "operator": [[737, 8], [737, 16]], "return_value": [[735, 8], [735, 37]]}, "fn_var_occur": {"mock_hook": [["mock_hook", "mock", "Mock"], ["mock_hook", "get_first", "return_value"], ["mock_get_db_hook", "return_value", "mock_hook"]], "operator": [["operator", "self", "_construct_operator", "table", "metric_thresholds", "ratio_formula", "ignore_zero", "True"], ["operator", "execute", "context", "MagicMock"]], "return_value": [["mock_hook", "get_first", "return_value"], ["mock_get_db_hook", "return_value", "mock_hook"]]}, "name": "test_execute_ignore_zero", "params": {"mock_get_db_hook": "", "self": ""}, "params_descr": {"mock_get_db_hook": "", "self": ""}, "params_occur": {"mock_get_db_hook": [["mock_get_db_hook", "return_value", "mock_hook"]], "self": [["operator", "self", "_construct_operator", "table", "metric_thresholds", "ratio_formula", "ignore_zero", "True"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_db_hook": [["unittesmock.MagicMock", 0.28175561270314764], ["mock.MagicMock", 0.26461643453993017]], "self": []}, "q_name": "TestIntervalCheckOperator.test_execute_ignore_zero", "ret_exprs": [], "ret_type": "", "variables": {"mock_hook": "", "operator": "", "return_value": ""}, "variables_p": {"mock_hook": [["unittesmock.MagicMock", 0.4816321758176303], ["str", 0.11297567115630502], ["mock.MagicMock", 0.09639975227011381], ["mock.Mock", 0.09103842978049917]], "operator": [["Dict[str, Union[float, str]]", 0.3938172805096085], ["int", 0.09853732861109252], ["dict", 0.0936684890408162]], "return_value": [["str", 0.44151220690259685], ["int", 0.16702260445424785], ["tuple", 0.09716567064975623]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[752, 8], [758, 27]], "fn_var_ln": {"rows": [[753, 12], [753, 16]]}, "fn_var_occur": {"rows": []}, "name": "returned_row", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestIntervalCheckOperator.test_execute_min_max.<locals>.returned_row", "ret_exprs": [], "ret_type": "", "variables": {"rows": ""}, "variables_p": {"rows": [["list", 0.30000000000000004], ["int", 0.30000000000000004], ["List[List[int]]", 0.1], ["property", 0.1], ["dict", 0.1], ["List[Dict[str, Any]]", 0.1]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[749, 4], [776, 49]], "fn_var_ln": {"mock_hook": [[750, 8], [750, 17]], "operator": [[763, 8], [763, 16]], "return_value": [[761, 8], [761, 37]]}, "fn_var_occur": {"mock_hook": [["mock_hook", "get_first", "side_effect", "returned_row"], ["mock_get_db_hook", "return_value", "mock_hook"]], "operator": [["operator", "self", "_construct_operator", "table", "metric_thresholds", "ratio_formula", "ignore_zero", "True"], ["operator", "execute", "context", "MagicMock"]], "return_value": [["mock_get_db_hook", "return_value", "mock_hook"]]}, "name": "test_execute_min_max", "params": {"mock_get_db_hook": "", "self": ""}, "params_descr": {"mock_get_db_hook": "", "self": ""}, "params_occur": {"mock_get_db_hook": [["mock_get_db_hook", "return_value", "mock_hook"]], "self": [["operator", "self", "_construct_operator", "table", "metric_thresholds", "ratio_formula", "ignore_zero", "True"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_db_hook": [["unittesmock.MagicMock", 0.28175561270314764], ["mock.MagicMock", 0.26461643453993017]], "self": []}, "q_name": "TestIntervalCheckOperator.test_execute_min_max", "ret_exprs": [], "ret_type": "", "variables": {"mock_hook": "", "operator": "", "return_value": ""}, "variables_p": {"mock_hook": [["str", 0.22884860790034064], ["Dict[str, Union[Any, Any]]", 0.17800019080685864], ["Dict[str, Union[Any, Any, str]]", 0.17598673398582146], ["Dict[str, List[Any]]", 0.12038521447597572], ["Dict[str, Tuple[str, Any]]", 0.09628745995389623]], "operator": [["Dict[str, Union[float, str]]", 0.3938172805096085], ["int", 0.09853732861109252], ["dict", 0.0936684890408162]], "return_value": [["str", 0.2721846278854315], ["Optional[bytes]", 0.1076706133562834], ["list", 0.08513682037104754], ["List[Dict[str, Any]]", 0.08504942325796207], ["int", 0.08219034127882022], ["datetime.datetime", 0.06917504351674884]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[782, 8], [788, 27]], "fn_var_ln": {"rows": [[783, 12], [783, 16]]}, "fn_var_occur": {"rows": []}, "name": "returned_row", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestIntervalCheckOperator.test_execute_diff.<locals>.returned_row", "ret_exprs": [], "ret_type": "", "variables": {"rows": ""}, "variables_p": {"rows": [["list", 0.30000000000000004], ["int", 0.30000000000000004], ["List[List[int]]", 0.1], ["property", 0.1], ["dict", 0.1], ["List[Dict[str, Any]]", 0.1]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[779, 4], [806, 49]], "fn_var_ln": {"mock_hook": [[780, 8], [780, 17]], "operator": [[793, 8], [793, 16]], "return_value": [[791, 8], [791, 37]]}, "fn_var_occur": {"mock_hook": [["mock_hook", "get_first", "side_effect", "returned_row"], ["mock_get_db_hook", "return_value", "mock_hook"]], "operator": [["operator", "self", "_construct_operator", "table", "metric_thresholds", "ratio_formula", "ignore_zero", "True"], ["operator", "execute", "context", "MagicMock"]], "return_value": [["mock_get_db_hook", "return_value", "mock_hook"]]}, "name": "test_execute_diff", "params": {"mock_get_db_hook": "", "self": ""}, "params_descr": {"mock_get_db_hook": "", "self": ""}, "params_occur": {"mock_get_db_hook": [["mock_get_db_hook", "return_value", "mock_hook"]], "self": [["operator", "self", "_construct_operator", "table", "metric_thresholds", "ratio_formula", "ignore_zero", "True"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_db_hook": [["unittesmock.MagicMock", 0.28175561270314764], ["mock.MagicMock", 0.26461643453993017]], "self": []}, "q_name": "TestIntervalCheckOperator.test_execute_diff", "ret_exprs": [], "ret_type": "", "variables": {"mock_hook": "", "operator": "", "return_value": ""}, "variables_p": {"mock_hook": [["str", 0.22884860790034064], ["Dict[str, Union[Any, Any]]", 0.17800019080685864], ["Dict[str, Union[Any, Any, str]]", 0.17598673398582146], ["Dict[str, List[Any]]", 0.12038521447597572], ["Dict[str, Tuple[str, Any]]", 0.09628745995389623]], "operator": [["Dict[str, Union[float, str]]", 0.3938172805096085], ["int", 0.09853732861109252], ["dict", 0.0936684890408162]], "return_value": [["str", 0.2721846278854315], ["Optional[bytes]", 0.1076706133562834], ["list", 0.08513682037104754], ["List[Dict[str, Any]]", 0.08504942325796207], ["int", 0.08219034127882022], ["datetime.datetime", 0.06917504351674884]]}}], "name": "TestIntervalCheckOperator", "q_name": "TestIntervalCheckOperator", "variables": {}, "variables_p": {}}, {"cls_lc": [[809, 0], [893, 49]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[810, 4], [819, 9]], "fn_var_ln": {"dag": [[811, 8], [811, 11]]}, "fn_var_occur": {"dag": [["dag", "DAG", "start_date", "datetime", "datetime"], ["SQLThresholdCheckOperator", "task_id", "sql", "sql", "min_threshold", "min_threshold", "max_threshold", "max_threshold", "dag", "dag"]]}, "name": "_construct_operator", "params": {"max_threshold": "", "min_threshold": "", "self": "", "sql": ""}, "params_descr": {"max_threshold": "", "min_threshold": "", "self": "", "sql": ""}, "params_occur": {"max_threshold": [["SQLThresholdCheckOperator", "task_id", "sql", "sql", "min_threshold", "min_threshold", "max_threshold", "max_threshold", "dag", "dag"]], "min_threshold": [["SQLThresholdCheckOperator", "task_id", "sql", "sql", "min_threshold", "min_threshold", "max_threshold", "max_threshold", "dag", "dag"]], "self": [], "sql": [["SQLThresholdCheckOperator", "task_id", "sql", "sql", "min_threshold", "min_threshold", "max_threshold", "max_threshold", "dag", "dag"]]}, "params_p": {"args": [], "kwargs": [], "max_threshold": [["zerver.models.Realm", 0.3215631597643228], ["Optional[float]", 0.09670801608622084], ["float", 0.09670801608622084], ["int", 0.09017058242478493], ["Dict[str, int]", 0.08108514612714901]], "min_threshold": [["zerver.models.Realm", 0.3215631597643228], ["Optional[float]", 0.09670801608622084], ["float", 0.09670801608622084], ["int", 0.09017058242478493], ["Dict[str, int]", 0.08108514612714901]], "self": [], "sql": [["zerver.models.Realm", 0.3215631597643228], ["Optional[float]", 0.09670801608622084], ["float", 0.09670801608622084], ["int", 0.09017058242478493], ["Dict[str, int]", 0.08108514612714901]]}, "q_name": "TestThresholdCheckOperator._construct_operator", "ret_exprs": ["return SQLThresholdCheckOperator( task_id=\"test_task\", sql=sql, min_threshold=min_threshold, max_threshold=max_threshold, dag=dag,)"], "ret_type": "", "ret_type_p": [["bool", 0.1214005156989149], ["List[str]", 0.09321205650689057], ["allennlp.common.util.JsonDict", 0.09321205650689057], ["str", 0.09202772455092291], ["salon.models.Stylist", 0.08838271993755975]], "variables": {"dag": ""}, "variables_p": {"dag": [["datetime.timedelta", 0.37834316551882213], ["datetime.datetime.datetime", 0.1363716542792059], ["str", 0.12694658781975648], ["datetime.datetime.timedelta", 0.10495775139357458], ["int", 0.09211576350259666], ["datetime.datetime", 0.08094421590002986]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[822, 4], [829, 45]], "fn_var_ln": {"mock_hook": [[823, 8], [823, 17]], "operator": [[827, 8], [827, 16]], "return_value": [[825, 8], [825, 37]]}, "fn_var_occur": {"mock_hook": [["mock_hook", "mock", "Mock"], ["mock_hook", "get_first", "return_value"], ["mock_get_db_hook", "return_value", "mock_hook"]], "operator": [["operator", "self", "_construct_operator"], ["operator", "execute", "context", "MagicMock"]], "return_value": [["mock_hook", "get_first", "return_value"], ["mock_get_db_hook", "return_value", "mock_hook"]]}, "name": "test_pass_min_value_max_value", "params": {"mock_get_db_hook": "", "self": ""}, "params_descr": {"mock_get_db_hook": "", "self": ""}, "params_occur": {"mock_get_db_hook": [["mock_get_db_hook", "return_value", "mock_hook"]], "self": [["operator", "self", "_construct_operator"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_db_hook": [["unittesmock.MagicMock", 0.2975469869731025], ["mock.MagicMock", 0.2575956800403383]], "self": []}, "q_name": "TestThresholdCheckOperator.test_pass_min_value_max_value", "ret_exprs": [], "ret_type": "", "variables": {"mock_hook": "", "operator": "", "return_value": ""}, "variables_p": {"mock_hook": [["unittesmock.MagicMock", 0.4816321758176303], ["str", 0.11297567115630502], ["mock.MagicMock", 0.09639975227011381], ["mock.Mock", 0.09103842978049917]], "operator": [["str", 0.20950112001609772], ["Dict[str, Union[Any, Any, Any, Any]]", 0.09036558424959575], ["List[Union[Any, Any, Any]]", 0.09036558424959575]], "return_value": [["str", 0.44151220690259685], ["int", 0.16702260445424785], ["tuple", 0.09716567064975623]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[832, 4], [840, 90]], "fn_var_ln": {"mock_hook": [[833, 8], [833, 17]], "operator": [[837, 8], [837, 16]], "return_value": [[835, 8], [835, 37]]}, "fn_var_occur": {"mock_hook": [["mock_hook", "mock", "Mock"], ["mock_hook", "get_first", "return_value"], ["mock_get_db_hook", "return_value", "mock_hook"], ["mock_hook", "get_first", "assert_called_once_with"]], "operator": [["operator", "self", "_construct_operator"], ["operator", "render_template_fields"], ["operator", "execute", "context", "MagicMock"]], "return_value": [["mock_hook", "get_first", "return_value"], ["mock_get_db_hook", "return_value", "mock_hook"]]}, "name": "test_pass_min_value_max_value_templated", "params": {"mock_get_db_hook": "", "self": ""}, "params_descr": {"mock_get_db_hook": "", "self": ""}, "params_occur": {"mock_get_db_hook": [["mock_get_db_hook", "return_value", "mock_hook"]], "self": [["operator", "self", "_construct_operator"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_db_hook": [["unittesmock.MagicMock", 0.2975469869731025], ["mock.MagicMock", 0.2575956800403383]], "self": []}, "q_name": "TestThresholdCheckOperator.test_pass_min_value_max_value_templated", "ret_exprs": [], "ret_type": "", "variables": {"mock_hook": "", "operator": "", "return_value": ""}, "variables_p": {"mock_hook": [["unittesmock.MagicMock", 0.3016274270248982], ["mock.Mock", 0.25096513466830467], ["str", 0.1532157106892613]], "operator": [["int", 0.21295219834116041], ["datetime.datetime.datetime", 0.07429129024099515], ["Dict[str, int]", 0.0637199659970114]], "return_value": [["str", 0.44151220690259685], ["int", 0.16702260445424785], ["tuple", 0.09716567064975623]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[843, 4], [851, 49]], "fn_var_ln": {"mock_hook": [[844, 8], [844, 17]], "operator": [[848, 8], [848, 16]], "return_value": [[846, 8], [846, 37]]}, "fn_var_occur": {"mock_hook": [["mock_hook", "mock", "Mock"], ["mock_hook", "get_first", "return_value"], ["mock_get_db_hook", "return_value", "mock_hook"]], "operator": [["operator", "self", "_construct_operator"], ["operator", "execute", "context", "MagicMock"]], "return_value": [["mock_hook", "get_first", "return_value"], ["mock_get_db_hook", "return_value", "mock_hook"]]}, "name": "test_fail_min_value_max_value", "params": {"mock_get_db_hook": "", "self": ""}, "params_descr": {"mock_get_db_hook": "", "self": ""}, "params_occur": {"mock_get_db_hook": [["mock_get_db_hook", "return_value", "mock_hook"]], "self": [["operator", "self", "_construct_operator"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_db_hook": [["unittesmock.MagicMock", 0.2975469869731025], ["mock.MagicMock", 0.2575956800403383]], "self": []}, "q_name": "TestThresholdCheckOperator.test_fail_min_value_max_value", "ret_exprs": [], "ret_type": "", "variables": {"mock_hook": "", "operator": "", "return_value": ""}, "variables_p": {"mock_hook": [["unittesmock.MagicMock", 0.4816321758176303], ["str", 0.11297567115630502], ["mock.MagicMock", 0.09639975227011381], ["mock.Mock", 0.09103842978049917]], "operator": [["str", 0.20950112001609772], ["Dict[str, Union[Any, Any, Any, Any]]", 0.09036558424959575], ["List[Union[Any, Any, Any]]", 0.09036558424959575]], "return_value": [["str", 0.44151220690259685], ["int", 0.16702260445424785], ["tuple", 0.09716567064975623]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[854, 4], [861, 45]], "fn_var_ln": {"mock_hook": [[855, 8], [855, 17]], "operator": [[859, 8], [859, 16]], "return_value": [[857, 8], [857, 37]]}, "fn_var_occur": {"mock_hook": [["mock_hook", "mock", "Mock"], ["mock_hook", "get_first", "side_effect", "x", "int", "x", "split"], ["mock_get_db_hook", "return_value", "mock_hook"]], "operator": [["operator", "self", "_construct_operator"], ["operator", "execute", "context", "MagicMock"]], "return_value": [["mock_get_db_hook", "return_value", "mock_hook"]]}, "name": "test_pass_min_sql_max_sql", "params": {"mock_get_db_hook": "", "self": ""}, "params_descr": {"mock_get_db_hook": "", "self": ""}, "params_occur": {"mock_get_db_hook": [["mock_get_db_hook", "return_value", "mock_hook"]], "self": [["operator", "self", "_construct_operator"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_db_hook": [["unittesmock.MagicMock", 0.28175561270314764], ["mock.MagicMock", 0.26461643453993017]], "self": []}, "q_name": "TestThresholdCheckOperator.test_pass_min_sql_max_sql", "ret_exprs": [], "ret_type": "", "variables": {"mock_hook": "", "operator": "", "return_value": ""}, "variables_p": {"mock_hook": [["unittesmock.MagicMock", 0.18401355077949266], ["str", 0.1339067591928431], ["mock.MagicMock", 0.0897644589461588]], "operator": [["str", 0.20950112001609772], ["Dict[str, Union[Any, Any, Any, Any]]", 0.09036558424959575], ["List[Union[Any, Any, Any]]", 0.09036558424959575]], "return_value": [["str", 0.2721846278854315], ["Optional[bytes]", 0.1076706133562834], ["list", 0.08513682037104754], ["List[Dict[str, Any]]", 0.08504942325796207], ["int", 0.08219034127882022], ["datetime.datetime", 0.06917504351674884]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[864, 4], [872, 49]], "fn_var_ln": {"mock_hook": [[865, 8], [865, 17]], "operator": [[869, 8], [869, 16]], "return_value": [[867, 8], [867, 37]]}, "fn_var_occur": {"mock_hook": [["mock_hook", "mock", "Mock"], ["mock_hook", "get_first", "side_effect", "x", "int", "x", "split"], ["mock_get_db_hook", "return_value", "mock_hook"]], "operator": [["operator", "self", "_construct_operator"], ["operator", "execute", "context", "MagicMock"]], "return_value": [["mock_get_db_hook", "return_value", "mock_hook"]]}, "name": "test_fail_min_sql_max_sql", "params": {"mock_get_db_hook": "", "self": ""}, "params_descr": {"mock_get_db_hook": "", "self": ""}, "params_occur": {"mock_get_db_hook": [["mock_get_db_hook", "return_value", "mock_hook"]], "self": [["operator", "self", "_construct_operator"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_db_hook": [["unittesmock.MagicMock", 0.28175561270314764], ["mock.MagicMock", 0.26461643453993017]], "self": []}, "q_name": "TestThresholdCheckOperator.test_fail_min_sql_max_sql", "ret_exprs": [], "ret_type": "", "variables": {"mock_hook": "", "operator": "", "return_value": ""}, "variables_p": {"mock_hook": [["unittesmock.MagicMock", 0.18401355077949266], ["str", 0.1339067591928431], ["mock.MagicMock", 0.0897644589461588]], "operator": [["str", 0.20950112001609772], ["Dict[str, Union[Any, Any, Any, Any]]", 0.09036558424959575], ["List[Union[Any, Any, Any]]", 0.09036558424959575]], "return_value": [["str", 0.2721846278854315], ["Optional[bytes]", 0.1076706133562834], ["list", 0.08513682037104754], ["List[Dict[str, Any]]", 0.08504942325796207], ["int", 0.08219034127882022], ["datetime.datetime", 0.06917504351674884]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[875, 4], [882, 45]], "fn_var_ln": {"mock_hook": [[876, 8], [876, 17]], "operator": [[880, 8], [880, 16]], "return_value": [[878, 8], [878, 37]]}, "fn_var_occur": {"mock_hook": [["mock_hook", "mock", "Mock"], ["mock_hook", "get_first", "side_effect", "x", "int", "x", "split"], ["mock_get_db_hook", "return_value", "mock_hook"]], "operator": [["operator", "self", "_construct_operator"], ["operator", "execute", "context", "MagicMock"]], "return_value": [["mock_get_db_hook", "return_value", "mock_hook"]]}, "name": "test_pass_min_value_max_sql", "params": {"mock_get_db_hook": "", "self": ""}, "params_descr": {"mock_get_db_hook": "", "self": ""}, "params_occur": {"mock_get_db_hook": [["mock_get_db_hook", "return_value", "mock_hook"]], "self": [["operator", "self", "_construct_operator"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_db_hook": [["unittesmock.MagicMock", 0.34223416126886186], ["mock.MagicMock", 0.09134297362192553], ["raiden.utils.List[raiden.raiden_service.RaidenService]", 0.08677189466173846]], "self": []}, "q_name": "TestThresholdCheckOperator.test_pass_min_value_max_sql", "ret_exprs": [], "ret_type": "", "variables": {"mock_hook": "", "operator": "", "return_value": ""}, "variables_p": {"mock_hook": [["unittesmock.MagicMock", 0.18401355077949266], ["str", 0.1339067591928431], ["mock.MagicMock", 0.0897644589461588]], "operator": [["str", 0.20950112001609772], ["Dict[str, Union[Any, Any, Any, Any]]", 0.09036558424959575], ["List[Union[Any, Any, Any]]", 0.09036558424959575]], "return_value": [["str", 0.2721846278854315], ["Optional[bytes]", 0.1076706133562834], ["list", 0.08513682037104754], ["List[Dict[str, Any]]", 0.08504942325796207], ["int", 0.08219034127882022], ["datetime.datetime", 0.06917504351674884]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[885, 4], [893, 49]], "fn_var_ln": {"mock_hook": [[886, 8], [886, 17]], "operator": [[890, 8], [890, 16]], "return_value": [[888, 8], [888, 37]]}, "fn_var_occur": {"mock_hook": [["mock_hook", "mock", "Mock"], ["mock_hook", "get_first", "side_effect", "x", "int", "x", "split"], ["mock_get_db_hook", "return_value", "mock_hook"]], "operator": [["operator", "self", "_construct_operator"], ["operator", "execute", "context", "MagicMock"]], "return_value": [["mock_get_db_hook", "return_value", "mock_hook"]]}, "name": "test_fail_min_sql_max_value", "params": {"mock_get_db_hook": "", "self": ""}, "params_descr": {"mock_get_db_hook": "", "self": ""}, "params_occur": {"mock_get_db_hook": [["mock_get_db_hook", "return_value", "mock_hook"]], "self": [["operator", "self", "_construct_operator"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_db_hook": [["unittesmock.MagicMock", 0.2898038803959111], ["mock.MagicMock", 0.2494893868975643]], "self": []}, "q_name": "TestThresholdCheckOperator.test_fail_min_sql_max_value", "ret_exprs": [], "ret_type": "", "variables": {"mock_hook": "", "operator": "", "return_value": ""}, "variables_p": {"mock_hook": [["unittesmock.MagicMock", 0.18401355077949266], ["str", 0.1339067591928431], ["mock.MagicMock", 0.0897644589461588]], "operator": [["str", 0.20950112001609772], ["Dict[str, Union[Any, Any, Any, Any]]", 0.09036558424959575], ["List[Union[Any, Any, Any]]", 0.09036558424959575]], "return_value": [["str", 0.2721846278854315], ["Optional[bytes]", 0.1076706133562834], ["list", 0.08513682037104754], ["List[Dict[str, Any]]", 0.08504942325796207], ["int", 0.08219034127882022], ["datetime.datetime", 0.06917504351674884]]}}], "name": "TestThresholdCheckOperator", "q_name": "TestThresholdCheckOperator", "variables": {}, "variables_p": {}}, {"cls_lc": [[896, 0], [1280, 76]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[902, 4], [906, 40]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "setup_class", "params": {"cls": ""}, "params_descr": {"cls": ""}, "params_occur": {"cls": []}, "params_p": {"args": [], "cls": [["Tuple[str]", 0.49999999978930826], ["Type", 0.49999999978930826], ["bool", 1.2432275369423927e-10], ["int", 6.761356990136683e-11], ["Optional[str]", 6.761356990136683e-11], ["Type[Any]", 4.801814051136299e-11], ["Optional[List]", 4.157460403209174e-11]], "kwargs": [], "self": []}, "q_name": "TestSqlBranch.setup_class", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[908, 4], [916, 28]], "fn_var_ln": {"branch_1": [[914, 8], [914, 21]], "branch_2": [[915, 8], [915, 21]], "branch_3": [[916, 8], [916, 21]], "dag": [[909, 8], [909, 16]]}, "fn_var_occur": {"branch_1": [["self", "branch_1", "EmptyOperator", "task_id", "dag", "self", "dag"]], "branch_2": [["self", "branch_2", "EmptyOperator", "task_id", "dag", "self", "dag"]], "branch_3": [["self", "branch_3", "None"]], "dag": [["self", "dag", "DAG", "default_args", "DEFAULT_DATE", "schedule", "INTERVAL"], ["self", "branch_1", "EmptyOperator", "task_id", "dag", "self", "dag"], ["self", "branch_2", "EmptyOperator", "task_id", "dag", "self", "dag"]]}, "name": "setup_method", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "dag", "DAG", "default_args", "DEFAULT_DATE", "schedule", "INTERVAL"], ["self", "branch_1", "EmptyOperator", "task_id", "dag", "self", "dag"], ["self", "branch_2", "EmptyOperator", "task_id", "dag", "self", "dag"], ["self", "branch_3", "None"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSqlBranch.setup_method", "ret_exprs": [], "ret_type": "", "variables": {"branch_1": "", "branch_2": "", "branch_3": "", "dag": ""}, "variables_p": {"branch_1": [["Type[str]", 0.384835243091166], ["float", 0.24845858813058674], ["Dict[str, int]", 0.18041701700038668], ["Dict[str, str]", 0.09987424077447364], ["datetime.datetime.datetime", 0.08641491100338697]], "branch_2": [["Type[str]", 0.384835243091166], ["float", 0.24845858813058674], ["Dict[str, int]", 0.18041701700038668], ["Dict[str, str]", 0.09987424077447364], ["datetime.datetime.datetime", 0.08641491100338697]], "branch_3": [["List[str]", 0.21166412514430172], ["str", 0.18971644641062513], ["dict", 0.10110266629121624], ["Callable", 0.09790266799967748], ["bool", 0.08268369121655958]], "dag": [["int", 0.6122656017516601], ["Tuple[Literal, Literal, Literal]", 0.11547585141448527], ["str", 0.10254807539689756]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[918, 4], [922, 40]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "teardown_method", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSqlBranch.teardown_method", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Check if BranchSQLOperator throws an exception for unsupported connection type", "long_descr": null, "ret": null}, "fn_lc": [[924, 4], [936, 88]], "fn_var_ln": {"op": [[926, 8], [926, 10]]}, "fn_var_occur": {"op": [["op", "BranchSQLOperator", "task_id", "conn_id", "sql", "follow_task_ids_if_true", "follow_task_ids_if_false", "dag", "self", "dag"], ["op", "run", "start_date", "DEFAULT_DATE", "end_date", "DEFAULT_DATE", "ignore_ti_state", "True"]]}, "name": "test_unsupported_conn_type", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["op", "BranchSQLOperator", "task_id", "conn_id", "sql", "follow_task_ids_if_true", "follow_task_ids_if_false", "dag", "self", "dag"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSqlBranch.test_unsupported_conn_type", "ret_exprs": [], "ret_type": "", "variables": {"op": ""}, "variables_p": {"op": [["Dict[Any, str]", 0.27433545434397405], ["Dict[str, Union[Any, bool, str]]", 0.19879804359178138], ["Dict[str, Optional[str]]", 0.1015409781188477], ["Dict[str, Union[int, str]]", 0.0974288635682213], ["dict", 0.09144515144799135]]}}, {"docstring": {"func": "Check if BranchSQLOperator throws an exception for invalid connection", "long_descr": null, "ret": null}, "fn_lc": [[938, 4], [950, 88]], "fn_var_ln": {"op": [[940, 8], [940, 10]]}, "fn_var_occur": {"op": [["op", "BranchSQLOperator", "task_id", "conn_id", "sql", "follow_task_ids_if_true", "follow_task_ids_if_false", "dag", "self", "dag"], ["op", "run", "start_date", "DEFAULT_DATE", "end_date", "DEFAULT_DATE", "ignore_ti_state", "True"]]}, "name": "test_invalid_conn", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["op", "BranchSQLOperator", "task_id", "conn_id", "sql", "follow_task_ids_if_true", "follow_task_ids_if_false", "dag", "self", "dag"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSqlBranch.test_invalid_conn", "ret_exprs": [], "ret_type": "", "variables": {"op": ""}, "variables_p": {"op": [["Dict[Any, str]", 0.27433545434397405], ["Dict[str, Union[Any, bool, str]]", 0.19879804359178138], ["Dict[str, Optional[str]]", 0.1015409781188477], ["Dict[str, Union[int, str]]", 0.0974288635682213], ["dict", 0.09144515144799135]]}}, {"docstring": {"func": "Check if BranchSQLOperator throws an exception for invalid connection", "long_descr": null, "ret": null}, "fn_lc": [[952, 4], [964, 88]], "fn_var_ln": {"op": [[954, 8], [954, 10]]}, "fn_var_occur": {"op": [["op", "BranchSQLOperator", "task_id", "conn_id", "sql", "follow_task_ids_if_true", "None", "follow_task_ids_if_false", "dag", "self", "dag"], ["op", "run", "start_date", "DEFAULT_DATE", "end_date", "DEFAULT_DATE", "ignore_ti_state", "True"]]}, "name": "test_invalid_follow_task_true", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["op", "BranchSQLOperator", "task_id", "conn_id", "sql", "follow_task_ids_if_true", "None", "follow_task_ids_if_false", "dag", "self", "dag"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSqlBranch.test_invalid_follow_task_true", "ret_exprs": [], "ret_type": "", "variables": {"op": ""}, "variables_p": {"op": [["Dict[Any, str]", 0.26279468954438695], ["dict", 0.18547709762213116], ["Dict[str, Optional[str]]", 0.10406749393050574], ["Dict[str, Union[int, str]]", 0.08487359741223582], ["legistar.models.MatterStatus", 0.08352367429433559]]}}, {"docstring": {"func": "Check if BranchSQLOperator throws an exception for invalid connection", "long_descr": null, "ret": null}, "fn_lc": [[966, 4], [978, 88]], "fn_var_ln": {"op": [[968, 8], [968, 10]]}, "fn_var_occur": {"op": [["op", "BranchSQLOperator", "task_id", "conn_id", "sql", "follow_task_ids_if_true", "follow_task_ids_if_false", "None", "dag", "self", "dag"], ["op", "run", "start_date", "DEFAULT_DATE", "end_date", "DEFAULT_DATE", "ignore_ti_state", "True"]]}, "name": "test_invalid_follow_task_false", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["op", "BranchSQLOperator", "task_id", "conn_id", "sql", "follow_task_ids_if_true", "follow_task_ids_if_false", "None", "dag", "self", "dag"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSqlBranch.test_invalid_follow_task_false", "ret_exprs": [], "ret_type": "", "variables": {"op": ""}, "variables_p": {"op": [["Dict[Any, str]", 0.2869593768186138], ["dict", 0.1937926678211771], ["Dict[str, Optional[str]]", 0.10532101240448924], ["legistar.models.MatterStatus", 0.0877852342005996], ["Dict[str, Union[int, str]]", 0.08528455009343704]]}}, {"docstring": {"func": "Check if BranchSQLOperator works with backend", "long_descr": null, "ret": null}, "fn_lc": [[981, 4], [991, 91]], "fn_var_ln": {"branch_op": [[983, 8], [983, 17]]}, "fn_var_occur": {"branch_op": [["branch_op", "BranchSQLOperator", "task_id", "conn_id", "sql", "follow_task_ids_if_true", "follow_task_ids_if_false", "dag", "self", "dag"], ["branch_op", "run", "start_date", "DEFAULT_DATE", "end_date", "DEFAULT_DATE", "ignore_ti_state", "True"]]}, "name": "test_sql_branch_operator_mysql", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["branch_op", "BranchSQLOperator", "task_id", "conn_id", "sql", "follow_task_ids_if_true", "follow_task_ids_if_false", "dag", "self", "dag"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSqlBranch.test_sql_branch_operator_mysql", "ret_exprs": [], "ret_type": "", "variables": {"branch_op": ""}, "variables_p": {"branch_op": [["int", 0.24940781532765272], ["Dict[str, str]", 0.2113105484092874], ["Dict[str, Any]", 0.1056552742046437], ["Pattern[Any]", 0.10480967009238755], ["str", 0.10423355174956607]]}}, {"docstring": {"func": "Check if BranchSQLOperator works with backend", "long_descr": null, "ret": null}, "fn_lc": [[994, 4], [1004, 91]], "fn_var_ln": {"branch_op": [[996, 8], [996, 17]]}, "fn_var_occur": {"branch_op": [["branch_op", "BranchSQLOperator", "task_id", "conn_id", "sql", "follow_task_ids_if_true", "follow_task_ids_if_false", "dag", "self", "dag"], ["branch_op", "run", "start_date", "DEFAULT_DATE", "end_date", "DEFAULT_DATE", "ignore_ti_state", "True"]]}, "name": "test_sql_branch_operator_postgres", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["branch_op", "BranchSQLOperator", "task_id", "conn_id", "sql", "follow_task_ids_if_true", "follow_task_ids_if_false", "dag", "self", "dag"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSqlBranch.test_sql_branch_operator_postgres", "ret_exprs": [], "ret_type": "", "variables": {"branch_op": ""}, "variables_p": {"branch_op": [["int", 0.24940781532765272], ["Dict[str, str]", 0.2113105484092874], ["Dict[str, Any]", 0.1056552742046437], ["Pattern[Any]", 0.10480967009238755], ["str", 0.10423355174956607]]}}, {"docstring": {"func": "Check BranchSQLOperator branch operation", "long_descr": null, "ret": null}, "fn_lc": [[1007, 4], [1044, 72]], "fn_var_ln": {"branch_op": [[1009, 8], [1009, 17]], "dr": [[1022, 8], [1022, 10]], "mock_get_records": [[1029, 8], [1029, 24]], "return_value": [[1031, 8], [1031, 37]], "tis": [[1035, 8], [1035, 11]]}, "fn_var_occur": {"branch_op": [["branch_op", "BranchSQLOperator", "task_id", "conn_id", "sql", "follow_task_ids_if_true", "follow_task_ids_if_false", "dag", "self", "dag"], ["self", "branch_1", "set_upstream", "branch_op"], ["self", "branch_2", "set_upstream", "branch_op"], ["branch_op", "run", "start_date", "DEFAULT_DATE", "end_date", "DEFAULT_DATE"]], "dr": [["dr", "self", "dag", "create_dagrun", "run_id", "start_date", "timezone", "utcnow", "execution_date", "DEFAULT_DATE", "state", "State", "RUNNING"], ["tis", "dr", "get_task_instances"]], "mock_get_records": [["mock_get_records", "mock_get_db_hook", "return_value", "get_first"], ["mock_get_records", "return_value"]], "return_value": [["mock_get_records", "mock_get_db_hook", "return_value", "get_first"], ["mock_get_records", "return_value"]], "tis": [["tis", "dr", "get_task_instances"]]}, "name": "test_branch_single_value_with_dag_run", "params": {"mock_get_db_hook": "", "self": ""}, "params_descr": {"mock_get_db_hook": "", "self": ""}, "params_occur": {"mock_get_db_hook": [["mock_get_records", "mock_get_db_hook", "return_value", "get_first"]], "self": [["branch_op", "BranchSQLOperator", "task_id", "conn_id", "sql", "follow_task_ids_if_true", "follow_task_ids_if_false", "dag", "self", "dag"], ["self", "branch_1", "set_upstream", "branch_op"], ["self", "branch_2", "set_upstream", "branch_op"], ["self", "dag", "clear"], ["dr", "self", "dag", "create_dagrun", "run_id", "start_date", "timezone", "utcnow", "execution_date", "DEFAULT_DATE", "state", "State", "RUNNING"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_db_hook": [["core.models.Recipe", 0.09195620538695372]], "self": []}, "q_name": "TestSqlBranch.test_branch_single_value_with_dag_run", "ret_exprs": [], "ret_type": "", "variables": {"branch_op": "", "dr": "", "mock_get_records": "", "return_value": "", "tis": ""}, "variables_p": {"branch_op": [["int", 0.24940781532765272], ["Dict[str, str]", 0.2113105484092874], ["Dict[str, Any]", 0.1056552742046437], ["Pattern[Any]", 0.10480967009238755], ["str", 0.10423355174956607]], "dr": [["str", 0.25166854163308605], ["Tuple[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any]", 0.10234688337123576], ["Set[str]", 0.0974968642686453], ["backend.api.models.group.Group", 0.09476301100475927], ["Dict[str, Any]", 0.09110568499635444], ["byceps.services.party.transfer.models.Party", 0.08665817349077182]], "mock_get_records": [["str", 0.45170874298278696], ["Dict[str, Union[int, str]]", 0.12726282470904876], ["List[Dict[str, str]]", 0.12395867957462803], ["Dict[str, Union[Any, str]]", 0.11529877799130263], ["dict", 0.08592628578265714]], "return_value": [["str", 0.45685104200864785], ["List[Dict[str, str]]", 0.15350552367467796], ["Dict[str, Union[Any, str]]", 0.10473965799754373], ["Dict[Any, Union[int, str]]", 0.09496198787211022], ["Dict[str, Union[int, str]]", 0.0934592880878941]], "tis": [["str", 0.20525016768842724], ["Dict[str, Union[Any, Any]]", 0.10478446686768929], ["decksite.data.models.person.Person", 0.09944637103010172], ["int", 0.0941002144741875], ["Dict[str, str]", 0.09345818467790688], ["lms.lmsdb.models.Solution", 0.09204170931108901]]}}, {"docstring": {"func": "Check BranchSQLOperator branch operation", "long_descr": null, "ret": null}, "fn_lc": [[1047, 4], [1085, 76]], "fn_var_ln": {"branch_op": [[1049, 8], [1049, 17]], "dr": [[1062, 8], [1062, 10]], "mock_get_records": [[1069, 8], [1069, 24]], "return_value": [[1072, 12], [1072, 41]], "tis": [[1076, 12], [1076, 15]]}, "fn_var_occur": {"branch_op": [["branch_op", "BranchSQLOperator", "task_id", "conn_id", "sql", "follow_task_ids_if_true", "follow_task_ids_if_false", "dag", "self", "dag"], ["self", "branch_1", "set_upstream", "branch_op"], ["self", "branch_2", "set_upstream", "branch_op"], ["branch_op", "run", "start_date", "DEFAULT_DATE", "end_date", "DEFAULT_DATE"]], "dr": [["dr", "self", "dag", "create_dagrun", "run_id", "start_date", "timezone", "utcnow", "execution_date", "DEFAULT_DATE", "state", "State", "RUNNING"], ["tis", "dr", "get_task_instances"]], "mock_get_records": [["mock_get_records", "mock_get_db_hook", "return_value", "get_first"], ["mock_get_records", "return_value", "true_value"]], "return_value": [["mock_get_records", "mock_get_db_hook", "return_value", "get_first"], ["mock_get_records", "return_value", "true_value"]], "tis": [["tis", "dr", "get_task_instances"]]}, "name": "test_branch_true_with_dag_run", "params": {"mock_get_db_hook": "", "self": ""}, "params_descr": {"mock_get_db_hook": "", "self": ""}, "params_occur": {"mock_get_db_hook": [["mock_get_records", "mock_get_db_hook", "return_value", "get_first"]], "self": [["branch_op", "BranchSQLOperator", "task_id", "conn_id", "sql", "follow_task_ids_if_true", "follow_task_ids_if_false", "dag", "self", "dag"], ["self", "branch_1", "set_upstream", "branch_op"], ["self", "branch_2", "set_upstream", "branch_op"], ["self", "dag", "clear"], ["dr", "self", "dag", "create_dagrun", "run_id", "start_date", "timezone", "utcnow", "execution_date", "DEFAULT_DATE", "state", "State", "RUNNING"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_db_hook": [], "self": []}, "q_name": "TestSqlBranch.test_branch_true_with_dag_run", "ret_exprs": [], "ret_type": "", "variables": {"branch_op": "", "dr": "", "mock_get_records": "", "return_value": "", "tis": ""}, "variables_p": {"branch_op": [["int", 0.24940781532765272], ["Dict[str, str]", 0.2113105484092874], ["Dict[str, Any]", 0.1056552742046437], ["Pattern[Any]", 0.10480967009238755], ["str", 0.10423355174956607]], "dr": [["str", 0.25166854163308605], ["Tuple[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any]", 0.10234688337123576], ["Set[str]", 0.0974968642686453], ["backend.api.models.group.Group", 0.09476301100475927], ["Dict[str, Any]", 0.09110568499635444], ["byceps.services.party.transfer.models.Party", 0.08665817349077182]], "mock_get_records": [["str", 0.36630356133583053], ["Dict[str, Union[int, str]]", 0.1252490289261641], ["List[Dict[str, str]]", 0.12365224088256596], ["Dict[str, Union[Any, str]]", 0.11536277454113032], ["Dict[str, str]", 0.08751943407471481], ["dict", 0.08697007885216522]], "return_value": [["str", 0.4660337065835639], ["List[Dict[str, str]]", 0.14910028977509704], ["Dict[str, Union[Any, str]]", 0.10318660713260962], ["Dict[Any, Union[int, str]]", 0.0948394759488933], ["Dict[str, Union[int, str]]", 0.09119880234305953]], "tis": [["str", 0.20525016768842724], ["Dict[str, Union[Any, Any]]", 0.10478446686768929], ["decksite.data.models.person.Person", 0.09944637103010172], ["int", 0.0941002144741875], ["Dict[str, str]", 0.09345818467790688], ["lms.lmsdb.models.Solution", 0.09204170931108901]]}}, {"docstring": {"func": "Check BranchSQLOperator branch operation", "long_descr": null, "ret": null}, "fn_lc": [[1088, 4], [1125, 76]], "fn_var_ln": {"branch_op": [[1090, 8], [1090, 17]], "dr": [[1103, 8], [1103, 10]], "mock_get_records": [[1110, 8], [1110, 24]], "return_value": [[1113, 12], [1113, 41]], "tis": [[1116, 12], [1116, 15]]}, "fn_var_occur": {"branch_op": [["branch_op", "BranchSQLOperator", "task_id", "conn_id", "sql", "follow_task_ids_if_true", "follow_task_ids_if_false", "dag", "self", "dag"], ["self", "branch_1", "set_upstream", "branch_op"], ["self", "branch_2", "set_upstream", "branch_op"], ["branch_op", "run", "start_date", "DEFAULT_DATE", "end_date", "DEFAULT_DATE"]], "dr": [["dr", "self", "dag", "create_dagrun", "run_id", "start_date", "timezone", "utcnow", "execution_date", "DEFAULT_DATE", "state", "State", "RUNNING"], ["tis", "dr", "get_task_instances"]], "mock_get_records": [["mock_get_records", "mock_get_db_hook", "return_value", "get_first"], ["mock_get_records", "return_value", "false_value"]], "return_value": [["mock_get_records", "mock_get_db_hook", "return_value", "get_first"], ["mock_get_records", "return_value", "false_value"]], "tis": [["tis", "dr", "get_task_instances"]]}, "name": "test_branch_false_with_dag_run", "params": {"mock_get_db_hook": "", "self": ""}, "params_descr": {"mock_get_db_hook": "", "self": ""}, "params_occur": {"mock_get_db_hook": [["mock_get_records", "mock_get_db_hook", "return_value", "get_first"]], "self": [["branch_op", "BranchSQLOperator", "task_id", "conn_id", "sql", "follow_task_ids_if_true", "follow_task_ids_if_false", "dag", "self", "dag"], ["self", "branch_1", "set_upstream", "branch_op"], ["self", "branch_2", "set_upstream", "branch_op"], ["self", "dag", "clear"], ["dr", "self", "dag", "create_dagrun", "run_id", "start_date", "timezone", "utcnow", "execution_date", "DEFAULT_DATE", "state", "State", "RUNNING"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_db_hook": [], "self": []}, "q_name": "TestSqlBranch.test_branch_false_with_dag_run", "ret_exprs": [], "ret_type": "", "variables": {"branch_op": "", "dr": "", "mock_get_records": "", "return_value": "", "tis": ""}, "variables_p": {"branch_op": [["int", 0.24940781532765272], ["Dict[str, str]", 0.2113105484092874], ["Dict[str, Any]", 0.1056552742046437], ["Pattern[Any]", 0.10480967009238755], ["str", 0.10423355174956607]], "dr": [["str", 0.25166854163308605], ["Tuple[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any]", 0.10234688337123576], ["Set[str]", 0.0974968642686453], ["backend.api.models.group.Group", 0.09476301100475927], ["Dict[str, Any]", 0.09110568499635444], ["byceps.services.party.transfer.models.Party", 0.08665817349077182]], "mock_get_records": [["str", 0.36630356133583053], ["Dict[str, Union[int, str]]", 0.1252490289261641], ["List[Dict[str, str]]", 0.12365224088256596], ["Dict[str, Union[Any, str]]", 0.11536277454113032], ["Dict[str, str]", 0.08751943407471481], ["dict", 0.08697007885216522]], "return_value": [["str", 0.4660337065835639], ["List[Dict[str, str]]", 0.14910028977509704], ["Dict[str, Union[Any, str]]", 0.10318660713260962], ["Dict[Any, Union[int, str]]", 0.0948394759488933], ["Dict[str, Union[int, str]]", 0.09119880234305953]], "tis": [["str", 0.20525016768842724], ["Dict[str, Union[Any, Any]]", 0.10478446686768929], ["decksite.data.models.person.Person", 0.09944637103010172], ["int", 0.0941002144741875], ["Dict[str, str]", 0.09345818467790688], ["lms.lmsdb.models.Solution", 0.09204170931108901]]}}, {"docstring": {"func": "Checks if the BranchSQLOperator supports branching off to a list of tasks.", "long_descr": null, "ret": null}, "fn_lc": [[1128, 4], [1168, 72]], "fn_var_ln": {"branch_3": [[1141, 8], [1141, 21]], "branch_op": [[1130, 8], [1130, 17]], "dr": [[1145, 8], [1145, 10]], "mock_get_records": [[1152, 8], [1152, 24]], "return_value": [[1153, 8], [1153, 37]], "tis": [[1157, 8], [1157, 11]]}, "fn_var_occur": {"branch_3": [["self", "branch_3", "EmptyOperator", "task_id", "dag", "self", "dag"], ["self", "branch_3", "set_upstream", "branch_op"]], "branch_op": [["branch_op", "BranchSQLOperator", "task_id", "conn_id", "sql", "follow_task_ids_if_true", "follow_task_ids_if_false", "dag", "self", "dag"], ["self", "branch_1", "set_upstream", "branch_op"], ["self", "branch_2", "set_upstream", "branch_op"], ["self", "branch_3", "set_upstream", "branch_op"], ["branch_op", "run", "start_date", "DEFAULT_DATE", "end_date", "DEFAULT_DATE"]], "dr": [["dr", "self", "dag", "create_dagrun", "run_id", "start_date", "timezone", "utcnow", "execution_date", "DEFAULT_DATE", "state", "State", "RUNNING"], ["tis", "dr", "get_task_instances"]], "mock_get_records": [["mock_get_records", "mock_get_db_hook", "return_value", "get_first"], ["mock_get_records", "return_value"]], "return_value": [["mock_get_records", "mock_get_db_hook", "return_value", "get_first"], ["mock_get_records", "return_value"]], "tis": [["tis", "dr", "get_task_instances"]]}, "name": "test_branch_list_with_dag_run", "params": {"mock_get_db_hook": "", "self": ""}, "params_descr": {"mock_get_db_hook": "", "self": ""}, "params_occur": {"mock_get_db_hook": [["mock_get_records", "mock_get_db_hook", "return_value", "get_first"]], "self": [["branch_op", "BranchSQLOperator", "task_id", "conn_id", "sql", "follow_task_ids_if_true", "follow_task_ids_if_false", "dag", "self", "dag"], ["self", "branch_1", "set_upstream", "branch_op"], ["self", "branch_2", "set_upstream", "branch_op"], ["self", "branch_3", "EmptyOperator", "task_id", "dag", "self", "dag"], ["self", "branch_3", "set_upstream", "branch_op"], ["self", "dag", "clear"], ["dr", "self", "dag", "create_dagrun", "run_id", "start_date", "timezone", "utcnow", "execution_date", "DEFAULT_DATE", "state", "State", "RUNNING"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_db_hook": [["core.models.Recipe", 0.10326338489050972]], "self": []}, "q_name": "TestSqlBranch.test_branch_list_with_dag_run", "ret_exprs": [], "ret_type": "", "variables": {"branch_3": "", "branch_op": "", "dr": "", "mock_get_records": "", "return_value": "", "tis": ""}, "variables_p": {"branch_3": [["str", 0.31752488428657966], ["float", 0.17961328836316265], ["int", 0.10591725239248818], ["List[str]", 0.10469631041840136]], "branch_op": [["int", 0.24940781532765272], ["Dict[str, str]", 0.2113105484092874], ["Dict[str, Any]", 0.1056552742046437], ["Pattern[Any]", 0.10480967009238755], ["str", 0.10423355174956607]], "dr": [["str", 0.25166854163308605], ["Tuple[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any]", 0.10234688337123576], ["Set[str]", 0.0974968642686453], ["backend.api.models.group.Group", 0.09476301100475927], ["Dict[str, Any]", 0.09110568499635444], ["byceps.services.party.transfer.models.Party", 0.08665817349077182]], "mock_get_records": [["str", 0.45170874298278696], ["Dict[str, Union[int, str]]", 0.12726282470904876], ["List[Dict[str, str]]", 0.12395867957462803], ["Dict[str, Union[Any, str]]", 0.11529877799130263], ["dict", 0.08592628578265714]], "return_value": [["str", 0.45685104200864785], ["List[Dict[str, str]]", 0.15350552367467796], ["Dict[str, Union[Any, str]]", 0.10473965799754373], ["Dict[Any, Union[int, str]]", 0.09496198787211022], ["Dict[str, Union[int, str]]", 0.0934592880878941]], "tis": [["str", 0.20525016768842724], ["Dict[str, Union[Any, Any]]", 0.10478446686768929], ["decksite.data.models.person.Person", 0.09944637103010172], ["int", 0.0941002144741875], ["Dict[str, str]", 0.09345818467790688], ["lms.lmsdb.models.Solution", 0.09204170931108901]]}}, {"docstring": {"func": "Check BranchSQLOperator branch operation", "long_descr": null, "ret": null}, "fn_lc": [[1171, 4], [1198, 73]], "fn_var_ln": {"branch_op": [[1173, 8], [1173, 17]], "mock_get_records": [[1193, 8], [1193, 24]], "return_value": [[1195, 8], [1195, 37]]}, "fn_var_occur": {"branch_op": [["branch_op", "BranchSQLOperator", "task_id", "conn_id", "sql", "follow_task_ids_if_true", "follow_task_ids_if_false", "dag", "self", "dag"], ["self", "branch_1", "set_upstream", "branch_op"], ["self", "branch_2", "set_upstream", "branch_op"], ["branch_op", "run", "start_date", "DEFAULT_DATE", "end_date", "DEFAULT_DATE"]], "mock_get_records": [["mock_get_records", "mock_get_db_hook", "return_value", "get_first"], ["mock_get_records", "return_value"]], "return_value": [["mock_get_records", "mock_get_db_hook", "return_value", "get_first"], ["mock_get_records", "return_value"]]}, "name": "test_invalid_query_result_with_dag_run", "params": {"mock_get_db_hook": "", "self": ""}, "params_descr": {"mock_get_db_hook": "", "self": ""}, "params_occur": {"mock_get_db_hook": [["mock_get_records", "mock_get_db_hook", "return_value", "get_first"]], "self": [["branch_op", "BranchSQLOperator", "task_id", "conn_id", "sql", "follow_task_ids_if_true", "follow_task_ids_if_false", "dag", "self", "dag"], ["self", "branch_1", "set_upstream", "branch_op"], ["self", "branch_2", "set_upstream", "branch_op"], ["self", "dag", "clear"], ["self", "dag", "create_dagrun", "run_id", "start_date", "timezone", "utcnow", "execution_date", "DEFAULT_DATE", "state", "State", "RUNNING"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_db_hook": [["Dict[str, str]", 0.09309794877083526], ["deeplearning.ml4pl.models.log_database.Database", 0.09248251502853334]], "self": []}, "q_name": "TestSqlBranch.test_invalid_query_result_with_dag_run", "ret_exprs": [], "ret_type": "", "variables": {"branch_op": "", "mock_get_records": "", "return_value": ""}, "variables_p": {"branch_op": [["int", 0.24940781532765272], ["Dict[str, str]", 0.2113105484092874], ["Dict[str, Any]", 0.1056552742046437], ["Pattern[Any]", 0.10480967009238755], ["str", 0.10423355174956607]], "mock_get_records": [["str", 0.45170874298278696], ["Dict[str, Union[int, str]]", 0.12726282470904876], ["List[Dict[str, str]]", 0.12395867957462803], ["Dict[str, Union[Any, str]]", 0.11529877799130263], ["dict", 0.08592628578265714]], "return_value": [["str", 0.45685104200864785], ["List[Dict[str, str]]", 0.15350552367467796], ["Dict[str, Union[Any, str]]", 0.10473965799754373], ["Dict[Any, Union[int, str]]", 0.09496198787211022], ["Dict[str, Union[int, str]]", 0.0934592880878941]]}}, {"docstring": {"func": "Test SQL Branch with skipping all downstream dependencies", "long_descr": null, "ret": null}, "fn_lc": [[1201, 4], [1239, 76]], "fn_var_ln": {"branch_op": [[1203, 8], [1203, 17]], "dr": [[1216, 8], [1216, 10]], "mock_get_records": [[1223, 8], [1223, 24]], "return_value": [[1226, 12], [1226, 41]], "tis": [[1230, 12], [1230, 15]]}, "fn_var_occur": {"branch_op": [["branch_op", "BranchSQLOperator", "task_id", "conn_id", "sql", "follow_task_ids_if_true", "follow_task_ids_if_false", "dag", "self", "dag"], ["branch_op", "self", "branch_1", "self", "branch_2"], ["branch_op", "self", "branch_2"], ["branch_op", "run", "start_date", "DEFAULT_DATE", "end_date", "DEFAULT_DATE"]], "dr": [["dr", "self", "dag", "create_dagrun", "run_id", "start_date", "timezone", "utcnow", "execution_date", "DEFAULT_DATE", "state", "State", "RUNNING"], ["tis", "dr", "get_task_instances"]], "mock_get_records": [["mock_get_records", "mock_get_db_hook", "return_value", "get_first"], ["mock_get_records", "return_value", "true_value"]], "return_value": [["mock_get_records", "mock_get_db_hook", "return_value", "get_first"], ["mock_get_records", "return_value", "true_value"]], "tis": [["tis", "dr", "get_task_instances"]]}, "name": "test_with_skip_in_branch_downstream_dependencies", "params": {"mock_get_db_hook": "", "self": ""}, "params_descr": {"mock_get_db_hook": "", "self": ""}, "params_occur": {"mock_get_db_hook": [["mock_get_records", "mock_get_db_hook", "return_value", "get_first"]], "self": [["branch_op", "BranchSQLOperator", "task_id", "conn_id", "sql", "follow_task_ids_if_true", "follow_task_ids_if_false", "dag", "self", "dag"], ["branch_op", "self", "branch_1", "self", "branch_2"], ["branch_op", "self", "branch_2"], ["self", "dag", "clear"], ["dr", "self", "dag", "create_dagrun", "run_id", "start_date", "timezone", "utcnow", "execution_date", "DEFAULT_DATE", "state", "State", "RUNNING"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_db_hook": [], "self": []}, "q_name": "TestSqlBranch.test_with_skip_in_branch_downstream_dependencies", "ret_exprs": [], "ret_type": "", "variables": {"branch_op": "", "dr": "", "mock_get_records": "", "return_value": "", "tis": ""}, "variables_p": {"branch_op": [["int", 0.24940781532765272], ["Dict[str, str]", 0.2113105484092874], ["Dict[str, Any]", 0.1056552742046437], ["Pattern[Any]", 0.10480967009238755], ["str", 0.10423355174956607]], "dr": [["str", 0.25166854163308605], ["Tuple[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any]", 0.10234688337123576], ["Set[str]", 0.0974968642686453], ["backend.api.models.group.Group", 0.09476301100475927], ["Dict[str, Any]", 0.09110568499635444], ["byceps.services.party.transfer.models.Party", 0.08665817349077182]], "mock_get_records": [["str", 0.36630356133583053], ["Dict[str, Union[int, str]]", 0.1252490289261641], ["List[Dict[str, str]]", 0.12365224088256596], ["Dict[str, Union[Any, str]]", 0.11536277454113032], ["Dict[str, str]", 0.08751943407471481], ["dict", 0.08697007885216522]], "return_value": [["str", 0.4660337065835639], ["List[Dict[str, str]]", 0.14910028977509704], ["Dict[str, Union[Any, str]]", 0.10318660713260962], ["Dict[Any, Union[int, str]]", 0.0948394759488933], ["Dict[str, Union[int, str]]", 0.09119880234305953]], "tis": [["str", 0.20525016768842724], ["Dict[str, Union[Any, Any]]", 0.10478446686768929], ["decksite.data.models.person.Person", 0.09944637103010172], ["int", 0.0941002144741875], ["Dict[str, str]", 0.09345818467790688], ["lms.lmsdb.models.Solution", 0.09204170931108901]]}}, {"docstring": {"func": "Test skipping downstream dependency for false condition", "long_descr": null, "ret": null}, "fn_lc": [[1242, 4], [1280, 76]], "fn_var_ln": {"branch_op": [[1244, 8], [1244, 17]], "dr": [[1257, 8], [1257, 10]], "mock_get_records": [[1264, 8], [1264, 24]], "return_value": [[1267, 12], [1267, 41]], "tis": [[1271, 12], [1271, 15]]}, "fn_var_occur": {"branch_op": [["branch_op", "BranchSQLOperator", "task_id", "conn_id", "sql", "follow_task_ids_if_true", "follow_task_ids_if_false", "dag", "self", "dag"], ["branch_op", "self", "branch_1", "self", "branch_2"], ["branch_op", "self", "branch_2"], ["branch_op", "run", "start_date", "DEFAULT_DATE", "end_date", "DEFAULT_DATE"]], "dr": [["dr", "self", "dag", "create_dagrun", "run_id", "start_date", "timezone", "utcnow", "execution_date", "DEFAULT_DATE", "state", "State", "RUNNING"], ["tis", "dr", "get_task_instances"]], "mock_get_records": [["mock_get_records", "mock_get_db_hook", "return_value", "get_first"], ["mock_get_records", "return_value", "false_value"]], "return_value": [["mock_get_records", "mock_get_db_hook", "return_value", "get_first"], ["mock_get_records", "return_value", "false_value"]], "tis": [["tis", "dr", "get_task_instances"]]}, "name": "test_with_skip_in_branch_downstream_dependencies2", "params": {"mock_get_db_hook": "", "self": ""}, "params_descr": {"mock_get_db_hook": "", "self": ""}, "params_occur": {"mock_get_db_hook": [["mock_get_records", "mock_get_db_hook", "return_value", "get_first"]], "self": [["branch_op", "BranchSQLOperator", "task_id", "conn_id", "sql", "follow_task_ids_if_true", "follow_task_ids_if_false", "dag", "self", "dag"], ["branch_op", "self", "branch_1", "self", "branch_2"], ["branch_op", "self", "branch_2"], ["self", "dag", "clear"], ["dr", "self", "dag", "create_dagrun", "run_id", "start_date", "timezone", "utcnow", "execution_date", "DEFAULT_DATE", "state", "State", "RUNNING"]]}, "params_p": {"args": [], "kwargs": [], "mock_get_db_hook": [], "self": []}, "q_name": "TestSqlBranch.test_with_skip_in_branch_downstream_dependencies2", "ret_exprs": [], "ret_type": "", "variables": {"branch_op": "", "dr": "", "mock_get_records": "", "return_value": "", "tis": ""}, "variables_p": {"branch_op": [["int", 0.24940781532765272], ["Dict[str, str]", 0.2113105484092874], ["Dict[str, Any]", 0.1056552742046437], ["Pattern[Any]", 0.10480967009238755], ["str", 0.10423355174956607]], "dr": [["str", 0.25166854163308605], ["Tuple[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any]", 0.10234688337123576], ["Set[str]", 0.0974968642686453], ["backend.api.models.group.Group", 0.09476301100475927], ["Dict[str, Any]", 0.09110568499635444], ["byceps.services.party.transfer.models.Party", 0.08665817349077182]], "mock_get_records": [["str", 0.36630356133583053], ["Dict[str, Union[int, str]]", 0.1252490289261641], ["List[Dict[str, str]]", 0.12365224088256596], ["Dict[str, Union[Any, str]]", 0.11536277454113032], ["Dict[str, str]", 0.08751943407471481], ["dict", 0.08697007885216522]], "return_value": [["str", 0.4660337065835639], ["List[Dict[str, str]]", 0.14910028977509704], ["Dict[str, Union[Any, str]]", 0.10318660713260962], ["Dict[Any, Union[int, str]]", 0.0948394759488933], ["Dict[str, Union[int, str]]", 0.09119880234305953]], "tis": [["str", 0.20525016768842724], ["Dict[str, Union[Any, Any]]", 0.10478446686768929], ["decksite.data.models.person.Person", 0.09944637103010172], ["int", 0.0941002144741875], ["Dict[str, str]", 0.09345818467790688], ["lms.lmsdb.models.Solution", 0.09204170931108901]]}}], "name": "TestSqlBranch", "q_name": "TestSqlBranch", "variables": {}, "variables_p": {}}], "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[52, 0], [53, 21]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "_get_mock_db_hook", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "_get_mock_db_hook", "ret_exprs": ["return MockHook()"], "ret_type": "", "ret_type_p": [], "variables": {}, "variables_p": {}}], "imports": ["__future__", "annotations", "datetime", "unittest", "mock", "unittest", "mock", "MagicMock", "pytest", "airflow", "DAG", "airflow", "exceptions", "AirflowException", "airflow", "models", "Connection", "DagRun", "TaskInstance", "TI", "XCom", "airflow", "operators", "empty", "EmptyOperator", "airflow", "providers", "common", "sql", "hooks", "sql", "fetch_all_handler", "airflow", "providers", "common", "sql", "operators", "sql", "BranchSQLOperator", "SQLCheckOperator", "SQLColumnCheckOperator", "SQLExecuteQueryOperator", "SQLIntervalCheckOperator", "SQLTableCheckOperator", "SQLThresholdCheckOperator", "SQLValueCheckOperator", "airflow", "providers", "postgres", "hooks", "postgres", "PostgresHook", "airflow", "utils", "timezone", "airflow", "utils", "session", "create_session", "airflow", "utils", "state", "State"], "mod_var_ln": {"DEFAULT_DATE": [[533, 0], [533, 12]], "INTERVAL": [[534, 0], [534, 8]], "SUPPORTED_FALSE_VALUES": [[547, 0], [547, 22]], "SUPPORTED_TRUE_VALUES": [[535, 0], [535, 21]]}, "mod_var_occur": {"DEFAULT_DATE": [["self", "dag", "DAG", "default_args", "DEFAULT_DATE", "schedule", "INTERVAL"], ["op", "run", "start_date", "DEFAULT_DATE", "end_date", "DEFAULT_DATE", "ignore_ti_state", "True"], ["op", "run", "start_date", "DEFAULT_DATE", "end_date", "DEFAULT_DATE", "ignore_ti_state", "True"], ["op", "run", "start_date", "DEFAULT_DATE", "end_date", "DEFAULT_DATE", "ignore_ti_state", "True"], ["op", "run", "start_date", "DEFAULT_DATE", "end_date", "DEFAULT_DATE", "ignore_ti_state", "True"], ["branch_op", "run", "start_date", "DEFAULT_DATE", "end_date", "DEFAULT_DATE", "ignore_ti_state", "True"], ["branch_op", "run", "start_date", "DEFAULT_DATE", "end_date", "DEFAULT_DATE", "ignore_ti_state", "True"], ["dr", "self", "dag", "create_dagrun", "run_id", "start_date", "timezone", "utcnow", "execution_date", "DEFAULT_DATE", "state", "State", "RUNNING"], ["branch_op", "run", "start_date", "DEFAULT_DATE", "end_date", "DEFAULT_DATE"], ["dr", "self", "dag", "create_dagrun", "run_id", "start_date", "timezone", "utcnow", "execution_date", "DEFAULT_DATE", "state", "State", "RUNNING"], ["branch_op", "run", "start_date", "DEFAULT_DATE", "end_date", "DEFAULT_DATE"], ["dr", "self", "dag", "create_dagrun", "run_id", "start_date", "timezone", "utcnow", "execution_date", "DEFAULT_DATE", "state", "State", "RUNNING"], ["branch_op", "run", "start_date", "DEFAULT_DATE", "end_date", "DEFAULT_DATE"], ["dr", "self", "dag", "create_dagrun", "run_id", "start_date", "timezone", "utcnow", "execution_date", "DEFAULT_DATE", "state", "State", "RUNNING"], ["branch_op", "run", "start_date", "DEFAULT_DATE", "end_date", "DEFAULT_DATE"], ["self", "dag", "create_dagrun", "run_id", "start_date", "timezone", "utcnow", "execution_date", "DEFAULT_DATE", "state", "State", "RUNNING"], ["branch_op", "run", "start_date", "DEFAULT_DATE", "end_date", "DEFAULT_DATE"], ["dr", "self", "dag", "create_dagrun", "run_id", "start_date", "timezone", "utcnow", "execution_date", "DEFAULT_DATE", "state", "State", "RUNNING"], ["branch_op", "run", "start_date", "DEFAULT_DATE", "end_date", "DEFAULT_DATE"], ["dr", "self", "dag", "create_dagrun", "run_id", "start_date", "timezone", "utcnow", "execution_date", "DEFAULT_DATE", "state", "State", "RUNNING"], ["branch_op", "run", "start_date", "DEFAULT_DATE", "end_date", "DEFAULT_DATE"]], "INTERVAL": [["self", "dag", "DAG", "default_args", "DEFAULT_DATE", "schedule", "INTERVAL"]], "SUPPORTED_FALSE_VALUES": [["SUPPORTED_FALSE_VALUES"], ["SUPPORTED_FALSE_VALUES"]], "SUPPORTED_TRUE_VALUES": [["SUPPORTED_TRUE_VALUES"], ["SUPPORTED_TRUE_VALUES"]]}, "no_types_annot": {"D": 2, "I": 0, "U": 326}, "session_id": "qvCtjsz-jVuw0K19ctP-mLWh-Vpfba_yyjpGRlvrA_w", "set": null, "tc": [false, null], "type_annot_cove": 0.01, "typed_seq": "", "untyped_seq": "", "variables": {"DEFAULT_DATE": "", "INTERVAL": "", "SUPPORTED_FALSE_VALUES": "", "SUPPORTED_TRUE_VALUES": ""}, "variables_p": {"DEFAULT_DATE": [["datetime.datetime.datetime", 0.5115536815604931], ["datetime.datetime", 0.19781530267379654], ["datetime.datetime.timezone", 0.09567261782862645]], "INTERVAL": [["bool", 0.1112778246631051], ["Optional[int]", 0.10425459590324088], ["Optional[datetime.datetime]", 0.10422043349494478], ["recidiviz.calculator.pipeline.utils.incarceration_period_index.IncarcerationPeriodIndex", 0.09926085855519212], ["str", 0.09600074522287037], ["datetime.datetime", 0.09462196868171527]], "SUPPORTED_FALSE_VALUES": [["int", 0.6624556784113604], ["float", 0.13036823069721665], ["str", 0.10893138353729857], ["datetime.timedelta", 0.0982447073541243]], "SUPPORTED_TRUE_VALUES": [["int", 0.37054089260238543], ["List[int]", 0.21379008928056106], ["float", 0.20937672501089277], ["str", 0.11693588991518539], ["Dict[str, Any]", 0.08935640319097522]]}}}