{"error": null, "response": {"classes": [{"cls_lc": [[37, 0], [39, 23]], "cls_var_ln": {"id": [[38, 4], [38, 6]], "value": [[39, 4], [39, 9]]}, "cls_var_occur": {"id": [], "value": []}, "funcs": [], "name": "Row", "q_name": "Row", "variables": {"id": "builtins.str", "value": "builtins.str"}, "variables_p": {"id": [["int", 0.5], ["str", 0.2], ["Optional[int]", 0.1], ["Type[legocollector.inventory.models.Color]", 0.1]], "value": [["int", 0.6], ["str", 0.3], ["List[float]", 0.09999999999999999]]}}, {"cls_lc": [[42, 0], [44, 24]], "cls_var_ln": {"id2": [[43, 4], [43, 7]], "value2": [[44, 4], [44, 10]]}, "cls_var_occur": {"id2": [], "value2": []}, "funcs": [], "name": "Row2", "q_name": "Row2", "variables": {"id2": "builtins.str", "value2": "builtins.str"}, "variables_p": {"id2": [["int", 0.5], ["str", 0.2], ["Optional[int]", 0.1], ["Type[legocollector.inventory.models.Color]", 0.1]], "value2": [["int", 0.6], ["str", 0.3], ["List[float]", 0.09999999999999999]]}}, {"cls_lc": [[132, 4], [136, 41]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[135, 8], [136, 41]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "get_db_hook", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "_mock_db_api_hook"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "test_exec_success.<locals>.SQLExecuteQueryOperatorForTest.get_db_hook", "ret_exprs": ["return self._mock_db_api_hook"], "ret_type": "", "ret_type_p": [["str", 0.7971196787582429], ["Tuple[int, int]", 0.10918639132477286]], "variables": {}, "variables_p": {}}], "name": "SQLExecuteQueryOperatorForTest", "q_name": "test_exec_success.<locals>.SQLExecuteQueryOperatorForTest", "variables": {}, "variables_p": {}}, {"cls_lc": [[249, 4], [258, 51]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[252, 8], [253, 41]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "get_db_hook", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "_mock_db_api_hook"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "test_exec_success_with_process_output.<locals>.SQLExecuteQueryOperatorForTestWithProcessOutput.get_db_hook", "ret_exprs": ["return self._mock_db_api_hook"], "ret_type": "", "ret_type_p": [["str", 0.7971196787582429], ["Tuple[int, int]", 0.10918639132477286]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[255, 8], [258, 51]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "_process_output", "params": {"descriptions": "builtins.list[Sequence[Sequence] | None]", "results": "builtins.list[typing.Any]", "self": ""}, "params_descr": {"descriptions": "", "results": "", "self": ""}, "params_occur": {"descriptions": [["list", "zip", "descriptions", "results"]], "results": [["list", "zip", "descriptions", "results"]], "self": []}, "params_p": {"args": [], "descriptions": [["str", 0.8020222574277405], ["int", 0.09898887128612986], ["Dict[int, int]", 0.09898887128612986]], "kwargs": [], "results": [["str", 0.8020222574277405], ["int", 0.09898887128612986], ["Dict[int, int]", 0.09898887128612986]], "self": []}, "q_name": "test_exec_success_with_process_output.<locals>.SQLExecuteQueryOperatorForTestWithProcessOutput._process_output", "ret_exprs": ["return list(zip(descriptions, results))"], "ret_type": "builtins.list[typing.Any]", "ret_type_p": [["str", 0.19670731264263197], ["Dict[str, List[Any]]", 0.1037873447943606], ["List[Tuple[bool, str]]", 0.09884719504012164], ["List[Tuple[float, str]]", 0.09720378004343828], ["int", 0.094253740933056], ["List[Dict[str, str]]", 0.09363170662792564]], "variables": {}, "variables_p": {}}], "name": "SQLExecuteQueryOperatorForTestWithProcessOutput", "q_name": "test_exec_success_with_process_output.<locals>.SQLExecuteQueryOperatorForTestWithProcessOutput", "variables": {}, "variables_p": {}}, {"cls_lc": [[285, 4], [298, 66]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[290, 8], [295, 13]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "get_openlineage_database_info", "params": {"connection": "", "self": ""}, "params_descr": {"connection": "", "self": ""}, "params_occur": {"connection": [["DatabaseInfo", "scheme", "authority", "DbApiHook", "get_openlineage_authority_part", "connection"]], "self": []}, "params_p": {"args": [], "connection": [["int", 0.10885041722215154], ["Mapping[str, Any]", 0.0853769805079145], ["Dict[str, Any]", 0.08266286026486185]], "kwargs": [], "self": []}, "q_name": "test_execute_openlineage_events.<locals>.DBApiHookForTests.get_openlineage_database_info", "ret_exprs": ["return DatabaseInfo( scheme=\"sqlscheme\", authority=DbApiHook.get_openlineage_authority_part(connection))"], "ret_type": "", "ret_type_p": [["str", 0.10994271923679554], ["dict", 0.10765514743232801], ["bool", 0.10147658983288227], ["int", 0.09195683862463898], ["salon.models.Stylist", 0.08988244108617083]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[297, 8], [298, 66]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "get_openlineage_database_specific_lineage", "params": {"self": "", "task_instance": ""}, "params_descr": {"self": "", "task_instance": ""}, "params_occur": {"self": [], "task_instance": []}, "params_p": {"args": [], "kwargs": [], "self": [], "task_instance": [["Dict[str, Any]", 0.9999999987746598], ["taskiapplication.models.task.Task", 5.267455844038155e-10], ["bool", 1.53673725549628e-10], ["Callable", 9.706396571330101e-11], ["dict", 9.634421206212766e-11]]}, "q_name": "test_execute_openlineage_events.<locals>.DBApiHookForTests.get_openlineage_database_specific_lineage", "ret_exprs": ["return OperatorLineage(run_facets={\"completed\": True})"], "ret_type": "", "ret_type_p": [["str", 0.09294861798932037], ["Mapping[str, Any]", 0.08853239070790625], ["bool", 0.0869029559748435]], "variables": {}, "variables_p": {}}], "name": "DBApiHookForTests", "q_name": "test_execute_openlineage_events.<locals>.DBApiHookForTests", "variables": {}, "variables_p": {}}, {"cls_lc": [[302, 4], [304, 29]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[303, 8], [304, 29]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "get_db_hook", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "test_execute_openlineage_events.<locals>.SQLExecuteQueryOperatorForTest.get_db_hook", "ret_exprs": ["return dbapi_hook"], "ret_type": "", "ret_type_p": [["str", 0.21783989618934357], ["bool", 0.17521169268505993], ["bytes", 0.10556743429741032], ["Tuple[int, int, int]", 0.09830476497441201]], "variables": {}, "variables_p": {}}], "name": "SQLExecuteQueryOperatorForTest", "q_name": "test_execute_openlineage_events.<locals>.SQLExecuteQueryOperatorForTest", "variables": {}, "variables_p": {}}], "funcs": [{"docstring": {"func": "Test the execute function in case where SQL query was successful.", "long_descr": null, "ret": null}, "fn_lc": [[127, 0], [159, 5]], "fn_var_ln": {"_mock_db_api_hook": [[133, 8], [133, 25]], "execute_results": [[149, 4], [149, 19]], "op": [[138, 4], [138, 6]]}, "fn_var_occur": {"_mock_db_api_hook": [["op", "_mock_db_api_hook", "run", "return_value", "hook_results"], ["op", "_mock_db_api_hook", "descriptions", "hook_descriptions"], ["op", "_mock_db_api_hook", "run", "assert_called_once_with", "sql", "sql", "parameters", "None", "handler", "fetch_all_handler", "autocommit", "False", "return_last", "return_last", "split_statements", "split_statement"]], "execute_results": [["execute_results", "op", "execute", "None"], ["execute_results", "expected_results"]], "op": [["op", "SQLExecuteQueryOperatorForTest", "task_id", "TASK_ID", "sql", "sql", "do_xcom_push", "True", "return_last", "return_last", "split_statements", "split_statement"], ["op", "_mock_db_api_hook", "run", "return_value", "hook_results"], ["op", "_mock_db_api_hook", "descriptions", "hook_descriptions"], ["execute_results", "op", "execute", "None"], ["op", "_mock_db_api_hook", "run", "assert_called_once_with", "sql", "sql", "parameters", "None", "handler", "fetch_all_handler", "autocommit", "False", "return_last", "return_last", "split_statements", "split_statement"]]}, "name": "test_exec_success", "params": {"expected_results": "", "hook_descriptions": "", "hook_results": "", "return_last": "", "split_statement": "", "sql": ""}, "params_descr": {"expected_results": "", "hook_descriptions": "", "hook_results": "", "return_last": "", "split_statement": "", "sql": ""}, "params_occur": {"expected_results": [["execute_results", "expected_results"]], "hook_descriptions": [["op", "_mock_db_api_hook", "descriptions", "hook_descriptions"]], "hook_results": [["op", "_mock_db_api_hook", "run", "return_value", "hook_results"]], "return_last": [["op", "SQLExecuteQueryOperatorForTest", "task_id", "TASK_ID", "sql", "sql", "do_xcom_push", "True", "return_last", "return_last", "split_statements", "split_statement"], ["op", "_mock_db_api_hook", "run", "assert_called_once_with", "sql", "sql", "parameters", "None", "handler", "fetch_all_handler", "autocommit", "False", "return_last", "return_last", "split_statements", "split_statement"]], "split_statement": [["op", "SQLExecuteQueryOperatorForTest", "task_id", "TASK_ID", "sql", "sql", "do_xcom_push", "True", "return_last", "return_last", "split_statements", "split_statement"], ["op", "_mock_db_api_hook", "run", "assert_called_once_with", "sql", "sql", "parameters", "None", "handler", "fetch_all_handler", "autocommit", "False", "return_last", "return_last", "split_statements", "split_statement"]], "sql": [["op", "SQLExecuteQueryOperatorForTest", "task_id", "TASK_ID", "sql", "sql", "do_xcom_push", "True", "return_last", "return_last", "split_statements", "split_statement"], ["op", "_mock_db_api_hook", "run", "assert_called_once_with", "sql", "sql", "parameters", "None", "handler", "fetch_all_handler", "autocommit", "False", "return_last", "return_last", "split_statements", "split_statement"]]}, "params_p": {"args": [], "expected_results": [["dict", 0.2968861312613347], ["int", 0.09159561162343052], ["float", 0.09159561162343052]], "hook_descriptions": [["str", 0.21274901921343134], ["bytes", 0.10532935829179277], ["abilian.core.models.subjects.User", 0.09701838295006818], ["Callable", 0.09667673655114273]], "hook_results": [["unittesmock.MagicMock", 0.2360168200258662], ["int", 0.12541191073913582]], "kwargs": [], "return_last": [["int", 0.10257593933625568], ["Union[float, str]", 0.1020750326734959], ["float", 0.1020750326734959], ["Optional[List[str]]", 0.09458586094763927], ["bool", 0.09458586094763927], ["Sequence[int]", 0.08771871780401647], ["Optional[str]", 0.08506366755464942]], "split_statement": [["int", 0.10257593933625568], ["Union[float, str]", 0.1020750326734959], ["float", 0.1020750326734959], ["Optional[List[str]]", 0.09458586094763927], ["bool", 0.09458586094763927], ["Sequence[int]", 0.08771871780401647], ["Optional[str]", 0.08506366755464942]], "sql": [["int", 0.10257593933625568], ["Union[float, str]", 0.1020750326734959], ["float", 0.1020750326734959], ["Optional[List[str]]", 0.09458586094763927], ["bool", 0.09458586094763927], ["Sequence[int]", 0.08771871780401647], ["Optional[str]", 0.08506366755464942]]}, "q_name": "test_exec_success", "ret_exprs": [], "ret_type": "", "variables": {"_mock_db_api_hook": "", "execute_results": "", "op": ""}, "variables_p": {"_mock_db_api_hook": [["str", 0.20576535511467034], ["Dict[str, Union[Any, Any, str]]", 0.18686555949421865], ["unittesmock.MagicMock", 0.17462955578031636], ["list", 0.11591028361533402], ["List[Tuple[str, Any]]", 0.10755762716363015], ["Dict[str, Any]", 0.10540907086042707]], "execute_results": [["set", 0.46615813343349494], ["List[str]", 0.10986384292364258], ["Dict[str, Literal]", 0.10198384664316038], ["Dict[str, Union[None, Any, Any, str]]", 0.0962470290208883]], "op": [["Dict[str, Union[Any, bool, str]]", 0.1825204065794859], ["str", 0.16999169336385633], ["Dict[str, Union[int, str]]", 0.08979627156689296], ["Dict[str, Union[Any, Any, str]]", 0.07977880720475826]]}}, {"docstring": {"func": "Test the execute function in case where SQL query was successful.", "long_descr": null, "ret": null}, "fn_lc": [[242, 0], [281, 5]], "fn_var_ln": {"_mock_db_api_hook": [[250, 8], [250, 25]], "execute_results": [[271, 4], [271, 19]], "op": [[260, 4], [260, 6]]}, "fn_var_occur": {"_mock_db_api_hook": [["op", "_mock_db_api_hook", "run", "return_value", "hook_results"], ["op", "_mock_db_api_hook", "descriptions", "hook_descriptions"], ["op", "_mock_db_api_hook", "run", "assert_called_once_with", "sql", "sql", "parameters", "None", "handler", "fetch_all_handler", "autocommit", "False", "return_last", "return_last", "split_statements", "split_statement"]], "execute_results": [["execute_results", "op", "execute", "None"], ["execute_results", "expected_results"]], "op": [["op", "SQLExecuteQueryOperatorForTestWithProcessOutput", "task_id", "TASK_ID", "sql", "sql", "do_xcom_push", "True", "return_last", "return_last", "split_statements", "split_statement"], ["op", "_mock_db_api_hook", "run", "return_value", "hook_results"], ["op", "_mock_db_api_hook", "descriptions", "hook_descriptions"], ["execute_results", "op", "execute", "None"], ["op", "_mock_db_api_hook", "run", "assert_called_once_with", "sql", "sql", "parameters", "None", "handler", "fetch_all_handler", "autocommit", "False", "return_last", "return_last", "split_statements", "split_statement"]]}, "name": "test_exec_success_with_process_output", "params": {"expected_results": "", "hook_descriptions": "", "hook_results": "", "return_last": "", "split_statement": "", "sql": ""}, "params_descr": {"expected_results": "", "hook_descriptions": "", "hook_results": "", "return_last": "", "split_statement": "", "sql": ""}, "params_occur": {"expected_results": [["execute_results", "expected_results"]], "hook_descriptions": [["op", "_mock_db_api_hook", "descriptions", "hook_descriptions"]], "hook_results": [["op", "_mock_db_api_hook", "run", "return_value", "hook_results"]], "return_last": [["op", "SQLExecuteQueryOperatorForTestWithProcessOutput", "task_id", "TASK_ID", "sql", "sql", "do_xcom_push", "True", "return_last", "return_last", "split_statements", "split_statement"], ["op", "_mock_db_api_hook", "run", "assert_called_once_with", "sql", "sql", "parameters", "None", "handler", "fetch_all_handler", "autocommit", "False", "return_last", "return_last", "split_statements", "split_statement"]], "split_statement": [["op", "SQLExecuteQueryOperatorForTestWithProcessOutput", "task_id", "TASK_ID", "sql", "sql", "do_xcom_push", "True", "return_last", "return_last", "split_statements", "split_statement"], ["op", "_mock_db_api_hook", "run", "assert_called_once_with", "sql", "sql", "parameters", "None", "handler", "fetch_all_handler", "autocommit", "False", "return_last", "return_last", "split_statements", "split_statement"]], "sql": [["op", "SQLExecuteQueryOperatorForTestWithProcessOutput", "task_id", "TASK_ID", "sql", "sql", "do_xcom_push", "True", "return_last", "return_last", "split_statements", "split_statement"], ["op", "_mock_db_api_hook", "run", "assert_called_once_with", "sql", "sql", "parameters", "None", "handler", "fetch_all_handler", "autocommit", "False", "return_last", "return_last", "split_statements", "split_statement"]]}, "params_p": {"args": [], "expected_results": [["dict", 0.3005127810139687], ["int", 0.09144787353224462], ["float", 0.09144787353224462]], "hook_descriptions": [["str", 0.296862457369522]], "hook_results": [["unittesmock.MagicMock", 0.16044655854029824], ["int", 0.11679330999192837]], "kwargs": [], "return_last": [["Dict[int, dict]", 0.12035468016887078], ["str", 0.09545130175425422], ["bool", 0.09098495112818593]], "split_statement": [["Dict[int, dict]", 0.12035468016887078], ["str", 0.09545130175425422], ["bool", 0.09098495112818593]], "sql": [["Dict[int, dict]", 0.12035468016887078], ["str", 0.09545130175425422], ["bool", 0.09098495112818593]]}, "q_name": "test_exec_success_with_process_output", "ret_exprs": [], "ret_type": "", "variables": {"_mock_db_api_hook": "", "execute_results": "", "op": ""}, "variables_p": {"_mock_db_api_hook": [["str", 0.20576535511467034], ["Dict[str, Union[Any, Any, str]]", 0.18686555949421865], ["unittesmock.MagicMock", 0.17462955578031636], ["list", 0.11591028361533402], ["List[Tuple[str, Any]]", 0.10755762716363015], ["Dict[str, Any]", 0.10540907086042707]], "execute_results": [["set", 0.46615813343349494], ["List[str]", 0.10986384292364258], ["Dict[str, Literal]", 0.10198384664316038], ["Dict[str, Union[None, Any, Any, str]]", 0.0962470290208883]], "op": [["str", 0.5192498811763359], ["Dict[str, Union[Any, bool, str]]", 0.20397311946210428]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[284, 0], [357, 5]], "fn_var_ln": {"DB_SCHEMA_NAME": [[313, 4], [313, 18]], "conn_name_attr": [[286, 8], [286, 22]], "dbapi_hook": [[300, 4], [300, 14]], "get_conn": [[287, 8], [287, 16]], "get_connection": [[288, 8], [288, 22]], "lineage": [[324, 4], [324, 11]], "lineage_on_complete": [[348, 4], [348, 23]], "op": [[312, 4], [312, 6]], "rows": [[314, 4], [314, 8]], "sql": [[306, 4], [306, 7]]}, "fn_var_occur": {"DB_SCHEMA_NAME": [["rows", "DB_SCHEMA_NAME", "DB_SCHEMA_NAME", "DB_SCHEMA_NAME"]], "conn_name_attr": [], "dbapi_hook": [["dbapi_hook", "get_connection", "return_value", "Connection", "conn_id", "conn_type", "host", "port"], ["dbapi_hook", "get_conn", "return_value", "cursor", "return_value", "fetchall", "side_effect", "rows"], ["dbapi_hook", "get_conn", "return_value", "cursor", "return_value", "fetchall", "side_effect", "rows"]], "get_conn": [["dbapi_hook", "get_conn", "return_value", "cursor", "return_value", "fetchall", "side_effect", "rows"], ["dbapi_hook", "get_conn", "return_value", "cursor", "return_value", "fetchall", "side_effect", "rows"]], "get_connection": [["dbapi_hook", "get_connection", "return_value", "Connection", "conn_id", "conn_type", "host", "port"]], "lineage": [["lineage", "op", "get_openlineage_facets_on_start"], ["len", "lineage", "inputs"], ["lineage", "outputs", "Dataset", "namespace", "name", "facets", "SchemaDatasetFacet", "fields", "SchemaField", "name", "type", "SchemaField", "name", "type", "SchemaField", "name", "type"], ["lineage", "job_facets", "SqlJobFacet", "query", "sql"], ["lineage", "run_facets", "failedTasks"], ["OperatorLineage", "inputs", "lineage", "inputs", "outputs", "lineage", "outputs", "run_facets", "lineage", "run_facets", "True", "job_facets", "lineage", "job_facets", "lineage_on_complete"]], "lineage_on_complete": [["lineage_on_complete", "op", "get_openlineage_facets_on_complete", "None"], ["OperatorLineage", "inputs", "lineage", "inputs", "outputs", "lineage", "outputs", "run_facets", "lineage", "run_facets", "True", "job_facets", "lineage", "job_facets", "lineage_on_complete"]], "op": [["op", "SQLExecuteQueryOperatorForTest", "task_id", "TASK_ID", "sql", "sql"], ["lineage", "op", "get_openlineage_facets_on_start"], ["lineage_on_complete", "op", "get_openlineage_facets_on_complete", "None"]], "rows": [["rows", "DB_SCHEMA_NAME", "DB_SCHEMA_NAME", "DB_SCHEMA_NAME"], ["dbapi_hook", "get_conn", "return_value", "cursor", "return_value", "fetchall", "side_effect", "rows"], ["dbapi_hook", "get_conn", "return_value", "cursor", "return_value", "fetchall", "side_effect", "rows"]], "sql": [["op", "SQLExecuteQueryOperatorForTest", "task_id", "TASK_ID", "sql", "sql"], ["lineage", "job_facets", "SqlJobFacet", "query", "sql"]]}, "name": "test_execute_openlineage_events", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "test_execute_openlineage_events", "ret_exprs": [], "ret_type": "", "variables": {"DB_SCHEMA_NAME": "", "conn_name_attr": "", "dbapi_hook": "", "get_conn": "", "get_connection": "", "lineage": "", "lineage_on_complete": "", "op": "", "rows": "", "sql": ""}, "variables_p": {"DB_SCHEMA_NAME": [["str", 0.9180476859217704]], "conn_name_attr": [["str", 0.9999999984412052], ["Tuple[str, str, bool, str, str, str, str]", 8.316126869679678e-10], ["List[str]", 1.331690806861904e-10], ["Tuple[Any, Any]", 1.331690806861904e-10], ["bool", 1.3275060008743415e-10]], "dbapi_hook": [["str", 0.6471321586747124], ["Dict[str, Dict[str, Any]]", 0.09738562119355973], ["Dict[str, Union[Any, Any]]", 0.09040631800651308], ["Dict[str, Union[int, str]]", 0.08371257301453676]], "get_conn": [["str", 0.18812844716345573], ["Dict[str, Dict[str, Any]]", 0.14118547200074583], ["List[str]", 0.12868842453934273], ["mock._patch[Union[mock.AsyncMock, mock.MagicMock]]", 0.0813368468522799], ["int", 0.08092668333686688], ["Dict[str, Union[None, Any, Any]]", 0.06552116339081308]], "get_connection": [["str", 0.5935464463625427], ["Generator[str, None, None]", 0.1063999104885192], ["Dict[str, Union[int, str]]", 0.10277558965484163], ["Dict[str, str]", 0.09313783488677618]], "lineage": [["list", 0.890585946549599], ["str", 0.10941405345040091]], "lineage_on_complete": [["str", 0.3972904089212804], ["float", 0.13820428193668566], ["list", 0.09528140389099526]], "op": [["Dict[str, str]", 0.09824283236146868], ["str", 0.0859521287023917], ["int", 0.08478554820435094]], "rows": [["list", 0.20499578429087426], ["str", 0.19424699508889504], ["List[Union[Any, Any, Any]]", 0.10680192464189885], ["Dict[str, Union[Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any, Any]]", 0.10368581205043122], ["Dict[str, str]", 0.0879015136987464], ["topicdb.core.models.basename.BaseName", 0.08593187437723546]], "sql": [["int", 0.48368882915067807], ["str", 0.19364202278838064], ["Dict[Any, str]", 0.0971547459288212]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[363, 4], [366, 107]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "mock__import__", "params": {"fromlist": "", "globals_": "", "level": "", "locals_": "", "name": ""}, "params_descr": {"fromlist": "", "globals_": "", "level": "", "locals_": "", "name": ""}, "params_occur": {"fromlist": [["importlib", "__import__", "name", "globals", "globals_", "locals", "locals_", "fromlist", "fromlist", "level", "level"]], "globals_": [["importlib", "__import__", "name", "globals", "globals_", "locals", "locals_", "fromlist", "fromlist", "level", "level"]], "level": [["level", "name", "startswith"], ["importlib", "__import__", "name", "globals", "globals_", "locals", "locals_", "fromlist", "fromlist", "level", "level"]], "locals_": [["importlib", "__import__", "name", "globals", "globals_", "locals", "locals_", "fromlist", "fromlist", "level", "level"]], "name": [["level", "name", "startswith"], ["importlib", "__import__", "name", "globals", "globals_", "locals", "locals_", "fromlist", "fromlist", "level", "level"]]}, "params_p": {"args": [], "fromlist": [["str", 0.21168344459291027], ["Callable[[Any], bool]", 0.18661501039399322], ["dict", 0.11568409456980508], ["Optional[str]", 0.10365419782163275], ["Dict[str, Any]", 0.10004250278330895], ["Callable[[str], bool]", 0.08884803237314952], ["Callable[[List], bool]", 0.08086428710118183]], "globals_": [["str", 0.21168344459291027], ["Callable[[Any], bool]", 0.18661501039399322], ["dict", 0.11568409456980508], ["Optional[str]", 0.10365419782163275], ["Dict[str, Any]", 0.10004250278330895], ["Callable[[str], bool]", 0.08884803237314952], ["Callable[[List], bool]", 0.08086428710118183]], "kwargs": [], "level": [["str", 0.7184538342335973], ["float", 0.09804591286647057], ["Optional[int]", 0.09804591286647057]], "locals_": [["str", 0.21168344459291027], ["Callable[[Any], bool]", 0.18661501039399322], ["dict", 0.11568409456980508], ["Optional[str]", 0.10365419782163275], ["Dict[str, Any]", 0.10004250278330895], ["Callable[[str], bool]", 0.08884803237314952], ["Callable[[List], bool]", 0.08086428710118183]], "name": [["str", 0.7184538342335973], ["float", 0.09804591286647057], ["Optional[int]", 0.09804591286647057]]}, "q_name": "test_with_no_openlineage_provider.<locals>.mock__import__", "ret_exprs": ["return importlib.__import__(name, globals=globals_, locals=locals_, fromlist=fromlist, level=level)"], "ret_type": "", "ret_type_p": [["str", 0.2709558743884715], ["bool", 0.14120313658741104], ["Optional[Callable]", 0.08731688812172668], ["tuple", 0.08486139381926679]], "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[360, 0], [371, 66]], "fn_var_ln": {"op": [[369, 8], [369, 10]]}, "fn_var_occur": {"op": [["op", "SQLExecuteQueryOperator", "task_id", "TASK_ID", "sql"], ["op", "get_openlineage_facets_on_start", "None"], ["op", "get_openlineage_facets_on_complete", "None", "None"]]}, "name": "test_with_no_openlineage_provider", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "test_with_no_openlineage_provider", "ret_exprs": [], "ret_type": "", "variables": {"op": ""}, "variables_p": {"op": [["Dict[str, str]", 0.10074529149765435], ["List[Tuple[Any, Any]]", 0.09105698629352445], ["str", 0.07929845564987494], ["List[str]", 0.07891426062805701]]}}], "imports": ["__future__", "annotations", "typing", "Any", "NamedTuple", "Sequence", "unittest", "mock", "unittest", "mock", "MagicMock", "pytest", "openlineage", "client", "facet", "SchemaDatasetFacet", "SchemaField", "SqlJobFacet", "openlineage", "client", "run", "Dataset", "airflow", "models", "Connection", "airflow", "providers", "common", "sql", "hooks", "sql", "DbApiHook", "fetch_all_handler", "airflow", "providers", "common", "sql", "operators", "sql", "SQLExecuteQueryOperator", "airflow", "providers", "openlineage", "extractors", "base", "OperatorLineage", "airflow", "providers", "openlineage", "sqlparser", "DatabaseInfo", "importlib"], "mod_var_ln": {"DATE": [[33, 0], [33, 4]], "TASK_ID": [[34, 0], [34, 7]]}, "mod_var_occur": {"DATE": [], "TASK_ID": [["op", "SQLExecuteQueryOperatorForTest", "task_id", "TASK_ID", "sql", "sql", "do_xcom_push", "True", "return_last", "return_last", "split_statements", "split_statement"], ["op", "SQLExecuteQueryOperatorForTestWithProcessOutput", "task_id", "TASK_ID", "sql", "sql", "do_xcom_push", "True", "return_last", "return_last", "split_statements", "split_statement"], ["op", "SQLExecuteQueryOperatorForTest", "task_id", "TASK_ID", "sql", "sql"], ["op", "SQLExecuteQueryOperator", "task_id", "TASK_ID", "sql"]]}, "no_types_annot": {"D": 7, "I": 0, "U": 47}, "session_id": "srE_rPBKz4j4Dx_YEtSmn6mfBqJ6xfY2ShS27BJfKBA", "set": null, "tc": [false, null], "type_annot_cove": 0.13, "typed_seq": "", "untyped_seq": "", "variables": {"DATE": "", "TASK_ID": ""}, "variables_p": {"DATE": [["str", 0.3], ["int", 0.09999999999999999], ["Type[tiny_erp.apps.purchases.models.Requisition]", 0.09999999999999999], ["Type[my_walleportfolio.models.Asset]", 0.09999999999999999], ["Type[Questionnaire.models.Visited]", 0.09999999999999999], ["Type[django.applications.catmaid.models.ExportUser]", 0.09999999999999999]], "TASK_ID": [["str", 0.6078724626876286], ["int", 0.20642077765322786], ["Optional[str]", 0.0868395675694303]]}}}