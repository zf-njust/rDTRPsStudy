{"error": null, "response": {"classes": [{"cls_lc": [[34, 0], [254, 56]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[35, 4], [37, 54]], "fn_var_ln": {"args": [[36, 8], [36, 12]], "dag": [[37, 8], [37, 16]]}, "fn_var_occur": {"args": [["args", "DEFAULT_DATE"], ["self", "dag", "DAG", "TEST_DAG_ID", "default_args", "args"]], "dag": [["self", "dag", "DAG", "TEST_DAG_ID", "default_args", "args"]]}, "name": "setup_method", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "dag", "DAG", "TEST_DAG_ID", "default_args", "args"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSqlSensor.setup_method", "ret_exprs": [], "ret_type": "", "variables": {"args": "", "dag": ""}, "variables_p": {"args": [["Dict[str, int]", 0.1279822731721486], ["dict", 0.09391378821314494], ["List[Dict[str, Any]]", 0.0915704986111709], ["Counter[Any]", 0.08883413138124444]], "dag": []}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[39, 4], [48, 88]], "fn_var_ln": {"op": [[40, 8], [40, 10]]}, "fn_var_occur": {"op": [["op", "SqlSensor", "task_id", "conn_id", "sql", "dag", "self", "dag"], ["op", "run", "start_date", "DEFAULT_DATE", "end_date", "DEFAULT_DATE", "ignore_ti_state", "True"]]}, "name": "test_unsupported_conn_type", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["op", "SqlSensor", "task_id", "conn_id", "sql", "dag", "self", "dag"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSqlSensor.test_unsupported_conn_type", "ret_exprs": [], "ret_type": "", "variables": {"op": ""}, "variables_p": {"op": [["Dict[Any, str]", 0.32054436476311265], ["dict", 0.10684812158770422], ["Dict[str, Any]", 0.08953406422381438], ["list", 0.08334789532176923]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[51, 4], [67, 85]], "fn_var_ln": {"op1": [[52, 8], [52, 11]], "op2": [[60, 8], [60, 11]]}, "fn_var_occur": {"op1": [["op1", "SqlSensor", "task_id", "conn_id", "sql", "dag", "self", "dag"], ["op1", "run", "start_date", "DEFAULT_DATE", "end_date", "DEFAULT_DATE", "ignore_ti_state", "True"]], "op2": [["op2", "SqlSensor", "task_id", "conn_id", "sql", "parameters", "dag", "self", "dag"], ["op2", "run", "start_date", "DEFAULT_DATE", "end_date", "DEFAULT_DATE", "ignore_ti_state", "True"]]}, "name": "test_sql_sensor_mysql", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["op1", "SqlSensor", "task_id", "conn_id", "sql", "dag", "self", "dag"], ["op2", "SqlSensor", "task_id", "conn_id", "sql", "parameters", "dag", "self", "dag"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSqlSensor.test_sql_sensor_mysql", "ret_exprs": [], "ret_type": "", "variables": {"op1": "", "op2": ""}, "variables_p": {"op1": [["Dict[Any, str]", 0.32054436476311265], ["dict", 0.10684812158770422], ["Dict[str, Any]", 0.08953406422381438], ["list", 0.08334789532176923]], "op2": [["list", 0.21123264853197266], ["Dict[str, Any]", 0.09271594089885957], ["datetime.datetime", 0.09173199629473115], ["dict", 0.08309273184594339]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[70, 4], [86, 85]], "fn_var_ln": {"op1": [[71, 8], [71, 11]], "op2": [[79, 8], [79, 11]]}, "fn_var_occur": {"op1": [["op1", "SqlSensor", "task_id", "conn_id", "sql", "dag", "self", "dag"], ["op1", "run", "start_date", "DEFAULT_DATE", "end_date", "DEFAULT_DATE", "ignore_ti_state", "True"]], "op2": [["op2", "SqlSensor", "task_id", "conn_id", "sql", "parameters", "dag", "self", "dag"], ["op2", "run", "start_date", "DEFAULT_DATE", "end_date", "DEFAULT_DATE", "ignore_ti_state", "True"]]}, "name": "test_sql_sensor_postgres", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["op1", "SqlSensor", "task_id", "conn_id", "sql", "dag", "self", "dag"], ["op2", "SqlSensor", "task_id", "conn_id", "sql", "parameters", "dag", "self", "dag"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSqlSensor.test_sql_sensor_postgres", "ret_exprs": [], "ret_type": "", "variables": {"op1": "", "op2": ""}, "variables_p": {"op1": [["Dict[Any, str]", 0.32054436476311265], ["dict", 0.10684812158770422], ["Dict[str, Any]", 0.08953406422381438], ["list", 0.08334789532176923]], "op2": [["list", 0.21123264853197266], ["Dict[str, Any]", 0.09271594089885957], ["datetime.datetime", 0.09173199629473115], ["dict", 0.08309273184594339]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[89, 4], [118, 28]], "fn_var_ln": {"mock_get_records": [[97, 8], [97, 24]], "op": [[90, 8], [90, 10]], "return_value": [[117, 8], [117, 37]]}, "fn_var_occur": {"mock_get_records": [["mock_get_records", "mock_hook", "get_connection", "return_value", "get_hook", "return_value", "get_records"], ["mock_get_records", "return_value"], ["mock_get_records", "return_value", "None"], ["mock_get_records", "return_value"], ["mock_get_records", "return_value"], ["mock_get_records", "return_value"], ["mock_get_records", "return_value"], ["mock_get_records", "return_value"]], "op": [["op", "SqlSensor", "task_id", "conn_id", "sql"], ["op", "poke", "None"], ["op", "poke", "None"], ["op", "poke", "None"], ["op", "poke", "None"], ["op", "poke", "None"], ["op", "poke", "None"], ["op", "poke", "None"]], "return_value": [["mock_hook", "get_connection", "return_value", "get_hook", "return_value", "mock", "MagicMock", "spec", "DbApiHook"], ["mock_get_records", "mock_hook", "get_connection", "return_value", "get_hook", "return_value", "get_records"], ["mock_get_records", "return_value"], ["mock_get_records", "return_value", "None"], ["mock_get_records", "return_value"], ["mock_get_records", "return_value"], ["mock_get_records", "return_value"], ["mock_get_records", "return_value"], ["mock_get_records", "return_value"]]}, "name": "test_sql_sensor_postgres_poke", "params": {"mock_hook": "", "self": ""}, "params_descr": {"mock_hook": "", "self": ""}, "params_occur": {"mock_hook": [["mock_hook", "get_connection", "return_value", "get_hook", "return_value", "mock", "MagicMock", "spec", "DbApiHook"], ["mock_get_records", "mock_hook", "get_connection", "return_value", "get_hook", "return_value", "get_records"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_hook": [], "self": []}, "q_name": "TestSqlSensor.test_sql_sensor_postgres_poke", "ret_exprs": [], "ret_type": "", "variables": {"mock_get_records": "", "op": "", "return_value": ""}, "variables_p": {"mock_get_records": [["Dict[Any, Union[Any, Any]]", 0.10860242601527753], ["mock._patch[Union[mock.AsyncMock, mock.MagicMock]]", 0.10763497732928189], ["Dict[str, Any]", 0.10010465596356989], ["bytes", 0.094748752638684]], "op": [["Dict[Any, str]", 0.27706420078798677], ["Pattern[str]", 0.10422111933350155], ["str", 0.09607591669573715], ["Set[str]", 0.09431537652637732], ["dict", 0.0923547335959956]], "return_value": [["rotkehlchen.tests.utils.mock.MockResponse", 0.3410441590033668], ["str", 0.18807357877338707], ["Counter", 0.11263366725434241], ["int", 0.09106229587600748], ["Pattern[str]", 0.0891994916823008], ["Dict[str, List[Any]]", 0.08803664351221102]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[121, 4], [131, 25]], "fn_var_ln": {"mock_get_records": [[127, 8], [127, 24]], "op": [[122, 8], [122, 10]], "return_value": [[129, 8], [129, 37]]}, "fn_var_occur": {"mock_get_records": [["mock_get_records", "mock_hook", "get_connection", "return_value", "get_hook", "return_value", "get_records"], ["mock_get_records", "return_value"]], "op": [["op", "SqlSensor", "task_id", "conn_id", "sql", "fail_on_empty", "True"], ["op", "poke", "None"]], "return_value": [["mock_hook", "get_connection", "return_value", "get_hook", "return_value", "mock", "MagicMock", "spec", "DbApiHook"], ["mock_get_records", "mock_hook", "get_connection", "return_value", "get_hook", "return_value", "get_records"], ["mock_get_records", "return_value"]]}, "name": "test_sql_sensor_postgres_poke_fail_on_empty", "params": {"mock_hook": "", "self": ""}, "params_descr": {"mock_hook": "", "self": ""}, "params_occur": {"mock_hook": [["mock_hook", "get_connection", "return_value", "get_hook", "return_value", "mock", "MagicMock", "spec", "DbApiHook"], ["mock_get_records", "mock_hook", "get_connection", "return_value", "get_hook", "return_value", "get_records"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_hook": [], "self": []}, "q_name": "TestSqlSensor.test_sql_sensor_postgres_poke_fail_on_empty", "ret_exprs": [], "ret_type": "", "variables": {"mock_get_records": "", "op": "", "return_value": ""}, "variables_p": {"mock_get_records": [["Dict[str, Any]", 0.11083391630178693], ["mock._patch[Union[mock.AsyncMock, mock.MagicMock]]", 0.10542262095690026], ["Dict[Any, Dict[str, str]]", 0.10019997173828309], ["list", 0.09858679201147298]], "op": [["Dict[Any, str]", 0.16717640505551948], ["list", 0.15182010033130705], ["int", 0.11818710653448526], ["ValueError", 0.09197036935411282], ["DefaultDict[Any, int]", 0.08843054276780313], ["str", 0.0864708118255659]], "return_value": [["rotkehlchen.tests.utils.mock.MockResponse", 0.3410441590033668], ["str", 0.18807357877338707], ["Counter", 0.11263366725434241], ["int", 0.09106229587600748], ["Pattern[str]", 0.0891994916823008], ["Dict[str, List[Any]]", 0.08803664351221102]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[134, 4], [149, 32]], "fn_var_ln": {"mock_get_records": [[140, 8], [140, 24]], "op": [[135, 8], [135, 10]], "return_value": [[148, 8], [148, 37]]}, "fn_var_occur": {"mock_get_records": [["mock_get_records", "mock_hook", "get_connection", "return_value", "get_hook", "return_value", "get_records"], ["mock_get_records", "return_value"], ["mock_get_records", "return_value"], ["mock_get_records", "return_value"]], "op": [["op", "SqlSensor", "task_id", "conn_id", "sql", "success", "x", "x"], ["op", "poke", "None"], ["op", "poke", "None"], ["op", "poke", "None"]], "return_value": [["mock_hook", "get_connection", "return_value", "get_hook", "return_value", "mock", "MagicMock", "spec", "DbApiHook"], ["mock_get_records", "mock_hook", "get_connection", "return_value", "get_hook", "return_value", "get_records"], ["mock_get_records", "return_value"], ["mock_get_records", "return_value"], ["mock_get_records", "return_value"]]}, "name": "test_sql_sensor_postgres_poke_success", "params": {"mock_hook": "", "self": ""}, "params_descr": {"mock_hook": "", "self": ""}, "params_occur": {"mock_hook": [["mock_hook", "get_connection", "return_value", "get_hook", "return_value", "mock", "MagicMock", "spec", "DbApiHook"], ["mock_get_records", "mock_hook", "get_connection", "return_value", "get_hook", "return_value", "get_records"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_hook": [], "self": []}, "q_name": "TestSqlSensor.test_sql_sensor_postgres_poke_success", "ret_exprs": [], "ret_type": "", "variables": {"mock_get_records": "", "op": "", "return_value": ""}, "variables_p": {"mock_get_records": [["Dict[Any, Union[Any, Any]]", 0.10860242601527753], ["mock._patch[Union[mock.AsyncMock, mock.MagicMock]]", 0.10763497732928189], ["Dict[str, Any]", 0.10010465596356989], ["bytes", 0.094748752638684]], "op": [["Dict[str, Literal]", 0.13400454967616574], ["list", 0.1186692711538636], ["Dict[int, str]", 0.10746280562251428], ["Pattern[str]", 0.08912692345969919], ["int", 0.08908317283803575], ["List[Dict]", 0.08657881995701908], ["DefaultDict[Any, int]", 0.08578810253415839]], "return_value": [["rotkehlchen.tests.utils.mock.MockResponse", 0.3410441590033668], ["str", 0.18807357877338707], ["Counter", 0.11263366725434241], ["int", 0.09106229587600748], ["Pattern[str]", 0.0891994916823008], ["Dict[str, List[Any]]", 0.08803664351221102]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[152, 4], [165, 25]], "fn_var_ln": {"mock_get_records": [[158, 8], [158, 24]], "op": [[153, 8], [153, 10]], "return_value": [[163, 8], [163, 37]]}, "fn_var_occur": {"mock_get_records": [["mock_get_records", "mock_hook", "get_connection", "return_value", "get_hook", "return_value", "get_records"], ["mock_get_records", "return_value"], ["mock_get_records", "return_value"]], "op": [["op", "SqlSensor", "task_id", "conn_id", "sql", "failure", "x", "x"], ["op", "poke", "None"], ["op", "poke", "None"]], "return_value": [["mock_hook", "get_connection", "return_value", "get_hook", "return_value", "mock", "MagicMock", "spec", "DbApiHook"], ["mock_get_records", "mock_hook", "get_connection", "return_value", "get_hook", "return_value", "get_records"], ["mock_get_records", "return_value"], ["mock_get_records", "return_value"]]}, "name": "test_sql_sensor_postgres_poke_failure", "params": {"mock_hook": "", "self": ""}, "params_descr": {"mock_hook": "", "self": ""}, "params_occur": {"mock_hook": [["mock_hook", "get_connection", "return_value", "get_hook", "return_value", "mock", "MagicMock", "spec", "DbApiHook"], ["mock_get_records", "mock_hook", "get_connection", "return_value", "get_hook", "return_value", "get_records"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_hook": [], "self": []}, "q_name": "TestSqlSensor.test_sql_sensor_postgres_poke_failure", "ret_exprs": [], "ret_type": "", "variables": {"mock_get_records": "", "op": "", "return_value": ""}, "variables_p": {"mock_get_records": [["Dict[Any, Union[Any, Any]]", 0.10860242601527753], ["mock._patch[Union[mock.AsyncMock, mock.MagicMock]]", 0.10763497732928189], ["Dict[str, Any]", 0.10010465596356989], ["bytes", 0.094748752638684]], "op": [["list", 0.2190079983778886], ["Dict[Any, int]", 0.18435999999090558], ["Dict[str, Literal]", 0.1258455531062821], ["Dict[int, str]", 0.09732146718440358], ["DefaultDict[Any, int]", 0.0969822407975145], ["int", 0.09636518656401177]], "return_value": [["rotkehlchen.tests.utils.mock.MockResponse", 0.3410441590033668], ["str", 0.18807357877338707], ["Counter", 0.11263366725434241], ["int", 0.09106229587600748], ["Pattern[str]", 0.0891994916823008], ["Dict[str, List[Any]]", 0.08803664351221102]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[168, 4], [188, 28]], "fn_var_ln": {"mock_get_records": [[178, 8], [178, 24]], "op": [[169, 8], [169, 10]], "return_value": [[187, 8], [187, 37]]}, "fn_var_occur": {"mock_get_records": [["mock_get_records", "mock_hook", "get_connection", "return_value", "get_hook", "return_value", "get_records"], ["mock_get_records", "return_value"], ["mock_get_records", "return_value"], ["mock_get_records", "return_value"]], "op": [["op", "SqlSensor", "task_id", "conn_id", "sql", "failure", "x", "x", "success", "x", "x"], ["op", "poke", "None"], ["op", "poke", "None"], ["op", "poke", "None"]], "return_value": [["mock_hook", "get_connection", "return_value", "get_hook", "return_value", "mock", "MagicMock", "spec", "DbApiHook"], ["mock_get_records", "mock_hook", "get_connection", "return_value", "get_hook", "return_value", "get_records"], ["mock_get_records", "return_value"], ["mock_get_records", "return_value"], ["mock_get_records", "return_value"]]}, "name": "test_sql_sensor_postgres_poke_failure_success", "params": {"mock_hook": "", "self": ""}, "params_descr": {"mock_hook": "", "self": ""}, "params_occur": {"mock_hook": [["mock_hook", "get_connection", "return_value", "get_hook", "return_value", "mock", "MagicMock", "spec", "DbApiHook"], ["mock_get_records", "mock_hook", "get_connection", "return_value", "get_hook", "return_value", "get_records"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_hook": [], "self": []}, "q_name": "TestSqlSensor.test_sql_sensor_postgres_poke_failure_success", "ret_exprs": [], "ret_type": "", "variables": {"mock_get_records": "", "op": "", "return_value": ""}, "variables_p": {"mock_get_records": [["Dict[Any, Union[Any, Any]]", 0.10860242601527753], ["mock._patch[Union[mock.AsyncMock, mock.MagicMock]]", 0.10763497732928189], ["Dict[str, Any]", 0.10010465596356989], ["bytes", 0.094748752638684]], "op": [["dict", 0.41719578191983064], ["Dict[str, Literal]", 0.14584474753351645], ["Dict[int, str]", 0.09416330043201658], ["list", 0.08908766397118562], ["Pattern[str]", 0.08527469289221401]], "return_value": [["rotkehlchen.tests.utils.mock.MockResponse", 0.3410441590033668], ["str", 0.18807357877338707], ["Counter", 0.11263366725434241], ["int", 0.09106229587600748], ["Pattern[str]", 0.0891994916823008], ["Dict[str, List[Any]]", 0.08803664351221102]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[191, 4], [208, 25]], "fn_var_ln": {"mock_get_records": [[201, 8], [201, 24]], "op": [[192, 8], [192, 10]], "return_value": [[206, 8], [206, 37]]}, "fn_var_occur": {"mock_get_records": [["mock_get_records", "mock_hook", "get_connection", "return_value", "get_hook", "return_value", "get_records"], ["mock_get_records", "return_value"], ["mock_get_records", "return_value"]], "op": [["op", "SqlSensor", "task_id", "conn_id", "sql", "failure", "x", "x", "success", "x", "x"], ["op", "poke", "None"], ["op", "poke", "None"]], "return_value": [["mock_hook", "get_connection", "return_value", "get_hook", "return_value", "mock", "MagicMock", "spec", "DbApiHook"], ["mock_get_records", "mock_hook", "get_connection", "return_value", "get_hook", "return_value", "get_records"], ["mock_get_records", "return_value"], ["mock_get_records", "return_value"]]}, "name": "test_sql_sensor_postgres_poke_failure_success_same", "params": {"mock_hook": "", "self": ""}, "params_descr": {"mock_hook": "", "self": ""}, "params_occur": {"mock_hook": [["mock_hook", "get_connection", "return_value", "get_hook", "return_value", "mock", "MagicMock", "spec", "DbApiHook"], ["mock_get_records", "mock_hook", "get_connection", "return_value", "get_hook", "return_value", "get_records"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_hook": [], "self": []}, "q_name": "TestSqlSensor.test_sql_sensor_postgres_poke_failure_success_same", "ret_exprs": [], "ret_type": "", "variables": {"mock_get_records": "", "op": "", "return_value": ""}, "variables_p": {"mock_get_records": [["Dict[Any, Union[Any, Any]]", 0.10860242601527753], ["mock._patch[Union[mock.AsyncMock, mock.MagicMock]]", 0.10763497732928189], ["Dict[str, Any]", 0.10010465596356989], ["bytes", 0.094748752638684]], "op": [["dict", 0.3771816039684456], ["Dict[Any, int]", 0.18940267791765353], ["Dict[str, Literal]", 0.14800387328078657], ["list", 0.098974662626156], ["Dict[int, str]", 0.09720889808696204], ["Pattern[str]", 0.08922828411999631]], "return_value": [["rotkehlchen.tests.utils.mock.MockResponse", 0.3410441590033668], ["str", 0.18807357877338707], ["Counter", 0.11263366725434241], ["int", 0.09106229587600748], ["Pattern[str]", 0.0891994916823008], ["Dict[str, List[Any]]", 0.08803664351221102]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[211, 4], [225, 83]], "fn_var_ln": {"mock_get_records": [[220, 8], [220, 24]], "op": [[212, 8], [212, 10]], "return_value": [[222, 8], [222, 37]]}, "fn_var_occur": {"mock_get_records": [["mock_get_records", "mock_hook", "get_connection", "return_value", "get_hook", "return_value", "get_records"], ["mock_get_records", "return_value"]], "op": [["op", "SqlSensor", "task_id", "conn_id", "sql", "failure"], ["op", "poke", "None"]], "return_value": [["mock_hook", "get_connection", "return_value", "get_hook", "return_value", "mock", "MagicMock", "spec", "DbApiHook"], ["mock_get_records", "mock_hook", "get_connection", "return_value", "get_hook", "return_value", "get_records"], ["mock_get_records", "return_value"]]}, "name": "test_sql_sensor_postgres_poke_invalid_failure", "params": {"mock_hook": "", "self": ""}, "params_descr": {"mock_hook": "", "self": ""}, "params_occur": {"mock_hook": [["mock_hook", "get_connection", "return_value", "get_hook", "return_value", "mock", "MagicMock", "spec", "DbApiHook"], ["mock_get_records", "mock_hook", "get_connection", "return_value", "get_hook", "return_value", "get_records"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_hook": [], "self": []}, "q_name": "TestSqlSensor.test_sql_sensor_postgres_poke_invalid_failure", "ret_exprs": [], "ret_type": "", "variables": {"mock_get_records": "", "op": "", "return_value": ""}, "variables_p": {"mock_get_records": [["Dict[str, Any]", 0.11083391630178693], ["mock._patch[Union[mock.AsyncMock, mock.MagicMock]]", 0.10542262095690026], ["Dict[Any, Dict[str, str]]", 0.10019997173828309], ["list", 0.09858679201147298]], "op": [["Dict[Any, str]", 0.2552756788977323], ["list", 0.13595002158992975], ["int", 0.1251567827132224], ["DefaultDict[Any, int]", 0.10224342547902113], ["ValueError", 0.09450167531659943], ["dict", 0.08509189296591077]], "return_value": [["rotkehlchen.tests.utils.mock.MockResponse", 0.3410441590033668], ["str", 0.18807357877338707], ["Counter", 0.11263366725434241], ["int", 0.09106229587600748], ["Pattern[str]", 0.0891994916823008], ["Dict[str, List[Any]]", 0.08803664351221102]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[228, 4], [242, 83]], "fn_var_ln": {"mock_get_records": [[237, 8], [237, 24]], "op": [[229, 8], [229, 10]], "return_value": [[239, 8], [239, 37]]}, "fn_var_occur": {"mock_get_records": [["mock_get_records", "mock_hook", "get_connection", "return_value", "get_hook", "return_value", "get_records"], ["mock_get_records", "return_value"]], "op": [["op", "SqlSensor", "task_id", "conn_id", "sql", "success"], ["op", "poke", "None"]], "return_value": [["mock_hook", "get_connection", "return_value", "get_hook", "return_value", "mock", "MagicMock", "spec", "DbApiHook"], ["mock_get_records", "mock_hook", "get_connection", "return_value", "get_hook", "return_value", "get_records"], ["mock_get_records", "return_value"]]}, "name": "test_sql_sensor_postgres_poke_invalid_success", "params": {"mock_hook": "", "self": ""}, "params_descr": {"mock_hook": "", "self": ""}, "params_occur": {"mock_hook": [["mock_hook", "get_connection", "return_value", "get_hook", "return_value", "mock", "MagicMock", "spec", "DbApiHook"], ["mock_get_records", "mock_hook", "get_connection", "return_value", "get_hook", "return_value", "get_records"]], "self": []}, "params_p": {"args": [], "kwargs": [], "mock_hook": [], "self": []}, "q_name": "TestSqlSensor.test_sql_sensor_postgres_poke_invalid_success", "ret_exprs": [], "ret_type": "", "variables": {"mock_get_records": "", "op": "", "return_value": ""}, "variables_p": {"mock_get_records": [["Dict[str, Any]", 0.11083391630178693], ["mock._patch[Union[mock.AsyncMock, mock.MagicMock]]", 0.10542262095690026], ["Dict[Any, Dict[str, str]]", 0.10019997173828309], ["list", 0.09858679201147298]], "op": [["Dict[Any, str]", 0.2552756788977323], ["list", 0.13595002158992975], ["int", 0.1251567827132224], ["DefaultDict[Any, int]", 0.10224342547902113], ["ValueError", 0.09450167531659943], ["dict", 0.08509189296591077]], "return_value": [["rotkehlchen.tests.utils.mock.MockResponse", 0.3410441590033668], ["str", 0.18807357877338707], ["Counter", 0.11263366725434241], ["int", 0.09106229587600748], ["Pattern[str]", 0.0891994916823008], ["Dict[str, List[Any]]", 0.08803664351221102]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[244, 4], [254, 56]], "fn_var_ln": {"hook": [[253, 8], [253, 12]], "op": [[245, 8], [245, 10]]}, "fn_var_occur": {"hook": [["hook", "op", "_get_hook"], ["hook", "log_sql", "op", "hook_params"]], "op": [["op", "SqlSensor", "task_id", "conn_id", "sql", "hook_params", "False"], ["hook", "op", "_get_hook"], ["hook", "log_sql", "op", "hook_params"]]}, "name": "test_sql_sensor_hook_params", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSqlSensor.test_sql_sensor_hook_params", "ret_exprs": [], "ret_type": "", "variables": {"hook": "", "op": ""}, "variables_p": {"hook": [["str", 0.5072790493267554], ["Optional[str]", 0.37646357378557116]], "op": [["int", 0.17302777582163173], ["Dict[str, Union[int, str]]", 0.15130531473596548], ["list", 0.12016031933791997], ["dict", 0.10681188382896498], ["List[str]", 0.09709544170402327], ["List[Tuple[Any, Any, Any]]", 0.09611684788357988], ["Dict[Any, str]", 0.0810659915245217]]}}], "name": "TestSqlSensor", "q_name": "TestSqlSensor", "variables": {}, "variables_p": {}}], "funcs": [], "imports": ["__future__", "annotations", "unittest", "mock", "pytest", "airflow", "exceptions", "AirflowException", "airflow", "models", "dag", "DAG", "airflow", "providers", "common", "sql", "hooks", "sql", "DbApiHook", "airflow", "providers", "common", "sql", "sensors", "sql", "SqlSensor", "airflow", "utils", "timezone", "datetime"], "mod_var_ln": {"DEFAULT_DATE": [[30, 0], [30, 12]], "TEST_DAG_ID": [[31, 0], [31, 11]]}, "mod_var_occur": {"DEFAULT_DATE": [["args", "DEFAULT_DATE"], ["op", "run", "start_date", "DEFAULT_DATE", "end_date", "DEFAULT_DATE", "ignore_ti_state", "True"], ["op1", "run", "start_date", "DEFAULT_DATE", "end_date", "DEFAULT_DATE", "ignore_ti_state", "True"], ["op2", "run", "start_date", "DEFAULT_DATE", "end_date", "DEFAULT_DATE", "ignore_ti_state", "True"], ["op1", "run", "start_date", "DEFAULT_DATE", "end_date", "DEFAULT_DATE", "ignore_ti_state", "True"], ["op2", "run", "start_date", "DEFAULT_DATE", "end_date", "DEFAULT_DATE", "ignore_ti_state", "True"]], "TEST_DAG_ID": [["self", "dag", "DAG", "TEST_DAG_ID", "default_args", "args"]]}, "no_types_annot": {"D": 0, "I": 0, "U": 56}, "session_id": "_zCrnpDLDnuw2q6mSHkr_130OUZY2-osrytGIz2yJmo", "set": null, "tc": [false, null], "type_annot_cove": 0.0, "typed_seq": "", "untyped_seq": "", "variables": {"DEFAULT_DATE": "", "TEST_DAG_ID": ""}, "variables_p": {"DEFAULT_DATE": [["str", 0.2113213303729308], ["datetime.datetime.datetime", 0.20449733327498965], ["datetime.date.time.datetime", 0.19986398789487186], ["datetime.date.time.timedelta", 0.13143043601329274], ["datetime.datetime.date", 0.08433027333862227], ["datetime.datetime", 0.08310045090251132]], "TEST_DAG_ID": [["str", 0.510990168212632], ["int", 0.130662469186746], ["List[dict]", 0.08739774635620655]]}}}