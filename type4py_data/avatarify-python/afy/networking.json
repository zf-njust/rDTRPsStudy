{"error": null, "response": {"classes": [{"cls_lc": [[29, 0], [124, 32]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": "Sends a numpy array with metadata and text message.", "long_descr": "Sends a numpy array with the metadata necessary for reconstructing\nthe array (dtype,shape). Also sends a text msg, often the array or\nimage name.", "ret": null}, "fn_lc": [[38, 4], [59, 58]], "fn_var_ln": {"md": [[53, 8], [53, 10]]}, "fn_var_occur": {"md": [["md", "dict", "msg", "msg", "dtype", "str", "A", "dtype", "shape", "A", "shape"], ["self", "send_json", "md", "flags", "zmq", "SNDMORE"]]}, "name": "send_array", "params": {"A": "", "copy": "", "flags": "", "msg": "", "self": "", "track": ""}, "params_descr": {"A": "numpy array or OpenCV image.", "copy": "(optional) zmq copy flag.", "flags": "(optional) zmq flags.", "msg": "(optional) array name, image name or text message.", "self": "", "track": "(optional) zmq track flag."}, "params_occur": {"A": [["md", "dict", "msg", "msg", "dtype", "str", "A", "dtype", "shape", "A", "shape"], ["self", "send", "A", "flags", "copy", "copy", "track", "track"]], "copy": [["self", "send", "A", "flags", "copy", "copy", "track", "track"]], "flags": [["self", "send_json", "md", "flags", "zmq", "SNDMORE"], ["self", "send", "A", "flags", "copy", "copy", "track", "track"]], "msg": [["md", "dict", "msg", "msg", "dtype", "str", "A", "dtype", "shape", "A", "shape"]], "self": [["self", "send_json", "md", "flags", "zmq", "SNDMORE"], ["self", "send", "A", "flags", "copy", "copy", "track", "track"]], "track": [["self", "send", "A", "flags", "copy", "copy", "track", "track"]]}, "params_p": {"A": [["str", 0.4185142035062951], ["dict", 0.2040704530142433], ["Type", 0.09732472152776217], ["bool", 0.0911299466577831]], "args": [], "copy": [["str", 0.7771087630871029], ["int", 0.13182047566364108], ["Callable", 0.09107076124925609]], "flags": [["str", 0.6032911292527027]], "kwargs": [], "msg": [["str", 0.39919875224969936], ["dict", 0.2077576857197733], ["Type", 0.09638712712347883]], "self": [], "track": [["str", 0.7771087630871029], ["int", 0.13182047566364108], ["Callable", 0.09107076124925609]]}, "q_name": "SerializingSocket.send_array", "ret_exprs": ["return self.send(A, flags, copy=copy, track=track)"], "ret_type": "", "ret_type_p": [["Dict[str, int]", 0.12734120622703432], ["Dict[str, List[str]]", 0.12333776562653269], ["List[Dict[str, Any]]", 0.10812616389395797], ["str", 0.10346120467163265], ["int", 0.0813918568278929], ["List[numpy.ndarray]", 0.08015943313109507]], "variables": {"md": ""}, "variables_p": {"md": [["Dict[str, Tuple[str, Any]]", 0.4734814199490048], ["str", 0.12309161978862236], ["Dict[str, Any]", 0.10968767196331387], ["Dict[str, str]", 0.1031129621957022], ["dict", 0.09606524262845616], ["Dict[str, Union[Any, Any, Any]]", 0.09456108347490073]]}}, {"docstring": {"func": "Send a jpg buffer with a text message.", "long_descr": "Sends a jpg bytestring of an OpenCV image.\nAlso sends text msg, often the image name.", "ret": null}, "fn_lc": [[61, 4], [82, 61]], "fn_var_ln": {"md": [[80, 8], [80, 10]]}, "fn_var_occur": {"md": [["md", "dict", "msg", "msg"], ["self", "send_json", "md", "flags", "zmq", "SNDMORE"]]}, "name": "send_data", "params": {"copy": "", "data": "", "flags": "", "msg": "", "self": "", "track": ""}, "params_descr": {"copy": "(optional) zmq copy flag.", "data": "binary data to be sent.", "flags": "(optional) zmq flags.", "msg": "image name or text message.", "self": "", "track": "(optional) zmq track flag."}, "params_occur": {"copy": [["self", "send", "data", "flags", "copy", "copy", "track", "track"]], "data": [["self", "send", "data", "flags", "copy", "copy", "track", "track"]], "flags": [["self", "send_json", "md", "flags", "zmq", "SNDMORE"], ["self", "send", "data", "flags", "copy", "copy", "track", "track"]], "msg": [["md", "dict", "msg", "msg"]], "self": [["self", "send_json", "md", "flags", "zmq", "SNDMORE"], ["self", "send", "data", "flags", "copy", "copy", "track", "track"]], "track": [["self", "send", "data", "flags", "copy", "copy", "track", "track"]]}, "params_p": {"args": [], "copy": [["str", 0.1915666716074964], ["Optional[str]", 0.14342885298847716], ["List[str]", 0.10804040152665745], ["Union[str, Sequence[str]]", 0.09100538057212938]], "data": [["str", 0.1915666716074964], ["Optional[str]", 0.14342885298847716], ["List[str]", 0.10804040152665745], ["Union[str, Sequence[str]]", 0.09100538057212938]], "flags": [["raiden.utils.Dict[str, raiden.utils.Any]", 0.11569854003196339], ["Optional[TextIO]", 0.0843895333215723], ["bytes", 0.08070271322553088], ["Dict[str, Any]", 0.08070271322553088]], "kwargs": [], "msg": [["dict", 0.206115577090073], ["Mapping", 0.12022314969465438], ["\"ImageStack\"", 0.10606199224217697], ["Dict[str, Any]", 0.09226420476628877]], "self": [], "track": [["str", 0.1915666716074964], ["Optional[str]", 0.14342885298847716], ["List[str]", 0.10804040152665745], ["Union[str, Sequence[str]]", 0.09100538057212938]]}, "q_name": "SerializingSocket.send_data", "ret_exprs": ["return self.send(data, flags, copy=copy, track=track)"], "ret_type": "", "ret_type_p": [["bytes", 0.3847427157185987], ["Optional[float]", 0.10079972528042963], ["dict", 0.08982456655889902]], "variables": {"md": ""}, "variables_p": {"md": [["dict", 0.21767662942456972], ["Dict[str, str]", 0.18572643465448563], ["Dict[str, Tuple[int, str]]", 0.08879805054776813], ["Dict[Any, str]", 0.08799192070421903], ["str", 0.08628566669894236]]}}, {"docstring": {"func": "Receives a numpy array with metadata and text message.", "long_descr": "Receives a numpy array with the metadata necessary\nfor reconstructing the array (dtype,shape).\nReturns the array and a text msg, often the array or image name.", "ret": "image name or text message.\nA: numpy array or OpenCV image reconstructed with dtype and shape."}, "fn_lc": [[84, 4], [104, 50]], "fn_var_ln": {"A": [[103, 8], [103, 9]], "md": [[101, 8], [101, 10]], "msg": [[102, 8], [102, 11]]}, "fn_var_occur": {"A": [["A", "np", "frombuffer", "msg", "dtype", "md"], ["md", "A", "reshape", "md"]], "md": [["md", "self", "recv_json", "flags", "flags"], ["A", "np", "frombuffer", "msg", "dtype", "md"], ["md", "A", "reshape", "md"]], "msg": [["msg", "self", "recv", "flags", "flags", "copy", "copy", "track", "track"], ["A", "np", "frombuffer", "msg", "dtype", "md"]]}, "name": "recv_array", "params": {"copy": "", "flags": "", "self": "", "track": ""}, "params_descr": {"copy": "(optional) zmq copy flag.", "flags": "(optional) zmq flags.", "self": "", "track": "(optional) zmq track flag."}, "params_occur": {"copy": [["msg", "self", "recv", "flags", "flags", "copy", "copy", "track", "track"]], "flags": [["md", "self", "recv_json", "flags", "flags"], ["msg", "self", "recv", "flags", "flags", "copy", "copy", "track", "track"]], "self": [["md", "self", "recv_json", "flags", "flags"], ["msg", "self", "recv", "flags", "flags", "copy", "copy", "track", "track"]], "track": [["msg", "self", "recv", "flags", "flags", "copy", "copy", "track", "track"]]}, "params_p": {"args": [], "copy": [["str", 0.42655664502182733], ["IO[bytes]", 0.11550647976374975], ["bytes", 0.1049426940847095], ["Dict[str, Any]", 0.09058641739361488], ["Union[str, bytes]", 0.08528053109525453]], "flags": [["str", 0.20082712971806788], ["Callable", 0.10326223841242839], ["int", 0.10012218043615514], ["Dict[str, Any]", 0.09733266337536142], ["list", 0.09150857945033038], ["tuple", 0.08451603291991865]], "kwargs": [], "self": [], "track": [["str", 0.42655664502182733], ["IO[bytes]", 0.11550647976374975], ["bytes", 0.1049426940847095], ["Dict[str, Any]", 0.09058641739361488], ["Union[str, bytes]", 0.08528053109525453]]}, "q_name": "SerializingSocket.recv_array", "ret_exprs": ["return (md['msg'], A.reshape(md['shape']))"], "ret_type": "", "ret_type_p": [["utils.Node", 0.09434584804526089], ["str", 0.07736358983374769], ["Tuple[str]", 0.0641452699795729], ["int", 0.06157718437748647]], "variables": {"A": "", "md": "", "msg": ""}, "variables_p": {"A": [["int", 0.05620884218582956], ["str", 0.0470987482809625]], "md": [["float", 0.1653484651287307], ["list", 0.12429852867507046], ["str", 0.09839980113413344], ["List[float]", 0.09123984394688248], ["cmk.gui.utils.html.HTML", 0.08641218206090132]], "msg": [["str", 0.3486749422446647], ["float", 0.27128786608701555], ["int", 0.1792771933858578], ["frozenset[str]", 0.09186139279438688]]}}, {"docstring": {"func": "Receives a jpg buffer and a text msg.", "long_descr": "Receives a jpg bytestring of an OpenCV image.\nAlso receives a text msg, often the image name.", "ret": "image name or text message.\ndata: bytestring, containing data."}, "fn_lc": [[106, 4], [124, 32]], "fn_var_ln": {"data": [[123, 8], [123, 12]], "md": [[122, 8], [122, 10]]}, "fn_var_occur": {"data": [["data", "self", "recv", "flags", "flags", "copy", "copy", "track", "track"], ["md", "data"]], "md": [["md", "self", "recv_json", "flags", "flags"], ["md", "data"]]}, "name": "recv_data", "params": {"copy": "", "flags": "", "self": "", "track": ""}, "params_descr": {"copy": "(optional) zmq copy flag.", "flags": "(optional) zmq flags.", "self": "", "track": "(optional) zmq track flag."}, "params_occur": {"copy": [["data", "self", "recv", "flags", "flags", "copy", "copy", "track", "track"]], "flags": [["md", "self", "recv_json", "flags", "flags"], ["data", "self", "recv", "flags", "flags", "copy", "copy", "track", "track"]], "self": [["md", "self", "recv_json", "flags", "flags"], ["data", "self", "recv", "flags", "flags", "copy", "copy", "track", "track"]], "track": [["data", "self", "recv", "flags", "flags", "copy", "copy", "track", "track"]]}, "params_p": {"args": [], "copy": [["raiden.utils.List[raiden.utils.Tuple[str, int]]", 0.23402478441128013], ["Dict[str, Any]", 0.19141131689661303], ["dict", 0.1765412396595572]], "flags": [["str", 0.3072426870620407], ["int", 0.08893049116101381]], "kwargs": [], "self": [], "track": [["raiden.utils.List[raiden.utils.Tuple[str, int]]", 0.23402478441128013], ["Dict[str, Any]", 0.19141131689661303], ["dict", 0.1765412396595572]]}, "q_name": "SerializingSocket.recv_data", "ret_exprs": ["return (md['msg'], data)"], "ret_type": "", "ret_type_p": [["bool", 0.21439865000586397], ["IO[bytes]", 0.09530431291260645], ["int", 0.09372415107568308], ["dict", 0.08787273338790244], ["bytes", 0.08610899448001086], ["str", 0.08431010012933209]], "variables": {"data": "", "md": ""}, "variables_p": {"data": [["Dict[str, str]", 0.3074165946037555], ["dict", 0.13514532926194978], ["OrderedDict[str, int]", 0.09934045604372417], ["List[str]", 0.09687970388286402], ["Dict[str, Any]", 0.0941194272353897], ["list", 0.09273769800945125], ["Dict[str, Union[Any, Any, Any]]", 0.08747692876444141], ["Tuple[Literal, Literal, Literal]", 0.08688386219842419]], "md": [["int", 0.3806478560950873], ["float", 0.11935214390491276], ["list", 0.11935214390491276], ["List[Callable[[], bool]]", 0.11935214390491276], ["Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]", 0.08709857073005817], ["bool", 0.08709857073005817], ["Type[str]", 0.08709857073005817]]}}], "name": "SerializingSocket", "q_name": "SerializingSocket", "variables": {}, "variables_p": {}}, {"cls_lc": [[127, 0], [128, 37]], "cls_var_ln": {"_socket_class": [[128, 4], [128, 17]]}, "cls_var_occur": {"_socket_class": []}, "funcs": [], "name": "SerializingContext", "q_name": "SerializingContext", "variables": {"_socket_class": ""}, "variables_p": {"_socket_class": [["str", 0.49999999999999994]]}}], "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[10, 0], [26, 27]], "fn_var_ln": {"RCVTIMEO": [[22, 8], [22, 23]], "attr_recv": [[17, 8], [17, 17]], "data": [[15, 8], [15, 12]], "data_recv": [[17, 19], [17, 28]], "old_rcvtimeo": [[11, 4], [11, 16]], "response": [[18, 8], [18, 16]]}, "fn_var_occur": {"RCVTIMEO": [["old_rcvtimeo", "socket", "RCVTIMEO"], ["socket", "RCVTIMEO", "timeout"], ["socket", "RCVTIMEO", "old_rcvtimeo"]], "attr_recv": [["attr_recv", "data_recv", "socket", "recv_data"]], "data": [["data", "msgpack", "packb"], ["socket", "send_data", "data"]], "data_recv": [["attr_recv", "data_recv", "socket", "recv_data"], ["response", "msgpack", "unpackb", "data_recv"]], "old_rcvtimeo": [["old_rcvtimeo", "socket", "RCVTIMEO"], ["socket", "RCVTIMEO", "old_rcvtimeo"]], "response": [["response", "msgpack", "unpackb", "data_recv"], ["log", "response"]]}, "name": "check_connection", "params": {"socket": "", "timeout": ""}, "params_descr": {"socket": "", "timeout": ""}, "params_occur": {"socket": [["old_rcvtimeo", "socket", "RCVTIMEO"], ["socket", "RCVTIMEO", "timeout"], ["socket", "send_data", "data"], ["attr_recv", "data_recv", "socket", "recv_data"], ["socket", "RCVTIMEO", "old_rcvtimeo"]], "timeout": [["socket", "RCVTIMEO", "timeout"]]}, "params_p": {"args": [], "kwargs": [], "socket": [["int", 0.3030208033144333], ["str", 0.1075940921839661]], "timeout": [["int", 0.4], ["str", 0.4], ["float", 0.1]]}, "q_name": "check_connection", "ret_exprs": ["return False", "return response == 'OK'"], "ret_type": "", "ret_type_p": [["bool", 1.0]], "variables": {"RCVTIMEO": "", "attr_recv": "", "data": "", "data_recv": "", "old_rcvtimeo": "", "response": ""}, "variables_p": {"RCVTIMEO": [["int", 0.08256483987187063], ["str", 0.06574221503802082]], "attr_recv": [["str", 0.4112025044884659]], "data": [["str", 0.5064146540806572], ["list", 0.2025658616322629], ["Dict[str, Union[str, Any]]", 0.10509025802123897], ["Tuple[int]", 0.0902636296588618]], "data_recv": [["str", 0.7157964776887755], ["List[Tuple[Any, Any, None]]", 0.2842035223112244]], "old_rcvtimeo": [["int", 0.2880431394311255], ["List[str]", 0.10622509057711664], ["numpy.st3_linux_x64.numpy.lib.polynomial.poly1d", 0.09645900493249349], ["str", 0.09277242143658236], ["bool", 0.09028876315657146]], "response": [["Dict[str, Any]", 0.18839625954178404], ["Dict[str, str]", 0.14907316343230073], ["dict", 0.12436164039736973], ["list", 0.09085505633750107], ["int", 0.08878981490699261], ["bytes", 0.08384417246565781], ["str", 0.0806728004895631]]}}], "imports": ["zmq", "numpy", "np", "msgpack", "msgpack_numpy", "m", "afy", "utils", "log"], "mod_var_ln": {}, "mod_var_occur": {}, "no_types_annot": {"D": 0, "I": 0, "U": 37}, "session_id": "rNmnUpkyAQFIKxjZuxAHRHcrSRzfob6vNuoKIsx99Yo", "set": null, "tc": [false, null], "type_annot_cove": 0.0, "typed_seq": "", "untyped_seq": "", "variables": {}, "variables_p": {}}}