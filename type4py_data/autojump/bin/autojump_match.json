{"error": null, "response": {"classes": [], "funcs": [{"docstring": {"func": "Matches needles anywhere in the path as long as they're in the same (but", "long_descr": "not necessary consecutive) order.\n\nFor example:\n    needles = ['foo', 'baz']\n    regex needle = r'.*foo.*baz.*'\n    haystack = [\n        (path='/foo/bar/baz', weight=10),\n        (path='/baz/foo/bar', weight=10),\n        (path='/foo/baz', weight=10),\n    ]\n\n    result = [\n        (path='/moo/foo/baz', weight=10),\n        (path='/foo/baz', weight=10),\n    ]", "ret": null}, "fn_lc": [[20, 0], [46, 35]], "fn_var_ln": {"found": [[41, 4], [41, 9]], "regex_flags": [[40, 4], [40, 15]], "regex_needle": [[39, 4], [39, 16]]}, "fn_var_occur": {"found": [["found", "haystack", "re", "search", "regex_needle", "haystack", "path", "flags", "regex_flags"], ["ifilter", "found", "haystack"]], "regex_flags": [["regex_flags", "re", "IGNORECASE", "re", "UNICODE", "ignore_case", "re", "UNICODE"], ["found", "haystack", "re", "search", "regex_needle", "haystack", "path", "flags", "regex_flags"]], "regex_needle": [["regex_needle", "join", "imap", "re", "escape", "needles"], ["found", "haystack", "re", "search", "regex_needle", "haystack", "path", "flags", "regex_flags"]]}, "name": "match_anywhere", "params": {"haystack": "", "ignore_case": "", "needles": ""}, "params_descr": {"haystack": "", "ignore_case": "", "needles": ""}, "params_occur": {"haystack": [["found", "haystack", "re", "search", "regex_needle", "haystack", "path", "flags", "regex_flags"], ["ifilter", "found", "haystack"]], "ignore_case": [["regex_flags", "re", "IGNORECASE", "re", "UNICODE", "ignore_case", "re", "UNICODE"]], "needles": [["regex_needle", "join", "imap", "re", "escape", "needles"]]}, "params_p": {"args": [], "haystack": [["str", 0.29511726490169826], ["Tuple[float]", 0.11874614082692034], ["float", 0.1059145549351451], ["Sequence[str]", 0.10431907537612534], ["Optional[str]", 0.09822288272086639], ["bool", 0.09454367152999], ["bytes", 0.09141312358022081]], "ignore_case": [["dict", 0.09033655020186403]], "kwargs": [], "needles": [["str", 0.3893501036009576], ["List[str]", 0.1313086682678714], ["Optional[Dict]", 0.10270081398811534], ["int", 0.09569572950819116], ["bool", 0.09440783984553623], ["Optional[str]", 0.09084111528113717]]}, "q_name": "match_anywhere", "ret_exprs": ["return ifilter(found, haystack)"], "ret_type": "", "ret_type_p": [["int", 0.37184411150088], ["float", 0.10924779703716404], ["List[str]", 0.08998194386492643], ["Optional[int]", 0.08465124789345085]], "variables": {"found": "", "regex_flags": "", "regex_needle": ""}, "variables_p": {"found": [["Set[str]", 0.27549350380144483], ["str", 0.1951788231641271], ["list", 0.18227458162749738], ["Tuple[str, str]", 0.12278073130122054], ["Final[Dict[str, Any]]", 0.1093249845201852]], "regex_flags": [["int", 0.29579495829655755], ["list", 0.09915571513756714], ["float", 0.09696756300170896], ["Tuple[List[Any], List[Any], List[Any], List[Any], List[Any], List[Any], float]", 0.0911309092565894]], "regex_needle": [["str", 0.6855243591945372], ["Tuple[Any, Any]", 0.08627746362003576], ["Tuple[str, str]", 0.08173804307762698], ["List[Tuple[str, str, str]]", 0.07631248707025605], ["int", 0.07014764703754385]]}}, {"docstring": {"func": "Matches consecutive needles at the end of a path.", "long_descr": "For example:\n    needles = ['foo', 'baz']\n    haystack = [\n        (path='/foo/bar/baz', weight=10),\n        (path='/foo/baz/moo', weight=10),\n        (path='/moo/foo/baz', weight=10),\n        (path='/foo/baz', weight=10),\n    ]\n\n    # We can't actually use re.compile because of re.UNICODE\n    regex_needle = re.compile(r'''\n        foo     # needle #1\n        [^/]*   # all characters except os.sep zero or more times\n        /       # os.sep\n        [^/]*   # all characters except os.sep zero or more times\n        baz     # needle #2\n        [^/]*   # all characters except os.sep zero or more times\n        $       # end of string\n        ''')\n\n    result = [\n        (path='/moo/foo/baz', weight=10),\n        (path='/foo/baz', weight=10),\n    ]", "ret": null}, "fn_lc": [[49, 0], [88, 35]], "fn_var_ln": {"found": [[83, 4], [83, 9]], "regex_flags": [[82, 4], [82, 15]], "regex_needle": [[81, 4], [81, 16]], "regex_no_sep": [[78, 4], [78, 16]], "regex_no_sep_end": [[79, 4], [79, 20]], "regex_one_sep": [[80, 4], [80, 17]]}, "fn_var_occur": {"found": [["found", "entry", "re", "search", "regex_needle", "entry", "path", "flags", "regex_flags"], ["ifilter", "found", "haystack"]], "regex_flags": [["regex_flags", "re", "IGNORECASE", "re", "UNICODE", "ignore_case", "re", "UNICODE"], ["found", "entry", "re", "search", "regex_needle", "entry", "path", "flags", "regex_flags"]], "regex_needle": [["regex_needle", "regex_one_sep", "join", "imap", "re", "escape", "needles", "regex_no_sep_end"], ["found", "entry", "re", "search", "regex_needle", "entry", "path", "flags", "regex_flags"]], "regex_no_sep": [["regex_no_sep", "os", "sep"], ["regex_no_sep_end", "regex_no_sep"], ["regex_one_sep", "regex_no_sep", "os", "sep", "regex_no_sep"]], "regex_no_sep_end": [["regex_no_sep_end", "regex_no_sep"], ["regex_needle", "regex_one_sep", "join", "imap", "re", "escape", "needles", "regex_no_sep_end"]], "regex_one_sep": [["regex_one_sep", "regex_no_sep", "os", "sep", "regex_no_sep"], ["regex_needle", "regex_one_sep", "join", "imap", "re", "escape", "needles", "regex_no_sep_end"]]}, "name": "match_consecutive", "params": {"haystack": "", "ignore_case": "", "needles": ""}, "params_descr": {"haystack": "", "ignore_case": "", "needles": ""}, "params_occur": {"haystack": [["ifilter", "found", "haystack"]], "ignore_case": [["regex_flags", "re", "IGNORECASE", "re", "UNICODE", "ignore_case", "re", "UNICODE"]], "needles": [["regex_needle", "regex_one_sep", "join", "imap", "re", "escape", "needles", "regex_no_sep_end"]]}, "params_p": {"args": [], "haystack": [["IO[str]", 0.11111111109162798], ["Dict[str, Any]", 0.11111111109162798], ["str", 0.11111111109162798]], "ignore_case": [["dict", 0.09033655020186403]], "kwargs": [], "needles": [["str", 0.5474990509439425], ["int", 0.09728236493801404], ["bool", 0.09151887929245947]]}, "q_name": "match_consecutive", "ret_exprs": ["return ifilter(found, haystack)"], "ret_type": "", "ret_type_p": [["int", 0.37184411150088], ["float", 0.10924779703716404], ["List[str]", 0.08998194386492643], ["Optional[int]", 0.08465124789345085]], "variables": {"found": "", "regex_flags": "", "regex_needle": "", "regex_no_sep": "", "regex_no_sep_end": "", "regex_one_sep": ""}, "variables_p": {"found": [["Set[str]", 0.27549350380144483], ["str", 0.1951788231641271], ["list", 0.18227458162749738], ["Tuple[str, str]", 0.12278073130122054], ["Final[Dict[str, Any]]", 0.1093249845201852]], "regex_flags": [["int", 0.29579495829655755], ["list", 0.09915571513756714], ["float", 0.09696756300170896], ["Tuple[List[Any], List[Any], List[Any], List[Any], List[Any], List[Any], float]", 0.0911309092565894]], "regex_needle": [["str", 0.6057988214226601]], "regex_no_sep": [["int", 0.46700487553124115], ["float", 0.24134629526500292], ["List[float]", 0.1851883870288469], ["list", 0.10646044217490898]], "regex_no_sep_end": [["str", 0.30631606621017715], ["bytes", 0.09089710972165584]], "regex_one_sep": [["str", 0.4140394018769184], ["List[str]", 0.09131996373964008], ["float", 0.07592256394215095]]}}, {"docstring": {"func": "Performs an approximate match with the last needle against the end of", "long_descr": "every path past an acceptable threshold.\n\nFor example:\n    needles = ['foo', 'bar']\n    haystack = [\n        (path='/foo/bar/baz', weight=11),\n        (path='/foo/baz/moo', weight=10),\n        (path='/moo/foo/baz', weight=10),\n        (path='/foo/baz', weight=10),\n        (path='/foo/bar', weight=10),\n    ]\n\nresult = [\n        (path='/foo/bar/baz', weight=11),\n        (path='/moo/foo/baz', weight=10),\n        (path='/foo/baz', weight=10),\n        (path='/foo/bar', weight=10),\n    ]\n\nThis is a weak heuristic and used as a last resort to find matches.", "ret": null}, "fn_lc": [[91, 0], [127, 45]], "fn_var_ln": {"end_dir": [[115, 4], [115, 11]], "match_percent": [[123, 8], [123, 21]], "meets_threshold": [[126, 4], [126, 19]], "needle": [[122, 8], [122, 14]]}, "fn_var_occur": {"end_dir": [["end_dir", "path", "last", "os", "path", "split", "path"], ["match_percent", "entry", "SequenceMatcher", "a", "needle", "b", "end_dir", "entry", "path", "lower", "ratio"], ["match_percent", "entry", "SequenceMatcher", "a", "needle", "b", "end_dir", "entry", "path", "ratio"]], "match_percent": [["match_percent", "entry", "SequenceMatcher", "a", "needle", "b", "end_dir", "entry", "path", "lower", "ratio"], ["match_percent", "entry", "SequenceMatcher", "a", "needle", "b", "end_dir", "entry", "path", "ratio"], ["meets_threshold", "entry", "match_percent", "entry", "threshold"]], "meets_threshold": [["meets_threshold", "entry", "match_percent", "entry", "threshold"], ["ifilter", "meets_threshold", "haystack"]], "needle": [["needle", "last", "needles", "lower"], ["match_percent", "entry", "SequenceMatcher", "a", "needle", "b", "end_dir", "entry", "path", "lower", "ratio"], ["needle", "last", "needles"], ["match_percent", "entry", "SequenceMatcher", "a", "needle", "b", "end_dir", "entry", "path", "ratio"]]}, "name": "match_fuzzy", "params": {"haystack": "", "ignore_case": "", "needles": "", "threshold": ""}, "params_descr": {"haystack": "", "ignore_case": "", "needles": "", "threshold": ""}, "params_occur": {"haystack": [["ifilter", "meets_threshold", "haystack"]], "ignore_case": [], "needles": [["needle", "last", "needles", "lower"], ["needle", "last", "needles"]], "threshold": [["meets_threshold", "entry", "match_percent", "entry", "threshold"]]}, "params_p": {"args": [], "haystack": [["IO[str]", 0.11111111109162798], ["Dict[str, Any]", 0.11111111109162798], ["str", 0.11111111109162798]], "ignore_case": [["dict", 0.2499999996677941], ["List[int]", 2.7440663790791445e-10], ["List[str]", 2.4892649344385343e-10]], "kwargs": [], "needles": [["str", 0.6029611025527984], ["List[int]", 0.2866750385124074]], "threshold": [["float", 0.2106124121924088], ["int", 0.10433381333808446], ["List[str]", 0.0889112245353483]]}, "q_name": "match_fuzzy", "ret_exprs": ["return ifilter(meets_threshold, haystack)"], "ret_type": "", "ret_type_p": [["IO[str]", 0.11111111109162798], ["Dict[str, Any]", 0.11111111109162798], ["str", 0.11111111109162798]], "variables": {"end_dir": "", "match_percent": "", "meets_threshold": "", "needle": ""}, "variables_p": {"end_dir": [["str", 1.0]], "match_percent": [["str", 0.27344097257507854], ["Pattern[str]", 0.20126730924229858], ["int", 0.14905083177166367], ["Union[Literal, Literal]", 0.09158528879003398]], "meets_threshold": [["List[str]", 0.38214715214808265], ["list", 0.11584433306091278], ["Dict[str, bool]", 0.10931020297282427], ["bool", 0.10931020297282427], ["dict", 0.10149680939518382], ["Tuple[str, str, str, str, str, str, str, str]", 0.09094564972508612], ["Tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str]", 0.09094564972508612]], "needle": [["Dict[str, str]", 0.10462396145098779], ["str", 0.095244284538942]]}}], "imports": ["os", "re", "difflib", "SequenceMatcher", "autojump_utils", "is_python3", "autojump_utils", "last", "itertools", "ifilter", "itertools", "imap"], "mod_var_ln": {"getcwdu": [[14, 4], [14, 14]], "ifilter": [[12, 4], [12, 11]], "imap": [[13, 4], [13, 8]]}, "mod_var_occur": {"getcwdu": [], "ifilter": [["itertools", "ifilter"], ["ifilter", "found", "haystack"], ["ifilter", "found", "haystack"], ["ifilter", "meets_threshold", "haystack"]], "imap": [["itertools", "imap"], ["regex_needle", "join", "imap", "re", "escape", "needles"], ["regex_needle", "regex_one_sep", "join", "imap", "re", "escape", "needles", "regex_no_sep_end"]]}, "no_types_annot": {"D": 0, "I": 0, "U": 29}, "session_id": "LO2K_f_iftuV9Noude28BDllCNsuFpfdhbkTy109Gpk", "set": null, "tc": [false, null], "type_annot_cove": 0.0, "typed_seq": "", "untyped_seq": "", "variables": {"getcwdu": "", "ifilter": "", "imap": ""}, "variables_p": {"getcwdu": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "ifilter": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["str", 0.1]], "imap": [["str", 0.8220747096258514], ["int", 0.08420668436044962]]}}}