{"error": null, "response": {"classes": [{"cls_lc": [[18, 0], [23, 26]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[20, 4], [23, 26]], "fn_var_ln": {"left": [[22, 8], [22, 17]], "right": [[23, 8], [23, 18]], "val": [[21, 8], [21, 16]]}, "fn_var_occur": {"left": [["self", "left", "left"]], "right": [["self", "right", "right"]], "val": [["self", "val", "val"]]}, "name": "__init__", "params": {"left": "", "right": "", "self": "", "val": ""}, "params_descr": {"left": "", "right": "", "self": "", "val": ""}, "params_occur": {"left": [["self", "left", "left"]], "right": [["self", "right", "right"]], "self": [["self", "val", "val"], ["self", "left", "left"], ["self", "right", "right"]], "val": [["self", "val", "val"]]}, "params_p": {"args": [], "kwargs": [], "left": [["int", 0.3], ["bool", 0.09999999999999999], ["float", 0.09999999999999999]], "right": [["int", 0.3], ["bool", 0.09999999999999999], ["float", 0.09999999999999999]], "self": [], "val": [["int", 0.3], ["bool", 0.09999999999999999], ["float", 0.09999999999999999]]}, "q_name": "Node.__init__", "ret_exprs": [], "ret_type": "", "variables": {"left": "", "right": "", "val": ""}, "variables_p": {"left": [["str", 0.30000000000000004], ["Dict[str, Any]", 0.1], ["dict", 0.1], ["int", 0.1]], "right": [["str", 0.30000000000000004], ["Dict[str, Any]", 0.1], ["dict", 0.1], ["int", 0.1]], "val": [["str", 0.30000000000000004], ["Dict[str, Any]", 0.1], ["dict", 0.1], ["int", 0.1]]}}], "name": "Node", "q_name": "Node", "variables": {}, "variables_p": {}}, {"cls_lc": [[26, 0], [41, 77]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[28, 4], [31, 78]], "fn_var_ln": {"tree": [[29, 8], [29, 12]]}, "fn_var_occur": {"tree": [["tree", "create_tree"], ["self", "assertEqual", "preorder", "tree"], ["self", "assertEqual", "preorder_rec", "tree"]]}, "name": "test_preorder", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "preorder", "tree"], ["self", "assertEqual", "preorder_rec", "tree"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestTraversal.test_preorder", "ret_exprs": [], "ret_type": "", "variables": {"tree": ""}, "variables_p": {"tree": [["Iterator[Any]", 0.08478370299229004]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[33, 4], [36, 79]], "fn_var_ln": {"tree": [[34, 8], [34, 12]]}, "fn_var_occur": {"tree": [["tree", "create_tree"], ["self", "assertEqual", "postorder", "tree"], ["self", "assertEqual", "postorder_rec", "tree"]]}, "name": "test_postorder", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "postorder", "tree"], ["self", "assertEqual", "postorder_rec", "tree"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestTraversal.test_postorder", "ret_exprs": [], "ret_type": "", "variables": {"tree": ""}, "variables_p": {"tree": [["Iterator[Any]", 0.08478370299229004]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[38, 4], [41, 77]], "fn_var_ln": {"tree": [[39, 8], [39, 12]]}, "fn_var_occur": {"tree": [["tree", "create_tree"], ["self", "assertEqual", "inorder", "tree"], ["self", "assertEqual", "inorder_rec", "tree"]]}, "name": "test_inorder", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "inorder", "tree"], ["self", "assertEqual", "inorder_rec", "tree"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestTraversal.test_inorder", "ret_exprs": [], "ret_type": "", "variables": {"tree": ""}, "variables_p": {"tree": [["Iterator[Any]", 0.08478370299229004]]}}], "name": "TestTraversal", "q_name": "TestTraversal", "variables": {}, "variables_p": {}}, {"cls_lc": [[58, 0], [113, 49]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[61, 4], [65, 25]], "fn_var_ln": {"random": [[64, 8], [64, 18]], "range": [[65, 8], [65, 17]]}, "fn_var_occur": {"random": [["random", "seed"], ["cls", "random", "random"]], "range": [["cls", "range"]]}, "name": "setUpClass", "params": {"cls": ""}, "params_descr": {"cls": ""}, "params_occur": {"cls": [["cls", "random", "random"], ["cls", "range"]]}, "params_p": {"args": [], "cls": [["int", 0.29539209120916865], ["Iterable[T]", 0.10443648007443868], ["T", 0.09716410983940517], ["Warning", 0.09710686737334213], ["Callable", 0.09690040371694938]], "kwargs": [], "self": []}, "q_name": "TestBTree.setUpClass", "ret_exprs": [], "ret_type": "", "variables": {"random": "", "range": ""}, "variables_p": {"random": [["Type[Dict[str, Any]]", 0.28263877908453927], ["Type[Optional[Any]]", 0.11254808992690424], ["Type[Tuple[str, int]]", 0.11180136648865367], ["frozenset[str]", 0.10454087608111728], ["Type[Callable[Any, Any]]", 0.09792327579380777], ["Type[bool]", 0.09787860453292581], ["Type[List[str]]", 0.09688757191032522], ["Type[str]", 0.0957814361817268]], "range": [["Type[range]", 0.3749999999474588], ["Type[Iterator[int]]", 0.24999999996497255], ["float", 0.12499999998248627], ["tuple", 7.005485258072615e-11]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[67, 4], [69, 58]], "fn_var_ln": {"keys_to_insert": [[68, 8], [68, 27]]}, "fn_var_occur": {"keys_to_insert": [["self", "keys_to_insert", "self", "random", "randrange", "self", "range", "self", "range", "i", "range", "self", "range"]]}, "name": "setUp", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "keys_to_insert", "self", "random", "randrange", "self", "range", "self", "range", "i", "range", "self", "range"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestBTree.setUp", "ret_exprs": [], "ret_type": "", "variables": {"keys_to_insert": ""}, "variables_p": {"keys_to_insert": [["int", 0.5814846355765143], ["Union[int, str]", 0.09169239193514399], ["str", 0.08394155368430593], ["Dict[str, int]", 0.07787450166220675], ["list", 0.07712264257493223]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[71, 4], [78, 44]], "fn_var_ln": {"btree": [[72, 8], [72, 13]], "key": [[77, 12], [77, 15]]}, "fn_var_occur": {"btree": [["btree", "BTree"], ["btree", "insert_key", "i"], ["self", "assertTrue", "btree", "find", "key"]], "key": [["key", "self", "random", "choice", "self", "keys_to_insert"], ["self", "assertTrue", "btree", "find", "key"]]}, "name": "test_insertion_and_find_even_degree", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "keys_to_insert"], ["key", "self", "random", "choice", "self", "keys_to_insert"], ["self", "assertTrue", "btree", "find", "key"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestBTree.test_insertion_and_find_even_degree", "ret_exprs": [], "ret_type": "", "variables": {"btree": "", "key": ""}, "variables_p": {"btree": [["dict", 0.5099229794174522], ["str", 0.10201952078939043], ["Dict[str, str]", 0.098552216217807]], "key": [["str", 0.4130295433008367], ["Pattern[str]", 0.2927226165439656], ["Dict[str, Tuple[int, int]]", 0.10352491048685404], ["list", 0.0941690266519095]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[80, 4], [87, 44]], "fn_var_ln": {"btree": [[81, 8], [81, 13]], "key": [[86, 12], [86, 15]]}, "fn_var_occur": {"btree": [["btree", "BTree"], ["btree", "insert_key", "i"], ["self", "assertTrue", "btree", "find", "key"]], "key": [["key", "self", "random", "choice", "self", "keys_to_insert"], ["self", "assertTrue", "btree", "find", "key"]]}, "name": "test_insertion_and_find_odd_degree", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "keys_to_insert"], ["key", "self", "random", "choice", "self", "keys_to_insert"], ["self", "assertTrue", "btree", "find", "key"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestBTree.test_insertion_and_find_odd_degree", "ret_exprs": [], "ret_type": "", "variables": {"btree": "", "key": ""}, "variables_p": {"btree": [["dict", 0.5099229794174522], ["str", 0.10201952078939043], ["Dict[str, str]", 0.098552216217807]], "key": [["str", 0.4130295433008367], ["Pattern[str]", 0.2927226165439656], ["Dict[str, Tuple[int, int]]", 0.10352491048685404], ["list", 0.0941690266519095]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[89, 4], [100, 49]], "fn_var_ln": {"btree": [[90, 8], [90, 13]], "key_list": [[91, 8], [91, 16]]}, "fn_var_occur": {"btree": [["btree", "BTree"], ["btree", "insert_key", "i"], ["btree", "remove_key", "key"], ["self", "assertFalse", "btree", "find", "key"], ["self", "assertEqual", "btree", "root", "keys"], ["self", "assertEqual", "btree", "root", "children"]], "key_list": [["key_list", "set", "self", "keys_to_insert"]]}, "name": "test_deletion_even_degree", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["key_list", "set", "self", "keys_to_insert"], ["self", "assertFalse", "btree", "find", "key"], ["self", "assertEqual", "btree", "root", "keys"], ["self", "assertEqual", "btree", "root", "children"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestBTree.test_deletion_even_degree", "ret_exprs": [], "ret_type": "", "variables": {"btree": "", "key_list": ""}, "variables_p": {"btree": [["DefaultDict[str, DefaultDict[str, Any]]", 0.20901531048864355]], "key_list": [["list", 0.81776743998833], ["List[Tuple[Any, Any]]", 0.09165323454635309], ["List[str]", 0.09057932546531691]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[102, 4], [113, 49]], "fn_var_ln": {"btree": [[103, 8], [103, 13]], "key_list": [[104, 8], [104, 16]]}, "fn_var_occur": {"btree": [["btree", "BTree"], ["btree", "insert_key", "i"], ["btree", "remove_key", "key"], ["self", "assertFalse", "btree", "find", "key"], ["self", "assertEqual", "btree", "root", "keys"], ["self", "assertEqual", "btree", "root", "children"]], "key_list": [["key_list", "set", "self", "keys_to_insert"]]}, "name": "test_deletion_odd_degree", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["key_list", "set", "self", "keys_to_insert"], ["self", "assertFalse", "btree", "find", "key"], ["self", "assertEqual", "btree", "root", "keys"], ["self", "assertEqual", "btree", "root", "children"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestBTree.test_deletion_odd_degree", "ret_exprs": [], "ret_type": "", "variables": {"btree": "", "key_list": ""}, "variables_p": {"btree": [["DefaultDict[str, DefaultDict[str, Any]]", 0.20901531048864355]], "key_list": [["list", 0.81776743998833], ["List[Tuple[Any, Any]]", 0.09165323454635309], ["List[str]", 0.09057932546531691]]}}], "name": "TestBTree", "q_name": "TestBTree", "variables": {}, "variables_p": {}}, {"cls_lc": [[116, 0], [144, 50]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[117, 4], [144, 50]], "fn_var_ln": {"post1": [[122, 8], [122, 13]], "post2": [[131, 8], [131, 13]], "post3": [[140, 8], [140, 13]], "pre1": [[121, 8], [121, 12]], "pre2": [[130, 8], [130, 12]], "pre3": [[139, 8], [139, 12]], "pre_index": [[138, 8], [138, 22]], "size1": [[123, 8], [123, 13]], "size2": [[132, 8], [132, 13]], "size3": [[141, 8], [141, 13]]}, "fn_var_occur": {"post1": [["self", "assertEqual", "ctpp", "construct_tree", "pre1", "post1", "size1"]], "post2": [["self", "assertEqual", "ctpp", "construct_tree", "pre2", "post2", "size2"]], "post3": [["self", "assertEqual", "ctpp", "construct_tree", "pre3", "post3", "size3"]], "pre1": [["size1", "len", "pre1"], ["self", "assertEqual", "ctpp", "construct_tree", "pre1", "post1", "size1"]], "pre2": [["size2", "len", "pre2"], ["self", "assertEqual", "ctpp", "construct_tree", "pre2", "post2", "size2"]], "pre3": [["size3", "len", "pre3"], ["self", "assertEqual", "ctpp", "construct_tree", "pre3", "post3", "size3"]], "pre_index": [["ctpp", "pre_index"], ["ctpp", "pre_index"], ["ctpp", "pre_index"]], "size1": [["size1", "len", "pre1"], ["self", "assertEqual", "ctpp", "construct_tree", "pre1", "post1", "size1"]], "size2": [["size2", "len", "pre2"], ["self", "assertEqual", "ctpp", "construct_tree", "pre2", "post2", "size2"]], "size3": [["size3", "len", "pre3"], ["self", "assertEqual", "ctpp", "construct_tree", "pre3", "post3", "size3"]]}, "name": "test_construct_tree", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "ctpp", "construct_tree", "pre1", "post1", "size1"], ["self", "assertEqual", "ctpp", "construct_tree", "pre2", "post2", "size2"], ["self", "assertEqual", "ctpp", "construct_tree", "pre3", "post3", "size3"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestConstructTreePreorderPostorder.test_construct_tree", "ret_exprs": [], "ret_type": "", "variables": {"post1": "", "post2": "", "post3": "", "pre1": "", "pre2": "", "pre3": "", "pre_index": "", "size1": "", "size2": "", "size3": ""}, "variables_p": {"post1": [["Dict[str, Any]", 0.3018946591076425], ["list", 0.19769779978985638], ["Dict[int, str]", 0.13499971733129543], ["dict", 0.10211536493413745], ["Callable[[List[Any]], List[Any]]", 0.0899988634229753], ["Dict[int, Any]", 0.08855733234516619], ["List[Dict]", 0.08473626306892684]], "post2": [["Dict[str, Any]", 0.3018946591076425], ["list", 0.19769779978985638], ["Dict[int, str]", 0.13499971733129543], ["dict", 0.10211536493413745], ["Callable[[List[Any]], List[Any]]", 0.0899988634229753], ["Dict[int, Any]", 0.08855733234516619], ["List[Dict]", 0.08473626306892684]], "post3": [["Dict[str, Any]", 0.3018946591076425], ["list", 0.19769779978985638], ["Dict[int, str]", 0.13499971733129543], ["dict", 0.10211536493413745], ["Callable[[List[Any]], List[Any]]", 0.0899988634229753], ["Dict[int, Any]", 0.08855733234516619], ["List[Dict]", 0.08473626306892684]], "pre1": [["list", 0.4338759027885995], ["List[List[str]]", 0.17629778509637345], ["bytearray", 0.11078975343341145], ["List[Tuple[str, Any, Any]]", 0.10403923982899513], ["List[int]", 0.08986987360885072], ["int", 0.08512744524376982]], "pre2": [["list", 0.4338759027885995], ["List[List[str]]", 0.17629778509637345], ["bytearray", 0.11078975343341145], ["List[Tuple[str, Any, Any]]", 0.10403923982899513], ["List[int]", 0.08986987360885072], ["int", 0.08512744524376982]], "pre3": [["list", 0.4338759027885995], ["List[List[str]]", 0.17629778509637345], ["bytearray", 0.11078975343341145], ["List[Tuple[str, Any, Any]]", 0.10403923982899513], ["List[int]", 0.08986987360885072], ["int", 0.08512744524376982]], "pre_index": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["str", 0.1]], "size1": [["list", 0.5804466487117791], ["int", 0.2221942955380109], ["tuple", 0.10396376463900435], ["str", 0.09339529111120573]], "size2": [["list", 0.5804466487117791], ["int", 0.2221942955380109], ["tuple", 0.10396376463900435], ["str", 0.09339529111120573]], "size3": [["list", 0.5804466487117791], ["int", 0.2221942955380109], ["tuple", 0.10396376463900435], ["str", 0.09339529111120573]]}}], "name": "TestConstructTreePreorderPostorder", "q_name": "TestConstructTreePreorderPostorder", "variables": {}, "variables_p": {}}, {"cls_lc": [[147, 0], [176, 53]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[148, 4], [156, 53]], "fn_var_ln": {"bit_tree": [[151, 8], [151, 16]], "freq": [[149, 8], [149, 12]], "ft": [[150, 8], [150, 10]]}, "fn_var_occur": {"bit_tree": [["bit_tree", "ft", "construct"], ["self", "assertEqual", "ft", "get_sum", "bit_tree"], ["ft", "update_bit", "bit_tree"], ["self", "assertEqual", "ft", "get_sum", "bit_tree"]], "freq": [["ft", "Fenwick_Tree", "freq"]], "ft": [["ft", "Fenwick_Tree", "freq"], ["bit_tree", "ft", "construct"], ["self", "assertEqual", "ft", "get_sum", "bit_tree"], ["ft", "update_bit", "bit_tree"], ["self", "assertEqual", "ft", "get_sum", "bit_tree"]]}, "name": "test_construct_tree_with_update_1", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "ft", "get_sum", "bit_tree"], ["self", "assertEqual", "ft", "get_sum", "bit_tree"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestFenwickTree.test_construct_tree_with_update_1", "ret_exprs": [], "ret_type": "", "variables": {"bit_tree": "", "freq": "", "ft": ""}, "variables_p": {"bit_tree": [], "freq": [["float", 0.19759622502648602], ["str", 0.12689195152586874], ["Generator[Any, None, None]", 0.09650168906394932]], "ft": [["Dict[str, List[Any]]", 0.09202638048661028]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[158, 4], [166, 52]], "fn_var_ln": {"bit_tree": [[161, 8], [161, 16]], "freq": [[159, 8], [159, 12]], "ft": [[160, 8], [160, 10]]}, "fn_var_occur": {"bit_tree": [["bit_tree", "ft", "construct"], ["self", "assertEqual", "ft", "get_sum", "bit_tree"], ["ft", "update_bit", "bit_tree"], ["self", "assertEqual", "ft", "get_sum", "bit_tree"]], "freq": [["ft", "Fenwick_Tree", "freq"]], "ft": [["ft", "Fenwick_Tree", "freq"], ["bit_tree", "ft", "construct"], ["self", "assertEqual", "ft", "get_sum", "bit_tree"], ["ft", "update_bit", "bit_tree"], ["self", "assertEqual", "ft", "get_sum", "bit_tree"]]}, "name": "test_construct_tree_with_update_2", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "ft", "get_sum", "bit_tree"], ["self", "assertEqual", "ft", "get_sum", "bit_tree"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestFenwickTree.test_construct_tree_with_update_2", "ret_exprs": [], "ret_type": "", "variables": {"bit_tree": "", "freq": "", "ft": ""}, "variables_p": {"bit_tree": [], "freq": [["float", 0.19759622502648602], ["str", 0.12689195152586874], ["Generator[Any, None, None]", 0.09650168906394932]], "ft": [["Dict[str, List[Any]]", 0.09202638048661028]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[168, 4], [176, 53]], "fn_var_ln": {"bit_tree": [[171, 8], [171, 16]], "freq": [[169, 8], [169, 12]], "ft": [[170, 8], [170, 10]]}, "fn_var_occur": {"bit_tree": [["bit_tree", "ft", "construct"], ["self", "assertEqual", "ft", "get_sum", "bit_tree"], ["ft", "update_bit", "bit_tree"], ["self", "assertEqual", "ft", "get_sum", "bit_tree"]], "freq": [["ft", "Fenwick_Tree", "freq"]], "ft": [["ft", "Fenwick_Tree", "freq"], ["bit_tree", "ft", "construct"], ["self", "assertEqual", "ft", "get_sum", "bit_tree"], ["ft", "update_bit", "bit_tree"], ["self", "assertEqual", "ft", "get_sum", "bit_tree"]]}, "name": "test_construct_tree_with_update_3", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "ft", "get_sum", "bit_tree"], ["self", "assertEqual", "ft", "get_sum", "bit_tree"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestFenwickTree.test_construct_tree_with_update_3", "ret_exprs": [], "ret_type": "", "variables": {"bit_tree": "", "freq": "", "ft": ""}, "variables_p": {"bit_tree": [], "freq": [["float", 0.19759622502648602], ["str", 0.12689195152586874], ["Generator[Any, None, None]", 0.09650168906394932]], "ft": [["Dict[str, List[Any]]", 0.09202638048661028]]}}], "name": "TestFenwickTree", "q_name": "TestFenwickTree", "variables": {}, "variables_p": {}}], "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[44, 0], [55, 13]], "fn_var_ln": {"left": [[54, 7], [54, 11]], "n1": [[45, 4], [45, 6]], "n2": [[46, 4], [46, 6]], "n3": [[47, 4], [47, 6]], "n4": [[48, 4], [48, 6]], "n5": [[49, 4], [49, 6]], "n6": [[50, 4], [50, 6]], "n7": [[51, 4], [51, 6]], "right": [[54, 16], [54, 21]]}, "fn_var_occur": {"left": [["n1", "left", "n1", "right", "n2", "n3"], ["n2", "left", "n2", "right", "n4", "n5"], ["n3", "left", "n3", "right", "n6", "n7"]], "n1": [["n1", "Node"], ["n1", "left", "n1", "right", "n2", "n3"]], "n2": [["n2", "Node"], ["n1", "left", "n1", "right", "n2", "n3"], ["n2", "left", "n2", "right", "n4", "n5"]], "n3": [["n3", "Node"], ["n1", "left", "n1", "right", "n2", "n3"], ["n3", "left", "n3", "right", "n6", "n7"]], "n4": [["n4", "Node"], ["n2", "left", "n2", "right", "n4", "n5"]], "n5": [["n5", "Node"], ["n2", "left", "n2", "right", "n4", "n5"]], "n6": [["n6", "Node"], ["n3", "left", "n3", "right", "n6", "n7"]], "n7": [["n7", "Node"], ["n3", "left", "n3", "right", "n6", "n7"]], "right": [["n1", "left", "n1", "right", "n2", "n3"], ["n2", "left", "n2", "right", "n4", "n5"], ["n3", "left", "n3", "right", "n6", "n7"]]}, "name": "create_tree", "params": {}, "params_descr": {}, "params_occur": {}, "params_p": {"args": [], "kwargs": []}, "q_name": "create_tree", "ret_exprs": ["return n1"], "ret_type": "", "ret_type_p": [["str", 0.5295262220771823], ["int", 0.2591204962210215], ["dict", 0.12992491584385393], ["float", 0.0814283658579424]], "variables": {"left": "", "n1": "", "n2": "", "n3": "", "n4": "", "n5": "", "n6": "", "n7": "", "right": ""}, "variables_p": {"left": [["int", 0.3740831357494168], ["Dict[int, int]", 0.34371232428521603], ["str", 0.07104559349324441], ["deque[int]", 0.05423901172937066]], "n1": [["int", 0.6935067512586002], ["list", 0.0765948570506911]], "n2": [["int", 0.6951403336839355], ["list", 0.09373833502447014]], "n3": [["int", 0.6951403336839355], ["list", 0.09373833502447014]], "n4": [["int", 0.6935067512586002], ["list", 0.0765948570506911]], "n5": [["int", 0.6935067512586002], ["list", 0.0765948570506911]], "n6": [["int", 0.6935067512586002], ["list", 0.0765948570506911]], "n7": [["int", 0.6935067512586002], ["list", 0.0765948570506911]], "right": [["int", 0.3740831357494168], ["Dict[int, int]", 0.34371232428521603], ["str", 0.07104559349324441], ["deque[int]", 0.05423901172937066]]}}], "imports": ["algorithms", "tree", "traversal", "preorder", "preorder_rec", "postorder", "postorder_rec", "inorder", "inorder_rec", "algorithms", "tree", "b_tree", "BTree", "algorithms", "tree", "construct_tree_postorder_preorder", "ctpp", "algorithms", "tree", "fenwick_tree", "fenwick_tree", "Fenwick_Tree", "unittest", "random"], "mod_var_ln": {}, "mod_var_occur": {}, "no_types_annot": {"D": 0, "I": 0, "U": 61}, "session_id": "GGaL9tKqbbcE1kYr73xrkE5OYRQbR5j74Dkuzf2hnDQ", "set": null, "tc": [false, null], "type_annot_cove": 0.0, "typed_seq": "", "untyped_seq": "", "variables": {}, "variables_p": {}}}