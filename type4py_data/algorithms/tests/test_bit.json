{"error": null, "response": {"classes": [{"cls_lc": [[28, 0], [270, 44]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": "Initialize seed.", "long_descr": null, "ret": null}, "fn_lc": [[30, 4], [32, 27]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "setUp", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSuite.setUp", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[34, 4], [38, 57]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_add_bitwise_operator", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "add_bitwise_operator"], ["self", "assertEqual", "add_bitwise_operator"], ["self", "assertEqual", "add_bitwise_operator"], ["self", "assertEqual", "add_bitwise_operator"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSuite.test_add_bitwise_operator", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[40, 4], [52, 48]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_count_ones_recur", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "count_ones_recur"], ["self", "assertEqual", "count_ones_recur"], ["self", "assertEqual", "count_ones_recur"], ["self", "assertEqual", "count_ones_recur"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSuite.test_count_ones_recur", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[54, 4], [66, 47]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_count_ones_iter", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "count_ones_iter"], ["self", "assertEqual", "count_ones_iter"], ["self", "assertEqual", "count_ones_iter"], ["self", "assertEqual", "count_ones_iter"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSuite.test_count_ones_iter", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[68, 4], [76, 59]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_count_flips_to_convert", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "count_flips_to_convert"], ["self", "assertEqual", "count_flips_to_convert"], ["self", "assertEqual", "count_flips_to_convert"], ["self", "assertEqual", "count_flips_to_convert"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSuite.test_count_flips_to_convert", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[78, 4], [86, 58]], "fn_var_ln": {"nums": [[84, 8], [84, 12]]}, "fn_var_occur": {"nums": [["nums", "i", "i", "range", "i"], ["random", "shuffle", "nums"], ["self", "assertEqual", "find_missing_number", "nums"]]}, "name": "test_find_missing_number", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "find_missing_number"], ["self", "assertEqual", "find_missing_number"], ["self", "assertEqual", "find_missing_number"], ["self", "assertEqual", "find_missing_number", "nums"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSuite.test_find_missing_number", "ret_exprs": [], "ret_type": "", "variables": {"nums": ""}, "variables_p": {"nums": [["float", 0.43869863365737305], ["int", 0.27416166592663205], ["List[str]", 0.09618402240675833], ["set", 0.09184170806138293]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[88, 4], [96, 59]], "fn_var_ln": {"nums": [[94, 8], [94, 12]]}, "fn_var_occur": {"nums": [["nums", "i", "i", "range", "i"], ["random", "shuffle", "nums"], ["self", "assertEqual", "find_missing_number2", "nums"]]}, "name": "test_find_missing_number2", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "find_missing_number2"], ["self", "assertEqual", "find_missing_number2"], ["self", "assertEqual", "find_missing_number2"], ["self", "assertEqual", "find_missing_number2", "nums"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSuite.test_find_missing_number2", "ret_exprs": [], "ret_type": "", "variables": {"nums": ""}, "variables_p": {"nums": [["float", 0.43869863365737305], ["int", 0.27416166592663205], ["List[str]", 0.09618402240675833], ["set", 0.09184170806138293]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[98, 4], [106, 52]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_flip_bit_longest_seq", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "flip_bit_longest_seq"], ["self", "assertEqual", "flip_bit_longest_seq"], ["self", "assertEqual", "flip_bit_longest_seq"], ["self", "assertEqual", "flip_bit_longest_seq"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSuite.test_flip_bit_longest_seq", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[108, 4], [114, 44]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_is_power_of_two", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertTrue", "is_power_of_two"], ["self", "assertFalse", "is_power_of_two"], ["self", "assertTrue", "is_power_of_two"], ["self", "assertTrue", "is_power_of_two"], ["self", "assertFalse", "is_power_of_two"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSuite.test_is_power_of_two", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[116, 4], [126, 60]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_reverse_bits", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "reverse_bits"], ["self", "assertEqual", "reverse_bits"], ["self", "assertEqual", "reverse_bits"], ["self", "assertEqual", "reverse_bits"], ["self", "assertEqual", "reverse_bits"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSuite.test_reverse_bits", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[128, 4], [141, 53]], "fn_var_ln": {"nums": [[136, 8], [136, 12]], "single": [[135, 8], [135, 14]]}, "fn_var_occur": {"nums": [["nums", "random", "randint", "_", "range"], ["nums", "append", "single"], ["random", "shuffle", "nums"], ["self", "assertEqual", "single", "single_number", "nums"]], "single": [["single", "random", "randint"], ["nums", "append", "single"], ["self", "assertEqual", "single", "single_number", "nums"]]}, "name": "test_single_number", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "single_number"], ["self", "assertEqual", "single_number"], ["self", "assertEqual", "single", "single_number", "nums"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSuite.test_single_number", "ret_exprs": [], "ret_type": "", "variables": {"nums": "", "single": ""}, "variables_p": {"nums": [["int", 0.4727281276342679]], "single": [["list", 0.601769048654932], ["List[Tuple[str, str]]", 0.10164493843946676], ["random.Random", 0.09750042589226444]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[143, 4], [151, 54]], "fn_var_ln": {"nums": [[147, 8], [147, 12]], "single": [[146, 8], [146, 14]]}, "fn_var_occur": {"nums": [["nums", "random", "randint", "_", "range"], ["nums", "append", "single"], ["random", "shuffle", "nums"], ["self", "assertEqual", "single", "single_number2", "nums"]], "single": [["single", "random", "randint"], ["nums", "append", "single"], ["self", "assertEqual", "single", "single_number2", "nums"]]}, "name": "test_single_number2", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "single_number2"], ["self", "assertEqual", "single", "single_number2", "nums"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSuite.test_single_number2", "ret_exprs": [], "ret_type": "", "variables": {"nums": "", "single": ""}, "variables_p": {"nums": [["int", 0.4727281276342679]], "single": [["list", 0.601769048654932], ["List[Tuple[str, str]]", 0.10164493843946676], ["random.Random", 0.09750042589226444]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[153, 4], [157, 62]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_single_number3", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "sorted", "sorted", "single_number3"], ["self", "assertEqual", "sorted", "sorted", "single_number3"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSuite.test_single_number3", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[159, 4], [171, 36]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_subsets", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertSetEqual", "subsets"], ["self", "assertSetEqual", "subsets"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSuite.test_subsets", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[173, 4], [176, 43]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_get_bit", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "get_bit"], ["self", "assertEqual", "get_bit"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSuite.test_get_bit", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[178, 4], [180, 44]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_set_bit", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "set_bit"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSuite.test_set_bit", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[182, 4], [184, 46]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_clear_bit", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "clear_bit"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSuite.test_clear_bit", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[186, 4], [192, 50]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_update_bit", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "update_bit"], ["self", "assertEqual", "update_bit"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSuite.test_update_bit", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[194, 4], [195, 62]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_int_to_bytes_big_endian", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "int_to_bytes_big_endian"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSuite.test_int_to_bytes_big_endian", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[197, 4], [198, 65]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_int_to_bytes_little_endian", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "int_to_bytes_little_endian"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSuite.test_int_to_bytes_little_endian", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[200, 4], [201, 62]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_bytes_big_endian_to_int", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "bytes_big_endian_to_int"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSuite.test_bytes_big_endian_to_int", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[203, 4], [204, 65]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_bytes_little_endian_to_int", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "bytes_little_endian_to_int"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSuite.test_bytes_little_endian_to_int", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[206, 4], [210, 42]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_swap_pair", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "swap_pair"], ["self", "assertEqual", "swap_pair"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSuite.test_swap_pair", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[212, 4], [213, 63]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_find_difference", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "find_difference"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSuite.test_find_difference", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[215, 4], [219, 48]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_has_alternative_bit", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertTrue", "has_alternative_bit"], ["self", "assertFalse", "has_alternative_bit"], ["self", "assertFalse", "has_alternative_bit"], ["self", "assertTrue", "has_alternative_bit"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSuite.test_has_alternative_bit", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[221, 4], [225, 53]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_has_alternative_bit_fast", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertTrue", "has_alternative_bit_fast"], ["self", "assertFalse", "has_alternative_bit_fast"], ["self", "assertFalse", "has_alternative_bit_fast"], ["self", "assertTrue", "has_alternative_bit_fast"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSuite.test_has_alternative_bit_fast", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Input: num = 10101 (21)", "long_descr": "insert_one_bit(num, 1, 2): 101101 (45)\ninsert_one_bit(num, 0 ,2): 101001 (41)\ninsert_one_bit(num, 1, 5): 110101 (53)\ninsert_one_bit(num, 1, 0): 101010 (42)", "ret": null}, "fn_lc": [[227, 4], [238, 54]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_insert_one_bit", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "insert_one_bit"], ["self", "assertEqual", "insert_one_bit"], ["self", "assertEqual", "insert_one_bit"], ["self", "assertEqual", "insert_one_bit"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSuite.test_insert_one_bit", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Input: num = 101 (5)", "long_descr": "insert_mult_bits(num, 7, 3, 1): 101111 (47)\ninsert_mult_bits(num, 7, 3, 0): 101111 (47)\ninsert_mult_bits(num, 7, 3, 3): 111101 (61)", "ret": null}, "fn_lc": [[240, 4], [249, 58]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_insert_mult_bits", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "insert_mult_bits"], ["self", "assertEqual", "insert_mult_bits"], ["self", "assertEqual", "insert_mult_bits"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSuite.test_insert_mult_bits", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Input: num = 10101 (21)", "long_descr": "remove_bit(num, 2): output = 1001 (9)\nremove_bit(num, 4): output = 101 (5)\nremove_bit(num, 0): output = 1010 (10)", "ret": null}, "fn_lc": [[251, 4], [260, 47]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_remove_bit", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "remove_bit"], ["self", "assertEqual", "remove_bit"], ["self", "assertEqual", "remove_bit"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSuite.test_remove_bit", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[262, 4], [270, 44]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_binary_gap", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "binary_gap"], ["self", "assertEqual", "binary_gap"], ["self", "assertEqual", "binary_gap"], ["self", "assertEqual", "binary_gap"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestSuite.test_binary_gap", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestSuite", "q_name": "TestSuite", "variables": {}, "variables_p": {}}], "funcs": [], "imports": ["algorithms", "bit", "add_bitwise_operator", "count_ones_iter", "count_ones_recur", "count_flips_to_convert", "find_missing_number", "find_missing_number2", "flip_bit_longest_seq", "is_power_of_two", "reverse_bits", "single_number", "single_number2", "single_number3", "subsets", "get_bit", "set_bit", "clear_bit", "update_bit", "int_to_bytes_big_endian", "int_to_bytes_little_endian", "bytes_big_endian_to_int", "bytes_little_endian_to_int", "swap_pair", "find_difference", "has_alternative_bit", "has_alternative_bit_fast", "insert_one_bit", "insert_mult_bits", "remove_bit", "binary_gap", "unittest", "random"], "mod_var_ln": {}, "mod_var_occur": {}, "no_types_annot": {"D": 0, "I": 0, "U": 36}, "session_id": "Onuv_uzELZhTD9oKskkSxJRKKfGp7tzdeVfPs-o4FZY", "set": null, "tc": [false, null], "type_annot_cove": 0.0, "typed_seq": "", "untyped_seq": "", "variables": {}, "variables_p": {}}}