{"error": null, "response": {"classes": [{"cls_lc": [[8, 0], [36, 37]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[10, 4], [13, 52]], "fn_var_ln": {"file_in_name": [[11, 8], [11, 24]], "file_out_bin_name": [[12, 8], [12, 29]], "file_out_name": [[13, 8], [13, 25]]}, "fn_var_occur": {"file_in_name": [["cls", "file_in_name"]], "file_out_bin_name": [["cls", "file_out_bin_name"]], "file_out_name": [["cls", "file_out_name"]]}, "name": "setUpClass", "params": {"cls": ""}, "params_descr": {"cls": ""}, "params_occur": {"cls": [["cls", "file_in_name"], ["cls", "file_out_bin_name"], ["cls", "file_out_name"]]}, "params_p": {"args": [], "cls": [["str", 0.6835114347672606], ["type", 0.08916073390877087]], "kwargs": [], "self": []}, "q_name": "TestHuffmanCoding.setUpClass", "ret_exprs": [], "ret_type": "", "variables": {"file_in_name": "", "file_out_bin_name": "", "file_out_name": ""}, "variables_p": {"file_in_name": [["str", 0.9999999999999999]], "file_out_bin_name": [["str", 0.703216459746015]], "file_out_name": [["str", 0.8010819340384576]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[15, 4], [20, 64]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "setUp", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["open", "self", "file_in_name", "file_in"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestHuffmanCoding.setUp", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[22, 4], [30, 50]], "fn_var_ln": {"content_1": [[27, 12], [27, 21]], "content_2": [[28, 12], [28, 21]]}, "fn_var_occur": {"content_1": [["content_1", "file_1", "read"], ["self", "assertEqual", "content_1", "content_2"]], "content_2": [["content_2", "file_2", "read"], ["self", "assertEqual", "content_1", "content_2"]]}, "name": "test_huffman_coding", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["HuffmanCoding", "encode_file", "self", "file_in_name", "self", "file_out_bin_name"], ["HuffmanCoding", "decode_file", "self", "file_out_bin_name", "self", "file_out_name"], ["open", "self", "file_in_name", "file_1"], ["self", "assertEqual", "content_1", "content_2"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestHuffmanCoding.test_huffman_coding", "ret_exprs": [], "ret_type": "", "variables": {"content_1": "", "content_2": ""}, "variables_p": {"content_1": [["list", 0.5980749974901515], ["Dict[str, None]", 0.09088272456650463], ["List[bytearray]", 0.08828234379532533]], "content_2": [["list", 0.5980749974901515], ["Dict[str, None]", 0.09088272456650463], ["List[bytearray]", 0.08828234379532533]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[32, 4], [36, 37]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "tearDown", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["os", "remove", "self", "file_in_name"], ["os", "remove", "self", "file_out_bin_name"], ["os", "remove", "self", "file_out_name"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestHuffmanCoding.tearDown", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestHuffmanCoding", "q_name": "TestHuffmanCoding", "variables": {}, "variables_p": {}}, {"cls_lc": [[39, 0], [47, 58]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[41, 4], [43, 107]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_encode_rle", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "encode_rle"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestRLECompression.test_encode_rle", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[45, 4], [47, 58]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_decode_rle", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "decode_rle"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestRLECompression.test_decode_rle", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestRLECompression", "q_name": "TestRLECompression", "variables": {}, "variables_p": {}}, {"cls_lc": [[50, 0], [70, 48]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[52, 4], [60, 48]], "fn_var_ln": {"correct_result": [[53, 8], [53, 22]], "result": [[56, 8], [56, 14]]}, "fn_var_occur": {"correct_result": [["self", "assertEqual", "correct_result", "result"]], "result": [["result", "append", "elias_gamma", "i"], ["self", "assertEqual", "correct_result", "result"]]}, "name": "test_elias_gamma", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "correct_result", "result"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestEliasCoding.test_elias_gamma", "ret_exprs": [], "ret_type": "", "variables": {"correct_result": "", "result": ""}, "variables_p": {"correct_result": [["str", 0.49829927825716763], ["list", 0.4467564135349005], ["Generator[Any, None, None]", 0.05494430820793202]], "result": [["list", 1.0000000000000002]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[62, 4], [70, 48]], "fn_var_ln": {"correct_result": [[63, 8], [63, 22]], "result": [[66, 8], [66, 14]]}, "fn_var_occur": {"correct_result": [["self", "assertEqual", "correct_result", "result"]], "result": [["result", "append", "elias_delta", "i"], ["self", "assertEqual", "correct_result", "result"]]}, "name": "test_elias_delta", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "correct_result", "result"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestEliasCoding.test_elias_delta", "ret_exprs": [], "ret_type": "", "variables": {"correct_result": "", "result": ""}, "variables_p": {"correct_result": [["str", 0.49829927825716763], ["list", 0.4467564135349005], ["Generator[Any, None, None]", 0.05494430820793202]], "result": [["list", 1.0000000000000002]]}}], "name": "TestEliasCoding", "q_name": "TestEliasCoding", "variables": {}, "variables_p": {}}], "funcs": [], "imports": ["algorithms", "compression", "huffman_coding", "HuffmanCoding", "algorithms", "compression", "rle_compression", "decode_rle", "encode_rle", "algorithms", "compression", "elias", "elias_gamma", "elias_delta", "unittest", "random", "os"], "mod_var_ln": {}, "mod_var_occur": {}, "no_types_annot": {"D": 0, "I": 0, "U": 18}, "session_id": "awrwOTFy7Ugzo3CYbg7ImUmYf0CAOdOkDCyp7BTGZRg", "set": null, "tc": [false, null], "type_annot_cove": 0.0, "typed_seq": "", "untyped_seq": "", "variables": {}, "variables_p": {}}}