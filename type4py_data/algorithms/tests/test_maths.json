{"error": null, "response": {"classes": [{"cls_lc": [[36, 0], [54, 65]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[44, 4], [48, 59]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_power", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "power"], ["self", "assertEqual", "power"], ["self", "assertEqual", "power"], ["self", "assertEqual", "power"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestPower.test_power", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[50, 4], [54, 65]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_power_recur", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "power_recur"], ["self", "assertEqual", "power_recur"], ["self", "assertEqual", "power_recur"], ["self", "assertEqual", "power_recur"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestPower.test_power_recur", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestPower", "q_name": "TestPower", "variables": {}, "variables_p": {}}, {"cls_lc": [[57, 0], [73, 52]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[65, 4], [68, 52]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_int_to_base", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "int_to_base"], ["self", "assertEqual", "int_to_base"], ["self", "assertEqual", "int_to_base"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestBaseConversion.test_int_to_base", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[70, 4], [73, 52]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_base_to_int", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "base_to_int"], ["self", "assertEqual", "base_to_int"], ["self", "assertEqual", "base_to_int"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestBaseConversion.test_base_to_int", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestBaseConversion", "q_name": "TestBaseConversion", "variables": {}, "variables_p": {}}, {"cls_lc": [[76, 0], [90, 61]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[84, 4], [90, 61]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_decimal_to_binary_ip", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "decimal_to_binary_ip"], ["self", "assertEqual", "decimal_to_binary_ip"], ["self", "assertEqual", "decimal_to_binary_ip"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDecimalToBinaryIP.test_decimal_to_binary_ip", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestDecimalToBinaryIP", "q_name": "TestDecimalToBinaryIP", "variables": {}, "variables_p": {}}, {"cls_lc": [[93, 0], [105, 57]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[101, 4], [105, 57]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_euler_totient", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "euler_totient"], ["self", "assertEqual", "euler_totient"], ["self", "assertEqual", "euler_totient"], ["self", "assertEqual", "euler_totient"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestEulerTotient.test_euler_totient", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestEulerTotient", "q_name": "TestEulerTotient", "variables": {}, "variables_p": {}}, {"cls_lc": [[108, 0], [118, 58]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[116, 4], [118, 58]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_extended_gcd", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "extended_gcd"], ["self", "assertEqual", "extended_gcd"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestExtendedGcd.test_extended_gcd", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestExtendedGcd", "q_name": "TestExtendedGcd", "variables": {}, "variables_p": {}}, {"cls_lc": [[121, 0], [174, 40]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[129, 4], [131, 40]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_gcd", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "gcd"], ["self", "assertEqual", "gcd"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestGcd.test_gcd", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[133, 4], [138, 36]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_gcd_non_integer_input", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestGcd.test_gcd_non_integer_input", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[140, 4], [145, 21]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_gcd_zero_input", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestGcd.test_gcd_zero_input", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[147, 4], [150, 41]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_gcd_negative_input", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "gcd"], ["self", "assertEqual", "gcd"], ["self", "assertEqual", "gcd"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestGcd.test_gcd_negative_input", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[152, 4], [154, 43]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_lcm", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "lcm"], ["self", "assertEqual", "lcm"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestGcd.test_lcm", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[156, 4], [159, 39]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_lcm_negative_numbers", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "lcm"], ["self", "assertEqual", "lcm"], ["self", "assertEqual", "lcm"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestGcd.test_lcm_negative_numbers", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[161, 4], [166, 21]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_lcm_zero_input", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": []}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestGcd.test_lcm_zero_input", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[168, 4], [170, 46]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_trailing_zero", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "trailing_zero"], ["self", "assertEqual", "trailing_zero"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestGcd.test_trailing_zero", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[172, 4], [174, 40]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_gcd_bit", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "gcd_bit"], ["self", "assertEqual", "gcd"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestGcd.test_gcd_bit", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestGcd", "q_name": "TestGcd", "variables": {}, "variables_p": {}}, {"cls_lc": [[177, 0], [189, 66]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[185, 4], [186, 74]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_gen_strobomatic", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "gen_strobogrammatic"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestGenerateStroboGrammatic.test_gen_strobomatic", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[188, 4], [189, 66]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_strobogrammatic_in_range", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "strobogrammatic_in_range"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestGenerateStroboGrammatic.test_strobogrammatic_in_range", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestGenerateStroboGrammatic", "q_name": "TestGenerateStroboGrammatic", "variables": {}, "variables_p": {}}, {"cls_lc": [[192, 0], [206, 51]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[200, 4], [202, 50]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_is_strobogrammatic", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertTrue", "is_strobogrammatic"], ["self", "assertFalse", "is_strobogrammatic"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestIsStrobogrammatic.test_is_strobogrammatic", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[204, 4], [206, 51]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_is_strobogrammatic2", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertTrue", "is_strobogrammatic2"], ["self", "assertFalse", "is_strobogrammatic2"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestIsStrobogrammatic.test_is_strobogrammatic2", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestIsStrobogrammatic", "q_name": "TestIsStrobogrammatic", "variables": {}, "variables_p": {}}, {"cls_lc": [[209, 0], [223, 77]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[217, 4], [223, 77]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_modular_inverse", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "modular_inverse", "modular_inverse"], ["self", "assertEqual", "modular_inverse", "modular_inverse"], ["self", "assertEqual", "modular_inverse", "modular_inverse"], ["self", "assertRaises", "ValueError", "modular_inverse", "modular_inverse"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestModularInverse.test_modular_inverse", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestModularInverse", "q_name": "TestModularInverse", "variables": {}, "variables_p": {}}, {"cls_lc": [[226, 0], [239, 71]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[234, 4], [239, 71]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_modular_exponential", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "modular_exponential"], ["self", "assertEqual", "pow", "modular_exponential"], ["self", "assertEqual", "modular_exponential"], ["self", "assertRaises", "ValueError", "modular_exponential"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestModularExponential.test_modular_exponential", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestModularExponential", "q_name": "TestModularExponential", "variables": {}, "variables_p": {}}, {"cls_lc": [[242, 0], [256, 49]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[250, 4], [252, 48]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_find_next_square", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "find_next_square"], ["self", "assertEqual", "find_next_square"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestNextPerfectSquare.test_find_next_square", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[254, 4], [256, 49]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_find_next_square2", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "find_next_square2"], ["self", "assertEqual", "find_next_square2"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestNextPerfectSquare.test_find_next_square2", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestNextPerfectSquare", "q_name": "TestNextPerfectSquare", "variables": {}, "variables_p": {}}, {"cls_lc": [[259, 0], [269, 54]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[267, 4], [269, 54]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_primes", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertListEqual", "get_primes"], ["self", "assertRaises", "ValueError", "get_primes"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestPrimesSieveOfEratosthenes.test_primes", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestPrimesSieveOfEratosthenes", "q_name": "TestPrimesSieveOfEratosthenes", "variables": {}, "variables_p": {}}, {"cls_lc": [[272, 0], [289, 37]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": "checks all prime numbers between 2 up to 100.", "long_descr": "Between 2 up to 100 exists 25 prime numbers!", "ret": null}, "fn_lc": [[280, 4], [289, 37]], "fn_var_ln": {"counter": [[285, 8], [285, 15]]}, "fn_var_occur": {"counter": [["self", "assertEqual", "counter"]]}, "name": "test_prime_test", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "counter"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestPrimeTest.test_prime_test", "ret_exprs": [], "ret_type": "", "variables": {"counter": ""}, "variables_p": {"counter": [["list", 0.30000000000000004], ["Dict[str, object]", 0.2], ["int", 0.2], ["dict", 0.1], ["str", 0.1]]}}], "name": "TestPrimeTest", "q_name": "TestPrimeTest", "variables": {}, "variables_p": {}}, {"cls_lc": [[292, 0], [302, 47]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[300, 4], [302, 47]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_pythagoras", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "pythagoras"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestPythagoras.test_pythagoras", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestPythagoras", "q_name": "TestPythagoras", "variables": {}, "variables_p": {}}, {"cls_lc": [[305, 0], [316, 40]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[313, 4], [316, 40]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_is_prime", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertTrue", "is_prime"], ["self", "assertTrue", "is_prime"], ["self", "assertFalse", "is_prime"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestRabinMiller.test_is_prime", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestRabinMiller", "q_name": "TestRabinMiller", "variables": {}, "variables_p": {}}, {"cls_lc": [[319, 0], [328, 66]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[327, 4], [328, 66]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_encrypt_decrypt", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "decrypt", "encrypt"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestRSA.test_encrypt_decrypt", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestRSA", "q_name": "TestRSA", "variables": {}, "variables_p": {}}, {"cls_lc": [[340, 0], [354, 61]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[348, 4], [350, 49]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_combination", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "combination"], ["self", "assertEqual", "combination"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestCombination.test_combination", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[352, 4], [354, 61]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_combination_memo", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "combination_memo"], ["self", "assertEqual", "combination_memo"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestCombination.test_combination_memo", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestCombination", "q_name": "TestCombination", "variables": {}, "variables_p": {}}, {"cls_lc": [[357, 0], [379, 62]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[365, 4], [371, 56]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_factorial", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "factorial"], ["self", "assertEqual", "factorial"], ["self", "assertEqual", "factorial"], ["self", "assertEqual", "factorial"], ["self", "assertRaises", "ValueError", "factorial"], ["self", "assertRaises", "ValueError", "factorial"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestFactorial.test_factorial", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[373, 4], [379, 62]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_factorial_recur", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "factorial_recur"], ["self", "assertEqual", "factorial_recur"], ["self", "assertEqual", "factorial_recur"], ["self", "assertEqual", "factorial_recur"], ["self", "assertRaises", "ValueError", "factorial_recur"], ["self", "assertRaises", "ValueError", "factorial_recur"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestFactorial.test_factorial_recur", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestFactorial", "q_name": "TestFactorial", "variables": {}, "variables_p": {}}, {"cls_lc": [[382, 0], [392, 74]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[390, 4], [392, 74]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_hailstone", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "hailstone", "hailstone"], ["self", "assertEqual", "hailstone", "hailstone"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestHailstone.test_hailstone", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestHailstone", "q_name": "TestHailstone", "variables": {}, "variables_p": {}}, {"cls_lc": [[395, 0], [409, 77]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[403, 4], [409, 77]], "fn_var_ln": {"vec_a": [[404, 8], [404, 13]], "vec_b": [[405, 8], [405, 13]], "vec_c": [[406, 8], [406, 13]]}, "fn_var_occur": {"vec_a": [["self", "assertAlmostEqual", "cosine_similarity", "vec_a", "vec_a"], ["self", "assertAlmostEqual", "cosine_similarity", "vec_a", "vec_b"], ["self", "assertAlmostEqual", "cosine_similarity", "vec_a", "vec_c"]], "vec_b": [["self", "assertAlmostEqual", "cosine_similarity", "vec_a", "vec_b"]], "vec_c": [["self", "assertAlmostEqual", "cosine_similarity", "vec_a", "vec_c"]]}, "name": "test_cosine_similarity", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertAlmostEqual", "cosine_similarity", "vec_a", "vec_a"], ["self", "assertAlmostEqual", "cosine_similarity", "vec_a", "vec_b"], ["self", "assertAlmostEqual", "cosine_similarity", "vec_a", "vec_c"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestCosineSimilarity.test_cosine_similarity", "ret_exprs": [], "ret_type": "", "variables": {"vec_a": "", "vec_b": "", "vec_c": ""}, "variables_p": {"vec_a": [["list", 0.472462340283096], ["List[List[Any]]", 0.3024467627150593], ["float", 0.1287201749842494]], "vec_b": [["int", 0.24328585911139605], ["list", 0.23296655692929294], ["List[float]", 0.19690554866505586], ["List[int]", 0.12383782869554957], ["float", 0.11989174175736206]], "vec_c": [["list", 0.3209500344924424], ["float", 0.3186354349359167], ["List[List[Any]]", 0.14091685425291714], ["List[float]", 0.07469291371454413], ["int", 0.07184247046709263]]}}], "name": "TestCosineSimilarity", "q_name": "TestCosineSimilarity", "variables": {}, "variables_p": {}}, {"cls_lc": [[412, 0], [425, 53]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[420, 4], [425, 53]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_find_primitive_root_simple", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertListEqual", "find_primitive_root"], ["self", "assertListEqual", "find_primitive_root"], ["self", "assertListEqual", "find_primitive_root"], ["self", "assertListEqual", "find_primitive_root"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestFindPrimitiveRoot.test_find_primitive_root_simple", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestFindPrimitiveRoot", "q_name": "TestFindPrimitiveRoot", "variables": {}, "variables_p": {}}, {"cls_lc": [[428, 0], [440, 49]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[436, 4], [440, 49]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_find_order_simple", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "find_order"], ["self", "assertEqual", "find_order"], ["self", "assertEqual", "find_order"], ["self", "assertEqual", "find_order"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestFindOrder.test_find_order_simple", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestFindOrder", "q_name": "TestFindOrder", "variables": {}, "variables_p": {}}, {"cls_lc": [[443, 0], [456, 52]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[451, 4], [456, 52]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_krishnamurthy_number", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertFalse", "krishnamurthy_number"], ["self", "assertTrue", "krishnamurthy_number"], ["self", "assertTrue", "krishnamurthy_number"], ["self", "assertTrue", "krishnamurthy_number"], ["self", "assertTrue", "krishnamurthy_number"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestKrishnamurthyNumber.test_krishnamurthy_number", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestKrishnamurthyNumber", "q_name": "TestKrishnamurthyNumber", "variables": {}, "variables_p": {}}, {"cls_lc": [[459, 0], [473, 46]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[467, 4], [473, 46]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_magic_number", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertTrue", "magic_number"], ["self", "assertTrue", "magic_number"], ["self", "assertTrue", "magic_number"], ["self", "assertTrue", "magic_number"], ["self", "assertFalse", "magic_number"], ["self", "assertFalse", "magic_number"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestMagicNumber.test_magic_number", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestMagicNumber", "q_name": "TestMagicNumber", "variables": {}, "variables_p": {}}, {"cls_lc": [[476, 0], [488, 61]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[484, 4], [488, 61]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_find_order_simple", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertFalse", "diffie_hellman_key_exchange"], ["self", "assertTrue", "diffie_hellman_key_exchange"], ["self", "assertFalse", "diffie_hellman_key_exchange"], ["self", "assertTrue", "diffie_hellman_key_exchange"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDiffieHellmanKeyExchange.test_find_order_simple", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestDiffieHellmanKeyExchange", "q_name": "TestDiffieHellmanKeyExchange", "variables": {}, "variables_p": {}}, {"cls_lc": [[491, 0], [504, 45]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[498, 4], [504, 45]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_num_digits", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "num_digits"], ["self", "assertEqual", "num_digits"], ["self", "assertEqual", "num_digits"], ["self", "assertEqual", "num_digits"], ["self", "assertEqual", "num_digits"], ["self", "assertEqual", "num_digits"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestNumberOfDigits.test_num_digits", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestNumberOfDigits", "q_name": "TestNumberOfDigits", "variables": {}, "variables_p": {}}, {"cls_lc": [[508, 0], [523, 50]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[515, 4], [523, 50]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_num_perfect_squares", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "num_perfect_squares"], ["self", "assertEqual", "num_perfect_squares"], ["self", "assertEqual", "num_perfect_squares"], ["self", "assertEqual", "num_perfect_squares"], ["self", "assertEqual", "num_perfect_squares"], ["self", "assertEqual", "num_perfect_squares"], ["self", "assertEqual", "num_perfect_squares"], ["self", "assertEqual", "num_perfect_squares"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestNumberOfPerfectSquares.test_num_perfect_squares", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestNumberOfPerfectSquares", "q_name": "TestNumberOfPerfectSquares", "variables": {}, "variables_p": {}}, {"cls_lc": [[526, 0], [557, 71]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[527, 4], [534, 64]], "fn_var_ln": {"num": [[531, 8], [531, 11]], "rem": [[532, 8], [532, 11]]}, "fn_var_occur": {"num": [["self", "assertEqual", "chinese_remainder_theorem", "solve_chinese_remainder", "num", "rem"]], "rem": [["self", "assertEqual", "chinese_remainder_theorem", "solve_chinese_remainder", "num", "rem"]]}, "name": "test_k_three", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "chinese_remainder_theorem", "solve_chinese_remainder", "num", "rem"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestChineseRemainderSolver.test_k_three", "ret_exprs": [], "ret_type": "", "variables": {"num": "", "rem": ""}, "variables_p": {"num": [["list", 0.3349898297234336], ["str", 0.19812767711373108], ["int", 0.15745154317034332], ["List[int]", 0.12328700061701828], ["List[Dict[str, Any]]", 0.08195271889544828]], "rem": [["list", 0.26318665544088143], ["float", 0.11836143869544381], ["Dict[str, str]", 0.10972451904271387], ["Dict[str, List[str]]", 0.10252813466526307], ["str", 0.0981494666512938], ["List[str]", 0.08636928044666493]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[536, 4], [543, 65]], "fn_var_ln": {"num": [[540, 8], [540, 11]], "rem": [[541, 8], [541, 11]]}, "fn_var_occur": {"num": [["self", "assertEqual", "chinese_remainder_theorem", "solve_chinese_remainder", "num", "rem"]], "rem": [["self", "assertEqual", "chinese_remainder_theorem", "solve_chinese_remainder", "num", "rem"]]}, "name": "test_k_five", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "chinese_remainder_theorem", "solve_chinese_remainder", "num", "rem"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestChineseRemainderSolver.test_k_five", "ret_exprs": [], "ret_type": "", "variables": {"num": "", "rem": ""}, "variables_p": {"num": [["list", 0.3349898297234336], ["str", 0.19812767711373108], ["int", 0.15745154317034332], ["List[int]", 0.12328700061701828], ["List[Dict[str, Any]]", 0.08195271889544828]], "rem": [["list", 0.26318665544088143], ["float", 0.11836143869544381], ["Dict[str, str]", 0.10972451904271387], ["Dict[str, List[str]]", 0.10252813466526307], ["str", 0.0981494666512938], ["List[str]", 0.08636928044666493]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[545, 4], [551, 71]], "fn_var_ln": {"num": [[548, 8], [548, 11]], "rem": [[549, 8], [549, 11]]}, "fn_var_occur": {"num": [["chinese_remainder_theorem", "solve_chinese_remainder", "num", "rem"]], "rem": [["chinese_remainder_theorem", "solve_chinese_remainder", "num", "rem"]]}, "name": "test_exception_non_coprime", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertRaises", "Exception"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestChineseRemainderSolver.test_exception_non_coprime", "ret_exprs": [], "ret_type": "", "variables": {"num": "", "rem": ""}, "variables_p": {"num": [["int", 0.37075537105984047], ["float", 0.20018514486682842], ["List[str]", 0.1796298792379273], ["str", 0.12336863064544645]], "rem": [["list", 0.10031271583724179], ["float", 0.08906426527116053]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[553, 4], [557, 71]], "fn_var_ln": {"num": [[554, 8], [554, 11]], "rem": [[555, 8], [555, 11]]}, "fn_var_occur": {"num": [["chinese_remainder_theorem", "solve_chinese_remainder", "num", "rem"]], "rem": [["chinese_remainder_theorem", "solve_chinese_remainder", "num", "rem"]]}, "name": "test_empty_lists", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertRaises", "Exception"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestChineseRemainderSolver.test_empty_lists", "ret_exprs": [], "ret_type": "", "variables": {"num": "", "rem": ""}, "variables_p": {"num": [["int", 0.37075537105984047], ["float", 0.20018514486682842], ["List[str]", 0.1796298792379273], ["str", 0.12336863064544645]], "rem": [["list", 0.10031271583724179], ["float", 0.08906426527116053]]}}], "name": "TestChineseRemainderSolver", "q_name": "TestChineseRemainderSolver", "variables": {}, "variables_p": {}}, {"cls_lc": [[560, 0], [593, 42]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[567, 4], [572, 35]], "fn_var_ln": {"result": [[571, 8], [571, 14]], "x": [[568, 8], [568, 9]], "y": [[569, 8], [569, 9]]}, "fn_var_occur": {"result": [["result", "float", "abs", "f", "f", "fft", "fft", "x"], ["self", "assertEqual", "result", "y"]], "x": [["result", "float", "abs", "f", "f", "fft", "fft", "x"]], "y": [["self", "assertEqual", "result", "y"]]}, "name": "test_real_numbers", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "result", "y"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestFFT.test_real_numbers", "ret_exprs": [], "ret_type": "", "variables": {"result": "", "x": "", "y": ""}, "variables_p": {"result": [["list", 0.2899315673149226], ["Tuple[bool, float]", 0.18171546350863033], ["dict", 0.10232919209394202], ["List[int]", 0.09900722586585264]], "x": [["int", 0.5293285923337131], ["float", 0.27155475229326675], ["list", 0.11000120736898683]], "y": [["list", 0.25085303566518996], ["Tuple[Literal, Literal, Literal, Literal, Literal, Literal]", 0.17567923171580804], ["str", 0.1274711993448861], ["List[bytes]", 0.08410978590958293], ["List[str]", 0.0707667750985771]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[574, 4], [578, 35]], "fn_var_ln": {"result": [[577, 8], [577, 14]], "x": [[575, 8], [575, 9]], "y": [[576, 8], [576, 9]]}, "fn_var_occur": {"result": [["result", "float", "abs", "f", "f", "fft", "fft", "x"], ["self", "assertEqual", "result", "y"]], "x": [["result", "float", "abs", "f", "f", "fft", "fft", "x"]], "y": [["self", "assertEqual", "result", "y"]]}, "name": "test_all_zero", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "result", "y"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestFFT.test_all_zero", "ret_exprs": [], "ret_type": "", "variables": {"result": "", "x": "", "y": ""}, "variables_p": {"result": [["list", 0.2899315673149226], ["Tuple[bool, float]", 0.18171546350863033], ["dict", 0.10232919209394202], ["List[int]", 0.09900722586585264]], "x": [["int", 0.5293285923337131], ["float", 0.27155475229326675], ["list", 0.11000120736898683]], "y": [["list", 0.25085303566518996], ["Tuple[Literal, Literal, Literal, Literal, Literal, Literal]", 0.17567923171580804], ["str", 0.1274711993448861], ["List[bytes]", 0.08410978590958293], ["List[str]", 0.0707667750985771]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[580, 4], [584, 35]], "fn_var_ln": {"result": [[583, 8], [583, 14]], "x": [[581, 8], [581, 9]], "y": [[582, 8], [582, 9]]}, "fn_var_occur": {"result": [["result", "float", "abs", "f", "f", "fft", "fft", "x"], ["self", "assertEqual", "result", "y"]], "x": [["result", "float", "abs", "f", "f", "fft", "fft", "x"]], "y": [["self", "assertEqual", "result", "y"]]}, "name": "test_all_ones", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "result", "y"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestFFT.test_all_ones", "ret_exprs": [], "ret_type": "", "variables": {"result": "", "x": "", "y": ""}, "variables_p": {"result": [["list", 0.2899315673149226], ["Tuple[bool, float]", 0.18171546350863033], ["dict", 0.10232919209394202], ["List[int]", 0.09900722586585264]], "x": [["int", 0.5293285923337131], ["float", 0.27155475229326675], ["list", 0.11000120736898683]], "y": [["list", 0.25085303566518996], ["Tuple[Literal, Literal, Literal, Literal, Literal, Literal]", 0.17567923171580804], ["str", 0.1274711993448861], ["List[bytes]", 0.08410978590958293], ["List[str]", 0.0707667750985771]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[586, 4], [593, 42]], "fn_var_ln": {"imag": [[589, 8], [589, 12]], "imagResult": [[591, 8], [591, 18]], "real": [[588, 8], [588, 12]], "realResult": [[590, 8], [590, 18]], "x": [[587, 8], [587, 9]]}, "fn_var_occur": {"imag": [["imagResult", "float", "f", "imag", "f", "fft", "fft", "x"], ["self", "assertEqual", "imag", "imagResult"]], "imagResult": [["imagResult", "float", "f", "imag", "f", "fft", "fft", "x"], ["self", "assertEqual", "imag", "imagResult"]], "real": [["realResult", "float", "f", "real", "f", "fft", "fft", "x"], ["self", "assertEqual", "real", "realResult"]], "realResult": [["realResult", "float", "f", "real", "f", "fft", "fft", "x"], ["self", "assertEqual", "real", "realResult"]], "x": [["realResult", "float", "f", "real", "f", "fft", "fft", "x"], ["imagResult", "float", "f", "imag", "f", "fft", "fft", "x"]]}, "name": "test_complex_numbers", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "real", "realResult"], ["self", "assertEqual", "imag", "imagResult"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestFFT.test_complex_numbers", "ret_exprs": [], "ret_type": "", "variables": {"imag": "", "imagResult": "", "real": "", "realResult": "", "x": ""}, "variables_p": {"imag": [["List[float]", 0.10564846795517369], ["float", 0.0996306989460091], ["list", 0.0996306989460091], ["Dict[str, Union[Any, Any]]", 0.0994613577986715], ["List[str]", 0.09897682196755381]], "imagResult": [["list", 0.3412556042818851], ["int", 0.17678571382644703], ["DefaultDict[Any, Set[Any]]", 0.11645475158396268]], "real": [["List[float]", 0.10564846795517369], ["float", 0.0996306989460091], ["list", 0.0996306989460091], ["Dict[str, Union[Any, Any]]", 0.0994613577986715], ["List[str]", 0.09897682196755381]], "realResult": [["list", 0.3412556042818851], ["int", 0.17678571382644703], ["DefaultDict[Any, Set[Any]]", 0.11645475158396268]], "x": [["List[int]", 0.26875399772983954], ["List[List[Any]]", 0.1686902266999939], ["int", 0.11061911832761762], ["List[float]", 0.08120922516071541], ["set", 0.08007428200233242]]}}], "name": "TestFFT", "q_name": "TestFFT", "variables": {}, "variables_p": {}}], "funcs": [], "imports": ["algorithms", "maths", "power", "power_recur", "int_to_base", "base_to_int", "decimal_to_binary_ip", "euler_totient", "extended_gcd", "factorial", "factorial_recur", "gcd", "lcm", "trailing_zero", "gcd_bit", "gen_strobogrammatic", "strobogrammatic_in_range", "is_strobogrammatic", "is_strobogrammatic2", "modular_inverse", "modular_exponential", "find_next_square", "find_next_square2", "prime_check", "get_primes", "pythagoras", "is_prime", "encrypt", "decrypt", "combination", "combination_memo", "hailstone", "cosine_similarity", "magic_number", "find_order", "find_primitive_root", "num_digits", "diffie_hellman_key_exchange", "krishnamurthy_number", "num_perfect_squares", "chinese_remainder_theorem", "fft", "unittest", "pytest"], "mod_var_ln": {}, "mod_var_occur": {}, "no_types_annot": {"D": 0, "I": 0, "U": 76}, "session_id": "RaCQtfO1g2fyphimcrtv29W3Q8ebIxMCYMSxeN6cPPc", "set": null, "tc": [false, null], "type_annot_cove": 0.0, "typed_seq": "", "untyped_seq": "", "variables": {}, "variables_p": {}}}