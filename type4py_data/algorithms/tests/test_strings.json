{"error": null, "response": {"classes": [{"cls_lc": [[51, 0], [62, 52]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[59, 4], [62, 52]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_add_binary", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "add_binary"], ["self", "assertEqual", "add_binary"], ["self", "assertEqual", "add_binary"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestAddBinary.test_add_binary", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestAddBinary", "q_name": "TestAddBinary", "variables": {}, "variables_p": {}}, {"cls_lc": [[65, 0], [91, 57]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[73, 4], [76, 76]], "fn_var_ln": {"result": [[76, 8], [76, 19]], "symbols": [[75, 8], [75, 20]], "words": [[74, 8], [74, 18]]}, "fn_var_occur": {"result": [["self", "result"]], "symbols": [["self", "symbols"]], "words": [["self", "words"]]}, "name": "setUp", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "words"], ["self", "symbols"], ["self", "result"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestBreakingBad.setUp", "ret_exprs": [], "ret_type": "", "variables": {"result": "", "symbols": "", "words": ""}, "variables_p": {"result": [["str", 0.9999999997895083], ["int", 5.7423418572350405e-11], ["List[str]", 2.07418574924253e-11]], "symbols": [["int", 0.19310305285853183], ["dict", 0.14822520726174573], ["str", 0.11787633344549057], ["list", 0.0925242995923444], ["Set[str]", 0.09071571755441672], ["List[str]", 0.08653346598239149]], "words": [["str", 0.30000000000000004], ["Dict[str, Any]", 0.1], ["dict", 0.1], ["int", 0.1]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[78, 4], [79, 77]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_match_symbol", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "self", "result", "match_symbol", "self", "words", "self", "symbols"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestBreakingBad.test_match_symbol", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[81, 4], [83, 66]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_match_symbol_1", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "match_symbol_1", "self", "words", "self", "symbols"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestBreakingBad.test_match_symbol_1", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[85, 4], [91, 57]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_bracket", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "bracket", "self", "words", "self", "symbols"], ["self", "assertEqual", "bracket", "self", "words"], ["self", "assertEqual", "bracket", "self", "words"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestBreakingBad.test_bracket", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestBreakingBad", "q_name": "TestBreakingBad", "variables": {}, "variables_p": {}}, {"cls_lc": [[94, 0], [104, 64]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[102, 4], [104, 64]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_decode_string", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "decode_string"], ["self", "assertEqual", "decode_string"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDecodeString.test_decode_string", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestDecodeString", "q_name": "TestDecodeString", "variables": {}, "variables_p": {}}, {"cls_lc": [[107, 0], [116, 74]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[115, 4], [116, 74]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_delete_reoccurring_characters", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "delete_reoccurring_characters"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDeleteReoccurring.test_delete_reoccurring_characters", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestDeleteReoccurring", "q_name": "TestDeleteReoccurring", "variables": {}, "variables_p": {}}, {"cls_lc": [[119, 0], [132, 70]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[127, 4], [129, 34]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_valid", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "domain_name_1"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDomainExtractor.test_valid", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[131, 4], [132, 70]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_invalid", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "domain_name_2"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestDomainExtractor.test_invalid", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestDomainExtractor", "q_name": "TestDomainExtractor", "variables": {}, "variables_p": {}}, {"cls_lc": [[135, 0], [148, 55]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[143, 4], [144, 74]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_encode", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "encode"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestEncodeDecode.test_encode", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[146, 4], [148, 55]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_decode", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "decode"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestEncodeDecode.test_decode", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestEncodeDecode", "q_name": "TestEncodeDecode", "variables": {}, "variables_p": {}}, {"cls_lc": [[151, 0], [162, 48]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[159, 4], [162, 48]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_group_anagrams", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "group_anagrams"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestGroupAnagrams.test_group_anagrams", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestGroupAnagrams", "q_name": "TestGroupAnagrams", "variables": {}, "variables_p": {}}, {"cls_lc": [[165, 0], [176, 57]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[173, 4], [176, 57]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_int_to_roman", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "int_to_roman"], ["self", "assertEqual", "int_to_roman"], ["self", "assertEqual", "int_to_roman"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestIntToRoman.test_int_to_roman", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestIntToRoman", "q_name": "TestIntToRoman", "variables": {}, "variables_p": {}}, {"cls_lc": [[179, 0], [210, 54]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[187, 4], [190, 48]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_is_palindrome", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertTrue", "is_palindrome"], ["self", "assertFalse", "is_palindrome"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestIsPalindrome.test_is_palindrome", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[192, 4], [195, 56]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_is_palindrome_reverse", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertTrue", "is_palindrome_reverse"], ["self", "assertFalse", "is_palindrome_reverse"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestIsPalindrome.test_is_palindrome_reverse", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[197, 4], [200, 60]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_is_palindrome_two_pointer", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertTrue", "is_palindrome_two_pointer"], ["self", "assertFalse", "is_palindrome_two_pointer"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestIsPalindrome.test_is_palindrome_two_pointer", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[202, 4], [205, 54]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_is_palindrome_stack", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertTrue", "is_palindrome_stack"], ["self", "assertFalse", "is_palindrome_stack"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestIsPalindrome.test_is_palindrome_stack", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[207, 4], [210, 54]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_is_palindrome_deque", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertTrue", "is_palindrome_deque"], ["self", "assertFalse", "is_palindrome_deque"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestIsPalindrome.test_is_palindrome_deque", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestIsPalindrome", "q_name": "TestIsPalindrome", "variables": {}, "variables_p": {}}, {"cls_lc": [[213, 0], [233, 46]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[221, 4], [226, 43]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_is_rotated", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertTrue", "is_rotated"], ["self", "assertTrue", "is_rotated"], ["self", "assertFalse", "is_rotated"], ["self", "assertFalse", "is_rotated"], ["self", "assertTrue", "is_rotated"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestIsRotated.test_is_rotated", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[228, 4], [233, 46]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_is_rotated_v1", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertTrue", "is_rotated_v1"], ["self", "assertTrue", "is_rotated_v1"], ["self", "assertFalse", "is_rotated_v1"], ["self", "assertFalse", "is_rotated_v1"], ["self", "assertTrue", "is_rotated_v1"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestIsRotated.test_is_rotated_v1", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestIsRotated", "q_name": "TestIsRotated", "variables": {}, "variables_p": {}}, {"cls_lc": [[236, 0], [247, 57]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[237, 4], [241, 53]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_rotate", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "rotate"], ["self", "assertEqual", "rotate"], ["self", "assertEqual", "rotate"], ["self", "assertEqual", "rotate"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestRotated.test_rotate", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[243, 4], [247, 57]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_rotate_alt", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "rotate_alt"], ["self", "assertEqual", "rotate_alt"], ["self", "assertEqual", "rotate_alt"], ["self", "assertEqual", "rotate_alt"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestRotated.test_rotate_alt", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestRotated", "q_name": "TestRotated", "variables": {}, "variables_p": {}}, {"cls_lc": [[250, 0], [263, 71]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[258, 4], [263, 71]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_license_number", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "license_number"], ["self", "assertEqual", "license_number"], ["self", "assertEqual", "license_number"], ["self", "assertEqual", "license_number"], ["self", "assertEqual", "license_number"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestLicenseNumber.test_license_number", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestLicenseNumber", "q_name": "TestLicenseNumber", "variables": {}, "variables_p": {}}, {"cls_lc": [[266, 0], [277, 57]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[274, 4], [277, 57]], "fn_var_ln": {"dictionarys": [[275, 8], [275, 19]], "word": [[276, 8], [276, 12]]}, "fn_var_occur": {"dictionarys": [["self", "assertTrue", "make_sentence", "word", "dictionarys"]], "word": [["self", "assertTrue", "make_sentence", "word", "dictionarys"]]}, "name": "test_make_sentence", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertTrue", "make_sentence", "word", "dictionarys"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestMakeSentence.test_make_sentence", "ret_exprs": [], "ret_type": "", "variables": {"dictionarys": "", "word": ""}, "variables_p": {"dictionarys": [["list", 0.333333333332283], ["List[bool]", 0.333333333332283], ["str", 0.111111111110761], ["bool", 0.111111111110761]], "word": [["list", 0.333333333332283], ["List[bool]", 0.333333333332283], ["str", 0.111111111110761], ["bool", 0.111111111110761]]}}], "name": "TestMakeSentence", "q_name": "TestMakeSentence", "variables": {}, "variables_p": {}}, {"cls_lc": [[280, 0], [292, 71]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[288, 4], [289, 71]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_is_merge_recursive", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertTrue", "is_merge_recursive"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestMergeStringChecker.test_is_merge_recursive", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[291, 4], [292, 71]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_is_merge_iterative", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertTrue", "is_merge_iterative"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestMergeStringChecker.test_is_merge_iterative", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestMergeStringChecker", "q_name": "TestMergeStringChecker", "variables": {}, "variables_p": {}}, {"cls_lc": [[295, 0], [307, 61]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[303, 4], [307, 61]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_multiply", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "multiply"], ["self", "assertEqual", "multiply"], ["self", "assertEqual", "multiply"], ["self", "assertEqual", "multiply"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestMultiplyStrings.test_multiply", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestMultiplyStrings", "q_name": "TestMultiplyStrings", "variables": {}, "variables_p": {}}, {"cls_lc": [[310, 0], [326, 54]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[318, 4], [321, 53]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_is_one_edit", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertTrue", "is_one_edit"], ["self", "assertFalse", "is_one_edit"], ["self", "assertFalse", "is_one_edit"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestOneEditDistance.test_is_one_edit", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[323, 4], [326, 54]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_is_one_edit2", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertTrue", "is_one_edit2"], ["self", "assertFalse", "is_one_edit2"], ["self", "assertFalse", "is_one_edit2"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestOneEditDistance.test_is_one_edit2", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestOneEditDistance", "q_name": "TestOneEditDistance", "variables": {}, "variables_p": {}}, {"cls_lc": [[329, 0], [339, 64]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[337, 4], [339, 64]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_rabin_karp", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "rabin_karp"], ["self", "assertEqual", "None", "rabin_karp"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestRabinKarp.test_rabin_karp", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestRabinKarp", "q_name": "TestRabinKarp", "variables": {}, "variables_p": {}}, {"cls_lc": [[342, 0], [360, 70]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[350, 4], [351, 65]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_recursive", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "recursive"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestReverseString.test_recursive", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[353, 4], [354, 65]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_iterative", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "iterative"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestReverseString.test_iterative", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[356, 4], [357, 64]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_pythonic", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "pythonic"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestReverseString.test_pythonic", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[359, 4], [360, 70]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_ultra_pythonic", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "ultra_pythonic"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestReverseString.test_ultra_pythonic", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestReverseString", "q_name": "TestReverseString", "variables": {}, "variables_p": {}}, {"cls_lc": [[363, 0], [372, 57]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[371, 4], [372, 57]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_reverse_vowel", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "reverse_vowel"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestReverseVowel.test_reverse_vowel", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestReverseVowel", "q_name": "TestReverseVowel", "variables": {}, "variables_p": {}}, {"cls_lc": [[375, 0], [385, 73]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[383, 4], [385, 73]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_reverse_words", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "reverse_words"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestReverseWords.test_reverse_words", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestReverseWords", "q_name": "TestReverseWords", "variables": {}, "variables_p": {}}, {"cls_lc": [[388, 0], [399, 57]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[396, 4], [399, 57]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_roman_to_int", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "roman_to_int"], ["self", "assertEqual", "roman_to_int"], ["self", "assertEqual", "roman_to_int"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestRomanToInt.test_roman_to_int", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestRomanToInt", "q_name": "TestRomanToInt", "variables": {}, "variables_p": {}}, {"cls_lc": [[427, 0], [445, 64]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[435, 4], [438, 63]], "fn_var_ln": {"valid_coordinates": [[436, 8], [436, 25]]}, "fn_var_occur": {"valid_coordinates": []}, "name": "test_valid", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertTrue", "is_valid_coordinates_0", "coordinate"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestValidateCoordinates.test_valid", "ret_exprs": [], "ret_type": "", "variables": {"valid_coordinates": ""}, "variables_p": {"valid_coordinates": [["str", 0.6827931403924985], ["List[Union[Any, Any]]", 0.12122260749521509], ["Optional[str]", 0.10114386805664691]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[440, 4], [445, 64]], "fn_var_ln": {"invalid_coordinates": [[441, 8], [441, 27]]}, "fn_var_occur": {"invalid_coordinates": []}, "name": "test_invalid", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertFalse", "is_valid_coordinates_0", "coordinate"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestValidateCoordinates.test_invalid", "ret_exprs": [], "ret_type": "", "variables": {"invalid_coordinates": ""}, "variables_p": {"invalid_coordinates": [["str", 0.28571428572560403], ["Dict[str, Any]", 0.2857142856463754], ["Tuple[float, float]", 0.2857142856463754], ["Type[Dict[str, int]]", 0.1428571428231877], ["int", 7.922861981859859e-11]]}}], "name": "TestValidateCoordinates", "q_name": "TestValidateCoordinates", "variables": {}, "variables_p": {}}, {"cls_lc": [[448, 0], [460, 55]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[456, 4], [460, 55]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_word_squares", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "word_squares"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestWordSquares.test_word_squares", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestWordSquares", "q_name": "TestWordSquares", "variables": {}, "variables_p": {}}, {"cls_lc": [[463, 0], [469, 71]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[464, 4], [466, 63]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_convert_morse_word", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "convert_morse_word"], ["self", "assertEqual", "convert_morse_word"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestUniqueMorse.test_convert_morse_word", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[468, 4], [469, 71]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_unique_morse", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "unique_morse"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestUniqueMorse.test_unique_morse", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestUniqueMorse", "q_name": "TestUniqueMorse", "variables": {}, "variables_p": {}}, {"cls_lc": [[472, 0], [475, 46]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[473, 4], [475, 46]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_judge_circle", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertTrue", "judge_circle"], ["self", "assertFalse", "judge_circle"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestJudgeCircle.test_judge_circle", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestJudgeCircle", "q_name": "TestJudgeCircle", "variables": {}, "variables_p": {}}, {"cls_lc": [[478, 0], [481, 63]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[479, 4], [481, 63]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_strong_password", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "strong_password"], ["self", "assertEqual", "strong_password"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestStrongPassword.test_strong_password", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestStrongPassword", "q_name": "TestStrongPassword", "variables": {}, "variables_p": {}}, {"cls_lc": [[484, 0], [487, 72]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[485, 4], [487, 72]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_caesar_cipher", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "caesar_cipher"], ["self", "assertEqual", "caesar_cipher"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestCaesarCipher.test_caesar_cipher", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestCaesarCipher", "q_name": "TestCaesarCipher", "variables": {}, "variables_p": {}}, {"cls_lc": [[490, 0], [493, 62]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[491, 4], [493, 62]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_check_pangram", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertTrue", "check_pangram"], ["self", "assertFalse", "check_pangram"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestCheckPangram.test_check_pangram", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestCheckPangram", "q_name": "TestCheckPangram", "variables": {}, "variables_p": {}}, {"cls_lc": [[496, 0], [500, 58]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[497, 4], [500, 58]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_contain_string", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "contain_string"], ["self", "assertEqual", "contain_string"], ["self", "assertEqual", "contain_string"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestContainString.test_contain_string", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestContainString", "q_name": "TestContainString", "variables": {}, "variables_p": {}}, {"cls_lc": [[503, 0], [507, 60]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[504, 4], [507, 60]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_count_binary_substring", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "count_binary_substring"], ["self", "assertEqual", "count_binary_substring"], ["self", "assertEqual", "count_binary_substring"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestCountBinarySubstring.test_count_binary_substring", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestCountBinarySubstring", "q_name": "TestCountBinarySubstring", "variables": {}, "variables_p": {}}, {"cls_lc": [[510, 0], [513, 59]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[511, 4], [513, 59]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_repeat_string", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "repeat_string"], ["self", "assertEqual", "repeat_string"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestCountBinarySubstring.test_repeat_string", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestCountBinarySubstring", "q_name": "TestCountBinarySubstring", "variables": {}, "variables_p": {}}, {"cls_lc": [[516, 0], [532, 26]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[517, 4], [532, 26]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_text_justification", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "text_justification"], ["self", "assertEqual", "text_justification"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestTextJustification.test_text_justification", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestTextJustification", "q_name": "TestTextJustification", "variables": {}, "variables_p": {}}, {"cls_lc": [[535, 0], [539, 59]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[536, 4], [539, 59]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_min_distance", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "min_distance"], ["self", "assertEqual", "min_distance"], ["self", "assertEqual", "min_distance"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestMinDistance.test_min_distance", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestMinDistance", "q_name": "TestMinDistance", "variables": {}, "variables_p": {}}, {"cls_lc": [[541, 0], [545, 59]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[542, 4], [545, 59]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_min_distance", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "min_distance_dp"], ["self", "assertEqual", "min_distance_dp"], ["self", "assertEqual", "min_distance"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestMinDistanceDP.test_min_distance", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestMinDistanceDP", "q_name": "TestMinDistanceDP", "variables": {}, "variables_p": {}}, {"cls_lc": [[548, 0], [564, 62]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[549, 4], [564, 62]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_longest_common_prefix", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "longest_common_prefix_v1"], ["self", "assertEqual", "longest_common_prefix_v1"], ["self", "assertEqual", "longest_common_prefix_v2"], ["self", "assertEqual", "longest_common_prefix_v2"], ["self", "assertEqual", "longest_common_prefix_v3"], ["self", "assertEqual", "longest_common_prefix_v3"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestLongestCommonPrefix.test_longest_common_prefix", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestLongestCommonPrefix", "q_name": "TestLongestCommonPrefix", "variables": {}, "variables_p": {}}, {"cls_lc": [[567, 0], [570, 62]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[568, 4], [570, 62]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_first_unique_char", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "first_unique_char"], ["self", "assertEqual", "first_unique_char"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestFirstUniqueChar.test_first_unique_char", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestFirstUniqueChar", "q_name": "TestFirstUniqueChar", "variables": {}, "variables_p": {}}, {"cls_lc": [[573, 0], [577, 57]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[574, 4], [577, 57]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_repeat_substring", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertTrue", "repeat_substring"], ["self", "assertFalse", "repeat_substring"], ["self", "assertTrue", "repeat_substring"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestRepeatSubstring.test_repeat_substring", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestRepeatSubstring", "q_name": "TestRepeatSubstring", "variables": {}, "variables_p": {}}, {"cls_lc": [[580, 0], [592, 68]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[588, 4], [592, 68]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_atbash_cipher", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "atbash"], ["self", "assertEqual", "atbash"], ["self", "assertEqual", "atbash"], ["self", "assertEqual", "atbash"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestAtbashCipher.test_atbash_cipher", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestAtbashCipher", "q_name": "TestAtbashCipher", "variables": {}, "variables_p": {}}, {"cls_lc": [[595, 0], [605, 61]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[601, 4], [605, 61]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_longest_palindromic_substring", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "longest_palindrome"], ["self", "assertEqual", "longest_palindrome"], ["self", "assertEqual", "longest_palindrome"], ["self", "assertEqual", "longest_palindrome"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestLongestPalindromicSubstring.test_longest_palindromic_substring", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestLongestPalindromicSubstring", "q_name": "TestLongestPalindromicSubstring", "variables": {}, "variables_p": {}}, {"cls_lc": [[608, 0], [621, 78]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[617, 4], [621, 78]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_knuth_morris_pratt", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "knuth_morris_pratt"], ["self", "assertEqual", "knuth_morris_pratt"], ["self", "assertEqual", "knuth_morris_pratt"], ["self", "assertEqual", "knuth_morris_pratt"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestKnuthMorrisPratt.test_knuth_morris_pratt", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestKnuthMorrisPratt", "q_name": "TestKnuthMorrisPratt", "variables": {}, "variables_p": {}}, {"cls_lc": [[624, 0], [700, 35]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[632, 4], [640, 36]], "fn_var_ln": {"res": [[637, 8], [637, 11]], "string": [[634, 8], [634, 14]]}, "fn_var_occur": {"res": [["res", "panagram", "string"], ["self", "assertEqual", "False", "res"]], "string": [["res", "panagram", "string"]]}, "name": "test_empty_string", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "False", "res"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestPanagram.test_empty_string", "ret_exprs": [], "ret_type": "", "variables": {"res": "", "string": ""}, "variables_p": {"res": [["Pattern[str]", 0.5485299048300796]], "string": [["Tuple[Literal, Literal]", 0.2903843074218416], ["List[str]", 0.16355207742223796], ["str", 0.11246566060846983]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[642, 4], [650, 36]], "fn_var_ln": {"res": [[647, 8], [647, 11]], "string": [[644, 8], [644, 14]]}, "fn_var_occur": {"res": [["res", "panagram", "string"], ["self", "assertEqual", "False", "res"]], "string": [["res", "panagram", "string"]]}, "name": "test_single_word_non_panagram", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "False", "res"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestPanagram.test_single_word_non_panagram", "ret_exprs": [], "ret_type": "", "variables": {"res": "", "string": ""}, "variables_p": {"res": [["Pattern[str]", 0.5485299048300796]], "string": [["Tuple[Literal, Literal]", 0.2903843074218416], ["List[str]", 0.16355207742223796], ["str", 0.11246566060846983]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[652, 4], [660, 35]], "fn_var_ln": {"res": [[657, 8], [657, 11]], "string": [[654, 8], [654, 14]]}, "fn_var_occur": {"res": [["res", "panagram", "string"], ["self", "assertEqual", "True", "res"]], "string": [["res", "panagram", "string"]]}, "name": "test_fox_panagram_no_spaces", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "True", "res"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestPanagram.test_fox_panagram_no_spaces", "ret_exprs": [], "ret_type": "", "variables": {"res": "", "string": ""}, "variables_p": {"res": [["Pattern[str]", 1.0]], "string": [["Tuple[Literal, Literal]", 0.2903843074218416], ["List[str]", 0.16355207742223796], ["str", 0.11246566060846983]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[662, 4], [670, 35]], "fn_var_ln": {"res": [[667, 8], [667, 11]], "string": [[664, 8], [664, 14]]}, "fn_var_occur": {"res": [["res", "panagram", "string"], ["self", "assertEqual", "True", "res"]], "string": [["res", "panagram", "string"]]}, "name": "test_fox_panagram_mixed_case", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "True", "res"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestPanagram.test_fox_panagram_mixed_case", "ret_exprs": [], "ret_type": "", "variables": {"res": "", "string": ""}, "variables_p": {"res": [["Pattern[str]", 1.0]], "string": [["Tuple[Literal, Literal]", 0.2903843074218416], ["List[str]", 0.16355207742223796], ["str", 0.11246566060846983]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[672, 4], [680, 36]], "fn_var_ln": {"res": [[677, 8], [677, 11]], "string": [[674, 8], [674, 14]]}, "fn_var_occur": {"res": [["res", "panagram", "string"], ["self", "assertEqual", "False", "res"]], "string": [["res", "panagram", "string"]]}, "name": "test_whitespace_punctuation", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "False", "res"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestPanagram.test_whitespace_punctuation", "ret_exprs": [], "ret_type": "", "variables": {"res": "", "string": ""}, "variables_p": {"res": [["Pattern[str]", 0.5485299048300796]], "string": [["Tuple[Literal, Literal]", 0.2903843074218416], ["List[str]", 0.16355207742223796], ["str", 0.11246566060846983]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[682, 4], [690, 35]], "fn_var_ln": {"res": [[687, 8], [687, 11]], "string": [[684, 8], [684, 14]]}, "fn_var_occur": {"res": [["res", "panagram", "string"], ["self", "assertEqual", "True", "res"]], "string": [["res", "panagram", "string"]]}, "name": "test_fox_panagram", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "True", "res"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestPanagram.test_fox_panagram", "ret_exprs": [], "ret_type": "", "variables": {"res": "", "string": ""}, "variables_p": {"res": [["Pattern[str]", 1.0]], "string": [["Tuple[Literal, Literal]", 0.2903843074218416], ["List[str]", 0.16355207742223796], ["str", 0.11246566060846983]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[692, 4], [700, 35]], "fn_var_ln": {"res": [[697, 8], [697, 11]], "string": [[694, 8], [694, 14]]}, "fn_var_occur": {"res": [["res", "panagram", "string"], ["self", "assertEqual", "True", "res"]], "string": [["res", "panagram", "string"]]}, "name": "test_swedish_panagram", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "True", "res"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestPanagram.test_swedish_panagram", "ret_exprs": [], "ret_type": "", "variables": {"res": "", "string": ""}, "variables_p": {"res": [["Pattern[str]", 1.0]], "string": [["Tuple[Literal, Literal]", 0.2903843074218416], ["List[str]", 0.16355207742223796], ["str", 0.11246566060846983]]}}], "name": "TestPanagram", "q_name": "TestPanagram", "variables": {}, "variables_p": {}}, {"cls_lc": [[703, 0], [728, 42]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[707, 4], [728, 42]], "fn_var_ln": {"expected": [[726, 8], [726, 16]], "result": [[725, 8], [725, 14]]}, "fn_var_occur": {"expected": [["self", "assertEqual", "result", "expected"], ["self", "assertEqual", "result", "expected"], ["self", "assertEqual", "result", "expected"]], "result": [["result", "fizzbuzz", "fizzbuzz"], ["self", "assertEqual", "result", "expected"], ["result", "fizzbuzz", "fizzbuzz"], ["self", "assertEqual", "result", "expected"], ["result", "fizzbuzz", "fizzbuzz"], ["self", "assertEqual", "result", "expected"]]}, "name": "test_fizzbuzz", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertRaises", "ValueError", "fizzbuzz", "fizzbuzz"], ["self", "assertRaises", "TypeError", "fizzbuzz", "fizzbuzz"], ["self", "assertEqual", "result", "expected"], ["self", "assertEqual", "result", "expected"], ["self", "assertEqual", "result", "expected"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestFizzbuzz.test_fizzbuzz", "ret_exprs": [], "ret_type": "", "variables": {"expected": "", "result": ""}, "variables_p": {"expected": [["list", 0.9080524962187199], ["str", 0.09194750378128007]], "result": [["Counter[Any]", 0.27833928064661095], ["list", 0.14631710729412092], ["Dict[str, Any]", 0.108538998841807], ["List[bytes]", 0.10246531950410483], ["Dict[str, List[int]]", 0.09668610384024169], ["bool", 0.08624268898271756]]}}], "name": "TestFizzbuzz", "q_name": "TestFizzbuzz", "variables": {}, "variables_p": {}}], "funcs": [], "imports": ["algorithms", "strings", "add_binary", "match_symbol", "match_symbol_1", "bracket", "decode_string", "delete_reoccurring_characters", "domain_name_1", "domain_name_2", "encode", "decode", "group_anagrams", "int_to_roman", "is_palindrome", "is_palindrome_reverse", "is_palindrome_two_pointer", "is_palindrome_stack", "is_palindrome_deque", "is_rotated", "is_rotated_v1", "license_number", "make_sentence", "is_merge_recursive", "is_merge_iterative", "multiply", "is_one_edit", "is_one_edit2", "rabin_karp", "ultra_pythonic", "iterative", "recursive", "pythonic", "reverse_vowel", "reverse_words", "roman_to_int", "is_valid_coordinates_0", "word_squares", "convert_morse_word", "unique_morse", "judge_circle", "strong_password", "caesar_cipher", "check_pangram", "contain_string", "count_binary_substring", "repeat_string", "text_justification", "min_distance", "min_distance_dp", "longest_common_prefix_v1", "longest_common_prefix_v2", "longest_common_prefix_v3", "rotate", "rotate_alt", "first_unique_char", "repeat_substring", "atbash", "longest_palindrome", "knuth_morris_pratt", "panagram", "fizzbuzz", "unittest"], "mod_var_ln": {}, "mod_var_occur": {}, "no_types_annot": {"D": 0, "I": 0, "U": 89}, "session_id": "9LhypQkmR-xxxYZaj8GBWDEP_nP_HpOEoy2diF7H8zg", "set": null, "tc": [false, null], "type_annot_cove": 0.0, "typed_seq": "", "untyped_seq": "", "variables": {}, "variables_p": {}}}