{"error": null, "response": {"classes": [{"cls_lc": [[24, 0], [31, 66]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[25, 4], [27, 62]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_max_profit_naive", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "max_profit_naive"], ["self", "assertEqual", "max_profit_naive"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestBuySellStock.test_max_profit_naive", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[29, 4], [31, 66]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_max_profit_optimized", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "max_profit_optimized"], ["self", "assertEqual", "max_profit_optimized"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestBuySellStock.test_max_profit_optimized", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestBuySellStock", "q_name": "TestBuySellStock", "variables": {}, "variables_p": {}}, {"cls_lc": [[34, 0], [41, 56]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[35, 4], [37, 46]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_climb_stairs", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "climb_stairs"], ["self", "assertEqual", "climb_stairs"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestClimbingStairs.test_climb_stairs", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[39, 4], [41, 56]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_climb_stairs_optimized", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "climb_stairs_optimized"], ["self", "assertEqual", "climb_stairs_optimized"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestClimbingStairs.test_climb_stairs_optimized", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestClimbingStairs", "q_name": "TestClimbingStairs", "variables": {}, "variables_p": {}}, {"cls_lc": [[44, 0], [47, 52]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[45, 4], [47, 52]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_count", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "count"], ["self", "assertEqual", "count"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestCoinChange.test_count", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestCoinChange", "q_name": "TestCoinChange", "variables": {}, "variables_p": {}}, {"cls_lc": [[50, 0], [55, 68]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[51, 4], [52, 66]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_combination_sum_topdown", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "combination_sum_topdown"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestCombinationSum.test_combination_sum_topdown", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[54, 4], [55, 68]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_combination_sum_bottom_up", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "combination_sum_bottom_up"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestCombinationSum.test_combination_sum_bottom_up", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestCombinationSum", "q_name": "TestCombinationSum", "variables": {}, "variables_p": {}}, {"cls_lc": [[58, 0], [61, 58]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[59, 4], [61, 58]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_edit_distance", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "edit_distance"], ["self", "assertEqual", "edit_distance"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestEditDistance.test_edit_distance", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestEditDistance", "q_name": "TestEditDistance", "variables": {}, "variables_p": {}}, {"cls_lc": [[64, 0], [68, 44]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[65, 4], [68, 44]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_egg_drop", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "egg_drop"], ["self", "assertEqual", "egg_drop"], ["self", "assertEqual", "egg_drop"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestEggDrop.test_egg_drop", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestEggDrop", "q_name": "TestEggDrop", "variables": {}, "variables_p": {}}, {"cls_lc": [[71, 0], [82, 46]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[72, 4], [74, 51]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_fib_recursive", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "fib_recursive"], ["self", "assertEqual", "fib_recursive"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestFib.test_fib_recursive", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[76, 4], [78, 46]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_fib_list", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "fib_list"], ["self", "assertEqual", "fib_list"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestFib.test_fib_list", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[80, 4], [82, 46]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_fib_iter", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "fib_iter"], ["self", "assertEqual", "fib_iter"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestFib.test_fib_iter", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestFib", "q_name": "TestFib", "variables": {}, "variables_p": {}}, {"cls_lc": [[85, 0], [112, 44]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[93, 4], [112, 44]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_hosoya", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "hosoya_testing"], ["self", "assertEqual", "hosoya_testing"], ["self", "assertEqual", "hosoya_testing"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestHosoyaTriangle.test_hosoya", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestHosoyaTriangle", "q_name": "TestHosoyaTriangle", "variables": {}, "variables_p": {}}, {"cls_lc": [[115, 0], [117, 71]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[116, 4], [117, 71]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_house_robber", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "house_robber"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestHouseRobber.test_house_robber", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestHouseRobber", "q_name": "TestHouseRobber", "variables": {}, "variables_p": {}}, {"cls_lc": [[120, 0], [123, 51]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[121, 4], [123, 51]], "fn_var_ln": {"job1": [[122, 8], [122, 12]], "job2": [[122, 14], [122, 18]]}, "fn_var_occur": {"job1": [["job1", "job2", "Job", "Job"], ["self", "assertEqual", "schedule", "job1", "job2"]], "job2": [["job1", "job2", "Job", "Job"], ["self", "assertEqual", "schedule", "job1", "job2"]]}, "name": "test_job_scheduling", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "schedule", "job1", "job2"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestJobScheduling.test_job_scheduling", "ret_exprs": [], "ret_type": "", "variables": {"job1": "", "job2": ""}, "variables_p": {"job1": [["Dict[str, str]", 0.1196384164384517], ["dict", 0.09257884200679432]], "job2": [["Dict[str, str]", 0.1196384164384517], ["dict", 0.09257884200679432]]}}], "name": "TestJobScheduling", "q_name": "TestJobScheduling", "variables": {}, "variables_p": {}}, {"cls_lc": [[126, 0], [133, 50]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[127, 4], [133, 50]], "fn_var_ln": {"item1": [[131, 8], [131, 13]], "item2": [[131, 15], [131, 20]], "item3": [[131, 22], [131, 27]], "item4": [[131, 29], [131, 34]]}, "fn_var_occur": {"item1": [["item1", "item2", "item3", "Item", "Item", "Item"], ["self", "assertEqual", "get_maximum_value", "item1", "item2", "item3"], ["item1", "item2", "item3", "item4", "Item", "Item", "Item", "Item"], ["self", "assertEqual", "get_maximum_value", "item1", "item2", "item3", "item4"]], "item2": [["item1", "item2", "item3", "Item", "Item", "Item"], ["self", "assertEqual", "get_maximum_value", "item1", "item2", "item3"], ["item1", "item2", "item3", "item4", "Item", "Item", "Item", "Item"], ["self", "assertEqual", "get_maximum_value", "item1", "item2", "item3", "item4"]], "item3": [["item1", "item2", "item3", "Item", "Item", "Item"], ["self", "assertEqual", "get_maximum_value", "item1", "item2", "item3"], ["item1", "item2", "item3", "item4", "Item", "Item", "Item", "Item"], ["self", "assertEqual", "get_maximum_value", "item1", "item2", "item3", "item4"]], "item4": [["item1", "item2", "item3", "item4", "Item", "Item", "Item", "Item"], ["self", "assertEqual", "get_maximum_value", "item1", "item2", "item3", "item4"]]}, "name": "test_get_maximum_value", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "get_maximum_value", "item1", "item2", "item3"], ["self", "assertEqual", "get_maximum_value", "item1", "item2", "item3", "item4"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestKnapsack.test_get_maximum_value", "ret_exprs": [], "ret_type": "", "variables": {"item1": "", "item2": "", "item3": "", "item4": ""}, "variables_p": {"item1": [["list", 0.5810809674611213], ["MutableMapping", 0.09589143784779224]], "item2": [["list", 0.5810809674611213], ["MutableMapping", 0.09589143784779224]], "item3": [["list", 0.5810809674611213], ["MutableMapping", 0.09589143784779224]], "item4": [["acquisition.item.Item", 0.0841650182246044], ["needlestack.balancers.knapsack.Item", 0.0719728216668966]]}}], "name": "TestKnapsack", "q_name": "TestKnapsack", "variables": {}, "variables_p": {}}, {"cls_lc": [[136, 0], [139, 69]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[137, 4], [139, 69]], "fn_var_ln": {"sequence": [[138, 8], [138, 16]]}, "fn_var_occur": {"sequence": [["self", "assertEqual", "longest_increasing_subsequence", "sequence"]]}, "name": "test_longest_increasing_subsequence", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "longest_increasing_subsequence", "sequence"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestLongestIncreasingSubsequence.test_longest_increasing_subsequence", "ret_exprs": [], "ret_type": "", "variables": {"sequence": ""}, "variables_p": {"sequence": [["list", 0.30000000000000004], ["Dict[str, object]", 0.2], ["int", 0.2], ["dict", 0.1], ["str", 0.1]]}}], "name": "TestLongestIncreasingSubsequence", "q_name": "TestLongestIncreasingSubsequence", "variables": {}, "variables_p": {}}, {"cls_lc": [[142, 0], [145, 69]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[143, 4], [145, 69]], "fn_var_ln": {"sequence": [[144, 8], [144, 16]]}, "fn_var_occur": {"sequence": [["self", "assertEqual", "longest_increasing_subsequence", "sequence"]]}, "name": "test_longest_increasing_subsequence_optimized", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "longest_increasing_subsequence", "sequence"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestLongestIncreasingSubsequenceOptimized.test_longest_increasing_subsequence_optimized", "ret_exprs": [], "ret_type": "", "variables": {"sequence": ""}, "variables_p": {"sequence": [["list", 0.30000000000000004], ["Dict[str, object]", 0.2], ["int", 0.2], ["dict", 0.1], ["str", 0.1]]}}], "name": "TestLongestIncreasingSubsequenceOptimized", "q_name": "TestLongestIncreasingSubsequenceOptimized", "variables": {}, "variables_p": {}}, {"cls_lc": [[148, 0], [151, 69]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[149, 4], [151, 69]], "fn_var_ln": {"sequence": [[150, 8], [150, 16]]}, "fn_var_occur": {"sequence": [["self", "assertEqual", "longest_increasing_subsequence", "sequence"]]}, "name": "test_longest_increasing_subsequence_optimized2", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "longest_increasing_subsequence", "sequence"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestLongestIncreasingSubsequenceOptimized2.test_longest_increasing_subsequence_optimized2", "ret_exprs": [], "ret_type": "", "variables": {"sequence": ""}, "variables_p": {"sequence": [["list", 0.30000000000000004], ["Dict[str, object]", 0.2], ["int", 0.2], ["dict", 0.1], ["str", 0.1]]}}], "name": "TestLongestIncreasingSubsequenceOptimized2", "q_name": "TestLongestIncreasingSubsequenceOptimized2", "variables": {}, "variables_p": {}}, {"cls_lc": [[154, 0], [158, 48]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[155, 4], [158, 48]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "test_int_divide", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "int_divide"], ["self", "assertEqual", "int_divide"], ["self", "assertEqual", "int_divide"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestIntDivide.test_int_divide", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "name": "TestIntDivide", "q_name": "TestIntDivide", "variables": {}, "variables_p": {}}, {"cls_lc": [[161, 0], [186, 57]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[162, 4], [186, 57]], "fn_var_ln": {"k1": [[165, 8], [165, 10]], "k2": [[170, 8], [170, 10]], "k3": [[175, 8], [175, 10]], "k4": [[180, 8], [180, 10]], "k5": [[185, 8], [185, 10]], "n1": [[164, 8], [164, 10]], "n2": [[169, 8], [169, 10]], "n3": [[174, 8], [174, 10]], "n4": [[179, 8], [179, 10]], "n5": [[184, 8], [184, 10]]}, "fn_var_occur": {"k1": [["self", "assertEqual", "find_k_factor", "n1", "k1"]], "k2": [["self", "assertEqual", "find_k_factor", "n2", "k2"]], "k3": [["self", "assertEqual", "find_k_factor", "n3", "k3"]], "k4": [["self", "assertEqual", "find_k_factor", "n4", "k4"]], "k5": [["self", "assertEqual", "find_k_factor", "n5", "k5"]], "n1": [["self", "assertEqual", "find_k_factor", "n1", "k1"]], "n2": [["self", "assertEqual", "find_k_factor", "n2", "k2"]], "n3": [["self", "assertEqual", "find_k_factor", "n3", "k3"]], "n4": [["self", "assertEqual", "find_k_factor", "n4", "k4"]], "n5": [["self", "assertEqual", "find_k_factor", "n5", "k5"]]}, "name": "test_kfactor", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "find_k_factor", "n1", "k1"], ["self", "assertEqual", "find_k_factor", "n2", "k2"], ["self", "assertEqual", "find_k_factor", "n3", "k3"], ["self", "assertEqual", "find_k_factor", "n4", "k4"], ["self", "assertEqual", "find_k_factor", "n5", "k5"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "Test_dp_K_Factor.test_kfactor", "ret_exprs": [], "ret_type": "", "variables": {"k1": "", "k2": "", "k3": "", "k4": "", "k5": "", "n1": "", "n2": "", "n3": "", "n4": "", "n5": ""}, "variables_p": {"k1": [["Dict[str, int]", 0.3348600700237082], ["list", 0.18262543809096438], ["str", 0.10753020105378222], ["List[int]", 0.09481262255874907], ["int", 0.08481711543247392]], "k2": [["Dict[str, int]", 0.3348600700237082], ["list", 0.18262543809096438], ["str", 0.10753020105378222], ["List[int]", 0.09481262255874907], ["int", 0.08481711543247392]], "k3": [["Dict[str, int]", 0.3348600700237082], ["list", 0.18262543809096438], ["str", 0.10753020105378222], ["List[int]", 0.09481262255874907], ["int", 0.08481711543247392]], "k4": [["Dict[str, int]", 0.3348600700237082], ["list", 0.18262543809096438], ["str", 0.10753020105378222], ["List[int]", 0.09481262255874907], ["int", 0.08481711543247392]], "k5": [["Dict[str, int]", 0.3348600700237082], ["list", 0.18262543809096438], ["str", 0.10753020105378222], ["List[int]", 0.09481262255874907], ["int", 0.08481711543247392]], "n1": [["list", 0.3526329789652146], ["int", 0.27300312237287383], ["str", 0.19135767873865198], ["Dict[str, Union[int, str]]", 0.09727458684179033], ["bool", 0.08573163308146926]], "n2": [["list", 0.3526329789652146], ["int", 0.27300312237287383], ["str", 0.19135767873865198], ["Dict[str, Union[int, str]]", 0.09727458684179033], ["bool", 0.08573163308146926]], "n3": [["list", 0.3526329789652146], ["int", 0.27300312237287383], ["str", 0.19135767873865198], ["Dict[str, Union[int, str]]", 0.09727458684179033], ["bool", 0.08573163308146926]], "n4": [["list", 0.3526329789652146], ["int", 0.27300312237287383], ["str", 0.19135767873865198], ["Dict[str, Union[int, str]]", 0.09727458684179033], ["bool", 0.08573163308146926]], "n5": [["list", 0.3526329789652146], ["int", 0.27300312237287383], ["str", 0.19135767873865198], ["Dict[str, Union[int, str]]", 0.09727458684179033], ["bool", 0.08573163308146926]]}}], "name": "Test_dp_K_Factor", "q_name": "Test_dp_K_Factor", "variables": {}, "variables_p": {}}, {"cls_lc": [[189, 0], [212, 47]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[190, 4], [200, 48]], "fn_var_ln": {"L": [[193, 8], [193, 9]], "W": [[194, 8], [194, 9]], "res": [[197, 8], [197, 11]], "trees": [[192, 8], [192, 13]]}, "fn_var_occur": {"L": [["res", "planting_trees", "trees", "L", "W"]], "W": [["res", "planting_trees", "trees", "L", "W"]], "res": [["res", "planting_trees", "trees", "L", "W"], ["self", "assertEqual", "res"]], "trees": [["res", "planting_trees", "trees", "L", "W"]]}, "name": "test_simple", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "res"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestPlantingTrees.test_simple", "ret_exprs": [], "ret_type": "", "variables": {"L": "", "W": "", "res": "", "trees": ""}, "variables_p": {"L": [["Optional[str]", 0.2832542838350239], ["tuple", 0.20431818138533803], ["Tuple[str, str, str, str]", 0.1102054009490471], ["Tuple[str]", 0.09351962181917159], ["int", 0.07991229543598498], ["List[Tuple[str, bool, str]]", 0.07774009830357088], ["str", 0.07632605495897637], ["List[Tuple[str, str]]", 0.07472406331288711]], "W": [["bool", 0.3710265081022188], ["List[str]", 0.25165429422243296], ["str", 0.2263915186052089], ["bytes", 0.07546383953506963], ["int", 0.07546383953506963]], "res": [], "trees": [["int", 0.3003322223857344], ["list", 0.11121871338703754], ["str", 0.10734675715919671], ["bool", 0.10297184200921877], ["Union[Literal, Literal]", 0.0906668426130608]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[202, 4], [212, 47]], "fn_var_ln": {"L": [[205, 8], [205, 9]], "W": [[206, 8], [206, 9]], "res": [[209, 8], [209, 11]], "trees": [[204, 8], [204, 13]]}, "fn_var_occur": {"L": [["res", "planting_trees", "trees", "L", "W"]], "W": [["res", "planting_trees", "trees", "L", "W"]], "res": [["res", "planting_trees", "trees", "L", "W"], ["self", "assertEqual", "res"]], "trees": [["res", "planting_trees", "trees", "L", "W"]]}, "name": "test_simple2", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertEqual", "res"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestPlantingTrees.test_simple2", "ret_exprs": [], "ret_type": "", "variables": {"L": "", "W": "", "res": "", "trees": ""}, "variables_p": {"L": [["Optional[str]", 0.2832542838350239], ["tuple", 0.20431818138533803], ["Tuple[str, str, str, str]", 0.1102054009490471], ["Tuple[str]", 0.09351962181917159], ["int", 0.07991229543598498], ["List[Tuple[str, bool, str]]", 0.07774009830357088], ["str", 0.07632605495897637], ["List[Tuple[str, str]]", 0.07472406331288711]], "W": [["bool", 0.3710265081022188], ["List[str]", 0.25165429422243296], ["str", 0.2263915186052089], ["bytes", 0.07546383953506963], ["int", 0.07546383953506963]], "res": [], "trees": [["int", 0.3003322223857344], ["list", 0.11121871338703754], ["str", 0.10734675715919671], ["bool", 0.10297184200921877], ["Union[Literal, Literal]", 0.0906668426130608]]}}], "name": "TestPlantingTrees", "q_name": "TestPlantingTrees", "variables": {}, "variables_p": {}}, {"cls_lc": [[214, 0], [259, 54]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[215, 4], [218, 54]], "fn_var_ln": {"p": [[217, 8], [217, 9]], "s": [[216, 8], [216, 9]]}, "fn_var_occur": {"p": [["self", "assertTrue", "regex_matching", "is_match", "s", "p"]], "s": [["self", "assertTrue", "regex_matching", "is_match", "s", "p"]]}, "name": "test_none_0", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertTrue", "regex_matching", "is_match", "s", "p"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestRegexMatching.test_none_0", "ret_exprs": [], "ret_type": "", "variables": {"p": "", "s": ""}, "variables_p": {"p": [["Dict[str, str]", 0.4035129185212268], ["int", 0.25947923027117814], ["str", 0.16774624296449525], ["Dict[str, List[str]]", 0.0907835463849007], ["list", 0.07847806185819912]], "s": [["str", 0.4828071912222146], ["Pattern[str]", 0.09118555809734649], ["Union[str]", 0.089105253078955]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[220, 4], [223, 55]], "fn_var_ln": {"p": [[222, 8], [222, 9]], "s": [[221, 8], [221, 9]]}, "fn_var_occur": {"p": [["self", "assertFalse", "regex_matching", "is_match", "s", "p"]], "s": [["self", "assertFalse", "regex_matching", "is_match", "s", "p"]]}, "name": "test_none_1", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertFalse", "regex_matching", "is_match", "s", "p"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestRegexMatching.test_none_1", "ret_exprs": [], "ret_type": "", "variables": {"p": "", "s": ""}, "variables_p": {"p": [["Dict[str, str]", 0.4035129185212268], ["int", 0.25947923027117814], ["str", 0.16774624296449525], ["Dict[str, List[str]]", 0.0907835463849007], ["list", 0.07847806185819912]], "s": [["str", 0.4828071912222146], ["Pattern[str]", 0.09118555809734649], ["Union[str]", 0.089105253078955]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[225, 4], [228, 54]], "fn_var_ln": {"p": [[227, 8], [227, 9]], "s": [[226, 8], [226, 9]]}, "fn_var_occur": {"p": [["self", "assertTrue", "regex_matching", "is_match", "s", "p"]], "s": [["self", "assertTrue", "regex_matching", "is_match", "s", "p"]]}, "name": "test_no_symbol_equal", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertTrue", "regex_matching", "is_match", "s", "p"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestRegexMatching.test_no_symbol_equal", "ret_exprs": [], "ret_type": "", "variables": {"p": "", "s": ""}, "variables_p": {"p": [["Dict[str, str]", 0.4035129185212268], ["int", 0.25947923027117814], ["str", 0.16774624296449525], ["Dict[str, List[str]]", 0.0907835463849007], ["list", 0.07847806185819912]], "s": [["str", 0.4828071912222146], ["Pattern[str]", 0.09118555809734649], ["Union[str]", 0.089105253078955]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[230, 4], [233, 55]], "fn_var_ln": {"p": [[232, 8], [232, 9]], "s": [[231, 8], [231, 9]]}, "fn_var_occur": {"p": [["self", "assertFalse", "regex_matching", "is_match", "s", "p"]], "s": [["self", "assertFalse", "regex_matching", "is_match", "s", "p"]]}, "name": "test_no_symbol_not_equal_0", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertFalse", "regex_matching", "is_match", "s", "p"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestRegexMatching.test_no_symbol_not_equal_0", "ret_exprs": [], "ret_type": "", "variables": {"p": "", "s": ""}, "variables_p": {"p": [["Dict[str, str]", 0.4035129185212268], ["int", 0.25947923027117814], ["str", 0.16774624296449525], ["Dict[str, List[str]]", 0.0907835463849007], ["list", 0.07847806185819912]], "s": [["str", 0.4828071912222146], ["Pattern[str]", 0.09118555809734649], ["Union[str]", 0.089105253078955]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[235, 4], [238, 55]], "fn_var_ln": {"p": [[237, 8], [237, 9]], "s": [[236, 8], [236, 9]]}, "fn_var_occur": {"p": [["self", "assertFalse", "regex_matching", "is_match", "s", "p"]], "s": [["self", "assertFalse", "regex_matching", "is_match", "s", "p"]]}, "name": "test_no_symbol_not_equal_1", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertFalse", "regex_matching", "is_match", "s", "p"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestRegexMatching.test_no_symbol_not_equal_1", "ret_exprs": [], "ret_type": "", "variables": {"p": "", "s": ""}, "variables_p": {"p": [["Dict[str, str]", 0.4035129185212268], ["int", 0.25947923027117814], ["str", 0.16774624296449525], ["Dict[str, List[str]]", 0.0907835463849007], ["list", 0.07847806185819912]], "s": [["str", 0.4828071912222146], ["Pattern[str]", 0.09118555809734649], ["Union[str]", 0.089105253078955]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[240, 4], [243, 54]], "fn_var_ln": {"p": [[242, 8], [242, 9]], "s": [[241, 8], [241, 9]]}, "fn_var_occur": {"p": [["self", "assertTrue", "regex_matching", "is_match", "s", "p"]], "s": [["self", "assertTrue", "regex_matching", "is_match", "s", "p"]]}, "name": "test_symbol_0", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertTrue", "regex_matching", "is_match", "s", "p"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestRegexMatching.test_symbol_0", "ret_exprs": [], "ret_type": "", "variables": {"p": "", "s": ""}, "variables_p": {"p": [["Dict[str, str]", 0.4035129185212268], ["int", 0.25947923027117814], ["str", 0.16774624296449525], ["Dict[str, List[str]]", 0.0907835463849007], ["list", 0.07847806185819912]], "s": [["str", 0.4828071912222146], ["Pattern[str]", 0.09118555809734649], ["Union[str]", 0.089105253078955]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[245, 4], [248, 54]], "fn_var_ln": {"p": [[247, 8], [247, 9]], "s": [[246, 8], [246, 9]]}, "fn_var_occur": {"p": [["self", "assertTrue", "regex_matching", "is_match", "s", "p"]], "s": [["self", "assertTrue", "regex_matching", "is_match", "s", "p"]]}, "name": "test_symbol_1", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertTrue", "regex_matching", "is_match", "s", "p"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestRegexMatching.test_symbol_1", "ret_exprs": [], "ret_type": "", "variables": {"p": "", "s": ""}, "variables_p": {"p": [["Dict[str, str]", 0.4035129185212268], ["int", 0.25947923027117814], ["str", 0.16774624296449525], ["Dict[str, List[str]]", 0.0907835463849007], ["list", 0.07847806185819912]], "s": [["str", 0.4828071912222146], ["Pattern[str]", 0.09118555809734649], ["Union[str]", 0.089105253078955]]}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[250, 4], [259, 54]], "fn_var_ln": {"p": [[258, 8], [258, 9]], "s": [[257, 8], [257, 9]]}, "fn_var_occur": {"p": [["self", "assertTrue", "regex_matching", "is_match", "s", "p"]], "s": [["self", "assertTrue", "regex_matching", "is_match", "s", "p"]]}, "name": "test_symbol_2", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "assertTrue", "regex_matching", "is_match", "s", "p"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "TestRegexMatching.test_symbol_2", "ret_exprs": [], "ret_type": "", "variables": {"p": "", "s": ""}, "variables_p": {"p": [["Dict[str, str]", 0.4035129185212268], ["int", 0.25947923027117814], ["str", 0.16774624296449525], ["Dict[str, List[str]]", 0.0907835463849007], ["list", 0.07847806185819912]], "s": [["str", 0.4828071912222146], ["Pattern[str]", 0.09118555809734649], ["Union[str]", 0.089105253078955]]}}], "name": "TestRegexMatching", "q_name": "TestRegexMatching", "variables": {}, "variables_p": {}}], "funcs": [], "imports": ["algorithms", "dp", "max_profit_naive", "max_profit_optimized", "climb_stairs", "climb_stairs_optimized", "count", "combination_sum_topdown", "combination_sum_bottom_up", "edit_distance", "egg_drop", "fib_recursive", "fib_list", "fib_iter", "hosoya_testing", "house_robber", "Job", "schedule", "Item", "get_maximum_value", "longest_increasing_subsequence", "longest_increasing_subsequence_optimized", "longest_increasing_subsequence_optimized2", "int_divide", "find_k_factor", "planting_trees", "regex_matching", "unittest"], "mod_var_ln": {}, "mod_var_occur": {}, "no_types_annot": {"D": 0, "I": 0, "U": 74}, "session_id": "EUmrHkKl-KMyswma0QaOB2-hUfxC-D9YSMnEtU6BOjs", "set": null, "tc": [false, null], "type_annot_cove": 0.0, "typed_seq": "", "untyped_seq": "", "variables": {}, "variables_p": {}}}