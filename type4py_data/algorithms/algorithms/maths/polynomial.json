{"error": null, "response": {"classes": [{"cls_lc": [[9, 0], [283, 27]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": "Create a monomial in the given variables:", "long_descr": null, "ret": null}, "fn_lc": [[15, 4], [52, 61]], "fn_var_ln": {"coeff": [[52, 8], [52, 18]], "variables": [[34, 8], [34, 22]]}, "fn_var_occur": {"coeff": [["coeff", "None"], ["coeff", "Fraction"], ["coeff", "Fraction"], ["self", "coeff", "Fraction"], ["self", "coeff", "Monomial", "_rationalize_if_possible", "coeff"], ["self", "coeff", "Monomial", "_rationalize_if_possible", "coeff"]], "variables": [["self", "variables", "dict"], ["len", "variables"], ["len", "variables"], ["variables", "i"], ["self", "variables", "i", "variables", "i"]]}, "name": "__init__", "params": {"coeff": "typing.Union[builtins.int, builtins.float, fractions.Fraction, None]", "self": "", "variables": "typing.Dict[builtins.int, builtins.int]"}, "params_descr": {"coeff": "", "self": "", "variables": ""}, "params_occur": {"coeff": [["coeff", "None"], ["coeff", "Fraction"], ["coeff", "Fraction"], ["self", "coeff", "Fraction"], ["self", "coeff", "Monomial", "_rationalize_if_possible", "coeff"], ["self", "coeff", "Monomial", "_rationalize_if_possible", "coeff"]], "self": [["self", "variables", "dict"], ["self", "coeff", "Fraction"], ["self", "coeff", "Monomial", "_rationalize_if_possible", "coeff"], ["self", "variables", "i", "variables", "i"], ["self", "coeff", "Monomial", "_rationalize_if_possible", "coeff"]], "variables": [["self", "variables", "dict"], ["len", "variables"], ["len", "variables"], ["variables", "i"], ["self", "variables", "i", "variables", "i"]]}, "params_p": {"args": [], "coeff": [["Union[List, Dict, None]", 0.2727098894252696], ["Optional[str]", 0.10863143359985758]], "kwargs": [], "self": [], "variables": [["Callable", 0.09162972195313816], ["dict", 0.09055915395757543], ["List[Dict[str, Any]]", 0.0887003329338305], ["Dict[str, Any]", 0.08525435841407748]]}, "q_name": "Monomial.__init__", "ret_exprs": ["return", "return"], "ret_type": "None", "ret_type_p": [["Union[tuple, list]", 0.10975118226429699]], "variables": {"coeff": "", "variables": ""}, "variables_p": {"coeff": [["int", 0.3191093370645385]], "variables": [["Generator[Any, None, None]", 0.23607709898856336], ["list", 0.1914733598696488], ["int", 0.10159582083169785], ["List[Callable]", 0.09707195815884057], ["List[Callable[..., Any]]", 0.09495043557173943], ["List[Type[Any]]", 0.09360222205475056], ["Type[Callable[..., Any]]", 0.09283899713301204], ["DefaultDict[str, List[Any]]", 0.09239010739174743]]}}, {"docstring": {"func": "A helper for converting numbers", "long_descr": "to Fraction only when possible.", "ret": null}, "fn_lc": [[55, 4], [64, 22]], "fn_var_ln": {"res": [[61, 12], [61, 15]]}, "fn_var_occur": {"res": [["res", "Fraction", "num"], ["Fraction", "res", "numerator", "res", "denominator"]]}, "name": "_rationalize_if_possible", "params": {"num": ""}, "params_descr": {"num": ""}, "params_occur": {"num": [["isinstance", "num", "Rational"], ["res", "Fraction", "num"]]}, "params_p": {"args": [], "kwargs": [], "num": [["float", 0.4372795084547346], ["Callable[[List], bool]", 0.17010405537393433], ["int", 0.10260671418526596], ["set", 0.08262387127440292]], "self": []}, "q_name": "Monomial._rationalize_if_possible", "ret_exprs": ["return Fraction(res.numerator, res.denominator)", "return num"], "ret_type": "", "ret_type_p": [["str", 0.29555977392686794], ["bytes", 0.09931578129196686], ["int", 0.08502801475296774], ["float", 0.08263379303964645], ["Optional[int]", 0.0772560447438223]], "variables": {"res": ""}, "variables_p": {"res": [["int", 0.4859095124066994], ["float", 0.18602521501743774], ["Dict[str, Union[Any, Any]]", 0.13825382485629273], ["list", 0.09540872263465527], ["dict", 0.09440272508491479]]}}, {"docstring": {"func": "Return True if other is a monomial", "long_descr": "and is equivalent to self up to a scalar\nmultiple.", "ret": null}, "fn_lc": [[67, 4], [75, 48]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "equal_upto_scalar", "params": {"other": "", "self": ""}, "params_descr": {"other": "", "self": ""}, "params_occur": {"other": [["isinstance", "other", "Monomial"], ["other", "variables", "self", "variables"]], "self": [["other", "variables", "self", "variables"]]}, "params_p": {"args": [], "kwargs": [], "other": [], "self": []}, "q_name": "Monomial.equal_upto_scalar", "ret_exprs": ["return other.variables == self.variables"], "ret_type": "builtins.bool", "ret_type_p": [["str", 0.10494027701619939], ["dict", 0.09847114190922535], ["Dict[str, Any]", 0.08909322936021477]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Define the addition of two", "long_descr": "monomials or the addition of\na monomial with an int, float, or a Fraction.", "ret": null}, "fn_lc": [[78, 4], [98, 113]], "fn_var_ln": {"mono": [[91, 12], [91, 16]]}, "fn_var_occur": {"mono": [["mono", "i", "self", "variables", "i", "i", "self", "variables"], ["Monomial", "mono", "Monomial", "_rationalize_if_possible", "self", "coeff", "other", "coeff", "clean"]]}, "name": "__add__", "params": {"other": "typing.Union[builtins.int, builtins.float, fractions.Fraction]", "self": ""}, "params_descr": {"other": "", "self": ""}, "params_occur": {"other": [["isinstance", "other", "int", "isinstance", "other", "float", "isinstance", "other", "Fraction"], ["self", "__add__", "Monomial", "Monomial", "_rationalize_if_possible", "other"], ["isinstance", "other", "Monomial"], ["self", "variables", "other", "variables"], ["Monomial", "mono", "Monomial", "_rationalize_if_possible", "self", "coeff", "other", "coeff", "clean"], ["ValueError", "str", "other", "self", "__str__"]], "self": [["self", "__add__", "Monomial", "Monomial", "_rationalize_if_possible", "other"], ["self", "variables", "other", "variables"], ["mono", "i", "self", "variables", "i", "i", "self", "variables"], ["Monomial", "mono", "Monomial", "_rationalize_if_possible", "self", "coeff", "other", "coeff", "clean"], ["ValueError", "str", "other", "self", "__str__"]]}, "params_p": {"args": [], "kwargs": [], "other": [["Optional[int]", 0.3146486121118097], ["Callable", 0.1002305165940371], ["Optional[\"Cell\"]", 0.08686948266480854]], "self": []}, "q_name": "Monomial.__add__", "ret_exprs": ["return self.__add__(Monomial({}, Monomial._rationalize_if_possible(other)))", "return Monomial(mono, Monomial._rationalize_if_possible(self.coeff + other.coeff)).clean()"], "ret_type": "", "ret_type_p": [["bool", 0.4162928878572619], ["Tuple[int, int]", 0.10170295194810276]], "variables": {"mono": ""}, "variables_p": {"mono": [["Callable", 0.30588011342054683], ["Iterator[Any]", 0.2892188148222808], ["float", 0.1053367886905839], ["Callable[[], Any]", 0.1053367886905839], ["bool", 0.09735534957596081], ["T", 0.09687214480004377]]}}, {"docstring": {"func": "Return True if two monomials", "long_descr": "are equal upto a scalar multiple.", "ret": null}, "fn_lc": [[101, 4], [106, 74]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "__eq__", "params": {"other": "", "self": ""}, "params_descr": {"other": "", "self": ""}, "params_occur": {"other": [["self", "equal_upto_scalar", "other", "self", "coeff", "other", "coeff"]], "self": [["self", "equal_upto_scalar", "other", "self", "coeff", "other", "coeff"]]}, "params_p": {"args": [], "kwargs": [], "other": [["Union[int, float]", 1.3750915781716557e-10], ["Rational", 1.0682415151264677e-10]], "self": []}, "q_name": "Monomial.__eq__", "ret_exprs": ["return self.equal_upto_scalar(other) and self.coeff == other.coeff"], "ret_type": "builtins.bool", "ret_type_p": [["str", 0.21242008562943443], ["int", 0.18732340759085803], ["float", 0.09263357936245478]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Multiply two monomials and merge the variables", "long_descr": "in both of them.", "ret": null}, "fn_lc": [[109, 4], [139, 102]], "fn_var_ln": {"mono": [[127, 12], [127, 16]], "temp": [[134, 12], [134, 16]]}, "fn_var_occur": {"mono": [["mono", "i", "self", "variables", "i", "i", "self", "variables"], ["Monomial", "mono", "Monomial", "_rationalize_if_possible", "self", "coeff", "other", "clean"], ["mono", "i", "self", "variables", "i", "i", "self", "variables"], ["i", "mono"], ["mono", "i", "other", "variables", "i"], ["mono", "i", "other", "variables", "i"], ["mono", "k"], ["temp", "k", "mono", "k"]], "temp": [["temp", "dict"], ["temp", "k", "mono", "k"], ["Monomial", "temp", "Monomial", "_rationalize_if_possible", "self", "coeff", "other", "coeff", "clean"]]}, "name": "__mul__", "params": {"other": "typing.Union[builtins.int, builtins.float, fractions.Fraction]", "self": ""}, "params_descr": {"other": "", "self": ""}, "params_occur": {"other": [["isinstance", "other", "float", "isinstance", "other", "int", "isinstance", "other", "Fraction"], ["Monomial", "mono", "Monomial", "_rationalize_if_possible", "self", "coeff", "other", "clean"], ["isinstance", "other", "Monomial"], ["other", "variables"], ["mono", "i", "other", "variables", "i"], ["mono", "i", "other", "variables", "i"], ["Monomial", "temp", "Monomial", "_rationalize_if_possible", "self", "coeff", "other", "coeff", "clean"]], "self": [["mono", "i", "self", "variables", "i", "i", "self", "variables"], ["Monomial", "mono", "Monomial", "_rationalize_if_possible", "self", "coeff", "other", "clean"], ["mono", "i", "self", "variables", "i", "i", "self", "variables"], ["Monomial", "temp", "Monomial", "_rationalize_if_possible", "self", "coeff", "other", "coeff", "clean"]]}, "params_p": {"args": [], "kwargs": [], "other": [["float", 0.21481714940876595]], "self": []}, "q_name": "Monomial.__mul__", "ret_exprs": ["return Monomial(mono, Monomial._rationalize_if_possible(self.coeff * other)).clean()", "return Monomial(temp, Monomial._rationalize_if_possible(self.coeff * other.coeff)).clean()"], "ret_type": "", "ret_type_p": [["int", 0.30000000000000004], ["Callable", 0.2], ["str", 0.1]], "variables": {"mono": "", "temp": ""}, "variables_p": {"mono": [["dict", 0.11220885895883467], ["List[Tuple[Any, Any]]", 0.10885103282195273], ["list", 0.10042284742828436]], "temp": [["dict", 0.48710597679902096], ["Dict[str, str]", 0.2124082715530765], ["Dict[str, Union[Any, Any, Any, Any]]", 0.10502057164525044]]}}, {"docstring": {"func": "Compute the inverse of a monomial.", "long_descr": null, "ret": null}, "fn_lc": [[142, 4], [157, 86]], "fn_var_ln": {"mono": [[152, 8], [152, 12]]}, "fn_var_occur": {"mono": [["mono", "i", "self", "variables", "i", "i", "self", "variables", "self", "variables", "i"], ["mono", "i"], ["Monomial", "mono", "Monomial", "_rationalize_if_possible", "self", "coeff", "clean"]]}, "name": "inverse", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["mono", "i", "self", "variables", "i", "i", "self", "variables", "self", "variables", "i"], ["self", "coeff"], ["Monomial", "mono", "Monomial", "_rationalize_if_possible", "self", "coeff", "clean"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "Monomial.inverse", "ret_exprs": ["return Monomial(mono, Monomial._rationalize_if_possible(1/self.coeff)).clean()"], "ret_type": "", "ret_type_p": [["int", 0.30000000000000004], ["Callable", 0.2], ["str", 0.1]], "variables": {"mono": ""}, "variables_p": {"mono": []}}, {"docstring": {"func": "Compute the division between two monomials", "long_descr": "or a monomial and some other datatype\nlike int/float/Fraction.", "ret": null}, "fn_lc": [[160, 4], [173, 30]], "fn_var_ln": {"mono": [[167, 12], [167, 16]], "o": [[172, 8], [172, 9]]}, "fn_var_occur": {"mono": [["mono", "i", "self", "variables", "i", "i", "self", "variables"], ["Monomial", "mono", "Monomial", "_rationalize_if_possible", "self", "coeff", "other", "clean"]], "o": [["o", "other", "inverse"], ["self", "__mul__", "o"]]}, "name": "__truediv__", "params": {"other": "typing.Union[builtins.int, builtins.float, fractions.Fraction]", "self": ""}, "params_descr": {"other": "", "self": ""}, "params_occur": {"other": [["isinstance", "other", "int", "isinstance", "other", "float", "isinstance", "other", "Fraction"], ["Monomial", "mono", "Monomial", "_rationalize_if_possible", "self", "coeff", "other", "clean"], ["o", "other", "inverse"]], "self": [["mono", "i", "self", "variables", "i", "i", "self", "variables"], ["Monomial", "mono", "Monomial", "_rationalize_if_possible", "self", "coeff", "other", "clean"], ["self", "__mul__", "o"]]}, "params_p": {"args": [], "kwargs": [], "other": [["float", 0.3580815937714201], ["Iterable[Any]", 0.13126759161222748], ["Union[list, 'ListProxy']", 0.08721686475009115]], "self": []}, "q_name": "Monomial.__truediv__", "ret_exprs": ["return Monomial(mono, Monomial._rationalize_if_possible(self.coeff / other)).clean()", "return self.__mul__(o)"], "ret_type": "", "ret_type_p": [["int", 0.30000000000000004], ["Callable", 0.2], ["str", 0.1]], "variables": {"mono": "", "o": ""}, "variables_p": {"mono": [["Callable", 0.30588011342054683], ["Iterator[Any]", 0.2892188148222808], ["float", 0.1053367886905839], ["Callable[[], Any]", 0.1053367886905839], ["bool", 0.09735534957596081], ["T", 0.09687214480004377]], "o": [["Pattern[str]", 0.7903412917359189], ["Pattern[bytes]", 0.10349054022291637]]}}, {"docstring": {"func": "For monomials,", "long_descr": "floor div is the same as true div.", "ret": null}, "fn_lc": [[176, 4], [181, 38]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "__floordiv__", "params": {"other": "typing.Union[builtins.int, builtins.float, fractions.Fraction]", "self": ""}, "params_descr": {"other": "", "self": ""}, "params_occur": {"other": [["self", "__truediv__", "other"]], "self": [["self", "__truediv__", "other"]]}, "params_p": {"args": [], "kwargs": [], "other": [["dict", 0.24999999998650746], ["AbstractSet[T]", 9.152138678985443e-12], ["AbstractSet[T_co]", 9.152138678985443e-12]], "self": []}, "q_name": "Monomial.__floordiv__", "ret_exprs": ["return self.__truediv__(other)"], "ret_type": "", "ret_type_p": [["bool", 0.28692467452883313], ["Optional[str]", 0.07928648954665708], ["Optional[int]", 0.07882633477869071]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Clone the monomial.", "long_descr": null, "ret": null}, "fn_lc": [[184, 4], [189, 94]], "fn_var_ln": {"temp_variables": [[188, 8], [188, 22]]}, "fn_var_occur": {"temp_variables": [["temp_variables", "i", "self", "variables", "i", "i", "self", "variables"], ["Monomial", "temp_variables", "Monomial", "_rationalize_if_possible", "self", "coeff", "clean"]]}, "name": "clone", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["temp_variables", "i", "self", "variables", "i", "i", "self", "variables"], ["Monomial", "temp_variables", "Monomial", "_rationalize_if_possible", "self", "coeff", "clean"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "Monomial.clone", "ret_exprs": ["return Monomial(temp_variables, Monomial._rationalize_if_possible(self.coeff)).clean()"], "ret_type": "", "ret_type_p": [["str", 0.544212027109585], ["List[str]", 0.09041226404703342]], "variables": {"temp_variables": ""}, "variables_p": {"temp_variables": [["tuple", 0.27210923275679005], ["List[str]", 0.2450332871637481], ["list", 0.19551191853630645], ["int", 0.11130120504948754], ["Iterator[Any]", 0.08820186351688841], ["dict", 0.0878424929767795]]}}, {"docstring": {"func": "Clean the monomial by dropping any variables that have power 0.", "long_descr": null, "ret": null}, "fn_lc": [[192, 4], [197, 86]], "fn_var_ln": {"temp_variables": [[196, 8], [196, 22]]}, "fn_var_occur": {"temp_variables": [["temp_variables", "i", "self", "variables", "i", "i", "self", "variables", "self", "variables", "i"], ["Monomial", "temp_variables", "Monomial", "_rationalize_if_possible", "self", "coeff"]]}, "name": "clean", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["temp_variables", "i", "self", "variables", "i", "i", "self", "variables", "self", "variables", "i"], ["Monomial", "temp_variables", "Monomial", "_rationalize_if_possible", "self", "coeff"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "Monomial.clean", "ret_exprs": ["return Monomial(temp_variables, Monomial._rationalize_if_possible(self.coeff))"], "ret_type": "", "ret_type_p": [["str", 0.544212027109585], ["List[str]", 0.09041226404703342]], "variables": {"temp_variables": ""}, "variables_p": {"temp_variables": [["int", 0.21337695591339856], ["Dict[str, str]", 0.17752262024295556], ["list", 0.1277266210290412], ["List[str]", 0.11812629992854959], ["Dict[Any, str]", 0.09052105589678383], ["Dict[str, List[str]]", 0.08986505825168406], ["Type[range]", 0.08875062168111426]]}}, {"docstring": {"func": "Compute the subtraction", "long_descr": "of a monomial and a datatype\nsuch as int, float, Fraction, or Monomial.", "ret": null}, "fn_lc": [[200, 4], [214, 59]], "fn_var_ln": {"mono": [[207, 12], [207, 16]], "other_term": [[210, 12], [210, 22]]}, "fn_var_occur": {"mono": [["mono", "i", "self", "variables", "i", "i", "self", "variables", "self", "variables", "i"], ["len", "mono"], ["other_term", "Monomial", "mono", "Monomial", "_rationalize_if_possible", "other"]], "other_term": [["other_term", "Monomial", "mono", "Monomial", "_rationalize_if_possible", "other"], ["self", "__sub__", "other_term"]]}, "name": "__sub__", "params": {"other": "typing.Union[builtins.int, builtins.float, fractions.Fraction]", "self": ""}, "params_descr": {"other": "", "self": ""}, "params_occur": {"other": [["isinstance", "other", "int", "isinstance", "other", "float", "isinstance", "other", "Fraction"], ["other_term", "Monomial", "mono", "Monomial", "_rationalize_if_possible", "other"], ["isinstance", "other", "Monomial"], ["self", "__add__", "other", "__mul__", "Fraction"]], "self": [["mono", "i", "self", "variables", "i", "i", "self", "variables", "self", "variables", "i"], ["self", "__sub__", "other_term"], ["self", "__add__", "other", "__mul__", "Fraction"]]}, "params_p": {"args": [], "kwargs": [], "other": [["Iterable[Any]", 0.11513064764542437], ["int", 0.1071288496496584], ["Optional[\"Cell\"]", 0.10231271328234026], ["Callable", 0.08817748487910475]], "self": []}, "q_name": "Monomial.__sub__", "ret_exprs": ["return self.__sub__(other_term)", "return self.__add__(other.__mul__(Fraction(-1, 1)))"], "ret_type": "", "ret_type_p": [["bool", 0.20088393456255865], ["Optional[int]", 0.11496369173953591], ["str", 0.09608004852639458]], "variables": {"mono": "", "other_term": ""}, "variables_p": {"mono": [["int", 0.21929718130532133], ["Tuple[int]", 0.10023120370186586], ["tuple", 0.10023120370186586], ["list", 0.08903978777988521], ["dict", 0.08708210255761502]], "other_term": [["str", 0.10503441267392748], ["dict", 0.09822659084356394]]}}, {"docstring": {"func": "Define the hash of a monomial", "long_descr": "by the underlying variables.\n\nIf hashing is implemented in O(v*log(v))\nwhere v represents the number of\nvariables in the monomial,\nthen search queries for the\npurposes of simplification of a\npolynomial can be performed in\nO(v*log(v)) as well; much better than\nthe length of the polynomial.", "ret": null}, "fn_lc": [[216, 4], [235, 31]], "fn_var_ln": {"arr": [[230, 8], [230, 11]]}, "fn_var_occur": {"arr": [["arr", "append", "i"], ["hash", "tuple", "arr"]]}, "name": "__hash__", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["sorted", "self", "variables"], ["self", "variables", "i"], ["range", "self", "variables", "i"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "Monomial.__hash__", "ret_exprs": ["return hash(tuple(arr))"], "ret_type": "builtins.int", "ret_type_p": [["int", 0.590217972676678], ["Tuple[int, int]", 0.10977521283770898], ["bool", 0.10105449134577231]], "variables": {"arr": ""}, "variables_p": {"arr": [["list", 0.39778986607437933], ["List[Tuple[float, float]]", 0.07858028214707766], ["Pattern[str]", 0.0738609243053913]]}}, {"docstring": {"func": "Get the set of all variables", "long_descr": "present in the monomial.", "ret": null}, "fn_lc": [[237, 4], [242, 49]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "all_variables", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["set", "sorted", "self", "variables", "keys"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "Monomial.all_variables", "ret_exprs": ["return set(sorted(self.variables.keys()))"], "ret_type": "typing.Set", "ret_type_p": [["Set[str]", 0.9999999999999999]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Substitute the variables in the", "long_descr": "monomial for values defined by\nthe substitutions dictionary.", "ret": null}, "fn_lc": [[244, 4], [260, 53]], "fn_var_ln": {"ans": [[257, 8], [257, 11]], "substitutions": [[251, 12], [251, 25]]}, "fn_var_occur": {"ans": [["ans", "Monomial", "_rationalize_if_possible", "self", "coeff"], ["ans", "Monomial", "_rationalize_if_possible", "substitutions", "k", "self", "variables", "k"], ["Monomial", "_rationalize_if_possible", "ans"]], "substitutions": [["isinstance", "substitutions", "int", "isinstance", "substitutions", "float", "isinstance", "substitutions", "Fraction"], ["substitutions", "v", "Monomial", "_rationalize_if_possible", "substitutions", "v", "self", "all_variables"], ["self", "all_variables", "issubset", "set", "substitutions", "keys"], ["ans", "Monomial", "_rationalize_if_possible", "substitutions", "k", "self", "variables", "k"]]}, "name": "substitute", "params": {"self": "", "substitutions": "typing.Union[builtins.int, builtins.float, fractions.Fraction, typing.Dict[builtins.int, typing.Union[builtins.int, builtins.float, fractions.Fraction]]]"}, "params_descr": {"self": "", "substitutions": ""}, "params_occur": {"self": [["substitutions", "v", "Monomial", "_rationalize_if_possible", "substitutions", "v", "self", "all_variables"], ["self", "all_variables", "issubset", "set", "substitutions", "keys"], ["self", "coeff"], ["ans", "Monomial", "_rationalize_if_possible", "self", "coeff"], ["self", "variables"], ["ans", "Monomial", "_rationalize_if_possible", "substitutions", "k", "self", "variables", "k"]], "substitutions": [["isinstance", "substitutions", "int", "isinstance", "substitutions", "float", "isinstance", "substitutions", "Fraction"], ["substitutions", "v", "Monomial", "_rationalize_if_possible", "substitutions", "v", "self", "all_variables"], ["self", "all_variables", "issubset", "set", "substitutions", "keys"], ["ans", "Monomial", "_rationalize_if_possible", "substitutions", "k", "self", "variables", "k"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "substitutions": [["int", 0.22366070593154175], ["str", 0.17920266455277647], ["List[str]", 0.10672124838866003], ["List[int]", 0.0958715035477504], ["Tuple[int, int, int]", 0.0796800777303395]]}, "q_name": "Monomial.substitute", "ret_exprs": ["return Fraction(0, 1)", "return Monomial._rationalize_if_possible(ans)"], "ret_type": "fractions.Fraction", "ret_type_p": [["int", 0.30000000000000004], ["Callable", 0.2], ["str", 0.1]], "variables": {"ans": "", "substitutions": ""}, "variables_p": {"ans": [["int", 0.1027296393634969], ["list", 0.10076977109946023]], "substitutions": [["int", 0.6087056533862398], ["dict", 0.20628868702817416], ["Union[Literal, int]", 0.0981396395429929]]}}, {"docstring": {"func": "Get a string representation of", "long_descr": "the monomial.", "ret": null}, "fn_lc": [[262, 4], [283, 27]], "fn_var_ln": {"result": [[270, 8], [270, 14]], "temp": [[281, 16], [281, 20]]}, "fn_var_occur": {"result": [["result", "str", "self", "coeff"], ["result", "temp"]], "temp": [["temp", "format", "str", "i"], ["temp", "temp", "format", "self", "variables", "i"], ["temp", "temp", "format", "self", "variables", "i"], ["temp", "temp"], ["result", "temp"]]}, "name": "__str__", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["len", "self", "variables"], ["str", "self", "coeff"], ["result", "str", "self", "coeff"], ["self", "variables"], ["self", "variables", "i"], ["temp", "temp", "format", "self", "variables", "i"], ["self", "variables", "i"], ["temp", "temp", "format", "self", "variables", "i"], ["self", "variables", "i"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "Monomial.__str__", "ret_exprs": ["return str(self.coeff)", "return result + ')'"], "ret_type": "builtins.str", "ret_type_p": [["str", 1.0000000000000002]], "variables": {"result": "", "temp": ""}, "variables_p": {"result": [["Pattern[Any]", 0.40734738748192395], ["Tuple[str, str]", 0.13254337235673366], ["str", 0.09976814292696022], ["Tuple[int]", 0.08220258406446976], ["Dict[str, Union[Any, Any, Any, str]]", 0.07705807157895767]], "temp": [["str", 0.609549248026438], ["int", 0.21882249154164957], ["List[str]", 0.08634679561758782], ["Tuple[str, str, str, str, str, str, str]", 0.08528146481432468]]}}], "name": "Monomial", "q_name": "Monomial", "variables": {}, "variables_p": {}}, {"cls_lc": [[286, 0], [532, 92]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": "Create a polynomial in the given variables:", "long_descr": null, "ret": null}, "fn_lc": [[294, 4], [317, 43]], "fn_var_ln": {"monomials": [[309, 8], [309, 22]]}, "fn_var_occur": {"monomials": [["self", "monomials", "set"], ["self", "monomials", "Monomial", "m"], ["self", "monomials", "m"], ["self", "monomials", "Monomial"]]}, "name": "__init__", "params": {"monomials": "typing.Iterable[typing.Union[builtins.int, builtins.float, fractions.Fraction, Monomial]]", "self": ""}, "params_descr": {"monomials": "", "self": ""}, "params_occur": {"monomials": [["self", "monomials", "set"], ["self", "monomials", "Monomial", "m"], ["self", "monomials", "m"], ["self", "monomials", "Monomial"]], "self": [["self", "monomials", "set"], ["self", "monomials", "Monomial", "m"], ["self", "monomials", "m"], ["self", "monomials", "Monomial"]]}, "params_p": {"args": [], "kwargs": [], "monomials": [["List[int]", 0.2698362214667037], ["Iterable[list]", 0.13293795826936278], ["int", 0.10437599389727645], ["str", 0.09827861051944453], ["float", 0.090752716949764]], "self": []}, "q_name": "Polynomial.__init__", "ret_exprs": [], "ret_type": "None", "variables": {"monomials": ""}, "variables_p": {"monomials": [["int", 0.4936336153603761], ["Dict[str, int]", 0.2206080916038109], ["str", 0.1925033509413684]]}}, {"docstring": {"func": "A helper for converting numbers", "long_descr": "to Fraction only when possible.", "ret": null}, "fn_lc": [[320, 4], [329, 22]], "fn_var_ln": {"res": [[326, 12], [326, 15]]}, "fn_var_occur": {"res": [["res", "Fraction", "num"], ["Fraction", "res", "numerator", "res", "denominator"]]}, "name": "_rationalize_if_possible", "params": {"num": ""}, "params_descr": {"num": ""}, "params_occur": {"num": [["isinstance", "num", "Rational"], ["res", "Fraction", "num"]]}, "params_p": {"args": [], "kwargs": [], "num": [["float", 0.4372795084547346], ["Callable[[List], bool]", 0.17010405537393433], ["int", 0.10260671418526596], ["set", 0.08262387127440292]], "self": []}, "q_name": "Polynomial._rationalize_if_possible", "ret_exprs": ["return Fraction(res.numerator, res.denominator)", "return num"], "ret_type": "", "ret_type_p": [["str", 0.29555977392686794], ["bytes", 0.09931578129196686], ["int", 0.08502801475296774], ["float", 0.08263379303964645], ["Optional[int]", 0.0772560447438223]], "variables": {"res": ""}, "variables_p": {"res": [["int", 0.4859095124066994], ["float", 0.18602521501743774], ["Dict[str, Union[Any, Any]]", 0.13825382485629273], ["list", 0.09540872263465527], ["dict", 0.09440272508491479]]}}, {"docstring": {"func": "Add a given poylnomial to a copy of self.", "long_descr": null, "ret": null}, "fn_lc": [[333, 4], [361, 108]], "fn_var_ln": {"monos": [[341, 12], [341, 17]], "p": [[358, 16], [358, 17]], "scalar": [[345, 20], [345, 26]], "temp": [[354, 12], [354, 16]], "temp_variables": [[347, 20], [347, 34]]}, "fn_var_occur": {"monos": [["monos", "m", "clone", "m", "self", "monomials"], ["monos", "_own_monos"], ["monos", "Monomial", "temp_variables", "Polynomial", "_rationalize_if_possible", "scalar", "other", "coeff"], ["Polynomial", "z", "z", "monos"], ["monos", "other", "clone"], ["Polynomial", "z", "z", "monos"]], "p": [["p", "Polynomial", "temp"], ["p", "p", "__add__", "o", "clone"]], "scalar": [["scalar", "_own_monos", "coeff"], ["monos", "Monomial", "temp_variables", "Polynomial", "_rationalize_if_possible", "scalar", "other", "coeff"]], "temp": [["temp", "list", "z", "z", "m", "clone", "m", "self", "all_monomials"], ["p", "Polynomial", "temp"]], "temp_variables": [["temp_variables", "i", "other", "variables", "i", "i", "other", "variables"], ["monos", "Monomial", "temp_variables", "Polynomial", "_rationalize_if_possible", "scalar", "other", "coeff"]]}, "name": "__add__", "params": {"other": "typing.Union[builtins.int, builtins.float, fractions.Fraction, Monomial]", "self": ""}, "params_descr": {"other": "", "self": ""}, "params_occur": {"other": [["isinstance", "other", "int", "isinstance", "other", "float", "isinstance", "other", "Fraction"], ["self", "__add__", "Monomial", "Polynomial", "_rationalize_if_possible", "other"], ["isinstance", "other", "Monomial"], ["_own_monos", "equal_upto_scalar", "other"], ["temp_variables", "i", "other", "variables", "i", "i", "other", "variables"], ["monos", "Monomial", "temp_variables", "Polynomial", "_rationalize_if_possible", "scalar", "other", "coeff"], ["monos", "other", "clone"], ["isinstance", "other", "Polynomial"], ["other", "all_monomials"]], "self": [["self", "__add__", "Monomial", "Polynomial", "_rationalize_if_possible", "other"], ["monos", "m", "clone", "m", "self", "monomials"], ["temp", "list", "z", "z", "m", "clone", "m", "self", "all_monomials"]]}, "params_p": {"args": [], "kwargs": [], "other": [["Callable", 0.10614890827564517], ["Optional[\"Cell\"]", 0.09537005056886626]], "self": []}, "q_name": "Polynomial.__add__", "ret_exprs": ["return self.__add__(Monomial({}, Polynomial._rationalize_if_possible(other)))", "return Polynomial([z for z in monos])", "return Polynomial([z for z in monos])", "return p"], "ret_type": "", "ret_type_p": [["bool", 0.4162928878572619], ["Tuple[int, int]", 0.10170295194810276]], "variables": {"monos": "", "p": "", "scalar": "", "temp": "", "temp_variables": ""}, "variables_p": {"monos": [["dict", 0.2901415176853408], ["List[int]", 0.19739020178840344], ["functools.partial[Any]", 0.11570766659636758], ["float", 0.11339078161112554], ["Dict[str, int]", 0.09550865035331726]], "p": [["dict", 0.20215750845757582], ["set", 0.166332967686053], ["str", 0.09451963108447549], ["list", 0.0879516608727282]], "scalar": [], "temp": [["List[float]", 0.11857186232945337], ["str", 0.11363267753617826], ["List[str]", 0.09492009277196377], ["int", 0.07976354059360495], ["List[List[int]]", 0.07934700117909872]], "temp_variables": [["Dict[str, Any]", 0.1979695582419225], ["bool", 0.10947213012878776], ["tuple", 0.10302637330462162], ["dict", 0.07766763185542375]]}}, {"docstring": {"func": "Subtract the given polynomial", "long_descr": "from a copy of self.", "ret": null}, "fn_lc": [[364, 4], [396, 18]], "fn_var_ln": {"monos": [[373, 12], [373, 17]], "p": [[391, 16], [391, 17]], "scalar": [[376, 20], [376, 26]], "temp_variables": [[378, 20], [378, 34]], "to_insert": [[382, 12], [382, 21]]}, "fn_var_occur": {"monos": [["monos", "m", "clone", "m", "self", "all_monomials"], ["monos", "_own_monos"], ["monos", "Monomial", "temp_variables", "Polynomial", "_rationalize_if_possible", "scalar", "other", "coeff"], ["Polynomial", "z", "z", "monos"], ["monos", "to_insert"], ["Polynomial", "z", "z", "monos"]], "p": [["p", "Polynomial", "list", "z", "z", "m", "clone", "m", "self", "all_monomials"], ["p", "p", "__sub__", "o", "clone"]], "scalar": [["scalar", "_own_monos", "coeff"], ["monos", "Monomial", "temp_variables", "Polynomial", "_rationalize_if_possible", "scalar", "other", "coeff"]], "temp_variables": [["temp_variables", "i", "other", "variables", "i", "i", "other", "variables"], ["monos", "Monomial", "temp_variables", "Polynomial", "_rationalize_if_possible", "scalar", "other", "coeff"]], "to_insert": [["to_insert", "other", "clone"], ["to_insert", "coeff"], ["monos", "to_insert"]]}, "name": "__sub__", "params": {"other": "typing.Union[builtins.int, builtins.float, fractions.Fraction, Monomial]", "self": ""}, "params_descr": {"other": "", "self": ""}, "params_occur": {"other": [["isinstance", "other", "int", "isinstance", "other", "float", "isinstance", "other", "Fraction"], ["self", "__sub__", "Monomial", "Polynomial", "_rationalize_if_possible", "other"], ["isinstance", "other", "Monomial"], ["_own_monos", "equal_upto_scalar", "other"], ["temp_variables", "i", "other", "variables", "i", "i", "other", "variables"], ["monos", "Monomial", "temp_variables", "Polynomial", "_rationalize_if_possible", "scalar", "other", "coeff"], ["to_insert", "other", "clone"], ["isinstance", "other", "Polynomial"], ["other", "all_monomials"]], "self": [["self", "__sub__", "Monomial", "Polynomial", "_rationalize_if_possible", "other"], ["monos", "m", "clone", "m", "self", "all_monomials"], ["p", "Polynomial", "list", "z", "z", "m", "clone", "m", "self", "all_monomials"]]}, "params_p": {"args": [], "kwargs": [], "other": [["float", 0.358897445778201], ["Iterable[Any]", 0.13002121020204863]], "self": []}, "q_name": "Polynomial.__sub__", "ret_exprs": ["return self.__sub__(Monomial({}, Polynomial._rationalize_if_possible(other)))", "return Polynomial([z for z in monos])", "return Polynomial([z for z in monos])", "return p", "return"], "ret_type": "", "ret_type_p": [["bytearray", 0.259332307302206], ["float", 0.18242466799433937], ["str", 0.10221809121857618], ["List[int]", 0.0860523690125145]], "variables": {"monos": "", "p": "", "scalar": "", "temp_variables": "", "to_insert": ""}, "variables_p": {"monos": [["dict", 0.2901415176853408], ["List[int]", 0.19739020178840344], ["functools.partial[Any]", 0.11570766659636758], ["float", 0.11339078161112554], ["Dict[str, int]", 0.09550865035331726]], "p": [["List[float]", 0.11458115444967923], ["List[str]", 0.11412752276413247], ["List[tuple]", 0.09725348891994273], ["int", 0.0829109254482594], ["Tuple[int, int]", 0.08264518894532732]], "scalar": [], "temp_variables": [["Dict[str, Any]", 0.1979695582419225], ["bool", 0.10947213012878776], ["tuple", 0.10302637330462162], ["dict", 0.07766763185542375]], "to_insert": [["int", 0.3640970068085618], ["str", 0.17263581045018236], ["Dict[str, str]", 0.09626999691899085], ["List[str]", 0.0941477081513646], ["list", 0.0941477081513646], ["Pattern[str]", 0.09238386429444469], ["bytes", 0.08631790522509118]]}}, {"docstring": {"func": "Multiply a given polynomial", "long_descr": "to a copy of self.", "ret": null}, "fn_lc": [[399, 4], [428, 115]], "fn_var_ln": {"monos": [[412, 12], [412, 17]], "result": [[424, 20], [424, 26]], "temp_other": [[418, 12], [418, 22]], "temp_self": [[417, 12], [417, 21]]}, "fn_var_occur": {"monos": [["monos", "m", "clone", "m", "self", "all_monomials"], ["monos", "m", "clone", "m", "self", "all_monomials"]], "result": [["result", "Polynomial"], ["result", "result", "__add__", "m", "clone", "other"], ["result", "Polynomial"], ["result", "result", "__add__", "m", "clone", "other"], ["result", "Polynomial"], ["result", "result", "__add__", "i", "j"]], "temp_other": [["temp_other", "m", "clone", "m", "other", "all_monomials"]], "temp_self": [["temp_self", "m", "clone", "m", "self", "all_monomials"]]}, "name": "__mul__", "params": {"other": "typing.Union[builtins.int, builtins.float, fractions.Fraction, Monomial]", "self": ""}, "params_descr": {"other": "", "self": ""}, "params_occur": {"other": [["isinstance", "other", "int", "isinstance", "other", "float", "isinstance", "other", "Fraction"], ["result", "result", "__add__", "m", "clone", "other"], ["isinstance", "other", "Monomial"], ["result", "result", "__add__", "m", "clone", "other"], ["isinstance", "other", "Polynomial"], ["temp_other", "m", "clone", "m", "other", "all_monomials"]], "self": [["monos", "m", "clone", "m", "self", "all_monomials"], ["monos", "m", "clone", "m", "self", "all_monomials"], ["temp_self", "m", "clone", "m", "self", "all_monomials"]]}, "params_p": {"args": [], "kwargs": [], "other": [["AbstractSet[T]", 0.22654928483564704], ["Iterable[Any]", 0.09877580655915179], ["Set[VT]", 0.091898700427209], ["Union[list, 'ListProxy']", 0.08832463249401998]], "self": []}, "q_name": "Polynomial.__mul__", "ret_exprs": ["return result", "return result", "return result"], "ret_type": "", "ret_type_p": [["Dict[int, dict]", 0.10194031117121881], ["bool", 0.10040117127149138], ["str", 0.0895505735871537]], "variables": {"monos": "", "result": "", "temp_other": "", "temp_self": ""}, "variables_p": {"monos": [["int", 0.18413032652355774], ["float", 0.1239696446398751], ["functools.partial[Any]", 0.11817465072348553], ["List[int]", 0.10051304930712175], ["Dict[str, Any]", 0.08852282862753326]], "result": [["List[Callable[[], Any]]", 0.11369586530038814], ["Union[None, dict, List[Any], bool, float, int, str]", 0.10905951951932989], ["DefaultDict[Any, List]", 0.09448273671349335], ["DefaultDict[Any, dict]", 0.08099507956563774]], "temp_other": [["int", 0.1941432497056117], ["str", 0.1799549546529841], ["Dict[int, str]", 0.14782248128132436], ["Pattern[str]", 0.09937726089083074], ["list", 0.09275878600807519], ["List[List[int]]", 0.08788380359312291], ["Tuple[float, float, float]", 0.08382372296336538]], "temp_self": [["List[int]", 0.21890678570590602], ["float", 0.10105351511562863], ["str", 0.09867803057765329], ["Optional[bool]", 0.09867803057765329], ["DefaultDict", 0.0929446693010661], ["list", 0.08745471256890429]]}}, {"docstring": {"func": "For Polynomials, floordiv is the same", "long_descr": "as truediv.", "ret": null}, "fn_lc": [[431, 4], [436, 38]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "__floordiv__", "params": {"other": "typing.Union[builtins.int, builtins.float, fractions.Fraction, Monomial]", "self": ""}, "params_descr": {"other": "", "self": ""}, "params_occur": {"other": [["self", "__truediv__", "other"]], "self": [["self", "__truediv__", "other"]]}, "params_p": {"args": [], "kwargs": [], "other": [["dict", 0.24999999998650746], ["AbstractSet[T]", 9.152138678985443e-12], ["AbstractSet[T_co]", 9.152138678985443e-12]], "self": []}, "q_name": "Polynomial.__floordiv__", "ret_exprs": ["return self.__truediv__(other)"], "ret_type": "", "ret_type_p": [["bool", 0.28692467452883313], ["Optional[str]", 0.07928648954665708], ["Optional[int]", 0.07882633477869071]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "For Polynomials, only division by a monomial", "long_descr": "is defined.\n\nTODO: Implement polynomial / polynomial.", "ret": null}, "fn_lc": [[439, 4], [464, 14]], "fn_var_ln": {"only": [[459, 16], [459, 20]], "poly_temp": [[449, 12], [449, 21]], "temp_set": [[458, 16], [458, 24]]}, "fn_var_occur": {"only": [["only", "temp_set", "pop"], ["self", "__truediv__", "only"], ["only", "temp_set", "pop"], ["self", "__truediv__", "only"]], "poly_temp": [["poly_temp", "reduce", "acc", "val", "acc", "val", "map", "x", "x", "other", "z", "z", "self", "all_monomials", "Polynomial", "Monomial"]], "temp_set": [["temp_set", "x", "x", "other", "all_monomials", "x", "Monomial"], ["only", "temp_set", "pop"], ["temp_set", "x", "x", "other", "all_monomials"], ["only", "temp_set", "pop"]]}, "name": "__truediv__", "params": {"other": "typing.Union[builtins.int, builtins.float, fractions.Fraction, Monomial]", "self": ""}, "params_descr": {"other": "", "self": ""}, "params_occur": {"other": [["isinstance", "other", "int", "isinstance", "other", "float", "isinstance", "other", "Fraction"], ["self", "__truediv__", "Monomial", "other"], ["isinstance", "other", "Monomial"], ["poly_temp", "reduce", "acc", "val", "acc", "val", "map", "x", "x", "other", "z", "z", "self", "all_monomials", "Polynomial", "Monomial"], ["isinstance", "other", "Polynomial"], ["Monomial", "other", "all_monomials"], ["len", "other", "all_monomials"], ["temp_set", "x", "x", "other", "all_monomials", "x", "Monomial"], ["len", "other", "all_monomials"], ["temp_set", "x", "x", "other", "all_monomials"]], "self": [["self", "__truediv__", "Monomial", "other"], ["poly_temp", "reduce", "acc", "val", "acc", "val", "map", "x", "x", "other", "z", "z", "self", "all_monomials", "Polynomial", "Monomial"], ["self", "__truediv__", "only"], ["self", "__truediv__", "only"]]}, "params_p": {"args": [], "kwargs": [], "other": [["float", 0.3674011636469398], ["Iterable[Any]", 0.1186993031703405]], "self": []}, "q_name": "Polynomial.__truediv__", "ret_exprs": ["return self.__truediv__( Monomial({}, other) )", "return poly_temp", "return self.__truediv__(only)", "return self.__truediv__(only)", "return"], "ret_type": "", "ret_type_p": [["str", 0.13968937068109144]], "variables": {"only": "", "poly_temp": "", "temp_set": ""}, "variables_p": {"only": [], "poly_temp": [["float", 0.1781421709855594], ["int", 0.10060096458825957]], "temp_set": [["int", 0.3096586029895338], ["list", 0.1841815791595517], ["List[int]", 0.10626986977877534], ["Dict[str, Any]", 0.09671172259546071], ["Tuple[int, int]", 0.09631765327982864], ["List[List[Any]]", 0.09298269635215069]]}}, {"docstring": {"func": "Clone the polynomial.", "long_descr": null, "ret": null}, "fn_lc": [[467, 4], [471, 74]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "clone", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["Polynomial", "list", "m", "clone", "m", "self", "all_monomials"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "Polynomial.clone", "ret_exprs": ["return Polynomial(list({m.clone() for m in self.all_monomials()}))"], "ret_type": "", "ret_type_p": [["List[str]", 0.19050496635837735], ["str", 0.134451427780609], ["List[Dict]", 0.12119646078226787], ["List[Tuple[str, Any]]", 0.09625793505438426], ["List[Dict[str, str]]", 0.08981262392164437]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Get all the variables present", "long_descr": "in this polynomials.", "ret": null}, "fn_lc": [[473, 4], [483, 23]], "fn_var_ln": {"res": [[481, 8], [481, 11]]}, "fn_var_occur": {"res": [["res", "set"], ["res", "j", "j", "i", "variables"], ["res", "list", "res"], ["set", "res"]]}, "name": "variables", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "all_monomials"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "Polynomial.variables", "ret_exprs": ["return set(res)"], "ret_type": "typing.Set", "ret_type_p": [["Set[str]", 0.9999999999999999]], "variables": {"res": ""}, "variables_p": {"res": [["Set[int]", 0.36932321632520254], ["list", 0.3408930244793478], ["List[str]", 0.09766790122123557], ["List[Tuple[bytes, bytes]]", 0.0976110953550262], ["List[Union[Any, Any]]", 0.09450476261918778]]}}, {"docstring": {"func": "Get the monomials of this polynomial.", "long_descr": null, "ret": null}, "fn_lc": [[485, 4], [489, 66]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "all_monomials", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["m", "m", "self", "monomials", "m", "Monomial"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "Polynomial.all_monomials", "ret_exprs": ["return {m for m in self.monomials if m != Monomial({}, 0)}"], "ret_type": "typing.Iterable[Monomial]", "ret_type_p": [["str", 0.19986141913011718], ["list", 0.09872932579097393], ["int", 0.0974325099308557], ["Iterator[str]", 0.09620436545727887], ["List[int]", 0.09620436545727887]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Return True if the other polynomial is the same as", "long_descr": "this.", "ret": null}, "fn_lc": [[492, 4], [505, 124]], "fn_var_ln": {"other_poly": [[498, 12], [498, 22]]}, "fn_var_occur": {"other_poly": [["other_poly", "Polynomial", "Monomial", "other"], ["self", "__eq__", "other_poly"]]}, "name": "__eq__", "params": {"other": "", "self": ""}, "params_descr": {"other": "", "self": ""}, "params_occur": {"other": [["isinstance", "other", "int", "isinstance", "other", "float", "isinstance", "other", "Fraction"], ["other_poly", "Polynomial", "Monomial", "other"], ["isinstance", "other", "Monomial"], ["self", "__eq__", "Polynomial", "other"], ["isinstance", "other", "Polynomial"], ["self", "all_monomials", "other", "all_monomials"]], "self": [["self", "__eq__", "other_poly"], ["self", "__eq__", "Polynomial", "other"], ["self", "all_monomials", "other", "all_monomials"]]}, "params_p": {"args": [], "kwargs": [], "other": [["int", 0.11504965767633996], ["Optional[\"Cell\"]", 0.10039458491788562]], "self": []}, "q_name": "Polynomial.__eq__", "ret_exprs": ["return self.__eq__(other_poly)", "return self.__eq__(Polynomial([other]))", "return self.all_monomials() == other.all_monomials()"], "ret_type": "builtins.bool", "ret_type_p": [["bool", 0.6302785570730405]], "variables": {"other_poly": ""}, "variables_p": {"other_poly": [["property", 0.1061359493936619], ["dict", 0.09422820549882924], ["T", 0.09342433696039504], ["float", 0.09259360650027755]]}}, {"docstring": {"func": "Get the value after substituting", "long_descr": "certain values for the variables\ndefined in substitutions.", "ret": null}, "fn_lc": [[508, 4], [525, 55]], "fn_var_ln": {"ans": [[522, 8], [522, 11]], "substitutions": [[515, 12], [515, 25]]}, "fn_var_occur": {"ans": [["ans", "Polynomial", "_rationalize_if_possible", "m", "substitute", "substitutions"], ["Polynomial", "_rationalize_if_possible", "ans"]], "substitutions": [["isinstance", "substitutions", "int", "isinstance", "substitutions", "float", "isinstance", "substitutions", "Fraction"], ["substitutions", "i", "Polynomial", "_rationalize_if_possible", "substitutions", "i", "set", "self", "variables"], ["self", "subs", "substitutions"], ["isinstance", "substitutions", "dict"], ["self", "variables", "issubset", "set", "substitutions", "keys"], ["ans", "Polynomial", "_rationalize_if_possible", "m", "substitute", "substitutions"]]}, "name": "subs", "params": {"self": "", "substitutions": "typing.Union[builtins.int, builtins.float, fractions.Fraction, typing.Dict[builtins.int, typing.Union[builtins.int, builtins.float, fractions.Fraction]]]"}, "params_descr": {"self": "", "substitutions": ""}, "params_occur": {"self": [["substitutions", "i", "Polynomial", "_rationalize_if_possible", "substitutions", "i", "set", "self", "variables"], ["self", "subs", "substitutions"], ["self", "variables", "issubset", "set", "substitutions", "keys"], ["self", "all_monomials"]], "substitutions": [["isinstance", "substitutions", "int", "isinstance", "substitutions", "float", "isinstance", "substitutions", "Fraction"], ["substitutions", "i", "Polynomial", "_rationalize_if_possible", "substitutions", "i", "set", "self", "variables"], ["self", "subs", "substitutions"], ["isinstance", "substitutions", "dict"], ["self", "variables", "issubset", "set", "substitutions", "keys"], ["ans", "Polynomial", "_rationalize_if_possible", "m", "substitute", "substitutions"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "substitutions": [["int", 0.3803389010799006], ["List[int]", 0.15111418664978576], ["dict", 0.09893541188387707], ["List[str]", 0.09888736513572015]]}, "q_name": "Polynomial.subs", "ret_exprs": ["return self.subs(substitutions)", "return Polynomial._rationalize_if_possible(ans)"], "ret_type": "typing.Union[builtins.int, builtins.float, fractions.Fraction]", "ret_type_p": [["int", 0.30000000000000004], ["Callable", 0.2], ["str", 0.1]], "variables": {"ans": "", "substitutions": ""}, "variables_p": {"ans": [["int", 0.5924611861953363], ["Dict[Any, None]", 0.1415430912027671], ["List[bool]", 0.12816590581732124]], "substitutions": [["int", 0.4392190505567339], ["dict", 0.18627549486551526]]}}, {"docstring": {"func": "Get a string representation of", "long_descr": "the polynomial.", "ret": null}, "fn_lc": [[527, 4], [532, 92]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "__str__", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["join", "str", "m", "m", "self", "all_monomials", "m", "coeff", "Fraction"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "Polynomial.__str__", "ret_exprs": ["return ' + '.join(str(m) for m in self.all_monomials() if m.coeff != Fraction(0, 1))"], "ret_type": "builtins.str", "ret_type_p": [["str", 0.8051851725220192], ["Optional[str]", 0.19481482747798104]], "variables": {}, "variables_p": {}}], "name": "Polynomial", "q_name": "Polynomial", "variables": {}, "variables_p": {}}], "funcs": [], "imports": ["fractions", "Fraction", "typing", "Dict", "Union", "Set", "Iterable", "numbers", "Rational", "functools", "reduce"], "mod_var_ln": {}, "mod_var_occur": {}, "no_types_annot": {"D": 23, "I": 0, "U": 62}, "session_id": "fmT7bD4jkoHyyYmUBQ3DBRu81ArykZdEOUL6li2iCsA", "set": null, "tc": [false, null], "type_annot_cove": 0.27, "typed_seq": "", "untyped_seq": "", "variables": {}, "variables_p": {}}}