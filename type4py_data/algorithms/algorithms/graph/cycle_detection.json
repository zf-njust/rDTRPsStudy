{"error": null, "response": {"classes": [{"cls_lc": [[11, 0], [20, 13]], "cls_var_ln": {"BLACK": [[20, 4], [20, 9]], "GRAY": [[19, 4], [19, 8]], "WHITE": [[18, 4], [18, 9]]}, "cls_var_occur": {"BLACK": [], "GRAY": [], "WHITE": []}, "funcs": [], "name": "TraversalState", "q_name": "TraversalState", "variables": {"BLACK": "", "GRAY": "", "WHITE": ""}, "variables_p": {"BLACK": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "GRAY": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "WHITE": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]]}}], "funcs": [{"docstring": {"func": "Determines if the given vertex is in a cycle.", "long_descr": ":param: traversal_states: for each vertex, the state it is in", "ret": null}, "fn_lc": [[22, 0], [35, 16]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "is_in_cycle", "params": {"graph": "", "traversal_states": "", "vertex": ""}, "params_descr": {"graph": "", "traversal_states": "", "vertex": ""}, "params_occur": {"graph": [["graph", "vertex"], ["is_in_cycle", "graph", "traversal_states", "neighbor"]], "traversal_states": [["traversal_states", "vertex", "TraversalState", "GRAY"], ["traversal_states", "vertex", "TraversalState", "GRAY"], ["is_in_cycle", "graph", "traversal_states", "neighbor"], ["traversal_states", "vertex", "TraversalState", "BLACK"]], "vertex": [["traversal_states", "vertex", "TraversalState", "GRAY"], ["traversal_states", "vertex", "TraversalState", "GRAY"], ["graph", "vertex"], ["traversal_states", "vertex", "TraversalState", "BLACK"]]}, "params_p": {"args": [], "graph": [], "kwargs": [], "traversal_states": [], "vertex": []}, "q_name": "is_in_cycle", "ret_exprs": ["return True", "return True", "return False"], "ret_type": "", "ret_type_p": [["bool", 0.9999999999999999]], "variables": {}, "variables_p": {}}, {"docstring": {"func": "Determines if there is a cycle in the given graph.", "long_descr": "The graph should be given as a dictionary:\n\n    graph = {'A': ['B', 'C'],\n             'B': ['D'],\n             'C': ['F'],\n             'D': ['E', 'F'],\n             'E': ['B'],\n             'F': []}", "ret": null}, "fn_lc": [[38, 0], [55, 16]], "fn_var_ln": {"traversal_states": [[50, 4], [50, 20]]}, "fn_var_occur": {"traversal_states": [["traversal_states", "vertex", "TraversalState", "WHITE", "vertex", "graph"], ["traversal_states", "items"], ["state", "TraversalState", "WHITE", "is_in_cycle", "graph", "traversal_states", "vertex"]]}, "name": "contains_cycle", "params": {"graph": ""}, "params_descr": {"graph": ""}, "params_occur": {"graph": [["traversal_states", "vertex", "TraversalState", "WHITE", "vertex", "graph"], ["state", "TraversalState", "WHITE", "is_in_cycle", "graph", "traversal_states", "vertex"]]}, "params_p": {"args": [], "graph": [], "kwargs": []}, "q_name": "contains_cycle", "ret_exprs": ["return True", "return False"], "ret_type": "", "ret_type_p": [["bool", 1.0]], "variables": {"traversal_states": ""}, "variables_p": {"traversal_states": [["Dict[str, Union[None, Any, int]]", 0.09031610599064746]]}}], "imports": ["enum", "Enum"], "mod_var_ln": {}, "mod_var_occur": {}, "no_types_annot": {"D": 0, "I": 0, "U": 10}, "session_id": "Znpoi2Ya3ku410LIozfFRL2TcOJ6W9q3PXv69E93vlo", "set": null, "tc": [false, null], "type_annot_cove": 0.0, "typed_seq": "", "untyped_seq": "", "variables": {}, "variables_p": {}}}