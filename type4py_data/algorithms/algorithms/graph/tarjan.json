{"error": null, "response": {"classes": [{"cls_lc": [[10, 0], [65, 28]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[14, 4], [27, 53]], "fn_var_ln": {"graph": [[15, 8], [15, 18]], "index": [[22, 12], [22, 24]], "sccs": [[24, 8], [24, 17]], "stack": [[17, 8], [17, 18]]}, "fn_var_occur": {"graph": [["self", "graph", "DirectedGraph", "dict_graph"], ["self", "graph", "nodes"], ["self", "graph", "nodes"]], "index": [["self", "index"], ["vertex", "index", "None"], ["vertex", "index", "None"]], "sccs": [["self", "sccs"], ["self", "strongconnect", "vertex", "self", "sccs"]], "stack": [["self", "stack"]]}, "name": "__init__", "params": {"dict_graph": "", "self": ""}, "params_descr": {"dict_graph": "", "self": ""}, "params_occur": {"dict_graph": [["self", "graph", "DirectedGraph", "dict_graph"]], "self": [["self", "graph", "DirectedGraph", "dict_graph"], ["self", "index"], ["self", "stack"], ["self", "graph", "nodes"], ["self", "sccs"], ["self", "graph", "nodes"], ["self", "strongconnect", "vertex", "self", "sccs"]]}, "params_p": {"args": [], "dict_graph": [["str", 0.2870307016819414], ["List[str]", 0.16386292101501507], ["Sequence[str]", 0.16386292101501507], ["bool", 0.0820417487604983], ["bytes", 0.06960967622214803], ["int", 0.06960967622214803]], "kwargs": [], "self": []}, "q_name": "Tarjan.__init__", "ret_exprs": [], "ret_type": "", "variables": {"graph": "", "index": "", "sccs": "", "stack": ""}, "variables_p": {"graph": [["Pattern[str]", 0.10484409955492976], ["List[Tuple[int, int]]", 0.08908459581780133], ["float", 0.08847503316608306]], "index": [["int", 0.19028127264550737], ["str", 0.1885004674093082], ["Tuple[int]", 0.14359887742560976], ["Union[List[Any], list]", 0.11884447904692054]], "sccs": [["int", 0.9999999999377888], ["str", 4.8242388107555014e-11], ["Dict[str, str]", 7.29973099003066e-12], ["dict", 6.669151295180953e-12]], "stack": [["str", 0.30000000000000004], ["Dict[str, Any]", 0.1], ["dict", 0.1], ["int", 0.1]]}}, {"docstring": {"func": "Given a vertex, adds all successors of the given vertex to the same connected component", "long_descr": null, "ret": null}, "fn_lc": [[29, 4], [65, 28]], "fn_var_ln": {"adjacent": [[59, 16], [59, 24]], "index": [[34, 8], [34, 20]], "lowlink": [[52, 16], [52, 30]], "on_stack": [[60, 16], [60, 33]], "scc": [[57, 12], [57, 15]]}, "fn_var_occur": {"adjacent": [["adjacent", "index", "None"], ["self", "strongconnect", "adjacent", "sccs"], ["vertex", "lowlink", "min", "vertex", "lowlink", "adjacent", "lowlink"], ["adjacent", "on_stack"], ["vertex", "lowlink", "min", "vertex", "lowlink", "adjacent", "index"], ["adjacent", "self", "stack", "pop"], ["adjacent", "on_stack", "False"], ["scc", "append", "adjacent"], ["adjacent", "vertex"]], "index": [["vertex", "index", "self", "index"], ["vertex", "lowlink", "self", "index"], ["self", "index"], ["adjacent", "index", "None"], ["vertex", "lowlink", "min", "vertex", "lowlink", "adjacent", "index"], ["vertex", "lowlink", "vertex", "index"]], "lowlink": [["vertex", "lowlink", "self", "index"], ["vertex", "lowlink", "min", "vertex", "lowlink", "adjacent", "lowlink"], ["vertex", "lowlink", "min", "vertex", "lowlink", "adjacent", "index"], ["vertex", "lowlink", "vertex", "index"]], "on_stack": [["vertex", "on_stack", "True"], ["adjacent", "on_stack"], ["adjacent", "on_stack", "False"]], "scc": [["scc", "append", "adjacent"], ["scc", "sort"], ["sccs", "append", "scc"]]}, "name": "strongconnect", "params": {"sccs": "", "self": "", "vertex": ""}, "params_descr": {"sccs": "", "self": "", "vertex": ""}, "params_occur": {"sccs": [["self", "strongconnect", "adjacent", "sccs"], ["sccs", "append", "scc"]], "self": [["vertex", "index", "self", "index"], ["vertex", "lowlink", "self", "index"], ["self", "index"], ["self", "stack", "append", "vertex"], ["self", "graph", "adjacency_list", "vertex"], ["self", "strongconnect", "adjacent", "sccs"], ["adjacent", "self", "stack", "pop"]], "vertex": [["vertex", "index", "self", "index"], ["vertex", "lowlink", "self", "index"], ["self", "stack", "append", "vertex"], ["vertex", "on_stack", "True"], ["self", "graph", "adjacency_list", "vertex"], ["vertex", "lowlink", "min", "vertex", "lowlink", "adjacent", "lowlink"], ["vertex", "lowlink", "min", "vertex", "lowlink", "adjacent", "index"], ["vertex", "lowlink", "vertex", "index"], ["adjacent", "vertex"]]}, "params_p": {"args": [], "kwargs": [], "sccs": [["str", 8.366998801416906e-11], ["List[List[int]]", 5.636680884163135e-11]], "self": [], "vertex": [["int", 0.6501694026605487], ["Sequence[int]", 0.08618259482344486], ["List[int]", 0.08531507447330053]]}, "q_name": "Tarjan.strongconnect", "ret_exprs": [], "ret_type": "", "variables": {"adjacent": "", "index": "", "lowlink": "", "on_stack": "", "scc": ""}, "variables_p": {"adjacent": [["int", 0.2872107795212175], ["str", 0.27942461542763664], ["float", 0.12737038723503719], ["Optional[int]", 0.11572422524245389]], "index": [["int", 0.2041040832875049], ["Generator[Any, None, None]", 0.10363068271270308]], "lowlink": [["Dict[str, Any]", 0.113288545857192], ["Type[str]", 0.113288545857192], ["Dict[str, int]", 0.09113618495968161]], "on_stack": [["str", 0.3865624470133695], ["Dict[str, bool]", 0.20825704815486978], ["bool", 0.17251717221802043], ["List[int]", 0.09451562940236591], ["Dict[int, Optional[str]]", 0.04971939803170829], ["List[Tuple[Any, Any]]", 0.0445058051053381], ["List[bool]", 0.04392250007432795]], "scc": [["list", 0.4527378718718315], ["Tuple[str, str, str, str, str, str, str, str, str]", 0.2583530020697013], ["Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]", 0.12917650103485065]]}}], "name": "Tarjan", "q_name": "Tarjan", "variables": {}, "variables_p": {}}], "funcs": [], "imports": ["algorithms", "graph", "graph", "DirectedGraph"], "mod_var_ln": {}, "mod_var_occur": {}, "no_types_annot": {"D": 0, "I": 0, "U": 14}, "session_id": "3g4Qmqrw28mQ3Y1oMZJjqMOCtLxPSKGGPbzSZSpbtho", "set": null, "tc": [false, null], "type_annot_cove": 0.0, "typed_seq": "", "untyped_seq": "", "variables": {}, "variables_p": {}}}