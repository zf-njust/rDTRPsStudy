{"error": null, "response": {"classes": [], "funcs": [{"docstring": {"func": "This Bellman-Ford Code is for determination whether we can get", "long_descr": "shortest path from given graph or not for single-source shortest-paths problem.\nIn other words, if given graph has any negative-weight cycle that is reachable\nfrom the source, then it will give answer False for \"no solution exits\".\nFor argument graph, it should be a dictionary type\nsuch as\ngraph = {\n    'a': {'b': 6, 'e': 7},\n    'b': {'c': 5, 'd': -4, 'e': 8},\n    'c': {'b': -2},\n    'd': {'a': 2, 'c': 7},\n    'e': {'b': -3}\n}", "ret": null}, "fn_lc": [[5, 0], [38, 15]], "fn_var_ln": {"pre_node": [[22, 4], [22, 12]], "weight": [[21, 4], [21, 10]]}, "fn_var_occur": {"pre_node": [["initialize_single_source", "graph", "source", "weight", "pre_node"], ["pre_node", "adjacent", "node"]], "weight": [["initialize_single_source", "graph", "source", "weight", "pre_node"], ["weight", "adjacent", "weight", "node", "graph", "node", "adjacent"], ["weight", "adjacent", "weight", "node", "graph", "node", "adjacent"], ["weight", "adjacent", "weight", "node", "graph", "node", "adjacent"]]}, "name": "bellman_ford", "params": {"graph": "", "source": ""}, "params_descr": {"graph": "", "source": ""}, "params_occur": {"graph": [["initialize_single_source", "graph", "source", "weight", "pre_node"], ["range", "len", "graph"], ["graph", "node"], ["weight", "adjacent", "weight", "node", "graph", "node", "adjacent"], ["weight", "adjacent", "weight", "node", "graph", "node", "adjacent"], ["graph", "node"], ["weight", "adjacent", "weight", "node", "graph", "node", "adjacent"]], "source": [["initialize_single_source", "graph", "source", "weight", "pre_node"]]}, "params_p": {"args": [], "graph": [["int", 0.10901505559248242], ["List[dict]", 0.095832378682257]], "kwargs": [], "source": [["str", 1.0]]}, "q_name": "bellman_ford", "ret_exprs": ["return False", "return True"], "ret_type": "", "ret_type_p": [["bool", 0.9999999999999999]], "variables": {"pre_node": "", "weight": ""}, "variables_p": {"pre_node": [["list", 0.5877313006621111], ["Tuple[Dict[str, Any], int]", 0.11575112954645159], ["Type[List[int]]", 0.09641336301059698], ["int", 0.09587622856127635]], "weight": [["List[str]", 0.10779422576846963]]}}, {"docstring": {"func": "Initialize data structures for Bellman-Ford algorithm.", "long_descr": null, "ret": null}, "fn_lc": [[40, 0], [48, 22]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "initialize_single_source", "params": {"graph": "", "pre_node": "", "source": "", "weight": ""}, "params_descr": {"graph": "", "pre_node": "", "source": "", "weight": ""}, "params_occur": {"graph": [], "pre_node": [["pre_node", "node", "None"]], "source": [["weight", "source"]], "weight": [["weight", "node", "float"], ["weight", "source"]]}, "params_p": {"args": [], "graph": [["bool", 0.49155337376476815], ["float", 0.1105649161991828]], "kwargs": [], "pre_node": [["int", 0.33424690107366267], ["Iterable[T]", 0.13223752701198999], ["bool", 0.07874717800693004]], "source": [["Tuple[int, int]", 0.20987059946796938], ["list", 0.2014232846678159], ["int", 0.18188381119320207], ["float", 0.0976086577552149]], "weight": [["int", 0.5766088654351954], ["bool", 0.27336094214658124]]}, "q_name": "initialize_single_source", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}], "imports": [], "mod_var_ln": {}, "mod_var_occur": {}, "no_types_annot": {"D": 0, "I": 0, "U": 10}, "session_id": "CZZgwbvWXjXYmYHdx7LuMQ_V8lU5FJKJj2RNeRuyTmU", "set": null, "tc": [false, null], "type_annot_cove": 0.0, "typed_seq": "", "untyped_seq": "", "variables": {}, "variables_p": {}}}