{"error": null, "response": {"classes": [{"cls_lc": [[10, 0], [69, 20]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": "Create a new graph with vertex_count vertices.", "long_descr": null, "ret": null}, "fn_lc": [[15, 4], [21, 38]], "fn_var_ln": {"graph": [[21, 8], [21, 18]], "vertex_count": [[20, 8], [20, 25]]}, "fn_var_occur": {"graph": [["self", "graph", "defaultdict", "list"]], "vertex_count": [["self", "vertex_count", "vertex_count"]]}, "name": "__init__", "params": {"self": "", "vertex_count": ""}, "params_descr": {"self": "", "vertex_count": ""}, "params_occur": {"self": [["self", "vertex_count", "vertex_count"], ["self", "graph", "defaultdict", "list"]], "vertex_count": [["self", "vertex_count", "vertex_count"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "vertex_count": [["int", 0.4377455064339952]]}, "q_name": "Graph.__init__", "ret_exprs": [], "ret_type": "", "variables": {"graph": "", "vertex_count": ""}, "variables_p": {"graph": [["str", 0.30000000000000004], ["Dict[str, Any]", 0.1], ["dict", 0.1], ["int", 0.1]], "vertex_count": [["int", 0.4999999999866716], ["float", 8.833344351932265e-12], ["Set[str]", 5.381212320047802e-12], ["Callable[[Any], tuple]", 4.353879314451742e-12]]}}, {"docstring": {"func": "Add an edge going from source to target", "long_descr": null, "ret": null}, "fn_lc": [[23, 4], [27, 41]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "add_edge", "params": {"self": "", "source": "", "target": ""}, "params_descr": {"self": "", "source": "", "target": ""}, "params_occur": {"self": [["self", "graph", "source", "append", "target"]], "source": [["self", "graph", "source", "append", "target"]], "target": [["self", "graph", "source", "append", "target"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "source": [["List[str]", 0.08407656041895196], ["Dict[str, Any]", 0.07639229510408772]], "target": [["List[str]", 0.08407656041895196], ["Dict[str, Any]", 0.07639229510408772]]}, "q_name": "Graph.add_edge", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Determine if all nodes are reachable from node 0", "long_descr": null, "ret": null}, "fn_lc": [[29, 4], [37, 20]], "fn_var_ln": {"visited": [[33, 8], [33, 15]]}, "fn_var_occur": {"visited": [["visited", "False", "self", "vertex_count"], ["self", "dfs_util", "visited"], ["visited", "True", "self", "vertex_count"]]}, "name": "dfs", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["visited", "False", "self", "vertex_count"], ["self", "dfs_util", "visited"], ["visited", "True", "self", "vertex_count"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "Graph.dfs", "ret_exprs": ["return True", "return False"], "ret_type": "", "ret_type_p": [["bool", 1.0]], "variables": {"visited": ""}, "variables_p": {"visited": [["List[bool]", 0.5866465885716088], ["str", 0.22350143077952117], ["int", 0.18985198064886993]]}}, {"docstring": {"func": "Determine if all nodes are reachable from the given node", "long_descr": null, "ret": null}, "fn_lc": [[39, 4], [46, 47]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "dfs_util", "params": {"self": "", "source": "", "visited": ""}, "params_descr": {"self": "", "source": "", "visited": ""}, "params_occur": {"self": [["self", "graph", "source"], ["self", "dfs_util", "adjacent", "visited"]], "source": [["visited", "source", "True"], ["self", "graph", "source"]], "visited": [["visited", "source", "True"], ["visited", "adjacent"], ["self", "dfs_util", "adjacent", "visited"]]}, "params_p": {"args": [], "kwargs": [], "self": [], "source": [["str", 0.5037227848748999], ["Dict[str, Any]", 0.11082354499954396], ["Callable", 0.09626814654873975], ["List[str]", 0.09436630906251178]], "visited": [["str", 0.5037227848748999], ["Dict[str, Any]", 0.11082354499954396], ["Callable", 0.09626814654873975], ["List[str]", 0.09436630906251178]]}, "q_name": "Graph.dfs_util", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Create a new graph where every edge a->b is replaced with an edge b->a", "long_descr": null, "ret": null}, "fn_lc": [[48, 4], [58, 28]], "fn_var_ln": {"reverse_graph": [[52, 8], [52, 21]]}, "fn_var_occur": {"reverse_graph": [["reverse_graph", "Graph", "self", "vertex_count"], ["reverse_graph", "add_edge", "target", "source"]]}, "name": "reverse_graph", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["reverse_graph", "Graph", "self", "vertex_count"], ["self", "graph", "items"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "Graph.reverse_graph", "ret_exprs": ["return reverse_graph"], "ret_type": "", "ret_type_p": [["int", 0.30000000000000004], ["Callable", 0.2], ["str", 0.1]], "variables": {"reverse_graph": ""}, "variables_p": {"reverse_graph": [["Optional[str]", 0.10549277666304618], ["slice", 0.10269018479680246]]}}, {"docstring": {"func": "Determine if the graph is strongly connected.", "long_descr": null, "ret": null}, "fn_lc": [[61, 4], [69, 20]], "fn_var_ln": {"reversed_graph": [[66, 12], [66, 26]]}, "fn_var_occur": {"reversed_graph": [["reversed_graph", "self", "reverse_graph"], ["reversed_graph", "dfs"]]}, "name": "is_strongly_connected", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "dfs"], ["reversed_graph", "self", "reverse_graph"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "Graph.is_strongly_connected", "ret_exprs": ["return True", "return False"], "ret_type": "", "ret_type_p": [["bool", 0.9999999999999999]], "variables": {"reversed_graph": ""}, "variables_p": {"reversed_graph": [["Dict[str, str]", 0.19999999999999998], ["List[Tuple[str, str, Any]]", 0.19999999999999998], ["str", 0.19999999999999998], ["Dict[str, Union[dict, Any]]", 0.09999999999999999], ["int", 0.09999999999999999], ["List[str]", 0.09999999999999999]]}}], "name": "Graph", "q_name": "Graph", "variables": {}, "variables_p": {}}], "funcs": [], "imports": ["collections", "defaultdict"], "mod_var_ln": {}, "mod_var_occur": {}, "no_types_annot": {"D": 0, "I": 0, "U": 15}, "session_id": "WJA5P6ShI5vYRjX0jU_cm0h8NIs2QDUBjGGyYKZ4l0Y", "set": null, "tc": [false, null], "type_annot_cove": 0.0, "typed_seq": "", "untyped_seq": "", "variables": {}, "variables_p": {}}}