{"error": null, "response": {"classes": [], "funcs": [{"docstring": {"func": "Find a path between two nodes using recursion and backtracking.", "long_descr": null, "ret": null}, "fn_lc": [[6, 0], [19, 15]], "fn_var_ln": {"newpath": [[17, 12], [17, 19]], "path": [[10, 4], [10, 8]]}, "fn_var_occur": {"newpath": [["newpath", "find_path", "graph", "node", "end", "path"]], "path": [["path", "path", "start"], ["node", "path"], ["newpath", "find_path", "graph", "node", "end", "path"]]}, "name": "find_path", "params": {"end": "", "graph": "", "path": "", "start": ""}, "params_descr": {"end": "", "graph": "", "path": "", "start": ""}, "params_occur": {"end": [["start", "end"], ["newpath", "find_path", "graph", "node", "end", "path"]], "graph": [["start", "graph"], ["graph", "start"], ["newpath", "find_path", "graph", "node", "end", "path"]], "path": [["path", "path", "start"], ["node", "path"], ["newpath", "find_path", "graph", "node", "end", "path"]], "start": [["path", "path", "start"], ["start", "end"], ["start", "graph"], ["graph", "start"]]}, "params_p": {"args": [], "end": [["str", 0.48131723263678916], ["Dict[str, Any]", 0.11033236240526083], ["bool", 0.10201870720187223], ["List[str]", 0.08985220877887604]], "graph": [["str", 0.3876628313246642], ["bool", 0.09197529525852724]], "kwargs": [], "path": [["str", 0.2149078720301985], ["bool", 0.1076311915166036], ["List[str]", 0.1003089778356286]], "start": [["str", 0.5878408051086943], ["int", 0.10386127627935696]]}, "q_name": "find_path", "ret_exprs": ["return path", "return None", "return newpath", "return None"], "ret_type": "", "ret_type_p": [["bool", 0.5849138876211071], ["List[str]", 0.20601725801177267], ["str", 0.10140483735303041]], "variables": {"newpath": "", "path": ""}, "variables_p": {"newpath": [["str", 0.32780133210421125], ["Pattern[str]", 0.08318598962871429], ["Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]", 0.08284856796993409]], "path": [["str", 0.4022895489923896]]}}, {"docstring": {"func": "Find all paths between two nodes using recursion and backtracking", "long_descr": null, "ret": null}, "fn_lc": [[22, 0], [37, 16]], "fn_var_ln": {"newpaths": [[34, 12], [34, 20]], "path": [[26, 4], [26, 8]], "paths": [[31, 4], [31, 9]]}, "fn_var_occur": {"newpaths": [["newpaths", "find_all_path", "graph", "node", "end", "path"]], "path": [["path", "path", "start"], ["node", "path"], ["newpaths", "find_all_path", "graph", "node", "end", "path"]], "paths": [["paths", "append", "newpath"]]}, "name": "find_all_path", "params": {"end": "", "graph": "", "path": "", "start": ""}, "params_descr": {"end": "", "graph": "", "path": "", "start": ""}, "params_occur": {"end": [["start", "end"], ["newpaths", "find_all_path", "graph", "node", "end", "path"]], "graph": [["start", "graph"], ["graph", "start"], ["newpaths", "find_all_path", "graph", "node", "end", "path"]], "path": [["path", "path", "start"], ["node", "path"], ["newpaths", "find_all_path", "graph", "node", "end", "path"]], "start": [["path", "path", "start"], ["start", "end"], ["start", "graph"], ["graph", "start"]]}, "params_p": {"args": [], "end": [["str", 0.27159497873460525], ["bool", 0.18674955529168094], ["bytes", 0.11052213641809461], ["Sequence[str]", 0.08658255592006396]], "graph": [["str", 0.5843776149596301]], "kwargs": [], "path": [["str", 0.7016891005517658]], "start": [["str", 0.7241745590597145]]}, "q_name": "find_all_path", "ret_exprs": ["return [path]", "return []", "return paths"], "ret_type": "", "ret_type_p": [["str", 0.26394656290256147], ["List[int]", 0.12123697858064202], ["bool", 0.09247773813555973]], "variables": {"newpaths": "", "path": "", "paths": ""}, "variables_p": {"newpaths": [["str", 0.32780133210421125], ["Pattern[str]", 0.08318598962871429], ["Tuple[Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal, Literal]", 0.08284856796993409]], "path": [["str", 0.4022895489923896]], "paths": [["str", 0.9063584800269942], ["List[Tuple[str, str]]", 0.09364151997300574]]}}, {"docstring": {"func": "find the shortest path between two nodes", "long_descr": null, "ret": null}, "fn_lc": [[39, 0], [55, 19]], "fn_var_ln": {"newpath": [[51, 12], [51, 19]], "path": [[43, 4], [43, 8]], "shortest": [[54, 20], [54, 28]]}, "fn_var_occur": {"newpath": [["newpath", "find_shortest_path", "graph", "node", "end", "path"], ["shortest", "len", "newpath", "len", "shortest"], ["shortest", "newpath"]], "path": [["path", "path", "start"], ["node", "path"], ["newpath", "find_shortest_path", "graph", "node", "end", "path"]], "shortest": [["shortest", "None"], ["shortest", "len", "newpath", "len", "shortest"], ["shortest", "newpath"]]}, "name": "find_shortest_path", "params": {"end": "", "graph": "", "path": "", "start": ""}, "params_descr": {"end": "", "graph": "", "path": "", "start": ""}, "params_occur": {"end": [["start", "end"], ["newpath", "find_shortest_path", "graph", "node", "end", "path"]], "graph": [["start", "graph"], ["graph", "start"], ["newpath", "find_shortest_path", "graph", "node", "end", "path"]], "path": [["path", "path", "start"], ["node", "path"], ["newpath", "find_shortest_path", "graph", "node", "end", "path"]], "start": [["path", "path", "start"], ["start", "end"], ["start", "graph"], ["graph", "start"]]}, "params_p": {"args": [], "end": [["str", 0.4021463981442962], ["Pattern", 0.18604870321898498], ["Set[str]", 0.18604870321898498], ["Dict[str, Any]", 0.09789793763005801]], "graph": [["str", 0.40636133816454634], ["int", 0.10316648765315084]], "kwargs": [], "path": [["str", 0.13234378605875727], ["List[str]", 0.12416807806605334], ["bool", 0.09290905950410763], ["list", 0.09085775204009175]], "start": [["str", 0.4877433368449638], ["int", 0.20455062961470938], ["Sequence[str]", 0.09600846652263263]]}, "q_name": "find_shortest_path", "ret_exprs": ["return path", "return None", "return shortest"], "ret_type": "", "ret_type_p": [["str", 0.4043500538154967], ["Optional[str]", 0.3910277308593179], ["Optional[Dict[str, str]]", 0.10444647743707222]], "variables": {"newpath": "", "path": "", "shortest": ""}, "variables_p": {"newpath": [["str", 0.2370103490137701], ["int", 0.2196121501959904], ["list", 0.12370832376685788], ["Dict[str, Any]", 0.10842573308008208], ["Union[bytes, str]", 0.10034277320157871]], "path": [["str", 0.49638176428711367]], "shortest": [["Dict[int, Tuple[int, int]]", 0.3518359388248329], ["List[int]", 0.12220138493453402], ["list", 0.11725215372560589], ["set", 0.11410910759968974], ["int", 0.060999621776810696]]}}], "imports": [], "mod_var_ln": {}, "mod_var_occur": {}, "no_types_annot": {"D": 0, "I": 0, "U": 20}, "session_id": "BUex0MRsPQU3fxI_GUANOMR2zAwI0mxHHzVuMInFdzw", "set": null, "tc": [false, null], "type_annot_cove": 0.0, "typed_seq": "", "untyped_seq": "", "variables": {}, "variables_p": {}}}