{"error": null, "response": {"classes": [{"cls_lc": [[13, 0], [79, 23]], "cls_var_ln": {}, "cls_var_occur": {}, "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[40, 4], [43, 22]], "fn_var_ln": {"count": [[43, 8], [43, 18]], "parents": [[41, 8], [41, 20]], "size": [[42, 8], [42, 17]]}, "fn_var_occur": {"count": [["self", "count"]], "parents": [["self", "parents"]], "size": [["self", "size"]]}, "name": "__init__", "params": {"self": ""}, "params_descr": {"self": ""}, "params_occur": {"self": [["self", "parents"], ["self", "size"], ["self", "count"]]}, "params_p": {"args": [], "kwargs": [], "self": []}, "q_name": "Union.__init__", "ret_exprs": [], "ret_type": "", "variables": {"count": "", "parents": "", "size": ""}, "variables_p": {"count": [["str", 0.30000000000000004], ["Dict[str, Any]", 0.1], ["dict", 0.1], ["int", 0.1]], "parents": [["set", 0.09725437782417903]], "size": [["int", 0.4352522651852141], ["deque", 0.1701414137494698], ["str", 0.08655542227373189], ["Optional[str]", 0.05811838832505512], ["Any", 0.03918110358237317]]}}, {"docstring": {"func": "Add a new set containing the single element", "long_descr": null, "ret": null}, "fn_lc": [[45, 4], [52, 23]], "fn_var_ln": {}, "fn_var_occur": {}, "name": "add", "params": {"element": "", "self": ""}, "params_descr": {"element": "", "self": ""}, "params_occur": {"element": [["self", "parents", "element", "element"], ["self", "size", "element"]], "self": [["self", "parents", "element", "element"], ["self", "size", "element"], ["self", "count"]]}, "params_p": {"args": [], "element": [["int", 0.309144860702608], ["Sequence[T]", 0.11509778233909856], ["str", 0.10041163382870494], ["List[int]", 0.09081883970687796]], "kwargs": [], "self": []}, "q_name": "Union.add", "ret_exprs": [], "ret_type": "", "variables": {}, "variables_p": {}}, {"docstring": {"func": "Find the root element which represents the set of a given element.", "long_descr": "That is, all elements that are in the same set will return the same\nroot element.", "ret": null}, "fn_lc": [[54, 4], [64, 22]], "fn_var_ln": {"element": [[63, 12], [63, 19]]}, "fn_var_occur": {"element": [["element", "self", "parents", "element"], ["self", "parents", "element", "self", "parents", "self", "parents", "element"], ["element", "self", "parents", "element"]]}, "name": "root", "params": {"element": "", "self": ""}, "params_descr": {"element": "", "self": ""}, "params_occur": {"element": [["element", "self", "parents", "element"], ["self", "parents", "element", "self", "parents", "self", "parents", "element"], ["element", "self", "parents", "element"]], "self": [["element", "self", "parents", "element"], ["self", "parents", "element", "self", "parents", "self", "parents", "element"], ["element", "self", "parents", "element"]]}, "params_p": {"args": [], "element": [["list", 0.09900002836523113], ["str", 0.09900002836523113]], "kwargs": [], "self": []}, "q_name": "Union.root", "ret_exprs": ["return element"], "ret_type": "", "ret_type_p": [["List[str]", 0.45689287175143456], ["bool", 0.1828029848140189], ["list", 0.09186510522436923], ["str", 0.09099677503276145]], "variables": {"element": ""}, "variables_p": {"element": [["int", 0.594016144196373], ["range", 0.2061279146457748], ["List[str]", 0.09639550962859313]]}}, {"docstring": {"func": "Finds the sets which contains the two elements and merges them into a", "long_descr": "single set.", "ret": null}, "fn_lc": [[66, 4], [79, 23]], "fn_var_ln": {"root1": [[76, 12], [76, 17]], "root2": [[76, 19], [76, 24]]}, "fn_var_occur": {"root1": [["root1", "root2", "self", "root", "element1", "self", "root", "element2"], ["root1", "root2"], ["self", "size", "root1", "self", "size", "root2"], ["root1", "root2", "root2", "root1"], ["self", "parents", "root1", "root2"], ["self", "size", "root2", "self", "size", "root1"]], "root2": [["root1", "root2", "self", "root", "element1", "self", "root", "element2"], ["root1", "root2"], ["self", "size", "root1", "self", "size", "root2"], ["root1", "root2", "root2", "root1"], ["self", "parents", "root1", "root2"], ["self", "size", "root2", "self", "size", "root1"]]}, "name": "unite", "params": {"element1": "", "element2": "", "self": ""}, "params_descr": {"element1": "", "element2": "", "self": ""}, "params_occur": {"element1": [["root1", "root2", "self", "root", "element1", "self", "root", "element2"]], "element2": [["root1", "root2", "self", "root", "element1", "self", "root", "element2"]], "self": [["root1", "root2", "self", "root", "element1", "self", "root", "element2"], ["self", "size", "root1", "self", "size", "root2"], ["self", "parents", "root1", "root2"], ["self", "size", "root2", "self", "size", "root1"], ["self", "count"]]}, "params_p": {"args": [], "element1": [["str", 0.2731487266699241], ["Dict[str, Any]", 0.13049718296971557], ["Mapping", 0.11009072112582215]], "element2": [["str", 0.2731487266699241], ["Dict[str, Any]", 0.13049718296971557], ["Mapping", 0.11009072112582215]], "kwargs": [], "self": []}, "q_name": "Union.unite", "ret_exprs": ["return"], "ret_type": "", "ret_type_p": [["Union[tuple, list]", 0.12326783261663934], ["List[int]", 0.09124591253820835], ["Dict[str, Any]", 0.08769568774684897], ["str", 0.08682447752895113]], "variables": {"root1": "", "root2": ""}, "variables_p": {"root1": [["str", 0.18915820641143827]], "root2": [["str", 0.18915820641143827]]}}], "name": "Union", "q_name": "Union", "variables": {}, "variables_p": {}}], "funcs": [{"docstring": {"func": "Given a list of positions to operate, count the number of islands", "long_descr": "after each addLand operation. An island is surrounded by water and is\nformed by connecting adjacent lands horizontally or vertically. You may\nassume all four edges of the grid are all surrounded by water.\n\nGiven a 3x3 grid, positions = [[0,0], [0,1], [1,2], [2,1]].\nInitially, the 2d grid grid is filled with water.\n(Assume 0 represents water and 1 represents land).\n\n0 0 0\n0 0 0\n0 0 0\nOperation #1: addLand(0, 0) turns the water at grid[0][0] into a land.\n\n1 0 0\n0 0 0   Number of islands = 1\n0 0 0\nOperation #2: addLand(0, 1) turns the water at grid[0][1] into a land.\n\n1 1 0\n0 0 0   Number of islands = 1\n0 0 0\nOperation #3: addLand(1, 2) turns the water at grid[1][2] into a land.\n\n1 1 0\n0 0 1   Number of islands = 2\n0 0 0\nOperation #4: addLand(2, 1) turns the water at grid[2][1] into a land.\n\n1 1 0\n0 0 1   Number of islands = 3\n0 1 0", "ret": null}, "fn_lc": [[81, 0], [126, 14]], "fn_var_ln": {"adjacent": [[122, 12], [122, 20]], "ans": [[117, 4], [117, 7]], "islands": [[118, 4], [118, 11]]}, "fn_var_occur": {"adjacent": [["adjacent", "position", "delta", "position", "delta"], ["adjacent", "islands", "parents"], ["islands", "unite", "position", "adjacent"]], "ans": [["ans", "islands", "count"]], "islands": [["islands", "Union"], ["islands", "add", "position"], ["adjacent", "islands", "parents"], ["islands", "unite", "position", "adjacent"], ["ans", "islands", "count"]]}, "name": "num_islands", "params": {"positions": ""}, "params_descr": {"positions": ""}, "params_occur": {"positions": [["map", "tuple", "positions"]]}, "params_p": {"args": [], "kwargs": [], "positions": [["Optional[Iterable[str]]", 0.11987192489708723], ["List[Dict]", 0.10519050203410213], ["int", 0.08527206678292268], ["List[int]", 0.07282824917503222]]}, "q_name": "num_islands", "ret_exprs": ["return ans"], "ret_type": "", "ret_type_p": [["int", 9.339518094694719e-10], ["str", 4.5411677012762364e-10], ["deque", 2.7618607306934494e-10]], "variables": {"adjacent": "", "ans": "", "islands": ""}, "variables_p": {"adjacent": [["Optional[Match[str]]", 0.9999999995454201], ["int", 1.2667150293955704e-10]], "ans": [["bytes", 0.19999999999999998], ["str", 0.19999999999999998], ["Tuple[str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str, str]", 0.09999999999999999], ["int", 0.09999999999999999]], "islands": [["Union[List[Any], list]", 0.10543583940162901], ["int", 0.0926869787251114], ["tuple", 0.08710580633668416], ["Tuple[Any, Any, Any, Any]", 0.08691388980467377]]}}], "imports": [], "mod_var_ln": {}, "mod_var_occur": {}, "no_types_annot": {"D": 0, "I": 0, "U": 18}, "session_id": "bEVghcoGdRgmrv1WXI6DJj9rUIRd6SgAQiUTmuOSeZw", "set": null, "tc": [false, null], "type_annot_cove": 0.0, "typed_seq": "", "untyped_seq": "", "variables": {}, "variables_p": {}}}