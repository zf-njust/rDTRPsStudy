{"error": null, "response": {"classes": [], "funcs": [{"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[1, 0], [25, 15]], "fn_var_ln": {"fast": [[7, 8], [7, 12]], "head": [[24, 8], [24, 12]], "next": [[15, 8], [15, 19]], "node": [[23, 8], [23, 12]], "nxt": [[14, 8], [14, 11]], "second": [[17, 8], [17, 14]], "slow": [[8, 8], [8, 12]]}, "fn_var_occur": {"fast": [["fast", "slow", "head", "next", "head"], ["fast", "fast", "next"], ["fast", "fast", "next", "next"]], "head": [["fast", "slow", "head", "next", "head"], ["node", "val", "head", "val"], ["head", "head", "next"]], "next": [["fast", "slow", "head", "next", "head"], ["fast", "fast", "next"], ["fast", "fast", "next", "next"], ["slow", "slow", "next"], ["second", "slow", "next"], ["slow", "next", "None"], ["nxt", "second", "next"], ["second", "next", "node"], ["node", "node", "next"], ["head", "head", "next"]], "node": [["node", "None"], ["second", "next", "node"], ["node", "second"], ["node", "val", "head", "val"], ["node", "node", "next"]], "nxt": [["nxt", "second", "next"], ["second", "nxt"]], "second": [["second", "slow", "next"], ["nxt", "second", "next"], ["second", "next", "node"], ["node", "second"], ["second", "nxt"]], "slow": [["fast", "slow", "head", "next", "head"], ["slow", "slow", "next"], ["second", "slow", "next"], ["slow", "next", "None"]]}, "name": "is_palindrome", "params": {"head": ""}, "params_descr": {"head": ""}, "params_occur": {"head": [["fast", "slow", "head", "next", "head"], ["node", "val", "head", "val"], ["head", "head", "next"]]}, "params_p": {"args": [], "head": [["int", 0.37926772375587037], ["str", 0.20711442709704814]], "kwargs": []}, "q_name": "is_palindrome", "ret_exprs": ["return True", "return False", "return True"], "ret_type": "", "ret_type_p": [["bool", 0.9999999999999999]], "variables": {"fast": "", "head": "", "next": "", "node": "", "nxt": "", "second": "", "slow": ""}, "variables_p": {"fast": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["str", 0.1]], "head": [["List[str]", 0.7238759563556673], ["int", 0.18967175827074437], ["Type[Optional[Any]]", 0.042062909349726244]], "next": [["Tuple[Any, Any]", 0.9999999997162369], ["str", 3.3369314462126145e-11], ["int", 3.041898984661913e-11]], "node": [["int", 0.11125293463549835], ["list", 0.10358150457110195]], "nxt": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["str", 0.1]], "second": [["float", 0.09482579966122115], ["list", 0.0930759904402074]], "slow": []}}, {"docstring": {"func": null, "long_descr": null, "ret": null}, "fn_lc": [[28, 0], [49, 15]], "fn_var_ln": {"cur": [[47, 8], [47, 11]], "fast": [[35, 8], [35, 12]], "slow": [[40, 8], [40, 12]], "stack": [[38, 4], [38, 9]]}, "fn_var_occur": {"cur": [["slow", "fast", "cur", "head"], ["stack", "pop", "cur", "val"], ["cur", "cur", "next"]], "fast": [["slow", "fast", "cur", "head"], ["fast", "fast", "next"], ["fast", "slow", "fast", "next", "next", "slow", "next"]], "slow": [["slow", "fast", "cur", "head"], ["fast", "slow", "fast", "next", "next", "slow", "next"], ["stack", "slow", "val"], ["slow", "next"], ["slow", "slow", "next"], ["stack", "append", "slow", "val"]], "stack": [["stack", "slow", "val"], ["stack", "append", "slow", "val"], ["stack", "pop", "cur", "val"]]}, "name": "is_palindrome_stack", "params": {"head": ""}, "params_descr": {"head": ""}, "params_occur": {"head": [["head", "head", "next"], ["slow", "fast", "cur", "head"]]}, "params_p": {"args": [], "head": [["str", 0.19999999999999998], ["int", 0.09999999999999999]], "kwargs": []}, "q_name": "is_palindrome_stack", "ret_exprs": ["return True", "return False", "return True"], "ret_type": "", "ret_type_p": [["bool", 0.9999999999999999]], "variables": {"cur": "", "fast": "", "slow": "", "stack": ""}, "variables_p": {"cur": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["str", 0.1]], "fast": [["int", 0.2], ["dict", 0.1], ["List[int]", 0.1], ["List[List[int]]", 0.1], ["str", 0.1]], "slow": [["int", 1.902417013629091e-11]], "stack": [["list", 0.7], ["str", 0.09999999999999999], ["int", 0.09999999999999999]]}}, {"docstring": {"func": "This function builds up a dictionary where the keys are the values of the list,", "long_descr": "and the values are the positions at which these values occur in the list.\nWe then iterate over the dict and if there is more than one key with an odd\nnumber of occurrences, bail out and return False.\nOtherwise, we want to ensure that the positions of occurrence sum to the\nvalue of the length of the list - 1, working from the outside of the list inward.\nFor example:\nInput: 1 -> 1 -> 2 -> 3 -> 2 -> 1 -> 1\nd = {1: [0,1,5,6], 2: [2,4], 3: [3]}\n'3' is the middle outlier, 2+4=6, 0+6=6 and 5+1=6 so we have a palindrome.", "ret": null}, "fn_lc": [[52, 0], [89, 15]], "fn_var_ln": {"checksum": [[76, 4], [76, 12]], "d": [[67, 4], [67, 5]], "head": [[74, 8], [74, 12]], "middle": [[77, 4], [77, 10]], "pos": [[68, 4], [68, 7]], "step": [[82, 12], [82, 16]]}, "fn_var_occur": {"checksum": [["checksum", "pos"], ["v", "i", "v", "len", "v", "step", "checksum"]], "d": [["head", "val", "d", "keys"], ["d", "head", "val", "append", "pos"], ["d", "head", "val", "pos"], ["d", "values"]], "head": [["head", "head", "next"], ["head", "val", "d", "keys"], ["d", "head", "val", "append", "pos"], ["d", "head", "val", "pos"], ["head", "head", "next"]], "middle": [], "pos": [["d", "head", "val", "append", "pos"], ["d", "head", "val", "pos"], ["checksum", "pos"]], "step": [["v", "i", "v", "len", "v", "step", "checksum"]]}, "name": "is_palindrome_dict", "params": {"head": ""}, "params_descr": {"head": ""}, "params_occur": {"head": [["head", "head", "next"], ["head", "val", "d", "keys"], ["d", "head", "val", "append", "pos"], ["d", "head", "val", "pos"], ["head", "head", "next"]]}, "params_p": {"args": [], "head": [["str", 0.19640356930547326], ["Set[str]", 0.09707663449565629]], "kwargs": []}, "q_name": "is_palindrome_dict", "ret_exprs": ["return True", "return False", "return False", "return True"], "ret_type": "", "ret_type_p": [["bool", 0.9999999999999999]], "variables": {"checksum": "", "d": "", "head": "", "middle": "", "pos": "", "step": ""}, "variables_p": {"checksum": [["int", 0.5357880523667568], ["List[int]", 0.3770447658539274], ["list", 0.08716718177931577]], "d": [["list", 0.3904485180739956], ["List[float]", 0.09545870330241976], ["Dict[str, List[Any]]", 0.08793723918831832], ["dict", 0.08734822655054415], ["List[str]", 0.08638322983343774]], "head": [["list", 0.23595642157741234], ["str", 0.2092482173872006], ["float", 0.12195727919747142], ["Set[str]", 0.08796695947774086]], "middle": [["str", 0.4], ["List[str]", 0.1], ["int", 0.1], ["Dict[str, List[Any]]", 0.1], ["Tuple[str, str, str, str, str, str, str, str]", 0.1]], "pos": [["int", 0.5342463584320053], ["float", 0.1878178893169553], ["str", 0.18654736398965088], ["List[Dict[str, Any]]", 0.09138838826138843]], "step": [["list", 0.6172918079013857], ["int", 0.19449208595731315], ["str", 0.0894836421833506]]}}], "imports": [], "mod_var_ln": {}, "mod_var_occur": {}, "no_types_annot": {"D": 0, "I": 0, "U": 21}, "session_id": "K8dBlhG-OxAgmRl-6fca76xG0nElJp6MlYUEDx69-oQ", "set": null, "tc": [false, null], "type_annot_cove": 0.0, "typed_seq": "", "untyped_seq": "", "variables": {}, "variables_p": {}}}