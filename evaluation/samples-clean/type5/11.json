{
  "code": "def load_data_list(self) -> List[dict]:\\n        \"\"\"Load annotations from an annotation file named as ``self.ann_file``\\n\\n        Returns:\\n            List[dict]: A list of annotation.\\n        \"\"\"  # noqa: E501\\n        try:\\n            import lvis\\n            if getattr(lvis, '__version__', '0') >= '10.5.3':\\n                warnings.warn(\\n                    'mmlvis is deprecated, please install official lvis-api by \"pip install git+https://github.com/lvis-dataset/lvis-api.git\"',  # noqa: E501\\n                    UserWarning)\\n            from lvis import LVIS\\n        except ImportError:\\n            raise ImportError(\\n                'Package lvis is not installed. Please run \"pip install git+https://github.com/lvis-dataset/lvis-api.git\".'  # noqa: E501\\n            )\\n        with get_local_path(\\n                self.ann_file, backend_args=self.backend_args) as local_path:\\n            self.lvis = LVIS(local_path)\\n        self.cat_ids = self.lvis.get_cat_ids()\\n        self.cat2label = {cat_id: i for i, cat_id in enumerate(self.cat_ids)}\\n        self.cat_img_map = copy.deepcopy(self.lvis.cat_img_map)\\n\\n        img_ids = self.lvis.get_img_ids()\\n        data_list = []\\n        total_ann_ids = []\\n        for img_id in img_ids:\\n            raw_img_info = self.lvis.load_imgs([img_id])[0]\\n            raw_img_info['img_id'] = img_id\\n            # coco_url is used in LVISv1 instead of file_name\\n            # e.g. http://images.cocodataset.org/train2017/000000391895.jpg\\n            # train/val split in specified in url\\n            raw_img_info['file_name'] = raw_img_info['coco_url'].replace(\\n                'http://images.cocodataset.org/', '')\\n            ann_ids = self.lvis.get_ann_ids(img_ids=[img_id])\\n            raw_ann_info = self.lvis.load_anns(ann_ids)\\n            total_ann_ids.extend(ann_ids)\\n            parsed_data_info = self.parse_data_info({\\n                'raw_ann_info':\\n                raw_ann_info,\\n                'raw_img_info':\\n                raw_img_info\\n            })\\n            data_list.append(parsed_data_info)\\n        if self.ANN_ID_UNIQUE:\\n            assert len(set(total_ann_ids)) == len(\\n                total_ann_ids\\n            ), f\"Annotation ids in '{self.ann_file}' are not unique!\"\\n\\n        del self.lvis\\n\\n        return data_list",
  "smell": [
    {
      "smell_id": 5,
      "line_no": 51,
      "description": "The attribute is deleted from an object through a dynamically determined name."
    }
  ]
}