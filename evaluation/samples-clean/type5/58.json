{
  "code": "def test_class_with_property(normalize):\\n    string_io = io.StringIO()\\n\\n    @pysnooper.snoop(string_io, normalize=normalize, color=False)\\n    class MyClass(object):\\n        def __init__(self):\\n            self._x = 0\\n\\n        def plain_method(self):\\n            pass\\n\\n        @property\\n        def x(self):\\n            self.plain_method()\\n            return self._x\\n\\n        @x.setter\\n        def x(self, value):\\n            self.plain_method()\\n            self._x = value\\n\\n        @x.deleter\\n        def x(self):\\n            self.plain_method()\\n            del self._x\\n\\n    instance = MyClass()\\n\\n    # Do simple property operations, make sure we didn't mess up the normal behavior\\n    result = instance.x\\n    assert result == instance._x\\n\\n    instance.x = 1\\n    assert instance._x == 1\\n\\n    del instance.x\\n    with pytest.raises(AttributeError):\\n        instance._x\\n\\n    # The property methods will not be traced, but their calls to plain_method will be.\\n    output = string_io.getvalue()\\n    assert_output(\\n        output,\\n        (\\n            SourcePathEntry(),\\n            VariableEntry('self', value_regex=\"u?.*MyClass object\"),\\n            CallEntry('def __init__(self):'),\\n            LineEntry('self._x = 0'),\\n            ReturnEntry('self._x = 0'),\\n            ReturnValueEntry('None'),\\n            ElapsedTimeEntry(),\\n\\n            # Called from getter\\n            VariableEntry('self', value_regex=\"u?.*MyClass object\"),\\n            CallEntry('def plain_method(self):'),\\n            LineEntry('pass'),\\n            ReturnEntry('pass'),\\n            ReturnValueEntry('None'),\\n            ElapsedTimeEntry(),\\n\\n            # Called from setter\\n            VariableEntry('self', value_regex=\"u?.*MyClass object\"),\\n            CallEntry('def plain_method(self):'),\\n            LineEntry('pass'),\\n            ReturnEntry('pass'),\\n            ReturnValueEntry('None'),\\n            ElapsedTimeEntry(),\\n\\n            # Called from deleter\\n            VariableEntry('self', value_regex=\"u?.*MyClass object\"),\\n            CallEntry('def plain_method(self):'),\\n            LineEntry('pass'),\\n            ReturnEntry('pass'),\\n            ReturnValueEntry('None'),\\n            ElapsedTimeEntry(),\\n        ),\\n        normalize=normalize,\\n    )",
  "smell": [
    {
      "smell_id": 5,
      "line_no": 36,
      "description": "The attribute is deleted from an object through a dynamically determined name."
    }
  ]
}