{
  "code": "def load_data_list(self) -> Tuple[List[dict], List]:\\n        \"\"\"Load annotations from an annotation file named as ``self.ann_file``.\\n\\n        Returns:\\n            tuple(list[dict], list): A list of annotation and a list of\\n            valid data indices.\\n        \"\"\"\\n        with fileio.get_local_path(self.ann_file) as local_path:\\n            self.coco = COCO(local_path)\\n        # The order of returned `cat_ids` will not\\n        # change with the order of the classes\\n        self.cat_ids = self.coco.get_cat_ids(\\n            cat_names=self.metainfo['classes'])\\n        self.cat2label = {cat_id: i for i, cat_id in enumerate(self.cat_ids)}\\n        self.cat_img_map = copy.deepcopy(self.coco.cat_img_map)\\n        # used in `filter_data`\\n        self.img_ids_with_ann = set()\\n\\n        img_ids = self.coco.get_img_ids()\\n        total_ann_ids = []\\n        # if ``video_id`` is not in the annotation file, we will assign a big\\n        # unique video_id for this video.\\n        single_video_id = 100000\\n        videos = {}\\n        for img_id in img_ids:\\n            raw_img_info = self.coco.load_imgs([img_id])[0]\\n            raw_img_info['img_id'] = img_id\\n            if 'video_id' not in raw_img_info:\\n                single_video_id = single_video_id + 1\\n                video_id = single_video_id\\n            else:\\n                video_id = raw_img_info['video_id']\\n\\n            if video_id not in videos:\\n                videos[video_id] = {\\n                    'video_id': video_id,\\n                    'images': [],\\n                    'video_length': 0\\n                }\\n\\n            videos[video_id]['video_length'] += 1\\n            ann_ids = self.coco.get_ann_ids(\\n                img_ids=[img_id], cat_ids=self.cat_ids)\\n            raw_ann_info = self.coco.load_anns(ann_ids)\\n            total_ann_ids.extend(ann_ids)\\n\\n            parsed_data_info = self.parse_data_info(\\n                dict(raw_img_info=raw_img_info, raw_ann_info=raw_ann_info))\\n\\n            if len(parsed_data_info['instances']) > 0:\\n                self.img_ids_with_ann.add(parsed_data_info['img_id'])\\n\\n            videos[video_id]['images'].append(parsed_data_info)\\n\\n        data_list = [v for v in videos.values()]\\n\\n        if self.ANN_ID_UNIQUE:\\n            assert len(set(total_ann_ids)) == len(\\n                total_ann_ids\\n            ), f\"Annotation ids in '{self.ann_file}' are not unique!\"\\n\\n        del self.coco\\n\\n        return data_list",
  "smell": [
    {
      "smell_id": 5,
      "line_no": 62,
      "description": "The attribute is deleted from an object through a dynamically determined name."
    }
  ]
}