{
  "code": "def make_namespace_exports(components, prefix):\n    export_string = \"\"\n    for component in components:\n        if (\n                not component.endswith(\"-*\")\n                and str(component) not in r_keywords\n                and str(component) not in [\"setProps\", \"children\"]\n        ):\n            export_string += \"export({}{})\\n\".format(prefix, component)\n\n    # the following lines enable rudimentary support for bundling in\n    # R functions that are not automatically generated by the transpiler\n    # such that functions contained in the R subdirectory are exported,\n    # so long as they are not in utils.R.\n    rfilelist = []\n    omitlist = [\"utils.R\", \"internal.R\"] + [\n        \"{}{}.R\".format(prefix, component) for component in components\n    ]\n    fnlist = []\n\n    for script in os.listdir(\"R\"):\n        if script.endswith(\".R\") and script not in omitlist:\n            rfilelist += [os.path.join(\"R\", script)]\n\n    for rfile in rfilelist:\n        with open(rfile, \"r\") as script:\n            s = script.read()\n\n            # remove comments\n            s = re.sub('#.*$', '', s, flags=re.M)\n\n            # put the whole file on one line\n            s = s.replace(\"\\n\", \" \").replace(\"\\r\", \" \")\n\n            # empty out strings, in case of unmatched block terminators\n            s = re.sub(r\"'([^'\\\\]|\\\\'|\\\\[^'])*'\", \"''\", s)\n            s = re.sub(r'\"([^\"\\\\]|\\\\\"|\\\\[^\"])*\"', '\"\"', s)\n\n            # empty out block terminators () and {}\n            # so we don't catch nested functions, or functions as arguments\n            # repeat until it stops changing, in case of multiply nested blocks\n            prev_len = len(s) + 1\n            while len(s) < prev_len:\n                prev_len = len(s)\n                s = re.sub(r\"\\(([^()]|\\(\\))*\\)\", \"()\", s)\n                s = re.sub(r\"\\{([^{}]|\\{\\})*\\}\", \"{}\", s)\n\n            # now, in whatever is left, look for functions\n            matches = re.findall(\n                # in R, either = or <- may be used to create and assign objects\n                r\"([^A-Za-z0-9._]|^)([A-Za-z0-9._]+)\\s*(=|<-)\\s*function\", s\n            )\n            for match in matches:\n                fn = match[1]\n                # Allow users to mark functions as private by prefixing with .\n                if fn[0] != \".\" and fn not in fnlist:\n                    fnlist.append(fn)\n\n    export_string += \"\\n\".join(\"export({})\".format(function)\n                               for function in fnlist)\n    return export_string",
  "smell": [
    {
      "smell_id": 1,
      "line_no": 26,
      "description": "The variable is redefined with an inconsistent type object."
    }
  ]
}