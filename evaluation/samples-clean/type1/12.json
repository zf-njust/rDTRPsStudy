{
  "code": "    def get_local_facts(self):\n\n        fact_path = self.module.params.get('fact_path', None)\n        if not fact_path or not os.path.exists(fact_path):\n            return\n\n        local = {}\n        for fn in sorted(glob.glob(fact_path + '/*.fact')):\n            # where it will sit under local facts\n            fact_base = os.path.basename(fn).replace('.fact','')\n            if stat.S_IXUSR & os.stat(fn)[stat.ST_MODE]:\n                # run it\n                # try to read it as json first\n                # if that fails read it with ConfigParser\n                # if that fails, skip it\n                try:\n                    rc, out, err = self.module.run_command(fn)\n                except UnicodeError:\n                    fact = 'error loading fact - output of running %s was not utf-8' % fn\n                    local[fact_base] = fact\n                    self.facts['local'] = local\n                    return\n            else:\n                out = get_file_content(fn, default='')\n\n            # load raw json\n            fact = 'loading %s' % fact_base\n            try:\n                fact = json.loads(out)\n            except ValueError:\n                # load raw ini\n                cp = configparser.ConfigParser()\n                try:\n                    cp.readfp(StringIO(out))\n                except configparser.Error:\n                    fact = \"error loading fact - please check content\"\n                else:\n                    fact = {}\n                    for sect in cp.sections():\n                        if sect not in fact:\n                            fact[sect] = {}\n                        for opt in cp.options(sect):\n                            val = cp.get(sect, opt)\n                            fact[sect][opt]=val\n\n            local[fact_base] = fact\n        if not local:\n            return\n        self.facts['local'] = local",
  "smell": [
    {
      "smell_id": 1,
      "line_no": 38,
      "description": "The variable is redefined with an inconsistent type object."
    }
  ]
}