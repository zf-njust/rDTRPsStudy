{
  "code": "def test_chebint(self):\n        # check exceptions\n        assert_raises(ValueError, cheb.chebint, [0], .5)\n        assert_raises(ValueError, cheb.chebint, [0], -1)\n        assert_raises(ValueError, cheb.chebint, [0], 1, [0, 0])\n\n        # test integration of zero polynomial\n        for i in range(2, 5):\n            k = [0]*(i - 2) + [1]\n            res = cheb.chebint([0], m=i, k=k)\n            assert_almost_equal(res, [0, 1])\n\n        # check single integration with integration constant\n        for i in range(5):\n            scl = i + 1\n            pol = [0]*i + [1]\n            tgt = [i] + [0]*i + [1/scl]\n            chebpol = cheb.poly2cheb(pol)\n            chebint = cheb.chebint(chebpol, m=1, k=[i])\n            res = cheb.cheb2poly(chebint)\n            assert_almost_equal(trim(res), trim(tgt))\n\n        # check single integration with integration constant and lbnd\n        for i in range(5):\n            scl = i + 1\n            pol = [0]*i + [1]\n            chebpol = cheb.poly2cheb(pol)\n            chebint = cheb.chebint(chebpol, m=1, k=[i], lbnd=-1)\n            assert_almost_equal(cheb.chebval(-1, chebint), i)\n\n        # check single integration with integration constant and scaling\n        for i in range(5):\n            scl = i + 1\n            pol = [0]*i + [1]\n            tgt = [i] + [0]*i + [2/scl]\n            chebpol = cheb.poly2cheb(pol)\n            chebint = cheb.chebint(chebpol, m=1, k=[i], scl=2)\n            res = cheb.cheb2poly(chebint)\n            assert_almost_equal(trim(res), trim(tgt))\n\n        # check multiple integrations with default k\n        for i in range(5):\n            for j in range(2, 5):\n                pol = [0]*i + [1]\n                tgt = pol[:]\n                for k in range(j):\n                    tgt = cheb.chebint(tgt, m=1)\n                res = cheb.chebint(pol, m=j)\n                assert_almost_equal(trim(res), trim(tgt))\n\n        # check multiple integrations with defined k\n        for i in range(5):\n            for j in range(2, 5):\n                pol = [0]*i + [1]\n                tgt = pol[:]\n                for k in range(j):\n                    tgt = cheb.chebint(tgt, m=1, k=[k])\n                res = cheb.chebint(pol, m=j, k=list(range(j)))\n                assert_almost_equal(trim(res), trim(tgt))\n\n        # check multiple integrations with lbnd\n        for i in range(5):\n            for j in range(2, 5):\n                pol = [0]*i + [1]\n                tgt = pol[:]\n                for k in range(j):\n                    tgt = cheb.chebint(tgt, m=1, k=[k], lbnd=-1)\n                res = cheb.chebint(pol, m=j, k=list(range(j)), lbnd=-1)\n                assert_almost_equal(trim(res), trim(tgt))\n\n        # check multiple integrations with scaling\n        for i in range(5):\n            for j in range(2, 5):\n                pol = [0]*i + [1]\n                tgt = pol[:]\n                for k in range(j):\n                    tgt = cheb.chebint(tgt, m=1, k=[k], scl=2)\n                res = cheb.chebint(pol, m=j, k=list(range(j)), scl=2)\n                assert_almost_equal(trim(res), trim(tgt))",
  "smell": [
    {
      "smell_id": 1,
      "line_no": 56,
      "description": "The variable is redefined with an inconsistent type object."
    }
  ]
}