{
  "code": "def get_evaluators(eval_config, categories, evaluator_options=None):\n  \"\"\"Returns the evaluator class according to eval_config, valid for categories.\n\n  Args:\n    eval_config: An `eval_pb2.EvalConfig`.\n    categories: A list of dicts, each of which has the following keys -\n        'id': (required) an integer id uniquely identifying this category.\n        'name': (required) string representing category name e.g., 'cat', 'dog'.\n        'keypoints': (optional) dict mapping this category's keypoints to unique\n          ids.\n    evaluator_options: A dictionary of metric names (see\n      EVAL_METRICS_CLASS_DICT) to `DetectionEvaluator` initialization\n      keyword arguments. For example:\n      evalator_options = {\n        'coco_detection_metrics': {'include_metrics_per_category': True}\n      }\n\n  Returns:\n    An list of instances of DetectionEvaluator.\n\n  Raises:\n    ValueError: if metric is not in the metric class dictionary.\n  \"\"\"\n  evaluator_options = evaluator_options or {}\n  eval_metric_fn_keys = eval_config.metrics_set\n  if not eval_metric_fn_keys:\n    eval_metric_fn_keys = [EVAL_DEFAULT_METRIC]\n  evaluators_list = []\n  for eval_metric_fn_key in eval_metric_fn_keys:\n    if eval_metric_fn_key not in EVAL_METRICS_CLASS_DICT:\n      raise ValueError('Metric not found: {}'.format(eval_metric_fn_key))\n    kwargs_dict = (evaluator_options[eval_metric_fn_key] if eval_metric_fn_key\n                   in evaluator_options else {})\n    evaluators_list.append(EVAL_METRICS_CLASS_DICT[eval_metric_fn_key](\n        categories,\n        **kwargs_dict))\n\n  if isinstance(eval_config, eval_pb2.EvalConfig):\n    parameterized_metrics = eval_config.parameterized_metric\n    for parameterized_metric in parameterized_metrics:\n      assert parameterized_metric.HasField('parameterized_metric')\n      if parameterized_metric.WhichOneof(\n          'parameterized_metric') == EVAL_KEYPOINT_METRIC:\n        keypoint_metrics = parameterized_metric.coco_keypoint_metrics\n        # Create category to keypoints mapping dict.\n        category_keypoints = {}\n        class_label = keypoint_metrics.class_label\n        category = None\n        for cat in categories:\n          if cat['name'] == class_label:\n            category = cat\n            break\n        if not category:\n          continue\n        keypoints_for_this_class = category['keypoints']\n        category_keypoints = [{\n            'id': keypoints_for_this_class[kp_name], 'name': kp_name\n        } for kp_name in keypoints_for_this_class]\n        # Create keypoint evaluator for this category.\n        evaluators_list.append(EVAL_METRICS_CLASS_DICT[EVAL_KEYPOINT_METRIC](\n            category['id'], category_keypoints, class_label,\n            keypoint_metrics.keypoint_label_to_sigmas))\n  return evaluators_list",
  "smell": [
    {
      "smell_id": 1,
      "line_no": 56,
      "description": "The variable is redefined with an inconsistent type object."
    }
  ]
}