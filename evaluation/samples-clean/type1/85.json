{
  "code": "def test_stream_df_to_ds_created_from_df_named_index(self, pd):\n        data = pd.DataFrame(dict(a=[10], b=[20], c=[30])).set_index('c')\n        ds = ColumnDataSource(data)\n        ds._document = \"doc\"\n\n        notify_owners_stuff = {}\n\n        def notify_owners_mock(*args, **kw):\n            notify_owners_stuff['args'] = args\n            notify_owners_stuff['kw'] = kw\n\n        ds.data._notify_owners = notify_owners_mock\n\n        stream_stuff = {}\n        data_stream = ds.data._stream\n\n        def stream_wrapper(*args, **kwargs):\n            stream_stuff['args'] = args\n            stream_stuff['kwargs'] = kwargs\n            data_stream(*args, **kwargs)\n\n        ds.data._stream = stream_wrapper\n\n        ds._stream(pd.DataFrame(dict(a=[11, 12],\n                                     b=[21, 22],\n                                     c=[31, 32])).set_index('c'), 7)\n\n        assert len(stream_stuff['args']) == 5\n        expected_steam_data = dict(a=np.array([11, 12]),\n                                   b=np.array([21, 22]),\n                                   c=np.array([31, 32]))\n        expected_args = (\"doc\", ds, expected_steam_data, 7, None)\n        for i, (arg, ex_arg) in enumerate(zip(stream_stuff['args'], expected_args)):\n            if i == 2:\n                assert arg.keys() == ex_arg.keys()\n                for k, v in arg.items():\n                    assert np.array_equal(v, ex_arg[k])\n            else:\n                assert stream_stuff['args'][i] == expected_args[i]\n\n        assert stream_stuff['kwargs'] == {}\n\n        assert len(notify_owners_stuff['args']) == 1\n        self._assert_equal_dicts_of_arrays(notify_owners_stuff['args'][0],\n                                           dict(a=np.array([10]),\n                                                b=np.array([20]),\n                                                c=np.array([30])))\n\n        self._assert_equal_dicts_of_arrays(dict(ds.data),\n                                           dict(a=np.array([10, 11, 12]),\n                                                b=np.array([20, 21, 22]),\n                                                c=np.array([30, 31, 32])))",
  "smell": [
    {
      "smell_id": 1,
      "line_no": 10,
      "description": "The variable is redefined with an inconsistent type object."
    }
  ]
}