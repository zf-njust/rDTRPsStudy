{
  "code": "    @property\n    def paused(self):\n        if self.scheduler.FAIL_PAUSE_NUM <= 0:\n            return False\n\n        # unpaused --(last FAIL_PAUSE_NUM task failed)--> paused --(PAUSE_TIME)--> unpause_checking\n        #                         unpaused <--(last UNPAUSE_CHECK_NUM task have success)--|\n        #                             paused <--(last UNPAUSE_CHECK_NUM task no success)--|\n        if not self._paused:\n            fail_cnt = 0\n            for _, task in self.active_tasks:\n                # ignore select task\n                if task.get('type') == self.scheduler.TASK_PACK:\n                    continue\n                if 'process' not in task['track']:\n                    logger.error('process not in task, %r', task)\n                if task['track']['process']['ok']:\n                    break\n                else:\n                    fail_cnt += 1\n                if fail_cnt >= self.scheduler.FAIL_PAUSE_NUM:\n                    break\n            if fail_cnt >= self.scheduler.FAIL_PAUSE_NUM:\n                self._paused = True\n                self._paused_time = time.time()\n        elif self._paused is True and (self._paused_time + self.scheduler.PAUSE_TIME < time.time()):\n            self._paused = 'checking'\n            self._unpause_last_seen = self.active_tasks[0][1] if len(self.active_tasks) else None\n        elif self._paused == 'checking':\n            cnt = 0\n            fail_cnt = 0\n            for _, task in self.active_tasks:\n                if task is self._unpause_last_seen:\n                    break\n                # ignore select task\n                if task.get('type') == self.scheduler.TASK_PACK:\n                    continue\n                cnt += 1\n                if task['track']['process']['ok']:\n                    # break with enough check cnt\n                    cnt = max(cnt, self.scheduler.UNPAUSE_CHECK_NUM)\n                    break\n                else:\n                    fail_cnt += 1\n            if cnt >= self.scheduler.UNPAUSE_CHECK_NUM:\n                if fail_cnt == cnt:\n                    self._paused = True\n                    self._paused_time = time.time()\n                else:\n                    self._paused = False\n\n        return self._paused is True",
  "smell": [
    {
      "smell_id": 1,
      "line_no": 27,
      "description": "The variable is redefined with an inconsistent type object."
    }
  ]
}