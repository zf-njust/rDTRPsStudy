{
  "code": "def generate_js_metadata(pkg_data, project_shortname):\n    \"\"\"\n    Dynamically generate R function to supply JavaScript\n    and CSS dependency information required by the dash\n    package for R.\n\n    Parameters\n    ----------\n    project_shortname = component library name, in snake case\n\n    Returns\n    -------\n    function_string = complete R function code to provide component features\n    \"\"\"\n    # make sure the module we're building is available to Python,\n    # even if it hasn't been installed yet\n    sys.path.insert(0, os.getcwd())\n    mod = importlib.import_module(project_shortname)\n\n    alldist = getattr(mod, \"_js_dist\", []) + getattr(mod, \"_css_dist\", [])\n\n    project_ver = pkg_data.get(\"version\")\n\n    rpkgname = snake_case_to_camel_case(project_shortname)\n\n    # since _js_dist may suggest more than one dependency, need\n    # a way to iterate over all dependencies for a given set.\n    # here we define an opening, element, and closing string --\n    # if the total number of dependencies > 1, we can concatenate\n    # them and write a list object in R with multiple elements\n    function_frame_open = frame_open_template.format(rpkgname=rpkgname)\n\n    function_frame = []\n    function_frame_body = []\n\n    # pylint: disable=consider-using-enumerate\n    if len(alldist) > 1:\n        for dep in range(len(alldist)):\n            rpp = alldist[dep][\"relative_package_path\"]\n            if \"dash_\" in rpp:\n                dep_name = rpp.split(\".\")[0]\n            else:\n                dep_name = \"{}\".format(project_shortname)\n                project_ver = str(dep)\n            if \"css\" in rpp:\n                css_name = \"'{}'\".format(rpp)\n                script_name = 'NULL'\n            else:\n                script_name = \"'{}'\".format(rpp)\n                css_name = 'NULL'\n            function_frame += [\n                frame_element_template.format(\n                    dep_name=dep_name,\n                    project_ver=project_ver,\n                    rpkgname=rpkgname,\n                    project_shortname=project_shortname,\n                    script_name=script_name,\n                    css_name=css_name,\n                )\n            ]\n            function_frame_body = \",\\n\".join(function_frame)\n    elif len(alldist) == 1:\n        rpp = alldist[0][\"relative_package_path\"]\n        if \"css\" in rpp:\n            css_name = \"'{}'\".format(rpp)\n            script_name = \"NULL\"\n        else:\n            script_name = \"'{}'\".format(rpp)\n            css_name = \"NULL\"\n        function_frame_body = frame_body_template.format(\n            project_shortname=project_shortname,\n            project_ver=project_ver,\n            rpkgname=rpkgname,\n            script_name=script_name,\n            css_name=css_name,\n        )\n\n    function_string = \"\".join(\n        [function_frame_open, function_frame_body, frame_close_template]\n    )\n\n    return function_string",
  "smell": [
    {
      "smell_id": 1,
      "line_no": 70,
      "description": "The variable is redefined with an inconsistent type object."
    }
  ]
}