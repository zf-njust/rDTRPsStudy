{
  "code": "    def run(self):\n        print('--------------------------------------------')\n        print('Building factory relation file')\n        print('--------------------------------------------')\n\n        root_dir = os.path.dirname(kivy.__file__)\n        filename = os.path.join(root_dir, 'factory_registers.py')\n        with open(filename, 'w') as fd:\n            fd.close()\n\n        # ensure we don't have any thing like doc running\n        symbols = []\n        for root, dirnames, filenames in os.walk(root_dir):\n            if not root.startswith(root_dir):\n                raise Exception('Directory should start with the kivy'\n                                'directory')\n            root = 'kivy' + root[len(root_dir):].replace(os.path.sep, '.')\n            for filename in fnmatch.filter(filenames, '*.[ps][yo]'):\n                module = '%s.%s' % (root, filename[:-3])\n\n                # check ignore list first\n                ignore = False\n                for ignore in ignore_list:\n                    if module.startswith(ignore):\n                        ignore = True\n                        break\n                if ignore:\n                    # print('<<< ignored (ignore list)')\n                    continue\n\n                # special case, core providers\n                if root.startswith('kivy.core.'):\n                    if not root.endswith('__init__.py'):\n                        # print('<<< ignored (not a __init__.py)')\n                        continue\n\n                print('>>>', module, '::', end=' ')\n\n                try:\n                    m = __import__(name=module, fromlist='.')\n                except Exception as e:\n                    print()\n                    print('ERROR:', e)\n                    continue\n                if not hasattr(m, '__all__'):\n                    print()\n                    continue\n                for symbol in getattr(m, '__all__'):\n                    if symbol.startswith('_'):\n                        continue\n                    attr = getattr(m, symbol)\n                    if type(attr) not in (type, type):\n                        continue\n                    symbols.append((symbol, module))\n                    print(symbol, end=' ')\n                print()\n\n        print()\n        print('--------------------------------------------')\n        print('Found %d symbols, generating file' % len(symbols))\n        print('--------------------------------------------')\n\n        filename = os.path.join(root_dir, 'factory_registers.py')\n        with open(filename, 'w') as fd:\n            fd.write('# Auto-generated file by setup.py build_factory\\n')\n            fd.write('\\n')\n            fd.write('from kivy.factory import Factory\\n')\n            fd.write('\\n')\n            fd.write('r = Factory.register\\n')\n            for x in symbols:\n                fd.write(\"r('%s', module='%s')\\n\" % x)\n\n        print('File written at', filename)",
  "smell": [
    {
      "smell_id": 1,
      "line_no": 23,
      "description": "The variable is redefined with an inconsistent type object."
    }
  ]
}