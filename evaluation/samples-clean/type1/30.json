{
  "code": "def runTouchApp(widget=None, slave=False):\n    '''Static main function that starts the application loop.\n    You can access some magic via the following arguments:\n\n    :Parameters:\n        `<empty>`\n            To make dispatching work, you need at least one\n            input listener. If not, application will leave.\n            (MTWindow act as an input listener)\n\n        `widget`\n            If you pass only a widget, a MTWindow will be created\n            and your widget will be added to the window as the root\n            widget.\n\n        `slave`\n            No event dispatching is done. This will be your job.\n\n        `widget + slave`\n            No event dispatching is done. This will be your job but\n            we try to get the window (must be created by you beforehand)\n            and add the widget to it. Very useful for embedding Kivy\n            in another toolkit. (like Qt, check kivy-designed)\n\n    '''\n\n    from kivy.input import MotionEventFactory, kivy_postproc_modules\n\n    # Ok, we got one widget, and we are not in slave mode\n    # so, user don't create the window, let's create it for him !\n    if widget:\n        EventLoop.ensure_window()\n\n    # Instance all configured input\n    for key, value in Config.items('input'):\n        Logger.debug('Base: Create provider from %s' % (str(value)))\n\n        # split value\n        args = str(value).split(',', 1)\n        if len(args) == 1:\n            args.append('')\n        provider_id, args = args\n        provider = MotionEventFactory.get(provider_id)\n        if provider is None:\n            Logger.warning('Base: Unknown <%s> provider' % str(provider_id))\n            continue\n\n        # create provider\n        p = provider(key, args)\n        if p:\n            EventLoop.add_input_provider(p, True)\n\n    # add postproc modules\n    for mod in list(kivy_postproc_modules.values()):\n        EventLoop.add_postproc_module(mod)\n\n    # add main widget\n    if widget and EventLoop.window:\n        if widget not in EventLoop.window.children:\n            EventLoop.window.add_widget(widget)\n\n    # start event loop\n    Logger.info('Base: Start application main loop')\n    EventLoop.start()\n\n    # remove presplash on the next frame\n    if platform == 'android':\n        Clock.schedule_once(EventLoop.remove_android_splash)\n\n    # we are in a slave mode, don't do dispatching.\n    if slave:\n        return\n\n    # in non-slave mode, they are 2 issues\n    #\n    # 1. if user created a window, call the mainloop from window.\n    #    This is due to glut, it need to be called with\n    #    glutMainLoop(). Only FreeGLUT got a gluMainLoopEvent().\n    #    So, we are executing the dispatching function inside\n    #    a redisplay event.\n    #\n    # 2. if no window is created, we are dispatching event loop\n    #    ourself (previous behavior.)\n    #\n    try:\n        if EventLoop.window is None:\n            _run_mainloop()\n        else:\n            EventLoop.window.mainloop()\n    finally:\n        stopTouchApp()",
  "smell": [
    {
      "smell_id": 1,
      "line_no": 42,
      "description": "The variable is redefined with an inconsistent type object."
    }
  ]
}