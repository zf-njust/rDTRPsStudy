{
  "code": "def test_add_offset_nat(self):\n        # freq is DateOffset\n        for freq in ['A', '2A', '3A']:\n            p = Period('NaT', freq=freq)\n            for o in [offsets.YearEnd(2)]:\n                self.assertEqual((p + o).ordinal, tslib.iNaT)\n\n            for o in [offsets.YearBegin(2), offsets.MonthBegin(1), offsets.Minute(),\n                      np.timedelta64(365, 'D'), timedelta(365)]:\n                with tm.assertRaises(ValueError):\n                    p + o\n\n        for freq in ['M', '2M', '3M']:\n            p = Period('NaT', freq=freq)\n            for o in [offsets.MonthEnd(2), offsets.MonthEnd(12)]:\n                self.assertEqual((p + o).ordinal, tslib.iNaT)\n\n            for o in [offsets.YearBegin(2), offsets.MonthBegin(1), offsets.Minute(),\n                      np.timedelta64(365, 'D'), timedelta(365)]:\n                with tm.assertRaises(ValueError):\n                    p + o\n\n        # freq is Tick\n        for freq in ['D', '2D', '3D']:\n            p = Period('NaT', freq=freq)\n            for o in [offsets.Day(5), offsets.Hour(24), np.timedelta64(2, 'D'),\n                      np.timedelta64(3600 * 24, 's'), timedelta(-2), timedelta(hours=48)]:\n                self.assertEqual((p + o).ordinal, tslib.iNaT)\n\n            for o in [offsets.YearBegin(2), offsets.MonthBegin(1), offsets.Minute(),\n                      np.timedelta64(4, 'h'), timedelta(hours=23)]:\n                with tm.assertRaises(ValueError):\n                    p + o\n\n        for freq in ['H', '2H', '3H']:\n            p = Period('NaT', freq=freq)\n            for o in [offsets.Day(2), offsets.Hour(3), np.timedelta64(3, 'h'),\n                      np.timedelta64(3600, 's'), timedelta(minutes=120),\n                      timedelta(days=4, minutes=180)]:\n                self.assertEqual((p + o).ordinal, tslib.iNaT)\n\n            for o in [offsets.YearBegin(2), offsets.MonthBegin(1), offsets.Minute(),\n                      np.timedelta64(3200, 's'), timedelta(hours=23, minutes=30)]:\n                with tm.assertRaises(ValueError):\n                    p + o",
  "smell": [
    {
      "smell_id": 1,
      "line_no": 15,
      "description": "The variable is redefined with an inconsistent type object."
    }
  ]
}