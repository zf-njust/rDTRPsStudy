{
  "code": "    def read_settings(self):\n\n        ''' Reads the settings from the vmware_inventory.ini file '''\n\n        scriptbasename = __file__\n        scriptbasename = os.path.basename(scriptbasename)\n        scriptbasename = scriptbasename.replace('.py', '')\n\n        defaults = {'vmware': {\n            'server': '',\n            'port': 443,\n            'username': '',\n            'password': '',\n            'validate_certs': True,\n            'ini_path': os.path.join(os.path.dirname(__file__), '%s.ini' % scriptbasename),\n            'cache_name': 'ansible-vmware',\n            'cache_path': '~/.ansible/tmp',\n            'cache_max_age': 3600,\n                        'max_object_level': 1,\n                        'alias_pattern': '{{ config.name + \"_\" + config.uuid }}',\n                        'host_pattern': '{{ guest.ipaddress }}',\n                        'host_filters': '{{ guest.gueststate == \"running\" }}',\n                        'groupby_patterns': '{{ guest.guestid }},{{ \"templates\" if config.template else \"guests\"}}',\n                        'lower_var_keys': True }\n           }\n\n        if six.PY3:\n            config = configparser.ConfigParser()\n        else:\n            config = configparser.SafeConfigParser()\n\n        # where is the config?\n        vmware_ini_path = os.environ.get('VMWARE_INI_PATH', defaults['vmware']['ini_path'])\n        vmware_ini_path = os.path.expanduser(os.path.expandvars(vmware_ini_path))\n        config.read(vmware_ini_path)\n\n        # apply defaults\n        for k,v in defaults['vmware'].iteritems():\n            if not config.has_option('vmware', k):\n                    config.set('vmware', k, str(v))\n\n        # where is the cache?\n        self.cache_dir = os.path.expanduser(config.get('vmware', 'cache_path'))\n        if self.cache_dir and not os.path.exists(self.cache_dir):\n            os.makedirs(self.cache_dir)\n\n        # set the cache filename and max age\n        cache_name = config.get('vmware', 'cache_name')\n        self.cache_path_cache = self.cache_dir + \"/%s.cache\" % cache_name\n        self.cache_max_age = int(config.getint('vmware', 'cache_max_age'))\n\n        # mark the connection info \n        self.server =  os.environ.get('VMWARE_SERVER', config.get('vmware', 'server'))\n        self.port = int(os.environ.get('VMWARE_PORT', config.get('vmware', 'port')))\n        self.username = os.environ.get('VMWARE_USERNAME', config.get('vmware', 'username'))\n        self.password = os.environ.get('VMWARE_PASSWORD', config.get('vmware', 'password'))\n        self.validate_certs = os.environ.get('VMWARE_VALIDATE_CERTS', config.get('vmware', 'validate_certs'))\n        if self.validate_certs in ['no', 'false', 'False', False]:\n            self.validate_certs = False\n        else:\n            self.validate_certs = True\n\n        # behavior control\n        self.maxlevel = int(config.get('vmware', 'max_object_level'))\n        self.lowerkeys = config.get('vmware', 'lower_var_keys')\n        if type(self.lowerkeys) != bool:\n            if str(self.lowerkeys).lower() in ['yes', 'true', '1']:\n                self.lowerkeys = True\n            else:    \n                self.lowerkeys = False\n\n        self.host_filters = list(config.get('vmware', 'host_filters').split(','))\n        self.groupby_patterns = list(config.get('vmware', 'groupby_patterns').split(','))\n\n        # save the config\n        self.config = config    ",
  "smell": [
    {
      "smell_id": 1,
      "line_no": 59,
      "description": "The variable is redefined with an inconsistent type object."
    }
  ]
}