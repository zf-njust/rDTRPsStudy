{
  "code": "def on_arrow_pos(self, *l):\n        self_content = self.content\n        if not self_content:\n            Clock.schedule_once(self.on_arrow_pos)\n            return\n        if self_content not in self.children:\n            Clock.schedule_once(self.on_arrow_pos)\n            return\n        self_arrow_pos = self.arrow_pos\n        if self._prev_arrow_pos == self_arrow_pos:\n            return\n        self._prev_arrow_pos = self_arrow_pos\n\n        self_arrow_layout = self._arrow_layout\n        self_arrow_layout.clear_widgets()\n        self_arrow_img = self._arrow_img\n        self._sctr = self._arrow_img\n        self.clear_widgets(do_super=True)\n        self_content.parent = None\n\n        self_arrow_img.size_hint = (1, None)\n        self_arrow_img.height = dp(self_arrow_img.texture_size[1])\n        self_arrow_img.pos = 0, 0\n        widget_list = []\n        arrow_list = []\n        parent = self_arrow_img.parent\n        if parent:\n            parent.remove_widget(self_arrow_img)\n\n        if self_arrow_pos[0] == 'b' or self_arrow_pos[0] == 't':\n            self.cols = 1\n            self.rows = 3\n            self_arrow_layout.orientation = 'horizontal'\n            self_arrow_img.width = self.width / 3\n            self_arrow_layout.size_hint = (1, None)\n            self_arrow_layout.height = self_arrow_img.height\n            if self_arrow_pos[0] == 'b':\n                if self_arrow_pos == 'bottom_mid':\n                    widget_list = (self_content, self_arrow_img)\n                else:\n                    if self_arrow_pos == 'bottom_left':\n                        arrow_list = (self_arrow_img, Widget(), Widget())\n                    elif self_arrow_pos == 'bottom_right':\n                        # add two dummy widgets\n                        arrow_list = (Widget(), Widget(), self_arrow_img)\n                    widget_list = (self_content, self_arrow_layout)\n            else:\n                sctr = Scatter(do_translation=False,\n                               rotation=180,\n                               do_rotation=False,\n                               do_scale=False,\n                               size_hint=(None, None),\n                               size=self_arrow_img.size)\n                sctr.add_widget(self_arrow_img)\n                if self_arrow_pos == 'top_mid':\n                    # add two dummy widgets\n                    arrow_list = (Widget(), sctr, Widget())\n                elif self_arrow_pos == 'top_left':\n                    arrow_list = (sctr, Widget(), Widget())\n                elif self_arrow_pos == 'top_right':\n                    arrow_list = (Widget(), Widget(), sctr)\n                widget_list = (self_arrow_layout, self_content)\n        elif self_arrow_pos[0] == 'l' or self_arrow_pos[0] == 'r':\n            self.cols = 3\n            self.rows = 1\n            self_arrow_img.width = self.height / 3\n            self_arrow_layout.orientation = 'vertical'\n            self_arrow_layout.cols = 1\n            self_arrow_layout.size_hint = (None, 1)\n            self_arrow_layout.width = self_arrow_img.height\n\n            rotation = -90 if self_arrow_pos[0] == 'l' else 90\n            self._sctr = sctr = Scatter(do_translation=False,\n                                        rotation=rotation,\n                                        do_rotation=False,\n                                        do_scale=False,\n                                        size_hint=(None, None),\n                                        size=(self_arrow_img.size))\n            sctr.add_widget(self_arrow_img)\n\n            if self_arrow_pos[-4:] == '_top':\n                arrow_list = (Widget(size_hint=(1, .07)),\n                              sctr, Widget(size_hint=(1, .3)))\n            elif self_arrow_pos[-4:] == '_mid':\n                arrow_list = (Widget(), sctr, Widget())\n                Clock.schedule_once(self._update_arrow)\n            elif self_arrow_pos[-7:] == '_bottom':\n                arrow_list = (Widget(), Widget(), sctr)\n\n            if self_arrow_pos[0] == 'l':\n                widget_list = (self_arrow_layout, self_content)\n            else:\n                widget_list = (self_content, self_arrow_layout)\n\n        # add widgets to arrow_layout\n        add = self_arrow_layout.add_widget\n        for widg in arrow_list:\n            add(widg)\n\n        # add widgets to self\n        add = self.add_widget\n        for widg in widget_list:\n            add(widg)",
  "smell": [
    {
      "smell_id": 1,
      "line_no": 62,
      "description": "The variable is redefined with an inconsistent type object."
    }
  ]
}