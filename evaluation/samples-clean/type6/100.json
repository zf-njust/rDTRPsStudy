{
  "code": "def _parseSSL(factory, port, privateKey=\"server.pem\", certKey=None,\n              sslmethod=None, interface='', backlog=50):\n    \"\"\"\n    Internal parser function for L{_parseServer} to convert the string\n    arguments for an SSL (over TCP/IPv4) stream endpoint into the structured\n    arguments.\n\n    @param factory: the protocol factory being parsed, or C{None}.  (This was a\n        leftover argument from when this code was in C{strports}, and is now\n        mostly None and unused.)\n    @type factory: L{IProtocolFactory} or C{NoneType}\n\n    @param port: the integer port number to bind\n    @type port: C{str}\n\n    @param interface: the interface IP to listen on\n    @param backlog: the length of the listen queue\n    @type backlog: C{str}\n\n    @param privateKey: The file name of a PEM format private key file.\n    @type privateKey: C{str}\n\n    @param certKey: The file name of a PEM format certificate file.\n    @type certKey: C{str}\n\n    @param sslmethod: The string name of an SSL method, based on the name of a\n        constant in C{OpenSSL.SSL}.  Must be one of: \"SSLv23_METHOD\",\n        \"SSLv2_METHOD\", \"SSLv3_METHOD\", \"TLSv1_METHOD\".\n    @type sslmethod: C{str}\n\n    @return: a 2-tuple of (args, kwargs), describing  the parameters to\n        L{IReactorSSL.listenSSL} (or, modulo argument 2, the factory, arguments\n        to L{SSL4ServerEndpoint}.\n    \"\"\"\n    from twisted.internet import ssl\n    if certKey is None:\n        certKey = privateKey\n    kw = {}\n    if sslmethod is not None:\n        kw['method'] = getattr(ssl.SSL, sslmethod)\n    else:\n        kw['method'] = ssl.SSL.SSLv23_METHOD\n    certPEM = FilePath(certKey).getContent()\n    keyPEM = FilePath(privateKey).getContent()\n    privateCertificate = ssl.PrivateCertificate.loadPEM(certPEM + keyPEM)\n    cf = ssl.CertificateOptions(\n        privateKey=privateCertificate.privateKey.original,\n        certificate=privateCertificate.original,\n        **kw\n    )\n    return ((int(port), factory, cf),\n            {'interface': interface, 'backlog': int(backlog)})",
  "smell": [
    {
      "smell_id": 6,
      "line_no": 40,
      "description": "The attribute is visited based on a dynamically determined name."
    }
  ]
}