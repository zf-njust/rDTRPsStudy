{
  "code": "def show_property(self, instance, value, key=None, index=-1, *l):\n        # normal call: (tree node, focus, )\n        # nested call: (widget, prop value, prop key, index in dict/list)\n        if value is False:\n            return\n\n        console = self.console\n        content = None\n        if key is None:\n            # normal call\n            nested = False\n            widget = instance.widget\n            key = instance.key\n            prop = widget.property(key)\n            value = getattr(widget, key)\n        else:\n            # nested call, we might edit subvalue\n            nested = True\n            widget = instance\n            prop = None\n\n        dtype = None\n\n        if isinstance(prop, AliasProperty) or nested:\n            # trying to resolve type dynamically\n            if type(value) in (str, str):\n                dtype = 'string'\n            elif type(value) in (int, float):\n                dtype = 'numeric'\n            elif type(value) in (tuple, list):\n                dtype = 'list'\n\n        if isinstance(prop, NumericProperty) or dtype == 'numeric':\n            content = TextInput(text=str(value) or '', multiline=False)\n            content.bind(\n                text=partial(self.save_property_numeric, widget, key, index))\n\n        elif isinstance(prop, StringProperty) or dtype == 'string':\n            content = TextInput(text=value or '', multiline=True)\n            content.bind(\n                text=partial(self.save_property_text, widget, key, index))\n\n        elif (isinstance(prop, ListProperty) or\n              isinstance(prop, ReferenceListProperty) or\n              isinstance(prop, VariableListProperty) or dtype == 'list'):\n            content = GridLayout(cols=1, size_hint_y=None)\n            content.bind(minimum_height=content.setter('height'))\n            for i, item in enumerate(value):\n                button = Button(text=repr(item), size_hint_y=None, height=44)\n                if isinstance(item, Widget):\n                    button.bind(on_release=partial(console.highlight_widget,\n                                                   item, False))\n                else:\n                    button.bind(on_release=partial(self.show_property, widget,\n                                                   item, key, i))\n                content.add_widget(button)\n\n        elif isinstance(prop, OptionProperty):\n            content = GridLayout(cols=1, size_hint_y=None)\n            content.bind(minimum_height=content.setter('height'))\n            for option in prop.options:\n                button = ToggleButton(\n                    text=option,\n                    state='down' if option == value else 'normal',\n                    group=repr(content.uid),\n                    size_hint_y=None,\n                    height=44)\n                button.bind(\n                    on_press=partial(self.save_property_option, widget, key))\n                content.add_widget(button)\n\n        elif isinstance(prop, ObjectProperty):\n            if isinstance(value, Widget):\n                content = Button(text=repr(value))\n                content.bind(\n                    on_release=partial(console.highlight_widget, value))\n            elif isinstance(value, Texture):\n                content = Image(texture=value)\n            else:\n                content = Label(text=repr(value))\n\n        elif isinstance(prop, BooleanProperty):\n            state = 'down' if value else 'normal'\n            content = ToggleButton(text=key, state=state)\n            content.bind(on_release=partial(self.save_property_boolean, widget,\n                                            key, index))\n\n        self.root.clear_widgets()\n        self.root.add_widget(self.sv)\n        if content:\n            self.root.add_widget(content)",
  "smell": [
    {
      "smell_id": 6,
      "line_no": 15,
      "description": "The attribute is visited based on a dynamically determined name."
    }
  ]
}