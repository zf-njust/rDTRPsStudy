{
  "code": "def _process_object_types(self, vobj, level=0):\n        ''' Serialize an object '''\n        rdata = {}\n\n        if vobj is None:\n            rdata = None\n        elif issubclass(type(vobj), str) or isinstance(vobj, str):\n            if vobj.isalnum():\n                rdata = vobj\n            else:\n                rdata = vobj.decode('ascii', 'ignore')\n        elif issubclass(type(vobj), bool) or isinstance(vobj, bool):\n            rdata = vobj\n        elif issubclass(type(vobj), int) or isinstance(vobj, int):\n            rdata = vobj\n        elif issubclass(type(vobj), float) or isinstance(vobj, float):\n            rdata = vobj\n        elif issubclass(type(vobj), long) or isinstance(vobj, long):\n            rdata = vobj\n        elif issubclass(type(vobj), list) or issubclass(type(vobj), tuple):\n            rdata = []\n            try:\n                vobj = sorted(vobj)\n            except Exception as e:\n                pass\n            for vi in vobj:\n                if (level+1 <= self.maxlevel):\n                    #vid = self.facts_from_vobj(vi, level=(level+1))\n                    vid = self._process_object_types(vi, level=(level+1))\n                    if vid:\n                        rdata.append(vid)\n        elif issubclass(type(vobj), dict):\n            pass\n        elif issubclass(type(vobj), object):\n            methods = dir(vobj)\n            methods = [str(x) for x in methods if not x.startswith('_')]\n            methods = [x for x in methods if not x in self.bad_types]\n            methods = sorted(methods)\n\n            for method in methods:\n                # Attempt to get the method, skip on fail\n                try:\n                    methodToCall = getattr(vobj, method)\n                except Exception as e:\n                    continue\n                if callable(methodToCall):\n                    continue\n                if self.lowerkeys:\n                    method = method.lower()\n                if (level+1 <= self.maxlevel):\n                    rdata[method] = self._process_object_types(methodToCall, level=(level+1))\n        else:\n            pass\n\n        if not rdata:\n            rdata = None\n        return rdata",
  "smell": [
    {
      "smell_id": 6,
      "line_no": 43,
      "description": "The attribute is visited based on a dynamically determined name."
    }
  ]
}