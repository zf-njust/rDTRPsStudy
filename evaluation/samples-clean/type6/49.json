{
  "code": "def _set_timelapse(self) -> dict[T.Literal[\"input_a\", \"input_b\", \"output\"], str]:\n        \"\"\" Set time-lapse paths if requested.\n\n        Returns\n        -------\n        dict\n            The time-lapse keyword arguments for passing to the trainer\n\n        \"\"\"\n        if (not self._args.timelapse_input_a and\n                not self._args.timelapse_input_b and\n                not self._args.timelapse_output):\n            return {}\n        if (not self._args.timelapse_input_a or\n                not self._args.timelapse_input_b or\n                not self._args.timelapse_output):\n            raise FaceswapError(\"To enable the timelapse, you have to supply all the parameters \"\n                                \"(--timelapse-input-A, --timelapse-input-B and \"\n                                \"--timelapse-output).\")\n\n        timelapse_output = get_folder(self._args.timelapse_output)\n\n        for side in (\"a\", \"b\"):\n            side = T.cast(T.Literal[\"a\", \"b\"], side)\n            folder = getattr(self._args, f\"timelapse_input_{side}\")\n            if folder is not None and not os.path.isdir(folder):\n                raise FaceswapError(f\"The Timelapse path '{folder}' does not exist\")\n\n            training_folder = getattr(self._args, f\"input_{side}\")\n            if folder == training_folder:\n                continue  # Time-lapse folder is training folder\n\n            filenames = [fname for fname in os.listdir(folder)\n                         if os.path.splitext(fname)[-1].lower() in _image_extensions]\n            if not filenames:\n                raise FaceswapError(f\"The Timelapse path '{folder}' does not contain any valid \"\n                                    \"images\")\n\n            # Time-lapse images must appear in the training set, as we need access to alignment and\n            # mask info. Check filenames are there to save failing much later in the process.\n            training_images = [os.path.basename(img) for img in self._images[side]]\n            if not all(img in training_images for img in filenames):\n                raise FaceswapError(f\"All images in the Timelapse folder '{folder}' must exist in \"\n                                    f\"the training folder '{training_folder}'\")\n\n        TKey = T.Literal[\"input_a\", \"input_b\", \"output\"]\n        kwargs = {T.cast(TKey, \"input_a\"): self._args.timelapse_input_a,\n                  T.cast(TKey, \"input_b\"): self._args.timelapse_input_b,\n                  T.cast(TKey, \"output\"): timelapse_output}\n        logger.debug(\"Timelapse enabled: %s\", kwargs)\n        return kwargs",
  "smell": [
    {
      "smell_id": 6,
      "line_no": 29,
      "description": "The attribute is visited based on a dynamically determined name."
    }
  ]
}