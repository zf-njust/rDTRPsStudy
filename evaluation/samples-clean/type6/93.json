{
  "code": "def testReducer(self, name, rng_factory, shape, dtype, out_dtype,\n                  axis, keepdims, inexact):\n    np_op = getattr(np, name)\n    jnp_op = getattr(jnp, name)\n    rng = rng_factory(self.rng())\n    @jtu.ignore_warning(category=np.ComplexWarning)\n    @jtu.ignore_warning(category=RuntimeWarning,\n                        message=\"mean of empty slice.*\")\n    @jtu.ignore_warning(category=RuntimeWarning,\n                        message=\"overflow encountered.*\")\n    def np_fun(x):\n      x = np.asarray(x)\n      if inexact:\n        x = x.astype(dtypes.to_inexact_dtype(x.dtype))\n      x_cast = x if dtype != jnp.bfloat16 else x.astype(np.float32)\n      t = out_dtype if out_dtype != jnp.bfloat16 else np.float32\n      if t is None:\n        t = _reducer_output_dtype(name, x_cast.dtype)\n      return np_op(x_cast, axis, dtype=t, keepdims=keepdims)\n\n    jnp_fun = lambda x: jnp_op(x, axis, dtype=out_dtype, keepdims=keepdims)\n    jnp_fun = jtu.ignore_warning(category=jnp.ComplexWarning)(jnp_fun)\n    args_maker = lambda: [rng(shape, dtype)]\n    tol_spec = {np.float16: 1e-2, np.int16: 2e-7, np.int32: 1E-3,\n                np.uint32: 3e-7, np.float32: 1e-3, np.complex64: 1e-3,\n                np.float64: 1e-5, np.complex128: 1e-5}\n    tol = jtu.tolerance(dtype, tol_spec)\n    tol = max(tol, jtu.tolerance(out_dtype, tol_spec)) if out_dtype else tol\n    self._CheckAgainstNumpy(np_fun, jnp_fun, args_maker,\n                            check_dtypes=jnp.bfloat16 not in (dtype, out_dtype),\n                            tol=tol)\n    self._CompileAndCheck(jnp_fun, args_maker, atol=tol,\n                          rtol=tol)",
  "smell": [
    {
      "smell_id": 6,
      "line_no": 4,
      "description": "The attribute is visited based on a dynamically determined name."
    }
  ]
}