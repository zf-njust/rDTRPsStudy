{
  "code": "def _add_sigfunc_info(func, argspecs, glyphclass, extra_docs):\n    func.__name__ = glyphclass.__name__\n\n    omissions = {'js_event_callbacks', 'js_property_callbacks', 'subscribed_events'}\n\n    kwlines = []\n    kws = glyphclass.properties() - set(argspecs)\n    for kw in kws:\n        # these are not really useful, and should also really be private, just skip them\n        if kw in omissions: continue\n\n        descriptor = getattr(glyphclass, kw)\n        typ = descriptor.property._sphinx_type()\n        if descriptor.__doc__:\n            desc = \"\\n        \".join(textwrap.dedent(descriptor.__doc__).split(\"\\n\"))\n        else:\n            desc = \"\"\n        kwlines.append(_arg_template % (kw, typ, desc, descriptor.class_default(glyphclass)))\n    extra_kws = getattr(glyphclass, '_extra_kws', {})\n    for kw, (typ, desc) in extra_kws.items():\n        kwlines.append(\"    %s (%s) : %s\" % (kw, typ, desc))\n    kwlines.sort()\n\n    arglines = []\n    for arg, spec in argspecs.items():\n        arglines.append(_arg_template % (arg, spec['type'], spec['desc'], spec['default']))\n\n    mod = \"markers\" if issubclass(glyphclass, Marker) else \"glyphs\"\n    func.__doc__ = _doc_template % (mod, func.__name__, \"\\n\".join(arglines), \"\\n\".join(kwlines))\n    if extra_docs:\n        func.__doc__ += extra_docs",
  "smell": [
    {
      "smell_id": 6,
      "line_no": 12,
      "description": "The attribute is visited based on a dynamically determined name."
    }
  ]
}