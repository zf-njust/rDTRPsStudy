{
  "code": "def test_aggregate_normal(self):\n        # check TimeGrouper's aggregation is identical as normal groupby\n\n        n = 20\n        data = np.random.randn(n, 4)\n        normal_df = DataFrame(data, columns=['A', 'B', 'C', 'D'])\n        normal_df['key'] = [1, 2, 3, 4, 5] * 4\n\n        dt_df = DataFrame(data, columns=['A', 'B', 'C', 'D'])\n        dt_df['key'] = [datetime(2013, 1, 1), datetime(2013, 1, 2), datetime(2013, 1, 3),\n                        datetime(2013, 1, 4), datetime(2013, 1, 5)] * 4\n\n        normal_grouped = normal_df.groupby('key')\n        dt_grouped = dt_df.groupby(TimeGrouper(key='key', freq='D'))\n\n        for func in ['min', 'max', 'prod', 'var', 'std', 'mean']:\n            expected = getattr(normal_grouped, func)()\n            dt_result = getattr(dt_grouped, func)()\n            expected.index = date_range(start='2013-01-01', freq='D', periods=5, name='key')\n            assert_frame_equal(expected, dt_result)\n\n        for func in ['count', 'sum']:\n            expected = getattr(normal_grouped, func)()\n            expected.index = date_range(start='2013-01-01', freq='D', periods=5, name='key')\n            dt_result = getattr(dt_grouped, func)()\n            assert_frame_equal(expected, dt_result)\n\n        # GH 7453\n        for func in ['size']:\n            expected = getattr(normal_grouped, func)()\n            expected.index = date_range(start='2013-01-01', freq='D', periods=5, name='key')\n            dt_result = getattr(dt_grouped, func)()\n            assert_series_equal(expected, dt_result)\n\n        \"\"\"\n        for func in ['first', 'last']:\n            expected = getattr(normal_grouped, func)()\n            expected.index = date_range(start='2013-01-01', freq='D', periods=5, name='key')\n            dt_result = getattr(dt_grouped, func)()\n            assert_frame_equal(expected, dt_result)\n\n        for func in ['nth']:\n            expected = getattr(normal_grouped, func)(3)\n            expected.index = date_range(start='2013-01-01', freq='D', periods=5, name='key')\n            dt_result = getattr(dt_grouped, func)(3)\n            assert_frame_equal(expected, dt_result)\n        \"\"\"",
  "smell": [
    {
      "smell_id": 6,
      "line_no": 17,
      "description": "The attribute is visited based on a dynamically determined name."
    }
  ]
}