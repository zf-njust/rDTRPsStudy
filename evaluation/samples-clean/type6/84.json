{
  "code": "def write_array(self, key, value, items=None):\n        if key in self.group:\n            self._handle.remove_node(self.group, key)\n\n        # Transform needed to interface with pytables row/col notation\n        empty_array = self._is_empty_array(value.shape)\n        transposed = False\n\n        if com.is_categorical_dtype(value):\n            raise NotImplementedError(\"cannot store a category dtype\")\n\n        if not empty_array:\n            value = value.T\n            transposed = True\n\n        if self._filters is not None:\n            atom = None\n            try:\n                # get the atom for this datatype\n                atom = _tables().Atom.from_dtype(value.dtype)\n            except ValueError:\n                pass\n\n            if atom is not None:\n                # create an empty chunked array and fill it from value\n                if not empty_array:\n                    ca = self._handle.create_carray(self.group, key, atom,\n                                                   value.shape,\n                                                   filters=self._filters)\n                    ca[:] = value\n                    getattr(self.group, key)._v_attrs.transposed = transposed\n\n                else:\n                    self.write_array_empty(key, value)\n\n                return\n\n        if value.dtype.type == np.object_:\n\n            # infer the type, warn if we have a non-string type here (for\n            # performance)\n            inferred_type = lib.infer_dtype(value.ravel())\n            if empty_array:\n                pass\n            elif inferred_type == 'string':\n                pass\n            else:\n                try:\n                    items = list(items)\n                except:\n                    pass\n                ws = performance_doc % (inferred_type, key, items)\n                warnings.warn(ws, PerformanceWarning, stacklevel=7)\n\n            vlarr = self._handle.create_vlarray(self.group, key,\n                                               _tables().ObjectAtom())\n            vlarr.append(value)\n        else:\n            if empty_array:\n                self.write_array_empty(key, value)\n            else:\n                if value.dtype.type == np.datetime64:\n                    self._handle.create_array(self.group, key, value.view('i8'))\n                    getattr(\n                        self.group, key)._v_attrs.value_type = 'datetime64'\n                elif value.dtype.type == np.timedelta64:\n                    self._handle.create_array(self.group, key, value.view('i8'))\n                    getattr(\n                        self.group, key)._v_attrs.value_type = 'timedelta64'\n                else:\n                    self._handle.create_array(self.group, key, value)\n\n        getattr(self.group, key)._v_attrs.transposed = transposed",
  "smell": [
    {
      "smell_id": 6,
      "line_no": 31,
      "description": "The attribute is visited based on a dynamically determined name."
    }
  ]
}