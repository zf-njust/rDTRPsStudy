{
  "code": "def blueprint(\n        self,\n        blueprint: Union[Blueprint, Iterable[Blueprint], BlueprintGroup],\n        **options: Any,\n    ):\n        \"\"\"Register a blueprint on the application.\n\n        :param blueprint: Blueprint object or (list, tuple) thereof\n        :param options: option dictionary with blueprint defaults\n        :return: Nothing\n        \"\"\"\n        if isinstance(blueprint, (Iterable, BlueprintGroup)):\n            for item in blueprint:\n                params = {**options}\n                if isinstance(blueprint, BlueprintGroup):\n                    merge_from = [\n                        options.get(\"url_prefix\", \"\"),\n                        blueprint.url_prefix or \"\",\n                    ]\n                    if not isinstance(item, BlueprintGroup):\n                        merge_from.append(item.url_prefix or \"\")\n                    merged_prefix = \"/\".join(\n                        u.strip(\"/\") for u in merge_from if u\n                    ).rstrip(\"/\")\n                    params[\"url_prefix\"] = f\"/{merged_prefix}\"\n\n                    for _attr in [\"version\", \"strict_slashes\"]:\n                        if getattr(item, _attr) is None:\n                            params[_attr] = getattr(\n                                blueprint, _attr\n                            ) or options.get(_attr)\n                    if item.version_prefix == \"/v\":\n                        if blueprint.version_prefix == \"/v\":\n                            params[\"version_prefix\"] = options.get(\n                                \"version_prefix\"\n                            )\n                        else:\n                            params[\"version_prefix\"] = blueprint.version_prefix\n                    name_prefix = getattr(blueprint, \"name_prefix\", None)\n                    if name_prefix and \"name_prefix\" not in params:\n                        params[\"name_prefix\"] = name_prefix\n                self.blueprint(item, **params)\n            return\n        if blueprint.name in self.blueprints:\n            assert self.blueprints[blueprint.name] is blueprint, (\n                'A blueprint with the name \"%s\" is already registered.  '\n                \"Blueprint names must be unique.\" % (blueprint.name,)\n            )\n        else:\n            self.blueprints[blueprint.name] = blueprint\n            self._blueprint_order.append(blueprint)\n\n        if (\n            self.strict_slashes is not None\n            and blueprint.strict_slashes is None\n        ):\n            blueprint.strict_slashes = self.strict_slashes\n        blueprint.register(self, options)",
  "smell": [
    {
      "smell_id": 6,
      "line_no": 28,
      "description": "The attribute is visited based on a dynamically determined name."
    }
  ]
}