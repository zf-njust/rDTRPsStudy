{
  "code": "def _get_images(self) -> dict[T.Literal[\"a\", \"b\"], list[str]]:\n        \"\"\" Check the image folders exist and contains valid extracted faces. Obtain image paths.\n\n        Returns\n        -------\n        dict\n            The image paths for each side. The key is the side, the value is the list of paths\n            for that side.\n        \"\"\"\n        logger.debug(\"Getting image paths\")\n        images = {}\n        for side in (\"a\", \"b\"):\n            side = T.cast(T.Literal[\"a\", \"b\"], side)\n            image_dir = getattr(self._args, f\"input_{side}\")\n            if not os.path.isdir(image_dir):\n                logger.error(\"Error: '%s' does not exist\", image_dir)\n                sys.exit(1)\n\n            images[side] = get_image_paths(image_dir, \".png\")\n            if not images[side]:\n                logger.error(\"Error: '%s' contains no images\", image_dir)\n                sys.exit(1)\n            # Validate the first image is a detected face\n            test_image = next(img for img in images[side])\n            meta = read_image_meta(test_image)\n            logger.debug(\"Test file: (filename: %s, metadata: %s)\", test_image, meta)\n            if \"itxt\" not in meta or \"alignments\" not in meta[\"itxt\"]:\n                logger.error(\"The input folder '%s' contains images that are not extracted faces.\",\n                             image_dir)\n                logger.error(\"You can only train a model on faces generated from Faceswap's \"\n                             \"extract process. Please check your sources and try again.\")\n                sys.exit(1)\n\n            logger.info(\"Model %s Directory: '%s' (%s images)\",\n                        side.upper(), image_dir, len(images[side]))\n        logger.debug(\"Got image paths: %s\", [(key, str(len(val)) + \" images\")\n                                             for key, val in images.items()])\n        self._validate_image_counts(images)\n        return images",
  "smell": [
    {
      "smell_id": 6,
      "line_no": 14,
      "description": "The attribute is visited based on a dynamically determined name."
    }
  ]
}