{
  "code": "def main():\n    # The -W command-line option does not work in a virtualenv with\n    # python 3 (as of virtualenv 1.7), so configure warnings\n    # programmatically instead.\n    import warnings\n    # Be strict about most warnings.  This also turns on warnings that are\n    # ignored by default, including DeprecationWarnings and\n    # python 3.2's ResourceWarnings.\n    warnings.filterwarnings(\"error\")\n    # setuptools sometimes gives ImportWarnings about things that are on\n    # sys.path even if they're not being used.\n    warnings.filterwarnings(\"ignore\", category=ImportWarning)\n    # Tornado generally shouldn't use anything deprecated, but some of\n    # our dependencies do (last match wins).\n    warnings.filterwarnings(\"ignore\", category=DeprecationWarning)\n    warnings.filterwarnings(\"error\", category=DeprecationWarning,\n                            module=r\"tornado\\..*\")\n    warnings.filterwarnings(\"ignore\", category=PendingDeprecationWarning)\n    warnings.filterwarnings(\"error\", category=PendingDeprecationWarning,\n                            module=r\"tornado\\..*\")\n    # The unittest module is aggressive about deprecating redundant methods,\n    # leaving some without non-deprecated spellings that work on both\n    # 2.7 and 3.2\n    warnings.filterwarnings(\"ignore\", category=DeprecationWarning,\n                            message=\"Please use assert.* instead\")\n    # unittest2 0.6 on py26 reports these as PendingDeprecationWarnings\n    # instead of DeprecationWarnings.\n    warnings.filterwarnings(\"ignore\", category=PendingDeprecationWarning,\n                            message=\"Please use assert.* instead\")\n    # Twisted 15.0.0 triggers some warnings on py3 with -bb.\n    warnings.filterwarnings(\"ignore\", category=BytesWarning,\n                            module=r\"twisted\\..*\")\n\n    logging.getLogger(\"tornado.access\").setLevel(logging.CRITICAL)\n\n    define('httpclient', type=str, default=None,\n           callback=lambda s: AsyncHTTPClient.configure(\n               s, defaults=dict(allow_ipv6=False)))\n    define('httpserver', type=str, default=None,\n           callback=HTTPServer.configure)\n    define('ioloop', type=str, default=None)\n    define('ioloop_time_monotonic', default=False)\n    define('resolver', type=str, default=None,\n           callback=Resolver.configure)\n    define('debug_gc', type=str, multiple=True,\n           help=\"A comma-separated list of gc module debug constants, \"\n           \"e.g. DEBUG_STATS or DEBUG_COLLECTABLE,DEBUG_OBJECTS\",\n           callback=lambda values: gc.set_debug(\n               reduce(operator.or_, (getattr(gc, v) for v in values))))\n    define('locale', type=str, default=None,\n           callback=lambda x: locale.setlocale(locale.LC_ALL, x))\n\n    def configure_ioloop():\n        kwargs = {}\n        if options.ioloop_time_monotonic:\n            from tornado.platform.auto import monotonic_time\n            if monotonic_time is None:\n                raise RuntimeError(\"monotonic clock not found\")\n            kwargs['time_func'] = monotonic_time\n        if options.ioloop or kwargs:\n            IOLoop.configure(options.ioloop, **kwargs)\n    add_parse_callback(configure_ioloop)\n\n    log_counter = LogCounter()\n    add_parse_callback(\n        lambda: logging.getLogger().handlers[0].addFilter(log_counter))\n\n    import tornado.testing\n    kwargs = {}\n    if sys.version_info >= (3, 2):\n        # HACK:  unittest.main will make its own changes to the warning\n        # configuration, which may conflict with the settings above\n        # or command-line flags like -bb.  Passing warnings=False\n        # suppresses this behavior, although this looks like an implementation\n        # detail.  http://bugs.python.org/issue15626\n        kwargs['warnings'] = False\n    kwargs['testRunner'] = TornadoTextTestRunner\n    try:\n        tornado.testing.main(**kwargs)\n    finally:\n        # The tests should run clean; consider it a failure if they logged\n        # any warnings or errors. We'd like to ban info logs too, but\n        # we can't count them cleanly due to interactions with LogTrapTestCase.\n        if log_counter.warning_count > 0 or log_counter.error_count > 0:\n            logging.error(\"logged %d warnings and %d errors\",\n                          log_counter.warning_count, log_counter.error_count)\n            sys.exit(1)",
  "smell": [
    {
      "smell_id": 6,
      "line_no": 49,
      "description": "The attribute is visited based on a dynamically determined name."
    }
  ]
}