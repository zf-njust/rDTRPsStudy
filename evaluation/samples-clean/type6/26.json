{
  "code": "def test_tz_convert_and_localize(self):\n        l0 = date_range('20140701', periods=5, freq='D')\n\n        # TODO: l1 should be a PeriodIndex for testing\n        #       after GH2106 is addressed\n        with tm.assertRaises(NotImplementedError):\n            period_range('20140701', periods=1).tz_convert('UTC')\n        with tm.assertRaises(NotImplementedError):\n            period_range('20140701', periods=1).tz_localize('UTC')\n        # l1 = period_range('20140701', periods=5, freq='D')\n        l1 = date_range('20140701', periods=5, freq='D')\n\n        int_idx = Index(range(5))\n\n        for fn in ['tz_localize', 'tz_convert']:\n\n            if fn == 'tz_convert':\n                l0 = l0.tz_localize('UTC')\n                l1 = l1.tz_localize('UTC')\n\n            for idx in [l0, l1]:\n\n                l0_expected  = getattr(idx, fn)('US/Pacific')\n                l1_expected  = getattr(idx, fn)('US/Pacific')\n\n                df1 = DataFrame(np.ones(5), index=l0)\n                df1 = getattr(df1, fn)('US/Pacific')\n                self.assertTrue(df1.index.equals(l0_expected))\n\n                # MultiIndex\n                # GH7846\n                df2 = DataFrame(np.ones(5),\n                                MultiIndex.from_arrays([l0, l1]))\n\n                df3 = getattr(df2, fn)('US/Pacific', level=0)\n                self.assertFalse(df3.index.levels[0].equals(l0))\n                self.assertTrue(df3.index.levels[0].equals(l0_expected))\n                self.assertTrue(df3.index.levels[1].equals(l1))\n                self.assertFalse(df3.index.levels[1].equals(l1_expected))\n\n                df3 = getattr(df2, fn)('US/Pacific', level=1)\n                self.assertTrue(df3.index.levels[0].equals(l0))\n                self.assertFalse(df3.index.levels[0].equals(l0_expected))\n                self.assertTrue(df3.index.levels[1].equals(l1_expected))\n                self.assertFalse(df3.index.levels[1].equals(l1))\n\n                df4 = DataFrame(np.ones(5),\n                                MultiIndex.from_arrays([int_idx, l0]))\n\n                df5 = getattr(df4, fn)('US/Pacific', level=1)\n                self.assertTrue(df3.index.levels[0].equals(l0))\n                self.assertFalse(df3.index.levels[0].equals(l0_expected))\n                self.assertTrue(df3.index.levels[1].equals(l1_expected))\n                self.assertFalse(df3.index.levels[1].equals(l1))\n\n        # Bad Inputs\n        for fn in ['tz_localize', 'tz_convert']:\n            # Not DatetimeIndex / PeriodIndex\n            with tm.assertRaisesRegexp(TypeError, 'DatetimeIndex'):\n                df = DataFrame(index=int_idx)\n                df = getattr(df, fn)('US/Pacific')\n\n            # Not DatetimeIndex / PeriodIndex\n            with tm.assertRaisesRegexp(TypeError, 'DatetimeIndex'):\n                df = DataFrame(np.ones(5),\n                            MultiIndex.from_arrays([int_idx, l0]))\n                df = getattr(df, fn)('US/Pacific', level=0)\n\n            # Invalid level\n            with tm.assertRaisesRegexp(ValueError, 'not valid'):\n                df = DataFrame(index=l0)\n                df = getattr(df, fn)('US/Pacific', level=1)",
  "smell": [
    {
      "smell_id": 6,
      "line_no": 50,
      "description": "The attribute is visited based on a dynamically determined name."
    }
  ]
}