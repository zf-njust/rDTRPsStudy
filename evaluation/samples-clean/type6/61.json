{
  "code": "def represent_sequence(self, tag, sequence, flow_style=None):\n        # type: (Any, Any, Any) -> Any\n        value = []  # type: List[Any]\n        # if the flow_style is None, the flow style tacked on to the object\n        # explicitly will be taken. If that is None as well the default flow\n        # style rules\n        try:\n            flow_style = sequence.fa.flow_style(flow_style)\n        except AttributeError:\n            flow_style = flow_style\n        try:\n            anchor = sequence.yaml_anchor()\n        except AttributeError:\n            anchor = None\n        node = SequenceNode(tag, value, flow_style=flow_style, anchor=anchor)\n        if self.alias_key is not None:\n            self.represented_objects[self.alias_key] = node\n        best_style = True\n        try:\n            comment = getattr(sequence, comment_attrib)\n            node.comment = comment.comment\n            # reset any comment already printed information\n            if node.comment and node.comment[1]:\n                for ct in node.comment[1]:\n                    ct.reset()\n            item_comments = comment.items\n            for v in item_comments.values():\n                if v and v[1]:\n                    for ct in v[1]:\n                        ct.reset()\n            item_comments = comment.items\n            if node.comment is None:\n                node.comment = comment.comment\n            else:\n                # as we are potentially going to extend this, make a new list\n                node.comment = comment.comment[:]\n            try:\n                node.comment.append(comment.end)\n            except AttributeError:\n                pass\n        except AttributeError:\n            item_comments = {}\n        for idx, item in enumerate(sequence):\n            node_item = self.represent_data(item)\n            self.merge_comments(node_item, item_comments.get(idx))\n            if not (isinstance(node_item, ScalarNode) and not node_item.style):\n                best_style = False\n            value.append(node_item)\n        if flow_style is None:\n            if len(sequence) != 0 and self.default_flow_style is not None:\n                node.flow_style = self.default_flow_style\n            else:\n                node.flow_style = best_style\n        return node",
  "smell": [
    {
      "smell_id": 6,
      "line_no": 20,
      "description": "The attribute is visited based on a dynamically determined name."
    }
  ]
}