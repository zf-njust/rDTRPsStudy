{
  "code": "def _worker(index, env_fn, pipe, parent_pipe, shared_memory, error_queue):\n    assert shared_memory is None\n    env = env_fn()\n    parent_pipe.close()\n    try:\n        while True:\n            command, data = pipe.recv()\n            if command == \"reset\":\n                observation, info = env.reset(**data)\n                pipe.send(((observation, info), True))\n\n            elif command == \"step\":\n                (\n                    observation,\n                    reward,\n                    terminated,\n                    truncated,\n                    info,\n                ) = env.step(data)\n                if terminated or truncated:\n                    old_observation, old_info = observation, info\n                    observation, info = env.reset()\n                    info[\"final_observation\"] = old_observation\n                    info[\"final_info\"] = old_info\n                pipe.send(((observation, reward, terminated, truncated, info), True))\n            elif command == \"seed\":\n                env.seed(data)\n                pipe.send((None, True))\n            elif command == \"close\":\n                pipe.send((None, True))\n                break\n            elif command == \"_call\":\n                name, args, kwargs = data\n                if name in [\"reset\", \"step\", \"seed\", \"close\"]:\n                    raise ValueError(\n                        f\"Trying to call function `{name}` with \"\n                        f\"`_call`. Use `{name}` directly instead.\"\n                    )\n                function = getattr(env, name)\n                if callable(function):\n                    pipe.send((function(*args, **kwargs), True))\n                else:\n                    pipe.send((function, True))\n            elif command == \"_setattr\":\n                name, value = data\n                setattr(env, name, value)\n                pipe.send((None, True))\n            elif command == \"_check_spaces\":\n                pipe.send(\n                    (\n                        (data[0] == env.observation_space, data[1] == env.action_space),\n                        True,\n                    )\n                )\n            else:\n                raise RuntimeError(\n                    f\"Received unknown command `{command}`. Must \"\n                    \"be one of {`reset`, `step`, `seed`, `close`, `_call`, \"\n                    \"`_setattr`, `_check_spaces`}.\"\n                )\n    except (KeyboardInterrupt, Exception):\n        error_queue.put((index,) + sys.exc_info()[:2])\n        pipe.send((None, False))\n    finally:\n        env.close()",
  "smell": [
    {
      "smell_id": 6,
      "line_no": 39,
      "description": "The attribute is visited based on a dynamically determined name."
    }
  ]
}