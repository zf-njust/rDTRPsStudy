{
  "code": "def test_metadata_propagation(self):\n        # check that the metadata matches up on the resulting ops\n\n        o = self._construct(shape=3)\n        o.name = 'foo'\n        o2 = self._construct(shape=3)\n        o2.name = 'bar'\n\n        # TODO\n        # Once panel can do non-trivial combine operations\n        # (currently there is an a raise in the Panel arith_ops to prevent\n        # this, though it actually does work)\n        # can remove all of these try: except: blocks on the actual operations\n\n\n        # ----------\n        # preserving\n        # ----------\n\n        # simple ops with scalars\n        for op in [ '__add__','__sub__','__truediv__','__mul__' ]:\n            result = getattr(o,op)(1)\n            self.check_metadata(o,result)\n\n        # ops with like\n        for op in [ '__add__','__sub__','__truediv__','__mul__' ]:\n            try:\n                result = getattr(o,op)(o)\n                self.check_metadata(o,result)\n            except (ValueError, AttributeError):\n                pass\n\n        # simple boolean\n        for op in [ '__eq__','__le__', '__ge__' ]:\n            v1 = getattr(o,op)(o)\n            self.check_metadata(o,v1)\n\n            try:\n                self.check_metadata(o, v1 & v1)\n            except (ValueError):\n                pass\n\n            try:\n                self.check_metadata(o, v1 | v1)\n            except (ValueError):\n                pass\n\n        # combine_first\n        try:\n            result = o.combine_first(o2)\n            self.check_metadata(o,result)\n        except (AttributeError):\n            pass\n\n        # ---------------------------\n        # non-preserving (by default)\n        # ---------------------------\n\n        # add non-like\n        try:\n            result = o + o2\n            self.check_metadata(result)\n        except (ValueError, AttributeError):\n            pass\n\n        # simple boolean\n        for op in [ '__eq__','__le__', '__ge__' ]:\n\n            # this is a name matching op\n            v1 = getattr(o,op)(o)\n\n            v2 = getattr(o,op)(o2)\n            self.check_metadata(v2)\n\n            try:\n                self.check_metadata(v1 & v2)\n            except (ValueError):\n                pass\n\n            try:\n                self.check_metadata(v1 | v2)\n            except (ValueError):\n                pass",
  "smell": [
    {
      "smell_id": 6,
      "line_no": 22,
      "description": "The attribute is visited based on a dynamically determined name."
    }
  ]
}