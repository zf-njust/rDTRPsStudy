{
  "code": "def get_routes(self, viewset):\n        \"\"\"\n        Augment `self.routes` with any dynamically generated routes.\n\n        Returns a list of the Route namedtuple.\n        \"\"\"\n\n        known_actions = flatten([route.mapping.values() for route in self.routes if isinstance(route, Route)])\n\n        # Determine any `@detail_route` or `@list_route` decorated methods on the viewset\n        detail_routes = []\n        list_routes = []\n        for methodname in dir(viewset):\n            attr = getattr(viewset, methodname)\n            httpmethods = getattr(attr, 'bind_to_methods', None)\n            detail = getattr(attr, 'detail', True)\n            if httpmethods:\n                if methodname in known_actions:\n                    raise ImproperlyConfigured('Cannot use @detail_route or @list_route '\n                                               'decorators on method \"%s\" '\n                                               'as it is an existing route' % methodname)\n                httpmethods = [method.lower() for method in httpmethods]\n                if detail:\n                    detail_routes.append((httpmethods, methodname))\n                else:\n                    list_routes.append((httpmethods, methodname))\n\n        def _get_dynamic_routes(route, dynamic_routes):\n            ret = []\n            for httpmethods, methodname in dynamic_routes:\n                method_kwargs = getattr(viewset, methodname).kwargs\n                initkwargs = route.initkwargs.copy()\n                initkwargs.update(method_kwargs)\n                url_path = initkwargs.pop(\"url_path\", None) or methodname\n                ret.append(Route(\n                    url=replace_methodname(route.url, url_path),\n                    mapping={httpmethod: methodname for httpmethod in httpmethods},\n                    name=replace_methodname(route.name, url_path),\n                    initkwargs=initkwargs,\n                ))\n\n            return ret\n\n        ret = []\n        for route in self.routes:\n            if isinstance(route, DynamicDetailRoute):\n                # Dynamic detail routes (@detail_route decorator)\n                ret += _get_dynamic_routes(route, detail_routes)\n            elif isinstance(route, DynamicListRoute):\n                # Dynamic list routes (@list_route decorator)\n                ret += _get_dynamic_routes(route, list_routes)\n            else:\n                # Standard route\n                ret.append(route)\n\n        return ret",
  "smell": [
    {
      "smell_id": 6,
      "line_no": 14,
      "description": "The attribute is visited based on a dynamically determined name."
    }
  ]
}