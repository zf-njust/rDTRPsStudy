{
  "code": "def testReducerNoDtype(self, name, rng_factory, shape, dtype, axis,\n                         keepdims, inexact, tolerance):\n    np_op = getattr(np, name)\n    jnp_op = getattr(jnp, name)\n    rng = rng_factory(self.rng())\n    is_bf16_nan_test = (dtype == jnp.bfloat16 and\n                        rng_factory.__name__ == 'rand_some_nan')\n    @jtu.ignore_warning(category=RuntimeWarning,\n                        message=\"Degrees of freedom <= 0 for slice.*\")\n    @jtu.ignore_warning(category=RuntimeWarning,\n                        message=\"All-NaN (slice|axis) encountered.*\")\n    def np_fun(x):\n      x = np.asarray(x)\n      if inexact:\n        x = x.astype(dtypes.to_inexact_dtype(x.dtype))\n      x_cast = x if not is_bf16_nan_test else x.astype(np.float32)\n      res = np_op(x_cast, axis, keepdims=keepdims)\n      res = res if not is_bf16_nan_test else res.astype(jnp.bfloat16)\n      return res\n\n    jnp_fun = lambda x: jnp_op(x, axis, keepdims=keepdims)\n    args_maker = lambda: [rng(shape, dtype)]\n    tol = jtu.join_tolerance({np.float16: 0.002},\n                             tolerance or jtu.default_tolerance())\n    self._CheckAgainstNumpy(np_fun, jnp_fun, args_maker, tol=tol)\n    self._CompileAndCheck(jnp_fun, args_maker, rtol=tol, atol=tol)",
  "smell": [
    {
      "smell_id": 6,
      "line_no": 3,
      "description": "The attribute is visited based on a dynamically determined name."
    }
  ]
}