{
  "code": "def skipgrams(sequence, vocabulary_size, \n    window_size=4, negative_samples=1., shuffle=True, \n    categorical=False, sampling_table=None):\n    ''' \n        Take a sequence (list of indexes of words), \n        returns couples of [word_index, other_word index] and labels (1s or 0s),\n        where label = 1 if 'other_word' belongs to the context of 'word',\n        and label=0 if 'other_word' is ramdomly sampled\n\n        @param vocabulary_size: int. maximum possible word index + 1\n        @param window_size: int. actually half-window. The window of a word wi will be [i-window_size, i+window_size+1]\n        @param negative_samples: float >= 0. 0 for no negative (=random) samples. 1 for same number as positive samples. etc.\n        @param categorical: bool. if False, labels will be integers (eg. [0, 1, 1 .. ]), \n            if True labels will be categorical eg. [[1,0],[0,1],[0,1] .. ]\n\n        Note: by convention, index 0 in the vocabulary is a non-word and will be skipped.\n    '''\n    couples = []\n    labels = []\n    for i, wi in enumerate(sequence):\n        if not wi:\n            continue\n        if sampling_table is not None:\n            if sampling_table[wi] < random.random():\n                continue\n\n        window_start = max(0, i-window_size)\n        window_end = min(len(sequence), i+window_size+1)\n        for j in range(window_start, window_end):\n            if j != i:\n                wj = sequence[j]\n                if not wj:\n                    continue\n                couples.append([wi, wj])\n                if categorical:\n                    labels.append([0,1])\n                else:\n                    labels.append(1)\n\n    if negative_samples > 0:\n        nb_negative_samples = int(len(labels) * negative_samples)\n        words = [c[0] for c in couples]\n        random.shuffle(words)\n\n        couples += [[words[i%len(words)], random.randint(1, vocabulary_size-1)] for i in range(nb_negative_samples)]\n        if categorical:\n            labels += [[1,0]]*nb_negative_samples\n        else:\n            labels += [0]*nb_negative_samples\n\n    if shuffle:\n        seed = random.randint(0,10e6)\n        random.seed(seed)\n        random.shuffle(couples)\n        random.seed(seed)\n        random.shuffle(labels)\n\n    return couples, labels\n    def append(self, *args, **kwargs): # real signature unknown\n        \"\"\" Append object to the end of the list. \"\"\"\n        pass",
  "smell": [
    {
      "smell_id": 2,
      "line_no": 38,
      "description": "The values of an argument hold inconsistent types in different function calls."
    }
  ]
}