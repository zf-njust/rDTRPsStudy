{
  "code": "def do_POST(self):\n        try:\n            refer = self.headers.getheader('Referer')\n            netloc = urlparse.urlparse(refer).netloc\n            if not netloc.startswith(\"127.0.0.1\") and not netloc.startswitch(\"localhost\"):\n                logging.warn(\"web control ref:%s refuse\", netloc)\n                return\n        except:\n            pass\n        logging.debug ('PHP web_control %s %s %s ', self.address_string(), self.command, self.path)\n        try:\n            ctype, pdict = cgi.parse_header(self.headers.getheader('content-type'))\n            if ctype == 'multipart/form-data':\n                self.postvars = cgi.parse_multipart(self.rfile, pdict)\n            elif ctype == 'application/x-www-form-urlencoded':\n                length = int(self.headers.getheader('content-length'))\n                self.postvars = urlparse.parse_qs(self.rfile.read(length), keep_blank_values=1)\n            else:\n                self.postvars = {}\n        except:\n            self.postvars = {}\n\n        path = urlparse.urlparse(self.path).path\n        if path == \"/config\":\n            return self.req_config_handler()\n        else:\n            self.wfile.write(b'HTTP/1.1 404\\r\\nContent-Type: text/plain\\r\\nConnection: close\\r\\n\\r\\n404 Not Found')\n            logging.info('%s \"%s %s HTTP/1.1\" 404 -', self.address_string(), self.command, self.path)\ndef parse_multipart(fp, pdict, encoding=\"utf-8\", errors=\"replace\"):\n    \"\"\"Parse multipart input.\n\n    Arguments:\n    fp   : input file\n    pdict: dictionary containing other parameters of content-type header\n    encoding, errors: request encoding and error handler, passed to\n        FieldStorage\n\n    Returns a dictionary just like parse_qs(): keys are the field names, each\n    value is a list of values for that field. For non-file fields, the value\n    is a list of strings.\n    \"\"\"\n    # RFC 2026, Section 5.1 : The \"multipart\" boundary delimiters are always\n    # represented as 7bit US-ASCII.\n    boundary = pdict['boundary'].decode('ascii')\n    ctype = \"multipart/form-data; boundary={}\".format(boundary)\n    headers = Message()\n    headers.set_type(ctype)\n    headers['Content-Length'] = pdict['CONTENT-LENGTH']\n    fs = FieldStorage(fp, headers=headers, encoding=encoding, errors=errors,\n        environ={'REQUEST_METHOD': 'POST'})\n    return {k: fs.getlist(k) for k in fs}",
  "smell": [
    {
      "smell_id": 2,
      "line_no": 14,
      "description": "The values of an argument hold inconsistent types in different function calls."
    }
  ]
}