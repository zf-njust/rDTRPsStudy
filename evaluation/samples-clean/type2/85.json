{
  "code": "def calc_info(self):\n        lib_dirs = self.get_lib_dirs()\n        info = {}\n        atlas_libs = self.get_libs('atlas_libs',\n                                   self._lib_names + self._lib_atlas)\n        lapack_libs = self.get_libs('lapack_libs', self._lib_lapack)\n        atlas = None\n        lapack = None\n        atlas_1 = None\n        for d in lib_dirs:\n            atlas = self.check_libs2(d, atlas_libs, [])\n            lapack_atlas = self.check_libs2(d, ['lapack_atlas'], [])\n            if atlas is not None:\n                lib_dirs2 = [d] + self.combine_paths(d, ['atlas*', 'ATLAS*'])\n                lapack = self.check_libs2(lib_dirs2, lapack_libs, [])\n                if lapack is not None:\n                    break\n            if atlas:\n                atlas_1 = atlas\n        log.info(self.__class__)\n        if atlas is None:\n            atlas = atlas_1\n        if atlas is None:\n            return\n        include_dirs = self.get_include_dirs()\n        h = (self.combine_paths(lib_dirs + include_dirs, 'cblas.h') or [None])\n        h = h[0]\n        if h:\n            h = os.path.dirname(h)\n            dict_append(info, include_dirs=[h])\n        info['language'] = 'c'\n        if lapack is not None:\n            dict_append(info, **lapack)\n            dict_append(info, **atlas)\n        elif 'lapack_atlas' in atlas['libraries']:\n            dict_append(info, **atlas)\n            dict_append(info,\n                        define_macros=[('ATLAS_WITH_LAPACK_ATLAS', None)])\n            self.set_info(**info)\n            return\n        else:\n            dict_append(info, **atlas)\n            dict_append(info, define_macros=[('ATLAS_WITHOUT_LAPACK', None)])\n            message = \"\"\"\n*********************************************************************\n    Could not find lapack library within the ATLAS installation.\n*********************************************************************\n\"\"\"\n            warnings.warn(message)\n            self.set_info(**info)\n            return\n\n        # Check if lapack library is complete, only warn if it is not.\n        lapack_dir = lapack['library_dirs'][0]\n        lapack_name = lapack['libraries'][0]\n        lapack_lib = None\n        lib_prefixes = ['lib']\n        if sys.platform == 'win32':\n            lib_prefixes.append('')\n        for e in self.library_extensions():\n            for prefix in lib_prefixes:\n                fn = os.path.join(lapack_dir, prefix + lapack_name + e)\n                if os.path.exists(fn):\n                    lapack_lib = fn\n                    break\n            if lapack_lib:\n                break\n        if lapack_lib is not None:\n            sz = os.stat(lapack_lib)[6]\n            if sz <= 4000 * 1024:\n                message = \"\"\"\n*********************************************************************\n    Lapack library (from ATLAS) is probably incomplete:\n      size of %s is %sk (expected >4000k)\n\n    Follow the instructions in the KNOWN PROBLEMS section of the file\n    numpy/INSTALL.txt.\n*********************************************************************\n\"\"\" % (lapack_lib, sz / 1024)\n                warnings.warn(message)\n            else:\n                info['language'] = 'f77'\n\n        atlas_version, atlas_extra_info = get_atlas_version(**atlas)\n        dict_append(info, **atlas_extra_info)\n\n        self.set_info(**info)\n    def info(self, msg, *args):\n        self._log(INFO, msg, args)",
  "smell": [
    {
      "smell_id": 2,
      "line_no": 20,
      "description": "The values of an argument hold inconsistent types in different function calls."
    }
  ]
}