{
  "code": "def execute_init(self):\n        \"\"\"\n        Executes the init action, which creates the skeleton framework\n        of a role that complies with the galaxy metadata format.\n        \"\"\"\n\n        init_path  = self.get_opt('init_path', './')\n        force      = self.get_opt('force', False)\n        offline    = self.get_opt('offline', False)\n\n        role_name = self.args.pop(0).strip() if self.args else None\n        if not role_name:\n            raise AnsibleOptionsError(\"- no role name specified for init\")\n        role_path = os.path.join(init_path, role_name)\n        if os.path.exists(role_path):\n            if os.path.isfile(role_path):\n                raise AnsibleError(\"- the path %s already exists, but is a file - aborting\" % role_path)\n            elif not force:\n                raise AnsibleError(\"- the directory %s already exists.\"\n                            \"you can use --force to re-initialize this directory,\\n\"\n                            \"however it will reset any main.yml files that may have\\n\"\n                            \"been modified there already.\" % role_path)\n\n        # create default README.md\n        if not os.path.exists(role_path):\n            os.makedirs(role_path)\n        readme_path = os.path.join(role_path, \"README.md\")\n        f = open(readme_path, \"wb\")\n        f.write(to_bytes(self.galaxy.default_readme))\n        f.close()\n\n        # create default .travis.yml\n        travis = Environment().from_string(self.galaxy.default_travis).render()\n        f = open(os.path.join(role_path, '.travis.yml'), 'w')\n        f.write(travis)\n        f.close()\n\n        for dir in GalaxyRole.ROLE_DIRS:\n            dir_path = os.path.join(init_path, role_name, dir)\n            main_yml_path = os.path.join(dir_path, 'main.yml')\n\n            # create the directory if it doesn't exist already\n            if not os.path.exists(dir_path):\n                os.makedirs(dir_path)\n\n            # now create the main.yml file for that directory\n            if dir == \"meta\":\n                # create a skeleton meta/main.yml with a valid galaxy_info\n                # datastructure in place, plus with all of the available\n                # platforms included (but commented out), the galaxy_tags\n                # list, and the dependencies section\n                platforms = []\n                if not offline:\n                    platforms = self.api.get_list(\"platforms\") or []\n\n                # group the list of platforms from the api based\n                # on their names, with the release field being\n                # appended to a list of versions\n                platform_groups = defaultdict(list)\n                for platform in platforms:\n                    platform_groups[platform['name']].append(platform['release'])\n                    platform_groups[platform['name']].sort()\n\n                inject = dict(\n                    author = 'your name',\n                    description = 'your description',\n                    company = 'your company (optional)',\n                    license = 'license (GPLv2, CC-BY, etc)',\n                    issue_tracker_url = 'http://example.com/issue/tracker',\n                    min_ansible_version = '1.2',\n                    platforms = platform_groups,\n                )\n                rendered_meta = Environment().from_string(self.galaxy.default_meta).render(inject)\n                f = open(main_yml_path, 'w')\n                f.write(rendered_meta)\n                f.close()\n                pass\n            elif dir == \"tests\":\n                # create tests/test.yml\n                inject = dict(\n                    role_name = role_name\n                )\n                playbook = Environment().from_string(self.galaxy.default_test).render(inject)\n                f = open(os.path.join(dir_path, 'test.yml'), 'w')\n                f.write(playbook)\n                f.close()\n\n                # create tests/inventory\n                f = open(os.path.join(dir_path, 'inventory'), 'w')\n                f.write('localhost')\n                f.close()\n            elif dir not in ('files','templates'):\n                # just write a (mostly) empty YAML file for main.yml\n                f = open(main_yml_path, 'w')\n                f.write('---\\n# %s file for %s\\n' % (dir,role_name))\n                f.close()\n        display.display(\"- %s was created successfully\" % role_name)\n    def write(self, s: AnyStr) -> int:\n        pass",
  "smell": [
    {
      "smell_id": 2,
      "line_no": 90,
      "description": "The values of an argument hold inconsistent types in different function calls."
    }
  ]
}