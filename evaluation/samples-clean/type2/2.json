{
  "code": "    def _find_extras_require(\n        self, call, body\n    ):  # type: (ast.Call, Iterable[Any]) -> Dict[str, List]\n        extras_require = {}\n        value = self._find_in_call(call, \"extras_require\")\n        if value is None:\n            # Trying to find in kwargs\n            kwargs = self._find_call_kwargs(call)\n\n            if kwargs is None or not isinstance(kwargs, ast.Name):\n                return extras_require\n\n            variable = self._find_variable_in_body(body, kwargs.id)\n            if not isinstance(variable, (ast.Dict, ast.Call)):\n                return extras_require\n\n            if isinstance(variable, ast.Call):\n                if not isinstance(variable.func, ast.Name):\n                    return extras_require\n\n                if variable.func.id != \"dict\":\n                    return extras_require\n\n                value = self._find_in_call(variable, \"extras_require\")\n            else:\n                value = self._find_in_dict(variable, \"extras_require\")\n\n        if value is None:\n            return extras_require\n\n        if isinstance(value, ast.Dict):\n            for key, val in zip(value.keys, value.values):\n                if isinstance(val, ast.Name):\n                    val = self._find_variable_in_body(body, val.id)\n\n                if isinstance(val, ast.List):\n                    extras_require[key.s] = [e.s for e in val.elts]\n        elif isinstance(value, ast.Name):\n            variable = self._find_variable_in_body(body, value.id)\n\n            if variable is None or not isinstance(variable, ast.Dict):\n                return extras_require\n\n            for key, val in zip(variable.keys, variable.values):\n                if isinstance(val, ast.Name):\n                    val = self._find_variable_in_body(body, val.id)\n\n                if isinstance(val, ast.List):\n                    extras_require[key.s] = [e.s for e in val.elts]\n\n        return extras_require",
  "smell": [
    {
      "smell_id": 2,
      "line_no": 26,
      "description": "The values of an argument hold inconsistent types in different function calls."
    }
  ]
}