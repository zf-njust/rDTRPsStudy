{
  "code": "    def __init__(self):\n        from .auto import set_close_exec\n        # Based on Zope select_trigger.py:\n        # https://github.com/zopefoundation/Zope/blob/master/src/ZServer/medusa/thread/select_trigger.py\n\n        self.writer = socket.socket()\n        set_close_exec(self.writer.fileno())\n        # Disable buffering -- pulling the trigger sends 1 byte,\n        # and we want that sent immediately, to wake up ASAP.\n        self.writer.setsockopt(socket.IPPROTO_TCP, socket.TCP_NODELAY, 1)\n\n        count = 0\n        while 1:\n            count += 1\n            # Bind to a local port; for efficiency, let the OS pick\n            # a free port for us.\n            # Unfortunately, stress tests showed that we may not\n            # be able to connect to that port (\"Address already in\n            # use\") despite that the OS picked it.  This appears\n            # to be a race bug in the Windows socket implementation.\n            # So we loop until a connect() succeeds (almost always\n            # on the first try).  See the long thread at\n            # http://mail.zope.org/pipermail/zope/2005-July/160433.html\n            # for hideous details.\n            a = socket.socket()\n            set_close_exec(a.fileno())\n            a.bind((\"127.0.0.1\", 0))\n            a.listen(1)\n            connect_address = a.getsockname()  # assigned (host, port) pair\n            try:\n                self.writer.connect(connect_address)\n                break    # success\n            except socket.error as detail:\n                if (not hasattr(errno, 'WSAEADDRINUSE') or\n                        errno_from_exception(detail) != errno.WSAEADDRINUSE):\n                    # \"Address already in use\" is the only error\n                    # I've seen on two WinXP Pro SP2 boxes, under\n                    # Pythons 2.3.5 and 2.4.1.\n                    raise\n                # (10048, 'Address already in use')\n                # assert count <= 2 # never triggered in Tim's tests\n                if count >= 10:  # I've never seen it go above 2\n                    a.close()\n                    self.writer.close()\n                    raise socket.error(\"Cannot bind trigger!\")\n                # Close `a` and try again.  Note:  I originally put a short\n                # sleep() here, but it didn't appear to help or hurt.\n                a.close()\n\n        self.reader, addr = a.accept()\n        set_close_exec(self.reader.fileno())\n        self.reader.setblocking(0)\n        self.writer.setblocking(0)\n        a.close()\n        self.reader_fd = self.reader.fileno()",
  "smell": [
    {
      "smell_id": 2,
      "line_no": 52,
      "description": "The values of an argument hold inconsistent types in different function calls."
    }
  ]
}