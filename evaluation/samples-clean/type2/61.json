{
  "code": "def update_pacfile(filename):\n        opener = get_opener()\n\n        listen_ip = config.LISTEN_IP\n        autoproxy = gae_proxy_listen\n        blackhole = pac_listen\n        default = 'DIRECT'\n\n        if config.PAC_ADBLOCK:\n            try:\n                xlog.info('try download %r to update_pacfile(%r)', config.PAC_ADBLOCK, filename)\n                adblock_content = opener.open(config.PAC_ADBLOCK).read()\n            except Exception as e:\n                xlog.warn(\"pac_update download adblock fail:%r\", e)\n                return\n\n        try:\n            xlog.info('try download %r to update_pacfile(%r)', config.PAC_GFWLIST, filename)\n            pac_content = opener.open(config.PAC_GFWLIST).read()\n        except Exception as e:\n            xlog.warn(\"pac_update download gfwlist fail:%r\", e)\n            return\n\n        content = ''\n        need_update = True\n        with open(get_serving_pacfile(), 'rb') as fp:\n            content = fp.read()\n\n        try:\n            placeholder = '// AUTO-GENERATED RULES, DO NOT MODIFY!'\n            content = content[:content.index(placeholder)+len(placeholder)]\n            content = re.sub(r'''blackhole\\s*=\\s*['\"]PROXY [\\.\\w:]+['\"]''', 'blackhole = \\'PROXY %s\\'' % blackhole, content)\n            content = re.sub(r'''autoproxy\\s*=\\s*['\"]PROXY [\\.\\w:]+['\"]''', 'autoproxy = \\'PROXY %s\\'' % autoproxy, content)\n            if content.startswith('//'):\n                line = '// Proxy Auto-Config file generated by autoproxy2pac, %s\\r\\n' % time.strftime('%Y-%m-%d %H:%M:%S')\n                content = line + '\\r\\n'.join(content.splitlines()[1:])\n        except ValueError:\n            need_update = False\n\n        try:\n            if config.PAC_ADBLOCK:\n                xlog.info('%r downloaded, try convert it with adblock2pac', config.PAC_ADBLOCK)\n                jsrule = PacUtil.adblock2pac(adblock_content, 'FindProxyForURLByAdblock', blackhole, default)\n                content += '\\r\\n' + jsrule + '\\r\\n'\n                xlog.info('%r downloaded and parsed', config.PAC_ADBLOCK)\n            else:\n                content += '\\r\\nfunction FindProxyForURLByAdblock(url, host) {return \"DIRECT\";}\\r\\n'\n        except Exception as e:\n            need_update = False\n            xlog.exception('update_pacfile failed: %r', e)\n            return\n\n        try:\n            autoproxy_content = base64.b64decode(pac_content)\n            xlog.info('%r downloaded, try convert it with autoproxy2pac', config.PAC_GFWLIST)\n            jsrule = PacUtil.autoproxy2pac(autoproxy_content, 'FindProxyForURLByAutoProxy', autoproxy, default)\n            content += '\\r\\n' + jsrule + '\\r\\n'\n            xlog.info('%r downloaded and parsed', config.PAC_GFWLIST)\n        except Exception as e:\n            need_update = False\n            xlog.exception('update_pacfile failed: %r', e)\n            return\n\n        if need_update:\n            with open(user_pacfile, 'wb') as fp:\n                fp.write(content)\n            xlog.info('%r successfully updated', user_pacfile)\n            serving_pacfile = user_pacfile\n@abstractmethod\n    def write(self, s: AnyStr) -> int:\n        pass",
  "smell": [
    {
      "smell_id": 2,
      "line_no": 66,
      "description": "The values of an argument hold inconsistent types in different function calls."
    }
  ]
}