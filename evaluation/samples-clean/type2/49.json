{
  "code": "def get_hosts(host=None):\n\n    returned = {}\n    try:\n        if host:\n            p = Popen([VBOX, 'showvminfo', host], stdout=PIPE)\n        else:\n            returned = { 'all': set(), '_metadata': {}  }\n            p = Popen([VBOX, 'list', '-l', 'vms'], stdout=PIPE)\n    except:\n        sys.exit(1)\n\n    hostvars = {}\n    prevkey = pref_k = ''\n\n    for line in p.stdout.readlines():\n\n        try:\n            k,v = line.split(':',1)\n        except:\n            continue\n\n        if k == '':\n            continue\n\n        v = v.strip()\n        if k.startswith('Name'):\n            if v not in hostvars:\n                curname = v\n                hostvars[curname] = {}\n                try: # try to get network info\n                    x = Popen([VBOX, 'guestproperty', 'get', curname,\"/VirtualBox/GuestInfo/Net/0/V4/IP\"],stdout=PIPE)\n                    ipinfo = x.stdout.read()\n                    if 'Value' in ipinfo:\n                        a,ip = ipinfo.split(':',1)\n                        hostvars[curname]['ansible_ssh_host'] = ip.strip()\n                except:\n                    pass\n\n            continue\n\n        if not host:\n            if k == 'Groups':\n                for group in v.split('/'):\n                    if group:\n                        if group not in returned:\n                            returned[group] = set()\n                        returned[group].add(curname)\n                    returned['all'].add(curname)\n                continue\n\n        pref_k = 'vbox_' + k.strip().replace(' ','_')\n        if k.startswith(' '):\n            if prevkey not in hostvars[curname]:\n                hostvars[curname][prevkey] = {}\n            hostvars[curname][prevkey][pref_k]= v\n        else:\n            if v != '':\n                hostvars[curname][pref_k] = v\n\n        prevkey = pref_k\n\n    if not host:\n        returned['_metadata']['hostvars'] = hostvars\n    else:\n        returned = hostvars[host]\n    return returned\ndef startswith(a, prefix, start=0, end=None):\n    \"\"\"\n    Returns a boolean array which is `True` where the string element\n    in `a` starts with `prefix`, otherwise `False`.\n\n    Calls `str.startswith` element-wise.\n\n    Parameters\n    ----------\n    a : array_like of str or unicode\n\n    prefix : str\n\n    start, end : int, optional\n        With optional `start`, test beginning at that position. With\n        optional `end`, stop comparing at that position.\n\n    Returns\n    -------\n    out : ndarray\n        Array of booleans\n\n    See also\n    --------\n    str.startswith\n\n    \"\"\"\n    return _vec_string(\n        a, bool_, 'startswith', [prefix, start] + _clean_args(end))",
  "smell": [
    {
      "smell_id": 2,
      "line_no": 27,
      "description": "The values of an argument hold inconsistent types in different function calls."
    }
  ]
}