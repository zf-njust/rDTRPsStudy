{
  "code": "def fit(self, trn_path: str, **kwargs) -> int:\n        if self.config.get('joint_pos', None):\n            self.config.use_pos = True\n        if self.graph:\n            # noinspection PyCallByClass\n            num = CoNLL_SDP_Transform.fit(self, trn_path, **kwargs)\n        else:\n            num = super().fit(trn_path, **kwargs)\n        if self.config.get('topk', None):\n            counter = Counter()\n            for sent in self.file_to_samples(trn_path, gold=True):\n                for idx, cell in enumerate(sent):\n                    form, head, deprel = cell\n                    counter[form] += 1\n            self.topk_vocab = VocabTF()\n            for k, v in counter.most_common(self.config.topk):\n                self.topk_vocab.add(k)\n        return num\n    def fit(self, trn_path: str, **kwargs) -> int:\n        self.form_vocab = VocabTF()\n        self.form_vocab.add(ROOT)  # make root the 2ed elements while 0th is pad, 1st is unk\n        if self.use_pos:\n            self.cpos_vocab = VocabTF(pad_token=None, unk_token=None)\n        self.rel_vocab = VocabTF(pad_token=None, unk_token=None)\n        num_samples = 0\n        counter = Counter()\n        for sent in self.file_to_samples(trn_path, gold=True):\n            num_samples += 1\n            for idx, cell in enumerate(sent):\n                if len(cell) == 4:\n                    form, cpos, head, deprel = cell\n                elif len(cell) == 3:\n                    if self.use_pos:\n                        form, cpos = cell[0]\n                    else:\n                        form = cell[0]\n                    head, deprel = cell[1:]\n                else:\n                    raise ValueError('Unknown data arrangement')\n                if idx == 0:\n                    root = form\n                else:\n                    counter[form] += 1\n                if self.use_pos:\n                    self.cpos_vocab.add(cpos)\n                self.rel_vocab.update(deprel)\n\n        for token in [token for token, freq in counter.items() if freq >= self.config.min_freq]:\n            self.form_vocab.add(token)\n        return num_samples",
  "smell": [
    {
      "smell_id": 2,
      "line_no": 6,
      "description": "The values of an argument hold inconsistent types in different function calls."
    }
  ]
}