{
  "code": "def __init__(\n        self,\n        source: Mobject,\n        target: Mobject,\n        matched_pairs: Iterable[tuple[Mobject, Mobject]] = [],\n        match_animation: type = Transform,\n        mismatch_animation: type = Transform,\n        run_time: float = 2,\n        lag_ratio: float = 0,\n        **kwargs,\n    ):\n        self.source = source\n        self.target = target\n        self.match_animation = match_animation\n        self.mismatch_animation = mismatch_animation\n        self.anim_config = dict(**kwargs)\n\n        # We will progressively build up a list of transforms\n        # from pieces in source to those in target. These\n        # two lists keep track of which pieces are accounted\n        # for so far\n        self.source_pieces = source.family_members_with_points()\n        self.target_pieces = target.family_members_with_points()\n        self.anims = []\n\n        for pair in matched_pairs:\n            self.add_transform(*pair)\n\n        # Match any pairs with the same shape\n        for pair in self.find_pairs_with_matching_shapes(self.source_pieces, self.target_pieces):\n            self.add_transform(*pair)\n\n        # Finally, account for mismatches\n        for source_piece in self.source_pieces:\n            if any([source_piece in anim.mobject.get_family() for anim in self.anims]):\n                continue\n            self.anims.append(FadeOutToPoint(\n                source_piece, target.get_center(),\n                **self.anim_config\n            ))\n        for target_piece in self.target_pieces:\n            if any([target_piece in anim.mobject.get_family() for anim in self.anims]):\n                continue\n            self.anims.append(FadeInFromPoint(\n                target_piece, source.get_center(),\n                **self.anim_config\n            ))\n\n        super().__init__(\n            *self.anims,\n            run_time=run_time,\n            lag_ratio=lag_ratio,\n        )\n    def append(self, *args, **kwargs): # real signature unknown\n        \"\"\" Append object to the end of the list. \"\"\"\n        pass",
  "smell": [
    {
      "smell_id": 2,
      "line_no": 44,
      "description": "The values of an argument hold inconsistent types in different function calls."
    }
  ]
}