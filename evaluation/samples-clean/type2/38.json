{
  "code": "def test_network_creation(self, input_size, model_id, endpoint_filter_scale,\n                            stem_type, se_ratio, init_stochastic_depth_rate):\n    \"\"\"Test creation of ResNet3D family models.\"\"\"\n    tf.keras.backend.set_image_data_format('channels_last')\n    temporal_strides = [1, 1, 1, 1]\n    temporal_kernel_sizes = [(3, 3, 3), (3, 1, 3, 1), (3, 1, 3, 1, 3, 1),\n                             (1, 3, 1)]\n    use_self_gating = [True, False, True, False]\n\n    network = resnet_3d.ResNet3DY(\n        model_id=model_id,\n        temporal_strides=temporal_strides,\n        temporal_kernel_sizes=temporal_kernel_sizes,\n        use_self_gating=use_self_gating,\n        stem_type=stem_type,\n        se_ratio=se_ratio,\n        init_stochastic_depth_rate=init_stochastic_depth_rate)\n    inputs = tf.keras.Input(shape=(8, input_size, input_size, 3), batch_size=1)\n    endpoints = network(inputs)\n\n    self.assertAllEqual([\n        1, 2, input_size / 2**2, input_size / 2**2, 64 * endpoint_filter_scale\n    ], endpoints['2'].shape.as_list())\n    self.assertAllEqual([\n        1, 2, input_size / 2**3, input_size / 2**3, 128 * endpoint_filter_scale\n    ], endpoints['3'].shape.as_list())\n    self.assertAllEqual([\n        1, 2, input_size / 2**4, input_size / 2**4, 256 * endpoint_filter_scale\n    ], endpoints['4'].shape.as_list())\n    self.assertAllEqual([\n        1, 2, input_size / 2**5, input_size / 2**5, 512 * endpoint_filter_scale\n    ], endpoints['5'].shape.as_list())\n    self.assertAllEqual([\n        1, 2, input_size / 2**5, input_size / 2**5, 512 * endpoint_filter_scale\n    ], endpoints['5_1'].shape.as_list())\n  def __init__(\n      self,\n      model_id: int,\n      temporal_strides: List[int],\n      temporal_kernel_sizes: List[Tuple[int]],\n      use_self_gating: Optional[List[int]] = None,\n      input_specs: tf.keras.layers.InputSpec = layers.InputSpec(\n          shape=[None, None, None, None, 3]),\n      stem_type: str = 'v0',\n      stem_conv_temporal_kernel_size: int = 5,\n      stem_conv_temporal_stride: int = 2,\n      stem_pool_temporal_stride: int = 2,\n      init_stochastic_depth_rate: float = 0.0,\n      activation: str = 'relu',\n      se_ratio: Optional[float] = None,\n      use_sync_bn: bool = False,\n      norm_momentum: float = 0.99,\n      norm_epsilon: float = 0.001,\n      kernel_initializer: str = 'VarianceScaling',\n      kernel_regularizer: Optional[tf.keras.regularizers.Regularizer] = None,\n      bias_regularizer: Optional[tf.keras.regularizers.Regularizer] = None,\n      **kwargs):\n    \"\"\"Initializes a 3D ResNet model.\n\n    Args:\n      model_id: An `int` of depth of ResNet backbone model.\n      temporal_strides: A list of integers that specifies the temporal strides\n        for all 3d blocks.\n      temporal_kernel_sizes: A list of tuples that specifies the temporal kernel\n        sizes for all 3d blocks in different block groups.\n      use_self_gating: A list of booleans to specify applying self-gating module\n        or not in each block group. If None, self-gating is not applied.\n      input_specs: A `tf.keras.layers.InputSpec` of the input tensor.\n      stem_type: A `str` of stem type of ResNet. Default to `v0`. If set to\n        `v1`, use ResNet-D type stem (https://arxiv.org/abs/1812.01187).\n      stem_conv_temporal_kernel_size: An `int` of temporal kernel size for the\n        first conv layer.\n      stem_conv_temporal_stride: An `int` of temporal stride for the first conv\n        layer.\n      stem_pool_temporal_stride: An `int` of temporal stride for the first pool\n        layer.\n      init_stochastic_depth_rate: A `float` of initial stochastic depth rate.\n      activation: A `str` of name of the activation function.\n      se_ratio: A `float` or None. Ratio of the Squeeze-and-Excitation layer.\n      use_sync_bn: If True, use synchronized batch normalization.\n      norm_momentum: A `float` of normalization momentum for the moving average.\n      norm_epsilon: A `float` added to variance to avoid dividing by zero.\n      kernel_initializer: A str for kernel initializer of convolutional layers.\n      kernel_regularizer: A `tf.keras.regularizers.Regularizer` object for\n        Conv2D. Default to None.\n      bias_regularizer: A `tf.keras.regularizers.Regularizer` object for Conv2D.\n        Default to None.\n      **kwargs: Additional keyword arguments to be passed.\n    \"\"\"",
  "smell": [
    {
      "smell_id": 2,
      "line_no": 13,
      "description": "The values of an argument hold inconsistent types in different function calls."
    }
  ]
}