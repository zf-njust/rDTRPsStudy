{
  "code": "def _get_filename(self, action):\n        \"\"\" Obtain the filename for load and save preset actions.\n\n        Parameters\n        ----------\n        action: [\"load\", \"save\"]\n            The preset action that is being performed\n\n        Returns\n        -------\n        str: The requested preset filename\n        \"\"\"\n        if not self._parent.config_dict.get(self._parent.displayed_key):\n            logger.info(\"No settings to %s for the current page.\", action)\n            return None\n\n        args = (\"save_filename\", \"json\") if action == \"save\" else (\"filename\", \"json\")\n        kwargs = {\"title\": f\"{action.title()} Preset...\",\n                  \"initial_folder\": self._preset_path,\n                  \"parent\": self._parent}\n        if action == \"save\":\n            kwargs[\"initial_file\"] = self._get_initial_filename()\n\n        filename = FileHandler(*args, **kwargs).return_file\n        if not filename:\n            logger.debug(\"%s cancelled\", action.title())\n\n        self._raise_toplevel()\n        return filename\n    def __init__(self,\n                 handle_type: _HANDLETYPE,\n                 file_type: _FILETYPE | None,\n                 title: str | None = None,\n                 initial_folder: str | None = None,\n                 initial_file: str | None = None,\n                 command: str | None = None,\n                 action: str | None = None,\n                 variable: str | None = None,\n                 parent: tk.Frame | None = None) -> None:\n        logger.debug(\"Initializing %s: (handle_type: '%s', file_type: '%s', title: '%s', \"\n                     \"initial_folder: '%s', initial_file: '%s', command: '%s', action: '%s', \"\n                     \"variable: %s, parent: %s)\", self.__class__.__name__, handle_type, file_type,\n                     title, initial_folder, initial_file, command, action, variable, parent)\n        self._handletype = handle_type\n        self._dummy_master = self._set_dummy_master()\n        self._defaults = self._set_defaults()\n        self._kwargs = self._set_kwargs(title,\n                                        initial_folder,\n                                        initial_file,\n                                        file_type,\n                                        command,\n                                        action,\n                                        variable,\n                                        parent)\n        self.return_file = getattr(self, f\"_{self._handletype.lower()}\")()\n        self._remove_dummy_master()\n\n        logger.debug(\"Initialized %s\", self.__class__.__name__)",
  "smell": [
    {
      "smell_id": 2,
      "line_no": 24,
      "description": "The values of an argument hold inconsistent types in different function calls."
    }
  ]
}