{
  "code": "def updatevars(typespec, selector, attrspec, entitydecl):\n    global groupcache, groupcounter\n\n    last_name = None\n    kindselect, charselect, typename = cracktypespec(typespec, selector)\n    if attrspec:\n        attrspec = [x.strip() for x in markoutercomma(attrspec).split('@,@')]\n        l = []\n        c = re.compile(r'(?P<start>[a-zA-Z]+)')\n        for a in attrspec:\n            if not a:\n                continue\n            m = c.match(a)\n            if m:\n                s = m.group('start').lower()\n                a = s + a[len(s):]\n            l.append(a)\n        attrspec = l\n    el = [x.strip() for x in markoutercomma(entitydecl).split('@,@')]\n    el1 = []\n    for e in el:\n        for e1 in [x.strip() for x in markoutercomma(removespaces(markinnerspaces(e)), comma=' ').split('@ @')]:\n            if e1:\n                el1.append(e1.replace('@_@', ' '))\n    for e in el1:\n        m = namepattern.match(e)\n        if not m:\n            outmess(\n                'updatevars: no name pattern found for entity=%s. Skipping.\\n' % (repr(e)))\n            continue\n        ename = rmbadname1(m.group('name'))\n        edecl = {}\n        if ename in groupcache[groupcounter]['vars']:\n            edecl = groupcache[groupcounter]['vars'][ename].copy()\n            not_has_typespec = 'typespec' not in edecl\n            if not_has_typespec:\n                edecl['typespec'] = typespec\n            elif typespec and (not typespec == edecl['typespec']):\n                outmess('updatevars: attempt to change the type of \"%s\" (\"%s\") to \"%s\". Ignoring.\\n' % (\n                    ename, edecl['typespec'], typespec))\n            if 'kindselector' not in edecl:\n                edecl['kindselector'] = copy.copy(kindselect)\n            elif kindselect:\n                for k in list(kindselect.keys()):\n                    if k in edecl['kindselector'] and (not kindselect[k] == edecl['kindselector'][k]):\n                        outmess('updatevars: attempt to change the kindselector \"%s\" of \"%s\" (\"%s\") to \"%s\". Ignoring.\\n' % (\n                            k, ename, edecl['kindselector'][k], kindselect[k]))\n                    else:\n                        edecl['kindselector'][k] = copy.copy(kindselect[k])\n            if 'charselector' not in edecl and charselect:\n                if not_has_typespec:\n                    edecl['charselector'] = charselect\n                else:\n                    errmess('updatevars:%s: attempt to change empty charselector to %r. Ignoring.\\n'\n                            % (ename, charselect))\n            elif charselect:\n                for k in list(charselect.keys()):\n                    if k in edecl['charselector'] and (not charselect[k] == edecl['charselector'][k]):\n                        outmess('updatevars: attempt to change the charselector \"%s\" of \"%s\" (\"%s\") to \"%s\". Ignoring.\\n' % (\n                            k, ename, edecl['charselector'][k], charselect[k]))\n                    else:\n                        edecl['charselector'][k] = copy.copy(charselect[k])\n            if 'typename' not in edecl:\n                edecl['typename'] = typename\n            elif typename and (not edecl['typename'] == typename):\n                outmess('updatevars: attempt to change the typename of \"%s\" (\"%s\") to \"%s\". Ignoring.\\n' % (\n                    ename, edecl['typename'], typename))\n            if 'attrspec' not in edecl:\n                edecl['attrspec'] = copy.copy(attrspec)\n            elif attrspec:\n                for a in attrspec:\n                    if a not in edecl['attrspec']:\n                        edecl['attrspec'].append(a)\n        else:\n            edecl['typespec'] = copy.copy(typespec)\n            edecl['kindselector'] = copy.copy(kindselect)\n            edecl['charselector'] = copy.copy(charselect)\n            edecl['typename'] = typename\n            edecl['attrspec'] = copy.copy(attrspec)\n        if m.group('after'):\n            m1 = lenarraypattern.match(markouterparen(m.group('after')))\n            if m1:\n                d1 = m1.groupdict()\n                for lk in ['len', 'array', 'init']:\n                    if d1[lk + '2'] is not None:\n                        d1[lk] = d1[lk + '2']\n                        del d1[lk + '2']\n                for k in list(d1.keys()):\n                    if d1[k] is not None:\n                        d1[k] = unmarkouterparen(d1[k])\n                    else:\n                        del d1[k]\n                if 'len' in d1 and 'array' in d1:\n                    if d1['len'] == '':\n                        d1['len'] = d1['array']\n                        del d1['array']\n                    else:\n                        d1['array'] = d1['array'] + ',' + d1['len']\n                        del d1['len']\n                        errmess('updatevars: \"%s %s\" is mapped to \"%s %s(%s)\"\\n' % (\n                            typespec, e, typespec, ename, d1['array']))\n                if 'array' in d1:\n                    dm = 'dimension(%s)' % d1['array']\n                    if 'attrspec' not in edecl or (not edecl['attrspec']):\n                        edecl['attrspec'] = [dm]\n                    else:\n                        edecl['attrspec'].append(dm)\n                        for dm1 in edecl['attrspec']:\n                            if dm1[:9] == 'dimension' and dm1 != dm:\n                                del edecl['attrspec'][-1]\n                                errmess('updatevars:%s: attempt to change %r to %r. Ignoring.\\n'\n                                        % (ename, dm1, dm))\n                                break\n\n                if 'len' in d1:\n                    if typespec in ['complex', 'integer', 'logical', 'real']:\n                        if ('kindselector' not in edecl) or (not edecl['kindselector']):\n                            edecl['kindselector'] = {}\n                        edecl['kindselector']['*'] = d1['len']\n                    elif typespec == 'character':\n                        if ('charselector' not in edecl) or (not edecl['charselector']):\n                            edecl['charselector'] = {}\n                        if 'len' in edecl['charselector']:\n                            del edecl['charselector']['len']\n                        edecl['charselector']['*'] = d1['len']\n                if 'init' in d1:\n                    if '=' in edecl and (not edecl['='] == d1['init']):\n                        outmess('updatevars: attempt to change the init expression of \"%s\" (\"%s\") to \"%s\". Ignoring.\\n' % (\n                            ename, edecl['='], d1['init']))\n                    else:\n                        edecl['='] = d1['init']\n            else:\n                outmess('updatevars: could not crack entity declaration \"%s\". Ignoring.\\n' % (\n                    ename + m.group('after')))\n        for k in list(edecl.keys()):\n            if not edecl[k]:\n                del edecl[k]\n        groupcache[groupcounter]['vars'][ename] = edecl\n        if 'varnames' in groupcache[groupcounter]:\n            groupcache[groupcounter]['varnames'].append(ename)\n        last_name = ename\n    return last_name",
  "smell": [
    {
      "smell_id": 4,
      "line_no": 137,
      "description": "The element is deleted from a container by a dynamically determined index."
    }
  ]
}