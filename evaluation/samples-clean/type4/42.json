{
  "code": "def analyzevars(block):\n    global f90modulevars\n\n    setmesstext(block)\n    implicitrules, attrrules = buildimplicitrules(block)\n    vars = copy.copy(block['vars'])\n    if block['block'] == 'function' and block['name'] not in vars:\n        vars[block['name']] = {}\n    if '' in block['vars']:\n        del vars['']\n        if 'attrspec' in block['vars']['']:\n            gen = block['vars']['']['attrspec']\n            for n in list(vars.keys()):\n                for k in ['public', 'private']:\n                    if k in gen:\n                        vars[n] = setattrspec(vars[n], k)\n    svars = []\n    args = block['args']\n    for a in args:\n        try:\n            vars[a]\n            svars.append(a)\n        except KeyError:\n            pass\n    for n in list(vars.keys()):\n        if n not in args:\n            svars.append(n)\n\n    params = get_parameters(vars, get_useparameters(block))\n\n    dep_matches = {}\n    name_match = re.compile(r'\\w[\\w\\d_$]*').match\n    for v in list(vars.keys()):\n        m = name_match(v)\n        if m:\n            n = v[m.start():m.end()]\n            try:\n                dep_matches[n]\n            except KeyError:\n                dep_matches[n] = re.compile(r'.*\\b%s\\b' % (v), re.I).match\n    for n in svars:\n        if n[0] in list(attrrules.keys()):\n            vars[n] = setattrspec(vars[n], attrrules[n[0]])\n        if 'typespec' not in vars[n]:\n            if not('attrspec' in vars[n] and 'external' in vars[n]['attrspec']):\n                if implicitrules:\n                    ln0 = n[0].lower()\n                    for k in list(implicitrules[ln0].keys()):\n                        if k == 'typespec' and implicitrules[ln0][k] == 'undefined':\n                            continue\n                        if k not in vars[n]:\n                            vars[n][k] = implicitrules[ln0][k]\n                        elif k == 'attrspec':\n                            for l in implicitrules[ln0][k]:\n                                vars[n] = setattrspec(vars[n], l)\n                elif n in block['args']:\n                    outmess('analyzevars: typespec of variable %s is not defined in routine %s.\\n' % (\n                        repr(n), block['name']))\n\n        if 'charselector' in vars[n]:\n            if 'len' in vars[n]['charselector']:\n                l = vars[n]['charselector']['len']\n                try:\n                    l = str(eval(l, {}, params))\n                except:\n                    pass\n                vars[n]['charselector']['len'] = l\n\n        if 'kindselector' in vars[n]:\n            if 'kind' in vars[n]['kindselector']:\n                l = vars[n]['kindselector']['kind']\n                try:\n                    l = str(eval(l, {}, params))\n                except:\n                    pass\n                vars[n]['kindselector']['kind'] = l\n\n        savelindims = {}\n        if 'attrspec' in vars[n]:\n            attr = vars[n]['attrspec']\n            attr.reverse()\n            vars[n]['attrspec'] = []\n            dim, intent, depend, check, note = None, None, None, None, None\n            for a in attr:\n                if a[:9] == 'dimension':\n                    dim = (a[9:].strip())[1:-1]\n                elif a[:6] == 'intent':\n                    intent = (a[6:].strip())[1:-1]\n                elif a[:6] == 'depend':\n                    depend = (a[6:].strip())[1:-1]\n                elif a[:5] == 'check':\n                    check = (a[5:].strip())[1:-1]\n                elif a[:4] == 'note':\n                    note = (a[4:].strip())[1:-1]\n                else:\n                    vars[n] = setattrspec(vars[n], a)\n                if intent:\n                    if 'intent' not in vars[n]:\n                        vars[n]['intent'] = []\n                    for c in [x.strip() for x in markoutercomma(intent).split('@,@')]:\n                        # Remove spaces so that 'in out' becomes 'inout'\n                        tmp = c.replace(' ', '')\n                        if tmp not in vars[n]['intent']:\n                            vars[n]['intent'].append(tmp)\n                    intent = None\n                if note:\n                    note = note.replace('\\\\n\\\\n', '\\n\\n')\n                    note = note.replace('\\\\n ', '\\n')\n                    if 'note' not in vars[n]:\n                        vars[n]['note'] = [note]\n                    else:\n                        vars[n]['note'].append(note)\n                    note = None\n                if depend is not None:\n                    if 'depend' not in vars[n]:\n                        vars[n]['depend'] = []\n                    for c in rmbadname([x.strip() for x in markoutercomma(depend).split('@,@')]):\n                        if c not in vars[n]['depend']:\n                            vars[n]['depend'].append(c)\n                    depend = None\n                if check is not None:\n                    if 'check' not in vars[n]:\n                        vars[n]['check'] = []\n                    for c in [x.strip() for x in markoutercomma(check).split('@,@')]:\n                        if c not in vars[n]['check']:\n                            vars[n]['check'].append(c)\n                    check = None\n            if dim and 'dimension' not in vars[n]:\n                vars[n]['dimension'] = []\n                for d in rmbadname([x.strip() for x in markoutercomma(dim).split('@,@')]):\n                    star = '*'\n                    if d == ':':\n                        star = ':'\n                    if d in params:\n                        d = str(params[d])\n                    for p in list(params.keys()):\n                        re_1 = re.compile(r'(?P<before>.*?)\\b' + p + r'\\b(?P<after>.*)', re.I)\n                        m = re_1.match(d)\n                        while m:\n                            d = m.group('before') + \\\n                                str(params[p]) + m.group('after')\n                            m = re_1.match(d)\n                    if d == star:\n                        dl = [star]\n                    else:\n                        dl = markoutercomma(d, ':').split('@:@')\n                    if len(dl) == 2 and '*' in dl:  # e.g. dimension(5:*)\n                        dl = ['*']\n                        d = '*'\n                    if len(dl) == 1 and not dl[0] == star:\n                        dl = ['1', dl[0]]\n                    if len(dl) == 2:\n                        d, v, di = getarrlen(dl, list(block['vars'].keys()))\n                        if d[:4] == '1 * ':\n                            d = d[4:]\n                        if di and di[-4:] == '/(1)':\n                            di = di[:-4]\n                        if v:\n                            savelindims[d] = v, di\n                    vars[n]['dimension'].append(d)\n        if 'dimension' in vars[n]:\n            if isintent_c(vars[n]):\n                shape_macro = 'shape'\n            else:\n                shape_macro = 'shape'  # 'fshape'\n            if isstringarray(vars[n]):\n                if 'charselector' in vars[n]:\n                    d = vars[n]['charselector']\n                    if '*' in d:\n                        d = d['*']\n                        errmess('analyzevars: character array \"character*%s %s(%s)\" is considered as \"character %s(%s)\"; \"intent(c)\" is forced.\\n'\n                                % (d, n,\n                                   ','.join(vars[n]['dimension']),\n                                   n, ','.join(vars[n]['dimension'] + [d])))\n                        vars[n]['dimension'].append(d)\n                        del vars[n]['charselector']\n                        if 'intent' not in vars[n]:\n                            vars[n]['intent'] = []\n                        if 'c' not in vars[n]['intent']:\n                            vars[n]['intent'].append('c')\n                    else:\n                        errmess(\n                            \"analyzevars: charselector=%r unhandled.\" % (d))\n        if 'check' not in vars[n] and 'args' in block and n in block['args']:\n            flag = 'depend' not in vars[n]\n            if flag:\n                vars[n]['depend'] = []\n            vars[n]['check'] = []\n            if 'dimension' in vars[n]:\n                #/----< no check\n                i = -1\n                ni = len(vars[n]['dimension'])\n                for d in vars[n]['dimension']:\n                    ddeps = []  # dependecies of 'd'\n                    ad = ''\n                    pd = ''\n                    if d not in vars:\n                        if d in savelindims:\n                            pd, ad = '(', savelindims[d][1]\n                            d = savelindims[d][0]\n                        else:\n                            for r in block['args']:\n                                if r not in vars:\n                                    continue\n                                if re.match(r'.*?\\b' + r + r'\\b', d, re.I):\n                                    ddeps.append(r)\n                    if d in vars:\n                        if 'attrspec' in vars[d]:\n                            for aa in vars[d]['attrspec']:\n                                if aa[:6] == 'depend':\n                                    ddeps += aa[6:].strip()[1:-1].split(',')\n                        if 'depend' in vars[d]:\n                            ddeps = ddeps + vars[d]['depend']\n                    i = i + 1\n                    if d in vars and ('depend' not in vars[d]) \\\n                       and ('=' not in vars[d]) and (d not in vars[n]['depend']) \\\n                       and l_or(isintent_in, isintent_inout, isintent_inplace)(vars[n]):\n                        vars[d]['depend'] = [n]\n                        if ni > 1:\n                            vars[d]['='] = '%s%s(%s,%s)%s' % (\n                                pd, shape_macro, n, i, ad)\n                        else:\n                            vars[d]['='] = '%slen(%s)%s' % (pd, n, ad)\n                        #  /---< no check\n                        if 1 and 'check' not in vars[d]:\n                            if ni > 1:\n                                vars[d]['check'] = ['%s%s(%s,%i)%s==%s'\n                                                    % (pd, shape_macro, n, i, ad, d)]\n                            else:\n                                vars[d]['check'] = [\n                                    '%slen(%s)%s>=%s' % (pd, n, ad, d)]\n                        if 'attrspec' not in vars[d]:\n                            vars[d]['attrspec'] = ['optional']\n                        if ('optional' not in vars[d]['attrspec']) and\\\n                           ('required' not in vars[d]['attrspec']):\n                            vars[d]['attrspec'].append('optional')\n                    elif d not in ['*', ':']:\n                        #/----< no check\n                        if flag:\n                            if d in vars:\n                                if n not in ddeps:\n                                    vars[n]['depend'].append(d)\n                            else:\n                                vars[n]['depend'] = vars[n]['depend'] + ddeps\n            elif isstring(vars[n]):\n                length = '1'\n                if 'charselector' in vars[n]:\n                    if '*' in vars[n]['charselector']:\n                        length = _eval_length(vars[n]['charselector']['*'],\n                                              params)\n                        vars[n]['charselector']['*'] = length\n                    elif 'len' in vars[n]['charselector']:\n                        length = _eval_length(vars[n]['charselector']['len'],\n                                              params)\n                        del vars[n]['charselector']['len']\n                        vars[n]['charselector']['*'] = length\n\n            if not vars[n]['check']:\n                del vars[n]['check']\n            if flag and not vars[n]['depend']:\n                del vars[n]['depend']\n        if '=' in vars[n]:\n            if 'attrspec' not in vars[n]:\n                vars[n]['attrspec'] = []\n            if ('optional' not in vars[n]['attrspec']) and \\\n               ('required' not in vars[n]['attrspec']):\n                vars[n]['attrspec'].append('optional')\n            if 'depend' not in vars[n]:\n                vars[n]['depend'] = []\n                for v, m in list(dep_matches.items()):\n                    if m(vars[n]['=']):\n                        vars[n]['depend'].append(v)\n                if not vars[n]['depend']:\n                    del vars[n]['depend']\n            if isscalar(vars[n]):\n                vars[n]['='] = _eval_scalar(vars[n]['='], params)\n\n    for n in list(vars.keys()):\n        if n == block['name']:  # n is block name\n            if 'note' in vars[n]:\n                block['note'] = vars[n]['note']\n            if block['block'] == 'function':\n                if 'result' in block and block['result'] in vars:\n                    vars[n] = appenddecl(vars[n], vars[block['result']])\n                if 'prefix' in block:\n                    pr = block['prefix']\n                    ispure = 0\n                    isrec = 1\n                    pr1 = pr.replace('pure', '')\n                    ispure = (not pr == pr1)\n                    pr = pr1.replace('recursive', '')\n                    isrec = (not pr == pr1)\n                    m = typespattern[0].match(pr)\n                    if m:\n                        typespec, selector, attr, edecl = cracktypespec0(\n                            m.group('this'), m.group('after'))\n                        kindselect, charselect, typename = cracktypespec(\n                            typespec, selector)\n                        vars[n]['typespec'] = typespec\n                        if kindselect:\n                            if 'kind' in kindselect:\n                                try:\n                                    kindselect['kind'] = eval(\n                                        kindselect['kind'], {}, params)\n                                except:\n                                    pass\n                            vars[n]['kindselector'] = kindselect\n                        if charselect:\n                            vars[n]['charselector'] = charselect\n                        if typename:\n                            vars[n]['typename'] = typename\n                        if ispure:\n                            vars[n] = setattrspec(vars[n], 'pure')\n                        if isrec:\n                            vars[n] = setattrspec(vars[n], 'recursive')\n                    else:\n                        outmess(\n                            'analyzevars: prefix (%s) were not used\\n' % repr(block['prefix']))\n    if not block['block'] in ['module', 'pythonmodule', 'python module', 'block data']:\n        if 'commonvars' in block:\n            neededvars = copy.copy(block['args'] + block['commonvars'])\n        else:\n            neededvars = copy.copy(block['args'])\n        for n in list(vars.keys()):\n            if l_or(isintent_callback, isintent_aux)(vars[n]):\n                neededvars.append(n)\n        if 'entry' in block:\n            neededvars.extend(list(block['entry'].keys()))\n            for k in list(block['entry'].keys()):\n                for n in block['entry'][k]:\n                    if n not in neededvars:\n                        neededvars.append(n)\n        if block['block'] == 'function':\n            if 'result' in block:\n                neededvars.append(block['result'])\n            else:\n                neededvars.append(block['name'])\n        if block['block'] in ['subroutine', 'function']:\n            name = block['name']\n            if name in vars and 'intent' in vars[name]:\n                block['intent'] = vars[name]['intent']\n        if block['block'] == 'type':\n            neededvars.extend(list(vars.keys()))\n        for n in list(vars.keys()):\n            if n not in neededvars:\n                del vars[n]\n    return vars",
  "smell": [
    {
      "smell_id": 4,
      "line_no": 346,
      "description": "The element is deleted from a container by a dynamically determined index."
    }
  ]
}