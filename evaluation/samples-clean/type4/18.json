{
  "code": "def cracktypespec(typespec, selector):\n    kindselect = None\n    charselect = None\n    typename = None\n    if selector:\n        if typespec in ['complex', 'integer', 'logical', 'real']:\n            kindselect = kindselector.match(selector)\n            if not kindselect:\n                outmess(\n                    'cracktypespec: no kindselector pattern found for %s\\n' % (repr(selector)))\n                return\n            kindselect = kindselect.groupdict()\n            kindselect['*'] = kindselect['kind2']\n            del kindselect['kind2']\n            for k in list(kindselect.keys()):\n                if not kindselect[k]:\n                    del kindselect[k]\n            for k, i in list(kindselect.items()):\n                kindselect[k] = rmbadname1(i)\n        elif typespec == 'character':\n            charselect = charselector.match(selector)\n            if not charselect:\n                outmess(\n                    'cracktypespec: no charselector pattern found for %s\\n' % (repr(selector)))\n                return\n            charselect = charselect.groupdict()\n            charselect['*'] = charselect['charlen']\n            del charselect['charlen']\n            if charselect['lenkind']:\n                lenkind = lenkindpattern.match(\n                    markoutercomma(charselect['lenkind']))\n                lenkind = lenkind.groupdict()\n                for lk in ['len', 'kind']:\n                    if lenkind[lk + '2']:\n                        lenkind[lk] = lenkind[lk + '2']\n                    charselect[lk] = lenkind[lk]\n                    del lenkind[lk + '2']\n            del charselect['lenkind']\n            for k in list(charselect.keys()):\n                if not charselect[k]:\n                    del charselect[k]\n            for k, i in list(charselect.items()):\n                charselect[k] = rmbadname1(i)\n        elif typespec == 'type':\n            typename = re.match(r'\\s*\\(\\s*(?P<name>\\w+)\\s*\\)', selector, re.I)\n            if typename:\n                typename = typename.group('name')\n            else:\n                outmess('cracktypespec: no typename found in %s\\n' %\n                        (repr(typespec + selector)))\n        else:\n            outmess('cracktypespec: no selector used for %s\\n' %\n                    (repr(selector)))\n    return kindselect, charselect, typename",
  "smell": [
    {
      "smell_id": 4,
      "line_no": 17,
      "description": "The element is deleted from a container by a dynamically determined index."
    }
  ]
}