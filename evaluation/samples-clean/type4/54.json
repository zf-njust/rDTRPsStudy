{
  "code": "def write_renewal_config(o_filename: str, n_filename: str, archive_dir: str,\n                         target: Mapping[str, str],\n                         relevant_data: Mapping[str, Any]) -> configobj.ConfigObj:\n    \"\"\"Writes a renewal config file with the specified name and values.\n\n    :param str o_filename: Absolute path to the previous version of config file\n    :param str n_filename: Absolute path to the new destination of config file\n    :param str archive_dir: Absolute path to the archive directory\n    :param dict target: Maps ALL_FOUR to their symlink paths\n    :param dict relevant_data: Renewal configuration options to save\n\n    :returns: Configuration object for the new config file\n    :rtype: configobj.ConfigObj\n\n    \"\"\"\n    config = configobj.ConfigObj(o_filename, encoding='utf-8', default_encoding='utf-8')\n    config[\"version\"] = certbot.__version__\n    config[\"archive_dir\"] = archive_dir\n    for kind in ALL_FOUR:\n        config[kind] = target[kind]\n\n    if \"renewalparams\" not in config:\n        config[\"renewalparams\"] = {}\n        config.comments[\"renewalparams\"] = [\"\",\n                                            \"Options used in \"\n                                            \"the renewal process\"]\n\n    config[\"renewalparams\"].update(relevant_data)\n\n    for k in config[\"renewalparams\"]:\n        if k not in relevant_data:\n            del config[\"renewalparams\"][k]\n\n    if \"renew_before_expiry\" not in config:\n        default_interval = constants.RENEWER_DEFAULTS[\"renew_before_expiry\"]\n        config.initial_comment = [\"renew_before_expiry = \" + default_interval]\n\n    # TODO: add human-readable comments explaining other available\n    #       parameters\n    logger.debug(\"Writing new config %s.\", n_filename)\n\n    # Ensure that the file exists\n    with open(n_filename, 'a'):\n        pass\n\n    # Copy permissions from the old version of the file, if it exists.\n    if os.path.exists(o_filename):\n        current_permissions = stat.S_IMODE(os.lstat(o_filename).st_mode)\n        filesystem.chmod(n_filename, current_permissions)\n\n    with open(n_filename, \"wb\") as f:\n        config.write(outfile=f)\n    return config",
  "smell": [
    {
      "smell_id": 4,
      "line_no": 32,
      "description": "The element is deleted from a container by a dynamically determined index."
    }
  ]
}