{
  "code": "def fetch_value(self):\n        # type: () -> None\n        # Do we determine a simple key?\n        if self.flow_level in self.possible_simple_keys:\n            # Add KEY.\n            key = self.possible_simple_keys[self.flow_level]\n            del self.possible_simple_keys[self.flow_level]\n            self.tokens.insert(\n                key.token_number - self.tokens_taken, KeyToken(key.mark, key.mark)\n            )\n\n            # If this key starts a new block mapping, we need to add\n            # BLOCK-MAPPING-START.\n            if not self.flow_level:\n                if self.add_indent(key.column):\n                    self.tokens.insert(\n                        key.token_number - self.tokens_taken,\n                        BlockMappingStartToken(key.mark, key.mark),\n                    )\n\n            # There cannot be two simple keys one after another.\n            self.allow_simple_key = False\n\n        # It must be a part of a complex key.\n        else:\n\n            # Block context needs additional checks.\n            # (Do we really need them? They will be caught by the parser\n            # anyway.)\n            if not self.flow_level:\n\n                # We are allowed to start a complex value if and only if\n                # we can start a simple key.\n                if not self.allow_simple_key:\n                    raise ScannerError(\n                        None,\n                        None,\n                        'mapping values are not allowed here',\n                        self.reader.get_mark(),\n                    )\n\n            # If this value starts a new block mapping, we need to add\n            # BLOCK-MAPPING-START.  It will be detected as an error later by\n            # the parser.\n            if not self.flow_level:\n                if self.add_indent(self.reader.column):\n                    mark = self.reader.get_mark()\n                    self.tokens.append(BlockMappingStartToken(mark, mark))\n\n            # Simple keys are allowed after ':' in the block context.\n            self.allow_simple_key = not self.flow_level\n\n            # Reset possible simple key on the current level.\n            self.remove_possible_simple_key()\n\n        # Add VALUE.\n        start_mark = self.reader.get_mark()\n        self.reader.forward()\n        end_mark = self.reader.get_mark()\n        self.tokens.append(ValueToken(start_mark, end_mark))",
  "smell": [
    {
      "smell_id": 4,
      "line_no": 7,
      "description": "The element is deleted from a container by a dynamically determined index."
    }
  ]
}