{
  "code": "def set_visible_views(self, indices, data, viewport):\n        view_opts = self.view_opts\n        new, remaining, old = self.recycleview.view_adapter.set_visible_views(\n            indices, data, view_opts)\n\n        remove = self.remove_widget\n        view_indices = self.view_indices\n        for _, widget in old:\n            remove(widget)\n            del view_indices[widget]\n\n        # first update the sizing info so that when we update the size\n        # the widgets are not bound and won't trigger a re-layout\n        refresh_view_layout = self.refresh_view_layout\n        for index, widget in new:\n            # make sure widget is added first so that any sizing updates\n            # will be recorded\n            opt = view_opts[index].copy()\n            del opt['width_none']\n            del opt['height_none']\n            refresh_view_layout(index, opt, widget, viewport)\n\n        # then add all the visible widgets, which binds size/size_hint\n        add = self.add_widget\n        for index, widget in new:\n            # add to the container if it's not already done\n            view_indices[widget] = index\n            if widget.parent is None:\n                add(widget)\n\n        # finally, make sure if the size has changed to cause a re-layout\n        changed = False\n        for index, widget in new:\n            opt = view_opts[index]\n            if (changed or widget.size == opt['size'] and\n                    widget.size_hint == opt['size_hint'] and\n                    widget.size_hint_min == opt['size_hint_min'] and\n                    widget.size_hint_max == opt['size_hint_max'] and\n                    widget.pos_hint == opt['pos_hint']):\n                continue\n            changed = True\n\n        if changed:\n            # we could use LayoutChangeException here, but refresh_views in rv\n            # needs to be updated to watch for it in the layout phase\n            self._size_needs_update = True\n            self.recycleview.refresh_from_layout(view_size=True)",
  "smell": [
    {
      "smell_id": 4,
      "line_no": 10,
      "description": "The element is deleted from a container by a dynamically determined index."
    }
  ]
}