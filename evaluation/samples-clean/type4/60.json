{
  "code": "def update(self):\n        \"\"\"Update Docker stats using the input method.\"\"\"\n        # Reset stats\n        self.reset()\n\n        # Get the current Docker API client\n        if not self.docker_client:\n            # First time, try to connect to the server\n            self.docker_client = self.connect()\n            if self.docker_client is None:\n                global docker_tag\n                docker_tag = False\n\n        # The Docker-py lib is mandatory\n        if not docker_tag or (self.args is not None and self.args.disable_docker):\n            return self.stats\n\n        if self.input_method == 'local':\n            # Update stats\n\n            # Docker version\n            # Exemple: {\n            #     \"KernelVersion\": \"3.16.4-tinycore64\",\n            #     \"Arch\": \"amd64\",\n            #     \"ApiVersion\": \"1.15\",\n            #     \"Version\": \"1.3.0\",\n            #     \"GitCommit\": \"c78088f\",\n            #     \"Os\": \"linux\",\n            #     \"GoVersion\": \"go1.3.3\"\n            # }\n            try:\n                self.stats['version'] = self.docker_client.version()\n            except Exception as e:\n                # Correct issue#649\n                logger.error(\"{0} plugin - Cannot get Docker version ({1})\".format(self.plugin_name, e))\n                return self.stats\n\n            # Container globals information\n            # Example: [{u'Status': u'Up 36 seconds',\n            #            u'Created': 1420378904,\n            #            u'Image': u'nginx:1',\n            #            u'Ports': [{u'Type': u'tcp', u'PrivatePort': 443},\n            #                       {u'IP': u'0.0.0.0', u'Type': u'tcp', u'PublicPort': 8080, u'PrivatePort': 80}],\n            #            u'Command': u\"nginx -g 'daemon off;'\",\n            #            u'Names': [u'/webstack_nginx_1'],\n            #            u'Id': u'b0da859e84eb4019cf1d965b15e9323006e510352c402d2f442ea632d61faaa5'}]\n\n            # Update current containers list\n            try:\n                self.stats['containers'] = self.docker_client.containers() or []\n            except Exception as e:\n                logger.error(\"{0} plugin - Cannot get containers list ({1})\".format(self.plugin_name, e))\n                return self.stats\n\n            # Start new thread for new container\n            for container in self.stats['containers']:\n                if container['Id'] not in self.thread_list:\n                    # Thread did not exist in the internal dict\n                    # Create it and add it to the internal dict\n                    logger.debug(\"{0} plugin - Create thread for container {1}\".format(self.plugin_name, container['Id'][:12]))\n                    t = ThreadDockerGrabber(self.docker_client, container['Id'])\n                    self.thread_list[container['Id']] = t\n                    t.start()\n\n            # Stop threads for non-existing containers\n            nonexisting_containers = list(set(self.thread_list.keys()) - set([c['Id'] for c in self.stats['containers']]))\n            for container_id in nonexisting_containers:\n                # Stop the thread\n                logger.debug(\"{0} plugin - Stop thread for old container {1}\".format(self.plugin_name, container_id[:12]))\n                self.thread_list[container_id].stop()\n                # Delete the item from the dict\n                del(self.thread_list[container_id])\n\n            # Get stats for all containers\n            for container in self.stats['containers']:\n                # The key is the container name and not the Id\n                container['key'] = self.get_key()\n\n                # Export name (first name in the list, without the /)\n                container['name'] = container['Names'][0][1:]\n\n                container['cpu'] = self.get_docker_cpu(container['Id'], self.thread_list[container['Id']].stats)\n                container['memory'] = self.get_docker_memory(container['Id'], self.thread_list[container['Id']].stats)\n                container['network'] = self.get_docker_network(container['Id'], self.thread_list[container['Id']].stats)\n                container['io'] = self.get_docker_io(container['Id'], self.thread_list[container['Id']].stats)\n\n        elif self.input_method == 'snmp':\n            # Update stats using SNMP\n            # Not available\n            pass\n\n        return self.stats",
  "smell": [
    {
      "smell_id": 4,
      "line_no": 72,
      "description": "The element is deleted from a container by a dynamically determined index."
    }
  ]
}