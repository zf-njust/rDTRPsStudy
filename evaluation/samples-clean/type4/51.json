{
  "code": "def run_compile():\n    \"\"\"\n    Do it all in one call!\n    \"\"\"\n    import tempfile\n\n    i = sys.argv.index('-c')\n    del sys.argv[i]\n\n    remove_build_dir = 0\n    try:\n        i = sys.argv.index('--build-dir')\n    except ValueError:\n        i = None\n    if i is not None:\n        build_dir = sys.argv[i + 1]\n        del sys.argv[i + 1]\n        del sys.argv[i]\n    else:\n        remove_build_dir = 1\n        build_dir = tempfile.mkdtemp()\n\n    _reg1 = re.compile(r'[-][-]link[-]')\n    sysinfo_flags = [_m for _m in sys.argv[1:] if _reg1.match(_m)]\n    sys.argv = [_m for _m in sys.argv if _m not in sysinfo_flags]\n    if sysinfo_flags:\n        sysinfo_flags = [f[7:] for f in sysinfo_flags]\n\n    _reg2 = re.compile(\n        r'[-][-]((no[-]|)(wrap[-]functions|lower)|debug[-]capi|quiet)|[-]include')\n    f2py_flags = [_m for _m in sys.argv[1:] if _reg2.match(_m)]\n    sys.argv = [_m for _m in sys.argv if _m not in f2py_flags]\n    f2py_flags2 = []\n    fl = 0\n    for a in sys.argv[1:]:\n        if a in ['only:', 'skip:']:\n            fl = 1\n        elif a == ':':\n            fl = 0\n        if fl or a == ':':\n            f2py_flags2.append(a)\n    if f2py_flags2 and f2py_flags2[-1] != ':':\n        f2py_flags2.append(':')\n    f2py_flags.extend(f2py_flags2)\n\n    sys.argv = [_m for _m in sys.argv if _m not in f2py_flags2]\n    _reg3 = re.compile(\n        r'[-][-]((f(90)?compiler([-]exec|)|compiler)=|help[-]compiler)')\n    flib_flags = [_m for _m in sys.argv[1:] if _reg3.match(_m)]\n    sys.argv = [_m for _m in sys.argv if _m not in flib_flags]\n    _reg4 = re.compile(\n        r'[-][-]((f(77|90)(flags|exec)|opt|arch)=|(debug|noopt|noarch|help[-]fcompiler))')\n    fc_flags = [_m for _m in sys.argv[1:] if _reg4.match(_m)]\n    sys.argv = [_m for _m in sys.argv if _m not in fc_flags]\n\n    if 1:\n        del_list = []\n        for s in flib_flags:\n            v = '--fcompiler='\n            if s[:len(v)] == v:\n                from numpy.distutils import fcompiler\n                fcompiler.load_all_fcompiler_classes()\n                allowed_keys = list(fcompiler.fcompiler_class.keys())\n                nv = ov = s[len(v):].lower()\n                if ov not in allowed_keys:\n                    vmap = {}  # XXX\n                    try:\n                        nv = vmap[ov]\n                    except KeyError:\n                        if ov not in vmap.values():\n                            print('Unknown vendor: \"%s\"' % (s[len(v):]))\n                    nv = ov\n                i = flib_flags.index(s)\n                flib_flags[i] = '--fcompiler=' + nv\n                continue\n        for s in del_list:\n            i = flib_flags.index(s)\n            del flib_flags[i]\n        assert len(flib_flags) <= 2, repr(flib_flags)\n\n    _reg5 = re.compile(r'[-][-](verbose)')\n    setup_flags = [_m for _m in sys.argv[1:] if _reg5.match(_m)]\n    sys.argv = [_m for _m in sys.argv if _m not in setup_flags]\n\n    if '--quiet' in f2py_flags:\n        setup_flags.append('--quiet')\n\n    modulename = 'untitled'\n    sources = sys.argv[1:]\n\n    for optname in ['--include_paths', '--include-paths']:\n        if optname in sys.argv:\n            i = sys.argv.index(optname)\n            f2py_flags.extend(sys.argv[i:i + 2])\n            del sys.argv[i + 1], sys.argv[i]\n            sources = sys.argv[1:]\n\n    if '-m' in sys.argv:\n        i = sys.argv.index('-m')\n        modulename = sys.argv[i + 1]\n        del sys.argv[i + 1], sys.argv[i]\n        sources = sys.argv[1:]\n    else:\n        from numpy.distutils.command.build_src import get_f2py_modulename\n        pyf_files, sources = filter_files('', '[.]pyf([.]src|)', sources)\n        sources = pyf_files + sources\n        for f in pyf_files:\n            modulename = get_f2py_modulename(f)\n            if modulename:\n                break\n\n    extra_objects, sources = filter_files('', '[.](o|a|so)', sources)\n    include_dirs, sources = filter_files('-I', '', sources, remove_prefix=1)\n    library_dirs, sources = filter_files('-L', '', sources, remove_prefix=1)\n    libraries, sources = filter_files('-l', '', sources, remove_prefix=1)\n    undef_macros, sources = filter_files('-U', '', sources, remove_prefix=1)\n    define_macros, sources = filter_files('-D', '', sources, remove_prefix=1)\n    for i in range(len(define_macros)):\n        name_value = define_macros[i].split('=', 1)\n        if len(name_value) == 1:\n            name_value.append(None)\n        if len(name_value) == 2:\n            define_macros[i] = tuple(name_value)\n        else:\n            print('Invalid use of -D:', name_value)\n\n    from numpy.distutils.system_info import get_info\n\n    num_info = {}\n    if num_info:\n        include_dirs.extend(num_info.get('include_dirs', []))\n\n    from numpy.distutils.core import setup, Extension\n    ext_args = {'name': modulename, 'sources': sources,\n                'include_dirs': include_dirs,\n                'library_dirs': library_dirs,\n                'libraries': libraries,\n                'define_macros': define_macros,\n                'undef_macros': undef_macros,\n                'extra_objects': extra_objects,\n                'f2py_options': f2py_flags,\n                }\n\n    if sysinfo_flags:\n        from numpy.distutils.misc_util import dict_append\n        for n in sysinfo_flags:\n            i = get_info(n)\n            if not i:\n                outmess('No %s resources found in system'\n                        ' (try `f2py --help-link`)\\n' % (repr(n)))\n            dict_append(ext_args, **i)\n\n    ext = Extension(**ext_args)\n    sys.argv = [sys.argv[0]] + setup_flags\n    sys.argv.extend(['build',\n                     '--build-temp', build_dir,\n                     '--build-base', build_dir,\n                     '--build-platlib', '.'])\n    if fc_flags:\n        sys.argv.extend(['config_fc'] + fc_flags)\n    if flib_flags:\n        sys.argv.extend(['build_ext'] + flib_flags)\n\n    setup(ext_modules=[ext])\n\n    if remove_build_dir and os.path.exists(build_dir):\n        import shutil\n        outmess('Removing build directory %s\\n' % (build_dir))\n        shutil.rmtree(build_dir)",
  "smell": [
    {
      "smell_id": 4,
      "line_no": 101,
      "description": "The element is deleted from a container by a dynamically determined index."
    }
  ]
}