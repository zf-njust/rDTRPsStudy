{
  "code": "def _real_set(self, obj, old, value, hint=None, setter=None):\n        ''' Internal implementation helper to set property values.\n\n        This function handles bookkeeping around noting whether values have\n        been explicitly set, etc.\n\n        Args:\n            obj (HasProps)\n                The object the property is being set on.\n\n            old (obj) :\n                The previous value of the property to compare\n\n            hint (event hint or None, optional)\n                An optional update event hint, e.g. ``ColumnStreamedEvent``\n                (default: None)\n\n                Update event hints are usually used at times when better\n                update performance can be obtained by special-casing in\n                some way (e.g. streaming or patching column data sources)\n\n            setter (ClientSession or ServerSession or None, optional) :\n                This is used to prevent \"boomerang\" updates to Bokeh apps.\n                (default: None)\n\n                In the context of a Bokeh server application, incoming updates\n                to properties will be annotated with the session that is\n                doing the updating. This value is propagated through any\n                subsequent change notifications that the update triggers.\n                The session can compare the event setter to itself, and\n                suppress any updates that originate from itself.\n\n        Returns:\n            None\n\n        '''\n        # Normally we want a \"no-op\" if the new value and old value are identical\n        # but some hinted events are in-place. This check will allow those cases\n        # to continue on to the notification machinery\n        if self.property.matches(value, old) and (hint is None):\n            return\n\n        was_set = self.name in obj._property_values\n\n        # \"old\" is the logical old value, but it may not be the actual current\n        # attribute value if our value was mutated behind our back and we got\n        # _notify_mutated.\n        if was_set:\n            old_attr_value = obj._property_values[self.name]\n        else:\n            old_attr_value = old\n\n        if old_attr_value is not value:\n            if isinstance(old_attr_value, PropertyValueContainer):\n                old_attr_value._unregister_owner(obj, self)\n            if isinstance(value, PropertyValueContainer):\n                value._register_owner(obj, self)\n\n            if self.name in obj._unstable_themed_values:\n                del obj._unstable_themed_values[self.name]\n\n            if self.name in obj._unstable_default_values:\n                del obj._unstable_default_values[self.name]\n\n            obj._property_values[self.name] = value\n\n        # for notification purposes, \"old\" should be the logical old\n        self._trigger(obj, old, value, hint=hint, setter=setter)",
  "smell": [
    {
      "smell_id": 4,
      "line_no": 60,
      "description": "The element is deleted from a container by a dynamically determined index."
    }
  ]
}