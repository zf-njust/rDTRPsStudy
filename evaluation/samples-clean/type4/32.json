{
  "code": "def do_lock(\n    project,\n    system=False,\n    clear=False,\n    pre=False,\n    write=True,\n    pypi_mirror=None,\n    categories=None,\n):\n    \"\"\"Executes the freeze functionality.\"\"\"\n    if not pre:\n        pre = project.settings.get(\"allow_prereleases\")\n    # Cleanup lockfile.\n    if not categories:\n        lockfile_categories = project.get_package_categories(for_lockfile=True)\n    else:\n        lockfile_categories = categories.copy()\n        if \"dev-packages\" in categories:\n            lockfile_categories.remove(\"dev-packages\")\n            lockfile_categories.insert(0, \"develop\")\n        if \"packages\" in categories:\n            lockfile_categories.remove(\"packages\")\n            lockfile_categories.insert(0, \"default\")\n    # Create the lockfile.\n    lockfile = project.lockfile(categories=lockfile_categories)\n    for category in lockfile_categories:\n        for k, v in lockfile.get(category, {}).copy().items():\n            if not hasattr(v, \"keys\"):\n                del lockfile[category][k]\n\n    # Resolve package to generate constraints before resolving other categories\n    for category in lockfile_categories:\n        pipfile_category = get_pipfile_category_using_lockfile_section(category)\n        if project.pipfile_exists:\n            packages = project.parsed_pipfile.get(pipfile_category, {})\n        else:\n            packages = project.get_pipfile_section(pipfile_category)\n\n        if write:\n            # Alert the user of progress.\n            click.echo(\n                \"{} {} {}\".format(\n                    click.style(\"Locking\"),\n                    click.style(f\"[{pipfile_category}]\", fg=\"yellow\"),\n                    click.style(\"dependencies...\"),\n                ),\n                err=True,\n            )\n\n        # Prune old lockfile category as new one will be created.\n        try:\n            del lockfile[category]\n        except KeyError:\n            pass\n\n        from pipenv.utils.resolver import venv_resolve_deps\n\n        # Mutates the lockfile\n        venv_resolve_deps(\n            packages,\n            which=project._which,\n            project=project,\n            category=pipfile_category,\n            clear=clear,\n            pre=pre,\n            allow_global=system,\n            pypi_mirror=pypi_mirror,\n            pipfile=packages,\n            lockfile=lockfile,\n        )\n\n    # Overwrite any category packages with default packages.\n    for category in lockfile_categories:\n        if category == \"default\":\n            pass\n        if lockfile.get(category):\n            lockfile[category].update(\n                overwrite_with_default(lockfile.get(\"default\", {}), lockfile[category])\n            )\n    if write:\n        lockfile.update({\"_meta\": project.get_lockfile_meta()})\n        project.write_lockfile(lockfile)\n        click.echo(\n            \"{}\".format(\n                click.style(\n                    f\"Updated Pipfile.lock ({project.get_lockfile_hash()})!\",\n                    bold=True,\n                )\n            ),\n            err=True,\n        )\n    else:\n        return lockfile",
  "smell": [
    {
      "smell_id": 4,
      "line_no": 52,
      "description": "The element is deleted from a container by a dynamically determined index."
    }
  ]
}