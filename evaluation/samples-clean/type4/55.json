{
  "code": "def applyrules(rules, d, var={}):\n    ret = {}\n    if isinstance(rules, list):\n        for r in rules:\n            rr = applyrules(r, d, var)\n            ret = dictappend(ret, rr)\n            if '_break' in rr:\n                break\n        return ret\n    if '_check' in rules and (not rules['_check'](var)):\n        return ret\n    if 'need' in rules:\n        res = applyrules({'needs': rules['need']}, d, var)\n        if 'needs' in res:\n            cfuncs.append_needs(res['needs'])\n\n    for k in rules.keys():\n        if k == 'separatorsfor':\n            ret[k] = rules[k]\n            continue\n        if isinstance(rules[k], str):\n            ret[k] = replace(rules[k], d)\n        elif isinstance(rules[k], list):\n            ret[k] = []\n            for i in rules[k]:\n                ar = applyrules({k: i}, d, var)\n                if k in ar:\n                    ret[k].append(ar[k])\n        elif k[0] == '_':\n            continue\n        elif isinstance(rules[k], dict):\n            ret[k] = []\n            for k1 in rules[k].keys():\n                if isinstance(k1, types.FunctionType) and k1(var):\n                    if isinstance(rules[k][k1], list):\n                        for i in rules[k][k1]:\n                            if isinstance(i, dict):\n                                res = applyrules({'supertext': i}, d, var)\n                                if 'supertext' in res:\n                                    i = res['supertext']\n                                else:\n                                    i = ''\n                            ret[k].append(replace(i, d))\n                    else:\n                        i = rules[k][k1]\n                        if isinstance(i, dict):\n                            res = applyrules({'supertext': i}, d)\n                            if 'supertext' in res:\n                                i = res['supertext']\n                            else:\n                                i = ''\n                        ret[k].append(replace(i, d))\n        else:\n            errmess('applyrules: ignoring rule %s.\\n' % repr(rules[k]))\n        if isinstance(ret[k], list):\n            if len(ret[k]) == 1:\n                ret[k] = ret[k][0]\n            if ret[k] == []:\n                del ret[k]\n    return ret",
  "smell": [
    {
      "smell_id": 4,
      "line_no": 59,
      "description": "The element is deleted from a container by a dynamically determined index."
    }
  ]
}