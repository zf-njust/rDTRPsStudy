{
  "code": "def create_session_if_needed(self, session_id, request=None):\n        # this is because empty session_ids would be \"falsey\" and\n        # potentially open up a way for clients to confuse us\n        if len(session_id) == 0:\n            raise ProtocolError(\"Session ID must not be empty\")\n\n        if session_id not in self._sessions and \\\n           session_id not in self._pending_sessions:\n            future = self._pending_sessions[session_id] = gen.Future()\n\n            doc = Document()\n\n            session_context = BokehSessionContext(session_id,\n                                                  self.server_context,\n                                                  doc)\n            # using private attr so users only have access to a read-only property\n            session_context._request = _RequestProxy(request)\n\n            # expose the session context to the document\n            # use the _attribute to set the public property .session_context\n            doc._session_context = session_context\n\n\n            try:\n                yield yield_for_all_futures(self._application.on_session_created(session_context))\n            except Exception as e:\n                log.error(\"Failed to run session creation hooks %r\", e, exc_info=True)\n\n            self._application.initialize_document(doc)\n\n            session = ServerSession(session_id, doc, io_loop=self._loop)\n            del self._pending_sessions[session_id]\n            self._sessions[session_id] = session\n            session_context._set_session(session)\n            self._session_contexts[session_id] = session_context\n\n            # notify anyone waiting on the pending session\n            future.set_result(session)\n\n        if session_id in self._pending_sessions:\n            # another create_session_if_needed is working on\n            # creating this session\n            session = yield self._pending_sessions[session_id]\n        else:\n            session = self._sessions[session_id]\n\n        raise gen.Return(session)",
  "smell": [
    {
      "smell_id": 4,
      "line_no": 32,
      "description": "The element is deleted from a container by a dynamically determined index."
    }
  ]
}