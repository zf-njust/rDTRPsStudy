{
  "code": "def _process(self, t, request_number, msg):\n        self._log(DEBUG, \"Request: {}\".format(CMD_NAMES[t]))\n        if t == CMD_OPEN:\n            path = msg.get_text()\n            flags = self._convert_pflags(msg.get_int())\n            attr = SFTPAttributes._from_msg(msg)\n            self._send_handle_response(\n                request_number, self.server.open(path, flags, attr)\n            )\n        elif t == CMD_CLOSE:\n            handle = msg.get_binary()\n            if handle in self.folder_table:\n                del self.folder_table[handle]\n                self._send_status(request_number, SFTP_OK)\n                return\n            if handle in self.file_table:\n                self.file_table[handle].close()\n                del self.file_table[handle]\n                self._send_status(request_number, SFTP_OK)\n                return\n            self._send_status(\n                request_number, SFTP_BAD_MESSAGE, \"Invalid handle\"\n            )\n        elif t == CMD_READ:\n            handle = msg.get_binary()\n            offset = msg.get_int64()\n            length = msg.get_int()\n            if handle not in self.file_table:\n                self._send_status(\n                    request_number, SFTP_BAD_MESSAGE, \"Invalid handle\"\n                )\n                return\n            data = self.file_table[handle].read(offset, length)\n            if isinstance(data, (bytes, str)):\n                if len(data) == 0:\n                    self._send_status(request_number, SFTP_EOF)\n                else:\n                    self._response(request_number, CMD_DATA, data)\n            else:\n                self._send_status(request_number, data)\n        elif t == CMD_WRITE:\n            handle = msg.get_binary()\n            offset = msg.get_int64()\n            data = msg.get_binary()\n            if handle not in self.file_table:\n                self._send_status(\n                    request_number, SFTP_BAD_MESSAGE, \"Invalid handle\"\n                )\n                return\n            self._send_status(\n                request_number, self.file_table[handle].write(offset, data)\n            )\n        elif t == CMD_REMOVE:\n            path = msg.get_text()\n            self._send_status(request_number, self.server.remove(path))\n        elif t == CMD_RENAME:\n            oldpath = msg.get_text()\n            newpath = msg.get_text()\n            self._send_status(\n                request_number, self.server.rename(oldpath, newpath)\n            )\n        elif t == CMD_MKDIR:\n            path = msg.get_text()\n            attr = SFTPAttributes._from_msg(msg)\n            self._send_status(request_number, self.server.mkdir(path, attr))\n        elif t == CMD_RMDIR:\n            path = msg.get_text()\n            self._send_status(request_number, self.server.rmdir(path))\n        elif t == CMD_OPENDIR:\n            path = msg.get_text()\n            self._open_folder(request_number, path)\n            return\n        elif t == CMD_READDIR:\n            handle = msg.get_binary()\n            if handle not in self.folder_table:\n                self._send_status(\n                    request_number, SFTP_BAD_MESSAGE, \"Invalid handle\"\n                )\n                return\n            folder = self.folder_table[handle]\n            self._read_folder(request_number, folder)\n        elif t == CMD_STAT:\n            path = msg.get_text()\n            resp = self.server.stat(path)\n            if issubclass(type(resp), SFTPAttributes):\n                self._response(request_number, CMD_ATTRS, resp)\n            else:\n                self._send_status(request_number, resp)\n        elif t == CMD_LSTAT:\n            path = msg.get_text()\n            resp = self.server.lstat(path)\n            if issubclass(type(resp), SFTPAttributes):\n                self._response(request_number, CMD_ATTRS, resp)\n            else:\n                self._send_status(request_number, resp)\n        elif t == CMD_FSTAT:\n            handle = msg.get_binary()\n            if handle not in self.file_table:\n                self._send_status(\n                    request_number, SFTP_BAD_MESSAGE, \"Invalid handle\"\n                )\n                return\n            resp = self.file_table[handle].stat()\n            if issubclass(type(resp), SFTPAttributes):\n                self._response(request_number, CMD_ATTRS, resp)\n            else:\n                self._send_status(request_number, resp)\n        elif t == CMD_SETSTAT:\n            path = msg.get_text()\n            attr = SFTPAttributes._from_msg(msg)\n            self._send_status(request_number, self.server.chattr(path, attr))\n        elif t == CMD_FSETSTAT:\n            handle = msg.get_binary()\n            attr = SFTPAttributes._from_msg(msg)\n            if handle not in self.file_table:\n                self._response(\n                    request_number, SFTP_BAD_MESSAGE, \"Invalid handle\"\n                )\n                return\n            self._send_status(\n                request_number, self.file_table[handle].chattr(attr)\n            )\n        elif t == CMD_READLINK:\n            path = msg.get_text()\n            resp = self.server.readlink(path)\n            if isinstance(resp, (bytes, str)):\n                self._response(\n                    request_number, CMD_NAME, 1, resp, \"\", SFTPAttributes()\n                )\n            else:\n                self._send_status(request_number, resp)\n        elif t == CMD_SYMLINK:\n            # the sftp 2 draft is incorrect here!\n            # path always follows target_path\n            target_path = msg.get_text()\n            path = msg.get_text()\n            self._send_status(\n                request_number, self.server.symlink(target_path, path)\n            )\n        elif t == CMD_REALPATH:\n            path = msg.get_text()\n            rpath = self.server.canonicalize(path)\n            self._response(\n                request_number, CMD_NAME, 1, rpath, \"\", SFTPAttributes()\n            )\n        elif t == CMD_EXTENDED:\n            tag = msg.get_text()\n            if tag == \"check-file\":\n                self._check_file(request_number, msg)\n            elif tag == \"posix-rename@openssh.com\":\n                oldpath = msg.get_text()\n                newpath = msg.get_text()\n                self._send_status(\n                    request_number, self.server.posix_rename(oldpath, newpath)\n                )\n            else:\n                self._send_status(request_number, SFTP_OP_UNSUPPORTED)\n        else:\n            self._send_status(request_number, SFTP_OP_UNSUPPORTED)",
  "smell": [
    {
      "smell_id": 4,
      "line_no": 18,
      "description": "The element is deleted from a container by a dynamically determined index."
    }
  ]
}