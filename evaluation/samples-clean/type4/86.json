{
  "code": "def do_uninstall(\n    project,\n    packages=None,\n    editable_packages=None,\n    python=False,\n    system=False,\n    lock=False,\n    all_dev=False,\n    all=False,\n    pypi_mirror=None,\n    ctx=None,\n    categories=None,\n):\n    # Automatically use an activated virtualenv.\n    if project.s.PIPENV_USE_SYSTEM:\n        system = True\n    # Ensure that virtualenv is available.\n    ensure_project(project, python=python, pypi_mirror=pypi_mirror)\n    # Uninstall all dependencies, if --all was provided.\n    if not any([packages, editable_packages, all_dev, all]):\n        raise exceptions.PipenvUsageError(\"No package provided!\", ctx=ctx)\n    if not categories:\n        categories = project.get_package_categories(for_lockfile=True)\n    editable_pkgs = [\n        Requirement.from_line(f\"-e {p}\").name for p in editable_packages if p\n    ]\n    packages += editable_pkgs\n    package_names = {p for p in packages if p}\n    package_map = {canonicalize_name(p): p for p in packages if p}\n    installed_package_names = project.installed_package_names\n    if project.lockfile_exists:\n        project_pkg_names = project.lockfile_package_names\n    else:\n        project_pkg_names = project.pipfile_package_names\n    # Uninstall [dev-packages], if --dev was provided.\n    if all_dev:\n        if (\n            \"dev-packages\" not in project.parsed_pipfile\n            and not project_pkg_names[\"develop\"]\n        ):\n            click.echo(\n                click.style(\n                    \"No {} to uninstall.\".format(\n                        click.style(\"[dev-packages]\", fg=\"yellow\")\n                    ),\n                    bold=True,\n                )\n            )\n            return\n        click.secho(\n            click.style(\n                \"Un-installing {}...\".format(click.style(\"[dev-packages]\", fg=\"yellow\")),\n                bold=True,\n            )\n        )\n        preserve_packages = set()\n        dev_packages = set()\n        for category in project.get_package_categories(for_lockfile=True):\n            if category == \"develop\":\n                dev_packages |= set(project_pkg_names[category])\n            else:\n                preserve_packages |= set(project_pkg_names[category])\n\n        package_names = dev_packages - preserve_packages\n\n    # Remove known \"bad packages\" from the list.\n    bad_pkgs = get_canonical_names(BAD_PACKAGES)\n    ignored_packages = bad_pkgs & set(list(package_map.keys()))\n    for ignored_pkg in get_canonical_names(ignored_packages):\n        if project.s.is_verbose():\n            click.echo(f\"Ignoring {ignored_pkg}.\", err=True)\n        package_names.discard(package_map[ignored_pkg])\n\n    used_packages = project_pkg_names[\"combined\"] & installed_package_names\n    failure = False\n    if all:\n        click.echo(\n            click.style(\n                \"Un-installing all {} and {}...\".format(\n                    click.style(\"[dev-packages]\", fg=\"yellow\"),\n                    click.style(\"[packages]\", fg=\"yellow\"),\n                ),\n                bold=True,\n            )\n        )\n        do_purge(project, bare=False, allow_global=system)\n        sys.exit(0)\n\n    selected_pkg_map = {canonicalize_name(p): p for p in package_names}\n    packages_to_remove = [\n        package_name\n        for normalized, package_name in selected_pkg_map.items()\n        if normalized in (used_packages - bad_pkgs)\n    ]\n    lockfile = project.get_or_create_lockfile(categories=categories)\n    for category in categories:\n        category = get_lockfile_section_using_pipfile_category(category)\n        for normalized_name, package_name in selected_pkg_map.items():\n            if normalized_name in project.lockfile_content[category]:\n                click.echo(\n                    \"{} {} {} {}\".format(\n                        click.style(\"Removing\", fg=\"cyan\"),\n                        click.style(package_name, fg=\"green\"),\n                        click.style(\"from\", fg=\"cyan\"),\n                        click.style(\"Pipfile.lock...\", fg=\"white\"),\n                    )\n                )\n                if normalized_name in lockfile[category]:\n                    del lockfile[category][normalized_name]\n                lockfile.write()\n\n            pipfile_category = get_pipfile_category_using_lockfile_section(category)\n            if project.remove_package_from_pipfile(\n                package_name, category=pipfile_category\n            ):\n                click.secho(\n                    f\"Removed {package_name} from Pipfile category {pipfile_category}\",\n                    fg=\"green\",\n                )\n\n    for normalized_name, package_name in selected_pkg_map.items():\n        still_remains = False\n        for category in project.get_package_categories():\n            if project.get_package_name_in_pipfile(normalized_name, category=category):\n                still_remains = True\n        if not still_remains:\n            # Uninstall the package.\n            if package_name in packages_to_remove:\n                click.secho(\n                    f\"Uninstalling {click.style(package_name)}...\",\n                    fg=\"green\",\n                    bold=True,\n                )\n                with project.environment.activated():\n                    cmd = [\n                        project_python(project, system=system),\n                        get_runnable_pip(),\n                        \"uninstall\",\n                        package_name,\n                        \"-y\",\n                    ]\n                    c = run_command(cmd, is_verbose=project.s.is_verbose())\n                    click.secho(c.stdout, fg=\"cyan\")\n                    if c.returncode != 0:\n                        failure = True\n\n    if lock:\n        do_lock(project, system=system, pypi_mirror=pypi_mirror)\n    sys.exit(int(failure))",
  "smell": [
    {
      "smell_id": 4,
      "line_no": 109,
      "description": "The element is deleted from a container by a dynamically determined index."
    }
  ]
}