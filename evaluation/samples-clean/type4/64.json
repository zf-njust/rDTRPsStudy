{
  "code": "def postcrack(block, args=None, tab=''):\n    \"\"\"\n    TODO:\n          function return values\n          determine expression types if in argument list\n    \"\"\"\n    global usermodules, onlyfunctions\n\n    if isinstance(block, list):\n        gret = []\n        uret = []\n        for g in block:\n            setmesstext(g)\n            g = postcrack(g, tab=tab + '\\t')\n            # sort user routines to appear first\n            if 'name' in g and '__user__' in g['name']:\n                uret.append(g)\n            else:\n                gret.append(g)\n        return uret + gret\n    setmesstext(block)\n    if not isinstance(block, dict) and 'block' not in block:\n        raise Exception('postcrack: Expected block dictionary instead of ' +\n                        str(block))\n    if 'name' in block and not block['name'] == 'unknown_interface':\n        outmess('%sBlock: %s\\n' % (tab, block['name']), 0)\n    block = analyzeargs(block)\n    block = analyzecommon(block)\n    block['vars'] = analyzevars(block)\n    block['sortvars'] = sortvarnames(block['vars'])\n    if 'args' in block and block['args']:\n        args = block['args']\n    block['body'] = analyzebody(block, args, tab=tab)\n\n    userisdefined = []\n    if 'use' in block:\n        useblock = block['use']\n        for k in list(useblock.keys()):\n            if '__user__' in k:\n                userisdefined.append(k)\n    else:\n        useblock = {}\n    name = ''\n    if 'name' in block:\n        name = block['name']\n    # and not userisdefined: # Build a __user__ module\n    if 'externals' in block and block['externals']:\n        interfaced = []\n        if 'interfaced' in block:\n            interfaced = block['interfaced']\n        mvars = copy.copy(block['vars'])\n        if name:\n            mname = name + '__user__routines'\n        else:\n            mname = 'unknown__user__routines'\n        if mname in userisdefined:\n            i = 1\n            while '%s_%i' % (mname, i) in userisdefined:\n                i = i + 1\n            mname = '%s_%i' % (mname, i)\n        interface = {'block': 'interface', 'body': [],\n                     'vars': {}, 'name': name + '_user_interface'}\n        for e in block['externals']:\n            if e in interfaced:\n                edef = []\n                j = -1\n                for b in block['body']:\n                    j = j + 1\n                    if b['block'] == 'interface':\n                        i = -1\n                        for bb in b['body']:\n                            i = i + 1\n                            if 'name' in bb and bb['name'] == e:\n                                edef = copy.copy(bb)\n                                del b['body'][i]\n                                break\n                        if edef:\n                            if not b['body']:\n                                del block['body'][j]\n                            del interfaced[interfaced.index(e)]\n                            break\n                interface['body'].append(edef)\n            else:\n                if e in mvars and not isexternal(mvars[e]):\n                    interface['vars'][e] = mvars[e]\n        if interface['vars'] or interface['body']:\n            block['interfaced'] = interfaced\n            mblock = {'block': 'python module', 'body': [\n                interface], 'vars': {}, 'name': mname, 'interfaced': block['externals']}\n            useblock[mname] = {}\n            usermodules.append(mblock)\n    if useblock:\n        block['use'] = useblock\n    return block",
  "smell": [
    {
      "smell_id": 4,
      "line_no": 80,
      "description": "The element is deleted from a container by a dynamically determined index."
    }
  ]
}