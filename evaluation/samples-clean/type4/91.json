{
  "code": "def _replace_at(\n        self, idx: Union[int, Tuple[int]], new_key: Union[Key, str], value: Item\n    ) -> None:\n        value = _item(value)\n\n        if isinstance(idx, tuple):\n            for i in idx[1:]:\n                self._body[i] = (None, Null())\n\n            idx = idx[0]\n\n        k, v = self._body[idx]\n        if not isinstance(new_key, Key):\n            if (\n                isinstance(value, (AoT, Table)) != isinstance(v, (AoT, Table))\n                or new_key != k.key\n            ):\n                new_key = SingleKey(new_key)\n            else:  # Inherit the sep of the old key\n                new_key = k\n\n        del self._map[k]\n        self._map[new_key] = idx\n        if new_key != k:\n            dict.__delitem__(self, k)\n\n        if isinstance(value, (AoT, Table)) != isinstance(v, (AoT, Table)):\n            # new tables should appear after all non-table values\n            self.remove(k)\n            for i in range(idx, len(self._body)):\n                if isinstance(self._body[i][1], (AoT, Table)):\n                    self._insert_at(i, new_key, value)\n                    idx = i\n                    break\n            else:\n                idx = -1\n                self.append(new_key, value)\n        else:\n            # Copying trivia\n            if not isinstance(value, (Whitespace, AoT)):\n                value.trivia.indent = v.trivia.indent\n                value.trivia.comment_ws = value.trivia.comment_ws or v.trivia.comment_ws\n                value.trivia.comment = value.trivia.comment or v.trivia.comment\n                value.trivia.trail = v.trivia.trail\n            self._body[idx] = (new_key, value)\n\n        if hasattr(value, \"invalidate_display_name\"):\n            value.invalidate_display_name()  # type: ignore[attr-defined]\n\n        if isinstance(value, Table):\n            # Insert a cosmetic new line for tables if:\n            # - it does not have it yet OR is not followed by one\n            # - it is not the last item\n            last, _ = self._previous_item_with_index()\n            idx = last if idx < 0 else idx\n            has_ws = ends_with_whitespace(value)\n            next_ws = idx < last and isinstance(self._body[idx + 1][1], Whitespace)\n            if idx < last and not (next_ws or has_ws):\n                value.append(None, Whitespace(\"\\n\"))\n\n            dict.__setitem__(self, new_key.key, value.value)",
  "smell": [
    {
      "smell_id": 4,
      "line_no": 22,
      "description": "The element is deleted from a container by a dynamically determined index."
    }
  ]
}