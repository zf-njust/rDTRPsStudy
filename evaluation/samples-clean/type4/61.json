{
  "code": "def _get_font(self):\n        fontid = self._get_font_id()\n        if fontid not in pygame_cache:\n            # try first the file if it's a filename\n            font_handle = fontobject = None\n            fontname = self.options['font_name_r']\n            ext = fontname.rsplit('.', 1)\n            if len(ext) == 2:\n                # try to open the font if it has an extension\n                font_handle = open(fontname, 'rb')\n                fontobject = pygame.font.Font(font_handle,\n                                              int(self.options['font_size']))\n\n            # fallback to search a system font\n            if fontobject is None:\n                # try to search the font\n                font = pygame.font.match_font(\n                    self.options['font_name_r'].replace(' ', ''),\n                    bold=self.options['bold'],\n                    italic=self.options['italic'])\n\n                # fontobject\n                fontobject = pygame.font.Font(font,\n                                              int(self.options['font_size']))\n            pygame_cache[fontid] = fontobject\n            pygame_font_handles[fontid] = font_handle\n            pygame_cache_order.append(fontid)\n\n        # to prevent too much file open, limit the number of opened fonts to 64\n        while len(pygame_cache_order) > 64:\n            popid = pygame_cache_order.pop(0)\n            del pygame_cache[popid]\n            font_handle = pygame_font_handles.pop(popid)\n            if font_handle is not None:\n                font_handle.close()\n\n        return pygame_cache[fontid]",
  "smell": [
    {
      "smell_id": 4,
      "line_no": 32,
      "description": "The element is deleted from a container by a dynamically determined index."
    }
  ]
}