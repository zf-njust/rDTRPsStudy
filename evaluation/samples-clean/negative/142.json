{
    "code": "def _check_processes(self, ignore_running: bool):\n        if self.main_process_regexp == \"process_to_look_for\":\n            raise Exception(\n                \"The main_process_regexp must be set in the subclass to something different than\"\n                \" 'process_to_look_for'\"\n            )\n        # Confirm that nmain procss hasn't been launched.\n        # pgrep returns exit status 1 if no process matched.\n        # Use more specific regexps (^) to avoid matching pytest run when running specific method.\n        # For instance, we want to be able to do: pytest -k 'gunicorn'\n        airflow_internal_api_pids = self._find_all_processes(self.main_process_regexp)\n        gunicorn_pids = self._find_all_processes(r\"gunicorn: \")\n        if airflow_internal_api_pids or gunicorn_pids:\n            console.print(\"[blue]Some processes are still running\")\n            for pid in gunicorn_pids + airflow_internal_api_pids:\n                console.print(psutil.Process(pid).as_dict(attrs=[\"pid\", \"name\", \"cmdline\"]))\n            console.print(\"[blue]Here list of processes ends\")\n            if airflow_internal_api_pids:\n                console.print(f\"[yellow]Forcefully killing {self.main_process_regexp} processes\")\n                for pid in airflow_internal_api_pids:\n                    psutil.Process(pid).kill()\n            if gunicorn_pids:\n                console.print(\"[yellow]Forcefully killing all gunicorn processes\")\n                for pid in gunicorn_pids:\n                    psutil.Process(pid).kill()\n            if not ignore_running:\n                raise AssertionError(\n                    \"Background processes are running that prevent the test from passing successfully.\"\n                )",
    "smell": []
}