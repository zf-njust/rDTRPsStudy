{
    "code": "def deprecate_kwarg(old_arg_name, new_arg_name, mapping=None, stacklevel=2):\n    \"\"\"Decorator to deprecate a keyword argument of a function\n\n    Parameters\n    ----------\n    old_arg_name : str\n        Name of argument in function to deprecate\n    new_arg_name : str\n        Name of prefered argument in function\n    mapping : dict or callable\n        If mapping is present, use it to translate old arguments to\n        new arguments. A callable must do its own value checking;\n        values not found in a dict will be forwarded unchanged.\n\n    Examples\n    --------\n    The following deprecates 'cols', using 'columns' instead\n\n    >>> @deprecate_kwarg(old_arg_name='cols', new_arg_name='columns')\n    ... def f(columns=''):\n    ...     print(columns)\n    ...\n    >>> f(columns='should work ok')\n    should work ok\n    >>> f(cols='should raise warning')\n    FutureWarning: cols is deprecated, use columns instead\n      warnings.warn(msg, FutureWarning)\n    should raise warning\n    >>> f(cols='should error', columns=\"can\\'t pass do both\")\n    TypeError: Can only specify 'cols' or 'columns', not both\n    >>> @deprecate_kwarg('old', 'new', {'yes': True, 'no': False})\n    ... def f(new=False):\n    ...     print('yes!' if new else 'no!')\n    ...\n    >>> f(old='yes')\n    FutureWarning: old='yes' is deprecated, use new=True instead\n      warnings.warn(msg, FutureWarning)\n    yes!\n\n    \"\"\"\n    if mapping is not None and not hasattr(mapping, 'get') and \\\n            not callable(mapping):\n        raise TypeError(\"mapping from old to new argument values \"\n                        \"must be dict or callable!\")\n    def _deprecate_kwarg(func):\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            old_arg_value = kwargs.pop(old_arg_name, None)\n            if old_arg_value is not None:\n                if mapping is not None:\n                    if hasattr(mapping, 'get'):\n                        new_arg_value = mapping.get(old_arg_value,\n                                                    old_arg_value)\n                    else:\n                        new_arg_value = mapping(old_arg_value)\n                    msg = \"the %s=%r keyword is deprecated, \" \\\n                          \"use %s=%r instead\" % \\\n                          (old_arg_name, old_arg_value,\n                           new_arg_name, new_arg_value)\n                else:\n                    new_arg_value = old_arg_value\n                    msg = \"the '%s' keyword is deprecated, \" \\\n                          \"use '%s' instead\" % (old_arg_name, new_arg_name)\n\n                warnings.warn(msg, FutureWarning, stacklevel=stacklevel)\n                if kwargs.get(new_arg_name, None) is not None:\n                    msg = \"Can only specify '%s' or '%s', not both\" % \\\n                      (old_arg_name, new_arg_name)\n                    raise TypeError(msg)\n                else:\n                    kwargs[new_arg_name] = new_arg_value\n            return func(*args, **kwargs)\n        return wrapper\n    return _deprecate_kwarg",
    "smell": []
}