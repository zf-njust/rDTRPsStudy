{
    "code": "def initialize_options(self):\n        self.all = True\n        self._clean_me = []\n        self._clean_trees = []\n\n        base = pjoin('pandas','src')\n        dt = pjoin(base,'datetime')\n        src = base\n        parser = pjoin(base,'parser')\n        ujson_python = pjoin(base,'ujson','python')\n        ujson_lib = pjoin(base,'ujson','lib')\n        self._clean_exclude = [pjoin(dt,'np_datetime.c'),\n                               pjoin(dt,'np_datetime_strings.c'),\n                               pjoin(src,'period_helper.c'),\n                               pjoin(parser,'tokenizer.c'),\n                               pjoin(parser,'io.c'),\n                               pjoin(ujson_python,'ujson.c'),\n                               pjoin(ujson_python,'objToJSON.c'),\n                               pjoin(ujson_python,'JSONtoObj.c'),\n                               pjoin(ujson_lib,'ultrajsonenc.c'),\n                               pjoin(ujson_lib,'ultrajsondec.c'),\n                               ]\n\n        for root, dirs, files in os.walk('pandas'):\n            for f in files:\n                filepath = pjoin(root, f)\n                if filepath in self._clean_exclude:\n                    continue\n\n                if os.path.splitext(f)[-1] in ('.pyc', '.so', '.o',\n                                               '.pyo',\n                                               '.pyd', '.c', '.orig'):\n                    self._clean_me.append(filepath)\n            for d in dirs:\n                if d == '__pycache__':\n                    self._clean_trees.append(pjoin(root, d))\n\n        for d in ('build', 'dist'):\n            if os.path.exists(d):\n                self._clean_trees.append(d)",
    "smell": []
}