{
    "code": "def parse_major(\n        cls,\n        major: str | None,\n        minor: int | None = None,\n        patch: int | None = None,\n        pre: bool | None = None,\n        dev: bool | None = None,\n        arch: str | None = None,\n    ) -> dict[str, Any]:\n        major_is_str = major and isinstance(major, str)\n        is_num = (\n            major\n            and major_is_str\n            and all(part.isdigit() for part in major.split(\".\")[:2])\n        )\n        major_has_arch = (\n            arch is None\n            and major\n            and major_is_str\n            and \"-\" in major\n            and major[0].isdigit()\n        )\n        name = None\n        if major and major_has_arch:\n            orig_string = f\"{major!s}\"\n            major, _, arch = major.rpartition(\"-\")\n            if arch:\n                arch = arch.lower().lstrip(\"x\").replace(\"bit\", \"\")\n                if not (arch.isdigit() and (int(arch) & int(arch) - 1) == 0):\n                    major = orig_string\n                    arch = None\n                else:\n                    arch = f\"{arch}bit\"\n            try:\n                version_dict = PythonVersion.parse(major)\n            except (ValueError, InvalidPythonVersion):\n                if name is None:\n                    name = f\"{major!s}\"\n                    major = None\n                version_dict = {}\n        elif major and major[0].isalpha():\n            return {\"major\": None, \"name\": major, \"arch\": arch}\n        elif major and is_num:\n            match = version_re.match(major)\n            version_dict = match.groupdict() if match else {}\n            version_dict.update(\n                {\n                    \"is_prerelease\": bool(version_dict.get(\"prerel\", False)),\n                    \"is_devrelease\": bool(version_dict.get(\"dev\", False)),\n                }\n            )\n        else:\n            version_dict = {\n                \"major\": major,\n                \"minor\": minor,\n                \"patch\": patch,\n                \"pre\": pre,\n                \"dev\": dev,\n                \"arch\": arch,\n            }\n        if not version_dict.get(\"arch\") and arch:\n            version_dict[\"arch\"] = arch\n        version_dict[\"minor\"] = (\n            int(version_dict[\"minor\"]) if version_dict.get(\"minor\") is not None else minor\n        )\n        version_dict[\"patch\"] = (\n            int(version_dict[\"patch\"]) if version_dict.get(\"patch\") is not None else patch\n        )\n        version_dict[\"major\"] = (\n            int(version_dict[\"major\"]) if version_dict.get(\"major\") is not None else major\n        )\n        if not (version_dict[\"major\"] or version_dict.get(\"name\")):\n            version_dict[\"major\"] = major\n            if name:\n                version_dict[\"name\"] = name\n        return version_dict",
    "smell": []
}