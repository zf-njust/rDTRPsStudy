{
    "code": "def update(self):\n        \"\"\"Update CPU stats using the input method.\"\"\"\n        # Reset stats\n        self.reset()\n\n        # Grab CPU stats using psutil's cpu_percent and cpu_times_percent\n        # methods\n        if self.input_method == 'local':\n            # Get all possible values for CPU stats: user, system, idle,\n            # nice (UNIX), iowait (Linux), irq (Linux, FreeBSD), steal (Linux 2.6.11+)\n            # The following stats are returned by the API but not displayed in the UI:\n            # softirq (Linux), guest (Linux 2.6.24+), guest_nice (Linux 3.2.0+)\n            self.stats['total'] = cpu_percent.get()\n            cpu_times_percent = psutil.cpu_times_percent(interval=0.0)\n            for stat in ['user', 'system', 'idle', 'nice', 'iowait',\n                         'irq', 'softirq', 'steal', 'guest', 'guest_nice']:\n                if hasattr(cpu_times_percent, stat):\n                    self.stats[stat] = getattr(cpu_times_percent, stat)\n        elif self.input_method == 'snmp':\n            # Update stats using SNMP\n            if self.short_system_name in ('windows', 'esxi'):\n                # Windows or VMWare ESXi\n                # You can find the CPU utilization of windows system by querying the oid\n                # Give also the number of core (number of element in the table)\n                try:\n                    cpu_stats = self.get_stats_snmp(snmp_oid=snmp_oid[self.short_system_name],\n                                                    bulk=True)\n                except KeyError:\n                    self.reset()\n\n                # Iter through CPU and compute the idle CPU stats\n                self.stats['nb_log_core'] = 0\n                self.stats['idle'] = 0\n                for c in cpu_stats:\n                    if c.startswith('percent'):\n                        self.stats['idle'] += float(cpu_stats['percent.3'])\n                        self.stats['nb_log_core'] += 1\n                if self.stats['nb_log_core'] > 0:\n                    self.stats['idle'] = self.stats[\n                        'idle'] / self.stats['nb_log_core']\n                self.stats['idle'] = 100 - self.stats['idle']\n                self.stats['total'] = 100 - self.stats['idle']\n\n            else:\n                # Default behavor\n                try:\n                    self.stats = self.get_stats_snmp(\n                        snmp_oid=snmp_oid[self.short_system_name])\n                except KeyError:\n                    self.stats = self.get_stats_snmp(\n                        snmp_oid=snmp_oid['default'])\n\n                if self.stats['idle'] == '':\n                    self.reset()\n                    return self.stats\n\n                # Convert SNMP stats to float\n                for key in list(self.stats.keys()):\n                    self.stats[key] = float(self.stats[key])\n                self.stats['total'] = 100 - self.stats['idle']\n\n        # Update the history list\n        self.update_stats_history()\n\n        # Update the view\n        self.update_views()\n\n        return self.stats",
    "smell": []
}