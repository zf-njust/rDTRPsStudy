{
    "code": "def gcp_connect(module, provider, get_driver, user_agent_product, user_agent_version):\n    \"\"\"Return a Google Cloud Platform connection.\"\"\"\n    if not HAS_LIBCLOUD_BASE:\n        module.fail_json(msg='libcloud must be installed to use this module')\n\n    service_account_email = module.params.get('service_account_email', None)\n    credentials_file = module.params.get('credentials_file', None)\n    pem_file = module.params.get('pem_file', None)\n    project_id = module.params.get('project_id', None)\n\n    # If any of the values are not given as parameters, check the appropriate\n    # environment variables.\n    if not service_account_email:\n        service_account_email = os.environ.get('GCE_EMAIL', None)\n    if not project_id:\n        project_id = os.environ.get('GCE_PROJECT', None)\n    if not pem_file:\n        pem_file = os.environ.get('GCE_PEM_FILE_PATH', None)\n    if not credentials_file:\n        credentials_file = os.environ.get('GCE_CREDENTIALS_FILE_PATH', pem_file)\n\n    # If we still don't have one or more of our credentials, attempt to\n    # get the remaining values from the libcloud secrets file.\n    if service_account_email is None or pem_file is None:\n        try:\n            import secrets\n        except ImportError:\n            secrets = None\n\n        if hasattr(secrets, 'GCE_PARAMS'):\n            if not service_account_email:\n                service_account_email = secrets.GCE_PARAMS[0]\n            if not credentials_file:\n                credentials_file = secrets.GCE_PARAMS[1]\n        keyword_params = getattr(secrets, 'GCE_KEYWORD_PARAMS', {})\n        if not project_id:\n            project_id = keyword_params.get('project', None)\n\n    # If we *still* don't have the credentials we need, then it's time to\n    # just fail out.\n    if service_account_email is None or credentials_file is None or project_id is None:\n        module.fail_json(msg='Missing GCE connection parameters in libcloud '\n                             'secrets file.')\n        return None\n    else:\n        # We have credentials but lets make sure that if they are JSON we have the minimum\n        # libcloud requirement met\n        try:\n            # Try to read credentials as JSON\n            with open(credentials_file) as credentials:\n                json.loads(credentials.read())\n            # If the credentials are proper JSON and we do not have the minimum\n            # required libcloud version, bail out and return a descriptive error\n            if LooseVersion(libcloud.__version__) < '0.17.0':\n                module.fail_json(msg='Using JSON credentials but libcloud minimum version not met. '\n                                     'Upgrade to libcloud>=0.17.0.')\n                return None\n        except ValueError as e:\n            # Not JSON\n            pass\n\n    try:\n        gcp = get_driver(provider)(service_account_email, credentials_file,\n                datacenter=module.params.get('zone', None),\n                project=project_id)\n        gcp.connection.user_agent_append(\"%s/%s\" % (\n            user_agent_product, user_agent_version))\n    except (RuntimeError, ValueError) as e:\n        module.fail_json(msg=str(e), changed=False)\n    except Exception as e:\n        module.fail_json(msg=unexpected_error_msg(e), changed=False)\n\n    return gcp",
    "smell": []
}