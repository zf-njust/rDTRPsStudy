{
    "code": "def memoize(timeout, dynamic_timeout=False):\n    \"\"\"\n    Memoization decorator with support for timeout.\n    \n    If dynamic_timeout is set, the cache timeout is doubled if the cached function \n    takes longer time to run than the timeout time\n    \"\"\"\n    cache = {\"timeout\":timeout}\n    def decorator(func):\n        def wrapper(*args, **kwargs):\n            start = time()\n            if (not \"time\" in cache) or (start - cache[\"time\"] > cache[\"timeout\"]):\n                # cache miss\n                cache[\"result\"] = func(*args, **kwargs)\n                cache[\"time\"] = time()\n                if dynamic_timeout and cache[\"time\"] - start > cache[\"timeout\"]:\n                    cache[\"timeout\"] *= 2\n            return cache[\"result\"]\n        \n        def clear_cache():\n            if \"time\" in cache:\n                del cache[\"time\"]\n            if \"result\" in cache:\n                del cache[\"result\"]\n        \n        wrapper.clear_cache = clear_cache\n        return wrapper\n    return decorator",
    "smell": []
}