{
    "code": "def upgrade():\n    bind = op.get_bind()\n    session = db.Session(bind=bind)\n    x_dateunit_in_since = DateRangeMigration.x_dateunit_in_since\n    x_dateunit_in_until = DateRangeMigration.x_dateunit_in_until\n\n    if isinstance(bind.dialect, SQLiteDialect):\n        # The REGEXP operator is a special syntax for the regexp() user function.\n        # https://www.sqlite.org/lang_expr.html#regexp\n        to_lower = sa.func.LOWER\n        where_clause = or_(\n            sa.func.REGEXP(to_lower(Slice.params), x_dateunit_in_since),\n            sa.func.REGEXP(to_lower(Slice.params), x_dateunit_in_until),\n        )\n    elif isinstance(bind.dialect, MySQLDialect):\n        to_lower = sa.func.LOWER\n        where_clause = or_(\n            to_lower(Slice.params).op(\"REGEXP\")(x_dateunit_in_since),\n            to_lower(Slice.params).op(\"REGEXP\")(x_dateunit_in_until),\n        )\n    else:\n        # isinstance(bind.dialect, PGDialect):\n        where_clause = or_(\n            Slice.params.op(\"~*\")(x_dateunit_in_since),\n            Slice.params.op(\"~*\")(x_dateunit_in_until),\n        )\n\n    try:\n        slices = session.query(Slice).filter(where_clause)\n        total = slices.count()\n        sep = \" : \"\n        pattern = DateRangeMigration.x_dateunit\n        idx = 0\n        for slc in slices.yield_per(100):\n            idx += 1\n            print(f\"Upgrading ({idx}/{total}): {slc.slice_name}#{slc.id}\")\n            params = json.loads(slc.params)\n            time_range = params[\"time_range\"]\n            if sep in time_range:\n                start, end = time_range.split(sep)\n                if re.match(pattern, start):\n                    start = f\"{start.strip()} ago\"\n                if re.match(pattern, end):\n                    end = f\"{end.strip()} later\"\n                params[\"time_range\"] = f\"{start}{sep}{end}\"\n                slc.params = json.dumps(params, sort_keys=True, indent=4)\n                session.commit()\n    except OperationalError:\n        pass\n\n    session.close()",
    "smell": []
}