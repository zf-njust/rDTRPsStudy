{
    "code": "def update(self) -> None:\n        \"\"\"Update the states of Neato switches.\"\"\"\n        _LOGGER.debug(\"Running Neato switch update for '%s'\", self.entity_id)\n        try:\n            self._state = self.robot.state\n        except NeatoRobotException as ex:\n            if self._available:  # Print only once when available\n                _LOGGER.error(\n                    \"Neato switch connection error for '%s': %s\", self.entity_id, ex\n                )\n            self._state = None\n            self._available = False\n            return\n\n        self._available = True\n        _LOGGER.debug(\"self._state=%s\", self._state)\n        if self.type == SWITCH_TYPE_SCHEDULE:\n            _LOGGER.debug(\"State: %s\", self._state)\n            if self._state is not None and self._state[\"details\"][\"isScheduleEnabled\"]:\n                self._schedule_state = STATE_ON\n            else:\n                self._schedule_state = STATE_OFF\n            _LOGGER.debug(\n                \"Schedule state for '%s': %s\", self.entity_id, self._schedule_state\n            )",
    "smell": []
}