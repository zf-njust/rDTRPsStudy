{
    "code": "def __init__(self, host=None, port=None, bucket_name=None, protocol=None,\n                 url=None, *args, **kwargs):\n        \"\"\"Initialize Riak backend instance.\n\n        :raises celery.exceptions.ImproperlyConfigured: if\n            module :mod:`riak` is not available.\n        \"\"\"\n        super(RiakBackend, self).__init__(*args, **kwargs)\n\n        if not riak:\n            raise ImproperlyConfigured(\n                'You need to install the riak library to use the '\n                'Riak backend.')\n\n        uhost = uport = uname = upass = ubucket = None\n        if url:\n            uprot, uhost, uport, uname, upass, ubucket, _ = _parse_url(url)\n            if ubucket:\n                ubucket = ubucket.strip('/')\n\n        config = self.app.conf.get('CELERY_RIAK_BACKEND_SETTINGS', None)\n        if config is not None:\n            if not isinstance(config, dict):\n                raise ImproperlyConfigured(\n                    'Riak backend settings should be grouped in a dict')\n        else:\n            config = {}\n\n        self.host = uhost or config.get('host', self.host)\n        self.port = int(uport or config.get('port', self.port))\n        self.bucket_name = ubucket or config.get('bucket', self.bucket_name)\n        self.protocol = protocol or config.get('protocol', self.protocol)\n\n        # riak bucket must be ascii letters or numbers only\n        if not is_ascii(self.bucket_name):\n            raise ValueError(E_BUCKET_NAME.format(self.bucket_name))\n\n        self._client = None",
    "smell": []
}