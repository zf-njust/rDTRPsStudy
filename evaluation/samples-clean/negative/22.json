{
    "code": "def __init__(\n      self,\n      filters: int,\n      kernel_size: Union[int, Sequence[int]],\n      strides: Union[int, Sequence[int]] = (1, 1),\n      padding: str = 'valid',\n      data_format: Optional[str] = None,\n      dilation_rate: Union[int, Sequence[int]] = (1, 1),\n      groups: int = 1,\n      use_bias: bool = True,\n      kernel_initializer: str = 'glorot_uniform',\n      bias_initializer: str = 'zeros',\n      kernel_regularizer: Optional[tf.keras.regularizers.Regularizer] = None,\n      bias_regularizer: Optional[tf.keras.regularizers.Regularizer] = None,\n      activity_regularizer: Optional[tf.keras.regularizers.Regularizer] = None,\n      kernel_constraint: Optional[tf.keras.constraints.Constraint] = None,\n      bias_constraint: Optional[tf.keras.constraints.Constraint] = None,\n      use_depthwise: bool = False,\n      use_temporal: bool = False,\n      use_buffered_input: bool = False,  # pytype: disable=annotation-type-mismatch  # typed-keras\n      batch_norm_op: Optional[Any] = None,\n      activation_op: Optional[Any] = None,\n      **kwargs):  # pylint: disable=g-doc-args\n    \"\"\"Initializes mobile conv2d.\n\n    For the majority of arguments, see tf.keras.layers.Conv2D.\n\n    Args:\n      use_depthwise: if True, use DepthwiseConv2D instead of Conv2D\n      use_temporal: if True, apply Conv2D starting from the temporal dimension\n          instead of the spatial dimensions.\n      use_buffered_input: if True, the input is expected to be padded\n          beforehand. In effect, calling this layer will use 'valid' padding on\n          the temporal dimension to simulate 'causal' padding.\n      batch_norm_op: A callable object of batch norm layer. If None, no batch\n        norm will be applied after the convolution.\n      activation_op: A callabel object of activation layer. If None, no\n        activation will be applied after the convolution.\n      **kwargs: keyword arguments to be passed to this layer.\n\n    Returns:\n      A output tensor of the MobileConv2D operation.\n    \"\"\"\n    super(MobileConv2D, self).__init__(**kwargs)\n    self._filters = filters\n    self._kernel_size = kernel_size\n    self._strides = strides\n    self._padding = padding\n    self._data_format = data_format\n    self._dilation_rate = dilation_rate\n    self._groups = groups\n    self._use_bias = use_bias\n    self._kernel_initializer = kernel_initializer\n    self._bias_initializer = bias_initializer\n    self._kernel_regularizer = kernel_regularizer\n    self._bias_regularizer = bias_regularizer\n    self._activity_regularizer = activity_regularizer\n    self._kernel_constraint = kernel_constraint\n    self._bias_constraint = bias_constraint\n    self._use_depthwise = use_depthwise\n    self._use_temporal = use_temporal\n    self._use_buffered_input = use_buffered_input\n    self._batch_norm_op = batch_norm_op\n    self._activation_op = activation_op\n\n    kernel_size = normalize_tuple(kernel_size, 2, 'kernel_size')\n\n    if self._use_temporal and kernel_size[1] > 1:\n      raise ValueError('Temporal conv with spatial kernel is not supported.')\n\n    if use_depthwise:\n      self._conv = nn_layers.DepthwiseConv2D(\n          kernel_size=kernel_size,\n          strides=strides,\n          padding=padding,\n          depth_multiplier=1,\n          data_format=data_format,\n          dilation_rate=dilation_rate,\n          use_bias=use_bias,\n          depthwise_initializer=kernel_initializer,\n          bias_initializer=bias_initializer,\n          depthwise_regularizer=kernel_regularizer,\n          bias_regularizer=bias_regularizer,\n          activity_regularizer=activity_regularizer,\n          depthwise_constraint=kernel_constraint,\n          bias_constraint=bias_constraint,\n          use_buffered_input=use_buffered_input)\n    else:\n      self._conv = nn_layers.Conv2D(\n          filters=filters,\n          kernel_size=kernel_size,\n          strides=strides,\n          padding=padding,\n          data_format=data_format,\n          dilation_rate=dilation_rate,\n          groups=groups,\n          use_bias=use_bias,\n          kernel_initializer=kernel_initializer,\n          bias_initializer=bias_initializer,\n          kernel_regularizer=kernel_regularizer,\n          bias_regularizer=bias_regularizer,\n          activity_regularizer=activity_regularizer,\n          kernel_constraint=kernel_constraint,\n          bias_constraint=bias_constraint,\n          use_buffered_input=use_buffered_input)",
    "smell": []
}