{
    "code": "def compute_layout(self, data, flags):\n        super(RecycleBoxLayout, self).compute_layout(data, flags)\n\n        changed = self._changed_views\n        if (changed is None or\n                changed and not self._update_sizes(changed)):\n            return\n\n        self.clear_layout()\n        self._rv_positions = None\n        if not data:\n            l, t, r, b = self.padding\n            self.minimum_size = l + r, t + b\n            return\n\n        view_opts = self.view_opts\n        n = len(view_opts)\n        for i, x, y, w, h in self._iterate_layout(\n                [(opt['size'], opt['size_hint'], opt['pos_hint'],\n                  opt['size_hint_min'], opt['size_hint_max']) for\n                 opt in reversed(view_opts)]):\n            opt = view_opts[n - i - 1]\n            shw, shh = opt['size_hint']\n            opt['pos'] = x, y\n            wo, ho = opt['size']\n            # layout won't/shouldn't change previous size if size_hint is None\n            # which is what w/h being None means.\n            opt['size'] = [(wo if shw is None else w),\n                           (ho if shh is None else h)]\n\n        spacing = self.spacing\n        pos = self._rv_positions = [None, ] * len(data)\n\n        if self.orientation == 'horizontal':\n            pos[0] = self.x\n            last = pos[0] + self.padding[0] + view_opts[0]['size'][0] + \\\n                spacing / 2.\n            for i, val in enumerate(view_opts[1:], 1):\n                pos[i] = last\n                last += val['size'][0] + spacing\n        else:\n            last = pos[-1] = \\\n                self.y + self.height - self.padding[1] - \\\n                view_opts[0]['size'][1] - spacing / 2.\n            n = len(view_opts)\n            for i, val in enumerate(view_opts[1:], 1):\n                last -= spacing + val['size'][1]\n                pos[n - 1 - i] = last",
    "smell": []
}