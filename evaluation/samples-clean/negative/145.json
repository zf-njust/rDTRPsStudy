{
    "code": "def statement_for_request(\n    start_day_dt: dt,\n    end_day_dt: dt,\n    event_type_ids: tuple[int, ...],\n    entity_ids: list[str] | None = None,\n    states_metadata_ids: Collection[int] | None = None,\n    device_ids: list[str] | None = None,\n    filters: Filters | None = None,\n    context_id: str | None = None,\n) -> StatementLambdaElement:\n    \"\"\"Generate the logbook statement for a logbook request.\"\"\"\n    start_day = dt_util.utc_to_timestamp(start_day_dt)\n    end_day = dt_util.utc_to_timestamp(end_day_dt)\n    # No entities: logbook sends everything for the timeframe\n    # limited by the context_id and the yaml configured filter\n    if not entity_ids and not device_ids:\n        context_id_bin = ulid_to_bytes_or_none(context_id)\n        return all_stmt(\n            start_day,\n            end_day,\n            event_type_ids,\n            filters,\n            context_id_bin,\n        )\n\n    # sqlalchemy caches object quoting, the\n    # json quotable ones must be a different\n    # object from the non-json ones to prevent\n    # sqlalchemy from quoting them incorrectly\n\n    # entities and devices: logbook sends everything for the timeframe for the entities and devices\n    if entity_ids and device_ids:\n        return entities_devices_stmt(\n            start_day,\n            end_day,\n            event_type_ids,\n            states_metadata_ids or [],\n            [json_dumps(entity_id) for entity_id in entity_ids],\n            [json_dumps(device_id) for device_id in device_ids],\n        )\n\n    # entities: logbook sends everything for the timeframe for the entities\n    if entity_ids:\n        return entities_stmt(\n            start_day,\n            end_day,\n            event_type_ids,\n            states_metadata_ids or [],\n            [json_dumps(entity_id) for entity_id in entity_ids],\n        )\n\n    # devices: logbook sends everything for the timeframe for the devices\n    assert device_ids is not None\n    return devices_stmt(\n        start_day,\n        end_day,\n        event_type_ids,\n        [json_dumps(device_id) for device_id in device_ids],\n    )",
    "smell": []
}