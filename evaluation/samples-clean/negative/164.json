{
    "code": "def quantize_f0(speaker_to_f0, nbins, normalize, log):\n    f0_all = []\n    for speaker, f0 in speaker_to_f0.items():\n        f0 = f0.raw_data\n        if log:\n            f0 = f0.log()\n        mean = speaker_to_f0[speaker].mean_log if log else speaker_to_f0[speaker].mean\n        std = speaker_to_f0[speaker].std_log if log else speaker_to_f0[speaker].std\n        if normalize == \"mean\":\n            f0 = f0 - mean\n        elif normalize == \"meanstd\":\n            f0 = (f0 - mean) / std\n        f0_all.extend(f0.tolist())\n\n    hist, bin_x = np.histogram(f0_all, 100000)\n    cum_hist = np.cumsum(hist) / len(f0_all) * 100\n\n    bin_offset = []\n    bin_size = 100 / nbins\n    threshold = bin_size\n    for i in range(nbins - 1):\n        index = (np.abs(cum_hist - threshold)).argmin()\n        bin_offset.append(bin_x[index])\n        threshold += bin_size\n    bins = np.array(bin_offset)\n    bins = torch.FloatTensor(bins)\n\n    return bins",
    "smell": []
}