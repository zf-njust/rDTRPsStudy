{
    "code": "def __init__(self,\n                 with_avg_pool: bool = False,\n                 with_cls: bool = True,\n                 with_reg: bool = True,\n                 roi_feat_size: int = 7,\n                 in_channels: int = 256,\n                 num_classes: int = 80,\n                 bbox_coder: ConfigType = dict(\n                     type='DeltaXYWHBBoxCoder',\n                     clip_border=True,\n                     target_means=[0., 0., 0., 0.],\n                     target_stds=[0.1, 0.1, 0.2, 0.2]),\n                 predict_box_type: str = 'hbox',\n                 reg_class_agnostic: bool = False,\n                 reg_decoded_bbox: bool = False,\n                 reg_predictor_cfg: ConfigType = dict(type='Linear'),\n                 cls_predictor_cfg: ConfigType = dict(type='Linear'),\n                 loss_cls: ConfigType = dict(\n                     type='CrossEntropyLoss',\n                     use_sigmoid=False,\n                     loss_weight=1.0),\n                 loss_bbox: ConfigType = dict(\n                     type='SmoothL1Loss', beta=1.0, loss_weight=1.0),\n                 init_cfg: OptMultiConfig = None) -> None:\n        super().__init__(init_cfg=init_cfg)\n        assert with_cls or with_reg\n        self.with_avg_pool = with_avg_pool\n        self.with_cls = with_cls\n        self.with_reg = with_reg\n        self.roi_feat_size = _pair(roi_feat_size)\n        self.roi_feat_area = self.roi_feat_size[0] * self.roi_feat_size[1]\n        self.in_channels = in_channels\n        self.num_classes = num_classes\n        self.predict_box_type = predict_box_type\n        self.reg_class_agnostic = reg_class_agnostic\n        self.reg_decoded_bbox = reg_decoded_bbox\n        self.reg_predictor_cfg = reg_predictor_cfg\n        self.cls_predictor_cfg = cls_predictor_cfg\n\n        self.bbox_coder = TASK_UTILS.build(bbox_coder)\n        self.loss_cls = MODELS.build(loss_cls)\n        self.loss_bbox = MODELS.build(loss_bbox)\n\n        in_channels = self.in_channels\n        if self.with_avg_pool:\n            self.avg_pool = nn.AvgPool2d(self.roi_feat_size)\n        else:\n            in_channels *= self.roi_feat_area\n        if self.with_cls:\n            # need to add background class\n            if self.custom_cls_channels:\n                cls_channels = self.loss_cls.get_cls_channels(self.num_classes)\n            else:\n                cls_channels = num_classes + 1\n            cls_predictor_cfg_ = self.cls_predictor_cfg.copy()\n            cls_predictor_cfg_.update(\n                in_features=in_channels, out_features=cls_channels)\n            self.fc_cls = MODELS.build(cls_predictor_cfg_)\n        if self.with_reg:\n            box_dim = self.bbox_coder.encode_size\n            out_dim_reg = box_dim if reg_class_agnostic else \\\n                box_dim * num_classes\n            reg_predictor_cfg_ = self.reg_predictor_cfg.copy()\n            if isinstance(reg_predictor_cfg_, (dict, ConfigDict)):\n                reg_predictor_cfg_.update(\n                    in_features=in_channels, out_features=out_dim_reg)\n            self.fc_reg = MODELS.build(reg_predictor_cfg_)\n        self.debug_imgs = None\n        if init_cfg is None:\n            self.init_cfg = []\n            if self.with_cls:\n                self.init_cfg += [\n                    dict(\n                        type='Normal', std=0.01, override=dict(name='fc_cls'))\n                ]\n            if self.with_reg:\n                self.init_cfg += [\n                    dict(\n                        type='Normal', std=0.001, override=dict(name='fc_reg'))\n                ]",
    "smell": []
}