{
    "code": "def upgrade():\n    \"\"\"\n    Previous sqla_viz behaviour when creating a virtual dataset was faulty\n    by creating an associated data access permission with [None] on the database name.\n\n    This migration revision, fixes all faulty permissions that may exist on the db\n    Only fixes permissions that still have an associated dataset (fetch by id)\n    and replaces them with the current (correct) permission name\n    \"\"\"\n\n    bind = op.get_bind()\n    session = orm.Session(bind=bind)\n\n    faulty_view_menus = (\n        session.query(ViewMenu)\n        .join(PermissionView)\n        .join(Permission)\n        .filter(ViewMenu.name.ilike(\"[None].[%](id:%)\"))\n        .filter(Permission.name == \"datasource_access\")\n        .all()\n    )\n    orphaned_faulty_view_menus = []\n    for faulty_view_menu in faulty_view_menus:\n        # Get the dataset id from the view_menu name\n        match_ds_id = re.match(r\"\\[None\\]\\.\\[.*\\]\\(id:(\\d+)\\)\", faulty_view_menu.name)\n        if match_ds_id:\n            dataset_id = int(match_ds_id.group(1))\n            dataset = session.query(SqlaTable).get(dataset_id)\n            if dataset:\n                try:\n                    new_view_menu = dataset.get_perm()\n                except Exception:\n                    # This can fail on differing SECRET_KEYS\n                    return\n                existing_view_menu = (\n                    session.query(ViewMenu)\n                    .filter(ViewMenu.name == new_view_menu)\n                    .one_or_none()\n                )\n                # A view_menu permission with the right name already exists,\n                # so delete the faulty one later\n                if existing_view_menu:\n                    orphaned_faulty_view_menus.append(faulty_view_menu)\n                # No view_menu permission with this name exists\n                # so safely change this one\n                else:\n                    faulty_view_menu.name = new_view_menu\n    # Commit all view_menu updates\n    try:\n        session.commit()\n    except SQLAlchemyError:\n        session.rollback()\n\n    # Delete all orphaned faulty permissions\n    for orphaned_faulty_view_menu in orphaned_faulty_view_menus:\n        pvm = (\n            session.query(PermissionView)\n            .filter(PermissionView.view_menu == orphaned_faulty_view_menu)\n            .one_or_none()\n        )\n        if pvm:\n            # Removes orphaned pvm from all roles\n            roles = session.query(Role).filter(Role.permissions.contains(pvm)).all()\n            for role in roles:\n                if pvm in role.permissions:\n                    role.permissions.remove(pvm)\n            # Now it's safe to remove the pvm pair\n            session.delete(pvm)\n        # finally remove the orphaned view_menu permission\n        session.delete(orphaned_faulty_view_menu)\n\n    try:\n        session.commit()\n    except SQLAlchemyError:\n        session.rollback()",
    "smell": []
}