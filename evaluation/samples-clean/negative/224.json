{
    "code": "def process(args):\n    root = Path(args.data_root).absolute() / args.src_lang\n    if not root.is_dir():\n        raise NotADirectoryError(f\"{root} does not exist\")\n    # Extract features\n    feature_root = root / \"fbank80\"\n    feature_root.mkdir(exist_ok=True)\n    for split in CoVoST.SPLITS:\n        print(f\"Fetching split {split}...\")\n        dataset = CoVoST(root, split, args.src_lang, args.tgt_lang)\n        print(\"Extracting log mel filter bank features...\")\n        for waveform, sample_rate, _, _, _, utt_id in tqdm(dataset):\n            extract_fbank_features(\n                waveform, sample_rate, feature_root / f\"{utt_id}.npy\"\n            )\n    # Pack features into ZIP\n    zip_path = root / \"fbank80.zip\"\n    print(\"ZIPing features...\")\n    create_zip(feature_root, zip_path)\n    print(\"Fetching ZIP manifest...\")\n    audio_paths, audio_lengths = get_zip_manifest(zip_path)\n    # Generate TSV manifest\n    print(\"Generating manifest...\")\n    train_text = []\n    task = f\"asr_{args.src_lang}\"\n    if args.tgt_lang is not None:\n        task = f\"st_{args.src_lang}_{args.tgt_lang}\"\n    for split in CoVoST.SPLITS:\n        manifest = {c: [] for c in MANIFEST_COLUMNS}\n        dataset = CoVoST(root, split, args.src_lang, args.tgt_lang)\n        for _, _, src_utt, tgt_utt, speaker_id, utt_id in tqdm(dataset):\n            manifest[\"id\"].append(utt_id)\n            manifest[\"audio\"].append(audio_paths[utt_id])\n            manifest[\"n_frames\"].append(audio_lengths[utt_id])\n            manifest[\"tgt_text\"].append(src_utt if args.tgt_lang is None else tgt_utt)\n            manifest[\"speaker\"].append(speaker_id)\n        is_train_split = split.startswith(\"train\")\n        if is_train_split:\n            train_text.extend(manifest[\"tgt_text\"])\n        df = pd.DataFrame.from_dict(manifest)\n        df = filter_manifest_df(df, is_train_split=is_train_split)\n        save_df_to_tsv(df, root / f\"{split}_{task}.tsv\")\n    # Generate vocab\n    vocab_size_str = \"\" if args.vocab_type == \"char\" else str(args.vocab_size)\n    spm_filename_prefix = f\"spm_{args.vocab_type}{vocab_size_str}_{task}\"\n    with NamedTemporaryFile(mode=\"w\") as f:\n        for t in train_text:\n            f.write(t + \"\\n\")\n        gen_vocab(\n            Path(f.name),\n            root / spm_filename_prefix,\n            args.vocab_type,\n            args.vocab_size\n        )\n    # Generate config YAML\n    gen_config_yaml(\n        root,\n        spm_filename=spm_filename_prefix + \".model\",\n        yaml_filename=f\"config_{task}.yaml\",\n        specaugment_policy=\"lb\",\n    )\n    # Clean up\n    shutil.rmtree(feature_root)",
    "smell": []
}