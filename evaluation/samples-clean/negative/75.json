{
    "code": "def __init__(\n        self,\n        root: str,\n        extensions: Set[str],\n        load_classes: bool,\n        transform: Optional[Callable] = None,\n        shuffle=True,\n    ):\n        FairseqDataset.__init__(self)\n        VisionDataset.__init__(self, root=root, transform=transform)\n\n        self.shuffle = shuffle\n        self.tensor_transform = ToTensor()\n\n        self.classes = None\n        self.labels = None\n        if load_classes:\n            classes = [d.name for d in os.scandir(root) if d.is_dir()]\n            classes.sort()\n            self.classes = {cls_name: i for i, cls_name in enumerate(classes)}\n            logger.info(f\"loaded {len(self.classes)} classes\")\n            self.labels = []\n\n        def walk_path(root_path):\n            for root, _, fnames in sorted(os.walk(root_path, followlinks=True)):\n                for fname in sorted(fnames):\n                    fname_ext = os.path.splitext(fname)\n                    if fname_ext[-1].lower() not in extensions:\n                        continue\n\n                    path = os.path.join(root, fname)\n                    yield path\n\n        logger.info(f\"finding images in {root}\")\n        if self.classes is not None:\n            self.files = []\n            self.labels = []\n            for c, i in self.classes.items():\n                for f in walk_path(os.path.join(root, c)):\n                    self.files.append(f)\n                    self.labels.append(i)\n        else:\n            self.files = [f for f in walk_path(root)]\n\n        logger.info(f\"loaded {len(self.files)} examples\")",
    "smell": []
}