{
    "code": "def handle(self, request, organization):\n        queryset = OrganizationMember.objects.filter(\n            organization=organization,\n        ).select_related('user')\n\n        queryset = sorted(queryset, key=lambda x: x.email or x.user.get_display_name())\n\n        try:\n            auth_provider = AuthProvider.objects.get(organization=organization)\n        except AuthProvider.DoesNotExist:\n            auth_provider = None\n\n        member_list = []\n        for om in queryset:\n            needs_sso = bool(auth_provider and not getattr(om.flags, 'sso:linked'))\n            member_list.append((om, needs_sso))\n\n        # if the member is not the only owner we allow them to leave the org\n        member_can_leave = any(\n            1 for om, _ in member_list\n            if (om.role == roles.get_top_dog().id\n                and om.user != request.user\n                and om.user is not None)\n        )\n\n        can_approve_requests_globally = (\n            request.access.has_scope('member:write')\n            or request.access.has_scope('org:write')\n        )\n        can_remove_members = request.access.has_scope('member:delete')\n\n        # pending requests\n        if can_approve_requests_globally:\n            access_requests = list(OrganizationAccessRequest.objects.filter(\n                team__organization=organization,\n            ).select_related('team', 'member__user'))\n        elif request.access.has_scope('team:write'):\n            access_requests = list(OrganizationAccessRequest.objects.filter(\n                team__in=OrganizationMemberTeam.objects.filter(\n                    organizationmember__organization=organization,\n                    organizationmember__user=request.user,\n                ).values('team'),\n            ).select_related('team', 'member__user'))\n        else:\n            access_requests = []\n\n        context = {\n            'org_has_sso': auth_provider is not None,\n            'member_list': member_list,\n            'request_list': access_requests,\n            'ref': request.GET.get('ref'),\n            'can_remove_members': can_remove_members,\n            'member_can_leave': member_can_leave,\n        }\n\n        return self.respond('sentry/organization-members.html', context)",
    "smell": []
}