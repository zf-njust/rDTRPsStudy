{
    "code": "def _redraw(self, *args):\n        if not self._ffplayer:\n            return\n        next_frame = self._next_frame\n        if not next_frame:\n            return\n\n        img, pts = next_frame\n        if img.get_size() != self._size or self._texture is None:\n            self._size = w, h = img.get_size()\n\n            if self._out_fmt == 'yuv420p':\n                w2 = int(w / 2)\n                h2 = int(h / 2)\n                self._tex_y = Texture.create(\n                    size=(w, h), colorfmt='luminance')\n                self._tex_u = Texture.create(\n                    size=(w2, h2), colorfmt='luminance')\n                self._tex_v = Texture.create(\n                    size=(w2, h2), colorfmt='luminance')\n                self._fbo = fbo = Fbo(size=self._size)\n                with fbo:\n                    BindTexture(texture=self._tex_u, index=1)\n                    BindTexture(texture=self._tex_v, index=2)\n                    Rectangle(size=fbo.size, texture=self._tex_y)\n                fbo.shader.fs = VideoFFPy.YUV_RGB_FS\n                fbo['tex_y'] = 0\n                fbo['tex_u'] = 1\n                fbo['tex_v'] = 2\n                self._texture = fbo.texture\n            else:\n                self._texture = Texture.create(size=self._size,\n                                                colorfmt='rgba')\n\n            # XXX FIXME\n            # self.texture.add_reload_observer(self.reload_buffer)\n            self._texture.flip_vertical()\n            self.dispatch('on_load')\n\n        if self._texture:\n            if self._out_fmt == 'yuv420p':\n                dy, du, dv, _ = img.to_memoryview()\n                if dy and du and dv:\n                    self._tex_y.blit_buffer(dy, colorfmt='luminance')\n                    self._tex_u.blit_buffer(du, colorfmt='luminance')\n                    self._tex_v.blit_buffer(dv, colorfmt='luminance')\n                    self._fbo.ask_update()\n                    self._fbo.draw()\n            else:\n                self._texture.blit_buffer(\n                    img.to_memoryview()[0], colorfmt='rgba')\n\n            self.dispatch('on_frame')",
    "smell": []
}