{
    "code": "def __init__(\n        self,\n        accelerator: Optional[\"pl.accelerators.Accelerator\"] = None,\n        zero_optimization: bool = True,\n        stage: int = 2,\n        remote_device: str = \"cpu\",\n        offload_optimizer: bool = False,\n        offload_parameters: bool = False,\n        offload_params_device: str = \"cpu\",\n        nvme_path: str = \"/local_nvme\",\n        params_buffer_count: int = 5,\n        params_buffer_size: int = 100_000_000,\n        max_in_cpu: int = 1_000_000_000,\n        offload_optimizer_device: str = \"cpu\",\n        optimizer_buffer_count: int = 4,\n        block_size: int = 1048576,\n        queue_depth: int = 8,\n        single_submit: bool = False,\n        overlap_events: bool = True,\n        thread_count: int = 1,\n        pin_memory: bool = False,\n        sub_group_size: int = 1_000_000_000_000,\n        contiguous_gradients: bool = True,\n        overlap_comm: bool = True,\n        allgather_partitions: bool = True,\n        reduce_scatter: bool = True,\n        allgather_bucket_size: int = 200_000_000,\n        reduce_bucket_size: int = 200_000_000,\n        zero_allow_untested_optimizer: bool = True,\n        logging_batch_size_per_gpu: Union[str, int] = \"auto\",\n        config: Optional[Union[_PATH, Dict[str, Any]]] = None,\n        logging_level: int = logging.WARN,\n        parallel_devices: Optional[List[torch.device]] = None,\n        cluster_environment: Optional[ClusterEnvironment] = None,\n        loss_scale: float = 0,\n        initial_scale_power: int = 16,\n        loss_scale_window: int = 1000,\n        hysteresis: int = 2,\n        min_loss_scale: int = 1,\n        partition_activations: bool = False,\n        cpu_checkpointing: bool = False,\n        contiguous_memory_optimization: bool = False,\n        synchronize_checkpoint_boundary: bool = False,\n        load_full_weights: bool = False,\n        precision_plugin: Optional[PrecisionPlugin] = None,\n        process_group_backend: Optional[str] = None,\n    ) -> None:\n        \"\"\"Provides capabilities to run training using the DeepSpeed library, with training optimizations for large\n        billion parameter models. `For more information: https://pytorch-\n        lightning.readthedocs.io/en/stable/advanced/model_parallel.html#deepspeed`.\n\n        .. warning::  This is an :ref:`experimental <versioning:Experimental API>` feature.\n\n        Defaults have been set to enable ZeRO-Offload and some have been taken from the link below.\n        These defaults have been set generally, but may require tuning for optimum performance based on your model size.\n        `For more information: https://www.deepspeed.ai/docs/config-json/#zero-optimizations-for-fp16-training`.\n\n        Arguments:\n\n            zero_optimization: Enable ZeRO optimization. This is compatible with either `precision=\"16-mixed\"` or\n                `precision=\"bf16-mixed\"`.\n\n            stage: Different stages of the ZeRO Optimizer. 0 is disabled,\n                1 is optimizer state partitioning, 2 is optimizer+gradient state partitioning,\n                3 is optimizer+gradient_parameter partitioning using the infinity engine.\n\n            remote_device: Device to instantiate the model on initially (``cpu`` or ``nvme``).\n\n            offload_optimizer: Enable offloading optimizer memory and computation to CPU or NVMe\n                based on ``offload_optimizer_device``.\n\n            offload_parameters: When using ZeRO Stage 3, Enable offloading parameter memory and computation\n                to CPU or NVMe based on ``offload_params_device``.\n\n            offload_params_device: When offloading parameters choose the device to offload to, ``cpu`` or ``nvme``.\n\n            offload_optimizer_device: When offloading optimizer state choose the device to offload to,\n                ``cpu`` or ``nvme``.\n\n            params_buffer_count: Number of buffers in buffer pool for\n                parameter offloading when ``offload_params_device`` is ``nvme``.\n\n            params_buffer_size: Size of buffers in buffer pool for parameter offloading\n                when ``offload_params_device`` is ``nvme``.\n\n            max_in_cpu: Number of parameter elements to maintain in CPU memory when offloading to NVMe is enabled.\n\n            nvme_path: Filesystem path for NVMe device for optimizer/parameter state offloading.\n\n            optimizer_buffer_count: Number of buffers in buffer pool for optimizer state offloading\n                when ``offload_optimizer_device`` is set to to ``nvme``.\n                This should be at least the number of states maintained per parameter by the optimizer.\n                For example, Adam optimizer has 4 states (parameter, gradient, momentum, and variance).\n\n            block_size: When using NVMe Offloading, the I/O block size in bytes.\n\n            queue_depth: When using NVMe Offloading, the I/O queue depth.\n\n            single_submit: When using NVMe Offloading,\n                submit requests to storage device as multiple individual requests,\n                as opposed to one block of requests.\n\n            overlap_events: When using NVMe Offloading,\n                submit requests to storage device in an overlapped fashion\n                without waiting for completion of earlier requests.\n\n            thread_count: When using NVMe Offloading,\n                Intra-request parallelism for each read/write submitted by a user thread.\n\n            pin_memory: When using ZeRO stage 3, pin optimizer state memory on CPU.\n                This could boost throughput at the cost of extra memory overhead.\n\n            sub_group_size: When using ZeRO stage 3, defines the number of parameters\n                within a sub group to offload at a time.\n                Smaller numbers require more communication, but improve memory efficiency.\n\n            contiguous_gradients: Copies gradients to a continuous buffer as they are produced.\n                Avoids memory fragmentation during backwards. Useful when training large models.\n\n            overlap_comm: Overlap the reduction (synchronization) of gradients with the backwards computation.\n                This is a speed optimization when training across multiple GPUs/machines.\n\n            allgather_partitions: All gather updated parameters at the end of training step,\n                instead of using a series of broadcast collectives.\n\n            reduce_scatter: Use reduce/scatter instead of allreduce to average gradients.\n\n            allgather_bucket_size: Number of elements to allgather at once.\n                Used to limit the memory required for larger model sizes, with a tradeoff with speed.\n\n            reduce_bucket_size: Number of elements to reduce at once.\n                Used to limit the memory required for larger model sizes, with a tradeoff with speed.\n\n            zero_allow_untested_optimizer: Allow untested optimizers to be used with ZeRO. Currently only Adam is a\n                DeepSpeed supported optimizer when using ZeRO.\n\n            logging_batch_size_per_gpu: Config used in DeepSpeed to calculate verbose timing for logging\n                on a per sample per second basis (only displayed if logging=logging.INFO).\n                If set to \"auto\", the plugin tries to infer this from\n                the train DataLoader's BatchSampler, else defaults to 1.\n                To obtain accurate logs when using datasets that do not support batch samplers,\n                set this to the actual per gpu batch size (trainer.batch_size).\n\n            config: Pass in a deepspeed formatted config dict,\n                or path to a deepspeed config: https://www.deepspeed.ai/docs/config-json.\n                All defaults will be ignored if a config is passed in.\n\n            logging_level: Set logging level for deepspeed.\n\n            loss_scale: Loss scaling value for FP16 training.\n                0.0 results in dynamic loss scaling, otherwise static.\n\n            initial_scale_power: Power of the initial dynamic loss scale value. Loss scale is computed\n                by ``2^initial_scale_power``.\n\n            loss_scale_window: Window in which to raise/lower the dynamic FP16 loss scaling value.\n\n            hysteresis: FP16 Delay shift in Dynamic Loss scaling.\n\n            min_loss_scale: The minimum FP16 dynamic loss scaling value.\n\n            partition_activations: Enables partition activation when used with ZeRO stage 3 and model parallelism.\n                Still requires you to wrap your forward functions in deepspeed.checkpointing.checkpoint.\n                See `deepspeed tutorial\n                <https://www.deepspeed.ai/tutorials/megatron/#deepspeed-activation-checkpoints-optional>`_.\n\n            cpu_checkpointing: Offloads partitioned activations to CPU if ``partition_activations`` is enabled.\n\n            contiguous_memory_optimization: Copies partitioned activations so that they are contiguous in memory.\n                Not supported by all models.\n\n            synchronize_checkpoint_boundary: Insert :func:`torch.cuda.synchronize` at each checkpoint boundary.\n\n            load_full_weights: True when loading a single checkpoint file containing the model state dict\n                when using ZeRO Stage 3. This differs from the DeepSpeed checkpoint which contains shards\n                per worker.\n        \"\"\"\n        if not _DEEPSPEED_AVAILABLE:\n            raise MisconfigurationException(\n                \"To use the `DeepSpeedStrategy`, you must have DeepSpeed installed.\"\n                \" Install it by running `pip install -U deepspeed`.\"\n            )\n\n        super().__init__(\n            accelerator=accelerator,\n            parallel_devices=parallel_devices,\n            cluster_environment=cluster_environment,\n            precision_plugin=precision_plugin,\n            process_group_backend=process_group_backend,\n        )\n\n        self.config = self._load_config(config)\n        if self.config is None:\n            # User has not overridden config, set defaults\n            self.config = self._create_default_config(\n                zero_optimization,\n                zero_allow_untested_optimizer,\n                logging_batch_size_per_gpu,\n                offload_optimizer=offload_optimizer,\n                offload_parameters=offload_parameters,\n                nvme_path=nvme_path,\n                offload_params_device=offload_params_device,\n                params_buffer_count=params_buffer_count,\n                params_buffer_size=params_buffer_size,\n                max_in_cpu=max_in_cpu,\n                pin_memory=pin_memory,\n                offload_optimizer_device=offload_optimizer_device,\n                optimizer_buffer_count=optimizer_buffer_count,\n                block_size=block_size,\n                queue_depth=queue_depth,\n                single_submit=single_submit,\n                overlap_events=overlap_events,\n                thread_count=thread_count,\n                partition_activations=partition_activations,\n                cpu_checkpointing=cpu_checkpointing,\n                contiguous_memory_optimization=contiguous_memory_optimization,\n                synchronize_checkpoint_boundary=synchronize_checkpoint_boundary,\n                stage=stage,\n                contiguous_gradients=contiguous_gradients,\n                overlap_comm=overlap_comm,\n                allgather_partitions=allgather_partitions,\n                reduce_scatter=reduce_scatter,\n                allgather_bucket_size=allgather_bucket_size,\n                reduce_bucket_size=reduce_bucket_size,\n                sub_group_size=sub_group_size,\n            )\n        import deepspeed\n\n        self._config_initialized = False\n        deepspeed.utils.logging.logger.setLevel(logging_level)\n\n        self.remote_device = remote_device\n        self.load_full_weights = load_full_weights\n\n        # default FP16 parameters.\n        self.loss_scale = loss_scale\n        self.initial_scale_power = initial_scale_power\n        self.loss_scale_window = loss_scale_window\n        self.hysteresis = hysteresis\n        self.min_loss_scale = min_loss_scale",
    "smell": []
}