{
    "code": "def test_orchestrator():\n    \"\"\"Simulate orchestration when Work B requests a file from Work A.\"\"\"\n    request_queues = {\"work_a\": _MockQueue(), \"work_b\": _MockQueue()}\n    response_queues = {\"work_a\": _MockQueue(), \"work_b\": _MockQueue()}\n    copy_request_queues = {\"work_a\": _MockQueue(), \"work_b\": _MockQueue()}\n    copy_response_queues = {\"work_a\": _MockQueue(), \"work_b\": _MockQueue()}\n    app = MagicMock()\n    work = MagicMock()\n    work.status.stage = WorkStageStatus.RUNNING\n    app.get_component_by_name = MagicMock(return_value=work)\n\n    orchestrator = StorageOrchestrator(\n        app,\n        request_queues=request_queues,\n        response_queues=response_queues,\n        copy_request_queues=copy_request_queues,\n        copy_response_queues=copy_response_queues,\n    )\n\n    # test idle behavior when queues are empty\n    orchestrator.run_once(\"work_a\")\n    orchestrator.run_once(\"work_b\")\n    assert not orchestrator.waiting_for_response\n\n    # simulate Work B sending a request for a file in Work A\n    request = _GetRequest(source=\"work_a\", path=\"/a/b/c.txt\", hash=\"\", destination=\"\", name=\"\")\n    request_queues[\"work_b\"].put(request)\n    orchestrator.run_once(\"work_a\")\n    assert not orchestrator.waiting_for_response\n    orchestrator.run_once(\"work_b\")\n\n    # orchestrator is now waiting for a response for copier in Work A\n    assert \"work_b\" in orchestrator.waiting_for_response\n    assert len(request_queues[\"work_a\"]) == 0\n    assert request in copy_request_queues[\"work_a\"]\n    assert request.destination == \"work_b\"\n\n    # simulate loop while waiting for new elements in the queues\n    orchestrator.run_once(\"work_a\")\n    orchestrator.run_once(\"work_b\")\n\n    # simulate copier A confirms that the file is available on the shared volume\n    response = _GetResponse(source=\"work_a\", path=\"/a/b/c.txt\", hash=\"\", destination=\"work_b\", name=\"\")\n    copy_request_queues[\"work_a\"].get()\n    copy_response_queues[\"work_a\"].put(response)\n\n    # orchestrator processes confirmation and confirms to the pending request from Work B\n    orchestrator.run_once(\"work_a\")\n    assert len(copy_response_queues[\"work_a\"]) == 0\n    assert response in response_queues[\"work_b\"]\n    assert not orchestrator.waiting_for_response\n    orchestrator.run_once(\"work_b\")\n\n    # simulate loop while waiting for new elements in the queues\n    orchestrator.run_once(\"work_a\")\n    orchestrator.run_once(\"work_b\")\n    assert not orchestrator.waiting_for_response\n\n    # simulate Work B receiving the confirmation that the file was copied\n    response = response_queues[\"work_b\"].get()\n    assert response.source == \"work_a\"\n    assert response.destination == \"work_b\"\n    assert response.exception is None\n\n    # all queues should be empty\n    assert all(len(queue) == 0 for queue in request_queues.values())\n    assert all(len(queue) == 0 for queue in response_queues.values())\n    assert all(len(queue) == 0 for queue in copy_request_queues.values())\n    assert all(len(queue) == 0 for queue in copy_response_queues.values())",
    "smell": []
}