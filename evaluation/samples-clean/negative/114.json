{
    "code": "def __init__(\n        self, coordinator: NexiaDataUpdateCoordinator, zone: NexiaThermostatZone\n    ) -> None:\n        \"\"\"Initialize the thermostat.\"\"\"\n        super().__init__(\n            coordinator, zone, name=zone.get_name(), unique_id=zone.zone_id\n        )\n        unit = self._thermostat.get_unit()\n        min_humidity, max_humidity = self._thermostat.get_humidity_setpoint_limits()\n        min_setpoint, max_setpoint = self._thermostat.get_setpoint_limits()\n        # The has_* calls are stable for the life of the device\n        # and do not do I/O\n        self._has_relative_humidity = self._thermostat.has_relative_humidity()\n        self._has_emergency_heat = self._thermostat.has_emergency_heat()\n        self._has_humidify_support = self._thermostat.has_humidify_support()\n        self._has_dehumidify_support = self._thermostat.has_dehumidify_support()\n        self._attr_supported_features = NEXIA_SUPPORTED\n        if self._has_humidify_support or self._has_dehumidify_support:\n            self._attr_supported_features |= ClimateEntityFeature.TARGET_HUMIDITY\n        if self._has_emergency_heat:\n            self._attr_supported_features |= ClimateEntityFeature.AUX_HEAT\n        self._attr_preset_modes = self._zone.get_presets()\n        self._attr_fan_modes = self._thermostat.get_fan_modes()\n        self._attr_hvac_modes = HVAC_MODES\n        self._attr_min_humidity = percent_conv(min_humidity)\n        self._attr_max_humidity = percent_conv(max_humidity)\n        self._attr_min_temp = min_setpoint\n        self._attr_max_temp = max_setpoint\n        self._attr_temperature_unit = (\n            UnitOfTemperature.CELSIUS if unit == \"C\" else UnitOfTemperature.FAHRENHEIT\n        )\n        self._attr_target_temperature_step = 0.5 if unit == \"C\" else 1.0",
    "smell": []
}