{
    "code": "def shorten_message(\n    msg: tuple[str, str] | str, max_width: int\n) -> list[tuple[str, str]]:\n    \"\"\"\n    Shorten message so that it fits into a single line in the statusbar.\n    \"\"\"\n    if isinstance(msg, tuple):\n        disp_attr, msg_text = msg\n    elif isinstance(msg, str):\n        msg_text = msg\n        disp_attr = \"\"\n    else:\n        raise AssertionError(f\"Unexpected message type: {type(msg)}\")\n    msg_end = \"\\u2026\"  # unicode ellipsis for the end of shortened message\n    prompt = \"(more in eventlog)\"\n\n    msg_lines = msg_text.split(\"\\n\")\n    first_line = msg_lines[0]\n    if len(msg_lines) > 1:\n        # First line of messages with a few lines must end with prompt.\n        line_length = len(first_line) + len(prompt)\n    else:\n        line_length = len(first_line)\n\n    if line_length > max_width:\n        shortening_index = max(0, max_width - len(prompt) - len(msg_end))\n        first_line = first_line[:shortening_index] + msg_end\n    else:\n        if len(msg_lines) == 1:\n            prompt = \"\"\n\n    return [(disp_attr, first_line), (\"warn\", prompt)]",
    "smell": []
}