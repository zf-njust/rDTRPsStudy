{
    "code": "def start(module):\n    if not os.path.isdir(os.path.join(root_path, module)):\n        return\n\n    try:\n        if module not in config.config[\"modules\"]:\n            launcher_log.error(\"module not exist %s\", module)\n            raise\n\n        if module in proc_handler:\n            launcher_log.error(\"module %s is running\", module)\n            return \"module is running\"\n\n        if module not in proc_handler:\n            proc_handler[module] = {}\n\n        if os.path.isfile(os.path.join(root_path, module, \"__init__.py\")):\n            if \"imp\" not in proc_handler[module]:\n                proc_handler[module][\"imp\"] = __import__(module, globals(), locals(), ['local', 'start'], -1)\n\n            _start = proc_handler[module][\"imp\"].start\n            p = threading.Thread(target=_start.main)\n            p.daemon = True\n            p.start()\n            proc_handler[module][\"proc\"] = p\n\n            while not _start.client.ready:\n                time.sleep(0.1)\n        else:\n            script_path = os.path.join(root_path, module, 'start.py')\n            if not os.path.isfile(script_path):\n                launcher_log.warn(\"start module script not exist:%s\", script_path)\n                return \"fail\"\n\n            proc_handler[module][\"proc\"] = subprocess.Popen([sys.executable, script_path], shell=False)\n\n        launcher_log.info(\"%s started\", module)\n\n    except Exception as e:\n        launcher_log.exception(\"start module %s fail:%s\", module, e)\n        return \"Except:%s\" % e\n    return \"start success.\"",
    "smell": []
}