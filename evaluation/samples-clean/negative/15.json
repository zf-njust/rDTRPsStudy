{
    "code": "def test_all_policy_ops_video_with_bboxes(self):\n    \"\"\"Smoke test to be sure all video augmentation functions can execute.\"\"\"\n\n    prob = 1\n    magnitude = 10\n    replace_value = [128] * 3\n    cutout_const = 100\n    translate_const = 250\n\n    image = tf.ones((2, 224, 224, 3), dtype=tf.uint8)\n    bboxes = tf.ones((2, 2, 4), dtype=tf.float32)\n\n    for op_name in augment.NAME_TO_FUNC:\n      func, _, args = augment._parse_policy_info(op_name, prob, magnitude,\n                                                 replace_value, cutout_const,\n                                                 translate_const)\n      if op_name in {\n          'Rotate_BBox',\n          'ShearX_BBox',\n          'ShearY_BBox',\n          'TranslateX_BBox',\n          'TranslateY_BBox',\n          'TranslateY_Only_BBoxes',\n      }:\n        with self.assertRaises(ValueError):\n          func(image, bboxes, *args)\n      else:\n        image, bboxes = func(image, bboxes, *args)\n\n    self.assertEqual((2, 224, 224, 3), image.shape)\n    self.assertEqual((2, 2, 4), bboxes.shape)",
    "smell": []
}