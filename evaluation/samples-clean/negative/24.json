{
    "code": "def convert_to_tfe(img_file_name: str,\n                   annotation: Dict[str, Any]) -> tf.train.Example:\n  \"\"\"Convert the annotation dict into a TFExample.\"\"\"\n\n  img = cv2.imread(img_file_name)\n  img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n  h, w, c = img.shape\n  encoded_img = encode_image(img)\n\n  entities = annotation_to_entities(annotation)\n  masks = draw_entity_mask(entities, img.shape)\n  encoded_mask = encode_image(masks)\n\n  # encode attributes\n  parent = []\n  classes = []\n  content_type = []\n  text = []\n  vertices = []\n\n  for entity in entities:\n    parent.append(entity['parent_id'])\n    classes.append(entity['type'])\n    # 0 for annotated; 8 for not annotated\n    content_type.append((0 if entity['legible'] else 8))\n    text.append(entity.get('text', ''))\n    v = np.array(entity['vertices'])\n    vertices.append(','.join(str(float(n)) for n in v.reshape(-1)))\n\n  example = tf.train.Example(\n      features=tf.train.Features(\n          feature={\n              # input images\n              'image/encoded': bytes_feature(encoded_img),\n              # image format\n              'image/format': bytes_feature('png'),\n              # image width\n              'image/width': int64_feature([w]),\n              # image height\n              'image/height': int64_feature([h]),\n              # image channels\n              'image/channels': int64_feature([c]),\n              # image key\n              'image/source_id': bytes_feature(annotation['image_id']),\n              # HxWx3 tensors: channel 2-3 encodes the id of the word entity.\n              'image/additional_channels/encoded': bytes_feature(encoded_mask),\n              # format of the additional channels\n              'image/additional_channels/format': bytes_feature('png'),\n              'image/object/parent': int64_feature(parent),\n              # word / line / paragraph / symbol / ...\n              'image/object/classes': int64_feature(classes),\n              # text / handwritten / not-annotated / ...\n              'image/object/content_type': int64_feature(content_type),\n              # string text transcription\n              'image/object/text': bytes_feature(text),\n              # comma separated coordinates, (x,y) * n\n              'image/object/vertices': bytes_feature(vertices),\n          })).SerializeToString()\n\n  return example",
    "smell": []
}