{
    "code": "def find_words(board, words):\n\n    def backtrack(board, i, j, trie, pre, used, result):\n        '''\n        backtrack tries to build each words from\n        the board and return all words found\n\n        @param: board, the passed in board of characters\n        @param: i, the row index\n        @param: j, the column index\n        @param: trie, a trie of the passed in words\n        @param: pre, a buffer of currently build string that differs\n                by recursion stack\n        @param: used, a replica of the board except in booleans\n                to state whether a character has been used\n        @param: result, the resulting set that contains all words found\n\n        @return: list of words found\n        '''\n\n        if '#' in trie:\n            result.add(pre)\n\n        if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]):\n            return\n\n        if not used[i][j] and board[i][j] in trie:\n            used[i][j] = True\n            backtrack(board, i+1, j, trie[board[i][j]],\n                      pre+board[i][j], used, result)\n            backtrack(board, i, j+1, trie[board[i][j]],\n                      pre+board[i][j], used, result)\n            backtrack(board, i-1, j, trie[board[i][j]],\n                      pre+board[i][j], used, result)\n            backtrack(board, i, j-1, trie[board[i][j]],\n                      pre+board[i][j], used, result)\n            used[i][j] = False\n\n    # make a trie structure that is essentially dictionaries of dictionaries\n    # that map each character to a potential next character\n    trie = {}\n    for word in words:\n        curr_trie = trie\n        for char in word:\n            if char not in curr_trie:\n                curr_trie[char] = {}\n            curr_trie = curr_trie[char]\n        curr_trie['#'] = '#'\n\n    # result is a set of found words since we do not want repeats\n    result = set()\n    used = [[False]*len(board[0]) for _ in range(len(board))]\n\n    for i in range(len(board)):\n        for j in range(len(board[0])):\n            backtrack(board, i, j, trie, '', used, result)\n    return list(result)",
    "smell": []
}