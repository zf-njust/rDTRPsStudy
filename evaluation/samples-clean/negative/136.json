{
    "code": "def test_get_executor(\n    model_type: ModelType,\n    executor_types: list[ExecutorType],\n    model_config: ModelConfig,\n    current_user: Optional[int],\n    expected_result: tuple[int, ExecutorNotFoundError],\n) -> None:\n    from superset.models.dashboard import Dashboard\n    from superset.models.slice import Slice\n    from superset.reports.models import ReportSchedule\n    from superset.tasks.utils import get_executor\n\n    model: type[Union[Dashboard, ReportSchedule, Slice]]\n    model_kwargs: dict[str, Any] = {}\n    if model_type == ModelType.REPORT_SCHEDULE:\n        model = ReportSchedule\n        model_kwargs = {\n            \"type\": \"report\",\n            \"name\": \"test_report\",\n        }\n    elif model_type == ModelType.DASHBOARD:\n        model = Dashboard\n    elif model_type == ModelType.CHART:\n        model = Slice\n    else:\n        raise Exception(f\"Unsupported model type: {model_type}\")\n\n    obj = model(\n        id=1,\n        owners=_get_users(model_config.owners),\n        created_by=_get_users(model_config.creator),\n        changed_by=_get_users(model_config.modifier),\n        **model_kwargs,\n    )\n    if isinstance(expected_result, Exception):\n        cm = pytest.raises(type(expected_result))\n        expected_executor_type = None\n        expected_executor = None\n    else:\n        cm = nullcontext()\n        expected_executor_type = expected_result[0]\n        expected_executor = (\n            SELENIUM_USERNAME\n            if expected_executor_type == ExecutorType.SELENIUM\n            else str(expected_result[1])\n        )\n\n    with cm:\n        executor_type, executor = get_executor(\n            executor_types=executor_types,\n            model=obj,\n            current_user=str(current_user) if current_user else None,\n        )\n        assert executor_type == expected_executor_type\n        assert executor == expected_executor",
    "smell": []
}