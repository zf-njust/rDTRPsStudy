{
    "code": "def __init__(\n        self,\n        sql: str,\n        conf: str | None = None,\n        conn_id: str = default_conn_name,\n        total_executor_cores: int | None = None,\n        executor_cores: int | None = None,\n        executor_memory: str | None = None,\n        keytab: str | None = None,\n        principal: str | None = None,\n        master: str | None = None,\n        name: str = \"default-name\",\n        num_executors: int | None = None,\n        verbose: bool = True,\n        yarn_queue: str | None = None,\n    ) -> None:\n        super().__init__()\n        options: dict = {}\n        conn: Connection | None = None\n\n        try:\n            conn = self.get_connection(conn_id)\n        except AirflowNotFoundException:\n            conn = None\n        if conn:\n            options = conn.extra_dejson\n\n        # Set arguments to values set in Connection if not explicitly provided.\n        if master is None:\n            if conn is None:\n                master = \"yarn\"\n            elif conn.port:\n                master = f\"{conn.host}:{conn.port}\"\n            else:\n                master = conn.host\n        if yarn_queue is None:\n            yarn_queue = options.get(\"queue\", \"default\")\n\n        self._sql = sql\n        self._conf = conf\n        self._total_executor_cores = total_executor_cores\n        self._executor_cores = executor_cores\n        self._executor_memory = executor_memory\n        self._keytab = keytab\n        self._principal = principal\n        self._master = master\n        self._name = name\n        self._num_executors = num_executors\n        self._verbose = verbose\n        self._yarn_queue = yarn_queue\n        self._sp: Any = None",
    "smell": []
}