{
    "code": "def __init__(\n        self, thresholds: List[float], labels: List[int], allow_low_quality_matches: bool = False\n    ):\n        \"\"\"\n        Args:\n            thresholds (list): a list of thresholds used to stratify predictions\n                into levels.\n            labels (list): a list of values to label predictions belonging at\n                each level. A label can be one of {-1, 0, 1} signifying\n                {ignore, negative class, positive class}, respectively.\n            allow_low_quality_matches (bool): if True, produce additional matches\n                for predictions with maximum match quality lower than high_threshold.\n                See set_low_quality_matches_ for more details.\n\n            For example,\n                thresholds = [0.3, 0.5]\n                labels = [0, -1, 1]\n                All predictions with iou < 0.3 will be marked with 0 and\n                thus will be considered as false positives while training.\n                All predictions with 0.3 <= iou < 0.5 will be marked with -1 and\n                thus will be ignored.\n                All predictions with 0.5 <= iou will be marked with 1 and\n                thus will be considered as true positives.\n        \"\"\"\n        # Add -inf and +inf to first and last position in thresholds\n        thresholds = thresholds[:]\n        assert thresholds[0] > 0\n        thresholds.insert(0, -float(\"inf\"))\n        thresholds.append(float(\"inf\"))\n        # Currently torchscript does not support all + generator\n        assert all([low <= high for (low, high) in zip(thresholds[:-1], thresholds[1:])])\n        assert all([l in [-1, 0, 1] for l in labels])\n        assert len(labels) == len(thresholds) - 1\n        self.thresholds = thresholds\n        self.labels = labels\n        self.allow_low_quality_matches = allow_low_quality_matches",
    "smell": []
}