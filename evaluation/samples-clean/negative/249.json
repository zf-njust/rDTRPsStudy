{
    "code": "def run(args: list[str]) -> int:\n    \"\"\"Run a script.\"\"\"\n    scripts = []\n    path = os.path.dirname(__file__)\n    for fil in os.listdir(path):\n        if fil == \"__pycache__\":\n            continue\n\n        if os.path.isdir(os.path.join(path, fil)):\n            scripts.append(fil)\n        elif fil != \"__init__.py\" and fil.endswith(\".py\"):\n            scripts.append(fil[:-3])\n\n    if not args:\n        print(\"Please specify a script to run.\")\n        print(\"Available scripts:\", \", \".join(scripts))\n        return 1\n\n    if args[0] not in scripts:\n        print(\"Invalid script specified.\")\n        print(\"Available scripts:\", \", \".join(scripts))\n        return 1\n\n    script = importlib.import_module(f\"homeassistant.scripts.{args[0]}\")\n\n    config_dir = extract_config_dir()\n\n    loop = asyncio.get_event_loop()\n\n    if not is_virtual_env():\n        loop.run_until_complete(async_mount_local_lib_path(config_dir))\n\n    _pip_kwargs = pip_kwargs(config_dir)\n\n    logging.basicConfig(stream=sys.stdout, level=logging.INFO)\n\n    for req in getattr(script, \"REQUIREMENTS\", []):\n        if is_installed(req):\n            continue\n\n        if not install_package(req, **_pip_kwargs):\n            print(\"Aborting script, could not install dependency\", req)\n            return 1\n\n    asyncio.set_event_loop_policy(runner.HassEventLoopPolicy(False))\n\n    return script.run(args[1:])",
    "smell": []
}