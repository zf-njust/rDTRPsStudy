{
    "code": "def format_python_constraint(constraint):\n    \"\"\"\n    This helper will help in transforming\n    disjunctive constraint into proper constraint.\n    \"\"\"\n    if isinstance(constraint, Version):\n        if constraint.precision >= 3:\n            return \"=={}\".format(str(constraint))\n\n        # Transform 3.6 or 3\n        if constraint.precision == 2:\n            # 3.6\n            constraint = parse_constraint(\n                \"~{}.{}\".format(constraint.major, constraint.minor)\n            )\n        else:\n            constraint = parse_constraint(\"^{}.0\".format(constraint.major))\n\n    if not isinstance(constraint, VersionUnion):\n        return str(constraint)\n\n    formatted = []\n    accepted = []\n\n    for version in PYTHON_VERSION:\n        version_constraint = parse_constraint(version)\n        matches = constraint.allows_any(version_constraint)\n        if not matches:\n            formatted.append(\"!=\" + version)\n        else:\n            accepted.append(version)\n\n    # Checking lower bound\n    low = accepted[0]\n\n    formatted.insert(0, \">=\" + \".\".join(low.split(\".\")[:2]))\n\n    return \", \".join(formatted)",
    "smell": []
}