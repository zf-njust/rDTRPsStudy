{
    "code": "def pretty_search_results(res: SearchResult, display_intermediate: bool = False) -> str:\n    # TODO what is display_intermediate\n    ret: str = \"\"\n    table = Table(show_header=False, box=box.ROUNDED, safe_box=False)\n    # Only print the checker if we need to. Normal people don't know what\n    # \"quadgrams\", \"brandon\", \"json checker\" is.\n    # We print the checker if its regex or another language, so long as it starts with:\n    # \"The\" like \"The plaintext is a Uniform Resource Locator (URL).\"\n    if len(res.check_res) != 0 and (\"The\" == res.check_res[0:3] or \"Passed\" == res.check_res[0:6]):\n        ret += f\"{res.check_res}\\n\"\n\n    def add_one():\n        out = \"\"\n        if i.name == \"utf8\":\n            out += f\"   [#808080]{i.name}[/#808080]\\n\"\n        else:\n            out += f\"   {i.name}\"\n        already_broken = False\n        if i.result.key_info is not None:\n            out += f\":\\n    Key: {i.result.key_info}\\n\"\n            already_broken = True\n        if i.result.misc_info is not None:\n            if not already_broken:\n                out += \":\\n\"\n            out += f\"    Misc: {i.result.misc_info}\\n\"\n            already_broken = True\n        if display_intermediate:\n            if not already_broken:\n                out += \":\\n\"\n            out += f'    Value: \"{i.result.value}\"\\n'\n            already_broken = True\n        if not already_broken:\n            out += \"\\n\"\n        return out, already_broken\n\n    # Skip the 'input' and print in order\n    already_broken = False\n    out = \"\"\n    for i in res.path[1:]:\n        output, already_broken = add_one()\n        out += output\n\n    if out:\n        if len(out.split(\"\\n\")) > 1:\n            ret += \"Formats used:\\n\"\n        else:\n            ret += \"Format used:\\n\"\n        ret += out\n\n    # Remove trailing newline\n    ret = ret[:-1]\n\n    # If we didn't show intermediate steps, then print the final result\n    if already_broken:\n        ret += f\"\"\"\\nPlaintext: [bold green]\"{escape(res.path[-1].result.value)}\"[bold green]\"\"\"\n    else:\n        ret += f\"\"\"Plaintext: [bold green]\"{escape(res.path[-1].result.value)}\"[bold green]\"\"\"\n\n    table.add_row(ret)\n    return table",
    "smell": []
}