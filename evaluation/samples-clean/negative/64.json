{
    "code": "def get_fast_rcnn_blob_names(is_training=True):\n    \"\"\"Fast R-CNN blob names.\"\"\"\n    # rois blob: holds R regions of interest, each is a 5-tuple\n    # (batch_idx, x1, y1, x2, y2) specifying an image batch index and a\n    # rectangle (x1, y1, x2, y2)\n    blob_names = ['rois']\n    if is_training:\n        # labels_int32 blob: R categorical labels in [0, ..., K] for K\n        # foreground classes plus background\n        blob_names += ['labels_int32']\n    if is_training:\n        # bbox_targets blob: R bounding-box regression targets with 4\n        # targets per class\n        blob_names += ['bbox_targets']\n        # bbox_inside_weights blob: At most 4 targets per roi are active\n        # this binary vector sepcifies the subset of active targets\n        blob_names += ['bbox_inside_weights']\n        blob_names += ['bbox_outside_weights']\n    if is_training and cfg.MODEL.MASK_ON:\n        # 'mask_rois': RoIs sampled for training the mask prediction branch.\n        # Shape is (#masks, 5) in format (batch_idx, x1, y1, x2, y2).\n        blob_names += ['mask_rois']\n        # 'roi_has_mask': binary labels for the RoIs specified in 'rois'\n        # indicating if each RoI has a mask or not. Note that in some cases\n        # a *bg* RoI will have an all -1 (ignore) mask associated with it in\n        # the case that no fg RoIs can be sampled. Shape is (batchsize).\n        blob_names += ['roi_has_mask_int32']\n        # 'masks_int32' holds binary masks for the RoIs specified in\n        # 'mask_rois'. Shape is (#fg, M * M) where M is the ground truth\n        # mask size.\n        blob_names += ['masks_int32']\n    if is_training and cfg.MODEL.KEYPOINTS_ON:\n        # 'keypoint_rois': RoIs sampled for training the keypoint prediction\n        # branch. Shape is (#instances, 5) in format (batch_idx, x1, y1, x2,\n        # y2).\n        blob_names += ['keypoint_rois']\n        # 'keypoint_locations_int32': index of keypoint in\n        # KRCNN.HEATMAP_SIZE**2 sized array. Shape is (#instances). Used in\n        # SoftmaxWithLoss.\n        blob_names += ['keypoint_locations_int32']\n        # 'keypoint_weights': weight assigned to each target in\n        # 'keypoint_locations_int32'. Shape is (#instances). Used in\n        # SoftmaxWithLoss.\n        blob_names += ['keypoint_weights']\n        # 'keypoint_loss_normalizer': optional normalization factor to use if\n        # cfg.KRCNN.NORMALIZE_BY_VISIBLE_KEYPOINTS is False.\n        blob_names += ['keypoint_loss_normalizer']\n    if cfg.FPN.FPN_ON and cfg.FPN.MULTILEVEL_ROIS:\n        # Support for FPN multi-level rois without bbox reg isn't\n        # implemented (... and may never be implemented)\n        k_max = cfg.FPN.ROI_MAX_LEVEL\n        k_min = cfg.FPN.ROI_MIN_LEVEL\n        # Same format as rois blob, but one per FPN level\n        for lvl in range(k_min, k_max + 1):\n            blob_names += ['rois_fpn' + str(lvl)]\n        blob_names += ['rois_idx_restore_int32']\n        if is_training:\n            if cfg.MODEL.MASK_ON:\n                for lvl in range(k_min, k_max + 1):\n                    blob_names += ['mask_rois_fpn' + str(lvl)]\n                blob_names += ['mask_rois_idx_restore_int32']\n            if cfg.MODEL.KEYPOINTS_ON:\n                for lvl in range(k_min, k_max + 1):\n                    blob_names += ['keypoint_rois_fpn' + str(lvl)]\n                blob_names += ['keypoint_rois_idx_restore_int32']\n    return blob_names",
    "smell": []
}