{
    "code": "def convert_key(model_name, bifpn_repeats, weights):\n\n    p6_w1 = [\n        torch.tensor([-1e4, -1e4], dtype=torch.float64)\n        for _ in range(bifpn_repeats)\n    ]\n    p5_w1 = [\n        torch.tensor([-1e4, -1e4], dtype=torch.float64)\n        for _ in range(bifpn_repeats)\n    ]\n    p4_w1 = [\n        torch.tensor([-1e4, -1e4], dtype=torch.float64)\n        for _ in range(bifpn_repeats)\n    ]\n    p3_w1 = [\n        torch.tensor([-1e4, -1e4], dtype=torch.float64)\n        for _ in range(bifpn_repeats)\n    ]\n    p4_w2 = [\n        torch.tensor([-1e4, -1e4, -1e4], dtype=torch.float64)\n        for _ in range(bifpn_repeats)\n    ]\n    p5_w2 = [\n        torch.tensor([-1e4, -1e4, -1e4], dtype=torch.float64)\n        for _ in range(bifpn_repeats)\n    ]\n    p6_w2 = [\n        torch.tensor([-1e4, -1e4, -1e4], dtype=torch.float64)\n        for _ in range(bifpn_repeats)\n    ]\n    p7_w2 = [\n        torch.tensor([-1e4, -1e4], dtype=torch.float64)\n        for _ in range(bifpn_repeats)\n    ]\n    idx2key = {\n        0: '1.0',\n        1: '2.0',\n        2: '2.1',\n        3: '3.0',\n        4: '3.1',\n        5: '4.0',\n        6: '4.1',\n        7: '4.2',\n        8: '4.3',\n        9: '4.4',\n        10: '4.5',\n        11: '5.0',\n        12: '5.1',\n        13: '5.2',\n        14: '5.3',\n        15: '5.4'\n    }\n    m = dict()\n    for k, v in weights.items():\n\n        if 'Exponential' in k or 'global_step' in k:\n            continue\n\n        seg = k.split('/')\n        if len(seg) == 1:\n            continue\n        if seg[2] == 'depthwise_conv2d':\n            v = v.transpose(1, 0)\n\n        if seg[0] == model_name:\n            if seg[1] == 'stem':\n                prefix = 'backbone.layers.0'\n                mapping = {\n                    'conv2d/kernel': 'conv.weight',\n                    'tpu_batch_normalization/beta': 'bn.bias',\n                    'tpu_batch_normalization/gamma': 'bn.weight',\n                    'tpu_batch_normalization/moving_mean': 'bn.running_mean',\n                    'tpu_batch_normalization/moving_variance':\n                    'bn.running_var',\n                }\n                suffix = mapping['/'.join(seg[2:])]\n                m[prefix + '.' + suffix] = v\n\n            elif seg[1].startswith('blocks_'):\n                idx = int(seg[1][7:])\n                prefix = '.'.join(['backbone', 'layers', idx2key[idx]])\n                base_mapping = {\n                    'depthwise_conv2d/depthwise_kernel':\n                    'depthwise_conv.conv.weight',\n                    'se/conv2d/kernel': 'se.conv1.conv.weight',\n                    'se/conv2d/bias': 'se.conv1.conv.bias',\n                    'se/conv2d_1/kernel': 'se.conv2.conv.weight',\n                    'se/conv2d_1/bias': 'se.conv2.conv.bias'\n                }\n                if idx == 0:\n                    mapping = {\n                        'conv2d/kernel':\n                        'linear_conv.conv.weight',\n                        'tpu_batch_normalization/beta':\n                        'depthwise_conv.bn.bias',\n                        'tpu_batch_normalization/gamma':\n                        'depthwise_conv.bn.weight',\n                        'tpu_batch_normalization/moving_mean':\n                        'depthwise_conv.bn.running_mean',\n                        'tpu_batch_normalization/moving_variance':\n                        'depthwise_conv.bn.running_var',\n                        'tpu_batch_normalization_1/beta':\n                        'linear_conv.bn.bias',\n                        'tpu_batch_normalization_1/gamma':\n                        'linear_conv.bn.weight',\n                        'tpu_batch_normalization_1/moving_mean':\n                        'linear_conv.bn.running_mean',\n                        'tpu_batch_normalization_1/moving_variance':\n                        'linear_conv.bn.running_var',\n                    }\n                else:\n                    mapping = {\n                        'depthwise_conv2d/depthwise_kernel':\n                        'depthwise_conv.conv.weight',\n                        'conv2d/kernel':\n                        'expand_conv.conv.weight',\n                        'conv2d_1/kernel':\n                        'linear_conv.conv.weight',\n                        'tpu_batch_normalization/beta':\n                        'expand_conv.bn.bias',\n                        'tpu_batch_normalization/gamma':\n                        'expand_conv.bn.weight',\n                        'tpu_batch_normalization/moving_mean':\n                        'expand_conv.bn.running_mean',\n                        'tpu_batch_normalization/moving_variance':\n                        'expand_conv.bn.running_var',\n                        'tpu_batch_normalization_1/beta':\n                        'depthwise_conv.bn.bias',\n                        'tpu_batch_normalization_1/gamma':\n                        'depthwise_conv.bn.weight',\n                        'tpu_batch_normalization_1/moving_mean':\n                        'depthwise_conv.bn.running_mean',\n                        'tpu_batch_normalization_1/moving_variance':\n                        'depthwise_conv.bn.running_var',\n                        'tpu_batch_normalization_2/beta':\n                        'linear_conv.bn.bias',\n                        'tpu_batch_normalization_2/gamma':\n                        'linear_conv.bn.weight',\n                        'tpu_batch_normalization_2/moving_mean':\n                        'linear_conv.bn.running_mean',\n                        'tpu_batch_normalization_2/moving_variance':\n                        'linear_conv.bn.running_var',\n                    }\n                mapping.update(base_mapping)\n                suffix = mapping['/'.join(seg[2:])]\n                m[prefix + '.' + suffix] = v\n        elif seg[0] == 'resample_p6':\n            prefix = 'neck.bifpn.0.p5_to_p6.0'\n            mapping = {\n                'conv2d/kernel': 'down_conv.weight',\n                'conv2d/bias': 'down_conv.bias',\n                'bn/beta': 'bn.bias',\n                'bn/gamma': 'bn.weight',\n                'bn/moving_mean': 'bn.running_mean',\n                'bn/moving_variance': 'bn.running_var',\n            }\n            suffix = mapping['/'.join(seg[1:])]\n            m[prefix + '.' + suffix] = v\n        elif seg[0] == 'fpn_cells':\n            fpn_idx = int(seg[1][5:])\n            prefix = '.'.join(['neck', 'bifpn', str(fpn_idx)])\n            fnode_id = int(seg[2][5])\n            if fnode_id == 0:\n                mapping = {\n                    'op_after_combine5/conv/depthwise_kernel':\n                    'conv6_up.depthwise_conv.weight',\n                    'op_after_combine5/conv/pointwise_kernel':\n                    'conv6_up.pointwise_conv.weight',\n                    'op_after_combine5/conv/bias':\n                    'conv6_up.pointwise_conv.bias',\n                    'op_after_combine5/bn/beta':\n                    'conv6_up.bn.bias',\n                    'op_after_combine5/bn/gamma':\n                    'conv6_up.bn.weight',\n                    'op_after_combine5/bn/moving_mean':\n                    'conv6_up.bn.running_mean',\n                    'op_after_combine5/bn/moving_variance':\n                    'conv6_up.bn.running_var',\n                }\n                if seg[3] != 'WSM' and seg[3] != 'WSM_1':\n                    suffix = mapping['/'.join(seg[3:])]\n                    if 'depthwise_conv' in suffix:\n                        v = v.transpose(1, 0)\n                    m[prefix + '.' + suffix] = v\n                elif seg[3] == 'WSM':\n                    p6_w1[fpn_idx][0] = v\n                elif seg[3] == 'WSM_1':\n                    p6_w1[fpn_idx][1] = v\n                if torch.min(p6_w1[fpn_idx]) > -1e4:\n                    m[prefix + '.p6_w1'] = p6_w1[fpn_idx]\n            elif fnode_id == 1:\n                base_mapping = {\n                    'op_after_combine6/conv/depthwise_kernel':\n                    'conv5_up.depthwise_conv.weight',\n                    'op_after_combine6/conv/pointwise_kernel':\n                    'conv5_up.pointwise_conv.weight',\n                    'op_after_combine6/conv/bias':\n                    'conv5_up.pointwise_conv.bias',\n                    'op_after_combine6/bn/beta':\n                    'conv5_up.bn.bias',\n                    'op_after_combine6/bn/gamma':\n                    'conv5_up.bn.weight',\n                    'op_after_combine6/bn/moving_mean':\n                    'conv5_up.bn.running_mean',\n                    'op_after_combine6/bn/moving_variance':\n                    'conv5_up.bn.running_var',\n                }\n                if fpn_idx == 0:\n                    mapping = {\n                        'resample_0_2_6/conv2d/kernel':\n                        'p5_down_channel.down_conv.weight',\n                        'resample_0_2_6/conv2d/bias':\n                        'p5_down_channel.down_conv.bias',\n                        'resample_0_2_6/bn/beta':\n                        'p5_down_channel.bn.bias',\n                        'resample_0_2_6/bn/gamma':\n                        'p5_down_channel.bn.weight',\n                        'resample_0_2_6/bn/moving_mean':\n                        'p5_down_channel.bn.running_mean',\n                        'resample_0_2_6/bn/moving_variance':\n                        'p5_down_channel.bn.running_var',\n                    }\n                    base_mapping.update(mapping)\n                if seg[3] != 'WSM' and seg[3] != 'WSM_1':\n                    suffix = base_mapping['/'.join(seg[3:])]\n                    if 'depthwise_conv' in suffix:\n                        v = v.transpose(1, 0)\n                    m[prefix + '.' + suffix] = v\n                elif seg[3] == 'WSM':\n                    p5_w1[fpn_idx][0] = v\n                elif seg[3] == 'WSM_1':\n                    p5_w1[fpn_idx][1] = v\n                if torch.min(p5_w1[fpn_idx]) > -1e4:\n                    m[prefix + '.p5_w1'] = p5_w1[fpn_idx]\n            elif fnode_id == 2:\n                base_mapping = {\n                    'op_after_combine7/conv/depthwise_kernel':\n                    'conv4_up.depthwise_conv.weight',\n                    'op_after_combine7/conv/pointwise_kernel':\n                    'conv4_up.pointwise_conv.weight',\n                    'op_after_combine7/conv/bias':\n                    'conv4_up.pointwise_conv.bias',\n                    'op_after_combine7/bn/beta':\n                    'conv4_up.bn.bias',\n                    'op_after_combine7/bn/gamma':\n                    'conv4_up.bn.weight',\n                    'op_after_combine7/bn/moving_mean':\n                    'conv4_up.bn.running_mean',\n                    'op_after_combine7/bn/moving_variance':\n                    'conv4_up.bn.running_var',\n                }\n                if fpn_idx == 0:\n                    mapping = {\n                        'resample_0_1_7/conv2d/kernel':\n                        'p4_down_channel.down_conv.weight',\n                        'resample_0_1_7/conv2d/bias':\n                        'p4_down_channel.down_conv.bias',\n                        'resample_0_1_7/bn/beta':\n                        'p4_down_channel.bn.bias',\n                        'resample_0_1_7/bn/gamma':\n                        'p4_down_channel.bn.weight',\n                        'resample_0_1_7/bn/moving_mean':\n                        'p4_down_channel.bn.running_mean',\n                        'resample_0_1_7/bn/moving_variance':\n                        'p4_down_channel.bn.running_var',\n                    }\n                    base_mapping.update(mapping)\n                if seg[3] != 'WSM' and seg[3] != 'WSM_1':\n                    suffix = base_mapping['/'.join(seg[3:])]\n                    if 'depthwise_conv' in suffix:\n                        v = v.transpose(1, 0)\n                    m[prefix + '.' + suffix] = v\n                elif seg[3] == 'WSM':\n                    p4_w1[fpn_idx][0] = v\n                elif seg[3] == 'WSM_1':\n                    p4_w1[fpn_idx][1] = v\n                if torch.min(p4_w1[fpn_idx]) > -1e4:\n                    m[prefix + '.p4_w1'] = p4_w1[fpn_idx]\n            elif fnode_id == 3:\n\n                base_mapping = {\n                    'op_after_combine8/conv/depthwise_kernel':\n                    'conv3_up.depthwise_conv.weight',\n                    'op_after_combine8/conv/pointwise_kernel':\n                    'conv3_up.pointwise_conv.weight',\n                    'op_after_combine8/conv/bias':\n                    'conv3_up.pointwise_conv.bias',\n                    'op_after_combine8/bn/beta':\n                    'conv3_up.bn.bias',\n                    'op_after_combine8/bn/gamma':\n                    'conv3_up.bn.weight',\n                    'op_after_combine8/bn/moving_mean':\n                    'conv3_up.bn.running_mean',\n                    'op_after_combine8/bn/moving_variance':\n                    'conv3_up.bn.running_var',\n                }\n                if fpn_idx == 0:\n                    mapping = {\n                        'resample_0_0_8/conv2d/kernel':\n                        'p3_down_channel.down_conv.weight',\n                        'resample_0_0_8/conv2d/bias':\n                        'p3_down_channel.down_conv.bias',\n                        'resample_0_0_8/bn/beta':\n                        'p3_down_channel.bn.bias',\n                        'resample_0_0_8/bn/gamma':\n                        'p3_down_channel.bn.weight',\n                        'resample_0_0_8/bn/moving_mean':\n                        'p3_down_channel.bn.running_mean',\n                        'resample_0_0_8/bn/moving_variance':\n                        'p3_down_channel.bn.running_var',\n                    }\n                    base_mapping.update(mapping)\n                if seg[3] != 'WSM' and seg[3] != 'WSM_1':\n                    suffix = base_mapping['/'.join(seg[3:])]\n                    if 'depthwise_conv' in suffix:\n                        v = v.transpose(1, 0)\n                    m[prefix + '.' + suffix] = v\n                elif seg[3] == 'WSM':\n                    p3_w1[fpn_idx][0] = v\n                elif seg[3] == 'WSM_1':\n                    p3_w1[fpn_idx][1] = v\n                if torch.min(p3_w1[fpn_idx]) > -1e4:\n                    m[prefix + '.p3_w1'] = p3_w1[fpn_idx]\n            elif fnode_id == 4:\n                base_mapping = {\n                    'op_after_combine9/conv/depthwise_kernel':\n                    'conv4_down.depthwise_conv.weight',\n                    'op_after_combine9/conv/pointwise_kernel':\n                    'conv4_down.pointwise_conv.weight',\n                    'op_after_combine9/conv/bias':\n                    'conv4_down.pointwise_conv.bias',\n                    'op_after_combine9/bn/beta':\n                    'conv4_down.bn.bias',\n                    'op_after_combine9/bn/gamma':\n                    'conv4_down.bn.weight',\n                    'op_after_combine9/bn/moving_mean':\n                    'conv4_down.bn.running_mean',\n                    'op_after_combine9/bn/moving_variance':\n                    'conv4_down.bn.running_var',\n                }\n                if fpn_idx == 0:\n                    mapping = {\n                        'resample_0_1_9/conv2d/kernel':\n                        'p4_level_connection.down_conv.weight',\n                        'resample_0_1_9/conv2d/bias':\n                        'p4_level_connection.down_conv.bias',\n                        'resample_0_1_9/bn/beta':\n                        'p4_level_connection.bn.bias',\n                        'resample_0_1_9/bn/gamma':\n                        'p4_level_connection.bn.weight',\n                        'resample_0_1_9/bn/moving_mean':\n                        'p4_level_connection.bn.running_mean',\n                        'resample_0_1_9/bn/moving_variance':\n                        'p4_level_connection.bn.running_var',\n                    }\n                    base_mapping.update(mapping)\n                if seg[3] != 'WSM' and seg[3] != 'WSM_1' and seg[3] != 'WSM_2':\n                    suffix = base_mapping['/'.join(seg[3:])]\n                    if 'depthwise_conv' in suffix:\n                        v = v.transpose(1, 0)\n                    m[prefix + '.' + suffix] = v\n                elif seg[3] == 'WSM':\n                    p4_w2[fpn_idx][0] = v\n                elif seg[3] == 'WSM_1':\n                    p4_w2[fpn_idx][1] = v\n                elif seg[3] == 'WSM_2':\n                    p4_w2[fpn_idx][2] = v\n                if torch.min(p4_w2[fpn_idx]) > -1e4:\n                    m[prefix + '.p4_w2'] = p4_w2[fpn_idx]\n            elif fnode_id == 5:\n                base_mapping = {\n                    'op_after_combine10/conv/depthwise_kernel':\n                    'conv5_down.depthwise_conv.weight',\n                    'op_after_combine10/conv/pointwise_kernel':\n                    'conv5_down.pointwise_conv.weight',\n                    'op_after_combine10/conv/bias':\n                    'conv5_down.pointwise_conv.bias',\n                    'op_after_combine10/bn/beta':\n                    'conv5_down.bn.bias',\n                    'op_after_combine10/bn/gamma':\n                    'conv5_down.bn.weight',\n                    'op_after_combine10/bn/moving_mean':\n                    'conv5_down.bn.running_mean',\n                    'op_after_combine10/bn/moving_variance':\n                    'conv5_down.bn.running_var',\n                }\n                if fpn_idx == 0:\n                    mapping = {\n                        'resample_0_2_10/conv2d/kernel':\n                        'p5_level_connection.down_conv.weight',\n                        'resample_0_2_10/conv2d/bias':\n                        'p5_level_connection.down_conv.bias',\n                        'resample_0_2_10/bn/beta':\n                        'p5_level_connection.bn.bias',\n                        'resample_0_2_10/bn/gamma':\n                        'p5_level_connection.bn.weight',\n                        'resample_0_2_10/bn/moving_mean':\n                        'p5_level_connection.bn.running_mean',\n                        'resample_0_2_10/bn/moving_variance':\n                        'p5_level_connection.bn.running_var',\n                    }\n                    base_mapping.update(mapping)\n                if seg[3] != 'WSM' and seg[3] != 'WSM_1' and seg[3] != 'WSM_2':\n                    suffix = base_mapping['/'.join(seg[3:])]\n                    if 'depthwise_conv' in suffix:\n                        v = v.transpose(1, 0)\n                    m[prefix + '.' + suffix] = v\n                elif seg[3] == 'WSM':\n                    p5_w2[fpn_idx][0] = v\n                elif seg[3] == 'WSM_1':\n                    p5_w2[fpn_idx][1] = v\n                elif seg[3] == 'WSM_2':\n                    p5_w2[fpn_idx][2] = v\n                if torch.min(p5_w2[fpn_idx]) > -1e4:\n                    m[prefix + '.p5_w2'] = p5_w2[fpn_idx]\n            elif fnode_id == 6:\n                base_mapping = {\n                    'op_after_combine11/conv/depthwise_kernel':\n                    'conv6_down.depthwise_conv.weight',\n                    'op_after_combine11/conv/pointwise_kernel':\n                    'conv6_down.pointwise_conv.weight',\n                    'op_after_combine11/conv/bias':\n                    'conv6_down.pointwise_conv.bias',\n                    'op_after_combine11/bn/beta':\n                    'conv6_down.bn.bias',\n                    'op_after_combine11/bn/gamma':\n                    'conv6_down.bn.weight',\n                    'op_after_combine11/bn/moving_mean':\n                    'conv6_down.bn.running_mean',\n                    'op_after_combine11/bn/moving_variance':\n                    'conv6_down.bn.running_var',\n                }\n                if seg[3] != 'WSM' and seg[3] != 'WSM_1' and seg[3] != 'WSM_2':\n                    suffix = base_mapping['/'.join(seg[3:])]\n                    if 'depthwise_conv' in suffix:\n                        v = v.transpose(1, 0)\n                    m[prefix + '.' + suffix] = v\n                elif seg[3] == 'WSM':\n                    p6_w2[fpn_idx][0] = v\n                elif seg[3] == 'WSM_1':\n                    p6_w2[fpn_idx][1] = v\n                elif seg[3] == 'WSM_2':\n                    p6_w2[fpn_idx][2] = v\n                if torch.min(p6_w2[fpn_idx]) > -1e4:\n                    m[prefix + '.p6_w2'] = p6_w2[fpn_idx]\n            elif fnode_id == 7:\n                base_mapping = {\n                    'op_after_combine12/conv/depthwise_kernel':\n                    'conv7_down.depthwise_conv.weight',\n                    'op_after_combine12/conv/pointwise_kernel':\n                    'conv7_down.pointwise_conv.weight',\n                    'op_after_combine12/conv/bias':\n                    'conv7_down.pointwise_conv.bias',\n                    'op_after_combine12/bn/beta':\n                    'conv7_down.bn.bias',\n                    'op_after_combine12/bn/gamma':\n                    'conv7_down.bn.weight',\n                    'op_after_combine12/bn/moving_mean':\n                    'conv7_down.bn.running_mean',\n                    'op_after_combine12/bn/moving_variance':\n                    'conv7_down.bn.running_var',\n                }\n                if seg[3] != 'WSM' and seg[3] != 'WSM_1' and seg[3] != 'WSM_2':\n                    suffix = base_mapping['/'.join(seg[3:])]\n                    if 'depthwise_conv' in suffix:\n                        v = v.transpose(1, 0)\n                    m[prefix + '.' + suffix] = v\n                elif seg[3] == 'WSM':\n                    p7_w2[fpn_idx][0] = v\n                elif seg[3] == 'WSM_1':\n                    p7_w2[fpn_idx][1] = v\n                if torch.min(p7_w2[fpn_idx]) > -1e4:\n                    m[prefix + '.p7_w2'] = p7_w2[fpn_idx]\n        elif seg[0] == 'box_net':\n            if 'box-predict' in seg[1]:\n                prefix = '.'.join(['bbox_head', 'reg_header'])\n                base_mapping = {\n                    'depthwise_kernel': 'depthwise_conv.weight',\n                    'pointwise_kernel': 'pointwise_conv.weight',\n                    'bias': 'pointwise_conv.bias'\n                }\n                suffix = base_mapping['/'.join(seg[2:])]\n                if 'depthwise_conv' in suffix:\n                    v = v.transpose(1, 0)\n                m[prefix + '.' + suffix] = v\n            elif 'bn' in seg[1]:\n                bbox_conv_idx = int(seg[1][4])\n                bbox_bn_idx = int(seg[1][9]) - 3\n                prefix = '.'.join([\n                    'bbox_head', 'reg_bn_list',\n                    str(bbox_conv_idx),\n                    str(bbox_bn_idx)\n                ])\n                base_mapping = {\n                    'beta': 'bias',\n                    'gamma': 'weight',\n                    'moving_mean': 'running_mean',\n                    'moving_variance': 'running_var'\n                }\n                suffix = base_mapping['/'.join(seg[2:])]\n                m[prefix + '.' + suffix] = v\n            else:\n                bbox_conv_idx = int(seg[1][4])\n                prefix = '.'.join(\n                    ['bbox_head', 'reg_conv_list',\n                     str(bbox_conv_idx)])\n                base_mapping = {\n                    'depthwise_kernel': 'depthwise_conv.weight',\n                    'pointwise_kernel': 'pointwise_conv.weight',\n                    'bias': 'pointwise_conv.bias'\n                }\n                suffix = base_mapping['/'.join(seg[2:])]\n                if 'depthwise_conv' in suffix:\n                    v = v.transpose(1, 0)\n                m[prefix + '.' + suffix] = v\n        elif seg[0] == 'class_net':\n            if 'class-predict' in seg[1]:\n                prefix = '.'.join(['bbox_head', 'cls_header'])\n                base_mapping = {\n                    'depthwise_kernel': 'depthwise_conv.weight',\n                    'pointwise_kernel': 'pointwise_conv.weight',\n                    'bias': 'pointwise_conv.bias'\n                }\n                suffix = base_mapping['/'.join(seg[2:])]\n                if 'depthwise_conv' in suffix:\n                    v = v.transpose(1, 0)\n                m[prefix + '.' + suffix] = v\n            elif 'bn' in seg[1]:\n                cls_conv_idx = int(seg[1][6])\n                cls_bn_idx = int(seg[1][11]) - 3\n                prefix = '.'.join([\n                    'bbox_head', 'cls_bn_list',\n                    str(cls_conv_idx),\n                    str(cls_bn_idx)\n                ])\n                base_mapping = {\n                    'beta': 'bias',\n                    'gamma': 'weight',\n                    'moving_mean': 'running_mean',\n                    'moving_variance': 'running_var'\n                }\n                suffix = base_mapping['/'.join(seg[2:])]\n                m[prefix + '.' + suffix] = v\n            else:\n                cls_conv_idx = int(seg[1][6])\n                prefix = '.'.join(\n                    ['bbox_head', 'cls_conv_list',\n                     str(cls_conv_idx)])\n                base_mapping = {\n                    'depthwise_kernel': 'depthwise_conv.weight',\n                    'pointwise_kernel': 'pointwise_conv.weight',\n                    'bias': 'pointwise_conv.bias'\n                }\n                suffix = base_mapping['/'.join(seg[2:])]\n                if 'depthwise_conv' in suffix:\n                    v = v.transpose(1, 0)\n                m[prefix + '.' + suffix] = v\n    return m",
    "smell": []
}