{
    "code": "def __init__(\n      self,\n      encoder_network: tf.keras.Model,\n      mlm_activation=None,\n      mlm_initializer='glorot_uniform',\n      classification_heads: Optional[List[tf.keras.layers.Layer]] = None,\n      customized_masked_lm: Optional[tf.keras.layers.Layer] = None,\n      name: str = 'bert',\n      **kwargs):\n\n    inputs = copy.copy(encoder_network.inputs)\n    outputs = {}\n    encoder_network_outputs = encoder_network(inputs)\n    if isinstance(encoder_network_outputs, list):\n      outputs['pooled_output'] = encoder_network_outputs[1]\n      if isinstance(encoder_network_outputs[0], list):\n        outputs['encoder_outputs'] = encoder_network_outputs[0]\n        outputs['sequence_output'] = encoder_network_outputs[0][-1]\n      else:\n        outputs['sequence_output'] = encoder_network_outputs[0]\n    elif isinstance(encoder_network_outputs, dict):\n      outputs = encoder_network_outputs\n    else:\n      raise ValueError('encoder_network\\'s output should be either a list '\n                       'or a dict, but got %s' % encoder_network_outputs)\n\n    masked_lm_positions = tf.keras.layers.Input(\n        shape=(None,), name='masked_lm_positions', dtype=tf.int32)\n    inputs.append(masked_lm_positions)\n    masked_lm_layer = customized_masked_lm or layers.MaskedLM(\n        embedding_table=encoder_network.get_embedding_table(),\n        activation=mlm_activation,\n        initializer=mlm_initializer,\n        name='cls/predictions')\n    sequence_output = outputs['sequence_output']\n    outputs['mlm_logits'] = masked_lm_layer(\n        sequence_output, masked_positions=masked_lm_positions)\n\n    classification_head_layers = classification_heads or []\n    for cls_head in classification_head_layers:\n      cls_outputs = cls_head(sequence_output)\n      if isinstance(cls_outputs, dict):\n        outputs.update(cls_outputs)\n      else:\n        outputs[cls_head.name] = cls_outputs\n\n    super(MobileBERTEdgeTPUPretrainer, self).__init__(\n        inputs=inputs,\n        outputs=outputs,\n        name=name,\n        **kwargs)\n\n    self._config = {\n        'encoder_network': encoder_network,\n        'mlm_activation': mlm_activation,\n        'mlm_initializer': mlm_initializer,\n        'classification_heads': classification_heads,\n        'customized_masked_lm': customized_masked_lm,\n        'name': name,\n    }\n\n    self.encoder_network = encoder_network\n    self.masked_lm = masked_lm_layer\n    self.classification_heads = classification_head_layers",
    "smell": []
}