{
    "code": "def str_cat(arr, others=None, sep=None, na_rep=None):\n    \"\"\"\n    Concatenate strings in the Series/Index with given separator.\n\n    Parameters\n    ----------\n    others : list-like, or list of list-likes\n      If None, returns str concatenating strings of the Series\n    sep : string or None, default None\n    na_rep : string or None, default None\n        If None, an NA in any array will propagate\n\n    Returns\n    -------\n    concat : Series/Index of objects or str\n\n    Examples\n    --------\n    If ``others`` is specified, corresponding values are\n    concatenated with the separator. Result will be a Series of strings.\n\n    >>> Series(['a', 'b', 'c']).str.cat(['A', 'B', 'C'], sep=',')\n    0    a,A\n    1    b,B\n    2    c,C\n    dtype: object\n\n    Otherwise, strings in the Series are concatenated. Result will be a string.\n\n    >>> Series(['a', 'b', 'c']).str.cat(sep=',')\n    'a,b,c'\n\n    Also, you can pass a list of list-likes.\n\n    >>> Series(['a', 'b']).str.cat([['x', 'y'], ['1', '2']], sep=',')\n    0    a,x,1\n    1    b,y,2\n    dtype: object\n    \"\"\"\n    if sep is None:\n        sep = ''\n\n    if others is not None:\n        arrays = _get_array_list(arr, others)\n\n        n = _length_check(arrays)\n        masks = np.array([isnull(x) for x in arrays])\n        cats = None\n\n        if na_rep is None:\n            na_mask = np.logical_or.reduce(masks, axis=0)\n\n            result = np.empty(n, dtype=object)\n            np.putmask(result, na_mask, np.nan)\n\n            notmask = ~na_mask\n\n            tuples = zip(*[x[notmask] for x in arrays])\n            cats = [sep.join(tup) for tup in tuples]\n\n            result[notmask] = cats\n        else:\n            for i, x in enumerate(arrays):\n                x = np.where(masks[i], na_rep, x)\n                if cats is None:\n                    cats = x\n                else:\n                    cats = cats + sep + x\n\n            result = cats\n\n        return result\n    else:\n        arr = np.asarray(arr, dtype=object)\n        mask = isnull(arr)\n        if na_rep is None and mask.any():\n            return np.nan\n        return sep.join(np.where(mask, na_rep, arr))",
    "smell": []
}