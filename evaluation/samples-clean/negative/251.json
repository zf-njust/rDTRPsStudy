{
    "code": "def binary_search_tree() -> None:\n    r\"\"\"\n    Example\n                  8\n                 / \\\n                3   10\n               / \\    \\\n              1   6    14\n                 / \\   /\n                4   7 13\n\n    >>> t = BinarySearchTree()\n    >>> t.insert(8, 3, 6, 1, 10, 14, 13, 4, 7)\n    >>> print(\" \".join(repr(i.value) for i in t.traversal_tree()))\n    8 3 1 6 4 7 10 14 13\n    >>> print(\" \".join(repr(i.value) for i in t.traversal_tree(postorder)))\n    1 4 7 6 3 13 14 10 8\n    >>> BinarySearchTree().search(6)\n    Traceback (most recent call last):\n        ...\n    IndexError: Warning: Tree is empty! please use another.\n    \"\"\"\n    testlist = (8, 3, 6, 1, 10, 14, 13, 4, 7)\n    t = BinarySearchTree()\n    for i in testlist:\n        t.insert(i)\n\n    # Prints all the elements of the list in order traversal\n    print(t)\n\n    if t.search(6) is not None:\n        print(\"The value 6 exists\")\n    else:\n        print(\"The value 6 doesn't exist\")\n\n    if t.search(-1) is not None:\n        print(\"The value -1 exists\")\n    else:\n        print(\"The value -1 doesn't exist\")\n\n    if not t.empty():\n        print(\"Max Value: \", t.get_max().value)  # type: ignore\n        print(\"Min Value: \", t.get_min().value)  # type: ignore\n\n    for i in testlist:\n        t.remove(i)\n        print(t)",
    "smell": []
}