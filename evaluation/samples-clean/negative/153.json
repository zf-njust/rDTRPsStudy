{
    "code": "def main(argv):\n  if len(argv) > 1:\n    raise app.UsageError(\"Too many command-line arguments.\")\n  gin.parse_config_files_and_bindings(FLAGS.gin_file, FLAGS.gin_params)\n\n  if bool(FLAGS.vocab_file) == bool(FLAGS.sp_model_file):\n    raise ValueError(\"Exactly one of `vocab_file` and `sp_model_file` \"\n                     \"can be specified, but got %s and %s.\" %\n                     (FLAGS.vocab_file, FLAGS.sp_model_file))\n  do_lower_case = export_tfhub_lib.get_do_lower_case(\n      FLAGS.do_lower_case, FLAGS.vocab_file, FLAGS.sp_model_file)\n\n  if FLAGS.export_type in (\"model\", \"model_with_mlm\"):\n    if bool(FLAGS.bert_config_file) == bool(FLAGS.encoder_config_file):\n      raise ValueError(\"Exactly one of `bert_config_file` and \"\n                       \"`encoder_config_file` can be specified, but got \"\n                       \"%s and %s.\" %\n                       (FLAGS.bert_config_file, FLAGS.encoder_config_file))\n    if FLAGS.bert_config_file:\n      bert_config = configs.BertConfig.from_json_file(FLAGS.bert_config_file)\n      encoder_config = None\n    else:\n      bert_config = None\n      encoder_config = encoders.EncoderConfig()\n      encoder_config = hyperparams.override_params_dict(\n          encoder_config, FLAGS.encoder_config_file, is_strict=True)\n    export_tfhub_lib.export_model(\n        FLAGS.export_path,\n        bert_config=bert_config,\n        encoder_config=encoder_config,\n        model_checkpoint_path=FLAGS.model_checkpoint_path,\n        vocab_file=FLAGS.vocab_file,\n        sp_model_file=FLAGS.sp_model_file,\n        do_lower_case=do_lower_case,\n        with_mlm=FLAGS.export_type == \"model_with_mlm\",\n        copy_pooler_dense_to_encoder=FLAGS.copy_pooler_dense_to_encoder)\n\n  elif FLAGS.export_type == \"preprocessing\":\n    export_tfhub_lib.export_preprocessing(\n        FLAGS.export_path,\n        vocab_file=FLAGS.vocab_file,\n        sp_model_file=FLAGS.sp_model_file,\n        do_lower_case=do_lower_case,\n        default_seq_length=FLAGS.default_seq_length,\n        tokenize_with_offsets=FLAGS.tokenize_with_offsets,\n        experimental_disable_assert=\n        FLAGS.experimental_disable_assert_in_preprocessing)\n\n  else:\n    raise app.UsageError(\n        \"Unknown value '%s' for flag --export_type\" % FLAGS.export_type)",
    "smell": []
}