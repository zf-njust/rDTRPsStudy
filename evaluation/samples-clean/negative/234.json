{
    "code": "def _get_packed_offsets(wd_list, total, sep, mode=\"fixed\"):\n    \"\"\"\n    Geiven a list of (width, xdescent) of each boxes, calculate the\n    total width and the x-offset positions of each items according to\n    *mode*. xdescent is analagous to the usual descent, but along the\n    x-direction. xdescent values are currently ignored.\n\n    *wd_list* : list of (width, xdescent) of boxes to be packed.\n    *sep* : spacing between boxes\n    *total* : Intended total length. None if not used.\n    *mode* : packing mode. 'fixed', 'expand', or 'equal'.\n    \"\"\"\n\n    w_list, d_list = list(zip(*wd_list))\n    # d_list is currently not used.\n\n    if mode == \"fixed\":\n        offsets_ = np.add.accumulate([0] + [w + sep for w in w_list])\n        offsets = offsets_[:-1]\n\n        if total is None:\n            total = offsets_[-1] - sep\n\n        return total, offsets\n\n    elif mode == \"expand\":\n        if len(w_list) > 1:\n            sep = (total - sum(w_list)) / (len(w_list) - 1.)\n        else:\n            sep = 0.\n        offsets_ = np.add.accumulate([0] + [w + sep for w in w_list])\n        offsets = offsets_[:-1]\n\n        return total, offsets\n\n    elif mode == \"equal\":\n        maxh = max(w_list)\n        if total is None:\n            total = (maxh + sep) * len(w_list)\n        else:\n            sep = float(total) / (len(w_list)) - maxh\n\n        offsets = np.array([(maxh + sep) * i for i in range(len(w_list))])\n\n        return total, offsets\n\n    else:\n        raise ValueError(\"Unknown mode : %s\" % (mode,))",
    "smell": []
}