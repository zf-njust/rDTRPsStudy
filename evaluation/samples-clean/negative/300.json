{
    "code": "def item(\n    value: Any, _parent: Optional[\"Item\"] = None, _sort_keys: bool = False\n) -> \"Item\":\n    \"\"\"Create a TOML item from a Python object.\n\n    :Example:\n\n    >>> item(42)\n    42\n    >>> item([1, 2, 3])\n    [1, 2, 3]\n    >>> item({'a': 1, 'b': 2})\n    a = 1\n    b = 2\n    \"\"\"\n\n    from pipenv.vendor.tomlkit.container import Container\n\n    if isinstance(value, Item):\n        return value\n\n    if isinstance(value, bool):\n        return Bool(value, Trivia())\n    elif isinstance(value, int):\n        return Integer(value, Trivia(), str(value))\n    elif isinstance(value, float):\n        return Float(value, Trivia(), str(value))\n    elif isinstance(value, dict):\n        table_constructor = (\n            InlineTable if isinstance(_parent, (Array, InlineTable)) else Table\n        )\n        val = table_constructor(Container(), Trivia(), False)\n        for k, v in sorted(\n            value.items(),\n            key=lambda i: (isinstance(i[1], dict), i[0] if _sort_keys else 1),\n        ):\n            val[k] = item(v, _parent=val, _sort_keys=_sort_keys)\n\n        return val\n    elif isinstance(value, (list, tuple)):\n        if (\n            value\n            and all(isinstance(v, dict) for v in value)\n            and (_parent is None or isinstance(_parent, Table))\n        ):\n            a = AoT([])\n            table_constructor = Table\n        else:\n            a = Array([], Trivia())\n            table_constructor = InlineTable\n\n        for v in value:\n            if isinstance(v, dict):\n                table = table_constructor(Container(), Trivia(), True)\n\n                for k, _v in sorted(\n                    v.items(),\n                    key=lambda i: (isinstance(i[1], dict), i[0] if _sort_keys else 1),\n                ):\n                    i = item(_v, _parent=table, _sort_keys=_sort_keys)\n                    if isinstance(table, InlineTable):\n                        i.trivia.trail = \"\"\n\n                    table[k] = i\n\n                v = table\n\n            a.append(v)\n\n        return a\n    elif isinstance(value, str):\n        return String.from_raw(value)\n    elif isinstance(value, datetime):\n        return DateTime(\n            value.year,\n            value.month,\n            value.day,\n            value.hour,\n            value.minute,\n            value.second,\n            value.microsecond,\n            value.tzinfo,\n            Trivia(),\n            value.isoformat().replace(\"+00:00\", \"Z\"),\n        )\n    elif isinstance(value, date):\n        return Date(value.year, value.month, value.day, Trivia(), value.isoformat())\n    elif isinstance(value, time):\n        return Time(\n            value.hour,\n            value.minute,\n            value.second,\n            value.microsecond,\n            value.tzinfo,\n            Trivia(),\n            value.isoformat(),\n        )\n\n    raise ValueError(f\"Invalid type {type(value)}\")",
    "smell": []
}