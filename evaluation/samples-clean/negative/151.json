{
    "code": "def _check_stat_op(self, name, alternative, obj=None, has_skipna=True):\n        if obj is None:\n            obj = self.panel4d\n\n            # # set some NAs\n            # obj.ix[5:10] = np.nan\n            # obj.ix[15:20, -2:] = np.nan\n\n        f = getattr(obj, name)\n\n        if has_skipna:\n            def skipna_wrapper(x):\n                nona = remove_na(x)\n                if len(nona) == 0:\n                    return np.nan\n                return alternative(nona)\n\n            def wrapper(x):\n                return alternative(np.asarray(x))\n\n            for i in range(obj.ndim):\n                result = f(axis=i, skipna=False)\n                assert_panel_equal(result, obj.apply(wrapper, axis=i))\n        else:\n            skipna_wrapper = alternative\n            wrapper = alternative\n\n        for i in range(obj.ndim):\n            result = f(axis=i)\n            if not tm._incompat_bottleneck_version(name):\n                assert_panel_equal(result, obj.apply(skipna_wrapper, axis=i))\n\n        self.assertRaises(Exception, f, axis=obj.ndim)",
    "smell": []
}