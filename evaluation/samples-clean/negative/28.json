{
    "code": "def on_key_press(self, symbol: int, modifiers: int) -> None:\n        super().on_key_press(symbol, modifiers)\n        char = chr(symbol)\n        if char == SELECT_KEY and modifiers == 0:\n            self.enable_selection()\n        if char == UNSELECT_KEY:\n            self.clear_selection()\n        elif char in GRAB_KEYS and modifiers == 0:\n            self.prepare_grab()\n        elif char == RESIZE_KEY and modifiers in [0, SHIFT_MODIFIER]:\n            self.prepare_resizing(about_corner=(modifiers == SHIFT_MODIFIER))\n        elif symbol == SHIFT_SYMBOL:\n            if self.window.is_key_pressed(ord(\"t\")):\n                self.prepare_resizing(about_corner=True)\n        elif char == COLOR_KEY and modifiers == 0:\n            self.toggle_color_palette()\n        elif char == INFORMATION_KEY and modifiers == 0:\n            self.display_information()\n        elif char == \"c\" and modifiers == COMMAND_MODIFIER:\n            self.copy_selection()\n        elif char == \"v\" and modifiers == COMMAND_MODIFIER:\n            self.paste_selection()\n        elif char == \"x\" and modifiers == COMMAND_MODIFIER:\n            self.copy_selection()\n            self.delete_selection()\n        elif symbol == DELETE_SYMBOL:\n            self.delete_selection()\n        elif char == \"a\" and modifiers == COMMAND_MODIFIER:\n            self.clear_selection()\n            self.add_to_selection(*self.mobjects)\n        elif char == \"g\" and modifiers == COMMAND_MODIFIER:\n            self.group_selection()\n        elif char == \"g\" and modifiers == COMMAND_MODIFIER | SHIFT_MODIFIER:\n            self.ungroup_selection()\n        elif char == \"t\" and modifiers == COMMAND_MODIFIER:\n            self.toggle_selection_mode()\n        elif char == \"s\" and modifiers == COMMAND_MODIFIER:\n            self.save_selection_to_file()\n        elif char == PAN_3D_KEY and modifiers == COMMAND_MODIFIER:\n            self.copy_frame_anim_call()\n        elif symbol in ARROW_SYMBOLS:\n            self.nudge_selection(\n                vect=[LEFT, UP, RIGHT, DOWN][ARROW_SYMBOLS.index(symbol)],\n                large=(modifiers & SHIFT_MODIFIER),\n            )\n        # Adding crosshair\n        if char == CURSOR_KEY:\n            if self.crosshair in self.mobjects:\n                self.remove(self.crosshair)\n            else:\n                self.add(self.crosshair)\n        if char == SELECT_KEY:\n            self.add(self.crosshair)\n\n        # Conditions for saving state\n        if char in [GRAB_KEY, X_GRAB_KEY, Y_GRAB_KEY, RESIZE_KEY]:\n            self.save_state()",
    "smell": []
}