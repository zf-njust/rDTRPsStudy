{
    "code": "def main(args):\n    logger.info(args)\n\n    use_cuda = torch.cuda.is_available() and not args.cpu\n\n    with open(args.vocoder_cfg) as f:\n        vocoder_cfg = json.load(f)\n    vocoder = CodeHiFiGANVocoder(args.vocoder, vocoder_cfg)\n    if use_cuda:\n        vocoder = vocoder.cuda()\n\n    data = load_data(args.in_file)\n\n    if args.results_path:\n        Path(args.results_path).mkdir(exist_ok=True, parents=True)\n\n    for i, d in tqdm(enumerate(data), total=len(data)):\n        code_key = \"cpc_km100\" if \"cpc_km100\" in d else \"hubert\"\n        code = list(map(int, d[code_key].split()))\n\n        x = {\n            \"code\": torch.LongTensor(code).view(1, -1),\n            \"f0\": torch.Tensor(d[\"f0\"]).view(1, -1),\n        }\n\n        f0_up_ratio = get_f0_upsample_ratio(\n            vocoder_cfg[\"code_hop_size\"], vocoder_cfg[\"hop_size\"]\n        )\n        if f0_up_ratio > 1:\n            bsz, cond_length = x[\"f0\"].size()\n            x[\"f0\"] = x[\"f0\"].unsqueeze(2).repeat(1, 1, f0_up_ratio).view(bsz, -1)\n\n        x = utils.move_to_cuda(x) if use_cuda else x\n        wav = vocoder(x)\n        dump_result(args, d, i, wav)",
    "smell": []
}