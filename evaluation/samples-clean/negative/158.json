{
    "code": "def set_assets_hardware_info(assets, result, **kwargs):\n    \"\"\"\n    Using ops task run result, to update asset info\n\n    @shared_task must be exit, because we using it as a task callback, is must\n    be a celery task also\n    :param assets:\n    :param result:\n    :param kwargs: {task_name: \"\"}\n    :return:\n    \"\"\"\n    result_raw = result[0]\n    assets_updated = []\n    success_result = result_raw.get('ok', {})\n\n    for asset in assets:\n        hostname = asset.hostname\n        info = success_result.get(hostname, {})\n        info = info.get('setup', {}).get('ansible_facts', {})\n        if not info:\n            logger.error(_(\"Get asset info failed: {}\").format(hostname))\n            continue\n        ___vendor = info.get('ansible_system_vendor', 'Unknown')\n        ___model = info.get('ansible_product_name', 'Unknown')\n        ___sn = info.get('ansible_product_serial', 'Unknown')\n\n        for ___cpu_model in info.get('ansible_processor', []):\n            if ___cpu_model.endswith('GHz') or ___cpu_model.startswith(\"Intel\"):\n                break\n        else:\n            ___cpu_model = 'Unknown'\n        ___cpu_model = ___cpu_model[:48]\n        ___cpu_count = info.get('ansible_processor_count', 0)\n        ___cpu_cores = info.get('ansible_processor_cores', None) or \\\n                       len(info.get('ansible_processor', []))\n        ___cpu_vcpus = info.get('ansible_processor_vcpus', 0)\n        ___memory = '%s %s' % capacity_convert(\n            '{} MB'.format(info.get('ansible_memtotal_mb'))\n        )\n        disk_info = {}\n        for dev, dev_info in info.get('ansible_devices', {}).items():\n            if disk_pattern.match(dev) and dev_info['removable'] == '0':\n                disk_info[dev] = dev_info['size']\n        ___disk_total = '%s %s' % sum_capacity(disk_info.values())\n        ___disk_info = json.dumps(disk_info)\n\n        # ___platform = info.get('ansible_system', 'Unknown')\n        ___os = info.get('ansible_distribution', 'Unknown')\n        ___os_version = info.get('ansible_distribution_version', 'Unknown')\n        ___os_arch = info.get('ansible_architecture', 'Unknown')\n        ___hostname_raw = info.get('ansible_hostname', 'Unknown')\n\n        for k, v in locals().items():\n            if k.startswith('___'):\n                setattr(asset, k.strip('_'), v)\n        asset.save()\n        assets_updated.append(asset)\n    return assets_updated",
    "smell": []
}