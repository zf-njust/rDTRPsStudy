{
    "code": "def __init__(self,\n               input_specs: Dict[str, tf.TensorShape],\n               task_outputs: Mapping[str, int],\n               input_levels: List[str],\n               heatmap_bias: float = -2.19,\n               **kwargs):\n    \"\"\"CenterNet Head Initialization.\n\n    Args:\n      input_specs: A `dict` of input specifications.\n      task_outputs: A `dict`, with key-value pairs denoting the names of the\n        outputs and the desired channel depth of each output.\n      input_levels: list of str representing the level used as input to the\n        CenternetHead from the backbone. For example, ['2_0', '2'] should be\n        set for hourglass-104 has two hourglass-52 modules, since the output\n        of hourglass backbones is organized as:\n          '2' -> the last layer of output\n          '2_0' -> the first layer of output\n          ......\n          '2_{num_hourglasses-2}' -> the second to last layer of output.\n      heatmap_bias: `float`, constant value to initialize the convolution layer\n        bias vector if it is responsible for generating a heatmap (not for\n        regressed predictions).\n      **kwargs: Additional keyword arguments to be passed.\n\n    Returns:\n      dictionary where the keys-value pairs denote the names of the output\n      and the respective output tensor\n    \"\"\"\n    assert input_levels, f'Please specify input levels: {input_levels}'\n\n    self._input_specs = input_specs\n    self._task_outputs = task_outputs\n    self._input_levels = input_levels\n    self._heatmap_bias = heatmap_bias\n    self._num_inputs = len(input_levels)\n\n    inputs = {level: tf.keras.layers.Input(shape=self._input_specs[level][1:])\n              for level in input_levels}\n    outputs = {}\n\n    for key in self._task_outputs:\n      # pylint: disable=g-complex-comprehension\n      outputs[key] = [\n          cn_nn_blocks.CenterNetHeadConv(\n              output_filters=self._task_outputs[key],\n              bias_init=self._heatmap_bias if 'heatmaps' in key else 0,\n              name=key + str(i),\n          )(inputs[i])\n          for i in input_levels\n      ]\n\n    self._output_specs = {\n        key: [value[i].get_shape() for i in range(self._num_inputs)]\n        for key, value in outputs.items()\n    }\n\n    super().__init__(inputs=inputs, outputs=outputs,\n                     name='CenterNetHead', **kwargs)",
    "smell": []
}