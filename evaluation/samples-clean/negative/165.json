{
    "code": "def test_create_shared_memory(space, expected_type, n, ctx):\n    def assert_nested_type(lhs, rhs, n):\n        assert type(lhs) == type(rhs)\n        if isinstance(lhs, (list, tuple)):\n            assert len(lhs) == len(rhs)\n            for lhs_, rhs_ in zip(lhs, rhs):\n                assert_nested_type(lhs_, rhs_, n)\n\n        elif isinstance(lhs, (dict, OrderedDict)):\n            assert set(lhs.keys()) ^ set(rhs.keys()) == set()\n            for key in lhs.keys():\n                assert_nested_type(lhs[key], rhs[key], n)\n\n        elif isinstance(lhs, SynchronizedArray):\n            # Assert the length of the array\n            assert len(lhs[:]) == n * len(rhs[:])\n            # Assert the data type\n            assert isinstance(lhs[0], type(rhs[0]))\n        else:\n            raise TypeError(f\"Got unknown type `{type(lhs)}`.\")\n\n    ctx = mp if (ctx is None) else mp.get_context(ctx)\n    shared_memory = create_shared_memory(space, n=n, ctx=ctx)\n    assert_nested_type(shared_memory, expected_type, n=n)",
    "smell": []
}