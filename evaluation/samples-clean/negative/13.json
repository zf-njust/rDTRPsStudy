{
    "code": "def __init__(self, *args, **kwargs):\n        '''\n        When a new instance of the DockerTask class gets created:\n        - call the parent class __init__ method\n        - start the logger\n        - init an instance of the docker client\n        - create a tmp dir\n        - add the temp dir to the volume binds specified in the task\n        '''\n        super(DockerTask, self).__init__(*args, **kwargs)\n        self.__logger = logger\n\n        '''init docker client\n        using the low level API as the higher level API does not allow to mount single\n        files as volumes\n        '''\n        self._client = docker.APIClient(self.docker_url)\n\n        # add latest tag if nothing else is specified by task\n        if ':' not in self.image:\n            self._image = ':'.join([self.image, 'latest'])\n        else:\n            self._image = self.image\n\n        if self.mount_tmp:\n            # create a tmp_dir, NOTE: /tmp needs to be specified for it to work on\n            # macOS, despite what the python documentation says\n            self._host_tmp_dir = mkdtemp(suffix=self.task_id,\n                                         prefix='luigi-docker-tmp-dir-',\n                                         dir='/tmp')\n\n            self._binds = ['{0}:{1}'.format(self._host_tmp_dir, self.container_tmp_dir)]\n        else:\n            self._binds = []\n\n        # update environment property with the (internal) location of tmp_dir\n        self.environment['LUIGI_TMP_DIR'] = self.container_tmp_dir\n\n        # add additional volume binds specified by the user to the tmp_Dir bind\n        if isinstance(self.binds, six.string_types):\n            self._binds.append(self.binds)\n        elif isinstance(self.binds, list):\n            self._binds.extend(self.binds)\n\n        # derive volumes (ie. list of container destination paths) from\n        # specified binds\n        self._volumes = [b.split(':')[1] for b in self._binds]",
    "smell": []
}