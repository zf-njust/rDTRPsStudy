{
    "code": "def gen_function(size, in_types):\n  eqns = []\n  in_vars = map(fresh_var, in_types)\n  cur_vars = in_vars[:]\n  for _ in range(gen_nonneg_int(size)):\n    if not cur_vars:\n      break\n    if npr.rand() < subfun_prob:\n      arg_vars = gen_subset(cur_vars)\n      arg_types = [v.vartype for v in arg_vars]\n      fun, out_types = gen_function(size / size_reduction_factor, arg_types)\n      fun = partial(eval_fun, fun)\n      fun = maybe_jit(fun, len(arg_types))\n    else:\n      arity = choice(list(primitive_generators))\n      arg_vars = gen_sized_subset(cur_vars, arity)\n      arg_types = [v.vartype for v in arg_vars]\n      prim_gen = weighted_choice(primitive_generators[arity])\n      fun, out_type = prim_gen(size, *arg_types)\n      fun = wrap_singleton(fun)\n      out_types = [out_type]\n\n    out_vars = map(fresh_var, out_types)\n    eqns.append(Eqn(arg_vars, out_vars, fun))\n    cur_vars.extend(out_vars)\n    cur_vars = thin(cur_vars, thin_prob)\n\n  out_vars = gen_subset(cur_vars)\n  return Fun(in_vars, out_vars, eqns), [v.vartype for v in out_vars]",
    "smell": []
}