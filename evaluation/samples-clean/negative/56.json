{
    "code": "def __repr__(self):\n        # type: () -> Any\n        if True:\n            arguments = []\n            if hasattr(self, 'value'):\n                # if you use repr(getattr(self, 'value')) then flake8 complains about\n                # abuse of getattr with a constant. When you change to self.value\n                # then mypy throws an error\n                arguments.append(repr(self.value))  # type: ignore\n            for key in ['anchor', 'tag', 'implicit', 'flow_style', 'style']:\n                v = getattr(self, key, None)\n                if v is not None:\n                    arguments.append(_F('{key!s}={v!r}', key=key, v=v))\n            if self.comment not in [None, CommentCheck]:\n                arguments.append('comment={!r}'.format(self.comment))\n            if SHOW_LINES:\n                arguments.append(\n                    '({}:{}/{}:{})'.format(\n                        self.start_mark.line,\n                        self.start_mark.column,\n                        self.end_mark.line,\n                        self.end_mark.column,\n                    )\n                )\n            arguments = ', '.join(arguments)  # type: ignore\n        else:\n            attributes = [\n                key\n                for key in ['anchor', 'tag', 'implicit', 'value', 'flow_style', 'style']\n                if hasattr(self, key)\n            ]\n            arguments = ', '.join(\n                [_F('{k!s}={attr!r}', k=key, attr=getattr(self, key)) for key in attributes]\n            )\n            if self.comment not in [None, CommentCheck]:\n                arguments += ', comment={!r}'.format(self.comment)\n        return _F(\n            '{self_class_name!s}({arguments!s})',\n            self_class_name=self.__class__.__name__,\n            arguments=arguments,\n        )",
    "smell": []
}