{
    "code": "def __init__(self, device, id, args):\n        if self.__class__ == MotionEvent:\n            raise NotImplementedError('class MotionEvent is abstract')\n        MotionEvent.__uniq_id += 1\n\n        #: True if the Motion Event is a Touch. Can be also verified is\n        #: `pos` is :attr:`profile`.\n        self.is_touch = False\n\n        #: Attributes to push by default, when we use :meth:`push` : x, y, z,\n        #: dx, dy, dz, ox, oy, oz, px, py, pz.\n        self.push_attrs_stack = []\n        self.push_attrs = ('x', 'y', 'z', 'dx', 'dy', 'dz', 'ox', 'oy', 'oz',\n                           'px', 'py', 'pz', 'pos')\n\n        #: Uniq ID of the touch. You can safely use this property, it will be\n        #: never the same accross all existing touches.\n        self.uid = MotionEvent.__uniq_id\n\n        #: Device used for creating this touch\n        self.device = device\n\n        # For grab\n        self.grab_list = []\n        self.grab_exclusive_class = None\n        self.grab_state = False\n\n        #: Used to determine which widget the touch is being dispatched to.\n        #: Check the :meth:`grab` function for more information.\n        self.grab_current = None\n\n        #: Profiles currently used in the touch\n        self.profile = []\n\n        #: Id of the touch, not uniq. This is generally the Id set by the input\n        #: provider, like ID in TUIO. If you have multiple TUIO source,\n        #: the same id can be used. Prefer to use :attr:`uid` attribute\n        #: instead.\n        self.id = id\n\n        #: Shape of the touch, subclass of\n        #: :class:`~kivy.input.shape.Shape`.\n        #: By default, the property is set to None\n        self.shape = None\n\n        #: X position, in 0-1 range\n        self.sx = 0.0\n        #: Y position, in 0-1 range\n        self.sy = 0.0\n        #: Z position, in 0-1 range\n        self.sz = 0.0\n        #: Origin X position, in 0-1 range.\n        self.osx = None\n        #: Origin Y position, in 0-1 range.\n        self.osy = None\n        #: Origin Z position, in 0-1 range.\n        self.osz = None\n        #: Previous X position, in 0-1 range.\n        self.psx = None\n        #: Previous Y position, in 0-1 range.\n        self.psy = None\n        #: Previous Z position, in 0-1 range.\n        self.psz = None\n        #: Delta between self.sx and self.psx, in 0-1 range.\n        self.dsx = None\n        #: Delta between self.sy and self.psy, in 0-1 range.\n        self.dsy = None\n        #: Delta between self.sz and self.psz, in 0-1 range.\n        self.dsz = None\n        #: X position, in window range\n        self.x = 0.0\n        #: Y position, in window range\n        self.y = 0.0\n        #: Z position, in window range\n        self.z = 0.0\n        #: Origin X position, in window range\n        self.ox = None\n        #: Origin Y position, in window range\n        self.oy = None\n        #: Origin Z position, in window range\n        self.oz = None\n        #: Previous X position, in window range\n        self.px = None\n        #: Previous Y position, in window range\n        self.py = None\n        #: Previous Z position, in window range\n        self.pz = None\n        #: Delta between self.x and self.px, in window range\n        self.dx = None\n        #: Delta between self.y and self.py, in window range\n        self.dy = None\n        #: Delta between self.z and self.pz, in window range\n        self.dz = None\n        #: Position (X, Y), in window range\n        self.pos = (0.0, 0.0)\n\n        #: Initial time of the touch creation\n        self.time_start = time()\n\n        #: Time of the last update\n        self.time_update = self.time_start\n\n        #: Time of the end event (last touch usage)\n        self.time_end = -1\n\n        #: Indicate if the touch is a double tap or not\n        self.is_double_tap = False\n\n        #: Indicate if the touch is a triple tap or not\n        #:\n        #: .. versionadded:: 1.7.0\n        self.is_triple_tap = False\n\n        #: If the touch is a :attr:`is_double_tap`, this is the time\n        #: between the previous tap and the current touch.\n        self.double_tap_time = 0\n\n        #: If the touch is a :attr:`is_triple_tap`, this is the time\n        #: between the first tap and the current touch.\n        #:\n        #: .. versionadded:: 1.7.0\n        self.triple_tap_time = 0\n\n        #: User data dictionary. Use this dictionary to save your own data on\n        #: the touch.\n        self.ud = EnhancedDictionary()\n\n        self.depack(args)",
    "smell": []
}