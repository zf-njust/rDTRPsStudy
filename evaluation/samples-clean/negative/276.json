{
    "code": "def set_host_overrides(self, host, hostvars=None):\n        '''\n        Override WinRM-specific options from host variables.\n        '''\n        self._winrm_host = self._play_context.remote_addr\n        self._winrm_port = int(self._play_context.port or 5986)\n        self._winrm_scheme = hostvars.get('ansible_winrm_scheme', 'http' if self._winrm_port == 5985 else 'https')\n        self._winrm_path = hostvars.get('ansible_winrm_path', '/wsman')\n        self._winrm_user = self._play_context.remote_user\n        self._winrm_pass = self._play_context.password\n\n        if hasattr(winrm, 'FEATURE_SUPPORTED_AUTHTYPES'):\n            self._winrm_supported_authtypes = set(winrm.FEATURE_SUPPORTED_AUTHTYPES)\n        else:\n            # for legacy versions of pywinrm, use the values we know are supported\n            self._winrm_supported_authtypes = set(['plaintext','ssl','kerberos'])\n\n        # TODO: figure out what we want to do with auto-transport selection in the face of NTLM/Kerb/CredSSP/Cert/Basic\n        transport_selector = 'ssl' if self._winrm_scheme == 'https' else 'plaintext'\n\n        if HAVE_KERBEROS and ((self._winrm_user and '@' in self._winrm_user)):\n            self._winrm_transport = 'kerberos,%s' % transport_selector\n        else:\n            self._winrm_transport = transport_selector\n        self._winrm_transport = hostvars.get('ansible_winrm_transport', self._winrm_transport)\n        if isinstance(self._winrm_transport, string_types):\n            self._winrm_transport = [x.strip() for x in self._winrm_transport.split(',') if x.strip()]\n\n        unsupported_transports = set(self._winrm_transport).difference(self._winrm_supported_authtypes)\n\n        if unsupported_transports:\n            raise AnsibleError('The installed version of WinRM does not support transport(s) %s' % list(unsupported_transports))\n\n        # arg names we're going passing directly\n        internal_kwarg_mask = set(['self', 'endpoint', 'transport', 'username', 'password', 'scheme', 'path'])\n\n        self._winrm_kwargs = dict(username=self._winrm_user, password=self._winrm_pass)\n        argspec = inspect.getargspec(Protocol.__init__)\n        supported_winrm_args = set(argspec.args)\n        supported_winrm_args.update(internal_kwarg_mask)\n        passed_winrm_args = set([v.replace('ansible_winrm_', '') for v in hostvars if v.startswith('ansible_winrm_')])\n        unsupported_args = passed_winrm_args.difference(supported_winrm_args)\n\n        # warn for kwargs unsupported by the installed version of pywinrm\n        for arg in unsupported_args:\n            display.warning(\"ansible_winrm_{0} unsupported by pywinrm (is an up-to-date version of pywinrm installed?)\".format(arg))\n\n        # pass through matching kwargs, excluding the list we want to treat specially\n        for arg in passed_winrm_args.difference(internal_kwarg_mask).intersection(supported_winrm_args):\n            self._winrm_kwargs[arg] = hostvars['ansible_winrm_%s' % arg]",
    "smell": []
}