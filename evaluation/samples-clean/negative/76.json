{
    "code": "def get_OPinv_matvec(A, M, sigma, symmetric=False, tol=0):\n    if sigma == 0:\n        return get_inv_matvec(A, symmetric=symmetric, tol=tol)\n\n    if M is None:\n        #M is the identity matrix\n        if isdense(A):\n            if (np.issubdtype(A.dtype, np.complexfloating)\n                    or np.imag(sigma) == 0):\n                A = np.copy(A)\n            else:\n                A = A + 0j\n            A.flat[::A.shape[1] + 1] -= sigma\n            return LuInv(A).matvec\n        elif isspmatrix(A):\n            A = A - sigma * identity(A.shape[0])\n            if symmetric and isspmatrix_csr(A):\n                A = A.T\n            return SpLuInv(A.tocsc()).matvec\n        else:\n            return IterOpInv(_aslinearoperator_with_dtype(A), M, sigma,\n                             tol=tol).matvec\n    else:\n        if ((not isdense(A) and not isspmatrix(A)) or\n                (not isdense(M) and not isspmatrix(M))):\n            return IterOpInv(_aslinearoperator_with_dtype(A),\n                             _aslinearoperator_with_dtype(M), sigma,\n                             tol=tol).matvec\n        elif isdense(A) or isdense(M):\n            return LuInv(A - sigma * M).matvec\n        else:\n            OP = A - sigma * M\n            if symmetric and isspmatrix_csr(OP):\n                OP = OP.T\n            return SpLuInv(OP.tocsc()).matvec",
    "smell": []
}