{
    "code": "def open(self, host, port=22, username=None, password=None, timeout=10,\n             key_filename=None, pkey=None, look_for_keys=None,\n             allow_agent=False, key_policy=\"loose\"):\n\n        self.ssh = paramiko.SSHClient()\n        if key_policy != \"ignore\":\n            self.ssh.load_system_host_keys()\n            try:\n                self.ssh.load_host_keys(os.path.expanduser('~/.ssh/known_hosts'))\n            except IOError:\n                pass\n\n        if key_policy == \"strict\":\n            self.ssh.set_missing_host_key_policy(paramiko.RejectPolicy())\n        else:\n            self.ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())\n\n        # unless explicitly set, disable look for keys if a password is\n        # present. this changes the default search order paramiko implements\n        if not look_for_keys:\n            look_for_keys = password is None\n\n        try:\n            self.ssh.connect(\n                host, port=port, username=username, password=password,\n                timeout=timeout, look_for_keys=look_for_keys, pkey=pkey,\n                key_filename=key_filename, allow_agent=allow_agent,\n            )\n\n            self.shell = self.ssh.invoke_shell()\n            self.shell.settimeout(timeout)\n        except socket.gaierror:\n            raise ShellError(\"unable to resolve host name\")\n        except AuthenticationException:\n            raise ShellError('Unable to authenticate to remote device')\n        except socket.timeout:\n            raise ShellError(\"timeout trying to connect to remote device\")\n        except socket.error:\n            exc = get_exception()\n            if exc.errno == 60:\n                raise ShellError('timeout trying to connect to host')\n            raise\n\n        if self.kickstart:\n            self.shell.sendall(\"\\n\")\n\n        self.receive()",
    "smell": []
}