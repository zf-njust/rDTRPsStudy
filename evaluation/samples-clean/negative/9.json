{
    "code": "def _finalize_rows_cols_sizes(self):\n        selfw = self.width\n        selfh = self.height\n\n        # resolve size for each column\n        if self.col_force_default:\n            cols = [self.col_default_width] * len(self._cols)\n            for index, value in self.cols_minimum.items():\n                cols[index] = value\n            self._cols = cols\n        else:\n            cols = self._cols\n            cols_sh = self._cols_sh\n            cols_sh_min = self._cols_sh_min\n            cols_weight = float(sum((x for x in cols_sh if x is not None)))\n            stretch_w = max(0., selfw - self._cols_min_size_none)\n\n            if stretch_w > 1e-9:\n                if self._has_hint_bound_x:\n                    # fix the hints to be within bounds\n                    self.layout_hint_with_bounds(\n                        cols_weight, stretch_w,\n                        sum((c for c in cols_sh_min if c is not None)),\n                        cols_sh_min, self._cols_sh_max, cols_sh)\n\n                for index, col_stretch in enumerate(cols_sh):\n                    # if the col don't have stretch information, nothing to do\n                    if not col_stretch:\n                        continue\n                    # add to the min width whatever remains from size_hint\n                    cols[index] += stretch_w * col_stretch / cols_weight\n\n        # same algo for rows\n        if self.row_force_default:\n            rows = [self.row_default_height] * len(self._rows)\n            for index, value in self.rows_minimum.items():\n                rows[index] = value\n            self._rows = rows\n        else:\n            rows = self._rows\n            rows_sh = self._rows_sh\n            rows_sh_min = self._rows_sh_min\n            rows_weight = float(sum((x for x in rows_sh if x is not None)))\n            stretch_h = max(0., selfh - self._rows_min_size_none)\n\n            if stretch_h > 1e-9:\n                if self._has_hint_bound_y:\n                    # fix the hints to be within bounds\n                    self.layout_hint_with_bounds(\n                        rows_weight, stretch_h,\n                        sum((r for r in rows_sh_min if r is not None)),\n                        rows_sh_min, self._rows_sh_max, rows_sh)\n\n                for index, row_stretch in enumerate(rows_sh):\n                    # if the row don't have stretch information, nothing to do\n                    if not row_stretch:\n                        continue\n                    # add to the min height whatever remains from size_hint\n                    rows[index] += stretch_h * row_stretch / rows_weight",
    "smell": []
}