{
    "code": "def provide_gcp_context(\n    key_file_path: str | None = None,\n    scopes: Sequence | None = None,\n    project_id: str | None = None,\n):\n    \"\"\"\n    Context manager that provides:\n\n    - GCP credentials for application supporting `Application Default Credentials (ADC)\n    strategy <https://cloud.google.com/docs/authentication/production>`__.\n    - temporary value of :envvar:`AIRFLOW_CONN_GOOGLE_CLOUD_DEFAULT` variable\n    - the ``gcloud`` config directory isolated from user configuration\n\n    Moreover it resolves full path to service keys so user can pass ``myservice.json``\n    as ``key_file_path``.\n\n    :param key_file_path: Path to file with GCP credentials .json file.\n    :param scopes: OAuth scopes for the connection\n    :param project_id: The id of GCP project for the connection.\n        Default: ``os.environ[\"GCP_PROJECT_ID\"]`` or None\n    \"\"\"\n    key_file_path = resolve_full_gcp_key_path(key_file_path)  # type: ignore\n    if project_id is None:\n        project_id = os.environ.get(\"GCP_PROJECT_ID\")\n    with provide_gcp_conn_and_credentials(\n        key_file_path, scopes, project_id\n    ), tempfile.TemporaryDirectory() as gcloud_config_tmp, mock.patch.dict(\n        \"os.environ\", {CLOUD_SDK_CONFIG_DIR: gcloud_config_tmp}\n    ):\n        executor = CommandExecutor()\n\n        if key_file_path:\n            executor.execute_cmd(\n                [\n                    \"gcloud\",\n                    \"auth\",\n                    \"activate-service-account\",\n                    f\"--key-file={key_file_path}\",\n                ]\n            )\n        if project_id:\n            executor.execute_cmd([\"gcloud\", \"config\", \"set\", \"core/project\", project_id])\n        yield",
    "smell": []
}