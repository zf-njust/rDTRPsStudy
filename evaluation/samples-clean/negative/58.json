{
    "code": "def privatekey_check(N, p, q, d, e):\n    ret = False\n    txt = \"\"\n\n    nlen = getpubkeysz(N)\n    if not is_prime(p):\n        ret = True\n        txt += \"p IS NOT PROBABLE PRIME\\n\"\n    if not is_prime(q):\n        txt = \"q IS NOT PROBABLE PRIME\\n\"\n    if gcd(p, e) > 1:\n        ret = True\n        txt = \"p and e ARE NOT RELATIVELY PRIME\\n\"\n    if gcd(q, e) > 1:\n        ret = True\n        txt += \"q and e ARE NOT RELATIVELY PRIME\\n\"\n    if p * q != N:\n        ret = True\n        txt += \"n IS NOT p * q\\n\"\n    if not (abs(p - q) > (2 ** ((nlen >> 1) - 100))):\n        ret = True\n        txt += \"|p - q| IS NOT > 2^(nlen/2 - 100)\\n\"\n    if not (p > 2 ** ((nlen >> 1) - 1)):\n        ret = True\n        txt += \"p IS NOT > 2^(nlen/2 - 1)\\n\"\n    if not (q > 2 ** ((nlen >> 1) - 1)):\n        ret = True\n        txt += \"q IS NOT > 2^(nlen/2 - 1)\\n\"\n    if not (d > 2 ** (nlen >> 1)):\n        ret = True\n        txt += \"d IS NOT > 2^(nlen/2)\\n\"\n    if not (d < lcm(p - 1, q - 1)):\n        ret = True\n        txt += \"d IS NOT < lcm(p-1,q-1)\\n\"\n    unc = (gcd(e - 1, p - 1) + 1) * (gcd(e - 1, q - 1) + 1)\n    if unc > 9:\n        ret = True\n        txt += \"The number of unconcealed messages is %d > min\\n\" % unc\n    try:\n        inv = invert(e, lcm(p - 1, q - 1))\n    except ZeroDivisionError:\n        inv = None\n        ret = True\n        txt += \"e IS NOT INVERTIBLE mod lcm(p-1,q-1)\\n\"\n    if d != inv:\n        ret = True\n        txt += \"d IS NOT e^(-1) mod lcm(p-1,q-1)\"\n    return (ret, txt)",
    "smell": []
}