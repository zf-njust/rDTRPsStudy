{
    "code": "def load(self):\n        \"\"\"load config from proxy.ini\"\"\"\n        current_path = os.path.dirname(os.path.abspath(__file__))\n        ConfigParser.RawConfigParser.OPTCRE = re.compile(r'(?P<option>[^=\\s][^=]*)\\s*(?P<vi>[=])\\s*(?P<value>.*)$')\n        self.CONFIG = ConfigParser.ConfigParser()\n        self.CONFIG_FILENAME = os.path.abspath( os.path.join(current_path, 'proxy.ini'))\n\n        self.DATA_PATH = os.path.abspath( os.path.join(current_path, os.pardir, os.pardir, 'data', 'gae_proxy'))\n        if not os.path.isdir(self.DATA_PATH):\n            self.DATA_PATH = current_path\n\n        # load ../../../data/gae_proxy/config.ini, set by web_ui\n        self.CONFIG_USER_FILENAME = os.path.abspath( os.path.join(self.DATA_PATH, 'config.ini'))\n        self.CONFIG.read(self.CONFIG_FILENAME)\n        if os.path.isfile(self.CONFIG_USER_FILENAME):\n            with open(self.CONFIG_USER_FILENAME, 'rb') as fp:\n                content = fp.read()\n                self.CONFIG.readfp(io.BytesIO(content))\n\n        # load ../../../data/gae_proxy/manual.ini, set by manual\n        self.CONFIG_MANUAL_FILENAME = os.path.abspath( os.path.join(self.DATA_PATH, 'manual.ini'))\n        if os.path.isfile(self.CONFIG_MANUAL_FILENAME):\n            with open(self.CONFIG_MANUAL_FILENAME, 'rb') as fp:\n                content = fp.read()\n                try:\n                    self.CONFIG.readfp(io.BytesIO(content))\n                    xlog.info(\"load manual.ini success\")\n                except Exception as e:\n                    xlog.exception(\"data/gae_proxy/manual.ini load error:%s\", e)\n\n        self.LISTEN_IP = self.CONFIG.get('listen', 'ip')\n        self.LISTEN_PORT = self.CONFIG.getint('listen', 'port')\n        self.LISTEN_VISIBLE = self.CONFIG.getint('listen', 'visible')\n        self.LISTEN_DEBUGINFO = self.CONFIG.getint('listen', 'debuginfo')\n\n        self.GAE_APPIDS = re.findall(r'[\\w\\-\\.]+', self.CONFIG.get('gae', 'appid').replace('.appspot.com', ''))\n        self.GAE_PASSWORD = self.CONFIG.get('gae', 'password').strip()\n\n        fwd_endswith = []\n        fwd_hosts = []\n        direct_endswith = []\n        direct_hosts = []\n        gae_endswith = []\n        gae_hosts = []\n        for k, v in self.CONFIG.items('hosts'):\n            if v == \"fwd\":\n                if k.startswith('.'):\n                    fwd_endswith.append(k)\n                else:\n                    fwd_hosts.append(k)\n            elif v == \"direct\":\n                if k.startswith('.'):\n                    direct_endswith.append(k)\n                else:\n                    direct_hosts.append(k)\n            elif v == \"gae\":\n                if k.startswith('.'):\n                    gae_endswith.append(k)\n                else:\n                    gae_hosts.append(k)\n        self.HOSTS_FWD_ENDSWITH = tuple(fwd_endswith)\n        self.HOSTS_FWD = tuple(fwd_hosts)\n        self.HOSTS_GAE_ENDSWITH = tuple(gae_endswith)\n        self.HOSTS_GAE = tuple(gae_hosts)\n        self.HOSTS_DIRECT_ENDSWITH = tuple(direct_endswith)\n        self.HOSTS_DIRECT = tuple(direct_hosts)\n\n        self.AUTORANGE_MAXSIZE = self.CONFIG.getint('autorange', 'maxsize')\n        self.AUTORANGE_WAITSIZE = self.CONFIG.getint('autorange', 'waitsize')\n        self.AUTORANGE_BUFSIZE = self.CONFIG.getint('autorange', 'bufsize')\n        self.AUTORANGE_THREADS = self.CONFIG.getint('autorange', 'threads')\n\n        self.PAC_ENABLE = self.CONFIG.getint('pac', 'enable')\n        self.PAC_IP = self.CONFIG.get('pac', 'ip')\n        self.PAC_PORT = self.CONFIG.getint('pac', 'port')\n        self.PAC_FILE = self.CONFIG.get('pac', 'file').lstrip('/')\n        self.PAC_GFWLIST = self.CONFIG.get('pac', 'gfwlist')\n        self.PAC_ADBLOCK = self.CONFIG.get('pac', 'adblock') if self.CONFIG.has_option('pac', 'adblock') else ''\n        self.PAC_EXPIRED = self.CONFIG.getint('pac', 'expired')\n        self.pac_url = 'http://%s:%d/%s\\n' % (self.PAC_IP, self.PAC_PORT, self.PAC_FILE)\n\n        self.CONTROL_ENABLE = self.CONFIG.getint('control', 'enable')\n        self.CONTROL_IP = self.CONFIG.get('control', 'ip')\n        self.CONTROL_PORT = self.CONFIG.getint('control', 'port')\n\n        self.PROXY_ENABLE = self.CONFIG.getint('proxy', 'enable')\n        self.PROXY_TYPE = self.CONFIG.get('proxy', 'type')\n        self.PROXY_HOST = self.CONFIG.get('proxy', 'host')\n        self.PROXY_PORT = self.CONFIG.get('proxy', 'port')\n        if self.PROXY_PORT == \"\":\n            self.PROXY_PORT = 0\n        else:\n            self.PROXY_PORT = int(self.PROXY_PORT)\n        self.PROXY_USER = self.CONFIG.get('proxy', 'user')\n        self.PROXY_PASSWD = self.CONFIG.get('proxy', 'passwd')\n\n        self.LOVE_ENABLE = self.CONFIG.getint('love', 'enable')\n        self.LOVE_TIP = self.CONFIG.get('love', 'tip').encode('utf8').decode('unicode-escape').split('|')\n\n        self.USE_IPV6 = self.CONFIG.getint('google_ip', 'use_ipv6')\n        self.ip_traffic_quota = self.CONFIG.getint('google_ip', 'ip_traffic_quota')\n        self.ip_traffic_quota_base = self.CONFIG.getint('google_ip', 'ip_traffic_quota_base')\n\n        self.https_max_connect_thread = config.CONFIG.getint(\"connect_manager\", \"https_max_connect_thread\")\n        self.connect_interval = config.CONFIG.getint(\"connect_manager\", \"connect_interval\")\n\n        # change to True when finished import CA cert to browser\n        # launcher will wait import ready then open browser to show status, check update etc\n        self.cert_import_ready = False",
    "smell": []
}