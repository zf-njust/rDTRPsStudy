{
    "code": "def __init__(self, name, directory=\".\", packages=None, includes=None):\n        self._name = module_name(name)\n        self._in_src = False\n        self._is_package = False\n        self._path = Path(directory)\n        self._includes = []\n        packages = packages or []\n        includes = includes or []\n\n        if not packages:\n            # It must exist either as a .py file or a directory, but not both\n            pkg_dir = Path(directory, self._name)\n            py_file = Path(directory, self._name + \".py\")\n            if pkg_dir.is_dir() and py_file.is_file():\n                raise ValueError(\"Both {} and {} exist\".format(pkg_dir, py_file))\n            elif pkg_dir.is_dir():\n                packages = [{\"include\": str(pkg_dir.relative_to(self._path))}]\n            elif py_file.is_file():\n                packages = [{\"include\": str(py_file.relative_to(self._path))}]\n            else:\n                # Searching for a src module\n                src = Path(directory, \"src\")\n                src_pkg_dir = src / self._name\n                src_py_file = src / (self._name + \".py\")\n\n                if src_pkg_dir.is_dir() and src_py_file.is_file():\n                    raise ValueError(\"Both {} and {} exist\".format(pkg_dir, py_file))\n                elif src_pkg_dir.is_dir():\n                    packages = [\n                        {\n                            \"include\": str(src_pkg_dir.relative_to(src)),\n                            \"from\": str(src.relative_to(self._path)),\n                        }\n                    ]\n                elif src_py_file.is_file():\n                    packages = [\n                        {\n                            \"include\": str(src_py_file.relative_to(src)),\n                            \"from\": str(src.relative_to(self._path)),\n                        }\n                    ]\n                else:\n                    raise ModuleOrPackageNotFound(\n                        \"No file/folder found for package {}\".format(name)\n                    )\n\n        for package in packages:\n            formats = package.get(\"format\")\n            if formats and not isinstance(formats, list):\n                formats = [formats]\n\n            self._includes.append(\n                PackageInclude(\n                    self._path,\n                    package[\"include\"],\n                    formats=formats,\n                    source=package.get(\"from\"),\n                )\n            )\n\n        for include in includes:\n            self._includes.append(Include(self._path, include))",
    "smell": []
}