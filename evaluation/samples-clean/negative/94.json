{
    "code": "def __init__(self,\n               input_image_dims: int = 512,\n               net_down_scale: int = 4,\n               max_detections: int = 100,\n               peak_error: float = 1e-6,\n               peak_extract_kernel_size: int = 3,\n               class_offset: int = 1,\n               use_nms: bool = False,\n               nms_pre_thresh: float = 0.1,\n               nms_thresh: float = 0.4,\n               **kwargs):\n    \"\"\"Initialize CenterNet Detection Generator.\n\n    Args:\n      input_image_dims: An `int` that specifies the input image size.\n      net_down_scale: An `int` that specifies stride of the output.\n      max_detections: An `int` specifying the maximum number of bounding\n        boxes generated. This is an upper bound, so the number of generated\n        boxes may be less than this due to thresholding/non-maximum suppression.\n      peak_error: A `float` for determining non-valid heatmap locations to mask.\n      peak_extract_kernel_size: An `int` indicating the kernel size used when\n        performing max-pool over the heatmaps to detect valid center locations\n        from its neighbors. From the paper, set this to 3 to detect valid.\n        locations that have responses greater than its 8-connected neighbors\n      class_offset: An `int` indicating to add an offset to the class\n        prediction if the dataset labels have been shifted.\n      use_nms: A `bool` for whether or not to use non-maximum suppression to\n        filter the bounding boxes.\n      nms_pre_thresh: A `float` for pre-nms threshold.\n      nms_thresh: A `float` for nms threshold.\n      **kwargs: Additional keyword arguments to be passed.\n    \"\"\"\n    super(CenterNetDetectionGenerator, self).__init__(**kwargs)\n\n    # Object center selection parameters\n    self._max_detections = max_detections\n    self._peak_error = peak_error\n    self._peak_extract_kernel_size = peak_extract_kernel_size\n\n    # Used for adjusting class prediction\n    self._class_offset = class_offset\n\n    # Box normalization parameters\n    self._net_down_scale = net_down_scale\n    self._input_image_dims = input_image_dims\n\n    self._use_nms = use_nms\n    self._nms_pre_thresh = nms_pre_thresh\n    self._nms_thresh = nms_thresh",
    "smell": []
}