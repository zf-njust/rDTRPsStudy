{
    "code": "def __init__(self,\n                 ann_file: Optional[str] = None,\n                 metric: Union[str, List[str]] = 'bbox',\n                 classwise: bool = False,\n                 proposal_nums: Sequence[int] = (100, 300, 1000),\n                 iou_thrs: Optional[Union[float, Sequence[float]]] = None,\n                 metric_items: Optional[Sequence[str]] = None,\n                 format_only: bool = False,\n                 outfile_prefix: Optional[str] = None,\n                 backend_args: dict = None,\n                 collect_device: str = 'cpu',\n                 prefix: Optional[str] = None) -> None:\n        super().__init__(collect_device=collect_device, prefix=prefix)\n        # coco evaluation metrics\n        self.metrics = metric if isinstance(metric, list) else [metric]\n        allowed_metrics = ['bbox', 'segm', 'proposal', 'proposal_fast']\n        for metric in self.metrics:\n            if metric not in allowed_metrics:\n                raise KeyError(\n                    \"metric should be one of 'bbox', 'segm', 'proposal', \"\n                    f\"'proposal_fast', but got {metric}.\")\n\n        # do class wise evaluation, default False\n        self.classwise = classwise\n\n        # proposal_nums used to compute recall or precision.\n        self.proposal_nums = list(proposal_nums)\n\n        # iou_thrs used to compute recall or precision.\n        if iou_thrs is None:\n            iou_thrs = np.linspace(\n                .5, 0.95, int(np.round((0.95 - .5) / .05)) + 1, endpoint=True)\n        self.iou_thrs = iou_thrs\n        self.metric_items = metric_items\n        self.format_only = format_only\n        if self.format_only:\n            assert outfile_prefix is not None, 'outfile_prefix must be not'\n            'None when format_only is True, otherwise the result files will'\n            'be saved to a temp directory which will be cleaned up at the end.'\n\n        self.outfile_prefix = outfile_prefix\n\n        self.backend_args = backend_args\n\n        # if ann_file is not specified,\n        # initialize coco api with the converted dataset\n        if ann_file is not None:\n            with get_local_path(\n                    ann_file, backend_args=self.backend_args) as local_path:\n                self._coco_api = COCO(local_path)\n        else:\n            self._coco_api = None\n\n        # handle dataset lazy init\n        self.cat_ids = None\n        self.img_ids = None",
    "smell": []
}