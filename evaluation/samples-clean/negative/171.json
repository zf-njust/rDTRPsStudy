{
    "code": "def solve_chinese_remainder(nums : List[int], rems : List[int]):\n    \"\"\"\n    Computes the smallest x that satisfies the chinese remainder theorem\n    for a system of equations.\n    The system of equations has the form:\n    x % nums[0] = rems[0]\n    x % nums[1] = rems[1]\n    ...\n    x % nums[k - 1] = rems[k - 1]\n    Where k is the number of elements in nums and rems, k > 0.\n    All numbers in nums needs to be pariwise coprime otherwise an exception is raised\n    returns x: the smallest value for x that satisfies the system of equations\n    \"\"\"\n    if not len(nums) == len(rems):\n        raise Exception(\"nums and rems should have equal length\")\n    if not len(nums) > 0:\n        raise Exception(\"Lists nums and rems need to contain at least one element\")\n    for num in nums:\n        if not num > 1:\n            raise Exception(\"All numbers in nums needs to be > 1\")\n    if not _check_coprime(nums):\n        raise Exception(\"All pairs of numbers in nums are not coprime\")\n    k = len(nums)\n    x = 1\n    while True:\n        i = 0\n        while i < k:\n            if x % nums[i] != rems[i]:\n                break\n            i += 1\n        if i == k:\n            return x\n        x += 1",
    "smell": []
}