{
    "code": "def __init__(\n        self,\n        name: str = \"\",\n        filename: str = \"\",\n        direction: str = \"LR\",\n        curvestyle: str = \"ortho\",\n        outformat: str = \"png\",\n        autolabel: bool = False,\n        show: bool = True,\n        strict: bool = False,\n        graph_attr: Optional[dict] = None,\n        node_attr: Optional[dict] = None,\n        edge_attr: Optional[dict] = None,\n    ):\n        \"\"\"Diagram represents a global diagrams context.\n\n        :param name: Diagram name. It will be used for output filename if the\n            filename isn't given.\n        :param filename: The output filename, without the extension (.png).\n            If not given, it will be generated from the name.\n        :param direction: Data flow direction. Default is 'left to right'.\n        :param curvestyle: Curve bending style. One of \"ortho\" or \"curved\".\n        :param outformat: Output file format. Default is 'png'.\n        :param show: Open generated image after save if true, just only save otherwise.\n        :param graph_attr: Provide graph_attr dot config attributes.\n        :param node_attr: Provide node_attr dot config attributes.\n        :param edge_attr: Provide edge_attr dot config attributes.\n        :param strict: Rendering should merge multi-edges.\n        \"\"\"\n        if graph_attr is None:\n            graph_attr = {}\n        if node_attr is None:\n            node_attr = {}\n        if edge_attr is None:\n            edge_attr = {}\n        self.name = name\n        if not name and not filename:\n            filename = \"diagrams_image\"\n        elif not filename:\n            filename = \"_\".join(self.name.split()).lower()\n        self.filename = filename\n        self.dot = Digraph(self.name, filename=self.filename, strict=strict)\n\n        # Set attributes.\n        for k, v in self._default_graph_attrs.items():\n            self.dot.graph_attr[k] = v\n        self.dot.graph_attr[\"label\"] = self.name\n        for k, v in self._default_node_attrs.items():\n            self.dot.node_attr[k] = v\n        for k, v in self._default_edge_attrs.items():\n            self.dot.edge_attr[k] = v\n\n        if not self._validate_direction(direction):\n            raise ValueError(f'\"{direction}\" is not a valid direction')\n        self.dot.graph_attr[\"rankdir\"] = direction\n\n        if not self._validate_curvestyle(curvestyle):\n            raise ValueError(f'\"{curvestyle}\" is not a valid curvestyle')\n        self.dot.graph_attr[\"splines\"] = curvestyle\n\n        if isinstance(outformat, list):\n            for one_format in outformat:\n                if not self._validate_outformat(one_format):\n                    raise ValueError(f'\"{one_format}\" is not a valid output format')\n        else:\n            if not self._validate_outformat(outformat):\n                raise ValueError(f'\"{outformat}\" is not a valid output format')\n        self.outformat = outformat\n\n        # Merge passed in attributes\n        self.dot.graph_attr.update(graph_attr)\n        self.dot.node_attr.update(node_attr)\n        self.dot.edge_attr.update(edge_attr)\n\n        self.show = show\n        self.autolabel = autolabel",
    "smell": []
}