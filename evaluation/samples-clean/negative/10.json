{
    "code": "def test_polyder(self):\n        # check exceptions\n        assert_raises(ValueError, poly.polyder, [0], .5)\n        assert_raises(ValueError, poly.polyder, [0], -1)\n\n        # check that zeroth deriviative does nothing\n        for i in range(5):\n            tgt = [0]*i + [1]\n            res = poly.polyder(tgt, m=0)\n            assert_equal(trim(res), trim(tgt))\n\n        # check that derivation is the inverse of integration\n        for i in range(5):\n            for j in range(2, 5):\n                tgt = [0]*i + [1]\n                res = poly.polyder(poly.polyint(tgt, m=j), m=j)\n                assert_almost_equal(trim(res), trim(tgt))\n\n        # check derivation with scaling\n        for i in range(5):\n            for j in range(2, 5):\n                tgt = [0]*i + [1]\n                res = poly.polyder(poly.polyint(tgt, m=j, scl=2), m=j, scl=.5)\n                assert_almost_equal(trim(res), trim(tgt))",
    "smell": []
}