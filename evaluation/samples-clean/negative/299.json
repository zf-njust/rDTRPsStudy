{
    "code": "def _build_assignment_map(keras_model,\n                          prefix='',\n                          skip_variables_regex=None,\n                          var_to_shape_map=None):\n  \"\"\"Builds the variable assignment map.\n\n  Compute an assignment mapping for loading older checkpoints into a Keras\n  model. Variable names are remapped from the original TPUEstimator model to\n  the new Keras name.\n\n  Args:\n    keras_model: tf.keras.Model object to provide variables to assign.\n    prefix: prefix in the variable name to be remove for alignment with names in\n      the checkpoint.\n    skip_variables_regex: regular expression to math the names of variables that\n      do not need to be assign.\n    var_to_shape_map: variable name to shape mapping from the checkpoint.\n\n  Returns:\n    The variable assignment map.\n  \"\"\"\n  assignment_map = {}\n\n  checkpoint_names = []\n  if var_to_shape_map:\n    # pylint: disable=g-long-lambda\n    checkpoint_names = list(\n        filter(\n            lambda x: not x.endswith('Momentum') and not x.endswith(\n                'global_step'), var_to_shape_map.keys()))\n    # pylint: enable=g-long-lambda\n\n  logging.info('Number of variables in the checkpoint %d',\n               len(checkpoint_names))\n\n  for var in keras_model.variables:\n    var_name = var.name\n\n    if skip_variables_regex and re.match(skip_variables_regex, var_name):\n      continue\n    # Trim the index of the variable.\n    if ':' in var_name:\n      var_name = var_name[:var_name.rindex(':')]\n    if var_name.startswith(prefix):\n      var_name = var_name[len(prefix):]\n\n    if not var_to_shape_map:\n      assignment_map[var_name] = var\n      continue\n\n    # Match name with variables in the checkpoint.\n    # pylint: disable=cell-var-from-loop\n    match_names = list(filter(lambda x: x.endswith(var_name), checkpoint_names))\n    # pylint: enable=cell-var-from-loop\n    try:\n      if match_names:\n        assert len(match_names) == 1, 'more then on matches for {}: {}'.format(\n            var_name, match_names)\n        checkpoint_names.remove(match_names[0])\n        assignment_map[match_names[0]] = var\n      else:\n        logging.info('Error not found var name: %s', var_name)\n    except Exception as e:\n      logging.info('Error removing the match_name: %s', match_names)\n      logging.info('Exception: %s', e)\n      raise\n  logging.info('Found matching variable in checkpoint: %d', len(assignment_map))\n  return assignment_map",
    "smell": []
}