{
    "code": "def conv3dtranspose_forward_naive(input_, filter_, attrs):\n    in_n, in_c, in_d, in_h, in_w = input_.shape\n    f_c, f_out_c, f_d, f_h, f_w = filter_.shape\n    groups = attrs['groups']\n    assert in_c == f_c\n    out_c = f_out_c * groups\n    sub_in_c = in_c // groups\n\n    stride, pad, dilations = attrs['strides'], attrs['paddings'], attrs[\n        'dilations']\n\n    d_bolck_d = dilations[0] * (f_d - 1) + 1\n    d_bolck_h = dilations[1] * (f_h - 1) + 1\n    d_bolck_w = dilations[2] * (f_w - 1) + 1\n    out_d = (in_d - 1) * stride[0] + d_bolck_d\n    out_h = (in_h - 1) * stride[1] + d_bolck_h\n    out_w = (in_w - 1) * stride[2] + d_bolck_w\n    out = np.zeros((in_n, out_c, out_d, out_h, out_w))\n\n    for n in range(in_n):\n        for d in range(in_d):\n            for i in range(in_h):\n                for j in range(in_w):\n                    for g in range(groups):\n                        input_masked = input_[n, g * sub_in_c:(g + 1\n                                                               ) * sub_in_c, d,\n                                              i, j]  # (c)\n                        input_masked = np.reshape(input_masked,\n                                                  (sub_in_c, 1, 1, 1))\n                        input_masked = np.tile(input_masked, (1, f_d, f_h, f_w))\n\n                        for k in range(f_out_c):\n                            tmp_out = np.sum(input_masked * filter_[\n                                g * sub_in_c:(g + 1) * sub_in_c, k, :, :, :],\n                                             axis=0)\n                            d1, d2 = d * stride[0], d * stride[0] + d_bolck_d\n                            i1, i2 = i * stride[1], i * stride[1] + d_bolck_h\n                            j1, j2 = j * stride[2], j * stride[2] + d_bolck_w\n                            out[n, g * f_out_c + k, d1:d2:dilations[0], i1:i2:\n                                dilations[1], j1:j2:dilations[2]] += tmp_out\n\n    out = out[:, :, pad[0]:out_d - pad[0], pad[1]:out_h - pad[1], pad[2]:out_w -\n              pad[2]]\n    return out",
    "smell": []
}