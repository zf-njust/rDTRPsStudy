{
    "code": "def draw_kie_result(batch, node, idx_to_cls, count):\n    img = batch[6].copy()\n    boxes = batch[7]\n    h, w = img.shape[:2]\n    pred_img = np.ones((h, w * 2, 3), dtype=np.uint8) * 255\n    max_value, max_idx = paddle.max(node, -1), paddle.argmax(node, -1)\n    node_pred_label = max_idx.numpy().tolist()\n    node_pred_score = max_value.numpy().tolist()\n\n    for i, box in enumerate(boxes):\n        if i >= len(node_pred_label):\n            break\n        new_box = [[box[0], box[1]], [box[2], box[1]], [box[2], box[3]],\n                   [box[0], box[3]]]\n        Pts = np.array([new_box], np.int32)\n        cv2.polylines(\n            img, [Pts.reshape((-1, 1, 2))],\n            True,\n            color=(255, 255, 0),\n            thickness=1)\n        x_min = int(min([point[0] for point in new_box]))\n        y_min = int(min([point[1] for point in new_box]))\n\n        pred_label = node_pred_label[i]\n        if pred_label in idx_to_cls:\n            pred_label = idx_to_cls[pred_label]\n        pred_score = '{:.2f}'.format(node_pred_score[i])\n        text = pred_label + '(' + pred_score + ')'\n        cv2.putText(pred_img, text, (x_min * 2, y_min),\n                    cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 0, 0), 1)\n    vis_img = np.ones((h, w * 3, 3), dtype=np.uint8) * 255\n    vis_img[:, :w] = img\n    vis_img[:, w:] = pred_img\n    save_kie_path = os.path.dirname(config['Global'][\n        'save_res_path']) + \"/kie_results/\"\n    if not os.path.exists(save_kie_path):\n        os.makedirs(save_kie_path)\n    save_path = os.path.join(save_kie_path, str(count) + \".png\")\n    cv2.imwrite(save_path, vis_img)\n    logger.info(\"The Kie Image saved in {}\".format(save_path))",
    "smell": []
}