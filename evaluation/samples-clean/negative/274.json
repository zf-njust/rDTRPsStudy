{
    "code": "def test_dict():\n    class WorkA(LightningWork):\n        def __init__(self):\n            super().__init__(port=1)\n            self.c = 0\n\n        def run(self):\n            pass\n\n    class A(LightningFlow):\n        def __init__(self):\n            super().__init__()\n            self.dict = Dict(**{\"work_a\": WorkA(), \"work_b\": WorkA(), \"work_c\": WorkA(), \"work_d\": WorkA()})\n\n        def run(self):\n            pass\n\n    flow = A()\n\n    # TODO: these assertions are wrong, the works are getting added under \"flows\" instead of \"works\"\n    # state\n    assert len(flow.state[\"structures\"][\"dict\"][\"works\"]) == len(flow.dict) == 4\n    assert list(flow.state[\"structures\"][\"dict\"][\"works\"].keys()) == [\"work_a\", \"work_b\", \"work_c\", \"work_d\"]\n    assert all(\n        flow.state[\"structures\"][\"dict\"][\"works\"][f\"work_{k}\"][\"vars\"]\n        == {\n            \"c\": 0,\n            \"_url\": \"\",\n            \"_future_url\": \"\",\n            \"_port\": 1,\n            \"_host\": \"127.0.0.1\",\n            \"_paths\": {},\n            \"_restarting\": False,\n            \"_display_name\": \"\",\n            \"_internal_ip\": \"\",\n            \"_public_ip\": \"\",\n            \"_cloud_compute\": {\n                \"type\": \"__cloud_compute__\",\n                \"name\": \"cpu-small\",\n                \"disk_size\": 0,\n                \"idle_timeout\": None,\n                \"mounts\": None,\n                \"shm_size\": 0,\n                \"_internal_id\": \"default\",\n                \"interruptible\": False,\n                \"colocation_group_id\": None,\n            },\n        }\n        for k in (\"a\", \"b\", \"c\", \"d\")\n    )\n    assert all(\n        flow.state[\"structures\"][\"dict\"][\"works\"][f\"work_{k}\"][\"calls\"] == {CacheCallsKeys.LATEST_CALL_HASH: None}\n        for k in (\"a\", \"b\", \"c\", \"d\")\n    )\n    assert all(flow.state[\"structures\"][\"dict\"][\"works\"][f\"work_{k}\"][\"changes\"] == {} for k in (\"a\", \"b\", \"c\", \"d\"))\n\n    # state_vars\n    assert len(flow.state_vars[\"structures\"][\"dict\"][\"works\"]) == len(flow.dict) == 4\n    assert list(flow.state_vars[\"structures\"][\"dict\"][\"works\"].keys()) == [\"work_a\", \"work_b\", \"work_c\", \"work_d\"]\n    assert all(\n        flow.state_vars[\"structures\"][\"dict\"][\"works\"][f\"work_{k}\"][\"vars\"]\n        == {\n            \"c\": 0,\n            \"_url\": \"\",\n            \"_future_url\": \"\",\n            \"_port\": 1,\n            \"_host\": \"127.0.0.1\",\n            \"_paths\": {},\n            \"_restarting\": False,\n            \"_display_name\": \"\",\n            \"_internal_ip\": \"\",\n            \"_public_ip\": \"\",\n            \"_cloud_compute\": {\n                \"type\": \"__cloud_compute__\",\n                \"name\": \"cpu-small\",\n                \"disk_size\": 0,\n                \"idle_timeout\": None,\n                \"mounts\": None,\n                \"shm_size\": 0,\n                \"_internal_id\": \"default\",\n                \"interruptible\": False,\n                \"colocation_group_id\": None,\n            },\n        }\n        for k in (\"a\", \"b\", \"c\", \"d\")\n    )\n\n    # state_with_changes\n    assert len(flow.state_with_changes[\"structures\"][\"dict\"][\"works\"]) == len(flow.dict) == 4\n    assert list(flow.state_with_changes[\"structures\"][\"dict\"][\"works\"].keys()) == [\n        \"work_a\",\n        \"work_b\",\n        \"work_c\",\n        \"work_d\",\n    ]\n    assert all(\n        flow.state_with_changes[\"structures\"][\"dict\"][\"works\"][f\"work_{k}\"][\"vars\"]\n        == {\n            \"c\": 0,\n            \"_url\": \"\",\n            \"_future_url\": \"\",\n            \"_port\": 1,\n            \"_host\": \"127.0.0.1\",\n            \"_paths\": {},\n            \"_restarting\": False,\n            \"_display_name\": \"\",\n            \"_internal_ip\": \"\",\n            \"_public_ip\": \"\",\n            \"_cloud_compute\": {\n                \"type\": \"__cloud_compute__\",\n                \"name\": \"cpu-small\",\n                \"disk_size\": 0,\n                \"idle_timeout\": None,\n                \"mounts\": None,\n                \"shm_size\": 0,\n                \"_internal_id\": \"default\",\n                \"interruptible\": False,\n                \"colocation_group_id\": None,\n            },\n        }\n        for k in (\"a\", \"b\", \"c\", \"d\")\n    )\n    assert all(\n        flow.state_with_changes[\"structures\"][\"dict\"][\"works\"][f\"work_{k}\"][\"calls\"]\n        == {CacheCallsKeys.LATEST_CALL_HASH: None}\n        for k in (\"a\", \"b\", \"c\", \"d\")\n    )\n    assert all(\n        flow.state_with_changes[\"structures\"][\"dict\"][\"works\"][f\"work_{k}\"][\"changes\"] == {}\n        for k in (\"a\", \"b\", \"c\", \"d\")\n    )\n\n    # set_state\n    state = deepcopy(flow.state)\n    state[\"structures\"][\"dict\"][\"works\"][\"work_b\"][\"vars\"][\"c\"] = 1\n    flow.set_state(state)\n    assert flow.dict[\"work_b\"].c == 1",
    "smell": []
}