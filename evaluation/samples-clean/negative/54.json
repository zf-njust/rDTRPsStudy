{
    "code": "def __init__(\n        self,\n        major,  # type: int\n        minor=None,  # type: Optional[int]\n        patch=None,  # type: Optional[int]\n        rest=None,  # type: Optional[int]\n        pre=None,  # type: Optional[str]\n        build=None,  # type: Optional[str]\n        text=None,  # type: Optional[str]\n        precision=None,  # type: Optional[int]\n    ):  # type: (...) -> None\n        self._major = int(major)\n        self._precision = None\n        if precision is None:\n            self._precision = 1\n\n        if minor is None:\n            minor = 0\n        else:\n            if self._precision is not None:\n                self._precision += 1\n\n        self._minor = int(minor)\n\n        if patch is None:\n            patch = 0\n        else:\n            if self._precision is not None:\n                self._precision += 1\n\n        if rest is None:\n            rest = 0\n        else:\n            if self._precision is not None:\n                self._precision += 1\n\n        if precision is not None:\n            self._precision = precision\n\n        self._patch = int(patch)\n        self._rest = int(rest)\n\n        if text is None:\n            parts = [str(major)]\n            if self._precision >= 2 or minor != 0:\n                parts.append(str(minor))\n\n                if self._precision >= 3 or patch != 0:\n                    parts.append(str(patch))\n\n                if self._precision >= 4 or rest != 0:\n                    parts.append(str(rest))\n\n            text = \".\".join(parts)\n            if pre:\n                text += \"-{}\".format(pre)\n\n            if build:\n                text += \"+{}\".format(build)\n\n        self._text = text\n\n        pre = self._normalize_prerelease(pre)\n\n        self._prerelease = []\n        if pre is not None:\n            self._prerelease = self._split_parts(pre)\n\n        build = self._normalize_build(build)\n\n        self._build = []\n        if build is not None:\n            if build.startswith((\"-\", \"+\")):\n                build = build[1:]\n\n            self._build = self._split_parts(build)",
    "smell": []
}