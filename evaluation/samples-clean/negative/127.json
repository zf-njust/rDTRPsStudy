{
    "code": "def __init__(\n        self,\n        dag_folder: str | pathlib.Path | None = None,\n        include_examples: bool | ArgNotSet = NOTSET,\n        safe_mode: bool | ArgNotSet = NOTSET,\n        read_dags_from_db: bool = False,\n        store_serialized_dags: bool | None = None,\n        load_op_links: bool = True,\n        collect_dags: bool = True,\n    ):\n        # Avoid circular import\n\n        super().__init__()\n\n        include_examples = (\n            include_examples\n            if isinstance(include_examples, bool)\n            else conf.getboolean(\"core\", \"LOAD_EXAMPLES\")\n        )\n        safe_mode = (\n            safe_mode if isinstance(safe_mode, bool) else conf.getboolean(\"core\", \"DAG_DISCOVERY_SAFE_MODE\")\n        )\n\n        if store_serialized_dags:\n            warnings.warn(\n                \"The store_serialized_dags parameter has been deprecated. \"\n                \"You should pass the read_dags_from_db parameter.\",\n                RemovedInAirflow3Warning,\n                stacklevel=2,\n            )\n            read_dags_from_db = store_serialized_dags\n\n        dag_folder = dag_folder or settings.DAGS_FOLDER\n        self.dag_folder = dag_folder\n        self.dags: dict[str, DAG] = {}\n        # the file's last modified timestamp when we last read it\n        self.file_last_changed: dict[str, datetime] = {}\n        self.import_errors: dict[str, str] = {}\n        self.has_logged = False\n        self.read_dags_from_db = read_dags_from_db\n        # Only used by read_dags_from_db=True\n        self.dags_last_fetched: dict[str, datetime] = {}\n        # Only used by SchedulerJob to compare the dag_hash to identify change in DAGs\n        self.dags_hash: dict[str, str] = {}\n\n        self.dagbag_import_error_tracebacks = conf.getboolean(\"core\", \"dagbag_import_error_tracebacks\")\n        self.dagbag_import_error_traceback_depth = conf.getint(\"core\", \"dagbag_import_error_traceback_depth\")\n        if collect_dags:\n            self.collect_dags(\n                dag_folder=dag_folder,\n                include_examples=include_examples,\n                safe_mode=safe_mode,\n            )\n        # Should the extra operator link be loaded via plugins?\n        # This flag is set to False in Scheduler so that Extra Operator links are not loaded\n        self.load_op_links = load_op_links",
    "smell": []
}