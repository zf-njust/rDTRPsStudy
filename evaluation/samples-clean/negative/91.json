{
    "code": "def __init__(\n        self,\n        modality_cfg: D2vTextConfig,\n        embed_dim: int,\n        make_block: Callable[[float], nn.ModuleList],\n        norm_layer: Callable[[int], nn.LayerNorm],\n        layer_norm_first: bool,\n        alibi_biases: Dict,\n        task: Optional[FairseqTask],\n    ):\n        self.pad_idx = task.source_dictionary.pad()\n        self.vocab_size = len(task.source_dictionary)\n\n        local_encoder = TextLocalEncoder(\n            vocab_size=self.vocab_size,\n            embed_dim=embed_dim,\n            max_source_positions=modality_cfg.max_source_positions,\n            pad_idx=self.pad_idx,\n            no_scale_embedding=modality_cfg.no_scale_embedding,\n            layernorm_embedding=modality_cfg.layernorm_embedding,\n            dropout=modality_cfg.dropout,\n            no_token_positional_embeddings=modality_cfg.no_token_positional_embeddings,\n            learned_pos=modality_cfg.learned_pos,\n        )\n        dpr = np.linspace(\n            modality_cfg.start_drop_path_rate,\n            modality_cfg.end_drop_path_rate,\n            modality_cfg.prenet_depth,\n        )\n        context_encoder = BlockEncoder(\n            nn.ModuleList(make_block(dpr[i]) for i in range(modality_cfg.prenet_depth)),\n            norm_layer(embed_dim)\n            if not layer_norm_first and modality_cfg.prenet_depth > 0\n            else None,\n            layer_norm_first,\n            modality_cfg.prenet_layerdrop,\n            modality_cfg.prenet_dropout if modality_cfg.prenet_depth > 0 else 0.0,\n        )\n        decoder = (\n            Decoder1d(modality_cfg.decoder, embed_dim)\n            if modality_cfg.decoder is not None\n            else None\n        )\n\n        alibi_bias_fn = partial(get_alibi_bias, alibi_biases=alibi_biases)\n\n        super().__init__(\n            modality_cfg=modality_cfg,\n            embed_dim=embed_dim,\n            local_encoder=local_encoder,\n            project_features=nn.Identity(),\n            fixed_positional_encoder=None,\n            relative_positional_encoder=None,\n            context_encoder=context_encoder,\n            decoder=decoder,\n            get_alibi_bias=alibi_bias_fn,\n        )",
    "smell": []
}