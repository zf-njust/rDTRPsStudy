{
    "code": "def get_camera_channels(\n    data: ProtectData,\n    ufp_device: UFPCamera | None = None,\n) -> Generator[tuple[UFPCamera, CameraChannel, bool], None, None]:\n    \"\"\"Get all the camera channels.\"\"\"\n\n    devices = (\n        data.get_by_types({ModelType.CAMERA}) if ufp_device is None else [ufp_device]\n    )\n    for camera in devices:\n        camera = cast(UFPCamera, camera)\n        if not camera.channels:\n            if ufp_device is None:\n                # only warn on startup\n                _LOGGER.warning(\n                    \"Camera does not have any channels: %s (id: %s)\",\n                    camera.display_name,\n                    camera.id,\n                )\n            data.async_add_pending_camera_id(camera.id)\n            continue\n\n        is_default = True\n        for channel in camera.channels:\n            if channel.is_package:\n                yield camera, channel, True\n            elif channel.is_rtsp_enabled:\n                yield camera, channel, is_default\n                is_default = False\n\n        # no RTSP enabled use first channel with no stream\n        if is_default:\n            yield camera, camera.channels[0], True",
    "smell": []
}