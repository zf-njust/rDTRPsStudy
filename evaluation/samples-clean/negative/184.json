{
    "code": "def factor_2PN(N, P=3):\n    \"\"\"\n    based on: https://github.com/hirogwa/crypto-playground/blob/master/break_rsa.py\n    premise: P is prime > 2 and sqrt(2PN) is close to (Pp + 2q)/2\n    M = (Pp + 2q)/2 is a midpoint of (Pp, 2q).\n    Note that since both p and q are odd, A = M + 0.5 is an integer.\n    There exits an integer x such that\n    min(Pp, 2q) = A - x - 1\n    max(Pp, 2q) = A + x\n    It follows;\n    N = pq = (A-x-1)(A+x)/2P = (A^2 - x^2 - A - x)/2P\n    => 2PN = A^2 - x^2 - A - x\n    => x^2 + x + (-A^2 + A + 2PN) = 0\n    We can obtain p,q from A and N via quadratic formula.\n    \"\"\"\n\n    P2N = 2 * P * N\n    A, remainder = isqrt_rem(P2N)\n    if remainder != 0:\n        A += 1\n\n    c = -(A**2) + A + P2N\n    disc = 1 - (c << 2)\n\n    if disc >= 0:\n        isqrtdisc = isqrt(disc)\n\n        for x in [(-1 + isqrtdisc) >> 1, (-1 - isqrtdisc) >> 1]:\n            if x < 0:\n                continue\n\n            # 2q < Pp\n            p = (A + x) // P\n            q = (A - x - 1) >> 1\n            if p * q == N:\n                return p, q\n\n            # Pp < 2q\n            p = (A - x - 1) // P\n            q = (A + x) >> 1\n            if p * q == N:\n                return p, q\n\n    return []",
    "smell": []
}