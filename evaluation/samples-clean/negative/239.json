{
    "code": "def _get_project(client: LightningClient, project_id: Optional[str] = None, verbose: bool = True) -> V1Membership:\n    \"\"\"Get a project membership for the user from the backend.\"\"\"\n    if project_id is None:\n        project_id = LIGHTNING_CLOUD_PROJECT_ID\n\n    if project_id is not None:\n        project = client.projects_service_get_project(project_id)\n        if not project:\n            raise ValueError(\n                \"Environment variable `LIGHTNING_CLOUD_PROJECT_ID` is set but could not find an associated project.\"\n            )\n        return V1Membership(\n            name=project.name,\n            display_name=project.display_name,\n            description=project.description,\n            created_at=project.created_at,\n            project_id=project.id,\n            owner_id=project.owner_id,\n            owner_type=project.owner_type,\n            quotas=project.quotas,\n            updated_at=project.updated_at,\n        )\n\n    projects = client.projects_service_list_memberships()\n    if len(projects.memberships) == 0:\n        raise ValueError(\"No valid projects found. Please reach out to lightning.ai team to create a project\")\n    if len(projects.memberships) > 1 and verbose:\n        print(f\"Defaulting to the project: {projects.memberships[0].name}\")\n    return projects.memberships[0]",
    "smell": []
}