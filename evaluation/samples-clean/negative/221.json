{
    "code": "def __init__(self,\n               is_training,\n               num_class_slots,\n               use_dropout,\n               dropout_keep_prob,\n               kernel_size,\n               num_predictions_per_location,\n               conv_hyperparams,\n               freeze_batchnorm,\n               class_prediction_bias_init=0.0,\n               use_depthwise=False,\n               name=None):\n    \"\"\"Constructor.\n\n    Args:\n      is_training: Indicates whether the BoxPredictor is in training mode.\n      num_class_slots: number of class slots. Note that num_class_slots may or\n        may not include an implicit background category.\n      use_dropout: Option to use dropout or not.  Note that a single dropout\n        op is applied here prior to both box and class predictions, which stands\n        in contrast to the ConvolutionalBoxPredictor below.\n      dropout_keep_prob: Keep probability for dropout.\n        This is only used if use_dropout is True.\n      kernel_size: Size of final convolution kernel.  If the\n        spatial resolution of the feature map is smaller than the kernel size,\n        then the kernel size is automatically set to be\n        min(feature_width, feature_height).\n      num_predictions_per_location: Number of box predictions to be made per\n        spatial location. Int specifying number of boxes per location.\n      conv_hyperparams: A `hyperparams_builder.KerasLayerHyperparams` object\n        containing hyperparameters for convolution ops.\n      freeze_batchnorm: Bool. Whether to freeze batch norm parameters during\n        training or not. When training with a small batch size (e.g. 1), it is\n        desirable to freeze batch norm update and use pretrained batch norm\n        params.\n      class_prediction_bias_init: constant value to initialize bias of the last\n        conv2d layer before class prediction.\n      use_depthwise: Whether to use depthwise convolutions for prediction\n        steps. Default is False.\n      name: A string name scope to assign to the model. If `None`, Keras\n        will auto-generate one from the class name.\n\n    Raises:\n      ValueError: if min_depth > max_depth.\n      ValueError: if use_depthwise is True and kernel_size is 1.\n    \"\"\"\n    if use_depthwise and (kernel_size == 1):\n      raise ValueError('Should not use 1x1 kernel when using depthwise conv')\n\n    super(ConvolutionalClassHead, self).__init__(name=name)\n    self._is_training = is_training\n    self._use_dropout = use_dropout\n    self._dropout_keep_prob = dropout_keep_prob\n    self._kernel_size = kernel_size\n    self._class_prediction_bias_init = class_prediction_bias_init\n    self._use_depthwise = use_depthwise\n    self._num_class_slots = num_class_slots\n\n    self._class_predictor_layers = []\n\n    if self._use_dropout:\n      self._class_predictor_layers.append(\n          # The Dropout layer's `training` parameter for the call method must\n          # be set implicitly by the Keras set_learning_phase. The object\n          # detection training code takes care of this.\n          tf.keras.layers.Dropout(rate=1.0 - self._dropout_keep_prob))\n    if self._use_depthwise:\n      self._class_predictor_layers.append(\n          tf.keras.layers.DepthwiseConv2D(\n              [self._kernel_size, self._kernel_size],\n              padding='SAME',\n              depth_multiplier=1,\n              strides=1,\n              dilation_rate=1,\n              name='ClassPredictor_depthwise',\n              **conv_hyperparams.params()))\n      self._class_predictor_layers.append(\n          conv_hyperparams.build_batch_norm(\n              training=(is_training and not freeze_batchnorm),\n              name='ClassPredictor_depthwise_batchnorm'))\n      self._class_predictor_layers.append(\n          conv_hyperparams.build_activation_layer(\n              name='ClassPredictor_depthwise_activation'))\n      self._class_predictor_layers.append(\n          tf.keras.layers.Conv2D(\n              num_predictions_per_location * self._num_class_slots, [1, 1],\n              name='ClassPredictor',\n              **conv_hyperparams.params(use_bias=True)))\n    else:\n      self._class_predictor_layers.append(\n          tf.keras.layers.Conv2D(\n              num_predictions_per_location * self._num_class_slots,\n              [self._kernel_size, self._kernel_size],\n              padding='SAME',\n              name='ClassPredictor',\n              bias_initializer=tf.constant_initializer(\n                  self._class_prediction_bias_init),\n              **conv_hyperparams.params(use_bias=True)))",
    "smell": []
}