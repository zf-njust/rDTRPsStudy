{
    "code": "def async_bypass_dynamic_config_validation(\n    hass: HomeAssistant, config: ConfigType\n) -> bool:\n    \"\"\"Return whether target zwave_js config entry is not loaded.\"\"\"\n    # If the config entry is not loaded for a zwave_js device, entity, or the\n    # config entry ID provided, we can't perform dynamic validation\n    dev_reg = dr.async_get(hass)\n    ent_reg = er.async_get(hass)\n    trigger_devices = config.get(ATTR_DEVICE_ID, [])\n    trigger_entities = config.get(ATTR_ENTITY_ID, [])\n    for entry in hass.config_entries.async_entries(DOMAIN):\n        if entry.state != ConfigEntryState.LOADED and (\n            entry.entry_id == config.get(ATTR_CONFIG_ENTRY_ID)\n            or any(\n                device.id in trigger_devices\n                for device in dr.async_entries_for_config_entry(dev_reg, entry.entry_id)\n            )\n            or (\n                entity.entity_id in trigger_entities\n                for entity in er.async_entries_for_config_entry(ent_reg, entry.entry_id)\n            )\n        ):\n            return True\n\n        # The driver may not be ready when the config entry is loaded.\n        client: ZwaveClient = hass.data[DOMAIN][entry.entry_id][DATA_CLIENT]\n        if client.driver is None:\n            return True\n\n    return False",
    "smell": []
}