{
    "code": "def test_imputation_mean_median():\n    # Test imputation using the mean and median strategies, when\n    # missing_values != 0.\n    rng = np.random.RandomState(0)\n\n    dim = 10\n    dec = 10\n    shape = (dim * dim, dim + dec)\n\n    zeros = np.zeros(shape[0])\n    values = np.arange(1, shape[0]+1)\n    values[4::2] = - values[4::2]\n\n    tests = [(\"mean\", \"NaN\", lambda z, v, p: safe_mean(np.hstack((z, v)))),\n             (\"mean\", 0, lambda z, v, p: np.mean(v)),\n             (\"median\", \"NaN\", lambda z, v, p: safe_median(np.hstack((z, v)))),\n             (\"median\", 0, lambda z, v, p: np.median(v))]\n\n    for strategy, test_missing_values, true_value_fun in tests:\n        X = np.empty(shape)\n        X_true = np.empty(shape)\n        true_statistics = np.empty(shape[1])\n\n        # Create a matrix X with columns\n        #    - with only zeros,\n        #    - with only missing values\n        #    - with zeros, missing values and values\n        # And a matrix X_true containing all true values\n        for j in range(shape[1]):\n            nb_zeros = (j - dec + 1 > 0) * (j - dec + 1) * (j - dec + 1)\n            nb_missing_values = max(shape[0] + dec * dec\n                                    - (j + dec) * (j + dec), 0)\n            nb_values = shape[0] - nb_zeros - nb_missing_values\n\n            z = zeros[:nb_zeros]\n            p = np.repeat(test_missing_values, nb_missing_values)\n            v = values[rng.permutation(len(values))[:nb_values]]\n\n            true_statistics[j] = true_value_fun(z, v, p)\n\n            # Create the columns\n            X[:, j] = np.hstack((v, z, p))\n\n            if 0 == test_missing_values:\n                X_true[:, j] = np.hstack((v,\n                                          np.repeat(\n                                              true_statistics[j],\n                                              nb_missing_values + nb_zeros)))\n            else:\n                X_true[:, j] = np.hstack((v,\n                                          z,\n                                          np.repeat(true_statistics[j],\n                                                    nb_missing_values)))\n\n            # Shuffle them the same way\n            np.random.RandomState(j).shuffle(X[:, j])\n            np.random.RandomState(j).shuffle(X_true[:, j])\n\n        # Mean doesn't support columns containing NaNs, median does\n        if strategy == \"median\":\n            cols_to_keep = ~np.isnan(X_true).any(axis=0)\n        else:\n            cols_to_keep = ~np.isnan(X_true).all(axis=0)\n\n        X_true = X_true[:, cols_to_keep]\n\n        _check_statistics(X, X_true, strategy,\n                          true_statistics, test_missing_values)",
    "smell": []
}