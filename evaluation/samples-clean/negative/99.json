{
    "code": "def get_treasury_source(start_date=None, end_date=None):\n\n    today = datetime.date.today()\n    # Bank of Canada only has 10 years of data and has this in the URL.\n    restriction = datetime.date(today.year - 10, today.month, today.day)\n\n    if not end_date:\n        end_date = today\n\n    if not start_date:\n        start_date = restriction\n\n    bill_url = (\n        \"http://www.bankofcanada.ca/stats/results/csv?\"\n        \"lP=lookup_tbill_yields.php&sR={restrict}&se=\"\n        \"L_V39063-L_V39065-L_V39066-L_V39067&dF={start}&dT={end}\"\n        .format(restrict=restriction.strftime(\"%Y-%m-%d\"),\n                start=start_date.strftime(\"%Y-%m-%d\"),\n                end=end_date.strftime(\"%Y-%m-%d\"),\n                )\n    )\n\n    bond_url = (\n        \"http://www.bankofcanada.ca/stats/results/csv?\"\n        \"lP=lookup_bond_yields.php&sR={restrict}&se=\"\n        \"L_V39051-L_V39052-L_V39053-L_V39054-L_V39055-L_V39056\"\n        \"&dF={start}&dT={end}\"\n        .format(restrict=restriction.strftime(\"%Y-%m-%d\"),\n                start=start_date.strftime(\"%Y-%m-%d\"),\n                end=end_date.strftime(\"%Y-%m-%d\")\n                )\n    )\n\n    res_bill = requests.get(bill_url, stream=True)\n    res_bond = requests.get(bond_url, stream=True)\n    bill_iter = res_bill.iter_lines()\n    bond_iter = res_bond.iter_lines()\n\n    bill_row = \"\"\n    while \",\".join(BILLS) not in bill_row:\n        bill_row = bill_iter.next()\n        if 'Daily series:' in bill_row:\n            bill_end_date = datetime.datetime.strptime(\n                bill_row.split(' - ')[1].strip(),\n                \"%Y-%m-%d\").date()\n    bill_header = bill_row.split(\",\")\n\n    bond_row = \"\"\n    while \",\".join(BONDS) not in bond_row:\n        bond_row = bond_iter.next()\n        if 'Daily series:' in bond_row:\n            bond_end_date = datetime.datetime.strptime(\n                bond_row.split(' - ')[1].strip(),\n                \"%Y-%m-%d\").date()\n    bond_header = bond_row.split(\",\")\n\n    # Line up the two dates\n    if bill_end_date > bond_end_date:\n        bill_iter.next()\n    elif bond_end_date > bill_end_date:\n        bond_iter.next()\n\n    for bill_row in bill_iter:\n        bond_row = bond_iter.next()\n        bill_dict = dict(zip(bill_header, bill_row.split(\",\")))\n        bond_dict = dict(zip(bond_header, bond_row.split(\",\")))\n        if ' Bank holiday' in bond_row.split(\",\") + bill_row.split(\",\"):\n            continue\n        if ' Not available' in bond_row.split(\",\") + bill_row.split(\",\"):\n            continue\n\n        bill_dict.update(bond_dict)\n        yield bill_dict",
    "smell": []
}