{
    "code": "def main():\n    parser = argparse.ArgumentParser(\n        description=(\n            \"Recursively delete checkpoint files from `root_dir`, \"\n            \"but preserve checkpoint_best.pt and checkpoint_last.pt\"\n        )\n    )\n    parser.add_argument(\"root_dirs\", nargs=\"*\")\n    parser.add_argument(\n        \"--save-last\", type=int, default=0, help=\"number of last checkpoints to save\"\n    )\n    parser.add_argument(\n        \"--save-every\", type=int, default=0, help=\"interval of checkpoints to save\"\n    )\n    parser.add_argument(\n        \"--preserve-test\",\n        action=\"store_true\",\n        help=\"preserve checkpoints in dirs that start with test_ prefix (default: delete them)\",\n    )\n    parser.add_argument(\n        \"--delete-best\", action=\"store_true\", help=\"delete checkpoint_best.pt\"\n    )\n    parser.add_argument(\n        \"--delete-last\", action=\"store_true\", help=\"delete checkpoint_last.pt\"\n    )\n    parser.add_argument(\n        \"--no-dereference\", action=\"store_true\", help=\"don't dereference symlinks\"\n    )\n    args = parser.parse_args()\n\n    files_to_desymlink = []\n    files_to_preserve = []\n    files_to_delete = []\n    for root_dir in args.root_dirs:\n        for root, _subdirs, files in os.walk(root_dir):\n            if args.save_last > 0:\n                to_save = last_n_checkpoints(files, args.save_last)\n            else:\n                to_save = []\n            if args.save_every > 0:\n                to_save += every_n_checkpoints(files, args.save_every)\n            for file in files:\n                if not pt_regexp.fullmatch(file):\n                    continue\n                full_path = os.path.join(root, file)\n                if (\n                    not os.path.basename(root).startswith(\"test_\") or args.preserve_test\n                ) and (\n                    (file == \"checkpoint_last.pt\" and not args.delete_last)\n                    or (file == \"checkpoint_best.pt\" and not args.delete_best)\n                    or file in to_save\n                ):\n                    if os.path.islink(full_path) and not args.no_dereference:\n                        files_to_desymlink.append(full_path)\n                    else:\n                        files_to_preserve.append(full_path)\n                else:\n                    files_to_delete.append(full_path)\n\n    if len(files_to_desymlink) == 0 and len(files_to_delete) == 0:\n        print(\"Nothing to do.\")\n        sys.exit(0)\n\n    files_to_desymlink = sorted(files_to_desymlink)\n    files_to_preserve = sorted(files_to_preserve)\n    files_to_delete = sorted(files_to_delete)\n\n    print(\"Operations to perform (in order):\")\n    if len(files_to_desymlink) > 0:\n        for file in files_to_desymlink:\n            print(\" - preserve (and dereference symlink): \" + file)\n    if len(files_to_preserve) > 0:\n        for file in files_to_preserve:\n            print(\" - preserve: \" + file)\n    if len(files_to_delete) > 0:\n        for file in files_to_delete:\n            print(\" - delete: \" + file)\n    while True:\n        resp = input(\"Continue? (Y/N): \")\n        if resp.strip().lower() == \"y\":\n            break\n        elif resp.strip().lower() == \"n\":\n            sys.exit(0)\n\n    print(\"Executing...\")\n    if len(files_to_desymlink) > 0:\n        for file in files_to_desymlink:\n            realpath = os.path.realpath(file)\n            print(\"rm \" + file)\n            os.remove(file)\n            print(\"cp {} {}\".format(realpath, file))\n            shutil.copyfile(realpath, file)\n    if len(files_to_delete) > 0:\n        for file in files_to_delete:\n            print(\"rm \" + file)\n            os.remove(file)",
    "smell": []
}