{
    "code": "def feed(self, aBuf):\n        if self.done:\n            return\n\n        aLen = len(aBuf)\n        if not aLen:\n            return\n\n        if not self._mGotData:\n            # If the data starts with BOM, we know it is UTF\n            if aBuf[:3] == codecs.BOM_UTF8:\n                # EF BB BF  UTF-8 with BOM\n                self.result = {'encoding': \"UTF-8-SIG\", 'confidence': 1.0}\n            elif aBuf[:4] == codecs.BOM_UTF32_LE:\n                # FF FE 00 00  UTF-32, little-endian BOM\n                self.result = {'encoding': \"UTF-32LE\", 'confidence': 1.0}\n            elif aBuf[:4] == codecs.BOM_UTF32_BE:\n                # 00 00 FE FF  UTF-32, big-endian BOM\n                self.result = {'encoding': \"UTF-32BE\", 'confidence': 1.0}\n            elif aBuf[:4] == b'\\xFE\\xFF\\x00\\x00':\n                # FE FF 00 00  UCS-4, unusual octet order BOM (3412)\n                self.result = {\n                    'encoding': \"X-ISO-10646-UCS-4-3412\",\n                    'confidence': 1.0\n                }\n            elif aBuf[:4] == b'\\x00\\x00\\xFF\\xFE':\n                # 00 00 FF FE  UCS-4, unusual octet order BOM (2143)\n                self.result = {\n                    'encoding': \"X-ISO-10646-UCS-4-2143\",\n                    'confidence': 1.0\n                }\n            elif aBuf[:2] == codecs.BOM_LE:\n                # FF FE  UTF-16, little endian BOM\n                self.result = {'encoding': \"UTF-16LE\", 'confidence': 1.0}\n            elif aBuf[:2] == codecs.BOM_BE:\n                # FE FF  UTF-16, big endian BOM\n                self.result = {'encoding': \"UTF-16BE\", 'confidence': 1.0}\n\n        self._mGotData = True\n        if self.result['encoding'] and (self.result['confidence'] > 0.0):\n            self.done = True\n            return\n\n        if self._mInputState == ePureAscii:\n            if self._highBitDetector.search(aBuf):\n                self._mInputState = eHighbyte\n            elif ((self._mInputState == ePureAscii) and\n                    self._escDetector.search(self._mLastChar + aBuf)):\n                self._mInputState = eEscAscii\n\n        self._mLastChar = aBuf[-1:]\n\n        if self._mInputState == eEscAscii:\n            if not self._mEscCharSetProber:\n                self._mEscCharSetProber = EscCharSetProber()\n            if self._mEscCharSetProber.feed(aBuf) == constants.eFoundIt:\n                self.result = {'encoding': self._mEscCharSetProber.get_charset_name(),\n                               'confidence': self._mEscCharSetProber.get_confidence()}\n                self.done = True\n        elif self._mInputState == eHighbyte:\n            if not self._mCharSetProbers:\n                self._mCharSetProbers = [MBCSGroupProber(), SBCSGroupProber(),\n                                         Latin1Prober()]\n            for prober in self._mCharSetProbers:\n                if prober.feed(aBuf) == constants.eFoundIt:\n                    self.result = {'encoding': prober.get_charset_name(),\n                                   'confidence': prober.get_confidence()}\n                    self.done = True\n                    break",
    "smell": []
}