{
    "code": "def build(graph_rewriter_config,\n          quant_overrides_config=None,\n          is_training=True,\n          is_export=False):\n  \"\"\"Returns a function that modifies default graph based on options.\n\n  Args:\n    graph_rewriter_config: graph_rewriter_pb2.GraphRewriter proto.\n    quant_overrides_config: quant_overrides_pb2.QuantOverrides proto.\n    is_training: whether in training or eval mode.\n    is_export: whether exporting the graph.\n  \"\"\"\n  def graph_rewrite_fn():\n    \"\"\"Function to quantize weights and activation of the default graph.\"\"\"\n    if (graph_rewriter_config.quantization.weight_bits != 8 or\n        graph_rewriter_config.quantization.activation_bits != 8):\n      raise ValueError('Only 8bit quantization is supported')\n\n    graph = tf.get_default_graph()\n\n    # Insert custom quant ops.\n    if quant_overrides_config is not None:\n      input_to_ops_map = input_to_ops.InputToOps(graph)\n      for q in quant_overrides_config.quant_configs:\n        producer = graph.get_operation_by_name(q.op_name)\n        if producer is None:\n          raise ValueError('Op name does not exist in graph.')\n        context = _get_context_from_op(producer)\n        consumers = input_to_ops_map.ConsumerOperations(producer)\n        if q.fixed_range:\n          _insert_fixed_quant_op(\n              context,\n              q.quant_op_name,\n              producer,\n              consumers,\n              init_min=q.min,\n              init_max=q.max,\n              quant_delay=q.delay if is_training else 0)\n        else:\n          raise ValueError('Learned ranges are not yet supported.')\n\n    # Quantize the graph by inserting quantize ops for weights and activations\n    if is_training:\n      contrib_quantize.experimental_create_training_graph(\n          input_graph=graph,\n          quant_delay=graph_rewriter_config.quantization.delay,\n          freeze_bn_delay=graph_rewriter_config.quantization.delay)\n    else:\n      contrib_quantize.experimental_create_eval_graph(\n          input_graph=graph,\n          quant_delay=graph_rewriter_config.quantization.delay\n          if not is_export else 0)\n\n    contrib_layers.summarize_collection('quant_vars')\n\n  return graph_rewrite_fn",
    "smell": []
}