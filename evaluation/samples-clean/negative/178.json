{
    "code": "def get_engine(\n    hass: HomeAssistant,\n    config: ConfigType,\n    discovery_info: DiscoveryInfoType | None = None,\n) -> Provider | None:\n    \"\"\"Set up Amazon Polly speech component.\"\"\"\n    output_format = config[CONF_OUTPUT_FORMAT]\n    sample_rate = config.get(CONF_SAMPLE_RATE, DEFAULT_SAMPLE_RATES[output_format])\n    if sample_rate not in SUPPORTED_SAMPLE_RATES_MAP[output_format]:\n        _LOGGER.error(\n            \"%s is not a valid sample rate for %s\", sample_rate, output_format\n        )\n        return None\n\n    config[CONF_SAMPLE_RATE] = sample_rate\n\n    profile: str | None = config.get(CONF_PROFILE_NAME)\n\n    if profile is not None:\n        boto3.setup_default_session(profile_name=profile)\n\n    aws_config = {\n        CONF_REGION: config[CONF_REGION],\n        CONF_ACCESS_KEY_ID: config.get(CONF_ACCESS_KEY_ID),\n        CONF_SECRET_ACCESS_KEY: config.get(CONF_SECRET_ACCESS_KEY),\n        \"config\": botocore.config.Config(\n            connect_timeout=AWS_CONF_CONNECT_TIMEOUT,\n            read_timeout=AWS_CONF_READ_TIMEOUT,\n            max_pool_connections=AWS_CONF_MAX_POOL_CONNECTIONS,\n        ),\n    }\n\n    del config[CONF_REGION]\n    del config[CONF_ACCESS_KEY_ID]\n    del config[CONF_SECRET_ACCESS_KEY]\n\n    polly_client = boto3.client(\"polly\", **aws_config)\n\n    supported_languages: list[str] = []\n\n    all_voices: dict[str, dict[str, str]] = {}\n\n    all_voices_req = polly_client.describe_voices()\n\n    for voice in all_voices_req.get(\"Voices\", []):\n        voice_id: str | None = voice.get(\"Id\")\n        if voice_id is None:\n            continue\n        all_voices[voice_id] = voice\n        language_code: str | None = voice.get(\"LanguageCode\")\n        if language_code is not None and language_code not in supported_languages:\n            supported_languages.append(language_code)\n\n    return AmazonPollyProvider(polly_client, config, supported_languages, all_voices)",
    "smell": []
}