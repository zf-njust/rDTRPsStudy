{
    "code": "def sort_service_dicts(services):\n    # Topological sort (Cormen/Tarjan algorithm).\n    unmarked = services[:]\n    temporary_marked = set()\n    sorted_services = []\n\n    def get_service_names(links):\n        return [link.split(':')[0] for link in links]\n\n    def get_service_names_from_volumes_from(volumes_from):\n        return [\n            parse_volume_from_spec(volume_from).source\n            for volume_from in volumes_from\n        ]\n\n    def get_service_dependents(service_dict, services):\n        name = service_dict['name']\n        return [\n            service for service in services\n            if (name in get_service_names(service.get('links', [])) or\n                name in get_service_names_from_volumes_from(service.get('volumes_from', [])) or\n                name == get_service_name_from_net(service.get('net')))\n        ]\n\n    def visit(n):\n        if n['name'] in temporary_marked:\n            if n['name'] in get_service_names(n.get('links', [])):\n                raise DependencyError('A service can not link to itself: %s' % n['name'])\n            if n['name'] in n.get('volumes_from', []):\n                raise DependencyError('A service can not mount itself as volume: %s' % n['name'])\n            else:\n                raise DependencyError('Circular import between %s' % ' and '.join(temporary_marked))\n        if n in unmarked:\n            temporary_marked.add(n['name'])\n            for m in get_service_dependents(n, services):\n                visit(m)\n            temporary_marked.remove(n['name'])\n            unmarked.remove(n)\n            sorted_services.insert(0, n)\n\n    while unmarked:\n        visit(unmarked[-1])\n\n    return sorted_services",
    "smell": []
}