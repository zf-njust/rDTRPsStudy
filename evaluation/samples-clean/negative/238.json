{
    "code": "def _hydra_main(cfg: FairseqConfig, **kwargs) -> float:\n    add_defaults(cfg)\n\n    if cfg.common.reset_logging:\n        reset_logging()  # Hydra hijacks logging, fix that\n    else:\n        # check if directly called or called through hydra_main\n        if HydraConfig.initialized():\n            with open_dict(cfg):\n                # make hydra logging work with ddp (see # see https://github.com/facebookresearch/hydra/issues/1126)\n                cfg.job_logging_cfg = OmegaConf.to_container(\n                    HydraConfig.get().job_logging, resolve=True\n                )\n\n    with omegaconf_no_object_check():\n        cfg = OmegaConf.create(\n            OmegaConf.to_container(cfg, resolve=True, enum_to_str=True)\n        )\n    OmegaConf.set_struct(cfg, True)\n\n    try:\n        if cfg.common.profile:\n            with torch.cuda.profiler.profile():\n                with torch.autograd.profiler.emit_nvtx():\n                    distributed_utils.call_main(cfg, pre_main, **kwargs)\n        else:\n            distributed_utils.call_main(cfg, pre_main, **kwargs)\n    except BaseException as e:\n        if not cfg.common.suppress_crashes:\n            raise\n        else:\n            logger.error(\"Crashed! \" + str(e))\n\n    # get best val and return - useful for sweepers\n    try:\n        best_val = metrics.get_smoothed_value(\n            \"valid\", cfg.checkpoint.best_checkpoint_metric\n        )\n    except:\n        best_val = None\n\n    if best_val is None:\n        best_val = float(\"inf\")\n\n    return best_val",
    "smell": []
}