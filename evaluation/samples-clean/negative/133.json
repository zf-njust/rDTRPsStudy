{
    "code": "def _real_extract(self, url):\n        video_id = self._match_id(url)\n\n        json_url = (\n            'http://api.viddler.com/api/v2/viddler.videos.getPlaybackDetails.json?video_id=%s&key=v0vhrt7bg2xq1vyxhkct' %\n            video_id)\n        headers = {'Referer': 'http://static.cdn-ec.viddler.com/js/arpeggio/v2/embed.html'}\n        request = compat_urllib_request.Request(json_url, None, headers)\n        data = self._download_json(request, video_id)['video']\n\n        formats = []\n        for filed in data['files']:\n            if filed.get('status', 'ready') != 'ready':\n                continue\n            format_id = filed.get('profile_id') or filed['profile_name']\n            f = {\n                'format_id': format_id,\n                'format_note': filed['profile_name'],\n                'url': self._proto_relative_url(filed['url']),\n                'width': int_or_none(filed.get('width')),\n                'height': int_or_none(filed.get('height')),\n                'filesize': int_or_none(filed.get('size')),\n                'ext': filed.get('ext'),\n                'source_preference': -1,\n            }\n            formats.append(f)\n\n            if filed.get('cdn_url'):\n                f = f.copy()\n                f['url'] = self._proto_relative_url(filed['cdn_url'], 'http:')\n                f['format_id'] = format_id + '-cdn'\n                f['source_preference'] = 1\n                formats.append(f)\n\n            if filed.get('html5_video_source'):\n                f = f.copy()\n                f['url'] = self._proto_relative_url(filed['html5_video_source'])\n                f['format_id'] = format_id + '-html5'\n                f['source_preference'] = 0\n                formats.append(f)\n        self._sort_formats(formats)\n\n        categories = [\n            t.get('text') for t in data.get('tags', []) if 'text' in t]\n\n        return {\n            'id': video_id,\n            'title': data['title'],\n            'formats': formats,\n            'description': data.get('description'),\n            'timestamp': int_or_none(data.get('upload_time')),\n            'thumbnail': self._proto_relative_url(data.get('thumbnail_url')),\n            'uploader': data.get('author'),\n            'duration': float_or_none(data.get('length')),\n            'view_count': int_or_none(data.get('view_count')),\n            'comment_count': int_or_none(data.get('comment_count')),\n            'categories': categories,\n        }",
    "smell": []
}