{
    "code": "def moto_put_subscription_filter(fn, self, *args, **kwargs):\n    log_group_name = args[0]\n    filter_name = args[1]\n    filter_pattern = args[2]\n    destination_arn = args[3]\n    role_arn = args[4]\n\n    log_group = self.groups.get(log_group_name)\n\n    if not log_group:\n        raise ResourceNotFoundException(\"The specified log group does not exist.\")\n\n    if \":lambda:\" in destination_arn:\n        client = aws_stack.connect_to_service(\n            \"lambda\", region_name=extract_region_from_arn(destination_arn)\n        )\n        lambda_name = arns.lambda_function_name(destination_arn)\n        try:\n            client.get_function(FunctionName=lambda_name)\n        except Exception:\n            raise InvalidParameterException(\n                \"destinationArn for vendor lambda cannot be used with roleArn\"\n            )\n\n    elif \":kinesis:\" in destination_arn:\n        client = aws_stack.connect_to_service(\"kinesis\")\n        stream_name = arns.kinesis_stream_name(destination_arn)\n        try:\n            client.describe_stream(StreamName=stream_name)\n        except Exception:\n            raise InvalidParameterException(\n                \"Could not deliver test message to specified Kinesis stream. \"\n                \"Check if the given kinesis stream is in ACTIVE state. \"\n            )\n\n    elif \":firehose:\" in destination_arn:\n        client = aws_stack.connect_to_service(\"firehose\")\n        firehose_name = arns.firehose_name(destination_arn)\n        try:\n            client.describe_delivery_stream(DeliveryStreamName=firehose_name)\n        except Exception:\n            raise InvalidParameterException(\n                \"Could not deliver test message to specified Firehose stream. \"\n                \"Check if the given Firehose stream is in ACTIVE state.\"\n            )\n\n    else:\n        service = arns.extract_service_from_arn(destination_arn)\n        raise InvalidParameterException(\n            f\"PutSubscriptionFilter operation cannot work with destinationArn for vendor {service}\"\n        )\n\n    if filter_pattern:\n        for stream in log_group.streams.values():\n            stream.filter_pattern = filter_pattern\n\n    log_group.put_subscription_filter(filter_name, filter_pattern, destination_arn, role_arn)",
    "smell": []
}