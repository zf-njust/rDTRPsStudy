{
    "code": "def text_justification(words, max_width):\n    '''\n    :type words: list\n    :type max_width: int\n    :rtype: list\n    '''\n    ret = []  # return value\n    row_len = 0  # current length of strs in a row\n    row_words = []  # current words in a row\n    index = 0  # the index of current word in words\n    is_first_word = True  # is current word the first in a row\n    while index < len(words):\n        while row_len <= max_width and index < len(words):\n            if len(words[index]) > max_width:\n                raise ValueError(\"there exists word whose length is larger than max_width\")\n            tmp = row_len\n            row_words.append(words[index])\n            tmp += len(words[index])\n            if not is_first_word:\n                tmp += 1  # except for the first word, each word should have at least a ' ' before it.\n            if tmp > max_width:\n                row_words.pop()\n                break\n            row_len = tmp\n            index += 1\n            is_first_word = False\n        # here we have already got a row of str , then we should supplement enough ' ' to make sure the length is max_width.\n        row = \"\"\n        # if the row is the last\n        if index == len(words):\n            for word in row_words:\n                row += (word + ' ')\n            row = row[:-1]\n            row += ' ' * (max_width - len(row))\n        # not the last row and more than one word\n        elif len(row_words) != 1:\n            space_num = max_width - row_len\n            space_num_of_each_interval = space_num // (len(row_words) - 1)\n            space_num_rest = space_num - space_num_of_each_interval * (len(row_words) - 1)\n            for j in range(len(row_words)):\n                row += row_words[j]\n                if j != len(row_words) - 1:\n                    row += ' ' * (1 + space_num_of_each_interval)\n                if space_num_rest > 0:\n                    row += ' '\n                    space_num_rest -= 1\n        # row with only one word\n        else:\n            row += row_words[0]\n            row += ' ' * (max_width - len(row))\n        ret.append(row)\n        # after a row , reset those value\n        row_len = 0\n        row_words = []\n        is_first_word = True\n    return ret",
    "smell": []
}