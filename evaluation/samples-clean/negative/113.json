{
    "code": "def get_conn(self) -> connect:\n        \"\"\"Return verticaql connection object.\"\"\"\n        conn = self.get_connection(self.vertica_conn_id)  # type: ignore\n        conn_config = {\n            \"user\": conn.login,\n            \"password\": conn.password or \"\",\n            \"database\": conn.schema,\n            \"host\": conn.host or \"localhost\",\n        }\n\n        if not conn.port:\n            conn_config[\"port\"] = 5433\n        else:\n            conn_config[\"port\"] = int(conn.port)\n\n        bool_options = [\n            \"connection_load_balance\",\n            \"binary_transfer\",\n            \"disable_copy_local\",\n            \"request_complex_types\",\n            \"use_prepared_statements\",\n        ]\n        std_options = [\n            \"session_label\",\n            \"backup_server_node\",\n            \"kerberos_host_name\",\n            \"kerberos_service_name\",\n            \"unicode_error\",\n            \"workload\",\n            \"ssl\",\n        ]\n        conn_extra = conn.extra_dejson\n\n        for bo in bool_options:\n            if bo in conn_extra:\n                conn_config[bo] = str(conn_extra[bo]).lower() in [\"true\", \"on\"]\n\n        for so in std_options:\n            if so in conn_extra:\n                conn_config[so] = conn_extra[so]\n\n        if \"connection_timeout\" in conn_extra:\n            conn_config[\"connection_timeout\"] = float(conn_extra[\"connection_timeout\"])\n\n        if \"log_level\" in conn_extra:\n            import logging\n\n            log_lvl = conn_extra[\"log_level\"]\n            conn_config[\"log_path\"] = None\n            if isinstance(log_lvl, str):\n                log_lvl = log_lvl.lower()\n                if log_lvl == \"critical\":\n                    conn_config[\"log_level\"] = logging.CRITICAL\n                elif log_lvl == \"error\":\n                    conn_config[\"log_level\"] = logging.ERROR\n                elif log_lvl == \"warning\":\n                    conn_config[\"log_level\"] = logging.WARNING\n                elif log_lvl == \"info\":\n                    conn_config[\"log_level\"] = logging.INFO\n                elif log_lvl == \"debug\":\n                    conn_config[\"log_level\"] = logging.DEBUG\n                elif log_lvl == \"notset\":\n                    conn_config[\"log_level\"] = logging.NOTSET\n            else:\n                conn_config[\"log_level\"] = int(conn_extra[\"log_level\"])\n\n        conn = connect(**conn_config)\n        return conn",
    "smell": []
}