{
    "code": "def serve(\n    host,\n    port,\n    app: Sanic,\n    ssl: Optional[SSLContext] = None,\n    sock: Optional[socket.socket] = None,\n    unix: Optional[str] = None,\n    reuse_port: bool = False,\n    loop=None,\n    protocol: Type[asyncio.Protocol] = HttpProtocol,\n    backlog: int = 100,\n    register_sys_signals: bool = True,\n    run_multiple: bool = False,\n    run_async: bool = False,\n    connections=None,\n    signal=Signal(),\n    state=None,\n    asyncio_server_kwargs=None,\n    version=HTTP.VERSION_1,\n):\n    \"\"\"Start asynchronous HTTP Server on an individual process.\n\n    :param host: Address to host on\n    :param port: Port to host on\n    :param before_start: function to be executed before the server starts\n                         listening. Takes arguments `app` instance and `loop`\n    :param after_start: function to be executed after the server starts\n                        listening. Takes  arguments `app` instance and `loop`\n    :param before_stop: function to be executed when a stop signal is\n                        received before it is respected. Takes arguments\n                        `app` instance and `loop`\n    :param after_stop: function to be executed when a stop signal is\n                       received after it is respected. Takes arguments\n                       `app` instance and `loop`\n    :param ssl: SSLContext\n    :param sock: Socket for the server to accept connections from\n    :param unix: Unix socket to listen on instead of TCP port\n    :param reuse_port: `True` for multiple workers\n    :param loop: asyncio compatible event loop\n    :param run_async: bool: Do not create a new event loop for the server,\n                      and return an AsyncServer object rather than running it\n    :param asyncio_server_kwargs: key-value args for asyncio/uvloop\n                                  create_server method\n    :return: Nothing\n    \"\"\"\n    if not run_async and not loop:\n        # create new event_loop after fork\n        loop = asyncio.new_event_loop()\n        asyncio.set_event_loop(loop)\n\n    if app.debug:\n        loop.set_debug(app.debug)\n\n    app.asgi = False\n\n    if version is HTTP.VERSION_3:\n        return _serve_http_3(host, port, app, loop, ssl)\n    return _serve_http_1(\n        host,\n        port,\n        app,\n        ssl,\n        sock,\n        unix,\n        reuse_port,\n        loop,\n        protocol,\n        backlog,\n        register_sys_signals,\n        run_multiple,\n        run_async,\n        connections,\n        signal,\n        state,\n        asyncio_server_kwargs,\n    )",
    "smell": []
}