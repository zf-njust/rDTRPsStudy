{
    "code": "def CreateChannelDispatcher(channel_service_stub):\n  \"\"\"Function to create channel dispatcher.\n\n  Args:\n    channel_service_stub: The service stub responsible for creating channels and\n      sending messages. This stub stores messages destined for channels, so we\n      query it when the client polls the _ah/channel/ dispatcher.\n\n  Returns:\n    New dispatcher capable of handling client polls for channel messages.\n  \"\"\"\n\n\n\n  from google.appengine.tools import dev_appserver\n\n  class ChannelDispatcher(dev_appserver.URLDispatcher):\n    \"\"\"Dispatcher that handles channel polls.\"\"\"\n\n    def __init__(self, channel_service_stub):\n      \"\"\"Constructor.\n\n      Args:\n        channel_service_stub: The channel service that receives channel messages\n        from the application.\n      \"\"\"\n      self._channel_service_stub = channel_service_stub\n\n\n    def Dispatch(self,\n                 request,\n                 outfile,\n                 base_env_dict=None):\n      \"\"\"Handle post dispatch.\n\n      This dispatcher handles requests under the /_ah/channel/ path. Currently\n      it handles 3 sub-paths:\n        connect: place-holder for parity with the java dev channel.\n        poll:    return pending messages for the channel identified by the\n                 channel parameter.\n        jsapi:   return the javascript library to retrieve messages for the\n                 channel.\n\n      Args:\n        request: The HTTP request.\n        outfile: The response file.\n        base_env_dict: Dictionary of CGI environment parameters if available.\n          Defaults to None.\n      \"\"\"\n\n      outfile.write('Status: 200\\r\\n')\n\n      (unused_scheme, unused_netloc,\n       path, query,\n       unused_fragment) = urlparse.urlsplit(request.relative_url)\n      param_dict = cgi.parse_qs(query, True)\n\n      page = path.rsplit('/', 1)[-1]\n\n      if page == 'jsapi':\n        path = os.path.join(os.path.dirname(__file__), 'dev-channel-js.js')\n        outfile.write('Content-type: text/javascript\\r\\n\\r\\n')\n        outfile.write(open(path).read())\n      elif page == 'dev':\n        outfile.write('\\r\\n')\n        id = param_dict['channel'][0]\n        command = param_dict['command'][0]\n\n        if command == 'connect':\n          self._channel_service_stub.connect_channel(id)\n          outfile.write('1')\n        elif command == 'poll':\n          self._channel_service_stub.connect_channel(id)\n          if self._channel_service_stub.has_channel_messages(id):\n            outfile.write(self._channel_service_stub.pop_first_message(id))\n\n  return ChannelDispatcher(channel_service_stub)",
    "smell": []
}