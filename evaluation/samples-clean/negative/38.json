{
    "code": "def monkey_patch_settings(sender, **kwargs):\n    logger.debug(\"Monkey patch settings\")\n    cache_key_prefix = '_SETTING_'\n    custom_need_cache_settings = [\n        'AUTHENTICATION_BACKENDS', 'TERMINAL_HOST_KEY',\n    ]\n    custom_no_cache_settings = [\n        'BASE_DIR', 'VERSION', 'AUTH_OPENID',\n    ]\n    django_settings = dir(global_settings)\n    uncached_settings = [i for i in django_settings if i.isupper()]\n    uncached_settings = [i for i in uncached_settings if not i.startswith('EMAIL')]\n    uncached_settings = [i for i in uncached_settings if not i.startswith('SESSION_REDIS')]\n    uncached_settings = [i for i in uncached_settings if i not in custom_need_cache_settings]\n    uncached_settings.extend(custom_no_cache_settings)\n\n    def monkey_patch_getattr(self, name):\n        if name not in uncached_settings:\n            key = cache_key_prefix + name\n            cached = cache.get(key)\n            if cached is not None:\n                return cached\n        if self._wrapped is empty:\n            self._setup(name)\n        val = getattr(self._wrapped, name)\n        return val\n\n    def monkey_patch_setattr(self, name, value):\n        key = cache_key_prefix + name\n        cache.set(key, value, None)\n        if name == '_wrapped':\n            self.__dict__.clear()\n        else:\n            self.__dict__.pop(name, None)\n        super(LazySettings, self).__setattr__(name, value)\n\n    def monkey_patch_delattr(self, name):\n        super(LazySettings, self).__delattr__(name)\n        self.__dict__.pop(name, None)\n        key = cache_key_prefix + name\n        cache.delete(key)\n\n    try:\n        cache.delete_pattern(cache_key_prefix+'*')\n        LazySettings.__getattr__ = monkey_patch_getattr\n        LazySettings.__setattr__ = monkey_patch_setattr\n        LazySettings.__delattr__ = monkey_patch_delattr\n        Setting.refresh_all_settings()\n    except (ProgrammingError, OperationalError):\n        pass",
    "smell": []
}