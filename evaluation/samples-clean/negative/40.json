{
    "code": "def prepare(self, **kwargs):\n        assert re.match(r'https?://[^\\.]*\\.*acfun\\.[^\\.]+/(\\D|bangumi)/\\D\\D(\\d+)', self.url)\n\n        if re.match(r'https?://[^\\.]*\\.*acfun\\.[^\\.]+/\\D/\\D\\D(\\d+)', self.url):\n            html = get_content(self.url, headers=fake_headers)\n            json_text = match1(html, r\"(?s)videoInfo\\s*=\\s*(\\{.*?\\});\")\n            json_data = json.loads(json_text)\n            vid = json_data.get('currentVideoInfo').get('id')\n            up = json_data.get('user').get('name')\n            self.title = json_data.get('title')\n            video_list = json_data.get('videoList')\n            if len(video_list) > 1:\n                self.title += \" - \" + [p.get('title') for p in video_list if p.get('id') == vid][0]\n            currentVideoInfo = json_data.get('currentVideoInfo')\n\n        elif re.match(\"https?://[^\\.]*\\.*acfun\\.[^\\.]+/bangumi/aa(\\d+)\", self.url):\n            html = get_content(self.url, headers=fake_headers)\n            tag_script = match1(html, r'<script>\\s*window\\.pageInfo([^<]+)</script>')\n            json_text = tag_script[tag_script.find('{') : tag_script.find('};') + 1]\n            json_data = json.loads(json_text)\n            self.title = json_data['bangumiTitle'] + \" \" + json_data['episodeName'] + \" \" + json_data['title']\n            vid = str(json_data['videoId'])\n            up = \"acfun\"\n            currentVideoInfo = json_data.get('currentVideoInfo')\n\n        else:\n            raise NotImplemented            \n\n        if 'ksPlayJson' in currentVideoInfo:\n            durationMillis = currentVideoInfo['durationMillis']\n            ksPlayJson = ksPlayJson = json.loads( currentVideoInfo['ksPlayJson'] )\n            representation = ksPlayJson.get('adaptationSet')[0].get('representation')\n            stream_list = representation\n\n        for stream in stream_list:\n            m3u8_url = stream[\"url\"]\n            size = durationMillis * stream[\"avgBitrate\"] / 8\n            # size = float('inf')\n            container = 'mp4'\n            stream_id = stream[\"qualityLabel\"]\n            quality = stream[\"qualityType\"]\n            \n            stream_data = dict(src=m3u8_url, size=size, container=container, quality=quality)\n            self.streams[stream_id] = stream_data\n\n        assert self.title and m3u8_url\n        self.title = unescape_html(self.title)\n        self.title = escape_file_path(self.title)\n        p_title = r1('active\">([^<]+)', html)\n        self.title = '%s (%s)' % (self.title, up)\n        if p_title:\n            self.title = '%s - %s' % (self.title, p_title)",
    "smell": []
}