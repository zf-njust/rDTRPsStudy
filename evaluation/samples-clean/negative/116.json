{
    "code": "def with_jax_dtype_defaults(func, use_defaults=True):\n  \"\"\"Return a version of a function with outputs that match JAX's default dtypes.\n\n  This is generally used to wrap numpy functions within tests, in order to make\n  their default output dtypes match those of corresponding JAX functions, taking\n  into account the state of the ``jax_enable_x64`` and ``jax_default_dtype_bits``\n  flags.\n\n  Args:\n    use_defaults : whether to convert any given output to the default dtype. May be\n      a single boolean, in which case it specifies the conversion for all outputs,\n      or may be a a pytree with the same structure as the function output.\n  \"\"\"\n  @functools.wraps(func)\n  def wrapped(*args, **kwargs):\n    result = func(*args, **kwargs)\n    if isinstance(use_defaults, bool):\n      return tree_map(to_default_dtype, result) if use_defaults else result\n    else:\n      f = lambda arr, use_default: to_default_dtype(arr) if use_default else arr\n      return tree_map(f, result, use_defaults)\n  return wrapped",
    "smell": []
}