{
    "code": "def levenshtein_dis(wordA, wordB):\n\n    wordA = wordA.lower()  # making the wordA lower case\n    wordB = wordB.lower()  # making the wordB lower case\n\n    # get the length of the words and defining the variables\n    length_A = len(wordA)\n    length_B = len(wordB)\n    max_len = 0\n    diff = 0\n    distances = []\n    distance = 0\n\n    # check the difference of the word to decide how many letter should be delete or add\n    # also store that value in the 'diff' variable and get the max length of the user given words\n    if length_A > length_B:\n        diff = length_A - length_B\n        max_len = length_A\n    elif length_A < length_B:\n        diff = length_B - length_A\n        max_len = length_B\n    else:\n        diff = 0\n        max_len = length_A\n\n    # starting from the front of the words and compare the letters of the both user given words\n    for x in range(max_len - diff):\n        if wordA[x] != wordB[x]:\n            distance += 1\n\n    # add the 'distance' value to the 'distances' array\n    distances.append(distance)\n    distance = 0\n\n    # starting from the back of the words and compare the letters of the both user given words\n    for x in range(max_len - diff):\n        if wordA[-(x + 1)] != wordB[-(x + 1)]:\n            distance += 1\n\n    # add the 'distance' value to the 'distances' array\n    distances.append(distance)\n\n    # get the minimun value of the 'distances' array and add it with the 'diff' values and\n    # store them in the 'diff' variable\n    diff = diff + min(distances)\n\n    # return the value\n    return diff",
    "smell": []
}