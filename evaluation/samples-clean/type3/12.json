{
  "code": "    def handle(self):\n        from poetry.config.config import Config\n        from poetry.config.config_source import ConfigSource\n        from poetry.locations import CONFIG_DIR\n        from poetry.utils._compat import Path\n        from poetry.utils._compat import basestring\n        from poetry.utils.toml_file import TomlFile\n\n        config = Config()\n        config_file = TomlFile(Path(CONFIG_DIR) / \"config.toml\")\n        config_source = ConfigSource(config_file)\n        config.merge(config_source.file.read())\n\n        auth_config_file = TomlFile(Path(CONFIG_DIR) / \"auth.toml\")\n        auth_config_source = ConfigSource(auth_config_file, auth_config=True)\n\n        local_config_file = TomlFile(self.poetry.file.parent / \"poetry.toml\")\n        if local_config_file.exists():\n            config.merge(local_config_file.read())\n\n        if self.option(\"local\"):\n            config_source = ConfigSource(local_config_file)\n\n        if not config_file.exists():\n            config_file.path.parent.mkdir(parents=True, exist_ok=True)\n            config_file.touch(mode=0o0600)\n\n        if self.option(\"list\"):\n            self._list_configuration(config.all(), config.raw())\n\n            return 0\n\n        setting_key = self.argument(\"key\")\n        if not setting_key:\n            return 0\n\n        if self.argument(\"value\") and self.option(\"unset\"):\n            raise RuntimeError(\"You can not combine a setting value with --unset\")\n\n        # show the value if no value is provided\n        if not self.argument(\"value\") and not self.option(\"unset\"):\n            m = re.match(r\"^repos?(?:itories)?(?:\\.(.+))?\", self.argument(\"key\"))\n            if m:\n                if not m.group(1):\n                    value = {}\n                    if config.get(\"repositories\") is not None:\n                        value = config.get(\"repositories\")\n                else:\n                    repo = config.get(\"repositories.{}\".format(m.group(1)))\n                    if repo is None:\n                        raise ValueError(\n                            \"There is no {} repository defined\".format(m.group(1))\n                        )\n\n                    value = repo\n\n                self.line(str(value))\n            else:\n                values = self.unique_config_values\n                if setting_key not in values:\n                    raise ValueError(\"There is no {} setting.\".format(setting_key))\n\n                value = config.get(setting_key)\n\n                if not isinstance(value, basestring):\n                    value = json.dumps(value)\n\n                self.line(value)\n\n            return 0\n\n        values = self.argument(\"value\")\n\n        unique_config_values = self.unique_config_values\n        if setting_key in unique_config_values:\n            if self.option(\"unset\"):\n                return config_source.remove_property(setting_key)\n\n            return self._handle_single_value(\n                config_source, setting_key, unique_config_values[setting_key], values\n            )\n\n        # handle repositories\n        m = re.match(r\"^repos?(?:itories)?(?:\\.(.+))?\", self.argument(\"key\"))\n        if m:\n            if not m.group(1):\n                raise ValueError(\"You cannot remove the [repositories] section\")\n\n            if self.option(\"unset\"):\n                repo = config.get(\"repositories.{}\".format(m.group(1)))\n                if repo is None:\n                    raise ValueError(\n                        \"There is no {} repository defined\".format(m.group(1))\n                    )\n\n                config_source.remove_property(\"repositories.{}\".format(m.group(1)))\n\n                return 0\n\n            if len(values) == 1:\n                url = values[0]\n\n                config_source.add_property(\n                    \"repositories.{}.url\".format(m.group(1)), url\n                )\n\n                return 0\n\n            raise ValueError(\n                \"You must pass the url. \"\n                \"Example: poetry config repositories.foo https://bar.com\"\n            )\n\n        # handle auth\n        m = re.match(r\"^(http-basic|pypi-token)\\.(.+)\", self.argument(\"key\"))\n        if m:\n            if self.option(\"unset\"):\n                keyring_repository_password_del(config, m.group(2))\n                auth_config_source.remove_property(\n                    \"{}.{}\".format(m.group(1), m.group(2))\n                )\n\n                return 0\n\n            if m.group(1) == \"http-basic\":\n                if len(values) == 1:\n                    username = values[0]\n                    # Only username, so we prompt for password\n                    password = self.secret(\"Password:\")\n                elif len(values) != 2:\n                    raise ValueError(\n                        \"Expected one or two arguments \"\n                        \"(username, password), got {}\".format(len(values))\n                    )\n                else:\n                    username = values[0]\n                    password = values[1]\n\n                property_value = dict(username=username)\n                try:\n                    keyring_repository_password_set(m.group(2), username, password)\n                except RuntimeError:\n                    property_value.update(password=password)\n\n                auth_config_source.add_property(\n                    \"{}.{}\".format(m.group(1), m.group(2)), property_value\n                )\n            elif m.group(1) == \"pypi-token\":\n                if len(values) != 1:\n                    raise ValueError(\n                        \"Expected only one argument (token), got {}\".format(len(values))\n                    )\n\n                token = values[0]\n\n                auth_config_source.add_property(\n                    \"{}.{}\".format(m.group(1), m.group(2)), token\n                )\n\n            return 0\n\n        raise ValueError(\"Setting {} does not exist\".format(self.argument(\"key\")))",
  "smell": [
    {
      "smell_id": 3,
      "line_no": 57,
      "description": "The variable referenced in the statement has inconsistent types."
    }
  ]
}