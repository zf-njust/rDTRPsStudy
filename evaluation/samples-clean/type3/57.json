{
  "code": "def _tool_from_string(name):\n    \"\"\" Takes a string and returns a corresponding `Tool` instance. \"\"\"\n    known_tools = sorted(_known_tools.keys())\n\n    if name in known_tools:\n        tool_fn = _known_tools[name]\n\n        if isinstance(tool_fn, string_types):\n            tool_fn = _known_tools[tool_fn]\n\n        return tool_fn()\n    else:\n        matches, text = difflib.get_close_matches(name.lower(), known_tools), \"similar\"\n\n        if not matches:\n            matches, text = known_tools, \"possible\"\n\n        raise ValueError(\"unexpected tool name '%s', %s tools are %s\" % (name, text, nice_join(matches)))",
  "smell": [
    {
      "smell_id": 3,
      "line_no": 8,
      "description": "The variable referenced in the statement has inconsistent types."
    }
  ]
}