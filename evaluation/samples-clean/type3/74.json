{
  "code": "def do_generate_api(targets, sources):\n    header_file = targets[0]\n    c_file = targets[1]\n    doc_file = targets[2]\n\n    global_vars = sources[0]\n    scalar_bool_values = sources[1]\n    types_api = sources[2]\n    multiarray_funcs = sources[3]\n\n    multiarray_api = sources[:]\n\n    module_list = []\n    extension_list = []\n    init_list = []\n\n    # Check multiarray api indexes\n    multiarray_api_index = genapi.merge_api_dicts(multiarray_api)\n    genapi.check_api_dict(multiarray_api_index)\n\n    numpyapi_list = genapi.get_api_functions('NUMPY_API',\n                                              multiarray_funcs)\n    ordered_funcs_api = genapi.order_dict(multiarray_funcs)\n\n    # Create dict name -> *Api instance\n    api_name = 'PyArray_API'\n    multiarray_api_dict = {}\n    for f in numpyapi_list:\n        name = f.name\n        index = multiarray_funcs[name][0]\n        annotations = multiarray_funcs[name][1:]\n        multiarray_api_dict[f.name] = FunctionApi(f.name, index, annotations,\n                                                  f.return_type,\n                                                  f.args, api_name)\n\n    for name, val in global_vars.items():\n        index, type = val\n        multiarray_api_dict[name] = GlobalVarApi(name, index, type, api_name)\n\n    for name, val in scalar_bool_values.items():\n        index = val[0]\n        multiarray_api_dict[name] = BoolValuesApi(name, index, api_name)\n\n    for name, val in types_api.items():\n        index = val[0]\n        multiarray_api_dict[name] = TypeApi(name, index, 'PyTypeObject', api_name)\n\n    if len(multiarray_api_dict) != len(multiarray_api_index):\n        raise AssertionError(\"Multiarray API size mismatch %d %d\" %\n                        (len(multiarray_api_dict), len(multiarray_api_index)))\n\n    extension_list = []\n    for name, index in genapi.order_dict(multiarray_api_index):\n        api_item = multiarray_api_dict[name]\n        extension_list.append(api_item.define_from_array_api_string())\n        init_list.append(api_item.array_api_define())\n        module_list.append(api_item.internal_define())\n\n    # Write to header\n    fid = open(header_file, 'w')\n    s = h_template % ('\\n'.join(module_list), '\\n'.join(extension_list))\n    fid.write(s)\n    fid.close()\n\n    # Write to c-code\n    fid = open(c_file, 'w')\n    s = c_template % ',\\n'.join(init_list)\n    fid.write(s)\n    fid.close()\n\n    # write to documentation\n    fid = open(doc_file, 'w')\n    fid.write(c_api_header)\n    for func in numpyapi_list:\n        fid.write(func.to_ReST())\n        fid.write('\\n\\n')\n    fid.close()\n\n    return targets",
  "smell": [
    {
      "smell_id": 3,
      "line_no": 32,
      "description": "The variable referenced in the statement has inconsistent types."
    }
  ]
}