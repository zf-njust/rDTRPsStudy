{
  "code": "def decrypt(self, b_vaulttext, b_password, key_length=32):\n\n        \"\"\" Decrypt the given data and return it\n        :arg b_data: A byte string containing the encrypted data\n        :arg b_password: A byte string containing the encryption password\n        :arg key_length: Length of the key\n        :returns: A byte string containing the decrypted data\n        \"\"\"\n\n        display.deprecated(u'The VaultAES format is insecure and has been'\n                ' deprecated since Ansible-1.5.  Use vault rekey FILENAME to'\n                ' switch to the newer VaultAES256 format', version='2.3')\n        # http://stackoverflow.com/a/14989032\n\n        b_ciphertext = unhexlify(b_vaulttext)\n\n        in_file = BytesIO(b_ciphertext)\n        in_file.seek(0)\n        out_file = BytesIO()\n\n        bs = AES.block_size\n        b_tmpsalt = in_file.read(bs)\n        b_salt = b_tmpsalt[len(b'Salted__'):]\n        b_key, b_iv = self._aes_derive_key_and_iv(b_password, b_salt, key_length, bs)\n        cipher = AES.new(b_key, AES.MODE_CBC, b_iv)\n        b_next_chunk = b''\n        finished = False\n\n        while not finished:\n            b_chunk, b_next_chunk = b_next_chunk, cipher.decrypt(in_file.read(1024 * bs))\n            if len(b_next_chunk) == 0:\n                if PY3:\n                    padding_length = b_chunk[-1]\n                else:\n                    padding_length = ord(b_chunk[-1])\n\n                b_chunk = b_chunk[:-padding_length]\n                finished = True\n\n            out_file.write(b_chunk)\n            out_file.flush()\n\n        # reset the stream pointer to the beginning\n        out_file.seek(0)\n        b_out_data = out_file.read()\n        out_file.close()\n\n        # split out sha and verify decryption\n        b_split_data = b_out_data.split(b\"\\n\", 1)\n        b_this_sha = b_split_data[0]\n        b_plaintext = b_split_data[1]\n        b_test_sha = to_bytes(sha256(b_plaintext).hexdigest())\n\n        if b_this_sha != b_test_sha:\n            raise AnsibleError(\"Decryption failed\")\n\n        return b_plaintext",
  "smell": [
    {
      "smell_id": 3,
      "line_no": 37,
      "description": "The variable referenced in the statement has inconsistent types."
    }
  ]
}