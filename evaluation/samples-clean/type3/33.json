{
  "code": "    def log(self, msg, log_args=None):\n\n        if not self.no_log:\n\n            if log_args is None:\n                log_args = dict()\n\n            module = 'ansible-%s' % self._name\n            if isinstance(module, binary_type):\n                module = module.decode('utf-8', 'replace')\n\n            # 6655 - allow for accented characters\n            if not isinstance(msg, (binary_type, text_type)):\n                raise TypeError(\"msg should be a string (got %s)\" % type(msg))\n\n            # We want journal to always take text type\n            # syslog takes bytes on py2, text type on py3\n            if isinstance(msg, binary_type):\n                journal_msg = remove_values(msg.decode('utf-8', 'replace'), self.no_log_values)\n            else:\n                # TODO: surrogateescape is a danger here on Py3\n                journal_msg = remove_values(msg, self.no_log_values)\n\n            if PY3:\n                syslog_msg = journal_msg\n            else:\n                syslog_msg = journal_msg.encode('utf-8', 'replace')\n\n            if has_journal:\n                journal_args = [(\"MODULE\", os.path.basename(__file__))]\n                for arg in log_args:\n                    journal_args.append((arg.upper(), str(log_args[arg])))\n                try:\n                    journal.send(u\"%s %s\" % (module, journal_msg), **dict(journal_args))\n                except IOError:\n                    # fall back to syslog since logging to journal failed\n                    self._log_to_syslog(syslog_msg)\n            else:\n                self._log_to_syslog(syslog_msg)",
  "smell": [
    {
      "smell_id": 3,
      "line_no": 37,
      "description": "The variable referenced in the statement has inconsistent types."
    }
  ]
}