{
  "code": "def dispatch_visit(self, node):\n        cls = node.__class__\n        if cls is nodes.document:\n            self.push(self.root.content)\n            self.brute_refs(node)\n\n        elif cls is nodes.comment:\n            return\n\n        elif cls is nodes.section:\n            self.section += 1\n\n        elif cls is nodes.substitution_definition:\n            name = node.attributes['names'][0]\n            self.substitution[name] = node.children[0]\n\n        elif cls is nodes.substitution_reference:\n            node = self.substitution[node.attributes['refname']]\n            # it can be e.g. image or something else too!\n            if isinstance(node, nodes.Text):\n                self.text += node\n\n        elif cls is nodes.footnote:\n            # .. [x] footnote\n            text = ''\n            foot = RstFootnote()\n            ids = node.attributes['ids']\n            self.current.add_widget(foot)\n            self.push(foot)\n\n            # check if its autonumbered\n            auto = ''\n            if 'auto' in node.attributes:\n                auto = node.attributes['auto']\n\n            # auto is either 1(int) or '*'\n            if auto == 1:\n                self.footnotes['autonum'] += 1\n                name = str(self.footnotes['autonum'])\n                node_id = node.attributes['ids'][0]\n            elif auto == '*':\n                autosym = self.footnotes['autosym']\n                name = self.footlist[\n                    autosym % 10\n                ] * (int(autosym / 10) + 1)\n                self.footnotes['autosym'] += 1\n                node_id = node.attributes['ids'][0]\n            else:\n                # can have multiple refs:\n                # [8] (1, 2) Footnote ref\n                name = node.attributes['names'][0]\n                node_id = node['ids'][0]\n\n            # we can have a footnote without any link or ref\n            # .. [1] Empty footnote\n            link = self.root.refs_assoc.get(name, '')\n\n            # handle no refs\n            ref = self.root.refs_assoc.get('backref' + name, '')\n\n            # colorize only with refs\n            colorized = self.colorize(name, 'link') if ref else name\n\n            # has no refs\n            if not ref:\n                text = '&bl;%s&br;' % (colorized)\n            # list of refs\n            elif ref and isinstance(ref, list):\n                ref_block = [\n                    '[ref=%s][u]%s[/u][/ref]' % (r, i + 1)\n                    for i, r in enumerate(ref)\n                ]\n                # [1] ( 1, 2, ...) Footnote\n                self.foot_refblock = ''.join([\n                    '[i]( ', ', '.join(ref_block), ' )[/i]'\n                ])\n\n                text = '[anchor=%s]&bl;%s&br;' % (\n                    node['ids'][0], colorized\n                )\n            # single ref\n            else:\n                text = '[anchor=%s][ref=%s]&bl;%s&br;[/ref]' % (\n                    node['ids'][0], ref, colorized\n                )\n\n            name = RstFootName(\n                document=self.root,\n                text=text,\n            )\n            self.current.add_widget(name)\n            # give it anchor + event manually\n            self.root.add_anchors(name)\n            name.bind(on_ref_press=self.root.on_ref_press)\n\n        elif cls is nodes.footnote_reference:\n            self.text += '&bl;'\n            text = ''\n            name = ''\n\n            # check if its autonumbered\n            auto = ''\n            if 'auto' in node.attributes:\n                auto = node.attributes['auto']\n\n            # auto is either 1(int) or '*'\n            if auto == 1:\n                self.footnotes['autonum_ref'] += 1\n                name = str(self.footnotes['autonum_ref'])\n                node_id = node.attributes['ids'][0]\n            elif auto == '*':\n                autosym = self.footnotes['autosym_ref']\n                name = self.footlist[\n                    autosym % 10\n                ] * (int(autosym / 10) + 1)\n                self.footnotes['autosym_ref'] += 1\n                node_id = node.attributes['ids'][0]\n            else:\n                # can have multiple refs:\n                # [8] (1, 2) Footnote ref\n                name = node.children[0]\n                node_id = node['ids'][0]\n            text += name\n\n            refs = self.root.refs_assoc.get(name, '')\n            if not refs and auto in (1, '*'):\n                # parser should trigger it when checking\n                # for backlinks, but we don't have **any** refs\n                # to work with, so we have to trigger it manually\n                raise Exception(\n                    'Too many autonumbered or autosymboled '\n                    'footnote references!'\n                )\n\n            # has a single or no refs ( '' )\n            text = '[anchor=%s][ref=%s][color=%s]%s' % (\n                node_id, refs,\n                self.root.colors.get(\n                    'link', self.root.colors.get('paragraph')\n                ),\n                text\n            )\n            self.text += text\n            self.text_have_anchor = True\n\n        elif cls is nodes.title:\n            label = RstTitle(section=self.section, document=self.root)\n            self.current.add_widget(label)\n            self.push(label)\n            # assert(self.text == '')\n\n        elif cls is nodes.Text:\n            # check if parent isn't a special directive\n            if hasattr(node, 'parent'):\n                if node.parent.tagname == 'substitution_definition':\n                    # .. |ref| replace:: something\n                    return\n                elif node.parent.tagname == 'substitution_reference':\n                    # |ref|\n                    return\n                elif node.parent.tagname == 'comment':\n                    # .. COMMENT\n                    return\n                elif node.parent.tagname == 'footnote_reference':\n                    # .. [#]_\n                    # .. [*]_\n                    # rewrite it to handle autonum/sym here\n                    # close tags with departure\n                    return\n\n            if self.do_strip_text:\n                node = node.replace('\\n', ' ')\n                node = node.replace('  ', ' ')\n                node = node.replace('\\t', ' ')\n                node = node.replace('  ', ' ')\n                if node.startswith(' '):\n                    node = ' ' + node.lstrip(' ')\n                if node.endswith(' '):\n                    node = node.rstrip(' ') + ' '\n                if self.text.endswith(' ') and node.startswith(' '):\n                    node = node[1:]\n            self.text += node\n\n        elif cls is nodes.paragraph:\n            self.do_strip_text = True\n\n            if isinstance(node.parent, nodes.footnote):\n                if self.foot_refblock:\n                    self.text = self.foot_refblock + ' '\n                self.foot_refblock = None\n                # self.do_strip_text = False\n\n            label = RstParagraph(document=self.root)\n            if isinstance(self.current, RstEntry):\n                label.mx = 10\n            self.current.add_widget(label)\n            self.push(label)\n\n        elif cls is nodes.literal_block:\n            box = RstLiteralBlock()\n            self.current.add_widget(box)\n            self.push(box)\n\n        elif cls is nodes.emphasis:\n            self.text += '[i]'\n\n        elif cls is nodes.strong:\n            self.text += '[b]'\n\n        elif cls is nodes.literal:\n            self.text += '[font=fonts/RobotoMono-Regular.ttf]'\n\n        elif cls is nodes.block_quote:\n            box = RstBlockQuote()\n            self.current.add_widget(box)\n            self.push(box.content)\n            assert(self.text == '')\n\n        elif cls is nodes.enumerated_list:\n            box = RstList()\n            self.current.add_widget(box)\n            self.push(box)\n            self.idx_list = 0\n\n        elif cls is nodes.bullet_list:\n            box = RstList()\n            self.current.add_widget(box)\n            self.push(box)\n            self.idx_list = None\n\n        elif cls is nodes.list_item:\n            bullet = '-'\n            if self.idx_list is not None:\n                self.idx_list += 1\n                bullet = '%d.' % self.idx_list\n            bullet = self.colorize(bullet, 'bullet')\n            item = RstListItem()\n            self.current.add_widget(RstListBullet(\n                text=bullet, document=self.root))\n            self.current.add_widget(item)\n            self.push(item)\n\n        elif cls is nodes.system_message:\n            label = RstSystemMessage()\n            if self.root.show_errors:\n                self.current.add_widget(label)\n            self.push(label)\n\n        elif cls is nodes.warning:\n            label = RstWarning()\n            self.current.add_widget(label)\n            self.push(label.content)\n            assert(self.text == '')\n\n        elif cls is nodes.note:\n            label = RstNote()\n            self.current.add_widget(label)\n            self.push(label.content)\n            assert(self.text == '')\n\n        elif cls is nodes.image:\n            # docutils parser breaks path with spaces\n            # e.g. \"C:/my path\" -> \"C:/mypath\"\n            uri = node['uri']\n            align = node.get('align', 'center')\n            image_size = [\n                node.get('width'),\n                node.get('height')\n            ]\n\n            # use user's size if defined\n            def set_size(img, size):\n                img.size = [\n                    size[0] or img.width,\n                    size[1] or img.height\n                ]\n\n            if uri.startswith('/') and self.root.document_root:\n                uri = join(self.root.document_root, uri[1:])\n\n            if uri.startswith('http://') or uri.startswith('https://'):\n                image = RstAsyncImage(source=uri)\n                image.bind(on_load=lambda *a: set_size(image, image_size))\n            else:\n                image = RstImage(source=uri)\n                set_size(image, image_size)\n\n            root = AnchorLayout(\n                size_hint_y=None,\n                anchor_x=align,\n                height=image.height\n            )\n\n            image.bind(height=root.setter('height'))\n            root.add_widget(image)\n            self.current.add_widget(root)\n            # TODO:\n            # .. _img: <url>\n            # .. |img| image:: <img>\n            # |img|_ <- needs refs and on_ref_press\n\n        elif cls is nodes.definition_list:\n            lst = RstDefinitionList(document=self.root)\n            self.current.add_widget(lst)\n            self.push(lst)\n\n        elif cls is nodes.term:\n            assert(isinstance(self.current, RstDefinitionList))\n            term = RstTerm(document=self.root)\n            self.current.add_widget(term)\n            self.push(term)\n\n        elif cls is nodes.definition:\n            assert(isinstance(self.current, RstDefinitionList))\n            definition = RstDefinition(document=self.root)\n            definition.add_widget(RstDefinitionSpace(document=self.root))\n            self.current.add_widget(definition)\n            self.push(definition)\n\n        elif cls is nodes.field_list:\n            fieldlist = RstFieldList()\n            self.current.add_widget(fieldlist)\n            self.push(fieldlist)\n\n        elif cls is nodes.field_name:\n            name = RstFieldName(document=self.root)\n            self.current.add_widget(name)\n            self.push(name)\n\n        elif cls is nodes.field_body:\n            body = RstFieldBody()\n            self.current.add_widget(body)\n            self.push(body)\n\n        elif cls is nodes.table:\n            table = RstTable(cols=0)\n            self.current.add_widget(table)\n            self.push(table)\n\n        elif cls is nodes.colspec:\n            self.current.cols += 1\n\n        elif cls is nodes.entry:\n            entry = RstEntry()\n            self.current.add_widget(entry)\n            self.push(entry)\n\n        elif cls is nodes.transition:\n            self.current.add_widget(RstTransition())\n\n        elif cls is nodes.reference:\n            name = node.get('name', node.get('refuri'))\n            self.text += '[ref=%s][color=%s]' % (\n                name, self.root.colors.get(\n                    'link', self.root.colors.get('paragraph')))\n            if 'refname' in node and 'name' in node:\n                self.root.refs_assoc[node['name']] = node['refname']\n\n        elif cls is nodes.target:\n            name = None\n            if 'ids' in node:\n                name = node['ids'][0]\n            elif 'names' in node:\n                name = node['names'][0]\n            self.text += '[anchor=%s]' % name\n            self.text_have_anchor = True\n\n        elif cls is role_doc:\n            self.doc_index = len(self.text)\n\n        elif cls is role_video:\n            pass",
  "smell": [
    {
      "smell_id": 3,
      "line_no": 56,
      "description": "The variable referenced in the statement has inconsistent types."
    }
  ]
}