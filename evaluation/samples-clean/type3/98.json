{
  "code": "def autocall(self, parameter_s=''):\n        \"\"\"Make functions callable without having to type parentheses.\n\n        Usage:\n\n           %autocall [mode]\n\n        The mode can be one of: 0->Off, 1->Smart, 2->Full.  If not given, the\n        value is toggled on and off (remembering the previous state).\n\n        In more detail, these values mean:\n\n        0 -> fully disabled\n\n        1 -> active, but do not apply if there are no arguments on the line.\n\n        In this mode, you get::\n\n          In [1]: callable\n          Out[1]: <built-in function callable>\n\n          In [2]: callable 'hello'\n          ------> callable('hello')\n          Out[2]: False\n\n        2 -> Active always.  Even if no arguments are present, the callable\n        object is called::\n\n          In [2]: float\n          ------> float()\n          Out[2]: 0.0\n\n        Note that even with autocall off, you can still use '/' at the start of\n        a line to treat the first argument on the command line as a function\n        and add parentheses to it::\n\n          In [8]: /str 43\n          ------> str(43)\n          Out[8]: '43'\n\n        # all-random (note for auto-testing)\n        \"\"\"\n\n        if parameter_s:\n            arg = int(parameter_s)\n        else:\n            arg = 'toggle'\n\n        if not arg in (0, 1, 2, 'toggle'):\n            error('Valid modes: (0->Off, 1->Smart, 2->Full')\n            return\n\n        if arg in (0, 1, 2):\n            self.shell.autocall = arg\n        else: # toggle\n            if self.shell.autocall:\n                self._magic_state.autocall_save = self.shell.autocall\n                self.shell.autocall = 0\n            else:\n                try:\n                    self.shell.autocall = self._magic_state.autocall_save\n                except AttributeError:\n                    self.shell.autocall = self._magic_state.autocall_save = 1\n\n        print(\"Automatic calling is:\",['OFF','Smart','Full'][self.shell.autocall])",
  "smell": [
    {
      "smell_id": 3,
      "line_no": 53,
      "description": "The variable referenced in the statement has inconsistent types."
    }
  ]
}