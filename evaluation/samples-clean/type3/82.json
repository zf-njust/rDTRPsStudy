{
  "code": "def run_command(self, args, check_rc=False, close_fds=True, executable=None, data=None, binary_data=False, path_prefix=None, cwd=None, use_unsafe_shell=False, prompt_regex=None, environ_update=None, umask=None, encoding='utf-8', errors='surrogate_or_strict'):\n        '''\n        Execute a command, returns rc, stdout, and stderr.\n\n        :arg args: is the command to run\n            * If args is a list, the command will be run with shell=False.\n            * If args is a string and use_unsafe_shell=False it will split args to a list and run with shell=False\n            * If args is a string and use_unsafe_shell=True it runs with shell=True.\n        :kw check_rc: Whether to call fail_json in case of non zero RC.\n            Default False\n        :kw close_fds: See documentation for subprocess.Popen(). Default True\n        :kw executable: See documentation for subprocess.Popen(). Default None\n        :kw data: If given, information to write to the stdin of the command\n        :kw binary_data: If False, append a newline to the data.  Default False\n        :kw path_prefix: If given, additional path to find the command in.\n            This adds to the PATH environment vairable so helper commands in\n            the same directory can also be found\n        :kw cwd: If given, working directory to run the command inside\n        :kw use_unsafe_shell: See `args` parameter.  Default False\n        :kw prompt_regex: Regex string (not a compiled regex) which can be\n            used to detect prompts in the stdout which would otherwise cause\n            the execution to hang (especially if no input data is specified)\n        :kw environ_update: dictionary to *update* os.environ with\n        :kw umask: Umask to be used when running the command. Default None\n        :kw encoding: Since we return native strings, on python3 we need to\n            know the encoding to use to transform from bytes to text.  If you\n            want to always get bytes back, use encoding=None.  The default is\n            \"utf-8\".  This does not affect transformation of strings given as\n            args.\n        :kw errors: Since we return native strings, on python3 we need to\n            transform stdout and stderr from bytes to text.  If the bytes are\n            undecodable in the ``encoding`` specified, then use this error\n            handler to deal with them.  The default is ``surrogate_or_strict``\n            which means that the bytes will be decoded using the\n            surrogateescape error handler if available (available on all\n            python3 versions we support) otherwise a UnicodeError traceback\n            will be raised.  This does not affect transformations of strings\n            given as args.\n        :returns: A 3-tuple of return code (integer), stdout (native string),\n            and stderr (native string).  On python2, stdout and stderr are both\n            byte strings.  On python3, stdout and stderr are text strings converted\n            according to the encoding and errors parameters.  If you want byte\n            strings on python3, use encoding=None to turn decoding to text off.\n        '''\n\n        shell = False\n        if isinstance(args, list):\n            if use_unsafe_shell:\n                args = \" \".join([pipes.quote(x) for x in args])\n                shell = True\n        elif isinstance(args, (binary_type, text_type)) and use_unsafe_shell:\n            shell = True\n        elif isinstance(args, (binary_type, text_type)):\n            # On python2.6 and below, shlex has problems with text type\n            # On python3, shlex needs a text type.\n            if PY2:\n                args = to_bytes(args, errors='surrogate_or_strict')\n            elif PY3:\n                args = to_text(args, errors='surrogateescape')\n            args = shlex.split(args)\n        else:\n            msg = \"Argument 'args' to run_command must be list or string\"\n            self.fail_json(rc=257, cmd=args, msg=msg)\n\n        prompt_re = None\n        if prompt_regex:\n            if isinstance(prompt_regex, text_type):\n                if PY3:\n                    prompt_regex = to_bytes(prompt_regex, errors='surrogateescape')\n                elif PY2:\n                    prompt_regex = to_bytes(prompt_regex, errors='surrogate_or_strict')\n            try:\n                prompt_re = re.compile(prompt_regex, re.MULTILINE)\n            except re.error:\n                self.fail_json(msg=\"invalid prompt regular expression given to run_command\")\n\n        # expand things like $HOME and ~\n        if not shell:\n            args = [ os.path.expanduser(os.path.expandvars(x)) for x in args if x is not None ]\n\n        rc = 0\n        msg = None\n        st_in = None\n\n        # Manipulate the environ we'll send to the new process\n        old_env_vals = {}\n        # We can set this from both an attribute and per call\n        for key, val in self.run_command_environ_update.items():\n            old_env_vals[key] = os.environ.get(key, None)\n            os.environ[key] = val\n        if environ_update:\n            for key, val in environ_update.items():\n                old_env_vals[key] = os.environ.get(key, None)\n                os.environ[key] = val\n        if path_prefix:\n            old_env_vals['PATH'] = os.environ['PATH']\n            os.environ['PATH'] = \"%s:%s\" % (path_prefix, os.environ['PATH'])\n\n        # If using test-module and explode, the remote lib path will resemble ...\n        #   /tmp/test_module_scratch/debug_dir/ansible/module_utils/basic.py\n        # If using ansible or ansible-playbook with a remote system ...\n        #   /tmp/ansible_vmweLQ/ansible_modlib.zip/ansible/module_utils/basic.py\n\n        # Clean out python paths set by ansiballz\n        if 'PYTHONPATH' in os.environ:\n            pypaths = os.environ['PYTHONPATH'].split(':')\n            pypaths = [x for x in pypaths \\\n                        if not x.endswith('/ansible_modlib.zip') \\\n                        and not x.endswith('/debug_dir')]\n            os.environ['PYTHONPATH'] = ':'.join(pypaths)\n            if not os.environ['PYTHONPATH']:\n                del os.environ['PYTHONPATH']\n\n        # create a printable version of the command for use\n        # in reporting later, which strips out things like\n        # passwords from the args list\n        to_clean_args = args\n        if PY2:\n            if isinstance(args, text_type):\n                to_clean_args = to_bytes(args)\n        else:\n            if isinstance(args, binary_type):\n                to_clean_args = to_text(args)\n        if isinstance(args, (text_type, binary_type)):\n            to_clean_args = shlex.split(to_clean_args)\n\n        clean_args = []\n        is_passwd = False\n        for arg in to_clean_args:\n            if is_passwd:\n                is_passwd = False\n                clean_args.append('********')\n                continue\n            if PASSWD_ARG_RE.match(arg):\n                sep_idx = arg.find('=')\n                if sep_idx > -1:\n                    clean_args.append('%s=********' % arg[:sep_idx])\n                    continue\n                else:\n                    is_passwd = True\n            arg = heuristic_log_sanitize(arg, self.no_log_values)\n            clean_args.append(arg)\n        clean_args = ' '.join(pipes.quote(arg) for arg in clean_args)\n\n        if data:\n            st_in = subprocess.PIPE\n\n        kwargs = dict(\n            executable=executable,\n            shell=shell,\n            close_fds=close_fds,\n            stdin=st_in,\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE,\n        )\n\n        if cwd and os.path.isdir(cwd):\n            kwargs['cwd'] = cwd\n\n        # store the pwd\n        prev_dir = os.getcwd()\n\n        # make sure we're in the right working directory\n        if cwd and os.path.isdir(cwd):\n            try:\n                os.chdir(cwd)\n            except (OSError, IOError):\n                e = get_exception()\n                self.fail_json(rc=e.errno, msg=\"Could not open %s, %s\" % (cwd, str(e)))\n\n        old_umask = None\n        if umask:\n            old_umask = os.umask(umask)\n\n        try:\n\n            if self._debug:\n                self.log('Executing: ' + clean_args)\n            cmd = subprocess.Popen(args, **kwargs)\n\n            # the communication logic here is essentially taken from that\n            # of the _communicate() function in ssh.py\n\n            stdout = b('')\n            stderr = b('')\n            rpipes = [cmd.stdout, cmd.stderr]\n\n            if data:\n                if not binary_data:\n                    data += '\\n'\n                if isinstance(data, text_type):\n                    data = to_bytes(data)\n                cmd.stdin.write(data)\n                cmd.stdin.close()\n\n            while True:\n                rfd, wfd, efd = select.select(rpipes, [], rpipes, 1)\n                if cmd.stdout in rfd:\n                    dat = os.read(cmd.stdout.fileno(), 9000)\n                    stdout += dat\n                    if dat == b(''):\n                        rpipes.remove(cmd.stdout)\n                if cmd.stderr in rfd:\n                    dat = os.read(cmd.stderr.fileno(), 9000)\n                    stderr += dat\n                    if dat == b(''):\n                        rpipes.remove(cmd.stderr)\n                # if we're checking for prompts, do it now\n                if prompt_re:\n                    if prompt_re.search(stdout) and not data:\n                        if encoding:\n                            stdout = to_native(stdout, encoding=encoding, errors=errors)\n                        else:\n                            stdout = stdout\n                        return (257, stdout, \"A prompt was encountered while running a command, but no input data was specified\")\n                # only break out if no pipes are left to read or\n                # the pipes are completely read and\n                # the process is terminated\n                if (not rpipes or not rfd) and cmd.poll() is not None:\n                    break\n                # No pipes are left to read but process is not yet terminated\n                # Only then it is safe to wait for the process to be finished\n                # NOTE: Actually cmd.poll() is always None here if rpipes is empty\n                elif not rpipes and cmd.poll() == None:\n                    cmd.wait()\n                    # The process is terminated. Since no pipes to read from are\n                    # left, there is no need to call select() again.\n                    break\n\n            cmd.stdout.close()\n            cmd.stderr.close()\n\n            rc = cmd.returncode\n        except (OSError, IOError):\n            e = get_exception()\n            self.fail_json(rc=e.errno, msg=to_native(e), cmd=clean_args)\n        except Exception:\n            e = get_exception()\n            self.fail_json(rc=257, msg=to_native(e), exception=traceback.format_exc(), cmd=clean_args)\n\n        # Restore env settings\n        for key, val in old_env_vals.items():\n            if val is None:\n                del os.environ[key]\n            else:\n                os.environ[key] = val\n\n        if old_umask:\n            os.umask(old_umask)\n\n        if rc != 0 and check_rc:\n            msg = heuristic_log_sanitize(stderr.rstrip(), self.no_log_values)\n            self.fail_json(cmd=clean_args, rc=rc, stdout=stdout, stderr=stderr, msg=msg)\n\n        # reset the pwd\n        os.chdir(prev_dir)\n\n        if encoding is not None:\n            return (rc, to_native(stdout, encoding=encoding, errors=errors),\n                    to_native(stderr, encoding=encoding, errors=errors))\n        return (rc, stdout, stderr)",
  "smell": [
    {
      "smell_id": 3,
      "line_no": 179,
      "description": "The variable referenced in the statement has inconsistent types."
    }
  ]
}