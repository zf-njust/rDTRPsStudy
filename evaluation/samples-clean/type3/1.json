{
  "code": "    def run(self, tmp=None, task_vars=None):\n        result = super(ActionModule, self).run(tmp, task_vars)\n        result['changed'] = False\n\n        if self._task.args.get('src'):\n            try:\n                self._handle_template()\n            except ValueError as exc:\n                return dict(failed=True, msg=exc.message)\n\n        action = self._task.action\n\n        result.update(self._execute_module(module_name=action,\n            module_args=self._task.args, task_vars=task_vars))\n\n        if self._task.args.get('backup') and result.get('__backup__'):\n            # User requested backup and no error occurred in module.\n            # NOTE: If there is a parameter error, _backup key may not be in results.\n            filepath = self._write_backup(task_vars['inventory_hostname'],\n                                          result['__backup__'])\n            result['backup_path'] = filepath\n\n        # strip out any keys that have two leading and two trailing\n        # underscore characters\n        for key in result.keys():\n            if PRIVATE_KEYS_RE.match(key):\n                del result[key]\n\n        return result",
  "smell": [
    {
      "smell_id": 3,
      "line_no": 21,
      "description": "The variable referenced in the statement has inconsistent types."
    }
  ]
}