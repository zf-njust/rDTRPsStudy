{
  "code": "    def _get_display_formatter(self,\n                               dirname_output_format,\n                               fname_output_format,\n                               fp_format,\n                               fp_cleaner=None):\n        \"\"\" generate built-in formatter function\n\n           this is used to define both the notebook and terminal built-in\n            formatters as they only differ by some wrapper text for each entry\n\n           dirname_output_format: string to use for formatting directory\n            names, dirname will be substituted for a single \"%s\" which\n            must appear in this string\n           fname_output_format: string to use for formatting file names,\n            if a single \"%s\" appears in the string, fname will be substituted\n            if two \"%s\" appear in the string, the path to fname will be\n             substituted for the first and fname will be substituted for the\n             second\n           fp_format: string to use for formatting filepaths, must contain\n            exactly two \"%s\" and the dirname will be subsituted for the first\n            and fname will be substituted for the second\n        \"\"\"\n        def f(dirname, fnames, included_suffixes=None):\n            result = []\n            # begin by figuring out which filenames, if any,\n            # are going to be displayed\n            display_fnames = []\n            for fname in fnames:\n                if (isfile(join(dirname,fname)) and\n                       (included_suffixes is None or\n                        splitext(fname)[1] in included_suffixes)):\n                      display_fnames.append(fname)\n\n            if len(display_fnames) == 0:\n                # if there are no filenames to display, don't print anything\n                # (not even the directory name)\n                pass\n            else:\n                # otherwise print the formatted directory name followed by\n                # the formatted filenames\n                dirname_output_line = dirname_output_format % dirname\n                result.append(dirname_output_line)\n                for fname in display_fnames:\n                    fp = fp_format % (dirname,fname)\n                    if fp_cleaner is not None:\n                        fp = fp_cleaner(fp)\n                    try:\n                        # output can include both a filepath and a filename...\n                        fname_output_line = fname_output_format % (fp, fname)\n                    except TypeError:\n                        # ... or just a single filepath\n                        fname_output_line = fname_output_format % fname\n                    result.append(fname_output_line)\n            return result\n        return f",
  "smell": [
    {
      "smell_id": 3,
      "line_no": 42,
      "description": "The variable referenced in the statement has inconsistent types."
    }
  ]
}