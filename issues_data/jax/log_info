==================
8b1cb8a5;Yash Katariya;2022-03-21 16:29:39 -0700;Remove the duplicate `_with_context_manager` tests now that `Mesh` is the default way to create a mesh.
PiperOrigin-RevId: 436333536

==

tests/pjit_test.py
==================
c9a9e56b;jax authors;2022-03-21 15:06:59 -0700;Merge pull request #9987 from jakevdp:rm-pdf
PiperOrigin-RevId: 436314971

==
==================
81209934;Jake VanderPlas;2022-03-21 14:54:47 -0700;readthedocs: do not attempt to build PDF

==

.readthedocs.yml
==================
c56c39e4;jax authors;2022-03-21 13:57:42 -0700;Merge pull request #9869 from jakevdp:rtd-pdf
PiperOrigin-RevId: 436297699

==
==================
00b4e963;jax authors;2022-03-21 12:40:15 -0700;Merge pull request #9984 from jakevdp:bcoo-imports
PiperOrigin-RevId: 436278690

==
==================
50c3e2ad;Jake VanderPlas;2022-03-21 12:23:16 -0700;[sparse] add missing bcoo exports

==

jax/experimental/sparse/__init__.py
==================
2b89236d;jax authors;2022-03-21 12:15:38 -0700;Merge pull request #9967 from froystig:aot-arg-trees
PiperOrigin-RevId: 436272758

==
==================
f15e37a0;jax authors;2022-03-21 11:28:55 -0700;Merge pull request #9971 from YouJiacheng:patch-4
PiperOrigin-RevId: 436260449

==
==================
440cd7b9;jax authors;2022-03-21 11:11:50 -0700;Merge pull request #9906 from jakevdp:gamma-log-space
PiperOrigin-RevId: 436255847

==
==================
cfe34c50;jax authors;2022-03-21 10:55:41 -0700;Merge pull request #9977 from jakevdp:refactor-setops
PiperOrigin-RevId: 436251235

==
==================
e9b17d51;jax authors;2022-03-21 10:39:32 -0700;Merge pull request #9982 from google:dependabot/github_actions/actions/cache-3
PiperOrigin-RevId: 436246939

==
==================
bff08457;dependabot[bot];2022-03-21 17:13:18 +0000;Bump actions/cache from 2 to 3
Bumps [actions/cache](https://github.com/actions/cache) from 2 to 3.
- [Release notes](https://github.com/actions/cache/releases)
- [Commits](https://github.com/actions/cache/compare/v2...v3)

---
updated-dependencies:
- dependency-name: actions/cache
  dependency-type: direct:production
  update-type: version-update:semver-major
...

Signed-off-by: dependabot[bot] <support@github.com>
==

.github/workflows/ci-build.yaml
==================
e5b3f0b5;YouJiacheng;2022-03-20 13:55:03 +0800;Fix #9969
Fix hessian with options and add regression test

==

jax/_src/api.py
tests/api_test.py
==================
9ce77eb1;jax authors;2022-03-21 09:49:54 -0700;Merge pull request #9978 from jakevdp:quickstart-tpu
PiperOrigin-RevId: 436233102

==
==================
32c718db;Jake VanderPlas;2022-03-21 09:41:10 -0700;quickstart: fix outdated TPU reference

==

docs/notebooks/quickstart.ipynb
docs/notebooks/quickstart.md
==================
466bea16;Jake VanderPlas;2022-03-21 09:38:11 -0700;lax_numpy: refactor set operations into separate private submodule

==

jax/_src/numpy/lax_numpy.py
jax/_src/numpy/setops.py
jax/experimental/sparse/bcoo.py
jax/numpy/__init__.py
==================
69969ef8;Jake VanderPlas;2022-03-21 08:33:11 -0700;add random.loggamma and improve dirichlet & beta implementation

==

CHANGELOG.md
docs/jax.random.rst
jax/_src/random.py
jax/random.py
tests/random_test.py
==================
4b4dc3c7;Roy Frostig;2022-03-18 21:35:55 -0700;track input argument information in one tree at each AOT stage
Both `Lowered` and `Compiled` carry information about input arguments
for which the underlying computation was lowered (namely avals,
donation bits, and the input pytree structure today). This change
rearranges some internals so that all of this information is held
together in a single pytree of structs. Doing so simplifies the fields
of both stage classes and helps ensure the input argument properties
are consistent with one another (e.g. now they must share a consistent
pytree structure by definition).

==

jax/_src/api.py
jax/_src/stages.py
jax/experimental/maps.py
jax/experimental/pjit.py
==================
1ffa285b;jax authors;2022-03-19 12:16:15 -0700;Merge pull request #9964 from jakevdp:bcoo-mul
PiperOrigin-RevId: 435905671

==
==================
1b17b548;Yash Katariya;2022-03-18 17:06:21 -0700;Set aval when creating the local_shards
PiperOrigin-RevId: 435771774

==

jax/experimental/global_device_array.py
==================
b2e0deac;Jake VanderPlas;2022-03-18 15:35:07 -0700;[sparse] bcoo_mul: support mixing batch & sparse dims

==

jax/experimental/sparse/bcoo.py
tests/sparse_test.py
==================
e392af3b;jax authors;2022-03-18 14:55:05 -0700;Merge pull request #9738 from jakevdp:refactor-reductions
PiperOrigin-RevId: 435741934

==
==================
b311730b;jax authors;2022-03-18 14:22:59 -0700;Merge pull request #9962 from google:update-pypi
PiperOrigin-RevId: 435734352

==
==================
4c5d8e96;Matthew Johnson;2022-03-18 14:16:00 -0700;update version and changelog for pypi

==

CHANGELOG.md
jax/version.py
==================
b4f47c4f;jax authors;2022-03-18 11:50:34 -0700;Merge pull request #9959 from mattjj:fix-9923
PiperOrigin-RevId: 435695838

==
==================
121d8d63;Jake VanderPlas;2022-03-18 11:47:22 -0700;Factor-out reductions from lax_numpy.py

==

jax/_src/numpy/lax_numpy.py
jax/_src/numpy/reductions.py
jax/numpy/__init__.py
==================
d60d5d77;Matthew Johnson;2022-03-18 11:09:32 -0700;fix typo in #9923

==

jax/_src/custom_derivatives.py
tests/api_test.py
==================
e9f59aed;jax authors;2022-03-18 08:55:19 -0700;Merge pull request #9955 from nicholasjng:add-itemsize
PiperOrigin-RevId: 435650867

==
==================
9e149bb0;Nicholas Junge;2022-03-18 12:32:32 +0100;Add `itemsize` property to JAX arrays
This commit adds the `itemsize` property to the JAX Array and ShapedArray classes. Additionally, tests were added to check that the behavior exactly matches that of NumPy's `itemsize` property.

This change was directly modelled off of pull request #3988, which added the (related) `nbytes` property to JAX arrays.

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
6cd98041;Sandeep Dasgupta;2022-03-17 23:10:46 -0700;Replace (deprecated) StrEnumAttr with EnumAttr.
ref: https://reviews.llvm.org/D120834
PiperOrigin-RevId: 435550738

==

jax/_src/lax/lax.py
jax/interpreters/mlir.py
jax/interpreters/pxla.py
tests/filecheck/math.filecheck.py
==================
1f95273a;jax authors;2022-03-17 20:19:08 -0700;Merge pull request #9950 from froystig:wrapped
PiperOrigin-RevId: 435524235

==
==================
4b813110;Yash Katariya;2022-03-17 20:02:20 -0700;Internal change
PiperOrigin-RevId: 435521153

==

jax/experimental/global_device_array.py
==================
e04ea89b;Roy Frostig;2022-03-15 13:51:51 -0700;introduce a protocol for compilation wrappers

==

jax/_src/api.py
jax/_src/stages.py
jax/experimental/maps.py
jax/experimental/pjit.py
jax/stages.py
==================
f73a4886;jax authors;2022-03-17 17:12:02 -0700;Merge pull request #9948 from froystig:xmap-api-boundary
PiperOrigin-RevId: 435490461

==
==================
a6841a9b;Roy Frostig;2022-03-17 16:35:38 -0700;mark `xmap` as an API boundary; filter `experimental.maps` from tracebacks and source info

==

jax/experimental/maps.py
==================
ce4ba113;jax authors;2022-03-17 16:24:57 -0700;Merge pull request #9947 from google:update-pypi
PiperOrigin-RevId: 435478869

==
==================
d2b393bb;Matthew Johnson;2022-03-17 15:35:26 -0700;update version and changelog for pypi

==

CHANGELOG.md
jax/version.py
==================
5d7f6397;Qiao Zhang;2022-03-17 14:47:02 -0700;Add small and big matmul to api_benchmarks.
name                                  cpu/op
jit_small_matmul                      2.96µs ± 2%
jit_big_matmul                        22.1µs ±21%

name                                  time/op

jit_small_matmul                      2.96µs ± 2%
jit_big_matmul                        22.7µs ±21%

PiperOrigin-RevId: 435453853

==

benchmarks/api_benchmark.py
==================
53f52cb6;jax authors;2022-03-17 14:46:21 -0700;Merge pull request #9942 from jakevdp:glu-fix
PiperOrigin-RevId: 435453524

==
==================
ae631e99;jax authors;2022-03-17 13:54:55 -0700;Merge pull request #9944 from jakevdp:poly-refactor
PiperOrigin-RevId: 435439922

==
==================
603bb3c5;Jake VanderPlas;2022-03-17 13:28:54 -0700;lax_numpy: move poly functions into numpy.polynomial

==

jax/_src/numpy/lax_numpy.py
jax/_src/numpy/polynomial.py
jax/numpy/__init__.py
==================
2d79a646;jax authors;2022-03-17 12:28:41 -0700;Merge pull request #9943 from jakevdp:ufunc-imports
PiperOrigin-RevId: 435416544

==
==================
131c005b;Jake VanderPlas;2022-03-17 12:12:18 -0700;lax_numpy refactoring: directly import ufuncs

==

jax/numpy/__init__.py
==================
d7bd93f6;jax authors;2022-03-17 11:56:38 -0700;Merge pull request #9925 from jakevdp:refactor-index-ops
PiperOrigin-RevId: 435408095

==
==================
c762e074;Jake VanderPlas;2022-03-17 11:38:13 -0700;jax.nn.glu: fix static argname issue

==

jax/_src/nn/functions.py
tests/nn_test.py
==================
c3a4a6e6;Thomas Köppe;2022-03-17 11:19:15 -0700;Revert previous change
PiperOrigin-RevId: 435397906

==

jax/_src/lax/lax.py
tests/lax_test.py
==================
0a72adbd;Jake VanderPlas;2022-03-17 11:05:45 -0700;lax_numpy: factor out indexing tricks

==

jax/_src/numpy/index_tricks.py
jax/_src/numpy/lax_numpy.py
jax/_src/ops/scatter.py
jax/_src/scipy/special.py
jax/numpy/__init__.py
==================
250ef019;jax authors;2022-03-17 11:00:19 -0700;Merge pull request #9938 from jakevdp:doc-disable-jit
PiperOrigin-RevId: 435391983

==
==================
625a69d3;Jake VanderPlas;2022-03-17 10:17:40 -0700;DOC: more info on disable_jit

==

jax/_src/api.py
==================
1d5833d2;Lena Martens;2022-03-17 09:59:52 -0700;Reshape top_k operand to 2D by collapsing the batch dimensions when lowering.
PiperOrigin-RevId: 435374934

==

jax/_src/lax/lax.py
tests/lax_test.py
==================
4d966bb9;Ofir Nachum;2022-03-17 09:13:14 -0700;Return gradients as flattened list from custom-defined gradient op in jax2tf.
Previous code returned gradients as tree. These are then flattened by tf's custom_gradient, but the flattening is performed by tf.nest as opposed to tree_util, and this can lead to inconsistencies in the order of gradients compared to order of the inputs.

PiperOrigin-RevId: 435363026

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/jax2tf_test.py
==================
1f0a5b39;jax authors;2022-03-17 00:59:58 -0700;Merge pull request #9891 from gnecula:jax_poly_doc
PiperOrigin-RevId: 435274979

==
==================
3a949acc;Yuanzhong Xu;2022-03-16 20:57:29 -0700;Allow a single logical mesh dim to take all devices.
PiperOrigin-RevId: 435240241

==

jax/experimental/mesh_utils.py
tests/mesh_utils_test.py
==================
e309fb98;jax authors;2022-03-16 20:53:57 -0700;Merge pull request #9923 from mattjj:issue9567
PiperOrigin-RevId: 435239575

==
==================
db0952e4;jax authors;2022-03-16 20:48:00 -0700;Merge pull request #9924 from mattjj:issue9823
PiperOrigin-RevId: 435238732

==
==================
3d0be6ae;jax authors;2022-03-16 20:32:24 -0700;Merge pull request #9908 from froystig:custom-transpose-stage
PiperOrigin-RevId: 435236313

==
==================
45af307a;Roy Frostig;2022-02-18 13:44:06 -0800;staging and compilation for `custom_transpose`
Co-authored-by: Matthew Johnson <mattjj@google.com>

==

jax/_src/custom_transpose.py
jax/interpreters/partial_eval.py
tests/api_test.py
==================
b0b4dfdc;Matthew Johnson;2022-03-16 16:09:17 -0700;fix #9823

==

jax/core.py
==================
b1847bc4;Matthew Johnson;2022-03-16 15:47:00 -0700;fix #9567

==

jax/_src/custom_derivatives.py
tests/api_test.py
==================
4cdc25f1;jax authors;2022-03-16 15:00:16 -0700;Merge pull request #9921 from skye:version
PiperOrigin-RevId: 435168222

==
==================
d7087abc;Skye Wanderman-Milne;2022-03-16 14:25:19 -0700;Bump jax and jaxlib versions for 0.3.2 release
Also add CPU pjit to changelog

==

CHANGELOG.md
jax/version.py
jaxlib/version.py
setup.py
==================
64323cc6;jax authors;2022-03-16 13:07:49 -0700;Merge pull request #9900 from froystig:aot-src-module
PiperOrigin-RevId: 435135302

==
==================
2c23c947;jax authors;2022-03-16 12:55:19 -0700;Merge pull request #9920 from skye:release
PiperOrigin-RevId: 435131902

==
==================
f9775a2c;Skye Wanderman-Milne;2022-03-16 10:17:42 -0700;Update CHANGELOG and setup.py for jax + jaxlib 0.3.2 releases

==

CHANGELOG.md
setup.py
==================
67f1d23f;jax authors;2022-03-15 20:28:51 -0700;Merge pull request #9909 from mattjj:issue9865
PiperOrigin-RevId: 434931970

==
==================
43036e13;Matthew Johnson;2022-03-15 20:06:37 -0700;improvements to autodidax reduce_sum
* generalize reduce_sum to handle multiple axes
* add reduce_sum transpose rule

also fix bug in AD jaxpr formation related to deduplicating consts

==

docs/autodidax.ipynb
docs/autodidax.md
docs/autodidax.py
==================
c35a3ca0;jax authors;2022-03-15 16:34:26 -0700;Merge pull request #9905 from skye:cloud_tpu_init_v4
PiperOrigin-RevId: 434887939

==
==================
b36cd255;Skye Wanderman-Milne;2022-03-15 14:55:36 -0700;Add TPU v4 support to cloud_tpu_init
Tested manually on a v4-8 and v4-32.

==

jax/_src/cloud_tpu_init.py
==================
04748844;Roy Frostig;2022-03-14 19:38:23 -0700;factor AOT types out to a `stages` module

==

jax/__init__.py
jax/_src/api.py
jax/_src/stages.py
jax/experimental/maps.py
jax/experimental/pjit.py
jax/stages.py
==================
f47ce791;jax authors;2022-03-15 14:56:00 -0700;Merge pull request #9901 from jakevdp:fix-int-x64
PiperOrigin-RevId: 434863868

==
==================
36dabf14;Jake VanderPlas;2022-03-15 14:06:52 -0700;jnp.unique: avoid constructing arrays with explicit int64

==

jax/_src/numpy/lax_numpy.py
==================
5354a016;jax authors;2022-03-15 13:13:13 -0700;Merge pull request #9897 from jakevdp:numpy-doc
PiperOrigin-RevId: 434837122

==
==================
846c480f;Yash Katariya;2022-03-15 12:31:51 -0700;Set in_positional_semantics should be GLOBAL for fully replicated values to avoid recompilation.
Split _pjit_jaxpr into 2 functions so that passing in `is_gda` as an argument to _pjit_jaxpr can be avoided which was leading to the cache invalidation.

PiperOrigin-RevId: 434825926

==

jax/experimental/maps.py
jax/experimental/pjit.py
jax/interpreters/pxla.py
tests/pjit_test.py
==================
4848c75b;jax authors;2022-03-15 12:22:14 -0700;Adds use_auto_spmd_partitioning and propagates its value down the stack
PiperOrigin-RevId: 434823543

==

jax/_src/lib/xla_bridge.py
jax/experimental/compilation_cache/compilation_cache.py
==================
09105b2d;Jake VanderPlas;2022-03-15 11:02:59 -0700;Update outdated jax.numpy module docs

==

docs/jax.numpy.rst
==================
057905bd;Skye Wanderman-Milne;2022-03-15 10:30:07 -0700;Update WORKSPACE for jaxlib 0.3.2 release, take 3
PiperOrigin-RevId: 434789818

==

WORKSPACE
==================
1dd003e5;jax authors;2022-03-15 10:24:10 -0700;Merge pull request #9890 from jakevdp:doc-eigh
PiperOrigin-RevId: 434787824

==
==================
6ac05c0f;jax authors;2022-03-15 10:10:05 -0700;Merge pull request #9889 from jakevdp:fix-segment-max
PiperOrigin-RevId: 434783570

==
==================
c66f5dda;Jake VanderPlas;2022-03-15 09:55:59 -0700;DOC: add missing linalg functionality to docs

==

docs/jax.lax.rst
docs/jax.scipy.rst
jax/_src/lax/linalg.py
==================
eb81d9e1;George Necula;2022-03-15 13:14:34 +0100;[shape_poly] Improve error message and docs for shape polynomials used as JAX values

==

jax/experimental/jax2tf/README.md
jax/experimental/jax2tf/shape_poly.py
jax/experimental/jax2tf/tests/shape_poly_test.py
==================
98ad0167;jax authors;2022-03-15 09:29:03 -0700;Merge pull request #9815 from eelregit:fft_norm_dtype_patch
PiperOrigin-RevId: 434772719

==
==================
4f6f4e55;Jake VanderPlas;2022-03-15 09:20:20 -0700;segment_max: fix identity for boolean dtype

==

jax/_src/ops/scatter.py
tests/lax_numpy_indexing_test.py
==================
4fba0e78;jax authors;2022-03-15 07:50:17 -0700;[JAX] Update ann to use XLA based fallback ApproxTopK.
Other small changes:
* Restricts the operand type to float.
* Add more format annotations to the docstring.

PiperOrigin-RevId: 434749705

==

jax/_src/lax/ann.py
==================
6355fac8;Jake VanderPlas;2022-03-14 19:14:02 -0700;lax_numpy.py: factor ufuncs into their own private submodule
Re-lands part of #9724

PiperOrigin-RevId: 434629548

==

jax/_src/numpy/lax_numpy.py
jax/_src/numpy/ufuncs.py
==================
7d3c8e32;jax authors;2022-03-14 15:18:30 -0700;Merge pull request #9877 from skye:workspace
PiperOrigin-RevId: 434580858

==
==================
97ddf986;Robert Suderman;2022-03-14 15:06:00 -0700;Make concatenate allow concatenation on dynamic dimensions
Concatenating two dynamic shapes together along those dynamic dimensions
should be allowed.

PiperOrigin-RevId: 434577959

==

jax/_src/lax/lax.py
tests/lax_test.py
==================
1ba51786;Skye Wanderman-Milne;2022-03-14 15:00:07 -0700;Update WORKSPACE for jaxlib 0.3.2, take 2

==

WORKSPACE
==================
4d148999;jax authors;2022-03-14 13:45:49 -0700;Add boolean flag to as_hlo_text to enable writing large constants.
PiperOrigin-RevId: 434556535

==

CHANGELOG.md
==================
765d11d5;Jake VanderPlas;2022-03-14 13:38:53 -0700;Fix ROCM BUILD rule
Fixes https://github.com/google/jax/issues/9864; replaces https://github.com/google/jax/issues/9870

PiperOrigin-RevId: 434554684

==

jaxlib/BUILD
==================
333a7b0a;Jake VanderPlas;2022-03-14 11:40:58 -0700;DOC: add PDF export

==

.readthedocs.yml
==================
76d340f0;jax authors;2022-03-14 05:49:39 -0700;Merge pull request #9853 from mattjj:issue9837
PiperOrigin-RevId: 434440632

==
==================
f7e28d0a;jax authors;2022-03-14 05:39:10 -0700;Merge pull request #9830 from LenaMartens:changelist/433726466
PiperOrigin-RevId: 434439299

==
==================
39c2f8b0;Matthew Johnson;2022-03-11 11:36:13 -0800;fixup from 5415306: remove extraneous lines
also add test

==

jax/_src/lax/windowed_reductions.py
tests/lax_vmap_test.py
==================
ee674960;Yash Katariya;2022-03-10 18:13:33 -0800;Default to normal read if the shape matches the shape the tensor was saved with.
PiperOrigin-RevId: 433898254

==

jax/experimental/gda_serialization/serialization.py
==================
1c4f4e57;jax authors;2022-03-10 17:26:43 -0800;Merge pull request #9842 from skye:workspace
PiperOrigin-RevId: 433890354

==
==================
5c8c4d48;Skye Wanderman-Milne;2022-03-11 01:05:21 +0000;Update jaxlib version to 0.3.2 to match jax

==

jaxlib/version.py
==================
c86516f2;jax authors;2022-03-10 17:00:28 -0800;Merge pull request #9841 from skye:workspace
PiperOrigin-RevId: 433885816

==
==================
ddd7477d;Skye Wanderman-Milne;2022-03-11 00:51:30 +0000;Update WORKSPACE for jaxlib 0.3.1

==

WORKSPACE
==================
ddf23dea;Jake VanderPlas;2022-03-10 13:34:42 -0800;lax_numpy.py: factor out some common utilities
Re-lands part of #9724

PiperOrigin-RevId: 433838553

==

jax/_src/numpy/lax_numpy.py
jax/_src/numpy/util.py
==================
5abd6649;jax authors;2022-03-10 13:13:04 -0800;Merge pull request #9838 from shawwn:patch-4
PiperOrigin-RevId: 433833368

==
==================
cf1161ff;jax authors;2022-03-10 12:48:34 -0800;Merge pull request #9826 from froystig:lax-cleanup2
PiperOrigin-RevId: 433827272

==
==================
4157f3f3;Shawn Presser;2022-03-10 13:18:34 -0600;Fix core.pytype_aval_mappings for _DeviceArray
Due to a typo, `core.pytype_aval_mappings` wasn't being created for `_DeviceArray`. This manifests itself when users (like me!) try to implement their own custom JAX backends, since we have to inherit from _DeviceArray rather than jaxlib's DeviceArray.

I wish I could come up with a unit test to expose this case, but for now I'll settle for fixing the bug.
==

jax/_src/device_array.py
==================
64572795;Roy Frostig;2022-03-09 18:32:26 -0800;remove `_select_and_{gather,scatter}_add` from public `jax.lax` module

==

jax/experimental/jax2tf/tests/primitive_harness.py
jax/lax/__init__.py
tests/lax_vmap_test.py
==================
2f6de4a2;Roy Frostig;2022-03-09 18:26:42 -0800;remove `_reduce_window_{min,max,sum,prod}` from public `jax.lax` module

==

jax/experimental/jax2tf/jax2tf.py
jax/lax/__init__.py
==================
3c49cb54;jax authors;2022-03-10 08:41:19 -0800;Use sharded shape to compute aliasing.
PiperOrigin-RevId: 433762389

==

jax/interpreters/mlir.py
tests/xmap_test.py
==================
c5d4aba2;Yin Li;2022-03-09 13:03:45 -0500;Fix fft dtype for norm='ortho'

==

jax/_src/numpy/fft.py
tests/fft_test.py
==================
97fbb3a3;jax authors;2022-03-10 07:27:05 -0800;Merge pull request #9831 from hawkinsp:segment
PiperOrigin-RevId: 433746599

==
==================
2873f3ef;jax authors;2022-03-10 06:39:54 -0800;Merge pull request #9829 from hawkinsp:eigerror
PiperOrigin-RevId: 433737899

==
==================
adb37d9d;Peter Hawkins;2022-03-10 09:17:45 -0500;Speed up compilation time of segment_sum() operators with bucketing enabled.

==

jax/_src/ops/scatter.py
==================
051f4dd0;Peter Hawkins;2022-03-10 08:33:10 -0500;Suggest eigh() in the eig() not implemented error.

==

jax/_src/lax/linalg.py
jax/_src/numpy/linalg.py
==================
76e1021c;Lena Martens;2022-03-10 13:31:24 +0000;Checkify: Fix empty enabled_errors case wrt user checks.
What looked like a quick win (short-cut on empty enabled_error, don't trace)
was actually a quick bug (user_checks throw error in eager).

==

jax/experimental/checkify/checkify_impl.py
tests/checkify_test.py
==================
728e4fd3;Peter Hawkins;2022-03-09 18:47:27 -0800;Remove @jit decorator on gelu and softmax temporarily while debugging test failures.
PiperOrigin-RevId: 433630873

==

jax/_src/nn/functions.py
==================
8f93629e;Roy Frostig;2022-03-09 18:18:16 -0800;remove `_convert_element_type` from public `jax.lax` module

==

jax/_src/numpy/lax_numpy.py
jax/_src/numpy/linalg.py
jax/_src/ops/scatter.py
jax/_src/scipy/sparse/linalg.py
jax/lax/__init__.py
tests/dtypes_test.py
tests/lax_numpy_indexing_test.py
tests/lax_numpy_test.py
tests/lax_test.py
==================
81884edf;jax authors;2022-03-09 18:28:23 -0800;Merge pull request #9820 from sharadmv:jaxpr-pp-fix
PiperOrigin-RevId: 433627981

==
==================
2988901e;Sharad Vikram;2022-03-09 12:20:28 -0800;Refactor Jaxpr pretty-printing to use a `JaxprPpSettings` named tuple and thread it into `pp_eqn_rules` so the settings are used recursively

==

jax/_src/lax/lax.py
jax/core.py
jax/experimental/djax.py
jax/interpreters/partial_eval.py
jax/interpreters/xla.py
==================
caf094d0;Joan Puigcerver;2022-03-09 17:05:28 -0800;Support gamma distribution with PRNGKeys other than threefry2x32.
PiperOrigin-RevId: 433614014

==

jax/_src/random.py
jax/experimental/jax2tf/tests/primitive_harness.py
tests/random_test.py
==================
8a855445;Jean-Baptiste Lespiau;2022-03-09 09:56:32 -0800;Add the input avals to Lowered and Compiled.
PiperOrigin-RevId: 433505462

==

jax/_src/api.py
jax/experimental/maps.py
jax/experimental/pjit.py
tests/api_test.py
tests/pjit_test.py
tests/pmap_test.py
==================
41a8de67;jax authors;2022-03-09 09:54:52 -0800;Merge pull request #9814 from hawkinsp:nnjit
PiperOrigin-RevId: 433504897

==
==================
626c03fe;Peter Hawkins;2022-03-09 12:04:09 -0500;Add @jit decorators to functions in jax.nn.

==

jax/_src/nn/functions.py
==================
beb9900c;jax authors;2022-03-08 22:46:32 -0800;Merge pull request #9807 from jakevdp:coo-sorted-cols
PiperOrigin-RevId: 433397135

==
==================
6e63a907;Yash Katariya;2022-03-08 17:43:17 -0800;Add JAX support for pjit on CPU
PiperOrigin-RevId: 433354147

==

jax/experimental/pjit.py
tests/pjit_test.py
==================
3679e0c7;Jake VanderPlas;2022-03-08 17:07:02 -0800;[sparse] track sorted columns for COO GPU lowerings

==

jax/experimental/sparse/coo.py
tests/sparse_test.py
==================
537e35b0;jax authors;2022-03-08 17:05:47 -0800;Merge pull request #9805 from froystig:lax-cleanup
PiperOrigin-RevId: 433347321

==
==================
bea77710;Roy Frostig;2022-03-08 13:49:25 -0800;remove `_dilate_shape` from public `jax.lax` module

==

jax/lax/__init__.py
==================
460feed1;Roy Frostig;2022-03-08 13:47:10 -0800;remove `_ones` and `_zeros` from public `jax.lax` module

==

jax/lax/__init__.py
==================
0cae3160;Roy Frostig;2022-03-08 13:45:06 -0800;remove `_delta` from public `jax.lax` module

==

jax/_src/numpy/lax_numpy.py
jax/experimental/jax2tf/tests/shape_poly_test.py
jax/lax/__init__.py
tests/lax_test.py
==================
90f31c1d;Roy Frostig;2022-03-08 13:36:26 -0800;remove `_tri` from public `jax.lax` module

==

jax/_src/numpy/lax_numpy.py
jax/lax/__init__.py
==================
3c345ee7;Roy Frostig;2022-03-08 13:33:33 -0800;remove `_eye` from public `jax.lax` module

==

jax/_src/numpy/lax_numpy.py
jax/lax/__init__.py
==================
7824325c;Roy Frostig;2022-03-08 13:32:38 -0800;remove `_broadcasting_shape_rule` from public `jax.lax` module

==

jax/_src/prng.py
jax/lax/__init__.py
==================
2324e5b5;Roy Frostig;2022-03-08 13:31:19 -0800;remove `_upcast_fp16_for_computation` from public `jax.lax` module

==

jax/lax/__init__.py
==================
e262c72b;Roy Frostig;2022-03-08 13:28:35 -0800;remove `_check_user_dtype_supported` from public `jax.lax` module

==

jax/_src/numpy/lax_numpy.py
jax/lax/__init__.py
==================
afc87296;Roy Frostig;2022-03-08 13:18:43 -0800;remove `_reduce_or` and `_reduce_and` from public `jax.lax` module

==

jax/lax/__init__.py
==================
c979f64e;Roy Frostig;2022-03-08 13:18:24 -0800;remove `_reduce_min` from public `jax.lax` module

==

jax/experimental/jet.py
jax/lax/__init__.py
==================
299d4db9;Roy Frostig;2022-03-08 13:17:07 -0800;remove `_reduce_max` from public `jax.lax` module

==

jax/experimental/jet.py
jax/lax/__init__.py
==================
6f519576;Roy Frostig;2022-03-08 13:13:36 -0800;remove `_reduce_sum` from public `jax.lax` module

==

jax/experimental/jet.py
jax/lax/__init__.py
tests/core_test.py
tests/filecheck/array.filecheck.py
==================
972070ad;jax authors;2022-03-08 15:32:51 -0800;Merge pull request #9803 from skye:create_v3_mesh
PiperOrigin-RevId: 433326822

==
==================
bcee4423;Skye Wanderman-Milne;2022-03-08 20:33:12 +0000;Improve TPU v2 and v3 mesh_utils.create_device_mesh logic.
* Fixes a bug when a non-3D mesh was requested
* Adds new logic when requesting a single-host mesh
* Extends logic to v2 as well as v3

==

jax/experimental/mesh_utils.py
tests/mesh_utils_test.py
==================
7890fb75;Roy Frostig;2022-03-08 12:56:11 -0800;remove `_one` and `_zero` from public `jax.lax` module

==

jax/_src/api.py
jax/_src/numpy/lax_numpy.py
jax/lax/__init__.py
==================
3f885183;Roy Frostig;2022-03-08 12:45:44 -0800;remove three internal functions from public `jax.lax` module
... namely `_float`, `_input_dtype`, and `_broadcasting_select`.

==

jax/_src/api.py
jax/lax/__init__.py
==================
73199827;Roy Frostig;2022-03-08 10:39:16 -0800;remove `_eq_meet` from public `jax.lax` module
PiperOrigin-RevId: 433251361

==

jax/experimental/jet.py
jax/lax/__init__.py
==================
36cd5682;jax authors;2022-03-08 10:18:32 -0800;Merge pull request #9800 from hawkinsp:doc
PiperOrigin-RevId: 433245527

==
==================
e4c8cd19;jax authors;2022-03-08 09:44:49 -0800;Merge pull request #9789 from jakevdp:coo-sort-rows
PiperOrigin-RevId: 433236367

==
==================
5b389716;jax authors;2022-03-08 09:24:57 -0800;Merge pull request #9774 from jakevdp:fix-test-util
PiperOrigin-RevId: 433231334

==
==================
43c3bfd3;Jake VanderPlas;2022-03-08 09:21:09 -0800;[sparse]: COO: check for sorted rows before cusparse lowering

==

jax/experimental/sparse/coo.py
tests/sparse_test.py
==================
08fbd77d;Peter Hawkins;2022-03-08 09:14:14 -0800;[JAX] Deprecate .block_host_until_ready() in favor of .block_until_ready().
JAX kept an older name around (.block_host_until_ready()) in parallel with the new name (.block_until_ready()) to avoid breaking users. Deprecate it so we only have one name.

PiperOrigin-RevId: 433228545

==

CHANGELOG.md
jax/_src/device_array.py
jax/interpreters/pxla.py
==================
809156c1;jax authors;2022-03-08 09:09:06 -0800;Merge pull request #9801 from hawkinsp:xla
PiperOrigin-RevId: 433226713

==
==================
aeba6b34;Jean-Baptiste Lespiau;2022-03-08 07:08:54 -0800;Move the construction of the in-tree up.
PiperOrigin-RevId: 433202494

==

jax/_src/api.py
jax/experimental/maps.py
jax/experimental/pjit.py
==================
3e77a56f;Roy Frostig;2022-03-08 06:48:30 -0800;remove `_complex` from public `jax.lax` module
PiperOrigin-RevId: 433198652

==

jax/lax/__init__.py
==================
81bb5268;Peter Hawkins;2022-03-08 14:45:35 +0000;Update XLA.

==

WORKSPACE
==================
80aec7b2;Peter Hawkins;2022-03-08 09:35:36 -0500;Documentation improvements.

==

docs/jax.example_libraries.rst
docs/jax.image.rst
jax/_src/dlpack.py
jax/_src/flatten_util.py
jax/_src/image/scale.py
jax/_src/nn/functions.py
jax/example_libraries/optimizers.py
jax/example_libraries/stax.py
jax/image/__init__.py
==================
e8f1a020;jax authors;2022-03-08 05:44:05 -0800;Merge pull request #9798 from hawkinsp:initdoc
PiperOrigin-RevId: 433187449

==
==================
ad5144f5;Peter Hawkins;2022-03-08 08:29:43 -0500;Skip doctests for initializer examples.

==

jax/_src/nn/initializers.py
==================
dc2ca18d;jax authors;2022-03-07 20:39:47 -0800;Merge pull request #9794 from hawkinsp:initdoc
PiperOrigin-RevId: 433111321

==
==================
fe2a649c;jax authors;2022-03-07 18:03:34 -0800;Merge pull request #9786 from mattjj:better-vmap-jaxpr-caching
PiperOrigin-RevId: 433087697

==
==================
fdb74ea4;jax authors;2022-03-07 16:40:29 -0800;Merge pull request #9785 from froystig:lax-const
PiperOrigin-RevId: 433071851

==
==================
5cfbb9f4;Peter Hawkins;2022-03-07 19:13:01 -0500;Fix arxiv reference for He initializers.

==

jax/_src/nn/initializers.py
==================
2a5e6c81;jax authors;2022-03-07 15:01:54 -0800;Merge pull request #9788 from hawkinsp:initdoc
PiperOrigin-RevId: 433047631

==
==================
d3d666d0;Peter Hawkins;2022-03-07 17:05:51 -0500;Document jax.nn.initializers.

==

docs/jax.nn.initializers.rst
jax/_src/nn/initializers.py
jax/_src/numpy/lax_numpy.py
==================
409caa03;jax authors;2022-03-07 14:17:57 -0800;Merge pull request #9783 from skye:remove_pjit_warning
PiperOrigin-RevId: 433037849

==
==================
3e93fe01;jax authors;2022-03-07 14:09:53 -0800;Merge pull request #9787 from jakevdp:sparsify-refactor
PiperOrigin-RevId: 433035626

==
==================
8c6e001e;Jake VanderPlas;2022-03-07 12:48:03 -0800;[sparse] refactor internal implementation of sparsify transform

==

jax/experimental/sparse/transform.py
tests/sparsify_test.py
==================
24a7afdb;Matthew Johnson;2022-03-07 12:44:50 -0800;improve batch_jaxpr caching from #9196
In #9196 I missed a related utilty function which needed memoization.

Co-authored-by: Adam Paszke <apaszke@google.com>

==

jax/interpreters/batching.py
==================
f7731bf9;Roy Frostig;2022-03-07 12:25:01 -0800;remove `_const` from public `jax.lax` module
Modify all internal call sites to use `jax._src.lax.lax._const`.

==

jax/_src/lax/linalg.py
jax/_src/numpy/lax_numpy.py
jax/_src/numpy/linalg.py
jax/_src/prng.py
jax/_src/random.py
jax/_src/scipy/special.py
jax/_src/scipy/stats/bernoulli.py
jax/_src/scipy/stats/beta.py
jax/_src/scipy/stats/betabinom.py
jax/_src/scipy/stats/cauchy.py
jax/_src/scipy/stats/chi2.py
jax/_src/scipy/stats/dirichlet.py
jax/_src/scipy/stats/gamma.py
jax/_src/scipy/stats/geom.py
jax/_src/scipy/stats/laplace.py
jax/_src/scipy/stats/nbinom.py
jax/_src/scipy/stats/norm.py
jax/_src/scipy/stats/pareto.py
jax/_src/scipy/stats/poisson.py
jax/_src/scipy/stats/t.py
jax/experimental/jet.py
jax/lax/__init__.py
tests/lax_test.py
==================
70615211;jax authors;2022-03-07 11:56:04 -0800;Merge pull request #9207 from jakevdp:coo-prims
PiperOrigin-RevId: 433002143

==
==================
424536dc;Jake VanderPlas;2022-03-07 11:26:40 -0800;[sparse] change call signature of coo primitive wrappers

==

jax/experimental/sparse/coo.py
jax/experimental/sparse/csr.py
tests/sparse_test.py
==================
afca0b51;Skye Wanderman-Milne;2022-03-07 17:52:25 +0000;Remove pjit warning.
It looks bad in demos :) Plus it's already in experimental, and has enough usage that there probably aren't egregious bugs.

==

jax/experimental/pjit.py
==================
03a50c02;jax authors;2022-03-07 09:45:33 -0800;Merge pull request #9782 from google:dependabot/github_actions/actions/checkout-3
PiperOrigin-RevId: 432967623

==
==================
16b14786;dependabot[bot];2022-03-07 17:12:34 +0000;Bump actions/checkout from 2 to 3
Bumps [actions/checkout](https://github.com/actions/checkout) from 2 to 3.
- [Release notes](https://github.com/actions/checkout/releases)
- [Changelog](https://github.com/actions/checkout/blob/main/CHANGELOG.md)
- [Commits](https://github.com/actions/checkout/compare/v2...v3)

---
updated-dependencies:
- dependency-name: actions/checkout
  dependency-type: direct:production
  update-type: version-update:semver-major
...

Signed-off-by: dependabot[bot] <support@github.com>
==

.github/workflows/ci-build.yaml
==================
99a10372;Yash Katariya;2022-03-07 08:58:41 -0800;Make `mesh_axes` on GDA strict by only allowing PartitionSpecs to be consistent with pjit.
PiperOrigin-RevId: 432957496

==

jax/experimental/gda_serialization/serialization_test.py
jax/experimental/global_device_array.py
jax/experimental/maps.py
jax/experimental/pjit.py
jax/interpreters/pxla.py
tests/global_device_array_test.py
tests/pjit_test.py
==================
17f11e05;Jean-Baptiste Lespiau;2022-03-07 02:36:09 -0800;Add accessors on Compiled returning the args and kwargs `PyTreeDef` working for all transforms.
This also documents the fact that `in_tree` content varies, based on the transform.

PiperOrigin-RevId: 432895923

==

jax/_src/api.py
tests/api_test.py
tests/pjit_test.py
tests/pmap_test.py
==================
a1bcb1d8;jax authors;2022-03-04 18:09:47 -0800;Merge pull request #9664 from froystig:custom-transpose-unstaged
PiperOrigin-RevId: 432572254

==
==================
947b7b88;Roy Frostig;2022-01-20 20:07:32 -0800;re-implement `custom_transpose` without upfront staging.
Whereas the previous `custom_transpose` implementation would stage its
callable arguments upfront, this one preserves them as callables. For
the time being, this requires callers to additionally supply the target
function's output types at call time.

Co-authored-by: Matthew Johnson <mattjj@google.com>

==

jax/_src/api.py
jax/_src/custom_transpose.py
jax/core.py
jax/interpreters/ad.py
jax/interpreters/partial_eval.py
tests/api_test.py
==================
2a3f936f;jax authors;2022-03-04 14:21:17 -0800;Merge pull request #9576 from nicholasjng:broadcast-validation
PiperOrigin-RevId: 432531230

==
==================
21c9d73b;jax authors;2022-03-04 13:49:52 -0800;Merge pull request #9765 from google:gda2
PiperOrigin-RevId: 432523991

==
==================
8f70992f;jax authors;2022-03-04 13:39:25 -0800;Merge pull request #9746 from jakevdp:broadcast-to-array
PiperOrigin-RevId: 432521835

==
==================
82109ad6;Jake VanderPlas;2022-03-04 13:22:52 -0800;Fix bug in jax.test_util._dtype

==

jax/_src/test_util.py
==================
403eae0e;yashkatariya;2022-03-04 11:59:16 -0800;format nicely

==

jax/experimental/global_device_array.py
==================
f241c03e;jax authors;2022-03-04 11:35:10 -0800;Merge pull request #9768 from hawkinsp:minver
PiperOrigin-RevId: 432495082

==
==================
924ec143;jax authors;2022-03-04 11:23:50 -0800;Merge pull request #9772 from jakevdp:fix-prngkey-error
PiperOrigin-RevId: 432492481

==
==================
8c57ae2a;Jake VanderPlas;2022-03-02 15:23:34 -0800;Call _check_arraylike on inputs to broadcast_to and broadcast_arrays

==

CHANGELOG.md
jax/_src/numpy/lax_numpy.py
==================
2961071e;yashkatariya;2022-03-04 11:18:09 -0800;Format

==

jax/experimental/global_device_array.py
==================
43e65b3d;Berkin Ilbeyi;2022-03-04 10:49:35 -0800;[XLA] Add a utility function to hoist entry program parameters.
Hoisting these to the beginning of the computation increase opportunities to
prefetch them. This does not increase the amount of memory needed since these
buffers are live throughout the program.

PiperOrigin-RevId: 432484598

==

jax/experimental/jax2tf/tests/sharding_test.py
==================
8b1d7102;Jake VanderPlas;2022-03-04 10:49:29 -0800;custom_prng: better error messages for key validation

==

jax/_src/prng.py
==================
56546d3e;Nicholas Junge;2022-02-15 15:03:33 +0100;Validate `lax.broadcast_shape` inputs before control flow execution
This commit addresses previously unvalidated inputs to `jax.lax.broadcast_shapes` by adding a small validation check before control flow execution. A legal input to `lax.broadcast_shapes` hereafter is defined as an input that
1) is a sequence (i.e., implements for..in iteration) of integers and
2) said integers are all non-negative.

In addition, two tests were added to `tests.lax_vmap_test` to check that proper errors are raised when attempting to use illegal inputs with `lax.broadcast_shapes`.

==

jax/_src/lax/lax.py
tests/lax_vmap_test.py
==================
c978df55;Peter Hawkins;2022-03-04 10:25:22 -0500;Increase minimum jaxlib version to 0.3.0.

==

jax/_src/lax/control_flow.py
jax/_src/lax/lax.py
jax/_src/source_info_util.py
jax/_src/traceback_util.py
jax/interpreters/pxla.py
jax/jaxpr_util.py
jax/version.py
tests/api_test.py
tests/errors_test.py
tests/jaxpr_util_test.py
tests/pjit_test.py
tests/pmap_test.py
tests/tree_util_test.py
==================
f87e6c3a;jax authors;2022-03-04 07:29:29 -0800;Merge pull request #9622 from hawkinsp:docs4
PiperOrigin-RevId: 432440609

==
==================
7d02949d;Peter Hawkins;2022-03-04 05:55:08 -0800;[JAX:GPU] Implement the full_matrices=False case of SVD without generating the full matrices and then slicing.
PiperOrigin-RevId: 432425681

==

jaxlib/cusolver.cc
jaxlib/cusolver.py
jaxlib/cusolver_kernels.cc
jaxlib/cusolver_kernels.h
==================
f6a5f0dc;Anselm Levskaya;2022-03-04 04:20:57 -0800;Use real Precision type for lax.PrecisionType
PiperOrigin-RevId: 432413742

==

jax/_src/lax/lax.py
jax/_src/lax/other.py
==================
2d17b4d6;Tianjian Lu;2022-03-03 20:58:46 -0800;[linalg] Fix type promotion in QDWH.
PiperOrigin-RevId: 432352839

==

jax/_src/lax/qdwh.py
==================
ca83227d;yashkatariya;2022-03-03 15:04:10 -0800;Fix errors

==

jax/experimental/global_device_array.py
==================
d4c6f953;jax authors;2022-03-03 14:29:14 -0800;Rename sync versions of ToLiteral to ToLiteralSync to facilitate upcoming refactor.
PiperOrigin-RevId: 432285004

==

examples/jax_cpp/main.cc
==================
9d2388e2;yashkatariya;2022-03-03 14:29:13 -0800;Fix errors

==

jax/experimental/global_device_array.py
==================
2e158c13;jax authors;2022-03-03 14:02:15 -0800;Merge pull request #9764 from jakevdp:doc-doctest
PiperOrigin-RevId: 432278100

==
==================
8da13976;yashkatariya;2022-03-03 13:57:20 -0800;Add pjit link

==

jax/experimental/global_device_array.py
==================
852e39e2;yashkatariya;2022-03-03 13:40:42 -0800;convert to doctest

==

jax/experimental/global_device_array.py
==================
9fe5c076;jax authors;2022-03-03 13:39:38 -0800;Merge pull request #9763 from google:gda1
PiperOrigin-RevId: 432272534

==
==================
f1ccb35d;Jake VanderPlas;2022-03-03 13:11:00 -0800;DOC: add doctest info to developer docs

==

docs/developer.md
==================
f0df7b73;yashkatariya;2022-03-03 12:19:04 -0800;Fix the display of GDA docs

==

docs/jax.experimental.global_device_array.rst
==================
cf9a900d;jax authors;2022-03-03 11:11:02 -0800;Merge pull request #9584 from ROCmSoftwarePlatform:rocm_refactor_jaxlib
PiperOrigin-RevId: 432236852

==
==================
33aa9286;Peter Hawkins;2022-03-03 10:14:53 -0800;Replace instances of `std` with `func` to fix breakage after the MLIR `std` dialect was renamed to the `func` dialect.
PiperOrigin-RevId: 432222826

==

build/build_wheel.py
==================
616df55a;Jake VanderPlas;2022-03-03 09:49:41 -0800;Gate ROCM targets in BUILD file.
PiperOrigin-RevId: 432216579

==

jaxlib/BUILD
==================
6c45969f;jax authors;2022-03-03 08:24:06 -0800;Integrate LLVM at llvm/llvm-project@eb27da7dec67
Updates LLVM usage to match
[eb27da7dec67](https://github.com/llvm/llvm-project/commit/eb27da7dec67)

PiperOrigin-RevId: 432199388

==

build/BUILD.bazel
build/build_wheel.py
jax/_src/lib/mlir/dialects/__init__.py
jax/interpreters/mlir.py
jax/interpreters/sharded_jit.py
jaxlib/mlir/BUILD.bazel
==================
3403054b;Jake VanderPlas;2022-03-02 18:31:49 -0800;Fix typo: JAX_CUSPARSE_11030 -> JAX_CUSPARSE_11300
This is a silly typo, but it's been annoying me for months

PiperOrigin-RevId: 432078590

==

jaxlib/cusparse.cc
jaxlib/cusparse_kernels.cc
jaxlib/cusparse_kernels.h
jaxlib/gpu_kernels.cc
==================
d3695014;jax authors;2022-03-02 18:04:40 -0800;Merge pull request #9546 from pnkraemer:jet-docs
PiperOrigin-RevId: 432073995

==
==================
013602b1;jax authors;2022-03-02 16:36:33 -0800;Merge pull request #9750 from jakevdp:unravel-index-todo
PiperOrigin-RevId: 432058578

==
==================
6dd67547;Jake VanderPlas;2022-03-02 16:03:54 -0800;jnp.unravel_index: simplify return statement

==

jax/_src/numpy/lax_numpy.py
==================
790b4bc6;Yash Katariya;2022-03-02 14:25:33 -0800;Fix a typo (titled -> tiled)
PiperOrigin-RevId: 432028664

==

jax/experimental/multihost_utils.py
==================
38ea085b;Jake VanderPlas;2022-03-02 12:18:09 -0800;lax_numpy.py: factor ndarray into its own module
This is the first step in relanding the larger refactoring in #9724, which had to be rolled back due to downstream breakages.

PiperOrigin-RevId: 431999528

==

jax/_src/numpy/lax_numpy.py
jax/_src/numpy/ndarray.py
==================
98572a69;jax authors;2022-03-02 11:33:07 -0800;Merge pull request #9737 from jakevdp:cleanup-constant-like
PiperOrigin-RevId: 431988229

==
==================
f1e71c11;jax authors;2022-03-02 10:11:09 -0800;[Jax] Format ann docstring.
PiperOrigin-RevId: 431968329

==

jax/_src/lax/ann.py
==================
00e040e5;Jake VanderPlas;2022-03-02 09:13:58 -0800;cleanup: remove _constant_like in favor of lax._const

==

jax/_src/lax/linalg.py
jax/_src/numpy/lax_numpy.py
jax/_src/random.py
jax/_src/scipy/special.py
jax/_src/scipy/stats/bernoulli.py
jax/_src/scipy/stats/beta.py
jax/_src/scipy/stats/betabinom.py
jax/_src/scipy/stats/cauchy.py
jax/_src/scipy/stats/chi2.py
jax/_src/scipy/stats/dirichlet.py
jax/_src/scipy/stats/gamma.py
jax/_src/scipy/stats/geom.py
jax/_src/scipy/stats/laplace.py
jax/_src/scipy/stats/nbinom.py
jax/_src/scipy/stats/norm.py
jax/_src/scipy/stats/pareto.py
jax/_src/scipy/stats/poisson.py
jax/_src/scipy/stats/t.py
==================
fb44d7c1;jax authors;2022-03-02 08:58:22 -0800;[JAX] Add release note for the graduration of the experimental.ann module.
PiperOrigin-RevId: 431951602

==

CHANGELOG.md
==================
3766dd21;jax authors;2022-03-01 19:38:50 -0800;Rollback of: d09d7b8d1363eab1c14051eb2376e605366537f9 by Jake VanderPlas <jakevdp@google.com>:
Factor-out pieces of lax_numpy.py

PiperOrigin-RevId: 431833044

==

jax/_src/numpy/lax_numpy.py
jax/_src/numpy/ndarray.py
jax/_src/numpy/ufuncs.py
jax/_src/numpy/util.py
==================
4755dc3f;Yash Katariya;2022-03-01 17:44:14 -0800;Don't compute global shards if local_mesh == global_mesh and just return local_shards.
PiperOrigin-RevId: 431815962

==

jax/experimental/global_device_array.py
==================
72cc567c;Yash Katariya;2022-03-01 17:43:11 -0800;Use the new `mesh` property instead of the private `_global_mesh` attribute.
PiperOrigin-RevId: 431815802

==

jax/experimental/maps.py
jax/experimental/multihost_utils.py
jax/experimental/pjit.py
tests/pjit_test.py
tests/xmap_test.py
==================
d9f82f7b;jax authors;2022-03-01 14:46:04 -0800;[JAX] Move `experimental.ann.approx_*_k` into `lax`.
Updated docs, tests and the example code snippets.

PiperOrigin-RevId: 431781401

==

docs/jax.experimental.ann.rst
docs/jax.experimental.rst
docs/jax.lax.rst
jax/_src/lax/ann.py
jax/experimental/jax2tf/jax2tf.py
jax/lax/__init__.py
tests/ann_test.py
==================
1a1bf122;jax authors;2022-03-01 14:24:21 -0800;[JAX] Fix github lint_and_typecheck for Primitives
PiperOrigin-RevId: 431776305

==

jax/core.py
==================
c50b9d47;jax authors;2022-03-01 13:39:09 -0800;Merge pull request #9736 from mattjj:test-issue-9731
PiperOrigin-RevId: 431765284

==
==================
4075b81e;Matthew Johnson;2022-03-01 13:10:28 -0800;add regression test for #9731

==

tests/lax_control_flow_test.py
==================
d6812b24;jax authors;2022-03-01 12:50:17 -0800;Merge pull request #9732 from jakevdp:jnp-copy
PiperOrigin-RevId: 431754341

==
==================
a0d9d81f;Reza Rahimi;2022-02-15 17:54:02 +0000;Update JAX to use new math libraries in ROCm-5.0.

==

build/BUILD.bazel
build/build.py
build/build_wheel.py
build/rocm/Dockerfile.rocm
build/rocm/README.md
build/rocm/build_common.sh
build/rocm/build_rocm.sh
build/rocm/ci_build.sh
build/rocm/run_multi_gpu.sh
build/rocm/run_single_gpu.py
jax/_src/lax/linalg.py
jax/_src/lib/__init__.py
jax/_src/prng.py
jax/experimental/sparse/api.py
jax/experimental/sparse/coo.py
jax/experimental/sparse/csr.py
jaxlib/BUILD
jaxlib/hip_gpu_kernel_helpers.cc
jaxlib/hip_gpu_kernel_helpers.h
jaxlib/hip_linalg.cc
jaxlib/hip_linalg.py
jaxlib/hip_lu_pivot_kernels.cc
jaxlib/hip_lu_pivot_kernels.h
jaxlib/hip_lu_pivot_kernels.hip.cc
jaxlib/hip_prng.cc
jaxlib/hip_prng.py
jaxlib/hip_prng_kernels.cc
jaxlib/hip_prng_kernels.h
jaxlib/hip_prng_kernels.hip.cc
jaxlib/hipblas.cc
jaxlib/hipblas_kernels.cc
jaxlib/hipblas_kernels.h
jaxlib/hipsolver.cc
jaxlib/hipsolver.py
jaxlib/hipsolver_kernels.cc
jaxlib/hipsolver_kernels.h
jaxlib/hipsparse.cc
jaxlib/hipsparse.py
jaxlib/hipsparse_kernels.cc
jaxlib/hipsparse_kernels.h
jaxlib/jax.bzl
jaxlib/rocblas.cc
jaxlib/rocm_gpu_kernel_helpers.cc
jaxlib/rocm_gpu_kernel_helpers.h
jaxlib/rocsolver.py
tests/custom_linear_solve_test.py
tests/fft_test.py
tests/host_callback_test.py
tests/lax_numpy_test.py
tests/lax_scipy_test.py
tests/linalg_test.py
tests/multi_device_test.py
tests/qdwh_test.py
tests/random_test.py
tests/scipy_fft_test.py
tests/scipy_signal_test.py
tests/sparse_test.py
tests/svd_test.py
==================
ed255099;Jake VanderPlas;2022-03-01 10:44:33 -0800;implement jnp.copy

==

docs/jax.numpy.rst
jax/_src/numpy/lax_numpy.py
jax/numpy/__init__.py
tests/lax_numpy_test.py
==================
11664f8a;Yash Katariya;2022-03-01 11:45:26 -0800;Make the global_mesh that GDA has public
PiperOrigin-RevId: 431739364

==

jax/experimental/global_device_array.py
==================
5b309880;jax authors;2022-03-01 11:33:39 -0800;Merge pull request #9724 from jakevdp:refactor-lax-numpy
PiperOrigin-RevId: 431736367

==
==================
2b51ab5b;Peter Hawkins;2022-02-17 16:15:29 -0500;Add an API compatibility policy.

==

docs/api_compatibility.md
docs/index.rst
==================
d09d7b8d;Jake VanderPlas;2022-03-01 09:40:37 -0800;Factor-out pieces of lax_numpy.py

==

jax/_src/numpy/lax_numpy.py
jax/_src/numpy/ndarray.py
jax/_src/numpy/ufuncs.py
jax/_src/numpy/util.py
==================
cffe9978;Peter Hawkins;2022-03-01 08:55:29 -0800;Handle jaxpr constants correctly in MLIR lowering of conditional branches.
Add some dynamic type checks and type annotations to catch this kind of problem sooner.

There's no test case, because I'm not entirely sure how to make a test case for this. In fact, I'm not even sure it's legal for a conditional branch to have non-empty constants. We'll dig into that separately.

PiperOrigin-RevId: 431697808

==

jax/_src/lax/control_flow.py
jax/interpreters/mlir.py
==================
c7508d1f;jax authors;2022-02-28 12:59:08 -0800;Merge pull request #9721 from jakevdp:poisson-nan
PiperOrigin-RevId: 431505317

==
==================
d0cc3395;Yash Katariya;2022-02-28 12:53:57 -0800;Add `block_until_ready` method to GDA
PiperOrigin-RevId: 431504594

==

jax/experimental/global_device_array.py
tests/global_device_array_test.py
==================
2c2773a5;Jake VanderPlas;2022-02-28 12:10:47 -0800;jax.random.poisson: fix corner cases

==

jax/_src/random.py
tests/random_test.py
==================
92cb865b;jax authors;2022-02-28 11:54:29 -0800;Merge pull request #9718 from google:dependabot/github_actions/actions/setup-python-3
PiperOrigin-RevId: 431490872

==
==================
c339330b;Peter Hawkins;2022-02-28 09:26:20 -0800;[XLA:CPU] Relax test tolerances for tests using XLA:CPU.
An upcoming change to XLA:CPU will disable reassociation on floating point operators by default which is an unsound fast math optimization. This change is being made to fix numerical errors in softmax computations caused by reassocation. After that change, we will enable reassociation only in reduction operators where it is very important for performance and the XLA operator contract allows that.

Since this change alters the order of operations, it may cause small numerical changes leading to test failures. This change relaxes test tolerances to make tests pass.

PiperOrigin-RevId: 431453240

==

tests/ode_test.py
==================
680c06dd;dependabot[bot];2022-02-28 17:11:41 +0000;Bump actions/setup-python from 2 to 3
Bumps [actions/setup-python](https://github.com/actions/setup-python) from 2 to 3.
- [Release notes](https://github.com/actions/setup-python/releases)
- [Commits](https://github.com/actions/setup-python/compare/v2...v3)

---
updated-dependencies:
- dependency-name: actions/setup-python
  dependency-type: direct:production
  update-type: version-update:semver-major
...

Signed-off-by: dependabot[bot] <support@github.com>
==

.github/workflows/ci-build.yaml
==================
043561ae;jax authors;2022-02-28 08:57:42 -0800;Merge pull request #9711 from jblespiau:changelist/431385993
PiperOrigin-RevId: 431447036

==
==================
0b9ae982;jax authors;2022-02-28 07:56:57 -0800;Merge pull request #9701 from jakevdp:fix-sharp-bits
PiperOrigin-RevId: 431435194

==
==================
25472c23;Jean-Baptiste Lespiau;2022-02-28 11:32:32 +0100;Remove an unnecessary condition.
This makes sure jit, xla_computation and pjit share the same logic for processing static arguments.

==

jax/_src/api.py
jax/experimental/pjit.py
==================
c66fbeb9;jax authors;2022-02-25 23:29:04 -0800;Merge pull request #9193 from froystig:xla-executable-attr
PiperOrigin-RevId: 431102224

==
==================
d636e746;Roy Frostig;2022-01-13 15:42:17 -0800;make `xla_executable` a property, consistent across executable types
Also test IR and executable-related methods of `Lowered` and
`Compiled`.

==

jax/_src/api.py
jax/_src/dispatch.py
tests/api_test.py
tests/pjit_test.py
tests/pmap_test.py
tests/xmap_test.py
==================
d583f876;jax authors;2022-02-25 14:19:17 -0800;Merge pull request #9706 from samuela:samuela/mkl-fix
PiperOrigin-RevId: 431028480

==
==================
bf59b7d8;Samuel Ainsworth;2022-02-25 22:02:55 +0000;Relax tolerances slightly for MKL.
Fix https://github.com/google/jax/issues/9705.

==

tests/custom_root_test.py
==================
7ec04c83;jax authors;2022-02-25 13:23:11 -0800;Merge pull request #9702 from jakevdp:fix-load
PiperOrigin-RevId: 431016627

==
==================
1b01865b;Jake VanderPlas;2022-02-25 09:27:42 -0800;BUG: return numpy arrays for jnp.load() with unsupported dtypes

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
74e7fdfd;Jake VanderPlas;2022-02-25 09:15:55 -0800;DOC: update sharp bits info about fori_loop differentiability

==

docs/notebooks/Common_Gotchas_in_JAX.ipynb
docs/notebooks/Common_Gotchas_in_JAX.md
==================
d5a1c64d;jax authors;2022-02-24 17:51:09 -0800;Merge pull request #9623 from rsuderman:FixIreeJax
PiperOrigin-RevId: 430834942

==
==================
6914bae3;jax authors;2022-02-24 17:13:48 -0800;Merge pull request #9641 from rsuderman:FixDefaultDevice
PiperOrigin-RevId: 430828922

==
==================
ffcf4773;jax authors;2022-02-24 17:07:02 -0800;Merge pull request #9684 from jakevdp:fix-changelog
PiperOrigin-RevId: 430827769

==
==================
51727033;Jake VanderPlas;2022-02-24 08:18:30 -0800;Remove duplicate changelog entry

==

CHANGELOG.md
==================
d2834b64;jax authors;2022-02-24 08:12:41 -0800;Merge pull request #9658 from tornikeo:docs-copybutton
PiperOrigin-RevId: 430705653

==
==================
8372b98c;jax authors;2022-02-24 07:22:52 -0800;[JAX] Move ann.ann_recall back to tests.
The function is simple enough for users to implement their own on the host.

PiperOrigin-RevId: 430696789

==

jax/experimental/ann.py
tests/ann_test.py
==================
cdd0c688;jax authors;2022-02-24 07:02:34 -0800;Merge pull request #9619 from hawkinsp:index2
PiperOrigin-RevId: 430692755

==
==================
f2c17439;jax authors;2022-02-24 06:57:24 -0800;[JAX] Update comments and documents for ANN.
Copied some of the examples from the module to the functions to make the
migration to jax.lax easier, because only the functions will be copied over.

PiperOrigin-RevId: 430692713

==

jax/experimental/ann.py
==================
f51a05a8;Peter Hawkins;2022-02-17 15:23:44 -0500;Remove jax.ops.index... functions.
These functions have been deprecated and have issued a DeprecationWarning since jax 0.2.22 in October 2021.

==

CHANGELOG.md
docs/jax.ops.rst
jax/_src/ops/scatter.py
jax/ops/__init__.py
==================
3948fde8;jax authors;2022-02-24 05:37:02 -0800;Merge pull request #9052 from jpuigcerver:main
PiperOrigin-RevId: 430680329

==
==================
a9a827e2;Yash Katariya;2022-02-23 15:22:05 -0800;Add .device() method to _DeviceArray
PiperOrigin-RevId: 430551695

==

jax/_src/device_array.py
==================
98e114da;Yash Katariya;2022-02-23 14:26:28 -0800;Rename `unmapped_local_out_avals` to `out_avals` since it can contain global avals (via GDA) as well as local avals.
PiperOrigin-RevId: 430539281

==

jax/_src/api.py
jax/interpreters/pxla.py
==================
e2834d89;Yash Katariya;2022-02-23 13:57:59 -0800;Fix the gpu tests that were failing with Future warning
PiperOrigin-RevId: 430532523

==

jax/experimental/global_device_array.py
tests/pjit_test.py
tests/xmap_test.py
==================
c0416945;jax authors;2022-02-23 12:00:20 -0800;Merge pull request #8395 from sharadmv:name-stack-mechanism
PiperOrigin-RevId: 430506453

==
==================
687a7630;Yash Katariya;2022-02-23 10:46:27 -0800;Deprecate `maps.mesh` and replace it with `maps.Mesh`.
PiperOrigin-RevId: 430489855

==

jax/_src/test_util.py
jax/experimental/host_callback.py
jax/experimental/maps.py
jax/experimental/mesh_utils.py
jax/experimental/multihost_utils.py
jax/experimental/pjit.py
tests/debug_nans_test.py
tests/host_callback_test.py
==================
1b79caa6;Sharad Vikram;2021-10-28 11:06:58 -0700;Add separate mechanism for threading name stacks to the lowering

==

jax/_src/ad_checkpoint.py
jax/_src/api.py
jax/_src/config.py
jax/_src/custom_derivatives.py
jax/_src/dispatch.py
jax/_src/lax/control_flow.py
jax/_src/lax/lax.py
jax/_src/source_info_util.py
jax/_src/util.py
jax/core.py
jax/experimental/djax.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/loops.py
jax/experimental/maps.py
jax/experimental/pjit.py
jax/interpreters/ad.py
jax/interpreters/batching.py
jax/interpreters/mlir.py
jax/interpreters/partial_eval.py
jax/interpreters/pxla.py
jax/interpreters/sharded_jit.py
jax/interpreters/xla.py
tests/api_test.py
tests/name_stack_test.py
==================
e96b91d4;Yash Katariya;2022-02-23 09:54:43 -0800;Make the name `pjit` appear in xprof and mhlo module name. Before everything was `xmap` even for `pjit`.
PiperOrigin-RevId: 430477182

==

jax/experimental/maps.py
jax/experimental/pjit.py
jax/interpreters/pxla.py
==================
7edd964c;jax authors;2022-02-23 08:43:09 -0800;Merge pull request #9663 from mattjj:checkify-scan-debug
PiperOrigin-RevId: 430462126

==
==================
45d3ddda;lenamartens;2022-02-22 23:08:22 +0000;Fix tests and handle cond consts.

==

jax/experimental/checkify/checkify_impl.py
jax/interpreters/partial_eval.py
tests/checkify_test.py
==================
4b1d0a46;Matthew Johnson;2022-02-22 10:31:05 -0800;fixing scan and other control flow
Co-authored-by: Lena Martens <lenamartens@google.com>

==

jax/experimental/checkify/checkify_impl.py
jax/interpreters/partial_eval.py
tests/checkify_test.py
==================
ab15db7d;jax authors;2022-02-22 15:47:33 -0800;Merge pull request #9613 from mattjj:vmap-binop-batchers-use-singletons
PiperOrigin-RevId: 430313560

==
==================
97b1bd3b;jax authors;2022-02-22 12:21:44 -0800;Merge pull request #9636 from LenaMartens:changelist/429277776
PiperOrigin-RevId: 430268738

==
==================
afdb7b6f;Yash Katariya;2022-02-22 10:34:13 -0800;Make local_to_global and global_to_local private.
PiperOrigin-RevId: 430243584

==

jax/experimental/maps.py
jax/experimental/pjit.py
jax/interpreters/pxla.py
==================
2641f061;Adam Paszke;2022-02-22 06:01:36 -0800;Always treat all mesh axes controlled by xmap as MANUAL
PiperOrigin-RevId: 430192736

==

jax/experimental/maps.py
jax/interpreters/pxla.py
tests/xmap_test.py
==================
6423741d;tornikeo;2022-02-22 13:49:48 +0400;Add copy button to code snippets in documentation

==

docs/conf.py
docs/requirements.txt
==================
a65841f5;jax authors;2022-02-21 00:04:32 -0800;Merge pull request #9617 from froystig:prng-array-tests
PiperOrigin-RevId: 429976476

==
==================
660616cf;jax authors;2022-02-19 13:59:38 -0800;Merge pull request #9607 from jakevdp:scatter-apply
PiperOrigin-RevId: 429797642

==
==================
23d5eb08;Rob Suderman;2022-02-18 22:58:51 -0800;IREE's get_default_device_assignment should return List[Device]
Previously return List[List[Device]] which is not how the function is used.
Updated to use the alternative overload.

==

jax/_src/iree.py
==================
3290dd3a;Yash Katariya;2022-02-18 17:27:45 -0800;Make resharding of GDA work if the shape is larger than what it was serialized with.
For example: If you serialize with shape (8, 2) and want to deserialize with global shape (12, 2).

PiperOrigin-RevId: 429680502

==

jax/experimental/gda_serialization/serialization.py
jax/experimental/gda_serialization/serialization_test.py
==================
c161c628;Yash Katariya;2022-02-18 16:23:02 -0800;Finish jax release
PiperOrigin-RevId: 429670894

==

CHANGELOG.md
jax/version.py
==================
d1b6f5d9;Yash Katariya;2022-02-18 14:23:49 -0800;Revert back to adding aval on Device buffers inside local_shards and convert the cached property to just the normal property.
This slows down the pjit path because now you are paying the cost to create avals during runtime.

PiperOrigin-RevId: 429647845

==

jax/experimental/global_device_array.py
==================
2eeb683d;Lena Martens;2022-02-17 12:31:59 +0000;Checkify: address initial feedback.
  - add a way to run checkify with no errors enabled
  - clarify "can't be staged" error message
  - export init_error: a way for users to set a default Error value

==

jax/experimental/checkify/__init__.py
jax/experimental/checkify/checkify_impl.py
tests/checkify_test.py
==================
1486be7b;Yash Katariya;2022-02-18 11:15:56 -0800;* Make _old_env thread local so that it can be used in multiple threads.
* Make nesting for `with mesh` work properly by using a stack.

* Allow `Mesh` to be used as a decorator:

  ```
  @pxla.Mesh(mesh_devices, ('x', 'y'))
  def dec():
    return pjit(lambda x: x, in_axis_resources=P('x'), out_axis_resources=None)(x)
  ```

PiperOrigin-RevId: 429607613

==

jax/interpreters/pxla.py
tests/pjit_test.py
==================
8cb16928;Yuanzhong Xu;2022-02-18 10:51:49 -0800;Allow unevenly partitioned sharding_constraints.
PiperOrigin-RevId: 429601508

==

jax/experimental/pjit.py
jax/interpreters/pxla.py
tests/pjit_test.py
==================
e13c847e;Jake VanderPlas;2022-02-18 09:44:40 -0800;Index update operators: add scatter_apply()

==

jax/_src/lax/slicing.py
jax/_src/numpy/lax_numpy.py
jax/lax/__init__.py
tests/lax_numpy_indexing_test.py
==================
1baa59c6;jax authors;2022-02-18 03:23:42 -0800;Merge pull request #9594 from oliverdutton:boolean_jax2tf
PiperOrigin-RevId: 429523375

==
==================
607e7033;Jean-Baptiste Lespiau;2022-02-18 03:18:19 -0800;Turn execute_replicated into a class so we can access its fields.
It's more readable than inspecting the internals of a `functools.partial`.

PiperOrigin-RevId: 429523075

==

jax/_src/api.py
jax/interpreters/pxla.py
tests/pmap_test.py
==================
d123a10c;jax authors;2022-02-18 01:41:32 -0800;Merge pull request #9631 from gnecula:tf_doc
PiperOrigin-RevId: 429508358

==
==================
e6d94e11;oliver;2022-02-18 09:10:31 +0000;docs: fix explanation

==

jax/experimental/jax2tf/jax2tf.py
==================
f926d089;oliver;2022-02-18 09:07:29 +0000;docs: spelling mistake fixed

==

jax/experimental/jax2tf/jax2tf.py
==================
35763889;George Necula;2022-02-18 09:38:10 +0100;[jax2tf] Added more links to the documentation

==

jax/experimental/jax2tf/README.md
jax/experimental/jax2tf/converters_eval/README.md
==================
20635e4a;oliverdutton;2022-02-18 08:20:48 +0000;fix: simplify reduce_min with reduce_all

==

jax/experimental/jax2tf/jax2tf.py
==================
b78ec009;Yash Katariya;2022-02-17 21:06:44 -0800;Fix a typo (remove `== ss`).
PiperOrigin-RevId: 429472881

==

jax/experimental/global_device_array.py
==================
a430d0f2;Yash Katariya;2022-02-17 19:27:33 -0800;Show all the device buffer shapes in the error message.
PiperOrigin-RevId: 429458927

==

jax/experimental/global_device_array.py
==================
d22129f1;jax authors;2022-02-17 15:15:29 -0800;Merge pull request #9620 from jakevdp:deprecate-jax-test-case
PiperOrigin-RevId: 429413723

==
==================
da3aaa19;Jake VanderPlas;2022-02-17 14:58:58 -0800;Add deprecation warning to JaxTestCase and JaxTestLoader

==

CHANGELOG.md
jax/test_util.py
tests/mesh_utils_test.py
tests/svd_test.py
==================
50f4b580;Rob Suderman;2022-02-17 14:31:23 -0800;Fix Iree backend to for copy_to_device and executable results
Executable results can be a tuple, if so iterate over the entires.

Copy to device should just return the the IREE buffer as device buffer
management is still in progress.

==

jax/_src/iree.py
==================
e545daa1;jax authors;2022-02-17 14:23:13 -0800;Merge pull request #9621 from hawkinsp:docs3
PiperOrigin-RevId: 429401742

==
==================
3e5ecfe3;Peter Hawkins;2022-02-17 16:05:33 -0500;Add jax.distributed and jax.dlpack to the docs.
Reorder the doc modules into something closer to alphabetical order.

Add missing functions from jax.scipy.linalg and jax.scipy.signal to the docs.

==

CHANGELOG.md
docs/jax.distributed.rst
docs/jax.dlpack.rst
docs/jax.rst
docs/jax.scipy.rst
jax/_src/distributed.py
==================
54a6e4da;jax authors;2022-02-17 12:46:12 -0800;Merge pull request #9422 from yotarok:signal_stft
PiperOrigin-RevId: 429377655

==
==================
5bb140f6;jax authors;2022-02-17 12:45:55 -0800;Merge pull request #9615 from froystig:jnp-expand-dims-error
PiperOrigin-RevId: 429376858

==
==================
6bb58e6f;Yash Katariya;2022-02-17 12:36:44 -0800;Xmap GDA integration. Non-contiguous mesh is allowed!
PiperOrigin-RevId: 429376557

==

jax/experimental/global_device_array.py
jax/experimental/maps.py
jax/experimental/pjit.py
tests/xmap_test.py
==================
83a50202;jax authors;2022-02-17 12:36:21 -0800;Merge pull request #9616 from hawkinsp:doc
PiperOrigin-RevId: 429376341

==
==================
88c6b84d;Roy Frostig;2022-02-17 11:23:15 -0800;in tests, compare jnp operations on PRNGKeyArrays to the same on jnp arrays

==

tests/random_test.py
==================
d704c151;Peter Hawkins;2022-02-17 14:31:16 -0500;Clarify the NVidia driver version requirements.

==

README.md
==================
35fab1a9;Roy Frostig;2022-02-17 11:26:35 -0800;err on repeated axes to `expand_dims`, as numpy does

==

jax/_src/lax/lax.py
tests/lax_numpy_test.py
==================
032bfe09;jax authors;2022-02-17 10:25:29 -0800;Merge pull request #9609 from froystig:prng-array-stack
PiperOrigin-RevId: 429342174

==
==================
6ccbc862;oliverdutton;2022-02-17 16:25:06 +0000;refactor: rename, reorder, rewrite

==

jax/experimental/jax2tf/jax2tf.py
==================
73f23705;Lena Martens;2022-02-17 04:30:27 -0800;Checkify: explicitly export public API, hide private symbols.
PiperOrigin-RevId: 429277551

==

jax/experimental/checkify/__init__.py
jax/experimental/checkify/checkify_impl.py
==================
57f42320;Adam Paszke;2022-02-17 03:27:38 -0800;Fix uninitialized axis_env error when MLIR lowering is disabled
PiperOrigin-RevId: 429267926

==

jax/interpreters/pxla.py
==================
15295a82;jax authors;2022-02-17 03:02:47 -0800;Merge pull request #9544 from SaturdayGenfo:adds-matrix-sqrt
PiperOrigin-RevId: 429264231

==
==================
b657c23b;oliverdutton;2022-02-17 10:02:09 +0000;fix: linting errors

==

jax/experimental/jax2tf/jax2tf.py
==================
bd2a6a07;Yash Katariya;2022-02-16 23:15:04 -0800;`del self._old_env` so that you can use `with global_mesh` multiple times. This was Matt's idea.
Co-authored-by: Matthew Johnson <mattjj@google.com>
PiperOrigin-RevId: 429229193

==

jax/interpreters/pxla.py
==================
e0fb424d;Matthew Johnson;2022-02-16 23:11:22 -0800;use singleton dims in broadcasting binop batchers

==

jax/interpreters/batching.py
==================
e085370e;Yotaro Kubo;2022-02-03 14:18:44 +0900;Add some functions for spectral analysis.
This commit adds "stft", "csd", and "welch" functions in scipy.signal.

==

jax/_src/scipy/signal.py
jax/_src/third_party/scipy/signal_helper.py
jax/scipy/signal.py
tests/scipy_signal_test.py
==================
0f7904f8;Roy Frostig;2022-02-16 20:32:17 -0800;implement `jnp.expand_dims` and `jnp.stack` for PRNGKeyArrays
Also:
* fix `jnp.concatenate` and `jnp.append` for PRNGKeyArrays
* add `ndim` property to PRNGKeyArrays
* minor fix to `lax.expand_dims` with duplicate dimensions

==

jax/_src/lax/lax.py
jax/_src/numpy/lax_numpy.py
jax/_src/prng.py
tests/random_test.py
==================
a83695a7;Yash Katariya;2022-02-16 19:44:13 -0800;Merge `mesh` and `Mesh`. Make `Mesh` a context manager + class so that it can be used in the following ways:
```
global_mesh = Mesh(devices, axis_names)
with global_mesh:
  ...

OR

with Mesh(devices, axis_names) as global_mesh:
  ...

OR

global_mesh = Mesh(devices, axis_names)
with global_mesh as m:
  ...
```
PiperOrigin-RevId: 429201126

==

jax/experimental/maps.py
jax/experimental/pjit.py
jax/interpreters/pxla.py
tests/pjit_test.py
==================
cb732323;Leello Tadesse Dadi;2022-02-12 03:11:57 +0100;adds jax.scipy.linalg.sqrtm

==

jax/_src/scipy/linalg.py
jax/scipy/linalg.py
tests/linalg_test.py
==================
514d8883;Leello Tadesse Dadi;2022-02-12 02:55:53 +0100;adds jax.scipy.schur

==

jax/_src/scipy/linalg.py
jax/scipy/linalg.py
tests/linalg_test.py
==================
e25259e5;jax authors;2022-02-16 12:20:54 -0800;Merge pull request #9605 from hawkinsp:pickle
PiperOrigin-RevId: 429111539

==
==================
901d459e;Peter Hawkins;2022-02-16 15:04:56 -0500;Add cloudpickle as a test requirement.
We have at least one test that tests pickling JAX objects.

==

build/test-requirements.txt
==================
052b5c36;jax authors;2022-02-16 11:46:00 -0800;Merge pull request #9602 from LenaMartens:changelist/429094321
PiperOrigin-RevId: 429102776

==
==================
e1fd6304;jax authors;2022-02-16 11:27:05 -0800;Merge pull request #9493 from mattjj:better-pjit-pytree-prefix-error
PiperOrigin-RevId: 429097694

==
==================
758c7216;Lena Martens;2022-02-16 19:12:54 +0000;Checkify: fix nd-error case when array only has 1 element.

==

jax/experimental/checkify.py
tests/checkify_test.py
==================
94aade03;Yash Katariya;2022-02-16 08:51:55 -0800;Set the aval inside _create_local_shards iteration. Since we are iterating over device buffers there, why pay the cost twice!
PiperOrigin-RevId: 429058996

==

jax/experimental/global_device_array.py
==================
c97fefcc;jax authors;2022-02-16 08:14:39 -0800;Merge pull request #9597 from gnecula:tf_take_along_axis
PiperOrigin-RevId: 429050829

==
==================
35082fce;jax authors;2022-02-16 07:29:48 -0800;Merge pull request #9595 from gnecula:tf_metadata
PiperOrigin-RevId: 429041948

==
==================
1928f6e6;George Necula;2022-02-16 16:16:08 +0100;[jax2tf] Fixes shape polymorphism for jnp.take_along_axes
Fixes: #9552

==

jax/_src/numpy/lax_numpy.py
jax/experimental/jax2tf/tests/shape_poly_test.py
==================
461b37b2;George Necula;2022-02-16 15:41:37 +0100;[jax2tf] Fixed stale documentation about XLA metadata.
jax2tf does not yet support passing source location information
through to TF. The mechanism is partially implemented but disabled.
Here we remove misleading documentation that suggests the mechanism
is enabled.

==

jax/experimental/jax2tf/README.md
jax/experimental/jax2tf/jax2tf.py
==================
88a1c049;oliverdutton;2022-02-16 14:16:48 +0000;fix: missing comma

==

jax/experimental/jax2tf/jax2tf.py
==================
c1cbf786;oliverdutton;2022-02-16 09:02:55 +0000;fix: use boolean tf functions where possible instead of casting to int8 for jax2tf

==

jax/experimental/jax2tf/jax2tf.py
==================
c49fb9c2;jax authors;2022-02-15 14:34:26 -0800;Merge pull request #9561 from pschuh:opt-barrier
PiperOrigin-RevId: 428877597

==
==================
95c486a5;jax authors;2022-02-15 14:16:43 -0800;Merge pull request #9585 from jakevdp:typos
PiperOrigin-RevId: 428871943

==
==================
662c4416;Parker Schuh;2022-02-15 14:16:20 -0800;Merge branch 'main' into opt-barrier

==
==================
1da8b502;jax authors;2022-02-15 14:11:55 -0800;Merge pull request #9587 from jakevdp:fix-type-promotion
PiperOrigin-RevId: 428871857

==
==================
e82f232e;Jake VanderPlas;2022-02-15 13:26:06 -0800;Fix nomenclature in type promotion doc

==

docs/_static/type_lattice.svg
docs/type_promotion.rst
==================
b15c7f60;Lena Martens;2022-02-15 13:12:19 -0800;Checkify: fix check_error of nd-error.
PiperOrigin-RevId: 428857813

==

jax/_src/lax/lax.py
jax/experimental/checkify.py
tests/checkify_test.py
==================
de360833;Jake VanderPlas;2022-02-15 12:17:18 -0800;type promotion design doc: minor typos

==

docs/design_notes/type_promotion.ipynb
docs/design_notes/type_promotion.md
==================
bf3c6581;jax authors;2022-02-15 11:25:26 -0800;Merge pull request #9573 from hawkinsp:cuda
PiperOrigin-RevId: 428831952

==
==================
b0b8f037;Peter Hawkins;2022-02-15 11:17:15 -0800;[JAX] Fix crash when applying jit() to a callable that is not weak-referenceable.
Fixes https://github.com/google/jax/issues/9541

PiperOrigin-RevId: 428829999

==

tests/api_test.py
==================
a14ccb99;Adam Paszke;2022-02-15 10:12:31 -0800;Try adding support for nesting with_sharding_constraint in MANUAL xmaps
PiperOrigin-RevId: 428812729

==

jax/_src/dispatch.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/maps.py
jax/experimental/pjit.py
jax/interpreters/mlir.py
jax/interpreters/pxla.py
tests/xmap_test.py
==================
0b920521;jax authors;2022-02-15 09:20:41 -0800;Merge pull request #9551 from RuffaloLavoisier:typo
PiperOrigin-RevId: 428799601

==
==================
2e0cfe8e;Peter Hawkins;2022-02-15 09:23:28 -0500;Update the list of default CUDA capabilities used for wheel builds to match build.py.

==

.bazelrc
build/build.py
==================
b75b0c04;Adam Paszke;2022-02-15 04:00:19 -0800;Limit the set of unspecified dims to those that are not explicitly converted to MANUAL.
PiperOrigin-RevId: 428740792

==

jax/interpreters/pxla.py
==================
c551beda;Adam Paszke;2022-02-15 03:43:40 -0800;Add a partial_eval_jaxpr_custom_rule for xmap
Additionaly fix a bug in partial_eval rule for xmap.

PiperOrigin-RevId: 428738277

==

jax/_src/ad_checkpoint.py
jax/experimental/maps.py
jax/interpreters/partial_eval.py
jax/interpreters/xla.py
tests/xmap_test.py
==================
0d9990e4;Lena Martens;2022-02-15 02:42:30 -0800;Run all tests with jax_traceback_filtering=off.
Context: If an AssertionError is thrown inside a test and traceback filtering
is enabled, most of the stack-trace is swallowed (due to
https://bugs.python.org/issue24959).
PiperOrigin-RevId: 428729211

==

jax/_src/test_util.py
tests/errors_test.py
==================
7613d2a5;Yash Katariya;2022-02-14 21:03:39 -0800;Add multi-host utilities to JAX core. Adapted from https://github.com/google-research/t5x/blob/main/t5x/multihost_utils.py
PiperOrigin-RevId: 428680123

==

jax/experimental/multihost_utils.py
==================
924f7aab;jax authors;2022-02-14 15:29:07 -0800;Merge pull request #9485 from rsepassi:compilelog
PiperOrigin-RevId: 428622031

==
==================
273ea626;Tianjian Lu;2022-02-14 15:23:47 -0800;[sparse] Updates `bcoo_dot_general` cuSparse lowering rule by adding sorted indices.
PiperOrigin-RevId: 428621454

==

jax/experimental/sparse/bcoo.py
tests/sparse_test.py
==================
7204ac30;jax authors;2022-02-14 14:49:17 -0800;Merge pull request #9407 from jakevdp:type-promotion-design
PiperOrigin-RevId: 428613200

==
==================
7381bbe8;Jake VanderPlas;2022-02-14 14:16:42 -0800;Add type promotion design doc

==

docs/conf.py
docs/design_notes/index.rst
docs/design_notes/type_promotion.ipynb
docs/design_notes/type_promotion.md
docs/type_promotion.rst
==================
d5694402;jax authors;2022-02-14 13:41:06 -0800;Merge pull request #9564 from MichaelMarien:random-choice-docstring
PiperOrigin-RevId: 428596963

==
==================
beaa00c4;Hyeontaek Lim;2022-02-14 13:11:26 -0800;Implement the JAX transfer guard API
Adds `--jax_transfer_guard` flag and `jax.transfer_guard()` context manager that allows logging or disallowing unintended transfers.

The API distinguishes between two types of transfers:
* explicit transfers: `jax.device_put*()` and `jax.device_get()` calls.
* implicit transfers: Other transfers (e.g., printing a `DeviceArray`).

The transfer guard can take an action based on its guard level:

* "allow": Silently allow all transfers (default; same as the previous behavior).
* "log": Log and allow implicit transfers. Silently allow explicit transfers.
* "disallow": Disallow implicit transfers. Silently allow explicit transfers.
* "log_explicit": Log and allow all transfers.
* "disallow_explicit": Disallow all transfers.

The API also allows fine-control the transfer guard level of individual transfer directions. Their flag and context manager names are suffixed with the transfer direction:

* "host_to_device": Converting a Python value into a `DeviceBuffer`.
* "device_to_device": Copying a `DeviceBuffer` to a different device.
* "device_to_host": Fetching the value of a `DeviceBuffer`.

Example:
```
x = jnp.array(1)
y = jnp.array(2)
z = jnp.array(3)

print(x)  # No error
with jax.transfer_guard("disallow"):
  print(x)  # No error; x is already fetched
  print(jax.device_get(y))  # No error
  print(z)  # Error!
```

PiperOrigin-RevId: 428590081

==

build/build_wheel.py
jax/__init__.py
jax/_src/api.py
jax/_src/config.py
jax/_src/lib/__init__.py
tests/transfer_guard_test.py
==================
20e5090b;michaelmarien;2022-02-14 21:41:30 +0100;Add a warning to random.choice to notify users of the ill-defined behaviour when requesting more samples than non-zero probabilities and replace=False

==

jax/_src/random.py
==================
f229a703;jax authors;2022-02-14 12:27:22 -0800;Merge pull request #9562 from jakevdp:disable-rank-promotion
PiperOrigin-RevId: 428579739

==
==================
7ce911b8;Parker Schuh;2022-02-13 22:40:26 -0800;Add translation rule for optimization barrier.
Also adds a translation rule for remat that uses the new optimization barrier
op. If you find errors, consider disabling the remat lowering using
`jax_remat_opt_barrier` config flag.

==

jax/_src/config.py
jax/_src/lax/control_flow.py
jax/experimental/jax2tf/jax2tf.py
tests/api_test.py
==================
a457320b;jax authors;2022-02-14 11:53:03 -0800;Merge pull request #9563 from hawkinsp:selectn
PiperOrigin-RevId: 428570762

==
==================
29c8a045;Peter Hawkins;2022-02-14 14:29:38 -0500;Fix incorrect binary search comparison in lax.select_n lowering.
Fixes issue in https://github.com/google/jax/discussions/9556#discussioncomment-2175113

==

jax/_src/lax/lax.py
tests/lax_test.py
==================
fb4934c2;jax authors;2022-02-14 09:44:13 -0800;Merge pull request #9559 from hawkinsp:token
PiperOrigin-RevId: 428533661

==
==================
8b117c50;jax authors;2022-02-14 09:38:53 -0800;Merge pull request #9557 from LenaMartens:changelist/428497052
PiperOrigin-RevId: 428533464

==
==================
97512e9e;Jake VanderPlas;2022-02-14 09:22:05 -0800;JaxTestCase: set jax_numpy_rank_promotion='raise' by default

==

CHANGELOG.md
jax/_src/test_util.py
tests/api_test.py
tests/batching_test.py
tests/fft_test.py
tests/infeed_test.py
tests/lax_autodiff_test.py
tests/lax_numpy_einsum_test.py
tests/lax_numpy_indexing_test.py
tests/lax_numpy_test.py
tests/lax_numpy_vectorize_test.py
tests/lax_scipy_sparse_test.py
tests/lax_scipy_test.py
tests/lax_test.py
tests/linalg_test.py
tests/nn_test.py
tests/pjit_test.py
tests/pmap_test.py
tests/qdwh_test.py
tests/random_test.py
tests/scipy_fft_test.py
tests/scipy_ndimage_test.py
tests/scipy_optimize_test.py
tests/scipy_signal_test.py
tests/sharded_jit_test.py
tests/sparse_test.py
tests/sparsify_test.py
tests/xmap_test.py
==================
5a259925;Peter Hawkins;2022-02-14 12:09:29 -0500;Add constant handler for tokens.
Fixes https://github.com/google/jax/issues/9438

==

jax/interpreters/mlir.py
jax/interpreters/xla.py
tests/api_test.py
==================
2c01312d;jax authors;2022-02-14 09:09:20 -0800;Merge pull request #9558 from jblespiau:changelist/427986940
PiperOrigin-RevId: 428526701

==
==================
799ecfa9;Jean-Baptiste Lespiau;2022-02-11 14:17:07 +0000;Remove e Type annotation for jit an pmap as there are additional attributes on the returned callable.
Using the experimental jax.jit(lambda x: x+1).lower(...) is raising an error with pytype.

==

jax/_src/api.py
==================
a4cacf57;Lena Martens;2022-02-14 15:02:05 +0000;Checkify: handle named_call in process_call.
named_call does not specify donated_invars, this change handles this missing
param case.

For future reference: we might want to add a call_param_updater registry to define
how call params need to get updated wrt checkify, like eg. partial_eval/ad does.

==

jax/experimental/checkify.py
tests/checkify_test.py
==================
fb821e94;jax authors;2022-02-14 06:38:30 -0800;Merge pull request #9491 from LenaMartens:changelist/427247461
PiperOrigin-RevId: 428492579

==
==================
4f6004a3;Jake VanderPlas;2022-02-14 06:20:12 -0800;JaxTestCase now sets jax_numpy_rank_promotion='raise' by default
PiperOrigin-RevId: 428489444

==

jax/experimental/jax2tf/tests/tf_test_util.py
tests/api_test.py
==================
7af443aa;jax authors;2022-02-14 06:09:16 -0800;Merge pull request #9539 from jakevdp:fix-jax-array
PiperOrigin-RevId: 428487387

==
==================
604518e5;Nicholas Krämer;2022-02-14 10:10:39 +0100;Corrected the usage of faa di bruno's formula in jet example.

==

jax/experimental/jet.py
==================
fc4f47cd;RuffaloVM;2022-02-13 23:47:52 +0900;shape_poly_test.py : remove duplicate word

==

jax/experimental/jax2tf/tests/shape_poly_test.py
==================
5446cee0;Nicholas Krämer;2022-02-13 08:59:29 +0100;fixed a typo in maths-part of jet-module-docstring

==

jax/experimental/jet.py
==================
c2a20db9;Nicholas Krämer;2022-02-13 08:52:34 +0100;Changed Taylor-series notation in module docstring

==

jax/experimental/jet.py
==================
cbc9024b;Nicholas Krämer;2022-02-13 08:19:24 +0100;Replaced fraction-notation for derivatives, and link different notes

==

jax/experimental/jet.py
==================
51c7d3bb;jax authors;2022-02-12 21:37:32 -0800;Merge pull request #9500 from mattjj:remove-units-3
PiperOrigin-RevId: 428282592

==
==================
d59af33c;Matthew Johnson;2022-02-06 17:21:31 -0800;[remove units] make JaxprTrace.process_call not introduce units

==

jax/core.py
jax/interpreters/partial_eval.py
==================
0566ea4c;jax authors;2022-02-12 14:49:02 -0800;Merge pull request #9456 from mattjj:jaxpr-pprint-color-flag-and-default
PiperOrigin-RevId: 428247626

==
==================
004bb684;Matthew Johnson;2022-02-04 19:12:57 -0800;add flag for jaxpr colorful syntax highlighting
set it on by default

==

jax/_src/config.py
jax/_src/lax/lax.py
jax/_src/pretty_printer.py
jax/core.py
==================
06c40122;jax authors;2022-02-12 14:09:55 -0800;Merge pull request #9498 from mattjj:remove-units-2
PiperOrigin-RevId: 428244153

==
==================
7077ce2e;Matthew Johnson;2022-02-06 17:21:31 -0800;[remove units] make JaxprTrace.process_call not introduce units

==

jax/_src/util.py
jax/interpreters/partial_eval.py
jax/interpreters/xla.py
==================
0210b563;Nicholas Krämer;2022-02-12 08:31:39 +0100;Changed example output values to exact numbers

==

jax/experimental/jet.py
==================
4f744e90;Nicholas Krämer;2022-02-12 08:19:54 +0100;'approximates' -> 'corresponding to' in jet-docstring.

==

jax/experimental/jet.py
==================
faf57d81;Nicholas Krämer;2022-02-12 08:14:57 +0100;Wrote docstring for jet

==

docs/jax.experimental.jet.rst
docs/jax.experimental.rst
jax/experimental/jet.py
==================
c069bfee;Jake VanderPlas;2022-02-11 12:44:55 -0800;Respect __jax_array__ in jnp.ndarray operations

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
2ae10ea7;jax authors;2022-02-11 11:44:14 -0800;Merge pull request #9469 from hawkinsp:doc
PiperOrigin-RevId: 428053772

==
==================
b9b73ee6;Peter Hawkins;2022-02-07 09:37:08 -0500;Recommend optax in jax.experimental_libraries.optimizers documentation.

==

jax/example_libraries/optimizers.py
==================
fd354071;jax authors;2022-02-11 11:20:11 -0800;Merge pull request #9526 from jakevdp:fix-util
PiperOrigin-RevId: 428047726

==
==================
f02c6fcd;jax authors;2022-02-11 01:03:14 -0800;Merge pull request #9475 from jakevdp:doc-extra-params
PiperOrigin-RevId: 427943650

==
==================
2162868e;Yash Katariya;2022-02-10 20:32:20 -0800;Update values after release
PiperOrigin-RevId: 427910510

==

CHANGELOG.md
jax/version.py
jaxlib/version.py
setup.py
==================
5691010d;jax authors;2022-02-10 19:08:01 -0800;Copybara import of the project:
--
d42fffd849a4bac0c0c11a3346c93f07f8c64c44 by Jake VanderPlas <jakevdp@google.com>:

JaxTestCase: set numpy_rank_promotion='raise' by default
PiperOrigin-RevId: 427896974

==

CHANGELOG.md
jax/_src/test_util.py
jax/experimental/jax2tf/tests/tf_test_util.py
tests/api_test.py
tests/batching_test.py
tests/fft_test.py
tests/infeed_test.py
tests/lax_autodiff_test.py
tests/lax_numpy_einsum_test.py
tests/lax_numpy_indexing_test.py
tests/lax_numpy_test.py
tests/lax_numpy_vectorize_test.py
tests/lax_scipy_sparse_test.py
tests/lax_scipy_test.py
tests/lax_test.py
tests/linalg_test.py
tests/nn_test.py
tests/pjit_test.py
tests/pmap_test.py
tests/qdwh_test.py
tests/random_test.py
tests/scipy_fft_test.py
tests/scipy_ndimage_test.py
tests/scipy_optimize_test.py
tests/scipy_signal_test.py
tests/sharded_jit_test.py
tests/sparse_test.py
tests/sparsify_test.py
tests/xmap_test.py
==================
8b4a7ce9;jax authors;2022-02-10 17:08:39 -0800;Merge pull request #9330 from jakevdp:rank-promotion-final
PiperOrigin-RevId: 427878821

==
==================
22ff25bb;Jake VanderPlas;2022-02-10 14:33:13 -0800;DOC: add ability to document extra_params within _wraps

==

jax/_src/numpy/lax_numpy.py
jax/_src/numpy/util.py
==================
6324577a;Jake VanderPlas;2022-02-01 09:37:46 -0800;JaxTestCase: set numpy_rank_promotion='raise' by default

==

CHANGELOG.md
jax/_src/test_util.py
jax/experimental/jax2tf/tests/tf_test_util.py
tests/api_test.py
tests/batching_test.py
tests/fft_test.py
tests/infeed_test.py
tests/lax_autodiff_test.py
tests/lax_numpy_einsum_test.py
tests/lax_numpy_indexing_test.py
tests/lax_numpy_test.py
tests/lax_numpy_vectorize_test.py
tests/lax_scipy_sparse_test.py
tests/lax_scipy_test.py
tests/lax_test.py
tests/linalg_test.py
tests/nn_test.py
tests/pjit_test.py
tests/pmap_test.py
tests/qdwh_test.py
tests/random_test.py
tests/scipy_fft_test.py
tests/scipy_ndimage_test.py
tests/scipy_optimize_test.py
tests/scipy_signal_test.py
tests/sharded_jit_test.py
tests/sparse_test.py
tests/sparsify_test.py
tests/xmap_test.py
==================
8df19321;Yash Katariya;2022-02-10 16:45:45 -0800;Add `ndim` and `size` to GDA
PiperOrigin-RevId: 427874829

==

jax/experimental/global_device_array.py
tests/global_device_array_test.py
==================
3e504895;Jake VanderPlas;2022-02-10 13:19:49 -0800;tests: use lax.broadcast_shapes in place of custom logic

==

tests/lax_numpy_test.py
==================
2512aed4;Peter Hawkins;2022-02-10 12:28:06 -0800;Include the module name in MHLO IR dumps, rather than always naming dumps "builtin.module".
PiperOrigin-RevId: 427817318

==

jax/_src/dispatch.py
==================
1ad3551e;Yash Katariya;2022-02-10 11:58:30 -0800;Release jax and jaxlib 0.3.0 as per the new release process.
PiperOrigin-RevId: 427809845

==

CHANGELOG.md
docs/requirements.txt
jax/version.py
jaxlib/version.py
setup.py
==================
4df01eee;jax authors;2022-02-10 11:39:07 -0800;Merge pull request #9523 from google:yashk2810-patch-6
PiperOrigin-RevId: 427804472

==
==================
ef11d53f;Yash Katariya;2022-02-10 11:33:20 -0800;Update TF commit for release

==

WORKSPACE
==================
d82bcc2a;Yash Katariya;2022-02-10 11:29:06 -0800;Add `jax[_ci]` option to account for the new release process.
PiperOrigin-RevId: 427802081

==

setup.py
==================
0b135fbf;jax authors;2022-02-10 09:18:46 -0800;Merge pull request #9518 from LenaMartens:changelist/427732530
PiperOrigin-RevId: 427766853

==
==================
2ba8aec2;Lena Martens;2022-02-10 14:28:46 +0000;Checkify: Fix docstring formatting and polish enabled_errors sets.

==

jax/experimental/checkify.py
tests/checkify_test.py
==================
1340fbbc;Lena Martens;2022-02-10 07:39:09 -0800;Strip named_shape and weak_type from aval when donating buffers.
PiperOrigin-RevId: 427744848

==

jax/interpreters/mlir.py
tests/api_test.py
tests/xmap_test.py
==================
744636db;jax authors;2022-02-09 16:50:00 -0800;Merge pull request #9514 from google:yashk2810-patch-5
PiperOrigin-RevId: 427605108

==
==================
cabc98c0;Yash Katariya;2022-02-09 16:34:44 -0800;update TF commit for release

==

WORKSPACE
==================
8af0d8d0;Peter Hawkins;2022-02-09 14:57:21 -0800;Add complex number DLPack support to JAX and TensorFlow.
Fixes https://github.com/google/jax/issues/9497

PiperOrigin-RevId: 427579098

==

jax/_src/dlpack.py
==================
74506c7d;Peter Hawkins;2022-02-09 14:44:04 -0800;Rollback of: Implement the JAX transfer guard API
Adds `--jax_transfer_guard` flag and `jax.transfer_guard()` context manager that allows logging or disallowing unintended transfers.

The API distinguishes between two types of transfers:
* explicit transfers: `jax.device_put*()` and `jax.device_get()` calls.
* implicit transfers: Other transfers (e.g., printing a `DeviceArray`).

The transfer guard can take an action based on its guard level:

* "allow": Silently allow all transfers (default; s...

PiperOrigin-RevId: 427576107

==

build/build_wheel.py
jax/__init__.py
jax/_src/api.py
jax/_src/config.py
jax/_src/lib/__init__.py
tests/transfer_guard_test.py
==================
ca18fe18;jax authors;2022-02-09 14:35:47 -0800;Merge pull request #9511 from hawkinsp:eqnprint
PiperOrigin-RevId: 427574021

==
==================
0c768766;Peter Hawkins;2022-02-09 21:57:06 +0000;Replace core.pp_eqn_compact() with core.str_eqn_compact().
pp_eqn_compact() is used for one purpose only: creating metadata to put
on HLO. In that case, we don't need such carefully-formatted strings,
and speed is more important.

Gave a 6% speedup on a researcher's model.

==

jax/core.py
jax/interpreters/mlir.py
jax/interpreters/xla.py
==================
b7e1fec2;Hyeontaek Lim;2022-02-09 13:49:48 -0800;Implement the JAX transfer guard API
Adds `--jax_transfer_guard` flag and `jax.transfer_guard()` context manager that allows logging or disallowing unintended transfers.

The API distinguishes between two types of transfers:
* explicit transfers: `jax.device_put*()` and `jax.device_get()` calls.
* implicit transfers: Other transfers (e.g., printing a `DeviceArray`).

The transfer guard can take an action based on its guard level:

* "allow": Silently allow all transfers (default; same as the previous behavior).
* "log": Log and allow implicit transfers. Silently allow explicit transfers.
* "disallow": Disallow implicit transfers. Silently allow explicit transfers.
* "log_explicit": Log and allow all transfers.
* "disallow_explicit": Disallow all transfers.

The API also allows fine-control the transfer guard level of individual transfer directions. Their flag and context manager names are suffixed with the transfer direction:

* "host_to_device": Converting a Python value into a `DeviceBuffer`.
* "device_to_device": Copying a `DeviceBuffer` to a different device.
* "device_to_host": Fetching the value of a `DeviceBuffer`.

Example:
```
x = jnp.array(1)
y = jnp.array(2)
z = jnp.array(3)

print(x)  # No error
with jax.transfer_guard("disallow"):
  print(x)  # No error; x is already fetched
  print(jax.device_get(y))  # No error
  print(z)  # Error!
```

PiperOrigin-RevId: 427562278

==

build/build_wheel.py
jax/__init__.py
jax/_src/api.py
jax/_src/config.py
jax/_src/lib/__init__.py
tests/transfer_guard_test.py
==================
74fb4201;jax authors;2022-02-09 12:48:00 -0800;Merge pull request #9510 from mattjj:checkify-custom-vjp
PiperOrigin-RevId: 427546471

==
==================
d9270b24;Matthew Johnson;2022-02-09 12:04:34 -0800;[checkify] add custom_vjp support

==

jax/experimental/checkify.py
tests/checkify_test.py
==================
b82ef91f;jax authors;2022-02-09 12:25:22 -0800;Merge pull request #9509 from mattjj:checkify-custom-jvp
PiperOrigin-RevId: 427541020

==
==================
61b884b0;jax authors;2022-02-09 12:17:59 -0800;Merge pull request #9494 from superbobry:lax_numpy-any
PiperOrigin-RevId: 427539082

==
==================
4ce749e6;Matthew Johnson;2022-02-09 11:18:40 -0800;[checkify] handle custom_jvp

==

jax/experimental/checkify.py
tests/checkify_test.py
==================
02b8ce33;Yash Katariya;2022-02-09 11:02:38 -0800;Use thread local positional semantics and change thread_resources to subclass from threading.local.
Both these fixes makes sure that you can compile pjit in multiple threads.

PiperOrigin-RevId: 427517953

==

jax/experimental/maps.py
jax/experimental/pjit.py
==================
8ca6622c;Peter Hawkins;2022-02-09 11:02:31 -0800;Change lax.select_p to be an n-ary predicate, 'lax.select_n_p'. Change `lax.select()` to be a thin shim around the new n-ary version.
Note that one key difference between `lax.select_p` and `lax.select_n_p` is that the order of the cases is reversed for boolean predicates. This merited a new name to minimize confusion.

Use lax.select_n() in conditional batching. This means that we only produce one `select_n()` primitive for each conditional output, rather than a tree. While this has no effect on the number of HLO operators we generate, it can reduces the number of jaxpr equations significantly.

PiperOrigin-RevId: 427517899

==

jax/_src/lax/control_flow.py
jax/_src/lax/lax.py
jax/experimental/checkify.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/jax2tf_limitations.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jet.py
jax/lax/__init__.py
tests/lax_test.py
==================
e219ea08;jax authors;2022-02-09 07:54:17 -0800;Merge pull request #9204 from LenaMartens:changelist/420726115
PiperOrigin-RevId: 427470746

==
==================
d57990ec;Matthew Johnson;2022-02-08 12:45:38 -0800;improve pjit in/out_axis_resources pytree errors
This is an application of the utilities in #9372.

==

jax/_src/tree_util.py
jax/experimental/pjit.py
jax/tree_util.py
tests/pjit_test.py
tests/tree_util_test.py
==================
82d82613;Peter Hawkins;2022-02-08 16:17:09 -0800;Speed up source location computation when lowering a jaxpr to HLO/MHLO.
Speed up source_info_util.user_frames by using a newly refactored Traceback.raw_frames() attribute. Since we are interested only in one frame, it's best to avoid doing wasted work on all the frames we are going to ignore.

Change traceback.raw_frames() to return the transpose of what it previously returned because it means we only need to build 3 Python objects, rather than n + 1 Python objects for n frames.

PiperOrigin-RevId: 427320674

==

jax/_src/source_info_util.py
jax/jaxpr_util.py
==================
0a060cf1;Yash Katariya;2022-02-08 15:57:49 -0800;Catch the device buffer order with the expected global_mesh.local_devices order that we should get. This is to make sure that we don't get some cryptic message from XLA and catch it in GDA itself.
PiperOrigin-RevId: 427315736

==

jax/experimental/global_device_array.py
tests/global_device_array_test.py
==================
4e8043f2;jax authors;2022-02-08 15:49:54 -0800;Merge pull request #9461 from MichaelMarien:quantile-tuple-axis
PiperOrigin-RevId: 427313122

==
==================
e8ec9570;jax authors;2022-02-08 15:39:58 -0800;Merge pull request #9471 from jakevdp:generic
PiperOrigin-RevId: 427310192

==
==================
bce332bf;jax authors;2022-02-08 15:34:51 -0800;Merge pull request #9481 from jakevdp:jax-enable-checks
PiperOrigin-RevId: 427310155

==
==================
0fe377ce;Sergei Lebedev;2022-02-08 22:18:16 +0000;Added an explicit Any return type to lax_numpy.ndarray methods
This change makes ndarray a bit easier for tooling to handle, since de-facto
all these methods are supposed to return *something*, but the type inferrable
from their default implementations is None.

As a hand-wavy aside, in a type stub

    def f(): ...

could be treated equivalently to

    def f() -> Any: ...

because there is no body to infer return type from, and Any is a reasonable
fallback type. In a .py file, however, f is no longer just a function *type*
(as opposed to function *implementation*), and thus it has an inferrable
return type.

==

jax/_src/numpy/lax_numpy.py
==================
4d0db5d9;lenamartens;2022-02-08 20:41:19 +0000;Fix build and address suggestion

==

jax/experimental/checkify.py
==================
b2cf12aa;Lena Martens;2022-02-08 20:23:40 +0000;Apply suggestions from code review
Co-authored-by: Matthew Johnson <mattjj@google.com>
==

jax/experimental/checkify.py
==================
010eb82a;Lena Martens;2022-02-08 19:33:55 +0000;Rename wrapper functions to always refer to the JAX api function.
eg. batched_fun -> vmap_fun

==

jax/_src/api.py
==================
3e9f8248;michaelmarien;2022-02-06 17:47:30 +0100;Expand implementation of lax_numpy._quantile to allow the input of a tuple as axis argument * support and test edge case where axis argument is empty tuple () * replace swapaxis + reshape methodology by one call to lax.reshape for computational efficiency's sake * add check on repeated axis and throw ValueError * introduced and changed corresponding numpy code to swap and reshape axis to be quantiled * introduced code to accomodate the reintroduction of those axes if keepdims=True * added testcases

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
be12038b;Ryan Sepassi;2022-02-08 11:21:56 -0800;Merge branch 'main' into compilelog

==
==================
0042edb5;Lena Martens;2022-01-10 12:25:47 +0000;Checkify: rename some symbols and add some docstrings.

==

docs/jax.experimental.rst
jax/experimental/checkify.py
tests/checkify_test.py
==================
fbda1a65;jax authors;2022-02-08 09:28:14 -0800;Merge pull request #9489 from hawkinsp:sda
PiperOrigin-RevId: 427210907

==
==================
c137aada;jax authors;2022-02-08 09:23:27 -0800;Merge pull request #9488 from pnkraemer:jet-primitive-dynamic-slice
PiperOrigin-RevId: 427210782

==
==================
5679fedd;Peter Hawkins;2022-02-08 09:51:57 -0500;Fix missing handler when lexically capturing a ShardedDeviceArray when MLIR enabled.

==

jax/interpreters/pxla.py
tests/pmap_test.py
==================
c07a0f11;Nicholas Krämer;2022-02-08 13:28:41 +0100;Add test and jet-primitive for dynamic_slice

==

jax/experimental/jet.py
tests/jet_test.py
==================
44c6c055;jax authors;2022-02-07 19:17:57 -0800;Merge pull request #9442 from mattjj:zeros
PiperOrigin-RevId: 427078926

==
==================
3c1a1ca6;jax authors;2022-02-07 18:31:52 -0800;Merge pull request #9419 from hawkinsp:versioning
PiperOrigin-RevId: 427073382

==
==================
085e6586;Ryan Sepassi;2022-02-07 17:11:10 -0800;Update compilation cache logging to log individual hashes as well as cumulative hash

==

jax/experimental/compilation_cache/compilation_cache.py
==================
8be057de;Peter Hawkins;2022-02-02 16:21:26 -0500;Introduce a new jax/jaxlib versioning scheme.
Adds a design note that describes the scheme and how the jax and jaxlib versions
are related.

==

docs/design_notes/index.rst
docs/design_notes/jax_versioning.md
jax/_src/api.py
jax/_src/lib/__init__.py
jax/experimental/compilation_cache/compilation_cache.py
jax/version.py
tests/version_test.py
==================
760f309f;Jake VanderPlas;2022-02-07 09:29:02 -0800;Add jax.numpy.generic

==

jax/_src/numpy/lax_numpy.py
jax/numpy/__init__.py
==================
f2222bb1;Jake VanderPlas;2022-02-07 14:43:00 -0800;CI: error if docstring rewrite fails

==

.github/workflows/ci-build.yaml
jax/_src/numpy/util.py
==================
287c476e;Peter Hawkins;2022-02-07 14:40:11 -0800;Cache traceback to MLIR location conversion.
Finding the user frame in a traceback is something we do for every jaxpr equation, and it shows up in profiles. We expect a reasonable amount of locality, e.g., many lines of code with similar provenance appearing together, so this seems like a place for a small LRU cache.

PiperOrigin-RevId: 427020947

==

jax/_src/source_info_util.py
==================
f539c9b9;Peter Hawkins;2022-02-07 14:12:28 -0800;Hoist construction of predicates out of cond batching rule.
Avoids building the "which path are we following" predicate once for each input.

PiperOrigin-RevId: 427012972

==

jax/_src/lax/control_flow.py
==================
e7032fe9;Peter Hawkins;2022-02-07 14:05:36 -0800;Remove unnecessary dtype canonicalization from jax.core.raise_to_shaped.
I noticed this in passing while working on https://github.com/google/jax/pull/9468. It seems strange to me that we would change the dtype when raising a ShapedArray to a ShapedArray, and indeed it seems not to be necessary.

PiperOrigin-RevId: 427011028

==

jax/core.py
==================
5648f768;jax authors;2022-02-07 13:34:25 -0800;Merge pull request #9477 from hawkinsp:doc2
PiperOrigin-RevId: 427002408

==
==================
465b5932;Peter Hawkins;2022-02-07 16:19:46 -0500;Update scipy intersphinx inventory for SciPy 1.8.0.
According to https://github.com/scipy/scipy/issues/14267 the SciPy docs seems to have moved.

==

docs/conf.py
==================
296832e8;Adam Paszke;2022-02-07 10:37:01 -0800;Use aval_out to construct a sharding spec in shard to full
The shard's dimensions might be too small and might trigger asserts, even though
the shape has no influence on sharding specs.

PiperOrigin-RevId: 426955706

==

jax/interpreters/pxla.py
==================
42cd7ed1;Adam Paszke;2022-02-07 10:34:36 -0800;Allow nesting MANUAL-style xmaps in pjits
PiperOrigin-RevId: 426955137

==

jax/experimental/maps.py
tests/xmap_test.py
==================
1bc8ee1d;jax authors;2022-02-07 09:31:42 -0800;Merge pull request #9441 from jakevdp:test-all-types
PiperOrigin-RevId: 426937874

==
==================
0b4b0fd0;Jake VanderPlas;2022-02-07 08:59:44 -0800;tests: add unsigned ints to all_dtypes

==

jax/_src/test_util.py
tests/lax_numpy_test.py
==================
5956f394;jax authors;2022-02-07 08:52:53 -0800;Merge pull request #9468 from hawkinsp:opt
PiperOrigin-RevId: 426929169

==
==================
524ad4b2;jax authors;2022-02-07 07:20:50 -0800;Merge pull request #9437 from jakevdp:doc-toc
PiperOrigin-RevId: 426909827

==
==================
9c248d5a;jax authors;2022-02-07 07:16:13 -0800;Merge pull request #9470 from hawkinsp:scipy
PiperOrigin-RevId: 426909482

==
==================
942581d1;Peter Hawkins;2022-02-07 14:49:39 +0000;Fix test failure in line search test due to scipy 1.8 release.

==

tests/third_party/scipy/line_search_test.py
==================
d386b1f7;Peter Hawkins;2022-02-07 14:25:14 +0000;Small speedups to core.raise_to_shaped().
Avoid forming a new ShapedArray if we already have a ShapedArray.

Don't use the slower safe map() when canonicalizing shapes. We're going
to form a tuple anyway.

Before:
```
In [1]: import numpy as np ; from jax import core, numpy as jnp
In [2]: x = core.ShapedArray((100,100), jnp.float32)
In [3]: %timeit core.raise_to_shaped(x)
4.11 µs ± 30.9 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)
```

After:
```
In [1]: import numpy as np ; from jax import core, numpy as jnp
In [2]: x = core.ShapedArray((100,100), jnp.float32)
In [3]: %timeit core.raise_to_shaped(x)
207 ns ± 0.131 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)
```

==

jax/core.py
==================
89be6d29;jax authors;2022-02-07 01:29:21 -0800;Merge pull request #9395 from jakevdp:faster-numpy-test
PiperOrigin-RevId: 426850791

==
==================
7a6986c4;jax authors;2022-02-04 20:02:45 -0800;[JAX] Update the ANN document.
Deletes the documentation that explains the algorithm.
I don't think it is the necessary detail for users.
We'll write a paper to explain it in detail very soon.

PiperOrigin-RevId: 426546480

==

jax/experimental/ann.py
==================
5dd1c759;James Bradbury;2022-02-04 17:01:36 -0800;Add batch_axis to variance scaling initializers
PiperOrigin-RevId: 426522731

==

jax/_src/nn/initializers.py
tests/nn_test.py
==================
bd18ded4;Jake VanderPlas;2022-01-31 14:44:45 -0800;NumpyUfuncTests: speed up test generation

==

jax/_src/test_util.py
tests/lax_numpy_test.py
==================
ea8817b3;Jake VanderPlas;2022-02-04 14:40:14 -0800;DOC: move experimental APIs to their own pages

==

docs/jax.experimental.ann.rst
docs/jax.experimental.global_device_array.rst
docs/jax.experimental.host_callback.rst
docs/jax.experimental.maps.rst
docs/jax.experimental.rst
docs/jax.experimental.sparse.rst
==================
fc10438b;Jake VanderPlas;2022-02-04 13:09:24 -0800;DOC: move functions in jax.html to their own pages

==

docs/jax.rst
==================
086a607d;Adam Paszke;2022-02-04 11:16:54 -0800;Add experimental support for SPMD lowering of xmap via MANUAL sharding annotations
Note that it's still limited and turns out to be a bit hard (partly due to
unclear XLA semantics at this point). Using constants that are not xmap inputs
is likely to cause SPMD partitioner errors and cross-replica collectives don't seem
to work either.

In any case, the next step will be to allow nesting those xmaps inside pjits.

PiperOrigin-RevId: 426447989

==

jax/_src/test_util.py
jax/experimental/maps.py
jax/experimental/pjit.py
jax/interpreters/mlir.py
jax/interpreters/pxla.py
tests/xmap_test.py
==================
3fd91d60;Skye Wanderman-Milne;2022-02-04 10:17:26 -0800;Run compilation_cache_test.py using TFRT
PiperOrigin-RevId: 426433041

==

tests/compilation_cache_test.py
==================
f5107212;jax authors;2022-02-04 09:29:48 -0800;Merge pull request #9447 from jakevdp:fix-array-split
PiperOrigin-RevId: 426421577

==
==================
9be4f6e1;jax authors;2022-02-04 09:22:06 -0800;Merge pull request #9448 from hawkinsp:doctweak
PiperOrigin-RevId: 426419901

==
==================
70af4667;Jake VanderPlas;2022-02-04 08:44:03 -0800;jnp.split: push inputs to device before splitting

==

jax/_src/numpy/lax_numpy.py
==================
f94c42b2;Peter Hawkins;2022-02-04 11:30:10 -0500;Fix rendering of cube root in docs.

==

jax/_src/lax/lax.py
==================
248572c3;jax authors;2022-02-04 08:23:21 -0800;Merge pull request #9446 from hawkinsp:docsj
PiperOrigin-RevId: 426408109

==
==================
2a614038;jax authors;2022-02-04 08:18:12 -0800;Merge pull request #9440 from hawkinsp:booktheme
PiperOrigin-RevId: 426407795

==
==================
efacc930;Peter Hawkins;2022-02-03 17:05:04 -0500;Use the sphinx-book-theme for JAX documentation.

==

docs/conf.py
docs/requirements.txt
==================
a43c82a3;Peter Hawkins;2022-02-04 08:52:13 -0500;Add `-j auto` to the suggested doc build instructions.
Despite being marked as experimental, parallelism appears to work fine for JAX doc builds, and speeds up builds significantly.

==

docs/developer.md
==================
d11ead52;jax authors;2022-02-03 22:49:33 -0800;Merge pull request #9372 from mattjj:tree-prefix-utils
PiperOrigin-RevId: 426320883

==
==================
45d96c49;jax authors;2022-02-03 18:03:33 -0800;Merge pull request #4671 from romanngg:conv_local
PiperOrigin-RevId: 426282505

==
==================
e186aa3f;Matthew Johnson;2022-01-28 15:54:19 -0800;add and test pytree utils for better errors

==

jax/_src/api.py
jax/_src/tree_util.py
tests/tree_util_test.py
==================
a7fc7b13;Matthew Johnson;2022-02-03 15:36:56 -0800;remove some unnecessary code

==

jax/interpreters/ad.py
==================
50d89996;Yash Katariya;2022-02-03 15:09:04 -0800;Add a replica_id check so that the checkpoint inconsistency that was observed due to wrong replica_id calculation will not happen again. We will catch this at the GDA level in `__init__` and raise an error before going to checkpointing.
In the pxla path, we will catch this in `_gda_array_result_handler` while compiling.

PiperOrigin-RevId: 426248066

==

jax/experimental/global_device_array.py
tests/global_device_array_test.py
==================
7d469759;jax authors;2022-02-03 12:00:11 -0800;Merge pull request #9433 from google:yashk2810-patch-4
PiperOrigin-RevId: 426204462

==
==================
82c882cc;jax authors;2022-02-03 11:51:30 -0800;Merge pull request #9432 from jakevdp:bcoo-extract-fix
PiperOrigin-RevId: 426202221

==
==================
bd04c94f;Matthew Johnson;2022-02-03 11:46:02 -0800;https://github.com/google/jax/pull/9316 introduced a memory regression. Fix it by gating the offending code under a flag which no one has enabled.
#9316 is part of an ongoing experiment in adding dynamic shape support. The
experiment is meant not to perturb existing users. So any changes which may not
be innocuous should be behind the jax_dynamic_shapes flag.

But one of the changes in #9316 was not innocuous! (And I knew it might not be
at the time, but I'm an idiot and was optimistic that no one would notice.)

It has to do with the broadcasting logic in jax.numpy, specifically in
lax_numpy.py:_promote_shapes. Like NumPy, jax.numpy supports rank promotion,
e.g. `jnp.add(x:f32[4], y:f32[2,3,4])` is valid and results in the first
argument being logically promoted to shape `f32[2,3,4]` before the operation is
applied.

Our implementation of that rank promotion was to reduce it to an instance of
singleton-axis broadcasting: in the jax.numpy layer we would promote the shape
of the first argument to `f32[1,1,4]`, and then we could rely on lax.py's
singleton-axis broadcasting (copied from XLA HLO) to handle the rest. I
implemented it that way because, at least in eager mode (i.e. not staging out
with `jax.jit`), it could avoid broadcasting out a large temporary value. (I
thought reverse-mode AD would end up introducing this large intermediate
anyway, but maybe the `jit`s applied to `jax.numpy` functions avoid that...)

The way this relates to dynamic shapes is that we don't (and may not ever)
support singleton-axis broadcasting with dynamic shapes, like
`jnp.add(x:f32[n,4], y:f32[1,4])`. So when adding dynamic shape support, I
changed the rank promotion path not to rely on singleton-axis broadcasting. In
other words, instead of promoting the first argument in the example to
`f32[1,1,4]`, after #9316 we'd broadcast it to `f32[2,3,4]`. That could use
extra memory!

It turns out that some memory-sensitive users _do_ rely on this memory savings.
So we should hide this alternative implementation of rank promotion behind a
flag. (All these details around dynamic shapes are subject to change.)

PiperOrigin-RevId: 426201099

==

jax/_src/numpy/lax_numpy.py
==================
5a012d5e;Tianjian Lu;2022-02-03 11:16:18 -0800;[JAX] Added jit-able singular value decomposition.
PiperOrigin-RevId: 426193395

==

jax/_src/lax/svd.py
tests/svd_test.py
==================
303eec4e;Yash Katariya;2022-02-03 10:06:27 -0800;Cut a new jaxlib release

==

WORKSPACE
==================
b7dcc4ce;Yash Katariya;2022-02-03 09:59:25 -0800;Handle serialization of arrays with shape `(0,)`. These arrays are usually empty lists (`np.array([])`)
PiperOrigin-RevId: 426172532

==

jax/experimental/gda_serialization/serialization.py
jax/experimental/gda_serialization/serialization_test.py
==================
69cecbf4;Jake VanderPlas;2022-02-03 09:37:09 -0800;[sparse] fix bcoo_extract batching rule

==

jax/experimental/sparse/bcoo.py
tests/sparse_test.py
==================
d04dce3f;jax authors;2022-02-03 09:24:13 -0800;Merge pull request #9417 from hawkinsp:fft2
PiperOrigin-RevId: 426163984

==
==================
7856601c;jax authors;2022-02-03 08:16:17 -0800;Merge pull request #9430 from hawkinsp:issue9429
PiperOrigin-RevId: 426149697

==
==================
042c9bd7;Peter Hawkins;2022-02-03 10:23:29 -0500;Ensure that tree_util.Partial's .func attribute is stable.
Fixes #9429.

==

jax/_src/tree_util.py
tests/tree_util_test.py
==================
84bccb24;Peter Hawkins;2022-02-02 13:45:15 -0500;Support string fft_type values in lax.fft.

==

jax/_src/lax/fft.py
tests/fft_test.py
==================
4432f473;jax authors;2022-02-03 02:03:39 -0800;Merge pull request #9425 from gnecula:tf_fix_conv
PiperOrigin-RevId: 426087573

==
==================
53be1b9c;George Necula;2022-02-03 11:09:12 +0200;[jax2tf] Add a TF version check for support of conv:batch_group_count
The batch_group_count != 1 is only supported with TF version 2.8.0 and
above.

Fixes: #9384

==

jax/experimental/jax2tf/README.md
jax/experimental/jax2tf/jax2tf.py
==================
a0abe8e4;jax authors;2022-02-02 15:49:28 -0800;[JAX] Move the ann recall computation to ann.py.
This function is very useful for our users to evaluate the ann results
against the standard ann datasets that provides the ground truth.

PiperOrigin-RevId: 425997236

==

jax/experimental/ann.py
tests/ann_test.py
==================
08fd83b6;Sandeep Dasgupta;2022-02-02 14:01:54 -0800;[mhlo] jax infeed/outfeed lowering changes in response to detupling of the ops.
PiperOrigin-RevId: 425972002

==

jax/_src/lax/lax.py
==================
c25d6665;Sandeep Dasgupta;2022-02-02 13:28:13 -0800;[mhlo] Phase I: Remove tuples from mhlo Infeed/Outfeed/Send/Recv Ops.
The CL does the following:
1. Modify the Send/Recv op to disallow tuple as returns and arguments.
2. Modify the infeed/Outfeed op to allow both the tuple and variadic tensors as return and arguments.
   - Modify the exporter to XLA hlo to handle infeed/outfeed with both tuple and non-tuple variants.
   - Adjust the layout of infeed op during import and export.
   - This CL does not modify the tf lowering (new/old bridge) or jax lowering for infeed/outfeed op in this CL. They will still produce the tuple variant of the ops.  That is why the CL has logic to export both the variants.

Here is an example of the layout adjustments during import/export.
## Import
```
XLA HLO:   ROOT %infeed = ( ( s32[3, 4]{1, 0}, s32[5, 6]{1, 0}, s32[7, 8]{1, 0}, s32[9,10]{1, 0}), token[]) infeed(token[] %token0)
MHLO: "mhlo.infeed"([[TOKEN]]) layout = [[1, 0], [1, 0], [1, 0], [1, 0]] // A flattened list of data-layouts
```

## Export
```
MHLO: %0:3 = "mhlo.infeed"(%arg0) {layout=[[0, 1], [0]]} : (!mhlo.token) -> (tensor<3x3xi32>, tensor<i1>, !mhlo.token)

XLA HLO:

%INFEED = ((s32[3,3]{0,1}, pred[]), token[]) infeed(token[] %token)
%GTE1 = (s32[3,3]{0,1}, pred[]) get-tuple-element(((s32[3,3]{0,1}, pred[]), token[]) %INFEED), index=0 // accessing the data-tuple
GTE2 = s32[3,3]{0,1} get-tuple-element((s32[3,3]{0,1}, pred[]) %GTE1), index=0  // accessing the data
%GTE3 = pred[] get-tuple-element((s32[3,3]{0,1}, pred[]) %GTE1), index=1  // accessing the data
%GTE4 = token[] get-tuple-element(((s32[3,3]{0,1}, pred[]), token[]) %INFEED), index=1 // accessing the token
```
PiperOrigin-RevId: 425963519

==

jax/_src/lax/lax.py
==================
ce1e2169;jax authors;2022-02-02 12:04:03 -0800;Merge pull request #9416 from hawkinsp:design
PiperOrigin-RevId: 425943906

==
==================
780594b1;Yash Katariya;2022-02-02 11:32:30 -0800;Switch to compression to blosc as its faster than gzip
PiperOrigin-RevId: 425936012

==

jax/experimental/gda_serialization/serialization.py
==================
df55ea52;Peter Hawkins;2022-02-02 12:21:48 -0500;Move design notes into docs/, and render them as part of the documentation.

==

docs/design_notes/custom_derivatives.md
docs/design_notes/index.rst
docs/design_notes/omnistaging.md
docs/design_notes/prng.md
docs/index.rst
==================
e29bfce8;jax authors;2022-02-02 08:22:02 -0800;Merge pull request #9415 from hawkinsp:intpow
PiperOrigin-RevId: 425889721

==
==================
f7ccda5a;Peter Hawkins;2022-02-02 10:59:56 -0500;Work around call expansion in MHLO->HLO lowering.
Don't cache and outline lowerings of `x**2` and `x**3`.

==

jax/_src/lax/lax.py
==================
e4a726e4;jax authors;2022-02-02 03:38:57 -0800;Merge pull request #9401 from gnecula:tflite_doc
PiperOrigin-RevId: 425842290

==
==================
1eef5c34;jax authors;2022-02-01 18:20:14 -0800;Merge pull request #9408 from skye:version
PiperOrigin-RevId: 425764129

==
==================
2ac49aac;Yash Katariya;2022-02-01 18:07:59 -0800;Switch to compression to blosc as its faster than gzip
PiperOrigin-RevId: 425762169

==

jax/experimental/gda_serialization/serialization.py
==================
715066c6;Skye Wanderman-Milne;2022-02-01 17:59:49 -0800;Bump jax version to 0.2.29 and update CHANGELOG

==

CHANGELOG.md
jax/version.py
==================
3acbd449;Yash Katariya;2022-02-01 16:38:12 -0800;Remove isinstance checks
PiperOrigin-RevId: 425745786

==

jax/experimental/global_device_array.py
==================
dcca99b0;Yash Katariya;2022-02-01 15:16:24 -0800;Remove path from the serde API as tspec encompasses those things.
PiperOrigin-RevId: 425727733

==

jax/experimental/gda_serialization/serialization.py
jax/experimental/gda_serialization/serialization_test.py
==================
4e47de66;Yash Katariya;2022-02-01 14:05:19 -0800;Add the cache back now that Mesh's __hash__ is also being hashed on `self.devices.shape`.
PiperOrigin-RevId: 425711067

==

benchmarks/gda_benchmark.py
jax/experimental/global_device_array.py
jax/interpreters/pxla.py
tests/global_device_array_test.py
==================
5efa2856;Yash Katariya;2022-02-01 11:57:19 -0800;Switch Cuda 11.4 cudnn 8.0.5 to build with cuda 11.1 cudnn 8.0.5 instead.
PiperOrigin-RevId: 425681466

==

.bazelrc
==================
39786c64;jax authors;2022-02-01 11:56:48 -0800;Merge pull request #9394 from jakevdp:pre-commit-versions
PiperOrigin-RevId: 425681158

==
==================
fe145303;jax authors;2022-02-01 11:44:09 -0800;Merge pull request #9391 from jakevdp:fix-constant-handler
PiperOrigin-RevId: 425677978

==
==================
e3fe4a2c;jax authors;2022-02-01 08:13:09 -0800;Merge pull request #9316 from mattjj:djax-now-5
PiperOrigin-RevId: 425627062

==
==================
0d4fdccb;George Necula;2022-02-01 16:06:31 +0200;[jax2tf] minor changes to the documentation for TF Lite

==

jax/experimental/jax2tf/examples/tflite/mnist/README.md
==================
d9dcd139;Matthew Johnson;2022-01-20 22:58:09 -0800;djax: let make_jaxpr build dyn shape jaxprs

==

jax/_src/api.py
jax/_src/config.py
jax/_src/lax/lax.py
jax/_src/numpy/lax_numpy.py
jax/_src/numpy/vectorize.py
jax/_src/tree_util.py
jax/core.py
jax/experimental/jax2tf/tests/shape_poly_test.py
jax/interpreters/partial_eval.py
tests/api_test.py
tests/lax_control_flow_test.py
tests/lax_numpy_test.py
==================
f80887e6;Yash Katariya;2022-01-31 20:47:45 -0800;Couple of changes because of the serialization inconsistencies being observed.
* Remove the cache since one of the keys is global_mesh. Hash of global_mesh doesn't care of the mesh topology but just the devices. This is not good as indices are assigned to devices based on the topology. So if mesh is `(4, 2)` and then you give a new mesh `(2, 4)`, then the cache will return results for `(4, 2)` as the devices haven't changed. This is not right as the indices assigned in mesh `(2, 4)` will be different than `(4, 2)` as the topology is not the same.

```
mesh_devices = np.array(jax.devices()).reshape((4, 2))
mesh_axes = ('x' , 'y')
global_mesh1 = Mesh(mesh_devices, mesh_axes)
print(global_mesh1)

mesh_devices = np.array(jax.devices()).reshape((2, 4))
mesh_axes = ('x' , 'y')
global_mesh2 = Mesh(mesh_devices, mesh_axes)
print(global_mesh2)

hash(global_mesh1) == hash(global_mesh2)

Output:

Mesh(array([[0, 1],
       [2, 3],
       [4, 5],
       [6, 7]]), ('x', 'y'))
Mesh(array([[0, 1, 2, 3],
       [4, 5, 6, 7]]), ('x', 'y'))
True
```

* Remove the replica_id calculation math because after that the serialization inconsistencies were resolved. This is still confusing to me as to why its happening since I can't reproduce this in unit tests nor on small model runs. But I'll debug this in parallel. The important thing here is to unblock everyone. Replacing it with _hashed_index is still 2x faster than using _HashableIndex class.

PiperOrigin-RevId: 425525653

==

benchmarks/gda_benchmark.py
jax/experimental/global_device_array.py
==================
63bac944;jax authors;2022-01-31 15:42:08 -0800;Merge pull request #9393 from jakevdp:delete-code
PiperOrigin-RevId: 425477268

==
==================
d8f74f50;jax authors;2022-01-31 15:37:16 -0800;Merge pull request #9386 from jakevdp:fix-pjit-test
PiperOrigin-RevId: 425477260

==
==================
c12ca7f6;jax authors;2022-01-31 13:45:26 -0800;[XLA:TPU] Add 'aggregate_to_topk' option to ann in jax Also adds a pmap test for demonstrating multi-tpu ann.
PiperOrigin-RevId: 425451716

==

jax/experimental/ann.py
tests/ann_test.py
==================
b9b79bab;Jake VanderPlas;2022-01-31 13:39:11 -0800;maint: update pre-commit package versions & fix new mypy errors

==

.pre-commit-config.yaml
docs/autodidax.md
docs/autodidax.py
docs/jax-101/01-jax-basics.md
docs/jax-101/02-jitting.md
docs/jax-101/03-vectorization.md
docs/jax-101/04-advanced-autodiff.md
docs/jax-101/05-random-numbers.md
docs/jax-101/05.1-pytrees.md
docs/jax-101/06-parallelism.md
docs/jax-101/07-state.md
docs/jax-101/08-pjit.md
docs/notebooks/Common_Gotchas_in_JAX.md
docs/notebooks/Custom_derivative_rules_for_Python_code.md
docs/notebooks/How_JAX_primitives_work.md
docs/notebooks/Neural_Network_and_Data_Loading.md
docs/notebooks/Writing_custom_interpreters_in_Jax.md
docs/notebooks/autodiff_cookbook.md
docs/notebooks/convolutions.md
docs/notebooks/neural_network_with_tfds_data.md
docs/notebooks/quickstart.md
docs/notebooks/thinking_in_jax.md
docs/notebooks/vmapped_log_probs.md
docs/notebooks/xmap_tutorial.md
docs/transformations.md
jax/_src/numpy/lax_numpy.py
jax/_src/numpy/util.py
jax/experimental/maps.py
jax/interpreters/mlir.py
jax/interpreters/xla.py
==================
7da545f6;jax authors;2022-01-31 13:06:20 -0800;Merge pull request #9357 from jakevdp:where-error
PiperOrigin-RevId: 425442026

==
==================
e2079542;Jake VanderPlas;2022-01-31 12:47:49 -0800;Remove unused _asarray utility

==

jax/_src/random.py
==================
c52f5ea2;Marc van Zee;2022-01-31 12:13:49 -0800;Updates `flax.nn` with `flax.linen` in jax2tf README
PiperOrigin-RevId: 425429246

==

jax/experimental/jax2tf/README.md
==================
97d55eb1;Tianjian Lu;2022-01-31 11:01:58 -0800;[JAX] Re-enables lowering bcoo dot general to cuSparse.
PiperOrigin-RevId: 425410511

==

jax/_src/config.py
jax/experimental/sparse/bcoo.py
tests/sparse_test.py
==================
37e73fce;Jake VanderPlas;2022-01-31 10:56:52 -0800;Add complex types to mlir constant handlers

==

jax/interpreters/mlir.py
tests/api_test.py
==================
0382a6a0;jax authors;2022-01-31 08:45:11 -0800;Merge pull request #9385 from hawkinsp:numpydepr
PiperOrigin-RevId: 425376355

==
==================
163ec36e;Jake VanderPlas;2022-01-31 08:44:11 -0800;pjit_test: set jax_numpy_rank_promotion=raise

==

tests/pjit_test.py
==================
541f762a;Peter Hawkins;2022-01-31 16:34:59 +0000;Tolerate NumPy deprecation warnings when using older SciPy.
Simply importing scipy 1.2.3 with NumPy 1.21.5 leads to deprecation
warnings. Tolerate these in pytest.

==

conftest.py
pytest.ini
==================
abc339ba;jax authors;2022-01-28 17:44:46 -0800;Merge pull request #9373 from skye:update_libtpu_version
PiperOrigin-RevId: 424994481

==
==================
d096d9a7;Skye Wanderman-Milne;2022-01-28 17:29:04 -0800;Update pinned libtpu-nightly version for jaxlib 0.1.76

==

setup.py
==================
f3ae2c0d;Yash Katariya;2022-01-28 15:16:13 -0800;Strip named_shape and weak_type from aval when donating buffers.
PiperOrigin-RevId: 424968695

==

jax/interpreters/mlir.py
tests/api_test.py
tests/xmap_test.py
==================
66a887e5;jax authors;2022-01-28 13:34:53 -0800;Merge pull request #9370 from hawkinsp:bazelver
PiperOrigin-RevId: 424946057

==
==================
2388e353;Peter Hawkins;2022-01-28 21:11:02 +0000;Increase bazel version to 5.0.0 to match TensorFlow (https://github.com/tensorflow/tensorflow/commit/8871926b0aa9d5b0e819d12f6945bce752fde610).

==

.bazelversion
CHANGELOG.md
build/build.py
==================
47af596c;Yash Katariya;2022-01-28 11:58:16 -0800;Instead of getting users to run a tree_map over gdas, etc and run asyncio.run, absorb those APIs into the gda serde library.
PiperOrigin-RevId: 424923960

==

jax/experimental/gda_serialization/serialization.py
jax/experimental/gda_serialization/serialization_test.py
==================
ace8c0a5;Tom Hennigan;2022-01-28 09:35:18 -0800;Strip named_shape and weak_type from aval when donating buffers.
PiperOrigin-RevId: 424888671

==

jax/interpreters/mlir.py
tests/api_test.py
tests/xmap_test.py
==================
c7a2077c;jax authors;2022-01-28 09:22:19 -0800;Merge pull request #9346 from jakevdp:fix-testcase-config
PiperOrigin-RevId: 424885947

==
==================
b9bc87dd;jax authors;2022-01-28 08:47:04 -0800;Merge pull request #9368 from hawkinsp:doc
PiperOrigin-RevId: 424879465

==
==================
384042d0;Peter Hawkins;2022-01-28 11:30:43 -0500;Clarify the required NVidia driver versions in the JAX readme instructions.

==

README.md
==================
377f2560;jax authors;2022-01-28 08:34:47 -0800;Merge pull request #9341 from jakevdp:fix-rank-promotion
PiperOrigin-RevId: 424877054

==
==================
d66daa90;jax authors;2022-01-28 08:27:39 -0800;Merge pull request #9312 from GeraldCSC:jit-tutorial-update
PiperOrigin-RevId: 424875694

==
==================
e376df29;Jake VanderPlas;2022-01-28 08:16:30 -0800;disable implicit rank promotion in a number of remaining tests

==

examples/examples_test.py
jax/_src/lax/fft.py
tests/batching_test.py
tests/fft_test.py
tests/infeed_test.py
tests/lax_autodiff_test.py
tests/lax_test.py
tests/nn_test.py
tests/pmap_test.py
tests/qdwh_test.py
tests/scipy_fft_test.py
tests/scipy_stats_test.py
tests/sharded_jit_test.py
tests/stax_test.py
tests/xmap_test.py
==================
6791446b;Peter Hawkins;2022-01-28 08:07:28 -0800;Update development jaxlib version to 0.1.77, update jaxlib version in setup.py to 0.1.76.
Changelog entry for jaxlib 0.1.77 was already added in a previous PR.

PiperOrigin-RevId: 424872047

==

jaxlib/version.py
setup.py
==================
344171a5;jax authors;2022-01-28 08:05:56 -0800;Merge pull request #9359 from jakevdp:re-enable-array-test
PiperOrigin-RevId: 424871630

==
==================
857297df;Yash Katariya;2022-01-27 22:38:44 -0800;Only open TS once per GDA and not per shard.
PiperOrigin-RevId: 424788676

==

jax/experimental/gda_serialization/serialization.py
==================
e6f9ba0a;jax authors;2022-01-27 19:38:31 -0800;Merge pull request #9275 from froystig:auto-vmap
PiperOrigin-RevId: 424765479

==
==================
81ed272e;Jake VanderPlas;2022-01-27 14:28:14 -0800;Re-enable test of behavior from #8948

==

tests/lax_numpy_test.py
==================
49a26fea;Jake VanderPlas;2022-01-27 11:20:18 -0800;jnp.where: improve error for non-array inputs

==

jax/_src/numpy/lax_numpy.py
==================
0b3f497c;jax authors;2022-01-27 10:34:43 -0800;Merge pull request #9345 from jakevdp:ops-doc
PiperOrigin-RevId: 424650265

==
==================
928087ad;Jake VanderPlas;2022-01-26 15:44:53 -0800;DOC: add info about repeated indices to jax.ops docs

==

docs/jax.ops.rst
==================
2afea829;Jake VanderPlas;2022-01-26 15:49:59 -0800;JaxTestCase: prevent leakage of global state

==

jax/_src/test_util.py
==================
18a66149;jax authors;2022-01-27 06:40:54 -0800;Merge pull request #9353 from hawkinsp:jaxlib
PiperOrigin-RevId: 424597680

==
==================
be2f6a91;Peter Hawkins;2022-01-26 22:19:11 +0000;Update XLA for jaxlib 0.1.76 release.

==

CHANGELOG.md
WORKSPACE
==================
71468c67;jax authors;2022-01-27 06:21:03 -0800;Merge pull request #9352 from hawkinsp:flake
PiperOrigin-RevId: 424594461

==
==================
c54bb064;Peter Hawkins;2022-01-27 09:11:21 -0500;Fix flaky testcase LaxTest.testConvTransposePaddingList on GPU.

==

tests/lax_test.py
==================
6bd9292b;jax authors;2022-01-27 02:23:59 -0800;Merge pull request #9343 from jakevdp:with-config
PiperOrigin-RevId: 424555882

==
==================
1474f04e;Haitang Hu;2022-01-26 17:52:11 -0800;Explicit raise when comparing GDA equality.
The general idea is that, comparing a GDA equality is ambiguous by its nature. It can mean comparing local_shards within the current client, or comparing the global array which could be expensive and dangerous.
We will delegate this to users and have them explicitly specify the intention instead.

PiperOrigin-RevId: 424484191

==

jax/experimental/global_device_array.py
tests/global_device_array_test.py
==================
b5dace5e;jax authors;2022-01-26 14:55:21 -0800;Merge pull request #9331 from pschuh:id-assignment
PiperOrigin-RevId: 424449474

==
==================
f75c0f6f;jax authors;2022-01-26 14:50:47 -0800;Merge pull request #9339 from jakevdp:rank-promotion-flag
PiperOrigin-RevId: 424448022

==
==================
41b484c2;jax authors;2022-01-26 14:45:55 -0800;Merge pull request #9319 from jakevdp:doc-pre-commt
PiperOrigin-RevId: 424447995

==
==================
1de3999e;Jake VanderPlas;2022-01-26 14:32:11 -0800;test_util: export with_config

==

jax/test_util.py
==================
951de12d;jax authors;2022-01-26 12:10:54 -0800;Merge pull request #9338 from jakevdp:colab-tpu-install
PiperOrigin-RevId: 424410673

==
==================
0a44aa69;Jake VanderPlas;2022-01-26 11:10:58 -0800;README: clarify installation instructions for Colab TPU

==

README.md
==================
554d1a5b;Jake VanderPlas;2022-01-26 10:51:35 -0800;testDisableNumpyRankPromotion: make test more robust

==

tests/lax_numpy_test.py
==================
1b094ea4;jax authors;2022-01-26 09:59:01 -0800;Merge pull request #9309 from jakevdp:linalg-rank-promotion
PiperOrigin-RevId: 424375657

==
==================
27f28578;Jake VanderPlas;2022-01-26 09:29:06 -0800;linalg_test: disable implicit rank promotion

==

jax/_src/lax/linalg.py
jax/_src/numpy/linalg.py
jax/_src/scipy/linalg.py
tests/linalg_test.py
==================
4833fbb6;Gerald Shen;2022-01-25 00:18:23 -0500;fix caching example in jit tutorial

==

docs/jax-101/02-jitting.ipynb
docs/jax-101/02-jitting.md
==================
adda0a42;Peter Hawkins;2022-01-26 06:47:56 -0800;[JAX:IREE] Handle ImportError when iree isn't installed.
PiperOrigin-RevId: 424334198

==

jax/_src/lib/xla_bridge.py
==================
52a0db5c;jax authors;2022-01-26 06:40:45 -0800;Merge pull request #9270 from jakevdp:nanreduction-where
PiperOrigin-RevId: 424333142

==
==================
4a25ebb3;jax authors;2022-01-26 06:32:50 -0800;Merge pull request #9286 from jakevdp:sparse-empty-nse
PiperOrigin-RevId: 424331973

==
==================
2e540af2;jax authors;2022-01-25 21:46:08 -0800;Merge pull request #9329 from mattjj:one-tracer-per-var
PiperOrigin-RevId: 424255844

==
==================
c3128870;jax authors;2022-01-25 21:41:15 -0800;Merge pull request #9314 from attila-i-szabo:expm
PiperOrigin-RevId: 424255827

==
==================
c06933e2;Parker Schuh;2022-01-25 16:27:09 -0800;Update `get_compile_options` to accept Device objects.

==

jax/_src/dispatch.py
jax/_src/lib/xla_bridge.py
jax/interpreters/pxla.py
jax/interpreters/sharded_jit.py
tests/host_callback_test.py
==================
727823ea;jax authors;2022-01-25 16:29:43 -0800;Make lapack symbols strong in lapack_kernels
The lapack_kernels target has dual use as a jax kernel for the lapack
functions obtained via SciPy when running in a Python context (via pybind),
and as a jax kernel for lapack functions linked directly for use in a
pure C++ context.

The prior solution to this problem was to define the lapack symbols with
the weak attribute to make the linking with lapack optional (not sure why
exactly, since SciPy uses the exact same lapack library). However, this
causes C++ applications to silently forgo the linking with lapack and
simply leave those symbols as null pointers. Whether that happens or
not seems to be dependent on link order and dependency layering. In
short, this solution does not work half of the time, for seemingly
arbitrary reasons.

This is fixed here by adding a separate shim library that lists out
the lapack symbols as strong symbols and initializes the internal
function pointers of the kernels. Linking with this new library pulls
in the correct dependencies reliably. On the python side (with SciPy),
you simply link only with the basic lapack_kernels target.

PiperOrigin-RevId: 424208059

==

jaxlib/BUILD
jaxlib/lapack_kernels.cc
jaxlib/lapack_kernels.h
jaxlib/lapack_kernels_using_lapack.cc
==================
98816f3f;Matthew Johnson;2022-01-25 15:27:29 -0800;jaxpr staging: only one tracer per jaxpr variable

==

jax/interpreters/partial_eval.py
==================
ea4043a5;jax authors;2022-01-25 15:33:19 -0800;Merge pull request #9325 from jakevdp:fix-rank-promotion-test
PiperOrigin-RevId: 424195563

==
==================
04d8b354;Peter Hawkins;2022-01-25 15:08:16 -0800;[JAX:IREE] Fix bitrot in iree plugin for JAX.
The compiler driver appears not to be a thing in the IREE API any more. But it also appears not to be needed.

PiperOrigin-RevId: 424190139

==

jax/_src/iree.py
==================
4c3473dd;Jake VanderPlas;2022-01-25 14:53:40 -0800;Make forces_retrace tests more robust

==

tests/api_test.py
==================
6bda1e5d;Peter Hawkins;2022-01-25 14:35:23 -0800;[JAX] Require exact type equality using `is` for static arguments.
Fixes https://github.com/google/jax/issues/9273.

PiperOrigin-RevId: 424182826

==

jax/_src/api_util.py
tests/api_test.py
==================
dabdfcb8;Peter Hawkins;2022-01-25 11:55:58 -0800;Re-enable PJIT test that was disabled now XLA has been fixed.
PiperOrigin-RevId: 424143008

==

tests/pjit_test.py
==================
879a6d10;jax authors;2022-01-25 10:58:01 -0800;Merge pull request #9300 from jakevdp:bcoo-rank-promotion
PiperOrigin-RevId: 424127132

==
==================
6c38ec9a;Jake VanderPlas;2022-01-25 10:36:03 -0800;developer doc: more info on pre-commit

==

docs/developer.md
==================
fa243950;Jake VanderPlas;2022-01-24 13:33:46 -0800;[sparse] avoid implicit rank promotion

==

jax/experimental/sparse/bcoo.py
tests/sparse_test.py
tests/sparsify_test.py
==================
e117e379;Jake VanderPlas;2022-01-21 15:17:13 -0800;[sparse] accept nse argument to sparse.empty()

==

jax/experimental/sparse/bcoo.py
tests/sparse_test.py
==================
080d70e5;Jake VanderPlas;2022-01-20 14:15:52 -0800;jax.numpy: add where and initial arguments to nan reductions

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
2e3b483f;jax authors;2022-01-25 01:57:47 -0800;Merge pull request #9301 from jakevdp:api-test-rank-promotion
PiperOrigin-RevId: 424023282

==
==================
70bf2812;Attila Szabó;2022-01-25 09:54:23 +0000;Fix `max_squarings` in `expm`

==

jax/_src/scipy/linalg.py
==================
899f88c1;jax authors;2022-01-25 01:52:54 -0800;Merge pull request #9305 from jakevdp:jit-test-case
PiperOrigin-RevId: 424023278

==
==================
8cacad2e;Jake VanderPlas;2022-01-24 15:32:59 -0800;jax_jit_test: inherit from JaxTestCase

==

tests/jax_jit_test.py
==================
6388d53e;Peter Hawkins;2022-01-24 14:54:32 -0800;Disallow scatter_mul gradients if unique_indices=False.
The current gradients are incorrect if unique_indices=False. No gradient is better than an incorrect gradient.

https://github.com/google/jax/issues/9296

PiperOrigin-RevId: 423917753

==

jax/_src/lax/slicing.py
tests/lax_numpy_indexing_test.py
==================
b8372b0c;jax authors;2022-01-24 13:58:39 -0800;Merge pull request #9271 from jakevdp:nanarg-keepdims
PiperOrigin-RevId: 423903058

==
==================
af6fc178;jax authors;2022-01-24 13:53:51 -0800;Merge pull request #9302 from jakevdp:pin-docutil
PiperOrigin-RevId: 423902985

==
==================
3197aacb;Jake VanderPlas;2022-01-24 11:46:25 -0800;disable implicit rank promotion for api_test

==

tests/api_test.py
==================
42a2e66f;Jake VanderPlas;2022-01-24 12:02:39 -0800;DOC: pin docutils==0.16 to restore bullets in lists

==

docs/requirements.txt
==================
16c809ce;jax authors;2022-01-24 12:02:34 -0800;Merge pull request #8625 from Edenhofer:regular_grid_interpolator
PiperOrigin-RevId: 423876494

==
==================
7f917633;jax authors;2022-01-24 11:26:37 -0800;Merge pull request #9287 from google:gda
PiperOrigin-RevId: 423866601

==
==================
077dd905;jax authors;2022-01-24 11:20:15 -0800;Merge pull request #9281 from jakevdp:fix-docstrings
PiperOrigin-RevId: 423865034

==
==================
3ae0400f;yashkatariya;2022-01-24 11:06:44 -0800;Fixes

==

jax/experimental/global_device_array.py
==================
c4b97b25;Jake VanderPlas;2022-01-21 12:18:39 -0800;Fix auto-generated docstrings for JIT-compiled functions

==

jax/_src/numpy/util.py
tests/lax_numpy_test.py
==================
67f55391;Jake VanderPlas;2022-01-20 15:53:58 -0800;jnp.[nan]argmin/max: implement keepdims

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
e11cd44f;jax authors;2022-01-24 05:25:33 -0800;Merge pull request #9295 from gnecula:move_no_xla
PiperOrigin-RevId: 423788938

==
==================
58a00604;jax authors;2022-01-24 02:58:33 -0800;Merge pull request #9257 from gnecula:fix_poly_slice
PiperOrigin-RevId: 423766634

==
==================
ad4906f0;jax authors;2022-01-24 02:54:02 -0800;Merge pull request #9258 from gnecula:doc_donation
PiperOrigin-RevId: 423766629

==
==================
cb3fadce;George Necula;2022-01-24 10:06:22 +0100;[jax2tf] Move the no_xla_limitations documentation
Put it in the g3doc directory, along with the other pieces
of jax2tf documentation. This enables special documentation
features in the Google repo.

==

jax/experimental/jax2tf/README.md
jax/experimental/jax2tf/converters_eval/README.md
jax/experimental/jax2tf/g3doc/no_xla_limitations.md
==================
34ba42b5;George Necula;2022-01-20 13:25:35 +0200;[jax2tf] Improve shape polymorphism for scatter with CLIP mode
Fixes: #9231

==

jax/_src/lax/lax.py
jax/_src/lax/slicing.py
jax/experimental/jax2tf/tests/shape_poly_test.py
==================
83b818d4;George Necula;2022-01-20 14:56:27 +0200;Add more documentation for buffer donation
Fixes: #9237

==

docs/faq.rst
jax/_src/api.py
jax/experimental/maps.py
jax/experimental/pjit.py
jax/interpreters/mlir.py
jax/interpreters/xla.py
==================
b5dd8e2d;yashkatariya;2022-01-23 09:55:41 -0800;GSDA -> GDA

==

jax/experimental/global_device_array.py
==================
561f8218;yashkatariya;2022-01-22 10:01:11 -0800;Fix warnings

==

jax/experimental/global_device_array.py
==================
264142cd;yashkatariya;2022-01-22 09:54:46 -0800;Fix warnings

==

jax/experimental/global_device_array.py
==================
a3e7356c;yashkatariya;2022-01-21 16:37:04 -0800;Add a blank line

==

jax/experimental/global_device_array.py
==================
aa8cd778;yashkatariya;2022-01-21 15:58:03 -0800;Make line length equal

==

docs/jax.experimental.global_device_array.rst
==================
f6d329b2;jax authors;2022-01-21 15:40:07 -0800;Merge pull request #9239 from DanPuzzuoli:jax_expm
PiperOrigin-RevId: 423421529

==
==================
e1945877;yashkatariya;2022-01-21 14:43:52 -0800;whitespace changes

==

jax/experimental/global_device_array.py
==================
c0212d40;yashkatariya;2022-01-21 14:37:41 -0800;Add GDA to the API pages

==

docs/jax.experimental.global_device_array.rst
docs/jax.experimental.rst
jax/experimental/global_device_array.py
==================
d6ea8b28;jax authors;2022-01-21 11:37:45 -0800;Merge pull request #9276 from froystig:rbg-u8-u16
PiperOrigin-RevId: 423370053

==
==================
be489648;Roy Frostig;2022-01-20 22:20:17 -0800;generate bit widths other than 32 in `lax.rng_bit_generator`
Three parts:

* The underlying XLA operation (RngBitGenerator) doesn't support
  generating bit widths 8 and 16, so generate 32 bits and truncate in
  the translation rule.

* Canonicalize the dtype given to `rng_bit_generator` to avoid
  requests for U64s when x64 mode is off.

* Test the effect of this on PRNG implementations backed by
  `rng_bit_generator`. Namely, their `random_bits` method should now
  support all bit widths, and their keys can be used in samplers such
  as `random.uniform` and `random.randint` to generate 16-bit floats,
  and {8,16}-bit integers respectively.

==

jax/_src/lax/lax.py
tests/lax_test.py
tests/random_test.py
==================
31b53084;Jake Vanderplas;2022-01-21 08:27:10 -0800;Copybara import of the project:
--
4e9782b2da246b809a80a61abd97664145ad58e3 by Jake VanderPlas <jakevdp@google.com>:

Make array_copy a primitive

Co-authored-by: Matthew Johnson <mattjj@google.com>
COPYBARA_INTEGRATE_REVIEW=https://github.com/google/jax/pull/9264 from jakevdp:copy-primitive 4e9782b2da246b809a80a61abd97664145ad58e3
PiperOrigin-RevId: 423328684

==

jax/_src/lax/lax.py
jax/experimental/jax2tf/jax2tf.py
tests/lax_numpy_test.py
==================
9074ed48;jax authors;2022-01-20 22:30:57 -0800;Merge pull request #9246 from mattjj:vmap-tracer-origin-info
PiperOrigin-RevId: 423238525

==
==================
21ddd836;jax authors;2022-01-20 21:45:53 -0800;Merge pull request #8420 from Huizerd:dev/fwd
PiperOrigin-RevId: 423232626

==
==================
03df6575;jax authors;2022-01-20 21:39:29 -0800;Merge pull request #9268 from jakevdp:angle-deg
PiperOrigin-RevId: 423231128

==
==================
30c3a394;Roy Frostig;2022-01-16 11:41:32 -0800;introduce `custom_batching.sequential_vmap`
An anticipated common use of `custom_vmap` is in order to implement a
map via loop (i.e. to sequentially apply the mapped function), instead
of actually vectorizing.

==

jax/_src/custom_batching.py
jax/custom_batching.py
tests/api_test.py
==================
49445560;jax authors;2022-01-20 21:34:29 -0800;Merge pull request #9170 from antalszava:fix_id_tap_jit_example
PiperOrigin-RevId: 423231054

==
==================
04374c7d;jax authors;2022-01-20 12:33:52 -0800;Merge pull request #9267 from mattjj:djax-now-4
PiperOrigin-RevId: 423132805

==
==================
eac53028;Jake VanderPlas;2022-01-20 12:03:49 -0800;jnp.angle: support deg keyword

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
b55ba8af;Matthew Johnson;2022-01-20 11:05:50 -0800;re-enable tests of #8955
f35014d had to revert part of #8955 because of a surprising downstream
breakage (relying on internal APIs). That breakage was isolated to how
_inline_literals handled invars.

The approach was a temporary one anyway: it relied on the fact that we
expect only to bind axis size variables at the top level and hence if we
didn't rename the input binders in _inline_literals we wouldn't need to
substitute new variables for any variables appearing in types. But a
more general approach would be to perform the necessary substitution
everywhere; after all, we might be inlining a literal into an axis size!

This commit takes the more general approach. It may fix the downstream
breakage automatically, just by virtue of being different; if not, I'll
figure out how to fix downstream.

==

jax/interpreters/partial_eval.py
tests/core_test.py
==================
6032528b;Peter Hawkins;2022-01-20 10:01:27 -0800;Fix type annotation in pxla.py MeshComputation.from_hlo().
PiperOrigin-RevId: 423094564

==

jax/interpreters/pxla.py
==================
74e4db47;Peter Hawkins;2022-01-20 09:49:40 -0800;Change the default IR dialect returned by .compiler_ir() to MHLO.
PiperOrigin-RevId: 423091674

==

CHANGELOG.md
jax/_src/api.py
==================
d05431a1;Huizerd;2021-11-01 13:58:37 +0100;has_aux for jvp and forward-mode AD value_and_grad
Changes:
- revert value_and_grad_fwd
- add has_aux to jacfwd and jacrev
- tests

fix mypy error

==

jax/_src/api.py
tests/api_test.py
==================
2bebf507;jax authors;2022-01-19 21:05:16 -0800;Merge pull request #9254 from mattjj:checkpoint-xmap-error
PiperOrigin-RevId: 422974214

==
==================
ced2ae01;Matthew Johnson;2022-01-19 20:40:38 -0800;NotImplementedError for new_checkpoint-of-xmap
Previously this was getting a default behavior which caused surprising
errors downstream.

==

jax/_src/lax/control_flow.py
jax/experimental/maps.py
jax/interpreters/partial_eval.py
jax/interpreters/pxla.py
tests/xmap_test.py
==================
98e3b5f3;jax authors;2022-01-19 19:59:32 -0800;Merge pull request #9253 from mattjj:pjit-static-argnums
PiperOrigin-RevId: 422965311

==
==================
312a33e3;Roy Frostig;2022-01-19 19:41:24 -0800;[jax] completely truncate trivial filtered tracebacks [jaxlib] allow empty traceback overwrites
If an error is raised within JAX (under an API boundary frame), but prior to entering any user code, then all frames in between are JAX-internal. In this case, our filtered traceback ought to be trivial, i.e. empty of any frames at all.

Prior to this change, we did not handle this edge case consistently with the non-trivial case: any trivial filtered traceback was modified to comprise a single JAX-internal frame (namely, the inner-most one). With this change, the filtered traceback can be completely empty and result in omission of all JAX-internal frames.

Before:

```
Traceback (most recent call last):
  File "tb.py", line 10, in <module>
    jit(f)(A())
  File "jax/_src/api.py", line 2850, in _check_arg
    raise TypeError(f"Argument '{arg}' of type {type(arg)} is not a valid JAX type.")
TypeError: Argument ... is not a valid JAX type.
```

After:

```
Traceback (most recent call last):
  File "tb.py", line 10, in <module>
    jit(f)(A())
TypeError: Argument ... is not a valid JAX type.
```
PiperOrigin-RevId: 422962976

==

jax/_src/traceback_util.py
tests/errors_test.py
==================
bbaee9c5;Matthew Johnson;2022-01-19 18:44:31 -0800;pjit: add test for basic static_argnums

==

jax/experimental/pjit.py
tests/pjit_test.py
==================
7d747ad3;Yuanzhong Xu;2022-01-19 18:06:11 -0800;Set unspecified vmap dims partition to unconstrained
PiperOrigin-RevId: 422949080

==

jax/experimental/pjit.py
jax/interpreters/sharded_jit.py
tests/pjit_test.py
==================
04e67862;Yash Katariya;2022-01-19 16:17:11 -0800;Check the gda pjit mesh mismatch inside pjit and not during _shard_arg which is shared by pmap, xmap and pjit. For pmap, pjit mesh has nothing to do with it. So this error should not be raised.
PiperOrigin-RevId: 422929245

==

jax/experimental/global_device_array.py
jax/experimental/pjit.py
==================
1a47076b;Yash Katariya;2022-01-19 16:06:04 -0800;Simplify `gda_fast_path_args` by replacing local_idx_rid with global_indices_replica_id.
```
name                                                    old time/op             new time/op             delta
gda_construction_callback_(4, 2)_['x', 'y']             4.26ms ± 4%             4.18ms ± 3%  -1.86%        (p=0.011 n=17+17)
gda_construction_raw_(256, 8)_['x', 'y']                5.68ms ± 3%             5.57ms ± 3%    ~             (p=0.421 n=5+5)
indices_replica_id_calc_uncached_(256, 8)_['x', 'y']    2.89ms ± 4%             2.94ms ± 5%    ~             (p=0.222 n=5+5)
indices_replica_id_calc_cached_(256, 8)_['x', 'y']      28.2µs ± 1%             28.1µs ± 0%    ~             (p=0.690 n=5+5)
gda_construction_callback_(4, 2)_[None]                 30.5ms ± 9%             31.1ms ±18%    ~             (p=1.000 n=5+5)
gda_construction_raw_(256, 8)_[None]                    5.75ms ± 5%             5.38ms ± 4%  -6.58%          (p=0.016 n=5+5)
indices_replica_id_calc_uncached_(256, 8)_[None]        1.77ms ± 8%             1.75ms ± 2%    ~             (p=0.841 n=5+5)
indices_replica_id_calc_cached_(256, 8)_[None]          28.1µs ± 1%             28.1µs ± 1%    ~             (p=0.841 n=5+5)
gda_construction_callback_(4, 2)_['x']                  8.29ms ± 3%             8.14ms ± 3%    ~             (p=0.095 n=5+5)
gda_construction_raw_(256, 8)_['x']                     5.46ms ± 2%             5.23ms ± 3%  -4.23%          (p=0.008 n=5+5)
indices_replica_id_calc_uncached_(256, 8)_['x']         1.89ms ± 2%             1.90ms ± 2%    ~             (p=0.841 n=5+5)
indices_replica_id_calc_cached_(256, 8)_['x']           28.1µs ± 1%             28.1µs ± 0%    ~             (p=0.548 n=5+5)
gda_construction_callback_(4, 2)_['y']                  15.0ms ± 3%             14.8ms ± 3%    ~             (p=0.421 n=5+5)
gda_construction_raw_(256, 8)_['y']                     5.46ms ± 2%             5.14ms ± 4%  -5.97%          (p=0.008 n=5+5)
indices_replica_id_calc_uncached_(256, 8)_['y']         1.81ms ± 2%             1.81ms ± 2%    ~             (p=1.000 n=5+5)
indices_replica_id_calc_cached_(256, 8)_['y']           28.1µs ± 1%             28.1µs ± 1%    ~             (p=1.000 n=5+5)
gda_construction_callback_(4, 2)_[('x', 'y')]           4.11ms ± 3%             4.05ms ± 2%    ~            (p=0.113 n=9+10)
gda_construction_raw_(256, 8)_[('x', 'y')]              5.47ms ± 5%             5.14ms ± 3%  -6.12%          (p=0.032 n=5+5)
indices_replica_id_calc_uncached_(256, 8)_[('x', 'y')]  3.70ms ± 1%             3.59ms ± 1%  -3.01%          (p=0.016 n=4+5)
indices_replica_id_calc_cached_(256, 8)_[('x', 'y')]    28.4µs ± 4%             28.1µs ± 0%    ~             (p=0.421 n=5+5)
gda_construction_raw_(128, 8)_['x', 'y']                2.46ms ± 3%             2.25ms ± 1%  -8.76%          (p=0.008 n=5+5)
indices_replica_id_calc_uncached_(128, 8)_['x', 'y']    1.11ms ± 1%             1.11ms ± 1%    ~             (p=0.690 n=5+5)
indices_replica_id_calc_cached_(128, 8)_['x', 'y']      19.9µs ± 7%             19.6µs ± 1%    ~             (p=1.000 n=5+5)
gda_construction_raw_(4, 2)_['x', 'y']                  46.5µs ± 1%             43.5µs ± 1%  -6.54%          (p=0.008 n=5+5)
indices_replica_id_calc_uncached_(4, 2)_['x', 'y']       149µs ± 1%              149µs ± 2%    ~             (p=0.690 n=5+5)
indices_replica_id_calc_cached_(4, 2)_['x', 'y']        10.8µs ± 2%             10.8µs ± 1%    ~             (p=0.690 n=5+5)
gda_construction_raw_(16, 4)_['x', 'y']                  162µs ± 1%              152µs ± 1%  -6.39%          (p=0.008 n=5+5)
indices_replica_id_calc_uncached_(16, 4)_['x', 'y']      209µs ± 1%              208µs ± 1%    ~             (p=0.841 n=5+5)
indices_replica_id_calc_cached_(16, 4)_['x', 'y']       11.3µs ± 2%             11.3µs ± 1%    ~             (p=0.690 n=5+5)
gda_construction_raw_(16, 4)_[('x', 'y')]                162µs ± 1%              152µs ± 1%  -6.45%          (p=0.008 n=5+5)
indices_replica_id_calc_uncached_(16, 4)_[('x', 'y')]    209µs ± 1%              208µs ± 1%    ~             (p=0.421 n=5+5)
indices_replica_id_calc_cached_(16, 4)_[('x', 'y')]     11.3µs ± 2%             11.3µs ± 0%    ~             (p=0.690 n=5+5)
```

PiperOrigin-RevId: 422926727

==

jax/experimental/gda_serialization/serialization.py
jax/experimental/global_device_array.py
==================
a06ab27b;jax authors;2022-01-19 15:16:33 -0800;Merge pull request #9236 from mattjj:checkify-post-process-call
PiperOrigin-RevId: 422915580

==
==================
9488c5ae;Matthew Johnson;2022-01-18 22:22:57 -0800;checkify: fix and test post_process_call/map

==

jax/experimental/checkify.py
tests/checkify_test.py
==================
13ede5b2;Matthew Johnson;2022-01-19 11:43:02 -0800;add origin info to leaked tracer error
add origin info to vmap tracers (BatchTracer)

==

jax/core.py
jax/interpreters/batching.py
jax/interpreters/partial_eval.py
==================
3fef74b2;Peter Hawkins;2022-01-19 11:01:03 -0800;[JAX] Change signature of .mhlo() method on compiler IR objects to return an ir.Module object instead of its string representation.
It isn't free to pretty-print IR, so it's best to avoid it unless necessary. In addition, by returning an IR object, the user is now free to, say, print it with different options.

For example, one can now write things like:

```
In [1]: import numpy as np, jax, jax.numpy as jnp
In [2]: m = jax.jit(lambda x: x + jnp.array(np.arange(1000))).lower(7.).compiler_ir(dialect='mhlo')
In [3]: m.operation.print(large_elements_limit=10)
module @jit__lambda_.4 {
  func public @main(%arg0: tensor<f32>) -> tensor<1000xf32> {
    %0 = mhlo.constant opaque<"_", "0xDEADBEEF"> : tensor<1000xi32>
    %1 = "mhlo.convert"(%0) : (tensor<1000xi32>) -> tensor<1000xf32>
    %2 = "mhlo.broadcast_in_dim"(%arg0) {broadcast_dimensions = dense<> : tensor<0xi64>} : (tensor<f32>) -> tensor<1000xf32>
    %3 = mhlo.add %2, %1 : tensor<1000xf32>
    return %3 : tensor<1000xf32>
  }
}
```

Fixes https://github.com/google/jax/issues/9226

PiperOrigin-RevId: 422855649

==

CHANGELOG.md
jax/_src/dispatch.py
jax/interpreters/mlir.py
jax/interpreters/pxla.py
tests/api_test.py
tests/pjit_test.py
==================
e152000c;jax authors;2022-01-19 11:00:00 -0800;Merge pull request #9245 from mattjj:issue9244
PiperOrigin-RevId: 422855209

==
==================
726f60f6;Matthew Johnson;2022-01-19 10:24:09 -0800;remove cpu platform setting in quickstart
fixes #9244

==

docs/notebooks/quickstart.ipynb
docs/notebooks/quickstart.md
==================
2d2ac12a;DanPuzzuoli;2022-01-19 10:02:06 -0800;switching to use jnp.digitize for index identification

==

jax/_src/scipy/linalg.py
==================
98b5b3a2;jax authors;2022-01-19 09:46:28 -0800;Merge pull request #9228 from mattjj:cache-partial-eval-jaxpr
PiperOrigin-RevId: 422836999

==
==================
eddea68a;jax authors;2022-01-18 16:41:24 -0800;Merge pull request #9210 from froystig:custom-vmap-abstract-eval-and-translate
PiperOrigin-RevId: 422677698

==
==================
cbb2f7ba;DanPuzzuoli;2022-01-18 16:28:36 -0800;changed to use argwhere

==

jax/_src/scipy/linalg.py
==================
a855890d;Roy Frostig;2022-01-14 16:52:43 -0800;custom vmap: abstract eval and translation rules
Also fix and test a tree-flattening bug in the custom_vmap batching
rule.

==

jax/_src/custom_batching.py
jax/experimental/jax2tf/jax2tf.py
tests/api_test.py
==================
9d43ccaf;DanPuzzuoli;2022-01-18 14:17:17 -0800;converting to use switch

==

jax/_src/scipy/linalg.py
==================
7f192c19;Yash Katariya;2022-01-18 13:49:18 -0800;Cache the expensive computations in GDA. For example `get_shard_indices_replica_ids` can be the same for multiple variables in a neural network (global_shape, mesh_axes and global_mesh) can be the same
Note that the first time will be a little slow. The below timings you are seeing shows the caching working because the benchmark is running for multiple iterations and then the time is averaged over the number of iterations.

```
name                                                     time/op
gda_construction_callback_(4, 2)_['x', 'y']              4.50ms ±10%
gda_construction_raw_(256, 8)_['x', 'y']                 5.82ms ± 2%
indices_replica_id_calc__uncached_(256, 8)_['x', 'y']    2.95ms ± 6%
indices_replica_id_calc_cached_(256, 8)_['x', 'y']       28.7µs ± 1%
gda_construction_callback_(4, 2)_[None]                  31.9ms ±20%
gda_construction_raw_(256, 8)_[None]                     5.85ms ± 5%
indices_replica_id_calc__uncached_(256, 8)_[None]        1.75ms ± 1%
indices_replica_id_calc_cached_(256, 8)_[None]           29.0µs ± 4%
gda_construction_callback_(4, 2)_['x']                   8.40ms ± 4%
gda_construction_raw_(256, 8)_['x']                      5.48ms ± 2%
indices_replica_id_calc__uncached_(256, 8)_['x']         1.89ms ± 1%
indices_replica_id_calc_cached_(256, 8)_['x']            29.0µs ± 4%
gda_construction_callback_(4, 2)_['y']                   15.3ms ± 6%
gda_construction_raw_(256, 8)_['y']                      5.66ms ± 5%
indices_replica_id_calc__uncached_(256, 8)_['y']         1.82ms ± 2%
indices_replica_id_calc_cached_(256, 8)_['y']            29.4µs ± 3%
gda_construction_callback_(4, 2)_[('x', 'y')]            4.29ms ± 5%
gda_construction_raw_(256, 8)_[('x', 'y')]               5.61ms ± 7%
indices_replica_id_calc__uncached_(256, 8)_[('x', 'y')]  3.81ms ±10%
indices_replica_id_calc_cached_(256, 8)_[('x', 'y')]     29.0µs ± 5%
gda_construction_raw_(128, 8)_['x', 'y']                 2.42ms ± 1%
indices_replica_id_calc__uncached_(128, 8)_['x', 'y']    1.14ms ±11%
indices_replica_id_calc_cached_(128, 8)_['x', 'y']       19.9µs ± 1%
gda_construction_raw_(4, 2)_['x', 'y']                   46.7µs ± 0%
indices_replica_id_calc__uncached_(4, 2)_['x', 'y']       153µs ± 4%
indices_replica_id_calc_cached_(4, 2)_['x', 'y']         11.1µs ± 8%
gda_construction_raw_(16, 4)_['x', 'y']                   164µs ± 2%
indices_replica_id_calc__uncached_(16, 4)_['x', 'y']      212µs ± 3%
indices_replica_id_calc_cached_(16, 4)_['x', 'y']        11.3µs ± 1%
gda_construction_raw_(16, 4)_[('x', 'y')]                 163µs ± 2%
indices_replica_id_calc__uncached_(16, 4)_[('x', 'y')]    210µs ± 2%
indices_replica_id_calc_cached_(16, 4)_[('x', 'y')]      11.6µs ± 8%
```

PiperOrigin-RevId: 422639127

==

benchmarks/gda_benchmark.py
jax/experimental/global_device_array.py
==================
6e35d55c;jax authors;2022-01-18 13:49:11 -0800;Merge pull request #9230 from NeilGirdhar:fix_annotation
PiperOrigin-RevId: 422638932

==
==================
329de7c9;Peter Hawkins;2022-01-18 13:23:42 -0800;Only use config.x64_enabled as the memo cache key for canonicalize_dtype, not any other fields.
This saves the time to repeatedly build a tuple as a cache key. Reduces the time for CustomLinearSolveTest.test_custom_linear_solve_pytree on my workstation from 110s to 85s.

PiperOrigin-RevId: 422632700

==

jax/_src/dtypes.py
==================
80dba64c;jax authors;2022-01-18 13:04:50 -0800;Merge pull request #9179 from allenlavoie:main
PiperOrigin-RevId: 422628545

==
==================
ad4b9f49;jax authors;2022-01-18 12:35:34 -0800;Merge pull request #9094 from jakevdp:fix-update-slice
PiperOrigin-RevId: 422620656

==
==================
edf6efc2;jax authors;2022-01-18 12:30:38 -0800;Merge pull request #9209 from jakevdp:bcoo-sort-indices
PiperOrigin-RevId: 422620648

==
==================
b424d40c;Neil Girdhar;2022-01-18 15:12:20 -0500;Correct lax.while_loop type annotation

==

jax/_src/lax/control_flow.py
==================
e9f89d47;jax authors;2022-01-18 11:45:06 -0800;Merge pull request #9227 from mattjj:update-pypi
PiperOrigin-RevId: 422609723

==
==================
0066533d;Matthew Johnson;2022-01-18 11:38:32 -0800;update version and changelog for pypi

==

CHANGELOG.md
jax/version.py
==================
dc484bf4;Matthew Johnson;2022-01-18 11:24:44 -0800;Copybara import of the project:
--
06deb73c9be01cedc000efe7b3eb72d68615471a by Matthew Johnson <mattjj@google.com>:

cache initial-style jaxpr transformations

COPYBARA_INTEGRATE_REVIEW=https://github.com/google/jax/pull/9196 from mattjj:issue3847 06deb73c9be01cedc000efe7b3eb72d68615471a
PiperOrigin-RevId: 422604879

==

jax/interpreters/ad.py
jax/interpreters/batching.py
==================
5884c1f2;Matthew Johnson;2022-01-18 11:17:48 -0800;add caching to partial_eval_jaxpr
follow-up to #9196

==

jax/interpreters/partial_eval.py
==================
4c423c36;Peter Hawkins;2022-01-18 10:41:43 -0800;Speed up check_jaxpr().
(check_jaxpr() is only used when debugging.)

Don't eagerly pretty print jaxprs: only do so if we are going to raise an error.
Don't eagerly form error messages. Delete typecheck_assert.

PiperOrigin-RevId: 422594126

==

jax/_src/lax/control_flow.py
jax/core.py
jax/experimental/maps.py
==================
e30b96cf;jax authors;2022-01-18 10:24:20 -0800;Merge pull request #9201 from LenaMartens:changelist/420794552
PiperOrigin-RevId: 422589737

==
==================
255d4b1b;Jake VanderPlas;2022-01-18 10:13:09 -0800;jax2tf: disable shape_poly_test for dynamic_update_slice

==

jax/experimental/jax2tf/tests/shape_poly_test.py
==================
4832f099;Jake VanderPlas;2022-01-04 12:39:31 -0800;lax.dynamic_update_slice: fix batching rule

==

jax/_src/lax/slicing.py
tests/lax_test.py
==================
8ea85769;Lena Martens;2022-01-10 18:21:41 +0000;Checkify: add way to disable categories of errors.
By default only user_asserts are lifted into the checked function.

==

jax/experimental/checkify.py
tests/checkify_test.py
==================
16d6c4d0;Jake VanderPlas;2022-01-18 09:59:26 -0800;[sparse] add bcoo_sort_indices

==

jax/experimental/sparse/bcoo.py
tests/sparse_test.py
==================
6411f8a0;jax authors;2022-01-16 23:57:40 -0800;Merge pull request #9184 from jakevdp:unique-nan
PiperOrigin-RevId: 422287302

==
==================
bebe9845;jax authors;2022-01-15 02:46:56 -0800;Merge pull request #9205 from jakevdp:einsum-tuple
PiperOrigin-RevId: 422013671

==
==================
b92db58e;Yash Katariya;2022-01-14 14:51:57 -0800;Canonicalize parsed partition spec before passing to lower_mesh_computation. Creates a new data structure `CanonicalizedParsedPartitionSpec` which strips empty tuples from the end of parsed partitions to canonicalize the specs so that `P(None)` and `None` for example in in_axis_resources are equivalent.
I have been bit by this 3 times and its about time I fix this. This also fixes a bug where fully replicated values are allowed with non-contiguous meshes (in this case P(None) and None) were not equal.

PiperOrigin-RevId: 421918164

==

jax/experimental/pjit.py
tests/pjit_test.py
==================
b509aae2;Peter Hawkins;2022-01-14 13:35:54 -0800;Split lax_control_flow_test into three separate tests.
Split the custom root and custom linear solve tests into separate test files.

Disable two slow custom linear solve tests.
Add a few jit decorators to slow tests in lax_control_flow_test.

PiperOrigin-RevId: 421901487

==

tests/custom_linear_solve_test.py
tests/custom_root_test.py
tests/lax_control_flow_test.py
==================
c9169fa0;jax authors;2022-01-14 11:35:16 -0800;Merge pull request #9189 from gnecula:tf_reduce_window
PiperOrigin-RevId: 421875035

==
==================
77d60cf4;Jake VanderPlas;2022-01-14 11:08:13 -0800;einsum: clarify use of precision.

==

jax/_src/numpy/lax_numpy.py
==================
7f07f1b8;jax authors;2022-01-14 09:30:24 -0800;Merge pull request #9200 from google:LenaMartens-patch-1
PiperOrigin-RevId: 421845558

==
==================
f591d0b2;Lena Martens;2022-01-14 11:18:40 +0000;Add ensure_compile_time_eval docstring to docs

==

docs/jax.rst
==================
06deb73c;Matthew Johnson;2022-01-13 21:01:41 -0800;cache initial-style jaxpr transformations

==

jax/interpreters/ad.py
jax/interpreters/batching.py
==================
bd157cf0;Jake VanderPlas;2022-01-13 15:54:07 -0800;jnp.unique: properly handle NaN values

==

CHANGELOG.md
jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
3b374e7d;jax authors;2022-01-13 15:25:41 -0800;Merge pull request #9127 from jakevdp:searchsorted-complex
PiperOrigin-RevId: 421672606

==
==================
8ca10ea5;Jake VanderPlas;2022-01-13 13:45:59 -0800;searchsorted: use correct ordering for complex inputs

==

jax/_src/lax/lax.py
jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
cd73a419;jax authors;2022-01-13 13:33:02 -0800;Merge pull request #9178 from jakevdp:sort-corner-cases
PiperOrigin-RevId: 421646783

==
==================
d8bdd9a1;Jake VanderPlas;2022-01-13 13:03:41 -0800;lax.sort: regularize handling of -0.0 and -NaN

==

CHANGELOG.md
jax/_src/lax/lax.py
tests/lax_numpy_test.py
tests/lax_test.py
==================
0532a632;Yash Katariya;2022-01-13 11:52:44 -0800;Optimizations for GDA to make creating GDA faster.
* Use math to figure out the replica id. Using `_hashed_index` (note that this is a function and not `_HashableIndex` which is a class which does not exist anymore) is 1.5 - 2 times slower than using math. markdaoust@ helped with the math here (going to office has its own perks :) )

* Get rid of `_HashableIndex` class and replace it with a function `_hashed_index`. Dataclass is extremely slow.

* Only calculate global_mesh.local_devices once. Even though its a cached property (but its after python 3.8)

```
name                                           old time/op             new time/op             delta
gda_construction_callback_(4, 2)_['x', 'y']    4.77ms ± 5%             4.74ms ± 5%     ~           (p=0.316 n=14+17)
gda_construction_raw_(256, 8)_['x', 'y']       17.9ms ± 5%              9.0ms ± 2%  -49.92%          (p=0.008 n=5+5)
indices_replica_id_calc_(256, 8)_['x', 'y']    11.4ms ± 2%              2.9ms ± 2%  -74.52%          (p=0.008 n=5+5)
gda_construction_callback_(4, 2)_[None]        34.0ms ±20%             30.5ms ± 2%     ~             (p=0.413 n=5+4)
gda_construction_raw_(256, 8)_[None]           15.9ms ± 2%              7.7ms ± 3%  -51.56%          (p=0.008 n=5+5)
indices_replica_id_calc_(256, 8)_[None]        9.39ms ± 3%             1.74ms ± 2%  -81.44%          (p=0.008 n=5+5)
gda_construction_callback_(4, 2)_['x']         8.87ms ± 2%             8.92ms ± 3%     ~             (p=0.841 n=5+5)
gda_construction_raw_(256, 8)_['x']            16.4ms ± 2%              7.7ms ± 1%  -52.66%          (p=0.008 n=5+5)
indices_replica_id_calc_(256, 8)_['x']         9.85ms ± 1%             1.90ms ± 2%  -80.68%          (p=0.008 n=5+5)
gda_construction_callback_(4, 2)_['y']         15.9ms ± 3%             16.0ms ± 5%     ~             (p=0.690 n=5+5)
gda_construction_raw_(256, 8)_['y']            15.8ms ± 3%              7.6ms ± 1%  -52.04%          (p=0.008 n=5+5)
indices_replica_id_calc_(256, 8)_['y']         9.29ms ± 1%             1.78ms ± 1%  -80.79%          (p=0.008 n=5+5)
gda_construction_callback_(4, 2)_[('x', 'y')]  4.65ms ± 2%             4.62ms ± 3%     ~            (p=0.440 n=5+10)
gda_construction_raw_(256, 8)_[('x', 'y')]     18.6ms ± 3%              9.7ms ± 5%  -47.76%          (p=0.008 n=5+5)
indices_replica_id_calc_(256, 8)_[('x', 'y')]  11.8ms ± 4%              3.5ms ± 2%  -70.28%          (p=0.008 n=5+5)
gda_construction_raw_(128, 8)_['x', 'y']       8.54ms ± 1%             4.03ms ± 2%  -52.84%          (p=0.008 n=5+5)
indices_replica_id_calc_(128, 8)_['x', 'y']    5.40ms ± 4%             1.10ms ± 1%  -79.69%          (p=0.008 n=5+5)
gda_construction_raw_(4, 2)_['x', 'y']          173µs ± 1%              193µs ± 3%  +11.63%          (p=0.008 n=5+5)
indices_replica_id_calc_(4, 2)_['x', 'y']       127µs ± 1%              147µs ± 1%  +15.57%          (p=0.008 n=5+5)
```

PiperOrigin-RevId: 421623147

==

benchmarks/gda_benchmark.py
jax/experimental/global_device_array.py
tests/global_device_array_test.py
==================
2e4687a6;Yuanzhong Xu;2022-01-13 10:34:45 -0800;PartitionSpec: allow partially specified sharding
PiperOrigin-RevId: 421603194

==

jax/experimental/maps.py
jax/experimental/pjit.py
jax/interpreters/mlir.py
jax/interpreters/sharded_jit.py
jax/interpreters/xla.py
tests/pjit_test.py
==================
5bfe1852;George Necula;2022-01-13 12:28:25 +0200;[jax2tf] Add jax2tf_associative_scan_reductions flag
This flag allows users to match the JAX performance for
associative reductions in CPU.
See README.md for details.

==

CHANGELOG.md
jax/__init__.py
jax/_src/config.py
jax/experimental/jax2tf/README.md
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/jax2tf_limitations.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
f0e4f047;jax authors;2022-01-12 19:48:04 -0800;Merge pull request #9186 from froystig:get-default-rng
PiperOrigin-RevId: 421454645

==
==================
026b91b8;Roy Frostig;2022-01-12 19:13:14 -0800;add `random.default_prng_impl` to retrieve the default PRNG implementation

==

jax/_src/random.py
jax/random.py
tests/random_test.py
==================
436ce790;jax authors;2022-01-12 19:11:22 -0800;Merge pull request #9175 from froystig:custom-xform-wrappers-forward-attrs
PiperOrigin-RevId: 421449851

==
==================
f08bb50b;jax authors;2022-01-12 15:07:47 -0800;Merge pull request #8869 from mbmccoy:issue8744
PiperOrigin-RevId: 421404424

==
==================
dbf03d2e;Peter Hawkins;2022-01-12 14:27:17 -0800;[JAX] Add support for generating "equation profiles" in JAX.
An "equation profile" is a pprof profile that maps equations in a jaxpr to the Python stack traces at which they were generated. Pprof can be used a number of ways to analyze and visualize the result.

For example, for a profile from a Resnet-50 training step from Flax, we can identify the most common primitives:
```
$ pprof --tags /tmp/myprof
Main binary filename not available.
 primitive: Total 6062.0
            1509.0 (24.89%): mul
             936.0 (15.44%): add
             589.0 ( 9.72%): reshape
             492.0 ( 8.12%): div
             485.0 ( 8.00%): broadcast_in_dim
             330.0 ( 5.44%): reduce_sum
             322.0 ( 5.31%): integer_pow
             230.0 ( 3.79%): add_any
             174.0 ( 2.87%): convert_element_type
             160.0 ( 2.64%): select
             158.0 ( 2.61%): conv_general_dilated
             116.0 ( 1.91%): sub
             110.0 ( 1.81%): eq
             110.0 ( 1.81%): neg
             104.0 ( 1.72%): max
              53.0 ( 0.87%): rsqrt
              52.0 ( 0.86%): rev
              49.0 ( 0.81%): custom_jvp_call_jaxpr
              49.0 ( 0.81%): gt
               5.0 (0.082%): xla_call
               4.0 (0.066%): min
               3.0 (0.049%): dot_general
               3.0 (0.049%): lt
               2.0 (0.033%): cos
               2.0 (0.033%): exp
               2.0 (0.033%): iota
               2.0 (0.033%): log
               2.0 (0.033%): psum
               2.0 (0.033%): reduce_max
               2.0 (0.033%): stop_gradient
               1.0 (0.016%): argmax
               1.0 (0.016%): reduce_window_max
               1.0 (0.016%): select_and_scatter_add
               1.0 (0.016%): transpose
               1.0 (0.016%): xla_pmap
```

Or the lines of code that generated the most equations:
```
$ pprof  --text /tmp/myprof
Main binary filename not available.
Type: equations
Showing nodes accounting for 6038, 99.60% of 6062 total
Dropped 5 nodes (cum <= 30)
      flat  flat%   sum%        cum   cum%
      1537 25.35% 25.35%       1537 25.35%  _compute_stats
      1484 24.48% 49.84%       1484 24.48%  _normalize
       849 14.01% 63.84%       6062   100%  __call__
       644 10.62% 74.46%        644 10.62%  <unknown>
       483  7.97% 82.43%        483  7.97%  <unknown>
       392  6.47% 88.90%       6061   100%  train_step
       324  5.34% 94.24%        324  5.34%  <unknown>
       161  2.66% 96.90%        161  2.66%  <unknown>
        57  0.94% 97.84%       4292 70.80%  loss_fn
        52  0.86% 98.70%         52  0.86%  schedule
        39  0.64% 99.34%         39  0.64%  softmax_cross_entropy
         8  0.13% 99.47%         30  0.49%  compute_metrics
         6 0.099% 99.57%         61  1.01%  cross_entropy_loss
         1 0.016% 99.59%       1321 21.79%  apply_gradients
         1 0.016% 99.60%       6062   100%  train_and_evaluate
         0     0% 99.60%       6062   100%  <unknown>
         0     0% 99.60%       6062   100%  __init__
         0     0% 99.60%       3872 63.87%  _call_wrapped_method
         0     0% 99.60%       6062   100%  _run_and_get_tests_result
         0     0% 99.60%       6062   100%  _run_code_in_main
         0     0% 99.60%       6062   100%  _run_in_app
         0     0% 99.60%       6062   100%  _run_main
         0     0% 99.60%       3872 63.87%  apply
         0     0% 99.60%        161  2.66%  apply_updates
         0     0% 99.60%       6062   100%  main
         0     0% 99.60%       6062   100%  main_function
         0     0% 99.60%       6062   100%  run
         0     0% 99.60%       6062   100%  runTests
         0     0% 99.60%       6062   100%  run_filename_as_main
         0     0% 99.60%       6062   100%  run_tests
         0     0% 99.60%       3872 63.87%  scope_fn
         0     0% 99.60%       6062   100%  test_train_and_evaluate
         0     0% 99.60%       1159 19.12%  update_fn
         0     0% 99.60%       3872 63.87%  wrapped_fn
         0     0% 99.60%       3872 63.87%  wrapped_module_method
         0     0% 99.60%       3872 63.87%  wrapper
```

I highly recommend the pprof HTTP visualization, using --tagleaf to introduce pseudoframes for each primitive, and to use the "flame" visualization.
```
pprof --tagleaf=primitive --http=:8080 myprof
```

[XLA:Python] Add helpers to Traceback and for working with pprof profiles.

* Define hash and equality operators on Tracebacks.
* Add functions for converting JSON to and from pprof profile protocol buffers.
* Add a helper method that exposes PyCode_Addr2Line to Python.

PiperOrigin-RevId: 421395346

==

jax/_src/lib/__init__.py
jax/_src/source_info_util.py
jax/jaxpr_util.py
tests/jaxpr_util_test.py
==================
2e5ab116;Mike McCoy;2021-12-07 01:26:23 +0000;Resolves issue 8744

==

docs/notebooks/Custom_derivative_rules_for_Python_code.ipynb
docs/notebooks/Custom_derivative_rules_for_Python_code.md
jax/_src/lax/control_flow.py
tests/lax_control_flow_test.py
==================
65ecea71;Allen Lavoie;2022-01-12 15:26:55 -0500;Remove trailing whitespace

==

jax/experimental/jax2tf/tests/jax2tf_test.py
==================
bd061e6e;Allen Lavoie;2022-01-12 14:54:41 -0500;Fix tf backprop through bfloat16 jax2tf

==

jax/experimental/jax2tf/jax2tf.py
==================
ad85eab6;Allen Lavoie;2022-01-12 14:52:40 -0500;Add a jax2tf bfloat16 backprop test

==

jax/experimental/jax2tf/tests/jax2tf_test.py
==================
2e375f04;jax authors;2022-01-12 08:57:53 -0800;Merge pull request #8915 from mattjj:post-process-revisions
PiperOrigin-RevId: 421311438

==
==================
08aec823;Matthew Johnson;2021-12-11 14:07:30 -0800;fix a custom_vjp post_process bug, related cleanups
related to #8783, doesn't completely fix it

==

jax/_src/custom_derivatives.py
jax/core.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/maps.py
jax/interpreters/ad.py
jax/interpreters/batching.py
jax/interpreters/partial_eval.py
tests/api_test.py
==================
ddc1c3e9;Roy Frostig;2022-01-10 20:18:57 -0800;enable custom transformation "stacking"
Make custom transformation wrappers such as `custom_jvp` behave
interchangeably when directly composed. For example, enable the
following usage:

```
@jax.custom_jvp
@jax.custom_transpose
def f(x): ...

@f.def_transpose
def f_t(y): ...

@f.defjvp
def f_jvp(x, tx): ...
```

In particular:

* Forward `def*` methods on custom transformations.

* Have unary `def*` methods return their argument so that, when used
  as decorators, they do not replace their target with `None`.

* Fix a bug in the use of `functools.update_wrapper`: previously a
  wrapper would overwrite its own attributes with those of the target
  callable (including its reference to the target callable).

==

jax/_src/custom_api_util.py
jax/_src/custom_batching.py
jax/_src/custom_derivatives.py
jax/_src/custom_transpose.py
tests/api_test.py
==================
4dd1f001;jax authors;2022-01-11 16:34:20 -0800;Merge pull request #9162 from mattjj:simplify-memoize
PiperOrigin-RevId: 421154196

==
==================
fbb8b9f8;Yash Katariya;2022-01-11 15:42:31 -0800;Benchmarks for GDA. Also move `create_global_mesh` to test_utils since it was replicated in a lot of places.
PiperOrigin-RevId: 421142813

==

benchmarks/gda_benchmark.py
jax/_src/test_util.py
tests/global_device_array_test.py
tests/pjit_test.py
==================
f235edbf;jax authors;2022-01-11 14:00:45 -0800;Merge pull request #9134 from froystig:custom-transpose
PiperOrigin-RevId: 421119056

==
==================
1709e068;Roy Frostig;2022-01-07 14:33:58 -0800;introduce custom_transpose and a corresponding primitive
Includes rules for impl, transpose, abstract eval, and xla/mlir
translation.

==

jax/_src/api.py
jax/_src/custom_transpose.py
jax/custom_transpose.py
jax/experimental/jax2tf/jax2tf.py
tests/api_test.py
==================
a30ec029;jax authors;2022-01-11 12:36:31 -0800;Merge pull request #9164 from mattjj:checkify-tweaks
PiperOrigin-RevId: 421098252

==
==================
d3ed24f9;Antal Szava;2022-01-11 10:43:26 -0500;fix id_tap jit example

==

jax/experimental/host_callback.py
==================
6850833c;Matthew Johnson;2022-01-10 21:29:12 -0800;checkify: tweak some organization and names

==

jax/experimental/checkify.py
==================
1cf7d4ab;Matthew Johnson;2022-01-10 20:57:56 -0800;Copybara import of the project:
--
4fcdadbfb3f4c484fd4432203cf13b88782b9311 by Matthew Johnson <mattjj@google.com>:

add jax.ensure_compile_time_eval to public api

aka jax.core.eval_context

COPYBARA_INTEGRATE_REVIEW=https://github.com/google/jax/pull/7987 from google:issue7535 4fcdadbfb3f4c484fd4432203cf13b88782b9311
PiperOrigin-RevId: 420928687

==

CHANGELOG.md
docs/jax.rst
jax/__init__.py
jax/core.py
==================
7bc51879;Yash Katariya;2022-01-10 16:23:59 -0800;Add tests for 0d fully replicated scalar input to pjit.
PiperOrigin-RevId: 420884601

==

tests/pjit_test.py
==================
67723da3;jax authors;2022-01-10 15:09:04 -0800;Merge pull request #9143 from mattjj:fix-jaxpr-checking-error-messages
PiperOrigin-RevId: 420866862

==
==================
9bc6d110;Peter Hawkins;2022-01-10 14:35:02 -0800;[JAX] Fix spurious inequality for two apparently equal PyTreeDefs.
When constructed via one path we were filling in the .custom field of nodes that weren't custom types.

Fixes https://github.com/google/jax/issues/9066

PiperOrigin-RevId: 420858917

==

tests/tree_util_test.py
==================
e3219642;Matthew Johnson;2022-01-10 14:28:28 -0800;de-duplicate util.memoize and util.cache
The only difference between the two was that
jax.config.jax_check_tracer_leaks disables the caching under util.cache
but not under util.memoize.

We could add that as an option on the same function if it turns out to
be important, but it seems unnecessary. Moreover there are only two
callers (in dtypes.py and in batching.py).

Co-authored-by: Skye Wanderman-Milne <skyewm@google.com>

==

jax/_src/util.py
==================
e5e343c1;Yash Katariya;2022-01-10 14:19:59 -0800;Speed up deserialization by not doing the shard indices calculation twice. This calculation is expensive because it happens on the global mesh size scale.
PiperOrigin-RevId: 420855444

==

jax/experimental/gda_serialization/serialization.py
==================
93b45541;Yash Katariya;2022-01-10 14:19:08 -0800;Do shard indices calculations only once in callbacks by using GDA fast path because indices calculation is expensive as it happens on the global mesh (if the global mesh is large). The second calculation happens in _create_local_shards which is avoided if GDA fast path is enabled.
PiperOrigin-RevId: 420855232

==

jax/experimental/global_device_array.py
==================
f7de16c8;Peter Hawkins;2022-01-10 14:16:35 -0800;Disable a pjit test that is failing on GPU.
PiperOrigin-RevId: 420854561

==

tests/pjit_test.py
==================
a41d3e28;jax authors;2022-01-10 09:51:23 -0800;Merge pull request #9123 from prazek:patch-1
PiperOrigin-RevId: 420783231

==
==================
0e940b66;Peter Hawkins;2022-01-10 09:38:40 -0800;Fix spurious "donated buffers were not usable" warning when using MLIR.
PiperOrigin-RevId: 420782796

==

jax/interpreters/mlir.py
==================
977e142d;jax authors;2022-01-10 09:42:36 -0800;Merge pull request #9154 from che-shr-cat:patch-1
PiperOrigin-RevId: 420782381

==
==================
8016026a;jax authors;2022-01-10 09:37:48 -0800;Merge pull request #9128 from jakevdp:bcoo-metadata
PiperOrigin-RevId: 420782354

==
==================
5801079a;Peter Hawkins;2022-01-10 07:25:46 -0800;Enable JAX->MLIR lowering by default.
Before this change, JAX produces HLO using the XLA:Python builder APIs. After this change JAX produces MHLO using MLIR:Python APIs, and converts the MHLO to HLO for compilation with XLA. This is a lateral shift that should have little immediate impact, but unlocks a number of interesting opportunities in the future (e.g., mixing MLIR dialects within a JAX program).

[XLA:Python] Pass MLIR input as a std::string to work around https://github.com/pybind/pybind11/issues/2765. A better fix would be to update pybind11 but that is hitting Windows-related hurdles; for now, just avoid relying on reference lifetime extension.

Brax: update test seeds to avoid test failures. Additional constant folding (canonicalization) in the MHLO lowering path seems to cause small numerical differences.
PiperOrigin-RevId: 420755696

==

jax/_src/config.py
jax/_src/lib/__init__.py
==================
cdeced94;jax authors;2022-01-10 06:41:31 -0800;Merge pull request #9113 from che-shr-cat:main
PiperOrigin-RevId: 420747734

==
==================
d2c6c065;che-shr-cat;2022-01-10 17:34:09 +0300;Fix DeviceArray class reference

==

docs/glossary.rst
==================
78977d6f;che-shr-cat;2022-01-10 16:19:57 +0300;fix broken links and update texts in thinking_in_jax.ipynb

==

docs/notebooks/thinking_in_jax.ipynb
docs/notebooks/thinking_in_jax.md
==================
ac5f1c4b;jax authors;2022-01-10 03:25:27 -0800;Merge pull request #9126 from LenaMartens:changelist/418004472
PiperOrigin-RevId: 420716471

==
==================
3548e023;Matthew Johnson;2022-01-08 22:10:18 -0800;fix jaxpr type checking error messages
The pretty-printing changes a few months ago defined variable names
based on the state in JaxprPpContext instances. But that meant incorrect
variable names could be printed in jaxpr type checking error messages.

This commit correctly threads through the context so as to provide
error messages with coherent variable names.

==

jax/core.py
jax/experimental/maps.py
tests/core_test.py
==================
572d2517;jax authors;2022-01-09 20:07:00 -0800;Merge pull request #9142 from mattjj:issue9034
PiperOrigin-RevId: 420660162

==
==================
4a17c786;Sandeep Dasgupta;2022-01-08 23:36:50 -0800;[mhlo] Remove tuples from mhlo If/Case op.
PiperOrigin-RevId: 420554920

==

jax/_src/lax/control_flow.py
==================
73b530ae;Matthew Johnson;2022-01-08 22:45:24 -0800;Rolling forward again...
PiperOrigin-RevId: 420551242

==

jax/core.py
jax/experimental/maps.py
jax/interpreters/ad.py
tests/core_test.py
==================
c335dfcc;jax authors;2022-01-08 22:08:08 -0800;Re-applying #9136 after it was rolled back.
PiperOrigin-RevId: 420548165

==

jax/core.py
jax/experimental/maps.py
jax/interpreters/ad.py
tests/core_test.py
==================
b0dabab9;Matthew Johnson;2022-01-08 21:39:10 -0800;Re-applying #9136 after it was rolled back.
PiperOrigin-RevId: 420545623

==

jax/core.py
jax/experimental/maps.py
jax/interpreters/ad.py
tests/core_test.py
==================
933971db;Yash Katariya;2022-01-08 17:06:05 -0800;Fix the index for fully replicated values. Each dimension of the aval should have an index. For example, if an aval has a shape (4, 4) then each dimension of the aval maybe sharded or replicated. Hence each dimension will have an index associated with it. For fully replicated avals, the dimensions are always replicated hence index is always `slice(None)`.
PiperOrigin-RevId: 420524929

==

jax/interpreters/pxla.py
tests/pjit_test.py
==================
15e6098b;Matthew Johnson;2022-01-08 12:57:28 -0800;add JAX_BACKEND_TARGET env var, fixes #9034

==

jax/_src/lib/xla_bridge.py
==================
0e201425;jax authors;2022-01-07 23:27:07 -0800;Internal change
PiperOrigin-RevId: 420436636

==

jax/core.py
jax/experimental/maps.py
jax/interpreters/ad.py
tests/core_test.py
==================
015cea5e;jax authors;2022-01-07 22:31:16 -0800;Merge pull request #9136 from mattjj:simplify-jaxpreqn-params-to-bind-params-mapping
PiperOrigin-RevId: 420432503

==
==================
c3b1d0df;Matthew Johnson;2022-01-07 17:23:59 -0800;simpler jaxpr eqn params to bind params conversion
Final-style higher-order primitives, like call_p, xla_call_p (underlying
jit), xla_pmap_p (underlying pmap), and xmap_p (underlying xmap) have
slightly different bind signatures (while tracing) from their signatures
when they appear in jaxprs. In particular, their trace-time binds are
parameterized by a Python callable (or really a lu.WrappedFun)
representing the function to be applied, while in jaxpr eqns they are
parameterized by a jaxpr representing the same.

As a result, to round-trip from jaxpr to Python traceable, in
core.eval_jaxpr we have to convert from one parameter signature to the
other. (Basically we had to take the jaxpr and turn it into a Python
callable, via lu.wrap_init(partial(core.eval_jaxpr, call_jaxpr, ...)).)

However due to historical path dependence these conversion mechanisms
were all slightly distinct and kind of a mess. There was a case analysis
for call_jaxpr and map_jaxpr in core.eval_jaxpr_eqn (a helper function
created only because of this complexity), and there was a separate table
only used for the xmap rule.

In this PR we uniformized things! We basically only have a table (to
simplify core.eval_jaxpr), but instead of having it as a table we just
attached the rules to the different primitive classes (CallPrimitive,
MapPrimitive, and XmapPrimitive) to make things less error-prone (we
have a few different CallPrimitive instantiations, like call_p,
xla_call_p, named_call_p, and remat_call_p, and this way we don't have
to remember to populate the table separately for each).

This was actually a warmup simplification before we attempt to simplify
custom derivatives (to unify custom_jvp_call_p and
custom_jvp_call_jaxpr_p).

Co-authored-by: Roy Frostig <frostig@google.com>

==

jax/core.py
jax/experimental/maps.py
jax/interpreters/ad.py
tests/core_test.py
==================
0be3cfe0;Yash Katariya;2022-01-07 20:50:05 -0800;Lift non-contiguous mesh restriction for fully replicated values
PiperOrigin-RevId: 420423427

==

jax/experimental/pjit.py
jax/interpreters/pxla.py
tests/pjit_test.py
==================
8977998b;Roman Novak;2022-01-07 14:54:41 -0800;Update type annotations and use the new `convolution.py` file

==

jax/_src/lax/other.py
==================
2c20d827;Jake VanderPlas;2022-01-07 14:07:55 -0800;[sparse] generalize metadata argument in BCOO primitives

==

jax/experimental/sparse/bcoo.py
jax/experimental/sparse/transform.py
tests/sparse_test.py
==================
285c2038;Yuanzhong Xu;2022-01-07 12:01:32 -0800;[JAX] xmap: specify shardings only on the named dimensions in the weak mode.
PiperOrigin-RevId: 420341381

==

jax/experimental/maps.py
jax/interpreters/xla.py
==================
548b9446;Peter Hawkins;2022-01-07 10:47:32 -0800;Suppress memorysanitizer for code that calls LAPACK kernels.
PiperOrigin-RevId: 420325456

==

jaxlib/BUILD
jaxlib/lapack_kernels.cc
==================
712ab66f;jax authors;2022-01-07 09:56:22 -0800;Merge pull request #9020 from FlorianH-1QBit:fix_odeint_complex_promotion_bug
PiperOrigin-RevId: 420313986

==
==================
b9b759d4;Roman Novak;2022-01-07 09:51:46 -0800;Merge branch 'main' into conv_local

==
==================
7b5b9cef;Lena Martens;2021-12-23 15:23:58 +0000;Add scatter OOB error.

==

jax/experimental/checkify.py
tests/checkify_test.py
==================
38e98d2d;Florian Hopfmueller;2021-12-01 15:29:49 -0500;Fix a bug that promoted t to a complex in odeint, and modify a test so it would have caught it
In odeint, raise error if t is not an array of floats

==

jax/experimental/ode.py
tests/ode_test.py
==================
f35014d6;Matthew Johnson;2022-01-07 08:16:43 -0800;Temporarily revert a small part of https://github.com/google/jax/pull/8955 (in partial_eval.py's _inline_literals) and skip new tests.
Some code seems to depend on whether we generate fresh invars (i.e. jaxpr input
binders) in that code. I'm not sure if it's a bug in the new JAX code or a bug in
the user code, but I'd like to un-break things while investigating.

PiperOrigin-RevId: 420296461

==

jax/interpreters/partial_eval.py
tests/core_test.py
==================
3a2fb184;Matthew Johnson;2022-01-07 07:58:30 -0800;Fix exception handling logic in C++ dispatch code.
The dispatch code was always raising its own exception when an exception
occurred during hashing of static arguments, even if the exception which
occurred was something like a KeyboardInterrupt.

fixes #9082

PiperOrigin-RevId: 420292886

==

tests/api_test.py
==================
576630eb;jax authors;2022-01-07 04:26:04 -0800;Merge pull request #9093 from LenaMartens:changelist/417406763
PiperOrigin-RevId: 420263720

==
==================
6bf7b0d3;Piotr Padlewski;2022-01-07 12:06:23 +0100;Fix host_callback docs
There was a missing ':' causing invalid rendering of the docs.
==

jax/experimental/host_callback.py
==================
f801bb29;jax authors;2022-01-06 12:52:35 -0800;Merge pull request #8955 from mattjj:djax-now-2
PiperOrigin-RevId: 420123832

==
==================
75a37e14;jax authors;2022-01-06 10:58:46 -0800;Merge pull request #9114 from jakevdp:searchsorted-nan
PiperOrigin-RevId: 420097658

==
==================
3dcf0689;jax authors;2022-01-06 09:40:13 -0800;Merge pull request #9074 from froystig:custom-vmap
PiperOrigin-RevId: 420080865

==
==================
f432e32b;Jake VanderPlas;2022-01-06 09:19:28 -0800;jnp.searchsorted: properly handle NaNs

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
91e81672;jax authors;2022-01-05 19:30:53 -0800;Merge pull request #8890 from NeilGirdhar:annotate_stop
PiperOrigin-RevId: 419962190

==
==================
ad7c7d6e;Roy Frostig;2021-12-31 11:40:57 -0800;custom batching jvp tests

==

tests/api_test.py
==================
0ab93a03;Roy Frostig;2021-12-30 19:08:51 -0800;custom batching vmap tests

==

jax/_src/api.py
tests/api_test.py
==================
7d591ea9;Roy Frostig;2021-12-03 14:34:11 -0800;JVP rule for custom_vmap
Co-authored-by: Matthew Johnson <mattjj@google.com>

==

jax/_src/custom_batching.py
==================
1764d5a3;Roy Frostig;2021-11-11 20:27:05 -0800;introduce custom_vmap and a corresponding custom_vmap_p primitive
Adds an impl and a batching rule for the primitive.

Co-authored-by: Matthew Johnson <mattjj@google.com>

==

jax/_src/custom_batching.py
jax/custom_batching.py
==================
8cda762a;jax authors;2022-01-05 17:29:48 -0800;Merge pull request #9106 from mattjj:simplify-default-bind
PiperOrigin-RevId: 419947009

==
==================
2beb3216;jax authors;2022-01-05 16:34:35 -0800;Merge pull request #9109 from mattjj:clean-up-linear-util-transform-references-on-2nd-half-exception
PiperOrigin-RevId: 419938632

==
==================
9ee4b92f;Matthew Johnson;2022-01-05 15:48:15 -0800;clean up WrappedFun.call_wrapped refs on exception
Functions decorated by linear_util.transformation or
transformation_with_aux are coroutines (with two yields). They can raise
exceptions, either before or after they yield the first time.

linear_util.WrappedFun.call_wrapped, which is responsible for driving
these coroutines, holds references to them.

These coroutines often manipulate global trace state (i.e.
core.thread_local_state.trace_state attributes) through context managers
(e.g. core.new_main or core.extend_axis_env). These context managers use
try/finally to clean up their state changes.

When an exception is raised in a linear_util.transformation coroutine,
it is raised into call_wrapped. If call_wrapped doesn't then clean up
all the references it has to coroutines, the cleanup finally clauses may
not execute until too late.

To ensure the finally clauses are called at the right time (before
exiting call_wrapped, basically as soon as possible) we need to clean up
the references to the coroutines in call_wrapped.

We had cleaned up these coroutine references when the coroutines raised
exceptions in their first part (i.e. before their first yield) in #4226.
But we didn't do a similar cleanup for their second part (i.e. after
their first yield and before their second).

Co-authored-by: Roy Frostig <frostig@google.com>

==

jax/linear_util.py
tests/api_test.py
==================
f8c5ee3d;Neil Girdhar;2021-12-09 22:42:04 -0500;Add missing annotations to lax

==

jax/_src/lax/lax.py
==================
f96761cd;jax authors;2022-01-05 14:54:48 -0800;Merge pull request #9097 from jakevdp:myst-version
PiperOrigin-RevId: 419918772

==
==================
6ce38acc;Matthew Johnson;2022-01-05 13:25:52 -0800;remove axis name logic from Primitive / bind
Instead, just give AxisPrimitive its own bind function. This way the
logic is nicely separated by concerns. In addition, this factorization
will let us more easily experiment with other ways to find the top trace
(e.g. for assert_p in checkify).

==

jax/core.py
==================
4db89900;Matthew Johnson;2021-12-10 23:22:11 -0800;add staging logic for polymorphic shapes in jaxprs
Co-authored-by: Dougal Maclaurin <dougalm@google.com>

==

jax/_src/lax/lax.py
jax/_src/lax/utils.py
jax/core.py
jax/interpreters/partial_eval.py
tests/core_test.py
==================
66e83525;jax authors;2022-01-05 12:54:21 -0800;Merge pull request #9103 from jakevdp:sparse-getitem
PiperOrigin-RevId: 419893203

==
==================
ef63f17c;Jake VanderPlas;2022-01-05 12:42:30 -0800;[sparse] add getitem stub in JAXSparse

==

jax/experimental/sparse/_base.py
==================
78fbc20b;Mehdi Amini;2022-01-04 21:06:26 -0800;Implement InferTypeOpInterface on TransposeOp (NFC)
This provide a convenient builder which does not require to provide the result
type.

PiperOrigin-RevId: 419740257

==

jax/_src/lax/lax.py
jax/interpreters/pxla.py
==================
eba2ed2f;Jake VanderPlas;2022-01-04 14:16:57 -0800;Update sphinx-related packages

==

docs/requirements.txt
==================
2c5fe8c4;Gordian Edenhofer;2021-11-19 21:21:46 +0100;Implement SciPy's RegularGridInterpolator
Resolves #8572 .

==

jax/_src/scipy/interpolate/__init__.py
jax/_src/third_party/scipy/LICENSE.txt
jax/_src/third_party/scipy/__init__.py
jax/_src/third_party/scipy/interpolate.py
jax/scipy/__init__.py
jax/scipy/interpolate/__init__.py
tests/scipy_interpolate.py
==================
04369a35;Peter Hawkins;2022-01-04 12:11:00 -0800;Drop support for NumPy 1.18.
Per NEP-29, we can drop NumPy 1.18 support on Dec 22, 2021.

The next NumPy deprecation will be 1.19 on Jun 21, 2022.

PiperOrigin-RevId: 419651428

==

CHANGELOG.md
build/Dockerfile
build/build.py
build/build_jaxlib_wheels_macos.sh
jaxlib/setup.py
setup.py
==================
bbd127f8;Lena Martens;2021-12-20 15:56:50 +0000;Add division by zero check.

==

jax/experimental/checkify.py
tests/checkify_test.py
==================
eaf78854;Peter Hawkins;2022-01-04 10:17:20 -0800;[JAX] Avoid building arity-1 tuples in XLA lowering.
This simplifies the emitted IR, and makes the generated HLO more closely match the future MHLO.

PiperOrigin-RevId: 419625471

==

jax/interpreters/xla.py
==================
04f322e0;jax authors;2022-01-04 09:53:56 -0800;Merge pull request #9089 from hawkinsp:npy122
PiperOrigin-RevId: 419619170

==
==================
3c193613;Peter Hawkins;2022-01-04 11:47:54 -0500;Fix test failures under Numpy 1.22.

==

jax/_src/dtypes.py
jax/_src/numpy/lax_numpy.py
pytest.ini
tests/lax_numpy_test.py
==================
5db7af66;jax authors;2022-01-04 03:55:21 -0800;Merge pull request #9084 from gnecula:clean_remat
PiperOrigin-RevId: 419558155

==
==================
9eee028f;George Necula;2022-01-04 09:53:24 +0200;Clean up backwards-compatibility support for remat lowering
In #8763 we changed the lowering of remat to use LAX primitives,
but we left in some of the old code and an internal flag
_USE_LAX_REMAT_LOWERING to enable us to revert to the old behavior
in case of test failures.

Now we remove that flag and the old lowering.

==

jax/_src/ad_checkpoint.py
jax/_src/lax/control_flow.py
jax/interpreters/xla.py
==================
a3a6afcd;Stella Laurenzo;2021-12-30 08:10:45 -0800;Internal change
PiperOrigin-RevId: 418960726

==

WORKSPACE
==================
2e608501;jax authors;2021-12-30 01:39:40 -0800;Merge pull request #9058 from che-shr-cat:main
PiperOrigin-RevId: 418917696

==
==================
0205b18e;jax authors;2021-12-30 01:35:40 -0800;Merge pull request #9029 from rjagerman:changelist/417595108
PiperOrigin-RevId: 418917548

==
==================
73de2a79;jax authors;2021-12-30 01:31:19 -0800;Merge pull request #8390 from rakki-18:broadcast-poisson
PiperOrigin-RevId: 418917484

==
==================
b810e8be;Rolf Jagerman;2021-12-21 13:59:30 +0100;Add `where=` arg to jax.nn.{softmax, log_softmax, normalize}.
This change adds a `where=` argument (analogous to `jnp.sum`) that can be used to specify which elements to include in the calculation.

==

jax/_src/nn/functions.py
tests/nn_test.py
==================
03adf8cc;Rakshit;2021-10-29 00:45:40 +0530;support null shape in jax.random.poisson

==

jax/_src/random.py
tests/random_test.py
==================
504728d8;Grigory Sapunov;2021-12-29 12:29:16 +0300;link directly to the documentation for the jnp.ndarray.at property

==

docs/jax-101/01-jax-basics.ipynb
docs/jax-101/01-jax-basics.md
jax/_src/numpy/lax_numpy.py
==================
df13fa26;jax authors;2021-12-28 23:34:44 -0800;Merge pull request #9061 from jakevdp:fix-ellipsis
PiperOrigin-RevId: 418733557

==
==================
5726be1a;jax authors;2021-12-28 10:47:55 -0800;Merge pull request #9026 from jakevdp:sparse-todense
PiperOrigin-RevId: 418649073

==
==================
4121417c;jax authors;2021-12-28 10:42:22 -0800;Merge pull request #9025 from jakevdp:bcoo-hash
PiperOrigin-RevId: 418648494

==
==================
d59d6188;Jake VanderPlas;2021-12-20 17:00:02 -0800;[sparse] make sparse.todense() work for scalars

==

jax/experimental/sparse/api.py
tests/sparse_test.py
==================
e53b68fa;Jake VanderPlas;2021-12-20 15:26:18 -0800;[sparse] mark sparse objects as unhashable

==

jax/experimental/sparse/_base.py
tests/sparse_test.py
==================
76a961da;jax authors;2021-12-28 10:01:58 -0800;Merge pull request #9022 from jakevdp:sparse-size
PiperOrigin-RevId: 418642340

==
==================
2e75a9b2;Jake VanderPlas;2021-12-28 09:52:54 -0800;fix indexing with ellipsis & boolean mask

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_indexing_test.py
==================
ae392e23;jax authors;2021-12-28 09:00:46 -0800;Merge pull request #9001 from jakevdp:jit-faq-precision
PiperOrigin-RevId: 418634212

==
==================
b889282f;Jake VanderPlas;2021-12-16 15:17:34 -0800;docs: add FAQ section about jit compilation & numerics

==

docs/faq.rst
==================
0e27af08;Jake VanderPlas;2021-12-20 11:39:27 -0800;[sparse] add size attribute to sparse objects

==

jax/experimental/sparse/_base.py
tests/sparse_test.py
==================
f93531b0;Grigory Sapunov;2021-12-27 20:23:29 +0300;replace deprecated jax.ops.index_* functions with the new index update operators

==

docs/jax-101/01-jax-basics.ipynb
docs/jax-101/01-jax-basics.md
==================
86e8928e;Joan Puigcerver;2021-12-27 12:10:56 +0000;Add constant initializer

==

jax/_src/nn/initializers.py
jax/nn/initializers.py
==================
113cd9b9;jax authors;2021-12-22 12:41:45 -0800;Merge pull request #8947 from mattjj:issue8910
PiperOrigin-RevId: 417869468

==
==================
860f6011;jax authors;2021-12-22 12:36:08 -0800;Merge pull request #8990 from mattjj:checkify3
PiperOrigin-RevId: 417868550

==
==================
9e28bd5f;Matthew Johnson;2021-12-16 10:57:19 -0800;small changes to checkify
Co-authored-by: Lena Martens <lenamartens@google.com>

==

jax/experimental/checkify.py
==================
a582fa87;Matthew Johnson;2021-12-14 13:29:16 -0800;add limit to number of tracer provenance lines
fixes #8910

==

jax/interpreters/partial_eval.py
tests/api_test.py
==================
17b4aa9a;jax authors;2021-12-22 11:58:32 -0800;Merge pull request #9037 from NeilGirdhar:annotate_api
PiperOrigin-RevId: 417861397

==
==================
2f62574e;Tom Hennigan;2021-12-22 02:56:25 -0800;Add is_leaf to tree_{leaves,structure}.
PiperOrigin-RevId: 417783880

==

jax/_src/tree_util.py
tests/tree_util_test.py
==================
9f46c3c9;Neil Girdhar;2021-12-22 00:19:31 -0500;Annotate api_boundary

==

jax/_src/traceback_util.py
==================
927f3e50;jax authors;2021-12-21 16:45:19 -0800;Merge pull request #9033 from vlad17:ste-docs
PiperOrigin-RevId: 417712566

==
==================
c624fd00;jax authors;2021-12-21 16:40:48 -0800;Merge pull request #9010 from ayaka14732:pr-syntax-error
PiperOrigin-RevId: 417712562

==
==================
b9cb6d6e;Jake VanderPlas;2021-12-21 15:11:08 -0800;Fix SyntaxError in jax_to_ir
Co-authored-by: Ayaka Mikazuki <ayaka@mail.shn.hk>

==

jax/tools/jax_to_ir.py
==================
6a0bfdd6;Tianjian Lu;2021-12-21 14:56:09 -0800;[JAX] Requires indices to be sorted and of int32 in `_sparse_bcoo_matvec` test.
PiperOrigin-RevId: 417695937

==

benchmarks/api_benchmark.py
jax/experimental/sparse/random.py
tests/sparse_test.py
==================
cd333f0f;Vlad Feinberg;2021-12-21 20:21:39 +0000;Fix straight-through estimator example in docs (#9032)

==

docs/jax-101/04-advanced-autodiff.ipynb
docs/jax-101/04-advanced-autodiff.md
==================
f16b13cc;Sandeep Dasgupta;2021-12-20 21:02:03 -0800;[mhlo] Remove tuple from mhlo whileOp
This includes the following changes
 - Importing XLA HLO --> MHLO
 - Exporting MHLO --> XLA HLO
 - Legalizing tf control from during legalization from tf --> MHLO
 - Fixing the legalization of custom tf ops
 - Lowering Tensorflow dialect's communication ops to MHLO
 - Jax lowering to MHLO
 - MHLO's legalize control flow pass

PiperOrigin-RevId: 417534873

==

jax/_src/lax/control_flow.py
==================
8292e87a;jax authors;2021-12-20 11:33:23 -0800;Merge pull request #9002 from jakevdp:prng-indexing
PiperOrigin-RevId: 417446632

==
==================
4d9e9b49;Jake VanderPlas;2021-12-20 09:09:48 -0800;custom_prng: generalize indexing of PRNGKeyArray
Co-authored-by: Roy Frostig <frostig@google.com>

==

jax/_src/numpy/lax_numpy.py
jax/_src/prng.py
tests/random_test.py
==================
f530959f;jax authors;2021-12-20 10:09:39 -0800;Merge pull request #9000 from LenaMartens:changelist/416899654
PiperOrigin-RevId: 417430113

==
==================
03e0deac;Lena Martens;2021-12-16 22:44:05 +0000;Add NaN checkify rule to all lax primitives.

==

jax/experimental/checkify.py
==================
db7a2c07;jax authors;2021-12-20 09:35:28 -0800;Merge pull request #8997 from LenaMartens:changelist/416887414
PiperOrigin-RevId: 417423296

==
==================
2a6147af;Tom Hennigan;2021-12-20 06:18:06 -0800;Add build time support for AOT compilation to TF graphs.
PiperOrigin-RevId: 417392920

==

jax/tools/BUILD
jax/tools/build_defs.bzl
jax/tools/jax_to_ir.py
tests/jax_to_hlo_test.py
tests/jax_to_ir_test.py
==================
52cf360e;Yash Katariya;2021-12-16 17:57:51 -0800;Replace TODO with a different one
PiperOrigin-RevId: 416931545

==

jax/experimental/global_device_array.py
jax/interpreters/pxla.py
==================
98a54611;Lena Martens;2021-12-16 21:48:37 +0000;Make sure while_loop cond generates an error even if it returns False.

==

jax/experimental/checkify.py
tests/checkify_test.py
==================
961c28c8;Peter Hawkins;2021-12-16 10:39:58 -0800;[MLIR] Remove non-word characters from MLIR module names.
This ensures that the XLA module name matches the MHLO module name. Some users expect the input and output module names to match.

PiperOrigin-RevId: 416845848

==

jax/interpreters/mlir.py
==================
ab7d1a8d;jax authors;2021-12-16 09:41:08 -0800;Merge pull request #8968 from jakevdp:doc-update
PiperOrigin-RevId: 416831176

==
==================
18baa6e9;Peter Hawkins;2021-12-16 08:34:10 -0800;[MLIR] Add a `@mlir.cache_lowering` decorator that lowers a primitive out-of-line as a reusable function.
Some primitives have very large lowerings. This is particularly true for lowerings that use `mlir.lower_fun` (e.g., the threefry PRNG kernel) or some XLA fallback lowerings. In this case it makes sense to lower such computations once for each signature as an out of line function that we can call multiple times.

XLA will inline these functions early in compilation at the moment, but this avoids the need to repeatedly trace, e.g., the threefry kernel when emitting MHLO.

PiperOrigin-RevId: 416818325

==

jax/_src/lax/control_flow.py
jax/_src/lax/lax.py
jax/_src/lax/windowed_reductions.py
jax/experimental/maps.py
jax/interpreters/mlir.py
tests/filecheck/subcomputations.filecheck.py
==================
f7ba328e;Peter Hawkins;2021-12-16 07:22:25 -0800;Ensure that pdot parameters are hashable.
PiperOrigin-RevId: 416804949

==

jax/_src/lax/parallel.py
==================
b0646557;Peter Hawkins;2021-12-16 06:12:53 -0800;Change primitive arguments to parallel and sparse primitives to make parameters hashable.
An upcoming change adds a cache keyed on (primitive, params), but to do that, we need the params to be hashable.

PiperOrigin-RevId: 416793521

==

jax/_src/lax/parallel.py
jax/experimental/sparse/bcoo.py
==================
f739d4ff;Yash Katariya;2021-12-16 05:43:45 -0800;Add a comment clarifying why `gda_ppspec` is returned.
PiperOrigin-RevId: 416788515

==

jax/experimental/pjit.py
==================
b71b957b;George Necula;2021-12-16 03:45:14 -0800;Fix mistake in recent remat lowering refactoring
PiperOrigin-RevId: 416771513

==

jax/_src/lax/control_flow.py
==================
19f70d4c;jax authors;2021-12-16 02:44:56 -0800;Merge pull request #8974 from gnecula:refactor_poly
PiperOrigin-RevId: 416762587

==
==================
aed315e0;jax authors;2021-12-16 02:08:33 -0800;Merge pull request #8963 from jakevdp:tracer-item
PiperOrigin-RevId: 416756956

==
==================
06ce9b9b;George Necula;2021-12-16 11:30:53 +0200;[jax2tf] Simplify the shape_poly support.
The goal is to make is shareable outside of jax2tf.

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/shape_poly.py
jax/experimental/jax2tf/shape_poly_tf.py
jax/experimental/jax2tf/tests/shape_poly_test.py
==================
a87b2114;Peter Hawkins;2021-12-15 19:06:26 -0800;[MLIR] Change signature of lowering rules.
Refactoring only, no functional changes intended.

Previously the MLIR lowering rule signature was

```
def rule(ctx, avals_in, avals_out, *args, **jaxpr_params):
```

where `ctx` was a module-wide context.

Change it to

```
def rule(ctx, *args, **jaxpr_params)
```

where `ctx` is a per-rule context object. The previous parameters are now available as `ctx.module_context`, `ctx.avals_in`, and `ctx.avals_out`.

This change makes it easier to add new per-rule context information without having to refactor all of the lowering rules to accept a new argument. One example is a shape environment for dynamic shapes. Another example, which motivated this work, is that I want to include the primitive name as part of the rule context.

PiperOrigin-RevId: 416698663

==

jax/_src/dispatch.py
jax/_src/lax/control_flow.py
jax/_src/lax/convolution.py
jax/_src/lax/lax.py
jax/_src/lax/slicing.py
jax/_src/lax/windowed_reductions.py
jax/experimental/maps.py
jax/experimental/pjit.py
jax/interpreters/mlir.py
jax/interpreters/pxla.py
jax/interpreters/sharded_jit.py
tests/custom_object_test.py
==================
46c28392;Yash Katariya;2021-12-15 18:06:43 -0800;Don't replace with gda mesh_axes unless FROM_GDA is specified.
PiperOrigin-RevId: 416689925

==

jax/experimental/pjit.py
tests/pjit_test.py
==================
d2908af8;Jake VanderPlas;2021-12-15 16:22:24 -0800;Add item() method to abstract arrays

==

jax/_src/numpy/lax_numpy.py
tests/api_test.py
==================
1f7d6316;Jake VanderPlas;2021-12-15 16:19:14 -0800;doc: move stub section to bottom of FAQ

==

docs/faq.rst
==================
0d71bff7;Yash Katariya;2021-12-15 15:58:12 -0800;Pass in the cached `global_mesh.local_devices` if gda fast path is enabled.
PiperOrigin-RevId: 416666888

==

jax/experimental/global_device_array.py
==================
cc86513c;jax authors;2021-12-15 10:26:46 -0800;Merge pull request #8948 from jakevdp:array-promotion
PiperOrigin-RevId: 416591668

==
==================
4008cd2a;Jake VanderPlas;2021-12-15 09:07:27 -0800;jnp.array: use jax-style promotion for list inputs

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
c060f461;jax authors;2021-12-15 08:10:05 -0800;Merge pull request #8926 from oliverdutton:patch-1
PiperOrigin-RevId: 416561423

==
==================
04ca2d3c;jax authors;2021-12-15 08:05:32 -0800;Merge pull request #8934 from juesato:hcb_docs
PiperOrigin-RevId: 416560873

==
==================
c5193c21;jax authors;2021-12-15 01:10:29 -0800;Merge pull request #8907 from gnecula:hcb_remat2
PiperOrigin-RevId: 416492868

==
==================
0bbb4140;oliverdutton;2021-12-15 08:32:42 +0000;tests: remove trailing whitespace

==

tests/lax_numpy_test.py
==================
3021d3e2;George Necula;2021-11-24 12:58:16 +0200;[hcb] Add support for remat2 to host_callback
A callback under ad_checkpoint.checkpoint will be invoked
twice when taking the gradient: once during the forward pass
and once again during the backward pass when the residuals
for the forward pass are rematerialized.

==

CHANGELOG.md
jax/_src/dispatch.py
jax/core.py
jax/experimental/host_callback.py
jax/interpreters/partial_eval.py
tests/host_callback_test.py
==================
2c7db525;jax authors;2021-12-14 21:15:22 -0800;Merge pull request #8949 from mattjj:add-block-until-ready-to-docs
PiperOrigin-RevId: 416462252

==
==================
c508d008;jax authors;2021-12-14 21:09:31 -0800;Merge pull request #8951 from mattjj:issue7809
PiperOrigin-RevId: 416461202

==
==================
22ff5296;jax authors;2021-12-14 21:05:18 -0800;Merge pull request #8946 from mattjj:issue8171
PiperOrigin-RevId: 416461125

==
==================
9d2a3ed7;Matthew Johnson;2021-12-14 20:57:14 -0800;Merge branch 'main' into add-block-until-ready-to-docs

==
==================
ca10ec8b;Yash Katariya;2021-12-14 18:53:15 -0800;Add a `fast_path` to GDA for faster GDA construction. Local indices and replica ids are computed during compilation time (not runtime) and the results are cached.
PiperOrigin-RevId: 416445427

==

jax/experimental/global_device_array.py
jax/experimental/pjit.py
tests/pjit_test.py
==================
bca17ad5;Peter Hawkins;2021-12-14 17:43:40 -0800;Add debugging flag for dumping the JAX-generated MHLO/HLO IR to a file.
While HLO dumping is redundant with XLA's XLA_FLAGS=--xla_dump_to=... feature, MHLO dumping is useful since XLA only ever sees and dumps the IR after it has been canonicalized and converted to HLO. Some debugging tasks require easy access to the MHLO as well.

PiperOrigin-RevId: 416435598

==

CHANGELOG.md
jax/_src/dispatch.py
==================
b1dac02b;jax authors;2021-12-14 17:29:02 -0800;Merge pull request #8939 from jakevdp:array-ndmin
PiperOrigin-RevId: 416432991

==
==================
917e6a60;jax authors;2021-12-14 17:18:33 -0800;Merge pull request #8952 from jakevdp:array-jit-test
PiperOrigin-RevId: 416431453

==
==================
f3ee8f32;jax authors;2021-12-14 15:44:45 -0800;Merge pull request #8942 from hawkinsp:jaxlib
PiperOrigin-RevId: 416412509

==
==================
0c169764;Peter Hawkins;2021-12-14 15:35:43 -0800;Use .__mro__ instead of .mro() when enumerating superclasses of a type.
mro() has a different signature on metaclasses, but __mro__ is a cached tuple property that appears to have the same signature everywhere. As far as I can tell, it always exists.

PiperOrigin-RevId: 416410647

==

jax/core.py
jax/interpreters/mlir.py
jax/interpreters/xla.py
tests/api_test.py
==================
30de4fc9;Jake VanderPlas;2021-12-14 15:20:25 -0800;testArray: add missing jit

==

tests/lax_numpy_test.py
==================
06d7b731;Jake VanderPlas;2021-12-14 13:42:17 -0800;jnp.array: use jax-style promotion for list inputs

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
984e8d79;Matthew Johnson;2021-12-14 14:40:13 -0800;make ravel_pytree unraveler dtype-polymorphic
fixes #7809

==

jax/_src/flatten_util.py
tests/tree_util_test.py
==================
0c68605b;Matthew Johnson;2021-12-14 13:36:46 -0800;add jax.block_until_ready to docs and changelog
also unrelatedly fix a couple of the uses of rst in changelog.md (though
many others remain)

==

CHANGELOG.md
docs/jax.rst
==================
d8e28400;Matthew Johnson;2021-12-14 12:57:52 -0800;fix leak checker interaction with custom_jvp
fixes #8171

==

jax/interpreters/partial_eval.py
tests/nn_test.py
==================
d6223cd4;jax authors;2021-12-14 12:51:51 -0800;Merge pull request #8941 from mattjj:issue8536
PiperOrigin-RevId: 416372046

==
==================
2de14537;jax authors;2021-12-14 11:49:55 -0800;Merge pull request #8940 from mattjj:issue8688
PiperOrigin-RevId: 416357480

==
==================
e2d5fafd;jax authors;2021-12-14 11:42:17 -0800;Merge pull request #8938 from jakevdp:array-device
PiperOrigin-RevId: 416355625

==
==================
66823d13;Peter Hawkins;2021-12-14 14:27:19 -0500;Include compute capability 8.0 SASS in jaxlib wheels.
Drop compute capability 6.1 to avoid growing the wheel size.

Also fix an unrelated build error due to a gcc warning in boringssl.

==

.bazelrc
CHANGELOG.md
WORKSPACE
build/build.py
==================
c8a34fe5;Matthew Johnson;2021-12-14 11:02:14 -0800;add jax.block_until_ready function
fixes #8536

==

jax/__init__.py
jax/_src/api.py
tests/api_test.py
==================
c555f5f0;Matthew Johnson;2021-12-14 10:42:05 -0800;handle trivial case for ppermute batching rule
fixes #8688

==

jax/_src/lax/parallel.py
tests/batching_test.py
==================
f7350e5d;oliverdutton;2021-12-14 18:03:44 +0000;style: add spaces around operator (and after comma)

==

tests/lax_numpy_test.py
==================
67ab8875;oliver;2021-12-14 17:47:13 +0000;style: whitespace alignment
Should fix flake8 error.

Spacing to just after the `(` on above line in line 1061. This matches the formatting of line 978.
==

tests/lax_numpy_test.py
==================
aaade7c7;Jake VanderPlas;2021-12-14 09:42:12 -0800;jnp.array: remove unused device argument

==

jax/_src/numpy/lax_numpy.py
==================
b28a1c52;Jonathan Uesato;2021-12-14 07:16:10 -0800;Tweak documentation on error handling for host_callback.call()

==

jax/experimental/host_callback.py
==================
0404dbdd;Marc van Zee;2021-12-14 03:32:05 -0800;Adds rtol to jax2tf/converters_eval tests.
Adds `rtol` to the ModuleSpec and adjust for PixelCNN++ so that it passed. Also adds a comment explaining why PixelCNN++ has relative high tolerances.

PiperOrigin-RevId: 416257321

==

jax/experimental/jax2tf/converters_eval/converters.py
jax/experimental/jax2tf/converters_eval/converters_eval_lib.py
jax/experimental/jax2tf/converters_eval/converters_results.md
jax/experimental/jax2tf/converters_eval/examples.py
==================
cba9852b;oliverdutton;2021-12-14 10:01:54 +0000;tests: cover 0 dim case

==

tests/lax_numpy_test.py
==================
7980379d;oliverdutton;2021-12-14 10:01:32 +0000;tests: fix shape inference dimension

==

tests/lax_numpy_test.py
==================
83d9a5fe;oliverdutton;2021-12-14 09:38:57 +0000;tests: pass list to np.stack, not generator

==

tests/lax_numpy_test.py
==================
9280a392;oliverdutton;2021-12-14 09:29:07 +0000;test: use appropriate args in flatnonzero

==

tests/lax_numpy_test.py
==================
4000ba4d;jax authors;2021-12-14 00:22:33 -0800;Merge pull request #8876 from marcvanzee:jax2tf-docs
PiperOrigin-RevId: 416228488

==
==================
bd0427b8;jax authors;2021-12-13 22:28:23 -0800;Merge pull request #8931 from mattjj:log-tracing-and-compilation-times
PiperOrigin-RevId: 416214275

==
==================
ed365636;Matthew Johnson;2021-12-13 22:11:38 -0800;add simple test

==

tests/api_test.py
==================
2eb788d3;Matthew Johnson;2021-12-13 21:51:08 -0800;log tracing and compilation times

==

jax/_src/dispatch.py
jax/experimental/maps.py
jax/experimental/pjit.py
jax/interpreters/pxla.py
==================
00610903;jax authors;2021-12-13 17:26:14 -0800;Merge pull request #8930 from skye:from_gda_copies
PiperOrigin-RevId: 416172477

==
==================
6bdeb82c;Skye Wanderman-Milne;2021-12-13 20:17:07 +0000;Handle the edge case where two `pjit.FROM_GDA` singletons are created.

==

jax/experimental/pjit.py
tests/pjit_test.py
==================
4ca50618;jax authors;2021-12-13 16:56:13 -0800;Merge pull request #8929 from jakevdp:sparse-sub
PiperOrigin-RevId: 416167151

==
==================
b58ac442;Jake VanderPlas;2021-12-13 12:16:17 -0800;[sparse] add sparse rule for lax.sub_p

==

jax/experimental/sparse/transform.py
tests/sparsify_test.py
==================
28eace95;Yash Katariya;2021-12-13 16:17:51 -0800;Add `is_fully_replicated` API to GDA
PiperOrigin-RevId: 416159926

==

jax/experimental/global_device_array.py
tests/global_device_array_test.py
==================
4974d702;jax authors;2021-12-13 10:44:05 -0800;Merge pull request #8898 from jakevdp:jax2tf-fix
PiperOrigin-RevId: 416080665

==
==================
c508e04c;oliverdutton;2021-12-13 16:24:12 +0000;test: add tests for argwhere, flatnonzero

==

tests/lax_numpy_test.py
==================
32fb7337;Peter Hawkins;2021-12-13 08:00:09 -0800;[JAX] Uniquify MLIR module names.
Some clients of JAX expect unique module names so they can disambiguate computation instances in profiling and tracing data.

PiperOrigin-RevId: 416043734

==

jax/interpreters/mlir.py
==================
bd272468;oliver;2021-12-13 15:27:10 +0000;fix: thread fill_value option

==

jax/_src/numpy/lax_numpy.py
==================
2d47d0c2;Peter Hawkins;2021-12-13 06:53:53 -0800;[JAX] Include JAX operator type in MHLO locations.
PiperOrigin-RevId: 416031506

==

jax/interpreters/mlir.py
==================
b7507414;jax authors;2021-12-13 03:41:22 -0800;Merge pull request #8763 from gnecula:remat_translation_lax2
PiperOrigin-RevId: 416001121

==
==================
c9691a5c;George Necula;2021-12-02 08:19:16 +0200;Refactor the lowering of remat.
Replace the XLA-specific lowering with the same logic written
with LAX primitives. This will allow reusing the logic for
different lowerings, e.g., jax2tf or MLIR.

This is a new attempt at #8716, which was rolled-back in #8749
due to test failures.

==

jax/_src/ad_checkpoint.py
jax/_src/lax/control_flow.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/jax2tf_test.py
jax/interpreters/mlir.py
jax/interpreters/partial_eval.py
jax/interpreters/xla.py
==================
6621d4cb;Yash Katariya;2021-12-12 09:28:45 -0800;Copybara import of the project:
--
8abdd9eceb7bba66de4d3a2554e50b9bbf0b8aec by Tianjian Lu <tianjianlu@google.com>:

[sparse] Update bcoo_dot_general GPU translation rule.
Co-authored-by: Jake VanderPlas <jakevdp@google.com>
PiperOrigin-RevId: 415878536

==

jax/experimental/sparse/bcoo.py
tests/sparse_test.py
tests/sparsify_test.py
==================
466eb7fb;jax authors;2021-12-11 00:51:40 -0800;Merge pull request #8678 from gnecula:hcb_simplify
PiperOrigin-RevId: 415694564

==
==================
b2885b85;jax authors;2021-12-10 23:40:20 -0800;Merge pull request #8852 from tlu7:bcoo-dot-general-v2
PiperOrigin-RevId: 415686779

==
==================
c0f234eb;jax authors;2021-12-10 23:36:03 -0800;Merge pull request #8902 from jakevdp:fix-example-tests
PiperOrigin-RevId: 415686728

==
==================
f08156ab;George Necula;2021-11-24 12:58:16 +0200;[hcb] Simplifications to the host_calback API
* dropping support for special AD handling for hcb.id_tap and id_print.
  From now on, only the primals are tapped. The old behavior can be
  obtained (for a limited time) by setting the JAX_HOST_CALLBACK_AD_TRANSFORMS
  environment variale, or the --flax_host_callback_ad_transforms flag.
  Additionally, added documentation for how to implement the old behavior
  using JAX custom AD APIs.

This allows us to make some significant cleanup in the internals.

==

CHANGELOG.md
jax/_src/config.py
jax/_src/test_util.py
jax/experimental/host_callback.py
tests/host_callback_test.py
==================
53318a2a;Peter Hawkins;2021-12-10 14:56:37 -0800;[MLIR] Support all fill_modes in GPU MLIR lowering for scatter_add.
PiperOrigin-RevId: 415617659

==

jax/_src/lax/slicing.py
==================
3969eec0;Peter Hawkins;2021-12-10 14:56:10 -0800;[MLIR] Keep MLIR IR longer as a Python ir.Module object rather than a string, until it is time to compile it.
Attach a meaningful module name, which is useful in logging, etc.

PiperOrigin-RevId: 415617591

==

jax/_src/dispatch.py
jax/experimental/compilation_cache/compilation_cache.py
jax/interpreters/mlir.py
jax/interpreters/pxla.py
tests/compilation_cache_test.py
tests/filecheck/names.filecheck.py
==================
8abdd9ec;Tianjian Lu;2021-12-10 14:08:21 -0800;[sparse] Update bcoo_dot_general GPU translation rule. Co-authored-by: Jake VanderPlas <jakevdp@google.com>

==

jax/experimental/sparse/bcoo.py
tests/sparse_test.py
tests/sparsify_test.py
==================
d03cc4f8;jax authors;2021-12-10 13:35:42 -0800;Merge pull request #8886 from jakevdp:random-test-x32
PiperOrigin-RevId: 415599408

==
==================
add967db;Peter Hawkins;2021-12-10 13:01:51 -0800;[JAX] Add a dialect option to jit(...).lower(...).compiler_ir().
The dialect allows the user to select between HLO and MHLO output.

PiperOrigin-RevId: 415591372

==

jax/_src/api.py
jax/_src/dispatch.py
jax/interpreters/pxla.py
tests/api_test.py
tests/filecheck/jax_filecheck_helpers.py
==================
f05a8120;jax authors;2021-12-10 11:57:03 -0800;Merge pull request #8897 from jakevdp:bcoo-mul-duplicates
PiperOrigin-RevId: 415574416

==
==================
3f1d21ad;Jake VanderPlas;2021-12-10 11:42:36 -0800;examples tests: avoid use of private jax utilities

==

examples/control_test.py
examples/examples_test.py
==================
1b9a9fff;Adam Paszke;2021-12-10 11:29:41 -0800;Clarify a comment in ParsedPartitionSpec.eq_given_rank
Previous one used an overly lax definition of "semantic equality".

PiperOrigin-RevId: 415567823

==

jax/experimental/pjit.py
==================
6880e2f0;jax authors;2021-12-10 11:10:21 -0800;Merge pull request #8868 from jakevdp:fix-control-test
PiperOrigin-RevId: 415562971

==
==================
eafaafd6;Peter Hawkins;2021-12-10 10:58:51 -0800;Add some initial filecheck tests for JAX->MHLO lowering.
The coverage of this test suite is not complete, but it's a start.

PiperOrigin-RevId: 415560462

==

jaxlib/pocketfft.py
tests/filecheck/README.md
tests/filecheck/array.filecheck.py
tests/filecheck/jax_filecheck_helpers.py
tests/filecheck/math.filecheck.py
tests/filecheck/shapes.filecheck.py
==================
df096996;Jake VanderPlas;2021-12-10 10:32:09 -0800;Testing: avoid hard-coding random seeds

==

examples/control_test.py
examples/examples_test.py
jax/experimental/jax2tf/tests/shape_poly_test.py
tests/api_test.py
tests/batching_test.py
tests/host_callback_test.py
tests/infeed_test.py
tests/jet_test.py
tests/lax_autodiff_test.py
tests/lax_control_flow_test.py
tests/lax_numpy_indexing_test.py
tests/lax_numpy_test.py
tests/lax_scipy_test.py
tests/masking_test.py
tests/ode_test.py
tests/optimizers_test.py
tests/pjit_test.py
tests/pmap_test.py
tests/polynomial_test.py
tests/random_test.py
tests/stax_test.py
tests/third_party/scipy/line_search_test.py
tests/xmap_test.py
==================
5c5c03d9;Jake VanderPlas;2021-12-10 09:56:47 -0800;[x64] fix jax2tf_test for default_dtype

==

jax/experimental/jax2tf/tests/jax2tf_test.py
==================
cb77bcab;Jake VanderPlas;2021-12-10 09:37:35 -0800;[sparse] fix issue with duplicate indices in BCOO.__mul__

==

jax/experimental/sparse/bcoo.py
tests/sparse_test.py
==================
69fdb306;Jake VanderPlas;2021-12-09 16:57:29 -0800;[x64] make random_test pass with jax_default_dtype_bits=32

==

jax/_src/test_util.py
tests/random_test.py
==================
83174dc1;jax authors;2021-12-09 16:43:46 -0800;Merge pull request #8873 from skye:contiguous_submeshes
PiperOrigin-RevId: 415386544

==
==================
17b0866b;Skye Wanderman-Milne;2021-12-08 22:59:32 +0000;Add `contiguous_submeshes` option to `mesh_utils.create_device_mesh()`.
Unless you're using GlobalDeviceArrays, the device mesh passed to pjit
must be composed of contiguous submeshes for each process (i.e. each
process's local devices must all be next to each other in the full
mesh and form a rectangular submesh). This change teaches
`create_device_mesh` how to output meshes that satisfy this
constraint in some common cases.

This isn't the default behavior because the resulting meshes are a
little awkward and magical, and eventually we'd like using
GlobalDeviceArrays to be the common use case.

==

jax/experimental/mesh_utils.py
jax/experimental/pjit.py
jax/interpreters/pxla.py
tests/mesh_utils_test.py
==================
4a565fcb;Yash Katariya;2021-12-09 15:16:08 -0800;Docstring for `GlobalDeviceArray` and `Shard`.
Co-authored-by: Skye Wanderman-Milne <skyewm@google.com>
PiperOrigin-RevId: 415367576

==

jax/experimental/global_device_array.py
==================
bb04cf08;Yash Katariya;2021-12-09 14:24:47 -0800;Add gcs support to serialization/deserialization of GDA
PiperOrigin-RevId: 415356134

==

jax/experimental/gda_serialization/serialization.py
==================
4c3b1d2f;Trevor Cai;2021-12-09 12:37:43 -0800;[jax] Add log message when cache entries are written.
PiperOrigin-RevId: 415330490

==

jax/experimental/compilation_cache/compilation_cache.py
==================
f6f6b4f0;jax authors;2021-12-09 10:25:10 -0800;Merge pull request #8861 from jakevdp:with-jnp-defaults
PiperOrigin-RevId: 415297501

==
==================
da8a0068;Jake VanderPlas;2021-12-09 09:47:21 -0800;[x64] make lax_numpy_test.py pass with 32-bit defaults

==

jax/_src/test_util.py
tests/lax_numpy_test.py
==================
e68f29a9;jax authors;2021-12-09 07:10:28 -0800;Merge pull request #8864 from jakevdp:x64-loops-fix
PiperOrigin-RevId: 415256652

==
==================
1a6bce0f;jax authors;2021-12-09 07:06:10 -0800;Merge pull request #8865 from jakevdp:x64-context-test
PiperOrigin-RevId: 415256308

==
==================
3b34dc7d;jax authors;2021-12-09 07:00:14 -0800;Merge pull request #8870 from jakevdp:gmres-test
PiperOrigin-RevId: 415255093

==
==================
5aeace30;Peter Hawkins;2021-12-09 06:23:00 -0800;Rollback of: [JAX] Avoid building arity-1 tuples in XLA lowering.
This simplifies the emitted IR, and makes the generated HLO more closely match the future MHLO.

PiperOrigin-RevId: 415249444

==

jax/interpreters/xla.py
==================
9bd117f4;Marc van Zee;2021-12-09 14:54:23 +0100;Finish jax2tf no_xla documentation

==

jax/experimental/jax2tf/converters_eval/no_xla_limitations.md
==================
b0d96bd4;Yash Katariya;2021-12-08 22:04:13 -0800;Replace the jax_gsda_out flag with jax_parallel_functions_output_gda
PiperOrigin-RevId: 415177485

==

jax/_src/config.py
jax/interpreters/pxla.py
tests/pjit_test.py
==================
8bf38476;Peter Hawkins;2021-12-08 19:01:02 -0800;[JAX] Avoid building arity-1 tuples in XLA lowering.
This simplifies the emitted IR, and makes the generated HLO more closely match the future MHLO.

PiperOrigin-RevId: 415152442

==

jax/interpreters/xla.py
==================
64569abb;Qiao Zhang;2021-12-08 17:21:24 -0800;Upstream mesh utils to JAX core.
Co-authored-by: James Bradbury <jekbradbury@google.com>
Co-authored-by: Anselm Levskaya <levskaya@google.com>
PiperOrigin-RevId: 415136597

==

jax/experimental/mesh_utils.py
tests/mesh_utils_test.py
==================
2e713a7b;Jake VanderPlas;2021-12-08 16:32:33 -0800;Add missing gmres test (part of #8849)

==

tests/lax_scipy_sparse_test.py
==================
9876e02f;Jake VanderPlas;2021-12-08 13:05:40 -0800;[x64] make x64_context tests work with updated default dtypes

==

jax/experimental/x64_context.py
==================
e0d0be2f;jax authors;2021-12-08 12:27:12 -0800;Merge pull request #8848 from jakevdp:spdot-general-ad
PiperOrigin-RevId: 415067690

==
==================
0722c293;jax authors;2021-12-08 12:23:04 -0800;Merge pull request #8860 from LenaMartens:changelist/414992731
PiperOrigin-RevId: 415067658

==
==================
b49c75c0;Jake VanderPlas;2021-12-08 12:08:49 -0800;[x64] make jax.experimental.loops consistent with default dtype

==

jax/experimental/loops.py
tests/loops_test.py
==================
8be304c9;Yash Katariya;2021-12-08 12:07:42 -0800;Bump jax version after jax release
PiperOrigin-RevId: 415064518

==

CHANGELOG.md
jax/version.py
==================
0dc5a33a;Lena Martens;2021-12-08 15:07:43 +0000;Add checkify rule for while_loop.

==

jax/experimental/checkify.py
tests/checkify_test.py
==================
1b5630ee;Yash Katariya;2021-12-08 11:13:37 -0800;Update jaxlib version number to 0.1.76
PiperOrigin-RevId: 415050863

==

CHANGELOG.md
jaxlib/version.py
setup.py
==================
a081f00a;jax authors;2021-12-08 10:52:53 -0800;Merge pull request #8850 from froystig:aot-transform
PiperOrigin-RevId: 415044960

==
==================
de9aaa61;Jake VanderPlas;2021-12-08 07:43:07 -0800;[sparse] add jvp rule for bcoo_spdot_general

==

jax/experimental/sparse/bcoo.py
tests/sparse_test.py
==================
32640450;Marc van Zee;2021-12-08 08:10:10 -0800;Restructures jax2tf converters eval directory.
Makes the following improvements:
* Renames directory to `converters_eval` and improves names of Python files.
* Updates README to better describe contents of the directory.
* Adds `no_xla_limitations.md` doc containing current limitations of running the jax2tf converter with `enable_xla=False` and a description of each partially supported op (with some TODOs for those I haven't done yet).

PiperOrigin-RevId: 415005456

==

jax/experimental/jax2tf/converters_eval/README.md
jax/experimental/jax2tf/converters_eval/converters.py
jax/experimental/jax2tf/converters_eval/converters_eval_lib.py
jax/experimental/jax2tf/converters_eval/converters_eval_main.py
jax/experimental/jax2tf/converters_eval/converters_results.md
jax/experimental/jax2tf/converters_eval/converters_results.md.template
jax/experimental/jax2tf/converters_eval/examples.py
jax/experimental/jax2tf/converters_eval/no_xla_limitations.md
jax/experimental/jax2tf/examples_eval/README.md
jax/experimental/jax2tf/examples_eval/converters_results.md.template
==================
6a821d3c;jax authors;2021-12-08 07:59:08 -0800;Merge pull request #8843 from jakevdp:lax-dtype-errs
PiperOrigin-RevId: 415002290

==
==================
b4db8ab3;jax authors;2021-12-08 07:54:57 -0800;Merge pull request #8849 from jakevdp:x64-linalg
PiperOrigin-RevId: 415002072

==
==================
b980acf3;Roy Frostig;2021-12-07 17:09:37 -0800;detect and err on transformation of AOT-compiled function calls

==

jax/_src/api.py
tests/api_test.py
==================
2143f3d4;Qiao Zhang;2021-12-07 16:56:46 -0800;Ensure semantically equivalent PartitionSpecs are considered equivalent when checking GDA's mesh_axes and pjit's in_axis_resources match.
For example, P() and P(None) both mean fully replicated, which triggers an
error before this change.

PiperOrigin-RevId: 414861824

==

jax/experimental/pjit.py
tests/pjit_test.py
==================
f8e18e9a;Jake VanderPlas;2021-12-07 16:27:29 -0800;[x64] minor weak_type changes to linalg.py

==

jax/_src/numpy/linalg.py
jax/_src/scipy/sparse/linalg.py
==================
4dc31376;Yash Katariya;2021-12-07 13:32:26 -0800;Before this change, the local_to_global in the path of dispatching the pjitted_function causes a huge regression in t5x. This change gets rid of the local_to_global conversion and uses the precomputed input_avals (which is a combination of global and local avals respectively if the input is a GDA or not).
The avals of args to the pjitted_function will also also similar pattern (global if arg is a GDA and local otherwise).

PiperOrigin-RevId: 414811992

==

jax/interpreters/pxla.py
tests/pjit_test.py
==================
5779267b;jax authors;2021-12-07 13:30:24 -0800;Merge pull request #8847 from hawkinsp:tol
PiperOrigin-RevId: 414811247

==
==================
11d35b50;Peter Hawkins;2021-12-07 16:14:06 -0500;Relax test tolerance for slogdet gradient test.
The next jaxlib releases seems to produce slightly different numerical results here, but we believe they are due to an overly tight tolerance/overly sensitive test.

==

tests/linalg_test.py
==================
64e82d9a;Jake VanderPlas;2021-12-07 11:45:07 -0800;[x64]: improve dtype mismatch errors for lax functions

==

jax/_src/lax/lax.py
==================
b5aea7bc;jax authors;2021-12-07 09:02:52 -0800;Merge pull request #8834 from jakevdp:default-precision-flag
PiperOrigin-RevId: 414741034

==
==================
7ceb983b;jax authors;2021-12-07 08:38:31 -0800;Merge pull request #8795 from jakevdp:bcoo-sparse-mul
PiperOrigin-RevId: 414734890

==
==================
417cfd41;jax authors;2021-12-07 08:29:30 -0800;Merge pull request #8838 from jakevdp:bcoo-broadcast-in-dim
PiperOrigin-RevId: 414732845

==
==================
165d4521;Jake VanderPlas;2021-12-07 08:23:37 -0800;[x64] add new jax_default_dtype_bits flag

==

jax/_src/config.py
jax/_src/dtypes.py
tests/dtypes_test.py
tests/lax_numpy_test.py
==================
4aa97079;jax authors;2021-12-07 08:20:52 -0800;Merge pull request #8792 from jakevdp:bcoo-typedef
PiperOrigin-RevId: 414731176

==
==================
12dddac9;Peter Hawkins;2021-12-07 07:12:08 -0800;[MLIR] Make two dtype fixes.
* when converting from a non-bool type to a boolean, lower it as x != 0 rather than convert(x, i1). Convert has truncation semantics, but we are expecting XLA's x != 0 semantics instead.
* revert https://github.com/google/jax/pull/8825 and part of https://github.com/google/jax/pull/8810. PR https://github.com/google/jax/pull/8828 means that we now will never have a non-canonical preferred_element_type, and so the output type is once again always equal to the preferred element type.

PiperOrigin-RevId: 414716056

==

jax/_src/lax/convolution.py
jax/_src/lax/lax.py
jax/interpreters/mlir.py
==================
2f4bd118;jax authors;2021-12-07 07:11:44 -0800;Merge pull request #8842 from google:yashk2810-patch-3
PiperOrigin-RevId: 414715679

==
==================
b0b853c5;Yash Katariya;2021-12-07 07:04:44 -0800;Update WORKSPACE

==

WORKSPACE
==================
06cd1fed;Peter Hawkins;2021-12-07 06:12:32 -0800;Move dtype canonicalization out of core.AbstractValue subclasses.
This is a strictly mechanical change that moves abstract value canonicalization out of the core.AbstractValue subclasses and into their callers. This makes it safe to manipulate non-canonical abstract values even inside an -x32 context.

The callers to which canonicalization was added were:
a) all callers of `ConcreteArray` inside the JAX Tree.
b) all callers of `ShapedArray` and `UnshapedArray` that were found to be passing non-canonical dtypes during a global presubmit. These were identified by adding an assertion that the dtype is in fact canonical and fixing all the resulting test failures.

PiperOrigin-RevId: 414704700

==

jax/_src/abstract_arrays.py
jax/_src/api.py
jax/_src/device_array.py
jax/_src/lax/control_flow.py
jax/_src/lax/slicing.py
jax/_src/lax/utils.py
jax/core.py
jax/experimental/jax2tf/call_tf.py
jax/interpreters/masking.py
jax/interpreters/pxla.py
tests/api_test.py
tests/core_test.py
tests/custom_object_test.py
tests/jax_jit_test.py
==================
56f029f7;Trevor Cai;2021-12-07 05:34:02 -0800;[jax] Add computation name to cache hit logging.
PiperOrigin-RevId: 414697336

==

jax/_src/dispatch.py
==================
803d3f24;jax authors;2021-12-07 04:49:55 -0800;Merge pull request #8829 from LenaMartens:changelist/414499911
PiperOrigin-RevId: 414689035

==
==================
bbf1a9ba;Lena Martens;2021-12-06 19:36:35 +0000;Add checkify rule for scan.

==

jax/experimental/checkify.py
tests/checkify_test.py
==================
068bfbf5;Yash Katariya;2021-12-07 03:31:31 -0800;Remove the TODO
PiperOrigin-RevId: 414673231

==

jax/experimental/pjit.py
==================
0bb7d204;Yash Katariya;2021-12-06 20:04:19 -0800;Move serialization/de-serialization of GDA into jax.
PiperOrigin-RevId: 414607092

==

.github/workflows/ci-build.yaml
jax/experimental/gda_serialization/README
jax/experimental/gda_serialization/__init__.py
jax/experimental/gda_serialization/serialization.py
jax/experimental/gda_serialization/serialization_test.py
==================
242463f5;Jake VanderPlas;2021-12-06 17:25:28 -0800;[sparse] add sparse rule for broadcast_in_dim

==

jax/experimental/sparse/__init__.py
jax/experimental/sparse/bcoo.py
jax/experimental/sparse/transform.py
tests/sparse_test.py
==================
5de2cec4;Yash Katariya;2021-12-06 15:43:36 -0800;Thread `is_gda` to lower_mesh_computation. This is required because to lift the contiguous mesh requirement, the inputs should all be GDAs. The only way to check that in lower_mesh_computation when the input is being handled is to thread is_gda to lower_mesh_computation.
The current behavior is wrong with decides how to handle the input based on config.jax_gsda_out flag. Its wrong because if a non-GDA input is passed and config.jax_gsda_out flag is enabled then the input_indices and input_specs passed to InputsHandler will be wrong, hence the results will be wrong.

PiperOrigin-RevId: 414559785

==

jax/experimental/global_device_array.py
jax/experimental/maps.py
jax/experimental/pjit.py
jax/interpreters/pxla.py
==================
01dd34b1;Peter Hawkins;2021-12-06 15:36:20 -0800;[MLIR] Use XLA implementation of sinh, instead of the CHLO lowering.
chlo.sinh is less numerically stable than XLA's version.

PiperOrigin-RevId: 414558035

==

jax/_src/lax/lax.py
==================
ae0f4f6c;Ryan Sepassi;2021-12-06 15:13:01 -0800;Add profiler annotations
PiperOrigin-RevId: 414552750

==

jax/_src/device_array.py
jax/_src/dispatch.py
jax/_src/profiler.py
jax/interpreters/partial_eval.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
==================
98226276;jax authors;2021-12-06 12:36:57 -0800;Merge pull request #8830 from jakevdp:fix-int
PiperOrigin-RevId: 414514770

==
==================
16a663f4;Peter Hawkins;2021-12-06 12:20:48 -0800;Canonicalize dot/conv preferred_element_type during tracing.
This avoids non-canonical types showing up in surprising places.

It is possible that some users are specifying a 64-bit type here intentionally, but that seems unlikely. The fix in that case would be to disable non-x64 mode.

PiperOrigin-RevId: 414511197

==

jax/_src/lax/convolution.py
jax/_src/lax/lax.py
==================
2a27cefb;Jake VanderPlas;2021-12-06 12:18:45 -0800;jnp.lexsort: fix canonicalization of default int

==

jax/_src/numpy/lax_numpy.py
==================
22fb38c8;Peter Hawkins;2021-12-06 10:18:18 -0800;[MLIR] Handle preferred_element_type correctly in convolution lowering rule.
Similar to the fix to dot_general in https://github.com/google/jax/pull/8810

This is hard to detect from a direct test, except by inspecting the IR, which I'd rather avoid. However the jax2tf tests already catch it since they have a very tight test tolerance.

PiperOrigin-RevId: 414479170

==

jax/_src/lax/convolution.py
==================
03a32a42;Jake VanderPlas;2021-12-03 16:21:53 -0800;[sparse] make JAXSparse an ABC & declare BCOO methods

==

jax/experimental/sparse/_base.py
jax/experimental/sparse/coo.py
jax/experimental/sparse/csr.py
==================
74a512a9;Jake VanderPlas;2021-12-03 15:29:35 -0800;[sparse] initial implementation of sparse-sparse multiply

==

jax/experimental/sparse/bcoo.py
jax/experimental/sparse/transform.py
tests/sparse_test.py
==================
f17e66e0;jax authors;2021-12-06 07:46:41 -0800;Merge pull request #8824 from hawkinsp:profiler
PiperOrigin-RevId: 414440262

==
==================
a288b154;Peter Hawkins;2021-12-06 09:10:44 -0500;Fix keyword argument confusion in jax.profiler.annotate_function decorator.

==

jax/_src/profiler.py
tests/profiler_test.py
==================
14bc95fe;Yash Katariya;2021-12-06 04:34:09 -0800;Internal change
PiperOrigin-RevId: 414405773

==

jax/_src/device_array.py
jax/_src/dispatch.py
jax/_src/profiler.py
jax/interpreters/partial_eval.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
==================
6f865b81;Marc van Zee;2021-12-06 04:12:39 -0800;Adds support for batch_group_count in jax2tf. This was a request from a jax2tf user. I removed the jax2tf limitation which re-enables the test, which is passing now.
PiperOrigin-RevId: 414402686

==

jax/experimental/jax2tf/g3doc/primitives_with_limited_support.md
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/jax2tf_limitations.py
==================
0e3653f3;Yash Katariya;2021-12-06 04:01:02 -0800;Split `aval_to_result_handler` into `local_aval_to_result_handler` and `global_aval_to_result_handler` because `aval_to_result_handler` was shared by pmap, pjit and xmap. This led to parameters having optional values (None) and hacks were introduced to get around that.
For example (before this change): If `config.jax_gsda_out` flag is true and you execute a computation via pmap, it try to create a gda (but that's not supported) and it would error out. So hacks were introduced to prevent that.

Why would you enable the gsda output flag for pmap? Because bf-jax enables that flag at the top level and it becomes inconvenient to untoggle the flag (via context manager) for every unsupported API by GDA.

This change removes choosing the handler based on a flag and also removes handling of `None`'s.

Also replace `gsda` -> `gda` in test files.

PiperOrigin-RevId: 414400644

==

jax/experimental/global_device_array.py
jax/interpreters/pxla.py
jax/interpreters/sharded_jit.py
tests/global_device_array_test.py
tests/pjit_test.py
==================
e7c29eeb;Yash Katariya;2021-12-04 17:47:55 -0800;Lazily populate avals for DeviceArrays returned by `gda.local_shards` and `gda.global_shards`. Populating avals eagerly leads to performance regression.
PiperOrigin-RevId: 414197255

==

jax/experimental/global_device_array.py
tests/global_device_array_test.py
==================
8c14a616;Peter Hawkins;2021-12-04 12:10:28 -0800;[MLIR] Fix mishandling of canonicalization in MLIR constant handler.
(This probably needs a test, but I'd rather work on removing canonicalization from this level of the software stack.)

PiperOrigin-RevId: 414168031

==

jax/interpreters/mlir.py
==================
1ce94bec;Peter Hawkins;2021-12-04 10:34:53 -0800;[MLIR] Improve lowering of dot_general.
* Handle preferred_element_type: it turns out not to be entirely subsumed by the output aval.
* Add an optimization for XLA/CPU float16 inputs that was present in the XLA translation rules but not the MLIR rules.
* Change mlir.dtype_to_ir_type to be a function so it can perform input validation.

PiperOrigin-RevId: 414159499

==

jax/_src/lax/lax.py
jax/interpreters/mlir.py
tests/custom_object_test.py
==================
bee497fc;Peter Hawkins;2021-12-03 18:09:36 -0800;[MLIR] Fix test breakage from CustomCallOp change.
called_computations needs to be an ir.ArrayAttr, rather than an optional value.

PiperOrigin-RevId: 414063603

==

jax/interpreters/mlir.py
==================
a21c156d;Yash Katariya;2021-12-03 17:48:42 -0800;Only output GDAs if other attributes like global_mesh, out_axis_resources exist because that handler is being shared by pmap too.
PiperOrigin-RevId: 414060522

==

jax/interpreters/pxla.py
==================
5101f92d;Peter Hawkins;2021-12-03 17:26:11 -0800;[MLIR] Avoid calling xla.abstractify() when building IR constants.
abstractify() canonicalizes the type, which we only want to do when the caller asks for it. Instead, just build the IR type directly.

PiperOrigin-RevId: 414057146

==

jax/interpreters/mlir.py
==================
fbb1e270;Prakalp Srivastava;2021-12-03 16:19:16 -0800;Add called_computations attribute on mhlo::CustomCallOp.
Adds import/export support for this attribute. This corresponds to the called_computations attribute in HLO custom-call.

PiperOrigin-RevId: 414046596

==

jax/interpreters/mlir.py
==================
1f2d8c0c;Peter Hawkins;2021-12-03 16:11:27 -0800;In CPU all_gather lowering, make sure the outputs are bools if the inputs are bools.
PiperOrigin-RevId: 414045093

==

jax/_src/lax/parallel.py
tests/pmap_test.py
==================
c641a88a;Yash Katariya;2021-12-03 16:03:30 -0800;Remove unused parameters
PiperOrigin-RevId: 414043651

==

jax/interpreters/pxla.py
==================
89b6b13f;jax authors;2021-12-03 15:56:12 -0800;Merge pull request #8774 from rsepassi:profile
PiperOrigin-RevId: 414041952

==
==================
7f57b9f8;jax authors;2021-12-03 15:39:02 -0800;Merge pull request #8798 from froystig:aot-ir
PiperOrigin-RevId: 414038291

==
==================
90361dc3;Roy Frostig;2021-12-03 14:43:12 -0800;methods for retrieving IRs from each AOT stage

==

jax/_src/api.py
==================
d52cac51;Peter Hawkins;2021-12-03 14:33:05 -0800;[MLIR] Make the function names generated for XLA fallback computations more meaningful.
Previously fallback computations would all get the function name "main". Now they get names like this:
func private @xla_fallback_all_to_all(%arg0: tensor<8x8xi64> loc("-":7:14)) -> tensor<8x8xi64> {
...
}

PiperOrigin-RevId: 414024243

==

jax/interpreters/mlir.py
==================
9a539002;Peter Hawkins;2021-12-03 13:34:26 -0800;Fix bug in lowering of nested pmaps with boolean types.
Add test that would have caught the bug.

PiperOrigin-RevId: 414010091

==

jax/interpreters/pxla.py
tests/pmap_test.py
==================
23f5c1a0;Peter Hawkins;2021-12-03 13:23:09 -0800;[MLIR] In the XLA fallback path, check for primitives that have only platform-specific translation rules.
PiperOrigin-RevId: 414007622

==

jax/interpreters/mlir.py
==================
cb02b142;Peter Hawkins;2021-12-03 12:11:34 -0800;[JAX:MLIR] Work around an MLIR bug where ir.DenseElementsAttr assumes that all 1-element buffers are splat buffers.
PiperOrigin-RevId: 413992291

==

jax/interpreters/mlir.py
==================
a0d0c8c5;jax authors;2021-12-03 10:56:55 -0800;Merge pull request #8778 from mattjj:checkify
PiperOrigin-RevId: 413973577

==
==================
ac0d0274;Ryan Sepassi;2021-12-03 10:37:04 -0800;Use profiler.annotate_function

==

jax/_src/device_array.py
jax/_src/dispatch.py
jax/interpreters/partial_eval.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
==================
6efb1444;Ryan Sepassi;2021-12-02 12:33:18 -0800;fix pytype errors

==

jax/_src/device_array.py
jax/interpreters/pxla.py
==================
643a97c8;Ryan Sepassi;2021-12-02 12:11:12 -0800;Add profiler to traceback exclusions

==

jax/_src/profiler.py
==================
6f9c5abd;Ryan Sepassi;2021-12-02 11:31:42 -0800;Add profiler.annotate_function on some internals

==

jax/_src/device_array.py
jax/_src/dispatch.py
jax/interpreters/partial_eval.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
==================
af886bc3;Yash Katariya;2021-12-03 05:28:01 -0800;Cleanup `avals_to_results_handler` by splitting it into 2 functions; `local_avals_to_results_handler` and `global_avals_to_results_handler`.
PiperOrigin-RevId: 413911954

==

jax/experimental/pjit.py
jax/interpreters/pxla.py
==================
f692180a;jax authors;2021-12-03 04:44:44 -0800;Merge pull request #8788 from google:yashk2810-patch-2
PiperOrigin-RevId: 413905344

==
==================
87e49471;Yash Katariya;2021-12-03 04:38:22 -0800;Update TF commit for jaxlib release

==

WORKSPACE
==================
be1914e4;jax authors;2021-12-03 03:13:40 -0800;Merge pull request #8768 from jakevdp:config-transient
PiperOrigin-RevId: 413890628

==
==================
3c465150;Peter Hawkins;2021-12-02 18:42:12 -0800;[MLIR] Make sharded_jit work with MLIR.
Also reenable debug information which had been accidentally disabled.

PiperOrigin-RevId: 413820219

==

jax/interpreters/mlir.py
jax/interpreters/sharded_jit.py
==================
52b28563;jax authors;2021-12-02 18:29:03 -0800;Merge pull request #8780 from jakevdp:sum-duplicates
PiperOrigin-RevId: 413818562

==
==================
73cdc193;Yash Katariya;2021-12-02 18:14:34 -0800;Lift contiguous mesh requirement for GDAs. If all inputs are GDAs, the mesh can be non-contiguous.
Example mesh:

```
Mesh:
  x o
  o x
  a b
  b a
Legend:
  x = devices in process 0
  o = devices in process 1
  a = devices in process 2
  b = devices in process 3
```
PiperOrigin-RevId: 413816710

==

jax/experimental/maps.py
jax/experimental/pjit.py
jax/interpreters/pxla.py
jax/interpreters/sharded_jit.py
==================
f77f9296;Jake VanderPlas;2021-12-02 17:34:15 -0800;DOC: mark jax.enable_custom_prng as transient

==

jax/_src/numpy/lax_numpy.py
jax/experimental/sparse/bcoo.py
tests/sparse_test.py
==================
79017a50;Jake VanderPlas;2021-12-02 17:06:55 -0800;DOC: mark jax.enable_custom_prng as transient

==

jax/_src/config.py
==================
ac3a04db;Peter Hawkins;2021-12-02 16:24:02 -0800;[MLIR] Add more parallelism and sharding support via MLIR.
* Add support for parameter replication, argument sharding, and result sharding on top-level MLIR functions.
* Implement sharding on infeed and outfeed in MLIR lowering.
* Implement an xmap lowering rule, which makes jit(xmap(...)) work. The xmap lowering rule is almost a textual copy of the XLA version.
* Add a SerializeToString() method to the XLA OpSharding operator, since we need to produce the serialized protocol buffer as part of the MHLO encoding of sharding.
* Fix some missing fields in the OpSharding type annotation.

PiperOrigin-RevId: 413797125

==

jax/_src/lax/lax.py
jax/experimental/maps.py
jax/experimental/pjit.py
jax/interpreters/mlir.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
==================
c1f71d17;Matthew Johnson;2021-12-02 14:26:58 -0800;generalize assert primitive, allow recharging

==

jax/experimental/checkify.py
tests/checkify_test.py
==================
40912d5d;jax authors;2021-12-02 13:52:58 -0800;Merge pull request #8777 from google:yashk2810-patch-1
PiperOrigin-RevId: 413762284

==
==================
20b70aa5;Yash Katariya;2021-12-02 13:46:46 -0800;Update workspace file for py 3.10 release test

==

WORKSPACE
==================
271bd323;Yash Katariya;2021-12-02 13:26:58 -0800;Add python 3.10 bazel build configs for jaxlib.
PiperOrigin-RevId: 413755904

==

.bazelrc
==================
250d1606;jax authors;2021-12-02 12:59:45 -0800;Merge pull request #8773 from mattjj:checkify
PiperOrigin-RevId: 413749382

==
==================
4444a077;jax authors;2021-12-02 12:50:23 -0800;Merge pull request #8760 from jakevdp:lax-numpy-changes
PiperOrigin-RevId: 413747082

==
==================
f306d33f;Peter Hawkins;2021-12-02 12:45:48 -0800;[MLIR] Implement input-output aliasing via the tf.aliasing_output attribute.
PiperOrigin-RevId: 413746577

==

jax/interpreters/mlir.py
==================
768b0764;Matthew Johnson;2021-12-02 11:33:56 -0800;add an assert primitive
The assert primitive has an effectful API and so it can't be staged out;
it's only a trace-time primitive. It can be discharged to the functional
form.

We might want to have separate transforms for discharging errors and for
adding error checks. But right now they're just bundled together in the
checkify transform.

==

jax/experimental/checkify.py
tests/checkify_test.py
==================
a28c4eb1;Peter Hawkins;2021-12-02 10:37:02 -0800;[MLIR] Remove option to tuple function results.
The MHLO->HLO converter handles untupled function results just fine, so we don't need to support this directly in JAX.

PiperOrigin-RevId: 413715299

==

jax/interpreters/mlir.py
==================
99182372;jax authors;2021-12-02 09:01:19 -0800;Merge pull request #8743 from jakevdp:scatter-weak-type
PiperOrigin-RevId: 413691628

==
==================
ea98cf42;jax authors;2021-12-02 08:57:11 -0800;Merge pull request #8754 from jakevdp:lax-dtype-none
PiperOrigin-RevId: 413690787

==
==================
da319cf3;Jake VanderPlas;2021-12-02 08:01:31 -0800;[sparse] refactor jax.experimental.sparse
Why? Better organization, and to avoid issues with circular imports.

PiperOrigin-RevId: 413679493

==

jax/experimental/sparse/__init__.py
jax/experimental/sparse/_base.py
jax/experimental/sparse/api.py
jax/experimental/sparse/bcoo.py
jax/experimental/sparse/coo.py
jax/experimental/sparse/csr.py
jax/experimental/sparse/ops.py
jax/experimental/sparse/transform.py
jax/experimental/sparse/util.py
tests/sparse_test.py
==================
b4dcf2b0;jax authors;2021-12-02 07:33:53 -0800;Merge pull request #8766 from hawkinsp:bazel421
PiperOrigin-RevId: 413671952

==
==================
3597b445;Peter Hawkins;2021-12-02 06:11:41 -0800;Express xmap tile/untile logic in lax via xla.lower_fun().
The lax APIs are simpler and avoid the need to port the code to MHLO.

PiperOrigin-RevId: 413657577

==

jax/experimental/maps.py
jax/interpreters/xla.py
==================
ffb7ec16;Peter Hawkins;2021-12-02 08:56:24 -0500;Update Bazel to 4.2.1.
Fixes #8573

==

.bazelversion
build/build.py
==================
404c3c7d;jax authors;2021-12-02 03:14:31 -0800;Merge pull request #8718 from jakevdp:config-doc
PiperOrigin-RevId: 413630185

==
==================
9d9244e3;Jake VanderPlas;2021-12-01 15:42:50 -0800;[x64] make jax.numpy functionality respect default dtypes

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
7869a6cb;jax authors;2021-12-01 14:34:17 -0800;Merge pull request #8753 from mattjj:checkify
PiperOrigin-RevId: 413513067

==
==================
659f8b79;Matthew Johnson;2021-10-29 09:23:27 -0700;add skeleton checkify transformation

==

jax/core.py
jax/experimental/checkify.py
tests/checkify_test.py
==================
b9770280;Jake VanderPlas;2021-12-01 10:33:26 -0800;lax.convert_element_type: better validation for new_dtype

==

jax/_src/dtypes.py
jax/_src/lax/lax.py
jax/_src/numpy/lax_numpy.py
tests/dtypes_test.py
==================
93943507;Peter Hawkins;2021-12-01 09:58:13 -0800;Refactor uses of xla.call_translations to use xla.register_translation.
No functional changes intended.

PiperOrigin-RevId: 413443279

==

jax/experimental/maps.py
jax/experimental/pjit.py
jax/interpreters/pxla.py
jax/interpreters/sharded_jit.py
==================
610187cd;jax authors;2021-12-01 08:42:35 -0800;Copybara import of the project:
--
6288d67fefec5dad8b0a42055e071d647ba1be06 by George Necula <gcnecula@gmail.com>:

Refactor the lowering of remat.

Replace the XLA-specific lowering with the same logic written
with LAX primitives. Then use this for HLO, MLIR, and jax2tf lowerings.

PiperOrigin-RevId: 413425828

==

jax/_src/ad_checkpoint.py
jax/_src/lax/control_flow.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/jax2tf_test.py
jax/interpreters/mlir.py
jax/interpreters/partial_eval.py
jax/interpreters/xla.py
==================
76d94391;George Necula;2021-12-01 08:17:37 -0800;Copybara import of the project:
--
b55e993be3aa2f0f846f6bb0935ae3d7c59a922a by George Necula <gcnecula@gmail.com>:

[jax2tf] Add tests for rng_uniform

These tests really only verify which dtypes are supported.
The actual numeric comparison is disabled, because rng_uniform
is statefull and calling multiple times produces different results.

PiperOrigin-RevId: 413420796

==

jax/experimental/jax2tf/g3doc/primitives_with_limited_support.md
jax/experimental/jax2tf/tests/jax2tf_limitations.py
jax/experimental/jax2tf/tests/primitive_harness.py
==================
baec8dca;jax authors;2021-12-01 02:21:24 -0800;Merge pull request #8748 from gnecula:clean_call_tf_test
PiperOrigin-RevId: 413357314

==
==================
b4b10f98;jax authors;2021-12-01 02:10:55 -0800;Merge pull request #8727 from gnecula:tf_fix_rng_test
PiperOrigin-RevId: 413355568

==
==================
5b177967;George Necula;2021-12-01 11:34:37 +0200;[jax2tf] Improved error checking for call_tf for functions with dynamic shapes.

==

jax/experimental/jax2tf/README.md
jax/experimental/jax2tf/call_tf.py
jax/experimental/jax2tf/tests/call_tf_test.py
==================
b55e993b;George Necula;2021-11-30 11:52:49 +0200;[jax2tf] Add tests for rng_uniform
These tests really only verify which dtypes are supported.
The actual numeric comparison is disabled, because rng_uniform
is statefull and calling multiple times produces different results.

==

jax/experimental/jax2tf/g3doc/primitives_with_limited_support.md
jax/experimental/jax2tf/tests/jax2tf_limitations.py
jax/experimental/jax2tf/tests/primitive_harness.py
==================
b7d7936e;jax authors;2021-12-01 01:46:36 -0800;Merge pull request #8716 from gnecula:remat_translation_lax
PiperOrigin-RevId: 413351001

==
==================
4d9d6497;jax authors;2021-11-30 23:46:15 -0800;Merge pull request #8742 from jakevdp:sparse-empty
PiperOrigin-RevId: 413333035

==
==================
6288d67f;George Necula;2021-11-29 13:34:47 +0200;Refactor the lowering of remat.
Replace the XLA-specific lowering with the same logic written
with LAX primitives. Then use this for HLO, MLIR, and jax2tf lowerings.

==

jax/_src/ad_checkpoint.py
jax/_src/lax/control_flow.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/jax2tf_test.py
jax/interpreters/mlir.py
jax/interpreters/partial_eval.py
jax/interpreters/xla.py
==================
88242bbf;jax authors;2021-11-30 23:39:12 -0800;Merge pull request #8741 from jakevdp:dtype-none
PiperOrigin-RevId: 413331832

==
==================
6bb882cb;jax authors;2021-11-30 21:44:55 -0800;Merge pull request #8722 from jakevdp:linalg-weak-types
PiperOrigin-RevId: 413317854

==
==================
800aac8f;jax authors;2021-11-30 21:33:37 -0800;Merge pull request #8681 from jakevdp:numpy-faq
PiperOrigin-RevId: 413316336

==
==================
3f2a4b10;jax authors;2021-11-30 18:18:15 -0800;Merge pull request #8650 from tlu7:update-qdwh-test
PiperOrigin-RevId: 413290729

==
==================
19554e21;Tianjian Lu;2021-11-30 15:47:50 -0800;Enable QDWH TPU tests.

==

jax/_src/lax/qdwh.py
tests/qdwh_test.py
==================
47e88ded;Jake VanderPlas;2021-11-30 15:43:06 -0800;[x64] ensure scatter functionality preserves weak_type

==

jax/_src/ops/scatter.py
tests/lax_numpy_indexing_test.py
==================
0b872bb5;Jake VanderPlas;2021-11-30 14:45:43 -0800;[sparse] add sparse.empty() utility to create empty matrix

==

jax/experimental/sparse/__init__.py
jax/experimental/sparse/bcoo.py
jax/experimental/sparse/ops.py
tests/sparse_test.py
==================
68e9e1c2;Peter Hawkins;2021-11-30 14:24:02 -0800;Consolidate more XLA-lowering logic between jit, pmap, and xmap.
Move remaining functions relating to building XLA HLO IR out of xla_bridge.py and into jax.interpreters.xla.

PiperOrigin-RevId: 413244450

==

docs/autodidax.ipynb
docs/autodidax.md
docs/autodidax.py
jax/_src/api.py
jax/_src/dispatch.py
jax/_src/lax/control_flow.py
jax/_src/lax/lax.py
jax/_src/lax/slicing.py
jax/_src/lax/windowed_reductions.py
jax/_src/lib/xla_bridge.py
jax/experimental/ann.py
jax/experimental/djax.py
jax/experimental/host_callback.py
jax/experimental/maps.py
jax/experimental/pjit.py
jax/interpreters/mlir.py
jax/interpreters/pxla.py
jax/interpreters/sharded_jit.py
jax/interpreters/xla.py
tests/api_test.py
tests/custom_object_test.py
tests/xla_bridge_test.py
==================
03197dd2;Jake VanderPlas;2021-11-30 13:51:38 -0800;[x64] improve consistency in handling dtype=None

==

jax/_src/dtypes.py
jax/_src/numpy/lax_numpy.py
jax/experimental/sparse/bcoo.py
tests/dtypes_test.py
tests/lax_numpy_test.py
==================
dd6a6f20;jax authors;2021-11-30 13:15:03 -0800;Merge pull request #8339 from mariogeiger:main
PiperOrigin-RevId: 413227294

==
==================
34ec8056;Peter Hawkins;2021-11-30 13:10:26 -0800;[MLIR] Fix test failures on GPU and TPU.
PiperOrigin-RevId: 413226939

==

jax/_src/lax/slicing.py
jax/experimental/compilation_cache/compilation_cache.py
==================
737d021f;jax authors;2021-11-30 12:57:58 -0800;Merge pull request #8329 from AdrienCorenflos:patch-1
PiperOrigin-RevId: 413223979

==
==================
6bac78d5;jax authors;2021-11-30 11:21:41 -0800;Merge pull request #8735 from pschuh:update-docs
PiperOrigin-RevId: 413200537

==
==================
022f8ac2;Jake VanderPlas;2021-11-29 13:41:47 -0800;[x64] preserve weak types in jax.scipy.sparse solvers

==

jax/_src/scipy/sparse/linalg.py
tests/lax_scipy_sparse_test.py
==================
46a10333;Parker Schuh;2021-11-30 10:20:11 -0800;Update device_get docs to mention parrallelism.

==

jax/_src/api.py
==================
aacee8f0;jax authors;2021-11-30 09:18:48 -0800;Merge pull request #8719 from jakevdp:pad-weak-type
PiperOrigin-RevId: 413166641

==
==================
8c2c054a;jax authors;2021-11-30 09:14:46 -0800;Merge pull request #8728 from LenaMartens:changelist/413128290
PiperOrigin-RevId: 413166628

==
==================
db3c3aae;Peter Hawkins;2021-11-30 08:49:33 -0800;[JAX] Correctly propagate Python errors out of pytree code when the keys of an enum value cannot be sorted.
Also catch std::runtime_error since the pytree code may throw it.

PiperOrigin-RevId: 413160923

==

tests/api_test.py
==================
fa411d86;Peter Hawkins;2021-11-30 06:08:26 -0800;[MLIR] Fix CPU test failures for MLIR lowering.
The remaining failures relate to buffer donation and xmap_p, which are not yet implemented.

Quite a few primitives still use fallback paths.

PiperOrigin-RevId: 413130158

==

jax/_src/lax/convolution.py
jax/_src/lax/lax.py
jax/_src/lax/slicing.py
jax/_src/lax/windowed_reductions.py
jax/_src/test_util.py
jax/experimental/ann.py
jax/interpreters/mlir.py
jax/interpreters/pxla.py
tests/api_test.py
tests/custom_object_test.py
==================
cb6a3f21;Lena Martens;2021-11-30 13:58:52 +0000;Leak checker: garbage collect before collecting hanging references.

==

jax/core.py
==================
42647e01;Peter Hawkins;2021-11-30 05:34:00 -0800;[MLIR] Make jit(pmap(...)) work in the MLIR lowering.
This is redundant with the XLA lowering, but it's probably not the end of the world as a temporary state. An alternative would have been to port the _xla_shard/_xla_unshard primitives to the LAX level and to use xla.lower_fun, but it's not immediately obvious to me how to access ReplicaId() without defining a new primitive. lax.axis_index() is similar but not identical.

Add an axis_env argument to xla.primitive_subcomputation for use by the MLIR fallback path.

PiperOrigin-RevId: 413124116

==

jax/_src/lax/control_flow.py
jax/_src/lax/lax.py
jax/_src/lax/parallel.py
jax/_src/lax/windowed_reductions.py
jax/interpreters/mlir.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
==================
81e9c758;jax authors;2021-11-30 02:07:10 -0800;Merge pull request #8704 from gnecula:tf_scatter_clip
PiperOrigin-RevId: 413092592

==
==================
66d3508f;Peter Hawkins;2021-11-29 15:25:51 -0800;Fix type signature of fallback translation rule for lax.linalg.eig.
I missed this rule when porting most of the other rules, because we don't have any tests for the "not implemented" behavior on GPU and TPU.

PiperOrigin-RevId: 412996342

==

jax/_src/lax/linalg.py
==================
31ff3400;Peter Hawkins;2021-11-29 14:24:36 -0800;Remove type annotations for id_tap.
The current annotation does not accurately describe the tap_with_device case.

PiperOrigin-RevId: 412982303

==

jax/experimental/host_callback.py
==================
12512cc9;Peter Hawkins;2021-11-29 12:39:19 -0800;Merge most of the MLIR JIT dispatch logic into the common primitive and JIT computation path.
Change the representation of both units and tokens at the runtime level to be a single buffer with shape pred[0]. While the MLIR lowering is happy to have a non 1:1 mapping between avals and IR values, the XLA lowering is not, so until we remove the XLA lowering it's easiest just to keep the mapping 1:1.

PiperOrigin-RevId: 412957231

==

jax/_src/dispatch.py
jax/_src/dtypes.py
jax/interpreters/mlir.py
jax/interpreters/xla.py
tests/custom_object_test.py
==================
080d7055;Jake VanderPlas;2021-11-29 12:16:10 -0800;[x64] jnp.pad: preserve weak types of inputs

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
5084a120;jax authors;2021-11-29 10:48:36 -0800;Merge pull request #8696 from jakevdp:fix-conv-padding
PiperOrigin-RevId: 412927683

==
==================
0e4e30f4;Jake VanderPlas;2021-11-29 10:44:54 -0800;DOC: add documentation for configuration functionality

==

docs/jax.config.rst
docs/jax.rst
==================
50935b56;Jake VanderPlas;2021-11-24 22:01:52 -0800;conv_transpose: allow padding to be specified as a list

==

jax/_src/lax/convolution.py
tests/lax_test.py
==================
34202ec8;jax authors;2021-11-29 07:23:48 -0800;Merge pull request #8700 from cloudhan:fix-win-mlir-capi-dll
PiperOrigin-RevId: 412881867

==
==================
4f80e6af;Diego Caballero;2021-11-29 06:26:12 -0800;[XLA] More error tolerance adjustments due to incoming change in XLA:CPU
We are about to change the vectorization strategy for XLA:CPU. As a result, we have
to increase the error tolerance of the impacted tests.

PiperOrigin-RevId: 412872724

==

tests/lax_scipy_test.py
==================
a94a8847;George Necula;2021-11-26 09:26:54 +0200;[jax2tf] Implement CLIP mode for scatter.
Also handle a limited form of shape polymorphism, where
the `operand.shape - update.shape` is a constant in the scatter dimensions,
even when the shapes may contain dimension variables.

==

jax/_src/lax/slicing.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
jax/experimental/jax2tf/tests/shape_poly_test.py
==================
c1ce8520;jax authors;2021-11-25 03:44:42 -0800;Merge pull request #8694 from jakevdp:fix-mask-scan
PiperOrigin-RevId: 412248701

==
==================
9acb7891;jax authors;2021-11-24 20:27:10 -0800;Internal change
PiperOrigin-RevId: 412187231

==

jax/_src/lax/lax.py
jax/experimental/jax2tf/jax2tf.py
tests/lax_numpy_test.py
==================
f21df8e4;jax authors;2021-11-24 19:36:10 -0800;Merge pull request #8665 from mattjj:tweak-array-copy-implementation
PiperOrigin-RevId: 412180051

==
==================
90c8f03a;Cloud Han;2021-11-25 09:18:35 +0800;update tf to avoid xutility(1607): error C2440: 'return': cannot convert from 'void' to 'llvm::detail::SafeIntIterator<unsigned int,false>

==

WORKSPACE
==================
76abd63a;Yash Katariya;2021-11-24 16:54:56 -0800;Rename `GlobalShardedDeviceArray` to `GlobalDeviceArray`
PiperOrigin-RevId: 412159014

==

jax/experimental/global_device_array.py
jax/experimental/pjit.py
jax/interpreters/pxla.py
tests/global_device_array_test.py
tests/pjit_test.py
==================
3653178e;Jake VanderPlas;2021-11-24 16:49:23 -0800;[x64] make scan masking rule more type safe

==

jax/_src/lax/control_flow.py
tests/masking_test.py
==================
7ec92bbe;jax authors;2021-11-24 16:23:58 -0800;Merge pull request #8692 from froystig:pmap-computation-hlo
PiperOrigin-RevId: 412154790

==
==================
0b647a5d;Roy Frostig;2021-11-24 15:17:02 -0800;make PmapComputation.hlo a method
For consistency with XlaComputation and MeshComputation.

==

jax/interpreters/pxla.py
==================
f196f378;jax authors;2021-11-24 15:01:24 -0800;Merge pull request #8667 from mattjj:custom-pp-eqn-rules
PiperOrigin-RevId: 412140658

==
==================
63a8f622;Matthew Johnson;2021-11-24 14:30:07 -0800;add copy_p to jax2tf not implemented list

==

jax/experimental/jax2tf/jax2tf.py
==================
3d16a329;Matthew Johnson;2021-11-24 14:26:55 -0800;add option for enabling custom jaxpr pprint rules

==

jax/core.py
==================
9a423bb4;Matthew Johnson;2021-11-24 14:15:15 -0800;add mlir lowering for copy_p

==

jax/_src/lax/lax.py
==================
cd1655ed;Matthew Johnson;2021-11-23 15:23:28 -0800;re-implement lax._array_copy as a primitive

==

jax/_src/lax/lax.py
tests/lax_numpy_test.py
==================
17add1ce;Matthew Johnson;2021-11-23 15:03:24 -0800;sipmlify array_copy implementation
Use nested calls rather than an add-zero.

==

jax/_src/lax/lax.py
==================
b489fc73;Yash Katariya;2021-11-24 14:09:18 -0800;Add str and repr to GSDA
PiperOrigin-RevId: 412132125

==

jax/experimental/gsda.py
tests/gsda_test.py
==================
52fe8217;Peter Hawkins;2021-11-24 12:52:08 -0800;Merge xla._partition_outputs and util.unflatten.
PiperOrigin-RevId: 412117736

==

jax/_src/dispatch.py
jax/_src/util.py
jax/experimental/djax.py
jax/interpreters/mlir.py
jax/interpreters/xla.py
==================
75880d22;jax authors;2021-11-24 12:29:48 -0800;Merge pull request #8671 from froystig:aot-xmap
PiperOrigin-RevId: 412114141

==
==================
4a72e57c;Jake VanderPlas;2021-11-24 12:04:02 -0800;DOC: add FAQ section on JAX vs. Numpy performance

==

docs/faq.rst
docs/notebooks/quickstart.ipynb
docs/notebooks/quickstart.md
==================
db0e3fbe;Peter Hawkins;2021-11-24 11:15:04 -0800;Reenable pytype checking for jax._src.lax.lax.
pytype checking for this module is no longer excessively slow after the module was split.

PiperOrigin-RevId: 412098920

==

jax/_src/lax/lax.py
jax/_src/lax/parallel.py
==================
e53ec025;Roy Frostig;2021-11-23 18:22:12 -0800;ahead-of-time lowering and compilation frontend for xmap

==

jax/experimental/maps.py
tests/xmap_test.py
==================
d81114de;jax authors;2021-11-24 10:30:14 -0800;Merge pull request #8668 from jakevdp:canonicalize-axis
PiperOrigin-RevId: 412088801

==
==================
e6950dd6;Diego Caballero;2021-11-24 10:02:35 -0800;[XLA] Adjust the error tolerance of 'lax_control_flow_test.py'
We are about to change the vectorization strategy for XLA:CPU. As a result,
we have to increase the error tolerance of the impacted tests.

PiperOrigin-RevId: 412083490

==

tests/lax_control_flow_test.py
==================
4d646772;Diego Caballero;2021-11-24 08:07:13 -0800;[XLA] Adjust the error tolerance of tests impacted by upcoming change in XLA:CPU
We are about to change the vectorization strategy for XLA:CPU. This change may lead
to some numerical differences due to the fact the vectorization might happen differently
(e.g., code that was scalar could now be vectorized, code that was vectorized could now
be scalar, vectorization may happen with a different VL, etc.). As a result, we have
to increase the error tolerance of the impacted tests.

PiperOrigin-RevId: 412061380

==

tests/lax_scipy_test.py
==================
317edcda;Cloud Han;2021-11-25 00:07:25 +0800;fix mlir capi dll building and linking

==

build/BUILD.bazel
jaxlib/jax.bzl
jaxlib/mlir/_mlir_libs/BUILD.bazel
==================
4e219220;Peter Hawkins;2021-11-24 07:47:48 -0800;Use imports relative to the `jax` package consistently, rather than `.`-relative imports.
This is more consistent, since currently we use a mix of both styles. It may also help pytype yield more accurate types.

PiperOrigin-RevId: 412057514

==

jax/__init__.py
jax/_src/api.py
jax/_src/api_util.py
jax/_src/errors.py
jax/_src/lib/xla_bridge.py
jax/_src/nn/functions.py
jax/_src/numpy/fft.py
jax/_src/numpy/lax_numpy.py
jax/_src/numpy/linalg.py
jax/_src/numpy/polynomial.py
jax/_src/numpy/vectorize.py
jax/_src/scipy/optimize/_lbfgs.py
jax/_src/scipy/optimize/bfgs.py
jax/_src/scipy/optimize/minimize.py
jax/_src/tree_util.py
jax/core.py
jax/errors.py
jax/experimental/__init__.py
jax/experimental/gsda.py
jax/experimental/jax2tf/__init__.py
jax/experimental/jax2tf/call_tf.py
jax/experimental/jax2tf/impl_no_xla.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/shape_poly_tf.py
jax/experimental/maps.py
jax/experimental/pjit.py
jax/experimental/sparse/__init__.py
jax/experimental/sparse/ad.py
jax/experimental/sparse/bcoo.py
jax/experimental/sparse/ops.py
jax/experimental/x64_context.py
jax/interpreters/ad.py
jax/interpreters/batching.py
jax/interpreters/invertible_ad.py
jax/interpreters/masking.py
jax/interpreters/partial_eval.py
jax/interpreters/pxla.py
jax/interpreters/sharded_jit.py
jax/interpreters/xla.py
jax/lax/__init__.py
jax/lib/__init__.py
jax/linear_util.py
jax/nn/__init__.py
jax/numpy/__init__.py
jax/scipy/__init__.py
jax/scipy/sparse/__init__.py
jax/scipy/stats/__init__.py
==================
b10a3062;jax authors;2021-11-24 03:17:04 -0800;Merge pull request #8522 from marcvanzee:compare
PiperOrigin-RevId: 412012879

==
==================
3c34b62c;jax authors;2021-11-24 02:44:31 -0800;Merge pull request #8676 from gnecula:clean_hcb
PiperOrigin-RevId: 412006660

==
==================
0915f6d6;George Necula;2021-11-24 11:57:28 +0200;mend

==

jax/experimental/host_callback.py
==================
277a1d77;George Necula;2021-11-24 11:47:11 +0200;[hcb] Cleanup to account for changes in minimum jaxlib version
We can assume now that jaxlib has the support for CustomCall.

==

jax/experimental/host_callback.py
==================
839d410d;Peter Hawkins;2021-11-23 18:57:45 -0800;[MLIR] Move most MLIR translation rules into lax.
PiperOrigin-RevId: 411942327

==

jax/_src/custom_derivatives.py
jax/_src/dispatch.py
jax/_src/lax/control_flow.py
jax/_src/lax/convolution.py
jax/_src/lax/lax.py
jax/_src/lax/slicing.py
jax/_src/lax/windowed_reductions.py
jax/core.py
jax/interpreters/ad.py
jax/interpreters/mlir.py
==================
bab16a9b;jax authors;2021-11-23 17:30:30 -0800;Merge pull request #8661 from jakevdp:ad-weak-types
PiperOrigin-RevId: 411930608

==
==================
f6e3f1b4;Jake VanderPlas;2021-11-23 16:54:02 -0800;Cleanup: remove duplicate canonicalize_axis utility

==

jax/_src/lax/control_flow.py
jax/_src/lax/lax.py
jax/_src/random.py
jax/_src/scipy/fft.py
jax/_src/util.py
==================
83d8c6c2;Peter Hawkins;2021-11-23 16:34:33 -0800;Split slice/update_slice/gather/scatter out of jax._src.lax.lax into jax._src.lax.slicing.
To solve a circular dependency problem where some functions in jax._src.lax.lax depend on slicing, I moved a number of utility functions, e.g., standard_primitive, into a new module `jax._src.lax.utils`. Only utilities that need to be present at module import time were moved.

PiperOrigin-RevId: 411921794

==

jax/_src/lax/control_flow.py
jax/_src/lax/lax.py
jax/_src/lax/parallel.py
jax/_src/lax/slicing.py
jax/_src/lax/utils.py
jax/_src/lax/windowed_reductions.py
jax/experimental/jax2tf/impl_no_xla.py
jax/experimental/jax2tf/jax2tf.py
jax/lax/__init__.py
==================
8430deda;Matthew Johnson;2021-11-23 15:51:49 -0800;custom pp_eqn rules, simpler xla_call print

==

docs/jaxpr.rst
jax/core.py
jax/interpreters/xla.py
==================
496e400c;Jake VanderPlas;2021-11-23 15:04:08 -0800;[x64] Make autodiff respect weak types

==

jax/_src/abstract_arrays.py
jax/_src/ad_checkpoint.py
jax/_src/api.py
jax/_src/lax/lax.py
jax/core.py
tests/api_test.py
==================
28b3c46b;jax authors;2021-11-23 12:54:16 -0800;Merge pull request #8663 from jakevdp:stray-breakpoint
PiperOrigin-RevId: 411875485

==
==================
4204a25c;Peter Hawkins;2021-11-23 12:35:23 -0800;Split convolution functions out of jax._src.lax.lax and into a separate module (jax._src.lax.convolution).
No public API changes.

PiperOrigin-RevId: 411871903

==

jax/_src/ad_checkpoint.py
jax/_src/lax/convolution.py
jax/_src/lax/lax.py
jax/_src/lax/other.py
jax/_src/lax/windowed_reductions.py
jax/lax/__init__.py
==================
e14eaf06;Jake VanderPlas;2021-11-23 12:17:08 -0800;cleanup: remove stray debugging breakpoint

==

jax/interpreters/batching.py
==================
ca443b5c;jax authors;2021-11-23 10:24:44 -0800;Merge pull request #8656 from froystig:backend-type-pmap-lowering
PiperOrigin-RevId: 411842480

==
==================
6cf5c4af;Peter Hawkins;2021-11-23 10:02:43 -0800;[XLA:CPU] Implement 3D convolutions using Eigen.
Eigen convolutions are much faster than the naive fallback IR.

[JAX] Relax jax2tf convolution test tolerance.

PiperOrigin-RevId: 411837376

==

jax/experimental/jax2tf/tests/jax2tf_limitations.py
==================
dd9afcfe;jax authors;2021-11-23 09:04:45 -0800;Merge pull request #8658 from gnecula:tf_arange_improve_error
PiperOrigin-RevId: 411824157

==
==================
ddc3a126;George Necula;2021-11-23 11:35:05 +0200;Improve error when jnp.arange is used with non-constant arguments

==

jax/_src/numpy/lax_numpy.py
jax/experimental/jax2tf/tests/shape_poly_test.py
jax/interpreters/masking.py
==================
2ec14888;jax authors;2021-11-23 05:58:15 -0800;Merge pull request #8629 from jakevdp:dtypes-dtype
PiperOrigin-RevId: 411791488

==
==================
a1dee027;George Necula;2021-11-23 04:26:17 -0800;Disable recent change to wrap jax2tf lowered code with tf.function
Recent change: https://github.com/google/jax/pull/7839

PiperOrigin-RevId: 411776541

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/jax2tf_test.py
==================
db0a48ac;jax authors;2021-11-23 01:53:36 -0800;Merge pull request #8657 from gnecula:tf_lint
PiperOrigin-RevId: 411751197

==
==================
72d9d355;George Necula;2021-11-23 11:03:10 +0200;Fix lint and mypy errors

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/jax2tf_test.py
==================
055df6d9;jax authors;2021-11-23 01:15:29 -0800;Merge pull request #8653 from jakevdp:fix-x64-context
PiperOrigin-RevId: 411745165

==
==================
9781f365;jax authors;2021-11-23 00:56:49 -0800;Merge pull request #7839 from gnecula:tf_jit
PiperOrigin-RevId: 411742459

==
==================
43433078;George Necula;2021-09-07 18:36:47 +0300;[jax2tf] Force TF compilation for code under jax.jit.
Previously, jax.jit was ignored by jax2tf. This can result in the
converted code being much slower than the JAX core, unless the
user adds an explicit `tf.function(jit_compile=True)`. With this
change that wrapper is added automatically for all code fragments
under jax.jit. Note that most jax.numpy functions are annotated
with jax.jit, so with this change they will all be compiled.

When doing this I ran into problems with tf.custom_gradient and
tf.function. As documented in the
[tf.custom_gradient](https://www.tensorflow.org/api_docs/python/tf/custom_gradient)
documentation, you get a LookupError when trying to build the gradient
of a tf.function, even if it has a tf.custom_gradient defined. The
recommended solution is to add a tf.stop_gradient. This is safe, since
jax2tf will always wrap the converted functions with a tf.custom_gradient.

==

CHANGELOG.md
jax/experimental/jax2tf/README.md
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/jax2tf_test.py
jax/experimental/jax2tf/tests/tf_test_util.py
==================
9f833457;Roy Frostig;2021-11-22 18:22:11 -0800;complete annotation for XLA bridge functions that take a backend name or object

==

jax/_src/lib/xla_bridge.py
jax/interpreters/pxla.py
==================
0f0bc3ee;jax authors;2021-11-22 17:29:43 -0800;Merge pull request #8449 from froystig:aot-pmap
PiperOrigin-RevId: 411684527

==
==================
c4d9c467;Jake VanderPlas;2021-11-22 09:29:43 -0800;[x64] regularize dtype helpers

==

jax/_src/api.py
jax/_src/dtypes.py
jax/_src/lax/lax.py
jax/_src/numpy/lax_numpy.py
tests/dtypes_test.py
tests/lax_test.py
==================
b0d334a8;jax authors;2021-11-22 15:07:56 -0800;Merge pull request #8652 from hawkinsp:scatterdocs
PiperOrigin-RevId: 411657624

==
==================
c5c78b5f;Jake VanderPlas;2021-11-22 14:54:30 -0800;[x64] make x64_context_test more robust

==

tests/x64_context_test.py
==================
6cc7d674;jax authors;2021-11-22 13:54:44 -0800;Merge pull request #8648 from jakevdp:arange-dtype
PiperOrigin-RevId: 411640866

==
==================
361b7367;Peter Hawkins;2021-11-22 13:49:14 -0800;Implement the select_and_gather_add translation rule via lower_fun.
This allows us to share the logic in the MLIR lowering.

PiperOrigin-RevId: 411639693

==

jax/_src/lax/windowed_reductions.py
jax/interpreters/mlir.py
==================
20a1517e;Roy Frostig;2021-11-22 13:48:31 -0800;factor tuple conversions into common pmap setup logic

==

jax/_src/api.py
==================
cf64a945;Roy Frostig;2021-11-22 08:03:28 -0800;refine pmap-related annotations

==

jax/_src/api.py
jax/interpreters/pxla.py
==================
4679f455;Peter Hawkins;2021-11-22 13:32:25 -0800;Change the default out-of-bounds behavior for jax.ops.segment_... to FILL_OR_DROP.
This matches the documented behavior.

Fixes https://github.com/google/jax/issues/8634

PiperOrigin-RevId: 411635687

==

CHANGELOG.md
jax/_src/ops/scatter.py
tests/lax_numpy_indexing_test.py
==================
54153062;Peter Hawkins;2021-11-22 13:20:55 -0800;Make lax.reduce_window variadic.
This is similar to the support in lax.reduce(), where the operands and init_values become pytrees. This is a strict superset of the current API, so users should not need updates.

Variadic lax.reduce_window() is only supported on CPU and TPU at the moment, not GPU.

PiperOrigin-RevId: 411632993

==

jax/_src/lax/lax.py
jax/_src/lax/windowed_reductions.py
jax/experimental/jax2tf/jax2tf.py
jax/interpreters/mlir.py
tests/lax_test.py
==================
f3aa5fa9;Peter Hawkins;2021-11-22 15:19:14 -0500;Document lax.GatherScatterMode.
Recommend the .at[...] property in the docstrings for lax.scatter_ operators.

Add several missing lax.scatter_ operators to the index.

==

docs/jax.lax.rst
jax/_src/lax/lax.py
==================
ad6ce74d;Peter Hawkins;2021-11-22 11:17:44 -0800;Skip some polar decomposition tests that fail on A100.
Works around https://github.com/google/jax/issues/8628

PiperOrigin-RevId: 411604717

==

tests/lax_scipy_test.py
==================
52044556;Jake VanderPlas;2021-11-22 11:00:07 -0800;[x64] avoid dtype conversions for arange arguments

==

jax/_src/numpy/lax_numpy.py
==================
f4351e84;Peter Hawkins;2021-11-22 10:21:01 -0800;Disable QDWH tests that fail on GPU and TPU.
PiperOrigin-RevId: 411591003

==

tests/qdwh_test.py
==================
dcded6a8;Peter Hawkins;2021-11-22 09:33:38 -0800;Fix incorrect gradient for base-dilated reduce window.
https://github.com/google/jax/pull/8606 introduced a runtime error where as a consequence of the move, a reference to `slice` became a reference to the builtin slice operator instead of `lax.slice`.

After fixing that and while added a test, I noticed that the gradient was wrong before: we should have been slicing the result, not the operand in the transpose rule's handling of base dilation.

Also enable some TPU tests that now pass since we have variadic reduce-window support on TPU.

PiperOrigin-RevId: 411579650

==

jax/_src/lax/windowed_reductions.py
tests/lax_autodiff_test.py
==================
bf1dd3a8;Roy Frostig;2021-11-18 17:44:27 -0800;refactor pmap staging, lowering, and compilation

==

jax/interpreters/pxla.py
==================
3328fa48;Roy Frostig;2021-11-17 14:30:48 -0800;rename backend to backend_name in parallel lowering

==

jax/interpreters/pxla.py
==================
9f82d780;Roy Frostig;2021-11-04 09:32:19 -0700;typecheck pmap executable call arguments

==

jax/interpreters/pxla.py
tests/pmap_test.py
==================
6eca3875;Marc van Zee;2021-11-22 18:02:53 +0100;Merge branch 'main' of http://www.github.com/google/jax into compare

==
==================
7b25e05f;Marc van Zee;2021-11-18 11:13:26 +0100;Improve logics for numerical comparison

==

jax/experimental/jax2tf/examples_eval/all_examples.py
jax/experimental/jax2tf/examples_eval/converters.py
jax/experimental/jax2tf/examples_eval/converters_results.md
jax/experimental/jax2tf/examples_eval/converters_results.md.template
jax/experimental/jax2tf/examples_eval/examples_test.py
==================
fcdc0a6c;Roy Frostig;2021-11-04 09:21:00 -0700;ahead-of-time lowering and compilation frontend for pmap

==

jax/_src/api.py
jax/interpreters/pxla.py
tests/pmap_test.py
==================
8f88b897;Roy Frostig;2021-11-03 10:41:20 -0700;factor pmap compilation into lowering and compilation separately
Includes minor changes to mesh computation lowering/compilation, for
interface consistency.

==

jax/interpreters/pxla.py
==================
d262bae8;Peter Hawkins;2021-11-22 08:22:10 -0800;Split jax.interpreters.xla up into three pieces: * jax._src.device_array, which contains the definition of DeviceArray. * jax.interpreters.xla, which contains code for lowering jaxprs into XLA computations. * jax._src.dispatch, which contains code for executing primitives and jit-compiled functions (xla_call_p's impl logic).
The purpose of splitting up this file is that I would like to treat jax.interpreters.mlir lowering as an alternative to jax.interpreters.xla, but we wish to share the device_array and computation dispatch pieces. Currently jax.interpreters.mlir duplicates most of the dispatch logic. (That refactoring is for a future change; this change just moves the existing code around.)

PiperOrigin-RevId: 411565432

==

jax/_src/api.py
jax/_src/device_array.py
jax/_src/dispatch.py
jax/_src/dlpack.py
jax/_src/lax/lax.py
jax/_src/numpy/lax_numpy.py
jax/_src/test_util.py
jax/core.py
jax/experimental/djax.py
jax/experimental/host_callback.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jet.py
jax/experimental/maps.py
jax/interpreters/batching.py
jax/interpreters/mlir.py
jax/interpreters/pxla.py
jax/interpreters/sharded_jit.py
jax/interpreters/xla.py
jax/numpy/__init__.py
tests/api_test.py
tests/custom_object_test.py
tests/dtypes_test.py
tests/lax_control_flow_test.py
tests/lax_numpy_test.py
tests/lax_test.py
tests/multi_device_test.py
tests/pmap_test.py
tests/xla_interpreter_test.py
==================
34855def;jax authors;2021-11-22 07:47:11 -0800;Merge pull request #8643 from google:gnecula-patch-1
PiperOrigin-RevId: 411558417

==
==================
263a7ff1;George Necula;2021-11-22 17:17:09 +0200;Update README.md

==

jax/experimental/jax2tf/README.md
==================
fca3da51;Peter Hawkins;2021-11-20 10:12:52 -0800;Switch most uses of jax.lax in jax2tf to use the public API.
The only reason jax2tf needs access to the internals of jax.lax is when it wants to reuse various translation rule helpers; keep those as explicit internal imports.

This change is partially to minimize churn as jax._src.lax is restructured.

PiperOrigin-RevId: 411276891

==

jax/experimental/jax2tf/impl_no_xla.py
jax/experimental/jax2tf/jax2tf.py
==================
65a99dba;Yash Katariya;2021-11-19 18:55:46 -0800;Add local_data API for GSDA
PiperOrigin-RevId: 411188164

==

jax/experimental/gsda.py
tests/gsda_test.py
==================
d1de3094;Yash Katariya;2021-11-19 14:47:32 -0800;Adding support for a special value for in_axis_resources (`pjit.FROM_GSDA`) when GSDA is an input.
PiperOrigin-RevId: 411148899

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/pjit.py
tests/pjit_test.py
==================
34a2ffcf;jax authors;2021-11-19 14:43:38 -0800;Merge pull request #8624 from jakevdp:quantile-complex
PiperOrigin-RevId: 411148049

==
==================
cad3fd80;jax authors;2021-11-19 13:31:29 -0800;Make it easier to see what are the difference between two structures.
When structures are very large, users can end up with pages and pages describing the two structures, and finding exactly where they differ can be tricky. This change makes these differences more obvious.

PiperOrigin-RevId: 411131921

==

jax/_src/lax/control_flow.py
tests/lax_control_flow_test.py
==================
a93c99d7;Jake VanderPlas;2021-11-19 11:46:59 -0800;[sparse] specify operand layouts in cusparse.py
Why? This can fix issues when inputs have non-standard layouts

PiperOrigin-RevId: 411110145

==

jaxlib/cusparse.py
==================
72276366;Jake VanderPlas;2021-11-19 10:54:09 -0800;jnp.quantile: explicitly raise error for complex input

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
f08a5a07;jax authors;2021-11-19 09:44:30 -0800;Merge pull request #8552 from mattjj:elide-more-convert-element-types
PiperOrigin-RevId: 411082070

==
==================
abbf78b5;Matthew Johnson;2021-11-15 21:21:29 -0800;generalize jaxpr simplification machinery
also:
* fix jit invariance bug around weak types
* elide trivial broadcasts

This started as an attempt to simplify some jaxpr pretty-prints, by (1)
eliding some convert_element_type applications that I thought were
unnecessary and (2) eliding some trivial broadcasts.

But it turned out that we were actually pruning more
convert_element_types than we should! In particular, see
test_weak_type_jit_invariance; that test fails on the main branch even
if we add the fixes in DynamicJaxprTrace.new_const, because [this
logic](https://github.com/google/jax/blob/b53a1740428a1b44d2b9f7694a00263918e6a309/jax/interpreters/partial_eval.py#L1225)
was not paying attention to weak types and hence clobbered them.

In addition to fixing those bugs that turned up (the changes in
DynamicJaxprTrace, and in what is now _convert_elt_type_fwd_rule), this
PR generalizes the jaxpr simplification machinery so as not to be a
couple special cases on convert_element_type_p. Insetad, we have tables
of rules! How we love them.

These rule signatures should let us add simplifications like forwarding
variables through calls and other higher-order primitives. That's all
future work though.

==

docs/jaxpr.rst
jax/_src/lax/lax.py
jax/core.py
jax/interpreters/partial_eval.py
tests/api_test.py
tests/host_callback_test.py
tests/x64_context_test.py
==================
75e063cb;jax authors;2021-11-19 08:19:49 -0800;Merge pull request #8606 from hawkinsp:laxsplit
PiperOrigin-RevId: 411065571

==
==================
602dd39a;jax authors;2021-11-18 16:46:25 -0800;Merge pull request #8576 from jakevdp:bcoo-dot-general-types
PiperOrigin-RevId: 410929542

==
==================
193746fb;Jake VanderPlas;2021-11-18 15:53:09 -0800;[sparse] bcoo_[sp]dot_general: require inputs to have the same type

==

jax/experimental/sparse/bcoo.py
==================
45d7ade9;Peter Hawkins;2021-11-18 16:31:06 -0500;Split windowed reductions and their gradients into a separate file inside the lax implementation.

==

jax/_src/lax/control_flow.py
jax/_src/lax/lax.py
jax/_src/lax/windowed_reductions.py
jax/experimental/jax2tf/impl_no_xla.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jet.py
jax/lax/__init__.py
==================
4c504ea6;jax authors;2021-11-18 15:14:35 -0800;Merge pull request #8602 from hawkinsp:mypyjaxlib
PiperOrigin-RevId: 410910137

==
==================
58d5ee97;Peter Hawkins;2021-11-18 17:44:15 -0500;Increment minimum jaxlib version in mypy precommit hook.

==

.pre-commit-config.yaml
jax/interpreters/pxla.py
==================
f391b5b5;jax authors;2021-11-18 14:53:06 -0800;Merge pull request #8565 from jakevdp:spdot-general
PiperOrigin-RevId: 410905194

==
==================
3ee76a80;jax authors;2021-11-18 14:36:00 -0800;Merge pull request #8601 from mattjj:fix-vmap-ppermute
PiperOrigin-RevId: 410900441

==
==================
848675df;Jake VanderPlas;2021-11-17 17:27:04 -0800;[sparse] spdot_general: implement many more cases

==

jax/experimental/sparse/bcoo.py
tests/sparse_test.py
==================
d4225548;jax authors;2021-11-18 14:31:31 -0800;Merge pull request #8584 from jakevdp:fix-sum-duplicates
PiperOrigin-RevId: 410900403

==
==================
ef6fb074;jax authors;2021-11-18 14:11:56 -0800;Merge pull request #8598 from hawkinsp:jaxlib
PiperOrigin-RevId: 410895340

==
==================
acca0bfa;Jake VanderPlas;2021-11-17 16:50:29 -0800;[sparse] fix batched version of BCOO.sum_duplicates

==

jax/experimental/sparse/bcoo.py
tests/sparse_test.py
==================
fa5520bc;jax authors;2021-11-18 14:07:30 -0800;Merge pull request #8567 from jakevdp:unique-fill-value
PiperOrigin-RevId: 410893781

==
==================
bf74f2e5;jax authors;2021-11-18 14:03:03 -0800;Merge pull request #8581 from jakevdp:sparse-matmul-dtype
PiperOrigin-RevId: 410893387

==
==================
2cb23580;Matthew Johnson;2021-11-18 13:40:25 -0800;make vmap ppermute consistent with pmap/docstring
This was a bad bug! Unfortunately our tests didn't catch it, in part
because permutations on size-two axes are either trivial or not. The
simplest test might have a size-three axis.

==

jax/_src/lax/parallel.py
tests/batching_test.py
tests/pmap_test.py
==================
606ca26e;Peter Hawkins;2021-11-18 12:44:27 -0800;Simplify implementation of lower_fun in XLA and MLIR lowering paths.
* Always propagate the axis environment, and remove the parallel argument to lower_fun() because it is no longer needed.
* Don't update the name_stack in the MLIR version. The XLA version no longer does this.
* Simplify the call signature of the MLIR version by always accepting avals_out but noting that it is ignored so it is legal to pass, say, None.

PiperOrigin-RevId: 410875100

==

jax/_src/lax/parallel.py
jax/interpreters/mlir.py
jax/interpreters/xla.py
==================
3fd3c46f;Peter Hawkins;2021-11-18 14:55:19 -0500;Increase minimum jaxlib version to 0.1.74.

==

jax/_src/api.py
jax/_src/lax/lax.py
jax/_src/lax/linalg.py
jax/experimental/compilation_cache/compilation_cache.py
jax/interpreters/mlir.py
jax/interpreters/pxla.py
jax/version.py
tests/api_test.py
tests/debug_nans_test.py
tests/lax_numpy_indexing_test.py
tests/linalg_test.py
tests/pickle_test.py
tests/pjit_test.py
tests/pmap_test.py
tests/tree_util_test.py
==================
52421da0;Peter Hawkins;2021-11-18 07:27:31 -0800;[MLIR] Add support for pruning token values from computation inputs/outputs. This fixes an (existing) test failure when enabling MLIR lowerings.
Also don't wrap translation rule exceptions: this breaks some tests.

PiperOrigin-RevId: 410798026

==

jax/interpreters/mlir.py
==================
2bd40e4c;jax authors;2021-11-18 06:54:38 -0800;Merge pull request #8594 from hawkinsp:docs
PiperOrigin-RevId: 410790809

==
==================
58199b4b;Peter Hawkins;2021-11-18 09:42:35 -0500;Delete the XLA in Python notebook.
Its tests are failing, and it describes a non-public API that we are phasing out.

==

docs/index.rst
docs/notebooks/XLA_in_Python.ipynb
docs/notebooks/XLA_in_Python.md
==================
639517f9;jax authors;2021-11-18 03:05:49 -0800;Merge pull request #8516 from gnecula:tf_image_resize
PiperOrigin-RevId: 410753699

==
==================
fda30adf;Marc van Zee;2021-11-18 10:50:35 +0100;Merge upstream main

==
==================
3715fcb9;George Necula;2021-11-18 10:23:53 +0200;Added workaround for bug in XLA

==

jax/_src/image/scale.py
jax/_src/numpy/lax_numpy.py
jax/core.py
tests/image_test.py
==================
75155f5e;George Necula;2021-11-05 17:03:46 +0200;[shape_poly] Refactor arange and image_resize for shape polymorphism
Bug: 8367

Small refactoring to jax.image.resize to make it compatible with
shape polymorphismin jax2tf. In the process added also support for
jnp.arange([dim_poly]). Note that the underlying lax.iota already
supported shape polymorphism.

==

jax/_src/image/scale.py
jax/_src/numpy/lax_numpy.py
jax/core.py
jax/experimental/jax2tf/shape_poly.py
jax/experimental/jax2tf/tests/shape_poly_test.py
==================
c37c62cf;jax authors;2021-11-17 23:01:19 -0800;Merge pull request #8574 from hawkinsp:jaxlib
PiperOrigin-RevId: 410715936

==
==================
21d4ca3a;jax authors;2021-11-17 22:56:46 -0800;Merge pull request #8583 from jakevdp:remove-prints
PiperOrigin-RevId: 410715862

==
==================
0bee9b3d;Jake VanderPlas;2021-11-16 20:28:37 -0800;jnp.unique: ensure that output dtype is not affected by fill_value

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
7ce55684;Jake VanderPlas;2021-11-17 14:04:53 -0800;[sparse] Improve type safety of cusparse lowerings
Fixes https://github.com/google/jax/issues/8577

PiperOrigin-RevId: 410624036

==

jax/experimental/sparse/__init__.py
jax/experimental/sparse/ops.py
tests/sparse_test.py
==================
bef54603;Jake VanderPlas;2021-11-17 13:57:01 -0800;Remove stray print statements

==

tests/sparse_test.py
==================
50ce1db8;Jake VanderPlas;2021-11-17 12:57:18 -0800;[sparse] support type promotion in CSR/COO matmul

==

jax/experimental/sparse/ops.py
tests/sparse_test.py
==================
bb3f1989;Tom Hennigan;2021-11-17 10:01:14 -0800;Ensure that size property of large ShardedDeviceArrays does not overflow.
This tests a fix that landed in XLA commit tensorflow/tensorflow@4216a88.

PiperOrigin-RevId: 410557846

==

tests/pmap_test.py
==================
7902ddac;Peter Hawkins;2021-11-17 11:43:19 -0500;Update jaxlib versions.

==

CHANGELOG.md
jaxlib/version.py
setup.py
==================
72f5a3ca;George Necula;2021-11-17 08:05:29 -0800;[shape_poly] Refactor shape_poly to be independent of TF.
Separates out into shape_poly_tf.py the TF-specific parts
of shape polymorphism (essentially using tf.shape to get
the actual shape, along with tf.{add,subtract,multiply} to
evaluate shape polynomials.

PiperOrigin-RevId: 410529872

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/shape_poly.py
jax/experimental/jax2tf/shape_poly_tf.py
jax/experimental/jax2tf/tests/shape_poly_test.py
==================
0f568384;Peter Hawkins;2021-11-17 07:20:18 -0800;Fix a number of bugs in MLIR translation rules.
These bugs were found by running the existing tests with MLIR translations enabled, so no new tests are needed:

* Fix bug where we failed to propagate the symbol table to inner computations. This could lead to duplicate function names.
* Remove support for tupling arguments. It turns out that the MHLO->HLO conversion, which was the intended user, does not accept tupled arguments in the input MHLO. Instead, arguments are tupled if requested by a flag to the converter.
* Add a generic fallback to translate via the XLA HLO to MHLO if there is no MHLO-specific translation rule.
* If we are padding in select_and_scatter_add, we also need to slice the output.
* create_token may take arguments (which should be ignored).
* Fixed a number of misunderstandings of the mhlo.infeed contract.
* Untuple results in the fallback path iff the primitive is marked as having multiple results, not depending on the actual arity.
* Change xla.primitive_subcomputation not to filter token arguments, which is appropriate for a subcomputation.

PiperOrigin-RevId: 410519678

==

jax/_src/util.py
jax/interpreters/mlir.py
jax/interpreters/xla.py
==================
06d5e99d;Marc van Zee;2021-11-17 15:09:06 +0100;Add numerical comparison with TF

==

jax/experimental/jax2tf/examples_eval/converters.py
jax/experimental/jax2tf/examples_eval/converters_results.md
jax/experimental/jax2tf/examples_eval/examples_converter.py
==================
2ed6d7ca;jax authors;2021-11-17 06:18:44 -0800;Merge pull request #8555 from tlu7:update-lax-qdwh
PiperOrigin-RevId: 410508632

==
==================
1063b7d3;jax authors;2021-11-17 06:10:38 -0800;Merge pull request #8559 from jakevdp:sparse-shape-tuple
PiperOrigin-RevId: 410506456

==
==================
f067d0d6;jax authors;2021-11-17 06:05:53 -0800;Merge pull request #8544 from jakevdp:test-arange
PiperOrigin-RevId: 410506434

==
==================
4494321c;jax authors;2021-11-17 04:06:58 -0800;Merge pull request #8550 from abattery:main
PiperOrigin-RevId: 410488948

==
==================
dad23cea;jax authors;2021-11-17 00:35:17 -0800;Merge pull request #8560 from jakevdp:bcoo-dedupe
PiperOrigin-RevId: 410453183

==
==================
b53a1740;jax authors;2021-11-16 17:17:01 -0800;Merge pull request #8564 from hawkinsp:testfix
PiperOrigin-RevId: 410388721

==
==================
9e09b511;jax authors;2021-11-16 15:55:44 -0800;Merge pull request #8381 from LenaMartens:changelist/405399581
PiperOrigin-RevId: 410371788

==
==================
6883571c;jax authors;2021-11-16 15:40:25 -0800;Merge pull request #8561 from mattjj:add-donated-invars-to-xlacomputation
PiperOrigin-RevId: 410368194

==
==================
e14fea3b;Lena Martens;2021-10-25 15:53:52 +0100;Overload jnp ops which are polymorphic to an array's value and support PRNGKeys.

==

jax/_src/numpy/lax_numpy.py
jax/_src/prng.py
tests/random_test.py
==================
1bcedd58;Peter Hawkins;2021-11-16 17:36:28 -0500;Fix test failures and update changelog.
Use dtypes.issubdtype to test for subtyping otherwise we mishandle bfloat16 dtypes.
Don't pass an empty list to concatenate() when converting a shape to a value.
Forbid empty lists as arguments to lax.concatenate().

==

CHANGELOG.md
jax/_src/lax/lax.py
==================
5d35b8a1;Matthew Johnson;2021-11-16 11:21:27 -0800;add donated_invars to xla.XlaComputation
Co-authored-by: Brennan Saeta <saeta@google.com>

==

jax/_src/api.py
jax/experimental/pjit.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
tests/api_test.py
tests/pjit_test.py
==================
b7e3129d;jax authors;2021-11-16 12:07:57 -0800;Merge pull request #8562 from hawkinsp:jaxlib
PiperOrigin-RevId: 410315575

==
==================
a864c95f;Peter Hawkins;2021-11-16 14:53:50 -0500;Update XLA.

==

WORKSPACE
==================
9491414c;jax authors;2021-11-16 11:25:44 -0800;Merge pull request #8499 from jakevdp:load-wrapper
PiperOrigin-RevId: 410303891

==
==================
cd531f25;Jake VanderPlas;2021-11-16 11:22:03 -0800;[sparse] add BCOO.sum_duplicates() with nse option

==

jax/experimental/sparse/bcoo.py
tests/sparse_test.py
==================
5c31e6dd;Jake VanderPlas;2021-11-16 09:02:15 -0800;[sparse] ensure shapes are represented as tuples

==

jax/experimental/sparse/ops.py
tests/sparse_test.py
==================
1137aa11;Jake VanderPlas;2021-11-09 09:43:46 -0800;Properly handle bfloat16 in jnp.load()

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
21fa3b3f;Tianjian Lu;2021-11-15 22:36:27 -0800;Change QR import in lax.linalg.qdwh.

==

jax/_src/lax/qdwh.py
==================
476ca943;jax authors;2021-11-15 19:39:09 -0800;Merge pull request #8549 from jurahul:master
PiperOrigin-RevId: 410141717

==
==================
3f34ee42;Peter Hawkins;2021-11-15 18:26:05 -0800;Make a non-None platform mandatory during XLA translation.
The main change is plumbing a platform into calls to xla.primitive_subcomputation.

PiperOrigin-RevId: 410130715

==

jax/_src/lax/control_flow.py
jax/_src/lax/lax.py
jax/_src/lax/linalg.py
jax/_src/lax/parallel.py
jax/experimental/djax.py
jax/interpreters/mlir.py
jax/interpreters/xla.py
==================
62c7744e;Jaesung Chung;2021-11-16 02:09:05 +0000;Update TFLite concrete function conversion codes to have the associated trackable object.
Providing trackable objects is now recommended for the users. This makes the
concrete function conversion API be based on the new SavedModel importer, which
will enable new TensorFlow Lite features including variable support, resources
and variant tensor, and signature concept.

==

jax/experimental/jax2tf/examples/tflite/mnist/README.md
jax/experimental/jax2tf/examples/tflite/mnist/mnist.py
jax/experimental/jax2tf/examples_eval/converters.py
==================
14719092;jax authors;2021-11-15 17:02:51 -0800;Merge pull request #8548 from jakevdp:enable-spdot-test
PiperOrigin-RevId: 410115528

==
==================
ee59958d;jax authors;2021-11-15 16:58:25 -0800;Merge pull request #8535 from jakevdp:regularize-dtype
PiperOrigin-RevId: 410115486

==
==================
0776c4e6;Rahul Joshi;2021-11-15 16:48:52 -0800;Enable testWhileLoopBatchedWithConstBody for GPU
The XLA:GPU issue causing the internal error has been fixed.

==

tests/lax_control_flow_test.py
==================
f17d411b;Jake VanderPlas;2021-11-13 05:04:31 -0800;[x64] clean up usage of dtypes.dtype

==

jax/_src/lax/lax.py
jax/_src/numpy/lax_numpy.py
jax/experimental/djax.py
jax/interpreters/mlir.py
==================
fbd9009c;Jake VanderPlas;2021-11-15 13:33:51 -0800;Add test of jnp.arange() corner case

==

tests/lax_numpy_test.py
==================
e4291e0b;Jake VanderPlas;2021-11-15 16:21:04 -0800;[sparse] re-enable bcoo_spdot_general test

==

tests/sparse_test.py
==================
be751d1d;jax authors;2021-11-15 16:21:00 -0800;Merge pull request #8534 from jakevdp:array-dtype
PiperOrigin-RevId: 410106997

==
==================
072a71de;jax authors;2021-11-15 16:16:41 -0800;Merge pull request #8547 from jakevdp:cusparse-dtypes
PiperOrigin-RevId: 410106970

==
==================
11094fa3;Jake VanderPlas;2021-11-15 14:48:23 -0800;[sparse] add dtype assertions to several cusparse wrappers

==

jaxlib/cusparse.py
==================
1c9ce540;jax authors;2021-11-15 14:00:58 -0800;Merge pull request #8546 from mattjj:readme-update
PiperOrigin-RevId: 410073658

==
==================
57f4fc9b;Matthew Johnson;2021-11-15 13:24:33 -0800;update readme to focus on most active libraries

==

README.md
==================
d434b098;jax authors;2021-11-15 08:25:28 -0800;Merge pull request #8532 from jakevdp:scalar-defaults
PiperOrigin-RevId: 409986777

==
==================
70b8a6a8;Peter Hawkins;2021-11-15 07:56:34 -0800;Add a prototype IREE backend for JAX.
This is to support experimentation with the combination of JAX/IREE. Many things do not work yet.

PiperOrigin-RevId: 409980064

==

.github/workflows/ci-build.yaml
jax/_src/iree.py
jax/_src/lib/xla_bridge.py
jax/_src/test_util.py
jax/_src/util.py
jax/interpreters/mlir.py
jax/interpreters/xla.py
mypy.ini
==================
f6282c74;Marc van Zee;2021-11-15 15:46:45 +0100;Small fixes

==

jax/experimental/jax2tf/examples_eval/all_examples.py
jax/experimental/jax2tf/examples_eval/examples_converter.py
==================
8bb2c766;Marc van Zee;2021-11-15 15:19:19 +0100;Change random data and updates table

==

jax/experimental/jax2tf/examples_eval/converters.py
jax/experimental/jax2tf/examples_eval/converters_results.md
==================
775236ab;Marc van Zee;2021-11-15 13:29:52 +0100;Update PPO shapes fixing numerical diff

==

jax/experimental/jax2tf/examples_eval/all_examples.py
jax/experimental/jax2tf/examples_eval/converters_results.md
==================
2c17076f;Marc van Zee;2021-11-15 12:30:50 +0100;Fix incorrect param ordering

==

jax/experimental/jax2tf/examples_eval/converters.py
==================
f2d52f87;Marc van Zee;2021-11-15 12:20:28 +0100;Merge branch 'main' of http://www.github.com/google/jax into compare

==
==================
6fa860d5;jax authors;2021-11-12 22:41:42 -0800;Internal change
PiperOrigin-RevId: 409591497

==

jax/_src/config.py
jax/interpreters/pxla.py
tests/pjit_test.py
==================
e94cc97d;jax authors;2021-11-12 21:46:37 -0800;Output GSDAs from pjit if `jax_gsda_out` flag is enabled.
PiperOrigin-RevId: 409585439

==

jax/_src/config.py
jax/interpreters/pxla.py
tests/pjit_test.py
==================
155475de;Yash Katariya;2021-11-12 19:59:14 -0800;Output GSDAs from pjit if `jax_gsda_out` flag is enabled.
PiperOrigin-RevId: 409573181

==

jax/_src/config.py
jax/interpreters/pxla.py
tests/pjit_test.py
==================
960f2c13;Jake VanderPlas;2021-11-12 15:34:45 -0800;[x64] jnp.array: improve type inference testing

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
3c851330;Jake VanderPlas;2021-11-12 15:09:17 -0800;[x64] set scalar defaults to 64-bit types

==

jax/_src/dtypes.py
==================
3ac3ec9a;jax authors;2021-11-12 14:04:53 -0800;Merge pull request #8524 from reza-amd:patch-1
PiperOrigin-RevId: 409496068

==
==================
eeb9bf7a;jax authors;2021-11-12 14:00:29 -0800;Merge pull request #8520 from jakevdp:fix-percentile
PiperOrigin-RevId: 409495454

==
==================
43a0cf02;jax authors;2021-11-12 11:11:34 -0800;Merge pull request #8528 from hawkinsp:mlir
PiperOrigin-RevId: 409455853

==
==================
649eab36;Skye Wanderman-Milne;2021-11-12 09:59:09 -0800;Add option to key on extra command-line flags in persistent compilation cache.
PiperOrigin-RevId: 409437212

==

jax/experimental/compilation_cache/compilation_cache.py
==================
09ccd909;jax authors;2021-11-12 09:25:00 -0800;Merge pull request #8491 from jakevdp:bcoo-dot-along-batch
PiperOrigin-RevId: 409429211

==
==================
ce7ae6bd;Peter Hawkins;2021-11-12 12:05:33 -0500;Make MLIR bindings build work under Bazel.
Tested on Linux and Mac, but not Windows.

==

.bazelrc
WORKSPACE
build/build_wheel.py
jaxlib/mlir/_mlir_libs/BUILD.bazel
jaxlib/setup.py
==================
80751b37;Jake VanderPlas;2021-11-12 09:01:27 -0800;bcoo_dot_general: support contraction along batch dimensions

==

jax/experimental/sparse/bcoo.py
tests/sparse_test.py
==================
8381a4ad;Yash Katariya;2021-11-11 19:15:41 -0800;Initial GSDA-pjit integration.
* GSDA input is handled properly
* pjit gsda mesh mismatch is checked
* gsda dtype and input dtype is checked
* If GSDA is an input, then other input types are not allowed for now.

PiperOrigin-RevId: 409299559

==

jax/experimental/gsda.py
jax/experimental/pjit.py
tests/gsda_test.py
tests/pjit_test.py
==================
e511b280;Reza Rahimi;2021-11-11 17:02:59 -0800;fix for translation to cudaDataType

==

jaxlib/cusparse.cc
==================
3df11aee;Marc van Zee;2021-11-11 20:19:47 +0100;Add numerical comparison for jax2tf -> TFLite

==

jax/experimental/jax2tf/examples_eval/all_examples.py
jax/experimental/jax2tf/examples_eval/converters.py
jax/experimental/jax2tf/examples_eval/converters_results.md
jax/experimental/jax2tf/examples_eval/examples_converter.py
==================
41ecf71c;jax authors;2021-11-11 08:32:37 -0800;Merge pull request #8509 from froystig:aot-lowered-compiled-api
PiperOrigin-RevId: 409155638

==
==================
11fd3769;Jake VanderPlas;2021-11-11 08:26:12 -0800;jnp.percentile: use full precision for 64-bit inputs

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
8f6e077d;Peter Hawkins;2021-11-11 06:36:31 -0800;Adds an initial prototype of an alternate JAX compilation path that emits the MLIR MHLO/CHLO dialects instead of classic XLA HLO.
This lowering is missing a number of features, but it is complete enough that many tests pass, and that I would like to start checking it in.

PiperOrigin-RevId: 409134016

==

.github/workflows/ci-build.yaml
jax/_src/config.py
jax/_src/lax/lax.py
jax/_src/lib/__init__.py
jax/_src/lib/mlir/__init__.py
jax/_src/lib/mlir/dialects/__init__.py
jax/_src/util.py
jax/interpreters/mlir.py
jax/interpreters/xla.py
mypy.ini
==================
9285eed6;jax authors;2021-11-11 05:53:07 -0800;Merge pull request #8515 from gnecula:tf_const
PiperOrigin-RevId: 409126875

==
==================
9175ed61;George Necula;2021-11-11 13:21:55 +0200;[jax2tf] Improve the TF constant sharing
Use fewer cache tables for constants: one per top-level converted function,
and a separate table for the gradient.

Bug: #7992

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/jax2tf_test.py
jax/experimental/jax2tf/tests/tf_test_util.py
==================
7f3609f0;jax authors;2021-11-10 19:25:34 -0800;Merge pull request #8382 from mattjj:meshcomputation-hlo
PiperOrigin-RevId: 409036808

==
==================
cdc9df2b;Roy Frostig;2021-11-10 18:57:39 -0800;add Lowered and Compiled to the jax public package

==

jax/__init__.py
==================
969d146d;jax authors;2021-11-10 16:36:26 -0800;Merge pull request #8507 from jakevdp:bcoo-validate-indices
PiperOrigin-RevId: 409007658

==
==================
05708aef;Matthew Johnson;2021-10-27 20:27:09 -0700;jit(f).lower(...) works w/ duck typed shape/dtype

==

jax/_src/api.py
tests/api_test.py
tests/pjit_test.py
==================
8a094e82;jax authors;2021-11-10 14:26:46 -0800;Merge pull request #8508 from zhangqiaorjc:update-pypi
PiperOrigin-RevId: 408977396

==
==================
ad4cb947;Qiao Zhang;2021-11-10 13:41:25 -0800;update version and changelog for pypi

==

CHANGELOG.md
jax/version.py
==================
03215de1;Jake VanderPlas;2021-11-10 13:39:45 -0800;[sparse] improve bcoo validation

==

jax/experimental/sparse/bcoo.py
==================
b81f2243;jax authors;2021-11-10 04:24:45 -0800;Merge pull request #8457 from dan-zheng:fix-typos
PiperOrigin-RevId: 408844193

==
==================
a19245fa;jax authors;2021-11-09 23:44:41 -0800;Merge pull request #8498 from jakevdp:meshgrid-args
PiperOrigin-RevId: 408797970

==
==================
7b79497b;jax authors;2021-11-09 14:52:15 -0800;Merge pull request #8488 from mattjj:issue8469
PiperOrigin-RevId: 408712381

==
==================
bc4cd679;Jake VanderPlas;2021-11-09 09:51:02 -0800;refactor jax.numpy.meshgrid & improve argument validation

==

jax/_src/numpy/lax_numpy.py
==================
249cdff2;Peter Hawkins;2021-11-09 09:15:17 -0800;Remove explicit type stub for jax/lib/__init__.py, now that the pytype bug is fixed.
PiperOrigin-RevId: 408626593

==

jax/_src/lib/__init__.pyi
==================
e5e5bb3a;jax authors;2021-11-08 19:39:04 -0800;Merge pull request #8403 from shoyer:empty-map-args-error
PiperOrigin-RevId: 408501394

==
==================
633daca2;jax authors;2021-11-08 17:25:10 -0800;Merge pull request #8485 from jakevdp:tpu-driver-version
PiperOrigin-RevId: 408478915

==
==================
f223afc8;jax authors;2021-11-08 17:20:34 -0800;Merge pull request #8466 from jakevdp:bcoo-vmappable
PiperOrigin-RevId: 408478884

==
==================
e6bba2bb;jax authors;2021-11-08 17:15:41 -0800;Merge pull request #8450 from jakevdp:precision-doc
PiperOrigin-RevId: 408478883

==
==================
ae8f472a;Matthew Johnson;2021-11-08 14:52:00 -0800;fix #8649
Co-authored-by: Roy Frostig <frostig@google.com>

==

jax/_src/lax/control_flow.py
tests/lax_control_flow_test.py
==================
f2a95905;Jake VanderPlas;2021-11-08 14:15:31 -0800;Document jax.lax.Precision

==

jax/_src/lax/lax.py
jax/_src/lax/other.py
jax/_src/lax/polar.py
jax/_src/numpy/lax_numpy.py
jax/_src/scipy/eigh.py
==================
f8129ad7;Jake VanderPlas;2021-11-05 05:07:27 -0700;[sparse] register BCOO as a vmappable

==

jax/experimental/sparse/bcoo.py
jax/experimental/sparse/ops.py
==================
f1261000;jax authors;2021-11-08 11:11:18 -0800;Merge pull request #8486 from jakevdp:tracer-leaks-debug
PiperOrigin-RevId: 408391540

==
==================
b472ac3c;Jake VanderPlas;2021-11-08 09:21:18 -0800;jax_check_tracer_leaks: add warning about debuggers

==

jax/_src/config.py
jax/core.py
==================
61a3abbe;Jake VanderPlas;2021-11-08 08:59:16 -0800;colab_tpu.setup_tpu: allow user specification ot tpu driver version

==

jax/tools/colab_tpu.py
==================
799df7e5;jax authors;2021-11-06 13:54:10 -0700;Merge pull request #8474 from froystig:nullary-switch
PiperOrigin-RevId: 408067546

==
==================
786d4a37;Yash Katariya;2021-11-05 09:30:39 -0700;Fix the type annotations by making it more general.
PiperOrigin-RevId: 407840653

==

jax/experimental/gsda.py
==================
b63a8c81;Roy Frostig;2021-11-05 09:11:01 -0700;generalize lax.switch to take any number of operands

==

jax/_src/lax/control_flow.py
tests/lax_control_flow_test.py
==================
082e7869;Roy Frostig;2021-11-05 09:10:11 -0700;tests for multi-operand cond (#8467)

==

tests/lax_control_flow_test.py
==================
1388dbe2;jax authors;2021-11-05 08:23:26 -0700;Merge pull request #8455 from jakevdp:sp-matmul
PiperOrigin-RevId: 407826315

==
==================
de717963;jax authors;2021-11-05 08:18:58 -0700;Merge pull request #8438 from jakevdp:sparse-tracer
PiperOrigin-RevId: 407826235

==
==================
55ec9476;Yash Katariya;2021-11-05 00:15:03 -0700;GSDA callback implementation for `from_batched_callback` and `from_batched_callback_with_devices`.
Also implemented `global_shards()` and made `Data` field optional in the `Shard` class.

PiperOrigin-RevId: 407756749

==

jax/experimental/gsda.py
tests/gsda_test.py
==================
87570933;jax authors;2021-11-04 17:03:33 -0700;Merge pull request #8467 from mattjj:nullary-cond
PiperOrigin-RevId: 407703601

==
==================
895f15d5;Matthew Johnson;2021-11-04 15:41:16 -0700;generalize lax.cond to accept any number of args

==

jax/_src/lax/control_flow.py
==================
fd733603;jax authors;2021-11-04 16:04:07 -0700;Merge pull request #8451 from mattjj:wip-merging-typeclasses
PiperOrigin-RevId: 407691408

==
==================
a549ab56;Yash Katariya;2021-11-04 15:01:05 -0700;Initial GlobalShardedDeviceArray implementation.
Currently after this CL, you can create the GSDA and get the shard information available on each local devices.

Basic callback has been implemented. The other 2 callbacks are in cl/406929209

PiperOrigin-RevId: 407678204

==

jax/experimental/gsda.py
jax/interpreters/pxla.py
tests/gsda_test.py
==================
50e7e952;Matthew Johnson;2021-10-06 14:18:07 -0700;add internal `vmappable` interface (part 1)
Co-authored-by: Dougal Maclaurin <dougalm@google.com>

==

jax/_src/api.py
jax/_src/lax/control_flow.py
jax/interpreters/batching.py
tests/api_test.py
tests/batching_test.py
==================
2cdfd6db;jax authors;2021-11-04 14:11:48 -0700;Merge pull request #8464 from jakevdp:sparse-broadcast-vmap
PiperOrigin-RevId: 407666971

==
==================
11f6c535;Peter Hawkins;2021-11-04 13:29:24 -0700;Add MLIR:Python bindings to jaxlib build.
PiperOrigin-RevId: 407657331

==

WORKSPACE
build/BUILD.bazel
build/build_wheel.py
jaxlib/jax.bzl
jaxlib/mlir/BUILD.bazel
jaxlib/mlir/_mlir_libs/BUILD.bazel
jaxlib/mlir/symlink_files.bzl
jaxlib/setup.py
==================
b00061e0;Jake VanderPlas;2021-11-04 13:02:46 -0700;[sparse]: add tracer-based implementation of sparsify
Co-authored by: Matthew Johnson <mattjj@google.com>

==

jax/experimental/sparse/__init__.py
jax/experimental/sparse/transform.py
tests/sparsify_test.py
==================
039008a9;Jake VanderPlas;2021-11-04 12:43:42 -0700;[sparse] simplify bcoo_dot_general implementation

==

jax/experimental/sparse/bcoo.py
==================
8f7637d5;Jake VanderPlas;2021-11-04 10:54:23 -0700;[sparse] add full support for BCOO matmul operator

==

jax/experimental/sparse/bcoo.py
tests/sparse_test.py
==================
402e3c12;jax authors;2021-11-04 08:12:53 -0700;[XLA:TPU] Allow user to override reduction input size in TPU ANN.
PiperOrigin-RevId: 407582874

==

jax/experimental/ann.py
==================
d728c921;jax authors;2021-11-04 06:02:34 -0700;Merge pull request #8459 from gnecula:tf_doc
PiperOrigin-RevId: 407561573

==
==================
27de09cc;George Necula;2021-11-04 10:45:53 +0100;[jax2tf] Improve the documentation for jax2tf and SavedModel
In particular, document better how to avoid embedding large constants
in the SavedModel.

==

jax/experimental/jax2tf/README.md
==================
04bb4d59;Dan Zheng;2021-11-03 20:00:52 -0700;[jax2tf] Fix typos.
Add missing single quotation marks in `parse_spec` ValueError messages.

==

jax/experimental/jax2tf/shape_poly.py
==================
752823e5;jax authors;2021-11-03 13:11:47 -0700;Merge pull request #8445 from hawkinsp:bazelver
PiperOrigin-RevId: 407408616

==
==================
afc5f9d5;jax authors;2021-11-03 12:06:12 -0700;[JAX] Align the jax ann abstract shape inference with the C++ implementation.
PiperOrigin-RevId: 407393662

==

jax/experimental/ann.py
==================
c90fbadd;jax authors;2021-11-03 11:01:03 -0700;Merge pull request #8444 from hawkinsp:reducebatch
PiperOrigin-RevId: 407377905

==
==================
9212d5c8;Peter Hawkins;2021-11-03 11:18:08 -0400;Print the bazel version from build.py.
Increment the minimum version that build.py checks for to 3.7.2.

==

build/build.py
==================
ba4db33f;Peter Hawkins;2021-11-03 09:36:31 -0400;Implement lax.reduce() batching rule case where batch dimensions differ between operands.

==

jax/_src/lax/lax.py
tests/lax_vmap_test.py
==================
31c2da70;jax authors;2021-11-03 05:40:36 -0700;Merge pull request #8430 from jakevdp:random-shuffle
PiperOrigin-RevId: 407314752

==
==================
8f7f1bb0;jax authors;2021-11-03 05:35:59 -0700;Merge pull request #8433 from jakevdp:csr-to-coo
PiperOrigin-RevId: 407314284

==
==================
a2752a2a;jax authors;2021-11-02 15:14:12 -0700;Merge pull request #8437 from tlu7:update-coo-comments
PiperOrigin-RevId: 407189046

==
==================
4814d757;Tianjian Lu;2021-11-02 14:13:42 -0700;Update coo_matvec and coo_matmat comments.

==

jaxlib/cusparse.py
==================
6a44baf9;Peter Hawkins;2021-11-02 13:51:06 -0700;Add gather/scatter mode support to jax2tf. Use xla.lower_fun() to implement gather/scatter modes so we can share the implementation between the XLA translation and jax2tf.
Add an undocumented "fill" mode to jnp.take() that corresponds to the "fill" mode of `lax.gather`.

PiperOrigin-RevId: 407169324

==

jax/_src/lax/lax.py
jax/_src/numpy/lax_numpy.py
jax/experimental/jax2tf/impl_no_xla.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/primitive_harness.py
==================
e28bb230;Marc van Zee;2021-11-02 12:59:32 -0700;Adds support for batch dimensions for `lax.gather` when enable_xla=False. This allows us to, for instance, convert `jax.vmap(lax.dynamic_slice)`.
This CL also cleans up the logic around this ops.

PiperOrigin-RevId: 407157252

==

jax/experimental/jax2tf/examples_eval/converters_results.md
jax/experimental/jax2tf/impl_no_xla.py
jax/experimental/jax2tf/tests/primitive_harness.py
==================
7d7a41b8;Jake VanderPlas;2021-11-02 12:56:24 -0700;[sparse] refactor csr_to_coo utility

==

jax/experimental/sparse/ops.py
tests/sparse_test.py
==================
9f14923a;jax authors;2021-11-02 12:39:51 -0700;Merge pull request #8404 from jakevdp:csr-autodiff
PiperOrigin-RevId: 407151667

==
==================
c88a96af;jax authors;2021-11-02 12:35:26 -0700;Merge pull request #8424 from jakevdp:result-type-strong
PiperOrigin-RevId: 407151402

==
==================
734a9135;Jake VanderPlas;2021-11-02 11:39:41 -0700;jax.random.permutation: add independent keyword

==

CHANGELOG.md
jax/_src/random.py
tests/random_test.py
==================
79c0c094;Jake VanderPlas;2021-11-02 11:32:21 -0700;[sparse] add autodiff & transpose rules for csr primitives

==

jax/experimental/sparse/ops.py
tests/sparse_test.py
==================
e82cdcb7;jax authors;2021-11-02 09:29:36 -0700;Merge pull request #8426 from jakevdp:ellipsis-bool
PiperOrigin-RevId: 407103101

==
==================
7b6fb491;Jake VanderPlas;2021-11-01 12:24:05 -0700;jax.numpy: fix boolean indexing with Ellipsis

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_indexing_test.py
==================
6dce6c92;jax authors;2021-11-02 09:01:07 -0700;Merge pull request #8402 from jakevdp:coo-matmat-cusparse
PiperOrigin-RevId: 407096275

==
==================
24b08e27;Jake VanderPlas;2021-11-01 12:27:52 -0700;[sparse] add transpose rule for coo_matmat

==

jax/experimental/sparse/ops.py
tests/sparse_test.py
==================
c67e3d86;Jake VanderPlas;2021-11-01 11:44:14 -0700;jnp.result_type: respect default types

==

jax/_src/dtypes.py
tests/dtypes_test.py
tests/lax_numpy_test.py
==================
1cfb54bd;jax authors;2021-11-01 10:34:29 -0700;Merge pull request #8422 from jakevdp:default-uint
PiperOrigin-RevId: 406860779

==
==================
91cb226b;Jake VanderPlas;2021-11-01 10:05:27 -0700;jax.numpy: add missing uint definition

==

jax/_src/dtypes.py
jax/_src/numpy/lax_numpy.py
jax/numpy/__init__.py
==================
335857bf;jax authors;2021-11-01 07:41:40 -0700;Merge pull request #8043 from hawkinsp:iter
PiperOrigin-RevId: 406822933

==
==================
5ae07956;jax authors;2021-11-01 07:25:38 -0700;Merge pull request #8421 from hawkinsp:svd
PiperOrigin-RevId: 406820268

==
==================
05e6f849;Peter Hawkins;2021-11-01 09:54:46 -0400;Implement hermitian=... option on jax.numpy.linalg.svd.

==

jax/_src/numpy/linalg.py
tests/linalg_test.py
==================
32319e1b;Sharad Vikram;2021-10-29 15:49:31 -0700;Fix forward for PR #8392 (made `source_info` for `new_jaxpr_eqn` argument optional again)
PiperOrigin-RevId: 406466709

==

jax/_src/source_info_util.py
jax/core.py
jax/experimental/djax.py
jax/experimental/maps.py
jax/interpreters/ad.py
jax/interpreters/partial_eval.py
jax/interpreters/xla.py
==================
c5f73b3d;Tianjian Lu;2021-10-29 14:44:27 -0700;[JAX] Added `jax.lax.linalg.qdwh`.
PiperOrigin-RevId: 406453671

==

CHANGELOG.md
docs/jax.lax.rst
jax/_src/lax/qdwh.py
jax/lax/linalg.py
tests/qdwh_test.py
==================
d403b6d0;jax authors;2021-10-29 14:01:22 -0700;Merge pull request #8380 from jakevdp:type-fixes
PiperOrigin-RevId: 406444408

==
==================
40d6f5ed;Jake VanderPlas;2021-10-29 11:02:01 -0700;Tighten up dtypes across the package

==

jax/_src/lax/lax.py
jax/_src/nn/functions.py
jax/_src/numpy/lax_numpy.py
jax/_src/scipy/optimize/_lbfgs.py
jax/_src/scipy/optimize/bfgs.py
jax/_src/scipy/optimize/line_search.py
jax/_src/scipy/special.py
==================
853fca22;jax authors;2021-10-29 13:48:56 -0700;Merge pull request #8385 from jakevdp:fix-reshape
PiperOrigin-RevId: 406441883

==
==================
f3c4ae3d;jax authors;2021-10-29 12:48:06 -0700;Merge pull request #8401 from mattjj:djax2
PiperOrigin-RevId: 406429471

==
==================
860e5e74;Stephan Hoyer;2021-10-29 12:43:57 -0700;Generate a better error message if [pv]map receives no array arguments
The current error message for `jax.vmap(lambda x: 1)({})` is:
`ValueError: vmap must have at least one non-None value in in_axes`

With this PR, it becomes:
`ValueError: vmap wrapped function must be passed at least one argument
containing an array, got empty *args=({},) and **kwargs={}`

==

jax/_src/api.py
tests/api_test.py
==================
2cb74e1f;Matthew Johnson;2021-10-29 10:56:39 -0700;make djax run again

==

jax/_src/api.py
jax/experimental/djax.py
==================
d0065d8a;Peter Hawkins;2021-10-29 06:33:47 -0700;Forbid collapsing of size-0 dimensions in gather() operations.
The shape rule for gather should not allow collapsing size-0 dimensions because it is nonsensical: "collapsing" a size 0 dimension might turn an empty array into a non-empty array. And it's quite unclear what that non-empty array should contain. Forbid such collapsing in the JAX shape rule.

This appears to have arisen in practice when the size of the array is known to be 0 in another dimension, e.g., batching with a size 0 batch dimension. Instead, avoid using a gather to create these arrays. This isn't an ideal solution because it isn't polymorphic in the shape, but I think to do better we would need to change the definition of `gather` more extensively.

PiperOrigin-RevId: 406346374

==

jax/_src/lax/lax.py
jax/_src/numpy/lax_numpy.py
tests/lax_test.py
==================
345ab509;jax authors;2021-10-29 06:08:27 -0700;Merge pull request #8389 from tamaranorman:patch-1
PiperOrigin-RevId: 406342759

==
==================
2ab00151;jax authors;2021-10-28 23:07:25 -0700;Copybara import of the project:
--
b40245e38d7837a7777735ad60f3b5b1ac2d499d by Sharad Vikram <sharad.vikram@gmail.com>:

Use `SourceInfo` named tuple to keep track of source information

PiperOrigin-RevId: 406293469

==

jax/_src/source_info_util.py
jax/core.py
jax/experimental/djax.py
jax/experimental/maps.py
jax/interpreters/ad.py
jax/interpreters/partial_eval.py
jax/interpreters/xla.py
==================
af3c1acd;jax authors;2021-10-28 20:18:46 -0700;Merge pull request #8392 from sharadmv:source-info
PiperOrigin-RevId: 406275194

==
==================
954cb998;Peter Hawkins;2021-10-28 16:48:59 -0700;[JAX] Update JAX users in preparation for a change that makes iteration over a JAX array return JAX arrays, instead of NumPy arrays.
See https://github.com/google/jax/pull/8043 for context as to why we are making this change.

The upshot for most users is that the values returned by iteration over a JAX array are now themselves JAX arrays, with the semantics of JAX arrays, which sometimes differ from the semantics of NumPy scalars and arrays. In particular:

* Unlike NumPy scalars 0-dimensional JAX arrays are not hashable. This change updates users to call `.tolist()` or `np.asarray(...)` when the output of iterating over a JAX array is hashed, used as a dictionary key, or passed to `set(...)`. In some instances, we can just call `numpy` functions instead of `jax.numpy` functions to build the array in the first place.
* This change confuses Pandas and PIL when a JAX array is converted to a Pandas dataframe or a PIL image. For now, cast JAX arrays to a NumPy array first before passing them into those libraries.
* We now need to use `numpy.testing.assert_array_equal` instead of `numpy.testing.assert_equal` to compare JAX arrays.

PiperOrigin-RevId: 406247725

==

jax/_src/lax/lax.py
tests/ann_test.py
==================
b40245e3;Sharad Vikram;2021-10-27 15:20:45 -0700;Use `SourceInfo` named tuple to keep track of source information

==

jax/_src/source_info_util.py
jax/core.py
jax/experimental/djax.py
jax/experimental/maps.py
jax/interpreters/ad.py
jax/interpreters/partial_eval.py
jax/interpreters/xla.py
==================
934bfc0f;jax authors;2021-10-28 13:22:04 -0700;Merge pull request #8364 from zhangqiaorjc:dsys
PiperOrigin-RevId: 406205507

==
==================
d890ae90;tamaranorman;2021-10-28 18:37:15 +0100;Use default backend if no backend supplied to xla_computation

==

jax/_src/api.py
==================
9ea55468;Peter Hawkins;2021-10-28 09:53:37 -0700;[JAX] Update users of `jax.ops.index...` functions, which are deprecated.
* replace uses of `jax.ops.index[...]` with `jax.numpy.index_exp[...]`, which is a standard NumPy function that does the same thing.
* remove some redundant uses of `jax.ops.index[...]`, where the expression is passed directly to an indexed accessor function like `.at[...]`.
* update some remaining users of `jax.ops.index_update(x, jax.ops.index[idx], y)` to use the `x.at[idx].set(y)` APIs.

PiperOrigin-RevId: 406162068

==

cloud_tpu_colabs/Wave_Equation.ipynb
docs/jax.numpy.rst
jax/_src/errors.py
==================
706d3b48;jax authors;2021-10-28 06:48:51 -0700;Merge pull request #8387 from jakevdp:bcoo-typo
PiperOrigin-RevId: 406127557

==
==================
7dba9813;jax authors;2021-10-28 06:42:50 -0700;Merge pull request #8383 from jakevdp:test-jupyter-core
PiperOrigin-RevId: 406126581

==
==================
aa5e3c3b;Jake VanderPlas;2021-10-28 06:40:22 -0700;typo: primitive names do not need _p

==

jax/experimental/sparse/bcoo.py
==================
4ccd72bc;jax authors;2021-10-28 02:15:57 -0700;Merge pull request #8309 from google:variance_scaling_axes
PiperOrigin-RevId: 406088360

==
==================
a56aee96;James Bradbury;2021-10-27 22:06:06 -0700;fix whitespace

==

tests/nn_test.py
==================
b3509c19;James Bradbury;2021-10-27 22:05:08 -0700;fix typo

==

tests/nn_test.py
==================
cfe0156f;Jake VanderPlas;2021-10-27 20:44:25 -0700;readthedocs: use new build configuration & update to Python 3.9

==

.readthedocs.yml
docs/requirements.txt
==================
723361f8;Jake VanderPlas;2021-10-27 20:36:50 -0700;lax_numpy: replace some reshapes with expand_dims

==

jax/_src/numpy/lax_numpy.py
==================
b6fa33fd;Sharad Vikram;2021-10-27 15:26:18 -0700;[JAX] Update JAX users in preparation for a change that makes iteration over a JAX array return JAX arrays, instead of NumPy arrays.
See https://github.com/google/jax/pull/8043 for context as to why we are making this change.

The upshot for most users is that the values returned by iteration over a JAX array are now themselves JAX arrays, with the semantics of JAX arrays, which sometimes differ from the semantics of NumPy scalars and arrays.

PiperOrigin-RevId: 405995198

==

tests/ann_test.py
==================
fd750ebc;jax authors;2021-10-27 13:49:23 -0700;Merge pull request #8370 from jakevdp:sparse-random
PiperOrigin-RevId: 405972112

==
==================
2bda894a;Matthew Johnson;2021-10-27 13:31:55 -0700;MeshComputation.hlo should be a method
Co-authored-by: Brennan Saeta <saeta@google.com>

==

jax/interpreters/pxla.py
==================
f3b1a301;jax authors;2021-10-27 10:40:07 -0700;Merge pull request #8115 from sharadmv:all-gather-grad
PiperOrigin-RevId: 405924058

==
==================
ae9e6981;Sharad Vikram;2021-10-06 17:21:40 +0200;Broadcast unmapped values in all_to_all batching rule
Fixes #7965.

Co-authored-by: Sharad Vikram<sharad.vikram@gmail.com>
Co-authored-by: Adam Paszke <apaszke@google.com>

==

jax/_src/lax/parallel.py
==================
6aa61260;jax authors;2021-10-27 09:14:49 -0700;Merge pull request #8379 from jakevdp:fix-rtd
PiperOrigin-RevId: 405903545

==
==================
bae93ed9;Jake VanderPlas;2021-10-27 09:02:24 -0700;DOC: pin jupyter-core to fix RTD build

==

docs/requirements.txt
==================
96623c30;Matthew Johnson;2020-07-22 12:10:43 -0700;make iter(DeviceArray) return DeviceArrays w/o sync

==

jax/_src/lax/lax.py
jax/_src/numpy/lax_numpy.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
tests/api_test.py
tests/lax_test.py
==================
b8296bb0;Jake VanderPlas;2021-10-26 15:40:41 -0700;benchmarks: add compilation of sparse operations
PiperOrigin-RevId: 405752775

==

benchmarks/api_benchmark.py
==================
782d5bcd;jax authors;2021-10-26 15:22:03 -0700;Merge pull request #8338 from jakevdp:bcoo-mul-dense
PiperOrigin-RevId: 405748692

==
==================
94a1feea;Jake VanderPlas;2021-10-26 15:21:00 -0700;[sparse] add sparse.random_bcoo() utility

==

jax/experimental/sparse/__init__.py
jax/experimental/sparse/random.py
tests/sparse_test.py
==================
789ce1e8;jax authors;2021-10-26 15:06:50 -0700;[XLA:TPU] Fix shape bug for k=1 in ApproxTopK
PiperOrigin-RevId: 405745255

==

tests/ann_test.py
==================
4d4dae18;Jake VanderPlas;2021-10-21 12:59:37 -0700;[sparse] implement broadcasted sparse-dense multiplication

==

jax/experimental/sparse/bcoo.py
jax/experimental/sparse/transform.py
tests/sparse_test.py
==================
0be30fbf;Qiao Zhang;2021-10-25 15:34:57 -0700;Add jax.distributed.initialize for multi-host GPU.

==

CHANGELOG.md
jax/__init__.py
jax/_src/distributed.py
jax/_src/lib/xla_bridge.py
jax/distributed.py
==================
ca56dede;jax authors;2021-10-26 14:23:55 -0700;Merge pull request #8340 from jakevdp:sparsify-todense
PiperOrigin-RevId: 405734618

==
==================
2259e2b0;Jake VanderPlas;2021-10-26 13:52:48 -0700;[sparse] add todense() primitive for use in sparsify transform

==

jax/experimental/sparse/__init__.py
jax/experimental/sparse/bcoo.py
jax/experimental/sparse/ops.py
jax/experimental/sparse/transform.py
tests/sparse_test.py
tests/sparsify_test.py
==================
c62452f2;Jake VanderPlas;2021-10-26 11:38:24 -0700;benchmarks: add JIT versions of sparse.BCOO benchmarks
PiperOrigin-RevId: 405696495

==

benchmarks/api_benchmark.py
jax/experimental/sparse/bcoo.py
==================
47210f04;jax authors;2021-10-26 11:31:19 -0700;Merge pull request #8369 from jakevdp:sparse-nojit
PiperOrigin-RevId: 405694518

==
==================
2f0df85d;Jake VanderPlas;2021-10-26 10:58:37 -0700;[sparse] avoid default jit-compilation of sparse array functions

==

jax/experimental/sparse/ops.py
==================
08cf9fd8;jax authors;2021-10-26 10:48:30 -0700;Merge pull request #8317 from jakevdp:dynamic-index-dtype
PiperOrigin-RevId: 405683915

==
==================
7ae47cbc;jax authors;2021-10-26 06:56:05 -0700;[JAX] Polish doc formatting for approx_top_k.
PiperOrigin-RevId: 405637140

==

jax/experimental/ann.py
==================
5a373378;Jake VanderPlas;2021-10-25 16:44:03 -0700;benchmarks: add sparse.BCOO todense/fromdense/matvec benchmarks
PiperOrigin-RevId: 405519824

==

benchmarks/api_benchmark.py
==================
821fcaa7;Yash Katariya;2021-10-25 09:36:45 -0700;Make the pjit docs clear about who does local and global communication
PiperOrigin-RevId: 405421833

==

docs/jax-101/08-pjit.md
==================
0f477121;Marc van Zee;2021-10-21 23:58:33 -0700;Implements a lowering function for tf.expm1 and adds tests.
PiperOrigin-RevId: 404958939

==

jax/experimental/jax2tf/examples_eval/converters_results.md
==================
66009d69;jax authors;2021-10-21 16:48:40 -0700;Merge pull request #8331 from jakevdp:odeint-args
PiperOrigin-RevId: 404909637

==
==================
beb473da;jax authors;2021-10-21 16:48:24 -0700;Merge pull request #8320 from jakevdp:hist-density
PiperOrigin-RevId: 404909058

==
==================
ca4e430b;jax authors;2021-10-21 16:44:00 -0700;Merge pull request #8332 from jakevdp:bcoo-block
PiperOrigin-RevId: 404909027

==
==================
3338947f;Jake VanderPlas;2021-10-21 16:34:59 -0700;odeint: args validation allows pytrees

==

jax/experimental/ode.py
==================
e95b73cf;Mario Geiger;2021-10-21 23:16:01 +0200;clarify code

==

jax/experimental/ode.py
==================
11127add;Peter Hawkins;2021-10-21 12:07:09 -0700;[JAX] Replace users of deprecated jax.lib.xla_bridge functions with more public names.
Change in preparation for removing some function exports from jax.lib.xla_bridge.

PiperOrigin-RevId: 404849899

==

cloud_tpu_colabs/Pmap_Cookbook.ipynb
==================
20062e51;Jake VanderPlas;2021-10-21 10:26:14 -0700;[sparse] add .block_until_ready() to sparse objects

==

jax/experimental/sparse/ops.py
tests/sparse_test.py
==================
7a5e8431;Marc van Zee;2021-10-21 09:29:44 -0700;Internal change
PiperOrigin-RevId: 404812711

==

jax/experimental/jax2tf/OWNERS
==================
bc1c6b10;jax authors;2021-10-21 08:09:48 -0700;[JAX] Fix sphinx formatting issue
PiperOrigin-RevId: 404797143

==

jax/experimental/ann.py
==================
b056f796;AdrienCorenflos;2021-10-21 16:12:33 +0300;Fix typo in doc for barrier_wait

==

jax/experimental/host_callback.py
==================
17e16592;George Karpenkov;2021-10-20 22:13:33 -0700;Reland: Use variadic reduce on GPU for argmax/argmin
Fixed underlying bug

PiperOrigin-RevId: 404713314

==

jax/_src/lax/lax.py
==================
eedf6e82;Jake VanderPlas;2021-10-20 16:54:06 -0700;jnp.histogramdd: more succinct density computation

==

jax/_src/numpy/lax_numpy.py
==================
09c4cf7b;jax authors;2021-10-20 16:15:34 -0700;Merge pull request #8288 from jakevdp:fix-multivariate-normal
PiperOrigin-RevId: 404661655

==
==================
405b8c85;jax authors;2021-10-20 16:15:17 -0700;Merge pull request #8314 from TheNeuralBit:readme-broken-link
PiperOrigin-RevId: 404661624

==
==================
720151c5;jax authors;2021-10-20 16:14:56 -0700;Merge pull request #8308 from iolloj:fft_enhanced
PiperOrigin-RevId: 404661598

==
==================
cdbbb1b9;jax authors;2021-10-20 16:10:52 -0700;Merge pull request #8315 from jakevdp:ode-validation
PiperOrigin-RevId: 404661573

==
==================
fd4d987a;Jake VanderPlas;2021-10-20 15:52:43 -0700;dynamic_slice: ensure start_indices dtypes match

==

jax/_src/lax/lax.py
==================
eacec819;Jake VanderPlas;2021-10-20 14:22:43 -0700;odeint: validate *args

==

jax/experimental/ode.py
==================
67dc16fc;iollo jacopo;2021-10-20 12:46:50 +0100;add fft normalisation

==

jax/_src/numpy/fft.py
tests/fft_test.py
==================
0453e0de;jax authors;2021-10-20 13:28:22 -0700;Merge pull request #8305 from jakevdp:bcoo-error
PiperOrigin-RevId: 404626396

==
==================
6cfbb890;Brian Hulette;2021-10-20 13:01:26 -0700;Fix broken link to experimental/README.md

==

README.md
==================
d9ae5a16;jax authors;2021-10-20 12:53:23 -0700;Merge pull request #8298 from jakevdp:lax-doc
PiperOrigin-RevId: 404618408

==
==================
09c2c9a2;jax authors;2021-10-20 12:38:59 -0700;[JAX] Export ann documentation.
PiperOrigin-RevId: 404615254

==

docs/jax.experimental.ann.rst
docs/jax.experimental.rst
==================
06b59532;jax authors;2021-10-20 12:07:16 -0700;[XLA:TPU] Support jvp/vjp in approx_top_k
Copies the jvp implementation lax.sort uses.
Left some comments for future optimizations

PiperOrigin-RevId: 404608289

==

jax/experimental/ann.py
tests/ann_test.py
==================
3a37cb1e;jax authors;2021-10-20 11:35:50 -0700;Merge pull request #8291 from jakevdp:lpmn-tests
PiperOrigin-RevId: 404601366

==
==================
b8d3035d;Jake VanderPlas;2021-10-20 10:43:59 -0700;[sparse] improve error for BCOO.fromdense if nse is not specified

==

jax/experimental/sparse/bcoo.py
==================
e5853475;James Bradbury;2021-10-20 09:25:02 -0700;add functionality test

==

tests/nn_test.py
==================
f5f05812;James Bradbury;2021-10-20 09:16:55 -0700;update docstring

==

jax/_src/nn/initializers.py
==================
eaf9eca6;James Bradbury;2021-10-20 09:12:37 -0700;Support multiple in/out axes in scaled inits

==

jax/_src/nn/initializers.py
==================
1b80feea;Marc van Zee;2021-10-20 07:23:34 -0700;Fixes a dtype bug in the conversion of dynamic_slice when enable_xla=False.
I tried adding a test, but in this specific case the TFLite converter uses for parameter `operand` the dtype `float32`, and for `start_indices` a tuple consisting of `tf.consts` of dtype `uint32`. I didn't know how to set up this test, but the examples eval shows that the bug is fixed for the TFLite examples.

PiperOrigin-RevId: 404527169

==

jax/experimental/jax2tf/examples_eval/converters_results.md
jax/experimental/jax2tf/examples_eval/examples_converter.py
jax/experimental/jax2tf/examples_eval/examples_test.py
jax/experimental/jax2tf/impl_no_xla.py
==================
142be134;Alexander Kolesnikov;2021-10-20 03:21:55 -0700;Update jax2tf documentation with leading underscore when setting tf.Module() variables, e.g. `m._variables = ...`. Also added a test for this.
PiperOrigin-RevId: 404483990

==

jax/experimental/jax2tf/README.md
jax/experimental/jax2tf/tests/savedmodel_test.py
==================
8dbd51d3;Marc van Zee;2021-10-20 01:44:00 -0700;Implements padding support for lax.reduce_window when enable_xla=False. Also does a few cleanups and adds some tests.
PiperOrigin-RevId: 404468307

==

jax/experimental/jax2tf/examples_eval/all_examples.py
jax/experimental/jax2tf/examples_eval/converters_results.md
jax/experimental/jax2tf/impl_no_xla.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
623c2010;Roy Frostig;2021-10-19 17:30:16 -0700;[JAX] move example libraries from `jax.experimental` into `jax.example_libraries`
The `jax.experimental.stax` and `jax.experimental.optimizers` modules are standalone examples libraries. By contrast, the remaining modules in `jax.experimental` are experimental features of the JAX core system. This change moves the two example libraries, and the README that describes them, to `jax.example_libraries` to reflect this distinction.

PiperOrigin-RevId: 404405186

==

CHANGELOG.md
README.md
docs/jax.example_libraries.optimizers.rst
docs/jax.example_libraries.rst
docs/jax.example_libraries.stax.rst
docs/jax.experimental.optimizers.rst
docs/jax.experimental.rst
docs/jax.experimental.stax.rst
docs/jax.rst
examples/advi.py
examples/differentially_private_sgd.py
examples/kernel_lsq.py
examples/mnist_classifier.py
examples/mnist_vae.py
examples/resnet50.py
jax/example_libraries/README.md
jax/example_libraries/__init__.py
jax/example_libraries/optimizers.py
jax/example_libraries/stax.py
jax/experimental/optimizers.py
jax/experimental/stax.py
pytest.ini
tests/jet_test.py
tests/optimizers_test.py
tests/stax_test.py
==================
94169b96;Jake VanderPlas;2021-10-19 17:18:15 -0700;DOC: add conv_dimension_numbers and ConvGeneralDilatedDimensionNumbers to docs

==

docs/jax.lax.rst
==================
349d0d08;Aden Grue;2021-10-19 17:13:01 -0700;Relax the tolerances in one 'lax_scipy_test' case
An upcoming CPU codegen change increases error slightly above the current tolerances.

PiperOrigin-RevId: 404402366

==

tests/lax_scipy_test.py
==================
0a232b22;Jake VanderPlas;2021-10-19 16:58:36 -0700;stats.multivariate_normal: support broadcasted inputs

==

jax/_src/scipy/stats/multivariate_normal.py
tests/scipy_stats_test.py
==================
9fee130d;Peter Hawkins;2021-10-19 16:38:42 -0700;[JAX] Update users of `jax.ops.index...` functions, which are deprecated.
* replace uses of `jax.ops.index[...]` with `jax.numpy.index_exp[...]`, which is a standard NumPy function that does the same thing.
* remove some redundant uses of `jax.ops.index[...]`, where the expression is passed directly to an indexed accessor function like `.at[...]`.
* update some remaining users of `jax.ops.index_update(x, jax.ops.index[idx], y)` to use the `x.at[idx].set(y)` APIs.

PiperOrigin-RevId: 404395250

==

jax/_src/ops/scatter.py
tests/lax_numpy_test.py
==================
b09501f8;jax authors;2021-10-19 14:50:00 -0700;[XLA:TPU] Fix approx_top_k output slice. ApproxTopK should slice the output to k on reduction dim.
PiperOrigin-RevId: 404371519

==

tests/ann_test.py
==================
58cdc1b3;Jake VanderPlas;2021-10-19 13:46:32 -0700;special.lpmn: use more canonical testing approach

==

tests/lax_scipy_test.py
==================
8f0bfcb4;Peter Hawkins;2021-10-19 11:10:07 -0700;Improve pytype checking of XLA types inside JAX.
Add an explicit `.pyi` file for jax/_src/lib/__init__.pyi, which works around a bug in pytype where the types of modules that are re-exported becomes `Any`.

[XLA:Python] Fix type declaration for sharding specs.

PiperOrigin-RevId: 404313123

==

jax/_src/lib/__init__.py
jax/_src/lib/__init__.pyi
jax/interpreters/pxla.py
jax/interpreters/xla.py
==================
e783cbcb;Peter Hawkins;2021-10-19 09:47:55 -0700;Port remaining translation rules inside JAX to new style.
PiperOrigin-RevId: 404288551

==

docs/notebooks/How_JAX_primitives_work.ipynb
docs/notebooks/How_JAX_primitives_work.md
jax/_src/ad_checkpoint.py
jax/_src/custom_derivatives.py
jax/_src/lax/control_flow.py
jax/_src/lax/fft.py
jax/_src/lax/linalg.py
jax/_src/prng.py
jax/experimental/host_callback.py
jax/experimental/jax2tf/call_tf.py
jax/experimental/pjit.py
jax/experimental/sparse/bcoo.py
jax/experimental/sparse/ops.py
jax/interpreters/sharded_jit.py
tests/api_test.py
tests/custom_object_test.py
==================
f66985de;Yash Katariya;2021-10-19 09:20:31 -0700;Update jax version number after release
PiperOrigin-RevId: 404281188

==

jax/version.py
==================
1a737436;Peter Hawkins;2021-10-19 08:40:15 -0700;Move xla_bridge.constant to jax.interpreter.xla.pyval_to_ir_constant.
This is a more descriptive name and a better location (next to other facilities for building XLA IR).

Quite a few users of the former xla_bridge.constant() didn't need anything other than uncanonicalized array constants. Change these users to use xla_client.ops.Constant instead; no need for the fancy utility in these cases.

PiperOrigin-RevId: 404270649

==

docs/autodidax.ipynb
docs/autodidax.md
docs/autodidax.py
jax/_src/api.py
jax/_src/lax/control_flow.py
jax/_src/lax/lax.py
jax/_src/lax/linalg.py
jax/_src/lax/parallel.py
jax/_src/lib/xla_bridge.py
jax/_src/prng.py
jax/experimental/djax.py
jax/experimental/maps.py
jax/interpreters/pxla.py
jax/interpreters/sharded_jit.py
jax/interpreters/xla.py
tests/custom_object_test.py
tests/host_callback_test.py
==================
e96f3632;jax authors;2021-10-19 08:09:16 -0700;[XLA:TPU] Adding approximate nearest neighbor search on TPU feature to JAX.
The JAX primitive would call the XLA python interface for ApproxTopK on TPU,
and fallbacked to sort-and-slice XLA implementation on other platforms.

Auto differntiation have two possible implementations and will be
submitted in seprated CLs.

PiperOrigin-RevId: 404263763

==

jax/experimental/ann.py
tests/ann_test.py
==================
a7c9b6d1;Yash Katariya;2021-10-19 08:04:59 -0700;Update jax version number for jax release.
PiperOrigin-RevId: 404262742

==

CHANGELOG.md
jax/version.py
==================
185d7a9f;Peter Hawkins;2021-10-19 06:48:34 -0700;Delete xla_bridge.xla.dtype_to_etype, replace it with jax.interpreters.xla.dtype_to_primitive_type.
The new version does *not* canonicalize dtypes. We should be canonicalizing dtypes as part of tracing to a jaxpr, not in any way as part of XLA lowering. In all cases as best I can tell the dtypes from the callers are already canonical anyway.

jax.interpreters.xla is also a better location: I'm not even sure why we have a bunch of random things in xla_bridge any more, so it makes sense to consolidate them in xla.py along with the other registrations for things like avals.

Also delete the unused function xla_bridge.supported_numpy_dtypes.

PiperOrigin-RevId: 404246574

==

jax/_src/lax/lax.py
jax/_src/lax/parallel.py
jax/_src/lib/xla_bridge.py
jax/experimental/djax.py
jax/experimental/jax2tf/call_tf.py
jax/experimental/jax2tf/impl_no_xla.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/maps.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
==================
ee752b32;Yash Katariya;2021-10-19 06:24:27 -0700;Use `cuda11_cudnn82` instead of `cuda=11,cudnn=82` because the latter one is a syntax error
PiperOrigin-RevId: 404240654

==

CHANGELOG.md
README.md
setup.py
==================
a91cb816;jax authors;2021-10-19 05:45:24 -0700;Merge pull request #8269 from jakevdp:sparse-dtype
PiperOrigin-RevId: 404232531

==
==================
4d8bce1b;Yash Katariya;2021-10-18 19:55:51 -0700;Add a default cuda installation path and more explicit installation paths for CUDA jaxlib.
```
# Installs Cuda 11 with Cudnn 8.2
$ pip install jax[cuda] -f https://storage.googleapis.com/jax-releases/jax_releases.html

$ pip install jax[cuda=11,cudnn=82] -f https://storage.googleapis.com/jax-releases/jax_releases.html

$ pip install jax[cuda=11,cudnn=805] -f https://storage.googleapis.com/jax-releases/jax_releases.html
```

PiperOrigin-RevId: 404134291

==

CHANGELOG.md
README.md
jaxlib/version.py
setup.py
==================
6bd0c72f;Rebecca Chen;2021-10-18 18:46:57 -0700;Silence some pytype errors.
PiperOrigin-RevId: 404122713

==

jax/interpreters/xla.py
==================
fa89f34b;Peter Hawkins;2021-10-18 18:06:48 -0700;[JAX] Port lax translation rules to updated XLA translation rule API.
PiperOrigin-RevId: 404114709

==

jax/_src/lax/control_flow.py
jax/_src/lax/lax.py
jax/_src/lax/linalg.py
jax/_src/lax/parallel.py
jax/interpreters/xla.py
jax/lax/__init__.py
==================
fa5d4a2a;jax authors;2021-10-18 16:49:41 -0700;Merge pull request #8268 from jakevdp:sparsify-weak-types
PiperOrigin-RevId: 404097482

==
==================
fbdeff0a;Yash Katariya;2021-10-18 15:26:04 -0700;Update the workspace file
PiperOrigin-RevId: 404076864

==

WORKSPACE
==================
48bbdbc8;Peter Hawkins;2021-10-18 15:02:26 -0700;Change jax.core.DropVar to be a non-singleton.
Previously jax.core.DropVar was a singleton value (jax.core.dropvar) whose type was always jax.core.AbstractUnit. However, this type is misleading: a DropVar is an equation output, and typically we would expect it to have an array type. In particular, the unit type confuses new-style translation rules that expect to use the output aval on an equation as part of the lowering logic.

Instead, change DropVar to be a non-singleton subclass of Var instead with a flexible choice of aval.

PiperOrigin-RevId: 404071001

==

docs/jaxpr.rst
jax/_src/api.py
jax/core.py
jax/experimental/sparse/transform.py
jax/interpreters/partial_eval.py
jax/jaxpr_util.py
tests/core_test.py
tests/host_callback_test.py
==================
6c833a16;jax authors;2021-10-18 14:48:41 -0700;Merge pull request #8240 from jakevdp:dtype-annotations
PiperOrigin-RevId: 404066753

==
==================
95f47074;Peter Hawkins;2021-10-18 13:56:22 -0700;Remove xla_bridge.{constant, register_constant_handler, _python_scalar_constant} from API.
An upcoming change will move and rename these functions, and it's not clear they should have been public in the first place.

PiperOrigin-RevId: 404051961

==

docs/jax.lib.rst
jax/lib/xla_bridge.py
==================
465b48f0;Jake VanderPlas;2021-10-18 13:52:42 -0700;[sparse] preserve dtype in bcoo_todense

==

jax/experimental/sparse/bcoo.py
tests/sparse_test.py
==================
93fe3ab4;Yash Katariya;2021-10-18 13:47:08 -0700;Replace `_` with `-` because wheel.py normalizes it to `.`
PiperOrigin-RevId: 404049619

==

jaxlib/setup.py
==================
f2bbd51c;Jake VanderPlas;2021-10-18 13:35:20 -0700;[sparse] respect weak types in sparsify transform

==

jax/experimental/sparse/transform.py
tests/sparsify_test.py
==================
0f0bfcae;Yash Katariya;2021-10-18 13:19:34 -0700;Skip `test_bcoo_spdot_general` because its failing OSS tests
PiperOrigin-RevId: 404042363

==

tests/sparse_test.py
==================
8a261f04;jax authors;2021-10-18 11:28:12 -0700;Merge pull request #8261 from hawkinsp:real
PiperOrigin-RevId: 404013628

==
==================
9eb06800;jax authors;2021-10-18 10:50:44 -0700;Merge pull request #8260 from hawkinsp:unpack
PiperOrigin-RevId: 404001515

==
==================
8c3b212d;Peter Hawkins;2021-10-18 13:50:11 -0400;Improve real type conversion in a couple more places.

==

jax/_src/lax/fft.py
jaxlib/rocsolver.py
==================
ef9ce1c3;jax authors;2021-10-18 10:46:45 -0700;Merge pull request #8259 from hawkinsp:xlabuilder
PiperOrigin-RevId: 404001408

==
==================
05137597;Peter Hawkins;2021-10-18 13:27:10 -0400;Remove unused backward compatibility code in cusolver.py.
Simplify implementation of _real_type in passing.

==

jaxlib/cusolver.py
==================
714e19a7;Peter Hawkins;2021-10-18 13:19:45 -0400;Remove xla_bridge.make_computation_builder().
This is a vestigal wrapper around xla_client.XlaBuilder whose purpose is long gone.

Also rename uses of XlaComputationBuilder to XlaBuilder. XlaComputationBuilder was an older name that is gone in most places.

==

docs/autodidax.ipynb
docs/autodidax.md
docs/autodidax.py
jax/_src/api.py
jax/_src/lax/control_flow.py
jax/_src/lax/lax.py
jax/_src/lib/xla_bridge.py
jax/experimental/djax.py
jax/experimental/host_callback.py
jax/experimental/jax2tf/call_tf.py
jax/interpreters/pxla.py
jax/interpreters/sharded_jit.py
jax/interpreters/xla.py
tests/host_callback_test.py
tests/xla_bridge_test.py
==================
391cafb0;jax authors;2021-10-18 09:19:33 -0700;Merge pull request #8225 from jakevdp:bcoo-padding
PiperOrigin-RevId: 403978219

==
==================
f424a90c;Jake VanderPlas;2021-10-15 10:50:05 -0700;[sparse]: change bcoo pad values to use OOB indices

==

jax/experimental/sparse/bcoo.py
tests/sparse_test.py
==================
46b9653e;Marc van Zee;2021-10-18 07:37:36 -0700;Factors out all enable_xla=False ops into a separate library impl_no_xla.py.
Also creates a new map tf_impl_no_xla containing the functions that should be called when XLA is disabled, simplifying the logic in the regular converter functions.

PiperOrigin-RevId: 403956433

==

jax/experimental/jax2tf/impl_no_xla.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
e6e81ba8;Yash Katariya;2021-10-16 16:13:15 -0700;Add Cuda 11.4 with cudnn 8.2 and cudnn 8.0.5 release builds
PiperOrigin-RevId: 403661187

==

.bazelrc
jaxlib/setup.py
==================
267a4ca4;Peter Hawkins;2021-10-16 10:34:08 -0700;Reenable a test that was disabled due to an (apparently fixed) LLVM bug.
PiperOrigin-RevId: 403623977

==

tests/lax_scipy_sparse_test.py
==================
2bd010ae;Peter Hawkins;2021-10-16 07:52:57 -0700;Cleanup internal representation of XLA translation rules.
Over time JAX has sprouted many variants of XLA translation rules, each with slightly different but overlapping arguments. This change consolidates them into a new xla.TranslationRule signature:
rule(ctx, avals_in, avals_out, *args, **params)
where ctx contains the parts of the other signatures that were typically not specific to a particular equation.

Since there are many JAX rules to migrate, and even a number of translation rules belonging to projects downstream of JAX, we leave backwards compatibility shims around `xla.translations`, `xla.backend_specific_translations`, and `xla.call_translations` which seem to be the only ones used outside JAX itself.

In passing, this change alters the semantics of `backend` arguments to nested `jit` blocks. We now always canonicalize the backend to a specific backend at the outermost `jit`, and do not complain if an inner `jit` has an explicit `backend` that matches the current default choice.

PiperOrigin-RevId: 403607667

==

jax/_src/ad_checkpoint.py
jax/_src/api.py
jax/_src/custom_derivatives.py
jax/_src/lax/control_flow.py
jax/_src/lax/lax.py
jax/_src/lax/parallel.py
jax/_src/prng.py
jax/_src/random.py
jax/experimental/djax.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/primitives_test.py
jax/experimental/maps.py
jax/experimental/pjit.py
jax/interpreters/ad.py
jax/interpreters/pxla.py
jax/interpreters/sharded_jit.py
jax/interpreters/xla.py
setup.py
tests/custom_object_test.py
tests/host_callback_test.py
tests/multibackend_test.py
tests/pjit_test.py
tests/sparse_test.py
==================
69d7a813;jax authors;2021-10-15 18:39:20 -0700;Merge pull request #8236 from jakevdp:fix-bincount
PiperOrigin-RevId: 403514221

==
==================
875efeeb;jax authors;2021-10-15 17:31:06 -0700;Merge pull request #8242 from mattjj:remat-fix6
PiperOrigin-RevId: 403504234

==
==================
40103f6a;jax authors;2021-10-15 17:08:57 -0700;Merge pull request #8241 from froystig:xla-computation-in-avals
PiperOrigin-RevId: 403500602

==
==================
89606c2c;Matthew Johnson;2021-10-15 16:51:37 -0700;remat: fix regression of broke calling convention
In #7631 we made `_partial_eval_jaxpr_custom` follow a convention: drop
unit outputs from the known jaxprs it returned:

https://github.com/google/jax/blob/3377abaef41681782d86eec8fd667167783dc5a0/jax/interpreters/partial_eval.py#L937

The caller needed to compensate for that, e.g. by dropping the
corresponding binders in an outer jaxpr eqn representing an application
of that inner jaxpr. But that logic was written in terms of checking for
dropped outputs in the outer jaxpr (since units are typically not
consumed downstream):

https://github.com/google/jax/pull/8227/files#diff-440d9df723b313bb263bc7704103cad1dcc886ff6553aa78c30188b0b323b686L981

That worked (or at least we never noticed a failure, though now it seems
sketchy...) with the 'classic' `jax.checkpoint` / `jax.remat`
implementation, before #8191, because of how that implementation relied
on tracing-based partial evaluation, which would detect and mark dropped
outputs in the outer jaxpr as part of jaxpr formation.

But then in #8191 we no longer marked dropvars in the same way. That led
to assertion failures, and #8227 attempted to fix those. That fix made
sense with the new remat implementation, but not the old one! (In the
intervening period I forgot about this unit-dropping convention...)

The fix here is not to rely on dropvars but to more directly encode the
convention that _partial_eval_jaxpr_custom drops unit outputs in the
known jaxpr it produces.

==

jax/interpreters/partial_eval.py
tests/api_test.py
==================
f68c0a42;Roy Frostig;2021-10-15 16:12:05 -0700;drop unused arguments in the `jit` AOT call path

==

jax/interpreters/xla.py
tests/api_test.py
==================
afe7e194;Jake VanderPlas;2021-10-15 15:35:43 -0700;Fix inaccurate type annotations

==

jax/_src/dtypes.py
==================
3377abae;jax authors;2021-10-15 12:54:52 -0700;Merge pull request #8237 from hawkinsp:argsort
PiperOrigin-RevId: 403445597

==
==================
af5d3675;Peter Hawkins;2021-10-15 15:39:40 -0400;Change default kind for jnp.argsort to `stable`. Warn if anything other than `stable` is passed.

==

jax/_src/numpy/lax_numpy.py
==================
7a2686f3;Jake VanderPlas;2021-10-15 12:31:17 -0700;jnp.bincount: fix corner cases

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
613dc4bf;jax authors;2021-10-15 10:51:33 -0700;Merge pull request #8234 from apaszke:all-gather-batching
PiperOrigin-RevId: 403414516

==
==================
a64ce45c;jax authors;2021-10-15 10:43:00 -0700;Merge pull request #8222 from mattjj:document-vmap-axis-name
PiperOrigin-RevId: 403412220

==
==================
3ee94d93;jax authors;2021-10-15 10:31:29 -0700;Merge pull request #7803 from jakevdp:jnp-take-validation
PiperOrigin-RevId: 403408483

==
==================
8f1d7bea;jax authors;2021-10-15 10:10:06 -0700;Merge pull request #8217 from LenaMartens:changelist/403115357
PiperOrigin-RevId: 403402974

==
==================
239662ef;jax authors;2021-10-15 09:48:47 -0700;Merge pull request #8228 from mattjj:remat-fix5
PiperOrigin-RevId: 403397740

==
==================
a353e3ea;Jake VanderPlas;2021-10-14 11:54:28 -0700;jnp.take/jnp.take_along_axis: require array inputs

==

CHANGELOG.md
jax/_src/numpy/lax_numpy.py
==================
267e1ec5;jax authors;2021-10-15 09:34:56 -0700;Merge pull request #8223 from jakevdp:unique-speed
PiperOrigin-RevId: 403394797

==
==================
a3a6a5b1;Jake VanderPlas;2021-10-14 15:28:32 -0700;jnp.unique: improve efficiency & consolidate implementation

==

jax/_src/numpy/lax_numpy.py
==================
49d9affc;Adam Paszke;2021-10-15 14:37:38 +0000;Enable batcher and batched collective rules for tiled all gathers
Fixes #8221.

==

jax/_src/lax/parallel.py
tests/batching_test.py
==================
aaf3bb78;Marc van Zee;2021-10-15 01:00:18 -0700;Improves support for conv_general_dilated in JAX for models running on the web or mobile through TFLite and TFjs.
### Before this change

Prior to my change, there were a number of limitations to using convolutions for web/mobile:

* No strides other than (1,1) could be used.
* Padding was only possible for values ["VALID", "SAME"]
* Transposed convolutions were unsupported
* Depthwise convolutions were unsupported
* Input could only be provided in a very specific format, which prevented many use cases.

### After this change

After this change, we now can support the following cases:
* Any strides size can be used
* Any padding can be used (VALID, SAME, or custom numbers)
* Transposed convolutions are supported
* Depthwise convolutions are supported
* Input can be provided in any format.

### Impact on examples

Before, most of the Flax examples using convolutions were failing.
After, all convolutions are converting successfully.

PiperOrigin-RevId: 403302738

==

jax/experimental/jax2tf/examples_eval/converters_results.md
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/primitive_harness.py
==================
0578ba68;Yash Katariya;2021-10-14 22:50:53 -0700;Docker file for Cuda 11.4 built with Cudnn 8.0.5
PiperOrigin-RevId: 403283584

==

.bazelrc
==================
8bfa5eec;Matthew Johnson;2021-10-14 20:41:29 -0700;fix dce logic

==

jax/interpreters/partial_eval.py
tests/api_test.py
==================
804b0b39;jax authors;2021-10-14 19:48:13 -0700;Merge pull request #8227 from mattjj:remat-fix4
PiperOrigin-RevId: 403253854

==
==================
d1f0c60b;Matthew Johnson;2021-10-14 18:49:56 -0700;keep dropvar binders in call_partial_eval_custom_rule
The dropvars indicate that these binders/outputs aren't used in the
outer jaxpr and so they could be dropped, but to drop the binders would
require also editing the called jaxpr to be consistent. For completeness
that editing could involve DCE, which in turn can affect the jaxpr's
inputs.

Instead of doing that bookkeeping, we can just keep the dropvars.
There's a DCE pass to follow in the remat primitive's partial eval rule
which will clean these up.

(This commit also contains unrelated tweaks to comments and strings.)

==

jax/_src/ad_checkpoint.py
jax/interpreters/partial_eval.py
tests/api_test.py
==================
fcbbd29d;jax authors;2021-10-14 13:59:28 -0700;Merge pull request #8215 from jakevdp:unique-multi-fill
PiperOrigin-RevId: 403179982

==
==================
ac079604;Yash Katariya;2021-10-14 13:19:11 -0700;Move cuda .py files to :gpu_support so that if :gpu_support is not present, then internal jaxlib will act like a CPU jaxlib even if `--config=cuda` is specified.
PiperOrigin-RevId: 403170945

==

build/BUILD.bazel
jaxlib/BUILD
==================
584aa133;Matthew Johnson;2021-10-14 13:09:24 -0700;document `axis_name` in the `vmap` docstring
fixes #8220

==

jax/_src/api.py
==================
1bafdb6d;Jake VanderPlas;2021-10-14 12:24:49 -0700;fix repr() of jit-compiled functions
PiperOrigin-RevId: 403157400

==

tests/api_test.py
==================
c5a8c5c8;Jake VanderPlas;2021-10-14 09:15:39 -0700;jnp.unique: allow fill_value to be a slice

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
26549bdc;jax authors;2021-10-14 11:46:05 -0700;Merge pull request #8219 from mattjj:fix-saved-residuals-utility
PiperOrigin-RevId: 403147655

==
==================
297f79c1;Matthew Johnson;2021-10-14 11:32:09 -0700;make saved_residuals utility work w/ literals

==

jax/_src/ad_checkpoint.py
tests/api_test.py
==================
e0d23a7f;Peter Hawkins;2021-10-14 11:27:39 -0700;Improve performance of JIT dispatch when output arity is 1.
Building an output tuple has a non-zero cost on TPU. We can avoid it in the output arity 1 case.

PiperOrigin-RevId: 403142765

==

jax/_src/api.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
==================
f5d8d4bc;Lena Martens;2021-10-14 17:37:50 +0100;Replace loop with map in RBG batching_rule.

==

jax/_src/lax/control_flow.py
jax/_src/lax/lax.py
==================
de777c8d;Danilo Jimenez Rezende;2021-10-14 09:40:41 -0700;Set dtypes of constant coefficients appropriately based on the state dtypes. This avoids unexpected casting of the output states.
PiperOrigin-RevId: 403116057

==

jax/experimental/ode.py
==================
80e118aa;jax authors;2021-10-14 09:33:31 -0700;Merge pull request #8213 from hawkinsp:testutil
PiperOrigin-RevId: 403114132

==
==================
03e70f6a;jax authors;2021-10-14 09:29:24 -0700;Merge pull request #8204 from jakevdp:nonzero-multiple-fills
PiperOrigin-RevId: 403113281

==
==================
c491203b;Peter Hawkins;2021-10-14 11:55:11 -0400;Readd jax.test_util.check_jvp and check_vjp to the public JAX API.

==

jax/test_util.py
==================
405ada15;Jake VanderPlas;2021-10-13 15:57:39 -0700;jnp.nonzero: allow fill_value to be a tuple

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
e638445f;jax authors;2021-10-14 07:35:15 -0700;Merge pull request #8209 from mattjj:no-automatic-new-remat
PiperOrigin-RevId: 403090104

==
==================
725fe3ab;Matthew Johnson;2021-10-14 07:09:06 -0700;don't automatically use new checkpoint implementation
There's a bug we're struggling to repro.

To use the new checkpoint, just use

```python
from jax.ad_checkpoint import checkpoint
```

rather than `from jax import checkpoint.

==

jax/_src/api.py
tests/api_test.py
==================
2f7e125c;jax authors;2021-10-14 06:25:56 -0700;Merge pull request #8203 from jakevdp:piecewise-jit
PiperOrigin-RevId: 403077693

==
==================
bbbd5e83;Jake VanderPlas;2021-10-14 05:44:38 -0700;jnp.piecewise: avoid unnecessary recompilation

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
792a89ba;jax authors;2021-10-14 05:05:56 -0700;Merge pull request #8201 from mattjj:more-grad-of-jit-and-pmap-caching-tests
PiperOrigin-RevId: 403066293

==
==================
4648f332;jax authors;2021-10-13 21:55:07 -0700;Merge pull request #8207 from mattjj:remat-by-name
PiperOrigin-RevId: 402998585

==
==================
6741da63;Matthew Johnson;2021-10-13 18:21:20 -0700;checkpoint_name for checkpoint policies by name
Also add the jax.ad_checkpoint.print_saved_residuals utility.

All this is experimental, and undocumented for now...

Co-authored-by: Qiao Zhang <zhangqiaorjc@google.com>

==

jax/_src/ad_checkpoint.py
jax/ad_checkpoint.py
jax/experimental/jax2tf/jax2tf.py
tests/api_test.py
==================
5d456400;jax authors;2021-10-13 20:41:20 -0700;Merge pull request #8195 from bsaf:unused-variable
PiperOrigin-RevId: 402989062

==
==================
166ad76a;jax authors;2021-10-13 20:41:03 -0700;Merge pull request #8205 from juliuskunze:perm-fix
PiperOrigin-RevId: 402989039

==
==================
eb3b1133;jax authors;2021-10-13 20:37:14 -0700;Merge pull request #8206 from jakevdp:unique-fv-indices
PiperOrigin-RevId: 402989001

==
==================
28ac8dbf;jax authors;2021-10-13 18:06:51 -0700;Merge pull request #8199 from froystig:aot-jit-aval-check
PiperOrigin-RevId: 402966752

==
==================
2f43f336;Roy Frostig;2021-10-13 10:45:11 -0700;typecheck mesh executable call arguments

==

jax/interpreters/pxla.py
jax/interpreters/xla.py
tests/pjit_test.py
==================
583a6d35;Jake VanderPlas;2021-10-13 16:23:14 -0700;jnp.unique: don't apply fill_value to indices

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
f66cbb9b;Julius Kunze;2021-10-13 17:11:50 -0600;Fix CHANGELOG.md

==

CHANGELOG.md
==================
6779c840;jax authors;2021-10-13 14:13:10 -0700;Merge pull request #8202 from juliuskunze:perm-fix
PiperOrigin-RevId: 402918845

==
==================
9d3dc6f2;Roy Frostig;2021-10-13 08:59:52 -0700;typecheck XLA compiled computation call arguments

==

jax/interpreters/xla.py
tests/api_test.py
==================
1934fd6e;Julius Kunze;2021-10-13 11:57:57 -0600;Cleanup random.permutation

==

jax/_src/random.py
tests/random_test.py
==================
20a95a9a;jax authors;2021-10-13 12:46:33 -0700;Merge pull request #8200 from hawkinsp:primitives
PiperOrigin-RevId: 402898835

==
==================
6a45a923;Peter Hawkins;2021-10-13 13:57:42 -0400;Remove the _num_buffers attribute from core.AbstractValue.
The number of buffers used to represent an abstract value is a property specific to a particular representation of that abstract value. Currently the only representation is an XLA representation, but that may change in the future. Instead, callers who want to know how XLA would represent an aval should ask the XLA module instead. In this case, we call len(xla.aval_to_xla_shapes(...)) instead.

==

jax/_src/api.py
jax/core.py
jax/experimental/djax.py
jax/interpreters/xla.py
tests/custom_object_test.py
==================
82d28899;Matthew Johnson;2021-10-13 11:06:17 -0700;add more grad-of-jit/pmap caching tests

==

tests/api_test.py
tests/pmap_test.py
==================
147f145a;jax authors;2021-10-13 10:34:06 -0700;Merge pull request #8197 from hawkinsp:primitives
PiperOrigin-RevId: 402866468

==
==================
3361c76d;Peter Hawkins;2021-10-13 10:56:21 -0400;Consolidate primitive and jit lowering paths.
Before this change, primitives have a special case dispatch path that attempts
to avoid building a jaxpr in the cache miss case. However, there's no good
reason for this: it makes the code more complicated, and we're not particularly
optimizing for fast cache misses anyway (we care mostly about cache hits).

Make the primitive lowering path trace a small function using the xla_callable
lowering path instead.

==

jax/_src/api.py
jax/_src/lax/lax.py
jax/_src/test_util.py
jax/interpreters/xla.py
tests/lax_control_flow_test.py
tests/pmap_test.py
==================
10af170a;jax authors;2021-10-13 09:31:19 -0700;Merge pull request #8161 from juliuskunze:multidim-permutation
PiperOrigin-RevId: 402852030

==
==================
63898b6c;Julius Kunze;2021-10-11 12:00:43 -0600;Allow random.choice and random.permutation on multidimensional arrays

==

CHANGELOG.md
jax/_src/random.py
tests/random_test.py
==================
57394312;jax authors;2021-10-13 08:29:14 -0700;Merge pull request #8198 from hawkinsp:aliasing
PiperOrigin-RevId: 402837764

==
==================
2388804a;Peter Hawkins;2021-10-13 11:11:24 -0400;Add a regression test for #7461.
Fixes #7461

==

CHANGELOG.md
tests/lax_numpy_indexing_test.py
==================
6fac5d36;Basil;2021-10-13 14:03:09 +0100;Remove unused variable

==

docs/notebooks/Neural_Network_and_Data_Loading.ipynb
docs/notebooks/Neural_Network_and_Data_Loading.md
docs/notebooks/neural_network_with_tfds_data.ipynb
docs/notebooks/neural_network_with_tfds_data.md
==================
4d736139;jax authors;2021-10-13 01:06:29 -0700;Merge pull request #8186 from jakevdp:unique-axis-size
PiperOrigin-RevId: 402759503

==
==================
a6a46915;jax authors;2021-10-13 00:56:14 -0700;Merge pull request #8179 from jakevdp:scalar-type
PiperOrigin-RevId: 402757554

==
==================
e956726b;jax authors;2021-10-12 22:07:55 -0700;Merge pull request #8191 from mattjj:initial-style-remat
PiperOrigin-RevId: 402734397

==
==================
a310a817;Matthew Johnson;2021-10-12 20:06:38 -0700;rewrite remat, leave old implementation for now

==

jax/_src/ad_checkpoint.py
jax/_src/api.py
jax/ad_checkpoint.py
jax/experimental/jax2tf/jax2tf.py
jax/interpreters/partial_eval.py
jax/interpreters/xla.py
tests/api_test.py
==================
4267bed5;jax authors;2021-10-12 21:32:55 -0700;Merge pull request #7158 from NeilGirdhar:fix_basis
PiperOrigin-RevId: 402730368

==
==================
02ec5e73;jax authors;2021-10-12 20:57:56 -0700;Merge pull request #8165 from zhangqiaorjc:blake_ckpt
PiperOrigin-RevId: 402725516

==
==================
c6118032;Jake VanderPlas;2021-10-12 20:55:27 -0700;jnp.unique: support size argument with axis

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
d9c6ddcd;Qiao Zhang;2021-10-11 14:18:58 -0700;Add checkpoint policy to save dots w/o batch dim.

==

jax/_src/api.py
tests/api_test.py
==================
d703def1;jax authors;2021-10-12 19:35:54 -0700;Merge pull request #8190 from skye:version
PiperOrigin-RevId: 402714561

==
==================
2cd6fa3b;Skye Wanderman-Milne;2021-10-12 19:08:56 -0700;Update jax version number.
We're switching to updating the jax version number after a release to the next version number, like jaxlib.

==

jax/version.py
==================
75062c1a;jax authors;2021-10-12 19:04:46 -0700;Merge pull request #8188 from skye:version
PiperOrigin-RevId: 402710880

==
==================
962c496b;Skye Wanderman-Milne;2021-10-12 18:21:11 -0700;Update jax version and CHANGELOG for 0.2.22 release

==

CHANGELOG.md
jax/version.py
==================
66a4a9ff;Yash Katariya;2021-10-12 18:43:40 -0700;Remove 10.2 cuda support
PiperOrigin-RevId: 402707900

==

CHANGELOG.md
README.md
setup.py
==================
7a3bf61e;jax authors;2021-10-12 18:17:51 -0700;Merge pull request #8187 from skye:version
PiperOrigin-RevId: 402704087

==
==================
0072c325;Skye Wanderman-Milne;2021-10-12 17:37:29 -0700;Update CHANGELOG and verson numbers for jaxlib 0.1.72 release

==

CHANGELOG.md
jaxlib/version.py
setup.py
==================
832cf214;Neil Girdhar;2021-07-01 11:43:08 -0400;Fix jacfwd and jacrev for heterogeneous pytrees
Changed the behavior of `jacfwd`, `jacrev`, and `grad` when the input
pytree elements have heterogeneous dtypes, e.g., real and complex
elements:

* Changed the dtypes of the pytree elements of the Jacobian produced by
  jacfwd to be those of the input tangent basis.

* Changed the dtypes of the pytree elements of the Jacobian produced by
  jacrev to be those of the output tangent basis.

* Changed the dtypes of the pytree elements of the primals and tangents
  produced by jacfwd and jacrev to be the same as the corresponding
  elements in the input.

Changed the behavior of the flags to `jacfwd` and `jacrev`:

* Changed the allow_int flag to only allows integer and Boolean dtypes.
  Previously, this flag allowed all other types.

==

jax/_src/api.py
jax/_src/tree_util.py
tests/api_test.py
==================
075d8352;jax authors;2021-10-12 16:12:42 -0700;Merge pull request #8183 from froystig:named-shape-hash
PiperOrigin-RevId: 402680616

==
==================
9a182e66;Roy Frostig;2021-10-12 13:49:59 -0700;order-independent hash in `core.NamedShape`

==

jax/core.py
==================
f34387b9;Roy Frostig;2021-10-12 12:01:02 -0700;work around unhashable named shapes in `api.ShapeDtypeStruct`

==

jax/_src/api.py
tests/api_test.py
==================
b30fa132;jax authors;2021-10-12 15:40:35 -0700;Merge pull request #8145 from froystig:aot-pjit
PiperOrigin-RevId: 402673904

==
==================
8f924772;jax authors;2021-10-12 15:21:56 -0700;Merge pull request #8168 from froystig:prng-raw
PiperOrigin-RevId: 402669610

==
==================
77abc7f8;Roy Frostig;2021-10-08 21:19:37 -0700;ahead-of-time lowering and compilation frontend for pjit

==

jax/_src/api.py
jax/experimental/pjit.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
tests/api_test.py
tests/pjit_test.py
==================
9c119816;jax authors;2021-10-12 13:57:03 -0700;Rollback: breaks when layouts of variadic tuple elements differ
PiperOrigin-RevId: 402648033

==

jax/_src/lax/lax.py
==================
d8b7bd54;jax authors;2021-10-12 12:51:39 -0700;Merge pull request #8181 from skye:workspace
PiperOrigin-RevId: 402632543

==
==================
49a3b37a;Skye Wanderman-Milne;2021-10-12 11:23:07 -0700;Update WORKSPACE for jaxlib 0.1.72 release

==

WORKSPACE
==================
ef3e3b55;jax authors;2021-10-12 12:04:21 -0700;Rollback fix repr() of jit-compiled functions
PiperOrigin-RevId: 402621480

==

tests/api_test.py
==================
b95e86e1;Jake VanderPlas;2021-10-12 10:56:04 -0700;jax.numpy: explicitly use dtypes.scalar_type when appropriate

==

jax/_src/numpy/lax_numpy.py
==================
7fa6b1b5;jax authors;2021-10-12 09:24:24 -0700;Merge pull request #8160 from Jakob-Unfried:main
PiperOrigin-RevId: 402582053

==
==================
ba370f8c;Roy Frostig;2021-10-11 21:21:37 -0700;hide `keys` attribute of `PRNGKeyArray` in favor of `unsafe_raw_array`

==

jax/_src/prng.py
jax/_src/random.py
tests/api_test.py
tests/random_test.py
==================
40ee7f2e;jax authors;2021-10-12 08:12:33 -0700;Merge pull request #8164 from jakevdp:bcoo-dedupe-pad
PiperOrigin-RevId: 402565496

==
==================
ccc8b720;jax authors;2021-10-12 08:08:27 -0700;Merge pull request #8153 from apaszke:while-loop-batching
PiperOrigin-RevId: 402565162

==
==================
bec943ce;Jakob Unfried;2021-10-11 18:56:15 +0200;fix fori_loop and scan when trivial and with disable_jit

==

jax/_src/lax/control_flow.py
tests/lax_control_flow_test.py
==================
a8ce40be;jax authors;2021-10-12 06:57:58 -0700;Merge pull request #7989 from gnecula:remat_docstring
PiperOrigin-RevId: 402551996

==
==================
b8dc8ca0;Adam Paszke;2021-10-11 10:33:21 +0000;Fix while loop batching rule for loops with constant bodies
The previous implementation failed to reach a fixpoint when the body was
ignoring the carry and was returning an unbatched constant. Ensuring
that the result carry is at least as batched as the input carry should
fix the issue.

==

jax/_src/lax/control_flow.py
tests/lax_control_flow_test.py
==================
cfa0f78b;jax authors;2021-10-11 17:25:17 -0700;Merge pull request #8140 from jakevdp:nanstd-grad
PiperOrigin-RevId: 402431304

==
==================
21a6f5c2;Jake VanderPlas;2021-10-11 15:10:25 -0700;Fix repr() of jit-compiled functions (Fixes #8141)
PiperOrigin-RevId: 402402875

==

tests/api_test.py
==================
f56a3785;jax authors;2021-10-11 13:01:56 -0700;Merge pull request #8162 from froystig:gitignore-virtualenv
PiperOrigin-RevId: 402372106

==
==================
e30ca031;Jake VanderPlas;2021-10-11 12:48:27 -0700;[sparse] fix padding bug in BCOO._dedupe()

==

jax/experimental/sparse/bcoo.py
tests/sparse_test.py
==================
f9bbab3f;Roy Frostig;2021-10-11 11:06:33 -0700;add common virtualenv directories to .gitignore

==

.gitignore
==================
d1763341;jax authors;2021-10-11 10:19:44 -0700;Merge pull request #8144 from jakevdp:setdiff1d-size
PiperOrigin-RevId: 402331005

==
==================
9ea8ce9b;Jake VanderPlas;2021-10-08 09:45:35 -0700;BUG: fix gradients for nanvar & nanstd

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
348a098f;Jake VanderPlas;2021-10-09 08:20:29 -0700;jax.numpy: clarify extra docs about the size argument

==

jax/_src/numpy/lax_numpy.py
==================
29448819;Jake VanderPlas;2021-10-08 16:48:28 -0700;jnp.setdiff1d: add optional size and fill_value arguments

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
161363da;Marc van Zee;2021-10-11 07:12:33 -0700;Implements a modular and easily extensible evaluation framework for both TFLite and TFjs. The evaluation framework has the following features:
*  It is easy to add new Modules of examples since each Module is specified using a few lines of code (see `examples.py`).

* It is easy to add new converters since each converter is represented as a function (see `converters.py`). For instance, we could add the MLIR-based converter that the TFLite team is currently working on.

* The framework outputs a Markdown table (see `README.md`).

The framework has the following limitations:

* We only evaluate whether a Module converts, we do not compare any outputs between the converted model and the original model. This will require more effort, and it seems like we can do this as a follow-up if necessary (once a good fraction of ops are converted).

* If an example is missing multiple ops, then only the first missing op is reported. We could improve this by implementing mocked versions of non-working ops, which only output the right shapes. We could also consider doing this as a follow-up.

PiperOrigin-RevId: 402287865

==

jax/experimental/jax2tf/examples_eval/README.md
jax/experimental/jax2tf/examples_eval/all_examples.py
jax/experimental/jax2tf/examples_eval/converters.py
jax/experimental/jax2tf/examples_eval/converters_results.md
jax/experimental/jax2tf/examples_eval/converters_results.md.template
jax/experimental/jax2tf/examples_eval/examples_converter.py
jax/experimental/jax2tf/examples_eval/examples_test.py
==================
a47119d3;jax authors;2021-10-11 06:31:38 -0700;Merge pull request #8154 from apaszke:jax2tf-pjit-multihost
PiperOrigin-RevId: 402279083

==
==================
dad29d34;Adam Paszke;2021-10-11 10:47:43 +0000;Disallow jax2tf translation of multi-process pjits
I'm pretty sure it doesn't handle the local/global shape boundary
correctly which likely leads to very confusing errors on the TF side.

==

jax/experimental/jax2tf/jax2tf.py
==================
92819f7b;jax authors;2021-10-11 02:08:30 -0700;Merge pull request #8143 from jakevdp:union1d-fill-value
PiperOrigin-RevId: 402238900

==
==================
cd3d37f4;jax authors;2021-10-11 01:28:06 -0700;Merge pull request #8124 from gnecula:tf_poly
PiperOrigin-RevId: 402232971

==
==================
a75fb371;George Necula;2021-10-07 11:30:07 +0200;[jax2tf] Improved handling of getitem for shape polymorphism
* give an error for NumPy indexing with slices when the elements
  of the slices are not constant. This check existed, but was
  throing an error when the elements are dimension polynomials.
* give an error for NumPy indexing with slices when the dimension
  size is not constant.
* Improvements in the handling of enable_xla=False for shape
  polymorphism.
* Added test cases for the above.

==

jax/_src/numpy/lax_numpy.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/jax_primitives_coverage_test.py
jax/experimental/jax2tf/tests/shape_poly_test.py
==================
f2aef25f;George Karpenkov;2021-10-08 21:58:27 -0700;Use variadic reduce on GPU for argmax/argmin
PiperOrigin-RevId: 401923051

==

jax/_src/lax/lax.py
==================
a4241a2a;Jake VanderPlas;2021-10-08 15:18:25 -0700;jnp.union1d: add optional fill_value argument

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
da1caf5d;jax authors;2021-10-08 13:03:40 -0700;Merge pull request #7997 from google:aot
PiperOrigin-RevId: 401837898

==
==================
c353acb3;jax authors;2021-10-08 11:43:36 -0700;Merge pull request #8134 from jakevdp:sda-buffer-array
PiperOrigin-RevId: 401820091

==
==================
0c75f52f;Roy Frostig;2021-09-23 18:15:15 -0700;ahead-of-time lowering and compilation for jit

==

jax/_src/api.py
jax/interpreters/xla.py
tests/api_test.py
==================
75468c74;Roy Frostig;2021-09-23 15:12:51 -0700;factor out jit input preparation

==

jax/_src/api.py
==================
486aac94;Jake VanderPlas;2021-10-08 10:41:43 -0700;jnp.array: handle raw device buffers

==

jax/_src/numpy/lax_numpy.py
tests/pmap_test.py
==================
dd5df5a5;jax authors;2021-10-08 09:10:05 -0700;Merge pull request #8121 from jakevdp:unique-fill-value
PiperOrigin-RevId: 401785306

==
==================
39380182;George Necula;2021-10-08 10:11:31 +0200;Applied review suggestsions

==

jax/_src/api.py
==================
f9bead4b;jax authors;2021-10-07 23:06:34 -0700;Merge pull request #8135 from google:default-rng
PiperOrigin-RevId: 401692501

==
==================
2028087a;jax authors;2021-10-07 22:51:02 -0700;Merge pull request #8137 from mattjj:shaped-array-len
PiperOrigin-RevId: 401690179

==
==================
482e41d7;Matthew Johnson;2021-10-07 22:04:16 -0700;remove ShapedArray.__len__
It was confusing to overload, since we sometimes think of avals like
shapes paired with dtypes, and in that case len(aval) should perhaps be
like len(aval.shape). The only place where this behavior was relied on
was sparse/ops.py.

==

jax/core.py
jax/experimental/sparse/ops.py
==================
f8ec6649;jax authors;2021-10-07 21:53:40 -0700;Merge pull request #8136 from mattjj:rbg-improvements
PiperOrigin-RevId: 401683140

==
==================
98d245eb;Roy Frostig;2021-10-07 19:15:43 -0700;add a config setting to control the default PRNG implementation
Also add explicit seeding functions for each PRNG implementation.

==

jax/__init__.py
jax/_src/config.py
jax/_src/random.py
jax/random.py
tests/random_test.py
==================
022cb8c0;Matthew Johnson;2021-10-07 21:19:06 -0700;rbg_split and rbg_fold_in: use vmap for fewer HLOs

==

jax/_src/prng.py
==================
8af2cf12;jax authors;2021-10-07 21:18:23 -0700;Merge pull request #8133 from mattjj:dlpack-error-test-update
PiperOrigin-RevId: 401678825

==
==================
b002bc17;jax authors;2021-10-07 20:39:24 -0700;Merge pull request #8123 from mattjj:fix-rng-bit-generator-again
PiperOrigin-RevId: 401673628

==
==================
ef710ec1;Matthew Johnson;2021-10-07 19:14:13 -0700;update test of dlpack error message

==

tests/array_interoperability_test.py
==================
634d252b;Matthew Johnson;2021-10-06 21:54:22 -0700;improvements to RBG PRNG
1. factor out rbg_prng_impl and unsafe_rbg_prng_impl. the former uses
   threefry2x32 for split and fold_in, while the latter uses untested
   heuristics based on calling rng_bit_generator itself as a kind of
   hash function
2. for unsafe_rbg_prng_impl's split and fold_in, generate longer
   sequences from rng_bit_generator (10x iterations) which may be useful on
   some backends
3. for unsafe_rbg_prng_impl, actually apply rng_bit_generator as our
   'hash function' in fold_in

Co-authored-by: Roy Frostig <frostig@google.com>
Co-authored-by: Anselm Levskaya <levskaya@google.com>

==

jax/_src/prng.py
jax/prng.py
tests/random_test.py
==================
efa5edfd;jax authors;2021-10-07 06:23:59 -0700;Merge pull request #8091 from eelregit:check-eq-float0
PiperOrigin-RevId: 401494757

==
==================
c877f8bc;jax authors;2021-10-07 05:18:04 -0700;Merge pull request #8094 from sracaniere:patch-2
PiperOrigin-RevId: 401485340

==
==================
b0b60d62;jax authors;2021-10-07 01:16:53 -0700;Merge pull request #8116 from jakevdp:at-docs
PiperOrigin-RevId: 401447782

==
==================
8f0589f0;jax authors;2021-10-06 21:54:20 -0700;Merge pull request #8117 from LenaMartens:changelist/400933831
PiperOrigin-RevId: 401418826

==
==================
bfbdfa87;Yash Katariya;2021-10-06 19:51:08 -0700;Add a warmup loop to pmap_simple_8_devices_100_args benchmark so as to not measure the compile time.
PiperOrigin-RevId: 401402336

==

benchmarks/api_benchmark.py
==================
0b93c46c;Jake VanderPlas;2021-10-06 16:28:36 -0700;jnp.unique: add fill_value for when size is not None

==

CHANGELOG.md
jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
3c117fd6;jax authors;2021-10-06 14:42:18 -0700;Merge pull request #8090 from skye:compilation_cache_xla_flags
PiperOrigin-RevId: 401343120

==
==================
5425db67;jax authors;2021-10-06 14:16:10 -0700;Merge pull request #8113 from hawkinsp:deprecate
PiperOrigin-RevId: 401336968

==
==================
f939048e;Skye Wanderman-Milne;2021-10-04 17:22:14 -0700;Include XLA_FLAGS in persistent compilation cache key.
This is to prevent false cache hits when the compiler behavior is
changed via flags. Flags known to not affect the compiled executable
(e.g. dumping HLO) are excluded from the key.

Note that any XLA flags with arguments should use = and not a space,
e.g. `--xla_flag=value`, not `--xla_flag value`. I believe this is
already a requirement of ABSL flags in general, but I'm not 100% sure.

Also note that this doesn't currently support XLA flags specified via
--flagfile. Please file a feature request if this is needed.

==

jax/experimental/compilation_cache/compilation_cache.py
tests/compilation_cache_test.py
==================
b466187b;Peter Hawkins;2021-10-06 09:31:42 -0400;Add note to changelog about deprecation of jax.ops.index_...

==

CHANGELOG.md
==================
ac13c745;jax authors;2021-10-06 13:41:01 -0700;Merge pull request #8120 from jakevdp:fix-mypy-2
PiperOrigin-RevId: 401328027

==
==================
359f55eb;Jake VanderPlas;2021-10-06 12:08:22 -0700;[sparse] fix type checking issue

==

jax/experimental/sparse/ops.py
==================
1f5bfde6;jax authors;2021-10-06 11:24:17 -0700;Merge pull request #8102 from jakevdp:refactor-bcoo
PiperOrigin-RevId: 401294831

==
==================
bba04e09;Jake VanderPlas;2021-10-06 11:22:00 -0700;Document extra arguments to jnp.ndarray.at[]

==

jax/_src/numpy/lax_numpy.py
==================
803b83ee;Jean-Baptiste Lespiau;2021-10-06 10:07:41 -0700;Enable C++ pmap.
On CPU:
```
name                                     old cpu/op  new cpu/op  delta
pmap_trivial_2_devices                    128µs ± 6%    14µs ± 3%  -89.06%  (p=0.008 n=5+5)
pmap_trivial_dispatch_8_devices           212µs ± 2%    35µs ± 1%  -83.54%  (p=0.008 n=5+5)
pmap_trivial_8_devices                    215µs ± 1%    40µs ± 4%  -81.31%  (p=0.008 n=5+5)
pmap_simple_2_devices                     123µs ± 5%    15µs ± 6%  -87.70%  (p=0.008 n=5+5)
pmap_simple_dispatch_8_devices            211µs ± 3%    35µs ± 2%  -83.24%  (p=0.008 n=5+5)
pmap_simple_8_devices                     217µs ± 5%    40µs ± 2%  -81.68%  (p=0.008 n=5+5)
pmap_simple_dispatch_8_devices_100_args  5.42ms ± 7%  0.52ms ± 2%  -90.44%  (p=0.008 n=5+5)
pmap_simple_8_devices_100_args           26.5ms ±21%  17.5ms ±37%  -34.18%  (p=0.008 n=5+5)
sda_index_1                              7.45µs ± 6%  7.53µs ± 6%     ~     (p=0.222 n=5+5)
sda_index_2                              14.1µs ± 1%  14.3µs ± 4%     ~     (p=0.690 n=5+5)
sda_index_8                              56.0µs ± 3%  56.9µs ± 4%     ~     (p=0.310 n=5+5)

name                                     old time/op             new time/op             delta
pmap_trivial_2_devices                    136µs ± 8%               19µs ± 3%  -86.08%          (p=0.008 n=5+5)
pmap_trivial_dispatch_8_devices           216µs ± 3%               39µs ± 2%  -81.94%          (p=0.008 n=5+5)
pmap_trivial_8_devices                    219µs ± 2%               49µs ±38%  -77.67%          (p=0.008 n=5+5)
pmap_simple_2_devices                     130µs ± 5%               20µs ± 5%  -84.38%          (p=0.008 n=5+5)
pmap_simple_dispatch_8_devices            216µs ± 3%               39µs ± 5%  -81.71%          (p=0.008 n=5+5)
pmap_simple_8_devices                     221µs ± 6%               43µs ± 1%  -80.41%          (p=0.016 n=5+4)
pmap_simple_dispatch_8_devices_100_args  5.52ms ± 7%             0.59ms ± 2%  -89.28%          (p=0.008 n=5+5)
pmap_simple_8_devices_100_args           26.6ms ±21%             17.6ms ±37%  -34.04%          (p=0.008 n=5+5)
sda_index_1                              7.48µs ± 8%             7.53µs ± 6%     ~             (p=0.310 n=5+5)
sda_index_2                              14.1µs ± 1%             14.3µs ± 4%     ~             (p=0.690 n=5+5)
sda_index_8                              56.0µs ± 3%             56.9µs ± 4%     ~             (p=0.310 n=5+5)
```

PiperOrigin-RevId: 401274089

==

CHANGELOG.md
jax/_src/api.py
==================
342948dc;Lena Martens;2021-10-05 10:57:21 +0100;Add batching rule for rng_bit_generator.

==

jax/_src/lax/lax.py
tests/random_test.py
==================
c2dd90e3;Jake VanderPlas;2021-10-06 08:06:18 -0700;[sparse] Factor BCOO-related routines into a separate submodule

==

jax/experimental/sparse/__init__.py
jax/experimental/sparse/ad.py
jax/experimental/sparse/bcoo.py
jax/experimental/sparse/ops.py
jax/experimental/sparse/transform.py
tests/sparse_test.py
==================
b9b0ce5d;jax authors;2021-10-06 06:52:46 -0700;Merge pull request #8114 from hawkinsp:docs
PiperOrigin-RevId: 401232615

==
==================
e81f5cdf;Peter Hawkins;2021-10-06 09:42:28 -0400;Remove documentation for --xla_hlo_profile.
It doesn't work on CPU and GPU, and it's probably hurting more than it's helping to have it documented.

==

docs/profiling.md
==================
e679302d;jax authors;2021-10-06 05:25:08 -0700;Merge pull request #8109 from jakevdp:sparsify-spdot
PiperOrigin-RevId: 401218394

==
==================
9d6dcfb0;jax authors;2021-10-06 05:24:49 -0700;Merge pull request #8110 from google:all-gather-hlo
PiperOrigin-RevId: 401218393

==
==================
de6705be;jax authors;2021-10-06 05:20:42 -0700;Merge pull request #8107 from jakevdp:copy
PiperOrigin-RevId: 401218373

==
==================
26b70db1;jax authors;2021-10-05 21:03:08 -0700;Merge pull request #8106 from google:fix-rng-bit-generator-bit-manipulation
PiperOrigin-RevId: 401143001

==
==================
8d641a1d;Matthew Johnson;2021-10-05 13:46:57 -0700;fix rng_bit_generator translation rule
Fix two issues:
1. bit packing was incorrect
2. output key had different shape from input key

Co-authored-by: Lena Martens <lenamartens@google.com>

==

jax/_src/lax/lax.py
tests/lax_test.py
==================
e22c232c;Jake VanderPlas;2021-10-05 20:10:57 -0700;jnp.array: replace host round-trip with on-device copy

==

jax/_src/lax/lax.py
jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
d3f31f6f;jax authors;2021-10-05 19:26:50 -0700;Merge pull request #8103 from hawkinsp:deprecate
PiperOrigin-RevId: 401129064

==
==================
104a4659;Peter Hawkins;2021-10-05 16:12:52 -0400;Add DeprecationWarnings to jax.ops.index_... operators.
Remove uses of index_... in Common Gotchas notebook.

==

docs/notebooks/Common_Gotchas_in_JAX.ipynb
docs/notebooks/Common_Gotchas_in_JAX.md
jax/_src/ops/scatter.py
pytest.ini
tests/lax_numpy_indexing_test.py
==================
86022adf;James Bradbury;2021-10-05 17:17:48 -0700;Use all_gather+reduce_scatter HLOs on TPU
The all-gather and reduce-scatter HLOs were wired through for GPU but not TPU, but they should also work there (and be more performant than the all-reduce based fallback).
==

jax/_src/lax/parallel.py
==================
3a440d66;Jake VanderPlas;2021-10-05 16:45:48 -0700;[sparse] add sparsify support for sparse-sparse matmul

==

jax/experimental/sparse/transform.py
tests/sparsify_test.py
==================
d8fe8bf5;jax authors;2021-10-05 16:01:30 -0700;Merge pull request #8108 from jakevdp:cleanup-import
PiperOrigin-RevId: 401092427

==
==================
a0c2fe0d;Jake VanderPlas;2021-10-05 15:47:09 -0700;Remove duplicate import

==

jax/lax/__init__.py
==================
201ae77f;jax authors;2021-10-05 15:15:44 -0700;Merge pull request #8105 from jakevdp:jupytext-update
PiperOrigin-RevId: 401081933

==
==================
198cc5ee;Jake VanderPlas;2021-10-05 13:45:26 -0700;chore: update jupytext to v0.1.13 & re-sync notebooks

==

.pre-commit-config.yaml
docs/autodidax.ipynb
docs/autodidax.md
docs/autodidax.py
docs/jax-101/01-jax-basics.md
docs/jax-101/02-jitting.md
docs/jax-101/03-vectorization.md
docs/jax-101/04-advanced-autodiff.md
docs/jax-101/05-random-numbers.md
docs/jax-101/05.1-pytrees.md
docs/jax-101/06-parallelism.md
docs/jax-101/07-state.md
docs/jax-101/08-pjit.md
docs/notebooks/Common_Gotchas_in_JAX.md
docs/notebooks/Custom_derivative_rules_for_Python_code.md
docs/notebooks/How_JAX_primitives_work.md
docs/notebooks/Neural_Network_and_Data_Loading.md
docs/notebooks/Writing_custom_interpreters_in_Jax.md
docs/notebooks/XLA_in_Python.md
docs/notebooks/autodiff_cookbook.md
docs/notebooks/convolutions.md
docs/notebooks/neural_network_with_tfds_data.md
docs/notebooks/quickstart.md
docs/notebooks/thinking_in_jax.md
docs/notebooks/vmapped_log_probs.md
docs/notebooks/xmap_tutorial.md
docs/transformations.md
==================
349c9f2b;jax authors;2021-10-05 14:28:07 -0700;Merge pull request #8104 from hawkinsp:py310
PiperOrigin-RevId: 401072107

==
==================
6a284ce5;Peter Hawkins;2021-10-05 16:16:59 -0400;Fix incorrect EllipsisType reference for Python 3.10

==

jax/_src/ops/scatter.py
==================
aaa44fa2;jax authors;2021-10-05 13:12:24 -0700;Merge pull request #8101 from hawkinsp:py310
PiperOrigin-RevId: 401059670

==
==================
29447ed2;Peter Hawkins;2021-10-05 15:25:28 -0400;Fixes for Python 3.10.
With these changes, the JAX test suite passes on Python 3.10.

==

jax/_src/api.py
jax/_src/tree_util.py
tests/api_test.py
tests/tree_util_test.py
==================
2cbb099f;jax authors;2021-10-05 09:37:05 -0700;Merge pull request #8098 from hawkinsp:partialmethod
PiperOrigin-RevId: 401006648

==
==================
42e0d4e5;Peter Hawkins;2021-10-05 12:12:41 -0400;Remove jax._src.util.partialmethod.
Use functools.partialmethod instead, which has existed since Python 3.4. The JAX partialmethod doesn't work correctly in Python 3.10.

Issue #8097

==

jax/_src/util.py
jax/core.py
jax/interpreters/xla.py
==================
ece53255;Yin Li;2021-10-05 11:30:19 -0400;Simplify shape comparison with numpy assert

==

jax/_src/test_util.py
==================
1520fa26;Adam Paszke;2021-10-05 04:30:56 -0700;Change semantics of positional shapes depending on pjit nesting
One interesting angle of pjit is that it is a boundary between a multi-controller
world in which `.shape` attributes of all arrays (and avals) correspond to
slices of data that are internall to a given process, and a single-controller
world where `.shape` refers to the global array constructed by concatenating
per-device chunks. I haven't fully appreciated this previously which made
pjit nests (and xmaps in pjits) to incorrectly increase shapes with every
level of nesting, when only the outermost call that should make the change.

We now keep track of a flag that determines whether the positional shape of
avals we see is global or local in any given context. Note that sizes of named
axes have been and still are global only.

PiperOrigin-RevId: 400949756

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/maps.py
jax/experimental/pjit.py
==================
8bb8c8e9;sracaniere;2021-10-05 09:19:23 +0100;Update doc for eigh.
Mention `eigenvectors` before `eigenvalues` in doc to match the order of returned values.
==

jax/_src/lax/linalg.py
==================
cd93d832;jax authors;2021-10-04 22:09:07 -0700;Merge pull request #8092 from google:rng-bit-generator-bitcast
PiperOrigin-RevId: 400892459

==
==================
7ec797b7;Matthew Johnson;2021-10-04 21:47:12 -0700;lower rng_bit_generator using a BitcastConvertType

==

jax/_src/lax/lax.py
==================
5d675220;Yin Li;2021-10-04 21:32:57 -0400;Add float0 support to equality and closeness check

==

jax/_src/test_util.py
==================
50141e66;jax authors;2021-10-04 18:21:29 -0700;Merge pull request #8088 from skye:fix_formatting
PiperOrigin-RevId: 400862458

==
==================
256e7220;Peter Hawkins;2021-10-04 17:54:18 -0700;[JAX] Fix pylint errors.
* trailing-whitespace
* dangerous-default-value. None of these appear to be bugs in practice, but the potential for accidentally mutating the default value is there, and the cost of avoiding the problem is small.
* invalid-envvar-default. Pass strings as getenv() defaults.
* unnecessary-semicolon. Use tuples instead for this one-liner.
* invalid-hash-returned. Raise an exception rather than asserting false.
* pointless-string-statement. Use comments instead.
* unreachable. Use @unittest.skip() decorator rather than raising as first line in test.
* logging-not-lazy. Make the logging lazy.
* bad-format-string-type. Use f-string instead.
* subprocess-run-check. Pass check=...

PiperOrigin-RevId: 400858477

==

benchmarks/benchmark.py
build/build.py
build/build_wheel.py
docs/sphinxext/jax_extensions.py
examples/gaussian_process_regression.py
jax/_src/api.py
jax/_src/config.py
jax/_src/lib/xla_bridge.py
jax/_src/test_util.py
jax/core.py
jax/experimental/host_callback.py
jax/experimental/jax2tf/tests/call_tf_test.py
jax/experimental/sparse/__init__.py
jax/linear_util.py
jax/scipy/stats/betabinom.py
tests/api_test.py
tests/custom_object_test.py
tests/djax_test.py
tests/errors_test.py
tests/host_callback_test.py
tests/jet_test.py
tests/lax_autodiff_test.py
tests/lax_control_flow_test.py
tests/lax_numpy_einsum_test.py
tests/lax_numpy_test.py
tests/lax_test.py
tests/lax_vmap_test.py
tests/masking_test.py
tests/metadata_test.py
tests/pmap_test.py
tests/polynomial_test.py
tests/tree_util_test.py
==================
62c922ae;Skye Wanderman-Milne;2021-10-04 13:52:23 -0700;Convert 4-space indents to 2-space.

==

jax/experimental/compilation_cache/compilation_cache.py
tests/compilation_cache_test.py
==================
75295970;jax authors;2021-10-04 16:43:55 -0700;Merge pull request #8089 from jakevdp:bcoo-spdot-batch
PiperOrigin-RevId: 400845211

==
==================
efdc3cc7;Peter Hawkins;2021-10-04 16:36:47 -0700;[JAX] Fix more pylint errors.
* duplicate-string-formatting-argument: use f-strings.
* logging-format-interpolation: use interpolation. Some of these are real but minor performance problems.
* bad-string-format-type: don't use the wrong format type.

PiperOrigin-RevId: 400843759

==

jax/experimental/compilation_cache/compilation_cache.py
jax/experimental/host_callback.py
jax/experimental/jax2tf/examples/mnist_lib.py
jax/experimental/jax2tf/examples/saved_model_main.py
jax/experimental/jax2tf/examples/serving/model_server_request.py
jax/experimental/jax2tf/tests/jax_primitives_coverage_test.py
jax/experimental/jax2tf/tests/sharding_test.py
jax/experimental/jax2tf/tests/tf_test_util.py
jax/interpreters/pxla.py
jax/interpreters/sharded_jit.py
tests/fft_test.py
tests/host_callback_test.py
==================
cc44abde;Jake VanderPlas;2021-10-04 16:32:44 -0700;[sparse] fix & test vmap of spdot

==

jax/experimental/sparse/ops.py
tests/sparse_test.py
==================
d93df6d0;jax authors;2021-10-04 12:55:17 -0700;Merge pull request #8083 from jakevdp:bcoo-spdot-jit
PiperOrigin-RevId: 400792738

==
==================
498451ee;Jake VanderPlas;2021-10-04 11:46:57 -0700;[sparse]: fix JIT compilation for spdot_general

==

jax/experimental/sparse/ops.py
tests/sparse_test.py
==================
e42dcd20;jax authors;2021-10-04 11:30:06 -0700;Merge pull request #8081 from jakevdp:bcoo-spdot-slow
PiperOrigin-RevId: 400772244

==
==================
b519d590;Jake VanderPlas;2021-10-04 10:28:06 -0700;[sparse] support multiple sparse dimensions in bcoo_spdot_general

==

jax/experimental/sparse/ops.py
tests/sparse_test.py
==================
490d0497;Adam Paszke;2021-10-04 03:24:50 -0700;Strengthen resource type checking to verify physical mesh consistency
This lets us verify that the users are not modifying physical mesh inside pjits.

PiperOrigin-RevId: 400675775

==

jax/experimental/maps.py
jax/experimental/pjit.py
jax/interpreters/pxla.py
tests/pjit_test.py
==================
c61becc3;jax authors;2021-10-04 01:42:06 -0700;Merge pull request #8065 from jakevdp:index-update-doc
PiperOrigin-RevId: 400660347

==
==================
0ae2d15d;jax authors;2021-10-02 21:18:27 -0700;Merge pull request #8071 from google:pjit-custom-prngkey-test
PiperOrigin-RevId: 400489219

==
==================
fa187327;Matthew Johnson;2021-10-02 20:52:00 -0700;add regression test for #8070

==

tests/pjit_test.py
==================
aa8f2da8;jax authors;2021-10-02 20:57:00 -0700;Merge pull request #8070 from google:pjit-dont-use-treemap-for-arg-checking
PiperOrigin-RevId: 400486955

==
==================
3cf3e21c;Matthew Johnson;2021-10-02 20:33:30 -0700;don't use tree_map for pjit arg checking
We only need to get the argument leaves for error checking. By avoiding
tree_map we avoid creating (and then throwing away) a results tree with
Nones at the leaves (since `_check_arg` returns None). More importantly,
this makes the code work with pytrees which don't actually support
containing Nones (like the PRNGKeyArray pytree!).

==

jax/experimental/pjit.py
==================
07083e7e;jax authors;2021-10-01 19:23:54 -0700;Merge pull request #8067 from google:rbg-prng
PiperOrigin-RevId: 400341853

==
==================
980dfcfd;Matthew Johnson;2021-10-01 18:15:00 -0700;add experimental RngBitGenerator ("RBG") PRNG
Not only is this an experimental API, but also because the
RngBitGenerator is not guaranteed to be stable across compiler versions
(or backends or shardings), let's assert that this JAX PRNG
implementation may not be stable across JAX versions.

Even without that kind of stability, this PRNG is still useful because
compared to effectful RNG primitives, like lax.rng_uniform, this RBG
PRNG will still work correctly with lax.scan and jax.checkpoint (while
still potentially being more performant on some platforms than JAX's
standard PRNG).

==

jax/_src/lax/lax.py
jax/_src/prng.py
jax/prng.py
tests/random_test.py
==================
e01dc5dd;jax authors;2021-10-01 15:03:20 -0700;Merge pull request #8066 from jakevdp:bcoo-shape-util
PiperOrigin-RevId: 400299433

==
==================
da34b8f9;Jake VanderPlas;2021-10-01 14:54:15 -0700;[sparse] add dot_general shape utility

==

jax/experimental/sparse/ops.py
==================
c35b2f24;Jake VanderPlas;2021-10-01 14:06:08 -0700;DOC: move index update API docs to jnp.ndarray.at - Add docstring to abstract  property - Add explicit HTML documentation of this property - Mark index update functions as deprecated, linking to this documentation

==

docs/jax.numpy.rst
jax/_src/numpy/lax_numpy.py
jax/_src/ops/scatter.py
==================
6cc73070;jax authors;2021-10-01 12:41:24 -0700;Merge pull request #8062 from jakevdp:bcoo-validate
PiperOrigin-RevId: 400267620

==
==================
f5d5d618;jax authors;2021-10-01 12:05:58 -0700;Merge pull request #8063 from jakevdp:sparse-repr
PiperOrigin-RevId: 400259987

==
==================
56be030a;Jake VanderPlas;2021-10-01 11:56:53 -0700;[sparse]: use namedtuple for bcoo validation

==

jax/experimental/sparse/ops.py
==================
6f94191d;Jake VanderPlas;2021-10-01 10:40:17 -0700;[sparse]: make repr safe for invalid BCOO objects

==

jax/experimental/sparse/ops.py
tests/sparse_test.py
==================
7b4e977c;jax authors;2021-10-01 10:07:14 -0700;Merge pull request #8055 from hawkinsp:ppcontext
PiperOrigin-RevId: 400230467

==
==================
d4023508;Peter Hawkins;2021-09-28 10:00:45 -0400;Uniquify variable names globally within a jaxpr.
It is confusing when the same name is shadowed within an inner lambda expression. Use globally unique variable names in each pretty-printed jaxpr.

==

docs/jaxpr.rst
jax/core.py
jax/experimental/djax.py
jax/interpreters/partial_eval.py
jax/interpreters/xla.py
tests/api_test.py
tests/host_callback_test.py
==================
02d7d837;Peter Hawkins;2021-10-01 08:39:11 -0700;[JAX] Replace uses of deprecated `jax.ops.index_update(x, idx, y)` APIs with their up-to-date, more succinct equivalent `x.at[idx].set(y)`.
The JAX operators:
jax.ops.index_update(x, jax.ops.index[idx], y)
jax.ops.index_add(x, jax.ops.index[idx], y)
...

have long been deprecated in lieu of their more succinct counterparts:
x.at[idx].set(y)
x.at[idx].add(y)
...

This change updates users of the deprecated APIs to use the current APIs, in preparation for removing the deprecated forms from JAX.

The main subtlety is that if `x` is not a JAX array, we must cast it to one using `jnp.asarray(x)` before using the new form, since `.at[...]` is only defined on JAX arrays.

PiperOrigin-RevId: 400209692

==

examples/control.py
tests/lax_numpy_indexing_test.py
==================
42da0892;jax authors;2021-10-01 08:41:31 -0700;Merge pull request #8059 from apaszke:keep-axis-env
PiperOrigin-RevId: 400209213

==
==================
0808fdfa;jax authors;2021-10-01 08:37:17 -0700;Merge pull request #8060 from apaszke:fix-xmap-message
PiperOrigin-RevId: 400209156

==
==================
6c36c3e1;Adam Paszke;2021-10-01 11:24:39 +0000;Fix xmap error message when checking axis specs
The error message helpfully suggested using dictionaries, but it swapped
the types for keys and values, for added confusion :)

==

jax/experimental/maps.py
==================
08685efb;Adam Paszke;2021-10-01 11:12:14 +0000;Keep axis_env initialized during jaxpr_subcomp
``jaxpr_subcomp`` likes to lower control-flow primitives by tracing them
again as JAX callables, but they're all axis primitives now and so they
do require a properly initialized axis env.

==

jax/_src/api.py
tests/api_test.py
==================
7bf91463;jax authors;2021-09-30 13:02:13 -0700;Merge pull request #7328 from hawkinsp:hashable
PiperOrigin-RevId: 400003257

==
==================
a11d957e;Peter Hawkins;2021-07-19 13:11:38 -0400;Disallow non-hashable static arguments in pmap().
* Don't wrap static arguments in hashable wrappers in pmap.
* Delete wrap_hashably().
* In argnums_partial, either enforce hashability or wrap values with an explicitly unhashable wrapper. The intent here is that either we should check for hashability early or we should make sure it's clear that it's not something we intended..
* Delete argnames_partial, which appears unused.

==

CHANGELOG.md
jax/_src/api.py
jax/_src/api_util.py
jax/_src/custom_derivatives.py
jax/_src/util.py
tests/pmap_test.py
==================
a163b6ec;Peter Hawkins;2021-09-30 12:36:47 -0700;[JAX] Canonicalize shapes in jax.image.resize().
This makes jax.image.resize() robust to having jnp arrays passed as sizes. It also turns out some users were passing floating point values here, and this means they are correctly flagged as errors.

PiperOrigin-RevId: 399996702

==

jax/_src/image/scale.py
tests/image_test.py
==================
37283986;jax authors;2021-09-30 12:34:37 -0700;Merge pull request #8054 from skye:fix
PiperOrigin-RevId: 399996116

==
==================
84889034;Skye Wanderman-Milne;2021-09-30 12:08:57 -0700;Mark --jax_xla_backend as deprecated.

==

jax/_src/lib/xla_bridge.py
==================
4a664211;jax authors;2021-09-30 11:36:38 -0700;Merge pull request #8053 from hawkinsp:oob
PiperOrigin-RevId: 399983181

==
==================
8f51a929;jax authors;2021-09-30 11:21:27 -0700;Merge pull request #8035 from skye:jax_platforms
PiperOrigin-RevId: 399979260

==
==================
f8ba0246;Peter Hawkins;2021-09-30 14:21:05 -0400;Fix JAX functions to work if the default gather mode is set to "fill".
These functions really do want "clip".

==

jax/_src/numpy/lax_numpy.py
jax/_src/scipy/special.py
==================
4f6a6c5d;jax authors;2021-09-30 11:17:29 -0700;Merge pull request #8052 from jakevdp:sparse-indexing-OOB
PiperOrigin-RevId: 399978511

==
==================
adcab940;Skye Wanderman-Milne;2021-09-28 11:46:52 -0700;Add `--jax_platforms` flag to replace `--jax_platform_name`.
The motivation for this change is to make it possible to avoid
initializing unused backends, which may have undesirable side effects
(e.g. GPU memory allocation, only one process can use a Cloud TPU at a
time). It also provides a new and more flexible mechanism for
configuring the default backend, in order to minimize the number of
configs we have.

==

jax/_src/lib/xla_bridge.py
tests/xla_bridge_test.py
==================
a8662405;Jake VanderPlas;2021-09-30 10:48:41 -0700;[sparse] avoid relying on OOB index clipping

==

jax/experimental/sparse/ops.py
==================
c1824087;jax authors;2021-09-30 09:37:22 -0700;Merge pull request #8034 from skye:get_backend_refactor
PiperOrigin-RevId: 399953562

==
==================
004d8558;Adam Paszke;2021-09-30 07:26:46 -0700;Raise a clear error message when pjit is used with CPU devices
PiperOrigin-RevId: 399927116

==

jax/experimental/pjit.py
==================
16f0d51c;jax authors;2021-09-29 11:35:15 -0700;Merge pull request #8045 from skye:fix_pjit_test
PiperOrigin-RevId: 399734958

==
==================
7a848a36;Skye Wanderman-Milne;2021-09-29 11:11:01 -0700;Add jaxlib version check to pjit_test.py

==

tests/pjit_test.py
==================
90fdfbe8;jax authors;2021-09-29 09:37:49 -0700;Merge pull request #8033 from SaturdayGenfo:schur-lapack-wrapper
PiperOrigin-RevId: 399706351

==
==================
2a4648b0;Adam Paszke;2021-09-29 07:40:13 -0700;Improve the error message raised when local mesh is not a continuous subcube
We need this restriction for now to make the stacking of per-device chunks into
process-local SDAs to make sense. Once we have GSDA we can revisit this
restriction.

PiperOrigin-RevId: 399683607

==

jax/interpreters/pxla.py
==================
22dce0f4;Adam Paszke;2021-09-29 07:19:28 -0700;Add reverse-mode AD support for pjit
This is a somewhat big patch, because the transposition process turns out to be
quite difficult. The biggest issue appears when we do partial evaluation and we have
to add a whole bunch of intermediate values as outputs of the primal computation,
but we don't have any partition specs for them!

A simple workaround would be to mark all of them as replicated, but that would
likely tank performance which is why we didn't go with that option. Instead, we use
a newly added XLA option called `allow_spmd_sharding_propagation_to_output` to compile
a throwaway executable that lets us query output sharding that XLA considers convenient
for the computation.

However, there's one more difficulty: XLA's `OpSharding` is much less constrained
than our `PartitionSpec`s. In particular, while `PartitionSpec`s can only represent
"block permutations" of devices (with blocks deliniated by mesh axes), `OpSharding`
allows arbitrary assignment (permutation) of tensor chunks to devices. This means that
not every `OpSharding` has a corresponding `PartitionSpec`, but I did implement a
(somewhat involved) procedure that should recover one whenever it exists.

Unfortunately this makes our support for reverse-mode AD partial, because we might
be unable to handle `OpSharding` returned by XLA. But this will only happen if XLA
actually comes up with sharding specifications on its own. If it merely propagates
the sharding obtained from `PartitionSpec`s into the middle of the computation, then
we should be good. In any case, if we end up seeing failures in this path, we should
consider relaxing `PartitionSpec`s, but that would be a pretty large change, so I decided
to avoid it unless there's no other way.

PiperOrigin-RevId: 399680306

==

WORKSPACE
jax/_src/test_util.py
jax/experimental/maps.py
jax/experimental/pjit.py
jax/interpreters/ad.py
jax/interpreters/partial_eval.py
jax/interpreters/pxla.py
tests/pjit_test.py
==================
f9a246ac;Leello Tadesse Dadi;2021-09-28 20:34:35 +0200;schur lapack wrapper

==

jax/_src/lax/linalg.py
jax/lax/linalg.py
jaxlib/cpu_kernels.cc
jaxlib/lapack.cc
jaxlib/lapack.py
jaxlib/lapack_kernels.cc
jaxlib/lapack_kernels.h
tests/linalg_test.py
==================
d697ce20;Aden Grue;2021-09-28 17:53:17 -0700;Relax the tolerances in one 'lax_scipy_test' case
An upcoming CPU codegen change increases error slightly above the current tolerances.

PiperOrigin-RevId: 399570540

==

tests/lax_scipy_test.py
==================
45370ec8;jax authors;2021-09-28 13:09:12 -0700;Merge pull request #8030 from jakevdp:fix-multivariate-normal
PiperOrigin-RevId: 399511966

==
==================
5400bf4e;Skye Wanderman-Milne;2021-09-28 07:00:46 -0700;Refactor `xla_bridge.get_backend()`.
This is mostly a non-functional change, except to fix a few odd edge cases (see unit tests changes).

==

jax/_src/lib/xla_bridge.py
tests/xla_bridge_test.py
==================
7f68066e;jax authors;2021-09-28 11:43:36 -0700;Merge pull request #7627 from skye:get_backend_test
PiperOrigin-RevId: 399491646

==
==================
b5ebdf8e;jax authors;2021-09-28 10:22:19 -0700;Merge pull request #8029 from nicholasjng:test-flag-fix
PiperOrigin-RevId: 399470450

==
==================
1830aff2;Jake VanderPlas;2021-09-28 09:58:08 -0700;random.multivariate_normal: fix broadcasting for svd & eigh methods

==

jax/_src/random.py
tests/random_test.py
==================
8a68f776;Nicholas Junge;2021-09-28 18:42:44 +0200;Change absl flag documentation to mention `re.search`
The absl help texts for test target discovery mention that targets
will be discovered by `re.match` use. However, in the subsequent
implementation, actually `re.search` is used. This commit changes the
help texts for the `test_targets` and `exclude_test_targets` flags
to correctly mention `re.search` as the discovery algorithm.

==

jax/_src/test_util.py
==================
c949c304;jax authors;2021-09-28 09:39:14 -0700;Merge pull request #8016 from jakevdp:jnp-array-doc
PiperOrigin-RevId: 399460543

==
==================
a7683c04;jax authors;2021-09-28 08:25:05 -0700;Merge pull request #8026 from hawkinsp:partial
PiperOrigin-RevId: 399444624

==
==================
76ef28b2;Peter Hawkins;2021-09-28 11:04:02 -0400;Remove jax.util.partial.

==

jax/util.py
==================
dce4f93b;jax authors;2021-09-28 07:35:13 -0700;Merge pull request #8023 from hawkinsp:pprint
PiperOrigin-RevId: 399436392

==
==================
836926c4;Skye Wanderman-Milne;2021-08-13 17:09:12 -0700;Add xla_bridge_test.GetBackendTest
This is in preparation for refactoring the get_backend logic, see the TODOs in the test.

==

tests/xla_bridge_test.py
==================
ef560fb1;Peter Hawkins;2021-09-28 10:01:51 -0400;Print long variable lists more compactly.

==

jax/core.py
==================
ef696a0b;jax authors;2021-09-28 06:26:24 -0700;Merge pull request #8019 from hawkinsp:pprint
PiperOrigin-RevId: 399424971

==
==================
c720dd04;jax authors;2021-09-28 02:12:49 -0700;Merge pull request #8015 from jakevdp:devices-doc
PiperOrigin-RevId: 399387175

==
==================
5fa4613e;Peter Hawkins;2021-09-24 22:08:42 -0400;Adds a Wadler-Lindig pretty printer.
Changes jaxpr printing to use it.

==

build/test-requirements.txt
docs/jaxpr.rst
jax/_src/api.py
jax/_src/pprint_util.py
jax/_src/pretty_printer.py
jax/_src/prng.py
jax/core.py
jax/experimental/djax.py
jax/experimental/host_callback.py
jax/interpreters/xla.py
mypy.ini
tests/api_test.py
tests/core_test.py
tests/host_callback_test.py
tests/metadata_test.py
==================
99457edc;jax authors;2021-09-27 13:39:01 -0700;Merge pull request #8018 from jakevdp:ndarray-changelog
PiperOrigin-RevId: 399269824

==
==================
48157a7c;Jake VanderPlas;2021-09-27 11:38:36 -0700;Update v0.2.21 changelog for #7927

==

CHANGELOG.md
==================
3def8340;Jake VanderPlas;2021-09-27 10:40:51 -0700;DOC: refer to device_put within the jnp.array/asarray docs

==

jax/_src/numpy/lax_numpy.py
==================
ff2bfc0e;Jake VanderPlas;2021-09-27 09:48:27 -0700;DOC: fix  docstring and add  docs.

==

docs/jax.lib.rst
docs/jax.rst
jax/_src/lib/__init__.py
jax/_src/lib/xla_bridge.py
==================
f3b9cac7;jax authors;2021-09-27 06:57:08 -0700;Merge pull request #8003 from hawkinsp:jitlinalg
PiperOrigin-RevId: 399179578

==
==================
484c7e09;Adam Paszke;2021-09-27 05:31:48 -0700;Use shaped_abstractify to allow abstract arguments in .lower methods
PiperOrigin-RevId: 399166736

==

jax/experimental/maps.py
jax/experimental/pjit.py
tests/pjit_test.py
tests/xmap_test.py
==================
65f0fdbd;jax authors;2021-09-27 04:55:10 -0700;Merge pull request #7999 from LenaMartens:changelist/398697715
PiperOrigin-RevId: 399161697

==
==================
2eb20357;Peter Hawkins;2021-09-24 09:47:22 -0400;Add @jit decorators to jax.numpy.linalg and jax.scipy.linalg.

==

jax/_src/lax/linalg.py
jax/_src/numpy/linalg.py
jax/_src/scipy/linalg.py
==================
001d20d2;Jun Xu;2021-09-24 12:04:50 -0700;Synchronize illegal capture call time error message and trace time error message.
PiperOrigin-RevId: 398783192

==

jax/experimental/jax2tf/call_tf.py
==================
327e00a6;Lena Martens;2021-09-24 12:13:24 +0100;PRNGKeys can have dtype float0 if they are a tangent.

==

jax/_src/prng.py
tests/random_test.py
==================
f569bb1b;jax authors;2021-09-24 08:08:03 -0700;Merge pull request #8000 from hawkinsp:gatherdocs
PiperOrigin-RevId: 398732783

==
==================
db2e91eb;Peter Hawkins;2021-09-24 07:02:08 -0700;Move jax.test_util to jax._src.test_util.
Add forwarding shims for names used by external clients of JAX in practice.

PiperOrigin-RevId: 398721725

==

examples/control_test.py
examples/examples_test.py
jax/_src/test_util.py
jax/experimental/jax2tf/examples/keras_reuse_main_test.py
jax/experimental/jax2tf/examples/saved_model_main_test.py
jax/experimental/jax2tf/tests/call_tf_test.py
jax/experimental/jax2tf/tests/control_flow_ops_test.py
jax/experimental/jax2tf/tests/jax2tf_limitations.py
jax/experimental/jax2tf/tests/jax2tf_test.py
jax/experimental/jax2tf/tests/jax_primitives_coverage_test.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
jax/experimental/jax2tf/tests/savedmodel_test.py
jax/experimental/jax2tf/tests/shape_poly_test.py
jax/experimental/jax2tf/tests/sharding_test.py
jax/experimental/jax2tf/tests/stax_test.py
jax/experimental/jax2tf/tests/tf_test_util.py
jax/test_util.py
tests/api_test.py
tests/api_util_test.py
tests/array_interoperability_test.py
tests/batching_test.py
tests/callback_test.py
tests/compilation_cache_test.py
tests/core_test.py
tests/custom_object_test.py
tests/debug_nans_test.py
tests/djax_test.py
tests/dtypes_test.py
tests/errors_test.py
tests/fft_test.py
tests/file_system_cache_test.py
tests/generated_fun_test.py
tests/heap_profiler_test.py
tests/host_callback_test.py
tests/host_callback_to_tf_test.py
tests/image_test.py
tests/infeed_test.py
tests/jax_jit_test.py
tests/jax_to_hlo_test.py
tests/jaxpr_util_test.py
tests/jet_test.py
tests/lax_autodiff_test.py
tests/lax_control_flow_test.py
tests/lax_numpy_einsum_test.py
tests/lax_numpy_indexing_test.py
tests/lax_numpy_test.py
tests/lax_numpy_vectorize_test.py
tests/lax_scipy_sparse_test.py
tests/lax_scipy_test.py
tests/lax_test.py
tests/lax_vmap_test.py
tests/linalg_test.py
tests/loops_test.py
tests/masking_test.py
tests/metadata_test.py
tests/multi_device_test.py
tests/multibackend_test.py
tests/nn_test.py
tests/ode_test.py
tests/optimizers_test.py
tests/pickle_test.py
tests/pjit_test.py
tests/pmap_test.py
tests/polynomial_test.py
tests/profiler_test.py
tests/random_test.py
tests/scipy_fft_test.py
tests/scipy_ndimage_test.py
tests/scipy_optimize_test.py
tests/scipy_signal_test.py
tests/scipy_stats_test.py
tests/sharded_jit_test.py
tests/sparse_test.py
tests/sparsify_test.py
tests/stax_test.py
tests/third_party/scipy/line_search_test.py
tests/tree_util_test.py
tests/util_test.py
tests/x64_context_test.py
tests/xla_bridge_test.py
tests/xla_interpreter_test.py
tests/xmap_test.py
==================
2a6f836d;Peter Hawkins;2021-09-24 09:59:10 -0400;Fix rendering of `lax.gather` docs.
Remove spurious extra argument to `get()` in documentation.

==

docs/jax.ops.rst
jax/_src/lax/lax.py
==================
b26e1e6b;jax authors;2021-09-23 22:09:54 -0700;Merge pull request #7998 from gnecula:fix_call_tf
PiperOrigin-RevId: 398650636

==
==================
afe57bee;George Necula;2021-09-24 07:21:05 +0300;[jax2tf] Fix workaround for get_compiler_ir error

==

jax/experimental/jax2tf/call_tf.py
==================
45ce1d34;jax authors;2021-09-23 18:18:41 -0700;Merge pull request #7595 from hawkinsp:gather
PiperOrigin-RevId: 398623114

==
==================
c69f0cb5;jax authors;2021-09-23 14:26:17 -0700;Merge pull request #7996 from skye:test_requirements
PiperOrigin-RevId: 398577286

==
==================
2fcf3f72;Skye Wanderman-Milne;2021-09-23 12:24:24 -0700;Remove `.[minimum-jaxlib]` from test-requirements.txt
This means that jax and its dependencies (e.g. jaxlib) must be
manually installed before running the tests. This is useful for
testing an existing jax install, e.g. a later version of jaxlib, GPU
jaxlib, etc.

==

.github/workflows/ci-build.yaml
build/test-requirements.txt
docs/contributing.md
==================
be34a14d;jax authors;2021-09-23 11:11:15 -0700;Merge pull request #7984 from jakevdp:jax-numpy-namespase
PiperOrigin-RevId: 398532103

==
==================
dbeb97d3;Yash Katariya;2021-09-23 10:58:55 -0700;Create 0.2.21 jax release
PiperOrigin-RevId: 398528427

==

CHANGELOG.md
jax/version.py
==================
b6318f89;jax authors;2021-09-23 09:23:06 -0700;Merge pull request #7993 from gnecula:tf_share_const
PiperOrigin-RevId: 398504028

==
==================
b992034e;jax authors;2021-09-23 09:15:51 -0700;Merge pull request #7983 from jakevdp:fix-std-basis
PiperOrigin-RevId: 398502689

==
==================
b1ad9e32;George Necula;2021-09-23 17:45:57 +0300;[jax2tf] Ensure that shared constants in JAX are shared also in the converted function
Fixes: #7992

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/jax2tf_test.py
==================
9389db19;jax authors;2021-09-23 09:04:52 -0700;Merge pull request #7975 from google:custom-derivatives-api-boundary
PiperOrigin-RevId: 398500471

==
==================
37719e4a;Jake VanderPlas;2021-09-22 17:01:20 -0700;Import numpy explicitly in the jax namespace

==

jax/__init__.py
==================
86706882;Peter Hawkins;2021-08-11 17:32:36 -0400;Drop out-of-bounds indexes in gather.

==

docs/jax.ops.rst
jax/_src/lax/lax.py
jax/_src/numpy/lax_numpy.py
jax/_src/ops/scatter.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jet.py
jax/lax/__init__.py
tests/lax_autodiff_test.py
tests/lax_numpy_indexing_test.py
==================
2c2f4033;Peter Hawkins;2021-09-23 06:33:25 -0700;Move contents of jax.lib to jax._src.lib.
Add shim libraries for functions exported from jax.lib that other code seems to use in practice.

PiperOrigin-RevId: 398471863

==

cloud_tpu_colabs/Pmap_Cookbook.ipynb
docs/autodidax.ipynb
docs/autodidax.md
docs/autodidax.py
docs/notebooks/How_JAX_primitives_work.ipynb
docs/notebooks/How_JAX_primitives_work.md
docs/notebooks/XLA_in_Python.ipynb
docs/notebooks/XLA_in_Python.md
examples/spmd_mnist_classifier_fromscratch.py
jax/__init__.py
jax/_src/api.py
jax/_src/config.py
jax/_src/dlpack.py
jax/_src/dtypes.py
jax/_src/lax/control_flow.py
jax/_src/lax/fft.py
jax/_src/lax/lax.py
jax/_src/lax/linalg.py
jax/_src/lax/parallel.py
jax/_src/lib/__init__.py
jax/_src/lib/xla_bridge.py
jax/_src/numpy/fft.py
jax/_src/prng.py
jax/_src/profiler.py
jax/_src/random.py
jax/_src/source_info_util.py
jax/_src/traceback_util.py
jax/_src/tree_util.py
jax/experimental/compilation_cache/compilation_cache.py
jax/experimental/djax.py
jax/experimental/host_callback.py
jax/experimental/jax2tf/call_tf.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/jax2tf_test.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/sharding_test.py
jax/experimental/jax2tf/tests/tf_test_util.py
jax/experimental/maps.py
jax/experimental/pjit.py
jax/experimental/sparse/ops.py
jax/interpreters/pxla.py
jax/interpreters/sharded_jit.py
jax/interpreters/xla.py
jax/lib/__init__.py
jax/lib/xla_bridge.py
jax/test_util.py
jax/tools/jax_to_hlo.py
jaxlib/cusparse.py
tests/api_test.py
tests/array_interoperability_test.py
tests/compilation_cache_test.py
tests/custom_object_test.py
tests/debug_nans_test.py
tests/heap_profiler_test.py
tests/host_callback_test.py
tests/infeed_test.py
tests/jax_jit_test.py
tests/jax_to_hlo_test.py
tests/lax_control_flow_test.py
tests/lax_vmap_test.py
tests/linalg_test.py
tests/multi_device_test.py
tests/pickle_test.py
tests/pjit_test.py
tests/pmap_test.py
tests/sparse_test.py
tests/tree_util_test.py
tests/xla_bridge_test.py
tests/xmap_test.py
==================
94cd1ea0;jax authors;2021-09-23 01:19:45 -0700;Merge pull request #7978 from gnecula:tf_comment
PiperOrigin-RevId: 398429796

==
==================
f03baaec;George Necula;2021-09-23 11:14:19 +0300;Expand the docstring for jax.checkpoint.
I found the old docstring to be a bit inaccurate, but mostly
not explanatory enough. I think that this feature deserves
a tutorial, in addition to an expanded docstring.

==

jax/_src/api.py
==================
322a9544;Roy Frostig;2021-09-22 20:23:53 -0700;disable pytype on custom derivative calls
Method decorator seems to interfere with pytype relating the typevar
in the return value annotation to its appearance in the enclosing
class.

==

jax/_src/custom_derivatives.py
==================
0957e816;Jake VanderPlas;2021-09-22 16:08:18 -0700;Use traced identity in jacobian std_basis

==

jax/_src/api.py
==================
484b5af5;jax authors;2021-09-22 15:03:35 -0700;Merge pull request #7982 from hawkinsp:checktol
PiperOrigin-RevId: 398338448

==
==================
be288271;Peter Hawkins;2021-09-22 17:46:08 -0400;Add atol and rtol arguments to jtu._CheckAgainstNumpy().
Prefer atol and rtol if they are provided.

==

jax/test_util.py
==================
b0541802;jax authors;2021-09-22 14:42:05 -0700;Merge pull request #7981 from hawkinsp:indexing
PiperOrigin-RevId: 398333088

==
==================
46288a29;Peter Hawkins;2021-09-22 14:13:13 -0400;Fix wrong dtype output from indexing with an empty slice.
Fix test failures in lax_numpy_indexing_test for complex64 pow() scatters.

The existing tests actually catch both of these bugs, but only when run with a sufficiently high number of test cases.

==

jax/_src/ops/scatter.py
tests/lax_numpy_indexing_test.py
==================
1182e7aa;Jun Xu;2021-09-22 09:22:22 -0700;Add traceback to Graph Tensor runtime error and update error message.
PiperOrigin-RevId: 398256308

==

jax/experimental/jax2tf/call_tf.py
jax/experimental/jax2tf/tests/call_tf_test.py
==================
799ca30f;jax authors;2021-09-22 07:45:48 -0700;Merge pull request #7980 from hawkinsp:indexing
PiperOrigin-RevId: 398237175

==
==================
3509db5d;Peter Hawkins;2021-09-22 10:38:00 -0400;Merge static indexing forward and gradient test cases.
I'm not entirely clear why these were separate in the first place, and everything seems to work fine if we merge them. Possibly the two were separate because of unimplemented cases that have subsequently been implemented.

==

tests/lax_numpy_indexing_test.py
==================
b70d2093;jax authors;2021-09-22 06:28:34 -0700;Merge pull request #7979 from hawkinsp:tpugather
PiperOrigin-RevId: 398224531

==
==================
b85f4390;Peter Hawkins;2021-09-22 09:21:15 -0400;Reenable indexing TPU tests that pass at HEAD.

==

tests/lax_numpy_indexing_test.py
==================
613eeb89;George Necula;2021-09-22 15:24:31 +0300;Apply review suggestions

==

jax/experimental/jax2tf/examples/README.md
==================
60d0b082;George Necula;2021-09-22 11:18:43 +0300;[jax2tf] Minor updates to the jax2tf examples documentation

==

jax/experimental/jax2tf/examples/README.md
==================
d3615ef2;Roy Frostig;2021-09-21 15:41:00 -0700;mark custom derivative calls as API boundaries for stack trace filtering

==

jax/_src/custom_derivatives.py
tests/errors_test.py
==================
31f76c3b;jax authors;2021-09-21 16:35:45 -0700;Merge pull request #7974 from jakevdp:fix-fromdense-jit
PiperOrigin-RevId: 398112176

==
==================
907c5930;Jake VanderPlas;2021-09-21 14:51:54 -0700;[sparse]: fix fromdense JIT code path

==

jax/experimental/sparse/ops.py
tests/sparse_test.py
==================
5b4f07d8;jax authors;2021-09-21 14:34:39 -0700;Merge pull request #7973 from hawkinsp:comment
PiperOrigin-RevId: 398086610

==
==================
41a0f6a6;Peter Hawkins;2021-09-21 17:23:05 -0400;Remove a stale comment.

==

jax/_src/scipy/special.py
==================
4bc6b270;jax authors;2021-09-21 13:33:33 -0700;Merge pull request #7966 from jakevdp:faster-conv
PiperOrigin-RevId: 398072150

==
==================
f71c2cce;jax authors;2021-09-21 12:36:32 -0700;Merge pull request #7927 from hawkinsp:ndarray
PiperOrigin-RevId: 398059397

==
==================
52b59273;Peter Hawkins;2021-09-15 15:12:19 -0400;Turn jnp.ndarray into a true abstract base class.
Make all JAX array types instances of jnp.ndarray.
Remove np.ndarray from jnp.ndarray.

==

jax/_src/numpy/lax_numpy.py
tests/api_test.py
tests/pmap_test.py
==================
fc7775e1;jax authors;2021-09-21 10:21:13 -0700;Merge pull request #7968 from hawkinsp:partial
PiperOrigin-RevId: 398025545

==
==================
1163e218;Peter Hawkins;2021-09-21 09:05:56 -0700;Attempt to land https://github.com/google/jax/pull/6400 again.
This PR changes `jax.numpy.array()` to avoid creating any on-device arrays during tracing. As a consequence, calls to `jnp.array()` in a traced context, such as `jax.jit` will always be staged into the trace.

This change may break code that depends on the current (undocumented and unintentional) behavior of `jnp.array()` to perform shape or index calculations that must be known statically (at trace time). The workaround for such cases is to use classic NumPy to perform shape/index calculations.

PiperOrigin-RevId: 398008511

==

CHANGELOG.md
docs/jaxpr.rst
jax/_src/numpy/lax_numpy.py
jax/_src/scipy/special.py
jax/experimental/jax2tf/call_tf.py
jax/interpreters/partial_eval.py
tests/api_test.py
==================
d7e94b9e;Jake VanderPlas;2021-09-21 08:49:32 -0700;convolutions: use flip() to clean up reverse-indexing

==

jax/_src/numpy/lax_numpy.py
jax/_src/scipy/signal.py
==================
58c7ee46;Peter Hawkins;2021-09-20 20:32:49 -0400;Remove jax.util.partial.

==

CHANGELOG.md
jax/util.py
==================
9a5cf7c8;jax authors;2021-09-20 17:13:32 -0700;Merge pull request #7947 from nonconvexopt:main
PiperOrigin-RevId: 397877761

==
==================
2d03bde7;jax authors;2021-09-20 16:42:00 -0700;Merge pull request #7943 from rsepassi:main
PiperOrigin-RevId: 397871285

==
==================
24464920;jax authors;2021-09-20 12:56:03 -0700;Merge pull request #7964 from hawkinsp:sourcecontext
PiperOrigin-RevId: 397821131

==
==================
33e7f2d1;Peter Hawkins;2021-09-20 12:09:58 -0400;Add the equation source context in jaxpr_subcomp.
Improves tracebacks if XLA translation fails.

==

jax/interpreters/xla.py
==================
45c1a1b0;Adam Paszke;2021-09-20 08:58:09 -0700;Make sure that xmap raises a clear error when using an undefined resource name
PiperOrigin-RevId: 397762568

==

jax/experimental/maps.py
tests/xmap_test.py
==================
5caaed98;jax authors;2021-09-20 07:00:56 -0700;Merge pull request #7938 from hawkinsp:partial
PiperOrigin-RevId: 397740334

==
==================
f35ab369;Peter Hawkins;2021-09-16 15:46:26 -0400;Remove jax.partial from the JAX API.
Use functools.partial instead.

==

CHANGELOG.md
jax/__init__.py
==================
6a34d24f;jax authors;2021-09-20 05:53:17 -0700;Merge pull request #7948 from gnecula:hcb_remat
PiperOrigin-RevId: 397728882

==
==================
ab464bd7;jax authors;2021-09-19 23:18:49 -0700;Merge pull request #7956 from brettkoonce:cuda-config-tweak
PiperOrigin-RevId: 397679983

==
==================
9c5009ef;brett koonce;2021-09-18 14:28:47 -0500;tweak cuda/rocm targets
Closes #7955.

==

build/build.py
==================
8b489134;Juhyeong Kim;2021-09-18 14:40:29 +0900;Reflected the opinions from the reviewer.

==

docs/developer.md
==================
62230f65;jax authors;2021-09-17 09:05:02 -0700;Merge pull request #7950 from yashk2810:options
PiperOrigin-RevId: 397332268

==
==================
d0acd9f3;yashkatariya;2021-09-17 08:43:25 -0700;Add flags to configure the cuda_compute_capability and rocm_amd_targets

==

build/build.py
==================
d172ba7b;George Necula;2021-09-17 16:42:31 +0200;[host_callback] Fix an assertion failure for grad(remat(host_callback))
Fixes: #5878

==

jax/experimental/host_callback.py
jax/interpreters/partial_eval.py
tests/host_callback_test.py
==================
f47926a2;jax authors;2021-09-17 07:58:17 -0700;Merge pull request #7940 from hawkinsp:api
PiperOrigin-RevId: 397319298

==
==================
a93c4d7f;jax authors;2021-09-17 06:41:20 -0700;Merge pull request #7937 from sharadmv:axis-index-fix
PiperOrigin-RevId: 397307330

==
==================
2201f4a6;jax authors;2021-09-17 06:28:44 -0700;Merge pull request #7942 from jakevdp:changelog
PiperOrigin-RevId: 397305380

==
==================
d45cb85a;Juhyeong Kim;2021-09-17 22:00:08 +0900;Update developer.md

==

docs/developer.md
==================
2cee42cf;Ryan Sepassi;2021-09-16 21:49:57 -0700;Check presence of __jax_array__ in _arraylike before calling it in isscalar

==

jax/_src/numpy/lax_numpy.py
==================
394ef618;jax authors;2021-09-16 16:43:35 -0700;Merge pull request #7868 from PWhiddy:main
PiperOrigin-RevId: 397197685

==
==================
9a269743;Jake VanderPlas;2021-09-16 14:10:08 -0700;Update changelog for several recent PRs

==

CHANGELOG.md
==================
470b30c9;jax authors;2021-09-16 14:03:00 -0700;Merge pull request #7941 from jakevdp:broadcast-shapes
PiperOrigin-RevId: 397163262

==
==================
12e731d8;jax authors;2021-09-16 13:46:31 -0700;Merge pull request #7939 from jakevdp:missing-doc
PiperOrigin-RevId: 397159430

==
==================
8905fb8e;Jake VanderPlas;2021-09-16 13:29:33 -0700;jnp.insert: use broadcast_shapes

==

jax/_src/numpy/lax_numpy.py
==================
3e0e47cd;Jake VanderPlas;2021-09-16 13:29:08 -0700;DOC: add missing jax.numpy functions

==

docs/jax.numpy.rst
==================
6a1b6265;Peter Hawkins;2021-09-16 16:29:06 -0400;Remove jax.api.
Functions exported as jax.api were aliases for names in jax.*. Use the jax.* names instead.

==

CHANGELOG.md
benchmarks/api_benchmark.py
jax/__init__.py
jax/api.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/sparse/ops.py
jax/tools/jax_to_hlo.py
==================
75f941bc;jax authors;2021-09-16 13:19:32 -0700;Merge pull request #7936 from jakevdp:jnp-insert
PiperOrigin-RevId: 397153039

==
==================
8ae58be9;Sharad Vikram;2021-09-16 12:28:39 -0700;Fix for singleton axis name in `axis_index_translation_rule`

==

jax/_src/lax/parallel.py
==================
b895f530;Jake VanderPlas;2021-09-16 12:18:32 -0700;jax.numpy: add wrapper for np.insert

==

jax/_src/numpy/lax_numpy.py
jax/numpy/__init__.py
tests/lax_numpy_test.py
==================
0851e05e;jax authors;2021-09-16 10:10:26 -0700;Merge pull request #7925 from jakevdp:boolean-scalar
PiperOrigin-RevId: 397107899

==
==================
960d19e5;Yash Katariya;2021-09-16 08:36:49 -0700;bazelrc changes for building Cuda 11.4 wheels with cudnn 8.2
PiperOrigin-RevId: 397088624

==

.bazelrc
==================
e67d49b8;jax authors;2021-09-16 05:58:44 -0700;Merge pull request #7838 from khdlr:map_coordinates_reflect_mirror
PiperOrigin-RevId: 397062070

==
==================
03e9a26a;jax authors;2021-09-15 14:22:58 -0700;Merge pull request #7833 from inailuig:linear_call_xla
PiperOrigin-RevId: 396922433

==
==================
4425efad;jax authors;2021-09-15 13:40:35 -0700;Merge pull request #7924 from zhangqiaorjc:comment_fix
PiperOrigin-RevId: 396912691

==
==================
af22aae1;PWhiddy;2021-09-09 18:18:13 -0400;fix html formatting of markdown

==

docs/notebooks/Common_Gotchas_in_JAX.ipynb
docs/notebooks/Common_Gotchas_in_JAX.md
==================
abeeb48b;Jake VanderPlas;2021-09-15 12:50:44 -0700;jnp.array: raise TypeError on boolean scalar indices

==

CHANGELOG.md
jax/_src/numpy/lax_numpy.py
tests/lax_numpy_indexing_test.py
==================
a6043777;jax authors;2021-09-15 12:41:30 -0700;Merge pull request #7926 from jakevdp:fix-changelog
PiperOrigin-RevId: 396898904

==
==================
404e22ec;Jake VanderPlas;2021-09-15 12:10:30 -0700;Add Changelog for jax v0.2.21 development

==

CHANGELOG.md
==================
aec40b48;Qiao Zhang;2021-09-15 11:47:51 -0700;Update docs for nan checker and tfds example.

==

docs/notebooks/Common_Gotchas_in_JAX.ipynb
docs/notebooks/Common_Gotchas_in_JAX.md
docs/notebooks/neural_network_with_tfds_data.ipynb
docs/notebooks/neural_network_with_tfds_data.md
==================
13c74bc3;jax authors;2021-09-15 05:42:45 -0700;Merge pull request #7920 from gnecula:tf_comment
PiperOrigin-RevId: 396815002

==
==================
d417e31d;George Necula;2021-09-15 09:19:55 +0200;[jax2tf] Document an expected error when saving converted functions
If the JAX function is not reverse-mode differentiable (e.g., lax.while_loop) then
it should be converted without gradients, or saved without gradients.

==

jax/experimental/jax2tf/README.md
==================
d7811417;jax authors;2021-09-14 14:17:54 -0700;Merge pull request #7917 from jakevdp:fix-exports
PiperOrigin-RevId: 396679714

==
==================
064ee741;jax authors;2021-09-14 13:57:34 -0700;Merge pull request #7916 from hawkinsp:part
PiperOrigin-RevId: 396675090

==
==================
33e2bed1;Jake VanderPlas;2021-09-14 13:55:55 -0700;Fix package exports

==

jax/__init__.py
jax/experimental/__init__.py
jax/experimental/sparse/__init__.py
jax/nn/__init__.py
jax/scipy/stats/__init__.py
==================
b56c2cca;Peter Hawkins;2021-09-14 16:17:50 -0400;Remove export of jax.lax.partial.

==

CHANGELOG.md
jax/lax/__init__.py
==================
47b40e00;jax authors;2021-09-14 12:55:28 -0700;Merge pull request #7847 from google:prng-type
PiperOrigin-RevId: 396661434

==
==================
ff6ece9b;jax authors;2021-09-14 12:32:32 -0700;Merge pull request #7915 from jakevdp:readme-comment
PiperOrigin-RevId: 396656290

==
==================
d0e21072;Jake VanderPlas;2021-09-14 11:47:19 -0700;DOC: add brief comments to example in README

==

README.md
cloud_tpu_colabs/JAX_demo.ipynb
docs/transformations.md
==================
5c58afa6;jax authors;2021-09-14 09:49:50 -0700;Merge pull request #7855 from cyprienc:scipy-stats-nbinom
PiperOrigin-RevId: 396617949

==
==================
788ecc5e;jax authors;2021-09-14 06:42:25 -0700;Merge pull request #7907 from jakevdp:take-arraylike
PiperOrigin-RevId: 396584251

==
==================
c365d7f9;jax authors;2021-09-14 06:04:28 -0700;Merge pull request #7908 from hawkinsp:api3
PiperOrigin-RevId: 396578038

==
==================
066a3bd1;Jake VanderPlas;2021-09-14 05:57:15 -0700;jnp.take: require array argument (but not indices) to be arraylike

==

jax/_src/numpy/lax_numpy.py
==================
f9299bb9;jax authors;2021-09-14 05:50:35 -0700;Merge pull request #7914 from gnecula:tf_call_tf_var
PiperOrigin-RevId: 396575688

==
==================
805e359f;George Necula;2021-09-14 14:15:40 +0200;[call_tf] Fix bug when calling TF functions with variables in a jit context.
The code was assuming that the `.captured_inputs` of a function are
variables in the same order as `.variables`. This seems to not be
true. Lookup variables now by handle.

==

jax/experimental/jax2tf/call_tf.py
==================
0055a6f9;Clemens Giuliani;2021-09-14 12:04:43 +0200;add a test for linear_call with jit

==

tests/api_test.py
==================
8c8f0a8c;Cyprien;2021-09-08 17:31:41 +0100;Feat: scipy.stats.nbinom implementation
fix: increasing tolerance check for testNBinomLogPmf in scipy_stats_test.py

==

jax/_src/scipy/stats/nbinom.py
jax/scipy/stats/__init__.py
jax/scipy/stats/nbinom.py
tests/scipy_stats_test.py
==================
4cf786a3;jax authors;2021-09-13 21:44:12 -0700;Merge pull request #7886 from josephrocca:patch-1
PiperOrigin-RevId: 396512372

==
==================
507cc99c;josephrocca;2021-09-12 09:00:11 +0800;Add a note about Google Colab setup
User must run `jax.tools.colab_tpu.setup_tpu()`

==

README.md
==================
f172f933;jax authors;2021-09-13 19:04:37 -0700;Merge pull request #7904 from jakevdp:parallel-take
PiperOrigin-RevId: 396493605

==
==================
8b212396;Peter Hawkins;2021-09-13 17:24:44 -0400;Switch internal users of jax.util.partial to use functools.partial.

==

jax/__init__.py
jax/_src/api.py
jax/_src/errors.py
jax/_src/lax/control_flow.py
jax/_src/lax/lax.py
jax/_src/lax/linalg.py
jax/_src/lax/parallel.py
jax/_src/numpy/lax_numpy.py
jax/_src/scipy/fft.py
jax/_src/tree_util.py
jax/_src/util.py
jax/core.py
jax/experimental/callback.py
jax/experimental/optimizers.py
jax/interpreters/ad.py
jax/interpreters/batching.py
jax/interpreters/partial_eval.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
jax/lax/__init__.py
jax/test_util.py
jax/util.py
tests/batching_test.py
tests/core_test.py
tests/sparsify_test.py
==================
9045672a;jax authors;2021-09-13 17:40:11 -0700;Merge pull request #7906 from sharadmv:pdot-precision
PiperOrigin-RevId: 396481634

==
==================
0e31f0ed;jax authors;2021-09-13 17:36:13 -0700;Merge pull request #7812 from google:rerejames
PiperOrigin-RevId: 396481392

==
==================
04afc0cc;Jake VanderPlas;2021-09-13 15:19:27 -0700;ppermute: avoid passing lists of indices to jnp.take

==

jax/_src/lax/parallel.py
==================
36154fac;Matthew Johnson;2021-09-03 16:43:57 -0700;handle linear custom_jvp functions

==

jax/_src/custom_derivatives.py
tests/api_test.py
==================
60e7044a;jax authors;2021-09-13 17:10:17 -0700;Merge pull request #7903 from hawkinsp:api2
PiperOrigin-RevId: 396476957

==
==================
a84426cb;Peter Hawkins;2021-09-13 16:40:45 -0400;Switch internal users of jax.ops.index_... to use x.at[x].set() APIs.

==

jax/__init__.py
jax/_src/lax/linalg.py
jax/_src/lax/polar.py
jax/_src/nn/initializers.py
jax/_src/numpy/fft.py
jax/_src/numpy/lax_numpy.py
jax/_src/numpy/linalg.py
jax/_src/numpy/polynomial.py
jax/_src/scipy/eigh.py
jax/_src/scipy/optimize/_lbfgs.py
jax/_src/scipy/special.py
jax/experimental/jax2tf/tests/primitives_test.py
jax/experimental/loops.py
tests/batching_test.py
tests/lax_autodiff_test.py
tests/lax_numpy_test.py
tests/loops_test.py
==================
86abf6ca;jax authors;2021-09-13 16:48:22 -0700;Merge pull request #7869 from dan-zheng:numpy_printoptions
PiperOrigin-RevId: 396472668

==
==================
ebd8d958;Sharad Vikram;2021-09-13 15:39:02 -0700;Add precision param for pdot

==

jax/_src/lax/lax.py
jax/_src/lax/parallel.py
tests/batching_test.py
==================
035b27ff;Dan Zheng;2021-09-09 15:55:27 -0700;Add `jnp.get_printoptions` and `jnp.printoptions`.
`jnp.set_printoptions` already exists but other printing utilities do not.

`jnp.get_printoptions` forwards `numpy.get_printoptions`.
`jnp.printoptions` forwards `numpy.printoptions`.

==

docs/jax.numpy.rst
jax/_src/numpy/lax_numpy.py
jax/numpy/__init__.py
==================
4d68a799;jax authors;2021-09-13 14:49:22 -0700;Merge pull request #7606 from jakevdp:jnp-mypy
PiperOrigin-RevId: 396448454

==
==================
24558141;Jake VanderPlas;2021-08-30 14:35:22 -0700;Add PEP484-compatible export for jax and its subpackages

==

jax/__init__.py
jax/custom_derivatives.py
jax/dtypes.py
jax/errors.py
jax/image/__init__.py
jax/lax/__init__.py
jax/lib/__init__.py
jax/nn/__init__.py
jax/nn/initializers.py
jax/numpy/__init__.py
jax/numpy/fft.py
jax/numpy/linalg.py
jax/ops/__init__.py
jax/prng.py
jax/profiler.py
jax/random.py
jax/scipy/__init__.py
jax/scipy/fft.py
jax/scipy/linalg.py
jax/scipy/ndimage.py
jax/scipy/optimize/__init__.py
jax/scipy/signal.py
jax/scipy/sparse/__init__.py
jax/scipy/sparse/linalg.py
jax/scipy/special.py
jax/scipy/stats/bernoulli.py
jax/scipy/stats/beta.py
jax/scipy/stats/betabinom.py
jax/scipy/stats/cauchy.py
jax/scipy/stats/chi2.py
jax/scipy/stats/dirichlet.py
jax/scipy/stats/expon.py
jax/scipy/stats/gamma.py
jax/scipy/stats/geom.py
jax/scipy/stats/laplace.py
jax/scipy/stats/logistic.py
jax/scipy/stats/multivariate_normal.py
jax/scipy/stats/norm.py
jax/scipy/stats/pareto.py
jax/scipy/stats/poisson.py
jax/scipy/stats/t.py
jax/scipy/stats/uniform.py
jax/tree_util.py
jax/util.py
==================
836bfb29;jax authors;2021-09-13 13:44:37 -0700;Merge pull request #7902 from hawkinsp:api
PiperOrigin-RevId: 396433505

==
==================
9f083d11;Peter Hawkins;2021-09-13 16:00:22 -0400;Use jax.* APIs rather than api.* names in tests.
Tests should use our own public APIs where they exist.

==

tests/host_callback_test.py
tests/host_callback_to_tf_test.py
tests/lax_autodiff_test.py
tests/lax_control_flow_test.py
tests/lax_numpy_indexing_test.py
tests/lax_numpy_test.py
tests/lax_scipy_test.py
tests/lax_test.py
tests/lax_vmap_test.py
tests/loops_test.py
tests/multibackend_test.py
tests/random_test.py
tests/scipy_stats_test.py
tests/sparse_test.py
tests/x64_context_test.py
tests/xla_interpreter_test.py
==================
3218b060;Adam Paszke;2021-09-13 11:19:39 -0700;Expose allow_spmd_sharding_propagation_to_output in Python
We need to set this option to support reverse-mode AD of pjit in JAX.

PiperOrigin-RevId: 396400683

==

jax/experimental/compilation_cache/compilation_cache.py
==================
80599c08;Peter Hawkins;2021-09-13 09:15:45 -0700;Replace uses of jax.partial with functools.partial, in preparation for removing jax.partial.
jax.partial is an alias for functools.partial, and functools.partial is a Python standard library API. There's no need for jax to export this function.

PiperOrigin-RevId: 396370975

==

jax/_src/lax/polar.py
jax/_src/scipy/eigh.py
jax/experimental/sparse/__init__.py
tests/x64_context_test.py
==================
c9915fe7;jax authors;2021-09-13 09:06:53 -0700;Merge pull request #7900 from hawkinsp:flake
PiperOrigin-RevId: 396369114

==
==================
40e634aa;Peter Hawkins;2021-09-13 11:43:39 -0400;Relax test tolerance for a lax_test.py test.
This test fails on CPU with a very low probability.
Also improve printing of the test name.

==

tests/lax_test.py
==================
ab8eaba7;jax authors;2021-09-12 10:25:01 -0700;Merge pull request #7889 from gnecula:tf_comment
PiperOrigin-RevId: 396225378

==
==================
b59db5b1;George Necula;2021-09-12 18:54:32 +0300;[jax2tf] Fix stale comments

==

jax/experimental/jax2tf/examples/saved_model_lib.py
jax/experimental/jax2tf/jax2tf.py
==================
ab544cb2;Roy Frostig;2021-09-10 21:04:16 -0700;flip lower bits to derive seeds for the custom test PRNG
Changing bits, instead of incrementing, fixes an inherited test that seeds
with a maximum-valued numpy.uint64.

PiperOrigin-RevId: 396061086

==

tests/random_test.py
==================
a05f18fd;jax authors;2021-09-10 21:02:30 -0700;Merge pull request #7875 from hawkinsp:debugprint
PiperOrigin-RevId: 396059986

==
==================
321434dc;jax authors;2021-09-10 20:54:21 -0700;Merge pull request #7879 from google:prng-shape
PiperOrigin-RevId: 396059937

==
==================
1113262f;jax authors;2021-09-10 20:36:27 -0700;Merge pull request #7880 from google:doc-rm-nbs
PiperOrigin-RevId: 396058279

==
==================
e659c549;Roy Frostig;2021-09-10 18:52:47 -0700;docs: remove application tutorials

==

docs/conf.py
docs/index.rst
docs/notebooks/maml.ipynb
docs/notebooks/maml.md
docs/notebooks/score_matching.ipynb
docs/notebooks/score_matching.md
==================
2d7a98be;Roy Frostig;2021-09-10 18:29:39 -0700;make PRNGKeyArray.shape a property, add tests for it and for disallowed addition

==

jax/_src/prng.py
tests/random_test.py
==================
8ca275ab;jax authors;2021-09-10 10:42:15 -0700;Merge pull request #7814 from TinaZetongJia:pjit_tutorial
PiperOrigin-RevId: 395959656

==
==================
cc2efbf0;Adam Paszke;2021-09-10 10:02:07 -0700;Add new lowering APIs for xmap
PiperOrigin-RevId: 395950859

==

jax/experimental/maps.py
==================
d5110bea;Peter Hawkins;2021-09-10 09:42:38 -0700;Avoid accidental on-device array creation in _reduction_init_val.
Revert changes to _reduction_init_val, which is carefully crafted to use classic NumPy functions so lax can pattern match on the reducer monoid.

Instead, don't call _reduction_init_val on the initial argument from NumPy, which might well be a traced value.

PiperOrigin-RevId: 395947318

==

jax/_src/numpy/lax_numpy.py
==================
5a99c3d7;Peter Hawkins;2021-09-10 09:40:18 -0700;Fix performance degradation due to repeated aval creation. Fix error when printing a DeviceArray without an aval.
PiperOrigin-RevId: 395946904

==

jax/interpreters/pxla.py
jax/interpreters/xla.py
==================
2e4b1bc1;Peter Hawkins;2021-09-10 10:57:17 -0400;Remove some debug print statements left in lax_numpy.

==

jax/_src/numpy/lax_numpy.py
==================
c845d15b;Adam Paszke;2021-09-10 07:09:26 -0700;Cache used_axis_names calls for jaxprs
All control-flow primitives are `AxisPrimitive`s now, which means that we're doing
lots of those used-names traversals during dispatch and they can be expensive!
This adds caching to try to lower the cost of that change.

PiperOrigin-RevId: 395921887

==

jax/core.py
==================
bc01a3a5;TinaZetongJia;2021-09-09 17:03:35 -0700;removing ipynb in format

==

docs/jax-101/08-pjit.md
==================
e7e8183a;TinaZetongJia;2021-09-09 15:24:04 -0700;not exclude 08-pjit.md

==

docs/conf.py
==================
00528a42;Adam Paszke;2021-09-09 13:50:41 -0700;Add new lowering APIs for jit
PiperOrigin-RevId: 395779305

==

jax/interpreters/xla.py
==================
d6a4b2f1;jax authors;2021-09-09 13:29:51 -0700;Merge pull request #7734 from sharadmv:xmap-custom-vjp
PiperOrigin-RevId: 395774483

==
==================
cc3e1979;Sharad Vikram;2021-08-26 13:34:01 -0700;Combine initial_style_batchers with collective_rules

==

jax/_src/api.py
jax/_src/custom_derivatives.py
jax/_src/lax/control_flow.py
jax/_src/lax/parallel.py
jax/core.py
jax/experimental/djax.py
jax/experimental/pjit.py
jax/interpreters/batching.py
jax/interpreters/pxla.py
tests/api_test.py
tests/lax_control_flow_test.py
tests/xmap_test.py
==================
8353d6d4;Peter Hawkins;2021-09-09 06:32:16 -0700;Add more @jit decorators to jax.numpy functions.
PiperOrigin-RevId: 395687875

==

jax/_src/numpy/lax_numpy.py
tests/api_test.py
==================
ae8bbab7;Tina Jia;2021-09-09 00:10:48 +0000;add space

==

docs/jax-101/08-pjit.md
==================
4a366927;Tina Jia;2021-09-09 00:09:10 +0000;added all imgs

==

docs/jax-101/08-pjit.md
==================
c0d9d76e;Tina Jia;2021-09-09 00:02:06 +0000;added first img

==

docs/jax-101/08-pjit.md
==================
d18d24bb;Tina Jia;2021-09-08 23:50:43 +0000;Merge branch 'pjit_tutorial' of https://github.com/TinaZetongJia/jax into pjit_tutorial

==
==================
849ce513;TinaZetongJia;2021-09-08 17:50:24 -0600;delete images

==

docs/jax-101/08-pjit.md
==================
da186f4d;Tina Jia;2021-09-08 23:38:05 +0000;delete pjit notebook

==
==================
add83003;Tina Jia;2021-09-08 23:29:20 +0000;added images for pjit tutorial

==

docs/_static/mesh.jpg
docs/_static/multi_host.jpg
docs/_static/partition_spec_none_y.png
docs/_static/partition_spec_x_none.png
docs/_static/partition_spec_x_y.png
docs/_static/partition_spec_xy.png
docs/_static/partition_spec_y_none.png
docs/_static/xla_spmd.jpg
==================
e7e5140d;Peter Hawkins;2021-09-08 13:51:52 -0700;Move implementation of jax.flatten_util to jax._src.flatten_util. Add a jax.flatten_util shim.
Change as part of cleaning up the jax.* namespace.

PiperOrigin-RevId: 395551093

==

jax/_src/flatten_util.py
jax/flatten_util.py
==================
7f277068;Peter Hawkins;2021-09-08 13:50:08 -0700;[JAX] Include the function name in the error message when hash/equality of a static argument fails.
PiperOrigin-RevId: 395550728

==

tests/api_test.py
==================
b0e0e461;jax authors;2021-09-08 12:03:19 -0700;Merge pull request #7854 from hawkinsp:rename
PiperOrigin-RevId: 395527498

==
==================
f39b392e;Peter Hawkins;2021-09-08 11:40:30 -0400;Use shorter variable names in lax.py.
In the implementation of gather/scatter, use `indices` instead of `start_indices` and `scatter_indices`. Cleanup only; no functional changes intended.

==

jax/_src/lax/lax.py
tests/lax_test.py
==================
64884e61;jax authors;2021-09-08 11:09:50 -0700;Merge pull request #7843 from hawkinsp:linspace
PiperOrigin-RevId: 395514881

==
==================
5b4757d2;Adam Paszke;2021-09-08 10:54:09 -0700;New lowering APIs for pjit
This is the first in a series of refactoring patches that add the new AOT APIs
to all JIT-like transforms in JAX. I'm sending this early, because I expect that
it will come in handy when adding reverse-mode AD support for pjit.

PiperOrigin-RevId: 395510449

==

jax/experimental/maps.py
jax/experimental/pjit.py
jax/interpreters/pxla.py
==================
e869e5e0;Peter Hawkins;2021-09-08 09:00:23 -0700;Move contents of jax.api_util to jax._src.api_util and add a forwarding shim.
One of many changes to codify the set of exported symbols in the jax.* namespace.

PiperOrigin-RevId: 395484706

==

jax/__init__.py
jax/_src/api.py
jax/_src/api_util.py
jax/_src/custom_derivatives.py
jax/_src/lax/control_flow.py
jax/_src/lax/lax.py
jax/api_util.py
jax/experimental/callback.py
jax/experimental/djax.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/maps.py
jax/experimental/pjit.py
jax/experimental/sparse/ad.py
jax/experimental/sparse/transform.py
jax/interpreters/ad.py
jax/interpreters/invertible_ad.py
jax/interpreters/partial_eval.py
jax/interpreters/sharded_jit.py
tests/api_util_test.py
==================
086cbdf0;Peter Hawkins;2021-09-07 14:53:18 -0400;Add a @jit decorator around jnp.linspace.
Don't test integer dtype values. The exact rounding semantics may be quite sensitive to, e.g., jit compilation, and this is not something end users should be relying on. Simplify implementation to only use version that gets the endpoints correct.

Use the same approach NumPy does to ensure the endpoint is included when endpoint=True: explicitly set the endpoint.

Various minor cleanups.

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
bf351d1e;Peter Hawkins;2021-09-08 06:04:06 -0700;Drop support for the deprecated StreamExecutor CPU backend.
The TFRT backend is better and there's no reason to keep the StreamExecutor backend around any longer.

PiperOrigin-RevId: 395455049

==

jax/lib/xla_bridge.py
==================
1158530f;Adam Paszke;2021-09-08 01:41:38 -0700;Remove axis name from named_shape when unmapping avals
Even though `vmap` and `pmap` don't use avals with names, the batching infrastructure
is used to implement xmap and pjit. So while we keep the introduction of names carefully
scoped, forgetting to remove them at the right points leads to extremely confusing errors.

PiperOrigin-RevId: 395423006

==

jax/_src/api.py
jax/_src/lax/control_flow.py
jax/core.py
jax/experimental/djax.py
jax/experimental/pjit.py
jax/interpreters/ad.py
jax/interpreters/batching.py
jax/interpreters/partial_eval.py
jax/interpreters/pxla.py
==================
b9cc31e3;jax authors;2021-09-08 01:27:01 -0700;Merge pull request #7852 from google:sparse-jaxpr-consts
PiperOrigin-RevId: 395421332

==
==================
8bb8bf10;Roy Frostig;2021-09-07 21:08:03 -0700;avoid constvar conversion when closing a sparse jaxpr

==

jax/experimental/sparse/transform.py
tests/sparsify_test.py
==================
0412717c;jax authors;2021-09-07 19:14:05 -0700;Merge pull request #7848 from google:sparse-eval-dropvar
PiperOrigin-RevId: 395380185

==
==================
bf443987;Roy Frostig;2021-09-07 17:59:38 -0700;handle dropped output values in the sparse interpreter

==

jax/experimental/sparse/transform.py
tests/sparsify_test.py
==================
851316f0;TinaZetongJia;2021-09-07 18:50:35 -0600;Uploaded smaller images

==

docs/jax-101/08-pjit.ipynb
==================
83c51b0c;jax authors;2021-09-07 16:59:48 -0700;Merge pull request #7846 from skye:colab_nightly
PiperOrigin-RevId: 395359775

==
==================
9134794d;Roy Frostig;2021-09-07 16:29:36 -0700;expose random key array type
This is meant to allow for downstream type annotations and checking
(e.g. via `isinstance`).

==

jax/random.py
==================
706ba0eb;Skye Wanderman-Milne;2021-09-07 16:12:36 -0700;Unpin the tpu_driver version used for Cloud TPU Colabs.
This reverts https://github.com/google/jax/pull/6942. The nightly appears to work again, and we wanna pick up new fixes and improvements.

==

jax/tools/colab_tpu.py
==================
aef6c819;jax authors;2021-09-07 11:49:47 -0700;Merge pull request #7824 from khdlr:clip_signature
PiperOrigin-RevId: 395297038

==
==================
9c782e22;Jean-Baptiste Lespiau;2021-09-07 08:50:02 -0700;Move ShardedDeviceArray & PmapFunction to the raw C API and implement pickling/unpickling.
PiperOrigin-RevId: 395256774

==

jax/_src/api.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
tests/pickle_test.py
tests/pmap_test.py
==================
0c03e980;Adam Paszke;2021-09-07 07:53:42 -0700;Don't cast out_axis_resources to a tuple automatically
It's confusing and makes it impossible to specify non-trivial pytrees of
out_axis_resources for functions that return lists. Also extend the error
messages to be less confusing and hint at potential fixes.

PiperOrigin-RevId: 395246450

==

jax/api_util.py
jax/experimental/maps.py
jax/experimental/pjit.py
tests/pjit_test.py
tests/xmap_test.py
==================
5ed619af;Konrad Heidler;2021-09-07 15:37:04 +0200;Implement 'reflect' and 'mirror' padding modes for scipy.ndimage.map_coordinates

==

jax/_src/scipy/ndimage.py
tests/scipy_ndimage_test.py
==================
053d7e9d;jax authors;2021-09-07 06:20:28 -0700;Merge pull request #7747 from jakevdp:no-lists
PiperOrigin-RevId: 395232707

==
==================
0636f490;Adam Paszke;2021-09-07 03:25:54 -0700;Ensure that named axes consistently refer to global axis sizes in xmap
Fixes #6959.

PiperOrigin-RevId: 395210686

==

jax/core.py
jax/experimental/maps.py
jax/experimental/pjit.py
jax/interpreters/pxla.py
==================
b9e26dc8;Clemens Giuliani;2021-09-06 17:08:49 +0200;hook up xla initial style translation rule for linear_call_p

==

jax/_src/custom_derivatives.py
==================
cdbbefa0;Konrad Heidler;2021-09-06 17:55:22 +0200;Fix argument names for jnp.ndarray.clip and deprecate the old ones

==

jax/_src/numpy/lax_numpy.py
==================
0dee3550;jax authors;2021-09-06 06:06:14 -0700;Merge pull request #7802 from jakevdp:jnp-allclose-validation
PiperOrigin-RevId: 395083143

==
==================
50dd5e80;jax authors;2021-09-06 04:34:44 -0700;Use the raw C API for ShardedDeviceArray.
It's similar than PyBuffer.

PiperOrigin-RevId: 395071943

==

jax/interpreters/pxla.py
tests/pmap_test.py
==================
e793c885;Jean-Baptiste Lespiau;2021-09-06 02:56:52 -0700;Use the raw C API for ShardedDeviceArray.
It's similar than PyBuffer.

PiperOrigin-RevId: 395058367

==

jax/interpreters/pxla.py
tests/pmap_test.py
==================
d3dd4e0a;Jake VanderPlas;2021-09-04 06:41:16 -0700;don't use top-level headings

==

docs/jax-101/08-pjit.ipynb
docs/jax-101/08-pjit.md
==================
701ffe72;Jake VanderPlas;2021-09-04 06:29:14 -0700;sync md file

==

docs/jax-101/08-pjit.ipynb
==================
1edbf763;Jake VanderPlas;2021-09-04 06:25:26 -0700;Remove stderr blocks

==

docs/jax-101/08-pjit.ipynb
==================
07c4152b;jax authors;2021-09-04 06:15:43 -0700;Merge pull request #7670 from wdphy16:complex_init
PiperOrigin-RevId: 394848968

==
==================
a48cbbbe;Jake VanderPlas;2021-09-03 19:01:16 -0700;add markdown version

==

docs/jax-101/08-pjit.ipynb
docs/jax-101/08-pjit.md
==================
a5151c71;jax authors;2021-09-03 17:50:57 -0700;Merge pull request #7813 from jakevdp:fix-bcoo-validation
PiperOrigin-RevId: 394787820

==
==================
9f1504bd;Tina Jia;2021-09-03 23:23:28 +0000;added pjit tuorial colab

==

docs/jax-101/08-pjit.ipynb
docs/jax-101/index.rst
==================
3aa5eef5;Jake VanderPlas;2021-09-03 10:01:34 -0700;lax.numpy: require arraylike inputs throughout

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
b865ba94;Jake VanderPlas;2021-09-03 17:17:49 -0700;[sparse]: fix corner case in BCOO validation

==

jax/experimental/sparse/ops.py
==================
8344f7e0;jax authors;2021-09-03 17:05:10 -0700;Merge pull request #7180 from jakevdp:dot-general-spmm
PiperOrigin-RevId: 394782632

==
==================
7dd5143a;Jake VanderPlas;2021-09-03 16:49:10 -0700;[sparse] add support for sparse-sparse matrix products

==

jax/experimental/sparse/__init__.py
jax/experimental/sparse/ops.py
tests/sparse_test.py
==================
24961d72;Tina Jia;2021-09-03 23:23:28 +0000;added pjit tuorial colab

==

docs/jax-101/08-pjit.ipynb
docs/jax-101/index.rst
==================
c69eedd6;Yash Katariya;2021-09-03 15:56:47 -0700;Delete Cuda 10.2 release and continuous builds.
PiperOrigin-RevId: 394772236

==

.bazelrc
==================
b603b34d;Yash Katariya;2021-09-03 15:56:17 -0700;Update the readme to reflect that Cuda 10.1 and cuda 11.0 support is dropped.
PiperOrigin-RevId: 394772160

==

README.md
==================
5303ea67;jax authors;2021-09-03 12:34:51 -0700;Merge pull request #7805 from jakevdp:bcoo-dedupe
PiperOrigin-RevId: 394735741

==
==================
4bb70183;Jake VanderPlas;2021-09-03 11:10:55 -0700;[sparse] add BCOO._dedupe() method

==

jax/experimental/sparse/ops.py
tests/sparse_test.py
==================
ca3135c3;jax authors;2021-09-03 11:43:47 -0700;Merge pull request #7790 from jakevdp:bcoo_unbatch
PiperOrigin-RevId: 394726100

==
==================
ca6bcb1f;Jake VanderPlas;2021-09-03 10:58:07 -0700;[sparse] add BCOO._unbatch() utility

==

jax/experimental/sparse/ops.py
tests/sparse_test.py
==================
88b04701;Jake VanderPlas;2021-09-02 11:10:50 -0700;jnp.isclose/jnp.allclose: require array inputs

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
94f97b92;Peter Hawkins;2021-09-03 10:03:25 -0700;Refactor JAX CPU kernels to make them usable from C++.
Most of the work here is porting the LAPACK interface from Cython to plain C++. This is something I wanted to do anyway to make use of C++ templating facilities: the code is noticeably shorter in C++.

This change removes the only use of Cython in JAX. It also removes the need for a build-time dependency on Scipy, which we only needed for Cython cimport reasons.

When using C++, we most likely do not want to fetch LAPACK and BLAS kernels from Python. Therefore we add another option: we define the LAPACK functions we need using weak symbols where supported; the user can then simply link against LAPACK to provide the necessary symbols.

Added a jaxlib:cpu_kernels module to facilitate using the JAX CPU kernels from C++.

PiperOrigin-RevId: 394705605

==

build/BUILD.bazel
build/Dockerfile
build/LICENSE.txt
build/build.py
build/build_jaxlib_wheels_macos.sh
build/build_wheel.py
docs/developer.md
jaxlib/BUILD
jaxlib/cpu_kernels.cc
jaxlib/lapack.cc
jaxlib/lapack.py
jaxlib/lapack.pyx
jaxlib/lapack_kernels.cc
jaxlib/lapack_kernels.h
==================
a7b61c0e;jax authors;2021-09-03 09:17:37 -0700;Merge pull request #7793 from yashk2810:update_pypi
PiperOrigin-RevId: 394697075

==
==================
19d7710d;Yash Katariya;2021-09-03 09:03:35 -0700;Remove the last long running CI build from github actions which is being replaced by internal infra build.
PiperOrigin-RevId: 394694532

==

.github/workflows/ci-build.yaml
==================
d4d5bc44;jax authors;2021-09-03 08:07:06 -0700;Merge pull request #7798 from jakevdp:fix-sparse-doc
PiperOrigin-RevId: 394685136

==
==================
20a0bb44;Jake VanderPlas;2021-09-03 07:54:21 -0700;DOC: fix formatting

==

jax/experimental/sparse/__init__.py
==================
aed51370;jax authors;2021-09-03 06:39:13 -0700;Merge pull request #7792 from jakevdp:sparse-doc
PiperOrigin-RevId: 394671567

==
==================
5dba8cf3;jax authors;2021-09-02 20:02:06 -0700;Merge pull request #7781 from sharadmv:while-batching
PiperOrigin-RevId: 394596315

==
==================
e78511fd;jax authors;2021-09-02 19:56:05 -0700;Merge pull request #7794 from google:dce-fix
PiperOrigin-RevId: 394595772

==
==================
d693324d;Sharad Vikram;2021-07-07 11:03:59 -0700;change while loop batching fixed point condition
Fixes #7063

Co-authored-by: Sharad Vikram <sharad.vikram@gmail.com>
Co-authored-by: Adam Paszke <apaszke@google.com>

==

jax/_src/lax/control_flow.py
jax/interpreters/batching.py
tests/lax_control_flow_test.py
==================
82a7b7ee;Jake VanderPlas;2021-09-02 17:08:10 -0700;DOC: add documentation of jax.experimental.sparse

==

docs/jax.experimental.rst
docs/jax.experimental.sparse.rst
jax/experimental/sparse/__init__.py
jax/experimental/sparse/ops.py
jax/experimental/sparse/transform.py
==================
7fbbb958;jax authors;2021-09-02 17:02:30 -0700;Merge pull request #7779 from jakevdp:bcoo-reordering
PiperOrigin-RevId: 394574464

==
==================
9955e446;Matthew Johnson;2021-09-02 15:41:39 -0700;fix dce logic for nullary primitives

==

jax/interpreters/partial_eval.py
==================
765746b6;yashkatariya;2021-09-02 15:38:47 -0700;update version and changelog for pypi

==

CHANGELOG.md
jax/version.py
==================
f1f0aefc;Peter Hawkins;2021-09-02 14:35:14 -0700;Further split up cuda_prng and cuda_lu_pivot kernels to avoid exposing ABSL code to NVCC.
With this change, we are careful not to include any ABSL-including .cc files in cuda_library rules.

PiperOrigin-RevId: 394544751

==

jaxlib/BUILD
==================
b31293f7;Yash Katariya;2021-09-02 13:34:33 -0700;Replace github action test with test running on internal infra. Also replace JAX_NUM_GENERATED_CASES to 1 for test with 3.8 and test with numpy dispatch tests to reduce the build time.
PiperOrigin-RevId: 394531539

==

.github/workflows/ci-build.yaml
==================
f004bcb7;Peter Hawkins;2021-09-02 07:52:35 -0700;[JAX] Refactor JAX custom kernels to split kernel implementations from Python bindings.
Some folks want to be able to run JAX-generated HLO computations from C++, and those computations may refer to JAX's custom kernels. This change splits the custom kernels into separate modules that may be used independently of Python.

The general pattern is that each extension now has two parts:
* xyz_kernels.{cc, h} — the C++ parts
* xyz.cc — Python bindings around the C++ parts, including code to build any descriptor objects.

There's also a new (minimally supported) module named "gpu_kernels.cc" which registers JAX's GPU kernels with the XLA C++ custom kernel registry.

PiperOrigin-RevId: 394460343

==

build/BUILD.bazel
build/build_wheel.py
jaxlib/BUILD
jaxlib/cublas.cc
jaxlib/cublas_kernels.cc
jaxlib/cublas_kernels.h
jaxlib/cuda_linalg.cc
jaxlib/cuda_linalg.py
jaxlib/cuda_lu_pivot_kernels.cc
jaxlib/cuda_lu_pivot_kernels.h
jaxlib/cuda_prng.cc
jaxlib/cuda_prng.py
jaxlib/cuda_prng_kernels.cc
jaxlib/cuda_prng_kernels.h
jaxlib/cusolver.cc
jaxlib/cusolver.py
jaxlib/cusolver_kernels.cc
jaxlib/cusolver_kernels.h
jaxlib/cusparse.cc
jaxlib/cusparse.py
jaxlib/cusparse_kernels.cc
jaxlib/cusparse_kernels.h
jaxlib/gpu_kernels.cc
jaxlib/handle_pool.h
jaxlib/pocketfft.cc
jaxlib/pocketfft_kernels.cc
jaxlib/pocketfft_kernels.h
jaxlib/rocblas.cc
==================
cc1cc98d;jax authors;2021-09-02 06:02:56 -0700;Merge pull request #7783 from shoyer:set-item-errors
PiperOrigin-RevId: 394442094

==
==================
8aff0f7b;jax authors;2021-09-01 23:46:34 -0700;Merge pull request #7784 from google:rejames6
PiperOrigin-RevId: 394394334

==
==================
ffa4ec05;Matthew Johnson;2021-09-01 22:38:17 -0700;[remat] fix two unit bugs, add test for one

==

jax/interpreters/partial_eval.py
tests/api_test.py
==================
d204325c;Stephan Hoyer;2021-09-01 20:43:13 -0700;Don't refer to deprecated jax.ops.index_update in error messages
I've also updated the docs for ``jax.ops`` to note that ``at[].set()``
is guaranteed to be performed in-place under JIT. Someone who knows XLA
well should double check that fact!

==

docs/jax.ops.rst
jax/_src/numpy/lax_numpy.py
jax/core.py
==================
ee1b5691;jax authors;2021-09-01 17:02:54 -0700;Merge pull request #7764 from google:pjit-autodiff-not-implemented
PiperOrigin-RevId: 394346294

==
==================
7500c7e9;jax authors;2021-09-01 15:56:42 -0700;Merge pull request #7631 from google:rejames5
PiperOrigin-RevId: 394333280

==
==================
484b377d;jax authors;2021-09-01 14:20:52 -0700;Merge pull request #7777 from yashk2810:jaxlib
PiperOrigin-RevId: 394313278

==
==================
c5fed9c3;Jake VanderPlas;2021-09-01 13:48:55 -0700;[sparse] Change BCOO index order

==

jax/experimental/sparse/ops.py
jax/experimental/sparse/transform.py
tests/sparse_test.py
==================
f38d3e87;Ningning Xie;2021-09-01 13:08:10 -0700;Allow axis index groups to have different sizes for AllReduce.
PiperOrigin-RevId: 394297426

==

jax/_src/lax/parallel.py
tests/pmap_test.py
==================
9ad78e4f;jax authors;2021-09-01 12:50:02 -0700;Merge pull request #7776 from jakevdp:postreview
PiperOrigin-RevId: 394292531

==
==================
14a02c68;yashkatariya;2021-09-01 11:26:41 -0700;Remove new features

==

CHANGELOG.md
==================
84edde2f;yashkatariya;2021-09-01 10:56:54 -0700;Add new features section

==

CHANGELOG.md
==================
be824a79;yashkatariya;2021-09-01 10:43:20 -0700;Update files after new jaxlib release 0.1.71

==

CHANGELOG.md
jaxlib/version.py
setup.py
==================
2707e6b4;Jake VanderPlas;2021-09-01 09:26:54 -0700;Post-review cleanup from #3076

==

jax/_src/numpy/lax_numpy.py
==================
b10fb54e;jax authors;2021-09-01 08:27:27 -0700;Merge pull request #3076 from shoyer:polyval-scan
PiperOrigin-RevId: 394236629

==
==================
63a7ad9e;jax authors;2021-09-01 08:10:14 -0700;Merge pull request #7774 from yashk2810:workspace
PiperOrigin-RevId: 394233543

==
==================
b317f6a2;Yash Katariya;2021-09-01 07:16:36 -0700;Merge branch 'main' into workspace

==
==================
67bea579;yashkatariya;2021-09-01 07:14:48 -0700;Update org_tensorflow commit for jaxlib release

==

WORKSPACE
==================
64631c0d;jax authors;2021-08-31 17:14:49 -0700;Merge pull request #7751 from avani17101:numpy-polyfit
PiperOrigin-RevId: 394117711

==
==================
4cb292f7;jax authors;2021-08-31 17:04:51 -0700;Merge pull request #7750 from jakevdp:install-docs
PiperOrigin-RevId: 394117025

==
==================
a08a9ad4;Yash Katariya;2021-08-31 14:06:32 -0700;Delete the generate_release_indexes file.
PiperOrigin-RevId: 394081682

==

build/generate_release_indexes.py
==================
8d7ac700;jax authors;2021-08-31 12:29:08 -0700;Merge pull request #7717 from romanngg:init_dtypes
PiperOrigin-RevId: 394060853

==
==================
0cfa95cb;Peter Hawkins;2021-08-31 11:36:40 -0700;[XLA:Python] Fix bug where garbage collection was not being triggered sufficiently often.
The destructor ManagedPyObjects failed to increment the count of garbage objects, which meant that MaybeCollectGarbage() was not triggered. Since the C++ JIT path calls MaybeCollectGarbage(), repeated calls to a JIT-ted function that accumulate garbage might fail to ever collect.

PiperOrigin-RevId: 394050168

==

tests/api_test.py
==================
c4d300c4;avani17101;2021-08-29 16:48:45 +0530;Implement np.polyfit

==

docs/jax.numpy.rst
jax/_src/numpy/lax_numpy.py
jax/numpy/__init__.py
tests/lax_numpy_test.py
==================
5f462068;jax authors;2021-08-30 20:18:05 -0700;Merge pull request #7758 from shoyer:fft-jit
PiperOrigin-RevId: 393908440

==
==================
d69f57e1;Matthew Johnson;2021-08-30 19:22:43 -0700;raise NotImplementedError for pjit partial eval

==

jax/experimental/pjit.py
tests/pjit_test.py
==================
e4100853;Adam Paszke;2021-08-30 15:40:11 -0700;Revert of "change while loop batching fixed point condition"
This change seems to have broken some other projects, so reverting.

PiperOrigin-RevId: 393869074

==

jax/_src/lax/control_flow.py
jax/interpreters/batching.py
==================
24503317;jax authors;2021-08-30 14:41:02 -0700;Merge pull request #7711 from sharadmv:autodidax-fix
PiperOrigin-RevId: 393856626

==
==================
5463b81f;David Majnemer;2021-08-30 11:53:48 -0700;Remove TPU-specific cbrt lowering
PiperOrigin-RevId: 393821890

==

jax/_src/lax/lax.py
==================
8ae1245c;Matthew Johnson;2021-08-30 11:10:10 -0700;add assertions

==

jax/core.py
jax/interpreters/partial_eval.py
==================
22943ef8;Stephan Hoyer;2021-08-30 09:04:13 -0700;Add jit to lax.fft
The main motivation here is ensuring that FFTs are always marked in
profiler results, which is not necessarily the case where running on
TPUs.

I would jit decorate the user facing functions in jax.numpy.fft, but
these functions also accept parameters as lists, e.g., for axes, which
are mutable and hence not valid as direct input into jit decorated
functions. This might be worth doing, but would be a breaking change.

==

jax/_src/lax/fft.py
jax/_src/numpy/fft.py
tests/lax_vmap_test.py
==================
bbfd8f7c;jax authors;2021-08-30 05:21:23 -0700;Merge pull request #7206 from sharadmv:collective-cf
PiperOrigin-RevId: 393748817

==
==================
9df340d0;Stephan Hoyer;2021-08-29 16:48:15 -0700;New implementation of jnp.polyval using lax.scan

==

jax/_src/numpy/lax_numpy.py
==================
6ad9291a;jax authors;2021-08-28 11:20:05 -0700;Merge pull request #7746 from jakevdp:transpose-ndarray
PiperOrigin-RevId: 393544851

==
==================
e46200e1;Jake VanderPlas;2021-08-28 08:15:21 -0700;README: mention that CUDA installation is for linux only

==

README.md
==================
9f919c69;Matthew Johnson;2021-08-27 17:42:42 -0700;fix custom_vjp issue?

==

jax/_src/custom_derivatives.py
jax/_src/traceback_util.py
jax/interpreters/partial_eval.py
jax/test_util.py
tests/api_test.py
==================
ae9fad62;jax authors;2021-08-27 17:08:44 -0700;Merge pull request #7732 from jakevdp:fix-poly
PiperOrigin-RevId: 393456644

==
==================
a56a1679;Matthew Johnson;2021-08-27 16:59:54 -0700;fix constants problem

==

jax/_src/traceback_util.py
jax/interpreters/partial_eval.py
tests/api_test.py
==================
fb30fa85;Jake VanderPlas;2021-08-26 11:12:16 -0700;update CHANGELOG for #7662 & #7732

==

CHANGELOG.md
==================
80df3218;Jake VanderPlas;2021-08-26 10:56:34 -0700;Require arrays as inputs for jnp.poly functions

==

jax/_src/numpy/lax_numpy.py
==================
06f4842a;jax authors;2021-08-27 16:43:17 -0700;Merge pull request #7744 from jakevdp:dtype-validation
PiperOrigin-RevId: 393452434

==
==================
acb6a43e;jax authors;2021-08-27 15:34:03 -0700;Merge pull request #7738 from jakevdp:nullary-error
PiperOrigin-RevId: 393441204

==
==================
bbf81fc5;Jake VanderPlas;2021-08-27 14:05:21 -0700;ensure lax.transpose and lax.reshape always return DeviceArrays

==

jax/_src/lax/lax.py
==================
e7ab1898;Jake VanderPlas;2021-08-27 10:12:10 -0700;nansum/nanprod: add missing dtype validation

==

jax/_src/numpy/lax_numpy.py
==================
82775278;Jake VanderPlas;2021-08-26 17:14:55 -0700;check static arguments in numpy nullary functions

==

jax/_src/numpy/lax_numpy.py
==================
619f2b93;Qiao Zhang;2021-08-26 22:36:58 -0700;Set ShardedArray device_buffer aval.
PiperOrigin-RevId: 393281615

==

jax/interpreters/pxla.py
tests/pjit_test.py
==================
6cb8737c;Jean-Baptiste Lespiau;2021-08-26 15:05:44 -0700;Add a benchmark with many arguments.
PiperOrigin-RevId: 393216026

==

benchmarks/api_benchmark.py
==================
2d28951b;Matthew Johnson;2021-08-25 20:46:11 -0700;address comments form @apaszke

==

jax/__init__.py
jax/_src/api.py
jax/_src/custom_derivatives.py
jax/_src/util.py
jax/interpreters/partial_eval.py
jax/interpreters/xla.py
tests/api_test.py
==================
3a6b27a3;Matthew Johnson;2021-08-19 17:30:12 -0700;revert a change

==

tests/api_test.py
==================
037e4205;Matthew Johnson;2021-08-19 17:12:13 -0700;reviewer comments

==

jax/_src/api.py
jax/_src/custom_derivatives.py
jax/interpreters/partial_eval.py
jax/interpreters/xla.py
tests/api_test.py
==================
542641ca;Matthew Johnson;2021-08-06 11:09:29 -0700;rejames/reblake implementation

==

jax/_src/api.py
jax/_src/custom_derivatives.py
jax/_src/lax/control_flow.py
jax/_src/lax/parallel.py
jax/_src/util.py
jax/interpreters/partial_eval.py
jax/interpreters/xla.py
tests/api_test.py
==================
26c96714;jax authors;2021-08-25 14:32:46 -0700;Merge pull request #7716 from jakevdp:req-flake8
PiperOrigin-RevId: 392981188

==
==================
00435bd9;Roman Novak;2021-08-25 12:50:28 -0700;Make `input_shape` explicitly integer-typed in `_reduce_jvp` to avoid accidental float shapes when primal shape is `()`. Example where this fails: `grad(jnp.prod)(jnp.ones(()))`. Add a test.

==

jax/_src/lax/lax.py
tests/lax_autodiff_test.py
==================
1377cb5d;jax authors;2021-08-25 11:59:48 -0700;Merge pull request #7715 from jakevdp:fix-histogram2d
PiperOrigin-RevId: 392948174

==
==================
a5b6a4e6;Jake VanderPlas;2021-08-25 11:07:09 -0700;CI: remove flake8 from test requirements.

==

build/test-requirements.txt
==================
2ecf08da;Jake VanderPlas;2021-08-25 11:01:40 -0700;jnp.histogramdd: fix support for range argument

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
0fa70084;Sharad Vikram;2021-08-24 17:46:34 -0700;Pass `x` into transpose in autodidax

==

docs/autodidax.ipynb
docs/autodidax.md
docs/autodidax.py
==================
7a40aa01;Yash Katariya;2021-08-24 16:25:10 -0700;Bump up the commit hash for testing the new release builds
PiperOrigin-RevId: 392772080

==

WORKSPACE
==================
5fa55e4d;jax authors;2021-08-24 15:30:25 -0700;Merge pull request #7692 from terhorst:expints
PiperOrigin-RevId: 392761556

==
==================
fec72e18;Jonathan Terhorst;2021-08-21 16:03:43 -0400;add support for scipy.special.{expn,expi,exp1}

==

docs/jax.scipy.rst
jax/_src/scipy/special.py
jax/scipy/special.py
tests/lax_scipy_test.py
==================
d7b9adce;Yash Katariya;2021-08-24 11:56:34 -0700;Replace cuda 11.2 configs with cuda 11.1 since that's the earliest version where backwards compatibility is supported.
PiperOrigin-RevId: 392714272

==

.bazelrc
==================
0985447c;jax authors;2021-08-24 10:21:00 -0700;Merge pull request #7704 from jakevdp:jax-tree-util
PiperOrigin-RevId: 392692011

==
==================
0763e8f7;jax authors;2021-08-24 10:01:05 -0700;Merge pull request #7705 from jakevdp:fix-maml
PiperOrigin-RevId: 392687908

==
==================
9959d087;Jake VanderPlas;2021-08-24 09:11:40 -0700;maml.ipynb: fix sync issue

==

docs/notebooks/maml.ipynb
==================
1a397a55;Jake VanderPlas;2021-08-24 08:44:05 -0700;import  in the JAX namespace

==

jax/__init__.py
==================
1e3c4833;jax authors;2021-08-24 00:11:43 -0700;Merge pull request #7699 from noahtren:main
PiperOrigin-RevId: 392600102

==
==================
6158ddcc;jax authors;2021-08-23 16:51:03 -0700;Merge pull request #7690 from tigerneil:patch-2
PiperOrigin-RevId: 392548084

==
==================
64d29a40;Noah Trenaman;2021-08-23 16:26:00 -0400;jnp.where: provide fill_value for single-argument form

==

jax/_src/numpy/lax_numpy.py
==================
aea51c83;jax authors;2021-08-23 14:39:37 -0700;Merge pull request #7188 from cccntu:add-doc-jax.device_get
PiperOrigin-RevId: 392521558

==
==================
1b36aa21;jax authors;2021-08-23 13:59:43 -0700;Merge pull request #7680 from jakevdp:specify-scipy
PiperOrigin-RevId: 392512271

==
==================
92e04a86;jax authors;2021-08-23 13:55:35 -0700;Merge pull request #7666 from jakevdp:weak-type-repr
PiperOrigin-RevId: 392512228

==
==================
5861950f;Jake VanderPlas;2021-08-23 13:19:41 -0700;DOC: add discussion of weak_type to type promotion docs

==

docs/glossary.rst
docs/type_promotion.rst
==================
00f36173;Jake VanderPlas;2021-08-23 13:19:33 -0700;Specify weak_type in DeviceArray repr

==

jax/_src/api.py
jax/_src/custom_derivatives.py
jax/_src/errors.py
jax/_src/tree_util.py
jax/interpreters/xla.py
tests/dtypes_test.py
==================
85367804;Jonathan Chang;2021-07-04 19:55:45 +0800;Add documentation for jax.device_get

==

docs/jax.rst
jax/_src/api.py
==================
b072ae54;Dian Wu;2021-08-23 13:52:43 +0200;Merge branch 'main' into complex_init

==
==================
db0efd91;Xiaohu Zhu;2021-08-21 15:50:36 +0800;Update maml.md
typo fixed.
==

docs/notebooks/maml.md
==================
d349086c;jax authors;2021-08-20 17:17:02 -0700;Merge pull request #7683 from google:dependabot/github_actions/pre-commit/action-2.0.3
PiperOrigin-RevId: 392098389

==
==================
9f2863c6;dependabot[bot];2021-08-20 17:06:19 -0700;Copybara import of the project:
--
57572d861a8bfe42a3b34b19a6e25a0b7ea4f22f by dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>:

Bump flatbuffers from 1.12 to 2.0

Bumps [flatbuffers](https://github.com/google/flatbuffers) from 1.12 to 2.0.
- [Release notes](https://github.com/google/flatbuffers/releases)
- [Commits](https://github.com/google/flatbuffers/compare/v1.12.0...v2.0.0)

---
updated-dependencies:
- dependency-name: flatbuffers
  dependency-type: direct:production
  update-type: version-update:semver-major
...

Signed-off-by: dependabot[bot] <support@github.com>
COPYBARA_INTEGRATE_REVIEW=https://github.com/google/jax/pull/7686 from google:dependabot/pip/flatbuffers-2.0 57572d861a8bfe42a3b34b19a6e25a0b7ea4f22f
PiperOrigin-RevId: 392097862

==

build/test-requirements.txt
==================
a6aa073a;jax authors;2021-08-20 17:09:49 -0700;Merge pull request #7682 from google:dependabot/github_actions/styfle/cancel-workflow-action-0.9.1
PiperOrigin-RevId: 392097787

==
==================
978da02f;jax authors;2021-08-20 17:09:32 -0700;Merge pull request #7688 from jakevdp:mypy-tersion
PiperOrigin-RevId: 392097677

==
==================
39020d90;jax authors;2021-08-20 17:05:46 -0700;Merge pull request #7689 from jakevdp:linalg-test
PiperOrigin-RevId: 392097672

==
==================
bc4e3d1f;jax authors;2021-08-20 15:11:45 -0700;Merge pull request #7681 from google:inline-random
PiperOrigin-RevId: 392078590

==
==================
53d8017f;Jake VanderPlas;2021-08-20 14:45:31 -0700;re-enable test for jnp.linalg.lstsq

==

tests/linalg_test.py
==================
cbcd6eea;Jake VanderPlas;2021-08-20 14:35:37 -0700;CI: bump mypy & flake8 versions to newest

==

.pre-commit-config.yaml
build/test-requirements.txt
==================
693d2e20;jax authors;2021-08-20 14:34:05 -0700;Merge pull request #6750 from romanngg:init_dtypes
PiperOrigin-RevId: 392071088

==
==================
60f025dd;dependabot[bot];2021-08-20 20:59:50 +0000;Bump pre-commit/action from 2.0.0 to 2.0.3
Bumps [pre-commit/action](https://github.com/pre-commit/action) from 2.0.0 to 2.0.3.
- [Release notes](https://github.com/pre-commit/action/releases)
- [Commits](https://github.com/pre-commit/action/compare/v2.0.0...v2.0.3)

---
updated-dependencies:
- dependency-name: pre-commit/action
  dependency-type: direct:production
  update-type: version-update:semver-patch
...

Signed-off-by: dependabot[bot] <support@github.com>
==

.github/workflows/ci-build.yaml
==================
050cce03;dependabot[bot];2021-08-20 20:59:48 +0000;Bump styfle/cancel-workflow-action from 0.8.0 to 0.9.1
Bumps [styfle/cancel-workflow-action](https://github.com/styfle/cancel-workflow-action) from 0.8.0 to 0.9.1.
- [Release notes](https://github.com/styfle/cancel-workflow-action/releases)
- [Commits](https://github.com/styfle/cancel-workflow-action/compare/0.8.0...0.9.1)

---
updated-dependencies:
- dependency-name: styfle/cancel-workflow-action
  dependency-type: direct:production
  update-type: version-update:semver-minor
...

Signed-off-by: dependabot[bot] <support@github.com>
==

.github/workflows/ci-build.yaml
==================
a4bd0e7b;jax authors;2021-08-20 13:59:21 -0700;Merge pull request #7672 from mmorel-35:main
PiperOrigin-RevId: 392064139

==
==================
e416e873;Matthew Johnson;2021-08-20 13:43:38 -0700;inline jit-decorated jax.random calls

==

jax/_src/prng.py
jax/_src/random.py
==================
cfdfb065;jax authors;2021-08-20 12:43:23 -0700;Merge pull request #7678 from jakevdp:cleanup-test
PiperOrigin-RevId: 392048698

==
==================
95a1f634;jax authors;2021-08-20 11:25:45 -0700;Merge pull request #7679 from jakevdp:test-reqs
PiperOrigin-RevId: 392032280

==
==================
062f8d22;Jake VanderPlas;2021-08-20 10:16:17 -0700;Specify scipy in setup.py install_requires

==

setup.py
==================
7fa151c5;Jake VanderPlas;2021-08-20 10:09:14 -0700;cleanup: remove redundant entry from test-requirements

==

build/test-requirements.txt
==================
72d663af;Jake VanderPlas;2021-08-20 09:55:14 -0700;cleanup: remove some unnecessary test boilerplate

==

tests/linalg_test.py
==================
705d5ed5;jax authors;2021-08-19 21:52:40 -0700;Merge pull request #6899 from google:custom-rng
PiperOrigin-RevId: 391913770

==
==================
4eb437a5;Roy Frostig;2021-08-15 09:04:25 -0700;alias prng.threefry_2x32 in random and warn of move
Some call this, apparently.

==

jax/_src/random.py
jax/random.py
==================
60e0e9f9;Roy Frostig;2021-08-15 08:09:30 -0700;implement backwards-compatible behavior and enable custom PRNGs only conditionally
Introduce a config flag for upgrading to a world of custom PRNGs. The
flag defaults off, so that we can introduce custom PRNGs into the
codebase and allow downstream libraries time to upgrade.

Backwards compatible behavior is meant in an external sense. This does
not mean that our code is internally the same any longer.

==

jax/__init__.py
jax/_src/config.py
jax/_src/prng.py
jax/_src/random.py
jax/prng.py
tests/api_test.py
tests/random_test.py
==================
ad4b4544;Roy Frostig;2021-08-13 16:54:42 -0700;introduce custom PRNG tests
Now that `LaxRandomTest` only tests random functions and not any
specific PRNG, it can be reused to test random functions under
different PRNGs.

==

tests/random_test.py
==================
e33ef7f2;Roy Frostig;2021-08-13 18:28:47 -0700;factor prng tests from lax random tests
Some tests check the behavior of the random bit generator---in
particular the default threefry implementation---and some check the
behavior of samplers. Separate them into different test classes.

==

tests/random_test.py
==================
aa265cce;Roy Frostig;2021-06-08 11:16:33 -0700;introduce custom PRNG implementations and an array-like adapter for them
A PRNG implementation is determined by a key shape and a set of basic
functions on such a key: seed, split, random_bits, and fold_in.

A PRNG implementation can then by lifted to an array-of-keys-like
object. Namely, a new internal pytree class PRNGKeyArray wraps the
implementation and maintains an array of keys of the right shape. This
array-like object is the new "key" that gets passed around the various
functions in the public random API (e.g. `random.uniform`,
`random.normal`, ...). So the PRNGKeyArray class really serves two
purposes at once:

1. To adapt key implementations into "arrays" of such keys.
2. To carry a reference to the PRNG implementation around and delegate
   back to it from the functions in random.

==

jax/_src/prng.py
jax/_src/random.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/prng.py
jax/random.py
tests/api_test.py
tests/pmap_test.py
tests/random_test.py
==================
c39c0933;Yash Katariya;2021-08-19 19:46:54 -0700;Add cuda 10.2 configs in bazelrc for RBE builds.
PiperOrigin-RevId: 391899496

==

.bazelrc
==================
6b00b448;Aden Grue;2021-08-19 16:54:53 -0700;Move all Abseil dependencies out of jaxlib CUDA libraries
These were breaking the build with CUDA 10.2

PiperOrigin-RevId: 391875083

==

jaxlib/BUILD
jaxlib/cuda_lu_pivot_kernels.cc
jaxlib/cuda_lu_pivot_kernels.cu.cc
jaxlib/cuda_lu_pivot_kernels.h
jaxlib/cuda_prng_kernels.cc
jaxlib/cuda_prng_kernels.cu.cc
jaxlib/cuda_prng_kernels.h
==================
5138743e;Dian Wu;2021-07-31 19:26:53 +0200;Implement variance scaling initializers with complex dtype

==

jax/_src/nn/initializers.py
tests/nn_test.py
==================
6a360e96;Matthieu MOREL;2021-08-19 20:21:16 +0200;Update dependabot.yml

==

.github/dependabot.yml
==================
952bd03f;Matthieu MOREL;2021-08-19 20:17:45 +0200;chore(ci) : setup dependabot
Signed-off-by: Matthieu MOREL <mmorel-35@users.noreply.github.com>
==

.github/dependabot.yml
==================
eb15207e;jax authors;2021-08-19 09:53:02 -0700;Merge pull request #7662 from jakevdp:check-arraylike
PiperOrigin-RevId: 391780643

==
==================
35f5e5a4;jax authors;2021-08-19 09:49:14 -0700;Merge pull request #7659 from jakevdp:fix-nan-2
PiperOrigin-RevId: 391780420

==
==================
88902d16;jax authors;2021-08-18 15:15:48 -0700;Merge pull request #7664 from jakevdp:promotion-code
PiperOrigin-RevId: 391620740

==
==================
37a2e57d;Jake VanderPlas;2021-08-18 14:11:36 -0700;DOC: fix code formatting in type_promotion.rst

==

docs/type_promotion.rst
==================
730ae33e;Jake VanderPlas;2021-08-18 11:54:05 -0700;logsumexp: fix issue with debug_nans

==

jax/_src/scipy/special.py
tests/lax_scipy_test.py
==================
7dca0506;Yash Katariya;2021-08-18 13:56:08 -0700;Remove `build --strategy=Genrule=standalone` since this makes genrule run locally instead of on remote RBE clusters leading to errors that are very hard to debug.
Add this back in build.py because that script is used for building jaxlib locally.

PiperOrigin-RevId: 391603481

==

.bazelrc
build/build.py
==================
52476d64;jax authors;2021-08-18 13:14:15 -0700;Merge pull request #7660 from jakevdp:fix-flake8
PiperOrigin-RevId: 391594766

==
==================
178d3d7d;Jake VanderPlas;2021-08-18 12:34:30 -0700;Require array-like inputs for jax.numpy set-like operations

==

jax/_src/numpy/lax_numpy.py
==================
d1823857;Jake VanderPlas;2021-08-18 10:15:47 -0700;Cleanup: remove unused import

==

jax/experimental/jax2tf/tests/primitives_test.py
==================
3827a8b2;jax authors;2021-08-18 09:06:02 -0700;Merge pull request #7617 from juliuskunze:dct
PiperOrigin-RevId: 391540164

==
==================
0ffa4e8d;jax authors;2021-08-18 08:49:23 -0700;Merge pull request #7658 from gnecula:tf_pad
PiperOrigin-RevId: 391536654

==
==================
bc1e4143;George Necula;2021-08-18 16:31:09 +0200;[jax2tf] Added support for conversion of padding with enable_xla=False

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/jax2tf_test.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
0a8b0588;jax authors;2021-08-17 23:04:17 -0700;Merge pull request #7648 from jakevdp:fix-logsumexp
PiperOrigin-RevId: 391456363

==
==================
5d526108;jax authors;2021-08-17 23:00:34 -0700;Merge pull request #7653 from google:custom-vjp-float0-part2
PiperOrigin-RevId: 391456287

==
==================
b65f39ca;Roman Novak;2021-08-17 20:41:02 -0700;Default to `jnp.float_` type in `nn.initializers`.

==

jax/_src/nn/initializers.py
tests/jet_test.py
tests/stax_test.py
tests/xmap_test.py
==================
b4ccecca;Roy Frostig;2021-06-03 21:55:39 -0700;factor PRNG routines from random module to prng

==

jax/_src/prng.py
jax/_src/random.py
jax/random.py
==================
83f95a5d;Matthew Johnson;2021-08-17 17:06:19 -0700;custom_jvp/vjp tweaks and fixes

==

jax/_src/custom_derivatives.py
jax/core.py
jax/interpreters/ad.py
jax/interpreters/batching.py
==================
1dac2f67;jax authors;2021-08-17 17:00:31 -0700;Merge pull request #7652 from google:custom-vjp-float0-part1
PiperOrigin-RevId: 391409337

==
==================
b90daf9c;Matthew Johnson;2021-08-17 16:18:57 -0700;custom_vjp: automatically handle float0 cotangents

==

jax/_src/custom_derivatives.py
tests/api_test.py
==================
49ab9c2f;jax authors;2021-08-17 15:58:51 -0700;Merge pull request #7649 from ROCmSoftwarePlatform:fix_rocm_gpu_targets
PiperOrigin-RevId: 391396895

==
==================
d9c5a839;jax authors;2021-08-17 15:30:39 -0700;Merge pull request #7650 from jakevdp:rank-error
PiperOrigin-RevId: 391391755

==
==================
f454f6b7;Reza Rahimi;2021-08-17 20:42:02 +0000;fix rocm_amdgpu_targets for rocm

==

.bazelrc
build/build.py
==================
05913a91;jax authors;2021-08-17 14:43:43 -0700;Merge pull request #7386 from superbobry:xla-type-annotations
PiperOrigin-RevId: 391381136

==
==================
ea64a604;Jake VanderPlas;2021-08-17 14:37:27 -0700;Adjust wording for errors involving array rank

==

jax/_src/lax/lax.py
==================
0adbe563;jax authors;2021-08-17 14:03:41 -0700;Merge pull request #7642 from gnecula:tf_scatter
PiperOrigin-RevId: 391371473

==
==================
0e256dde;Jake VanderPlas;2021-08-17 13:47:06 -0700;Fix logsumexp issue with debug_nans and disable_jit

==

jax/_src/scipy/special.py
tests/lax_scipy_test.py
==================
47664257;Yash Katariya;2021-08-17 11:57:18 -0700;Make .bazelrc more configurable so that cuda 10.2 configs and any other configs for RBE can be added.
PiperOrigin-RevId: 391343779

==

.bazelrc
==================
c9c04d30;jax authors;2021-08-17 10:44:45 -0700;Merge pull request #7646 from jakevdp:beta-pdf
PiperOrigin-RevId: 391326361

==
==================
6d83027b;Julius Kunze;2021-08-17 15:20:13 +0200;Support scipy.fft.dct/dctn type=2

==

docs/jax.scipy.rst
docs/sphinxext/jax_extensions.py
jax/_src/scipy/fft.py
jax/scipy/__init__.py
jax/scipy/fft.py
tests/scipy_fft_test.py
==================
743a1c27;Jake VanderPlas;2021-08-17 09:52:11 -0700;scipy.stats.beta: fix pdf for x=0, 1

==

jax/_src/scipy/stats/beta.py
tests/scipy_stats_test.py
==================
f6f1debf;Jean-Baptiste Lespiau;2021-08-17 06:11:07 -0700;Add post_hook support for pmap, to support debug_nans and debug_infs.
It's the exact same code as for JIT. We just modify the Python function to accept ShardedDeviceArray in addition to DeviceArray objects. The test is updated accordingly.

PiperOrigin-RevId: 391272270

==

jax/_src/api.py
tests/debug_nans_test.py
tests/pmap_test.py
==================
663ba166;George Necula;2021-08-17 14:37:54 +0200;[jax2tf] Update conversion of scatter for shape polymorphism
It turns out that the XlaScatter inference rule is enough, we
don't need the `.set_shape` workaround.

==

jax/experimental/jax2tf/jax2tf.py
==================
4e6aef58;Skye Wanderman-Milne;2021-08-16 16:05:11 -0700;Factor out uncached version of xla_bridge.get_backend
PiperOrigin-RevId: 391158558

==

jax/lib/xla_bridge.py
==================
12f9a80e;Sergei Lebedev;2021-08-16 20:27:25 +0100;Added jaxlib to .pre-commit-config.yaml

==

.pre-commit-config.yaml
==================
af41a959;Sergei Lebedev;2021-07-26 13:44:57 +0100;Most of JAX now uses concrete types for things defined in jaxlib.xla_client
Note that a few call sites in the diff got a ``# type: ignore``, because
the latest jaxlib does not have up-to-date signatures for the correpsonding
callables.

==

jax/_src/api.py
jax/_src/lax/lax.py
jax/_src/source_info_util.py
jax/_src/tree_util.py
jax/api_util.py
jax/experimental/host_callback.py
jax/experimental/jax2tf/call_tf.py
jax/experimental/optimizers.py
jax/interpreters/partial_eval.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
jax/tree_util.py
==================
f0219d6a;Markus Kunesch;2021-08-16 10:43:00 -0700;xla: fix the string representation of empty dict in PyTreeDef.
This commit fixes a bug in the string representation of empty dictionaries in a
PyTreeDef (the opening brace was missing).

PiperOrigin-RevId: 391083297

==

tests/tree_util_test.py
==================
88f8c9ff;jax authors;2021-08-16 08:55:26 -0700;Merge pull request #7610 from jakevdp:choose-method
PiperOrigin-RevId: 391057091

==
==================
5e2534c0;jax authors;2021-08-16 08:04:48 -0700;Merge pull request #7633 from ROCmSoftwarePlatform:fix_rocm_custom_call_status
PiperOrigin-RevId: 391047239

==
==================
10fd2777;Amit Sabne;2021-08-16 07:48:51 -0700;Change a test.
PiperOrigin-RevId: 391044471

==

jax/experimental/jax2tf/tests/jax2tf_limitations.py
jax/experimental/jax2tf/tests/sharding_test.py
==================
16a110e4;Reza Rahimi;2021-08-16 04:37:18 +0000;fix custom_call_status for rocm

==

jaxlib/rocm_gpu_kernel_helpers.cc
==================
9b62fd80;jax authors;2021-08-15 08:24:43 -0700;Merge pull request #7626 from google:issue7621
PiperOrigin-RevId: 390900890

==
==================
2e6a30a5;Matthew Johnson;2021-08-13 14:47:45 -0700;always use same object for vmap temp axis name

==

jax/_src/api.py
jax/interpreters/batching.py
tests/api_test.py
==================
a3387aeb;jax authors;2021-08-13 13:11:58 -0700;Merge pull request #7624 from yashk2810:workspace
PiperOrigin-RevId: 390677962

==
==================
f729f7ea;Yash Katariya;2021-08-13 11:32:41 -0700;Replace py3.8 build with JAX_NUM_GENERATED_CASES=25 with JAX_NUM_GENERATED_CASES=10. JAX_NUM_GENERATED_CASES=25 is now using kokoro with py3.9 `CPU` which is 4x faster than the github action.
Since py3.8 build with JAX_NUM_GENERATED_CASES=25 on github action is the slowest build, this should give an improvement of 10 minutes overall since the second slowest build is 10 mins faster than the above one.

But moving py3.8 build (Github actions) with JAX_NUM_GENERATED_CASES=25 to Kokoro (JAX_NUM_GENERATED_CASES=25 and py3.9 and `CPU`) gives a `4x` speedup (testing time).
Overall kokoro time is around 11 mins. So its a `2.5x` speedup overall.

Github actions:

```
=============== 23033 passed, 2033 skipped in 1727.43s (0:28:47) ===============
```

Kokoro:

```
=============== 22877 passed, 2065 skipped in 446.36s (0:07:26) ================

Total kokoro time = 11 mins. So 2.5x speedup overall.
```

PiperOrigin-RevId: 390656668

==

.github/workflows/ci-build.yaml
==================
2ab264dc;yashkatariya;2021-08-13 11:11:50 -0700;Update workspace org_tensorflow commit

==

WORKSPACE
==================
9b92368a;jax authors;2021-08-13 10:44:03 -0700;Merge pull request #7620 from yashk2810:gen
PiperOrigin-RevId: 390645317

==
==================
607f9441;jax authors;2021-08-13 10:16:07 -0700;Merge pull request #7619 from mkunesch:changelist/390611626
PiperOrigin-RevId: 390639156

==
==================
6504aae9;Jake VanderPlas;2021-08-12 14:55:35 -0700;jax.numpy: add missing x.choose() method

==

jax/_src/numpy/lax_numpy.py
==================
3a99d18d;yashkatariya;2021-08-13 09:03:08 -0700;Add nocuda jaxlib wheels to the index as well

==

build/generate_release_indexes.py
==================
6708cd31;Markus Kunesch;2021-08-13 14:52:03 +0000;Add dtype to string representation of ConcreteArray.
The string representation of ConcreteArray did not include the data type of the
wrapped value. This makes it harder to spot the reason for errors arising from
inconsistent values (issue #5364). This commit adds the data type to the string
representation of ConcreteArray.

==

jax/core.py
tests/core_test.py
==================
7821d07c;Jean-Baptiste Lespiau;2021-08-13 06:05:10 -0700;Efficient C++ pmap implementation.
PiperOrigin-RevId: 390595576

==

jax/_src/api.py
jax/_src/lax/lax.py
jax/interpreters/pxla.py
==================
71775889;Jean-Baptiste Lespiau;2021-08-13 02:33:21 -0700;Enable constructing C++ ShardedDeviceArray instead of the Python object.
With the feature enabled, we must not use `type(arg) == ShardedDeviceAray` but use isinstance(arg, ShardedDeviceArray).

PiperOrigin-RevId: 390568762

==

jax/interpreters/pxla.py
==================
9257bf0c;jax authors;2021-08-12 22:22:41 -0700;Merge pull request #7615 from google:issue7613
PiperOrigin-RevId: 390535936

==
==================
a0b9946a;Matthew Johnson;2021-08-12 21:49:17 -0700;add regression test for #7613

==

tests/api_test.py
==================
563e08fa;jax authors;2021-08-12 21:24:27 -0700;Merge pull request #7614 from google:update-pypi
PiperOrigin-RevId: 390529269

==
==================
6f7be1fa;Matthew Johnson;2021-08-12 21:17:53 -0700;update version and changelog for pypi

==

CHANGELOG.md
jax/version.py
==================
74f96f12;jax authors;2021-08-12 16:46:38 -0700;Merge pull request #7605 from yashk2810:cs
PiperOrigin-RevId: 390490097

==
==================
d82341d9;Peter Hawkins;2021-08-12 11:31:03 -0700;Add @jit decorators to another tranche of jax.numpy functions.
PiperOrigin-RevId: 390419775

==

jax/_src/numpy/lax_numpy.py
==================
1f13565b;yashkatariya;2021-08-12 11:12:35 -0700;Remove opensource CS link since JAX is not indexed

==

README.md
==================
729b21bd;jax authors;2021-08-11 17:41:19 -0700;Merge pull request #7592 from jakevdp:nonzero-fill-value
PiperOrigin-RevId: 390258049

==
==================
f01cb422;Jake VanderPlas;2021-08-11 11:54:59 -0700;Add optional fill_value argument to jnp.nonzero

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
8d6ff968;Qiao Zhang;2021-08-11 15:29:53 -0700;Internal backend config changes.
PiperOrigin-RevId: 390233762

==

jax/lib/xla_bridge.py
==================
1b85e827;jax authors;2021-08-11 14:33:02 -0700;Merge pull request #7591 from jakevdp:fix-resize-zero
PiperOrigin-RevId: 390221149

==
==================
62d9223f;Jake VanderPlas;2021-08-11 11:20:20 -0700;jax.image: fix error with zero-size image resizing

==

jax/_src/image/scale.py
tests/image_test.py
==================
8f0edbb9;jax authors;2021-08-11 09:00:09 -0700;Merge pull request #7585 from hawkinsp:debugnans
PiperOrigin-RevId: 390143846

==
==================
1aec989a;Peter Hawkins;2021-08-11 10:46:17 -0400;Fix "Store empty" error due to debug_nans corrupting cache entries.
Rather than mutating the existing WrappedFun, clone it with fresh stores. The stores aren't connected to anything, but that's fine: we can treat the deoptimized computation as a throwaway computation; the "real" computation is the jit-compiled version and we are ultimately going to use its stores if we don't throw an exception.

==

jax/interpreters/xla.py
tests/debug_nans_test.py
==================
67b190ee;Jean-Baptiste Lespiau;2021-08-11 06:14:28 -0700;Partial rollback due to a failure.
PiperOrigin-RevId: 390114631

==

jax/interpreters/pxla.py
==================
e2cf7a36;George Necula;2021-08-11 05:58:36 -0700;Edit the description of saved_model_lib.
PiperOrigin-RevId: 390112282

==

jax/experimental/jax2tf/examples/saved_model_lib.py
==================
50becf2a;Jean-Baptiste Lespiau;2021-08-11 03:09:32 -0700;Clean-up _ShardedDeviceArray constructor.
PiperOrigin-RevId: 390091860

==

jax/interpreters/pxla.py
==================
7200a7a8;Jean-Baptiste Lespiau;2021-08-11 00:46:30 -0700;Enable constructing C++ ShardedDeviceArray instead of the Python object.
This also contains a cleanup for lax_numpy:
- Create functions to setup attributes, so we clearly see what is happening. I am keeping things as they are, but we could, if we wanted to, set all the attributes that we set on `_DeviceArray`/`_CppDeviceArray`/`pmap_lib.ShardedDeviceArray` directly on the `DeviceArray` base class (not sure if it's slower or faster, etc), or we could set them all on the leaf nodes (maybe it's faster).
- This also remove some temporary objects in the scope, and I am removing `operator_name`, which for me should not be exposed (it values "round" at HEAD).

PiperOrigin-RevId: 390072555

==

jax/_src/numpy/lax_numpy.py
jax/interpreters/pxla.py
jax/numpy/__init__.py
==================
6ce45049;jax authors;2021-08-10 17:54:53 -0700;Merge pull request #7581 from hawkinsp:gitignore
PiperOrigin-RevId: 390020694

==
==================
dca68f2d;Yash Katariya;2021-08-10 17:50:44 -0700;Fix copybara so that .bazelrc will go out to github
PiperOrigin-RevId: 390020496

==

.bazelrc
==================
57e4f6ba;Peter Hawkins;2021-08-10 20:45:46 -0400;Update .gitignore since .bazelrc is now under version control.

==

.gitignore
==================
2b0b2eae;jax authors;2021-08-10 17:43:14 -0700;Merge pull request #7576 from jakevdp:BCOO-validation
PiperOrigin-RevId: 390019476

==
==================
2d1854a8;Yash Katariya;2021-08-10 16:17:30 -0700;Create a .bazelrc file that is the base for all the builds. The current build.py workflow will not be affected since this .bazelrc file will be overridden. I am going to change that workflow in the coming CLs.
PiperOrigin-RevId: 390003558

==

build/build.py
jax/.bazelrc
==================
62b6ad5e;Jake VanderPlas;2021-08-10 15:00:46 -0700;[sparse] BCOO: convert inputs to jnp.array when possible

==

jax/experimental/sparse/ops.py
==================
8c138475;jax authors;2021-08-10 14:41:09 -0700;Merge pull request #7551 from mkunesch:changelist/389638689
PiperOrigin-RevId: 389981536

==
==================
5552db72;Markus Kunesch;2021-08-09 15:27:50 +0000;Do not unflatten trees with None values in grad.
When checking the data type of the dynamic arguments in jax.value_and_grad the
PyTree is unflattened with `None` (the output of `_check_input_dtype_grad`) as
value for each leaf. This causes an issue if a custom PyTree does not accept
None as a value for the leaves (issue #7546) even though the tree that is
returned from the data type check is never used.

This commit solves this issue by iterating over tree_leaves when checking data
types rather than using tree_map.

==

jax/_src/api.py
tests/api_test.py
==================
b95e49b7;jax authors;2021-08-10 12:16:09 -0700;Merge pull request #7573 from LenaMartens:changelist/389923667
PiperOrigin-RevId: 389946420

==
==================
c82798b5;jax authors;2021-08-10 11:46:50 -0700;Merge pull request #7572 from google:advi-example-fix
PiperOrigin-RevId: 389939528

==
==================
1a2ddc05;jax authors;2021-08-10 11:42:48 -0700;Merge pull request #7419 from cloudhan:win-builder-prepare
PiperOrigin-RevId: 389938513

==
==================
0c3346f2;jax authors;2021-08-10 11:37:28 -0700;Merge pull request #7566 from gnecula:tf_more_poly
PiperOrigin-RevId: 389937220

==
==================
5e0becf8;Jean-Baptiste Lespiau;2021-08-10 11:10:34 -0700;Specify what is the expected behavior for ShardedDeviceArray.delete()
- We expect it to be indepempotent.
- We also fix an unclear error when slicing a deleted object.

PiperOrigin-RevId: 389930575

==

jax/interpreters/pxla.py
tests/pmap_test.py
==================
fc3d90e4;jax authors;2021-08-10 11:04:29 -0700;Merge pull request #7571 from jakevdp:sparsify-pytree
PiperOrigin-RevId: 389928696

==
==================
2f9caf3d;Lena Martens;2021-08-10 18:46:03 +0100;Ensure reduce_axes is a tuple.

==

jax/_src/api.py
==================
5d93680a;jax authors;2021-08-10 10:35:53 -0700;Merge pull request #7560 from jakevdp:fix-coo-matmat
PiperOrigin-RevId: 389920823

==
==================
9f8e3df3;Roy Frostig;2021-08-10 10:31:26 -0700;fix advi example: pass tuples rather than lists to jitted function

==

examples/advi.py
==================
4f931008;Jake VanderPlas;2021-08-10 10:31:16 -0700;[sparse] handle pytree inputs in sparsify transform

==

jax/experimental/sparse/transform.py
tests/sparsify_test.py
==================
f8081a9a;Jake VanderPlas;2021-08-10 10:13:29 -0700;[sparse] fix GPU translation rule for coo/csr matmat

==

jaxlib/cusparse.py
tests/sparse_test.py
==================
d597a454;George Necula;2021-08-10 11:50:16 +0300;[jax2tf] Small fixes for shape polymorphism.
* Fixed a few places where indexing required indices to be integer
  constants. Use core._canonicalize_dimension in lieu of casting to integer.
  Note that this may break code that passes floating point as indices.
* Relaxed einsum to work for multiple contractions.
* Added tests.

==

jax/_src/lax/lax.py
jax/experimental/jax2tf/shape_poly.py
jax/experimental/jax2tf/tests/shape_poly_test.py
==================
17a606a9;jax authors;2021-08-10 07:20:35 -0700;Merge pull request #7556 from LenaMartens:main
PiperOrigin-RevId: 389876971

==
==================
45aaf8a6;Jean-Baptiste Lespiau;2021-08-10 07:15:46 -0700;Make it possible to return a C++ `ShardedDeviceArray`.
This **will** be a **breaking** change, as pxla.ShardedDeviceArray constructor won't be valid anymore:
- for the next Jax release
- on the condition _USE_EXPERIMENTAL_CPP_SDA is switch to `_xla_extension_version > xx` and with the associated jaxlib release.

I am already adding the impact for the users in the CHANGELOG, we can still move it to the next version depending on when it's shipped.

Similarly to JAX.jit, for which we have a C++ `DeviceArray` and a Python `_DeviceArray`, we will introduce 2 objects for ShardedDeviceArray, with the Python object only for JAX extensions not compatible with the C++ object (e.g. Cloud TPU).

- Add `make_sharded_device_array` to be used within JAX and for hackers that need to construct SDA objects.
- Make sure the C++ object is valid by
  (a) extending `DeviceArrayBase` (done in Python), as it brings a bunch of methods and enable `isinstance(x, DeviceArray)`
  (b) Adding the same methods as the Python SDA.

NOTE: mypy has troubled with the " -> pxla.ShardedDeviceArray` function return type annotation, I had to remove 2.
PiperOrigin-RevId: 389876734

==

jax/_src/api.py
jax/interpreters/pxla.py
tests/pmap_test.py
==================
beddf598;Peter Hawkins;2021-08-10 06:48:55 -0700;Add `@jit` decorators to jax.numpy operators.
By wrapping common operators in `jit`, we get a number of benefits:
* `jit` has a faster, more optimized dispatch path compared to the primitive dispatch path in JAX. It's faster to dispatch a `jit` computation than a single primitive.
* `jit` allows us to cache and reuse logic such as broadcasting and type promotion.

One downside is that we now report an error when large Python integer scalars (e.g. `2**32 - 1`) are passed as arguments to JAX array operators. The workaround to this is to use explicitly typed constants instead of Python scalars.

On my laptop, this benchmark improves from 95us to 4us:

```
In [1]: import jax.numpy as jnp, jax

In [2]: x = jax.device_put(7)
WARNING:absl:No GPU/TPU found, falling back to CPU. (Set TF_CPP_MIN_LOG_LEVEL=0 and rerun for more info.)

In [3]: %timeit jnp.add(x, x).block_until_ready()
4.18 µs ± 159 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)
```

PiperOrigin-RevId: 389871450

==

CHANGELOG.md
jax/_src/numpy/lax_numpy.py
tests/api_test.py
tests/host_callback_test.py
tests/lax_numpy_test.py
==================
ddaef095;lenamartens;2021-08-09 17:23:05 +0100;Reword UnexpectedTracerError and add visual dividers.

==

jax/core.py
==================
a93eaf3c;Qiao Zhang;2021-08-09 23:44:14 -0700;Use absl::Status::message() instead of error_message().
PiperOrigin-RevId: 389810033

==

jaxlib/cublas.cc
jaxlib/cuda_gpu_kernel_helpers.h
jaxlib/cuda_lu_pivot_kernels.cu.cc
jaxlib/cuda_prng_kernels.cu.cc
jaxlib/cusolver.cc
jaxlib/cusparse.cc
jaxlib/rocblas.cc
==================
2afba31f;Qiao Zhang;2021-08-09 21:44:13 -0700;Fix return value for MakeBatchPointers.
PiperOrigin-RevId: 389795975

==

jaxlib/cuda_gpu_kernel_helpers.cc
==================
6f4937c3;Yash Katariya;2021-08-09 20:45:40 -0700;In OSS `#include "third_party/tensorflow/..."` should be `#include "tensorflow/..."`
PiperOrigin-RevId: 389788858

==

jaxlib/cublas.cc
jaxlib/cuda_lu_pivot_kernels.cu.cc
jaxlib/cuda_lu_pivot_kernels.h
jaxlib/cuda_prng_kernels.cu.cc
jaxlib/cuda_prng_kernels.h
jaxlib/cusolver.cc
jaxlib/cusparse.cc
jaxlib/rocblas.cc
==================
9120c5e3;Yash Katariya;2021-08-09 18:49:18 -0700;Fix the flaky test
PiperOrigin-RevId: 389774706

==

tests/xla_bridge_test.py
==================
bf967d88;Yash Katariya;2021-08-09 16:37:15 -0700;Upgrade versions after jaxlib release
PiperOrigin-RevId: 389753047

==

CHANGELOG.md
jaxlib/version.py
setup.py
==================
23f91d69;jax authors;2021-08-09 16:31:28 -0700;Merge pull request #7557 from jakevdp:fix-matmat-validation
PiperOrigin-RevId: 389751602

==
==================
c3689699;Aden Grue;2021-08-09 15:06:12 -0700;Use the new "custom call status" facility to report errors in jaxlib
PiperOrigin-RevId: 389734200

==

jaxlib/BUILD
jaxlib/cublas.cc
jaxlib/cuda_gpu_kernel_helpers.cc
jaxlib/cuda_gpu_kernel_helpers.h
jaxlib/cuda_linalg.py
jaxlib/cuda_lu_pivot_kernels.cu.cc
jaxlib/cuda_lu_pivot_kernels.h
jaxlib/cuda_prng.py
jaxlib/cuda_prng_kernels.cu.cc
jaxlib/cuda_prng_kernels.h
jaxlib/cusolver.cc
jaxlib/cusolver.py
jaxlib/cusparse.cc
jaxlib/cusparse.py
jaxlib/handle_pool.h
jaxlib/kernel_helpers.h
jaxlib/rocblas.cc
jaxlib/rocm_gpu_kernel_helpers.cc
jaxlib/rocm_gpu_kernel_helpers.h
jaxlib/rocsolver.py
==================
6249d664;Jake VanderPlas;2021-08-09 14:50:35 -0700;[sparse] fix bug in input shape validation

==

jax/experimental/sparse/ops.py
==================
f04464d2;jax authors;2021-08-09 14:28:56 -0700;Merge pull request #7555 from hawkinsp:tls
PiperOrigin-RevId: 389724785

==
==================
57ce886d;Qiao Zhang;2021-08-09 14:24:17 -0700;[JAX] Skip deleted buffer and executable for heap profile.
PiperOrigin-RevId: 389724193

==

tests/heap_profiler_test.py
==================
b4edff4a;jax authors;2021-08-09 13:10:32 -0700;Merge pull request #7554 from jakevdp:sparse-params
PiperOrigin-RevId: 389707398

==
==================
a3a2ed62;Peter Hawkins;2021-08-09 15:59:35 -0400;Strip debug_info and jaxpr_stack from MainTrace instances used as C++ JIT cache keys.
Without this fix, we created reference count cycles via the C++ JIT cache.

==

jax/core.py
==================
0b7c0dae;Jake VanderPlas;2021-08-09 12:14:37 -0700;[sparse] bug: thread through params in sparsify

==

jax/experimental/sparse/transform.py
==================
0cf3452e;jax authors;2021-08-09 09:35:04 -0700;Merge pull request #7541 from jakevdp:sparse-unit
PiperOrigin-RevId: 389653424

==
==================
25b3737e;Jake VanderPlas;2021-08-09 09:15:08 -0700;[sparse] correctly handle units in sparsify argspecs

==

jax/experimental/sparse/transform.py
tests/sparsify_test.py
==================
d3d69c3a;jax authors;2021-08-08 06:12:15 -0700;Merge pull request #7539 from gnecula:tf_poly
PiperOrigin-RevId: 389478677

==
==================
d50d8bce;jax authors;2021-08-07 15:30:01 -0700;Merge pull request #7537 from jakevdp:cond-sparse
PiperOrigin-RevId: 389411612

==
==================
36186eb7;jax authors;2021-08-06 15:45:01 -0700;Merge pull request #7528 from rsepassi:backenderr
PiperOrigin-RevId: 389278121

==
==================
f76108ba;Jake VanderPlas;2021-08-06 13:32:07 -0700;[sparse] add sparsify rule for lax.cond

==

jax/experimental/sparse/transform.py
tests/sparsify_test.py
==================
856c88fe;George Necula;2021-08-06 12:25:23 -0700;[jax2tf] Add support for the new XlaRngBitGenerator TensorFlow op
PiperOrigin-RevId: 389234059

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/jax2tf_limitations.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/shape_poly_test.py
==================
38cb2b53;jax authors;2021-08-06 11:58:38 -0700;Merge pull request #7536 from skye:cache_cpu_fix
PiperOrigin-RevId: 389227243

==
==================
29ffe9a3;George Necula;2021-08-04 07:03:51 +0300;[jax2tf] Allows shape polymorphic specification to be polynomials.
Until now, the polymorphic_shapes parameters could contain only
a constant or a dimension variable in each dimension. With this PR
we allow polynomials. These are needed in two situations:

  * when converting the VJP of a shape polymorphic function the shape
  specification corresponding to the cotangent must match the
  shape of the output of the primal function, which may contain
  polynomials of dimension variables.
  * one can specify that a dimension is even-sized by writing it
  as "2 * b", or that it is at least 10, by writing "b + 9".

This change requires changes to the code that solves the dimension
variables in terms of `tf.shape(arg)`. The dimension variables
are solved only from linear uni-variate polynomials followed by
replacing the solved variables in the other polynomials and
repeating until all variables are solved.

==

jax/experimental/jax2tf/README.md
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/shape_poly.py
jax/experimental/jax2tf/tests/shape_poly_test.py
==================
8190286b;Skye Wanderman-Milne;2021-08-06 18:06:09 +0000;Don't try to use persistent compilation cache when running CPU computations.

==

jax/experimental/compilation_cache/compilation_cache.py
jax/interpreters/xla.py
tests/compilation_cache_test.py
==================
d6df61c3;Aden Grue;2021-08-06 10:54:50 -0700;Fix the move constructor for Handle
PiperOrigin-RevId: 389212536

==

jaxlib/handle_pool.h
==================
897b920e;jax authors;2021-08-06 10:02:22 -0700;Merge pull request #7524 from hawkinsp:jax2tf
PiperOrigin-RevId: 389199254

==
==================
c94f4129;Tom Hennigan;2021-08-06 07:05:43 -0700;Update JAX flag parsing to work when some elements of argv aren't absl friendly.
PiperOrigin-RevId: 389168058

==

jax/_src/config.py
==================
f685e435;Ryan Sepassi;2021-08-05 18:18:12 -0700;Add backend errors

==

jax/lib/xla_bridge.py
==================
aee61dab;jax authors;2021-08-05 16:22:43 -0700;Merge pull request #7527 from jakevdp:sparse-scan
PiperOrigin-RevId: 389049604

==
==================
40ccad8c;Skye Wanderman-Milne;2021-08-05 15:21:58 -0700;Update WORKSPACE
PiperOrigin-RevId: 389037137

==

WORKSPACE
==================
1d359f8c;Jake VanderPlas;2021-08-05 15:19:43 -0700;[sparse]: add sparse rule for scan/fori_loop

==

jax/experimental/sparse/transform.py
tests/sparsify_test.py
==================
73dfd238;jax authors;2021-08-05 15:03:29 -0700;Merge pull request #7525 from hawkinsp:callback
PiperOrigin-RevId: 389032835

==
==================
a2a60844;Peter Hawkins;2021-08-05 17:31:11 -0400;Use MainTrace payload mechanism in experimental callback tracer.
A change that adds jit() decorators on a number of standard library functions was triggering incorrect cache hits for these tests. This is because the payload fields of the MainTrace were not being included in __hash__() and __eq__().

==

jax/experimental/callback.py
==================
d2bd017f;jax authors;2021-08-05 14:29:26 -0700;Merge pull request #7515 from jakevdp:numpy-rank-promotion
PiperOrigin-RevId: 389024418

==
==================
6114e6a0;Jake VanderPlas;2021-08-05 11:57:29 -0700;test_util: add decorator to set config values in test cases

==

jax/test_util.py
tests/lax_numpy_einsum_test.py
tests/lax_numpy_indexing_test.py
tests/lax_numpy_test.py
tests/lax_numpy_vectorize_test.py
tests/lax_scipy_sparse_test.py
tests/lax_scipy_test.py
tests/random_test.py
tests/scipy_ndimage_test.py
tests/scipy_optimize_test.py
tests/scipy_signal_test.py
==================
df690623;jax authors;2021-08-05 14:04:36 -0700;Merge pull request #7522 from jakevdp:super
PiperOrigin-RevId: 389018519

==
==================
3a469d5f;jax authors;2021-08-05 13:46:42 -0700;Merge pull request #7521 from jakevdp:missing-super
PiperOrigin-RevId: 389013956

==
==================
d83450d8;jax authors;2021-08-05 13:42:55 -0700;Merge pull request #7523 from yashk2810:bazel
PiperOrigin-RevId: 389013729

==
==================
efab3f45;Peter Hawkins;2021-08-05 16:39:04 -0400;[jax2tf] Handle weakly-typed values in constant lifting correctly.
An upcoming change to JAX will add `jit` decorators around many standard library functions. This was causing the pattern in this test case to break: the test before this change returns a float64 value. However, no type promotion should take place because 2. is a Python scalar and should be weakly-typed.

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/jax2tf_test.py
==================
be2f9b96;jax authors;2021-08-05 13:36:32 -0700;Merge pull request #7519 from hawkinsp:variadic
PiperOrigin-RevId: 389012280

==
==================
b24574f7;yashkatariya;2021-08-05 13:25:06 -0700;Fix the regex

==

build/build.py
==================
63a788b4;Jake VanderPlas;2021-08-05 13:11:07 -0700;Cleanup: switch to new version of super()

==

jax/core.py
jax/linear_util.py
jax/test_util.py
tests/array_interoperability_test.py
tests/custom_object_test.py
tests/sharded_jit_test.py
==================
0e4e1102;Jake VanderPlas;2021-08-05 13:04:40 -0700;Add missing super() call in test case setUp

==

jax/experimental/jax2tf/examples/saved_model_main_test.py
==================
03ec444f;jax authors;2021-08-05 12:54:10 -0700;Merge pull request #7514 from skye:compilation_cache_op_name
PiperOrigin-RevId: 389002209

==
==================
cac806cc;Peter Hawkins;2021-08-05 14:06:45 -0400;Use trace_to_jaxpr_dynamic in variadic_reduction_jaxpr.
We want jit(..., inline=True) inlining to apply in reduction jaxprs.

==

jax/_src/lax/lax.py
==================
1646ddaa;jax authors;2021-08-05 10:48:49 -0700;Merge pull request #7516 from yashk2810:bazel
PiperOrigin-RevId: 388971662

==
==================
806899f8;David Majnemer;2021-08-05 10:13:59 -0700;Avoid the Newton-Raphson step in cbrt for infinities
The Newton-Raphson step applied to infinities will result in NaNs. Instead, return an appropriately signed infinity.

PiperOrigin-RevId: 388962855

==

jax/_src/lax/lax.py
tests/lax_numpy_test.py
==================
cf8705d1;Jake VanderPlas;2021-08-05 09:53:49 -0700;Remove LICENSE_SHORT
PiperOrigin-RevId: 388958095

==

LICENSE_SHORT
==================
86aaf80d;yashkatariya;2021-08-05 09:45:39 -0700;Use bazel --version

==

build/build.py
==================
dcf3712e;Skye Wanderman-Milne;2021-08-05 15:18:03 +0000;Scrub function pointers in op_name metadata in persistent compilation cache key
The functions pointers were causing spurious cache misses.

I wasn't able to write a unit test for this, due to the existing issue
where identical computations in the same process will have unique
names, making it hard to test cache hits. I manually verified by
logging the cache key with `-v=1` and running the following test case:

```python
with tempfile.TemporaryDirectory() as tmpdir:
    cc.initialize_cache(tmpdir)
    @jax.custom_jvp
    def t(y):
      return y

    def t_jvp(p, t):
      pass

    t.defjvp(t_jvp)

    @jit
    def s(y):
      return t(y)

    s(3)
```

==

jax/experimental/compilation_cache/compilation_cache.py
==================
4152237d;jax authors;2021-08-05 07:55:06 -0700;Merge pull request #7512 from hawkinsp:einsum
PiperOrigin-RevId: 388933742

==
==================
3d70ff47;Peter Hawkins;2021-08-05 10:27:16 -0400;Default to `optimal` for einsum contraction path optimization.

==

jax/_src/numpy/lax_numpy.py
==================
8e821ac1;jax authors;2021-08-05 05:38:42 -0700;Merge pull request #7503 from google:autodidax
PiperOrigin-RevId: 388912283

==
==================
24de3e99;Matthew Johnson;2021-08-05 04:51:24 -0700;small autodidax tweaks

==

docs/autodidax.ipynb
docs/autodidax.md
docs/autodidax.py
==================
c75f7736;jax authors;2021-08-04 23:08:24 -0700;Merge pull request #7485 from gnecula:tf_kwargs
PiperOrigin-RevId: 388863017

==
==================
b4e4acd8;George Necula;2021-08-04 09:05:05 +0300;[jax2tf] Improve support for converting functions with kwargs
The previous conversion for kwargs did not work for AD.

Bug: #6791

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/jax2tf_test.py
jax/experimental/jax2tf/tests/shape_poly_test.py
==================
0d939e68;jax authors;2021-08-04 17:16:25 -0700;Merge pull request #7460 from elliotwaite:docs-fixes
PiperOrigin-RevId: 388819521

==
==================
7392a57b;elliotwaite;2021-08-02 17:57:09 -0700;DOC: many small fixes

==

CHANGELOG.md
README.md
design_notes/omnistaging.md
docs/autodidax.ipynb
docs/autodidax.md
docs/autodidax.py
docs/contributing.md
docs/custom_vjp_update.md
docs/developer.md
docs/device_memory_profiling.md
docs/faq.rst
docs/jax-101/01-jax-basics.ipynb
docs/jax-101/01-jax-basics.md
docs/jax-101/04-advanced-autodiff.ipynb
docs/jax-101/04-advanced-autodiff.md
docs/jax-101/05-random-numbers.ipynb
docs/jax-101/05-random-numbers.md
docs/jax-101/05.1-pytrees.ipynb
docs/jax-101/05.1-pytrees.md
docs/jax-101/06-parallelism.ipynb
docs/jax-101/06-parallelism.md
docs/jax.numpy.rst
docs/jaxpr.rst
docs/multi_process.md
docs/notebooks/Common_Gotchas_in_JAX.ipynb
docs/notebooks/Common_Gotchas_in_JAX.md
docs/notebooks/Custom_derivative_rules_for_Python_code.ipynb
docs/notebooks/Custom_derivative_rules_for_Python_code.md
docs/notebooks/How_JAX_primitives_work.ipynb
docs/notebooks/How_JAX_primitives_work.md
docs/notebooks/Neural_Network_and_Data_Loading.ipynb
docs/notebooks/Neural_Network_and_Data_Loading.md
docs/notebooks/Writing_custom_interpreters_in_Jax.ipynb
docs/notebooks/Writing_custom_interpreters_in_Jax.md
docs/notebooks/XLA_in_Python.ipynb
docs/notebooks/XLA_in_Python.md
docs/notebooks/autodiff_cookbook.ipynb
docs/notebooks/autodiff_cookbook.md
docs/notebooks/convolutions.ipynb
docs/notebooks/convolutions.md
docs/notebooks/maml.ipynb
docs/notebooks/maml.md
docs/notebooks/neural_network_with_tfds_data.ipynb
docs/notebooks/neural_network_with_tfds_data.md
docs/notebooks/quickstart.ipynb
docs/notebooks/quickstart.md
docs/notebooks/score_matching.ipynb
docs/notebooks/score_matching.md
docs/notebooks/thinking_in_jax.ipynb
docs/notebooks/thinking_in_jax.md
docs/notebooks/xmap_tutorial.ipynb
docs/notebooks/xmap_tutorial.md
docs/pytrees.md
docs/rank_promotion_warning.rst
docs/transformations.md
jax/_src/api.py
jax/_src/custom_derivatives.py
jax/_src/lax/lax.py
jax/_src/numpy/vectorize.py
jax/_src/scipy/optimize/minimize.py
jax/experimental/host_callback.py
jax/experimental/loops.py
jax/experimental/maps.py
jax/experimental/optimizers.py
jax/experimental/pjit.py
==================
2af53a39;Peter Hawkins;2021-08-04 16:49:10 -0700;[XLA:Python] Make JAX CompiledFunction objects pickle-able.
PiperOrigin-RevId: 388814246

==

tests/pickle_test.py
==================
80f9942b;Yash Katariya;2021-08-04 16:44:28 -0700;Fix the import. tests.lax_test -> lax_test since they are in the same directory.
PiperOrigin-RevId: 388813151

==

tests/lax_vmap_test.py
==================
df103f7e;jax authors;2021-08-04 16:36:52 -0700;Merge pull request #7493 from yashk2810:release
PiperOrigin-RevId: 388811438

==
==================
b5b44b06;Yash Katariya;2021-08-04 15:53:08 -0700;Remove cublas_header by default for anything under jaxlib/*
PiperOrigin-RevId: 388802894

==

jaxlib/BUILD
==================
ab364296;jax authors;2021-08-04 15:17:23 -0700;Merge pull request #7481 from jakevdp:scipy-rank-promotion
PiperOrigin-RevId: 388795560

==
==================
ce69561d;jax authors;2021-08-04 15:02:34 -0700;Merge pull request #7496 from jakevdp:sparse-from-scipy
PiperOrigin-RevId: 388791947

==
==================
ad4c670f;Jean-Baptiste Lespiau;2021-08-04 14:46:21 -0700;Add Python code for the future C++ pmap and pass the data to C++ as a namedtuple.
PiperOrigin-RevId: 388788330

==

jax/_src/api.py
tests/pmap_test.py
==================
f34e91de;Jake VanderPlas;2021-08-04 14:45:41 -0700;[sparse] add method to create BCOO matrix from scipy.sparse

==

jax/experimental/sparse/ops.py
tests/sparse_test.py
==================
606cbe03;jax authors;2021-08-04 13:43:58 -0700;Merge pull request #7370 from slowy07:fixing
PiperOrigin-RevId: 388774232

==
==================
060345c1;jax authors;2021-08-04 13:31:58 -0700;Merge pull request #7476 from jakevdp:remove-method
PiperOrigin-RevId: 388771537

==
==================
92b55a55;jax authors;2021-08-04 13:24:05 -0700;Merge pull request #7447 from mgrankin:patch-1
PiperOrigin-RevId: 388769732

==
==================
677eed49;yashkatariya;2021-08-04 12:13:05 -0700;Add Cusolver dep

==

jaxlib/BUILD
==================
72da78c6;yashkatariya;2021-08-04 12:03:28 -0700;Add cublas headers. cublas_kernels BUILD target has that dependency

==

jaxlib/BUILD
==================
0b1b812e;Mikhail Grankin;2021-08-02 19:01:13 +0300;bugfix for sm3 optimizer
Ensure atleast 1d input. Optimizer should work now with scalar data.
fixes #7421

==

jax/experimental/optimizers.py
tests/optimizers_test.py
==================
30ea76cb;Jake VanderPlas;2021-08-04 10:44:23 -0700;disable rank promotion for jax scipy tests

==

tests/lax_scipy_sparse_test.py
tests/lax_scipy_test.py
tests/scipy_ndimage_test.py
tests/scipy_optimize_test.py
tests/scipy_signal_test.py
==================
5c3fc6c9;Jean-Baptiste Lespiau;2021-08-04 09:29:44 -0700;Increment an xla_client._version.
PiperOrigin-RevId: 388714843

==

jax/interpreters/pxla.py
==================
e906857d;jax authors;2021-08-04 09:02:02 -0700;Merge pull request #7492 from yashk2810:main
PiperOrigin-RevId: 388709043

==
==================
e54efe73;yashkatariya;2021-08-04 08:56:55 -0700;Update commit for release

==

WORKSPACE
==================
efc5e257;Jean-Baptiste Lespiau;2021-08-04 01:23:04 -0700;Remove `PyLocalbuffer` as it's deprecated.
PiperOrigin-RevId: 388642739

==

jax/interpreters/pxla.py
jax/interpreters/xla.py
==================
9b6664fb;jax authors;2021-08-03 22:04:51 -0700;Merge pull request #7483 from gnecula:tf_broadcast2
PiperOrigin-RevId: 388616684

==
==================
f126cabe;George Necula;2021-08-04 07:30:12 +0300;[jax2tf] Fix shape polymorphism for broadcast_in_dim_transpose

==

jax/_src/lax/lax.py
jax/experimental/jax2tf/tests/shape_poly_test.py
==================
3f8d0f0a;jax authors;2021-08-03 19:21:39 -0700;Merge pull request #7422 from ROCmSoftwarePlatform:add_rocm_test_util
PiperOrigin-RevId: 388598011

==
==================
fc493c65;jax authors;2021-08-03 17:27:27 -0700;Merge pull request #7482 from yashk2810:tests
PiperOrigin-RevId: 388582300

==
==================
42bc8459;Yash Katariya;2021-08-03 17:03:03 -0700;Update the workspace file
PiperOrigin-RevId: 388578250

==

WORKSPACE
==================
70e9708e;yashkatariya;2021-08-03 16:36:27 -0700;Fix the tolerance so that the tests will pass on GPU

==

tests/lax_control_flow_test.py
tests/masking_test.py
==================
98b9acd9;jax authors;2021-08-03 16:08:43 -0700;Merge pull request #7456 from jakevdp:fix-bool-indexing
PiperOrigin-RevId: 388566045

==
==================
5450106e;Jean-Baptiste Lespiau;2021-08-03 16:03:15 -0700;Replace AvalDimSharding and MeshDimAssignment with the C++ object.
This is backward compatible, as the new objects has the same attributes with the same type (in particular, it can be constructed from iterable objects, and  `sharding` and `mesh_mapping` are still tuples.

PiperOrigin-RevId: 388565058

==

jax/interpreters/pxla.py
tests/pmap_test.py
==================
afdd195e;Jean-Baptiste Lespiau;2021-08-03 15:48:51 -0700;Internal only.
PiperOrigin-RevId: 388562206

==

benchmarks/api_benchmark.py
==================
5e97529d;jax authors;2021-08-03 15:36:46 -0700;Merge pull request #7478 from jakevdp:zeta-rank-promotion
PiperOrigin-RevId: 388559812

==
==================
08e1c831;Jake VanderPlas;2021-08-03 09:51:52 -0700;Validate shapes for boolean indices

==

jax/_src/numpy/lax_numpy.py
jax/_src/ops/scatter.py
tests/lax_numpy_indexing_test.py
==================
10bbd628;jax authors;2021-08-03 15:25:33 -0700;Merge pull request #7474 from jakevdp:rank-promotion
PiperOrigin-RevId: 388557275

==
==================
20cef7ea;Jake VanderPlas;2021-08-03 14:20:52 -0700;Fix rank promotion error in jsp.special.zeta

==

jax/_src/scipy/special.py
tests/lax_scipy_test.py
==================
ded289b0;jax authors;2021-08-03 14:32:29 -0700;Merge pull request #7475 from jakevdp:multigammaln-rank-promotion
PiperOrigin-RevId: 388545414

==
==================
24083432;Jake VanderPlas;2021-08-03 13:45:37 -0700;Cleanup: remove unused test utility

==

jax/test_util.py
tests/test_util_test.py
==================
af161776;Jake VanderPlas;2021-08-03 13:39:29 -0700;Fix rank promotion error in jsp.special.multigammaln

==

jax/_src/scipy/special.py
tests/lax_scipy_test.py
==================
768aba55;Jake VanderPlas;2021-08-03 12:19:36 -0700;disable implicit rank promotion in lax_numpy_einsum/indexing/vectorize_test

==

tests/lax_numpy_einsum_test.py
tests/lax_numpy_indexing_test.py
tests/lax_numpy_vectorize_test.py
==================
6c16ba49;jax authors;2021-08-03 12:01:47 -0700;Merge pull request #7473 from jakevdp:np-rank-promotion
PiperOrigin-RevId: 388510777

==
==================
8ef9d078;Jake VanderPlas;2021-08-03 11:29:10 -0700;lax_numpy_test: disable implicit rank promotion in all tests

==

tests/lax_numpy_test.py
==================
e2ccd99c;jax authors;2021-08-03 11:25:32 -0700;Merge pull request #7469 from hawkinsp:tol
PiperOrigin-RevId: 388502152

==
==================
80d03ec8;jax authors;2021-08-03 11:06:59 -0700;Merge pull request #7470 from jakevdp:no-travis
PiperOrigin-RevId: 388497897

==
==================
45b2abdf;Jake VanderPlas;2021-08-03 10:05:03 -0700;developer docs: remove outdated mentions of Travis CI

==

docs/developer.md
==================
86c48ccb;Roy Frostig;2021-08-03 09:53:53 -0700;[jax] set leaf and node counts when creating a tuple pytree definition
PiperOrigin-RevId: 388479354

==

tests/tree_util_test.py
==================
0d8ef03a;jax authors;2021-08-03 09:25:00 -0700;Added file system cache interface
PiperOrigin-RevId: 388473011

==

jax/experimental/compilation_cache/cache_interface.py
jax/experimental/compilation_cache/compilation_cache.py
jax/experimental/compilation_cache/file_system_cache.py
jax/interpreters/xla.py
==================
f5461827;jax authors;2021-08-03 08:11:05 -0700;Merge pull request #7462 from hawkinsp:float16
PiperOrigin-RevId: 388457810

==
==================
76d0ab70;Peter Hawkins;2021-08-03 10:25:14 -0400;Relax test tolerance of eigvals test.
This test failed when built with -mavx.

==

tests/linalg_test.py
==================
a3be00ae;jax authors;2021-08-03 06:51:32 -0700;Merge pull request #7463 from gnecula:tf_eye
PiperOrigin-RevId: 388443997

==
==================
ccb7b025;jax authors;2021-08-03 06:47:39 -0700;Merge pull request #7455 from jakevdp:fix-logsumexp
PiperOrigin-RevId: 388443917

==
==================
ee08324e;Peter Hawkins;2021-08-03 00:02:59 -0400;Perform float16 dot()s in float32 on CPU.
The XLA/CPU float16 matmul is very slow, so we may as well upcast to float32 for matmuls and cast the result back.

On my laptop, for a 1000x1000 matrix, computing x@x.T previously took about 4.5ms in float32 but 1.5s in float16.

==

jax/_src/lax/lax.py
jax/experimental/jax2tf/tests/jax2tf_limitations.py
==================
0c1a37ce;George Necula;2021-08-03 09:12:04 +0300;[jax2tf] Add shape polymorphism support for jnp.eye

==

jax/_src/lax/lax.py
jax/_src/numpy/lax_numpy.py
jax/core.py
jax/experimental/jax2tf/tests/shape_poly_test.py
==================
c149cc92;jax authors;2021-08-02 21:35:55 -0700;Merge pull request #7458 from jakevdp:ravel-pytree-doc
PiperOrigin-RevId: 388372561

==
==================
79103d54;jax authors;2021-08-02 19:05:19 -0700;Merge pull request #7459 from yashk2810:timer_secs
PiperOrigin-RevId: 388355377

==
==================
2f6f7889;yashkatariya;2021-08-02 18:27:27 -0700;Fix the timer->timer_secs typo

==

jax/lib/xla_bridge.py
==================
2c3b6479;Peter Hawkins;2021-08-02 18:26:39 -0700;Add missing <map> #include to jaxlib.
PiperOrigin-RevId: 388350144

==

jaxlib/handle_pool.h
==================
ca1b2738;Jake VanderPlas;2021-08-02 17:55:41 -0700;add ravel_pytree to generated docs

==

docs/jax.flatten_util.rst
docs/jax.rst
==================
e1313432;Jake VanderPlas;2021-08-02 15:27:24 -0700;Fix issue with infinities in logsumexp

==

jax/_src/scipy/special.py
tests/lax_scipy_test.py
==================
6984f30d;Roy Frostig;2021-08-02 12:40:18 -0700;Merge pull request #7443 from superbobry:jaxlib-xla-extension
PiperOrigin-RevId: 388235730

==
==================
e162d32e;jax authors;2021-08-02 07:33:17 -0700;Merge pull request #7427 from gnecula:tf_limits
PiperOrigin-RevId: 388215624

==
==================
a204f545;Sergei Lebedev;2021-08-02 14:44:43 +0100;Bumped TensorFlow revision to include xla_extension type stub fixes

==

WORKSPACE
==================
2a994bdb;Sergei Lebedev;2021-08-02 14:31:11 +0100;Type stubs for jaxlib.xla_extension no longer use -stubs suffix
PEP-561 does not specify whether subpackages of a non-stub-only-package
could use the -stubs suffix. setuptools seems to allow that, yet mypy fails
to resolve the subpackage with a -stubs suffix.

This commit makes jaxlib.xla_extension a ~normal package with a toplevel
__init__.pyi.

==

build/build_wheel.py
jaxlib/setup.py
==================
22bb7655;jax authors;2021-08-02 06:28:23 -0700;Merge pull request #7441 from hawkinsp:jaxlib
PiperOrigin-RevId: 388204424

==
==================
cde26128;Peter Hawkins;2021-08-02 09:22:32 -0400;Update minimum NumPy version in jaxlib build scripts.

==

build/Dockerfile
build/build_jaxlib_wheels_macos.sh
==================
42720f07;jax authors;2021-08-01 22:48:56 -0700;Merge pull request #7409 from yashk2810:docs
PiperOrigin-RevId: 388150017

==
==================
ca6465dd;yashkatariya;2021-08-01 20:13:02 -0700;Add the changes suggested

==

docs/async_dispatch.rst
==================
78fae4c3;jax authors;2021-08-01 14:02:47 -0700;Merge pull request #7417 from botev:main
PiperOrigin-RevId: 388107821

==
==================
7e9ca30d;jax authors;2021-08-01 12:14:15 -0700;Merge pull request #7435 from yashk2810:workspace
PiperOrigin-RevId: 388100474

==
==================
69fcc0c2;botev;2021-07-30 09:33:34 +0100;Abstracts into a separate function to evaluation of a single jaxpr equation.

==

jax/core.py
==================
790b8e81;yashkatariya;2021-08-01 08:53:12 -0700;Use separate variable names so that we don't get buildifier warnings

==

WORKSPACE
==================
be170530;Cloud Han;2021-07-31 19:13:16 +0800;fix bazel auto download

==

build/build.py
==================
022d2d6d;George Necula;2021-07-31 10:24:36 +0300;[jax2tf] Update the limitations
To account for progress on XLA and TF

==

jax/experimental/jax2tf/g3doc/jax_primitives_coverage.md
jax/experimental/jax2tf/g3doc/primitives_with_limited_support.md
jax/experimental/jax2tf/tests/jax2tf_limitations.py
jax/experimental/jax2tf/tests/primitive_harness.py
==================
655a3e79;jax authors;2021-07-30 16:17:48 -0700;Merge pull request #7423 from skye:source_file
PiperOrigin-RevId: 387903032

==
==================
350045c6;Skye Wanderman-Milne;2021-07-30 12:37:21 -0700;Add `jax_hlo_source_file_canonicalization_regex` config.
This is meant to be used with @colemanliyah's persistent compilation
cache, since the serialized HLO computation (including the source_file
metadata) is used in the cache key. The config can be used to remove
bits of the source file path that vary between program invocations, to
avoid spurious cache misses.

==

jax/_src/config.py
jax/interpreters/xla.py
tests/metadata_test.py
==================
b44d3566;Reza Rahimi;2021-07-30 19:17:21 +0000;change skip_on_devices to handle device tags

==

jax/test_util.py
tests/fft_test.py
==================
01b0dd3b;jax authors;2021-07-30 11:49:24 -0700;Merge pull request #7410 from colemanliyah:add_logging
PiperOrigin-RevId: 387851513

==
==================
03d0c99c;jax authors;2021-07-30 11:20:32 -0700;Merge pull request #7399 from yashk2810:timer
PiperOrigin-RevId: 387845365

==
==================
5383e977;colemanliyah;2021-07-29 17:12:15 +0000;added debugging logs to compilation cache

==

jax/experimental/compilation_cache/compilation_cache.py
==================
277b9449;yashkatariya;2021-07-30 10:28:47 -0700;Resolve comments

==

jax/lib/xla_bridge.py
tests/xla_bridge_test.py
==================
1cf42c70;jax authors;2021-07-30 07:46:05 -0700;Merge pull request #7418 from gnecula:tf_round_trip
PiperOrigin-RevId: 387803440

==
==================
f39e8b41;jax authors;2021-07-30 07:42:22 -0700;Merge pull request #7420 from gnecula:tf_broadcast
PiperOrigin-RevId: 387803051

==
==================
c00470d1;jax authors;2021-07-30 07:07:45 -0700;Merge pull request #7408 from hawkinsp:flake8
PiperOrigin-RevId: 387796933

==
==================
3b7b0d28;George Necula;2021-07-30 15:47:53 +0300;[jax2tf] Fix translation of broadcast_in_dim for TF1
It turns out that in TF1, a `None` dimension has the property
that both `(shape[0] == 1)` and `(shape[0] != 1)` are false.
In TF2, `(shape[0] == 1)` is False, and its negation is True.
Both behaviors are unsound.

The TF1 behavior was leading to an error in the broadcast_in_dim
translation rule. I rewrote that rule to not look at the
`operand.shape` and thus not have to deal with TF dimension values.
To the best of my knowledge the previous translation was sound
for TF2, but the new one should be more obviously sound.

Fixes: #7344

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/shape_poly.py
jax/experimental/jax2tf/tests/shape_poly_test.py
==================
b232d094;Peter Hawkins;2021-07-29 09:51:41 -0400;Enable flake8 checks for spaces around operators.

==

jax/_src/image/scale.py
jax/_src/lax/lax.py
jax/_src/numpy/lax_numpy.py
jax/_src/scipy/linalg.py
jax/experimental/jet.py
setup.cfg
tests/api_test.py
tests/linalg_test.py
tests/random_test.py
==================
d4349a42;Cloud Han;2021-07-30 19:25:33 +0800;workaround weird issue due to non-standard cuda path

==

build/build.py
==================
86e37d99;Cloud Han;2021-07-30 19:23:18 +0800;some fs support now can be disabled without compile error

==

build/build.py
==================
6aecb3c3;George Necula;2021-07-30 13:35:21 +0300;[jax2tf] enable multiple round-trips from JAX to TF

==

jax/experimental/jax2tf/call_tf.py
jax/experimental/jax2tf/tests/call_tf_test.py
==================
66cbb222;jax authors;2021-07-30 03:11:04 -0700;Merge pull request #7416 from gnecula:tf_getitem
PiperOrigin-RevId: 387769813

==
==================
64d2e5c1;George Necula;2021-07-30 10:52:34 +0300;[jax2tf] More cleanup for shape polymorphism testing

==

jax/experimental/jax2tf/shape_poly.py
jax/experimental/jax2tf/tests/call_tf_test.py
jax/experimental/jax2tf/tests/shape_poly_test.py
==================
59e6efda;jax authors;2021-07-29 14:50:24 -0700;Merge pull request #7160 from pschuh:support-outfeed
PiperOrigin-RevId: 387673929

==
==================
325195fc;jax authors;2021-07-29 12:48:57 -0700;Merge pull request #7412 from google:shaobo
PiperOrigin-RevId: 387647590

==
==================
c31688d2;Matthew Johnson;2021-07-29 10:34:43 -0700;fix cond-of-pmap bug

==

jax/core.py
tests/pmap_test.py
==================
fcda67fb;jax authors;2021-07-29 08:35:49 -0700;Merge pull request #7345 from LenaMartens:changelist/385988543
PiperOrigin-RevId: 387590823

==
==================
21907346;Lena Martens;2021-07-21 13:27:48 +0100;Add tracers to LeakChecker error, and filter out false positives this way.
If we can't find any hanging tracers in the gc.get_referrers chain, is it
really a leak? Probably not!

==

jax/core.py
tests/api_test.py
==================
b6e25fa0;jax authors;2021-07-29 07:35:58 -0700;Merge pull request #7406 from gnecula:tf_random2
PiperOrigin-RevId: 387580497

==
==================
be082b76;yashkatariya;2021-07-29 06:50:42 -0700;Add some clarification

==

docs/async_dispatch.rst
==================
e0f13bdf;jax authors;2021-07-29 06:35:05 -0700;Merge pull request #7407 from hawkinsp:np117
PiperOrigin-RevId: 387571062

==
==================
088be881;jax authors;2021-07-29 06:27:48 -0700;Merge pull request #7405 from hawkinsp:py37
PiperOrigin-RevId: 387569946

==
==================
6e9169d1;Peter Hawkins;2021-07-29 09:18:01 -0400;Drop support for NumPy 1.17.

==

.github/workflows/ci-build.yaml
CHANGELOG.md
build/build.py
jaxlib/setup.py
setup.py
tests/lax_numpy_test.py
==================
1c9dbd12;Peter Hawkins;2021-07-29 08:53:58 -0400;Remove Python 3.6 compatibility code.

==

jax/_src/traceback_util.py
tests/api_test.py
tests/errors_test.py
==================
0b766b27;George Necula;2021-07-29 16:07:13 +0300;[jax2tf] Improved testing and shape polymorphism support for lax.random.

==

jax/_src/random.py
jax/experimental/jax2tf/tests/jax2tf_limitations.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
jax/experimental/jax2tf/tests/shape_poly_test.py
==================
c4602475;jax authors;2021-07-29 05:23:48 -0700;Merge pull request #7403 from gnecula:tf_random
PiperOrigin-RevId: 387562021

==
==================
881daa5c;George Necula;2021-07-29 13:16:06 +0300;[jax2tf] Handle truediv div for shape polymorphism

==

jax/experimental/jax2tf/shape_poly.py
jax/experimental/jax2tf/tests/shape_poly_test.py
==================
260e23d5;jax authors;2021-07-29 02:45:49 -0700;Merge pull request #7402 from gnecula:tf_integration
PiperOrigin-RevId: 387543653

==
==================
3d85709e;George Necula;2021-07-28 19:30:44 +0300;[jax2tf] Test code refactoring

==

jax/experimental/jax2tf/call_tf.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/call_tf_test.py
jax/experimental/jax2tf/tests/savedmodel_test.py
jax/experimental/jax2tf/tests/shape_poly_test.py
jax/experimental/jax2tf/tests/tf_test_util.py
==================
8a18fdb8;jax authors;2021-07-29 01:46:40 -0700;Merge pull request #7395 from LenaMartens:changelist/382262513
PiperOrigin-RevId: 387536518

==
==================
1a994297;yashkatariya;2021-07-28 19:38:58 -0700;Check for length of warning too

==

tests/xla_bridge_test.py
==================
ee7759f9;yashkatariya;2021-07-28 18:56:22 -0700;Fix xla_bridge_test.py

==

tests/xla_bridge_test.py
==================
cdfc2dc8;yashkatariya;2021-07-28 18:28:37 -0700;Use warnings instead of absl.logging.warning

==

jax/lib/xla_bridge.py
==================
02b87630;yashkatariya;2021-07-28 15:27:52 -0700;Fix lint errors

==

tests/xla_bridge_test.py
==================
bf28b884;yashkatariya;2021-07-28 15:22:42 -0700;Log a warning after 60 secs to remind the user to run code on all hosts for Cloud TPU 1VM

==

jax/lib/xla_bridge.py
tests/xla_bridge_test.py
==================
49f7ac22;Sharad Vikram;2021-07-07 11:03:59 -0700;change while loop batching fixed point condition
Co-authored-by: Sharad Vikram <sharad.vikram@gmail.com>
Co-authored-by: Adam Paszke <apaszke@google.com>

==

jax/_src/lax/control_flow.py
jax/interpreters/batching.py
==================
f966e7ef;lenamartens;2021-07-28 13:02:06 +0100;Fix some of the formatting and reword some of the sections.

==

jax/_src/errors.py
==================
28d9e923;jax authors;2021-07-28 05:18:01 -0700;Merge pull request #7381 from shawwn:patch-3
PiperOrigin-RevId: 387325436

==
==================
b2c6a4ad;jax authors;2021-07-28 04:16:58 -0700;Merge pull request #7394 from gnecula:fix_float0
PiperOrigin-RevId: 387317216

==
==================
201cca8c;Lena Martens;2021-07-28 11:55:32 +0100;Apply suggestions from code review
Co-authored-by: Roy Frostig <froystig@users.noreply.github.com>
==

jax/_src/errors.py
==================
c73c0ad6;George Necula;2021-07-27 15:50:47 +0300;[jax2tf] Refactored the handling of float0.
JAX and TF have different ways of dealing with tangents and co-tangents for
exact types. JAX uses float0 values. TF sometimes uses None, sometines
integer (or boolean) zeros. In the JAX VJP function we convert the
None's to zeros. On exit from the VJP function we convert the float0
to zeros.

==

jax/experimental/jax2tf/README.md
jax/experimental/jax2tf/call_tf.py
jax/experimental/jax2tf/examples/serving/model_server_request.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/jax2tf_test.py
jax/experimental/jax2tf/tests/shape_poly_test.py
jax/experimental/jax2tf/tests/tf_test_util.py
==================
19ee7b22;Lena Martens;2021-06-30 10:46:37 +0100;Expose UnexpectedTracerError and add docs.

==

docs/errors.rst
jax/_src/custom_derivatives.py
jax/_src/errors.py
jax/core.py
jax/errors.py
jax/experimental/loops.py
jax/interpreters/xla.py
tests/api_test.py
tests/lax_control_flow_test.py
==================
e7f03073;Ningning Xie;2021-07-27 11:12:51 -0700;ReduceScatter translation and abstract eval.
PiperOrigin-RevId: 387152857

==

jax/_src/lax/parallel.py
jax/experimental/jax2tf/jax2tf.py
jax/lax/__init__.py
tests/pmap_test.py
==================
717540d5;jax authors;2021-07-27 09:16:53 -0700;Merge pull request #7387 from gnecula:tf_error
PiperOrigin-RevId: 387124591

==
==================
fd1b13cc;George Necula;2021-07-26 17:48:21 +0300;[jax2tf] Improve the error message when forgetting polymorphic_shapes
Also replaced "shape variable" with "dimension variable" in error
message and documentation.

Fixes: #7213

==

jax/experimental/jax2tf/README.md
jax/experimental/jax2tf/shape_poly.py
jax/experimental/jax2tf/tests/shape_poly_test.py
==================
f7009ed1;jax authors;2021-07-27 01:21:12 -0700;Merge pull request #7317 from gnecula:getitem_poly
PiperOrigin-RevId: 387053046

==
==================
b62ceba9;George Necula;2021-07-16 20:01:22 +0300;[jax2tf] Expand shape polymorphism support to use dimension polynomials as values.
The goal of this change is to support shape polymorphism for operations
such as average (which needs to divide by the size of a dimension) or
indexing (which needs to normalize indices by comparing them with 0 and
adding dimension size for negative indices). In both of these cases
the size of a dimenion needs to be used as a value in the array
computation. In general, the size of a dimension is used only to
customize primitives.

This change introduces `core.dim_as_value` which must be used on
a dimension size before using it as a value in the array computation.
E.g.,

```
def average(x):
   return jnp.sum(x, axis=0) / core.dim_as_value(x.shape[0])
```

This function is the identity function if the dimension size is
constant, otherwise it uses a new primitive `shape_poly.dim_as_value_p`.

Note that this does not change fundamentally the flavor of shape
polymorphism supported in jax2tf: intermediate shapes and their values
may depend on the input shapes, but never does a shape depend on the
input values. In fact, one could have expressed the `dim_as_value`
already:

```
def dim_as_value(d):
   jnp.sum(jnp.broadcast_to(jnp.array(1), shape=(d,)))
```

We were able to suppot `jnp.mean`, `jnp.average`, `jnp.take`,
`lax.dynamic_slice`, `lax.dynamic_update_slice` by using
`core.dim_as_value` internally, but to fully roll-up the solution
we need to make `core.dim_as_value` a public API and teach the
users how to use it when they want to use shape polymorphism.
Alternatively, perhaps there is a way to automatically convert
dimension polynomials to values when passed to the lax primitives.

==

CHANGELOG.md
jax/_src/lax/lax.py
jax/_src/numpy/lax_numpy.py
jax/core.py
jax/experimental/jax2tf/__init__.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/shape_poly.py
jax/experimental/jax2tf/tests/shape_poly_test.py
jax/experimental/jax2tf/tests/tf_test_util.py
==================
87f72ac4;jax authors;2021-07-26 23:00:55 -0700;Merge pull request #7369 from google:closure-convert-less
PiperOrigin-RevId: 387035028

==
==================
52f0cbe3;Roy Frostig;2021-07-23 17:32:57 -0700;improve and add to closure_convert testing
* Test closure conversion with mixed values in the closure, one
  participating in AD and the other not.
* Simplify the basic closure_convert test and give its intermediates
  more descriptive names.

==

tests/api_test.py
==================
258ae443;Roy Frostig;2021-07-22 15:38:16 -0700;refine constant-hoisting heuristic for closure_convert
Instead of hoisting all float-type arrays during closure conversion,
only hoist JVPTracers (or tracers carrying such tracers
indirectly). Doing so better approximates the subset of
closure-captured values that participate in AD.

Co-authored-by: Matthew Johnson <mattjj@google.com>

==

jax/_src/custom_derivatives.py
jax/core.py
==================
d1e1d656;jax authors;2021-07-26 12:08:54 -0700;Merge pull request #7102 from gnecula:ad_staged_zeros
PiperOrigin-RevId: 386929170

==
==================
4a3e8e99;George Necula;2021-07-25 16:07:33 +0300;Fix for numpy 1.17.5

==

jax/_src/lax/lax.py
jax/experimental/jax2tf/tests/shape_poly_test.py
==================
2749b635;George Necula;2021-06-25 08:43:04 +0200;Ensure zeros from AD are generated on device.
Fixes: #7093
Also fixes type checking in jax2tf, because now we have to be careful
about computations that have result float0 (the broadcast_in_dim used
to compute the zeros).

==

jax/_src/abstract_arrays.py
jax/_src/lax/lax.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/shape_poly_test.py
tests/host_callback_test.py
==================
3f764d57;jax authors;2021-07-26 07:54:17 -0700;Merge pull request #7297 from gnecula:call_tf
PiperOrigin-RevId: 386872710

==
==================
7638ad04;George Necula;2021-07-25 20:06:36 +0300;Fixed the safety check for call_tf
The previous check was failing on TPUs due to different layout

==

jax/experimental/jax2tf/call_tf.py
jax/experimental/jax2tf/tests/call_tf_test.py
==================
890a41f7;jax authors;2021-07-26 04:56:30 -0700;Merge pull request #7378 from gnecula:hcb_grad_int
PiperOrigin-RevId: 386846011

==
==================
0b697ce2;George Necula;2021-07-25 14:50:54 +0300;[host_callback] Fix the JVP rule for id_tap(result=...)
The previous rule was leaking ad.Zero.

==

jax/experimental/host_callback.py
tests/host_callback_test.py
==================
e242fe4f;jax authors;2021-07-26 01:36:12 -0700;Merge pull request #7375 from gnecula:tf_tridiagonal
PiperOrigin-RevId: 386821073

==
==================
e4c4861c;jax authors;2021-07-26 01:29:24 -0700;Merge pull request #7376 from gnecula:bug_7123
PiperOrigin-RevId: 386820331

==
==================
ea5959cd;George Necula;2021-07-25 18:09:08 +0300;Force the TF compilation to use JAX's default platform

==

jax/experimental/jax2tf/call_tf.py
==================
f8000295;Shawn Presser;2021-07-25 09:40:24 -0500;Fix broken links in README.md

==

README.md
==================
458d66fc;George Necula;2021-07-16 13:16:21 +0300;Added a suggestion for safer check for captured inputs

==

jax/experimental/jax2tf/call_tf.py
jax/experimental/jax2tf/tests/call_tf_test.py
==================
ab050059;George Necula;2021-07-16 08:16:09 +0300;Ensure that we run the test on the proper TF device

==

jax/experimental/jax2tf/call_tf.py
jax/experimental/jax2tf/tests/call_tf_test.py
==================
a9661575;George Necula;2021-07-10 18:49:25 +0300;[jax2tf] Improved error checking for call_tf.
Cleaned up the abstract evaluation for call_tf to
work around a bug in TF whereby experimental_get_compiler_ir
cannot be used in a tf.function context.

Added more error messages, e.g., for the case when
the TF function has shape-influencing inputs.

==

jax/experimental/jax2tf/README.md
jax/experimental/jax2tf/call_tf.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/call_tf_test.py
jax/experimental/jax2tf/tests/savedmodel_test.py
jax/experimental/jax2tf/tests/shape_poly_test.py
jax/experimental/jax2tf/tests/tf_test_util.py
==================
00872d58;George Necula;2021-07-25 10:13:13 +0300;[jax2tf] Added test for round trip for custom gradients
Fixes: 7123

The fix is not here, it is in TF. Here we only add the test.

==

jax/experimental/jax2tf/tests/savedmodel_test.py
==================
f29f5214;George Necula;2021-07-25 09:44:40 +0300;[jax2tf] Add support for tridiagonal_solve

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/jax2tf_limitations.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
jax/experimental/jax2tf/tests/shape_poly_test.py
==================
9eadb07b;slowy07;2021-07-24 15:25:13 +0700;fix: miss typo codespell and documentation

==

examples/control.py
jax/_src/lax/lax.py
jax/_src/lax/parallel.py
jax/_src/numpy/lax_numpy.py
jax/_src/scipy/eigh.py
jax/experimental/jax2tf/README.md
jax/experimental/jax2tf/examples/serving/model_server_request.py
jax/experimental/jax2tf/examples/tflite/mnist/mnist.py
jax/experimental/jax2tf/g3doc/primitives_with_limited_support.md
jax/experimental/jax2tf/jax2tf.py
tests/lax_numpy_test.py
tests/pmap_test.py
==================
36d06dbb;jax authors;2021-07-24 01:09:44 -0700;Merge pull request #7362 from tomhennigan:changelist/386431938
PiperOrigin-RevId: 386604252

==
==================
1db53b11;jax authors;2021-07-23 09:05:31 -0700;Merge pull request #7365 from hawkinsp:ppc
PiperOrigin-RevId: 386465641

==
==================
e1edcd88;jax authors;2021-07-23 09:01:44 -0700;Merge pull request #7354 from google:autodidax
PiperOrigin-RevId: 386465615

==
==================
6c087024;Peter Hawkins;2021-07-23 10:39:02 -0400;Add support for ppc64le cross-compilation on Linux.
Use Bazel 4.1.0 unconditionally on all platforms.

==

.bazelversion
build/build.py
build/build_wheel.py
==================
2994d2f9;Tom Hennigan;2021-07-23 12:07:14 +0000;Add pure JAX implementation of tridiagonal_solve for non-GPU platforms.

==

jax/_src/lax/linalg.py
tests/linalg_test.py
==================
22d01656;jax authors;2021-07-23 03:16:45 -0700;Merge pull request #7356 from gnecula:jax2tf_polyshape
PiperOrigin-RevId: 386420068

==
==================
24b00e85;George Necula;2021-07-23 10:59:44 +0300;[jax2tf] Adjustments for the polymorphic_shapes specification.
Expanded the polymorphic_shapes specification to detect when
it is a string or PolyShape, and then replicate it for all
arguments.

Some improvements for the error messages for incorrect
polymorphic shapes specification.

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/shape_poly.py
jax/experimental/jax2tf/tests/shape_poly_test.py
==================
fa274f3a;Matthew Johnson;2021-07-22 21:09:58 -0700;small tweaks, type annotations

==

docs/autodidax.ipynb
docs/autodidax.md
docs/autodidax.py
==================
278ff13b;Peter Hawkins;2021-07-22 14:00:52 -0700;Improve implementation of cbrt() in JAX.
Lower to XLA cbrt() operator in sufficiently new jaxlibs.
On TPU, use a Newton-Raphson step to improve the cube root.

Remove support for complex cbrt() in jax.numpy; the existing lowering was wrong and it is not entirely clear to me that we actually want to support complex `jnp.cbrt()`. NumPy itself does not support complex numbers in this case.

Add testing for `sqrt`/`rsqrt` for more types.

[XLA:Python] Add cbrt to XLA:Python bindings.

PiperOrigin-RevId: 386316949

==

docs/jax.lax.rst
jax/_src/lax/lax.py
jax/_src/lax_reference.py
jax/_src/numpy/lax_numpy.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/jax2tf_limitations.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/lax/__init__.py
tests/lax_autodiff_test.py
tests/lax_test.py
==================
63357689;jax authors;2021-07-22 09:40:43 -0700;Merge pull request #7191 from inailuig:linear_transpose_partial
PiperOrigin-RevId: 386259543

==
==================
024b1bb1;jax authors;2021-07-22 09:20:37 -0700;Merge pull request #7341 from PSilvestre:patch-1
PiperOrigin-RevId: 386254840

==
==================
08eb89ec;jax authors;2021-07-22 09:16:57 -0700;Merge pull request #7350 from google:jflynn
PiperOrigin-RevId: 386254653

==
==================
fe35680d;jax authors;2021-07-21 21:23:25 -0700;Merge pull request #7347 from zafarali:main
PiperOrigin-RevId: 386158438

==
==================
fd5dec7b;Matthew Johnson;2021-07-21 21:14:40 -0700;fix xla.lower_fun axis env issue

==

jax/interpreters/xla.py
tests/api_test.py
==================
fba32c32;jax authors;2021-07-21 16:16:08 -0700;Merge pull request #7349 from colemanliyah:cache_size_change
PiperOrigin-RevId: 386117870

==
==================
86985fd4;colemanliyah;2021-07-21 22:22:40 +0000;add parameter to initalize_cache function and added __init__ file

==

jax/experimental/compilation_cache/__init__.py
jax/experimental/compilation_cache/compilation_cache.py
==================
93a20eeb;jax authors;2021-07-21 14:50:56 -0700;Merge pull request #7346 from skye:version
PiperOrigin-RevId: 386101054

==
==================
231b8cbc;zafarali;2021-07-21 17:13:40 -0400;Explicitly set array to be unhashable.

==

jax/interpreters/xla.py
==================
00a273d1;zafarali;2021-07-21 16:12:52 -0400;Add assert raises check.

==

tests/api_test.py
==================
8143773b;zafarali;2021-07-21 15:04:54 -0400;Remove unnecessary message

==

tests/api_test.py
==================
a7916f14;Skye Wanderman-Milne;2021-07-21 11:56:24 -0700;Bump jax version and CHANGELOG to 0.2.18

==

CHANGELOG.md
jax/version.py
==================
215e7d61;zafarali;2021-07-21 14:50:10 -0400;Make jax arrays not pass isinstance checks for hashable.

==

jax/interpreters/xla.py
tests/api_test.py
==================
8662c5f6;jax authors;2021-07-21 10:27:17 -0700;Merge pull request #7337 from colemanliyah:xmap_and_pjit
PiperOrigin-RevId: 386040712

==
==================
a830dc9d;jax authors;2021-07-21 10:08:06 -0700;Merge pull request #7343 from LenaMartens:changelist/385967547
PiperOrigin-RevId: 386036421

==
==================
24c9a933;Lena Martens;2021-07-21 10:29:46 +0100;Add shape and dtype of leaked tracer to UnexpectedTracerError.

==

jax/core.py
tests/api_test.py
==================
5cf31667;Clemens Giuliani;2021-07-21 15:31:09 +0200;Test that the results of vjp, linarize and linear_transpose are jit compatible

==

tests/api_test.py
==================
26eef81b;Clemens Giuliani;2021-07-05 11:27:23 +0200;turn transposed_fun into a PyTree

==

jax/_src/api.py
==================
c91b58d0;Pedro Silvestre;2021-07-21 04:06:00 +0100;Improve wording for multi-process docs
Currently, there is no direct implication that device-to-device links are a requirement.
Though it is a very small change, it would have saved me a couple of hours in trying to leverage NCCL's ability to create rings over ethernet to run JAX.
I'm sure others will also appreciate this.
==

docs/multi_process.md
==================
65c6a6a6;colemanliyah;2021-07-20 16:16:21 +0000;xmap and pjit integration

==

jax/interpreters/pxla.py
tests/compilation_cache_test.py
==================
b884cb4c;jax authors;2021-07-20 11:07:31 -0700;Merge pull request #7338 from hawkinsp:qdwh
PiperOrigin-RevId: 385827262

==
==================
0dfd76af;Peter Hawkins;2021-07-20 13:12:13 -0400;Remove additional info return value from jax.scipy.linalg.polar().

==

CHANGELOG.md
jax/_src/scipy/eigh.py
jax/_src/scipy/linalg.py
jax/scipy/linalg.py
tests/lax_scipy_test.py
==================
c95ef879;jax authors;2021-07-20 08:54:16 -0700;Merge pull request #7335 from hawkinsp:qdwh
PiperOrigin-RevId: 385796794

==
==================
a2073ffc;Adam Lewis;2021-07-20 11:28:53 -0400;Adds an implementation of a QR-based Dynamically Weighted Halley iteration.

==

jax/_src/lax/polar.py
jax/_src/scipy/eigh.py
jax/scipy/linalg.py
tests/lax_scipy_test.py
==================
8f0ccb4e;jax authors;2021-07-19 23:37:25 -0700;Merge pull request #7304 from j-towns:patch-3
PiperOrigin-RevId: 385720404

==
==================
63a152e7;jax authors;2021-07-19 16:07:34 -0700;Merge pull request #7331 from colemanliyah:fix_teardown
PiperOrigin-RevId: 385661922

==
==================
9398dd93;jax authors;2021-07-19 16:00:33 -0700;Merge pull request #7330 from colemanliyah:jit_integration
PiperOrigin-RevId: 385660510

==
==================
2eaadd86;colemanliyah;2021-07-19 19:10:16 +0000;jit integration with persistent compilation cache

==

jax/interpreters/pxla.py
jax/interpreters/xla.py
tests/compilation_cache_test.py
==================
711c3130;colemanliyah;2021-07-19 21:53:27 +0000;added tearDown() method to test class

==

tests/compilation_cache_test.py
==================
29187a33;jax authors;2021-07-19 09:01:05 -0700;Merge pull request #7315 from ROCmSoftwarePlatform:fix_pr_7306_rocm
PiperOrigin-RevId: 385566677

==
==================
21720373;jax authors;2021-07-19 08:43:06 -0700;Merge pull request #7319 from cloudhan:win-fix
PiperOrigin-RevId: 385562849

==
==================
d25f4b34;Adam Paszke;2021-07-19 08:38:58 -0700;Add an option to strictly enforce sharding implies by named axes
At the moment, xmap SPMD lowering only enforces sharding constraints for
computation inputs and outputs, while leaving sharding propagation in the
body entirely up to the XLA SPMD partitioner. This patch adds a new flag
`experimental_xmap_enforce_inferred_sharding` that inserts additional
sharding constraint between every JAX primitive in the xmapped function.
Assuming that the SPMD partitioner never overrides user-defined constraints,
this should restrict it sufficiently to generate a computation that is
partitioned exactly as implied by the evolution of intermediate named shapes.

PiperOrigin-RevId: 385562158

==

jax/core.py
jax/experimental/maps.py
jax/experimental/pjit.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
tests/xmap_test.py
==================
277f250f;jax authors;2021-07-19 08:14:11 -0700;Merge pull request #7325 from hawkinsp:views
PiperOrigin-RevId: 385557244

==
==================
5893b920;Peter Hawkins;2021-07-19 09:49:37 -0400;Clarify documentation about array views.

==

jax/_src/numpy/lax_numpy.py
==================
2ba686ca;jax authors;2021-07-19 02:37:43 -0700;Merge pull request #7295 from apaszke:xmap-ad
PiperOrigin-RevId: 385510420

==
==================
ef2c2d9d;jax authors;2021-07-19 02:12:04 -0700;Merge pull request #7320 from gnecula:shape_poly_error
PiperOrigin-RevId: 385507043

==
==================
0693c316;George Necula;2021-07-18 19:03:59 +0300;[jax2tf] Improved error checking for inconsistent use of a dimension variable
Previously the check was done only for multiple occurrences of a shape
variable in one argument. Now we check across all arguments.

==

jax/experimental/jax2tf/README.md
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/shape_poly.py
jax/experimental/jax2tf/tests/shape_poly_test.py
==================
a2168360;George Necula;2021-07-19 00:17:38 -0700;[host_callback] Increase number of threads for callback processing.
Previously there was one thread per device for receiving the outfeed from
devices, but there was a single global thread that was calling into the Python
callbacks. This meant that if one of the callbacks was slow, it was blocking
processing of all other callbacks.

One situation when this created difficulties was if one wanted to break a host_callback into two operations: a quick one to enqueue work on a threadpool,
and a subsequent slow one to wait for and retreive the result. The first slow callback would block all other callbacks, including possibly some quick ones, thus missing the opportunity to start the slow work.

With this change there is a separate queue of outfeeds for each device and a
separate thread per device to call into Python. This allows for concurrency
between callbacks from different devices, although the callbacks from one
device are still sequential. If the programmer wants more concurrency, they can use a threadpool. Having more concurrency by default is tricky, because it may mean that the Python callbacks for one device may be seen out of order.

PiperOrigin-RevId: 385493070

==

CHANGELOG.md
jax/experimental/host_callback.py
==================
58522fd8;George Necula;2021-07-19 00:11:40 -0700;Change tfxla.variadic_reduce to point to XlaVariadicReduceV2.
PiperOrigin-RevId: 385492367

==

jax/experimental/jax2tf/jax2tf.py
==================
0d069be5;jax authors;2021-07-18 14:00:45 -0700;Merge pull request #7321 from gnecula:fix_rtd
PiperOrigin-RevId: 385443835

==
==================
117d0d23;George Necula;2021-07-18 19:35:14 +0300;Attempt to fix RTD build
It seems that the failure is for transformations.md

==

docs/conf.py
docs/index.rst
==================
6d84e027;Cloud Han;2021-07-18 23:01:08 +0800;workaround compiling issue on Windows when cuda version < 11.0

==

jaxlib/cusparse.cc
==================
2d321c26;Cloud Han;2021-07-18 22:55:34 +0800;Use TF_CUDA_PATHS
CUDA_TOOLKIT_PATH and CUDNN_INSTALL_PATH are deprecated, see TF 2.0
release notes for more information

==

build/build.py
==================
4fa79ce1;Cloud Han;2021-07-18 22:55:02 +0800;fix machine tag, on windows platforms.machine() returns AMD64 instread of x64_64

==

build/build_wheel.py
==================
ee08acd0;Reza Rahimi;2021-07-17 08:04:56 +0000;update rocblas because of PR-7306

==

jaxlib/rocblas.cc
==================
76bd9e17;jax authors;2021-07-16 14:48:16 -0700;Merge pull request #7277 from colemanliyah:pmap_integration
PiperOrigin-RevId: 385228055

==
==================
f4a475f5;jax authors;2021-07-16 10:48:05 -0700;Merge pull request #7309 from gnecula:einsum_poly
PiperOrigin-RevId: 385178868

==
==================
41d46b2a;George Necula;2021-07-16 16:52:15 +0300;[jax2tf] Expand the handling of shape-polymorphic einsum.
einsum supports an API where the arrays are interleaved with list
of indices.

==

jax/experimental/jax2tf/shape_poly.py
jax/experimental/jax2tf/tests/shape_poly_test.py
==================
262b10ee;Liyah Coleman;2021-07-08 16:11:39 +0000;pmap integration

==

jax/experimental/compilation_cache/compilation_cache.py
jax/interpreters/pxla.py
tests/compilation_cache_test.py
==================
a37fbe80;jax authors;2021-07-16 10:22:04 -0700;Merge pull request #7310 from gnecula:random_gamma_poly
PiperOrigin-RevId: 385173297

==
==================
7bd5fe54;jax authors;2021-07-16 10:08:32 -0700;Merge pull request #7307 from cloudhan:missing_lib
PiperOrigin-RevId: 385170297

==
==================
bd77a61d;George Necula;2021-07-16 17:23:34 +0300;[jax2tf] Fix the shape polymorphism for batched while, and random_gamma.

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/shape_poly_test.py
==================
1044401e;jax authors;2021-07-16 10:03:42 -0700;Merge pull request #7306 from tomhennigan:changelist/385115540
PiperOrigin-RevId: 385169180

==
==================
8dc2de55;jax authors;2021-07-16 05:20:30 -0700;Merge pull request #7273 from tomhennigan:changelist/384520796
PiperOrigin-RevId: 385126655

==
==================
cf7298d2;Cloud Han;2021-07-16 19:55:55 +0800;cusparseGetErrorString is external symbol, without cusparse_lib as dependency, linker error

==

jaxlib/BUILD
==================
afbd831e;Tom Hennigan;2021-07-16 10:57:00 +0000;Avoid sharing handles across streams.
When running across 8xV100 GPUs we observed the following error:

    libc++abi: terminating with uncaught exception of type std::runtime_error: third_party/py/jax/jaxlib/cusolver.cc:171: operation cusolverDnSpotrf(handle.get(), d.uplo, d.n, a, d.n, static_cast<float*>(workspace), d.lwork, info) failed: cuSolver execution failed

I cannot find documentation to this effect, but I believe that it is unsafe to share cuSolver handles across streams, since keeping the handle pool stream local does solve the issue.

==

jaxlib/cublas.cc
jaxlib/cusolver.cc
jaxlib/cusparse.cc
jaxlib/handle_pool.h
jaxlib/rocblas.cc
==================
6ca775b1;Jamie Townsend;2021-07-16 12:24:19 +0200;Add TPU precision details to README gotchas

==

README.md
==================
b744a84f;jax authors;2021-07-15 22:09:18 -0700;Merge pull request #7298 from LenaMartens:patch-4
PiperOrigin-RevId: 385075125

==
==================
1d390ae7;jax authors;2021-07-15 14:48:41 -0700;Merge pull request #7299 from hawkinsp:jaxlib
PiperOrigin-RevId: 385014189

==
==================
a91ad579;jax authors;2021-07-15 14:30:29 -0700;Merge pull request #7300 from VivekThazhathattil:fix-small-typo-in-docs
PiperOrigin-RevId: 385010028

==
==================
61949b6f;Vivek Thazhathattil;2021-07-16 02:48:45 +0530;fix small typo in docs/developer.md

==

docs/developer.md
==================
3ddcec27;Peter Hawkins;2021-07-15 16:39:18 -0400;Update minimum jaxlib version to 0.1.69.

==

CHANGELOG.md
build/test-requirements.txt
docs/requirements.txt
jax/_src/api.py
jax/_src/dlpack.py
jax/_src/lax/lax.py
jax/_src/scipy/linalg.py
jax/_src/source_info_util.py
jax/_src/traceback_util.py
jax/experimental/sparse/ops.py
jax/interpreters/xla.py
jax/lib/__init__.py
jax/lib/xla_bridge.py
jax/version.py
tests/api_test.py
tests/array_interoperability_test.py
tests/compilation_cache_test.py
tests/errors_test.py
tests/lax_scipy_sparse_test.py
tests/lax_test.py
tests/linalg_test.py
tests/profiler_test.py
tests/tree_util_test.py
tests/xla_interpreter_test.py
==================
6aa20d8f;jax authors;2021-07-15 13:19:23 -0700;Merge pull request #7294 from hawkinsp:py36
PiperOrigin-RevId: 384994957

==
==================
e951ac85;jax authors;2021-07-15 13:12:38 -0700;Merge pull request #7296 from apaszke:xmap-flag
PiperOrigin-RevId: 384993575

==
==================
94446ff7;Peter Hawkins;2021-07-15 09:50:30 -0400;Drop Python 3.6 support.
Per the deprecation policy (https://jax.readthedocs.io/en/latest/deprecation.html),
Python 3.6 support has been due for removal since June 23, 2020.

==

.github/workflows/ci-build.yaml
CHANGELOG.md
build/build.py
build/build_jaxlib_wheels.sh
build/build_jaxlib_wheels_macos.sh
jaxlib/setup.py
setup.py
tests/scipy_optimize_test.py
==================
fcce9c33;Lena Martens;2021-07-15 19:11:01 +0100;Unwrap function fully before getting debug_info
A small bug which surfaces in error messages: if a function has been `functools.wrapped`, some error messages (eg. UnexpectedTracerError) will point to the name of the wrapped function but to the filename of the wrapping function (because `functools.wrapped` does not update the code object of the function, but it _does_ update the name of the function).
==

jax/interpreters/partial_eval.py
==================
afa0d572;Tom Hennigan;2021-07-13 19:11:22 +0000;Compute gtsv2 buffer size ahead of time and pass in to kernel.
A user reported that with their Quadro M4000 GPU (Driver: 460.56) tridiagonal_solve was throwing an "unsupported operation" error. I improved the logging (also included in this patch) and tracked it down to:

jax._src.traceback_util.UnfilteredStackTrace: RuntimeError: third_party/py/jax/jaxlib/cusparse.cc:902: CUDA operation cudaMallocAsync(&buffer, bufferSize, stream) failed: operation not supported

I had some challenges trying to figure out when async malloc was supported (it seems that for cards with compute <6 it fails) but have found an alternative approach where we compute the buffer size ahead of time and ask XLA to allocate. This is preferred for sure (although requires passing null pointers into cusparseSgtsv2_bufferSizeExt which seems to work today but I guess might change in future cuSPARSE releases).

==

jaxlib/cusparse.cc
jaxlib/cusparse.py
==================
efd37e90;jax authors;2021-07-15 09:04:41 -0700;Merge pull request #7280 from tomhennigan:changelist/384668789
PiperOrigin-RevId: 384938599

==
==================
d6e56f2d;Tom Hennigan;2021-07-14 11:24:44 +0000;Add source location and expression to error messages for CUDA API calls.
Before:

    jax._src.traceback_util.UnfilteredStackTrace: RuntimeError: operation not supported

After:

    jax._src.traceback_util.UnfilteredStackTrace: RuntimeError: third_party/py/jax/jaxlib/cusparse.cc:902: CUDA operation cudaMallocAsync(&buffer, bufferSize, stream) failed: operation not supported

==

jaxlib/BUILD
jaxlib/cublas.cc
jaxlib/cuda_gpu_kernel_helpers.cc
jaxlib/cuda_gpu_kernel_helpers.h
jaxlib/cuda_lu_pivot_kernels.cu.cc
jaxlib/cuda_prng_kernels.cu.cc
jaxlib/cusolver.cc
jaxlib/cusparse.cc
==================
ccfc6f62;jax authors;2021-07-15 08:22:52 -0700;Merge pull request #7254 from hawkinsp:crosscompile
PiperOrigin-RevId: 384930242

==
==================
f5c61a89;Peter Hawkins;2021-07-12 16:33:12 -0400;Add support for cross-compiling jaxlib for Mac ARM.

==

build/build.py
build/build_wheel.py
==================
e987f6f9;Adam Paszke;2021-07-15 03:37:04 -0700;Make maps.EXPERIMENTAL_SPMD_LOWERING into a jax.config flag
This is much more convenient and lets us register callbacks that trigger on
changes. I want to add more toggles (e.g. for the SPMD lowering that restricts
sharding of every intermediate), so I want to work out a reasonable approach to
do that first.

Second attempt, this time without hardening against the flags being
registered too late due to delayed imports.

==

jax/experimental/maps.py
jax/test_util.py
tests/xmap_test.py
==================
478828a2;Adam Paszke;2021-07-15 13:10:05 +0000;Add support for reverse-mode AD of xmap

==

jax/experimental/maps.py
tests/xmap_test.py
==================
25e44821;jax authors;2021-07-15 05:06:27 -0700;Make maps.EXPERIMENTAL_SPMD_LOWERING into a jax.config flag
This is much more convenient and lets us register callbacks that trigger on
changes. I want to add more toggles (e.g. for the SPMD lowering that restricts
sharding of every intermediate), so I want to work out a reasonable approach to
do that first.

PiperOrigin-RevId: 384902895

==

jax/_src/config.py
jax/experimental/maps.py
jax/test_util.py
tests/xmap_test.py
==================
64510bd5;Adam Paszke;2021-07-15 04:22:08 -0700;Add `axis` and `tiled` options to `lax.all_gather`.
This is especially convenient when using JAX as an HLO generator, because the
HLO AllGather defaults to the tiling behavior.

PiperOrigin-RevId: 384897270

==

jax/_src/lax/parallel.py
tests/pmap_test.py
==================
8bc6e7f1;Adam Paszke;2021-07-15 03:37:04 -0700;Make maps.EXPERIMENTAL_SPMD_LOWERING into a jax.config flag
This is much more convenient and lets us register callbacks that trigger on
changes. I want to add more toggles (e.g. for the SPMD lowering that restricts
sharding of every intermediate), so I want to work out a reasonable approach to
do that first.

PiperOrigin-RevId: 384892199

==

jax/_src/config.py
jax/experimental/maps.py
jax/test_util.py
tests/xmap_test.py
==================
4d026e06;jax authors;2021-07-15 03:12:07 -0700;Merge pull request #7255 from jakevdp:remove-broadcast-p
PiperOrigin-RevId: 384888218

==
==================
b9aaff48;jax authors;2021-07-14 11:25:37 -0700;Parse absl flags in compilation_cache_test.py
PiperOrigin-RevId: 384744462

==

tests/compilation_cache_test.py
==================
2621b4b6;jax authors;2021-07-14 08:43:54 -0700;Merge pull request #7281 from apaszke:mapped-error-msg
PiperOrigin-RevId: 384707157

==
==================
4c6a0624;jax authors;2021-07-14 06:41:19 -0700;Merge pull request #7272 from jakevdp:jnp-rank-promotion
PiperOrigin-RevId: 384686748

==
==================
1049e720;Adam Paszke;2021-07-14 06:24:48 -0700;Implement vmap rules for with_sharding_constraint
pjit already supports batching, so there's no need to hold off on that.

PiperOrigin-RevId: 384684263

==

jax/experimental/pjit.py
tests/pjit_test.py
==================
1c1ec79e;Adam Paszke;2021-07-14 11:39:52 +0000;Clarify the error message for out-of-bounds in_axes in pmap and vmap
Fixes #5201.

==

jax/_src/api.py
tests/api_test.py
tests/batching_test.py
==================
79c8259e;George Necula;2021-07-13 23:03:49 -0700;Add shape inference rule for XlaDynamicSlice
PiperOrigin-RevId: 384628638

==

jax/experimental/jax2tf/jax2tf.py
==================
5488cf00;jax authors;2021-07-13 15:56:44 -0700;Merge pull request #7275 from jakevdp:sparse-xla-call
PiperOrigin-RevId: 384570089

==
==================
9907ae45;jax authors;2021-07-13 15:53:02 -0700;Merge pull request #7207 from colemanliyah:compilation_cache
PiperOrigin-RevId: 384569690

==
==================
1eb3b5f8;Jake VanderPlas;2021-07-13 15:23:14 -0700;[sparse] support sparse arguments in xla_call

==

jax/experimental/sparse/transform.py
tests/sparsify_test.py
==================
035c6d57;jax authors;2021-07-13 15:03:08 -0700;Merge pull request #7261 from skye:tpu_docker
PiperOrigin-RevId: 384559874

==
==================
052062f1;Liyah Coleman;2021-07-07 21:42:34 +0000;initialize_cache, get_executable, and put_executable functions

==

jax/experimental/compilation_cache/compilation_cache.py
tests/compilation_cache_test.py
==================
c64c5a61;jax authors;2021-07-13 14:28:57 -0700;Merge pull request #7268 from hawkinsp:platform
PiperOrigin-RevId: 384552186

==
==================
344d5218;jax authors;2021-07-13 14:17:33 -0700;Merge pull request #7267 from hawkinsp:nonccl
PiperOrigin-RevId: 384549897

==
==================
618ea255;jax authors;2021-07-13 13:53:15 -0700;Merge pull request #7274 from jakevdp:sparsify-xla-call
PiperOrigin-RevId: 384544540

==
==================
9af86763;Jake VanderPlas;2021-07-13 13:31:21 -0700;[sparse] support dense xla_call within sparsify jaxpr interpreter

==

jax/experimental/sparse/transform.py
tests/sparsify_test.py
==================
0ddcace9;Jake VanderPlas;2021-07-13 11:38:21 -0700;lax_numpy_test: disable implicit rank promotion by default

==

tests/lax_numpy_test.py
==================
d4c5abc5;jax authors;2021-07-13 10:26:35 -0700;Merge pull request #7253 from zhangqiaorjc:test_matrix_latest_jaxlib
PiperOrigin-RevId: 384494974

==
==================
a8193156;jax authors;2021-07-13 09:53:08 -0700;Merge pull request #7270 from jakevdp:fix-cpu-notebook
PiperOrigin-RevId: 384486998

==
==================
5a0a46cb;Jake VanderPlas;2021-07-13 09:30:56 -0700;Update colab CPU test notebook to be more robust

==

tests/notebooks/colab_cpu.ipynb
==================
f33ce0d8;Peter Hawkins;2021-07-13 09:24:48 -0400;Warn if importing jaxlib on Mac ARM machines.
We can remove this warning when Mac ARM has CI testing.

==

jax/lib/__init__.py
==================
7d2aec10;Peter Hawkins;2021-07-13 09:01:14 -0400;Add an option to disable NCCL.

==

build/build.py
==================
208dd1ac;jax authors;2021-07-13 05:48:51 -0700;Merge pull request #7252 from jakevdp:cov-rank-promotion
PiperOrigin-RevId: 384442693

==
==================
c6d61484;jax authors;2021-07-13 05:48:28 -0700;Merge pull request #7258 from jakevdp:fix-gamma
PiperOrigin-RevId: 384442646

==
==================
885fa23c;jax authors;2021-07-13 05:44:35 -0700;Merge pull request #7231 from jakevdp:pep-448
PiperOrigin-RevId: 384442628

==
==================
840781d2;jax authors;2021-07-13 03:01:24 -0700;Merge pull request #7263 from gnecula:shape_poly_dim
PiperOrigin-RevId: 384422182

==
==================
caba2ed9;George Necula;2021-07-13 10:39:38 +0300;[jax2tf] Support tf.compat.v1.Dimension when parsing polymorphic_shapes

==

jax/experimental/jax2tf/shape_poly.py
jax/experimental/jax2tf/tests/shape_poly_test.py
==================
b2fd6a77;Skye Wanderman-Milne;2021-07-12 16:57:45 -0700;Changes to make jax[tpu] work better in a docker container.
1. In cloud_tpu_init.py, check whether we're on a Cloud TPU VM by
   looking for the libtpu Python package, instead of /lib/libtpu.so
   (which isn't necessarily present in a docker container). JAX now
   relies on the libtpu package instead of the system libtpu.so, so
   this makes more sense either way. This means we'll try/catch an
   ImportError in all non-TPU environments when importing jax, which
   hopefully isn't noticeably slow.

2. Add requests as a jax[tpu] dependency, since it's needed by
   cloud_tpu_init.py. This comes pre-installed on Cloud TPU VMs, but
   may not be installed in docker containers, virtualenvs, etc.

I manually tested by creating the following Dockerfile on a Cloud TPU VM:
```
FROM ubuntu:18.04
RUN apt update && apt install git python3-pip -y
RUN git clone https://github.com/skye/jax && cd jax && git checkout tpu_docker
WORKDIR jax
RUN python3 -m pip install --upgrade pip
RUN python3 -m pip install .[tpu] -f https://storage.googleapis.com/jax-releases/libtpu_releases.html
CMD ["python3", "-c", "import jax; print(jax.device_count())"]
```

And then running the following commands:
```
$ sudo docker build -t jax-test .
$ sudo docker run --privileged jax-test
8
```

Note the `--privileged` flags is necessary to let the container access
the TPU devices in /dev.

==

jax/_src/cloud_tpu_init.py
setup.py
==================
05a13aa0;jax authors;2021-07-12 17:10:02 -0700;Merge pull request #7234 from jakevdp:sparse-while
PiperOrigin-RevId: 384350476

==
==================
5db97e0b;Jake VanderPlas;2021-07-12 16:53:24 -0700;[sparse] add sparse transform rule for lax.while_p

==

jax/experimental/sparse/transform.py
tests/sparsify_test.py
==================
c45acd70;Jake VanderPlas;2021-07-09 12:38:34 -0700;Cleanup: use pep 448 unpacking to simplify some code

==

jax/_src/lax/control_flow.py
jax/experimental/loops.py
==================
10569871;jax authors;2021-07-12 16:27:47 -0700;Merge pull request #7260 from skye:release_indexes
PiperOrigin-RevId: 384341784

==
==================
1a650d2e;Skye Wanderman-Milne;2021-06-29 22:22:58 -0700;Update generate_release_index[es].py to also produce libtpu_releases.html.
Previously, the libtpu-nightly wheels were included in the same index
file as the jaxlib wheels (jax_releases.html). This caused issues
because it would cause `pip install jax[tpu] -f jaxlib_releases.html`
to install a cuda jaxlib, instead of the regular CPU/TPU jaxlib from
pypi.

Instead, we create a separate index file for the libtpu-nightly
wheels, so `pip install jax[tpu] -f libtpu_releases.html` still uses
the jaxlib from pypi.

This also renames generate_release_index.py to generate_release_indexes.py.

==

build/generate_release_indexes.py
==================
12e435f7;Jake VanderPlas;2021-07-12 15:33:26 -0700;remove lax.broadcast_p
Why? It has been subsumed by lax.broadcast_in_dim_p

==

jax/_src/lax/lax.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/lax/__init__.py
==================
8a044c18;jax authors;2021-07-12 15:30:14 -0700;Merge pull request #7259 from zhangqiaorjc:repro_cpu_bugs
PiperOrigin-RevId: 384331007

==
==================
0216a317;Qiao Zhang;2021-07-12 13:33:44 -0700;Change test matrix to use latest jaxlib release.

==

.github/workflows/ci-build.yaml
==================
72b436f9;Qiao Zhang;2021-07-12 14:42:05 -0700;Add a test to repro bugs in TFRT CPU backend.

==

tests/api_test.py
==================
9e73972d;Jake VanderPlas;2021-07-12 14:43:44 -0700;Fix jax.scipy.stats.gamma.pdf() for x=0.0, a=1.0

==

jax/_src/scipy/stats/gamma.py
tests/scipy_stats_test.py
==================
3902515e;Jake VanderPlas;2021-07-12 13:24:02 -0700;Fix rank promotion error in jnp.cov

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
651ddb5a;jax authors;2021-07-12 13:30:07 -0700;Merge pull request #7250 from jakevdp:poly-rank-promotion
PiperOrigin-RevId: 384305144

==
==================
01cfb2cc;jax authors;2021-07-12 12:28:34 -0700;Merge pull request #7235 from zhangqiaorjc:rel_note
PiperOrigin-RevId: 384291251

==
==================
82e74959;Qiao Zhang;2021-07-09 21:16:48 -0700;Update changelog for jaxlib-0.1.69.

==

CHANGELOG.md
jaxlib/version.py
setup.py
==================
17e562df;Jake VanderPlas;2021-07-12 11:39:25 -0700;Fix rank promotion warning in polyint/polyder

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
541b31df;Parker Schuh;2021-07-01 11:59:13 -0700;Add partitioning support to outfeed.

==

jax/_src/lax/lax.py
tests/pjit_test.py
==================
24df92c6;jax authors;2021-07-12 09:58:28 -0700;Merge pull request #7228 from jakevdp:packbits-rank-promotion
PiperOrigin-RevId: 384257098

==
==================
9ee12207;Jake VanderPlas;2021-07-09 08:41:16 -0700;Fix rank promotion error for jnp.packbits

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
29592174;George Necula;2021-07-12 06:20:51 -0700;Enable tfxla.dot_general and tfxla.conv to force use of the V2 ops.
Force jax2tf to use XlaDotV2 and XlaConvV2. The main motivation
is to reduce the jax2tf op exposure.

PiperOrigin-RevId: 384219311

==

jax/experimental/jax2tf/README.md
jax/experimental/jax2tf/jax2tf.py
==================
0beef34d;George Necula;2021-07-12 01:11:17 -0700;[jax2tf] Fix conversion for argmin/argmax; add conversion for reduce
The previous conversion for argmin/argmax simply used tf.argmin and tf.argmax.
Those ops behave differently than JAX when the inputs contain NaN and Inf. Added
a few test cases in primitive_harness to expose the failures.

In order to implement an accurate conversion of argmin/argmax, we need to use the
XLA Reduce op.

Also tightened the shape checks for lax.argmin and lax.argmax, to ensure they are
not used with an empty reduced dimension. E.g., if the axis=-1, previously we got
an internal error:
```
RuntimeError: Invalid argument: Reducing out-of-bounds dimension -1 in shape f32[2,0,3].:
This is a bug in JAX's shape-checking rules; please report it!
```
PiperOrigin-RevId: 384182794

==

CHANGELOG.md
jax/_src/lax/lax.py
jax/experimental/jax2tf/README.md
jax/experimental/jax2tf/g3doc/primitives_with_limited_support.md
jax/experimental/jax2tf/g3doc/primitives_with_limited_support.md.template
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/jax2tf_limitations.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
jax/experimental/jax2tf/tests/shape_poly_test.py
tests/lax_test.py
==================
a2704788;jax authors;2021-07-12 00:17:27 -0700;Merge pull request #7238 from gnecula:vjp_error
PiperOrigin-RevId: 384175494

==
==================
5d50a0c8;jax authors;2021-07-12 00:13:52 -0700;Merge pull request #7240 from gnecula:conv_error
PiperOrigin-RevId: 384175416

==
==================
022514e0;George Necula;2021-07-11 09:40:42 +0300;Updated the error message

==

jax/_src/api.py
tests/api_test.py
==================
1f946ad5;George Necula;2021-07-11 10:09:19 +0300;Fix grad of conv 0D.
This bug was introduced in #6345, and was not caught by existing tests.
Add a reproducing test.

==

jax/_src/lax/lax.py
tests/lax_test.py
==================
ec4d6de0;jax authors;2021-07-10 11:30:14 -0700;Merge pull request #7227 from jakevdp:in1d-rank-promotion
PiperOrigin-RevId: 384029153

==
==================
971f3d6a;jax authors;2021-07-10 11:20:28 -0700;Merge pull request #7232 from jakevdp:py39-classifier
PiperOrigin-RevId: 384028597

==
==================
5520fcb5;George Necula;2021-07-10 19:08:15 +0300;Improve error message when vjp is called with cotangent of wrong shape.
Previously the error was an internal assertion error.

==

jax/_src/api.py
tests/api_test.py
==================
c590c9ea;jax authors;2021-07-09 20:33:35 -0700;Merge pull request #7210 from skye:string_config
PiperOrigin-RevId: 383970830

==
==================
30067562;Skye Wanderman-Milne;2021-07-07 17:45:45 -0700;Add config.define_string_state.
Also consolidates some shared config logic into a new _StateContextManager class.

==

jax/_src/config.py
==================
fa758bcf;jax authors;2021-07-09 13:06:13 -0700;Merge pull request #7233 from zhangqiaorjc:update_xla_2
PiperOrigin-RevId: 383907457

==
==================
991aba6b;Qiao Zhang;2021-07-09 12:57:35 -0700;Update XLA.

==

WORKSPACE
==================
83368aa4;jax authors;2021-07-09 12:53:25 -0700;Merge pull request #7230 from hawkinsp:jaxrelease
PiperOrigin-RevId: 383904608

==
==================
5badea53;Jake VanderPlas;2021-07-09 12:42:39 -0700;setup.py: add Python 3.9 classifier

==

setup.py
==================
b393d9a8;Peter Hawkins;2021-07-09 15:19:24 -0400;Update jax version and changelog for 0.1.27.
Disable tfrt CPU backend on jaxlib 0.1.68 to work around https://github.com/google/jax/issues/7229.

==

CHANGELOG.md
jax/lib/xla_bridge.py
jax/version.py
==================
a50dd080;jax authors;2021-07-09 09:44:00 -0700;Merge pull request #7226 from jakevdp:sparse-rdot
PiperOrigin-RevId: 383865272

==
==================
7f8b81b1;Jake VanderPlas;2021-07-09 08:36:48 -0700;Fix rank promotion warnings for jnp.in1d

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
fd7b83f8;jax authors;2021-07-09 06:50:00 -0700;Merge pull request #7221 from jakevdp:vander-rank-promotion
PiperOrigin-RevId: 383836999

==
==================
591c315b;Jake VanderPlas;2021-07-08 13:48:10 -0700;Fix rank promotion warning in jnp.vander

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
d2861b12;jax authors;2021-07-09 06:35:42 -0700;Merge pull request #7114 from charmerDark:s_implementation
PiperOrigin-RevId: 383835003

==
==================
087da553;Jake VanderPlas;2021-07-09 06:00:05 -0700;[sparse]: add support for rdot_general in sparsify transform

==

jax/experimental/sparse/transform.py
tests/sparsify_test.py
==================
6cc32efc;jax authors;2021-07-08 18:20:28 -0700;Merge pull request #7224 from jakevdp:fix-ci
PiperOrigin-RevId: 383753674

==
==================
b178bd14;Jake VanderPlas;2021-07-08 16:27:57 -0700;Fix testExpandDims for older numpy

==

tests/lax_numpy_test.py
==================
cb51acc2;jax authors;2021-07-08 15:16:53 -0700;Merge pull request #7218 from jakevdp:expand-dims
PiperOrigin-RevId: 383725493

==
==================
f3234b56;Jake VanderPlas;2021-07-08 11:47:52 -0700;jnp.expand_dims: accept any sequence of dims, not just tuples

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
4e349144;jax authors;2021-07-08 14:35:38 -0700;Merge pull request #7219 from jakevdp:unpack-bits-rank-promotion
PiperOrigin-RevId: 383716713

==
==================
8598ab95;jax authors;2021-07-08 14:24:08 -0700;Merge pull request #7217 from jakevdp:rank-promotion
PiperOrigin-RevId: 383713653

==
==================
24b078fe;jax authors;2021-07-08 14:20:20 -0700;Merge pull request #7220 from jakevdp:view-rank-promotion
PiperOrigin-RevId: 383713563

==
==================
c60115ab;vishnu;2021-07-09 02:35:28 +0530;adding s_ and index_exp

==

jax/_src/numpy/lax_numpy.py
jax/numpy/__init__.py
tests/lax_numpy_test.py
==================
61be1e57;Jake VanderPlas;2021-07-08 13:01:51 -0700;Fix rank promotion warning in DeviceArray.view()

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
8e86952e;James Bradbury;2021-07-08 12:05:56 -0700;AWN-enabled reduction over named axes in reverse-mode AD
Previously, reverse-mode AD operators inside JAX maps always meant "compute
a gradient (or VJP, etc.) for each axis index in the map". For instance,
`vmap(grad(f))` is the standard JAX spelling of the per-example gradient of `f`.

In batching tracer terms, this "elementwise" behavior means that, if any inputs
to a function being transposed are mapped, the cotangents of all inputs, even
unmapped ones, would also be mapped. But a user might want them to be unmapped
(if, for instance, they're interested in a total gradient rather than a
per-example gradient). They could always reduce (`psum`) the cotangents
afterwards, but computing mapped cotangents in the first place would likely be
an unacceptable waste of memory and can't necessarily be optimized away.

If we want to fuse these reductions into reverse-mode autodiff itself, we need
the backward_pass logic and/or transpose rules to know about whether primal
values are mapped or unmapped. This is made possible by avals-with-names,
which encodes that information in the avals of the primal jaxpr.

Putting things together, **this change adds an option to reverse-mode AD APIs
that indicates which named axes should be reduced over in the backward pass in
situations where they were broadcasted over in the forward pass**. All other
named axes will be treated in the current elementwise way. This has the effect
of making APIs like `grad` behave akin to collectives like `psum`: they act
collectively over axes that are named explicitly, and elementwise otherwise.

Since avals-with-names is currently enabled only in `xmap`, this behavior is
only available in that context for now. It's also missing some optimizations:
  - reductions aren't fused into any first-order primitives (e.g. a `pdot`
    should have a named contracting axis added rather than being followed by a
    `psum`; this can be implemented by putting these primitives into
    `reducing_transposes`)
  - reductions are performed eagerly, even over axes that are mapped to
    hardware resources (the optimal thing to do would be to reduce eagerly
    over any vectorized axis component while delaying the reduction over any
    hardware-mapped component until the end of the overall backward pass; this
    would require a way to represent these partially-reduced values)

PiperOrigin-RevId: 383685336

==

CHANGELOG.md
jax/_src/api.py
jax/_src/custom_derivatives.py
jax/_src/lax/control_flow.py
jax/interpreters/ad.py
tests/api_test.py
tests/xmap_test.py
==================
6d26f6e9;Jake VanderPlas;2021-07-08 12:05:47 -0700;Fix & test rank promotion in jnp.unpackbits

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
233d9f79;Jake VanderPlas;2021-07-08 11:20:05 -0700;Run random_test with rank_promotion='raise'

==

tests/random_test.py
==================
f0c30492;David Majnemer;2021-07-08 09:41:52 -0700;Remove stale limitations
PiperOrigin-RevId: 383652551

==

jax/experimental/jax2tf/tests/jax2tf_limitations.py
tests/lax_vmap_test.py
tests/nn_test.py
==================
78a689bb;jax authors;2021-07-08 04:54:03 -0700;Merge pull request #6933 from lgeiger:multi-slice
PiperOrigin-RevId: 383608401

==
==================
f91a47e4;jax authors;2021-07-08 03:29:27 -0700;Merge pull request #7154 from jakabtardosgoogle:patch-1
PiperOrigin-RevId: 383596699

==
==================
b40a23f9;jax authors;2021-07-07 15:18:06 -0700;Merge pull request #7209 from zhangqiaorjc:update_xla_tfrt
PiperOrigin-RevId: 383504150

==
==================
acb22479;Qiao Zhang;2021-07-07 15:06:06 -0700;Update XLA and TFRT for jaxlib.

==

WORKSPACE
==================
62fe86e9;jax authors;2021-07-07 14:11:35 -0700;Merge pull request #7147 from amol-mandhane:patch-1
PiperOrigin-RevId: 383489936

==
==================
da487761;jax authors;2021-07-07 14:07:42 -0700;Merge pull request #7141 from wdphy16:complex_logaddexp
PiperOrigin-RevId: 383489570

==
==================
f925b62e;James Martens;2021-07-07 13:50:14 -0700;Clarifying docstring for `devices` argument of `pmap`.
PiperOrigin-RevId: 383486168

==

jax/_src/api.py
==================
f945982b;Amol Mandhane;2021-06-30 13:52:32 +0100;Broadcast arrays manually in categorical sampling.

==

jax/_src/random.py
tests/random_test.py
==================
56087dc8;jax authors;2021-07-07 11:05:34 -0700;Merge pull request #7192 from amol-mandhane:broadcasting-decorator
PiperOrigin-RevId: 383451030

==
==================
b9b93d31;jax authors;2021-07-07 10:55:52 -0700;Merge pull request #7203 from hawkinsp:gather
PiperOrigin-RevId: 383448511

==
==================
2eec298e;jax authors;2021-07-07 08:47:55 -0700;Merge pull request #7202 from hawkinsp:pillow
PiperOrigin-RevId: 383421042

==
==================
2168483a;Peter Hawkins;2021-07-07 08:51:09 -0400;Add x.at[idx].get().
This allows the sorted/unique keyword arguments to be passed to indexed gather operations.

==

jax/_src/numpy/lax_numpy.py
jax/_src/ops/scatter.py
tests/lax_numpy_indexing_test.py
==================
0de4a608;Peter Hawkins;2021-07-07 08:31:20 -0400;Update pillow pin to >= 8.3.1.
8.3.1 fixed the issue from https://github.com/google/jax/pull/7166.

==

build/test-requirements.txt
==================
5c2bb8bf;jax authors;2021-07-05 10:12:59 -0700;Merge pull request #7195 from gnecula:tf_round
PiperOrigin-RevId: 383151732

==
==================
2fe02268;George Necula;2021-07-05 18:17:59 +0200;[jax2tf] Ensure that the conversion of Round uses the same algorithm as JAX

==

jax/experimental/jax2tf/g3doc/jax_primitives_coverage.md
jax/experimental/jax2tf/g3doc/primitives_with_limited_support.md
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/primitive_harness.py
==================
4bae17dd;Amol Mandhane;2021-07-05 11:59:27 +0100;Add a helper decorator to disable implicit rank promotion in unit tests.

==

jax/test_util.py
tests/test_util_test.py
==================
fbb98821;jax authors;2021-07-05 03:28:06 -0700;Merge pull request #7181 from jakevdp:fix-tol
PiperOrigin-RevId: 383103788

==
==================
850e6bf4;jax authors;2021-07-03 11:06:58 -0700;Merge pull request #7178 from google:xla-bridge-options
PiperOrigin-RevId: 382924141

==
==================
7b109657;Dian Wu;2021-07-03 18:09:58 +0200;Implement complex logaddexp

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
b9370663;George Necula;2021-07-02 23:17:25 -0700;[host_callback] Add an optional mechanism using HLO CustomCall instead of outfeed.
This works only on CPU for now.
I have not yet written the documentation, waiting for the GPU implementation, and
also to iron out a few more issues, e.g.,
with asynchronous callback for id_tap, and with error handling.

PiperOrigin-RevId: 382871559

==

jax/_src/config.py
jax/experimental/host_callback.py
tests/host_callback_test.py
==================
5f11bf57;David Majnemer;2021-07-02 16:18:26 -0700;Use XLA atan2 for complex atan
PiperOrigin-RevId: 382831891

==

jax/_src/lax/lax.py
jax/experimental/jax2tf/jax2tf.py
==================
a965950d;Jake VanderPlas;2021-07-02 16:07:26 -0700;Test: fix typo in test case tolerance

==

tests/lax_numpy_test.py
==================
6b51f5cc;jax authors;2021-07-02 13:37:01 -0700;Merge pull request #7165 from tlu7:add-sph-harm
PiperOrigin-RevId: 382804257

==
==================
440e5b35;jax authors;2021-07-02 13:30:03 -0700;Merge pull request #7179 from jakevdp:bcoo-methods
PiperOrigin-RevId: 382802646

==
==================
bcf0b49a;jax authors;2021-07-02 13:26:06 -0700;Merge pull request #7176 from jakevdp:bcoo-elide-transpose
PiperOrigin-RevId: 382801807

==
==================
38884b02;jax authors;2021-07-02 13:22:18 -0700;Merge pull request #7177 from jakevdp:jax-cpu-install
PiperOrigin-RevId: 382801690

==
==================
bb6e463d;Jake VanderPlas;2021-07-02 13:04:35 -0700;[sparse] Implement several BCOO methods via sparsify

==

jax/experimental/sparse/ops.py
tests/sparse_test.py
==================
d97b3936;tlu7;2021-07-02 10:42:29 -0700;Adds spherical harmonics.
Co-authored-by: Jake VanderPlas <jakevdp@google.com>

==

CHANGELOG.md
docs/jax.scipy.rst
jax/_src/scipy/special.py
jax/scipy/special.py
tests/lax_scipy_test.py
==================
5e92facc;Matthew Johnson;2021-07-02 10:31:28 -0700;tweak xla_bridge.py flags
* add environment variables for jax_disable_most_optimizations and
  jax_cpu_backend_variant
* comment on the default values in help strings

==

jax/lib/xla_bridge.py
==================
6be875f1;Jake VanderPlas;2021-07-02 09:49:49 -0700;setup.py: change jax[cpu] to target the current jaxlib version

==

setup.py
==================
de0a3238;Jake VanderPlas;2021-07-02 09:41:42 -0700;[sparse]: avoid binding transpose primitive for no-ops

==

jax/experimental/sparse/ops.py
==================
c97d63de;jax authors;2021-07-01 21:23:17 -0700;Merge pull request #7130 from google:custom-jvp-hotfix
PiperOrigin-RevId: 382665377

==
==================
7c45105d;jax authors;2021-07-01 16:56:36 -0700;Merge pull request #7166 from jakevdp:pin-pillow
PiperOrigin-RevId: 382633599

==
==================
4ba343aa;Jake VanderPlas;2021-07-01 16:32:35 -0700;CI: pin pillow dependency to 8.2 to avoid failures under 8.3

==

build/test-requirements.txt
==================
b8b89d6e;jax authors;2021-07-01 09:16:21 -0700;Merge pull request #7150 from jakevdp:sparse-nnz
PiperOrigin-RevId: 382538132

==
==================
ab59a1b6;jakabtardosgoogle;2021-07-01 14:21:58 +0200;Import clz_p

==

jax/lax/__init__.py
==================
8061ae16;jax authors;2021-07-01 01:38:01 -0700;Merge pull request #7100 from google:remat-fix-3
PiperOrigin-RevId: 382472685

==
==================
76f9e6f0;Jake VanderPlas;2021-06-30 17:46:02 -0700;[sparse] globally change nnz->nse

==

jax/experimental/sparse/ops.py
jax/experimental/sparse/transform.py
tests/sparse_test.py
tests/sparsify_test.py
==================
a0eb1126;Matthew Johnson;2021-06-24 15:00:19 -0700;remat: don't apply cse-foiling widget to primal

==

jax/_src/api.py
jax/interpreters/partial_eval.py
jax/interpreters/xla.py
tests/api_test.py
==================
59787975;jax authors;2021-06-30 01:32:12 -0700;Merge pull request #7137 from shawwn:patch-2
PiperOrigin-RevId: 382253683

==
==================
faef96a8;jax authors;2021-06-29 17:20:57 -0700;Merge pull request #7132 from shawwn:patch-1
PiperOrigin-RevId: 382198478

==
==================
7b879c81;Shawn Presser;2021-06-29 06:10:45 -0500;Fix typo in xmap_tutorial

==

docs/notebooks/xmap_tutorial.ipynb
docs/notebooks/xmap_tutorial.md
==================
76773798;Shawn Presser;2021-06-29 01:32:39 -0500;Fix broken link in jax-101/06-parallelism

==

docs/jax-101/06-parallelism.ipynb
docs/jax-101/06-parallelism.md
==================
90704c96;jax authors;2021-06-29 12:13:59 -0700;Merge pull request #7113 from zhangqiaorjc:pmap_vlog
PiperOrigin-RevId: 382137105

==
==================
4787825c;jax authors;2021-06-29 12:09:03 -0700;Merge pull request #7127 from zhangqiaorjc:updatechangelog
PiperOrigin-RevId: 382136863

==
==================
d4a70497;jax authors;2021-06-29 10:00:22 -0700;Merge pull request #7126 from jakevdp:install-zsh
PiperOrigin-RevId: 382107958

==
==================
cbfa5390;jax authors;2021-06-29 06:25:59 -0700;Merge pull request #7105 from jakevdp:suppress-warning
PiperOrigin-RevId: 382071028

==
==================
653c9517;jax authors;2021-06-29 06:18:51 -0700;Merge pull request #7138 from gnecula:tf_fix_float0
PiperOrigin-RevId: 382070092

==
==================
5fefdf1f;jax authors;2021-06-29 06:18:33 -0700;Merge pull request #7133 from majnemer:patch-4
PiperOrigin-RevId: 382070089

==
==================
76bb26bb;jax authors;2021-06-29 06:11:13 -0700;Merge pull request #7073 from colemanliyah:thread_saftey
PiperOrigin-RevId: 382069195

==
==================
ffd8fb84;George Necula;2021-06-29 14:57:42 +0300;[jax2tf] A few fixed for handling of float0 in jax2tf and call_tf
TF returns None or 0 for the gradients of functions with integer
arguments. JAX expects float0. We must convert to and from float0
at the JAX-TF boundary.

==

jax/experimental/jax2tf/README.md
jax/experimental/jax2tf/call_tf.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/call_tf_test.py
jax/experimental/jax2tf/tests/jax2tf_test.py
==================
238e8d0a;George Necula;2021-06-29 01:19:05 -0700;Improve the XlaDot shape inference rule for partially known shapes.
Added more shape inference tests.

PiperOrigin-RevId: 382032084

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/shape_poly_test.py
==================
781f85b0;David Majnemer;2021-06-28 23:35:26 -0700;Fix broken markdown
A backtick was missing.
==

jax/_src/lax/control_flow.py
==================
e5d84522;James Bradbury;2021-06-28 19:47:50 -0700;custom_jvp named shape hotfix
When we added "avals with names", we intended to start by making the distinction between types with and without named axes load-bearing only in specific parts of the system, while (continuing to) ignore it elsewhere. This fixes a spot I missed, and that a user ran into.

Most likely, we'll want to restore something like this typecheck after vmap and pmap use avals with names; for now, the typecheck won't always be satisfied in those contexts and needs to be loosened.
==

jax/_src/custom_derivatives.py
==================
0ea05257;Liyah Coleman;2021-06-17 17:40:32 +0000;implementing thread saftey check

==

jax/experimental/compilation_cache/file_system_cache.py
tests/file_system_cache_test.py
==================
61ab59c4;Qiao Zhang;2021-06-28 13:52:19 -0700;Update changelog for jax and jaxlib releases.

==

CHANGELOG.md
==================
5e268193;Jake VanderPlas;2021-06-28 12:57:24 -0700;DOC: update installation instructions for compatibility with zsh

==

README.md
==================
c8e571ad;Jake VanderPlas;2021-06-28 12:54:21 -0700;Allow suppression of GPU warning via jax_platform_name

==

jax/lib/xla_bridge.py
tests/api_test.py
==================
0d68dbd6;jax authors;2021-06-28 11:51:45 -0700;Merge pull request #7124 from jakevdp:fix-flake
PiperOrigin-RevId: 381913589

==
==================
5ed9471b;Jake VanderPlas;2021-06-28 11:40:23 -0700;flake: fix unused import

==

jax/experimental/sparse/transform.py
==================
cb8582c6;jax authors;2021-06-28 10:43:07 -0700;Merge pull request #6929 from jakevdp:sparsify
PiperOrigin-RevId: 381897788

==
==================
698555f0;jax authors;2021-06-28 03:28:47 -0700;Merge pull request #7119 from gnecula:call_tf_eager
PiperOrigin-RevId: 381826406

==
==================
d80f9d69;jax authors;2021-06-28 03:19:49 -0700;Merge pull request #7121 from gnecula:tf_reduce
PiperOrigin-RevId: 381825396

==
==================
44b95426;George Necula;2021-06-28 08:40:43 +0200;[jax2tf] Fix the conversion of reduce_sum and reduce_prod for booleans
Also update the documentation

==

jax/experimental/jax2tf/g3doc/jax_primitives_coverage.md
jax/experimental/jax2tf/g3doc/primitives_with_limited_support.md
jax/experimental/jax2tf/jax2tf.py
==================
33b5164b;George Necula;2021-06-25 07:39:09 +0200;[call_tf] Improved call_tf for op-by-op executions.
There are two major improvements here. First we ensure that
in op-by-op execution we can even execute functions that are not
compileable. We do this by ensuring that we do not trace the
TF function to a graph too early.

The other improvement is to work around some bugs in the TF shape
inference. Some TF graphs has unknown output shapes even when traced
with known inputs shapes. This happens even for some graph that
are generated by jax2tf, which we know should have known shapes. To
work around this, we get the output shapes for the TF function using
the XLA compiler, which is more reliably able to figure out the output
shapes. We do this even during abstract evaluation of the call_tf
primitive, and we use caching to ensure we do not call the TF
compiler repeatedly.

==

jax/experimental/jax2tf/call_tf.py
jax/experimental/jax2tf/tests/call_tf_test.py
==================
57669bf4;Qiao Zhang;2021-06-25 19:35:16 -0700;Lazy eval for vlogging on pmap/pjit critical path.
See absl/logging comments
https://cs.opensource.google/bazel/bazel/+/master:third_party/py/abseil/absl/logging/__init__.py;l=44?q=absl%20logging

==

jax/interpreters/pxla.py
jax/interpreters/sharded_jit.py
==================
a50c2732;George Karpenkov;2021-06-25 17:46:28 -0700;Reland bf16 gemm: rollback of rollback
PiperOrigin-RevId: 381579643

==

tests/lax_numpy_test.py
==================
f647b659;jax authors;2021-06-25 17:04:43 -0700;Merge pull request #7112 from hawkinsp:docs
PiperOrigin-RevId: 381574720

==
==================
b746d021;Peter Hawkins;2021-06-25 19:55:23 -0400;Disable xmap_tutorial to fix doc CI build.

==

docs/conf.py
==================
9a22498a;jax authors;2021-06-25 14:27:15 -0700;Merge pull request #7023 from jakevdp:dot-general-sampled
PiperOrigin-RevId: 381547760

==
==================
157d0121;Jake VanderPlas;2021-06-25 11:07:48 -0700;[sparse] add bcoo_dot_general_sampled primitive

==

jax/experimental/sparse/__init__.py
jax/experimental/sparse/ops.py
tests/sparse_test.py
==================
0401d2be;Jake VanderPlas;2021-06-25 10:45:16 -0700;Add experimental sparsify transform
Co-authored-by: Roy Frostig <frostig@google.com>

==

jax/experimental/sparse/__init__.py
jax/experimental/sparse/transform.py
tests/sparsify_test.py
==================
96575216;jax authors;2021-06-24 18:09:55 -0700;Merge pull request #6981 from pschuh:parallel-multidevice
PiperOrigin-RevId: 381377185

==
==================
e8695c20;jax authors;2021-06-24 16:30:59 -0700;Merge pull request #7101 from inailuig:linearize_lifted_jvp_pytree
PiperOrigin-RevId: 381361421

==
==================
3041c182;Clemens Giuliani;2021-06-24 23:54:57 +0200;turn lifted_jvp into a PyTree

==

jax/_src/api.py
==================
df3cc0d9;jax authors;2021-06-24 13:43:14 -0700;Merge pull request #7086 from jakevdp:install-doc
PiperOrigin-RevId: 381328146

==
==================
3c727ab6;Jake VanderPlas;2021-06-24 11:22:12 -0700;DOC: update install instructions for GPU & TPU

==

README.md
docs/developer.md
==================
f3fb0c4e;jax authors;2021-06-24 09:07:24 -0700;Merge pull request #7094 from hawkinsp:numpy
PiperOrigin-RevId: 381266625

==
==================
380ab090;jax authors;2021-06-24 09:03:45 -0700;Merge pull request #7096 from hawkinsp:numpy2
PiperOrigin-RevId: 381266444

==
==================
988a2cd3;Peter Hawkins;2021-06-24 09:24:28 -0400;Relax NumPy version check in tests.
Only look at the major, minor, and patch parts of the NumPy version. There might be non-integer parts of the version for development builds of NumPy.

==

tests/lax_numpy_test.py
==================
15fe6839;Peter Hawkins;2021-06-24 11:02:22 -0400;Disable float0 tests that fail under NumPy 1.21.
https://github.com/numpy/numpy/issues/19305

==

tests/api_test.py
==================
33d9a203;jax authors;2021-06-24 08:23:44 -0700;Merge pull request #7095 from hawkinsp:types
PiperOrigin-RevId: 381259024

==
==================
d658108d;Peter Hawkins;2021-06-24 10:51:06 -0400;Fix type errors with current mypy and NumPy.
Enable type stubs for jaxlib.

Fix a nondeterminism problem in jax2tf tests.

==

jax/_src/lax/lax.py
jax/_src/scipy/optimize/_lbfgs.py
jax/experimental/host_callback.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/shape_poly.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/lib/__init__.py
mypy.ini
==================
b7e9a0b1;jax authors;2021-06-24 04:14:55 -0700;Merge pull request #7065 from gnecula:tf_shape_poly_parsing2
PiperOrigin-RevId: 381224710

==
==================
76a3c88c;George Necula;2021-06-24 09:33:29 +0200;Improved handling of tf.TensorShape

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/shape_poly.py
jax/experimental/jax2tf/tests/shape_poly_test.py
==================
7e51184f;jax authors;2021-06-24 00:47:11 -0700;Merge pull request #7089 from gnecula:tf_doc_large_model
PiperOrigin-RevId: 381197517

==
==================
174a4779;George Necula;2021-06-24 08:40:41 +0200;[jax2tf] Documented recipe for ensuring that model parameters are not embedded

==

jax/experimental/jax2tf/README.md
==================
c5097314;jax authors;2021-06-23 15:07:35 -0700;Merge pull request #7084 from skye:version
PiperOrigin-RevId: 381124152

==
==================
3da8a4cd;Skye Wanderman-Milne;2021-06-23 14:42:36 -0700;Update jax version to 0.2.16

==

CHANGELOG.md
jax/version.py
==================
c985d76e;jax authors;2021-06-23 14:44:41 -0700;Merge pull request #7082 from zhangqiaorjc:gtsv2fix
PiperOrigin-RevId: 381118896

==
==================
4c1856e1;jax authors;2021-06-23 14:39:04 -0700;Merge pull request #7083 from skye:fix_install
PiperOrigin-RevId: 381117784

==
==================
7cc277d6;Qiao Zhang;2021-06-23 14:22:08 -0700;Test for gtsv2 attr on cusparse.

==

jax/_src/lax/linalg.py
==================
55276d15;Skye Wanderman-Milne;2021-06-23 14:13:15 -0700;Fix `pip install jax[tpu]`
* Updates jax_releases.html index to include libtpu wheels
* Change [tpu] extras to specify `libtpu-nightly` instead of wheel URL

The full install command will now be:
`pip install pip install jax[tpu] -f https://storage.googleapis.com/jax-releases/jax_releases.html`
(similar to the cuda install commands)

I've already pushed an updated jax_releases.html to the jax-releases GCS bucket.

==

build/generate_release_index.py
setup.py
==================
2460f915;Skye Wanderman-Milne;2021-06-23 14:08:51 -0700;Revert "Improve support for pip install jax[cuda111]"
This reverts commit dfcaf0feb81db0d2594b9a78154e8679b0366533.

==

setup.py
==================
9493b315;jax authors;2021-06-23 14:00:54 -0700;Merge pull request #7080 from jakevdp:test-dynamic-slice
PiperOrigin-RevId: 381109882

==
==================
5bfcb51f;jax authors;2021-06-23 13:36:56 -0700;Merge pull request #7059 from zhangqiaorjc:cpp_fix
PiperOrigin-RevId: 381104915

==
==================
27fc797a;Jake VanderPlas;2021-06-23 13:29:15 -0700;Add dynamic slice U8 index test

==

tests/lax_test.py
==================
92e8ec42;jax authors;2021-06-23 13:09:10 -0700;Merge pull request #7078 from zhangqiaorjc:bjaxlib
PiperOrigin-RevId: 381099458

==
==================
a22841b6;Qiao Zhang;2021-06-23 12:37:56 -0700;Bump jaxlib ver to 0.1.68.

==

README.md
jaxlib/version.py
setup.py
==================
eaaaa110;jax authors;2021-06-23 12:20:31 -0700;Merge pull request #7077 from skye:version
PiperOrigin-RevId: 381088906

==
==================
35557794;jax authors;2021-06-23 12:15:34 -0700;Merge pull request #7070 from jakevdp:bcoo-transpose
PiperOrigin-RevId: 381087809

==
==================
444ee5e8;Skye Wanderman-Milne;2021-06-23 11:55:40 -0700;Update jax version to 0.2.15

==

CHANGELOG.md
jax/version.py
==================
a251eccc;jax authors;2021-06-23 11:49:08 -0700;Merge pull request #7076 from jakevdp:gpu-install
PiperOrigin-RevId: 381082192

==
==================
dfcaf0fe;Jake VanderPlas;2021-06-23 11:42:04 -0700;Improve support for pip install jax[cuda111]

==

setup.py
==================
0934161a;jax authors;2021-06-23 10:48:44 -0700;Merge pull request #7071 from colemanliyah:fix_get_cache_key
PiperOrigin-RevId: 381067436

==
==================
d460a53a;colemanliyah;2021-06-23 17:40:23 +0000;changed 1 to 0

==

tests/compilation_cache_test.py
==================
92a290bd;Liyah Coleman;2021-06-23 16:33:58 +0000;fixed failing tests

==

tests/compilation_cache_test.py
==================
d1a25503;jax authors;2021-06-23 10:35:30 -0700;Merge pull request #7062 from skye:jaxlib_tpu
PiperOrigin-RevId: 381063068

==
==================
a6875410;jax authors;2021-06-23 10:31:57 -0700;Merge pull request #7072 from zhangqiaorjc:npv2
PiperOrigin-RevId: 381062738

==
==================
7c54b44d;Qiao Zhang;2021-06-23 10:23:43 -0700;Bump numpy versions for macos build.

==

build/build_jaxlib_wheels_macos.sh
==================
c358da4e;Jake VanderPlas;2021-06-23 10:04:27 -0700;[sparse] add bcoo_transpose primitive

==

jax/experimental/sparse/__init__.py
jax/experimental/sparse/ops.py
tests/sparse_test.py
==================
28977761;jax authors;2021-06-23 05:46:01 -0700;Merge pull request #6849 from tomhennigan:changelist/376000598
PiperOrigin-RevId: 381010658

==
==================
7e335e0e;George Necula;2021-06-23 10:52:03 +0200;[jax2tf] Fix conversion of gradients for shape polymorphic functions.
This fixes the case when the primal shape polymorphic function has
output shapes that are polynomials of the input shapes (not just
dimension variables).

==

jax/core.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/shape_poly.py
jax/experimental/jax2tf/tests/shape_poly_test.py
==================
b85e3a01;jax authors;2021-06-23 00:44:56 -0700;Merge pull request #7049 from jakevdp:validate
PiperOrigin-RevId: 380974236

==
==================
a12a2295;Skye Wanderman-Milne;2021-06-23 02:18:53 +0000;Add `pip install jax[tpu]` configuration.
This can be used on Cloud TPU VMs to automatically install compatible
versions of jax, jaxlib, and libtpu (the low-level library JAX uses to
access the TPU on Cloud TPU VMs).

The new install command requires a new jax release (`>=0.2.15`) and
jaxlib release (`>=0.1.68`) to work, since it requires both
https://github.com/google/jax/commit/cdfbd9dde17dd97f62b4bae3d972ee001c119e18
and
https://github.com/tensorflow/tensorflow/commit/ce2bc249968344c57e91c45799ad5ec91aad2566
to pick up the pip-installed libtpu. I'll update the README and Cloud
TPU VM documentation once these releases are out.

==

setup.py
==================
cdfbd9dd;jax authors;2021-06-22 18:11:45 -0700;Merge pull request #7061 from skye:libtpu_init
PiperOrigin-RevId: 380932769

==
==================
ba972f02;Skye Wanderman-Milne;2021-06-22 23:31:12 +0000;On Cloud TPU, use pip-installed libtpu instead of system default if applicable.

==

jax/_src/cloud_tpu_init.py
==================
6ae2f6d5;jax authors;2021-06-22 16:37:50 -0700;Merge pull request #7060 from zhangqiaorjc:npv
PiperOrigin-RevId: 380918414

==
==================
f3c8a22d;Qiao Zhang;2021-06-22 16:15:37 -0700;Bump np versions for build script.

==

build/Dockerfile
==================
3b84f857;jax authors;2021-06-22 15:13:31 -0700;Merge pull request #7058 from jakevdp:bcoo-serialization
PiperOrigin-RevId: 380902758

==
==================
98ce6c58;Jake VanderPlas;2021-06-22 10:39:34 -0700;[sparse] cleanup validation function

==

jax/experimental/sparse/ops.py
==================
afe2d908;jax authors;2021-06-22 14:57:49 -0700;Merge pull request #7042 from zhangqiaorjc:tfrt_cpu_default
PiperOrigin-RevId: 380899063

==
==================
cf64f840;Qiao Zhang;2021-06-22 14:49:19 -0700;Remove redundant dep in jax cpp example target.

==

examples/jax_cpp/BUILD
==================
986c3900;jax authors;2021-06-22 14:31:22 -0700;Merge pull request #7055 from hawkinsp:numpy
PiperOrigin-RevId: 380892531

==
==================
6f8ebb7f;jax authors;2021-06-22 14:27:27 -0700;Merge pull request #6978 from colemanliyah:get_cache_key
PiperOrigin-RevId: 380892453

==
==================
132a5422;Qiao Zhang;2021-06-22 13:43:22 -0700;Add flag to select tfrt backend for CPU.

==

jax/lib/xla_bridge.py
==================
0ed1b2b9;jax authors;2021-06-22 13:48:47 -0700;Merge pull request #7045 from zhangqiaorjc:win_build
PiperOrigin-RevId: 380884480

==
==================
18c7610e;Qiao Zhang;2021-06-22 13:36:14 -0700;Catch CalledProcessError in build script.

==

build/build.py
==================
e18183eb;Jake VanderPlas;2021-06-22 13:33:52 -0700;[sparse] fix batched serialization of BCOO

==

jax/experimental/sparse/ops.py
tests/sparse_test.py
==================
75c9bf01;Peter Hawkins;2021-06-22 15:58:29 -0400;Fix most test failures under NumPy 1.21.

==

jax/_src/random.py
jax/test_util.py
tests/api_test.py
tests/lax_numpy_test.py
tests/tree_util_test.py
==================
4b8d948d;jax authors;2021-06-22 13:17:08 -0700;Merge pull request #7056 from zhangqiaorjc:updatexla
PiperOrigin-RevId: 380877984

==
==================
bfc2ae21;Qiao Zhang;2021-06-22 13:07:24 -0700;Update XLA.

==

WORKSPACE
==================
23b6b0bb;jax authors;2021-06-22 12:48:08 -0700;Merge pull request #7051 from jakevdp:pin-numpy
PiperOrigin-RevId: 380871374

==
==================
0c91be7b;Jake VanderPlas;2021-06-22 11:15:16 -0700;CI: temporarily pin numpy to <1.21

==

build/test-requirements.txt
docs/requirements.txt
==================
f885366a;Peter Hawkins;2021-06-22 06:38:22 -0700;[JAX] Improve support for DLPack tensors on CPU when a GPU is available.
https://github.com/google/jax/issues/5581

Previously the user had to provide the target backend explicitly. Now we supply both CPU and GPU backends to the C++ code so it can choose based on the metadata of the DLPack tensor.

PiperOrigin-RevId: 380795192

==

jax/_src/dlpack.py
jax/experimental/jax2tf/call_tf.py
tests/array_interoperability_test.py
==================
8e14d53b;jax authors;2021-06-22 05:39:30 -0700;Merge pull request #7041 from lamblin:patch-1
PiperOrigin-RevId: 380787775

==
==================
1bba5d7f;Marc van Zee;2021-06-22 04:42:52 -0700;Implements dynamic_update_slice when enable_xla=False and adds tests.
PiperOrigin-RevId: 380781017

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/primitive_harness.py
==================
e5027601;Marc van Zee;2021-06-22 01:06:36 -0700;Implements more slicing support for lax.gather in jax2tf when enable_xla=False, and adds tests.
PiperOrigin-RevId: 380753589

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/jax2tf_limitations.py
jax/experimental/jax2tf/tests/primitive_harness.py
==================
a87a291a;Liyah Coleman;2021-06-04 19:22:57 +0000;Implemented get_cache_key funtion with unit tests

==

jax/experimental/compilation_cache/compilation_cache.py
tests/compilation_cache_test.py
==================
6382cee7;jax authors;2021-06-21 15:27:09 -0700;Merge pull request #7034 from zhangqiaorjc:vmapped_clamp
PiperOrigin-RevId: 380677496

==
==================
e8e6138c;Qiao Zhang;2021-06-20 19:09:13 -0700;Add vmap rule for lax.clamp.

==

jax/_src/lax/lax.py
tests/lax_vmap_test.py
==================
3787b56c;jax authors;2021-06-21 13:59:14 -0700;Merge pull request #7040 from jakevdp:fix-random-test
PiperOrigin-RevId: 380658330

==
==================
71bf4100;Jake VanderPlas;2021-06-21 13:44:54 -0700;Fix random test for scipy>=1.17.0

==

tests/random_test.py
==================
3f768ee2;jax authors;2021-06-21 12:33:18 -0700;Merge pull request #7036 from lesteve:patch-1
PiperOrigin-RevId: 380639325

==
==================
963d4c00;Pascal Lamblin;2021-06-21 14:48:33 -0400;Fix typo in link

==

jax/experimental/jax2tf/README.md
==================
8bb6bdc4;jax authors;2021-06-21 06:14:00 -0700;Merge pull request #7025 from jakevdp:bcoo-batch
PiperOrigin-RevId: 380561985

==
==================
64974f30;George Necula;2021-06-21 05:55:55 -0700;[host_callback] Make logging statements conditional.
Misuse of conditional logging (logging.vlog) led to significant time wasted
even if logging was off.

PiperOrigin-RevId: 380559720

==

jax/experimental/host_callback.py
==================
6192516d;Loïc Estève;2021-06-21 12:03:44 +0200;Use scikit-learn rather than sklearn in docs/requirements.txt

==

docs/requirements.txt
==================
50f48e8a;jax authors;2021-06-19 09:38:21 -0700;Merge pull request #7027 from jakevdp:transpose-validation
PiperOrigin-RevId: 380364559

==
==================
7d2057b5;Jake VanderPlas;2021-06-18 21:54:28 -0700;BUG: fix validation of permutation in transpose

==

jax/_src/lax/lax.py
==================
1bf0829c;Jake VanderPlas;2021-06-18 16:05:35 -0700;[sparse] add tests of sparse dot_general autodiff with respect to sparse argument

==

jax/experimental/sparse/ops.py
tests/sparse_test.py
==================
9450b8f8;jax authors;2021-06-18 14:05:58 -0700;Merge pull request #6954 from lukepfister:complex_convolve
PiperOrigin-RevId: 380260457

==
==================
c33388b1;Luke Pfister;2021-06-11 16:40:39 -0600;Support complex numbers in jax.scipy.signal.convolve/correlate

==

jax/_src/scipy/signal.py
tests/scipy_signal_test.py
==================
60538902;jax authors;2021-06-18 11:25:30 -0700;Merge pull request #6914 from njunge94:custom_root_aux
PiperOrigin-RevId: 380227301

==
==================
8e0ec112;jax authors;2021-06-18 09:26:59 -0700;Merge pull request #6996 from jakevdp:sparse-grad
PiperOrigin-RevId: 380201282

==
==================
48c046c1;jax authors;2021-06-18 08:47:50 -0700;Merge pull request #7012 from jakevdp:fix-random-bits
PiperOrigin-RevId: 380194114

==
==================
a385d975;Jake VanderPlas;2021-06-18 08:18:56 -0700;[sparse] add sparse-aware wrapper for grad & value_and_grad

==

jax/experimental/sparse/__init__.py
jax/experimental/sparse/ad.py
jax/experimental/sparse/ops.py
tests/sparse_test.py
==================
4406c770;Peter Hawkins;2021-06-18 08:11:51 -0700;[XLA] Improve the accuracy of complex log1p close to 0.
https://github.com/google/jax/issues/7004

PiperOrigin-RevId: 380188368

==

jax/experimental/jax2tf/tests/jax2tf_limitations.py
tests/lax_test.py
==================
a4e74a26;George Necula;2021-06-18 07:12:21 -0700;Disable testing dot_general with preferred_element_type on GPU.
Due to a XLA bug we get non-deterministic NaN on GPU.
This fixes flakiness in lax_test.py

PiperOrigin-RevId: 380179946

==

tests/lax_test.py
==================
9f8fb243;jax authors;2021-06-18 02:27:50 -0700;Merge pull request #7014 from gnecula:master_main
PiperOrigin-RevId: 380144198

==
==================
6a48c60a;George Necula;2021-06-18 08:55:08 +0300;Rename master to main in embedded links.
Tried to avoid the change on external links to repos that
have not yet renamed master.

==

.github/workflows/ci-build.yaml
CHANGELOG.md
README.md
build/LICENSE.txt
cloud_tpu_colabs/JAX_NeurIPS_2020_demo.ipynb
cloud_tpu_colabs/JAX_demo.ipynb
cloud_tpu_colabs/Pmap_Cookbook.ipynb
cloud_tpu_colabs/README.md
docs/autodidax.ipynb
docs/autodidax.md
docs/autodidax.py
docs/conf.py
docs/contributing.md
docs/developer.md
docs/device_memory_profiling.md
docs/faq.rst
docs/jax-101/01-jax-basics.ipynb
docs/jax-101/01-jax-basics.md
docs/jax-101/02-jitting.ipynb
docs/jax-101/02-jitting.md
docs/jax-101/03-vectorization.ipynb
docs/jax-101/03-vectorization.md
docs/jax-101/04-advanced-autodiff.ipynb
docs/jax-101/04-advanced-autodiff.md
docs/jax-101/05-random-numbers.ipynb
docs/jax-101/05-random-numbers.md
docs/jax-101/05.1-pytrees.ipynb
docs/jax-101/05.1-pytrees.md
docs/jax-101/06-parallelism.ipynb
docs/jax-101/06-parallelism.md
docs/jax-101/07-state.ipynb
docs/jax-101/07-state.md
docs/notebooks/Common_Gotchas_in_JAX.ipynb
docs/notebooks/Common_Gotchas_in_JAX.md
docs/notebooks/Custom_derivative_rules_for_Python_code.ipynb
docs/notebooks/Custom_derivative_rules_for_Python_code.md
docs/notebooks/How_JAX_primitives_work.ipynb
docs/notebooks/How_JAX_primitives_work.md
docs/notebooks/Neural_Network_and_Data_Loading.ipynb
docs/notebooks/Neural_Network_and_Data_Loading.md
docs/notebooks/Writing_custom_interpreters_in_Jax.ipynb
docs/notebooks/Writing_custom_interpreters_in_Jax.md
docs/notebooks/XLA_in_Python.ipynb
docs/notebooks/XLA_in_Python.md
docs/notebooks/autodiff_cookbook.ipynb
docs/notebooks/autodiff_cookbook.md
docs/notebooks/convolutions.ipynb
docs/notebooks/convolutions.md
docs/notebooks/maml.ipynb
docs/notebooks/maml.md
docs/notebooks/neural_network_with_tfds_data.ipynb
docs/notebooks/neural_network_with_tfds_data.md
docs/notebooks/quickstart.ipynb
docs/notebooks/quickstart.md
docs/notebooks/score_matching.ipynb
docs/notebooks/score_matching.md
docs/notebooks/thinking_in_jax.ipynb
docs/notebooks/thinking_in_jax.md
docs/notebooks/vmapped_log_probs.ipynb
docs/notebooks/vmapped_log_probs.md
docs/transformations.md
examples/differentially_private_sgd.py
jax/_src/config.py
jax/_src/custom_derivatives.py
jax/experimental/host_callback.py
jax/experimental/jax2tf/JAX2TF_getting_started.ipynb
jax/experimental/jax2tf/README.md
jax/experimental/jax2tf/call_tf.py
jax/experimental/jax2tf/examples/README.md
jax/experimental/jax2tf/examples/serving/README.md
jax/experimental/jax2tf/g3doc/primitives_with_limited_support.md
jax/experimental/jax2tf/g3doc/primitives_with_limited_support.md.template
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/shape_poly.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
jax/lib/__init__.py
jax/lib/xla_bridge.py
jax/random.py
jaxlib/version.py
tests/lax_numpy_test.py
tests/notebooks/colab_cpu.ipynb
tests/notebooks/colab_gpu.ipynb
tests/notebooks/colab_tpu.ipynb
==================
4e58106f;George Necula;2021-06-17 23:22:47 -0700;[jax2tf] Add back the limitation for dot_general with preferred_element_type on GPU
That case is still broken, it fails non-deterministically on GPU

PiperOrigin-RevId: 380122429

==

jax/experimental/jax2tf/tests/jax2tf_limitations.py
==================
d20ecf5d;Jake VanderPlas;2021-06-17 16:10:30 -0700;random: generate large sequences via vmap rather than Python loops

==

jax/_src/random.py
==================
1d0c461e;jax authors;2021-06-17 14:08:28 -0700;Merge pull request #6995 from jakevdp:sparse-submodule
PiperOrigin-RevId: 380040999

==
==================
27ee4b64;jax authors;2021-06-17 12:55:25 -0700;Merge pull request #7008 from njunge94:index-concretizations
PiperOrigin-RevId: 380024740

==
==================
cba5b13a;Nicholas Junge;2021-06-17 20:26:16 +0200;Improve concretization errors for jnp indexing routines

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
ccc8bb7f;Nicholas Junge;2021-06-17 19:25:46 +0200;Add auxiliary data support to lax.custom_root

==

jax/_src/lax/control_flow.py
tests/lax_control_flow_test.py
==================
623d3c7a;Jake VanderPlas;2021-06-16 16:15:56 -0700;[sparse] create experimental sparse submodule

==

jax/experimental/sparse/__init__.py
jax/experimental/sparse/ops.py
tests/sparse_ops_test.py
==================
6d805cae;jax authors;2021-06-17 06:51:49 -0700;Merge pull request #7007 from gnecula:jax_change_6
PiperOrigin-RevId: 379947590

==
==================
8b320eca;George Necula;2021-06-17 16:33:06 +0300;Test 6 for rename master to main

==

jax/experimental/jax2tf/README.md
==================
26499a38;George Necula;2021-06-17 15:25:38 +0200;Merge pull request #7006 from gnecula:jax_test_5
PiperOrigin-RevId: 379942050

==
==================
4fa15068;George Necula;2021-06-17 16:08:54 +0300;One more change, to tickle copybara

==

jax/experimental/jax2tf/README.md
==================
268a242c;George Necula;2021-06-17 15:58:51 +0300;Test 5 for rename master to main

==

jax/experimental/jax2tf/README.md
==================
97a5719f;jax authors;2021-06-17 04:56:03 -0700;Merge pull request #7002 from gnecula:jax_test_3
PiperOrigin-RevId: 379932113

==
==================
0ec53eec;George Necula;2021-06-17 14:48:21 +0300;Test PR merged to main, before making main default
Want to see the GitHub actions working, and copybara import

==

jax/experimental/jax2tf/README.md
==================
daef97b1;jax authors;2021-06-17 04:38:00 -0700;Merge pull request #6999 from gnecula:rename_master
PiperOrigin-RevId: 379929701

==
==================
a6c16119;George Necula;2021-06-17 14:25:01 +0300;Renaming master to main: step 1.
Here we just enable the GitHub actions to run on both master and main.

==

.github/workflows/ci-build.yaml
==================
0d16f3ca;George Necula;2021-06-17 03:21:24 -0700;[jax2tf] Remove workaround for tf.math.atan2 not working on [b]float16.
PiperOrigin-RevId: 379919580

==

jax/experimental/jax2tf/jax2tf.py
==================
409684f9;jax authors;2021-06-16 14:21:24 -0700;Merge pull request #6982 from jakevdp:bcoo-dot-general
PiperOrigin-RevId: 379810039

==
==================
cac09d44;jax authors;2021-06-16 14:07:27 -0700;Merge pull request #6990 from zhangqiaorjc:fix_typos
PiperOrigin-RevId: 379807021

==
==================
57234e7e;Qiao Zhang;2021-06-16 11:10:42 -0700;Fix typos and indent.

==

jax/core.py
jax/interpreters/partial_eval.py
==================
4bae8948;jax authors;2021-06-16 09:22:34 -0700;Merge pull request #6918 from colemanliyah:LRU_system
PiperOrigin-RevId: 379736780

==
==================
ea1be21f;jax authors;2021-06-16 09:19:07 -0700;Merge pull request #6927 from apaszke:xmap-loops
PiperOrigin-RevId: 379736111

==
==================
6003f790;Jake VanderPlas;2021-06-16 08:54:30 -0700;[sparse] add bcoo_rdot_general

==

jax/experimental/sparse_ops.py
tests/sparse_ops_test.py
==================
0e9f7de6;Liyah Coleman;2021-06-02 17:05:26 +0000;Add LRU eviction policy to persisent compilation cache

==

jax/experimental/compilation_cache/file_system_cache.py
tests/file_system_cache_test.py
==================
8f5a7840;jax authors;2021-06-16 04:42:51 -0700;Merge pull request #6964 from gnecula:tf_gather
PiperOrigin-RevId: 379693316

==
==================
ea711b31;jax authors;2021-06-16 04:39:10 -0700;Merge pull request #6986 from gnecula:call_tf_x64
PiperOrigin-RevId: 379693059

==
==================
d394f691;George Necula;2021-06-15 08:37:01 +0300;Added clipping of OOB indices to match XLA behavior

==

jax/experimental/jax2tf/g3doc/primitives_with_limited_support.md
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/jax2tf_limitations.py
jax/experimental/jax2tf/tests/primitive_harness.py
==================
c956e83d;George Necula;2021-06-14 14:24:19 +0300;[jax2tf] Add a best-effort conversion for gather with enable_xla=False
In an attempt to support lax.gather in absence of XLA, e.g., for
TFjs converter, we add an alternative conversion for the case
when enable_xla=False. Previously, the conversion would fail in this case.

The important parts of the code are lifeted from an old PR #3486, which was
then removed in #4030 (to avoid having to think about out-of-bounds accesses).

There is still a discrepancy between the JAX and TF behavior for out-of-bounds
accesses.

==

jax/experimental/jax2tf/g3doc/primitives_with_limited_support.md
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/jax2tf_limitations.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/shape_poly_test.py
==================
e405a736;George Necula;2021-06-16 13:25:56 +0300;[call_tf] Fixed the handling of x64 values in JAX_ENABLE_X64=False
TensorFlow interprets Python scalars in x64 mode, or it may contain
explicit x64 computation. When used with call_tf, we canonicalize
inputs and outputs using the JAX rules.

==

jax/experimental/jax2tf/call_tf.py
jax/experimental/jax2tf/tests/call_tf_test.py
==================
ed96cac4;jax authors;2021-06-16 03:05:00 -0700;Merge pull request #6985 from gnecula:call_tf_grad
PiperOrigin-RevId: 379681210

==
==================
9831371e;George Necula;2021-06-16 10:20:24 +0300;[jax2tf] Fix the custom gradients for call_tf
The previous implementation did not work correctly when
the call_tf function was embedded in a larger JAX function
for which we take the gradient.

Also fixed handling of non-float args/results.

==

jax/experimental/jax2tf/call_tf.py
jax/experimental/jax2tf/tests/call_tf_test.py
==================
a82f0d83;jax authors;2021-06-15 15:49:13 -0700;Merge pull request #6984 from jakevdp:bcoo-traced-repr
PiperOrigin-RevId: 379592043

==
==================
591507a3;Jake VanderPlas;2021-06-15 15:16:58 -0700;[sparse] update sparse object repr to show tracing

==

jax/experimental/sparse_ops.py
==================
096f77dc;jax authors;2021-06-15 14:20:57 -0700;Merge pull request #6983 from skye:test_fix
PiperOrigin-RevId: 379572178

==
==================
63355a9a;Skye Wanderman-Milne;2021-06-15 20:44:52 +0000;Add jaxlib version check on newly-added NumpyLinalgTest.testEighZeroDiagonal test.
This is testing behavior recently added to jaxlib, so fails on older jaxlibs.

==

tests/linalg_test.py
==================
1e288b2f;Adam Paszke;2021-06-08 11:53:23 +0000;Add support for anonymous serial loops

==

jax/experimental/maps.py
tests/xmap_test.py
==================
fec82c8a;jax authors;2021-06-15 09:53:12 -0700;Merge pull request #6980 from jakevdp:fix-faq
PiperOrigin-RevId: 379511290

==
==================
b88bf376;Jake VanderPlas;2021-06-15 09:38:05 -0700;DOC: fix typos in FAQ (np -> jnp)

==

docs/faq.rst
==================
99a65e26;jax authors;2021-06-15 05:57:04 -0700;Merge pull request #6977 from gnecula:tf_grad
PiperOrigin-RevId: 379471254

==
==================
bfb3bbf8;George Necula;2021-06-15 15:23:27 +0300;[jax2tf] Fix bug in gradient for functions with integer results
The bug is really a peculiarity of tf.function, which uses None for the
cotangents corresponding to non-float results. This does not happen
in TF eager.

Fixes: #6975

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/jax2tf_test.py
==================
31832147;jax authors;2021-06-15 03:39:44 -0700;Merge pull request #6974 from gnecula:tf_custom_grad
PiperOrigin-RevId: 379454336

==
==================
7f0abe40;jax authors;2021-06-15 03:28:41 -0700;Merge pull request #6967 from jakevdp:bcoo-matmul
PiperOrigin-RevId: 379453035

==
==================
64e9a6e3;jax authors;2021-06-15 03:24:56 -0700;Merge pull request #6948 from tlu7:add-lpmn-values
PiperOrigin-RevId: 379452618

==
==================
2888e7ca;George Necula;2021-06-15 11:13:20 +0300;[jax2tf] Add more documentation about saving models with custom gradients

==

jax/experimental/jax2tf/README.md
jax/experimental/jax2tf/examples/saved_model_lib.py
jax/experimental/jax2tf/tests/call_tf_test.py
jax/experimental/jax2tf/tests/savedmodel_test.py
jax/experimental/jax2tf/tests/tf_test_util.py
==================
c169ee39;jax authors;2021-06-14 17:24:34 -0700;Merge pull request #6968 from jakevdp:fix-tuples
PiperOrigin-RevId: 379381874

==
==================
b573b2a0;Jake VanderPlas;2021-06-14 17:12:59 -0700;[sparse] fix bug in tuple concatenation

==

jax/experimental/sparse_ops.py
==================
510a7770;Jake VanderPlas;2021-06-14 15:45:47 -0700;Generalize BCOO.__matmul__

==

jax/experimental/sparse_ops.py
tests/sparse_ops_test.py
==================
095e6507;tlu7;2021-06-14 14:51:37 -0700;Support value computation of associated Legendre functions.
Co-authored-by: Jake VanderPlas <jakevdp@google.com>

==

docs/jax.scipy.rst
jax/_src/scipy/special.py
jax/scipy/special.py
tests/lax_scipy_test.py
==================
1e4d28a2;jax authors;2021-06-14 14:01:09 -0700;Merge pull request #6965 from hawkinsp:mypy
PiperOrigin-RevId: 379345896

==
==================
07277f07;Peter Hawkins;2021-06-14 09:37:57 -0400;Bump mypy version to 0.902.

==

.pre-commit-config.yaml
build/test-requirements.txt
==================
16c4c499;jax authors;2021-06-14 04:34:03 -0700;Merge pull request #6961 from gnecula:tf_errors
PiperOrigin-RevId: 379253554

==
==================
4f607c5e;George Necula;2021-06-14 02:23:45 -0700;[jax2tf] Improve dtype coverage for neg; update limitation documentation
PiperOrigin-RevId: 379237975

==

jax/experimental/jax2tf/g3doc/jax_primitives_coverage.md
jax/experimental/jax2tf/g3doc/primitives_with_limited_support.md
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/jax2tf_limitations.py
jax/experimental/jax2tf/tests/primitive_harness.py
==================
eb83ff42;jax authors;2021-06-13 23:18:40 -0700;Merge pull request #6934 from pschuh:propagate-name
PiperOrigin-RevId: 379218767

==
==================
41146695;jax authors;2021-06-13 22:54:48 -0700;Merge pull request #6956 from gnecula:tf_bool
PiperOrigin-RevId: 379216799

==
==================
07cc5812;George Necula;2021-06-13 17:58:22 +0300;[jax2tf] Change the InconclusiveDimensionOperation error to include link to documentation

==

jax/experimental/jax2tf/README.md
jax/experimental/jax2tf/shape_poly.py
==================
dd8ab851;George Necula;2021-06-10 12:42:40 +0200;[jax2tf] Support inequality and min/max for booleans.
For inequalities we add casts to int8. For min/max we rewrite
to logical operations and/or.

==

CHANGELOG.md
jax/_src/lax/lax.py
jax/experimental/jax2tf/g3doc/jax_primitives_coverage.md
jax/experimental/jax2tf/g3doc/primitives_with_limited_support.md
jax/experimental/jax2tf/g3doc/primitives_with_limited_support.md.template
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/jax2tf_limitations.py
jax/experimental/jax2tf/tests/primitive_harness.py
==================
5e3be94d;jax authors;2021-06-12 10:06:58 -0700;Merge pull request #6955 from gnecula:tf_poly_add_transpose
PiperOrigin-RevId: 379061224

==
==================
edd96884;George Necula;2021-06-12 11:42:15 +0300;[jax2tf] Extend shape polymorphism to handle add_transpose with broadcasting

==

jax/_src/lax/lax.py
jax/experimental/jax2tf/README.md
jax/experimental/jax2tf/tests/shape_poly_test.py
==================
f6e0297c;jax authors;2021-06-11 13:36:56 -0700;Merge pull request #6944 from jakevdp:bcoo-reduce
PiperOrigin-RevId: 378940175

==
==================
2113d9c3;Jake VanderPlas;2021-06-11 13:19:54 -0700;add bcoo_reduce_sum() function

==

jax/experimental/sparse_ops.py
tests/sparse_ops_test.py
==================
31e9c65f;jax authors;2021-06-11 11:43:38 -0700;Merge pull request #6952 from jakevdp:hstack-reshape
PiperOrigin-RevId: 378916971

==
==================
8fcdb85f;jax authors;2021-06-11 10:47:57 -0700;Merge pull request #6940 from jakevdp:fix-sinc
PiperOrigin-RevId: 378904804

==
==================
17710c07;Jake VanderPlas;2021-06-11 10:42:06 -0700;add efficient path for array input to jnp.stack, jnp.[hvd]stack, jnp.column_stack

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
3550732a;jax authors;2021-06-11 10:32:58 -0700;Merge pull request #6946 from jakevdp:concat-reshape
PiperOrigin-RevId: 378900980

==
==================
750f5864;jax authors;2021-06-11 06:53:59 -0700;Merge pull request #6941 from hawkinsp:numpy
PiperOrigin-RevId: 378863899

==
==================
b130257e;Peter Hawkins;2021-06-10 12:12:13 -0400;Drop support for NumPy 1.16.

==

.github/workflows/ci-build.yaml
CHANGELOG.md
build/build.py
jaxlib/setup.py
setup.py
tests/lax_numpy_test.py
==================
87a533e4;jax authors;2021-06-11 03:05:14 -0700;Merge pull request #6947 from gnecula:tf_call_tf
PiperOrigin-RevId: 378837807

==
==================
1994f6df;George Necula;2021-06-10 17:01:22 +0200;[jax2tf] Fix the round-trip call_tf(convert)
Also cleaned the handling of global state in jax2tf.

==

CHANGELOG.md
jax/experimental/jax2tf/README.md
jax/experimental/jax2tf/call_tf.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/shape_poly.py
jax/experimental/jax2tf/tests/call_tf_test.py
jax/experimental/jax2tf/tests/savedmodel_test.py
jax/experimental/jax2tf/tests/shape_poly_test.py
jax/experimental/jax2tf/tests/tf_test_util.py
==================
6f5abf09;Parker Schuh;2021-06-10 15:36:32 -0700;Add multi-backend support to parallel primatives.
This updates `mesh_callable` and `parallel_callable` to use
the first device of the mesh if available.

==

jax/interpreters/pxla.py
==================
3d1a6a30;jax authors;2021-06-10 16:11:49 -0700;Merge pull request #6945 from skye:version
PiperOrigin-RevId: 378756818

==
==================
e8068c08;jax authors;2021-06-10 13:31:09 -0700;Merge pull request #6943 from jakevdp:bcoo-todense-fix
PiperOrigin-RevId: 378722733

==
==================
0470f4f3;Jake VanderPlas;2021-06-10 13:25:33 -0700;jnp.concatenate: add fast path based on lax.reshape for array inputs

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
063401f3;Skye Wanderman-Milne;2021-06-10 13:15:53 -0700;Update jax version to 0.2.14

==

CHANGELOG.md
jax/version.py
==================
42b540c2;jax authors;2021-06-10 12:02:54 -0700;Merge pull request #6942 from skye:tpu_driver_version
PiperOrigin-RevId: 378703719

==
==================
72fe3bab;Jake VanderPlas;2021-06-10 12:02:04 -0700;bcoo_todense: fix corner case

==

jax/experimental/sparse_ops.py
==================
4abac4f1;Skye Wanderman-Milne;2021-06-10 10:51:01 -0700;Pin the tpu_driver version used for Cloud TPU Colabs, instead of using nightly.
There have been some recent breakages affecting the nightly driver,
causing JAX operations to fail on Cloud TPU Colabs. Pinning to a
specific version will alleviate these problems. This version may need
to be updated if there are breaking changes to the tpu_driver
client/server boundary, but that doesn't happen very often.

==

jax/tools/colab_tpu.py
==================
d622d5c8;jax authors;2021-06-10 10:03:40 -0700;Merge pull request #6939 from 8bitmp3:patch-1
PiperOrigin-RevId: 378675118

==
==================
80d8f2d5;Jake VanderPlas;2021-06-10 09:14:07 -0700;jnp.sinc: fix NaNs at x=0

==

jax/_src/numpy/lax_numpy.py
tests/debug_nans_test.py
==================
888db31e;George Necula;2021-06-10 08:53:42 -0700;[jax2tf] Fix passing of indices_are_sorted to the TF XlaGather op
PiperOrigin-RevId: 378660840

==

jax/experimental/jax2tf/jax2tf.py
==================
8568aee8;8bitmp3;2021-06-10 16:09:10 +0100;Add missing back ticks to fix jax2tf README Markdown rendering in Different 64-bit precision in JAX and TensorFlow

==

jax/experimental/jax2tf/README.md
==================
f67acb93;jax authors;2021-06-10 07:34:18 -0700;Merge pull request #6937 from mariosasko:specify-zip-safe
PiperOrigin-RevId: 378647488

==
==================
55b421ff;mariosasko;2021-06-10 16:06:11 +0200;Specify zip_safe for mypy

==

setup.py
==================
75406901;jax authors;2021-06-09 18:49:00 -0700;Merge pull request #6897 from hawkinsp:indexunique
PiperOrigin-RevId: 378550369

==
==================
69f6d5e3;jax authors;2021-06-09 18:45:49 -0700;Merge pull request #6781 from lukepfister:resize_weight
PiperOrigin-RevId: 378550280

==
==================
1ff12f05;Peter Hawkins;2021-06-04 13:53:08 -0400;Add unique/sorted annotations to gather().
XLA itself does not consume these, but they can be propagated onto scatter() when computing gradients.

Compute unique/sorted information on indexed accesses and indexed updates. Non-advanced indexes are always sorted and unique.

==

jax/_src/lax/lax.py
jax/_src/numpy/lax_numpy.py
jax/_src/ops/scatter.py
jax/experimental/jax2tf/jax2tf.py
==================
10c0b8d9;Parker Schuh;2021-06-09 17:11:31 -0700;Jaxpr transform was losing name.

==

jax/experimental/pjit.py
==================
7d0bda60;jax authors;2021-06-09 16:51:19 -0700;Merge pull request #6930 from jakevdp:union1d-size
PiperOrigin-RevId: 378530731

==
==================
8e8cbac3;Lukas Geiger;2021-06-10 00:37:14 +0100;Simplify multi slice

==

jax/_src/numpy/lax_numpy.py
jax/interpreters/pxla.py
==================
73c47dce;Peter Hawkins;2021-06-09 14:56:07 -0700;[XLA] Revert to using the textbook algorithm to construct the 2x2 Jacobi rotations in Eigendecomposition.
The current version is causing wrong outputs when the diagonal elements are exactly zero.

https://github.com/tensorflow/tensorflow/issues/50017

PiperOrigin-RevId: 378506479

==

tests/linalg_test.py
==================
79d08521;Jake VanderPlas;2021-06-09 11:36:34 -0700;Add optional size argument to jnp.union1d for JIT compatibility

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
2a1936e6;jax authors;2021-06-09 10:25:28 -0700;Merge pull request #6824 from jakevdp:sparse-bcoo
PiperOrigin-RevId: 378437750

==
==================
8362db6e;jax authors;2021-06-09 09:10:59 -0700;Merge pull request #6925 from jakevdp:nonzero-test
PiperOrigin-RevId: 378420194

==
==================
69f29a63;Jake VanderPlas;2021-06-08 15:46:35 -0700;Add experimental batched COO sparse format.
This is an implementation of a batch-friendly multidimensional COO format for JAX. It contains implementations of four primitives (bcoo_todense, bcoo_fromdense, bcoo_extract, bcoo_dot_general), as well as batching, JVP, and transpose rules for each.

For convenience, this also adds class BCOO, which is a pytree wrapper around these.

==

jax/experimental/sparse_ops.py
tests/sparse_ops_test.py
==================
b749e78d;Marc van Zee;2021-06-09 06:34:43 -0700;Adds support for enable_xla=False for shape polymorphism tests and adds such tests for dynamic_slice.
It turned out that, in jax2tf._dynamic_slice, tf.constant doesn't work with polymorphic shapes, so I replaced it with a tf.cast.

PiperOrigin-RevId: 378392273

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/shape_poly_test.py
jax/experimental/jax2tf/tests/tf_test_util.py
==================
86d2da44;jax authors;2021-06-09 01:53:27 -0700;Merge pull request #6919 from marcvanzee:patch-3
PiperOrigin-RevId: 378352041

==
==================
aac8d743;jax authors;2021-06-09 01:45:19 -0700;Merge pull request #6860 from gnecula:tf_source
PiperOrigin-RevId: 378351073

==
==================
59ae45a8;George Necula;2021-05-25 13:33:35 +0200;[jax2tf] Add support for generating HLO OpMetadata in the TF graph
The goal is to ensure that the HLO that
jax2tf->TF/XLA generates has the same metadata as what JAX generates.
This includes `op_type`, `op_name`, and source information, which are
used for debugging and profiling.

In order to ensure that this metadata is carried from the JAX tracing
time to TF/XLA, we save the metadata in custom TF op attributes. These
attributes are automatically preserved through SavedModel. This relies
on a separate change in TF/XLA to look for these custom attributes
and override its default.

For the source information, we use pretty much the same code that
xla.py uses. HLO OpMetadata has room for only one source location.
JAX (xla.py) picks the top-most user frame, which is obtained by
filtering out the stack frames in the JAX source tree. When used
with jax2tf we also need to filter out stack frames in the
TensorFlow source tree.

The hardest part is to generate the `op_name`, which is a hierarchical
name with components separated by '/', e.g., `jax2tf(top_func)/while/cond/le`.
We carry the current `name_stack` in thread-local state. Unfortunately, there
is no easy way to share the exact code that achieves this in xla.py. At the
same time it is not crucial that we have exactly identical name stacks as in
JAX.

I attempted to also carry this state in the JAX `MainTrace`, but could not
fully control the name stack. E.g., when calling a jitted-function we
have to reuse the current `MainTrace` although we want to push an element
on the name stack.

For now this option is not yet enabled until we make the necessary
changes in TensorFlow.

==

CHANGELOG.md
jax/_src/source_info_util.py
jax/experimental/jax2tf/README.md
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/control_flow_ops_test.py
jax/experimental/jax2tf/tests/jax2tf_test.py
jax/experimental/jax2tf/tests/tf_test_util.py
jax/interpreters/xla.py
==================
0f4f4102;Jake VanderPlas;2021-06-08 16:40:53 -0700;Add more complete test for jnp.nonzero size argument

==

tests/lax_numpy_test.py
==================
30b00095;jax authors;2021-06-08 16:39:57 -0700;Merge pull request #6915 from jakevdp:argwhere-size
PiperOrigin-RevId: 378275722

==
==================
c6d38938;jax authors;2021-06-08 16:21:18 -0700;Merge pull request #6926 from jakevdp:fix-random-validation
PiperOrigin-RevId: 378271745

==
==================
f97e2f94;Jake VanderPlas;2021-06-08 14:05:30 -0700;jnp.argwhere: add optional size parameter for JIT compatibility

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
0383d7b3;jax authors;2021-06-08 16:16:13 -0700;Merge pull request #6910 from jakevdp:where-size
PiperOrigin-RevId: 378270750

==
==================
022464b9;Jake VanderPlas;2021-06-08 14:04:04 -0700;jnp.where: add optional size argument

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
e7fe44e9;Allen Lavoie;2021-06-08 14:05:53 -0700;Fix jax2tf._is_tfval after tf.constant placement changes
complex128 isn't supported on TPUs in TF, tf.constant now places on TPU by default, _is_tfval saw the exception and assumed it wasn't convertable to a TF type.

PiperOrigin-RevId: 378240447

==

jax/experimental/jax2tf/jax2tf.py
==================
17c2d8a5;jax authors;2021-06-08 13:43:55 -0700;Merge pull request #6913 from jakevdp:flatnonzero-size
PiperOrigin-RevId: 378235152

==
==================
119c9bc0;Jake VanderPlas;2021-06-08 13:37:21 -0700;jax.random: improve input validation (fixes #6922)

==

jax/_src/random.py
==================
1296dc3f;Jake VanderPlas;2021-06-07 12:53:37 -0700;jnp.flatnonzero: add optional size argument for JIT compatibility

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
72cd6d00;jax authors;2021-06-08 12:34:24 -0700;Merge pull request #6912 from jakevdp:jittable-unique
PiperOrigin-RevId: 378217815

==
==================
d38def46;jax authors;2021-06-08 12:31:06 -0700;Merge pull request #6923 from jakevdp:gamma-doc
PiperOrigin-RevId: 378217732

==
==================
648b5d32;jax authors;2021-06-08 11:54:05 -0700;Merge pull request #6066 from apaszke:xmap-no-mesh-slicing
PiperOrigin-RevId: 378209333

==
==================
d198ad0a;Jake VanderPlas;2021-06-08 11:31:42 -0700;jnp.unique: add optional size argument for JIT compatibility

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
22dbe802;Jake VanderPlas;2021-06-08 10:47:27 -0700;DOC: state that digamma only accepts float

==

jax/_src/scipy/special.py
==================
39279464;jax authors;2021-06-08 07:15:57 -0700;Merge pull request #6920 from apaszke:xmap-loops
PiperOrigin-RevId: 378147047

==
==================
54ba0516;Adam Paszke;2021-03-15 13:30:44 +0000;Always run xmap over all mesh axes
Automatic mesh slicing might be surprising, and can always be
performed manually.

==

jax/experimental/maps.py
jax/interpreters/pxla.py
==================
490f9778;Adam Paszke;2021-06-07 12:43:36 +0000;Raise a friendlier error message when using loop axes in collectives

==

jax/_src/lax/parallel.py
jax/core.py
jax/experimental/maps.py
tests/xmap_test.py
==================
80e69d45;Marc van Zee;2021-06-08 07:21:40 +0200;Update README.md

==

jax/experimental/jax2tf/README.md
==================
7a3a160b;jax authors;2021-06-07 14:59:49 -0700;Merge pull request #6869 from colemanliyah:file_system_cache
PiperOrigin-RevId: 378012890

==
==================
e9611eb0;Peter Hawkins;2021-06-07 14:51:04 -0700;Move jax.ad_util to jax._src.ad_util.
Expose ad_util.stop_gradient_p as jax.lax.stop_gradient_p. stop_gradient() is already under the external lax namespace.

PiperOrigin-RevId: 378011152

==

jax/_src/abstract_arrays.py
jax/_src/ad_util.py
jax/_src/api.py
jax/_src/custom_derivatives.py
jax/_src/lax/control_flow.py
jax/_src/lax/lax.py
jax/_src/lax/linalg.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jet.py
jax/experimental/sparse_ops.py
jax/interpreters/ad.py
jax/interpreters/batching.py
jax/interpreters/partial_eval.py
jax/interpreters/xla.py
jax/lax/__init__.py
==================
7591e16c;jax authors;2021-06-07 13:50:56 -0700;Merge pull request #6917 from hawkinsp:token
PiperOrigin-RevId: 377997455

==
==================
737efb59;jax authors;2021-06-07 13:19:26 -0700;Merge pull request #6916 from jakevdp:doc-typo
PiperOrigin-RevId: 377990039

==
==================
d5ba87ad;Peter Hawkins;2021-06-07 16:19:14 -0400;Add a device_put handler for tokens.
Fixes bug with tokens passed to trivial computations.

==

jax/interpreters/xla.py
tests/api_test.py
==================
9be4a3e8;Jake VanderPlas;2021-06-07 13:11:37 -0700;Fix typo/formatting issue in DeviceArray docs

==

docs/jax.numpy.rst
==================
871b9144;jax authors;2021-06-07 12:38:54 -0700;Merge pull request #6900 from erwincoumans:master
PiperOrigin-RevId: 377980545

==
==================
32bcb5b0;jax authors;2021-06-07 12:35:27 -0700;Merge pull request #6911 from zhangqiaorjc:rm_cache_if_st
PiperOrigin-RevId: 377979800

==
==================
f5f62ce0;Qiao Zhang;2021-06-07 12:10:54 -0700;Remove stale cache_clear in api_test.

==

tests/api_test.py
==================
75cc734c;Liyah Coleman;2021-06-01 18:51:44 +0000;completed FilesystemCache class with corresponding unit tests

==

jax/experimental/compilation_cache/file_system_cache.py
tests/file_system_cache_test.py
==================
fe3de5ab;jax authors;2021-06-07 09:49:24 -0700;Merge pull request #6906 from apaszke:xmap-loops
PiperOrigin-RevId: 377939118

==
==================
9fed6201;Marc van Zee;2021-06-07 07:22:19 -0700;Adds support for lax.dynamic_slice_p when XLA is disabled.
PiperOrigin-RevId: 377909682

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/tf_test_util.py
==================
69c70763;jax authors;2021-06-07 06:30:34 -0700;Merge pull request #6891 from skye:peter_comments
PiperOrigin-RevId: 377900628

==
==================
4fc4a3e4;Adam Paszke;2021-06-07 12:35:23 +0000;Add support for sequential loop resources in xmap
This is especially useful because it makes it easy to implement
"memory-limited vmaps". It might also come in handy for pipelining,
as that could represent the microbatching loop.

Note that at the moment the xmap has to be a pure map along all axes
that are assigned to loop resources. No collectives are supported.

==

jax/_src/lax/control_flow.py
jax/experimental/maps.py
tests/xmap_test.py
==================
f0e55e3c;erwin coumans;2021-06-04 17:26:27 -0700;move #endif so that Windows doesn't have GetXCR0EAX defined twice (erroring out)

==

jaxlib/cpu_feature_guard.c
==================
0c102db5;jax authors;2021-06-04 09:40:43 -0700;Merge pull request #6892 from gnecula:tf_cplx
PiperOrigin-RevId: 377529860

==
==================
d243258b;George Necula;2021-06-04 11:02:50 +0300;[jax2tf] Implement inequalities and friends for complex numbers.
This requires re-using JAX's lowering rule for comparisons of
complex numbers to use lexicographic comparison.

==

CHANGELOG.md
jax/_src/lax/lax.py
jax/experimental/jax2tf/g3doc/jax_primitives_coverage.md
jax/experimental/jax2tf/g3doc/primitives_with_limited_support.md
jax/experimental/jax2tf/g3doc/primitives_with_limited_support.md.template
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/jax2tf_limitations.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
de9f5572;jax authors;2021-06-04 07:49:44 -0700;Merge pull request #6895 from gnecula:tf_uint64
PiperOrigin-RevId: 377510835

==
==================
ede457f1;George Necula;2021-06-04 15:29:54 +0300;[jax2tf] Fix bug with max_int for uint64

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/jax2tf_limitations.py
==================
293ca655;George Necula;2021-06-03 21:17:20 -0700;[jax2tf] Update limitations to account for tf.math improvements for trigonometric functions.
PiperOrigin-RevId: 377436077

==

jax/_src/lax/lax.py
jax/experimental/jax2tf/g3doc/primitives_with_limited_support.md
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/jax2tf_limitations.py
==================
1912bd97;jax authors;2021-06-03 18:29:31 -0700;Merge pull request #6673 from hypercubestart:master
PiperOrigin-RevId: 377417011

==
==================
4a858771;Skye Wanderman-Milne;2021-06-03 14:19:22 -0700;Clean up multi-process guide language.
Many thanks to hawkinsp@ for these suggestions.

==

docs/multi_process.md
==================
9d677e66;jax authors;2021-06-03 12:51:57 -0700;Merge pull request #6875 from gnecula:tf_x32
PiperOrigin-RevId: 377351830

==
==================
5dc9df38;Peter Hawkins;2021-06-03 12:47:45 -0700;[JAX] Attach a priority to JAX backends. Use the backend with the highest priority when choosing a default backend.
PiperOrigin-RevId: 377351657

==

jax/lib/xla_bridge.py
==================
98e4e408;jax authors;2021-06-03 10:48:22 -0700;Merge pull request #6879 from jakevdp:fix-tuple-returns
PiperOrigin-RevId: 377324305

==
==================
21dbe30f;Jake VanderPlas;2021-06-03 09:14:39 -0700;BUG: return JAX arrays rather than NumPy arrays in jnp.unravel_index

==

jax/_src/numpy/lax_numpy.py
==================
b2c7ae72;Peter Hawkins;2021-06-03 06:49:27 -0700;[JAX] Catch all exceptions from backend initialization.
PiperOrigin-RevId: 377278098

==

jax/lib/xla_bridge.py
==================
c7a98b3b;Adam Paszke;2021-06-03 06:36:57 -0700;Fix a typo in shape checks for associative_scan
Fixes #6884.

PiperOrigin-RevId: 377276183

==

jax/_src/lax/control_flow.py
==================
39526a0d;jax authors;2021-06-03 06:16:39 -0700;Merge pull request #6873 from ROCmSoftwarePlatform:fix_rocm_linalg
PiperOrigin-RevId: 377273325

==
==================
bca3d61b;Adam Paszke;2021-06-03 04:13:02 -0700;Insert xmap SPMD axes into pjit sharding annotations
This should let us emit good XLA annotations for `xmap(pjit)`. Previously
we might have been overestimating the set of replicated mesh dimensions.

PiperOrigin-RevId: 377259226

==

jax/experimental/maps.py
jax/experimental/pjit.py
jax/interpreters/batching.py
jax/interpreters/pxla.py
tests/pjit_test.py
==================
ecab743e;jax authors;2021-06-03 02:47:21 -0700;Merge pull request #6877 from hawkinsp:tracebacks
PiperOrigin-RevId: 377247694

==
==================
c0d5256b;jax authors;2021-06-03 02:38:30 -0700;Merge pull request #6880 from skye:cloud_tpu_readme
PiperOrigin-RevId: 377246573

==
==================
9c6a77ee;jax authors;2021-06-03 02:23:37 -0700;Merge pull request #6827 from gnecula:tf_poly2
PiperOrigin-RevId: 377244801

==
==================
2ccda70d;George Necula;2021-05-20 14:07:52 +0300;[jax2tf] Improved coverage of shape polymorphism by allowing dimension polynomials.
Previously we allowed a dimension variable in lieu of a dimension. Now we
allow multi-variate dimension polynomials. These polynomials overload addition, subtraction,
multiplication. They also partially support equality and inequality checking.

Equality and inequality are supported only when the operation result is the
same for all valuations of variables greater than 0. For example, `a == a`,
`a * b + 1 == 1 + b * a`, `a >= 1`, `2 * a + b >= 3`, `a >= a`. However, for
the following a `core.InconclusiveDimensionOperation` is raised: `a = b`, `a
>= 2`.

Division  is supported only in the cases when either there is no remainder,
or the divisor is a constant.

This change allows us to support more general cases of `jnp.reshape(-1)`,
such as those used in the internal implementation of `random_gamma`:

```
   y = x.reshape((2, -1))
   z = ... y ...
   return z.reshape(x.shape)
```

==

jax/_src/lax/lax.py
jax/_src/numpy/lax_numpy.py
jax/core.py
jax/experimental/jax2tf/README.md
jax/experimental/jax2tf/examples/saved_model_main_test.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/shape_poly.py
jax/experimental/jax2tf/tests/shape_poly_test.py
==================
1fc51ef7;jax authors;2021-06-03 00:40:11 -0700;Merge pull request #6883 from gnecula:tf_x32_more
PiperOrigin-RevId: 377232091

==
==================
d03d849a;George Necula;2021-06-02 21:03:16 +0300;[jax2tf] Fix the 32/64-bit behavior to follow JAX rules
JAX and TensorFlow have different behavior w.r.t. 32-64 bit
computations. This PR cleans up the handling of types in jax2tf
to ensure that we follow the same behavior in jax2tf and in JAX.

This means that f_jax(args) always does the computation with the
same precision as jax2tf.convert(f_jax)(args). This may mean that
the result of the conversion depends on the value of JAX_ENABLE_x64.

See README.md for more details.

==

CHANGELOG.md
jax/experimental/jax2tf/README.md
jax/experimental/jax2tf/__init__.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/control_flow_ops_test.py
jax/experimental/jax2tf/tests/jax2tf_test.py
jax/experimental/jax2tf/tests/savedmodel_test.py
jax/experimental/jax2tf/tests/shape_poly_test.py
jax/experimental/jax2tf/tests/tf_test_util.py
==================
3e9b13b0;George Necula;2021-06-02 12:08:15 +0300;Expanded the type promotion documentation with a confusing case
I filed this as a bug, but I am assuming that it is not easy to fix, so
I also change the documentation.

Bug: 6874

==

docs/type_promotion.rst
==================
8a65ff8c;Skye Wanderman-Milne;2021-06-02 16:47:48 -0700;Update cloud_tpu_colabs README to reflect Cloud TPU VM announcement.

==

cloud_tpu_colabs/README.md
==================
3954ba39;jax authors;2021-06-02 14:21:55 -0700;Merge pull request #6878 from zhangqiaorjc:disable_gmres
PiperOrigin-RevId: 377143472

==
==================
ed96e530;Adam Paszke;2021-06-02 14:02:47 -0700;Fix incorrect handling of axis_index_groups in parallel primitive fallbacks
PiperOrigin-RevId: 377139424

==

jax/_src/lax/parallel.py
tests/pmap_test.py
==================
a2209c9b;jax authors;2021-06-02 14:00:08 -0700;Merge pull request #6608 from tlu7:scipy-special-lpmn
PiperOrigin-RevId: 377138669

==
==================
730ec1b7;Qiao Zhang;2021-06-02 13:56:08 -0700;Disable test_gmres_against_scipy due to LLVM changes.

==

tests/lax_scipy_sparse_test.py
==================
2882286b;Peter Hawkins;2021-06-02 15:22:50 -0400;Add a --jax_traceback_filtering flag to control the traceback filtering mode.
Add a new traceback filtering mode that uses __tracebackhide__, and use it in IPython.

==

CHANGELOG.md
jax/_src/config.py
jax/_src/traceback_util.py
tests/errors_test.py
==================
a02bf592;tlu7;2021-06-02 11:37:37 -0700;Adds associated Legendre functions of the first kind.
Co-authored-by: Jake VanderPlas <jakevdp@google.com>

==

docs/jax.scipy.rst
jax/_src/scipy/special.py
jax/scipy/special.py
tests/lax_scipy_test.py
==================
ffac40a2;Tom Hennigan;2021-05-26 19:14:37 +0000;Add lax.linalg.tridiagonal_solve(..), lowering to cusparse_gtsv2<T>() on GPU.
Fixes #6830.

==

jax/_src/lax/linalg.py
jax/interpreters/xla.py
jax/lax/linalg.py
jaxlib/cusparse.cc
jaxlib/cusparse.py
tests/linalg_test.py
==================
46cc6545;Peter Hawkins;2021-06-02 06:24:42 -0700;Move jax.abstract_arrays to jax._src.abstract_arrays.
PiperOrigin-RevId: 377044255

==

docs/notebooks/Common_Gotchas_in_JAX.ipynb
docs/notebooks/Common_Gotchas_in_JAX.md
docs/notebooks/How_JAX_primitives_work.ipynb
docs/notebooks/How_JAX_primitives_work.md
jax/__init__.py
jax/_src/abstract_arrays.py
jax/_src/lax/lax.py
jax/abstract_arrays.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
tests/core_test.py
tests/jax_jit_test.py
==================
f2eab9c9;jax authors;2021-06-02 05:01:21 -0700;Merge pull request #6834 from k-w-w:patch-3
PiperOrigin-RevId: 377033195

==
==================
6219b194;George Necula;2021-06-02 13:28:48 +0300;Update savedmodel_test.py
Minor change, just to trigger a copybara re-import.
==

jax/experimental/jax2tf/tests/savedmodel_test.py
==================
ccc1ba70;George Necula;2021-06-02 12:17:03 +0300;Update savedmodel_test.py
I added a cast to `float32`. This is needed because of an obscure bug in JAX (#6874).
==

jax/experimental/jax2tf/tests/savedmodel_test.py
==================
ab52da06;jax authors;2021-06-02 01:26:16 -0700;Merge pull request #6053 from Jakob-Unfried:master
PiperOrigin-RevId: 377007642

==
==================
5b3d2034;Stephan Hoyer;2021-06-02 01:05:47 -0700;Merge branch 'master' into master

==
==================
9580fd1c;George Necula;2021-06-02 00:03:29 -0700;[jax2tf] Update limitations to account for tf.math improvements for division.
PiperOrigin-RevId: 376997282

==

jax/experimental/jax2tf/g3doc/primitives_with_limited_support.md
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/jax2tf_limitations.py
jax/experimental/jax2tf/tests/jax2tf_test.py
jax/experimental/pjit.py
==================
8e6101c6;jax authors;2021-06-01 22:50:12 -0700;Merge pull request #6866 from gnecula:tf_pjit
PiperOrigin-RevId: 376989780

==
==================
012da545;Reza Rahimi;2021-06-02 04:03:06 +0000;add gpu to the rocsolver backend

==

jax/_src/lax/linalg.py
==================
dca61aa7;kathywu;2021-06-01 19:14:24 -0700;address comments and update documentation

==

jax/experimental/jax2tf/README.md
jax/experimental/jax2tf/tests/savedmodel_test.py
==================
87abab71;jax authors;2021-06-01 14:47:15 -0700;Merge pull request #6785 from GregCT:changelist/373551581
PiperOrigin-RevId: 376922795

==
==================
c28b472a;Luke Pfister;2021-06-01 15:28:25 -0600;Add test to ensure gradient is finite

==

tests/image_test.py
==================
edd203e3;jax authors;2021-06-01 12:58:39 -0700;Merge pull request #6726 from njunge94:auxiliary_solver_data
PiperOrigin-RevId: 376899659

==
==================
d0983912;Stephan Hoyer;2021-06-01 12:42:55 -0700;Fix wrong method name

==

tests/scipy_optimize_test.py
==================
7db0c56a;Peter Hawkins;2021-06-01 11:43:54 -0700;[JAX] Change how JAX manages XLA platforms.
* Combine the concepts of "platform" and "backend". The main upshot of this is that the tpu_driver backend requires users to write `jit(..., backend="tpu_driver")` if mixing CPU and TPU execution, however I doubt users are writing that because it didn't work to mix CPU and tpu_driver before.
* Initialize all platforms at startup, rather than lazily initializing platforms on demand. This makes it easy to do things like "list the available platforms".
* Don't use two levels of caching. Cache backends only in xla_bridge.py, not xla_client.py.

PiperOrigin-RevId: 376883261

==

jax/experimental/host_callback.py
jax/interpreters/xla.py
jax/lib/__init__.py
jax/lib/xla_bridge.py
==================
87332d01;jax authors;2021-06-01 06:47:56 -0700;Merge pull request #6861 from ho-oto:patch-1
PiperOrigin-RevId: 376821439

==
==================
8c1e1464;jax authors;2021-06-01 05:59:47 -0700;Merge pull request #6864 from gnecula:tf_einsum
PiperOrigin-RevId: 376814238

==
==================
9d2491cc;jax authors;2021-06-01 05:52:41 -0700;Merge pull request #6856 from lkhphuc:patch-1
PiperOrigin-RevId: 376813353

==
==================
973171bb;George Necula;2021-06-01 14:32:59 +0300;[jax2tf] Add support for pjit.

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/sharding_test.py
jax/experimental/pjit.py
jax/test_util.py
tests/pjit_test.py
tests/xmap_test.py
==================
4fb97159;jax authors;2021-06-01 02:16:22 -0700;Merge pull request #6855 from PhilipVinc:logsumexp
PiperOrigin-RevId: 376786399

==
==================
c07d54aa;George Necula;2021-05-11 08:48:20 +0300;[jax2tf] Add shape polymorphism support for jnp.einsum.
The main problem was that jnp.einsum uses opt_einsum.contract_path
to parse the specification string and compute the order or the
contractions. This function wants to compute the sizes of operands
and intermediate results, and will fail if some dimensions are
polymorphic.

The (partial) solution here is to replace the operands with
jax.ShapeDtypeStruct with a fixed size for all dimension variables,
then call opt_einsum.contract_path and use that result if there
is only one contraction. We abort if there are multiple contractions.
This behavior is clearly sound. If there were multiple contractions,
perhaps their order would be different with different dimension sizes.

==

jax/_src/numpy/lax_numpy.py
jax/experimental/jax2tf/shape_poly.py
jax/experimental/jax2tf/tests/shape_poly_test.py
==================
c0c8e0d0;Filippo Vicentini;2021-05-31 16:00:53 +0200;make logsumexp work with complex numbers

==

jax/_src/scipy/special.py
tests/lax_scipy_test.py
==================
160c3e93;ho-oto;2021-05-31 22:18:24 +0900;rename v to vh

==

jax/_src/numpy/linalg.py
==================
e0f285fd;jax authors;2021-05-31 02:30:04 -0700;Merge pull request #6839 from jakevdp:reshape-doc
PiperOrigin-RevId: 376645137

==
==================
f30a36db;Phúc Lê Khắc;2021-05-28 17:45:30 +0100;Typo.
Update Common_Gotchas_in_JAX.md

==

docs/notebooks/Common_Gotchas_in_JAX.ipynb
docs/notebooks/Common_Gotchas_in_JAX.md
==================
44b1791b;jax authors;2021-05-27 20:33:18 -0700;Copybara import of the project:
--
8226dfc8a4974b4c8031ee267fa5327e778140ee by Nicholas Junge <nicholas.junge@web.de>:

Handle negative values for list-like sections in jnp.split

PiperOrigin-RevId: 376302305

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
5065e1bb;Rebecca Chen;2021-05-27 20:09:29 -0700;Add missing typing.Optional type annotations to function parameters.
PiperOrigin-RevId: 376300297

==

jax/_src/lax/other.py
jax/_src/profiler.py
jax/interpreters/pxla.py
jax/interpreters/sharded_jit.py
==================
dded0e38;Jake VanderPlas;2021-05-27 11:12:57 -0700;DOC: add notes to jax.numpy docstrings about returning copies rather than views

==

jax/_src/numpy/lax_numpy.py
==================
44fcd710;jax authors;2021-05-27 17:55:04 -0700;Merge pull request #6851 from njunge94:split-fix
PiperOrigin-RevId: 376286728

==
==================
8226dfc8;Nicholas Junge;2021-05-27 18:25:18 +0200;Handle negative values for list-like sections in jnp.split

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
4ad332e8;jax authors;2021-05-26 14:02:05 -0700;Merge pull request #6841 from colemanliyah:fix_fingerprint
PiperOrigin-RevId: 376023432

==
==================
b68f2c99;Liyah Coleman;2021-05-26 19:03:28 +0000;fixed fingerprint debugging message to be compatible with current min jaxlib version

==

jax/interpreters/pxla.py
==================
7150a100;jax authors;2021-05-26 11:21:44 -0700;Merge pull request #6835 from jakevdp:sharp-bits
PiperOrigin-RevId: 375988125

==
==================
9deeb733;jax authors;2021-05-26 11:17:57 -0700;Merge pull request #6836 from jakevdp:numpy-doc
PiperOrigin-RevId: 375987921

==
==================
0da0caa5;jax authors;2021-05-26 11:14:28 -0700;Merge pull request #6840 from hawkinsp:ci
PiperOrigin-RevId: 375987148

==
==================
f07ccf00;Peter Hawkins;2021-05-26 13:43:38 -0400;Use short tracebacks in CI builds.
Often useful information is hard to see in the GitHub UI with the default traceback verbosity of pytest.

==

.github/workflows/ci-build.yaml
==================
d844609c;Jake VanderPlas;2021-05-26 09:03:42 -0700;DOC: add section to Sharp Bits discussing implicit list conversions

==

docs/notebooks/Common_Gotchas_in_JAX.ipynb
docs/notebooks/Common_Gotchas_in_JAX.md
==================
ba422f2a;jax authors;2021-05-26 09:00:20 -0700;Merge pull request #6825 from colemanliyah:master
PiperOrigin-RevId: 375955559

==
==================
03a1ee92;Gregory Thornton;2021-05-13 12:08:06 +0100;Update Jax linesearch to behave more like Scipy

==

jax/_src/scipy/optimize/bfgs.py
jax/_src/scipy/optimize/line_search.py
tests/scipy_optimize_test.py
==================
62603fde;George Necula;2021-05-26 04:02:31 -0700;Copybara import of the project:
--
746a232632652233f649b15d94f3ed2fd0ccc1fb by George Necula <gcnecula@gmail.com>:

[jax2tf] Updates known limitations.

This PR fixes several issues:
  * It updates the documentation of the known limitations
  * Increases the numerical tolerance for conv_general_dilated on GPU, to
  address test flakiness.
  * Adds a workaround for a TF bug that results in a crash when
  trying to extract the optimized HLO.

--
4302101aed30a2c7625a2dd5acbe1ca17f9540e4 by George Necula <gcnecula@gmail.com>:

Added limitation for dot_general on GPU

--
207f66a970b7f596e1b265c7aa91fa56e27e7d51 by George Necula <gcnecula@gmail.com>:

Added limitation for dot_general on GPU

COPYBARA_INTEGRATE_REVIEW=https://github.com/google/jax/pull/6837 from gnecula:tf_adjust_lim 207f66a970b7f596e1b265c7aa91fa56e27e7d51
PiperOrigin-RevId: 375910042

==

jax/experimental/jax2tf/g3doc/primitives_with_limited_support.md
jax/experimental/jax2tf/g3doc/primitives_with_limited_support.md.template
jax/experimental/jax2tf/tests/jax2tf_limitations.py
jax/experimental/jax2tf/tests/tf_test_util.py
==================
ada35ae0;George Necula;2021-05-26 01:13:41 -0700;[jax2tf] Update limitations to account for tf.math.igamma improvements
PiperOrigin-RevId: 375888440

==

jax/experimental/jax2tf/g3doc/primitives_with_limited_support.md
jax/experimental/jax2tf/tests/jax2tf_limitations.py
==================
80a310f8;Jake VanderPlas;2021-05-25 16:54:28 -0700;DOC: add note about array views in numpy docs

==

docs/jax.numpy.rst
==================
00e03024;Katherine Wu;2021-05-25 16:07:09 -0700;Enable custom gradients SavedModel option in test

==

jax/experimental/jax2tf/tests/savedmodel_test.py
==================
3b973ac0;jax authors;2021-05-25 14:22:07 -0700;Merge pull request #6822 from hawkinsp:take
PiperOrigin-RevId: 375794394

==
==================
0308527f;Nicholas Junge;2021-05-25 18:00:46 +0200;Add auxiliary data support in custom_linear_solve

==

jax/_src/lax/control_flow.py
tests/lax_control_flow_test.py
==================
369ca134;Liyah Coleman;2021-05-24 17:31:20 +0000;add fingerprint to debugging log

==

jax/interpreters/pxla.py
==================
d81a13cc;jax authors;2021-05-24 13:46:21 -0700;Merge pull request #6826 from akbir:update_bazel_mac_arm
PiperOrigin-RevId: 375548691

==
==================
dc81610b;akbir khan;2021-05-24 21:13:43 +0100;updated to official bazel.4.1.0

==

build/build.py
==================
0573169a;jax authors;2021-05-24 10:09:14 -0700;Merge pull request #6821 from hawkinsp:versions
PiperOrigin-RevId: 375499903

==
==================
dacf31f2;Peter Hawkins;2021-05-24 11:18:37 -0400;Check for NumPy and SciPy versions during jaxlib builds.

==

build/build.py
==================
c2b0f72d;Peter Hawkins;2021-05-24 11:59:41 -0400;Fix handling of empty dimensions in jnp.take().

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
07029549;jax authors;2021-05-24 08:03:28 -0700;Merge pull request #6820 from hawkinsp:xla
PiperOrigin-RevId: 375476354

==
==================
a64d685e;George Necula;2021-05-24 07:56:30 -0700;[jax2tf] Cleanup limitations for `rev` in light of improvements in TensorFlow.
PiperOrigin-RevId: 375475438

==

jax/experimental/jax2tf/g3doc/primitives_with_limited_support.md
jax/experimental/jax2tf/tests/jax2tf_limitations.py
==================
e87173e8;Peter Hawkins;2021-05-24 10:43:40 -0400;Update XLA.

==

WORKSPACE
==================
6743d771;jax authors;2021-05-24 06:05:00 -0700;Merge pull request #6819 from lgeiger:replace-pow
PiperOrigin-RevId: 375461396

==
==================
3a2e80ef;Lukas Geiger;2021-05-24 10:43:35 +0100;Replace `pow()` with `srqt()` or `square()` where possible

==

jax/_src/random.py
jax/_src/scipy/stats/norm.py
==================
7ea7cea6;jax authors;2021-05-23 22:58:35 -0700;Merge pull request #6816 from gnecula:bfloat16_random
PiperOrigin-RevId: 375417596

==
==================
89d208b6;jax authors;2021-05-23 11:13:57 -0700;Merge pull request #6807 from lgeiger:reuse-jvp-ans
PiperOrigin-RevId: 375366940

==
==================
70f0110b;George Necula;2021-05-23 19:32:45 +0300;Fix dtypes.issubdtype when called with "bfloat16" (as string)
Fixes: #6813

==

jax/_src/dtypes.py
tests/random_test.py
==================
74638a45;George Necula;2021-05-22 11:02:26 -0700;[jax2tf] Improve conversion of sign and abs, to account for TF limitations
PiperOrigin-RevId: 375274010

==

jax/experimental/jax2tf/g3doc/primitives_with_limited_support.md
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/jax2tf_limitations.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/shape_poly_test.py
==================
6d77b9f4;Qiao Zhang;2021-05-21 14:35:57 -0700;[JAX:TFRT:CPU] Fix TfrtCpuClient::BufferFromHostBuffer bug when shape has non-default layout (e.g., from TPU).
PiperOrigin-RevId: 375165974

==

tests/api_test.py
==================
56e9f7cb;jax authors;2021-05-21 12:30:33 -0700;Merge pull request #5813 from google:ad-oob-docs
PiperOrigin-RevId: 375140429

==
==================
b04d0c75;Jake VanderPlas;2021-05-21 12:24:28 -0700;sync common gotchas notebook

==

docs/notebooks/Common_Gotchas_in_JAX.ipynb
==================
8c0aa388;James Bradbury;2021-02-23 03:22:21 -0800;add note on autodiff of OOB indexing

==

docs/notebooks/Common_Gotchas_in_JAX.md
==================
b7f91896;jax authors;2021-05-21 12:17:50 -0700;Merge pull request #6808 from jakevdp:fix-broken-link
PiperOrigin-RevId: 375137941

==
==================
b6247312;Jake VanderPlas;2021-05-21 11:32:21 -0700;Fix broken link in custom derivatives notebook

==

docs/notebooks/Custom_derivative_rules_for_Python_code.ipynb
docs/notebooks/Custom_derivative_rules_for_Python_code.md
==================
387d629b;jax authors;2021-05-21 10:41:00 -0700;Merge pull request #6806 from jakevdp:doc-cpu-warning
PiperOrigin-RevId: 375116363

==
==================
971eb86f;Lukas Geiger;2021-05-21 15:07:35 +0100;Reduce redundant calculations of `tan`, `erfc` and `rsqrt` jvp

==

jax/_src/lax/lax.py
==================
ff7c2afc;Jake VanderPlas;2021-05-21 10:03:50 -0700;DOC: directly silence GPU warning

==

docs/notebooks/quickstart.ipynb
docs/notebooks/quickstart.md
==================
cbb2742b;jax authors;2021-05-21 10:01:19 -0700;Merge pull request #6802 from lgeiger:np-resize
PiperOrigin-RevId: 375107309

==
==================
f523987e;jax authors;2021-05-21 09:17:39 -0700;Merge pull request #6798 from saeta:bug-6791
PiperOrigin-RevId: 375098090

==
==================
4905aae7;jax authors;2021-05-21 09:10:17 -0700;Merge pull request #6804 from gnecula:tf_cumsum
PiperOrigin-RevId: 375097262

==
==================
f5cd183f;George Necula;2021-05-21 19:02:11 +0300;Update jax2tf_test.py

==

jax/experimental/jax2tf/tests/jax2tf_test.py
==================
6e8cb0ae;George Necula;2021-05-21 17:56:52 +0300;Merge branch 'master' into bug-6791

==
==================
e7766838;George Necula;2021-05-21 11:10:41 +0300;Minor cleanup of the translation rules for cumred primitives

==

jax/_src/lax/control_flow.py
==================
04e5914f;jax authors;2021-05-21 05:30:45 -0700;Merge pull request #6720 from gnecula:tf_enable_xla
PiperOrigin-RevId: 375064732

==
==================
b3411cc9;George Necula;2021-05-21 11:42:44 +0300;Update jax2tf_test.py
Fix the type of np.zeros to be float32. 
Also, replaced `jnp.zeros` with `np.zeros` because technically the argument to `f_tf` should be a TF value, not a JAX value.
==

jax/experimental/jax2tf/tests/jax2tf_test.py
==================
b4b02cb7;Lukas Geiger;2021-05-21 09:24:41 +0100;Add `jnp.resize`

==

docs/jax.numpy.rst
jax/_src/numpy/lax_numpy.py
jax/numpy/__init__.py
tests/lax_numpy_test.py
==================
2ad9c0c3;George Necula;2021-05-11 11:11:37 +0300;[jax2tf] Fix the scoping of the enable_xla conversion parameter
Previously, the global enable_xla flag was set upon entry to
`jax.convert`. It should instead be set only for the duration
of the just-in-time conversion, which may happen later when
the converted function is invoked.

==

CHANGELOG.md
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/jax2tf_test.py
==================
729028f8;George Necula;2021-05-21 11:17:32 +0300;Update jax2tf.py

==

jax/experimental/jax2tf/jax2tf.py
==================
eabe631f;George Necula;2021-05-21 11:16:00 +0300;Update jax2tf.py
Minor typo fix
==

jax/experimental/jax2tf/jax2tf.py
==================
9f61f41e;Luke Pfister;2021-05-20 21:49:41 -0600;prevent nans in _fill_lanczos_kernel

==

jax/_src/image/scale.py
==================
1e9c7e49;jax authors;2021-05-20 20:07:36 -0700;Merge pull request #6796 from skye:multi_process_guide
PiperOrigin-RevId: 375002136

==
==================
9363d2f3;jax authors;2021-05-20 19:57:04 -0700;Merge pull request #6803 from lgeiger:np-round-docs
PiperOrigin-RevId: 375000982

==
==================
40cc1ec2;Skye Wanderman-Milne;2021-05-19 17:22:49 -0700;Add multi-process guide to docs.
This is the first section of the internal doc I drafted. I still need
to add the "Common multi-process idioms" and "Multi-host workflows"
sections.

==

docs/index.rst
docs/multi_process.md
==================
a5a1f62c;Lukas Geiger;2021-05-21 01:43:56 +0100;Improve docs for `jnp.round` and export `jnp.round_`

==

docs/jax.numpy.rst
jax/_src/numpy/lax_numpy.py
jax/numpy/__init__.py
==================
558536ed;Brennan Saeta;2021-05-20 16:08:40 -0700;Respond to comments.

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/jax2tf_test.py
==================
5cd416a3;jax authors;2021-05-20 13:13:09 -0700;Merge pull request #6777 from paul-tqh-nguyen:numpy_poly
PiperOrigin-RevId: 374935887

==
==================
bbcaec4a;Paul Nguyen;2021-05-18 10:18:58 -0500;Initial implementation of jax.numpy.poly
This is an initial jax.numpy.poly implementation. It is tested by testPoly in the tests/lax_numpy_test.py test file.

==

docs/jax.numpy.rst
jax/_src/numpy/lax_numpy.py
jax/numpy/__init__.py
tests/lax_numpy_test.py
==================
9ea50b4e;George Necula;2021-05-20 09:46:57 -0700;[jax2tf] Update limitations to account for tf.math.minimum improvements
PiperOrigin-RevId: 374891187

==

jax/experimental/jax2tf/g3doc/primitives_with_limited_support.md
jax/experimental/jax2tf/tests/jax2tf_limitations.py
==================
fd7cf385;Marc van Zee;2021-05-20 06:22:11 -0700;Improves some error messages and ensure we only use TF pool ops for reduce_window if XLA is disabled.
PiperOrigin-RevId: 374856671

==

jax/experimental/jax2tf/jax2tf.py
==================
e06bf50a;Brennan Saeta;2021-05-19 20:46:55 -0700;[jax2tf] Initial support for kwargs.
Fixes #6791

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/jax2tf_test.py
==================
7a099bf7;Peter Hawkins;2021-05-19 15:11:32 -0700;Mark PyInit_cpu_feature_guard symbol as exported.
Otherwise it may get stripped out by -fvisibility=hidden.

PiperOrigin-RevId: 374739406

==

jaxlib/cpu_feature_guard.c
==================
3319cd0e;jax authors;2021-05-19 13:35:01 -0700;Merge pull request #6740 from hawkinsp:scatter
PiperOrigin-RevId: 374718181

==
==================
ded6dd3e;jax authors;2021-05-19 13:01:33 -0700;Merge pull request #6793 from hawkinsp:tuplereplace
PiperOrigin-RevId: 374711005

==
==================
b03466a3;Peter Hawkins;2021-05-19 12:54:59 -0700;Remove jax/BUILD file.
This Bazel build file is unused; we only use Bazel to build jaxlib, which does not include any files from jax/.

PiperOrigin-RevId: 374709682

==

jax/BUILD
jaxlib/BUILD
jaxlib/jax.bzl
==================
d041110c;jax authors;2021-05-19 12:41:31 -0700;Merge pull request #6794 from hawkinsp:xla
PiperOrigin-RevId: 374706657

==
==================
5a185726;jax authors;2021-05-19 12:36:28 -0700;Merge pull request #6792 from hawkinsp:conv
PiperOrigin-RevId: 374705543

==
==================
2c1564e9;Peter Hawkins;2021-05-19 15:35:23 -0400;Update XLA.

==

WORKSPACE
==================
e709a2ea;Peter Hawkins;2021-05-19 15:29:44 -0400;Delete tuple_replace.
It is unused.

==

jax/_src/util.py
==================
9af61292;Peter Hawkins;2021-05-19 15:22:42 -0400;Relax test tolerance for complex128 np.convolve tests.
The tests are slightly flaky on GPU due to autotuning.

==

tests/lax_numpy_test.py
==================
49421d02;jax authors;2021-05-19 11:57:19 -0700;Merge pull request #5899 from hawkinsp:eigh
PiperOrigin-RevId: 374696800

==
==================
99de57f5;Peter Hawkins;2021-03-02 09:12:48 -0500;Enable Hermitian Eigendecompositions on TPU.

==

jax/_src/lax/linalg.py
jax/experimental/jax2tf/tests/jax2tf_limitations.py
tests/linalg_test.py
==================
d481013f;Peter Hawkins;2021-05-19 10:58:05 -0700;Add a CPU feature guard module to JAX.
To make sure that the CPU feature guard happens first, before any other code that may use instructions that do not exist, use a separate C extension module.

Fixes https://github.com/google/jax/issues/6671

PiperOrigin-RevId: 374683190

==

build/BUILD.bazel
build/build_wheel.py
jax/BUILD
jax/lib/__init__.py
jaxlib/BUILD
jaxlib/cpu_feature_guard.c
==================
f0c74270;Jakob Unfried;2021-03-12 23:19:20 +0100;add L-BFGS optimizer

==

jax/_src/scipy/optimize/_lbfgs.py
jax/_src/scipy/optimize/line_search.py
jax/_src/scipy/optimize/minimize.py
tests/scipy_optimize_test.py
==================
ae35a095;jax authors;2021-05-19 10:16:31 -0700;Merge pull request #6782 from hawkinsp:m1
PiperOrigin-RevId: 374672730

==
==================
3d67782c;jax authors;2021-05-19 06:40:07 -0700;Merge pull request #6786 from hawkinsp:fft
PiperOrigin-RevId: 374634003

==
==================
caad556a;Peter Hawkins;2021-05-19 09:24:17 -0400;Update PocketFFT archive to point to Github.
Bazel has difficulty downloading from the gitlab instance, leading to a warning. Use the Github mirror instead.

==

third_party/pocketfft/workspace.bzl
==================
3ec5bc50;jax authors;2021-05-19 02:20:01 -0700;Merge pull request #6776 from gnecula:tf_mix
PiperOrigin-RevId: 374601500

==
==================
1f83460b;George Necula;2021-05-19 01:48:31 -0700;[jax2tf] Improve conversion of pad when enable_xla=True, add tests.
If enable_xla we should directly use the XLA conversion, without
trying to see whether the primitive can actually be converted
to non XLA TF ops. This is happening elsewhere, but it was not
happening for pad.

Also discovered that we were never turning enable_xla=False in
tests, even when we had special harnesses for it.

This is another attempt for the rolled-back #6722.

PiperOrigin-RevId: 374597824

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/jax2tf_limitations.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
a27109d1;George Necula;2021-05-18 17:13:09 +0300;[jax2tf] Added documentation explaining how to handle undefined TF ops
Added a test case showing how to mix compileable and non-compileable code.

==

jax/experimental/jax2tf/README.md
jax/experimental/jax2tf/tests/savedmodel_test.py
==================
86887a21;Peter Hawkins;2021-05-18 21:53:31 -0400;Add Mac M1 support to build.py.

==

build/build.py
==================
bcd5deb2;Luke Pfister;2021-05-18 15:22:06 -0600;Prevent nans in scale_and_translate
fixes #6780

==

jax/_src/image/scale.py
==================
683289c4;jax authors;2021-05-18 09:31:53 -0700;Merge pull request #6764 from hawkinsp:argmax
PiperOrigin-RevId: 374437439

==
==================
6cc440b7;Peter Hawkins;2021-05-17 09:48:46 -0400;Fix handling of NaNs in GPU argmax translation rule.

==

jax/_src/lax/lax.py
tests/lax_test.py
==================
bf631070;George Necula;2021-05-17 22:33:47 -0700;[jax2tf] Add support for preferred_element_type for convolutions.
PiperOrigin-RevId: 374347868

==

jax/experimental/jax2tf/g3doc/jax_primitives_coverage.md
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/primitive_harness.py
==================
6a95a8cf;jax authors;2021-05-17 18:16:26 -0700;Merge pull request #6771 from skye:version
PiperOrigin-RevId: 374321498

==
==================
63dbb99a;Skye Wanderman-Milne;2021-05-17 17:48:46 -0700;Update README, etc. for jaxlib 0.1.67 release

==

README.md
jaxlib/version.py
setup.py
==================
58a5ef79;jax authors;2021-05-17 14:06:11 -0700;Merge pull request #6766 from jakevdp:py39
PiperOrigin-RevId: 374276022

==
==================
d3926149;jax authors;2021-05-17 12:51:35 -0700;Merge pull request #6748 from hawkinsp:complexconv
PiperOrigin-RevId: 374259292

==
==================
bea18073;jax authors;2021-05-17 12:40:25 -0700;Merge pull request #6767 from skye:workspace
PiperOrigin-RevId: 374256702

==
==================
c5e199a4;Skye Wanderman-Milne;2021-05-17 12:15:54 -0700;Update WORKSPACE for jaxlib 0.1.67

==

WORKSPACE
==================
ed66dd4d;Jake VanderPlas;2021-05-17 10:10:52 -0700;CI: test Python 3.9 with numpy dispatch test

==

.github/workflows/ci-build.yaml
==================
149f7fa6;George Necula;2021-05-17 09:36:15 -0700;Tighten the numerical tolerances for jax2tf.
We want to focus on tolerances for the TF compiled mode. So, we
make the `custom_numeric` apply by default only to `eager` and `graph` modes.

Getting this done required iterating through tests and we used this
opportunity to tighten the tolerances and apply
them more narrowly, e.g., only on CPU or GPU. The tolerances are still
somewhat loose, mainly for linear algebra primitives.

PiperOrigin-RevId: 374215224

==

jax/experimental/jax2tf/tests/jax2tf_limitations.py
jax/experimental/jax2tf/tests/stax_test.py
==================
afe5ec3d;George Necula;2021-05-17 08:18:27 -0700;Improve accuracy of the jax2tf convolution conversion.
Part of the discrepancies were due to JAX using a workaround for
missing complex convolutions on CPU/GPU, while jax2tf was not using
it. We apply the same lowering as JAX, on all platforms.

This allows us to remove custom numeric tolerances and enables complex
convolutions on GPU.

PiperOrigin-RevId: 374199441

==

jax/_src/lax/lax.py
jax/experimental/jax2tf/g3doc/primitives_with_limited_support.md
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/jax2tf_limitations.py
==================
e049d896;jax authors;2021-05-17 06:30:39 -0700;Merge pull request #6757 from LenaMartens:changelist/373786534
PiperOrigin-RevId: 374183021

==
==================
6a28351a;jax authors;2021-05-17 04:27:17 -0700;Merge pull request #6760 from gnecula:tf_limitations
PiperOrigin-RevId: 374167386

==
==================
a08cdb30;George Necula;2021-05-17 10:01:13 +0300;[jax2tf] Update the limitations for unsupported primitives
Also update the documentation.

==

jax/experimental/jax2tf/README.md
jax/experimental/jax2tf/g3doc/jax_primitives_coverage.md
jax/experimental/jax2tf/g3doc/primitives_with_limited_support.md
jax/experimental/jax2tf/tests/jax2tf_limitations.py
jax/experimental/jax2tf/tests/primitive_harness.py
==================
25cc3ece;jax authors;2021-05-14 14:50:20 -0700;Merge pull request #6739 from jakevdp:sparse-op-jvp
PiperOrigin-RevId: 373870776

==
==================
2bcae23e;Jake VanderPlas;2021-05-14 14:18:12 -0700;fix flakes & test tolerances

==

jax/experimental/sparse_ops.py
tests/sparse_ops_test.py
==================
25ff2f4a;Roy Frostig;2021-05-12 13:02:16 -0700;propagate symbolic zeros in sparse op JVPs

==

jax/experimental/sparse_ops.py
==================
926de5a2;Jake VanderPlas;2021-05-14 13:43:53 -0700;[sparse] add JVP & transpose rules for coo primitives

==

jax/experimental/sparse_ops.py
tests/sparse_ops_test.py
==================
fd6069c4;jax authors;2021-05-14 13:16:31 -0700;Merge pull request #6627 from GJBoth:sparse_ops_jvp
PiperOrigin-RevId: 373852297

==
==================
81903e89;Gert-Jan;2021-05-01 12:09:03 +0000;Add JVP rules COO sparse ops.
Updated coo_matvec jvp rule.

Make flake8 happy.

==

jax/experimental/sparse_ops.py
tests/sparse_ops_test.py
==================
73e9302f;Lena Martens;2021-05-14 15:46:27 +0100;Fix `jsp.linalg.lu` translation rule to pass backend arg to `lower_fun`.
If it doesn't, trying to run `lu` with a custom CPU backend when a GPU is
present results in a `Unable to resolve runtime symbol:
`cuda_lu_pivots_to_permutation'` fatal error.

==

jax/_src/lax/linalg.py
jax/interpreters/xla.py
tests/linalg_test.py
==================
8b5c6406;Peter Hawkins;2021-05-13 13:53:28 -0700;rollback #6722
PiperOrigin-RevId: 373651549

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
bc84c9fe;Roman Novak;2021-05-13 12:20:31 -0700;Add `lax.conv_general_dilated_local`

==

docs/jax.lax.rst
jax/_src/lax/other.py
jax/lax/__init__.py
tests/lax_test.py
==================
2f7ef945;Peter Hawkins;2021-05-13 09:09:46 -0400;Support complex numbers in jnp.convolve and jnp.correlate.

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
b42e9e37;jax authors;2021-05-13 06:02:16 -0700;Merge pull request #6722 from gnecula:tf_enable_xla_test
PiperOrigin-RevId: 373562914

==
==================
e7568c7a;George Necula;2021-05-13 09:10:24 +0300;Add additional message to the error when we cannot convert

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
c97cd0a5;jax authors;2021-05-12 19:13:12 -0700;Merge pull request #6742 from hawkinsp:scalartype
PiperOrigin-RevId: 373499629

==
==================
43a47b63;jax authors;2021-05-12 17:40:28 -0700;Merge pull request #6683 from bdamoc:update_custom_deriv_doc
PiperOrigin-RevId: 373488172

==
==================
6d2344d5;Peter Hawkins;2021-05-12 20:31:49 -0400;Change jnp scalar types to consider numpy scalars as instances.

==

jax/_src/numpy/lax_numpy.py
tests/dtypes_test.py
==================
db797017;jax authors;2021-05-12 12:10:34 -0700;Merge pull request #6741 from hawkinsp:ascan2
PiperOrigin-RevId: 373422349

==
==================
724e24d1;Peter Hawkins;2021-05-12 14:42:00 -0400;Add test from https://github.com/google/jax/pull/5165, with a couple of small improvements..

==

tests/lax_control_flow_test.py
==================
8f71d20a;jax authors;2021-05-12 11:47:03 -0700;Merge pull request #6738 from hawkinsp:ascan
PiperOrigin-RevId: 373417478

==
==================
d1eea328;jax authors;2021-05-12 11:20:05 -0700;Merge pull request #6731 from hawkinsp:issue5728
PiperOrigin-RevId: 373411561

==
==================
44c98ad4;Peter Hawkins;2021-05-12 14:16:35 -0400;Improve JVP rule for scatters with non-overlapping indices.
If the scattered values don't overlap, we don't need complicated masking logic to work out which of the two overlapping values "win".

==

jax/_src/lax/lax.py
jax/_src/ops/scatter.py
tests/lax_numpy_indexing_test.py
==================
4f2ec864;jax authors;2021-05-12 10:56:45 -0700;Merge pull request #6736 from hawkinsp:cuda
PiperOrigin-RevId: 373405918

==
==================
1350d218;Peter Hawkins;2021-05-11 21:26:58 -0400;Add regression test for #5728.
This issue appears to have been fixed by jaxlib 0.1.66.

==

jax/test_util.py
tests/lax_test.py
==================
ad7c6b5d;jax authors;2021-05-12 10:00:47 -0700;Merge pull request #6646 from hawkinsp:changelog
PiperOrigin-RevId: 373392909

==
==================
db39a67c;Bogdan Damoc;2021-05-07 15:04:40 +0100;Update documentation for custom_jvp handling of nondiff_argnums as arguments of _fwd and _bwd rules.

==

docs/notebooks/Custom_derivative_rules_for_Python_code.ipynb
docs/notebooks/Custom_derivative_rules_for_Python_code.md
==================
f4fa7c7a;George Necula;2021-05-12 08:31:24 -0700;[jax2tf] Remove dot_general limitation due to XLA fixing crashing bug
PiperOrigin-RevId: 373375341

==

jax/experimental/jax2tf/tests/primitive_harness.py
==================
c63e8b59;jax authors;2021-05-12 07:41:10 -0700;Merge pull request #6737 from hawkinsp:nwarn
PiperOrigin-RevId: 373367454

==
==================
ecaeb946;Peter Hawkins;2021-05-12 10:28:55 -0400;Make associative_scan work for boolean arguments.

==

jax/_src/lax/control_flow.py
tests/lax_control_flow_test.py
==================
f83e309f;Peter Hawkins;2021-05-04 09:28:04 -0400;Update changelog.

==

CHANGELOG.md
==================
97d4827a;Peter Hawkins;2021-05-12 09:35:36 -0400;Suppress numpy overflow warning from gamma grad test.

==

tests/random_test.py
==================
f88e4529;Peter Hawkins;2021-05-12 09:24:31 -0400;Update installation instructions for CUDA wheels.

==

README.md
==================
ba5e11f8;George Necula;2021-05-12 05:45:19 -0700;[jax2tf] Improve the conversion of integer_pow for better numerical accuracy.
Previously we simply converted integer_pow to tf.math.pow. JAX instead uses
a series of multiplications. We now use the same lowering strategy as JAX, so
that we have the same numerical result.

Also improved the error messages for assertion failures.

PiperOrigin-RevId: 373351147

==

jax/_src/lax/lax.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/jax2tf_limitations.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/tf_test_util.py
jax/test_util.py
==================
235eb8c2;George Necula;2021-05-12 02:29:51 -0700;Copybara import of the project:
--
1ecf4f02891cad70cc8f094b49cf2458105ca366 by George Necula <gcnecula@gmail.com>:

[jax2tf] Change the conversion of dot_general to use XLA op.

Instead of converting the dot_general to a sea of TF ops, when
we enable_xla we just use the XLA op. This has the advantage
that it also supports the preferred_element_type.

Fixed bug with passing the precision parameter to TF.
Also improved tests to print the HLO in case of numerical errors.

COPYBARA_INTEGRATE_REVIEW=https://github.com/google/jax/pull/6717 from gnecula:tf_dot 1ecf4f02891cad70cc8f094b49cf2458105ca366
PiperOrigin-RevId: 373326655

==

CHANGELOG.md
jax/_src/lax/lax.py
jax/experimental/jax2tf/README.md
jax/experimental/jax2tf/examples/serving/model_server_request.py
jax/experimental/jax2tf/examples/tflite/mnist/mnist.py
jax/experimental/jax2tf/g3doc/jax_primitives_coverage.md
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/jax2tf_limitations.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
jax/experimental/jax2tf/tests/shape_poly_test.py
jax/experimental/jax2tf/tests/tf_test_util.py
jax/test_util.py
tests/api_test.py
tests/lax_autodiff_test.py
==================
aa74314c;jax authors;2021-05-11 19:37:04 -0700;Merge pull request #6732 from hawkinsp:gmres2
PiperOrigin-RevId: 373282000

==
==================
73df92bb;Peter Hawkins;2021-05-11 21:43:15 -0400;Reenable a GMRES test on CPU.
It appears to pass once again with jaxlib 0.1.67. Unfortunately it just missed the 0.1.66 release.

==

tests/lax_scipy_sparse_test.py
==================
0ca259f7;jax authors;2021-05-11 17:07:32 -0700;Merge pull request #6730 from zhangqiaorjc:release66
PiperOrigin-RevId: 373263238

==
==================
8d54a53b;Andrew Liu;2021-05-06 16:36:52 -0700;Update convolutions.md
Update convolutions.ipynb

Update convolutions.ipynb

Update convolutions.md

==

docs/notebooks/convolutions.ipynb
docs/notebooks/convolutions.md
==================
528d5bbb;Qiao Zhang;2021-05-11 16:49:32 -0700;Update README etc for jaxlib 0.1.66 release.

==

CHANGELOG.md
README.md
jaxlib/version.py
setup.py
==================
9cce4089;jax authors;2021-05-11 16:45:59 -0700;Merge pull request #6728 from jakevdp:fix-pad-error
PiperOrigin-RevId: 373259267

==
==================
f7411416;jax authors;2021-05-11 16:15:54 -0700;Merge pull request #6607 from lgeiger:frozendict
PiperOrigin-RevId: 373253977

==
==================
59435940;Jake VanderPlas;2021-05-11 15:44:09 -0700;Improve error message for  shape

==

jax/_src/numpy/lax_numpy.py
==================
a54e0312;Lukas Geiger;2021-05-11 23:41:24 +0100;Reduce boilerplate of `FrozenDict`

==

jax/experimental/maps.py
==================
f7717c89;jax authors;2021-05-11 14:34:02 -0700;Merge pull request #6724 from hawkinsp:dispatch
PiperOrigin-RevId: 373234659

==
==================
e42fc2ed;jax authors;2021-05-11 14:01:22 -0700;Merge pull request #6712 from hawkinsp:fb
PiperOrigin-RevId: 373228135

==
==================
0f4720be;jax authors;2021-05-11 11:27:12 -0700;Merge pull request #6543 from cdfreeman-google:master
PiperOrigin-RevId: 373195652

==
==================
d77be6ed;jax authors;2021-05-11 11:08:18 -0700;Merge pull request #6716 from NeilGirdhar:annotations
PiperOrigin-RevId: 373191677

==
==================
aea068ed;Peter Hawkins;2021-05-11 09:12:06 -0400;Reenable numpy dispatch tests.

==

.github/workflows/ci-build.yaml
==================
4f9eb64c;Peter Hawkins;2021-05-11 04:31:08 -0700;[XLA] Fix incomplete gamma functions where `x` is infinity.
Issue https://github.com/google/jax/issues/6535

PiperOrigin-RevId: 373122943

==

tests/lax_test.py
==================
281ae7c1;George Necula;2021-05-11 12:17:55 +0300;[jax2tf] Improve conversion of pad when enable_xla=True, add tests.
If enable_xla we should directly use the XLA conversion, without
trying to see whether the primitive can actually be converted
to non XLA TF ops. This is happening elsewhere, but it was not
happening for pad.

Also discovered that we were never turning enable_xla=False in
tests, even when we had special harnesses for it.

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
d724a308;Neil Girdhar;2021-05-10 18:18:03 -0400;Use Array instead of jnp.array in jax.random
This satisfies MyPy for the functions:
* jax.random.categorical,
* jax.random.shuffle, and
* jax.random.permutation.

==

jax/_src/random.py
==================
078d8e13;jax authors;2021-05-10 18:11:15 -0700;Merge pull request #6706 from hawkinsp:indexops
PiperOrigin-RevId: 373052700

==
==================
01d6e32c;Peter Hawkins;2021-05-10 20:57:32 -0400;Add version constraints to flatbuffers versions.
Require 1.12 or newer, because we've only tested 1.12 and 2.0.
Require less than 3.0, because flatbuffers uses semantic versioning and version 3.0 would mean an incompatible change has been made.

==

jaxlib/setup.py
==================
d005e38f;Peter Hawkins;2021-05-10 17:44:18 -0400;Promote the x.at[idx].set(y) operators as the preferred way to do indexed updates. Mark the index_update() etc. operators as deprecated in the documentation.
Add new .divide and .power operators. Fixes #2694.
Add .multiply as an alias for .mul. To be more numpy-like we should probably prefer the longer names.

==

docs/jax.ops.rst
jax/_src/numpy/lax_numpy.py
jax/test_util.py
tests/lax_numpy_indexing_test.py
==================
1509f995;Qiao Zhang;2021-05-10 16:44:51 -0700;Update flatbuffer ver2 EndVector usage.
PiperOrigin-RevId: 373039656

==

jaxlib/pocketfft.py
==================
d3ad9bfd;jax authors;2021-05-10 16:31:01 -0700;Merge pull request #6711 from skye:workspace
PiperOrigin-RevId: 373036879

==
==================
45cbfd61;Skye Wanderman-Milne;2021-05-10 16:17:01 -0700;Update WORKSPACE to include tpu_driver fix

==

WORKSPACE
==================
fa6211af;Qiao Zhang;2021-05-10 16:04:03 -0700;Gate on CUSPARSE_VERSION instead of CUDART_VERSION in jaxlib/cusparse.cc.
PiperOrigin-RevId: 373032029

==

jaxlib/cusparse.cc
==================
0607754d;jax authors;2021-05-10 15:28:14 -0700;Merge pull request #6708 from hawkinsp:flatb
PiperOrigin-RevId: 373025311

==
==================
40c5e376;Peter Hawkins;2021-05-10 18:21:25 -0400;Pin flatbuffers 1.12 for CI tests.

==

build/test-requirements.txt
==================
3af76ff0;jax authors;2021-05-10 13:30:10 -0700;Merge pull request #6704 from jakevdp:at-doc
PiperOrigin-RevId: 372999519

==
==================
3da4e7cb;jax authors;2021-05-10 13:26:24 -0700;Merge pull request #6705 from zhangqiaorjc:bp3
PiperOrigin-RevId: 372999494

==
==================
ce584096;Qiao Zhang;2021-05-10 13:15:26 -0700;Update XLA.

==

WORKSPACE
==================
26f74e64;Jake VanderPlas;2021-05-10 12:37:59 -0700;DOC: add documentation of DeviceArray object properties & methods

==

docs/jax.numpy.rst
jax/_src/numpy/lax_numpy.py
==================
ca1b764b;jax authors;2021-05-10 12:13:46 -0700;Merge pull request #6703 from hawkinsp:nandtypes
PiperOrigin-RevId: 372983939

==
==================
010c383a;jax authors;2021-05-10 10:49:17 -0700;Merge pull request #6694 from hawkinsp:wheel2
PiperOrigin-RevId: 372963990

==
==================
e91e3397;jax authors;2021-05-10 10:34:23 -0700;Merge pull request #6701 from hawkinsp:aarch
PiperOrigin-RevId: 372960192

==
==================
d96bf0be;Peter Hawkins;2021-05-10 13:21:12 -0400;Allow non-inexact dtypes for jnp.nan...() reductions.
Fixes #2349.

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
ec2f1d0f;jax authors;2021-05-10 09:38:10 -0700;Merge pull request #6702 from hawkinsp:typeerr
PiperOrigin-RevId: 372947884

==
==================
e6fb6e08;Peter Hawkins;2021-05-10 11:52:12 -0400;Improve type error when an object dtype is passed to an operator like +.
Fixes #856.

==

jax/_src/dtypes.py
tests/api_test.py
==================
7d4551dd;Peter Hawkins;2021-05-10 11:08:09 -0400;Add support for arm64 builds to build.py and build_wheel scripts.

==

build/build.py
build/build_wheel.py
==================
fa9ca33e;jax authors;2021-05-08 11:45:24 -0700;Merge pull request #6696 from gnecula:tf_gather
PiperOrigin-RevId: 372731962

==
==================
244fc7b1;George Necula;2021-05-08 07:38:50 +0300;[jax2tf] Expand shape polymorphism support for some instances of lax.gather

==

jax/_src/numpy/lax_numpy.py
jax/experimental/jax2tf/tests/shape_poly_test.py
==================
5b3bdd71;Peter Hawkins;2021-05-07 18:22:28 -0400;Allow manylinux_2_12_x86_64 in auditwheel test. This is an alias by PEP600.

==

build/build_wheel_docker_entrypoint.sh
==================
5f5a8c82;jax authors;2021-05-07 14:47:16 -0700;Merge pull request #6693 from jurahul:master
PiperOrigin-RevId: 372632382

==
==================
46517058;Rahul Joshi;2021-05-07 14:03:00 -0700;Fix pjit infeed test to work on CPU/TFRT and GPU.
For these devices, the execution of the compiled function is
blocking, so transfer data to infeed before execution to avoid
deadlock.

==

tests/pjit_test.py
==================
195cbeb1;Peter Hawkins;2021-05-07 13:42:02 -0700;Disable pjit infeed test on CPU and GPU.
PiperOrigin-RevId: 372620510

==

tests/pjit_test.py
==================
1818fd7e;jax authors;2021-05-07 11:19:39 -0700;Merge pull request #6686 from jakevdp:real-dtype-refactor
PiperOrigin-RevId: 372592905

==
==================
db08b8f7;jax authors;2021-05-07 10:40:18 -0700;Merge pull request #6687 from zhangqiaorjc:bp2
PiperOrigin-RevId: 372584766

==
==================
a9468247;jax authors;2021-05-07 10:32:12 -0700;Merge pull request #6682 from bdamoc:updated_doc
PiperOrigin-RevId: 372583046

==
==================
8e45a984;Qiao Zhang;2021-05-07 10:29:11 -0700;Update XLA.

==

WORKSPACE
==================
a77c96cd;Jake VanderPlas;2021-05-07 10:14:34 -0700;Cleanup: remove unnecessary utility

==

jax/_src/dtypes.py
jax/_src/random.py
==================
572127dc;jax authors;2021-05-07 09:06:50 -0700;Merge pull request #6675 from pschuh:revert-6400-convert_element
PiperOrigin-RevId: 372566810

==
==================
33ca40a9;Bogdan Damoc;2021-05-07 12:56:41 +0100;Update code example in custom VJP documentation.

==

docs/custom_vjp_update.md
==================
8d6cc185;jax authors;2021-05-06 21:03:25 -0700;Merge pull request #6676 from google:fix-debug-info-handling
PiperOrigin-RevId: 372481612

==
==================
173cd062;Matthew Johnson;2021-05-06 20:23:34 -0700;fix debug info handling (again)

==

jax/interpreters/partial_eval.py
==================
92246017;Parker Schuh;2021-05-06 20:19:23 -0700;Revert "Use convert_element_type instead of device_put_raw."

==

docs/jaxpr.rst
jax/_src/numpy/lax_numpy.py
jax/experimental/jax2tf/call_tf.py
jax/interpreters/partial_eval.py
tests/api_test.py
==================
5420064c;jax authors;2021-05-06 19:26:21 -0700;Merge pull request #6674 from google:fix-debug-info-handling
PiperOrigin-RevId: 372471869

==
==================
d21e8c06;Matthew Johnson;2021-05-06 17:55:47 -0700;handle case where trace debug_info is None

==

jax/_src/errors.py
jax/core.py
==================
e51c98fb;jax authors;2021-05-06 15:42:55 -0700;Merge pull request #6672 from zhangqiaorjc:bp1
PiperOrigin-RevId: 372439964

==
==================
a0f05863;Qiao Zhang;2021-05-06 15:35:10 -0700;Update XLA.

==

WORKSPACE
==================
d0aa875b;jax authors;2021-05-06 14:57:12 -0700;Merge pull request #6400 from pschuh:convert_element
PiperOrigin-RevId: 372431314

==
==================
4bbb24d5;jax authors;2021-05-06 14:14:19 -0700;Merge pull request #6453 from google:autodidax
PiperOrigin-RevId: 372422829

==
==================
9d3e535a;Parker Schuh;2021-05-06 13:18:01 -0700;Merge branch 'master' into convert_element

==
==================
d88acd8b;Matthew Johnson;2021-05-05 12:44:49 -0700;autodidax: delete while_loop for now

==

docs/autodidax.ipynb
docs/autodidax.md
docs/autodidax.py
==================
c3553d22;Adam Paszke;2021-05-06 12:34:15 -0700;Implement vmap for pjit
PiperOrigin-RevId: 372401914

==

jax/experimental/pjit.py
tests/pjit_test.py
==================
ee93ee22;Adam Paszke;2021-05-06 12:00:18 -0700;Add a docstring for pjit
Co-authored-by: Skye Wanderman-Milne <skyewm@google.com>
PiperOrigin-RevId: 372393461

==

docs/jax.experimental.pjit.rst
docs/jax.experimental.rst
jax/experimental/maps.py
jax/experimental/pjit.py
==================
ee943545;jax authors;2021-05-06 10:41:45 -0700;Merge pull request #6658 from jakevdp:multibuf-const
PiperOrigin-RevId: 372375454

==
==================
a7bae272;jax authors;2021-05-06 10:11:05 -0700;Merge pull request #6662 from mkunesch:changelist/372306656
PiperOrigin-RevId: 372368594

==
==================
28680301;Jake VanderPlas;2021-05-06 09:44:01 -0700;Generalize constant handlers for multi-buffer objects
Co-authored-by: Matthew Johnson <mattjj@google.com>

==

jax/interpreters/pxla.py
jax/interpreters/xla.py
jax/lib/xla_bridge.py
tests/custom_object_test.py
==================
fe164b57;jax authors;2021-05-06 08:24:53 -0700;Merge pull request #6659 from hawkinsp:eightr
PiperOrigin-RevId: 372347466

==
==================
4c0d3671;jax authors;2021-05-06 04:44:41 -0700;Remove non-determinism in axis ordering during vectorization.
PiperOrigin-RevId: 372317377

==

jax/experimental/maps.py
==================
e481da90;Adam Paszke;2021-05-06 04:18:47 -0700;Raise a clear error when pjit is used with an empty mesh
Technically we could make pjit behave in the same way as jit
in that case, but this felt easier. We can always relax it in
the future.

PiperOrigin-RevId: 372314531

==

jax/experimental/pjit.py
jax/interpreters/pxla.py
tests/pjit_test.py
==================
17cc9502;Markus Kunesch;2021-05-06 10:16:42 +0000;Make jnp.unravel_index rank promotion explicit.
There was a silent rank promotion in jax.numpy.unravel_index which caused the
code to fail with jax_numpy_rank_promotion='raise'. This commit makes the rank
promotion explicit. Furthermore, it fixes an outdated comment in the same
function.

==

jax/_src/numpy/lax_numpy.py
==================
97bab8f4;George Necula;2021-05-05 23:31:04 -0700;Added tests and documentation for using host_callback in multi-host scenario.
PiperOrigin-RevId: 372280876

==

jax/experimental/host_callback.py
==================
f8e7e9b4;jax authors;2021-05-05 20:02:17 -0700;Merge pull request #6660 from zhangqiaorjc:bp
PiperOrigin-RevId: 372259199

==
==================
c9d40a45;Qiao Zhang;2021-05-05 19:22:14 -0700;Update XLA.

==

WORKSPACE
==================
bf6b59ea;Peter Hawkins;2021-05-05 21:36:57 -0400;Add support for select and select_range to jax.scipy.linalg.eigh_tridiagonal().
Credit to rmlarsen@.

==

jax/_src/scipy/linalg.py
tests/linalg_test.py
==================
8ded7ad8;jax authors;2021-05-05 15:09:39 -0700;Merge pull request #6657 from zhangqiaorjc:bump
PiperOrigin-RevId: 372216603

==
==================
c2e2953a;Qiao Zhang;2021-05-05 15:02:49 -0700;Update XLA.

==

WORKSPACE
==================
3c6a41eb;jax authors;2021-05-05 14:45:57 -0700;Merge pull request #6612 from google:tracer-errors
PiperOrigin-RevId: 372211269

==
==================
83cd4227;Matthew Johnson;2021-04-14 17:51:16 -0700;autodidax: add cond and start while_loop

==

docs/autodidax.ipynb
docs/autodidax.md
docs/autodidax.py
==================
0bf732be;jax authors;2021-05-05 11:49:32 -0700;Merge pull request #6656 from skye:profiling_docs
PiperOrigin-RevId: 372174753

==
==================
22ae98ac;Skye Wanderman-Milne;2021-05-04 19:11:43 -0700;Update profiling instructions.

==

docs/profiling.md
==================
31f35373;Adam Paszke;2021-05-05 06:43:47 -0700;Make sure that no errors are raised for no-op PartitionSpecs
PiperOrigin-RevId: 372115524

==

jax/experimental/pjit.py
tests/pjit_test.py
==================
049383c5;Adam Paszke;2021-05-05 06:07:16 -0700;Make sure that we don't pass unhashable axis_resources to cached pjit implementation
PiperOrigin-RevId: 372110726

==

jax/experimental/pjit.py
tests/pjit_test.py
==================
c31943cf;jax authors;2021-05-04 18:17:56 -0700;Merge pull request #6622 from hawkinsp:eightr
PiperOrigin-RevId: 372035283

==
==================
97e89bde;Peter Hawkins;2021-05-03 11:27:07 -0400;Add a tridiagonal eigh solver.

==

CHANGELOG.md
jax/_src/scipy/linalg.py
jax/scipy/linalg.py
tests/linalg_test.py
==================
1d85512f;jax authors;2021-05-04 16:30:50 -0700;Merge pull request #6647 from jakevdp:bicgstab-doc
PiperOrigin-RevId: 372019186

==
==================
382506ba;Jake VanderPlas;2021-05-04 12:24:50 -0700;DOC: add bicgstab to doc page

==

docs/jax.scipy.rst
==================
7ec0b401;Matthew Johnson;2021-05-03 21:40:50 -0700;Roll-forward of #6584, which broke internal tests.
PiperOrigin-RevId: 371839298

==

docs/jaxpr.rst
jax/_src/api.py
jax/_src/custom_derivatives.py
jax/core.py
jax/experimental/host_callback.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/maps.py
jax/interpreters/partial_eval.py
jax/interpreters/xla.py
tests/api_test.py
==================
37999138;jax authors;2021-05-03 18:00:20 -0700;Merge pull request #6635 from zhangqiaorjc:fix_hash
PiperOrigin-RevId: 371817178

==
==================
984f2c63;Qiao Zhang;2021-05-03 17:55:15 -0700;Fix XLA commit sha256.

==

WORKSPACE
==================
67fad64c;jax authors;2021-05-03 17:51:13 -0700;Merge pull request #6632 from skye:version
PiperOrigin-RevId: 371816004

==
==================
b9d72a48;Matthew Johnson;2021-05-01 12:28:12 -0700;improve concreteness error from arguments
also tweak some error message wording

==

jax/_src/api.py
jax/_src/errors.py
jax/_src/lax/control_flow.py
jax/_src/numpy/lax_numpy.py
jax/api_util.py
jax/core.py
jax/interpreters/partial_eval.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
tests/api_test.py
tests/lax_control_flow_test.py
==================
12461635;jax authors;2021-05-03 17:27:15 -0700;Merge pull request #6633 from zhangqiaorjc:jaxlib_rel
PiperOrigin-RevId: 371812586

==
==================
24d126b6;Qiao Zhang;2021-05-03 17:20:15 -0700;Update XLA.

==

WORKSPACE
==================
c7485b7a;Skye Wanderman-Milne;2021-05-03 16:32:00 -0700;Bump jax version and changelog for jax 0.1.13 release

==

CHANGELOG.md
jax/version.py
==================
e29a9c4c;Qiao Zhang;2021-05-03 15:59:00 -0700;[JAX] Bump xla_client._version and gate _ALLOW_ARG_PRUNING on the new version.
PiperOrigin-RevId: 371796791

==

jax/interpreters/xla.py
==================
850bd662;Qiao Zhang;2021-05-03 11:40:59 -0700;[JAX] Prune unused inputs in jit.
- Python part based on: https://github.com/google/jax/pull/6567
- Added cpp_jit path to handle pruned args

PiperOrigin-RevId: 371743277

==

benchmarks/api_benchmark.py
jax/_src/api.py
jax/interpreters/xla.py
tests/api_test.py
tests/xla_interpreter_test.py
==================
e6bdcbb6;jax authors;2021-05-03 10:48:02 -0700;Merge pull request #6625 from hawkinsp:xla
PiperOrigin-RevId: 371730573

==
==================
efe4a1f9;Peter Hawkins;2021-05-03 13:38:12 -0400;Update XLA.

==

WORKSPACE
==================
ffecef55;jax authors;2021-05-03 10:26:33 -0700;Merge pull request #6611 from njunge94:pip-install-fork
PiperOrigin-RevId: 371724836

==
==================
321ecbdc;jax authors;2021-05-03 10:05:55 -0700;Merge pull request #6620 from hawkinsp:cuda
PiperOrigin-RevId: 371720280

==
==================
2c92bc91;Peter Hawkins;2021-05-03 07:48:18 -0700;[JAX] Include pre-transformed stack traces as additional context to JAX exceptions, where present.
PiperOrigin-RevId: 371695248

==

jax/_src/source_info_util.py
jax/_src/traceback_util.py
tests/errors_test.py
==================
f9899df0;Peter Hawkins;2021-05-03 10:30:14 -0400;Readd CUDA 10.1 to the set of released CUDA wheels.
Users are still depending on CUDA 10.1.

==

build/build_jaxlib_wheels.sh
==================
75b00a12;jax authors;2021-05-01 22:18:13 -0700;Copybara import of the project:
--
3c400a3e588abf9e2259119c50343cba6f3477f1 by Matthew Johnson <mattjj@google.com>:

add 'inline' option to xla_call for jaxpr inlining

--
fe297e39ca37896b75d7943b9b77c0b53fad13ee by Matthew Johnson <mattjj@google.com>:

add 'inline' to jit docstring

--
ff6866c4b3757cde66fe659c2f27d8aeff024e8f by Matthew Johnson <mattjj@google.com>:

new_sublevel in jax2tf

PiperOrigin-RevId: 371542778

==

docs/jaxpr.rst
jax/_src/api.py
jax/_src/custom_derivatives.py
jax/core.py
jax/experimental/host_callback.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/maps.py
jax/interpreters/partial_eval.py
jax/interpreters/xla.py
tests/api_test.py
==================
e8f209c7;jax authors;2021-05-01 21:53:34 -0700;Merge pull request #6584 from google:jit-inline-2
PiperOrigin-RevId: 371541392

==
==================
712d5f7e;jax authors;2021-05-01 20:19:41 -0700;Merge pull request #6618 from imh:autodidax_broadcasting_error
PiperOrigin-RevId: 371535729

==
==================
74b67627;Ian Horn;2021-05-01 19:07:58 -0700;Fixed error in autodidax broadasting batching

==

docs/autodidax.ipynb
docs/autodidax.md
docs/autodidax.py
==================
89a6b6d1;Peter Hawkins;2021-05-01 16:12:44 -0700;Fix stack trace filtering for paths that do not exist.
PiperOrigin-RevId: 371521548

==

jax/_src/traceback_util.py
==================
a80aab0a;Peter Hawkins;2021-05-01 14:57:15 -0700;Fix cloudpickle breakage.
PiperOrigin-RevId: 371517484

==

jax/_src/traceback_util.py
tests/errors_test.py
==================
bcd33b79;jax authors;2021-05-01 14:26:47 -0700;Merge pull request #6617 from hawkinsp:xla
PiperOrigin-RevId: 371515560

==
==================
cacc5afc;Peter Hawkins;2021-05-01 17:05:14 -0400;Update XLA.

==

WORKSPACE
==================
ff6866c4;Matthew Johnson;2021-05-01 12:41:41 -0700;new_sublevel in jax2tf

==

jax/experimental/jax2tf/jax2tf.py
==================
e8c34062;Peter Hawkins;2021-05-01 12:41:10 -0700;[JAX] Switch the order of the filtered and unfiltered stack traces in exceptions.
After this change, the filtered stack trace is attached to the main exception, and the unfiltered stack trace becomes a __cause__ exception.

PiperOrigin-RevId: 371509766

==

jax/_src/traceback_util.py
tests/errors_test.py
==================
fe297e39;Matthew Johnson;2021-05-01 12:32:44 -0700;add 'inline' to jit docstring

==

jax/_src/api.py
==================
f559a9bf;Nicholas Junge;2021-05-01 19:32:19 +0200;Fix pip install instruction for forks in contributing section

==

docs/contributing.md
==================
6ce4ef46;jax authors;2021-04-30 17:12:02 -0700;Merge pull request #6593 from njunge94:axis_concatenation
PiperOrigin-RevId: 371431622

==
==================
71c7f298;jax authors;2021-04-30 16:31:38 -0700;Merge pull request #6606 from jakevdp:numpy-version
PiperOrigin-RevId: 371425726

==
==================
e985e868;Nicholas Junge;2021-05-01 01:05:22 +0200;Implement jnp.r_ and jnp.c_

==

docs/jax.numpy.rst
jax/_src/numpy/lax_numpy.py
jax/numpy/__init__.py
tests/lax_numpy_test.py
==================
7d61def1;Jake VanderPlas;2021-04-30 13:56:00 -0700;Cleanup: use numpy_version rather than np.__version__

==

tests/lax_numpy_test.py
==================
9c63c772;jax authors;2021-04-30 11:33:07 -0700;Merge pull request #6597 from lgeiger:np.broadcast_shapes
PiperOrigin-RevId: 371371698

==
==================
a613ce12;Lukas Geiger;2021-04-30 19:32:51 +0200;Export `jnp.broadcast_shapes` as user facing function

==

docs/jax.numpy.rst
jax/_src/numpy/lax_numpy.py
jax/numpy/__init__.py
tests/lax_numpy_test.py
==================
893b5a09;Adam Paszke;2021-04-30 09:56:53 -0700;Make pjit into an initial style primitive
Partly to make it more robust (e.g. we no longer need to implement
post_process_call), partly beacuse it is not really a call primitive
(it modifies the argument and return avals in a multiprocess mesh),
and partly as an experiment to see how difficult would it be to actually
make it more autodidax-like.

Overall, it seems like a mixed bag, maybe slightly positive. The thunks
are gone which is nice, but one has to be much more careful when dealing
with avals.

PiperOrigin-RevId: 371352737

==

jax/core.py
jax/experimental/host_callback.py
jax/experimental/pjit.py
jax/interpreters/pxla.py
==================
c92a9c07;jax authors;2021-04-29 18:35:59 -0700;Merge pull request #6596 from lgeiger:simplify-numpy-wraps
PiperOrigin-RevId: 371247269

==
==================
ca359276;Lukas Geiger;2021-04-30 00:57:57 +0200;Remove docs fallback for numpy < 1.15

==

jax/_src/numpy/lax_numpy.py
==================
bd353798;jax authors;2021-04-29 14:02:56 -0700;Merge pull request #6591 from jakevdp:tpu-test-setup
PiperOrigin-RevId: 371198936

==
==================
ccc423d6;Peter Hawkins;2021-04-29 13:36:38 -0700;[JAX] Enable filtered tracebacks on Python 3.6.
[XLA:Python] Add support for converting a fast-traceback into a Python exception traceback.

Add a helper for building traceback objects on Python 3.6. On Python 3.7+ this can be done by calling the traceback type, and we can in essence backport that implementation to Python 3.6.

Consolidate the py_traceback and traceback modules.

PiperOrigin-RevId: 371193212

==

jax/_src/traceback_util.py
==================
7c9357e4;jax authors;2021-04-29 13:33:19 -0700;Merge pull request #6588 from google:nn-tanh
PiperOrigin-RevId: 371192342

==
==================
ef91c0d1;jax authors;2021-04-29 12:30:19 -0700;Merge pull request #6590 from jakevdp:nan-quantile
PiperOrigin-RevId: 371178272

==
==================
75894b9d;jax authors;2021-04-29 12:03:58 -0700;Merge pull request #6589 from jakevdp:lax-doc
PiperOrigin-RevId: 371172471

==
==================
e1f2c046;Jake VanderPlas;2021-04-29 11:13:52 -0700;test: use colab_tpu.setup_tpu() in TPU test notebook

==

tests/notebooks/colab_tpu.ipynb
==================
c9d6def9;Jake VanderPlas;2021-04-29 11:00:22 -0700;BUG: ensure jnp.quantile() returns NaN for arrays containing NaN

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
6fd806b9;jax authors;2021-04-29 10:56:07 -0700;Merge pull request #6585 from google:tree-map-alias
PiperOrigin-RevId: 371156638

==
==================
68260219;jax authors;2021-04-29 10:35:41 -0700;Merge pull request #6581 from hawkinsp:libdevice
PiperOrigin-RevId: 371151412

==
==================
71a25cda;Jake VanderPlas;2021-04-29 09:48:52 -0700;DOC: add examples to lax function docstrings

==

jax/_src/lax/lax.py
==================
e9686727;Matthew Johnson;2021-04-29 08:25:26 -0700;add tanh to jax.nn package

==

jax/nn/__init__.py
tests/nn_test.py
==================
c983d3c6;Peter Hawkins;2021-04-28 11:43:50 -0400;Bundle libdevice.10.bc with jaxlib wheels.
libdevice.10.bc is a redistributable part of the CUDA SDK.

This avoids problems trying to locate a copy of libdevice inside the user's CUDA installation.

==

build/BUILD.bazel
build/build_wheel.py
jax/lib/__init__.py
jax/lib/xla_bridge.py
jaxlib/setup.py
==================
23cbcbef;jax authors;2021-04-29 02:11:09 -0700;Merge pull request #6392 from apaszke:axis-name-top-trace
PiperOrigin-RevId: 371075561

==
==================
b8f9dd62;Roy Frostig;2021-04-28 19:44:20 -0700;unify tree_map and tree_multimap

==

docs/jax.tree_util.rst
jax/_src/tree_util.py
==================
3c400a3e;Matthew Johnson;2021-04-22 20:56:17 -0700;add 'inline' option to xla_call for jaxpr inlining

==

docs/jaxpr.rst
jax/_src/api.py
jax/_src/custom_derivatives.py
jax/core.py
jax/experimental/host_callback.py
jax/experimental/maps.py
jax/interpreters/partial_eval.py
jax/interpreters/xla.py
tests/api_test.py
==================
4fcfaeb8;jax authors;2021-04-28 06:04:42 -0700;Merge pull request #6577 from gnecula:hcb1
PiperOrigin-RevId: 370886452

==
==================
8df502ae;Adam Paszke;2021-04-09 12:43:40 +0000;Use the axis names attached to a primitive when selecting the top trace
This is useful e.g. for handling psums of values that are not sharded,
but are also not statically known constants that we can fold.

==

jax/_src/lax/parallel.py
jax/core.py
jax/experimental/maps.py
jax/interpreters/batching.py
tests/batching_test.py
tests/pmap_test.py
tests/xmap_test.py
==================
d762ec1d;George Necula;2021-04-28 12:22:32 +0300;[host_callback] Minor fix to use the new xla_shape.is_token

==

CHANGELOG.md
jax/experimental/host_callback.py
jax/tools/jax_to_hlo.py
==================
2c7556e0;jax authors;2021-04-27 20:50:13 -0700;Merge pull request #6574 from jakevdp:gpu-test
PiperOrigin-RevId: 370820776

==
==================
69e9c64d;jax authors;2021-04-27 18:52:40 -0700;Merge pull request #6575 from hawkinsp:cusparse
PiperOrigin-RevId: 370808176

==
==================
a0c96b5c;Peter Hawkins;2021-04-27 20:28:30 -0400;Fix cusparse kernel build.
The build_wheel.py script was copying the wrong module.

In addition the CUDA stubs from the TF repo were missing a number of cusparse symbols. The updated TF includes the correct stubs.

==

WORKSPACE
build/build_wheel.py
==================
e3ac7c22;Jake VanderPlas;2021-04-27 15:42:39 -0700;sparse: make gpu translation test more clear

==

tests/sparse_ops_test.py
==================
4e490894;jax authors;2021-04-27 15:36:54 -0700;Merge pull request #6573 from jakevdp:contributing
PiperOrigin-RevId: 370777338

==
==================
ba83ab5d;Jake VanderPlas;2021-04-27 15:00:21 -0700;Add expanded contributing documentation

==

CONTRIBUTING.md
docs/contributing.md
docs/developer.md
docs/index.rst
==================
342d6243;George Necula;2021-04-27 10:29:39 -0700;[host_callback] Add support for pjit of host_callback.
Currently, all XLA side-effect ops inside a sharded computation must have
explicit sharding. This includes the outfeed and infeed used by host_callback.

The implementation here uses AssignDevice sharding for both the outfeed and the
infeed. This means that before outfeed, the devices will do an all_gather and
the first device will make the outfeed. The host callback will receive a single
outfeed with the entire array, and is supposed to return the entire array. This
gets sent to the same device that issued to outfeed, which is responsible to
send the respective slices to the other participating devices.

PiperOrigin-RevId: 370711606

==

jax/BUILD
jax/experimental/host_callback.py
jax/experimental/pjit.py
jax/interpreters/pxla.py
tests/host_callback_test.py
tests/pjit_test.py
==================
aa9d350a;Adam Paszke;2021-04-27 07:11:41 -0700;Fix an assertion in xmap code
This has gone under the radar because it's valid in tests and it's
in code sufficiently new that I don't expect anyone to be using it
just yet.

PiperOrigin-RevId: 370672928

==

jax/experimental/maps.py
==================
da0adb28;jax authors;2021-04-27 06:18:39 -0700;Merge pull request #6572 from gnecula:tf_call
PiperOrigin-RevId: 370664497

==
==================
80cd273d;George Necula;2021-04-27 15:21:20 +0300;[jax2tf] Improve the handling of variable capture for jax2tf.call
Fixes: #6050

==

jax/experimental/jax2tf/call_tf.py
jax/experimental/jax2tf/tests/call_tf_test.py
==================
9f2ac6e0;Adam Paszke;2021-04-27 02:19:18 -0700;Add resource type-checking rules for pjit and with_sharding_constraint
To prevent people from doubly-sharding values that are sharded by outer
xmaps.

PiperOrigin-RevId: 370635057

==

jax/experimental/maps.py
jax/experimental/pjit.py
jax/interpreters/pxla.py
tests/pjit_test.py
==================
43d27339;jax authors;2021-04-27 01:28:07 -0700;Merge pull request #6377 from boyentenbi:changelist/367423156
PiperOrigin-RevId: 370628969

==
==================
c29400ec;jax authors;2021-04-26 18:59:26 -0700;Merge pull request #6563 from hawkinsp:cuda
PiperOrigin-RevId: 370589037

==
==================
07ae0c72;jax authors;2021-04-26 17:48:57 -0700;Merge pull request #6466 from jakevdp:sparse-op-objects
PiperOrigin-RevId: 370579960

==
==================
b16b587a;Jake VanderPlas;2021-04-26 17:40:17 -0700;sparse: add initial higher-level sparse objects

==

jax/experimental/sparse_ops.py
tests/sparse_ops_test.py
==================
d6c1aad3;jax authors;2021-04-26 13:52:56 -0700;Merge pull request #6550 from jakevdp:dynamic-slice-doc
PiperOrigin-RevId: 370534106

==
==================
d0606463;Adam Paszke;2021-04-26 11:41:26 -0700;Fix the batching rule for named reductions
PiperOrigin-RevId: 370505998

==

jax/_src/lax/parallel.py
tests/batching_test.py
==================
a0c2c330;jax authors;2021-04-26 10:50:11 -0700;Merge pull request #6565 from jakevdp:cuda-spec
PiperOrigin-RevId: 370493528

==
==================
bdcce8f8;Jake VanderPlas;2021-04-26 09:22:52 -0700;setup.py: make cuda extras specifier more consistent

==

setup.py
==================
64130daf;Adam Paszke;2021-04-26 07:51:19 -0700;Fix xmap nesting in SPMD lowering mode
Previous implementation has been incorrectly accumulating the SPMD axis
partitioning into an existing dimension, while what we really need is to
create a separate dimension for every annotation.

PiperOrigin-RevId: 370455989

==

jax/experimental/maps.py
tests/xmap_test.py
==================
79a7f7bc;Peter Hawkins;2021-04-26 09:38:31 -0400;Don't build CUDA 11.2 wheels.
Update XLA.

CUDA 11.1 wheels are compatible with CUDA versions 11.1+, since NVidia now promises enhanced version compatibility between CUDA minor releases starting with CUDA 11.1

==

CHANGELOG.md
WORKSPACE
build/build_jaxlib_wheels.sh
==================
65137ab3;Adam Paszke;2021-04-26 06:41:44 -0700;Fix two issues caused by the recent pjit parsing patch
1. We were accidentally passing in ParsedPartitionSpecs as user inputs
   in the AD rules for `with_sharding_constraint`.
2. The `_check_shapes_against_resources` function assumed it was getting
   called with avals, but was really supplied real inputs and outputs.
   Since those include raw Python number objects, one could easily get a
   failure when we queried there shape.

PiperOrigin-RevId: 370445989

==

jax/experimental/pjit.py
tests/pjit_test.py
==================
6cbab8e5;Adam Paszke;2021-04-26 03:45:31 -0700;Parse and verify pjit in/out_axis_resources
This lets us focus the handling of all the quirks of `PartitionSpec` in
one place and should make it easier to extend support to xmap-like specs
in the future. This also adds new checks for repeated assignment of mesh
axes which would previously went unnoticed (the first annotation would
simply get ignored).

PiperOrigin-RevId: 370425384

==

jax/experimental/maps.py
jax/experimental/pjit.py
tests/pjit_test.py
==================
2c35b1af;Parker Schuh;2021-04-25 13:59:40 -0700;jnp.asarray -> _device_put_raw for call_tf.py

==

jax/experimental/jax2tf/call_tf.py
==================
a9986ce7;jax authors;2021-04-24 20:21:55 -0700;Merge pull request #6557 from google:enable-working-test
PiperOrigin-RevId: 370294198

==
==================
8f434539;Matthew Johnson;2021-04-24 15:18:26 -0700;re-enable a working test

==

tests/api_test.py
==================
887ed304;jax authors;2021-04-23 12:29:49 -0700;Merge pull request #6554 from hawkinsp:gmres
PiperOrigin-RevId: 370134381

==
==================
fb742461;Peter Hawkins;2021-04-23 15:13:40 -0400;Disable gmres test on CPU.
This test has started failing at LLVM head; disabling it while we debug.

==

tests/lax_scipy_sparse_test.py
==================
b83931a9;jax authors;2021-04-23 11:15:49 -0700;Merge pull request #6552 from jakevdp:fix-sparse-nnz
PiperOrigin-RevId: 370118143

==
==================
c9c3cb6d;jax authors;2021-04-23 10:47:17 -0700;Merge pull request #6534 from skye:test_warnings
PiperOrigin-RevId: 370111662

==
==================
f6d9e5ad;Jake VanderPlas;2021-04-23 10:36:28 -0700;[sparse] fix conversion issue when nnz is larger than necessary

==

jax/experimental/sparse_ops.py
tests/sparse_ops_test.py
==================
3ff51bbb;Skye Wanderman-Milne;2021-04-21 21:31:57 +0000;Use pytest's filterwarnings feature instead of filtering each test case.
We often forget to put the per-test-case decorators, resulting in test
failures in cases not covered by github CI (e.g. Cloud TPU
tests). This change filters the "experimental feature" warnings by
default.

==

pytest.ini
tests/pjit_test.py
tests/xmap_test.py
==================
69690626;jax authors;2021-04-23 10:07:19 -0700;Merge pull request #6549 from google:lower-fori-to-scan-2
PiperOrigin-RevId: 370102373

==
==================
f0264ea4;jax authors;2021-04-23 10:03:36 -0700;Merge pull request #6548 from LenaMartens:changelist/370070595
PiperOrigin-RevId: 370102278

==
==================
ca684df0;Jake VanderPlas;2021-04-23 09:10:43 -0700;DOC: add example for lax.dynamic_update_slice

==

jax/_src/lax/lax.py
==================
4ac8937e;Matthew Johnson;2021-04-23 08:31:11 -0700;enable fori-to-scan lowering

==

jax/_src/lax/control_flow.py
tests/lax_control_flow_test.py
tests/lax_numpy_test.py
==================
b244e2b8;Lena Martens;2021-04-23 14:43:20 +0100;Add eval_shape to the UnexpectedTracerError too.

==

jax/_src/api.py
jax/interpreters/partial_eval.py
tests/api_test.py
==================
973ca07a;Adam Paszke;2021-04-23 03:42:14 -0700;Add stricter resource overlap checking
We've had some checks for coinciding logical axes mapped to the same
resources in the existing xmap code, but they were quite lax. This
adds a proper type checker and a bunch of tests to verify that we
can catch the interesting failure cases.

PiperOrigin-RevId: 370051512

==

jax/experimental/maps.py
jax/interpreters/pxla.py
tests/xmap_test.py
==================
615f9adb;jax authors;2021-04-22 17:28:33 -0700;Merge pull request #6536 from pschuh:compile-replicated
PiperOrigin-RevId: 369985107

==
==================
23f847e0;Adam Paszke;2021-04-22 15:30:03 -0700;Make the initial-style -> final-style conversion rule based
Also, add a rule for pjit to make sure that we can eval jaxprs that
contain pjits.

PiperOrigin-RevId: 369964136

==

jax/core.py
jax/experimental/maps.py
jax/experimental/pjit.py
tests/pjit_test.py
==================
ca6f8186;cdfreeman-google;2021-04-22 13:50:37 -0700;Merge branch 'master' of https://github.com/cdfreeman-google/jax

==
==================
d69bb535;cdfreeman-google;2021-04-22 13:08:43 -0700;Added special cases for 2x2 and 3x3 determinant, and added test coverage for these cases.

==

jax/_src/numpy/linalg.py
tests/linalg_test.py
==================
23b5dfc9;cdfreeman-google;2021-04-22 13:08:43 -0700;Added special cases for 2x2 and 3x3 determinant, and added test coverage for these cases.

==

jax/_src/numpy/linalg.py
tests/linalg_test.py
==================
ba9233b9;Matthew Johnson;2021-04-09 21:29:42 -0700;prune trivial convert_element_types from jaxprs
also add a test for not performing H2D transfers while tracing jnp.array

==

docs/jaxpr.rst
jax/_src/numpy/lax_numpy.py
jax/interpreters/partial_eval.py
tests/api_test.py
==================
99b755f8;Parker Schuh;2021-04-09 15:49:07 -0700;Use convert_element_type insteadof device_put_raw.

==

jax/_src/numpy/lax_numpy.py
==================
594309c1;jax authors;2021-04-22 10:08:42 -0700;Merge pull request #6537 from gnecula:disable_tests
PiperOrigin-RevId: 369895220

==
==================
9d22a0a7;jax authors;2021-04-22 09:15:19 -0700;Merge pull request #6467 from lgeiger:conv-preferred-element-type
PiperOrigin-RevId: 369884941

==
==================
eb9d6e4d;Peter Choy;2021-04-08 14:08:51 +0000;Pass axis name to _match_axes and add to error message.

==

jax/interpreters/batching.py
tests/api_test.py
==================
454f5e67;Adam Paszke;2021-04-22 02:46:42 -0700;Enable nesting xmaps in SPMD lowering mode
This uses the recently added ability to modify the `BatchTrace` to add a new
`SPMDBatchTrace`, which additionally fills in `spmd_in_axes` and `spmd_out_axes`
of xmap primitives. Those fields are necessary, because XLA does not allow us to
emit partial `OpSharding` annotations, meaning that we have to track where the
positional axes of outer xmaps are inserted at the boundaries of inner xmaps.
Otherwise, XLA could misinterpret our intention and unnecessarily force
replication along the mesh axes used by the outer xmaps.

PiperOrigin-RevId: 369831571

==

jax/core.py
jax/experimental/maps.py
jax/experimental/pjit.py
jax/interpreters/batching.py
jax/interpreters/pxla.py
tests/xmap_test.py
==================
f7f42694;Lukas Geiger;2021-04-21 23:58:34 +0200;Add support for `preferred_element_type` arg in convolutions

==

jax/_src/lax/lax.py
jax/_src/lax/other.py
jax/experimental/jax2tf/jax2tf.py
tests/lax_test.py
==================
6ed06863;George Necula;2021-04-22 08:14:56 +0300;Extended the comment about disabling the test_multiple_barriers

==

tests/host_callback_test.py
==================
6e5880a2;jax authors;2021-04-21 16:23:23 -0700;Merge pull request #6532 from jakevdp:unique-axis
PiperOrigin-RevId: 369758257

==
==================
bb543f2b;Jake VanderPlas;2021-04-21 16:00:14 -0700;jnp.unique: add support for axis argument

==

CHANGELOG.md
jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
bb96ae76;Parker Schuh;2021-04-21 15:32:47 -0700;Change `wrap_execute_replicated` -> `compile_replicated`.
This avoids accessing the compiled object in order to
pass devices to shard_args. This allows the compiled object
to be constructed lazily inside the backend specific
`compile_replicated`.

==

jax/interpreters/pxla.py
==================
90d606fe;Jake VanderPlas;2021-04-21 14:51:46 -0700;Remove jax.experimental.doubledouble
PiperOrigin-RevId: 369740697

==

jax/BUILD
jax/experimental/doubledouble.py
tests/doubledouble_test.py
==================
122fbcbd;Jake VanderPlas;2021-04-21 14:48:07 -0700;cusparse: use cstdint types
PiperOrigin-RevId: 369739828

==

jaxlib/cusparse.cc
==================
c25706ea;jax authors;2021-04-21 12:06:36 -0700;Merge pull request #6531 from zhangqiaorjc:skiphb
PiperOrigin-RevId: 369705323

==
==================
4af95c7f;Qiao Zhang;2021-04-21 10:30:16 -0700;Skip hostcall back tests that require concurrency.

==

tests/host_callback_test.py
==================
a73fc71e;Adam Paszke;2021-04-21 11:04:52 -0700;Implement JVP for pjit
PiperOrigin-RevId: 369692330

==

jax/experimental/pjit.py
jax/interpreters/ad.py
jax/interpreters/xla.py
tests/pjit_test.py
==================
cae886b6;jax authors;2021-04-21 10:04:20 -0700;Merge pull request #6529 from hawkinsp:docs
PiperOrigin-RevId: 369678418

==
==================
aafe8870;Peter Hawkins;2021-04-21 11:10:38 -0400;Document that JAX follows the NEP-29 deprecation policy.
Remove the "experimental" disclaimer from the concurrency documentation.

==

docs/concurrency.rst
docs/deprecation.md
docs/index.rst
==================
8248837c;jax authors;2021-04-21 07:39:03 -0700;Merge pull request #6528 from hawkinsp:xla
PiperOrigin-RevId: 369652169

==
==================
8654a981;Peter Hawkins;2021-04-21 09:51:29 -0400;Update XLA.

==

WORKSPACE
==================
5261b776;Peter Hawkins;2021-04-21 06:36:08 -0700;Handle context manager configuration settings for matmul precision and numpy rank promotion correctly in JIT and linear_util caches.
PiperOrigin-RevId: 369643419

==

jax/_src/config.py
jax/_src/util.py
jax/core.py
jax/linear_util.py
tests/api_test.py
==================
0517675a;jax authors;2021-04-21 05:06:45 -0700;Merge pull request #6526 from LenaMartens:changelist/369624561
PiperOrigin-RevId: 369633081

==
==================
deb2227f;Lena Martens;2021-04-21 11:49:21 +0100;Make sure the out_axes in the HashableFunction closure are hashable.
By flattening them before putting them in the closure.

==

jax/_src/api.py
jax/experimental/maps.py
tests/pmap_test.py
tests/xmap_test.py
==================
42d2e762;Adam Paszke;2021-04-21 04:09:30 -0700;Implement nesting of pjits
Without this change nesting works only when the inner `pjit`ed functions don't
close over any values.

PiperOrigin-RevId: 369626779

==

jax/experimental/pjit.py
tests/pjit_test.py
==================
a7f07601;jax authors;2021-04-20 18:32:02 -0700;Merge pull request #6522 from skye:process_index2
PiperOrigin-RevId: 369563230

==
==================
9128ba0c;Skye Wanderman-Milne;2021-04-20 17:56:41 -0700;Replace `host_id` with `process_index` terminology, take 2.
We're switching to the new terminology to avoid confusion in cases
where multiple jax processes are running on a single host, and each
process has a unique process_index/host_id.

This keeps aliases for the old `host_id` APIs for now, but these will
eventually be removed.

This was originally commited in
b77ef5138b631378e6a8ceb8bafc94fe91239bae, but reverted in
14acd070c2afb11c81fc91f43790577cd48cbf67 due to Google-internal test
failures from renaming the local_devices argument name. This change is
identical except it also adds staging for the argument name change.

==

CHANGELOG.md
docs/jax.rst
jax/__init__.py
jax/_src/api.py
jax/api.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
jax/lib/xla_bridge.py
tests/xla_bridge_test.py
==================
6e099bf2;jax authors;2021-04-20 18:05:56 -0700;Merge pull request #6521 from skye:test_fixes
PiperOrigin-RevId: 369559987

==
==================
feb79e56;Skye Wanderman-Milne;2021-04-21 00:37:02 +0000;Fix some Cloud TPU test failures.
The new select_and_gather_add logic was inspired by
https://github.com/google/jax/commit/3a35f7072a063dd03c1c750d6660f2ffbf6f1f4f.

==

jax/_src/lax/lax.py
tests/pjit_test.py
==================
cdff8a1e;jax authors;2021-04-20 17:33:36 -0700;Merge pull request #6519 from zhangqiaorjc:disable_test
PiperOrigin-RevId: 369555579

==
==================
8310867b;jax authors;2021-04-20 16:13:11 -0700;Merge pull request #6515 from jakevdp:unique-complex
PiperOrigin-RevId: 369541171

==
==================
2baed8da;Qiao Zhang;2021-04-20 16:02:48 -0700;Disable HostCallbackIdTapTest.test_tap_multiple_barriers for TPU too since it runs on CPU.

==

tests/host_callback_test.py
==================
8321041c;jax authors;2021-04-20 14:44:40 -0700;Merge pull request #6475 from lgeiger:speedup-gh-actions
PiperOrigin-RevId: 369524098

==
==================
2c8b1f36;jax authors;2021-04-20 14:41:07 -0700;Merge pull request #6516 from zhangqiaorjc:treetest_fix
PiperOrigin-RevId: 369523337

==
==================
25955963;jax authors;2021-04-20 14:34:48 -0700;Merge pull request #6502 from skye:distributed_debug
PiperOrigin-RevId: 369522054

==
==================
99c142a0;Qiao Zhang;2021-04-20 14:10:30 -0700;Use assertRegex in TreeTest since pytest expects a different module prefix.

==

tests/tree_util_test.py
==================
93f26e1e;jax authors;2021-04-20 13:59:19 -0700;Merge pull request #6514 from hawkinsp:numpy2
PiperOrigin-RevId: 369514704

==
==================
13824363;Jake VanderPlas;2021-04-20 13:57:30 -0700;Make jnp.unique() support complex inputs

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
1614572e;Skye Wanderman-Milne;2021-04-19 12:45:17 -0700;Add optional distributed debugging logging.
This can be enabled by setting the environment variable
`JAX_DISTRIBUTED_DEBUG=1` (or other true-like values), the flag
`--jax_distributed_debug=1`, or `jax.config.distributed_debug =
True`. It's off by default.

This enables WARNING-level logging of each distributed computation
that's run and related debugging information. This is designed to help
with multi-process debugging, e.g. to identify mismatched pmaps across
processes. All debugging information is enclosed between
`DISTRIBUTED_DEBUG_BEGIN` and `DISTRIBUTED_DEBUG_END` to faciliate
grepping for this info.

Example output:

```
DISTRIBUTED_DEBUG_BEGIN
Initialized backend: tpu
  process_index: 0
  device_count: 8
  local_devices: [TpuDevice(id=0, process_index=0, coords=(0,0,0), core_on_chip=0), TpuDevice(id=1, process_index=0, coords=(0,0,0), core_on_chip=1), TpuDevice(id=2, process_index=0, coords=(1,0,0), core_on_chip=0), TpuDevice(id=3, process_index=0, coords=(1,0,0), core_on_chip=1), TpuDevice(id=4, process_index=0, coords=(0,1,0), core_on_chip=0), TpuDevice(id=5, process_index=0, coords=(0,1,0), core_on_chip=1), TpuDevice(id=6, process_index=0, coords=(1,1,0), core_on_chip=0), TpuDevice(id=7, process_index=0, coords=(1,1,0), core_on_chip=1)]
DISTRIBUTED_DEBUG_END

DISTRIBUTED_DEBUG_BEGIN
Running pmapped function: <lambda>
  python function: <function PmapTest.testArgAllReduce.<locals>.<lambda> at 0x7f77924d6c80>
  devices: None
  abstract args: [ShapedArray(float32[2,2])]
DISTRIBUTED_DEBUG_END

DISTRIBUTED_DEBUG_BEGIN
Running xmapped function: <lambda>
  python function: <function XMapTest.testAxisSizes.<locals>.<lambda> at 0x7fb33d86e158>
  mesh: Mesh(array([TpuDevice(id=0, process_index=0, coords=(0,0,0), core_on_chip=0),
       TpuDevice(id=1, process_index=0, coords=(0,0,0), core_on_chip=1)],
      dtype=object), ('x',))
  abstract args: []
DISTRIBUTED_DEBUG_END

DISTRIBUTED_DEBUG_BEGIN
Running pjit'd function: f
  python function: <function PJitTest.testShardingConstraintPyTree.<locals>.f at 0x7fad672b8b70>
  mesh: Mesh(array([[TpuDevice(id=0, process_index=0, coords=(0,0,0), core_on_chip=0)],
       [TpuDevice(id=1, process_index=0, coords=(0,0,0), core_on_chip=1)]],
      dtype=object), ('x', 'y'))
  abstract args: [ShapedArray(int32[8,8]), ShapedArray(int32[8,8]), ShapedArray(int32[8,8])]
DISTRIBUTED_DEBUG_END
```

==

jax/_src/config.py
jax/_src/util.py
jax/experimental/maps.py
jax/experimental/pjit.py
jax/interpreters/pxla.py
jax/lib/xla_bridge.py
==================
ba89c197;jax authors;2021-04-20 12:35:37 -0700;Merge pull request #6266 from JoostvDoorn:padding-cropping-fft
PiperOrigin-RevId: 369497327

==
==================
4409e03c;Peter Hawkins;2021-04-20 15:27:44 -0400;Remove workaround for NumPy < 1.14.
Following NEP 29, we don't need to support NumPy older than 1.17 these days (although in practice we also support 1.16).

Remove accidental export jnp.numpy_version.

==

jax/_src/numpy/lax_numpy.py
jax/numpy/__init__.py
==================
93b85780;jax authors;2021-04-20 12:24:23 -0700;Merge pull request #6512 from jakevdp:sparse-nonzero
PiperOrigin-RevId: 369494862

==
==================
828e2106;Adam Paszke;2021-04-20 11:40:32 -0700;Add a type checking rule for xmap
Also fix the type checking code in core, which incorrectly propagated output
avals of custom type checking rules.

PiperOrigin-RevId: 369485371

==

jax/core.py
jax/experimental/maps.py
==================
09a51982;Adam Paszke;2021-04-20 11:39:33 -0700;Extend pjit error checking to rank errors too
Otherwise one gets an inscrutable `IndexError`.

PiperOrigin-RevId: 369485185

==

jax/experimental/pjit.py
tests/pjit_test.py
==================
8808ddf9;Jake VanderPlas;2021-04-20 11:29:54 -0700;Use new jit-compatible jnp.nonzero() in sparse ops

==

jax/experimental/sparse_ops.py
==================
fd66e3dc;jax authors;2021-04-20 11:08:44 -0700;Merge pull request #6511 from hawkinsp:numpy2
PiperOrigin-RevId: 369478592

==
==================
8d75b594;jax authors;2021-04-20 10:45:48 -0700;Merge pull request #6501 from jakevdp:nonzero-jit
PiperOrigin-RevId: 369473074

==
==================
122b2b2c;Peter Hawkins;2021-04-20 13:41:48 -0400;Disable a test that fails with Numpy 1.17.5, but not Numpy 1.18.0.

==

tests/lax_numpy_test.py
==================
bbc7be06;jax authors;2021-04-20 10:23:10 -0700;Merge pull request #6239 from j-towns:lt-allow-integers
PiperOrigin-RevId: 369467931

==
==================
8d17cce8;Jake VanderPlas;2021-04-20 09:18:26 -0700;Add JIT-compatible version of jnp.nonzero

==

CHANGELOG.md
jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
c09037bd;Adam Paszke;2021-04-20 08:32:41 -0700;Move vtile to batching.py, make it possible to add new BatchTraces
No substantial behavior change right now, but the ability to use
subclasses of BatchTrace comes in handy when adding support for
nesting xmaps in the SPMD lowering.

PiperOrigin-RevId: 369445693

==

jax/_src/custom_derivatives.py
jax/_src/lax/control_flow.py
jax/experimental/maps.py
jax/interpreters/batching.py
jax/interpreters/pxla.py
==================
93c63d03;Adam Paszke;2021-04-20 03:48:07 -0700;Fix cache misses when re-creating equivalent mesh objects
The `Mesh` class was missing `__eq__` and `__hash__` and inherited the
(bad) Python defaults of comparison and hashing by identity.

PiperOrigin-RevId: 369407380

==

jax/interpreters/pxla.py
tests/pjit_test.py
tests/xmap_test.py
==================
14acd070;jax authors;2021-04-19 18:22:38 -0700;Internal change
PiperOrigin-RevId: 369345279

==

CHANGELOG.md
docs/jax.rst
jax/__init__.py
jax/_src/api.py
jax/api.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
jax/lib/xla_bridge.py
tests/xla_bridge_test.py
==================
da1b819f;Peter Hawkins;2021-04-19 17:51:18 -0700;Move contents of jax.custom_derivatives to jax._src.custom_derivatives.
PiperOrigin-RevId: 369340983

==

jax/_src/custom_derivatives.py
jax/custom_derivatives.py
jax/interpreters/invertible_ad.py
==================
be725472;jax authors;2021-04-19 16:42:26 -0700;Merge pull request #6500 from skye:v3-64-init
PiperOrigin-RevId: 369329513

==
==================
6722c145;Skye Wanderman-Milne;2021-04-19 15:49:40 -0700;Add v3-64 config to automatic Cloud TPU pod slice initialization.

==

jax/_src/cloud_tpu_init.py
==================
83d9aa50;jax authors;2021-04-19 15:48:33 -0700;Merge pull request #6215 from skye:process_index
PiperOrigin-RevId: 369319728

==
==================
b77ef513;Skye Wanderman-Milne;2021-03-24 15:28:26 -0700;Replace `host_id` with `process_index` terminology.
We're switching to the new terminology to avoid confusion in cases
where multiple jax processes are running on a single host, and each
process has a unique process_index/host_id.

This keeps aliases for the old `host_id` APIs for now, but these will
eventually be removed.

==

CHANGELOG.md
docs/jax.rst
jax/__init__.py
jax/_src/api.py
jax/api.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
jax/lib/xla_bridge.py
tests/xla_bridge_test.py
==================
f030e70e;Markus Kunesch;2021-04-19 14:06:11 -0700;xla: improvement to string representation of PyTreeDef
The string representation of PyTreeDef was different to how the underlying
containers are represented in python. This sometimes made it harder to read
error messages. This commit modifies the representation of tuples, lists,
dicts, and None so that it matches the pythonic representation.

The representation of custom nodes and NamedTuples is left unchanged since
their structure is not easily accessible in C++. However, to avoid confusion
they are now labelled "CustomNode" instead of "PyTreeDef". The latter is now
only used to wrap the whole representation. See below for examples.

Tests that relied on a specific string representation of PyTreeDef in error
messages are modified to be agnostic to the representation. Instead, this
commit adds a separate test of the string representation in tree_util_test.

Examples:

```
OLD: PyTreeDef(dict[['a', 'b']], [*,*])
NEW: PyTreeDef({'a': *, 'b': *})

OLD: PyTreeDef(tuple, [PyTreeDef(tuple, [*,*]),PyTreeDef(list, [*,PyTreeDef(tuple, [*,PyTreeDef(None, []),*])])])
NEW: PyTreeDef(((*, *), [*, (*, None, *)]))

OLD: PyTreeDef(list, [PyTreeDef(<class '__main__.AnObject'>[[4, 'foo']], [*,PyTreeDef(None, [])])])
NEW: PyTreeDef([CustomNode(<class '__main__.AnObject'>[[4, 'foo']], [*, None])])
```
PiperOrigin-RevId: 369298267

==

tests/api_test.py
tests/host_callback_test.py
tests/lax_control_flow_test.py
tests/tree_util_test.py
==================
e152d664;Jake VanderPlas;2021-04-19 13:16:35 -0700;Fix cusparse headers
PiperOrigin-RevId: 369287633

==

jaxlib/cusparse.cc
==================
d265fd56;Adam Paszke;2021-04-19 11:35:12 -0700;Ignore named shape when checking aval equality in AD
AD of code with named axes is still WIP, and pmap still doesn't take
proper care to handle them, so weaken the check for now.

PiperOrigin-RevId: 369265258

==

jax/interpreters/ad.py
==================
f285f0cc;Adam Paszke;2021-04-19 11:28:12 -0700;Fix pjit resource checks to verify the shapes against the local mesh.
PiperOrigin-RevId: 369263691

==

jax/BUILD
jax/experimental/pjit.py
==================
290d7494;jax authors;2021-04-19 10:45:32 -0700;Merge pull request #6460 from LenaMartens:changelist/368626329
PiperOrigin-RevId: 369254004

==
==================
fa5e19b6;Lena Martens;2021-04-15 14:21:53 +0100;Fix Zero handling in select_jvp.

==

jax/_src/lax/lax.py
==================
14d991dd;Peter Hawkins;2021-04-19 08:52:48 -0700;Move jax.config to jax._src.config.
PiperOrigin-RevId: 369230109

==

jax/__init__.py
jax/_src/api.py
jax/_src/config.py
jax/_src/dtypes.py
jax/_src/lax/lax.py
jax/api.py
jax/config.py
jax/core.py
jax/experimental/x64_context.py
jax/interpreters/pxla.py
jax/interpreters/sharded_jit.py
jax/lib/xla_bridge.py
jax/test_util.py
tests/image_test.py
tests/infeed_test.py
==================
0f964061;jax authors;2021-04-19 06:36:34 -0700;Merge pull request #6461 from apaszke:xmap-awn
PiperOrigin-RevId: 369208554

==
==================
7091ae5a;Joost van Doorn;2021-02-15 20:43:55 +0100;Add support for padding and cropping to fft

==

jax/_src/numpy/fft.py
tests/fft_test.py
==================
6f0f7174;jax authors;2021-04-16 13:39:55 -0700;Merge pull request #6470 from google:issue6452
PiperOrigin-RevId: 368911086

==
==================
9d6263a7;Matthew Johnson;2021-04-15 15:16:29 -0700;support implicit broadcasting in transpose rules

==

jax/_src/lax/lax.py
jax/interpreters/ad.py
jax/interpreters/batching.py
tests/api_test.py
tests/djax_test.py
tests/lax_autodiff_test.py
==================
919b11e8;Jake VanderPlas;2021-04-16 11:10:10 -0700;Remove unnecessary dependency
PiperOrigin-RevId: 368882451

==

jaxlib/BUILD
==================
c1ed3bd0;jax authors;2021-04-16 08:56:17 -0700;Merge pull request #6480 from LenaMartens:patch-3
PiperOrigin-RevId: 368856047

==
==================
fcf87cd7;Lena Martens;2021-04-16 14:20:25 +0100;Fix typo in NamedShape

==

jax/core.py
==================
c9b0b312;Adam Paszke;2021-04-14 15:23:52 +0000;Enable avals-with-names in xmap
Starting from this change, we start introducing xmapped names when
tracing the xmap jaxpr and eliminating them from avals when the values
are returned. This lets us enable two long-awaited checks:
1. Returning values that are mapped along more axes than `out_axes`
   declare now results in a readable error, instead of an internal
   vmap assertion.
2. We catch the resource-overlap error triggered by making two axes
   mapped to the same resources coincide in a single value.

==

jax/core.py
jax/experimental/maps.py
tests/xmap_test.py
==================
d9605c16;jax authors;2021-04-16 02:18:48 -0700;Merge pull request #6477 from zhangqiaorjc:hb1
PiperOrigin-RevId: 368806831

==
==================
6247c53e;Qiao Zhang;2021-04-15 21:02:38 -0700;Disable concurrent test_tap_multiple on CPU.
New TFRT CPU backend will have concurrent program execution which
can cause outfeed from different programs to interleave.

==

tests/host_callback_test.py
==================
78ea235a;Lukas Geiger;2021-04-16 02:55:41 +0200;CI: Install wheel pkg to improve pip-cache

==

.github/workflows/ci-build.yaml
==================
799ac413;George Necula;2021-04-15 16:50:47 -0700;Re-enable test disabled due to LLVM integrate bug
PiperOrigin-RevId: 368744520

==

jax/experimental/jax2tf/tests/shape_poly_test.py
==================
0f1ddf6d;jax authors;2021-04-15 16:06:15 -0700;Merge pull request #6468 from jakevdp:fromdense
PiperOrigin-RevId: 368736649

==
==================
ee7158fc;jax authors;2021-04-15 16:01:22 -0700;Merge pull request #6472 from skye:lax_scipy_sparse_test
PiperOrigin-RevId: 368735746

==
==================
346df9c5;Skye Wanderman-Milne;2021-04-15 15:54:15 -0700;Disable lax_scipy_sparse_test.py cases that are hanging on GPU.
See #6471.

==

tests/lax_scipy_sparse_test.py
==================
3bec91d0;Jake VanderPlas;2021-04-15 15:46:38 -0700;sparse: improve performance of COO/CSR fromdense() impl rules

==

jax/experimental/sparse_ops.py
==================
90f7e06b;Jamie Townsend;2021-03-26 11:14:43 +0000;Allow integer inputs/outputs of linear_transpose
Refine check to only allow float/complex -> float/complex or int -> int
functions (i.e. no mixing float/int inputs/outputs).

==

jax/_src/api.py
tests/api_test.py
==================
f65a327c;jax authors;2021-04-15 10:36:00 -0700;Merge pull request #6462 from jakevdp:fix-pytree-doc
PiperOrigin-RevId: 368668889

==
==================
8a221d3d;Peter Hawkins;2021-04-15 10:15:51 -0700;[JAX] Add support for sharing an LRU cache between multiple C++ jit-ted functions.
Adds a new CompiledFunctionCache object that can be passed to the CompiledFunction constructor. Multiple CompiledFunctions can share the same cache capacity.

This change is in preparation for adding jit decorators to many standard library functions. We do not want to drastically increase the number of cached computations, and having a cache shared between functions allows us to avoid this.

Also allow cache entries to persist past the lifetime of the enclosing jax.jit(f) call so long as `f` remains alive. This mirrors the behavior of the existing linear_util cache that JAX uses in Python.

PiperOrigin-RevId: 368664536

==

jax/_src/api.py
==================
0d4bcde7;Jake VanderPlas;2021-04-15 10:10:40 -0700;Add experimental/sparse_ops & cusparse wrappers in jaxlib
PiperOrigin-RevId: 368663407

==

build/BUILD.bazel
build/build_wheel.py
jax/BUILD
jax/experimental/sparse_ops.py
jax/lib/__init__.py
jaxlib/BUILD
jaxlib/cusparse.cc
jaxlib/cusparse.py
tests/sparse_ops_test.py
==================
862df009;jax authors;2021-04-15 10:06:00 -0700;Merge pull request #6439 from jakevdp:fix-nanmedian
PiperOrigin-RevId: 368662257

==
==================
89dc691d;Jake VanderPlas;2021-04-15 09:57:53 -0700;DOC: fix issue in pytrees.md

==

docs/pytrees.md
==================
7773d504;Jake VanderPlas;2021-04-14 13:53:59 -0700;Fix nanquantile for negative NaNs & adjust test harness to cover this

==

jax/_src/numpy/lax_numpy.py
jax/test_util.py
==================
3c003a68;Adam Paszke;2021-04-15 09:01:49 -0700;Split up the HLO compilation from HLO generation in mesh_callable.
PiperOrigin-RevId: 368649553

==

jax/interpreters/pxla.py
==================
b7ebcdb7;jax authors;2021-04-15 06:56:15 -0700;Merge pull request #6458 from gnecula:servo_poly
PiperOrigin-RevId: 368630727

==
==================
9b6b6b4b;Adam Paszke;2021-04-15 06:12:18 -0700;Add error checking to pjit
At the moment pjit doesn't really check any error conditions, which often
results in user errors triggering internal assertions in the pxla lowering.
This patch makes it so that we at least start raising reasonable failures
every time a divisiblity constraint is violated, or an undefined resource is
specified.

PiperOrigin-RevId: 368625285

==

jax/experimental/pjit.py
tests/pjit_test.py
==================
21cba074;George Necula;2021-04-15 16:06:30 +0300;Fix License issue

==

jax/experimental/jax2tf/examples/__init__.py
jax/experimental/jax2tf/examples/serving/__init__.py
==================
eff49fe1;George Necula;2021-04-15 15:48:00 +0300;[jax2tf] Upgraded examples and tests to allow shape polymorphism

==

jax/experimental/jax2tf/examples/README.md
jax/experimental/jax2tf/examples/__init__.py
jax/experimental/jax2tf/examples/keras_reuse_main.py
jax/experimental/jax2tf/examples/mnist_lib.py
jax/experimental/jax2tf/examples/saved_model_lib.py
jax/experimental/jax2tf/examples/saved_model_main.py
jax/experimental/jax2tf/examples/saved_model_main_test.py
jax/experimental/jax2tf/examples/serving/README.md
jax/experimental/jax2tf/examples/serving/__init__.py
jax/experimental/jax2tf/examples/serving/model_server_request.py
==================
c90e025e;jax authors;2021-04-15 05:34:21 -0700;Merge pull request #6435 from apaszke:xmap-jvp
PiperOrigin-RevId: 368621073

==
==================
2531a481;jax authors;2021-04-15 04:58:02 -0700;Merge pull request #6434 from gnecula:shape_poly_tests
PiperOrigin-RevId: 368616796

==
==================
a9a20c2a;jax authors;2021-04-15 04:47:30 -0700;Merge pull request #6419 from apaszke:minor-named-shape-update
PiperOrigin-RevId: 368615735

==
==================
e2d54663;George Necula;2021-04-09 14:02:44 +0300;[jax2tf] Re-organized the tests for shape polymorphism
Added primitive harnesses and rewrote many existing tests in terms
of those.

Fixed the shape polymorphism for jnp.where.

==

jax/_src/numpy/lax_numpy.py
jax/core.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/shape_poly_test.py
==================
b710183c;jax authors;2021-04-15 03:27:07 -0700;Merge pull request #6454 from gnecula:shape_poly_doc
PiperOrigin-RevId: 368606572

==
==================
2d95d5ad;Adam Paszke;2021-04-12 12:49:35 +0000;Small updates to abstract eval rules (AWN related)
I've been reading the AWN-related PRs and have found a few places that
could be improved a little.

==

jax/_src/lax/parallel.py
jax/core.py
==================
f8949f45;jax authors;2021-04-15 02:15:49 -0700;Merge pull request #6391 from marcvanzee:jax2tf
PiperOrigin-RevId: 368597738

==
==================
29929a8b;George Necula;2021-04-15 09:57:46 +0300;Update quickdraw.py
Minor cosmetic changes. The main reason I did this was to trigger another CI run.
==

jax/experimental/jax2tf/examples/tf_js/quickdraw/quickdraw.py
==================
3c6f3e50;George Necula;2021-04-15 09:50:00 +0300;[jax2tf] Added documentation for shape polymorphism

==

jax/experimental/jax2tf/README.md
jax/experimental/jax2tf/tests/shape_poly_test.py
==================
c85e8359;jax authors;2021-04-14 22:23:02 -0700;Merge pull request #6382 from NeilGirdhar:master
PiperOrigin-RevId: 368572133

==
==================
d0e42c9a;jax authors;2021-04-14 19:31:46 -0700;Merge pull request #6449 from skye:sphinx-autodoc-typehints
PiperOrigin-RevId: 368555788

==
==================
cec132e3;Skye Wanderman-Milne;2021-04-14 17:58:27 -0700;Pin sphinx-autodoc-typehints version to 1.11.1
Our docs build fails with 1.12.1: https://readthedocs.org/projects/jax/builds/13514541/
```
reading sources... [ 50%] _autosummary/jax.numpy.linalg.pinv

Traceback (most recent call last):
  File "/home/docs/checkouts/readthedocs.org/user_builds/jax/envs/latest/lib/python3.8/site-packages/sphinx/events.py", line 111, in emit
    results.append(listener.handler(self.app, *args))
  File "/home/docs/checkouts/readthedocs.org/user_builds/jax/envs/latest/lib/python3.8/site-packages/sphinx_autodoc_typehints.py", line 417, in process_docstring
    type_hints = get_all_type_hints(obj, name)
  File "/home/docs/checkouts/readthedocs.org/user_builds/jax/envs/latest/lib/python3.8/site-packages/sphinx_autodoc_typehints.py", line 271, in get_all_type_hints
    rv = backfill_type_hints(obj, name)
  File "/home/docs/checkouts/readthedocs.org/user_builds/jax/envs/latest/lib/python3.8/site-packages/sphinx_autodoc_typehints.py", line 312, in backfill_type_hints
    obj_ast = ast.parse(textwrap.dedent(
  File "/home/docs/.pyenv/versions/3.8.6/lib/python3.8/ast.py", line 47, in parse
    return compile(source, filename, mode, flags,
  File "<unknown>", line 12
    max_rows_cols = max(a.shape[-2:])
                                    ^
IndentationError: expected an indented block
```

This may be caused by https://github.com/agronholm/sphinx-autodoc-typehints/pull/166

==

docs/requirements.txt
==================
32564442;jax authors;2021-04-14 17:34:46 -0700;Merge pull request #6448 from skye:host_callback_test
PiperOrigin-RevId: 368542330

==
==================
cee14dab;Skye Wanderman-Milne;2021-04-15 00:15:30 +0000;Disable host_callback_test.py on multi-GPU platforms.
See #6447

==

tests/host_callback_test.py
==================
553aa98d;jax authors;2021-04-14 16:15:32 -0700;Merge pull request #6437 from apaszke:simplify-awn
PiperOrigin-RevId: 368528798

==
==================
6cc4bb04;jax authors;2021-04-14 15:24:06 -0700;Merge pull request #6420 from apaszke:faster-tests
PiperOrigin-RevId: 368519866

==
==================
3c362ced;jax authors;2021-04-14 12:29:16 -0700;Merge pull request #6380 from skye:python_trace_test
PiperOrigin-RevId: 368484288

==
==================
b91e4070;jax authors;2021-04-14 10:57:07 -0700;Merge pull request #6438 from skye:docker
PiperOrigin-RevId: 368463652

==
==================
cb881bb4;jax authors;2021-04-14 10:00:28 -0700;Merge pull request #6425 from apaszke:notebook-fix
PiperOrigin-RevId: 368451960

==
==================
63dd2a6f;Skye Wanderman-Milne;2021-04-14 09:44:42 -0700;Remove `-it` flag from `docker run` command in jaxlib build script.
It's unnecessary because the image isn't used interactively in the
script, and it prevents the script from being used when no TTY is
available (e.g. when running from a different script).

==

build/build_jaxlib_wheels_helpers.sh
==================
34f75ec1;Adam Paszke;2021-04-14 15:29:45 +0000;Simplify named shape handling in jax.core
This makes the named shape joining function significantly simpler and
also has the added benefit of removing the requirement of having a
global total order on named axes, which we definitely shouldn't require!
After all, they might be classes defined by users who are unaware of
e.g. the classes we use internally.

==

jax/core.py
==================
c13efc12;Adam Paszke;2021-04-14 14:01:28 +0000;Add JVP of xmap

==

jax/experimental/maps.py
tests/xmap_test.py
==================
e0357283;Adam Paszke;2021-04-13 10:27:48 +0000;Speed up test generation 7x
There are a few test cases that generate millions of configurations,
only to have a handful of them selected by `cases_form_list`. I've
found all tests that spend over 100ms in case generation and
converted them to a new "test sampler" approach. The result: test
generation time drops from 15s to around 2s. Doesn't sound like much,
but I expect that we all run tests many times daily, so it seems like a
useful thing to have.

The rough idea is that the sampling generators get parameterized by a
sampler function that should be applied to the range of every `for` loop.
This allows us to sample runs of the generator through different
configurations by restricting each loop to a smaller subset. Right now
we always narrow it down to a single randomly selected instance. But,
we still retain the possibility of adding exhaustive testing in the
future, which can be achieved by passing in an identity sampling
function that wouldn't modify any loop ranges.

==

jax/test_util.py
tests/lax_numpy_indexing_test.py
tests/lax_numpy_test.py
tests/lax_test.py
tests/lax_vmap_test.py
tests/pmap_test.py
tests/xmap_test.py
==================
62ac3e05;Adam Paszke;2021-04-13 16:58:58 +0000;Fix inline image embedding in the xmap tutorial

==

docs/notebooks/xmap_tutorial.ipynb
docs/notebooks/xmap_tutorial.md
==================
9d565525;Tom Hennigan;2021-04-14 01:16:37 -0700;Remove special casing on npy_value when indexing sharded arrays.
Before:

```
GPU
sda_index_2                           2912972 ns      2778716 ns          256

TPU
sda_index_1                            769968 ns       751700 ns          921
sda_index_2                           1510841 ns      1489716 ns          465
sda_index_8                           6102259 ns      6027655 ns          117
```

After:

```
GPU
sda_index_2                             28095 ns        27983 ns        25463

TPU
sda_index_1                             10302 ns        10279 ns        67884
sda_index_2                             20010 ns        19947 ns        34628
sda_index_8                             78492 ns        78306 ns         8934
```

PiperOrigin-RevId: 368380864

==

benchmarks/api_benchmark.py
jax/interpreters/pxla.py
==================
d17d9a80;jax authors;2021-04-13 15:59:56 -0700;Merge pull request #6428 from NeilGirdhar:weibull
PiperOrigin-RevId: 368313322

==
==================
175830fb;jax authors;2021-04-13 14:47:09 -0700;Merge pull request #6427 from hawkinsp:xla
PiperOrigin-RevId: 368298942

==
==================
e8273452;Neil Girdhar;2021-04-13 16:55:19 -0400;Make Weibull, Maxwell sampling parameters nonstatic
These parameters cannot be static since numpy arrays are not hashable.

==

jax/_src/random.py
==================
ba2a7920;Neil Girdhar;2021-04-08 16:16:06 -0400;Annotate custom_vjp and custom_jvp

==

jax/custom_derivatives.py
==================
b37158f9;Peter Hawkins;2021-04-13 16:49:51 -0400;Update XLA version.

==

WORKSPACE
==================
bea4515a;jax authors;2021-04-13 13:49:21 -0700;Merge pull request #6426 from hawkinsp:scattertest
PiperOrigin-RevId: 368287037

==
==================
2a3da097;Peter Hawkins;2021-04-13 14:10:11 -0400;Change scatter shape test to use eval_shape rather than instantiating concrete arrays.
Reduces space usage during testing.

==

tests/lax_test.py
==================
26e9ebcd;Peter Hawkins;2021-04-13 09:42:54 -0700;Move jax.api to jax._src.api.
PiperOrigin-RevId: 368233837

==

docs/notebooks/How_JAX_primitives_work.ipynb
docs/notebooks/How_JAX_primitives_work.md
examples/advi.py
jax/__init__.py
jax/_src/api.py
jax/_src/lax/control_flow.py
jax/_src/lax/fft.py
jax/_src/lax/lax.py
jax/_src/lax/linalg.py
jax/_src/numpy/vectorize.py
jax/_src/random.py
jax/_src/scipy/linalg.py
jax/_src/scipy/ndimage.py
jax/_src/scipy/special.py
jax/api.py
jax/experimental/host_callback.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/maps.py
jax/experimental/pjit.py
jax/test_util.py
tests/api_test.py
tests/batching_test.py
tests/core_test.py
tests/debug_nans_test.py
tests/host_callback_test.py
tests/host_callback_to_tf_test.py
tests/jax_jit_test.py
tests/lax_autodiff_test.py
tests/lax_control_flow_test.py
tests/lax_numpy_indexing_test.py
tests/lax_numpy_test.py
tests/lax_scipy_test.py
tests/lax_test.py
tests/lax_vmap_test.py
tests/loops_test.py
tests/multibackend_test.py
tests/random_test.py
tests/scipy_stats_test.py
tests/x64_context_test.py
==================
be8cba36;jax authors;2021-04-13 06:33:05 -0700;Merge pull request #6421 from hawkinsp:selectandgather
PiperOrigin-RevId: 368202850

==
==================
0f1520b6;Peter Hawkins;2021-04-13 09:09:10 -0400;Enable variadic select_and_gather on TPU.

==

jax/_src/lax/lax.py
==================
85637c7f;jax authors;2021-04-13 03:08:24 -0700;Merge pull request #6413 from chr1sj0nes:changelist/367202365
PiperOrigin-RevId: 368180171

==
==================
f87d05b4;Chris Jones;2021-04-07 13:44:08 +0100;Simplify all-reduce translation rule.
XLA should now be deterministic on GPU, so we don't need to special-case the GPU backend.

==

jax/_src/lax/parallel.py
==================
525158f0;jax authors;2021-04-12 19:16:25 -0700;Merge pull request #6414 from jakevdp:fix-permutation
PiperOrigin-RevId: 368130653

==
==================
a6a25bd7;jax authors;2021-04-12 19:12:56 -0700;Merge pull request #6417 from sharadmv:fix-custom-interpreters
PiperOrigin-RevId: 368130622

==
==================
577c6011;Sharad Vikram;2021-04-12 14:10:11 -0700;Update references in custom interpreter notebook

==

docs/notebooks/Writing_custom_interpreters_in_Jax.ipynb
docs/notebooks/Writing_custom_interpreters_in_Jax.md
==================
5b9ea5b7;Jake VanderPlas;2021-04-12 09:52:18 -0700;fix random.permutation for empty inputs

==

jax/_src/random.py
tests/random_test.py
==================
ad342419;jax authors;2021-04-12 16:39:59 -0700;Merge pull request #6412 from hawkinsp:cachesize
PiperOrigin-RevId: 368109741

==
==================
c8184a87;Peter Hawkins;2021-04-12 11:29:39 -0400;Ensure that profiler tests shut down the profiler, and disable a profiler test.
May help with CI OOM problems.

==

tests/profiler_test.py
==================
657d5f2d;jax authors;2021-04-12 13:56:57 -0700;Merge pull request #6416 from hawkinsp:index
PiperOrigin-RevId: 368077435

==
==================
5c8281bc;Peter Hawkins;2021-04-12 15:43:23 -0400;Avoid forming unnecessary constants when lowering NumPy indexing expressions.
Rather than progressively forming the indices for gather() by repeated concatentation, instead use a single large concatenation of all indices. This removes the need for a size 0 constant array in most cases.

==

jax/_src/numpy/lax_numpy.py
==================
631653c4;jax authors;2021-04-12 07:03:03 -0700;Merge pull request #6409 from superbobry:fix-jaxlib-stubs
PiperOrigin-RevId: 367994721

==
==================
8f250232;jax authors;2021-04-12 06:42:24 -0700;Merge pull request #6408 from LenaMartens:changelist/367979622
PiperOrigin-RevId: 367991796

==
==================
0ffd554a;Sergei Lebedev;2021-04-12 14:36:14 +0100;Fixed xla_extension-stubs packaging
setuptools does not consider a directory with an __init__.pyi a package.
This made it silently skip xla_extension-stubs when building a wheel.

See https://github.com/pypa/setuptools/blob/a4dbe3457d89cf67ee3aa571fdb149e6eb544e88/setuptools/_distutils/command/build_py.py#L183

==

build/build_wheel.py
==================
ce67e563;jax authors;2021-04-12 05:50:19 -0700;Merge pull request #6375 from gnecula:mask_clean
PiperOrigin-RevId: 367985125

==
==================
b4f66d26;Lena Martens;2021-04-12 12:59:12 +0100;Fix handling of ad.Zero in _select_and_scatter_add_transpose.
Fixes #6403.

==

jax/_src/lax/lax.py
==================
9e3001b9;Marc van Zee;2021-04-09 16:31:46 +0200;Some updates to jax2tf

==

jax/experimental/jax2tf/examples/tf_js/quickdraw/README.md
jax/experimental/jax2tf/examples/tf_js/quickdraw/quickdraw.py
==================
2fea627c;jax authors;2021-04-09 22:10:01 -0700;Merge pull request #6401 from dan-zheng:fix-doc-typos
PiperOrigin-RevId: 367755029

==
==================
980f8d41;jax authors;2021-04-09 21:28:41 -0700;Merge pull request #6402 from google:autodidax
PiperOrigin-RevId: 367751538

==
==================
0b41ff93;Dan Zheng;2021-04-09 20:15:24 -0400;DOC: fix typos.

==

docs/autodidax.ipynb
docs/autodidax.md
docs/autodidax.py
docs/developer.md
docs/notebooks/autodiff_cookbook.ipynb
docs/notebooks/autodiff_cookbook.md
==================
5f6bce4b;Matthew Johnson;2021-04-09 18:10:20 -0700;add 'open in colab' button, add numpy<1.18 compat
Co-authored-by: Edward Loper <edloper@google.com>

==

docs/autodidax.ipynb
docs/autodidax.md
docs/autodidax.py
==================
b4a8261b;jax authors;2021-04-09 15:26:26 -0700;Merge pull request #6399 from google:issue6372
PiperOrigin-RevId: 367715099

==
==================
60828e9b;Matthew Johnson;2021-04-09 14:43:13 -0700;raise error if vmap/pmap in_axes are booleans
fixes #6372

==

jax/api.py
tests/api_test.py
==================
f1a63979;jax authors;2021-04-09 13:18:56 -0700;Merge pull request #6397 from hawkinsp:omni
PiperOrigin-RevId: 367691152

==
==================
f3bc86d9;jax authors;2021-04-09 13:15:32 -0700;Merge pull request #6396 from hawkinsp:fixup
PiperOrigin-RevId: 367691123

==
==================
7ebf2c9c;jax authors;2021-04-09 13:01:17 -0700;Merge pull request #6384 from jakevdp:segments
PiperOrigin-RevId: 367688349

==
==================
3861da4f;Peter Hawkins;2021-04-09 15:44:18 -0400;Remove omnistaging references in CI build config.

==

.github/workflows/ci-build.yaml
==================
a54a5e59;Peter Hawkins;2021-04-09 15:13:32 -0400;Remove backward compatibility code paths for jaxlib < 0.1.65.
Fix up a few version comments.

==

jax/_src/profiler.py
jax/api.py
jax/core.py
jax/interpreters/xla.py
tests/lax_test.py
==================
a61e340f;jax authors;2021-04-09 12:08:56 -0700;Merge pull request #6395 from hawkinsp:selectandscatter
PiperOrigin-RevId: 367678374

==
==================
cbb70523;Jake VanderPlas;2021-04-09 12:06:51 -0700;Implement segment_prod, segment_max, segment_min

==

docs/jax.ops.rst
jax/_src/ops/scatter.py
jax/ops/__init__.py
tests/lax_numpy_indexing_test.py
==================
5442f290;jax authors;2021-04-09 11:45:35 -0700;Merge pull request #6394 from google:bump-min-jalxib-version
PiperOrigin-RevId: 367673711

==
==================
3a35f707;Peter Hawkins;2021-04-09 14:40:43 -0400;Implement select_and_gather_add using variadic reducewindow on CPU.

==

jax/_src/lax/lax.py
==================
e784c610;Matthew Johnson;2021-04-09 11:15:41 -0700;bump minimum jaxlib version

==

jax/version.py
==================
fb2824bd;Peter Hawkins;2021-04-09 07:10:02 -0700;[JAX] Add static_argnames support to jax.jit.
Requires a new jaxlib build.

Add support for static_argnames in C++ JIT implementation.

PiperOrigin-RevId: 367627359

==

CHANGELOG.md
jax/api.py
tests/api_test.py
==================
453fe5b3;jax authors;2021-04-09 06:37:12 -0700;Merge pull request #6386 from skye:wheel_helpers
PiperOrigin-RevId: 367622863

==
==================
f14f2b11;jax authors;2021-04-09 06:24:14 -0700;Merge pull request #6388 from gnecula:shape_poly_clean
PiperOrigin-RevId: 367621259

==
==================
8815425e;George Necula;2021-04-09 13:46:28 +0300;Cleanup of the dispatch to shape polymorphic dimension handlers

==

jax/core.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/shape_poly.py
jax/experimental/jax2tf/tests/shape_poly_test.py
==================
a27b9005;jax authors;2021-04-09 05:10:12 -0700;Merge pull request #6100 from apaszke:xmap-tutorial
PiperOrigin-RevId: 367613958

==
==================
cff180b5;jax authors;2021-04-09 03:11:11 -0700;Merge pull request #6387 from gnecula:poly_reductions
PiperOrigin-RevId: 367601914

==
==================
7667fc3b;George Necula;2021-04-09 11:10:32 +0300;[jax2tf] Added support for shape-polymorphic reductionsxs

==

jax/_src/numpy/lax_numpy.py
jax/experimental/jax2tf/tests/shape_poly_test.py
tests/masking_test.py
==================
45bae372;jax authors;2021-04-08 20:18:55 -0700;Merge pull request #6385 from rsepassi:patch-1
PiperOrigin-RevId: 367558056

==
==================
d91343c9;jax authors;2021-04-08 19:51:14 -0700;Merge pull request #6383 from jakevdp:tree-util-doc
PiperOrigin-RevId: 367555556

==
==================
ac0682dd;Skye Wanderman-Milne;2021-04-08 17:37:49 -0700;Factor out wheel-building functions in build_jaxlib_wheels.sh.
This will make it easier to build a single wheel, e.g. for GPU CI testing.

TESTING=I manually ran both build_jaxlib_wheels.sh and the individual
helper functions. I didn't do a full release build, but I verified
that a complete nocuda wheel can be successfully built.

==

build/build_jaxlib_wheels.sh
build/build_jaxlib_wheels_helpers.sh
==================
e3cb192e;Ryan Sepassi;2021-04-08 18:24:49 -0700;Make mesh thread-safe

==

jax/experimental/maps.py
==================
ffd18561;Jake VanderPlas;2021-04-08 15:59:55 -0700;DOC: fix tree_util.rst

==

docs/jax.tree_util.rst
==================
035c907d;jax authors;2021-04-08 13:54:11 -0700;Merge pull request #6381 from jakevdp:remove-fixture
PiperOrigin-RevId: 367499784

==
==================
096915d6;jax authors;2021-04-08 13:04:44 -0700;Merge pull request #6374 from hawkinsp:kwarg
PiperOrigin-RevId: 367490809

==
==================
cee3af58;Jake VanderPlas;2021-04-08 12:11:14 -0700;Testing: avoid global fixture for doctests

==

.github/workflows/ci-build.yaml
conftest.py
==================
438b56c4;jax authors;2021-04-08 10:42:25 -0700;Fix typo in rng_bit_generator comment.
PiperOrigin-RevId: 367460802

==

jax/_src/lax/lax.py
==================
6d93fa55;Skye Wanderman-Milne;2021-04-08 17:01:13 +0000;Test that Python tracing is enabled for programmatic profiling

==

tests/profiler_test.py
==================
db78037f;jax authors;2021-04-08 09:46:47 -0700;Merge pull request #6219 from apaszke:fix-xmap-allgather
PiperOrigin-RevId: 367449098

==
==================
6d700436;jax authors;2021-04-08 09:11:32 -0700;Merge pull request #6356 from jakevdp:mgrid-ogrid
PiperOrigin-RevId: 367442201

==
==================
1800e43e;Peter Hawkins;2021-04-08 09:05:52 -0700;[JAX] Make lax_reference private by moving it to jax._src.lax_reference.
PiperOrigin-RevId: 367441557

==

jax/_src/lax_reference.py
tests/lax_test.py
==================
ac1ed1f4;jax authors;2021-04-08 09:01:04 -0700;Merge pull request #6355 from jakevdp:segment-sum
PiperOrigin-RevId: 367439740

==
==================
38edc762;jax authors;2021-04-08 08:57:28 -0700;Merge pull request #6367 from jakevdp:pytree-class
PiperOrigin-RevId: 367439729

==
==================
40253f47;Adam Paszke;2021-03-17 16:12:10 +0000;Make xmap tutorial public
Note that xmap is still experimental, so treat this more as a preview
than as documentation.

==

docs/index.rst
docs/notebooks/xmap_tutorial.ipynb
docs/notebooks/xmap_tutorial.md
jax/experimental/maps.py
==================
011c5a20;Jake VanderPlas;2021-04-08 08:55:18 -0700;DOC: add register_pytree_node_class example

==

docs/pytrees.md
==================
ec7b10c4;Jake VanderPlas;2021-04-06 12:58:24 -0700;mgrid/ogrid: unify implementation & fill-out docstring

==

jax/_src/numpy/lax_numpy.py
==================
48ac77d2;Jake VanderPlas;2021-04-06 13:01:11 -0700;jax.ops.segment_sum: improve input validation

==

jax/_src/ops/scatter.py
==================
b935d33c;jax authors;2021-04-08 08:29:21 -0700;Merge pull request #6376 from hawkinsp:mypy
PiperOrigin-RevId: 367434694

==
==================
8a450c42;Peter Hawkins;2021-04-08 11:08:45 -0400;Silence some mypy errors seen with Python 3.9 and Numpy 1.20.
None of these seem like real errors, but making mypy happy doesn't make the code much worse.

==

jax/_src/random.py
jax/core.py
==================
0e280bba;George Necula;2021-04-08 17:45:14 +0300;[masking] Remove references to masking.Poly from the lax.py and lax_numpy.py
Previously, in order to increase the coverage of masking we added special
cases in lax.py and lax_numpy.py to avoid exceptions in presence of
masking.Poly.

For example:
```
if not isinstance(d, masking.Poly):
   if some_check(d):
      raise ValueError
```

All such conditionals make the code behave potentially different when
tracing with masking.Poly than when tracing with concrete shapes, which
makes it hard to ensure soundness.

Perhaps the most eggregious was:
```
if type(i) is Poly:
  # dummy index if i is polynomial, doesn't matter for shape inference
  i = 0
```

==

jax/_src/lax/lax.py
jax/_src/numpy/lax_numpy.py
jax/core.py
jax/experimental/jax2tf/shape_poly.py
jax/interpreters/masking.py
tests/masking_test.py
==================
9fad2441;Peter Hawkins;2021-04-08 10:32:35 -0400;Mark arguments to jax.jit() other than the function as keyword-only.
This change is to prevent breakage when options are added or removed.

==

CHANGELOG.md
jax/api.py
tests/lax_control_flow_test.py
tests/lax_numpy_vectorize_test.py
==================
3a9ce399;jax authors;2021-04-08 06:21:12 -0700;Merge pull request #6345 from gnecula:shape_poly
PiperOrigin-RevId: 367416742

==
==================
d9468c75;George Necula;2021-04-06 11:43:06 +0300;Cleanup the API, and more documentation

==

docs/developer.md
jax/core.py
jax/experimental/jax2tf/__init__.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/shape_poly.py
jax/experimental/jax2tf/tests/shape_poly_test.py
jax/experimental/jax2tf/tests/tf_test_util.py
pytest.ini
==================
14737e36;George Necula;2021-04-05 19:23:30 +0300;Rewrite for python 3.8

==

jax/_src/numpy/lax_numpy.py
==================
2e9e8242;George Necula;2021-04-05 16:37:35 +0300;Cleanup and fix triangular_solve

==

jax/_src/lax/lax.py
jax/_src/numpy/lax_numpy.py
jax/core.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/shape_poly.py
jax/experimental/jax2tf/tests/primitives_test.py
jax/experimental/jax2tf/tests/shape_poly_test.py
jax/experimental/jax2tf/tests/tf_test_util.py
jax/interpreters/masking.py
==================
0386ee38;George Necula;2021-04-05 15:56:30 +0300;Add more tests for dot_general

==

jax/experimental/jax2tf/tests/shape_poly_test.py
==================
99d5f09b;George Necula;2021-04-05 15:00:15 +0300;Fix select and eigh

==

jax/_src/lax/lax.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/shape_poly_test.py
==================
5750ec07;George Necula;2021-04-05 13:53:53 +0300;Fix scatter

==

jax/_src/lax/lax.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/shape_poly_test.py
==================
551a89cf;George Necula;2021-04-05 12:27:53 +0300;Fixes for slice

==

jax/_src/lax/lax.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/shape_poly_test.py
==================
cbe5f54c;George Necula;2021-04-05 11:08:46 +0300;Added support for lax.pad, and more error checking

==

jax/_src/lax/lax.py
jax/core.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/shape_poly.py
jax/experimental/jax2tf/tests/shape_poly_test.py
tests/lax_test.py
==================
3ae73a91;George Necula;2021-04-05 10:13:02 +0300;Improve harness selection for shape_poly_test

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/shape_poly_test.py
jax/experimental/jax2tf/tests/tf_test_util.py
==================
4f9ac031;George Necula;2021-04-04 17:05:18 +0300;Add some support for convolutions

==

jax/_src/lax/lax.py
jax/_src/numpy/lax_numpy.py
jax/core.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/shape_poly.py
jax/experimental/jax2tf/tests/shape_poly_test.py
==================
56e41b7c;George Necula;2021-04-04 16:23:24 +0300;Add support for cummax

==

jax/_src/lax/lax.py
jax/core.py
jax/experimental/jax2tf/shape_poly.py
jax/experimental/jax2tf/tests/shape_poly_test.py
==================
e37727cb;George Necula;2021-04-01 15:37:01 +0300;[jax2tf] Implementation of a parametric shape-polymorphism feature for jax2tf.
See the PR description.

==

jax/_src/lax/lax.py
jax/_src/numpy/lax_numpy.py
jax/abstract_arrays.py
jax/core.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/shape_poly.py
jax/experimental/jax2tf/tests/shape_poly_test.py
jax/experimental/jax2tf/tests/tf_test_util.py
jax/interpreters/masking.py
==================
59685f98;jax authors;2021-04-07 19:58:51 -0700;Merge pull request #6366 from shoyer:inspect-fallback
PiperOrigin-RevId: 367347533

==
==================
6a6f13e1;Peter Hawkins;2021-04-07 19:35:17 -0700;[JAX] Move contents of jax/dtypes.py to jax/_src/dtypes.py.
PiperOrigin-RevId: 367345623

==

docs/type_promotion.rst
jax/__init__.py
jax/_src/dtypes.py
jax/_src/lax/control_flow.py
jax/_src/lax/fft.py
jax/_src/lax/lax.py
jax/_src/lax/linalg.py
jax/_src/lax/parallel.py
jax/_src/nn/functions.py
jax/_src/numpy/lax_numpy.py
jax/_src/numpy/linalg.py
jax/_src/random.py
jax/abstract_arrays.py
jax/api.py
jax/api_util.py
jax/core.py
jax/custom_derivatives.py
jax/dtypes.py
jax/experimental/djax.py
jax/experimental/host_callback.py
jax/experimental/jax2tf/tests/jax2tf_limitations.py
jax/flatten_util.py
jax/interpreters/ad.py
jax/interpreters/masking.py
jax/interpreters/partial_eval.py
jax/interpreters/xla.py
jax/lax_reference.py
jax/lib/xla_bridge.py
jax/test_util.py
tests/dtypes_test.py
tests/lax_numpy_test.py
tests/lax_test.py
tests/tree_util_test.py
==================
3b216155;jax authors;2021-04-07 18:40:13 -0700;Merge pull request #6369 from skye:version
PiperOrigin-RevId: 367339773

==
==================
f8f37346;Skye Wanderman-Milne;2021-04-07 17:51:20 -0700;Update README, etc. for jaxlib 0.1.65 release

==

CHANGELOG.md
README.md
jaxlib/version.py
setup.py
==================
ebc86f83;Stephan Hoyer;2021-04-07 13:47:39 -0700;add fallback for inspect.signature inside jit

==

jax/api.py
tests/api_test.py
==================
ba843060;Adam Paszke;2021-03-25 11:31:55 +0000;Fix lax.all_gather inside xmap
The batching rule didn't properly handle tupled axis names.

==

jax/_src/lax/parallel.py
tests/xmap_test.py
==================
44cacffb;jax authors;2021-04-07 08:59:53 -0700;Merge pull request #6354 from ebuehrle:fix-flip
PiperOrigin-RevId: 367230106

==
==================
5c807580;jax authors;2021-04-07 06:52:01 -0700;Merge pull request #6361 from tomhennigan:changelist/367187404
PiperOrigin-RevId: 367210541

==
==================
138650e8;jax authors;2021-04-07 06:12:45 -0700;Merge pull request #6360 from gnecula:jax2tf_float0
PiperOrigin-RevId: 367205533

==
==================
441ded06;Tom Hennigan;2021-04-07 10:32:31 +0000;Remove `jax.argnums_partial`.

==

jax/__init__.py
==================
dce31e96;George Necula;2021-04-07 11:24:31 +0300;[jax2tf] Fix handling of float0

==

CHANGELOG.md
jax/experimental/jax2tf/README.md
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/jax2tf_test.py
jax/experimental/jax2tf/tests/tf_test_util.py
==================
42e01ee2;jax authors;2021-04-06 19:34:47 -0700;Merge pull request #6339 from google:djax-dot
PiperOrigin-RevId: 367134944

==
==================
f51fa64b;jax authors;2021-04-06 18:57:54 -0700;Merge pull request #6337 from ahoenselaar:changelist/366161141
PiperOrigin-RevId: 367130827

==
==================
e186b9e5;Andreas Hoenselaar;2021-04-06 13:38:36 -0700;Mark lu_pivots_to_permutation as "not yet implemented" in JAX2TF.

==

jax/experimental/jax2tf/jax2tf.py
==================
abf2d692;Matthew Johnson;2021-04-02 13:23:43 -0700;djax: add analogue of lower_fun, dot

==

jax/_src/lax/lax.py
jax/experimental/djax.py
==================
73bc0379;Etienne Bührle;2021-04-06 17:08:33 +0200;Fix jnp.flip for axis tuples

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
db367216;jax authors;2021-04-06 07:23:03 -0700;Merge pull request #6274 from superbobry:jaxlib-pyi
PiperOrigin-RevId: 367000617

==
==================
225ffc30;Sergei Lebedev;2021-03-29 13:07:19 +0100;Re-exported tensorflow...xla_extension type stubs in jaxlib
The type stubs allow using precise types for XLA primitives instead
of aliasing them to Any.

This commit does not change any type annotations within JAX. That will
be done in a followup. I have manually verified that type stubs are
discoverable by mypy once the new jaxlib is installed by type "checking"

    from jaxlib import xla_extension as xe
    d: xe._Dtype

==

build/build_wheel.py
jaxlib/setup.py
==================
30cfd86b;jax authors;2021-04-05 17:34:26 -0700;Merge pull request #6347 from jakevdp:reduce-precision
PiperOrigin-RevId: 366907683

==
==================
75c898e4;jax authors;2021-04-05 17:30:47 -0700;Merge pull request #6342 from minoring:impl-ogrid
PiperOrigin-RevId: 366907253

==
==================
b057d8a9;jax authors;2021-04-05 16:56:05 -0700;Merge pull request #6349 from jakevdp:fix-crossref
PiperOrigin-RevId: 366901914

==
==================
4c67dd1f;minoring;2021-04-05 10:35:45 +0900;Implement jnp.ogrid
Related to #5850

==

docs/jax.numpy.rst
jax/_src/numpy/lax_numpy.py
jax/numpy/__init__.py
tests/lax_numpy_test.py
==================
6eb76157;Jake VanderPlas;2021-04-05 16:09:04 -0700;Fix cross-reference in pytrees.md

==

docs/pytrees.md
==================
05e4a99d;jax authors;2021-04-05 14:48:16 -0700;Merge pull request #6348 from skye:workspace
PiperOrigin-RevId: 366878596

==
==================
55f8c398;Skye Wanderman-Milne;2021-04-05 14:39:18 -0700;Update WORKSPACE for jaxlib 0.1.65 release

==

WORKSPACE
==================
93a1882e;Jake VanderPlas;2021-04-05 14:16:50 -0700;lax.reduce_precision: add basic batching & masking rule

==

jax/_src/lax/lax.py
tests/lax_vmap_test.py
==================
8d11d527;jax authors;2021-04-05 13:28:48 -0700;Merge pull request #6344 from gnecula:tf_dot_general
PiperOrigin-RevId: 366862691

==
==================
9f2767a4;jax authors;2021-04-05 13:19:05 -0700;Merge pull request #6330 from jakevdp:doctest
PiperOrigin-RevId: 366860869

==
==================
8e789c73;Jake VanderPlas;2021-04-02 16:43:10 -0700;Run doctest on all source files except jax2tf

==

.github/workflows/ci-build.yaml
conftest.py
jax/_src/lax/control_flow.py
jax/_src/lax/lax.py
jax/_src/lax/parallel.py
jax/_src/numpy/polynomial.py
jax/_src/numpy/vectorize.py
jax/_src/ops/scatter.py
jax/_src/profiler.py
jax/custom_derivatives.py
jax/dtypes.py
jax/experimental/maps.py
jax/interpreters/xla.py
jax/random.py
pytest.ini
==================
af5b2380;Jake VanderPlas;2021-04-05 10:35:44 -0700;Add empty conftest.py
PiperOrigin-RevId: 366825504

==

conftest.py
==================
5a336c6e;jax authors;2021-04-05 10:17:27 -0700;Merge pull request #6328 from jakevdp:reduce-precision
PiperOrigin-RevId: 366821550

==
==================
33fde77b;Jake VanderPlas;2021-04-05 09:54:14 -0700;Add lax.reduce_precision()

==

docs/jax.lax.rst
jax/_src/lax/lax.py
jax/experimental/jax2tf/jax2tf.py
jax/lax/__init__.py
tests/lax_test.py
==================
4e2e30da;George Necula;2021-04-05 19:29:41 +0300;Increase tolerange for dot_general

==

jax/experimental/jax2tf/tests/jax2tf_limitations.py
==================
6176ac1c;George Necula;2021-04-05 15:56:38 +0300;[jax2tf] Fix bug in dot_general.
The case when there were batch dimensions but RHS has only
one inner dimmension was handled incorrectly. Add test also.

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
a19098d4;Andreas Hoenselaar;2021-03-31 18:35:15 -0700;Reimplement as JAX Primitive

==

build/BUILD.bazel
build/build_wheel.py
jax/_src/lax/linalg.py
jax/lib/__init__.py
jaxlib/BUILD
jaxlib/cuda_linalg.py
jaxlib/cuda_lu_pivot_kernels.cc
jaxlib/cuda_lu_pivot_kernels.cu.cc
jaxlib/cuda_lu_pivot_kernels.h
tests/linalg_test.py
==================
3c1ee064;jax authors;2021-04-02 14:38:07 -0700;Merge pull request #6329 from google:remove-dot-sum-of-products
PiperOrigin-RevId: 366515571

==
==================
9205b6f1;Matthew Johnson;2021-04-02 13:25:53 -0700;remove dead lax._dot_using_sum_of_products

==

jax/_src/lax/lax.py
==================
df4d2575;jax authors;2021-04-02 14:22:46 -0700;Merge pull request #6327 from google:djax-fixes
PiperOrigin-RevId: 366512664

==
==================
d4af8cd0;Matthew Johnson;2021-04-02 12:52:37 -0700;improve djax dim indexing type checking
Co-authored-by: Edward Loper <edloper@google.com>

==

jax/experimental/djax.py
==================
d2c53e05;jax authors;2021-04-02 09:37:46 -0700;Merge pull request #6273 from shoyer:static-kwargs2
PiperOrigin-RevId: 366459406

==
==================
dc61613d;jax authors;2021-04-02 07:02:50 -0700;Merge pull request #6248 from minoring:impl-mgrid
PiperOrigin-RevId: 366440154

==
==================
a2209aa5;minoring;2021-03-27 16:56:32 +0900;Implement jnp.mgrid
Related to #5850

==

docs/jax.numpy.rst
jax/_src/numpy/lax_numpy.py
jax/numpy/__init__.py
tests/lax_numpy_test.py
==================
0a90e756;jax authors;2021-04-01 18:46:03 -0700;Merge pull request #6296 from hawkinsp:weakref
PiperOrigin-RevId: 366374384

==
==================
e656ca71;jax authors;2021-04-01 16:54:02 -0700;Merge pull request #6322 from jakevdp:finalize-jax101
PiperOrigin-RevId: 366358552

==
==================
d96ec4b2;Jake VanderPlas;2021-04-01 16:27:06 -0700;DOC: clean up JAX 101 notebooks and remove WIP warning

==

docs/jax-101/01-jax-basics.ipynb
docs/jax-101/01-jax-basics.md
docs/jax-101/02-jitting.ipynb
docs/jax-101/02-jitting.md
docs/jax-101/03-vectorization.ipynb
docs/jax-101/03-vectorization.md
docs/jax-101/04-advanced-autodiff.ipynb
docs/jax-101/04-advanced-autodiff.md
docs/jax-101/05-random-numbers.ipynb
docs/jax-101/05-random-numbers.md
docs/jax-101/05.1-pytrees.ipynb
docs/jax-101/05.1-pytrees.md
docs/jax-101/06-parallelism.ipynb
docs/jax-101/06-parallelism.md
docs/jax-101/07-state.ipynb
docs/jax-101/07-state.md
docs/jax-101/index.rst
docs/requirements.txt
==================
3577fc27;jax authors;2021-04-01 16:08:09 -0700;Merge pull request #6321 from jakevdp:py38-docs-fix
PiperOrigin-RevId: 366350369

==
==================
c473fdee;Jake VanderPlas;2021-04-01 13:27:11 -0700;docs: tweaks to make docs build on Python 3.8

==

.readthedocs.yml
docs/jax.profiler.rst
jax/_src/numpy/lax_numpy.py
jax/_src/numpy/util.py
==================
3e980a79;jax authors;2021-04-01 15:48:47 -0700;Merge pull request #6318 from jakevdp:fix-docs
PiperOrigin-RevId: 366346817

==
==================
d6ccaca6;Jake VanderPlas;2021-04-01 09:58:12 -0700;Make numpy doc parsing more robust

==

jax/_src/numpy/util.py
==================
8691244f;jax authors;2021-04-01 10:32:05 -0700;Merge pull request #6319 from skye:version
PiperOrigin-RevId: 366280462

==
==================
7b42011f;Skye Wanderman-Milne;2021-04-01 10:11:52 -0700;Update jax version and changelog

==

CHANGELOG.md
jax/version.py
==================
72a75ee5;jax authors;2021-04-01 09:53:31 -0700;Merge pull request #6315 from jakevdp:changelog
PiperOrigin-RevId: 366271829

==
==================
7c4e26af;George Necula;2021-04-01 09:34:20 -0700;Rename GitHub workflow "without omnistaging" to "with 3.7"
PiperOrigin-RevId: 366267935

==

.github/workflows/ci-build.yaml
==================
2a091d26;Jake VanderPlas;2021-04-01 09:29:22 -0700;Update changelog for #5868

==

CHANGELOG.md
==================
9ca11d4d;jax authors;2021-04-01 09:25:08 -0700;Merge pull request #5868 from jakevdp:fix-randint
PiperOrigin-RevId: 366265880

==
==================
7a5d1b6c;jax authors;2021-04-01 07:03:54 -0700;Merge pull request #6311 from minoring:fix-minor-format-lax-numpy-test
PiperOrigin-RevId: 366243957

==
==================
94e2c995;Peter Hawkins;2021-04-01 00:05:00 -0700;Add an api_util hook facility, and add a hook to jax2tf.convert.
The hook API is intended to make it easier to monkey-patch particular APIs, but is an internal, unsupported API.

PiperOrigin-RevId: 366194658

==

jax/api_util.py
jax/experimental/jax2tf/jax2tf.py
==================
d4739f2f;minoring;2021-04-01 12:29:20 +0900;Fix minor indentation format in lax_numpy_test

==

tests/lax_numpy_test.py
==================
2090431b;Jake VanderPlas;2021-03-31 15:49:03 -0700;random.randint: support generating the full range of dtype

==

jax/_src/numpy/lax_numpy.py
jax/_src/random.py
tests/random_test.py
==================
640e62c7;Jake VanderPlas;2021-03-31 14:43:04 -0700;Rollback #6293
PiperOrigin-RevId: 366119851

==

jax/_src/numpy/lax_numpy.py
jax/_src/random.py
tests/random_test.py
==================
632876d7;Matthew Johnson;2021-03-31 13:50:34 -0700;Copybara import of the project:
--
35fcf2e2fd5b4c56cbb591f4c8bf01222a23dfe5 by Matthew Johnson <mattjj@google.com>:

remove deprecated custom_transforms code

PiperOrigin-RevId: 366108489

==

jax/__init__.py
jax/api.py
jax/experimental/djax.py
jax/interpreters/ad.py
jax/interpreters/batching.py
tests/api_test.py
==================
a5ae6331;jax authors;2021-03-31 13:42:21 -0700;Merge pull request #6305 from skye:jet_test
PiperOrigin-RevId: 366106815

==
==================
1f74a038;jax authors;2021-03-31 11:24:30 -0700;Merge pull request #6293 from jakevdp:randint-range-error
PiperOrigin-RevId: 366077002

==
==================
5fe87122;Skye Wanderman-Milne;2021-03-31 17:25:27 +0000;Adjust JetTest.test_scatter_add tolerance for TPU

==

tests/jet_test.py
==================
acb0be9c;Stephan Hoyer;2021-03-29 13:52:39 -0700;Add _python_jit_with_static_argnames.

==

jax/_src/util.py
jax/api.py
jax/api_util.py
jax/experimental/pjit.py
tests/api_test.py
==================
f0ff665e;Jake VanderPlas;2021-03-31 10:01:23 -0700;random.randint: clip rather than wrap out-of-bounds min/max

==

jax/_src/numpy/lax_numpy.py
jax/_src/random.py
tests/random_test.py
==================
d617acd8;jax authors;2021-03-30 18:55:27 -0700;Merge pull request #6287 from skye:tutorial_toc
PiperOrigin-RevId: 365944595

==
==================
47ff3030;Peter Hawkins;2021-03-30 21:51:25 -0400;Make JAX python code accept C++ DeviceArrayBase classes that don't support weakrefs.
Change in preparation for changing the implementation of DeviceArrayBase in C++.

==

jax/interpreters/xla.py
==================
c45e3239;jax authors;2021-03-30 15:21:22 -0700;Merge pull request #6290 from jakevdp:complex-any
PiperOrigin-RevId: 365908827

==
==================
618317d3;Jake VanderPlas;2021-03-30 11:10:34 -0700;BUG: fix complex warning on jnp.any/all

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
1f1d3dff;jax authors;2021-03-30 14:53:36 -0700;Merge pull request #6182 from hawkinsp:reduce
PiperOrigin-RevId: 365902926

==
==================
e5951ae7;jax authors;2021-03-30 14:44:35 -0700;Merge pull request #6257 from google:issue5365-2
PiperOrigin-RevId: 365899934

==
==================
a0e7cfa5;jax authors;2021-03-30 14:41:01 -0700;Merge pull request #6291 from jakevdp:reduction-tests
PiperOrigin-RevId: 365899915

==
==================
3fc1fdb1;Peter Hawkins;2021-03-23 10:31:02 -0400;Add a JVP rule for the general case of lax.reduce.

==

CHANGELOG.md
jax/_src/lax/lax.py
tests/lax_autodiff_test.py
==================
aa2472db;Matthew Johnson;2021-03-28 19:58:01 -0700;add scatter_add jet rule, fixes #5365
could use a better test though...

==

jax/_src/lax/lax.py
jax/experimental/jet.py
tests/jet_test.py
==================
634397dc;jax authors;2021-03-30 13:39:56 -0700;Merge pull request #6189 from LenaMartens:changelist/364621874
PiperOrigin-RevId: 365886852

==
==================
b48ca495;jax authors;2021-03-30 12:12:39 -0700;Merge pull request #6269 from jakevdp:x32-overflow
PiperOrigin-RevId: 365866951

==
==================
c70c3d50;Jake VanderPlas;2021-03-30 11:22:30 -0700;BUG: fix reduction for scalar input

==

jax/_src/numpy/lax_numpy.py
==================
c11e725e;Jake VanderPlas;2021-03-30 10:05:03 -0700;X32 mode: raise OverflowError for large integers

==

CHANGELOG.md
jax/_src/random.py
jax/dtypes.py
tests/api_test.py
tests/lax_numpy_test.py
tests/random_test.py
==================
624110e0;Skye Wanderman-Milne;2021-03-30 09:32:20 -0700;Reduce verbosity of jax-101 outline and fix pytree tutorial headers

==

docs/jax-101/05.1-pytrees.ipynb
docs/jax-101/05.1-pytrees.md
docs/jax-101/index.rst
==================
be70820c;Lena Martens;2021-03-23 19:47:58 +0000;Thread through transform name.

==

jax/_src/lax/control_flow.py
jax/interpreters/partial_eval.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
tests/api_test.py
tests/lax_control_flow_test.py
==================
88f5e264;jax authors;2021-03-30 04:43:21 -0700;Merge pull request #6250 from knighton:patch-1
PiperOrigin-RevId: 365783359

==
==================
2e93dd07;jax authors;2021-03-30 04:28:36 -0700;Merge pull request #6262 from gnecula:tap_empty
PiperOrigin-RevId: 365781652

==
==================
d323ad0f;George Necula;2021-03-29 17:21:56 +0300;[host_callback] Add support for tapping empty arrays
We make sure that both the inputs and the outputs of
callbacks can contain empty arrays.
Most platforms do not support empty infeed, so we ensure
we do not send those.

==

CHANGELOG.md
docs/sphinxext/jax_extensions.py
jax/experimental/host_callback.py
tests/host_callback_test.py
==================
4fc8fb57;jax authors;2021-03-29 18:56:13 -0700;Merge pull request #6276 from google:omnistaging-forever
PiperOrigin-RevId: 365714217

==
==================
9b440c9f;jax authors;2021-03-29 18:42:11 -0700;Merge pull request #6279 from hawkinsp:nan
PiperOrigin-RevId: 365712292

==
==================
399f330f;Matthew Johnson;2021-03-29 16:18:29 -0700;disable_omnistaging error, enable_omnistaging warn

==

jax/config.py
==================
0cd74c93;Peter Hawkins;2021-03-29 20:10:40 -0400;Fix declaration order problem when using JAX_DEBUG_NANS environment variable.

==

jax/api.py
==================
6d0b8327;jax authors;2021-03-29 15:43:09 -0700;Merge pull request #6275 from google:omnistaging-forever
PiperOrigin-RevId: 365681256

==
==================
2b792643;Matthew Johnson;2021-03-29 13:58:04 -0700;remove disable_omnistaging mechanism

==

jax/_src/errors.py
jax/_src/lax/control_flow.py
jax/_src/lax/lax.py
jax/_src/lax/parallel.py
jax/_src/numpy/lax_numpy.py
jax/_src/util.py
jax/api.py
jax/config.py
jax/core.py
jax/custom_derivatives.py
jax/experimental/doubledouble.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/jax2tf_test.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
jax/experimental/jet.py
jax/experimental/loops.py
jax/interpreters/ad.py
jax/interpreters/batching.py
jax/interpreters/invertible_ad.py
jax/interpreters/partial_eval.py
jax/interpreters/pxla.py
jax/interpreters/sharded_jit.py
jax/interpreters/xla.py
jax/lax/__init__.py
tests/api_test.py
tests/batching_test.py
tests/debug_nans_test.py
tests/djax_test.py
tests/host_callback_test.py
tests/infeed_test.py
tests/lax_control_flow_test.py
tests/lax_test.py
tests/metadata_test.py
tests/multi_device_test.py
tests/pmap_test.py
tests/random_test.py
tests/x64_context_test.py
tests/xmap_test.py
==================
2c3c8fb4;jax authors;2021-03-29 14:48:17 -0700;Merge pull request #6272 from jakevdp:foldin-test
PiperOrigin-RevId: 365669089

==
==================
ae957588;jax authors;2021-03-29 14:25:06 -0700;Merge pull request #6270 from jakevdp:coerce
PiperOrigin-RevId: 365663870

==
==================
4e1899d3;Jake VanderPlas;2021-03-29 13:52:18 -0700;Test: add test of random.fold_in for large integers

==

tests/random_test.py
==================
550e7831;Jake VanderPlas;2021-03-29 13:22:51 -0700;BUG: ensure that explicit conversion to uint64 does not overflow

==

jax/_src/numpy/lax_numpy.py
jax/dtypes.py
tests/lax_numpy_test.py
==================
5eb07c1b;jax authors;2021-03-29 10:11:08 -0700;Merge pull request #6047 from jakevdp:x64-overflow
PiperOrigin-RevId: 365601265

==
==================
97902325;Jake VanderPlas;2021-03-29 09:26:19 -0700;Python integer conversion: always return int64 or OverflowError

==

CHANGELOG.md
jax/_src/numpy/lax_numpy.py
jax/_src/random.py
jax/abstract_arrays.py
jax/dtypes.py
jax/interpreters/xla.py
tests/api_test.py
tests/lax_numpy_test.py
tests/random_test.py
==================
112ae410;jax authors;2021-03-29 07:17:01 -0700;Merge pull request #6232 from shoyer:irfft-transpose-fix
PiperOrigin-RevId: 365567972

==
==================
785b268e;jax authors;2021-03-29 07:07:47 -0700;Merge pull request #6261 from gnecula:jax2tf_prim
PiperOrigin-RevId: 365566506

==
==================
e0a87ef0;George Necula;2021-03-29 15:03:38 +0300;[jax2tf] Update limitations due to updates in TF

==

jax/experimental/jax2tf/g3doc/jax_primitives_coverage.md
jax/experimental/jax2tf/g3doc/primitives_with_limited_support.md
jax/experimental/jax2tf/tests/jax2tf_limitations.py
==================
993a025f;jax authors;2021-03-29 05:50:52 -0700;Merge pull request #6260 from gnecula:serving_doc
PiperOrigin-RevId: 365555386

==
==================
8772b2c1;James Knighton;2021-03-29 04:57:02 -0700;Allodidactax...

==

docs/autodidax.py
==================
51470996;George Necula;2021-03-29 14:20:15 +0300;[jax2tf] Fixed typos, and updated the jax2tf documentation

==

docs/developer.md
jax/experimental/jax2tf/README.md
jax/experimental/jax2tf/examples/README.md
jax/experimental/jax2tf/examples/keras_reuse_main.py
jax/experimental/jax2tf/examples/serving/README.md
jax/experimental/jax2tf/g3doc/primitives_with_limited_support.md
==================
09d840ee;jax authors;2021-03-29 04:38:05 -0700;Merge pull request #6179 from lgeiger:fix-jax2tf-docs
PiperOrigin-RevId: 365546772

==
==================
2022141b;jax authors;2021-03-29 04:20:05 -0700;Merge pull request #6208 from majnemer:int-conv
PiperOrigin-RevId: 365544250

==
==================
5fce79ed;George Necula;2021-03-29 14:15:27 +0300;Update fft_test.py
Trivial change to re-trigger the presubmit checks
==

tests/fft_test.py
==================
2ee251c4;jax authors;2021-03-28 19:24:52 -0700;Merge pull request #6255 from google:convert-element-type-internal-api
PiperOrigin-RevId: 365491226

==
==================
0b65469a;jax authors;2021-03-28 19:06:58 -0700;Merge pull request #6238 from j-towns:lt-instantiate-zeros
PiperOrigin-RevId: 365489911

==
==================
7242cc92;jax authors;2021-03-28 12:02:29 -0700;Merge pull request #6256 from google:issue5832
PiperOrigin-RevId: 365458764

==
==================
fe7c6e53;Matthew Johnson;2021-03-28 11:23:46 -0700;add test for #5832

==

tests/api_test.py
==================
4253c929;Matthew Johnson;2021-03-28 11:17:41 -0700;use correct batching util in custom_vjp_call_jaxpr
fixes #5832

==

jax/custom_derivatives.py
==================
8547c71b;Matthew Johnson;2021-03-28 10:32:02 -0700;simplify public lax.convert_element_type api
Specifically:
1. don't expose weak_type in the public api, as it's jax-internal
2. don't make new_dtype optional, which could make bugs easier

This change keeps the public API simpler, and also makes
convert_element_type match the ConvertElementType HLO. As an internal
API we can call lax._convert_element_type just like before.

==

jax/_src/lax/lax.py
jax/_src/numpy/lax_numpy.py
jax/lax/__init__.py
tests/dtypes_test.py
tests/lax_numpy_test.py
tests/lax_test.py
==================
0d19b7c0;James Knighton;2021-03-27 21:47:07 -0700;Mirror the minor spelling fixes over the {.ipynb, .md, .py}.

==

docs/autodidax.ipynb
docs/autodidax.md
docs/autodidax.py
==================
a5a93dc8;James Knighton;2021-03-27 21:20:34 -0700;Speling

==

docs/autodidax.ipynb
==================
2ed6bbed;jax authors;2021-03-27 20:15:35 -0700;Merge pull request #6249 from google:autodidax
PiperOrigin-RevId: 365394931

==
==================
5a055b1d;Matthew Johnson;2021-03-27 19:34:42 -0700;add WIP disclaimer to autodidax, fix some typos

==

docs/autodidax.ipynb
docs/autodidax.md
docs/autodidax.py
==================
3fcd1797;jax authors;2021-03-26 22:22:41 -0700;Merge pull request #6049 from google:autodidax
PiperOrigin-RevId: 365306466

==
==================
3595af2e;Matthew Johnson;2021-03-12 19:42:14 -0800;add linearize, vjp, grad. fix bugs.

==

docs/autodidax.ipynb
docs/autodidax.md
docs/autodidax.py
setup.cfg
==================
0a3ba6f2;Jamie Townsend;2021-03-26 10:50:24 +0000;Instantiate zero outputs of linear_transpose

==

jax/api.py
tests/api_test.py
==================
848fed8b;Matthew Johnson;2021-03-25 22:15:18 -0700;Work around CPython bug https://bugs.python.org/issue33261 exposed by changes to C++ JIT dispatch path.
PiperOrigin-RevId: 365189779

==

jax/api.py
==================
a136f61b;Peter Hawkins;2021-03-25 19:00:29 -0700;[JAX] Remove function wrappers in C++ JIT dispatch path.
Notable changes:
* Make CompiledFunction implement __get__() so it can be used as a bound method.
* Allow dynamic attributes in CompiledFunction.

Includes changes from https://github.com/google/jax/pull/6220 and https://github.com/google/jax/pull/6183 as diffbases.

PiperOrigin-RevId: 365170596

==

jax/api.py
tests/api_test.py
==================
bc2e4280;Stephan Hoyer;2021-03-25 17:09:56 -0700;Fix transpose rule for jnp.fft.irfft
Fixes #6223

==

jax/_src/lax/fft.py
tests/fft_test.py
==================
69f88e2e;jax authors;2021-03-25 18:22:37 -0700;Merge pull request #6229 from jakevdp:omnistaging-change
PiperOrigin-RevId: 365165906

==
==================
40dac942;Jake VanderPlas;2021-03-25 16:44:58 -0700;pre-release omnistaging cleanup

==

CHANGELOG.md
design_notes/omnistaging.md
jax/config.py
==================
d510f041;jax authors;2021-03-25 16:05:59 -0700;Merge pull request #6003 from sharadmv:callback-cd
PiperOrigin-RevId: 365144670

==
==================
0f45fa78;jax authors;2021-03-25 15:51:32 -0700;Merge pull request #6227 from jakevdp:fix-omnistaging-test
PiperOrigin-RevId: 365141354

==
==================
e6e9d583;jax authors;2021-03-25 15:48:09 -0700;Merge pull request #6190 from jakevdp:unused-args
PiperOrigin-RevId: 365141263

==
==================
2c91c785;jax authors;2021-03-25 15:17:05 -0700;Merge pull request #6226 from jakevdp:fix-pmap-dtype
PiperOrigin-RevId: 365135456

==
==================
97a95c16;jax authors;2021-03-25 15:02:45 -0700;Merge pull request #6220 from hawkinsp:apib
PiperOrigin-RevId: 365132475

==
==================
5c098b11;Jake VanderPlas;2021-03-25 14:47:18 -0700;DOC: remove unimplemneted parameters from lax.numpy docstrings

==

jax/_src/numpy/lax_numpy.py
jax/_src/numpy/util.py
==================
8f40b68c;Jake VanderPlas;2021-03-25 14:30:22 -0700;CI: quick fix for disable omnistaging test

==

.github/workflows/ci-build.yaml
==================
4e99b0e4;jax authors;2021-03-25 14:25:28 -0700;Merge pull request #6109 from skye:profiling
PiperOrigin-RevId: 365124199

==
==================
f6f0128c;Peter Hawkins;2021-03-25 11:09:43 -0400;Move api_boundary annotation onto C++ jit cache_miss function.
There's a small overhead to introducing an additional Python call frame, which we can avoid if we annotate only the cache miss case. This change does not seem to affect the filtered stack traces; it appears we filter all JAX-internal frames whenever any api_boundary is present.

==

jax/api.py
==================
cac1b891;Peter Hawkins;2021-03-25 13:12:28 -0700;[JAX] Refactor NaN/Inf checking in jitted functions.
Avoid performing NaN/Inf checking in the common path for calling a jit-ted function. Instead, add a global/thread-local `posthook` function that, if, set, the C++ jit code calls with the inputs (function, args, kwargs, outputs). Use the posthook feature to implement NaN checking.

Add a `_cache_miss` attribute to the C++ JIT function objects to allow the NaN checking code to extract and call the cache miss function.

PiperOrigin-RevId: 365108787

==

jax/api.py
jax/config.py
tests/debug_nans_test.py
==================
4139faf4;Jake VanderPlas;2021-03-25 12:43:31 -0700;Fix dtype for pmap of scalars

==

jax/_src/lax/parallel.py
tests/pmap_test.py
==================
700eb89d;jax authors;2021-03-25 12:40:34 -0700;Merge pull request #6224 from LenaMartens:patch-2
PiperOrigin-RevId: 365101575

==
==================
25a2e1a6;Lena Martens;2021-03-25 19:15:45 +0000;Fix the changelog link in the README.

==

README.md
==================
b68a08ad;Skye Wanderman-Milne;2021-03-17 17:33:25 +0000;Add programmatic profiling APIs, and rename some existing APIs.
This change provides aliases for the renamed APIs so existing code
won't break. We should remove these aliases after the next release.

==

CHANGELOG.md
docs/jax.profiler.rst
docs/profiling.md
jax/_src/profiler.py
jax/profiler.py
tests/profiler_test.py
==================
b8812b2a;jax authors;2021-03-25 10:03:31 -0700;Merge pull request #6108 from NeilGirdhar:annotate
PiperOrigin-RevId: 365063131

==
==================
8cd7545d;jax authors;2021-03-25 09:59:38 -0700;Merge pull request #6191 from jakevdp:versionadded
PiperOrigin-RevId: 365063092

==
==================
26f947da;jax authors;2021-03-25 00:42:57 -0700;Merge pull request #6216 from google:simplify-backward-pass
PiperOrigin-RevId: 364980032

==
==================
7defa050;David Majnemer;2021-03-24 11:08:07 -0700;Allow integer/boolean convolutions

==

jax/_src/lax/lax.py
tests/lax_test.py
==================
278b3ae1;Matthew Johnson;2021-03-24 23:00:51 -0700;add test for backward pass ref dropping

==

tests/api_test.py
==================
af0988ee;Neil Girdhar;2021-03-17 16:37:09 -0400;Annotate scatter and random

==

jax/_src/ops/scatter.py
jax/_src/random.py
==================
87fd7c06;jax authors;2021-03-24 17:05:29 -0700;Merge pull request #6204 from hawkinsp:disablejit
PiperOrigin-RevId: 364923095

==
==================
b1e1d0ac;Peter Hawkins;2021-03-24 11:20:35 -0400;Switch disable_jit() to use the common boolean state mechanism.

==

jax/_src/lax/control_flow.py
jax/api.py
jax/config.py
tests/random_test.py
==================
a261c768;Matthew Johnson;2021-03-24 16:25:50 -0700;simplify cotangent dropping in ad.backward_pass
Since variables in jaxprs are only assigned-to once, when we transpose
them we end up reading a variable's cotangent value only once. That
means we can pop the cotangent environment's reference to a cotangent
value in read_cotangent.

==

jax/interpreters/ad.py
==================
c7230817;jax authors;2021-03-24 15:50:25 -0700;Merge pull request #6143 from google:precision-flag
PiperOrigin-RevId: 364908477

==
==================
89768a3d;Matthew Johnson;2021-03-23 20:58:52 -0700;add jax_default_matmul_precision flag & context mngr

==

jax/__init__.py
jax/_src/lax/lax.py
jax/_src/numpy/lax_numpy.py
jax/config.py
tests/api_test.py
tests/lax_numpy_test.py
==================
d19188fb;jax authors;2021-03-24 13:47:25 -0700;Merge pull request #6212 from jakevdp:no-bfloat16
PiperOrigin-RevId: 364882473

==
==================
59c11aac;jax authors;2021-03-24 13:34:39 -0700;Merge pull request #6178 from jakevdp:dev-docs
PiperOrigin-RevId: 364878952

==
==================
f4e8c888;jax authors;2021-03-24 13:30:53 -0700;Merge pull request #6210 from skye:improved_pmap_error
PiperOrigin-RevId: 364878906

==
==================
605ac40c;Jake VanderPlas;2021-03-24 12:29:43 -0700;jax.dtypes: Remove outdated bfloat16 checks

==

jax/dtypes.py
==================
7b4c2e3c;jax authors;2021-03-24 12:58:20 -0700;Merge pull request #6203 from hawkinsp:x64
PiperOrigin-RevId: 364871527

==
==================
3bc34efd;jax authors;2021-03-24 12:45:56 -0700;Merge pull request #6211 from hawkinsp:cleanup
PiperOrigin-RevId: 364868672

==
==================
99daf136;Peter Hawkins;2021-03-24 15:28:01 -0400;Fix flake8 error.

==

jax/lib/__init__.py
==================
9f2550ec;jax authors;2021-03-24 12:12:11 -0700;Merge pull request #6209 from hawkinsp:cleanup
PiperOrigin-RevId: 364860794

==
==================
a18f8cc4;Skye Wanderman-Milne;2021-03-24 12:02:04 -0700;Improve nested pmap error message.
It currently gives a misleading error message in the case of nested pmaps without this change.

==

jax/interpreters/pxla.py
tests/pmap_test.py
==================
6ee6c592;Peter Hawkins;2021-03-24 12:00:12 -0700;Move jax.tree_util implementation to jax._src.tree_util.
NFC intended.

PiperOrigin-RevId: 364857920

==

jax/_src/tree_util.py
jax/api_util.py
jax/experimental/maps.py
jax/tree_util.py
tests/tree_util_test.py
==================
1d2c7b87;Peter Hawkins;2021-03-24 10:46:48 -0400;Change enable_x64 to use the common boolean configuration mechanism.
To keep C++ and Python state in synchronization, adds new update_..._hook callbacks to the boolean configuration objects that are called when global or thread-local state changes.

==

jax/config.py
jax/experimental/x64_context.py
==================
90e28a1b;Peter Hawkins;2021-03-24 14:32:23 -0400;Remove deprecated compatibility code for jaxlib < 0.1.64.

==

jax/lib/__init__.py
==================
0abaa29c;jax authors;2021-03-24 11:12:29 -0700;Merge pull request #6207 from hawkinsp:jaxlib
PiperOrigin-RevId: 364846271

==
==================
7052a87a;Peter Hawkins;2021-03-24 13:49:05 -0400;Increase minimum jaxlib version to 0.1.64.

==

CHANGELOG.md
jax/version.py
==================
2a00d963;jax authors;2021-03-24 10:32:22 -0700;Merge pull request #6184 from jurahul:changelist/357030847
PiperOrigin-RevId: 364835644

==
==================
fe24b281;jax authors;2021-03-24 07:59:00 -0700;Merge pull request #6201 from hawkinsp:lint
PiperOrigin-RevId: 364802722

==
==================
166fdd3d;Peter Hawkins;2021-03-24 09:35:12 -0400;Fix flake8 error at head.

==

jax/interpreters/xla.py
==================
69d0ed06;jax authors;2021-03-23 21:31:55 -0700;Merge pull request #6196 from google:disable-disable-omnistaging
PiperOrigin-RevId: 364718835

==
==================
fafa06db;jax authors;2021-03-23 20:09:29 -0700;Merge pull request #6197 from google:update-pypi
PiperOrigin-RevId: 364707244

==
==================
c4a09909;Matthew Johnson;2021-03-23 19:33:04 -0700;update version and changelog for pypi

==

CHANGELOG.md
jax/version.py
==================
332c1c3b;jax authors;2021-03-23 19:30:40 -0700;Merge pull request #6195 from hawkinsp:cleanup
PiperOrigin-RevId: 364702552

==
==================
70cd62d5;Matthew Johnson;2021-03-23 19:13:15 -0700;disable disable_omnistaging

==

jax/config.py
==================
d148a57b;jax authors;2021-03-23 19:10:27 -0700;Merge pull request #6112 from google:flag-cleanup
PiperOrigin-RevId: 364699891

==
==================
3c716a6d;Peter Hawkins;2021-03-23 22:03:25 -0400;Remove compatibility code for jaxlib < 0.1.63.

==

jax/interpreters/xla.py
jax/lazy.py
==================
fd7b286e;Matthew Johnson;2021-03-19 13:49:38 -0700;unify configuration state handling

==

jax/__init__.py
jax/_src/lax/control_flow.py
jax/_src/util.py
jax/api.py
jax/config.py
jax/core.py
jax/custom_derivatives.py
jax/dtypes.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/jax2tf_test.py
jax/experimental/x64_context.py
jax/interpreters/ad.py
jax/interpreters/batching.py
jax/interpreters/partial_eval.py
jax/interpreters/pxla.py
jax/interpreters/sharded_jit.py
jax/interpreters/xla.py
jax/linear_util.py
jax/test_util.py
mypy.ini
tests/api_test.py
tests/debug_nans_test.py
tests/djax_test.py
tests/lax_autodiff_test.py
tests/lax_control_flow_test.py
tests/lax_scipy_sparse_test.py
tests/lax_test.py
tests/nn_test.py
tests/random_test.py
tests/x64_context_test.py
==================
6ba38774;Jake VanderPlas;2021-03-23 16:13:06 -0700;DOC: strip versionadded markup from wrapped docstrings

==

jax/_src/numpy/util.py
==================
22a2be30;jax authors;2021-03-23 13:12:54 -0700;Merge pull request #6186 from jakevdp:bool-index-err
PiperOrigin-RevId: 364627330

==
==================
368f3f05;Peter Hawkins;2021-03-23 12:00:19 -0700;Rollforward of: [JAX] Add an opaque `extra_jit_context` field to the JAX C++ jit code.
This allows the JAX Python code to include extra context from, for example, the interpreter state as part of the C++ jit cache key.

PiperOrigin-RevId: 364611475

==

jax/api.py
jax/core.py
==================
0796bfe6;Jake VanderPlas;2021-03-23 11:23:20 -0700;errors: add NonConcreteBooleanIndexError & debugging tips

==

docs/errors.rst
docs/jax.ops.rst
jax/_src/errors.py
jax/_src/numpy/lax_numpy.py
jax/errors.py
tests/errors_test.py
==================
7890d6cc;Peter Hawkins;2021-03-23 11:11:34 -0700;Rollback of: [JAX] Add an opaque `extra_jit_context` field to the JAX C++ jit code.
This allows the JAX Python code to include extra context from, for example, the interpreter state as part of the C++ jit cache key.

PiperOrigin-RevId: 364599983

==

jax/api.py
jax/core.py
==================
fd73fdba;Rahul Joshi;2021-02-11 12:14:46 -0800;Enable sharded_jit_test and xmap SPMD tests for GPU.

==

jax/interpreters/sharded_jit.py
tests/sharded_jit_test.py
tests/xmap_test.py
==================
c275e267;jax authors;2021-03-23 09:44:21 -0700;Merge pull request #6088 from jakevdp:min-version
PiperOrigin-RevId: 364578552

==
==================
f2a6d464;Peter Hawkins;2021-03-23 08:34:40 -0700;[JAX] Add an opaque `extra_jit_context` field to the JAX C++ jit code.
This allows the JAX Python code to include extra context from, for example, the interpreter state as part of the C++ jit cache key.

PiperOrigin-RevId: 364563982

==

jax/api.py
jax/core.py
==================
97d00584;jax authors;2021-03-22 19:21:36 -0700;Merge pull request #6175 from dpfau:batch_triangular_solve
PiperOrigin-RevId: 364463845

==
==================
6386057c;Lukas Geiger;2021-03-23 00:55:11 +0100;DOC: Fix rendering of jax2tf docs

==

jax/experimental/jax2tf/g3doc/jax_primitives_coverage.md
jax/experimental/jax2tf/g3doc/primitives_with_limited_support.md
jax/experimental/jax2tf/tests/jax_primitives_coverage_test.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
f9a41625;Jake VanderPlas;2021-03-17 10:46:38 -0700;Specify minimum jaxlib version in a single location

==

build/test-requirements.txt
jax/lib/__init__.py
jax/version.py
jaxlib/version.py
setup.py
==================
0572f364;Jake VanderPlas;2021-03-22 15:44:47 -0700;Developer docs: mention how to setup new notebooks for syncing

==

docs/developer.md
==================
a1cf0667;jax authors;2021-03-22 16:01:04 -0700;Merge pull request #6176 from jakevdp:fix-6138
PiperOrigin-RevId: 364429076

==
==================
fe0f8b52;jax authors;2021-03-22 15:47:02 -0700;Merge pull request #6170 from jakevdp:fix-wraps
PiperOrigin-RevId: 364426183

==
==================
dac72ab6;Jake VanderPlas;2021-03-22 15:24:57 -0700;Fix tests broken in #6138

==

jax/dtypes.py
tests/dtypes_test.py
==================
e1646bf2;Peter Hawkins;2021-03-22 14:29:24 -0700;[JAX] Include jax_enable_x64 in the C++ JIT call signature.
This allows us to avoid building a tuple as part of JIT dispatch.

PiperOrigin-RevId: 364409162

==

jax/api.py
==================
809d6895;David Pfau;2021-03-22 21:29:39 +0000;Increase threshold for switching to unbatched triangular solve on GPU

==

jax/_src/lax/linalg.py
==================
894873e3;jax authors;2021-03-22 14:17:13 -0700;Merge pull request #6138 from adarob:bfloat-dtype
PiperOrigin-RevId: 364406416

==
==================
e1eddec6;jax authors;2021-03-22 13:52:02 -0700;Merge pull request #6169 from jakevdp:eig-doc
PiperOrigin-RevId: 364400732

==
==================
1e527d94;Jake VanderPlas;2021-03-22 13:48:00 -0700;Don't raise exception for failed docstring parsing

==

jax/_src/numpy/util.py
==================
032cd6ff;jax authors;2021-03-22 13:15:02 -0700;Merge pull request #6168 from jakevdp:jax-101
PiperOrigin-RevId: 364392297

==
==================
252bd6c0;Sharad Vikram;2021-03-09 18:40:25 -0800;Add support for custom derivatives in jax.experimental.callback

==

jax/experimental/callback.py
tests/callback_test.py
==================
68393a12;Adam Roberts;2021-03-22 14:50:44 -0400;Add test

==

tests/dtypes_test.py
==================
796f1bde;Jake VanderPlas;2021-03-22 10:43:04 -0700;DOC: add note about return type in jnp.linalg.eig

==

jax/_src/numpy/linalg.py
==================
f0b947bf;Jake VanderPlas;2021-03-22 10:21:02 -0700;JAX 101: add pytrees notebook

==

docs/jax-101/01-jax-basics.ipynb
docs/jax-101/01-jax-basics.md
docs/jax-101/05.1-pytrees.ipynb
docs/jax-101/05.1-pytrees.md
docs/jax-101/index.rst
==================
ecd8f51e;jax authors;2021-03-22 09:35:28 -0700;Merge pull request #6161 from agramfort:doc_typo_hard_tanh
PiperOrigin-RevId: 364336719

==
==================
555aba89;jax authors;2021-03-21 21:39:27 -0700;Merge pull request #6165 from google:convert-element-type-impl
PiperOrigin-RevId: 364239447

==
==================
214d273d;Matthew Johnson;2021-03-21 19:41:04 -0700;undo changes to host_callback (not needed anymore)

==

jax/_src/lax/lax.py
jax/experimental/host_callback.py
tests/host_callback_test.py
==================
fe4d12c1;Matthew Johnson;2021-03-21 19:38:12 -0700;move logic to traceable

==

jax/_src/lax/lax.py
tests/api_test.py
==================
8c3125c1;Matthew Johnson;2021-03-21 15:53:24 -0700;fix convert_element_type on large Py int inputs

==

jax/_src/lax/lax.py
jax/abstract_arrays.py
jax/experimental/host_callback.py
tests/api_test.py
tests/host_callback_test.py
tests/random_test.py
==================
af59542d;Matthew Johnson;2021-03-21 13:39:57 -0700;Re-applying the changes in #6014, after they had to be rolled-back.
PiperOrigin-RevId: 364200195

==

jax/_src/lax/lax.py
jax/_src/scipy/special.py
jax/core.py
jax/interpreters/partial_eval.py
tests/api_test.py
tests/random_test.py
==================
f28cf83b;Alexandre Gramfort;2021-03-21 16:29:03 +0100;DOC: fix typo in formula of hard_tanh

==

jax/_src/nn/functions.py
==================
3c377a2b;jax authors;2021-03-19 23:47:24 -0700;Merge pull request #6146 from google:clz
PiperOrigin-RevId: 364039346

==
==================
97aca25e;Matthew Johnson;2021-03-19 23:13:20 -0700;tell jax2tf to ignore clz

==

jax/experimental/jax2tf/jax2tf.py
==================
57d5c6af;Matthew Johnson;2021-03-19 22:35:31 -0700;add clz primitive

==

jax/_src/lax/lax.py
jax/lax/__init__.py
jax/lax_reference.py
tests/lax_test.py
==================
a29d07f1;jax authors;2021-03-19 22:19:53 -0700;Merge pull request #6145 from google:issue6096
PiperOrigin-RevId: 364032763

==
==================
74279918;Roy Frostig;2021-03-19 21:01:00 -0700;skip scalars when broadcasting for batch dimension agreement

==

jax/_src/lax/lax.py
jax/interpreters/batching.py
tests/batching_test.py
==================
f8c36d9c;jax authors;2021-03-19 19:42:47 -0700;Merge pull request #6144 from google:issue6121
PiperOrigin-RevId: 364018304

==
==================
e0b3ef0f;Roy Frostig;2021-03-19 19:13:45 -0700;fix broadcasted 1x1 cofactor solve, called by linalg.det jvp

==

jax/_src/numpy/linalg.py
tests/linalg_test.py
==================
4f8814a7;jax authors;2021-03-19 16:35:12 -0700;Copybara import of the project:
--
bf15ba5310d5f9009571928f70548bcbc7e856c3 by Matthew Johnson <mattjj@google.com>:

don't device transfer in convert_element_type

Co-authored-by: Qiao Zhang <zhangqiaorjc@google.com>
PiperOrigin-RevId: 363995032

==

jax/_src/lax/lax.py
jax/_src/scipy/special.py
jax/core.py
jax/interpreters/partial_eval.py
tests/api_test.py
tests/random_test.py
==================
e6180156;jax authors;2021-03-19 15:21:47 -0700;Merge pull request #6115 from niklasschmitz:docfix-score-matching
PiperOrigin-RevId: 363981977

==
==================
64e851fc;jax authors;2021-03-19 14:51:32 -0700;Merge pull request #6014 from google:convert-element-type-bind
PiperOrigin-RevId: 363975639

==
==================
8deedd42;jax authors;2021-03-19 14:31:40 -0700;Merge pull request #6137 from jakevdp:improved-err
PiperOrigin-RevId: 363971591

==
==================
bf15ba53;Matthew Johnson;2021-03-09 15:58:39 -0800;don't device transfer in convert_element_type
Co-authored-by: Qiao Zhang <zhangqiaorjc@google.com>

==

jax/_src/lax/lax.py
jax/_src/scipy/special.py
jax/core.py
jax/interpreters/partial_eval.py
tests/api_test.py
tests/random_test.py
==================
36fba77e;jax authors;2021-03-19 13:36:16 -0700;Merge pull request #6136 from google:ravel-pytree
PiperOrigin-RevId: 363960173

==
==================
5c6ff67e;Matthew Johnson;2021-03-19 10:09:14 -0700;generalize ravel_pytree to handle int types, add tests

==

jax/flatten_util.py
tests/tree_util_test.py
==================
90f234fe;Adam Roberts;2021-03-19 13:14:24 -0400;Handle jax.numpy.dtype('bfloat16') properly.

==

jax/dtypes.py
==================
36ea462e;Jake VanderPlas;2021-03-19 10:14:24 -0700;grad(): improve error for traced argnums

==

jax/api.py
==================
d75becbf;jax authors;2021-03-19 06:45:54 -0700;Merge pull request #6065 from apaszke:xmap-partial-eval
PiperOrigin-RevId: 363880212

==
==================
1716995e;jax authors;2021-03-19 05:32:01 -0700;Merge pull request #6124 from LenaMartens:changelist/363689332
PiperOrigin-RevId: 363871136

==
==================
901e9196;jax authors;2021-03-19 05:20:08 -0700;Merge pull request #6127 from LenaMartens:changelist/363728011
PiperOrigin-RevId: 363869844

==
==================
5a52763e;jax authors;2021-03-18 21:52:20 -0700;Merge pull request #6133 from google:add-simple-eager-benchmarks
PiperOrigin-RevId: 363818694

==
==================
9802f337;Matthew Johnson;2021-03-18 21:46:46 -0700;add simple single-primitive eager benchmarks

==

benchmarks/api_benchmark.py
==================
75f191a2;jax authors;2021-03-18 19:34:08 -0700;Merge pull request #6104 from google:jit-memory-leak-test
PiperOrigin-RevId: 363801369

==
==================
90f8d1c8;Matthew Johnson;2021-03-18 18:56:47 -0700;xla.flatten_shape don't use recursive generators
This is an attempt to fix a strange memory leak failure which I can't
reproduce directly but seems to fail consistently in Google internal CI.

==

jax/interpreters/xla.py
==================
c83660d1;jax authors;2021-03-18 18:48:37 -0700;Merge pull request #6130 from google:issue6129
PiperOrigin-RevId: 363795655

==
==================
ee4ec867;Matthew Johnson;2021-03-18 18:05:22 -0700;make constant handlers follow type mro
fixes #6129

==

jax/lib/xla_bridge.py
tests/api_test.py
==================
d1a8ad07;jax authors;2021-03-18 17:24:29 -0700;Merge pull request #6128 from skye:version
PiperOrigin-RevId: 363783471

==
==================
0cbe2c1c;Skye Wanderman-Milne;2021-03-18 16:11:40 -0700;Update README, etc. for jaxlib 0.1.64 release

==

CHANGELOG.md
README.md
jaxlib/version.py
setup.py
==================
276645dd;Lena Martens;2021-03-18 20:08:33 +0000;Fix error when running a jvp of a jit of a custom_vjp.
Error before:
NotImplementedError: XLA translation rule for primitive 'custom_lin' not found

Error after:
TypeError: can't apply forward-mode autodiff (jvp) to a custom_vjp function.

==

jax/custom_derivatives.py
tests/api_test.py
==================
c229574c;jax authors;2021-03-18 12:10:08 -0700;Merge pull request #6123 from skye:pjit_test
PiperOrigin-RevId: 363713511

==
==================
79040f10;Adam Paszke;2021-03-18 11:53:10 -0700;Reenable multi-host xmap
Apparently the implementation has regressed quite a bit since I've last tried it.
Also added some tests to the internal CI (not visible on GitHub) to make sure that
we don't regress again.

PiperOrigin-RevId: 363709635

==

jax/experimental/maps.py
==================
d86dd24b;Lena Martens;2021-03-18 17:32:33 +0000;Make sublevel weak-referable, and enable the leak checker on sublevels.
Reimplement Sublevel to not inherit from `int`.
See docs on weakref: "CPython implementation detail: Other built-in types
such as tuple and int do not support weak references even when subclassed."

==

jax/core.py
tests/api_test.py
==================
beca4095;Skye Wanderman-Milne;2021-03-18 11:25:06 -0700;Ignore expected pjit_test warning

==

tests/pjit_test.py
==================
2947f562;jax authors;2021-03-18 09:01:57 -0700;Merge pull request #6120 from skye:workspace
PiperOrigin-RevId: 363669433

==
==================
6965ab29;Skye Wanderman-Milne;2021-03-18 08:41:26 -0700;Update WORKSPACE for profiler fix

==

WORKSPACE
==================
6ac9463f;jax authors;2021-03-18 07:57:51 -0700;Merge pull request #6106 from jakevdp:lax-test
PiperOrigin-RevId: 363657075

==
==================
6041e1b7;Jake VanderPlas;2021-03-17 13:05:49 -0700;lax_test: increase test coverage

==

tests/lax_test.py
==================
0198f64d;jax authors;2021-03-18 04:55:11 -0700;Merge pull request #6103 from jakevdp:lax-const
PiperOrigin-RevId: 363632107

==
==================
1851d7c2;jax authors;2021-03-18 04:40:49 -0700;Merge pull request #6113 from gnecula:jax2tf_serving_2
PiperOrigin-RevId: 363630392

==
==================
255b1e3f;jax authors;2021-03-18 04:31:11 -0700;Merge pull request #6116 from gnecula:hcb_buffer_size
PiperOrigin-RevId: 363628962

==
==================
441178b3;George Necula;2021-03-18 11:40:48 +0100;Fix flake

==

jax/experimental/host_callback.py
==================
52408b35;George Necula;2021-03-18 11:09:33 +0100;Move the flag definitions to config
Without this when running tests the flag parsing may happen before the
host_callback module is loaded and then the host_callback flags may
be left undefined.

==

jax/config.py
jax/experimental/host_callback.py
==================
8f846a3a;George Necula;2021-03-18 10:23:28 +0100;[host_callback] Enable configuring the outfeed receiver buffer size
The C++ runtime is already configurable. We are adding here the ability
to pass the configuration parameter by environment variable and commmand-line
flag.

Fixes: #5782

==

jax/experimental/host_callback.py
==================
4b5265b4;Niklas Schmitz;2021-03-18 10:02:20 +0100;fix markdown math formatting

==

docs/notebooks/score_matching.ipynb
docs/notebooks/score_matching.md
==================
917db30d;George Necula;2021-03-18 08:53:00 +0100;Fix links and reviewer-suggested edits

==

jax/experimental/jax2tf/examples/serving/README.md
==================
dace1557;George Necula;2021-03-17 08:40:48 +0100;[jax2tf] Added instructions for using OSS TensorFlow model server.

==

jax/experimental/jax2tf/examples/mnist_lib.py
jax/experimental/jax2tf/examples/saved_model_main.py
jax/experimental/jax2tf/examples/serving/README.md
jax/experimental/jax2tf/examples/serving/model_server_request.py
==================
5e88ed29;jax authors;2021-03-17 18:06:12 -0700;Merge pull request #5834 from skye:sharding_annotation_trees
PiperOrigin-RevId: 363551364

==
==================
4a8c1291;Skye Wanderman-Milne;2021-02-24 09:40:29 -0800;Add pytree support to pjit's with_sharding_constraint

==

jax/experimental/pjit.py
tests/pjit_test.py
==================
23756a04;Peter Hawkins;2021-03-17 14:39:00 -0700;[JAX] Refactor handling of JIT interpreter state in jax_jit API.
Create separate holder objects for global and thread-local state, and move enable_x64 and disable_jit context into the holder objects.

Expose the global and per-thread state objects to Python via pybind11.

Refactoring only; no functional changes intended.

PiperOrigin-RevId: 363510449

==

jax/api.py
jax/config.py
jax/dtypes.py
jax/lib/__init__.py
==================
99b25af7;jax authors;2021-03-17 13:27:02 -0700;Merge pull request #6105 from skye:version
PiperOrigin-RevId: 363493991

==
==================
0181d039;Matthew Johnson;2021-03-17 12:40:23 -0700;add a memory leak test for jit jaxpr construction
Tweak implementation for `_inline_literals` not to include a class
defined in a function, since that seemed to cause leaking!

==

jax/interpreters/partial_eval.py
tests/core_test.py
==================
5f51d4fb;Jake VanderPlas;2021-03-17 13:07:53 -0700;Make lax._const() work for non-canonical dtypes

==

jax/_src/lax/lax.py
jax/dtypes.py
tests/lax_test.py
==================
52bd3062;jax authors;2021-03-17 11:55:31 -0700;Merge pull request #6074 from jakevdp:fix-error-url
PiperOrigin-RevId: 363472057

==
==================
ba024414;Jake VanderPlas;2021-03-17 11:50:28 -0700;Merge pull request #6085 from jakevdp:delete
PiperOrigin-RevId: 363468064

==
==================
757247b7;Skye Wanderman-Milne;2021-03-17 10:14:52 -0700;Update README, etc. for jaxlib 0.1.63 release

==

CHANGELOG.md
README.md
jaxlib/version.py
setup.py
==================
5a0fc962;jax authors;2021-03-17 08:56:58 -0700;Merge pull request #6092 from jakevdp:fix-ci
PiperOrigin-RevId: 363430374

==
==================
94e6314b;jax authors;2021-03-16 18:43:12 -0700;Merge pull request #6025 from bastings:patch-2
PiperOrigin-RevId: 363318137

==
==================
7ad51264;Skye Wanderman-Milne;2021-03-16 18:26:27 -0700;Update WORKSPACE for jaxlib 0.1.63 release, take 2
PiperOrigin-RevId: 363315929

==

WORKSPACE
==================
737e4796;Jake VanderPlas;2021-03-16 17:05:23 -0700;Initial implementation of jnp.delete

==

docs/jax.numpy.rst
jax/_src/numpy/lax_numpy.py
jax/numpy/__init__.py
tests/lax_numpy_test.py
==================
01ee29cf;Jake VanderPlas;2021-03-16 16:48:49 -0700;CI: fix broken package-overrides check

==

.github/workflows/ci-build.yaml
==================
0a84db59;jax authors;2021-03-16 15:20:40 -0700;Merge pull request #6068 from jakevdp:fix-result-type
PiperOrigin-RevId: 363282198

==
==================
6e1cd395;jax authors;2021-03-16 14:45:24 -0700;Merge pull request #6075 from jakevdp:fix-formatting
PiperOrigin-RevId: 363274347

==
==================
4d8e9540;Jake VanderPlas;2021-03-15 16:50:07 -0700;Sharp Bits: fix formatting of code blocks within list

==

docs/notebooks/Common_Gotchas_in_JAX.ipynb
docs/notebooks/Common_Gotchas_in_JAX.md
==================
3b7de31c;jax authors;2021-03-16 13:58:15 -0700;Merge pull request #6087 from jakevdp:pypi-extras
PiperOrigin-RevId: 363263098

==
==================
d6408a4e;Jake VanderPlas;2021-03-16 11:40:46 -0700;Add extras_require to setup.py

==

docs/requirements.txt
jax/lib/__init__.py
setup.py
==================
d2d7ecf1;jax authors;2021-03-16 13:21:52 -0700;Merge pull request #6082 from google:minjaxlib
PiperOrigin-RevId: 363255561

==
==================
328930b9;Peter Hawkins;2021-03-16 12:13:41 -0400;Increase minimum jaxlib version to 0.1.62.

==

CHANGELOG.md
build/test-requirements.txt
jax/_src/lax/lax.py
jax/api.py
jax/config.py
jax/dtypes.py
jax/lib/__init__.py
tests/jax_jit_test.py
tests/lax_control_flow_test.py
tests/lax_test.py
tests/x64_context_test.py
tests/xmap_test.py
==================
d326b077;jax authors;2021-03-16 12:10:03 -0700;Merge pull request #6086 from hawkinsp:numpy
PiperOrigin-RevId: 363239393

==
==================
2bf7dbce;jax authors;2021-03-16 11:28:46 -0700;Merge pull request #5736 from tberghammer:changelist/357690519
PiperOrigin-RevId: 363229118

==
==================
48a7b153;Peter Hawkins;2021-03-16 13:46:13 -0400;Fix test failure with NumPy 1.20.
Fixes #6083

==

tests/lax_numpy_test.py
==================
265a663d;jax authors;2021-03-16 09:51:55 -0700;Merge pull request #6084 from skye:workspace
PiperOrigin-RevId: 363205601

==
==================
b319d234;Skye Wanderman-Milne;2021-03-16 09:43:22 -0700;Update WORKSPACE for jaxlib 0.1.63 release

==

WORKSPACE
==================
2ea52610;Tamas Berghammer;2021-02-16 12:31:01 +0000;Add new lax.rng_bit_generator primitive
The new primitive provides access to the RngBitGenerator HLO
(https://www.tensorflow.org/xla/operation_semantics#rngbitgenerator)

==

jax/_src/lax/lax.py
jax/experimental/jax2tf/jax2tf.py
jax/lax/__init__.py
tests/lax_test.py
==================
e9195ba6;Jake VanderPlas;2021-03-16 09:10:10 -0700;Fix URL in custom errors

==

jax/_src/errors.py
tests/errors_test.py
==================
2d148a33;jax authors;2021-03-16 08:03:23 -0700;Merge pull request #6078 from jacobaustin123:master
PiperOrigin-RevId: 363183679

==
==================
92bca617;Adam Paszke;2021-03-15 13:23:21 +0000;Fix incorrect handling of constants in xmap's partial_eval rule

==

jax/experimental/maps.py
tests/xmap_test.py
==================
25704a04;jax authors;2021-03-16 04:14:48 -0700;Merge pull request #6081 from gnecula:jax2tf_examples
PiperOrigin-RevId: 363151280

==
==================
f67aeead;George Necula;2021-03-16 12:01:16 +0100;Fix the output directory

==

jax/experimental/jax2tf/examples/saved_model_main.py
==================
53d21b20;jax authors;2021-03-16 03:42:02 -0700;Merge pull request #6077 from hawkinsp:jaxlibimport
PiperOrigin-RevId: 363147337

==
==================
840d5162;George Necula;2021-03-16 11:38:57 +0100;[jax2tf] Removed more traces of support for batch polymorphism
See issue #6080

* Also cleanup the examples

==

jax/experimental/jax2tf/README.md
jax/experimental/jax2tf/examples/README.md
jax/experimental/jax2tf/examples/mnist_lib.py
jax/experimental/jax2tf/examples/saved_model_lib.py
jax/experimental/jax2tf/examples/saved_model_main.py
jax/experimental/jax2tf/examples/saved_model_main_test.py
jax/experimental/jax2tf/examples/tflite/README.md
jax/experimental/jax2tf/examples/tflite/mnist/README.md
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/shape_poly_test.py
==================
9d28b670;Jacob Austin;2021-03-15 23:26:31 -0400;Fixed two small typos in jax.lax.

==

jax/_src/lax/lax.py
==================
3da12dbc;jax authors;2021-03-15 18:24:44 -0700;Merge pull request #6048 from skye:debug_nans
PiperOrigin-RevId: 363078153

==
==================
ee53eeb5;Peter Hawkins;2021-03-15 21:07:59 -0400;Add helpful message when `import jaxlib` fails.

==

jax/lib/__init__.py
==================
b3165bb6;jax authors;2021-03-15 17:22:27 -0700;Merge pull request #6064 from ebuehrle:patch-1
PiperOrigin-RevId: 363067775

==
==================
b0c5fba8;Jake VanderPlas;2021-03-15 14:38:14 -0700;BUG: fix jnp.result_type for non-canonical weak types

==

jax/_src/numpy/lax_numpy.py
jax/dtypes.py
tests/dtypes_test.py
==================
63c06ef7;Peter Hawkins;2021-03-15 12:29:44 -0700;[JAX] Add a .weak_type attribute to C++ array objects.
Use .weak_type instead of parsing avals from C++. Inspecting Python objects unnecessarily is slow. In addition we were building a Python bool object that we didn't need to build (`py::cast<py::bool_>` instead of `py::cast<bool>`).

Benchmarks on my workstation:

```
name                                old time/op             new time/op             delta
jit_trivial_dispatch                44.9µs ± 1%             44.3µs ± 0%   -1.37%          (p=0.008 n=5+5)
jit_trivial                         46.2µs ± 0%             45.6µs ± 0%   -1.39%          (p=0.008 n=5+5)
jit_simple_dispatch                 17.7µs ± 2%             16.6µs ± 1%   -6.37%          (p=0.008 n=5+5)
jit_simple                          18.5µs ± 5%             17.3µs ± 1%   -6.54%          (p=0.008 n=5+5)
jit_simple_many_args_dispatch_10    26.6µs ± 1%             22.6µs ± 2%  -15.12%          (p=0.008 n=5+5)
jit_simple_many_args_10             27.9µs ± 3%             24.6µs ± 4%  -12.00%          (p=0.008 n=5+5)
jit_simple_many_args_dispatch_100    107µs ± 1%               75µs ± 1%  -29.85%          (p=0.008 n=5+5)
jit_simple_many_args_100             108µs ± 1%               76µs ± 0%  -29.66%          (p=0.008 n=5+5)
jit_simple_many_args_dispatch_1000  1.01ms ± 1%             0.69ms ± 2%  -31.72%          (p=0.008 n=5+5)
jit_simple_many_args_1000           1.03ms ± 1%             0.71ms ± 2%  -30.77%          (p=0.008 n=5+5)
jit_simple_many_args_dispatch_2000  2.09ms ± 1%             1.43ms ± 3%  -31.78%          (p=0.008 n=5+5)
jit_simple_many_args_2000           2.08ms ± 1%             1.44ms ± 4%  -30.77%          (p=0.008 n=5+5)
jit_dispatch_without_transfer       1.41ms ± 1%             1.43ms ± 6%     ~             (p=1.000 n=5+5)
jit_dispatch_with_transfer          1.40ms ± 1%             1.40ms ± 1%     ~             (p=1.000 n=5+5)
```

PiperOrigin-RevId: 363002879

==

jax/interpreters/xla.py
tests/custom_object_test.py
==================
9a2a1ada;Peter Hawkins;2021-03-15 10:19:31 -0700;[JAX] Enable C++ device arrays by default.
[XLA:Python] Relax constraints on .aval and ._device attributes on C++ buffer objects. The constraints cause more problems than they solve. Switch _device to be a C++ attribute rather than a Python attribute. This avoids some unnecessary Python attribute parsing in the JIT dispatch path.

Change PyBuffer objects to call themselves `DeviceArray` in Python so as not to surprise JAX users.

PiperOrigin-RevId: 362969997

==

jax/interpreters/xla.py
tests/api_test.py
==================
2e90e72e;ebuehrle;2021-03-15 11:24:32 +0100;Fix code typo

==

docs/jax-101/06-parallelism.ipynb
docs/jax-101/06-parallelism.md
==================
80966fe5;jax authors;2021-03-15 09:19:52 -0700;Merge pull request #6018 from jakevdp:conv-elem-type
PiperOrigin-RevId: 362956294

==
==================
3fb6a11a;jax authors;2021-03-15 06:56:14 -0700;Merge pull request #6057 from inailuig:fix-complex-normal
PiperOrigin-RevId: 362930693

==
==================
1ad99d3d;jax authors;2021-03-15 03:10:41 -0700;Merge pull request #5999 from sharadmv:callback-scan
PiperOrigin-RevId: 362898757

==
==================
d78fe6b8;Clemens Giuliani;2021-03-14 22:23:05 +0100;fix the dtype of complex jax.random.normal and add a regression test for it

==

jax/_src/random.py
tests/random_test.py
==================
c56649aa;Skye Wanderman-Milne;2021-03-12 11:27:42 -0800;Make jax_debug_nans and jax_debug_infs work with pmap, xmap, and pjit.
Note that unlike in the jit case, this doesn't rerun the function in
op-by-op mode when it finds a nan, since we don't have op-by-op
parallel execution yet :)

This change doesn't appear to regress performance:

```
---------Benchmark summary for pmap_shard_outputs---------
  nouts    nshards       mean      %std    relative    mean/baseline
-------  ---------  ---------  --------  ----------  ---------------
     10          8   0.105598  5.06671      1               1.00693
    100          8   0.287756  0.870751     2.72502         0.973204
    500          8   1.20119   0.823624    11.3752          0.955185
   1000          8   2.56071   0           24.2497          0.983063
   5000          8  12.909     0          122.247           0.965925
    100          2   0.173727  5.15115      1.64518         0.98918
    100          4   0.207774  3.71411      1.9676          0.955849
    100          8   0.286103  1.60243      2.70937         0.971869
    100        100   2.34168   0           22.1755          0.904475
    100        500  15.9558    0          151.1             1.00483
```

Fixes #6044

==

jax/interpreters/pxla.py
jax/interpreters/xla.py
tests/debug_nans_test.py
==================
04bf02a4;Jake VanderPlas;2021-03-12 15:26:06 -0800;convert_element_type: don't canonicalize old_dtype

==

jax/_src/lax/lax.py
tests/lax_test.py
tests/x64_context_test.py
==================
3457696e;Matthew Johnson;2021-03-11 10:08:43 -0800;add linearize code (needs text)

==

docs/autodidax.ipynb
docs/autodidax.md
docs/autodidax.py
==================
8d3b4ac2;jax authors;2021-03-12 13:38:13 -0800;Merge pull request #6028 from jakevdp:transpose
PiperOrigin-RevId: 362590852

==
==================
77c1f313;jax authors;2021-03-12 11:35:44 -0800;Merge pull request #5966 from mtsokol:jax-numpy-where-keyword
PiperOrigin-RevId: 362565473

==
==================
a42e6533;jax authors;2021-03-12 11:19:49 -0800;Merge pull request #6029 from jakevdp:timeout-minutes
PiperOrigin-RevId: 362561981

==
==================
ed4c9449;Jake VanderPlas;2021-03-11 09:30:03 -0800;jnp.array.transpose: support positional axis arguments

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
60dcd0da;Jake VanderPlas;2021-03-11 11:55:50 -0800;Set reasonable timeouts for github actions jobs

==

.github/workflows/ci-build.yaml
==================
ea07d419;jax authors;2021-03-12 09:29:21 -0800;Merge pull request #6041 from tomhennigan:changelist/362481121
PiperOrigin-RevId: 362537513

==
==================
d743aa58;Mateusz Sokół;2021-03-06 11:53:01 +0100;Added 'where' keyword to 'jnp.{mean, var, std}'

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
4f74b339;Tom Hennigan;2021-03-12 16:38:29 +0000;Update README.md
Co-authored-by: 8bitmp3 <19637339+8bitmp3@users.noreply.github.com>
==

README.md
==================
9785230e;jax authors;2021-03-12 06:02:50 -0800;Merge pull request #6043 from hawkinsp:pocketfft
PiperOrigin-RevId: 362504596

==
==================
1ed321cb;Peter Hawkins;2021-03-12 08:46:01 -0500;Update PocketFFT version to fix crash due to undersized aligned allocations.

==

third_party/pocketfft/workspace.bzl
==================
0fd83a30;Tom Hennigan;2021-03-12 10:40:17 +0000;Link to DeepMind JAX blog post.

==

README.md
==================
c7ebc3ed;jax authors;2021-03-11 15:22:38 -0800;Merge pull request #6032 from skye:grpc_env_var
PiperOrigin-RevId: 362389283

==
==================
ee8ecb0a;jax authors;2021-03-11 15:15:53 -0800;Merge pull request #6015 from sethvargo:patch-1
PiperOrigin-RevId: 362387994

==
==================
5cb5056e;Skye Wanderman-Milne;2021-03-11 22:52:54 +0000;Suppress gRPC log spam on Cloud TPU.

==

jax/_src/cloud_tpu_init.py
==================
077793cd;jax authors;2021-03-11 13:23:53 -0800;Merge pull request #6019 from skye:examples_test
PiperOrigin-RevId: 362363477

==
==================
65ee6041;jax authors;2021-03-11 13:11:21 -0800;Merge pull request #6020 from jamestwebber:patch-1
PiperOrigin-RevId: 362360958

==
==================
cf4f4454;James Webber;2021-03-11 14:24:41 -0500;sync markdown

==

docs/jax-101/02-jitting.md
==================
6b923a98;jax authors;2021-03-11 10:48:43 -0800;Merge pull request #6026 from Chillee:patch-1
PiperOrigin-RevId: 362328216

==
==================
abdee436;Horace He;2021-03-11 05:56:52 -0500;Update 04-advanced-autodiff.md

==

docs/jax-101/04-advanced-autodiff.md
==================
e38d2723;Horace He;2021-03-11 05:55:48 -0500;Update 04-advanced-autodiff.ipynb

==

docs/jax-101/04-advanced-autodiff.ipynb
==================
6470094f;Jasmijn Bastings;2021-03-11 11:32:43 +0100;Fix import of datasets in differentially private SGD example

==

examples/differentially_private_sgd.py
==================
7ef86ef8;jax authors;2021-03-10 23:19:44 -0800;Merge pull request #6013 from zhangqiaorjc:new_dlpack_fix
PiperOrigin-RevId: 362224066

==
==================
cd619978;Skye Wanderman-Milne;2021-03-11 00:34:37 +0000;Adjust precision in examples/kernel_lsq.py and corresponding test.
This is important on TPU.

==

examples/examples_test.py
examples/kernel_lsq.py
==================
3a99e580;James Webber;2021-03-10 20:09:54 -0500;(hopefully) fix broken link

==

docs/jax-101/02-jitting.ipynb
==================
72a3036b;James Bradbury;2021-03-10 16:08:58 -0800;Hotfix for another assertion that's too strict about named shapes
PiperOrigin-RevId: 362164157

==

jax/_src/lax/control_flow.py
==================
9b7aa37a;Seth Vargo;2021-03-10 17:55:21 -0500;Update ci-build.yaml

==

.github/workflows/ci-build.yaml
==================
cf9b77f1;jax authors;2021-03-10 14:36:55 -0800;Merge pull request #5998 from zhangqiaorjc:dev_put_count
PiperOrigin-RevId: 362143966

==
==================
e523ae02;Qiao Zhang;2020-09-08 14:28:26 -0700;Add a test that fails due to unsupported strides.
- test fails during dlpack tensor to buffer conversion
- XLA layout does not support arbitrary dlpack strides
- users should explicit materialze such tensors by making a copy

==

tests/array_interoperability_test.py
==================
ecbc1347;Matthew Johnson;2021-03-10 14:16:48 -0800;fix typo

==

tests/api_test.py
==================
1048ebb9;Seth Vargo;2021-03-10 17:14:48 -0500;Update ci-build.yaml

==

.github/workflows/ci-build.yaml
==================
e550dda8;Seth Vargo;2021-03-10 16:26:01 -0500;Improve Actions hygiene
👋 hello there! I'm a fellow Googler who works on projects that leverage GitHub Actions for CI/CD. Recently I noticed a large increase in our queue time, and I've tracked it down to the [limit of 180 concurrent jobs](https://docs.github.com/en/actions/reference/usage-limits-billing-and-administration) for an organization. To help be better citizens, I'm proposing changes across a few repositories that will reduce GitHub Actions hours and consumption. I hope these changes are reasonable and I'm happy to talk through them in more detail.

- **(you were already doing this, thank you!**) Only run GitHub Actions for pushes and PRs against the main branch of the repository. If your team uses a forking model, this change will not affect you. If your team pushes branches to the repository directly, this changes actions to only run against the primary branches or if you open a Pull Request against a primary branch.

- For long-running jobs (especially tests), I added the "Cancel previous" workflow. This is very helpful to prevent a large queue backlog when you are doing rapid development and pushing multiple commits. Without this, GitHub Actions' default behavior is to run all actions on all commits.

There are other changes you could make, depending on your project (but I'm not an expert):

- If you have tests that should only run when a subset of code changes, consider gating your workflow to particular file paths. For example, we have some jobs that do Terraform linting, but [they only run when Terraform files are changed](https://github.com/google/exposure-notifications-verification-server/blob/c4f59fee71042cf668747e599e7c769fca736554/.github/workflows/terraform.yml#L3-L11).

Hopefully these changes are not too controversial and also hopefully you can see how this would reduce actions consumption to be good citizens to fellow Googlers. If you have any questions, feel free to respond here or ping me on chat. Thank you!
==

.github/workflows/ci-build.yaml
==================
61041cb1;jax authors;2021-03-10 12:49:55 -0800;Merge pull request #6010 from hawkinsp:issue4690
PiperOrigin-RevId: 362120286

==
==================
62a726d3;Peter Hawkins;2021-03-10 09:57:31 -0500;Add workaround for SelectAndScatter padding bug on CPU and GPU.

==

jax/_src/lax/lax.py
tests/lax_autodiff_test.py
==================
d11bba9c;Matthew Johnson;2021-03-10 12:20:36 -0800;tweak broken tests

==

tests/api_test.py
tests/random_test.py
==================
c9c89c48;jax authors;2021-03-10 10:32:56 -0800;Merge pull request #5997 from jakevdp:fix-piecewise
PiperOrigin-RevId: 362085337

==
==================
b675905d;jax authors;2021-03-10 10:14:08 -0800;Merge pull request #6012 from hawkinsp:lazy3
PiperOrigin-RevId: 362079742

==
==================
d0de7491;jax authors;2021-03-10 10:06:21 -0800;Merge pull request #5996 from skye:cudnn_versions
PiperOrigin-RevId: 362077738

==
==================
5098caf1;jax authors;2021-03-10 09:49:40 -0800;Merge pull request #5984 from skye:cloud_tpu_env_vars
PiperOrigin-RevId: 362072957

==
==================
c32d1e5a;Skye Wanderman-Milne;2021-03-05 14:57:36 -0800;Automatically initialize Cloud TPU topology env vars if running on a Cloud TPU VM.
This removes the need to manually set these env vars when running on a Cloud TPU pod slice.

==

jax/__init__.py
jax/_src/cloud_tpu_init.py
jax/cloud_tpu_init.py
==================
0acafcf8;jax authors;2021-03-10 08:59:12 -0800;Merge pull request #6011 from hawkinsp:token
PiperOrigin-RevId: 362060386

==
==================
5d6ff8b2;Peter Hawkins;2021-03-10 11:34:42 -0500;Readd omnistaging friendly versions of large constant tests.

==

tests/nn_test.py
==================
00349390;Peter Hawkins;2021-03-10 10:18:38 -0500;Fix crash returning a Token from a jit computation on GPU.
Calling .numpy_dtype() doesn't work on tokens. But we don't need a numpy dtype here, an XLA dtype works just as well.

==

jax/interpreters/xla.py
tests/api_test.py
==================
3e45a837;jax authors;2021-03-10 06:27:20 -0800;Merge pull request #6002 from hawkinsp:lazy3
PiperOrigin-RevId: 362034533

==
==================
ddaef193;Sharad Vikram;2021-03-09 15:21:07 -0800;Add scan and while rule for jax.experimental.callback transformation

==

jax/experimental/callback.py
tests/callback_test.py
==================
23b82b99;jax authors;2021-03-09 18:56:54 -0800;Merge pull request #6001 from skye:jaxlib_version
PiperOrigin-RevId: 361948443

==
==================
140c0acb;Peter Hawkins;2021-03-09 21:31:17 -0500;Remove the JAX lazy sublanguage.
Back in the mists of time, before omnistaging landed in JAX, we used lazy
expressions to avoid materializing large constants inside `jit` computations.
Omnistaging, which means that computations that are in the dynamic scope of a
`jit` are staged into the `jit` computation, has subsumed most of the reasons
for laziness to exist, and this PR removes the laziness support for simplicity.

At the time of this PR, laziness is used only for broadcasts and transposes in
eager mode (i.e., outside a `jit`). This allows us to:
a) fuse together multiple broadcasts and transposes, and
b) if a lazy expression is lexically captured by a `jit` computation, we can
   avoid materializing it in its expanded form.

It is not clear that laziness has sufficient power to weight ratio to continue
to exist, and it is making other work on improving JAX dispatch times more
difficult. As a result, this PR removes laziness to unblock that work; if we
want laziness again we would want to reimplement it in C++ anyway.

==

jax/_src/dlpack.py
jax/_src/lax/lax.py
jax/api.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
jax/lazy.py
tests/api_test.py
tests/custom_object_test.py
tests/multi_device_test.py
tests/nn_test.py
==================
f06bb9a7;Skye Wanderman-Milne;2021-03-09 17:55:40 -0800;Update jaxlib version etc.

==

CHANGELOG.md
README.md
jaxlib/version.py
==================
23099f60;jax authors;2021-03-09 16:27:37 -0800;Merge pull request #5835 from google:awn-abstract-eval
PiperOrigin-RevId: 361923732

==
==================
95778601;Qiao Zhang;2021-03-09 14:22:27 -0800;Add jtu.count_device_put for tests to count device_put.

==

jax/test_util.py
tests/api_test.py
tests/random_test.py
==================
2b9ffb1f;Matthew Johnson;2021-03-08 19:49:10 -0800;make axis_index bind respect dynamic traces

==

jax/_src/lax/parallel.py
tests/lax_control_flow_test.py
==================
47f17f04;James Bradbury;2021-03-04 04:13:04 -0800;add (broken) test

==

tests/lax_control_flow_test.py
==================
a8b82465;James Bradbury;2021-03-09 13:51:09 -0800;add some todos

==

jax/_src/lax/parallel.py
==================
1f17fa6a;Roy Frostig;2021-02-10 17:46:00 -0800;avoid modifying global pytype mappings in named-shape jaxpr test

==

tests/api_test.py
==================
e779ed82;Roy Frostig;2021-02-10 11:04:19 -0800;simplify standard named_shape_rule
Co-authored-by: Matthew Johnson <mattjj@google.com>

==

jax/_src/lax/lax.py
==================
c622422d;James Bradbury;2021-03-09 13:48:15 -0800;[avals with names] Propagate presence of name (mapped) vs absence (replicated) in abstract eval based on existing batching rules

==

jax/_src/lax/lax.py
jax/_src/lax/parallel.py
jax/api.py
tests/api_test.py
tests/lax_test.py
==================
ba0f785a;James Bradbury;2021-02-24 11:03:11 -0800;allow named axes on while_loop condition aval

==

jax/_src/lax/control_flow.py
==================
dbdb189d;Jake VanderPlas;2021-03-09 13:25:38 -0800;jnp.piecewise: support scalar inputs

==

jax/_src/numpy/lax_numpy.py
jax/test_util.py
tests/lax_numpy_test.py
==================
6515b5f6;jax authors;2021-03-09 11:22:18 -0800;Merge pull request #5977 from apaszke:xmap-with-control-flow
PiperOrigin-RevId: 361854852

==
==================
f1ba3bcc;jax authors;2021-03-09 11:12:39 -0800;Merge pull request #5990 from jakevdp:fix-power
PiperOrigin-RevId: 361852538

==
==================
55c75c8c;Skye Wanderman-Milne;2021-03-09 19:07:00 +0000;Update cuDNN versions to highest available.
The TF build depends on newer versions than we previously used.

==

build/install_cuda.sh
==================
b0d14fd2;jax authors;2021-03-09 10:29:12 -0800;Merge pull request #5951 from apaszke:revive-all-to-all
PiperOrigin-RevId: 361841703

==
==================
0c86c1fd;Jake VanderPlas;2021-03-09 09:36:41 -0800;jnp.power: fix overflow case for x1=0

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
0b88b0ea;jax authors;2021-03-08 20:50:15 -0800;Merge pull request #5856 from google:autodidax
PiperOrigin-RevId: 361722343

==
==================
8c7b8df2;jax authors;2021-03-08 18:44:34 -0800;Merge pull request #5978 from jakevdp:poisson-zero
PiperOrigin-RevId: 361707278

==
==================
a61c43c3;jax authors;2021-03-08 17:13:52 -0800;Merge pull request #5983 from skye:enable_tpu
PiperOrigin-RevId: 361692916

==
==================
591a4842;jax authors;2021-03-08 16:34:39 -0800;Merge pull request #5908 from jakevdp:transforms-doc
PiperOrigin-RevId: 361685827

==
==================
749ad955;Jake VanderPlas;2021-03-08 16:25:04 -0800;DOC: add transformations doc to HTML & reorganize contents

==

README.md
docs/index.rst
docs/jax.lax.rst
docs/jax.rst
docs/transformations.md
==================
7b7a2a1b;Skye Wanderman-Milne;2021-03-08 16:19:19 -0800;Don't build with Cloud TPU support for GPU or Mac wheels.
This should make our builds simpler and less failure-prone.

==

build/build.py
build/build_wheel_docker_entrypoint.sh
==================
902038a7;Skye Wanderman-Milne;2021-03-08 16:10:27 -0800;Revert breaking change:
Automatically initialize Cloud TPU topology env vars if running on a Cloud TPU VM.

This removes the need to manually set these env vars when running on a Cloud TPU pod slice.

PiperOrigin-RevId: 361681134

==

jax/__init__.py
jax/_src/cloud_tpu_init.py
jax/cloud_tpu_init.py
==================
35214a1c;jax authors;2021-03-08 15:30:52 -0800;Merge pull request #5962 from skye:cloud_tpu_env_vars
PiperOrigin-RevId: 361671219

==
==================
93d47793;jax authors;2021-03-08 15:27:24 -0800;Merge pull request #5980 from jakevdp:jax-101
PiperOrigin-RevId: 361671022

==
==================
35933238;Jake VanderPlas;2021-03-08 14:57:45 -0800;Initial commit of seventh JAX-101 notebook

==

docs/jax-101/07-state.ipynb
docs/jax-101/07-state.md
docs/jax-101/index.rst
==================
a68e8b3c;jax authors;2021-03-08 12:19:11 -0800;Merge pull request #5963 from jakevdp:jax-101-part6
PiperOrigin-RevId: 361626184

==
==================
0c139de8;jax authors;2021-03-08 12:15:32 -0800;Merge pull request #5964 from jakevdp:jax-101-authors
PiperOrigin-RevId: 361626033

==
==================
5a2859e1;Skye Wanderman-Milne;2021-03-05 14:57:36 -0800;Automatically initialize Cloud TPU topology env vars if running on a Cloud TPU VM.
This removes the need to manually set these env vars when running on a Cloud TPU pod slice.

==

jax/__init__.py
jax/_src/cloud_tpu_init.py
jax/cloud_tpu_init.py
==================
59790b3b;Jake VanderPlas;2021-03-08 11:06:53 -0800;Initial commit of sixth JAX-101 notebook

==

docs/jax-101/06-parallelism.ipynb
docs/jax-101/06-parallelism.md
docs/jax-101/index.rst
==================
66ada159;jax authors;2021-03-08 11:04:42 -0800;Merge pull request #5953 from google:changelog-symlink
PiperOrigin-RevId: 361607805

==
==================
42e5d073;jax authors;2021-03-08 10:57:39 -0800;Merge pull request #5979 from skye:workspace
PiperOrigin-RevId: 361606876

==
==================
482c933d;Skye Wanderman-Milne;2021-03-08 10:46:39 -0800;Update WORKSPACE for jaxlib 0.1.62 release

==

WORKSPACE
==================
9c420653;Roy Frostig;2021-03-05 11:07:50 -0800;move changelog to top level

==

CHANGELOG.md
docs/CHANGELOG.md
docs/changelog.md
docs/index.rst
==================
ec29275d;Adam Paszke;2021-03-08 12:27:01 +0000;Substitute axis names in nested jaxprs
Previously any collectives buried inside control flow would fail to
compile with xmap, because it would not traverse those with its name
substitution. This adds a "catch-all" default substitution rule which
recursively applies to all jaxpr found in the params (at the top level).

==

jax/core.py
jax/experimental/maps.py
tests/xmap_test.py
==================
0ec03c9d;Jake VanderPlas;2021-03-05 16:44:15 -0800;JAX 101: add authors to notebooks 2 through 5.

==

docs/jax-101/02-jitting.ipynb
docs/jax-101/02-jitting.md
docs/jax-101/03-vectorization.ipynb
docs/jax-101/03-vectorization.md
docs/jax-101/04-advanced-autodiff.ipynb
docs/jax-101/04-advanced-autodiff.md
docs/jax-101/05-random-numbers.ipynb
docs/jax-101/05-random-numbers.md
==================
c9d1ded0;Jake VanderPlas;2021-03-08 09:27:11 -0800;jax.random.poisson: fix return value for lam=0

==

jax/_src/random.py
tests/random_test.py
==================
2c7c86a4;Adam Paszke;2021-03-05 17:59:16 +0000;Reenable multi-axis all_to_all

==

jax/_src/lax/parallel.py
jax/core.py
jax/interpreters/partial_eval.py
tests/batching_test.py
tests/pmap_test.py
==================
00c29577;jax authors;2021-03-07 21:11:35 -0800;Merge pull request #5971 from hawkinsp:lazy
PiperOrigin-RevId: 361482727

==
==================
27228372;Peter Hawkins;2021-03-07 10:00:47 -0800;[XLA:Python] Split DevicePut out of `jax_jit` and refactor it.
* Creates a new py_values.cc/h file to contain device_put.
* Moves some of the type helpers into the existing types module.
* Change `PyClient::BufferFromPyval` to call DevicePut. There's no reason to have two similar but subtly different methods for copying a buffer-like object to a device.
* Refactor and optimize some of the handler functions. In particular, avoid creating a number of unnecessary intermediate objects.

PiperOrigin-RevId: 361430648

==

tests/jax_jit_test.py
==================
2469ad1b;Peter Hawkins;2021-03-05 14:58:00 -0500;Cleanups for laziness. No functional changes intended.
Use None as a trivial lazy expression in more places. Simplify some code.

==

jax/_src/dlpack.py
jax/_src/lax/lax.py
jax/api.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
tests/custom_object_test.py
==================
12c2d0d7;Peter Hawkins;2021-03-06 12:26:42 -0800;Delete jax.interpreters.xla.DeviceConstant.
PiperOrigin-RevId: 361342696

==

jax/interpreters/xla.py
==================
6b5133d7;Matthew Johnson;2021-02-25 17:58:03 -0800;autodidax: jit, multi-output, pytrees, DeviceArrays

==

docs/autodidax.ipynb
docs/autodidax.md
docs/autodidax.py
==================
2fc2ff40;Roy Frostig;2021-03-05 16:32:03 -0800;tiny change for source sync
PiperOrigin-RevId: 361249206

==

jax/_src/traceback_util.py
==================
306fb0bf;Roy Frostig;2021-03-05 15:54:01 -0800;Merge pull request #5958 from jakevdp:glossary
PiperOrigin-RevId: 361240568

==
==================
b5fd14c4;Jake VanderPlas;2021-03-05 14:16:14 -0800;DOC: add SPMD to the glossary

==

docs/glossary.rst
==================
3ab85de0;jax authors;2021-03-05 13:15:10 -0800;Merge pull request #5956 from google:issue5900
PiperOrigin-RevId: 361210667

==
==================
b3fed79a;Matthew Johnson;2021-03-05 12:47:20 -0800;add test for issue #5900, once jaxlib is updated

==

tests/lax_control_flow_test.py
==================
39a7158c;jax authors;2021-03-05 12:15:40 -0800;Merge pull request #5930 from hawkinsp:einsum
PiperOrigin-RevId: 361198769

==
==================
6ec90461;jax authors;2021-03-05 10:21:11 -0800;Merge pull request #5950 from google:update-pypi
PiperOrigin-RevId: 361173059

==
==================
8a4f0a89;Adam Paszke;2021-03-05 12:24:56 +0000;Make all_to_all primitive match XLA semantics
This has the benefit of limiting the insane axis arithmetic (with some
axes getting removed, and others introduced with their positions offset
by the removals) to the all_to_all user-facing function, but all the
collective rules should now be simpler to write. This should be a no-op
from the point of view of the users, but should make enabling all_to_all
splitting easier.

==

jax/_src/lax/parallel.py
jax/interpreters/partial_eval.py
tests/batching_test.py
tests/pmap_test.py
==================
7615d67e;jax authors;2021-03-05 10:14:05 -0800;Merge pull request #5945 from jakevdp:simplify-wrapped-doc
PiperOrigin-RevId: 361171526

==
==================
206acc1e;Matthew Johnson;2021-03-05 10:12:58 -0800;update jax for pypi

==

docs/CHANGELOG.md
jax/version.py
==================
8a8080c8;Jake VanderPlas;2021-03-05 09:16:41 -0800;Rewrite numpy docstring parser & remove extraneous sections

==

jax/_src/numpy/util.py
tests/lax_numpy_test.py
==================
76c1ec30;jax authors;2021-03-05 06:20:42 -0800;Merge pull request #5936 from apaszke:vmap-of-xmap
PiperOrigin-RevId: 361132011

==
==================
fcaf47e1;jax authors;2021-03-05 04:27:13 -0800;Merge pull request #5928 from apaszke:xmap-no-vmap
PiperOrigin-RevId: 361117714

==
==================
6884f21b;Adam Paszke;2021-03-04 18:08:45 +0000;Fix batching formula of xmap
Turns out that once you insert multiple dimensions things become much
more tricky than in the case of batching a one-dimensional map. Also
strenghten our tests to make sure we don't depend too much on the
semantics of the einsum batching rule.

==

jax/experimental/maps.py
tests/xmap_test.py
==================
249cd8b7;jax authors;2021-03-04 18:20:21 -0800;Merge pull request #5946 from skye:pjit_test
PiperOrigin-RevId: 361047721

==
==================
6f83cc69;jax authors;2021-03-04 17:33:30 -0800;Merge pull request #5940 from jakevdp:fix-doc
PiperOrigin-RevId: 361039997

==
==================
49cca16a;Skye Wanderman-Milne;2021-03-05 01:32:36 +0000;Ignore warnings in pjit_test.py

==

tests/pjit_test.py
==================
db01be20;jax authors;2021-03-04 15:23:44 -0800;Merge pull request #5933 from jakevdp:logsumexp-int
PiperOrigin-RevId: 361015218

==
==================
59622a43;jax authors;2021-03-04 14:47:40 -0800;Merge pull request #5941 from jakevdp:fix-cond-sig
PiperOrigin-RevId: 361007419

==
==================
fbc7e42f;jax authors;2021-03-04 14:44:13 -0800;Merge pull request #5911 from chsigg:patch-1
PiperOrigin-RevId: 361007343

==
==================
7580876e;Jake VanderPlas;2021-03-04 14:41:30 -0800;jax.scipy.special.logsumexp: support integer input

==

jax/_src/scipy/special.py
tests/lax_scipy_test.py
==================
fcaf8bf4;Jake VanderPlas;2021-03-04 14:16:43 -0800;Add test that docstring wrapping didn't fail

==

jax/numpy/__init__.py
tests/lax_numpy_test.py
==================
39fb1b7f;Jake VanderPlas;2021-03-04 13:04:30 -0800;DOC: fix deprecated cond() signature in Common_Gotchas notebook

==

docs/notebooks/Common_Gotchas_in_JAX.ipynb
docs/notebooks/Common_Gotchas_in_JAX.md
==================
02cf04b6;jax authors;2021-03-04 12:55:39 -0800;Merge pull request #5937 from jakevdp:jax-101
PiperOrigin-RevId: 360984016

==
==================
8cf2f6d2;Jake VanderPlas;2021-03-04 12:34:57 -0800;BUG: fix docstrings for wrapped objects with no qualname

==

jax/_src/numpy/util.py
==================
49dcd81f;jax authors;2021-03-04 11:52:30 -0800;Merge pull request #5932 from marcvanzee:jax2tf
PiperOrigin-RevId: 360969177

==
==================
4f54cad2;Jake VanderPlas;2021-03-04 11:51:53 -0800;Initial commit of fifth JAX-101 notebook

==

docs/jax-101/05-random-numbers.ipynb
docs/jax-101/05-random-numbers.md
docs/jax-101/index.rst
==================
84c00653;Adam Paszke;2021-03-04 13:11:19 +0000;Only vectorize xmap axes that have only one element per resource
To make the jaxpr much less noisy. size-1 vmaps are quite pointless.

==

jax/experimental/maps.py
==================
70444df6;Marc van Zee;2021-03-04 16:59:40 +0100;Add python to codeblocks

==

jax/experimental/jax2tf/README.md
jax/experimental/jax2tf/examples/README.md
==================
ed16ad8c;Jean-Baptiste Lespiau;2021-03-04 07:24:07 -0800;Also change the C++ value for the flag, when the environment variable is set.
PiperOrigin-RevId: 360910313

==

jax/api.py
jax/dtypes.py
==================
9832df8a;Peter Hawkins;2021-03-04 09:53:42 -0500;Try to avoid transposes in jnp.einsum by considering both argument orders to dot_general.

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_einsum_test.py
==================
e8c6367b;jax authors;2021-03-04 06:28:20 -0800;Merge pull request #5923 from hawkinsp:lazy2
PiperOrigin-RevId: 360901722

==
==================
4e9a07c1;jax authors;2021-03-04 05:15:17 -0800;Merge pull request #5919 from skye:host_callback_test
PiperOrigin-RevId: 360890867

==
==================
5ed0633d;jax authors;2021-03-03 20:37:16 -0800;Merge pull request #5844 from chr1sj0nes:changelist/359311164
PiperOrigin-RevId: 360821956

==
==================
afd79f57;jax authors;2021-03-03 18:46:54 -0800;Merge pull request #5924 from hawkinsp:benchmarks
PiperOrigin-RevId: 360807379

==
==================
afd2aa2e;Peter Hawkins;2021-03-03 20:27:33 -0500;Remove device constants from lazy language.
Updated version of #4536.

This is removing the device constant part of #1668. We can do this because after #3370 and #4038 omnistaging removes the need for lazy device constants in a jitted context. (They could still in principle be useful in an op-by-op context, but the power:weight isn't worthwhile anymore.)

After this change, the only parts of the lazy sublanguage that remain are those to do with broadcasts and transposes. We may or may not kill those in a follow-up (it hinges on whether any benefit to op-by-op execution is worth the extra complexity).

This change regresses non-omnistaging users. As one particular example, test_eval_shape_big_random_array no longer passes with omnistaging disabled.

==

jax/_src/lax/lax.py
jax/api.py
jax/interpreters/xla.py
jax/lazy.py
tests/lax_numpy_test.py
tests/random_test.py
==================
cdd36b11;Peter Hawkins;2021-03-03 20:50:45 -0500;Improve API benchmarks.
Add benchmarks for different dispatch arg arities.

Add more blocking before and after benchmark loops that don't otherwise block.

==

benchmarks/api_benchmark.py
==================
6c102d9f;jax authors;2021-03-03 17:06:17 -0800;Merge pull request #5920 from jakevdp:jax-101
PiperOrigin-RevId: 360790665

==
==================
a0545def;jax authors;2021-03-03 16:39:49 -0800;Merge pull request #2890 from skye:pmap_test
PiperOrigin-RevId: 360785710

==
==================
8c877c43;jax authors;2021-03-03 16:30:55 -0800;Merge pull request #5922 from skye:polynomial_test
PiperOrigin-RevId: 360783972

==
==================
8e265f67;Skye Wanderman-Milne;2021-03-04 00:25:16 +0000;Don't fail due to flaky CPU backend initialization in pmap_test

==

tests/pmap_test.py
==================
665312e3;Skye Wanderman-Milne;2021-03-04 00:12:55 +0000;Skip unimplemented TPU cases in polynomial_test.py

==

tests/polynomial_test.py
==================
b96ba96f;Jake VanderPlas;2021-03-03 16:00:48 -0800;Initial commit of fourth JAX-101 notebook

==

docs/jax-101/04-advanced-autodiff.ipynb
docs/jax-101/04-advanced-autodiff.md
docs/jax-101/index.rst
==================
9abb8b65;jax authors;2021-03-03 15:57:46 -0800;Merge pull request #5921 from skye:jet_test
PiperOrigin-RevId: 360776761

==
==================
3c3dc0f6;Skye Wanderman-Milne;2021-03-03 23:49:20 +0000;Adjust tolerances in jet_test.py for TPU.
Most of these tests are disabled on TPU and can probably be enabled, but I just fixed the currently-enabled tests for now.

==

tests/jet_test.py
==================
a2ecd7c8;jax authors;2021-03-03 13:30:31 -0800;Merge pull request #5888 from jakevdp:errors
PiperOrigin-RevId: 360744305

==
==================
12c84e7a;Jake VanderPlas;2021-03-02 09:29:59 -0800;Add jax.errors submodule & error troubleshooting docs

==

.github/workflows/ci-build.yaml
docs/errors.rst
docs/faq.rst
docs/index.rst
docs/jax.lax.rst
docs/jax_internal_api.rst
jax/__init__.py
jax/_src/errors.py
jax/core.py
jax/errors.py
jax/interpreters/partial_eval.py
tests/api_test.py
tests/lax_numpy_test.py
==================
59fada94;jax authors;2021-03-03 12:17:34 -0800;Merge pull request #5917 from hawkinsp:lazy
PiperOrigin-RevId: 360729147

==
==================
f7ce7fcc;jax authors;2021-03-03 11:26:08 -0800;Merge pull request #5918 from skye:warning
PiperOrigin-RevId: 360717109

==
==================
b2c1e0de;Skye Wanderman-Milne;2021-03-03 18:51:20 +0000;Make host_callback_test.py safe to run in environments with > 2 devices.
For example, Cloud TPU VMs expose 8 local devices.

==

tests/host_callback_test.py
==================
4509c5ff;Skye Wanderman-Milne;2021-03-02 19:39:01 -0800;Add `ignore_warning` to donate_argnums test.
This warning is expected.

==

tests/api_test.py
==================
a54abe5a;jax authors;2021-03-03 10:28:45 -0800;Merge pull request #5907 from jakevdp:jax-101-part-3
PiperOrigin-RevId: 360702566

==
==================
4976aee0;Jake VanderPlas;2021-03-02 15:00:49 -0800;Initial commit of third JAX-101 notebook

==

docs/jax-101/03-vectorization.ipynb
docs/jax-101/03-vectorization.md
docs/jax-101/index.rst
==================
e4b8fec2;jax authors;2021-03-03 10:09:57 -0800;Merge pull request #5905 from jakevdp:jax-101
PiperOrigin-RevId: 360697991

==
==================
d9df6598;Jake VanderPlas;2021-03-03 09:43:16 -0800;Initial commit of second JAX-101 notebook

==

docs/conf.py
docs/jax-101/02-jitting.ipynb
docs/jax-101/02-jitting.md
docs/jax-101/index.rst
==================
d202ff16;Peter Hawkins;2021-03-03 12:13:18 -0500;Use None as a trivial lazy expression, rather than lazy.array().
Improves a 1000-argument version of the jit_simple_many_args by around 20%.

It is faster for C++ to pattern-match a None than to pattern-match a complicated Python data structure.

==

jax/interpreters/xla.py
==================
9187873e;jax authors;2021-03-03 05:39:58 -0800;Merge pull request #5912 from gnecula:jax2tf_lim
PiperOrigin-RevId: 360648720

==
==================
469e1f05;George Necula;2021-03-03 12:37:01 +0100;[jax2tf] Updated the limitations
Update the documentation to reflect the improvements in TF support for dtypes

==

jax/experimental/jax2tf/g3doc/jax_primitives_coverage.md
jax/experimental/jax2tf/g3doc/primitives_with_limited_support.md
jax/experimental/jax2tf/tests/jax2tf_limitations.py
jax/experimental/jax2tf/tests/primitive_harness.py
==================
c0e42e59;Christian Sigg;2021-03-03 08:55:08 +0100;Switch to new flag to enable CUDA support in TF

==

build/build.py
==================
4a0f6e35;Matthew Johnson;2021-03-02 22:54:49 -0800;relax tolerance in jax2tf qr to avoid flakiness
PiperOrigin-RevId: 360596515

==

jax/experimental/jax2tf/tests/jax2tf_limitations.py
==================
516eb2ac;jax authors;2021-03-02 18:08:25 -0800;Merge pull request #5909 from skye:workspace
PiperOrigin-RevId: 360558736

==
==================
860951b5;Skye Wanderman-Milne;2021-03-02 17:49:44 -0800;Update WORKSPACE to move past build breakage.
Something was wrong earlier that appears to be fixed now. Fixes #5901.

==

WORKSPACE
==================
ee21777e;jax authors;2021-03-02 15:22:36 -0800;Merge pull request #5891 from pschuh:wrap_execute_replicated
PiperOrigin-RevId: 360527237

==
==================
5a086642;jax authors;2021-03-02 13:18:16 -0800;Merge pull request #5906 from jakevdp:glossary
PiperOrigin-RevId: 360499488

==
==================
5a6fde86;jax authors;2021-03-02 12:58:46 -0800;Merge pull request #5854 from pschuh:sda-decouple
PiperOrigin-RevId: 360495306

==
==================
123dfb9b;Jake VanderPlas;2021-03-02 11:57:50 -0800;DOC: add 'jaxpr' to the glossary

==

docs/glossary.rst
docs/jaxpr.rst
==================
b4293b42;jax authors;2021-03-02 11:16:12 -0800;Merge pull request #5902 from google:closure-convert-doc
PiperOrigin-RevId: 360471612

==
==================
83e40800;jax authors;2021-03-02 10:39:52 -0800;Merge pull request #5903 from jakevdp:mypy-fix
PiperOrigin-RevId: 360462893

==
==================
bbed7ff9;jax authors;2021-03-02 09:51:48 -0800;Merge pull request #5887 from gnecula:jax2tf_div
PiperOrigin-RevId: 360450966

==
==================
6df80549;Jake VanderPlas;2021-03-02 09:42:12 -0800;Some minor typing fixes

==

jax/ad_util.py
jax/dtypes.py
jax/interpreters/xla.py
==================
049b83a4;Roy Frostig;2021-03-02 09:18:46 -0800;document what closure_convert returns

==

jax/custom_derivatives.py
==================
654a5b33;Jean-Baptiste Lespiau;2021-03-02 05:39:26 -0800;Remove a callback to Python to get the value of some flag.
This is done to simplify the code, and not at all for performance, because it's only executed during the compilation phase.

One possible design question: should we let the user access the value of the flag if it has not been set? Right now, the Python code allows it I think (meaning the behavior may not match the flag value, which has not been parsed yet).
We could raise an error, by setting the flag value to absl::nullopt, and check it's not null. But it would be a breaking change, so I am a little reluctant doing so.

PiperOrigin-RevId: 360407549

==

jax/api.py
jax/config.py
==================
9238720c;Chris Jones;2021-02-24 18:03:17 +0000;Lower remat to while(int(rng(1, 2))) on GPU.

==

jax/interpreters/xla.py
==================
aa438e6c;jax authors;2021-03-01 19:15:42 -0800;Merge pull request #5896 from hawkinsp:eigh3
PiperOrigin-RevId: 360330101

==
==================
b90fe587;Peter Hawkins;2021-03-01 22:00:28 -0500;Fix flake8 failure in jax2tf tests.

==

jax/experimental/jax2tf/tests/jax2tf_limitations.py
==================
bdb7334e;jax authors;2021-03-01 19:01:30 -0800;Merge pull request #5890 from hawkinsp:eigh
PiperOrigin-RevId: 360328135

==
==================
f4507d36;Peter Hawkins;2021-03-01 18:57:38 -0800;Copybara import of the project:
--
ed4916f7c8e29fb65af3c1d7ce41b8c19a26f2f4 by Peter Hawkins <phawkins@google.com>:

Fix jax2tf eigh tests in preparation for enabling complex eigh lowering in XLA.

COPYBARA_INTEGRATE_REVIEW=https://github.com/google/jax/pull/5892 from hawkinsp:eigh2 ed4916f7c8e29fb65af3c1d7ce41b8c19a26f2f4
PiperOrigin-RevId: 360327930

==

jax/experimental/jax2tf/tests/jax2tf_limitations.py
==================
ad260af9;jax authors;2021-03-01 18:15:00 -0800;Merge pull request #5889 from jakevdp:glossary
PiperOrigin-RevId: 360322113

==
==================
8f5038d4;Jake VanderPlas;2021-03-01 17:56:43 -0800;DOC: add initial JAX glossary

==

docs/glossary.rst
docs/index.rst
docs/notebooks/autodiff_cookbook.ipynb
docs/notebooks/autodiff_cookbook.md
==================
211d64d6;Parker Schuh;2021-03-01 17:50:23 -0800;Add backend specific path for `execute_replicated`.

==

jax/interpreters/pxla.py
==================
7701a57a;Peter Hawkins;2021-03-01 20:29:41 -0500;Remove test that verifies complex eigh is unimplemented on TPU, in preparation for implementing complex eigh on TPU.

==

tests/linalg_test.py
==================
410f24af;George Necula;2021-03-01 23:27:11 +0100;[jax2tf] Fix conversion for integer division for TF 1
Bug: #5831
It seems that TF 1 has a different broadcasting behavior than TF2. Change
the conversion of integer division to use `tf.not_equal` instead of `!=`.

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
3960e631;jax authors;2021-03-01 14:22:47 -0800;Merge pull request #5879 from shoyer:jax-benchmark-faq
PiperOrigin-RevId: 360276635

==
==================
d34034a9;Rebecca Chen;2021-03-01 13:52:43 -0800;Silence type errors generated by an upcoming release of pytype.
PiperOrigin-RevId: 360269441

==

jax/experimental/djax.py
==================
4c4c807b;jax authors;2021-03-01 13:27:25 -0800;Merge pull request #5833 from gnecula:jax2tf_d
PiperOrigin-RevId: 360263635

==
==================
b43cd47b;George Necula;2021-03-01 21:56:13 +0100;Update jax/experimental/jax2tf/README.md
Co-authored-by: 8bitmp3 <19637339+8bitmp3@users.noreply.github.com>
==

jax/experimental/jax2tf/README.md
==================
5d11d101;Jean-Baptiste Lespiau;2021-03-01 12:32:39 -0800;Move the x64 context manager threadlocal state from jax/python to xla/c++
Fixes #5532.

PiperOrigin-RevId: 360252057

==

jax/api.py
jax/config.py
jax/experimental/x64_context.py
tests/x64_context_test.py
==================
625bb804;Jean-Baptiste Lespiau;2021-03-01 11:15:56 -0800;Fix an identation.
PiperOrigin-RevId: 360233433

==

jax/api.py
==================
ac9b1ce9;Stephan Hoyer;2021-03-01 10:12:19 -0800;Fix data placement reference

==

docs/faq.rst
==================
46db7bbe;Stephan Hoyer;2021-02-28 12:03:46 -0800;DOC: Add a FAQ on "Benchmarking JAX code"
This should a useful reference for users surprised by how JAX is slow :)

==

docs/faq.rst
==================
9bffe1ad;jax authors;2021-02-27 08:15:22 -0800;Merge pull request #5869 from hawkinsp:eigh
PiperOrigin-RevId: 359941219

==
==================
8f8e9b30;jax authors;2021-02-26 18:20:56 -0800;Merge pull request #5781 from google:linear-call
PiperOrigin-RevId: 359877519

==
==================
419c49a7;jax authors;2021-02-26 17:57:58 -0800;Merge pull request #5872 from jakevdp:logsumexp
PiperOrigin-RevId: 359874826

==
==================
2c623d58;Jake VanderPlas;2021-02-26 17:05:32 -0800;jax.scipy.special.logsumexp: fix b=0 corner case

==

jax/_src/scipy/special.py
tests/lax_scipy_test.py
==================
a67f7e79;Peter Hawkins;2021-02-26 17:36:56 -0500;Improve eigh test.
Change in preparation for some TPU eigh improvements.

==

tests/linalg_test.py
==================
912cc87a;Roy Frostig;2021-02-12 12:56:15 -0800;introduce `linear_call` for custom transposition.
This adds a primitive with a corresponding traceable function in
`custom_derivatives` that takes a callee and its transpose, both
functions. When the primitive is encountered during transposition, the
given transpose function is invoked instead of transpose-transforming
the callee. The invocation of the custom transposition is itself done
via a `linear_call`, with the original callee set as the transpose.
This maintains, in particular, that transposing twice is an identity.

==

jax/api.py
jax/custom_derivatives.py
tests/api_test.py
==================
a0c5a809;jax authors;2021-02-26 10:13:21 -0800;Merge pull request #5864 from jakevdp:reland-jax-101
PiperOrigin-RevId: 359784013

==
==================
6a550539;jax authors;2021-02-26 10:04:21 -0800;Merge pull request #5863 from jakevdp:fix-autodidac
PiperOrigin-RevId: 359782003

==
==================
5396f04c;Jake VanderPlas;2021-02-26 09:22:34 -0800;DOC: add first JAX-101 notebook

==

docs/conf.py
docs/index.rst
docs/jax-101/01-jax-basics.ipynb
docs/jax-101/01-jax-basics.md
docs/jax-101/index.rst
==================
b2e226a8;Jake VanderPlas;2021-02-25 17:01:23 -0800;Fix build warning in autodidax.md

==

docs/autodidax.ipynb
docs/autodidax.md
==================
1c20e708;Roy Frostig;2021-02-25 22:06:42 -0800;test source sync
PiperOrigin-RevId: 359687592

==

jax/_src/traceback_util.py
==================
eb61395e;Matthew Johnson;2021-02-25 21:08:04 -0800;Merge pull request #5823 from jakevdp:jax-101
PiperOrigin-RevId: 359679823

==
==================
635072e9;jax authors;2021-02-25 17:50:00 -0800;Merge pull request #5855 from skye:master
PiperOrigin-RevId: 359655436

==
==================
ba4f7880;Skye Wanderman-Milne;2021-02-25 17:29:37 -0800;Replace use of TF's `third_party_http_archive` with `http_archive` in PocketFFT workspace.
TF got rid of `third_party_http_archive`, and I'm not sure why we couldn't use Bazel's provided `http_archive` instead.

==

third_party/pocketfft/workspace.bzl
==================
9cb36d5b;Jake VanderPlas;2021-02-25 17:01:42 -0800;DOC: add first JAX-101 notebook

==

docs/conf.py
docs/index.rst
docs/jax-101/01-jax-basics.ipynb
docs/jax-101/01-jax-basics.md
docs/jax-101/index.rst
==================
829d143a;Jake VanderPlas;2021-02-25 17:01:23 -0800;Fix build warning in autodidax.md

==

docs/autodidax.ipynb
docs/autodidax.md
==================
90dcc1c5;jax authors;2021-02-25 14:46:32 -0800;Merge pull request #5853 from jakevdp:index-error
PiperOrigin-RevId: 359617713

==
==================
56687e92;Jake VanderPlas;2021-02-25 13:35:41 -0800;Improve error when tracer is used as a list index

==

jax/core.py
tests/api_test.py
==================
b21341d0;jax authors;2021-02-25 13:17:18 -0800;Merge pull request #5852 from jakevdp:no-sandbox
PiperOrigin-RevId: 359596570

==
==================
10289390;Parker Schuh;2021-02-25 12:52:33 -0800;Decouple ShardedDeviceArray from _DeviceArray

==

jax/_src/numpy/lax_numpy.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
==================
5b288b71;jax authors;2021-02-25 11:37:56 -0800;Merge pull request #4405 from google:lax-api-boundary
PiperOrigin-RevId: 359573836

==
==================
24e920e3;Jake VanderPlas;2021-02-23 16:52:17 -0800;change colab.sandbox->colab.research

==

README.md
cloud_tpu_colabs/JAX_NeurIPS_2020_demo.ipynb
cloud_tpu_colabs/JAX_demo.ipynb
docs/notebooks/Common_Gotchas_in_JAX.ipynb
docs/notebooks/Common_Gotchas_in_JAX.md
docs/notebooks/Custom_derivative_rules_for_Python_code.ipynb
docs/notebooks/Custom_derivative_rules_for_Python_code.md
docs/notebooks/How_JAX_primitives_work.ipynb
docs/notebooks/How_JAX_primitives_work.md
docs/notebooks/Neural_Network_and_Data_Loading.ipynb
docs/notebooks/Neural_Network_and_Data_Loading.md
docs/notebooks/Writing_custom_interpreters_in_Jax.ipynb
docs/notebooks/Writing_custom_interpreters_in_Jax.md
docs/notebooks/XLA_in_Python.ipynb
docs/notebooks/XLA_in_Python.md
docs/notebooks/autodiff_cookbook.ipynb
docs/notebooks/autodiff_cookbook.md
docs/notebooks/maml.ipynb
docs/notebooks/maml.md
docs/notebooks/neural_network_with_tfds_data.ipynb
docs/notebooks/neural_network_with_tfds_data.md
docs/notebooks/quickstart.ipynb
docs/notebooks/quickstart.md
docs/notebooks/score_matching.ipynb
docs/notebooks/score_matching.md
docs/notebooks/thinking_in_jax.ipynb
docs/notebooks/thinking_in_jax.md
docs/notebooks/vmapped_log_probs.ipynb
docs/notebooks/vmapped_log_probs.md
==================
7b94c44a;Tom Hennigan;2021-02-25 08:51:38 -0800;Sort imports.
PiperOrigin-RevId: 359532656

==

benchmarks/api_benchmark.py
==================
bb51a580;jax authors;2021-02-25 04:12:36 -0800;Merge pull request #5843 from tomhennigan:changelist/359479604
PiperOrigin-RevId: 359490825

==
==================
090dd211;Tom Hennigan;2021-02-25 10:46:46 +0000;Add autodidax to dev docs toctree and ignore md file to silence warning.
Fixes CI failure from google/jax#5827.

==

docs/conf.py
docs/index.rst
==================
1283a965;Roy Frostig;2021-02-23 20:08:10 -0800;mark lax higher-order functions for stack trace filtering

==

jax/_src/lax/control_flow.py
tests/errors_test.py
==================
9b9cea86;jax authors;2021-02-24 21:06:09 -0800;Merge pull request #5827 from google:autodidax
PiperOrigin-RevId: 359436457

==
==================
e4f79fb1;Matthew Johnson;2021-02-24 20:49:56 -0800;add license

==

docs/autodidax.ipynb
docs/autodidax.md
docs/autodidax.py
==================
9789677e;Matthew Johnson;2021-02-24 20:25:24 -0800;reviewer comments, delint

==

docs/autodidax.ipynb
docs/autodidax.md
docs/autodidax.py
==================
f447b5b3;jax authors;2021-02-24 16:27:16 -0800;Merge pull request #5837 from jakevdp:fix-test
PiperOrigin-RevId: 359396484

==
==================
7e7f0fb4;Jake VanderPlas;2021-02-24 15:47:32 -0800;Add main statement to x64_context_test

==

tests/x64_context_test.py
==================
932e118d;jax authors;2021-02-24 12:43:14 -0800;Merge pull request #5665 from ashutoshvarma:numpy-setxor1d
PiperOrigin-RevId: 359347458

==
==================
d7ae91d3;jax authors;2021-02-24 11:43:07 -0800;Merge pull request #5829 from j-towns:sjit-doc
PiperOrigin-RevId: 359333369

==
==================
c223ef9d;Ashutosh Varma;2021-02-07 00:08:07 +0530;add support for setxor1d

==

docs/jax.numpy.rst
jax/_src/numpy/lax_numpy.py
jax/numpy/__init__.py
tests/lax_numpy_test.py
==================
19264789;George Necula;2021-02-24 18:26:38 +0100;[jax2tf] Fine-tuning the documentation

==

jax/experimental/jax2tf/README.md
==================
f63106c8;jax authors;2021-02-24 09:14:44 -0800;Merge pull request #5799 from minoring:impl-cov-y
PiperOrigin-RevId: 359299894

==
==================
dd833801;jax authors;2021-02-24 09:02:03 -0800;Merge pull request #5824 from jakevdp:fail-on-warning
PiperOrigin-RevId: 359297275

==
==================
2458b9ef;minoring;2021-02-25 00:24:14 +0900;Add helper function getting y_shape in testCov

==

tests/lax_numpy_test.py
==================
6a65c0de;minoring;2021-02-24 23:19:44 +0900;Add testcases for jnp.cov where m and y have different shape

==

tests/lax_numpy_test.py
==================
43186a7d;minoring;2021-02-24 23:19:01 +0900;Simplify promoting in jax.numpy.cov

==

jax/_src/numpy/lax_numpy.py
==================
661914ec;Jamie Townsend;2021-02-24 09:56:01 +0000;Add some more detail to the sharded_jit docstring

==

jax/interpreters/sharded_jit.py
==================
0fcecb2b;Matthew Johnson;2021-02-23 23:31:10 -0800;Add first two sections of Autodidax.

==

docs/autodidax.ipynb
docs/autodidax.md
docs/autodidax.py
==================
36fea961;jax authors;2021-02-24 00:49:43 -0800;Merge pull request #5828 from gnecula:jax2tf_doc
PiperOrigin-RevId: 359228469

==
==================
4800fbb2;George Necula;2021-02-24 09:21:36 +0100;[jax2tf] Updated documentation

==

jax/experimental/jax2tf/README.md
==================
57c25656;jax authors;2021-02-23 14:02:19 -0800;Merge pull request #5825 from jakevdp:issue-template
PiperOrigin-RevId: 359128640

==
==================
ecdef1f6;Jake VanderPlas;2021-02-23 13:55:38 -0800;Add github issue templates to direct users in the right direction

==

.github/ISSUE_TEMPLATE/Bug_report.md
.github/ISSUE_TEMPLATE/Feature_request.md
.github/ISSUE_TEMPLATE/config.yml
==================
b14a9d9c;Jake VanderPlas;2021-02-23 13:21:06 -0800;readthedocs: set fail_on_warning=true

==

.readthedocs.yml
docs/conf.py
==================
1be854b1;jax authors;2021-02-23 11:52:22 -0800;Merge pull request #5817 from jakevdp:fix-doc
PiperOrigin-RevId: 359098153

==
==================
067be89a;Jake VanderPlas;2021-02-23 10:31:44 -0800;DOC: minor documentation & formatting fixes

==

docs/conf.py
docs/jax.lax.rst
docs/jax.rst
docs/notebooks/thinking_in_jax.ipynb
jax/_src/nn/functions.py
jax/api.py
==================
a641452b;Jake VanderPlas;2021-02-23 10:31:26 -0800;DOC: update doc build requirements

==

docs/requirements.txt
==================
4c179d1b;Roy Frostig;2021-02-22 21:11:41 -0800;register the lax module for stack trace filtering

==

jax/_src/lax/__init__.py
==================
037cc2b8;jax authors;2021-02-22 20:25:25 -0800;Merge pull request #5796 from lucasb-eyer:patch-4
PiperOrigin-RevId: 358962056

==
==================
35c41542;jax authors;2021-02-22 19:48:23 -0800;Merge pull request #5812 from jakevdp:fix-docstrings
PiperOrigin-RevId: 358957905

==
==================
9df3454e;jax authors;2021-02-22 18:53:38 -0800;Merge pull request #5731 from terhorst:master
PiperOrigin-RevId: 358951861

==
==================
60bff69e;jax authors;2021-02-22 17:19:05 -0800;Merge pull request #4323 from tudorcebere:issue2347
PiperOrigin-RevId: 358938423

==
==================
1e3b3bbb;jax authors;2021-02-22 17:03:24 -0800;Merge pull request #5809 from jakevdp:pytree-doc-md
PiperOrigin-RevId: 358935958

==
==================
d8074aca;Jake VanderPlas;2021-02-22 16:45:40 -0800;DOC: fix update_numpydoc to prevent deleting docstring content

==

jax/_src/numpy/util.py
jax/_src/scipy/optimize/minimize.py
==================
7afce974;jax authors;2021-02-22 13:49:33 -0800;Merge pull request #5747 from theosanderson:patch-1
PiperOrigin-RevId: 358895383

==
==================
9dacc5d6;jax authors;2021-02-22 10:25:12 -0800;Merge pull request #5794 from lucasb-eyer:patch-3
PiperOrigin-RevId: 358847580

==
==================
2bf97298;jax authors;2021-02-22 10:21:42 -0800;Merge pull request #5765 from jakevdp:cleanup-notebooks
PiperOrigin-RevId: 358847147

==
==================
234990e0;jax authors;2021-02-22 10:12:02 -0800;Merge pull request #5299 from sunilkpai:feature/bicgstab
PiperOrigin-RevId: 358845323

==
==================
25c03f79;jax authors;2021-02-22 10:11:47 -0800;Merge pull request #5807 from jakevdp:fix-xla-notebook
PiperOrigin-RevId: 358844761

==
==================
c92d87ee;jax authors;2021-02-22 10:11:30 -0800;Merge pull request #5808 from jakevdp:nn-doc-link
PiperOrigin-RevId: 358844692

==
==================
afaec329;Jake VanderPlas;2021-02-22 10:08:33 -0800;fix conflicts

==

docs/notebooks/thinking_in_jax.md
==================
be6950e7;jax authors;2021-02-22 10:07:59 -0800;Merge pull request #5718 from jakevdp:github-role
PiperOrigin-RevId: 358844691

==
==================
c9fd50cc;Jake VanderPlas;2021-02-17 12:17:10 -0800;DOC: execute XLA_in_Python notebook

==

docs/conf.py
==================
586b3bb6;Jake VanderPlas;2021-02-17 10:50:45 -0800;DOC: regularize notebook metadata

==

docs/notebooks/Common_Gotchas_in_JAX.ipynb
docs/notebooks/Common_Gotchas_in_JAX.md
docs/notebooks/Custom_derivative_rules_for_Python_code.ipynb
docs/notebooks/Custom_derivative_rules_for_Python_code.md
docs/notebooks/How_JAX_primitives_work.ipynb
docs/notebooks/How_JAX_primitives_work.md
docs/notebooks/Neural_Network_and_Data_Loading.ipynb
docs/notebooks/Neural_Network_and_Data_Loading.md
docs/notebooks/Writing_custom_interpreters_in_Jax.ipynb
docs/notebooks/Writing_custom_interpreters_in_Jax.md
docs/notebooks/XLA_in_Python.ipynb
docs/notebooks/XLA_in_Python.md
docs/notebooks/autodiff_cookbook.ipynb
docs/notebooks/autodiff_cookbook.md
docs/notebooks/convolutions.ipynb
docs/notebooks/convolutions.md
docs/notebooks/maml.ipynb
docs/notebooks/maml.md
docs/notebooks/neural_network_with_tfds_data.ipynb
docs/notebooks/neural_network_with_tfds_data.md
docs/notebooks/quickstart.ipynb
docs/notebooks/quickstart.md
docs/notebooks/score_matching.ipynb
docs/notebooks/score_matching.md
docs/notebooks/thinking_in_jax.ipynb
docs/notebooks/thinking_in_jax.md
docs/notebooks/vmapped_log_probs.ipynb
docs/notebooks/vmapped_log_probs.md
==================
35983ebb;Jake VanderPlas;2021-02-22 10:03:32 -0800;Fix broken example in pytrees.rst & migrate to myst-md

==

docs/pytrees.md
docs/pytrees.rst
==================
f32788f1;jax authors;2021-02-22 09:51:22 -0800;Merge pull request #5797 from jamesr66a:thinking_typo
PiperOrigin-RevId: 358840386

==
==================
4b21f3ef;Jake VanderPlas;2021-02-22 09:34:24 -0800;Add :jax-issue: sphinx role for use in CHANGELOG.

==

docs/CHANGELOG.md
docs/conf.py
docs/sphinxext/jax_extensions.py
==================
4c83723d;Jake VanderPlas;2021-02-22 09:19:41 -0800;DOC: link to RTD version of neural network notebook

==

docs/index.rst
==================
d9af9ee4;Jake VanderPlas;2021-02-22 09:05:48 -0800;Fix stray header in XLA_In_Python notebook

==

docs/notebooks/XLA_in_Python.ipynb
docs/notebooks/XLA_in_Python.md
==================
0dea7b5e;minoring;2021-02-21 20:44:40 +0900;Implement jax.numpy.cov for nontrivial y
Related to #5786

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
c19486c9;James Reed;2021-02-20 13:24:26 -0800;Fix typo in thinking_in_jax notebook

==

docs/notebooks/thinking_in_jax.ipynb
docs/notebooks/thinking_in_jax.md
==================
5fc1730e;Lucas Beyer;2021-02-20 20:06:47 +0100;Also print function ID in compile reason logs.

==

jax/interpreters/pxla.py
jax/interpreters/xla.py
==================
074abba6;Lucas Beyer;2021-02-20 18:18:32 +0100;Fix error message string interpolation

==

jax/_src/numpy/lax_numpy.py
==================
7e040c0a;jax authors;2021-02-19 22:16:36 -0800;Merge pull request #5792 from nfiedel:master
PiperOrigin-RevId: 358542761

==
==================
e8ab58ce;jax authors;2021-02-19 22:00:13 -0800;Merge pull request #5792 from nfiedel:master
PiperOrigin-RevId: 358540730

==
==================
bb5ae556;Noah Fiedel;2021-02-19 21:59:47 -0800;Update thinking_in_jax.md

==

docs/notebooks/thinking_in_jax.md
==================
42df4b76;jax authors;2021-02-19 18:32:35 -0800;Merge pull request #5793 from yisitu:patch-1
PiperOrigin-RevId: 358522036

==
==================
77905ef5;Situ Yi;2021-02-19 12:57:57 -0800;Update build.py with Cloud TPU support
Update build.py to have Cloud TPU support by default.
b/180656002
==

build/build.py
==================
c1bba43f;Noah Fiedel;2021-02-19 12:39:38 -0800;Merge pull request #1 from nfiedel/nfiedel-jax-patch-1
Update thinking_in_jax.ipynb
==
==================
80a8204f;Noah Fiedel;2021-02-19 12:37:04 -0800;Update thinking_in_jax.ipynb
Fix typo in notebook url.
==

docs/notebooks/thinking_in_jax.ipynb
==================
15a2f509;jax authors;2021-02-19 12:23:50 -0800;Merge pull request #5791 from hawkinsp:jax2tf2
PiperOrigin-RevId: 358459171

==
==================
6e480507;Peter Hawkins;2021-02-19 15:01:55 -0500;Disable some jax2tf tests that fail on GPU.
Fix TF/JAX array interoperability test on GPU.

==

jax/experimental/jax2tf/tests/call_tf_test.py
jax/experimental/jax2tf/tests/jax2tf_limitations.py
tests/array_interoperability_test.py
==================
d35ae4c9;sunilkpai;2021-02-19 00:21:46 -0800;removing x64 enable for testing
removing commented-out x64 line

==

tests/lax_scipy_sparse_test.py
==================
c5bfdccd;jax authors;2021-02-19 09:55:55 -0800;Merge pull request #5787 from hawkinsp:xla
PiperOrigin-RevId: 358426001

==
==================
b1310380;Peter Hawkins;2021-02-19 09:55:44 -0500;Update XLA.

==

WORKSPACE
==================
997ad316;sunilkpai;2020-12-30 22:44:37 -0800;added bicgstab to new jax repo
fixed some bugs in the bicgstab method and adjusted tolerance for scipy comparison

fixed flake8

added some tests for gradients, fixed symmetry checks, modified lax.cond -> jnp.where

comment out gmres grad check, to be addressed on future PR

increasing tolerance for bicgstab grad test

change to order 1 checks for bicgstab (gmres still fails in order 1) for internal CI check

remove grad checks for now

changing tolerance to pass numpy comparison test

==

jax/_src/scipy/sparse/linalg.py
jax/scipy/sparse/linalg.py
tests/lax_scipy_sparse_test.py
==================
5bbb449a;jax authors;2021-02-18 10:37:02 -0800;Merge pull request #5777 from google:issue5776
PiperOrigin-RevId: 358211915

==
==================
5a97eab2;Matthew Johnson;2021-02-18 09:46:16 -0800;improve error messages for grad(..., has_aux=True)
fixes #5776

==

jax/api_util.py
tests/api_test.py
==================
4c202ad2;Jonathan Terhorst;2021-02-18 11:08:41 -0500;implement np.polyint (#70)

==

docs/jax.numpy.rst
jax/_src/numpy/lax_numpy.py
jax/numpy/__init__.py
tests/lax_numpy_test.py
==================
8ad51182;jax authors;2021-02-17 17:32:46 -0800;Merge pull request #5762 from hawkinsp:padbatch
PiperOrigin-RevId: 358070219

==
==================
347481b7;jax authors;2021-02-17 15:42:45 -0800;Merge pull request #5768 from jakevdp:fix-take
PiperOrigin-RevId: 358049345

==
==================
28a19ff9;Jake VanderPlas;2021-02-17 15:18:19 -0800;BUG: support negative indices in jnp.take

==

docs/CHANGELOG.md
jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
ba269b40;jax authors;2021-02-17 13:26:44 -0800;Merge pull request #5748 from jakevdp:doc-fixes
PiperOrigin-RevId: 358019598

==
==================
97071f52;jax authors;2021-02-17 11:01:22 -0800;Merge pull request #5761 from hawkinsp:packbits
PiperOrigin-RevId: 357987148

==
==================
ad5f473f;jax authors;2021-02-17 10:38:47 -0800;Merge pull request #5740 from jakevdp:fix-dirichlet
PiperOrigin-RevId: 357981739

==
==================
0dd1b551;Peter Hawkins;2021-02-17 13:27:26 -0500;Implement lax.pad batching rule for batched padding values.

==

docs/CHANGELOG.md
jax/_src/lax/lax.py
tests/lax_vmap_test.py
==================
67dd1e6d;Peter Hawkins;2021-02-17 12:49:11 -0500;Use lax.pad in jnp.packbits.
jnp.pad() is overkill for this situation.

==

jax/_src/numpy/lax_numpy.py
==================
e66ae17e;Jake VanderPlas;2021-02-17 09:40:18 -0800;BUG: fix jax.scipy.stats.dirichlet implementation & add tests

==

jax/_src/scipy/stats/dirichlet.py
tests/scipy_stats_test.py
==================
29f63fea;jax authors;2021-02-17 09:17:32 -0800;Merge pull request #5751 from skye:tpu_driver_cpu
PiperOrigin-RevId: 357962960

==
==================
21763656;jax authors;2021-02-17 08:30:11 -0800;Merge pull request #5749 from hawkinsp:nondet
PiperOrigin-RevId: 357954240

==
==================
9b18135b;Matthew Johnson;2021-02-17 07:31:38 -0800;Rollback of #5702 due to internal breakage.
PiperOrigin-RevId: 357943850

==

jax/_src/lax/lax.py
jax/_src/lax/parallel.py
jax/api.py
jax/interpreters/partial_eval.py
tests/api_test.py
tests/lax_test.py
==================
a6b2c371;jax authors;2021-02-16 19:51:00 -0800;Merge pull request #5754 from hawkinsp:tol
PiperOrigin-RevId: 357860075

==
==================
48393c1d;Peter Hawkins;2021-02-16 22:13:53 -0500;Relax some test tolerances of tests that fail on GPU in -x32 mode.

==

tests/lax_vmap_test.py
tests/scipy_signal_test.py
==================
31a187c1;jax authors;2021-02-16 19:08:03 -0800;Merge pull request #5702 from google:awn
PiperOrigin-RevId: 357854529

==
==================
566aa3e6;jax authors;2021-02-16 19:04:42 -0800;Merge pull request #5752 from hawkinsp:minimize2
PiperOrigin-RevId: 357854110

==
==================
babf2497;jax authors;2021-02-16 18:45:13 -0800;Merge pull request #5717 from google:dynamic-shapes2
PiperOrigin-RevId: 357851603

==
==================
dbeb1a52;Peter Hawkins;2021-02-16 20:43:53 -0500;Remove message field from OptimizeResults to allow for vmapping.
Add OptimizeResults to the documentation.

==

docs/jax.scipy.rst
jax/_src/scipy/optimize/minimize.py
jax/scipy/optimize/__init__.py
==================
134fdc62;jax authors;2021-02-16 17:41:58 -0800;Merge pull request #5750 from jakevdp:suppress-citation
PiperOrigin-RevId: 357842296

==
==================
eed1fcc1;jax authors;2021-02-16 17:38:33 -0800;Merge pull request #5744 from hawkinsp:batching
PiperOrigin-RevId: 357842097

==
==================
8c895fcb;Skye Wanderman-Milne;2021-02-16 17:26:24 -0800;Make 'tpu_driver' fallback to local CPU backend when requested.
Fixes #5638 (I think)

==

jax/lib/xla_bridge.py
==================
0163c92e;jax authors;2021-02-16 17:26:09 -0800;Merge pull request #5745 from jakevdp:convolution-doc
PiperOrigin-RevId: 357839994

==
==================
236ba145;Jake VanderPlas;2021-02-16 17:21:56 -0800;move convolutions from common gotchas to its own file

==

docs/index.rst
docs/notebooks/Common_Gotchas_in_JAX.ipynb
docs/notebooks/Common_Gotchas_in_JAX.md
docs/notebooks/convolutions.ipynb
docs/notebooks/convolutions.md
==================
e56c1d9d;Jake VanderPlas;2021-02-16 17:18:38 -0800;DOC: suppress some warnings

==

docs/conf.py
jax/_src/lax/lax.py
==================
610ee5bb;Peter Hawkins;2021-02-16 20:16:56 -0500;Fix nondeterministic test ordering in array_interoperability_test.

==

tests/array_interoperability_test.py
==================
b260468b;Theo Sanderson;2021-02-17 01:18:14 +0000;Fix a second occurrence

==

jax/experimental/optimizers.py
==================
68af8fdd;Jake VanderPlas;2021-02-16 17:05:29 -0800;Set qualname in jax.numpy.util._wraps

==

jax/_src/numpy/util.py
==================
ff3b402e;Peter Hawkins;2021-02-16 16:46:19 -0500;Improve error messages for invalid JAX types returned by batched functions.

==

jax/core.py
jax/interpreters/batching.py
tests/batching_test.py
==================
15271300;Theo Sanderson;2021-02-17 00:55:16 +0000;docs fix: correct overwriting of step function in optimizers example

==

jax/experimental/optimizers.py
==================
7fa4dbb5;Matthew Johnson;2021-02-16 15:44:04 -0800;add some todos

==

jax/_src/lax/parallel.py
jax/interpreters/partial_eval.py
==================
fb247438;Roy Frostig;2021-02-10 17:46:00 -0800;avoid modifying global pytype mappings in named-shape jaxpr test

==

tests/api_test.py
==================
30dd558b;Roy Frostig;2021-02-10 11:04:19 -0800;simplify standard named_shape_rule
Co-authored-by: Matthew Johnson <mattjj@google.com>

==

jax/_src/lax/lax.py
==================
fb160b8a;James Bradbury;2021-02-03 23:12:22 -0800;[avals with names] Propagate presence of name (mapped) vs absence (replicated) in abstract eval based on existing batching rules

==

jax/_src/lax/lax.py
jax/_src/lax/parallel.py
jax/api.py
jax/interpreters/partial_eval.py
tests/api_test.py
tests/lax_test.py
==================
1251a714;jax authors;2021-02-16 14:56:30 -0800;Merge pull request #5742 from jakevdp:fix-doc-requirements
PiperOrigin-RevId: 357811104

==
==================
5a4bbe44;jax authors;2021-02-16 14:11:18 -0800;Merge pull request #5741 from hawkinsp:minimize
PiperOrigin-RevId: 357801861

==
==================
69bba7f2;Jake VanderPlas;2021-02-16 13:25:59 -0800;Remove pygments pinning for RTD

==

docs/requirements.txt
==================
1de5734d;Peter Hawkins;2021-02-16 15:57:46 -0500;Enforce the the `args` argument to jax.scipy.optimize.minimize is a tuple.

==

jax/_src/scipy/optimize/minimize.py
tests/scipy_optimize_test.py
==================
15359e01;jax authors;2021-02-16 12:53:41 -0800;Merge pull request #5738 from hawkinsp:avx
PiperOrigin-RevId: 357785312

==
==================
a6a81074;jax authors;2021-02-16 11:39:44 -0800;Merge pull request #5739 from skye:fix
PiperOrigin-RevId: 357768213

==
==================
3caf52d5;Skye Wanderman-Milne;2021-02-16 11:32:50 -0800;Fix build.py version comparison

==

build/build.py
==================
a2754549;Peter Hawkins;2021-02-16 14:12:01 -0500;Enable AVX by default in release builds.
TensorFlow also enables AVX by default, so this seems like a reasonable baseline CPU feature to expect.

==

build/build.py
docs/CHANGELOG.md
==================
6470a3ee;jax authors;2021-02-16 11:02:54 -0800;Merge pull request #5537 from jakevdp:myst-nb-test
PiperOrigin-RevId: 357759027

==
==================
5fd3deb0;jax authors;2021-02-16 10:49:33 -0800;Merge pull request #5580 from daskol:search-bazel-in-path
PiperOrigin-RevId: 357755577

==
==================
9513a7d4;Jake VanderPlas;2021-02-16 10:42:16 -0800;Remove pandoc & nbsphinx references

==

.github/workflows/ci-build.yaml
docs/developer.md
==================
d85d2048;Jake VanderPlas;2021-02-11 11:56:24 -0800;DOC: change build from nbsphinx to myst

==

docs/async_dispatch.rst
docs/conf.py
docs/index.rst
docs/notebooks/Common_Gotchas_in_JAX.ipynb
docs/notebooks/Common_Gotchas_in_JAX.md
docs/notebooks/Custom_derivative_rules_for_Python_code.ipynb
docs/notebooks/Custom_derivative_rules_for_Python_code.md
docs/notebooks/How_JAX_primitives_work.ipynb
docs/notebooks/How_JAX_primitives_work.md
docs/notebooks/Neural_Network_and_Data_Loading.ipynb
docs/notebooks/Neural_Network_and_Data_Loading.md
docs/notebooks/Writing_custom_interpreters_in_Jax.ipynb
docs/notebooks/Writing_custom_interpreters_in_Jax.md
docs/notebooks/XLA_in_Python.ipynb
docs/notebooks/XLA_in_Python.md
docs/notebooks/autodiff_cookbook.ipynb
docs/notebooks/autodiff_cookbook.md
docs/notebooks/maml.ipynb
docs/notebooks/maml.md
docs/notebooks/neural_network_with_tfds_data.ipynb
docs/notebooks/neural_network_with_tfds_data.md
docs/notebooks/quickstart.ipynb
docs/notebooks/quickstart.md
docs/notebooks/score_matching.ipynb
docs/notebooks/score_matching.md
docs/notebooks/thinking_in_jax.ipynb
docs/notebooks/thinking_in_jax.md
docs/notebooks/vmapped_log_probs.ipynb
docs/notebooks/vmapped_log_probs.md
docs/requirements.txt
==================
dd513c15;Skye Wanderman-Milne;2021-02-16 08:39:32 -0800;Small simplification

==

build/build.py
==================
ad4c1fb0;jax authors;2021-02-15 09:47:45 -0800;Merge pull request #5634 from jblespiau:changelist/352183719
PiperOrigin-RevId: 357586820

==
==================
78697013;Matthew Johnson;2021-02-11 13:23:38 -0800;add dynamic-shape-jaxpr experimental file
Co-authored-by: Dougal Maclaurin <dougalm@google.com>

==

jax/core.py
jax/experimental/djax.py
jax/interpreters/ad.py
jax/interpreters/partial_eval.py
tests/djax_test.py
==================
f5c09511;jax authors;2021-02-13 11:50:04 -0800;Merge pull request #5725 from google:extensible-aval-mappers
PiperOrigin-RevId: 357373849

==
==================
671fe938;Matthew Johnson;2021-02-13 08:19:31 -0800;make map/unmap aval functions extensible
Also, use them in batching.py.

This change is needed for the dynamic shapes prototype in #5717, since
we add new types that can be mapped over.

==

jax/core.py
jax/interpreters/batching.py
==================
f96d9761;jax authors;2021-02-13 05:57:42 -0800;Merge pull request #5724 from google:gnecula-patch-1
PiperOrigin-RevId: 357352780

==
==================
25dbe974;George Necula;2021-02-13 15:47:42 +0200;Update gpu_memory_allocation.rst
Discovered that the link did not work anymore
==

docs/gpu_memory_allocation.rst
==================
96193cef;Daniel Bershatsky;2021-02-13 16:32:21 +0300;Simplify bazel version check

==

build/build.py
==================
9d7e6ce1;jax authors;2021-02-13 04:14:34 -0800;Merge pull request #5641 from gnecula:call_tf_dlpack
PiperOrigin-RevId: 357346851

==
==================
fd2b9b47;George Necula;2021-02-05 12:04:25 +0200;[call_tf] Add support for DLPack to avoid copying arrays in eager mode

==

docs/CHANGELOG.md
jax/_src/dlpack.py
jax/dlpack.py
jax/experimental/jax2tf/README.md
jax/experimental/jax2tf/call_tf.py
jax/experimental/jax2tf/tests/call_tf_test.py
tests/array_interoperability_test.py
==================
b28f8f24;jax authors;2021-02-12 19:02:18 -0800;Merge pull request #5721 from jakevdp:fix-bincount
PiperOrigin-RevId: 357307426

==
==================
75648c48;jax authors;2021-02-12 17:30:09 -0800;Merge pull request #5715 from jakevdp:migrate-changelog
PiperOrigin-RevId: 357298120

==
==================
94484d85;Jake VanderPlas;2021-02-12 17:03:53 -0800;Migrate CHANGELOG.rst -> CHANGELOG.md

==

CHANGELOG.md
docs/CHANGELOG.md
docs/CHANGELOG.rst
docs/index.rst
==================
079a966d;jax authors;2021-02-12 15:55:22 -0800;Merge pull request #5714 from skye:version
PiperOrigin-RevId: 357284395

==
==================
f5d500d1;Jake VanderPlas;2021-02-12 14:21:00 -0800;jnp.bincount: better input validation

==

jax/_src/numpy/lax_numpy.py
==================
2889d232;jax authors;2021-02-12 14:16:16 -0800;Merge pull request #5720 from jakevdp:fix-bincount
PiperOrigin-RevId: 357266492

==
==================
e449c02d;Jake VanderPlas;2021-02-12 13:18:49 -0800;BUG: fix empty bincount

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
697e983b;jax authors;2021-02-12 11:21:53 -0800;Merge pull request #5716 from google:simplify-standard-primitive
PiperOrigin-RevId: 357230524

==
==================
268493ba;Matthew Johnson;2021-02-12 10:30:46 -0800;specialize standard_primitive back to single-out

==

jax/_src/lax/lax.py
tests/lax_test.py
==================
7a67b974;Skye Wanderman-Milne;2021-02-12 09:42:04 -0800;jaxlib version bump etc.

==

README.md
build/test-requirements.txt
docs/CHANGELOG.rst
jaxlib/version.py
==================
18343817;Jean-Baptiste Lespiau;2021-01-16 17:57:39 +0100;Use the C++ object for the Sharding specification.

==

jax/interpreters/pxla.py
jax/lib/__init__.py
tests/pmap_test.py
tests/xmap_test.py
==================
65b0e985;jax authors;2021-02-11 14:23:33 -0800;Merge pull request #5710 from jakevdp:dev-docs-md
PiperOrigin-RevId: 357057929

==
==================
cdbc0094;Jake VanderPlas;2021-02-11 12:47:48 -0800;Migrate docs/developer.rst to docs/developer.md

==

docs/developer.md
docs/developer.rst
==================
34217d0a;jax authors;2021-02-11 11:26:02 -0800;Merge pull request #5682 from google:pargmax
PiperOrigin-RevId: 357019508

==
==================
8c3371ca;jax authors;2021-02-11 09:16:19 -0800;Merge pull request #5708 from skye:workspace
PiperOrigin-RevId: 356988284

==
==================
7eb64945;jax authors;2021-02-11 09:12:51 -0800;Merge pull request #5709 from skye:bazelversion
PiperOrigin-RevId: 356988259

==
==================
74db3638;Skye Wanderman-Milne;2021-02-11 09:07:04 -0800;Bump required bazel version to 3.7.2
Untested, but I'm about to build a new jaxlib and will make any fixes then.

==

.bazelversion
build/build.py
==================
95444d9f;Skye Wanderman-Milne;2021-02-11 09:01:35 -0800;Change TF version for jaxlib-v0.1.61
This is to line up the new jaxlib with a libtpu nightly build.

==

WORKSPACE
==================
e47c933f;Matthew Johnson;2021-02-11 08:30:37 -0800;fix/skip test failures

==

tests/pmap_test.py
==================
b757792b;jax authors;2021-02-10 18:33:17 -0800;Merge pull request #5703 from google:remove-extraneous-table-entry
PiperOrigin-RevId: 356876006

==
==================
d135626b;jax authors;2021-02-10 18:03:31 -0800;Merge pull request #5704 from google:make-jaxpr-shaped-inputs
PiperOrigin-RevId: 356871654

==
==================
afecab9a;Roy Frostig;2021-02-10 16:22:29 -0800;accept any arguments with shape/dtype attributes after make_jaxpr

==

jax/api.py
jax/api_util.py
tests/api_test.py
==================
5357c6e0;Matthew Johnson;2021-02-10 15:46:49 -0800;remove float0 dtype from core.pytype_aval_mappings

==

jax/dtypes.py
==================
4e6aff30;jax authors;2021-02-10 14:48:51 -0800;Merge pull request #5701 from jakevdp:expand-precommit
PiperOrigin-RevId: 356831483

==
==================
144a633e;jax authors;2021-02-10 13:51:23 -0800;Merge pull request #5405 from shoyer:check-grads-err-msg
PiperOrigin-RevId: 356818579

==
==================
e159d67e;Jake VanderPlas;2021-02-10 13:44:40 -0800;Move flake8 & mypy checks to pre-commit

==

.github/workflows/ci-build.yaml
.pre-commit-config.yaml
build/build_wheel.py
jax/dtypes.py
jax/interpreters/partial_eval.py
jax/tree_util.py
==================
97f249b1;jax authors;2021-02-10 12:58:20 -0800;Merge pull request #5691 from jakevdp:jupytext
PiperOrigin-RevId: 356806371

==
==================
6eedadc2;Jake VanderPlas;2021-02-10 06:39:35 -0800;DOC: use jupytext to maintain synced markdown versions of notebooks.

==

.github/workflows/ci-build.yaml
.pre-commit-config.yaml
docs/conf.py
docs/developer.rst
docs/notebooks/Common_Gotchas_in_JAX.ipynb
docs/notebooks/Common_Gotchas_in_JAX.md
docs/notebooks/Custom_derivative_rules_for_Python_code.ipynb
docs/notebooks/Custom_derivative_rules_for_Python_code.md
docs/notebooks/How_JAX_primitives_work.ipynb
docs/notebooks/How_JAX_primitives_work.md
docs/notebooks/Neural_Network_and_Data_Loading.ipynb
docs/notebooks/Neural_Network_and_Data_Loading.md
docs/notebooks/Writing_custom_interpreters_in_Jax.ipynb
docs/notebooks/Writing_custom_interpreters_in_Jax.md
docs/notebooks/XLA_in_Python.ipynb
docs/notebooks/XLA_in_Python.md
docs/notebooks/autodiff_cookbook.ipynb
docs/notebooks/autodiff_cookbook.md
docs/notebooks/maml.ipynb
docs/notebooks/maml.md
docs/notebooks/neural_network_with_tfds_data.ipynb
docs/notebooks/neural_network_with_tfds_data.md
docs/notebooks/quickstart.ipynb
docs/notebooks/quickstart.md
docs/notebooks/score_matching.ipynb
docs/notebooks/score_matching.md
docs/notebooks/thinking_in_jax.ipynb
docs/notebooks/thinking_in_jax.md
docs/notebooks/vmapped_log_probs.ipynb
docs/notebooks/vmapped_log_probs.md
==================
db6405c7;Stephan Hoyer;2021-01-13 17:29:47 -0800;Better error messages for test_util.check_grads()
Rather than merely reporting a failure in check_grads(), we now
report the *specific* check that failed, e.g., "JVP tangent" or
"VJP of JVP cotangent projection". Gradient tests often fail for
spurious reasons (e.g., due to insufficient precision), so this should
be helpful for debugging.

I tested this manually by relaxing the tolerance for a test in
`linalg_test.py`.

==

jax/test_util.py
==================
e46700d1;Jake VanderPlas;2021-02-10 12:09:49 -0800;Add place-holder at .pre-commit-config.yaml
PiperOrigin-RevId: 356795154

==

.pre-commit-config.yaml
==================
14cc3f89;jax authors;2021-02-10 10:57:06 -0800;Merge pull request #5672 from skye:pjit
PiperOrigin-RevId: 356774892

==
==================
a9f89f66;jax authors;2021-02-10 10:13:02 -0800;Merge pull request #5699 from skye:workspace
PiperOrigin-RevId: 356763878

==
==================
3a50788e;Skye Wanderman-Milne;2021-02-10 10:05:56 -0800;Update WORKSPACE to latest TF commit for jaxlib 0.1.61 release.

==

WORKSPACE
==================
ec472e36;jax authors;2021-02-10 09:20:44 -0800;Merge pull request #5690 from google:issue5683
PiperOrigin-RevId: 356750405

==
==================
5c14dafe;jax authors;2021-02-10 07:05:39 -0800;Merge pull request #5688 from apaszke:xmap-bag-of-fixes
PiperOrigin-RevId: 356725742

==
==================
926b2ad0;Adam Paszke;2021-02-09 17:01:26 +0000;Minor fixes for xmap docstring, xeinsum parser
The regression loss example from the xmap docstring was broken and
the xeinsum parser didn't accept empty parens while it should.

==

jax/_src/lax/parallel.py
jax/_src/numpy/lax_numpy.py
jax/experimental/maps.py
tests/xmap_test.py
==================
ffb3873e;Matthew Johnson;2021-02-08 20:24:19 -0800;add pargmax, pargmin wrappers

==

jax/_src/lax/parallel.py
tests/batching_test.py
tests/pmap_test.py
==================
b8d9ce64;Skye Wanderman-Milne;2021-02-05 16:50:38 -0800;First draft of pjit.
pjit is like sharded_jit except it uses the new mesh API introduced by xmap.
Also includes pjit version of with_sharding_constraint.

Testing: new unit tests and a manual pod test (not included here) on Cloud TPU.

==

jax/experimental/maps.py
jax/experimental/pjit.py
jax/interpreters/pxla.py
tests/pjit_test.py
==================
8b4f9ad8;Matthew Johnson;2021-02-09 12:36:21 -0800;Merge branch 'master' into issue5683

==
==================
c2455d97;jax authors;2021-02-09 11:56:31 -0800;Merge pull request #5285 from jakevdp:reland-weaktypes
PiperOrigin-RevId: 356556856

==
==================
73940487;Matthew Johnson;2021-02-09 11:19:09 -0800;make jax.eval_shape duck typing more robust

==

jax/api.py
jax/dtypes.py
tests/api_test.py
==================
5b0c47e8;jax authors;2021-02-09 10:01:08 -0800;Merge pull request #5689 from jakevdp:fix-sphinx
PiperOrigin-RevId: 356526948

==
==================
9e5c9057;Jake VanderPlas;2021-02-09 09:49:36 -0800;DOC: fix minor rst formatting issues

==

docs/CHANGELOG.rst
docs/jax.scipy.rst
==================
2e4f2f29;Jake VanderPlas;2021-02-09 09:27:34 -0800;Update CHANGELOG for weak types change

==

docs/CHANGELOG.rst
==================
41b7a0f7;Jake VanderPlas;2021-02-08 13:37:25 -0800;Re-land #4850 weak types change

==

docs/jaxpr.rst
jax/_src/lax/lax.py
jax/_src/numpy/lax_numpy.py
jax/dtypes.py
jax/experimental/doubledouble.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/jax2tf_test.py
jax/experimental/jax2tf/tests/primitive_harness.py
tests/api_test.py
tests/dtypes_test.py
tests/lax_numpy_test.py
tests/lax_test.py
==================
01485ec4;jax authors;2021-02-09 07:03:01 -0800;Merge pull request #5673 from apaszke:pgather
PiperOrigin-RevId: 356492981

==
==================
b19dd875;Adam Paszke;2021-02-08 20:09:33 +0000;Add a pgather primitive, making it possible to index into mapped axes

==

jax/_src/lax/parallel.py
jax/_src/util.py
jax/experimental/jax2tf/jax2tf.py
tests/xmap_test.py
==================
3df58b97;jax authors;2021-02-08 17:04:25 -0800;Merge pull request #5655 from pschuh:execute-sharded
PiperOrigin-RevId: 356386496

==
==================
c20aac3e;jax authors;2021-02-08 16:33:03 -0800;Merge pull request #5677 from hawkinsp:cuda
PiperOrigin-RevId: 356380559

==
==================
1bc82f13;jax authors;2021-02-08 16:25:10 -0800;Merge pull request #5644 from apaszke:xmap-more-reductions
PiperOrigin-RevId: 356378902

==
==================
9514fd01;jax authors;2021-02-08 13:41:48 -0800;Merge pull request #5680 from jakevdp:util-wraps
PiperOrigin-RevId: 356342907

==
==================
6965e8bb;Adam Paszke;2021-02-05 11:34:32 +0000;Add support for named axes in jnp.mean and jnp.std

==

jax/_src/numpy/lax_numpy.py
jax/_src/util.py
tests/xmap_test.py
==================
692e31c9;Adam Paszke;2021-02-08 12:18:33 +0000;Small cleanup of xmap tests

==

tests/xmap_test.py
==================
c1d1d94b;Jake VanderPlas;2021-02-08 11:31:53 -0800;util.wraps: update same attributes as functools.wraps.

==

jax/_src/util.py
tests/api_test.py
==================
9b2605d6;jax authors;2021-02-08 07:25:18 -0800;Merge pull request #5675 from hawkinsp:monoid
PiperOrigin-RevId: 356258358

==
==================
c4ae0f49;jax authors;2021-02-08 06:56:23 -0800;Merge pull request #5676 from hawkinsp:xla
PiperOrigin-RevId: 356253759

==
==================
ba59b7eb;Peter Hawkins;2021-02-08 09:39:36 -0500;Add CUDA 11.2 to wheel builds.
Remove NCCL from CUDA installation scripts. This is partially because there are no Ubuntu 16.04 CUDA 11.2 NCCL packages, but also because we don't need NCCL packages in the first place since we are building from source.

==

build/build_jaxlib_wheels.sh
build/install_cuda.sh
==================
83f4069d;Peter Hawkins;2021-02-08 09:28:14 -0500;Update XLA.
Fixes #4687.

==

WORKSPACE
==================
ac512718;Peter Hawkins;2021-02-08 09:23:35 -0500;Add note that lax.reduce requires a monoid.

==

jax/_src/lax/lax.py
==================
bd8d4a34;jax authors;2021-02-08 05:58:14 -0800;Merge pull request #5632 from apaszke:xmap-donation-jit
PiperOrigin-RevId: 356245856

==
==================
0b7febea;Adam Paszke;2021-02-04 14:53:38 +0000;Add argument donation for xmap
Also, pass the body to XLA JIT when no parallel resources are used.
There is no reason to not do that given that we already require users to
pay the price of making their code jittable.

==

jax/experimental/maps.py
jax/interpreters/pxla.py
jax/test_util.py
tests/api_test.py
tests/xmap_test.py
==================
8bf3f032;jax authors;2021-02-06 11:53:26 -0800;Merge pull request #5649 from jakevdp:full-nonscalar
PiperOrigin-RevId: 356044988

==
==================
b058eed4;jax authors;2021-02-06 11:34:38 -0800;Merge pull request #5664 from ashutoshvarma:numpy-union1d
PiperOrigin-RevId: 356043338

==
==================
0376bb14;jax authors;2021-02-06 11:31:01 -0800;Merge pull request #5654 from jakevdp:old-scipy
PiperOrigin-RevId: 356043323

==
==================
108d078c;Ashutosh Varma;2021-02-06 22:17:06 +0530;add support for union1d
add union1d in jax.numpy which closely follows
numpy implementaion

==

docs/jax.numpy.rst
jax/_src/numpy/lax_numpy.py
jax/numpy/__init__.py
tests/lax_numpy_test.py
==================
2fabc534;jax authors;2021-02-05 21:40:52 -0800;Merge pull request #5659 from google:cond-doc-wrap
PiperOrigin-RevId: 355985205

==
==================
0616af8e;jax authors;2021-02-05 20:58:38 -0800;Merge pull request #5660 from google:handle-dunder-array-classes-3
PiperOrigin-RevId: 355981724

==
==================
bfe9d8fc;jax authors;2021-02-05 20:36:10 -0800;Merge pull request #5658 from google:vmap-cond-grad-safety
PiperOrigin-RevId: 355980073

==
==================
ca4f7f79;Matthew Johnson;2021-02-05 20:30:14 -0800;add check for __jax_array__ method before error
Before raising an error on an unrecognized type, first check if the
object defines a __jax_array__ method. If it does, call it!

This provides a way for custom types to be auto-converted to
JAX-compatible types.

Implementing this method is not sufficient for a type to be duck-typed
enough for use with jax.numpy. But it may be necessary. That is, someone
trying to add a duck-typed array to be used with JAX identified a need
for __jax_array__ or similar. The user would still need to add lots of
other properties and methods, like dtype and shape attributes.

revives #4725 after it was rolled back. fixes #5356.

==

jax/_src/lax/lax.py
jax/_src/numpy/lax_numpy.py
jax/core.py
jax/interpreters/xla.py
tests/api_test.py
==================
bb4d46c2;Matthew Johnson;2021-02-05 16:25:23 -0800;make vmap-of-cond preserve nan safety
Thanks to John Jumper and Jonas Adler!

==

jax/_src/lax/control_flow.py
tests/lax_control_flow_test.py
==================
33c7a575;Roy Frostig;2021-02-05 18:36:01 -0800;take the docstring and signature of cond from its implementation
This better aligns the signature with the current docstring in autogenerated documentation.

==

jax/_src/lax/control_flow.py
==================
3c87a368;jax authors;2021-02-05 15:36:22 -0800;Merge pull request #5657 from jakevdp:fix-flake8
PiperOrigin-RevId: 355942817

==
==================
bae7a4fc;Jake VanderPlas;2021-02-05 15:22:24 -0800;Remove unused import

==

tests/scipy_stats_test.py
==================
b1466a02;jax authors;2021-02-05 14:44:22 -0800;Merge pull request #5643 from apaszke:xmap-mesh-slicing-bug
PiperOrigin-RevId: 355932083

==
==================
71a00bb2;Parker Schuh;2021-02-05 14:33:10 -0800;Convert execute_on_local_devices to execute_sharded_on_local_devices for jit(pmap).

==

jax/interpreters/xla.py
==================
18f4f691;jax authors;2021-02-05 14:22:44 -0800;Merge pull request #5619 from Dpananos:add_beta_binom
PiperOrigin-RevId: 355927750

==
==================
6f161bf4;Jake VanderPlas;2021-02-05 13:37:25 -0800;CI: use internal scipy when testing internal numpy

==

.github/workflows/ci-build.yaml
==================
a3ad7874;Demetri;2021-02-05 15:13:09 -0500;Add betabinomial logpmf/pmf and tests
Squash all changes to single commit.  Add betabinom

Add tests for betabinom. nan where undefefined

squash


==

docs/CHANGELOG.rst
docs/jax.scipy.rst
jax/_src/scipy/stats/betabinom.py
jax/scipy/stats/__init__.py
jax/scipy/stats/betabinom.py
tests/scipy_stats_test.py
==================
0f7cc80d;jax authors;2021-02-05 11:25:03 -0800;Merge pull request #5648 from apaszke:psum-transpose-weird-hotfix
PiperOrigin-RevId: 355890269

==
==================
c9b7d751;jax authors;2021-02-05 11:13:59 -0800;Merge pull request #5640 from jakevdp:eigh-tpu-shape-rule
PiperOrigin-RevId: 355887443

==
==================
b920d02a;jax authors;2021-02-05 11:02:23 -0800;Merge pull request #5633 from apaszke:xmap-ellipsis
PiperOrigin-RevId: 355885433

==
==================
10dcb26c;James Bradbury;2021-02-05 10:39:22 -0800;[avals with names] Add named_shape to ShapedArray and update typecompat The second change in the avals-with-names stack: - https://github.com/google/jax/pull/5524 Revise aval constructor call sites to use a new `aval.update` method - **Add `named_shape` to `ShapedArray` and update typecompat** - Propagate presence of name (mapped) vs absence (replicated) in abstract eval based on existing batching rules - Make `mapped_aval`, `unmapped_aval`, and their xmap equivalents swap positional and named axes (rather than just creating and deleting positional ones) - Enable `lax.full` to create values with named axes - Ensure `grad` and `jacfwd`/`jacrev` consistently act elementwise over named axes (by e.g. using a seed with named axes in `grad`, and prohibiting collectives if TAP isn't too unhappy) and align `vmap(transpose)` with `transpose(vmap)` by moving the `psum` in `transpose(psum)` into `backward_pass` - Add `axis_name` kwarg to grad to indicate operating collectively over one or more named axes
PiperOrigin-RevId: 355880632

==

jax/api.py
jax/core.py
tests/core_test.py
tests/custom_object_test.py
==================
ce180bcb;jax authors;2021-02-05 10:37:29 -0800;Merge pull request #5560 from pschuh:transpose-args
PiperOrigin-RevId: 355880124

==
==================
7e1439b1;Jake VanderPlas;2021-02-04 16:09:07 -0800;Improve error reporting for complex eigh on TPU

==

jax/_src/lax/linalg.py
tests/linalg_test.py
==================
5140426c;Jake VanderPlas;2021-02-05 10:07:41 -0800;Support non-scalar fill values in jnp.full() & jnp.full_like()

==

jax/_src/numpy/lax_numpy.py
jax/test_util.py
tests/lax_numpy_test.py
==================
6ada0b02;Adam Paszke;2021-02-05 17:12:23 +0000;Hotfix for psum transpose
The previous patch has been causing some failures in the
`is_undefined_primal` assertion in `broadcast_position`, but it looks
like in all of those cases there are no positional axes, so this should
fix them. More debugging underway, but I wanted to make sure they're
unblocked.

==

jax/_src/lax/parallel.py
==================
3575bc76;jax authors;2021-02-05 05:55:59 -0800;Merge pull request #5628 from tomhennigan:changelist/355594738
PiperOrigin-RevId: 355834441

==
==================
45dc712e;Adam Paszke;2021-02-04 15:45:23 +0000;Don't require ellipsis at the end of each list axis spec in xmap
Skipping the ellipsis will make xmap assert that your inputs are of
ranks matching the length of the list.

==

jax/experimental/maps.py
tests/xmap_test.py
==================
55907e2d;jax authors;2021-02-05 05:29:36 -0800;Merge pull request #5573 from gnecula:numpy_1_20
PiperOrigin-RevId: 355831312

==
==================
e58e45ef;jax authors;2021-02-05 05:13:26 -0800;Merge pull request #5637 from jakevdp:cleanup-old-jaxlibs
PiperOrigin-RevId: 355829707

==
==================
7a789fb1;jax authors;2021-02-05 05:00:42 -0800;Merge pull request #5629 from apaszke:xmap-init
PiperOrigin-RevId: 355827985

==
==================
b365ab81;jax authors;2021-02-05 04:57:13 -0800;Merge pull request #5630 from apaszke:fix-psum-transpose
PiperOrigin-RevId: 355827951

==
==================
1361ae12;Adam Paszke;2021-02-04 14:01:56 +0000;Add positional axis handling to the psum transpose rule
I must have forgotten to do that in one of the previous patches and
apparently we didn't have any tests for it (at least in the `vmap`
case)!

==

jax/_src/lax/parallel.py
tests/batching_test.py
==================
1194115e;Adam Paszke;2021-02-05 10:50:51 +0000;Make sure that samplers with names don't depend on axis resources

==

tests/xmap_test.py
==================
a7d616e3;Adam Paszke;2021-02-05 10:52:54 +0000;Fix a bug in xmap mesh slicing code
The previous version didn't adjust the axes indices after slicing the
devices array, leading to out-of-bounds errors when doing the transpose.

==

jax/interpreters/pxla.py
tests/xmap_test.py
==================
1c155a73;jax authors;2021-02-05 00:58:58 -0800;Merge pull request #5627 from gnecula:call_tf
PiperOrigin-RevId: 355801557

==
==================
f105517e;George Necula;2021-01-31 15:34:20 +0200;Fixed mypy type errors for numpy 1.20
Revert also previous changes that pinned numpy to 1.19.

One of the changes in numpy 1.20 is to add more type annotations.
However, this sometimes make mypy give errors. A common example is
numpy.take, which with the new type annotation does not appear to
mypy as indexable.

Another change is that np.int and np.bool are deprecated. One
should use np.bool_ or np.int_, or the built-ins bool and int.

==

.github/workflows/ci-build.yaml
docs/CHANGELOG.rst
jax/_src/lax/lax.py
jax/_src/numpy/lax_numpy.py
jax/_src/random.py
jax/abstract_arrays.py
jax/dtypes.py
jax/experimental/jax2tf/tests/jax2tf_limitations.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/interpreters/pxla.py
mypy.ini
setup.py
tests/xmap_test.py
==================
c589551d;George Necula;2021-02-05 10:28:24 +0200;Implemented review suggestions

==

jax/experimental/jax2tf/call_tf.py
jax/experimental/jax2tf/tests/call_tf_test.py
==================
5e7be4a6;Jake VanderPlas;2021-02-04 15:13:39 -0800;Cleanup: remove obsolete jaxlib version checks

==

jax/_src/dlpack.py
jax/api.py
jax/experimental/host_callback.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
jax/lib/__init__.py
jax/tree_util.py
tests/api_test.py
tests/debug_nans_test.py
tests/jax_jit_test.py
tests/sharded_jit_test.py
tests/tree_util_test.py
==================
ed5d1faa;Parker Schuh;2021-01-29 11:39:10 -0800;Add support for execute_sharded_on_local_devices.
Change the structure of `execute_replicated` so that `in_handlers` and
`out_handlers` return and take `args[arg][shard]`
instead of `args[shard][arg]`.

==

jax/interpreters/pxla.py
jax/interpreters/sharded_jit.py
tests/pmap_test.py
==================
92a0e695;jax authors;2021-02-04 11:06:53 -0800;Merge pull request #5635 from jakevdp:disable-thinking-in-jax
PiperOrigin-RevId: 355665982

==
==================
758bb0a3;jax authors;2021-02-04 11:03:24 -0800;Merge pull request #5604 from jakevdp:x64-thread-local
PiperOrigin-RevId: 355665916

==
==================
30ca7f92;jax authors;2021-02-04 10:55:01 -0800;Merge pull request #5620 from jakevdp:partial-doc
PiperOrigin-RevId: 355663755

==
==================
2044ba12;Jake VanderPlas;2021-02-04 10:12:23 -0800;Add example of Partial with no arguments

==

jax/tree_util.py
==================
a921371d;Jake VanderPlas;2021-02-03 16:26:29 -0800;DOC: add examples to jax.tree_util.Partial

==

jax/tree_util.py
==================
2fd682ef;Jake VanderPlas;2021-02-04 09:48:22 -0800;Make jax_enable_x64 a thread-local value.

==

jax/_src/util.py
jax/api.py
jax/config.py
jax/dtypes.py
jax/experimental/jax2tf/tests/jax_primitives_coverage_test.py
jax/experimental/jax2tf/tests/primitives_test.py
jax/experimental/jax2tf/tests/stax_test.py
jax/experimental/jax2tf/tests/tf_test_util.py
jax/experimental/x64_context.py
jax/lib/xla_bridge.py
jax/linear_util.py
jax/test_util.py
tests/api_test.py
tests/array_interoperability_test.py
tests/doubledouble_test.py
tests/dtypes_test.py
tests/fft_test.py
tests/jax_jit_test.py
tests/jaxpr_util_test.py
tests/lax_numpy_indexing_test.py
tests/lax_numpy_test.py
tests/lax_scipy_sparse_test.py
tests/lax_test.py
tests/random_test.py
tests/x64_context_test.py
==================
7545aeb8;Jake VanderPlas;2021-02-04 09:26:11 -0800;doc build: avoid executing thinking_in_jax.ipynb

==

docs/notebooks/thinking_in_jax.ipynb
==================
10cff5f2;jax authors;2021-02-04 09:11:54 -0800;Merge pull request #5621 from NathanHowell:enable-tree-util-tests
PiperOrigin-RevId: 355640225

==
==================
7adb1e38;Tom Hennigan;2021-02-04 11:56:41 +0000;Add `jax.default_backend()` which returns the default platform name.
This can be useful when you need backend specific behaviour, e.g.:

    if jax.default_backend() == 'gpu':
      dataset = double_buffer(dataset)

Or if you want to assert a given backend is the default:

    assert jax.default_backend() == 'tpu'

I am a bit conflicted by the naming, "backend" is consistent with other APIs in
JAX (e.g. jit, local_devices etc) which accept a "backend" string which is used
to lookup an XLA backend by platform name.

==

docs/jax.rst
jax/__init__.py
jax/api.py
jax/lib/xla_bridge.py
tests/api_test.py
==================
1e8e6d9d;jax authors;2021-02-04 06:37:40 -0800;Merge pull request #5623 from hawkinsp:minver
PiperOrigin-RevId: 355614320

==
==================
dfdf582e;Peter Hawkins;2021-02-03 20:57:50 -0500;Drop support in tests for NumPy < 1.16 and jaxlib < 0.1.60
These are now the minimum versions.

==

tests/array_interoperability_test.py
tests/lax_numpy_test.py
tests/tree_util_tests.py
tests/xmap_test.py
==================
c4c916e2;jax authors;2021-02-04 06:27:51 -0800;Merge pull request #5631 from LenaMartens:error-fix
PiperOrigin-RevId: 355612994

==
==================
393054ed;George Necula;2021-02-04 10:56:13 +0200;Add an experimental mechanism for calling TensorFlow functions from JAX.
The TF function is called in eager mode if called outside a JAX staging
context, or if compiled using TF (``tf.function(jit_compile=True)``) if
called outside a staging context. Reverse-mode AD is supported, by
calling TensorFlow's ``tf.tape_gradient``.

In a staging context, the implementation uses TF to compile the function
to XLA, and then adds a call from JAX's computation to the compiled
TF function. All metadata that TF puts in the generated XLA is carried
over.

See the `jax.experimental.jax2tf.README` file for details.

==

docs/jax.experimental.rst
jax/experimental/jax2tf/README.md
jax/experimental/jax2tf/__init__.py
jax/experimental/jax2tf/call_tf.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/call_tf_test.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
bea17e57;lenamartens;2021-02-04 13:55:36 +0000;Fix a _check_arraylike error.
Before, if `repeats` was the the non-array arg the error would display
the wrong arg position (position 0 -> position 1)

==

jax/_src/numpy/lax_numpy.py
==================
76e8deb0;Adam Paszke;2021-02-04 12:45:20 +0000;Throw in `jax.random.bernoulli` for good measure
Because it's useful in implementing dropout over named axes.

==

jax/_src/random.py
tests/xmap_test.py
==================
f750969a;Adam Paszke;2021-02-04 12:38:12 +0000;Add support for axis names in jax.nn.initializers.variance_scaling
... as well as in a few random functions that it needs (`uniform`,
`normal` and `truncated_normal`). The interface itself doesn't change to
much with the exception of the `shape` arguments of all those functions
now accepting `jax.core.NamedShape` (I didn't move it to be part of the
API just yet, but we can do that any time), which makes it possible to
generate sharded random arrays (in particular the random bits are
different on different shards). I also haven't updated the docstrings,
because I don't know if we're ready to go fully public with this
feature.

==

jax/_src/nn/initializers.py
jax/_src/random.py
jax/core.py
tests/xmap_test.py
==================
e8bca055;jax authors;2021-02-04 00:52:12 -0800;Merge pull request #5599 from gnecula:numpy_1_20_one
PiperOrigin-RevId: 355571609

==
==================
bae91577;jax authors;2021-02-03 18:48:43 -0800;Merge pull request #5622 from hawkinsp:jaxlib
PiperOrigin-RevId: 355529572

==
==================
13f38190;Peter Hawkins;2021-02-03 20:33:46 -0500;Update README.md for jaxlib 0.1.60.
Bump jaxlib version to 0.1.61 and update changelog.

Change jaxlib numpy version limit to >=1.16 for next release. Releases older than 1.16 are deprecated per NEP 00029. Reenable NumPy 1.20.

Bump minimum jaxlib version to 0.1.60.

==

README.md
build/test-requirements.txt
docs/CHANGELOG.rst
jax/lib/__init__.py
jaxlib/setup.py
jaxlib/version.py
==================
016cc831;jax authors;2021-02-03 16:59:49 -0800;Merge pull request #5616 from hawkinsp:jaxlibbuild
PiperOrigin-RevId: 355513294

==
==================
36cbf030;Nathan Howell;2021-02-03 16:07:16 -0800;Rename {tree_util_tests.py->tree_util_test.py}

==

tests/tree_util_test.py
==================
cd4138b8;jax authors;2021-02-03 13:08:57 -0800;Merge pull request #5608 from Dpananos:chi_square
PiperOrigin-RevId: 355465258

==
==================
48864a66;Demetri;2021-02-03 15:09:21 -0500;Add logdf and pdf for chisquare distribution
Add tests

Lint with flake8 fails.  Should pass now

newline at end of file for flake8

docs and changes

remove whitespace in changeloc

==

docs/CHANGELOG.rst
docs/jax.scipy.rst
jax/_src/scipy/stats/chi2.py
jax/scipy/stats/__init__.py
jax/scipy/stats/chi2.py
tests/scipy_stats_test.py
==================
c039f1e1;jax authors;2021-02-03 11:02:40 -0800;Merge pull request #5603 from apaszke:xmap-better-errors
PiperOrigin-RevId: 355434691

==
==================
ec4bd11c;jax authors;2021-02-03 10:44:33 -0800;Merge pull request #5615 from jakevdp:fix-thinking-in-jax
PiperOrigin-RevId: 355430562

==
==================
73842140;jax authors;2021-02-03 10:25:00 -0800;Merge pull request #5591 from jakevdp:concrete-check
PiperOrigin-RevId: 355425671

==
==================
08f4c6fb;Peter Hawkins;2021-02-03 12:31:46 -0500;Remove libcudnn8 in install_cuda.sh as well as libcudnn7.
This prevents apt from attempting to install libcudnn8 where it is not needed.

==

build/install_cuda.sh
==================
667cf9bc;Jake VanderPlas;2021-02-03 09:25:26 -0800;Merge problematic cells in thinking_in_jax.ipynb

==

docs/notebooks/thinking_in_jax.ipynb
==================
7495f71e;jax authors;2021-02-03 09:15:38 -0800;Merge pull request #5614 from hawkinsp:jaxlib
PiperOrigin-RevId: 355410705

==
==================
3829bb9c;Peter Hawkins;2021-02-03 12:00:33 -0500;Release jaxlib v0.1.60.

==

WORKSPACE
docs/CHANGELOG.rst
==================
be9c58ae;Adam Paszke;2021-02-02 17:36:46 +0000;Improve some xmap error messages
We used to raise really bad errors when:
- we failed to infer an axis size
- axis sizes were not divisible by the number of resources assigned to them
- axis sizes were inconsistent between arguments
- in/out_axes referring to out-of-bounds positional axes
- in/out_axes using negative indices for positional axes (this is not implemented yet)

==

jax/experimental/maps.py
tests/xmap_test.py
==================
3fdc14a4;jax authors;2021-02-03 05:14:48 -0800;Merge pull request #5578 from gnecula:tf_sharded_jit
PiperOrigin-RevId: 355373712

==
==================
76dded26;George Necula;2021-02-03 12:22:44 +0200;One more test fix

==

tests/lax_control_flow_test.py
==================
d3186b19;George Necula;2021-02-03 11:06:18 +0200;Tightened the API of some jax.numpy functions
Do not accept tuples and lists in lieu of array arguments

==

docs/CHANGELOG.rst
jax/_src/lax/control_flow.py
jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
5616916c;jax authors;2021-02-02 11:36:46 -0800;Merge pull request #5602 from apaszke:xmap-explicit-sizes
PiperOrigin-RevId: 355214275

==
==================
9c725823;jax authors;2021-02-02 11:31:05 -0800;Merge pull request #5584 from jakevdp:fix-multivariate-normal
PiperOrigin-RevId: 355212888

==
==================
024ac7c9;jax authors;2021-02-02 09:35:22 -0800;Merge pull request #5583 from apaszke:logsumexp-named
PiperOrigin-RevId: 355185078

==
==================
33f80216;Jake VanderPlas;2021-02-02 09:07:00 -0800;lax_numpy: better input sanitization

==

jax/_src/numpy/lax_numpy.py
==================
e27f1e98;jax authors;2021-02-02 08:46:53 -0800;Merge pull request #5600 from apaszke:named-one-hot
PiperOrigin-RevId: 355174793

==
==================
a8b1f5f7;Adam Paszke;2021-02-02 15:39:23 +0000;Add axis_sizes to xmap
Right now, all axis sizes have to be inferred from arguments to xmap
which is unnecessarily strict. This lets users specify explicit sizes,
allowing them to handle e.g. empty dicts that were supposed to contain
mapped arguments.

==

jax/experimental/maps.py
jax/interpreters/pxla.py
tests/xmap_test.py
==================
f812402d;Adam Paszke;2021-02-02 14:06:42 +0000;Add support for named axes in jax.nn.one_hot

==

jax/_src/nn/functions.py
tests/nn_test.py
tests/xmap_test.py
==================
d25d3781;George Necula;2021-02-02 15:47:13 +0200;Fixes for numpy 1.20
It seems that `np.ndim` and `np.shape` fail in version 1.20
when used on sequences of Tracers. We avoid invoking these
functions in places where this may happen.

==

jax/_src/lax/control_flow.py
jax/_src/numpy/lax_numpy.py
==================
78c54ae6;jax authors;2021-02-02 05:46:36 -0800;Merge pull request #5589 from ahoenselaar:changelist/355051176
PiperOrigin-RevId: 355147038

==
==================
e11c4fff;Adam Paszke;2021-02-01 16:49:46 +0000;Add support for axis names in jax.scipy.special.logsumexp

==

jax/_src/scipy/special.py
tests/xmap_test.py
==================
9840f34e;jax authors;2021-02-02 04:05:21 -0800;Merge pull request #5598 from gnecula:fix_docs
PiperOrigin-RevId: 355135478

==
==================
ec2301a9;George Necula;2021-02-02 10:31:04 +0200;Update limitations docs

==

jax/experimental/jax2tf/g3doc/jax_primitives_coverage.md
jax/experimental/jax2tf/g3doc/primitives_with_limited_support.md
jax/experimental/jax2tf/tests/primitive_harness.py
==================
4458c0ca;jax authors;2021-02-01 19:05:52 -0800;Merge pull request #5594 from hawkinsp:eigh
PiperOrigin-RevId: 355075529

==
==================
046961ad;Peter Hawkins;2021-02-01 21:47:36 -0500;Disable bfloat16 in jax2tf eigh test.
We don't have any bfloat16 implementations, so we shouldn't be testing it.

==

jax/experimental/jax2tf/tests/primitive_harness.py
==================
b832b247;jax authors;2021-02-01 18:48:22 -0800;Merge pull request #5586 from hawkinsp:npy
PiperOrigin-RevId: 355073577

==
==================
95cbd810;jax authors;2021-02-01 17:30:19 -0800;Merge pull request #5585 from jakevdp:fix-doc-build
PiperOrigin-RevId: 355062401

==
==================
6ade2de1;jax authors;2021-02-01 17:23:57 -0800;Merge pull request #5590 from google:revert-5540-ci-pytest-verbose
PiperOrigin-RevId: 355061483

==
==================
5fa48aae;Peter Hawkins;2021-02-01 16:30:30 -0500;Fix a number of NumPy 1.20.0 test failures.

==

docs/CHANGELOG.rst
jax/_src/numpy/lax_numpy.py
jax/interpreters/pxla.py
jax/lib/xla_bridge.py
tests/jax_jit_test.py
tests/lax_numpy_test.py
tests/linalg_test.py
==================
a2df1a3c;Peter Hawkins;2021-02-01 19:56:05 -0500;Revert "run CI pytest in verbose mode"

==

.github/workflows/ci-build.yaml
==================
f674059f;jax authors;2021-02-01 16:38:45 -0800;Merge pull request #5562 from pschuh:replicate
PiperOrigin-RevId: 355053930

==
==================
2f6ed3cf;Andreas Hoenselaar;2021-02-01 16:23:21 -0800;Initialize variables in LAPACK work size queries to prevent false positives in memory sanitizers.
Related prior art in SciPy: https://github.com/scipy/scipy/pull/9054

==

jaxlib/lapack.pyx
==================
4b6b724d;jax authors;2021-02-01 15:28:11 -0800;Merge pull request #5588 from hawkinsp:xla
PiperOrigin-RevId: 355039495

==
==================
bb0f50ff;Parker Schuh;2021-01-28 23:14:26 -0800;Bugfix to allow `pxla.replicate` to generate Replicated buffers.

==

jax/interpreters/pxla.py
tests/pmap_test.py
==================
113584c8;Jake VanderPlas;2021-02-01 14:44:18 -0800;Add hidden sleep statement in attempt to sidestep RTD build issue

==

docs/notebooks/thinking_in_jax.ipynb
==================
fef73075;Peter Hawkins;2021-02-01 16:40:31 -0500;Update XLA.
Includes https://github.com/tensorflow/tensorflow/commit/53ab21aa8672365728a6f76c0dc3ebd172fde88d, which fixes a number of test failures under NumPy 1.20.0.

==

WORKSPACE
docs/CHANGELOG.rst
==================
2076f42b;Jake VanderPlas;2021-02-01 10:38:02 -0800;Fix multivariate_normal.logpdf for batched computation

==

jax/_src/scipy/stats/multivariate_normal.py
tests/scipy_stats_test.py
==================
2a769785;jax authors;2021-02-01 08:30:29 -0800;Merge pull request #5557 from apaszke:trivial-ppermute-batcher
PiperOrigin-RevId: 354945256

==
==================
149a7448;jax authors;2021-02-01 08:15:32 -0800;Merge pull request #5533 from apaszke:general-collectives
PiperOrigin-RevId: 354942612

==
==================
c71a4f58;Daniel Bershatsky;2021-02-01 14:00:44 +0300;Try to download bazel as the last resort
Resolution order of paths to bazel binary is as follows.

1. Use --bazel_path command line option.
2. Search bazel binary in PATH environment variable.
3. Download required bazel release.

==

build/build.py
==================
a7f9b84b;Adam Paszke;2021-01-28 18:19:36 +0000;Implement a trivial ppermute collective batcher
Splitting a single-dimensional ppermute into multiple permutations is a
hard problem in general, but not when we're splitting a size-1
dimension. More importantly, this is the case that's triggered by any
`xmap` of a `ppermute`, so we better have an implementation ready!

==

jax/_src/lax/parallel.py
tests/xmap_test.py
==================
f86bf12b;Adam Paszke;2021-01-27 16:48:51 +0000;Add support for axis names in jnp.{sum,min,max}
Similarly to `jnp.einsum`, whenever we encounter an extension to the
positional NumPy API (in the case of reductions, the extension is
whenever a non-integer axis is specified), we reroute the call to a
parallel primitive instead of the standard lax reductions.

Note that this makes the parallel primitives implement a strict subset
of functionality of the lax reductions so in the future (when we decide
that we want axes to be truly first class) we can always swap out the
implementation for the parallel version. But, it makes sense to keep
them separate for the ease of prototyping in the near future.

==

docs/jaxpr.rst
jax/_src/lax/parallel.py
jax/_src/numpy/lax_numpy.py
jax/_src/scipy/special.py
jax/interpreters/pxla.py
tests/xmap_test.py
==================
f2530010;George Necula;2021-01-31 16:58:20 +0200;[jax2tf] Added tests for sharded_jit.
These tests are only looking at the HLO sharding annotations.

==

jax/experimental/jax2tf/tests/sharding_test.py
==================
26afe307;jax authors;2021-01-31 12:42:21 -0800;Merge pull request #5571 from gnecula:error_vjp
PiperOrigin-RevId: 354822858

==
==================
5eb2b52c;jax authors;2021-01-31 12:38:58 -0800;Merge pull request #5567 from matpalm:patch-2
PiperOrigin-RevId: 354822855

==
==================
d6247def;George Necula;2021-01-31 22:19:13 +0200;Update Pmap_Cookbook.ipynb

==

cloud_tpu_colabs/Pmap_Cookbook.ipynb
==================
617d77e0;George Necula;2021-01-29 19:55:02 +0100;Improve error message for when backward function in custom_vjp does not return a tuple.
Prior to this we got an assertion that `py_cts_in is not iterable`.

==

jax/custom_derivatives.py
tests/api_test.py
==================
3fd4c119;jax authors;2021-01-31 11:35:01 -0800;Merge pull request #5574 from gnecula:fix_ci2
PiperOrigin-RevId: 354818121

==
==================
1e5e9e54;jax authors;2021-01-31 11:31:43 -0800;Merge pull request #5559 from NathanHowell:export-split_dict
PiperOrigin-RevId: 354818089

==
==================
cefab2ca;George Necula;2021-01-31 17:10:14 +0200;Disable the "with numpy-dispatch" test action.
As numpy 1.20 was released recently, and triggers some errors
in the GitHub CI, we pin numpy to 1.19. It seems that we still
get failures when trying to import numpy-dispatch. We
disable it until we figure out the problem.

==

.github/workflows/ci-build.yaml
==================
580a8f54;George Necula;2021-01-31 16:23:39 +0200;Update Pmap_Cookbook.ipynb
I am doing this mostly to trigger another run of CI; there was a problem with our CI runs and this PR appears to be failing tests.
==

cloud_tpu_colabs/Pmap_Cookbook.ipynb
==================
bb0750f3;jax authors;2021-01-31 05:43:58 -0800;Merge pull request #5572 from gnecula:fix_ci
PiperOrigin-RevId: 354795243

==
==================
a145e3d4;George Necula;2021-01-31 14:58:14 +0200;Pin numpy to max version 1.19, to avoid errors with 1.20
Will fix the numpy errors separately.

==

build/test-requirements.txt
jaxlib/setup.py
setup.py
==================
4e480235;mat kelcey;2021-01-31 09:07:55 +1100;update out of date comment in Pmap_Cookbook.ipynb
update comment regarding `pmap` not support `in_axes` because it does now.
==

cloud_tpu_colabs/Pmap_Cookbook.ipynb
==================
b058d8a9;jax authors;2021-01-30 12:20:11 -0800;Merge pull request #4262 from petebu:changelist/330700645
PiperOrigin-RevId: 354724963

==
==================
35988560;jax authors;2021-01-30 12:16:25 -0800;Merge pull request #5558 from jakevdp:fix-pad
PiperOrigin-RevId: 354724929

==
==================
3e290f91;jax authors;2021-01-29 17:32:37 -0800;Merge pull request #5561 from jakevdp:sphinx-fixes
PiperOrigin-RevId: 354642795

==
==================
5d16ab03;Jake VanderPlas;2021-01-29 16:43:27 -0800;Minor doc formatting fixes

==

docs/custom_vjp_update.md
docs/index.rst
jax/_src/scipy/optimize/minimize.py
jax/experimental/maps.py
==================
2f3e1ad1;Nathan Howell;2021-01-29 11:13:36 -0800;Export split_dict from jax.util

==

jax/util.py
==================
af77df0b;Jake VanderPlas;2021-01-29 11:10:19 -0800;jnp.pad: improve error handling for non-static pad_width

==

jax/_src/numpy/lax_numpy.py
==================
baf6ed11;Adam Paszke;2021-01-26 18:54:00 +0000;Generalize the access to axis names embedded in primitives
Previously, a few places in our code assumed that all collectives (i.e.
primitives that operate over named axes) keep all of their axes in the
`axis_name` attribute. This was fine for a few simple use cases, but we
are now considering allowing named axes in many more primitives which
can have semantically different attributes where axis names can appear.

==

jax/_src/lax/parallel.py
jax/core.py
jax/experimental/maps.py
jax/interpreters/batching.py
==================
02636639;jax authors;2021-01-29 08:52:25 -0800;Merge pull request #5311 from thomaskeck:changelist/350107928
PiperOrigin-RevId: 354541671

==
==================
7bcc22df;jax authors;2021-01-29 06:12:54 -0800;Merge pull request #5553 from gnecula:tf_limits3
PiperOrigin-RevId: 354519310

==
==================
87122fc8;George Necula;2021-01-29 15:09:44 +0100;Update jax2tf.py
mypy fix
==

jax/experimental/jax2tf/jax2tf.py
==================
3c89de6e;George Necula;2021-01-29 12:48:56 +0100;[jax2tf] Add the JAX-not-implemented to the jax2tf limitations doc

==

jax/experimental/jax2tf/g3doc/jax_primitives_coverage.md
jax/experimental/jax2tf/g3doc/primitives_with_limited_support.md
jax/experimental/jax2tf/tests/jax2tf_limitations.py
jax/experimental/jax2tf/tests/jax_primitives_coverage_test.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
28dd00b0;Thomas Keck;2021-01-05 11:21:21 +0000;Adds support for is_leaf in tree_util.tree_map and tree_util.tree_multimap.

==

jax/tree_util.py
tests/tree_util_tests.py
==================
3fa950fe;George Necula;2021-01-29 10:52:29 +0100;Update jax2tf.py
Small fix for merge error.
==

jax/experimental/jax2tf/jax2tf.py
==================
9bd5ad55;jax authors;2021-01-29 01:49:38 -0800;Merge pull request #5551 from gnecula:tf_limits
PiperOrigin-RevId: 354490965

==
==================
8c35db78;George Necula;2021-01-29 10:44:54 +0100;Merge branch 'master' into changelist/330700645

==
==================
c2a32be2;George Necula;2021-01-29 10:13:49 +0100;[jax2tf] Update the limitations due to improvements in TF
TF now handles a few more ops for unsigned types.
Also igamma and igammac support for f16 anf bf16 were added to
JAX, but not yet to TF, hence the new limitations in TF.

==

jax/experimental/jax2tf/g3doc/jax_primitives_coverage.md
jax/experimental/jax2tf/g3doc/primitives_with_limited_support.md
jax/experimental/jax2tf/tests/jax2tf_limitations.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/tf_test_util.py
==================
580e107c;jax authors;2021-01-28 18:57:47 -0800;Merge pull request #5548 from jakevdp:fix-doc-sigs
PiperOrigin-RevId: 354445513

==
==================
8719609b;jax authors;2021-01-28 17:38:34 -0800;Merge pull request #5547 from skye:fix
PiperOrigin-RevId: 354434034

==
==================
ba9015a6;Jake VanderPlas;2021-01-28 17:01:20 -0800;Remove signatures from wrapped docstrings

==

jax/_src/numpy/util.py
==================
3d5d0737;jax authors;2021-01-28 15:56:40 -0800;Merge pull request #5545 from jakevdp:fix-doc
PiperOrigin-RevId: 354414046

==
==================
997e6efa;Skye Wanderman-Milne;2021-01-28 15:36:15 -0800;Improve error message when a reduction function returns an invalid return type.
Fixes #5536

Co-authored-by: Matthew Johnson <mattjj@google.com>

==

jax/_src/lax/lax.py
jax/interpreters/partial_eval.py
tests/lax_test.py
==================
af6da229;Jake VanderPlas;2021-01-28 15:20:02 -0800;DOC: fix some minor formatting issues

==

docs/CHANGELOG.rst
docs/jaxpr.rst
docs/pytrees.rst
jax/_src/image/scale.py
jax/_src/lax/lax.py
jax/_src/nn/functions.py
==================
543dcb37;jax authors;2021-01-28 09:29:57 -0800;Merge pull request #5527 from google:remove-soft-pmap
PiperOrigin-RevId: 354328027

==
==================
8a58ca6a;jax authors;2021-01-28 08:19:16 -0800;Merge pull request #5525 from google:pdot-tests4
PiperOrigin-RevId: 354316223

==
==================
014f9a86;Matthew Johnson;2021-01-26 19:38:40 -0800;implement soft_pmap in terms of xmap

==

jax/__init__.py
jax/_src/lax/parallel.py
jax/api.py
jax/experimental/maps.py
jax/interpreters/batching.py
jax/interpreters/pxla.py
tests/pmap_test.py
==================
9380e969;jax authors;2021-01-27 17:50:53 -0800;Merge pull request #5540 from google:ci-pytest-verbose
PiperOrigin-RevId: 354212566

==
==================
dbc4ad42;jax authors;2021-01-27 17:47:06 -0800;Merge pull request #5538 from jakevdp:fix-doc
PiperOrigin-RevId: 354212550

==
==================
db2298fa;Roy Frostig;2021-01-27 16:57:49 -0800;run CI pytest in verbose mode

==

.github/workflows/ci-build.yaml
==================
cbeb80e3;Jake VanderPlas;2021-01-27 16:02:39 -0800;DOC: add jax.experimental.maps to index

==

docs/jax.experimental.rst
==================
f1918f0b;James Bradbury;2021-01-27 15:13:30 -0800;[avals with names] Revise aval constructor call sites to use a new aval.update method
PiperOrigin-RevId: 354182876

==

jax/_src/lax/control_flow.py
jax/_src/lax/fft.py
jax/_src/lax/lax.py
jax/_src/lax/linalg.py
jax/_src/lax/parallel.py
jax/api.py
jax/core.py
jax/experimental/maps.py
jax/interpreters/batching.py
jax/interpreters/pxla.py
tests/custom_object_test.py
==================
537c3d5c;Matthew Johnson;2021-01-26 17:03:58 -0800;add systematic pdot vjp tests

==

tests/xmap_test.py
==================
7d9d1496;jax authors;2021-01-27 13:10:20 -0800;Merge pull request #5534 from cheshire:patch-1
PiperOrigin-RevId: 354155814

==
==================
6b75cc62;George Karpenkov;2021-01-27 11:59:53 -0800;Update jax2tf_limitations to update the list of integral dtypes for tf.pow
Update jax2tf_limitations to update the list of integral dtypes for tf.pow
==

jax/experimental/jax2tf/tests/jax2tf_limitations.py
==================
af76145a;jax authors;2021-01-27 03:15:25 -0800;Merge pull request #5505 from apaszke:xmap-docs
PiperOrigin-RevId: 354057550

==
==================
deb2afe3;jax authors;2021-01-27 02:06:53 -0800;Merge pull request #5521 from chr1sj0nes:changelist/345649004
PiperOrigin-RevId: 354049631

==
==================
10947403;jax authors;2021-01-26 20:47:13 -0800;Merge pull request #5528 from google:update-pypi
PiperOrigin-RevId: 354012572

==
==================
a9e5fabe;jax authors;2021-01-26 20:43:41 -0800;Merge pull request #5526 from google:issue5522
PiperOrigin-RevId: 354012448

==
==================
d2ae949b;Matthew Johnson;2021-01-26 20:19:09 -0800;update version and changelog for pypi

==

docs/CHANGELOG.rst
jax/version.py
==================
ff66c557;Matthew Johnson;2021-01-26 17:25:22 -0800;add axis_env argument to make_jaxpr
fixes #5522

==

jax/api.py
tests/api_test.py
==================
1fd1faa0;jax authors;2021-01-26 15:00:32 -0800;Merge pull request #5523 from sharadmv:custom-gradient-tuple
PiperOrigin-RevId: 353957596

==
==================
6061b097;Sharad Vikram;2021-01-26 12:39:35 -0800;Allow `jax.custom_gradient` to return vjp with singleton return value

==

jax/custom_derivatives.py
tests/api_test.py
==================
814c4ad7;jax authors;2021-01-26 12:56:05 -0800;Merge pull request #5490 from google:xeinsum
PiperOrigin-RevId: 353929996

==
==================
e2140bf6;jax authors;2021-01-26 12:40:50 -0800;Merge pull request #5426 from jakevdp:thinking-in-jax
PiperOrigin-RevId: 353926472

==
==================
eec2dbc2;jax authors;2021-01-26 12:37:24 -0800;Merge pull request #5512 from google:closure-convert-docs
PiperOrigin-RevId: 353926248

==
==================
737c1624;Matthew Johnson;2021-01-26 10:59:22 -0800;relax test tolerance on tpu

==

tests/xmap_test.py
==================
967f3ac7;Jake VanderPlas;2021-01-26 12:08:37 -0800;Add thinking_in_jax.ipynb

==

docs/index.rst
docs/notebooks/thinking_in_jax.ipynb
==================
83c80106;Adam Paszke;2021-01-25 15:44:41 +0000;Add a docstring for xmap
Note that it is highly aspirational in that no lax NumPy functions can
handle named axes at this point, but I'm hoping to add support for that
just this week.

I've also added a new docs page for `jax.experimental.maps` which is
hidden by default (but we can share the link to it with the alpha
users).

==

docs/jax.experimental.maps.rst
jax/experimental/maps.py
==================
93c61e4d;Roy Frostig;2021-01-26 09:44:48 -0800;import closure_convert at top module level

==

jax/__init__.py
==================
b633898e;Chris Jones;2020-12-04 12:06:32 +0000;[JAX-GPU] Use XLA AllToAll op on GPU (for supported configurations).

==

jax/_src/lax/parallel.py
==================
f4cf710f;George Necula;2021-01-26 03:36:07 -0800;Add support for sharded_jit conversion to jax2tf.
PiperOrigin-RevId: 353834475

==

jax/experimental/jax2tf/__init__.py
jax/experimental/jax2tf/jax2tf.py
==================
237f3ee4;jax authors;2021-01-25 19:56:16 -0800;Merge pull request #5509 from danieldjohnson:all_gather_to_unbatched
PiperOrigin-RevId: 353784844

==
==================
a8fc8b33;jax authors;2021-01-25 19:30:07 -0800;Merge pull request #5511 from lukaszlew:patch-2
PiperOrigin-RevId: 353781688

==
==================
2e19b1d1;jax authors;2021-01-25 19:21:58 -0800;Merge pull request #5383 from zhangqiaorjc:jax_cpp
PiperOrigin-RevId: 353780826

==
==================
7e155244;Qiao Zhang;2021-01-12 14:02:32 -0800;Add example code to save JAX program and run using C++ runtime.

==

examples/jax_cpp/BUILD
examples/jax_cpp/main.cc
examples/jax_cpp/prog.py
==================
4adc4362;Roy Frostig;2021-01-25 17:42:46 -0800;include closure_convert in generated docs

==

docs/jax.rst
==================
9dccf567;Łukasz Lew;2021-01-25 17:16:29 -0800;Clarify tracking
Clarify tracing a bit and use wording that does not suggest that JAX executed python program.
==

docs/jaxpr.rst
==================
15b95e3f;Daniel Johnson;2021-01-25 17:47:50 -0500;Use np.shape instead of assuming argument has a shape attr

==

jax/_src/lax/parallel.py
tests/batching_test.py
==================
84f55f87;jax authors;2021-01-25 14:38:28 -0800;Merge pull request #5508 from jakevdp:fix-sphinx
PiperOrigin-RevId: 353733345

==
==================
c6a1bba3;Daniel Johnson;2021-01-25 17:27:39 -0500;Add evaluation rule for all_gather.
This should only be called when an all_gather runs on arguments that
are not batch tracers, for instance when all_gather-ing a constant.

==

jax/_src/lax/parallel.py
tests/batching_test.py
==================
cfe934c0;Jake VanderPlas;2021-01-25 10:46:58 -0800;Fix some doc build warnings

==

docs/CHANGELOG.rst
docs/conf.py
docs/developer.rst
docs/index.rst
jax/_src/ops/scatter.py
jax/_src/scipy/linalg.py
==================
78650433;Daniel Johnson;2021-01-25 16:52:38 -0500;Improve batched collective rule for all_gather_p
When an all_gather references a vmapped axis, there is a particularly
simple way of implementing it: simply "forget" that the axis was mapped,
and return the full array. Conveniently, this doesn't require any
explicit broadcasting, and makes it possible to use out_axes=None with
the results.

==

jax/_src/lax/parallel.py
tests/batching_test.py
==================
f4b5ff9d;jax authors;2021-01-25 13:51:12 -0800;Merge pull request #5488 from jakevdp:x64-contextmanager
PiperOrigin-RevId: 353722592

==
==================
b5454613;Jake VanderPlas;2021-01-25 13:23:15 -0800;Add experimental context manager to enable/disable X64 mode

==

docs/CHANGELOG.rst
docs/jax.experimental.rst
jax/_src/util.py
jax/api.py
jax/dtypes.py
jax/experimental/__init__.py
jax/experimental/x64_context.py
jax/lib/xla_bridge.py
jax/linear_util.py
tests/x64_context_test.py
==================
136358cd;jax authors;2021-01-25 10:03:17 -0800;Merge pull request #5480 from pschuh:wrap-outs
PiperOrigin-RevId: 353670528

==
==================
13b921b3;jax authors;2021-01-25 07:16:25 -0800;Merge pull request #5465 from apaszke:xmap-replica-nesting
PiperOrigin-RevId: 353640436

==
==================
137321f3;Adam Paszke;2021-01-19 14:18:53 +0000;Restore support for nested xmaps when using the (standard) replica lowering
Fortunately this wasn't too difficult, as most of the code was already
there. The biggest issues were a lack of axis name substitution and
inability to handle multiple resource assignments for a single logical
axis.

I'm planning to add a more comprehensive test suite for this, but I'd
like to wait for the pdot test PR (#5459) to land first. It contains a
bunch of utilities that would come in handy.

==

jax/experimental/maps.py
tests/xmap_test.py
==================
802c7732;jax authors;2021-01-24 19:58:49 -0800;Merge pull request #5502 from jackd:testNorm-fix
PiperOrigin-RevId: 353565580

==
==================
f02f775a;jax authors;2021-01-24 19:55:15 -0800;Merge pull request #5500 from terhorst:poisson-cdf
PiperOrigin-RevId: 353565572

==
==================
f288cf49;Dominic Jack;2021-01-25 12:56:11 +1000;fixed testNorm

==

tests/linalg_test.py
==================
1524b821;Jonathan Terhorst;2021-01-24 16:15:31 +0000;add support for scipy.stats.poisson.cdf

==

jax/_src/scipy/stats/poisson.py
jax/scipy/stats/poisson.py
tests/scipy_stats_test.py
==================
b0f5ef4b;jax authors;2021-01-23 14:44:30 -0800;Merge pull request #5492 from google:revive-revive-leak-checker
PiperOrigin-RevId: 353440404

==
==================
a7bfebe4;Matthew Johnson;2021-01-23 14:17:22 -0800;improve leak checker flag description

==

jax/config.py
==================
9787894d;Matthew Johnson;2021-01-21 21:29:09 -0800;refactor batching transform logic, fix leak checks
See PR description in #5492 for details.

Co-authored-by: Peter Hawkins <phawkins@google.com>

==

jax/api.py
jax/core.py
jax/custom_derivatives.py
jax/interpreters/batching.py
jax/interpreters/pxla.py
tests/api_test.py
==================
203af451;Matthew Johnson;2021-01-19 18:38:53 -0800;revive the leak checker, as a debug mode
Co-authored-by: James Bradbury <jekbradbury@google.com>

==

jax/_src/lax/control_flow.py
jax/_src/util.py
jax/config.py
jax/core.py
jax/custom_derivatives.py
jax/interpreters/ad.py
jax/interpreters/batching.py
jax/interpreters/partial_eval.py
jax/interpreters/xla.py
jax/linear_util.py
tests/api_test.py
==================
bc3cd128;jax authors;2021-01-22 11:34:43 -0800;Merge pull request #5495 from hawkinsp:tokens
PiperOrigin-RevId: 353283976

==
==================
dd34d48f;Peter Hawkins;2021-01-22 10:57:33 -0500;Fix exception when tokens are used in AD.

==

jax/core.py
jax/interpreters/xla.py
tests/api_test.py
==================
9ccfc9fd;jax authors;2021-01-21 16:53:06 -0800;Merge pull request #5478 from jakevdp:fix-docstrings
PiperOrigin-RevId: 353133338

==
==================
7c67ec1b;jax authors;2021-01-21 15:24:31 -0800;Merge pull request #5477 from google:more-escaped-tracer-error-message-tweaks
PiperOrigin-RevId: 353115571

==
==================
6d2f8320;Matthew Johnson;2021-01-21 11:09:59 -0800;add xeinsum, an einsum for xmap (& einsum easter egg)
Co-authored-by: Adam Paszke <apaszke@google.com>

==

jax/_src/lax/parallel.py
jax/_src/numpy/lax_numpy.py
jax/lax/__init__.py
tests/xmap_test.py
==================
4a7b7df2;jax authors;2021-01-21 14:38:16 -0800;Merge pull request #5491 from google:pdot-tests3
PiperOrigin-RevId: 353105977

==
==================
c02d8041;Matthew Johnson;2021-01-18 10:02:24 -0800;add systematic pdot tests, utility functions
Run lots of tests with e.g.

```
env JAX_NUM_GENERATED_CASES=1000 python tests/xmap_test.py PDotTests
```

==

jax/_src/lax/parallel.py
tests/xmap_test.py
==================
7925a3a4;jax authors;2021-01-21 10:00:01 -0800;Merge pull request #5486 from jakevdp:finfo
PiperOrigin-RevId: 353042636

==
==================
60a87fd2;jax authors;2021-01-21 09:14:34 -0800;Merge pull request #5419 from jakevdp:int-power
PiperOrigin-RevId: 353033127

==
==================
f7267091;jax authors;2021-01-21 08:11:34 -0800;Merge pull request #5446 from gsp-27:master
PiperOrigin-RevId: 353021985

==
==================
fc258c39;Jake VanderPlas;2021-01-21 08:05:36 -0800;Make jnp.finfo a class and support bfloat16

==

jax/_src/numpy/lax_numpy.py
jax/dtypes.py
==================
988949f6;Peter Hawkins;2021-01-21 06:56:00 -0800;Move jax.bzl into correct location. Unbreaks build.
PiperOrigin-RevId: 353009344

==

jax/jax.bzl
==================
32de6ffc;Jean-Baptiste Lespiau;2021-01-21 01:14:56 -0800;Replace None with an object NoSharding.
This is to make the change to a C++ ShardingSpec easier.
See also https://github.com/google/jax/pull/5444

PiperOrigin-RevId: 352965689

==

jax/interpreters/pxla.py
tests/pmap_test.py
tests/xmap_test.py
==================
a9006206;jax authors;2021-01-20 21:15:05 -0800;Merge pull request #5482 from google:contributing-squash
PiperOrigin-RevId: 352937260

==
==================
df273c0d;Parker Schuh;2021-01-20 13:26:13 -0800;Refactor how the result processing code wraps the indexing information.
Convert `array_result_handler` and `avals_to_results_handler` to use
functools.partial and a callable class so that the sharding information
can be introspected instead of opaque lambdas.

==

jax/interpreters/pxla.py
==================
186c9739;Gaurav Pathak;2021-01-20 21:47:18 -0500;Added test for python scalar

==

tests/api_test.py
==================
160dfd34;Peter Hawkins;2021-01-20 17:35:30 -0800;Revert import path changes to examples/ and benchmarks/
PiperOrigin-RevId: 352911869

==

benchmarks/pmap_benchmark.py
examples/mnist_classifier.py
examples/mnist_classifier_fromscratch.py
examples/mnist_vae.py
==================
297250d5;Roy Frostig;2021-01-20 16:32:21 -0800;add a request for PR-squashing in contributing.md

==

CONTRIBUTING.md
==================
ffa05d1c;jax authors;2021-01-20 15:47:03 -0800;Merge pull request #5481 from jakevdp:doc-formatting
PiperOrigin-RevId: 352892385

==
==================
84e91d5f;Matthew Johnson;2021-01-20 10:56:13 -0800;add transformed fun src info to escaped tracer err
This change adds to the error message when we hit an escaped tracer. In
particular, it adds source info for the function that was transformed.

This change currently only applies to escaped `DynamicJaxprTracer`s
(arising from `jit`, `pmap`, `scan`, and other staging functions) and
not other traces. A natural follow-up would be to attach this
information to other traces.

Co-authored-by: Lena Martens <lenamartens@google.com>

==

jax/config.py
jax/core.py
==================
a0b12bba;Jake VanderPlas;2021-01-20 14:38:19 -0800;DOC: fix minor formatting issues

==

docs/jax.lax.rst
jax/experimental/loops.py
jax/tree_util.py
==================
9bdc2ecc;Peter Hawkins;2021-01-20 14:05:54 -0800;Consolidate build macros into a single jax.bzl file.
PiperOrigin-RevId: 352871429

==

jax/BUILD
jax/jax/jax.bzl
jaxlib/BUILD
==================
fe9a3e70;Jake VanderPlas;2021-01-20 13:40:26 -0800;util._wraps: correctly handle initial line indentation

==

jax/_src/numpy/util.py
==================
929a684a;Peter Hawkins;2021-01-20 12:43:00 -0800;Small cleanups to dependency structure.
PiperOrigin-RevId: 352853244

==

benchmarks/pmap_benchmark.py
examples/mnist_classifier.py
examples/mnist_classifier_fromscratch.py
examples/mnist_vae.py
jax/BUILD
jax/experimental/host_callback.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/lib/__init__.py
jaxlib/cuda_prng.py
jaxlib/cusolver.py
jaxlib/pocketfft.py
tests/jax_to_hlo_test.py
==================
e217a7bd;jax authors;2021-01-20 11:43:47 -0800;Merge pull request #5473 from hawkinsp:docs2
PiperOrigin-RevId: 352839545

==
==================
2991b040;Jake VanderPlas;2021-01-14 11:11:04 -0800;jnp.power: use integer_power path in all applicable cases

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
62e89cbd;jax authors;2021-01-20 08:45:06 -0800;Merge pull request #5213 from malmaud:changelist/346683050
PiperOrigin-RevId: 352800932

==
==================
8420ee20;jax authors;2021-01-20 08:21:02 -0800;Merge pull request #5472 from hawkinsp:build
PiperOrigin-RevId: 352797345

==
==================
4fdd029b;Peter Hawkins;2021-01-20 09:59:35 -0500;Clarify the CuDNN versions expected by jaxlib wheels.

==

README.md
==================
d5856384;jax authors;2021-01-20 06:46:44 -0800;Merge pull request #5470 from inailuig:fix-rocm-build
PiperOrigin-RevId: 352783431

==
==================
3bec4b33;Peter Hawkins;2021-01-20 09:38:55 -0500;Fix ABSL build dependencies of //jaxlib:handle_pool

==

jaxlib/BUILD
==================
5ced12f6;jax authors;2021-01-20 03:03:40 -0800;Merge pull request #5455 from chr1sj0nes:changelist/351545649
PiperOrigin-RevId: 352756095

==
==================
57405b0d;Clemens Giuliani;2021-01-20 10:49:29 +0100;fix building on ROCm

==

jaxlib/BUILD
==================
619bfd54;jax authors;2021-01-19 21:05:18 -0800;Merge pull request #5468 from google:issue5440
PiperOrigin-RevId: 352715439

==
==================
0f704514;Matthew Johnson;2021-01-19 19:08:23 -0800;add BatchTrace.process_custom_vjp_call
It was an oversight not to include this! Notice we have
BatchTrace.process_custom_jvp_call. In fact, we can use the same
function! We just needed the simplest possible post-process-call which
just peels and packages.

fixes #5440

Co-authored-by: Roy Frostig <frostig@google.com>

==

jax/interpreters/batching.py
tests/api_test.py
==================
34e798ff;jax authors;2021-01-19 17:01:47 -0800;Merge pull request #5466 from jakevdp:fix-integer-pow
PiperOrigin-RevId: 352685155

==
==================
0a89fc83;Jake VanderPlas;2021-01-19 15:42:40 -0800;integer_pow: fix jvp rule for y=0

==

jax/_src/lax/lax.py
==================
7acf521d;Jake VanderPlas;2021-01-19 15:42:18 -0800;integer_pow: fix translation rule for y=0

==

jax/_src/lax/lax.py
==================
d641e6cc;Matthew Johnson;2021-01-19 15:01:30 -0800;Revert part of #5319: don't use `traceback_util.path_starts` in `source_info_util.user_frame`.
The issue was that it incurs filesystem accesses while we're lowering to XLA, which can cause a significant slowdown.

PiperOrigin-RevId: 352662434

==

jax/_src/source_info_util.py
==================
9076008c;Jake VanderPlas;2021-01-19 11:36:39 -0800;lax.integer_pow(): always bind the primitive

==

jax/_src/lax/lax.py
==================
c0c4843b;Jonathan Malmaud;2020-12-10 02:29:40 +0000;Add support for 'preferred_element_type' keyword arg in `dot` and `dot_general`.
XLA recently added support for this parameter to xops.DotGeneral. It's an optional parameter that controls the accumulation type used by the dot operation.

This is useful for eg quantized ANNs, where you might want to do matrix multiples with int8 tensors and get back an int32 tensor instead of an int8 tensor that suffers from severe overflow. Note it's not sufficient in this case to cast the inputs to 'dot' to int32 beforehand and rely on the default output dtype inference, since backend devices might have an accelerated path for int8*int8->int32 matmuls and we want that explicitly represented in the XLA.

Note because XLA still doesn't support integer dots on the CPU backend, that use case can't tested with a CPU-only test at the moment.

==

jax/_src/lax/lax.py
jax/_src/lax/parallel.py
jax/experimental/jax2tf/jax2tf.py
tests/lax_test.py
==================
2d3f33d9;Gaurav Pathak;2021-01-19 09:49:28 -0500;fix float32

==

tests/api_test.py
==================
9260f2c7;Gaurav Pathak;2021-01-19 09:12:11 -0500;regex check for each test case

==

jax/api.py
tests/api_test.py
==================
b4900ee7;jax authors;2021-01-19 04:16:28 -0800;Merge pull request #5453 from apaszke:xmap-vmap
PiperOrigin-RevId: 352537923

==
==================
4b48c7f4;Chris Jones;2021-01-13 10:33:03 +0000;Use XLA AllGather op for GPU (attempt 2).
This is an expansion of the first, rolled-back attempt (https://github.com/google/jax/pull/5260), this time with auto-diff and batching rules that some users are relying on.

My benchmarks suggest a speed-up of ~2-2.5x for larger inputs.

==

jax/_src/lax/parallel.py
jax/experimental/jax2tf/jax2tf.py
tests/pmap_test.py
==================
0b57a16e;jax authors;2021-01-18 21:02:35 -0800;Merge pull request #5462 from google:error-message-tweak2
PiperOrigin-RevId: 352488512

==
==================
47f7cd46;Matthew Johnson;2021-01-18 20:37:12 -0800;avoid printing double periods in error messages

==

jax/core.py
==================
bd9ac93b;Gaurav Pathak;2021-01-18 23:21:33 -0500;Added changes requested

==

jax/api.py
tests/api_test.py
==================
772a6da6;jax authors;2021-01-18 19:56:19 -0800;Merge pull request #5319 from google:source-line-info-on-escaped-tracer-errors
PiperOrigin-RevId: 352482449

==
==================
886b26ff;Matthew Johnson;2021-01-05 14:52:54 -0800;add source line info to more escaped tracer errors
This extra source info is still only on jaxpr staging tracers, but those
seem to be the most common culprits. I moved the `_line_info` attribute
to the base Tracer class in core.py in anticipation of populating it for
more traces than just DynamicJaxprTrace, but I'll leave that extension
to follow-up.

I adapted the main escaped tracer error messages in core.py, and also
slightly generalized and debugged source_info_util functions (thanks for
explaining the path prefix bug, @froystig !).

==

jax/_src/source_info_util.py
jax/core.py
jax/interpreters/partial_eval.py
tests/api_test.py
tests/errors_test.py
==================
c2871807;Adam Paszke;2021-01-18 19:40:46 +0100;Update jax/experimental/maps.py
Co-authored-by: Matthew Johnson <mattjj@google.com>
==

jax/experimental/maps.py
==================
6d2b307c;Adam Paszke;2021-01-18 10:42:06 +0000;Make it possible to vmap xmapped functions
Or perhaps more importantly make it possible to nest xmaps that don't
specify any `axis_resources`. The math is a little tricky, so I've added
a fairly strong test that enumerates a wide range of potential ways of
interleaving vmapped and xmapped axes in both inputs and the output.
Thanks to that, I've actually caught one very subtle bug in the dynamic
tracing rule for xmap (sorting by dimension names instead of positional
axes).

==

jax/experimental/maps.py
tests/xmap_test.py
==================
eeb5c42d;jax authors;2021-01-18 06:12:07 -0800;Merge pull request #5452 from gnecula:tf_limit2
PiperOrigin-RevId: 352400540

==
==================
d77a9412;George Necula;2021-01-18 15:19:01 +0200;[jax2tf] Reflect in the limitations that add is now implemented for uint32 in TF

==

jax/experimental/jax2tf/g3doc/primitives_with_limited_support.md
jax/experimental/jax2tf/tests/jax2tf_limitations.py
==================
040d268c;jax authors;2021-01-18 05:03:27 -0800;Merge pull request #5451 from gnecula:tf_jit_compile
PiperOrigin-RevId: 352392391

==
==================
04628c9e;jax authors;2021-01-18 04:41:50 -0800;Merge pull request #5435 from apaszke:xmap-parameterized
PiperOrigin-RevId: 352389890

==
==================
6d2b976f;George Necula;2021-01-18 14:41:42 +0200;[jax2tf] Start using jit_compile instead of the deprecated experimental_compile

==

jax/experimental/jax2tf/examples/saved_model_lib.py
jax/experimental/jax2tf/examples/saved_model_main.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/jax2tf_limitations.py
jax/experimental/jax2tf/tests/shape_poly_test.py
jax/experimental/jax2tf/tests/tf_test_util.py
==================
449c2bc6;jax authors;2021-01-18 03:44:38 -0800;Merge pull request #4804 from marcvanzee:patch-1
PiperOrigin-RevId: 352382502

==
==================
6bf63492;George Necula;2021-01-18 03:37:55 -0800;Copybara import of the project:
--
781492e0120ec915f9fdc83479884908f59d113d by George Necula <gcnecula@gmail.com>:

[jax2tf] Update limitations

Some bugs were fixed on the TF-side, and we can remove
some limitations.

COPYBARA_INTEGRATE_REVIEW=https://github.com/google/jax/pull/5449 from gnecula:jax2tf_limit 781492e0120ec915f9fdc83479884908f59d113d
PiperOrigin-RevId: 352381535

==

jax/experimental/jax2tf/g3doc/primitives_with_limited_support.md
jax/experimental/jax2tf/tests/jax2tf_limitations.py
jax/experimental/jax2tf/tests/primitive_harness.py
==================
a1e182cd;Marc van Zee;2021-01-18 10:29:16 +0100;Updates comment

==
==================
166e1296;Adam Paszke;2020-12-11 11:57:22 +0000;Clean up xmap tests
Move `pdot` tests to a separate class. Automatically run all regular
xmap tests with both the `pmap`-style lowering and `sharded_jit`-style
lowering.

==

tests/xmap_test.py
==================
67b5af97;George Necula;2021-01-18 01:59:25 -0800;Copybara import of the project:
--
9be685946252edc67c2c28261b100b9aee68614a by George Necula <gcnecula@gmail.com>:

Change the translation rule for lax.nextafter_p to ensure
broadcasting during translation.

Previously, this was the only binary arithmetic primitive that
did not have broadcasting during translation. Trying to use it
with non-equal shapes resulted in the error:

```
 RuntimeError: Internal: RET_CHECK failure
(external/org_tensorflow/tensorflow/compiler/xla/client/xla_builder.cc:748)
non_scalar_shape.value().dimensions() == shape->dimensions() Unimplemented
implicit broadcast.:
       This is a bug in JAX's shape-checking rules; please report it!
```

COPYBARA_INTEGRATE_REVIEW=https://github.com/google/jax/pull/5448 from gnecula:nextafter 9be685946252edc67c2c28261b100b9aee68614a
PiperOrigin-RevId: 352367039

==

jax/_src/lax/lax.py
jax/experimental/jax2tf/g3doc/jax_primitives_coverage.md
jax/experimental/jax2tf/tests/primitive_harness.py
==================
4dd50b81;Gaurav Pathak;2021-01-17 21:16:28 -0500;removed whitespace causing flake failing

==

tests/api_test.py
==================
a47abe06;Gaurav Pathak;2021-01-17 00:35:45 -0500;Added check for shapes of arguments in jvp, resolves issue #5226

==

jax/api.py
tests/api_test.py
==================
cfddde71;jax authors;2021-01-16 11:33:30 -0800;Merge pull request #5412 from d11:changelist/351757350
PiperOrigin-RevId: 352194069

==
==================
a8b6b092;jax authors;2021-01-16 11:29:27 -0800;Merge pull request #5224 from MikeInnes:check-infs
PiperOrigin-RevId: 352193583

==
==================
1f112c25;jax authors;2021-01-16 11:25:50 -0800;Merge pull request #5376 from bchetioui:legacy_bfloat16_conversion
PiperOrigin-RevId: 352193573

==
==================
13defc21;jax authors;2021-01-16 08:45:43 -0800;Merge pull request #5437 from jakevdp:doc-warnings
PiperOrigin-RevId: 352183004

==
==================
77f02987;George Necula;2021-01-16 13:33:20 +0200;Merge branch 'master' into legacy_bfloat16_conversion

==
==================
6f04c53e;George Necula;2021-01-16 13:12:45 +0200;Update test-requirements.txt

==

build/test-requirements.txt
==================
017e15d2;George Necula;2021-01-16 10:56:52 +0200;Update api.py

==

jax/api.py
==================
cff15225;George Necula;2021-01-16 08:04:02 +0200;Update api.py

==

jax/api.py
==================
503d3e81;Matthew Johnson;2021-01-15 17:36:49 -0800;fix type annotation
PiperOrigin-RevId: 352115007

==

jax/interpreters/partial_eval.py
==================
2d73dc3d;jax authors;2021-01-15 15:12:40 -0800;Merge pull request #5441 from jakevdp:fix-rst
PiperOrigin-RevId: 352092624

==
==================
e1ff14e5;Jake VanderPlas;2021-01-15 10:06:39 -0800;Dedent wrapped doc sections individually

==

jax/_src/numpy/util.py
==================
0829d9e8;jax authors;2021-01-15 15:00:50 -0800;Merge pull request #5315 from jakevdp:py39-test
PiperOrigin-RevId: 352090669

==
==================
127ac6a7;jax authors;2021-01-15 14:40:18 -0800;Merge pull request #5439 from hawkinsp:workspace
PiperOrigin-RevId: 352087110

==
==================
ef092691;Jake VanderPlas;2021-01-15 14:21:13 -0800;Cleanup: fix some sphinx warnings

==

docs/CHANGELOG.rst
docs/conf.py
docs/jax.experimental.rst
==================
0f76882b;Jake VanderPlas;2021-01-05 11:03:37 -0800;CI: use python 3.9 for numpy dispatch tests

==

.github/workflows/ci-build.yaml
==================
e5fcba5d;jax authors;2021-01-15 13:43:56 -0800;Merge pull request #5438 from skye:version
PiperOrigin-RevId: 352075722

==
==================
f78cefb0;Peter Hawkins;2021-01-15 16:22:48 -0500;Update WORKSPACE file to comply with TensorFlow's downstream WORKSPACE requirements.
See:
https://groups.google.com/a/tensorflow.org/g/developers/c/F8-6HPanpnw

==

WORKSPACE
==================
7c2454e9;Skye Wanderman-Milne;2021-01-15 12:55:15 -0800;Update jaxlib version, minimum jaxlib version, readme, and changelog.
Bumping the min jaxlib version to support https://github.com/google/jax/pull/5213.

==

README.md
build/test-requirements.txt
docs/CHANGELOG.rst
jax/lib/__init__.py
jaxlib/version.py
==================
62862267;jax authors;2021-01-15 06:31:42 -0800;Merge pull request #5394 from hawkinsp:cuda
PiperOrigin-RevId: 351997200

==
==================
0e932aeb;George Necula;2021-01-15 14:40:37 +0200;Update debug_nans_test.py
Fix typo
==

tests/debug_nans_test.py
==================
0de20c62;George Necula;2021-01-15 13:18:54 +0100;Merge branch 'master' into check-infs

==
==================
acd6bc04;jax authors;2021-01-15 03:44:04 -0800;Merge pull request #5362 from apaszke:xmap-multiple-calls
PiperOrigin-RevId: 351977936

==
==================
00007a22;jax authors;2021-01-15 03:40:17 -0800;Merge pull request #5432 from gnecula:tf_limit2
PiperOrigin-RevId: 351977838

==
==================
ca27c83c;George Necula;2021-01-15 12:06:40 +0200;[jax2tf] Cleanup the way jax2tf limitations are specified
Now each limitation is very explicit about the modes it applies
to, with the default being all modes. There is no more special
casing for TPUs.

==

jax/experimental/jax2tf/README.md
jax/experimental/jax2tf/g3doc/jax_primitives_coverage.md
jax/experimental/jax2tf/g3doc/jax_primitives_coverage.md.template
jax/experimental/jax2tf/g3doc/primitives_with_limited_support.md
jax/experimental/jax2tf/g3doc/primitives_with_limited_support.md.template
jax/experimental/jax2tf/tests/jax2tf_limitations.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/tf_test_util.py
==================
cc14cbe1;jax authors;2021-01-14 23:54:35 -0800;Merge pull request #4334 from gnecula:tf_uint_add
PiperOrigin-RevId: 351953084

==
==================
66ad3821;George Necula;2020-09-18 11:59:20 +0300;[jax2tf] Add support for Add for uint32

==

jax/experimental/jax2tf/g3doc/primitives_with_limited_support.md
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/jax2tf_limitations.py
==================
89e8823e;jax authors;2021-01-14 17:38:33 -0800;Merge pull request #5431 from SamuelMarks:args-for-google-style-docstrings
PiperOrigin-RevId: 351912203

==
==================
cf9a9482;jax authors;2021-01-14 17:17:12 -0800;Merge pull request #5428 from jakevdp:fix-sphinx
PiperOrigin-RevId: 351908710

==
==================
9a4b542a;jax authors;2021-01-14 17:13:34 -0800;Merge pull request #5427 from jakevdp:fix-wrapped-doc
PiperOrigin-RevId: 351908633

==
==================
6e458e22;Samuel Marks;2021-01-15 11:49:19 +1100;[*.py] Rename "Arguments:" to "Args:"

==

jax/_src/lax/control_flow.py
jax/_src/lax/lax.py
jax/interpreters/xla.py
jax/linear_util.py
==================
3ae68b66;Jake VanderPlas;2021-01-14 14:40:14 -0800;Remove indentation from wrapped docstrings

==

jax/_src/numpy/util.py
==================
16568925;Jake VanderPlas;2021-01-14 14:38:39 -0800;Fix RST annotations

==

docs/jax.scipy.rst
==================
c5d6281b;jax authors;2021-01-14 16:25:33 -0800;Merge pull request #5430 from skye:fix
PiperOrigin-RevId: 351900444

==
==================
0927c291;Skye Wanderman-Milne;2021-01-14 16:05:14 -0800;Disable another test that requires omnistaging

==

tests/host_callback_test.py
==================
f79182cd;jax authors;2021-01-14 15:57:21 -0800;Merge pull request #5429 from jakevdp:disable-broken-test
PiperOrigin-RevId: 351894661

==
==================
26262cb8;Jake VanderPlas;2021-01-14 15:31:53 -0800;disable test that requires omnistaging

==

tests/host_callback_test.py
==================
670f537f;jax authors;2021-01-14 14:36:52 -0800;Merge pull request #5425 from hawkinsp:typing
PiperOrigin-RevId: 351878976

==
==================
1abf383f;Peter Hawkins;2021-01-14 17:09:21 -0500;Remove type overloads for tree_map and tree_multimap.
These overloads lead pytype to infer incorrect types for code like this:

```
from typing import Any
import jax.tree_util

def bar(x: Any) -> str:
  return repr(x)
reveal_type(jax.tree_util.tree_map(bar, [2, 3, 4]))
```

which deduces `str` when the output is `List[str]`.

==

jax/tree_util.py
==================
500849d9;jax authors;2021-01-14 14:00:45 -0800;Merge pull request #5424 from skye:workspace
PiperOrigin-RevId: 351871820

==
==================
62b864a6;Skye Wanderman-Milne;2021-01-14 13:38:17 -0800;Update WORKSPACE and jaxlib version to 0.1.59

==

WORKSPACE
jaxlib/version.py
==================
6e197749;jax authors;2021-01-14 12:47:57 -0800;Merge pull request #5423 from hawkinsp:typed
PiperOrigin-RevId: 351857564

==
==================
f13a63fe;jax authors;2021-01-14 12:20:21 -0800;Merge pull request #5422 from gnecula:tap_no_args
PiperOrigin-RevId: 351851818

==
==================
a31bfa32;jax authors;2021-01-14 12:17:03 -0800;Merge pull request #5413 from gnecula:loops_pytrees
PiperOrigin-RevId: 351851732

==
==================
328ddfca;Peter Hawkins;2021-01-14 15:08:53 -0500;Add py.typed to setup.py for PEP 561 compliance.

==

setup.py
==================
8275da24;George Necula;2021-01-14 11:53:34 -0800;[jax2tf] Adjusting test tolerances
PiperOrigin-RevId: 351846168

==

jax/experimental/jax2tf/tests/jax2tf_limitations.py
jax/experimental/jax2tf/tests/jax_primitives_coverage_test.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
02466a34;jax authors;2021-01-14 11:42:32 -0800;Merge pull request #5421 from hawkinsp:jaxlib
PiperOrigin-RevId: 351843509

==
==================
042aae73;George Necula;2021-01-14 21:35:42 +0200;[host_callback] Fix bug when id_tap takes no arguments but has a result.
Fixes: #5414

==

jax/experimental/host_callback.py
tests/host_callback_test.py
==================
ca920fac;jax authors;2021-01-14 11:26:55 -0800;Merge pull request #5420 from hawkinsp:xla
PiperOrigin-RevId: 351840070

==
==================
f1df104f;Peter Hawkins;2021-01-14 14:21:01 -0500;Remove some old jaxlib compatibility code.

==

jax/lib/__init__.py
==================
3416d208;Peter Hawkins;2021-01-14 14:17:26 -0500;Update XLA.

==

WORKSPACE
==================
555a215c;George Necula;2021-01-14 14:11:52 +0100;[loops] Extend loops with support for pytrees
Also improve error checking and error messages.

==

docs/CHANGELOG.rst
jax/experimental/loops.py
tests/loops_test.py
==================
66f3deb9;Adam Paszke;2021-01-11 10:44:00 +0000;Make xmapped functions with no axis resources callable more than once
When no XLA lowering was involved (i.e. when using a purely vectorized
schedule), we used to return `f.call_wrapped` as the xmapped function.
This obviously didn't end well when someone tried to call it multiple
times, which this patch should fix.

==

jax/experimental/maps.py
tests/xmap_test.py
==================
b1f1e316;Peter Hawkins;2021-01-14 07:15:18 -0800;Disable a JAX jit test that fails with the released Jaxlib 0.1.58 (which appears to have xla_extension version number 2). Bump the XLA client version number.
PiperOrigin-RevId: 351793996

==

tests/jax_jit_test.py
==================
aef5909a;Dan Horgan;2021-01-14 05:13:36 -0500;Fix host_callback when there are non-local devices.
In combination with a recent change in the outfeed_receiver in the XLA
repository:
https://github.com/tensorflow/tensorflow/commit/ed2134ae4327e1e09ed3808e748489405a845382
this allows host_callback to work correctly in a multi-host TPU setup.

In a multi-host TPU setup we have a situation where not all devices are
local.  However, it is only actually possible to obtain outfeed data
from local devices, in general. Prior to the XLA change linked above,
the presence of non-local devices would result in the outfeed_receiver
trying to obtain outfeed data for these, which would immediately error
(e.g. "Invalid argument: Device TPU_10(host=0,(1,1,0,0)) is not a local
device."). With the XLA change, this error no longer occurs, but there
is still a problem because host_callback currently assumes all devices
are listening for outfeed, rather than just the local ones - e.g.
barrier_wait would wait for more outfeeds that are actually obtainable,
in the multi-host case. This change fixes that issue and allows id_tap
and similar to work as expected.

==

jax/experimental/host_callback.py
==================
ad3188fb;jax authors;2021-01-13 17:36:23 -0800;Merge pull request #5404 from jakevdp:tile-int
PiperOrigin-RevId: 351700385

==
==================
65720cad;jax authors;2021-01-13 16:43:38 -0800;Merge pull request #5400 from levskaya:pdot_fix
PiperOrigin-RevId: 351691584

==
==================
8fe1ae0d;jax authors;2021-01-13 16:36:28 -0800;Merge pull request #5396 from google:colab-tpu-os
PiperOrigin-RevId: 351690416

==
==================
26f6c149;jax authors;2021-01-13 16:18:00 -0800;Merge pull request #5403 from jakevdp:lax-reduce-validation
PiperOrigin-RevId: 351686922

==
==================
a35f8833;Jake VanderPlas;2021-01-13 16:09:43 -0800;Support general int axes in jnp.tile()

==

jax/_src/numpy/lax_numpy.py
==================
faeb2764;jax authors;2021-01-13 14:54:45 -0800;Merge pull request #5402 from jakevdp:reduction-dims-int
PiperOrigin-RevId: 351670871

==
==================
14fc5ce0;Jake VanderPlas;2021-01-13 14:16:54 -0800;Validate axes values in reduce_op_shape_rule

==

jax/_src/lax/lax.py
==================
a055b57a;jax authors;2021-01-13 13:53:50 -0800;Merge pull request #5398 from jakevdp:reshape-int
PiperOrigin-RevId: 351658947

==
==================
bb1a0516;Jake VanderPlas;2021-01-13 13:41:21 -0800;Support numpy int in reduction axis

==

jax/_src/numpy/lax_numpy.py
==================
9c2aed32;jax authors;2021-01-13 13:02:53 -0800;Add # pytype: disable=import-error to a couple of import statements to allow --cpu=ppc builds (the imported modules aren't currently linked into jaxlib when building for ppc).
PiperOrigin-RevId: 351648541

==

jax/lib/__init__.py
==================
2ca247f4;Anselm Levskaya;2021-01-13 12:52:28 -0800;Fix pdot translation rule.
This concerns the direct pdot translation rule, which is not used
during spmd lowering.

==

jax/_src/lax/parallel.py
tests/xmap_test.py
==================
65a326b6;Jake VanderPlas;2021-01-13 12:03:40 -0800;Make x.reshape() error on non-integers

==

jax/_src/numpy/lax_numpy.py
==================
bf2a5fc2;jax authors;2021-01-13 12:02:28 -0800;Merge pull request #5397 from skye:fix
PiperOrigin-RevId: 351636140

==
==================
599d65c5;Skye Wanderman-Milne;2021-01-13 11:50:46 -0800;Use py3.6-friendly subprocess.run invocation in build_wheel.py

==

build/build_wheel.py
==================
2f3f37a7;jax authors;2021-01-13 11:29:05 -0800;Merge pull request #5333 from jakevdp:empty-pinv
PiperOrigin-RevId: 351628038

==
==================
1e2c5551;James Bradbury;2021-01-13 11:07:50 -0800;fix dropped import

==

cloud_tpu_colabs/Lorentz_ODE_Solver.ipynb
==================
91872497;Jake VanderPlas;2021-01-13 10:39:00 -0800;Support empty inputs in jnp.linalg.svd() and jnp.linalg.pinv()

==

jax/_src/lax/linalg.py
jax/_src/numpy/linalg.py
tests/linalg_test.py
==================
cacda5d1;jax authors;2021-01-13 10:37:36 -0800;Merge pull request #5342 from hawkinsp:segmentsum
PiperOrigin-RevId: 351616950

==
==================
dbe9ff5f;jax authors;2021-01-13 09:29:40 -0800;Merge pull request #5393 from inailuig:rocm-fix-svd
PiperOrigin-RevId: 351602419

==
==================
9ffe0099;Peter Hawkins;2021-01-07 11:17:12 -0500;Change segment_sum to drop out-of-bounds indices rather than wrap them.
This is a breaking change.

==

docs/CHANGELOG.rst
jax/_src/numpy/lax_numpy.py
jax/_src/ops/scatter.py
tests/lax_numpy_indexing_test.py
==================
5747c915;Peter Hawkins;2021-01-13 10:48:43 -0500;Update CUDA installation instructions.

==

README.md
==================
4a7c9bb8;jax authors;2021-01-13 07:46:10 -0800;Merge pull request #4711 from NeilGirdhar:annotations
PiperOrigin-RevId: 351584817

==
==================
8dbb406e;Neil Girdhar;2020-10-26 23:19:33 -0400;Improve type annotations
* Add py.typed, which makes type annotations available to users.
* Annotate register_pytree_node, tree_map, tree_multimap, and tree_reduce.
* Add a type annotation overload for vjp
* Annotate jax.scipy.special.
* Annotate lax.scan.

==

jax/_src/lax/control_flow.py
jax/_src/nn/functions.py
jax/api.py
jax/py.typed
jax/tree_util.py
==================
82b3bacd;Clemens Giuliani;2021-01-13 15:55:14 +0100;fix header guard typo

==

jaxlib/rocm_gpu_kernel_helpers.h
==================
ce84bdb8;Clemens Giuliani;2020-12-19 23:45:24 +0000;fix svd on ROCm

==

jax/_src/lax/linalg.py
jaxlib/rocsolver.py
==================
8d9ace23;jax authors;2021-01-13 06:14:00 -0800;Merge pull request #5225 from frederikwilde:complex-svd-jvp-rule
PiperOrigin-RevId: 351571060

==
==================
f443e191;Frederik Wilde;2020-12-11 13:29:35 +0100;JVP rule for SVD works now for complex input.

==

jax/_src/lax/linalg.py
tests/linalg_test.py
==================
7f30d23d;jax authors;2021-01-13 02:26:35 -0800;Merge pull request #5390 from gnecula:call_refactor
PiperOrigin-RevId: 351544932

==
==================
f13e4ee0;jax authors;2021-01-12 23:14:48 -0800;Merge pull request #5387 from google:issue912
PiperOrigin-RevId: 351520745

==
==================
99c03ac7;George Necula;2021-01-13 07:56:31 +0100;[host_callback] Refactor to merge the implementations of id_tap and call
Join the implementation of the id_tap_p and outside_call_p primitives, by
adding special casing for the latter to implement the identity. This
makes id_print and id_tap special cases of call.

No user-visible changes.

==

jax/experimental/host_callback.py
tests/host_callback_test.py
==================
304685a1;Matthew Johnson;2021-01-12 19:37:19 -0800;allow vmapped function to accept kwargs
Arguments passed as keywords are always batched along their leading
axis. The in_tree specification must correspond to arguments passed
positionally.

This brings vmap in line with pmap. That is, pmap already followed this
convention for arguments passed via keywords. Consistency is good!

I had to adapt some utility functions so as not to change the error
messages raised. In particular, we have tests for vmap error messages
which report the in_axes and argument tree structure; naively including
keyword arguments changed those error messages. The error messages are
worth preserving. This change also brought the pmap error messages in
line with the vmap ones.

I also did some 80char wrapping of lines and docstring updating.

Fixes #912. Another user had the same issue and reported the same
expected behavior.

==

jax/api.py
jax/api_util.py
tests/batching_test.py
==================
628d84ea;jax authors;2021-01-12 20:12:57 -0800;Merge pull request #5203 from jblespiau:changelist/347717957
PiperOrigin-RevId: 351501962

==
==================
5541c481;Matthew Johnson;2021-01-12 19:49:57 -0800;Merge branch 'master' into changelist/347717957

==
==================
92c993af;Jean-Baptiste Lespiau;2021-01-12 15:30:14 -0800;Add a function to get the signature associated to an argument.
For the C++ jax.jit, we were able to first perform the transfer, and then inspect the result to know what the dtype and shape are.
However, for pmap, we don't necessarily know how to transfer the arguments, before having inspected the signature and retrieved the compiled executable & sharding_sec.

So for pmap, we will do explicitly the "abstractify" and the "shard_args/device_put" steps.

PiperOrigin-RevId: 351461953

==

tests/jax_jit_test.py
==================
47f254d2;jax authors;2021-01-12 13:46:52 -0800;Copybara import of the project:
--
474fdfcde05b4e5f17cfcb087a832d37c41ddffe by Chris Jones <cjfj@google.com>:

[JAX] Use XLA AllGather op for GPU (when supported).

PiperOrigin-RevId: 351440599

==

jax/_src/lax/parallel.py
jax/experimental/jax2tf/jax2tf.py
==================
6bc14690;jax authors;2021-01-12 12:46:48 -0800;Merge pull request #5373 from jakevdp:reshape-int
PiperOrigin-RevId: 351427796

==
==================
30f73f82;Jean-Baptiste Lespiau;2021-01-12 12:26:26 -0800;Add support for more numpy types, and use a map-lookup design.
PiperOrigin-RevId: 351424260

==

tests/dtypes_test.py
tests/jax_jit_test.py
==================
7c728f38;jax authors;2021-01-12 12:22:49 -0800;Merge pull request #5371 from adarob:static-shard
PiperOrigin-RevId: 351423476

==
==================
959a0cc3;jax authors;2021-01-12 10:41:00 -0800;Merge pull request #5260 from chr1sj0nes:changelist/347411509
PiperOrigin-RevId: 351401368

==
==================
c42fc286;jax authors;2021-01-12 08:40:36 -0800;Merge pull request #5379 from hawkinsp:jaxrelease2
PiperOrigin-RevId: 351377807

==
==================
994db378;Peter Hawkins;2021-01-12 09:45:53 -0500;Release jax 0.2.8.

==

docs/CHANGELOG.rst
jax/version.py
==================
474fdfcd;Chris Jones;2020-12-14 18:11:45 +0000;[JAX] Use XLA AllGather op for GPU (when supported).

==

jax/_src/lax/parallel.py
jax/experimental/jax2tf/jax2tf.py
==================
52a914a8;Benjamin Chetioui;2021-01-12 10:42:33 +0100;[jax2tf] Remove legacy bfloat16 conversion code.

==

build/test-requirements.txt
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/tf_test_util.py
jax/lib/__init__.py
==================
1ecce28b;Jake VanderPlas;2021-01-11 17:08:57 -0800;Support numpy integers in arr.reshape()

==

jax/_src/numpy/lax_numpy.py
==================
3ac809ed;Peter Hawkins;2021-01-11 14:20:32 -0800;[JAX] Move jax.util to jax._src_util.
PiperOrigin-RevId: 351234602

==

benchmarks/benchmark.py
benchmarks/pmap_benchmark.py
docs/notebooks/Writing_custom_interpreters_in_Jax.ipynb
jax/__init__.py
jax/_src/lax/control_flow.py
jax/_src/lax/fft.py
jax/_src/lax/lax.py
jax/_src/lax/linalg.py
jax/_src/lax/other.py
jax/_src/lax/parallel.py
jax/_src/nn/initializers.py
jax/_src/numpy/lax_numpy.py
jax/_src/numpy/linalg.py
jax/_src/numpy/vectorize.py
jax/_src/ops/scatter.py
jax/_src/random.py
jax/_src/scipy/ndimage.py
jax/_src/scipy/sparse/linalg.py
jax/_src/traceback_util.py
jax/_src/util.py
jax/ad_util.py
jax/api.py
jax/api_util.py
jax/core.py
jax/custom_derivatives.py
jax/dtypes.py
jax/experimental/callback.py
jax/experimental/doubledouble.py
jax/experimental/host_callback.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/shape_poly_test.py
jax/experimental/jet.py
jax/experimental/loops.py
jax/experimental/maps.py
jax/experimental/ode.py
jax/experimental/optimizers.py
jax/flatten_util.py
jax/interpreters/ad.py
jax/interpreters/batching.py
jax/interpreters/invertible_ad.py
jax/interpreters/masking.py
jax/interpreters/partial_eval.py
jax/interpreters/pxla.py
jax/interpreters/sharded_jit.py
jax/interpreters/xla.py
jax/jaxpr_util.py
jax/lazy.py
jax/lib/xla_bridge.py
jax/linear_util.py
jax/numpy/__init__.py
jax/numpy/fft.py
jax/numpy/linalg.py
jax/test_util.py
jax/tree_util.py
jax/util.py
tests/api_test.py
tests/batching_test.py
tests/core_test.py
tests/generated_fun_test.py
tests/lax_autodiff_test.py
tests/lax_control_flow_test.py
tests/lax_numpy_indexing_test.py
tests/lax_numpy_test.py
tests/lax_test.py
tests/lax_vmap_test.py
tests/masking_test.py
tests/pmap_test.py
tests/scipy_ndimage_test.py
tests/sharded_jit_test.py
tests/xmap_test.py
==================
bba98a24;Matthew Johnson;2021-01-11 13:56:30 -0800;Re-enable test.
PiperOrigin-RevId: 351229281

==

tests/random_test.py
==================
a87978f0;David Majnemer;2021-01-11 12:23:06 -0800;Enable more TPU tests
PiperOrigin-RevId: 351210210

==

tests/batching_test.py
tests/lax_numpy_test.py
==================
842be1cc;Adam Roberts;2021-01-11 13:55:24 -0500;Rename 'static_broadcasted_argnums' to 'static_argnums'.

==

jax/interpreters/sharded_jit.py
tests/sharded_jit_test.py
==================
6691e4a9;Adam Roberts;2021-01-11 13:37:10 -0500;Add support for 'static_broadcasted_args' in 'sharded_jit'.

==

jax/interpreters/sharded_jit.py
tests/sharded_jit_test.py
==================
d9cd5e31;jax authors;2021-01-11 10:01:27 -0800;Merge pull request #5369 from skye:workspace
PiperOrigin-RevId: 351177003

==
==================
345267be;Skye Wanderman-Milne;2021-01-11 09:39:36 -0800;Update TF version for jaxlib 0.1.58 release

==

WORKSPACE
==================
2ec9b138;Peter Hawkins;2021-01-11 09:27:24 -0800;Add workaround for pybind11 bug that means we were issue poor errors in the case of Python integer -> C integer conversion overflow.
PiperOrigin-RevId: 351169598

==

tests/jax_jit_test.py
==================
4a36d731;jax authors;2021-01-11 08:09:14 -0800;Merge pull request #5363 from hawkinsp:xla
PiperOrigin-RevId: 351155736

==
==================
7d78d1e0;Peter Hawkins;2021-01-11 10:13:34 -0500;Update XLA.

==

WORKSPACE
==================
3fd17bb3;jax authors;2021-01-10 21:15:56 -0800;Merge pull request #5360 from jakevdp:fix-partial
PiperOrigin-RevId: 351077448

==
==================
783e1b7c;jax authors;2021-01-09 20:43:00 -0800;Merge pull request #5236 from bileschi:patch-1
PiperOrigin-RevId: 350975202

==
==================
38d636fd;jax authors;2021-01-08 14:07:20 -0800;Merge pull request #5343 from jakevdp:fix-eye
PiperOrigin-RevId: 350833059

==
==================
8b520437;jax authors;2021-01-08 13:29:22 -0800;Merge pull request #5349 from jakevdp:fix-logistic
PiperOrigin-RevId: 350825603

==
==================
ef5f6c9f;Jake VanderPlas;2021-01-07 13:33:41 -0800;jnp.eye(): improve input validation

==

jax/_src/lax/other.py
jax/_src/numpy/lax_numpy.py
==================
191cff6e;Jake VanderPlas;2021-01-07 16:40:30 -0800;Simplify jax.random.logistic algorithm

==

jax/_src/random.py
==================
3f85b300;Matthew Johnson;2021-01-08 12:13:09 -0800;temporary skip test
PiperOrigin-RevId: 350812117

==

tests/random_test.py
==================
28f479c5;Jake VanderPlas;2021-01-08 11:52:29 -0800;alias jax.partial to functools.partial

==

jax/util.py
==================
4daee9e3;jax authors;2021-01-07 22:59:24 -0800;Merge pull request #5348 from fehiepsi:gumbel-min
PiperOrigin-RevId: 350705524

==
==================
33989a95;jax authors;2021-01-07 22:20:26 -0800;Merge pull request #5340 from gnecula:tf_omnistaging
PiperOrigin-RevId: 350701432

==
==================
9e9da21a;jax authors;2021-01-07 20:50:47 -0800;Merge pull request #5314 from google:issue-5206
PiperOrigin-RevId: 350691502

==
==================
897916ff;Roy Frostig;2021-01-07 16:44:39 -0800;test source sync
PiperOrigin-RevId: 350663594

==

jax/_src/traceback_util.py
==================
1c200358;jax authors;2021-01-07 16:19:37 -0800;Merge pull request #5320 from jakevdp:solve-broadcast
PiperOrigin-RevId: 350659619

==
==================
8ce371a7;jax authors;2021-01-07 16:11:31 -0800;Merge pull request #5323 from minoring:add-method-multivariate_normal
PiperOrigin-RevId: 350658192

==
==================
6f051d7d;jax authors;2021-01-07 15:15:04 -0800;Merge pull request #5334 from hawkinsp:types
PiperOrigin-RevId: 350647470

==
==================
ff61c3c1;Du Phan;2021-01-07 16:54:33 -0600;use tiny for gumbel sampler

==

jax/_src/random.py
==================
30a64e37;jax authors;2021-01-07 10:52:49 -0800;Merge pull request #5338 from zhangqiaorjc:xla_in_python_update
PiperOrigin-RevId: 350595514

==
==================
7a9f8f96;Matthew Johnson;2021-01-05 08:14:16 -0800;make c++ jit sensitive to global omnistaging state
fixes #5206

Co-authored-by: Jean-Baptiste Lespiau <jblespiau@google.com>

==

jax/api.py
tests/api_test.py
==================
7a45c0d2;Jake VanderPlas;2021-01-05 17:11:52 -0800;Support broadcasting of batch dims in jax.numpy.linalg.solve

==

jax/_src/lax/linalg.py
tests/linalg_test.py
==================
160cc1c0;Qiao Zhang;2021-01-07 10:18:05 -0800;Merge branch 'xla_in_python_update' of github.com:zhangqiaorjc/jax into xla_in_python_update

==
==================
533b4ac3;Qiao Zhang;2021-01-06 20:16:32 -0800;Updates XLA_in_Python notebook with the latest API.

==

docs/notebooks/XLA_in_Python.ipynb
==================
7c42dc91;jax authors;2021-01-07 10:12:31 -0800;Merge pull request #5330 from google:core-test-cache-clear
PiperOrigin-RevId: 350586914

==
==================
a746b331;jax authors;2021-01-07 08:53:26 -0800;Merge pull request #5324 from chr1sj0nes:changelist/350311431
PiperOrigin-RevId: 350571655

==
==================
9c8ec132;George Necula;2021-01-07 08:23:17 +0200;[jax2tf] Fix/disable tests for non-omnistaging

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/jax2tf_test.py
==================
daaeb2bf;jax authors;2021-01-07 08:18:49 -0800;Merge pull request #5341 from gnecula:tf_sort
PiperOrigin-RevId: 350565433

==
==================
274d9706;George Necula;2021-01-07 14:54:47 +0200;[jax2tf] Finish the conversion of lax.sort
We were blocked until now due to limited support for the XlaSort op.
Also removed the patching of the XlaPad output shape; now XlaPad has
shape inference.

==

jax/experimental/jax2tf/README.md
jax/experimental/jax2tf/g3doc/primitives_with_limited_support.md
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/jax2tf_limitations.py
jax/experimental/jax2tf/tests/primitive_harness.py
==================
decef6a5;jax authors;2021-01-07 06:19:14 -0800;Merge pull request #5339 from gnecula:tf_bfloat16
PiperOrigin-RevId: 350546281

==
==================
231ea59f;George Necula;2021-01-07 07:57:59 +0200;[jax2tf] Fix infinite recursion when converting some bfloat16 arrays
This fix takes advantage of a new change in TF to share the bfloat16
dtype definition with JAX

Fixes: #5106
Relates to: #5108

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/jax2tf_test.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
3614d829;Minho Heo;2021-01-07 17:03:39 +0900;Fix typo in jax/_src/random.py
Co-authored-by: Matthew Johnson <mattjj@google.com>
==

jax/_src/random.py
==================
dcad101a;Qiao Zhang;2021-01-06 20:16:32 -0800;Updates XLA_in_Python notebook with the latest API.

==

docs/notebooks/XLA_in_Python.ipynb
==================
9dd1704a;Peter Hawkins;2021-01-06 16:28:29 -0500;Add types to axes in lax_numpy.

==

jax/_src/numpy/lax_numpy.py
jax/util.py
==================
833bb6f1;Roy Frostig;2021-01-06 10:56:21 -0800;re-enable test

==

tests/lax_control_flow_test.py
==================
ec6b10d4;Roy Frostig;2021-01-06 10:45:19 -0800;clear some caches when setting up jaxpr typecheck tests
In order to test that the typechecker identifies invalid jaxprs, some
tests modify jaxprs in place. This is typically not allowed, since
jaxprs are assumed immutable, and may be cached. As a workaround, this
change clears the relevant caches before every test. This ought to
prevent some order-dependent test failures.

==

jax/_src/lax/control_flow.py
tests/core_test.py
tests/lax_control_flow_test.py
==================
432ef313;Roy Frostig;2021-01-06 10:22:52 -0800;tiny change for source sync
PiperOrigin-RevId: 350379734

==

jax/_src/traceback_util.py
==================
3896ac20;Chris Jones;2021-01-06 10:15:28 +0000;Skip tests that are failing without omnistaging (which will not be an option shortly).
Enable tests on all platforms that were unnecessarily skipped.

==

tests/pmap_test.py
==================
81990b40;George Necula;2021-01-06 18:07:39 +0100;Merge pull request #5243 from gnecula:print_refactor
PiperOrigin-RevId: 350362752

==
==================
c1904ea7;Stanley Bileschi;2021-01-06 11:26:46 -0500;fixing.  Renaming per reviewer feedback.

==

README.md
==================
0e73bb92;Mike Innes;2021-01-06 14:43:05 +0000;inf checker tests

==

tests/debug_nans_test.py
==================
2e13e99b;Mike Innes;2021-01-06 14:33:42 +0000;changelog

==

docs/CHANGELOG.rst
==================
72620a56;Mike Innes;2021-01-06 14:15:56 +0000;small refactor

==

jax/api.py
jax/interpreters/xla.py
==================
6d2fabd3;Mike Innes;2021-01-06 14:08:24 +0000;fix flag name

==

jax/interpreters/xla.py
==================
7468b9df;George Necula;2021-01-06 15:02:26 +0200;Turn off flaky test LaxControlFlowTest.test_cond_typecheck_param

==

tests/lax_control_flow_test.py
==================
aec6192e;George Necula;2021-01-06 13:36:37 +0200;Fix float0 handling

==

jax/experimental/host_callback.py
jax/interpreters/ad.py
tests/host_callback_test.py
tests/host_callback_to_tf_test.py
==================
460e7a07;minoring;2021-01-06 16:26:34 +0900;Add method parameter to jax.random.multivariate_normal
Related #5296

==

jax/_src/random.py
tests/random_test.py
==================
6c8fc1b0;jax authors;2021-01-05 14:51:22 -0800;Merge pull request #5211 from jakevdp:lower-fun
PiperOrigin-RevId: 350225025

==
==================
3e1fac9d;jax authors;2021-01-05 13:44:58 -0800;Merge pull request #4805 from PhilipVinc:PhilipVinc/complex
PiperOrigin-RevId: 350210831

==
==================
b39dbe18;Jean-Baptiste Lespiau;2021-01-05 13:23:57 -0800;Add a version number for the XLA code targetting jaxlib.
There is likely a better long term solution, but this is an easy incremental
improvement then.

PiperOrigin-RevId: 350206440

==

jax/lib/__init__.py
==================
7917e278;Jake VanderPlas;2021-01-05 13:16:59 -0800;lower_fun: create table of translations_with_avals

==

jax/_src/random.py
jax/interpreters/xla.py
tests/custom_object_test.py
==================
dcd8a5de;jax authors;2021-01-05 12:50:19 -0800;Merge pull request #5316 from jakevdp:empty-inv
PiperOrigin-RevId: 350199905

==
==================
ce25acfa;jax authors;2021-01-05 12:37:55 -0800;Merge pull request #5317 from hawkinsp:xla
PiperOrigin-RevId: 350197655

==
==================
1eaf533a;Peter Hawkins;2021-01-05 15:20:35 -0500;Update XLA version.

==

WORKSPACE
==================
65954ceb;Jake VanderPlas;2021-01-05 11:51:32 -0800;Fix linalg.solve() and linalg.inv() for empty matrices

==

jax/_src/lax/linalg.py
jax/_src/numpy/linalg.py
tests/linalg_test.py
==================
6a8741c8;jax authors;2021-01-05 10:07:57 -0800;Merge pull request #5298 from jakevdp:deflinear2
PiperOrigin-RevId: 350164320

==
==================
4e26dfdd;jax authors;2021-01-05 09:45:15 -0800;Merge pull request #5303 from google:optimize-docs
PiperOrigin-RevId: 350159332

==
==================
98aac23d;Jake VanderPlas;2020-12-30 17:42:04 -0800;Change from deflinear to deflinear2

==

jax/_src/lax/control_flow.py
jax/_src/lax/fft.py
jax/_src/lax/lax.py
jax/_src/lax/parallel.py
jax/interpreters/ad.py
jax/interpreters/sharded_jit.py
jax/interpreters/xla.py
==================
847e4854;Filippo Vicentini;2021-01-05 12:46:34 +0100;fix flake on ComplexNormal tests

==

tests/random_test.py
==================
8c68ed09;Filippo Vicentini;2021-01-05 12:40:23 +0100;add tests for complex normal distribution

==

tests/random_test.py
==================
5dfd2493;Filippo Vicentini;2021-01-05 12:40:08 +0100;add complex support to random_normal

==

jax/_src/random.py
jax/dtypes.py
==================
365f548f;George Necula;2021-01-05 10:51:48 +0200;Merge remote-tracking branch 'origin/print_refactor' into print_refactor

==
==================
1ca38f5d;George Necula;2021-01-05 10:51:32 +0200;Implemented review feedback
* removed comments
* raised the last exception as part of the CallbackException

==

docs/jax.experimental.host_callback.rst
jax/experimental/host_callback.py
tests/host_callback_test.py
tests/host_callback_to_tf_test.py
==================
1c40610f;George Necula;2021-01-05 10:31:26 +0200;Apply suggestions from code review
Co-authored-by: Stephan Hoyer <shoyer@google.com>
==

jax/experimental/host_callback.py
tests/host_callback_to_tf_test.py
==================
f2453207;George Necula;2021-01-05 09:47:59 +0200;Trigger the re-building of documentation

==

docs/developer.rst
==================
64867ae8;George Necula;2020-10-17 11:15:51 +0300;[host_callback] Added  host_callback.call to return values to the device
See the PR for more details about this change

==

docs/CHANGELOG.rst
docs/jax.experimental.host_callback.rst
jax/experimental/host_callback.py
tests/host_callback_test.py
tests/host_callback_to_tf_test.py
tests/infeed_test.py
==================
02684607;Jake Vanderplas;2021-01-03 06:24:42 -0800;Add jax.scipy.optimize to HTML docs
Fixes #5300
==

docs/jax.scipy.rst
==================
afe61221;jax authors;2020-12-31 09:31:27 -0800;Merge pull request #5293 from gnecula:jax2tf_docs
PiperOrigin-RevId: 349686452

==
==================
1fb9cd34;George Necula;2020-12-30 19:27:47 +0200;[jax2tf] Moved text from the documentation into the limitations for custom checks
* cleaned up the handling of tolerances and custom asserts.
* Removed the harnesss field from the limitations.
* Moved the definitions of the Jax2TfLimitation into its own
  file, so it can be reused.

==

jax/experimental/jax2tf/g3doc/jax_primitives_coverage.md
jax/experimental/jax2tf/g3doc/primitives_with_limited_support.md
jax/experimental/jax2tf/g3doc/primitives_with_limited_support.md.template
jax/experimental/jax2tf/tests/jax2tf_limitations.py
jax/experimental/jax2tf/tests/jax_primitives_coverage_test.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
jax/experimental/jax2tf/tests/stax_test.py
jax/experimental/jax2tf/tests/tf_test_util.py
==================
ba46e64e;jax authors;2020-12-30 19:26:42 -0800;Merge pull request #5244 from google:closure-convert
PiperOrigin-RevId: 349628394

==
==================
77d7339b;Roy Frostig;2020-12-30 17:23:44 -0800;test closure conversion, following docstring example

==

tests/api_test.py
==================
0ad5d2f0;Roy Frostig;2020-12-22 17:04:08 -0800;update changelog with closure_convert

==

docs/CHANGELOG.rst
jax/custom_derivatives.py
jax/experimental/ode.py
==================
38224f6b;jax authors;2020-12-30 17:20:15 -0800;Merge pull request #5294 from google:switch-bind-leak
PiperOrigin-RevId: 349618748

==
==================
e248ce91;jax authors;2020-12-30 17:19:55 -0800;Merge pull request #5289 from aslanides:master
PiperOrigin-RevId: 349618744

==
==================
86794acd;jax authors;2020-12-30 17:16:29 -0800;Merge pull request #5297 from jakevdp:CI
PiperOrigin-RevId: 349618741

==
==================
229d9f94;jax authors;2020-12-30 16:06:21 -0800;Merge pull request #5290 from aslanides:misc
PiperOrigin-RevId: 349612807

==
==================
da4e2731;John Aslanides;2020-12-30 22:00:20 +0000;Add PyPI version badge to README.

==

README.md
==================
57b22208;John Aslanides;2020-12-30 21:58:03 +0000;Add xla_client.Device type annotation to jit & pmap.

==

jax/api.py
==================
e2604420;jax authors;2020-12-30 13:26:58 -0800;Merge pull request #5295 from aslanides:xla_client_types
PiperOrigin-RevId: 349594862

==
==================
22285588;jax authors;2020-12-30 13:23:31 -0800;Merge pull request #5288 from aslanides:format
PiperOrigin-RevId: 349594705

==
==================
5959fa9c;Jake VanderPlas;2020-12-30 13:20:13 -0800;Run main test suite under Python 3.8

==

.github/workflows/ci-build.yaml
setup.py
==================
895521b4;jax authors;2020-12-30 13:13:47 -0800;Merge pull request #5291 from aslanides:pypi
PiperOrigin-RevId: 349593737

==
==================
2271651b;Roy Frostig;2020-12-22 10:22:14 -0800;add closure_convert to api, write a docstring for it

==

jax/api.py
jax/custom_derivatives.py
==================
85b0fa70;Roy Frostig;2020-12-21 21:21:23 -0800;factor convert_closure from ode to custom_derivatives.

==

jax/custom_derivatives.py
jax/experimental/ode.py
==================
b19c946a;jax authors;2020-12-30 11:01:33 -0800;Merge pull request #5277 from minoring:pad-func
PiperOrigin-RevId: 349577966

==
==================
1ff22fee;John Aslanides;2020-12-30 18:09:07 +0000;Improve type annotations in xla_client.

==

jax/lib/xla_bridge.py
==================
9dafbbea;John Aslanides;2020-12-30 11:06:17 +0000;Use f-strings for string formatting rather than .format(...).

==

jax/api.py
==================
f182b0c7;Roy Frostig;2020-12-30 10:02:18 -0800;avoid cache misses when evaluating cond primitives
Cache the jaxprs that we form for branches so that the branch params
we pass when binding the cond primitive hit the cache for primitive
computations.

Simplify the jaxpr branch setup code along the way.

==

jax/_src/lax/control_flow.py
==================
6029f02b;John Aslanides;2020-12-30 11:29:34 +0000;Add setup classifiers fields (including supported Python versions) for PyPI.
This is following https://packaging.python.org/tutorials/packaging-projects/.

==

setup.py
==================
f67457f1;minoring;2020-12-30 10:10:54 +0900;Add jit-compiled test to testPadFunction

==

tests/lax_numpy_test.py
==================
0f42f0ef;minoring;2020-12-30 09:47:20 +0900;Add docstring for jax.numpy.pad function mode.

==

jax/_src/numpy/lax_numpy.py
==================
47d3e204;jax authors;2020-12-29 14:27:59 -0800;Merge pull request #5170 from jakevdp:reduce-dtype-rule
PiperOrigin-RevId: 349470373

==
==================
f704bad0;jax authors;2020-12-29 14:05:07 -0800;Merge pull request #4265 from aslanides:types
PiperOrigin-RevId: 349467711

==
==================
62f94343;jax authors;2020-12-29 13:39:27 -0800;Merge pull request #5282 from jakevdp:broadcast-in-dim
PiperOrigin-RevId: 349464268

==
==================
2b41a049;Jake VanderPlas;2020-12-29 12:57:54 -0800;use deflinear2

==

jax/_src/lax/lax.py
==================
ca7d9464;Jake VanderPlas;2020-12-29 10:30:22 -0800;Fix broadcast_in_dim transpose issue.

==

jax/_src/lax/lax.py
tests/lax_test.py
==================
13d6e23e;Jake VanderPlas;2020-12-14 09:20:26 -0800;lax.reduce: check for dtype mismatch in reduce_p abstract eval

==

jax/_src/lax/lax.py
==================
ad132a2d;jax authors;2020-12-29 12:23:39 -0800;Merge pull request #5283 from google:remove-at-least-vspace-default-implementation
PiperOrigin-RevId: 349455265

==
==================
cdc1b054;Matthew Johnson;2020-12-29 11:43:44 -0800;remove AbstractValue.at_least_vspace default impl

==

jax/core.py
==================
19b3cf9a;jax authors;2020-12-29 11:09:09 -0800;Merge pull request #5281 from 8bitmp3:patch-4
PiperOrigin-RevId: 349445430

==
==================
ec5904d4;jax authors;2020-12-29 10:21:59 -0800;Merge pull request #5278 from 8bitmp3:patch-2
PiperOrigin-RevId: 349439201

==
==================
a7cdcee3;jax authors;2020-12-29 10:18:25 -0800;Merge pull request #5279 from 8bitmp3:patch-3
PiperOrigin-RevId: 349439151

==
==================
162a6f15;8bitmp3;2020-12-29 18:09:13 +0000;Nit: lint (grammar) JAX F.A.Q.

==

docs/faq.rst
==================
26c6b3a2;John Aslanides;2020-12-29 17:45:56 +0000;Improve type safety for various function transformations.
This change expresses the fact that function signatures (both arguments and return types) are
invariant under {jit, vmap, pmap} transformations.

==

jax/api.py
==================
b0b44764;8bitmp3;2020-12-29 16:35:19 +0000;Nit: fix typo in custom_derivatives.py ("separate")

==

jax/custom_derivatives.py
==================
6457a1c6;8bitmp3;2020-12-29 16:27:19 +0000;Nit: small fix - grammar in api.py ("output...should [be] partitioned or replicated")

==

jax/api.py
==================
e4897b2e;minoring;2020-12-29 21:30:29 +0900;Implement "function" padding mode in jax.numpy.pad
Note: this "function" mode expect different argument compared to numpy.
In numpy, `func` should modify a rank 1 array in-place.
However, since Jax arrays are immutable, `func` should return
the modified array.

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
70252c21;jax authors;2020-12-28 22:53:44 -0800;Merge pull request #5274 from gnecula:limitations2
PiperOrigin-RevId: 349378438

==
==================
cf6da862;George Necula;2020-12-29 06:41:51 +0200;[jax2tf] Refinements for the auto-generated limitations documentation
* fixed the summarization of "inexact" types in the generated docs
* added support for 'skip_tf_run' to the limitations
* cleaned up the logging for the jax2tf tests

==

jax/experimental/jax2tf/g3doc/jax_primitives_coverage.md
jax/experimental/jax2tf/g3doc/jax_primitives_coverage.md.template
jax/experimental/jax2tf/g3doc/primitives_with_limited_support.md
jax/experimental/jax2tf/g3doc/primitives_with_limited_support.md.template
jax/experimental/jax2tf/tests/jax_primitives_coverage_test.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
jax/experimental/jax2tf/tests/tf_test_util.py
==================
4d6eaa6f;jax authors;2020-12-28 16:42:03 -0800;Merge pull request #5254 from timgates42:bugfix_typo_specified
PiperOrigin-RevId: 349347411

==
==================
fa8c3a5d;David Majnemer;2020-12-28 15:10:17 -0800;Adjust tolerances for TPU f16
DEFAULT precision for f16 will have a new interpretation on TPU to make it
consistent with bf16 and f32.

PiperOrigin-RevId: 349336826

==

jax/experimental/jax2tf/tests/primitives_test.py
tests/lax_numpy_test.py
==================
242c7d5d;David Majnemer;2020-12-28 13:20:36 -0800;Enable more tests on TPU
PiperOrigin-RevId: 349323353

==

tests/host_callback_test.py
tests/lax_test.py
tests/linalg_test.py
==================
e3af2c77;George Necula;2020-12-28 10:28:23 -0800;Rename the test file, and enable the jax_primitives_coverage_test.
PiperOrigin-RevId: 349301827

==

jax/experimental/jax2tf/g3doc/jax_primitives_coverage.md
jax/experimental/jax2tf/g3doc/jax_primitives_coverage.md.template
jax/experimental/jax2tf/g3doc/primitives_with_limited_support.md
jax/experimental/jax2tf/g3doc/primitives_with_limited_support.md.template
jax/experimental/jax2tf/tests/correctness_stats.py
jax/experimental/jax2tf/tests/jax_primitives_coverage_test.py
==================
d48bf26c;George Necula;2020-12-28 10:11:54 -0800;Turn off testing conv with complex on GPU.
There seem to be some failures in LLVM and the test cannot recover.

PiperOrigin-RevId: 349299685

==

jax/experimental/jax2tf/tests/primitives_test.py
==================
089641e3;jax authors;2020-12-28 08:19:03 -0800;Merge pull request #5258 from gnecula:limitations
PiperOrigin-RevId: 349286912

==
==================
5361d4f3;George Necula;2020-12-28 14:32:27 +0200;Fixed tolerances for GPU and TPU

==

jax/experimental/jax2tf/tests/primitives_test.py
jax/experimental/jax2tf/tests/tf_test_util.py
==================
1f098d43;George Necula;2020-12-28 13:41:52 +0200;Fixes suggested by @bchetioui

==

jax/experimental/jax2tf/g3doc/jax_primitives_coverage.md
jax/experimental/jax2tf/g3doc/jax_primitives_coverage.md.template
jax/experimental/jax2tf/g3doc/primitives_with_limited_support.md
jax/experimental/jax2tf/g3doc/primitives_with_limited_support.md.template
jax/experimental/jax2tf/tests/jax_primitives_coverage_test_temp.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
jax/experimental/jax2tf/tests/tf_test_util.py
==================
e76ce041;George Necula;2020-12-28 11:12:53 +0200;Added the tolerances and custom asserts as limitations

==

jax/experimental/jax2tf/g3doc/jax_primitives_coverage.md
jax/experimental/jax2tf/g3doc/primitives_with_limited_support.md
jax/experimental/jax2tf/tests/jax_primitives_coverage_test_temp.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
jax/experimental/jax2tf/tests/tf_test_util.py
==================
a5fbc286;George Necula;2020-12-24 09:40:40 +0200;Major refactoring of the jax2tf test harnesses.
See the PR description for details.

==

jax/ad_util.py
jax/experimental/jax2tf/README.md
jax/experimental/jax2tf/g3doc/jax_primitives_coverage.md
jax/experimental/jax2tf/g3doc/jax_primitives_coverage.md.template
jax/experimental/jax2tf/g3doc/primitives_with_limited_support.md
jax/experimental/jax2tf/g3doc/primitives_with_limited_support.md.template
jax/experimental/jax2tf/tests/correctness_stats.py
jax/experimental/jax2tf/tests/jax2tf_test.py
jax/experimental/jax2tf/tests/jax_primitives_coverage_test_temp.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
jax/experimental/jax2tf/tests/tf_test_util.py
mypy.ini
==================
738f8bd8;jax authors;2020-12-23 22:42:10 -0800;Merge pull request #5249 from minoring:pad-kwargs
PiperOrigin-RevId: 348891748

==
==================
c699329c;Roy Frostig;2020-12-23 17:57:58 -0800;tiny change to test CI
PiperOrigin-RevId: 348870843

==

jax/_src/traceback_util.py
==================
f4a44093;jax authors;2020-12-23 17:33:56 -0800;Merge pull request #5255 from google:ci-names
PiperOrigin-RevId: 348868647

==
==================
3e74f725;Roy Frostig;2020-12-23 17:10:15 -0800;more readable CI action names

==

.github/workflows/ci-build.yaml
==================
a93d53ef;minoring;2020-12-24 09:44:12 +0900;Add breaking changes about jax.numpy.pad to change log

==

docs/CHANGELOG.rst
==================
06dbdad0;Tim Gates;2020-12-24 09:04:02 +1100;docs: fix simple typo, specifed -> specified
There is a small typo in jax/_src/lax/lax.py.

Should read `specified` rather than `specifed`.

==

jax/_src/lax/lax.py
==================
6cddc2fa;Roy Frostig;2020-12-23 13:24:35 -0800;tiny change for source sync
PiperOrigin-RevId: 348839503

==

jax/_src/traceback_util.py
==================
ac62a5a6;jax authors;2020-12-23 12:07:35 -0800;Merge pull request #5250 from google:rollback-4850
PiperOrigin-RevId: 348829210

==
==================
35773bfb;jax authors;2020-12-23 11:42:32 -0800;Merge pull request #5251 from zhangqiaorjc:hfix
PiperOrigin-RevId: 348825232

==
==================
a91fcac6;Qiao Zhang;2020-12-23 11:25:23 -0800;Fix header guard typo.

==

jaxlib/cuda_gpu_kernel_helpers.h
==================
26c91aa1;Matthew Johnson;2020-12-23 11:12:53 -0800;remove unused import

==

tests/lax_test.py
==================
19057260;Matthew Johnson;2020-12-23 11:04:59 -0800;remove unchanged file

==

jax/experimental/loops.py
==================
3dee321f;Matthew Johnson;2020-12-23 11:01:58 -0800;rollback of #4850

==

docs/jaxpr.rst
jax/_src/lax/lax.py
jax/_src/numpy/lax_numpy.py
jax/dtypes.py
jax/experimental/doubledouble.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/jax2tf_test.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/loops.py
tests/api_test.py
tests/dtypes_test.py
tests/lax_numpy_test.py
tests/lax_test.py
==================
0839fc7f;Sergii Kashubin;2020-12-23 04:56:31 -0800;Internal change
PiperOrigin-RevId: 348777079

==

jax/experimental/jax2tf/examples/README.md
==================
1bbc1771;jax authors;2020-12-22 20:45:40 -0800;Merge pull request #5223 from google:nullary-tie-in
PiperOrigin-RevId: 348736359

==
==================
43ab543b;jax authors;2020-12-22 08:05:04 -0800;Merge pull request #5241 from 8bitmp3:patch-2
PiperOrigin-RevId: 348635259

==
==================
720b283a;Roy Frostig;2020-12-17 19:49:30 -0800;make tie-in argument to lax.create_token optional and ignored when omnistaging is on

==

jax/_src/lax/lax.py
==================
87284970;jax authors;2020-12-21 16:18:25 -0800;Merge pull request #5239 from skye:jit_backend_tests
PiperOrigin-RevId: 348545044

==
==================
abf15cd2;jax authors;2020-12-21 16:14:39 -0800;Merge pull request #5240 from skye:no_shortcircuit
PiperOrigin-RevId: 348544925

==
==================
eaccf3ce;8bitmp3;2020-12-21 23:25:41 +0000;Fix a typo in JAX Pytrees, minor linting

==

docs/pytrees.rst
==================
89c80466;Skye Wanderman-Milne;2020-12-21 10:39:59 -0800;Add unit tests for jit backend argument
Inspired by #5188

==

tests/api_test.py
==================
49b281c4;Skye Wanderman-Milne;2020-12-21 13:45:12 -0800;Remove tracing special case for trivial subcomputations.
This undoes #3169 now that omnistaging is in. I'm having trouble
reproducing the original issue with omnistaging disabled (#3143), but
my understanding is that we should no longer have issues with values
being forced by jitted subcomputations, since jit no longer partially
evaluates.

The motivation for this change is that this special case occasionally
causes confusion and unexpected behavior. For example, it bypasses
call-specific error checking (#5188) and can cause trivial nested
pmaps and sharded_jits, which are useful for pre-sharding data across
devices, to have no effect.

==

jax/interpreters/partial_eval.py
==================
015bab41;jax authors;2020-12-21 06:44:03 -0800;Merge pull request #5229 from minoring:pad-kwargs-input
PiperOrigin-RevId: 348459720

==
==================
d91fe2ed;jax authors;2020-12-21 05:47:25 -0800;Merge pull request #5237 from gnecula:print_named_call
PiperOrigin-RevId: 348454422

==
==================
3c82a5d7;minoring;2020-12-21 19:08:57 +0900;Add test for unsupported modes

==

tests/lax_numpy_test.py
==================
3796cf33;Tudor Cebere;2020-09-17 18:33:30 +0300;Covering an execution path on array creation: when an array is created with an unspecified type (None), there was no typechecking that the inferred type is compatible with JAX. The issue has been documented and a test with the use case added.

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
6828e4fc;minoring;2020-12-21 18:40:11 +0900;Minor: if -> elif for case statement of modes

==

jax/_src/numpy/lax_numpy.py
==================
beb0e02f;George Necula;2020-12-21 11:01:29 +0200;[host_callback] Added support for jax.named_call.

==

jax/experimental/host_callback.py
tests/host_callback_test.py
==================
80173aad;Stanley Bileschi;2020-12-21 00:35:22 -0500;(docfix) Typo in README.md
`predict` function should apply nonlinearity to output
==

README.md
==================
6c2ecece;jax authors;2020-12-19 17:28:22 -0800;Merge pull request #5216 from LenaMartens:changelist/348033300
PiperOrigin-RevId: 348311555

==
==================
d1cdd775;Lena Martens;2020-12-17 18:16:12 +0100;Fix UnexpectedTracer omnistaging error.

==

jax/core.py
tests/api_test.py
==================
78a9823a;minoring;2020-12-15 13:12:05 +0900;Convert arguments of pad into kwargs and handle invalid kwargs

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
c89f3810;Mike Innes;2020-12-18 16:26:31 +0000;add flag for inf checking

==

jax/interpreters/xla.py
==================
36f91261;Jean-Baptiste Lespiau;2020-12-17 15:15:33 -0800;Copybara import of the project:
--
8eac55e71e9a023ce9dce9f79461b7265ae28f00 by Jean-Baptiste Lespiau <jblespiau@google.com>:

Have the C++ path raise a cleaner error for static argnums.

Fixes #5190.

PiperOrigin-RevId: 348102847

==

jax/api.py
tests/api_test.py
==================
e90de893;jax authors;2020-12-17 14:14:43 -0800;Merge pull request #5220 from jakevdp:fix-4672
PiperOrigin-RevId: 348091777

==
==================
a8518769;jax authors;2020-12-17 14:01:04 -0800;Merge pull request #5115 from inailuig:rocm-gpukernels
PiperOrigin-RevId: 348077827

==
==================
98f88152;Jake VanderPlas;2020-12-17 12:51:35 -0800;Fix bug in primitive_computation
fixes #4672

==

jax/_src/lax/lax.py
jax/interpreters/xla.py
tests/lax_test.py
==================
1a5b186c;jax authors;2020-12-17 12:39:53 -0800;Merge pull request #5219 from google:issue5217
PiperOrigin-RevId: 348074156

==
==================
d7b5e3b5;Matthew Johnson;2020-12-17 12:10:04 -0800;add add_any to jet rules table
fixes #5217

==

jax/experimental/jet.py
tests/jet_test.py
==================
e588ecc1;Jean-Baptiste Lespiau;2020-12-16 01:36:55 +0100;Have the C++ path raise a cleaner error.
Fixes #5190.

==

jax/api.py
tests/api_test.py
==================
943c7794;jax authors;2020-12-17 08:31:41 -0800;Merge pull request #5207 from bchetioui:remake_binary_elementwise_harnesses
PiperOrigin-RevId: 348026395

==
==================
c09a73ab;Benjamin Chetioui;2020-12-17 15:52:54 +0100;[jax2tf] Systematize broadcasting tests for binary elementwise harnesses. Also add broadcasting tests to min and max, and splits the logic for add and mul.

==

jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
c256222d;jax authors;2020-12-16 23:44:43 -0800;Merge pull request #5214 from google:duck-shaped-args
PiperOrigin-RevId: 347968970

==
==================
39196780;Roy Frostig;2020-12-16 21:02:21 -0800;document the option for duck typing in api.xla_computation example arguments

==

jax/api.py
==================
7d8b7d41;jax authors;2020-12-16 16:20:30 -0800;Merge pull request #5212 from zhangqiaorjc:jtf1
PiperOrigin-RevId: 347918677

==
==================
efb8915f;Qiao Zhang;2020-12-16 14:38:16 -0800;Bump jax2tf test_digamma tol for CPU.

==

jax/experimental/jax2tf/tests/primitives_test.py
==================
3f136acc;jax authors;2020-12-16 13:43:16 -0800;Merge pull request #5174 from jakevdp:lax-weak-types
PiperOrigin-RevId: 347889057

==
==================
6ea9f164;jax authors;2020-12-16 10:23:47 -0800;Merge pull request #5204 from minoring:pad-empty
PiperOrigin-RevId: 347848088

==
==================
c820dbf4;Jake VanderPlas;2020-12-15 10:15:49 -0800;Propagate weak_types in remaining lax primitives

==

jax/_src/lax/lax.py
tests/lax_test.py
==================
08f2c765;Benjamin Chetioui;2020-12-16 17:24:32 +0100;[jax2tf] Clean up and expand binary elementwise harnesses.

==

jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
43f603ba;jax authors;2020-12-16 07:15:45 -0800;Merge pull request #5187 from bchetioui:remake_elementwise_harnesses
PiperOrigin-RevId: 347816538

==
==================
4981c53a;Clemens Giuliani;2020-12-05 00:07:04 +0100;Add BLAS and LAPACK gpu kernels for ROCm

==

build/BUILD.bazel
build/build_wheel.py
jax/_src/lax/linalg.py
jax/lib/__init__.py
jaxlib/BUILD
jaxlib/cublas.cc
jaxlib/cuda_gpu_kernel_helpers.cc
jaxlib/cuda_gpu_kernel_helpers.h
jaxlib/cuda_prng.py
jaxlib/cuda_prng_kernels.cu.cc
jaxlib/cusolver.cc
jaxlib/cusolver.py
jaxlib/rocblas.cc
jaxlib/rocm_gpu_kernel_helpers.cc
jaxlib/rocm_gpu_kernel_helpers.h
jaxlib/rocsolver.py
==================
c128bdd9;Clemens Giuliani;2020-12-05 02:02:57 +0100;extract the shared handle pool code from cublas and cusolver

==

jaxlib/BUILD
jaxlib/cublas.cc
jaxlib/cusolver.cc
jaxlib/handle_pool.h
==================
299c7b90;Benjamin Chetioui;2020-12-16 13:17:25 +0100;[jax2tf] Relax unary elementwise test tolerance.

==

jax/experimental/jax2tf/tests/primitives_test.py
==================
1dc55aab;Benjamin Chetioui;2020-12-16 11:05:15 +0100;[jax2tf] Update limitations with information about potentially equally valid but different expected results.

==

jax/experimental/jax2tf/g3doc/primitives_with_limited_support.md
jax/experimental/jax2tf/g3doc/primitives_with_limited_support.md.template
==================
4d78d60a;jax authors;2020-12-16 01:57:26 -0800;Merge pull request #5205 from gnecula:print_no_receiver
PiperOrigin-RevId: 347781549

==
==================
0b1771b8;jax authors;2020-12-16 01:53:33 -0800;Merge pull request #5196 from bchetioui:fix_round_p_harness
PiperOrigin-RevId: 347781466

==
==================
24d85081;George Necula;2020-12-16 09:29:50 +0200;[host_callback] Remove deprecated outfeed_receiver context manager

==

docs/CHANGELOG.rst
jax/experimental/host_callback.py
tests/host_callback_test.py
==================
7c294e62;jax authors;2020-12-15 23:13:03 -0800;Copybara import of the project:
--
7342318774c6f1195f0e238f1209425109ea8944 by Matthew Johnson <mattjj@google.com>:

check for __jax_array__ method for conversion

--
6742016382b0511f5ac9ec21f67d2122a9f37cb7 by Matthew Johnson <mattjj@google.com>:

fix typo

--
5eb36855e53d8d4e81e281d08dc9264d2671f21f by Matthew Johnson <mattjj@google.com>:

ensure some jnp funs duck-type with __jax_array__

PiperOrigin-RevId: 347763582

==

jax/_src/lax/lax.py
jax/_src/numpy/lax_numpy.py
jax/core.py
jax/dtypes.py
jax/interpreters/xla.py
tests/api_test.py
==================
3bdcb121;minoring;2020-12-16 16:06:57 +0900;Implement jax.numpy.pad empty mode

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
00926928;jax authors;2020-12-15 21:54:41 -0800;Merge pull request #4725 from google:handle-dunder-array-classes
PiperOrigin-RevId: 347754954

==
==================
5eb36855;Matthew Johnson;2020-12-15 20:46:09 -0800;ensure some jnp funs duck-type with __jax_array__

==

jax/dtypes.py
tests/api_test.py
==================
8eedf1ed;jax authors;2020-12-15 14:47:50 -0800;Merge pull request #5176 from jakevdp:isinstance-check
PiperOrigin-RevId: 347697032

==
==================
0f45d1fa;David Majnemer;2020-12-15 11:43:19 -0800;TPU supports c64 -> c64 bitcast_convert_type
PiperOrigin-RevId: 347659193

==

jax/experimental/jax2tf/tests/primitives_test.py
==================
ad234913;jax authors;2020-12-15 10:35:50 -0800;Merge pull request #5193 from hawkinsp:gather
PiperOrigin-RevId: 347644033

==
==================
aaf05264;jax authors;2020-12-15 09:41:51 -0800;Merge pull request #5180 from jblespiau:changelist/347208988
PiperOrigin-RevId: 347631638

==
==================
ca72d3dc;Jean-Baptiste Lespiau;2020-12-13 03:17:32 +0100;Fix a typo on the dynamic definition of __hash__.

==

jax/interpreters/xla.py
tests/api_test.py
==================
a79055cb;jax authors;2020-12-15 05:18:55 -0800;Merge pull request #5182 from gnecula:print_pmap
PiperOrigin-RevId: 347591016

==
==================
4f9000a7;Benjamin Chetioui;2020-12-15 13:27:48 +0100;[jax2tf] Minor fixes in round harness.

==

jax/experimental/jax2tf/tests/primitive_harness.py
==================
20be478a;George Necula;2020-12-13 10:44:20 +0200;[host_callback] Add support for pmap and for passing the device to tap
* Adds support for jit of pmap and pmap of pmap.
* Also adds a `tap_with_device` optional argument to `id_print` and
  `id_tap`, to have the tap function invoked with a device keyword argument.
* Added multiple tests involving pmap

Issue: #5134
Fixes: #5169

==

docs/CHANGELOG.rst
jax/api.py
jax/experimental/host_callback.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
jax/test_util.py
tests/host_callback_test.py
==================
308e7f95;Peter Hawkins;2020-12-14 22:27:34 -0500;Fix batching rule for gather where the batch dimension has size 0.

==

jax/_src/lax/lax.py
tests/lax_vmap_test.py
==================
67420163;Matthew Johnson;2020-12-14 17:13:27 -0800;fix typo

==

jax/interpreters/xla.py
==================
73423187;Matthew Johnson;2020-12-14 17:09:25 -0800;check for __jax_array__ method for conversion

==

jax/_src/lax/lax.py
jax/_src/numpy/lax_numpy.py
jax/core.py
jax/interpreters/xla.py
tests/api_test.py
==================
34bc6ca9;jax authors;2020-12-14 17:04:58 -0800;Merge pull request #5191 from skye:fix_colab_tpu
PiperOrigin-RevId: 347500520

==
==================
85796cc7;Skye Wanderman-Milne;2020-12-14 16:23:20 -0800;Fix colab_tpu.setup_tpu import in example Cloud TPU notebooks.

==

cloud_tpu_colabs/JAX_demo.ipynb
cloud_tpu_colabs/Pmap_Cookbook.ipynb
cloud_tpu_colabs/Wave_Equation.ipynb
==================
0ca612c5;jax authors;2020-12-14 15:04:05 -0800;Merge pull request #5189 from hawkinsp:herbie
PiperOrigin-RevId: 347476608

==
==================
4390f3be;jax authors;2020-12-14 15:00:44 -0800;Merge pull request #5183 from AntoinePlumerault:patch-1
PiperOrigin-RevId: 347476597

==
==================
a0562dc9;Jake VanderPlas;2020-12-14 14:52:51 -0800;api: handle numpy integers for static argnums

==

jax/api.py
jax/api_util.py
==================
931f9259;jax authors;2020-12-14 12:43:44 -0800;Merge pull request #5177 from minoring:pad-reflect-type
PiperOrigin-RevId: 347446703

==
==================
de8df3a8;Peter Hawkins;2020-12-14 11:48:16 -0500;Improve a few JVP rules with rewrites from Herbie.

==

jax/_src/lax/lax.py
==================
a28436bc;jax authors;2020-12-14 08:41:46 -0800;Merge pull request #5163 from bchetioui:factor_test_utils
PiperOrigin-RevId: 347392991

==
==================
7ac3c04a;jax authors;2020-12-14 08:09:09 -0800;Merge pull request #5137 from hawkinsp:dot
PiperOrigin-RevId: 347387515

==
==================
4bba27a4;Benjamin Chetioui;2020-12-14 12:00:36 +0100;[jax2tf] Remove workaround from sign_p and add limitations.

==

jax/experimental/jax2tf/g3doc/primitives_with_limited_support.md
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/correctness_stats.py
==================
7d483578;Benjamin Chetioui;2020-12-10 15:27:56 +0100;[jax2tf] Expand coverage for unary elementwise ops.

==

jax/experimental/jax2tf/g3doc/primitives_with_limited_support.md
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/correctness_stats.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
jax/lax/__init__.py
==================
269676ee;AntoinePlumerault;2020-12-13 17:03:07 +0100;Typo ?
I removed "-e" option from "pip install -e dist/*.whl  # installs jaxlib (includes XLA)" line 58. It is now coherent with lines 69-70. 
When I tried the command with the "-e" it threw an error, without "-e" it worked fine.
==

docs/developer.rst
==================
3a06dfec;Benjamin Chetioui;2020-12-13 15:52:30 +0100;Set collect_limitations variable to True and remove original_impl.

==

jax/experimental/jax2tf/tests/tf_test_util.py
==================
c1d86739;minoring;2020-12-13 09:21:05 +0900;Remove bool from odd reflect_type test

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
91a0dd71;jax authors;2020-12-12 09:53:03 -0800;Merge pull request #5121 from qiuminxu:add_tflite_example
PiperOrigin-RevId: 347177932

==
==================
b85e0595;jax authors;2020-12-12 07:10:17 -0800;Merge pull request #5161 from qiuminxu:jax2tf_avg_pool
PiperOrigin-RevId: 347167053

==
==================
f0a248c8;minoring;2020-12-12 12:24:27 +0900;Add reflect_type argument for symmetric and reflect modes in padding

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
4d3e0fd8;jax authors;2020-12-11 16:08:52 -0800;Merge pull request #5160 from jakevdp:weak-types-slicing
PiperOrigin-RevId: 347094147

==
==================
e802bf9b;Skye Wanderman-Milne;2020-12-11 15:27:40 -0800;Merge pull request #5173 from jakevdp:conv-elem-type-cleanup
PiperOrigin-RevId: 347085811

==
==================
ebaa35e2;Jake VanderPlas;2020-12-10 16:32:47 -0800;Preserve weak types in array slices

==

jax/_src/lax/lax.py
jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
a5df5882;jax authors;2020-12-11 14:32:11 -0800;Merge pull request #5172 from jakevdp:boilerplate
PiperOrigin-RevId: 347076382

==
==================
de96856b;Jake VanderPlas;2020-12-11 14:14:05 -0800;Cleanup: remove unnecessary code in convert_element_type

==

jax/_src/lax/lax.py
==================
1a83bb6f;Jake VanderPlas;2020-12-11 13:47:46 -0800;Cleanup: remove remaining instances of rng_factory boilerplate

==

tests/batching_test.py
tests/fft_test.py
tests/lax_numpy_test.py
tests/lax_scipy_test.py
tests/polynomial_test.py
tests/scipy_stats_test.py
==================
92ae9d85;jax authors;2020-12-11 12:46:26 -0800;Merge pull request #5138 from jakevdp:boilerplate
PiperOrigin-RevId: 347055073

==
==================
940b197c;jax authors;2020-12-11 12:42:51 -0800;Merge pull request #5171 from apaszke:relax-check
PiperOrigin-RevId: 347054837

==
==================
542f33ed;Qiumin Xu;2020-12-11 12:40:03 -0800;Update mnist.py

==

jax/experimental/jax2tf/examples/tflite/mnist/mnist.py
==================
146c6eb3;Adam Paszke;2020-12-11 19:07:34 +0000;Check for non-tuples and not int subclasses in Chunked
Apparently some projects like to pass in instances of `numpy.int64`
where `int`s are expected, and those fail the subclass check. This
should be a hotfix for them, though it would be good to figure out where
does the NumPy scalar come from, and make them well typed.

==

jax/interpreters/pxla.py
==================
aee42a33;Qiumin Xu;2020-12-10 20:56:26 -0800;Added a non-XLA conversion path for reduce_window_sum

==

jax/experimental/jax2tf/jax2tf.py
==================
ca468940;jax authors;2020-12-11 09:24:51 -0800;Merge pull request #5099 from apaszke:xmap-multiple-mesh-dims
PiperOrigin-RevId: 347013166

==
==================
7ee2710d;jax authors;2020-12-11 07:44:22 -0800;Merge pull request #5157 from jakevdp:weak-types-creation
PiperOrigin-RevId: 346996341

==
==================
ba62270d;jax authors;2020-12-11 07:40:57 -0800;Merge pull request #5168 from hawkinsp:jaxlib
PiperOrigin-RevId: 346996145

==
==================
21914db2;Peter Hawkins;2020-12-11 10:18:52 -0500;Export LICENSE.txt file in jaxlib wheels.

==

build/BUILD.bazel
build/build_wheel.py
jaxlib/BUILD
jaxlib/setup.cfg
==================
c23edb80;Peter Hawkins;2020-12-11 06:44:45 -0800;Include a LICENSE.txt in jaxlib wheels.
PiperOrigin-RevId: 346988918

==

build/BUILD.bazel
build/LICENSE.txt
build/build_wheel.py
==================
8fcacd64;Adam Paszke;2020-11-30 14:32:28 +0000;Support mapping a single logical axis to multiple mesh axes in xmap

==

jax/experimental/maps.py
jax/interpreters/pxla.py
jax/util.py
tests/xmap_test.py
==================
b6114a01;Benjamin Chetioui;2020-11-26 16:51:28 +0100;[jax2tf] Factorize and clean up test utils.

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/correctness_stats.py
jax/experimental/jax2tf/tests/tf_test_util.py
==================
6841d8f8;jax authors;2020-12-11 04:06:42 -0800;Merge pull request #5146 from apaszke:xmap-api-update
PiperOrigin-RevId: 346971818

==
==================
8438ffe9;Adam Paszke;2020-12-09 13:02:31 +0000;Make vectorization the default xmap schedule
It's been really annoying to have to spell out all the `vectorize`
schedule components, especially when dealing with lots of axes. And the
utility of checking that an axis is _not_ vectorized seems quite
limited.

Finally, one could argue that vectorization really is _the default_.
`xmap` can be seen as a generalization of `einsum`, or as a way to
expose programming with named axes instead of positional axes. In both
those cases, the focus is on shifting how the program is expressed,
without saying anything about the lowering or execution strategy. But,
vectorization is the default of the whole ecosystem, given the emphasis
most libraries put on broadcasting semantics. So it also makes sense to
adopt it here.

==

jax/experimental/maps.py
tests/xmap_test.py
==================
136f9eca;Adam Paszke;2020-12-09 12:43:17 +0000;Make xmap in/out_axes take in native Python containers
instead of forcing the pytree leaves to be the custom container exported
by xmap. This makes the API a bit less verbose, and also relaxes it so
that the mapping can be both specified through a dict (mapping
positional axes to named axes), as well as a list.

All this thanks to the recent pytree changes that let us terminate the
flattening before reaching true leaves.

==

jax/experimental/maps.py
tests/xmap_test.py
==================
f3bfdf89;Adam Paszke;2020-12-09 12:38:39 +0000;Expose `is_leaf` predicate for `pytree.flatten`
and add tests for it. The change has already been landed in the TF code,
where the C++ pytree components live. This is why I needed to bump the
commit.

==

WORKSPACE
docs/CHANGELOG.rst
jax/tree_util.py
tests/tree_util_tests.py
==================
41d8cc72;Qiumin Xu;2020-12-06 14:26:19 -0800;Add a tflite mnist example for jax2tf.

==

jax/experimental/jax2tf/examples/tflite/README.md
jax/experimental/jax2tf/examples/tflite/mnist/README.md
jax/experimental/jax2tf/examples/tflite/mnist/mnist.py
==================
99c69ec9;Jake VanderPlas;2020-12-09 16:44:44 -0800;Propagate weak types in jnp.array, jnp.full, jnp.full_like, jnp.zeros_like, jnp.ones_like

==

jax/_src/lax/lax.py
jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
33c2dc11;Jake VanderPlas;2020-12-09 10:34:17 -0800;Propagate weak types in jnp.array()

==

jax/_src/numpy/lax_numpy.py
tests/dtypes_test.py
==================
2f5c292b;jax authors;2020-12-10 17:03:05 -0800;Merge pull request #5158 from jakevdp:fix-dtype-none
PiperOrigin-RevId: 346895894

==
==================
7b097340;Jake VanderPlas;2020-12-10 14:14:36 -0800;Fix lax.convert_element_type() with dtype=None

==

jax/_src/lax/lax.py
tests/lax_test.py
==================
245c6d23;jax authors;2020-12-10 13:16:18 -0800;Merge pull request #4850 from jakevdp:weak-types-propagation
PiperOrigin-RevId: 346850541

==
==================
1b9f4e92;jax authors;2020-12-10 12:41:34 -0800;Merge pull request #5156 from jakevdp:arccosh
PiperOrigin-RevId: 346843488

==
==================
eb9adcc9;Jake VanderPlas;2020-12-10 11:50:14 -0800;jnp.arccosh: use same complex branch as numpy

==

docs/CHANGELOG.rst
jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
c63097bc;Jake VanderPlas;2020-12-08 11:05:11 -0800;Add weak_type argument to convert_element_type_p

==

docs/jaxpr.rst
jax/_src/lax/lax.py
jax/_src/numpy/lax_numpy.py
jax/dtypes.py
jax/experimental/doubledouble.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/jax2tf_test.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/loops.py
tests/api_test.py
tests/dtypes_test.py
tests/lax_test.py
==================
24a27e07;jax authors;2020-12-10 10:32:38 -0800;Merge pull request #5150 from jakevdp:allow-singular
PiperOrigin-RevId: 346814700

==
==================
5520a28a;jax authors;2020-12-10 04:55:32 -0800;Merge pull request #5132 from gnecula:tf_colab
PiperOrigin-RevId: 346759909

==
==================
ca326d69;Peter Hawkins;2020-12-09 13:05:39 -0800;Look for an existing bfloat16 type and prefer its use.
This is a stop gap measure to allow JAX and TensorFlow to share the same bfloat16 NumPy type in opensource, where they are built as separate .so files.

A better fix would be to split the bfloat16 extension out of the TensorFlow tree and into its own pip package, but that is more work. For now, change both JAX and TF to prefer an existing NumPy "bfloat16" type over their own version, if one is registered.

PiperOrigin-RevId: 346619498

==

tests/array_interoperability_test.py
==================
8a8a48a9;Jake VanderPlas;2020-12-09 11:39:06 -0800;multivariate_normal.logpdf: add (unimplemented) allow_singular argument

==

jax/_src/scipy/stats/multivariate_normal.py
==================
2f4f9403;jax authors;2020-12-09 11:13:15 -0800;Merge pull request #5110 from minoring:linear-ramp-pad
PiperOrigin-RevId: 346592848

==
==================
c1b9a8b4;minoring;2020-12-09 12:39:14 +0900;Skip linear_ramp test for numpy_version <= 1.16.5

==

tests/lax_numpy_test.py
==================
8f0425d4;jax authors;2020-12-08 13:54:41 -0800;Merge pull request #5018 from jakevdp:pytest-errors
PiperOrigin-RevId: 346403352

==
==================
f74235cd;Jake VanderPlas;2020-12-08 13:03:30 -0800;X32 tests: fail on dtype warnings

==

jax/_src/image/scale.py
jax/_src/lax/lax.py
jax/_src/numpy/lax_numpy.py
jax/_src/scipy/stats/norm.py
pytest.ini
tests/batching_test.py
tests/doubledouble_test.py
tests/dtypes_test.py
tests/jet_test.py
tests/lax_numpy_indexing_test.py
tests/lax_numpy_test.py
tests/lax_scipy_sparse_test.py
tests/linalg_test.py
tests/loops_test.py
tests/masking_test.py
tests/nn_test.py
tests/optimizers_test.py
tests/random_test.py
==================
4ac1c601;Jake VanderPlas;2020-12-08 11:39:36 -0800;Cleanup: remove rng_factory boilerplate in lax_vmap_test.py

==

tests/lax_vmap_test.py
==================
450747cf;Peter Hawkins;2020-12-08 12:31:01 -0500;Only use sum-of-products lowering of integer/bool dots on CPU.
Other XLA backends support integer dots.

==

jax/_src/lax/lax.py
==================
4504f274;jax authors;2020-12-08 08:18:28 -0800;Merge pull request #5136 from jblespiau:changelist/346321202
PiperOrigin-RevId: 346329369

==
==================
e7d6d97b;Jean-Baptiste Lespiau;2020-12-08 16:30:22 +0100;Upgrade the TF version.
Fixes #5135.

==

WORKSPACE
==================
4e0b8a8a;jax authors;2020-12-08 04:01:02 -0800;Merge pull request #4948 from gmittal:master
PiperOrigin-RevId: 346291917

==
==================
5f429293;George Necula;2020-12-08 13:34:18 +0200;[jax2tf] Deprecate the getting_started colab

==

jax/experimental/jax2tf/JAX2TF_getting_started.ipynb
jax/experimental/jax2tf/examples/README.md
==================
fa15380d;jax authors;2020-12-08 01:59:36 -0800;Merge pull request #5130 from hawkinsp:trig
PiperOrigin-RevId: 346277512

==
==================
6455770b;jax authors;2020-12-07 17:48:53 -0800;Merge pull request #5127 from jakevdp:boilerplate
PiperOrigin-RevId: 346218673

==
==================
706d7855;Peter Hawkins;2020-12-07 17:34:27 -0500;Upgrade trigonometric functions to primitives.
This allows for slightly simpler derivatives than differentiating their implementations.

==

jax/_src/lax/lax.py
jax/experimental/jax2tf/jax2tf.py
==================
b1be3949;jax authors;2020-12-07 13:14:18 -0800;Merge pull request #5085 from jakevdp:conv-elem-type-devicearray
PiperOrigin-RevId: 346163986

==
==================
0b17061b;jax authors;2020-12-07 13:06:11 -0800;Merge pull request #5129 from skye:notebook
PiperOrigin-RevId: 346162212

==
==================
9f4015d4;Skye Wanderman-Milne;2020-11-23 17:08:37 +0000;Add NeurIPS 2020 demo notebook.

==

cloud_tpu_colabs/JAX_NeurIPS_2020_demo.ipynb
==================
b3f71d8b;Jake VanderPlas;2020-12-07 10:22:44 -0800;Cleanup: remove rng_factory boilerplate in lax_autodiff_test

==

tests/lax_autodiff_test.py
==================
2a699d0b;jax authors;2020-12-07 10:18:56 -0800;Merge pull request #5038 from skye:sharded_jit_namespace
PiperOrigin-RevId: 346121390

==
==================
28181622;Gautam Mittal;2020-12-07 10:06:28 -0800;Update autodiff_cookbook.ipynb

==
==================
df411ff4;Gautam Mittal;2020-12-07 10:06:08 -0800;Update autodiff_cookbook.ipynb

==

docs/notebooks/autodiff_cookbook.ipynb
==================
4440ef45;Gautam Mittal;2020-12-07 10:05:00 -0800;Move example

==

docs/notebooks/autodiff_cookbook.ipynb
docs/notebooks/quickstart.ipynb
==================
47e4f062;jax authors;2020-12-07 09:29:32 -0800;Merge pull request #4639 from petebu:changelist/335389665
PiperOrigin-RevId: 346110001

==
==================
8a00b4e0;Jake VanderPlas;2020-12-07 09:10:34 -0800;lax.convert_element_type: always return DeviceArray

==

jax/_src/lax/lax.py
jax/experimental/jax2tf/tests/primitives_test.py
tests/api_test.py
tests/lax_test.py
==================
3a4e35f4;jax authors;2020-12-07 08:31:17 -0800;Internal change
PiperOrigin-RevId: 346099032

==

docs/notebooks/Custom_derivative_rules_for_Python_code.ipynb
==================
7556d975;jax authors;2020-12-07 06:51:19 -0800;Merge pull request #5125 from hawkinsp:mypy
PiperOrigin-RevId: 346082229

==
==================
1312d793;Peter Hawkins;2020-12-07 09:42:19 -0500;Update mypy version to 0.790.
This appears to be necessary for Python 3.9.

==

build/test-requirements.txt
==================
73f68c97;jax authors;2020-12-07 06:40:12 -0800;Merge pull request #5124 from bchetioui:bump_jax2tf_version
PiperOrigin-RevId: 346080664

==
==================
57f1bab0;Jean-Baptiste Lespiau;2020-12-07 06:36:02 -0800;Return PyBuffer directly from the C++ jax.jit.
PiperOrigin-RevId: 346080315

==

jax/api.py
tests/api_test.py
==================
f969a74b;jax authors;2020-12-07 06:36:06 -0800;Merge pull request #5114 from inailuig:rocm
PiperOrigin-RevId: 346080269

==
==================
9af7edb3;Benjamin Chetioui;2020-12-07 15:31:21 +0100;[jax2tf] Bump TF nightly version in README.

==

jax/experimental/jax2tf/README.md
==================
d8aabdb8;jax authors;2020-12-07 04:05:26 -0800;Merge pull request #5059 from jpuigcerver:all-to-all-groups
PiperOrigin-RevId: 346060720

==
==================
85fbc6d7;Joan Puigcerver;2020-12-01 02:06:15 +0000;Add axis_index_groups argument to all_to_all.

==

jax/_src/lax/parallel.py
tests/batching_test.py
tests/pmap_test.py
==================
9d70ef26;jax authors;2020-12-07 02:25:29 -0800;Merge pull request #5109 from minoring:fix-conv-stride-shape-rule
PiperOrigin-RevId: 346047432

==
==================
535c8a50;jax authors;2020-12-07 02:18:06 -0800;Merge pull request #4856 from Baschdl:patch-1
PiperOrigin-RevId: 346046119

==
==================
cb259ca8;jax authors;2020-12-07 02:14:23 -0800;Merge pull request #5120 from majnemer:changelist/345982330
PiperOrigin-RevId: 346046032

==
==================
3ce25a11;jax authors;2020-12-07 00:06:26 -0800;Merge pull request #5119 from hawkinsp:dlpack
PiperOrigin-RevId: 346030467

==
==================
1bb786c3;jax authors;2020-12-07 00:02:38 -0800;Merge pull request #5118 from hawkinsp:tol
PiperOrigin-RevId: 346030382

==
==================
56158fe8;David Majnemer;2020-12-06 14:25:29 -0800;Reenable some tests disabled on TPU

==

tests/lax_control_flow_test.py
==================
330e69dd;Clemens Giuliani;2020-12-05 00:07:04 +0100;Add support for ROCm

==

build/build.py
==================
59175d26;Peter Hawkins;2020-12-06 16:22:39 -0500;Fix JAX/Torch DLPack test on GPU.

==

tests/array_interoperability_test.py
==================
03f423bb;Peter Hawkins;2020-12-06 15:44:44 -0500;Relax some test tolerances that appear to be sensitive to the random seed.

==

tests/lax_scipy_sparse_test.py
tests/lax_scipy_test.py
tests/linalg_test.py
==================
a04f8197;Skye Wanderman-Milne;2020-11-28 14:51:05 -0800;Expose sharded_jit, PartitionSpec, and with_sharding_constraint in jax.experimental namespace.
I didn't move any files to avoid breaking existing callers.

==

jax/experimental/__init__.py
tests/sharded_jit_test.py
==================
b133f14a;jax authors;2020-12-06 09:44:50 -0800;Merge pull request #5066 from bchetioui:remaining_tests
PiperOrigin-RevId: 345963234

==
==================
a69c1daf;jax authors;2020-12-06 07:42:39 -0800;Merge pull request #5090 from bchetioui:profiling_doc
PiperOrigin-RevId: 345955153

==
==================
3a72188c;jax authors;2020-12-06 05:45:49 -0800;Merge pull request #5103 from jakevdp:boilerplate
PiperOrigin-RevId: 345947212

==
==================
2cd21885;George Necula;2020-12-06 15:41:02 +0200;Update docs/profiling.md
Co-authored-by: 8bitmp3 <19637339+8bitmp3@users.noreply.github.com>
==

docs/profiling.md
==================
f51db5cd;George Necula;2020-12-06 15:39:30 +0200;Update lax_test.py

==

tests/lax_test.py
==================
33c3cd0e;George Necula;2020-12-06 15:38:41 +0200;Update lax.py

==

jax/_src/lax/lax.py
==================
13954cd7;Benjamin Chetioui;2020-12-04 14:51:02 +0100;[jax2tf] SkipTest on TPU for integer_pow to avoid rtol = NaN.

==

jax/experimental/jax2tf/tests/primitives_test.py
==================
9147560f;Benjamin Chetioui;2020-12-04 13:38:14 +0100;[jax2tf] Skip tests producing overflows for int dtypes in integer_pow.
Also adds the limitation to the documentation.

==

jax/experimental/jax2tf/g3doc/primitives_with_limited_support.md
jax/experimental/jax2tf/g3doc/primitives_with_limited_support.md.template
jax/experimental/jax2tf/tests/correctness_stats.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
53130e73;Benjamin Chetioui;2020-12-03 17:23:35 +0100;[jax2tf] Disable bitcast_convert_type c64 -> c64 test on TPU.

==

jax/experimental/jax2tf/tests/primitives_test.py
==================
417eec84;Benjamin Chetioui;2020-12-01 16:28:34 +0100;[jax2tf] Update primitives with limited support.

==

jax/experimental/jax2tf/g3doc/primitives_with_limited_support.md
==================
99ad7195;Benjamin Chetioui;2020-12-01 14:39:09 +0100;[jax2tf] Added testing for the conversion of stop_gradient.

==

jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
cdba4a73;Benjamin Chetioui;2020-11-30 17:47:36 +0100;[jax2tf] Added testing for the conversion of tie_in.

==

jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
e6d12772;Benjamin Chetioui;2020-11-30 17:06:54 +0100;[jax2tf] Added testing for the conversion of add_jaxvals_p.
Note that tests skip types that are not generally compatible with
jax2tf, e.g. core.Unit, which can be passed to this primitive.

==

jax/experimental/jax2tf/tests/correctness_stats.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
7a444839;Benjamin Chetioui;2020-11-25 18:45:12 +0100;[jax2tf] Added testing for the conversion of bitcast_convert_type.

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/correctness_stats.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
d62fe001;Benjamin Chetioui;2020-11-24 17:14:10 +0100;[jax2tf] Added testing for the conversion of sub.

==

jax/experimental/jax2tf/tests/correctness_stats.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
099ff263;Benjamin Chetioui;2020-11-24 16:48:52 +0100;[jax2tf] Added testing for the conversion of device_put.

==

jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
fdcb1bbd;Benjamin Chetioui;2020-11-24 15:53:34 +0100;[jax2tf] Added testing for the conversion of rev.

==

jax/experimental/jax2tf/tests/correctness_stats.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
5bf5f0bd;Benjamin Chetioui;2020-11-24 15:26:44 +0100;[jax2tf] Added testing for the conversion of reshape.

==

jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
809c54e8;Benjamin Chetioui;2020-11-23 18:50:21 +0100;[jax2tf] Added testing for the conversion of pow.

==

jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
92821fe1;Benjamin Chetioui;2020-12-05 10:29:57 +0100;[jax2tf] Added testing for the conversion of integer_pow.

==

jax/experimental/jax2tf/tests/correctness_stats.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
3b6e308b;minoring;2020-12-05 13:09:45 +0900;Implement linear_ramp pad mode in jax.numpy.pad
Related #5010

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
27a4c888;jax authors;2020-12-04 22:15:14 -0800;Merge pull request #5112 from google:update-pypi
PiperOrigin-RevId: 345816276

==
==================
4664e827;Matthew Johnson;2020-12-04 21:57:47 -0800;update version and changelog for pypi

==

docs/CHANGELOG.rst
jax/version.py
==================
7084e3d4;jax authors;2020-12-04 21:43:41 -0800;Merge pull request #5111 from google:sda-repr
PiperOrigin-RevId: 345813600

==
==================
8b64c3c6;Matthew Johnson;2020-12-04 21:25:51 -0800;fix inherited repr method for ShardedDeviceArray
fixes #5102

==

jax/interpreters/xla.py
tests/pmap_test.py
==================
b2d68b43;minoring;2020-12-05 11:53:39 +0900;Add checking dimension of window_strides in shape rule
Related #5087

==

jax/_src/lax/lax.py
tests/lax_test.py
==================
f776cdc1;jax authors;2020-12-04 17:52:38 -0800;Merge pull request #5105 from google:device-put-replicated2
PiperOrigin-RevId: 345792612

==
==================
f538cd99;jax authors;2020-12-04 17:17:31 -0800;Merge pull request #5095 from google:convert-element-type-old-dtype
PiperOrigin-RevId: 345787938

==
==================
13b96cc4;Matthew Johnson;2020-12-04 17:07:23 -0800;fix typo

==

tests/pmap_test.py
==================
475d0400;Matthew Johnson;2020-12-04 16:50:55 -0800;fix docstring tests

==

jax/api.py
==================
2a8f71e0;Matthew Johnson;2020-12-04 16:47:04 -0800;deflake tests

==

tests/pmap_test.py
==================
6992ae18;Matthew Johnson;2020-12-04 16:42:49 -0800;switch assertions per reviewer comment

==

tests/pmap_test.py
==================
25b3d843;Matthew Johnson;2020-12-04 16:40:59 -0800;fix jax2tf

==

jax/experimental/jax2tf/tests/primitive_harness.py
==================
d8b09fa4;jax authors;2020-12-04 16:27:31 -0800;Merge pull request #5107 from skye:notebook_placeholder
PiperOrigin-RevId: 345779856

==
==================
a6b07098;Skye Wanderman-Milne;2020-12-04 15:46:51 -0800;Demo notebook placeholder

==

cloud_tpu_colabs/JAX_NeurIPS_2020_demo.ipynb
==================
38160105;jax authors;2020-12-04 15:15:43 -0800;Merge pull request #5104 from shoyer:normalize-callable
PiperOrigin-RevId: 345766696

==
==================
2364e81a;Matthew Johnson;2020-12-04 13:36:44 -0800;Merge branch 'master' into convert-element-type-old-dtype

==
==================
5f4f08fe;Matthew Johnson;2020-12-04 13:34:07 -0800;update jax2tf convert_element_type, remove test

==

jax/experimental/jax2tf/jax2tf.py
tests/lax_test.py
==================
ac8c7843;jax authors;2020-12-04 13:05:47 -0800;Merge pull request #5101 from google:device-put-sharded-docstring
PiperOrigin-RevId: 345740577

==
==================
6599a2ed;Matthew Johnson;2020-12-04 12:59:44 -0800;make mypy happy

==

jax/api.py
==================
dc610e45;Matthew Johnson;2020-12-04 12:53:36 -0800;add jax.device_put_replicated
Also move tests for device_put_sharded into pmap_test.py, since that
file tests with multiple devices even in our OSS CI.

Add both device_put_replicated and device_put_sharded to
jax/__init__.py.

==

jax/__init__.py
jax/api.py
tests/api_test.py
tests/pmap_test.py
==================
cd9f6ccc;Stephan Hoyer;2020-12-04 12:00:59 -0800;Support ndarrays as arguments to cg and gmres
This is consistent with SciPy, and makes things a little bit less
surprising for users.

==

jax/_src/scipy/sparse/linalg.py
tests/lax_scipy_sparse_test.py
==================
941be916;Jake VanderPlas;2020-12-04 09:44:50 -0800;Cleanup: remove unnecessary rng_factory boilerplate from linalg_test.py

==

tests/linalg_test.py
==================
1464142b;jax authors;2020-12-04 10:28:12 -0800;Merge pull request #5035 from saklani:master
PiperOrigin-RevId: 345705902

==
==================
49e98c4f;Matthew Johnson;2020-12-04 10:19:39 -0800;device_put_sharded tweaks and docstring detail
I turned some assertions into errors, since they corresponded to
checking whether the user input was valid (rather than internal errors).
I always think of assertions as for internal consistency checks only,
since in principle they can be disabled with `python -O` (though it
seems no one does that).

==

jax/api.py
==================
a561df24;jax authors;2020-12-04 09:46:11 -0800;Merge pull request #5083 from bchetioui:test_convert_element_type
PiperOrigin-RevId: 345696050

==
==================
236a6492;Benjamin Chetioui;2020-11-30 18:29:13 +0100;[jax2tf] Added testing for the conversion of convert_element_type.

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/correctness_stats.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
42780cf2;saklani;2020-12-04 11:35:32 +0530;added prepend and append to diff

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
f0b13c19;jax authors;2020-12-03 20:00:26 -0800;Merge pull request #5093 from jakevdp:cleanup-boilerplate
PiperOrigin-RevId: 345590163

==
==================
c7d19fd8;jax authors;2020-12-03 19:48:52 -0800;Merge pull request #5060 from minoring:support-padding-modes
PiperOrigin-RevId: 345588715

==
==================
327ac8dd;minoring;2020-12-01 13:49:30 +0900;Implement statistic pad mode in jax.numpy.pad

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
6f3a0c7b;jax authors;2020-12-03 16:27:55 -0800;Merge pull request #5092 from hawkinsp:jaxlib
PiperOrigin-RevId: 345560236

==
==================
7f6f5f2f;jax authors;2020-12-03 12:59:25 -0800;Merge pull request #4997 from bchetioui:tfjs_exp
PiperOrigin-RevId: 345516398

==
==================
7147d272;jax authors;2020-12-03 12:22:55 -0800;Merge pull request #5086 from jakevdp:test-rng-cleanup
PiperOrigin-RevId: 345508883

==
==================
fa573ef0;jax authors;2020-12-03 12:07:52 -0800;Merge pull request #5077 from google:sinc-jvp
PiperOrigin-RevId: 345505504

==
==================
8ed7be49;Matthew Johnson;2020-12-03 11:49:43 -0800;make convert_element_type_p not require old_dtype
Previously we needed to add old_dtype to the primitive's parameters so
that it could be transposed. However, now that avals information is
available in more places (in particular, attached to the UndefinedPrimal
instances we use to indicate inputs with respect to which we are
transposing), we don't need that kind of a hack!

This is a follow-up to #2410.

==

docs/jaxpr.rst
jax/_src/lax/lax.py
jax/experimental/doubledouble.py
tests/api_test.py
tests/host_callback_test.py
tests/lax_test.py
==================
4a774978;Peter Hawkins;2020-12-03 14:02:43 -0500;Add test for chkstk_darwin symbol to jaxlib Mac builds.
We don't know why some builds produce this and others do not, but we can at least test for it to prevent bad releases.

==

build/build_wheel.py
==================
3ea15b45;Jake VanderPlas;2020-12-03 11:01:16 -0800;Cleanup: remove unnecessary rng_factory boilerplace in lax_test.py

==

tests/lax_test.py
==================
95aca20a;jax authors;2020-12-03 10:33:44 -0800;Merge pull request #5034 from shoyer:gmres-cleanup
PiperOrigin-RevId: 345482852

==
==================
01fbf780;Jake VanderPlas;2020-12-02 17:00:25 -0800;Cleanup: remove unnecessary rng_factory boilerplate in lax_numpy_test

==

tests/lax_numpy_test.py
==================
6cc5b283;Stephan Hoyer;2020-11-27 14:44:06 -0800;Cleanup/fixup jax.scipy.sparse.linalg.gmres and expose it publicly.

==

docs/jax.scipy.rst
jax/_src/scipy/sparse/linalg.py
jax/scipy/sparse/linalg.py
tests/lax_scipy_sparse_test.py
==================
c9ecb8ea;jax authors;2020-12-03 08:32:01 -0800;Merge pull request #4987 from jblespiau:changelist/340305958
PiperOrigin-RevId: 345457906

==
==================
51b1ef90;Benjamin Chetioui;2020-12-03 16:17:48 +0100;Update TF/TB versions for profiling in documentation.

==

docs/profiling.md
==================
dfcf38d8;jax authors;2020-12-03 06:12:05 -0800;Merge pull request #5089 from hawkinsp:takealongaxis
PiperOrigin-RevId: 345435845

==
==================
515b0a31;Peter Hawkins;2020-12-03 08:40:23 -0500;Fix integer overflow in jnp.take_along_axis for small integer index types.

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
ad2de755;Jean-Baptiste Lespiau;2020-11-02 22:39:45 +0100;Add dynamically methods to _DeviceArray and PyBuffer.
As you suggested during a review, calling `_DeviceArray` directly when LazyExpr are present is clearer.

==

jax/_src/dlpack.py
jax/_src/lax/lax.py
jax/_src/numpy/lax_numpy.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
tests/api_test.py
==================
d6e8a701;jax authors;2020-12-03 02:43:19 -0800;Merge pull request #5032 from inailuig:imag-transpose-rule
PiperOrigin-RevId: 345412558

==
==================
06619a88;Clemens Giuliani;2020-12-02 22:35:24 +0100;add tests for the transpose rules of real and imag

==

tests/lax_autodiff_test.py
==================
29370c4d;jax authors;2020-12-02 13:03:42 -0800;Merge pull request #5055 from apaszke:xmap-cleanup
PiperOrigin-RevId: 345295490

==
==================
2ebd5285;jax authors;2020-12-02 10:29:27 -0800;Merge pull request #5064 from apaszke:pmap-caching-fix
PiperOrigin-RevId: 345261362

==
==================
e6c01aea;Matthew Johnson;2020-12-02 08:55:14 -0800;fix broadcasting bug in sinc jvp rule

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
ca802895;Adam Paszke;2020-12-02 14:13:05 +0000;Fix pmap compilation cache regressions from #4904.
AD didn't use `HashableFunction` enough, tripping up the compilation
cache. I've also used the occasion to make function hashing a little
safer by including the Python bytecode of the wrapped function as part
of the key.

==

jax/api.py
jax/core.py
jax/experimental/general_map.py
jax/interpreters/ad.py
jax/interpreters/batching.py
jax/interpreters/partial_eval.py
jax/interpreters/sharded_jit.py
jax/test_util.py
jax/util.py
tests/api_test.py
tests/pmap_test.py
tests/sharded_jit_test.py
==================
d3136b44;Adam Paszke;2020-11-27 16:44:08 +0000;Remove fake xmap resources, remove gmap
xmap can now handle real devices, so there's no point in maintaining the
simulated codepaths. Also, remove single-dimensional gmap as it will
have to be superseeded by a more xmap-friendly alternative.

==

jax/BUILD
jax/experimental/maps.py
tests/xmap_test.py
==================
4378513e;jax authors;2020-12-02 04:59:51 -0800;Merge pull request #5076 from hawkinsp:xla
PiperOrigin-RevId: 345210783

==
==================
8cd85550;Matthew Johnson;2020-12-02 00:36:39 -0800;improve sinc jvp at zero, fixes #5054

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
621f34b6;jax authors;2020-12-01 18:50:08 -0800;Merge pull request #5074 from jakevdp:multigammaln-check
PiperOrigin-RevId: 345144611

==
==================
073f1329;Peter Hawkins;2020-12-01 21:44:08 -0500;Update XLA and fix CI breakage at TF head.
It seems we must now explicitly load tf_toolchains in our WORKSPACE file.

==

WORKSPACE
==================
982fd354;jax authors;2020-12-01 16:25:43 -0800;Merge pull request #5037 from skye:sharded_jit_compilation_cache
PiperOrigin-RevId: 345123571

==
==================
11352445;jax authors;2020-12-01 15:17:39 -0800;Merge pull request #4959 from bchetioui:issue4952
PiperOrigin-RevId: 345110593

==
==================
8835e92b;jax authors;2020-12-01 14:43:21 -0800;Merge pull request #5072 from hawkinsp:fixes
PiperOrigin-RevId: 345103797

==
==================
15f2bc5c;jax authors;2020-12-01 14:08:37 -0800;Merge pull request #4893 from ayush-1506:hypot
PiperOrigin-RevId: 345096331

==
==================
c43cfbd8;Jake VanderPlas;2020-12-01 13:31:10 -0800;Better error for jsp.special.multigammaln

==

jax/_src/scipy/special.py
==================
c5b260c7;Peter Hawkins;2020-12-01 16:02:06 -0500;Relax some test tolerances and disable some tests on GPU.

==

tests/gmap_test.py
tests/lax_control_flow_test.py
tests/polynomial_test.py
==================
9c562778;Benjamin Chetioui;2020-12-01 17:23:36 +0100;Add "Argument classes" section to jax.lax.rst.

==

docs/jax.lax.rst
==================
17d9fc14;jax authors;2020-12-01 09:44:27 -0800;Merge pull request #5056 from jakevdp:fix-array-check
PiperOrigin-RevId: 345039525

==
==================
f93ca369;Benjamin Chetioui;2020-11-19 15:25:06 +0100;[jax2tf] Fix and test conversion of round. Fixes google/jax#4952.

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
4994cf09;Benjamin Chetioui;2020-11-23 15:33:04 +0100;Added a rounding method kwarg to lax.round.

==

jax/_src/lax/lax.py
jax/_src/numpy/lax_numpy.py
jax/lax/__init__.py
tests/lax_test.py
==================
bdcf17cd;jax authors;2020-12-01 07:23:11 -0800;Merge pull request #5063 from bchetioui:fix-convert-element-type-dtype-rule
PiperOrigin-RevId: 345014852

==
==================
98a335b0;jax authors;2020-12-01 07:10:27 -0800;Merge pull request #5062 from bchetioui:sort-complex-tpu
PiperOrigin-RevId: 345013203

==
==================
efb9f743;Benjamin Chetioui;2020-12-01 14:10:57 +0100;Fix inconsistent old_dtype in tri

==

jax/_src/lax/lax.py
==================
a39aeb75;Benjamin Chetioui;2020-11-30 18:28:12 +0100;Fix dtype rule of convert_element_type_p to catch mismatched old_dtype.

==

jax/_src/lax/lax.py
tests/lax_test.py
==================
a88e3257;Benjamin Chetioui;2020-12-01 12:34:41 +0100;[jax2tf] Enable complex sort test on TPU.
The change at google/jax#5052 indicates that this now should work.

==

jax/experimental/jax2tf/tests/primitives_test.py
==================
2c822203;ayush-1506;2020-11-13 13:29:16 +0530;More stable implementation of np.hypot

==

jax/_src/numpy/lax_numpy.py
==================
087b7b81;jax authors;2020-11-30 18:09:39 -0800;Merge pull request #5058 from hawkinsp:decruft
PiperOrigin-RevId: 344926858

==
==================
e92380f5;jax authors;2020-11-30 18:00:31 -0800;Merge pull request #5057 from hawkinsp:docs3
PiperOrigin-RevId: 344925641

==
==================
a0627303;Peter Hawkins;2020-11-30 20:32:29 -0500;Remove code guarding against jaxlibs older than the minimum version.

==

tests/lax_test.py
==================
c83343d8;Peter Hawkins;2020-11-30 20:13:01 -0500;Add a few notes about Windows builds and a link to the build instructions.

==

README.md
docs/developer.rst
==================
523d0d43;jax authors;2020-11-30 17:01:35 -0800;Merge pull request #5052 from majnemer:changelist/344725458
PiperOrigin-RevId: 344917432

==
==================
36c85f65;Jake VanderPlas;2020-11-30 16:08:36 -0800;validate input on _check_arraylike

==

jax/_src/numpy/lax_numpy.py
==================
fca46ade;Peter Hawkins;2020-11-30 10:31:42 -0800;Remove duplicate code to copy cusolver_kernels in wheel build.
PiperOrigin-RevId: 344840695

==

build/build_wheel.py
==================
a529ba7b;jax authors;2020-11-30 09:53:38 -0800;Merge pull request #5020 from google:pdot2
PiperOrigin-RevId: 344831827

==
==================
579235bd;jax authors;2020-11-30 09:07:15 -0800;Merge pull request #5025 from apaszke:xmap-spmd-lowering
PiperOrigin-RevId: 344823297

==
==================
ac0f0713;Matthew Johnson;2020-11-30 08:55:55 -0800;add pdot_p to unsupported jax2tf primitives

==

jax/experimental/jax2tf/jax2tf.py
==================
13506cb2;jax authors;2020-11-30 08:32:50 -0800;Merge pull request #5045 from LenaMartens:patch-1
PiperOrigin-RevId: 344817637

==
==================
7a5d8a16;David Majnemer;2020-11-29 16:34:54 -0800;TPUs support sorting complex operands

==

tests/lax_numpy_test.py
tests/lax_test.py
==================
42a18fb1;jax authors;2020-11-30 07:52:06 -0800;Merge pull request #5046 from hawkinsp:fix
PiperOrigin-RevId: 344810919

==
==================
4ba3b8de;jax authors;2020-11-30 07:48:23 -0800;Merge pull request #5049 from hawkinsp:xla
PiperOrigin-RevId: 344810876

==
==================
409ee762;Peter Hawkins;2020-11-30 10:42:07 -0500;Update XLA.

==

WORKSPACE
docs/CHANGELOG.rst
==================
34965839;Adam Paszke;2020-11-26 17:11:01 +0000;Add an experimental xmap lowering via the SPMD partitioner
As suggested by @jekbradbury. The SPMD partitioner might allow us to
avoid writing partitioning formulas on the JAX level and can result in
better performance by giving the compiler more flexibility.

==

jax/experimental/general_map.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
jax/lib/xla_bridge.py
tests/gmap_test.py
==================
94501722;jax authors;2020-11-30 06:28:05 -0800;Merge pull request #5026 from apaszke:xmap-out-axes
PiperOrigin-RevId: 344800607

==
==================
6cdd956a;jax authors;2020-11-30 06:17:58 -0800;Merge pull request #5042 from redwrasse:redwrasse-patch-1
PiperOrigin-RevId: 344799393

==
==================
e40cba9d;Peter Hawkins;2020-11-30 08:57:12 -0500;Fix broken CI build due to NumPy 1.18 bug in full_like tests.

==

tests/lax_numpy_test.py
==================
d7743140;Lena Martens;2020-11-30 14:23:52 +0100;Add named_call autofunction description to docs

==

docs/jax.rst
==================
06957e8c;redwrasse;2020-11-29 18:51:24 -0700;fix readme
fix readme
==

README.md
==================
d19de845;jax authors;2020-11-28 15:36:38 -0800;Merge pull request #5036 from google:zero-fixes2
PiperOrigin-RevId: 344640882

==
==================
efe3f4b0;Skye Wanderman-Milne;2020-11-21 01:09:08 +0000;Fix sharded_jit compilation caching.
Also logs sharded_jit compilations if JAX_LOG_COMPILES is enabled.

==

jax/interpreters/sharded_jit.py
tests/sharded_jit_test.py
==================
8fef9e8a;Matthew Johnson;2020-11-28 09:13:21 -0800;clean up symbolic zero handling in transpose rules
We had a few rules in which:
1. transpose rules didn't correctly handle symbolic zero cotangent
inputs, and/or
2. transpose rules returned the ad_util.Zero class rather than an
instance of it (and/or returned a singleton where they should return a
list)

This solves a FIXME in the code left by @apaszke.

(Second attempt at this fix after #5030 was rolled back due to the div
transpose rule not being cleaned up yet, causing a new check I added to
fail.)

==

jax/_src/lax/lax.py
jax/interpreters/ad.py
==================
dd9526bd;jax authors;2020-11-27 18:01:22 -0800;Copybara import of the project:
--
cd81117b6a2899411646c45fa9c27b676fc47f86 by Matthew Johnson <mattjj@google.com>:

clean up symbolic zero handling in transpose rules

We had a few rules in which:
1. transpoes rules didn't correctly handle symbolic zero cotangent
inputs, and/or
2. transpose rules returned the ad_util.Zero class rather than an
instance of it (and/or returned a singleton where they should return a
list)

This solves a FIXME in the code left by @apaszke.

PiperOrigin-RevId: 344571259

==

jax/_src/lax/lax.py
jax/interpreters/ad.py
==================
730e4f7e;jax authors;2020-11-27 17:19:08 -0800;Merge pull request #5030 from google:zero-fixes
PiperOrigin-RevId: 344568942

==
==================
abdce3e5;Clemens Giuliani;2020-11-28 01:10:01 +0100;Simplify the Transpose rule for 'imag'

==

jax/_src/lax/lax.py
==================
f196ffd6;Clemens Giuliani;2020-11-28 00:05:57 +0100;Remove the (now redundant) Differentiation rule for 'imag'

==

jax/_src/lax/lax.py
==================
7eed4356;Clemens Giuliani;2020-11-27 23:54:35 +0100;Add Transpose rule (for reverse-mode differentiation) for 'imag'

==

jax/_src/lax/lax.py
==================
cd81117b;Matthew Johnson;2020-11-27 14:32:59 -0800;clean up symbolic zero handling in transpose rules
We had a few rules in which:
1. transpoes rules didn't correctly handle symbolic zero cotangent
inputs, and/or
2. transpose rules returned the ad_util.Zero class rather than an
instance of it (and/or returned a singleton where they should return a
list)

This solves a FIXME in the code left by @apaszke.

==

jax/_src/lax/lax.py
jax/interpreters/ad.py
==================
0e809164;Gautam Mittal;2020-11-27 21:37:37 +0000;Merge branch 'master' of https://github.com/google/jax

==
==================
29648fa5;Matthew Johnson;2020-11-27 11:28:49 -0800;remove DynamicJaxprTrace.process_xmap

==

jax/experimental/general_map.py
==================
58e441be;Matthew Johnson;2020-11-25 15:23:00 -0800;add experimental pdot primitive, basic tests

==

jax/_src/lax/lax.py
jax/_src/lax/parallel.py
jax/experimental/general_map.py
jax/interpreters/partial_eval.py
jax/lax/__init__.py
tests/batching_test.py
tests/gmap_test.py
tests/pmap_test.py
==================
ed86ae49;Adam Paszke;2020-11-27 16:32:03 +0000;Add proper support for out_axes in xmap

==

jax/experimental/general_map.py
tests/gmap_test.py
==================
d328816a;jax authors;2020-11-27 03:24:06 -0800;Merge pull request #5014 from apaszke:xmap-nested
PiperOrigin-RevId: 344510502

==
==================
693b1217;jax authors;2020-11-25 17:44:21 -0800;Merge pull request #5019 from jakevdp:dtype-warning
PiperOrigin-RevId: 344342497

==
==================
9e1ebb51;Jake VanderPlas;2020-11-25 14:59:30 -0800;X32: don't warn when builtin type passed as dtype

==

jax/_src/lax/lax.py
tests/api_test.py
==================
9c3a61cd;jax authors;2020-11-25 14:43:18 -0800;Merge pull request #5011 from google:unify-reduction-collectives
PiperOrigin-RevId: 344319302

==
==================
8d884e24;Matthew Johnson;2020-11-25 14:17:27 -0800;silence weird type error

==

jax/_src/lax/parallel.py
==================
0965bc40;Matthew Johnson;2020-11-25 14:15:06 -0800;fix bug

==

jax/_src/lax/parallel.py
==================
94974e5b;jax authors;2020-11-25 12:16:51 -0800;Merge pull request #5016 from google:debug-nans-stores
PiperOrigin-RevId: 344296425

==
==================
f9f97f7f;jax authors;2020-11-25 11:12:22 -0800;Merge pull request #4835 from google:xmap
PiperOrigin-RevId: 344284665

==
==================
7266fcbd;Matthew Johnson;2020-11-25 10:25:22 -0800;when resetting stores in nan debugging, check None

==

jax/interpreters/xla.py
==================
5ac16d14;jax authors;2020-11-25 10:24:07 -0800;Merge pull request #5008 from jakevdp:equal-nan
PiperOrigin-RevId: 344276056

==
==================
3053f4bc;Matthew Johnson;2020-11-25 10:16:40 -0800;add link to XLA bug about complex dtype allreduce

==

jax/_src/lax/parallel.py
==================
80973185;Matthew Johnson;2020-11-24 15:07:22 -0800;cleanup: unify pmin/pmax implementations with psum

==

jax/_src/lax/parallel.py
==================
ebd51e12;Matthew Johnson;2020-11-25 10:14:19 -0800;address reviewer comments

==

jax/_src/lax/parallel.py
==================
50cb604f;Matthew Johnson;2020-11-24 10:45:03 -0800;fix doc test failure

==

docs/jaxpr.rst
==================
8057cf91;Matthew Johnson;2020-11-24 09:58:44 -0800;simplify vmap collectives from two sets of rules to one
Specifically we:
1. remove the need for split_axis rules in batching.py, and instead just
rely on collective rules (namely to handle vectorizing over a single
named axis even if the collective is applied over multiple named axes)
2. simplify BatchTrace.process_primitive so that we don't pass tracers
into rules and rely on a subtle recursion

This change breaks all_to_all when used with multiple axis names, and in
particular it breaks all_to_all given the current gmap/xmap lowering
strategy of substituting multiple axis names in place of single axis
names. We believe we can replicate the previous logic with the new rule
organization, but we're leaving that for follow-up work because it's
tricky, and because we might end up changing lowering strategies not to
require axis substitution in the same way.

==

jax/_src/lax/parallel.py
jax/core.py
jax/experimental/general_map.py
jax/interpreters/batching.py
tests/batching_test.py
tests/pmap_test.py
==================
9dbdba29;jax authors;2020-11-25 09:55:16 -0800;Merge pull request #5003 from cloudhan:strict_action_env
PiperOrigin-RevId: 344270903

==
==================
ef1045bd;Adam Paszke;2020-11-20 13:46:27 +0000;Add support for nested xmaps
With the caveat that the outer xmap cannot use the `vectorize` resource
mapping, because the batching rule for xmap is not implemented yet (this
is going to be a follow up). But as long as the outer xmap only uses
real devices the nesting should work fine.

Note that we don't try to hard to handle perfectly nested `xmap`s
efficiently. But this shouldn't be an issue, because it is usually
trivial to flatten them on the user side.

Very similar logic can now be used to implement a `sharded_jit` version
that composes well with `xmap` (although it is unclear if it's an API
that we want to have in the long run).

==

jax/experimental/general_map.py
jax/interpreters/pxla.py
tests/gmap_test.py
==================
82aed620;Jake VanderPlas;2020-11-24 11:54:40 -0800;Support equal_nan parameter in jnp.allclose

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
c7057d5f;jax authors;2020-11-25 09:07:27 -0800;Merge pull request #5005 from apaszke:xmap-primitive
PiperOrigin-RevId: 344263137

==
==================
5ee2de16;Adam Paszke;2020-11-20 11:43:11 +0000;Forbid pmap/soft_pmap/sharded_jit inside xmap

==

jax/core.py
jax/experimental/general_map.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
==================
afd57e31;jax authors;2020-11-24 17:11:53 -0800;Merge pull request #5012 from jakevdp:asarray
PiperOrigin-RevId: 344158508

==
==================
9d2f6148;Jake VanderPlas;2020-11-24 16:05:48 -0800;Call asarray() rather than array() to avoid host round-trips.

==

jax/_src/nn/functions.py
jax/_src/numpy/lax_numpy.py
jax/_src/numpy/linalg.py
jax/_src/random.py
jax/_src/scipy/stats/norm.py
jax/experimental/ode.py
==================
30bb4cf5;jax authors;2020-11-24 15:11:30 -0800;Merge pull request #4989 from jakevdp:gradient-args
PiperOrigin-RevId: 344139674

==
==================
bdaae722;Jake VanderPlas;2020-11-20 13:18:45 -0800;Make jnp.gradient() call signature match np.gradient

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
c9579b85;jax authors;2020-11-24 12:59:07 -0800;Merge pull request #5007 from jakevdp:avoid-copy
PiperOrigin-RevId: 344115926

==
==================
2d9a1072;jax authors;2020-11-24 12:04:11 -0800;Merge pull request #4919 from google:update-readme-citation
PiperOrigin-RevId: 344105079

==
==================
43549157;jax authors;2020-11-24 11:59:12 -0800;Merge pull request #4904 from apaszke:pmap-out-axes
PiperOrigin-RevId: 344104708

==
==================
cb8d39f2;jax authors;2020-11-24 10:55:51 -0800;Merge pull request #5004 from dpfau:complex_slogdet
PiperOrigin-RevId: 344091727

==
==================
3845712a;Jake VanderPlas;2020-11-24 10:49:11 -0800;jnp.array(): avoid unnecessary numpy array copy

==

jax/_src/numpy/lax_numpy.py
==================
c5433b0e;Adam Paszke;2020-11-19 18:22:35 +0000;Make xmap into a primitive
Add a compilation cache. Also make sure that it raises a clear error
when you try to use it with other transforms.

Also, add a bunch of checks to make sure that the arguments are valid.

==

jax/experimental/general_map.py
jax/interpreters/pxla.py
tests/gmap_test.py
==================
5879967c;Adam Paszke;2020-11-09 17:23:16 +0000;Add support for non-zero (but still not-None) out_axes in pmap
Previously `pmap` didn't have the `out_axes` parameter (unlike `vmap`),
but its semantics would match the specification of `out_axes=0` (i.e.
all outputs should be stacked along the first axis). This patch makes it
possible to specify non-zero values for out_axes, but more importantly
it lays down the groundwork for `xmap` which will have to use some
extremely similar (if not the same) code paths.

One thing to note is that when I started this implementation I was also
planning to add support for `out_axes=None`, which would allow us to
stop using the `unbroadcast` hack, and most of the code is written with
that in mind. Unfortunately it turned out that the correct
implementation of the transpose rule for maps that do allow unmapped
outputs would require me to pretty much simulate what avals-with-names
is supposed to achieve. Technically replicated outputs should work
today, for as long as the user does not do reverse-mode AD of `pmap`.
But I decided that it's better to just disable them altogether until we
can get the full and correct behavior.

* Implementation details *

This patch is significantly more involved than the one that implemented
general `in_axes` support. That previous one at least had the foundation
of `mapped_invars` which already behaved pretty similarly to general
`in_axes`. From a quick glance one might think that `out_axes` should
behave similarly to `in_axes`, but it turns out that this is not the
case, at least not if we're interested in keeping those primitives
final-style.

** Thunking **

The biggest difficulty with handling `out_axes` in final style
primitives is that we want to treat them as a prefix of the output
pytree, but we don't know the structure of the output pytree until the
user function is evaluated! And the user function is not evaluated until
we've applied all transforms and reached the impl rule! The solution to
this problem is "straightforward": instead of putting `out_axes` as a
primitive parameter, we bundle an `out_axes_thunk` which can only be
called successfully after the wrapped function has been executed. The
thunk returns a list of flat `out_axes`, expanded to the output pytree.
However, the thunking presents us with two problems:

*** Transformations ***

Each transformation that modifies the number of outputs needs to ensure
that the thunk is updated to reflect the new values. To make things
worse a lot of the transforms can learn the number of added outputs
_only after the wrapped function is evaluated_, which leads to the
following "time travel" pattern that can be found in most `Trace`s:
```py
@lu.transformation_with_aux
def compute_output_statistic(*args, **kwargs):
  outputs = yield args, kwargs
  yield outputs, compute_statistic(outputs)
wrapped_fun, output_statistic = compute_output_statistic(wrapped_fun)
def new_out_axes_thunk():
  old_out_axes = params['out_axes_thunk']()
  return compute_new_out_axes(old_out_axes(), output_statistic())
primitive.bind(wrapped_fun, dict(params, out_axes_thunk=new_out_axes_thunk))
```
The reason why we have to structure the code this way is that we can
only specify a new `out_axes_thunk` before we bind the primitive, but we
need the outputs of bind to know how to update the `out_axes_thunk`. To
make things worse, the implementation of `bind` is allowed to make a
call to `out_axes_thunk` _immediately after `wrapped_fun` is evaluated_.
This means that we cannot compute the output statistic in the
implementation of the transformation, but we have to use an extra
`lu.transformation_with_aux` for that (this populates the statistic
store immediately after `wrapped_fun` is evaluated).

The `compute_statistic` function depends on the transform in question.
E.g. in the JVP trace it counts the number of non-zero tangent results.

The situation is of course further complicated when we take
`post_process_map` into account. The new `process_env_traces` now always
sets up this funny time travel trampoline just in case it ends up being
necessary, and `post_process_map` is now expected to return `(outputs,
(todo, out_axes_transform))` instead of just `(outputs, todo)`.

*** Compilation cache ***

Because the `out_axes_thunk`s are now arguments to a _global_
compilation cache (in the form of `lu.cache` decorator on
`parallel_callable`), we have to ensure that they implement `hash` and
`==`. This is what forces us to add some slightly weird helpers such as
`_hashable_function` and `_ignore_elem_list`. The code that uses those
makes an assumption that the output pytree depends deterministically on
the identity of the wrapped function, which I think is in line with
general JAX assumptions. Otherwise the cache would depend on the
identity of the thunk, which changes with every function invocation.

Relaxing the global constraint on the cache (e.g. allowing each
`pmap(f)` instance to have a separate cache) would make this easier too.

* Why final style? *

Now, making the primitives initial-style would remove the necessity for
thunking, because we could have obtained the output pytree right when
the function is wrapped. I assumed there is a good argument for making
`pmap` pretend that it's a final-style primitive, but I'm not sure why
that is? I hope it's something better than just avoiding a single jaxpr
tracing.

==

docs/jaxpr.rst
jax/api.py
jax/core.py
jax/custom_derivatives.py
jax/experimental/general_map.py
jax/interpreters/ad.py
jax/interpreters/batching.py
jax/interpreters/partial_eval.py
jax/interpreters/pxla.py
jax/util.py
tests/api_test.py
tests/pmap_test.py
==================
8d1daba9;David Pfau;2020-11-24 16:57:35 +0000;Add complex types to gradient of slogdet

==

jax/_src/numpy/linalg.py
tests/linalg_test.py
==================
ea340eed;Cloud Han;2020-11-24 23:44:26 +0800;use strict action env on windows to avoid constant full rebuilding

==

build/build.py
==================
ad6ceeea;jax authors;2020-11-24 07:31:21 -0800;Merge pull request #4980 from apaszke:use-taggedtuple
PiperOrigin-RevId: 344054801

==
==================
94fcd7f2;Adam Paszke;2020-11-20 13:51:17 +0000;Use taggedtuple instead of namedtuple when defining ShardingSpecs
Because namedtuples don't take the class into account when comparing for
equality!

==

jax/interpreters/pxla.py
jax/lazy.py
jax/util.py
==================
c7a08b92;jax authors;2020-11-24 06:29:09 -0800;Merge pull request #4954 from apaszke:xmap-xla
PiperOrigin-RevId: 344046502

==
==================
2494e0c3;Adam Paszke;2020-11-19 11:38:06 +0000;Add XLA lowering for xmap
This should allow us to try out xmap not only in a simulation (i.e.
faking the devices using vmap, which we still support), but also on real
hardware.

Limitations:
- No compilation caching yet
- Nested xmaps not supported yet
- Transforms (AD, vmap, etc.) of xmaps not supported yet

Benefits:
- An xmap over multiple mesh axes already implements a more efficient
  lowering than the one used for nested pmaps.

The `resources` context-manager is now called `fake_resources`, while
real meshes can be defined in a specific context using the
`mesh(devices, axis_names)` manager. `devices` is supposed to be an
`ndarray` of JAX device objects (e.g. obtained from `jax.devices()`),
while `axis_names` should be a tuple of length matching the rank of
`devices` and specifying mesh axis names.

For concrete examples see the changes in `gmap_tests.py`.

In principle the current version of the code should also work in a
multi-host setting, but I haven't tested it just yet.

==

jax/core.py
jax/experimental/general_map.py
jax/interpreters/pxla.py
tests/gmap_test.py
==================
cc2ec614;jax authors;2020-11-23 14:09:06 -0800;Merge pull request #4999 from cloudhan:wheel-win-fix
PiperOrigin-RevId: 343925872

==
==================
2146cea1;Cloud Han;2020-11-21 01:33:56 +0800;use shutil.copyfile to avoid readonly pyd file

==

build/build_wheel.py
==================
563d1735;Peter Buchlovsky;2020-10-05 11:28:19 +0000;Add fast path for jnp.repeat when repeats is a scalar constant.
The default code-path generates a complicated soup of ops for this
very simple case what can be implemented using reshapes and broadcasts
only.

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
c7b2b9ed;jax authors;2020-11-23 02:12:03 -0800;Merge pull request #4941 from j-towns:eigvals-jvp
PiperOrigin-RevId: 343809277

==
==================
e4c5be94;Benjamin Chetioui;2020-11-20 19:06:32 +0100;[jax2tf] Add note that the TF.js conversion is experimental.

==

jax/experimental/jax2tf/examples/README.md
jax/experimental/jax2tf/examples/tf_js/README.md
==================
b651d7b9;jax authors;2020-11-21 13:09:55 -0800;Merge pull request #4990 from hawkinsp:windows2
PiperOrigin-RevId: 343670512

==
==================
83e7e393;jax authors;2020-11-21 13:01:56 -0800;Merge pull request #4982 from hawkinsp:wheel
PiperOrigin-RevId: 343669975

==
==================
5fc47c8a;jax authors;2020-11-21 12:56:07 -0800;Merge pull request #4995 from hawkinsp:xla
PiperOrigin-RevId: 343669677

==
==================
ba84168c;Peter Hawkins;2020-11-21 11:42:32 -0500;Update XLA.

==

WORKSPACE
==================
1f536d33;jax authors;2020-11-20 17:14:11 -0800;Merge pull request #4993 from jakevdp:fix-random-doc
PiperOrigin-RevId: 343592925

==
==================
82135b53;jax authors;2020-11-20 17:09:10 -0800;Merge pull request #4991 from jakevdp:reduction-where
PiperOrigin-RevId: 343592225

==
==================
4ae393f8;Jake VanderPlas;2020-11-20 16:41:32 -0800;DOC: fix jax.random documentation

==

docs/jax.random.rst
jax/_src/random.py
jax/random.py
==================
7bd67efc;jax authors;2020-11-20 16:00:50 -0800;Merge pull request #4984 from bchetioui:merge_prs
PiperOrigin-RevId: 343581629

==
==================
e177acec;jax authors;2020-11-20 14:42:35 -0800;Merge pull request #4972 from skye:pod_sharded_jit_pmap
PiperOrigin-RevId: 343567845

==
==================
cfc2ff4a;Jake VanderPlas;2020-11-20 14:25:58 -0800;Support 'where' argument in jax.numpy reductions

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
4a3bc901;jax authors;2020-11-20 14:10:21 -0800;Merge pull request #4975 from jakevdp:reduction-initial
PiperOrigin-RevId: 343562128

==
==================
a07c5e11;Peter Hawkins;2020-11-20 17:02:24 -0500;Fix integer overflow in np.split on windows.
Cast earlier to np.int64.

This is caught by the existing random_test.py, but only is a problem on Windows which has slightly different integer type behavior.

==

jax/_src/numpy/lax_numpy.py
==================
841ea14c;Jake VanderPlas;2020-11-20 13:40:31 -0800;Support 'initial' argument in jax.numpy reductions

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
a96aca5e;jax authors;2020-11-20 13:18:13 -0800;Merge pull request #4970 from jakevdp:reduction-tests
PiperOrigin-RevId: 343552263

==
==================
4e56cf96;Skye Wanderman-Milne;2020-11-13 13:30:29 -0800;Add support for multi-host partitioning when using pmap(sharded_jit).
This extends the pmap logic in a way similar to
https://github.com/google/jax/pull/4746. The new arguments to
sharded_jit specifying the local partitioning can be reused by pmap,
but with one wrinkle: the pmap implementation needs to trace its jaxpr
to "see" the sharded_jit and get these values, but it needs to know
the global aval shapes in order to correctly trace through the
sharded_jit. For now, we simply add this information as a new
"global_arg_shapes" argument to pmap. Ideally we'll replace this with
a more elegant solution, e.g. global-view device arrays.

==

docs/jaxpr.rst
jax/api.py
jax/interpreters/pxla.py
==================
7d135648;jax authors;2020-11-20 12:41:29 -0800;Merge pull request #4988 from hawkinsp:windows
PiperOrigin-RevId: 343545448

==
==================
f8ce7d88;Peter Hawkins;2020-11-20 14:50:10 -0500;Fix lax_reference population_count implementation to avoid overflowing Python int -> np.uint32 casts.
These cause errors on Windows. Instead, start with np.uint64s and truncate using numpy.

==

jax/lax_reference.py
==================
ef5218f6;jax authors;2020-11-20 11:22:01 -0800;Merge pull request #4986 from hawkinsp:windows
PiperOrigin-RevId: 343529234

==
==================
882b59e0;jax authors;2020-11-20 11:04:54 -0800;Merge pull request #4985 from jakevdp:cleanup-todo
PiperOrigin-RevId: 343525906

==
==================
d2a0bbd9;Peter Hawkins;2020-11-20 13:55:12 -0500;Add np.intc to the set of valid jaxtypes.
Fixes a number of test failures on Windows.

==

jax/abstract_arrays.py
==================
7140431a;Jake VanderPlas;2020-11-19 14:14:46 -0800;Increase test coverage for reductions.

==

tests/lax_numpy_test.py
==================
4e738bf5;Jake VanderPlas;2020-11-20 10:15:48 -0800;Cleanup: remove obsolete TODOs

==

tests/lax_vmap_test.py
tests/pmap_test.py
==================
e4d5be27;Benjamin Chetioui;2020-11-20 12:52:19 +0100;[jax2tf] Fix and test conversion of iota

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
jax/lax/__init__.py
==================
e65ed8b6;Benjamin Chetioui;2020-11-20 13:03:59 +0100;[jax2tf] Added testing for real_p/imag_p

==

jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
559e5077;Benjamin Chetioui;2020-11-20 13:29:38 +0100;[jax2tf] Add testing for the conversion of complex_p.

==

jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
f7480d65;Benjamin Chetioui;2020-11-20 16:26:29 +0100;[jax2tf] Added tests for the conversion of reducers.

==

jax/experimental/jax2tf/g3doc/primitives_with_limited_support.md
jax/experimental/jax2tf/tests/correctness_stats.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
8b6be205;jax authors;2020-11-20 09:49:19 -0800;Merge pull request #4963 from bchetioui:test_div
PiperOrigin-RevId: 343510364

==
==================
c06ead6b;Peter Hawkins;2020-11-20 09:10:02 -0500;Change jaxlib build rules to build a wheel, rather than writing output to the source directory.

==

.gitignore
build/BUILD.bazel
build/Dockerfile
build/build.py
build/build_jaxlib_wheels_macos.sh
build/build_wheel.py
build/build_wheel_docker_entrypoint.sh
build/install_xla_in_source_tree.py
docs/developer.rst
jaxlib/BUILD
jaxlib/setup.py
==================
5fccc89a;Jamie Townsend;2020-11-18 11:18:54 +0000;Add derivatives for eigenvalues (not eigenvectors)
We aren't supporting eigenvectors for now because eigenvectors are not
uniquely determined by the input matrix, they're only determined up to
'gauge' (that is multiplication by a complex scalar with absolute value
1). Note, this means that second derivatives aren't supported, because
they involve differentiating the eigvals jvp, which itself depends on
eigenvectors.

==

jax/_src/lax/linalg.py
jax/_src/numpy/linalg.py
jax/_src/scipy/linalg.py
tests/linalg_test.py
==================
5a41779f;jax authors;2020-11-20 05:52:06 -0800;Merge pull request #4953 from apaszke:remove-axis-env-devices
PiperOrigin-RevId: 343477863

==
==================
e4e1af5d;Peter Hawkins;2020-11-19 20:12:49 -0800;Reenable pytype for previously problematic ABSL library.
The problematic change to ABSL was rolled back.

PiperOrigin-RevId: 343421000

==

jax/config.py
==================
b16621b1;jax authors;2020-11-19 20:00:09 -0800;Merge pull request #4974 from hawkinsp:flags
PiperOrigin-RevId: 343419651

==
==================
1fcbd2f0;Peter Hawkins;2020-11-19 22:50:08 -0500;Add -Wno-stringop-truncation to build flags on Linux.
Works around https://github.com/tensorflow/tensorflow/issues/39467 for gcc 10+ builds.

==

build/build.py
==================
1e715121;jax authors;2020-11-19 19:21:57 -0800;Merge pull request #4969 from jakevdp:fix-reductions
PiperOrigin-RevId: 343415737

==
==================
c8e6a6a0;Peter Hawkins;2020-11-19 18:04:40 -0800;Internal change
PiperOrigin-RevId: 343407824

==

jax/config.py
==================
cc53ae04;Jake VanderPlas;2020-11-19 13:14:13 -0800;jax.numpy: match numpy arguments for reductions

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
541e8ab8;jax authors;2020-11-19 11:46:51 -0800;Merge pull request #4949 from hawkinsp:abstractarrays
PiperOrigin-RevId: 343336954

==
==================
9aa04443;jax authors;2020-11-19 11:32:00 -0800;Merge pull request #4965 from hawkinsp:build
PiperOrigin-RevId: 343333501

==
==================
424594fe;Peter Hawkins;2020-11-18 21:17:02 -0500;Short-circuit references to jax.core via jax.abstract_arrays.

==

jax/_src/lax/control_flow.py
jax/_src/lax/fft.py
jax/_src/lax/lax.py
jax/_src/lax/linalg.py
jax/_src/lax/parallel.py
jax/_src/numpy/lax_numpy.py
jax/_src/random.py
jax/api.py
jax/custom_derivatives.py
jax/experimental/loops.py
jax/interpreters/ad.py
jax/interpreters/batching.py
jax/interpreters/masking.py
jax/interpreters/partial_eval.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
tests/pmap_test.py
==================
28038880;jax authors;2020-11-19 11:10:45 -0800;Merge pull request #4938 from jakevdp:nan-red-dtype
PiperOrigin-RevId: 343328640

==
==================
9f631897;jax authors;2020-11-19 10:49:08 -0800;Merge pull request #4867 from jakevdp:indexing-typeerror
PiperOrigin-RevId: 343323774

==
==================
4bb5dca7;Peter Hawkins;2020-11-19 12:49:28 -0500;Fix build.py to work on Linux once again.
* strip DOS end-of-line characters from build.py for consistency with the rest of the source tree.
* use shutil.copy() instead of shutil.copyfile(). On Unix systems we must preserve execute permissions.
* add code to explicitly delete and recreate the target directory.
* Move build/jaxlib/__init_py to jaxlib/__init__.py and have the script move it into position, so the output directory for the jaxlib is an empty directory that the script creates.

==

build/install_xla_in_source_tree.py
jaxlib/BUILD
jaxlib/init.py
==================
7c471b6b;Benjamin Chetioui;2020-11-19 12:26:29 +0100;[jax2tf] Added testing code for div and rem.

==

jax/experimental/jax2tf/g3doc/primitives_with_limited_support.md
jax/experimental/jax2tf/tests/correctness_stats.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
77827538;Peter Hawkins;2020-11-19 09:22:31 -0800;[JAX] Move contents of jax.random into jax._src.random.
PiperOrigin-RevId: 343305017

==

jax/_src/random.py
jax/experimental/jax2tf/jax2tf.py
jax/random.py
tests/random_test.py
==================
b6def8ca;Jake VanderPlas;2020-11-18 16:13:34 -0800;Deprecation: Raise a TypeError when indexing with a non-tuple sequence

==

docs/CHANGELOG.rst
jax/_src/numpy/lax_numpy.py
tests/lax_numpy_indexing_test.py
==================
8b56501d;Peter Hawkins;2020-11-19 08:32:43 -0800;Add .bazelversion file.
This tells bazelisk which bazel version to use.

PiperOrigin-RevId: 343296151

==

.bazelversion
==================
f0cddca8;jax authors;2020-11-19 08:22:53 -0800;Merge pull request #4843 from cloudhan:winbuild
PiperOrigin-RevId: 343294438

==
==================
195e13c1;Peter Hawkins;2020-11-19 08:02:46 -0800;Remove jax.experimental.optix.
optix has become its own Python package (optax). You should use optax instead.

PiperOrigin-RevId: 343291598

==

docs/CHANGELOG.rst
docs/jax.experimental.optix.rst
docs/jax.experimental.rst
jax/BUILD
jax/experimental/optix.py
pytest.ini
tests/optix_test.py
==================
783a27fa;Peter Hawkins;2020-11-19 07:47:20 -0800;[JAX] Delete jax.lax_linalg.
Use jax.lax.linalg instead.

PiperOrigin-RevId: 343289024

==

jax/lax_linalg.py
==================
a6acce58;Cloud Han;2020-11-10 00:23:54 +0800;Build on Windows
1. Build on Windows

2. Fix OverflowError

    When calling `key = random.PRNGKey(0)` OverflowError: Python int too
    large to convert to C long for casting value 4294967295 (0xFFFFFFFF)
    from python int to int32.

3. fix file path in regex of errors_test

4. handle ValueError of os.path.commonpath

==

WORKSPACE
build/BUILD.bazel
build/build.py
build/install_xla_in_source_tree.py
build/install_xla_in_source_tree.sh
docs/developer.rst
jax/_src/traceback_util.py
jax/lib/xla_bridge.py
jax/random.py
tests/errors_test.py
==================
f0e22b40;Peter Hawkins;2020-11-19 07:11:59 -0800;Temporarily disable JAX tests that are failing due to LLVM commit https://github.com/llvm/llvm-project/commit/fcad8d3635cff61a2749dcef94c0d51fa1e3e413
PiperOrigin-RevId: 343283946

==

tests/lax_autodiff_test.py
tests/lax_scipy_test.py
==================
84c723fc;Peter Hawkins;2020-11-19 06:41:54 -0800;[JAX] Move pprint_util into jax._src.
PiperOrigin-RevId: 343279975

==

jax/_src/pprint_util.py
jax/core.py
jax/experimental/host_callback.py
jax/interpreters/xla.py
==================
3a1c9210;Peter Hawkins;2020-11-19 06:27:04 -0800;[JAX] Delete jax.source_info_util.
Fix Oryx to point to the internal name jax._src.source_info_util.

PiperOrigin-RevId: 343278153

==

jax/source_info_util.py
==================
94cd2046;Peter Hawkins;2020-11-19 06:17:44 -0800;[JAX] Move implementation of jax.scipy.sparse.linalg into jax._src.
PiperOrigin-RevId: 343276958

==

jax/_src/scipy/sparse/__init__.py
jax/_src/scipy/sparse/linalg.py
jax/scipy/sparse/linalg.py
tests/lax_scipy_sparse_test.py
==================
b55b44d3;Adam Paszke;2020-11-19 11:36:35 +0000;Remove devices from xla.AxisEnv
In most cases they were not even filled in, and they are not used
anywhere.

==

jax/_src/lax/lax.py
jax/api.py
jax/interpreters/pxla.py
jax/interpreters/sharded_jit.py
jax/interpreters/xla.py
tests/pmap_test.py
==================
c2b01f11;jax authors;2020-11-18 18:08:31 -0800;Merge pull request #4746 from skye:pod_sharded_jit
PiperOrigin-RevId: 343196914

==
==================
2d47124a;jax authors;2020-11-18 16:30:36 -0800;Merge pull request #4947 from jakevdp:new-changelog
PiperOrigin-RevId: 343181058

==
==================
b2a7be98;Gautam Mittal;2020-11-18 16:22:07 -0800;Update quickstart.ipynb

==

docs/notebooks/quickstart.ipynb
==================
f54e531c;Gautam Mittal;2020-11-18 16:18:43 -0800;Add vector-valued gradient example.

==

docs/notebooks/quickstart.ipynb
==================
2f03d70a;Jake VanderPlas;2020-11-18 15:17:24 -0800;Add initial changelog for jax v0.2.7

==

docs/CHANGELOG.rst
==================
0978ccbd;jax authors;2020-11-18 14:43:14 -0800;Merge pull request #4946 from jakevdp:jax-026
PiperOrigin-RevId: 343159955

==
==================
050b8795;jax authors;2020-11-18 14:32:20 -0800;Merge pull request #4926 from bchetioui:test_transpose
PiperOrigin-RevId: 343157729

==
==================
0b4d3e3f;Skye Wanderman-Milne;2020-11-13 13:29:32 -0800;Add multi-host support to sharded_jit.
This is done similarly to how multi-host pmap works: for each input,
each host contributes one "local" piece of a conceptual "global"
array, which is further sharded across that host's local devices. Each
host similarly gets a local piece of each global output array.

To support this, three new arguments are added to sharded_jit:
local_in_parts, local_out_parts, and local_num_partitions. These are
similar to the existing in_parts, out_parts, and num_partitions
arguments (which are now implicitly assumed to be global), except they
specify the partitioning local to each host. These new arguments are
only needed when the local and global partitionings are different,
i.e. when partitioning across multiple hosts.

==

jax/interpreters/pxla.py
jax/interpreters/sharded_jit.py
==================
ef4adb5c;Jake VanderPlas;2020-11-18 13:19:20 -0800;update version & CHANGELOG for jax v0.2.6

==

docs/CHANGELOG.rst
jax/version.py
==================
5afc7758;jax authors;2020-11-18 11:54:08 -0800;Merge pull request #4868 from sharadmv:variadic_reduce
PiperOrigin-RevId: 343125293

==
==================
3c671e86;jax authors;2020-11-18 10:43:47 -0800;Merge pull request #4940 from jakevdp:var-warning
PiperOrigin-RevId: 343109712

==
==================
8cb62f2a;jax authors;2020-11-18 09:35:40 -0800;Merge pull request #4878 from gnecula:revisit_poly
PiperOrigin-RevId: 343095255

==
==================
3ba7f422;jax authors;2020-11-18 08:18:55 -0800;Merge pull request #4944 from hawkinsp:sourceinfo
PiperOrigin-RevId: 343082554

==
==================
13db2c37;Peter Hawkins;2020-11-18 10:08:18 -0500;Fix mypy error caused by cyclic import dependency.
Add tests that source_info_util is using the same directory as the jax root module.

==

jax/_src/source_info_util.py
tests/errors_test.py
==================
f939e71c;jax authors;2020-11-18 06:57:31 -0800;Merge pull request #4943 from hawkinsp:sourceinfo
PiperOrigin-RevId: 343070830

==
==================
e38f96dc;Peter Hawkins;2020-11-18 09:30:22 -0500;Use the jax module to determine the jax source directory base, rather than the source_info module.
Fixes some misattributed code source information.

==

jax/_src/source_info_util.py
==================
8be807b6;jax authors;2020-11-17 18:31:56 -0800;Merge pull request #4916 from google:switch-grad-weak-type-test
PiperOrigin-RevId: 342989638

==
==================
ae63e58b;jax authors;2020-11-17 16:59:19 -0800;Merge pull request #4932 from jakevdp:full-like-shape
PiperOrigin-RevId: 342975813

==
==================
7584b16d;Jake VanderPlas;2020-11-17 16:54:27 -0800;Remove noisy warnings for var() of int

==

jax/_src/numpy/lax_numpy.py
==================
05cc7911;Jake VanderPlas;2020-11-17 16:52:36 -0800;Make dtype an explicit argument to nan-reductions

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
590e629f;Sharad Vikram;2020-11-10 15:57:19 -0800;Add support for XLA variadic reduce

==

jax/_src/lax/lax.py
tests/lax_test.py
==================
ffaf1cdf;Jake VanderPlas;2020-11-17 12:53:00 -0800;Support shape parameter in jax.numpy.*_like()

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
d70f2fb5;jax authors;2020-11-17 16:21:05 -0800;Merge pull request #4929 from jakevdp:out-kwds
PiperOrigin-RevId: 342969231

==
==================
b8b3e5f0;jax authors;2020-11-17 15:41:04 -0800;Merge pull request #4649 from qiuminxu:name_scope_jax2tf
PiperOrigin-RevId: 342961209

==
==================
5a3d09de;Qiumin Xu;2020-11-17 15:09:38 -0800;Fix lint

==

jax/experimental/jax2tf/jax2tf.py
==================
769df737;Qiumin Xu;2020-11-08 11:22:48 -0800;Preserve name scope of named_call primitive in jax2tf

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/jax2tf_test.py
==================
69c920c6;jax authors;2020-11-17 14:52:52 -0800;Merge pull request #4796 from qiuminxu:add_jax_named_call
PiperOrigin-RevId: 342951787

==
==================
06730476;jax authors;2020-11-17 14:35:01 -0800;Merge pull request #4927 from bchetioui:test_zeros_like
PiperOrigin-RevId: 342948171

==
==================
09a0ed6e;jax authors;2020-11-17 14:23:00 -0800;Merge pull request #4921 from bchetioui:fix_argminmax_gpu
PiperOrigin-RevId: 342944957

==
==================
52d86899;jax authors;2020-11-17 14:19:21 -0800;Merge pull request #4936 from jakevdp:fix-mypy
PiperOrigin-RevId: 342944843

==
==================
3d067e82;jax authors;2020-11-17 14:02:30 -0800;Merge pull request #4912 from bchetioui:test_comparators
PiperOrigin-RevId: 342940938

==
==================
ac5d4c5c;jax authors;2020-11-17 13:43:07 -0800;Merge pull request #4934 from hawkinsp:bazel
PiperOrigin-RevId: 342936701

==
==================
9d3719f9;Jake VanderPlas;2020-11-17 13:17:22 -0800;fix mypy error

==

jax/lazy.py
==================
b222e5e0;Peter Hawkins;2020-11-17 15:50:30 -0500;Update bazel version to 3.1.0.

==

build/build.py
==================
37a594ed;Jean-Baptiste Lespiau;2020-11-17 12:14:19 -0800;Accept `None` as a trivial LazyExpr.
PiperOrigin-RevId: 342917973

==

jax/_src/lax/lax.py
jax/interpreters/xla.py
jax/lazy.py
==================
8fafbf9b;jax authors;2020-11-17 10:34:14 -0800;Merge pull request #4930 from hawkinsp:polymul
PiperOrigin-RevId: 342894045

==
==================
92cd0f52;Peter Hawkins;2020-11-17 13:11:15 -0500;Relax test tolerance on polymul tests.
These tests were failing flakily on GPU.

==

tests/lax_numpy_test.py
==================
73d82f32;Jake VanderPlas;2020-11-17 10:02:28 -0800;lax_numpy: fix handling of  keyword in wrapped methods

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
50571d48;jax authors;2020-11-17 09:58:51 -0800;Merge pull request #4928 from jakevdp:in1d
PiperOrigin-RevId: 342885009

==
==================
6dc7f316;jax authors;2020-11-17 09:55:04 -0800;Merge pull request #4883 from bchetioui:test_argmax_argmin
PiperOrigin-RevId: 342885003

==
==================
6fe2f776;Jake VanderPlas;2020-11-17 09:28:02 -0800;Update in1d() TODO

==

jax/_src/numpy/lax_numpy.py
==================
9104125a;Benjamin Chetioui;2020-11-17 17:20:16 +0100;[jax2tf] Add harness to test conversion of zeros_like.

==

jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
356e38b1;Benjamin Chetioui;2020-11-16 18:36:52 +0100;[jax2tf] Add testing for conversion of comparison operators.

==

jax/experimental/jax2tf/g3doc/primitives_with_limited_support.md
jax/experimental/jax2tf/tests/correctness_stats.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
e1e05140;Benjamin Chetioui;2020-11-17 15:17:21 +0100;[jax2tf] Added tests for the conversion of transpose.

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
4d037996;Benjamin Chetioui;2020-11-17 09:45:48 +0100;Filter out non-integer integer_dtypes in argmin/max.

==

jax/_src/lax/lax.py
tests/lax_test.py
==================
06f60f46;George Necula;2020-11-17 07:30:39 -0800;Disable more tests

==

tests/masking_test.py
==================
20e43046;jax authors;2020-11-17 07:22:12 -0800;Merge pull request #4901 from bchetioui:test_concatenate
PiperOrigin-RevId: 342857414

==
==================
f9d78a2b;Benjamin Chetioui;2020-11-12 13:54:59 +0100;[jax2tf] Add testing for argmax and argmin.

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
28d4f4c5;jax authors;2020-11-17 07:16:56 -0800;Merge pull request #4913 from jblespiau:changelist/342345375
PiperOrigin-RevId: 342856672

==
==================
64022922;George Necula;2020-11-17 06:57:47 -0800;Fix float indices in lax.slice

==

jax/_src/numpy/lax_numpy.py
==================
b12b39fb;Benjamin Chetioui;2020-11-16 11:58:33 +0100;[jax2tf] Add tests for the conversion of concatenate.

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
44e671fa;jax authors;2020-11-17 06:35:01 -0800;Merge pull request #4925 from bchetioui:test_select
PiperOrigin-RevId: 342851128

==
==================
3bf3e352;George Necula;2020-11-17 06:08:09 -0800;Disable the remaining failing tests, remove jax2tf documentation

==

jax/experimental/jax2tf/README.md
jax/experimental/jax2tf/examples/README.md
jax/experimental/jax2tf/examples/saved_model_main.py
jax/experimental/jax2tf/examples/saved_model_main_test.py
jax/experimental/jax2tf/tests/shape_poly_test.py
tests/masking_test.py
==================
81770e82;Benjamin Chetioui;2020-11-17 14:08:00 +0100;[jax2tf] Add testing for select_p conversion.

==

jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
76d43035;Roy Frostig;2020-11-16 19:42:45 -0800;fix grad-of-switch test under x64 mode

==

tests/lax_control_flow_test.py
==================
dc1f4b8c;Roy Frostig;2020-11-16 19:33:14 -0800;change tree+aval check to use f-strings

==

jax/_src/lax/control_flow.py
==================
f180ea86;Matthew Johnson;2020-11-16 19:03:15 -0800;fix capitalization

==

README.md
==================
c2a98c18;Matthew Johnson;2020-11-16 19:01:00 -0800;update jax repository citation
Add all full-time JAX team members.
==

README.md
==================
59e92d31;jax authors;2020-11-16 18:00:18 -0800;Merge pull request #4906 from bchetioui:test_clamp
PiperOrigin-RevId: 342761586

==
==================
7bf9a239;Roy Frostig;2020-11-16 16:36:05 -0800;in grad-of-switch test, avoid relying on unary operations to remove weak types

==

tests/lax_control_flow_test.py
==================
71b36972;jax authors;2020-11-16 16:00:53 -0800;Merge pull request #4914 from jakevdp:fix-is-weak
PiperOrigin-RevId: 342740884

==
==================
e56c3f43;jax authors;2020-11-16 12:23:24 -0800;Merge pull request #4894 from LenaMartens:changelist/342264327
PiperOrigin-RevId: 342693683

==
==================
7f49d4ed;Jake VanderPlas;2020-11-16 11:57:37 -0800;Fix dtypes.is_weakly_typed

==

jax/dtypes.py
==================
5c8286f9;Jean-Baptiste Lespiau;2020-11-14 00:03:35 +0100;Change the DeviceArray error from ValueError to RuntimeError when deleted.

==

docs/CHANGELOG.rst
jax/interpreters/xla.py
tests/api_test.py
==================
7fc5ad7e;jax authors;2020-11-16 11:11:37 -0800;Merge pull request #4907 from hawkinsp:c128scatter
PiperOrigin-RevId: 342676610

==
==================
ed5f5133;jax authors;2020-11-16 09:27:20 -0800;Merge pull request #4908 from bchetioui:fix_flake_py3.9
PiperOrigin-RevId: 342651784

==
==================
c22a0667;jax authors;2020-11-16 09:23:30 -0800;Merge pull request #4910 from hawkinsp:xla
PiperOrigin-RevId: 342651728

==
==================
1e7bf554;Peter Hawkins;2020-11-16 12:15:34 -0500;Update XLA.

==

WORKSPACE
docs/CHANGELOG.rst
==================
ac9d862a;jax authors;2020-11-16 08:56:58 -0800;Merge pull request #4896 from google:issue4696
PiperOrigin-RevId: 342646322

==
==================
4b6301a1;Benjamin Chetioui;2020-11-16 17:30:00 +0100;[jax2tf] Fix mypy error in harnesses.

==

jax/experimental/jax2tf/tests/primitive_harness.py
==================
b1729840;Peter Hawkins;2020-11-16 11:13:24 -0500;Lower complex128 scatter-add to two float64 scatter-adds on GPU.
This works around a slow scatter for 128-bit wide values.

==

jax/_src/lax/lax.py
tests/lax_test.py
==================
36e107eb;Benjamin Chetioui;2020-11-16 15:44:37 +0100;[jax2tf] Fix conversion of clamp and add testing code.

==

jax/experimental/jax2tf/g3doc/primitives_with_limited_support.md
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/correctness_stats.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
0da1fbe2;jax authors;2020-11-15 09:27:35 -0800;Merge pull request #4874 from bchetioui:test_broadcast
PiperOrigin-RevId: 342517644

==
==================
ca656ece;Roy Frostig;2020-11-13 18:25:16 -0800;test grad-of-switch with weak type mismatch

==

tests/lax_control_flow_test.py
==================
156024fb;Roy Frostig;2020-11-13 18:08:42 -0800;check that jaxpr types match in cond transpose using `core.typematch` rather than `__eq__`

==

jax/_src/lax/control_flow.py
==================
78c6e4e5;Roy Frostig;2020-11-13 18:00:33 -0800;fix check_jaxpr docstring

==

jax/core.py
==================
9a0207ab;Matthew Johnson;2020-11-13 15:21:59 -0800;adapt masking rev tests for soundness

==

jax/_src/lax/lax.py
tests/masking_test.py
==================
65a7f608;jax authors;2020-11-13 15:13:11 -0800;Merge pull request #4803 from AdrienCorenflos:patch-1
PiperOrigin-RevId: 342347160

==
==================
8bd74a24;Matthew Johnson;2020-11-13 15:02:55 -0800;adapt broadcast_in_dim shape rule mask soundness

==

jax/_src/lax/lax.py
==================
799325bb;Matthew Johnson;2020-11-13 14:55:04 -0800;revise lax broadcasting to work with sound masking

==

jax/_src/lax/lax.py
==================
df081393;Matthew Johnson;2020-11-13 14:22:17 -0800;update concatenate shape rule for sound mask test

==

jax/_src/lax/lax.py
==================
91777c33;Lena Martens;2020-11-13 17:07:15 +0100; Fix select_and_gather_add_transpose rule.
 Fixes a  'jax.ad_util.Zero' is not a valid JAX type error.

==

jax/_src/lax/lax.py
==================
83a38f4f;jax authors;2020-11-13 08:07:45 -0800;Merge pull request #4854 from j-towns:tidy-stack
PiperOrigin-RevId: 342264328

==
==================
8b006f6a;Matthew Johnson;2020-11-13 07:23:02 -0800;add correct annotations to core.TraceStack

==

jax/core.py
==================
18120020;jax authors;2020-11-13 06:30:06 -0800;Merge pull request #4886 from skye:jaxlib_fixes2
PiperOrigin-RevId: 342249657

==
==================
0f8ea375;Qiumin Xu;2020-11-12 17:36:46 -0800;Update core.py

==

jax/core.py
==================
31600aac;Qiumin Xu;2020-11-04 21:01:42 -0800;Add named_call public API.
Move named_call_p to core.py from lax.py.
Also move the translation rule to jax/interpreters/xla.py where the core_call translation rule is.

==

docs/jax.rst
jax/__init__.py
jax/_src/lax/lax.py
jax/api.py
jax/core.py
jax/interpreters/xla.py
jax/lax/__init__.py
tests/api_test.py
tests/lax_test.py
==================
8358c016;jax authors;2020-11-12 14:40:10 -0800;Merge pull request #4890 from google:autodiff-cookbook-fix
PiperOrigin-RevId: 342134052

==
==================
491ad965;Matthew Johnson;2020-11-12 14:33:17 -0800;fix typo in autodiff cookbook

==

docs/notebooks/autodiff_cookbook.ipynb
==================
a81179f6;jax authors;2020-11-12 14:19:14 -0800;Merge pull request #4887 from skye:jaxlib
PiperOrigin-RevId: 342129728

==
==================
36799f50;Skye Wanderman-Milne;2020-11-12 13:48:44 -0800;README etc. updates for new jaxlib release

==

README.md
docs/CHANGELOG.rst
jaxlib/version.py
==================
66cf93f1;jax authors;2020-11-12 12:49:45 -0800;Merge pull request #4832 from shoyer:gmres_qr
PiperOrigin-RevId: 342110498

==
==================
ce360e69;jax authors;2020-11-12 12:35:19 -0800;Merge pull request #4877 from jakevdp:prng-seed-invariance
PiperOrigin-RevId: 342107790

==
==================
fca56663;Stephan Hoyer;2020-11-12 10:50:47 -0800;Relax GMRES test tolerances

==

tests/lax_scipy_sparse_test.py
==================
5c89170d;Skye Wanderman-Milne;2020-11-12 18:31:06 +0000;jaxlib: Fix Python 3.9 build and drop CUDA 10.0 support
The TF/XLA build no longer works with CUDA 10.0. This could potentially be fixed, but isn't easy or officially supported.

==

build/Dockerfile
build/build_jaxlib_wheels.sh
build/build_wheel_docker_entrypoint.sh
==================
d3aced04;Jake VanderPlas;2020-11-12 09:33:01 -0800;Update CHANGELOG for PRNGKey change

==

docs/CHANGELOG.rst
==================
2b3d019c;jax authors;2020-11-12 09:32:25 -0800;Merge pull request #4871 from bchetioui:test_conj
PiperOrigin-RevId: 342064921

==
==================
13c965a7;jax authors;2020-11-12 09:19:56 -0800;Merge pull request #4872 from bchetioui:test_cumsum_cumprod
PiperOrigin-RevId: 342062371

==
==================
18228f45;Jake VanderPlas;2020-11-12 09:06:24 -0800;PRNGSeed: ensure JIT invariance for valid inputs.

==

jax/random.py
tests/random_test.py
==================
850e7a87;Benjamin Chetioui;2020-11-11 13:50:57 +0100;[jax2tf] Added testing and fixed conversion of conj.

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
5cde3cb1;Benjamin Chetioui;2020-11-11 15:35:54 +0100;[jax2tf] Replaced cumsum/cumprod implementation and added testing.

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
07807d76;Benjamin Chetioui;2020-11-11 16:41:03 +0100;[jax2tf] Add a harness for broadcast_p and fix conversion.

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
jax/lax/__init__.py
==================
d4b12154;jax authors;2020-11-12 08:19:26 -0800;Merge pull request #4875 from bchetioui:test_broadcast_in_dim
PiperOrigin-RevId: 342052048

==
==================
c5bc2ffe;Benjamin Chetioui;2020-11-11 17:30:38 +0100;[jax2tf] Fix implementation and add tests for broadcast_in_dim.

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
1e625dd3;jax authors;2020-11-11 17:39:58 -0800;Merge pull request #4879 from jakevdp:prng-output-test
PiperOrigin-RevId: 341946093

==
==================
297f0359;Jake VanderPlas;2020-11-11 16:02:23 -0800;TST: add explicit tests of PRNGKey seed handling.

==

tests/random_test.py
==================
740cc913;George Necula;2020-11-11 13:10:46 -0800;[masking] Ensure that Poly operations are sound
We want to ensure that an operation on polynomials throws
an explicit error when the result of the operation cannot
be soundly represented as a polynomial.

This change implements polynomials ranging over non-negative
shape variables. (It may be a good idea to restrict the range
to positive values only.)

Formally, an operation `op` on polynomial `p` either
throws an error `UndefinedPoly` or produces a polynomial
`res` such that `op(Val(p)) = Val(res)`, for any `Val`, a
value with non-negative values for shape variables.

Prior to this there were several sources of unsoundness:

 * The comparison `p1 = p2` would return True when the
   polynomials are identical (sound), and False when they
   are not identical (not sound)
 * The comparison `p >= 0` would always return True. This
   is unsound if `p` has monomial with negative coefficients.

==

jax/interpreters/masking.py
tests/masking_test.py
==================
2b8d840c;Peter Hawkins;2020-11-11 08:34:22 -0800;[JAX] Remove uses of the deprecated jax.experimental.vectorize.
jax.numpy.vectorize should be used instead.

PiperOrigin-RevId: 341836454

==

jax/BUILD
jax/experimental/vectorize.py
pytest.ini
tests/vectorize_test.py
==================
f1b14aa2;jax authors;2020-11-11 04:38:53 -0800;Merge pull request #4820 from jakevdp:fix-type-promotion
PiperOrigin-RevId: 341805132

==
==================
4a1fe9ea;jax authors;2020-11-11 04:35:09 -0800;Merge pull request #4864 from jakevdp:doc-copy-year
PiperOrigin-RevId: 341805078

==
==================
7e62270e;Stephan Hoyer;2020-11-09 16:02:18 -0800;More unit-tests + mark gmres as internal for now

==

jax/scipy/sparse/linalg.py
tests/lax_scipy_sparse_test.py
==================
ec74c68c;jax authors;2020-11-10 15:58:22 -0800;Merge pull request #4863 from apaszke:pmap-in-axes
PiperOrigin-RevId: 341715953

==
==================
76dc2c1e;Jake VanderPlas;2020-11-10 11:54:36 -0800;DOC: update webpage copyright year to 2020

==

docs/conf.py
==================
b753f741;jax authors;2020-11-10 11:18:33 -0800;Merge pull request #4860 from jakevdp:cleanup
PiperOrigin-RevId: 341658889

==
==================
a5bc7353;Adam Paszke;2020-11-05 11:54:05 +0000;Add support for pmap in_axes other than 0 and None
... and in map primitives in general (which is why the patch touches
most traces).

This also fixes a bug in the transpose rule for map primitives, which
would fail to adjust the aval associated with zeros returned from the
map body.

==

docs/jaxpr.rst
jax/_src/lax/control_flow.py
jax/api.py
jax/core.py
jax/experimental/general_map.py
jax/interpreters/ad.py
jax/interpreters/batching.py
jax/interpreters/partial_eval.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
jax/util.py
tests/pmap_test.py
==================
bdd79156;jax authors;2020-11-10 10:11:54 -0800;Internal change
PiperOrigin-RevId: 341644256

==

docs/jaxpr.rst
jax/_src/lax/control_flow.py
jax/api.py
jax/core.py
jax/experimental/general_map.py
jax/interpreters/ad.py
jax/interpreters/batching.py
jax/interpreters/partial_eval.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
jax/util.py
tests/pmap_test.py
==================
898fa7e6;Jake VanderPlas;2020-11-10 09:16:44 -0800;cleanup: remove unused test arg

==

tests/scipy_signal_test.py
==================
342d62dd;jax authors;2020-11-10 08:33:35 -0800;Merge pull request #4848 from apaszke:pmap-in-axes
PiperOrigin-RevId: 341624889

==
==================
06ab965a;Sebastian Bischoff;2020-11-10 15:14:58 +0100;Add description how to view pytree definition

==

docs/pytrees.rst
==================
6914058c;Adam Paszke;2020-11-06 16:39:50 +0000;Add support for pmap in_axes other than 0 and None
... and in map primitives in general (which is why the patch touches
most traces).

This also fixes a bug in the transpose rule for map primitives, which
would fail to adjust the aval associated with zeros returned from the
map body.

==

docs/jaxpr.rst
jax/_src/lax/control_flow.py
jax/api.py
jax/core.py
jax/experimental/general_map.py
jax/interpreters/ad.py
jax/interpreters/batching.py
jax/interpreters/partial_eval.py
jax/interpreters/pxla.py
jax/util.py
tests/pmap_test.py
==================
b8920a11;Jamie Townsend;2020-11-10 11:10:06 +0000;Rm old attribute annotations from TraceStack

==

jax/core.py
==================
08115e89;jax authors;2020-11-10 02:32:34 -0800;Merge pull request #4851 from hawkinsp:nn
PiperOrigin-RevId: 341580855

==
==================
34d2e11b;jax authors;2020-11-09 21:36:48 -0800;Merge pull request #4852 from sharadmv:patch-5
PiperOrigin-RevId: 341547289

==
==================
a51afa30;Sharad Vikram;2020-11-09 21:06:53 -0800;Fix typo in FAQ

==

docs/faq.rst
==================
ef6d5c4d;jax authors;2020-11-09 20:01:01 -0800;Merge pull request #4836 from jblespiau:changelist/341311408
PiperOrigin-RevId: 341536516

==
==================
09b2c059;jax authors;2020-11-09 18:15:45 -0800;Merge pull request #4830 from shoyer:slow-jit-faq
PiperOrigin-RevId: 341525306

==
==================
bb684b59;Stephan Hoyer;2020-11-08 15:11:47 -0800;Add a FAQ entry on slow JIT compilation

==

docs/faq.rst
==================
c9f4b274;Peter Hawkins;2020-11-09 19:48:54 -0500;Delete jax.nn.functions.
jax.nn.functions was an accidental export; its contents are available directly in the jax.nn namespace.

==

jax/nn/__init__.py
jax/nn/functions.py
==================
a3a55a91;jax authors;2020-11-09 15:10:35 -0800;Merge pull request #4847 from hawkinsp:py39
PiperOrigin-RevId: 341494288

==
==================
2c6f932e;Peter Hawkins;2020-11-09 16:25:20 -0500;Add Python 3.9 support to jaxlib build.

==

WORKSPACE
build/Dockerfile
build/build.py
build/build_jaxlib_wheels.sh
build/build_jaxlib_wheels_macos.sh
==================
307b528b;jax authors;2020-11-09 13:09:25 -0800;Merge pull request #4814 from apaszke:sharding-spec
PiperOrigin-RevId: 341469599

==
==================
f6372630;Adam Paszke;2020-11-05 11:54:05 +0000;Add some type annotations in parallel_callable

==

jax/interpreters/pxla.py
jax/interpreters/xla.py
==================
8c1fbdc9;Adam Paszke;2020-11-06 12:55:17 +0000;Make ShardingSpec more flexible
In preparation of adding support for `in_axes` and `out_axes` to `pmap`.

The only difference in expressivity of the new approach is that the
sharded dimensions can be permuted before ordering/replicating the
indices to match the device assignment. This is necessary if we want to
support `in_axes`, because it may cause some sharded dimensions that are
supposed to get mapped to the "replication" XLA mesh axis to follow the
dimensions mapped to the "partitioning" XLA mesh axis. XLA fixes the
mesh order such that the replicated dimension is always the leading one,
which forces us to decouple the order of data dimensions from the mesh
dimensions.

This patch additionally folds the `is_axis_materialized` into the
sharding specification, by wrapping the integers in small ADT-like
wrappers that distinguish the different ways of partitioning dimensions.
The order of replication is also more explicit in the `mesh_mapping`,
as opposed to being represented as a list of replication factors to be
inserted into the sharding details to obtain a mesh mapping.

Note that this doesn't change any existing functionality. It is purely
an internal rewrite that is supposed to lay the groundwork for the next
patches.

==

jax/interpreters/pxla.py
jax/util.py
tests/pmap_test.py
==================
08131d4e;jax authors;2020-11-09 11:40:57 -0800;Merge pull request #4844 from hawkinsp:manylinux
PiperOrigin-RevId: 341451117

==
==================
dadf732f;Peter Hawkins;2020-11-09 11:58:30 -0500;Fix manylinux2010 compliance of GPU wheels.
Use GCC_HOST_COMPILER_PATH to point to the devtoolset compiler.
Use auditwheel to verify manylinux2010 compliance.

==

build/Dockerfile
build/build_wheel_docker_entrypoint.sh
docs/CHANGELOG.rst
==================
d913e6b3;Jake VanderPlas;2020-11-06 14:09:24 -0800;DOC: fix generating code in type_promotion.rst

==

docs/type_promotion.rst
==================
78e7095d;jax authors;2020-11-09 10:37:18 -0800;Merge pull request #4846 from zhangqiaorjc:profiler_fix_note
PiperOrigin-RevId: 341437041

==
==================
5e850958;Qiao Zhang;2020-11-09 10:26:40 -0800;Add a CHANGELOG note about profiler bug fix.

==

docs/CHANGELOG.rst
==================
ca766caa;jax authors;2020-11-09 09:26:01 -0800;Merge pull request #4822 from ayush-1506:4775
PiperOrigin-RevId: 341420859

==
==================
dcc81c33;jax authors;2020-11-09 09:21:06 -0800;Merge pull request #4845 from hawkinsp:xla
PiperOrigin-RevId: 341419917

==
==================
a4669370;Peter Hawkins;2020-11-09 12:06:35 -0500;Update XLA.

==

WORKSPACE
docs/CHANGELOG.rst
==================
9b3f1634;jax authors;2020-11-09 07:09:11 -0800;Merge pull request #4841 from hawkinsp:optix
PiperOrigin-RevId: 341398512

==
==================
371efd3c;jax authors;2020-11-09 06:58:41 -0800;Merge pull request #4831 from mariosasko:fix-readme-link
PiperOrigin-RevId: 341397038

==
==================
ffff3a42;jax authors;2020-11-09 06:46:48 -0800;Merge pull request #4828 from j-towns:api-doc-fixes
PiperOrigin-RevId: 341395571

==
==================
4003ada3;jax authors;2020-11-09 06:39:52 -0800;Merge pull request #4840 from hawkinsp:adam
PiperOrigin-RevId: 341394355

==
==================
63bf7dcc;jax authors;2020-11-09 06:36:17 -0800;Merge pull request #4842 from hawkinsp:jax2tf
PiperOrigin-RevId: 341394344

==
==================
5d2d1e67;jax authors;2020-11-09 06:30:32 -0800;Merge pull request #4825 from jblespiau:changelist/341231741
PiperOrigin-RevId: 341393549

==
==================
7ce0e009;Peter Hawkins;2020-11-09 09:23:04 -0500;Fix flake8 warning in jax2tf saved_model_main example.

==

jax/experimental/jax2tf/examples/saved_model_main.py
==================
a1c68311;Peter Hawkins;2020-11-09 09:18:03 -0500;Add a deprecation warning to the optix package.

==

jax/experimental/optix.py
pytest.ini
==================
fa413203;Peter Hawkins;2020-11-09 09:10:55 -0500;Fix accidental type promotion in adam and adamax optimizers.

==

jax/experimental/optimizers.py
==================
32e8dab0;jax authors;2020-11-09 03:41:24 -0800;Merge pull request #4816 from gnecula:tf_doc3
PiperOrigin-RevId: 341373845

==
==================
f5294e6f;George Necula;2020-11-06 16:50:50 +0200;[jax2tf] Add the convert_and_save_model to the jax2tf API.
Expanded the documentation, including with a discussion
for various options for creating SavedModel from Flax
or Haiku models.

==

jax/experimental/jax2tf/README.md
jax/experimental/jax2tf/examples/README.md
jax/experimental/jax2tf/examples/mnist_lib.py
jax/experimental/jax2tf/examples/requirements.txt
jax/experimental/jax2tf/examples/saved_model_lib.py
jax/experimental/jax2tf/examples/saved_model_main.py
jax/experimental/jax2tf/examples/tf_js/quickdraw/quickdraw.py
==================
bfd42586;Jean-Baptiste Lespiau;2020-11-09 00:10:57 +0100;Remove the private _xla_compilation.

==

jax/api.py
==================
a3c729b9;ayush-1506;2020-11-07 18:44:28 +0530;Fix #4775 + additional fixes

==

jax/_src/scipy/signal.py
tests/scipy_signal_test.py
==================
fc07a26d;jax authors;2020-11-08 19:14:37 -0800;Merge pull request #4812 from j-towns:custom-jvp-doc
PiperOrigin-RevId: 341326630

==
==================
860d1b3d;jax authors;2020-11-08 19:06:24 -0800;Merge pull request #4815 from j-towns:docs-favicon
PiperOrigin-RevId: 341325726

==
==================
03ab757e;jax authors;2020-11-08 19:02:49 -0800;Merge pull request #4829 from google:profiler-test-skip
PiperOrigin-RevId: 341325675

==
==================
c5c71a0a;Stephan Hoyer;2020-11-08 15:56:08 -0800;Cleanup _safe_normalize

==

jax/scipy/sparse/linalg.py
==================
7ed9fe70;Adam GM Lewis;2020-08-28 14:40:31 -0400;Corrections to GMRES - now gives correct result.
Co-authored-by: gehring <clement.gehring@gmail.com>

Co-authored-by: Stephan Hoyer <shoyer@google.com>

==

jax/scipy/sparse/linalg.py
tests/lax_scipy_sparse_test.py
==================
342cc360;gehring;2020-08-11 13:18:46 -0400;Initial implementation of GMRES

==

jax/scipy/sparse/linalg.py
==================
68ef05be;mariosasko;2020-11-09 00:33:04 +0100;Fix broken link in readme

==

README.md
==================
0b76854b;Matthew Johnson;2020-11-08 14:48:14 -0800;fix skip logic for test that requires portpicker

==

tests/profiler_test.py
==================
a7966f7d;jax authors;2020-11-08 14:31:40 -0800;Merge pull request #4826 from apaszke:fix-invertible
PiperOrigin-RevId: 341309335

==
==================
a0a2c973;Jamie Townsend;2020-11-08 22:22:36 +0000;Fixes to jax.api docs

==

docs/jax.rst
jax/api.py
==================
46ca7a00;Jamie Townsend;2020-11-08 19:12:40 +0000;Rm gridlines from favicon (thanks @shoyer)

==

docs/_static/favicon.png
==================
5c6a5885;Adam Paszke;2020-11-08 18:45:24 +0100;Pass around the flattened args and outputs in invertible_ad
The previous version worked fine when the argument list was already
flat, but would fail when it was a more complicated pytree. This should
fix it.

==

jax/interpreters/invertible_ad.py
tests/api_test.py
==================
3e7285b4;jax authors;2020-11-07 23:52:26 -0800;Merge pull request #4301 from JuliusKunze:mask-polynomial-division
PiperOrigin-RevId: 341256792

==
==================
68aca247;Jean-Baptiste Lespiau;2020-11-08 01:02:03 +0100;Add symbols for the Python and C++ `DeviceArray` implementation.
Submiting such CL now, before the update of the C++ code and the Python code, will make it possible to update the C++ in a single CL, instead of doing (C++, Python, C++ again).

In practice we will:
- update the C++ code, so that `Buffer` can act as a `DeviceArray`
- Update the Python code to finish this
- Update the C++ code to also accept C++ buffers as arguments (-> This only requires a check on the instance, which is why we need this current CL).

==

jax/interpreters/xla.py
==================
2f753630;jax authors;2020-11-07 13:09:43 -0800;Merge pull request #4801 from bchetioui:jax2tf_named_call
PiperOrigin-RevId: 341221687

==
==================
556b1461;jax authors;2020-11-06 11:28:07 -0800;Merge pull request #4788 from jakevdp:promotion-via-lattice
PiperOrigin-RevId: 341085836

==
==================
4db3db9e;jax authors;2020-11-06 11:03:40 -0800;Merge pull request #4806 from jakevdp:lattice-doc
PiperOrigin-RevId: 341080919

==
==================
67c1c8c0;Jake VanderPlas;2020-11-06 10:51:42 -0800;Do type promotion directly via lattice rather than pre-generating a table.

==

jax/dtypes.py
tests/dtypes_test.py
==================
86f45353;Jake VanderPlas;2020-11-06 09:13:28 -0800;DOC: add lattice to type promotion doc

==

docs/_static/type_lattice.svg
docs/type_promotion.rst
==================
62683959;Jamie Townsend;2020-11-06 13:43:18 +0000;[DOCS] Add JAX favicon to sphinx

==

docs/_static/favicon.png
docs/conf.py
==================
c670ab33;Benjamin Chetioui;2020-11-05 16:36:51 +0100;[jax2tf] Systematically add the functions in xla.call_translations to the list of unexpected functions.

==

jax/experimental/jax2tf/jax2tf.py
==================
931b2ddb;Jamie Townsend;2020-11-06 11:37:15 +0000;Improve docs for custom_jvp and custom_vjp
Correct the custom_jvp docstring to include the defjvps instance method. Add the
defjvp/defvjp instance methods to the sphinx doc.

==

docs/jax.rst
jax/custom_derivatives.py
==================
8f1be202;jax authors;2020-11-05 17:18:35 -0800;Merge pull request #4807 from hawkinsp:docs
PiperOrigin-RevId: 340957378

==
==================
2cf2c719;Peter Hawkins;2020-11-05 17:02:19 -0500;Add documentation to several functions in jax.lax.linalg.

==

docs/jax.lax.rst
jax/_src/lax/linalg.py
==================
353fe8f6;Marc van Zee;2020-11-05 18:41:11 +0100;Update comment on ShardingSpec

==

jax/interpreters/pxla.py
==================
3bc34e4f;AdrienCorenflos;2020-11-05 18:13:44 +0200;Update scatter.py
Looks like the documentation was not up to date
==

jax/_src/ops/scatter.py
==================
11d6f239;jax authors;2020-11-05 06:40:49 -0800;Merge pull request #4799 from hawkinsp:laxfix
PiperOrigin-RevId: 340841284

==
==================
79cf7d11;Peter Hawkins;2020-11-05 09:24:18 -0500;Fix max/min confusion in lax.py.

==

jax/_src/lax/lax.py
==================
bd98b060;jax authors;2020-11-05 02:35:55 -0800;Merge pull request #4606 from bchetioui:quickdraw_tfjs
PiperOrigin-RevId: 340812927

==
==================
5c9204a4;jax authors;2020-11-04 22:49:46 -0800;Merge pull request #4794 from jakevdp:result-type-fiux
PiperOrigin-RevId: 340789978

==
==================
4138639e;jax authors;2020-11-04 14:38:10 -0800;Merge pull request #4733 from qiuminxu:upstream_named_call
PiperOrigin-RevId: 340729854

==
==================
f49f626c;jax authors;2020-11-04 14:23:37 -0800;Merge pull request #4792 from jakevdp:cleanup-dtypes
PiperOrigin-RevId: 340727230

==
==================
370f30c6;Jake VanderPlas;2020-11-04 12:41:43 -0800;Cleanup: remove unused utility function

==

jax/dtypes.py
==================
575a8e06;Peter Hawkins;2020-11-04 13:33:30 -0800;Move lax linear algebra routines into a jax.lax.linalg module.
PiperOrigin-RevId: 340717634

==

docs/CHANGELOG.rst
jax/_src/scipy/stats/multivariate_normal.py
jax/experimental/jax2tf/tests/correctness_stats.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
jax/lax/__init__.py
jax/lax/linalg.py
tests/batching_test.py
tests/linalg_test.py
==================
9d6d0274;jax authors;2020-11-04 13:33:16 -0800;Merge pull request #4787 from jakevdp:fix-jax-type
PiperOrigin-RevId: 340717505

==
==================
430ba446;Qiumin Xu;2020-11-04 09:48:30 -0800;Update lax_test.py
Remove trailing white space.

==

tests/lax_test.py
==================
3b315b86;Qiumin Xu;2020-11-04 09:43:43 -0800;Add TODO
Add TODO to make named_call a publis function in lax.

==

tests/lax_test.py
==================
17d684ee;Qiumin Xu;2020-10-28 20:57:17 -0700;Add named_call test
Add named_call test in lax test.

==

tests/lax_test.py
==================
70f03eb6;Qiumin Xu;2020-10-28 20:08:26 -0700;Upstream named_call to jax
Upstream the implementation of named_call to JAX. (there are equivalent implementations in Haiku and Flax)

Reference:
Flax implementation:
https://github.com/google/flax/blob/master/flax/core/named_call.py

Haiku implementation:
https://github.com/deepmind/dm-haiku/blob/master/haiku/_src/named_call.py

==

jax/_src/lax/lax.py
jax/lax/__init__.py
==================
ee3a071b;Jake VanderPlas;2020-11-04 13:20:38 -0800;Fix: always canonicalize result_type

==

jax/dtypes.py
==================
3c14abc9;jax authors;2020-11-04 13:12:12 -0800;Merge pull request #4791 from hawkinsp:laxcleanup
PiperOrigin-RevId: 340713763

==
==================
ca066b6a;jax authors;2020-11-04 12:14:11 -0800;Merge pull request #4789 from hawkinsp:xla
PiperOrigin-RevId: 340702836

==
==================
a3d5fe3c;Peter Hawkins;2020-11-04 14:54:50 -0500;Delete deprecated jax.lax.lax* modules which were previously private implementation details of jax.

==

jax/lax/__init__.py
jax/lax/lax.py
jax/lax/lax_control_flow.py
jax/lax/lax_parallel.py
==================
7efc1dbc;Peter Hawkins;2020-11-04 11:54:01 -0800;[JAX] Move source_info_util into jax._src.
TFP uses source_info_util, so we leave a forwarding stub until we can update TFP.

PiperOrigin-RevId: 340698612

==

jax/_src/lax/control_flow.py
jax/_src/lax/parallel.py
jax/_src/source_info_util.py
jax/core.py
jax/experimental/host_callback.py
jax/interpreters/ad.py
jax/interpreters/partial_eval.py
jax/interpreters/xla.py
jax/jaxpr_util.py
jax/source_info_util.py
==================
608cfde9;Peter Hawkins;2020-11-04 14:15:33 -0500;Update XLA.
Update changelog.

==

WORKSPACE
docs/CHANGELOG.rst
==================
16e01a17;Jake VanderPlas;2020-11-04 11:13:12 -0800;Fix issue in jax.dtypes._jax_type

==

jax/dtypes.py
tests/dtypes_test.py
==================
644de249;jax authors;2020-11-04 10:37:10 -0800;Merge pull request #4786 from hawkinsp:import
PiperOrigin-RevId: 340682075

==
==================
bbca6f2f;jax authors;2020-11-04 10:15:47 -0800;Merge pull request #4744 from jakevdp:update-weak-promotion
PiperOrigin-RevId: 340677503

==
==================
ce95989e;Peter Hawkins;2020-11-04 13:11:13 -0500;Remove accidental export of linear_util as jax.lax.lu to fix mypy error..

==

jax/lax/__init__.py
==================
48972459;jax authors;2020-11-04 09:58:40 -0800;Merge pull request #4774 from jblespiau:changelist/340549153
PiperOrigin-RevId: 340670833

==
==================
7aebce09;Jake VanderPlas;2020-11-04 09:54:39 -0800;Update weak dtype promotion rules

==

docs/CHANGELOG.rst
jax/dtypes.py
tests/dtypes_test.py
==================
71dfa9b8;jax authors;2020-11-04 09:38:38 -0800;Merge pull request #4761 from jblespiau:changelist/340395327
PiperOrigin-RevId: 340665483

==
==================
f491da07;jax authors;2020-11-04 09:35:10 -0800;Merge pull request #4782 from bchetioui:cummin_cummax
PiperOrigin-RevId: 340665284

==
==================
d496a50a;jax authors;2020-11-04 09:24:59 -0800;Merge pull request #4781 from gnecula:tf_doc2
PiperOrigin-RevId: 340663352

==
==================
fb7b7dc6;Peter Hawkins;2020-11-04 09:06:13 -0800;[JAX] Move implementation of profiler.py into jax._src.
PiperOrigin-RevId: 340660150

==

jax/_src/profiler.py
jax/profiler.py
==================
81b6cd29;Peter Hawkins;2020-11-04 09:01:18 -0800;[JAX] Move traceback_util.py into jax._src.
traceback_util is a JAX-private API.

PiperOrigin-RevId: 340659195

==

jax/_src/traceback_util.py
jax/abstract_arrays.py
jax/ad_util.py
jax/api.py
jax/api_util.py
jax/core.py
jax/custom_derivatives.py
jax/dtypes.py
jax/interpreters/__init__.py
jax/lazy.py
jax/linear_util.py
jax/pprint_util.py
jax/source_info_util.py
jax/tree_util.py
tests/errors_test.py
==================
c57bbb3c;Peter Hawkins;2020-11-04 08:59:09 -0800;[JAX] Move jax/lax_linalg.py to jax/_src/lax/linalg.py.
Because we now have a facade around the lax library, we can expose the lax_linalg primitives directly in lax without creating circular dependency problems.

Leave a few forwarding stubs to be removed later.

PiperOrigin-RevId: 340658800

==

jax/_src/lax/linalg.py
jax/_src/numpy/linalg.py
jax/_src/scipy/linalg.py
jax/_src/scipy/stats/multivariate_normal.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/correctness_stats.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
jax/lax/__init__.py
jax/lax_linalg.py
tests/batching_test.py
tests/linalg_test.py
==================
142ef859;Benjamin Chetioui;2020-11-04 15:49:52 +0100;[jax2tf] Add support for cummin/cummax.

==

jax/experimental/jax2tf/g3doc/primitives_with_limited_support.md
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
ac9e27f4;Benjamin Chetioui;2020-10-22 16:22:24 +0200;[jax2tf(js)] Implement a CNN based on the Quickdraw dataset that is convertible to TF.js.
- the demo is based on https://blog.tensorflow.org/2018/07/train-model-in-tfkeras-with-colab-and-run-in-browser-tensorflowjs.html
- the third_party code we include in the repo is the one used in
that demo and hosted at https://github.com/zaidalyafeai/zaidalyafeai.github.io/tree/master/sketcher

==

jax/experimental/jax2tf/examples/README.md
jax/experimental/jax2tf/examples/saved_model_lib.py
jax/experimental/jax2tf/examples/tf_js/README.md
jax/experimental/jax2tf/examples/tf_js/quickdraw/README.md
jax/experimental/jax2tf/examples/tf_js/quickdraw/quickdraw.py
jax/experimental/jax2tf/examples/tf_js/quickdraw/third_party/zaidalyafeai.github.io/LICENSE
jax/experimental/jax2tf/examples/tf_js/quickdraw/third_party/zaidalyafeai.github.io/class_names.txt
jax/experimental/jax2tf/examples/tf_js/quickdraw/utils.py
==================
ee707de4;George Necula;2020-11-04 14:43:23 +0200;[jax2tf] Small fixes to the documentation

==

jax/experimental/jax2tf/README.md
==================
63eee674;jax authors;2020-11-04 03:17:25 -0800;Merge pull request #4767 from bchetioui:add_tfxla_flag
PiperOrigin-RevId: 340616160

==
==================
91510f4d;Benjamin Chetioui;2020-11-03 16:33:13 +0100;[jax2tf] Add enable_xla parameter to convert

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
jax/experimental/jax2tf/tests/tf_test_util.py
==================
880e2ff6;jax authors;2020-11-04 01:57:24 -0800;Merge pull request #4778 from gnecula:tf_doc
PiperOrigin-RevId: 340607441

==
==================
28f5bc36;jax authors;2020-11-04 01:45:20 -0800;Merge pull request #4764 from apaszke:xmap
PiperOrigin-RevId: 340606068

==
==================
d50c9009;George Necula;2020-11-04 10:35:42 +0200;[jax2tf] Updates to the documentation.
* moved more content from the internal documentation to GitHub
* moved .md files under g3doc so that they are rendered properly inside Google

Co-authored-by: Benjamin Chetioui <3920784+bchetioui@users.noreply.github.com>

==

jax/experimental/jax2tf/README.md
jax/experimental/jax2tf/g3doc/primitives_with_limited_support.md
jax/experimental/jax2tf/g3doc/primitives_with_limited_support.md.template
jax/experimental/jax2tf/primitives_with_limited_support.md.template
jax/experimental/jax2tf/tests/tf_test_util.py
==================
5c373a7c;George Necula;2020-11-03 22:37:04 -0800;Change links in the .md files to full URLs
PiperOrigin-RevId: 340588410

==

jax/experimental/jax2tf/README.md
jax/experimental/jax2tf/examples/README.md
==================
810fcc4f;jax authors;2020-11-03 16:46:48 -0800;Merge pull request #4765 from bchetioui:fix_fft_test
PiperOrigin-RevId: 340550917

==
==================
e2fdceb3;Jean-Baptiste Lespiau;2020-11-04 01:34:02 +0100;Change `PyBuffer.shape` to be PyBuffer.xla_shape` in a backward compatible way.
We need this as we will update a new Jaxlib with `shape` returning a tuple, and as the submission process in in 2 steps, we need this before updating xla.cc

==

jax/_src/dlpack.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
tests/sharded_jit_test.py
==================
4b25b777;jax authors;2020-11-03 16:37:46 -0800;Merge pull request #4766 from bchetioui:cleanup_fft
PiperOrigin-RevId: 340549622

==
==================
acc66d0b;jax authors;2020-11-03 14:40:29 -0800;Merge pull request #4768 from jblespiau:changelist/340428108
PiperOrigin-RevId: 340528275

==
==================
73c0c3a4;jax authors;2020-11-03 13:51:10 -0800;Merge pull request #4771 from zhangqiaorjc:profiler_test_fix_3
PiperOrigin-RevId: 340517661

==
==================
3e5a0ff0;Jean-Baptiste Lespiau;2020-11-03 14:56:52 +0100;Add methods to interact with `DeviceArray` objects.
We are going to add a C++ implementation, this is a useful refectoring to ease the transition. In short,

- `isinstance(x, DeviceArray)` will continue to work
- type(x) is DeviceArray will be replaced by type_is_device_array(x)
- DeviceArray(...) constructor will be replaced by get_device_array.

==

jax/_src/dlpack.py
jax/_src/lax/lax.py
jax/api.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
tests/api_test.py
tests/custom_object_test.py
tests/lax_numpy_test.py
==================
42591e9b;Qiao Zhang;2020-11-03 11:20:48 -0800;Skip profiler_test if tf_profiler not imported.

==

tests/profiler_test.py
==================
b85e605f;Adam Paszke;2020-11-03 12:11:03 +0000;Add support for collectives in xmap

==

jax/core.py
jax/experimental/general_map.py
tests/gmap_test.py
==================
91fb1933;jax authors;2020-11-03 09:39:35 -0800;Merge pull request #4758 from jakevdp:normalize-cleanup
PiperOrigin-RevId: 340462727

==
==================
e613760e;jax authors;2020-11-03 09:21:55 -0800;Merge pull request #4762 from bchetioui:fix_betainc_test
PiperOrigin-RevId: 340458974

==
==================
c0091a97;Benjamin Chetioui;2020-11-03 18:04:01 +0100;Add back tolerance increase for CPU/GPU

==

jax/experimental/jax2tf/tests/primitives_test.py
==================
e5c4ad22;Marc van Zee;2020-11-03 08:29:00 -0800;Internal change
PiperOrigin-RevId: 340449207

==

jax/interpreters/pxla.py
==================
a26db4d5;jax authors;2020-11-03 08:29:14 -0800;Merge pull request #4769 from jblespiau:changelist/340431710
PiperOrigin-RevId: 340449157

==
==================
6b59a205;Jean-Baptiste Lespiau;2020-11-03 15:26:22 +0100;Fix some indentation.

==

jax/_src/lax/lax.py
==================
ad63d8d6;Benjamin Chetioui;2020-11-03 15:55:14 +0100;Cleanup outdated jaxlib TODOs in jax/_src/lax/fft.py

==

jax/_src/lax/fft.py
==================
85ca4ed1;Benjamin Chetioui;2020-11-03 15:39:14 +0100;[jax2tf] Fix and trim FFT conversion test.

==

jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
e9b36474;jax authors;2020-11-03 05:05:32 -0800;Merge pull request #4755 from apaszke:xmap
PiperOrigin-RevId: 340422269

==
==================
943f831b;jax authors;2020-11-03 03:00:08 -0800;Merge pull request #4760 from gnecula:tf_examples2
PiperOrigin-RevId: 340408960

==
==================
4ee7a296;George Necula;2020-11-03 09:31:10 +0200;[jax2tf] Expanded the SavedModel library to allow the compilation of models.
This is important for use with TensorFlow serving.
Also removed the servo_main.py (only applies to OSS TF Serving, which
does not yet support XLA)

Co-authored-by: Benjamin Chetioui <3920784+bchetioui@users.noreply.github.com>

==

jax/experimental/jax2tf/examples/README.md
jax/experimental/jax2tf/examples/saved_model_lib.py
jax/experimental/jax2tf/examples/saved_model_main.py
jax/experimental/jax2tf/examples/servo_main.py
==================
814fdd96;Benjamin Chetioui;2020-11-03 10:54:31 +0100;[jax2tf] Fix betainc tests.

==

jax/experimental/jax2tf/tests/correctness_stats.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
38eeaf92;Jean-Baptiste Lespiau;2020-11-03 09:50:59 +0100;Add the non-hashble breaking change to the changelog.

==

docs/CHANGELOG.rst
==================
cc8fe15e;jax authors;2020-11-02 13:41:53 -0800;Merge pull request #4757 from zhangqiaorjc:profiler_test_fix
PiperOrigin-RevId: 340306373

==
==================
cbc53561;Jake VanderPlas;2020-11-02 12:53:10 -0800;Cleanup frexp/ldexp/signbit implementations

==

jax/_src/numpy/lax_numpy.py
==================
d29b69a3;Julius Kunze;2020-11-02 19:07:50 +0100;Support polynomial division for mask
Add support for multivariate polynomial division on polymorphic sizes without remainder, allowing `mask` of

- `jnp.reshape` with -1 size and
- `lax.slice` for polymorphic stride for sizes  `poly * stride`, i. e. `(n^2+2n)//n = n+2`

Also clean up `Poly` class, improve error messages.

==

jax/_src/lax/lax.py
jax/_src/numpy/lax_numpy.py
jax/interpreters/masking.py
tests/masking_test.py
==================
1ba59c73;Qiao Zhang;2020-11-02 11:53:06 -0800;Fix errors in tests/profiler_test.py.

==

tests/profiler_test.py
==================
fb9982b8;jax authors;2020-11-02 11:18:05 -0800;Merge pull request #4748 from jakevdp:weak-type-cleanup
PiperOrigin-RevId: 340276486

==
==================
5746569b;Jake VanderPlas;2020-11-01 20:10:51 -0800;Simplify weak types in promotion table

==

jax/dtypes.py
==================
e4ce2b61;jax authors;2020-11-02 10:06:23 -0800;Merge pull request #4751 from majnemer:changelist/340120772
PiperOrigin-RevId: 340258828

==
==================
4892125d;jax authors;2020-11-02 10:02:57 -0800;Merge pull request #4724 from zhangqiaorjc:profiler_test
PiperOrigin-RevId: 340258747

==
==================
d96786d4;Adam Paszke;2020-11-02 16:16:37 +0000;Add a prototype of the new xmap API
At the moment all resources are emulated through vectorization, but it
should be good enough to let us play with some toy examples.

The current implementation is very much a prototype and might end up
being very user unfriendly, because it never checks its assumptions.
Violating them will likely result in a pretty weird error.

==

jax/experimental/general_map.py
tests/gmap_test.py
==================
960b937b;jax authors;2020-11-02 02:12:50 -0800;Merge pull request #4750 from gnecula:tf_examples
PiperOrigin-RevId: 340192271

==
==================
2236d7c3;George Necula;2020-10-31 08:09:08 +0200;[jax2tf] Expanded the jax2tf examples.
There is now a coordinated set of 3 examples that show
training models, saving SavedModel, using with model server,
and reuse with Keras.

More details in examples/README.md

==

jax/experimental/jax2tf/examples/README.md
jax/experimental/jax2tf/examples/keras_reuse_main.py
jax/experimental/jax2tf/examples/keras_reuse_main_test.py
jax/experimental/jax2tf/examples/mnist.py
jax/experimental/jax2tf/examples/mnist_lib.py
jax/experimental/jax2tf/examples/requirements.txt
jax/experimental/jax2tf/examples/saved_model_lib.py
jax/experimental/jax2tf/examples/saved_model_main.py
jax/experimental/jax2tf/examples/saved_model_main_test.py
jax/experimental/jax2tf/examples/servo_main.py
jax/experimental/jax2tf/examples/stax_to_tf_module.py
==================
1aeede73;jax authors;2020-11-02 01:45:05 -0800;Merge pull request #4742 from bchetioui:reduce_top_k_tests
PiperOrigin-RevId: 340189371

==
==================
bc5b583e;jax authors;2020-11-02 01:16:00 -0800;Merge pull request #4741 from bchetioui:reduce_sort_tests
PiperOrigin-RevId: 340186383

==
==================
74b8f040;David Majnemer;2020-11-01 10:28:22 -0800;Re-enable a few tests on TPU

==

tests/lax_numpy_test.py
==================
557046ce;Benjamin Chetioui;2020-10-30 12:28:36 +0100;[jax2tf] Reduce number of tests for top_k.

==

jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
43c42783;Benjamin Chetioui;2020-10-30 10:28:55 +0100;[jax2tf] Reduce number of tests for sort.

==

jax/experimental/jax2tf/tests/primitive_harness.py
==================
425e3d1c;jax authors;2020-10-31 09:21:02 -0700;Merge pull request #4740 from bchetioui:reduce_select_and_gather_add_tests
PiperOrigin-RevId: 340031249

==
==================
21bb501b;jax authors;2020-10-30 11:38:49 -0700;Merge pull request #4739 from google:pytree-docs-revisions
PiperOrigin-RevId: 339909710

==
==================
9086e40f;jax authors;2020-10-30 08:51:48 -0700;Merge pull request #3422 from google:readme-libraries
PiperOrigin-RevId: 339878355

==
==================
a7d1963b;Matthew Johnson;2020-10-30 08:42:04 -0700;update neural network libraries text
Co-authored-by: George Necula <necula@google.com>

==

README.md
==================
a4ce2813;Matthew Johnson;2020-06-12 10:35:59 -0700;link to nn libraries in readme
Co-authored-by: Skye Wanderman-Milne <skyewm@google.com>
Co-authored-by: James Bradbury <jekbradbury@google.com>
==

README.md
==================
39c8ec41;Matthew Johnson;2020-10-30 08:01:10 -0700;tweak language

==

docs/pytrees.rst
==================
41c05738;jax authors;2020-10-30 05:16:33 -0700;Merge pull request #4735 from bchetioui:reduce_fft_tests
PiperOrigin-RevId: 339853045

==
==================
a9c93d0d;Benjamin Chetioui;2020-10-29 17:49:20 +0100;[jax2tf] Cleanup FFT conversion and reduce the number of tests.

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
126c5b31;jax authors;2020-10-30 03:19:05 -0700;Merge pull request #4736 from bchetioui:reduce_scatter_tests
PiperOrigin-RevId: 339841143

==
==================
f2ff176c;Benjamin Chetioui;2020-10-30 09:53:28 +0100;[jax2tf] Reduce number of tests for select_and_gather_add.

==

jax/experimental/jax2tf/tests/primitive_harness.py
==================
98e7ef93;Matthew Johnson;2020-10-29 22:27:07 -0700;fix italics

==

docs/pytrees.rst
==================
95687753;Matthew Johnson;2020-10-29 22:26:23 -0700;add another brief para about the registry

==

docs/pytrees.rst
==================
bbc85f4a;Matthew Johnson;2020-10-29 22:22:15 -0700;revise pytree docs to remove contradiction

==

docs/pytrees.rst
==================
2e533562;jax authors;2020-10-29 21:45:01 -0700;Merge pull request #4737 from jakevdp:weak-type-promotion
PiperOrigin-RevId: 339807549

==
==================
d965fe4b;Jake VanderPlas;2020-10-29 15:11:37 -0700;Switch to declarative weak dtype promotion rules.

==

jax/dtypes.py
jax/interpreters/partial_eval.py
tests/dtypes_test.py
==================
c54d8d4b;jax authors;2020-10-29 17:29:18 -0700;Merge pull request #4738 from jakevdp:promo-test-x32
PiperOrigin-RevId: 339780282

==
==================
377f09c5;Qiao Zhang;2020-10-27 20:51:38 -0700;Add test for profiler client/server interaction.

==

tests/profiler_test.py
==================
60f91a15;Jake VanderPlas;2020-10-29 15:24:42 -0700;Expand type promotion test to cover x32 mode

==

tests/dtypes_test.py
==================
09d87efb;jax authors;2020-10-29 13:43:56 -0700;Merge pull request #4732 from shoyer:rk45-ref
PiperOrigin-RevId: 339738004

==
==================
3c5f82f3;Stephan Hoyer;2020-10-28 18:57:51 -0700;Add reference on RK45

==

jax/experimental/ode.py
==================
2adcbc64;Benjamin Chetioui;2020-10-29 18:49:22 +0100;[jax2tf] Reduce number of tests for the conversion of scatter.

==

jax/experimental/jax2tf/primitives_with_limited_support.md
jax/experimental/jax2tf/tests/correctness_stats.py
jax/experimental/jax2tf/tests/primitive_harness.py
==================
d158647c;jax authors;2020-10-29 05:11:23 -0700;Merge pull request #4706 from apaszke:vmap-collectives-in-scan
PiperOrigin-RevId: 339646941

==
==================
278d4131;jax authors;2020-10-29 04:36:13 -0700;Merge pull request #4691 from bchetioui:fix_select_and_scatter_add
PiperOrigin-RevId: 339642918

==
==================
dfce7482;Benjamin Chetioui;2020-10-23 12:42:13 +0200;[jax2tf] Fix implementation and tests of select_and_scatter_add conversion.

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/primitives_with_limited_support.md
jax/experimental/jax2tf/tests/correctness_stats.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
3e6da7e0;jax authors;2020-10-28 16:35:32 -0700;Merge pull request #4731 from jakevdp:weak-promotion-test
PiperOrigin-RevId: 339562548

==
==================
7cd319a0;Jake VanderPlas;2020-10-28 15:07:31 -0700;Add explicit tests of weak/strong promotion semantics

==

tests/dtypes_test.py
==================
77f3c225;jax authors;2020-10-28 03:08:08 -0700;Merge pull request #4727 from gnecula:tf_poly5
PiperOrigin-RevId: 339425381

==
==================
dad8377b;Jean-Baptiste Lespiau;2020-10-28 02:21:05 -0700;Enable C++ jit again.
PiperOrigin-RevId: 339419691

==

WORKSPACE
jax/api.py
tests/api_test.py
==================
137ec99c;George Necula;2020-10-15 08:24:35 +0300;[jax2tf] Expanding jax2tf shape polymorphism.
Allow shape variables in the primitive parameters, e.g., the
shape parameter for the reshape primitive. More details
are in the updated README.md.

==

jax/experimental/jax2tf/README.md
jax/experimental/jax2tf/__init__.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/shape_poly_test.py
jax/interpreters/masking.py
==================
98fb6cfc;jax authors;2020-10-27 23:01:51 -0700;Merge pull request #4720 from google:static-argnums-immutable
PiperOrigin-RevId: 339400934

==
==================
a2b91fad;jax authors;2020-10-27 22:07:22 -0700;Merge pull request #4726 from google:remove-unused-import
PiperOrigin-RevId: 339395357

==
==================
1c4d873f;Matthew Johnson;2020-10-27 21:40:41 -0700;remove unused import

==

jax/api_util.py
==================
cb48f423;Jean-Baptiste Lespiau;2020-10-27 16:11:41 -0700;Raise an error on non-hashable static arguments for jax.jit and xla_computation.
Up to now, Jax was silently wrapping the object to ensure objects which are not hashable will be hashed using `id` and compared using `is`:

```
class WrapHashably(object):
  __slots__ = ["val"]
  def __init__(self, val):
    self.val = val
  def __hash__(self):
    return id(self.val)
  def __eq__(self, other):
    return self.val is other.val
```

This means that when providing different instances of objects that are non hashable, a recompilation was always occurring. This can be non-intuitive, for example with:

@partial(jax.jit, static_argnums=(1,))
def sum(a, b):
  return a+ b
sum(np.asarray([1,2,3]), np.asarray([4,5,6])
# The next line will recompile, because the 1-indexed argument is non
# hashable and thus compared by identity with different instances
sum(np.asarray([1,2,3]), np.asarray([4,5,6])

or more simply
np.pad(a, [2, 3], 'constant', constant_values=(4, 6))
          ^^^^^^
          non-hashable static argument.

The same problems can occur with any non-hashable types such as lists, dicts, etc. Even JAX itself was having some issues with this (which shows the behaviour was non-trivial to reason about).

If this commit breaks you, you usually have one of the following options:
- If specifying numpy array or jnp arrays arguments as static, you probably simply need to make them non static.
- When using non-hashable values, such as list, dicts or sets, you can simply use non-mutable versions, with tuples, frozendict, and frozenset.
- You can also change the way the function is defined, to capture these non-hashable arguments by closure, returning the jitted function.

PiperOrigin-RevId: 339351798

==

jax/api_util.py
tests/api_test.py
==================
a7de6942;Roy Frostig;2020-10-27 14:45:52 -0700;tiny change to test source sync
PiperOrigin-RevId: 339333790

==

jax/traceback_util.py
==================
3e56be2a;Roy Frostig;2020-10-27 14:19:11 -0700;Merge pull request #4597 from gnecula:tf_poly3
PiperOrigin-RevId: 339327059

==
==================
1da36943;Matthew Johnson;2020-10-27 13:26:38 -0700;mention static_argnum values should be immutable

==

jax/api.py
==================
38ba3471;jax authors;2020-10-27 02:09:12 -0700;Merge pull request #4716 from gnecula:update_changelog
PiperOrigin-RevId: 339206923

==
==================
da9a64ef;George Necula;2020-10-27 10:26:56 +0200;Update CHANGELOG

==

docs/CHANGELOG.rst
==================
8458cab0;George Necula;2020-10-27 09:41:05 +0200;Fix flakes

==

jax/experimental/jax2tf/jax2tf.py
==================
36542e04;George Necula;2020-10-27 09:38:29 +0200;Edits for the documentation

==

jax/experimental/jax2tf/README.md
==================
f0d2a4d2;George Necula;2020-10-15 08:24:35 +0300;[jax2tf] Expanding jax2tf shape polymorphism.
Allow shape variables in the primitive parameters, e.g., the
shape parameter for the reshape primitive. More details
are in the updated README.md.

==

jax/experimental/jax2tf/README.md
jax/experimental/jax2tf/__init__.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/shape_poly_test.py
jax/interpreters/masking.py
==================
9092ad3d;jax authors;2020-10-26 18:44:26 -0700;Merge pull request #4713 from google:simpler-select-jvp
PiperOrigin-RevId: 339162372

==
==================
7a73e99e;Matthew Johnson;2020-10-26 15:32:31 -0700;simplify select jvp
also remove some coverage of broadcast_p, which jax never generates now

==

jax/_src/lax/lax.py
jax/experimental/jet.py
jax/lax/__init__.py
tests/lax_test.py
==================
ab3a4c2f;jax authors;2020-10-26 17:23:02 -0700;Merge pull request #4708 from google:docfix-jit
PiperOrigin-RevId: 339152216

==
==================
a4956695;jax authors;2020-10-26 17:02:19 -0700;Merge pull request #4695 from Joshuaalbert:master
PiperOrigin-RevId: 339148615

==
==================
231168d4;joshuaalbert;2020-10-26 23:58:09 +0100;all changes plus test verifcation on TPU squashed

==

jax/_src/scipy/optimize/line_search.py
jax/_src/scipy/optimize/minimize.py
tests/scipy_optimize_test.py
==================
25b40702;jax authors;2020-10-26 15:17:45 -0700;Merge pull request #4707 from google:traceback-register
PiperOrigin-RevId: 339129121

==
==================
4c9545d6;jax authors;2020-10-26 14:01:37 -0700;Merge pull request #4709 from google:update-pypi
PiperOrigin-RevId: 339112147

==
==================
3bb0c49b;jax authors;2020-10-26 13:58:11 -0700;Merge pull request #4702 from fabianp:patch-3
PiperOrigin-RevId: 339111474

==
==================
4ddfffff;Matthew Johnson;2020-10-26 13:20:32 -0700;update version and changelog for pypi

==

docs/CHANGELOG.rst
jax/version.py
==================
9fc53b6e;Roy Frostig;2020-10-26 12:52:24 -0700;fix jit docstring

==

jax/api.py
==================
fa1d7ab5;Roy Frostig;2020-10-26 12:30:51 -0700;move `wraps` from `api_util` to `util` to avoid cyclic dependencies

==

jax/api.py
jax/api_util.py
jax/experimental/callback.py
jax/interpreters/sharded_jit.py
jax/traceback_util.py
jax/util.py
==================
5d50e193;Roy Frostig;2020-10-26 10:03:06 -0700;add path exclusion opt-in to filtered stack traces and use it throughout the codebase

==

jax/abstract_arrays.py
jax/ad_util.py
jax/api.py
jax/api_util.py
jax/core.py
jax/custom_derivatives.py
jax/dtypes.py
jax/interpreters/__init__.py
jax/lazy.py
jax/linear_util.py
jax/pprint_util.py
jax/source_info_util.py
jax/traceback_util.py
jax/tree_util.py
jax/util.py
==================
6348a99f;Adam Paszke;2020-10-26 10:11:13 +0000;Add support for vmap collectives in control flow primitives
All initial style primitives currently use `batch_jaxpr` in their
batching rules, but that function hasn't been updated to support
axis_name when I added support for vmap collectives.

==

jax/_src/lax/control_flow.py
jax/_src/lax/parallel.py
jax/core.py
jax/custom_derivatives.py
jax/interpreters/batching.py
jax/interpreters/pxla.py
tests/lax_control_flow_test.py
==================
abbd8270;jax authors;2020-10-24 11:42:17 -0700;Merge pull request #4698 from google:custom-gradient-wrapper
PiperOrigin-RevId: 338846354

==
==================
5d736286;Fabian Pedregosa;2020-10-24 10:00:23 -0400;FIX: example usage of optimizers
The example usage of the optimizers API in this docstring did not correspond with the current API where optimizers return a triplet (opt_init, opt_update, get_params) and not an object with .init, .update and .get_params fields. Using the previous code would result in the error "AttributeError: 'Optimizer' object has no attribute 'init'"
==

jax/experimental/optimizers.py
==================
3c6cdcfc;Matthew Johnson;2020-10-23 13:54:23 -0700;add jax.custom_gradient wrapper for jax.custom_vjp
There was a deprecatd version of this wrapper implemented in terms of
jax.custom_transforms (which itself is deprecated, and hopefully soon to
be removed), but this commit adds an implementation in terms of
jax.custom_vjp. One drawback it has relative to jax.custom_vjp is that
it doesn't support Python control flow in the backward-pass function.

==

jax/api.py
jax/custom_derivatives.py
tests/api_test.py
==================
602c7836;jax authors;2020-10-23 16:52:32 -0700;Merge pull request #4700 from hawkinsp:fft
PiperOrigin-RevId: 338769487

==
==================
9b7fd632;Peter Hawkins;2020-10-23 19:38:43 -0400;Add PocketFFT mirror to fix download problems for some Bazel versions.

==

third_party/pocketfft/workspace.bzl
==================
f58f1ee4;Peter Hawkins;2020-10-23 14:20:06 -0700;[JAX] Use PocketFFT for FFTs on CPU instead of Eigen.
PocketFFT is the same FFT library used by NumPy (although we are using the C++ variant rather than the C variant.)

For the benchmark in #2952 on my workstation:

Before:
```
907.3490574884647
max:     4.362646594533903e-08
mean:    6.237288307614869e-09
min:     0.0
numpy fft execution time [ms]:   37.088446617126465
jax fft execution time [ms]:     74.93342399597168
```

After:
```
907.3490574884647
max:     1.9057386696477137e-12
mean:    3.9326737908882566e-13
min:     0.0
numpy fft execution time [ms]:   37.756404876708984
jax fft execution time [ms]:     28.128278255462646
```

Fixes https://github.com/google/jax/issues/2952

PiperOrigin-RevId: 338743753

==

WORKSPACE
build/BUILD.bazel
build/install_xla_in_source_tree.sh
build/setup.py
jax/BUILD
jax/_src/lax/fft.py
jax/experimental/jax2tf/tests/primitives_test.py
jax/lib/__init__.py
jaxlib/BUILD
jaxlib/kernel_pybind11_helpers.h
jaxlib/pocketfft.cc
jaxlib/pocketfft.fbs
jaxlib/pocketfft.py
tests/fft_test.py
third_party/pocketfft/BUILD.bazel
third_party/pocketfft/workspace.bzl
==================
8121255d;jax authors;2020-10-23 14:12:13 -0700;Merge pull request #4661 from jblespiau:changelist/338124676
PiperOrigin-RevId: 338742268

==
==================
98ee69ba;Jean-Baptiste Lespiau;2020-10-20 22:22:33 +0200;Emit a warning on non-hashble static arguments in jax.jit.
The message looks like, e.g.:

Static argument (index 1) of type <class 'numpy.ndarray'> for function f is non-hashable. As this can lead to unexpected cache-misses, it will raise an error in a near future.

==

jax/api.py
jax/api_util.py
==================
9ba28d26;Matthew Johnson;2020-10-23 07:34:32 -0700;Copybara import of the project:
--
ced333d1d4aec2825e9afd81c2ca9721b7e3cc67 by Matthew Johnson <mattjj@google.com>:

redo #4535 lazy simplification

PiperOrigin-RevId: 338670328

==

jax/_src/lax/lax.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/correctness_stats.py
jax/random.py
tests/api_test.py
tests/lax_numpy_test.py
==================
fcaced32;Matthew Johnson;2020-10-22 21:17:56 -0700;Copybara import of the project:
--
ced333d1d4aec2825e9afd81c2ca9721b7e3cc67 by Matthew Johnson <mattjj@google.com>:

redo #4535 lazy simplification

PiperOrigin-RevId: 338606348

==

jax/_src/lax/lax.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/correctness_stats.py
jax/random.py
tests/api_test.py
tests/lax_numpy_test.py
==================
2677c04f;jax authors;2020-10-22 18:16:02 -0700;Merge pull request #4658 from jakevdp:custom-obj-avals
PiperOrigin-RevId: 338588156

==
==================
8ff63961;jax authors;2020-10-22 17:29:55 -0700;Merge pull request #4686 from google:lazy-simplification-again
PiperOrigin-RevId: 338582074

==
==================
fe917282;jax authors;2020-10-22 17:02:26 -0700;Merge pull request #4685 from google:make-dynamic-slice-transpose-handle-symbolic-zero-cotangents
PiperOrigin-RevId: 338577125

==
==================
9845cced;jax authors;2020-10-22 16:59:04 -0700;Merge pull request #4684 from jakevdp:cleanup
PiperOrigin-RevId: 338577036

==
==================
ced333d1;Matthew Johnson;2020-10-22 16:37:08 -0700;redo #4535 lazy simplification

==

jax/_src/lax/lax.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/correctness_stats.py
jax/random.py
tests/api_test.py
tests/lax_numpy_test.py
==================
a8b90566;jax authors;2020-10-22 15:33:03 -0700;Merge pull request #4681 from jblespiau:changelist/338538921
PiperOrigin-RevId: 338562006

==
==================
f40ac067;Matthew Johnson;2020-10-22 15:31:43 -0700;make lax.dynamic_slice transpose handle symb zeros

==

jax/_src/lax/lax.py
==================
2af475d9;Jake VanderPlas;2020-10-22 15:18:03 -0700;Cleanup: pass function name rather than function object

==

jax/_src/numpy/lax_numpy.py
==================
225cdb98;Jean-Baptiste Lespiau;2020-10-22 22:34:04 +0200;Fix a bug in `make_jaxpr`, as static-arguments should be passed as is

==

jax/api.py
==================
48db25e6;Jake VanderPlas;2020-10-20 12:42:17 -0700;[multi-buf] simplify custom object test avals

==

tests/custom_object_test.py
==================
20ee4150;jax authors;2020-10-22 09:12:32 -0700;Merge pull request #4644 from jblespiau:changelist/337949790
PiperOrigin-RevId: 338484804

==
==================
62cbc231;Jean-Baptiste Lespiau;2020-10-22 08:57:12 -0700;Raise a meaningful exception in the C++ jax.jit on non-hashable object static argnum.
This also fixes 2 tests that were passing non-hashable values to a jitted function.

PiperOrigin-RevId: 338481880

==

tests/api_test.py
==================
cbd07798;jax authors;2020-10-21 16:03:13 -0700;Merge pull request #4635 from aldragan0:numpy-setdiff1d
PiperOrigin-RevId: 338358849

==
==================
b7fee456;Alex Dragan;2020-10-17 23:48:39 +0300;[impl] Add support for setdiff1d

==

docs/jax.numpy.rst
jax/_src/numpy/lax_numpy.py
jax/numpy/__init__.py
tests/lax_numpy_test.py
==================
72a273f7;jax authors;2020-10-21 09:44:25 -0700;Merge pull request #4459 from romanngg:extract_patches
PiperOrigin-RevId: 338281178

==
==================
bcc1d71a;jax authors;2020-10-21 01:53:46 -0700;Merge pull request #4650 from gnecula:abstract_check
PiperOrigin-RevId: 338222103

==
==================
da0bff2f;Roman Novak;2020-10-20 22:58:53 -0700;Add `lax.conv_general_dilated_patches`

==

docs/jax.lax.rst
jax/_src/lax/lax.py
jax/_src/lax/other.py
jax/lax/__init__.py
tests/lax_test.py
==================
c5b983c0;George Necula;2020-10-21 07:53:37 +0300;Update jax/core.py
Co-authored-by: Roy Frostig <froystig@users.noreply.github.com>
==

jax/core.py
==================
e098fbda;jax authors;2020-10-20 21:42:51 -0700;Merge pull request #4665 from google:fix-custom-jvp-vmap-bug
PiperOrigin-RevId: 338197181

==
==================
32ffb247;Matthew Johnson;2020-10-20 21:20:04 -0700;fix flake

==

tests/api_test.py
==================
d5c94082;Matthew Johnson;2020-10-20 21:16:00 -0700;improve tests

==

tests/api_test.py
==================
a46d0028;Matthew Johnson;2020-10-20 21:08:59 -0700;fix a custom_jvp vmap bug from @dpfau

==

jax/custom_derivatives.py
tests/api_test.py
==================
dcfa7644;jax authors;2020-10-20 19:22:02 -0700;Merge pull request #4663 from google:improve-tracer-error-2
PiperOrigin-RevId: 338183176

==
==================
2b62a447;Matthew Johnson;2020-10-20 19:10:41 -0700;only run test with omnistaging on

==

tests/api_test.py
==================
49b1ec22;Matthew Johnson;2020-10-20 18:26:32 -0700;add test

==

tests/api_test.py
==================
8684da4c;jax authors;2020-10-20 18:18:11 -0700;Merge pull request #4664 from google:4008-fixes
PiperOrigin-RevId: 338176122

==
==================
79e3db55;Matthew Johnson;2020-10-20 17:51:51 -0700;fixes on #4008 (thanks @apaszke)

==

docs/custom_vjp_update.md
jax/custom_derivatives.py
==================
00905022;jax authors;2020-10-20 17:49:35 -0700;Merge pull request #4662 from google:skip-dlpack-tests-on-jaxlib-version
PiperOrigin-RevId: 338172795

==
==================
ac6cd23b;Matthew Johnson;2020-10-20 16:10:56 -0700;improve an escaped tracer error

==

jax/interpreters/partial_eval.py
==================
4a19de60;Matthew Johnson;2020-10-20 15:35:03 -0700;added test skips based on jaxlib version
(o/w these were failing at HEAD for me)

==

tests/array_interoperability_test.py
==================
d001ac6b;Peter Hawkins;2020-10-20 13:06:37 -0700;[JAX] Add support for retaining ownership of DLPack tensors.
Move dlpack.py contents under jax/_src/dlpack.py.

Add array interoperability test between JAX and TensorFlow using DLPack.

Fixes: https://github.com/google/jax/issues/4636
PiperOrigin-RevId: 338120910

==

docs/CHANGELOG.rst
jax/_src/dlpack.py
jax/dlpack.py
tests/array_interoperability_test.py
==================
41eea2c7;jax authors;2020-10-20 12:40:54 -0700;Merge pull request #4657 from skye:jaxlib2
PiperOrigin-RevId: 338114862

==
==================
cb591eb7;George Necula;2020-10-20 22:28:22 +0300;Update jax/core.py
Co-authored-by: Roy Frostig <froystig@users.noreply.github.com>
==

jax/core.py
==================
a0821696;Skye Wanderman-Milne;2020-10-14 10:30:47 -0700;Update README and jaxlib.__version__ for new jaxlib release

==

README.md
jaxlib/version.py
==================
52dbeeee;jax authors;2020-10-20 11:17:48 -0700;Merge pull request #4656 from hawkinsp:xla
PiperOrigin-RevId: 338096915

==
==================
29a83ddd;Peter Hawkins;2020-10-20 14:11:47 -0400;Update XLA.
Incorporates fix for #4651.

Fixes #4651.

==

WORKSPACE
docs/CHANGELOG.rst
==================
9c0452d7;jax authors;2020-10-20 10:55:30 -0700;Merge pull request #4655 from skye:cpp_jit
PiperOrigin-RevId: 338092016

==
==================
8ef49a3b;Skye Wanderman-Milne;2020-10-20 09:52:00 -0700;Don't turn on C++ jit by default until we're sure it works everywhere.

==

jax/api.py
==================
537427aa;Alexey Radul;2020-10-20 08:24:53 -0700;Copybara import of the project:
--
138105a9ea44e7a8c3ce575a4e51b7ed51518d41 by Skye Wanderman-Milne <skyewm@google.com>:

Update README, CHANGELOG, and jaxlib.__version__ for new jaxlib release

PiperOrigin-RevId: 338063494

==

README.md
jaxlib/version.py
==================
455f6bd0;jax authors;2020-10-20 07:10:01 -0700;Merge pull request #4652 from hawkinsp:stats
PiperOrigin-RevId: 338053891

==
==================
c0b480bd;Peter Hawkins;2020-10-20 09:47:35 -0400;Add missing jax.scipy.stats distributions to the docs.
Alphabetize import order.

==

docs/jax.scipy.rst
jax/scipy/stats/__init__.py
==================
114c1dd0;Jean-Baptiste Lespiau;2020-10-20 00:43:04 +0200;Also convert numpy arrays to hashable values.
This was working for a combination of lists and tuples, but the user can also pass a numpy array. Iterable is the correct type here, not Sequence.

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
09653bf5;George Necula;2020-10-20 11:08:39 +0300;Ensure that check_jaxpr is done with abstract values
Prior to this it was possible, e.g., for code that contains a Literal,
such as  to result in FLOPS during checking.

The assertion is broken by many tests unless we raise_to_shape for Literals.

I have timed the checks on my laptop and I do not see a reduction in the
total test time.

==

jax/core.py
==================
4b8334ab;jax authors;2020-10-19 19:13:29 -0700;Merge pull request #4647 from google:update-pypi
PiperOrigin-RevId: 337980411

==
==================
87623ead;Matthew Johnson;2020-10-19 18:55:09 -0700;update version and changelog for pypi

==

docs/CHANGELOG.rst
jax/version.py
==================
e567b22c;jax authors;2020-10-19 17:39:45 -0700;Merge pull request #4571 from skye:warning
PiperOrigin-RevId: 337970302

==
==================
60141d95;jax authors;2020-10-19 15:45:56 -0700;Merge pull request #4580 from skye:jaxlib
PiperOrigin-RevId: 337950285

==
==================
6a54f167;jax authors;2020-10-19 15:36:35 -0700;Merge pull request #4641 from jakevdp:indexing-deprecation
PiperOrigin-RevId: 337948469

==
==================
c17fbe23;jax authors;2020-10-19 15:18:17 -0700;Merge pull request #4642 from lmmx:master
PiperOrigin-RevId: 337944772

==
==================
c56f76db;Jake VanderPlas;2020-10-19 14:07:40 -0700;Add deprecation warning for indexing with non-tuple sequences

==

jax/_src/numpy/lax_numpy.py
tests/lax_numpy_indexing_test.py
tests/lax_numpy_test.py
==================
11e6f49c;Louis Maddox;2020-10-19 21:35:18 +0100;A couple of typo/gap fixes in PRNG design notes

==

design_notes/prng.md
==================
b7ec636c;jax authors;2020-10-19 08:27:25 -0700;Merge pull request #4616 from bchetioui:test_linear_solve
PiperOrigin-RevId: 337859240

==
==================
a8cfc748;Benjamin Chetioui;2020-10-16 12:51:47 +0200;[jax2tf] Implemented a conversion for linear_solve_p

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/primitives_with_limited_support.md
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
f785794a;jax authors;2020-10-19 05:27:48 -0700;Merge pull request #4613 from bchetioui:test_lu
PiperOrigin-RevId: 337836222

==
==================
7d301877;Benjamin Chetioui;2020-10-16 15:22:37 +0200;[jax2tf] Implemented conversion of lu_p using _convert_jax_impl.

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/correctness_stats.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
26771b31;jax authors;2020-10-17 13:53:48 -0700;Merge pull request #4634 from hawkinsp:src2
PiperOrigin-RevId: 337681899

==
==================
e5e33f57;jax authors;2020-10-17 13:50:44 -0700;Merge pull request #4633 from hawkinsp:src
PiperOrigin-RevId: 337681883

==
==================
10b7d7d7;Peter Hawkins;2020-10-17 14:33:26 -0400;Move implementation of jax.lax into jax._src.lax.
Remove lax_ prefixes from jax/_src/lax filenames, since they aren't needed any longer to avoid name conflicts.

==

jax/_src/lax/__init__.py
jax/_src/lax/control_flow.py
jax/_src/lax/fft.py
jax/_src/lax/lax.py
jax/_src/lax/parallel.py
jax/_src/numpy/lax_numpy.py
jax/experimental/doubledouble.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/correctness_stats.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jet.py
jax/experimental/loops.py
jax/lax/__init__.py
jax/lax/lax.py
jax/lax/lax_control_flow.py
jax/lax/lax_parallel.py
jax/lax_linalg.py
==================
b0784835;Peter Hawkins;2020-10-17 14:51:39 -0400;Import jax.nn.functions by default to fix breakage.

==

jax/nn/__init__.py
==================
3ddd3905;Peter Hawkins;2020-10-17 11:42:40 -0700;Move jax.third_party to jax._src.third_party.
PiperOrigin-RevId: 337675377

==

jax/_src/numpy/linalg.py
jax/_src/third_party/README.md
jax/_src/third_party/__init__.py
jax/_src/third_party/numpy/LICENSE
jax/_src/third_party/numpy/__init__.py
jax/_src/third_party/numpy/linalg.py
jax/numpy/linalg.py
==================
09dfd474;jax authors;2020-10-17 11:05:40 -0700;Merge pull request #4631 from hawkinsp:src
PiperOrigin-RevId: 337673701

==
==================
b2808dc8;Peter Hawkins;2020-10-17 11:31:19 -0400;Move jax.nn implementation into jax._src.nn.

==

jax/_src/nn/__init__.py
jax/_src/nn/functions.py
jax/_src/nn/initializers.py
jax/nn/__init__.py
jax/nn/functions.py
jax/nn/initializers.py
==================
e9909ce0;jax authors;2020-10-17 10:36:09 -0700;Copybara import of the project:
--
a396cfbbd414f6f21f0c7e8a68e6e89d202c0e84 by Peter Hawkins <phawkins@google.com>:

Move jax.nn implementation into jax._src.nn.

PiperOrigin-RevId: 337671917

==

jax/_src/nn/__init__.py
jax/_src/nn/initializers.py
jax/nn/__init__.py
jax/nn/functions.py
jax/nn/initializers.py
==================
15bd7f64;jax authors;2020-10-17 10:31:16 -0700;Merge pull request #4628 from hawkinsp:src3
PiperOrigin-RevId: 337671365

==
==================
8841dd4e;jax authors;2020-10-17 10:30:56 -0700;Merge pull request #4627 from hawkinsp:src2
PiperOrigin-RevId: 337671357

==
==================
ce51b976;jax authors;2020-10-17 10:27:42 -0700;Merge pull request #4626 from hawkinsp:src
PiperOrigin-RevId: 337671310

==
==================
b42dd89d;jax authors;2020-10-17 10:27:25 -0700;Merge pull request #4624 from romanngg:patch-1
PiperOrigin-RevId: 337671286

==
==================
e4e54f74;jax authors;2020-10-17 10:23:41 -0700;Merge pull request #4625 from jblespiau:changelist/337664495
PiperOrigin-RevId: 337671242

==
==================
1c7d726f;Jean-Baptiste Lespiau;2020-10-17 17:19:11 +0200;Make pad more robust to non-hashable values.
The `pad_width` can be an iterable of iterbles, thus, we need to cast both the inner and outer list to tuples.
Also, the values should be intergers, but some use-cases (mostly Tensorflow) pass e.g. DeviceArray(1) as values in there.

==

jax/_src/numpy/lax_numpy.py
==================
ef57858d;Peter Hawkins;2020-10-17 11:45:28 -0400;Move jax.ops implementation into jax._src.ops.

==

jax/_src/ops/__init__.py
jax/_src/ops/scatter.py
jax/ops/__init__.py
==================
c876efcc;Peter Hawkins;2020-10-17 11:37:55 -0400;Move implementation of jax.image to jax._src.image.

==

jax/_src/image/__init__.py
jax/_src/image/scale.py
jax/image/__init__.py
==================
a396cfbb;Peter Hawkins;2020-10-17 11:31:19 -0400;Move jax.nn implementation into jax._src.nn.

==

jax/_src/nn/__init__.py
jax/_src/nn/functions.py
jax/_src/nn/initializers.py
jax/nn/__init__.py
jax/nn/initializers.py
==================
2e6c6536;jax authors;2020-10-16 21:36:55 -0700;Merge pull request #4623 from google:issue4622
PiperOrigin-RevId: 337626097

==
==================
9cf018da;Matthew Johnson;2020-10-16 21:00:18 -0700;add tests for issue #4622

==

tests/api_test.py
==================
52282cd4;Matthew Johnson;2020-10-16 20:48:57 -0700;fix test

==

jax/api.py
tests/api_test.py
==================
621b3726;Roman Novak;2020-10-16 20:09:20 -0700;Make `ConvGeneralDilatedDimensionNumbers` type public

==

jax/lax/__init__.py
==================
ab21409e;jax authors;2020-10-16 19:16:22 -0700;Merge pull request #4621 from hawkinsp:src
PiperOrigin-RevId: 337616739

==
==================
a493a0f4;Matthew Johnson;2020-10-16 18:21:01 -0700;ensure ConcreteArray equality stays in Python

==

jax/core.py
==================
1ab0c3d3;Matthew Johnson;2020-10-16 17:57:59 -0700;refine linearize aval checks

==

jax/api.py
==================
aa107cf1;Peter Hawkins;2020-10-16 18:08:20 -0400;Move jax.numpy internals into jax._src.numpy.

==

jax/_src/numpy/__init__.py
jax/_src/numpy/fft.py
jax/_src/numpy/lax_numpy.py
jax/_src/numpy/linalg.py
jax/_src/numpy/polynomial.py
jax/_src/numpy/util.py
jax/_src/numpy/vectorize.py
jax/_src/scipy/linalg.py
jax/_src/scipy/ndimage.py
jax/_src/scipy/signal.py
jax/_src/scipy/special.py
jax/_src/scipy/stats/bernoulli.py
jax/_src/scipy/stats/beta.py
jax/_src/scipy/stats/cauchy.py
jax/_src/scipy/stats/dirichlet.py
jax/_src/scipy/stats/expon.py
jax/_src/scipy/stats/gamma.py
jax/_src/scipy/stats/geom.py
jax/_src/scipy/stats/laplace.py
jax/_src/scipy/stats/logistic.py
jax/_src/scipy/stats/multivariate_normal.py
jax/_src/scipy/stats/norm.py
jax/_src/scipy/stats/pareto.py
jax/_src/scipy/stats/poisson.py
jax/_src/scipy/stats/t.py
jax/_src/scipy/stats/uniform.py
jax/lax/lax_parallel.py
jax/lax_linalg.py
jax/numpy/__init__.py
jax/numpy/fft.py
jax/numpy/linalg.py
jax/ops/scatter.py
jax/random.py
jax/third_party/numpy/linalg.py
tests/masking_test.py
tests/polynomial_test.py
==================
9ea1311c;jax authors;2020-10-16 15:37:57 -0700;Merge pull request #4620 from sharadmv:callback-custom-jvp
PiperOrigin-RevId: 337590572

==
==================
6038b6d9;jax authors;2020-10-16 15:27:40 -0700;Merge pull request #3712 from google:hashable-static-args-only
PiperOrigin-RevId: 337588918

==
==================
c8a1a8de;Matthew Johnson;2020-10-16 15:07:02 -0700;remove extraneous test tol change

==

tests/lax_scipy_test.py
==================
cae5334f;Sharad Vikram;2020-10-16 15:04:08 -0700;fix lint error

==

jax/experimental/callback.py
==================
84a239d8;jax authors;2020-10-16 15:00:33 -0700;Merge pull request #4619 from hawkinsp:src
PiperOrigin-RevId: 337584293

==
==================
e8901d51;Sharad Vikram;2020-10-16 14:53:23 -0700;Add default implementation of process_custom_jvp_call and process_custom_vjp_call to `jax.experimental.callback`

==

jax/experimental/callback.py
tests/callback_test.py
==================
6acb4651;Peter Hawkins;2020-10-16 16:55:14 -0400;Move most of the implementation of jax.scipy into jax._src.scipy.

==

jax/BUILD
jax/_src/__init__.py
jax/_src/scipy/__init__.py
jax/_src/scipy/linalg.py
jax/_src/scipy/ndimage.py
jax/_src/scipy/optimize/__init__.py
jax/_src/scipy/optimize/bfgs.py
jax/_src/scipy/optimize/line_search.py
jax/_src/scipy/optimize/minimize.py
jax/_src/scipy/signal.py
jax/_src/scipy/special.py
jax/_src/scipy/stats/__init__.py
jax/_src/scipy/stats/bernoulli.py
jax/_src/scipy/stats/beta.py
jax/_src/scipy/stats/cauchy.py
jax/_src/scipy/stats/dirichlet.py
jax/_src/scipy/stats/expon.py
jax/_src/scipy/stats/gamma.py
jax/_src/scipy/stats/geom.py
jax/_src/scipy/stats/laplace.py
jax/_src/scipy/stats/logistic.py
jax/_src/scipy/stats/multivariate_normal.py
jax/_src/scipy/stats/norm.py
jax/_src/scipy/stats/pareto.py
jax/_src/scipy/stats/poisson.py
jax/_src/scipy/stats/t.py
jax/_src/scipy/stats/uniform.py
jax/scipy/linalg.py
jax/scipy/ndimage.py
jax/scipy/optimize/__init__.py
jax/scipy/signal.py
jax/scipy/special.py
jax/scipy/stats/bernoulli.py
jax/scipy/stats/beta.py
jax/scipy/stats/cauchy.py
jax/scipy/stats/dirichlet.py
jax/scipy/stats/expon.py
jax/scipy/stats/gamma.py
jax/scipy/stats/geom.py
jax/scipy/stats/laplace.py
jax/scipy/stats/logistic.py
jax/scipy/stats/multivariate_normal.py
jax/scipy/stats/norm.py
jax/scipy/stats/pareto.py
jax/scipy/stats/poisson.py
jax/scipy/stats/t.py
jax/scipy/stats/uniform.py
tests/third_party/scipy/line_search_test.py
==================
51276c8a;jax authors;2020-10-16 14:03:06 -0700;Merge pull request #4593 from jheek:fix-initializers-with-poly-shape
PiperOrigin-RevId: 337573504

==
==================
552d4bdc;Matthew Johnson;2020-10-16 13:48:38 -0700;add todo

==

tests/polynomial_test.py
==================
e51163af;Matthew Johnson;2020-10-16 13:11:56 -0700;only pass hashable values as static args

==

docs/notebooks/vmapped_log_probs.ipynb
jax/numpy/lax_numpy.py
tests/generated_fun_test.py
tests/lax_numpy_test.py
tests/lax_scipy_test.py
tests/pmap_test.py
tests/polynomial_test.py
==================
3bf58dde;Matthew Johnson;2020-10-16 12:41:23 -0700;demote polys to ints eagerly after each shape rule

==

jax/interpreters/masking.py
==================
7e801cae;jax authors;2020-10-16 08:08:31 -0700;Merge pull request #4614 from hawkinsp:cumsum
PiperOrigin-RevId: 337507195

==
==================
e863103b;Peter Hawkins;2020-10-16 10:09:11 -0400;Add a reverse=... argument to lax.cumsum/cumprod/...
This allows us to lower to a more efficient implementation on TPU.

==

jax/experimental/jet.py
jax/lax/lax_control_flow.py
tests/lax_autodiff_test.py
tests/lax_test.py
tests/lax_vmap_test.py
==================
c2987001;jax authors;2020-10-16 04:34:56 -0700;Merge pull request #4608 from gnecula:print_remat
PiperOrigin-RevId: 337483027

==
==================
807e7a4a;jheek;2020-10-15 13:53:03 +0000;Do not promote literal dims to Poly

==

jax/interpreters/masking.py
==================
059cd71f;jax authors;2020-10-16 01:48:07 -0700;Merge pull request #4607 from gnecula:tf_promote
PiperOrigin-RevId: 337466107

==
==================
4e3a443f;George Necula;2020-10-16 11:37:23 +0300;Fix flake

==

tests/host_callback_test.py
==================
5efdaa4d;George Necula;2020-10-16 10:52:56 +0300;[host_callback] Added support for remat.

==

jax/experimental/host_callback.py
jax/interpreters/xla.py
tests/host_callback_test.py
==================
bf897545;George Necula;2020-10-16 10:18:18 +0300;[jax2tf] Remove the argument type promotion in jax2tf.
This was added as a safety mechanism in the past when jax2tf tracking
of types was imprecise. Now it is not needed anymore.

Also removed the mention that shift operations on TPU may produce
incorrect results.

Fixed the tests for reduce_window; they were not triggering the special reducers

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/primitives_with_limited_support.md
jax/experimental/jax2tf/tests/correctness_stats.py
jax/experimental/jax2tf/tests/primitive_harness.py
==================
4a20eea8;jax authors;2020-10-16 00:21:04 -0700;Copybara import of the project:
--
609f6f3e16d21fed34cc5269c54a0d78ac44a8bc by Matthew Johnson <mattjj@google.com>:

fix custom_jvp/vjp closure issues

PiperOrigin-RevId: 337457689

==

docs/custom_vjp_update.md
docs/notebooks/Custom_derivative_rules_for_Python_code.ipynb
jax/core.py
jax/custom_derivatives.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jet.py
jax/interpreters/ad.py
jax/interpreters/batching.py
jax/interpreters/invertible_ad.py
jax/interpreters/partial_eval.py
tests/api_test.py
==================
d7d94ac9;jax authors;2020-10-15 23:49:49 -0700;Merge pull request #4596 from bchetioui:test_triangular_solve
PiperOrigin-RevId: 337454771

==
==================
9f74e8b1;Benjamin Chetioui;2020-09-23 11:48:29 +0200;[jax2tf] Implemented conversion for triangular_solve.

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/correctness_stats.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
32010968;jax authors;2020-10-15 22:52:47 -0700;Merge pull request #4605 from google:temporary-hack
PiperOrigin-RevId: 337449936

==
==================
f3b4f43c;Matthew Johnson;2020-10-15 21:58:27 -0700;temporarily work around a bug that #4008 will fix

==

jax/custom_derivatives.py
==================
d0ab44dd;jax authors;2020-10-15 18:22:27 -0700;Merge pull request #4603 from hawkinsp:cumsum
PiperOrigin-RevId: 337423266

==
==================
d3db7bd4;Peter Hawkins;2020-10-15 20:26:29 -0400;Optimize lax.associative_scan, reimplement cumsum, etc. on top of associative_scan. Add support for an axis= parameter to associative_scan.
We previously had two associative scan implementations, namely lax.associative_scan, and the implementations of cumsum, cumprod, etc.

lax.associative_scan was more efficient in some ways because unlike the cumsum implementation it did not pad the input array to the nearest power of two size. This appears to have been a significant cause of https://github.com/google/jax/issues/4135.

The cumsum/cummax implementation used slightly more efficient code to slice and
interleave arrays, which this change adds to associative_scan as well. Since we
are now using lax primitives that make it easy to select an axis, add support
for user-chosen scan axes as well.

We can also simplify the implementation of associative_scan: one of the
recursive base cases seems unnecessary, and we can simplify the code by removing
it.

Benchmarks from #4135 on my workstation:
Before:
bench_cumsum: 0.900s
bench_associative_scan: 0.597s
bench_scan: 0.359s
bench_np: 1.619s

After:
bench_cumsum: 0.435s
bench_associative_scan: 0.435s
bench_scan: 0.362s
bench_np: 1.669s

Before, with taskset -c 0:
bench_cumsum: 1.989s
bench_associative_scan: 1.556s
bench_scan: 0.428s
bench_np: 1.670s

After, with taskset -c 0:
bench_cumsum: 1.271s
bench_associative_scan: 1.275s
bench_scan: 0.438s
bench_np: 1.673s

==

docs/jax.lax.rst
jax/experimental/jet.py
jax/lax/__init__.py
jax/lax/lax.py
jax/lax/lax_control_flow.py
tests/lax_control_flow_test.py
==================
62ee3045;jax authors;2020-10-15 17:41:04 -0700;Merge pull request #4602 from google:tweak-float0-replacement
PiperOrigin-RevId: 337418135

==
==================
0f53ddec;jax authors;2020-10-15 17:30:58 -0700;Merge pull request #4599 from hawkinsp:slicegrad
PiperOrigin-RevId: 337416578

==
==================
86782876;Matthew Johnson;2020-10-15 16:18:43 -0700;remove an extraneous replace_float0s
This caused a test failure when trying to land #4008.

==

jax/interpreters/ad.py
tests/api_test.py
==================
f39d111d;Peter Hawkins;2020-10-15 17:18:02 -0400;Fix incorrect slice gradient when a slice has zero size and striding.

==

jax/lax/lax.py
tests/lax_autodiff_test.py
==================
7f4e115a;Peter Hawkins;2020-10-15 13:09:37 -0700;[XLA:Python] Validate shapes in Python bindings to avoid crashes.
[JAX] Perform LAPACK workspace calculations in int64 to avoid overflows, clamp the values passed to lapack to int32.

Will fix https://github.com/google/jax/issues/4358 when incorporated into a jaxlib.

PiperOrigin-RevId: 337367394

==

jaxlib/lapack.pyx
==================
22c3684d;jax authors;2020-10-15 12:07:49 -0700;Merge pull request #4595 from google:custom-vjp-allow-bwd-return-nones
PiperOrigin-RevId: 337354885

==
==================
23352e76;jax authors;2020-10-15 12:04:35 -0700;Merge pull request #4587 from hawkinsp:docs
PiperOrigin-RevId: 337354708

==
==================
b3363080;jax authors;2020-10-15 11:44:35 -0700;Merge pull request #4589 from bchetioui:expand_reduce_window_max_conversion
PiperOrigin-RevId: 337351380

==
==================
0bdde652;Matthew Johnson;2020-10-15 11:27:14 -0700;fix test bug

==

tests/api_test.py
==================
81b7212c;jax authors;2020-10-15 11:15:48 -0700;Merge pull request #4541 from alexalemi:master
PiperOrigin-RevId: 337346187

==
==================
3a75145f;Matthew Johnson;2020-10-15 10:53:16 -0700;allow custom_vjp bwd to return Nones for zeros
This change sets up some internal users so that we can then land #4008.

==

jax/custom_derivatives.py
==================
f3123bfd;Benjamin Chetioui;2020-10-13 17:45:34 +0200;[jax2tf] Added a non-XLA conversion path for reduce_window_max.
The new path uses tf.nn.max_pool. The primitive harness for
reduce_window and related primitives has been rewritten completely
to produce better coverage in less tests.

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/correctness_stats.py
jax/experimental/jax2tf/tests/primitive_harness.py
==================
44899c90;Alex Alemi;2020-10-15 11:10:56 -0400;Alphabetize docs.

==

docs/jax.nn.rst
==================
f7d4063e;Alex Alemi;2020-10-15 11:06:18 -0400;Remove expit, add logsumexp to docs

==

docs/jax.nn.rst
jax/nn/__init__.py
==================
fb6b3bf0;jax authors;2020-10-15 01:49:13 -0700;Merge pull request #4575 from bchetioui:fix_reduce_window_shape_rule
PiperOrigin-RevId: 337262961

==
==================
f553ed24;Matthew Johnson;2020-10-14 18:51:42 -0700;Temporary rollback of #4535 pending a possible XLA bug it exposed in an internal test.
PiperOrigin-RevId: 337219426

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/correctness_stats.py
jax/lax/lax.py
jax/random.py
tests/api_test.py
tests/lax_numpy_test.py
==================
b2db682a;jax authors;2020-10-14 18:33:47 -0700;Merge pull request #4586 from shoyer:precision-tuple
PiperOrigin-RevId: 337217160

==
==================
db43e21b;Peter Hawkins;2020-10-14 21:18:09 -0400;Improve documentation for a number of lax functions.

==

docs/jax.lax.rst
jax/lax/lax.py
jax/lax/lax_control_flow.py
==================
706bab7c;Stephan Hoyer;2020-10-14 18:07:37 -0700;Support specifying precision as a tuple of precision enums
This is useful for cases where one of the arguments is known to have
low precision, e.g., on https://github.com/google/jax/pull/4459 where it
would potentially allow for saving half the FLOPs on TPUs when using
convolutions to extract image patches.

==

jax/lax/lax.py
jax/numpy/lax_numpy.py
tests/lax_test.py
==================
fb01f590;jax authors;2020-10-14 15:16:50 -0700;Merge pull request #4535 from google:lazy-simplification
PiperOrigin-RevId: 337183224

==
==================
990dc57d;Matthew Johnson;2020-10-14 14:52:16 -0700;Merge remote-tracking branch 'origin/master' into lazy-simplification

==
==================
a5f906a9;Matthew Johnson;2020-10-14 14:40:29 -0700;jax2tf import fix

==

jax/experimental/jax2tf/jax2tf.py
==================
c4f08ff1;jax authors;2020-10-14 14:35:25 -0700;Merge pull request #4582 from hawkinsp:cudaprng
PiperOrigin-RevId: 337174155

==
==================
b99e350a;Matthew Johnson;2020-10-14 14:30:09 -0700;add iota_p support to jax2tf

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/correctness_stats.py
==================
3767500a;jax authors;2020-10-14 14:26:38 -0700;Merge pull request #4579 from jakevdp:donated-invars
PiperOrigin-RevId: 337172040

==
==================
138105a9;Skye Wanderman-Milne;2020-10-14 10:30:47 -0700;Update README, CHANGELOG, and jaxlib.__version__ for new jaxlib release

==

README.md
docs/CHANGELOG.rst
jaxlib/version.py
==================
0e8bbb4d;jax authors;2020-10-14 13:32:19 -0700;Merge pull request #4578 from hawkinsp:scatter
PiperOrigin-RevId: 337160492

==
==================
f6a5c0a9;jax authors;2020-10-14 13:27:08 -0700;Merge pull request #4584 from jblespiau:changelist/337154928
PiperOrigin-RevId: 337159384

==
==================
bef400a1;Jake VanderPlas;2020-10-14 13:20:47 -0700;multi-buf: fix donated_invars in _xla_callable

==

jax/api.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
==================
f710ea84;Peter Hawkins;2020-10-14 11:52:19 -0400;Change scatter JVP rule to avoid using floating-point representation of ID values.
We can avoid floating point IDs by using the same masking approach we use for tangent values for the primals.

==

jax/lax/lax.py
==================
47319b86;Jean-Baptiste Lespiau;2020-10-14 22:05:21 +0200;Fix typo.

==

tests/jax_jit_test.py
==================
9d7dc783;Jean-Baptiste Lespiau;2020-10-14 11:57:29 -0700;Enable the C++ jax.jit fast code-path by default (again, after a bugfix).
PiperOrigin-RevId: 337140000

==

jax/api.py
==================
1d4c53ce;Peter Hawkins;2020-10-14 14:33:56 -0400;Fix CUDA launch error when generating an empty PRNG array.

==

jax/random.py
tests/random_test.py
==================
eb9c1ddd;Jean-Baptiste Lespiau;2020-10-14 11:25:31 -0700;Fix an incorrect object equality of the static arguments.
PiperOrigin-RevId: 337132763

==

jax/api.py
tests/api_test.py
==================
62ef4c0f;Skye Wanderman-Milne;2020-10-13 18:38:22 -0700;Mention how to turn on logging in "No GPU/TPU found" warning.
This is useful when debugging when a GPU/TPU is expected to be found,
e.g. #4569, and hopefully isn't too noisy when expecting to run on
CPU.

Also changes the warning to use logging.warn instead of warnings.warn,
and suppresses an inactionable warning from the absl logging module
itself.

Old message:
```
>>> import jax; jax.devices()
/usr/local/google/home/skyewm/jax/jax/lib/xla_bridge.py:130: UserWarning: No GPU/TPU found, falling back to CPU.
  warnings.warn('No GPU/TPU found, falling back to CPU.')
[CpuDevice(id=0)]
```

New message:
```
>>> import jax; jax.devices()
W1013 18:33:31.047047 139848542200192 xla_bridge.py:132] No GPU/TPU found, falling back to CPU. (Set TF_CPP_MIN_LOG_LEVEL=0 and rerun for more info.)
[CpuDevice(id=0)]
```

==

jax/lib/xla_bridge.py
==================
25ace32c;Benjamin Chetioui;2020-10-14 10:47:52 +0200;Check that the init_value in reduce_window is indeed a scalar.
This fixes google/jax#4574.

==

jax/lax/lax.py
tests/lax_test.py
==================
20b74840;jax authors;2020-10-14 08:41:54 -0700;Merge pull request #4577 from google:update-pypi
PiperOrigin-RevId: 337097788

==
==================
17ae9873;Matthew Johnson;2020-10-14 08:03:56 -0700;update version and changelog for pypi

==

docs/CHANGELOG.rst
jax/version.py
==================
083895d5;Jean-Baptiste Lespiau;2020-10-14 07:45:58 -0700;Internal change
PiperOrigin-RevId: 337088838

==

jax/api.py
==================
43203b4f;jax authors;2020-10-14 04:41:32 -0700;Merge pull request #4360 from gnecula:tf_poly
PiperOrigin-RevId: 337064509

==
==================
7128108d;George Necula;2020-10-11 19:48:36 +0300;[jax2tf] Added support for shape polymorphism conversion.
The intended usage, and some design challenges, for this feature
are described in README.md.

In order to enable this change, I had to first change
TensorFlowTracer to carry explicitly the JAX abstract value
for the undelying TF value (previously, we would just compute
the abstract value from the TF value. This is not possible
when the TF value has partially known shape. In that case
we want the JAX abstract value, using masking.ShapeSpec.

As a beneficial side-effect of adding explicit abstract values
to TensorFlowTracer we can clean up all the hacky handling of
core.unit (we would store core.unit as a TF value, hence the
need for TfValOrUnit, and we would swap it with tf.nan
when going to TF). Now we can just store tf.name as the TF
value and core.abstract_unit for the abstract value.

I added a few extra assertions that the values and abstractions
in a TensorFlowTracer are in agreement.

The key smarts in this change are just reused from
jax.interpreters.masking. All we really added is carefully
carrying that information through.

A tricky part was carrying the abstract shapes for tf.custom_gradient.

==

jax/experimental/jax2tf/README.md
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/primitives_with_limited_support.md
jax/experimental/jax2tf/tests/control_flow_ops_test.py
jax/experimental/jax2tf/tests/correctness_stats.py
jax/experimental/jax2tf/tests/primitives_test.py
jax/experimental/jax2tf/tests/shape_poly_test.py
jax/experimental/jax2tf/tests/tf_test_util.py
jax/interpreters/masking.py
==================
6d95b6cd;jax authors;2020-10-13 23:25:32 -0700;Merge pull request #4573 from google:update-pypi
PiperOrigin-RevId: 337028688

==
==================
503bc360;Matthew Johnson;2020-10-13 23:02:49 -0700;fix typo in comment

==

jax/interpreters/xla.py
==================
41282409;Matthew Johnson;2020-10-13 23:01:30 -0700;update version and changelog for pypi

==

docs/CHANGELOG.rst
jax/version.py
==================
cb4a014c;jax authors;2020-10-13 17:41:21 -0700;Merge pull request #4567 from skye:cuda111
PiperOrigin-RevId: 336992058

==
==================
86e113c4;jax authors;2020-10-13 16:34:58 -0700;Merge pull request #4563 from jakevdp:pmap-error
PiperOrigin-RevId: 336980117

==
==================
dfe05269;jax authors;2020-10-13 16:31:41 -0700;Merge pull request #4570 from google:jaxpr-util-test
PiperOrigin-RevId: 336979966

==
==================
0daf4c00;Roy Frostig;2020-10-13 15:48:04 -0700;assume less about source locations in jaxpr_util_test

==

tests/jaxpr_util_test.py
==================
484ec3e2;Jake VanderPlas;2020-10-13 14:36:16 -0700;Internal change
PiperOrigin-RevId: 336957861

==

jax/BUILD
==================
01e113d7;Skye Wanderman-Milne;2020-10-13 21:31:15 +0000;Update jaxlib build scripts to build CUDA 11.1 wheels.

==

build/build_jaxlib_wheels.sh
build/install_cuda.sh
==================
46246031;Jake VanderPlas;2020-10-13 11:22:55 -0700;Improve pmap axis error in the presence of pytrees

==

jax/api.py
==================
83d01151;jax authors;2020-10-13 10:49:04 -0700;Merge pull request #4557 from jakevdp:fix-tests
PiperOrigin-RevId: 336909706

==
==================
76fe1803;jax authors;2020-10-13 10:09:06 -0700;Merge pull request #4556 from jakevdp:index-fix
PiperOrigin-RevId: 336900642

==
==================
db7f1f44;Jake VanderPlas;2020-10-13 10:08:20 -0700;Increase test coverage for indexing ops

==

tests/lax_numpy_indexing_test.py
==================
9c48502a;jax authors;2020-10-13 09:48:32 -0700;Merge pull request #4562 from bchetioui:expand_dot_general
PiperOrigin-RevId: 336895192

==
==================
5981fc31;jax authors;2020-10-13 09:45:13 -0700;Merge pull request #4530 from jakevdp:cleanup
PiperOrigin-RevId: 336895154

==
==================
be149f49;Benjamin Chetioui;2020-10-09 17:59:04 +0200;[jax2tf] Added conversion paths without einsum for dot_general.

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/correctness_stats.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
f0771391;jax authors;2020-10-13 09:08:28 -0700;Merge pull request #4451 from alexminnaar:master
PiperOrigin-RevId: 336888044

==
==================
4f7aec8f;jax authors;2020-10-13 07:14:12 -0700;Merge pull request #4561 from hawkinsp:truncnorm
PiperOrigin-RevId: 336870048

==
==================
0b8eb92d;Peter Hawkins;2020-10-13 09:16:29 -0400;Add stop_gradients around lax.nextafter to fix TFP gradient errors for jax.random.truncated_normal.

==

jax/random.py
==================
8b441313;jax authors;2020-10-13 02:00:09 -0700;Merge pull request #4522 from bchetioui:expand_conv_conversion
PiperOrigin-RevId: 336833753

==
==================
c674c19b;Benjamin Chetioui;2020-10-08 17:46:37 +0200;[jax2tf] Add paths that do not use XLA in conv_general_dilated.
This adds some amount of support for people who want to run
convolutions without having XLA linked in. These paths can
seemingly be converted for TFJS as well.

Due to a so far unknown bug in some of the conversions, the
paths are disabled by default and the "ENABLE_TF_CONVOLUTION"
global variable in jax2tf.py must be explictly toggled to use
them. See the comment associated with ENABLE_TF_CONVOLUTION
for context.

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
e0644513;jax authors;2020-10-12 16:40:55 -0700;Merge pull request #4543 from google:remove-double-dtype-warning
PiperOrigin-RevId: 336771011

==
==================
dbebc9ad;Matthew Johnson;2020-10-12 14:30:32 -0700;remove double warning with asarray dtype='int'

==

jax/numpy/lax_numpy.py
==================
3ca9bba0;Jake VanderPlas;2020-10-12 13:58:49 -0700;BUG: fix indexing error

==

jax/numpy/lax_numpy.py
tests/lax_numpy_indexing_test.py
==================
d1ca3b3d;jax authors;2020-10-12 13:51:21 -0700;Merge pull request #4548 from hawkinsp:truncnorm
PiperOrigin-RevId: 336735846

==
==================
080007ab;Peter Hawkins;2020-10-12 12:41:58 -0400;Ensure values returned by jax.random.truncated_normal() are in range.
A user observed -inf values being returned by truncated_normal(), which occur if the uniform random value passed to erfinv() is out of range, e.g., due to rounding. Do more of the computation using jax.random.uniform(), which promises correct behavior in the face of rounding.

As an added security measure, also clamp the outputs of the function to the open interval.

==

jax/random.py
tests/random_test.py
==================
5a3929e7;jax authors;2020-10-12 13:19:33 -0700;Merge pull request #4547 from jblespiau:changelist/336647290
PiperOrigin-RevId: 336728597

==
==================
0660939a;Jean-Baptiste Lespiau;2020-10-12 12:17:16 -0700;Enable the C++ jax.jit fast code-path by default.
Here is the list of things I think we should do/revisit at some point in the future:

1. Most importantly, think about Lazy expressions. I think they are powerful, and they can likely enable some optimization impossible otherwise (e.g. stack a ShardedDeviceArray and split it). We likely want to add support for them in the C++ jax.jit.

2.  Remove trivial computation support (currently fallback to Python), at least in the omnistaging code-path, as it will no longer necessary with omnistaging, and that the complexity do not justify the feature.

3. Not sure what to do about jax.jit(pmap). It currently fallback to Python when the Executable has more than one device. I understand it executes this on all cores (as a pmap), but will return the first result (from the first core). I am tempted to think this is a non-feature, that no one is looking for and that it can be achieved by doing pmap(f)(x)[0] instead. Having a single simple way of doing one thing is usually beneficial.

4. Not sure what to do about `DeviceConstant` support (currently fallback to Python). I do not understand yet why they exist and problem they solve.

5. Revisit the stikiness for jax.jit(f, device=device)(x). I think it should fail if x is stiky to another device, to let the user aware of the copies. My humble opinion is that, with an efficient device_put, we should write jitted_f(device_put(x, device)).
Improving performance is key for JAX users, and the way JAX let you control what lives where is wonderful. Helping the user be aware of their copies is helping in this direction/Doing copies for the users hurts performance.

(The support for `jax_debug_nans` could be improved.)

With the C++ jit:
└──╼ benchy  //third_party/py/jax/benchmarks:api_benchmark
name                                   time/op
jit_trivial_dispatch                   35.2µs ± 2%
jit_trivial                            36.8µs ± 2%
jit_simple_dispatch                    16.1µs ± 5%
jit_simple                             29.3µs ± 8%
jit_simple_many_args_dispatch           149µs ± 8%
jit_simple_many_args                    153µs ± 9%
jit_dispatch_without_transfer           144µs ± 7%
jit_dispatch_with_transfer              150µs ± 5%

Without:
└──╼ benchy  //third_party/py/jax/benchmarks:api_benchmark
name                                   time/op
jit_trivial_dispatch                   29.9µs ± 2%
jit_trivial                            31.8µs ± 4%
jit_simple_dispatch                    59.7µs ± 1%
jit_simple                             66.9µs ± 5%
jit_simple_many_args_dispatch           368µs ± 3%
jit_simple_many_args                    367µs ± 3%
jit_dispatch_without_transfer           346µs ± 9%
jit_dispatch_with_transfer              392µs ± 9%

See also https://github.com/google/jax/pull/4169 for context.

PiperOrigin-RevId: 336716707

==

jax/api.py
==================
639cda29;jax authors;2020-10-12 12:05:27 -0700;Merge pull request #4554 from skye:workspace
PiperOrigin-RevId: 336713864

==
==================
b8cac03c;Skye Wanderman-Milne;2020-10-12 11:57:59 -0700;Update XLA in WORKSPACE

==

WORKSPACE
==================
b13775f4;Jean-Baptiste Lespiau;2020-10-12 14:52:47 +0200;Enrich the error messages with the bound names that are available.
The user often do not know whether it's not the correct name, or whether it was not defined, etc. It's easier to get this information when debugging.

==

jax/api.py
jax/core.py
jax/experimental/general_map.py
==================
7c4b935c;jax authors;2020-10-12 11:26:34 -0700;Merge pull request #4550 from jblespiau:changelist/336694640
PiperOrigin-RevId: 336705548

==
==================
ee9ca569;Jean-Baptiste Lespiau;2020-10-12 11:04:24 -0700;Copybara import of the project:
--
d70782e0a1c6568eab6ef1573fa277850cc0da97 by Jean-Baptiste Lespiau <jblespiau@google.com>:

Gate some jax_jit test with a version check.

COPYBARA_INTEGRATE_REVIEW=https://github.com/google/jax/pull/4550 from jblespiau:changelist/336694640 d70782e0a1c6568eab6ef1573fa277850cc0da97
PiperOrigin-RevId: 336700683

==

tests/jax_jit_test.py
==================
5a097f5c;Jean-Baptiste Lespiau;2020-10-12 19:39:03 +0200;Gate some jax_jit test with a version check.

==

tests/debug_nans_test.py
tests/jax_jit_test.py
==================
c1e25953;Jean-Baptiste Lespiau;2020-10-12 08:49:14 -0700;Add support for jax_debug_nans and fix the last few glitches with the C++ jax.jit.
- Sorting the keyword arguments must be done on the string, because we go through the Python path which uses flatten() which sort them by string.
- Some error with obj == obj which is the same as obj.is(obj) and not obj.equal(obj).
- Moves all the Python tests to the C++ tests (which also run on the _python_jit).

PiperOrigin-RevId: 336671123

==

jax/api.py
tests/api_test.py
tests/debug_nans_test.py
tests/jax_jit_test.py
==================
8f647151;jax authors;2020-10-12 06:48:35 -0700;Merge pull request #4546 from hawkinsp:flakes
PiperOrigin-RevId: 336653760

==
==================
e1adbcd4;Peter Hawkins;2020-10-12 09:35:39 -0400;Fix batching_test flakiness on GPU.

==

tests/batching_test.py
==================
9d8139e0;jax authors;2020-10-12 04:49:55 -0700;Merge pull request #4440 from google:long-line
PiperOrigin-RevId: 336638751

==
==================
7320fc7c;jax authors;2020-10-12 04:46:26 -0700;Merge pull request #4542 from google:fix-jax2tf-typo
PiperOrigin-RevId: 336638720

==
==================
bcf32093;Matthew Johnson;2020-10-11 10:17:46 -0700;remove trailing whitespace in jax2tf readme lines

==

jax/experimental/jax2tf/README.md
==================
e1708f5c;Matthew Johnson;2020-10-11 10:15:48 -0700;fix typo "differentiaion"

==

jax/experimental/jax2tf/README.md
==================
3c69b2d6;Alex Alemi;2020-10-11 11:35:26 -0400;Fixing lint error

==

jax/nn/functions.py
==================
00e70492;Alex Alemi;2020-10-11 11:30:45 -0400;Export expit and logsumexp in jax.nn.functions

==

jax/nn/__init__.py
jax/nn/functions.py
==================
e6ab45e0;jax authors;2020-10-10 22:14:45 -0700;Merge pull request #4538 from google:fix-mypy
PiperOrigin-RevId: 336507262

==
==================
2839b2bf;Matthew Johnson;2020-10-10 22:01:43 -0700;ignore mypy error in jax2tf

==

jax/experimental/jax2tf/jax2tf.py
==================
b402b870;Matthew Johnson;2020-10-10 21:51:51 -0700;fix type error in jax2tf

==

jax/experimental/jax2tf/jax2tf.py
==================
20e11a0c;jax authors;2020-10-10 21:34:44 -0700;Merge pull request #4509 from malmaud:pmin_multihost
PiperOrigin-RevId: 336504945

==
==================
4e65a6f0;Matthew Johnson;2020-10-10 21:08:52 -0700;don't generate lazy iota/eye/tri/delta omnistaging

==

jax/lax/lax.py
jax/random.py
tests/api_test.py
tests/lax_numpy_test.py
==================
0485fd87;Alex Minnaar;2020-10-04 17:46:13 -0400;adding histogram2d implementation

==

docs/jax.numpy.rst
jax/numpy/__init__.py
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
cff6c0b0;Jake VanderPlas;2020-10-02 15:08:21 -0700;Improve errors for failed compilations w/ core.concrete_or_error

==

jax/numpy/lax_numpy.py
==================
a97cb870;jax authors;2020-10-10 08:00:02 -0700;Merge pull request #4532 from gnecula:tf_omnistaging
PiperOrigin-RevId: 336456477

==
==================
9d9762b7;George Necula;2020-10-10 10:30:23 +0300;[jax2tf] Ensure jax2tf still works without omnistaging
This refines changes from PR 4470 to ensure that jax2tf works even without omnistaging.
Some tests would fail though, e.g., converting a function with no arguments

==

jax/experimental/jax2tf/jax2tf.py
==================
0d69a84f;jax authors;2020-10-09 14:39:49 -0700;Merge pull request #4065 from skye:wheels
PiperOrigin-RevId: 336368043

==
==================
cacb0175;Skye Wanderman-Milne;2020-08-13 17:30:08 -0700;Use local version identifiers to distribute cuda jaxlib wheels.
This change:

* Updates our jaxlib build scripts to add `+cudaXXX` to the wheel
  version, where XXX is the CUDA version number (e.g. `110`). nocuda
  builds remain unchanged and do not have this extra identifier.

* Adds `generate_release_index.py`, which writes an html page that pip
  can use to find the cuda wheels. (I based this format off of
  wheel PyTorch's index).

* Updates the README to use the new local version identifier + wheel
  index.

The end result is that the command to install cuda wheels is now much
simpler.

I manually made copies of the latest jaxlib 0.1.55 wheels that have
the local version identifiers, so the new installation commands
already work (as well as the old ones, until the next jaxlib release
using the new tooling).

Fow now, I put the html index to the GCP bucket with the wheels. We
can move it to a prettier URL if/when we have one.

==

README.md
build/build_jaxlib_wheels.sh
build/build_wheel_docker_entrypoint.sh
build/generate_release_index.py
build/setup.py
==================
ae3d3101;jax authors;2020-10-09 13:05:37 -0700;Merge pull request #4524 from jakevdp:fix-mean
PiperOrigin-RevId: 336350279

==
==================
a57243c0;Jake VanderPlas;2020-10-09 12:57:17 -0700;Cleanup: remove extraneous device_put

==

jax/lax/lax.py
==================
cd03bea5;jax authors;2020-10-09 11:31:47 -0700;Merge pull request #4526 from google:4510-2
PiperOrigin-RevId: 336332245

==
==================
78fe038c;Matthew Johnson;2020-10-09 11:01:58 -0700;fix x64 issue

==

tests/lax_control_flow_test.py
==================
0aeeb63f;Matthew Johnson;2020-10-09 10:35:47 -0700;add test for scan input forwarding

==

tests/lax_control_flow_test.py
==================
5355776e;Matthew Johnson;2020-10-09 10:26:28 -0700;make scan fwd raw extensive inputs as DeviceArray
follow-up on #4517

==

jax/lax/lax_control_flow.py
==================
fc69d455;jax authors;2020-10-09 10:06:22 -0700;Merge pull request #4470 from gnecula:tf_tracers
PiperOrigin-RevId: 336314262

==
==================
67a77c7e;Jake VanderPlas;2020-10-09 09:13:21 -0700;Fix extraneous dtype warning in jnp.mean

==

jax/numpy/lax_numpy.py
==================
0213efdf;George Necula;2020-10-07 09:18:15 +0300;[jax2tf] Port jax2tf to use omnistaging
The main change is that we use `core.new_base_main` to use an
omnistaging-based tracer. This has the benefit that we can
convert to TF even functions with no arguments (previously
they would be constant-folded by JAX prior to the conversion).

We also add an explicit error if the jax2tf.convert transformation
is nested under other JAX transformations.

==

jax/core.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/jax2tf_test.py
jax/experimental/jax2tf/tests/tf_test_util.py
==================
e194dff6;jax authors;2020-10-09 08:37:52 -0700;Merge pull request #4518 from gnecula:tf_debug
PiperOrigin-RevId: 336298684

==
==================
a1e67be7;George Necula;2020-10-09 12:39:21 +0300;[jax2tf] Fix the behavior for shift when the shift amount is negative or large.
It turns out that TF shift behavior is "implementation defined" if the shift
amount is negative or larger or equal to the bitsize of the operand. This is
different than XLA.

We add conditionals to check and fix the corner cases, we expand the tests.

A better solution would be to use an XlaShift operation.

This also revealed some bugs with shift_right on TPU (for JAX). The
jax2tf behavior is what we believe is the correct behavior, which means
that it differs from JAX results on TPU.

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/primitives_with_limited_support.md
jax/experimental/jax2tf/primitives_with_limited_support.md.template
jax/experimental/jax2tf/tests/correctness_stats.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
jax/experimental/jax2tf/tests/tf_test_util.py
==================
e6399cd7;jax authors;2020-10-08 22:24:59 -0700;Merge pull request #4517 from google:issue4510
PiperOrigin-RevId: 336230439

==
==================
7691be92;Matthew Johnson;2020-10-08 21:04:44 -0700;make pytype happy

==

jax/lax/lax_control_flow.py
==================
52fe026c;Matthew Johnson;2020-10-08 20:31:39 -0700;optimize scan partial_eval to fix #4510
fixes #4510

==

jax/core.py
jax/lax/lax_control_flow.py
==================
d4da9cc1;jax authors;2020-10-08 16:49:22 -0700;Merge pull request #4514 from google:remove-unneeded-code
PiperOrigin-RevId: 336191840

==
==================
ab462baf;jax authors;2020-10-08 16:17:38 -0700;Merge pull request #4515 from google:enable-conv-test
PiperOrigin-RevId: 336186047

==
==================
4994b82b;jax authors;2020-10-08 15:46:50 -0700;Merge pull request #4512 from jakevdp:raise-to-shaped
PiperOrigin-RevId: 336180373

==
==================
1614e283;Roy Frostig;2020-10-08 15:43:15 -0700;re-enable lax autodiff test
xla:cpu bug was due to a change in llvm, now reverted

==

tests/lax_autodiff_test.py
==================
55be9dd9;Matthew Johnson;2020-10-08 15:36:42 -0700;remove mysterious code that is no longer needed

==

jax/lax/lax_control_flow.py
==================
91492ca1;jax authors;2020-10-08 15:33:02 -0700;Merge pull request #4511 from google:debug-nans-test-move
PiperOrigin-RevId: 336178046

==
==================
ef25da84;Jake VanderPlas;2020-10-08 15:21:57 -0700;lax_control_flow: retry via function rather than via loop

==

jax/lax/lax_control_flow.py
tests/lax_control_flow_test.py
==================
008eae66;Jean-Baptiste Lespiau;2020-10-08 14:39:06 -0700;Fallback to Python for float0 in the C++ jax.jit.
PiperOrigin-RevId: 336167762

==

tests/jax_jit_test.py
==================
24de811a;Matthew Johnson;2020-10-08 13:34:56 -0700;move a debug_nans test into debug_nans test file

==

tests/api_test.py
tests/debug_nans_test.py
==================
ddcfd458;jax authors;2020-10-08 13:15:48 -0700;Merge pull request #4161 from jakevdp:raise-to-shaped
PiperOrigin-RevId: 336150089

==
==================
3be8188c;jax authors;2020-10-08 13:12:35 -0700;Merge pull request #4483 from google:debug-nans-no-store-error
PiperOrigin-RevId: 336149914

==
==================
57ec9dd9;jax authors;2020-10-08 13:01:26 -0700;Merge pull request #4483 from google:debug-nans-no-store-error
PiperOrigin-RevId: 336147286

==
==================
09f2be15;Matthew Johnson;2020-10-08 13:00:32 -0700;wait for result in debug_nans_test

==

tests/debug_nans_test.py
==================
2b76bcca;jax authors;2020-10-08 12:53:33 -0700;Merge pull request #4508 from zhangqiaorjc:expm_test_slow
PiperOrigin-RevId: 336146064

==
==================
4dd802c5;Matthew Johnson;2020-10-08 12:28:11 -0700;Merge branch 'master' into debug-nans-no-store-error

==
==================
a2a9409a;Jonathan Malmaud;2020-10-08 12:12:15 -0700;Mark pmin and pmax as multi-host supported.

==

jax/lax/lax_parallel.py
==================
afef644d;Qiao Zhang;2020-10-08 12:09:21 -0700;Skip 2nd order grad in expm tests.

==

tests/linalg_test.py
==================
a2a6dca4;jax authors;2020-10-08 12:06:15 -0700;Merge pull request #4507 from hawkinsp:xla
PiperOrigin-RevId: 336135890

==
==================
a20b00a3;Jake VanderPlas;2020-10-08 11:59:56 -0700;fix weak_type issues in while_loop

==

jax/lax/lax_control_flow.py
==================
72be97c8;Peter Hawkins;2020-10-08 14:59:06 -0400;Update XLA.

==

WORKSPACE
==================
0f0fa53b;Jake VanderPlas;2020-10-08 11:52:07 -0700;fix weak_type issues in while_loop

==

jax/lax/lax_control_flow.py
tests/lax_control_flow_test.py
==================
3ca6e5a1;Jake VanderPlas;2020-10-07 15:25:01 -0700;fix weak type issues in scan

==

jax/lax/lax_control_flow.py
tests/lax_control_flow_test.py
==================
63933497;Jake VanderPlas;2020-10-07 11:41:22 -0700;raise_to_shaped: preserve weak_type by default

==

jax/core.py
jax/custom_derivatives.py
jax/experimental/jax2tf/jax2tf.py
jax/interpreters/ad.py
jax/lax/lax_control_flow.py
tests/core_test.py
tests/lax_control_flow_test.py
tests/multi_device_test.py
tests/pmap_test.py
==================
ab48a9af;jax authors;2020-10-08 11:49:06 -0700;Merge pull request #4498 from jblespiau:changelist/333713171
PiperOrigin-RevId: 336132107

==
==================
145ac406;jax authors;2020-10-08 10:45:01 -0700;Merge pull request #4502 from hawkinsp:linalg
PiperOrigin-RevId: 336117857

==
==================
684a5849;jax authors;2020-10-08 10:20:34 -0700;Merge pull request #4500 from LenaMartens:changelist/336082045
PiperOrigin-RevId: 336112168

==
==================
e3d622cc;Lena Martens;2020-10-08 15:36:05 +0100;Recast int/bool tangents to float0 in custom_jvp/vjps (also in the initial_style path).

==

jax/custom_derivatives.py
jax/interpreters/ad.py
tests/api_test.py
==================
95c0fea5;jax authors;2020-10-08 09:06:43 -0700;Merge pull request #4501 from gnecula:tf_tests_cf1
PiperOrigin-RevId: 336096721

==
==================
2fca9170;Peter Hawkins;2020-10-08 10:59:52 -0400;Enable TPU linalg tests that now pass.

==

tests/linalg_test.py
==================
6fec4974;Jean-Baptiste Lespiau;2020-09-25 14:14:41 +0200;Add a flag to control the C++ jax.jit behavior.

==

jax/api.py
==================
dc9168ba;George Necula;2020-10-08 12:28:42 +0300;[jax2tf] Ensure that in tests TF does not constant-fold in eager mode before compiling

==

jax/experimental/jax2tf/tests/control_flow_ops_test.py
jax/experimental/jax2tf/tests/tf_test_util.py
==================
8df116bd;jax authors;2020-10-08 07:27:06 -0700;Merge pull request #4475 from bchetioui:fix_static_tests
PiperOrigin-RevId: 336080718

==
==================
82995980;Benjamin Chetioui;2020-10-08 15:37:20 +0200;Fix failing tests on TPU by avoiding using scalars

==

jax/experimental/jax2tf/tests/primitive_harness.py
==================
83060cc1;jax authors;2020-10-08 06:06:56 -0700;Merge pull request #4491 from google:remove-test
PiperOrigin-RevId: 336069850

==
==================
e65115b8;jax authors;2020-10-07 19:55:59 -0700;Merge pull request #4489 from google:test-fixes
PiperOrigin-RevId: 336003413

==
==================
30b8cc57;Roy Frostig;2020-10-07 19:49:06 -0700;remove an always-skipped test, redundant by now

==

tests/lax_numpy_test.py
==================
4b65f33f;jax authors;2020-10-07 18:21:27 -0700;Merge pull request #4485 from hawkinsp:nan
PiperOrigin-RevId: 335993960

==
==================
1fb097bd;Roy Frostig;2020-10-07 18:01:14 -0700;remove stale version guard in test

==

tests/jax_jit_test.py
==================
16cd3304;Roy Frostig;2020-10-07 17:59:44 -0700;skip test that is broken at unreleased (source) jaxlib

==

tests/jax_jit_test.py
==================
7724322d;Jean-Baptiste Lespiau;2020-10-07 15:35:58 -0700;Exend threading.local.
The previous version could cause the following error:

linear_util.py", line 244, in
_most_recent_entry most_recent_entry = thread_local.most_recent_entry AttributeError: '_thread._local' object has no attribute 'most_recent_entry'

PiperOrigin-RevId: 335967038

==

jax/linear_util.py
==================
a8b67ae4;Peter Hawkins;2020-10-07 16:54:13 -0400;Switch implementation of jnp.isnan(x) to x != x.

==

jax/numpy/lax_numpy.py
==================
9cdb139e;jax authors;2020-10-07 13:29:52 -0700;Merge pull request #4482 from google:tb-util-path
PiperOrigin-RevId: 335940940

==
==================
4ae3352e;Jean-Baptiste Lespiau;2020-10-07 13:16:27 -0700;Increase the version of jaxlib, to get the tests for the C++ jit running internally.
The policy is the following:
- we do not create holes in the jaxlib release.
- it should thus be incremented only once between releases, but may not be incremented just before the release, e.g. to trigger internally some tests (that won't run on github).

PiperOrigin-RevId: 335938139

==

jaxlib/version.py
==================
a306c1b4;jax authors;2020-10-07 12:51:24 -0700;Merge pull request #4479 from jblespiau:changelist/335912189
PiperOrigin-RevId: 335932313

==
==================
9b5d7806;Matthew Johnson;2020-10-07 12:27:11 -0700;deflake

==

jax/linear_util.py
tests/api_test.py
==================
c26c77d2;Matthew Johnson;2020-10-07 12:17:24 -0700;fix a 'store occupied' error in jax_debug_nans
This code snippet could cause a 'store occupied' error:

@jit
def f(x):
  return x + np.nan

FLAGS.jax_debug_nans = True
f(1)

The reason is that in xla._xla_call_impl we would run a
linear_util.WrappedFun twice, first via xla._xla_callable and then again
directly (i.e. in op-by-op) if we got a nan on the output. Things would
work fine if the second execution also raised a nan error, since then
the WrappedFun wouldn't complete execution, but if the second execution
does not raise an error (as in the above case, because `1 + np.nan`
doesn't involve any jax primitive executions) then we'd end up with a
StoreOccupied error from running the WrappedFun twice.

The fix is just to intentionally allow re-running the WrappedFun, since
the whole point of jax_debug_nans is to re-run functions that in normal
circumstances we would only want to execute exactly once.

==

jax/interpreters/xla.py
jax/linear_util.py
tests/api_test.py
==================
ab7436a2;Jean-Baptiste Lespiau;2020-10-07 20:23:28 +0200;Ignore an incorrect mypy error.

==

jax/linear_util.py
tests/jax_jit_test.py
==================
32ac909d;Roy Frostig;2020-10-07 11:59:12 -0700;early return for non-existent path prefixes

==

jax/traceback_util.py
==================
c88be879;Jean-Baptiste Lespiau;2020-10-07 11:14:32 -0700;Use the Python jit for the compilation in the C++ jit.
Using xla_computation has been a doomed attempt, because it does not support all the features, and cannot deal with, in particular, nested tracing.

Thus, we directly use the current path, and use a thread local value to access the last compiled objects from C++ (it allows to not touch the Python tracing logic).

This also:
- Delay the access of jax_enable_64 to after GoogleInit.

PiperOrigin-RevId: 335910130

==

jax/api.py
jax/linear_util.py
tests/api_test.py
==================
6a4fdc97;Benjamin Chetioui;2020-10-07 15:55:23 +0200;[jax2tf] Fix min_max and add_mul harnesses.
Some of the array parameters were wrapped in StaticArg(), which
resulted in the function not being actually converted through
jax2tf.

One oddity is that the test now requires "always_custom_assert" to
be set to True to run properly, implying that even in compiled
mode, the results produced by jax and jax2tf are inconsistent.

==

jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
0290339e;jax authors;2020-10-07 01:31:37 -0700;Merge pull request #4468 from gnecula:tf_colab4
PiperOrigin-RevId: 335815857

==
==================
ae7e5b99;George Necula;2020-10-07 11:14:35 +0300;Another attempt to save the notebook

==

jax/experimental/jax2tf/JAX2TF_getting_started.ipynb
==================
27e5c2a7;George Necula;2020-10-07 10:25:46 +0300;Updated the notebook with a run on a public runtime

==

jax/experimental/jax2tf/JAX2TF_getting_started.ipynb
==================
50ce9150;George Necula;2020-10-07 09:46:04 +0300;Small change

==

jax/experimental/jax2tf/JAX2TF_getting_started.ipynb
==================
ed0a098d;George Necula;2020-10-07 09:23:30 +0300;[jax2tf] Add the getting started notebook

==

jax/experimental/jax2tf/JAX2TF_getting_started.ipynb
jax/experimental/jax2tf/README.md
==================
2dfc5f96;jax authors;2020-10-06 22:59:09 -0700;Merge pull request #4467 from google:update-pypi
PiperOrigin-RevId: 335798412

==
==================
1c5a09ac;Matthew Johnson;2020-10-06 22:23:29 -0700;update version and changelog for pypi

==

docs/CHANGELOG.rst
jax/version.py
==================
cf1fefcd;jax authors;2020-10-06 13:33:20 -0700;Merge pull request #4464 from google:minor-source-sync
PiperOrigin-RevId: 335709378

==
==================
5f6fab8d;Roy Frostig;2020-10-06 13:24:19 -0700;minor change as source sync test

==

jax/traceback_util.py
==================
6eb4f54e;jax authors;2020-10-06 12:45:43 -0700;Internal change
PiperOrigin-RevId: 335699277

==

jax/experimental/jax2tf/README.md
jax/traceback_util.py
==================
93f4dd44;George Necula;2020-10-06 14:51:51 +0300;Revert "[jax2tf] Added Getting Started notebook (#4460)" (#4463)
This reverts commit 1d73952736e6142c0670879072cc99327814640e.
==

jax/experimental/jax2tf/JAX2TF_getting_started.ipynb
jax/experimental/jax2tf/README.md
==================
1d739527;George Necula;2020-10-06 14:14:28 +0300;[jax2tf] Added Getting Started notebook (#4460)
* [jax2tf] Added Getting Started notebook

* Updated the jax2tf README

* Minor cleanup
==

jax/experimental/jax2tf/JAX2TF_getting_started.ipynb
jax/experimental/jax2tf/README.md
==================
2166f0ee;jax authors;2020-10-05 17:41:30 -0700;Merge pull request #4457 from google:tycheck-invar-eqn-context
PiperOrigin-RevId: 335537630

==
==================
7efa3209;jax authors;2020-10-05 16:14:32 -0700;Merge pull request #4458 from hawkinsp:xla
PiperOrigin-RevId: 335521726

==
==================
49d851d2;Peter Hawkins;2020-10-05 16:14:32 -0400;Update XLA.

==

WORKSPACE
==================
e7979258;Roy Frostig;2020-10-05 12:29:43 -0700;equation context for undefined var reads in jaxpr typechecker

==

jax/core.py
tests/core_test.py
==================
91755e5c;jax authors;2020-10-05 12:09:35 -0700;Merge pull request #4456 from jakevdp:small-fix
PiperOrigin-RevId: 335469646

==
==================
9273e8c4;jax authors;2020-10-05 12:09:21 -0700;Merge pull request #4455 from johnpjf:patch-2
PiperOrigin-RevId: 335461715

==
==================
efeed6c1;jax authors;2020-10-05 12:09:05 -0700;Merge pull request #4444 from jakevdp:dtype-check
PiperOrigin-RevId: 335442628

==
==================
7854a235;Jake VanderPlas;2020-10-05 11:50:04 -0700;remove redundant if-else

==

tests/lax_control_flow_test.py
==================
b357005e;johnpjf;2020-10-05 10:19:18 -0700;Update Common_Gotchas_in_JAX.ipynb
Clarify that the index is clamped to the bounds of the array when accessing out of bounds.
==

docs/notebooks/Common_Gotchas_in_JAX.ipynb
==================
d388b626;jax authors;2020-10-05 07:17:42 -0700;Merge pull request #4442 from hawkinsp:docs
PiperOrigin-RevId: 335411058

==
==================
51538bd7;jax authors;2020-10-04 22:17:06 -0700;Merge pull request #4446 from n2cholas:master
PiperOrigin-RevId: 335349341

==
==================
238b4a12;Nicholas Vadivelu;2020-10-05 00:54:18 -0400;Update examples/differentially_private_sgd.py
Co-authored-by: Matthew Johnson <mattjj@google.com>
==

examples/differentially_private_sgd.py
==================
0e92124c;jax authors;2020-10-03 03:23:55 -0700;Merge pull request #4443 from jakevdp:concrete
PiperOrigin-RevId: 335180298

==
==================
2ced1635;Nicholas Vadivelu;2020-10-02 23:41:23 -0700;fix dp sgd example

==

examples/differentially_private_sgd.py
==================
6d5ace28;jax authors;2020-10-02 18:12:39 -0700;Merge pull request #4445 from google:lax-ad-test-skip
PiperOrigin-RevId: 335136639

==
==================
db4a3eed;Roy Frostig;2020-10-02 17:41:08 -0700;skip test that fails due to known xla:cpu bug

==

tests/lax_autodiff_test.py
==================
0328f858;Jake VanderPlas;2020-10-02 15:31:02 -0700;Call check_user_dtype on all user dtypes

==

jax/lax/lax.py
jax/numpy/lax_numpy.py
==================
5cfd0e9a;jax authors;2020-10-02 15:56:04 -0700;Merge pull request #4441 from jakevdp:choice
PiperOrigin-RevId: 335117255

==
==================
492889f4;Jake VanderPlas;2020-10-02 15:08:21 -0700;Improve errors for failed compilations w/ core.concrete_or_error

==

jax/numpy/lax_numpy.py
==================
57324283;Peter Hawkins;2020-10-02 16:44:42 -0400;Fix rendering problems in lax.cond docstring.

==

jax/lax/lax_control_flow.py
==================
2fccbbf6;Jake VanderPlas;2020-10-02 13:13:21 -0700;Implement jnp.choose

==

docs/jax.numpy.rst
jax/numpy/__init__.py
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
95e3fcdf;jax authors;2020-10-02 11:17:20 -0700;Merge pull request #4438 from hawkinsp:gelu
PiperOrigin-RevId: 335063459

==
==================
113c8060;jax authors;2020-10-02 11:14:03 -0700;Merge pull request #4439 from hawkinsp:selectandscatter
PiperOrigin-RevId: 335062792

==
==================
081ba14d;Roy Frostig;2020-10-02 11:03:36 -0700;wrap long line

==

jax/numpy/lax_numpy.py
==================
d25f4041;jax authors;2020-10-02 11:00:20 -0700;Merge pull request #4429 from apaszke:all_to_all_vmap_split
PiperOrigin-RevId: 335059726

==
==================
2d74037d;Peter Hawkins;2020-10-02 10:56:08 -0400;Change select_and_scatter_add's batching rule to avoid unrolling.
Add a test for select_and_scatter_add batching.

==

jax/lax/__init__.py
jax/lax/lax.py
tests/lax_vmap_test.py
==================
9b3bbe83;Peter Hawkins;2020-10-02 09:48:07 -0400;Adds an approximate=... keyword argument to jax.nn.gelu to select between the approximate and exact formulations of gelu.
Default to the approximate formulation for now.

==

jax/nn/functions.py
tests/nn_test.py
==================
b609040c;jax authors;2020-10-01 19:26:55 -0700;Merge pull request #4413 from alexminnaar:master
PiperOrigin-RevId: 334946450

==
==================
9cf61593;jax authors;2020-10-01 18:34:24 -0700;Merge pull request #4434 from google:numpy-dispatch-test-count
PiperOrigin-RevId: 334940761

==
==================
0893b08a;Alex Minnaar;2020-09-21 16:59:46 -0400;histogramdd implemenation

==

docs/jax.numpy.rst
jax/numpy/__init__.py
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
fd39901a;Roy Frostig;2020-10-01 15:00:38 -0700;reduce test-case count of the numpy-dispatch CI check, to match our other x64-mode CI check

==

.github/workflows/ci-build.yaml
==================
93fbae62;jax authors;2020-10-01 14:54:52 -0700;Merge pull request #4431 from tomhennigan:changelist/334843453
PiperOrigin-RevId: 334902700

==
==================
f18b9143;Tom Hennigan;2020-10-01 17:26:07 +0000;Remove scalar float0 XLA representation.
Some places in the code (e.g. lower_fun in xla.py) we need to go from an XLA shape to a ShapedArray and cannot do this if we drop shape information earlier.

==

jax/interpreters/xla.py
jax/lib/xla_bridge.py
==================
9a8ee95c;jax authors;2020-10-01 10:39:51 -0700;Merge pull request #4419 from rsepassi:master
PiperOrigin-RevId: 334846970

==
==================
a622220f;jax authors;2020-10-01 07:58:43 -0700;Merge pull request #4430 from LenaMartens:changelist/334791342
PiperOrigin-RevId: 334813454

==
==================
cc0114a0;Lena Martens;2020-10-01 13:07:33 +0100;Fix dtype behavior with float0s in CustomVJP.

==

jax/core.py
jax/interpreters/ad.py
==================
69fda9ec;jax authors;2020-09-30 19:25:00 -0700;Merge pull request #4039 from LenaMartens:changelist/325216264
PiperOrigin-RevId: 334728148

==
==================
768b0c1e;jax authors;2020-09-30 14:44:47 -0700;Merge pull request #4415 from jakevdp:indices-concrete
PiperOrigin-RevId: 334683008

==
==================
0b23a904;Jake VanderPlas;2020-09-28 15:33:06 -0700;Call concrete_or_error on indices() argument

==

jax/numpy/lax_numpy.py
==================
47da5121;jax authors;2020-09-30 10:23:34 -0700;Merge pull request #4384 from jakevdp:cov-weights
PiperOrigin-RevId: 334626974

==
==================
62f1e83e;jax authors;2020-09-30 10:15:55 -0700;Merge pull request #4425 from akihironitta:use-raise-from
PiperOrigin-RevId: 334625280

==
==================
d707ae17;Akihiro Nitta;2020-10-01 00:27:03 +0900;Merge branch 'master' into use-raise-from

==
==================
e61ca913;Adam Paszke;2020-09-22 13:05:08 +0000;Implement split_axis for all_to_all
This allows us to use `all_to_all` over a mix of vmapped and pmapped
dimensions, which will be useful for `gmap`.

==

jax/interpreters/pxla.py
jax/lax/lax_parallel.py
tests/batching_test.py
tests/pmap_test.py
==================
fa38f250;Adam Paszke;2020-09-22 11:19:06 +0000;Add support for all_to_all over vmapped axes

==

jax/lax/lax_parallel.py
tests/batching_test.py
tests/pmap_test.py
==================
2d94a878;jax authors;2020-09-29 13:42:18 -0700;Merge pull request #4421 from jakevdp:multi-buf
PiperOrigin-RevId: 334452699

==
==================
6b5a265b;jax authors;2020-09-29 12:07:09 -0700;Merge pull request #4414 from n2cholas:master
PiperOrigin-RevId: 334432358

==
==================
40016cc4;Jake VanderPlas;2020-09-29 11:53:17 -0700;Allow jax objects to be represented by multiple buffers

==

jax/api.py
jax/core.py
jax/interpreters/pxla.py
jax/interpreters/sharded_jit.py
jax/interpreters/xla.py
jax/lax/lax.py
tests/core_test.py
tests/custom_object_test.py
tests/pmap_test.py
==================
06170da6;Akihiro Nitta;2020-09-30 01:20:00 +0900;Use `raise from`

==

jax/core.py
jax/experimental/host_callback.py
jax/experimental/jax2tf/jax2tf.py
jax/lax/lax.py
jax/linear_util.py
jax/numpy/linalg.py
==================
97592c86;Ryan Sepassi;2020-09-29 07:57:20 -0700;Add --exclude_test_targets to test_util

==

jax/test_util.py
==================
c67454d0;jax authors;2020-09-29 06:53:17 -0700;Merge pull request #4417 from google:revert-3983-device-put-tuple
PiperOrigin-RevId: 334368988

==
==================
a0e14b05;Peter Hawkins;2020-09-29 09:26:11 -0400;Revert "Allow JAX objects to be represented by multiple buffers"

==

jax/api.py
jax/core.py
jax/interpreters/pxla.py
jax/interpreters/sharded_jit.py
jax/interpreters/xla.py
jax/lax/lax.py
tests/core_test.py
tests/custom_object_test.py
tests/pmap_test.py
==================
76e9f234;Nicholas Vadivelu;2020-09-28 19:19:47 -0700;update device faq

==

docs/faq.rst
==================
a51a4d91;Jake VanderPlas;2020-09-28 15:34:57 -0700;Add test coverage for jnp.cov aweights & fweights

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
ecad419c;Lena Martens;2020-09-24 16:29:57 +0100;Support grad with integer arguments. - Add float0 and set-up at_least_vspace to return float0 values for int/bool primals - Use Zero to wrap float0 tangents so they're correctly ignored in jvp rules - Add float0 handlers to XLA to support jit - Fix convert_element_type and tie_in jvp rules

==

jax/__init__.py
jax/abstract_arrays.py
jax/ad_util.py
jax/api.py
jax/core.py
jax/dtypes.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/control_flow_ops_test.py
jax/interpreters/ad.py
jax/interpreters/xla.py
jax/lax/lax.py
jax/lib/xla_bridge.py
jax/numpy/lax_numpy.py
tests/api_test.py
tests/jet_test.py
tests/lax_numpy_indexing_test.py
tests/lax_numpy_test.py
==================
fa113388;jax authors;2020-09-28 10:00:49 -0700;Merge pull request #3983 from jakevdp:device-put-tuple
PiperOrigin-RevId: 334180017

==
==================
c4a08aff;Nicholas Vadivelu;2020-09-26 17:36:40 -0700;document setting default device and array creation

==

docs/faq.rst
==================
5b3cbc5e;jax authors;2020-09-25 17:44:21 -0700;Merge pull request #4342 from google:improve-tracer-error
PiperOrigin-RevId: 333841912

==
==================
23a25dad;Matthew Johnson;2020-09-25 16:02:32 -0700;fix test

==

tests/api_test.py
==================
aaa5724e;jax authors;2020-09-25 15:42:58 -0700;Merge pull request #4412 from jakevdp:axis-concrete
PiperOrigin-RevId: 333822998

==
==================
61fcea93;Matthew Johnson;2020-09-25 15:35:44 -0700;tweak error to mention *flattened* positions

==

jax/interpreters/partial_eval.py
==================
f66c2eef;Matthew Johnson;2020-09-25 15:13:14 -0700;Merge branch 'master' into improve-tracer-error

==
==================
185590fc;Jake VanderPlas;2020-09-25 14:18:46 -0700;Use core.concrete_or_error() to improve errors in reductions

==

jax/core.py
jax/numpy/lax_numpy.py
==================
4d556837;jax authors;2020-09-25 12:35:24 -0700;Merge pull request #4411 from google:omnistaging-doc-fix-links
PiperOrigin-RevId: 333787009

==
==================
be6e85a1;Matthew Johnson;2020-09-25 12:10:03 -0700;fix links in omnistaging doc (hopefully...)

==

design_notes/omnistaging.md
==================
5e194819;jax authors;2020-09-25 11:59:22 -0700;Merge pull request #4410 from google:add-omnistaging-doc
PiperOrigin-RevId: 333779252

==
==================
90b272aa;Matthew Johnson;2020-09-25 11:50:32 -0700;add author line, fix typo

==

design_notes/omnistaging.md
==================
0fb12a21;Matthew Johnson;2020-09-25 11:48:49 -0700;add omnistaging doc

==

design_notes/omnistaging.md
==================
d1f80228;Jake VanderPlas;2020-09-25 11:09:08 -0700;Allow jax objects to be represented by multiple buffers

==

jax/api.py
jax/core.py
jax/interpreters/pxla.py
jax/interpreters/sharded_jit.py
jax/interpreters/xla.py
jax/lax/lax.py
tests/core_test.py
tests/custom_object_test.py
tests/pmap_test.py
==================
8d24d0af;jax authors;2020-09-25 10:56:00 -0700;Merge pull request #4368 from jakevdp:unop-check-array
PiperOrigin-RevId: 333765605

==
==================
95389e87;jax authors;2020-09-25 07:12:58 -0700;Merge pull request #4406 from gnecula:print_debug
PiperOrigin-RevId: 333727118

==
==================
f46a4220;George Necula;2020-09-25 15:28:23 +0300;[host_callback] improved logging, and add instructions for debugging

==

jax/experimental/host_callback.py
tests/host_callback_test.py
==================
ca32966c;jax authors;2020-09-25 00:11:36 -0700;Merge pull request #4403 from SIben:eigh-edge-case
PiperOrigin-RevId: 333679325

==
==================
a1da363c;jax authors;2020-09-24 23:47:00 -0700;Merge pull request #4402 from gnecula:omni_print
PiperOrigin-RevId: 333676897

==
==================
fd5294b0;Benjamin Chetioui;2020-09-24 16:46:08 +0200;[jax2tf] Fix casting in translation of eigh for empty arrays.
In the case when the operand is complex, we still need to cast
the resulting empty eigenvalues to the corresponding floating
point type.

==

jax/experimental/jax2tf/jax2tf.py
==================
1bf80368;jax authors;2020-09-24 06:31:46 -0700;Merge pull request #4170 from apaszke:all_to_all
PiperOrigin-RevId: 333502317

==
==================
acd4cc57;Adam Paszke;2020-08-28 15:21:50 +0000;Allow vmapping all_to_all and implement a (slow) CPU and GPU translation
This allows pmapping vmapped computations that use `all_to_all` or
`pswapaxes` inside. It also includes a very slow CPU and GPU translation
rule that might be useful for debugging programs locally, since XLA only
implements the `AllToAll` collective on TPUs.

Fixes #4141.

==

jax/interpreters/xla.py
jax/lax/lax_parallel.py
tests/pmap_test.py
==================
03970e97;George Necula;2020-09-24 15:08:07 +0300;Tag tests that require omnistaging

==

tests/host_callback_test.py
==================
2b615135;George Necula;2020-09-24 14:24:02 +0300;[host_callback] Fixes and documentation changes for omnistaging
As a nice benefit from omnistaging, the id_print are executed in program order
even if the result is not ued. We keep the functions returning values for
backwards compatibility, but also so the can be used inside expressions and
also so that they can tap values from the backward computation.

Omnistaging introduces jaxpr with no invars, which broke host_callback.

==

docs/CHANGELOG.rst
jax/experimental/host_callback.py
jax/lax/lax.py
tests/host_callback_test.py
==================
f7a09c63;jax authors;2020-09-24 03:28:32 -0700;Merge pull request #4388 from apaszke:all_to_all_translation
PiperOrigin-RevId: 333480692

==
==================
b8396c1d;jax authors;2020-09-24 03:09:12 -0700;Merge pull request #4364 from botev:api
PiperOrigin-RevId: 333478420

==
==================
aa85166e;jax authors;2020-09-23 23:11:48 -0700;Merge pull request #4387 from gnecula:print_doc
PiperOrigin-RevId: 333451138

==
==================
20c8c1ae;jax authors;2020-09-23 22:50:49 -0700;Merge pull request #4400 from google:issue4389
PiperOrigin-RevId: 333448765

==
==================
bdcefbd3;jax authors;2020-09-23 21:49:39 -0700;Merge pull request #4401 from google:update-pypi
PiperOrigin-RevId: 333440474

==
==================
951bc756;Matthew Johnson;2020-09-23 21:26:10 -0700;update version and changelog for pypi

==

docs/CHANGELOG.rst
jax/version.py
==================
ebf7c1b6;Matthew Johnson;2020-09-23 21:09:44 -0700;add jax logo file

==

images/jax_logo.svg
==================
c7e0ef40;jax authors;2020-09-23 20:51:27 -0700;Merge pull request #4398 from google:lift-randomness-limit
PiperOrigin-RevId: 333433816

==
==================
d607164d;Matthew Johnson;2020-09-23 20:41:57 -0700;make_jaxpr return_shape use ShapeDtypeStruct, test

==

jax/api.py
tests/api_test.py
==================
71f5f997;Matthew Johnson;2020-09-23 20:15:32 -0700;skip checks in big randomness test

==

tests/random_test.py
==================
96f5a3c4;Matthew Johnson;2020-09-23 19:39:22 -0700;fix test for non-omnistaging

==

tests/random_test.py
==================
c42d736e;Matthew Johnson;2020-09-23 19:37:34 -0700;remove limit on size of random arrays

==

jax/random.py
tests/random_test.py
==================
0d5f15f5;Adam Paszke;2020-09-23 10:45:23 +0000;Fix the abstract eval and translation rule for all_to_all
The previous rules assumed that `split_axis == concat_axis` (i.e. that
the used collective is equivalent to `pswapaxes`). Since we expose this
as part of our API, we should probably make sure that we handle other
cases too.

Fixes #1332.

==

jax/lax/lax_parallel.py
tests/pmap_test.py
==================
c875ab3e;jax authors;2020-09-23 09:11:33 -0700;Merge pull request #4391 from apaszke:axis_index_handle_list
PiperOrigin-RevId: 333304709

==
==================
c9b3df3a;jax authors;2020-09-23 08:26:03 -0700;Merge pull request #4382 from hawkinsp:lu
PiperOrigin-RevId: 333296510

==
==================
c6cd2f91;jax authors;2020-09-23 08:13:34 -0700;Merge pull request #4392 from SIben:fix_eigh_flakiness_cpu
PiperOrigin-RevId: 333294460

==
==================
f3d61320;jax authors;2020-09-23 06:23:39 -0700;Merge pull request #4393 from hawkinsp:qr
PiperOrigin-RevId: 333279018

==
==================
89b98965;Peter Hawkins;2020-09-23 09:08:17 -0400;Enable tests for complex QR decomposition on TPU.

==

tests/linalg_test.py
==================
3360bee9;Benjamin Chetioui;2020-09-23 15:04:15 +0200;[jax2tf] Adjust tolerance in flaky float32 eigh test.

==

jax/experimental/jax2tf/tests/primitives_test.py
==================
2b7580c2;Adam Paszke;2020-09-23 12:59:01 +0000;Consider lists as groups of axis names too

==

jax/lax/lax_parallel.py
==================
625be693;George Necula;2020-09-23 13:14:36 +0300;[host_callback] Update the documentation
The module-level documentation was out of date.

==

jax/experimental/host_callback.py
==================
7e1b826e;Peter Hawkins;2020-09-22 15:00:46 -0400;Enable fast TPU LU decomposition for complex types.

==

jax/lax_linalg.py
==================
80fa22cf;jax authors;2020-09-22 15:17:25 -0700;Merge pull request #4381 from jakevdp:check-arraylike
PiperOrigin-RevId: 333170269

==
==================
533fe28b;jax authors;2020-09-22 10:24:48 -0700;Merge pull request #4377 from apaszke:axis_index
PiperOrigin-RevId: 333107273

==
==================
99ffcc44;jax authors;2020-09-22 10:21:43 -0700;Merge pull request #4378 from apaszke:axis_index_nd
PiperOrigin-RevId: 333106474

==
==================
ab273acb;Jake VanderPlas;2020-09-22 10:01:55 -0700;Call _check_arraylike in jax.numpy to improve error messages
This PR only adds the call to places where non-array inputs currently lead to errors. There
remain a number of other functions where adding this check would lead to potentially breaking
changes; these are deliberately left out of this PR.

==

jax/numpy/lax_numpy.py
==================
8ac19c72;Adam Paszke;2020-09-22 16:05:24 +0000;Fix a faulty soft_pmap rule for axis_index
The rule didn't specify the precision for the `np.arange` constant,
which caused an accidental dtype promotion in X64 mode. Previously the
error has luckicly been hidden behind a coerction that followed
`axis_index` in that test, but the new implementation has surfaced it.

==

jax/lax/lax_parallel.py
==================
332a9ba1;Adam Paszke;2020-09-22 13:04:53 +0000;Fix axis_index inside nested pmaps
The previous translation rule has assumed that `axis_index` is always
taken over the outermost axis in the `axis_env`, and was always producing
the same output, no matter which axis has been specified. This fixes the
translation rule to start taking the `axis_name` into account.

Additionally, this adds support for querying the index along multiple
axes, which will be useful for `gmap`.

==

jax/lax/lax_parallel.py
tests/pmap_test.py
==================
997e56d0;jax authors;2020-09-22 08:59:33 -0700;Merge pull request #4370 from johnpjf:patch-1
PiperOrigin-RevId: 333089083

==
==================
b040df20;jax authors;2020-09-22 07:32:16 -0700;Merge pull request #4376 from SIben:deterministic_limited_support_order
PiperOrigin-RevId: 333074599

==
==================
e0d1b375;Adam Paszke;2020-09-22 13:08:38 +0000;Delete dead axis_index code
The primitive was moved to `lax_parallel.py` some time ago, so the one
in `core` should no longer be used. This is probably a result of a
botched rebase.

==

jax/core.py
jax/interpreters/xla.py
==================
4ba0ba6f;Benjamin Chetioui;2020-09-22 14:41:53 +0200;[jax2tf] Make rows of the generated documentation ordered deterministically.

==

jax/experimental/jax2tf/primitives_with_limited_support.md
jax/experimental/jax2tf/tests/correctness_stats.py
==================
6d791b3e;jax authors;2020-09-22 05:32:26 -0700;Merge pull request #4361 from SIben:test_eigh_p
PiperOrigin-RevId: 333058558

==
==================
ea754674;jax authors;2020-09-22 04:54:19 -0700;Merge pull request #4359 from apaszke:fix-ppermute-batching
PiperOrigin-RevId: 333054115

==
==================
bbbb7ce2;Benjamin Chetioui;2020-09-21 11:43:32 +0200;[jax2tf] Implementation of the conversion of eigh_p.
The main issue is a huge loss of precision in compiled mode.

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/primitives_with_limited_support.md
jax/experimental/jax2tf/tests/correctness_stats.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
6aa35a2a;Alex Botev;2020-09-21 20:59:08 +0100;Adding an option to return the output tree in make_jaxpr

==

jax/api.py
==================
e4d9845b;jax authors;2020-09-21 19:53:08 -0700;Merge pull request #4373 from google:avoid-device-interactions
PiperOrigin-RevId: 332990954

==
==================
34e04609;Matthew Johnson;2020-09-21 19:33:14 -0700;only test if omnistaging is enabled

==

tests/api_test.py
==================
70516c42;jax authors;2020-09-21 17:58:09 -0700;Merge pull request #4331 from zhangqiaorjc:rm_fretchet
PiperOrigin-RevId: 332976096

==
==================
6b60267e;Matthew Johnson;2020-09-21 17:55:30 -0700;add test

==

tests/api_test.py
==================
a62763e0;jax authors;2020-09-21 17:54:59 -0700;Merge pull request #4362 from jakevdp:type-annotation
PiperOrigin-RevId: 332975809

==
==================
d43d5d90;jax authors;2020-09-21 17:44:35 -0700;Merge pull request #4371 from jakevdp:moveaxis-fix
PiperOrigin-RevId: 332974804

==
==================
2abb37c2;Matthew Johnson;2020-09-21 17:30:56 -0700;move a _device_put_raw under broadcast impl
Before this change, we had to interact with the device to construct
an array of zeros, even if we were staging everything out (e.g. with
jax.xla_computation and omnistaging).

==

jax/lax/lax.py
==================
b6e9da36;Qiao Zhang;2020-09-21 14:17:04 -0700;Remove unused var. Bump tol.

==

tests/linalg_test.py
==================
04fa89a1;jax authors;2020-09-21 16:48:00 -0700;Merge pull request #4299 from zhangqiaorjc:segsum
PiperOrigin-RevId: 332964956

==
==================
2cf8d49f;Jake VanderPlas;2020-09-21 16:32:11 -0700;jnp.moveaxis: fix bug when axes are integer dtype

==

jax/numpy/lax_numpy.py
==================
2cb795e0;jax authors;2020-09-21 16:28:30 -0700;Merge pull request #4366 from jakevdp:diff-empty
PiperOrigin-RevId: 332960638

==
==================
ae910cdd;johnpjf;2020-09-21 16:21:48 -0700;Updating image_test

==

tests/image_test.py
==================
be50847c;johnpjf;2020-09-21 16:20:17 -0700;Make scale_and_translate take spatial dimensions

==

jax/image/scale.py
==================
80d5f9ce;Jake VanderPlas;2020-09-21 15:26:47 -0700;jax.numpy: improved errors for invalid inputs to unary ops

==

jax/numpy/lax_numpy.py
==================
ada6f30f;jax authors;2020-09-21 15:20:19 -0700;Merge pull request #4347 from jakevdp:array-equiv
PiperOrigin-RevId: 332946445

==
==================
18054e05;Jake VanderPlas;2020-09-15 12:55:38 -0700;call _check_arraylike in jnp.diff

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
35d23199;Qiao Zhang;2020-09-21 14:45:37 -0700;Add ceil_of_ratio util and bucket_size TODO.

==

jax/ops/scatter.py
jax/util.py
==================
55c6bdfe;jax authors;2020-09-21 14:18:31 -0700;Clean-up todos related to the upgrade of jaxlib.
PiperOrigin-RevId: 332932271

==

jax/api.py
==================
83f14012;Qiao Zhang;2020-09-21 14:04:57 -0700;Bump tol of float32 for complex64 inner product.

==

tests/linalg_test.py
==================
9f53d2a8;Jean-Baptiste Lespiau;2020-09-21 13:25:36 -0700;Internal change
PiperOrigin-RevId: 332920102

==

tests/api_test.py
==================
24fe07eb;jax authors;2020-09-21 11:30:15 -0700;Merge pull request #4345 from jakevdp:indentation
PiperOrigin-RevId: 332894503

==
==================
c33335b2;jax authors;2020-09-21 10:55:16 -0700;Merge pull request #4229 from johnpjf:changelist/330579231
PiperOrigin-RevId: 332886460

==
==================
ce1ce9cb;Jake VanderPlas;2020-09-21 10:37:55 -0700;Implement jnp.array_equiv

==

docs/jax.numpy.rst
jax/numpy/__init__.py
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
e76ebea9;Qiao Zhang;2020-09-21 10:08:54 -0700;Merge branch 'master' into rm_fretchet

==
==================
614acce4;Qiao Zhang;2020-09-21 09:46:26 -0700;Change segment_sum to use no bucketing by default.

==

jax/ops/scatter.py
==================
d7564c50;Qiao Zhang;2020-09-18 15:32:50 -0700;Add test matrices that exercise more code path.

==

tests/linalg_test.py
==================
2081e5ac;Adam Paszke;2020-09-21 16:25:50 +0000;Test pmap/vmap interactions of all reduction collectives

==

tests/pmap_test.py
==================
c4f98eb8;Adam Paszke;2020-09-21 14:14:52 +0000;Add back the batching rule for ppermute
Just make sure it's correct this time and add a test.

==

jax/lax/lax_parallel.py
tests/pmap_test.py
==================
05cc7e73;Jake VanderPlas;2020-09-21 08:57:49 -0700;device_put_sharded: remove incorrect type annotation

==

jax/api.py
==================
695e8d88;jax authors;2020-09-21 03:10:01 -0700;Merge pull request #4338 from SIben:test_eig_p
PiperOrigin-RevId: 332813984

==
==================
1d94363d;Benjamin Chetioui;2020-09-21 11:39:26 +0200;Ignore eig conversion test on TPU/GPU, as it is unimplemented in JAX.

==

jax/experimental/jax2tf/tests/primitives_test.py
==================
015bc3c2;Benjamin Chetioui;2020-09-18 18:05:13 +0200;Replace manual conj + transpose with call to adjoint.

==

jax/experimental/jax2tf/jax2tf.py
==================
1cde76b1;Benjamin Chetioui;2020-07-23 16:56:46 +0200;[jax2tf] Implementation of the conversion of eig_p.

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/primitives_with_limited_support.md
jax/experimental/jax2tf/tests/correctness_stats.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
85d070f0;jax authors;2020-09-19 23:34:37 -0700;Merge pull request #4356 from google:xla-computation-dont-initialize-backend
PiperOrigin-RevId: 332683955

==
==================
1092fa1d;Matthew Johnson;2020-09-19 22:19:29 -0700;fix logic, skip test

==

jax/api.py
tests/api_test.py
==================
1aab5ced;Matthew Johnson;2020-09-19 19:43:51 -0700;fix logic

==

jax/api.py
==================
50dd9c50;Matthew Johnson;2020-09-19 19:41:17 -0700;don't initialize backend in xla_computation
This should allow us to use donate_argnums *and* build HLO computations
for backends not available at build time.

==

jax/api.py
==================
d9f9b50d;jax authors;2020-09-19 09:25:44 -0700;Merge pull request #4343 from SIben:test_cholesky
PiperOrigin-RevId: 332627994

==
==================
ff5c1457;jax authors;2020-09-18 20:22:32 -0700;Merge pull request #4353 from google:xla-computation-donate-argnums
PiperOrigin-RevId: 332573843

==
==================
a6b3fa2c;Matthew Johnson;2020-09-18 19:54:37 -0700;add trivial test

==

tests/api_test.py
==================
e88579f2;Matthew Johnson;2020-09-18 19:41:53 -0700;fix typo

==

jax/api_util.py
jax/interpreters/xla.py
==================
cfbaca05;jax authors;2020-09-18 18:27:04 -0700;Merge pull request #4330 from google:create-token-stop-grad
PiperOrigin-RevId: 332564392

==
==================
f172fb74;Matthew Johnson;2020-09-18 17:39:05 -0700;plumb donate_argnums into jax.xla_computation

==

jax/api.py
jax/api_util.py
jax/interpreters/xla.py
==================
16e60360;Roy Frostig;2020-09-18 15:57:18 -0700;trivial change to test source sync
PiperOrigin-RevId: 332544315

==

jax/traceback_util.py
==================
2bc92f55;Chase Roberts;2020-09-18 14:58:03 -0700;Fixed ppermute translation rule (#4349)

==

jax/lax/lax_parallel.py
==================
7fd7009c;John Flynn;2020-09-08 13:51:19 -0700;Expose scale_and_translate as a public function, fix a bug in implementation when translation is not 0. Change implementation to use native JAX everywhere allowing vmaping and gradients wrt scale and translation.

==

docs/jax.image.rst
jax/image/__init__.py
jax/image/scale.py
tests/image_test.py
==================
6b9dfb13;Jake VanderPlas;2020-09-18 13:06:58 -0700;fix incorrect indentation

==

jax/util.py
==================
be6cae35;Matthew Johnson;2020-09-18 11:09:03 -0700;only enable new tests with omnistaging

==

tests/api_test.py
==================
41293aaf;Matthew Johnson;2020-09-18 10:49:53 -0700;deflake

==

tests/api_test.py
==================
92c97135;Matthew Johnson;2020-09-18 10:49:04 -0700;add tests for new error message info

==

jax/interpreters/partial_eval.py
tests/api_test.py
==================
b3930f0b;Benjamin Chetioui;2020-09-18 19:47:19 +0200;Make the custom_assert a one-liner.

==

jax/experimental/jax2tf/tests/primitives_test.py
==================
9ddd252b;Benjamin Chetioui;2020-09-18 19:29:41 +0200;[jax2tf] Add primitive conversion for cholesky_p.

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/primitives_with_limited_support.md
jax/experimental/jax2tf/tests/correctness_stats.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
3a77b2fa;Matthew Johnson;2020-09-18 10:38:37 -0700;Improve a tracer error message
Previously, given this function:

```python
@jax.jit
def f(x,y):
  if x > y:
    return x
  else:
    return y
```

we'd get an error message like this (after #4038, improved to help with
omnistaging debugging):

```
...

While tracing the function f at tim.py:3, this value became a tracer due to JAX operations on these lines:

  operation c:bool[] = gt a:int32[] b:int32[]
    from line tim.py:5 (f)

...
```

But this message is buggy! In this case, the value is a tracer because
it has a data dependence on arguments to a jitted function.

After this change, we instead produce this error message:

```
...

While tracing the function f at tim.py:3, this concrete value was not available in Python because it depends on the value of the arguments to f at tim.py:3 at positions [0, 1], and the computation of these values is being staged out.

...
```

I'm eager to iterate with further improvements, but for now I want to
fix this buggy message.

==

jax/core.py
jax/interpreters/partial_eval.py
==================
6614f948;Matthew Johnson;2020-09-18 10:07:13 -0700;rename and simplify TypedJaxpr -> ClosedJaxpr (#4328)
rename and simplify TypedJaxpr -> ClosedJaxpr

This change:
* simplifies code that constructs TypedJaxprs/ClosedJaxprs (because
  in_avals / out_avals no longer need to be constructed), making them
  easier to work with;
* correspondingly rules out a class of errors (mismatches between
  invars/outvars and in_avals/out_avals);
* provides a more descriptive class name (ClosedJaxprs are like jaxprs
  but they're closed in that they are packaged with their constant
  values).

This is part 1 of an attempt to remove TypedJaxprs completely, or at
least significantly reduce our use of them. However, I'm not getting rid
of them entirely in this first step because it'd require bigger changes
(basically allowing all constants to be represented as literals, rather
than only scalars) that would not only touch a lot more code (jaxpr
formation, jaxpr-to-jaxpr transformations, control flow, XLA lowering)
but also might affect XLA lowering right before a conference deadline
(ICLR). Plus I'm trying to make big changes in smaller steps :)

Co-authored-by: George Necula <gcnecula@gmail.com>
==

docs/jax_internal_api.rst
docs/jaxpr.rst
jax/api.py
jax/core.py
jax/custom_derivatives.py
jax/experimental/host_callback.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/loops.py
jax/interpreters/ad.py
jax/interpreters/batching.py
jax/interpreters/invertible_ad.py
jax/interpreters/partial_eval.py
jax/interpreters/xla.py
jax/lax/lax_control_flow.py
tests/core_test.py
tests/lax_control_flow_test.py
==================
6a89f606;Jake Vanderplas;2020-09-18 09:24:00 -0700;fix benchmark sums (#4329)

==

benchmarks/pmap_benchmark.py
==================
2911bcd6;Peter Hawkins;2020-09-18 11:36:00 -0400;Enable complex-valued Cholesky decomposition tests on TPU> (#4339)

==

tests/linalg_test.py
==================
8376d920;George Necula;2020-09-18 11:55:26 +0300;Disable testExpmGrad on TPU, pending investigation of compiler error (#4333)

==

tests/linalg_test.py
==================
ded7b385;George Necula;2020-09-18 11:37:34 +0300;[jax2tf] Revert '[jax2tf] Replace tf.math.add with tf.raw_ops.AddV2 (#4278)' (#4332)
Generates errors due to Grappler replacing AddV2 with AddN, which is not implemented for uint32
==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/primitives_with_limited_support.md
jax/experimental/jax2tf/primitives_with_limited_support.md.template
jax/experimental/jax2tf/tests/correctness_stats.py
==================
0ac25c76;George Necula;2020-09-18 10:30:45 +0300;[jax2tf] Replace tf.math.add with tf.raw_ops.AddV2 (#4278)
* [jax2tf] Replace tf.math.add with tf.raw_ops.AddV2

We now fixed tf.raw_ops.AddV2 to support uint32. It was already supporting uint8,
so it is a better choice now than tf.math.add. This allowed us to use
the threefry implementation using uint32.

==

jax/experimental/jax2tf/README.md
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/primitives_with_limited_support.md
jax/experimental/jax2tf/primitives_with_limited_support.md.template
jax/experimental/jax2tf/tests/correctness_stats.py
==================
d478e346;Benjamin Chetioui;2020-09-18 09:30:19 +0200;Fix conditional in eig and expand eig test suite. (#4320)
* Fix conditional in eig and expand eig test suite.

==

jax/lax_linalg.py
tests/linalg_test.py
==================
49a01d36;Qiao Zhang;2020-09-17 21:25:40 -0700;Use jvp(expm) to compute expm_frechet.

==

jax/scipy/linalg.py
==================
b3a09874;Qiao Zhang;2020-09-17 21:10:54 -0700;Make expm transposable and remove custom_jvp rule. (#4314)
* Make expm transposable and remove custom_jvp rule.

* Add check_grads for up to 2nd order derivative.
==

jax/scipy/linalg.py
tests/linalg_test.py
==================
90cb99fc;Roy Frostig;2020-09-17 17:09:27 -0700;insert a stop_gradient in lax.create_token (as it forces a false dependency on the operand)

==

jax/lax/lax.py
==================
e0af77fb;Jake Vanderplas;2020-09-17 12:42:22 -0700;Implement jnp.ravel_multi_index() (#4313)

==

docs/jax.numpy.rst
jax/numpy/__init__.py
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
8a4ee3d8;Benjamin Chetioui;2020-09-17 19:37:40 +0200;Fix shape checking rule for conv_general_dilated. (#4318)
* Fix shape checking rule for conv_general_dilated.

This closes google/jax#4316.

* Added test based on google/jax#4316.

* Change test name to be more accurate.
==

jax/lax/lax.py
tests/lax_test.py
==================
11007ba0;Matthew Johnson;2020-09-17 09:57:43 -0700;test eval_context works w/ and w/o omnistaging (#4325)

==

jax/core.py
tests/api_test.py
==================
40e20242;Srijan Saurav;2020-09-17 21:51:18 +0530;Fix code quality issues (#4302)
Changes:
- Fix unnecessary generator
- Iterate dictionary directly instead of calling .keys()
- Remove global statement at the module level
- Use list() instead of a list comprehension
- Use with statement to open the file
- Merge isinstance calls
==

build/build.py
build/setup.py
jax/abstract_arrays.py
jax/core.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
jax/lax/lax.py
jax/lax/lax_control_flow.py
jax/lax/lax_parallel.py
jax/lib/xla_bridge.py
jax/numpy/fft.py
jax/numpy/lax_numpy.py
jax/test_util.py
jax/tools/jax_to_hlo.py
setup.py
tests/batching_test.py
==================
d74e81cc;George Necula;2020-09-17 16:31:17 +0300;[jax2tf] Disable complex convolution test on GPU: crash in TF (#4319)

==

jax/experimental/jax2tf/tests/primitives_test.py
==================
2ff59374;George Necula;2020-09-17 11:45:11 +0300;[jax2tf] Change precision of test_conv to fix TPU tests (#4317)

==

jax/experimental/jax2tf/tests/primitives_test.py
==================
b1d0f876;Benjamin Chetioui;2020-09-17 10:03:31 +0200;[jax2tf] Group error messages by dtype in pprint_limitations. (#4307)
* [jax2tf] Group error messages by dtype in pprint_limitations.

This makes the output of the categorizer more synthetic in cases
when the error is exactly the same for a given primitive on a set
of devices for different dtypes.

==

jax/experimental/jax2tf/primitives_with_limited_support.md
jax/experimental/jax2tf/tests/correctness_stats.py
==================
b81c246a;Matthew Johnson;2020-09-16 23:59:58 -0700;move the trace liveness check from #4312 (#4315)

==

jax/core.py
tests/api_test.py
==================
c6b72694;Julius Kunze;2020-09-17 08:58:32 +0200;Support non-fragmenting mask of reshape (#4264)

==

jax/interpreters/masking.py
jax/lax/lax.py
jax/numpy/lax_numpy.py
tests/masking_test.py
==================
504e2827;Benjamin Chetioui;2020-09-17 07:41:38 +0200;[jax2tf] Fix precision casting problem in convolution. (#4306)
In Python 3.6 (maybe 3.7 too?), the lax.Precision enumeration
was not implicitly casted to int, which made the construction
of the xla_data_pb2.PrecisionConfig object fail in the conversion
of convolution.
==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/primitive_harness.py
==================
877053d8;Stephan Hoyer;2020-09-16 20:29:19 -0700;Add jax.linear_transpose (#3398)
* Add jax.linear_transpose

Co-authored-by: Matthew Johnson <mattjj@google.com>

* add failing test for complex numbers

* Add picky dtype check for linear_transpose

* Lint fix

* Allow truncating dtypes to match inputs in linear_transpose

* Fix typo in shape check error

* improve docstring

* Don't support integer inputs; better docstring

* fixup

* Fix doctest

Co-authored-by: Matthew Johnson <mattjj@google.com>
==

docs/jax.rst
jax/__init__.py
jax/api.py
jax/lax/lax_control_flow.py
jax/lax/lax_fft.py
jax/test_util.py
tests/api_test.py
==================
325d3bc7;Matthew Johnson;2020-09-16 15:59:50 -0700;improve an escaped tracer error message (#4312)
* improve an escaped tracer error message

Before this commit, encountering an escaped tracer in a specific way
would lead to a bad internal error. This change
1. raises an UnexpectedTracerError instead, and
2. includes in the error message the user source line which created the
tracer.

* deflake

* replace _live propety with _assert_live method

Thanks @jekbradbury !
==

jax/core.py
jax/interpreters/partial_eval.py
tests/api_test.py
==================
e18a9731;Jake Vanderplas;2020-09-16 13:30:08 -0700;implement jnp.apply_over_axes (#4225)

==

docs/jax.numpy.rst
jax/numpy/__init__.py
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
bbe3a6a9;Qiao Zhang;2020-09-15 18:17:30 -0700;Improve segment_sum stability by k-way summation.

==

jax/ops/scatter.py
==================
dcaa28c6;George Necula;2020-09-16 15:29:14 +0300;[jax2tf] More convolution test disabling (#4304)

==

jax/experimental/jax2tf/tests/primitives_test.py
==================
a433c16f;George Necula;2020-09-16 15:08:46 +0300;[jax2tf] Disable some convolution tests (#4303)

==

jax/experimental/jax2tf/tests/primitive_harness.py
==================
1f95414f;Benjamin Chetioui;2020-09-16 10:46:32 +0200;[jax2tf] Add tests for the conversion of conv_general_dilated (#4222)
* [jax2tf] Add tests for the conversion of conv_general_dilated.

This also adds the precision argument to the tfxla call which
was previously ignored.

* Separate orthogonal tests.
==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/primitives_with_limited_support.md
jax/experimental/jax2tf/tests/correctness_stats.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
a9430561;George Necula;2020-09-16 11:44:07 +0300;[jax2tf] Enable testing for SVD on TPU for float16 (#4288)

==

jax/experimental/jax2tf/tests/correctness_stats.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
1aeaa4a0;Tony;2020-09-15 23:28:51 -0700;Fix code rendering in optimizers documentation (#4296)
* Fix code rendering in optimizers documentation

* Fix misnamed variable
==

jax/experimental/optimizers.py
==================
19201f4b;Jake Vanderplas;2020-09-15 18:16:36 -0700;Mention in docstring when function is not implemented (#4297)

==

jax/numpy/lax_numpy.py
==================
2811b9b2;Jake Vanderplas;2020-09-15 17:57:54 -0700;Fix device_put_sharded() for concrete values (#4298)

==

jax/api.py
==================
95287a05;Jake Vanderplas;2020-09-15 16:08:21 -0700;Add api.device_put_sharded() (#4287)

==

jax/api.py
tests/api_test.py
==================
5520948b;Matthew Johnson;2020-09-15 12:36:53 -0700;tweak traceback for unbound axis names (#4295)

==

jax/interpreters/xla.py
==================
9c393812;Jake Vanderplas;2020-09-15 10:58:47 -0700;jnp.divide: remove obsolete condition for py2 behavior (#4286)

==

jax/numpy/lax_numpy.py
==================
2678a464;Matthew Johnson;2020-09-15 08:06:46 -0700;omnistaging on by default (#4038)

==

.github/workflows/ci-build.yaml
docs/jaxpr.rst
jax/api.py
jax/config.py
jax/core.py
jax/custom_derivatives.py
jax/experimental/jet.py
jax/experimental/ode.py
jax/interpreters/ad.py
jax/interpreters/batching.py
jax/interpreters/invertible_ad.py
jax/interpreters/partial_eval.py
jax/interpreters/pxla.py
jax/interpreters/sharded_jit.py
jax/interpreters/xla.py
jax/lax/lax.py
jax/lax/lax_control_flow.py
jax/lax/lax_parallel.py
jax/nn/functions.py
jax/numpy/lax_numpy.py
tests/api_test.py
tests/lax_numpy_test.py
tests/nn_test.py
==================
6af47690;Matthew Johnson;2020-09-15 08:00:47 -0700;update version and changelog for pypi (#4294)

==

docs/CHANGELOG.rst
jax/version.py
==================
cefa93f2;Peter Hawkins;2020-09-15 09:04:54 -0400;Lower LU decomposition to a custom TPU implementation for float32 types. (#4291)

==

jax/lax_linalg.py
==================
58a117fe;Benjamin Chetioui;2020-09-15 10:45:15 +0200;Modifies eig_p and related operations to take advantage of the new jaxlib geev API (#4266)
* Add options to compute L/R eigenvectors in geev.

The new arguments are by default set to True to ensure backwards
compatibility between jaxlib and jax.

Reformulate eig-related operations based on the new geev API.

* Addressed hawkinsp's comments from google/jax#3882.

Co-authored-by: Skye Wanderman-Milne <skyewm@google.com>
==

build/test-requirements.txt
jax/lax_linalg.py
jax/lib/__init__.py
jax/numpy/linalg.py
==================
a5c2c472;Benjamin Chetioui;2020-09-15 10:40:07 +0200;[jax2tf] Added support for x64 for the remaining test files (#4282)
* [jax2tf] Added support for x64 in other test files.

This includes:
- control_flow_ops_test.py
- jax2tf_test.py
- saved_model_test.py
- stax_test

==

jax/experimental/jax2tf/tests/control_flow_ops_test.py
jax/experimental/jax2tf/tests/jax2tf_test.py
jax/experimental/jax2tf/tests/savedmodel_test.py
jax/experimental/jax2tf/tests/stax_test.py
==================
4e04d4ea;Benjamin Chetioui;2020-09-15 08:35:35 +0200;[jax2tf] Build a primitive harness for test_type_promotion. (#4279)
* [jax2tf] Build a primitive harness for test_type_promotion.

We were previously generating the cases using `jtu.cases_from_list`,
which by default dropped 2 test cases (JAX_NUM_GENERATED_CASES=10,
number of generated cases = 12).

* [jax2tf] Fix the generated test cases for test_type_promotion.
==

jax/experimental/jax2tf/tests/primitives_test.py
==================
90403367;Trevor Cai;2020-09-15 02:35:41 +0100;Allow device_get to pass Python scalars through unchanged (#4283)
* Allow device_get to pass Python scalars through unchanged

* address comment
==

jax/api.py
tests/api_test.py
==================
7569e800;Matthew Johnson;2020-09-14 12:31:51 -0700;revert #4277 (google failure) (#4281)
* revert #4277 (google failure)

Some downstream user is relying on the rank of stax's biases being 1.

* only revert one change
==

jax/experimental/stax.py
==================
6bd3216b;Stephan Hoyer;2020-09-14 02:47:28 -0700;Simplify the interface for host_callback.id_tap (#4101)
* Simplify the internal interface for host_callback.id_tap

This is a breaking change for `id_tap` users (but not `id_print` users).

This makes it easier to use (and type check)  ``tap_func``, because the
expected signature is now ``tap_func(arg, transforms)`` vs
``tap_func(arg, *, transforms, **kwargs)``.

Most of the test changes are just adding whitespace/indentation, but I've
also slightly changed the way transformations are printed.

==

docs/CHANGELOG.rst
jax/experimental/host_callback.py
jax/test_util.py
tests/host_callback_test.py
==================
2ff34792;Benjamin Chetioui;2020-09-14 11:34:31 +0200;[jax2tf] Fix tests when running with JAX_ENABLE_X64=1. (#4261)
Fixed tests:
- test_binary_elementwise
- dynamic_update_slice
- fft
- population_count
- test_unary_elementwise
- top_k
- select_and_gather_add
==

jax/experimental/jax2tf/primitives_with_limited_support.md
jax/experimental/jax2tf/primitives_with_limited_support.md.template
jax/experimental/jax2tf/tests/correctness_stats.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
7e6d114f;Benjamin Chetioui;2020-09-14 10:35:43 +0200;[jax2tf] Add converted primitives without tests to the generated doc. (#4248)
* [jax2tf] Add converted primitives without tests to the generated
doc.

* Ignore some primitives in the output of untested primitives.

* Added control_flow_ops_test to template and updated primitives.

* Removed svd from the list of missing tests.

Was just included because I run the tests using
JAX_SKIP_SLOW_TESTS=1, which didn't run the SVD tests. Patched
the generated file manually.
==

jax/experimental/jax2tf/primitives_with_limited_support.md
jax/experimental/jax2tf/primitives_with_limited_support.md.template
jax/experimental/jax2tf/tests/correctness_stats.py
==================
fa827a59;Benjamin Chetioui;2020-09-14 10:33:58 +0200;[jax2tf] Added the last comments from the jax2tf doc inside the (#4249)
correctness_stats code.

In principle, all the relevant documentation that was in the doc
has been moved to the new documentation & comments of categorize.
==

jax/experimental/jax2tf/tests/correctness_stats.py
==================
6e2fa39e;Peter Buchlovsky;2020-09-14 09:33:02 +0100;[jax2tf] Fix lax.div_p (#4263)

==

jax/experimental/jax2tf/jax2tf.py
==================
9fc4353c;Roman Novak;2020-09-13 19:21:17 -0700;Avoid rank promotion in stax biases (#4277)
* Avoid rank promotion in stax biases

* remove itertools
==

jax/experimental/stax.py
==================
38b43ef9;Roman Novak;2020-09-13 19:20:31 -0700;Avoid rank promotion in np.outer (#4276)

==

jax/numpy/lax_numpy.py
==================
64bead20;Alex Minnaar;2020-09-12 16:10:01 -0400;fixing typo (#4273)
I assume "...one of more type parameters..." was intended to read "...one or more type parameters..."
==

docs/jaxpr.rst
==================
f039f6da;Matthew Johnson;2020-09-11 22:40:12 -0700;thread backend in pxla.replicate (#4272)
* thread backend in pxla.replicate

fixes #4223

* add test for #4223
==

jax/interpreters/pxla.py
tests/pmap_test.py
==================
83b4f3b9;Jake Vanderplas;2020-09-11 16:49:18 -0700;Cleanup: use _canonicalize_axis() utility where possible (#4270)

==

jax/numpy/lax_numpy.py
==================
ee9dccf3;Skye Wanderman-Milne;2020-09-11 12:12:34 -0700;Move failing CPPJitTest test case to PythonJitTest (#4268)

==

tests/api_test.py
==================
6dc161cf;Skye Wanderman-Milne;2020-09-11 11:16:54 -0700;Pin pygments version in RTD build. (#4267)
This fixes our RTD failures, which were caused by RTD installing an older version of pygments:
```
jupyterlab-pygments 0.1.1 requires pygments<3,>=2.4.1, but you'll have pygments 2.3.1 which is incompatible.
nbconvert 6.0.1 requires pygments>=2.4.1, but you'll have pygments 2.3.1 which is incompatible.
```
==

docs/requirements.txt
==================
ca1d8f41;Alvaro;2020-09-11 18:51:42 +0100;Fixing weird behavior in segment_sum when num_segments is None (#4034)
Co-authored-by: alvarosg <alvarosg@google.com>
==

jax/ops/scatter.py
tests/lax_numpy_indexing_test.py
==================
3b7329c9;Jake Vanderplas;2020-09-11 10:04:47 -0700;Call check_arraylike() in jax.numpy reductions (#4195)

==

jax/numpy/lax_numpy.py
==================
40fb01b4;Adam Paszke;2020-09-08 18:04:11 +0000;Extend axis env while translating the pmapped jaxpr to XLA
This is normally unnecessary, because the XLA translation usually
doesn't bind any of the primitives in the jaxpr, but this is not true in
case of scan! Its translation rule reevaluates the jaxpr as a function,
and if it contains collectives such as `axis_index` it can fail due to
axis being missing.

==

jax/core.py
jax/interpreters/pxla.py
tests/pmap_test.py
==================
8a18b10f;Jake Vanderplas;2020-09-11 08:47:05 -0700;implement jnp.apply_along_axis (#4253)

==

docs/jax.numpy.rst
jax/numpy/__init__.py
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
44b7c406;Peter Buchlovsky;2020-09-11 13:23:22 +0100;Update jax2tf.py

==

jax/experimental/jax2tf/jax2tf.py
==================
d568498f;Peter Buchlovsky;2020-09-09 12:03:48 +0000;Add input and output names to the TensorFlow graph generated by jax2tf.

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/jax2tf_test.py
==================
7e694bd3;Qiao Zhang;2020-09-10 18:28:44 -0700;Update README to point to jaxlib-0.1.55. (#4256)

==

README.md
==================
fc39332c;Skye Wanderman-Milne;2020-09-10 15:53:04 -0700;Clarify when jaxlib version should be bumped. (#4250)

==

jaxlib/version.py
==================
2a33b3d3;Jake Vanderplas;2020-09-10 11:23:29 -0700;fix documentation typo (#4252)

==

docs/jaxpr.rst
==================
82af356b;Qiao Zhang;2020-09-10 10:10:33 -0700;Bump TF hash to get an upstream LLVM GCC fix. (#4251)

==

WORKSPACE
==================
cf65f6b2;Peter Hawkins;2020-09-10 11:16:35 -0400;Change lax_linalg.lu to return a permutation representation of the partial pivoting information. (#4241)
The permutation is more efficiently computed during the decomposition on TPU, and the only use case that would not require us to compute it would be for evaluating determinants.
==

jax/lax_linalg.py
jax/numpy/linalg.py
jax/scipy/linalg.py
==================
b67e42a3;Peter Hawkins;2020-09-10 09:38:14 -0400;Revert "Revert "Delete batching.last. (#4148)" (#4160)" (#4242)
This reverts commit 36846e0ed96cc613e419ac85d9c3d54a49aa9ebc.
==

jax/api.py
jax/interpreters/batching.py
tests/api_test.py
==================
26a53ae5;Qiao Zhang;2020-09-10 03:58:28 -0700;Add comments for residuals from f_bwd. (#4244)

==

docs/notebooks/Custom_derivative_rules_for_Python_code.ipynb
==================
0962ceb0;George Necula;2020-09-10 13:55:57 +0300;[jax2tf] Fix test failure on TPUs (#4247)

==

jax/experimental/jax2tf/primitives_with_limited_support.md
jax/experimental/jax2tf/primitives_with_limited_support.md.template
jax/experimental/jax2tf/tests/primitives_test.py
==================
29f97afa;Benjamin Chetioui;2020-09-10 11:59:44 +0200;[jax2tf] Cleanup test_unary_elementwise. (#4246)
* [jax2tf] Cleanup test_unary_elementwise.

==

jax/experimental/jax2tf/primitives_with_limited_support.md
jax/experimental/jax2tf/tests/correctness_stats.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
f0a3fd4a;George Necula;2020-09-10 12:19:22 +0300;[jax2tf] Moved the limitations for XlaSort to correctness_stats (#4237)

==

jax/experimental/jax2tf/primitives_with_limited_support.md
jax/experimental/jax2tf/tests/correctness_stats.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
jax/experimental/jax2tf/tests/tf_test_util.py
==================
adb34488;Qiao Zhang;2020-09-09 17:23:43 -0700;Reorder nocuda/cuda build to fail early. (#4243)

==

build/build_jaxlib_wheels.sh
==================
0b04439f;Qiao Zhang;2020-09-09 17:16:58 -0700;Update install_cuda script to specify cublas. (#4240)

==

build/install_cuda.sh
==================
a14133aa;Qiao Zhang;2020-09-09 16:36:30 -0700;Update TF dep to a passing commit hash. (#4239)

==

WORKSPACE
==================
3f8aaabb;Adam Paszke;2020-09-08 16:10:35 +0000;Interrupt lu transformation generators whenever an exception occurs
This fixes some errors that have been appearing in our CI from time to
time. All transformations are implemented as generators, but they
haven't been explicitly aborted when an exception has been raised.
Instead, they only got closed when they got garbage collected, which
could happen at an unspecified later time, potentially leading to a
corruption of global state, which could have been modified after the
exception was handled.

Note that this implementation doesn't propagate the original exception
into the argument transformations, and doesn't allow them to handle the
error either. Such an extension would be possible, but throwing an
exception into a generator mutates the exception object, clobbering
the nice traceback that we would usually carry. One can work around
those issues, but it feels really hacky and we don't need it right now
anyway, so I figured we'll be better off with the simple thing for the
time being.

==

jax/linear_util.py
==================
70891f46;Benjamin Chetioui;2020-09-09 16:48:00 +0200;[jax2tf] Add a template file for documentation generation. (#4219)
* [jax2tf] Add a template file for documentation generation.

The documentation now gives instructions about how to
regenerate it, as well as when it was last generated.

* Added a list of conversions that are not yet implemented.

==

jax/experimental/jax2tf/primitives_with_limited_support.md
jax/experimental/jax2tf/primitives_with_limited_support.md.template
jax/experimental/jax2tf/tests/correctness_stats.py
jax/experimental/jax2tf/tests/tf_test_util.py
==================
053cd5aa;Benjamin Chetioui;2020-09-09 14:43:36 +0200;[jax2tf] Clean up test_dynamic_slice. (#4236)
* [jax2tf] Clean up test_dynamic_slice.

With the XLA nested compilation bug fixed, this should now work
fine.

==

jax/experimental/jax2tf/tests/primitives_test.py
==================
bff24bdd;Roman Ring;2020-09-09 13:02:45 +0100;Add axis_index_groups support to all_gather. (#4194)

==

jax/lax/lax_parallel.py
tests/pmap_test.py
==================
f908f6f2;Benjamin Chetioui;2020-09-09 12:20:59 +0200;[jax2tf] Updated test_pad to test all dtypes and remove old (#4235)
skipped test.
==

jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
ee38e716;George Necula;2020-09-09 11:34:22 +0300;[jax2tf] Clean up code for XlaGather, experimental_compile not necessary (#4030)
* [jax2tf] Clean up code for XlaGather, experimental_compile not necessary

Now that XlaGather has been fixed in XLA, we do not need to use
experimental_compile workaround (which was not working anyway when
put in a SavedModel).

This fix requires a recent tf-nightly installation.
==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/primitives_test.py
jax/experimental/jax2tf/tests/savedmodel_test.py
==================
3cf73367;Qiao Zhang;2020-09-08 21:28:34 -0700;Fix Dockerfile wheel installation issues. (#4232)

==

build/Dockerfile
==================
745d90d0;Matthew Johnson;2020-09-08 21:14:25 -0700;improve lax.pad shape rule (#4234)
It's now:
  * better tested
  * better at catching errors
  * faster
  * easier to read
==

jax/lax/lax.py
tests/lax_test.py
==================
cf2d15d4;Skye Wanderman-Milne;2020-09-08 18:23:42 -0700;jaxlib build fixes. (#4066)
1. `wheel.pep425tags` has been removed as of
   https://github.com/pypa/setuptools/pull/1829. Use the new
   `packaging.tags` instead.

2. Add `--allow-downgrades` to cuda install command. I'm not sure this
   is always necessary, but I ran into it, I'm guessing due to a cached
   docker image.
==

build/build_wheel_docker_entrypoint.sh
build/install_cuda.sh
==================
4600dd79;Qiao Zhang;2020-09-08 17:20:48 -0700;Update jaxlib version for dlpack fix. (#4231)

==

WORKSPACE
docs/CHANGELOG.rst
jaxlib/version.py
==================
9a70be24;Jake Vanderplas;2020-09-08 13:30:57 -0700;Add test for dtype coverage of jax.numpy ufuncs (#3913)

==

tests/lax_numpy_test.py
==================
7f3078b7;Matthew Johnson;2020-09-08 08:54:13 -0700;updtate version and changelog for pypi (#4224)

==

docs/CHANGELOG.rst
jax/version.py
==================
ed0d8c02;Matthew Johnson;2020-09-08 08:27:41 -0700;tweak lax.py shape broadcasting logic (#4217)
This new implementation is faster, and works for polymorphic shapes without weird tricks. (This new implementation is faster even if we remove the weird tricks for polymorphism.)
==

jax/lax/lax.py
==================
798a2648;Benjamin Chetioui;2020-09-08 10:32:53 +0200;[jax2tf] Fix bug in population count and move expect_tf_exception (#4214)
into correctness stats.

The code was using `tf.bitcast` instead of `tf.cast`, but using
`expect_tf_exception` in every case was hiding the errors.
==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/primitives_with_limited_support.md
jax/experimental/jax2tf/tests/correctness_stats.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
e1340f34;Benjamin Chetioui;2020-09-07 17:12:35 +0200;[jax2tf] Fix missing complex64 TPU corner case of scatter_{add,mul} (#4213)

==

jax/experimental/jax2tf/primitives_with_limited_support.md
jax/experimental/jax2tf/tests/correctness_stats.py
==================
0aed1f4d;Adam Paszke;2020-09-07 12:31:58 +0000;Add more context to the axis_frame error message.
Some of the vmap and gmap collective tests have been failing on master
and I can't seem to be able to reproduce them locally. Hopefully, if
this happens again, this extra bit of information will be useful in
debugging the problem.

==

jax/core.py
==================
4413bb8a;George Necula;2020-09-07 17:13:11 +0300;[jax2tf] Do not use jax.random.PRNGKey before in primitive harness (#4211)
We cannot execute JAX functions before the program is initialized
==

jax/experimental/jax2tf/tests/primitive_harness.py
==================
be8ea144;Benjamin Chetioui;2020-09-07 15:47:18 +0200;[jax2tf] Expand coverage of primitives by categorize. (#4209)
* [jax2tf] Expand coverage of primitives by categorize.

This commit adds handling logic for the limitations of:
- qr
- svd
- select_and_gather_add
- reduce_window/reduce_window_{min,max,sum}
- add
- mul
- scatter/scatter_{min,max,mul,add}

Also fixes a bug in a call to _infer_shape_jax, which wasn't
compatible with boolean operands and went undetected due to the
high-level handling of TF exceptions in higher-order primitives.

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/primitives_with_limited_support.md
jax/experimental/jax2tf/tests/correctness_stats.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
1e84cbe9;George Necula;2020-09-07 14:41:50 +0300;[jax2tf] Fix random.split when jax_exable_x64 (#4208)
Since we do the threefry with signed integers when converting to TF,
we run into the type promotion 'uint32 - int32 = int64', which
then results in lax.shift_right_logical(uint32, int64), which fails.
==

jax/experimental/jax2tf/tests/primitives_test.py
jax/random.py
==================
6c62935d;Benjamin Chetioui;2020-09-07 11:03:00 +0200;[jax2tf] Cleanup the correctness stats layout. (#4201)
* [jax2tf] Cleanup the correctness stats layout.

* Added Google license at the top of the file.
* Cleanup: fix docstring for 80 char boundary.
* Monkey patch/cleanup outside of the loop.
* Removed tensorflow dependency.
* Fixed the name of attributes of Limitation.
==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/correctness_stats.py
jax/experimental/jax2tf/tests/tf_test_util.py
==================
c6e6ee2d;George Necula;2020-09-07 11:26:52 +0300;[jax2tf] Use the JAX impl rule for threefry instead of writing our own (#4204)
* performance is the same

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
96278e67;AdrienCorenflos;2020-09-04 19:21:43 +0300;Add reverse flag in associative scan (#4181)
Add optional 'reverse' argument  in associative scan
==

jax/lax/lax_control_flow.py
tests/lax_control_flow_test.py
==================
bcf9777b;Benjamin Chetioui;2020-09-03 15:56:22 +0200;[jax2tf] Generator for the documentation of operations with limited support (WIP) (#4193)
* [jax2tf] Draft of a generator for the documentation of operations
with limited support.

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/primitives_with_limited_support.md
jax/experimental/jax2tf/tests/primitives_test.py
jax/experimental/jax2tf/tests/tf_test_util.py
==================
abdd1388;George Necula;2020-09-03 14:24:04 +0300;[jax2tf] Flip the with_gradient=True; was flipped back by mistake (#4200)

==

jax/experimental/jax2tf/jax2tf.py
==================
5eac4772;George Necula;2020-09-03 14:18:35 +0300;[jax2tf] Implementation of random_gamma (#4192)
* [jax2tf] implementation of random_gamma

The simplest implementation is by converting the JAX own impl_rule,
which rewrites gamma into other JAX primitives.

On TPU with use_vmap=True the performance is the same for JAX and TF, provided
we use tf.function(compile=True).
==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/primitives_test.py
jax/random.py
==================
708d07d5;Alex Riley;2020-09-03 00:13:17 +0100;Add jax.numpy.array_split (#4197)

==

docs/jax.numpy.rst
jax/numpy/__init__.py
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
04f9a7e5;Matthew Johnson;2020-09-01 18:16:20 -0700;better jax.numpy.tile implementation (#4190)
Use reshape, broadcast_to, reshape.
==

jax/numpy/lax_numpy.py
==================
421550a9;Jake Vanderplas;2020-09-01 15:48:40 -0700;copysign: promote to inexact to match numpy & support unsigned inputs (#4188)

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
0cdb1f7e;Benjamin Chetioui;2020-09-01 09:35:25 +0200;[jax2tf] Indicate the version of TF used in tests in README. (#4185)

==

jax/experimental/jax2tf/README.md
==================
bdd65453;Jean-Baptiste Lespiau;2020-09-01 09:34:47 +0200;Add more features to the C++ jax.jit. (#4169)
This mainly follows https://github.com/google/jax/pull/4089 by adding:

- support for disable_jit from C++
- support for jax._cpp_jit on methods.
- supporting applying @jax.jit on top-level functions, by delaying the retrieval of the device and backend.
- concurrency support.

I am not aware of any feature missing (but I suspect there are still some differences due to the differences between xla_computation and _xla_callable.)

See:

- https://i.ibb.co/ZMvZ4nK/benchmark.png for the benchmarking comparison (see
 cr/328899906 + benchmarks for how numbers were generated)
- The results of the Jax tests when enabling this:
http://sponge2/4a67d132-209f-45c5-ab7b-83716d329ec2 (110 fails, 92 passes, but many common cause of failure).
==

WORKSPACE
jax/api.py
jaxlib/version.py
tests/api_test.py
tests/jax_jit_test.py
==================
36368a2a;Jake Vanderplas;2020-08-31 14:11:49 -0700;jnp.abs(): support boolean inputs (#4186)

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
44bcf7e7;Hamza Merzić;2020-08-31 17:00:34 +0300;Fix axis checking and remove extra print statement (#4184)
A series of PRs renaming the frame entries have been submitted, one of them introducing a bug when using omnistaging. This PR fixes that and removes a print comment (assuming added for debugging purposes).
==

jax/interpreters/batching.py
==================
b6b1f5e3;George Necula;2020-08-31 10:26:32 +0300;[jax2tf] Turn on with_gradient by default (#4180)
As I was writing the demo I realized that it makes more sense for
with_gradient to be set to True by default.

I have also fixed a bug with tie_in in omnistaging.
==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/jax2tf_test.py
jax/experimental/jax2tf/tests/primitives_test.py
jax/experimental/jax2tf/tests/savedmodel_test.py
==================
634c6259;George Necula;2020-08-30 12:38:14 +0300;More renaming of master to main in JAX internals (#4179)

==

jax/core.py
jax/experimental/callback.py
jax/experimental/doubledouble.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jet.py
jax/experimental/loops.py
jax/interpreters/ad.py
jax/interpreters/batching.py
jax/interpreters/masking.py
jax/interpreters/partial_eval.py
jax/lax/lax_parallel.py
==================
ffbfadd8;Jake Vanderplas;2020-08-30 01:36:47 -0700;lax.associative_scan: fix docstring examples (#4172)
* lax.associative_scan: fix docstring examples
* add verbiage from #3583
==

jax/lax/lax_control_flow.py
==================
6b6789a5;Matthew Johnson;2020-08-30 01:16:51 -0700;applied simple find+sed for 'master' -> 'main' (#4174)
* applied simple find+sed for 'master' -> 'main'

* Rename master->main in JAX API and internals (#4178)

* Started with #4174 
* Renamed Trace.master to Trace.main
* Renamed core.new_master and core.new_base_master

Co-authored-by: George Necula <gcnecula@gmail.com>
==

docs/conf.py
jax/core.py
jax/experimental/callback.py
jax/experimental/doubledouble.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jet.py
jax/experimental/loops.py
jax/interpreters/ad.py
jax/interpreters/batching.py
jax/interpreters/masking.py
jax/interpreters/partial_eval.py
jax/lax/lax_control_flow.py
==================
1a87fd3b;Benjamin Chetioui;2020-08-29 10:24:03 +0200;Implement a proper shape checking rule for gather. (#4166)
* Implement a proper shape checking rule for gather.

The implementation is based on the corresponding shape inference
code in `tensorflow/compiler/xla/service/shape_inference.cc`. The
tests added in `tests/lax_test.py` are similarly mirroring the
corresponding tests in tensorflow, with slight adaptations for the
particular setting of JAX. Fixes google/jax#2826, and in principle
fixes google/jax#4154 and google/jax#3905.

* Extracted common functions for gather/scatter shape checking rules.

==

jax/lax/lax.py
tests/lax_test.py
==================
a33f4dd8;Adam Paszke;2020-08-28 20:03:39 +0200;Add support for axis_index inside vmap (#4168)
Also, reorganize the code to put all `axis_index` related functions in
`lax_parallel.py`, next to all other parallel collectives.
==

jax/core.py
jax/experimental/jax2tf/jax2tf.py
jax/interpreters/batching.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
jax/lax/__init__.py
jax/lax/lax_parallel.py
tests/batching_test.py
==================
1dab791a;Jake Vanderplas;2020-08-28 09:07:30 -0700;Avoid calling jnp.sum() on list (#4163)

==

tests/sharded_jit_test.py
==================
04f9ff7f;Benjamin Chetioui;2020-08-28 16:27:32 +0200;Addition of one more conclusive polynomial comparison case. (#4167)
* Addition of one more conclusive polynomial comparison case.

In the case when the difference between two polynomials is a
constant, it is possible to conclusively compare them. This commit
adds such a case to masking.Poly.__ge__.

* Added a few relevant tests in tests.masking_test.test_Poly_compare.
==

jax/interpreters/masking.py
tests/masking_test.py
==================
7210d6f5;Adam Paszke;2020-08-18 09:14:38 +0000;Add support for binding axis_name in gmap
This allows executing collectives over the gmapped axes. This requires
some extra manipulation of the gmapped jaxpr, since gmap exposes a
single logical axis name, but evaluates the program using multiple
"physical" axes.

This also fixes some bugs around handling `multiple_returns` in
vmap collective implementation.

==

jax/core.py
jax/experimental/general_map.py
jax/interpreters/batching.py
jax/lax/lax_parallel.py
tests/batching_test.py
tests/gmap_test.py
==================
e95d5701;Jean-Baptiste Lespiau;2020-08-27 16:02:13 +0200;Add benchmarks for specifically the dispatch time. (#4128)
The goal is to distinguish the time it takes for `jitted_f` to return, and the time it takes to return and wait for the result.
We also add one to distinguish the time it takes to call the function with the argument transfer or without it.

e.g.

name                                   time/op
jit_trivial_dispatch                   28.9µs ± 2%
jit_trivial                            31.5µs ± 5%
jit_simple_dispatch                    60.7µs ± 4%
jit_simple                              129µs ±24%
jit_simple_many_args_disptch            390µs ±19%
jit_simple_many_args                    388µs ±16%
jit_dispatch_without_transfer           379µs ± 6%
jit_dispatch_with_transfer              450µs ± 5%
==

benchmarks/api_benchmark.py
==================
36846e0e;George Necula;2020-08-27 12:45:48 +0300;Revert "Delete batching.last. (#4148)" (#4160)
This reverts commit 4bf3d6e9cccc5de3834e37affae2012e6e3d3180.

This commit fails internal tests.
==

jax/api.py
jax/interpreters/batching.py
tests/api_test.py
==================
a7faf090;Benjamin Chetioui;2020-08-27 11:24:13 +0200;[jax2tf] Added conversion for scatter*_p primitives. (#4091)
* [jax2tf] Added conversion for scatter*_p primitives.

Limitations:

the conversion works as well as the conversion of the underlying reduction functions (e.g. lax.scatter_max is not properly converted for the int8 dtype, because tf.math.maximum is not defined for int8 tensors);
the conversion can not take advantage of the unique_indices parameter. This does not affect correctness, but may affect performance on certain platforms (as stated in the documentation of lax.scatter).

* Put tf.function experimental compile wrapper back on scatter.
* Removed unique_indices=True test cases
* Remove non-deterministic test cases from the scatter harness.

This commit also documents the reasons for ignoring these test
cases and potential pitfalls, in case someone needs to perform
these tests at a later time.

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
4d7396aa;Benjamin Chetioui;2020-08-27 11:04:32 +0200;Implement a proper shape checking rule for scatter. (#4144)
The implementation is based on the corresponding shape inference
code in `tensorflow/compiler/xla/service/shape_inference.cc`. The
tests added in `tests/lax_test.py` are similarly mirroring the
corresponding tests in tensorflow, with slight adaptations for
the particular setting of JAX.
==

jax/lax/lax.py
tests/lax_test.py
==================
80114e51;Benjamin Chetioui;2020-08-27 09:47:19 +0200;Add a boolean to _check_shapelike to accept or reject shapes (#4108)
* Add a boolean to _check_shapelike to accept or reject shapes
corresponding to arrays of 0 elements. (Fixes google/jax#3972).

* Added test for failures referenced in issue 3972.

==

jax/lax/lax.py
tests/lax_test.py
==================
1dc71b2f;Benjamin Chetioui;2020-08-27 09:46:32 +0200;[jax2tf] Add testing for add/mul/min/max conversion. (#4142)
* [jax2tf] Add testing for add/mul/min/max conversion.

Only certain types are supported for each of the operations above.
This commit adds previously missing tests to make this explicit.

==

jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
c76b84f6;George Necula;2020-08-27 10:34:53 +0300;Revert "Increase tolerance for CPU test LaxBackedNumpyTests::testCorrCoef (#4080)" (#4151)
This reverts commit 22b92c5122ab5af6f5e4560f9be08f5649ae7653.

We revert this change because the LLVM bug that made us relax the
test tolerance is now fixed.
==

tests/lax_numpy_test.py
==================
57f49b68;George Necula;2020-08-27 10:05:24 +0300;Fix bug in omnistaging_enabler (#4159)
This code was failing with "KeyError: psum" for the tests
"//third_party/py/flax/...". I suspect that the error is due to the
ordering of the omnistaging enablers, changed in #4152.

I am not sure of this fix, but this seemed to be enough for all the
presubmit tests to pass and allow the copybara import.
==

jax/lax/lax_parallel.py
==================
417c9ff7;George Necula;2020-08-27 09:41:16 +0300;Fix pytype error (#4158)

==

jax/random.py
==================
29073be0;Jake Vanderplas;2020-08-26 21:13:33 -0700;cleanup: remove duplicate line (#4156)

==

jax/interpreters/xla.py
==================
f0fb7d09;Tom Hennigan;2020-08-26 22:06:27 +0100;Use omnistaging env var even when not using absl flags for config. (#4152)

==

jax/config.py
jax/core.py
jax/custom_derivatives.py
jax/interpreters/ad.py
jax/interpreters/batching.py
jax/interpreters/partial_eval.py
jax/interpreters/pxla.py
jax/interpreters/sharded_jit.py
jax/interpreters/xla.py
jax/lax/lax.py
jax/lax/lax_control_flow.py
jax/lax/lax_parallel.py
==================
1d939910;Matthew Johnson;2020-08-26 10:21:56 -0700;allow random.choice to accept ndarray input (#4145)
* allow random.choice to accept ndarray `a`

follow-up to #4137 to allow ndarray inputs to be passed

* add jax.random.choice tests to cover ndarray input

* don't use callables in test params

it can mess with pytest-xdist because of hashing by id
==

jax/random.py
tests/random_test.py
==================
01319fb6;Peter Hawkins;2020-08-25 13:05:06 -0400;Speed up and clean up geomspace test. (#4149)
* Speed up and clean up geomspace test.


==

tests/lax_numpy_test.py
==================
4bf3d6e9;Peter Hawkins;2020-08-25 12:53:18 -0400;Delete batching.last. (#4148)
A -1 axis works just as well at head.
==

jax/api.py
jax/interpreters/batching.py
tests/api_test.py
==================
8c8060e1;Peter Hawkins;2020-08-25 12:53:02 -0400;Remove workaround for illegal vmap out_axes. (#4147)

==

jax/interpreters/batching.py
==================
6d54eb56;Jake Vanderplas;2020-08-25 05:47:43 -0700;Do not call asarray() on inputs of jax.random.choice (#4137)

==

jax/random.py
==================
f959219a;Jean-Baptiste Lespiau;2020-08-25 14:39:45 +0200;Rename collectives into "collective operations" for the pmap function. (#4136)
It is just because it serves as the entry point, and this term leads to good Google results, such as https://en.wikipedia.org/wiki/Collective_operation, while the current "collectives" do not.
==

jax/api.py
==================
f4b05bc9;Matthew Johnson;2020-08-25 05:38:41 -0700;make pe.abstract_eval_fun use omnistaging (#4139)

==

jax/interpreters/partial_eval.py
==================
04173b33;Matthew Johnson;2020-08-25 05:38:20 -0700;Merge pull request #4140 from sharadmv/patch-2
Remove frame check assertion in `extend_axis_env`.
==
==================
774b5f68;Sharad Vikram;2020-08-24 21:08:23 -0700;Remove frame check assertion in `extend_axis_env`.

==

jax/core.py
==================
e06a6ab6;Peter Hawkins;2020-08-24 20:21:19 -0400;Add support for negative axes to vmap. (#4111)
* Add support for negative axes to vmap.

* Add workaround for out-of-range vmap axes.
==

jax/api.py
jax/interpreters/batching.py
jax/lax/__init__.py
jax/lax/lax.py
jax/numpy/lax_numpy.py
jax/numpy/linalg.py
jax/util.py
tests/batching_test.py
==================
603f0c1e;Philipp Thölke;2020-08-24 22:50:44 +0200;Fix scan carry types in gradient of complex ODE (#4130)
* Cast t_bar from potential complex to float in ode.py

* Add test case for complex odeint (currently failing)

* Wrap odeint into complex-to-real function in test case

* fixup

Co-authored-by: Stephan Hoyer <shoyer@google.com>
==

jax/experimental/ode.py
tests/ode_test.py
==================
0cc3802b;Benjamin Chetioui;2020-08-24 21:29:22 +0200;Fix documentation of scatter_* operations. (#4138)
* Fix documentation of scatter_* operations.

This commit changes the documentation of the `unique_indices`
parameter to scatter to better capture its intended meaning in
XLA.


==

jax/lax/lax.py
==================
e5c4ccbf;Matthew Johnson;2020-08-21 20:36:02 -0700;Merge pull request #4125 from google/issue4124
make random.choice error when shape isn't sequence
==
==================
56b3688d;Matthew Johnson;2020-08-21 19:58:06 -0700;make random.choice error when shape isn't sequence
fixes #4124

==

jax/random.py
tests/random_test.py
==================
6bed4ee3;Jean-Baptiste Lespiau;2020-08-22 03:44:52 +0200;Temporarily disable jax_jit tests. (#4118)

==

tests/api_test.py
==================
7082105e;Matthew Johnson;2020-08-21 18:35:30 -0700;Merge pull request #4123 from google/only-one-axis-index-primitive
only construct one axis_index_p primitive
==
==================
a62580c1;Matthew Johnson;2020-08-21 17:56:59 -0700;deflake

==

jax/interpreters/pxla.py
==================
66a02b69;Matthew Johnson;2020-08-21 17:43:15 -0700;only construct one axis_index_p primitive
Before this change, there were two versions, one used with omnistaging
and one without. But that made bookkeeping hard and buggy. This change
defines the axis_index_p primitive in core.py. Some of its rules are
still changed when omnistaging is enabled.

==

jax/core.py
jax/interpreters/pxla.py
jax/lax/lax_parallel.py
==================
7e77af4b;Matthew Johnson;2020-08-21 12:34:31 -0700;don't force backend creation in xla_computation (#4121)

==
==================
519d57c4;Matthew Johnson;2020-08-21 12:14:45 -0700;fix bugs

==

jax/api.py
tests/api_test.py
==================
9d733dd7;Wojciech Rzadkowski;2020-08-21 20:19:51 +0200;Doc: change suggested way of starting the profiler (#4120)

==

docs/profiling.md
==================
b2a239ca;Matthew Johnson;2020-08-21 11:10:53 -0700;don't force backend creation in xla_computation

==

jax/api.py
==================
30631459;Matthew Johnson;2020-08-20 14:44:26 -0700;use xla.backend_compile function in pxla.py (#4113)
* use xla.backend_compile function in pxla.py

Not only is this useful for profiling, it also helps us do google-internal logging for the XLA team.
==

jax/api.py
jax/interpreters/pxla.py
jax/interpreters/sharded_jit.py
jax/interpreters/xla.py
tests/gmap_test.py
==================
1e6b8098;Benjamin Chetioui;2020-08-20 20:45:15 +0200;Fixes padding generation for padding == 'SAME' in reduce_window to (#4110)
* Fixes padding generation for padding == 'SAME' in reduce_window to
take window_dilation into account. (Fixes google/jax#3973).

This commit applies the fix suggested by James on the issue,
which is backed by the meaning of padding described on
https://www.tensorflow.org/xla/operation_semantics#reducewindow.

* Added shape tests for reduce_window when stride is 1 in each
direction and padding is 'SAME'.
==

jax/lax/lax.py
tests/lax_test.py
==================
1e8ac248;Mihaela Rosca;2020-08-20 16:46:55 +0200;Add rademacher, maxwell, double_sided_maxwell and weibull_min to jax.random. (#4104)

==

jax/random.py
tests/random_test.py
==================
d978808e;Stephan Hoyer;2020-08-20 00:36:35 -0700;Document the required form of tap_func for host_callback.id_tap (#4100)

==

jax/experimental/host_callback.py
==================
22b593b6;Benjamin Chetioui;2020-08-20 09:05:30 +0200;[jax2tf] General conversion of reduce_window. (#4093)
* [jax2tf] General conversion of reduce_window.

Much like scatter_p, the conversion works as well as the underlying
reduction function (e.g. reduce_window_max is not properly converted
for the int8 dtype, because tf.math.maximum is not defined for int8
tensors).


==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
9ba282f3;Matthew Johnson;2020-08-19 15:51:40 -0700;add axis_index to supported multi-host collectives (#4107)
also make the error message less confusing
==

jax/interpreters/pxla.py
jax/lax/lax_parallel.py
==================
b4efb31f;George Thomas;2020-08-19 19:36:28 +0100;Docs: Fix broken link in quickstart (#4102)

==

docs/notebooks/quickstart.ipynb
==================
9ca10204;Jean-Baptiste Lespiau;2020-08-19 18:39:25 +0200;Add a fast C++ jit codepath. (#4089)
This starts a C++ jit codepath to speed up dispatch time.
Tracing is not supported yet.

Supported features:
- scalar, numpy array and DeviceArray argument support:
  - integer, floats, boolean, and complex scalars arguments are supported.
  - The jax_enable_x64 flag will be used at object-creation type to cast scalars and numpy arrays.
  - The Jax `weak_type` attribute for arguments is supported (DeviceArray and scalars).
- The donate_argnums argument.
- Use an XLA tuple for more than 100 arguments

Unsupported features:
- jax._cpp_jit on methods e.g
    @functools.partial(jax.jit, static_argnums=0)
    def _compute_log_data(self, ...)
      ...
  This is currently not supported by the C++ codepath, because "self" won't be automatically added.
- disable_jit.
==

jax/api.py
jax/lib/__init__.py
tests/api_test.py
==================
5135fd17;Roy Frostig;2020-08-19 07:48:25 -0700;fix jaxpr util test under enable_x64

==

tests/jaxpr_util_test.py
==================
b8922362;Matthew Johnson;2020-08-18 21:04:14 -0700;remove check for TypedJaxpr literals arent tracers (#4096)
In the original usage of TypedJaxpr, literals could not be tracers
because they were only produced by initial-style transformations of
jaxprs. But now TypedJaxpr is used in several other ways, e.g. in
make_jaxpr, and moreover its avals are redundant. It should probably be
renamed ClosedJaxpr since it mainly serves to package a jaxpr together
with its constant arrays. This check was limiting the utility of
TypedJaxpr, and it was only added relatively recently anyway.
==

jax/core.py
==================
8e166adc;Peter Hawkins;2020-08-18 21:24:41 -0400;Unbreak jaxlib build. (#4098)

==

build/BUILD.bazel
==================
8cc9579c;Roy Frostig;2020-08-18 17:03:43 -0700;check path prefixes using os.path instead of string comparisons

==

jax/traceback_util.py
==================
d778a6d0;Roy Frostig;2020-07-20 19:04:43 -0700;move experimental.jaxpr_stats to jaxpr_util

==

jax/jaxpr_util.py
tests/jaxpr_util_test.py
==================
908d54ab;Roy Frostig;2020-06-22 16:01:03 -0700;utilities to collect summary statistics of jaxprs

==

jax/experimental/jaxpr_stats.py
tests/jaxpr_stats_test.py
==================
d70976c1;Jake Vanderplas;2020-08-18 16:31:54 -0700;Cleanup: reduce redundant code (#4095)

==

jax/lax/lax.py
==================
afeefa6f;Alex Alemi;2020-08-18 18:49:29 -0400;Add typing and namedtuple to `optimizers.py`, improve documentation. (#3570)

==

jax/experimental/optimizers.py
jax/experimental/optix.py
==================
29f7fa75;gaurav pathak;2020-08-18 16:40:45 -0400;Add implementation of jax.numpy.trim_zeros (#4027)

==

docs/jax.numpy.rst
jax/numpy/__init__.py
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
29aa9bfc;Jake Vanderplas;2020-08-18 10:17:38 -0700;Cleanup: avoid jnp.prod & np.prod on array shapes (#4086)

==

benchmarks/pmap_benchmark.py
jax/api.py
jax/nn/initializers.py
jax/random.py
jax/test_util.py
jax/third_party/numpy/linalg.py
tests/host_callback_test.py
tests/lax_autodiff_test.py
tests/lax_numpy_test.py
tests/lax_test.py
tests/pmap_test.py
tests/scipy_ndimage_test.py
tests/sharded_jit_test.py
==================
decd7600;Stephan Hoyer;2020-08-18 09:40:57 -0700;Add experimental __array_module__ method (#4076)
* Add experimental __array_module__ method

xref https://github.com/google/jax/issues/1565

`__array_module__` (see [NEP 37](https://numpy.org/neps/nep-0037-array-module.html))
is an experimental alternative to `__array_function__` and `__array_ufunc__`
for "duck array" compatibility with NumPy that promises to be much less
invasive.

Example usage:

```python
import numpy as np

def duckarray_stack(arrays):
    """This "stack" function should work with any array library, including JAX."""
    npx = np.get_array_module(*arrays)
    arrays = [npx.asarray(arr) for arr in arrays]
    shapes = {arr.shape for arr in arrays}
    if len(shapes) != 1:
        raise ValueError('all input arrays must have the same shape')
    expanded_arrays = [arr[npx.newaxis, ...] for arr in arrays]
    return npx.concatenate(expanded_arrays, axis=0)
```

Support for this protocol has *not* yet been implemented in NumPy, but it can
be tested with https://github.com/seberg/numpy-dispatch.

My reasoning for merging it into JAX (on an experimental basis with no
guarantees, of course) is that:

1. It's not invasive -- the implementation is small and self-contained.
2. No backwards compatibility issues. Unlike `__array_function__` and
   `__array_ufunc__`, `__array_module__` will always require an explicit
   opt-in by libraries that use it by calling `get_array_module()`.
2. Other NumPy developers
   [want evidence](https://github.com/numpy/numpy/pull/16935#issuecomment-673951287)
   that this is actually feasible.
3. Scikit-Learn developers like @thomasjpfan are interested in exploring
   supporting scikit-learn on top of NumPy-like libraries like JAX, and
   experimental support for this protocol will make that easier.

Note: this PR does add `numpy-dispatch` as a optional testing requirement in
order to verify that this works. If desired, we could remove this from CI, but
installing numpy-dispatch (and its build requirement Cython) appears to only
add a few seconds of build time.

* don't explicitly list cython

* remove UnshpaedArray from _JAX_ARRAY_TYPES

* Remove incorrect note about metaclasses

* remove unnecessary numpy_dispatch.ensure_dispatching()
==

.github/workflows/ci-build.yaml
jax/core.py
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
36f3a369;Adam Paszke;2020-08-18 12:02:28 +0200;Separate axis splitting from collective handling (#4082)
This makes the vmap collective handling a bit more flexible and allowed
me to add ppermute support.
==

jax/interpreters/batching.py
jax/lax/lax_parallel.py
tests/batching_test.py
==================
ace23fa8;Benjamin Chetioui;2020-08-18 11:01:13 +0200;[jax2tf] Added tests for reduce_window translation (#4062)
* [jax2tf] Added tests for reduce_window translation (WIP)
* Added other non-floating types to the tests.
==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
8c2ee372;Jean-Baptiste Lespiau;2020-08-18 10:43:52 +0200;Prior refactoring before the C++ jax.jit. (#4045)

==

tests/api_test.py
==================
2ab6b42a;Jean-Baptiste Lespiau;2020-08-18 07:58:43 +0200;Use pytree defined in tensorflow. (#4087)
It also adds some tests on the scalar C++ conversion.

==

WORKSPACE
build/install_xla_in_source_tree.sh
jax/lib/__init__.py
jaxlib/BUILD
jaxlib/pytree.cc
jaxlib/pytree.h
jaxlib/pytree_extension.cc
jaxlib/version.py
tests/jax_jit_test.py
==================
fe69d3c6;Roy Frostig;2020-08-14 18:52:55 -0700;always deref all locals that indirectly reach stack frames in the exception-reraise handler

==

jax/traceback_util.py
==================
dbca9e68;Roy Frostig;2020-08-14 13:22:20 -0700;unrevert #3674 (revert #3791)

==

jax/api.py
jax/traceback_util.py
tests/errors_test.py
tests/loops_test.py
==================
1ba4e06c;Adam Paszke;2020-08-17 20:11:43 +0200;Initial version of gmap (#4006)
Co-autored-by: Matthew Johnson <mattjj@google.com>
==

jax/experimental/general_map.py
tests/gmap_test.py
==================
4c22e012;Benjamin Chetioui;2020-08-17 16:32:34 +0200;[jax2tf] Explictly raise an error when attempting to convert _select_and_scatter_add_p. (#4084)

==

jax/experimental/jax2tf/jax2tf.py
==================
ec90c358;Benjamin Chetioui;2020-08-17 12:57:41 +0200;[jax2tf] Fix bfloat16 bug in select_and_gather_add conversion. (#4058)
* [jax2tf] Fix bfloat16 bug in select_and_gather_add conversion.

This fix makes it possible to run bfloat16 tests for the jax2tf
conversion of select_and_gather_add.

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
c7aff1da;George Necula;2020-08-17 12:53:18 +0300;Revert "Use pytree from xla_client. (#4063)" (#4081)
This reverts commit d8de6b61411179dcd2f63d7639bbcd69b30ac15f.

Tryting to revert because it seems that this produces test
failures in Google.
==

WORKSPACE
build/BUILD.bazel
build/install_xla_in_source_tree.sh
jax/lib/__init__.py
jaxlib/BUILD
jaxlib/pytree.cc
jaxlib/pytree.h
jaxlib/pytree_extension.cc
jaxlib/version.py
==================
22b92c51;George Necula;2020-08-17 09:50:47 +0300;Increase tolerance for CPU test LaxBackedNumpyTests::testCorrCoef (#4080)

==

tests/lax_numpy_test.py
==================
91207011;Matthew Johnson;2020-08-16 20:00:40 -0700;allow xla_computation to psum a constant (#4078)
* allow xla_computation to psum a constant

* allow axis_env to be None
==

jax/api.py
tests/api_test.py
==================
8232f2de;Matthew Johnson;2020-08-15 22:55:18 -0700;adapt _TempAxisName for unhashable objs (#4077)
adapt _TempAxisName for unhashable objs
==

jax/api.py
==================
16ab9cb8;James Bradbury;2020-08-15 15:07:08 -0700;support multi-host pmap with omnistaging (#4075)

==

jax/interpreters/pxla.py
==================
1316562b;Philipp Thölke;2020-08-15 17:47:28 +0200;Canonicalize result dtype to fix double precision problem in ldexp (#4069)

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
1dbdaac7;George Necula;2020-08-15 08:55:02 +0300;[jax2tf] avoid import errors when omnistaging is enabled (#4072)
* [jax2tf] avoid import errors when omnistaging is enabled

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
9ab07d85;James Bradbury;2020-08-14 22:54:36 -0700;support axis_index_groups in psum(const) (#4070)
* support axis_index_groups in psum(const)

* add test for psum(constant, axis_index_groups)

* rm trailing whitespace

* Update lax_parallel.py
==

jax/lax/lax_parallel.py
tests/pmap_test.py
==================
394a33c8;Ryan Sepassi;2020-08-14 13:05:58 -0700;Add `in_parts` and `out_parts` optional arguments `jax.xla_computation`. (#4055)
PR #3771 redux (reverted in #3780)

Co-authored-by: Skye Wanderman-Milne <skyewm@google.com>
==

jax/api.py
tests/api_test.py
==================
8923bab5;Jake Vanderplas;2020-08-14 12:53:02 -0700;fixes for pytype (#4068)

==

jax/core.py
jax/lib/__init__.py
==================
b44a1bac;Mathis Gerdes;2020-08-14 21:05:46 +0200;Note flush-denormal-to-zero behavior in nextafter. (#4049)
Since imports of functions from lax.py in lax_numpy.py previously
didn't copy docstrings, add option to extract docstring from the
lax function. To avoid duplication of the short description,
discard first line of the lax function's docstring, and pass
the rest as lax_description to _wraps.
==

jax/lax/lax.py
jax/numpy/lax_numpy.py
==================
c311fb77;Jake Vanderplas;2020-08-14 11:51:19 -0700;Make it possible to override raise_to_shaped for new types (#4064)

==

jax/core.py
==================
b75bae64;Adam Paszke;2020-08-14 18:22:04 +0200;Initial version of vmap collectives (#4005)
This adds support for the basic (associative and commutative)
collectives to vmap. Supporting more complex collectives will
require some more complicated rules. Also, at the moment it is not
possible to use collectives inside `custom_vjp` rules which we might
want to fix in the future.

This feature is also omnistaging-only.

Co-authored-by: Matthew Johnson <mattjj@google.com>
==

jax/api.py
jax/core.py
jax/custom_derivatives.py
jax/interpreters/batching.py
jax/interpreters/partial_eval.py
jax/interpreters/pxla.py
jax/lax/lax_parallel.py
tests/batching_test.py
tests/pmap_test.py
==================
d8de6b61;Jean-Baptiste Lespiau;2020-08-14 17:44:03 +0200;Use pytree from xla_client. (#4063)

==

WORKSPACE
build/BUILD.bazel
build/install_xla_in_source_tree.sh
jax/lib/__init__.py
jaxlib/BUILD
jaxlib/pytree.cc
jaxlib/pytree.h
jaxlib/pytree_extension.cc
jaxlib/version.py
==================
bd14f234;Benjamin Chetioui;2020-08-14 12:24:57 +0200;[jax2tf] Fix bfloat16 failures on CPU/GPU with latest tf-nightly. (#4060)

==

jax/experimental/jax2tf/tests/primitives_test.py
==================
aea64e8b;Benjamin Chetioui;2020-08-14 12:04:43 +0200;[jax2tf] Enable bfloat16 tests (#4057)
* [jax2tf] Enable tests for bfloat16 FFT.

* Activated bfloat16 tests in test_unary_elementwise.

* Activated bfloat16/float16 tests for erf_inv.

* Made requested changes on the PR.

* Added documentation about why betainc doesn't work.
==

jax/experimental/jax2tf/tests/primitives_test.py
==================
41f1eb41;Benjamin Chetioui;2020-08-14 09:58:41 +0200;[jax2tf] Added note about nextafter support in TensorFlow. (#4056)
The TF implementation of nextafter only supports float32/64 params.
==

jax/experimental/jax2tf/tests/primitives_test.py
==================
170b63a1;Benjamin Chetioui;2020-08-14 09:28:01 +0200;[jax2tf] Refactor test_binary_elementwise. (#4043)
* [jax2tf] Reformulate test_binary_elementwise.

* igamma/igammac are unsupported by JAX on (b)float16
* rem/atan2 have missing TF kernels for (b)float16
* nextafter is unsupported for (b)float16
* reactivated bfloat16 tests for the other operations
* Changed error message for rem/atan2 (b)float16 support.
==

jax/experimental/jax2tf/tests/primitives_test.py
==================
822344d6;Matthew Johnson;2020-08-13 15:25:39 -0700;add placeholder disable_omnistaging method (#4054)

==

jax/config.py
==================
df6a3da4;Roy Frostig;2020-08-13 13:46:22 -0700;add scan unrolling to a previous changelog entry

==

docs/CHANGELOG.rst
==================
428217b1;Skye Wanderman-Milne;2020-08-13 12:10:47 -0700;Update auto jaxlib install to use nvcc CUDA version instead of nvidia-smi. (#4050)
The CUDA version reported by `nvidia-smi` is based on the driver
version, not the runtime/toolkit version, and may be higher than the
toolkit version since the driver supports older runtimes. `nvcc`,
which is also installed as part of the CUDA toolkit, will correctly
report the right CUDA version to target.

Fixes #3984.
==

README.md
==================
7cf236f8;George Necula;2020-08-13 15:20:07 +0300;[jax2tf] Clean up test_qr and disable (temporarily) some tests for shirt_right (#4044)
on TPU

This is a follow-up from #4032 that enabled some more integer types for TPU
for JAX.

There are still some silent errors to investigate for shift_right on TPU.
==

jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
3458f1fc;Benjamin Chetioui;2020-08-13 12:27:16 +0200;[jax2tf] Change np.array dtype to jnp.float32 when target dtype is bfloat16. (#3959)
* Change np.array dtype to jnp.float32 when target dtype is bfloat16.

This ensures that the conversion for tf.convert_to_tensor is well
defined without losing precision.

Fixes #3942.

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/primitives_test.py
jax/experimental/jax2tf/tests/tf_test_util.py
==================
206d2f98;George Necula;2020-08-13 13:02:22 +0300;[host_callback] Fix handling of params[donated_invars] (#4040)
There was some confusion when rewriting xla_call primitives and
the donated_invars was not set to be equal to the length of the
invars.

Fixes: #4015
Fixes: #3863
==

jax/experimental/host_callback.py
tests/host_callback_test.py
==================
34f90f55;Roy Frostig;2020-08-12 10:09:31 -0700;remove auto-parallelization transformation

==

jax/api.py
jax/interpreters/parallel.py
jax/lax/lax_parallel.py
tests/parallel_test.py
==================
6e4ec7cb;Ethan Luo Yicheng;2020-08-12 19:52:42 +0100;Fix broadcasting in random.uniform and randint. (#4035)

==

jax/random.py
tests/random_test.py
==================
a169743f;Peter Hawkins;2020-08-12 10:02:35 -0400;Enable s8/u8/s16/u16 types on TPU in tests. (#4032)

==

jax/test_util.py
==================
ece05d28;George Necula;2020-08-12 09:20:26 +0300;[host_callback] Add support for custom gradients inside control-flow (#4029)
* [host_callback] Add support for custom gradients inside control-flow

Specifically, add support for rewriting JAXPR that contains
custom_vjp_call_jaxpr_p and custom_jvp_call_jaxpr_p.

Fixes #4015.

==

jax/experimental/host_callback.py
tests/host_callback_test.py
==================
c564aca7;Matthew Johnson;2020-08-11 20:36:51 -0700;skip more ode tests on gpu, b/c slow to compile (#4028)

==

tests/ode_test.py
==================
5fcca184;Jake Vanderplas;2020-08-11 11:12:26 -0700;Fix type promotion in np.clip (#4023)

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
fe9f264b;Cambridge Yang;2020-08-11 10:09:54 -0400;cumulative jet rules (#4000)

==

jax/experimental/jet.py
tests/jet_test.py
==================
1e077129;Jamie Townsend;2020-08-11 16:09:36 +0200;Fix typos in api.py docstrings (#4021)

==

jax/api.py
==================
cd54dd97;Adam Paszke;2020-08-11 11:45:58 +0200;Implement the invertible decorator in terms of custom_vjp (#3957)
This simplifies the implementation significantly, as we can piggyback
off of all the logic for custom derivatives. For example, the previous
implementation didn't support differentiating with respect to a subset
of function parameters, but the new one does.
==

jax/api.py
jax/interpreters/invertible_ad.py
jax/interpreters/partial_eval.py
tests/api_test.py
==================
0b99ca89;George Necula;2020-08-11 12:39:54 +0300;[jax2tf] Disable the CI tests for jax2tf. (#4019)
We do this to see if this reduces the incidence of errors fetching
the tf-nightly package. These tests are being run when we import
the code in Google.
==

.github/workflows/ci-build.yaml
build/test-requirements.txt
==================
ebc5e8bf;George Necula;2020-08-11 10:21:38 +0300;[jax2tf] Change the tests that assert failure in TF (#4018)
We used to have some tests that asserted for failures in TF after conversion.
The idea was for the tests to be a living record of what is failing. The
problem is that this makes it hard to fix those TF failures, because one
would have to fix at the same time the test.

This change just ensures that we tolerate TF exceptions without actually
ensuring that they arise.
==

jax/experimental/jax2tf/tests/primitives_test.py
jax/experimental/jax2tf/tests/savedmodel_test.py
==================
55913163;George Karpenkov;2020-08-10 21:30:01 -0700;Restrict JAX2TF tests to cases supported by TF2 ops. (#4010)
The test is currently running on XLA devices, which support more types.
With deprecation and removal of XLA devices, it will run on "stock" TF
device, which does not support fp16 for some operations.
==

jax/experimental/jax2tf/tests/primitives_test.py
==================
d100327b;David Majnemer;2020-08-10 20:48:20 -0700;Remove type restrictions (#4017)
We support half16 on TPU
==

tests/dtypes_test.py
==================
09d8ac14;Matthew Johnson;2020-08-10 20:48:03 -0700;use fewer internal APIs in custom interp notebook (#4016)

==

docs/notebooks/Writing_custom_interpreters_in_Jax.ipynb
==================
265c3faa;David Majnemer;2020-08-10 18:33:15 -0700;Remove type restrictions (#4011)
We support s8, u8, s16, u16, half16 on TPU
==

tests/random_test.py
==================
6a3b9205;Matthew Johnson;2020-08-10 18:11:57 -0700;make make_jaxpr work on tracer example args (#4014)
(don't use xla.abstractify)
==

jax/api.py
==================
eb086f9b;David Majnemer;2020-08-10 13:15:34 -0700;Remove type restrictions (#4009)
dynamic_slice and dynamic_update_slice work with S16 types on TPU.
==

tests/lax_test.py
==================
d551cec6;Jake Vanderplas;2020-08-10 10:10:59 -0700;Add Bessel functions in jax.numpy & jax.scipy.special (#4007)

==

docs/jax.numpy.rst
docs/jax.scipy.rst
jax/numpy/__init__.py
jax/numpy/lax_numpy.py
jax/scipy/special.py
tests/lax_numpy_test.py
tests/lax_scipy_test.py
==================
89e8a088;Jamie Townsend;2020-08-10 19:09:34 +0200;Fix warnings in pmap_test.py (#3977)
Also add note to developer documentation re: testing pmap.
==

docs/developer.rst
tests/pmap_test.py
==================
dd304f62;Jake Vanderplas;2020-08-10 08:41:54 -0700;Add jax.numpy.invert (#3998)

==

docs/jax.numpy.rst
jax/numpy/__init__.py
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
d46ea969;Matthew Johnson;2020-08-10 07:20:09 -0700;add helper for flax to be omnistaging-compatible (#4004)

==

jax/interpreters/partial_eval.py
==================
ea88c55f;Scott Linderman;2020-08-09 11:32:45 -0700;Fixes and tests for jax.random.multivariate_normal (#4002)
* Fix bug #3997, change `jax.random.multivariate_normal` to handle batches of covariance matrices.  It works as long as mean and covariance are broadcast-compatible, as specified in the docstring.

* Fix bug in multivariate_normal shape checking

Minor bug: should be checking for compatibility of `shape`, `mean`, and the the last two dimensions of the _covariance_ matrix.

* Add test for multivariate_normal shapes

This test checks that `jax.random.multivariate_normal` produces the expected output shape for various combinations of event dimension and `mean`, `covariance`, and `shape` shapes.

* Fix linter issues in tests/random_test.py

Trimming trialing whitespace and 80 char limit.

* Really trimming whitespace in tests/random_test.py

Arg. Have to fix my editor to do this automatically.
==

jax/random.py
tests/random_test.py
==================
038c85da;John Aslanides;2020-08-08 17:22:54 +0100;Improve type annotations for `jit` and `vmap`. (#3938)

==

jax/api.py
jax/random.py
==================
fb02cc80;Justin Lebar;2020-08-07 11:47:05 -0700;Update docs requirements. (#3969)

==

docs/requirements.txt
==================
481b6f15;Jake Vanderplas;2020-08-07 11:28:03 -0700;github actions: cache pypi dependencies (#3990)

==

.github/workflows/ci-build.yaml
==================
da51f73e;Jake Vanderplas;2020-08-07 10:31:46 -0700;Add nbytes property to jax.numpy arrays. (#3988)

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
b756f294;Benjamin Chetioui;2020-08-07 17:22:17 +0200;[jax2tf] implementation of select_and_gather_add conversion. (#3987)
* [jax2tf] First draft of select_and_gather_add conversion.

The case where we need to reduce precision for packing is left
unimplemented, as packing is anyway a temporary hack until XLA
implements ReduceWindow on tuples (see b/73062247).

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
jax/lax/lax.py
==================
e39420b5;George Necula;2020-08-07 13:30:26 +0300;[jax2tf] Another attempt to work around the nested XLA compilation bug (#3965)
* [jax2tf] Another attempt to work around the nested compilation bug for XLA

This time we abandon trying to force compilation, and instead we
use XlaDynamicSlice.

==

jax/experimental/jax2tf/README.md
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
jax/experimental/jax2tf/tests/savedmodel_test.py
==================
4af7d2a4;Benjamin Chetioui;2020-08-07 09:03:59 +0200;[jax2tf] First draft of SVD conversion. (#3966)
* [jax2tf] First draft of SVD conversion.
==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
jax/experimental/jax2tf/tests/tf_test_util.py
==================
a98103f6;Justin Lebar;2020-08-06 12:57:19 -0700;Add missing functions to jax.numpy docs (#3981)

==

docs/jax.numpy.rst
==================
816bcd71;Stephan Hoyer;2020-08-06 09:39:33 -0700;Fix jax.checkpoint in API docs (#3980)
On the index API doc page, it turns out functions need to be listed *twice* to
appear.
==

docs/jax.rst
==================
09f4339c;Jamie Townsend;2020-08-06 18:37:32 +0200;Rm two unused lines from lax_parallel.psum_bind (#3978)

==

jax/lax/lax_parallel.py
==================
49d16363;Trevor Cai;2020-08-06 17:35:37 +0100;Disable SPMD partitioning for pmaps that don't use it. (#3967)
There seems to be an issue with some jobs that extensively use psum and
other collectives when running jobs compiled with SPMD partitioning.

This PR disables SPMD partitioning for jobs that only have one partition
as a workaround.
==

jax/interpreters/pxla.py
==================
56a55b17;Peter Hawkins;2020-08-06 12:00:56 -0400;Fix formatting problem in GPU memory allocation docs. (#3979)

==

docs/gpu_memory_allocation.rst
==================
2277728e;Justin Lebar;2020-08-05 18:37:29 -0700;Add numpy.vectorize to list of numpy fns in docs (#3968)

==

docs/jax.numpy.rst
==================
2e873b7d;Julius Kunze;2020-08-06 03:36:46 +0200; Fix jnp.right_shift incorrect on unsigned ints (#3958)

==

jax/core.py
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
15a9a70b;Benjamin Chetioui;2020-08-05 15:41:43 +0200;[jax2tf] First draft for the conversion of FFTs. (#3871)
* [jax2tf] First draft for the conversion of FFTs.

Co-authored-by: Benjamin Chetioui <bchetioui@google.com>
==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
60db0a07;Adam Paszke;2020-08-04 12:41:30 +0000;Improve a comment and a docstring in partial_eval

==

jax/interpreters/partial_eval.py
==================
98a511a2;Benjamin Chetioui;2020-08-05 12:58:30 +0200;Parameterize geev/eig to allow for not computing the left/right eigenvectors (#3882)
* Add options to compute L/R eigenvectors in geev.

The new arguments are by default set to True to ensure backwards
compatibility between jaxlib and jax.

* Reformulate eig-related operations based on the new geev API.
* Change jobvl/jobvr to a new variable in jaxlib, and fix lax_linalg.eig to account for that.
* Maintain jaxlib.lapack.eig function signature backwards compatible.

The rationale is to start by only updating lapack.pyx in a way that is
backward-compatible with JAX before updating the calls to lapack.geev in
a subsequent PR.
==

jaxlib/lapack.pyx
==================
7065d071;Benjamin Chetioui;2020-08-05 12:35:46 +0200;Fix svd_p to stop returning garbage values of u/vt when compute_uv ==… (#3895)
* Fix svd_p to stop returning garbage values of u/vt when compute_uv == False.

The custom call made by svd_p does not compute u and vt when
compute_uv is set to False. Returning them using the primitive
means that it is up to the caller to throw away these values.

* Added documentation to svd.
==

jax/lax_linalg.py
==================
edbacf6f;Jake Vanderplas;2020-08-04 14:46:39 -0700;post-review comment on jnp.interp (#3961)

==

jax/numpy/lax_numpy.py
==================
d6f131aa;Jake Vanderplas;2020-08-04 12:39:04 -0700;implement jax.numpy.interp (#3949)

==

docs/jax.numpy.rst
jax/numpy/__init__.py
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
d4d7323a;Adrià Puigdomènech;2020-08-04 15:45:03 +0200;Avoid re-flattening in jit() when no donate_argnums are present. (#3955)
Following the same special-casing of static_argnums, this should provide a speedup specially when the number of arguments provided is large.
==

jax/api.py
==================
b104d1ef;George Necula;2020-08-04 14:21:50 +0300;[jax2tf] Refine and document the mechanism to avoid nested XLA compil… (#3848)
* [jax2tf] Refine and document the mechanism to avoid nested XLA compilation.

==

jax/experimental/jax2tf/README.md
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/primitives_test.py
jax/experimental/jax2tf/tests/savedmodel_test.py
jax/experimental/jax2tf/tests/tf_test_util.py
==================
9fe7a3c3;George Necula;2020-08-04 13:20:30 +0300;Revert "Avoid re-flattening in jit() when no donate_argnums are present. (#3945)" (#3953)
This reverts commit 4e873f417ab4f3e68a102548167f2b0a005edfad.

See comments in #3945 about the failure.
==

jax/api.py
==================
ea6d1daf;Benjamin Chetioui;2020-08-04 09:24:53 +0200;[jax2tf] First draft of conversion of population_count. (#3890)
tf.raw_ops.PopulationCount returns a Tensor with elements of type
uint8. In JAX, the type of the result is the same as the type of
the input, hence the need to use tf.cast in the conversion
function.
==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
16c63e0c;Skye Wanderman-Milne;2020-08-03 15:15:51 -0700;Mention multi-host behavior in axis_index docstring. (#3948)

==

jax/interpreters/pxla.py
==================
4e873f41;Adrià Puigdomènech;2020-08-04 00:13:28 +0200;Avoid re-flattening in jit() when no donate_argnums are present. (#3945)
Following the same special-casing of static_argnums, this should provide a speedup specially when the number of arguments provided is large.
==

jax/api.py
==================
1b3dd65d;Peter Hawkins;2020-08-03 16:50:20 -0400;Avoid lexically capturing the train_images value in MNIST VAE example. (#3947)
* Avoid lexically capturing the train_images value in MNIST VAE example.

This has the effect of baking in the training dataset as a constant, something that LLVM does not like that much.

* Add device_put to images.
==

examples/mnist_vae.py
==================
e0ebb144;Jake Vanderplas;2020-08-03 12:32:32 -0700;Add switch and associative_scan to lax docs (#3946)

==

docs/jax.lax.rst
==================
1229f44a;Jake Vanderplas;2020-08-03 12:31:52 -0700;add jnp.piecewise implementation (#3943)

==

docs/jax.numpy.rst
jax/numpy/__init__.py
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
1d61cfff;Peter Hawkins;2020-08-03 12:39:20 -0400;Fix build error in pytree extension. (#3944)

==

jaxlib/pytree.cc
==================
11afb3b6;Jean-Baptiste Lespiau;2020-08-03 17:31:34 +0200;Extract pytree as it's own library. (#3909)

==

jaxlib/BUILD
jaxlib/pytree.cc
jaxlib/pytree.h
jaxlib/pytree_extension.cc
==================
7de784af;Julius Kunze;2020-08-03 17:17:48 +0200;Fix _CheckAgainstNumpy arg order (#3935)

==

tests/lax_numpy_test.py
tests/lax_test.py
tests/scipy_ndimage_test.py
==================
03df35a9;Jean-Baptiste Lespiau;2020-08-03 17:04:46 +0200;Remove DeviceValue. (#3941)
It is currently only extended by DeviceArray, thus there is no need for 2 objects when we can have a single one.
==

jax/interpreters/xla.py
jax/lax/lax.py
jax/numpy/lax_numpy.py
tests/api_test.py
==================
8a8bb702;John Aslanides;2020-08-01 21:33:11 +0100;Catch invalid (negative) in/out axes in vmap. (#3926)
Catch invalid (negative) in/out axes in vmap.
==

jax/api.py
==================
3b68fab2;Stephen Tu;2020-08-01 14:12:59 -0400;Update faq.rst (#3934)

==

docs/faq.rst
==================
4d99caa2;Julius Kunze;2020-08-01 17:37:31 +0200;Fix polynomial tests (#3933)

==

tests/polynomial_test.py
==================
ff96de93;Matthew Johnson;2020-07-31 22:20:58 -0700;add dummy eval context (#3932)

==

jax/core.py
==================
965077f8;Jake Vanderplas;2020-07-31 17:16:28 -0700;lax & jax.numpy: Support complex inputs for trig & hyperbolic functions (#3930)

==

jax/lax/lax.py
tests/lax_numpy_test.py
tests/lax_test.py
==================
ff62bc93;Jake Vanderplas;2020-07-31 16:28:25 -0700;Support unsigned types in jnp.gcd() & jnp.lcm() (#3916)

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
cd64d2ee;Roy Frostig;2020-07-30 14:02:48 -0700;typecheck scan and cond params

==

jax/core.py
jax/lax/lax_control_flow.py
tests/lax_control_flow_test.py
==================
4853eb10;Jean-Baptiste Lespiau;2020-08-01 00:15:51 +0200;Fix static_argnums in xla_computation. (#3924)

==

jax/api.py
tests/api_test.py
==================
843d7101;Matthew Johnson;2020-07-31 15:11:01 -0700;allow mask to return output logical shape (#3929)
When the `mask` argument `out_shape` is not provided, or when it has
value `None`, return the output logical shape to the user.
==

jax/api.py
jax/interpreters/masking.py
tests/masking_test.py
==================
0ec1e251;Jake Vanderplas;2020-07-30 23:03:46 -0700;Fix jnp.tile for cases with zero reps (fixes #3919) (#3922)

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
146cf49f;Matthew Johnson;2020-07-30 22:27:01 -0700;delay backend check for xla_computation (#3920)

==

jax/interpreters/xla.py
==================
abfd3357;Matthew Johnson;2020-07-30 22:19:29 -0700;update version and changelog for pypi (#3921)
* update version and changelog for pypi

* fix typos
==

docs/CHANGELOG.rst
jax/version.py
==================
e8c7d9e2;Justin Lebar;2020-07-30 16:52:44 -0700;s/Three-fry/Threefry/ (#3918)
Per http://www.thesalmons.org/john/random123/
==

docs/notebooks/Common_Gotchas_in_JAX.ipynb
==================
ca8dc20a;Jake Vanderplas;2020-07-30 14:37:13 -0700;make jnp.abs() work for unsigned inputs (#3914)

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
4236eb2b;Matthew Johnson;2020-07-30 12:59:36 -0700;omnistaging, under a flag and disabled by default (#3370)
This change, when enabled, stages out all primitive calls in the dynamic
scope of a jitted, pmapped, or control flow function, rather than only
staging out based on data dependence. One improvement is that jitted
functions can consume less memory, by avoiding instantiating large
constants at trace time, and cause less memory fragmentation as well. It
also simplifies several internals.

See https://github.com/google/jax/pull/3370 fo more information.
==

.github/workflows/ci-build.yaml
jax/ad_util.py
jax/api.py
jax/config.py
jax/core.py
jax/custom_derivatives.py
jax/experimental/callback.py
jax/experimental/doubledouble.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jet.py
jax/experimental/loops.py
jax/experimental/ode.py
jax/interpreters/ad.py
jax/interpreters/batching.py
jax/interpreters/invertible_ad.py
jax/interpreters/parallel.py
jax/interpreters/partial_eval.py
jax/interpreters/pxla.py
jax/interpreters/sharded_jit.py
jax/interpreters/xla.py
jax/lax/__init__.py
jax/lax/lax.py
jax/lax/lax_control_flow.py
jax/lax/lax_parallel.py
jax/lib/xla_bridge.py
jax/linear_util.py
jax/nn/initializers.py
jax/numpy/lax_numpy.py
jax/numpy/linalg.py
jax/random.py
mypy.ini
tests/api_test.py
tests/core_test.py
tests/host_callback_test.py
tests/infeed_test.py
tests/lax_control_flow_test.py
tests/lax_numpy_test.py
tests/lax_scipy_test.py
tests/lax_test.py
tests/loops_test.py
tests/masking_test.py
tests/metadata_test.py
tests/multi_device_test.py
tests/nn_test.py
tests/parallel_test.py
tests/pmap_test.py
==================
0cbb4279;Jake Vanderplas;2020-07-30 11:07:56 -0700;Cleanup: make skip_if_unsupported_type more robust (#3912)

==

jax/test_util.py
tests/linalg_test.py
==================
9d3d0919;Matthew Johnson;2020-07-30 10:48:35 -0700;Merge pull request #3911 from google/fix-jax2tf-test-deps-again
another attempt at fixing github ci
==
==================
bf041fbd;Tom Hennigan;2020-07-30 18:31:17 +0100;Compare treedefs by `num_leaves` not `traversal_` in `tree_transpose`. (#3659)
In general for a `kCustom` node it is not guaranteed that `a.compose(b)` will
have the same `traversal_` as some structure `c` (which is the composition of
`a+b`). We have a real world example in deepmind/dm-haiku with our FlatMapping
type and I've put a simpler example in `tree_util_tests.py`.

Since this test seems largely to be for input validation I've changed this to
compute the expected number of leaves (which is cheaper than using compose as
the previous implementation did) which will catch common errors and is
guaranteed to work for any well formed pytree (additionally I had to fix the
leaf and node count for composed pytrees which were wrong at HEAD).
==

jax/tree_util.py
jaxlib/pytree.cc
tests/tree_util_tests.py
==================
64ec4443;Matthew Johnson;2020-07-30 10:17:00 -0700;another attempt at fixing github ci

==

build/test-requirements.txt
==================
ccc96004;Matthew Johnson;2020-07-30 08:19:35 -0700;attempt to fix CI by updating jax2tf test dep (#3910)

==
==================
61f72853;Jake Vanderplas;2020-07-30 08:19:11 -0700;Improve dtype & test coverage for jnp.fmod (#3898)

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
420e8422;Matthew Johnson;2020-07-30 08:08:48 -0700;attempt to fix CI by updating jax2tf test dep

==

build/test-requirements.txt
==================
b3806ce8;Matthew Johnson;2020-07-30 00:42:32 -0700;add placeholder enable_omnistaging method (#3907)

==

jax/config.py
==================
de645c5b;Matthew Johnson;2020-07-29 22:32:49 -0700;update version and changelog for pypi (#3906)

==

docs/CHANGELOG.rst
jax/version.py
==================
c8771e12;Matthew Johnson;2020-07-29 21:44:03 -0700;add omnistaging flag placeholder (#3904)

==

jax/config.py
==================
c28a7111;Jake Vanderplas;2020-07-29 15:32:44 -0700;Cleanup: pass function name rather than function object (#3897)

==

jax/numpy/lax_numpy.py
==================
b0ef4838;Stephan Hoyer;2020-07-29 15:31:02 -0700;Fixes to test_scipy_optimize.py for Google internal tests (#3902)

==

tests/scipy_optimize_test.py
==================
242b3249;Stephan Hoyer;2020-07-29 14:22:21 -0700;Add missing license headers (#3899)
Oops!
==

jax/scipy/optimize/__init__.py
jax/scipy/optimize/_bfgs.py
jax/scipy/optimize/_line_search.py
jax/scipy/optimize/_minimize.py
==================
02009e0c;Joshua George Albert;2020-07-29 23:14:40 +0200;BFGS algorithm (#3101)
* BFGS algorithm
Addressing https://github.com/google/jax/issues/1400

* * addresses @shoyer comments of PR

* * skip dtype checks

* * backslash in docstring

* * increase closeness tol

* * increase closeness atol to 1.6e-6

* * addresses jakevdp comments

* * same line search as scipy
* same results format
* same (and more) testing as in scipy for line search and bfgs
* 2 spacing
* documenting
* analytic hessian non default but still available
* NamedTuple classes

* * small fix in setup_method

* * small doc string addition

* * increase atol to 2e-5 for comparison

* * removed experimental analytic_hessian
* using jnp.where for all binary replace operations
* removed _nojit as this is what disable_jit does

* * fix indentation mangling
* remove remaining _nojit

* * fixing more indentation mangling

* * segregate third_party test

* * use parametrise

* * use parametrise

* * minor nitpicking

* * fix some errors

* * use _CompileAndCheck

* * replace f_0 and g_0 for (ugly) scipy variable names

* * remove unused function

* * fix spacing

* * add args argument to minimize
* adhere fmin_bfgs to scipy api

* * remove unused function

* * ignore F401

* * look into unittest

* * fix unittest error

* * delete unused function
* more adherence to scipy's api
* add scipy's old_old_fval arg though unused
* increase line_search default maxiter to 20 (10 not enough in some cases)

* * remove unused imports

* * add ord=norm to the initial convergence check

* * remove helper function

* * merge jax/master

* * Resolve a remnant conflict from merging master to solve ReadTheDocs issue.

* * Add an informative termination message and status number.

* Revert changes to unrelated files

* cleanup bfgs_minimize

* cleanup minimize.py

* Move minimize_bfgs.py to _bfgs.py

* Move more modules around

* improve docs

* high precision einsum

* Formatting in line search

* fixup

* Type checking

* fix mypy failures

* minor fixup

Co-authored-by: Stephan Hoyer <shoyer@google.com>
==

jax/scipy/optimize/__init__.py
jax/scipy/optimize/_bfgs.py
jax/scipy/optimize/_line_search.py
jax/scipy/optimize/_minimize.py
tests/scipy_optimize_test.py
tests/third_party/scipy/LICENSE
tests/third_party/scipy/line_search_test.py
==================
659dd39d;Peter Hawkins;2020-07-29 16:22:12 -0400;Add MLPerf results link. (#3896)

==

README.md
==================
e0a8d448;Jake Vanderplas;2020-07-29 12:53:28 -0700;Add jnp.modf() & improve test coverage for related functions (#3894)

==

docs/jax.numpy.rst
jax/numpy/__init__.py
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
190b6af5;Jake Vanderplas;2020-07-29 12:52:41 -0700;Improve searchsorted implementation (#3873)

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
c38bc368;Jake Vanderplas;2020-07-28 20:54:30 -0700;jnp.linspace & friends: more carefully handle dtypes (#3859)

==

jax/numpy/lax_numpy.py
==================
30980742;Matthew Johnson;2020-07-28 19:46:00 -0700;refine population_count type check (#3887)
* refine population_count type check

fixes #3886

* allow signed/unsigned ints for population_count

https://cs.opensource.google/tensorflow/tensorflow/+/master:tensorflow/compiler/xla/service/shape_inference.cc;l=314?q=xla%20f:shape_inference.cc

* make lax_reference.population_count handle signed
==

jax/lax/lax.py
jax/lax_reference.py
tests/lax_test.py
==================
e28db33b;Jamie Townsend;2020-07-29 03:39:32 +0200;Fix dynamic_slice, dynamic_update_slice scalar batching, fixes #3883 (#3888)
* Add test for issue 3883

* Fix dynamic_slice, dynamic_update_slice scalar batching, fixes #3883
==

jax/lax/lax.py
tests/batching_test.py
==================
33faf6a4;David Majnemer;2020-07-28 18:07:38 -0700;TPUs support half precision arithmetic (#3878)
* TPUs support half precision arithmetic

* update jax2tf tests to handle fp16

Co-authored-by: Matthew Johnson <mattjj@google.com>
==

jax/experimental/jax2tf/tests/primitives_test.py
jax/test_util.py
==================
7506a3e5;Jamie Townsend;2020-07-28 16:27:07 +0200;Fix flaky generated_fun_test.py test (#3885)

==

tests/generated_fun_test.py
==================
d7733c30;Jake Vanderplas;2020-07-28 06:55:10 -0700;Cleanup: canonicalize several dtypes to prevent noisy warnings (#3874)

==

jax/numpy/lax_numpy.py
==================
dd7ab39e;Stephan Hoyer;2020-07-27 22:25:16 -0700;Fix formatting in the custom derivatives notebook (#3876)
Sphinx is apparently quite picky about consistent use of headers: you can't
skip a header level. We were getting warnings like "WARNING: Title level
inconsistent" in the docs build, and sub-headers weren't showing up on this
page after the first section.
==

docs/notebooks/Custom_derivative_rules_for_Python_code.ipynb
==================
616d63b1;Matthew Johnson;2020-07-27 21:51:12 -0700;fix vmap error, fixes #3877 (#3879)

==

jax/api.py
==================
3aa37d3a;Vaibhav Srivastav;2020-07-28 02:57:36 +0530;Replicating sort_complex functionality from np.sort_complex to jax.numpy (#3870)

==

docs/jax.numpy.rst
jax/numpy/__init__.py
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
c9d8acd2;Matthew Johnson;2020-07-26 22:38:14 -0700;put core trace state in a threading.local class (#3869)
this is a refinement of the fix in #3845, so that we no longer need
TraceState.set_state (and so that #3370 is easier to adapt)
==

jax/core.py
jax/custom_derivatives.py
jax/experimental/loops.py
==================
ee7f0353;Jake Vanderplas;2020-07-26 08:58:37 -0700;jax.random: use correct x32/x64 default dtypes. (#3841)
This is a no-op in the current package, but will make things cleaner during the x64 deprecation.
==

jax/random.py
==================
5e919657;Matthew Johnson;2020-07-24 15:54:21 -0700;delete standard_parallel_primitive helper (#3858)
delete standard_parallel_primitive helper

meant to include this in #3853, it's even in the PR message!
==

jax/lax/__init__.py
jax/lax/lax_parallel.py
==================
5c674cf8;Jake Vanderplas;2020-07-24 15:03:48 -0700;Properly set X64 flag in github actions (#3854)
This allows the github actions CI to actually exercise tests with jax_enable_x64.
==

.github/workflows/ci-build.yaml
==================
57c2fcb0;Matthew Johnson;2020-07-24 12:52:52 -0700;tweak parallel collective translation rule api (#3853)
also remove standard_parallel_primitive helper function, which wasn't
very helpful
==

jax/interpreters/pxla.py
jax/interpreters/xla.py
jax/lax/lax_parallel.py
==================
b7bcfa6c;Stephan Hoyer;2020-07-24 11:05:40 -0700;Create a separate internal helper function for XLA compilation (#3852)
XLA backends are written in C++, so method calls don't show up in Python
profiling results from cProfile. Adding an explicit function call fixes that.

This is helpful for interpretting profiling results, e.g., on the example from
https://github.com/google/jax/issues/3847.

Before:

             70814996 function calls (69915267 primitive calls) in 112.804 seconds

       Ordered by: internal time

       ncalls  tottime  percall  cumtime  percall filename:lineno(function)
         1193   24.936    0.021   30.336    0.025 xla.py:227(xla_primitive_callable)
      10524/1   16.342    0.002  112.991  112.991 xla.py:595(_xla_callable)
    2014622/1843062    8.745    0.000   16.618    0.000 util.py:29(safe_map)
        18145    3.662    0.000    4.218    0.000 source_info_util.py:27(user_frame)
    196061/183909    1.604    0.000   24.647    0.000 partial_eval.py:150(default_process_primitive)
       423499    1.569    0.000    1.569    0.000 {method 'reduce' of 'numpy.ufunc' objects}

After:

             71147652 function calls (70235594 primitive calls) in 101.718 seconds

       Ordered by: internal time

       ncalls  tottime  percall  cumtime  percall filename:lineno(function)
         1294   38.894    0.030   38.894    0.030 xla.py:325(_backend_compile)
    2017790/1844559    6.965    0.000   14.139    0.000 util.py:29(safe_map)
        18146    3.317    0.000    3.839    0.000 source_info_util.py:27(user_frame)
    196226/184073    1.467    0.000   21.889    0.000 partial_eval.py:150(default_process_primitive)
       423771    1.419    0.000    1.419    0.000 {method 'reduce' of 'numpy.ufunc' objects}

We now clearly see that both `xla_primitive_callable` and `_xla_callable` are
slow for the same reason and ~40 seconds is spent inside XLA compilation.
==

jax/interpreters/xla.py
==================
5ae6043a;Jake Vanderplas;2020-07-24 09:36:16 -0700;Cleanup test names in random_test.py (#3842)

==

tests/random_test.py
==================
53a45381;Peter Hawkins;2020-07-24 11:52:32 -0400;Fix source_info crash in Jaxpr printing (#3849)

==

jax/core.py
==================
55cd8279;George Necula;2020-07-24 10:14:34 +0300;[jax2tf] Selectively disable some primitive tests on TPU. (#3835)
Currently, all primitive tests are disabled on TPU, but only some
cases fail. This PR simply disables the selected failing tests on
TPU, so that we can enable the rest by default. Future PRs will
address each failure individually.
==

jax/experimental/jax2tf/tests/primitives_test.py
==================
86732620;George Necula;2020-07-24 10:14:08 +0300;[jax2tf] Expand the support for jax.remat. (#3828)
In the simplest forms, remat is already handled by the `process_call`.
But when the `remat` has outputs computed from values captured from
an outer environment, we need to also implement `post_process_call`.
==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/control_flow_ops_test.py
jax/experimental/jax2tf/tests/jax2tf_test.py
==================
e2424e3b;Matthew Johnson;2020-07-23 20:59:12 -0700;attempt to fix CI failure (from #3845 test?) (#3846)

==

tests/api_test.py
==================
cc9528d9;Matthew Johnson;2020-07-23 19:49:04 -0700;fix thread locality bug in custom_derivatives (#3845)
* fix thread locality bug in custom_derivatives

fixes #3843
==

jax/core.py
jax/custom_derivatives.py
tests/api_test.py
==================
67ad5eb5;Matthew Johnson;2020-07-23 19:38:56 -0700;add result_shape option to xla_computation (#3844)
add result_shape option to xla_computation
==

jax/api.py
tests/api_test.py
==================
f6221a66;Peter Hawkins;2020-07-23 16:17:55 -0400;Enable int{8,16} and uint{8,16} tests in lax_test and lax_numpy_test. (#3833)

==

jax/lax_reference.py
jax/test_util.py
tests/lax_numpy_test.py
tests/lax_test.py
==================
2796032e;Jake Vanderplas;2020-07-23 13:08:06 -0700;Tweak Dockerfile to prevent build failure and add TODO (#3838)

==

build/Dockerfile
==================
92810923;Jake Vanderplas;2020-07-23 10:28:44 -0700;Improve test coverage for jax.numpy sorting algorithms (#3836)

==

tests/lax_numpy_test.py
==================
90b35326;Peter Hawkins;2020-07-23 12:10:39 -0400;Update XLA. (#3834)

==

WORKSPACE
==================
7da1cba6;Peter Hawkins;2020-07-23 11:35:29 -0400;Remove fallback to 2-pass algorithm for argmin/argmax on TPU. (#3831)
(The compiler problem that prompted the workaround seems to be fixed.)
==

jax/lax/lax.py
==================
1bc5896e;Jake Vanderplas;2020-07-22 19:39:51 -0700;update README for new jaxlib version (#3825)

==

README.md
==================
17c21a79;Jake Vanderplas;2020-07-22 15:21:30 -0700;update jaxlib version and changelog for pypi (#3824)

==

WORKSPACE
docs/CHANGELOG.rst
jaxlib/version.py
==================
edff6933;Jake Vanderplas;2020-07-22 14:20:34 -0700;update jax version and changelog for pypi (#3823)

==

docs/CHANGELOG.rst
jax/version.py
==================
fddb28d8;Jake Vanderplas;2020-07-22 12:50:54 -0700;Cleanup: fix type issues in lax_numpy.py (#3816)
These changes are basically a no-op wth the current default types, but fixes issues if/when those types are changed to 32-bit in the future.
==

jax/numpy/lax_numpy.py
==================
04a6238d;Jake Vanderplas;2020-07-22 12:48:49 -0700;implement jax.numpy.lexsort (#3812)

==

docs/jax.numpy.rst
jax/numpy/__init__.py
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
0a3a5bbb;Du Phan;2020-07-22 11:17:06 -0500;address nan issue (#3777)

==

jax/scipy/special.py
tests/lax_scipy_test.py
==================
f574b114;James Bradbury;2020-07-21 23:16:27 -0700;Support preconditions on scatter indices (#3147)
* wire through precondition flags to XLA scatter

* use scatter precondition flags in tests

* fix DUS batching rule

* make new arguments kw-only

* onp -> np

* fix jax2tf for new args

* fix more test failures
==

jax/experimental/jax2tf/jax2tf.py
jax/lax/lax.py
jax/numpy/lax_numpy.py
jax/ops/scatter.py
tests/lax_numpy_indexing_test.py
==================
74d363e5;bion howard;2020-07-21 15:41:08 -0400;fix extremely minor typo (#3815)
"ijnputs" -> "inputs"
==

jax/random.py
==================
3a3c8ea8;Matthew Johnson;2020-07-21 06:48:55 -0700;tweak jnp.repeat not to use jnp on shapes (#3810)
tweak jnp.repeat not to use jnp on shapes
==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
e2bfc906;Benjamin Chetioui;2020-07-21 15:38:12 +0200;[jax2tf] First draft of top_k conversion to tf. (#3785)
* [jax2tf] First draft of top_k conversion to tf.

We are able to use tf.math.top_k in most cases but:
- bfloat16 and complex numbers are unsupported
- tf.math.top_k works properly with args of type int32/64, uint32/64 and
  float32/64. Other flavors of uints/ints and bool can not be used with
  the operation by default, and they are thus promoted to their
  equivalent 32 bit representation, and the result is casted back to the
  original dtype.

A limitation right now is the handling of edge cases: TF and JAX order
np.inf and np.nan differently, resulting in inconsistencies in the case
where these values are present.

Note: this has been sanity checked, the tests fail if we set sorted=False.

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
9773432b;Benjamin Chetioui;2020-07-21 15:36:35 +0200;[jax2tf] First draft of testing the QR conversion. (#3775)
* [jax2tf] First draft of testing the QR conversion.

QR decomposition is off by over 1e-6 in some instances, requiring custom
atol and rtol values in testing code. There is an odd problem in which
experimental compilation fails for complex types, although they are in
principle supported.

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
71f80a50;Jake Vanderplas;2020-07-20 17:18:08 -0700;Fix type mismatch in jet rule for abs (#3807)

==

jax/experimental/jet.py
==================
a6e2d20b;Peter Hawkins;2020-07-20 17:27:24 -0400;Add support for base dilation and window dilation to reduce window op… (#3803)

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/stax.py
jax/lax/lax.py
jax/lax_reference.py
jax/test_util.py
tests/lax_autodiff_test.py
tests/lax_test.py
tests/lax_vmap_test.py
==================
ce144090;Claudio Fantacci;2020-07-20 21:15:40 +0100;Fix `jax.image._resize` function (#3805)
This PR fixes a bug in jax.image._resize where the local `method_id`
variable may be used without being defined first.
This bug can be easily reproduced by passing to `jax.image.resize`
parameter `method` a `ResizeMethod` instead of an `str`. By doing
this, `method_id` is never defined and the instruction
`if method_id == ResizeMethod.NEAREST` raises an error. Currently,
this can be easily bypassed assigning parameter `method` a `str`.
To fix this bug, it only needs to rename `method_id` to `method`,
the same name of the input parameter.
==

jax/image/scale.py
==================
f6b3184f;Stephan Hoyer;2020-07-20 11:10:10 -0700;add clarification about jit inside indexing error message (#3804)

==

jax/numpy/lax_numpy.py
==================
fe99a06d;Stephan Hoyer;2020-07-20 06:08:54 -0700;Error message and docstring updates RE: dynamic_slice (#3795)
This should clarify the underlying issues from #1007 and #3794.

It might be worth mentioning masking, but that's a little big for fitting into
an error message. Maybe once the masking transformation is non-experimental or
if we had a dedicated doc page.
==

jax/lax/lax.py
jax/numpy/lax_numpy.py
==================
dd3cb821;Lena Martens;2020-07-20 14:59:13 +0200;Enable buffer donation for GPU. (#3800)

==

jax/interpreters/pxla.py
jax/interpreters/xla.py
tests/api_test.py
==================
d4339340;John Aslanides;2020-07-18 21:36:23 +0100;Add a TypeVar to while_loop definition. (#3792)

==

jax/lax/lax_control_flow.py
==================
fa2a0275;Roy Frostig;2020-07-17 15:01:12 -0700;revert #3674

==

jax/api.py
jax/traceback_util.py
tests/errors_test.py
tests/loops_test.py
==================
2df486ee;Skye Wanderman-Milne;2020-07-17 15:11:26 -0700;Note in pmap docs that pmap compiles like jit. (#3787)

==

jax/api.py
==================
9a01d78b;Peter Hawkins;2020-07-17 17:38:05 -0400;Merge pull request #3782 from hawkinsp/dot
Don't move batch dimensions to start in jnp.einsum.
==
==================
3eda6e97;Peter Hawkins;2020-07-17 17:36:29 -0400;Merge pull request #3783 from hawkinsp/matmul
Avoid broadcasts in implementation of jnp.matmul
==
==================
57c1822d;Peter Hawkins;2020-07-17 17:14:03 -0400;Merge pull request #3789 from hawkinsp/rw
Improve reduce-window testing.
==
==================
7c4d41f0;Peter Hawkins;2020-07-17 17:13:42 -0400;Merge pull request #3788 from hawkinsp/convtol
Relax test tolerance for conv_general_dilated gradients.
==
==================
7e3433e2;Peter Hawkins;2020-07-17 16:05:51 -0400;Improve reduce-window testing.

==

jax/lax_reference.py
tests/lax_test.py
==================
e04fdeb0;Peter Hawkins;2020-07-17 15:07:17 -0400;Relax test tolerance for conv_general_dilated gradients.
The new support for complex types leads to slightly higher errors.

==

tests/lax_autodiff_test.py
==================
7b3eff82;Peter Hawkins;2020-07-17 14:55:36 -0400;Merge pull request #3786 from hawkinsp/einsumargs
Use keyword arguments in einsum.
==
==================
f7260a47;Roy Frostig;2020-07-17 11:32:36 -0700;stack traces without jax-internal frames (#3674)

==
==================
252a027a;Peter Hawkins;2020-07-17 14:15:52 -0400;Update numpy signatures test.

==

tests/lax_numpy_test.py
==================
8fc1332e;Peter Hawkins;2020-07-17 13:58:02 -0400;Avoid broadcasting for batch dimensions in jnp.matmul.
Instead, squeeze size 1 dimensions out of the matmul input, and transpose any non-batch non-contracting dimensions into the correct location.

==

jax/numpy/lax_numpy.py
==================
8e986f9c;Peter Hawkins;2020-07-17 12:54:36 -0400;Use keyword arguments in einsum.
Python 3 cleanup only, no functional changes intended.

==

jax/numpy/lax_numpy.py
==================
6a37e26b;Peter Hawkins;2020-07-17 08:57:09 -0400;Don't move batch dimensions to start in jnp.einsum.
We no longer require batch dimensions to be first, and this simplifies the code.

==

jax/numpy/lax_numpy.py
==================
943c4216;Peter Hawkins;2020-07-17 08:55:23 -0400;Relax dimension ordering rules for dot_general. (#3778)
JAX currently requires that batch dimensions appear first and contiguously in the arguments to dot_general. However, XLA does not require this; relax JAX's checks so that it also allows batch dimensions in arbitrary positions.

Since batch dimensions are now allowed in arbitrary positions, it's not hard to
generalize the dot_general batching rule to avoid performing any transposes
(#2972).

In passing, also move the bool/int dot expansion into the XLA translation rule. The expansion inside the `lax.dot_general()` wrapper predated the existence of (or at least my knowledge of) `xla.lower_fun()`.
==
==================
e4d5eade;Peter Hawkins;2020-07-17 08:44:47 -0400;Use iteration over equations to test for "transpose" and "broadcast".

==

jax/test_util.py
tests/batching_test.py
tests/lax_vmap_test.py
==================
165f31ef;Peter Hawkins;2020-07-17 08:38:33 -0400;Also test for transpose in dot vmap test.

==

tests/batching_test.py
==================
dd4db64e;Roy Frostig;2020-07-16 17:11:52 -0700;docstring for api_boundary

==

jax/traceback_util.py
==================
733f6c4e;Roy Frostig;2020-07-16 13:32:01 -0700;disable false pytype error

==

jax/traceback_util.py
==================
6416ca0e;Roy Frostig;2020-07-02 12:18:01 -0700;append filtered stack traces to error messages raised under transformations

==

jax/api.py
jax/traceback_util.py
tests/errors_test.py
tests/loops_test.py
==================
e2e73a85;Peter Hawkins;2020-07-16 16:23:27 -0400;Relax dimension ordering rules for dot_general.
JAX currently requires that batch dimensions appear first and contiguously in the arguments to dot_general. However, XLA does not require this; relax JAX's checks so that it also allows batch dimensions in arbitrary positions.

Since batch dimensions are now allowed in arbitrary positions, it's not hard to
generalize the dot_general batching rule to avoid performing any transposes
(#2972).

In passing, also move the bool/int dot expansion into the XLA translation rule. The expansion inside the `lax.dot_general()` wrapper predated the existence of (or at least my knowledge of) `xla.lower_fun()`.

==

jax/lax/lax.py
tests/lax_autodiff_test.py
tests/lax_test.py
tests/lax_vmap_test.py
==================
3fb88742;Jake Vanderplas;2020-07-16 15:53:16 -0700;[x64 deprecation] Create _np_array utility routine (#3779)

==

jax/numpy/lax_numpy.py
==================
44fbce56;Skye Wanderman-Milne;2020-07-16 15:22:40 -0700;Revert "Add `in_parts` and `out_parts` optional arguments `jax.xla_computation`. (#3771)" (#3780)
This reverts commit dbc3f83f6d14d491a06137f698aca92f7f3c572d.

This is breaking some google-internal users of xla_computation. Reverting while I investigate.
==

jax/api.py
tests/api_test.py
==================
bfe8e4f0;Skye Wanderman-Milne;2020-07-16 09:19:41 -0700;Enable `all_to_all` in multi-host settings. (#3772)
I tested this via `pswapaxes` and it seems to work. There may still be
issues with all_to_all
(e.g. https://github.com/google/jax/issues/1332) but it seems worth
enabling the `pswapaxes` use case.
==

jax/lax/lax_parallel.py
==================
7b18a4e8;Benjamin Chetioui;2020-07-16 15:44:20 +0200;[jax2tf] Fix interface of ConvertAndCompare function. (#3776)

==

jax/experimental/jax2tf/tests/tf_test_util.py
==================
15125b87;George Necula;2020-07-16 16:06:34 +0300;[jax2tf] Fix bug with double XLA compile (#3765)
* [jax2tf] Fix bug with double XLA compile

Some converted ops require XLA compilation to work around bugs
in TF where the behavior without XLA is incorrect. If those ops
are then part of an outer tf.function(experimental_compile=True)
then we get a TF error. This change primarily detects that we
are in an compilation context and does not use XLA compiler for
ops.

This, however, changes the error behavior for dynamic_slice.
Improved the testing, to skip fewer tests but instead to
expect and check for errors.

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/control_flow_ops_test.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
jax/experimental/jax2tf/tests/tf_test_util.py
==================
dbc3f83f;Skye Wanderman-Milne;2020-07-15 14:56:58 -0700;Add `in_parts` and `out_parts` optional arguments `jax.xla_computation`. (#3771)
This allows partitioned computations in `xla_computation`, like those produced by `sharded_jit`.
==

jax/api.py
tests/api_test.py
==================
05904faf;Jake Vanderplas;2020-07-15 13:17:38 -0700;Change onp/np to np/jnp in docs & notebooks (#3760)

==

README.md
cloud_tpu_colabs/JAX_demo.ipynb
cloud_tpu_colabs/Lorentz_ODE_Solver.ipynb
cloud_tpu_colabs/Pmap_Cookbook.ipynb
cloud_tpu_colabs/Wave_Equation.ipynb
docs/async_dispatch.rst
docs/jaxpr.rst
docs/notebooks/Common_Gotchas_in_JAX.ipynb
docs/notebooks/Custom_derivative_rules_for_Python_code.ipynb
docs/notebooks/How_JAX_primitives_work.ipynb
docs/notebooks/Neural_Network_and_Data_Loading.ipynb
docs/notebooks/Writing_custom_interpreters_in_Jax.ipynb
docs/notebooks/XLA_in_Python.ipynb
docs/notebooks/autodiff_cookbook.ipynb
docs/notebooks/maml.ipynb
docs/notebooks/neural_network_with_tfds_data.ipynb
docs/notebooks/quickstart.ipynb
docs/notebooks/score_matching.ipynb
docs/notebooks/vmapped_log_probs.ipynb
docs/pytrees.rst
docs/rank_promotion_warning.rst
docs/type_promotion.rst
jax/experimental/README.md
==================
150d028d;Claudio Fantacci;2020-07-15 19:19:40 +0100;Update scipy.ndimage.map_coordinates docstring (#3762)

==

jax/scipy/ndimage.py
tests/scipy_ndimage_test.py
==================
34669d74;Jonathan Godwin;2020-07-15 19:03:58 +0100;source sync (#3763)

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
8a62a9b6;Roy Frostig;2020-07-15 11:00:50 -0700;block-unrolled scan primitive implementation (#3738)
* block-unrolled scan implementation, via optional `_unroll` scan parameter

* index statically in the inlined path of lax.scan

* make `unroll` a required scan parameter, and test that it unrolls
==

docs/jaxpr.rst
jax/experimental/host_callback.py
jax/experimental/loops.py
jax/lax/lax_control_flow.py
tests/lax_control_flow_test.py
==================
23c279f0;George Necula;2020-07-15 18:19:22 +0300;[jax2tf] Relax tolerance for JaxPrimitiveTest.test_unary_elementwise_lgamma_float32 (#3767)

==

jax/experimental/jax2tf/tests/primitives_test.py
==================
d55c47d2;SIben;2020-07-15 14:12:42 +0200;[jax2tf] Fix error in sorting with TF graphs. (#3764)

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
c380356f;George Necula;2020-07-15 09:49:51 +0300;[jax2tf] Refactor tests to increase coverage (#3700)
* [jax2tf] Refactor tests to increase coverage.

This change has several goals: (a) increase the test coverage
for the elementwise primitives, (b) expose explicitly
the situations where JAX and TF produce different results,
e.g., inf vs Nan, and (c) run all comparisons with and
without tf.function, with and without experimental_compile=True.

Previously the test code was just masking off non-finite values.

This change uncovered quite a few unimplemented cases, e.g., with
float16, bfloat16, conversions that cannot be compiled.
This are left as TODO for now.

* Disable the sort tests
==

jax/experimental/jax2tf/tests/control_flow_ops_test.py
jax/experimental/jax2tf/tests/jax2tf_test.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
jax/experimental/jax2tf/tests/tf_test_util.py
==================
68c8dc78;SIben;2020-07-15 06:56:19 +0200;Added installation note for jax2tf with GPU support. (#3750)

==

jax/experimental/jax2tf/README.md
==================
f02d5b46;Joan Puigcerver;2020-07-15 00:45:49 +0200;Support differentiation through jax.lax.all_to_all (#3733)
* Support differentiation through jax.lax.all_to_all

Credit to @levskaya for the solution.

* Test gradient of all_to_all

We are testing all_to_all through pswapaxes, since general all_to_all is problematic according to https://github.com/google/jax/issues/1332.

* Removed trailing spaces
==

jax/lax/lax_parallel.py
tests/pmap_test.py
==================
a7c2cdea;Jake Vanderplas;2020-07-14 13:05:31 -0700;Cleanup: convert uses of `import numpy as onp` in library code (#3754)

==

benchmarks/benchmark.py
jax/api.py
jax/core.py
jax/experimental/loops.py
jax/interpreters/batching.py
jax/interpreters/masking.py
jax/interpreters/partial_eval.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
jax/lax/lax.py
jax/lax/lax_control_flow.py
jax/lax/lax_fft.py
jax/lax/lax_parallel.py
jax/lib/xla_bridge.py
jax/util.py
==================
512ed18d;Jake Vanderplas;2020-07-14 13:03:24 -0700;Cleanup: convert uses of 'import numpy as onp' in tests (#3756)

==

tests/infeed_test.py
tests/lax_autodiff_test.py
tests/lax_numpy_indexing_test.py
tests/lax_scipy_test.py
tests/lax_test.py
tests/lax_vmap_test.py
tests/linalg_test.py
tests/scipy_ndimage_test.py
tests/scipy_signal_test.py
tests/scipy_stats_test.py
==================
58aba9bc;Peter Hawkins;2020-07-14 14:10:13 -0400;Fix low probability (4/1000) flake of batching_test on GPU. (#3752)

==

tests/batching_test.py
==================
f6f97554;Jonathan Godwin;2020-07-14 18:37:09 +0100;A jit-able version of np.repeat. (#3670)
A new keyword argument has been added to np.repeat, total_repeat_length, that can optionally be supplied to make np.repeat jit-able.
==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
06053212;Jake Vanderplas;2020-07-14 10:24:42 -0700;Fix compilation bug in histogram_bin_edges (#3745)

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
e1f8f246;Jake Vanderplas;2020-07-14 10:21:38 -0700;lax_numpy: rename arguments to match numpy (#3747)

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
7f9c2f1d;Peter Hawkins;2020-07-14 12:02:26 -0400;Make jnp.take work for empty slices of empty arrays. (#3751)

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
2b7a39f9;Chase Roberts;2020-07-14 06:05:45 -0700;Add pshuffle to docs (#3742)

==

docs/jax.lax.rst
==================
f78ccf1c;James Bradbury;2020-07-13 18:16:11 -0700;Fix tuple() in reduce_window padding (#3748)
* Fix tuple() in reduce_window padding

* Update lax.py
==

jax/lax/lax.py
==================
a017c108;Peter Hawkins;2020-07-13 20:27:12 -0400;Implement nearest neighbor image resizes. (#3743)

==

jax/image/scale.py
tests/image_test.py
==================
9a867ca6;Jake Vanderplas;2020-07-13 16:55:49 -0700;Remove unused private function (#3744)

==

jax/numpy/lax_numpy.py
==================
a6ab742f;Alex Dragan;2020-07-14 01:31:47 +0300;Improve np.intersect1d (#3739)

==

jax/numpy/lax_numpy.py
==================
6017205c;James Bradbury;2020-07-13 14:37:46 -0700;Add defensive tuple() in lax.reduce_window (#3741)

==

jax/lax/lax.py
==================
3c6cd5fb;Peter Hawkins;2020-07-13 14:44:24 -0400;Implement complex convolutions on CPU and GPU. (#3735)
Lowers using Gauss's complex multiplication algorithm (which internally is also what the XLA:TPU implementation does.)
==

jax/lax/lax.py
tests/lax_autodiff_test.py
tests/lax_test.py
==================
6391cfe7;SIben;2020-07-13 17:01:24 +0200;[jax2tf] First draft of converting sort_p using TF2XLA (#3713)
Limitations: stable sort is skipped, as well as tests using > 2
arrays. num_keys is always set to 1, and boolean key-value-sort
is also skipped.

* Skipped multiarray tests on GPU.

TensorFlow is run on CPU which makes the results incompatible with the
XLA GPU implementation.
==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
71253ac4;Peter Hawkins;2020-07-13 09:49:52 -0400;Generalize reduce-window padding to support (lo, hi) pairs. (#3728)
* Generalize reduce-window padding to support (lo, hi) pairs, as XLA does..

This turns out to simplify the code slightly, too.

* Fix select_and_gather_add batching rule and test.

* Fix documentation text to refer to ReduceWindowWithGeneralPadding.
==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/stax.py
jax/lax/lax.py
tests/lax_vmap_test.py
==================
a9da06ce;Peter Hawkins;2020-07-13 09:43:19 -0400;Fix shape error when taking JVP of reduce-prod over size 0 axis. (#3729)

==

jax/lax/lax.py
tests/lax_autodiff_test.py
tests/lax_numpy_test.py
==================
0d81e988;Alex Dragan;2020-07-13 08:32:41 +0300;Implement np.intersect1d (#3726)
* Implement np.intersect1d

* Add jitable helper to function

* Fix argsort failing tests

* Fix linter errors
==

docs/jax.numpy.rst
jax/numpy/__init__.py
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
9da9156b;Peter Hawkins;2020-07-12 14:00:10 -0400;Change image resize implementation to use a matmul per dimension. (#3720)
* Change image resize implementation to use a matmul per dimension.

This should have better space scaling behaviors than the previous gather approach. In particular, it does not require temporary memory that scales with the batch size or number of features of an image.

* Plumb precision option through to image resize API.
==

jax/image/scale.py
==================
51ca57d5;Matthew Johnson;2020-07-11 20:47:22 -0700;check matmul inputs aren't scalar (#3725)
also dot_general shape rule should check dimension numbers are in range

fixes #3718
==

jax/lax/lax.py
jax/numpy/lax_numpy.py
==================
aa75209d;Tom Hennigan;2020-07-12 04:44:16 +0100;Import profiler in jax/__init__.py (#3719)

==

jax/__init__.py
==================
eb67571b;Stephan Hoyer;2020-07-11 13:21:49 -0700;Merge pull request #3705 from NeilGirdhar/nestable_vjp
Make vjp cotangent functions pytree-like
==
==================
503e5973;Neil Girdhar;2020-07-09 14:13:45 -0400;Make vjp cotangent functions pytree-like
Fixes #3667

==

jax/api.py
jax/interpreters/ad.py
tests/api_test.py
==================
e073e254;Jiho Choi;2020-07-10 17:20:06 -0700;Add a jax.profiler.StepTraceContext API. (#3591)
* Add RootTraceContext.

* Rename to StepTraceContext.
==

jax/profiler.py
==================
412b9d52;Alex Dragan;2020-07-10 20:34:59 +0300;hfft and ihfft implementation (#3664)

==

docs/jax.numpy.rst
jax/numpy/fft.py
tests/fft_test.py
==================
60d85277;Jake Vanderplas;2020-07-10 09:58:35 -0700;lexicographic sort_p: accept num_keys rather than comparator (#3715)

==

jax/lax/lax.py
==================
d2f9c46a;Jake Vanderplas;2020-07-10 09:29:06 -0700;Remove some non-inclusive language (#3710)

==

docs/CHANGELOG.rst
jax/experimental/jax2tf/examples/stax_to_tf_module.py
jax/lax/lax.py
tests/doubledouble_test.py
tests/lax_numpy_test.py
==================
24c9ee64;Jake Vanderplas;2020-07-10 09:24:51 -0700;fix flake error (#3716)

==

jax/image/scale.py
==================
44eae610;Skye Wanderman-Milne;2020-07-10 08:11:48 -0700;Turn off INFO logging (again). (#3707)
Something must have started logging earlier than before, causing INFO-level logging to be initialized before we disabled it. This change disables INFO logging sooner.
==

jax/__init__.py
==================
417de0d3;Peter Hawkins;2020-07-10 10:32:13 -0400;Add jit to jax.image.resize (#3714)
* Add image/ directory to Bazel build.

* Use a jit on jax.image.resize to reduce compilation time.

Relax bfloat16 test tolerance.
==

jax/BUILD
jax/image/scale.py
tests/image_test.py
==================
b943b31b;Peter Hawkins;2020-07-10 09:57:59 -0400;Add jax.image.resize. (#3703)
* Add jax.image.resize.

This is a port of `tf.image.resize()` and the `ScaleAndTranslate` operator.

While I don't expect this implementation to be particularly fast, it is a useful generic implementation to which we can add optimized special cases as the need arises.

==

build/test-requirements.txt
docs/jax.image.rst
docs/jax.rst
jax/__init__.py
jax/image/__init__.py
jax/image/scale.py
tests/image_test.py
==================
804e4493;Jake Vanderplas;2020-07-09 20:05:19 -0700;Generalize lax.sort to support lexicographic sorts. (#3709)

==

jax/lax/lax.py
tests/lax_test.py
==================
0a6b715c;Jake Vanderplas;2020-07-09 16:31:08 -0700;Add _NOT_IMPLEMENTED attribute to jax.numpy (fixes #3689) (#3698)

==

jax/numpy/__init__.py
jax/numpy/fft.py
jax/numpy/lax_numpy.py
jax/numpy/linalg.py
jax/numpy/polynomial.py
tests/fft_test.py
tests/lax_numpy_test.py
tests/linalg_test.py
tests/polynomial_test.py
==================
c1aeb8b3;Chris Jones;2020-07-09 18:02:23 +0100;Add simple JAX API microbenchmarks. (#3679)

==

benchmarks/api_benchmark.py
==================
b813ae3a;Jake Vanderplas;2020-07-08 14:44:49 -0700;Cleanup: record names in get_module_functions (#3697)

==

jax/numpy/__init__.py
jax/numpy/fft.py
jax/numpy/linalg.py
jax/util.py
==================
19adce59;Jake Vanderplas;2020-07-08 13:21:48 -0700;Cleanup: use test_util dtypes where possible (#3695)
* Cleanup: use test_util dtypes where possible

* fix issue in fft test

* fix duplicate test name issue
==

jax/experimental/jax2tf/tests/primitive_harness.py
tests/fft_test.py
tests/lax_numpy_indexing_test.py
tests/lax_scipy_test.py
tests/polynomial_test.py
tests/scipy_ndimage_test.py
==================
11b40fb4;8bitmp3;2020-07-08 18:53:06 +0100;Fix a link to TensorBoard's profiler in Profiling JAX Programs (#3692)

==

docs/profiling.md
==================
fdd7f0c8;George Necula;2020-07-08 16:08:54 +0300;Added concurrent id_tap tests, disabled for GPU (#3690)

==

tests/host_callback_test.py
==================
6b471e2a;Jake Vanderplas;2020-07-07 17:01:38 -0700;Cleanup: define type lists in test_util & use in several test files. (#3616)

==

jax/experimental/jax2tf/tests/primitive_harness.py
jax/test_util.py
tests/array_interoperability_test.py
tests/host_callback_test.py
tests/lax_autodiff_test.py
tests/lax_numpy_test.py
tests/lax_test.py
tests/lax_vmap_test.py
tests/random_test.py
tests/scipy_signal_test.py
tests/scipy_stats_test.py
==================
82dbaca0;Jake Vanderplas;2020-07-07 16:19:43 -0700;Revert #3610 & #3684 (#3688)
* Revert "linalg_test: define test matrices lazily (#3684)"

This reverts commit 2be1baa41a170192c209c94b060d0d034d1de2c2.

* Revert "Make LU gradient work for low-rank matrices (#3610)"

This reverts commit 23deefa71838ceeab41977ac0ab781164c914a8c.
==

jax/lax_linalg.py
tests/linalg_test.py
==================
1034f29d;Matthew Johnson;2020-07-07 14:48:54 -0700;fix bad pmap tests from #3675 (#3685)

==

tests/pmap_test.py
==================
e89860c9;Jake Vanderplas;2020-07-07 14:47:44 -0700;fix pmap test on GPU/TPU (#3682)
* fix pmap test on GPU/TPU

* AssertionError -> ValueError
==
==================
2be1baa4;Jake Vanderplas;2020-07-07 14:47:24 -0700;linalg_test: define test matrices lazily (#3684)

==

tests/linalg_test.py
==================
9c3e6c30;Jake VanderPlas;2020-07-07 13:21:44 -0700;AssertionError -> ValueError

==

tests/pmap_test.py
==================
4711589c;Jake VanderPlas;2020-07-07 13:19:19 -0700;fix pmap test on GPU/TPU

==

tests/pmap_test.py
==================
242b382b;8bitmp3;2020-07-07 19:29:44 +0100;Remove a deprecated reference to testExamplesJaxprDoc in Understanding Jaxpr (#3680)

==

docs/jaxpr.rst
==================
bf97e479;George Necula;2020-07-07 11:03:30 +0300;Make infeed_test and host_callback_test independent. (#3676)
* Make infeed_test and host_callback_test independent.

* the infeed_test will stop the outfeed receiver
* Remove the use of --dist=loadfile.
* Prevent logging on exit
==

jax/experimental/host_callback.py
jax/interpreters/xla.py
pytest.ini
tests/host_callback_test.py
==================
d2ebb6eb;Matthew Johnson;2020-07-07 00:30:08 -0700;fix ppermute test bugs found by @jekbradbury (#3675)

==

jax/lax/lax_parallel.py
tests/pmap_test.py
==================
e5ba5f1e;Matthew Johnson;2020-07-06 15:11:01 -0700;support multiple_results and custom JVPs in jet (#3657)

==

jax/experimental/jet.py
==================
a2fb798d;Peter Hawkins;2020-07-06 18:08:16 -0400;Rename swish to silu, add swish as an alias to silu. (#3673)

==

docs/jax.nn.rst
jax/nn/__init__.py
jax/nn/functions.py
==================
23deefa7;David Pfau;2020-07-06 21:13:56 +0100;Make LU gradient work for low-rank matrices (#3610)
* Correct LU JVP rule to handle low-rank matrices

This requires one additional triangular_solve, though the timing should still be dominated by the LU decomposition itself. Also, the problem of computing the JVP of L for a low-rank matrix is underdetermined and likely depends on the backend used. We do not enforce any form on L'.
Still need to fix:
*NaNs in reverse mode
*Non-square matrices
*Complex matrices

* Updated LU JVP rule for VJP and nonsquare, complex matrices

* Added singular test matrices to linalg_test header

* Add tests of LU for singular matrices

* Upgrade order for Det and LU grad tests

* Increased matmul precision for better TPU accuracy

* Added comment explaining fix to LU gradient

* Remove trailing whitespace

* Moved nonsquare singular matrices next to testLuGradOfNonSquareSingularMatrix

* Fixed linter issues

* Revert changes to tests
==

jax/lax_linalg.py
tests/linalg_test.py
==================
c6382644;Peter Hawkins;2020-07-06 14:35:10 -0400;Update XLA. (#3671)

==

WORKSPACE
==================
36eb137d;Stephan Hoyer;2020-07-06 09:24:44 -0700;Refine argument validation inside jax.scipy.sparse.linalg.cg (#3630)
Now we check tree structure and leaf shapes separately. This allow us to
support pytrees that either don't define equality or that define it
inconsistently (e.g., elementwise like NumPy) with builtin data structures like
list/dict.
==

jax/scipy/sparse/linalg.py
tests/lax_scipy_sparse_test.py
==================
2a9c2d22;George Necula;2020-07-06 11:20:22 +0300;Cleanup last use of msgpack. (#3668)
This is not needed for the new host_calback runtime.
==

jax/BUILD
==================
c485a5b0;igorwilbert;2020-07-06 03:23:01 -0300;Improve jax_debug_nans documentation (#3665)

==

docs/notebooks/Common_Gotchas_in_JAX.ipynb
==================
8f936073;George Necula;2020-07-06 09:04:02 +0300;Fix broken links to deleted notebook (#3663)
Fixes #3662.
==

jax/tree_util.py
==================
3bbe06e8;8bitmp3;2020-07-05 09:26:50 +0100;Add an empty line to JAX change log (#3661)

==

docs/CHANGELOG.rst
==================
4f3011f3;George Necula;2020-07-04 18:12:58 +0300;Refactored host_callback to use the C++ runtime. (#3644)
* Refactored host_callback to use the C++ runtime.

* The new runtime makes it unnecessary to start the outfeed_receiver
  in the user's code
* We don't need msgpack anymore
* There is an interaction between host_callback and using lax.outfeed.
  I am trying to solve this by (a) making host_callback_test stop the
  outfeed receiver on finish and infeed_test on start, and (b)
  telling pytest-xdist to run all the tests from one file into
  a single worker.

==

.github/workflows/ci-build.yaml
build/test-requirements.txt
docs/requirements.txt
jax/api.py
jax/experimental/host_callback.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
pytest.ini
tests/host_callback_test.py
tests/infeed_test.py
==================
904f34a9;Tom Hennigan;2020-07-04 13:57:46 +0100;Correctly handle bfloat16 input and output from jax2tf functions. (#3652)
TF and JAX have different NumPy dtypes for bfloat16 so we need to be careful to
use the right version. I think there are a few other cases in jax2tf where we
should be using `to_tf_dtype` rather than passing `v.dtype` directly into tf
ops (e.g. I am a bit surprised to only update convert_element_type_p), however I
think a follow up adding tests for those cases would be best.
==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/jax2tf_test.py
==================
3d59a0bc;igorwilbert;2020-07-04 09:57:15 -0300;Adds information about iterator in fori_loop in The Sharp Bits documentation (#3632)

==

docs/notebooks/Common_Gotchas_in_JAX.ipynb
==================
1e7e5c57;George Necula;2020-07-04 15:53:10 +0300;[jax2tf] Fix out-of-bounds errors for dynamic slices (#3649)
* [jax2tf] Fix out-of-bounds errors for dynamic slices

JAX and XLA clamp dynamic out-of-bounds indices. Reproduce that
behavior by forcing the use of XLA for tf.dynamic_slice.

We choose this solution for now for consistency with how we handle
gather. We may decide to switch to explicitly clamping indices.

Fixes: #3621

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
49cfe268;Matthew Johnson;2020-07-03 20:54:25 -0700;improve concreteness error message for nn.one_hot (#3656)
* improve nn.one_hot and jax.numpy.arange errors

fixes #3654

* deflake

* debug
==

jax/core.py
jax/nn/functions.py
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
tests/nn_test.py
==================
796df9c5;Matthew Johnson;2020-07-03 10:00:25 -0700;make psum transpose handle zero cotangents (#3653)
make psum transpose handle zero cotangents

fixes #3651
==

jax/lax/lax_parallel.py
tests/pmap_test.py
==================
7f7fd997;George Necula;2020-07-03 11:18:54 +0300;[jax2tf] Add support for first-order AD to converted functions (#3593)
* [jax2tf] Add support for first-order AD to converted functions

On conversion, optionally, we convert the jax.vjp of the converted
function and set the result as tf.custom_gradient.

* Only first-order diff is supported for now.
* Add more tests, including for round-tripping through SavedModel.

* Minor whitespace fix
==

jax/experimental/jax2tf/README.md
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/jax2tf_test.py
jax/experimental/jax2tf/tests/savedmodel_test.py
==================
4442c333;Roman Novak;2020-07-02 14:38:35 -0700;Add support for 0d transpose convolution (#3643)
* Allow 0d transpose convolution

* Add test for 0d conv transpose

* remove whitespace
==

jax/lax/lax.py
tests/lax_test.py
==================
d10cf0e3;Matthew Johnson;2020-07-02 14:29:17 -0700;fix prng key reuse in differential privacy example (#3646)
fix prng key reuse in differential privacy example
==

examples/differentially_private_sgd.py
==================
166e795d;George Necula;2020-07-02 18:53:58 +0300;Updated minimum jaxlib to 0.1.51 (#3642)

==

README.md
build/test-requirements.txt
jax/lib/__init__.py
==================
bfe8f873;George Necula;2020-07-02 12:47:22 +0300;Change the version of tensorflow, the one in jaxlib 0.1.51 does not build (#3637)

==

WORKSPACE
==================
a5ed1615;George Necula;2020-07-02 10:33:00 +0300;Release jaxlib 0.1.51 (#3636)

==

WORKSPACE
docs/CHANGELOG.rst
jaxlib/version.py
==================
448c635a;George Necula;2020-07-02 10:21:23 +0300;[jax2tf] Update the tf-nightly version to 2020-07-01 (#3635)

==

.github/workflows/ci-build.yaml
build/test-requirements.txt
==================
65c1328d;Jake Vanderplas;2020-07-01 16:52:41 -0700;Add test of jax.numpy vs numpy call signatures (#3628)

==

jax/numpy/_util.py
tests/lax_numpy_test.py
==================
f1ec4beb;Jake Vanderplas;2020-07-01 16:27:54 -0700;Add CI tests for numpy 1.16.4 (#3634)

==

.github/workflows/ci-build.yaml
==================
65c4d755;Matthew Johnson;2020-07-01 14:15:48 -0700;fix bug in categorical test, disable #3611 on tpu (#3633)
* fix bug in categorical test, disable #3611 on tpu

Disabling #3611 on TPU pending a TPU compilation bug.

* unskip a test
==

jax/lax/lax.py
tests/random_test.py
==================
0f7b6444;Skye Wanderman-Milne;2020-07-01 13:04:27 -0700;Enable XLA SPMD partitioning by default. (#3151)
This option is needed for sharded_jit. Future APIs may use MPMD partitioning instead.
==

jax/lib/xla_bridge.py
==================
1bd04e2d;Matthew Johnson;2020-07-01 12:22:39 -0700;skip gamma tests on tpu for compilation speed (#3631)

==

tests/random_test.py
==================
aaf0c4e3;Yash Katariya;2020-07-01 11:41:24 -0700;Install scikit-image and add try;except around from google.colab import files import statement as google.colab is not available locally and in kokoro (#3626)

==

cloud_tpu_colabs/Wave_Equation.ipynb
==================
ba1b5ce8;Matthew Johnson;2020-07-01 11:26:44 -0700;skip some ode tests on gpu for speed (#3629)

==

jax/test_util.py
tests/ode_test.py
==================
236a5881;Yash Katariya;2020-07-01 08:56:10 -0700;Add try; except to cells that fail and print out the error message so that the notebook can execute end-to-end (#3624)

==

cloud_tpu_colabs/JAX_demo.ipynb
==================
47ac6122;Peter Hawkins;2020-07-01 11:14:34 -0400;Update XLA. (#3623)

==

WORKSPACE
==================
141fabbb;Peter Hawkins;2020-07-01 11:01:22 -0400;Reimplement argmin/argmax using a single pass variadic reduction. (#3611)

==

docs/jax.lax.rst
jax/experimental/jax2tf/jax2tf.py
jax/lax/__init__.py
jax/lax/lax.py
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
tests/lax_vmap_test.py
==================
107689e9;Matthew Johnson;2020-06-30 22:19:16 -0700;improve vmap axis spec structure mismatch errors (#3619)
* improve vmap axis spec structure mismatch errors

fixes #3613

* deflake
==

jax/api.py
jax/api_util.py
jax/interpreters/sharded_jit.py
tests/api_test.py
==================
eb2a2275;Matthew Johnson;2020-06-30 21:18:46 -0700;fix reduction repeated axis error (#3618)
* fix reduction repeated axis error

* deflake
==

jax/lax/lax.py
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
tests/lax_test.py
==================
e808681f;Roy Frostig;2020-06-30 14:57:56 -0700;add jit-consistency checks to a few lax_numpy tests

==

tests/lax_numpy_test.py
==================
db8f66d5;Jake Vanderplas;2020-06-30 11:36:27 -0700;Rework type support for lax cumulative reductions (#3609)

==

jax/lax/lax.py
==================
420ef4e0;Peter Hawkins;2020-06-30 12:07:38 -0400;Fix shape rule for lax.pad for input dimensions of size 0. (#3608)

==

jax/lax/lax.py
tests/lax_test.py
==================
7ecb441d;George Necula;2020-06-30 13:23:06 +0300;[jax2tf] Re-enable JIT (#3605)
JIT was disabled because initially we did not have support for
control-flow primitives. Then we found out a few other unimplemented
features that prevented control-flow primitives for working properly:
handling of units (#3432), casts (#3471, #3427), custom VJP/JVP (#3581).
All these are fixed now, and it seems to be time to re-enable JIT.
==

jax/experimental/jax2tf/README.md
jax/experimental/jax2tf/__init__.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/control_flow_ops_test.py
==================
59344028;George Necula;2020-06-30 10:12:22 +0300;[jax2tf] Fix tf.gather handling of out-of-bounds indices (#3604)
JAX and XLA clamp out-of-bounds indices, while tf.gather aborts. We
ensure that when we rewrite lax.gather to tf.gather, we use XLA.
==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/primitive_harness.py
==================
2ef39abf;Tom Hennigan;2020-06-30 05:16:02 +0100;Retain original docstring when vmap'ing functions. (#3592)

==

jax/api.py
tests/api_test.py
==================
09d128ed;Jake Vanderplas;2020-06-29 16:22:05 -0700;Cleanup: remove some test interdependence (#3600)

==

jax/test_util.py
tests/lax_autodiff_test.py
tests/lax_numpy_test.py
tests/lax_scipy_test.py
tests/lax_test.py
tests/lax_vmap_test.py
tests/ode_test.py
tests/pmap_test.py
tests/scipy_stats_test.py
==================
039b6e2e;James Bradbury;2020-06-29 15:46:38 -0700;Use precision=HIGHEST in expm repeated squaring (#3601)
* Use precision=HIGHEST in expm repeated squaring

This will improve the output accuracy on TPUs, and doesn't currently affect other platforms.

Also remove a spurious duplicate line.

* Also use HIGHEST precision in Pade approximants

* Update linalg.py

* Update linalg.py
==

jax/scipy/linalg.py
==================
ec21a3f5;Jake Vanderplas;2020-06-29 14:30:57 -0700;Merge pull request #3588 from ekelsen/master
Add cummax and cummin
==
==================
a9fad49e;Jake Vanderplas;2020-06-29 14:16:51 -0700;Add ability to specify individual test targets via a regex (#3549)
* Add ability to specify individual test targets

* fix missing imports

* Use re.search and include test class name
==
==================
101581d8;Roy Frostig;2020-06-29 12:06:57 -0700;add source info to jaxpr typechecking messages

==

jax/core.py
tests/core_test.py
==================
aa6585f9;Erich Elsen;2020-06-29 19:20:19 +0100;bool -> bool_ for reasons that make no sense, (bool used to be any?!)

==

jax/lax/lax.py
==================
b46bd230;Erich Elsen;2020-06-29 19:13:41 +0100;add support bool identity values

==

jax/lax/lax.py
==================
e9aac7bb;Jake VanderPlas;2020-06-29 11:06:10 -0700;Use re.search and include test class name

==

jax/test_util.py
==================
c62bad5f;Jake VanderPlas;2020-06-24 16:32:33 -0700;fix missing imports

==

jax/experimental/jax2tf/tests/savedmodel_test.py
tests/infeed_test.py
tests/jax_to_hlo_test.py
tests/optix_test.py
tests/profiler_test.py
tests/xla_bridge_test.py
==================
afce718e;Jake VanderPlas;2020-06-24 16:24:33 -0700;Add ability to specify individual test targets

==

docs/developer.rst
examples/control_test.py
examples/examples_test.py
jax/experimental/jax2tf/tests/control_flow_ops_test.py
jax/experimental/jax2tf/tests/jax2tf_test.py
jax/experimental/jax2tf/tests/primitives_test.py
jax/experimental/jax2tf/tests/savedmodel_test.py
jax/experimental/jax2tf/tests/stax_test.py
jax/test_util.py
tests/api_test.py
tests/api_util_test.py
tests/array_interoperability_test.py
tests/batching_test.py
tests/callback_test.py
tests/core_test.py
tests/debug_nans_test.py
tests/doubledouble_test.py
tests/dtypes_test.py
tests/fft_test.py
tests/generated_fun_test.py
tests/host_callback_test.py
tests/infeed_test.py
tests/jax_to_hlo_test.py
tests/jet_test.py
tests/lax_autodiff_test.py
tests/lax_control_flow_test.py
tests/lax_numpy_einsum_test.py
tests/lax_numpy_indexing_test.py
tests/lax_numpy_test.py
tests/lax_numpy_vectorize_test.py
tests/lax_scipy_sparse_test.py
tests/lax_scipy_test.py
tests/lax_test.py
tests/lax_vmap_test.py
tests/linalg_test.py
tests/loops_test.py
tests/masking_test.py
tests/metadata_test.py
tests/multi_device_test.py
tests/multibackend_test.py
tests/nn_test.py
tests/ode_test.py
tests/optimizers_test.py
tests/optix_test.py
tests/parallel_test.py
tests/pmap_test.py
tests/polynomial_test.py
tests/profiler_test.py
tests/random_test.py
tests/scipy_ndimage_test.py
tests/scipy_signal_test.py
tests/scipy_stats_test.py
tests/sharded_jit_test.py
tests/stax_test.py
tests/tree_util_tests.py
tests/util_test.py
tests/vectorize_test.py
tests/xla_bridge_test.py
==================
acc95028;Erich Elsen;2020-06-29 18:19:38 +0100;Merge branch 'master' of github.com:ekelsen/jax

==
==================
77a023df;Erich Elsen;2020-06-29 18:13:36 +0100;change ending tick mark style

==

jax/lax/lax.py
==================
b362fd04;ekelsen;2020-06-29 12:39:45 +0100;Merge branch 'master' into master

==
==================
6147026b;George Necula;2020-06-29 12:48:27 +0300;[jax2tf] Add support for custom JVP/VJP (#3581)
* [jax2tf] Add support for custom JVP/VJP

The custom VJP/JVP in initial style control-flow primitives make
use of special custom_jvp_call_jaxpr primitives

* Fix flake
==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/control_flow_ops_test.py
jax/experimental/jax2tf/tests/jax2tf_test.py
jax/experimental/jax2tf/tests/tf_test_util.py
==================
491fcbb2;Erich Elsen;2020-06-29 00:50:14 +0100;floating point identity to inf

==

jax/lax/lax.py
==================
99cfbfb7;Matthew Johnson;2020-06-28 14:47:39 -0700;bump version for pypi (#3590)

==

docs/CHANGELOG.rst
jax/version.py
==================
57915dc1;Matthew Johnson;2020-06-28 14:27:07 -0700;odeint: don't hoist non-differentiable consts (#3587)
fixes #3584

This could use further revision! Left a todo.

The issue is that in #3562 we started closure-converting the dynamics
function (by tracing it to a jaxpr up-front) so as to handle closed-over
constants with respect to which we want to differentiate the odeint
call. But if the dynamics function closes over integer-valued constants,
then we can no longer call `vjp` on the closure-converted function
without getting an error.

One fix would be to support (trivial) differentiation with respect to
integer-valued inputs. That would work if we supperss the error message
for integer-valued inputs in `vjp` and add a trivial tangent space
for integer-valued arrays. Since that's potentially a further-reaching
change, this commit instead just applies a local fix to avoid adding
integer-valued inputs to the dynamics function by adapting the
closure-conversion code.
==

jax/experimental/ode.py
tests/ode_test.py
==================
b8d0de63;Erich Elsen;2020-06-28 21:33:42 +0100;remove trailing whitespace

==

jax/lax/lax.py
==================
d7e3495d;Erich Elsen;2020-06-28 20:44:43 +0100;consolidate tests

==

tests/lax_test.py
==================
290d608e;Erich Elsen;2020-06-28 20:41:48 +0100;remove now unneeded type def

==

jax/lax/lax.py
==================
1f15ffc4;Erich Elsen;2020-06-28 20:39:20 +0100;consolidate jvp rule definitions

==

jax/lax/lax.py
==================
a98249d7;Erich Elsen;2020-06-28 20:31:30 +0100;actually return the primitive

==

jax/lax/lax.py
==================
a189737e;Erich Elsen;2020-06-28 20:28:31 +0100;add generic reducer primitive generator and replace prod/max/min with it.

==

jax/lax/lax.py
==================
d3f6d85d;Erich Elsen;2020-06-28 20:21:35 +0100;remove unit and determine automatically for all ops

==

jax/lax/lax.py
==================
4fe9c1d6;Erich Elsen;2020-06-28 20:14:14 +0100;fix other branch

==

jax/lax/lax.py
==================
1e33e534;Erich Elsen;2020-06-28 20:10:27 +0100;account for different names of reducer in tpu function

==

jax/lax/lax.py
==================
294d6f89;Erich Elsen;2020-06-28 20:06:43 +0100;Also update custom tpu rule to set unit correctly based on dtype

==

jax/lax/lax.py
==================
a54a38f6;Erich Elsen;2020-06-28 19:53:47 +0100;Add default value of None for unit in TPU impl of cummax/cummin

==

jax/lax/lax.py
==================
e2fa89db;Erich Elsen;2020-06-28 19:49:36 +0100;onp.finfo -> jnp.finfo for bfloat16

==

jax/lax/lax.py
==================
ae9e6851;Erich Elsen;2020-06-28 19:44:36 +0100;use correct iinfo finfo names

==

jax/lax/lax.py
==================
812d2462;Erich Elsen;2020-06-28 19:33:20 +0100;don't require passing identity value.  It isn't the initial value - identity is required for implementation correctness

==

jax/lax/lax.py
tests/lax_test.py
==================
e9b1aae6;Erich Elsen;2020-06-28 19:13:27 +0100;add trailing p to excluded names

==

jax/experimental/jax2tf/jax2tf.py
==================
99195b25;Erich Elsen;2020-06-28 19:07:27 +0100;add cummax/min to __init__.py

==

jax/lax/__init__.py
==================
80b637dc;Erich Elsen;2020-06-28 19:03:27 +0100;ignore cummax/cummin in jax2tf

==

jax/experimental/jax2tf/jax2tf.py
==================
95e15b64;Erich Elsen;2020-06-28 18:37:50 +0100;fix typo

==

jax/lax/lax.py
==================
156f2e81;Erich Elsen;2020-06-28 18:34:05 +0100;numpy doesn't have a cummax, but it does have maximum.accumulate - curious api choice

==

tests/lax_test.py
==================
45db78d4;Erich Elsen;2020-06-28 18:21:29 +0100;add tests

==

tests/lax_test.py
==================
bf06633a;Erich Elsen;2020-06-28 18:21:09 +0100;add tests

==

jax/lax/lax.py
==================
7b57dc8c;Sri Hari Krishna Narayanan;2020-06-28 12:11:12 -0400;Issue1635 expm frechet (#2062)
* Implement Frechet derivatives for expm.

* Update expm to use the current custom gradients API.

Make some stylistic fixes.

Co-authored-by: Peter Hawkins <phawkins@google.com>
==

docs/jax.scipy.rst
jax/scipy/linalg.py
tests/linalg_test.py
==================
1f2025e1;Peter Hawkins;2020-06-28 11:27:02 -0400;Incorporate a few recent NumPy API extensions. (#3586)

==

jax/numpy/lax_numpy.py
==================
17fc8b75;Peter Hawkins;2020-06-28 11:26:48 -0400;Implement DeviceArray.tobytes(). (#3585)
Move tolist() implementation onto DeviceArray; there's no reason to populate it dynamically.
==

jax/interpreters/xla.py
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
496cde6e;George Necula;2020-06-27 14:55:28 +0300;[jax2tf] Add special case for translation of lax.gather to tf.gather. (#3486)
Also adds more tests for conversion for gather.
==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
ccb640af;Roy Frostig;2020-06-26 19:50:41 -0700;lax.sort: stable by default

==

jax/lax/lax.py
==================
6eea0ce1;Roy Frostig;2020-06-26 15:54:53 -0700;detailed assertion in profiler test

==

tests/profiler_test.py
==================
c7e97b79;Roy Frostig;2020-06-25 17:10:56 -0700;limit jaxpr context in typechecker error messages

==

jax/core.py
tests/core_test.py
==================
c54acbf9;Roy Frostig;2020-06-25 10:17:54 -0700;introduce custom typecheck rules, implement them for cond and scan

==

jax/core.py
jax/lax/lax_control_flow.py
tests/core_test.py
==================
6b3b42d9;Roy Frostig;2020-06-24 15:31:33 -0700;raise a custom error in jaxpr checker

==

jax/core.py
tests/core_test.py
==================
42cbe49c;frederikwilde;2020-06-27 00:19:57 +0200;Correction a typo of the period of the PRNG. (#3578)

==

docs/notebooks/Common_Gotchas_in_JAX.ipynb
==================
5116fd47;Peter Hawkins;2020-06-26 17:09:09 -0400;Add a heap profiler API and document it. (#3576)

==

docs/_static/device_memory_profile.svg
docs/_static/device_memory_profile_leak1.svg
docs/_static/device_memory_profile_leak2.svg
docs/device_memory_profiling.md
docs/index.rst
docs/jax.profiler.rst
docs/profiling.md
jax/profiler.py
tests/profiler_test.py
==================
63ff6cb8;Malcolm Reynolds;2020-06-26 19:44:50 +0100;Clarify docs on jax.lax.cond. (#3569)

==

jax/lax/lax_control_flow.py
==================
11caa21e;Matthew Johnson;2020-06-26 11:44:16 -0700;ensure lax.reduce monoid test uses original numpy (#3573)

==

jax/lax/lax.py
==================
99a43f20;Norman Casagrande;2020-06-26 18:40:00 +0100;Added missing is_stable argument to lax.sort (#3553)

==

jax/lax/lax.py
tests/lax_autodiff_test.py
tests/lax_test.py
tests/lax_vmap_test.py
==================
b576417e;Peter Hawkins;2020-06-26 13:20:59 -0400;Update README for jaxlib 0.1.50 release. (#3574)

==

README.md
==================
66cea027;Peter Hawkins;2020-06-26 12:50:22 -0400;Fix test failures on GPU. (#3572)

==

tests/debug_nans_test.py
tests/lax_control_flow_test.py
tests/lax_scipy_test.py
tests/polynomial_test.py
==================
8f86b139;Peter Hawkins;2020-06-26 11:20:51 -0400;Update docker script for CUDA 11. (#3571)

==

build/install_cuda.sh
==================
26c6c3a4;Matthew Johnson;2020-06-25 20:57:34 -0700;fix error when doing forward-mode of odeint (#3566)
fixes #3558
==

jax/custom_derivatives.py
tests/ode_test.py
==================
4b1bb189;Jake Vanderplas;2020-06-25 20:08:14 -0700;Fix logsumexp test (#3563)
Previously, this test could generate an axis out of bounds error with large num_generated_cases. (discovered in the process of testing #3561)
==

tests/lax_scipy_test.py
==================
062ce297;Matthew Johnson;2020-06-25 19:17:24 -0700;removed stale faq entries (#3565)

==

docs/faq.rst
==================
c2501d1b;Matthew Johnson;2020-06-25 17:48:21 -0700;update version and changelog for pypi (#3564)

==

docs/CHANGELOG.rst
jax/version.py
==================
db80ca5d;Matthew Johnson;2020-06-25 17:36:17 -0700;allow closures for odeint dynamics functions (#3562)
* allow closures for odeint dynamics functions

fixes #2718, #3557

* add tests for odeint dynamics closing over tracers
==

jax/experimental/ode.py
tests/ode_test.py
==================
2a6fc316;Peter Hawkins;2020-06-25 15:12:47 -0400;Update XLA in preparation for a new jaxlib release (0.1.50). (#3560)

==

WORKSPACE
docs/CHANGELOG.rst
jaxlib/version.py
==================
a141cc6e;Peter Hawkins;2020-06-25 14:37:14 -0400;Make CUDA wheels manylinux2010 compliant, add CUDA 11, drop CUDA 9.2 (#3555)
* Use dynamic loading to locate CUDA libraries in jaxlib.

This should allow jaxlib CUDA wheels to be manylinux2010 compliant.

* Tag CUDA jaxlib wheels as manylinux2010.

Drop support for CUDA 9.2, add support for CUDA 11.0.

* Reorder CUDA imports.
==

build/build.py
build/build_jaxlib_wheels.sh
build/build_wheel_docker_entrypoint.sh
jaxlib/BUILD
==================
c9670d50;Jamie Townsend;2020-06-25 15:50:11 +0100;Fix lazy broadcast issue (#3536)

==

jax/lax/lax.py
tests/lax_test.py
==================
93054fa1;Matthew Johnson;2020-06-25 07:26:26 -0700;add remat to top-level docs (#3554)

==

docs/jax.rst
==================
32e419d1;Peter Hawkins;2020-06-25 08:14:54 -0400;Fix eigh JVP to ensure that both the primal and tangents of the eigen… (#3550)
* Fix eigh JVP to ensure that both the primal and tangents of the eigenvalues are real.

Add test to jax.test_util.check_jvp that ensure the primals and both the primals and tangents produced by a JVP rule have identical types.

* Cast input to static indexing grad tests to a JAX array so new type check passes.
==

jax/lax_linalg.py
jax/test_util.py
tests/lax_numpy_indexing_test.py
tests/linalg_test.py
==================
696958d2;Matthew Johnson;2020-06-24 16:11:26 -0700;add remat docstring (#3542)
* add remat docstring

first part of addressing #3314
==

jax/api.py
==================
7e5407c7;igorwilbert;2020-06-24 19:00:24 -0300;Fix typos pytrees page on readthedocs (#3548)

==

docs/pytrees.rst
==================
a9c7413f;Peter Hawkins;2020-06-24 16:15:59 -0400;Fix failure in PyTorch array interoperability test in non-x64 mode. (#3546)

==

tests/array_interoperability_test.py
==================
e680304d;Peter Hawkins;2020-06-24 15:59:31 -0400;Remove warning suppression for tuple and list arguments to reductions. (#3545)
Fix callers.
==

jax/experimental/jax2tf/tests/primitives_test.py
jax/numpy/lax_numpy.py
jax/numpy/linalg.py
pytest.ini
==================
677baa54;Jony Hudson;2020-06-24 20:47:09 +0100;Clarify docstrings regarding usage of static arguments in jit and vmap. (#3484)
The docstring for pmap does not currently mention that any "non-data"
arguments need to be indicated in `static_broadcasted_argnums`. This
commit updates the docs to parallel those for `jax.jit` which does
explain this. Additionally, a remark is added to the `static_*` argument
descriptions on both jit and pmap, so that this point can be understood
without reading the whole docstring.
==

jax/api.py
==================
f036f5dd;Peter Hawkins;2020-06-24 15:19:00 -0400;Avoid direct type/dtype comparisons to fix NumPy 1.19 deprecation war… (#3543)
* Avoid direct type/dtype comparisons to fix NumPy 1.19 deprecation warnings.

* Pin a newer tf-nightly to fix jax2tf tests for NumPy 1.19.0
==

build/test-requirements.txt
jax/dtypes.py
jax/numpy/lax_numpy.py
setup.py
==================
90894a28;Peter Hawkins;2020-06-24 14:41:20 -0400;Fix test failures due to RuntimeWarning in variance tests. (#3541)

==

tests/lax_numpy_test.py
==================
28262da1;Peter Hawkins;2020-06-24 14:31:37 -0400;Restrict .compress tests to arrays only. (#3540)
Fixes test failures with 100 generated cases.
==

tests/lax_numpy_test.py
==================
a422f635;Peter Hawkins;2020-06-24 14:25:47 -0400;Merge quantile and nanquantile implementations. (#3539)
Allows more code sharing, and adds support for other interpolation modes to nanquantile().
==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
a44bc0c2;Ayush Shridhar;2020-06-24 22:01:16 +0530;Add np.diag_indices_from (#3500)

==

docs/jax.numpy.rst
jax/numpy/__init__.py
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
fede6d90;Peter Hawkins;2020-06-24 12:16:56 -0400;Add missing functions to documentation. (#3538)

==

docs/jax.numpy.rst
==================
c357aadc;yurodiviy;2020-06-24 18:16:45 +0300;Implement nan-quantile/median/percentile (#2397)
* Implement nan-quantile/median/percentile

* Fix flake8 error.

Co-authored-by: Peter Hawkins <phawkins@google.com>
==

jax/numpy/__init__.py
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
db2291bd;Norman Casagrande;2020-06-24 16:13:56 +0100;Fixed issue with the 'compress' method of 'jnp.ndarray' (#3537)
* Fixed issue with the 'compress' method of 'jnp.ndarray' behaving differently than the free function

* Added test
==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
319eeaf5;joao guilherme;2020-06-24 11:54:06 -0300;Future warning about lists and tuples (#3369)

==

jax/numpy/lax_numpy.py
pytest.ini
==================
a6e3f992;clemisch;2020-06-24 15:22:35 +0200;Add np.unwrap (#3527)

==

jax/numpy/__init__.py
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
edcd43ac;Roy Frostig;2020-06-11 17:15:23 -0700;de-duplicate constants when lowering to XLA
Co-authored-by: Matthew Johnson <mattjj@google.com>

==

jax/interpreters/xla.py
tests/api_test.py
==================
9d173c62;David Pfau;2020-06-23 23:36:45 +0100;Support `b` and `return_sign` in scipy.special.logsumexp (#3488)

==

jax/scipy/special.py
tests/lax_scipy_test.py
==================
74ee2ef6;Matthew Johnson;2020-06-23 14:03:36 -0700;avoid value-based error check in random.choice (#3531)

==

jax/random.py
==================
a45e2837;Matthew Johnson;2020-06-23 12:08:12 -0700;add back a full_lower, dropped in #3491 (#3530)

==

jax/core.py
jax/interpreters/invertible_ad.py
==================
75278309;Matthew Johnson;2020-06-23 09:39:45 -0700;refactor call primitives, simpler param processing (#3491)

==

jax/api.py
jax/core.py
jax/custom_derivatives.py
jax/experimental/host_callback.py
jax/interpreters/ad.py
jax/interpreters/invertible_ad.py
jax/interpreters/partial_eval.py
jax/interpreters/pxla.py
jax/interpreters/sharded_jit.py
jax/interpreters/xla.py
tests/api_test.py
==================
d5a5d301;Jake Vanderplas;2020-06-23 08:28:04 -0700;lax.sort: allow any sequence of Arrays, not just tuples (#3367)

==

jax/lax/lax.py
==================
7cc26505;David Majnemer;2020-06-23 07:35:41 -0700;Fix lax_reference's round for edge case inputs (#3309)
* Fix lax_reference's round for edge case inputs

- round(8388609) would compute trunc(8388609 + 0.5) == 8388610.
  Fix this by not modifying sufficiently inputs.
- round(0.499999970198) would compute trunc(0.499999970198 + 0.5) == 1.0
  Fix this by explicitly special casing the first float before 0.5.

* Add explicit casts to lax_reference implementation of `round`.

Co-authored-by: Peter Hawkins <phawkins@google.com>
==

jax/lax_reference.py
==================
86fcfbfa;Peter Hawkins;2020-06-23 09:29:58 -0400;Fix memory leak when no axis is provided to pmap. (#3394)
* Fix memory leak when no axis is provided to pmap.

* Work around flake8 false positive.

Co-authored-by: Matthew Johnson <mattjj@google.com>
==

jax/api.py
tests/pmap_test.py
==================
490c8533;Thomas Keck;2020-06-23 14:25:53 +0100;Adds boolean support for bitwise not and unittests for boolean support on logical operations. (#3483)
Co-authored-by: Thomas Keck <thomaskeck@google.com>
==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
5ee6bc00;clemisch;2020-06-23 05:46:41 +0200;Remove unnecessary static_argnum in np.gradient (#3512)

==

jax/numpy/lax_numpy.py
==================
02494924;Matthew Johnson;2020-06-22 20:04:07 -0700;fix an issue with newer versions of pytype (#3526)

==

jax/interpreters/partial_eval.py
==================
33c455a1;Jake Vanderplas;2020-06-22 19:49:00 -0700;Add jax.scipy.signal.detrend (#3516)

==

jax/scipy/signal.py
tests/scipy_signal_test.py
==================
ca5b0b18;Tom Hennigan;2020-06-23 03:44:09 +0100;Cast int8 to bool for lax.not in jax2tf. (#3519)

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/primitives_test.py
==================
046006e0;Neil;2020-06-22 22:43:25 -0400;Fix typo: np.bool -> np.bool_ (#3525)
Replaced np.bool (which is just bool) with np.bool_, which is numpy's
Boolean type.
==

jax/experimental/host_callback.py
jax/experimental/jax2tf/tests/primitives_test.py
jax/numpy/lax_numpy.py
==================
2f7108f7;Matthew Johnson;2020-06-22 17:50:33 -0700;remove the lower_fun default multiple_results=True (#3524)

==

jax/api.py
jax/interpreters/xla.py
jax/lax_linalg.py
jax/random.py
==================
8fe6da08;Skye Wanderman-Milne;2020-06-22 17:33:23 -0700;Add instructions for how to use the TensorBoard profiler to the profiling docs. (#3481)

==

docs/_static/tensorboard_profiler.png
docs/profiling.md
==================
71023227;Jake Vanderplas;2020-06-22 16:16:30 -0700;Add private class wrapper for double-double arithmetic (#3521)

==

jax/experimental/doubledouble.py
tests/doubledouble_test.py
==================
e5d4ca31;igorwilbert;2020-06-22 16:31:08 -0300;Fix typo understanding jaxprs page on readthedocs (#3513)

==

docs/jaxpr.rst
==================
18798a30;Skye Wanderman-Milne;2020-06-22 11:02:41 -0700;Revert "Remove documentation presubmit action now that the RTD presubmit is enabled. (#3480)" (#3497)
This (partially) reverts commit 68dcbdd1189cd938bf6023e4e1efaf64c71629aa.

@hawkinsp points out this was running doctest, which the RTD presubmit doesn't do AFAIK. We still don't build the docs here, as the RTD presubmit takes care of that.

Co-authored-by: Stephan Hoyer <shoyer@google.com>
==

.github/workflows/ci-build.yaml
==================
a81e732d;Matthew Johnson;2020-06-22 10:27:44 -0700;fix jet typo: jnp not np (#3507)

==

jax/experimental/jet.py
==================
f8570ec0;8bitmp3;2020-06-22 18:08:03 +0100;Update JAX FAQ.rst, jax.device_put (#3496)

==

docs/faq.rst
==================
3fff8379;Matthew Johnson;2020-06-22 08:12:41 -0700;pin numpy version in setup.py to avoid warnings (#3509)

==

setup.py
==================
7f9fc27c;8bitmp3;2020-06-21 21:52:34 +0100;Another small fix of the link rendering in the Autodiff Cookbook - vmap transformation (#3502)

==

docs/notebooks/autodiff_cookbook.ipynb
==================
f0dff9c1;8bitmp3;2020-06-21 19:07:29 +0100;Fix a link rendering to Autograd's reverse-mode Jacobian method (#3501)

==

docs/notebooks/autodiff_cookbook.ipynb
==================
1ed60b3f;Jake Vanderplas;2020-06-19 16:46:06 -0700;support stacked doubling (#3490)

==

jax/experimental/doubledouble.py
tests/doubledouble_test.py
==================
19f308b9;Jake Vanderplas;2020-06-19 16:04:42 -0700;implement jax.random.choice (#3463)

==

jax/random.py
tests/random_test.py
==================
8f4ba7e6;Skye Wanderman-Milne;2020-06-19 15:51:12 -0700;Allow specifying both `devices` and `axis_size` to pmap. (#3475)
This allows providing custom device assignments to nested pmaps or pmap-of-sharded_jit when running on a multi-host platform.
==

docs/faq.rst
jax/api.py
jax/interpreters/pxla.py
tests/pmap_test.py
==================
a088c023;Skye Wanderman-Milne;2020-06-19 13:27:12 -0700;Bump jaxlib version to 0.1.49 and update WORKSPACE (#3495)

==

WORKSPACE
docs/CHANGELOG.rst
jaxlib/version.py
==================
925d6611;Peter Hawkins;2020-06-19 10:14:53 -0400;Fix test failure in jax2tf due to conflicting merges. (#3492)

==

jax/experimental/jax2tf/jax2tf.py
==================
927c2091;Srinivas Vasudevan;2020-06-19 06:34:18 -0700;Add random_gamma_grad and use in jax.random.gamma (#3281)

==

jax/lax/__init__.py
jax/lax/lax.py
jax/random.py
tests/random_test.py
==================
0da7b4d1;Jake Vanderplas;2020-06-18 15:17:13 -0700;Improve dtype test coverage for random_test (#3254)

==

tests/random_test.py
==================
57d5a390;George Necula;2020-06-18 21:01:40 +0300;Disable the workaround to prevent expansion of type aliases (#3485)
* Disable the workaround to prevent expansion of type aliases

* Fix flake
==

docs/conf.py
==================
3b4a1230;George Necula;2020-06-18 15:38:50 +0300;[jax2tf] Control on which TF device the TF converted code runs. (#3482)
* [jax2tf] Control on which TF device the TF converted code runs.

The device should match the device on which the JAX code runs,
otherwise the numerical comparisons don't make sense.

* This code requires some build-file changes in Google3 to properly
  run on GPU and TPU.

* Fix warnings
==

jax/experimental/jax2tf/tests/jax2tf_test.py
jax/experimental/jax2tf/tests/tf_test_util.py
==================
a05263f5;James Bradbury;2020-06-17 21:42:17 -0700;Avoid tuple psum in pmean (#3479)
We have an optimization to avoid doing flops (or rather, communication) for `psum(1)` (instead we look up the axis size at trace time). But although `pmean(x)`, meaning `psum(x) / psum(1)`, is likely the most common user of `psum(1)`, it doesn't actually trigger this optimization right now because it's implemented as `psum((x, 1))` and `bind` lifts the 1 into the same `JaxprTrace` as `x` rather than letting the psum impl rule see it. The major reason for using tuple psum—providing a fixed order to avoid multihost GPU deadlocks—doesn't apply here because we don't expect the `psum(1)` to lower to an actual XLA AllReduce.
==

jax/lax/lax_parallel.py
==================
68dcbdd1;Skye Wanderman-Milne;2020-06-17 17:15:25 -0700;Remove documentation presubmit action now that the RTD presubmit is enabled. (#3480)

==

.github/workflows/ci-build.yaml
==================
8bc78205;Skye Wanderman-Milne;2020-06-17 16:59:14 -0700;Use myst to parse markdown docs, and convert a page from rst to markdown. (#3477)
Also sets the minimum sphinx version to 2.1.
==

docs/conf.py
docs/profiling.md
docs/profiling.rst
docs/requirements.txt
==================
3290e16a;Peter Hawkins;2020-06-17 19:35:36 -0400;Attach source info to Jaxpr equations. (#3421)
* Attach source info to Jaxpr equations.

Example:
```
In [1]: import jax, jax.numpy as jnp
In [2]: def f(x, y):
   ...:    z = jax.numpy.cos(x)
   ...:    z = z * jax.numpy.tanh(y)
   ...:    return z + 2
   ...:

In [3]: jax.make_jaxpr(jax.value_and_grad(f))(7., 9.)
Out[3]:
{ lambda  ; a b.
  let c = cos a  [<ipython-input-2-5d59f71cb65d>:2 (f)]
      d = tanh b  [<ipython-input-2-5d59f71cb65d>:3 (f)]
      e = mul c d  [<ipython-input-2-5d59f71cb65d>:3 (f)]
      f = add e 2.0  [<ipython-input-2-5d59f71cb65d>:4 (f)]
      g = mul 1.0 d  [<ipython-input-2-5d59f71cb65d>:3 (f)]
      h = neg g  [<ipython-input-2-5d59f71cb65d>:2 (f)]
      i = sin a  [<ipython-input-2-5d59f71cb65d>:2 (f)]
      j = mul h i  [<ipython-input-2-5d59f71cb65d>:2 (f)]
  in (f, j) }

In [7]: print(jax.xla_computation(jax.value_and_grad(f))(7., 9.).as_hlo_module().to_string())
HloModule xla_computation_f__4.15

ENTRY %xla_computation_f__4.15 (parameter.1: f32[], parameter.2: f32[]) -> (f32[], f32[]) {
  %constant.3 = pred[] constant(false)
  %parameter.1 = f32[] parameter(0)
  %cosine.4 = f32[] cosine(f32[] %parameter.1), metadata={op_type="cos" op_name="xla_computation(f)/cos" source_file="<ipython-input-2-5d59f71cb65d>" source_line=2}
  %parameter.2 = f32[] parameter(1)
  %tanh.5 = f32[] tanh(f32[] %parameter.2), metadata={op_type="tanh" op_name="xla_computation(f)/tanh" source_file="<ipython-input-2-5d59f71cb65d>" source_line=3}
  %multiply.6 = f32[] multiply(f32[] %cosine.4, f32[] %tanh.5), metadata={op_type="mul" op_name="xla_computation(f)/mul" source_file="<ipython-input-2-5d59f71cb65d>" source_line=3}
  %constant.7 = f32[] constant(2), metadata={op_type="add" op_name="xla_computation(f)/add" source_file="<ipython-input-2-5d59f71cb65d>" source_line=4}
  %add.8 = f32[] add(f32[] %multiply.6, f32[] %constant.7), metadata={op_type="add" op_name="xla_computation(f)/add" source_file="<ipython-input-2-5d59f71cb65d>" source_line=4}
  %constant.9 = f32[] constant(1), metadata={op_type="mul" op_name="xla_computation(f)/mul" source_file="<ipython-input-2-5d59f71cb65d>" source_line=3}
  %multiply.10 = f32[] multiply(f32[] %constant.9, f32[] %tanh.5), metadata={op_type="mul" op_name="xla_computation(f)/mul" source_file="<ipython-input-2-5d59f71cb65d>" source_line=3}
  %negate.11 = f32[] negate(f32[] %multiply.10), metadata={op_type="neg" op_name="xla_computation(f)/neg" source_file="<ipython-input-2-5d59f71cb65d>" source_line=2}
  %sine.12 = f32[] sine(f32[] %parameter.1), metadata={op_type="sin" op_name="xla_computation(f)/sin" source_file="<ipython-input-2-5d59f71cb65d>" source_line=2}
  %multiply.13 = f32[] multiply(f32[] %negate.11, f32[] %sine.12), metadata={op_type="mul" op_name="xla_computation(f)/mul" source_file="<ipython-input-2-5d59f71cb65d>" source_line=2}
  ROOT %tuple.14 = (f32[], f32[]) tuple(f32[] %add.8, f32[] %multiply.13)
}
```

Co-authored-by: Matthew Johnson <mattjj@google.com>
==

build/test-requirements.txt
docs/CHANGELOG.rst
jax/core.py
jax/experimental/host_callback.py
jax/interpreters/ad.py
jax/interpreters/invertible_ad.py
jax/interpreters/partial_eval.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
jax/lax/lax_control_flow.py
jax/lib/__init__.py
jax/pprint_util.py
jax/source_info_util.py
==================
3c6c0af4;Jake Vanderplas;2020-06-17 15:09:54 -0700;disable new jax2tf TPU test (#3476)

==

jax/experimental/jax2tf/tests/jax2tf_test.py
==================
5a74ebf2;Jake Vanderplas;2020-06-17 14:59:40 -0700;Add experimental precision doubling transform (#3465)
This PR adds an experimental precision doubling transform, following the basic approach outlined in Dekker 1971 ([pdf](http://csclub.uwaterloo.ca/~pbarfuss/dekker1971.pdf)). When this transform is applied, the number of significant bits is approximately doubled compared to the base operation.

 Simple demo:
```python
In [1]: import jax.numpy as jnp                                                                                        

In [2]: from jax.experimental.doubledouble import doubledouble                                                         

In [3]: def f(a, b): 
   ...:     return a + b - a 
   ...:                                                                                                                

In [4]: f(1E20, 1.0)  # float64 loses precision
Out[4]: 0.0

In [5]: g = doubledouble(f)(1E20, 1.0)
Out[5]: DeviceArray(1., dtype=float64)
```

This initial experiment supports basic arithmetic operators and inequalities.
==

jax/experimental/doubledouble.py
tests/doubledouble_test.py
==================
5344ec53;Matthew Johnson;2020-06-17 10:05:28 -0700;use original numpy for shape calculations (#3474)
cf. #3453
==

jax/numpy/lax_numpy.py
==================
5ee936fd;Ayush Shridhar;2020-06-18 02:43:50 +1000;Add polyder numpy function (#3403)

==

docs/jax.numpy.rst
jax/numpy/__init__.py
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
4f21b935;George Necula;2020-06-17 11:57:21 +0300;[jax2tf] Added special case for tf.pad. (#3462)
Fixed lax_reference.pad to handle lax.pad with negative edge padding.
==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/primitives_test.py
jax/lax_reference.py
tests/lax_test.py
==================
ce782e61;George Necula;2020-06-17 11:56:32 +0300;Fixed bug with silent TF using 64-bit operations in 32-bit mode. (#3471)
We already cast the NumPy arrays to 32-bit, but this was not happening
if the input was tf.Variable or tf.constant.

In the process I have added some invariant checks, if core.skip_checks is
False, which it always is in testing.

Added also some sanity checking or arguments.
==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/jax2tf_test.py
==================
575216e0;Jacob Kelly;2020-06-16 22:48:25 -0400;add jet primitives, refactor tests (#3468)
Co-authored-by: Jesse Bettencourt <jessebett@cs.toronto.edu>
==

jax/experimental/jet.py
jax/lax/lax.py
tests/jet_test.py
==================
e9ce700b;Matthew Johnson;2020-06-16 15:48:01 -0700;update tpu readme not to pin jax / jaxlib versions (#3467)

==

cloud_tpu_colabs/README.md
==================
20f4ec64;Matthew Johnson;2020-06-16 15:46:51 -0700;fix a bug from #3459 (#3466)

==

jax/interpreters/partial_eval.py
==================
df3b507c;Roy Frostig;2020-06-16 14:14:39 -0700;update jaxlib version in readme

==

README.md
==================
a70ba920;Roy Frostig;2020-06-15 19:38:38 -0700;jaxpr pretty-print: wrap equation RHS when the LHS is long

==

jax/core.py
==================
711c93db;Matthew Johnson;2020-06-16 12:20:59 -0700;Merge pull request #3459 from google/simplify-remat-partial-eval
simplify remat partial eval parameterization
==
==================
dfdf05fe;Matthew Johnson;2020-06-16 11:56:42 -0700;deflake

==

jax/interpreters/invertible_ad.py
==================
005958e1;Matthew Johnson;2020-06-16 11:46:37 -0700;added reviewer suggestion

==

jax/interpreters/invertible_ad.py
==================
140c9ea9;Matthew Johnson;2020-06-15 22:19:14 -0700;Merge pull request #3396 from JuliusKunze/simplify-scan-mask
Remove special case for scan masking
==
==================
270e9214;Matthew Johnson;2020-06-15 22:17:25 -0700;Merge pull request #3456 from jacobjinkelly/int_pow
Jet rule for `integer_pow`
==
==================
60760f27;Matthew Johnson;2020-06-15 22:16:04 -0700;Merge pull request #3455 from jacobjinkelly/erf_inv
add erf_inv rule
==
==================
c30d23f4;Matthew Johnson;2020-06-15 22:15:43 -0700;Merge pull request #3429 from BuddenD/changelist/316251368
Propagate raw __name__ of functions wrapped by jit and sharded_jit.
==
==================
fe14aa3e;Matthew Johnson;2020-06-15 22:15:34 -0700;Merge branch 'master' into changelist/316251368

==
==================
08b83e84;Matthew Johnson;2020-06-15 22:12:29 -0700;Merge pull request #3426 from google/warn-jit-of-pmap
print warning when doing jit-of-pmap
==
==================
d4c6cb62;Matthew Johnson;2020-06-12 16:10:45 -0700;print warning when doing jit-of-pmap

==

jax/api.py
jax/interpreters/xla.py
tests/pmap_test.py
==================
8a901ba0;Matthew Johnson;2020-06-15 19:36:45 -0700;deflake

==

jax/interpreters/invertible_ad.py
==================
5d20c6fd;Du Phan;2020-06-15 22:21:26 -0400;add scipy.special.zeta, scipy.special.polygamma (#3385)

==

docs/jax.scipy.rst
jax/scipy/special.py
tests/lax_scipy_test.py
==================
05e0716f;Matthew Johnson;2020-06-15 18:42:53 -0700;simplify remat partial eval parameterization
The main win here is reducing the number of arguments for the function
that parameterizes _remat_partial_eval (so it can be used both with
remat and invertible ad features).

I also included a fix to _remat_partial_eval that is needed in #3370,
though I don't think it's needed on master. It was easier to include the
fix now.

Both these changes made rebasing #3370 easier!

==

jax/interpreters/invertible_ad.py
jax/interpreters/partial_eval.py
tests/api_test.py
==================
f463598f;Jacob Kelly;2020-06-15 17:23:57 -0400;add int pow rule

==

jax/experimental/jet.py
tests/jet_test.py
==================
6bcf0568;Jake Vanderplas;2020-06-15 13:02:59 -0700;Fix jnp.arange(x) for fractional x (#3453)

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
3cf6b1de;Jacob Kelly;2020-05-11 23:44:32 -0400;add erf inv rule
erf_inv rule not working

works up to order 2

erf inv rule

use np for now

actually use np for now

==

jax/experimental/jet.py
tests/jet_test.py
==================
37f4722f;Matthew Johnson;2020-06-15 11:07:06 -0700;Merge pull request #3449 from google/issue3440
add systematic tests for vmap-of-pmap
==
==================
12160fef;Matthew Johnson;2020-06-15 09:15:56 -0700;deflake

==

tests/lax_vmap_test.py
==================
fcfcffe3;Matthew Johnson;2020-06-15 09:10:40 -0700;add systematic tests for vmap-of-pmap
fixes #3440

Also re-applies the fix in #3439 (i.e it rolls-back the rollback PR #3448) because we're now confident it's correct (and some internal tests are buggy).

==

jax/interpreters/batching.py
tests/lax_vmap_test.py
tests/pmap_test.py
==================
ea9af1b0;Matthew Johnson;2020-06-15 07:59:55 -0700;Merge pull request #3448 from google/roll-back-3439
roll back of #3439 while we debug internal fails
==
==================
12ce6e37;Matthew Johnson;2020-06-15 07:32:42 -0700;roll back of #3439 while we debug internal fails

==

jax/interpreters/batching.py
tests/pmap_test.py
==================
4d40b208;Adam Paszke;2020-06-15 12:35:06 +0200;Initial version of invertible AD implementation (#3232)
This is a prototype implementation of the memory-efficient VJP method
for invertible function. The general idea is that thanks to
invertibility, we don't have to memoize any intermediate primal values,
but can simply reconstruct them in lock-step with gradient computation.
The API is such that the only thing a user has to do, is decorate a
function with `@invertible`, which will make AD apply the more efficient
transpose than usual.

The current version is expressive enough to support e.g. the Reversible
ResNet, but there are still some caveats:
- The definition of "invertible" function is a one that produces a jaxpr
  that can be inverted correctly if only we iterate over its equations
  in reverse. This is a bit strict, because users generally don't have
  too much control over that, and there are functions that produce
  jaxprs which will be treated as invertible when one topological
  ordering of equations is used, while they will be considered
  non-invertible for other valid orderings.
- It doesn't follow the usual jvp + transpose path, and it turns out
  that zero argument pruning in JVPTrace makes it pretty much impossible
  to implement correctly.
- `custom_ivjp` is an initial-style primitive.
- Invertible reverse-mode implementation (`rev_backward_pass`) assumes
  that all the VJPs of primal primitives are jittable (not sure if
  that's a problem, but worth pointing out).
- Not having a dedicated linearization pass makes the JVP of
  `custom_ivjp` inefficient if it is being staged out.
==

jax/__init__.py
jax/api.py
jax/interpreters/invertible_ad.py
jax/interpreters/partial_eval.py
jax/lax/lax.py
tests/api_test.py
==================
3c78605b;David Budden;2020-06-13 11:39:01 +0100;Propagate raw __name__ and __doc__ of functions wrapped by jit and sharded_jit.

==

jax/api.py
jax/interpreters/sharded_jit.py
==================
2e3d4393;George Necula;2020-06-15 12:14:09 +0300;[jax2tf] fix the too-early use of tf.constant (#3446)
If I leave it at top-level, I get test failures about missing platform Host
==

jax/experimental/jax2tf/jax2tf.py
==================
8c3354f5;George Necula;2020-06-15 11:40:50 +0300;[jax2tf] separated primitives_test.py (#3445)
* Started reorg

* [jax2tf] separated the primitives_test.py
==

jax/experimental/jax2tf/tests/jax2tf_test.py
jax/experimental/jax2tf/tests/primitives_test.py
jax/experimental/jax_to_tf/__init__.py
jax/experimental/jax_to_tf/jax_to_tf.py
==================
1440ccf4;George Necula;2020-06-15 10:59:46 +0300;Fixed bug in argument type promotion for dynamic_update_slice (#3427)
Also added tests for lax.slice, lax.dynamic_slice and
lax.dynamic_update_slice.
==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/tf_ops_test.py
==================
26b6ebaf;George Necula;2020-06-15 10:32:27 +0300;[jax2tf] Fixed the handling of `core.unit` in control-flow primitives. (#3432)
* Fixed the handling of `core.unit` in control-flow primitives.

* Remove add_any from the list of unimplemented tf ops
==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/control_flow_ops_test.py
==================
0e804296;George Necula;2020-06-15 10:05:23 +0300;Added jax2tf test about primitive coverage (#3420)

==

jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/tf_ops_test.py
==================
3deada9e;Stephan Hoyer;2020-06-14 21:42:45 -0700;Document valid enum values for precision. (#3441)
This is a little tricky to figure out otherwise.
==

jax/lax/lax.py
jax/numpy/lax_numpy.py
==================
c9d1b99e;Matthew Johnson;2020-06-14 19:26:16 -0700;Merge pull request #3439 from google/issue3399
fix vmap-of-pmap mapped_invars logic bug
==
==================
021c02ce;Matthew Johnson;2020-06-14 14:51:30 -0700;Merge pull request #3436 from google/issue3419
add jax.numpy.concatenate(..., axis=None) support
==
==================
29fa935c;Matthew Johnson;2020-06-14 14:45:29 -0700;fix vmap-of-pmap mapped_invars logic bug
fixes #3399

This crept in via #1959, but more importantly it shows we don't have
good test coverage here!

==

jax/interpreters/batching.py
tests/pmap_test.py
==================
48206764;Matthew Johnson;2020-06-14 13:56:53 -0700;add jax.numpy.concatenate(..., axis=None) support
fixes #3419

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
b2105ab3;Matthew Johnson;2020-06-14 10:41:53 -0700;Merge pull request #3434 from google/autodiff-cookbook-complex-bug-fixes
fix and better explain complex JVPs / VJPs
==
==================
0c29cc15;Matthew Johnson;2020-06-14 10:13:56 -0700;fix typos

==

docs/notebooks/autodiff_cookbook.ipynb
==================
1b88fba5;Matthew Johnson;2020-06-14 10:09:15 -0700;fix and better explain complex JVPs / VJPs
fixes #3433

==

docs/notebooks/autodiff_cookbook.ipynb
==================
269da0ae;Matthew Johnson;2020-06-12 16:17:22 -0700;Merge pull request #3425 from google/document-ravel-pytree
add docstring to ravel_pytree
==
==================
159a61b2;Matthew Johnson;2020-06-12 15:41:49 -0700;deflake

==

jax/flatten_util.py
==================
ae9df752;Matthew Johnson;2020-06-12 15:41:07 -0700;add docstring to ravel_pytree

==

docs/jax.rst
jax/flatten_util.py
jax/tree_util.py
==================
4a836ff8;Roy Frostig;2020-06-11 20:09:58 -0700;factor autodiff and vmap tests out from lax_test

==

tests/lax_autodiff_test.py
tests/lax_test.py
tests/lax_vmap_test.py
==================
ddea95e6;Roy Frostig;2020-06-11 19:17:07 -0700;reuse commonly-typed input/output values when joining partially evaluated conditional branches

==

jax/lax/lax_control_flow.py
tests/lax_control_flow_test.py
==================
dd040de1;Peter Hawkins;2020-06-12 14:46:45 -0400;Bump XLA version. (#3424)
Update jaxlib release notes.
==

WORKSPACE
docs/CHANGELOG.rst
==================
05fde0f1;Matthew Johnson;2020-06-12 09:01:38 -0700;Merge pull request #3418 from fehiepsi/poissontype
allow scalar input in poisson sampler
==
==================
2dac55a0;Adam Paszke;2020-06-12 15:03:26 +0200;Skip known invars and outvars in JaxprTrace.process_call (#3242)

==

jax/interpreters/masking.py
jax/interpreters/partial_eval.py
jax/interpreters/pxla.py
==================
b680c994;fehiepsi;2020-06-12 01:42:25 -0400;allow scalar input in poisson sampler

==

jax/random.py
==================
d55c0ede;Matthew Johnson;2020-06-11 18:48:30 -0700;Merge pull request #3413 from google/issue3412
make jnp.array(x, copy=True) copies device buffers
==
==================
ae60654d;Peter Hawkins;2020-06-11 19:12:29 -0400;Change build badge from Travis to Github actions. (#3414)

==

README.md
==================
c6dcbe21;Matthew Johnson;2020-06-11 15:14:57 -0700;supress warnings in test

==

tests/api_test.py
==================
a8e9e4f7;Matthew Johnson;2020-06-11 14:36:04 -0700;fix lint error

==

tests/api_test.py
==================
1a433620;Matthew Johnson;2020-06-11 14:21:02 -0700;make jnp.array(x, copy=True) copies device buffers
fixes #3412

==

jax/numpy/lax_numpy.py
tests/api_test.py
==================
04c9b327;Peter Hawkins;2020-06-11 17:11:32 -0400;Small edit to documentation. (#3406)

==

jax/api.py
jax/lib/xla_bridge.py
==================
58f8329a;Peter Hawkins;2020-06-11 17:10:56 -0400;Switch CI builds from Travis to Github actions (#3409)

==

.github/workflows/ci-build.yaml
.travis.yml
build/test-requirements.txt
docs/requirements.txt
==================
c7a021e8;Tom Hennigan;2020-06-11 20:48:05 +0100;Improve error message when passing an invalid dtype. (#3405)
I spotted this when debugging an issue like:

    self.assertEqual(x_jax, x_tf, check_dtypes=True)

The fix here is of course to use `x_tf.numpy()`, but it was not clear where the
error was from originally.
==

jax/dtypes.py
tests/dtypes_test.py
==================
2f41a251;Skye Wanderman-Milne;2020-06-11 09:17:11 -0700;Add num_partitions argument to sharded_jit (#3392)

==

jax/interpreters/sharded_jit.py
==================
27906ce2;George Necula;2020-06-11 11:52:09 +0300;Renamed experimental/jax_to_tf to experimental/jax2tf (#3404)
* Renamed experimental/jax_to_tf to experimental/jax2tf

* Leave a trampoline behind, for backwards compatibility
==

.travis.yml
jax/experimental/jax2tf/README.md
jax/experimental/jax2tf/__init__.py
jax/experimental/jax2tf/examples/mnist.py
jax/experimental/jax2tf/examples/stax_to_tf_module.py
jax/experimental/jax2tf/jax2tf.py
jax/experimental/jax2tf/tests/__init__.py
jax/experimental/jax2tf/tests/control_flow_ops_test.py
jax/experimental/jax2tf/tests/primitive_harness.py
jax/experimental/jax2tf/tests/savedmodel_test.py
jax/experimental/jax2tf/tests/stax_test.py
jax/experimental/jax2tf/tests/tf_ops_test.py
jax/experimental/jax2tf/tests/tf_test_util.py
jax/experimental/jax_to_tf/__init__.py
jax/experimental/jax_to_tf/jax_to_tf.py
pytest.ini
==================
dfd2d8c5;Julius Kunze;2020-06-11 07:08:12 +0200;Fix dtype, minor

==

jax/interpreters/masking.py
==================
832431db;Ayush Shridhar;2020-06-11 02:57:35 +1000;Add np.triu_indices_from function (#3346)

==

docs/jax.numpy.rst
jax/numpy/__init__.py
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
c39b6a40;Julius Kunze;2020-06-10 12:56:26 +0200;Remove unused scan shape rule

==

jax/lax/lax_control_flow.py
==================
0a51c5b6;Julius Kunze;2020-06-10 12:23:41 +0200;Minor

==

jax/interpreters/masking.py
==================
98a32f2c;Julius Kunze;2020-06-10 11:47:47 +0200;Remove special case for scan masking
The scan masking rule is now simplified to a standard masking rule, and the special case handling in masking.py has been removed.

==

jax/interpreters/masking.py
jax/lax/lax_control_flow.py
==================
b3c348cc;George Necula;2020-06-10 08:13:40 +0300;Moved shift_right implementation from tfxla to jax_to_tf (#3378)
* Implemented shift_right without tfxla

These ops don't actually need XLA, they should not depend on tfxla.

* Small fixes
==

jax/experimental/jax_to_tf/jax_to_tf.py
jax/experimental/jax_to_tf/tests/primitive_harness.py
jax/experimental/jax_to_tf/tests/tf_ops_test.py
==================
e6a08e29;Matthew Johnson;2020-06-09 19:23:18 -0700;Merge pull request #3395 from google/tweak-tolerance
tweak t logpdf tolerance for float64
==
==================
650fb494;Matthew Johnson;2020-06-09 19:20:15 -0700;tweak t logpdf tolerance for float64

==

tests/scipy_stats_test.py
==================
b7e945fc;Matthew Johnson;2020-06-09 18:05:43 -0700;Merge pull request #3390 from google/issue3389
fix defjvps with None as first rule
==
==================
0011fd5e;Matthew Johnson;2020-06-09 15:19:53 -0700;fix defjvps with None as first rule
fixes #3389

==

jax/custom_derivatives.py
tests/api_test.py
==================
15bc6220;Roy Frostig;2020-06-08 16:13:30 -0700;jaxpr: support dropped assignment

==

docs/jaxpr.rst
jax/core.py
jax/interpreters/partial_eval.py
tests/core_test.py
==================
43c50833;Peter Hawkins;2020-06-09 16:35:25 -0400;Disable some masking tests on TPU. (#3387)

==

tests/masking_test.py
==================
71461a37;Jake Vanderplas;2020-06-09 13:09:50 -0700;Revert "Initial implementation of variadic lax.reduce() (#3342)" (#3384)
This reverts commit 99401c5a844cc19c6ce66cc26997f999c9ecf6d8.
==

jax/lax/lax.py
tests/lax_test.py
==================
fe1e1041;Peter Hawkins;2020-06-09 16:09:23 -0400;Fix failures in masking_test.py (#3386)

==

tests/masking_test.py
==================
3e4210c3;Skye Wanderman-Milne;2020-06-09 09:55:05 -0700;Update jax version to 0.1.70 (#3383)

==

docs/CHANGELOG.rst
jax/version.py
==================
99401c5a;Jake Vanderplas;2020-06-09 09:22:29 -0700;Initial implementation of variadic lax.reduce() (#3342)

==

jax/lax/lax.py
tests/lax_test.py
==================
d3ccf0a5;Matthew Johnson;2020-06-09 07:35:07 -0700;fix typo in docs

==

docs/notebooks/How_JAX_primitives_work.ipynb
==================
307701c7;Matthew Johnson;2020-06-09 07:18:51 -0700;Merge pull request #3331 from JuliusKunze/mask-split
Allow mask(jnp.split)
==
==================
b7175a3f;Matthew Johnson;2020-06-09 07:16:52 -0700;Merge pull request #3322 from j-towns/mask-of-jit
Support mask(jit)
==
==================
67927b07;George Necula;2020-06-09 12:28:03 +0300;Fix imports for jax_to_tf tests (#3377)

==

jax/experimental/jax_to_tf/tests/tf_ops_test.py
==================
c12541d5;George Necula;2020-06-09 11:07:32 +0300;Refactor the jax_to_tf tests to separate the primitive test harness (#3376)
* Refactor the jax_to_tf tests to separate the primitive test harness from the
test.

The goal is to have a collection of test harnesses for the JAX primitives
to be able to test various implementation (JAX, NumPy, TensorFlow). For
now we use these harnesses only in the jax_to_tf tests, although we can
later use them for lax_test.

Demonstrate the use of the harness for lax.pad and lax.squeeze, both in
tf_ops_test and lax_test. The plan is to add support for more primitives
as we make progress testing jax_to_tf.

* Expanded pad harness with negative pads
==

jax/experimental/jax_to_tf/tests/primitive_harness.py
jax/experimental/jax_to_tf/tests/tf_ops_test.py
==================
6aa8f246;Jake Vanderplas;2020-06-08 22:58:03 -0700;Fix remaining flakes and use exclude within setup.cfg (#3371)

==

benchmarks/benchmark.py
examples/control_test.py
examples/examples_test.py
examples/gaussian_process_regression.py
examples/kernel_lsq.py
examples/mnist_classifier.py
examples/mnist_classifier_fromscratch.py
examples/mnist_vae.py
examples/onnx2xla.py
examples/resnet50.py
examples/spmd_mnist_classifier_fromscratch.py
jaxlib/cuda_prng.py
setup.cfg
==================
563b65e8;Matthew Johnson;2020-06-08 15:11:49 -0700;minor fixes from #3222 (#3368)
* clean up handling of aux data in jvp_subtrace_aux

related to #3222 indirectly, in that we now won't try to do something
crazy like `JVPTracer(trace, object(), zero)`, which #3222 didn't like

* symbolic zeros tweak to work with div rule

* fix a couple ad_util.Zero type checks

* fix a docs bug

* improve broadcast handling in batching.py

We can avoid a circular import just by `import jax`!

* fix another docs bug

* yet another doc fix
==
==================
4ed8cce9;Matthew Johnson;2020-06-08 15:11:22 -0700;fix mypy error

==

jax/lax/lax_control_flow.py
==================
ee428008;Matthew Johnson;2020-06-08 15:06:00 -0700;yet another doc fix

==

jax/api.py
==================
2a6d3f41;Matthew Johnson;2020-06-08 14:13:01 -0700;fix another docs bug

==

docs/notebooks/How_JAX_primitives_work.ipynb
==================
04191ab9;Matthew Johnson;2020-06-08 13:46:10 -0700;improve broadcast handling in batching.py
We can avoid a circular import just by `import jax`!

==

jax/interpreters/batching.py
==================
3b3e7a29;Matthew Johnson;2020-06-08 13:42:35 -0700;avoid some trival operations in mask computations (#3364)
I think #2800 accidentally removed `mul`, `pow`, and `prod` from
mask.py, but those were there to avoid some trivial computations. In
particular, on this program:

```python
@partial(mask, in_shapes=['n'], out_shape='')
def foo(x):
  return np.sum(x)

padded_x = np.array([0, 1, 2, 3, 999, 999])
print(make_jaxpr(foo)([padded_x], dict(n=3)))
```

after #2800 (and until this commit) we'd print

```
{ lambda c h ; a b.
  let d = mul b 1
      e = mul d 1
      f = add e 0
      g = let c f
      i = select g a h
      j = reduce_sum [ axes=(0,) ] i
  in (j,) }
```

but before #2800 (and after this commit) we print

```
{ lambda c e ; a b.
  let d = lt c b
      f = select d a e
      g = reduce_sum[ axes=(0,) ] f
  in (g,) }
```

This might save a tiny bit of work, but also it means the make_jaxpr
results are cleaner, and we like to show those!

@j-towns spotted the fix

cc @JuliusKunze
==

jax/interpreters/masking.py
tests/masking_test.py
==================
0a716978;Matthew Johnson;2020-06-08 13:30:00 -0700;fix a docs bug

==

docs/notebooks/How_JAX_primitives_work.ipynb
==================
866c17c3;Matthew Johnson;2020-06-08 13:22:13 -0700;fix a couple ad_util.Zero type checks

==

jax/lax/lax.py
==================
fb8b3a4d;Matthew Johnson;2020-06-08 13:16:19 -0700;symbolic zeros tweak to work with div rule

==

jax/interpreters/ad.py
==================
982f8670;Matthew Johnson;2020-06-08 11:48:58 -0700;clean up handling of aux data in jvp_subtrace_aux
related to #3222 indirectly, in that we now won't try to do something
crazy like `JVPTracer(trace, object(), zero)`, which #3222 didn't like

==

jax/interpreters/ad.py
==================
528207bd;Jake Vanderplas;2020-06-08 10:45:00 -0700;fix flakes at head (#3361)

==

jax/interpreters/ad.py
jax/interpreters/batching.py
==================
b1adef40;Ayush Shridhar;2020-06-09 03:06:20 +1000;Fix polyadd and test (#3344)

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
65d95f10;George Necula;2020-06-08 19:59:25 +0300;A couple of ad_util.zero were missed in #3222 (#3363)

==

jax/api.py
==================
508821cc;Matthew Johnson;2020-06-08 09:47:32 -0700;fix a one-character issue from a bad merge (#3362)
cf. #3222
==

jax/interpreters/ad.py
jax/lax/lax_control_flow.py
==================
dc41ff90;Matteo Hessel;2020-06-08 17:28:41 +0100;Update optix.py (#3355)

==

jax/experimental/optix.py
==================
e36c72b9;Adam Paszke;2020-06-08 17:50:14 +0200;Make ad_util.zero a class that carries avals (similar to UndefinedPrimal) (#3222)

==
==================
96d72fca;Peter Hawkins;2020-06-08 10:37:50 -0400;Edit documentation. (#3358)
Use :func:, :class: and :meth: when referring to Python objects.
Use :ref: for hyperlinks.
Fix some bad formatting.
==

docs/faq.rst
jax/api.py
jax/custom_derivatives.py
jax/lib/xla_bridge.py
jax/numpy/vectorize.py
==================
701bc761;Peter Hawkins;2020-06-08 09:03:02 -0400;Update README to recommend Windows Subsystem for Linux (WSL) to Windows users. (#3356)

==

README.md
==================
6b948e64;Peter Hawkins;2020-06-08 08:56:10 -0400;Generate type hints for parameters, even if the parameters aren't documented. (#3337)
This change tells sphinx-autodoc-typehint to generate stub parameter documentation for arguments that have type hints.
==

docs/conf.py
==================
7863f817;George Necula;2020-06-07 14:45:15 +0300;Commented-out the literal jaxpr checks in host_callback (#3351)
* Commented-out the literal jaxpr checks in host_callback

Will re-enable when we change the host_callback, or when we have better
tools for updating goldens


==

tests/host_callback_test.py
==================
fd886b17;Matthew Johnson;2020-06-06 21:44:14 -0700;make jnp.array faster (#3350)
fixes #2919
==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
2a10dbbf;Jake Vanderplas;2020-06-06 10:51:34 -0700;deflake remainder of jax (#3343)

==

jax/__init__.py
jax/api.py
jax/api_util.py
jax/config.py
jax/core.py
jax/custom_derivatives.py
jax/lax_linalg.py
jax/lazy.py
jax/random.py
jax/test_util.py
setup.cfg
==================
fb171723;Jake Vanderplas;2020-06-05 19:00:04 -0700;Cleanup: deflake jax.experimental and jax.ops (#3329)

==

jax/experimental/callback.py
jax/experimental/host_callback.py
jax/experimental/jax_to_tf/__init__.py
jax/experimental/jax_to_tf/jax_to_tf.py
jax/experimental/jax_to_tf/tests/control_flow_ops_test.py
jax/experimental/jax_to_tf/tests/savedmodel_test.py
jax/experimental/jax_to_tf/tests/tf_ops_test.py
jax/experimental/jax_to_tf/tests/tf_test_util.py
jax/experimental/jet.py
jax/experimental/optimizers.py
jax/experimental/vectorize.py
jax/ops/__init__.py
setup.cfg
==================
1a3c1805;Peter Hawkins;2020-06-05 17:21:18 -0400;Don't expand type aliases when generating JAX documentation. (#3336)

==

docs/conf.py
==================
b65abdf5;Skye Wanderman-Milne;2020-06-05 12:03:37 -0700;Fix missing sharded_jit_test import

==

tests/sharded_jit_test.py
==================
0b5d885e;Skye Wanderman-Milne;2020-06-05 11:34:20 -0700;Handle with_sharding_constraint inside arbitrary subjaxprs. (#3339)
Also fixes a bug where a replicated sharding constraint would incorrectly trigger an error.
==

jax/interpreters/pxla.py
tests/sharded_jit_test.py
==================
29740de6;Ayush Shridhar;2020-06-06 02:44:10 +1000;Add np.polysub (#3319)

==

docs/jax.numpy.rst
jax/numpy/__init__.py
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
841f21fc;Peter Hawkins;2020-06-05 12:21:30 -0400;Enable SVD on TPU. (#3334)

==

jax/lax_linalg.py
tests/linalg_test.py
==================
e2a32f74;Adam Paszke;2020-06-05 15:25:34 +0000;Rebase fixes

==

jax/interpreters/ad.py
==================
17472b97;Adam Paszke;2020-05-29 09:43:08 +0000;Optimize zeros_like_shaped_array
This function is used a lot more now, because `ad.instantiate_zeros` now
goes through that and not `zeros_like_array`.

==

jax/abstract_arrays.py
==================
cfa3b788;Adam Paszke;2020-05-29 09:45:48 +0000;Remove accidental prints

==

jax/interpreters/batching.py
==================
7a0e8bae;Adam Paszke;2020-05-28 14:28:47 +0000;Update notebooks

==

docs/notebooks/How_JAX_primitives_work.ipynb
==================
3f1d3a73;Adam Paszke;2020-05-28 13:20:56 +0000;Remove example from ad.instantiate_zeros, fix vmap bug

==

jax/api.py
jax/custom_derivatives.py
jax/interpreters/ad.py
jax/interpreters/batching.py
jax/lax/lax.py
jax/lax/lax_control_flow.py
tests/api_test.py
==================
c5d87073;Adam Paszke;2020-05-27 18:09:35 +0000;Fix host_callback

==

jax/experimental/host_callback.py
==================
adb442eb;Adam Paszke;2020-05-27 13:57:47 +0000;Make ad_util.zero a class that carries avals (similar to UndefinedPrimal)
This is useful for remat transpose rule submitted in #3162 and e.g.
allowed me to catch a slight overuse of defjvp2 for `random_gamma_p` (it
was unnecessarily declared as having multiple outputs).

==

jax/ad_util.py
jax/api.py
jax/custom_derivatives.py
jax/interpreters/ad.py
jax/interpreters/partial_eval.py
jax/lax/lax.py
jax/lax/lax_control_flow.py
jax/lax_linalg.py
jax/random.py
==================
74d160f5;Adam Paszke;2020-06-05 17:22:55 +0200;Don't keep primal arguments and results in the linearized jaxpr (#3233)
Linearized functions are supposed to take tangent types to tangent
types, and so all primal arguments are unused and primal results get
replaced by units.
==

jax/api.py
jax/interpreters/ad.py
jax/interpreters/partial_eval.py
==================
ea782220;Julius Kunze;2020-06-05 09:04:22 +0200;Allow mask(split)

==

jax/numpy/lax_numpy.py
tests/masking_test.py
==================
93646b57;Jake Vanderplas;2020-06-04 20:28:19 -0700;Improve error when zero-sized arrays passed to convolve (#3325)
* Improve error when zero-sized arrays passed to convolve

* Apply suggestions from code review

Co-authored-by: Matthew Johnson <mattjj@google.com>

Co-authored-by: Matthew Johnson <mattjj@google.com>
==
==================
969ed6d1;gaurav pathak;2020-06-04 23:27:29 -0400;Initial implementation of polymul function (#3303)

==

docs/jax.numpy.rst
jax/numpy/__init__.py
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
07aa795b;Jake Vanderplas;2020-06-04 16:54:28 -0700;Apply suggestions from code review
Co-authored-by: Matthew Johnson <mattjj@google.com>
==

jax/numpy/lax_numpy.py
jax/scipy/signal.py
==================
657863f6;Jake Vanderplas;2020-06-04 16:34:16 -0700;BUG: fix column_stack and add tests (#3328)

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
a63b9cc2;Jake Vanderplas;2020-06-04 15:27:48 -0700;Cleanup: deflake interpreters, lib, nn, third_party, and tools (#3327)

==

jax/interpreters/batching.py
jax/interpreters/parallel.py
jax/interpreters/partial_eval.py
jax/interpreters/sharded_jit.py
jax/interpreters/xla.py
jax/lib/__init__.py
jax/lib/xla_bridge.py
jax/nn/__init__.py
jax/third_party/numpy/linalg.py
setup.cfg
==================
bc51e9c7;Jake Vanderplas;2020-06-04 14:38:41 -0700;deflake jax/scipy/* and add to setup.cfg (#3316)

==

jax/scipy/__init__.py
jax/scipy/sparse/__init__.py
jax/scipy/sparse/linalg.py
jax/scipy/special.py
jax/scipy/stats/__init__.py
jax/scipy/stats/beta.py
jax/scipy/stats/cauchy.py
jax/scipy/stats/geom.py
jax/scipy/stats/logistic.py
jax/scipy/stats/multivariate_normal.py
jax/scipy/stats/uniform.py
setup.cfg
==================
b187663a;Jake Vanderplas;2020-06-04 13:50:44 -0700;deflake jax/lax & add to flake8 check (#3310)

==

jax/lax/__init__.py
jax/lax/lax.py
jax/lax/lax_control_flow.py
jax/lax/lax_fft.py
setup.cfg
==================
45444363;Jake VanderPlas;2020-06-04 13:25:10 -0700;Improve error when zero-sized arrays passed to convolve

==

jax/numpy/lax_numpy.py
jax/scipy/signal.py
==================
9c0a58a8;Matthew Johnson;2020-06-04 10:13:15 -0700;add float dtype checks to random.py (#3320)
fixes #3317
==

jax/random.py
tests/random_test.py
==================
38d48373;Jamie Townsend;2020-06-04 15:05:14 +0100;Fix x64 test

==

tests/masking_test.py
==================
0f003272;Jamie Townsend;2020-06-04 12:50:47 +0100;Implement MaskTrace.post_process_call

==

jax/interpreters/masking.py
tests/masking_test.py
==================
dfe34627;Jamie Townsend;2020-06-04 12:28:38 +0100;Add device_put_p abstract_eval rule

==

jax/interpreters/xla.py
tests/masking_test.py
==================
c04dea1c;Jamie Townsend;2020-06-04 11:25:30 +0100;Begin implementing mask(jit)

==

jax/interpreters/masking.py
tests/masking_test.py
==================
71f1c5ca;George Necula;2020-06-04 09:54:06 +0300;Refactoring of jax_to_tf tests: (#3262) (#3308)
* Moved control-flow tests into their own file
* Added a helper module tf_test_util, with a helper function ConvertAndCompare
* Used self.assertAllClose instead of numpy.testing.assert_all_close because
  the former iterates over lists and tuples (and is standard in other JAX tests)
* Used @parameterized.named_parameters for parameterized tests, for nicer test
 names.
==

jax/experimental/jax_to_tf/tests/__init__.py
jax/experimental/jax_to_tf/tests/control_flow_ops_test.py
jax/experimental/jax_to_tf/tests/savedmodel_test.py
jax/experimental/jax_to_tf/tests/stax_test.py
jax/experimental/jax_to_tf/tests/tf_ops_test.py
jax/experimental/jax_to_tf/tests/tf_test_util.py
==================
afa9276f;George Necula;2020-06-04 09:41:45 +0300;Implement jax_to_tf.scan (#3307)

==

jax/experimental/jax_to_tf/jax_to_tf.py
jax/experimental/jax_to_tf/tests/tf_ops_test.py
==================
c49bb754;Roy Frostig;2020-06-03 18:57:49 -0700;update changelog with lax.switch

==

docs/CHANGELOG.rst
==================
bd3cab97;Roy Frostig;2020-06-02 19:54:23 -0700;update jaxpr doc to reflect lax.switch and indexed cond

==

docs/jaxpr.rst
==================
6015a2a6;Roy Frostig;2020-06-01 19:07:11 -0700;introduce lax.switch

==

jax/lax/__init__.py
jax/lax/lax.py
jax/lax/lax_control_flow.py
tests/lax_control_flow_test.py
==================
dc4c9f04;Roy Frostig;2020-05-26 19:32:29 -0700;change cond primitive to an indexed conditional with multiple branch functions
in the core:

* bind and check cond primitive in indexed form
* rewrite abstract evaluation rule
* rewrite translation rule
* rewrite partial evaluation rule
* rewrite batching rule
* rewrite JVP rule
* rewrite transpose rule
* update jaxpr typechecker
* update pretty printer
* update outfeed-usage check
* update reference jaxpr in cond jaxpr test
* update reference regexes in HLO test

in experimental modules:

* update host_callback rewriter
* update loops expression builder
* generalize tf_impl rule

==

jax/core.py
jax/experimental/host_callback.py
jax/experimental/jax_to_tf/jax_to_tf.py
jax/experimental/loops.py
jax/interpreters/xla.py
jax/lax/lax_control_flow.py
jax/pprint_util.py
tests/api_test.py
tests/host_callback_test.py
tests/metadata_test.py
==================
4f5547dd;James Bradbury;2020-06-03 17:00:54 -0700;Don't AD through max-subtraction in softmax (#2260)
* Don't AD through max-subtraction in softmax

* Also stop-grad the max in logsumexp
==

jax/nn/functions.py
jax/scipy/special.py
==================
5ad9feda;Skye Wanderman-Milne;2020-06-03 15:23:49 -0700;Fix handling of infeed token inside sharded_jit (#3313)

==

jax/lax/lax.py
tests/sharded_jit_test.py
==================
c77c0838;Jake Vanderplas;2020-06-03 14:18:48 -0700;deflake jax.numpy and add to flake8 check (#3312)

==

jax/numpy/__init__.py
jax/numpy/lax_numpy.py
jax/numpy/linalg.py
jax/numpy/vectorize.py
setup.cfg
==================
d1dbf7c7;Julius Kunze;2020-06-03 22:40:48 +0200;Implement mask for some primitives + jit. (#2922)
* Implement mask for slice, conv, pad, transpose, where

* Remove tentative mask(jit)

* Add explanatory comment to dot_general masking rule

* Rm reshape from select masking rule

* Rm unnecessary check from lax slice abstract_eval rule

* Revert to standard indentation in masking_test.py

* Begin simplifying masking tests

* Finish drafting masking check function

* More progress simplifying tests

* Add conv masking in batch dim

* Finish fixing up tests

* Revert to old API, making out_shape compulsory again

* More efficient conv masking rule

* Tidy up masking_test imports

* Check that out tree is preserved by masking

* fix flake errors

Co-authored-by: Jamie Townsend <jamestownsend@google.com>
Co-authored-by: Jamie Townsend <jamiehntownsend@gmail.com>
Co-authored-by: Matthew Johnson <mattjj@google.com>
==

jax/api.py
jax/interpreters/masking.py
jax/lax/lax.py
tests/masking_test.py
==================
0db57cb5;Jake Vanderplas;2020-06-03 10:33:19 -0700;Fix validation code in lax.conv (#3279)

==

jax/lax/lax.py
==================
b998044f;Ayush Shridhar;2020-06-04 03:26:35 +1000;Add np.polyadd (#3261)

==

docs/jax.numpy.rst
jax/numpy/__init__.py
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
66ba7348;Skye Wanderman-Milne;2020-06-03 09:46:00 -0700;Add note to docs describing how pytree arguments work. (#3284)
Addresses #3095. I'm not sure if we wanna link to this from API
docstrings.

This also subsumes the original pytrees notebook.
==

docs/index.rst
docs/notebooks/JAX_pytrees.ipynb
docs/pytrees.rst
==================
f8bab4ae;Matthew Johnson;2020-06-03 07:45:53 -0700;update version and changelog for pypi

==

docs/CHANGELOG.rst
jax/version.py
==================
0e229e4e;Matthew Johnson;2020-06-03 07:32:44 -0700;keep old name 'packed_state' of OptimizerState

==

jax/experimental/optimizers.py
==================
b58eec51;Matthew Johnson;2020-06-02 20:28:59 -0700;make pmap axis checking an exception, hoist (#3239)

==

jax/api.py
==================
538691b9;Matthew Johnson;2020-06-02 20:28:21 -0700;remove `pack` from optimizers.py (#3305)
It is vestigial, from a time when JaxTuples roamed free.
==

jax/experimental/optimizers.py
==================
9ee4ef11;Jake Vanderplas;2020-06-02 19:25:47 -0700;Cleanup: de-lint tests directory & add flake8 to travis (#3304)
* Cleanup: fix lint errors in tests/*.py

* Add flake8 step to travis

* add setup.cfg
==

.travis.yml
setup.cfg
tests/api_test.py
tests/batching_test.py
tests/debug_nans_test.py
tests/fft_test.py
tests/host_callback_test.py
tests/lax_control_flow_test.py
tests/lax_numpy_test.py
tests/lax_test.py
tests/linalg_test.py
tests/masking_test.py
tests/optimizers_test.py
tests/pmap_test.py
tests/random_test.py
tests/scipy_ndimage_test.py
tests/util_test.py
tests/xla_bridge_test.py
==================
177e7cf3;Matthew Johnson;2020-06-02 19:10:55 -0700;moved check_jaxpr code around to match eval_jaxpr (#3240)
* moved check_jaxpr code around to match eval_jaxpr

This change is mostly stylistic; it brings check_jaxpr closer to
eval_jaxpr (and the other jaxpr interpreters) in organization. There's a
slight tweak to an error message which lets us save some slightly
redundant code.

* fixes and tweaks
==

jax/core.py
tests/core_test.py
==================
8c0b27bf;Matthew Johnson;2020-06-02 19:00:54 -0700;tweak jax.experimental readme

==

jax/experimental/README.md
==================
c42a7f78;Matthew Johnson;2020-06-02 17:37:20 -0700;remove some trailing whitespace (#3287)

==

examples/differentially_private_sgd.py
jax/experimental/host_callback.py
jax/experimental/vectorize.py
jax/nn/initializers.py
jax/numpy/linalg.py
jax/numpy/polynomial.py
jax/numpy/vectorize.py
jax/random.py
jax/scipy/special.py
jax/third_party/numpy/linalg.py
tests/dtypes_test.py
tests/host_callback_test.py
tests/lax_numpy_test.py
tests/linalg_test.py
tests/nn_test.py
tests/vectorize_test.py
==================
ea4277b0;Jake Vanderplas;2020-06-02 16:45:44 -0700;Fix broken jnp.nancumsum() & jnp.nancumprod() and add tests (#3277)

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
dc4761c7;Peter Hawkins;2020-06-02 17:04:52 -0400;Fix type promotion for real FFTs. (#3300)
Only enable gradient test in x64 mode.
==

jax/lax/lax_fft.py
tests/fft_test.py
==================
f642d11c;George Necula;2020-06-02 22:59:37 +0300;Reverting jax_to_tf (scan and tests) (#3299)
* Revert "Refactoring of jax_to_tf tests: (#3262)"

This reverts commit 38bfcee753893ced209c9829f5675fded39b1911.

* Revert "Implement jax_to_tf.scan (#3260)"

This reverts commit d36429b5fd992cb16081f44dfd787f28c296e0a8.
==

jax/experimental/jax_to_tf/__init__.py
jax/experimental/jax_to_tf/jax_to_tf.py
jax/experimental/jax_to_tf/tests/__init__.py
jax/experimental/jax_to_tf/tests/control_flow_ops_test.py
jax/experimental/jax_to_tf/tests/savedmodel_test.py
jax/experimental/jax_to_tf/tests/stax_test.py
jax/experimental/jax_to_tf/tests/tf_ops_test.py
jax/experimental/jax_to_tf/tests/tf_test_util.py
==================
4d0e2ff9;Jake Vanderplas;2020-06-02 12:08:25 -0700;add jnp.diagflat() to docs (#3298)

==

docs/jax.numpy.rst
==================
6ddac1d5;Peter Hawkins;2020-06-02 13:16:13 -0400;Disabled host_callback infrastructure for the HLO interpreter backend, which doesn't support infeed/outfeed. (#3294)

==

jax/experimental/host_callback.py
==================
1eb7f1b1;samuela;2020-06-02 09:54:51 -0700;Use onp instead of np in ode_test (#3288)
* Use onp instead of np in ode_test

* other ode_test.py fixes

Co-authored-by: Matthew Johnson <mattjj@google.com>
==

tests/ode_test.py
==================
dd81a8dd;Peter Hawkins;2020-06-02 10:27:14 -0400;Fix some type errors in lax.py found by pytype. (#3292)

==

jax/lax/lax.py
==================
042df4eb;Peter Hawkins;2020-06-02 10:26:43 -0400;Fix pytype errors. (#3291)

==

jax/core.py
jax/interpreters/partial_eval.py
==================
a06b122e;Peter Hawkins;2020-06-02 09:41:44 -0400;Add support for 64-bit FFTs. (#3290)

==

WORKSPACE
jax/lax/lax_fft.py
jaxlib/version.py
tests/fft_test.py
==================
3909875f;Jamie Townsend;2020-06-02 14:37:32 +0100;Improve speed of tracing dynamic_update_slice (#3247)
* Improve tracing performance of _dynamic_slice_indices

* More precisely preserve semantics of dynamic_slice_indices

* Use safe_map in dynamic_slice_indices
==

jax/lax/lax.py
==================
38bfcee7;George Necula;2020-06-02 14:41:36 +0300;Refactoring of jax_to_tf tests: (#3262)
* Moved control-flow tests into their own file
* Added a helper module tf_test_util, with a helper function ConvertAndCompare
* Used self.assertAllClose instead of numpy.testing.assert_all_close because
  the former iterates over lists and tuples (and is standard in other JAX tests)
* Used @parameterized.named_parameters for parameterized tests, for nicer test
 names.
==

jax/experimental/jax_to_tf/tests/__init__.py
jax/experimental/jax_to_tf/tests/control_flow_ops_test.py
jax/experimental/jax_to_tf/tests/savedmodel_test.py
jax/experimental/jax_to_tf/tests/stax_test.py
jax/experimental/jax_to_tf/tests/tf_ops_test.py
jax/experimental/jax_to_tf/tests/tf_test_util.py
==================
d36429b5;George Necula;2020-06-02 12:35:28 +0300;Implement jax_to_tf.scan (#3260)
Also removed the enable_jit, which was needed only
to work around the lack of control flow primitive support.
==

jax/experimental/jax_to_tf/__init__.py
jax/experimental/jax_to_tf/jax_to_tf.py
jax/experimental/jax_to_tf/tests/tf_ops_test.py
==================
7a4b2223;gaurav pathak;2020-06-01 23:43:43 -0400;Added support for np.diagflat (#3259)

==

jax/numpy/__init__.py
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
34065df2;Peter Hawkins;2020-06-01 21:45:36 -0400;Add some type annotations to core and partial_eval. (#3251)

==

jax/core.py
jax/experimental/host_callback.py
jax/interpreters/partial_eval.py
==================
f1a70737;James Bradbury;2020-06-01 16:50:22 -0700;pmap(in_axes=None) of sharded_jit (#3257)
* pmap(in_axes=None) of sharded_jit

Co-authored-by: Skye Wanderman-Milne <skyewm@google.com>

* address comments

Co-authored-by: Skye Wanderman-Milne <skyewm@google.com>
==

jax/interpreters/pxla.py
jax/lax/lax.py
tests/pmap_test.py
tests/sharded_jit_test.py
==================
972c7fda;Peter Hawkins;2020-06-01 19:29:26 -0400;Fix bug where jnp.array returned a classic NumPy array, sometimes wit… (#3283)
* Fix bug where jnp.array returned a classic NumPy array, sometimes with the wrong type.

Unconditionally calls `device_put`, because `lax.convert_element_type` has a fast path that sometimes fails to lead to a `device_put`.

Improve the test for `jnp.array` and its test harness.

==

jax/numpy/lax_numpy.py
jax/test_util.py
tests/lax_numpy_test.py
==================
00555b7d;Jake Vanderplas;2020-06-01 16:26:01 -0700;Remove duplicate test (#3275)

==

tests/host_callback_test.py
==================
0eab5609;Jake Vanderplas;2020-06-01 15:28:57 -0700;Fix duplicated test name (#3273)

==

tests/pmap_test.py
==================
cf624196;Peter Hawkins;2020-06-01 18:09:45 -0400;Documentation fixes. (#3282)
Improve some cross-references and poorly quoted text.
==

jax/interpreters/pxla.py
jax/lax/lax.py
jax/lax/lax_control_flow.py
jax/lax/lax_parallel.py
==================
858f1e54;Roy Frostig;2020-06-01 14:47:14 -0700;add missing core import in lax_test

==

tests/lax_test.py
==================
fffdb2da;Peter Hawkins;2020-06-01 17:19:23 -0400;Make check_dtypes, atol, and rtol keyword-only arguments in jax.test_… (#3280)
* Make check_dtypes, atol, and rtol keyword-only arguments in jax.test_util APIs.
Default to check_dtypes=True.

Remove explicit usages of check_dtypes=True from tests. This mostly just removes visual noise from tests. Testing for exact type equality is the sensible default, although there are cases where opting out makes sense.

No functional changes intended.

* Fix a number of lax reference implementations to preserve types.
==

jax/lax_reference.py
jax/test_util.py
tests/api_test.py
tests/array_interoperability_test.py
tests/batching_test.py
tests/callback_test.py
tests/fft_test.py
tests/host_callback_test.py
tests/infeed_test.py
tests/jet_test.py
tests/lax_control_flow_test.py
tests/lax_numpy_einsum_test.py
tests/lax_numpy_indexing_test.py
tests/lax_numpy_test.py
tests/lax_numpy_vectorize_test.py
tests/lax_scipy_sparse_test.py
tests/lax_scipy_test.py
tests/lax_test.py
tests/linalg_test.py
tests/loops_test.py
tests/masking_test.py
tests/multibackend_test.py
tests/nn_test.py
tests/optimizers_test.py
tests/parallel_test.py
tests/pmap_test.py
tests/random_test.py
tests/scipy_ndimage_test.py
tests/scipy_signal_test.py
tests/scipy_stats_test.py
tests/vectorize_test.py
==================
49a441f7;Matthew Johnson;2020-06-01 13:24:40 -0700;revisions to #3197 (#3264)
revert find_top_trace change from #3197

The previous version was written and tested for performance; the revised
version caused at least a 25% slowdown in the dispatch time of
`lax.add(1, 2)` (and so likely a much bigger slowdown for the
find_top_trace timing alone).

Instead, we can just change the error message in xla.abstractify, since
invalid types lead to abstractification errors when we apply primitive
impls.
==

jax/core.py
jax/interpreters/xla.py
jax/lax/lax.py
tests/api_test.py
tests/lax_test.py
==================
7df83757;Jake Vanderplas;2020-06-01 13:02:59 -0700;Fix undefined variable in jnp.pad(mode='edge') (#3278)

==

jax/numpy/lax_numpy.py
==================
5d8ee074;Jake Vanderplas;2020-06-01 12:46:49 -0700;fix binary promotion test (#3272)

==

tests/dtypes_test.py
==================
f78ece0f;Skye Wanderman-Milne;2020-06-01 12:35:18 -0700;Allow sharding infeed inside sharded_jit. (#3256)

==

jax/interpreters/pxla.py
jax/lax/lax.py
tests/sharded_jit_test.py
==================
bc305977;Jake Vanderplas;2020-06-01 11:49:35 -0700;Cleanup: remove unused imports in tests (#3276)

==

tests/array_interoperability_test.py
tests/batching_test.py
tests/benchmarks/xla.py
tests/callback_test.py
tests/core_test.py
tests/debug_nans_test.py
tests/dtypes_test.py
tests/fft_test.py
tests/host_callback_test.py
tests/jet_test.py
tests/lax_control_flow_test.py
tests/lax_numpy_indexing_test.py
tests/lax_numpy_vectorize_test.py
tests/lax_scipy_test.py
tests/lax_test.py
tests/linalg_test.py
tests/loops_test.py
tests/metadata_test.py
tests/optimizers_test.py
tests/parallel_test.py
tests/pmap_test.py
tests/scipy_stats_test.py
tests/tree_util_tests.py
tests/util_test.py
tests/vectorize_test.py
==================
2ad425d9;Jake Vanderplas;2020-06-01 10:48:04 -0700;Fix coverage of axis argument in fft_test (#3274)

==

tests/fft_test.py
==================
03e29712;samuela;2020-06-01 10:47:39 -0700;Add a pytree odeint test (#3268)

==

tests/ode_test.py
==================
9cbd63e8;samuela;2020-06-01 07:23:28 -0700;Remove unused unittest import (#3269)

==

tests/ode_test.py
==================
6124f703;Tom Hennigan;2020-05-31 23:00:16 +0100;Add support for buffer donation in `jit` and `pmap`. (#2936)
For a computation of the form:

    >>> f = lambda x: x ** 2
    >>> f = jax.jit(f)
    >>> while run:
    ...   x = f(x)

JAX must currently always have two copies of `x` in device memory since there
is no reliable way in Python to determine whether there will be future uses of
`x`. This causes two classes of problem:

  1. Users at the limit of available device are constrained by the additional
     copy of their parameters and other state while they typically only require
     one copy. This typically frees 100M+ of device memory and is a critical
     optimization for larger models to match state of the art performance in
     other frameworks.

  2. This constant alloc/free of the input/output buffers can cause memory
     fragmentation on some platforms (although having a reusing allocator and
     limiting run-ahead may be a better solution for this problem).

We propose fixing this by using input/output aliasing as supported by XLA. We
will support this in JAX by allowing certain arguments of jit/pmap decorated
functions to be donated and reused as outputs:

    >>> f = lambda x: x ** 2
    >>> f = jit(f, donate_argnums=0)
    >>> while run:
    ...   x = f(x)

JAX will determine that the donated input `x` can alias with the output of the
function and it will instruct XLA it _must_ write the result to this buffer.

If a user tries to reuse a buffer after it has been donated they get an error
that the buffer is invalid:

    >>> y = f(x)
    >>> jax.device_get(x)
    ...
    RuntimeError: Invalid argument: CopyToHostAsync() called on invalid buffer.

The semantics of `donate_argnums` follows that of `static_argnums`, namely that
it identifies positional arguments to the computation that are to be donated
to the computation and used as part of the output.

One feature that is also enabled by this is invalidating buffers that should
only be used once, for example PRNGKeys:

    >>> @partial(jit, donate_argnums=0)
    ... def move(x):
    ...   # Do something complex enough for JAX to just optimize it away.
    ...   return tree_map(lambda x: x + x - x, x)

    >>> def safe_eager_uniform(key, *a, **k):
    ...   assert hasattr(key, 'device_buffer'), "random must run eagerly"
    ...   key = move(key)
    ...   return jax.random.uniform(key, *a, **k)

This is not a complete answer to random safety since it is still possible to
reuse a key as part of a traced computation, however it can be used to support
this feature (somewhat inefficiently) in eager mode.
==

docs/jaxpr.rst
jax/api.py
jax/api_util.py
jax/core.py
jax/experimental/jet.py
jax/interpreters/ad.py
jax/interpreters/partial_eval.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
tests/api_test.py
tests/api_util_test.py
tests/host_callback_test.py
==================
d34debaf;George Necula;2020-05-30 08:48:44 +0300;Implementation of jax_to_tf.while (#3241)

==

jax/experimental/jax_to_tf/jax_to_tf.py
jax/experimental/jax_to_tf/tests/tf_ops_test.py
==================
95ad76be;Roy Frostig;2020-05-29 17:19:39 -0700;avoid supressing failures in travis doc build

==

.travis.yml
==================
0031075b;Pierre Foret;2020-05-29 20:58:10 -0400;Replaced jnp.sum by sum when the argument is a list (#3253)

==

jax/experimental/optix.py
==================
916953ac;Roy Frostig;2020-05-29 16:06:34 -0700;update example in jaxpr doc

==

docs/jaxpr.rst
==================
e7e4cbce;Roy Frostig;2020-05-29 16:00:20 -0700;docstring fix

==

jax/random.py
==================
8fbab04d;Roy Frostig;2020-05-29 15:41:28 -0700;codeblock for example usage in PRNG docstring

==

jax/random.py
==================
657cf1bb;Roy Frostig;2020-05-29 14:54:25 -0700;render example usage from PRNG doc

==

jax/random.py
==================
fd72a8a3;Stephan Hoyer;2020-05-29 13:29:14 -0700;Support static valued scalar arrays in expand_dims/squeeze (#3250)
* Support static valued scalar arrays in expand_dims/squeeze

* Fix reduction_dims
==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
b1c294eb;Skye Wanderman-Milne;2020-05-29 13:13:32 -0700;Changes to allow pmap-of-sharded_jit to run on multi-host platforms. (#3237)
* Checks that we're running on all local devices after tracing, so we
  have the full shard count instead of just the axis size.

* Makes sure the device assignment is always the right shape (we
  currently generate 1D default device assignments for multi-host)
==

jax/interpreters/pxla.py
==================
9208a940;George Necula;2020-05-29 13:51:52 +0300;Fix mypy (#3246)

==

jax/numpy/lax_numpy.py
==================
9691f9b0;George Necula;2020-05-29 13:06:50 +0300;Fix travis; yaml parser does not like comments inside shell commands (#3245)

==

.travis.yml
==================
5b684fc6;George Necula;2020-05-29 12:54:09 +0300;Attempt to fix error in google3 import (#3244)
See #3243
==

jax/numpy/lax_numpy.py
==================
8e0a0126;George Necula;2020-05-29 09:56:32 +0300;Initial import of jax2tf into JAX core (#3202)
* Initial import of jax2tf into JAX core

Renamed jax2tf.convert to jax_to_tf.
Added Travis test support.
Added OSS build configuration.

* Added support for squeeze
==

.travis.yml
jax/experimental/jax_to_tf/README.md
jax/experimental/jax_to_tf/__init__.py
jax/experimental/jax_to_tf/examples/mnist.py
jax/experimental/jax_to_tf/examples/stax_to_tf_module.py
jax/experimental/jax_to_tf/jax_to_tf.py
jax/experimental/jax_to_tf/tests/savedmodel_test.py
jax/experimental/jax_to_tf/tests/stax_test.py
jax/experimental/jax_to_tf/tests/tf_ops_test.py
pytest.ini
==================
cc8fbb76;Stephan Hoyer;2020-05-28 19:12:50 -0700;Prefer using broadcast_in_dim/squeeze instead of reshape (#3217)
* Prefer using expand_dims/broadcast_in_dim to reshape in lax_numpy.py

`reshape()` is quite powerful, but does not necessarily preserve a notion of
axis identity (particularly for axes of length 1). This is problematic for
transformation rules that need to preserve a notion of axis identity, such as
for masking and a new transformation rule I'm exploring for unraveling pytrees.

This PR rewrites these rules in terms of expand_dims / lax.broadcast_in_dim,
when feasible, which has a well-defined mapping between input and output axes.
In particular: `matmul`, various `stack` functions, the `array` constructor,
broadcasting arithmetic, array indexing, `squeeze` and reductions with
`keepdims=True` no longer use `lax.reshape`.

I also implemented support for multiple axes in `expand_dims` (added in NumPy
1.18), since it was convenient for some of these other functions.

I considered trying to write a masking rule for broadcast_in_dim as well, but
it was trickier than I expected and @JuliusKunze has probably already thought
about it :)

* Remove unnecessary branch

* Add lax.squeeze primitive

* Changes per review

* Fix typing

* Move expand_dims into lax

* Update per review; add comments/documentation

* Type annotations for squeeze/expand_dims
==

docs/jax.lax.rst
jax/lax/__init__.py
jax/lax/lax.py
jax/lax_reference.py
jax/numpy/lax_numpy.py
jax/scipy/special.py
tests/lax_numpy_test.py
tests/lax_test.py
tests/masking_test.py
==================
7944879c;Peter Hawkins;2020-05-28 20:46:48 -0400;Allow `jnp.int32(tracer)` to work. (#3235)

==

jax/numpy/lax_numpy.py
tests/dtypes_test.py
==================
e48a4e01;joao guilherme;2020-05-28 17:16:56 -0300;uses np.prod instead of jnp.prod for shapes (#3236)

==

tests/host_callback_test.py
tests/random_test.py
==================
1a43693f;Jake Vanderplas;2020-05-28 11:04:15 -0700;implement np.extract (#3234)

==

docs/jax.numpy.rst
jax/numpy/__init__.py
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
7c90023d;Jiawen (Kevin) Chen;2020-05-28 13:21:39 -0400;Fix sign error in custom_jvp / custom_vjp. (#3213) (#3219)
f(x, y) = sin(x) * y.

df/dy should be sin(x) instead of -sin(x).
==

jax/custom_derivatives.py
==================
572928df;Matthew Johnson;2020-05-28 10:20:36 -0700;fix custom_jvp_call_jaxpr transpose function (#3231)
* make custom_jvp_call_jaxpr handle multilinear funs

see #3226

* remove old comment
==

jax/custom_derivatives.py
tests/api_test.py
==================
c1ccbdf1;Adam Paszke;2020-05-28 17:39:13 +0200;Small cleanup for partial_eval (#3210)
`partial_eval` uses some pretty tricky conventions for return values
(see `partial_eval_wrapper`), but it forces all call sites to deal with
untangling them. This commit inlines the postprocessing into
`partial_eval`, greatly simplifying its usage.
==

jax/interpreters/partial_eval.py
==================
5475e1db;Peter Hawkins;2020-05-28 10:07:06 -0400;Fix uses of sets in einsum to avoid nondeterminism. (#3230)
* Fix uses of sets in einsum to avoid nondeterminism.

* Address review comments.
==

jax/numpy/lax_numpy.py
==================
9b91e894;Jake Vanderplas;2020-05-27 18:57:00 -0700;Add implementation of np.compress (#3227)

==

docs/jax.numpy.rst
jax/numpy/__init__.py
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
5fa6ab51;Jake Vanderplas;2020-05-27 17:08:12 -0700;Implement np.argwhere & np.flatnonzero (#3223)

==

docs/jax.numpy.rst
jax/numpy/__init__.py
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
6e50aa9b;Skye Wanderman-Milne;2020-05-27 17:05:36 -0700;Update installation directions in README to mention expected CUDA location. (#3190)
See https://github.com/google/jax/issues/989
==

README.md
==================
02b4fd35;Julius Kunze;2020-05-28 00:15:01 +0200;Fix broadcast_shapes for polymorphic dims (#3216) (#3224)
* Fix #3216

* Simplify
==

jax/lax/lax.py
tests/masking_test.py
==================
7d96aae5;Peter Hawkins;2020-05-27 16:44:38 -0400;Fix bug in pytype fix. (#3229)

==

jax/custom_derivatives.py
==================
41292a2a;Jake Vanderplas;2020-05-27 13:20:27 -0700;mention numpy & scipy convolve functions in gotchas doc. (#3214)

==

docs/notebooks/Common_Gotchas_in_JAX.ipynb
==================
336a0d6e;Peter Hawkins;2020-05-27 16:13:31 -0400;Fix pytype error. (#3226)
* Fix pytype error.

* Incorporate review comment.
==

jax/custom_derivatives.py
==================
94b4ccd6;Peter Hawkins;2020-05-27 15:34:35 -0400;Relax test tolerance on lax_scipy_test to fix a test failure on Skylake machines at LLVM head. (#3225)

==

tests/lax_scipy_test.py
==================
c5010cda;Roy Frostig;2020-05-26 11:54:14 -0700;use new gensym in host_callback jaxpr rewriter

==

jax/experimental/host_callback.py
==================
da9d8c9c;Roy Frostig;2020-05-26 11:34:06 -0700;update reference jaxprs in tests

==

tests/api_test.py
tests/host_callback_test.py
==================
1b020fe2;Roy Frostig;2020-05-26 11:28:50 -0700;update core.gensym consumers, address rewrite TODOs in lax control flow rules

==

jax/interpreters/partial_eval.py
jax/lax/lax_control_flow.py
tests/core_test.py
==================
e80e9634;Roy Frostig;2020-05-26 11:21:49 -0700;jaxpr-dependent gensym to avoid var duplication

==

jax/core.py
==================
8f2d72eb;Adam Paszke;2020-05-27 20:22:40 +0200;Simplify handling of non-linear equations in backward_pass and fix remat (#3162)
Previously, `backward_pass` has been generalized to be able to handle
non-linear computation in the body, but it could easily get confused
into doing unnecessary work only to throw it away later. Additionally, it
treated any call primitive embedded inside remat like remat itself,
which is obviously wrong.

This patch fixes both of those issues and simplifies a bunch of the code
at the same time. `backward_pass` now has an invariant that it only
deals with jaxprs containing linear equations alone, and becomes
a simple transposing interpreter again.

**Background on JVP vs linearization**

Ok, so why does this change actually fix the problem? It is important to
understand that JVP and linearization transforms are actually two
different things, even though we often identify them as one. Both take
in a function of type `a -> b`, but their ranges are different! JVP
returns a function of type `(a, T a) -> (b, T b)` while linearization
returns `a -> (b, T a --o T b)`. Note that the second type carries more
information, because we get a guarantee that (1) `b` does not depend on
`T a` and (2) the dependence of `T b` on `T a` is linear.

The reason why we usually treat them as equivalent, is that they can be
shown to be "isomorphic". If we take the output of linearization, we can
make it a JVP-like function using the following combinator:
```haskell
jvp f = \a ta -> let (b, lf) = linearize f in (b, lf ta)
```
More importantly for JAX, which doesn't have a linearization interpreter,
if we assume (1) and (2), linearization can be recovered in terms of jvp
as well:
```haskell
linearize f = \a -> let fjvp = jvp f in
                    partial_eval fjvp (Known a) Unknown
```
That is, if we have a mathematically correct JVP, then linearization is
simply partial evaluation with all primal values marked as known, and
all tangents treated as yet unknown values.

One important performance consideration is that for forward-mode AD we
really want to use the JVP formulation, which can interleave the computation
of primals and tangents, instead of sequencing them and increasing the memory
cost. On the other hand, transposition (necessary for VJPs!) can only be
applied to linear functions, and so it can't possibly work on the output
of JVP. It really can only be apply to the second output of the
linearization transform. Hence, we really care about both, but can we avoid
having two very similar implementations of (approximately) the same thing?
It seems that the answer is yes, because of the equivalence outlined above!

**If all this is so nice, then what's the problem?**

The problem is, of course, remat. Partial eval is able to thread the
known/unknown information correctly through regular call primitives, but
mind you, remat is no regular call primitive! Once we enter remat, we are
no longer interested in treating _anything_ like a known value. After
all, our goal here is to record an accurate trace of everything that has
happened in the body of a remat, including the primal (known!)
computation. This however presents a challenge for implementing
linearization in terms of JVP, because inside the body of remat we break
the assumption that known/unknown corresponds to the primal/tangent
distinction. Its body, instead of representing the second output of
linearization simply contains the traced JVP code now...

One way to fix it would be to implement a proper linearization pass that
would track the distinciton between primal and tangent information while
still allowing to stage out code for primals. @mattjj and I have even
started hacking together an implementation for that.

I've been trying to convince @mattjj that there is no other way to go
about it, but I couldn't really convince him that this is the case.
Then, once I wanted to write a semi-formal proof I could no longer even
convince myself! Turns out that there is an alternative solution!

What this patch does is, it stops caring about the output of the
`linearize` function (defined as JVP + partial eval, as discussed above)
to be a good linearization. It still is if you don't use remats in your
code, but it still breaks miserably once you do. However, as long as all
the complications are contained solely in the `call_jaxpr` embedded inside
a remat, we still have a chance to fix them! This is because the
transposition interpreter never reaches into those bodies directly, but
rather asks the call primitive to transpose itself.

Now, how do you transpose remat? We can't just reuse the code used for
regular call primitives (this is what happens now BTW), because unlike
for them, the `call_jaxpr` doesn't represent a linear function! But it's
not completely useless either --- it contains the traced JVP code. So,
how do we get from there to a linear function? Partial eval! And if you
think about it, it is exactly what we wanted --- we end up evaluating all
the primal code in the body once again, while only staging out the tangent
computation, to be passed into the transposing interpreter again.

Fin.
==

jax/interpreters/ad.py
tests/api_test.py
==================
ec3b593c;gaurav pathak;2020-05-27 12:37:55 -0400;Added geometric distribution to scipy stats (#3205)

==

jax/scipy/stats/__init__.py
jax/scipy/stats/geom.py
tests/scipy_stats_test.py
==================
e3b046bc;Benjamin Kramer;2020-05-27 16:29:00 +0200;Adjust complex64 tolerance for upcoming XLA change (#3218)
It makes sense for complex64 tolerance to be the same as float32
tolerance here. While there re-enable the test on GPU, which was blocked
on a bug that's long gone.
==

tests/lax_numpy_test.py
==================
1cc47192;Lena Martens;2020-05-27 08:59:31 +0100;Remove pe from name_stack and test. (#3209)

==

jax/interpreters/partial_eval.py
tests/metadata_test.py
==================
9f8a4ad3;Matthew Johnson;2020-05-26 20:01:36 -0700;remove stray print statement from #1529

==

jax/numpy/lax_numpy.py
==================
6ffde806;Skye Wanderman-Milne;2020-05-26 14:26:53 -0700;Implement pmap of sharded_jit (#3144)
* Implement pmap of sharded_jit

* Update jax/interpreters/pxla.py

Co-authored-by: James Bradbury <jekbradbury@google.com>

* Address comments

Co-authored-by: James Bradbury <jekbradbury@google.com>
==
==================
e526109a;Du Phan;2020-05-26 15:41:01 -0400;Remove dtype warning for `np.quantile` (#3188)
* drop the warning in index_to_gather

* fix dtype issue at quantile

* revert the change, the issue seems to be fixed
==

jax/numpy/lax_numpy.py
==================
0f230029;George van den Driessche;2020-05-26 20:21:22 +0100;Add a JAX flag to avoid most optimizations. (#3208)

==

jax/lib/xla_bridge.py
==================
a486f548;Jean-Baptiste Lespiau;2020-05-26 09:38:28 +0200;Add a summary explaining the usage and context for JAX PRNG design. (#2525)
* Add a summary explaining the usage and context for JAX PRNG design.

The current design_notes do not match current JAX API, and it's a pretty
long doc to read to understand how to use it.

Closes: #2087

* Change 'should' to be more precise.

* Address comments.
==

jax/random.py
==================
f18f7920;George Necula;2020-05-26 10:22:33 +0300;Fix error in code generation of batched while loops (#3207)
Fixed the case when the value is a unit, which we do not batch.
==

jax/lax/lax_control_flow.py
tests/lax_control_flow_test.py
==================
0eace80a;James Bradbury;2020-05-24 22:12:58 -0700;Fix experimental host callback on multi-host (#3200)
* Fix experimental host callback on multi-host

Hosts can only access the outfeed queue for local devices, while `api.devices` returns all devices in the system.

* Update host_callback.py
==

jax/experimental/host_callback.py
==================
f1ae2166;George Necula;2020-05-24 19:12:37 +0300;Added argument check to all primitives. (#3197)
* Added argument check to all primitives.

The issue that inspired this is that `lax.tie_in` is
easy to misuse if the first argument is not a JAX type, then
it silently disappears. This means that `lax.tie_in((x, x), const)`
is the same as `const` even though `x` is a tracer.

This error would be caught previously if core.skip_checks == False
because then `bind` checks its arguments. I have essentially added
an unconditional argument check to `bind`.

In case this is considered too inefficient, we can add argument
checking to individual primivites, e.g., tie_in. For most primitives
if a non-JAX array is passed, the `impl` rule would fire and `numpy`
would report the error somehow, perhaps.

* Merged find_top_trace with check_args

This was previously merged as #2948 but reverted awaiting the fixes
in some user code.
==

jax/api.py
jax/core.py
jax/lax/lax.py
tests/lax_test.py
==================
afadb12b;George Necula;2020-05-24 10:50:07 +0300;Improved tapping support for while: tap inside cond, vmap of while (#3195)
* Improved tapping support for while: tap inside cond, vmap of while

* Fix float64->float32 in tests
==

jax/experimental/host_callback.py
jax/lax/lax_control_flow.py
tests/host_callback_test.py
==================
9d6744fc;Stephan Hoyer;2020-05-23 11:45:27 -0700;Cleanup test_custom_root_scalar and re-enable it for TPUs (#3184)
The test passes now on TPUs, thanks to the new ``lax.integer_pow`` primitive.
==

tests/lax_control_flow_test.py
==================
b493a7e5;George Necula;2020-05-23 13:49:27 +0300;Fix the handling of repeated vmap for id_tap (#3132)
* Fix the handling of repeated vmap for id_tap

* Updated the transforms to always be a tuple of tuples

* Changed the transforms to be dictionaries
==

docs/CHANGELOG.rst
jax/experimental/host_callback.py
tests/host_callback_test.py
==================
de800d20;Penn;2020-05-22 15:41:37 -0700;fix #3165 if round half up behavior is desired (#3166)
* fix issue 3165 if round half up behaviour is desired

* add test for round half

* fix integer array input and and add to test

* fix truncated integer output

* match input and output dtypes

* fix asymmetric rounding and extend test

* use lax for rounding
==

jax/scipy/ndimage.py
tests/scipy_ndimage_test.py
==================
190f88de;Jascha Sohl-Dickstein;2020-05-22 14:12:44 -0700;Update Common_Gotchas_in_JAX.ipynb (#3189)
typo fix
==

docs/notebooks/Common_Gotchas_in_JAX.ipynb
==================
96c20f32;Roy Frostig;2020-05-21 22:07:24 -0700;Merge pull request #2734 from google/tycheck
typecheck jaxprs
==
==================
c293a102;Roy Frostig;2020-05-21 20:54:02 -0700;work around mypy

==

jax/core.py
==================
69d7bcf7;Roy Frostig;2020-05-21 20:02:30 -0700;except-and-raise during jaxpr checking, adding jaxpr as context, and simplify type environment

==

jax/core.py
==================
8e61ce8d;Roy Frostig;2020-05-21 18:28:09 -0700;fix unitvar comparisons and move to class attributes

==

jax/core.py
==================
ecd89362;Skye Wanderman-Milne;2020-05-21 14:50:16 -0700;Address comments

==

jax/interpreters/pxla.py
jax/interpreters/xla.py
==================
77e4d8b3;joao guilherme;2020-05-21 18:12:18 -0300;Updates onp -> np in random, loops, jet and in the tests of stax and optix (#3182)

==

jax/experimental/jet.py
jax/experimental/loops.py
jax/random.py
tests/optix_test.py
tests/stax_test.py
==================
d8ede010;Skye Wanderman-Milne;2020-05-21 14:00:58 -0700;Update jax/interpreters/pxla.py
Co-authored-by: James Bradbury <jekbradbury@google.com>
==

jax/interpreters/pxla.py
==================
a3e0cd12;Skye Wanderman-Milne;2020-05-21 13:52:03 -0700;Fix pxla.shard_args bug (#3170)

==

jax/numpy/lax_numpy.py
tests/pmap_test.py
==================
5d125539;Roy Frostig;2020-05-21 13:14:43 -0700;axis_index abstract eval rule

==

jax/interpreters/pxla.py
==================
1a916626;Roy Frostig;2020-05-21 13:13:42 -0700;return tuple in psum abstract eval rule

==

jax/lax/lax_parallel.py
==================
1d780816;Roy Frostig;2020-05-21 13:12:59 -0700;use jax.numpy in jaxpr typecheck tests

==

tests/core_test.py
==================
7ff389bd;Roy Frostig;2020-05-21 13:11:58 -0700;extend type transfer to all primitives, including call and map primitives

==

jax/core.py
jax/interpreters/partial_eval.py
==================
e2cc5689;Roy Frostig;2020-05-20 18:15:40 -0700;raise type errors consistently in jaxpr checker

==

jax/core.py
==================
6475f60c;Roy Frostig;2020-05-20 18:14:48 -0700;fix import in core_test

==

tests/core_test.py
==================
1e556033;Roy Frostig;2020-05-20 12:39:42 -0700;avoid attempt to read literals from the typechecking environment

==

jax/core.py
==================
060bd8a4;Roy Frostig;2020-04-15 18:38:25 -0700;tidy jaxpr typechecking error test

==

tests/core_test.py
==================
0f109d9f;Roy Frostig;2020-04-15 18:37:25 -0700;add jaxpr context to typechecker error message

==

jax/core.py
==================
3705252b;Roy Frostig;2020-04-15 18:01:24 -0700;have UnitVar subclass Var (caught by mypy)

==

jax/core.py
==================
42e7e20e;Roy Frostig;2020-04-15 17:02:48 -0700;update check_jaxpr doc

==

jax/core.py
==================
cc34ed26;Roy Frostig;2020-04-15 17:02:01 -0700;check aval compatibility, not strict equality, when typechecking jaxpr equations

==

jax/core.py
jax/lax/lax_control_flow.py
tests/core_test.py
==================
0c2c5584;Roy Frostig;2020-04-15 11:52:44 -0700;check that variables are typed equally throughout a jaxpr

==

jax/core.py
==================
8e70769c;Roy Frostig;2020-04-15 11:45:25 -0700;factor out jaxpr-check context and variable environment

==

jax/core.py
==================
1205f7a0;Roy Frostig;2020-04-15 11:05:32 -0700;factor out jaxpr equation checks

==

jax/core.py
==================
94b1f631;Roy Frostig;2020-04-15 10:58:39 -0700;raise TypeError for jaxpr typechecking errors

==

jax/core.py
tests/core_test.py
==================
82a9af51;Roy Frostig;2020-04-14 22:22:35 -0700;typecheck jaxpr equations

==

jax/core.py
tests/core_test.py
==================
4cbd14ca;Skye Wanderman-Milne;2020-05-21 10:38:04 -0700;Update jax version to 0.1.68 (#3181)

==

docs/CHANGELOG.rst
jax/version.py
==================
bb2127ce;Jake Vanderplas;2020-05-21 09:20:59 -0700;Future-proof view test against signaling NaNs (#3178)

==

jax/test_util.py
tests/lax_numpy_test.py
==================
c459280e;Dan Piponi;2020-05-21 08:35:17 -0700;Added `associative_scan`. (#2170)
* Added `associative_scan`.

* Fixed problem where base case of associative scan could fail

* remove jax.numpy dependence in associative_scan

Co-authored-by: Matthew Johnson <mattjj@google.com>
==

jax/lax/__init__.py
jax/lax/lax_control_flow.py
tests/lax_control_flow_test.py
==================
5c1de283;Matthew Johnson;2020-05-21 08:00:18 -0700;revise vmap in_axes/out_axes leaf type error msg (#3179)
from #3161 discussion
==

jax/api.py
tests/api_test.py
==================
eb81d7e7;Matthew Johnson;2020-05-21 06:47:02 -0700;add dict in_axes example to vmap docstring (#3176)
* add dict in_axes example to vmap docstring

fixes #3161

* fix typo
==

jax/api.py
==================
6e3c8b1d;Jake Vanderplas;2020-05-21 06:40:24 -0700;Fix arr.view() on TPU & improve tests (#3141)

==

jax/numpy/lax_numpy.py
jax/test_util.py
tests/lax_numpy_test.py
==================
ae9d1753;Matthew Johnson;2020-05-20 20:21:41 -0700;fix while_loop cond function batching (#3174)
* fix while_loop cond function batching

fixes #3164

* add test for #3164
==

jax/lax/lax_control_flow.py
tests/lax_control_flow_test.py
==================
f9c978e9;Matthew Johnson;2020-05-20 19:09:54 -0700;improve docstring of jax.numpy.broadcast_to (#3173)
thanks @joaogui1 !
==

jax/numpy/lax_numpy.py
==================
a4094f72;Matthew Johnson;2020-05-20 19:09:44 -0700;revise "Tracer with raw numpy" error message (#3160)
* revise "Tracer with raw numpy" error message

fixes #3133

* fix f-string typo

* fix typo

Co-authored-by: James Bradbury <jekbradbury@google.com>

Co-authored-by: James Bradbury <jekbradbury@google.com>
==

jax/core.py
tests/api_test.py
==================
12f26d3c;Skye Wanderman-Milne;2020-05-20 14:40:28 -0700;Improve ``devices`` and related documentation (#3155)

==

jax/lib/xla_bridge.py
tests/xla_bridge_test.py
==================
8b32c5dd;James Bradbury;2020-05-20 14:30:33 -0700;Avoid running trivial jitted subcomputations in pe (#3169)

==

jax/interpreters/partial_eval.py
==================
f3499793;Peter Hawkins;2020-05-20 16:17:17 -0400;Relax tolerance of LaxVmapTest.testDot for float64 inputs. (#3167)

==

tests/lax_test.py
==================
7d157c71;joao guilherme;2020-05-20 01:43:48 -0300;onp -> np (#3157)

==

tests/lax_numpy_test.py
==================
42b425d8;Matthew Johnson;2020-05-19 18:14:10 -0700;fix disable_jit logic in lax.cond and lax.while_loop (#3156)
* fix disable_jit logic in lax.cond, fixes #3093

* fix disable_jit logic in lax.while_loop, fix #2823

* add test for issue #3093

* add test for #2823

* add test for #2598
==

jax/lax/lax_control_flow.py
tests/lax_control_flow_test.py
tests/ode_test.py
==================
3141ff83;Jake Vanderplas;2020-05-19 16:58:42 -0700;Add lax implementation of np.isin() and np.in1d() (#3087)

==

docs/jax.numpy.rst
jax/numpy/__init__.py
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
ccb203c8;Matthew Johnson;2020-05-19 15:51:07 -0700;improve pmap unbound axis error, fixes #3120 (#3152)

==

jax/api.py
jax/interpreters/xla.py
tests/pmap_test.py
==================
b7ff305a;Jake Vanderplas;2020-05-19 15:50:54 -0700;fix broken TPU test (#3153)

==

tests/random_test.py
==================
bc47a32c;Matthew Johnson;2020-05-19 15:41:03 -0700;make lax.psum promote bool -> int (#3150)
* make lax.psum promote bool -> int, fixes #3123

* fix test bug

* fix typo in test
==

jax/lax/lax_parallel.py
tests/pmap_test.py
==================
83a339e1;Jacob Kelly;2020-05-19 18:22:25 -0400;add erf and erfc rules (#3051)
refactor def comp
==

jax/experimental/jet.py
tests/jet_test.py
==================
b6777c07;Sebastian Bischoff;2020-05-20 00:18:34 +0200;Correct calculation of loss and increase learning rate (#3113)

==

docs/notebooks/Neural_Network_and_Data_Loading.ipynb
docs/notebooks/neural_network_with_tfds_data.ipynb
==================
850f1afd;Matthew Johnson;2020-05-19 15:17:03 -0700;improve errors for complex derivs, fixes #3121 (#3149)

==

jax/api.py
jax/experimental/host_callback.py
tests/api_test.py
==================
8fe26190;Jake Vanderplas;2020-05-19 14:19:00 -0700;Expand type support for random uniform() & randint() (#3138)

==

jax/dtypes.py
jax/random.py
tests/random_test.py
==================
73b76e99;Sergei Lebedev;2020-05-19 20:40:03 +0100;Exported lax from jax/__init__.py (#3135)
This allows to use lax functions without separately importing jax.lax.
==

jax/__init__.py
==================
77e31323;Stephan Hoyer;2020-05-19 08:23:45 -0700;Fix indentation for docstrings in jax.experimental.host_callback (#3119)

==

jax/experimental/host_callback.py
==================
85fe5a28;alexdavies;2020-05-19 07:06:32 +0100;Add gradients to the scatter_max and scatter_min operations. (#3111)
This is being done to allow the creation of a differentiable segment_max. Segment_max is an important operation for GraphNets and is an open feature request at https://github.com/google/jax/issues/2255

Co-authored-by: Alex Davies <adavies@google.com>
==

jax/lax/lax.py
tests/lax_test.py
==================
8d0749f1;Ben Lee;2020-05-18 19:24:45 -0700;Fix a corner case in `repeat`. (#3117)
* Fixes a corner case: `jnp.repeat(jnp.array(0), 1, axis=0)` throws an error,
whereas `np.repeat(np.array(0), 1, axis=0) = np.array([0])`.

* Add test for `np.range(np.array(0), 1, axis=0)`.
==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
888c9c77;Skye Wanderman-Milne;2020-05-12 14:46:37 -0700;Implement pmap of sharded_jit

==

jax/interpreters/pxla.py
jax/interpreters/sharded_jit.py
jax/interpreters/xla.py
jax/lax/lax.py
tests/sharded_jit_test.py
==================
d53bab93;Skye Wanderman-Milne;2020-05-18 18:24:33 -0700;Improve sharded_jit error message and fix test (#3145)

==

jax/interpreters/sharded_jit.py
tests/sharded_jit_test.py
==================
083cdd38;Skye Wanderman-Milne;2020-05-18 18:18:06 -0700;Fix in pxla._inner_partitions (#3146)
In cb77f2a22de49e85da93f43b7dc448aa238d5207, I switched to looking for
sharding_constraint_p's name since sharding_constraint_p itself is
defined in sharded_jit.py, but didn't quite get the update right.
==

jax/interpreters/pxla.py
==================
cb77f2a2;Skye Wanderman-Milne;2020-05-18 16:37:49 -0700;Move some sharded_jit functionality into pxla.py (#3142)
Specifically:
* Move `_inner_partitions`
* Move `get_num_partitions`
* Move and slightly modify the logic for finding and validating inner
  partitions to a new function, `reconcile_num_partitions`
* Move `_partitioned_sharding_spec` and rename to `partitioned_sharding_spec`

This is in preparation for enabling pmap-of-sharded_jit, since pmap
will need access to this functionality as well.
==

jax/interpreters/pxla.py
jax/interpreters/sharded_jit.py
==================
9152b760;Skye Wanderman-Milne;2020-05-18 15:20:49 -0700;Add with_sharding_constraint method to be used within sharded_jit. (#3100)
See the with_sharding_constraint docstring for a description of what this method does.

Depending on how we decide nested sharded_jits should work, an
alternative implementation for with_sharding_constraint could be:
```python
def with_sharding_constraint(x, partitions):
    return sharded_jit(lambda x: x, in_parts=partitions, out_parts=partitions)
```
In this case, we could get rid of the with_sharding_constraint primitive, and
possibly even the API. This implementation gets the job done for now
without committing to a nested sharded_jit behavior, and is also much
easier to take the gradient of than sharded_jit.
==

jax/interpreters/sharded_jit.py
tests/sharded_jit_test.py
==================
46034329;Stephan Hoyer;2020-05-18 15:13:54 -0700;Fix gradient for jax.scipy.ndimage.map_coordinates (#3110)
* Fix gradient for jax.scipy.ndimage.map_coordinates

Fixes GH3024

* minor refactor for clarification
==

jax/scipy/ndimage.py
tests/scipy_ndimage_test.py
==================
36e7fad1;Peter Hawkins;2020-05-18 17:54:20 -0400;Add a primitive integer_pow() for values raised to a fixed integer scalar. (#3140)
* Add a primitive integer_pow() for values raised to fixed integer scalar.

Use integer_pow() in the RHS JVP of div(). Also use it in square() and reciprocal().

Fixes #3136

```
In [1]: from jax import grad, make_jaxpr
In [2]: def inv(x): return 1/x
In [3]: print(grad(grad(grad(grad(grad(grad(inv))))))(4.))
0.043945312

In [4]: make_jaxpr(grad(grad(grad(grad(grad(grad(inv)))))))(4.)
Out[4]:
{ lambda  ; a.
  let b = integer_pow[ y=-7 ] a
      c = mul -6.0 b
      d = mul -120.0 c
  in (d,) }

In [5]:
```

* Use x ** 3 in gelu definition.
==

jax/experimental/jet.py
jax/lax/__init__.py
jax/lax/lax.py
jax/nn/functions.py
jax/numpy/lax_numpy.py
tests/host_callback_test.py
tests/lax_test.py
==================
a9c1b386;Sandu Ursu;2020-05-18 22:12:52 +0100;Added link to README (#3139)

==

docs/notebooks/quickstart.ipynb
==================
ed0e227e;Skye Wanderman-Milne;2020-05-18 11:39:55 -0700;Add sharded_jit translation rule. (#3099)
This is potentially dangerous, because it lets sharded_jit() be called
inside other calls primitives (e.g. jit, pmap) which isn't supported
yet. I'm adding it now because I'm planning to implement
pmap-of-sharded_jit soon, and it will help with testing a set_sharding
API I'm also planning to add soon.
==

jax/interpreters/sharded_jit.py
tests/sharded_jit_test.py
==================
bc5a0b33;Peter Hawkins;2020-05-18 10:19:03 -0400;Remove some uses of jax.partial. (#3131)

==

examples/differentially_private_sgd.py
jax/numpy/polynomial.py
==================
b071b12a;George Necula;2020-05-18 16:02:49 +0300;Fixed link in FAQ (#3129)

==

docs/faq.rst
==================
2be471cc;Stephan Hoyer;2020-05-17 22:12:21 -0700;Remove redundant flag configuration from lax_scipy_sparse_test (#3128)

==

tests/lax_scipy_sparse_test.py
==================
912b2825;Jake Vanderplas;2020-05-16 10:23:26 -0700;Implement np.histogram_bin_edges and np.histogram (#3081)

==

docs/jax.numpy.rst
jax/numpy/__init__.py
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
670fab59;Jamie Townsend;2020-05-16 14:19:24 +0100;Test code in docs and api.py docstrings (#2994)
Also remove jaxpr doc tests from api_test.py.
==

.travis.yml
docs/async_dispatch.rst
docs/faq.rst
jax/api.py
jax/config.py
pytest.ini
tests/api_test.py
==================
510af1de;Ed Schmerling;2020-05-15 20:51:53 -0700;Fix documentation for `nn.elu`, `nn.celu`, and `lax.expm1`. (#3116)

==

jax/lax/lax.py
jax/nn/functions.py
==================
e675f804;Jake Vanderplas;2020-05-15 19:09:43 -0700;Add support for 8- and 16-bit output in _random_bits (#3090)

==

jax/random.py
jax/test_util.py
tests/random_test.py
==================
12a9af86;Jake Vanderplas;2020-05-15 14:29:02 -0700;Update random.logistic() to prevent infinities (#3048)

==

jax/random.py
==================
812df27a;Peter Hawkins;2020-05-15 15:51:07 -0400;Update uses of deprecated XLA methods. (#3109)

==

jax/lib/xla_bridge.py
tests/xla_bridge_test.py
==================
450b7abb;Roy Frostig;2020-05-14 19:38:43 -0700;Merge pull request #2993 from google/cond
single-operand cond
==
==================
b19166c4;Roy Frostig;2020-05-14 18:01:34 -0700;silence a pytype error in jet tracing

==

jax/experimental/jet.py
==================
28da2bc4;Roy Frostig;2020-05-14 17:21:57 -0700;improve two-operand cond detection

==

jax/lax/lax_control_flow.py
==================
77703b89;Peter Hawkins;2020-05-14 19:17:44 -0400;Add support for sorting complex values, defaulting to a NumPy-style l… (#3096)
* Add support for sorting complex values, defaulting to a NumPy-style lexicographic ordering.

Implemented using a custom comparator, since the XLA-level default comparator doesn't impose and ordering for complex values.

* Disable sort test on CPU and TPU.

==

jax/lax/lax.py
tests/lax_test.py
==================
85d7b308;Peter Hawkins;2020-05-14 19:17:23 -0400;Allow non-classes as second argument of `issubclass`. (#3098)

==

jax/dtypes.py
tests/dtypes_test.py
==================
dceb5787;Matthew Johnson;2020-05-14 16:06:20 -0700;stash order on jet master trace, fixes #3079 (#3097)

==

jax/experimental/jet.py
==================
9d8ecc5a;Roy Frostig;2020-05-14 13:56:07 -0700;avoid committing to argument types so long as cond is overloaded

==

jax/lax/lax_control_flow.py
==================
007cdf2f;Thomas Keck;2020-05-14 21:04:08 +0100;Adds additional epsilon to adam for numerical stability. (#3091)
* Adds additional epsilon to adam for numerical stability.

Meta-gradients through the adam optimizer diverge, because the derivative
of the adam scaling with respect to the gradients get an additional
1/sqrt(g) factor. This additional factor is unregularized without the
second epsilon added in this commit.

* Renames eps2 to eps_root and improves docstring

Co-authored-by: Thomas Keck <thomaskeck@google.com>
==

jax/experimental/optix.py
==================
83c7394b;Jake Vanderplas;2020-05-14 12:58:31 -0700;fix astype() test (#3072)

==

tests/lax_numpy_test.py
==================
7c687b24;Skye Wanderman-Milne;2020-05-14 11:38:08 -0700;sharded_jit cleanup (#3075)
* Add sharding utilities to xla_bridge
* Change partitions argument to in_parts and out_parts
* Add unit tests
* Reuse more pxla functionality
* Remove stale translation rule
* Fail on non-TPU platforms
* Add docstring
* And more!
==

jax/interpreters/sharded_jit.py
jax/lib/xla_bridge.py
tests/sharded_jit_test.py
==================
73a55e04;Roy Frostig;2020-05-14 09:16:49 -0700;changelog: single-operand cond

==

docs/CHANGELOG.rst
==================
930be588;Roy Frostig;2020-05-14 09:05:31 -0700;update reference jaxpr using cond in outfeed rewriting test

==

tests/host_callback_test.py
==================
cb5b1d10;Roy Frostig;2020-05-14 09:04:48 -0700;handle single-operand cond in token-threading rewriter

==

jax/experimental/host_callback.py
==================
9f6774a9;Roy Frostig;2020-05-14 09:02:29 -0700;update uses of cond in host callback test

==

tests/host_callback_test.py
==================
4ce2aa25;Peter Hawkins;2020-05-14 11:13:15 -0400;Make lax.sort support tuple arguments using a variadic sort. (#3085)
* Make lax.sort support tuple arguments using a variadic sort.

Change sort_jvp to use a gather of ids to compute the JVP rather than sorting repeatedly.

Remove sort_key_val_p, since it is redundant with a variadic sort_p.

* Fix mypy errors.

* Change JVP rule to use NumPy indexing.
Remove redundant case in batching rule.
==

jax/lax/__init__.py
jax/lax/lax.py
jax/numpy/lax_numpy.py
tests/lax_test.py
==================
6e3bfc33;Roy Frostig;2020-05-11 19:18:31 -0700;comment on joining constants for conditional branch jaxprs

==

jax/lax/lax_control_flow.py
==================
2950eb11;Roy Frostig;2020-05-11 19:12:53 -0700;comment on joining staged jaxprs in partial evaluation of conditionals

==

jax/lax/lax_control_flow.py
==================
34efdd98;Roy Frostig;2020-05-11 17:55:37 -0700;style changes in lax.cond

==

jax/lax/lax_control_flow.py
==================
e8f12b6b;Roy Frostig;2020-05-11 17:18:22 -0700;remove deprecation warning on five-argument cond

==

jax/lax/lax_control_flow.py
==================
76612c62;Roy Frostig;2020-05-11 17:11:21 -0700;test and fix cond when branch-staging is off

==

jax/lax/lax_control_flow.py
tests/lax_control_flow_test.py
==================
de03c99b;Roy Frostig;2020-05-11 16:48:30 -0700;update jaxpr doc and tests with single-operand cond

==

docs/jaxpr.rst
tests/api_test.py
==================
f90bd4f5;Roy Frostig;2020-05-11 15:47:16 -0700;move cond operand to final argument position

==

jax/lax/lax_control_flow.py
tests/lax_control_flow_test.py
==================
cc6cea20;Roy Frostig;2020-05-11 13:59:57 -0700;update reference jaxpr in cond-related jaxpr test

==

tests/api_test.py
==================
df622798;Roy Frostig;2020-05-07 11:06:15 -0700;cache jaxprs formed by cond branch staging

==

jax/lax/lax_control_flow.py
==================
efc1104c;Roy Frostig;2020-05-06 19:42:50 -0700;have loops module generate same-argument jaxprs for single-operand cond

==

jax/experimental/loops.py
==================
30bb5fdd;Roy Frostig;2020-05-06 19:03:53 -0700;transpose rule for single-operand cond primitive

==

jax/lax/lax_control_flow.py
==================
37bb6f09;Roy Frostig;2020-05-06 18:44:23 -0700;partial evaluation rule for single-operand cond primitive

==

jax/lax/lax_control_flow.py
==================
139c2a96;Roy Frostig;2020-05-05 19:44:34 -0700;fix cond-with-constants tests to use jax.numpy where needed

==

tests/lax_control_flow_test.py
==================
34d75c2e;Roy Frostig;2020-04-30 07:23:04 -0700;JVP rule for single-operand cond primitive

==

jax/lax/lax_control_flow.py
==================
226b5821;Roy Frostig;2020-04-30 06:58:23 -0700;batching rule for single-operand cond primitive

==

jax/lax/lax_control_flow.py
==================
fc4ab77b;Roy Frostig;2020-04-30 06:19:46 -0700;merge constvars when forming cond branch jaxprs

==

jax/lax/lax_control_flow.py
jax/util.py
tests/lax_control_flow_test.py
==================
027a5390;Roy Frostig;2020-04-29 16:00:49 -0700;translation rule for single-operand cond primitive

==

jax/lax/lax_control_flow.py
==================
97738be4;Roy Frostig;2020-04-29 15:56:15 -0700;bind a single-operand cond primitive and update jaxpr typechecks

==

jax/lax/lax_control_flow.py
==================
28e698ed;Roy Frostig;2020-04-28 22:37:44 -0700;update uses of cond in lax control flow tests

==

tests/lax_control_flow_test.py
==================
92176418;Roy Frostig;2020-04-23 17:41:19 -0700;take a single operand in lax.cond and deprecate the old calling convention

==

jax/lax/lax_control_flow.py
==================
16cf8451;Skye Wanderman-Milne;2020-05-13 17:46:35 -0700;Update jaxlib version to 0.1.47 in README

==

README.md
==================
6bd01602;Jake Vanderplas;2020-05-13 17:31:02 -0700;disable arr.view() test on TPU (#3089)
* disable arr.view() test on TPU

* Update lax_numpy_test.py

Use decorator.

* Update lax_numpy_test.py

Co-authored-by: Peter Hawkins <hawkinsp@cs.stanford.edu>
==

tests/lax_numpy_test.py
==================
777636af;Jake Vanderplas;2020-05-13 14:36:46 -0700;promote integer inputs to float in jnp.median() and jnp.quantile() (#3082)

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
59aab016;Jake Vanderplas;2020-05-13 12:48:16 -0700;Implement .view() method of jax.numpy arrays (#3073)

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
22d14fd7;Peter Hawkins;2020-05-13 14:00:44 -0400;Remove workaround for Mac linear algebra bug that is fixed in the minimum jaxlib version. (#3080)

==

jax/test_util.py
tests/linalg_test.py
tests/random_test.py
==================
91d1e0dd;Peter Hawkins;2020-05-13 10:59:31 -0400;Disable trapz test on TPU. (#3078)

==

tests/lax_numpy_test.py
==================
e9d33946;Sharad Vikram;2020-05-12 23:08:14 -0700;Make jnp.array convert empty list to DeviceArray (#3049)
* Make jnp.array convert empty list to DeviceArray

* Add additional tests for empty classes with __array__

Co-authored-by: Peter Hawkins <phawkins@google.com>
==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
d2f84d63;joao guilherme;2020-05-12 21:37:05 -0300;Change instances of onp to np and np to jnp (#3044)

==

jax/abstract_arrays.py
jax/dtypes.py
jax/lax_reference.py
jax/lazy.py
jax/numpy/lax_numpy.py
jax/test_util.py
==================
cd966f28;Peter Hawkins;2020-05-12 18:45:21 -0400;Disable check_type for trapz test due to test failures. (#3071)

==

tests/lax_numpy_test.py
==================
abdf504e;Tom Hennigan;2020-05-12 23:03:22 +0100;Avoid recompilation of rolled loops in threefry2x32. (#3069)

==

jax/random.py
==================
11760ca9;Skye Wanderman-Milne;2020-05-12 14:34:31 -0700;Refactor aval_to_result_handler to take unsharded aval. (#3067)
This is in preparation for calling it from the sharded_jit. Currently
aval_to_result_handler is specific to pmap, but this change makes it
work for any kind of sharding.
==

jax/interpreters/pxla.py
==================
4a84b913;James Bradbury;2020-05-12 14:34:23 -0700;lower in_axes=None to XLA replication annotation (#3025)
* lower in_axes=None to XLA replication annotation

* ignore replicated value for tokens
==

jax/interpreters/pxla.py
jax/interpreters/xla.py
==================
88d3422a;Peter Hawkins;2020-05-12 17:19:09 -0400;Add special case for integer scalars to jax.numpy.power. (#3066)
* Add special case for integer scalars to jax.numpy.power.

==

jax/numpy/lax_numpy.py
tests/host_callback_test.py
tests/lax_numpy_test.py
==================
96fbfeee;Jake Vanderplas;2020-05-12 14:12:03 -0700;Add lax implementation of np.trapz (#3042)

==

jax/numpy/__init__.py
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
ef4debca;Skye Wanderman-Milne;2020-05-12 11:17:22 -0700;Update jax version to 0.1.67 (#3065)

==

docs/CHANGELOG.rst
jax/version.py
==================
0d97c3ba;Skye Wanderman-Milne;2020-05-12 11:05:03 -0700;Import tpu_driver after xla_client (#3064)
This is a workaround until we build a new jaxlib with https://github.com/tensorflow/tensorflow/commit/f4628678066c72309d3fd121af1aaf54d9905ca3
==

jax/lib/__init__.py
==================
8008aa9e;Peter Hawkins;2020-05-12 11:09:02 -0400;Fix error message in optimizers piecewise_constant. (#3061)

==

jax/experimental/optimizers.py
==================
ccb8d459;Yusuke Oda;2020-05-13 00:04:53 +0900;Uses jnp.square instead of power. (#3036)
* Uses multiplication instead of power.

* Uses jnp.square instead of mul and adds check if jnp.square is implemented by mul.

==

jax/experimental/ode.py
jax/experimental/optimizers.py
jax/experimental/optix.py
jax/nn/functions.py
jax/scipy/sparse/linalg.py
jax/scipy/stats/multivariate_normal.py
tests/lax_numpy_test.py
==================
28bc4b75;George Necula;2020-05-12 10:09:42 +0300;Adjusted lax.numpy.indices test for older versions of numpy (#3053)
This test was failing on numpy 1.16.4
==

tests/lax_numpy_test.py
==================
cc9de875;George Necula;2020-05-12 10:06:32 +0300;Disabled lstsq test due to numerical failures (#3054)

==

tests/linalg_test.py
==================
a2d6b1aa;George Necula;2020-05-12 09:06:22 +0300;Fix typo in lstsq (#3052)

==

jax/numpy/linalg.py
==================
db71f3c5;Jake Vanderplas;2020-05-11 14:53:17 -0700;Initial implementation of np.linalg.lstsq() via SVD (#2744)

==

docs/jax.numpy.rst
jax/numpy/linalg.py
tests/linalg_test.py
==================
d55ea510;Peter Hawkins;2020-05-11 17:43:55 -0400;Update JAX to avoid XLA:Python API names deprecated in jaxlib 0.1.46. (#3046)
* Update JAX to avoid XLA:Python API names deprecated in jaxlib 0.1.46.

* Bump minimum jaxlib version to 0.1.47.
==

.travis.yml
jax/api.py
jax/dlpack.py
jax/experimental/host_callback.py
jax/interpreters/pxla.py
jax/interpreters/sharded_jit.py
jax/interpreters/xla.py
jax/lax/lax.py
jax/lax/lax_control_flow.py
jax/lax/lax_parallel.py
jax/lax_linalg.py
jax/lazy.py
jax/lib/__init__.py
jax/lib/xla_bridge.py
jax/random.py
jax/tools/jax_to_hlo.py
jaxlib/cuda_prng.py
jaxlib/cusolver.py
jaxlib/lapack.pyx
tests/api_test.py
tests/host_callback_test.py
tests/infeed_test.py
tests/lax_control_flow_test.py
tests/xla_bridge_test.py
==================
a5da921f;Skye Wanderman-Milne;2020-05-11 11:04:57 -0700;Move _flatten_axes to api_util.py (#3041)
This is in preparation for using it in sharded_jit.py (since sharded_jit isn't included in api.py yet).
==

jax/api.py
jax/api_util.py
==================
30c94c6e;Penn;2020-05-11 10:22:49 -0700;Add lax implementation of np.indices (#2998)

==

docs/jax.numpy.rst
jax/numpy/__init__.py
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
ddf079d8;George Necula;2020-05-11 20:17:26 +0300;Minor improvements to the script to build macos wheels (#3013)

==

build/build_jaxlib_wheels_macos.sh
==================
853bcda1;Peter Hawkins;2020-05-11 12:09:54 -0400;Fix some test flakiness. (#3039)

==

tests/core_test.py
tests/lax_numpy_test.py
tests/lax_test.py
tests/linalg_test.py
==================
72cd1f7d;sracaniere;2020-05-11 16:52:55 +0100;Fix sign error in examples. (#3031)

==

docs/notebooks/Custom_derivative_rules_for_Python_code.ipynb
==================
c27091be;Peter Hawkins;2020-05-11 11:31:40 -0400;Remove jax.lax.xla_bridge, which was an accidental export. (#3037)
All known users have been updated.
==

jax/lax/__init__.py
==================
7acb41d5;George Necula;2020-05-11 14:37:17 +0300;Fixed imports for readthedocs (#3033)

==

docs/developer.rst
docs/requirements.txt
==================
c171c33b;George Necula;2020-05-10 19:54:46 +0300;Update numpy references to use np. Added to Changelog (#3029)

==

docs/CHANGELOG.rst
jax/experimental/host_callback.py
tests/host_callback_test.py
==================
bc2d2c8a;George Necula;2020-05-10 14:25:18 +0300;Fix uses of deprecated onp. in pmap_test (#3028)

==

tests/pmap_test.py
==================
b3ae01d1;George Necula;2020-05-10 13:16:16 +0300;Use a new variable for static_broadcasted_argnums as a tuple. (#3027)
* Use a new variable for static_broadcasted_argnums as a tuple.

This works around a bug in pytype (b/156151503).

==

jax/api.py
==================
7d3c886b;yurodiviy;2020-05-10 05:04:42 +0300;Implement np.nanvar and np.nanstd (#2310)
* Implement nanvar & nanstd

Add tests for nanvar & nanstd

* Clean up bfloat16 tests for np.nanvar and np.nanstd

* add nanvar & nanstd to the whitelist

ignore numpy ddof warnings
==

jax/numpy/__init__.py
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
fbf10c69;Jake Vanderplas;2020-05-09 05:36:09 -0700;Implement np.digitize (#3003)

==

docs/jax.numpy.rst
jax/numpy/__init__.py
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
7b19302d;Jake Vanderplas;2020-05-08 21:01:57 -0700;Modify linspace so that endpoints equal the inputs. (#3016)

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
cf1d82d5;Stephan Hoyer;2020-05-08 17:59:54 -0700;Fix links in our developer docs (#3019)
The previous versions weren't valid RST.

Ironically, this was in the section with instructions on how to preview
changes to our documentation!
==

docs/developer.rst
==================
fb685ff2;Matthew Johnson;2020-05-08 17:58:25 -0700;sort supported dtypes in host_callback_test.py (#3020)
* sort supported dtypes in host_callback_test.py

This fixes issues I ran into with running `pytest -n auto
tests/host_callback_test.py` or similar.

* remove unused import
==

tests/host_callback_test.py
==================
2b622943;Matthew Johnson;2020-05-08 17:58:02 -0700;improve pmap static broadcasted kwarg error msg (#3018)
fixes #3007
==

jax/api.py
tests/api_test.py
==================
f60184e1;James Bradbury;2020-05-08 14:00:34 -0700;Support axis_index_groups in allreduce collectives (#2382)
* support replica groups in allreduce collectives

* add test and fix jaxpr in docs

* switch from XLA replica IDs to JAX axis indices

* fix psum transpose rule

* test other nesting order + imperfect nesting

* update jaxpr.rst

* handle None case

* add note+check that groups  cover the index space

* switch split_axis assert to NotImplementedError

* update CHANGELOG
==

docs/CHANGELOG.rst
docs/jaxpr.rst
jax/interpreters/pxla.py
jax/interpreters/xla.py
jax/lax/lax_parallel.py
tests/api_test.py
tests/pmap_test.py
==================
d4c0a8d1;Jake Vanderplas;2020-05-08 11:11:42 -0700;Add Colab test notebooks for CPU, GPU, and TPU (#3000)

==

tests/notebooks/colab_cpu.ipynb
tests/notebooks/colab_gpu.ipynb
tests/notebooks/colab_tpu.ipynb
==================
9dd3389d;Peter Hawkins;2020-05-08 11:45:16 -0400;Use a whitelist to clean up exported symbols in the jax.lax namespace. (#3012)

==

jax/lax/__init__.py
tests/core_test.py
==================
c375adf5;George Necula;2020-05-08 17:18:11 +0300;Implementation of id_tap/id_print using outfeed. (#3006)
This was already merged as #2791 but reverted due to XLA crashes.

This reverts commit 769d703b7ac1011babef6289382f1a14d7aafc42.
==

.travis.yml
docs/jax.experimental.host_callback.rst
docs/jax.experimental.rst
jax/BUILD
jax/api.py
jax/core.py
jax/experimental/host_callback.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
tests/host_callback_test.py
tests/lax_control_flow_test.py
==================
f21ade3f;Peter Hawkins;2020-05-08 10:04:19 -0400;Remove `jax.np` from the jax namespace (use `jax.numpy` instead). (#3010)

==

jax/__init__.py
==================
e1cb0324;George Necula;2020-05-08 10:01:28 +0300;Prepare version 0.1.47 for jaxlib (#3008)

==

WORKSPACE
docs/CHANGELOG.rst
jaxlib/version.py
==================
0ea22b7e;Peter Hawkins;2020-05-07 17:24:19 -0400;Use a whitelist to restrict visibility in top-level jax namespace. (#2982)
* Use a whitelist to restrict visibility in top-level jax namespace.

The goal of this change is to capture the way the world is (i.e., not break users), and separately we will work on fixing users to avoid accidentally-exported APIs.
==

docs/notebooks/How_JAX_primitives_work.ipynb
jax/__init__.py
tests/polynomial_test.py
==================
9f04d981;Jake Vanderplas;2020-05-07 13:17:43 -0700;Implement np.bincount (#2986)

==

docs/jax.numpy.rst
jax/numpy/__init__.py
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
d679ccda;George Necula;2020-05-07 21:52:11 +0300;Merge pull request #2999 from gnecula/jax_outfeed_undo
Undo the id_print/id_tap feature (PR #2791)
==
==================
769d703b;George Necula;2020-05-07 20:48:33 +0300;Undo the id_print/id_tap feature (PR #2791)
Crashes on Travis with the latest 0.1.46. Need to figure out what is going on

==

.travis.yml
docs/jax.experimental.host_callback.rst
docs/jax.experimental.rst
jax/BUILD
jax/api.py
jax/core.py
jax/experimental/host_callback.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
tests/host_callback_test.py
tests/lax_control_flow_test.py
==================
0a7974eb;Peter Hawkins;2020-05-07 11:36:44 -0400;Use a whitelist to limit visibility of exported names in jax.numpy. (#2978)
* Use a whitelist to limit visibility of exported names in jax.numpy.

Prevents unintentional exports of non-public names in the API.
==

docs/CHANGELOG.rst
docs/jax.numpy.rst
jax/interpreters/xla.py
jax/numpy/__init__.py
jax/numpy/lax_numpy.py
==================
1e1fc937;George Necula;2020-05-07 18:09:19 +0300;Merge pull request #2791 from gnecula/jax_outfeed
An implementation of id_tap and id_print using outfeed
==
==================
9f0795b8;George Necula;2020-05-06 20:05:47 +0300;Unified the eager and jit paths
Added error checking for outfeed_receiver not started to primitive computations

==

jax/core.py
jax/experimental/host_callback.py
jax/interpreters/xla.py
tests/host_callback_test.py
tests/lax_control_flow_test.py
==================
d8b75e19;George Necula;2020-05-06 11:02:10 +0300;Reimplemented the passing of tokens with a Jaxpr transform

==

jax/api.py
jax/experimental/host_callback.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
jax/lax/lax_control_flow.py
tests/host_callback_test.py
==================
8fc96910;George Necula;2020-05-05 12:43:45 +0300;Improved documentation

==

docs/jax.experimental.host_callback.rst
docs/jax.experimental.rst
jax/experimental/host_callback.py
jax/interpreters/xla.py
==================
304009d7;George Necula;2020-05-03 12:38:51 +0200;Added error checking when starting compiled computations without starting the outfeed receiver.

==

jax/api.py
jax/experimental/host_callback.py
jax/interpreters/pxla.py
jax/interpreters/sharded_jit.py
jax/interpreters/xla.py
jax/lax/lax_control_flow.py
tests/host_callback_test.py
tests/lax_control_flow_test.py
==================
cee5989a;George Necula;2020-05-03 11:30:27 +0300;Implemented pytree support for arg and result.
Enabled outfeed for all arrays as a tuple

==

jax/experimental/host_callback.py
tests/host_callback_test.py
==================
0515f8e4;George Necula;2020-05-02 16:59:15 +0300;Added error handling for tap function errors

==

jax/experimental/host_callback.py
tests/host_callback_test.py
==================
0444f927;George Necula;2020-05-02 15:52:59 +0300;Added support for sending all arrays in a single message

==

jax/experimental/host_callback.py
tests/host_callback_test.py
==================
653cad63;George Necula;2020-04-30 11:41:09 +0300;Added support for multiple backends to outfeed receiver
Changed the encoding of the header to be uin32

==

jax/experimental/host_callback.py
tests/host_callback_test.py
==================
47cb5eaa;George Necula;2020-04-28 14:43:22 +0200;Added masking transformation, added batch_dims to vmap

==

jax/experimental/host_callback.py
tests/host_callback_test.py
==================
931cb3f6;George Necula;2020-04-26 16:31:02 +0200;Ensure that we carry state only for control-flow conditionals that use print

==

jax/api.py
jax/experimental/host_callback.py
jax/interpreters/pxla.py
jax/interpreters/sharded_jit.py
jax/interpreters/xla.py
jax/lax/lax_control_flow.py
tests/host_callback_test.py
tests/lax_control_flow_test.py
==================
a16584d2;George Necula;2020-04-25 10:19:21 +0200;Fixed scan, and grad. Added multiplexing protocol.

==

.travis.yml
jax/experimental/host_callback.py
tests/host_callback_test.py
tests/lax_control_flow_test.py
==================
de685c9d;George Necula;2020-04-22 12:10:18 +0200;An experiment for id_print implemented with outfeed
* Added print descriptors, support multiple types
* Added a state-passing mechanism to XLA interpreter

==

jax/BUILD
jax/experimental/host_callback.py
jax/interpreters/xla.py
jax/lax/lax_control_flow.py
tests/host_callback_test.py
==================
970e475e;George Necula;2020-05-07 16:16:22 +0300;Undo strict checking of LAX primitives (#2996)
This undoes d08dec5d20
==

jax/api.py
jax/core.py
jax/lax/lax.py
tests/lax_test.py
==================
804e083e;George Necula;2020-05-07 13:28:24 +0300;Fix pytype for copybara import (#2995)

==

jax/core.py
==================
d08dec5d;George Necula;2020-05-07 09:37:20 +0300;Added argument check to all primitives. (#2948)
* Added argument check to all primitives.

The issue that inspired this is that `lax.tie_in` is
easy to misuse if the first argument is not a JAX type, then
it silently disappears. This means that `lax.tie_in((x, x), const)`
is the same as `const` even though `x` is a tracer.

This error would be caught previosuly if core.skip_checks == False
because then `bind` checks its arguments. I have essentially
added an unconditional argument check to `bind`.

In case this is considered too inefficient, we can add argument
checking to individual primivites, e.g., tie_in. For most primitives
if a non-JAX array is passed, the `impl` rule would fire and
`numpy` would report the error somehow, perhaps.

* Merged find_top_trace with check_args
==

jax/api.py
jax/core.py
jax/lax/lax.py
tests/lax_test.py
==================
50dc44be;Peter Hawkins;2020-05-07 01:46:13 -0400;Fix IntEnum test when checking is enabled. (#2981)

==

jax/abstract_arrays.py
jax/core.py
tests/dtypes_test.py
==================
d2847552;Skye Wanderman-Milne;2020-05-06 17:59:55 -0700;Add copyright to new file (#2992)

==

jax/numpy/_util.py
==================
7d346ec8;Jake Vanderplas;2020-05-06 16:58:09 -0700;Add implementation of np.searchsorted (#2938)

==

docs/jax.numpy.rst
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
beaf7ae5;Jake Vanderplas;2020-05-06 16:03:29 -0700;DOC: add unravel_index to docs/jax.numpy.rst (forgotten in #2966) (#2989)

==

docs/jax.numpy.rst
==================
5dfff9ea;Jake Vanderplas;2020-05-06 15:17:55 -0700;Cleanup: move _wraps into jax.numpy._utils. (#2987)
Why? This prevents circular imports within the numpy submodule.
==

jax/numpy/__init__.py
jax/numpy/_util.py
jax/numpy/fft.py
jax/numpy/lax_numpy.py
jax/numpy/linalg.py
jax/numpy/polynomial.py
jax/numpy/vectorize.py
jax/scipy/linalg.py
jax/scipy/ndimage.py
jax/scipy/signal.py
jax/scipy/special.py
jax/scipy/stats/bernoulli.py
jax/scipy/stats/beta.py
jax/scipy/stats/cauchy.py
jax/scipy/stats/dirichlet.py
jax/scipy/stats/expon.py
jax/scipy/stats/gamma.py
jax/scipy/stats/laplace.py
jax/scipy/stats/logistic.py
jax/scipy/stats/multivariate_normal.py
jax/scipy/stats/norm.py
jax/scipy/stats/pareto.py
jax/scipy/stats/poisson.py
jax/scipy/stats/t.py
jax/scipy/stats/uniform.py
jax/third_party/numpy/linalg.py
==================
f338b0b0;Matt Wescott;2020-05-06 16:05:49 -0400;Add jnp.unravel_index (#2966)

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
fb788fa5;Skye Wanderman-Milne;2020-05-06 11:50:21 -0700;Adjust test tolerances take 2 (#2985)

==

tests/lax_scipy_test.py
==================
5a19dc34;Skye Wanderman-Milne;2020-05-06 11:29:14 -0700;Adjust test tolerances for TPU. (#2984)
Ideally this is temporary, as the tolerances are getting high.
==

tests/lax_scipy_test.py
==================
778d7ffc;Skye Wanderman-Milne;2020-05-06 10:19:28 -0700;Fix some bugs in _shards_device_array path. (#2983)
Also adds more comprehensive unit tests.
==

jax/interpreters/pxla.py
jax/numpy/lax_numpy.py
tests/pmap_test.py
==================
969ed808;notEvil;2020-05-06 16:15:17 +0200;Add decorator for performing broadcasting inside translation rules (#2468)
* Add decorator for broadcasting at the translation rule layer.

* Fix broadcasting in igamma gradients.

Co-authored-by: Peter Hawkins <phawkins@google.com>
==

jax/interpreters/ad.py
jax/lax/lax.py
==================
aedf346c;Skye Wanderman-Milne;2020-05-05 18:25:45 -0700;Update grad of while_loop message. (#2976)
The previous error message was misleading as of
https://github.com/google/jax/commit/ed8dbd254deee8f11f77e50ad6e70e2696fead51
(see https://github.com/google/jax/pull/2414#issuecomment-600183624
for context).
==

jax/lax/lax_control_flow.py
==================
0534b659;Peter Hawkins;2020-05-05 20:47:40 -0400;Update XLA. (#2977)

==

WORKSPACE
==================
2f09e89e;Peter Hawkins;2020-05-05 20:41:57 -0400;Update internal aliases to lax_numpy to jnp instead of np. (#2975)

==

jax/lax_linalg.py
jax/numpy/fft.py
jax/numpy/linalg.py
jax/numpy/polynomial.py
jax/numpy/vectorize.py
jax/ops/scatter.py
jax/scipy/linalg.py
jax/scipy/ndimage.py
jax/scipy/stats/poisson.py
jax/third_party/numpy/linalg.py
==================
e51c7d74;Srinivas Vasudevan;2020-05-05 17:10:31 -0700;Add IgammaGradA (#2504)

==

jax/lax/lax.py
tests/lax_scipy_test.py
==================
25a0c3b1;Skye Wanderman-Milne;2020-05-05 15:30:25 -0700;Suppress pytype error (#2974)
pytype gets confused otherwise:
```
File ".../pxla.py", line 244, in _as_slice_indices: bad option in return type [bad-return-type]
           Expected: Tuple[Tuple[int, ...], Tuple[int, ...], Tuple[int, ...]]
  Actually returned: Tuple[Tuple[Union[Tuple[Union[int, slice], ...], slice], ...], tuple, Tuple[int, ...]]
```
==

jax/interpreters/pxla.py
==================
b1bc841a;Peter Hawkins;2020-05-05 16:40:41 -0400;Replace np -> jnp, onp -> np in more places. (#2973)
* Replace np -> jnp, onp -> np in more places.

Context: #2370

* Fix typo in random_test.py
==

benchmarks/pmap_benchmark.py
jax/core.py
jax/custom_derivatives.py
jax/experimental/callback.py
jax/experimental/ode.py
jax/experimental/optimizers.py
jax/experimental/stax.py
jax/flatten_util.py
jax/nn/functions.py
jax/nn/initializers.py
jax/numpy/fft.py
jax/tools/jax_to_hlo.py
tests/api_test.py
tests/core_test.py
tests/debug_nans_test.py
tests/dtypes_test.py
tests/fft_test.py
tests/lax_numpy_vectorize_test.py
tests/linalg_test.py
tests/loops_test.py
tests/masking_test.py
tests/multibackend_test.py
tests/polynomial_test.py
tests/random_test.py
tests/vectorize_test.py
==================
d59ecddf;Peter Hawkins;2020-05-05 15:45:07 -0400;Replace np -> jnp, onp -> np in examples/ (#2971)
For context, see #2370
==

examples/advi.py
examples/control.py
examples/control_test.py
examples/differentially_private_sgd.py
examples/examples_test.py
examples/gaussian_process_regression.py
examples/kernel_lsq.py
examples/mnist_classifier.py
examples/mnist_classifier_fromscratch.py
examples/mnist_vae.py
examples/resnet50.py
examples/spmd_mnist_classifier_fromscratch.py
==================
b5436523;Peter Hawkins;2020-05-05 14:59:16 -0400;Replace np -> jnp, onp -> np in tests. (#2969)

==

tests/api_test.py
tests/batching_test.py
tests/callback_test.py
tests/generated_fun_test.py
tests/jax_to_hlo_test.py
tests/jet_test.py
tests/lax_control_flow_test.py
tests/lax_numpy_einsum_test.py
tests/multi_device_test.py
tests/nn_test.py
tests/ode_test.py
tests/optimizers_test.py
tests/parallel_test.py
tests/pmap_test.py
tests/util_test.py
==================
fedf7fb8;Skye Wanderman-Milne;2020-05-05 11:57:11 -0700;Update jax version to 0.1.66 (#2970)

==

docs/CHANGELOG.rst
jax/version.py
==================
9612c521;Peter Hawkins;2020-05-05 14:10:57 -0400;Relax test tolerances, suppress warning messages. (#2967)

==

tests/lax_numpy_test.py
tests/lax_test.py
tests/scipy_stats_test.py
==================
0eba939a;Skye Wanderman-Milne;2020-05-05 09:25:48 -0700;New and improved _shard_device_array function. (#2958)
This gets the performance of sharding DeviceArray arguments to pmap roughly back to what it was prior to https://github.com/google/jax/commit/07571ae4dd3fceee580aa49c4490f99ce7f6b6de. It does so by re-introducing a _shard_device_array function that can handle arbitrary array slices.

Benchmark results compared to https://github.com/google/jax/commit/87d959089f3406714c98e674c145b09156319ef3 (i.e. just prior to the regression):
```
---------Benchmark summary for pmap_shard_device_array---------
  nargs    nshards       mean      %std    relative    mean/baseline
-------  ---------  ---------  --------  ----------  ---------------
     10          8  0.0479975  12.0865      1                1.09631
    100          8  0.32916     5.7446      6.85786          1.10263
    500          8  1.5563      2.68041    32.4246           1.10066
    100          2  0.136431    8.33826     2.84245          1.15886
    100          4  0.198815    5.91716     4.1422           1.11409
    100          8  0.31788     4.80559     6.62285          1.06637
```

This still seems a bit slower than it was before, but gets most of the performance back. We can further optimize in future changes if needed.

Fixes https://github.com/google/jax/pull/2958 (hopefully)
==

jax/interpreters/pxla.py
jax/numpy/lax_numpy.py
==================
61a34f59;Peter Hawkins;2020-05-05 12:18:55 -0400;Update README for jaxlib 0.1.46 release. (#2968)

==

README.md
docs/CHANGELOG.rst
==================
dc234b6f;Joost Bastings;2020-05-05 10:11:10 +0200;Expose functools.reduce initializer argument to tree_util.tree_reduce (#2935)
* Expose `functools.reduce` initializer argument to `tree_util.tree_reduce`.

`functools.reduce` takes an optional `initializer` argument (default=None) which is currently not exposed by `tree_reduce'. This can be useful e.g. for computing an L2 penalty, where you would initialize with 0., and then sum the L2 for each parameter.

Example:
```
def l2_sum(total, param):
  return total + jnp.sum(param**2)

tree_reduce(l2_sum, params, 0.)
```

* Only call functools.reduce with initializer when it is not None.

* Change logic to check for number of args to allow None value as initializer

* Rename seq to tree, and add tree_leaves

* Change reduce to functools.reduce.

* Make tree_reduce self-documenting

* Replace jax.tree_leaves with tree_leaves

* Update to use custom sentinel instead of optional position argument

* jax.tree_leaves -> tree_leaves
==

jax/tree_util.py
==================
e4d8cacf;Julius Kunze;2020-05-05 05:12:43 +0200;Fix tests for random.categorical with multi-dimensional logits (#2955)

==

tests/random_test.py
==================
7116cc5b;Peter Hawkins;2020-05-04 23:00:20 -0400;Improve JAX test PRNG APIs to fix correlations between test cases. (#2957)
* Improve JAX test PRNG APIs to fix correlations between test cases.

In #2863, we observed that we were missing gradient problems because the random test cases being generated were too similar because they were formed with identically seeded PRNGs. This change updates the test_util.rand_...() functions to take an explicit numpy.random.RandomState, and adds a rng() method to JaxTestCase to form a RandomState seeded on the test case name.

This gives the following properties:
* different test cases receive different seeds
* PRNG seeding is deterministic and independent of execution order and sharding.
* PRNG seeding is deterministic across runs.

* Fix some failing tests.

* Fix more test failures.

Simplify ediff1d implementation and make it more permissive when casting.

* Relax test tolerance of laplace CDF test.
==

jax/numpy/lax_numpy.py
jax/test_util.py
tests/array_interoperability_test.py
tests/batching_test.py
tests/fft_test.py
tests/lax_numpy_einsum_test.py
tests/lax_numpy_indexing_test.py
tests/lax_numpy_test.py
tests/lax_scipy_sparse_test.py
tests/lax_scipy_test.py
tests/lax_test.py
tests/linalg_test.py
tests/polynomial_test.py
tests/scipy_ndimage_test.py
tests/scipy_signal_test.py
tests/scipy_stats_test.py
==================
3cd409ee;Matthew Johnson;2020-05-04 19:44:22 -0700;add optional 'forward' argument to lax.scan (#2921)
* add optional 'forward' argument to lax.scan

* switch to reverse; revise disable-jit case

* fix jaxpr.rst

* fix loops.py

Co-authored-by: James Bradbury <jekbradbury@gmail.com>
==

docs/jaxpr.rst
jax/experimental/loops.py
jax/lax/lax_control_flow.py
tests/api_test.py
tests/lax_control_flow_test.py
==================
3e522373;yurodiviy;2020-05-05 04:29:55 +0300;Raise an error in np.var when array is complex and dtype is not (#2288)
Co-authored-by: vlad <veryfakemail@ya.ru>
==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
91746842;Peter Hawkins;2020-05-04 21:08:34 -0400;Cache test_utils.format_shape_and_dtype_string. (#2959)
A significant fraction of time when collecting test cases is spent building shape and dtype strings (which are usually similar and usually thrown away.)
==

jax/test_util.py
==================
4c2c5ad5;Tom Hennigan;2020-05-04 23:46:12 +0100;Add a note about jax.pmap when leading dim is smaller than num devices. (#2949)

==

jax/api.py
==================
c9c653aa;joschkabraun;2020-05-04 16:55:47 -0400;Implementation numpy.ediff1d (#2729)
* Implementation of numpy.ediff1d

* Added testing for numpy.ediff1d implementation

* Made ediff1d jit-compatible

* Implemented corrections: style and more testing

* Adapted tests

* changed tests

* modified tests

* Incorporated changes

* Style changes

* Added line between tests

* Changed op_record test
==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
6aab9e5f;Stephan Hoyer;2020-05-04 13:06:25 -0700;DOC: write a new dosctring for jax.numpy.vectorize (#2944)
* DOC: write a new dosctring for jax.numpy.vectorize

This version is customized entirely for JAX.

* review and typo fixes
==

jax/numpy/vectorize.py
==================
5a0bf462;Stephan Hoyer;2020-05-04 12:37:29 -0700;DOC: add a table of contents for top level API docs (#2946)
This makes them easier to scan.
==

docs/jax.rst
==================
72efa783;Peter Hawkins;2020-05-04 14:50:08 -0400;Fix spurious rank promotion warning. (#2954)

==

tests/nn_test.py
==================
d61d6f44;Peter Hawkins;2020-05-04 14:34:08 -0400;Fix a number of flaky tests. (#2953)
* relax some test tolerances.
* disable 'random' preconditioner in CG test (#2951).
* ensure that scatter and top-k tests don't create ties.
==

jax/test_util.py
tests/lax_control_flow_test.py
tests/lax_numpy_test.py
tests/lax_scipy_sparse_test.py
tests/lax_test.py
tests/linalg_test.py
tests/scipy_stats_test.py
==================
04102e5b;tamaranorman;2020-05-04 19:02:13 +0100;Allow ConvDimensionNumbers to be passed into conv_transpose (#2915)

==

jax/lax/lax.py
==================
4d236b5c;Peter Hawkins;2020-05-04 09:17:07 -0400;Update XLA to fix build failures. (#2950)

==

WORKSPACE
==================
525235d8;Roman Ring;2020-05-04 11:20:21 +0100;Fix a codeblock in the "understanding jaxpr" doc. (#2942)
This fixes an issue where the codeblock didn't render properly on the website.
==

docs/jaxpr.rst
==================
d315564e;George Necula;2020-05-04 11:30:28 +0300;Fixed a few more places where device commitment was lost. (#2913)
* trivial jit computations were forcing commitment to the default device
* a device_put with a device specification would not set the commitment
  if the data was already (uncommitted) on the specified device.
* added tests for the above
* once the above were fixed the LaztTest.test_zeros_ones_compilation
  stated to fail because the `sticky` parameter to lazy_force_computation
  was changing. Fixed this by removing stickyness from the compilation key.
* Expanded docstring for jax.device_put; expanded the
  device placement FAQ entry.
==

docs/faq.rst
jax/api.py
jax/interpreters/xla.py
tests/api_test.py
tests/multi_device_test.py
==================
1cc6b7dd;James Bradbury;2020-05-02 19:33:10 -0700;support axis argument in nn.glu (#2879)
* support axis argument in nn.glu

* also add basic correctness test

* Update nn_test.py
==

jax/nn/functions.py
tests/nn_test.py
==================
9f7115ec;Matthew Johnson;2020-05-02 12:02:43 -0700;reduce use of lax on static data (e.g. shapes) (#2933)
* reduce use of lax on static data (e.g. shapes)

* use f-string for error message
==

jax/numpy/lax_numpy.py
==================
64f12a42;Matthew Johnson;2020-05-02 10:25:53 -0700;improve docs and error message for odeint *args (#2931)
cf. #2920
==

jax/experimental/ode.py
==================
a1825786;Peter Hawkins;2020-05-02 12:47:07 -0400;Update XLA. (#2932)
Mention illegal instruction fix in changelog.
==

WORKSPACE
docs/CHANGELOG.rst
==================
46ce80b0;Stephan Hoyer;2020-05-02 08:24:59 -0700;jax.random.poisson (#2805)
* jax.random.poisson

The implementation for lam < 10 was directly copied from TensorFlow probability:
https://github.com/tensorflow/probability/blob/v0.10.0-rc0/tensorflow_probability/python/internal/backend/numpy/random_generators.py#L155

I adapted the implementation for lam > 10 from TensorFlow:
https://github.com/tensorflow/tensorflow/blob/v2.2.0-rc3/tensorflow/core/kernels/random_poisson_op.cc

The methods themselves match both TensorFlow and NumPy:
https://github.com/numpy/numpy/blob/v1.18.3/numpy/random/src/distributions/distributions.c#L574

* add a check for even larger lambda

* increment iter count

* remove comment that makes no sense

* Fix chi-squared tests in random_test.py

As far as I can tell, the previous implementation of the chi-squared test
for samples from discrete probability distributions was broken. It should have
been asserting that the p-value was greater 0.01, e.g., as illustrated here:
http://hamelg.blogspot.com/2015/11/python-for-data-analysis-part-25-chi.html

This hid a few other bugs, such a miscalculation of expected frequencies.

Fortunately, the existing random tests for Bernoulli and Categorical *mostly*
still pass, which the exception of multi-dimensional logits for Categorical.
Those tests are disabled by this PR.

* Fix accept condition (based on correct chi-squared test)

* Add moment checks for Poisson

* Add batching test, more Poisson rates
==

jax/random.py
tests/random_test.py
==================
ee38e1b3;Peter Hawkins;2020-05-02 11:09:21 -0400;Update XLA. (#2929)
Includes a fix that may help with issue #2906.
==

WORKSPACE
==================
6425ca2a;Jake Vanderplas;2020-05-02 06:32:50 -0700;Merge pull request #2925 from jakevdp/shuffle
Deprecate random.shuffle() and implement random.permutation() for multi-dim inputs
==
==================
9802d732;Peter Hawkins;2020-05-01 21:08:56 -0400;Update XLA. (#2927)

==

WORKSPACE
docs/CHANGELOG.rst
jax/test_util.py
jaxlib/version.py
==================
a821e67d;Jacob Kelly;2020-05-01 20:10:20 -0400;instantiate zeros (#2924)
fix dtype

remove TODO
==

jax/experimental/jet.py
tests/jet_test.py
==================
d8d71407;Jake VanderPlas;2020-05-01 15:18:24 -0700;Deprecate random.shuffle() and implement random.permutation() for multi-dimensional matrices.

==

jax/random.py
tests/random_test.py
==================
f8fa5895;Matthew Johnson;2020-05-01 14:40:24 -0700;revert previous change

==

jax/numpy/lax_numpy.py
==================
2263899d;Matthew Johnson;2020-05-01 14:39:30 -0700;replace accidental use of jax.numpy.min w/ builtin

==

jax/numpy/lax_numpy.py
==================
1cdd8f1b;James Bradbury;2020-05-01 14:37:13 -0700;Add support for in_axes=None (but not out_axes, or in_axes>0) to pmap (#2896)
* allow in_axes=None for pmap in api.py

* wire in_axes=None through parallel_callable

* add test

* fix error string

* fixes

* fixes

* add test for nested pmap with in_axes

* test pmap still defaults to (implicit) out_axes=0
==

jax/api.py
jax/interpreters/pxla.py
jax/lax/lax.py
tests/pmap_test.py
==================
49a89016;Matthew Johnson;2020-05-01 13:47:46 -0700;skip failing shapecheck tests
cc @JuliusKunze

==

tests/masking_test.py
==================
c00e9a2a;Julius Kunze;2020-05-01 21:34:29 +0200;Reapply #2017 (Allow shapecheck of PixelCNN++), fixing #2245 (#2800)
* Unrevert "Allow shapecheck of PixelCNN++ (google#2017)"

This reverts commit ceab1e3edf1e2395035173dc50f24ce6a27475f6.

* Fix out-of-bound slices (#2245)

* Minor

* Add type annotations

* Fix Poly.__rsub__

* any -> _any

* tweaks, mostly comments/whitespace

* separate polymorphic code path, patch _slice_sizes

* put back some logic for handling Poly sizes

* improve test_slice_indices

* Remove to_index, replace with canonicalize_shape

* Fix slicing with polymorphic start/stop

* Test negative step for polymorphic slicing

* Refactor polymorphic slicing

* Simplify diff

* Fix shapecheck(iota)

Co-authored-by: Matthew Johnson <mattjj@google.com>
==

jax/api.py
jax/interpreters/masking.py
jax/interpreters/xla.py
jax/lax/lax.py
jax/lax/lax_control_flow.py
jax/numpy/lax_numpy.py
jax/random.py
tests/masking_test.py
==================
1b564288;Peter Hawkins;2020-05-01 13:57:09 -0400;Fix test flakiness in autodiff tests for min/max type functions (#2918)
* Fix test flakiness in autodiff tests for clamp, reduce, and reduce-window.

We change the tests to avoid computing numerical gradients in the neighborhood of nondifferentiable points where, for example, the maximum element in a reduce-max changes. The autodiff approximation is only valid within an epsilon ball around a point, and close to an inflection point the approximation may not be valid.

* Only test reduce-grad-mul for float types.
==

tests/lax_test.py
==================
0736679c;Tom Hennigan;2020-05-01 18:00:38 +0100;Explicitly broadcast values in nn.one_hot and nn.initializers.orthogonal. (#2901)
At head the following fails:

```python
>>> import jax
>>> import jax.numpy as jnp
>>> jax.config.update('jax_numpy_rank_promotion', 'raise')
>>> jax.nn.one_hot(jnp.ones([8]), 512)
...
ValueError: Operands could not be broadcast together for equal on shapes (8, 1) (512,) and with the config option jax_numpy_rank_promotion='raise'. For more information, see https://jax.readthedocs.io/en/latest/rank_promotion_warning.html.
```
==

jax/lax/lax.py
jax/nn/functions.py
jax/nn/initializers.py
tests/nn_test.py
==================
279a077c;James Bradbury;2020-05-01 10:00:06 -0700;Avoid tuple allreduce lowering of psum on TPUs (#2914)
Tuple-shaped allreduces aren't supported in an XLA:TPU optimization pass (see internal bug), but since our use of them on GPU is due to compiler nondeterminism that isn't present on TPU, it should be fine to avoid this bug by disabling tuple psum on TPU.
==

jax/lax/lax_parallel.py
==================
25e8280d;Peter Hawkins;2020-05-01 11:45:28 -0400;Relax some test tolerances. (#2917)

==

tests/lax_test.py
==================
ac023bf2;George Necula;2020-05-01 10:06:59 +0300;Fixed a few places where device sticky-ness was lost. Added FAQ  (#2882)
* Fixed a few places where device sitckyness was lost. Added FAQ for device
placement.

I have also added a new test (multi_device_test.test_computation_follows_data),
written more as part of the documentation. It is shorted than the
old test_computation_follows_data (which is still there, renamed
as test_computation_follows_data_old). I believe there is no
extra coverage in test_computation_follows_data_old w.r.t. all the
other tests we have.

* Fix mypy annotations and updates based on comments

* Undid some changes, will make another PR
==

docs/faq.rst
jax/interpreters/xla.py
jax/lax/lax.py
jax/lazy.py
tests/multi_device_test.py
==================
2e9047d3;George Necula;2020-05-01 09:16:31 +0300;Add flag to enable checking, and turn on checking in tests. (#2900)
Fix an error in check_jaxpr.
==

jax/config.py
jax/core.py
jax/interpreters/partial_eval.py
jax/test_util.py
tests/api_test.py
tests/dtypes_test.py
tests/lax_test.py
tests/nn_test.py
==================
e06bde8c;Matthew Johnson;2020-04-30 17:21:10 -0700;revise xla.device_put device logic (#2907)
* revise xla.device_put device logic, fixes #2905

* remove test of behavior we don't want

Previously, we were testing that for a DeviceArray x, writing
jax.device_put(x) would evaluate to a DeviceArray *on the default
device*. Instead, we should be happy with just returning the same
DeviceArray without any movement.
==

jax/interpreters/xla.py
tests/api_test.py
tests/multibackend_test.py
==================
a4deae39;Roy Frostig;2020-04-30 15:56:59 -0700;err on empty operand dimension in numpy argmin and argmax
see #2899

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
bb608339;Matthew Johnson;2020-04-30 16:13:36 -0700;update changelog

==

docs/CHANGELOG.rst
==================
3aa953d8;Skye Wanderman-Milne;2020-04-30 15:31:42 -0700;Update jax version to 0.1.65 (#2909)

==

docs/CHANGELOG.rst
jax/version.py
==================
815a92e4;Skye Wanderman-Milne;2020-04-30 14:49:33 -0700;Remove assert from ShardedDeviceArray staging. (#2908)
This would erroneously fail on Cloud TPU because the TPU client has its own buffer type.
==

jax/interpreters/pxla.py
==================
3216f5ca;Roy Frostig;2020-04-30 08:31:48 -0700;err on empty operand in numpy argmin and argmax
fixes #2899

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
8d4b6857;George Necula;2020-04-30 19:16:05 +0300;Fix typo in tests; caught on GPU and TPU (#2902)

==

tests/multibackend_test.py
==================
b39da1f8;George Necula;2020-04-30 10:16:14 +0300;Fix jit with device placement (#2883)
In setups with multiple backends, a jit happens on the default
backend, unless we give a `backend` parameter. This is true
even if the inputs are committed to a device on the non-default
backend, or if we pass a `device` parameter to jit.
==

jax/interpreters/xla.py
tests/multibackend_test.py
==================
1f7ebabf;Jacob Kelly;2020-04-29 22:18:21 -0400;add jets for sines fns (#2892)
refactor

remove duplicate
==

jax/experimental/jet.py
tests/jet_test.py
==================
c8d1700b;Peter Hawkins;2020-04-29 21:25:43 -0400;Make sure gather/scatter indices in lax gradient tests aren't out of bounds. (#2895)
Out-of-bounds gathers are clamped to be in bounds, but out-of-bounds scatters are dropped entirely. This can cause gradient tests to fail because the two operations aren't duals of one another, as the gradient rules expect.
==

tests/lax_test.py
==================
b8cbc958;Peter Hawkins;2020-04-29 21:03:46 -0400;Fix lax_reference implementation of round() to match lax. (#2894)
lax.round() is documented to round half away from zero, but np.round() rounds to nearest even.
==

jax/lax_reference.py
==================
3e87e8f9;Peter Hawkins;2020-04-29 14:59:23 -0400;Add relu6, hard_swish, and hard_sigmoid to docs. (#2886)

==

docs/jax.nn.rst
==================
43efbe2d;James Bradbury;2020-04-29 11:31:36 -0700;Reset parameter replication default (#2880)
* Reset parameter replication default

* add tests
==

jax/lib/xla_bridge.py
tests/xla_bridge_test.py
==================
0557248f;Peter Hawkins;2020-04-29 14:14:49 -0400;Check for unsupported dtypes and issue a helpful error. (#2885)

==

jax/lax/lax.py
tests/lax_numpy_test.py
==================
52c69e88;Martin Sotir;2020-04-29 03:16:49 -0400;Fix slices in Gated Linear Unit activation (#2341)

==

jax/nn/functions.py
==================
ef963f06;Vaibhav Balloli;2020-04-29 12:37:18 +0530;Add ReLU6, Hard sigmoid, swish (#2709)

==

jax/nn/functions.py
==================
790d9296;Matthew Johnson;2020-04-28 16:41:26 -0700;iterate on jax.hessian docs (#2873)
* iterate on jax.hessian docs

* tweaks

* add back note about block structure
==

jax/api.py
==================
3ee8a7be;Peter Hawkins;2020-04-28 19:12:32 -0400;Add nanargmin and nanargmax to documentation. (#2877)

==

docs/jax.numpy.rst
==================
697aa483;Skye Wanderman-Milne;2020-04-28 16:02:30 -0700;Fix bug in ShardedDeviceArrayTest.testThreadsafeIndexing (#2875)

==

tests/pmap_test.py
==================
b0b6cd8e;Peter Hawkins;2020-04-28 18:44:00 -0400;Make dlpack code robust against upcoming XLA Python binding change. (#2876)

==

jax/dlpack.py
==================
56f6294e;yurodiviy;2020-04-28 22:23:03 +0300;Implement nanargmin-max and add tests (#2398)
Co-authored-by: vlad <veryfakemail@ya.ru>
==

docs/notebooks/Common_Gotchas_in_JAX.ipynb
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
2a0637a1;Eduardo Pignatelli;2020-04-28 19:34:27 +0100;add spacing to numpy.gradient (#2545)

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
ae6a3fe9;Peter Hawkins;2020-04-28 14:07:35 -0400;Document how jax.hessian and pytrees interact. (#2705)
* Document how jax.hessian and pytrees interact.


==

jax/api.py
==================
e599a254;Anselm Levskaya;2020-04-28 10:49:17 -0700;fix sort_key_val return type annotation, docstring

==

jax/lax/lax.py
==================
2611fd2d;Paige Bailey;2020-04-28 10:40:05 -0700;Updated README wrt. new features for Stax. (#2862)
* Updated README wrt. new features for Stax.

==

jax/experimental/README.md
==================
f6e90603;Jamie Townsend;2020-04-28 17:58:49 +0100;Qr complex jvp fix (#2872)
* Fix qr jvp for complex input

* Fix qr jvp for complex64 inputs when jax_enable_x64=True

* Reenable complex jvp test for qr
==

jax/lax_linalg.py
tests/linalg_test.py
==================
e287f98c;Peter Hawkins;2020-04-28 12:01:54 -0400;Fix definition of qr primitive to return only the upper triangular part of r. (#2870)
Issue #2863.
==

jax/lax_linalg.py
tests/linalg_test.py
==================
0dbbc27b;Peter Hawkins;2020-04-28 11:58:51 -0400;Clarify that `grad` requires arguments to be differentiated to be of inexact type. (#2712)

==

jax/api.py
==================
ca4e396e;Anselm Levskaya;2020-04-29 00:57:29 +1000;Merge pull request #2853 from levskaya/topkjvp
Add top_k jvp and batching rules and tests
==
==================
dddad2a3;Anselm Levskaya;2020-04-19 11:49:15 -0700;Add top_k jvp and batching rules

==

docs/jax.lax.rst
jax/lax/lax.py
jax/test_util.py
tests/lax_test.py
==================
c0023f44;Peter Hawkins;2020-04-28 10:03:31 -0400;Change isinstance test in xla_bridge.py to not explicitly name xla_client.Backend. (#2868)
Change in preparation for removing xla_client.Backend in favor of the underlying C++ classes.
==

jax/lib/xla_bridge.py
==================
5fe6b069;Adam Paszke;2020-04-28 15:07:08 +0200;Correct the order of .format arguments in vjp wrapper (#2866)

==

jax/api.py
==================
75617be8;Jamie Townsend;2020-04-28 06:32:52 +0100;Add population_count primitive to lax (#2753)
* add population_count primitive (needs new jaxlib)

fixes #2263

* Add popcount docs

* Add population_count to lax_reference

* Use int prng (since we're only testing uints)

Co-authored-by: Matthew Johnson <mattjj@google.com>
==

docs/jax.lax.rst
jax/lax/lax.py
jax/lax_reference.py
tests/lax_test.py
==================
2d96cfb2;Chris Jones;2020-04-28 06:09:30 +0100;Remove unused `ispure` method (#2781)

==

jax/interpreters/partial_eval.py
==================
cc0e9a31;Jacob Kelly;2020-04-28 00:53:38 -0400;refactor ode tests, add scipy benchmark (#2824)
* refactor ode tests, add scipy benchmark

remove double import

rename to scipy merge vmap test properly

* clean up more global trace state after errors

Co-authored-by: Matthew Johnson <mattjj@google.com>
==

jax/core.py
jax/experimental/ode.py
tests/api_test.py
tests/ode_test.py
==================
e6df98de;Stephan Hoyer;2020-04-27 17:24:39 -0700;Fix chi-squared tests in random_test.py (#2847)
As far as I can tell, the previous implementation of the chi-squared test
for samples from discrete probability distributions was broken. It should have
been asserting that the p-value was greater 0.01, e.g., as illustrated here:
http://hamelg.blogspot.com/2015/11/python-for-data-analysis-part-25-chi.html

This hid a few other bugs, such a miscalculation of expected frequencies.

Fortunately, the existing random tests for Bernoulli and Categorical *mostly*
still pass, which the exception of multi-dimensional logits for Categorical.
Those tests are disabled by this PR.
==

tests/random_test.py
==================
4b033433;Skye Wanderman-Milne;2020-04-27 17:21:05 -0700;Add pmap_shard_device_array_benchmark. (#2864)
Also renames pmap_shard_args_benchmark to pmap_shard_sharded_device_array_benchmark.
==

benchmarks/pmap_benchmark.py
==================
b277b55d;Jacob Kelly;2020-04-27 19:45:51 -0400;check step size is greater than zero (#2857)
loosen tols for grad test

set tol only for float64
==

jax/experimental/ode.py
tests/api_test.py
==================
283393f7;Jamie Townsend;2020-04-28 00:44:46 +0100;Update jaxpr.rst (#2859)
* Update jaxpr doc

* Make jaxpr.rst doctestable
==

docs/jaxpr.rst
==================
5da74d4b;samuela;2020-04-27 11:56:48 -0700;Simplify _odeint_rev (#2832)

==

jax/experimental/ode.py
==================
3736278f;Abhishek Sharma;2020-04-27 10:40:48 +0530;Add precision only arguments (#2850)
* Make precision argument keyword only in jax.numpy

* Fix private functions
==

jax/numpy/lax_numpy.py
==================
0a5cc090;Matthew Johnson;2020-04-25 09:20:26 -0700;split testDetGradOfSingularMatrix into corank=1,2 (#2845)

==

tests/linalg_test.py
==================
ffaf417b;David Pfau;2020-04-25 16:32:27 +0100;Fix typo in docstring for _cofactor_solve (#2844)
Found a small typo in the description of _cofactor_solve
==

jax/numpy/linalg.py
==================
02b3fc5a;David Pfau;2020-04-25 16:26:25 +0100;Custom derivative for np.linalg.det (#2809)
* Add vjp and jvp rules for jnp.linalg.det

* Add tests for new determinant gradients

* Replace index_update with concatenate in cofactor_solve

This avoids issues with index_update not having a transpose rule, removing one bug in the way of automatically converting the JVP into a VJP (still need to deal with the np.where).

* Changes to cofactor_solve so it can be transposed

This allows a single JVP rule to give both forward and backward derivatives

* Update det grad tests

All tests pass now - however second derivatives still do not work for nonsingular matrices.

* Add explanation to docstring for _cofactor_solve

* Fixed comment
==

jax/numpy/linalg.py
tests/linalg_test.py
==================
4e020cc4;Peter Hawkins;2020-04-25 11:01:06 -0400;Enable some tests that now pass. (#2841)

==

tests/lax_numpy_test.py
tests/linalg_test.py
==================
f9806b35;Peter Hawkins;2020-04-25 10:19:28 -0400;Remove some tests for Jaxlib versions older than the minimum. (#2840)

==

tests/array_interoperability_test.py
tests/lax_test.py
tests/linalg_test.py
tests/tree_util_tests.py
==================
a6093d81;Peter Hawkins;2020-04-25 10:19:19 -0400;Replace uses of xla_client.Buffer.from_pyval() with backend.buffer_from_pyval(). (#2839)
Change in preparation for deleting xla_client.Buffer.
==

jax/interpreters/xla.py
==================
9e9b348b;Peter Hawkins;2020-04-25 09:23:34 -0400;Update deprecated API usages in lapack.pyx. (#2838)

==

jaxlib/lapack.pyx
==================
89e3840e;Matthew Johnson;2020-04-24 18:45:34 -0700;handle mapped_invars correctly in more places (#2828)
fixes #2822

We didn't handle `pmap`'s `mapped_invars` correctly in all places in #1959. (I'm actually not sure if #1959 introduced the bug where things were working before, or just refactored it in terms of `mapped_invars`, though my guess is that because the information now contained in `mapped_invars` was implicitly contained in the pmapped jaxpr's `constvars` and `env_vars` that it was working correctly before #1959.) In particular, in #1959 we:
  1. assumed the `mapped_invars` parameter of xla_pmap_p was only populated after partial_eval and set to None otherwise (i.e. staging out for a jit or a control flow primitive),
  2. didn't update it correctly in JVPTrace.process_map (which adds new inputs corresponding to nonzero tangents, and hence `mapped_invars` must be grown),
  3. didn't update it correctly in JaxprTrace.process_map (which adds residual inputs to the staged-out version of the primitive),
  4. didn't forward it correctly in JaxprTrace.process_map anyway (we were setting it to all-true for the staged out eqn for all tracers regardless of what the original `mapped_invars` said),
  5. removed the leading axes of all pvs in JaxprTrace.process_map regardless of whether the corresponding entry of `mapped_invars` was True or False.

The reason we didn't notice 2 and 3 was that they only arise when doing control flow (e.g. scan or remat) of pmap involving closed-over tracers (apparently a rare case), since that's the case where we first form a jaxpr (populating `mapped_invars`) and then later have to apply transformations like AD and further partial eval (thus engaging JVPTrace.process_map and JaxprTrace.process_map with a populated `mapped_invars` parameter). It worked in other cases, e.g. when the pmap was not inside control flow or a remat, because in those cases we left `mapped_invars` set to None, indicating all-true of any length (so it didn't matter if we add inputs).

This commit fixes those issues by
  1. making `mapped_invars` non-optional,
  2. handling `mapped_invars` correctly in
    * JaxprTrace.process_map
    * JVPTrace.process_map
    * ad.map_transpose (since having symbolic-zero cotangents effectively prunes inputs, and having undefined-primal args also prunes inputs)
    * ad._eval_subjaxpr_primals (since having undefined-primal args prunes inputs)
  3. making the separate cases of calls and maps handled more explicitly by adding a new Primitive.map_primitive boolean attribute (analogous to Primitive.call_primitive), to be revised further in #2829.

This is begging for a more coherent cleanup. For example, we reuse the same Primitive class but tag it with `call_primitive` or `map_primitive` (only one of which can be True); we should instead just have a separate Primitive class for these cases and track the type tag with built-in
Python mechanisms. Moreover, when `call_primitive=True` or `map_primitive=True` implies things about what `params` must be present (`call_jaxpr` and `mapped_invars`). I plan to follow up with those cleanups in #2829, but I wanted to get something working first.
==

jax/api.py
jax/core.py
jax/interpreters/ad.py
jax/interpreters/partial_eval.py
jax/interpreters/pxla.py
tests/pmap_test.py
==================
8f902452;Matthew Johnson;2020-04-24 18:19:24 -0700;only maximally stage out for some call primitives (#2834)
fixes #2833
==

jax/core.py
jax/interpreters/partial_eval.py
jax/interpreters/xla.py
tests/api_test.py
==================
77901e9f;Jon Malmaud;2020-04-24 13:43:04 -0700;Fix lax.rng_uniform. (#2830)

==

jax/lax/lax.py
==================
343e486d;Skye Wanderman-Milne;2020-04-24 13:11:53 -0700;Remove platform canonicalization from xla_bridge.py (#2815)

==

jax/lib/xla_bridge.py
==================
11d7fb05;Matthew Johnson;2020-04-24 01:47:20 -0700;add more ode tests (#2819)

==

tests/ode_test.py
==================
6ad2908f;Matthew Johnson;2020-04-24 01:21:27 -0700;add ode test file (#2818)
* add ode test file

* control test tolerances based on precision
==

tests/ode_test.py
==================
23f4874b;samuela;2020-04-24 00:48:47 -0700;Fix time issues in odeint reverse mode (#2817)
* Fix time issues in odeint reverse mode

* Add regression test
==

jax/experimental/ode.py
==================
e0d42e90;MichaelMarien;2020-04-24 07:40:33 +0200;Feature/permutation (#1568)
* added test for random.permutation

* added permutation that wraps shuffle with behaviour of np.random.permutation

* update docstring

* need to shuffle also the integer range input

* fixed test for permutation with integer

* tweak handling of random.permutation scalar case

* NotImplementedError for random.permutation on >1d

pending resolution to #2066

* address reviewer comments: improve tests

Co-authored-by: Matthew Johnson <mattjj@google.com>
==

jax/random.py
tests/random_test.py
==================
fc4203c3;Jacob Kelly;2020-04-24 01:07:35 -0400;implement jet rules by lowering to other primitives (#2816)
merge jet_test

add jet rules

use lax.square
==

jax/experimental/jet.py
tests/jet_test.py
==================
25183436;Matthew Johnson;2020-04-23 18:07:51 -0700;use static_argnums in xla_computation (#2812)
* use static_argnums in xla_computation

fixes #1017

* add static_argnums to make_jaxpr

* fix type error: handle int case
==

jax/api.py
tests/api_test.py
==================
9b6976bf;Skye Wanderman-Milne;2020-04-23 16:46:05 -0700;Pin mypy version in .travis.yml. (#2811)
This is recommended in https://mypy.readthedocs.io/en/stable/existing_code.html#continuous-integration, to avoid unexpected upgrades introducing new type errors.
==

.travis.yml
==================
46306493;Skye Wanderman-Milne;2020-04-23 16:01:05 -0700;Make ShardedDeviceArray._value threadsafe again. (#2810)
Fixes #2759
==

jax/interpreters/pxla.py
tests/pmap_test.py
==================
5290c03a;Peter Hawkins;2020-04-23 18:30:47 -0400;Remove usage of xla_client.{Computation,ComputationBuilder}. (#2808)
* Remove usage of xla_client.{Computation,ComputationBuilder}.

ComputationBuilder is a fairly pointless wrapper class that mimics an outdated version of the the C++ XLA API. It dates back from when we used to have SWIG bindings and needed to write a non-trivial Python shim to keep the interface pleasant to use. Now that we have pybind11-based bindings that are reasonably ergonomic by themselves, we don't need the wrapper class. Instead, we can simply call the pybind11-wrapped C++ API directly, removing the impedance mismatch between the C++ and Python APIs and allowing us to delete the Python ComputationBuilder class.

Similarly we can delete xla_client.Computation for the same reasons; it doesn't do anything useful on top of the C++ API.

==

docs/notebooks/How_JAX_primitives_work.ipynb
jax/api.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
jax/lax/lax.py
jax/lax/lax_control_flow.py
jax/lax/lax_fft.py
jax/lax/lax_parallel.py
jax/lax_linalg.py
jax/lazy.py
jax/lib/xla_bridge.py
jax/random.py
tests/api_test.py
tests/infeed_test.py
tests/metadata_test.py
==================
d2653a1e;Matthew Johnson;2020-04-23 13:34:01 -0700;rewrite axis_index implementation, use custom bind (#2807)
* rewrite axis_index implementation, use custom bind

fixes #2716

Co-authored-by: Trevor Cai <tycai@google.com>

* add test for #2716

Co-authored-by: Trevor Cai <tycai@google.com>
==

jax/interpreters/pxla.py
tests/pmap_test.py
==================
13a17286;Matthew Johnson;2020-04-23 13:12:24 -0700;stop_gradient_p -> ad_util.py, re-enable some mypy (#2806)

==

jax/ad_util.py
jax/custom_derivatives.py
jax/experimental/jet.py
jax/lax/lax.py
jax/lax/lax_control_flow.py
mypy.ini
==================
903010b7;Matthew Johnson;2020-04-23 09:28:14 -0700;disable mypy checks causing new errors

==

jax/lax/lax_control_flow.py
mypy.ini
==================
8ccb907d;Matthew Johnson;2020-04-22 23:29:32 -0700;in custom_jvp/vjp stop_gradient on nondiff_argnums (#2804)
fixes #2784
==

jax/custom_derivatives.py
tests/api_test.py
==================
6b5e3676;Matthew Johnson;2020-04-22 22:09:56 -0700;skip pinv test on tpu because no svd

==

tests/linalg_test.py
==================
4eed4969;Matthew Johnson;2020-04-22 22:08:29 -0700;use _max instead of max, fix #2795 (#2803)
* use _max instead of max, fix #2795

* revert xla.py python scalar casting='safe' check
==

jax/numpy/lax_numpy.py
tests/lax_numpy_indexing_test.py
==================
59bdb1fb;Jacob Kelly;2020-04-22 20:49:10 -0400;add tanh rule (#2653)
change expit taylor rule

add manual expit check, check stability of expit and tanh
==

jax/experimental/jet.py
tests/jet_test.py
==================
8fe3c59c;Peter Hawkins;2020-04-22 20:15:04 -0400;Add explicit derivative for jax.numpy.linalg.pinv. (#2794)
* Add explicit derivative for jax.numpy.linalg.pinv.

* Fix type confusion problems in the JVP rule for SVD that meant it produced 64-bit tangents for 32-bit primals.

==

jax/lax_linalg.py
jax/numpy/linalg.py
tests/linalg_test.py
==================
c3ab1fc5;Jake Vanderplas;2020-04-22 15:26:50 -0700;Merge pull request #2801 from google/scipy-conv-test-tolerance
loosen scipy convolve test tolerance (GPU flaky)
==
==================
fcb6ff0a;Matthew Johnson;2020-04-22 14:39:51 -0700;loosen scipy convolve test tolerance (GPU flaky)

==

tests/scipy_signal_test.py
==================
aee18c88;Yufeng;2020-04-22 17:27:33 -0400;small typo fix (#2799)

==

README.md
==================
3f8c7359;Peter Hawkins;2020-04-22 14:18:49 -0400;Switch jaxlib Python code to use the lower-level xla.ops API when building XLA ops. (#2798)
Change in preparation for deleting xla_client.ComputationBuilder.
==

jaxlib/cuda_prng.py
jaxlib/cusolver.py
jaxlib/lapack.pyx
==================
7334f97d;Matthew Johnson;2020-04-22 08:59:22 -0700;attempt to fix failing travis (numerical issues)

==

tests/lax_test.py
tests/linalg_test.py
==================
a2c06d61;George Necula;2020-04-22 10:25:06 +0300;Added clearer error message for tracers in numpy.split (#2508)
* Added clearer error message for tracers in numpy.split

Now we print:

ConcretizationTypeError: Abstract tracer value where concrete value is expected (in
jax.numpy.split argument 1).
Use transformation parameters such as `static_argnums` for `jit` to avoid
tracing input values.
See `https://jax.readthedocs.io/en/latest/faq.html#abstract-tracer-value-where-concrete-value-is-expected-error`.
Encountered value: Traced<ShapedArray>

* Fixed tests, slight change to the error message

* Expanded the FAQ entry about abstract tracers for higher-order primitives

* Added clarification for tracers inside jit of grad

* Updated FAQ language in response to reviews
==

docs/faq.rst
jax/abstract_arrays.py
jax/core.py
jax/numpy/lax_numpy.py
tests/api_test.py
tests/lax_numpy_test.py
tests/loops_test.py
==================
2e34dbc1;Matthew Johnson;2020-04-21 19:04:28 -0700;update travis to match min jaxlib version

==

.travis.yml
jax/lax/lax.py
==================
6239e594;Matthew Johnson;2020-04-21 19:01:19 -0700;bump min jaxlib version (thanks @hawkinsp)

==

jax/lib/__init__.py
==================
f753845f;Matthew Johnson;2020-04-21 18:27:53 -0700;adjust test tolerance for tpu

==

tests/pmap_test.py
==================
db5d6193;Matthew Johnson;2020-04-21 18:18:43 -0700;changelog fixes

==

docs/CHANGELOG.rst
==================
b1cb3a5d;Matthew Johnson;2020-04-21 18:12:02 -0700;factor out process_map / post_process_map (#2788)
* factor out process_map / post_process_map

Also fix a bug from reusing post_process_call for pmap. Fixes #2787

* consolidate call_bind / map_bind code
==

jax/core.py
jax/interpreters/ad.py
jax/interpreters/batching.py
jax/interpreters/parallel.py
jax/interpreters/partial_eval.py
jax/interpreters/pxla.py
tests/pmap_test.py
==================
1bcaef14;Matthew Johnson;2020-04-21 17:47:28 -0700;apply is_stable=True to sort translation rules (#2789)
fixes #2779
==

jax/lax/lax.py
tests/lax_numpy_test.py
tests/lax_scipy_sparse_test.py
==================
ec03f8e2;Matthew Johnson;2020-04-21 17:18:59 -0700;Merge pull request #2786 from google/einsum-optimize-default
try optimize=True default with einsum
==
==================
6db1f0c0;Skye Wanderman-Milne;2020-04-21 15:10:43 -0700;Bump jaxlib version in README to 0.1.45

==

README.md
==================
783e24fd;Matthew Johnson;2020-04-21 15:01:30 -0700;try optimize=True with einsum
closes #2583

can revert if this ends up problematic for some reason!

==

jax/numpy/lax_numpy.py
==================
18f96742;Matthew Johnson;2020-04-21 14:27:59 -0700;attempt to fix changelog formatting bugs

==

docs/CHANGELOG.rst
==================
964cf4fb;Matthew Johnson;2020-04-21 14:08:26 -0700;autodiff cookbook: assume continuous second derivatives
fixes #2772
==

docs/notebooks/autodiff_cookbook.ipynb
==================
4703b0fa;Skye Wanderman-Milne;2020-04-21 12:01:02 -0700;Bump jaxlib version to 0.1.45 and update WORKSPACE and CHANGELOG. (#2785)

==

WORKSPACE
docs/CHANGELOG.rst
jaxlib/version.py
==================
0d7d6637;Matthew Johnson;2020-04-21 11:56:07 -0700;Merge pull request #2752 from apaszke/ad-fixme
Add FIXMEs for AD type errors
==
==================
18b23404;Matthew Johnson;2020-04-21 11:55:06 -0700;Merge branch 'master' into ad-fixme

==
==================
f527ed41;Matthew Johnson;2020-04-21 11:53:41 -0700;Merge pull request #2763 from jacobjinkelly/adamax
Add AdaMax optimizer
==
==================
4433ddfb;Matthew Johnson;2020-04-21 08:31:40 -0700;update version and changelog for pypi

==

docs/CHANGELOG.rst
jax/version.py
==================
94178d98;Matthew Johnson;2020-04-20 23:47:49 -0700;also skip jax.numpy.unique test on tpu

==

tests/lax_numpy_test.py
==================
65dd1ef8;James Bradbury;2020-04-20 21:55:23 -0700;Skip jnp.unique test on GPU (#2780)
Broken due to use of unstable sort (https://github.com/google/jax/issues/2779).
==

tests/lax_numpy_test.py
==================
2bc3c798;William C Grisaitis;2020-04-20 22:55:23 -0400;Fix distribution name in docstring (#2764)

==

jax/random.py
==================
3f597833;James Bradbury;2020-04-20 19:03:43 -0700;Add pmean to lax documentation (#2778)

==

docs/jax.lax.rst
==================
b36d1bff;Oliver Åstrand;2020-04-20 21:04:32 -0400;Implement np.unique (#2760)
* Implement np.unique

This is an implementation of np.unique
It follows the original numpy implementation of sorting.
While unique it self is intrinsically hard to make compatible
with jit, a helper function has been added which is compatible.
This function could for example be used for jit-compatible
computation of number of unique elements.

* Add test for np.unique

This test tests all possible combinations of inputs for np.unique
with the standard generated array inputs

* Fix return type of the inverse

* Remove complex arrays from np.unique

Since xla can not do size comparisons between complex numbers, and
np.unique depends on np.sort they are removed as possible input.

* Add jit wrap to _unique1d_sorted_mask
==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
685c0de9;Lucas Beyer;2020-04-20 20:37:05 +0200;Fix confusing documentation typo. (#2773)

==

jax/api.py
==================
88c802af;Adam Paszke;2020-04-20 12:24:05 +0200;Delete cotangent references on their last use (#2719)
* Delete cotangent references on their last use

Current implementation of transposition may add a factor of 2x to
peak memory usage in real cases and _potentially an unbounded factor_
in pathological programs. The reason why this happens is because the
cotangents computed by the `backward_pass` are never evicted from the
environment until the whole transposition is complete. Other systems
(e.g. PyTorch) generally make use of refcounting or liveness analysis
to remove unnecessary references as soon as they are known to no
longer be needed.

A simple example that showcases this issue is this:
```python
def f(x):
  for i in range(1000):
    x = x * 4
  return x

x = np.ones(4)
vjp(f, x)[1](x)
```

Adding `print(len(ct_env))` at the end of `backward_pass` reveals that
the dictionary actually holds a thousand `DeviceArray`s, while both the
forward and backward can be computed in constant memory. Of course this
is the pathological example I mentioned above, but one can easily see
that keeping the cotangents alive for the whole duration of differentiation
causes the memory cost to be approximately `fwd_coefs + all_fwd_intermediates`
instead of `fwd_memory + program_pathwidth` where:
* `fwd_coefs` is the amount of memory necessary to store all constant
  coefficients of the linearized function
* `all_fwd_intermediates` is the amount of memory necessary to
  store _all intermediates appearing in the forward program_.
* `program_pathwidth` is the maximum over amounts of memory necessary
  to store the live values over all transposed program locations

Note that usually we have that
`all_fwd_intermediates > fwd_coefs >> program_pathwidth`
(`>>` meaning that the RHS is usually significantly smaller).

* Import Set

* Use a list instead of a dict

* Type annotation

* Import List
==

jax/interpreters/ad.py
==================
ff24f9a2;George Necula;2020-04-20 11:30:52 +0300;Added FAQ entry about relationship between VJP and JVP (#2762)

==

docs/faq.rst
==================
61fc2bf2;Jacob Kelly;2020-04-19 16:02:17 -0400;add adamax test

==

tests/optimizers_test.py
==================
80789738;Jacob Kelly;2020-04-19 16:02:06 -0400;add adamax

==

jax/experimental/optimizers.py
==================
3ca7f6e4;George Necula;2020-04-19 12:13:07 +0300;Fixes in the FAQ for RST (#2761)

==

docs/CHANGELOG.rst
docs/conf.py
docs/faq.rst
==================
a1b4fe47;Skye Wanderman-Milne;2020-04-17 16:17:56 -0700;Update automatic jaxlib install command to use nvidia-smi instead of nvcc. (#2758)
This is just to get the CUDA version number, and nvidia-smi is more
commonly available.
==

README.md
==================
30c96ac3;Roy Frostig;2020-04-17 14:43:16 -0700;skip two unreliable tests

==

tests/lax_test.py
tests/linalg_test.py
==================
5ab00e75;Matthew Johnson;2020-04-17 14:32:50 -0700;Merge pull request #2684 from hexahedria/index_sugar
Syntactic sugar for indexed update functions.
==
==================
e6f0b8d8;Stephan Hoyer;2020-04-17 12:42:53 -0700;Raise an error if stop_gradient is called on non-arrays (#2750)
* Raise an error if stop_gradient is called on non-arrays

* Fix incorrect usage of stop_gradient in solve()

* fix *other* misuse of stop_gradient
==

jax/lax/lax.py
jax/numpy/linalg.py
jax/scipy/linalg.py
tests/lax_test.py
==================
9a5b8d62;Peter Hawkins;2020-04-17 14:38:50 -0400;Assert that reduction computations don't have constants. (#2754)
This case wouldn't work anyway, because there's no good way to pass constants to an XLA reducer.
==

jax/lax/lax.py
==================
7d716b83;George Necula;2020-04-17 20:08:24 +0300;Add a simple form of partial evaluation for while_loop. (#2497)
The issue that I wanted to fix was that when running grad(while_loop),
the error was a cryptic assertion failure (that all primals are known
after linearization, in ad.py:linearize). I could not figure out
how to detect before that assertion that we are doing a reverse AD
for while_loop. So, I implemented a simple form of partial evaluation,
to allow the primals after linearization to be known, so that the
code proceeds and can then fail gracefully when trying to transpose the
while.

This is not a proper implementation of partial evaluation. The known
outputs are computed early, properly. But the unknown outputs
are computed by a *whole* computation of, including the known
parts.

Fixes issue: #2129
==

jax/interpreters/partial_eval.py
jax/lax/lax_control_flow.py
tests/lax_control_flow_test.py
==================
8c00b35f;Adam Paszke;2020-04-17 11:20:54 +0000;Add FIXMEs for AD type errors

==

jax/interpreters/ad.py
==================
aeb0d036;Jake VanderPlas;2020-04-16 20:27:00 -0700;set precision=HIGHEST only for TPU test

==

tests/lax_numpy_test.py
==================
3265b8c3;Jake VanderPlas;2020-04-16 14:23:20 -0700;Thread precision through np.convolve & np.correlate

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
835949a3;Daniel Johnson;2020-04-17 01:43:00 +0000;Fix typo

==

docs/jax.ops.rst
==================
a5efe842;Daniel Johnson;2020-04-17 01:30:06 +0000;Update names and documentation.

==

docs/jax.ops.rst
jax/numpy/lax_numpy.py
==================
6d889efd;Matthew Johnson;2020-04-16 13:35:55 -0700;Merge pull request #2743 from chr1sj0nes/changelist/306845248
Some cleanup and reformatting in `xla.py`.
==
==================
d906c89e;Roy Frostig;2020-04-16 12:01:04 -0700;fix scipy_signal_test convolve failures

==

tests/scipy_signal_test.py
==================
42887172;Peter Hawkins;2020-04-16 13:38:38 -0400;Add a regression test that runs the same computation on all devices that are present. (#2741)

==

tests/api_test.py
==================
f7070e56;Chris Jones;2020-04-16 17:45:52 +0100;Merge branch 'master' into changelist/306845248

==
==================
903b50eb;Chris Jones;2020-04-16 15:51:23 +0100;Some cleanup and reformatting in `xla.py`.
- Make creation of a few dictionaries more readable.
- Use f-strings where possible.
- Remove unused imports and function parameters.
- Don't format string before passing to `log` function.

==

jax/interpreters/xla.py
==================
708107eb;Jamie Townsend;2020-04-16 17:28:11 +0100;Add numpy.rint to lax numpy (#2724)
* Add numpy.rint to lax numpy

* Use round_to_nearest_even for numpy.rint

* Add rint to jax.numpy docs

* Fix np.rint float promotion
==

docs/jax.numpy.rst
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
d356c41f;Peter Hawkins;2020-04-16 11:31:05 -0400;Release jaxlib 0.1.44. (#2740)

==

README.md
docs/CHANGELOG.rst
==================
61c76d45;Matthew Johnson;2020-04-16 08:06:44 -0700;Merge pull request #2738 from chr1sj0nes/patch-1
Actually use xla._device_put_scalar for device-putting scalars
==
==================
40884dbd;Chris Jones;2020-04-16 15:08:45 +0100;Fix copy-paste error
It looks as though `_device_put_scalar` should be used here. If not, `_device_put_scalar` should be removed, as it is otherwise unused.
==

jax/interpreters/xla.py
==================
0e29bd4b;Skye Wanderman-Milne;2020-04-15 18:43:46 -0700;Fix some bugs in _reshape_sharded_device_array (#2732)

==

jax/lax/lax.py
tests/pmap_test.py
==================
fe8d1d1b;Skye Wanderman-Milne;2020-04-15 18:43:28 -0700;Temporarily make ShardedDeviceArray.__init__ optionally accept old si… (#2730)
This allows us to incrementally update ShardedDeviceArray creators to the new constructor introduced in https://github.com/google/jax/commit/07571ae4dd3fceee580aa49c4490f99ce7f6b6de.
==

jax/interpreters/pxla.py
==================
14618d1a;Peter Hawkins;2020-04-15 20:45:20 -0400;Update XLA. (#2733)

==

WORKSPACE
==================
f9a3aed0;Jake Vanderplas;2020-04-15 17:35:54 -0700;Implement numpy.linalg.multi_dot (#2726)
* Implement numpy.linalg.multi_dot

* Thread precision through multi_dot
==

docs/jax.numpy.rst
jax/numpy/linalg.py
jax/third_party/numpy/linalg.py
tests/linalg_test.py
==================
7a61aea5;Skye Wanderman-Milne;2020-04-15 13:38:38 -0700;Add type hint to fix pytype error. (#2727)
Without this, pytype (correctly) points out that AbstractValues do not have shape/type information.
==

jax/interpreters/pxla.py
==================
07571ae4;Skye Wanderman-Milne;2020-04-15 12:43:55 -0700;Allow ShardedDeviceArrays to represent arbitrary data shardings. (#2142)
This change introduces ShardingSpec, a struct describing how an array should be sharded. This is integrated into ShardedDeviceArray to allow more flexible sharding. It supports partitioning (both "pmap-style", where an entire axis is decomposed into separate shards and doesn't appear in the on-device shape at all, and "sharded_jit-style", where an axis is chunked into shards but remains in the on-device shape) and replication.

This removes the need for ChunkedDeviceArray, since a ShardedDeviceArray can now represent chunks.

Here are pmap_benchmark times showing that the overall effect of this change neutral to positive (integer indexing is much faster!).

**pmap_shard_args**
```
---------Benchmark summary for pmap_shard_args---------
  nargs    nshards       mean       %std    relative    mean/baseline
-------  ---------  ---------  ---------  ----------  ---------------
     10          8  0.041855    4.15223      1               1.01466
    100          8  0.129884    4.85321      3.1032          0.988543
    101          8  0.136347    6.20233      3.2576          0.967138
    500          8  0.533207    3.6815      12.7394          1.0294
   1000          8  1.10338     0.525193    26.362           0.960435
   5000          8  5.33911     0          127.562           0.963319
    100          2  0.0638619  10.7069       1.52579         1.0362
    100          4  0.0868253   6.76701      2.07443         0.967323
    100          8  0.128151    6.46004      3.06177         0.979742
    100        100  1.22631     1.94885     29.299           1.00371
    100        500  6.60746     0          157.865           0.956657
```
**pmap_shard_outputs**
```
  nouts    nshards        mean       %std    relative    mean/baseline
-------  ---------  ----------  ---------  ----------  ---------------
     10          8   0.0664526   9.49251      1               0.938466
    100          8   0.195711    2.19429      2.94512         1.04239
    500          8   0.82577     0.330864    12.4265          0.994669
   1000          8   1.68323     1.0516      25.3298          0.966915
   5000          8   8.89032     0          133.784           0.998038
    100          2   0.074806   10.1734       1.12571         0.980254
    100          4   0.121334    5.76774      1.82588         1.02033
    100          8   0.185253    5.45068      2.78775         1.01666
    100        100   2.37076     0           35.6759          1.08629
    100        500  17.0832      0          257.074           0.976879
```
**ShardedDeviceArray_indexing**
```
indices_fn                mean     %std    relative    mean/baseline
------------------  ----------  -------  ----------  ---------------
integer_indices      0.0603473  8.29159       1             0.359496
integer_2D_indices  18.0241     0           298.672         1.00583
```

This is how I ran the benchmark:
```
TARGET_TOTAL_SECS=2 CUDA_VISIBLE_DEVICES= XLA_FLAGS=--xla_force_host_platform_device_count=500 python3 benchmarks/pmap_benchmark.py --baseline_dir=<results as of a3cc9a7>
```
==

jax/interpreters/pxla.py
jax/lax/lax.py
tests/benchmarks/xla.py
tests/pmap_test.py
==================
87d95908;Peter Hawkins;2020-04-15 12:57:47 -0400;Add a dynamic type check that the value returned by an XLA translation rule is an XlaOp. (#2723)
Helps give a more understandable error on erroneous translation rules.
==

jax/interpreters/xla.py
==================
821193b2;Peter Hawkins;2020-04-15 10:57:53 -0400;Explicitly build specific CUDA capabilities. (#2722)
We choose the same set as TensorFlow (minus 3.7, which TF is apparently considering dropping anyway).

This avoids a slow PTX -> SASS compilation on first time startup.
==

build/build.py
==================
8fa707af;Stephan Hoyer;2020-04-14 22:35:48 -0700;Fixup complex values and tol in tests for jax.scipy.linalg.sparse.cg (#2717)
* Fixup complex values and tol in tests for jax.scipy.linalg.sparse.cg

The tests for CG were failing on TPUs:

- `test_cg_pytree` is fixed by requiring slightly less precision than the
  unit-test default.
- `test_cg_against_scipy` is fixed for complex values in two independent ways:
  1. We don't set both `tol=0` and `atol=0`, which made the termination
     behavior of CG (convergence or NaN) dependent on exactly how XLA handles
     arithmetic with denormals.
  2. We make use of *real valued* inner products inside `cg`, even for complex
     values. It turns that all these inner products are mathematically
     guaranteed to yield a real number anyways, so we can save some flops and
     avoid ill-defined comparisons of complex-values (see
     https://github.com/numpy/numpy/issues/15981) by ignoring the complex part
     of the result from `jnp.vdot`. (Real numbers also happen to have the
     desired rounding behavior for denormals on TPUs, so this on its own would
     also fix these failures.)

* comment fixup

* fix my comment
==

jax/scipy/sparse/linalg.py
tests/lax_scipy_sparse_test.py
==================
f4f67b06;Daniel Johnson;2020-04-15 01:39:55 +0000;Remove unused textwrap

==

jax/numpy/lax_numpy.py
==================
9e429907;Daniel Johnson;2020-04-15 01:28:43 +0000;Add support for `mul`

==

jax/numpy/lax_numpy.py
tests/lax_numpy_indexing_test.py
==================
ab0a9031;Daniel Johnson;2020-04-15 01:25:41 +0000;Merge branch 'master' into index_sugar

==
==================
72593f04;Daniel Johnson;2020-04-15 01:20:30 +0000;Modify syntax to `x.at[idx].set(y)` and similar.

==

jax/numpy/lax_numpy.py
tests/lax_numpy_indexing_test.py
==================
5baa59fe;Peter Hawkins;2020-04-14 20:59:53 -0400;Plumb precision argument into convolution in signal.py (#2715)

==

jax/scipy/signal.py
==================
be6c5cb3;Skye Wanderman-Milne;2020-04-14 16:38:40 -0700;Instantiate RNG in testcase instead of test harness in a few more places. (#2706)

==

tests/lax_numpy_test.py
==================
1298e9e8;Peter Hawkins;2020-04-14 18:23:19 -0400;Fix some test failures. (#2713)

==

jax/BUILD
jax/experimental/callback.py
jax/scipy/signal.py
tests/array_interoperability_test.py
tests/jet_test.py
tests/lax_scipy_sparse_test.py
tests/profiler_test.py
tests/scipy_signal_test.py
==================
db1f6941;Stephan Hoyer;2020-04-14 13:23:59 -0700;Merge pull request #2652 from jacobjinkelly/morejets
jet of pow using comp with exp, mul, log
==
==================
2953a2bb;Matthew Johnson;2020-04-14 11:17:35 -0700;Merge pull request #2686 from aslanides/types
Add some type annotations to jax.random and jnp.ndarray.
==
==================
61a1e9ce;John Aslanides;2020-04-14 17:50:36 +0100;Merge branch 'types' of https://github.com/aslanides/jax into types

==
==================
810b6f82;John Aslanides;2020-04-14 17:50:21 +0100;Use Tuple[int, ...] rather than Sequence[int] in jnp.ndarray shape annotation.

==

jax/numpy/lax_numpy.py
==================
a134cc45;Jake Vanderplas;2020-04-14 08:04:10 -0700; Implement numpy fmin() & fmax() (#2711)
* Implement numpy fmin() & fmax()
==

docs/jax.numpy.rst
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
70b97259;Jake Vanderplas;2020-04-14 08:03:53 -0700;Update np.linalg docs with missing funcitons (#2710)
* Update np.linalg docs with missing funcitons

* Update np.linalg docs with missing funcitons
==

docs/jax.numpy.rst
==================
1ac80d71;John Aslanides;2020-04-14 14:49:07 +0100;Add type annotations to optix. (#2687)
* Add type annotations to optix.

* Fix function signature for chain() and remove unused collections import.

* Include Sequence[OptState] as possible output of Init.
==

jax/experimental/optix.py
==================
69cc477d;John Aslanides;2020-04-14 09:43:30 +0100;Merge branch 'master' into types

==
==================
bbf7a432;Peter Hawkins;2020-04-13 21:57:54 -0400;Update semantics of to_dlpack. (#2707)
to_dlpack now takes ownership of the original buffer, leaving it in an invalid state.
==

jax/dlpack.py
tests/array_interoperability_test.py
==================
d6ab70c3;Lauro Langosco di Langosco;2020-04-14 03:26:30 +0200;Fix minor typo in cell (#2692)
* Fix minor typo in cell

One of the arguments to `hvp` wasn't being used, which made the example slightly confusing.

* Fix both definitions of hvp in the autodiff cookbook.

Co-authored-by: Peter Hawkins <phawkins@google.com>
==

docs/notebooks/autodiff_cookbook.ipynb
==================
7f6ede1b;Peter Hawkins;2020-04-13 20:52:55 -0400;Make type of value_and_grad slightly more precise. (#2704)

==

jax/api.py
==================
4e9f6404;Skye Wanderman-Milne;2020-04-13 17:48:49 -0700;Fix packbits/unpackbits tests (#2702)

==

tests/lax_numpy_test.py
==================
5ba9b6b5;Peter Hawkins;2020-04-13 20:05:33 -0400;Update XLA. (#2703)

==

WORKSPACE
==================
9c00550c;Matthew Johnson;2020-04-13 14:57:57 -0700;Merge pull request #2701 from jakevdp/doc
Add missing functions to autodoc lists
==
==================
ffe229ae;Matthew Johnson;2020-04-13 13:58:24 -0700;Merge pull request #2698 from google/issue2107
add custom_jvp for logaddexp / logaddexp2
==
==================
4822581a;Jake VanderPlas;2020-04-13 13:46:04 -0700;Add missing functions to autodoc

==

docs/jax.numpy.rst
docs/jax.scipy.rst
==================
714b276b;Peter Hawkins;2020-04-13 16:16:34 -0400;Implement jax.ops.index_mul. (#2696)
* Implement jax.ops.index_mul.

* Add index_mul to documentation.

* Fix RHS JVP rule for scatter_mul, fix test bug that meant it was not tested.

* Fix typo in docstring.
==

docs/jax.ops.rst
jax/lax/lax.py
jax/ops/__init__.py
jax/ops/scatter.py
tests/lax_numpy_indexing_test.py
==================
04de8339;Peter Hawkins;2020-04-13 15:19:50 -0400;Update XLA. (#2699)

==

WORKSPACE
==================
ea54c066;Jake Vanderplas;2020-04-13 11:57:18 -0700;Add implementation of numpy packbits() and unpackbits() (#2695)
* Add implementation of numpy packbits() and unpackbits()

* Fix packbits() under x64

* Add packbits & unpackbits to docs
==

docs/jax.numpy.rst
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
2d25773c;Matthew Johnson;2020-04-13 09:44:13 -0700;add custom_jvp for logaddexp / logaddexp2
fixes #2107, draws from #2356 and #2357, thanks @yingted !

Co-authored-by: Ted Ying <yingted@gmail.com>

==

jax/interpreters/ad.py
jax/lax/__init__.py
jax/numpy/lax_numpy.py
jax/test_util.py
tests/lax_numpy_test.py
tests/nn_test.py
==================
8c2901cf;Skye Wanderman-Milne;2020-04-13 10:07:05 -0700;Add `--export_dir` and `--baseline_dir` flags to benchmark.py. (#2677)
`--export_dir` allows saving benchmark results to CSV files, and
`--baseline_dir` allows comparing results to a baseline exported via
`--export_dir`.
==

benchmarks/benchmark.py
==================
afefc927;Peter Hawkins;2020-04-13 09:00:26 -0400;Import std::isnan from cmath rather than assuming it is in the global namespace. (#2693)

==

jaxlib/lapack.pyx
==================
6cb69f5c;John Aslanides;2020-04-13 13:24:08 +0100;Fix type annotation for uniform.

==

jax/random.py
==================
d8c75da8;Matthew Johnson;2020-04-12 19:30:05 -0700;update version and changelog for pypi

==

docs/CHANGELOG.rst
jax/version.py
==================
2dc81fb4;Peter Hawkins;2020-04-12 15:35:35 -0400;Make pytest run over JAX tests warning clean, and error on warnings. (#2674)
* Make pytest run over JAX tests warning clean, and error on warnings.

Remove global warning suppression in travis.yml. Instead add a pytest.ini that converts warnings to errors, with the exception of a whitelist.
Either fix or locally suppress warnings in tests.

Also fix crashes on Mac related to a preexisting linear algebra bug.

* Fix some type errors in the FFT transpose rules revealed by the convert_element_type transpose rule change.
==

.travis.yml
jax/lax/lax.py
jax/lax/lax_fft.py
jax/lax_reference.py
jax/numpy/lax_numpy.py
jax/test_util.py
pytest.ini
tests/api_test.py
tests/lax_numpy_indexing_test.py
tests/lax_numpy_test.py
tests/lax_scipy_sparse_test.py
tests/lax_test.py
tests/linalg_test.py
tests/parallel_test.py
tests/pmap_test.py
tests/random_test.py
tests/tree_util_tests.py
==================
453dc5f0;George Necula;2020-04-12 19:05:04 +0200;Relax tolerance for LaxBackedNumpyTests.testConvolutions

==

tests/lax_numpy_test.py
==================
989228a6;Jake VanderPlas;2020-04-12 07:37:02 -0700;Add implementation of np.rollaxis

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
c06fe56f;John Aslanides;2020-04-12 09:14:54 +0100;Add some types to jax.random and jnp.ndarray.

==

.gitignore
jax/numpy/lax_numpy.py
jax/random.py
==================
98d46d39;Daniel Johnson;2020-04-11 20:54:04 +0000;Implement indexing helpers

==

jax/numpy/lax_numpy.py
tests/lax_numpy_indexing_test.py
==================
f6108674;George Necula;2020-04-11 17:27:14 +0200;Improve error message for indexing into an empty dimension
It seems that JAX (and XLA) are a lot more forgiving for index-out-of-bounds,
except for the case when the dimension has size 0. In this case give a similar
IndexError message as numpy, instead of the current one:

   RuntimeError: Invalid argument: Slice size at index 0 in gather op is out
   of range, must be within [0, 1), got 1.:
   This is a bug in JAX's shape-checking rules; please report it!

Issue: #2671

==

jax/numpy/lax_numpy.py
tests/lax_numpy_indexing_test.py
==================
c4dd1cf3;George Necula;2020-04-11 13:38:29 +0200;Relax tolerance for new test on TPU

==

tests/lax_numpy_test.py
==================
ee2cd449;George Necula;2020-04-11 12:09:05 +0200;Added missing import warnings
Also fixed a couple of unnecessary f-strings (Cider was flagging them)

==

jax/scipy/signal.py
==================
8a95ff09;Matthew Johnson;2020-04-10 15:50:40 -0700;Merge pull request #2675 from jakevdp/convolve
Add numpy and scipy convolution wrappers
==
==================
89c9c437;Jake VanderPlas;2020-04-10 14:11:16 -0700;Add support for mode=same in convolve2d & correlate2d

==

jax/scipy/signal.py
tests/scipy_signal_test.py
==================
414e54aa;Peter Hawkins;2020-04-10 15:40:57 -0400;Fix crash for NaN eigenvalues. (#2669)
* Fix crash for NaN eigenvalues.

* Incorporate review comments.
==

jaxlib/lapack.pyx
tests/linalg_test.py
==================
656c3a95;Roman Ring;2020-04-10 20:30:01 +0100;fix a typo in docs notebook (#2672)

==

docs/notebooks/How_JAX_primitives_work.ipynb
==================
bad3445d;Matthew Johnson;2020-04-10 12:20:29 -0700;Merge pull request #2673 from google/issue2657
add missing instantiate_zeros in custom_jvp
==
==================
edda69ef;Jake VanderPlas;2020-04-10 11:54:10 -0700;Add implementations of scipy.signal.convolve & correlate, 1d & 2d

==

jax/scipy/__init__.py
jax/scipy/signal.py
tests/scipy_signal_test.py
==================
7750a16c;Matthew Johnson;2020-04-10 11:45:33 -0700;add test for #2657

==

tests/api_test.py
==================
61abdc1e;Matthew Johnson;2020-04-10 11:41:35 -0700;add missing instantiate_zeros in custom_jvp
fixes #2657

==

jax/custom_derivatives.py
==================
a3cc9a7d;Peter Hawkins;2020-04-10 11:45:27 -0400;Remove a workaround for a long-fixed XLA type conversion bug. (#2670)

==

jax/lax/lax.py
==================
e904780c;Peter Hawkins;2020-04-10 08:37:32 -0400;Update XLA. (#2668)

==

WORKSPACE
==================
bd70db79;Mathis Gerdes;2020-04-10 08:16:53 +0200;Port np.roots (#2250)
* Implement np.roots.

* Expose jit-compatible variant of np.roots.

General np.roots implementation has a value dependent output shape.
If the input coefficients are guaranteed to have no leading zeros,
output shape is independent of values. Skip checking for leading
zeros by setting a keyword argument.

* Fix typo.

* Make roots jit-argument keyword only.

Co-Authored-By: Stephan Hoyer <shoyer@google.com>

* Format docstring to enable parsing.

Co-Authored-By: Stephan Hoyer <shoyer@google.com>

* Add np.roots function to documentation.

* Add more tests for np.roots function.

- Include length 0 polynomial coefficients
- Test strip_zeros=False argument
- Test jit compiled version (only on cpu due to eigvals)
- Confirm that adding leading zeros while skipping check
  for them results in nan's (expected behavior)

* Fix bug in np.roots test.

The polynomial with coefficents [0] never fails because the number of
roots is 0.

* Avoid bug in eigvals and adjust test accuracy.

The parameters of the test that was changed are non-essential
since they test for how the code behaves given invalid inputs.

The accuracy in comparing to the numpy result is changed because
the algorithm in those cases is slightly changed with respect to
the original numpy algorithm (to allow jit).

Co-authored-by: Stephan Hoyer <shoyer@google.com>
==

docs/jax.numpy.rst
jax/numpy/__init__.py
jax/numpy/polynomial.py
tests/polynomial_test.py
==================
e0ce2545;Jake VanderPlas;2020-04-09 22:50:10 -0700;Add implementations of np.convolve & np.correlate

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
65692db7;Matthew Johnson;2020-04-09 22:02:47 -0700;Merge pull request #2666 from djdongjin/colab-tpu
Remove unnecessary pip code
==
==================
1b721b88;Matthew Johnson;2020-04-09 22:02:18 -0700;Merge pull request #2665 from sschoenholz/master
Add "callback_transform", two examples, and tests.
==
==================
8503656e;Jacob Kelly;2020-04-09 11:16:00 -0400;add finite test, add sep lims for binary_check

==

tests/jet_test.py
==================
8a65e9da;Jacob Kelly;2020-04-09 10:27:01 -0400;call jet and manually propagate through exp
Co-authored-by: Stephan Hoyer <shoyer@google.com>

==

jax/experimental/jet.py
==================
f5908cb5;Sam Schoenholz;2020-04-09 15:20:41 -0700;Fixed copyright, added type annotations, disabled mypy on one line.

==

jax/experimental/callback.py
tests/callback_test.py
==================
60d856ab;Jin Dong;2020-04-09 18:10:49 -0400;remove from __future__ code

==

examples/control.py
examples/control_test.py
jax/scipy/stats/logistic.py
==================
a23a6c2a;Jin Dong;2020-04-09 18:07:47 -0400;remove pip install

==

cloud_tpu_colabs/JAX_demo.ipynb
cloud_tpu_colabs/Lorentz_ODE_Solver.ipynb
cloud_tpu_colabs/Pmap_Cookbook.ipynb
cloud_tpu_colabs/Wave_Equation.ipynb
==================
940640d8;Sam Schoenholz;2020-04-09 13:52:14 -0700;Added tests of callback_transform(jit(fn)).

==

tests/callback_test.py
==================
06b388c4;Sam Schoenholz;2020-04-09 13:28:45 -0700;Removed temporary file.

==

jax/experimental/.#callback.py
==================
25d797b1;Sam Schoenholz;2020-04-09 13:27:16 -0700;Added callback_transform, examples, and tests.

==

jax/experimental/.#callback.py
jax/experimental/callback.py
tests/callback_test.py
==================
1bb67637;Peter Hawkins;2020-04-09 16:21:30 -0400;Add batch_group_count to conv_general_dilated. (#2635)
* Add batch_group_count to conv_general_dilated.

* Use batch_group_count for RHS grouped convolution transpose rule.

* Implement lhs/rhs transpose and batching rules for batch_group_count convolution.

==

jax/lax/lax.py
jaxlib/version.py
tests/lax_test.py
==================
1694a56f;Andy Jones;2020-04-09 20:36:09 +0100;Fixes a fallthrough in the tensordot axes verification logic (#2658)

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
dd92a037;Stephan Hoyer;2020-04-09 10:18:07 -0700;Docstring for test_util.check_grads (#2656)
Fixes https://github.com/google/jax/issues/2648
==

jax/test_util.py
==================
f7e7e08c;Matthew Johnson;2020-04-09 09:53:04 -0700;Merge pull request #2655 from shoyer/cg-complex
Renable custom_linear_solve and cg with complex values
==
==================
c9c14c02;Matthew Johnson;2020-04-09 07:31:23 -0700;Merge pull request #2602 from google/float-and-complex-builtins-error
make float and complex builtins error on Tracers
==
==================
59652250;George Necula;2020-04-09 14:10:52 +0200;Fix type hints for pytype
* We have to be careful for return types to specify that we return
  Tuple[T, ...] instead of Sequence[T], at least in those places
  where the caller assumes that the result is a tuple.

==

jax/interpreters/partial_eval.py
==================
abbc70b2;George Necula;2020-03-18 07:11:44 +0100;Added type annotations and comments related to partial evaluation.
Introduced two new constructors for PartialVal: unknown and known.
These should make it easier to read the code where we construct
PartialVal:

 * instead of PartialVal((aval, core.unit) we use PartialVal.unknown(aval)
 * instead of PartialVal((None, pval)) we use PartialVal.known(pval)

Also disabled some new tests in random_tests.py on Mac. They segfault,
apparently due to the same issue #432.

==

docs/developer.rst
docs/notebooks/Writing_custom_interpreters_in_Jax.ipynb
jax/api.py
jax/core.py
jax/custom_derivatives.py
jax/experimental/loops.py
jax/interpreters/ad.py
jax/interpreters/batching.py
jax/interpreters/partial_eval.py
jax/interpreters/pxla.py
jax/interpreters/sharded_jit.py
jax/interpreters/xla.py
jax/lax/lax.py
jax/lax/lax_control_flow.py
jax/test_util.py
tests/core_test.py
tests/lax_control_flow_test.py
tests/lax_numpy_test.py
tests/linalg_test.py
tests/random_test.py
==================
9cc5e901;Stephan Hoyer;2020-04-09 00:46:10 -0700;Renable custom_linear_solve and cg with complex values

==

jax/lax/lax_control_flow.py
jax/scipy/sparse/linalg.py
tests/lax_control_flow_test.py
tests/lax_scipy_sparse_test.py
==================
7cf5a94b;Stephan Hoyer;2020-04-09 00:28:30 -0700;Use custom_jvp for lax.custom_root. (#2485)
This gives us a batching rule, for free!
==

jax/lax/lax_control_flow.py
tests/lax_control_flow_test.py
==================
7ab67756;Matthew Johnson;2020-04-03 21:33:32 -0700;make float and complex builtins error on Tracers
cf. #2508

==

jax/core.py
tests/api_test.py
==================
0958f270;Stephan Hoyer;2020-04-09 00:07:30 -0700;Disable gradients of custom_linear_solve for complex dtypes (#2573)
* Failing test case for custom_linear_solve with complex dtype

xref https://github.com/google/jax/issues/2572

* raise an error for complex values

* Fix dtype check
==

jax/lax/lax_control_flow.py
tests/lax_control_flow_test.py
==================
de82c4f8;sschoenholz;2020-04-08 23:29:28 -0700;Merge pull request #1 from google/master
Update branch to head.
==
==================
91918432;Matthew Johnson;2020-04-08 23:16:49 -0700;Merge pull request #2654 from google/pfix
fix jaxpr invar avals
==
==================
5f1f29e4;Matthew Johnson;2020-04-08 22:29:07 -0700;fix jaxpr invar avals
When an input argument is known to partial_eval, the corresponding jaxpr
(which represents only the staged-out, unknown part of the computation)
has a dummy placeholder input with type (i.e. aval) abstract_unit.
However, the avals attached to the invars were recording the aval of the
known value in that case.

cf. #2299

==

jax/interpreters/partial_eval.py
==================
1fa0e8a6;Jacob Kelly;2020-04-08 21:51:44 -0400;jet of pow using comp with exp, mul, log
Co-authored-by: Jesse Bettencourt <jessebett@cs.toronto.edu>
Co-authored-by: David Duvenaud <duvenaud@cs.toronto.edu>

==

jax/experimental/jet.py
tests/jet_test.py
==================
f37f2351;Skye Wanderman-Milne;2020-04-08 11:29:02 -0700;Fix up previous jaxpr.rst commit. (#2647)

==

docs/jaxpr.rst
==================
5174f6d5;Peter Hawkins;2020-04-08 14:13:15 -0400;Add type annotations to user-facing functions in lax.py (#2644)
* Add type annotations to user-facing functions in lax.py

* Remove redundant comment.
==

jax/lax/lax.py
==================
fcefc7e8;Peter Hawkins;2020-04-08 13:02:58 -0400;Add a link to Google's codesearch for JAX. (#2646)

==

README.md
==================
e9910e0c;Matthew Johnson;2020-04-07 22:30:43 -0700;Merge pull request #2642 from jakevdp/trunc
Add implementation of np.trunc
==
==================
52e779c3;Matthew Johnson;2020-04-07 21:01:19 -0700;Merge pull request #2637 from jacobjinkelly/morejets
Add jet rules for expm1 and log1p
==
==================
aabc3ac5;Matthew Johnson;2020-04-07 21:00:52 -0700;Merge pull request #2631 from jakevdp/copysign
Implement np.copysign
==
==================
46a89229;Jake VanderPlas;2020-04-07 20:50:23 -0700;Add implementation of np.trunc

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
f8dc650b;Skye Wanderman-Milne;2020-04-07 19:03:41 -0700;Update scan jaxpr documentation. (#2641)
Closes #2640.
==

docs/jaxpr.rst
==================
f0ab673d;Skye Wanderman-Milne;2020-04-07 18:21:04 -0700;Fully stage out scan under jit. (#2638)
This prevents creating large arrays from the results of partial_eval.
==

jax/lax/lax_control_flow.py
tests/api_test.py
==================
ab090e21;Jacob Kelly;2020-04-07 17:55:43 -0400;Merge branch 'master' of https://github.com/google/jax into morejets

==
==================
4d7b63c5;Jacob Kelly;2020-04-07 17:55:07 -0400;add expm1 and log1p

==

jax/experimental/jet.py
tests/jet_test.py
==================
2512ec6e;Peter Hawkins;2020-04-07 13:25:50 -0400;Glob over subdirectories in top-level BUILD file. (#2636)
Makes BUILD file more robust to directory structure changes.
==

jax/BUILD
==================
49c6c229;Jake VanderPlas;2020-04-07 09:50:40 -0700;Set check_dtypes=False in copysign

==

tests/lax_numpy_test.py
==================
f20a1c96;Peter Hawkins;2020-04-07 11:21:39 -0400;Enable some GPU and TPU tests that now pass. (#2633)

==

tests/lax_test.py
==================
bd00e591;Jake VanderPlas;2020-04-07 06:44:44 -0700;Implement np.copysign

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
fa383b4a;Peter Hawkins;2020-04-07 09:38:10 -0400;Mark primitive parameters as keyword-only arguments in rules in lax.py. (#2625)
* Mark primitive parameters as keyword-only arguments in rules in lax.py.

* Fix dynamic update slice batching rule.

* Fix dynamic slice batching rule.
==

jax/lax/lax.py
==================
5c74c396;Jake Vanderplas;2020-04-07 05:56:23 -0700;Make median() more efficient & handle infs correctly (#2626)

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
f3a57656;Jake VanderPlas;2020-04-06 21:29:24 -0700;jit: raise TypeError if called on generator function

==

jax/api.py
tests/api_test.py
==================
44e761b3;Peter Hawkins;2020-04-06 21:45:10 -0400;Enable a disabled convolution test. (#2624)

==

tests/lax_test.py
==================
bbed6f8b;Jake Vanderplas;2020-04-06 18:40:10 -0700;Add support for interpolation options in quantile() and percentile() (#2610)

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
6213f8b8;Jin Dong;2020-04-06 20:26:51 -0400;Remove unnecessary code in colabs (#2623)
* fix misspell in autodiff_cookbook[modify colab directly]

* remove unnecessary from __future__ code[modify colab directly]

* change tf&tfds-nightly to stable version
==

docs/notebooks/Neural_Network_and_Data_Loading.ipynb
docs/notebooks/autodiff_cookbook.ipynb
docs/notebooks/neural_network_with_tfds_data.ipynb
docs/notebooks/vmapped_log_probs.ipynb
==================
3fe8bd02;Skye Wanderman-Milne;2020-04-06 16:38:34 -0700;Adjust pmap_bechmark.py values to be more realistic. (#2622)

==

benchmarks/pmap_benchmark.py
==================
e8f989e3;Stephan Hoyer;2020-04-06 14:45:02 -0700;Add import from scipy.sparse (#2621)
* Add import from scipy.sparse

* Fix formatting in cg docstring
==

jax/scipy/__init__.py
jax/scipy/sparse/linalg.py
==================
1472eb3a;Stephan Hoyer;2020-04-06 12:49:11 -0700;DOC: note how derivatives are computed for CG (#2619)

==

jax/scipy/sparse/linalg.py
==================
cf4dd84b;Peter Hawkins;2020-04-06 15:14:22 -0400;cumsum is linear, so its gradient can be linear also. (#2618)
* cumsum is linear, so its gradient can be linear also.

* Rename _impl functions to _prefix_scan.
==

jax/lax/lax.py
==================
fc23e071;Igor Babuschkin;2020-04-06 19:48:42 +0100;Also enable nan checking for complex numbers (#2616)

==

jax/interpreters/xla.py
==================
7629c5aa;Peter Hawkins;2020-04-06 12:39:28 -0400;Add some missing functions to documents. (#2615)

==

docs/jax.nn.rst
docs/jax.numpy.rst
==================
36c529d4;Peter Hawkins;2020-04-06 12:33:55 -0400;Handle n==0 case in TPU cumsum/cumprod. (#2617)

==

jax/lax/lax.py
==================
329321b0;Peter Hawkins;2020-04-06 11:22:01 -0400;Add backend-specific lowering for cumsum/cumprod on TPU. (#2614)
* Add backend-specific lowering for cumsum/cumprod on TPU.

Make cumsum/cumprod primitives so they can have backend-specific lowerings.

* Disable cumulative reduction gradient test on TPU.
==

jax/interpreters/xla.py
jax/lax/lax.py
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
tests/lax_test.py
==================
f5f35c5c;George Necula;2020-04-02 14:44:36 +0200;Adapted vmap out_axes check to sum_match

==

jax/interpreters/batching.py
==================
7a5d1bc0;George Necula;2020-03-28 16:50:31 +0100;Expand docstring for vmap with details about out_axes, and improve error checking
The newly added test cases used to raise the following kinds of exceptions:

AttributeError: 'float' object has no attribute 'shape'

ValueError: (0, None)

ValueError: vmap got inconsistent sizes for array axes to be mapped:
    arg 0 has shape (2,) and axis None is to be mapped
        so

TypeError: only integer scalar arrays can be converted to a scalar index.

==

jax/api.py
jax/interpreters/batching.py
tests/api_test.py
==================
99944d12;Sharad Vikram;2020-04-04 23:19:39 -0700;Fix lax.broadcast_shapes returning numpy ints in shape tuple (#2471)
* Fix lax.broadcast_shapes returning numpy ints in shape tuple

* Use _canonicalize_dimension and add test
==

jax/lax/lax.py
tests/lax_test.py
==================
1cf708ea;Stephan Hoyer;2020-04-04 15:55:46 -0700;Support pytrees in jax.scipy.linalg.cg (#2600)
* Support pytrees in jax.scipy.linalg.cg

Ideally there would be an easier way to write this, but for now this will do.

* Fixup test
==

jax/scipy/sparse/linalg.py
tests/lax_scipy_sparse_test.py
==================
2c4ced21;Matthew Johnson;2020-04-03 20:18:21 -0700;Merge pull request #2601 from adarob/fix-err
Fix error handling when an attempt is made to pmap a scalar.
==
==================
48eb5243;Adam Roberts;2020-04-03 18:03:42 -0700;Fix error handling when an attempt is made to pmap a scalar.

==

jax/interpreters/pxla.py
==================
c2f56fbd;Matthew Johnson;2020-04-03 16:21:38 -0700;add notes to changelog

==

docs/CHANGELOG.rst
==================
60de46a1;Matthew Johnson;2020-04-03 15:47:41 -0700;Merge pull request #2591 from google/tracer-printing
make tracers tree-pretty-print their contents
==
==================
b67250eb;Matthew Johnson;2020-04-03 15:21:45 -0700;Merge pull request #2599 from sharadmv/logit-fix
Fix grad(logit) to use defjvps and enable it in tests
==
==================
3c9fb35f;Sharad Vikram;2020-04-03 14:37:29 -0700;Fix dtype error

==

jax/scipy/special.py
==================
1b93bb51;Stephan Hoyer;2020-04-03 13:37:11 -0700;Implement scipy.sparse.linalg.cg (second try) (#2566)
* super minimal starter code

* Update optimizers.py

* implement flip with axis = None

* Create sparse.py

* fix some imports

* Update sparse.py

* add partial function & test

* Update lax_scipy_sparse_test.py

* Update lax_scipy_sparse_test.py

* add a test case for sparse pd matrix & add bigger dim

* address comments

* fix info return & create matrix with rng_factory

* Update lax_scipy_sparse_test.py

* Update lax_scipy_sparse_test.py

* Update sparse.py

* Update sparse.py

* Update sparse.py

* Update lax_scipy_sparse_test.py

* Update lax_scipy_sparse_test.py

* cast jax arrays into numpy array for scipy compatibility

* Update sparse.py

* Update sparse.py

* fix None issue, but algo is not working

* fix return of build_and_solve and output of while_loop

* fix condition func of while loop

* clearer variable names

* mismatch error

* Update lax_scipy_sparse_test.py

* Fixes to jax.experimental.sparse.cg

* Fix tests for gradients

* Add support for preconditioners to cg

* Move cg into scipy, update docs

* doc tweak

Co-authored-by: Tuan Nguyen <anhtuan277@gmail.com>
==

docs/jax.scipy.rst
jax/scipy/sparse/__init__.py
jax/scipy/sparse/linalg.py
tests/lax_scipy_sparse_test.py
==================
72783bb7;Sharad Vikram;2020-04-03 13:27:02 -0700;Fix grad(logit) to use defjvps and enable it in tests

==

jax/scipy/special.py
tests/lax_scipy_test.py
==================
2b3befff;Peter Hawkins;2020-04-03 16:09:48 -0400;Make reduce_prod differentiable to arbitrary order. (#2597)
* Make reduce_prod differentiable to arbitrary order.

The previous strategy for computing the JVP of reduce_prod used a pair of reduce_window operations to form left and right products for each position.

This PR instead builds an explicit reduction tree and differentiates through it, which while not as efficient as using XLA's built-in reductions, has the advantage of being differentiable to arbitrary order.
.

* Return the tree-reduction primals instead of returning the original primals in JVP rule.
==

jax/lax/lax.py
tests/lax_test.py
==================
824ac866;Peter Hawkins;2020-04-03 15:39:56 -0400;Reimplement np.cumsum and np.cumprod in terms of a parallel prefix scan. (#2596)
* Reimplement np.cumsum and np.cumprod in terms of a parallel prefix scan.

Unlike the existing implementation based on lax.reduce_window, this implementation is O(n log n) instead of O(n^2) and is arbitrarily differentiable.

Fixes #1212, #2418, #2542.
May help with issue #2380.

* Relax gradient test tolerance.
==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
192e9086;Matthew Johnson;2020-04-02 23:53:39 -0700;Merge pull request #2561 from madisonmay/batch-norm-no-scale-or-center
FIX: batch norm w/ no scale, center
==
==================
6402419a;Matthew Johnson;2020-04-02 23:52:40 -0700;Merge pull request #2563 from google/callable-typechecks
add callable typechecks to more api.py functions
==
==================
25aeb803;Matthew Johnson;2020-04-02 23:42:31 -0700;Merge pull request #2592 from google/travis-mypy
add trace state check tearDown to JaxTestCase
==
==================
3dee689e;Matthew Johnson;2020-04-02 23:28:57 -0700;Merge pull request #2593 from google/issue2578
add full lower to custom_jvp/vjp call bind
==
==================
ba8225f3;Matthew Johnson;2020-04-02 23:11:55 -0700;skip all parallelize tests (abandonware right now)

==

tests/parallel_test.py
==================
0e49133e;Matthew Johnson;2020-04-02 22:52:07 -0700;add full lower to custom_jvp/vjp call bind
fixes #2578

==

jax/custom_derivatives.py
tests/api_test.py
==================
f2de1bf3;Matthew Johnson;2020-04-02 22:01:43 -0700;add trace state check tearDown to JaxTestCase

==

jax/test_util.py
tests/api_test.py
tests/lax_control_flow_test.py
tests/loops_test.py
==================
297c9024;Matthew Johnson;2020-04-02 21:04:12 -0700;make tracers tree-pretty-print their contents

==

jax/core.py
==================
64a7d172;Matthew Johnson;2020-04-02 21:02:13 -0700;Merge pull request #2587 from google/travis-mypy
re-enable travis mypy testing (typo broke it)
==
==================
5d3f1bdf;Matthew Johnson;2020-04-02 20:14:12 -0700;tell mypy: using __init__ to reinitialize is OK

==

jax/core.py
==================
6d4987cc;Matthew Johnson;2020-04-02 18:19:44 -0700;make core.trace_state resetting be thread-local

==

jax/core.py
==================
b78b7a03;Matthew Johnson;2020-04-02 18:03:58 -0700;add global trace state checks to more tests

==

jax/core.py
tests/api_test.py
tests/lax_control_flow_test.py
tests/loops_test.py
==================
ab0a0054;Matthew Johnson;2020-04-02 17:18:47 -0700;check sublevel is reset in loops_test.py

==

tests/api_test.py
tests/lax_control_flow_test.py
tests/loops_test.py
==================
c72abf6d;Matthew Johnson;2020-04-02 15:52:01 -0700;re-enable travis mypy testing (typo broke it)

==

.travis.yml
==================
5c0ac40c;Skye Wanderman-Milne;2020-04-02 12:54:58 -0700;Revert jax.numpy.matmul to pre-#2512 version. (#2584)
https://github.com/google/jax/pull/2512 was causing some Google-internal tests to take longer.
==

jax/numpy/lax_numpy.py
==================
0bdd0f69;Matthew Johnson;2020-04-02 09:03:12 -0700;Merge pull request #2581 from google/jet-process-call
post process call of jet!
==
==================
84dc6cc1;Matthew Johnson;2020-04-02 07:52:17 -0700;post process call of jet!
Also included David's jet rule for lax.select.

Co-authored-by: Jesse Bettencourt <jessebett@cs.toronto.edu>
Co-authored-by: Jacob Kelly <jacob.jin.kelly@gmail.com>
Co-authored-by: David Duvenaud <duvenaud@cs.toronto.edu>

==

jax/experimental/jet.py
tests/jet_test.py
==================
32c45fbb;George Necula;2020-04-02 13:10:50 +0200;Another attempt to disable new failing test on TPU

==

tests/lax_numpy_test.py
==================
0c53ce9d;George Necula;2020-04-02 11:13:40 +0200;Disable test with float16 on TPU

==

jax/test_util.py
tests/lax_numpy_test.py
==================
1bb9aaa8;Skye Wanderman-Milne;2020-04-01 16:33:37 -0700;Revert "Refactor shard_args ShardedDeviceArray slow path. (#2562)" (#2577)
This reverts commit 2e87674aff0609d58eed07091d8e9fad8ee71d6c.

This refactoring was broken, but we apparently have no test coverage!
mypy/linting would have caught it though.
==

jax/interpreters/pxla.py
==================
2e87674a;Skye Wanderman-Milne;2020-04-01 15:35:26 -0700;Refactor shard_args ShardedDeviceArray slow path. (#2562)

==

jax/interpreters/pxla.py
==================
2d42c42a;Peter Hawkins;2020-04-01 17:18:17 -0400;Fix missing type promotion accidentally removed by #2512. (#2575)
This is in fact covered by the existing tests, but we were unlucky and didn't hit them in the set of generated tests we selected.
==

jax/numpy/lax_numpy.py
==================
8c4a938c;Tzu-Wei Sung;2020-04-01 12:29:48 -0700;Implement np.ldexp and np.frexp. (#1529)
Co-authored-by: Peter Hawkins <phawkins@google.com>
==

jax/numpy/lax_numpy.py
jax/test_util.py
tests/lax_numpy_test.py
==================
79ce6981;Peter Hawkins;2020-04-01 12:35:12 -0400;Fix incorrect raise in np.clip and add a test. (#2571)

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
651316f4;Xiayun Sun;2020-04-01 16:57:57 +0100;Fix issue 1465: fix jit in example (#1473)
* fix jit in example

* Avoid using static_argnums on a keyword argument; use a positional argument and a wrapper function for now.

Co-authored-by: Peter Hawkins <phawkins@google.com>
==

examples/advi.py
==================
86a4073a;Matthew Johnson;2020-04-01 08:25:32 -0700;enable beta test on float64 values (#1177)
* enable beta test on float64 values

cf. #1123

* Enable beta test on all platforms.

It seems sufficiently fast now.

Co-authored-by: Peter Hawkins <phawkins@google.com>
==

tests/random_test.py
==================
c758aff8;Peter Hawkins;2020-04-01 10:54:47 -0400;Fix some missing cases of broadcasting in np.einsum. (#2512)
* Fix some missing cases of broadcasting in np.einsum.

In particular, np.einsum allows one side of a batch or contracting dimension to have size 1 even if the other side has a non-1 size.

Implement np.matmul in terms of np.einsum. This allows us to reuse einsum's logic for performing broadcasting without explicitly broadcasting the LHS and RHS together.

* Add regression test.

Fixes #2189.
==

jax/numpy/lax_numpy.py
tests/lax_numpy_einsum_test.py
==================
1d09b6be;Tom Hennigan;2020-04-01 14:58:17 +0100;Replace CHECK with assert. (#2569)

==

jaxlib/pytree.cc
==================
ca23be63;Tom Hennigan;2020-03-28 13:14:40 +0000;Add `jax.tree_util.all_leaves(iterable)`.
In Haiku (https://github.com/deepmind/dm-haiku) we have `FlatMapping` which is
an immutable Mapping subclass maintaining a flat internal representation. Our
goal is to allow very cheap flatten/unflatten since these objects are used to
represent parameters/state and are often passed in and out of JAX functions that
flatten their inputs (e.g. jit/pmap).

One challenge we have is that on unflatten we need a fast way of testing whether
the list of leaves provided are flat or not (since we want to cache both the
flat structure and the leaves). Consider the following case:

```python
d = FlatMapping.from_mapping({"a": 1})  # Caches the result of jax.tree_flatten.
l, t = jax.tree_flatten(d)              # Fine, leaves are flat.
l = list(map(lambda x: (x, x), l))      # leaves are no longer flat.
d2 = jax.tree_unflatten(t, l)           # Needs to recompute structure.
jax.tree_leaves(d2)                     # Should return [1, 1] not [(1, 1)]
```

Actual implementation here: https://github.com/deepmind/dm-haiku/blob/d37b486e09696ef34f7396c11b04074cb73a963c/haiku/_src/data_structures.py#L204-L208

This function allows an efficient way to do this using the JAX public API.

==

jax/tree_util.py
jaxlib/pytree.cc
tests/tree_util_tests.py
==================
025d8741;Rick Wierenga;2020-04-01 09:01:59 +0200;Fix error message

==

jax/experimental/stax.py
==================
d2a827a0;George Necula;2020-03-31 10:01:19 +0200;Ensure the global trace_state is restored on errors in loops
This is an attempted fix for https://github.com/google/jax/issues/2507

==

jax/experimental/loops.py
tests/loops_test.py
==================
83b95751;Matthew Johnson;2020-03-31 18:46:15 -0700;add callable typechecks to more api.py functions

==

jax/api.py
==================
e3a9a56b;Skye Wanderman-Milne;2020-03-31 17:47:54 -0700;Remove unused argument from pxla.shard_args (#2560)

==

jax/interpreters/pxla.py
==================
4fa15343;Madison May;2020-03-31 19:59:57 -0400;FIX: batch norm w/ no scale, center

==

jax/experimental/stax.py
tests/stax_test.py
==================
c28c46e1;Skye Wanderman-Milne;2020-03-31 15:52:41 -0700;Add ShardedDeviceArray indexing benchmark. (#2549)
Example output:
```
---------Benchmark summary for ShardedDeviceArray_indexing---------
indices_fn              mean     %std    relative
------------------  --------  -------  ----------
integer_indices      0.16901  8.52522       1
integer_2D_indices  18.4918   0           109.412
```
==

benchmarks/benchmark.py
benchmarks/pmap_benchmark.py
==================
bfbd0b80;Peter Hawkins;2020-03-31 17:09:14 -0400;Move tuple_arguments onto Compile() instead of Execute(). (#2559)
Update minimum jaxlib version to 0.1.43.
==

.travis.yml
jax/interpreters/pxla.py
jax/interpreters/sharded_jit.py
jax/interpreters/xla.py
jax/lib/__init__.py
==================
6781eca8;Matthew Johnson;2020-03-31 13:51:45 -0700;Merge pull request #2558 from google/while-loop-of-pmap-bug
don't hardcode array size in test
==
==================
949d4231;Matthew Johnson;2020-03-31 13:07:59 -0700;improve error message for #2554

==

jax/interpreters/xla.py
tests/lax_control_flow_test.py
==================
29c581bd;Matthew Johnson;2020-03-31 11:54:57 -0700;don't hardcode array size in test
Fixes #2554

==

tests/lax_control_flow_test.py
==================
bd1708c7;Peter Hawkins;2020-03-31 10:02:38 -0400;Update changelog and README for jaxlib 0.1.43. (#2556)

==

README.md
docs/CHANGELOG.rst
==================
59ed4aea;George Necula;2020-03-31 11:11:47 +0200;Disable test_while_loop_of_pmap on all platforms
Issue: #2554
Disable the test so that we can continue the google3 tests

==

tests/lax_control_flow_test.py
==================
fd52fbf4;George Necula;2020-03-31 10:36:47 +0200;Fix import in benchmarks
This works on my machine as 'python benchmarks/pmap_benchmark.py'. It also
follows the code in examples.

This will need a copybara rule to change the import to 'from jax.benchmarks import benchmark'

==

benchmarks/pmap_benchmark.py
==================
a4ceae1c;Matthew Johnson;2020-03-30 22:12:38 -0700;fix link in custom derivatives tutorial notebook

==

docs/notebooks/Custom_derivative_rules_for_Python_code.ipynb
==================
27604c39;Matthew Johnson;2020-03-30 22:11:35 -0700;fix typo in notebook

==

docs/notebooks/Custom_derivative_rules_for_Python_code.ipynb
==================
e017a923;Matthew Johnson;2020-03-30 22:06:00 -0700;fix typo

==

jax/core.py
==================
7a9c550e;Matthew Johnson;2020-03-30 21:30:47 -0700;add sphinx-autodoc-typehints to travis install

==

.travis.yml
==================
e7be43da;Matthew Johnson;2020-03-30 21:09:12 -0700;update api.py docstrings for sphinx highlighting

==

jax/api.py
==================
cda505a2;Matthew Johnson;2020-03-30 20:46:09 -0700;Merge pull request #2551 from google/enable-mpc-tests
try re-enabling control tests that trigger #2507
==
==================
909fee6a;Matthew Johnson;2020-03-30 20:22:04 -0700;try adding sphinx-autodoc-typehints

==

docs/conf.py
docs/requirements.txt
==================
b015e571;Matthew Johnson;2020-03-30 20:12:33 -0700;try re-enabling control tests that trigger #2507

==

examples/control_test.py
==================
1f03d48c;Matthew Johnson;2020-03-30 20:10:39 -0700;try resetting global tracer state in loops_test.py
attempting to address #2507

==

tests/loops_test.py
==================
de37eae6;Matthew Johnson;2020-03-30 20:10:16 -0700;Merge pull request #2550 from google/update-custom-derivatives-notebook
update custom derivatives tutorial notebook
==
==================
15009c90;Matthew Johnson;2020-03-30 19:45:45 -0700;add docstring for defjvps, fix sphinx docs

==

jax/custom_derivatives.py
==================
bd726fcd;Matthew Johnson;2020-03-30 19:37:11 -0700;update custom derivatives tutorial notebook
* add clip_gradient example
* add defjvps convenience wrapper

==

docs/notebooks/Custom_derivative_rules_for_Python_code.ipynb
==================
b7d2cbdc;Matthew Johnson;2020-03-30 18:34:50 -0700;Merge pull request #2548 from google/while-loop-of-pmap-bug
fix a while-loop-of-pmap bug (thanks @jaspersnoek)
==
==================
375575a5;Matthew Johnson;2020-03-30 17:53:47 -0700;skip new test on cpu unless num_devices > 1

==

tests/lax_control_flow_test.py
==================
df3b5fe4;Matthew Johnson;2020-03-30 17:48:07 -0700;fix a while-loop-of-pmap bug (thanks @jaspersnoek)

==

jax/interpreters/xla.py
tests/lax_control_flow_test.py
==================
acb24146;Peter Hawkins;2020-03-30 19:43:23 -0400;Update XLA to fix CUDA 9.2 build problem. (#2547)

==

WORKSPACE
==================
0c7e134c;Peter Hawkins;2020-03-30 16:56:54 -0400;Update XLA and increment jaxlib version to 0.1.43. (#2546)

==

WORKSPACE
jaxlib/version.py
==================
1275bc5d;Matthew Johnson;2020-03-30 13:50:32 -0700;don't pass `-n 1` to pytest in travis

==

.travis.yml
==================
b43051e4;Matthew Johnson;2020-03-30 13:49:56 -0700;minor fix to custom_transforms

==

jax/interpreters/ad.py
==================
3d0c1871;Matthew Johnson;2020-03-30 13:38:05 -0700;Merge pull request #2543 from google/process-custom-jvp-default-implementation
comments/defaults for process_custom_{jv,vj}p_call
==
==================
ea9401d8;Matthew Johnson;2020-03-30 12:47:13 -0700;Merge pull request #2541 from google/xla-computation-duck-typing
allow duck-typing in xla_computation arguments
==
==================
70a3f47b;Matthew Johnson;2020-03-30 11:57:03 -0700;comments/defaults for process_custom_{jv,vj}p_call

==

jax/core.py
jax/interpreters/partial_eval.py
==================
f766c5e7;Matthew Johnson;2020-03-30 11:31:29 -0700;allow duck-typing in xla_computation arguments

==

jax/api.py
tests/api_test.py
==================
9d8823c9;Matthew Johnson;2020-03-30 00:41:04 -0700;add initial_style_staging to custom_transforms

==

jax/api.py
==================
a6a837a6;Matthew Johnson;2020-03-30 00:35:45 -0700;add some stage_out=True indicators

==

jax/api.py
jax/interpreters/xla.py
==================
fab66007;Matthew Johnson;2020-03-29 23:31:07 -0700;Merge pull request #2539 from google/remat-fix
remove remat context check, add initial staging
==
==================
bdc0c3bf;Matthew Johnson;2020-03-29 23:29:55 -0700;remove remat context check, add initial staging

==

jax/interpreters/partial_eval.py
jax/lax/lax.py
==================
e7f8503c;Matthew Johnson;2020-03-29 23:04:00 -0700;Merge pull request #2500 from google/custom-jvp-fix
revise custom_jvp / custom_vjp rule jaxpr staging
==
==================
74d358d0;Matthew Johnson;2020-03-29 23:00:40 -0700;skip ode test on import error (internal)

==

tests/api_test.py
==================
b2b68e54;Matthew Johnson;2020-03-29 20:51:51 -0700;fix bugs, add tests

==

jax/custom_derivatives.py
jax/interpreters/batching.py
jax/interpreters/partial_eval.py
tests/api_test.py
==================
7a4c4d55;Matthew Johnson;2020-03-29 20:48:08 -0700;use custom_jvp for internal functions

==

jax/custom_derivatives.py
jax/nn/functions.py
jax/numpy/linalg.py
jax/scipy/special.py
==================
6193e5e4;Matthew Johnson;2020-03-28 14:15:46 -0700;revamp custom_jvp/vjp implementation to fix bugs
Co-authored-by: Dougal Maclaurin <dougalm@google.com>

==

design_notes/custom_derivatives.md
images/custom_jvp_schematic.png
jax/api.py
jax/core.py
jax/custom_derivatives.py
jax/interpreters/ad.py
jax/interpreters/batching.py
jax/interpreters/partial_eval.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
jax/lax/lax_control_flow.py
jax/linear_util.py
tests/api_test.py
==================
954334cb;Matthew Johnson;2020-03-29 18:05:48 -0700;Merge pull request #2537 from duvenaud/morejets
Adds lots of trivial jet rules, partly addresses #2431
==
==================
0f11f9c1;Matthew Johnson;2020-03-29 17:02:19 -0700;Merge pull request #2538 from google/pfau
workaround for pmap output PRED arrays on cpu/gpu
==
==================
1762a865;Matthew Johnson;2020-03-29 14:45:17 -0700;workaround for pmap output PRED arrays on cpu/gpu

==

jax/api.py
jax/interpreters/pxla.py
==================
305dd8c2;Matthew Johnson;2020-03-29 14:43:42 -0700;Merge pull request #2536 from google/issue2534
add docstring / reference doc link for axis_index
==
==================
fcc1e76c;Matthew Johnson;2020-03-29 13:56:26 -0700;add docstring / reference doc link for axis_index
fixes #2534

==

docs/jax.lax.rst
jax/interpreters/pxla.py
==================
614d39dc;Matthew Johnson;2020-03-29 13:37:49 -0700;Merge pull request #2527 from lucasb-eyer/patch-1
Make it more explicit that default JVP assumes |R
==
==================
ead80118;David Duvenaud;2020-03-29 16:28:17 -0400;Added lots of trivial jet rules.
Co-Authored-By: jessebett <jessebett@gmail.com>
Co-Authored-By: Jacob Kelly <jacob.kelly@mail.utoronto.ca>

==

jax/experimental/jet.py
tests/jet_test.py
==================
67283a08;Matthew Johnson;2020-03-28 13:52:40 -0700;add new custom_jvp tests from #2500
Co-authored-by: Dougal Maclaurin <dougalm@google.com>

==

tests/api_test.py
==================
bcc5191c;Matthew Johnson;2020-03-28 15:15:47 -0700;Merge pull request #2533 from google/core-trace-type-annotations
add type annotations to core.py tracing machinery
==
==================
f99720b7;Matthew Johnson;2020-03-28 14:55:58 -0700;add type annotations to core.py tracing machinery
also add .copy() method to core.trace_state global trace state

==

jax/core.py
jax/interpreters/partial_eval.py
mypy.ini
==================
cdbcbb00;Matthew Johnson;2020-03-28 12:31:40 -0700;Merge pull request #2532 from google/sharded-device-array-handlers
add ShardedDeviceArray to ad vspace op handlers
==
==================
1b597895;Matthew Johnson;2020-03-28 11:56:12 -0700;add ShardedDeviceArray to ad vspace op handlers
fixes #2529 (thanks, @dpfau !)

==

jax/lax/lax.py
==================
415cde5b;Lucas Beyer;2020-03-28 12:32:44 +0100;Make it more explicit that default JVP assumes |R
It's just an attempt to make this implicit assumption, as it only became clear to me after our discussion in chat, not after reading this.
==

docs/notebooks/Custom_derivative_rules_for_Python_code.ipynb
==================
f371bfc0;Peter Hawkins;2020-03-27 21:24:26 -0400;Improve speed of LU decomposition on TPU. (#2526)
Increase the block size, which helps with compilation time.
Merge the two row permutations in the outer loop, which means we do row-at-a-time gathers.
==

jax/lax_linalg.py
==================
6d0810a4;Matthew Johnson;2020-03-27 12:46:01 -0700;Merge pull request #2501 from botev/isclose
Making isclose handle correctly infinite and NaN values.
==
==================
24bbd2bc;Skye Wanderman-Milne;2020-03-27 10:50:57 -0700;Fix pmap_benchmark.py import (#2524)

==

benchmarks/pmap_benchmark.py
==================
db0ac989;Matthew Johnson;2020-03-27 09:35:07 -0700;Merge pull request #2523 from sharadmv/tangent-fix
Instantiate zeros in _custom_vjp_call_jaxpr_jvp
==
==================
0499b845;Sharad Vikram;2020-03-26 19:07:48 -0700;Instantiate zeros in _custom_vjp_call_jaxpr_jvp

==

jax/custom_derivatives.py
==================
42dbfd43;Matthew Johnson;2020-03-26 16:52:29 -0700;attempt to fix link formatting with nbsphinx

==

docs/notebooks/Custom_derivative_rules_for_Python_code.ipynb
==================
a4215f29;Matthew Johnson;2020-03-25 21:01:00 -0700;Merge pull request #2513 from google/temp-revert-2026
temporarily revert parts of #2026 pending bug fix
==
==================
3700fab7;Matthew Johnson;2020-03-25 20:24:11 -0700;remove deprecation warnings

==

jax/api.py
==================
c3e3d480;Matthew Johnson;2020-03-25 20:19:49 -0700;temporarily revert parts of #2026 pending bug fix

==

jax/nn/functions.py
jax/numpy/linalg.py
jax/scipy/special.py
==================
32747476;Matthew Johnson;2020-03-25 18:17:55 -0700;fix derivatives reference (wrong Rudin!)

==

docs/notebooks/Custom_derivative_rules_for_Python_code.ipynb
==================
fc0f875b;Matthew Johnson;2020-03-25 17:05:57 -0700;improve ref to Tao's 3rd edition of Analysis I

==

docs/notebooks/Custom_derivative_rules_for_Python_code.ipynb
==================
da9b5232;Matthew Johnson;2020-03-25 14:53:23 -0700;remove incorrect sentence in notebook

==

docs/notebooks/How_JAX_primitives_work.ipynb
==================
9ec0ac6e;botev;2020-03-25 09:59:43 +0000;Added test for isclose.

==

tests/lax_numpy_test.py
==================
f88d49b4;George Necula;2020-03-24 10:22:49 +0100;Added FAQ entry about creating JAX arrays

==

docs/faq.rst
==================
86e3046e;George Necula;2020-03-22 06:47:14 +0100;Added a FAQ for impure functions

==

docs/faq.rst
==================
6f2f779a;George Necula;2020-03-19 14:55:16 +0100;Started a FAQ for JAX

==

docs/faq.rst
docs/index.rst
==================
d1e8f43a;George Necula;2020-03-25 11:07:50 +0200;Better error message for indexing with floats (#2496)
Now the error message is 'Indexer must have integer or boolean type'.
Before it was 'len() of unsized object'
==

jax/numpy/lax_numpy.py
tests/lax_numpy_indexing_test.py
==================
a4922ced;Matthew Johnson;2020-03-24 22:30:43 -0700;Merge pull request #2503 from google/issue2502
improve custom_jvp error messages
==
==================
74c20509;Matthew Johnson;2020-03-24 20:43:33 -0700;improve custom_jvp error messages, fixes #2502

==

jax/core.py
jax/custom_derivatives.py
jax/lax/lax_control_flow.py
tests/api_test.py
==================
b05ac579;botev;2020-03-25 02:10:06 +0000;Making isclose handle correctly infinite and NaN values.

==

jax/numpy/lax_numpy.py
==================
0cf84f92;Matthew Johnson;2020-03-23 18:43:02 -0700;fix custom_transforms bug

==

jax/api.py
==================
8c4d5cee;Matthew Johnson;2020-03-23 17:42:40 -0700;Merge pull request #2493 from google/custom-transforms-cleanup
separate out deprecated custom_transforms stuff
==
==================
83bf048f;Matthew Johnson;2020-03-23 14:29:22 -0700;separate out deprecated custom_transforms stuff

==

docs/jax.rst
jax/api.py
jax/interpreters/ad.py
tests/api_test.py
==================
c76f32b1;Matthew Johnson;2020-03-23 12:18:59 -0700;remove jarrett and _make_graphviz, bitrot
might want to revive jarrett later!

==

jax/api.py
==================
61d885cf;George Necula;2020-03-23 08:08:16 +0200;Revert previous commit (remove old custom_transforms API) (#2489)
* Revert "Add back support for custom_transforms"

This reverts commit 3abe61f1aed3810f7dc922c87e5cfec1c879fd27.
==
==================
f658eb5b;George Necula;2020-03-22 19:50:06 +0100;Add back support for custom_transforms (#2484)
* add also the tests
* mark the old APIs as deprecated
==

jax/api.py
jax/interpreters/ad.py
tests/api_test.py
==================
069cb3e2;Matthew Johnson;2020-03-21 22:57:51 -0700;Merge pull request #2026 from google/custom-transforms3
add custom_jvp / vjp, delete custom_transforms
==
==================
7e480fa9;Matthew Johnson;2020-01-15 15:00:38 -0800;add custom_jvp / vjp, delete custom_transforms

==

.travis.yml
README.md
design_notes/custom_derivatives.md
docs/CHANGELOG.rst
docs/index.rst
docs/jax.rst
docs/jaxpr.rst
docs/notebooks/Custom_derivative_rules_for_Python_code.ipynb
docs/notebooks/How_JAX_primitives_work.ipynb
examples/control_test.py
images/custom_jvp_schematic.png
jax/api.py
jax/api_util.py
jax/core.py
jax/custom_derivatives.py
jax/experimental/loops.py
jax/experimental/ode.py
jax/interpreters/ad.py
jax/interpreters/batching.py
jax/interpreters/partial_eval.py
jax/lax/lax.py
jax/lax/lax_control_flow.py
jax/linear_util.py
jax/nn/functions.py
jax/numpy/lax_numpy.py
jax/numpy/linalg.py
jax/random.py
jax/scipy/special.py
tests/api_test.py
==================
6876271b;Matthew Johnson;2020-03-21 21:20:12 -0700;bump tolerance for mvn logpdf x64 test

==

tests/scipy_stats_test.py
==================
15c8d4c2;Matthew Johnson;2020-03-21 20:57:25 -0700;update version and changelog for pypi

==

docs/CHANGELOG.rst
jax/version.py
==================
a669eda6;Matthew Johnson;2020-03-21 19:56:03 -0700;Merge pull request #2470 from GeorgOstrovski/changelist/301855313
Make jax.numpy.squeeze as strict as numpy.squeeze about axis shape.
==
==================
7b0ee9a5;Matthew Johnson;2020-03-21 15:42:59 -0700;improve implementation of MVN logpdf (#2481)
fixes #2314

I also added a bit more test coverage, but not a ton: scipy has
different batch shape semantics and default arguments than I might
expect, so I didn't bother to implement those (and left some test cases
commented out).

I ran into this surprising scipy bug:

```python
In [1]: from scipy.stats import multivariate_normal

In [2]: import numpy as np

In [3]: args = [np.array(1., np.float32), np.array(2., np.float64), np.array(3., np.float64)]

In [4]: print([x.shape for x in args])
[(), (), ()]

In [5]: multivariate_normal.logpdf(*args)
Out[5]: -1.6349113442053944

In [6]: print([x.shape for x in args])
[(), (1,), (1, 1)]
```

Mutated arguments! But it depends on dtype promotion:

```python
In [7]: args = [np.array(1., np.float32), np.array(2., np.float32), np.array(3., np.float32)]

In [8]: print([x.shape for x in args])
[(), (), ()]

In [9]: multivariate_normal.logpdf(*args)
Out[9]: -1.6349113442053944

In [10]: print([x.shape for x in args])
[(), (), ()]
```
==

jax/scipy/stats/multivariate_normal.py
jax/test_util.py
tests/scipy_stats_test.py
==================
e456edf5;Matthew Johnson;2020-03-21 12:22:44 -0700;Merge pull request #2480 from google/solve-triangular-vectors
make lax_linalg.solve_triangular allow vector rhs
==
==================
93d3e347;Matthew Johnson;2020-03-21 10:46:07 -0700;make lax_linalg.solve_triangular allow vector rhs
also add tests for jax.scipy.linalg.cho_solve

==

jax/lax_linalg.py
jax/scipy/linalg.py
tests/linalg_test.py
==================
fcdbe63f;George Necula;2020-03-21 17:38:46 +0100;Trigger a Travis build (#2477)
* Remove more unused imports
* Fix warnings in travis.yml
==

.travis.yml
tests/batching_test.py
tests/core_test.py
tests/debug_nans_test.py
==================
e41a5ea6;George Necula;2020-03-21 15:45:59 +0100;Pytype2 (#2476)
* Try to install pytype from pip
==

.travis.yml
==================
428377af;George Necula;2020-03-21 13:54:30 +0100;Added type annotations and removed unused imports (#2472)
* Added type annotations and removed unused imports

* Adjusted type hints for pytype
==

benchmarks/benchmark.py
docs/developer.rst
jax/api.py
jax/core.py
jax/dlpack.py
jax/interpreters/batching.py
jax/interpreters/parallel.py
jax/interpreters/partial_eval.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
tests/api_test.py
tests/fft_test.py
tests/linalg_test.py
==================
9331fc5b;George Necula;2020-03-21 13:53:35 +0100;Added pytype checking to Travis (#2475)

==

.travis.yml
==================
f7e6b26d;Georg Ostrovski;2020-03-19 18:17:02 +0000;Make jax.numpy.squeeze as strict as numpy.squeeze about axis shape.
Raise error if an axis explicitly selected to be squeezed has shape != 1.

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
578e5cf6;Peter Hawkins;2020-03-19 14:54:04 -0400;Fix return type for vjp. (#2462)
Fix vjp doc string.
==

jax/api.py
==================
592ba02c;Peter Hawkins;2020-03-19 14:53:24 -0400;Fix nondeterminism in test ordering in Python 3.6. (#2460)
Set orders aren't deterministic, and this made pytest-xdist complain.
==

tests/lax_numpy_test.py
tests/lax_test.py
==================
7f8ce8ff;Matthew Johnson;2020-03-19 11:28:35 -0700;fix test errors from previous commit

==

docs/notebooks/Writing_custom_interpreters_in_Jax.ipynb
tests/api_test.py
==================
1d0b7e2b;Matthew Johnson;2020-03-19 11:26:29 -0700;make jaxpr pretty-print show multiple outputs

==

jax/core.py
==================
c3f89090;Peter Hawkins;2020-03-19 12:41:19 -0400;Update jaxlib version in README.md. (#2461)

==

README.md
==================
d11a9ab1;Trevor Cai;2020-03-19 15:35:00 +0000;Expose jax.lax.all_gather (#2449)
* Expose jax.lax.all_gather

* add all_gather to RTD
==

docs/jax.lax.rst
jax/lax/lax_parallel.py
tests/pmap_test.py
==================
c7f211d4;Srinivas Vasudevan;2020-03-19 07:29:37 -0700;Update JAX to use XLA hyperbolic functions. (#2415)

==

examples/control_test.py
jax/lax/lax.py
jax/lax_reference.py
jax/numpy/lax_numpy.py
tests/lax_scipy_test.py
tests/lax_test.py
==================
afdd1a73;Peter Hawkins;2020-03-19 10:28:29 -0400;Add more return types to api.py. (#2452)

==

jax/api.py
==================
cecfb37e;Peter Hawkins;2020-03-19 09:57:11 -0400;Increment jaxlib version to 0.1.42. (#2457)
Update XLA.
==

WORKSPACE
docs/CHANGELOG.rst
jaxlib/version.py
==================
78c1f6b0;George Necula;2020-03-19 08:54:37 +0100;Increased tolerance for testScipySpecialFun (#2454)
Prevent failures on TPU
==

jax/test_util.py
tests/lax_scipy_test.py
==================
cd7ab0a9;George Necula;2020-03-19 06:56:59 +0100;Changed to pmap_benchmark to make it runnable in Google (#2448)

==

benchmarks/pmap_benchmark.py
==================
2998a215;George Necula;2020-03-19 06:55:43 +0100;Updated Common Gotchas (#2435)
* Minor update to docs; trigger readthedocs

* Updated Common Gotchas notebook

Handle errors explicitly, otherwise it is too hard to test the notebook by 'Run all'

* Added a section about pure functions to Common Gotchas
==

docs/notebooks/Common_Gotchas_in_JAX.ipynb
==================
68b32bf7;Peter Hawkins;2020-03-18 17:06:05 -0400;Add mypy type checking (#2430)
* Add type annotations to make mypy pass.

* Add mypy to .travis.yml.

==

.travis.yml
jax/ad_util.py
jax/api.py
jax/core.py
jax/interpreters/ad.py
jax/interpreters/batching.py
jax/interpreters/masking.py
jax/interpreters/parallel.py
jax/interpreters/partial_eval.py
jax/interpreters/pxla.py
jax/interpreters/sharded_jit.py
jax/interpreters/xla.py
jax/lax/lax.py
jax/lax/lax_control_flow.py
jax/lax/lax_fft.py
jax/lax/lax_parallel.py
jax/lax_linalg.py
jax/lazy.py
jax/lib/xla_bridge.py
jax/numpy/lax_numpy.py
jax/numpy/vectorize.py
jax/test_util.py
mypy.ini
==================
cd248ba3;Sharad Vikram;2020-03-18 14:05:28 -0700;Fix xlog1py and xlogy not returning 0 when x == 0. (#2450)
* Fix xlog1py and xlogy not returning 0 when x == 0.

* Add tests for xlog1py and xlogy
==

jax/scipy/special.py
tests/lax_scipy_test.py
==================
cbdf9a5a;Peter Hawkins;2020-03-18 10:54:28 -0400;Drop support for Python 3.5. (#2445)

==

README.md
build/Dockerfile
build/build.py
build/build_jaxlib_wheels.sh
build/build_jaxlib_wheels_macos.sh
build/setup.py
docs/CHANGELOG.rst
setup.py
tests/api_test.py
==================
7f1e8594;Matthew Johnson;2020-03-17 23:42:37 -0700;Merge pull request #2447 from google/remove-safe-mul
remove safe_mul (undo #383, also cf. #1052)
==
==================
26d5a68f;James Bradbury;2020-03-17 22:41:02 -0700;Wrap pad_widths in a tuple to avoid cache misses (#2379)

==

jax/numpy/lax_numpy.py
==================
f1d9130f;Matthew Johnson;2020-03-17 22:07:53 -0700;remove safe_mul (undo #383, also cf. #1052)

==

jax/lax/__init__.py
jax/lax/lax.py
jax/lax/lax_parallel.py
jax/scipy/special.py
tests/lax_numpy_test.py
==================
75077a14;Skye Wanderman-Milne;2020-03-17 14:31:25 -0700;Add pmap_benchmark.py (#2409)
Example output:

```
$ TARGET_TOTAL_SECS=2 CUDA_VISIBLE_DEVICES= XLA_FLAGS=--xla_force_host_platform_device_count=500 python3 benchmarks/pmap_benchmark.py
2020-03-12 15:46:35.903121: E external/org_tensorflow/tensorflow/stream_executor/cuda/cuda_driver.cc:313] failed call to cuInit: CUDA_ERROR_NO_DEVICE: no CUDA-capable device is detected
/usr/local/google/home/skyewm/jax/jax/lib/xla_bridge.py:122: UserWarning: No GPU/TPU found, falling back to CPU.
  warnings.warn('No GPU/TPU found, falling back to CPU.')
---------Benchmark results for pmap_shard_args_nargs=10_nshards=4---------
mean=0.034490 std=0.002890 %std=8.378140 total=2.000426
#iters=58 #warmup=1

---------Benchmark results for pmap_shard_args_nargs=100_nshards=4---------
mean=0.091495 std=0.005935 %std=6.486871 total=2.012888
#iters=22 #warmup=1

---------Benchmark results for pmap_shard_args_nargs=101_nshards=4---------
mean=0.113549 std=0.009080 %std=7.996712 total=2.043878
#iters=18 #warmup=1

---------Benchmark results for pmap_shard_args_nargs=500_nshards=4---------
mean=0.356868 std=0.007960 %std=2.230518 total=2.141210
#iters=6 #warmup=1

---------Benchmark results for pmap_shard_args_nargs=10_nshards=2---------
mean=0.022288 std=0.002946 %std=13.219607 total=2.005951
#iters=90 #warmup=1

---------Benchmark results for pmap_shard_args_nargs=10_nshards=4---------
mean=0.035210 std=0.002024 %std=5.747389 total=2.006975
#iters=57 #warmup=1

---------Benchmark results for pmap_shard_args_nargs=10_nshards=8---------
mean=0.048641 std=0.001578 %std=3.243398 total=2.042912
#iters=42 #warmup=1

---------Benchmark results for pmap_shard_args_nargs=10_nshards=100---------
mean=0.257487 std=0.007190 %std=2.792452 total=2.059900
#iters=8 #warmup=1

---------Benchmark results for pmap_shard_args_nargs=10_nshards=500---------
mean=1.696294 std=0.005097 %std=0.300473 total=3.392588
#iters=2 #warmup=1

---------Benchmark summary for pmap_shard_args---------
  nargs    nshards       mean       %std    relative
-------  ---------  ---------  ---------  ----------
     10          4  0.0344901   8.37814     1
    100          4  0.0914949   6.48687     2.65279
    101          4  0.113549    7.99671     3.29221
    500          4  0.356868    2.23052    10.347
     10          2  0.0222883  13.2196      0.646224
     10          4  0.0352101   5.74739     1.02088
     10          8  0.0486408   3.2434      1.41028
     10        100  0.257487    2.79245     7.46555
     10        500  1.69629     0.300473   49.182

---------Benchmark results for pmap_shard_outputs_nouts=10_nshards=4---------
mean=0.061780 std=0.004737 %std=7.668032 total=2.038743
#iters=33 #warmup=1

---------Benchmark results for pmap_shard_outputs_nouts=100_nshards=4---------
mean=0.123264 std=0.005980 %std=4.851385 total=2.095494
#iters=17 #warmup=1

---------Benchmark results for pmap_shard_outputs_nouts=500_nshards=4---------
mean=0.471524 std=0.024051 %std=5.100792 total=2.357622
#iters=5 #warmup=1

---------Benchmark results for pmap_shard_outputs_nouts=10_nshards=2---------
mean=0.041546 std=0.004446 %std=10.700256 total=2.035745
#iters=49 #warmup=1

---------Benchmark results for pmap_shard_outputs_nouts=10_nshards=4---------
mean=0.063768 std=0.002756 %std=4.322039 total=2.040561
#iters=32 #warmup=1

---------Benchmark results for pmap_shard_outputs_nouts=10_nshards=8---------
mean=0.087285 std=0.005343 %std=6.121320 total=2.007556
#iters=23 #warmup=1

---------Benchmark results for pmap_shard_outputs_nouts=10_nshards=100---------
mean=0.623440 std=0.004038 %std=0.647725 total=2.493759
#iters=4 #warmup=1

---------Benchmark results for pmap_shard_outputs_nouts=10_nshards=500---------
mean=4.096676 std=0.000000 %std=0.000000 total=4.096676
#iters=1 #warmup=1

---------Benchmark summary for pmap_shard_outputs---------
  nouts    nshards       mean       %std    relative
-------  ---------  ---------  ---------  ----------
     10          4  0.0617801   7.66803     1
    100          4  0.123264    4.85139     1.99521
    500          4  0.471524    5.10079     7.6323
     10          2  0.0415458  10.7003      0.672479
     10          4  0.0637675   4.32204     1.03217
     10          8  0.087285    6.12132     1.41283
     10        100  0.62344     0.647725   10.0913
     10        500  4.09668     0          66.3106
```
==

benchmarks/benchmark.py
benchmarks/pmap_benchmark.py
==================
75813f46;Peter Hawkins;2020-03-17 17:15:59 -0400;Update jax version number. (#2444)

==

jax/version.py
==================
db8bea4c;Peter Hawkins;2020-03-17 17:09:05 -0400;Update changelog for jax 0.1.61 release. (#2443)

==

docs/CHANGELOG.rst
==================
84140ea5;Trevor Cai;2020-03-17 21:02:41 +0000;Ensure jax.host_ids() returns a stable ordering (#2442)
...in this case, by sorting them.
==

jax/lib/xla_bridge.py
==================
e46a002e;Peter Hawkins;2020-03-17 17:02:22 -0400;Remove runtime tuple use from JAX. (#2441)
Change in preparation for upcoming runtime changes related to buffer aliasing.
==

jax/interpreters/pxla.py
jax/interpreters/sharded_jit.py
jax/interpreters/xla.py
tests/api_test.py
==================
985d5f73;Peter Hawkins;2020-03-17 17:01:04 -0400;Fix Python 3.5 support. (#2439)
* Fix Python 3.5 compatibility problems.

==

.travis.yml
jax/api.py
jax/core.py
jax/numpy/vectorize.py
tests/api_test.py
tests/lax_numpy_test.py
==================
6b157ff9;Peter Hawkins;2020-03-17 10:04:17 -0400;Update jax version to 0.1.60. (#2437)

==

docs/CHANGELOG.rst
jax/version.py
==================
c4c770b7;George Necula;2020-03-17 09:24:17 +0100;Minor update to docs; trigger readthedocs (#2434)

==

docs/CHANGELOG.rst
==================
e66e5699;George Necula;2020-03-17 09:07:14 +0100;Minor update to docsl trigger readthedocs (#2433)

==

docs/CHANGELOG.rst
==================
5f2d2254;jheek;2020-03-17 07:45:17 +0100;Fix typo in ShapeDtypeStruct (#2253)
* fix ShapeDtypeSTruct dtype bug

* move dtype conversion to constructor
==

jax/api.py
==================
0ddc2ec3;George Necula;2020-03-16 10:59:25 +0100;Fixed failing tests

==

jax/lax/lax.py
==================
3362591c;George Necula;2020-03-16 10:00:48 +0100;Updated CHANGELOG

==

docs/CHANGELOG.rst
==================
5cf82c75;George Necula;2020-03-16 09:54:58 +0100;Improved argument checking for lax.broadcast_in_dim
* Added checking that the output shape has higher or equal rank to input
* Added checking that the broadcast_dims are sorted (required by XLA)
* Relaxed check that operand dimension size can be 1
* Added lax.broadcast_in_dim docstring

==

jax/lax/lax.py
jax/lax_reference.py
tests/lax_test.py
==================
c0c3a4a5;Matthew Johnson;2020-03-16 19:46:52 -0700;Merge pull request #2401 from hawkinsp/ones
Check for invalid shapes in broadcast_in_dim and fail gracefully.
==
==================
36a46cb5;Matthew Johnson;2020-03-16 19:45:30 -0700;Merge pull request #2426 from mtthss/master
Make gradient clipping by norm more numerically safe
==
==================
ec9513fa;Peter Hawkins;2020-03-16 16:10:26 -0400;Advertise jaxlib 0.1.41. (#2432)
Bump minimum jaxlib version to 0.1.41.
==

.travis.yml
README.md
jax/lib/__init__.py
==================
ed8dbd25;Matthew Johnson;2020-03-16 12:17:09 -0700;temporarily switch off #2414 changes

==

jax/lax/lax_control_flow.py
==================
efaedf4b;Matthew Johnson;2020-03-16 12:13:25 -0700;undo previous commit

==

jax/api.py
jax/interpreters/xla.py
==================
52807931;Matthew Johnson;2020-03-16 10:23:24 -0700;fix custom_transforms + jit bug from #2416

==

jax/api.py
jax/interpreters/xla.py
==================
1c202ac3;Matthew Johnson;2020-03-16 09:20:34 -0700;fix typo, unbreak pmap (from #2416)

==

jax/interpreters/xla.py
==================
388e78f8;Peter Hawkins;2020-03-16 11:24:02 -0400;Increment jaxlib version to 0.1.41. (#2428)
Update XLA.
==

WORKSPACE
jaxlib/version.py
==================
219d503e;Peter Hawkins;2020-03-16 11:01:08 -0400;Don't show progress bar in build script if output is not a terminal. (#2429)

==

build/build.py
==================
196fddbb;Matteo Hessel;2020-03-16 11:12:04 +0000;Make gradient clipping by norm more numerically safe

==

jax/experimental/optix.py
==================
6545cf34;Roy Frostig;2020-03-15 22:22:24 -0700;Merge pull request #2424 from google/broadcast-shapecheck
add lax.broadcast_in_dim shape check and test
==
==================
7666c254;Matthew Johnson;2020-03-15 21:32:56 -0700;fix buggy broadcast_in_dim shapecheck test

==

tests/masking_test.py
==================
a73bdd5f;Matthew Johnson;2020-03-15 21:05:26 -0700;Merge pull request #2363 from jessebett/jet-prims
Primitive Rules for Higher-Order Derivatives (jet) Scoreboard
==
==================
94832f96;Roy Frostig;2020-03-15 20:29:11 -0700;add lax.broadcast_in_dim shape check and test
Operand dimensions must equal their corresponding dimensions in the broadcast shape.

==

jax/lax/lax.py
tests/lax_test.py
==================
a00e3986;Matthew Johnson;2020-03-15 12:00:44 -0700;remove scipy dep, fix dtype issue

==

jax/experimental/jet.py
tests/jet_test.py
==================
8d402d83;Matthew Johnson;2020-03-15 11:39:44 -0700;add copyright notice to jet.py

==

jax/experimental/jet.py
==================
ae921c7a;Matthew Johnson;2020-03-15 11:15:13 -0700;update changelog

==

docs/CHANGELOG.rst
==================
a7b3be71;Matthew Johnson;2020-03-15 10:49:48 -0700;move jet into jax.experimental

==

jax/api.py
jax/experimental/jet.py
jax/interpreters/taylor.py
jax/interpreters/xla.py
jax/lax/lax.py
tests/jet_test.py
==================
92a0b3d4;Matthew Johnson;2020-03-15 09:58:54 -0700;add basic pytree support to jet

==

jax/api.py
jax/interpreters/taylor.py
==================
668a1703;Matthew Johnson;2020-03-14 21:21:27 -0700;add jet tests, remove top-level files

==

jax/interpreters/taylor.py
jax/lax/lax.py
jet_nn.py
mac.py
tests/jet_test.py
==================
840797d4;Jacob Kelly;2020-02-29 14:37:20 -0500;refactor reduce_max jet rule

==

jax/lax/lax.py
==================
2c53b949;Jacob Kelly;2020-02-29 14:32:47 -0500;add tests
Co-authored-by: Jesse Bettencourt <jessebett@cs.toronto.edu>
Co-authored-by: Matthew Johnson <mattjj@csail.mit.edu>
Co-authored-by: David Duvenaud <duvenaud@cs.toronto.edu>

==

jet_nn.py
==================
b4d003d4;Jacob Kelly;2020-02-29 14:02:16 -0500;jet rule for log
Co-authored-by: Jesse Bettencourt <jessebett@cs.toronto.edu>
Co-authored-by: Matthew Johnson <mattjj@csail.mit.edu>
Co-authored-by: David Duvenaud <duvenaud@cs.toronto.edu>

==

jax/lax/lax.py
==================
30830dfc;Jacob Kelly;2020-02-29 13:30:14 -0500;linear rule for sub
Co-authored-by: Jesse Bettencourt <jessebett@cs.toronto.edu>

==

jax/lax/lax.py
==================
dcebe505;Jacob Kelly;2020-02-29 13:23:38 -0500;jet for reduce_max
Co-authored-by: Matthew Johnson <mattjj@csail.mit.edu>
Co-authored-by: Jesse Bettencourt <jessebett@cs.toronto.edu>
Co-authored-by: David Duvenaud <duvenaud@cs.toronto.edu>

==

jax/lax/lax.py
==================
3bcf02a1;Jacob Kelly;2020-02-28 20:50:03 -0500;Add gather rule
Co-authored-by: Matthew Johnson <mattjj@csail.mit.edu>
Co-authored-by: Jesse Bettencourt <jessebett@cs.toronto.edu>
Co-authored-by: David Duvenaud <duvenaud@cs.toronto.edu>

==

jax/lax/lax.py
==================
098aabef;Jacob Kelly;2020-02-28 20:40:47 -0500;fix typo

==

jax/lax/lax.py
==================
ddd52c47;Jacob Kelly;2020-02-28 13:18:11 -0500;adding div and linear prims
Co-authored-by: Jesse Bettencourt <jessebett@cs.toronto.edu>

==

jax/interpreters/xla.py
jax/lax/lax.py
==================
7adf9fe8;Matthew Johnson;2020-02-27 08:00:34 -0800;add more jet rules!
Co-authored-by: Jesse Bettencourt <jessebett@cs.toronto.edu>
Co-authored-by: Jacob Kelly <jacob.jin.kelly@gmail.com>
Co-authored-by: David Duvenaud <duvenaud@cs.toronto.edu>

==

jax/lax/lax.py
mac.py
==================
a21fdf86;Matthew Johnson;2020-02-20 08:43:40 -0800;more jet rules and tests
Co-authored-by: Jesse Bettencourt <jessebett@cs.toronto.edu>

==

jax/lax/lax.py
mac.py
==================
e84a6211;Matthew Johnson;2020-02-20 08:04:21 -0800;new jet implementation, with conv-based rules
Co-authored-by: Jesse Bettencourt <jessebett@cs.toronto.edu>
Co-authored-by: David Duvenaud <duvenaud@cs.toronto.edu>

==

jax/api.py
jax/interpreters/taylor.py
jax/lax/lax.py
mac.py
==================
47df7b95;Matthew Johnson;2020-03-14 12:33:14 -0700;change the xla representation of JAX's unit (#2416)
* change the xla representation of JAX's unit

Previously the representation of JAX's unit value (a sentinel /
placeholder) was an empty tuple, but by changing the representation to
something else we can further reduce our dependence on runtime tuples.

This commit makes the representation fairly easy to change. There are
three functions in xla.py that define the representation. Here are
versions that would keep the old XLA representation as an empty tuple:

```
def _make_unit(c): return c.Tuple()
def _make_abstract_unit(_): return xc.Shape.tuple_shape(())
def _device_put_unit(_, device):
  return xc.Buffer.make_tuple((), device, backend=xb.get_device_backend(device))
```

The new representation is as a trivial array. An alternative
representation would be nothing at all: we don't need to generate XLA
computations that have representations of JAX units. While that
alterntaive is probably the best choice, it seemed like it would require
a bit more refactoring/bookkeeping (e.g. to allow XLA computations to
have a smaller number of outputs than the corresponding JAX function),
and would also mean the XLA representation would be a step further
removed from the jaxpr representation. So I stuck with a trivial array
for now.

The mapping from JAX types to XLA types need not be invertible. However,
XLA translation rules currently don't take as arguments the
corresponding JAX types (abstract values), and there were a few cases
where we relied on checking whether an argument's XLA type was that of
an empty tuple so as to determine if we were effectively operating on a
JAX unit.

In particular, the AD-related primitive add_jaxvals_p could in principle
add two units, and get lowered to an XLA addition on the unit
representation. Previously, the translation rule for add_jaxvals_p
checked the XLA type so that adding two empty tuples didn't produce any
XLA operation; now it adds its inputs, and so if unit is represented as
a trivial array we could be inserting trivial scalar adds where we had
none before. However, if that case is ever possible, it doesn't come up
in our tests (which I checked by keeping the representation as an empty
tuple and then asserting an XLA tuple type is never seen by that
translation rule).

* add comment about JAX<->XLA array types assumption
==

jax/ad_util.py
jax/api.py
jax/dlpack.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
jax/lax/lax_control_flow.py
jax/lax_linalg.py
jax/random.py
==================
c41c4de5;Matthew Johnson;2020-03-13 15:15:55 -0700;lower fori_loop to scan when possible (#2414)
When a fori_loop specialized on trip count is to be evaluated, it's
preferable to generate a scan rather than a while_loop because the
former is reverse-mode differentiable while the latter is not. Otherwise
they're essentially the same; in particular, no extensive inputs/outputs
arise unless reverse-mode autodiff is applied.

Also fixes #2412.
==

jax/lax/lax_control_flow.py
tests/lax_control_flow_test.py
==================
271041b4;Peter Hawkins;2020-03-13 13:35:18 -0400;Update a regression test to test size-zero device to device transfers. (#2411)

==

tests/api_test.py
==================
7f0463e2;Matthew Johnson;2020-03-13 07:13:29 -0700;remove input shapes from params of some primitives (#2410)
Long, long ago, when JAX was first born, we realized that we couldn't
transpose this jaxpr:

  { lambda  ; a.
    let b = reduce_sum[ axes=(0,) ] a
    in b }

The problem was that the transpose of a reduce-sum is a broadcast, but
because jaxprs didn't have shape information available, we didn't know
what input shape to broadcast to!

Our hack was to have the primitives that required shape information for
transposition to acquire it into their parameters, so that we'd produce
jaxprs like this one:

  { lambda  ; a.
    let b = reduce_sum[ axes=(0,)
                        input_shape=(3,) ] a
    in b }

That's not only aesthetically unpleasant, but also it meant we were
limiting an (unused) capability of the system: ideally we should be able
to trace a reduce-sum jaxpr without specializing on shape information
(e.g. at the Unshaped level) and only require shape specialization for
transposition. (Good thing no one actually traces at Unshaped...)

But at long last @chr1sj0nes in #2299 added avals to jaxprs, so that
shape information (or whatever information with which the jaxpr was
specialized out of Python) is in the jaxpr itself. So we could finally
remove these shapes-in-params warts!

That's exactly what this commit does!

Co-authored-by: Roy Frostig <frostig@google.com>

Co-authored-by: Roy Frostig <frostig@google.com>
==

docs/notebooks/How_JAX_primitives_work.ipynb
jax/interpreters/ad.py
jax/lax/lax.py
jax/lax/lax_control_flow.py
jax/lax/lax_parallel.py
jax/lax_linalg.py
tests/api_test.py
==================
58feed2b;Skye Wanderman-Milne;2020-03-12 15:53:47 -0700;jax.lax.nextafter test fix. (#2408)
Fixes #2403.
==

tests/lax_test.py
==================
cf41f768;Peter Hawkins;2020-03-12 15:05:59 -0400;Add np.linalg and np.fft functions to documentation. (#2407)

==

docs/jax.numpy.rst
==================
61b430ee;George Necula;2020-03-12 10:59:30 +0100;Added more documentation for how to fix notebook build failures (#2404)

==

docs/developer.rst
docs/notebooks/README.md
==================
620bf430;Trevor Cai;2020-03-11 20:36:07 +0000;[remat] Change remat lowering to XLA::Conditional (#2391)
* [remat] Change remat lowering to XLA::Conditional

`jax.remat` creates rematerializing passes that don't have data dependencies on
the actual loss-computing forward pass. This means that the XLA scheduler was
free to schedule the remat forward pass before the loss-computing pass,
defeating the goal of saving accelerator memory with `jax.remat`.

In practice, it sometimes did for my workloads.

This change expresses the lowering of remat_call(f) as:
Conditional(true, inputs, f, inputs, dummy_f).

In the common case of `jax.grad(jax.remat(f))`, the content of the
lowered remat_call are both the forwards & backwards; that is, the
incoming cotangents are part of the args.

Additionally, Conditional (AFAIK) is un-inlineable in the sense that it
doesn't execute until all its inputs (e.g. cotangents!) are available.

Downsides:

- AFAICT, we can no longer interleave computation in/outside the
  rematerialized block.
- Potentially, lower performance. I do not observe this in my tests.

* provide no replication info for subcomputation params
==

jax/interpreters/xla.py
==================
2dfeaeb6;Daniel Johnson;2020-03-11 16:19:46 -0400;Allow zero tolerance for jax.test_util.tolerance (#2393)
Currently, if a user passes any falsy value to jax.test_util.tolerance,
it is changed to the default value. This makes sense when the value
passed is None, but not when the value passed is 0 (which indicates
a desired tolerance of exactly 0).

Disables failing tests for now.
==

jax/test_util.py
tests/lax_test.py
==================
cdf188af;Matthew Johnson;2020-03-11 09:42:25 -0700;add raises-exception notebook cell metadata (#2402)

==

docs/notebooks/Common_Gotchas_in_JAX.ipynb
==================
419961f9;Peter Hawkins;2020-03-11 09:57:04 -0400;Check for invalid shapes in broadcast_in_dim and fail gracefully.

==

jax/lax/lax.py
tests/lax_numpy_test.py
==================
ffa03403;Jordan Hoffmann;2020-03-11 00:53:43 +0000;Add jnp vs np out of bounds indexing to Sharp Bits nb (#2378)

==

docs/notebooks/Common_Gotchas_in_JAX.ipynb
==================
cfbdb65a;Matthew Johnson;2020-03-10 15:01:18 -0700;add register_pytree_node_class, fixes #2396 (#2400)
Co-authored-by: Stephan Hoyer <shoyer@google.com>

Co-authored-by: Stephan Hoyer <shoyer@google.com>
==

jax/tree_util.py
tests/tree_util_tests.py
==================
ebbcbad5;Matthew Johnson;2020-03-10 08:29:46 -0700;allow vmap in_axes to be a list, fixes #2367 (#2395)

==

jax/api.py
tests/api_test.py
==================
9fd69a04;Peter Hawkins;2020-03-10 10:51:09 -0400;Replace uses of ExecutePerReplica with ExecuteOnLocalDevices. (#2394)
ExecutePerReplica is deprecated, and ExecuteOnLocalDevices is now available via the minimum jaxlib version.
==

jax/interpreters/pxla.py
jax/interpreters/xla.py
==================
cc53aa95;Matthew Johnson;2020-03-10 06:59:54 -0700;skip new optix test on tpu (cf. #2350)

==

tests/optix_test.py
==================
5c3b4786;perolat;2020-03-10 14:40:38 +0100;Add a module to apply updates every k steps (and accumulate them otherwise) (#2350)

==

jax/experimental/optix.py
tests/optix_test.py
==================
863576c5;Stephan Hoyer;2020-03-09 13:21:30 -0700;jit lax_numpy.roll (#2392)
This was making tracing slow for code with lots of rolls.
==

jax/numpy/lax_numpy.py
==================
f3f0abb5;Ram Rachum;2020-03-09 22:06:12 +0200;Fix exception causes all over the codebase (#2376)
Co-authored-by: Peter Hawkins <phawkins@google.com>
==

jax/core.py
jax/experimental/loops.py
jax/interpreters/ad.py
jax/interpreters/batching.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
jax/lax/lax.py
jax/lax/lax_control_flow.py
jax/lib/__init__.py
jax/random.py
tests/parallel_test.py
tests/pmap_test.py
==================
ac6a313c;bddppq;2020-03-09 13:04:59 -0700;Fix ONNX mnist example (#2374)
* Fix ONNX mnist example

* use np to compute the shape; rename jax.numpy as jnp
==

examples/onnx2xla.py
==================
c52f32b5;George Necula;2020-03-09 20:42:08 +0100;Removed unused imports (#2385)
Also disabled a couple more linalg tests that crash on my Mac
==

jax/ad_util.py
jax/api.py
jax/core.py
jax/interpreters/batching.py
jax/interpreters/masking.py
jax/interpreters/parallel.py
jax/interpreters/partial_eval.py
jax/interpreters/pxla.py
jax/interpreters/sharded_jit.py
jax/interpreters/xla.py
jax/lax_linalg.py
jax/nn/functions.py
jax/numpy/linalg.py
jax/numpy/vectorize.py
jax/ops/scatter.py
jax/util.py
tests/linalg_test.py
==================
282225f6;George Necula;2020-03-09 20:41:01 +0100;Added some pytype annotations (#2386)
Tried to catch all uses of linear_util.WrappedFun
==

jax/api.py
jax/core.py
jax/interpreters/ad.py
jax/interpreters/batching.py
jax/interpreters/masking.py
jax/interpreters/parallel.py
jax/interpreters/partial_eval.py
jax/interpreters/pxla.py
jax/interpreters/sharded_jit.py
jax/interpreters/xla.py
jax/lax/lax_control_flow.py
jax/linear_util.py
==================
c53ae2c4;JL2718;2020-03-09 11:43:45 -0700;automatic detection of wheel version (#2373)

==

README.md
==================
411c8a4b;Peter Hawkins;2020-03-09 10:17:42 -0400;Update lnp -> jnp to fix test failure after merge. (#2389)

==

tests/lax_numpy_test.py
==================
8339511e;us;2020-03-09 17:07:12 +0300;Implement NumPy sorting routines. (#2318)
Implement `np.msort`.
Related issue: #2079
==

docs/jax.numpy.rst
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
25dd419c;Trevor Cai;2020-03-09 14:05:40 +0000;share rng and predicate between all foiled args (#2375)
This doesn't appear to be a performance disadvantage, and it makes
reading the HLO infinitely easier, as there's now only one pair of
RNG/constants per remat call.
==

jax/interpreters/xla.py
==================
a5daafd3;Winnie Xu;2020-03-09 10:04:23 -0400;update gitignore (#2361)

==

.gitignore
==================
0080c895;Chris Jones;2020-03-09 13:35:21 +0000;Fix a few type annotations in `api.py`. (#2387)

==

jax/api.py
==================
05e5ccfd;Lucas Theis;2020-03-09 14:08:32 +0100;Minor fix to docs which mentioned IOHW where it should be OIHW (#2381)

==

docs/notebooks/Common_Gotchas_in_JAX.ipynb
==================
1e7d13b5;Chris Jones;2020-03-09 09:14:23 +0000;Give `Var`s an `aval`. (#2299)

==

jax/abstract_arrays.py
jax/core.py
jax/interpreters/partial_eval.py
jax/lax/lax_control_flow.py
tests/core_test.py
==================
89dcfe67;George Necula;2020-03-09 10:08:56 +0100;Replace assertEquals with assertEqual (#2384)

==

tests/lax_numpy_test.py
==================
04a027b8;George Necula;2020-03-09 10:01:09 +0100;Replaced self.assertTrue(...===...) with assertEquals (#2383)
This was caught in internal presubmit tests
==

tests/lax_numpy_test.py
==================
c953ca2d;Peter Hawkins;2020-03-07 10:43:51 -0500;Rename np -> jnp and onp -> np in jax/scipy to match the standard JAX… (#2370)
* Rename np -> jnp and onp -> np in jax/scipy to match the standard JAX import convention.

* Fix missed `np` in norm.py.
==

jax/scipy/special.py
jax/scipy/stats/bernoulli.py
jax/scipy/stats/beta.py
jax/scipy/stats/cauchy.py
jax/scipy/stats/dirichlet.py
jax/scipy/stats/expon.py
jax/scipy/stats/gamma.py
jax/scipy/stats/laplace.py
jax/scipy/stats/multivariate_normal.py
jax/scipy/stats/norm.py
jax/scipy/stats/pareto.py
jax/scipy/stats/t.py
==================
61fca0d3;Peter Hawkins;2020-03-06 14:59:51 -0500;Rename `lnp` to `jnp` in tests. (#2369)
`jnp` is the preferred alias for jax.numpy, and we should be consistent.
==

tests/lax_numpy_indexing_test.py
tests/lax_numpy_test.py
==================
74faef18;Skye Wanderman-Milne;2020-03-06 10:32:15 -0800;Rename "NeurIPS 2019 JAX demo" to "JAX demo", as it's been presented elsewhere. (#2372)

==

cloud_tpu_colabs/JAX_demo.ipynb
cloud_tpu_colabs/README.md
==================
8e251e1f;Peter Hawkins;2020-03-06 10:56:29 -0500;Add pytype annotations to JAX API. (#2368)

==

jax/api.py
==================
efa0315c;Skye Wanderman-Milne;2020-03-05 16:21:19 -0800;[docs] Add docstring for jax.lax.tie_in (#2364)

==

jax/lax/lax.py
==================
a1fa6296;Skye Wanderman-Milne;2020-03-05 14:45:01 -0800;Document jax.device_put (#2366)

==

docs/jax.rst
jax/api.py
==================
eeffbca4;Peter Hawkins;2020-03-05 16:07:17 -0500;Add profiler documentation. (#2365)

==

docs/jax.profiler.rst
==================
64b1da9d;Peter Hawkins;2020-03-05 13:10:20 -0500;Updates to jax that were deferred until after jaxlib 0.1.40 became th… (#2362)
* Updates to jax that were deferred until after jaxlib 0.1.40 became the minimum version.
* Remove backward compatibility code.
* Use CustomCallWithLayout instead of CustomCall.

* Mention jaxlib version bump in changelog.

==

docs/CHANGELOG.rst
jaxlib/cuda_prng.py
jaxlib/cusolver.py
jaxlib/lapack.pyx
tests/array_interoperability_test.py
tests/lax_test.py
==================
ddd76b80;Peter Hawkins;2020-03-05 12:07:57 -0500;Add a jax.profiler module that exposes the new TensorFlow profiler in… (#2354)
* Add a jax.profiler module that exposes the new TensorFlow profiler integration.

* Fix documentation.

==

docs/jax.rst
jax/profiler.py
tests/profiler_test.py
==================
1006758b;Peter Hawkins;2020-03-05 09:25:16 -0500;Bump minimum jaxlib version to 0.1.40. (#2360)

==

.travis.yml
jax/lib/__init__.py
==================
73443d28;Peter Hawkins;2020-03-05 08:41:07 -0500;Update release notes for jaxlib 0.1.40. (#2359)

==

README.md
docs/CHANGELOG.rst
==================
7243ddf0;Peter Hawkins;2020-03-04 16:23:48 -0500;Bump XLA version. (#2353)

==

WORKSPACE
==================
9d61d4b6;Peter Hawkins;2020-03-04 14:49:11 -0500;Bump jaxlib version to 0.1.40. (#2352)
Update XLA version.
==

WORKSPACE
jaxlib/version.py
==================
013c01e6;Peter Hawkins;2020-03-04 11:35:52 -0500;Change psum to perform a single tuple AllReduce, rather than one AllR… (#2337)
* Change psum to perform a single tuple AllReduce, rather than one AllReduce per PyTree element.

* Fix papply tests by calling collective wrapper rather than calling bind directly.

* Add test for collectives with multiple different dtypes.

==

jax/interpreters/pxla.py
jax/interpreters/xla.py
jax/lax/lax_parallel.py
tests/pmap_test.py
==================
52a41311;Ram Rachum;2020-03-04 17:08:52 +0200;Fix exception causes in api.py (#2336)

==

jax/api.py
==================
1e61ba42;Matthew Johnson;2020-03-03 16:27:53 -0800;improve jax.nn.relu differentiation (#2342)

==

jax/nn/functions.py
tests/nn_test.py
==================
e7debd73;hadovanhasselt;2020-03-01 02:34:33 +0000;Replace jnp.clip_by_value with jnp.clip (#2339)
jnp.clip_by_value does not exist
==

jax/experimental/optix.py
==================
2d9caba3;msbauer;2020-02-29 00:06:38 +0000;Address Issue 2330 (#2331)
* fix issue 2330

* Update lax_numpy_test.py

* Update lax_numpy_test.py

* Update lax_numpy_test.py

Fixed error in naming convention jnp -> lnp; np -> onp

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
c1b0cfba;Peter Hawkins;2020-02-28 15:08:53 -0500;Fix LaxVmap test tolerances. (#2335)
The per-op tolerances weren't being used in the vmap tests.
==

tests/lax_test.py
==================
61a76014;Stephan Hoyer;2020-02-28 10:40:18 -0800;Recommend using pip for jaxlib more strongly in the dev guide (#2333)
Right now our developer guide suggests that it "may" work but it actually is
almost always the recommended choice.
==

docs/developer.rst
==================
0dfa9ef5;Jacob Kelly;2020-02-28 12:05:38 -0500;fix vjp odeint (#2321)

==

jax/experimental/ode.py
==================
ce9b0386;Daniel Suo;2020-02-27 14:43:55 -0500;Remove check comparing shift/axis and input dimensions in np.roll (#2327)

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
a473e5b6;Ron Weiss;2020-02-27 10:20:02 -0500;Reference deduped precision issue. (#2319)

==

cloud_tpu_colabs/README.md
==================
b21e7530;George Necula;2020-02-26 21:30:21 +0100;Added the optix.py documentation to RTD (#2312)
Issue: #2297
==

docs/developer.rst
docs/jax.experimental.optix.rst
docs/jax.experimental.rst
jax/experimental/optix.py
==================
276c79e9;Roy Frostig;2020-02-26 10:17:58 -0800;Merge pull request #2266 from google/lqr-bench
examples from control: MPC, ILQR, and LQR
==
==================
6da6df0a;Roy Frostig;2020-02-26 08:00:27 -0800;fix comment typo in MPC/LQR example

==

examples/control.py
==================
80630c03;George Necula;2020-02-26 09:25:23 +0100;Added .pytype cache to .gitignore (#2309)

==

.gitignore
==================
8028e4b5;Chris Jones;2020-02-24 21:20:41 +0000;Minor dedupe xla/pxla tracing code. (#2258)

==

jax/interpreters/partial_eval.py
jax/interpreters/pxla.py
jax/interpreters/sharded_jit.py
jax/interpreters/xla.py
==================
0416d2a5;Peter Hawkins;2020-02-24 07:31:46 -0800;Fix abstract evaluation rule for lax.top_k. (#2290)

==

jax/lax/lax.py
tests/lax_test.py
==================
f6e1d01f;joao guilherme;2020-02-24 06:04:02 +0900;JIT differentiate -> JIT compile (#2279)

==

docs/notebooks/How_JAX_primitives_work.ipynb
==================
cd5bcb36;Tom Hennigan;2020-02-23 18:19:23 +0000;Use int32 counters in optix. (#2239)

==

jax/experimental/optix.py
==================
89514f92;George Necula;2020-02-23 19:18:06 +0100;Moved CHANGELOG to docs (#2252)
* Moved CHANGELOG to docs

This puts the documentation also on RTD, with TOC.
Also changed its format to .rst, for consistency.
Added GitHub links to the change log.

* Actually add the CHANGELOG.rst

* Added reminder comments to the CHANGELOG.rst

==

CHANGELOG.md
README.md
docs/CHANGELOG.rst
docs/index.rst
==================
48f2a414;Stephan Hoyer;2020-02-23 10:10:39 -0800;Minor fixes to docs related to jax.numpy.vectorize (#2278)
- Show `numpy.jax.vectorize` explicitly in the JAX docs, rather than the
  original `numpy.vectorize.
- Updated regex for identifying function signatures in NumPy. This now correctly
  parses `np.vectorize` and `np.einsum`.
- Removed docs for `jax.experimental.vectorize`. There's still some good
  narrative content in the docstring but it should go somewhere else.
==

docs/jax.experimental.rst
docs/jax.experimental.vectorize.rst
docs/jax.rst
jax/numpy/lax_numpy.py
==================
f6d48373;Skye Wanderman-Milne;2020-02-22 23:10:13 -0800;Shrink nested pmap image in demo notebook. (#2293)

==

cloud_tpu_colabs/NeurIPS_2019_JAX_demo.ipynb
==================
7885b1d0;Skye Wanderman-Milne;2020-02-22 23:04:34 -0800;Add nested pmap image to demo notebook. (#2292)

==

cloud_tpu_colabs/NeurIPS_2019_JAX_demo.ipynb
cloud_tpu_colabs/images/nested_pmap.png
==================
80abdf0c;Peter Hawkins;2020-02-22 09:45:24 -0800;Unbreak build and update XLA. (#2289)
* raise minimum Bazel version to 2.0.0 to match TensorFlow.
* set --experimental_repo_remote_exec since it is required by the TF build.
* bump TF/XLA version.
* use the --config=short_logs trick from TF to suppress build warnings.
==

WORKSPACE
build/build.py
==================
8c3e3b2d;Stephan Hoyer;2020-02-21 14:34:23 -0800;Always jit scipy.ndimage.map_coordinates (#2286)
Fixes GH2282
==

jax/scipy/ndimage.py
==================
af0967fd;Peter Hawkins;2020-02-20 17:15:25 -0800;Add an experimental lax.top_k operator. (#2280)

==

jax/lax/lax.py
tests/lax_test.py
==================
8372a700;brett koonce;2020-02-20 18:44:21 -0600;tweak readme pmap imports (#2276)

==

README.md
==================
218a1711;Stephan Hoyer;2020-02-20 16:10:09 -0800;Add a jit around lax_linalg.lu_pivots_to_permutation (#2277)
I think this is almost always called inside a jit already, but adding this
results in more interprettable JAXprs.
==

jax/lax_linalg.py
==================
9cb8171f;Roy Frostig;2020-02-20 11:07:06 -0800;remove unused imports in MPC/LQR example

==

examples/control.py
==================
0a78c8c3;Skye Wanderman-Milne;2020-02-20 09:09:32 -0800;Update WORKSPACE to pick up TF grpc upgrade and cleanup.

==

WORKSPACE
==================
6e4ea4f7;George Necula;2020-02-20 13:43:53 +0100;Revert "add np.copy method to abstract arrays (#2257)" (#2272)
This reverts commit ae1214de74e9ec42da8ff813dab8577c6bd9231d.

This is only to test the internal pre-submits.
==

jax/api.py
jax/numpy/lax_numpy.py
tests/api_test.py
==================
4978e3c2;George Necula;2020-02-20 09:41:08 +0100;Disable linalg_test:testMatrix power on TPU (#2269)
Due to internal test failures (b/149870255)
==

tests/linalg_test.py
==================
b995787c;David Alexander;2020-02-19 22:33:42 -0800;Add "edge" support for pad (#2265)
* Internal refactoring of jax.numpy.pad for greater readability.

* Implement "edge" mode for pad

* Remove unneeded comment per discussion

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
ab327aca;Matthew Johnson;2020-02-19 21:57:04 -0800;fix unit handling in vmap of cond, fixes #2264 (#2268)

==

jax/lax/lax_control_flow.py
tests/lax_control_flow_test.py
==================
f02578ea;Roy Frostig;2020-02-19 19:55:47 -0800;set tolerances and toggle dtype checks in MPC/LQR example tests

==

examples/control_test.py
==================
cfb5666a;Skye Wanderman-Milne;2020-02-19 14:58:26 -0800;Update WORKSPACE to setup upstream dependencies. (#2267)
This is necessary as of https://github.com/tensorflow/tensorflow/commit/f396035891b0938364ea247a7dd243a147930c6e.

Many thanks to @lezh for this fix!
==

WORKSPACE
==================
f1af9893;Roy Frostig;2020-02-18 18:14:46 -0800;move MPC/LQR example to examples directory

==

benchmarks/__init__.py
examples/control.py
examples/control_test.py
==================
e8a41eb1;Roy Frostig;2020-02-18 18:09:10 -0800;guarded looping via lax.scan in MPC/LQR example

==

benchmarks/control.py
==================
a86e73d2;Roy Frostig;2020-02-18 18:08:19 -0800;python3-compatible argument unpacking in MPC/LQR example

==

benchmarks/control.py
==================
3a9ed6e0;Roy Frostig;2019-11-11 17:25:52 -0800;model-predictive control trajectory optimizer

==

benchmarks/benchmarks_test.py
benchmarks/control.py
==================
d560a06b;Roy Frostig;2019-10-18 15:33:33 -0700;non-linear solver by iterative local LQR approximation

==

benchmarks/benchmarks_test.py
benchmarks/control.py
==================
8be270d3;Roy Frostig;2019-10-08 17:18:28 -0700;LQR solver and unrolling for control benchmark

==

benchmarks/benchmarks_test.py
benchmarks/control.py
==================
485c7b21;Roy Frostig;2019-10-08 16:23:49 -0700;trajectory unrolling for control benchmark

==

benchmarks/__init__.py
benchmarks/benchmarks_test.py
benchmarks/control.py
==================
96b66ac9;Matthew Johnson;2020-02-19 12:37:59 -0800;fix typo in autodiff cookbook

==

docs/notebooks/autodiff_cookbook.ipynb
==================
08eb0ee0;George Necula;2020-02-19 16:03:10 +0100;Disable newly added test on TPU (no float16) (#2262)
Added in #2259
==

tests/nn_test.py
==================
eda91a04;Trevor Cai;2020-02-19 06:04:20 +0000;Use input dtype for constants in jax.nn.gelu (#2259)

==

jax/nn/functions.py
tests/nn_test.py
==================
6cceb2c7;Stephan Hoyer;2020-02-18 17:41:38 -0800;Faster gradient rules for {numpy,scipy}.linalg.solve (#2220)
Fixes GH1747

The implicit function theorem (via `lax.custom_linear_solve`) lets us
_directly_ define gradients for linear solves, in contrast to the current
implementations of gradient for `solve` which rely upon differentiating matrix
factorization.

In **theory**, JVPs of `cholesky` and `lu` involve the equivalent of ~3 dense
matrix-matrix multiplications, which makes them rather expensive: time
`O(n**3)`. In contrast, with `custom_linear_solve` we don't need to
differentiate the factorization. The JVP and VJP rules for linear solve (for a
single right-hand-side vector) now only use matrix-vector products and
triangular solves, which is time `O(n**2)`. We should also have reduced memory
usage, because we don't need to save any intermediate outputs.

In **practice**, these new gradient rules seem to make solves with large
arrays ~3x faster:

    from functools import partial
    import jax.scipy as jsp
    from jax import lax
    import jax.numpy as np
    import numpy as onp
    import jax

    def loss(solve):
      def f(a, b):
        return solve(a, b).sum()
      return f

    rs = onp.random.RandomState(0)
    N = 500
    K = 1
    a = rs.randn(N, N)
    a = jax.device_put(a.T @ a + 0.1 * np.eye(N))
    b = jax.device_put(rs.randn(N, K))

    # general matrix solve
    grad = jax.jit(jax.grad(loss(np.linalg.solve)))
    grad(a, b).block_until_ready()
    %timeit grad(a, b).block_until_ready()
    # N=500, K=1: 11.4 ms -> 3.63 ms

    # positive definite solve
    grad = jax.jit(jax.grad(loss(partial(jsp.linalg.solve, sym_pos=True))))
    grad(a, b).block_until_ready()
    %timeit grad(a, b).block_until_ready()
    # N=500, K=1: 9.22 ms -> 2.83 ms
==

jax/numpy/linalg.py
jax/scipy/linalg.py
==================
ae1214de;Matthew Johnson;2020-02-18 12:39:03 -0800;add np.copy method to abstract arrays (#2257)
* add np.copy method to abstract arrays

fixes #2248

* make device_get use onp.asarray, not .copy()

==

jax/api.py
jax/numpy/lax_numpy.py
tests/api_test.py
==================
b6e83411;Peter Hawkins;2020-02-17 11:24:03 -0800;Improve developer documentation. (#2247)
Add Python version test to build.py.
==

build/build.py
docs/developer.rst
==================
81e30582;George Necula;2020-02-17 19:01:17 +0100;Merge pull request #2246 from gnecula/bug_fix3
Revert "Allow shapecheck of PixelCNN++ (#2017)"
==
==================
161a7822;George Necula;2020-02-17 18:25:07 +0100;Added test case for indexing out of bounds

==

tests/lax_numpy_indexing_test.py
==================
ceab1e3e;George Necula;2020-02-17 17:43:29 +0100;Revert "Allow shapecheck of PixelCNN++ (#2017)"
This reverts commit 8f538f4e25d039a76d99af97374e7ece8c1c63a3.

Issue: #2245

==

jax/api.py
jax/interpreters/masking.py
jax/interpreters/xla.py
jax/lax/lax.py
jax/lax/lax_control_flow.py
jax/numpy/lax_numpy.py
jax/random.py
tests/masking_test.py
==================
bf784a44;George Necula;2020-02-17 16:37:06 +0100;Merge pull request #2244 from mathisgerdes/master
Correct sign mistake in complex autodiff docs
==
==================
fcd949b6;George Necula;2020-02-17 16:01:10 +0100;Added blank line to autodiff cookbook to trigger an enumeration

==

docs/notebooks/autodiff_cookbook.ipynb
==================
88677b1f;George Necula;2020-02-17 15:52:52 +0100;Merge pull request #2233 from gnecula/bug_fix3
Expanded the error messages due to re-using tracers saved in global s…
==
==================
3de6df65;George Necula;2020-02-17 15:52:11 +0100;Merge pull request #2234 from sharadmv/patch-2
Set `call_p.multiple_results` to True
==
==================
3a0690fa;Mathis Gerdes;2020-02-17 14:28:56 +0100;Correct sign mistake in complex autodiff docs.

==

docs/notebooks/autodiff_cookbook.ipynb
==================
ca6df306;Tom Hennigan;2020-02-15 18:32:00 +0000;Add `jax.nn.one_hot(x, num_classes, dtype)`. (#2240)

==

jax/nn/functions.py
tests/nn_test.py
==================
faa3e188;George Necula;2020-02-15 12:11:17 +0100;Merge pull request #2238 from gnecula/documentation
Fixed the name of the excluded notebook
==
==================
42bf313f;George Necula;2020-02-15 12:10:30 +0100;Fixed the name of the excluded notebook
Issue: #2236

==

docs/conf.py
==================
5d323925;George Necula;2020-02-15 12:06:49 +0100;Merge pull request #2237 from gnecula/documentation
Temporarily disable XLA_in_Python notebook, pending fixing of bug
==
==================
1c6cd254;George Necula;2020-02-15 12:03:40 +0100;Temporarily disable XLA_in_Python notebook, pending fixing of bug
Issue: #2236

==

docs/conf.py
==================
a76bf33b;George Necula;2020-02-15 11:45:29 +0100;Merge pull request #2235 from gnecula/documentation
Removed a couple of slow notebooks from RTD auto-rendering.
==
==================
370558de;George Necula;2020-02-15 11:43:10 +0100;Removed a couple of slow notebooks from RTD auto-rendering.
Trying to address the timeouts in RTD rendering.

Also fixed bad itemized list in autodiff cookbook, and a few minor warnings:
Issue: #2092

==

docs/conf.py
docs/developer.rst
docs/jaxpr.rst
docs/notebooks/autodiff_cookbook.ipynb
==================
b92656db;Sharad Vikram;2020-02-14 23:29:33 -0800;Set `call_p.multiple_results` to True.

==

jax/core.py
==================
deb21ef1;George Necula;2020-02-15 06:35:49 +0100;Expanded the error messages due to re-using tracers saved in global state.
Previously these errors were raising Exception (as other internal errors),
but these errors may arise out of mis-use of tracers.

==

jax/core.py
jax/experimental/loops.py
jax/interpreters/partial_eval.py
tests/api_test.py
==================
18420936;Skye Wanderman-Milne;2020-02-14 18:09:52 -0800;_scatter_jvp bug fix (#2231)

==

jax/interpreters/masking.py
jax/lax/lax.py
==================
9b362380;Peter Hawkins;2020-02-14 15:33:20 -0500;Fix sha256 sum for XLA release. (#2230)

==

WORKSPACE
==================
71adf8cf;Peter Hawkins;2020-02-14 15:20:06 -0500;Update XLA. (#2229)
.
==

WORKSPACE
==================
33f8600a;Peter Hawkins;2020-02-14 15:14:38 -0500;Disable PRED dlpack test. (#2227)

==

tests/array_interoperability_test.py
==================
2a6e60fd;Skye Wanderman-Milne;2020-02-14 10:06:27 -0800;Bump jaxlib version in README to 0.1.39

==

README.md
==================
6d0d6fd6;Colin;2020-02-14 11:04:20 -0500;Docstring typo (#2228)

==

jax/random.py
==================
43ee9175;Alexander Botev;2020-02-14 15:45:26 +0000;Adding `broadcast_argnums` to `pmap` for allowing similar behaviour t… (#1786)
* Adding `static_argnums` to `pmap` for similar behaviour to `static_argnums` of `jit`.

* Removed check for ShardedDeviceArray

* Final clean up and rename.

==

CHANGELOG.md
jax/api.py
tests/pmap_test.py
==================
8f538f4e;Julius Kunze;2020-02-14 15:59:05 +0100;Allow shapecheck of PixelCNN++ (#2017)
* Allow shapecheck of indexing, slicing, broadcast_to, reshape, random.uniform, iota, simple cases of split

* Fix dynamic slicing

* Fix issue with float64.__index__()

* Fix np.arange with float size, _try_canonicalize_shape

* Cleanup: Make methods to create Poly internal (only use in Poly / shape spec parsing)

* Fix testReshapeWithUnusualShapes (error message)

* Fix syntax for python 3.6

* Remove Poly.__index__

* Fix tests

* Split up masking.py

* Cleanup masking

* Cleanup

* Use abstract_eval for shapecheck, remove ShapeCheckTrace(r)

* Remove shape_rules, fix test

* Remove shapes.py, move code to abstract_arrays.py / api.py

* Remove safe_map/zip, is_instance from abstract_arrays, test + fix Poly hash, minimize import diff

* Add missing shapecheck_test.py

* Cleanup, minimize changes

* Minimize import diff

* Minor

* Allow shapecheck of np.where

* Fix np.where

* Simplify gather to allow retightening type assertion in ConcreteArray

* Remove unused imports

* Make import style consistent

* Remove is_polymorphic, special cases in sampling, split, where.

* Move back Poly, _parse_shape_spec into masking.py to simplify diff

* Move back ShapeTest into masking_test.py to simplify diff

* Minor reverts to further simplify diff

* Fix tests

* Minimize diff

* Restore copyright, cleanup imports in masking.py

* Merge branch 'master' of https://github.com/google/jax into shapecheck-pcnn

# Conflicts:
#	jax/api.py
#	jax/numpy/lax_numpy.py

==

jax/api.py
jax/interpreters/masking.py
jax/interpreters/xla.py
jax/lax/lax.py
jax/lax/lax_control_flow.py
jax/numpy/lax_numpy.py
jax/random.py
tests/masking_test.py
==================
938336e0;George Necula;2020-02-14 07:23:47 +0100;Merge pull request #2216 from gnecula/documentation
Added the first draft of the Jaxpr documentation.
==
==================
25f8fb0d;George Necula;2020-02-14 07:23:09 +0100;One last small fix to the documentation

==

jax/interpreters/batching.py
==================
2ff70199;Skye Wanderman-Milne;2020-02-13 18:09:53 -0800;Update WORKSPACE

==

WORKSPACE
==================
89edd5ea;Skye Wanderman-Milne;2020-02-13 16:05:13 -0800;Update WORKSPACE

==

WORKSPACE
==================
e9369746;Sharad Vikram;2020-02-13 13:55:19 -0800;Make `core.call_p` a call primitive. (#2223)

==

jax/core.py
==================
983f6fe8;Scott Linderman;2020-02-13 07:31:54 -0800;Fix minor bug in bernoulli.pmf (#2221)
np.exp(pmf(...)) -> np.exp(logpmf(...))
==

jax/scipy/stats/bernoulli.py
==================
0ba10b3c;George Necula;2020-02-13 12:22:24 +0100;Merge pull request #2212 from j-towns/test-prng-consistency
Prefix PRNG Part 1: test for reproducible PRNG across JAX versions
==
==================
20dbc622;George Necula;2020-02-13 09:28:01 +0100;Updated docstrings based on review comments

==

docs/conf.py
docs/jaxpr.rst
jax/core.py
jax/interpreters/batching.py
==================
aca7bcce;Stephan Hoyer;2020-02-12 17:05:18 -0800;Consolidate LU solve logic from scipy/numpy in lax_linalg.lu_solve (#2144)
* Consolidate LU solve logic from scipy/numpy in lax_linalg.lu_solve

This single implementation supports broadcasting like NumPy in both the NumPy
and SciPy interfaces to LU solve, even though only original NumPy supports
broadcasting.

This change is technical backwards incompatible in the SciPy wrapper, which
previously supported adding extra dimensions to the end of `b`, e.g.,
`b.shape == (8, 4, 2)` when `a.shape == (8, 8)`. There was a testcase for this,
but it isn't documented in either JAX or SciPy.

* fix recursive import

* Use np.vectorize instead of experimental.vectorize

==

jax/lax_linalg.py
jax/numpy/linalg.py
jax/scipy/linalg.py
tests/linalg_test.py
==================
00140f07;Stephan Hoyer;2020-02-12 14:09:37 -0800;Add jax.numpy.vectorize (#2146)
* Add jax.numpy.vectorize

This is basically a non-experimental version of the machinery in
`jax.experimental.vectorize`, except:
- It adds the `excluded` argument from NumPy, which works just like
  `static_argnums` in `jax.jit`.
- It doesn't include the `axis` argument yet (which NumPy doesn't have).

Eventually we might want want to consolidate the specification of signatures
with signatures used by shape-checking machinery, but it's nice to emulate
NumPy's existing interface, and this is already useful (e.g., for writing
vectorized linear algebra routines).

* Add deprecation warning to jax.experimental.vectorize

* improve implementation

==

docs/jax.rst
jax/experimental/vectorize.py
jax/numpy/__init__.py
jax/numpy/vectorize.py
tests/lax_numpy_vectorize_test.py
==================
bf91ebf6;Skye Wanderman-Milne;2020-02-12 09:57:54 -0800;Return error number in build.py on bad bazel version. (#2218)
This prevents our build scripts from continuing on error.
==

build/build.py
==================
96a65de6;Skye Wanderman-Milne;2020-02-12 09:49:33 -0800;Try downloading bazel before using pre-installed bazel. (#2217)
This ensures we're using the right bazel version.
==

build/build.py
==================
a5c3468c;George Necula;2020-02-10 11:40:05 +0100;Added the first draft of the Jaxpr documentation.
This replaces the previous Google Doc version, and is now
updated with the latest changes in Jaxpr.

==

docs/conf.py
docs/index.rst
docs/jax.dlpack.rst
docs/jax.rst
docs/jax_internal_api.rst
docs/jaxpr.rst
docs/modules.rst
jax/api.py
jax/core.py
jax/interpreters/batching.py
jax/test_util.py
jax/tree_util.py
tests/api_test.py
==================
c6b65c0a;Skye Wanderman-Milne;2020-02-11 18:58:28 -0800;Bump jaxlib version to 0.1.39 and update WORKSPACE.

==

WORKSPACE
jaxlib/version.py
==================
7ca43f0e;Matthew Johnson;2020-02-11 15:56:53 -0800;more nonlinear evaluation in backward_pass.py (#2214)
* more nonlinear evaluation in backward_pass.py

fixes #2180

* add tests, fix #1963 by not raising error eagerly

==

jax/interpreters/ad.py
jax/lax/lax_control_flow.py
tests/api_test.py
==================
5e77789a;Skye Wanderman-Milne;2020-02-11 13:42:11 -0800;Update Cloud TPU email address to jax-tpu@googlegroups.com

==

cloud_tpu_colabs/README.md
==================
e41e2435;Matthew Johnson;2020-02-11 13:10:53 -0800;fix multi-device error messages (#2213)
* fix multi-device error messages, travis tests

* don't run multi-device tests on travis (segfaults)

* fix typo

==

.travis.yml
jax/interpreters/xla.py
==================
9e6fe64a;Matthew Johnson;2020-02-11 07:21:17 -0800;bump version and update changelog for pypi

==

CHANGELOG.md
jax/version.py
==================
9797ea24;Tom Hennigan;2020-02-11 14:11:48 +0000;Implement size/ndim/__len__/repr/str/eq/hash for ShapeDtypeStruct. (#2206)

==

jax/api.py
tests/api_test.py
==================
c999a482;Jamie Townsend;2020-02-10 18:23:19 +0000;Test for PRNG consistency accross JAX versions

==

tests/random_test.py
==================
fb7e48f7;George Necula;2020-02-11 10:47:55 +0100;Merge pull request #2176 from gnecula/simple_jaxpr2
Simplify Jaxpr: remove the bound_subjaxpr field, all subjaxprs are in…
==
==================
f4b946ef;George Necula;2020-02-11 10:25:29 +0100;Merge pull request #2199 from sharadmv/patch-1
Fix inconsistent indentation in `JaxprTrace.default_process_primitive`.
==
==================
20f9230f;George Necula;2020-02-05 15:38:25 +0100;Simplify Jaxpr: remove the bound_subjaxpr field, all subjaxprs are in params.
The goal is to make the Jaxpr language more uniform: all higher-order
primitives carry sub-Jaxprs that are part of the parameters, and they
are all called xxx_jaxpr. As a side-effect, some code is simplified
(e.g., the code that searches for sub-jaxprs).

For now the code assumes that all the `call` (final-style) primitives
carry exactly one subjaxpr with the parameter name `call_jaxpr`. These
primitives are still processed differently in the internal code, but
there is no reason any external consumer of a Jaxpr needs to know this.

==

CHANGELOG.md
jax/core.py
jax/interpreters/ad.py
jax/interpreters/partial_eval.py
jax/interpreters/pxla.py
jax/interpreters/sharded_jit.py
jax/interpreters/xla.py
jax/test_util.py
tests/api_test.py
tests/linalg_test.py
==================
28e802c6;Anselm Levskaya;2020-02-10 16:39:27 -0800;Fix Gotchas notebook regarding control flow differentiation. (#2194)

==

docs/notebooks/Common_Gotchas_in_JAX.ipynb
==================
f6bd0a79;George Necula;2020-02-10 20:50:31 +0100;Merge pull request #2205 from gnecula/bug_fix
Removed copyright from third-party/numpy
==
==================
dff64e02;George Necula;2020-02-10 19:05:11 +0100;Fixed link to Google 3rd party OSS components

==

jax/third_party/README.md
==================
4c682b46;Tom Hennigan;2020-02-10 16:40:36 +0000;Add missing sources to jax build. (#2208)

==

jax/BUILD
==================
e9d06ecf;Peter Hawkins;2020-02-10 11:14:38 -0500;Reenable convolution gradient tests on TPU that now pass. (#2207)

==

tests/lax_test.py
==================
f3e9bef3;George Necula;2020-02-10 14:28:41 +0100;Removed copyright code from third-party/numpy

==

jax/third_party/README.md
jax/third_party/__init__.py
jax/third_party/numpy/__init__.py
jax/third_party/numpy/linalg.py
==================
3e470af6;George Necula;2020-02-10 12:52:32 +0100;Merge pull request #2204 from gnecula/bug_fix
Disable linalg_test.testCond.
==
==================
e81024f5;George Necula;2020-02-10 12:49:58 +0100;Disable linalg_test.testCond.
Issue: 2203

This test was added in #2125 but is failing in internal tests.

==

tests/linalg_test.py
==================
e6f50dcb;George Necula;2020-02-10 12:20:24 +0100;Merge pull request #2202 from gnecula/bug_fix
Added License to new files
==
==================
0b313428;George Necula;2020-02-10 12:18:39 +0100;Added License to new files

==

jax/third_party/__init__.py
jax/third_party/numpy/__init__.py
jax/third_party/numpy/linalg.py
==================
76d77bfc;Sharad Vikram;2020-02-09 21:06:37 -0800;Fix inconsistent indentation in `JaxprTrace.default_process_primitive`.

==

jax/interpreters/partial_eval.py
==================
aa0ca270;Guillem Orellana Trullols;2020-02-09 23:35:09 +0100;Implementation of np.linalg.tensorsolve. (#2119)
* Tensorsolve implementation

* Tests working for tensorsolve #1999

* Moved tensorsolve to third party directory

==

jax/numpy/linalg.py
jax/third_party/numpy/linalg.py
tests/linalg_test.py
==================
baf45f2c;Jonathan Terhorst;2020-02-09 17:30:54 -0500;Fix expm(zeros((n, n))) == NaN. (#2131) (#2192)
* Fix expm(zeros((n, n)) == NaN. (#2131)

* update tests based on @sriharikrishna review

==

jax/scipy/linalg.py
tests/linalg_test.py
==================
051d7b89;lanctot;2020-02-08 13:11:42 -0500;Fix broken link in README (#2196)

==

README.md
==================
5c943886;Matthew Johnson;2020-02-07 14:25:03 -0800;fix cond batching bug reading axis size (#2193)

==

jax/lax/lax_control_flow.py
==================
a0e1804e;StephenHogg;2020-02-08 07:20:04 +1100;Implementation of np.linalg.{cond, tensorinv} (#2125)
* add np.linalg.cond in a third_party module

* remove unnecessary type maps

* rename cond.py to linalg.py for consistency

* shift LICENSE to correct directory; formatting changes; completed testing

* Add implementation and testing for tensorinv

* fix tests for tensorinv to stop build stalling

* blank __init__.py; add extra testing for cond; remove index assignments

* jax.lax.cond is breaking on jax.numpy.linalg.norm

* fix control flow issues; update tests to use curried functions

* clean up imports; remove commented code

* remove control flow from tests; remove unneeded functions

==

jax/numpy/linalg.py
jax/third_party/__init__.py
jax/third_party/numpy/LICENSE
jax/third_party/numpy/__init__.py
jax/third_party/numpy/linalg.py
tests/linalg_test.py
==================
be5b24fa;Du Phan;2020-02-07 12:49:50 -0500;relax the ndim>=1 condition of tensordot (#2191)
* relax the ndim condition of tensordot

* add test for scalar input with axes=0

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
2e8798dd;Peter Hawkins;2020-02-06 21:29:01 -0500;Use 64-bit integers for indexing if any tensor dimension exceeds 2^31 elements. (#2182)

==

jax/numpy/lax_numpy.py
==================
e1405204;Matthew Johnson;2020-02-06 17:19:54 -0800;make pmap inside of eager scan work, fixes #2018 (#2183)
* make pmap inside of eager scan work, fixes #2018

Co-authored-by: Sharad Vikram <sharadmv@google.com>

* Ensure AxisEnv is instantiated with tuples (#2186)

Co-authored-by: Sharad Vikram <sharad.vikram@gmail.com>

==

jax/interpreters/pxla.py
jax/interpreters/xla.py
jax/lax/lax.py
jax/lax/lax_control_flow.py
tests/pmap_test.py
==================
86984b37;George Necula;2020-02-06 18:17:04 +0100;Merge pull request #2169 from gnecula/bug_fix
Disabled tests known to fail on Mac, and optionally slow tests.
==
==================
b79c7948;George Necula;2020-02-06 17:27:46 +0100;Removed dependency on distutils.strtobool

==

jax/api.py
jax/config.py
jax/interpreters/xla.py
jax/numpy/lax_numpy.py
jax/test_util.py
==================
4582e4ed;George Necula;2020-02-06 17:13:37 +0100;Updates based on code reviews

==

tests/linalg_test.py
==================
8407a65e;George Necula;2020-02-06 09:45:33 +0100;Merge pull request #2167 from gnecula/simple_jaxpr
Simplify bound_subjaxprs.
==
==================
bbe31335;George Necula;2020-02-06 09:44:34 +0100;Fixed pytype complaint

==

jax/interpreters/partial_eval.py
==================
0045ed67;George Necula;2020-02-05 13:55:59 +0100;Fix caching bug.
This was a very tricky bug. The compilation caching keys depend on
many pieces of the transformation state, including among other
things, the pointer-value of the Jaxpr. Since in the previous
commit I have added a `convert_constvars_jaxpr` call, every time
that one ran, it produces the same semantic Jaxpr but a different
pointer value, which was breaking caching.

The fix is to cache the `convert_constvars_jaxpr`.

==

jax/interpreters/partial_eval.py
==================
2d3cde3f;George Necula;2020-02-05 11:08:21 +0100;Simplify the translation rules to not take constant values

==

jax/interpreters/ad.py
jax/interpreters/pxla.py
jax/interpreters/sharded_jit.py
jax/interpreters/xla.py
==================
ae3003e9;George Necula;2020-02-03 20:58:56 +0100;Simplify bound_subjaxprs.
Before, bound_subjaxprs was a tuple (0 or 1 values) of
a pair of a Jaxpr and its constant values. Now we close up all such Jaxprs
such that they do not take constvars and their constant values are part of the
arguments.

We also rename bound_subjaxprs to bound_subjaxpr (an optional Jaxpr)

This is first part of a simplification. In a subsequent PR I will move
the bound_subjaxpr into params, as for most higher-order primitives.

==

jax/core.py
jax/experimental/loops.py
jax/interpreters/ad.py
jax/interpreters/partial_eval.py
jax/interpreters/xla.py
jax/lax/lax_control_flow.py
jax/test_util.py
tests/api_test.py
==================
13316f35;Skye Wanderman-Milne;2020-02-05 14:42:47 -0800;Fix type error in partial_eval.py. (#2171)

==

jax/interpreters/partial_eval.py
==================
b2ef5bc0;Pavel Sountsov;2020-02-05 10:10:33 -0800;Canonicalize the shape in the wrapper functions in random.py. (#2165)
* Canonicalize the shape in the wrapper functions in random.py.

This lets the user be more sloppy in using numpy arrays and statically
known DeviceArrays for shapes, and still hit the jit cache. When they
are not, the error is improved.

* Fix some errors.

* No need for the Poly workaround.

* Bypass canonicalization for None shapes in random.py.

==

jax/abstract_arrays.py
jax/lax/lax.py
jax/random.py
tests/random_test.py
==================
b18a4d85;George Necula;2020-02-05 17:35:46 +0100;Disabled tests known to fail on Mac, and optionally slow tests.
Issue: #2166

Added JAX_SKIP_SLOW_TESTS environment variable to skip tests known
to be slow.

==

CHANGELOG.md
docs/developer.rst
jax/test_util.py
tests/lax_control_flow_test.py
tests/lax_test.py
tests/linalg_test.py
tests/nn_test.py
==================
d01210e9;George Necula;2020-02-05 03:19:18 +0100;Merge pull request #1959 from gnecula/no_freevars
An attempt to remove freevars from JAXPR.
==
==================
862a1d59;George Necula;2020-02-04 22:27:09 +0100;Moved the mapped_invars parameter setting to the process_map

==

jax/interpreters/partial_eval.py
==================
ddc83e09;Lukas Prediger;2020-02-04 18:38:38 +0200;Added dtype arg for NN initializer factory methods (#2034)
* Added dtype arg for NN initializer factory methods

Initializer factories in jax/nn/initializers.py (such as
uniform(), normal(), glorot_normal(), etc) now have
an optional `dtype` argument.

The value passed in that argument becomes the
default value for the same `dtype` argument
of the initializer function returned by the factory.

* fixed failed test for delta_orthogonal in d12cdc47

==

jax/nn/initializers.py
tests/nn_test.py
==================
4080a1c2;Jonas Adler;2020-02-04 15:24:10 +0000;Add np.fft.fftshift/ifftshift (#1850)

==

jax/numpy/fft.py
tests/fft_test.py
==================
272620e6;George Necula;2020-02-04 10:22:54 +0100;Added note to CHANGELOG.md

==

CHANGELOG.md
==================
ffc55ee6;Anselm Levskaya;2020-02-04 00:48:10 -0800;Update linspace edgecase to match numpy fix. (#2162)
* Update linspace edgecase to match numpy fix.

* only test fixed linspace behavior against newer numpy

* remove unneeded version pkg

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
b19f7e93;Skye Wanderman-Milne;2020-02-03 19:07:05 -0800;WIP sharded_jit implementation (#2158)

==

jax/interpreters/sharded_jit.py
==================
7404e88b;Skye Wanderman-Milne;2020-02-03 18:03:54 -0800;Adjust scipy_stats_test.py tolerance.

==

tests/scipy_stats_test.py
==================
2d0b8c2c;Stephan Hoyer;2020-02-03 18:02:45 -0800;Fix precision in triangular solve batching test for TPUs (#2159)

==

tests/linalg_test.py
==================
a955fd9d;George Necula;2020-02-03 19:57:08 +0100;Updated notebook that refered to freevars

==

docs/notebooks/Writing_custom_interpreters_in_Jax.ipynb
==================
4f5987cc;George Necula;2020-01-07 13:11:32 -0800;Simplify Jaxpr: remove freevars.
Freevars played a very small role, and they can be folded with
the invars. This simplifies the Jaxpr data structure.We remove
the `freevars` field from Jaxpr and from the bound_subjaxprs.

The only non-trivial change is for xla_pmap, where we need
to carry one extra parameter `mapped_invars` with a bitmap
to encode which invars are mapped and which are broadcast.
Previously, the freevars were broadcast.

==

jax/api.py
jax/core.py
jax/interpreters/ad.py
jax/interpreters/partial_eval.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
jax/lax/lax.py
jax/lax/lax_control_flow.py
jax/test_util.py
tests/api_test.py
==================
3c9ae5e2;Peter Hawkins;2020-02-03 12:44:57 -0500;Add jax.scipy.stats.logistic to documentation. (#2149)

==

docs/jax.scipy.rst
==================
0b1d2fc3;Peter Hawkins;2020-02-03 12:44:46 -0500;Avoid accidental type promotion in gamma sampler gradient. (#2150)
Reformat gamma sampler to use 2 space indent, consistent with the rest of JAX.
==

jax/random.py
tests/random_test.py
==================
0644f5c5;Stephan Hoyer;2020-02-03 09:27:03 -0800;Better batching rule for triangular_solve (#2138)
* Better batching rule for triangular_solve

Now, if only the right hand side argument `b` is batched, we leverage
triangular solve's builtin batching for handling multiple right-hand-side
vectors.

This makes the performance of `vmap` over only the second argument of linear
solves equivalent to relying on builtin batching::

    rs = onp.random.RandomState(0)
    a = rs.randn(500, 500) + 0.1 * np.eye(500)
    b_mat = jax.device_put(rs.randn(500, 10))
    solve1 = jax.jit(np.linalg.solve)
    solve2 = jax.jit(jax.vmap(np.linalg.solve, in_axes=(None, 1), out_axes=1))

Before::

    In [6]: %timeit jax.device_get(solve1(a, b_mat))
    3.88 ms ± 293 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)

    # 8x slower :(
    In [9]: %timeit jax.device_get(solve2(a, b_mat))
    23.5 ms ± 1.33 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)

Now::

    In [2]: %timeit jax.device_get(solve1(a, b_mat))
    3.76 ms ± 304 µs per loop (mean ± std. dev. of 7 runs, 1 loop each)

    # same speed :)
    In [3]: %timeit jax.device_get(solve2(a, b_mat))
    3.72 ms ± 296 µs per loop (mean ± std. dev. of 7 runs, 1 loop each)

* Test failures

* Check b.ndim == 2 in triangular solve shape rule

==

jax/lax_linalg.py
tests/linalg_test.py
==================
1022573b;Roman Novak;2020-02-03 07:31:12 -0800;Make stax pooling layers accept `spec=None` (#2145)
Currently pooling layers have a default channel-last spec that is explicitly 2D. This change will make this default work for arbitrary input dimensionality.
==

jax/experimental/stax.py
==================
d6489103;Colin;2020-02-03 10:15:19 -0500;Bump cell execution timeout (#2147)
Looking at the recent [doc failures](https://readthedocs.org/projects/jax/builds/), a few are due to 

- Cell timeouts (which this tries to fix),
- Execution timeout (readthedocs gives 900seconds to build, total -- most of the time for jax is in executing the notebooks),
- Other somewhat random/inscrutable errors (and I could imagine a world in which one of the timeouts ends up triggering an inscrutable error in the execution).
==

docs/conf.py
==================
fe041c75;Peter Hawkins;2020-02-03 10:13:51 -0500;Set minimum Bazel version to 1.2.1.

==

build/build.py
==================
8c7fc391;Ruizhe Zhao;2020-02-03 15:12:40 +0000;Upgrade bazel from 0.29.1 to 1.2.1 (#2137)

==

build/build.py
==================
ae1d6b87;Matthew Johnson;2020-01-31 23:47:30 -0800;fix remat with nontrivial env (#2136)
fixes #2030
==

jax/api.py
jax/interpreters/partial_eval.py
tests/api_test.py
==================
efbdaf66;Skye Wanderman-Milne;2020-01-31 11:19:55 -0800;Adjust scipy_stats_test.py tolerance.

==

tests/scipy_stats_test.py
==================
91cd20b1;Peter Hawkins;2020-01-31 11:15:04 -0500;Update documentation and changelog to mention DLPack and array interface support. (#2134)

==

CHANGELOG.md
docs/jax.rst
==================
843e22dd;Peter Hawkins;2020-01-31 10:09:40 -0500;Support __cuda_array_interface__ on JAX DeviceArrays. (#2133)
Allows exporting GPU device-resident arrays to other libraries, e.g., CuPy.
==

WORKSPACE
jax/interpreters/xla.py
tests/array_interoperability_test.py
==================
4c30c028;Tuan Nguyen;2020-01-30 17:19:01 -0800;Implement scipy.stats.logistic (#1993)

==

jax/scipy/stats/__init__.py
jax/scipy/stats/logistic.py
tests/scipy_stats_test.py
==================
01039299;Peter Hawkins;2020-01-30 19:19:41 -0500;Revert "Use lax.erf_inv to implement ndtri. (#2122)" (#2128)
This reverts commit bbcbe23c1ee52cf76542f3a60f8344832a0dd05f.

This change appears to cause test failures in TF probability's JAX backend.
==

jax/scipy/special.py
tests/lax_test.py
==================
664a4e12;Roy Frostig;2020-01-30 15:03:00 -0800;VJP of cond, via partial eval + transpose (#2091)
VJP (grad) of lax.cond, via partial eval + transpose


Co-authored-by: Matthew Johnson <mattjj@google.com>
==

CHANGELOG.md
jax/experimental/loops.py
jax/interpreters/partial_eval.py
jax/lax/lax_control_flow.py
tests/api_test.py
tests/lax_control_flow_test.py
tests/metadata_test.py
==================
5362ea1d;Peter Hawkins;2020-01-30 16:17:08 -0500;Use make_tuple instead of from_pyval to build types. (#2127)

==

jax/interpreters/xla.py
==================
60bc0c0d;Daniel Johnson;2020-01-30 13:02:58 -0500;Batching rule for custom_linear_solve (#2099)
* Add batching rule for custom_linear_solve

The custom_linear_solve primitive is batched by batching each of the
jaxprs stored in the primitive. Conceptually, this corresponds to
transforming the initial linear system solve into an implicit "block
diagonal" solve, where matvec/vecmat apply a linear operation to each
part of the input, and solve/transpose_solve solve each block
separately.

Note that the batching of the input and output must agree between all
four jaxprs, since the custom_linear_solve JVP and transpose rules
assume the shapes all match. In particular, the JVP passes the output
of solve into (the JVP of) matvec and then that output back into solve,
and the transpose rule causes the (cotangents for the) output of solve
to be fed back into solve_transpose and vecmat. To ensure consistency
we can do a fixed-point iteration to figure out whether each component
of x and b are batched or not.

* Add support for batched solves without a transpose

If there is no transpose solve, we don't need to batch the transposed
versions of the jaxprs.

* Add pytree test for custom linear solve

Custom linear solve supports solves that act on pytrees, not just single
arrays. This commit adds a test for a linear operator and solver that
operate on Python lists of scalars instead of vectors, and confirms that
transformations work correctly. The batching behavior has been chosen
to make sure it requires a few iterations to find the fixed point of
which elements have a batch axis.

==

jax/lax/lax_control_flow.py
tests/lax_control_flow_test.py
==================
511d3398;Peter Hawkins;2020-01-29 23:19:14 -0500;Initial implementation of DLPack support. (#2123)
* Initial implementation of DLPack support.

Unfortunately there are still a few bugs in the jaxlib DLPack support, so this code won't be ready to use until jaxlib 0.1.39.

* Fix test failures.

* Update XLA.

Fix failing torch test.

==

WORKSPACE
jax/dlpack.py
tests/dlpack_test.py
==================
be2704e4;Stephan Hoyer;2020-01-29 14:24:11 -0800;Ensure ShapedArray.shape is always a tuple of builtins integers (#2039)
* Ensure ShapedArray.shape is always a tuple of builtins integers

Currently, it can sometimes include elements of type int64, e.g.,

    In [1]: import jax.numpy as jnp

    In [2]: x = jnp.arange(3) + 1

    In [3]: x.shape  # looks fine at first glance
    Out[3]: (3,)

    In [4]: type(x.shape[0])  # yikes!
    Out[4]: numpy.int64

This confirms my hypothesis that NumPy's scalar types are the root of all evil.

* Allow Poly in shapes

* Simple shape coercion in ShapedArray

* cleaner

==

jax/abstract_arrays.py
jax/interpreters/masking.py
tests/lax_test.py
==================
1c134f8a;Peter Hawkins;2020-01-29 16:23:27 -0500;Rename Tracer.trace to Tracer._trace. (#2114)
Makes the .trace() method work on arrays.
==

jax/core.py
jax/interpreters/ad.py
jax/interpreters/batching.py
jax/interpreters/masking.py
jax/interpreters/parallel.py
jax/interpreters/partial_eval.py
jax/interpreters/pxla.py
tests/lax_numpy_test.py
==================
96102dc7;Matthew Johnson;2020-01-29 13:17:39 -0800;simplify cond by removing consts (#2102)
Some higher-order primitives, like 'scan' and 'while', benefit from
distinguishing constants from other inputs to their closure-converted
function arguments; the reason is that for those primitives constants
act differently from the other inputs, which are loop carries or
scanned-over values, and are handled differently by transformations. For
example, they're used differently than loop carries in lattice
fixed-point computations. As another example, in scan the constants in
the forward computation are fanned out, so when transposing scan we
generate an accumulate-add.

However, these considerations don't hold true for cond: since there's no
looping going on (and hence no lattice fixed-points), constants are
treated just like the other operands. So we don't need to carry around
the distinction. That simplifies the cond rules a bit.

Co-authored-by: Roy Frostig <frostig@google.com>

==

jax/experimental/loops.py
jax/lax/lax_control_flow.py
tests/api_test.py
tests/metadata_test.py
==================
bbcbe23c;Peter Hawkins;2020-01-29 16:11:30 -0500;Use lax.erf_inv to implement ndtri. (#2122)

==

jax/scipy/special.py
tests/lax_test.py
==================
a5033956;Chris Jones;2020-01-29 19:35:48 +0000;Add `num_partitions` parameter to `get_compile_options`. (#2052)

==

jax/interpreters/pxla.py
jax/interpreters/xla.py
jax/lib/xla_bridge.py
tests/xla_bridge_test.py
==================
633aa003;Skye Wanderman-Milne;2020-01-29 11:23:27 -0800;Update README to drop CUDA 9.0 and add CUDA 10.2

==

README.md
==================
991324f8;Peter Hawkins;2020-01-29 14:16:58 -0500;Increase minimum jaxlib version to 0.1.38. (#2120)

==

.travis.yml
CHANGELOG.md
jax/lax_linalg.py
jax/lib/__init__.py
tests/lax_numpy_test.py
tests/lax_scipy_test.py
tests/lax_test.py
tests/linalg_test.py
==================
09d2421f;Skye Wanderman-Milne;2020-01-29 10:48:20 -0800;Update jaxlib version in README to 0.1.38

==

README.md
==================
409d057f;Skye Wanderman-Milne;2020-01-29 10:47:17 -0800;Build CUDA 10.2 jaxlibs. (#2121)
Also adds install_cuda.sh script that sets appropriate nccl and cuDNN versions.
==

build/Dockerfile
build/build_jaxlib_wheels.sh
build/install_cuda.sh
==================
48928a18;Peter Hawkins;2020-01-29 13:24:45 -0500;Fix test failures in incomplete gamma functions with Jaxlib 0.1.38. (#2118)

==

jax/lax_reference.py
tests/lax_scipy_test.py
tests/lax_test.py
==================
ab13cf3f;Tom Hennigan;2020-01-29 18:10:48 +0000;Add `lax.pmean(x, axis_name)`. (#2081)

==

jax/lax/lax_parallel.py
tests/pmap_test.py
==================
e60d5dd5;Peter Hawkins;2020-01-29 12:29:03 -0500;Remove "from __future__" uses from JAX. (#2117)
The future (Python 3) has arrived; no need to request it explicitly.
==

build/build.py
examples/advi.py
examples/datasets.py
examples/differentially_private_sgd.py
examples/examples_test.py
examples/gaussian_process_regression.py
examples/kernel_lsq.py
examples/mnist_classifier.py
examples/mnist_classifier_fromscratch.py
examples/mnist_vae.py
examples/onnx2xla.py
examples/resnet50.py
examples/spmd_mnist_classifier_fromscratch.py
jax/abstract_arrays.py
jax/ad_util.py
jax/api.py
jax/api_util.py
jax/core.py
jax/dtypes.py
jax/experimental/loops.py
jax/experimental/ode.py
jax/experimental/optimizers.py
jax/experimental/optix.py
jax/experimental/stax.py
jax/flatten_util.py
jax/interpreters/ad.py
jax/interpreters/batching.py
jax/interpreters/masking.py
jax/interpreters/parallel.py
jax/interpreters/partial_eval.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
jax/lax/__init__.py
jax/lax/lax.py
jax/lax/lax_control_flow.py
jax/lax/lax_fft.py
jax/lax/lax_parallel.py
jax/lax_linalg.py
jax/lax_reference.py
jax/lazy.py
jax/lib/xla_bridge.py
jax/linear_util.py
jax/nn/functions.py
jax/nn/initializers.py
jax/numpy/__init__.py
jax/numpy/fft.py
jax/numpy/lax_numpy.py
jax/numpy/linalg.py
jax/ops/__init__.py
jax/ops/scatter.py
jax/pprint_util.py
jax/random.py
jax/scipy/__init__.py
jax/scipy/linalg.py
jax/scipy/ndimage.py
jax/scipy/special.py
jax/scipy/stats/__init__.py
jax/scipy/stats/bernoulli.py
jax/scipy/stats/beta.py
jax/scipy/stats/cauchy.py
jax/scipy/stats/dirichlet.py
jax/scipy/stats/expon.py
jax/scipy/stats/gamma.py
jax/scipy/stats/laplace.py
jax/scipy/stats/multivariate_normal.py
jax/scipy/stats/norm.py
jax/scipy/stats/pareto.py
jax/scipy/stats/poisson.py
jax/scipy/stats/t.py
jax/scipy/stats/uniform.py
jax/test_util.py
jax/tools/jax_to_hlo.py
jax/tree_util.py
jax/util.py
jaxlib/cuda_prng.py
jaxlib/cusolver.py
tests/api_test.py
tests/batching_test.py
tests/benchmarks/xla.py
tests/core_test.py
tests/debug_nans_test.py
tests/dtypes_test.py
tests/fft_test.py
tests/generated_fun_test.py
tests/infeed_test.py
tests/jax_to_hlo_test.py
tests/lax_control_flow_test.py
tests/lax_numpy_einsum_test.py
tests/lax_numpy_indexing_test.py
tests/lax_numpy_test.py
tests/lax_scipy_test.py
tests/lax_test.py
tests/linalg_test.py
tests/loops_test.py
tests/masking_test.py
tests/metadata_test.py
tests/multi_device_test.py
tests/multibackend_test.py
tests/nn_test.py
tests/optimizers_test.py
tests/optix_test.py
tests/parallel_test.py
tests/pmap_test.py
tests/random_test.py
tests/scipy_ndimage_test.py
tests/scipy_stats_test.py
tests/stax_test.py
tests/tree_util_tests.py
tests/util_test.py
tests/vectorize_test.py
tests/xla_bridge_test.py
==================
4803a75c;Peter Hawkins;2020-01-29 11:55:53 -0500;Implement np.block. (#2106)
Rename np.removechars to _removechars; it should never have been public.
==

docs/jax.numpy.rst
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
62966d9a;Srinivas Vasudevan;2020-01-29 08:25:21 -0800;Add gammainc/gammaincc to JAX (#2064)

==

docs/jax.lax.rst
docs/jax.scipy.rst
jax/lax/lax.py
jax/scipy/special.py
tests/lax_scipy_test.py
tests/lax_test.py
==================
cfef568d;Peter Hawkins;2020-01-29 11:24:40 -0500;Implement jax.scipy.linalg.block_diag. (#2113)

==

docs/jax.scipy.rst
jax/scipy/linalg.py
tests/linalg_test.py
==================
0904e5ff;Peter Hawkins;2020-01-29 10:51:39 -0500;Fix implementation of cumsum/cumprod for boolean inputs. (#2112)
Check for number inputs in the reduce_window_sum dtype rule.
==

jax/lax/lax.py
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
04befac4;Peter Hawkins;2020-01-29 10:14:36 -0500;Fix error case in tensordot. (#2111)

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
102ce6f0;Peter Hawkins;2020-01-29 09:11:14 -0500;Merge pull request #2100 from hawkinsp/devices
Use Device hash and equality instead of using a (class, id) pair.
==
==================
4e575e14;Tom Hennigan;2020-01-29 03:04:59 +0000;Support trees in lax parallel operations. (#1953)
It is relatively common to apply collective operations to trees. For example in
sync distributed training it is typical to sum all gradients across replicas
`grads = jax.tree_map(partial(lax.psum, axis_name='i'), grads)`. We can make
this a little more convenient by making lax parallel ops support trees directly:
`grads = lax.psum(grads, 'i')`.

There is room for improvement in this change. We should in some (all?) cases
just pass a tuple of values to XLA (rather than bind the primivive n times bind
once with a tuple of n values) however this produced strange values when
combined with pmap and a fix was not obvious. This is something we can follow up
on without users having to change their code.
==

jax/lax/lax_parallel.py
tests/pmap_test.py
==================
7b7c89db;Peter Hawkins;2020-01-28 21:51:53 -0500;Merge pull request #2086 from romanngg/patch-6
Make the reverse operator work on empty list of dimensions
==
==================
1a5d9c53;James Bradbury;2020-01-28 18:45:45 -0800;clear compilation cache before metadata tests (#2103)

==

tests/metadata_test.py
==================
9f7f161c;Peter Hawkins;2020-01-28 21:42:45 -0500;Incorporate review comments.

==

jax/interpreters/xla.py
==================
d46e82d0;Matthew Johnson;2020-01-28 18:16:04 -0800;tweak readme announcement text again

==

README.md
==================
71811be3;Matthew Johnson;2020-01-28 18:15:16 -0800;tweak top-line announcement text in readme

==

README.md
==================
6aaf257d;Skye Wanderman-Milne;2020-01-28 18:04:52 -0800;Update WORKSPACE

==

WORKSPACE
==================
1afcac70;Matthew Johnson;2020-01-28 16:41:21 -0800;tweak readme not to have bad line wrap

==

README.md
==================
35810c9d;Peter Hawkins;2020-01-28 17:03:35 -0500;Merge pull request #2101 from hawkinsp/tolist
Implement ndarray.tolist() on DeviceArray.
==
==================
126ae7fc;Peter Hawkins;2020-01-28 15:58:02 -0500;Implement ndarray.tolist() on DeviceArray.

==

jax/numpy/lax_numpy.py
==================
b68d8b5c;Daniel Johnson;2020-01-28 15:48:37 -0500;Clarify instructions for building from source. (#2093)
Adds additional subsections of the `Building from source` documentation
page to make it more obvious that you can install `jaxlib` from pip
when doing Python-only development.
==

docs/developer.rst
==================
b54c18ef;Peter Hawkins;2020-01-28 15:45:40 -0500;Use Device hash and equality instead of using a (class, id) pair.
We couldn't figure out why we did it this way in the first place and all the tests we have pass.

==

jax/interpreters/xla.py
==================
58f949f3;Peter Hawkins;2020-01-28 11:33:58 -0500;Merge pull request #2098 from hawkinsp/jaxlib
Update Jaxlib docker build.
==
==================
55f2d3be;Peter Hawkins;2020-01-28 11:17:21 -0500;Update Jaxlib docker build.
* work around https://github.com/bazelbuild/bazel/issues/9254 by setting BAZEL_LINKLIBS=-lstdc++
* drop CUDA 9.0 support, since we use a batched kernel only present in CUDA 9.2 or later.
* drop Python 2.7 support.

==

build/Dockerfile
build/build_jaxlib_wheels.sh
build/build_wheel_docker_entrypoint.sh
==================
9a0338d6;Peter Hawkins;2020-01-28 10:01:17 -0500;Update README.md and CHANGELOG.md. (#2096)

==
==================
0fe60122;Peter Hawkins;2020-01-28 09:57:15 -0500;Update README.md and CHANGELOG.md.

==

CHANGELOG.md
README.md
==================
21551c23;Peter Hawkins;2020-01-28 09:24:26 -0500;Bump JAX version to 0.1.58.

==

jax/version.py
==================
95ccaae8;Roman Novak;2020-01-27 16:14:28 -0800;Add test for empty dimension list for reversion

==

tests/lax_test.py
==================
82d6c6ce;Chase Roberts;2020-01-27 15:44:33 -0800;Added better error messages. (#2058)
#2057

Added better error messages for when a user accidentally uses a python cast instead of a the `jax.numpy` casting.
==

jax/abstract_arrays.py
tests/api_test.py
==================
e0ed5adc;Aidan Dang;2020-01-27 19:57:43 +0000;Allow JVP for SVD when not computing singular vectors (#2076)
* Allow SVD JVP when not computing singular vectors

* Test SVD JVP when not computing full singular vecs

==

jax/lax_linalg.py
tests/linalg_test.py
==================
832bb71c;Peter Hawkins;2020-01-27 13:15:41 -0500;Add missing BUILD dependency. (#2089)

==

jaxlib/BUILD
==================
ffa198e8;Peter Hawkins;2020-01-27 12:48:10 -0500;Fix test failure on TPU. (#2088)
Update GUARDED_BY annotations to use newer ABSL_GUARDED_BY form.
==

jaxlib/cublas.cc
jaxlib/cusolver.cc
tests/linalg_test.py
==================
6a4bb951;Roman Novak;2020-01-27 00:16:04 -0800;Mare the reverse operator work on empty list of dimensions
Example that this fixes:
```
from jax import lax
import jax.numpy as np
from jax.api import jacrev

x = np.ones((3, 5))

def f(x):
  return lax.conv_general_dilated(lhs=x, 
                                  rhs=np.ones((5, 2)), 
                                  window_strides=(), 
                                  padding='VALID', 
                                  dimension_numbers=('NC', 'IO', 'NC'))
  
jacrev(f)(x)
```
currently gives
```
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-136-2ad65e41f1de> in <module>()
     12                                   dimension_numbers=('NC', 'IO', 'NC'))
     13 
---> 14 jacrev(f)(x).shape

15 frames
google3/third_party/py/jax/api.py in jacfun(*args, **kwargs)
    514     y, pullback = vjp(f_partial, *dyn_args)
    515     holomorphic or tree_map(_check_real_output_jacrev, y)
--> 516     jac = vmap(pullback)(_std_basis(y))
    517     jac = jac[0] if isinstance(argnums, int) else jac
    518     example_args = dyn_args[0] if isinstance(argnums, int) else dyn_args

google3/third_party/py/jax/api.py in batched_fun(*args)
    692     _check_axis_sizes(in_tree, args_flat, in_axes_flat)
    693     out_flat = batching.batch(flat_fun, args_flat, in_axes_flat,
--> 694                               lambda: _flatten_axes(out_tree(), out_axes))
    695     return tree_unflatten(out_tree(), out_flat)
    696 

google3/third_party/py/jax/interpreters/batching.py in batch(fun, in_vals, in_dims, out_dim_dests)
     38 def batch(fun, in_vals, in_dims, out_dim_dests):
     39   size, = {x.shape[d] for x, d in zip(in_vals, in_dims) if d is not not_mapped}
---> 40   out_vals, out_dims = batch_fun(fun, in_vals, in_dims)
     41   return map(partial(matchaxis, size), out_dims, out_dim_dests(), out_vals)
     42 

google3/third_party/py/jax/interpreters/batching.py in batch_fun(fun, in_vals, in_dims)
     44   with new_master(BatchTrace) as master:
     45     fun, out_dims = batch_subtrace(fun, master, in_dims)
---> 46     out_vals = fun.call_wrapped(*in_vals)
     47     del master
     48   return out_vals, out_dims()

google3/third_party/py/jax/linear_util.py in call_wrapped(self, *args, **kwargs)
    150     gen = None
    151 
--> 152     ans = self.f(*args, **dict(self.params, **kwargs))
    153     del args
    154     while stack:

google3/third_party/py/jax/api.py in _vjp_pullback_wrapper(fun, cotangent_dtypes, io_tree, py_args)
   1237              "match type of corresponding primal output ({})")
   1238       raise TypeError(msg.format(_dtype(a), dtype))
-> 1239   ans = fun(*args)
   1240   return tree_unflatten(out_tree, ans)
   1241 

google3/third_party/py/jax/interpreters/ad.py in vjp_(*cts)
    114     dummy_primals_and_cts = (core.unit,) * len(cts) + cts
    115     dummy_args = (undefined_primal,) * len(jaxpr.invars)
--> 116     _, arg_cts = backward_pass(jaxpr, consts, (), dummy_args, dummy_primals_and_cts)
    117     arg_cts = arg_cts[len(primals):]
    118     return map(instantiate_zeros, primals, arg_cts)

google3/third_party/py/jax/interpreters/ad.py in backward_pass(jaxpr, consts, freevar_vals, args, cotangents_in)
    222       map(write_cotangent, bound_vars, ct_free_vars_out)
    223     else:
--> 224       cts_out = get_primitive_transpose(eqn.primitive)(cts_in, *invals, **eqn.params)
    225     cts_out = [zero] * len(eqn.invars) if cts_out is zero else cts_out
    226     map(write_cotangent, eqn.invars, cts_out)

google3/third_party/py/jax/interpreters/ad.py in bilinear_transpose(lhs_rule, rhs_rule, cotangent, x, y, **kwargs)
    505   assert (x is undefined_primal) ^ (y is undefined_primal)
    506   if x is undefined_primal:
--> 507     out = zero if cotangent is zero else lhs_rule(cotangent, y, **kwargs)
    508     return out, None
    509   else:

google3/third_party/py/jax/lax/lax.py in _conv_general_dilated_transpose_lhs(g, rhs, window_strides, padding, lhs_dilation, rhs_dilation, dimension_numbers, feature_group_count, lhs_shape, rhs_shape, precision)
   2042       window_strides, onp.take(g.shape, out_sdims), padding, lhs_dilation,
   2043       rhs_dilation)
-> 2044   revd_weights = rev(rhs, rhs_sdims)
   2045   return conv_general_dilated(
   2046       g, revd_weights, window_strides=lhs_dilation, padding=padding,

google3/third_party/py/jax/lax/lax.py in rev(operand, dimensions)
    671   operator.
    672   """
--> 673   return rev_p.bind(operand, dimensions=tuple(dimensions))
    674 
    675 def select(pred, on_true, on_false):

google3/third_party/py/jax/core.py in bind(self, *args, **kwargs)
    157     top_trace = find_top_trace(args)
    158     if top_trace is None:
--> 159       return self.impl(*args, **kwargs)
    160 
    161     tracers = map(top_trace.full_raise, args)

google3/third_party/py/jax/interpreters/xla.py in apply_primitive(prim, *args, **params)
    159 def apply_primitive(prim, *args, **params):
    160   """Impl rule that compiles and runs a single primitive 'prim' using XLA."""
--> 161   compiled_fun = xla_primitive_callable(prim, *map(arg_spec, args), **params)
    162   return compiled_fun(*args)
    163 

google3/third_party/py/jax/interpreters/xla.py in xla_primitive_callable(prim, *arg_specs, **params)
    167   device = _device_from_arg_devices(arg_devices)
    168   backend = xb.get_device_backend(device)
--> 169   aval_out = prim.abstract_eval(*avals, **params)
    170   if not prim.multiple_results:
    171     handle_result = aval_to_result_handler(device, aval_out)

google3/third_party/py/jax/lax/lax.py in standard_abstract_eval(prim, shape_rule, dtype_rule, *args, **kwargs)
   1540     return ConcreteArray(prim.impl(*[x.val for x in args], **kwargs))
   1541   elif least_specialized is ShapedArray:
-> 1542     return ShapedArray(shape_rule(*args, **kwargs), dtype_rule(*args, **kwargs))
   1543   elif least_specialized is UnshapedArray:
   1544     return UnshapedArray(dtype_rule(*args, **kwargs))

google3/third_party/py/jax/lax/lax.py in _rev_shape_rule(operand, dimensions)
   2620     msg = 'rev dimensions must be unique, got {}.'
   2621     raise TypeError(msg.format(dimensions))
-> 2622   if not _max(dimensions) < operand.ndim:
   2623     msg = ('rev dimensions must all be less than operand ndim, got dimensions '
   2624            '{} for operand ndim {}.')

ValueError: max() arg is an empty sequence
```
==

jax/lax/lax.py
==================
a15aa9bd;James Bradbury;2020-01-26 23:27:56 -0800;include call stack + transforms in XLA metadata (#2073)

==

jax/api.py
jax/core.py
jax/interpreters/ad.py
jax/interpreters/batching.py
jax/interpreters/partial_eval.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
jax/lax/lax.py
jax/lax/lax_control_flow.py
jax/pprint_util.py
jax/util.py
tests/metadata_test.py
==================
0fca476c;Ziyad Edher;2020-01-26 14:29:33 -0500;Implement np.linalg.matrix_rank (#2008)
* Implement np.linalg.matrix_rank

* Test np.linalg.matrix_rank

* Use helper numpy testing function

* Fix issue with 1D matrix rank procedure

* Add new tests for 1D matrices and jit

* Do not check dtypes to circumvent int32 vs int64

* Include documentation for matrix_rank

* Fix ordering

* Use np.sum

==

docs/jax.numpy.rst
jax/numpy/linalg.py
tests/linalg_test.py
==================
632326ac;Peter Hawkins;2020-01-24 16:58:00 -0500;Add unsupported wrapper around XLA RngUniform API. (#2068)

==

jax/lax/lax.py
==================
0c95c26e;Ziyad Edher;2020-01-24 16:52:40 -0500;Implement np.linalg.matrix_power (#2042)
* Implement numpy.linalg.matrix_power

* Write tests for numpy.linalg.matrix_power

* Check for input matrix shapes

* Move to matrix-multiplication operator in matrix power

* Improve error messages and directly use broadcasting

* Include matrix_power in documentation

==

docs/jax.numpy.rst
jax/numpy/linalg.py
tests/linalg_test.py
==================
f1339cd0;Skye Wanderman-Milne;2020-01-23 17:24:23 -0800;Remove missing PPA in Dockerfile. (#2061)
This PPA has been removed by the owner: https://launchpad.net/~jonathonf/+archive/ubuntu/python-3.6
This causes `apt-get update` to fail when generating the Docker image. We don't seem to need this repository, so just remove it before calling `apt-get update`.
==

build/Dockerfile
==================
9aba39e9;Skye Wanderman-Milne;2020-01-23 17:11:23 -0800;Revert lax_numpy.asclose() behavior to work with lists again. (#2059)
This should be revisited to fix the issue originally addressed in https://github.com/google/jax/pull/2051.
==

jax/numpy/lax_numpy.py
==================
b6dfb8bf;Skye Wanderman-Milne;2020-01-23 16:46:45 -0800;Bump minimum bazel version to 0.26.0. (#2060)
Fixes #2044
==

build/build.py
==================
393938f3;Skye Wanderman-Milne;2020-01-23 16:35:35 -0800;Update WORKSPACE to TF commit that builds with build_jaxlib_wheels.sh

==

WORKSPACE
==================
8cf6cd87;Christopher Suter;2020-01-23 14:07:57 -0500;Tidy up prng.md (#2033)
* Tidy up prng.md

Make bulleted list alphabetical, to match references in subsequent text, and fix a little reduplication typo further below.

==

design_notes/prng.md
==================
a61bcff5;Matthew Johnson;2020-01-23 10:25:49 -0800;update readme gotchas about pure functions

==

README.md
==================
6b5ef898;Matthew Johnson;2020-01-23 10:21:55 -0800;fix autodiff cookbook np.allclose tuple bug (#2055)

==

docs/notebooks/autodiff_cookbook.ipynb
==================
a3de8020;Peter Hawkins;2020-01-23 11:53:55 -0500;Fix type specifications for bitwise ops. (#2054)

==

jax/lax/lax.py
==================
bb176d41;Peter Hawkins;2020-01-23 10:11:58 -0500;Fix type promotion behavior of jnp.power and jnp.gcd for Python scalars. (#2051)
Fix problem in test harness that meant we were not testing promotion against Python scalars.
==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
363f9e07;Roy Frostig;2020-01-22 18:11:41 -0800;Merge pull request #2045 from google/ad-cond
implement JVP of cond
==
==================
07260f65;Matthew Johnson;2020-01-22 17:19:14 -0800;remove hasing methods from core.Literal (#2038)

==

jax/core.py
jax/interpreters/ad.py
jax/interpreters/partial_eval.py
==================
e18d697a;brett koonce;2020-01-22 19:18:00 -0600;minor spelling tweaks (#2043)

==

jax/api.py
jax/dtypes.py
jax/experimental/vectorize.py
jax/lax/lax.py
jax/lax/lax_control_flow.py
jax/lax/lax_parallel.py
==================
8449c4af;Roy Frostig;2020-01-22 17:15:36 -0800;implement JVP of cond
Co-authored-by: Matthew Johnson <mattjj@google.com>

==

jax/lax/lax_control_flow.py
tests/lax_control_flow_test.py
==================
03b2ae6d;Sri Hari Krishna Narayanan;2020-01-22 00:11:51 -0500;Issue1635 expm (#1940)
* Issue1635 expm
Implemented expm using Pade approximation. The implmentation is
wrapped using custom_transforms. Frechet derivatives are provided
using defvjp.

* Issue1635 expm

Implemented expm using Pade approximation based on tf.linalg.expm.

* Revert "Revert "Merge remote-tracking branch 'origin/Issue1635' into Issue1635""

This reverts commit dd26c6eeeb60fa556f55abc8acb2f5969b64a2f5, reversing
changes made to b63c190c7671ebb9b911a52dcc203285c56a8051.

* Issue1635 expm testing

Add a test that compares numerical output of scipy.linalg.expm against jax.scipy.linalg.expm

* travis build Issue1635 branch

* Issue1635 expm testing

Use rand_small to get numerical agreeming

* Issue1635 expm testing
Use @jit to prevent recompilation

* Issue1635 expm testing

Use rand_small to get numerical agreement

* Revert "travis build Issue1635 branch"

This reverts commit 6139772555e3af79dc0307fce88838a480e42d38.

* Issue1635

Replace construct with  jax.numpy.select

* Issue1635

Restructure to support the docstring from SciPy

* Issue1635

Restructure to support the docstring from SciPy

* Issue1635

Remove the note that sparsity is not exploited because JAX does not support sparsity.

* Issue1635 expm

Support for the case where A is upper triangular. Instead of autodetection, the option is specified explicitly.

* Issue1635

Rename argument, make it positional. Update documentation

Co-authored-by: Jan <j.hueckelheim@imperial.ac.uk>

==

docs/jax.scipy.rst
jax/scipy/linalg.py
tests/linalg_test.py
==================
f04348ed;Skye Wanderman-Milne;2020-01-21 16:59:27 -0800;Bump jaxlib version to 0.1.38 and update WORKSPACE.

==

WORKSPACE
jaxlib/version.py
==================
2c80cd3d;Mu Li;2020-01-21 13:26:36 -0800;Fix Sysml paper link in README (#2036)
The original ULR was broken as sysml updated their links.
==

README.md
==================
17b5fe11;Matthew Johnson;2020-01-18 22:12:07 -0800;add test for issue #553

==

tests/api_test.py
==================
7dbc8dc1;Peter Hawkins;2020-01-18 08:26:23 -0500;Minimal changes to make Jax pass a pytype check. (#2024)

==

jax/BUILD
jax/ad_util.py
jax/api.py
jax/core.py
jax/experimental/loops.py
jax/interpreters/ad.py
jax/interpreters/masking.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
jax/lax/lax.py
jax/lax/lax_control_flow.py
jax/lax/lax_parallel.py
jax/lazy.py
jax/lib/__init__.py
jax/linear_util.py
jax/numpy/lax_numpy.py
jax/numpy/linalg.py
tests/api_test.py
tests/batching_test.py
tests/lax_numpy_test.py
tests/lax_test.py
tests/masking_test.py
tests/multibackend_test.py
tests/parallel_test.py
tests/random_test.py
==================
19fb494a;Skye Wanderman-Milne;2020-01-17 11:34:59 -0800;Add jax changelog (#2022)

==

CHANGELOG.md
==================
371001aa;Jamie Townsend;2020-01-17 17:48:56 +0000;Fix README typo (#2020)

==

README.md
==================
3974df0a;Jamie Townsend;2020-01-17 17:48:27 +0000;[docs] Pmap compiles functions with XLA (#2021)

==

README.md
jax/api.py
==================
71323b5d;Surya Bulusu;2020-01-17 07:17:15 +0530;changes loop_mjp(f, x, M) (#2013)
a minor change: we iterate over M and not S
==

docs/notebooks/autodiff_cookbook.ipynb
==================
28f70cc8;Roy Frostig;2020-01-16 10:58:09 -0800;Merge pull request #1980 from google/jvp-while
implement JVP of while loop. closes #650
==
==================
335ecb97;Roy Frostig;2020-01-15 18:06:31 -0800;test JVP of while loop, and fix the nonzero tangent calculation in the JVP rule

==

jax/lax/lax_control_flow.py
tests/lax_control_flow_test.py
==================
55c971e4;Julius Kunze;2020-01-16 00:36:00 +0000;Implement shapecheck for more primitives (#1990)
* shapecheck of jit, device_put, broadcast_in_dim, better error for unsupported ops, parse multi-digit integer literals

* WIP shapecheck np.pad

* Implement shapecheck of gather, pad

* Fix shapecheck of pad

* Implement polymorphic shape rule for (strided/dilated) convolution, refactor

* Cleanup

* Fix

* Remove all polymorphic shape rules, reuse shape rules instead.

* Register shape_rule for all standard_primitives

* Remove ShapeExpr, canonicalize_poly, renames

* Complete shapecheck(binop) implementation, remove special cases for polymorphic shapes

* Allow Poly of form d*poly + k to be divided by d

* Fix bug, inline poly_without_zeros.

==

jax/api.py
jax/interpreters/masking.py
jax/interpreters/xla.py
jax/lax/lax.py
jax/lax/lax_control_flow.py
tests/masking_test.py
==================
80b35dd4;Srinivas Vasudevan;2020-01-15 13:13:11 -0800;Add betainc to JAX (#1998)
Adds betaln, a wrapper for the Beta function (scipy.special.betaln).

==

docs/jax.lax.rst
docs/jax.scipy.rst
jax/interpreters/masking.py
jax/lax/lax.py
jax/lax_linalg.py
jax/lax_reference.py
jax/scipy/special.py
tests/lax_scipy_test.py
tests/lax_test.py
==================
12975bbc;Trevor Cai;2020-01-15 18:09:02 +0000;[pmap] Add support for nested pmaps on multihost platforms via axis_size (#2002)
One issue with nested pmaps on multihost platforms is inferring the global
pmap axis size without communication. This commit sidesteps the issue by adding
an `axis_size` argument to manually provide this information.

This change only enables a single cross-host pmap; all inner pmaps must be
single-host.

Addressing: #1753
==

jax/api.py
jax/interpreters/pxla.py
==================
a5644edb;Stephan Hoyer;2020-01-15 09:14:59 -0700;Defer to unrecognized types in arithmetic (#1942)
This is useful for building higher level array libraries around JAX, because it
makes it possible to override operations like `jax_array + other`.

I think I covered all the array types that JAX should be able to handle:
- Python builtin numbers int, float and complex
- NumPy scalars
- NumPy arrays
- JAX array types and tracers

Did I miss anything? Maybe bfloat16 scalars?
==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
653001aa;Peter Hawkins;2020-01-15 10:51:46 -0500;Update references to bazel repositories in WORKSPACE to match TF head. (#2005)

==

WORKSPACE
==================
11224bd2;Peter Hawkins;2020-01-14 16:20:53 -0500;Use a uniform rng rather than a normal rng to defeat CSE. (#2000)
The normal distribution is relatively expensive to compute.
==

jax/interpreters/xla.py
==================
938a7f80;Peter Hawkins;2020-01-14 11:33:21 -0500;Remove :libjax alias from BUILD file. (#1996)

==

jax/BUILD
==================
dcda87d0;AmKhan;2020-01-14 16:18:47 +0000;added batching to LAPACK triangular_solve (#1985)
* Added batching to cpu triangular_solver

* addressed comments about int overflows and returned triangular solve to use XLA over LAPACK

* add todo to benchmark LAPACK vs XLA

==

jax/lax_linalg.py
jaxlib/lapack.pyx
==================
64bf55dc;Peter Hawkins;2020-01-14 11:05:54 -0500;Update XLA. (#1997)
Drop six dependency from jaxlib, since xla_client.py no longer uses six.
==

WORKSPACE
build/setup.py
==================
681ba37f;Peter Hawkins;2020-01-14 10:08:23 -0500;Drop fastcache dependency, which isn't necessary on Python 3. (#1995)
Drop protobuf and six dependencies from travis configuration.
==

.travis.yml
jax/util.py
setup.py
==================
a5b6e8ab;Stephan Hoyer;2020-01-13 14:59:00 -0800;Real valued FFTs (#1657)
* WIP: real valued fft functions

Note: The transpose rule is not correct yet (hence the failing tests).

* Fix transpose rules for rfft and irfft

* Typo fix

* fix test failures in x64 mode

* Add 1d/2d real fft functions, plus docs

==

docs/jax.numpy.rst
jax/lax/lax_fft.py
jax/numpy/fft.py
tests/fft_test.py
==================
9919fe5e;Skye Wanderman-Milne;2020-01-13 14:55:29 -0800;Fix PmapTest.testCollectivePermuteCyclicWithPShuffle.

==

tests/pmap_test.py
==================
cfc854c6;Skye Wanderman-Milne;2020-01-13 14:12:37 -0800;Fix PmapTest.testPShuffleWithBadPerm regexp.

==

tests/pmap_test.py
==================
a7eb5897;Matthew Johnson;2020-01-11 16:31:59 -0800;add mini-libraries readme

==

README.md
jax/experimental/README.md
==================
9afa2c6b;Matthew Johnson;2020-01-10 20:44:24 -0800;fix broken link to trax, fixes #1974

==

cloud_tpu_colabs/Pmap_Cookbook.ipynb
==================
acbd2676;Matthew Johnson;2020-01-10 20:28:19 -0800;Merge pull request #1982 from noble-ai/rfftfreq
added rfftfreq, tests, and documentation link.
==
==================
34ede6b7;Chase Roberts;2020-01-10 16:49:08 -0800;Added pshuffle (#1975)

==

jax/lax/lax_parallel.py
tests/pmap_test.py
==================
8b6f660d;archis;2020-01-10 16:33:17 -0800;removed redundant comments

==

jax/numpy/fft.py
==================
05f09fc9;archis;2020-01-10 16:31:47 -0800;added rfftfreq, tests, and documentation link.

==

docs/jax.numpy.rst
jax/numpy/fft.py
tests/fft_test.py
==================
ed33d102;Skye Wanderman-Milne;2020-01-10 15:58:52 -0800;Add ppermute as an allowed multi-host collective. (#1981)
I manually tested that this works as of 0417e1e. The indices used in ppermute correspond to those returned by `axis_index`.
==

jax/lax/lax_parallel.py
==================
160cc43a;Skye Wanderman-Milne;2020-01-10 15:47:49 -0800;Disable failing GPU test for now pending XLA fix.

==

tests/lax_test.py
==================
afb8af19;Roy Frostig;2020-01-10 15:31:51 -0800;implement JVP of while loop
Co-authored-by: Matthew Johnson <mattjj@google.com>

==

jax/core.py
jax/lax/lax_control_flow.py
==================
773ebe13;Skye Wanderman-Milne;2020-01-10 10:10:26 -0800;Adjust tolerance for LaxTest.testConv0DIsDot. (#1978)
This was failing on TPU.
==

tests/lax_test.py
==================
0417e1e5;Skye Wanderman-Milne;2020-01-10 09:38:19 -0800;Fix `jax.lax.axis_index` in multi-host setting. (#1976)

==

jax/interpreters/pxla.py
==================
00be20bd;Matthew Johnson;2020-01-10 07:59:21 -0800;Merge pull request #1855 from JuliusKunze/categorical
Add categorical sampler
==
==================
f36d858c;Julius Kunze;2020-01-10 13:28:03 +0000;Require shape = sample_shape + batch_shape in random.categorical

==

jax/random.py
tests/random_test.py
==================
8bca2c90;Matthew Johnson;2020-01-09 20:25:42 -0800;fix urllib import for py3

==

examples/datasets.py
==================
facbe0d7;Peter Hawkins;2020-01-09 14:36:37 -0500;Handle 0D convolutions correctly in shape rule. (#1972)

==

jax/lax/lax.py
tests/lax_test.py
==================
327dca8f;Matthew Johnson;2020-01-09 10:46:57 -0800;Merge pull request #1944 from clemisch/master
Implement numpy.gradient
==
==================
ab258258;Peter Hawkins;2020-01-09 11:16:52 -0500;Implement np.sign for unsigned integers. (#1970)
Fix definition of np.sign for complex numbers.
Document lax.sign better for non-float types.
==

jax/lax/lax.py
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
tests/lax_test.py
==================
9ef9b38b;Clemens Schmid;2020-01-09 08:46:36 +0100;Put axis in named_parameters for numpy.gradient test

==

tests/lax_numpy_test.py
==================
c9075040;clemisch;2020-01-09 07:42:55 +0100;Merge branch 'master' into master

==
==================
46014da2;Skye Wanderman-Milne;2020-01-08 15:08:11 -0800;Fix c45d9db ("Drop Python 2 support from jax BUILD rule. #1965")

==

jax/BUILD
==================
c45d9dbc;Skye Wanderman-Milne;2020-01-08 15:03:47 -0800;Drop Python 2 support from jax BUILD rule. (#1965)

==

jax/BUILD
==================
14fb85fe;Matthew Johnson;2020-01-08 13:38:37 -0800;bump version for pypi

==

jax/version.py
==================
9cd5df12;Matthew Johnson;2020-01-08 13:38:09 -0800;Merge pull request #1790 from fehiepsi/gradvmapgamma
Implement gamma sampler using core.Primitive interface
==
==================
e51b6b34;Matthew Johnson;2020-01-08 10:53:27 -0800;fix test typo

==

tests/multibackend_test.py
==================
dcc882cf;Peter Hawkins;2020-01-08 13:17:55 -0500;Drop Python 2 support from JAX. (#1962)
Remove six dependency.
==

.travis.yml
README.md
build/build_jaxlib_wheels.sh
build/build_jaxlib_wheels_macos.sh
build/setup.py
examples/datasets.py
examples/kernel_lsq.py
examples/onnx2xla.py
examples/resnet50.py
jax/abstract_arrays.py
jax/api.py
jax/core.py
jax/dtypes.py
jax/experimental/loops.py
jax/experimental/optimizers.py
jax/experimental/stax.py
jax/interpreters/ad.py
jax/interpreters/batching.py
jax/interpreters/masking.py
jax/interpreters/parallel.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
jax/lax/lax.py
jax/lax/lax_control_flow.py
jax/lax/lax_parallel.py
jax/lax_reference.py
jax/lazy.py
jax/lib/xla_bridge.py
jax/numpy/lax_numpy.py
jax/pprint_util.py
jax/test_util.py
jax/tree_util.py
jaxlib/cuda_prng.py
jaxlib/cusolver.py
setup.py
tests/api_test.py
tests/benchmarks/xla.py
tests/dtypes_test.py
tests/lax_numpy_test.py
tests/lax_test.py
tests/loops_test.py
tests/multibackend_test.py
==================
ac1aaedc;Clemens Schmid;2020-01-08 12:31:45 +0100;Change from swapaxes to slice_in_dim in numpy.gradient

==

jax/numpy/lax_numpy.py
==================
48cb6af6;Clemens Schmid;2020-01-08 12:22:12 +0100;Support None and negative indices in slice_in_dim

==

jax/lax/lax.py
==================
b04019ea;Matthew Johnson;2020-01-07 22:30:54 -0800;fix test typos

==

tests/multibackend_test.py
==================
ad9b6d4d;Matthew Johnson;2020-01-03 15:46:19 -0800;implement lazy sublanguage
Before this commit, this computation would avoid materializing the iota
array at trace time:

  @jit
  def f(x):
    m, n = x.shape
    return x + np.arange(n)

But this one would materialize the iota array at trace time and stage it
into the computation as a potentially large array constant:

  @jit
  def f(x):
    m, n = x.shape
    return x + np.arange(m)[:, None]

The difference is that previously operations like broadcasts,
transposes, and reshapes that add singleton dimensions (as above) would
force otherwise lazy values to be materialized, while after this commit
broadcasts, transposes, and reshapes are all lazy operations that only
update metadata on their input rather than compiling and executing XLA
computations and producing new buffers.

Also, np.eye and np.tri become lazy (in addition to np.zeros, np.ones, np.full).

This commit replaces the ad-hoc "lazy device constant" system, which was
used to get the simpler behavior in the first example above.

Incidentally fixes #1431

See https://github.com/google/jax/pull/1668 for more.

==

jax/interpreters/pxla.py
jax/interpreters/xla.py
jax/lax/__init__.py
jax/lax/lax.py
jax/lazy.py
jax/numpy/lax_numpy.py
jax/scipy/special.py
jax/util.py
tests/api_test.py
tests/batching_test.py
tests/lax_numpy_indexing_test.py
tests/lax_numpy_test.py
tests/lax_test.py
tests/multi_device_test.py
tests/multibackend_test.py
tests/pmap_test.py
==================
6f50e3f0;fehiepsi;2020-01-07 20:22:33 -0500;Merge remote-tracking branch 'upstream' into gradvmapgamma

==
==================
c5a9eba3;Peter Hawkins;2020-01-07 10:56:15 -0500;Implement batched cholesky decomposition using LAPACK/Cusolver (#1956)
* Implement batched Cholesky decomposition on CPU and GPU using LAPACK and cuSolver.

Adds support for complex batched Cholesky decomposition on both platforms..
Fix concurrency bug in batched cuBlas kernels where a host to device memcpy could take place too early before the device buffer was ready.

==

jax/lax_linalg.py
jaxlib/BUILD
jaxlib/cublas.cc
jaxlib/cusolver.cc
jaxlib/cusolver.py
jaxlib/gpu_kernel_helpers.cc
jaxlib/gpu_kernel_helpers.h
jaxlib/lapack.pyx
tests/linalg_test.py
==================
b15a27a7;Clemens Schmid;2020-01-07 12:34:34 +0100;Tests for jax.numpy.gradient and minor tweaks

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
7da75587;Matthew Johnson;2020-01-06 22:45:44 -0800;make control flow abstract eval to shaped level
fixes #1919

==

jax/lax/lax_control_flow.py
==================
0c9aacf1;Clemens Schmid;2020-01-04 13:38:56 +0100;Use numpy function directly instead of copying source code

==

jax/numpy/lax_numpy.py
==================
58ee0a8e;Clemens Schmid;2019-12-30 23:20:08 +0100;Add np.iterable

==

jax/numpy/lax_numpy.py
==================
e2f7f37f;Tom Hennigan;2020-01-06 13:29:21 +0000;Allow Var to be a key in a JAX tree.

==

jax/core.py
tests/core_test.py
==================
1e8c9384;archis;2020-01-06 12:38:12 -0800;added fftfreq, corresponding tests, and documentation links.

==

docs/jax.numpy.rst
jax/numpy/fft.py
tests/fft_test.py
==================
80d8ee4e;Matthew Johnson;2020-01-06 18:08:00 -0800;lower away grad_and_aux pure jaxpr tracers
fixes #1950

==

jax/interpreters/ad.py
tests/api_test.py
==================
bb9cd233;Matthew Johnson;2020-01-06 20:57:19 -0800;tweak shape error message, add test

==

jax/lax/lax.py
tests/lax_numpy_test.py
==================
1ca9e9b2;Roy Frostig;2020-01-06 18:20:57 -0800;Concatenate error messages under numpy.{zeros,ones,full}. Closes #1822

==

jax/lax/lax.py
==================
29db4203;George Necula;2020-01-06 09:20:10 -0800;Merge pull request #1947 from gnecula/cleanup
Added some more documentation to the linear_util module
==
==================
4b2a5a1f;George Necula;2020-01-05 10:12:31 -0800;Attempt a fix for PY2

==

tests/util_test.py
==================
5465b9e8;George Necula;2020-01-05 19:00:04 +0100;Merge pull request #1946 from gnecula/bug_fix
Fix bug with caching in presence of JVP and JIT
==
==================
df374fa3;George Necula;2020-01-05 16:46:29 +0100;Removed unused imports

==

tests/util_test.py
==================
528a69f3;George Necula;2020-01-05 04:35:34 +0100;Added some more documentation to the linear_util module
Also cleaned up the inconsistent way of importing the module.
Prefer importing with qualified name 'lu.transformation' rather
than just 'transformation'.

==

jax/api_util.py
jax/flatten_util.py
jax/interpreters/ad.py
jax/interpreters/batching.py
jax/interpreters/partial_eval.py
jax/linear_util.py
tests/util_test.py
==================
ea9e9328;George Necula;2020-01-05 04:32:48 +0100;Fix bug with caching in presence of JVP and JIT
The bug was that the auxiliary output of the process_env_traces
was mutated before the next cache hit, so the cache content changed.

Fixes: #1945

==

jax/core.py
tests/api_test.py
==================
ca155129;Archis Joglekar;2020-01-04 18:21:30 -0800;added fft2 and ifft2, corresponding tests, and documentation links. (#1939)

==

docs/jax.numpy.rst
jax/numpy/fft.py
tests/fft_test.py
==================
2c87f72a;Matthew Johnson;2020-01-04 12:05:44 -0800;bump version for pypi

==

jax/version.py
==================
592f167e;Clemens Schmid;2020-01-04 14:26:35 +0100;Implement numpy.gradient

==

jax/numpy/lax_numpy.py
==================
52cafb37;Skye Wanderman-Milne;2020-01-03 17:55:11 -0800;Don't serialize jaxpr equations into XLA metadata.
Equations can be quite large, e.g. if it's some kind of call primitive. This can result in using many GB of host memory just to create the HLO module.

==

jax/interpreters/xla.py
==================
d9c6a5f4;Archis Joglekar;2020-01-02 17:35:22 -0800;fft and ifft implementation (#1926)
* first commit with placeholders for tests

* added tests for the following:
1 - inverse
2 - dtypes
3 - size
4 - axis

added error tests for the following:
1 - multiple axes provided instead of single axis
2 - axis out of bounds

* removed placeholders
added functions to .rst file

==

docs/jax.numpy.rst
jax/numpy/fft.py
tests/fft_test.py
==================
fd606747;John Mellor;2020-01-02 12:57:24 +0000;Fix minor typo in Common_Gotchas_in_JAX.ipynb
Moved misplaced backtick
==

docs/notebooks/Common_Gotchas_in_JAX.ipynb
==================
b380ac1f;Matthew Johnson;2020-01-01 11:43:44 -0800;add faster reshape utility function

==

jax/numpy/lax_numpy.py
==================
ed309b6f;Neeraj Pradhan;2019-12-31 12:00:58 -0800;Fix for compatibility with python>=3.7 and numpy>=1.18

==

jax/util.py
==================
82dbf913;Matthew Johnson;2019-12-31 10:38:45 -0800;add tests for #1640, adapt make_jaxpr staging

==

jax/api.py
jax/interpreters/partial_eval.py
jax/lax/lax_control_flow.py
tests/api_test.py
tests/nn_test.py
==================
322ebe7c;Yo;2019-12-27 09:09:31 +0530;Update docs/conf.py

==

docs/conf.py
==================
e0693fe6;flowed;2019-12-25 03:55:04 +0000;Fix Typos

==

docs/conf.py
docs/notebooks/JAX_pytrees.ipynb
docs/notebooks/score_matching.ipynb
jax/experimental/vectorize.py
jax/tools/jax_to_hlo.py
==================
f5723848;Matthew Johnson;2019-12-30 07:36:36 -0800;fix error in autodiff cookbook: 3x not 2x

==

docs/notebooks/autodiff_cookbook.ipynb
==================
30bede1f;David Bieber;2019-12-27 14:02:06 -0500;fix typo in autodiff cookbook (#1921)

==

docs/notebooks/autodiff_cookbook.ipynb
==================
edf0e61b;fehiepsi;2019-12-26 22:43:06 -0500;support nested vmap for gamma sampler

==

jax/random.py
==================
a3eb2b1b;Matthew Johnson;2019-12-24 18:59:06 -0800;improve computation-follows-data policy
fixes #1914 (see discussion there)

The new policy is that JAX's DeviceArrays, which are backed by device
memory but potentially on different devices (like distinct GPUs, or CPU
and GPU), can either be "stuck" to their device or not (i.e. "sticky" or
not). A DeviceArray result is stuck to its device if
  1. it was produced by a computation with an explicit user-provided
  device or backend label, i.e. a `jit` or `device_put` with an explicit
  device or backend argument, or
  2. it was produced by a computation that consumed as an argument a
  sticky DeviceArray value.
If a computation without an explicit device/backend label is applied to
all non-sticky arguments, the result is non-sticky. If a computation
without an explicit device/backend label is applied to any sticky
arguments, then if all the sticky device labels agree the result is
sticky on the same device, and otherwise an error is raised. (A
computation with an explicit device/backend label can consume any sticky
or non-sticky values without error, regardless of their devices.)

Implementation-wise, every DeviceArray has an attribute _device
(introduced in #1884, revised here) that set either to a value that
represents a Device instance (actually stored as a Device class / int id
pair), indicating that the DeviceArray is sticky on that device, or None
indicating that the DeviceArray is not sticky. The value of the _device
attribute for results of a computation is computed when the XLA
executable is compiled and stored in the result handler (which packages
up a raw device buffer into a DeviceArray).

==

jax/interpreters/pxla.py
jax/interpreters/xla.py
tests/fft_test.py
tests/multi_device_test.py
tests/multibackend_test.py
==================
3bf12f6e;Matthew Johnson;2019-12-24 11:16:42 -0800;update readme jaxlib version

==

README.md
==================
c75bf4ab;fehiepsi;2019-12-23 23:02:08 -0500;make beta sampler faster

==

jax/random.py
==================
264d7ccb;fehiepsi;2019-12-23 22:52:34 -0500;Merge remote-tracking branch 'upstream' into gradvmapgamma

==
==================
cdfa57df;fehiepsi;2019-12-23 22:52:15 -0500;merge master

==
==================
0f2e08dd;Matthew Johnson;2019-12-23 11:49:01 -0800;in remat, handle hoisted outputs in out_avals
In remat's partial_eval rule, we form a TypedJaxpr and hence need to set
its output avals (modeling its output type). Since jaxprs are currently
untyped, the logic looks at the Python output values returned by
call bind to get their types. However, some of the output types might
not correspond to value types in the jaxpr language; for example,
instances of ad_util.Zero can be returned from a call bind. (In the past
we've only formed TypedJaxprs in "initial-style" control-flow
primitives, which don't have this possibility because there's no call
bind involved.)

We handle this possibility just by inspecting the jaxpr first before
looking at the Python-valued outputs: wherever a non-jaxtype value has
been hoisted out, a corresponding unit exists in the jaxpr outvars. So
the logic is now: if the output has an abstract value from partial
evaluation, use that to get the output type; otherwise if the output is
a literal or unitvar, use that to get the output type; otherwise look at
the const from partial evaluation (and it's an error if that const isn't
a valid jaxtype).

fixes #1907

==

jax/interpreters/partial_eval.py
tests/api_test.py
==================
a14a05d1;Stephan Hoyer;2019-12-22 22:43:07 -0700;Support transforms along arbitrary axes with jax.numpy.fft (#1906)
* Support transforms along arbitrary axes with jax.numpy.fft

Fixes GH-1878

The logic that attempted to check for transformations along non-innermost axes
was broken.

Rather than fixing it, this PR adds support for these transformations by
transposing and untransposing arrays. This adds some overhead over the LAX
implementation, but it suspect it is minimal in most cases and it should be
worthwhile for the sake of completeness.

* Fixes per review

==

jax/numpy/fft.py
tests/fft_test.py
==================
0e552ff3;Tom Hennigan;2019-12-21 23:38:33 +0000;Register collections.defaultdict as a pytree. (#1908)
PiperOrigin-RevId: 286732270
==

jax/tree_util.py
tests/tree_util_tests.py
==================
5b4106f5;Sharad Vikram;2019-12-21 15:30:20 -0800;Fix typo in scipy.stats.poisson.pmf (#1894)
* Fix typo in scipy.stats.poisson.pmf

* Add test for Poisson PMF

==

jax/scipy/stats/poisson.py
tests/scipy_stats_test.py
==================
698babf9;Peter Hawkins;2019-12-20 18:42:33 -0500;Implement jax.numpy.nonzero and 1-argument jax.numpy.where. (#1905)
* Implement jax.numpy.nonzero.

* Implement the one-argument form of np.where.

* Fix output type and error message.

* Add lax_description strings to where and nonzero.

==

docs/jax.numpy.rst
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
d57f16f6;Peter Hawkins;2019-12-20 16:25:15 -0500;Implement jax.numpy.diag_indices in terms of iota instead of numpy.diag_indices. (#1904)

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
574a9ed2;Peter Hawkins;2019-12-20 16:09:55 -0500;Fix incorrect symbolic zero instantiation in scatter JVP rule. (#1903)

==

jax/lax/lax.py
tests/lax_test.py
==================
178c0d82;Peter Hawkins;2019-12-20 13:29:53 -0500;Fix type problem in dynamic_slice_in_dim in int32 default dtype mode. (#1902)

==

jax/lax/lax.py
tests/lax_test.py
==================
891aecb9;Skye Wanderman-Milne;2019-12-19 11:19:58 -0800;Add test utilities for counting compilations. (#1895)
Also uses the new utilities to check that pmap doesn't compile constant computations.

==

jax/linear_util.py
jax/test_util.py
tests/api_test.py
tests/multi_device_test.py
tests/pmap_test.py
==================
0ed842ed;Matthew Johnson;2019-12-18 15:55:39 -0800;add another multi-device test

==

tests/multi_device_test.py
==================
ec4b5445;Roman Novak;2019-12-18 15:27:46 -0800;Stax: allow arbitrary dimension numbers in pooling layers. (#1892)

==

jax/experimental/stax.py
tests/stax_test.py
==================
2a394ce3;Matthew Johnson;2019-12-18 11:26:58 -0800;move multi-device test into its own file

==

.travis.yml
tests/api_test.py
tests/multi_device_test.py
==================
00e621df;Matthew Johnson;2019-12-18 11:20:42 -0800;add multi_device_test in travis

==

.travis.yml
==================
8bd1a46c;Matthew Johnson;2019-12-18 11:18:33 -0800;revise handling of 'backend' values

==

jax/interpreters/xla.py
jax/lax/lax.py
jax/lax/lax_control_flow.py
jax/lib/xla_bridge.py
==================
286ec51f;Matthew Johnson;2019-12-17 17:49:06 -0800;make op-by-op computation follow arg placement

==

.travis.yml
jax/interpreters/xla.py
jax/lax/lax_parallel.py
tests/api_test.py
tests/multibackend_test.py
==================
a52dc452;Peter Hawkins;2019-12-18 11:57:22 -0500;Change jax.numpy scalar types to return 0D JAX arrays when instantiated. (#1836)
* Change jax.numpy scalar types to return 0D JAX arrays rather than NumPy scalars when instantiated.

jax.numpy and numpy have slightly different promotion behaviors. For consistency with JAX arrays, we would like the result of, say, `jax.numpy.int32(7)` to have the same promotion behavior as `jax.numpy.array(7, dtype=jax.numpy.int32)`. The easiest way to do this is to have the jax.numpy scalars return 0D arrays when instantiated; the difference between NumPy scalars and arrays is not a fundamental one and we do not need to distinguish between them in JAX.

==

jax/dtypes.py
jax/lax_linalg.py
jax/numpy/lax_numpy.py
tests/dtypes_test.py
tests/lax_control_flow_test.py
==================
8f00e3f5;Peter Hawkins;2019-12-18 11:07:39 -0500;Disable SVD GPU test because it is failing due to an LLVM integrate. (#1890)
Remove some stale jaxlib version tests.
==

jax/lax_linalg.py
tests/linalg_test.py
==================
7df124a7;Peter Hawkins;2019-12-17 22:01:01 -0500;Relax fp16 test tolerance for scatter_add batching test. (#1887)

==

tests/lax_test.py
==================
d692965f;Peter Hawkins;2019-12-17 21:42:37 -0500;Implement missing case in scatter batching rule. (#1885)
Add systematic batching tests for gather and scatter-add.
==

jax/lax/lax.py
tests/lax_test.py
==================
e3d5edd2;Peter Hawkins;2019-12-17 21:22:32 -0500;Relax test tolerances in pmap_test. (#1886)

==

tests/pmap_test.py
==================
9a0ed066;Lechao Xiao;2019-12-17 19:38:32 -0500;Add Delta orthogonal initialization (#1838)

==

jax/nn/initializers.py
tests/nn_test.py
==================
b459b609;Skye Wanderman-Milne;2019-12-17 16:22:55 -0800;Make pmap properly replicate closed-over constants. (#1847)
With this change, a value `x` can be replicated `nrep` times as follows:

```python
pmap(lambda _: x)(np.arange(nrep))
```

This will broadcast `x` into a ShardedDeviceArray suitable for passing into another pmap with the same input shape.

If `x` will be passed into a pmap with `devices` or a nested pmap, the replication pmap(s) should follow that structure. For example:

```python
x = pmap(pmap(lambda _: x))(np.ones(2, 4))

pmap(pmap(lambda i: i**2 + x))(np.ones(2, 4))
```
==

.travis.yml
jax/interpreters/pxla.py
jax/lib/__init__.py
tests/pmap_test.py
==================
7175c1df;Matthew Johnson;2019-12-17 13:14:10 -0800;fix transpose bug in multivariate normal, add test
fixes #1869

==

jax/random.py
tests/random_test.py
==================
594edf41;Peter Hawkins;2019-12-17 18:02:22 -0500;Fix bug in handling for degenerate indexing. (#1882)

==

jax/numpy/lax_numpy.py
tests/lax_numpy_indexing_test.py
==================
b24ab59d;Skye Wanderman-Milne;2019-12-17 14:44:03 -0800;Run pmap_test.py with 8 CPU devices. (#1844)
This lets us test many aspects of our parallel computing
infrastructure without the need for multiple accelerators (it's still
important to test actual multi-accelerator platforms to get full
end-to-end coverage). Using the --xla_force_host_platform_device_count
can also be used to quickly test out or prototype pmap code.
==

tests/pmap_test.py
==================
d8d3a7bc;Peter Hawkins;2019-12-17 17:20:51 -0500;Allow scalar numpy arrays as shapes in np.{zeros,ones,full}. (#1881)

==

jax/numpy/lax_numpy.py
jax/test_util.py
tests/lax_numpy_test.py
==================
96677d9c;Peter Hawkins;2019-12-17 11:45:39 -0500;Use highest precision for einsum test. (#1876)
Fixes test failures on TPU which uses lower precision by default.
==

tests/lax_numpy_einsum_test.py
==================
3f5a9a21;Peter Hawkins;2019-12-17 09:15:47 -0500;Update version of genrule binary to Python 3 in Bazel rules. (#1873)

==

jax/tools/build_defs.bzl
==================
4af04cef;tamaranorman;2019-12-17 02:03:17 +0000;Support dilated transposed convolutions in the conv_transpose op. (#1823)
PiperOrigin-RevId: 284155973
==

jax/experimental/stax.py
jax/lax/lax.py
tests/lax_test.py
==================
b26a12a3;Peter Hawkins;2019-12-16 20:48:19 -0500;Implement bool_ support for jnp.add, jnp.multiply, jnp.einsum, lax.do… (#1872)
* Implement bool_ support for jnp.add, jnp.multiply, jnp.einsum, lax.dot and lax.dot_general.

Fix dtype rules for `lax._reduce_sum` and `lax._reduce_prod` to check for number inputs.

Improve error messages for type mismatches to correctly describe scalar type categories (e.g. 'floating') rather than what `onp.dtype(...).name` returns (e.g., 'float64').

Remove redundant `bfloat16` type in `lax._float`, which has been redundant since `dtypes.issubdtype` was taught about `bfloat16` support.


==

jax/lax/lax.py
jax/numpy/lax_numpy.py
tests/lax_numpy_einsum_test.py
tests/lax_numpy_test.py
tests/lax_test.py
==================
a6da7e8b;Skye Wanderman-Milne;2019-12-16 09:58:30 -0800;Link to "Reporting issues" at top of Cloud TPU README.

==

cloud_tpu_colabs/README.md
==================
c952ed4f;Matthew Johnson;2019-12-16 09:32:55 -0800;update readme to clarify Cloud TPU preview status

==

cloud_tpu_colabs/README.md
==================
69832708;Julius Kunze;2019-12-15 15:43:39 +0000;Clarify documentation

==

jax/random.py
==================
6ba39f76;Matthew Johnson;2019-12-14 10:33:37 -0800;tweak demo

==

cloud_tpu_colabs/NeurIPS_2019_JAX_demo.ipynb
==================
5c800367;Matthew Johnson;2019-12-14 08:34:01 -0800;mention cloud tpus in readme

==

README.md
cloud_tpu_colabs/README.md
==================
764f007f;Matthew Johnson;2019-12-14 08:23:27 -0800;point pmap links to cloud tpu colabs

==

README.md
==================
0ad8837f;Matthew Johnson;2019-12-14 08:16:01 -0800;tweak wording around installing jaxlib

==

README.md
==================
8dad859e;Matthew Johnson;2019-12-14 07:00:39 -0800;streamline readme, add pmap

==

README.md
docs/notebooks/Common_Gotchas_in_JAX.ipynb
==================
89272003;Matthew Johnson;2019-12-10 13:50:36 -0800;wip

==

README.md
==================
1efe648d;Skye Wanderman-Milne;2019-12-13 16:17:58 -0800;Add demo colab.

==

cloud_tpu_colabs/NeurIPS_2019_JAX_demo.ipynb
cloud_tpu_colabs/README.md
==================
1f88c831;Skye Wanderman-Milne;2019-12-13 15:48:32 -0800;Add Cloud TPU Colabs landing page.

==

cloud_tpu_colabs/Lorentz_ODE_Solver.ipynb
cloud_tpu_colabs/Pmap_Cookbook.ipynb
cloud_tpu_colabs/README.md
cloud_tpu_colabs/Wave_Equation.ipynb
cloud_tpu_colabs/images/lorentz.png
cloud_tpu_colabs/images/wave_movie.gif
==================
61787552;Julius Kunze;2019-12-13 15:00:32 +0000;Remove safe zip/map

==

tests/random_test.py
==================
cc92bb64;Pavel Sountsov;2019-12-13 05:41:51 -0800;Improve the VJP structure mismatch errors. (#1854)

==

jax/api.py
==================
9d12a24b;Julius Kunze;2019-12-13 11:46:08 +0000;Add categorical sampler

==

jax/random.py
tests/random_test.py
==================
3d7f884c;Peter Hawkins;2019-12-12 09:14:45 -0500;Implement __round__ on JAX arrays. (#1846)
* Implement __round__ on JAX arrays.

Avoids breakage from https://github.com/google/jax/pull/1836


==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
fbde09f5;Matthew Johnson;2019-12-12 05:14:57 -0800;add tuple_args logic to xla primitive application

==

jax/interpreters/xla.py
jax/lax/lax.py
jax/lax/lax_control_flow.py
jax/lax/lax_parallel.py
==================
876c9c0e;Matthew Johnson;2019-12-11 20:46:05 -0800;fix x64 issue

==

jax/abstract_arrays.py
jax/interpreters/partial_eval.py
==================
ac3cb59c;Matthew Johnson;2019-12-11 18:39:16 -0800;make nested jit stage out full inner jit bodies
Before this change, inner jitted functions wouldn't necessarily be fully
staged out into an outer-jit trace; instead, as much as possible would
be hoisted out of the inner jit. That led to extra constants getting
materialized in #1640.

For example:

```python
@jit
def f(x, y):
    z = 2 * x
    return y + z

@jit
def g(x):
    return f(2, x)

g(3)
```

would lead to these XLA computations being compiled and executed:

```
HloModule jit_f.7

ENTRY jit_f.7 {
  parameter.2 = () parameter(1)
  tuple.3 = () tuple()
  parameter.1 = s32[] parameter(0)
  constant.4 = s32[] constant(2)
  multiply.5 = s32[] multiply(parameter.1, constant.4)
  ROOT tuple.6 = ((), s32[]) tuple(tuple.3, multiply.5)
}

HloModule jit_g.14

jaxpr_subcomputation.4 {
  parameter.6 = () parameter(1)
  tuple.8 = () tuple()
  parameter.7 = s32[] parameter(2)
  parameter.5 = s32[] parameter(0)
  add.9 = s32[] add(parameter.7, parameter.5)
  ROOT tuple.10 = (s32[]) tuple(add.9)
}

ENTRY jit_g.14 {
  constant.1 = s32[] constant(4)
  tuple.3 = () tuple()
  parameter.2 = s32[] parameter(0)
  call.11 = (s32[]) call(constant.1, tuple.3, parameter.2), to_apply=jaxpr_subcomputation.4
  get-tuple-element.12 = s32[] get-tuple-element(call.11), index=0
  ROOT tuple.13 = (s32[]) tuple(get-tuple-element.12)
}
```

Notice that the `multiply` is separated out from the `add`, and in
particular the XLA computation underlying `g` only has the `add` in it.

This behavior was desirable when using partial evaluation for
reverse-mode autodiff, since in that case we want to partially evaluate
all the primal values underneath a call while staging out a jaxpr for
the tangent values. But it was undesirable for the other use of partial
evaluation, namely forming jaxprs under `jit` (and `pmap`).

The solution was just to tag jaxpr traces differently in the two cases.

==

jax/interpreters/partial_eval.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
tests/api_test.py
==================
3a07c69d;Peter Hawkins;2019-12-11 16:41:24 -0500;Implement jax.numpy.nextafter. (#1845)

==

docs/jax.lax.rst
docs/jax.numpy.rst
jax/lax/lax.py
jax/lax_reference.py
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
tests/lax_test.py
==================
c63bfca2;Peter Hawkins;2019-12-11 14:27:16 -0500;Fix breakage due to optimization in https://github.com/google/jax/pull/1840 (#1843)
Precomputing a ShapedArray can cause problems depending on when --jax_enable_x64 is parsed.
==

jax/interpreters/xla.py
==================
e87d9718;Peter Hawkins;2019-12-11 12:27:11 -0500;Support IntEnum values as arguments to JAX functions. (#1840)
* Support IntEnum values as arguments to JAX functions.

When abstractifying a Python value, search the method-resolution order (MRO) of the type rather than only looking at the value's own type. IntEnum instances are subclasses of int, so this allows us to correctly handle them as integers, much as NumPy itself does.


==

.travis.yml
docs/developer.rst
jax/abstract_arrays.py
jax/interpreters/xla.py
tests/benchmarks/xla.py
tests/dtypes_test.py
==================
bf098e61;Peter Hawkins;2019-12-11 11:59:24 -0500;Update jax_to_hlo .bzl file to use exec_tools instead of tools. (#1842)
Fixes a Python 3 compatibility problem.
==

jax/tools/build_defs.bzl
==================
a73106b3;George van den Driessche;2019-12-11 02:48:51 +0000;Avoid stack overflow when JITting a function that uses copy.copy or copy.deepcopy. (#1834)

==

jax/core.py
tests/api_test.py
==================
3167b3dd;Matthew Johnson;2019-12-10 14:10:57 -0800;test tupling of args

==

tests/api_test.py
==================
94203bf0;Peter Hawkins;2019-12-10 11:25:09 -0500;Update XLA. (#1837)
Update jaxlib BUILD for https://github.com/tensorflow/tensorflow/commit/ead06270dc8bd7a61622f4c687396ce1791f29b5
==

WORKSPACE
jaxlib/BUILD
==================
6ac1c569;Stephan Hoyer;2019-12-10 00:38:18 -0800;Use HIGHEST precision for dot_general in linalg JVP rules (#1835)

==

jax/lax/lax.py
jax/lax_linalg.py
jax/test_util.py
tests/lax_numpy_test.py
tests/linalg_test.py
==================
687b9050;Peter Hawkins;2019-12-09 21:18:39 -0500;Prepare to switch default dtypes in JAX to be 32-bit types. (#1827)
This change prepares for switching the default types in JAX's NumPy to be 32-bit types. In particular, it makes the JAX tests pass in the event that jax.numpy.int_, jax.numpy.float_, and jax.numpy.complex_ are defined to be 32-bit types instead of 64-bit types, but does not yet change the defaults.

==

jax/lax/lax.py
jax/numpy/lax_numpy.py
jax/test_util.py
tests/api_test.py
tests/lax_numpy_test.py
tests/loops_test.py
==================
7f4b641c;Tuan Nguyen;2019-12-09 09:56:26 -0800;Additional doc for np.linalg.pinv (#1820)
* starter code

* Update scipy_stats_test.py

* Update __init__.py

* Update scipy_stats_test.py

* starter code for pinv

* fix transpose, add more test cases & complex dtype

* update test to latest format

* update default rcond

* Update linalg.py

* bigger test size

* Update linalg.py

* Update linalg_test.py

* fix float issue

* Update linalg.py

* smaller test cases

* Update linalg_test.py

* try not forcing float

* explicit cast

* try a different casting

* try another casting

* Update doc for pinv

* Update linalg.py

==

jax/numpy/linalg.py
==================
26e86392;tamaranorman;2019-12-09 16:06:59 +0000;Support atrous conv in same padded convolution and add warning if use transposed convolution with same or valid padding. (#1806)
PiperOrigin-RevId: 283517237
==

docs/notebooks/Common_Gotchas_in_JAX.ipynb
jax/lax/lax.py
==================
7083b0a7;Matthew Johnson;2019-12-06 22:28:41 -0800;roll back previous commit #1829
There was a mysterious failure on an internal test, and that
mysteriousness means I didn't fully understand the attempted fix, so
best to roll back for now.

==

jax/core.py
tests/api_test.py
==================
80f455d3;Matthew Johnson;2019-12-06 20:32:46 -0800;make eval_jaxpr get jit cache hits

==

jax/core.py
tests/api_test.py
==================
eabe77e2;Peter Hawkins;2019-12-06 19:24:05 -0500;Update JAX version. (#1828)

==

jax/version.py
==================
7bf2d77b;Stephan Hoyer;2019-12-06 12:03:22 -0800;Clarify SPMD requirement for pmap (#1826)

==

jax/api.py
==================
fb79d56a;Peter Hawkins;2019-12-06 14:49:27 -0500;Fixes to type handling. (#1824)
* Fixes to type handling.

* Specify exactly which types to test in lax_test.py, rather than relying on non-x64 mode to squash unsupported types.
* Fix some excessive promotions in jax.numpy.
* Fix some buggy RNGs that returned the wrong type for complex inputs.


==

jax/numpy/lax_numpy.py
jax/test_util.py
tests/lax_test.py
==================
5eafc7ba;Matthew Johnson;2019-12-06 10:29:54 -0800;improve condition for multi-host pmap checking

==

jax/interpreters/pxla.py
==================
d17e69ee;Matthew Johnson;2019-12-06 10:23:17 -0800;add whitelist for multi-host collectives

==

jax/interpreters/pxla.py
jax/interpreters/xla.py
jax/lax/lax_parallel.py
==================
1da950d0;Skye Wanderman-Milne;2019-12-05 21:38:59 -0800;Update WORKSPACE

==

WORKSPACE
==================
7a154f71;Skye Wanderman-Milne;2019-12-05 18:59:29 -0800;Fix jaxlib build by not exposing nvcc to pybind11. (#1819)

==

jaxlib/BUILD
jaxlib/cublas.cc
jaxlib/cuda_prng_kernels.cc
jaxlib/cuda_prng_kernels.cu.cc
jaxlib/cuda_prng_kernels.h
jaxlib/cusolver.cc
jaxlib/kernel_helpers.h
jaxlib/kernel_pybind11_helpers.h
==================
0c0137d7;Matthew Johnson;2019-12-04 19:34:21 -0800;avoid compiling trivial programs from partial_eval
also minor clean up in api_test.py

==

jax/interpreters/xla.py
tests/api_test.py
==================
d958f300;Peter Hawkins;2019-12-05 10:57:23 -0500;Change JAX type promotion to prefer inexact types. (#1815)
Change the JAX type promotion table to prefer inexact types during type promotion.

NumPy's type promotion rules tend to promote aggressively to float64, which isn't a very accelerator-friendly behavior when not all accelerators (e.g., TPUs) support 64-bit floating point types. Even on accelerators that support 64-bit floating point types (e.g., GPUs), promotion to a 64-bit type comes with a significant performance cost.

This change makes JAX type promotion between inexact and exact types closer to PyTorch's promotion semantics, which are a better fit for modern accelerators:
e.g.,

```
import numpy as onp
from jax import numpy as np

In [1]: onp.promote_types(onp.float32, onp.int32)   
Out[1]: dtype('float64')

In [2]: onp.promote_types(onp.float16, onp.int64)   
Out[2]: dtype('float64')

In [3]: np.promote_types(onp.float32, onp.int32)    
Out[3]: dtype('float32')

In [4]: np.promote_types(onp.float16, onp.int64)    
Out[4]: dtype('float16')
```

This change is in preparation for enabling x64 mode by default on all platforms.

==

docs/index.rst
docs/type_promotion.rst
jax/dtypes.py
jax/numpy/lax_numpy.py
tests/dtypes_test.py
tests/lax_numpy_test.py
==================
1a82da37;James Bradbury;2019-12-04 21:20:59 -0800;log compiles in pmap (#1817)

==

jax/interpreters/pxla.py
==================
7f4c2fcb;Matthew Johnson;2019-12-04 19:48:59 -0800;bump version for pypi

==

jax/version.py
==================
d1134168;Skye Wanderman-Milne;2019-12-04 14:47:58 -0800;Update WORKSPACE.
We haven't published jaxlib 0.1.27 yet so I'm leaving the version as-is.

==

WORKSPACE
==================
08996733;Matthew Johnson;2019-12-04 09:55:05 -0800;switch xla_computation instantiate outputs default

==

jax/api.py
==================
c1aeaf51;Matthew Johnson;2019-12-04 09:50:29 -0800;xla_computation option to instantiate const output

==

jax/api.py
tests/api_test.py
==================
4a42e5d8;George Necula;2019-12-04 18:07:34 +0100;Merge pull request #1813 from gnecula/bug_fix
Increase test tolerance for float16 for LaxBackedNumpyTests.testCross
==
==================
eca0d98f;George Necula;2019-12-04 17:42:20 +0100;Increase test tolerance for float16 for LaxBackedNumpyTests.testCross
Due to failure in google3 presubmit

==

tests/lax_numpy_test.py
==================
31eb4fc1;George Necula;2019-12-04 16:59:49 +0100;Merge pull request #1812 from gnecula/bug_fix
Disable linalg_test.py::NumpyLinalgTest.testPinv on TPU and GPU
==
==================
17813eab;Peter Hawkins;2019-12-04 10:02:14 -0500;Simplify np.cross. Add a jit decorator. (#1810)
* Simplify np.cross. Add a jit decorator.

==

jax/numpy/lax_numpy.py
==================
120270cb;George Necula;2019-12-04 15:38:17 +0100;Refined the test disabling for only TPU

==

jax/lax_linalg.py
tests/linalg_test.py
==================
437e6db8;George Necula;2019-12-04 15:28:01 +0100;Disable linalg_test.py::NumpyLinalgTest.testPinv on TPU and GPU
This failed in google3 presubmits.

==

tests/linalg_test.py
==================
d6b18fbb;Peter Hawkins;2019-12-03 22:17:22 -0500;Add some missing NumPy constants: euler_gamma, NZERO and PZERO. (#1809)
I avoided adding the deprecated aliases for inf and nan.
==

jax/numpy/lax_numpy.py
==================
5b6c9325;Skye Wanderman-Milne;2019-12-03 12:45:58 -0800;Fix WORKSPACE hash

==

WORKSPACE
==================
12a62c1f;Skye Wanderman-Milne;2019-12-03 12:29:34 -0800;Bump jaxlib version to 0.1.37 and update WORKSPACE.

==

WORKSPACE
jaxlib/version.py
==================
2316a29a;Tuan Nguyen;2019-12-03 11:15:39 -0800;Implement np.linalg.pinv (#1656)
* starter code

* Update scipy_stats_test.py

* Update __init__.py

* Update scipy_stats_test.py

* starter code for pinv

* fix transpose, add more test cases & complex dtype

* update test to latest format

* update default rcond

* Update linalg.py

* bigger test size

* Update linalg.py

* Update linalg_test.py

* fix float issue

* Update linalg.py

* smaller test cases

* Update linalg_test.py

* try not forcing float

* explicit cast

* try a different casting

* try another casting

==

jax/numpy/linalg.py
tests/linalg_test.py
==================
ea91c96a;Peter Hawkins;2019-12-03 11:59:31 -0500;Specify a minimum Mac OS version in builds to avoid backward compatibility problems. (#1807)

==

build/build.py
==================
1817f24c;Peter Hawkins;2019-12-03 10:25:46 -0500;Relax test tolerance for core_test.py test_vjp to fix flakiness.

==

tests/core_test.py
==================
6d7ef831;Peter Hawkins;2019-12-03 10:08:55 -0500;Add copyright notice to xla_bridge_test.py

==

tests/xla_bridge_test.py
==================
ff94b444;Peter Hawkins;2019-12-03 10:05:51 -0500;Remove np._promote_args_like, and replace its users with a newer _pro… (#1802)
* Remove np._promote_args_like, and replace its users with a newer _promote_args_inexact.

We no longer want to promote arguments exactly like NumPy; NumPy has a bad habit of promoting integer types to float64, whereas we want to promote to jax.numpy.float_, which may not be the same.

For example
```
import numpy as onp
onp.sin(3).dtype
```
returns `onp.dtype(float64)`.

However, it turns out that all of the users of `_promote_args_like` are using it for exactly one behavior: promoting integers or bools to inexact types like float. Implement that behavior explicitly rather than mimicing the behavior of NumPy.

* Relax test tolerances.

==

jax/numpy/lax_numpy.py
jax/scipy/special.py
jax/scipy/stats/bernoulli.py
jax/scipy/stats/beta.py
jax/scipy/stats/cauchy.py
jax/scipy/stats/expon.py
jax/scipy/stats/gamma.py
jax/scipy/stats/laplace.py
jax/scipy/stats/multivariate_normal.py
jax/scipy/stats/norm.py
jax/scipy/stats/pareto.py
jax/scipy/stats/poisson.py
jax/scipy/stats/t.py
jax/scipy/stats/uniform.py
jax/test_util.py
tests/lax_numpy_test.py
tests/linalg_test.py
tests/masking_test.py
tests/scipy_stats_test.py
==================
cbc5aa02;Peter Hawkins;2019-12-02 22:47:28 -0500;Fix scalar type promotion of np.where. (#1801)
Broadcasting before promoting causes scalars to be promoted to the default type.

Also reenable a test for scalar promotion.
==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
ac2af106;Matthew Johnson;2019-12-02 18:39:59 -0800;adjust scan docstring (thanks @shoyer)

==

jax/lax/lax_control_flow.py
==================
09f94a1e;Matthew Johnson;2019-12-02 17:44:58 -0800;add optional `length` argument to scan

==

jax/lax/lax_control_flow.py
tests/lax_control_flow_test.py
==================
51686f43;wang12tao;2019-12-02 16:07:23 -0800;Make get_compile_options API accept 2D device assignment.

==

jax/lib/xla_bridge.py
tests/xla_bridge_test.py
==================
32b5d6e9;Russell Power;2019-12-02 15:02:27 -0800;Memoize TPU driver backend to be consistent with other XLA clients. (#1798)

==

jax/lib/xla_bridge.py
==================
f6da1fcc;Stephan Hoyer;2019-12-02 12:55:22 -0800;Use a simpler code path for np.pad with mode='wrap' (#1781)
This code path avoids any calls to lax.rev(), and seems to make a small but
measurable performance improvement for some of use cases.
==

jax/numpy/lax_numpy.py
==================
441ad4db;Peter Hawkins;2019-12-02 15:18:04 -0500;Relax test tolerances for scipy test.

==

tests/lax_scipy_test.py
==================
8782860d;Peter Hawkins;2019-12-02 15:01:49 -0500;Relax test tolerances to fix test flakiness.

==

tests/lax_test.py
tests/scipy_stats_test.py
==================
f3c8af49;Peter Hawkins;2019-12-02 14:43:43 -0500;Fix bugs in handling of convolutions whose LHS has spatial size 0. (#1794)
* Fix bugs in handling of convolutions whose LHS has spatial size 0.

* Use onp.shape to compute shapes.

==

jax/lax/lax.py
jax/test_util.py
tests/lax_test.py
==================
f0d93333;Peter Hawkins;2019-12-02 14:21:10 -0500;Document functions in jax.nn. (#1795)

==

docs/jax.nn.rst
jax/nn/functions.py
==================
6d2eb679;Srinivas Vasudevan;2019-12-01 10:57:03 -0800;Add betaln, a wrapper for the Beta function (scipy.special.betaln). (#1788)
* Add betaln, a wrapper for the Beta function (scipy.special.betaln).

* Use infix operators for addition and multiplication.

==

jax/scipy/special.py
jax/scipy/stats/beta.py
tests/lax_scipy_test.py
==================
7ec2ac58;fehiepsi;2019-12-01 09:44:45 -0500;not use custom transform for gamma sampler

==

jax/random.py
tests/random_test.py
==================
0ebf8488;Tuan Nguyen;2019-11-28 11:54:29 -0800;Implement np.flip with axis = None (#1783)
* super minimal starter code

* Update optimizers.py

* implement flip with axis = None

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
fc73e50e;George Necula;2019-11-28 19:14:21 +0100;Merge pull request #1785 from gnecula/bug_fix3
Cleaned some test warnings.
==
==================
0bc081ec;George Necula;2019-11-28 10:05:20 +0100;Merge pull request #1766 from gnecula/jaxpr_pp
Changed api.make_jaxpr to return a TypedJaxpr
==
==================
3b97c5f7;George Necula;2019-11-28 09:00:55 +0100;Updated uses of make_jaxpr in new code

==

tests/api_test.py
==================
2b0b04fc;George Necula;2019-11-28 08:56:00 +0100;Merge remote-tracking branch 'upstream/master' into jaxpr_pp

==
==================
a47f365c;George Necula;2019-11-28 08:48:10 +0100;Cleaned some test warnings.
Specifically:
* lax_control_flow_test.py:...: DeprecationWarning: invalid escape sequence \(
* Deprecated assertRaisesRegexp, replace with assertRaisesRegex

==

tests/api_test.py
tests/lax_control_flow_test.py
tests/lax_test.py
tests/pmap_test.py
==================
0cb3b433;George Necula;2019-11-28 07:34:40 +0100;Change in how we print sorted params for eqns

==

jax/api.py
jax/core.py
jax/pprint_util.py
==================
115d365a;Matthew Johnson;2019-11-27 19:15:53 -0800;raise error if we do concrete aval FLOPs w/o remat

==

jax/interpreters/partial_eval.py
jax/lax/lax.py
==================
ac251046;Matthew Johnson;2019-11-27 15:25:49 -0800;make remat_call partial-eval into one remat_call

==

jax/interpreters/ad.py
jax/interpreters/partial_eval.py
tests/api_test.py
==================
b2b5049e;Matthew Johnson;2019-11-27 14:28:13 -0800;try remat_call partial-eval into two remat_calls
The idea here was for the resulting jaxpr to have a purely nonlinear
remat_call and a linear one with no primals to evaluate. (I wanted to
avoid having to recurse into all calls in _eval_primal in
backward_pass.) But the issue is that makes jaxprs not round-trippable,
since the first remat_call, depending only on constants, would get
partial-eval'd away at the first attempted round-trip. And we round-trip
in partial_eval_jaxpr, particularly for partial eval of scan. That meant
remat of scan didn't work, and that's no good!

==

jax/interpreters/ad.py
jax/interpreters/partial_eval.py
jax/interpreters/xla.py
jax/lax/lax_control_flow.py
tests/api_test.py
==================
9a852360;Matthew Johnson;2019-11-22 10:53:11 -0800;Add experimental rematerialization decorator
We want to allow users to control how reverse-mode autodiff saves values
from the forward pass. In particular, we want it to be easy to signal
that a function shouldn't have any of its intermediate residuals stored
for the backward pass, and instead those values should be recomputed
from the function's saved inputs. (This feature is especially handy for
accelerators on which memory access is much more expensive than FLOPs
are.) In JAX terms, since we implement reverse-mode as a composition of
forward-mode, partial evaluation, and transposition, we want users to
control how partial evaluation behaves.

See https://github.com/google/jax/pull/1749 for more.

Co-authored-by: Dougal Maclaurin <dougalm@google.com>

==

docs/jax.lax.rst
jax/abstract_arrays.py
jax/api.py
jax/core.py
jax/interpreters/ad.py
jax/interpreters/partial_eval.py
jax/interpreters/xla.py
jax/lax/lax.py
jax/lax/lax_control_flow.py
jax/linear_util.py
tests/api_test.py
==================
c4272283;George Necula;2019-11-27 17:16:21 +0100;Merge pull request #1780 from chr1sj0nes/chr1sj0nes-fix-nreps
Fix variable name in error message
==
==================
14b98d37;Peter Hawkins;2019-11-27 10:55:02 -0500;Remove degenerate non-contracting special case from jax.numpy.einsum. (#1778)
XLA knows how to simplify DotGenerals with no contracting dimensions. So I can't see any additional benefit for JAX having this special case, either directly or for transformations.
==

jax/numpy/lax_numpy.py
==================
43a1c00d;Chris Jones;2019-11-27 15:13:23 +0000;Fix variable name in error message

==

jax/interpreters/xla.py
==================
69314897;Matthew Johnson;2019-11-27 07:01:46 -0800;update version for pypi

==

jax/version.py
==================
96f075db;George Necula;2019-11-27 15:06:03 +0100;Merge pull request #1777 from gnecula/bug_fix
Add error checking that arguments of jvp are tuples
==
==================
e0706ff8;George Necula;2019-11-27 14:24:41 +0100;Relaxed check to allow both tuples and lists

==

jax/api.py
tests/api_test.py
==================
c1d8d3f7;George Necula;2019-11-27 13:12:24 +0100;Add error checking that arguments of jvp are tuples

==

jax/api.py
tests/api_test.py
tests/generated_fun_test.py
==================
b0ffbaf1;George Necula;2019-11-27 07:26:46 +0100;Fixed also a notebook that has gone stale

==

docs/notebooks/Writing_custom_interpreters_in_Jax.ipynb
==================
ec79adcc;Tom Hennigan;2019-11-26 21:54:36 +0000;source sync
PiperOrigin-RevId: 282633556

==

jax/experimental/optix.py
tests/optix_test.py
==================
da6a474a;Peter Hawkins;2019-11-26 22:47:03 -0500;Simplify jax.numpy.tensordot by using lax.dot_general. (#1775)

==

jax/numpy/lax_numpy.py
==================
5c96d83e;Peter Hawkins;2019-11-26 22:24:22 -0500;Simplify einsum implementation. (#1774)
XLA's DotGeneral operator has been generalized so we no longer need the _dot_general wrapper. Avoids the need for unnecessary reshapes.
==

jax/numpy/lax_numpy.py
==================
8df1ccf4;Peter Buchlovsky;2019-11-27 03:17:08 +0000;Make jax.numpy.broadcast_to consistent with numpy. (#1773)
* Make jax.numpy.broadcast_to consistent with numpy.

jax.numpy.broadcast(10.0, ()) should return array(10.0) and not 10.0.

* Improve broadcast_to test.

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
b7579492;Matthew Johnson;2019-11-26 17:06:57 -0800;fix pulldown bugs

==

jaxlib/BUILD
tests/api_test.py
==================
3ae4a413;Skye Wanderman-Milne;2019-11-26 12:44:09 -0800;Add "loops" BUILD target. (#1771)

==

jax/BUILD
==================
fbc9446a;Peter Hawkins;2019-11-26 14:09:35 -0500;Fix some missing docstrings for Numpy functions. (#1768)

==

jax/numpy/lax_numpy.py
==================
2867e4be;Matthew Johnson;2019-11-26 07:56:48 -0800;fix grad of jit caching bug
Co-authored-by: Dougal Maclaurin <dougalm@google.com>

==

jax/interpreters/ad.py
jax/interpreters/xla.py
jax/linear_util.py
tests/api_test.py
==================
7a9f1f3f;Peter Hawkins;2019-11-26 10:24:06 -0500;Pin the minimum jaxlib version in travis.yml. (#1767)

==

.travis.yml
==================
8547050b;George Necula;2019-11-26 15:13:07 +0100;Merge pull request #1765 from gnecula/bug_fix
Update minimum jaxlib to 0.1.36.
==
==================
2bb74b62;George Necula;2019-11-26 14:05:08 +0100;Ensure jaxpr.eqn.params are printed sorted, so we get deterministic output

==

jax/core.py
jax/pprint_util.py
jax/test_util.py
tests/api_test.py
==================
603258eb;George Necula;2019-11-26 13:56:58 +0100;Fixed a couple of tests

==

jax/test_util.py
tests/api_test.py
tests/lax_numpy_test.py
==================
5c15dda2;George Necula;2019-11-26 08:18:53 +0100;Changed api.make_jaxpr to return a TypedJaxpr
* A TypedJaxpr contains more useful information (consts, types)
* Also forced the instantiation of constants when producing the jaxpr.
  Before:
  >>>print(api.make_jaxpr(lambda x: 1.)(0.))
     lambda ; ; a.
     let
     in [*]}
  After this change:
  >>>print(api.make_jaxpr(lambda x: 1.)(0.))
     lambda ; ; a.
     let
     in [1.0]}

==

jax/api.py
jax/test_util.py
tests/api_test.py
tests/batching_test.py
tests/core_test.py
tests/lax_control_flow_test.py
tests/lax_numpy_indexing_test.py
tests/lax_numpy_test.py
==================
227a9122;George Necula;2019-11-26 08:16:53 +0100;Update minimum jaxlib to 0.1.36.
This is needed in part to pull in new Device.platform from Tensorflow.
See #1764.

==

jax/lib/__init__.py
==================
f415f266;Skye Wanderman-Milne;2019-11-25 16:23:40 -0800;Remove 'backend' argument from device_put. (#1762)
The appropriate Backend is instead inferred from the 'device' argument. This is a first step towards removing the 'backend' argument from more functions.
==

jax/api.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
jax/lib/xla_bridge.py
tests/api_test.py
==================
1b2350bf;Roy Frostig;2019-11-25 14:07:41 -0800;Merge pull request #1730 from google/kernel-example-test
enable kernel regression example test
==
==================
36c882ba;Matthew Johnson;2019-11-25 14:03:59 -0800;raise an error on jit-of-multi-host-pmap (#1761)
Co-authored-by: Skye Wanderman-Milne <skyewm@google.com>
==

jax/interpreters/xla.py
==================
82ce209a;Roy Frostig;2019-11-25 13:16:42 -0800;Merge branch 'master' into kernel-example-test

==
==================
34dfbc8a;Peter Hawkins;2019-11-25 11:48:45 -0500;Add error checking to PRNG CUDA kernel. (#1760)
Refactor error checking code into a common helper library.
==

jaxlib/BUILD
jaxlib/cublas.cc
jaxlib/cuda_prng_kernels.cu.cc
jaxlib/cusolver.cc
jaxlib/gpu_kernel_helpers.cc
jaxlib/gpu_kernel_helpers.h
==================
ace14bbb;Chris Jones;2019-11-25 14:00:48 +0000;Remove `join_pvals`
This function is appears to be unused.
==

jax/interpreters/partial_eval.py
==================
159690ae;George Necula;2019-11-25 09:08:38 +0100;Merge pull request #1758 from gnecula/bug_fix
Added notebook for PyTrees
==
==================
13210249;George Necula;2019-11-25 09:08:00 +0100;Minor edit

==

jax/tree_util.py
==================
8777864c;George Necula;2019-10-30 04:52:46 +0100;Minor edits

==

docs/notebooks/JAX_pytrees.ipynb
==================
b12a8019;George Necula;2019-10-29 08:56:39 +0100;Update docs/notebooks/JAX_pytrees.ipynb
Co-Authored-By: Stephan Hoyer <shoyer@google.com>
==

docs/notebooks/JAX_pytrees.ipynb
==================
4e89d43a;George Necula;2019-10-27 10:29:33 +0100;Added JAX pytrees notebook
Also added docstrings to the tree_util module.

==

docs/index.rst
docs/jax.experimental.vectorize.rst
docs/jax.random.rst
docs/jax.tree_util.rst
docs/notebooks/JAX_pytrees.ipynb
jax/tree_util.py
==================
3b7d92db;Peter Hawkins;2019-11-24 14:17:18 -0500;Add missing pybind11 dependency.

==

jaxlib/BUILD
==================
d1aa0187;Peter Hawkins;2019-11-24 13:13:39 -0500;Fix BUILD file formatting.

==

jaxlib/BUILD
==================
534d812b;Peter Hawkins;2019-11-24 13:06:23 -0500;Add a handwritten ThreeFry2x32 CUDA kernel. (#1756)
In principle, JAX should not need a hand-written CUDA kernel for the ThreeFry2x32 algorithm. In practice XLA aggresively inlines, which causes compilation times on GPU blow up when compiling potentially many copies of the PRNG kernel in a program. As a workaround, we add a hand-written CUDA kernel mostly to reduce compilation time.

When XLA becomes smarter about compiling this particular hash function, we should be able to remove the hand-written kernel once again.
==

WORKSPACE
build/BUILD.bazel
build/build.py
build/install_xla_in_source_tree.sh
jax/interpreters/batching.py
jax/lax/__init__.py
jax/lib/__init__.py
jax/random.py
jaxlib/BUILD
jaxlib/cublas.cc
jaxlib/cuda_prng.py
jaxlib/cuda_prng_kernels.cc
jaxlib/cuda_prng_kernels.cu.cc
jaxlib/cuda_prng_kernels.h
jaxlib/cusolver.cc
jaxlib/kernel_helpers.h
tests/random_test.py
==================
67038321;Peter Hawkins;2019-11-24 13:06:10 -0500;Revert support for building a non-GPU build with --config=cuda enabled. (#1757)
It turns out there are implicit CUDA dependencies inside the TF libraries used by JAX, so the attempt to disable GPU dependencies conditionally didn't work.
==

build/build.py
build/build_wheel_docker_entrypoint.sh
==================
45a1ba0b;Peter Hawkins;2019-11-23 12:28:26 -0500;Make more tests pass on TPU. (#1752)

==

tests/dtypes_test.py
tests/loops_test.py
tests/optix_test.py
==================
8f2a050e;Matthew Johnson;2019-11-22 18:06:10 -0800;fix cov test tol
Co-authored-by: Skye Wanderman-Milne <skyewm@google.com>

==

tests/lax_numpy_test.py
==================
9f86b53a;Skye Wanderman-Milne;2019-11-22 14:28:47 -0800;Revert LaxBackedNumpyTests.testCov to use all_dtypes

==

tests/lax_numpy_test.py
==================
a9d1b770;Peter Hawkins;2019-11-22 16:36:32 -0500;Relax test tolerances to reduce flakiness. (#1751)
* Relax test tolerances to reduce flakiness.

* Relax test tolerance for np.cov test.

==

tests/batching_test.py
tests/core_test.py
tests/lax_numpy_test.py
tests/lax_test.py
tests/linalg_test.py
==================
1dcddde4;Peter Hawkins;2019-11-22 16:06:56 -0500;Add jax.numpy.dtype as an alias of numpy.dtype. (#1750)

==

jax/numpy/lax_numpy.py
==================
3d1d140a;Skye Wanderman-Milne;2019-11-22 11:34:14 -0800;Disable failing test (#1744)

==

tests/lax_test.py
==================
6f3cb1c3;Skye Wanderman-Milne;2019-11-22 11:03:26 -0800;Add jax.devices(), etc. to the docs.

==

docs/jax.rst
jax/lib/xla_bridge.py
==================
b358c27c;Matthew Johnson;2019-11-22 10:54:03 -0800;replace x.shape with onp.shape(x) in random.py
fixes #1748 (thanks @vitchyr)

==

jax/random.py
tests/random_test.py
==================
20a7e7b3;Chris Jones;2019-11-22 16:08:30 +0000;Remove `as_abstract_val`.

==

jax/interpreters/partial_eval.py
==================
9c966f9f;Chris Jones;2019-11-22 15:19:01 +0000;Fix `as_abstract_value`.
The `JaxprTracerTuple` appears to no longer exist and the function could return `None` if `pv` was another type other than `AbstractValue`, instead of raising an error.
==

jax/interpreters/partial_eval.py
==================
15d276ce;Skye Wanderman-Milne;2019-11-22 10:41:59 -0800;Bump README to jaxlib 0.1.36

==

README.md
==================
dc5a599a;Thomas Keck;2019-11-22 02:51:57 +0000;Fix bug in jax repeat which caused a value error for repeat arguments containing 0. (#1740)

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
1314fb7c;Skye Wanderman-Milne;2019-11-21 18:34:28 -0800;Bump jaxlib version to 0.1.36 and update WORKSPACE.

==

WORKSPACE
jaxlib/version.py
==================
9dfb3cac;Peter Hawkins;2019-11-21 20:42:28 -0500;Relax test tolerances to fix flakiness. (#1743)

==

tests/lax_numpy_test.py
==================
39e17398;Skye Wanderman-Milne;2019-11-21 16:25:24 -0800;jaxlib build improvements (#1742)

==

build/Dockerfile
build/build_jaxlib_wheels.sh
==================
27aa76e6;Stephan Hoyer;2019-11-21 15:30:02 -0800;Add precision to jax.numpy functions that use lax.dot_general (#1728)
* Add precision to jax.numpy functions that use lax.dot_general

* Test precision argument

* check default precision

* test with jaxprs

* Document precision

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
eff7b45d;Peter Hawkins;2019-11-21 16:31:16 -0500;Add jit decorators to most functions in jax.scipy.linalg. (#1741)

==

jax/scipy/linalg.py
==================
c77cdb51;Skye Wanderman-Milne;2019-11-21 11:02:54 -0800;Bump README to jaxlib 0.1.35

==

README.md
==================
c601950b;Peter Hawkins;2019-11-21 13:52:08 -0500;Build Mac wheels for Python 3.8 with scipy 1.3.2. (#1739)
scipy 1.3.1 never had a Python 3.8 wheel.
==

build/build_jaxlib_wheels_macos.sh
==================
6b39104a;Roy Frostig;2019-11-21 10:40:04 -0800;Merge branch 'master' into kernel-example-test

==
==================
a8c5b49f;James Bradbury;2019-11-21 09:03:19 -0800;Merge pull request #1722 from google/jb/sinc-double-where
Use double-where trick to avoid NaNs in grad(sinc)
==
==================
a8a19e19;Peter Hawkins;2019-11-21 11:52:58 -0500;Implement batching rule for lax._select_and_gather_add (#1736)

==

jax/interpreters/batching.py
jax/lax/__init__.py
jax/lax/lax.py
tests/lax_test.py
==================
2b0cde36;Peter Hawkins;2019-11-21 10:48:53 -0500;Fix test failure for jax.numpy.signbit(bfloat16) on TPU. (#1735)

==

jax/numpy/lax_numpy.py
==================
c60f3fd6;Peter Hawkins;2019-11-21 09:51:26 -0500;Minor documentation fixes. (#1734)

==

README.md
docs/jax.numpy.rst
==================
ee36818a;Peter Hawkins;2019-11-20 22:43:46 -0500;Add bfloat16 support to JAX. (#1720)
bfloat16 support is still immature, but this PR adds some initial support.

Fixes #76, at least enough that we can declare it fixed and open specific issues for specific bfloat16 problems.

The main awkwardness that this change deals with is that classic NumPy doesn't understand bfloat16 promotion rules, so we must:

implement our own type promotion operators that understand bfloat16 types
wrap a number of the reference implementations in tests to temporarily cast to float32 for computation.

==

jax/abstract_arrays.py
jax/dtypes.py
jax/lax/lax.py
jax/lax_reference.py
jax/numpy/lax_numpy.py
jax/test_util.py
tests/lax_numpy_test.py
tests/lax_test.py
==================
b7d11ab9;Skye Wanderman-Milne;2019-11-20 15:58:22 -0800;Bump jaxlib version to 0.1.35

==

jaxlib/version.py
==================
16484352;Roy Frostig;2019-11-20 14:25:09 -0800;enable kernel regression example test

==

examples/examples_test.py
==================
ee297057;Stephan Hoyer;2019-11-20 12:35:10 -0800;Add jax.scipy.ndimage to online docs (#1724)

==

docs/jax.scipy.rst
==================
ad098220;Skye Wanderman-Milne;2019-11-20 10:59:54 -0800;Bump README to jaxlib 0.1.34

==

README.md
==================
db46a22b;Tzu-Wei Sung;2019-11-20 10:32:43 -0800;Implementation of np.signbit (#1627)
Implement `np.signbit`.
==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
23533454;Matthew Johnson;2019-11-20 09:12:15 -0800;only use one gensym in tracers_to_jaxpr
fixes a bug in #1721 revealed by additional internal testing

==

jax/interpreters/partial_eval.py
==================
9d120468;Peter Buchlovsky;2019-11-20 15:23:08 +0000;Fix typo

==

docs/notebooks/How_JAX_primitives_work.ipynb
==================
410ebfeb;Peter Buchlovsky;2019-11-20 11:46:54 +0000;Fix typo

==

docs/notebooks/How_JAX_primitives_work.ipynb
==================
68b7dc85;Matthew Johnson;2019-11-20 07:49:13 -0800;fix multi-host pmap, disambiguate nrep
When #1667 inlined a function into its caller, it mixed up two distinct
values referred to as `nrep` in the two functions: num_global_replicas
vs num_local_replicas. The result caused errors on multi-host setups.

Co-authored-by: Jonathan Heek <jheek@google.com>

==

jax/interpreters/pxla.py
==================
65f0556e;Stephan Hoyer;2019-11-19 17:14:09 -0800;Add support for scipy.ndimage.map_coordinates with order=0 and order=1 (#1711)
* Add support for scipy.ndimage.map_coordinates with order=1

Higher dimensional interpolation will be a bit trickier, but this should
already be useful.

* move around docstring

* dtype fixes, more tests

* fixup float32 tests

* Handle order=0

* Tests for errors from map_coordinates

==

jax/numpy/lax_numpy.py
jax/scipy/__init__.py
jax/scipy/ndimage.py
tests/scipy_ndimage_test.py
==================
1817cab0;James Bradbury;2019-11-19 16:47:32 -0800;Use double-where trick to avoid NaNs in grad(sinc)

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
b1888881;Skye Wanderman-Milne;2019-11-19 15:30:05 -0800;Bump jaxlib version to 0.1.33 and update WORKSPACE.
Includes XLA fixes for CPU psum.

==

WORKSPACE
jaxlib/version.py
==================
1fcebbaa;Matthew Johnson;2019-11-19 12:26:30 -0800;fix reference cycle in jaxpr tracing using weakrefs
As one step in tracing user code to a jaxpr using the machinery in
partial_eval.py, we construct a bipartite graph made of JaxprTracer
nodes, corresponding to values in the user code, and recipe nodes
,particularly those corresponding to jaxpr equations, representing
primitive operations. (This representation was put in place in #1224,
since when primitives only had single outputs we could identify each
primitive operation with the JaxprTracer value it produced.) This graph
had reference cycles because each equation recipe points to both its
input and output tracers (as a jaxpr eqn has both input and output vars)
and a tracer must be able to point to the equation recipe that produced
it (for us to toposort the graph from in_tracers to out_tracers in
tracers_to_jaxpr).

Those cycles caused memory leaks. This commit removes the strong
reference cycle using weakrefs. In particular, equation recipes only
hold weak references to their output tracers.

Before this change, we used the core.JaxprEqn struct both to represent
equations in jaxprs (where invars and outvars are instances of the
core.Var class) and to represent equation recipes (where invars and
outvars are instances of the partial_eval.JaxprTracer class). That was a
bit lazy. This commit distinguishes the two as separate JaxprEqn and
JaxprEqnRecipe structs.

Bug find and test code from @trevorcai. Thanks!

==

jax/core.py
jax/interpreters/partial_eval.py
jax/interpreters/pxla.py
jax/lax/lax_control_flow.py
tests/core_test.py
==================
5edda9e6;Matthew Johnson;2019-11-19 14:20:49 -0800;remove very old "what we're working on"

==

README.md
==================
68c05331;James Bradbury;2019-11-19 12:17:12 -0800;Merge pull request #1707 from google/jb/readme-jaxlib
Bump jaxlib version in README
==
==================
a3474fec;Matthew Johnson;2019-11-19 07:02:29 -0800;bump version for pypi

==

jax/version.py
==================
5c3b99d0;Peter Hawkins;2019-11-18 22:00:32 -0500;Implement the __pos__ operator on JAX arrays. (#1718)

==

jax/core.py
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
f95e3e96;Peter Hawkins;2019-11-18 22:00:23 -0500;Check for None in indexer dtype check. (#1717)

==

jax/numpy/lax_numpy.py
==================
6cf2e4b8;Peter Hawkins;2019-11-18 21:04:27 -0500;Add type check that indexers are integers or boolean values. (#1716)
Improves error if, say, a float type is passed as an indexer.
==

jax/numpy/lax_numpy.py
tests/lax_numpy_indexing_test.py
==================
d323431d;Peter Hawkins;2019-11-18 15:36:29 -0500;Relax test tolerance for core_test jvp tests. (#1714)

==

tests/core_test.py
==================
9679a879;Peter Hawkins;2019-11-18 15:35:07 -0500;Avoid out-of-bounds dereference for arity-0 nodes. (#1713)

==

jaxlib/pytree.cc
==================
42dd736a;Peter Hawkins;2019-11-18 14:51:10 -0500;Change scalar promotion rules to prefer array types over scalar types. (#1709)
* Change scalar promotion rules to prefer array types over scalar types.

Currently JAX does not treat Python scalars specially during type promotion. This means that, for example:
`1. + np.array([...], np.float32)`
ends up as an array of type np.float64. The `1.` is promoted to a default type (here np.float64), and the type promotion of a np.float64 and an np.float32 is an np.float64. This is unlike classic NumPy, which treats scalars specially during type promotion, in particular, preferring the type of an array over the type of a scalar.

This change adds a notion of weak_type to JAX avals. During type promotion, we prefer non-weak types, i.e., the type of the array in the example above, ignoring the type of the scalar.

In contexts where a Python scalar is to be promoted to a NumPy value, a default type is used (e.g., `np.float_`). This change also makes it possible to use 32-bit default types that differ from NumPy's default types. The JAX test suite passes with 32-bit default types. However, we do not yet enable this change or expose it in the API.

==

jax/abstract_arrays.py
jax/core.py
jax/dtypes.py
jax/interpreters/batching.py
jax/interpreters/xla.py
jax/lax/lax.py
jax/lax/lax_control_flow.py
jax/lib/xla_bridge.py
jax/numpy/lax_numpy.py
jax/numpy/linalg.py
jax/random.py
jax/test_util.py
tests/api_test.py
tests/batching_test.py
tests/dtypes_test.py
tests/lax_control_flow_test.py
tests/lax_numpy_test.py
tests/lax_test.py
tests/masking_test.py
tests/optimizers_test.py
tests/pmap_test.py
==================
397a244e;George Necula;2019-11-18 12:17:59 +0100;Merge pull request #1706 from gnecula/loops
An implementation of an experimental syntactic sugar for 'for' and `while` loops and conditionals.
==
==================
8ec6ea47;George Necula;2019-11-18 11:39:58 +0100;Implemented suggestions from code review.
* added example of while_range to the module docstring.
* wrap the very long lines

==

jax/experimental/loops.py
tests/loops_test.py
==================
f8823595;Anselm Levskaya;2019-11-17 00:19:24 -0800;fix lax.scan notes in gotchas notebook
Note that lax.scan is now jittable and differentiable in the Gotchas notebook.
==

docs/notebooks/Common_Gotchas_in_JAX.ipynb
==================
5fa68774;James Bradbury;2019-11-16 17:51:16 -0800;Bump jaxlib version in README

==

README.md
==================
063419ab;Matthew Johnson;2019-11-16 14:40:25 -0800;tweak test name (cf. #1704)

==

tests/pmap_test.py
==================
3978007b;Chase Roberts;2019-11-15 14:35:12 -0800;Explict typing

==

tests/pmap_test.py
==================
979a8d30;Chase Roberts;2019-11-15 14:33:39 -0800;Cast perm to tuple

==

jax/lax/lax_parallel.py
tests/pmap_test.py
==================
bbf8129a;Peter Hawkins;2019-11-16 13:51:42 -0500;Change test tolerance logic not to choose tolerance values based on f… (#1701)
* Change test tolerance logic not to choose tolerance values based on flags (in particular, --jax_enable_x64).

We would like to move away from having global flags to enable 64-bit mode. We therefore need other methods to select test tolerances. Instead, use a per-type default tolerance, and allow tests to pass per-type dictionaries of tolerances as atol and rtol values. Fix up a number of tolerances to make tests pass.

* Fix test tolerances.

* Fix dtype canonicalization for test tolerances.

* Relax core test_vjp tolerance.

==

jax/lax/lax_fft.py
jax/test_util.py
tests/api_test.py
tests/batching_test.py
tests/core_test.py
tests/fft_test.py
tests/lax_control_flow_test.py
tests/lax_numpy_einsum_test.py
tests/lax_numpy_test.py
tests/lax_scipy_test.py
tests/lax_test.py
tests/linalg_test.py
tests/masking_test.py
tests/multibackend_test.py
tests/nn_test.py
tests/optimizers_test.py
tests/random_test.py
tests/scipy_stats_test.py
==================
d549d44e;George Necula;2019-11-16 18:32:59 +0100;Improved documentation Also fix for the Python 2 iterators.

==

jax/experimental/loops.py
tests/loops_test.py
==================
64e186c3;George Necula;2019-11-16 18:05:45 +0100;Fix tests for Python 2 and for X64

==

jax/experimental/loops.py
tests/loops_test.py
==================
d24c374d;George Necula;2019-10-13 14:51:21 +0200;An implementation of an experimental syntactic sugar for 'for' loops.
See description in jax/experimental/loops.py.

==

docs/jax.experimental.loops.rst
docs/jax.experimental.rst
jax/experimental/loops.py
jax/interpreters/partial_eval.py
tests/loops_test.py
==================
9b853a42;Peter Hawkins;2019-11-16 11:01:36 -0500;Update XLA. (#1702)
Add support for building a CPU-only jaxlib with a CUDA-enabled toolchain.
==

WORKSPACE
build/build.py
build/build_wheel_docker_entrypoint.sh
==================
4fc76524;Peter Hawkins;2019-11-15 14:55:26 -0500;Drop protobuf dependency from `jax` package. It appears unused. (#1700)

==

setup.py
==================
f4aa5150;Peter Hawkins;2019-11-15 10:02:51 -0500;Move internal type-related functions into a new (internal) jax.types … (#1695)
* Move internal type-related functions into a new (internal) jax.types module.

Avoid calling onp type functions in lieu of the wrappers in jax.types. Currently these do the same thing, but future changes will make the behavior of the jax type functions diverge from the classic NumPy versions in some cases.

Move xla_bridge.canonicalize_dtype into jax.types, since it fits there more naturally.

* Rename jax.types to jax.dtypes.

* s/types/dtypes/ in tests.

==

jax/abstract_arrays.py
jax/api.py
jax/dtypes.py
jax/interpreters/xla.py
jax/lax/lax.py
jax/lax/lax_control_flow.py
jax/lax/lax_parallel.py
jax/lax_linalg.py
jax/lib/xla_bridge.py
jax/numpy/fft.py
jax/numpy/lax_numpy.py
jax/numpy/linalg.py
jax/random.py
jax/test_util.py
tests/lax_numpy_indexing_test.py
tests/lax_numpy_test.py
tests/lax_test.py
tests/linalg_test.py
tests/random_test.py
==================
3ac32713;Matthew Johnson;2019-11-14 21:37:28 -0800;improve docs on shape/dtype loop stability
also tweak how some error messages are printed, and corresponding tests

fixes #1686

==

jax/lax/lax_control_flow.py
tests/lax_control_flow_test.py
==================
dbf41348;Matthew Johnson;2019-11-14 21:48:18 -0800;Merge pull request #1697 from google/grad-argnums-error-message
improve grad error message without enough args
==
==================
728cb7fb;Matthew Johnson;2019-11-14 21:18:23 -0800;improve grad error message without enough args
fixes #1696

==

jax/api.py
tests/api_test.py
==================
be28700b;Matthew Johnson;2019-11-14 16:51:39 -0800;skip some tests on tpu

==

tests/lax_test.py
==================
73f7edba;Matthew Johnson;2019-11-14 16:30:38 -0800;Merge pull request #1694 from google/issue1688
fix shard_args logic, closes #1688
==
==================
c19e65b7;Matthew Johnson;2019-11-14 16:15:50 -0800;fix shard_args logic, closes #1688
Co-authored-by: Skye Wanderman-Milne <skyewm@google.com>

==

jax/interpreters/pxla.py
==================
e95098de;Skye Wanderman-Milne;2019-11-14 15:18:41 -0800;Update jax version to 0.1.51.

==

jax/version.py
==================
3f0c1cd9;android;2019-11-14 14:00:08 -0800;Add TPU Driver as JAX backend for high-performance access to Google Cloud TPU hardware. (#1675)

==

jax/lib/__init__.py
jax/lib/xla_bridge.py
==================
9ffdd6bd;Peter Hawkins;2019-11-14 16:18:00 -0500;Add a type check that verifies the lower and upper arguments to lax.fori_loop have equal types. (#1693)

==

jax/lax/lax_control_flow.py
tests/lax_control_flow_test.py
==================
cc0568ef;Peter Hawkins;2019-11-14 16:00:55 -0500;Remove test_util.check_raises_regexp. (#1692)
It does nothing that the builtin self.assertRaisesRegexp doesn't already do.
==

jax/test_util.py
tests/api_test.py
tests/lax_test.py
tests/pmap_test.py
==================
e670bd1a;Peter Hawkins;2019-11-14 15:51:27 -0500;Add stricter type checks for the start_indices arguments to dynamic_slice and dynamic_update_slice. (#1691)

==

jax/lax/lax.py
tests/lax_test.py
==================
6125157d;Peter Hawkins;2019-11-14 15:37:33 -0500;Add type checks that verify JVP primal inputs have the same types as tangent inputs, and JVP cotangent inputs have the same type as primal outputs. (#1690)

==

jax/api.py
tests/api_test.py
==================
ec89eb9e;George Necula;2019-11-14 18:05:43 +0100;Merge pull request #1685 from gnecula/bug_fix3
Strengthened type checking for while and cond
==
==================
ce2d7f6c;Peter Hawkins;2019-11-14 11:44:41 -0500;Fix the DeviceArray __repr__ function to include the dtype. (#1687)

==

jax/interpreters/xla.py
==================
112dfe51;Skye Wanderman-Milne;2019-11-14 08:11:31 -0800;Update DeviceArray.__repr__ so it works for subclasses. (#1680)

==

jax/interpreters/xla.py
==================
505b47c1;Matthew Johnson;2019-11-14 07:38:52 -0800;Merge pull request #1683 from google/axis-index-fix
patch lax.axis_index, add warning about soft_pmap
==
==================
c6d32705;George Necula;2019-11-14 12:54:30 +0100;Fixed tests for X64

==

docs/developer.rst
tests/lax_control_flow_test.py
==================
4bdfe5a6;George Necula;2019-11-14 12:26:41 +0100;Strengthened type checking for while and cond
See https://github.com/google/jax/issues/1681.

==

jax/lax/lax_control_flow.py
tests/lax_control_flow_test.py
==================
483553ff;Matthew Johnson;2019-11-14 00:22:25 -0800;patch lax.axis_index, add warning about soft_pmap

==

jax/api.py
jax/interpreters/pxla.py
tests/parallel_test.py
tests/pmap_test.py
==================
0981e755;Matthew Johnson;2019-11-13 22:22:11 -0800;Merge pull request #1682 from google/nested-pmap-fix
fix nested pmap bug (thanks @thenerdstation)
==
==================
87774de3;Matthew Johnson;2019-11-13 22:13:01 -0800;disable lax.axis_index because it's buggy

==

jax/interpreters/pxla.py
tests/parallel_test.py
tests/pmap_test.py
==================
a916c588;Matthew Johnson;2019-11-13 21:10:16 -0800;fix nested pmap bug (thanks @thenerdstation)
This would produce the wrong result (on say an 8 GPU machine):

  f = lambda x: pmap(pmap(pmap(lambda x: x)))(x)
  f(np.ones((2, 2, 2)))

The logic in _xla_shard, used for inner pmaps, was just incorrect. I
wasn't able to make it behave incorrectly for only doubly-nested pmaps,
in which case _xla_shard is called only once, and I believe it was okay
in that case because `axis_env.nreps // prod(axis_env.sizes) == 1` in
that case.

Also delete an unused function (pxla.replica_groups, replaced by
xla.axis_groups).

==

jax/interpreters/pxla.py
tests/pmap_test.py
==================
c4f6e54a;Skye Wanderman-Milne;2019-11-13 15:44:43 -0800;Update WORKSPACE to include TF build fix.

==

WORKSPACE
==================
9392824f;Matthew Johnson;2019-11-13 12:26:13 -0800;Merge pull request #1667 from google/cleanups
simplify [p]xla.py by in-lining single-caller function
==
==================
340d82e9;Trevor Cai;2019-11-13 18:25:39 +0000;[doc] Note that building jaxlib from source isn't always necessary (#1654)
* [doc] Note that building jaxlib from source isn't always necessary

Building jaxlib from source is time-consuming and the source of most
pain for building JAX. It's also not necessary (in my experience) for
pure-Python changes.

This commit adds notes to the 'building from source' documentation to
make this explicit.

* Move ``jaxlib`` skip instructions to top

==

docs/developer.rst
==================
44ccca05;Skye Wanderman-Milne;2019-11-13 10:05:58 -0800;Revert "Update bazel min version to 0.26.0."
It turns out we can't build TF with this bazel version yet.

This reverts commit 807a1958bb2a276f012901ba6cd9226371099005.

==

build/build.py
==================
807a1958;Skye Wanderman-Milne;2019-11-13 09:59:38 -0800;Update bazel min version to 0.26.0.
I think this was the first release including the --repo_env arg:
https://github.com/bazelbuild/bazel/commit/d7702b16eb4828b0fe0e92d559fc6de36ee757cc

==

build/build.py
==================
b566cc2a;Matthew Johnson;2019-11-13 08:36:34 -0800;Merge pull request #1674 from levskaya/linspace2
fix degenerate case behavior of linspace
==
==================
6cd995e3;Matthew Johnson;2019-11-12 18:38:07 -0800;allow tokens in op-by-op by calling into _xla_callable_args

==

jax/interpreters/xla.py
jax/lax/lax.py
jax/lax/lax_control_flow.py
jax/lax/lax_parallel.py
==================
84437839;Skye Wanderman-Milne;2019-11-12 18:14:42 -0800;Bump jaxlib version to 0.1.33 and update WORKSPACE.

==

WORKSPACE
jaxlib/version.py
==================
ddbdcfb9;android;2019-11-12 18:11:39 -0800;Add TPU Driver to jaxlib (#1673)

==

build/BUILD.bazel
build/install_xla_in_source_tree.sh
==================
350630fd;Anselm Levskaya;2019-11-12 16:40:29 -0800;fix degenerate case behavior of linspace

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
0d053f0e;Matthew Johnson;2019-11-12 07:44:53 -0800;temporarily revert #1658 due to TFP test failures
This commit unfortunately un-fixes #1571, but only until we sort out why a TF
Probvability test started failing.

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
938eb20b;Matthew Johnson;2019-11-12 06:55:01 -0800;improve DeviceArray.__repr__ with onp.array2string

==

jax/interpreters/xla.py
==================
c4101c56;Matthew Johnson;2019-11-12 06:18:43 -0800;fix DeviceArray repr (for google internal test)

==

jax/interpreters/xla.py
tests/api_test.py
==================
3d4bb775;Peter Hawkins;2019-11-11 20:11:28 -0500;Update jaxlib version in README.md. (#1669)

==

README.md
==================
07201502;Anselm Levskaya;2019-11-11 16:17:26 -0800;Merge pull request #1658 from levskaya/linspace
make linspace, logspace, geomspace jittable and differentiable in start and stop args
==
==================
03287304;Anselm Levskaya;2019-11-09 00:16:18 -0800;linspace, logspace, geomspace jittable and differentiable in start and stop args

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
d77cf175;Matthew Johnson;2019-11-11 15:17:11 -0800;add missing attribute in optix (for google tests)

==

jax/experimental/optix.py
==================
6f47ac00;Matthew Johnson;2019-11-11 15:07:46 -0800;fix xla.lower_fun and jax.xla_computation

==

jax/api.py
jax/interpreters/xla.py
==================
4aaf325d;Matthew Johnson;2019-11-11 07:02:36 -0800;simplify [p]xla.py by in-lining single-caller function
The functions xla._compile_jaxpr and pxla.compile_replicated only had one
caller each. The logic was confusing, and they had grown many arguments (and
needed more!).

By in-lining them we got a few other cleanups:
  - remove _parameter_or_create_token in favor of a common xla._xla_callable_args
  - fix a bug in the interaction between token inputs and arg tupling
  - finally plumb the user function name through to XLA metadata (!!)

==

jax/interpreters/pxla.py
jax/interpreters/xla.py
tests/pmap_test.py
==================
70612530;Matthew Johnson;2019-11-11 14:32:48 -0800;Merge pull request #1666 from google/xla-cleanups
minor cleanups in xla.py
==
==================
46db509b;Matthew Johnson;2019-11-09 17:08:54 -0800;rename TestSpec -> CallSpec to avoid warning

==

tests/core_test.py
==================
5ec07491;Matthew Johnson;2019-11-09 17:08:02 -0800;simplify xla op metadata, DeviceArray repr
Just minor cleanup.

==

jax/interpreters/xla.py
==================
5c41c0a4;Matthew Johnson;2019-11-11 13:41:13 -0800;minor test fixes

==

tests/lax_numpy_test.py
==================
a09b08f2;Matthew Johnson;2019-11-11 13:25:49 -0800;Merge pull request #1664 from google/scan-performance-bug
Hoist loop-invariant residuals out of scan in partial eval
==
==================
a73979f7;Matthew Johnson;2019-11-11 13:24:24 -0800;use onp not lnp in module-level scope
fixes google import
==

tests/lax_numpy_test.py
==================
0fa38ecc;Matthew Johnson;2019-11-11 13:04:36 -0800;use np.matmul and not `@` for py27

==

tests/lax_control_flow_test.py
==================
a9a6cf8a;Stephan Hoyer;2019-11-11 12:51:15 -0800;Faster test collection, second try (#1653)
* Faster test collection, second try

Follows @hawkinsp's suggestion from #1632 to rewrite everything in terms of
RNG factories, creating actual RNG functions *inside* each test method instead
of when they are collected.

* use np.testing.assert_allclose

==

jax/test_util.py
tests/batching_test.py
tests/fft_test.py
tests/lax_numpy_indexing_test.py
tests/lax_numpy_test.py
tests/lax_scipy_test.py
tests/lax_test.py
tests/linalg_test.py
tests/scipy_stats_test.py
==================
6434340d;Matthew Johnson;2019-11-11 07:45:31 -0800;Hoist loop-invariant residuals out of scan in partial eval
Fixes #810

Co-authored-by: James Bradbury <jekbradbury@google.com>

==

jax/lax/lax_control_flow.py
tests/lax_control_flow_test.py
==================
b1f59228;James Bradbury;2019-11-11 09:27:48 -0800;Merge pull request #1661 from mtthss/master
Expose global_norm in optix
==
==================
73bc34a2;Peter Hawkins;2019-11-11 09:25:50 -0500;Update XLA. (#1662)

==

WORKSPACE
==================
fd168752;Matteo Hessel;2019-11-11 13:27:35 +0000;Expose global_norm
The `global_norm` function might be used in user code to build custom chainable `optix` transformations.
==

jax/experimental/optix.py
==================
4d13b17c;Matteo Hessel;2019-11-11 13:20:18 +0000;Merge pull request #1 from google/master
Sync with google/jax
==
==================
08c77adf;Matthew Johnson;2019-11-08 20:10:49 -0800;Merge pull request #1650 from sharadmv/clip-fix
Fix np.clip broadcasting across a_min and a_max
==
==================
6c305f3f;Sharad Vikram;2019-11-08 14:12:28 -0800;Extend clip test to test broadcasting a_min and a_max

==

tests/lax_numpy_test.py
==================
6fa4cc02;Sharad Vikram;2019-11-08 13:15:42 -0800;Fix np.clip broadcasting

==

jax/numpy/lax_numpy.py
==================
7a9ea8a0;Matthew Johnson;2019-11-08 13:13:24 -0800;Merge pull request #1582 from sharadmv/custom-interpreter
Add custom interpreter notebook
==
==================
7bc2b087;Sharad Vikram;2019-11-08 13:11:17 -0800;Update description of eqn.parmas

==

docs/notebooks/Writing_custom_interpreters_in_Jax.ipynb
==================
4b66d957;Peter Hawkins;2019-11-08 12:49:07 -0800;Fix integer overflow for large matrices in linear algebra kernels. (#1648)

==

jaxlib/cusolver.cc
jaxlib/lapack.pyx
==================
1d815781;Matthew Johnson;2019-11-08 10:15:17 -0800;typo: use _prod not prod

==

jax/numpy/lax_numpy.py
==================
4be1d187;pzielinski-nyc;2019-11-07 17:03:03 -0500;Add missing parameter to make_tuple (#1642)

==

jax/interpreters/xla.py
==================
90dfa99e;Matthew Johnson;2019-11-07 10:43:42 -0800;Merge pull request #1641 from google/bayesflow-indexing-fix
fix indexing error after #1622 involving empty result
==
==================
bd851ee5;Matthew Johnson;2019-11-07 10:14:16 -0800;fix indexing error after #1622 involving empty result

==

jax/numpy/lax_numpy.py
tests/lax_numpy_indexing_test.py
==================
e4d4e4ee;James Bradbury;2019-11-07 08:32:44 -0800;Merge pull request #1620 from mtthss/master
Add optix to experimental
==
==================
c0776823;Peter Hawkins;2019-11-06 08:56:29 -0800;Disable complex eigvalsh test on TPU. (#1634)

==

tests/linalg_test.py
==================
b90f65e4;Peter Hawkins;2019-11-06 08:36:53 -0800;Fix transpose rule for psum. (#1633)
Add check_grads test for grad(pmap(psum(...))).
==

jax/lax/lax_parallel.py
tests/pmap_test.py
==================
270bde5b;George Necula;2019-11-06 07:15:12 -0800;Merge pull request #1614 from gnecula/scan_fixpoint
Reimplemented fixpoint computation for scan.
==
==================
02dfb577;Matthew Johnson;2019-11-06 05:51:03 -0800;Merge pull request #1631 from google/avoid-trivial-convert-element-types
avoid staging out some trivial convert_element_types
==
==================
67a9247e;Matthew Johnson;2019-11-05 16:52:46 -0800;avoid staging out some trivial convert_element_types

==

jax/lax/lax.py
==================
b62fe17a;Matthew Johnson;2019-11-05 16:25:53 -0800;update version number for pypi

==

jax/version.py
==================
077fe26f;George Necula;2019-11-05 15:00:21 -0800;A more obvious implementation, and a test.
Addressed review comments

==

jax/lax/lax_control_flow.py
tests/lax_control_flow_test.py
==================
d4a2a219;Peter Hawkins;2019-11-04 16:23:06 -0800;Fix behavior of np.logaddexp/logaddexp2 and scipy.special.logsumexp for inf and nan inputs. (#1626)

==

jax/numpy/lax_numpy.py
jax/scipy/special.py
tests/lax_numpy_test.py
tests/lax_scipy_test.py
==================
cf81c834;mtthss;2019-11-04 17:00:26 +0000;fix indexing of next random key

==

jax/experimental/optix.py
==================
8d1b5833;mtthss;2019-11-04 16:21:09 +0000;missing imports for grad_noise

==

jax/experimental/optix.py
==================
6b33d54b;mtthss;2019-11-04 16:05:20 +0000;rename  to

==

jax/experimental/optix.py
==================
b77d2a61;mtthss;2019-11-04 15:55:14 +0000;create noisy_sgd variant

==

jax/experimental/optix.py
==================
72eb6b33;mtthss;2019-11-04 15:43:17 +0000;Add gradient noise function

==

jax/experimental/optix.py
==================
1f40c9c4;Sharad Vikram;2019-11-03 15:54:05 -0800;Fix writing suggestions from mattjj

==

docs/notebooks/Writing_custom_interpreters_in_Jax.ipynb
==================
d946075f;Matthew Johnson;2019-11-01 15:51:09 -0700;Merge pull request #1622 from google/issue1621
avoid generating a trivial gather from numpy indexing
==
==================
71b34116;Matthew Johnson;2019-11-01 13:46:13 -0700;avoid generating a trivial gather from numpy indexing
fixes #1621

==

jax/numpy/lax_numpy.py
tests/lax_numpy_indexing_test.py
==================
e6ad9c29;Stephan Hoyer;2019-11-01 09:04:44 -0700;Docstring fixss for lax.custom_linear_solve (#1616)
Also add a new section for the np.fft module. These functions were previously
not appearing in the docs, because fftn is not exposed as np.fftn but only as
np.fft.fftn.
==

docs/jax.numpy.rst
jax/lax/lax_control_flow.py
==================
03554057;Matteo Hessel;2019-11-01 15:40:09 +0000;Add tests checking equivalence to optimizers.py

==

tests/optix_test.py
==================
7644b31d;Matteo Hessel;2019-11-01 15:39:19 +0000;Add build target for optix

==

jax/BUILD
==================
a3a59a44;Matteo Hessel;2019-11-01 15:38:24 +0000;Add optix to experimental
optix is a composable gradient processing and optimization library
==

jax/experimental/optix.py
==================
3e9ce2f6;Peter Hawkins;2019-11-01 10:41:51 -0400;Use --repo_env instead of --action_env to configure Python and CUDA. (#1619)
--action_env variables are passed to every build action. This means that if the variable changes, the entire build cache is invalidated. By contrast, --repo_env variables are only passed to repository rules and don't affect every action. In principle this means that we should be able to rebuild JAX for different Python versions without rebuilding 99% of the C++ code.

Update bazel release for build script to 0.29.1 (same as TensorFlow.)
==

build/build.py
==================
a6e4a369;Matthew Johnson;2019-11-01 06:53:01 -0700;Merge pull request #1618 from tomhennigan/patch-1
Import nn in jax/__init__.py.
==
==================
6f620983;Tom Hennigan;2019-11-01 09:28:48 +0000;Import nn in jax/__init__.py.

==

jax/__init__.py
==================
69238600;Matthew Johnson;2019-10-31 16:58:04 -0700;Merge pull request #1605 from google/memleaks
fix a leak where compiled results lived too long
==
==================
a9b110f0;Tuan Nguyen;2019-10-31 16:49:40 -0700;Implement Poisson distribution for jax.scipy.stats (#1608)
* starter code

* Update scipy_stats_test.py

* Update __init__.py

* Update scipy_stats_test.py

==

jax/scipy/stats/__init__.py
jax/scipy/stats/poisson.py
tests/scipy_stats_test.py
==================
d2156ea1;Matthew Johnson;2019-10-31 16:21:02 -0700;improve names, avoid double lookup (thanks @hawkinsp)

==

jax/linear_util.py
==================
8bcee8d4;Matthew Johnson;2019-10-30 14:57:00 -0700;fix a leak where compiled results lived too long
The original repro @levskaya showed us was essentially this OOM:

  for i in range(40):
    f = jit(lambda: 1. * np.ones((300, 1024, 1024)))
    f().block_until_ready()

Even though f was being rebound on every iteration, the cache entries
corresponding to the previous iterations of the loop were sticking around.

Instead, if the user drops all references to a function, we want to clear the
corresponding compilation cache entries (since they can never be used).

The fix here is to use a two-level cache for compiled code: the first level is
a WeakKeyDictionary keyed by the raw Python callable underlying the WrappedFun,
and the second level is a regular dictionary keyed by (transforms, params,
args). Because this logic is now present in linear_util.py:cache, the
implementations of WrappedFun.__eq__ and WrappedFun.__hash__ may be superfluous
now.

One unintended consequence is that this implementation now avoids using
fastcache.crlu_cache for the jit and pmap compilation caches. It was easier to
implement this logic in pure Python. We might want to revise this for
performance reasons.

This commit also incidentally fixed #1600.

==

jax/api.py
jax/interpreters/ad.py
jax/linear_util.py
tests/api_test.py
==================
2bab332e;Matthew Johnson;2019-10-31 14:59:56 -0700;Merge pull request #1613 from google/vmap-improvements
vmap improvements
==
==================
46fe76c2;Matthew Johnson;2019-10-31 14:47:16 -0700;tweak comment

==

jax/api.py
==================
979b3835;Matthew Johnson;2019-10-31 14:09:12 -0700;make vmap structured axes work for any pytree

==

jax/api.py
jax/api_util.py
jax/interpreters/ad.py
jax/tree_util.py
tests/api_test.py
tests/tree_util_tests.py
==================
40f65fa6;George Necula;2019-10-31 13:35:46 -0700;Reimplemented fixpoint computation for scan.
With James's help I tried to understand the purpose of the fixpoint
computations for scan and while. If I understand this correctly,
the fixpoint is monotonic and is guaranteed to terminate without
the suspicious-looking up-to-1000 iterations.

==

jax/lax/lax_control_flow.py
==================
d09571eb;Matthew Johnson;2019-10-31 13:20:32 -0700;add test case per reviewer comment

==

tests/api_test.py
==================
213b899e;Matthew Johnson;2019-10-31 13:04:12 -0700;check full error message

==

tests/api_test.py
==================
8aec519c;Matthew Johnson;2019-10-31 12:01:37 -0700;fix error

==

tests/api_test.py
==================
9923cefe;Matthew Johnson;2019-10-31 11:59:06 -0700;Merge branch 'vmap-improvements' of github.com:google/jax into vmap-improvements

==
==================
14acca7b;Matthew Johnson;2019-10-31 11:57:37 -0700;address reviewer comments, fix test error

==

jax/api.py
tests/api_test.py
tests/batching_test.py
==================
9d94c423;Matthew Johnson;2019-10-31 11:22:23 -0700;Update jax/api.py
Co-Authored-By: Stephan Hoyer <shoyer@google.com>
==

jax/api.py
==================
eae47b23;Matthew Johnson;2019-10-30 17:31:37 -0700;improve vmap error messages
fixes #705

==

jax/api.py
jax/interpreters/batching.py
tests/api_test.py
==================
b3e4a1a8;Peter Hawkins;2019-10-31 11:46:37 -0400;Update jaxlib build scripts to build Python 3.8.0 wheels. (#1612)

==

build/Dockerfile
build/build_jaxlib_wheels.sh
build/build_jaxlib_wheels_macos.sh
==================
33e5d073;Peter Hawkins;2019-10-31 10:12:37 -0400;Update XLA to fix another CUDA build problem. (#1610)

==

WORKSPACE
==================
cba5f229;Peter Hawkins;2019-10-31 08:28:51 -0400;Update XLA to fix CUDA build failure. (#1609)

==

WORKSPACE
==================
5858983f;Peter Hawkins;2019-10-30 22:56:46 -0400;Update XLA. (#1607)
Includes bfloat16 and Python 3.8 fixes.
==

WORKSPACE
==================
39daf07d;Stephen Tu;2019-10-30 19:29:56 -0700;Add trivial implementations of eigvals/eigvalsh (#1604)
* Add trivial implementations of eigvals/eigvalsh

The implementations simply delegate to eig/eigh.

* Enable eigvalsh test on TPU/GPU

==

jax/numpy/linalg.py
tests/linalg_test.py
==================
cbadfd41;Matthew Johnson;2019-10-28 15:20:49 -0700;allow unmapped vmap args to be arbitrary objects
fixes #183

==

jax/interpreters/batching.py
tests/api_test.py
==================
f5079a62;Matthew Johnson;2019-10-28 14:03:52 -0700;improve vmap docstring and tree prefix errors
fixes #795

==

jax/api.py
tests/api_test.py
==================
affa2dcc;Peter Hawkins;2019-10-30 15:50:00 -0400;Increment jax and jaxlib versions. (#1603)
* Update XLA version to https://github.com/tensorflow/tensorflow/commit/7acd3bb9d794e279c6d824f5553fee2703c16f35
* Remove XRT reference from jaxlib build.
==

WORKSPACE
build/install_xla_in_source_tree.sh
jax/version.py
jaxlib/version.py
==================
a986463c;Matthew Johnson;2019-10-30 11:51:06 -0700;Merge pull request #1585 from fehiepsi/mxstep
Support mxstep for ode
==
==================
57acdfe9;Peter Hawkins;2019-10-30 14:47:11 -0400;Disable LaxControlFlowTest.test_custom_root_with_custom_linear_solve. (#1601)

==

tests/lax_control_flow_test.py
==================
97944a40;Peter Hawkins;2019-10-30 13:41:53 -0400;Use log1p in definition of logaddexp2 to match logaddexp. (#1599)

==

jax/numpy/lax_numpy.py
==================
89c90923;Stephan Hoyer;2019-10-30 10:40:02 -0700;Add np.fft.ifftn (#1594)
Fixes GH1010
==

jax/lax/lax.py
jax/numpy/fft.py
tests/fft_test.py
==================
fcf5633f;Peter Hawkins;2019-10-30 12:16:35 -0400;Fix definition of jax.numpy.divmod for floating-point types. (#1597)

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
d7bdbdff;George Necula;2019-10-30 04:59:44 +0100;Merge pull request #1434 from joaogui1/better-documentation
Fixes the parameters descriptions in docstrings
==
==================
f7a44523;Peter Hawkins;2019-10-29 20:53:20 -0400;Add some type helpers to lax_numpy. (#1593)
Prefer to use jax.numpy type helpers rather than numpy type helpers in various places.
Cleanup in preparation for adding bfloat16 support to jax.
==

docs/jax.numpy.rst
jax/lax_linalg.py
jax/numpy/lax_numpy.py
jax/random.py
tests/lax_numpy_test.py
tests/linalg_test.py
tests/random_test.py
==================
5bcbce74;Stephan Hoyer;2019-10-29 16:00:00 -0700;Support closures in all arguments of lax.custom_root (#1570)
* WIP: linear solvers

* Draft of lax.linear_solve

* Refactor pytree munging inside lax.root.

The primitive's implementation and JVP rules are now 100% pytree free.

* Fixup linear_solve

* Linearize multiple times in _root_jvp to avoid zeros

* fix deftraced

* add a symmetric argument

* Fixup float64; add a test for symmetric/non-symmetric

* test zeros in linear_solve_jvp

* Revisions per review

* Adjust signature of linear_solve

* restore botched test

* variable names

* WIP: root solve jaxpr

* WIP more tests

* rewrite root

* Root works with jaxprs

* root -> custom_root

* WIP undefined tangent

* Delayed undefined JVP errors

* use raise_on_undefined_tangents inside define_implicit_gradient

* more tests on jvps with undefined tangents

* Remove define_implicit_gradient

* Support closures in custom_root

* revert api-test

* another test

* jit tests

* spelling

==

docs/jax.lax.rst
jax/lax/lax_control_flow.py
tests/lax_control_flow_test.py
==================
4595d436;Stephan Hoyer;2019-10-29 13:58:16 -0700;Re-enable some TPU tests in lax_control_flow_test (#1592)
Using higher precision matrix-multplication fixes most of them.

Two tests are still skipped.
==

tests/lax_control_flow_test.py
==================
76a8840f;James Bradbury;2019-10-29 13:23:30 -0700;Merge pull request #1591 from google/jb/ortho-init-fix
fix orthogonal initializer and reenable test
==
==================
f5abdafa;joaogui1;2019-10-29 15:53:18 -0300;Merge branch 'master' of https://github.com/google/jax into better-documentation

==
==================
a0cf4826;joaogui1;2019-10-03 16:01:41 -0300;Adds new functionality to wraps

==

jax/numpy/lax_numpy.py
jax/scipy/linalg.py
jax/scipy/special.py
jax/scipy/stats/bernoulli.py
jax/scipy/stats/beta.py
jax/scipy/stats/cauchy.py
jax/scipy/stats/dirichlet.py
jax/scipy/stats/expon.py
jax/scipy/stats/gamma.py
jax/scipy/stats/laplace.py
jax/scipy/stats/multivariate_normal.py
jax/scipy/stats/norm.py
jax/scipy/stats/pareto.py
jax/scipy/stats/t.py
jax/scipy/stats/uniform.py
==================
e150043f;James Bradbury;2019-10-29 11:40:47 -0700;Merge pull request #1528 from google/jb/momentum
Align momentum optimizer with conventional parameterization and add Nesterov
==
==================
ce34cb73;James Bradbury;2019-10-29 11:34:20 -0700;fix orthogonal initializer and reenable test

==

jax/nn/initializers.py
tests/nn_test.py
==================
51935623;James Bradbury;2019-10-29 11:08:14 -0700;split nesterov into its own optimizer

==

jax/experimental/optimizers.py
==================
18f8b6f8;Peter Hawkins;2019-10-29 13:50:28 -0400;Move gradient test tolerance specification to the correct check_grads call. (#1589)

==

tests/lax_control_flow_test.py
==================
ce5b8670;Peter Hawkins;2019-10-29 11:26:48 -0400;Delete XRT references from jax. (#1588)

==

jax/lib/__init__.py
jax/lib/xla_bridge.py
==================
0dd720cd;Peter Hawkins;2019-10-29 11:04:55 -0400;Disable some tests that fail. (#1587)
Add a BUILD rule for experimental/vectorize.py.
==

jax/BUILD
tests/fft_test.py
tests/lax_control_flow_test.py
tests/nn_test.py
==================
774012f2;Peter Hawkins;2019-10-29 10:19:41 -0400;Add test for pytree handling of subclasses of collections.namedtuple. (#1586)

==

tests/tree_util_tests.py
==================
4c966180;Matthew Johnson;2019-10-29 07:12:15 -0700;Merge pull request #1581 from google/issue1190
add test for fori_loop index batching
==
==================
8880e262;George Necula;2019-10-29 08:53:35 +0100;Use redthedocs links for Colabs (#1572)
Steer the documentation readers to readthedocs.
Also, minor fixes to the wording of How_jax_primitives_work, suggested by Dougal
==

README.md
docs/notebooks/Common_Gotchas_in_JAX.ipynb
docs/notebooks/How_JAX_primitives_work.ipynb
==================
7aa20ec2;fehiepsi;2019-10-29 00:03:36 -0400;support mxstep for ode

==

jax/experimental/ode.py
==================
e2e4e6e9;Sharad Vikram;2019-10-28 13:59:16 -0700;Fix title toc structure

==

docs/notebooks/Writing_custom_interpreters_in_Jax.ipynb
==================
5d569999;Sharad Vikram;2019-10-28 12:54:04 -0700;Add custom interpreter notebook

==

docs/index.rst
docs/notebooks/Writing_custom_interpreters_in_Jax.ipynb
==================
38d6bf5e;Matthew Johnson;2019-10-28 13:02:31 -0700;add test for fori_loop index batching
fixes #1190

==

tests/lax_control_flow_test.py
==================
b62c3449;Matthew Johnson;2019-10-28 08:09:53 -0700;Merge pull request #1578 from titaneric/master
Fix issue #1576
==
==================
6839f28c;chenyee;2019-10-28 22:37:01 +0800;Fix issue #1576

==

jax/lax/lax.py
==================
38e04080;James Bradbury;2019-10-27 09:58:09 -0700;Merge pull request #1573 from jonasrauber/crossentropy_fix
fixed cross-entropy losses in mnist examples (fixes #1023)
==
==================
f8c5d986;Jonas Rauber;2019-10-27 09:43:24 +0100;fixed cross-entropy losses in mnist examples (fixes #1023)

==

examples/differentially_private_sgd.py
examples/mnist_classifier.py
examples/mnist_classifier_fromscratch.py
examples/spmd_mnist_classifier_fromscratch.py
==================
7cbd58b6;George Necula;2019-10-24 10:10:04 +0200;Improved the type checking for uses of scan. (#1551)
* Improved the type checking for uses of scan.

Previous way of checking was done after flattening and got
easily confused by tuples of different shapes, or None.

Relates to https://github.com/google/jax/issues/1534.


==

jax/lax/lax_control_flow.py
tests/lax_control_flow_test.py
==================
67a89d2a;Peter Hawkins;2019-10-23 09:27:00 -0400;Relax test tolerance for float16 remainder test. (#1560)

==

tests/lax_numpy_test.py
==================
530cf7fd;Peter Hawkins;2019-10-23 09:23:54 -0400;Relax tolerance specification for reduction test. (#1559)

==

tests/lax_numpy_test.py
==================
12f6e18b;Peter Hawkins;2019-10-22 20:37:59 -0400;Relax tolerance of np.sinc test. (#1557)

==

tests/lax_numpy_test.py
==================
0d667d27;Peter Hawkins;2019-10-22 19:53:59 -0400;Add tests for float16 support in lax_test.py. (#1553)
* Add tests for float16 support in lax_test.py.

Make test tolerances per-type, rather than a single tolerance based on the x64 mode.
Don't test float16 on TPU because it doesn't support float16.
Rework a number of the gradient tests. For linear primitives, increase eps and use a per-type tol.

* Perform float16 sinh and cosh in float32 precision.
More tweaks to test tolerances to get tests to pass.

* Add float16 testing to lax_numpy_test.py as well.

* Fix tolerance computation for testReducer test.
Relax tolerance for polyval.

* Relax some test tolerances further.

* Further relax test tolerances.

* Another tolerance relaxation.

* Use decorator for the upcast to fp32 for computation pattern.

Relax test tolerance for float_power.

==

jax/lax/__init__.py
jax/lax/lax.py
jax/numpy/lax_numpy.py
jax/test_util.py
tests/lax_numpy_test.py
tests/lax_test.py
==================
9a093ad4;James Bradbury;2019-10-22 15:20:03 -0700;Merge pull request #1556 from trevorcai/gelu
Switch to gelu approximation in jax.nn
==
==================
b84caafa;Matthew Johnson;2019-10-22 13:01:18 -0700;bump version for pypi

==

jax/version.py
==================
d9b45ba3;Trevor Cai;2019-10-22 20:44:54 +0100;Switch to gelu approximation in jax.nn
Approximate GELU is much faster than exact GELU.

The @jarrett annotation has been removed, as experiments indicate that
jax.grad(gelu) is faster tahn jax.grad(jax.jarrett(gelu)) on CPU.

==

jax/nn/functions.py
==================
5b724e00;Stephan Hoyer;2019-10-21 18:03:36 -0700;Fix grad(jit(custom_linear_solve)) encounters ad_util.Zero in backwards pass (#1537)
Fixes https://github.com/google/jax/issues/1536

I wrote a regression test, but I could not figure how to trigger this directly
with triangular_solve alone.
==

jax/lax_linalg.py
tests/lax_control_flow_test.py
==================
0b1ab78d;Matthew Johnson;2019-10-21 17:31:07 -0700;Merge pull request #1549 from google/issue1548
make lax.broadcast_in_dim work on scalars
==
==================
2e590867;Matthew Johnson;2019-10-21 17:28:19 -0700;Merge pull request #1515 from google/multivariate-normal-iteration
try simplifying random.multivariate_normal api
==
==================
96272d5a;Matthew Johnson;2019-10-22 00:22:24 +0000;fix bad merge

==

tests/random_test.py
==================
2ec0168e;Matthew Johnson;2019-10-21 17:21:35 -0700;Merge pull request #1538 from jheek/fix-elu-grad-instability
Fix NaNs in grad(jax.nn.elu) for large positive inputs.
==
==================
d822d6bc;Skye Wanderman-Milne;2019-10-21 15:45:02 -0700;Update README to point to jaxlib-0.1.31

==

README.md
==================
0601b8cd;Matthew Johnson;2019-10-21 15:11:51 -0700;make lax.broadcast_in_dim work on scalars
fixes #1548

==

jax/lax/lax.py
tests/lax_numpy_test.py
==================
0ffcd769;George Necula;2019-10-21 23:24:16 +0200;Add sklearn to Travis, for documentation building. (#1547)
* Add sklearn to Travis, for documentation building.
* Add score_matching to auto-built notebooks

==

.travis.yml
docs/conf.py
docs/index.rst
==================
e5442d9e;Matthew Johnson;2019-10-21 12:22:47 -0700;Merge branch 'master' into multivariate-normal-iteration

==
==================
c485a3cc;Peter Hawkins;2019-10-21 13:47:36 -0400;Remove stale reference to lapax.py. (#1546)
Add some missing documentation references.
==

docs/jax.lax.rst
jax/BUILD
==================
d7ef8834;Peter Hawkins;2019-10-21 12:32:41 -0400;Use classic NumPy instead of JAX NumPy in multivariate random test harness. (#1545)
Avoids an initialization ordering problem.
==

tests/random_test.py
==================
1abf7cb2;Peter Hawkins;2019-10-21 11:41:28 -0400;Remove -Wno-c++98-c++11-compat directive from jaxlib BUILD file. (#1544)
We require C++14 now, so the directive is moot.
==

jaxlib/BUILD
==================
4732ef2a;Peter Hawkins;2019-10-21 11:39:14 -0400;Fix lax_reference implementations of erf_inv, conj, complex. (#1543)
It turns out you can set the tolerance for the erf_inv test much lower if you compare against the correct reference function... :-)

Move Bessel function tests into lax_test.py for consistency.
==

jax/lax_reference.py
tests/lax_scipy_test.py
tests/lax_test.py
==================
71ad514e;Matthew Johnson;2019-10-21 08:17:25 -0700;bump version for pypi

==

jax/version.py
==================
abe69909;Peter Hawkins;2019-10-21 10:56:54 -0400;Add some @jit decorators to non-primitive lax functions. (#1542)
Fix the tests so they don't refer to op.__name__, which no longer has a usable value if the function has been jitted.
==

jax/lax/lax.py
tests/lax_test.py
==================
9c23a95e;Peter Hawkins;2019-10-21 10:30:55 -0400;Add i0e and i1e Bessel functions. (#1541)

==

docs/jax.scipy.rst
jax/lax/lax.py
jax/scipy/special.py
tests/lax_scipy_test.py
==================
2bf799b6;Peter Hawkins;2019-10-21 10:05:59 -0400;Fix numpy version check that fails for development numpy versions. (#1540)
Numpy versions may contain strings if not a release build. Only look at the two major entries to avoid an exception.
==

jax/numpy/lax_numpy.py
==================
43be8d8e;root;2019-10-21 11:48:58 +0000;Fix NaNs in grad(jax.nn.elu) for large inputs.

==

jax/nn/functions.py
tests/nn_test.py
==================
0289536b;Stephan Hoyer;2019-10-20 18:10:03 -0700;lax.custom_linear_solve primitive (#1402)
* WIP: linear solvers

* Draft of lax.linear_solve

* Refactor pytree munging inside lax.root.

The primitive's implementation and JVP rules are now 100% pytree free.

* Fixup linear_solve

* Linearize multiple times in _root_jvp to avoid zeros

* fix deftraced

* add a symmetric argument

* Fixup float64; add a test for symmetric/non-symmetric

* test zeros in linear_solve_jvp

* Revisions per review

* Adjust signature of linear_solve

* restore botched test

* variable names

* jaxprize

* spelling

* Use np.dot instead of @

* linear_solve docstring, more tests

* Disable batching for root and linear_solve

* Fix linear_solve tests

* remove unused imports

* Rename to custom_linear_solve

* WIP: refactor

* fixup test for lazy transpose_solve error

==

jax/lax/lax_control_flow.py
tests/lax_control_flow_test.py
==================
1f4e45cd;Matthew Johnson;2019-10-20 21:14:48 +0000;tweak shape convention again

==

jax/random.py
tests/random_test.py
==================
ab6ac6c8;Matthew Johnson;2019-10-17 20:36:51 +0000;standardize shape handling in jax.random

==

jax/random.py
tests/random_test.py
==================
8a132b41;Matthew Johnson;2019-10-16 01:35:39 +0000;try simplifying random.multivariate_normal api

==

jax/random.py
tests/random_test.py
==================
5ecb2478;James Bradbury;2019-10-18 18:15:57 -0700;Fix momentum optimizer
The implementation of SGD with momentum in optimizers.py was wrong. Thanks to @sschoenholz for noticing!

For background, there are two common parameterizations of ordinary momentum:
- TensorFlow and Keras use `v = mu * v - eta * g; x = x + v` (which expands to e.g. `x3 = x0 - (eta0*mu^2 + eta0*mu + eta0)*g0 - (eta1*mu + eta1)*g1 - eta2*g2`)
- PyTorch and Sonnet use `v = mu * v + g; x = x - eta * v` (which expands to `x3 = x0 - (eta2*mu^2 + eta1*mu + eta0)*g0 - (eta2*mu + eta1)*g1 - eta2*g2 + x0`)
Other than their representation of internal state `v`, those expansions show that these two formulas only differ in how they're affected by changing learning rates.
(There are two analogous implementations for Nesterov momentum, again equivalent other than learning rate changes.)
The version of momentum in optimizers.py wasn't equivalent to any of these four (see https://cocalc.com/projects/c76fe1fe-6c09-4ff6-8666-c3556f3ea62d/files/2019-10-18-174244.sagews?session=default for derivations)
==

jax/experimental/optimizers.py
==================
39e09b86;Matthew Johnson;2019-10-18 16:17:19 -0700;Merge pull request #1524 from google/issue1521
broadcast arguments in jax.numpy.take_along_axis
==
==================
a0352f39;Matthew Johnson;2019-10-18 22:50:24 +0000;fix up broadcasting in take_along_axis

==

jax/numpy/lax_numpy.py
==================
03cd6564;Matthew Johnson;2019-10-18 15:30:02 -0700;Merge pull request #1523 from karthkk/master
- sign missing from loss function definition
==
==================
ae26cfb0;Peter Hawkins;2019-10-18 15:36:53 -0400;Remove stale "running the tests" link.

==

README.md
==================
694a3013;Matthew Johnson;2019-10-17 16:53:01 -0700;Merge pull request #1525 from google/issue1522
improve broadcast_to, add error checks
==
==================
1090e89a;Karthik Kumara;2019-10-17 16:00:35 -0700;- sign missing from loss function definition

==

examples/resnet50.py
==================
aa0692d3;Matthew Johnson;2019-10-17 23:23:08 +0000;improve broadcast_to, add error checks (fixes #1522)

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
cc137ced;Matthew Johnson;2019-10-17 22:38:28 +0000;broadcast arguments in take_along_axis, fixes #1521

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
tests/lax_test.py
==================
d674e1f4;Matthew Johnson;2019-10-17 21:14:56 +0000;add failing test for #1521

==

tests/lax_test.py
==================
eae59d0b;George Necula;2019-10-17 08:58:25 +0200;Moved all notebooks to docs/notebooks. (#1493)
* Moved all notebooks to docs/notebooks.

Now all notebooks are in the same place, thus all are subject
to auto-doc generation at readthedocs.io and to automated testing
with travis.

Some notebooks are too slow, exclude them at docs/conf.py:exclude_patterns.

Cleanup a bit the section headings in notebooks so that they show
up well in readtehdocs.io.

* Increase the cell timeout for executing notebooks
* Exclude also the neural network notebook from auto-generation (timing out)
* Disable the score_matching notebook from auto-doc (travis does not have sklearn)



==

README.md
docs/conf.py
docs/developer.rst
docs/index.rst
docs/notebooks/Neural_Network_and_Data_Loading.ipynb
docs/notebooks/XLA_in_Python.ipynb
docs/notebooks/maml.ipynb
docs/notebooks/neural_network_with_tfds_data.ipynb
docs/notebooks/score_matching.ipynb
docs/notebooks/vmapped_log_probs.ipynb
docs/requirements.txt
notebooks/README.md
notebooks/score_matching.ipynb
notebooks/vmapped log-probs.ipynb
==================
0db8b586;Matthew Johnson;2019-10-15 17:40:20 -0700;Merge pull request #1512 from google/issue1409
handle complex dtypes in psum
==
==================
2f858bde;Matthew Johnson;2019-10-15 22:55:35 +0000;handle complex dtypes in psum
fixes #1409

==

jax/lax/lax_parallel.py
tests/pmap_test.py
==================
1603a739;Matthew Johnson;2019-10-15 16:50:07 -0700;Merge pull request #1514 from google/issue1486
document pmap with pytrees, fixes #1486
==
==================
585cefc8;Matthew Johnson;2019-10-15 23:49:15 +0000;document pmap with pytrees, fixes #1486

==

jax/api.py
==================
74dc4bf7;James Bradbury;2019-10-15 16:46:13 -0700;Merge pull request #1419 from aeftimia/multivariate-normal
Multivariate normal distribution support
==
==================
1f45b5ca;Matthew Johnson;2019-10-15 16:43:42 -0700;Merge pull request #1513 from google/travis-conda-build-issue
try following jupyterlab/jupyter-renderers#212 to fix travis
==
==================
0eea9885;Matthew Johnson;2019-10-15 23:07:31 +0000;try following jupyterlab/jupyter-renderers#212 to fix travis

==

.travis.yml
==================
3711e0cf;Peter Hawkins;2019-10-15 16:09:15 -0400;Delete experimental/lapax. (#1511)
It's more likely to mislead users than anything else, given we recommend using LAPACK these days.
==

jax/experimental/lapax.py
tests/lapax_test.py
==================
06178d29;Peter Hawkins;2019-10-15 15:01:52 -0400;Move lax.tie_in inside lax.full_like onto the fill value instead the output of lax.full. (#1507)
Fixes a bug where constants associated with relu gradients were being hoisted out of loops and materialized, causing a fairly large performance penalty (~20%) for a Resnet-50 model in a loop using infeed.
==

jax/lax/lax.py
tests/lax_numpy_test.py
==================
2f4e8876;Alex Eftimiades;2019-10-15 14:35:40 -0400;fix indentation

==

jax/random.py
tests/random_test.py
==================
9ff9e9e3;Peter Hawkins;2019-10-15 10:25:55 -0400;Describe minimum OS version requirements in README.md. (#1508)

==

README.md
==================
d161e1ba;Peter Hawkins;2019-10-15 08:52:21 -0400;Add text to documentation and to jaxlib version check suggesting a pip update. (#1506)
* Add instructions to update `pip` to README.md.

* Add text that suggests upgrading pip if we see jaxlib 0.1.23.

* Remove extra text from README.md.

==

README.md
jax/lib/__init__.py
==================
5457775a;Peter Hawkins;2019-10-14 22:11:09 -0400;Merge pull request #1505 from hawkinsp/master
Add Token to core.pytype_aval_mappings.
==
==================
3035bf72;Peter Hawkins;2019-10-14 21:12:33 -0400;Add Token to core.pytype_aval_mappings.

==

jax/interpreters/xla.py
==================
d338449e;Stephan Hoyer;2019-10-14 13:48:56 -0700;Use collections.abc.Sequence in favor of collections.Sequence (#1504)
* Use collections.abc.Sequence in favor of collections.Sequence

The later will be removed in Python 3.8, which is due out any day now!
(There is currently a warning that appears when importing lax_numpy.)

* restore collections import

==

jax/numpy/lax_numpy.py
==================
4479e4b4;James Bradbury;2019-10-14 12:50:43 -0700;Merge pull request #1499 from joaogui1/readme
Fixes Readme links to notebooks
==
==================
c50495b2;Trevor Cai;2019-10-14 18:55:13 +0100;Fix List rendering in RTD for primitives.ipynb (#1501)
Colab doesn't require a newline before unordered list in Markdown; RTD
does.
==

docs/notebooks/How_JAX_primitives_work.ipynb
==================
16219358;Stephan Hoyer;2019-10-14 09:49:10 -0700;Remove unnecessary zero checks from JVP rules in lax_linalg (#1490)
I'm pretty sure all of these are dead code that can no longer be triggered,
e.g., as evidenced by their use of no longer existing `core.pack` and
`ad.TangentTuple`.
==

jax/lax_linalg.py
==================
2c596a9d;Peter Hawkins;2019-10-14 08:34:38 -0400;Merge pull request #1422 from j-towns/toposort-rm-dupes
Rm duplicates from end_nodes in toposort
==
==================
d6bc62bd;joaogui1;2019-10-13 20:30:32 -0300;Fixes Readme links to notebooks

==

README.md
==================
858a4119;George Necula;2019-10-13 09:34:51 +0200;Add a separate build matrix entry for documentation testing. (#1495)
* Add a separate build matrix entry for documentation testing.

This way we parallelize the unit tests with the documentation tests.


==

.travis.yml
==================
7939bad6;Alex Eftimiades;2019-10-12 10:16:23 -0400;Merge branch 'multivariate-normal' of https://github.com/aeftimia/jax into multivariate-normal

==
==================
164cb4e2;James Bradbury;2019-10-11 16:54:25 -0700;Merge pull request #1492 from joaogui1/dirichlet
Adds dirichlet to __init__.py, making it usable
==
==================
5585dda9;Skye Wanderman-Milne;2019-10-11 14:07:16 -0700;Change device_put to take a `device` argument instead of `device_num`. (#1463)

==

jax/api.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
jax/lib/__init__.py
tests/api_test.py
==================
245f4067;joaogui1;2019-10-11 16:25:23 -0300;Adds dirichlet to __init__.py, making it usable

==

jax/scipy/stats/__init__.py
==================
27afa128;Peter Hawkins;2019-10-11 09:16:02 -0400;Fix rendering of jax.eval_shape docs.

==

jax/api.py
==================
4ca8576e;Peter Hawkins;2019-10-10 16:24:40 -0400;Merge pull request #1489 from hawkinsp/master
Update XLA release to include GPU memory corruption fix.
==
==================
d238b1f4;Peter Hawkins;2019-10-10 16:22:37 -0400;Update XLA release to include GPU memory corruption fix.
https://github.com/tensorflow/tensorflow/commit/f616f0662c1703b31e78630fd4cfe638adb2642c

==

WORKSPACE
==================
78132c15;Peter Hawkins;2019-10-10 15:19:17 -0400;Document all_to_all and ppermute.

==

docs/jax.lax.rst
==================
dd72fd5d;Peter Hawkins;2019-10-10 13:49:50 -0400;Merge pull request #1485 from hawkinsp/master
Emit a better error if mismatched axis sizes are passed to pmap.
==
==================
66098189;Peter Hawkins;2019-10-10 13:13:21 -0400;Emit a better error if mismatched axis sizes are passed to pmap.

==

jax/interpreters/pxla.py
tests/pmap_test.py
==================
c8247786;Stephan Hoyer;2019-10-10 08:27:21 -0700;Speedup JVP for triangular solve (#1466)
* Speedup JVP for triangular solve

There is still room for improvement, e.g., by combining the currently separate
JVPs for a and b into a single expression (which will allow for saving an inner
triangular solve when both arguments are being differentiated), but this is
already significantly faster in the typical case of only solving a single
vector.

On my laptop's CPU, I measure 2.98 ms before vs 1.18 ms after on
a 500x500 matrix:

    rs = onp.random.RandomState(0)
    a = rs.randn(500, 500)
    b = rs.randn(500)

    @jax.jit
    def loss(a, b):
      return np.sum(jax.scipy.linalg.solve_triangular(a, b))
    grad = jax.jit(jax.grad(loss))

    %timeit jax.device_get(grad(a, b))

* comment

* Optimal order for left_side=False, too

* Test the JVP for lax_linalg.triangular_solve directly

==

jax/lax_linalg.py
tests/linalg_test.py
==================
e9f99189;Peter Hawkins;2019-10-10 10:56:35 -0400;Merge pull request #1481 from hawkinsp/master
Register OrderedDict as a pytree type.
==
==================
fffec814;Peter Hawkins;2019-10-10 10:19:43 -0400;Register OrderedDict as a pytree type.

==

jax/tree_util.py
tests/tree_util_tests.py
==================
ed1bd5fc;Alex Eftimiades;2019-10-10 09:29:57 -0400;test cases for ValueError with wrong shape; one test case with negative mean

==

jax/random.py
tests/random_test.py
==================
b2493a1e;George Necula;2019-10-10 09:03:01 +0200;Merge pull request #1474 from gnecula/documentation
Create developer documentation.
==
==================
4a075be6;Peter Hawkins;2019-10-09 21:09:16 -0400;Merge pull request #1478 from hawkinsp/infeed
Add experimental support for XLA infeed/outfeed.
==
==================
aad99b60;James Bradbury;2019-10-09 17:04:09 -0700;Merge pull request #1480 from google/jb/dot-general-transpose-precision
Preserve precision config in dot_general transpose rule
==
==================
9d2f25cf;James Bradbury;2019-10-09 17:02:11 -0700;add test

==

jax/lax/lax.py
tests/lax_test.py
==================
fb433fb9;James Bradbury;2019-10-09 16:25:37 -0700;preserve precision config in dot_general transpose

==

jax/lax/lax.py
==================
6e55c4e7;Dan Weaver;2019-10-09 15:00:27 -0700;Move variables inside functions to avoid flags errors, remove matplotlib dependency (#1479)

==

jax/experimental/ode.py
==================
1aa82ea6;Peter Hawkins;2019-10-09 16:52:09 -0400;Clarify comment about token passing.

==

jax/interpreters/xla.py
==================
0f8c33de;Peter Hawkins;2019-10-09 16:18:11 -0400;Add infeed test case.

==

tests/infeed_test.py
==================
c37cb503;Peter Hawkins;2019-10-09 15:27:50 -0400;Merge pull request #1477 from hawkinsp/master
Make eigh JVP work for batched inputs.
==
==================
b8a54736;Peter Hawkins;2019-10-09 15:05:54 -0400;Add experimental support for XLA infeed/outfeed.

==

jax/abstract_arrays.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
jax/lax/lax.py
==================
d83200ca;Peter Hawkins;2019-10-09 14:34:46 -0400;Make eigh JVP work for batched inputs.

==

jax/lax_linalg.py
tests/linalg_test.py
==================
361adfe4;Peter Hawkins;2019-10-09 13:32:16 -0400;Merge pull request #1464 from hawkinsp/master
Use the XLA HLO implementation of symmetric Eigendecomposition as a f…
==
==================
329a748a;George Necula;2019-10-09 19:02:32 +0200;Merge pull request #1471 from gnecula/test-docs
Fixed the readthedocs documentation build
==
==================
a9d95043;George Necula;2019-10-09 17:45:09 +0200;Fixes to the documentation
* Included "Building from source" in README.md
* Added references from docs/README.md to docs/developer.rst

==

README.md
docs/README.md
docs/developer.rst
==================
e42c0106;George Necula;2019-10-03 11:56:57 +0200;Create developer documentation.
    * Moved out of README.md some developer-only stuff to docs/developer.rst.
    * Added documentation about building the documentation

==

README.md
docs/conf.py
docs/developer.rst
docs/index.rst
==================
c9d984b3;George Necula;2019-10-09 13:44:13 +0200;Fixed the readthedocs documentation build
Had to extend the docs/requirements.txt file to install
matplotlb (needed by the Gotchas notebook) and ".",
needed by everything. This results in a reduction
of the sphinx warnings from 3300 to 1200!

==

docs/requirements.txt
==================
85927f01;James Bradbury;2019-10-08 17:26:17 -0700;Merge pull request #1456 from google/jb/no-more-dot
Remove `dot` primitive in favor of reusing `dot_general`
==
==================
6d29c4e3;James Bradbury;2019-10-08 14:23:30 -0700;remove dot primitive in favor of dot_general

==

jax/lax/lax.py
jax/lax/lax_parallel.py
==================
096a52a3;James Bradbury;2019-10-08 14:22:51 -0700;add dot_general masking rules

==

jax/lax/lax.py
tests/masking_test.py
==================
65888251;James Bradbury;2019-10-08 13:06:43 -0700;avoid more transposes in dot_general batch rule

==

jax/lax/lax.py
tests/batching_test.py
==================
1c731df8;Skye Wanderman-Milne;2019-10-08 14:40:51 -0700;Remove build_mac_jaxlib.yml again as it seems to cause workflow failures.

==

.github/workflows/build_mac_jaxlib.yml
==================
d99851af;Skye Wanderman-Milne;2019-10-08 14:39:36 -0700;Revert "Revert "Add a pylintrc to make it easier to use linter (#1442)""
This reverts commit 54807b42addba538cb0c1f18d7a5c2d08a952821.

==

jax/numpy/lax_numpy.py
pylintrc
==================
54807b42;Skye Wanderman-Milne;2019-10-08 14:28:14 -0700;Revert "Add a pylintrc to make it easier to use linter (#1442)"
This reverts commit a0bb2c0ea452975be76e0ba2c6055f5be4439aa3.

Temporarily reverting this to see if it's causing the github workflow failures.

==

jax/numpy/lax_numpy.py
pylintrc
==================
2308d0f2;Skye Wanderman-Milne;2019-10-08 14:20:40 -0700;Revert "Remove build_mac_jaxlib.yml for now to see if that's causing spurious workflows."
This reverts commit 59ae24e87459429f18b0acb6626a1fb3465c41c8.

==

.github/workflows/build_mac_jaxlib.yml
==================
d34d9eb1;James Bradbury;2019-10-08 13:30:07 -0700;Merge pull request #1462 from google/jb/fix-primitive-metadata
fix XLA metadata for primitives with many args
==
==================
62b459d1;Peter Hawkins;2019-10-08 16:09:50 -0400;Use the XLA HLO implementation of symmetric Eigendecomposition as a fallback for backends that don't have a custom kernel.

==

jax/lax_linalg.py
tests/linalg_test.py
==================
245d29b4;James Bradbury;2019-10-08 11:08:42 -0700;add test for the case that failed

==

tests/lax_control_flow_test.py
==================
bc0e7976;James Bradbury;2019-10-08 10:57:36 -0700;fix XLA metadata for primitives with many args

==

jax/core.py
jax/interpreters/partial_eval.py
jax/interpreters/xla.py
==================
59ae24e8;Skye Wanderman-Milne;2019-10-08 09:57:21 -0700;Remove build_mac_jaxlib.yml for now to see if that's causing spurious workflows.

==

.github/workflows/build_mac_jaxlib.yml
==================
d3fa506e;Skye Wanderman-Milne;2019-10-08 09:38:32 -0700;Bump jaxlib version to 0.1.31 and update WORKSPACE.

==

WORKSPACE
jaxlib/version.py
==================
6c6e90d0;George Necula;2019-10-08 17:41:36 +0200;Merge pull request #1455 from gnecula/colabs
Increase readthedocs/nbsphinx timeout
==
==================
c6ac94f8;George Necula;2019-10-08 17:20:02 +0200;Merge pull request #1457 from shoyer/readthedocs-yml
Add a .readthedocs.yml file
==
==================
b7335be2;Stephan Hoyer;2019-10-07 16:57:00 -0700;update to version 2 schema

==

.readthedocs.yml
==================
cd29780f;Roy Frostig;2019-10-07 16:55:17 -0700;minor README formatting and grammar adjustment

==

README.md
==================
f30fc7c6;Stephan Hoyer;2019-10-07 16:09:23 -0700;Add a .readthedocs.yml file
I think we need the leading dot for RTD to recognize it. We currently get
warnings in our build log:

"Configure your documentation builds! Adding a .readthedocs.yml file to your
project is the recommended way to configure your documentation builds. You can
declare dependencies, set up submodules, and many other great features."

==

.readthedocs.yml
==================
2b46e0db;James Bradbury;2019-10-07 12:00:54 -0700;Merge pull request #1446 from joaogui1/selu
[Done] Fixed selu activation
==
==================
41457633;George Necula;2019-10-07 18:07:55 +0200;Increase readthedocs/nbsphinx timeout
It seems tht RTD is timing out when compiling the How_JAX_primitives_work noteboook.

==

README.md
docs/conf.py
==================
a5063ee6;George Necula;2019-10-07 14:59:37 +0200;Merge pull request #1423 from gnecula/colabs
Added How_JAX_primitives_work colab
==
==================
505caaae;joaogui1;2019-10-04 22:39:35 -0300;fixed selu

==

jax/nn/functions.py
==================
a0bb2c0e;joao guilherme;2019-10-04 22:19:31 -0300;Add a pylintrc to make it easier to use linter (#1442)

==

jax/numpy/lax_numpy.py
pylintrc
==================
88911199;James Bradbury;2019-10-04 14:43:10 -0700;Merge pull request #1438 from google/jb/xla-debug-info
thread through some debug metadata to XLA
==
==================
4e6385f8;James Bradbury;2019-10-04 11:59:06 -0700;remove source lines (caching makes them ~useless)

==

jax/core.py
jax/interpreters/xla.py
==================
c4e41995;George Necula;2019-10-04 17:38:36 +0200;Fix typo in notebook JSON (#1441)
Perhaps this is the reason why readthedocs does not show the link to the notebook?
==

docs/notebooks/Common_Gotchas_in_JAX.ipynb
==================
d344c6f5;Alex Eftimiades;2019-10-04 09:57:17 -0400;Update jax/random.py
Fix typo

Co-Authored-By: James Bradbury <jekbradbury@google.com>
==

jax/random.py
==================
73144faf;George Necula;2019-10-04 11:58:07 +0200;Update docs/notebooks/How_JAX_primitives_work.ipynb
Co-Authored-By: James Bradbury <jekbradbury@google.com>
==

docs/notebooks/How_JAX_primitives_work.ipynb
==================
ef886c7f;George Necula;2019-10-04 11:56:06 +0200;Update docs/notebooks/How_JAX_primitives_work.ipynb
Co-Authored-By: James Bradbury <jekbradbury@google.com>
==

docs/notebooks/How_JAX_primitives_work.ipynb
==================
f2052132;Dan Weaver;2019-10-03 23:43:34 -0700;Fix typo in initial_step_size d2 calculation (#1428)

==

jax/experimental/ode.py
==================
f04f06f5;James Bradbury;2019-10-03 18:12:02 -0700;Merge pull request #1427 from trevorcai/doc
Move epsilon term in optimizers.rmsprop into sqrt
==
==================
b1120e4f;James Bradbury;2019-10-03 18:11:08 -0700;Merge pull request #1436 from google/jb/ortho-init-type
Fix initializers and add tests
==
==================
59343b1a;James Bradbury;2019-10-03 17:56:25 -0700;provide lax primitive + src line as XLA debuginfo

==

jax/core.py
jax/interpreters/xla.py
==================
5201c363;Fabian Pedregosa;2019-10-03 20:20:50 -0400;Typo: Gradeints -> Gradients

==

README.md
==================
e8bf56df;Stephan Hoyer;2019-10-03 14:27:23 -0700;Refactor pytree munging inside lax.root. (#1414)
* Refactor pytree munging inside lax.root.

The primitive's implementation and JVP rules are now 100% pytree free.

* Linearize multiple times in _root_jvp to avoid zeros

* Revisions per review

==

jax/lax/lax_control_flow.py
==================
7f98682f;Skye Wanderman-Milne;2019-10-03 14:21:28 -0700;Update README to point to jaxlib-0.1.30

==

README.md
==================
db3b0dd0;Roy Frostig;2019-10-03 14:02:45 -0700;fix missing delimiter in notebook source

==

docs/notebooks/Common_Gotchas_in_JAX.ipynb
==================
d13599e8;Stephan Hoyer;2019-10-03 12:23:12 -0700;Merge pull request #1425 from gnecula/colab_testing
Added support for testing Colab notebooks.
==
==================
aa35f8b0;James Bradbury;2019-10-03 12:06:07 -0700;more initializer aliases

==

jax/nn/initializers.py
==================
23f06b41;James Bradbury;2019-10-03 12:01:21 -0700;add initializer tests

==

tests/nn_test.py
==================
4210192d;James Bradbury;2019-10-03 12:01:13 -0700;fix two typos in orthogonal init

==

jax/nn/initializers.py
==================
0fdf3773;George Necula;2019-10-02 21:44:14 +0200;Switched testing to using sphinx (part of the documentation generation)

==

.travis.yml
README.md
docs/README.md
docs/conf.py
docs/notebooks/Common_Gotchas_in_JAX.ipynb
tests/notebooks_test.py
==================
57e39ce9;George Necula;2019-10-02 17:51:00 +0200;Added support for testing Colab notebooks.
Testing is done by running "jupyter nbconvert --to notebook" and
then parsing the resulting notebook to look for errors.

One can declare expected errors, and the test will fail if those
are missing.

In the process of doig this, found and fixed a bug in the autodiff_cookbook
notebook.

==

.travis.yml
README.md
docs/notebooks/autodiff_cookbook.ipynb
tests/notebooks_test.py
==================
2a8575bf;Skye Wanderman-Milne;2019-10-03 10:36:29 -0700;Bump jaxlib version to 0.1.30 and update WORKSPACE.

==

WORKSPACE
jaxlib/version.py
==================
22e32516;James Bradbury;2019-10-03 10:22:23 -0700;Merge pull request #1429 from google/jb/eig-debug-nans
fix debug_nans for multiple-result primitives
==
==================
d21efd3c;joaogui1;2019-10-03 11:04:09 -0300;Fixes the parameters descriptions

==

jax/numpy/lax_numpy.py
==================
7bc0f70f;George Necula;2019-10-03 11:59:51 +0200;Fix the title to show nicely in sphinx

==

docs/notebooks/How_JAX_primitives_work.ipynb
==================
75c22360;George Necula;2019-10-03 11:20:04 +0200;Addressed comments for the Colab.
* Cleaned up use of section levels
* Renamed ma to multiply_add and sq_add to square_add
* Other minor clarifications
* Separated the Colabs into Tutorials and Advanced Tutorials

==

.gitignore
docs/index.rst
docs/notebooks/How_JAX_primitives_work.ipynb
==================
51038457;James Bradbury;2019-10-02 16:35:42 -0700;unbreak debug_nans on jit

==

jax/interpreters/xla.py
==================
dd1e132e;James Bradbury;2019-10-02 16:10:27 -0700;test that debug_nans actually finds NaNs

==

tests/debug_nans_test.py
==================
d174fd66;James Bradbury;2019-10-02 16:08:05 -0700;fix config.update when absl is enabled

==

jax/config.py
==================
efc3a2c3;James Bradbury;2019-10-02 15:55:09 -0700;address comments

==

tests/debug_nans_test.py
==================
be4e156a;James Bradbury;2019-10-02 15:51:15 -0700;use setUp and tearDown

==

tests/debug_nans_test.py
==================
459bd969;James Bradbury;2019-10-02 15:02:15 -0700;add basic tests

==

tests/debug_nans_test.py
==================
ee3fe5f5;James Bradbury;2019-10-02 14:15:11 -0700;fix debug_nans for multiple-result primitives

==

jax/interpreters/xla.py
==================
c18d765c;Trevor Cai;2019-10-02 19:18:49 +0100;Move epsilon term in optimizers.rmsprop into sqrt
The TensorFlow rmsprop code puts epsilon into the sqrt.
This makes a large difference on e.g. Deep RL settings, which tend to
use very large values of epsilon.

==

jax/experimental/optimizers.py
==================
c1057f77;Alex Eftimiades;2019-10-02 11:39:49 -0400;minor readability cleanup

==

jax/random.py
==================
ea67fa8f;Alex Eftimiades;2019-10-02 11:08:17 -0400;fix failing tests with full covariance matrix

==

jax/random.py
tests/random_test.py
==================
e3597384;Stephan Hoyer;2019-10-02 07:44:16 -0700;Merge pull request #1424 from necula01/documentation1
Fixed links to Colabs in docs/notebooks
==
==================
6744389d;George Necula;2019-10-02 15:48:33 +0200;Fixed links to Colabs in docs/notebooks
This is related to recent change https://github.com/google/jax/pull/1121.

==

README.md
==================
ad3f25b0;Alex Eftimiades;2019-10-02 09:25:55 -0400;small cleanup and retrigger tests

==

jax/random.py
tests/random_test.py
==================
454320e9;George Necula;2019-10-02 14:41:28 +0200;Added How_JAX_primitives_work colab

==

docs/index.rst
docs/notebooks/How_JAX_primitives_work.ipynb
==================
db1c04b7;James Bradbury;2019-10-02 00:20:18 -0700;Merge pull request #1420 from trevorcai/tn_minval
Use finfo(dtype).tiny as uniform minval
==
==================
a44c1caf;Trevor Cai;2019-10-01 22:28:31 +0100;Use finfo(dtype).tiny as uniform minval
Otherwise, using the default clopen uniform for truncated_normal
introduces a slight shift of the empirical mean.

==

jax/random.py
==================
b2b10a3c;Alex Eftimiades;2019-10-01 08:42:09 -0400;Multivariate normal support
Tested with inverse transform and KS test

==
==================
f66aa275;Jamie Townsend;2019-10-01 17:56:44 +0100;Rm duplicates from end_nodes in toposort

==

jax/util.py
==================
675bfd54;Stephan Hoyer;2019-09-30 11:29:27 -0700;Fixup colab notebook URLs (#1417)
* Fixup colab notebook URLs

* wording

==
==================
29d18fdc;Stephan Hoyer;2019-09-30 11:17:59 -0700;wording

==

notebooks/README.md
==================
98054472;Stephan Hoyer;2019-09-30 11:15:37 -0700;wording

==

notebooks/README.md
==================
08254fe5;Stephan Hoyer;2019-09-30 11:12:01 -0700;Fixup colab notebook URLs

==

docs/conf.py
notebooks/README.md
==================
eb0137be;Skye Wanderman-Milne;2019-09-27 17:37:44 -0700;Add optional `tuple_args` argument to xla_computation.
This is useful when using JAX to create an HLO module that is compiled
and executed elsewhere.

Also fixes a bug in the `tuple_args` logic.

==

jax/api.py
jax/interpreters/xla.py
tests/api_test.py
==================
9bd7330e;Stephan Hoyer;2019-09-30 11:00:02 -0700;Notebooks on RTD (#1121)

==

.gitignore
docs/conf.py
docs/index.rst
docs/notebooks/Common_Gotchas_in_JAX.ipynb
docs/notebooks/autodiff_cookbook.ipynb
docs/notebooks/quickstart.ipynb
docs/requirements.txt
notebooks/Common_Gotchas_in_JAX.ipynb
notebooks/autodiff_cookbook.ipynb
==================
064014b5;James Bradbury;2019-09-28 21:43:25 -0400;Merge pull request #1374 from google/jb/abs-jvp
Improve numerics of abs jvp (and softplus)
==
==================
90fdf640;Peter Hawkins;2019-09-28 18:43:34 -0400;Merge pull request #1415 from hawkinsp/master
Update README to point to jaxlib 0.1.29.
==
==================
7a96e502;Peter Hawkins;2019-09-28 18:42:52 -0400;Update README to point to jaxlib 0.1.29.

==

README.md
==================
e4c44143;Peter Hawkins;2019-09-28 15:17:20 -0400;Merge pull request #1413 from hawkinsp/master
Update Jaxlib version to 0.1.29.
==
==================
1428c11a;Peter Hawkins;2019-09-28 15:05:41 -0400;Update Jaxlib version to 0.1.29.
Bump XLA version. Enable C++14 mode since it is required by the new XLA version.

==

WORKSPACE
build/build.py
jaxlib/version.py
==================
a1fcae37;Peter Hawkins;2019-09-28 14:01:00 -0400;Merge pull request #1410 from hawkinsp/master
Remove xla_bridge.shape_of and xla_bridge._JaxComputationBuilder.Para…
==
==================
9ac5aa1e;Skye Wanderman-Milne;2019-09-27 14:38:16 -0700;Add jax.local_devices() and jax.host_ids().

==

jax/api.py
jax/lib/xla_bridge.py
==================
9cf7a063;Peter Hawkins;2019-09-27 18:08:55 -0400;Remove xla_bridge.shape_of and xla_bridge._JaxComputationBuilder.Parameter, which are unused.

==

jax/lib/xla_bridge.py
==================
9d4a1584;Matthew Johnson;2019-09-27 12:47:39 -0700;tweak comment in lax.root

==

jax/lax/lax_control_flow.py
==================
c33e8cb2;Matthew Johnson;2019-09-27 12:17:47 -0700;Merge pull request #1339 from shoyer/solvers
lax.root, a primitive for differentiable root finding
==
==================
03793a8a;Skye Wanderman-Milne;2019-09-27 11:50:21 -0700;Fix pmap error message.

==

jax/interpreters/pxla.py
tests/pmap_test.py
==================
840effcc;Skye Wanderman-Milne;2019-09-27 11:27:24 -0700;nanmean + nanprod only work on floating-point types.

==

tests/lax_numpy_test.py
==================
d6a9202c;Skye Wanderman-Milne;2019-09-27 11:17:55 -0700;test_util._cast_to_shape fix

==

jax/test_util.py
==================
b82673dc;James Bradbury;2019-09-27 12:11:18 -0400;add check_dtypes

==

tests/nn_test.py
==================
01f81875;Xiayun Sun;2019-09-27 17:00:38 +0100;[Issue1379] convert number predicates to boolean (#1395)
* convert number predicates to boolean by checking whether they are equal to zero

* one more test

* try relative import for python 2.7

* try fixing circular import in python 2.7 take 2

* simplify test; add test for wrong type

* more comprehensive tests; block collection type

* use numpy to avoid recursive imports

==

jax/lax/lax_control_flow.py
tests/lax_control_flow_test.py
==================
226c9e9c;Skye Wanderman-Milne;2019-09-26 17:10:49 -0700;nanmean fix

==

jax/numpy/lax_numpy.py
==================
796d369e;Skye Wanderman-Milne;2019-09-26 14:51:24 -0700;Remove licenses() rule comment in BUILD files.
Internal tooling doesn't like it.

==

jax/BUILD
jax/tools/BUILD
jaxlib/BUILD
==================
dc2ee0de;Skye Wanderman-Milne;2019-09-19 11:02:34 -0700;Add support for multihost pmaps.
All participating hosts are assumed to be running the same pmap
code. Conceptually, this can be considered a single pmap over an array
sharded on its leading pmapped dimension across the hosts. Each host
passes its input shard to its pmapped function call, which returns the
corresponding output shard (i.e. an array of the same leading
dimension size). However, any collective operations will be run across
the entire "global" array.

If the `devices` argument to pmap is None, the pmap is assumed to be
running across all hosts visible to XLA (as returned by
jax.host_count()). Each host can pass in an input array of leading
dimension size equal to or less than the number of devices local to
that host. Note that this doesn't change the current behavior for
single-host platforms. If `devices` are specified, the participating
hosts are dictated by the devices' host_ids, and each host must pass
in an input array of leading dim size equal to the number of local
participating devices.

Implementation-wise, each host independently compiles the computation,
which we assume yields the same executable on all hosts (follow-up
work will add more error checking). The hosts must know the global
axis size of the sharded array, e.g. to provide the correct replica
count to XLA. This is equal to the length of `devices` if specified,
but if not, pmap is recursively called (with `devices` specified) to
use `psum` to compute the global axis size.

==

jax/api.py
jax/interpreters/pxla.py
jax/lib/xla_bridge.py
==================
e7b09cfb;Matthew Johnson;2019-09-26 11:57:27 -0700;Merge pull request #1404 from google/remove-extra-newline
remove extra newline to help copybara
==
==================
c04f5664;Matthew Johnson;2019-09-26 11:56:22 -0700;remove extra newline to help copybara

==

jax/BUILD
==================
2206be29;Skye Wanderman-Milne;2019-09-18 17:21:57 -0700;Put XLA computation arguments in a tuple if there are many arguments.
This works around a TPU issue. This is only done for computations produced by jit or pmap, not primitive or nested computations.

==

jax/interpreters/pxla.py
jax/interpreters/xla.py
tests/api_test.py
tests/pmap_test.py
==================
762b602f;Matthew Johnson;2019-09-26 06:48:42 -0700;Merge pull request #1394 from j-towns/fix-scatter-caching
Ensure all ops get cache hits on second op-by-op mode call
==
==================
57d9fd6a;Jamie Townsend;2019-09-26 13:39:35 +0200;Googly indentation

==

jax/lax_linalg.py
tests/lax_control_flow_test.py
==================
806ebd4e;Jamie Townsend;2019-09-26 13:34:57 +0200;Fix and test for fori_loop op-by-op caching

==

jax/lax/lax_control_flow.py
tests/lax_control_flow_test.py
==================
b24d6cac;Jamie Townsend;2019-09-26 11:25:51 +0200;Ensure LU decomposition cache hits in op-by-op

==

jax/lax/lax_control_flow.py
jax/lax_linalg.py
==================
41d8a72d;Stephan Hoyer;2019-09-25 16:16:01 -0700;whitespace

==

jax/lax/lax_control_flow.py
==================
4b53ea25;Stephan Hoyer;2019-09-25 16:13:01 -0700;slightly cleaner

==

jax/lax/lax_control_flow.py
==================
760d696c;Stephan Hoyer;2019-09-25 16:04:15 -0700;error messages

==

jax/lax/lax_control_flow.py
tests/lax_control_flow_test.py
==================
854aa287;Stephan Hoyer;2019-09-25 16:02:25 -0700;notation

==

jax/lax/lax_control_flow.py
==================
8b1a60ee;Stephan Hoyer;2019-09-25 15:51:52 -0700;Revert hack from lax_linalg.py

==

jax/lax_linalg.py
tests/lax_control_flow_test.py
==================
6fda7be0;Stephan Hoyer;2019-09-25 15:48:49 -0700;revert structure of lax.root

==

jax/lax/lax_control_flow.py
==================
5ca9f0a6;Stephan Hoyer;2019-09-25 15:43:27 -0700;Revert "WIP: remove solve"
This reverts commit 7eaca4d7d5c0eafba4d0813ec36a00a270650bff.

==

jax/lax/lax_control_flow.py
tests/lax_control_flow_test.py
==================
6978591a;Peter Hawkins;2019-09-25 16:55:23 -0400;Merge pull request #1386 from Helw150/will/nanMeanAndNanTests
Nan Mean and Adds Nan Reducers to testing
==
==================
d4fa91c3;Matthew Johnson;2019-09-25 10:44:32 -0700;Merge pull request #1398 from dsweaver/master
Add ode library to BUILD file
==
==================
fb6ac0c7;Matthew Johnson;2019-09-25 10:44:14 -0700;Merge pull request #1396 from kochkov92/patch-1
Fixed typo in initial_step_size method.
==
==================
cd61fbfc;Daniel Weaver;2019-09-25 16:19:58 +0000;Add ode library to BUILD file

==

jax/BUILD
==================
7eaca4d7;Stephan Hoyer;2019-09-25 09:15:14 -0700;WIP: remove solve

==

jax/lax/lax_control_flow.py
tests/lax_control_flow_test.py
==================
3610c4ae;Dima Kochkov;2019-09-25 10:30:19 -0400;Fixed typo in initial_step_size method.
See the reference in the docstring for details.
==

jax/experimental/ode.py
==================
d2d05768;Jamie Townsend;2019-09-25 16:19:26 +0200;Ensure cache hits for gcd, lcm

==

jax/numpy/lax_numpy.py
==================
7c979e7c;Jamie Townsend;2019-09-25 15:59:52 +0200;Always test for cache misses on second op-by-op call

==

jax/test_util.py
==================
a44d8e99;Stephan Hoyer;2019-09-24 22:48:15 -0700;restore altered jit test

==

tests/api_test.py
==================
fd975b61;Stephan Hoyer;2019-09-24 22:46:27 -0700;Merge branch 'master' into solvers

==
==================
0f69e45e;Stephan Hoyer;2019-09-24 22:44:02 -0700;fix abstract eval rule

==

jax/lax/lax_control_flow.py
tests/lax_control_flow_test.py
==================
b9ff2086;Stephan Hoyer;2019-09-24 22:41:17 -0700;fixes

==

jax/lax/lax_control_flow.py
jax/lax_linalg.py
==================
ac904929;Stephan Hoyer;2019-09-24 21:00:32 -0700;Add a linear solve test

==

tests/lax_control_flow_test.py
==================
ad03bafb;Skye Wanderman-Milne;2019-09-06 11:45:47 -0700;Change `jit` to take Device object instead of device ordinal.
This also changes the name of the argument to `device` from `device_assignment`.

==

jax/api.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
jax/lib/__init__.py
jax/lib/xla_bridge.py
tests/api_test.py
==================
298d838b;Stephan Hoyer;2019-09-23 14:55:11 -0700;Update error message for eigh.

==

jax/lax_linalg.py
==================
f62b9d5c;Skye Wanderman-Milne;2019-09-24 18:23:09 -0700;Disable eigh test on TPU.

==

tests/linalg_test.py
==================
f9b9146a;Jamie Townsend;2019-09-24 19:20:12 +0200;Ensure lax.scatter cache hits in op-by-op mode

==

jax/lax/lax.py
==================
b70a7800;Alex Eftimiades;2019-09-23 16:15:41 -0400;multivariate normal support

==

jax/random.py
==================
ba5bcf2a;Roy Frostig;2019-09-23 14:34:00 -0700;Merge pull request #1390 from google/issue1372
add a "last" symbol for vmap axis specs, use it in `api.jacfwd`
==
==================
180f280e;Roy Frostig;2019-09-23 13:36:36 -0700;Merge branch 'master' into issue1372

==
==================
d1c66614;Roy Frostig;2019-09-23 13:35:52 -0700;add a "last" symbol for vmap axis specs, use it in `api.jacfwd`. tests and fixes #1372
Co-authored-by: Matthew Johnson <mattjj@google.com>

==

jax/api.py
jax/interpreters/batching.py
tests/api_test.py
==================
e1c68484;Peter Hawkins;2019-09-23 13:16:43 -0400;Merge pull request #1388 from hawkinsp/master
Use square(x) instead of pow(x, 2) in div JVP.
==
==================
03fb88e4;Helw150;2019-09-23 10:04:31 -0700;TODOs and wrong name

==

jax/numpy/lax_numpy.py
jax/test_util.py
==================
92c42ea1;Peter Hawkins;2019-09-23 12:46:15 -0400;Use square(x) instead of pow(x, 2) in div JVP.

==

jax/lax/lax.py
tests/linalg_test.py
==================
3d21393d;Helw150;2019-09-23 08:53:49 -0700;PR Response Changes

==

jax/numpy/lax_numpy.py
jax/test_util.py
==================
86a3cd5f;Peter Hawkins;2019-09-23 06:10:00 -0700;Merge pull request #1385 from romanngg/patch-4
Make `assertAllClose` work with non-array types.
==
==================
c312729d;Helw150;2019-09-22 21:38:34 -0700;Refactor and Test based on comments from old PR

==

jax/numpy/lax_numpy.py
jax/test_util.py
tests/lax_numpy_test.py
==================
58ed2e31;Roman Novak;2019-09-22 15:32:12 -0700;Make `assertAllClose` work with non-array types.
In our application this would make comparing trees with other entries like Nones and enums easier. I may be missing some other issues though, let me know if this change makes sense!
==

jax/test_util.py
==================
fa0a684a;James Bradbury;2019-09-21 10:11:53 -0400;address comments

==

tests/nn_test.py
==================
949e1ddf;Helw150;2019-09-21 01:24:48 -0700;Weird Cherry Pick Remnant

==

jax/numpy/lax_numpy.py
==================
12de8145;Helw150;2019-03-14 14:47:41 +0400;Simplify nanmean with logical not

==

jax/numpy/lax_numpy.py
==================
9ef53120;James Bradbury;2019-09-21 01:04:26 -0400;add regression tests

==

tests/nn_test.py
==================
17e5783e;Matthew Johnson;2019-09-20 20:45:01 -0700;fix import problems

==

tests/linalg_test.py
tests/pmap_test.py
==================
db694bed;Matthew Johnson;2019-09-20 16:20:25 -0700;Merge pull request #1381 from google/issue1361
don't over-instantiate literals
==
==================
1a14772e;Matthew Johnson;2019-09-20 15:48:39 -0700;comment typo fixes

==

jax/interpreters/partial_eval.py
==================
fafe94fa;Matthew Johnson;2019-09-20 15:42:05 -0700;add test for #1361

==

tests/lax_control_flow_test.py
==================
36b5af51;Matthew Johnson;2019-09-20 15:35:43 -0700;don't over-instantiate literals, fixes #1361
Co-authored-by: Dougal Maclaurin <dougalm@google.com>

==

jax/interpreters/partial_eval.py
==================
f5fd2b3e;Matthew Johnson;2019-09-20 10:38:35 -0700;Merge branch 'master' of github.com:google/jax

==
==================
16de5eab;Matthew Johnson;2019-09-20 10:28:08 -0700;Merge pull request #1378 from google/issue1369
add JaxprTrace.post_process_map
==
==================
fc3a3ac0;James Bradbury;2019-09-20 09:27:47 -0700;Merge pull request #1349 from xysun/issue1233
Support for non-scalar np.repeat arguments (fixes #1233)
==
==================
de97ea15;Matthew Johnson;2019-09-20 07:01:01 -0700;add JaxprTrace.post_process_map, fixes #1369

==

jax/interpreters/partial_eval.py
tests/pmap_test.py
==================
5c5560c8;Matthew Johnson;2019-09-20 07:01:01 -0700;add JaxprTrace.post_process_map, fixes #1369

==

jax/interpreters/partial_eval.py
==================
6fd938d8;xysun;2019-09-20 10:25:16 +0100;no more nested loops of dynamic_update_slice!

==

jax/numpy/lax_numpy.py
==================
16484ccb;Roy Frostig;2019-09-19 15:02:03 -0700;add a "Citing JAX" section to the README. fixes #1359

==

README.md
==================
8784e588;Matthew Johnson;2019-09-19 14:25:31 -0700;Merge pull request #1371 from shoyer/cond-docstring
Minimal docstring for lax.cond
==
==================
942d4e72;James Bradbury;2019-09-18 23:55:40 -0700;restore more stable softplus

==

jax/nn/functions.py
==================
b39179c8;James Bradbury;2019-09-18 23:55:31 -0700;better abs jvp

==

jax/lax/lax.py
==================
7f60da95;Stephan Hoyer;2019-09-18 11:39:55 -0700;Minimal docstring for lax.cond
This could be improved further by adding Args/Returns, but this should suffice
for most purposes.

==

jax/lax/lax_control_flow.py
==================
d11b17a2;Matthew Johnson;2019-09-18 06:46:02 -0700;Merge pull request #1276 from dpfau/master
Added custom jvp for np.linalg.slogdet
==
==================
daf5b1cb;David Pfau;2019-09-18 13:08:27 +0100;Relaxed test tolerance even more

==

tests/linalg_test.py
==================
fd4c3029;David Pfau;2019-09-18 12:28:57 +0100;Further relaxed the tolerance of slogdet grad test

==

tests/linalg_test.py
==================
f25cfafe;David Pfau;2019-09-18 11:05:17 +0100;Reduced tolerance for slogdet grad test

==

tests/linalg_test.py
==================
480f461e;Matthew Johnson;2019-09-17 18:00:48 -0700;Merge pull request #1255 from dsweaver/master
Pass check_vjp, add VJP grad and Jac, use fun(y0, t, *args) syntax
==
==================
981109c6;Matthew Johnson;2019-09-17 17:44:27 -0700;Merge pull request #1358 from nkitaev/issue1330
Reduce memory usage for argmax (fixes #1330)
==
==================
1e8746ab;David Pfau;2019-09-17 19:03:50 +0100;Shrink largest test in slogdet grad

==

tests/linalg_test.py
==================
7a347ded;David Pfau;2019-09-17 18:58:34 +0100;Added TODO to fix slogdet grad for complex types

==

jax/numpy/linalg.py
==================
3c18245e;David Pfau;2019-09-17 18:57:51 +0100;Removed complex types from slogdet grad test

==

tests/linalg_test.py
==================
dda0c806;David Pfau;2019-09-17 18:55:11 +0100;Added test case for sloget gradient

==

tests/linalg_test.py
==================
145b2c31;Matthew Johnson;2019-09-17 08:34:01 -0700;bump version number for pypi

==

jax/version.py
==================
ac53afa5;Matthew Johnson;2019-09-16 17:29:40 -0700;Merge pull request #1360 from google/automasking
tweaks to simplify masked jaxprs, rnn test
==
==================
99b9e485;Matthew Johnson;2019-09-16 16:30:42 -0700;python2 fix for ShapeExpr slicing

==

jax/interpreters/masking.py
jax/lax/lax.py
==================
6662da82;Matthew Johnson;2019-09-16 15:47:43 -0700;tweaks to simplify masked jaxprs, rnn test

==

jax/interpreters/masking.py
jax/lax/lax.py
jax/lax/lax_control_flow.py
tests/masking_test.py
==================
13b1bca9;Matthew Johnson;2019-09-16 14:49:31 -0700;prevent device_put from being staged into jaxprs

==

jax/interpreters/xla.py
==================
0e7ea7e3;Nikita Kitaev;2019-09-16 14:30:28 -0700;Reduce memory usage for argmax (fixes #1330)

==

jax/numpy/lax_numpy.py
==================
4d7f41ba;Peter Hawkins;2019-09-16 16:57:50 -0400;Merge pull request #1357 from hawkinsp/master
Temporarily remove `jit` decorator on gather/scatter ops.
==
==================
45a02f39;Peter Hawkins;2019-09-16 13:57:07 -0700;Temporarily remove `jit` decorator on gather/scatter ops.

==

jax/numpy/lax_numpy.py
jax/ops/scatter.py
==================
3e5f7869;David Pfau;2019-09-16 21:27:55 +0100;Fixed prefix for np.linalg.solve

==

jax/numpy/linalg.py
==================
36aaaf9f;David Pfau;2019-09-16 20:54:04 +0100;Merge branch 'master' into master

==
==================
d30108d7;David Pfau;2019-09-16 20:52:36 +0100;Added jit to slogdet
This resolves the prior merge conflict
==

jax/numpy/linalg.py
==================
d691f812;Peter Hawkins;2019-09-16 12:21:38 -0400;Merge pull request #1356 from hawkinsp/master
Don't issue NaNs for LU decomposition of singular matrices.
==
==================
b54f8099;Peter Hawkins;2019-09-16 08:45:10 -0700;Don't issue NaNs for LU decomposition of singular matrices.

==

jax/lax_linalg.py
tests/linalg_test.py
==================
3d870fdd;Matthew Johnson;2019-09-15 18:58:57 -0700;Merge pull request #1354 from shoyer/shape-error
Don't reuse SyntaxError in masking.py
==
==================
4f5dcb00;Stephan Hoyer;2019-09-15 14:51:14 -0700;Don't reuse SyntaxError in masking.py
This exception type is really intended for errors in *Python* syntax. In
particular, IPython will add extra lines to the stack-trace to try to show
the original line of Python where the error came from.

Compare:

    In [2]: raise ValueError
    ---------------------------------------------------------------------------
    ValueError                                Traceback (most recent call last)
    <ipython-input-2-e4c8e09828d5> in <module>
    ----> 1 raise ValueError

    ValueError:

    In [3]: raise SyntaxError
    Traceback (most recent call last):

      File "/Users/shoyer/miniconda3/envs/jax-py37/lib/python3.7/site-packages/IPython/core/interactiveshell.py", line 3326, in run_code
        exec(code_obj, self.user_global_ns, self.user_ns)

      File "<ipython-input-3-52c234f9b487>", line 1, in <module>
        raise SyntaxError

      File "<string>", line unknown
    SyntaxError

So I think it's better just to define our own `ShapeSyntaxError`.

==

jax/interpreters/masking.py
==================
0bbf1151;Matthew Johnson;2019-09-15 14:29:36 -0700;Merge pull request #1353 from google/automasking
automasking updates
==
==================
6e22b418;Matthew Johnson;2019-09-15 14:11:15 -0700;skip problematic tests on tpu

==

tests/lax_numpy_indexing_test.py
==================
b71181d3;Matthew Johnson;2019-09-13 16:30:22 -0700;start writing nesting test

==

jax/interpreters/masking.py
jax/lax/lax.py
tests/masking_test.py
==================
28329964;Matthew Johnson;2019-09-13 14:36:33 -0700;add a 'monomorphic dim' symbol, bug fixes

==

jax/api.py
jax/interpreters/masking.py
jax/lax/lax.py
tests/masking_test.py
==================
78c70ecd;Matthew Johnson;2019-09-11 21:57:54 -0700;add dynamic shape envs

==

jax/api.py
jax/interpreters/masking.py
tests/masking_test.py
==================
d1531a88;Matthew Johnson;2019-09-15 10:16:07 -0700;Merge pull request #1352 from google/issue1350
fix broadcasting bug in rem jvp, fixes #1350
==
==================
e945c9c1;Matthew Johnson;2019-09-15 09:24:00 -0700;add some 'manual' lax.rem autodiff tests

==

tests/lax_test.py
==================
5b6b72c2;Matthew Johnson;2019-09-15 08:45:58 -0700;fix broadcasting bug in rem jvp, fixes #1350

==

jax/lax/lax.py
==================
0f03afc5;xysun;2019-09-14 22:32:45 +0100;python2.7 compatible

==

jax/numpy/lax_numpy.py
==================
175226e7;xysun;2019-09-14 22:07:54 +0100;refactor tests

==

tests/lax_numpy_test.py
==================
f356e376;xysun;2019-09-14 22:01:36 +0100;simplify test

==

tests/lax_numpy_test.py
==================
3c2003b2;xysun;2019-09-14 21:57:46 +0100;jit works!

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
c8eb5f65;xysun;2019-09-14 21:24:28 +0100;pretty much works

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
0171eb7c;David Pfau;2019-09-14 14:35:27 +0100;Replace jvp for det with jvp for slogdet

==

jax/numpy/linalg.py
==================
c2750c1b;David Pfau;2019-09-14 14:30:45 +0100;Extended jvp for det to handle inputs with >2 dims

==

jax/numpy/linalg.py
==================
bfd70b96;Stephan Hoyer;2019-09-13 13:46:01 -0700;Relax tolerance (apparently needed on Travis)

==

tests/lax_control_flow_test.py
==================
b7b53285;Peter Hawkins;2019-09-13 11:16:01 -0700;Merge pull request #1346 from hawkinsp/master
Add a DeviceArray._unstack() method that unpacks an array along its m…
==
==================
a4793e1a;Peter Hawkins;2019-09-13 11:08:17 -0700;Merge pull request #1343 from hawkinsp/gather
JIT-compile index and index-update expressions.
==
==================
ae329dcd;Peter Hawkins;2019-09-13 13:44:11 -0400;Add a DeviceArray._unstack() method that unpacks an array along its major dimension.
Use it to implement pxla's shard_arg method for DeviceArrays; this is faster than slicing out each element one by one.

==

jax/interpreters/pxla.py
jax/numpy/lax_numpy.py
==================
723456bc;Peter Hawkins;2019-09-13 13:39:39 -0400;Slice objects are unhashable, so unpack them into tuples for forming static arguments.

==

jax/numpy/lax_numpy.py
==================
5ffddc18;Peter Hawkins;2019-09-13 10:37:41 -0400;JIT-compile index and index-update expressions.
Improves the performance of indexing in op-by-op mode.

==

jax/numpy/lax_numpy.py
jax/ops/scatter.py
==================
db5b922f;Stephan Hoyer;2019-09-12 16:00:08 -0700;Test and fix higher order derivatives in root

==

jax/lax/lax_control_flow.py
tests/lax_control_flow_test.py
==================
5d3910f2;Stephan Hoyer;2019-09-12 15:47:15 -0700;Tests for error checking in lax.root

==

tests/lax_control_flow_test.py
==================
0e5b5d3f;Stephan Hoyer;2019-09-12 15:33:30 -0700;Error checking for tree structures in root

==

jax/lax/lax_control_flow.py
==================
9584dbe1;Stephan Hoyer;2019-09-12 12:27:59 -0700;docstring clarification

==

jax/lax/lax_control_flow.py
==================
e7b20379;Stephan Hoyer;2019-09-12 12:22:01 -0700;Fix encoding on Python 2

==

jax/lax/lax_control_flow.py
==================
c9fcc0af;Matthew Johnson;2019-09-12 05:57:52 -0700;Merge pull request #1337 from levskaya/fix_axis_index
Make pxla.axis_index return signed indices.
==
==================
4da08e95;Matthew Johnson;2019-09-11 22:06:07 -0700;Merge pull request #1340 from shoyer/remove-gufuncs
Remove notebooks/gufuncs.ipynb
==
==================
2b2da814;Stephan Hoyer;2019-09-11 22:01:18 -0700;Remove notebooks/gufuncs.ipynb
It's now redundant with jax.experimental.vectorize, and I'd rather keep it in
one place.

==

jax/experimental/vectorize.py
notebooks/README.md
notebooks/gufuncs.ipynb
==================
d737cc99;Stephan Hoyer;2019-09-11 21:51:50 -0700;disclaimer about root as a low-level API

==

jax/lax/lax_control_flow.py
==================
ec192d0a;Stephan Hoyer;2019-09-11 21:36:31 -0700;root docstring

==

jax/lax/lax_control_flow.py
==================
12509c91;Stephan Hoyer;2019-09-11 21:26:07 -0700;Remove jax.api._custom_implicit_solve

==

jax/api.py
tests/api_test.py
==================
49523046;Stephan Hoyer;2019-09-11 21:24:50 -0700;Finish filling out lax.root

==

jax/lax/lax_control_flow.py
tests/lax_control_flow_test.py
==================
0c3e9ce2;Matthew Johnson;2019-08-29 14:29:49 -0700;sketch of root w/ parameterized solvers
Co-authored-by: Stephan Hoyer <shoyer@google.com>

==

jax/lax/lax_control_flow.py
==================
4ee28cf9;Anselm Levskaya;2019-09-11 14:15:38 -0700;Make pxla.axis_index return signed indices for type compatibility with other jax indices.

==

jax/interpreters/pxla.py
==================
71d5a7ab;Matthew Johnson;2019-09-11 09:29:26 -0700;Merge pull request #1336 from google/fix-vmap-of-pmap
fix vmap-of-pmap bug
==
==================
37323c13;Matthew Johnson;2019-09-11 06:22:25 -0700;check output shape in testVmapOfPmap2

==

tests/pmap_test.py
==================
593a7690;Matthew Johnson;2019-09-11 06:17:56 -0700;Merge pull request #1334 from levskaya/fix_xla_error_msg
fix xla shape-checking error message
==
==================
6f0e244e;Matthew Johnson;2019-09-11 06:01:32 -0700;fix vmap-of-pmap bug
thanks @romanngg and @inoryy

==

jax/interpreters/batching.py
tests/pmap_test.py
==================
bdbb57e3;Peter Hawkins;2019-09-11 06:00:30 -0700;Merge pull request #1335 from hawkinsp/master
Fix incorrect slogdet parity calculation in presence of batch dims
==
==================
a5f67d55;Peter Hawkins;2019-09-11 08:19:26 -0400;Fix incorrect slogdet parity calculation in presence of batch dimensions.

==

jax/numpy/linalg.py
tests/linalg_test.py
==================
53d4283d;Anselm Levskaya;2019-09-10 23:25:12 -0700;fix xla shape-checking error message

==

jax/interpreters/xla.py
==================
705eb1cb;James Bradbury;2019-09-10 14:49:17 -0700;Merge pull request #1331 from google/jb/dot-general-batch
Remove explicit broadcasts in vmap(dot_general)
==
==================
b4b14b7e;James Bradbury;2019-09-10 13:58:23 -0700;remove broadcasts from _dot_general_batch_rule

==

jax/lax/lax.py
tests/batching_test.py
==================
65f80d6a;Matthew Johnson;2019-09-10 07:56:11 -0700;bump version number for pypi

==

jax/version.py
==================
ab340819;James Bradbury;2019-09-09 20:30:38 -0700;Merge pull request #1324 from romanngg/patch-1
Fix `check_nans` method
==
==================
f51b6a3f;Matthew Johnson;2019-09-09 18:48:31 -0700;Merge pull request #1329 from google/issue1316
make jvp only form JVPTracers with nonzero tangent
==
==================
84992b5b;Matthew Johnson;2019-09-09 18:25:16 -0700;add test for issue #1316

==

tests/lax_control_flow_test.py
==================
74f6269e;Matthew Johnson;2019-09-09 17:47:15 -0700;make jvp only form JVPTracers with nonzero tangent
fixes #1316

==

jax/interpreters/ad.py
==================
bcad02ff;Daniel Weaver;2019-09-09 19:54:10 +0000;Remove 64-bit mode for GPU performance

==

jax/experimental/ode.py
==================
22afc8ce;Matthew Johnson;2019-09-08 19:47:03 -0700;Merge pull request #1326 from sschoenholz/master
Tiny change to enable vmap of lax.reshape with dimension numbers.
==
==================
6f2d22fd;Sam Schoenholz;2019-09-08 14:19:10 -0700;Tiny change to enable vmap with dimension numbers.

==

jax/lax/lax.py
tests/lax_test.py
==================
20f167df;James Bradbury;2019-09-06 23:50:19 -0700;Merge pull request #1323 from google/ortho-typo
fix typo in orthogonal init
==
==================
302dcc7e;Roman Novak;2019-09-06 20:47:02 -0700;Fix `check_nans` method

==

jax/interpreters/xla.py
==================
dbea4b6f;Roman Novak;2019-09-06 20:30:30 -0700;Fix typos
Hit these when trying to debug NaNs, appear to be just typos.
==

jax/interpreters/xla.py
==================
c4081d8f;James Bradbury;2019-09-06 16:13:04 -0700;fix typo in orthogonal init

==

jax/nn/initializers.py
==================
87f439d2;James Bradbury;2019-09-06 14:44:26 -0700;Merge pull request #1322 from google/jb/ortho-init
Add orthogonal initializer
==
==================
d233a564;James Bradbury;2019-09-06 11:56:40 -0700;Add orthogonal initializer

==

jax/nn/initializers.py
==================
8f0355ec;Peter Hawkins;2019-09-06 13:35:44 -0400;Merge pull request #1319 from hawkinsp/master
Fix compile error in cusolver.cc
==
==================
c42444dc;Peter Hawkins;2019-09-06 13:35:09 -0400;Fix compile error in cusolver.cc

==

jaxlib/cusolver.cc
==================
1ee2b750;Peter Hawkins;2019-09-06 09:33:36 -0400;Merge pull request #1314 from hawkinsp/svd
Implement batched singular value decomposition.
==
==================
701c34e1;Peter Hawkins;2019-09-06 08:48:53 -0400;Guard batched SVD tests by a jaxlib version check.

==

tests/linalg_test.py
==================
e087915c;James Bradbury;2019-09-05 17:45:13 -0700;Merge pull request #1315 from Sohl-Dickstein/patch-1
improve numerical stability of softplus grads
==
==================
c0c4aac9;Peter Hawkins;2019-09-05 18:12:00 -0400;Implement batched singular value decomposition.
On GPU, switch to using the Jacobi implementation of SVD for matrices smaller than 32x32. The Jacobi implementation has an efficient implementation for batches of small matrices.

==

jax/lax_linalg.py
jaxlib/cusolver.cc
jaxlib/cusolver.py
jaxlib/lapack.pyx
tests/linalg_test.py
==================
8f5cfef4;Jascha Sohl-Dickstein;2019-09-05 15:10:48 -0700;improve numerical stability of softplus grads

==

jax/nn/functions.py
==================
2b075f93;Skye Wanderman-Milne;2019-09-05 14:48:02 -0700;Update README to use jaxlib-0.1.28

==

README.md
==================
2c6f74df;Skye Wanderman-Milne;2019-09-05 14:45:32 -0700;Add CUDA 10.1 wheels.

==

README.md
build/build_jaxlib_wheels.sh
==================
5e0c0c9d;Skye Wanderman-Milne;2019-09-05 11:52:59 -0700;Create shim to abstract over breaking changes between jaxlib 0.1.27 and 0.1.28.

==

jax/interpreters/pxla.py
jax/interpreters/xla.py
jax/lib/xla_bridge.py
==================
b5130e17;James Bradbury;2019-09-05 10:17:36 -0700;Merge pull request #1307 from google/jb/rsqrt
add primitive for rsqrt
==
==================
eb7d594b;Peter Hawkins;2019-09-05 10:46:16 -0400;Merge pull request #1309 from hawkinsp/block
Change block_until_ready() to return `self` rather than nothing.
==
==================
aa225a3b;Peter Hawkins;2019-09-05 10:27:37 -0400;Merge pull request #1308 from hawkinsp/lu
Implement jax.scipy.linalg.lu_solve.
==
==================
b819bff1;David Pfau;2019-09-05 15:22:36 +0100;Imports for custom_transforms and defjvp
Can't really do this if we don't have the right imports...
==

jax/numpy/linalg.py
==================
612ffd06;Peter Hawkins;2019-09-05 10:16:20 -0400;Change block_until_ready() to return `self` rather than nothing.

==

jax/interpreters/pxla.py
jax/interpreters/xla.py
tests/api_test.py
==================
454cb4f6;Peter Hawkins;2019-09-05 09:59:47 -0400;Implement jax.scipy.linalg.lu_solve.

==

docs/jax.scipy.rst
jax/scipy/linalg.py
tests/linalg_test.py
==================
73d512bd;Skye Wanderman-Milne;2019-09-04 18:27:55 -0700;Add nn/*.py to jax/BUILD

==

jax/BUILD
==================
7dc95f1f;Skye Wanderman-Milne;2019-09-04 18:14:50 -0700;Bump jaxlib version to 0.1.28 and update WORKSPACE.
This pulls in breaking changes to the XLA client.

==

WORKSPACE
jaxlib/version.py
==================
76156e53;Skye Wanderman-Milne;2019-09-03 15:31:10 -0700;Temporarily disable test_jit_device_assignment.
Future breaking changes to jaxlib will break this test, so disable it
until we update jaxlib and then can update jax and reenable the test.

==

tests/api_test.py
==================
35b63c74;James Bradbury;2019-09-04 15:06:46 -0700;add primitive for rsqrt

==

jax/lax/lax.py
==================
146b5d12;James Bradbury;2019-09-04 14:48:20 -0700;Merge pull request #1262 from google/jb/initializers
Migrate initializers and activation functions to jax.nn
==
==================
d90011b0;Peter Hawkins;2019-09-04 16:58:18 -0400;Merge pull request #1306 from hawkinsp/qr
Use LAPACK and Cusolver to implement QR decomposition on CPU/GPU.
==
==================
02426b39;Peter Hawkins;2019-09-04 16:24:32 -0400;Use LAPACK and Cusolver to implement QR decomposition on CPU/GPU.
This should be faster; also adds support for complex QR decompositions.

==

jax/lax_linalg.py
jax/lib/__init__.py
jaxlib/cusolver.cc
jaxlib/cusolver.py
jaxlib/lapack.pyx
tests/linalg_test.py
==================
315d3fe8;Matthew Johnson;2019-09-04 08:54:41 -0700;Merge pull request #1303 from google/definitely-not-automasking
Automasking prototype
==
==================
c3db5d71;Matthew Johnson;2019-09-03 21:56:45 -0700;fix dtype issue, python3 issue, sorting issue

==

jax/interpreters/masking.py
jax/lax/lax_control_flow.py
==================
bf28c44a;James Bradbury;2019-09-03 17:51:29 -0700;address comments

==

jax/experimental/stax.py
jax/nn/__init__.py
jax/nn/functions.py
jax/nn/initializers.py
jax/random.py
==================
96b8bb2d;Matthew Johnson;2019-09-03 17:18:23 -0700;fix lax._canonicalize_shape for ShapeExprs

==

jax/lax/lax.py
==================
772fdb8c;Matthew Johnson;2019-09-03 17:09:27 -0700;move automasking prototype into jax/interpreters
Co-authored-by: Dougal Maclaurin <dougalm@google.com>

==

jax/api.py
jax/interpreters/masking.py
jax/lax/lax.py
jax/lax/lax_control_flow.py
mask.py
tests/batching_test.py
tests/masking_test.py
==================
e12c8b03;Matthew Johnson;2019-08-30 21:35:56 -0700;experiments in import-time shape checking

==

mask.py
==================
f4d6591f;Matthew Johnson;2019-08-30 18:26:41 -0700;revive dot example

==

mask.py
==================
20299270;Matthew Johnson;2019-08-30 18:03:18 -0700;concat is cool (packed not striped)

==

mask.py
==================
fbc85af5;Matthew Johnson;2019-08-30 16:06:43 -0700;made polymorphic jaxprs, reshape fail

==

jax/lax/lax.py
mask.py
==================
a609ae70;Matthew Johnson;2019-08-30 09:31:21 -0700;set up a small shape language

==

mask.py
==================
976ff5f0;Matthew Johnson;2019-08-28 18:39:54 -0700;try out a ShapeExpr with polynomials

==

jax/lax/lax_control_flow.py
mask.py
==================
983b83f1;Matthew Johnson;2019-08-28 07:09:58 -0700;todo: test setup

==

mask.py
==================
cf637fd4;Matthew Johnson;2019-08-28 07:05:55 -0700;note next steps

==

mask.py
==================
75eb9b2e;Matthew Johnson;2019-08-27 21:43:56 -0700;add part of a dot masking rule

==

mask.py
==================
ba82fe5f;Matthew Johnson;2019-08-27 19:04:22 -0700;add some error checking

==

mask.py
==================
9bd5d37a;Matthew Johnson;2019-08-27 18:25:29 -0700;split shape rules and masking rules

==

mask.py
==================
8a94e5c9;Matthew Johnson;2019-08-27 17:42:50 -0700;renames

==

mask.py
==================
bd86d41a;Matthew Johnson;2019-08-27 17:32:21 -0700;add flattening, jit test

==

mask.py
==================
f5ee804a;Matthew Johnson;2019-08-27 17:09:55 -0700;fix bug in scan masking rule

==

mask.py
==================
e254dc43;Matthew Johnson;2019-08-26 12:34:57 -0700;wip
Co-authored-by: Dougal Maclaurin <dougalm@google.com>

==

jax/lax/lax.py
mask.py
==================
4b7bc572;Matthew Johnson;2019-08-23 11:21:37 -0700;tweaks

==

mask.py
==================
5879dbc2;Matthew Johnson;2019-08-23 10:28:27 -0700;trying out ideas
Co-authored-by: Dougal Maclaurin <dougalm@google.com>

==

mask.py
==================
5d3982e2;Skye Wanderman-Milne;2019-09-03 15:19:32 -0700;Update build_mac_jaxlib.yml

==

.github/workflows/build_mac_jaxlib.yml
==================
3427d2cb;Daniel Weaver;2019-08-30 22:23:11 +0000;Add `build_odeint` for odeint VJP setup, plus a test

==

jax/experimental/ode.py
==================
6f051d0c;Matthew Johnson;2019-09-03 07:06:41 -0700;Merge pull request #1300 from samuela/patch-1
Prettify code example docs for `disable_jit`
==
==================
b558afb6;samuela;2019-09-02 16:30:07 -0700;Prettify code example docs for `disable_jit`

==

jax/api.py
==================
43a33b8d;Matthew Johnson;2019-09-02 08:34:20 -0700;Merge pull request #1299 from google/issue1271
jax.numpy.stack and concatenate work on array args
==
==================
c5202769;Matthew Johnson;2019-09-02 07:55:25 -0700;jax.numpy.stack and concatenate work on array args
fixes #1271

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
220a2ea5;Matthew Johnson;2019-09-02 07:51:24 -0700;Merge pull request #1260 from google/update-notebooks
update notebooks b/c jax comes with colab now!
==
==================
1ebcdb55;Matthew Johnson;2019-09-02 07:51:14 -0700;Merge pull request #1298 from google/issue1297
update jaxlib version in readme
==
==================
a0095e34;Matthew Johnson;2019-09-02 07:47:56 -0700;reviewer comments: no 'install' text needed

==

notebooks/Common_Gotchas_in_JAX.ipynb
notebooks/XLA_in_Python.ipynb
notebooks/gufuncs.ipynb
==================
b672ad72;Matthew Johnson;2019-08-28 14:44:11 -0700;update notebooks b/c jax comes with colab now!

==

README.md
notebooks/Common_Gotchas_in_JAX.ipynb
notebooks/XLA_in_Python.ipynb
notebooks/autodiff_cookbook.ipynb
notebooks/gufuncs.ipynb
notebooks/maml.ipynb
notebooks/neural_network_and_data_loading.ipynb
notebooks/neural_network_with_tfds_data.ipynb
notebooks/quickstart.ipynb
notebooks/score_matching.ipynb
notebooks/vmapped log-probs.ipynb
==================
be4dc0eb;Matthew Johnson;2019-09-02 07:32:26 -0700;Merge pull request #1296 from trevorcai/poly_decay
Add polynomial_decay schedule to optimizers
==
==================
c5737d0f;Matthew Johnson;2019-09-02 07:26:41 -0700;Merge pull request #1272 from alexalemi/vectorize
Convert gufunc notebook to experimental module.
==
==================
c760b05f;Matthew Johnson;2019-09-02 07:25:06 -0700;update jaxlib version in readme
fixes #1297
will update notebooks in #1260

==

README.md
jax/lax_linalg.py
jax/lib/__init__.py
jax/tree_util.py
==================
8b98f8e2;Alex Alemi;2019-09-01 20:12:11 +0000;Typo.
Co-Authored-By: Stephan Hoyer <shoyer@google.com>

==

jax/experimental/vectorize.py
==================
110634d5;Matthew Johnson;2019-08-31 23:05:51 -0700;Merge pull request #1295 from google/more-lax-autodiff-tests
add special value grad tests
==
==================
cac042c3;Matthew Johnson;2019-08-31 22:08:03 -0700;move asinh/acosh/atanh to lax_numpy.py only

==

docs/jax.lax.rst
jax/lax/__init__.py
jax/lax/lax.py
jax/lax_reference.py
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
tests/lax_test.py
==================
42258571;Matthew Johnson;2019-08-31 21:23:39 -0700;add special value grad tests, sinh failing

==

tests/lax_test.py
==================
1147eac3;Matthew Johnson;2019-08-31 14:25:45 -0700;Merge pull request #1277 from google/primitive-shape-error-messages
fix typo (thanks @dpfau)
==
==================
f5c152b7;Matthew Johnson;2019-08-31 12:51:21 -0700;if we hit an XLA Build error, it's a JAX bug

==

jax/interpreters/xla.py
==================
2b561c7c;Matthew Johnson;2019-08-31 12:47:01 -0700;fix typo (thanks @dpfau)

==

jax/interpreters/xla.py
==================
731e46b3;Matthew Johnson;2019-08-31 08:21:23 -0700;bump jax version for pypi

==

jax/version.py
==================
5cb23157;Matthew Johnson;2019-08-31 08:21:02 -0700;Merge pull request #1269 from google/issue1267
avoid Calls inside While/Cond, roll/unroll PRNG hash based on backend
==
==================
c0627d81;Matthew Johnson;2019-08-31 08:04:51 -0700;remove jaxlib import (broke google3 pulldown)

==

jax/interpreters/xla.py
==================
2815c55b;Matthew Johnson;2019-08-29 22:21:31 -0700;switch rolled/unrolled loops in prng hash

==

jax/random.py
==================
478832c9;Matthew Johnson;2019-08-29 20:25:02 -0700;avoid Calls inside While/Cond
fixes #1267

==

jax/interpreters/pxla.py
jax/interpreters/xla.py
jax/lax/lax.py
jax/lax/lax_control_flow.py
tests/pmap_test.py
==================
1c264db3;David Pfau;2019-08-31 03:18:24 +0100;Slightly cleaner implementation of jvp for det
Replaced np.dot/np.linalg.inv with a single np.linalg.solve
==

jax/numpy/linalg.py
==================
ae2c39d0;David Pfau;2019-08-31 02:13:12 +0100;Added custom jvp for np.linalg.det
For faster gradient computation for determinants, added closed-form expressing for Jacobian-vector product. Still needs a test.
==

jax/numpy/linalg.py
==================
29b5d956;Matthew Johnson;2019-08-30 17:06:52 -0700;Merge pull request #1268 from fehiepsi/condfix
Fix cond batching rule issues
==
==================
b7edc39b;fehiepsi;2019-08-30 19:33:49 -0400;address comments

==

jax/lax/lax_control_flow.py
==================
e6854009;Alex Alemi;2019-08-30 22:46:26 +0000;Changed axis kwarg in wrapper for py2 compat.

==

jax/experimental/vectorize.py
==================
55a06cbd;Alex Alemi;2019-08-30 21:23:18 +0000;added documentation

==

docs/jax.experimental.rst
docs/jax.experimental.vectorize.rst
jax/experimental/vectorize.py
==================
54f28ed5;Alex Alemi;2019-08-30 20:36:54 +0000;fixing issues with tests

==

tests/vectorize_test.py
==================
ae52f865;Trevor Cai;2019-08-30 18:33:58 +0100;Add polynomial_decay schedule to optimizers

==

jax/experimental/optimizers.py
tests/optimizers_test.py
==================
16bd2725;fehiepsi;2019-08-30 00:21:50 -0400;use lax instead of numpy to avoid circular import

==

jax/lax/lax_control_flow.py
==================
92d85a89;fehiepsi;2019-08-29 22:28:03 -0400;fix cond batching rule issues

==

jax/lax/lax_control_flow.py
tests/lax_control_flow_test.py
==================
4ceebcf4;Alex Alemi;2019-08-29 19:18:50 -0700;with vectorize

==

jax/experimental/vectorize.py
tests/vectorize_test.py
==================
cc49d8b3;James Bradbury;2019-08-29 17:51:15 -0700;add docs for jax.nn

==

docs/jax.nn.initializers.rst
docs/jax.nn.rst
docs/jax.rst
==================
6d9974fe;James Bradbury;2019-08-29 17:50:50 -0700;update stax to use jax.nn

==

jax/experimental/stax.py
==================
07f26b50;James Bradbury;2019-08-29 17:50:37 -0700;add activations and other nn functions

==

jax/nn/__init__.py
==================
7344c28d;James Bradbury;2019-08-28 16:58:45 -0700;add initializers

==

jax/nn/initializers.py
==================
f4aeb363;James Bradbury;2019-08-16 17:02:20 -0700;add truncated normal

==

jax/random.py
==================
c3e52cfc;Matthew Johnson;2019-08-29 09:59:55 -0700;Merge pull request #1265 from jlebar/quick-start-notebook2
Use np.eye instead of onp.eye in quickstart notebook.
==
==================
fe683acd;Justin Lebar;2019-08-29 12:33:48 -0400;Use np.eye instead of onp.eye in quickstart notebook.
JAX supports np.eye, so no need to fall back to onp.

==

notebooks/quickstart.ipynb
==================
9d4fab5c;Daniel Weaver;2019-08-28 03:37:15 +0000;Pass check_vjp, add VJP grad and Jac, use fun(y0, t, *args) syntax

==

jax/experimental/ode.py
==================
fd9e0333;Matthew Johnson;2019-08-27 15:56:45 -0700;add try/finally to pxla global state management

==

jax/interpreters/parallel.py
jax/interpreters/pxla.py
==================
009ff074;Matthew Johnson;2019-08-27 11:43:34 -0700;update jaxlib version for macOS wheels
cf. #1254

==

jaxlib/version.py
==================
d5820953;Skye Wanderman-Milne;2019-08-27 11:26:49 -0700;Workaround to make XRT work with multi-backend change.
XrtBuffers don't expose their platform name. I couldn't figure out a nice way to plumb this through, so I added this workaround for now.
==

jax/interpreters/xla.py
==================
1cd37bd9;Matthew Johnson;2019-08-27 11:21:50 -0700;reset jax_numpy_rank_promotion to "allow" default

==

jax/numpy/lax_numpy.py
==================
449e27b3;Matthew Johnson;2019-08-26 14:19:41 -0700;Merge pull request #1253 from google/custom-transforms-vjp-nones
fix for custom-transforms vjp nones bug
==
==================
dbe56c30;Matthew Johnson;2019-08-26 14:05:17 -0700;leave todos for better error messages

==

jax/api.py
==================
6a81d81d;Matthew Johnson;2019-08-26 13:38:08 -0700;fix for custom-transforms vjp nones bug
Co-authored-by: Dougal Maclaurin <dougalm@google.com>

==

jax/api.py
tests/api_test.py
==================
94b1dda4;Matthew Johnson;2019-08-26 12:35:39 -0700;fix notebook link (fixes #1252)

==

README.md
==================
ae835b74;Skye Wanderman-Milne;2019-08-26 11:22:58 -0700;Add jax.devices() and friends, and add `devices` arg to pmap.
This change adds the following APIs:
* jax.devices(). This returns a list of available Device subclass instances.
* jax.host_id(). Currently always 0, but will be useful on multi-host platforms.
* jax.local_device_count(). Currently always equal to jax.device_count(), but
    will be useful on multi-host platforms.
* Optional `devices` argument to pmap. This can be used to specify which devices
    should be used in the replicated computation.

==

jax/api.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
jax/lax/lax.py
jax/lib/xla_bridge.py
tests/pmap_test.py
==================
2d26ac38;Skye Wanderman-Milne;2019-08-26 10:54:34 -0700;Merge pull request #1211 from levskaya/multibackend
multibackend jit
==
==================
89403229;Matthew Johnson;2019-08-26 06:59:46 -0700;Merge pull request #1250 from fehiepsi/dtype1
cast float64 to canonical dtype in np.cov
==
==================
28df8a66;fehiepsi;2019-08-26 01:32:18 -0400;cast float64 to canonical dtype in np.cov

==

jax/numpy/lax_numpy.py
==================
524d4254;Matthew Johnson;2019-08-25 20:12:32 -0700;update xla link, fixes #1248

==

README.md
notebooks/quickstart.ipynb
==================
f639b808;Matthew Johnson;2019-08-25 19:59:50 -0700;instantiate zeros for custom vjp rules

==

jax/interpreters/ad.py
tests/api_test.py
==================
c6f430a8;Matthew Johnson;2019-08-25 14:36:23 -0700;tweak rank promotion warning docs

==

docs/rank_promotion_warning.rst
==================
94fafe88;Matthew Johnson;2019-08-25 14:33:14 -0700;attempt to fix sphinx rst rendering

==

docs/rank_promotion_warning.rst
==================
3c2a7359;Matthew Johnson;2019-08-25 14:28:53 -0700;improve rank promotion warning, add doc page

==

docs/index.rst
docs/rank_promotion_warning.rst
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
e27d3c2f;Matthew Johnson;2019-08-25 13:32:30 -0700;bump version for pypi

==

jax/version.py
==================
0cc21c8d;Matthew Johnson;2019-08-25 13:30:21 -0700;Merge branch 'master' into multibackend

==
==================
7a119c0c;Matthew Johnson;2019-08-25 13:26:54 -0700;Merge pull request #1246 from google/issue1241
fix device_constant instantiation bug, fixes #1241
==
==================
434d1753;Matthew Johnson;2019-08-25 13:02:18 -0700;fix device_constant instantiation bug, fixes #1241

==

jax/interpreters/xla.py
==================
dfee03c3;Skye Wanderman-Milne;2019-08-24 17:27:22 -0700;Update minimum jaxlib to 0.1.26.

==

jax/lib/__init__.py
==================
4838440f;Matthew Johnson;2019-08-24 12:35:23 -0700;Merge pull request #1234 from google/issue1230
add dtype warnings to array-creation routines
==
==================
afe21baf;Matthew Johnson;2019-08-24 12:34:44 -0700;address reviewer comments

==

jax/numpy/lax_numpy.py
tests/api_test.py
==================
4a22f565;Skye Wanderman-Milne;2019-08-24 10:25:34 -0700;Bump jaxlib version to 0.1.26 and update WORKSPACE.

==

WORKSPACE
jaxlib/version.py
==================
e90457d7;Matthew Johnson;2019-08-22 09:22:57 -0700;add dtype warnings to array-creation routines
fixes #1230

==

jax/lax/__init__.py
jax/lax/lax.py
jax/numpy/lax_numpy.py
tests/api_test.py
==================
91a23116;Anselm Levskaya;2019-08-23 23:42:08 -0700;clean up multibackend tests

==

tests/multibackend_test.py
==================
a57a1a39;Anselm Levskaya;2019-08-23 21:41:55 -0700;increase minimum jaxlib version and remove some janky feature detection

==

jax/interpreters/xla.py
jax/lib/__init__.py
==================
80ac43bb;Matthew Johnson;2019-08-23 20:19:44 -0700;Merge pull request #1244 from SiegeLordEx/tree_util_clarify
Clarify the intended purpose of tree_util.
==
==================
3e0e2695;Pavel Sountsov;2019-08-23 19:32:45 -0700;Address review comments.

==

jax/tree_util.py
==================
ee2c6cca;Anselm Levskaya;2019-08-23 19:01:37 -0700;uff actually finish last change

==

jax/interpreters/xla.py
==================
229fdfe9;Anselm Levskaya;2019-08-23 18:39:26 -0700;just say no to pop

==

jax/interpreters/xla.py
==================
661aaf1d;Matthew Johnson;2019-08-23 18:36:57 -0700;Merge pull request #1245 from google/issue1236
add option to disable rank-promotion broadcasting
==
==================
d700716e;Matthew Johnson;2019-08-23 17:05:32 -0700;add option to disable rank-promotion broadcasting
fixes #1236

==

jax/numpy/lax_numpy.py
tests/api_test.py
tests/lax_numpy_test.py
==================
bd35ef23;Anselm Levskaya;2019-08-23 17:29:30 -0700;refactor backend check in central dispatch logic

==

jax/interpreters/xla.py
==================
af8859b9;Matthew Johnson;2019-08-23 17:06:24 -0700;Merge pull request #1243 from google/while-cond-const
fix an overzealous error message w/ const cond_fun
==
==================
e60629fd;Anselm Levskaya;2019-08-23 17:01:07 -0700;refactoring

==

jax/interpreters/xla.py
==================
b1604459;Pavel Sountsov;2019-08-23 16:54:59 -0700;Clarify the intended purpose of tree_util.
Most importantly, this removes the initial paragraph which was easy to
misinterpret to imply that this module was not JAX-specific.

==

jax/tree_util.py
==================
ba572231;Anselm Levskaya;2019-08-23 16:51:59 -0700;fix last mistake

==

jax/interpreters/xla.py
==================
050ce59a;Matthew Johnson;2019-08-23 16:40:49 -0700;fix an overzealous error message w/ const cond_fun

==

jax/lax/lax_control_flow.py
tests/lax_control_flow_test.py
==================
36539f1f;Matthew Johnson;2019-08-23 16:14:42 -0700;Merge pull request #1242 from google/nones-are-pytrees
restore the behavior that Nones are pytrees
==
==================
003eda84;Skye Wanderman-Milne;2019-08-23 16:13:50 -0700;Update build_mac_jaxlib.yml

==

.github/workflows/build_mac_jaxlib.yml
==================
dbb68bd1;Anselm Levskaya;2019-08-23 15:51:59 -0700;be careful with params.pop

==

jax/interpreters/xla.py
==================
e66582e8;Matthew Johnson;2019-08-23 15:47:42 -0700;restore the behavior that Nones are pytrees

==

jaxlib/pytree.cc
tests/tree_util_tests.py
==================
3b303a50;Skye Wanderman-Milne;2019-08-23 14:50:24 -0700;Update build_mac_jaxlib.yml

==

.github/workflows/build_mac_jaxlib.yml
==================
24efaa77;Skye Wanderman-Milne;2019-08-23 14:47:15 -0700;Update build_mac_jaxlib.yml

==

.github/workflows/build_mac_jaxlib.yml
==================
90093b78;Skye Wanderman-Milne;2019-08-23 14:43:52 -0700;Remove version restriction from opt_einsum.
See https://github.com/dgasmith/opt_einsum/issues/98.

==

setup.py
==================
aab71eae;James Bradbury;2019-08-23 12:19:53 -0700;Merge pull request #1238 from google/jb/cond
add cond batching rule (take 2)
==
==================
4811231e;Anselm Levskaya;2019-08-23 12:14:46 -0700;merge master

==
==================
7830cede;James Bradbury;2019-08-23 11:02:19 -0700;batching rule for cond
Co-authored-by: Matthew Johnson <mattjj@google.com>

==

jax/lax/lax_control_flow.py
tests/lax_control_flow_test.py
==================
e025fac1;Skye Wanderman-Milne;2019-08-23 10:55:21 -0700;Testing out github workflows
Hopefully this will let me build macOS jaxlib wheels even though I don't have a mac...
==

.github/workflows/build_mac_jaxlib.yml
==================
19bb5639;Matthew Johnson;2019-08-23 08:43:22 -0700;Merge pull request #1240 from google/issue1239
ensure DeviceArray.aval is ShapedArray
==
==================
98c7567a;Matthew Johnson;2019-08-23 08:17:41 -0700;add flag for logging when jit performs compilation

==

jax/core.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
jax/linear_util.py
==================
7539325f;Matthew Johnson;2019-08-23 07:47:42 -0700;ensure DeviceArray.aval is ShapedArray
Fixes #1239, which was caused by DeviceArray.aval, and hence
xla.abstractify(device_array), being a ConcreteArray, leading to
compilation cache misses all the time because those are necessarily
cached on id.

==

jax/interpreters/pxla.py
jax/interpreters/xla.py
==================
960a56ae;Matthew Johnson;2019-08-23 07:31:02 -0700;Merge pull request #1237 from fehiepsi/fix-cond
fix lax.cond with non-zero true_consts
==
==================
ceca1b7a;Anselm Levskaya;2019-08-23 01:20:39 -0700;try not to sabotage all jax users, use normalized platform names to control device_put behavior.

==

jax/interpreters/xla.py
==================
8a78c92b;Anselm Levskaya;2019-08-22 21:59:47 -0700;Merge branch 'master' into multibackend

==
==================
78c04fe3;Anselm Levskaya;2019-08-22 21:17:05 -0700;fix default kwarg issue

==

jax/interpreters/xla.py
==================
8bbe1b0c;Anselm Levskaya;2019-08-22 20:50:31 -0700;fix kwarg order bug for device constant put handler

==

jax/interpreters/xla.py
==================
685ca676;Anselm Levskaya;2019-08-22 19:56:27 -0700;resolve merge conflicts with master

==

jax/api.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
jax/lax/lax.py
jax/lax/lax_control_flow.py
==================
9f876c48;fehiepsi;2019-08-22 22:53:31 -0400;fix cond with true_consts

==

jax/lax/lax_control_flow.py
==================
10e0842f;Anselm Levskaya;2019-08-22 19:52:29 -0700;Merge branch 'master' into multibackend

==
==================
985ecbe5;Matthew Johnson;2019-08-22 14:35:44 -0700;Merge pull request #1235 from google/vmap-axes-lists
allow vmap in_axes to be lists
==
==================
de6ce2a5;Matthew Johnson;2019-08-22 12:50:47 -0700;allow vmap in_axes to be lists

==

jax/api.py
==================
0c832b2d;Matthew Johnson;2019-08-22 08:51:44 -0700;bump version for pypi

==

jax/version.py
==================
1919ba51;Matthew Johnson;2019-08-22 06:31:39 -0700;Merge pull request #1231 from hgt312/fix_readme_type
Fix README typo, `JAX_ENABLE_x64` -> `JAX_ENABLE_X64`
==
==================
09a2d068;Huang, Guangtai;2019-08-22 13:13:52 +0800;fix typo

==

README.md
==================
d7894198;Matthew Johnson;2019-08-21 21:03:31 -0700;Merge pull request #1229 from google/no-more-tuples-fixes
No more tuples fixes
==
==================
c839c6a6;Anselm Levskaya;2019-08-21 20:59:18 -0700;Added basic behavior unit tests of multibackend jit.

==

tests/multibackend_test.py
==================
85179975;Matthew Johnson;2019-08-21 20:36:47 -0700;minor fixes from trax, revise eval_shape api

==

jax/api.py
jax/interpreters/pxla.py
tests/api_test.py
tests/pmap_test.py
==================
88a1fbf6;Anselm Levskaya;2019-08-21 18:07:14 -0700;Error on nested conflicting explicit jit backend specifications.

==

jax/interpreters/xla.py
==================
1e375daf;Matthew Johnson;2019-08-21 16:46:29 -0700;Merge pull request #1217 from shoyer/doc-index-page
Fix index of API docs
==
==================
7323e154;Matthew Johnson;2019-08-21 16:39:59 -0700;fix ShardedDeviceArray.__getitem__

==

jax/interpreters/pxla.py
tests/pmap_test.py
==================
06b5c402;Matthew Johnson;2019-08-21 16:39:32 -0700;update tree_util_tests w/ None not a pytree

==

tests/tree_util_tests.py
==================
9f46fc4b;Matthew Johnson;2019-08-21 16:30:20 -0700;Merge pull request #1227 from google/sigmoid-expit
make stax.sigmoid call scipy.special.expit
==
==================
765af977;Matthew Johnson;2019-08-21 15:28:23 -0700;make stax.sigmoid call scipy.special.expit
improves numerical stability of differentiation, so that in particular
now jax.hessian(sigmoid)(-100.) doesn't produce a nan

==

jax/experimental/stax.py
==================
a8e0c255;Matthew Johnson;2019-08-21 14:21:36 -0700;Merge pull request #1224 from google/no-more-tuples
No more tuples
==
==================
f56312bb;Matthew Johnson;2019-08-21 13:53:57 -0700;remove pat_fmap

==

jax/core.py
==================
b702f8de;Matthew Johnson;2019-07-27 15:46:14 -0700;De-tuplify the rest of the core
Co-authored-by: Dougal Maclaurin <dougalm@google.com>

==

jax/abstract_arrays.py
jax/ad_util.py
jax/api.py
jax/api_util.py
jax/core.py
jax/interpreters/ad.py
jax/interpreters/batching.py
jax/interpreters/parallel.py
jax/interpreters/partial_eval.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
jax/lax/__init__.py
jax/lax/lax.py
jax/lax/lax_control_flow.py
jax/lax/lax_fft.py
jax/lax_linalg.py
jax/numpy/lax_numpy.py
jax/tree_util.py
jax/util.py
jaxlib/pytree.cc
jaxlib/version.py
tests/api_test.py
tests/batching_test.py
tests/core_test.py
tests/lax_control_flow_test.py
tests/lax_numpy_test.py
tests/parallel_test.py
tests/pmap_test.py
==================
c50918fe;Skye Wanderman-Milne;2019-08-21 11:59:33 -0700;Update GPU memory documentation.
See #1222.

==

docs/gpu_memory_allocation.rst
==================
1d66650c;Matthew Johnson;2019-08-21 11:08:49 -0700;Merge pull request #1225 from brianwa84/patch-6
Cope with old numpy lacking axis arg
==
==================
451ff2d6;Brian Patton;2019-08-21 13:40:50 -0400;Cope with old numpy lacking axis arg

==

jax/numpy/lax_numpy.py
==================
3c37a326;Dougal Maclaurin;2019-07-27 10:43:40 -0400;Update linearize to no-tuple version

==

jax/api.py
jax/core.py
==================
c53c8bbb;Dougal Maclaurin;2019-07-26 23:17:21 -0400;Some progress de-tupling ad.py

==

jax/api.py
jax/api_util.py
jax/interpreters/ad.py
tests/api_test.py
==================
20fad746;Dougal Maclaurin;2019-07-26 18:01:38 -0400;De-dup equations with multiple lhs vars when creating a jaxpr
Co-authored-by: Matthew Johnson <mattjj@google.com>

==

jax/core.py
jax/interpreters/partial_eval.py
jax/interpreters/xla.py
==================
6d71396d;Dougal Maclaurin;2019-07-26 16:48:17 -0400;Start exploring jaxprs without tuples
Co-authored-by: Matthew Johnson <mattjj@google.com>

==

jax/ad_util.py
jax/api.py
jax/api_util.py
jax/core.py
jax/interpreters/ad.py
jax/interpreters/batching.py
jax/interpreters/partial_eval.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
jax/lax/lax.py
jax/lax/lax_control_flow.py
jax/util.py
==================
66c6b899;Matthew Johnson;2019-08-21 06:51:23 -0700;Merge pull request #1221 from j-towns/jaxpr-hash
Implement Jaxpr __hash__
==
==================
9b19afd4;Jamie Townsend;2019-08-21 14:27:23 +0100;Implement Jaxpr __hash__
This means that primitives like scatter, which have a Jaxpr in their
**params, will get cache hits appropriately.

==

jax/core.py
==================
dbe4bdf9;Anselm Levskaya;2019-08-21 01:06:04 -0700;add multibackend option to soft_pmap

==

jax/api.py
==================
f01fc35c;Anselm Levskaya;2019-08-21 00:22:53 -0700;Make op-by-op work with all jit-returned devicearrays.

==

jax/api.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
jax/lax/lax.py
==================
ee54f655;Stephan Hoyer;2019-08-20 23:13:15 -0700;Fix index of API docs
The current index of the API docs page seems to have broken links: when I
click on "Automatic differentiation" for example, I get sent to the "JIT"
section.

This change fixes the links.

==

docs/jax.rst
==================
75298156;Anselm Levskaya;2019-08-20 01:00:34 -0700;fix missing pop default

==

jax/interpreters/pxla.py
==================
f7c1517d;Anselm Levskaya;2019-08-20 00:32:26 -0700;fix a typo

==

jax/interpreters/xla.py
==================
29c6fe88;Anselm Levskaya;2019-08-20 00:24:30 -0700;small fix for multibackend

==

jax/interpreters/xla.py
==================
cc87fb60;Anselm Levskaya;2019-08-19 23:45:36 -0700;WIP: experimental multibackend jit

==

jax/api.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
jax/lax/lax.py
jax/lax/lax_control_flow.py
jax/lax/lax_parallel.py
jax/lib/xla_bridge.py
==================
921096e3;Skye Wanderman-Milne;2019-08-19 18:46:17 -0700;Require opt_einsum version to be less than 3.0.0.
opt_einsum 3.0.0 adds a jax backend, which raises an exception on import.

==

setup.py
==================
47207760;Skye Wanderman-Milne;2019-08-19 19:11:51 -0700;Update jaxlib version and XLA.

==

WORKSPACE
jaxlib/version.py
==================
4e52c432;Matthew Johnson;2019-08-19 15:38:42 -0700;Merge pull request #1207 from majnemer/elu
Use expm1 in elu
==
==================
d0d324d2;David Majnemer;2019-08-19 13:23:31 -0700;Use expm1 in elu
expm1(x) is more accurate than exp(x) - 1 when x is nearly, but not
exactly, zero.

In the case of elu, we would compute exp(x) - 1 when x is <= 0. If x is
negative and has a very small magnitude, computing exp(x) - 1 would
round to zero.

For example, if x was -1.0E-8 then:
 exp(x) - 1 is 0 but expm1(x) is -1.0E-8

==

jax/experimental/stax.py
==================
61e52ab2;Matthew Johnson;2019-08-17 06:25:46 -0700;Merge pull request #1204 from majnemer/logaddexp
Use a faster, numerically more faithful, approach to logaddexp
==
==================
18beaab2;David Majnemer;2019-08-16 22:31:17 -0700;Use a faster, numerically more faithful, approach to logaddexp
We can use log1p and fewer instances of exp to compute the same result.

==

jax/numpy/lax_numpy.py
==================
3cca69cf;Matthew Johnson;2019-08-16 16:01:39 -0700;Merge pull request #1202 from brianwa84/patch-5
Makes the `Tracer` object `weakref`-able
==
==================
7b728c6e;Matthew Johnson;2019-08-16 15:50:00 -0700;Merge pull request #1201 from brianwa84/patch-4
Fix an exception caused by `cached()` hashing
==
==================
5c77b6e2;Peter Hawkins;2019-08-16 18:32:56 -0400;Merge pull request #1200 from majnemer/log1p
Use log1p when computing log(1 + x) or log(1 - x)
==
==================
d07107af;Brian Patton;2019-08-16 17:18:44 -0500;Makes the `Tracer` object `weakref`-able

==

jax/core.py
==================
85e5d634;Brian Patton;2019-08-16 16:49:45 -0500;Fix an exception caused by `cached()` hashing
I *think* the issue was that one of the elements in shape was a `DeviceArray`.

  File "jax/random.py", line 717, in gamma
    return _gamma(key, a, shape, dtype)
  File "jax/api.py", line 151, in f_jitted
    device_assignment=device_assignment)
  File "jax/core.py", line 672, in call_bind
    ans = primitive.impl(f, *args, **params)
  File "jax/interpreters/xla.py", line 667, in _xla_call_impl
    *map(abstractify, args))
  File "jax/linear_util.py", line 213, in cached_fun
    ans, f_prev = cached_fun_body(f, args)
  File "jax/linear_util.py", line 210, in cached_fun_body
    return call(f, *args), f
  File "jax/interpreters/xla.py", line 679, in _xla_callable
    jaxpr, (pval, consts, env) = pe.trace_to_subjaxpr(fun, master, False).call_wrapped(pvals)
  File "jax/linear_util.py", line 161, in call_wrapped
    ans = self.f(*args, **dict(self.params, **kwargs))
  File "jax/random.py", line 725, in _gamma
    a = np.broadcast_to(a, shape)
  File "jax/numpy/lax_numpy.py", line 821, in broadcast_to
    lax.broadcast_shapes(shape, _shape(arr))  # error checking
  File "jax/interpreters/xla.py", line 623, in __hash__
    raise TypeError("JAX DeviceArray, like numpy.ndarray, is not hashable.")
TypeError: JAX DeviceArray, like numpy.ndarray, is not hashable.
==

jax/numpy/lax_numpy.py
==================
1dbdaab7;David Majnemer;2019-08-16 13:44:09 -0700;Use log1p when computing log(1 + x) or log(1 - x)
log(1 + x) is less accurate when its input is near zero whereas log1p
can compute the result without excessive accuracy loss.

==

jax/random.py
jax/scipy/stats/beta.py
jax/scipy/stats/cauchy.py
==================
b4ae7252;Matthew Johnson;2019-08-16 11:27:36 -0700;Merge pull request #1198 from brianwa84/patch-3
Avoid a TypeError when reps is or contains a ndarray
==
==================
976d165e;Peter Hawkins;2019-08-16 14:23:13 -0400;Merge pull request #1199 from hawkinsp/master
Update XLA.
==
==================
784ed8d4;Peter Hawkins;2019-08-16 14:05:56 -0400;Update XLA.

==

WORKSPACE
==================
48f64ec8;Brian Patton;2019-08-16 12:31:53 -0500;Avoid a TypeError when reps is or contains a ndarray
Something along the lines of `TypeError: multiply only accepts scalar or ndarray, but got a list.`
==

jax/numpy/lax_numpy.py
==================
9fcf5266;Peter Hawkins;2019-08-16 08:33:36 -0400;Merge pull request #1193 from hawkinsp/axis
Use _canonicalize_axis everywhere to canonicalize axes, rather than s…
==
==================
2160b560;Peter Hawkins;2019-08-16 08:32:40 -0400;Merge pull request #1192 from hawkinsp/master
Consistently return JAX arrays instead of Numpy-classic arrays from j…
==
==================
f4fde047;Peter Hawkins;2019-08-15 21:19:09 -0400;Fix Python 2 compatibility problem.

==

jax/numpy/lax_numpy.py
==================
efe98e2b;Peter Hawkins;2019-08-15 20:54:58 -0400;Use _canonicalize_axis everywhere to canonicalize axes, rather than sometimes mod or %.
_canonicalize_axis has behavior more faithful to NumPy, rejecting out of range axes.

==

jax/numpy/lax_numpy.py
==================
1ba13e1b;Peter Hawkins;2019-08-15 20:25:32 -0400;Consistently return JAX arrays instead of Numpy-classic arrays from jax.numpy.
Avoids surprising behavior that sometimes arises when mixing the two.

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
63c98e79;Peter Hawkins;2019-08-15 19:54:32 -0400;Merge pull request #1191 from hawkinsp/master
Use `select` instead of `rem` to handle index wraparound.
==
==================
c138091a;Peter Hawkins;2019-08-15 17:07:02 -0400;Merge pull request #1189 from hawkinsp/random
Avoid dynamic slicing in threefry implementation.
==
==================
6d357fe8;Peter Hawkins;2019-08-15 15:22:55 -0400;Use `select` instead of `rem` to handle index wraparound.

==

jax/lax/lax.py
jax/numpy/lax_numpy.py
==================
719e17ba;Peter Hawkins;2019-08-15 16:37:04 -0400;Avoid dynamic slicing in threefry implementation.
The dynamic slice when batched currently turns into an expensive gather because vmap(fori_loop(...)) always batches the loop counter at the moment.

==

jax/random.py
==================
a36c0829;Peter Hawkins;2019-08-15 13:56:52 -0400;Merge pull request #1186 from hawkinsp/master
Change dynamic-slice and dynamic-update-slice primitives to have one …
==
==================
932877dd;Peter Hawkins;2019-08-15 13:31:37 -0400;Remove unnecessary reshape/concatenate in dynamic_slice_in_dim.

==

jax/lax/lax.py
==================
099354aa;Peter Hawkins;2019-08-15 13:14:41 -0400;Fix Python 2 compatibility.

==

jax/lax/lax.py
==================
bd441998;Peter Hawkins;2019-08-15 13:08:34 -0400;Merge pull request #1187 from brianwa84/patch-2
Ensure reps is a tuple (allows list or other iterable)
==
==================
e28e73b3;Peter Hawkins;2019-08-15 12:33:36 -0400;Address review comment.

==

jax/lax/lax.py
==================
4b693777;Brian Patton;2019-08-15 11:26:25 -0500;Ensure reps is a tuple (allows list or other iterable)

==

jax/numpy/lax_numpy.py
==================
e57a5c42;Peter Hawkins;2019-08-15 12:24:38 -0400;Fix batching rule.

==

jax/lax/lax.py
==================
e4a7d307;Peter Hawkins;2019-08-15 11:42:08 -0400;Fix batching rule.

==

jax/lax/lax.py
==================
d09924f7;Peter Hawkins;2019-08-15 11:26:30 -0400;Change dynamic-slice and dynamic-update-slice primitives to have one argument per index, not a single array index.
XLA deprecated the single-array-of-indices form of dynamic-slices. It is preferable to use a list of scalar indices since it helps XLA generate more efficient code in the case that some indices are constant but others are not.

==

jax/lax/lax.py
==================
7db288eb;Peter Hawkins;2019-08-14 15:31:34 -0400;Merge pull request #1184 from majnemer/remainder
Use lax.rem less often in remainder
==
==================
079ded40;David Majnemer;2019-08-14 12:00:04 -0700;Use lax.rem less often in remainder

==

jax/numpy/lax_numpy.py
==================
2dec779b;Matthew Johnson;2019-08-14 07:13:42 -0700;remove author info in notebook (old, redundant)

==

notebooks/XLA_in_Python.ipynb
==================
4559d36d;Peter Hawkins;2019-08-14 09:41:25 -0400;Disable correct TPU test.

==

tests/linalg_test.py
==================
4671db63;Peter Hawkins;2019-08-14 09:08:08 -0400;Merge pull request #1183 from hawkinsp/master
Enable some tests that now seem to pass.
==
==================
d2f2da29;Peter Hawkins;2019-08-14 09:05:55 -0400;Enable some tests that now seem to pass.

==

tests/linalg_test.py
tests/optimizers_test.py
==================
65034853;Peter Hawkins;2019-08-14 08:30:47 -0400;Merge pull request #1178 from hawkinsp/docker
Update Docker build to produce manylinux2010 compliant wheels.
==
==================
56c2008b;Peter Hawkins;2019-08-14 08:21:33 -0400;Merge pull request #1182 from pifon2a/master
Update XLA.
==
==================
92a33b8b;Alexander Belyaev;2019-08-14 12:18:02 +0200;Update XLA.

==

WORKSPACE
==================
bb3882a3;Roy Frostig;2019-08-13 16:14:27 -0700;Merge pull request #1180 from brianwa84/patch-1
Make DeviceValue and subclasses weakref friendly
==
==================
8718e305;Brian Patton;2019-08-13 17:37:15 -0500;Make DeviceValue and subclasses weakref friendly
https://stackoverflow.com/questions/19526340/weakref-and-slots
==

jax/interpreters/xla.py
==================
61713fe5;Peter Hawkins;2019-08-13 14:41:43 -0400;Update Docker build to produce manylinux2010 compliant wheels for non-cuda builds.
Previously we lied claimed our wheels were manylinux1 compliant but they weren't.

Uses a cross-compilation toolchain from the TF folks that builds manylinux2010 compliant wheels from a Ubuntu 16.04 VM.

The CUDA wheels still aren't manylinux2010 compliant because they depend on CUDA libraries from the system.

==

build/Dockerfile
build/build_jaxlib_wheels.sh
build/build_wheel_docker_entrypoint.sh
==================
eb2ddb4b;Matthew Johnson;2019-08-13 13:13:49 -0700;Merge pull request #1175 from google/issue1172
improve prng compile times with loop rolling
==
==================
c84cb34a;Peter Hawkins;2019-08-13 15:55:06 -0400;Readd coding declaration to api.py

==

jax/api.py
==================
f898ac1a;Peter Hawkins;2019-08-13 15:39:50 -0400;Remove spurious coding line from api.py

==

jax/api.py
==================
75bb38e7;Matthew Johnson;2019-08-13 11:30:24 -0700;address reviewer comments, no op-by-op in threefry

==

jax/random.py
tests/random_test.py
==================
c62baf92;Peter Hawkins;2019-08-13 13:26:01 -0400;Merge pull request #1174 from hawkinsp/master
Optimize linear_util cache lookup.
==
==================
f2fe49f9;Matthew Johnson;2019-08-13 10:25:41 -0700;Merge pull request #1149 from shoyer/custom-implicit-solve
Helper function for defining differentiable solves.
==
==================
d857d3f5;Matthew Johnson;2019-08-13 09:43:44 -0700;improve prng compile times with outer-loop rolling

==

jax/random.py
tests/random_test.py
==================
3db85b0b;Peter Hawkins;2019-08-13 11:32:55 -0400;Merge pull request #1176 from hawkinsp/argsplit
Skip dynamic argument splitting if there were no `static_argnums`.
==
==================
cc618f4b;Peter Hawkins;2019-08-13 10:32:13 -0400;Don't perform static/dynamic argument splitting if `static_argnums` was not passed.

==

jax/api.py
==================
275bf9da;Matthew Johnson;2019-08-13 07:20:09 -0700;improve prng compile times with loop rolling
cf. #1172

==

jax/random.py
==================
744216f1;Matthew Johnson;2019-08-13 07:02:30 -0700;Merge pull request #1157 from dsweaver/master
Add adaptive-step ODE solver and VJP calculation with JAX ops
==
==================
e68feda4;Peter Hawkins;2019-08-13 09:49:27 -0400;Optimize linear_util cache lookup.
Simplify code to build a hashable payload:
* Sort the params at construction time.
* Separate stores and transforms into separate fields, to make it easier to hash and test equality of the non-stores.
* Don't build tuples in __eq__(), instead just test fields for equality directly.

Make some small optimizations to the Store implementation: use __slots__, test for object identity rather than relying on hasattr().

==

jax/linear_util.py
==================
8b8ab541;Matthew Johnson;2019-08-12 20:46:00 -0700;Merge pull request #1171 from google/issue1170
make pmap read axis size from kwargs
==
==================
4a4304e0;Matthew Johnson;2019-08-12 18:03:25 -0700;make pmap read axis size from kwargs
fixes #1170

==

jax/api.py
tests/batching_test.py
==================
225c90b7;Daniel Weaver;2019-08-12 22:11:42 +0000;Convert tableaux & runge_kutta_step to JAX control flow, use np.where

==

jax/experimental/ode.py
==================
39b01564;Peter Hawkins;2019-08-12 14:56:54 -0400;Merge pull request #1167 from hawkinsp/master
Update installation instructions.
==
==================
3604293b;Stephan Hoyer;2019-08-12 11:21:10 -0700;changes per review

==

jax/api.py
tests/api_test.py
==================
a7323ec5;Daniel Weaver;2019-08-12 17:56:46 +0000;Restored license header + plotting example, added benchmark

==

jax/experimental/ode.py
==================
a6579223;Roy Frostig;2019-08-12 07:53:33 -0700;Merge pull request #1132 from necula01/update_doc
Update documentation for jax.vmap.
==
==================
b6f0ec7a;Peter Hawkins;2019-08-12 10:40:28 -0400;Update installation instructions.
Prefer installing via a wheel, because it's simpler to explain.
Describe exactly which packages are needed to build on Ubuntu 18.04.

==

README.md
==================
76a93eaa;Peter Hawkins;2019-08-12 10:04:26 -0400;Merge pull request #1164 from hawkinsp/avals
Keep cached ShapedArray avals on xla.DeviceArray values
==
==================
3e78a0e2;Peter Hawkins;2019-08-10 16:04:43 -0400;Keep ShapedArray avals on xla.DeviceArray values
Makes abstractification of DeviceArray values cheaper, which is on the critical path for executing a compiled function.

==

jax/interpreters/pxla.py
jax/interpreters/xla.py
jax/lax/lax.py
==================
4474b111;Peter Hawkins;2019-08-12 10:02:29 -0400;Merge pull request #1163 from hawkinsp/master
Remove device_values=False support from `jit`.
==
==================
657ba1b3;Peter Hawkins;2019-08-12 09:59:22 -0400;Update quickstart notebook.

==

notebooks/quickstart.ipynb
==================
d9c448b7;Matthew Johnson;2019-08-12 06:36:54 -0700;Merge pull request #1165 from shoyer/docs-link-fix
Fix sphinx references in JAX docs
==
==================
35ca6bae;George Necula;2019-08-12 12:04:14 +0200;Fixed vmap documentation

==

jax/api.py
==================
3e16d439;Daniel Weaver;2019-08-12 04:37:59 +0000;Moved odeint.py to ode.py

==

jax/experimental/ode.py
jax/experimental/odeint.py
==================
c3bf532a;Stephan Hoyer;2019-08-10 16:40:08 -0700;Fix sphinx references in JAX docs
The links in `concurrency.rst` should work now.

The links in async_dispatch.rst don't work yet, but they will if
``DeviceArray`` ever ends up JAX's API docs.

==

docs/async_dispatch.rst
docs/concurrency.rst
==================
2b3e8b86;Peter Hawkins;2019-08-10 15:59:30 -0400;Merge pull request #1158 from npapernot/patch-1
typo in docstring
==
==================
335dbe82;Peter Hawkins;2019-08-10 15:17:24 -0400;Remove device_values=False support from `jit`.
This is no longer needed now `device_get` is not implemented via `jit`.

==

jax/api.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
==================
a411384d;Nicolas Papernot;2019-08-09 17:18:31 -0700;typo

==

examples/differentially_private_sgd.py
==================
156b3c86;Daniel Weaver;2019-08-09 21:19:45 +0000;Cleaning up variable & function names

==

jax/experimental/odeint.py
==================
1ec2aea2;Peter Hawkins;2019-08-09 16:56:57 -0400;Disable linalg test on TPU.

==

tests/linalg_test.py
==================
5887fe3d;Daniel Weaver;2019-08-09 20:31:43 +0000;Add adaptive-step ODE solver and VJP calculation with JAX control flow operators for fast compilation

==

jax/experimental/odeint.py
==================
35a48be2;Peter Hawkins;2019-08-09 15:38:54 -0400;Merge pull request #1155 from hawkinsp/master
Update XLA.
==
==================
2725c7e6;Peter Hawkins;2019-08-09 15:37:54 -0400;Update XLA.

==

WORKSPACE
jaxlib/BUILD
==================
1b6433b5;Peter Hawkins;2019-08-09 15:17:43 -0400;Merge pull request #1055 from hawkinsp/master
Make JAX tracer state thread-local. 
==
==================
8fd6e19e;Peter Hawkins;2019-08-09 15:08:26 -0400;More concurrency fixes.

==

docs/concurrency.rst
jax/api.py
jax/interpreters/pxla.py
jax/lax/lax_control_flow.py
jax/lib/xla_bridge.py
==================
a3421153;Peter Hawkins;2019-08-09 14:15:57 -0400;Merge pull request #1153 from hawkinsp/concurrency
Add test case for concurrent device_get and device_put calls.
==
==================
6dc730a5;Peter Hawkins;2019-07-23 09:53:27 -0400;Make JAX tracer state thread-local. Allows performing traces in separate threads.
Using threading within a traced context still won't work, but that is perhaps less important than the ability to call JIT-ted computations from separate threads.

(Revives https://github.com/google/jax/pull/734.)

==

docs/index.rst
jax/core.py
tests/api_test.py
==================
c603700f;Peter Hawkins;2019-08-09 13:55:04 -0400;Simplify locking code.

==

jax/lib/xla_bridge.py
==================
1b6e5c3c;Peter Hawkins;2019-08-09 13:38:08 -0400;Add locking around the XLA backend construction, which isn't thread-safe.

==

jax/lib/xla_bridge.py
==================
a8ddf071;Peter Hawkins;2019-08-09 13:12:44 -0400;Add test case for concurrent device_get and device_put calls.
Fix concurrency problems in memoize_... decorators.
Rename util.memoize to util.cache.
Remove util.memoize_unary and xla_bridge.memoize_thunk, replace with more general and thread-safe util.memoize that wraps fastcache.

==

jax/interpreters/pxla.py
jax/interpreters/xla.py
jax/lax/lax.py
jax/lib/xla_bridge.py
jax/linear_util.py
jax/numpy/lax_numpy.py
jax/util.py
tests/api_test.py
==================
fb610a13;Stephan Hoyer;2019-08-09 09:24:55 -0700;more descriptive name for dummy variable

==

jax/api.py
==================
eb1516e9;Stephan Hoyer;2019-08-09 09:15:24 -0700;Fix math in custom_implicit_solve

==

jax/api.py
tests/api_test.py
==================
b8d27a9b;Peter Hawkins;2019-08-09 11:44:34 -0400;Merge pull request #1152 from hawkinsp/linalg
Fixes to AD of batched np.linalg.solve
==
==================
423effe3;Peter Hawkins;2019-08-09 10:50:31 -0400;Check for symbolic zeros in linear algebra gradients.
Fix implementation of LU JVP when batch dimensions are present.

==

jax/lax_linalg.py
tests/linalg_test.py
==================
d9c938a4;Peter Hawkins;2019-08-09 09:10:35 -0400;Merge pull request #1146 from deniskamazur/patch-1
Hotfix: typo in colab link
==
==================
cd237afe;Peter Hawkins;2019-08-09 09:09:20 -0400;Merge pull request #1147 from schmrlng/patch-1
Fix documentation for jax.lax.ppermute
==
==================
1b672dc2;Peter Hawkins;2019-08-08 22:09:30 -0400;Update jaxlib release to 0.1.23.

==

README.md
notebooks/XLA_in_Python.ipynb
notebooks/gufuncs.ipynb
notebooks/maml.ipynb
notebooks/neural_network_and_data_loading.ipynb
notebooks/neural_network_with_tfds_data.ipynb
notebooks/quickstart.ipynb
notebooks/score_matching.ipynb
notebooks/vmapped log-probs.ipynb
==================
f6be9c09;Stephan Hoyer;2019-08-08 18:38:41 -0700;automatic derivs

==

tests/api_test.py
==================
eb4bfb43;Stephan Hoyer;2019-07-29 21:07:52 -0700;Helper function for defining differentiable solves.
``custom_implicit_solve`` is a helper function designed help library authors
(most notably for ``jax.scipy.optimize``) define derivatives for functions that
perform an implicit solve.

==

jax/api.py
tests/api_test.py
==================
95b8bea5;Peter Hawkins;2019-08-08 21:04:25 -0400;Merge pull request #1148 from hawkinsp/docs
Add some brief documentation about how to profile/trace JAX programs.
==
==================
bcacdfe3;Peter Hawkins;2019-08-08 21:02:41 -0400;Add some brief documentation about how to profile/trace JAX programs.

==

docs/index.rst
docs/profiling.rst
==================
d8271179;Ed Schmerling;2019-08-08 16:24:46 -0700;Fix documentation for jax.lax.ppermute

==

jax/lax/lax_parallel.py
==================
bc668e56;Peter Hawkins;2019-08-08 17:08:46 -0400;Increment Jaxlib version. Update XLA.

==

WORKSPACE
jaxlib/version.py
==================
38b80572;Peter Hawkins;2019-08-08 16:42:15 -0400;Update Docker scripts to use a tmpfs for builds. Upgrade bazel.

==

build/Dockerfile
build/build_wheel_docker_entrypoint.sh
==================
dd10bdba;Peter Hawkins;2019-08-08 16:33:50 -0400;Remove newline from build file.

==

jaxlib/BUILD
==================
233598a7;Peter Hawkins;2019-08-08 16:33:04 -0400;Add newline to build file.

==

jaxlib/BUILD
==================
fef315b6;Peter Hawkins;2019-08-08 16:14:45 -0400;Add ability to pass extra bazel options to build script. Remove cublas/cusolver dependencies from Jaxlib python code.

==

build/build.py
jaxlib/BUILD
==================
0b22d4db;Denis Mazur;2019-08-08 23:09:57 +0300;update colab link inside tutorial notebook

==

notebooks/score_matching.ipynb
==================
2fbe6daa;Denis Mazur;2019-08-08 22:56:51 +0300;fix: typo in collab link

==

notebooks/README.md
==================
2017153e;Matthew Johnson;2019-08-08 12:08:33 -0700;Merge pull request #1137 from deniskamazur/master
Add Generative Modelling by Estimating Gradients of Data Distribution…
==
==================
30ab4822;Peter Hawkins;2019-08-08 13:39:47 -0400;Merge pull request #1144 from hawkinsp/linalg
Add support for batched triangular solve and LU decomposition on GPU.
==
==================
5ac356d6;Peter Hawkins;2019-08-08 11:50:31 -0400;Add support for batched triangular solve and LU decomposition on GPU using cuBlas.

==

WORKSPACE
build/BUILD.bazel
build/install_xla_in_source_tree.sh
jax/lax_linalg.py
jax/numpy/linalg.py
jaxlib/BUILD
jaxlib/cublas.cc
jaxlib/cusolver.cc
jaxlib/cusolver.py
==================
442ce970;Denis Mazur;2019-08-08 19:42:59 +0300;update notes and comments in tutorial

==

notebooks/score_matching.ipynb
==================
5b5ad6e8;Matthew Johnson;2019-08-08 09:34:03 -0700;bump version for pypi

==

jax/version.py
==================
4927fff1;Matthew Johnson;2019-08-08 09:33:06 -0700;Merge pull request #1143 from google/issue1131
compiled while_loop impl
==
==================
873d8e40;Matthew Johnson;2019-08-08 08:59:44 -0700;compiled while_loop impl cf. #1131 #1130 #852

==

jax/interpreters/xla.py
jax/lax/lax_control_flow.py
==================
52e7c23e;Denis Mazur;2019-08-07 22:02:02 +0300;add Generative Modelling by Estimating Gradients of Data Distribution notebook tutorial

==

README.md
notebooks/README.md
notebooks/score_matching.ipynb
==================
a6ec5a91;Peter Hawkins;2019-08-07 12:56:01 -0400;Merge pull request #1136 from hawkinsp/linalg
Update XLA.
==
==================
72047c6e;Peter Hawkins;2019-08-07 12:55:09 -0400;Update XLA.

==

WORKSPACE
build/BUILD.bazel
jaxlib/BUILD
==================
b9c76175;Peter Hawkins;2019-08-07 12:44:45 -0400;Merge pull request #1135 from hawkinsp/linalg
Use Jacobi algorithm for eigh of small matrices on GPU
==
==================
7160077c;Peter Hawkins;2019-08-07 11:33:48 -0400;Use Jacobi algorithm for symmetric eigendecomposition for matrices with n < 32.
Use the batched Jacobi algorithm for large batches of small matrices.

==

jaxlib/cusolver.cc
jaxlib/cusolver.py
==================
d6bd59d7;Peter Hawkins;2019-08-07 10:16:22 -0400;Merge pull request #1134 from hawkinsp/numpy
Support rank > 2 inputs to np.linalg.norm if axis==None and ord==None.
==
==================
5336722a;Peter Hawkins;2019-08-07 09:21:07 -0400;Support rank > 2 inputs to np.linalg.norm if axis==None and ord==None.
Matches an undocumented NumPy behavior:
https://github.com/numpy/numpy/issues/14215

==

jax/numpy/linalg.py
tests/linalg_test.py
==================
9007d671;George Necula;2019-08-07 09:26:46 +0200;Update documentation for jax.vmap.

==

README.md
jax/api.py
==================
6337ac61;Peter Hawkins;2019-08-06 16:51:40 -0400;Mention tf.config.experimental.set_visible_devices in GPU memory allocation docs.

==

docs/gpu_memory_allocation.rst
==================
1b215057;Peter Hawkins;2019-08-06 11:13:50 -0400;Disable random Beta test on GPU due to test failure from https://github.com/google/jax/pull/1123.

==

tests/random_test.py
==================
7494c23b;Peter Hawkins;2019-08-06 10:53:36 -0400;Merge pull request #1128 from hawkinsp/pmap
pmap optimization: Don't precompute size and ndim on DeviceArrays.
==
==================
51eb67f7;Peter Hawkins;2019-08-06 10:29:25 -0400;pmap optimization: Don't precompute size and ndim on DeviceArrays.
We don't even look at them most of the time, and they are in the critical path for running jit/pmap code.

Saves ~1-2ms on a pmap microbenchmark.

==

jax/interpreters/pxla.py
jax/interpreters/xla.py
jax/lax/lax.py
==================
f105c93f;Peter Hawkins;2019-08-06 10:29:09 -0400;Merge pull request #1127 from hawkinsp/pmap
pmap optimization: cache aval in ShardedDeviceArray.
==
==================
0800fb7d;Peter Hawkins;2019-08-06 09:45:45 -0400;pmap optimization: cache aval in ShardedDeviceArray.
Speeds up abstractification of ShardedDeviceArrays, which is in the critical path for a pmap-cache hit.

==

jax/interpreters/pxla.py
==================
1463bb39;Peter Hawkins;2019-08-06 09:45:07 -0400;Merge pull request #1126 from hawkinsp/pmap
Two more pmap optimizations:
==
==================
4c8e27b4;Matthew Johnson;2019-08-06 06:41:30 -0700;Merge pull request #1124 from j-towns/random-logistic
Add logistic distribution to jax.random
==
==================
0bab9c13;Matthew Johnson;2019-08-06 06:41:04 -0700;Merge pull request #1123 from j-towns/fix-ks-test
Fix Kolmogorov-Smirnov hypothesis test
==
==================
395f84f9;Matthew Johnson;2019-08-06 06:38:38 -0700;Merge pull request #1125 from fabianp/patch-1
Typo in docstring
==
==================
05ce4c18;Peter Hawkins;2019-08-06 09:14:20 -0400;Two more pmap optimizations: * perform _shard_aval inside the memoized function not outside; this avoids work on the cache hit case. * rather than sharding each argument individually and then transposing a large list of lists, use a single function to shard all arguments in the layout expected by the C++ binding code.

==

jax/interpreters/parallel.py
jax/interpreters/pxla.py
==================
b3df11d6;Fabian Pedregosa;2019-08-06 09:07:48 -0400;Typo in docstring
jax.experimentaloptimizers -> jax.experimental.optimizers
==

examples/mnist_classifier.py
==================
f351dedb;Jamie Townsend;2019-08-06 12:19:05 +0100;Add logistic distribution to jax.random

==

jax/random.py
tests/random_test.py
==================
45e52b8f;Jamie Townsend;2019-08-06 11:55:59 +0100;Fix ks test and rm randint ks test

==

tests/random_test.py
==================
6e5dae4b;Matthew Johnson;2019-08-05 13:47:24 -0700;Merge pull request #1119 from shoyer/docs-jax-logo
Add the JAX logo to sphinx docs
==
==================
515e07bd;Stephan Hoyer;2019-08-05 13:08:17 -0700;White background

==

docs/_static/style.css
==================
f62c2e40;Matthew Johnson;2019-08-05 12:48:51 -0700;Merge pull request #1118 from shoyer/lax-map
Implement lax.map
==
==================
548e5fa7;Stephan Hoyer;2019-08-05 12:38:28 -0700;Spelling [ci-skip]

==

jax/lax/lax_control_flow.py
==================
8c8222a3;Stephan Hoyer;2019-08-05 12:34:29 -0700;Add the JAX logo to sphinx docs

==

docs/_static/jax_logo_250px.png
docs/_static/style.css
docs/_templates/layout.html
docs/conf.py
==================
33c463aa;Peter Hawkins;2019-08-05 15:22:54 -0400;Merge pull request #1117 from hawkinsp/pmap
Don't call _check_args in jit/pmap.
==
==================
8c628a26;Stephan Hoyer;2019-08-05 12:13:07 -0700;Implement lax.map
Fixes GH-1113

==

docs/jax.lax.rst
jax/lax/lax_control_flow.py
tests/lax_control_flow_test.py
==================
6fd597bd;Peter Hawkins;2019-08-05 15:03:50 -0400;Don't call _check_args in jit/pmap.
Instead, improve the error from xla.abstractify to match the one from _check_args.
This saves abstractifying values twice.

==

jax/api.py
jax/interpreters/xla.py
tests/api_test.py
==================
3afed054;Peter Hawkins;2019-08-05 14:49:31 -0400;Merge pull request #1116 from hawkinsp/pmap
Enable quantile test on TPU.
==
==================
17240c75;Peter Hawkins;2019-08-05 14:48:29 -0400;Enable quantile test on TPU.

==

tests/lax_numpy_test.py
==================
f94c9c43;Peter Hawkins;2019-08-05 14:42:31 -0400;Merge pull request #1110 from hawkinsp/tests
Add a jtu.device_under_test() method. 
==
==================
a3563878;Peter Hawkins;2019-08-05 14:42:21 -0400;Merge pull request #1115 from hawkinsp/pmap
Optimizations to pmap computation launch time.
==
==================
a94600c4;Peter Hawkins;2019-08-05 14:08:46 -0400;Optimizations to pmap computation launch time.

==

jax/interpreters/pxla.py
jax/util.py
==================
a26963fe;James Bradbury;2019-08-05 10:45:17 -0700;Merge pull request #1106 from google/jb/bool-reduction
fix jax.numpy reduction init_val for bools
==
==================
498ff8e5;Matthew Johnson;2019-08-05 10:29:06 -0700;Merge pull request #1111 from cclauss/master
Mark instances of 'long' with # noqa
==
==================
7b9ccea2;Matthew Johnson;2019-08-04 18:37:02 -0700;bump version for pypi

==

jax/version.py
==================
f17f2b97;cclauss;2019-08-05 00:22:41 +0200;Mark instances of 'long' with # noqa

==

jax/abstract_arrays.py
jax/lib/xla_bridge.py
tests/lax_test.py
==================
0fae8fec;Peter Hawkins;2019-08-04 17:17:49 -0400;Add a jtu.device_under_test() method. Use it instead of reparsing the device flag everywhere.

==

jax/test_util.py
tests/lax_numpy_test.py
tests/lax_test.py
tests/linalg_test.py
==================
cfc4df38;Peter Hawkins;2019-08-04 14:20:52 -0400;Merge pull request #1109 from hawkinsp/xlabridge
Cleanups to xla_bridge.py
==
==================
0ef05d75;Peter Hawkins;2019-08-04 12:34:03 -0400;Cleanups to xla_bridge.py
Remove stringification of dtypes. The NumPy dtype handling bug has to do with types with different hashes comparing as equal. This only does not happen between two np.dtype objects; it is sufficient to ismply ensure we actually have an np.dtype rather than something dtype-like (e.g., a string or NumPy type object).
Remove xla_bridge.infeed_put, which is unused.
Remove xla_bridge.Shape (use xla_client.Shape instead).
Remove xla_bridge.dtype_to_etype_exact (use xla_client.dtype_to_etype instead).
Remove xla_bridge.device_put (inlined the definition into its callers)
Remove xla_bridge.make_tuple (inlined the definition into its callers).

==

jax/interpreters/xla.py
jax/lax/lax.py
jax/lax/lax_parallel.py
jax/lib/xla_bridge.py
tests/lax_test.py
==================
5a348107;Peter Hawkins;2019-08-04 12:14:18 -0400;Merge pull request #1108 from hawkinsp/fixes
Suppress flake8 warning from __version__ logic.
==
==================
8e66d29c;Peter Hawkins;2019-08-04 12:12:53 -0400;Suppress flake8 warning from __version__ logic.

==

build/setup.py
setup.py
==================
d3446350;Peter Hawkins;2019-08-04 11:32:47 -0400;Merge pull request #1107 from hawkinsp/fixes
Fix flake8 warnings, including a few real bugs.
==
==================
e71474d8;Peter Hawkins;2019-08-04 10:25:48 -0400;Fix flake8 warnings, including a few real bugs.
Exceptions: long (Python 2 compat) and __version__ (flake8 doesn't undertand eval).

Fixes #317.

==

jax/experimental/optimizers.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
jax/lax/lax_parallel.py
jax/scipy/stats/bernoulli.py
jax/scipy/stats/dirichlet.py
tests/parallel_test.py
tests/random_test.py
==================
72c0dcf1;James Bradbury;2019-08-03 21:40:33 -0700;Merge pull request #1102 from georgedahl/fix
Fix pack_optimizer_state to correctly use tuples everywhere in the pa…
==
==================
d0c9f453;James Bradbury;2019-08-03 21:27:06 -0700;fix jax.numpy reduction init_val for bools

==

jax/lax/lax.py
jax/numpy/lax_numpy.py
tests/lax_test.py
==================
444aced7;George Dahl;2019-08-02 16:42:17 -0700;Fix pack_optimizer_state to correctly use tuples everywhere in the packed state and add a unit test to check round trip unpack/pack.

==

jax/experimental/optimizers.py
tests/optimizers_test.py
==================
fd4b84bd;Matthew Johnson;2019-08-02 11:26:49 -0700;Merge branch 'master' of github.com:google/jax

==
==================
3168006f;Matthew Johnson;2019-08-02 11:26:17 -0700;fix np.var dtype bug

==

jax/numpy/lax_numpy.py
==================
f8fa1a60;Peter Hawkins;2019-08-02 14:17:31 -0400;Disable gradient test for entr.

==

tests/lax_scipy_test.py
==================
6bc47626;Peter Hawkins;2019-08-02 13:32:14 -0400;More build formatting fixes.

==

jaxlib/BUILD
==================
e0b31ac3;Peter Hawkins;2019-08-02 13:29:52 -0400;Build formatting fixes.

==

jaxlib/BUILD
==================
e2d6d3ac;Peter Hawkins;2019-08-02 11:53:37 -0400;Merge pull request #1099 from hawkinsp/cusolver
Add support for linear algebra ops on GPU using Cusolver:
==
==================
99735958;Peter Hawkins;2019-08-02 11:48:12 -0400;Remove commented lines from test.

==

tests/linalg_test.py
==================
ed3e2308;Peter Hawkins;2019-08-02 11:16:15 -0400;Add support for linear algebra ops on GPU using Cusolver: * LU decomposition * Symmetric (Hermitian) eigendecomposition * Singular value decomposition.
Make LU decomposition tests less sensitive to the exact decomposition; check that we have a decomposition, not precisely the same one scipy returns.

==

build/BUILD.bazel
build/install_xla_in_source_tree.sh
jax/lax_linalg.py
jax/lib/__init__.py
jaxlib/BUILD
jaxlib/cusolver.cc
jaxlib/cusolver.py
jaxlib/lapack.pyx
tests/linalg_test.py
==================
7c060435;Peter Hawkins;2019-08-02 08:56:07 -0400;Merge pull request #1098 from hawkinsp/fixes
Fix test breakage at head.
==
==================
b45d1ec1;Peter Hawkins;2019-08-02 08:55:22 -0400;Fix test breakage at head. Add new numpy/scipy functions to documentation.

==

docs/jax.numpy.rst
docs/jax.scipy.rst
tests/lax_numpy_test.py
==================
1dfdd8da;Matthew Johnson;2019-08-01 20:59:19 -0700;Merge pull request #1094 from fehiepsi/mvngamma
Add sp.multigammaln, sp.entr
==
==================
1f3b4ae9;Matthew Johnson;2019-08-01 20:58:22 -0700;Merge pull request #1091 from fehiepsi/tril
expose tril_indices, triu_indices similar to diag_indices
==
==================
76732852;Matthew Johnson;2019-08-01 20:58:06 -0700;Merge pull request #1089 from fehiepsi/nonlinear
Add some nonlinearities stax.Elu, stax.LeakyRelu
==
==================
fd98f957;Matthew Johnson;2019-08-01 20:57:28 -0700;Merge pull request #1088 from fehiepsi/median
Add numpy.median and support ddof for numpy.var
==
==================
e597b222;Matthew Johnson;2019-08-01 20:56:19 -0700;Merge pull request #1086 from fehiepsi/sort
Add batching rule for lax.sort
==
==================
db8116d0;Matthew Johnson;2019-08-01 20:51:15 -0700;Merge pull request #1083 from j-towns/patch-1
Correct jax.numpy.pad signature
==
==================
0134e2e2;Matthew Johnson;2019-08-01 20:50:52 -0700;Merge pull request #1087 from ibab/master
Add rmsprop_momentum optimizer (same as TF RMSProp)
==
==================
1f267cf6;Peter Hawkins;2019-08-01 22:06:07 -0400;Merge pull request #1096 from hawkinsp/fixes
Add --spawn_strategy from TensorFlow configuration.
==
==================
40c517e9;Peter Hawkins;2019-08-01 21:43:03 -0400;Add --spawn_strategy from TensorFlow configuration.

==

build/build.py
==================
24d4aaf3;Peter Hawkins;2019-08-01 21:24:35 -0400;Merge pull request #1095 from hawkinsp/fixes
Fix test failures due to Numpy 1.17.
==
==================
021d93a3;Peter Hawkins;2019-08-01 21:16:05 -0400;Fix test failures due to Numpy 1.17.

==

tests/lax_numpy_test.py
==================
7f4dc87a;fehiepsi;2019-08-01 19:12:03 -0400;add multigammaln, entr

==

jax/scipy/special.py
tests/lax_scipy_test.py
==================
7a5aecea;fehiepsi;2019-08-01 17:35:36 -0400;expose tril_indices triu_indices

==

jax/numpy/lax_numpy.py
==================
dce27bfc;Peter Hawkins;2019-08-01 17:21:20 -0400;Merge pull request #1090 from hawkinsp/pytree
Fix test failures.
==
==================
c302e388;Peter Hawkins;2019-08-01 17:20:27 -0400;Fix test failures.

==

jax/api.py
tests/core_test.py
==================
5ffe2ae5;fehiepsi;2019-08-01 17:11:31 -0400;expose sigmoid too

==

jax/experimental/stax.py
tests/stax_test.py
==================
129af6a5;Peter Hawkins;2019-08-01 16:50:20 -0400;Merge pull request #1085 from hawkinsp/pytree
Make the C++ version of tree_multimap accept tree suffixes of the primary tree.
==
==================
cb53ca87;Peter Hawkins;2019-08-01 16:48:18 -0400;Address review comments.

==

jax/tree_util.py
jaxlib/pytree.cc
tests/tree_util_tests.py
==================
688d77f4;fehiepsi;2019-08-01 16:41:06 -0400;better test str message

==

tests/stax_test.py
==================
2836d03b;fehiepsi;2019-08-01 16:39:08 -0400;add some nonlinearity

==

jax/experimental/stax.py
tests/stax_test.py
==================
45c5bd4f;fehiepsi;2019-08-01 16:20:08 -0400;support ddof for var

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
628f87d3;Igor Babuschkin;2019-08-01 19:30:30 +0100;Add rmsprop_momentum optimizer (same as TF RMSProp)
The TensorFlow RMSProp optimizer supports an additional momentum
parameter, which allows adding momentum to the RMSProp update.
Having momentum requires keeping around additional state, which might
not be desirable when using the standard RMSProp optimizer, so I've
created an additional optimizer for this case.
RMSProp with momentum can be necessary to reproduce some research papers.

==

jax/experimental/optimizers.py
==================
98152d9d;fehiepsi;2019-08-01 14:19:41 -0400;add numpy.median

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
c41677fa;Peter Hawkins;2019-08-01 12:47:04 -0400;Merge pull request #1073 from hawkinsp/deviceget
Avoid building an identity computation in jax.device_get().
==
==================
1b490fb5;fehiepsi;2019-08-01 12:39:53 -0400;Merge remote-tracking branch 'upstream/master' into sort

==
==================
e1ee87b5;fehiepsi;2019-08-01 12:39:33 -0400;add batching rule for lax.sort

==

jax/lax/lax.py
tests/batching_test.py
==================
38bffe9a;Peter Hawkins;2019-08-01 12:15:08 -0400;Add a pytreedef.flatten_up_to() method that flattens a PyTree only up to the structure of a PyTreeDef. Make the C++ version of tree_multimap accept tree suffixes of the primary tree. Document and test this behavior. Remove unnecessary locking in custom node registry; we hold the GIL already so there's no point to the additional locking.

==

jax/tree_util.py
jaxlib/BUILD
jaxlib/pytree.cc
tests/tree_util_tests.py
==================
0533813b;Peter Hawkins;2019-08-01 11:52:14 -0400;Merge pull request #1084 from hawkinsp/xla
Update XLA.
==
==================
cf95ed87;Peter Hawkins;2019-08-01 11:48:16 -0400;Update XLA.

==

WORKSPACE
==================
47f9eedb;Jamie Townsend;2019-08-01 15:44:23 +0100;Correct jax.numpy.pad signature

==

jax/numpy/lax_numpy.py
==================
2466b9b9;Matthew Johnson;2019-07-31 14:35:40 -0700;Merge pull request #1079 from google/fix-pad-transpose-symbolic-zeros
fix symbolic zero handling in _pad_transpose
==
==================
0600b738;Matthew Johnson;2019-07-31 13:27:19 -0700;fix symbolic zero handling in _pad_transpose
tested manually against example from @matthewdhoffman

==

jax/lax/lax.py
==================
6434d9d0;Peter Hawkins;2019-07-30 21:23:44 -0400;Add corrcoef to jax.numpy docs.

==

docs/jax.numpy.rst
==================
00ca6a2f;Peter Hawkins;2019-07-30 21:01:48 -0400;Replace jaxlib import paths with jax.lib paths.

==

jax/lib/xla_bridge.py
jax/tools/jax_to_hlo.py
tests/jax_to_hlo_test.py
==================
a3501913;Peter Hawkins;2019-07-30 20:50:09 -0400;Merge pull request #1074 from hawkinsp/pytree
Add C++ implementation of Pytree logic.
==
==================
e8b42367;Peter Hawkins;2019-07-30 20:43:50 -0400;Address additional review comments.

==

jaxlib/pytree.cc
==================
3461dfff;Skye Wanderman-Milne;2019-07-30 15:52:03 -0700;Add how to configure TF to GPU memory allocation doc.

==

docs/gpu_memory_allocation.rst
==================
5b9849f1;Skye Wanderman-Milne;2019-07-29 12:24:58 -0700;Add docs on GPU memory allocation.

==

docs/gpu_memory_allocation.rst
docs/index.rst
==================
b9a984f4;Matthew Johnson;2019-07-30 09:09:52 -0700;move ode.py to jax/experimental

==

jax/experimental/ode.py
==================
6c199fcd;Matthew Johnson;2019-07-30 09:09:28 -0700;Merge pull request #1068 from duvenaud/ode-demo
Add example of an adaptive-step ODE solver and adjoint sensitivities
==
==================
3c3f01e6;Peter Hawkins;2019-07-30 10:15:37 -0400;Address review comments.

==

jax/tree_util.py
jaxlib/BUILD
jaxlib/pytree.cc
==================
96dd2e66;Peter Hawkins;2019-07-30 09:53:59 -0400;Merge pull request #1071 from wyjw/master
Implementation of np.corrcoef
==
==================
4dcae5de;wyjw;2019-07-29 22:56:30 -0400;Update lax_numpy.py

==

jax/numpy/lax_numpy.py
==================
5b75a7c1;wyjw;2019-07-29 16:50:31 -0400;Update lax_numpy_test.py

==

tests/lax_numpy_test.py
==================
22a6aaf9;wyjw;2019-07-29 16:48:35 -0400;make test more robust

==

tests/lax_numpy_test.py
==================
ea8597ed;wyjw;2019-07-29 16:25:42 -0400;Update lax_numpy_test.py

==

tests/lax_numpy_test.py
==================
d0644d6a;Peter Hawkins;2019-07-29 15:21:47 -0400;Remove old xla_data_pb2 compatibility shim.

==

build/jaxlib/__init__.py
jax/lax/lax.py
jax/lib/__init__.py
jax/lib/xla_bridge.py
==================
510a9167;Peter Hawkins;2019-07-29 15:06:05 -0400;Add C++ implementation of pytree logic.
Move jaxlib version test into jax/lib/__init__.py. Make jax/lib mirror the structure of jaxlib; e.g., xla_client is now available as jax.lib.xla_client.

==

WORKSPACE
build/BUILD.bazel
build/install_xla_in_source_tree.sh
jax/lax/lax.py
jax/lax_linalg.py
jax/lib/__init__.py
jax/lib/xla_bridge.py
jax/numpy/lax_numpy.py
jax/tree_util.py
jaxlib/BUILD
jaxlib/pytree.cc
tests/linalg_test.py
==================
b89e5a7a;wyjw;2019-07-29 13:11:43 -0400;shape_c variable taken out

==

jax/numpy/lax_numpy.py
==================
5487c784;wyjw;2019-07-29 13:05:48 -0400;added shape check

==

jax/numpy/lax_numpy.py
==================
82568366;Peter Hawkins;2019-07-29 11:55:10 -0400;Avoid building an identity computation in jax.device_get().
Instead, directly copy values to the host.

==

jax/api.py
==================
a06883d9;wyjw;2019-07-29 11:53:40 -0400;Made changes based on review.

==

jax/numpy/lax_numpy.py
==================
4e65c61a;wyjw;2019-07-29 11:52:07 -0400;Update pxla.py

==

jax/interpreters/pxla.py
==================
4b42bbce;wyjw;2019-07-29 11:51:21 -0400;Update pxla.py

==

jax/interpreters/pxla.py
==================
740ba311;wyjw;2019-07-29 11:50:56 -0400;Accidental mistake when reverting.

==

jax/interpreters/pxla.py
==================
a106b015;wyjw;2019-07-29 23:24:17 +0800;Merge pull request #2 from wyjw/revert-1-corrcoef
Revert "Corrcoef"
==
==================
a87627b5;wyjw;2019-07-29 11:24:05 -0400;Revert "Corrcoef"

==

jax/interpreters/pxla.py
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
9856375c;wyjw;2019-07-29 23:17:11 +0800;Merge pull request #1 from wyjw/corrcoef
Corrcoef
==
==================
3b6edbbe;twnly;2019-07-29 11:12:02 -0400;corrcoef

==

jax/numpy/lax_numpy.py
==================
e2bb9e31;twnly;2019-07-29 11:07:14 -0400;here

==
==================
d9b7c5fa;twnly;2019-07-29 11:06:08 -0400;made changes to corrcoef

==

jax/numpy/lax_numpy.py
==================
97407281;twnly;2019-07-29 11:05:50 -0400;Merge branch 'master' of https://github.com/google/jax into corrcoef

==
==================
476dc3db;Peter Hawkins;2019-07-29 10:57:27 -0400;Python changes in preparation for adding a C++ implementation of the PyTree utilities.

==

jax/api.py
jax/api_util.py
jax/tree_util.py
tests/tree_util_tests.py
==================
5861e37e;Matthew Johnson;2019-07-28 17:17:13 -0700;fix soft_pmap bug

==

jax/interpreters/pxla.py
==================
fd68636f;wyjw;2019-07-28 15:30:01 -0400;Update lax_numpy_test.py

==

tests/lax_numpy_test.py
==================
07a90470;wyjw;2019-07-28 15:27:16 -0400;Implementation of np.corrcoef

==

jax/numpy/lax_numpy.py
==================
c2f26d7a;twnly;2019-07-28 15:17:23 -0400;here

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
f34df706;Matthew Johnson;2019-07-26 17:21:11 -0700;fix triangular_solve_transpose_rule comment

==

jax/lax_linalg.py
==================
7f557ebd;Matthew Johnson;2019-07-26 07:22:27 -0700;Merge pull request #1069 from google/issue1065
fix num_replicas counts for initial-style control
==
==================
c28f52a9;Matthew Johnson;2019-07-26 07:21:18 -0700;Merge pull request #1070 from makroiss/patch-1
Return DeviceArray from ShardedDeviceArray.__getitem__ instead of copying to host
==
==================
f4a92c8f;Manuel Kroiss;2019-07-26 11:06:42 +0100;Return DeviceArray from ShardedDeviceArray.__getitem__ instead of copying to host

==

jax/interpreters/pxla.py
==================
aa190ef8;Matthew Johnson;2019-07-25 18:11:44 -0700;fix num_replicas counts for initial-style control
fixes #1065

==

jax/interpreters/xla.py
tests/pmap_test.py
==================
8ac6a101;Matthew Johnson;2019-07-25 17:37:08 -0700;Merge pull request #1066 from google/speed-up-pmap-axis-size-getting
speed up pmap axis-size getting
==
==================
ab20adea;David Duvenaud;2019-07-25 19:26:43 -0400;Add example of an adaptive-step ODE solver and the adjoint sensitivities method.

==

ode.py
==================
0546c949;Matthew Johnson;2019-07-25 12:41:11 -0700;speed up pmap axis-size getting
Co-authored-by: Peter Hawkins <phawkins@google.com>

==

jax/api.py
jax/api_util.py
jax/tree_util.py
==================
732ea373;Peter Hawkins;2019-07-25 09:22:30 -0400;Merge pull request #1064 from hawkinsp/fixes
Fix XRT breakage from previous cleanup.
==
==================
99b67e1d;Peter Hawkins;2019-07-25 09:21:50 -0400;Fix XRT breakage from previous cleanup.

==

jax/lib/xla_bridge.py
==================
5167f931;Matthew Johnson;2019-07-24 20:41:47 +0100;Merge pull request #1054 from google/jit-device-placement-api
first cut at jit device placement api
==
==================
8b329ec4;Matthew Johnson;2019-07-24 20:35:43 +0100;Merge branch 'master' into jit-device-placement-api

==
==================
8ea43804;Matthew Johnson;2019-07-24 20:33:05 +0100;Merge pull request #1063 from google/issue1062
add ShardedDeviceTuple constant handler
==
==================
dbb907c8;Matthew Johnson;2019-07-24 22:03:19 +0300;add warning that device_assignment api is unstable

==

jax/api.py
==================
3f9c001c;Matthew Johnson;2019-07-24 21:45:56 +0300;add ShardedDeviceTuple constant handler, fixes #1062

==

jax/interpreters/pxla.py
tests/api_test.py
==================
27b46e66;Matthew Johnson;2019-07-24 19:38:53 +0100;Merge pull request #1053 from j-towns/core-call-wrapping
Update core.call_impl to use call_wrapped
==
==================
75150bf3;Matthew Johnson;2019-07-24 20:43:34 +0300;document int device_assignment argument of jit
fix int/long bug

==

jax/api.py
jax/lib/xla_bridge.py
tests/api_test.py
==================
94f2b60d;Matthew Johnson;2019-07-24 18:35:24 +0100;Merge branch 'master' into jit-device-placement-api

==
==================
c42665c5;Matthew Johnson;2019-07-23 02:48:53 -0700;first cut at jit device_assignment api
make execute_primitive put args on correct device

==

jax/api.py
jax/interpreters/xla.py
jax/lib/xla_bridge.py
tests/api_test.py
==================
866b5d26;Peter Hawkins;2019-07-24 08:52:43 -0400;Merge pull request #1061 from hawkinsp/jaxlib
Increase minimum Jaxlib version to 0.1.22.
==
==================
065a383e;Peter Hawkins;2019-07-24 08:52:33 -0400;Merge pull request #1060 from hawkinsp/linalg
Remove experimental warning from linalg routines.
==
==================
2369d1fe;Peter Hawkins;2019-07-23 21:45:41 -0400;Increase minimum Jaxlib version to 0.1.22.
Remove code that preserves backward compatibility with older jaxlib versions.

==

jax/interpreters/pxla.py
jax/interpreters/xla.py
jax/lax/lax.py
jax/lib/xla_bridge.py
==================
efdcef88;Peter Hawkins;2019-07-23 21:13:14 -0400;Remove experimental warning from linalg routines.
There's no particular reason to scare people with the experimental warning any longer; we don't know of any bugs here.

==

jax/numpy/linalg.py
jax/scipy/linalg.py
==================
dd37f8c9;Peter Hawkins;2019-07-23 17:30:22 -0400;Merge pull request #1058 from hawkinsp/jit
Check that function arguments to APIs like `jit` are callable.
==
==================
cfeb20d2;Peter Hawkins;2019-07-23 17:03:28 -0400;Check that function arguments to APIs like `jit` are callable.

==

jax/api.py
tests/api_test.py
==================
4c4ab3ac;Peter Hawkins;2019-07-23 16:52:21 -0400;Merge pull request #1057 from hawkinsp/shapes
Add a common lax._canonicalize_shape method, use on methods that acce…
==
==================
1479ae90;Peter Hawkins;2019-07-23 16:18:10 -0400;Add a common lax._canonicalize_shape method, use on methods that accept shapes in lax. Explicitly convert shape entries to integers using the Python __index__() method. Implement __index__ on DeviceArrays so shapes like (1, DeviceArray(2)) work.
Fixes bug where np.full accepted floating point shapes; __index__() errors for non-integer inputs, where int() would silently cast and drop information.

==

jax/interpreters/batching.py
jax/interpreters/xla.py
jax/lax/lax.py
tests/lax_numpy_test.py
tests/lax_test.py
==================
97a5148a;Peter Hawkins;2019-07-23 14:48:35 -0400;Merge pull request #1056 from hawkinsp/ad
Remove assertions in scatter/dynamic_update_slice JVP rules that test…
==
==================
f64332b3;Peter Hawkins;2019-07-23 14:18:07 -0400;Remove assertions in scatter/dynamic_update_slice JVP rules that test whether index tangents are symbolically zero.
Since indices are integers, their tangents should be zero anyway, and symbolic zeros should always be treated as an optimization rather than a necessary precondition.

==

jax/lax/lax.py
tests/lax_numpy_indexing_test.py
==================
b5f8e687;Peter Hawkins;2019-07-23 06:51:09 -0400;Merge pull request #1051 from hawkinsp/master
Use fastcache for LRU caches in JAX.
==
==================
ec456a18;Matthew Johnson;2019-07-23 12:21:28 +0300;Update random.py
Update `jax.random.fold_in` docstring to specify  `data` is treated as a 32bit integer.
==

jax/random.py
==================
915dc606;Matthew Johnson;2019-07-23 12:20:35 +0300;Merge pull request #1039 from pzhokhov/fold_in_fix
remove static argnums from random.fold_in
==
==================
08013954;Peter Hawkins;2019-07-22 17:24:10 -0400;Use fastcache for LRU caches in JAX.
fastcache is both a faster cache implementation and is also thread-safe.

==

.travis.yml
jax/lib/xla_bridge.py
jax/linear_util.py
jax/tree_util.py
jax/util.py
setup.py
==================
21a69884;Jamie Townsend;2019-07-22 17:09:03 +0100;call_wrapped in core.call_impl

==

jax/core.py
==================
f31d58fc;Peter Hawkins;2019-07-21 22:43:56 +0100;Merge pull request #1047 from hawkinsp/tests
Enable some tests that now pass.
==
==================
d6e1e1b9;Peter Hawkins;2019-07-21 22:43:43 +0100;Merge pull request #1048 from hawkinsp/master
Implement DeviceArray.__setitem__ with an error message pointing the …
==
==================
00fabfe1;Peter Hawkins;2019-07-21 16:45:46 -0400;Implement DeviceArray.__setitem__ with an error message pointing the user to jax.ops.index_update.

==

jax/numpy/lax_numpy.py
==================
6995a2a8;Peter Hawkins;2019-07-21 21:37:32 +0100;Merge pull request #1025 from hawkinsp/master
Merge scatter and gather indexing implementations.
==
==================
549cd23f;Peter Hawkins;2019-07-20 14:00:00 +0100;Remove debug print statement and stale comment.

==

jax/ops/scatter.py
tests/lax_numpy_indexing_test.py
==================
f37af265;Peter Hawkins;2019-07-21 16:25:27 -0400;Enable some tests that now pass.

==

tests/lax_numpy_test.py
tests/lax_scipy_test.py
tests/lax_test.py
tests/linalg_test.py
tests/random_test.py
tests/scipy_stats_test.py
==================
9e6692a2;Peter Hawkins;2019-07-21 20:57:07 +0100;Merge pull request #1046 from hawkinsp/docs
Documentation improvements.
==
==================
4eb1820a;Peter Hawkins;2019-07-20 14:40:31 +0100;Add documentation to JAX modules.

==

docs/jax.lax.rst
docs/jax.numpy.rst
docs/jax.ops.rst
docs/jax.rst
jax/numpy/lax_numpy.py
==================
c9eb063c;Peter Hawkins;2019-07-21 20:05:56 +0100;Merge pull request #1045 from hawkinsp/fixes
Disable some tests that fail on GPU and TPU.
==
==================
a3e02837;Peter Hawkins;2019-07-21 15:05:17 -0400;Disable some tests that fail on GPU and TPU.

==

tests/lax_numpy_test.py
==================
dad1c490;Matthew Johnson;2019-07-21 14:27:20 +0100;Merge pull request #1044 from niklasschmitz/master
update maml notebook with new optimizers api
==
==================
6277be91;Niklas Schmitz;2019-07-21 15:00:17 +0200;update maml notebook with new optimizers api

==

notebooks/maml.ipynb
==================
f8234ec6;Peter Hawkins;2019-07-20 14:44:23 +0100;Merge pull request #1042 from hawkinsp/fixes
Disable np.quantile test for old Numpy versions.
==
==================
e95bfff0;Peter Hawkins;2019-07-20 13:56:31 +0100;Disable np.quantile test for old Numpy versions. Disable FFT batching test on TPU.

==

tests/lax_numpy_test.py
tests/lax_test.py
==================
3b39290b;Peter Hawkins;2019-07-20 08:52:07 +0100;Merge pull request #1041 from hawkinsp/fixes
Add explicit Python version to build rule.
==
==================
36564687;Peter Hawkins;2019-07-20 08:51:21 +0100;Add explicit Python version to build rule.

==

jax/tools/build_defs.bzl
==================
bb1a4e0e;Peter Hawkins;2019-07-20 08:47:28 +0100;Merge pull request #1040 from hawkinsp/fixes
Support older Numpy versions that don't have np.quantile.
==
==================
eefd5517;Peter Hawkins;2019-07-20 08:44:04 +0100;Support older Numpy versions that don't have np.quantile. Fix typo.

==

jax/numpy/lax_numpy.py
jax/tree_util.py
==================
8985d684;Peter Zhokhov;2019-07-19 12:04:33 -0700;remove static argnums from random.fold_in

==

jax/random.py
==================
e7168021;Skye Wanderman-Milne;2019-07-18 12:10:12 -0700;Adding vmap/batching support to FFT.
Fixes #1024.

Co-authored-by: Peter Hawkins <phawkins@google.com>

==

jax/lax/lax_fft.py
tests/lax_test.py
==================
99dbb15a;Peter Hawkins;2019-07-19 09:56:58 +0100;Merge pull request #1036 from hawkinsp/jaxlib
Increment Jaxlib version.
==
==================
2e64307f;Peter Hawkins;2019-07-19 09:54:07 +0100;Increment Jaxlib version.

==

jaxlib/version.py
==================
7c4cf2d9;Matthew Johnson;2019-07-18 23:26:55 -0700;Merge branch 'master' of github.com:google/jax

==
==================
65eef4c4;Matthew Johnson;2019-07-18 23:26:35 -0700;update xla

==

WORKSPACE
==================
546bb572;Matthew Johnson;2019-07-19 07:04:23 +0100;Merge pull request #1026 from kroq-gar78/readme-link
Fix link in README
==
==================
eecb4d9f;Matthew Johnson;2019-07-19 06:44:04 +0100;Merge pull request #1035 from shoyer/restore-jit-is-disabled
Always restore _jit_is_disabled
==
==================
88589a5e;Stephan Hoyer;2019-07-18 19:47:49 -0700;Always restore _jit_is_disabled
Otherwise if you get an exception inside a ``disable_jit()`` context (not
uncommon if debugging), ``jit`` is disabled permanently!

==

jax/api.py
==================
4c34541c;Matthew Johnson;2019-07-17 23:25:55 -0700;raise error when vmap used with kwargs (#912)

==

jax/api.py
==================
35a430e1;Aditya Vaidya;2019-07-17 03:18:28 -0500;Fix link in README

==

README.md
==================
f25b2f87;Peter Hawkins;2019-07-15 13:25:31 +0100;Merge scatter and gather indexing implementations.

==

jax/numpy/lax_numpy.py
jax/ops/scatter.py
tests/lax_numpy_indexing_test.py
tests/parallel_test.py
==================
d90993f7;Peter Hawkins;2019-07-16 09:58:56 +0100;Merge pull request #1020 from hawkinsp/scatter
Support mixed basic and advanced indexing in ops.index_update
==
==================
7effcf85;Peter Hawkins;2019-07-16 09:49:35 +0100;Edit some comments.

==

jax/ops/scatter.py
==================
861e9393;Matthew Johnson;2019-07-15 23:04:50 +0100;import random in jax/__init__.py

==

jax/__init__.py
==================
d2c5fd2c;Roy Frostig;2019-07-15 10:11:50 -0700;Merge pull request #1018 from shoyer/defjvp_all-doc
DOC: fix docstring for defjvp_all
==
==================
0850318a;Peter Hawkins;2019-07-14 10:57:41 -0400;Add support for mixing basic and advanced indexing in the same scatter operation.

==

jax/lax/lax.py
jax/ops/scatter.py
tests/lax_numpy_indexing_test.py
==================
5a782b08;Stephan Hoyer;2019-07-13 20:08:46 -0700;DOC: fix docstring for defjvp_all
The form of the arguments for custom_jvp was described inconsistently from the
examples (and the code).

==

jax/api.py
==================
b45ea2b4;Peter Hawkins;2019-07-13 15:07:51 -0400;Remove unnecessary reshape from scatter advanced indexing.

==

jax/ops/scatter.py
==================
e0b3f103;Peter Hawkins;2019-07-13 14:32:14 -0400;Merge pull request #1015 from hawkinsp/cumprod
Add batching rule for reduce_window_p. Allows batching of np.cumprod.
==
==================
09c3468b;Peter Hawkins;2019-07-13 10:23:53 -0400;Merge pull request #1014 from hawkinsp/master
Update np.take_along_axis to avoid reshapes and materialization of large iotas.
==
==================
05ff3967;Peter Hawkins;2019-07-13 10:22:26 -0400;Add batching rule for reduce_window_p. Allows batching of np.cumprod.

==

jax/lax/lax.py
tests/batching_test.py
==================
35729a69;Peter Hawkins;2019-07-13 09:59:19 -0400;Fix take_along_axis in x64 mode.

==

jax/numpy/lax_numpy.py
==================
e13fac46;Peter Hawkins;2019-07-12 21:47:24 -0400;Test negative indices in np.take_along_axis test.

==

tests/lax_numpy_test.py
==================
76834c76;Peter Hawkins;2019-07-12 21:43:07 -0400;Lower jax.numpy.take_along_axis directly to lax.gather().
This both allows us to avoid reshapes, and also allows us to avoid forming some unnecessarily large iota constants.

==

jax/numpy/lax_numpy.py
==================
a1216143;Matthew Johnson;2019-07-11 21:30:57 -0700;Merge pull request #990 from superbobry/memoryview-as-array
Added support for creating arrays via the buffer interface
==
==================
8e794ad9;Matthew Johnson;2019-07-09 21:37:58 -0700;Merge pull request #1008 from google/multi-replica-staging
enable staging out more multi-replica computations
==
==================
fb1e2124;Matthew Johnson;2019-07-09 15:12:02 -0700;enable staging out more multi-replica computations
There are two real changes here:

1. In api.py, improve the handling of the axis environment in
`xla_computation` so that `xla_computation(pmap(lambda x: x))(x)` works,
by checking for pmap's included in the jaxpr to be staged out (analogous
to how jit-of-pmap works).

2. In pxla.py, handle as a special case the pmapping of computations for
which the output does not depend on the input. The purpose here is to
enable `xla_computation(pmap(lambda x: x))(x)` when `x = np.arange(8)`
yet only one XLA device is available. Evaluating that expression leads
to the (partial) evaluation of a trivial pmap (unit / empty-tuple inputs and
outputs), which would cause an error when we attempt to compile an XLA
computation for more replicas than available hardware devices. We don't
know the computation is trivial until after we've run the function, i.e.
until we're in the xla_pmap impl, so this is the right place to do it.

The other changes are unrelated miscellania.

==

jax/abstract_arrays.py
jax/api.py
jax/interpreters/pxla.py
tests/api_test.py
tests/pmap_test.py
==================
71187c5a;Matthew Johnson;2019-07-09 12:28:24 -0700;Merge pull request #1005 from shoyer/pytree-partial
Add a functools.partial subclass in tree_util
==
==================
0d6b3f2b;Stephan Hoyer;2019-07-09 12:05:59 -0700;Define partial to pytree in terms of tuple and dict

==

jax/tree_util.py
==================
a45fc83e;Stephan Hoyer;2019-07-09 11:38:23 -0700;Add a functools.partial subclass in tree_util

==

jax/tree_util.py
tests/tree_util_tests.py
==================
76eda746;Matthew Johnson;2019-07-09 07:03:02 -0700;Merge pull request #1003 from necula01/fix_notebook
Fix stale notebook.
==
==================
63fe0588;George Necula;2019-07-09 12:14:01 +0200;Fix stale notebook.
The notebook fails with type errors, due to changes in XLA.
Use numpy.dtype for the xla_client.Shape.array_shape calls.

==

notebooks/XLA_in_Python.ipynb
==================
498d501a;Roy Frostig;2019-07-08 20:57:19 -0700;Merge pull request #1001 from google/parallelize
parallelization work-in-progress
==
==================
e05bc3b9;Matthew Johnson;2019-07-08 19:37:16 -0700;Merge pull request #1002 from google/issue1000
JaxprTrace.process_map wasn't using env_tracers
==
==================
30d0a84b;Matthew Johnson;2019-07-08 18:33:09 -0700;JaxprTrace.process_map wasn't using env_tracers
fixes #1000

==

jax/interpreters/partial_eval.py
==================
00a506f5;Roy Frostig;2019-07-08 18:21:43 -0700;simplify and move test corresponding to issue #1000
Co-authored-by: Matthew Johnson <mattjj@google.com>

==

tests/parallel_test.py
tests/pmap_test.py
==================
9f40687c;Roy Frostig;2019-07-08 18:06:00 -0700;add test corresponding to issue #1000
Co-authored-by: Matthew Johnson <mattjj@google.com>

==

tests/parallel_test.py
==================
fb33de08;Roy Frostig;2019-07-08 17:54:03 -0700;implement `PapplyTrace.post_process_call`
Co-authored-by: Matthew Johnson <mattjj@google.com>

==

jax/interpreters/parallel.py
==================
d9c61ca8;Roy Frostig;2019-07-08 17:19:13 -0700;fix `convert_element_type` and `conv_general_dilated` parallelization rules
Co-authored-by: Matthew Johnson <mattjj@google.com>

==

jax/lax/lax_parallel.py
==================
ee81f190;Roy Frostig;2019-07-08 16:49:56 -0700;add failing test composing `make_jaxpr` with `papply`
Co-authored-by: Matthew Johnson <mattjj@google.com>

==

tests/parallel_test.py
==================
7898fd89;Roy Frostig;2019-07-08 16:46:35 -0700;fix `_identity_papply` to accept axis size
Co-authored-by: Matthew Johnson <mattjj@google.com>

==

jax/lax/lax_parallel.py
==================
e8041643;Roy Frostig;2019-07-08 16:45:01 -0700;test the ability to `make_jaxpr` an open spmd function (i.e. with unbound axis name)
Co-authored-by: Matthew Johnson <mattjj@google.com>

==

tests/pmap_test.py
==================
ae5fd3dd;Roy Frostig;2019-07-08 16:43:30 -0700;fix references to `lax` symbols in parallelization rules that were moved out of `lax`
Co-authored-by: Matthew Johnson <mattjj@google.com>

==

jax/lax/lax_parallel.py
==================
28d82e24;Roy Frostig;2019-07-08 16:41:19 -0700;implement `PapplyTrace.process_call`
Co-authored-by: Matthew Johnson <mattjj@google.com>

==

jax/interpreters/parallel.py
tests/parallel_test.py
==================
29039bf1;Roy Frostig;2019-07-08 13:46:14 -0700;Merge pull request #998 from adarob/patch-1
Add `block_until_ready` to quickstart colab for accurate timing.
==
==================
852d7725;Adam Roberts;2019-07-08 12:52:46 -0700;Add `block_until_ready` to quickstart colab for accurate timing.
Also changes name of vmap argument to reduce confusion.
Other formatting changes made by Colab. I can revert them by hand if needed.
==

notebooks/quickstart.ipynb
==================
6edb5251;Roy Frostig;2019-07-08 12:35:15 -0700;Merge branch 'master' into parallelize

==
==================
586385bc;Peter Hawkins;2019-07-08 13:37:32 -0400;Add cov, percentile, and quantile to the jax.numpy docs.

==

docs/jax.numpy.rst
==================
9a9b1d0d;Peter Hawkins;2019-07-08 13:36:19 -0400;Merge pull request #997 from hawkinsp/master
Implement np.quantile and np.percentile.
==
==================
d92823ec;Peter Hawkins;2019-07-08 13:35:57 -0400;Make type check for quantile stricter to match what is actually tested.

==

jax/numpy/lax_numpy.py
==================
dc16cb95;Peter Hawkins;2019-07-08 12:13:18 -0400;Improve error messages.

==

jax/numpy/lax_numpy.py
==================
97e7455a;Peter Hawkins;2019-07-08 12:08:22 -0400;Implement np.quantile and np.percentile.
Only implements interpolation='linear' at the moment.

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
c9eea53f;Peter Hawkins;2019-07-08 10:15:44 -0400;Merge pull request #992 from hawkinsp/master
Add regression tests for fast math issues.
==
==================
37efbfc1;Peter Hawkins;2019-07-08 09:29:53 -0400;Add regression tests for fast math issues.

==

tests/lax_numpy_test.py
tests/lax_scipy_test.py
tests/scipy_stats_test.py
==================
e9bf2444;Peter Hawkins;2019-07-08 08:56:08 -0400;Merge pull request #991 from hawkinsp/master
Update XLA.
==
==================
e11c36b1;Peter Hawkins;2019-07-08 08:50:48 -0400;Update XLA.
Incorporates https://github.com/tensorflow/tensorflow/commit/9ea27d7aa0564ce7b21755268b640663b772e0e7
which fixes several fast-math problems.

==

WORKSPACE
==================
248ce6e3;Sergei Lebedev;2019-07-08 11:51:49 +0100;Added support for creating arrays via the buffer interface
This allows to call `jax.numpy.array` on objects which do not expose
the `__array__` attribute, but can be viewed as an array through
`memoryview`.

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
6df09e75;Matthew Johnson;2019-07-06 21:49:26 -0700;Merge pull request #987 from majnemer/cauchy
Avoid generating non-finite values from cauchy
==
==================
5607e469;David Majnemer;2019-07-06 21:11:02 -0700;Avoid generating non-finite values from cauchy
If uniform generates 0, -pi/2 will be sent to tan resulting in a
non-finite result. Instead, generate values on (0,1).

==

jax/random.py
==================
a46108c4;Matthew Johnson;2019-07-06 19:20:23 -0700;Merge pull request #983 from google/numpy-funs
add jax.numpy.cov and tests (cf. #70)
==
==================
cdb988d2;Matthew Johnson;2019-07-06 12:50:24 -0700;Merge pull request #870 from google/comprehensive-vmap-testing
add a lot of systematic vmap tests
==
==================
968ad9b5;Matthew Johnson;2019-07-06 12:17:00 -0700;disable failing reduce-min int64 extreme value tests

==

tests/lax_test.py
==================
79668ae4;Matthew Johnson;2019-07-06 11:58:33 -0700;fix reduce_window batching rule

==

jax/lax/lax.py
tests/lax_test.py
==================
ddf7f69c;Matthew Johnson;2019-07-06 11:52:24 -0700;fix seleect broadcasting rule

==

jax/lax/lax.py
tests/lax_test.py
==================
febad2d8;Matthew Johnson;2019-07-06 11:47:50 -0700;fix broadcast_in_dim batching rule

==

jax/lax/lax.py
tests/lax_test.py
==================
ccb1760f;Matthew Johnson;2019-06-17 20:44:33 -0700;add a lot of systematic vmap tests

==

jax/lax/lax.py
tests/lax_test.py
==================
e1ff5b2a;Matthew Johnson;2019-07-06 11:24:49 -0700;Merge pull request #982 from google/soft-pmap-reshapes
enable soft_pmap device persistence
==
==================
ce283336;Matthew Johnson;2019-07-06 11:16:32 -0700;add jax.numpy.cov and tests (cf. #70)
also add jax.numpy.array(..., ndmin=n)

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
a5e86ae1;Matthew Johnson;2019-07-06 10:00:08 -0700;enable soft_pmap device persistence
Previously soft_pmap didn't allow for sharded device persistence because
it performs reshapes on the input and output of the underlying pmap
computation corrseponding to splitting out and merging together the
hardware-mapped and software-mapped axes, resepectively. These reshapes
forced the ShardedDeviceArray produced by the pmap computation to be
collected into a (single-device-backed) DeviceArray.

The approach in this commit is to make reshape smarter about
ShardedDeviceArrays so that axis-merging logical reshapes don't force
collection (i.e. don't force re-layout). Instead they now produce a new
ShardedDeviceArray subclass called a ChunkedDeviceArray, which
represents the same logical reshape result but without data movement.

One way to think about the key difference between ShardedDeviceArray and
ChunkedDeviceArray is that when forced the former collects its shards
together using onp.stack while the latter collects its shards with
onp.concatenate. The leading letter of each name is meant to remind us
of that difference (s for stack, c for concatenate).

ChunkedDeviceArrays can be turned back into ShardedDeviceArrays under
particular reshapes, namely reshapes that split the hardware-mapped axis
back out into the leading dimension. This way a sequence of soft_pmapped
computations can maintain device persistence (i.e. not force collection).
Every other operation forces collcetion, just like it does for
ShardedDeviceArrays.

==

jax/interpreters/pxla.py
jax/interpreters/xla.py
jax/lax/lax.py
jax/numpy/lax_numpy.py
tests/pmap_test.py
==================
7eb16892;Matthew Johnson;2019-07-05 17:15:01 -0700;fix typo

==

jax/api.py
==================
0f1d913d;Matthew Johnson;2019-07-05 16:55:11 -0700;add xla_computation to jax rst docs

==

docs/jax.rst
==================
07354d60;Matthew Johnson;2019-07-05 16:45:40 -0700;Merge pull request #977 from google/merge-jit-pmap
enable jit+pmap by merging pxla.py and xla.py
==
==================
705d49f5;Matthew Johnson;2019-07-02 13:17:31 -0700;enable jit+pmap by merging pxla.py and xla.py
This change is essentially de-duplicating the XLA lowering logic between
xla.py and pxla.py. Only the latter was capable of handling collectives
(aka pmap primitives), which meant that these didn't work:

1. some compositions of jit and pmap, like jit-of-pmap
2. collectives inside initial-style control flow like scan
3. jax.xla_computation on a function involving collectives

By merging the logic into xla.py, now all the lowering machinery works
with everything. Woo!

The pxla.py file still exists and contains mostly dynamic/runtime
components for pmap and functions used only by pmap and collectives
translations. In particular, pxla.py has

* the pmap impl, particularly the dispatching logic for top-level pmaps,
  including argument sharding and lazy sharded result persistence
* the ShardedDeviceArray / ShardedDeviceTuple classes
* the dynamic (trace-time) axis environment data structures and logic
  and the special axis_index primitive
* the split-axis transformation for soft_pmap
* the PmapPrimitive (just a tagged version of Primitive)
* the static sharding/unsharding logic for pmap-inside-jit/pmap

These things moved over to xla.py

* the logic for lowering pmap primitives, especially the static axis
  environment used during xla lowering

This change refactors the translation rule tables a bit. Instead of just
having one table, there are now four, and they contain rules with
slightly different type signatures:
* the `translations` table has rules with the same signatures as always,
  i.e. `CompBuilder -> [XlaOperands] -> ParamsDict -> XlaOperandOut`
* the `backend_specific_translations` table is keyed by platform name
  strings and has dict values that each have the same type as `translations`
* the `parallel_translations` table is used for primitives modeling
  parallel collectives, and so it has rules with signature
  `CompBuilder -> [XlaOperands] -> ReplicaGroups -> ParamsDict -> XlaOpOut`
* the `initial_style_translations` table is for the initial-style
  control flow primitives (like `scan`), for which the translation rules
  themselves lower jaxprs to XLA computations and thus require the static axis
  env to be passed in; the rules there have signature
  `CompBuilder -> AxisEnv -> [XlaOperands] -> ParamsDict -> XlaOpOut`
* the `call_translations` table is sued for `xla_call` and `xla_pmap`,
  i.e. the primitives underlying `jit` and `pmap` respectively, and has
  rules with signature
  `CompBuilder -> Jaxpr -> AxisEnv -> [XlaOp] -> [XlaOp] -> ParamsDict -> XlaOp`

Having these as separate tables is an uninteresting implementation
detail. The lowering function `_jaxpr_computation` just does a case analysis
on whether the primitive being translated has an entry in any table
(where the `backend_specific_translations` table must be checked before
the `translations` table, since some primitives may be entered in both).

This change fixes #804 also addresses #852, in that the lax control flow
impls for those primitives are now based on Python-level jaxpr
interpreters rather than XLA compilation, but we should probably wait to
close the latter issue until we benchmark and improve things more. This
change at least seems not to be a performance regression: on my machine
the lax control flow tests go from running in ~20s to running in ~14s.

This change also adds a docstring for `jax.xla_computation` and some
basic tests.

==

jax/api.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
jax/lax/lax_control_flow.py
jax/lax/lax_parallel.py
tests/api_test.py
tests/lax_control_flow_test.py
tests/pmap_test.py
==================
d2763072;Matthew Johnson;2019-07-05 14:59:56 -0700;Merge pull request #981 from google/issue979
fix lax.imag jvp and enable test
==
==================
6e9669b3;Matthew Johnson;2019-07-05 14:54:00 -0700;Merge pull request #978 from majnemer/patch-1
Avoid generating non-finite values from gumbel and laplace
==
==================
db52d425;Matthew Johnson;2019-07-05 14:39:32 -0700;also fix lax.complex jvp, enable test

==

jax/lax/lax.py
tests/lax_test.py
==================
93841df8;Matthew Johnson;2019-07-05 14:32:04 -0700;fix lax.imag jvp and enable test, fixes #979

==

jax/lax/lax.py
tests/lax_test.py
==================
52fa63af;David Majnemer;2019-07-04 19:44:01 -0700;Avoid generating non-finite values from gumbel and laplace
In the case of gumbel, we take the log(-log(x)), as such we would not want to let x be 0 or 1 as we would get a non-finite number.

In the case of laplace, we take the log1p(-abs(x)), as such we would not want to let x be -1 or 1 as we would get a non-finite number.

This was found by inspection, I have no evidence that this happens in practice.

==

jax/random.py
==================
527fe148;Matthew Johnson;2019-07-05 07:47:38 -0700;fix simple static_argnums bug

==

jax/api.py
==================
c13e816f;Matthew Johnson;2019-07-04 10:57:58 -0700;Merge pull request #976 from zhongwen/master
Convert int input to static_argnums to a tuple
==
==================
f3a741ef;Zhongwen Xu;2019-07-04 18:43:19 +0100;Update api.py

==

jax/api.py
==================
d04954d3;Zhongwen Xu;2019-07-04 18:29:35 +0100;Convert int input to static_argnums to a tuple
User could make mistake of passing an int to static_argnums, this helps to avoid unnecessary error.
==

jax/api.py
==================
b9b49a3b;Matthew Johnson;2019-07-04 08:00:09 -0700;Merge pull request #937 from j-towns/custom-transforms
Handle closure variables consistently in custom_transforms
==
==================
bb29db90;Matthew Johnson;2019-07-04 07:59:43 -0700;Merge pull request #970 from JuliusKunze/normppf
Support scipy.stats.norm.ppf
==
==================
a34f30c3;Matthew Johnson;2019-07-04 07:59:06 -0700;Merge pull request #975 from zhongwen/master
Use zeros as initialization for avg_sq_grad in rmsprop
==
==================
83fea856;Zhongwen Xu;2019-07-04 11:25:56 +0100;Use zeros as initialization for avg_sq_grad in rmsprop
This seems more sensitive thing to do than ones. It is also consistent with Keras, PyTorch and Sonnet 2's implementation.
==

jax/experimental/optimizers.py
==================
95e34454;Julius Kunze;2019-07-04 09:31:46 +0100;Fix float64

==

jax/scipy/stats/norm.py
==================
aa56b726;Matthew Johnson;2019-07-03 22:16:16 -0700;Merge pull request #974 from google/issue973
fix ShardedDeviceValue.block_until_ready()
==
==================
c2e7336b;Matthew Johnson;2019-07-03 21:15:52 -0700;fix ShardedDeviceValue.block_until_ready()
cf. #973

==

jax/interpreters/pxla.py
tests/pmap_test.py
==================
a4083a30;Matthew Johnson;2019-07-03 16:46:27 -0700;Merge pull request #894 from fehiepsi/gamma
Implement pathwise grad for gamma sampler
==
==================
94889ae1;Julius Kunze;2019-07-03 17:33:10 +0100;Support scipy.stats.norm.ppf

==

jax/scipy/stats/norm.py
tests/scipy_stats_test.py
==================
08ffe4f3;Peter Hawkins;2019-07-03 12:05:07 -0400;Remove stale comment.

==

jax/test_util.py
==================
bf367d3a;Jamie Townsend;2019-07-03 08:13:34 +0100;Set instantiate=True in custom_transforms translation rule

==

jax/api.py
==================
ffa43b89;Jamie Townsend;2019-07-03 08:00:00 +0100;Update signature fo lower_fun

==

jax/api.py
==================
f320e23b;Jamie Townsend;2019-07-03 07:51:05 +0100;Merge branch 'master' into custom-transforms

==
==================
c519d561;Peter Hawkins;2019-07-02 20:55:05 -0400;Merge pull request #966 from hawkinsp/master
Disable LU decomposition test for singular matrices.
==
==================
641f0871;Peter Hawkins;2019-07-02 20:06:29 -0400;Disable LU decomposition test for singular matrices.
Import unittest rather than just unittest.SkipTest.

==

tests/linalg_test.py
==================
28dfe983;Peter Hawkins;2019-07-02 16:54:18 -0400;Merge pull request #965 from hawkinsp/master
Make DeviceArray.__iter__ and __reversed__ forward to _value.
==
==================
390471ef;Matthew Johnson;2019-07-02 13:53:32 -0700;Merge pull request #887 from Pronto-ai/master
Add link to XLA header in jax_to_hlo
==
==================
17f1ed48;Matthew Johnson;2019-07-02 13:50:50 -0700;Merge branch 'master' into master

==
==================
9790890b;Matthew Johnson;2019-07-02 12:38:16 -0700;reduce travis sampled test cases from 100 to 25
This change is just to speed up travis, which has ballooned from ~10
minutes to ~40 minutes.

==

.travis.yml
==================
71605f4b;Peter Hawkins;2019-07-02 15:16:01 -0400;Change DeviceArray.__iter__ and DeviceArray.__reversed__ to forward to the _value.
This has the effect of transferring the entire array to the host and iterating over it in host memory, rather than slicing out individual elements in device memory one by one.

This is much faster for examples like `list(np.arange(10000))`; previously this took several seconds the first time due to compilation and 100ms+ subsequent times. With this change it takes < 1ms.

==

jax/interpreters/xla.py
==================
59be9b7a;Peter Hawkins;2019-07-02 15:00:47 -0400;Minor doc fixes.

==

docs/jax.scipy.rst
jax/numpy/lax_numpy.py
==================
231a0526;Peter Hawkins;2019-07-02 14:41:48 -0400;Merge pull request #962 from hawkinsp/cumsum
Wrap np.cumsum/cumprod in a jit to avoid materializing padded output.
==
==================
c8266cdb;Peter Hawkins;2019-07-02 14:40:59 -0400;Merge pull request #963 from hawkinsp/deviceput
Implement device_put as a primitive.
==
==================
0b3667fd;Peter Hawkins;2019-07-02 13:23:28 -0400;Merge pull request #951 from hawkinsp/master
Support all types for higher derivatives of reduce-window-min/max.
==
==================
a06ba06f;Peter Hawkins;2019-07-02 13:23:05 -0400;Update comments.

==

jax/lax/lax.py
==================
380d2e75;Peter Hawkins;2019-07-02 12:41:45 -0400;Merge pull request #954 from tonyduan/laplace-cdf
Add CDF for Laplace distribution
==
==================
8432bff3;Peter Hawkins;2019-07-02 12:18:47 -0400;Implement device_put as a primitive.
Uses the common dispatch logic rather than an explicit isinstance(..., Tracer) test.

==

jax/api.py
jax/interpreters/batching.py
jax/interpreters/xla.py
==================
81322caf;Peter Hawkins;2019-07-02 11:48:43 -0400;Wrap np.cumsum/cumprod in a jit to avoid materializing padded output.

==

jax/numpy/lax_numpy.py
==================
165df620;Peter Hawkins;2019-07-02 11:34:49 -0400;Simplify reduce-precision logic.
Enable TPU gradient tests only up to order 1. The first-order JVP of reduce-window tests select_and_scatter_add, which is the part changed by this PR.

==

jax/lax/lax.py
tests/lax_test.py
==================
03d6d0a5;Jamie Townsend;2019-07-02 13:47:59 +0100;Add note to custom_transorms docstring

==

jax/api.py
==================
40560d2c;Peter Hawkins;2019-07-01 22:26:36 -0400;Refactor select_and_gather_add implementation to improve readability. Change implementation to use ReducePrecision to perform half-word reductions.

==

jax/lax/lax.py
tests/lax_test.py
==================
6dbd0abf;Tony Duan;2019-07-02 10:10:27 +0900;Add tests for Laplace CDF.

==

jax/scipy/stats/laplace.py
tests/scipy_stats_test.py
==================
b95b06aa;Roy Frostig;2019-07-01 16:25:30 -0700;remove unused/unimplemented primitive (lax_parallel.pcollect)

==

jax/lax/lax_parallel.py
==================
cc3f29b8;Peter Hawkins;2019-07-01 17:59:30 -0400;Merge pull request #960 from hawkinsp/deviceput
Add a more direct implementation of device_put.
==
==================
105a8565;Peter Hawkins;2019-07-01 17:21:58 -0400;Merge pull request #961 from hawkinsp/xla
Update XLA.
==
==================
b86e9f0a;Peter Hawkins;2019-07-01 17:19:57 -0400;Update XLA.
Includes ReducePrecision operator in XLA bindings.

==

WORKSPACE
==================
6647c505;Peter Hawkins;2019-07-01 16:37:14 -0400;Add a more direct implementation of device_put.
This implementation copies tensors to device without building an XLA computation. XLA compilation may take time superlinear in the number of arguments, but there's no good reason for us to build a computation at all, it was merely a convenient way to implement `device_put` for free. Instead, when the argument to `device_put` isn't a tracer, call `xla.device_put` directly. If it is a tracer, fall back to the old implementation.

Timing for benchmark in #947:
In [4]: %time x = jax.device_put([onp.random.randn(10,5) for _ in range(700)])
CPU times: user 45.3 ms, sys: 3.79 ms, total: 49.1 ms
Wall time: 33.8 ms
where the timing was previously 43.4s.

Fixes #947.

==

jax/api.py
jax/interpreters/xla.py
==================
45b59901;Peter Hawkins;2019-07-01 16:56:56 -0400;Merge pull request #959 from hawkinsp/visibility
Add underscore prefixes to xla.py methods. Add some docstrings.
==
==================
25e983f8;Peter Hawkins;2019-07-01 15:48:36 -0400;Merge pull request #958 from hawkinsp/ndarray
Add a jax.numpy.__init__ method that throws a TypeError if called.
==
==================
c6d898c1;Peter Hawkins;2019-07-01 15:37:33 -0400;Add underscore prefixes to xla.py methods. Add some docstrings.
This PR does not take an opinion about which methods should be public, instead it attempts to codify the world as it is now by adding underscore prefixes to methods that are local to xla.py. It is frequently helpful to me to be able to identify which functions are API entry points and which are not.

==

jax/interpreters/xla.py
==================
c1b429be;Peter Hawkins;2019-07-01 14:55:39 -0400;Add a jax.numpy.__init__ method that throws a TypeError if called.
Improves the error message for #956, where np.ndarray was called explicitly.

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
5109098b;Tony Duan;2019-07-01 12:18:42 +0900;Merge branch 'master' of github.com:google/jax into laplace-cdf

==
==================
b7cca2bb;Tony Duan;2019-07-01 11:02:26 +0900;Add Laplace CDF.

==

jax/scipy/stats/laplace.py
==================
db369091;Peter Hawkins;2019-06-28 20:27:10 -0400;Add support for higher derivatives of reduce-window-min/max at reduced precision. On CPU/GPU this means support for float64 derivatives, and on TPU this means support for float32 derivatives.
Warn if we are forced to be imprecise.

==

jax/lax/lax.py
tests/lax_test.py
==================
acda3f39;Roy Frostig;2019-06-28 13:34:50 -0700;Merge pull request #948 from google/parallelize
parallelization work-in-progress
==
==================
307d780d;Peter Hawkins;2019-06-28 16:30:47 -0400;Merge pull request #950 from hawkinsp/master
Implement np.linalg.inv in terms of np.linalg.solve.
==
==================
9a1dc981;Peter Hawkins;2019-06-28 16:13:46 -0400;Merge pull request #949 from hawkinsp/precision
Detect singular matrices during LU decomposition and return NaNs.
==
==================
12e622bb;Peter Hawkins;2019-06-28 15:49:38 -0400;Implement np.linalg.inv in terms np.linalg.solve.
i.e. use an LU decomposition instead of a QR decomposition, now that an LU decomposition is available on all platforms.

==

jax/numpy/linalg.py
==================
349e8d72;Peter Hawkins;2019-06-28 15:31:06 -0400;Detect singular matrices during LU decomposition and return a matrix of NaNs instead. Use per-backend translation rule registration rather than an explicit if test.

==

jax/lax_linalg.py
tests/linalg_test.py
==================
25b18fd0;Roy Frostig;2019-06-28 11:51:36 -0700;add imports for py3 compatibility, and typical `__future__` imports, in lax_parellel.py

==

jax/lax/lax_parallel.py
==================
1540cdf9;Roy Frostig;2019-06-28 11:14:25 -0700;Merge branch 'master' into parallelize

==
==================
5a38228f;Peter Hawkins;2019-06-28 14:08:30 -0400;Merge pull request #944 from hawkinsp/precision
Add `precision` option to lax dot and conv APIs.
==
==================
3e914e17;Peter Hawkins;2019-06-28 14:06:24 -0400;Improve documentation for `precision`.

==

jax/lax/lax.py
==================
4f9c75b3;Roy Frostig;2019-06-28 10:59:23 -0700;fix list-of-pair transposition in `dot_general` test under py3

==

tests/parallel_test.py
==================
bca27fea;Peter Hawkins;2019-06-28 12:48:44 -0400;Simplify precision specification: only allow a single precision for an entire operator.

==

jax/lax/lax.py
tests/lax_test.py
==================
490ce042;Peter Hawkins;2019-06-28 10:20:56 -0400;Redisable a few TPU tests that still fail.

==

tests/lax_test.py
tests/linalg_test.py
==================
0af9da76;Peter Hawkins;2019-06-28 09:00:32 -0400;Add `precision` option to lax dot and conv APIs.
Set a default precision of "highest" in LU decomposition.
Enable a number of dot and conv tests on TPU under highest precision.
Enable linalg tests that use LU decomposition on TPU.

==

jax/lax/lax.py
jax/lax/lax_parallel.py
jax/lax_linalg.py
tests/lax_test.py
tests/linalg_test.py
==================
03aea7c1;Peter Hawkins;2019-06-27 22:13:04 -0400;Remove old dummy build_jax target.

==

jax/BUILD
==================
78d6b0f7;Peter Hawkins;2019-06-27 22:09:57 -0400;Disable failing test testSoftPmapAllToAll.

==

tests/pmap_test.py
==================
14d5dc63;Peter Hawkins;2019-06-27 18:41:40 -0400;Merge pull request #942 from hawkinsp/master
Enable convolutions for non float32 types.
==
==================
381fba5c;fehiepsi;2019-06-27 17:34:12 -0400;Merge remote-tracking branch 'upstream/master' into gamma

==
==================
07703e15;fehiepsi;2019-06-27 17:33:25 -0400;merge origin version

==
==================
dc91d00a;fehiepsi;2019-06-27 17:28:36 -0400;use split 2 instead of split 1

==

jax/random.py
==================
3b4521b1;Peter Hawkins;2019-06-27 17:17:04 -0400;Enable convolutions for non float32 types.

==

jax/lax/lax.py
tests/lax_test.py
==================
a681c9da;Peter Hawkins;2019-06-27 16:47:26 -0400;Merge pull request #941 from hawkinsp/master
Enable LU decomposition tests on GPU.
==
==================
33b5a492;Peter Hawkins;2019-06-27 16:36:54 -0400;Enable LU decomposition tests on GPU. Disable complex128 tests on GPU. Disable a flaky case of inv on GPU.

==

tests/linalg_test.py
==================
88c32e01;Roy Frostig;2019-06-27 13:18:52 -0700;Merge branch 'master' into parallelize

==
==================
89cabe3f;Roy Frostig;2019-06-27 13:11:20 -0700;Merge branch 'master' into parallelize
Required some post-merge edits to have test passing again, including disabling a few tests.

==
==================
ebebb0ca;Peter Hawkins;2019-06-27 15:58:27 -0400;Merge pull request #938 from hawkinsp/lu
Add a pure Python LU decomposition.
==
==================
498c7057;Peter Hawkins;2019-06-27 15:26:45 -0400;Merge pull request #935 from hawkinsp/master
Add support for non-constant shifts to np.roll.
==
==================
8d307376;Peter Hawkins;2019-06-27 15:21:56 -0400;Fix bug for batched rectangular matrices and add test. Minor cleanups.

==

jax/lax_linalg.py
tests/linalg_test.py
==================
990c2df1;Peter Hawkins;2019-06-25 16:52:28 -0400;Implement a pure Python LU decomposition that can be used on platforms where we do not otherwise have a better implementation.
Restructure xla.lower_fun and trace_unwrapped_to_jaxpr so the instantiate option can be passed to them, separately from any function arguments.

==

jax/interpreters/ad.py
jax/interpreters/partial_eval.py
jax/interpreters/xla.py
jax/lax/lax.py
jax/lax/lax_control_flow.py
jax/lax_linalg.py
==================
29d9400a;Matthew Johnson;2019-06-27 10:08:43 -0700;bump version number for pypi

==

jax/version.py
==================
6030af76;fehiepsi;2019-06-21 12:39:56 -0400;pass x64 test

==

tests/random_test.py
==================
d2843885;fehiepsi;2019-06-21 10:15:25 -0400;pass tests locally

==

jax/random.py
tests/random_test.py
==================
6ef55343;fehiepsi;2019-06-21 00:06:29 -0400;fix typos at random test

==

tests/random_test.py
==================
6107bee9;fehiepsi;2019-06-20 20:46:56 -0400;add gamma grad test

==

tests/random_test.py
==================
907925fb;fehiepsi;2019-06-20 20:26:38 -0400;improve compling time of gamma

==

jax/random.py
==================
9252d596;fehiepsi;2019-06-20 18:41:52 -0400;implement gamma grad

==

jax/random.py
==================
4e255f83;Roy Frostig;2019-06-27 09:42:32 -0700;extend (and skip) dot parallelization test

==

tests/parallel_test.py
==================
ec3fb89d;Jamie Townsend;2019-06-27 17:39:42 +0100;Test for defvjp closure error

==

tests/api_test.py
==================
f76a1c96;Jamie Townsend;2019-06-27 17:35:34 +0100;Add out of scope error to defvjp

==

jax/api.py
jax/interpreters/ad.py
==================
f4ec87de;Peter Hawkins;2019-06-27 11:23:48 -0400;Add support for non-constant shifts to np.roll.

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
323d9f51;Jamie Townsend;2019-06-27 15:35:12 +0100;Raise error when differentiating w.r.t. outer variable with defjvp_all

==

jax/api.py
tests/api_test.py
==================
bcefb371;Peter Hawkins;2019-06-27 10:24:36 -0400;Merge pull request #922 from hawkinsp/ndtr
Add a custom JVP for log_ndtr.
==
==================
98660966;Peter Hawkins;2019-06-27 09:45:43 -0400;Increase testcase eps. Refactor _norm_logpdf implementation to hoist constants. Reduce domain of ndtri gradient test to avoid regions of large gradient near 0 and 1..

==

jax/scipy/special.py
tests/lax_scipy_test.py
==================
31fa0412;Jamie Townsend;2019-06-27 14:13:20 +0100;Used shaped aval for custom_transforms jaxpr

==

jax/api.py
==================
3d5d938d;Peter Hawkins;2019-06-27 08:26:57 -0400;Merge pull request #933 from hawkinsp/master
Update XLA.
==
==================
609126fd;Peter Hawkins;2019-06-27 08:24:31 -0400;Update XLA.

==

WORKSPACE
==================
0a29295f;Roy Frostig;2019-06-26 16:14:02 -0700;fix comment

==

tests/parallel_test.py
==================
27fa4c97;Roy Frostig;2019-06-26 16:08:43 -0700;minor tidy of dot_general parallelization unit tests

==

tests/parallel_test.py
==================
7e162b8d;Roy Frostig;2019-06-26 16:05:48 -0700;fix some cases in dot_general parallelization rule, mark all others as unhandled

==

jax/lax/lax_parallel.py
==================
507e4bff;Roy Frostig;2019-06-26 16:04:07 -0700;add `dot_general` parallelization tests and tidy up `dot` parallelization tests

==

tests/parallel_test.py
==================
13a85706;Roy Frostig;2019-06-26 16:01:56 -0700;remove unreachable code in `dot` parallelization rule

==

jax/lax/lax_parallel.py
==================
1508405c;Peter Hawkins;2019-06-26 17:15:33 -0400;Merge pull request #932 from hawkinsp/master
Use constant-time algorithm for static slice index calculation.
==
==================
014d235e;Peter Hawkins;2019-06-26 16:30:18 -0400;Don't explicitly compute the length; we only need to know if the interval is empty.

==

jax/numpy/lax_numpy.py
==================
07723c43;Peter Hawkins;2019-06-26 16:08:48 -0400;Use constant-time algorithm for static slice index calculation.
The current code was linear time in the time of the input array in some cases.

For the benchmark in https://github.com/google/jax/issues/927, compilation time improves from 18s to 0.2s on Mac. Interestingly the performance before this fix seems very different across platforms.

==

jax/numpy/lax_numpy.py
==================
c7afa1eb;Peter Hawkins;2019-06-26 13:40:12 -0400;Merge pull request #930 from hawkinsp/master
Merge reduce-window batching rules. Add rule for reduce_window_min.
==
==================
fc367b10;Matthew Johnson;2019-06-26 10:21:57 -0700;Merge pull request #917 from google/soft-pmap
add soft_pmap, plus very rough draft of parallelize
==
==================
3d1ba30f;Jamie Townsend;2019-06-26 16:49:04 +0100;A few custom_transforms fix-ups

==

jax/api.py
==================
3cdcd9ce;Jamie Townsend;2019-06-26 16:22:21 +0100;Draft fix for custom_transform of closure

==

jax/api.py
==================
755d2818;Peter Hawkins;2019-06-26 10:19:42 -0400;Merge reduce-window batching rules. Add batching rule for reduce_window_min.

==

jax/lax/lax.py
tests/batching_test.py
==================
9ad18a8a;Jamie Townsend;2019-06-26 14:21:03 +0100;Add failing custom_transforms closure test

==

tests/api_test.py
==================
b8bac19b;Peter Hawkins;2019-06-26 09:10:48 -0400;Disable sinh test for nan inputs.
sinh apparently suffers from the same problem as cosh/exp, depending on the whims of the compiler.

==

tests/lax_numpy_test.py
==================
17f7298e;Peter Hawkins;2019-06-25 21:35:44 -0400;Merge pull request #925 from hawkinsp/linalg
Add unit_diagonal option to lax_linalg.solve_triangular.
==
==================
038110a2;Roy Frostig;2019-06-25 14:26:52 -0700;fix `dot_general` parallelization rule dimension adjustment

==

jax/lax/lax_parallel.py
==================
08aaf481;Roy Frostig;2019-06-25 13:46:43 -0700;Merge branch 'master' into parallelize

==
==================
9addfa07;Roy Frostig;2019-06-25 13:42:23 -0700;exhaust cases handled by the `dot_general` parallelization rule

==

jax/lax/lax_parallel.py
==================
a396276e;Peter Hawkins;2019-06-25 15:24:22 -0400;Add unit_diagonal option to lax_linalg.solve_triangular.
LAPACK and cuBLAS both support treating the diagonal of a triangular matrix as 1 and ignoring the actual matrix contents. Plumb this ability through to lax.

==

jax/lax_linalg.py
jax/numpy/linalg.py
jax/scipy/linalg.py
tests/linalg_test.py
==================
87e0a04f;Peter Hawkins;2019-06-25 15:22:10 -0400;Merge pull request #923 from hawkinsp/arange
Improve jax.numpy.arange to return a lazy iota even if an explicit dt…
==
==================
f54c9f41;Peter Hawkins;2019-06-25 13:12:58 -0400;Fix incorrect float64 type promotion in `_ndtr`.

==

jax/scipy/special.py
==================
84fc8698;Peter Hawkins;2019-06-25 13:02:09 -0400;Improve jax.numpy.arange to return a lazy iota even if an explicit dtype is provided.

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
dd76d750;Peter Hawkins;2019-06-25 10:44:15 -0400;Merge pull request #920 from hawkinsp/master
Form a tree of concatenations in jax.numpy.concatenate.
==
==================
f71cf5ff;Peter Hawkins;2019-06-25 10:38:10 -0400;Add a custom JVP for log_ndtr.

==

jax/scipy/special.py
tests/lax_scipy_test.py
==================
4abd1dba;Peter Hawkins;2019-06-25 09:56:22 -0400;Form a tree of concatenations in jax.numpy.concatenate instead of a single wide concatenation.
Wide concatenations can be slow to compile, particularly on the CPU backend.

Benchmark:
%time np.array(list(range(10000)))
Wall time before: 24.6s
Wall time after: 0.86s.

(This still isn't great, but it's much better!)

==

jax/numpy/lax_numpy.py
==================
ae550c10;Matthew Johnson;2019-06-25 06:37:40 -0700;roll back soft_pmap device persistence (bc broken)

==

jax/interpreters/pxla.py
==================
a02f86c1;Roy Frostig;2019-06-24 22:35:35 -0700;wip dot general overhaul

==

jax/lax/lax_parallel.py
==================
a6634861;Matthew Johnson;2019-06-24 19:45:18 -0700;fixes from rebase onto master

==

jax/interpreters/parallel.py
jax/lax/lax.py
jax/lax/lax_parallel.py
==================
73c0458d;Matthew Johnson;2019-06-24 17:24:09 -0700;remove unneeded code, fix bug

==

jax/interpreters/ad.py
jax/interpreters/pxla.py
==================
cf294923;Matthew Johnson;2019-06-24 14:53:24 -0700;soft_pmap device persistence via lazy reshape

==

jax/interpreters/pxla.py
jax/interpreters/xla.py
==================
9783fad6;Matthew Johnson;2019-06-24 11:48:33 -0700;more fixes to broadcasting papply rule, tests

==

jax/lax/lax_parallel.py
tests/parallel_test.py
==================
c118b5cf;Matthew Johnson;2019-06-24 11:18:56 -0700;associate papply rules with more primitives

==

jax/lax/lax_parallel.py
==================
40bbf068;Matthew Johnson;2019-06-24 11:10:45 -0700;fix broadcasting papply rule, move to lax_parallel

==

jax/interpreters/parallel.py
jax/lax/lax.py
jax/lax/lax_parallel.py
==================
80f6eee8;Matthew Johnson;2019-06-24 08:17:15 -0700;added broken test for broadcasting papply

==

jax/interpreters/parallel.py
tests/parallel_test.py
==================
d64188bc;Matthew Johnson;2019-06-23 20:01:53 -0700;del serial_pmap, simpler papply, add parallelize
The serial_pmap transformation was a placeholder and is now replaced by
soft_pmap. The papply tests that used serial_pmap now use soft_pmap,
which means they can run on parallel hardware when available.

The papply transform had some unused features (e.g. in_axes, out_axes)
that won't be needed by parallelize, so those are removed. It is also
now only needed for testing now, since parallelize (which essentially
composes a soft_pmap with a papply) is likely to be the primary
user-facing API.

This commit adds the parallelize transformation and some tests for it,
including exhaustive transpose tests.

Misc changes:
* simplified the transpose papply rule and made it lazy (so that it
  doesn't need to perform communication)
* misc bugs encountered
* a few lines cherry-picked from frostig@ branch, namely the fixed
  broadcasting_papply rule and plumbing the `size` argument to papply
  rules
* remove psplit primitive and psplit_like primitives and replace it with
  calls to all_to_all where needed

==

jax/api.py
jax/interpreters/batching.py
jax/interpreters/parallel.py
jax/lax/lax.py
jax/lax/lax_parallel.py
tests/parallel_test.py
==================
e36613da;Matthew Johnson;2019-06-23 16:41:59 -0700;add basic soft_pmap tests

==

tests/pmap_test.py
==================
fe7329e8;Matthew Johnson;2019-06-23 15:31:13 -0700;iniital soft_pmap implementation

==

jax/api.py
jax/interpreters/batching.py
jax/interpreters/parallel.py
jax/interpreters/partial_eval.py
jax/interpreters/pxla.py
jax/lax/lax_parallel.py
jax/lib/xla_bridge.py
jax/numpy/lax_numpy.py
==================
6c3cf13f;Peter Hawkins;2019-06-24 21:17:32 -0400;Remove outdated reference to incorrect NaN semantics.

==

README.md
==================
c96d9432;Peter Hawkins;2019-06-24 21:16:04 -0400;Add references to `jax.ops` to README.md.

==

README.md
==================
33b01733;Roy Frostig;2019-06-24 16:08:14 -0700;Merge pull request #916 from google/parallelize
parallelization work-in-progress
==
==================
15bc9665;Roy Frostig;2019-06-24 11:32:59 -0700;Merge branch 'master' into parallelize

==
==================
59291491;Peter Hawkins;2019-06-24 14:23:47 -0400;Merge pull request #914 from hawkinsp/master
Avoid instantiating zeros in dynamic_slice/gather transpose rules.
==
==================
c1bec691;Peter Hawkins;2019-06-24 13:44:49 -0400;Avoid instantiating zeros in dynamic_slice/gather transpose rules.

==

jax/lax/lax.py
==================
a8cf0cd3;Peter Hawkins;2019-06-24 13:18:27 -0400;Merge pull request #897 from hawkinsp/master
Verify that the inputs to reverse-mode automatic differentiation are …
==
==================
f193bc7d;Peter Hawkins;2019-06-24 11:29:06 -0400;Make error message test more permissive.

==

tests/api_test.py
==================
8cab26f8;Peter Hawkins;2019-06-24 11:27:26 -0400;Merge pull request #911 from hawkinsp/takealongaxis
Fix handling of broadcasting in jax.numpy.take_along_axis.
==
==================
98465a4b;Peter Hawkins;2019-06-24 10:51:47 -0400;Merge pull request #910 from hawkinsp/select
Implement jax.numpy.select.
==
==================
2ef945db;Peter Hawkins;2019-06-24 10:51:21 -0400;Add `numpy.select` to the documentation.

==

docs/jax.numpy.rst
==================
5bdbcc42;Peter Hawkins;2019-06-24 10:45:42 -0400;Address review comments, add a test.

==

jax/api.py
tests/api_test.py
==================
8fc4ce2b;Peter Hawkins;2019-06-24 10:34:48 -0400;Fix handling of broadcasting in jax.numpy.take_along_axis.

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
2332b2ee;Peter Hawkins;2019-06-24 09:27:01 -0400;Implement jax.numpy.select.

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
96857771;Matthew Johnson;2019-06-23 16:10:48 -0700;Merge pull request #909 from jlebar/docs-indexed-add-update
Update docs to include index_{min,max}.
==
==================
3da99380;Justin Lebar;2019-06-23 15:32:43 -0700;Update docs to include index_{min,max}.

==

docs/jax.ops.rst
==================
acbcf3f4;Matthew Johnson;2019-06-23 09:15:52 -0700;Merge pull request #908 from zhongwen/master
Add sigmoid into stax
==
==================
eea649cb;Matthew Johnson;2019-06-23 09:15:24 -0700;Merge pull request #907 from aslanides/master
Stax: Make elemwise a public function.
==
==================
2bde78a8;Zhongwen Xu;2019-06-23 16:26:51 +0100;Add sigmoid into stax

==

jax/experimental/stax.py
==================
31206807;John Aslanides;2019-06-22 09:47:24 +0100;Stax: Make elementwise a public function.

==

jax/experimental/stax.py
==================
a265a65f;Matthew Johnson;2019-06-22 08:17:37 -0700;Merge pull request #906 from jlebar/jaxlib-version
Revert change to jaxlib version in XLA_in_Python.ipynb.
==
==================
aecbe8fc;Justin Lebar;2019-06-21 21:37:26 -0700;Revert change to jaxlib version in XLA_in_Python.ipynb.
I accidentally made this change in https://github.com/google/jax/pull/904/commits/d5ba04b79e37c6f5dbb9df58d701b19b9523770a#diff-e512abedc01637b70a5b9f6781cc964e.

Also update the jaxlib version in 'vmapped log-probs.ipynb', which is
quite old.

==

notebooks/XLA_in_Python.ipynb
notebooks/vmapped log-probs.ipynb
==================
11320c7e;Matthew Johnson;2019-06-21 20:54:16 -0700;Merge pull request #904 from jlebar/index_min
Add jax.ops.index_min/max.
==
==================
4e428667;Matthew Johnson;2019-06-21 19:39:54 -0700;Merge pull request #903 from jlebar/genrule-order
Allow passing constants to jax_to_hlo genrule, and fix parameter ordering.
==
==================
d5ba04b7;Justin Lebar;2019-06-21 19:31:41 -0700;Add jax.ops.index_min/max.
These are analogous to index_add.

==

jax/lax/lax.py
jax/ops/__init__.py
jax/ops/scatter.py
notebooks/Common_Gotchas_in_JAX.ipynb
notebooks/XLA_in_Python.ipynb
tests/lax_numpy_indexing_test.py
tests/lax_test.py
==================
5316b58d;Justin Lebar;2019-06-21 19:16:11 -0700;Allow passing constants to jax_to_hlo genrule, and fix parameter ordering.
- Add new arguments `constants` and `evaled_constants` to jax_to_hlo
  genrule.  These let you curry constants into your jax function.  See
  docstrings.

- Fix ordering of HLO parameters.  JAX's "calling convention" into HLO
  for kwargs is to pass a tuple of the args sorted by their names.
  That's surprising behavior.  Instead, we now allow the user to specify
  the order of HLO parameters in the jax_to_hlo genrule.

==

jax/tools/build_defs.bzl
jax/tools/jax_to_hlo.py
tests/jax_to_hlo_test.py
==================
6b2968ab;Roy Frostig;2019-06-21 14:58:31 -0700;simplify and extend cases handled by the `dot_general` parallelization rule

==

jax/lax/lax_parallel.py
==================
c4cae0cb;Skye Wanderman-Milne;2019-06-21 14:52:05 -0700;Update references to jaxlib 0.1.21

==

README.md
notebooks/XLA_in_Python.ipynb
notebooks/gufuncs.ipynb
notebooks/maml.ipynb
notebooks/neural_network_and_data_loading.ipynb
notebooks/neural_network_with_tfds_data.ipynb
notebooks/quickstart.ipynb
==================
cd8cda09;Peter Hawkins;2019-06-21 15:27:23 -0400;Merge pull request #899 from hawkinsp/arrays
Force a copy to device in jax.numpy.array() if copy=True.
==
==================
3615635d;Peter Hawkins;2019-06-21 14:02:11 -0400;Set `copy=False` in `asarray`.

==

jax/numpy/lax_numpy.py
==================
deccb6eb;fehiepsi;2019-06-21 12:39:56 -0400;pass x64 test

==

tests/random_test.py
==================
cc0cdc30;Peter Hawkins;2019-06-21 12:12:22 -0400;Force a copy to device in jax.numpy.array() if copy=True.
The motivation is the following example where the array is mutated after being passed to jax.numpy.array:
```
>>> a = np.array([42])
>>> b = jnp.array(a)
>>> a[0] = 24
>>> b
array([24])
```

Also fix up asarray() to have the precise signature of onp.asarray.

==

jax/numpy/lax_numpy.py
==================
ebd2fd29;Peter Hawkins;2019-06-21 11:55:09 -0400;Return correct type from device_put.

==

jax/interpreters/xla.py
==================
f2bc2878;Peter Hawkins;2019-06-21 11:04:52 -0400;Verify that the inputs to reverse-mode automatic differentiation are of an inexact type.

==

jax/api.py
tests/batching_test.py
==================
d93e05ca;Peter Hawkins;2019-06-21 11:05:27 -0400;Merge pull request #896 from hawkinsp/master
Enable direct device-to-device copies on GPU and TPU.
==
==================
293b9839;Peter Hawkins;2019-06-21 10:25:09 -0400;Enable direct device-to-device copies on GPU and TPU. Update XLA to include device-to-device copies.

==

WORKSPACE
jax/interpreters/xla.py
jax/numpy/lax_numpy.py
==================
89cb3661;fehiepsi;2019-06-21 10:15:25 -0400;pass tests locally

==

jax/random.py
tests/random_test.py
==================
81334007;fehiepsi;2019-06-21 00:06:29 -0400;fix typos at random test

==

tests/random_test.py
==================
9808cd58;Peter Hawkins;2019-06-20 20:56:05 -0400;Merge pull request #893 from hawkinsp/master
Add support for reflect, symmetric, and wrap padding modes to np.pad.
==
==================
256b4186;fehiepsi;2019-06-20 20:46:56 -0400;add gamma grad test

==

tests/random_test.py
==================
c22260f3;Matthew Johnson;2019-06-20 17:34:41 -0700;Merge pull request #892 from joschu/master
map stop_gradient over data structure. otherwise it is silently a no-op
==
==================
bb5f07b1;fehiepsi;2019-06-20 20:26:38 -0400;improve compling time of gamma

==

jax/random.py
==================
c2ac84e7;Peter Hawkins;2019-06-20 19:50:12 -0400;Add support for reflect, symmetric, and wrap padding modes to np.pad.

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
8b163628;John Schulman;2019-06-20 16:23:13 -0700;map stop_gradient over data structure. otherwise it is silently a no-op

==

jax/lax/lax.py
tests/lax_test.py
==================
174583e4;fehiepsi;2019-06-20 18:41:52 -0400;implement gamma grad

==

jax/random.py
==================
6cdce1a1;Matthew Johnson;2019-06-20 09:26:30 -0700;Merge pull request #890 from google/scan-instantiate-const-detupling
fix a case of const instantiation for scan
==
==================
37fd8efa;Matthew Johnson;2019-06-20 07:23:14 -0700;fix a case of const instantiation for scan

==

jax/interpreters/partial_eval.py
==================
eb98df3e;Peter Hawkins;2019-06-20 09:27:51 -0400;Merge pull request #889 from hawkinsp/master
Use _canonicalize_axis to catch invalid reduction axes.
==
==================
f9c72eff;Peter Hawkins;2019-06-20 08:40:21 -0400;Use _canonicalize_axis for reduction axis dimensions to catch invalid axes.

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
d420517d;rjeli;2019-06-19 19:20:14 -0700;Add link to XLA header in jax_to_hlo

==

jax/tools/jax_to_hlo.py
==================
6fae4d3c;Peter Hawkins;2019-06-19 21:30:59 -0400;Merge pull request #886 from hawkinsp/master
Remove xla.device_put_many.
==
==================
0ac21950;Peter Hawkins;2019-06-19 20:07:09 -0400;Remove xla.device_put_many.
We never actually hooked it up to the Jaxlib implementation, and since we now have asynchronous transfers, it's not clear we even need to. Remove it until we come up with a use case.

==

jax/interpreters/pxla.py
jax/interpreters/xla.py
jax/lib/xla_bridge.py
==================
d353ff7e;Roy Frostig;2019-06-19 14:21:45 -0700;add a concatenation dimension argument to `psplit`

==

jax/interpreters/parallel.py
jax/lax/lax_parallel.py
tests/parallel_test.py
==================
7c703138;Matthew Johnson;2019-06-19 12:43:35 -0700;skip some conv vmap tests on cpu and tpu

==

tests/lax_test.py
==================
7abe68d2;Peter Hawkins;2019-06-19 15:34:35 -0400;Merge pull request #885 from hawkinsp/xla
Update XLA version.
==
==================
4cc3874a;Peter Hawkins;2019-06-19 15:05:35 -0400;Update XLA version.
Add call to tf_bind() to fix build. I'm not entirely sure why this is needed, but I get lots of build failures without it on Bazel 0.27.0.

==

WORKSPACE
==================
7a9a6a2e;Matthew Johnson;2019-06-19 11:01:19 -0700;Merge pull request #884 from google/issue883
make DeviceArray.__hash__ raise an error
==
==================
2fb5be16;Peter Hawkins;2019-06-19 13:51:57 -0400;Merge pull request #877 from hawkinsp/master
Fix signature of __array__ method.
==
==================
5aef18f8;Matthew Johnson;2019-06-19 10:32:55 -0700;improve literal hashing logic
This fixes a bug where scalar ndarray literals with different dtypes
could hash to the same value. It also makes scalar DeviceArray literals
hashable after #884.

==

jax/abstract_arrays.py
jax/core.py
jax/interpreters/partial_eval.py
jax/interpreters/xla.py
==================
a7c25cf3;Matthew Johnson;2019-06-19 10:21:34 -0700;Merge pull request #880 from google/hashable-ndarray-scalars
make more literals nontrivially hashable
==
==================
8bc4e379;Matthew Johnson;2019-06-19 10:12:13 -0700;make DeviceArray.__hash__ raise an error
Fixes #883 by adjusting the caching logic we use not to rely on
DeviceArray being hashable, also closing a long-standing TODO.

Also fixed a minor bug in lax.py which caused scalar DeviceArrays to
appear in the padding params of some convolutions (from using `max`
instead of `_max` in lax.py).

==

jax/api.py
jax/interpreters/xla.py
jax/lax/lax.py
jax/util.py
tests/lax_numpy_test.py
==================
4e9d7926;Matthew Johnson;2019-06-19 09:45:29 -0700;Merge pull request #879 from google/partial-eval-lower
lower args in JaxprTrace.process_eval
==
==================
7ef0555c;Peter Hawkins;2019-06-19 10:46:38 -0400;Merge pull request #882 from hawkinsp/linalg
Fix complex Cholesky decomposition gradient:
==
==================
0a040fcb;Matthew Johnson;2019-06-19 07:44:46 -0700;fix parallel axis_index w/ custom partial_eval

==

jax/interpreters/pxla.py
==================
3e0240f0;Peter Hawkins;2019-06-19 09:29:33 -0400;Fix complex Cholesky decomposition gradient: * make sure the '1' constant in `phi` has the right type. * conjugate as well as transposing during triangular solve.

==

jax/lax_linalg.py
tests/linalg_test.py
==================
5e7e9a76;Peter Hawkins;2019-06-19 09:26:52 -0400;Merge pull request #878 from hawkinsp/linalg
Fix handling of complex values in triangular solve:
==
==================
311d5e59;Peter Hawkins;2019-06-19 09:10:00 -0400;Skip triangular solve gradient test on TPU.

==

tests/linalg_test.py
==================
b53bccc5;Matthew Johnson;2019-06-18 21:51:51 -0700;make more literals nontrivially hashable

==

jax/core.py
==================
e939e729;Matthew Johnson;2019-06-18 21:23:52 -0700;lower args in JaxprTrace.process_eval

==

jax/interpreters/partial_eval.py
tests/api_test.py
==================
d00351e1;Peter Hawkins;2019-06-18 23:38:03 -0400;Fix handling of complex values in triangular solve: * Don't conjugate real values, since it forces them to be complex. * Conjugate in the JVP rule. * Test complex values in the scipy.solve_triangular test.

==

jax/lax_linalg.py
tests/linalg_test.py
==================
ecc2c599;Peter Hawkins;2019-06-18 23:30:54 -0400;Fix signature of __array__ method.
Without this fix the test suite spews many instances of this message:
numeric.py:538: DeprecationWarning: Non-string object detected for the array ordering. Please pass in 'C', 'F', 'A', or 'K' instead
    return array(a, dtype, copy=False, order=order)

because we are passing a context  object as the order argument to onp.asarray().

==

jax/interpreters/xla.py
==================
623ddc37;Matthew Johnson;2019-06-18 20:17:59 -0700;Merge pull request #874 from google/issue871
improve linearize error message
==
==================
d483062a;Peter Hawkins;2019-06-18 23:16:44 -0400;Merge pull request #875 from hawkinsp/master
Add a `jit` annotation around np.where.
==
==================
8eba0e06;Skye Wanderman-Milne;2019-06-18 17:02:20 -0700;Bump jaxlib version to 0.1.21 and update WORKSPACE

==

WORKSPACE
jaxlib/version.py
==================
24ea3ac3;Peter Hawkins;2019-06-18 19:08:16 -0400;Add a `jit` annotation around np.where.
Avoids materializing broadcast scalars inside where in op-by-op mode.

Since np.tril appears in the linear part of the Cholesky JVP rule, change np.tril/triu to avoid where in favor of calling lax.select() directly. Ban 1D arguments to np.tril/triu, which aren't a documented behavior of the numpy implementation.

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
39bf27c7;Roy Frostig;2019-06-18 15:25:07 -0700;extend `dot_general` parallelization rule to support splits along dimensions specified to the operation as batch

==

jax/lax/lax_parallel.py
==================
0c107279;Roy Frostig;2019-06-18 14:46:55 -0700;simplify permutation adjustment

==

jax/lax/lax_parallel.py
==================
eb01b8bf;Matthew Johnson;2019-06-18 09:18:44 -0700;improve linearize error message
fixes #871

==

jax/api.py
tests/api_test.py
==================
4bd60310;Matthew Johnson;2019-06-18 09:20:48 -0700;bump version number for pypi

==

jax/version.py
==================
ed3f2c80;Matthew Johnson;2019-06-18 09:15:02 -0700;Merge pull request #873 from google/deduplicate-consts
de-duplicate constants staged into jaxprs
==
==================
221426fa;Matthew Johnson;2019-06-18 08:09:37 -0700;de-duplicate constants staged into jaxprs
Co-authored-by: Peter Hawkins <phawkins@google.com>
Co-authored-by: Dougal Maclaurin <dougalm@google.com>

==

jax/core.py
jax/interpreters/partial_eval.py
==================
a46e0136;Peter Hawkins;2019-06-18 09:09:35 -0600;Merge pull request #872 from hawkinsp/master
Use lax.full instead of broadcast in transpose rule for dynamic_slice.
==
==================
04676e4e;Peter Hawkins;2019-06-18 10:25:10 -0400;Use _dtype instead of .dtype in dynamic slice transpose rule.

==

jax/lax/lax.py
==================
c8b946e1;Peter Hawkins;2019-06-18 10:18:33 -0400;Use lax.full instead of broadcast in transpose rule for dynamic_slice.

==

jax/lax/lax.py
==================
b4acfe06;Peter Hawkins;2019-06-18 05:58:10 -0600;Merge pull request #868 from hawkinsp/master
Implement batching for np.linalg.solve
==
==================
1e1dfd5f;Peter Hawkins;2019-06-18 05:57:05 -0600;Merge pull request #869 from hawkinsp/enable
Enable some Eigendecomposition tests.
==
==================
6dd54236;Matthew Johnson;2019-06-17 19:39:14 -0700;manually fuse a transpose into a reshape

==

jax/lax/lax.py
==================
3ce87f78;Matthew Johnson;2019-06-17 19:25:19 -0700;Merge pull request #859 from jheek/grouped-convs
Grouped convs
==
==================
a6e374dd;Matthew Johnson;2019-06-17 19:23:07 -0700;Merge pull request #858 from google/improve-conv-batching
improve efficiency of conv batching rules (i.e. vmap rules)
==
==================
07a9396c;Matthew Johnson;2019-06-17 19:01:03 -0700;Merge pull request #867 from google/tuple-simplification
add tuple simplification logic
==
==================
88cc66d1;Peter Hawkins;2019-06-17 21:40:54 -0400;Remove extra blank line.

==

jax/lax_linalg.py
==================
991a5a9f;Peter Hawkins;2019-06-17 21:39:34 -0400;Use _dtype instead of .dtype in dynamic slice rule.

==

jax/lax/lax.py
==================
81dae9ec;Peter Hawkins;2019-06-17 21:34:26 -0400;Enable some Eigendecomposition tests.

==

tests/linalg_test.py
==================
96775a4d;Matthew Johnson;2019-06-17 14:23:26 -0700;add tuple simplification logic
Co-authored-by: Dougal Maclaurin <dougalm@google.com>

==

jax/interpreters/partial_eval.py
tests/api_test.py
==================
4e872b96;Peter Hawkins;2019-06-17 21:18:27 -0400;Fix type mismatch with int32-type indices under a jit with 64-bit types enabled.

==

jax/lax/lax.py
tests/lax_numpy_indexing_test.py
==================
f53ede7e;Peter Hawkins;2019-06-17 20:32:19 -0400;Add batching support to numpy.linalg.solve.

==

jax/lax_linalg.py
jax/numpy/linalg.py
tests/linalg_test.py
==================
0190684e;Peter Hawkins;2019-06-17 18:39:45 -0600;Merge pull request #866 from hawkinsp/master
Implement np.ix_, for non-bool inputs.
==
==================
fbdb204d;Peter Hawkins;2019-06-17 20:03:10 -0400;Fix type of np.ix_ for empty arrays to match numpy.

==

jax/numpy/lax_numpy.py
==================
95572ba1;Roy Frostig;2019-06-17 14:22:07 -0700;fix permutation adjustment in `transpose` parallelization rule

==

jax/lax/lax_parallel.py
==================
49d2928d;Roy Frostig;2019-06-17 14:21:42 -0700;fix axis-matching in `reshape` parallelization rule

==

jax/lax/lax_parallel.py
==================
2dc89ad4;Peter Hawkins;2019-06-17 17:19:21 -0400;Add ix_ to the docs.

==

docs/jax.numpy.rst
==================
ec685bf8;Peter Hawkins;2019-06-17 17:08:27 -0400;Implement np.ix_, for non-bool inputs.

==

jax/lax/lax.py
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
e3462fd8;Jonathan Heek;2019-06-17 20:40:31 +0200;write out batch_feature_groups to simplify and correct implementation

==

jax/lax/lax.py
tests/lax_test.py
==================
a1219f10;Matthew Johnson;2019-06-17 12:29:45 -0700;Merge pull request #865 from google/fix-reshape-grad-bug
fix special-form reshape transpose bug (and add tests)
==
==================
54ac9ee9;Matthew Johnson;2019-06-17 12:23:40 -0700;Merge pull request #864 from jlebar/genrule-warning
Fix bazel warning about jax_to_hlo genrule.
==
==================
fef68dee;Matthew Johnson;2019-06-17 11:49:54 -0700;fix reshape transpose bug (and add tests)
This version of reshape (taking a `dimensions` argument, which
effectively fuses in a transpose) seems only to be used in the JVP rule
for lax._reduce_prod (basically np.product), but its transpose rule was
totally busted and untested.

==

jax/lax/lax.py
tests/lax_test.py
==================
0cf33e96;Justin Lebar;2019-06-17 11:41:51 -0700;Fix bazel warning about jax_to_hlo genrule.
See description in build_defs.bzl for why the previous approach
generated a warning.

==

jax/tools/build_defs.bzl
jax/tools/jax_to_hlo.py
==================
a113d9f5;Roy Frostig;2019-06-17 09:09:39 -0700;Merge branch 'master' into parallelize

==
==================
43d987e3;Peter Hawkins;2019-06-17 07:00:41 -0600;Merge pull request #860 from hawkinsp/master
Use lax.full to create zeros array in gather transpose rule.
==
==================
129e73a2;Peter Hawkins;2019-06-17 08:19:36 -0400;Use lax.full to create zeros array in gather transpose rule.

==

jax/lax/lax.py
==================
077d5652;Jonathan Heek;2019-06-17 12:18:58 +0200;grouped convolution support

==

jax/lax/lax.py
==================
ff29d582;Matthew Johnson;2019-06-15 13:38:55 -0700;t # This is a combination of 2 commits.
make all conv vmap rules generate a single call

also plumb feature_group_count and batch_group_count everywhere

==

jax/lax/lax.py
jax/test_util.py
tests/lax_test.py
==================
fbe9affb;Matthew Johnson;2019-06-15 16:48:02 -0700;Merge pull request #857 from jlebar/genrule-improvements
Improvements to jax_to_hlo genrule.
==
==================
0a770d97;Justin Lebar;2019-06-15 14:28:38 -0700;Improvements to jax_to_hlo genrule.
 - Specify an explicit name for the genrule, rather than using the name
   of src.  You might have one src that produces multiple HLO
   computations (e.g. with different input sizes).

 - Allow jax_to_hlo genrule to depend on multiple libraries, not just
   one.

 - Silence warning when running jax_to_hlo genrule about no GPU/TPU
   being available.

==

jax/tools/BUILD
jax/tools/build_defs.bzl
==================
1262ca9b;Matthew Johnson;2019-06-15 12:01:20 -0700;improve conv rhs batching, add systematic test

==

jax/lax/lax.py
jax/test_util.py
tests/batching_test.py
tests/lax_test.py
==================
1dc4a4d0;Matthew Johnson;2019-06-14 17:27:36 -0700;Merge pull request #855 from google/scan-debug
fix the david sussillo bug!
==
==================
dd9186ae;Matthew Johnson;2019-06-14 11:53:10 -0700;Merge pull request #853 from jlebar/hlo-genrule
Add jax_to_hlo.
==
==================
191206db;Matthew Johnson;2019-06-14 11:49:07 -0700;fix the david sussillo bug
Co-authored-by: Dougal Maclaurin <dougalm@google.com>

==

jax/interpreters/partial_eval.py
jax/lax/lax_control_flow.py
tests/lax_control_flow_test.py
==================
42d0fc5d;Justin Lebar;2019-06-13 18:06:14 -0700;Add jax_to_hlo.
This tool takes a JAX function and converts it into an HLO proto, which
you can then save and run later using XLA's public APIs.

See patch for details.

CC @achowdhery, @schsam

==

jax/tools/__init__.py
jax/tools/build_defs.bzl
jax/tools/jax_to_hlo.py
tests/jax_to_hlo_test.py
==================
a6192644;Matthew Johnson;2019-06-13 13:58:57 -0700;Merge pull request #843 from mirca/patch-1
doc: partial class not needed in code snippet in README.md
==
==================
783893fd;Matthew Johnson;2019-06-13 13:58:25 -0700;Merge pull request #846 from jekbradbury/dot_batch_rule
Fix dot batch rule bug and add test + check
==
==================
edfe5203;James Bradbury;2019-06-12 18:02:01 -0700;Fix dot batch rule bug and add test + check

==

jax/interpreters/batching.py
jax/lax/lax.py
tests/batching_test.py
==================
619b0334;Skye Wanderman-Milne;2019-06-12 13:34:16 -0700;Bump jaxlib version to 0.1.20 and update WORKSPACE

==

WORKSPACE
jaxlib/version.py
==================
5232428e;Zé Vinícius;2019-06-12 05:46:14 -0300;doc: partial class not needed in code snippet in README.md

==

README.md
==================
f237a242;Matthew Johnson;2019-06-11 19:37:43 -0700;Merge pull request #840 from google/random-no-op-by-op
make threefry_2x32 not do any op-by-op stuff
==
==================
63543787;Matthew Johnson;2019-06-11 19:36:45 -0700;Merge pull request #841 from jlebar/common-gotchas-fastmath
Update common-gotchas notebook now that JAX asks XLA:CPU to respect infs and nans.
==
==================
9794afeb;Justin Lebar;2019-06-11 16:06:42 -0700;Remove mention of CPU fastmath from common-gotchas notebook.
JAX now asks XLA:CPU to respect infs and nans.

==

notebooks/Common_Gotchas_in_JAX.ipynb
==================
3ef7693e;Skye Wanderman-Milne;2019-06-11 15:31:05 -0700;Update WORKSPACE

==

WORKSPACE
==================
075db4a7;Skye Wanderman-Milne;2019-06-11 14:56:30 -0700;Bump jaxlib version and WORKSPACE

==

WORKSPACE
jaxlib/version.py
==================
a56a7d02;Matthew Johnson;2019-06-11 14:56:21 -0700;make threefry_2x32 not do any op-by-op stuff

==

jax/numpy/lax_numpy.py
jax/random.py
tests/random_test.py
==================
9211bf39;Matthew Johnson;2019-06-11 14:03:37 -0700;bump version for pypi

==

jax/version.py
==================
0683e7e0;Matthew Johnson;2019-06-11 07:15:14 -0700;fix build error

==

jax/scipy/special.py
==================
bbf625e0;Matthew Johnson;2019-06-11 06:52:55 -0700;fix jax.rst docs (remove defvjp2 / defjvp2)

==

docs/jax.rst
==================
581d24c6;Matthew Johnson;2019-06-11 06:48:44 -0700;Merge pull request #818 from google/custom-transforms
make custom_transforms handle pytrees, add api.defvjp
==
==================
7c308dca;Matthew Johnson;2019-06-11 06:44:59 -0700;implement reviewer suggestions

==

jax/api.py
tests/api_test.py
==================
aebf7eb0;Matthew Johnson;2019-06-10 12:17:20 -0700;fix jax.numpy.transpose arg name 'axes'

==

jax/numpy/lax_numpy.py
==================
97e16655;Matthew Johnson;2019-06-10 10:38:15 -0700;Merge pull request #834 from google/issue830
np.arange shouldn't pop its kwargs (fixes #830)
==
==================
902f32d7;Matthew Johnson;2019-06-10 10:38:00 -0700;Merge pull request #836 from aslanides/master
Fix reference to init_fun in optimizers docs.
==
==================
1a4f6aa5;John Aslanides;2019-06-10 18:27:51 +0100;Fix reference to init_fun in optimizers docs.

==

jax/experimental/optimizers.py
==================
1829508b;Matthew Johnson;2019-06-09 20:18:18 -0700;np.arange shouldn't pop its kwargs (fixes #830)

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
53241188;Matthew Johnson;2019-06-09 11:16:36 -0700;Merge pull request #832 from google/issue831
fix DeviceTuple constant handler
==
==================
4ab89084;Matthew Johnson;2019-06-09 09:49:16 -0700;fix DeviceTuple constant handler (fixes #831)

==

jax/interpreters/xla.py
tests/lax_test.py
==================
c061fd7b;Matthew Johnson;2019-06-08 09:11:25 -0700;improve error for unimplemented parallel primitive

==

jax/interpreters/pxla.py
jax/lax/lax_parallel.py
==================
424002bc;Matthew Johnson;2019-06-08 09:04:36 -0700;Merge pull request #828 from google/pswapaxes-lowering
add pswapaxes lowering (fixes #827)
==
==================
d7c7df1b;Matthew Johnson;2019-06-08 09:03:55 -0700;temporarily disable a check in pswapaxes

==

jax/lax/lax_parallel.py
==================
35de7047;Matthew Johnson;2019-06-08 08:57:34 -0700;add pswapaxes lowering (fixes #827)

==

jax/lax/lax_parallel.py
tests/pmap_test.py
==================
d622e78e;Matthew Johnson;2019-06-07 16:00:11 -0700;fix broken travis path from previous commit

==

.travis.yml
==================
04b0a911;Skye Wanderman-Milne;2019-06-07 15:13:49 -0700;pip wheels need to include the versionso use version '0.1.18' instead of 'latest'.

==

.travis.yml
README.md
notebooks/XLA_in_Python.ipynb
notebooks/gufuncs.ipynb
notebooks/maml.ipynb
notebooks/neural_network_and_data_loading.ipynb
notebooks/neural_network_with_tfds_data.ipynb
notebooks/quickstart.ipynb
==================
49672f79;Roy Frostig;2019-06-06 18:51:25 -0700;parallelization rule for lax.gather
Co-authored-by: Matthew Johnson <mattjj@google.com>

==

jax/lax/lax.py
==================
6e9c662a;Peter Hawkins;2019-06-06 19:04:35 -0400;Merge pull request #822 from hawkinsp/master
Add support for integer dot operations.
==
==================
bd389b7f;Peter Hawkins;2019-06-06 19:04:11 -0400;Add bug number for integer dots.

==

jax/lax/lax.py
==================
15361c4d;Peter Hawkins;2019-06-06 17:21:21 -0400;Add support for integer dot operations.
Lower to a sum of products for integers since XLA currently lacks support for integer dots.

==

jax/lax/lax.py
tests/lax_numpy_test.py
tests/lax_test.py
==================
121d7812;Matthew Johnson;2019-06-06 10:12:07 -0700;docstring improvements from @skye comments

==

jax/api.py
==================
8309836d;Matthew Johnson;2019-06-05 19:57:23 -0700;Merge pull request #821 from georgedahl/optimizer_state_saving
Changes to jax optimizers.py to facilitate serialization of optimizer state.
==
==================
305127d8;George Dahl;2019-06-05 18:43:58 -0700;Changes to jax optimizers.py to facilitate serialization of optimizer state.
Co-authored-by: Matthew Johnson <mattjj@google.com>

==

jax/experimental/optimizers.py
==================
12b90ddf;Matthew Johnson;2019-06-05 19:18:36 -0700;fix typo

==

jax/api.py
==================
1feefd10;Matthew Johnson;2019-06-05 19:14:27 -0700;Merge pull request #820 from google/simplify-gather-shape-rule
simplify gather shape rule
==
==================
a6c41a32;Matthew Johnson;2019-06-05 19:13:33 -0700;finish drafting defvjp/defjvp docstrings

==

jax/api.py
==================
cfaa49f8;Matthew Johnson;2019-06-05 18:02:15 -0700;improve custom_gradient docstring

==

jax/api.py
==================
948ec8fb;Matthew Johnson;2019-06-05 17:56:18 -0700;add docstrings for defjvp and defjvp2

==

jax/api.py
==================
ab20f029;Matthew Johnson;2019-06-05 16:56:43 -0700;add docstring for defjvp_all

==

docs/jax.rst
jax/api.py
==================
6cc87e0d;Matthew Johnson;2019-06-05 17:09:29 -0700;Merge pull request #819 from jekbradbury/dot_batch_rule
fix bug in dot batching rule
==
==================
9e49500c;Matthew Johnson;2019-06-05 17:04:33 -0700;simplify gather shape rule
Co-authored-by: Roy Frostig <frostig@google.com>

==

jax/lax/lax.py
==================
efed266e;Roy Frostig;2019-06-05 16:43:49 -0700;Fix broadcasting papply to handle scalars.
Co-authored-by: Matthew Johnson <mattjj@google.com>

==

jax/interpreters/parallel.py
==================
9bc5f2ae;James Bradbury;2019-06-05 15:17:06 -0700;fix bug in dot batching rule

==

jax/lax/lax.py
tests/batching_test.py
==================
720dec40;Matthew Johnson;2019-06-05 13:48:04 -0700;add custom_gradient

==

docs/jax.rst
jax/api.py
tests/api_test.py
==================
372d60bb;Matthew Johnson;2019-06-05 13:20:44 -0700;add docstring to custom_transforms

==

jax/api.py
==================
35e5e644;Matthew Johnson;2019-06-03 07:17:37 -0700;make custom_transforms handle pytrees, add api.defvjp
With advice from @dougalm!

==

jax/api.py
jax/interpreters/ad.py
jax/interpreters/partial_eval.py
jax/scipy/special.py
tests/api_test.py
==================
a61d5f6e;Skye Wanderman-Milne;2019-06-05 10:28:07 -0700;Update jaxlib version

==

jaxlib/version.py
==================
051abc1b;Matthew Johnson;2019-06-05 07:05:49 -0700;Merge pull request #816 from google/vmap-of-pmap
add vmap-of-pmap
==
==================
e1f32d0d;Matthew Johnson;2019-06-04 18:33:52 -0700;add process_map to vmap tracer, i.e. vmap-of-pmap

==

jax/interpreters/batching.py
jax/interpreters/partial_eval.py
jax/interpreters/pxla.py
tests/pmap_test.py
==================
3a234641;Skye Wanderman-Milne;2019-06-04 18:42:22 -0700;Update jaxlib references to 'latest'

==

README.md
notebooks/XLA_in_Python.ipynb
notebooks/gufuncs.ipynb
notebooks/maml.ipynb
notebooks/neural_network_and_data_loading.ipynb
notebooks/neural_network_with_tfds_data.ipynb
notebooks/quickstart.ipynb
==================
6cec008a;Roy Frostig;2019-06-04 15:31:27 -0700;Merge branch 'master' into parallelize

==
==================
a12ca881;Matthew Johnson;2019-06-04 13:17:41 -0700;add future to macos wheel build script

==

build/build_jaxlib_wheels_macos.sh
==================
3819eac2;Skye Wanderman-Milne;2019-06-04 13:07:03 -0700;Update Dockerfile to pip install future for py2 build.
Part of the TF build requires the builtins module, which is py3.

==

build/Dockerfile
==================
dd3b681b;Peter Hawkins;2019-06-04 14:30:37 -0400;Merge pull request #813 from hawkinsp/master
Add documentation on asynchronous dispatch.
==
==================
91e6ba32;Peter Hawkins;2019-06-04 10:09:43 -0400;Add documentation on asynchronous dispatch.

==

docs/async_dispatch.rst
docs/index.rst
==================
e071d3fd;Skye Wanderman-Milne;2019-06-03 14:17:03 -0700;Update XLA workspace

==

WORKSPACE
==================
451e2081;Skye Wanderman-Milne;2019-06-03 14:11:48 -0700;update jaxlib

==

jaxlib/version.py
==================
f3501eac;Matthew Johnson;2019-06-03 14:05:16 -0700;bump version for pypi

==

jax/version.py
==================
0f1d62df;Peter Hawkins;2019-06-03 14:55:47 -0400;Merge pull request #811 from hawkinsp/master
Update XLA.
==
==================
22ad01ed;Peter Hawkins;2019-06-03 14:37:13 -0400;Update XLA.
Fixes #801.

==

WORKSPACE
==================
526c0298;Peter Hawkins;2019-06-03 13:30:31 -0400;Merge pull request #809 from hawkinsp/block
Add a block_until_ready method to DeviceArray.
==
==================
b80bbe41;Peter Hawkins;2019-06-03 12:37:08 -0400;Move block_until_ready into DeviceValue.

==

jax/interpreters/xla.py
tests/api_test.py
==================
5ea1e4cf;Peter Hawkins;2019-06-03 12:27:39 -0400;Merge pull request #808 from hawkinsp/master
Simplify pyval result handler.
==
==================
fbe701fe;Peter Hawkins;2019-06-03 12:05:28 -0400;Add a block_until_ready method to DeviceArray.

==

jax/interpreters/xla.py
tests/api_test.py
==================
14a283ae;Matthew Johnson;2019-06-03 08:09:11 -0700;Merge pull request #807 from google/issue806
namedtuple subclass transparency (fixes #806)
==
==================
86698fba;Peter Hawkins;2019-06-03 11:05:50 -0400;Simplify pyval result handler.
The previous change to the pyval result handler attempted to prefetch values to the host. However, this didn't actually work because decompose() doesn't propagate prefetched values.

However, there's a much simpler thing we can do here: just call to_py() on the entire value. The XLA library knows how to return (nested) tuple values and we only need convert them to JaxTuples. This achieves everything we wanted from prefetching (namely that we don't synchronously fetch the tuple leaves one by one).

==

jax/interpreters/xla.py
==================
c62e334a;Matthew Johnson;2019-06-03 07:49:02 -0700;Merge pull request #799 from google/ppermute-grad
ppermute (aka collective_permute) jvp + transpose
==
==================
fadd18b3;Matthew Johnson;2019-06-03 07:22:32 -0700;namedtuple subclass transparency (fixes #806)

==

jax/tree_util.py
tests/api_test.py
==================
9dfe2788;Matthew Johnson;2019-06-01 17:00:07 -0700;Merge pull request #800 from google/issue798
add jax.eval_shape, fixes #798
==
==================
ffec059f;Matthew Johnson;2019-06-01 09:53:32 -0700;add jax.eval_shape to reference docs via jax.rst

==

docs/jax.rst
==================
dda95df5;Matthew Johnson;2019-06-01 09:48:28 -0700;fix duck typing in jax.eval_shape (cf. #798)

==

jax/api.py
tests/api_test.py
==================
11c512a1;Matthew Johnson;2019-06-01 09:34:33 -0700;add jax.eval_shape, fixes #798

==

jax/api.py
tests/api_test.py
==================
93e11433;Matthew Johnson;2019-06-01 08:30:25 -0700;improve disable_jit docstring

==

jax/api.py
==================
e63bd4d5;Peter Hawkins;2019-05-31 17:20:53 -0400;Add domain test to atanh implementation.
Disable some tests on tpu.

==

jax/lax/lax.py
tests/lax_numpy_test.py
==================
dffe4915;Matthew Johnson;2019-05-31 14:11:38 -0700;add another ppermute test, remove extra print call

==

tests/pmap_test.py
==================
8377224b;Matthew Johnson;2019-05-31 14:04:04 -0700;ppermute (aka collective_permute) jvp + transpose

==

jax/lax/lax_parallel.py
tests/pmap_test.py
==================
0bb58847;Peter Hawkins;2019-05-31 15:17:05 -0400;Merge pull request #797 from hawkinsp/prefetch
Enable more parallelism for device to host copies using prefetching.
==
==================
b532e068;Peter Hawkins;2019-05-31 15:06:34 -0400;Add recursive _prefetch_jaxpr_literals method, use it in both xla and pxla.

==

jax/interpreters/pxla.py
jax/interpreters/xla.py
==================
77156402;Roy Frostig;2019-05-31 11:41:31 -0700;Merge branch 'master' into parallelize

==
==================
6683846a;Peter Hawkins;2019-05-31 14:40:51 -0400;Incorporate review comments.

==

jax/interpreters/pxla.py
jax/interpreters/xla.py
==================
800bdca8;Roy Frostig;2019-05-31 11:40:51 -0700;sketch of parallelization rule for lax.conv_general_dilated

==

jax/lax/lax.py
==================
28e426a2;Peter Hawkins;2019-05-31 12:24:59 -0400;Add support for prefetching buffers from the device to the host.

==

jax/interpreters/pxla.py
jax/interpreters/xla.py
==================
0a8810d9;Matthew Johnson;2019-05-31 09:20:45 -0700;abstract_eval_fun should instantiate output pval

==

jax/interpreters/partial_eval.py
==================
d0415f04;Peter Hawkins;2019-05-31 09:38:21 -0400;Update XLA.

==

WORKSPACE
==================
70dd95bf;Peter Hawkins;2019-05-31 09:34:30 -0400;Remove unused unzip2 import.

==

jax/interpreters/xla.py
==================
7950149c;Matthew Johnson;2019-05-30 09:16:27 -0700;Merge pull request #784 from JasperSnoek/master
Cleaned up the GP regression example
==
==================
06d41fba;Jasper Snoek;2019-05-30 12:13:10 -0400;Added a note about squared distances

==

examples/gaussian_process_regression.py
==================
c598c801;Peter Hawkins;2019-05-30 10:52:49 -0400;Merge pull request #792 from hawkinsp/delete
Add an explicit DeviceArray.delete method.
==
==================
a46199cf;Peter Hawkins;2019-05-30 10:10:40 -0400;Merge pull request #791 from hawkinsp/master
Remove jax.scipy.misc.
==
==================
d0d9b8e9;Peter Hawkins;2019-05-30 10:07:13 -0400;Remove a couple of jax.scipy.misc mentions in Colab notebooks.

==

notebooks/neural_network_and_data_loading.ipynb
notebooks/neural_network_with_tfds_data.ipynb
==================
af67447f;Peter Hawkins;2019-05-30 09:48:38 -0400;Add an explicit DeviceArray.delete method that deletes both the device and host parts of a DeviceArray.
Fixes #725.

==

jax/interpreters/xla.py
tests/api_test.py
==================
2b235e7f;Peter Hawkins;2019-05-30 09:19:02 -0400;Remove jax.scipy.misc.
The only function in jax.scipy.misc is logsumexp, which is also available as jax.scipy.special.logsumexp.
scipy.misc.logsumexp is gone from recent scipy versions, and users found the current jax behavior where the misc name was present only if the scipy equivalent was confusing. Instead, just remove it; users should use jax.scipy.special.logsumexp instead.

==

jax/scipy/__init__.py
jax/scipy/misc.py
tests/lax_scipy_test.py
==================
6a59a567;Matthew Johnson;2019-05-29 21:25:49 -0700;Merge pull request #789 from google/pmap-environments
Make pmap lax.psum(1, 'i') and pxla.axis_index('i') work
==
==================
25262edb;Matthew Johnson;2019-05-29 10:39:51 -0700;Make pmap lax.psum(1, 'i') and pxla.axis_index('i') work
The implementation mechanism is to use a bit of dynamic context to model
the axis name environment at trace time, and for the environment to
track how an axis name maps to an axis size and the corresponding trace
(i.e. the JaxprTrace instance). With that information, we can lift
special primitives that take axis_name parameters into the trace as
needed without having a data dependence on the input.

==

jax/interpreters/pxla.py
jax/interpreters/xla.py
jax/lax/lax.py
jax/lax/lax_parallel.py
tests/pmap_test.py
==================
fafe69bd;Peter Hawkins;2019-05-29 19:38:55 -0400;Relax Bazel maximum version check.
Remove debug print from lax_numpy_test.py.

==

build/build.py
tests/lax_numpy_test.py
==================
c65ccda3;Peter Hawkins;2019-05-29 19:26:02 -0400;Merge pull request #786 from hawkinsp/scatter
Support vmap of scatter where indices but not updates are batched.
==
==================
27746b8c;Peter Hawkins;2019-05-29 19:23:54 -0400;Merge pull request #785 from hawkinsp/master
Check for failure of LAPACK calls and return NaNs on failure.
==
==================
0293ecbb;Peter Hawkins;2019-05-29 17:13:46 -0400;Add support for vmap of scatter where indices but not updates are batched.

==

jax/lax/lax.py
tests/batching_test.py
==================
162b41e9;Peter Hawkins;2019-05-29 16:50:27 -0400;Check for failure of LAPACK calls and return arrays full of NaNs if they occur.
Partially addresses #775.

==

jax/lax/__init__.py
jax/lax_linalg.py
==================
3d1e419e;Jasper Snoek;2019-05-29 16:36:45 -0400;Updating GP regression example

==

examples/gaussian_process_regression.py
==================
58c02215;Jasper Snoek;2019-05-29 16:35:39 -0400;Updating GP regression example

==

examples/gaussian_process_regression.py
==================
600630d8;Peter Hawkins;2019-05-29 16:11:00 -0400;Return NaNs if Cholesky decomposition fails on CPU.

==

jax/lax_linalg.py
==================
117749b7;Matthew Johnson;2019-05-29 12:03:30 -0700;Merge pull request #783 from jekbradbury/fixes-from-pytype
Fixes from pytype
==
==================
c9b2e79b;James Bradbury;2019-05-29 11:25:42 -0700;Drop dead compiled_call code

==

jax/interpreters/ad.py
jax/interpreters/partial_eval.py
==================
9506fe6d;James Bradbury;2019-05-29 11:21:57 -0700;Fix typo

==

jax/interpreters/ad.py
==================
983f9908;Peter Hawkins;2019-05-29 13:39:41 -0400;Merge pull request #782 from hawkinsp/master
Improve behavior of a number of math functions for extreme inputs.
==
==================
fb072b7f;Peter Hawkins;2019-05-29 12:59:14 -0400;Fix typo in comment. Remove debug print.

==

tests/lax_numpy_test.py
==================
6e1ec38a;Peter Hawkins;2019-05-29 12:51:24 -0400;Improve behavior of a number of math functions for extreme inputs.
Call XLA's sqrt instead of defining sqrt to be x**0.5. The two have different behaviors for infinite inputs.

Incorporate improvements to acos, sinh, cosh, asinh, and acosh that have previously been made to the versions in the XLA C++ client libraries.

==

jax/lax/lax.py
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
d8528306;Matthew Johnson;2019-05-29 08:47:05 -0700;Merge pull request #780 from google/issue772
allow more types to be jaxpr literals, fixes #772
==
==================
65b33305;Peter Hawkins;2019-05-29 11:28:34 -0400;Merge pull request #781 from hawkinsp/master
Enable some tests that now pass.
==
==================
778435a9;Matthew Johnson;2019-05-29 08:12:05 -0700;undo #503 in favor of new literal staging method

==

jax/core.py
jax/interpreters/batching.py
jax/lax/lax.py
jax/lax/lax_control_flow.py
tests/lax_control_flow_test.py
==================
c3add0c7;Peter Hawkins;2019-05-29 10:12:16 -0400;Enable some tests that now pass.
Fix some dtypes in the lapack eig implementation to fix test failures.

==

jaxlib/lapack.pyx
tests/lax_scipy_test.py
tests/linalg_test.py
==================
af064bb7;Matthew Johnson;2019-05-29 05:40:07 -0700;Merge pull request #771 from fehiepsi/gammaln
promote args for some special functions
==
==================
310103f5;Matthew Johnson;2019-05-28 22:50:52 -0700;try a tweak on Literal for more cache hits

==

jax/core.py
==================
9c931dde;Matthew Johnson;2019-05-28 22:38:06 -0700;allow more types to be jaxpr literals, fixes #772

==

jax/abstract_arrays.py
jax/core.py
jax/interpreters/partial_eval.py
jax/interpreters/xla.py
tests/api_test.py
==================
3c1b832e;Matthew Johnson;2019-05-28 21:55:11 -0700;remove accidentally-checked-in file

==

examples/mnist_bench.py
==================
7751ba44;Matthew Johnson;2019-05-28 21:54:13 -0700;remove accidentally-checked-in file

==

examples/fluidsim.py
==================
9fab325a;Matthew Johnson;2019-05-28 21:48:15 -0700;loosen tanh grad test tolerance (2bf9d5a fix)

==

tests/lax_test.py
==================
d70985d3;Matthew Johnson;2019-05-28 21:39:43 -0700;fix error in previous commit

==

jax/experimental/stax.py
==================
3b290457;Matthew Johnson;2019-05-28 21:36:34 -0700;move stax randn init convert_element_type later

==

jax/experimental/stax.py
==================
5a049fee;Matthew Johnson;2019-05-28 21:10:09 -0700;further improve grad-of-nonscalar error message

==

jax/api.py
==================
2bf9d5aa;Matthew Johnson;2019-05-28 21:07:13 -0700;loosen tolerance on tanh grad test

==

tests/lax_test.py
==================
8eb10835;Matthew Johnson;2019-05-28 20:52:52 -0700;bring save, savez, load into jax.numpy namespace
fixes #712

==

jax/numpy/lax_numpy.py
==================
74372732;Matthew Johnson;2019-05-28 20:25:38 -0700;improve error message for grad of non-scalar funs

==

jax/api.py
==================
860cd8d5;Peter Hawkins;2019-05-28 16:32:34 -0400;Merge pull request #778 from hawkinsp/master
Instantiate symbolic zeros in the scatter-add transpose rule.
==
==================
cfdf1cd3;Peter Hawkins;2019-05-28 15:41:27 -0400;Propagate symbolic zeros instead of instantiating them.

==

jax/lax/lax.py
==================
7ee59e96;Peter Hawkins;2019-05-28 10:30:58 -0400;Instantiate symbolic zeros in the scatter-add transpose rule.
Fixes #776.

==

jax/lax/lax.py
tests/lax_numpy_test.py
==================
65ad14d4;fehiepsi;2019-05-26 00:30:12 -0400;fix typo

==

jax/scipy/special.py
==================
57aac741;fehiepsi;2019-05-25 22:45:01 -0400;fix typos when getting output of promote_args

==

jax/scipy/special.py
==================
e9ec30c0;fehiepsi;2019-05-25 16:56:22 -0400;promote args for special functions

==

jax/scipy/special.py
==================
90eda42e;Peter Hawkins;2019-05-25 10:55:45 -0400;Merge pull request #767 from hawkinsp/tanh
Use more numerically stable formulation of tanh gradient.
==
==================
9e68d911;Peter Hawkins;2019-05-24 11:07:08 -0400;Use more numerically stable formulation of tanh gradient.

==

jax/lax/lax.py
tests/lax_numpy_test.py
==================
41c2e9d4;Matthew Johnson;2019-05-24 19:40:51 -0700;Merge pull request #769 from google/fix-travis
fix travis by running `pytest -n 1` instead of `-n 2`
==
==================
6fe6cb0d;Matthew Johnson;2019-05-24 19:02:40 -0700;try fixing travis by using only one pytest job

==

.travis.yml
==================
2802c8f5;Matthew Johnson;2019-05-24 10:44:33 -0700;try pinning travis to jaxlib==0.1.15
Currently Travis CI builds are failing in a way we can't reproduce
locally.

==

.travis.yml
==================
d63b8a47;Peter Hawkins;2019-05-24 08:08:31 -0400;Update Jaxlib references to 0.1.16.

==

README.md
notebooks/XLA_in_Python.ipynb
notebooks/gufuncs.ipynb
notebooks/maml.ipynb
notebooks/neural_network_and_data_loading.ipynb
notebooks/neural_network_with_tfds_data.ipynb
notebooks/quickstart.ipynb
notebooks/vmapped log-probs.ipynb
==================
913bc6b5;Matthew Johnson;2019-05-23 12:57:58 -0700;fix stax dtype breakage

==

jax/experimental/stax.py
==================
1a908b0f;Matthew Johnson;2019-05-23 12:52:00 -0700;update jaxlib

==

WORKSPACE
jaxlib/version.py
==================
8ffb9417;Matthew Johnson;2019-05-23 11:28:15 -0700;fix stax initialization rng bug, remove temp file

==

examples/spmd_spatially_sharded_conv_net.py
jax/experimental/stax.py
jax/interpreters/pxla.py
==================
92e5f93a;Matthew Johnson;2019-05-23 09:07:44 -0700;tweak docstrings in mnist examples

==

examples/fluidsim.py
examples/mnist_bench.py
examples/mnist_classifier.py
examples/spmd_mnist_classifier_fromscratch.py
examples/spmd_spatially_sharded_conv_net.py
==================
5d902298;Matthew Johnson;2019-05-23 06:51:47 -0700;bump version for pypi

==

jax/version.py
==================
c3066794;Matthew Johnson;2019-05-23 06:51:16 -0700;improve scan error message when output is not pair

==

jax/lax/lax_control_flow.py
==================
2409a74f;Matthew Johnson;2019-05-22 20:50:51 -0700;Merge pull request #761 from google/issue756
make jax.random default dtypes 64-bit
==
==================
c743c14c;Matthew Johnson;2019-05-22 20:06:12 -0700;address reviewer comments

==

jax/random.py
==================
0490d06a;Matthew Johnson;2019-05-22 16:36:49 -0700;Merge pull request #760 from google/issue758
patch utility functions in batching.py
==
==================
93e201f8;Matthew Johnson;2019-05-22 16:22:12 -0700;make jax.random default dtypes 64-bit
fixes #756

==

jax/random.py
tests/random_test.py
==================
86ad8e04;Matthew Johnson;2019-05-22 16:04:16 -0700;make a batching.py utility function more defensive

==

jax/interpreters/batching.py
==================
09b22996;Matthew Johnson;2019-05-22 15:59:30 -0700;patch utility functions in batching.py
fixes #758

==

jax/interpreters/batching.py
tests/optimizers_test.py
==================
a193b359;Matthew Johnson;2019-05-22 14:38:49 -0700;when xla_computation sees no kwargs, don't make ()

==

jax/api.py
==================
cff08e50;Matthew Johnson;2019-05-22 14:38:30 -0700;Merge pull request #759 from google/issue757
compare binary lattice prefixes in scan
==
==================
0307ce58;Matthew Johnson;2019-05-22 13:33:51 -0700;compare binary lattice prefixes in scan
fixes #757

==

jax/lax/lax_control_flow.py
tests/lax_control_flow_test.py
==================
3815662a;Matthew Johnson;2019-05-22 11:56:50 -0700;Merge pull request #755 from google/scan-vmap
add vmap support to `lax.scan` (so vmap-of-scan works)
==
==================
4fe2bcfe;Matthew Johnson;2019-05-16 10:18:53 -0700;add vmap-of-scan tests, fix minor bugs

==

jax/interpreters/batching.py
tests/lax_control_flow_test.py
==================
7065cb63;Matthew Johnson;2019-05-16 07:40:31 -0700;move control flow batching tests

==

tests/batching_test.py
tests/lax_control_flow_test.py
==================
140699ed;Matthew Johnson;2019-05-15 07:25:03 -0700;scan of vmap sketched out! cf. #716

==

jax/interpreters/ad.py
jax/interpreters/batching.py
jax/lax/lax_control_flow.py
==================
ff481472;Matthew Johnson;2019-05-21 22:31:29 -0700;Merge pull request #754 from google/issue746
support both .reshape(*shape) and .reshape(shape)
==
==================
14d16b2d;Matthew Johnson;2019-05-21 21:37:52 -0700;support both .reshape(*shape) and .reshape(shape)
fixes #746

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
83a04c02;Matthew Johnson;2019-05-21 20:16:31 -0700;Merge pull request #752 from google/issue751
fix negative index handling in index_take
==
==================
522cf0ae;Matthew Johnson;2019-05-21 19:29:17 -0700;Merge pull request #750 from kho/master
Fix vmap() when there are empty tuples in the input
==
==================
ec6e39b9;Matthew Johnson;2019-05-21 19:18:29 -0700;fix negative index handling in index_take
fixes #751

==

jax/lax/lax.py
tests/lax_test.py
==================
42ea9fef;Matthew Johnson;2019-05-21 18:53:45 -0700;bump version for pypi

==

jax/version.py
==================
e04f344c;Matthew Johnson;2019-05-21 18:51:32 -0700;fix typo in lax.scan autodiff test (cf. #749)

==

tests/lax_control_flow_test.py
==================
b706879d;Matthew Johnson;2019-05-21 18:49:28 -0700;Merge pull request #749 from google/scan-debug
fix a bug in scan autodiff, improve autodiff tests
==
==================
8ea5eff3;Wu, Ke;2019-05-21 21:34:42 -0400;Fix vmap() when there are empty tuples in the input

==

jax/interpreters/batching.py
tests/batching_test.py
==================
6c47c9f2;Matthew Johnson;2019-05-21 18:19:42 -0700;loosen tolerance on testLuGrad

==

tests/linalg_test.py
==================
096dfb9b;Matthew Johnson;2019-05-21 18:07:22 -0700;fixed scan differentiation!

==

jax/interpreters/ad.py
tests/lax_control_flow_test.py
==================
1ecf7577;Matthew Johnson;2019-05-21 17:22:33 -0700;make check_grads check all orders <= given order

==

jax/test_util.py
tests/lax_control_flow_test.py
tests/lax_test.py
==================
8c00df1d;Matthew Johnson;2019-05-21 15:14:28 -0700;finer-grained passing and failing tests

==

jax/test_util.py
tests/lax_control_flow_test.py
==================
11c871b9;Matthew Johnson;2019-05-21 14:39:22 -0700;Merge pull request #747 from shoyer/gufuncs-update
Refresh notebooks/gufuncs.ipynb
==
==================
cf996730;Matthew Johnson;2019-05-21 13:54:37 -0700;add test showing bug in scan higher-order autodiff

==

tests/lax_control_flow_test.py
==================
9fb5e953;Stephan Hoyer;2019-05-21 13:18:47 -0700;Refresh notebooks/gufuncs.ipynb
All of the previously commented out examples work now.
Uncommented these, and added another example showing inserting a new axis.

==

notebooks/gufuncs.ipynb
==================
6e99d9c0;Matthew Johnson;2019-05-21 11:21:15 -0700;Merge branch 'master' of github.com:google/jax

==
==================
e8ef97fe;Matthew Johnson;2019-05-21 11:20:57 -0700;update version number for pypi

==

jax/version.py
==================
f6e394b5;Matthew Johnson;2019-05-21 11:19:23 -0700;Merge pull request #745 from google/issue744
improve scan error messages, add test (fixes #744)
==
==================
d01e6a96;Matthew Johnson;2019-05-21 11:18:44 -0700;improve scan error message test

==

tests/lax_control_flow_test.py
==================
f3c1a5ca;Matthew Johnson;2019-05-21 07:08:13 -0700;improve scan error messages, add test (fixes #744)

==

jax/lax/lax_control_flow.py
tests/lax_control_flow_test.py
==================
8cbc475a;Peter Hawkins;2019-05-20 20:53:44 -0400;Add "bazel shutdown" to the build script.
Fixes #739.

==

build/build.py
==================
bf64d964;Matthew Johnson;2019-05-20 17:53:11 -0700;Merge pull request #742 from google/issue740
handle tensordot with zero contracting dims
==
==================
52d73e43;Matthew Johnson;2019-05-20 17:41:27 -0700;Merge pull request #741 from google/issue738
wrap np.trace axes (fixes #738)
==
==================
dcb8584b;Matthew Johnson;2019-05-20 17:19:20 -0700;handle tensordot with zero contracting dims
fixes #740

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
d0e1b7be;Matthew Johnson;2019-05-20 17:11:18 -0700;wrap np.trace axes (fixes #738)

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
6539c8e4;Matthew Johnson;2019-05-20 12:55:21 -0700;bump version number for pypi

==

jax/version.py
==================
9f743a18;Matthew Johnson;2019-05-20 12:54:01 -0700;Merge pull request #737 from google/issue121
make jax.numpy.array(3) give 0D array, not scalar
==
==================
f8aa563d;Matthew Johnson;2019-05-20 11:49:09 -0700;make jax.numpy.array(3) give 0D array, not scalar
the mechanism is to use lax.reshape (which was already there) and avoid
the optimization that skipped actually calling reshape_p.bind

fixes #121

==

jax/lax/lax.py
tests/lax_numpy_test.py
==================
adb15b7f;Matthew Johnson;2019-05-20 11:13:42 -0700;revise optimizers.py docstrings (no JaxTuples)

==

jax/experimental/optimizers.py
==================
72c03795;Matthew Johnson;2019-05-20 11:05:29 -0700;Merge pull request #736 from google/pytree-namedtuple
make namedtuples transparent (act as pytree nodes)
==
==================
ca66c769;Matthew Johnson;2019-05-20 10:15:20 -0700;add test for namedtuple transparency

==

tests/api_test.py
==================
88f691f8;Matthew Johnson;2019-05-20 10:08:33 -0700;make namedtuples transparent (act as pytree nodes)

==

jax/tree_util.py
==================
5cbaf75d;Matthew Johnson;2019-05-20 09:42:43 -0700;Merge pull request #735 from google/issue711
fix bug in scan utility _convert_zeros
==
==================
4ab26774;Matthew Johnson;2019-05-20 09:09:32 -0700;fix bug in scan utility _convert_zeros
also add some additional checks to catch errors sooner
fixes #711

Co-authored-by: Dougal Maclaurin <dougalm@google.com>

==

jax/lax/lax_control_flow.py
tests/lax_control_flow_test.py
==================
85881672;Matthew Johnson;2019-05-20 07:08:42 -0700;Merge pull request #733 from google/issue732
change dtype promotion behavior for jit-invariance
==
==================
0ac4e4b0;Matthew Johnson;2019-05-20 07:06:43 -0700;test cleanup per review

==

tests/lax_numpy_test.py
==================
560b0ba9;Matthew Johnson;2019-05-20 06:59:20 -0700;mention numpy promotion differences in README

==

README.md
==================
42a1ad43;Matthew Johnson;2019-05-19 12:44:51 -0700;change dtype promotion behavior for jit-invariance
Here are two desiderata for jax.numpy dtype promotion behavior:
1. follow what NumPy does
2. be invariant to `@jit`

The latter is much more important, so whenever the two are in tension we
prefer the latter. (Also we already can't do a perfect job following
what NumPy does, e.g. around its value-dependent dtype promotion logic.)

Issue #732 showed our code had a special behavior that essentially
handled a case of the former desideratum but also broke the latter. #732
also showed us (again) that our tests really should cover Python
scalars.

In summary, in this commit:
* revise jax.numpy dtype promotion behavior to be invariant to `@jit`
* add Python scalar types to lax_numpy tests
* simplify and update kron implementation to fix dtype issues

==

jax/lax/lax.py
jax/numpy/lax_numpy.py
jax/scipy/special.py
jax/test_util.py
tests/lax_numpy_test.py
tests/lax_test.py
==================
0d066c0a;Roy Frostig;2019-05-17 16:19:11 -0700;Merge branch 'master' into parallelize

==
==================
bb5cbaab;Matthew Johnson;2019-05-17 13:56:39 -0700;catch pmap num_devices errors at compile time too

==

jax/interpreters/pxla.py
==================
7c348588;Dougal Maclaurin;2019-05-17 16:54:27 -0400;Fix typo in BatchTrace.post_process_call

==

jax/interpreters/batching.py
==================
5afc3660;Matthew Johnson;2019-05-17 13:37:43 -0700;bump version number for pypi

==

jax/version.py
==================
ed1ce34d;Matthew Johnson;2019-05-17 13:37:25 -0700;Merge pull request #730 from google/issue728
fix np.eye(N) bug for N > 1000, fix DeviceConstant repr bug, add tests
==
==================
2f645dd3;Matthew Johnson;2019-05-17 13:24:06 -0700;remove one lax parallel op from sphinx docs

==

docs/jax.lax.rst
==================
38750d33;Matthew Johnson;2019-05-17 13:10:33 -0700;Merge pull request #729 from google/pmap-improvements
improve documetnation of lax parallel operators
==
==================
3b66c7ea;Matthew Johnson;2019-05-17 13:01:45 -0700;add more tests that would have caught #728

==

tests/lax_test.py
==================
b8207cab;Matthew Johnson;2019-05-17 12:48:46 -0700;add test for issue #728

==

tests/lax_numpy_test.py
==================
8f9e4b12;Matthew Johnson;2019-05-17 12:46:11 -0700;BroadcastedIota needs integer type (fixes #728)

==

jax/lax/lax.py
==================
b1fd8e6e;Matthew Johnson;2019-05-17 12:38:45 -0700;add test for DeviceConstant repr

==

jax/lax/lax.py
tests/lax_test.py
==================
9b1af47a;Matthew Johnson;2019-05-17 12:27:09 -0700;improve documetnation of lax parallel operators

==

docs/jax.lax.rst
jax/lax/lax_parallel.py
==================
e3d4213e;Matthew Johnson;2019-05-17 10:56:40 -0700;Merge pull request #727 from google/pmap-improvements
minor pmap improvements: error checking, avoid AllToAll
==
==================
056df10f;Matthew Johnson;2019-05-17 10:28:39 -0700;fix test condition

==

jax/interpreters/pxla.py
==================
f864edf7;Matthew Johnson;2019-05-17 10:25:26 -0700;revise nested pmap gather to CRS-based impl

==

jax/interpreters/pxla.py
jax/lib/xla_bridge.py
==================
dad91933;Matthew Johnson;2019-05-17 09:08:08 -0700;make pmap catch device-count errors (+ tests)

==

jax/interpreters/pxla.py
tests/pmap_test.py
==================
12036017;Matthew Johnson;2019-05-17 08:13:08 -0700;Merge pull request #726 from google/dont-pack-all-outputs
avoid packing leaf outputs for jit/pmap funs
==
==================
1116e984;Matthew Johnson;2019-05-17 08:12:24 -0700;bump min jaxlib vers to 0.1.14 for tests to pass

==

jax/lib/xla_bridge.py
==================
b6031ffd;Matthew Johnson;2019-05-17 07:36:52 -0700;avoid packing leaf outputs for jit/pmap funs

==

jax/api.py
jax/api_util.py
==================
751ca102;Matthew Johnson;2019-05-16 15:35:40 -0700;bump version for pypi

==

jax/version.py
==================
84aaf29c;Matthew Johnson;2019-05-16 15:34:02 -0700;update minimum jaxlib version check to 0.1.13

==

jax/lib/xla_bridge.py
==================
ab23bf6e;Matthew Johnson;2019-05-16 15:02:49 -0700;bump version for pypi

==

jax/version.py
==================
5d1c0145;Skye Wanderman-Milne;2019-05-02 17:39:21 -0700;Initial FFT support.
This change creates a new fft primitive in lax, and uses it to implement numpy's np.fft.fftn function.

Not-yet-implemented functionality:
- vmap
- 's' argument of fftn
- other numpy np.fft functions

Resolves #505.

==

docs/jax.lax.rst
docs/jax.numpy.rst
jax/lax/__init__.py
jax/lax/lax_fft.py
jax/numpy/fft.py
tests/fft_test.py
==================
c54ba844;Matthew Johnson;2019-05-16 11:20:58 -0700;Merge pull request #721 from google/update-jaxlib
update jaxlib references to 0.1.15
==
==================
b68ed278;Matthew Johnson;2019-05-16 10:32:28 -0700;fix randint docstring

==

jax/random.py
==================
fc226dab;Matthew Johnson;2019-05-16 10:20:37 -0700;update jaxlib references to 0.1.15

==

README.md
jax/lib/xla_bridge.py
notebooks/XLA_in_Python.ipynb
notebooks/gufuncs.ipynb
notebooks/maml.ipynb
notebooks/neural_network_and_data_loading.ipynb
notebooks/neural_network_with_tfds_data.ipynb
notebooks/quickstart.ipynb
tests/lax_numpy_test.py
==================
fb122540;Matthew Johnson;2019-05-16 07:18:42 -0700;update jaxlib version number

==

jaxlib/version.py
==================
96ea32d4;Matthew Johnson;2019-05-16 07:07:43 -0700;update xla

==

WORKSPACE
==================
60ef9293;Matthew Johnson;2019-05-15 22:03:23 -0700;Merge pull request #710 from rohan-anil/master
Adagrad optimizer 
==
==================
3b7a617e;Matthew Johnson;2019-05-15 21:58:05 -0700;update xla

==

WORKSPACE
==================
c779e495;Matthew Johnson;2019-05-15 21:30:39 -0700;fix typo in build_jaxlib_wheels_macos.sh

==

build/build_jaxlib_wheels_macos.sh
==================
0e6aa3c4;Matthew Johnson;2019-05-15 08:27:02 -0700;Merge pull request #718 from google/pmap-docs
Add pmap docstring
==
==================
52a2fb32;Matthew Johnson;2019-05-15 08:24:47 -0700;typo fixes in pmap docstring
Co-authored-by: Peter Hawkins <phawkins@google.com>

==

jax/api.py
==================
d1994716;Matthew Johnson;2019-05-15 08:21:12 -0700;add pmap to sphinx docs
Co-authored-by: Peter Hawkins <phawkins@google.com>

==

docs/jax.rst
==================
38c6a8e8;Matthew Johnson;2019-05-15 08:13:30 -0700;add pmap docstring
Co-authored-by: Peter Hawkins <phawkins@google.com>

==

jax/api.py
==================
be3358c2;Peter Hawkins;2019-05-15 11:06:51 -0400;Merge pull request #717 from hawkinsp/docs
Add some missing special functions to the documentation.
==
==================
8f461d26;Peter Hawkins;2019-05-15 09:54:24 -0400;Add some missing special functions to the documentation.

==

docs/jax.scipy.rst
==================
d9dc23a2;Peter Hawkins;2019-05-15 09:42:36 -0400;Reenable some indexing tests that now pass.

==

tests/lax_numpy_indexing_test.py
==================
bdb54e28;Peter Hawkins;2019-05-14 15:35:23 -0400;Update XLA build.

==

WORKSPACE
==================
eef97b6f;Peter Hawkins;2019-05-14 21:01:53 -0400;Merge pull request #713 from hawkinsp/master
Expose jax.tree_util in the JAX docs.
==
==================
8c2c1a2e;Peter Hawkins;2019-05-14 21:00:27 -0400;Expose jax.tree_util in the JAX docs.

==

docs/jax.rst
docs/jax.tree_util.rst
==================
a08f7ad5;Rohan Anil;2019-05-13 20:36:45 -0700;Adagrad optimizer

==

jax/experimental/optimizers.py
tests/optimizers_test.py
==================
6121ddfb;Peter Hawkins;2019-05-13 20:36:12 -0400;Merge pull request #707 from hawkinsp/master
Implement np.linalg.eig on CPU.
==
==================
c1dbeb0f;Peter Hawkins;2019-05-13 20:18:23 -0400;Merge pull request #708 from hawkinsp/long
Add support for 'long' in Python 2 mode to xla_bridge.py.
==
==================
696ef7ab;Peter Hawkins;2019-05-13 19:53:50 -0400;Incorporate review comments.

==

jax/lax_linalg.py
tests/linalg_test.py
==================
6e9683f9;Peter Hawkins;2019-05-13 19:43:48 -0400;Add numpy.longlong to set of known constant types.

==

jax/lib/xla_bridge.py
==================
62f4123b;Peter Hawkins;2019-05-13 17:07:49 -0400;Add a test for long constant handling.

==

tests/lax_test.py
==================
b1cd2640;Peter Hawkins;2019-05-13 16:48:19 -0400;Add support for 'long' in Python 2 mode to xla_bridge.py.

==

jax/lib/xla_bridge.py
==================
29b1a30e;Peter Hawkins;2019-05-13 16:35:32 -0400;Fix copy-and-paste comment.

==

jaxlib/lapack.pyx
==================
7e3295eb;Peter Hawkins;2019-05-13 16:02:02 -0400;Add np.linalg.eig to the documentation.

==

docs/jax.numpy.rst
==================
a96944eb;Peter Hawkins;2019-05-13 15:59:58 -0400;Implement np.linalg.eig on CPU.
Fixes #639.

==

jax/lax_linalg.py
jax/numpy/linalg.py
jaxlib/lapack.pyx
tests/linalg_test.py
==================
8c8314f7;Peter Hawkins;2019-05-13 15:49:24 -0400;Merge pull request #706 from hawkinsp/execute
Remove option to skip checks on Execute().
==
==================
38b3859c;Peter Hawkins;2019-05-13 15:47:40 -0400;Remove option to skip checks on Execute(). Ensure arguments to ExecuteReplicated() are a list instead of an iterator.
Change in preparation for removing Python wrappers around Executable.

==

jax/interpreters/pxla.py
jax/interpreters/xla.py
==================
c2369ce3;Peter Hawkins;2019-05-13 14:46:35 -0400;Add lax.scan to docs.

==

docs/jax.lax.rst
==================
dff8e60f;Matthew Johnson;2019-05-13 10:39:34 -0700;fix typo unkown -> unknown

==

jax/lax/lax_control_flow.py
==================
29629931;Matthew Johnson;2019-05-13 10:26:09 -0700;Merge pull request #704 from google/differentiable-scan
Differentiable scan!
==
==================
3c04dedc;Matthew Johnson;2019-05-13 09:10:11 -0700;scan cleanup
Co-authored-by: Dougal Maclaurin <dougalm@google.com>

==

jax/interpreters/partial_eval.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
jax/scan.py
==================
d27bc0a1;Matthew Johnson;2019-05-13 08:48:13 -0700;add literals to jaxprs
Co-authored-by: Dougal Maclaurin <dougalm@google.com>

==

jax/core.py
jax/interpreters/ad.py
jax/interpreters/partial_eval.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
jax/lax/lax_control_flow.py
==================
3ba51ef6;Peter Hawkins;2019-05-12 09:26:44 -0400;Merge pull request #703 from hawkinsp/master
Revert to requiring Bazel 0.24 for JAX builds.
==
==================
5599f473;Peter Hawkins;2019-05-12 09:25:10 -0400;Revert to requiring Bazel 0.24 for JAX builds.
It turns out TF does not fully support 0.25 yet.

Add a check for a maximum bazel version to the build script.

Fixes #702.

==

build/build.py
==================
6e9718a2;Matthew Johnson;2019-05-11 13:28:47 -0700;add pretty-printing to TypedJaxpr

==

jax/core.py
==================
65202821;Matthew Johnson;2019-05-11 10:45:14 -0700;improve core.typed_jaxpr arg typechecks

==

jax/api.py
jax/core.py
==================
98ed8731;Matthew Johnson;2019-05-11 09:29:12 -0700;remove unneeded packs from scan tests

==

tests/lax_control_flow_test.py
==================
4fcd96f9;Matthew Johnson;2019-05-10 22:07:54 -0700;make tests pass with skip_checks = False

==

jax/core.py
jax/lax_linalg.py
==================
29e67f01;Matthew Johnson;2019-05-10 15:52:12 -0700;scan bug fixed, other cleanup

==

jax/core.py
jax/interpreters/ad.py
jax/interpreters/partial_eval.py
jax/lax/lax_control_flow.py
tests/lax_control_flow_test.py
==================
78c80477;Matthew Johnson;2019-05-10 14:24:15 -0700;fix typo in pmap test

==

tests/pmap_test.py
==================
5cfa1801;Matthew Johnson;2019-05-10 14:00:21 -0700;fix things we broke on the path to scan

==

jax/core.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
tests/call_initial_test.py
==================
5c300f6c;Matthew Johnson;2019-05-10 13:27:26 -0700;Merge pull request #690 from google/collective-permute
add collectives: allreduce min/max, permute
==
==================
134ce27f;Matthew Johnson;2019-05-10 13:26:51 -0700;sketch out ppermute transpose rule, untested

==

jax/lax/lax_parallel.py
==================
5be03cdf;Matthew Johnson;2019-05-10 13:23:20 -0700;Merge pull request #689 from google/improve-prng-shape-errors
improve jax.random shape error messages
==
==================
d05a5259;Peter Hawkins;2019-05-10 16:23:06 -0400;Merge pull request #699 from hawkinsp/master
Implement eigh batching.
==
==================
8e16b7cd;Peter Hawkins;2019-05-10 15:45:47 -0400;Disable eigh batching test until Jaxlib 0.1.15 is released. Enable QR batching test.

==

tests/linalg_test.py
==================
07bf5096;Matthew Johnson;2019-05-10 12:27:15 -0700;make jtu.skip_on_devices read jax_platform_name
fixes #696

==

jax/lib/xla_bridge.py
jax/test_util.py
==================
c1f01222;Matthew Johnson;2019-05-10 12:27:14 -0700;generalize pmap collective-permute tests

==

tests/pmap_test.py
==================
76a26de4;Peter Hawkins;2019-05-10 15:15:38 -0400;Implement eigh batching.
Fixes #693.

==

jax/lax_linalg.py
jaxlib/lapack.pyx
tests/linalg_test.py
==================
840c6607;Matthew Johnson;2019-05-10 10:18:37 -0700;refine scan test granularity

==

tests/lax_control_flow_test.py
==================
48811fbb;Matthew Johnson;2019-05-10 09:48:51 -0700;fix join_pvals bug from cond
Co-authored-by: Dougal Maclaurin <dougalm@google.com>

==

jax/interpreters/partial_eval.py
tests/lax_control_flow_test.py
==================
620f63df;Peter Hawkins;2019-05-10 12:06:24 -0400;Merge pull request #697 from hawkinsp/master
Use DeviceOrdinals method rather than accessing Computation._device_o…
==
==================
a300319f;Matthew Johnson;2019-05-10 08:58:05 -0700;add lattice instantiate-at logic, scan works!
Co-authored-by: Dougal Maclaurin <dougalm@google.com>

==

jax/interpreters/ad.py
jax/interpreters/partial_eval.py
jax/interpreters/xla.py
jax/lax/lax_control_flow.py
tests/lax_control_flow_test.py
==================
946f8674;Peter Hawkins;2019-05-10 11:54:22 -0400;Merge pull request #698 from hawkinsp/build
Fix build with Bazel 0.25.
==
==================
7f9e1809;Peter Hawkins;2019-05-10 11:53:15 -0400;Fix build with Bazel 0.25. Update minimum Bazel version to 0.25.0.

==

WORKSPACE
build/build.py
==================
60918077;Peter Hawkins;2019-05-10 11:38:15 -0400;Use DeviceOrdinals method rather than accessing Computation._device_ordinals directly.

==

jax/interpreters/pxla.py
==================
643c26fd;Matthew Johnson;2019-05-10 08:20:40 -0700;flip lattice conventions to confuse our enemies
Co-authored-by: Dougal Maclaurin <dougalm@google.com>

==

jax/interpreters/ad.py
jax/interpreters/partial_eval.py
jax/lax/lax_control_flow.py
==================
71e9c36e;Matthew Johnson;2019-05-09 21:58:21 -0700;comment out failing tests (for a moment)

==

tests/lax_control_flow_test.py
==================
360e3975;Matthew Johnson;2019-05-09 07:55:19 -0700;must guarantee progress on lattice...
Co-authored-by: Dougal Maclaurin <dougalm@google.com>

==

jax/core.py
jax/interpreters/xla.py
jax/lax/lax_control_flow.py
tests/lax_control_flow_test.py
==================
085f06e4;Matthew Johnson;2019-05-09 07:23:39 -0700;add some PartialVal invariants
Co-authored-by: Dougal Maclaurin <dougalm@google.com>

==

jax/core.py
jax/interpreters/partial_eval.py
jax/lax/lax_control_flow.py
tests/lax_control_flow_test.py
==================
c4a0c3da;Matthew Johnson;2019-05-09 20:12:25 -0700;bump version for pypi

==

jax/version.py
==================
ae225b2d;Matthew Johnson;2019-05-09 20:11:57 -0700;Merge pull request #692 from google/prng-slow
make static_argnums cache on value when possible
==
==================
5aea10c7;Matthew Johnson;2019-05-09 20:00:24 -0700;make static_argnums cache on value when possible
fixes #691

==

jax/api.py
jax/util.py
==================
37f9c268;Matthew Johnson;2019-05-09 15:46:34 -0700;add collectives: allreduce min/max, permute
Co-authored-by: Peter Hawkins <phawkins@google.com>

==

jax/lax/lax_parallel.py
tests/pmap_test.py
==================
ea8e414a;Matthew Johnson;2019-05-09 11:40:19 -0700;improve jax.random shape error messages

==

jax/random.py
tests/random_test.py
==================
91d9a064;Matthew Johnson;2019-05-08 20:17:52 -0700;Merge pull request #687 from kroq-gar78/average
Implement np.average
==
==================
acaf76c6;Peter Hawkins;2019-05-08 21:26:18 -0400;Fix typo in lapack.pyx.

==

jaxlib/lapack.pyx
==================
582d6541;Peter Hawkins;2019-05-08 21:21:29 -0400;Fix typo in lapack.pyx.
Disable indexing test on GPU.

==

jaxlib/lapack.pyx
tests/lax_numpy_indexing_test.py
==================
e6082d20;Peter Hawkins;2019-05-08 21:18:17 -0400;Add segment_sum to the docs and fix its rendering. Minor doc fixes.

==

docs/jax.experimental.optimizers.rst
docs/jax.ops.rst
jax/ops/scatter.py
==================
9dcf7daa;Peter Hawkins;2019-05-08 21:06:46 -0400;Merge pull request #688 from hawkinsp/master
Changes for compatibility with a upcoming Jaxlib update.
==
==================
c08b9fee;Matthew Johnson;2019-05-08 17:41:36 -0700;remove const_env from check_jaxpr, add scan trans

==

jax/core.py
jax/lax/lax_control_flow.py
tests/lax_control_flow_test.py
==================
367833be;Peter Hawkins;2019-05-08 20:32:24 -0400;Changes for compatibility with a upcoming Jaxlib update.
Shape.abstract_arrays will only accept dtypes, not scalar type objects.
Add long to the set of types known to abstract_arrays in Python 2.
Make api_test.py accepting of long values in shapes.

==

jax/abstract_arrays.py
jax/lax/lax.py
jaxlib/lapack.pyx
tests/api_test.py
==================
25ac1987;Matthew Johnson;2019-05-08 16:27:23 -0700;must handle literals + closure conversion better..

==

jax/interpreters/ad.py
jax/interpreters/partial_eval.py
jax/interpreters/xla.py
tests/lax_control_flow_test.py
==================
54585743;Matthew Johnson;2019-05-08 13:15:21 -0700;tweak scan docstring

==

jax/lax/lax_control_flow.py
==================
a8ebc249;Matthew Johnson;2019-05-08 13:08:05 -0700;tweaks to scan docstring

==

jax/lax/lax_control_flow.py
==================
cdedf452;Matthew Johnson;2019-05-08 11:37:27 -0700;move scan tests into tests/lax_control_flow_test.py

==

jax/lax/lax_control_flow.py
tests/lax_control_flow_test.py
tests/scan_test.py
==================
e19faa7c;Matthew Johnson;2019-05-08 11:25:03 -0700;add scan docstring

==

jax/lax/lax_control_flow.py
tests/lax_control_flow_test.py
==================
787ad882;Matthew Johnson;2019-05-08 10:35:45 -0700;move scan over to lax_control_flow.py

==

jax/initial_style.py
jax/lax/lax_control_flow.py
tests/scan_test.py
==================
92876798;Matthew Johnson;2019-05-08 10:10:17 -0700;fix bugs from merge

==

jax/initial_style.py
jax/interpreters/ad.py
jax/lax/__init__.py
jax/lax/lax_control_flow.py
==================
15d783a8;Matthew Johnson;2019-05-08 10:04:32 -0700;Merge remote-tracking branch 'origin/master' into differentiable-scan

==
==================
444cda49;Matthew Johnson;2019-05-08 08:57:51 -0700;add underscores, rename scan_initial -> scan

==

jax/core.py
jax/initial_style.py
tests/scan_test.py
==================
e736a0a9;Matthew Johnson;2019-05-08 07:50:38 -0700;cleanup: remove call_initial, add xla pat_fmap

==

jax/core.py
jax/initial_style.py
jax/interpreters/ad.py
jax/interpreters/partial_eval.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
==================
4c2ec3e4;Matthew Johnson;2019-05-07 08:52:08 -0700;ship it
Co-authored-by: Dougal Maclaurin <dougalm@google.com>

==

jax/ad_util.py
jax/core.py
jax/initial_style.py
jax/interpreters/ad.py
tests/scan_test.py
==================
0988f6d8;Matthew Johnson;2019-05-01 15:47:01 -0700;pattern unpacking at jaxpr top-level (pair w/ @dougalm)
next step is to handle that new complexity in our jaxpr munging...

Co-authored-by: Dougal Maclaurin <dougalm@google.com>

==

jax/core.py
jax/initial_style.py
jax/interpreters/ad.py
jax/interpreters/partial_eval.py
jax/interpreters/xla.py
tests/scan_test.py
==================
a17f8e4c;Matthew Johnson;2019-04-25 10:43:50 -0700;add jaxpr eqn structured input, transpose progress
Co-authored-by: Dougal Maclaurin <dougalm@google.com>

==

jax/abstract_arrays.py
jax/ad_util.py
jax/core.py
jax/initial_style.py
jax/interpreters/ad.py
jax/interpreters/partial_eval.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
jax/lax.py
==================
1c9035ef;Matthew Johnson;2019-04-24 16:40:29 -0700;start scan transpose, but "nonlinear pack"!!
Co-authored-by: Dougal Maclaurin <dougalm@google.com>

==

jax/core.py
jax/initial_style.py
tests/scan_test.py
==================
67368230;Matthew Johnson;2019-04-23 09:15:16 -0700;victory! patial eval of scan (+ linearize!)
Co-authored-by: Dougal Maclaurin <dougalm@google.com>

==

jax/abstract_arrays.py
jax/core.py
jax/initial_style.py
jax/interpreters/partial_eval.py
jax/scan.py
tests/scan_test.py
==================
63ebb9a2;Matthew Johnson;2019-04-18 09:00:11 -0700;refactored partial_eval_jaxpr2
Co-authored-by: Dougal Maclaurin <dougalm@google.com>

==

jax/initial_style.py
jax/interpreters/ad.py
jax/interpreters/partial_eval.py
tests/scan_test.py
==================
d03cdc63;Matthew Johnson;2019-04-18 07:19:04 -0700;introduce typedjaxpr to carry around literals etc
Co-authored-by: Dougal Maclaurin <dougalm@google.com>

==

jax/core.py
jax/initial_style.py
jax/interpreters/ad.py
jax/interpreters/partial_eval.py
tests/scan_test.py
==================
0a20a9f7;Matthew Johnson;2019-04-11 14:50:58 -0700;progress on scan partial_eval
Co-authored-by: Dougal Maclaurin <dougalm@google.com>

==

jax/initial_style.py
jax/interpreters/partial_eval.py
tests/scan_test.py
==================
4e2edb5a;Matthew Johnson;2019-04-10 09:42:17 -0700;wow that went well
Co-authored-by: Dougal Maclaurin <dougalm@google.com>

==

jax/initial_style.py
jax/interpreters/ad.py
tests/scan_test.py
==================
9a22d2eb;Matthew Johnson;2019-04-10 08:26:27 -0700;about to embark on scan jvp for the last time
Co-authored-by: Dougal Maclaurin <dougalm@google.com>

==

jax/initial_style.py
jax/interpreters/ad.py
tests/scan_test.py
==================
836a71ef;Matthew Johnson;2019-04-09 08:45:34 -0700;improved initial transforms, call!
Co-authored-by: Dougal Maclaurin <dougalm@google.com>

==

jax/initial_style.py
jax/interpreters/ad.py
jax/interpreters/partial_eval.py
jax/lax.py
tests/scan_test.py
==================
27dede72;Matthew Johnson;2019-04-08 09:17:45 -0700;fixed point!!!!
Co-authored-by: Dougal Maclaurin <dougalm@google.com>

==

jax/initial_style.py
jax/interpreters/ad.py
==================
b208c49c;Matthew Johnson;2019-04-08 08:04:06 -0700;minor fixes, will revise jvp_jaxpr
Co-authored-by: Dougal Maclaurin <dougalm@google.com>

==

jax/initial_style.py
tests/scan_test.py
==================
97628d14;Matthew Johnson;2019-04-08 07:42:54 -0700;scan impl works, about to change jvp_jaxpr
Co-authored-by: Dougal Maclaurin <dougalm@google.com>

==

jax/initial_style.py
tests/call_initial_test.py
tests/scan_test.py
==================
b60eb29b;Matthew Johnson;2019-04-05 19:44:38 -0700;call_initial_test passes!
Co-authored-by: Dougal Maclaurin <dougalm@google.com>

==

jax/initial_style.py
jax/interpreters/partial_eval.py
temp.py
==================
2be64eb5;Matthew Johnson;2019-04-05 12:02:24 -0700;scan pairing w/ dougalm
Co-authored-by: Dougal Maclaurin <dougalm@google.com>

==

jax/interpreters/partial_eval.py
temp.py
==================
1d54d37f;Dougal Maclaurin;2019-04-01 16:03:56 -0400;Started building jaxpr-to-jaxpr "initial-style" versions of each transformation (that internally wrap the final style versions).
Co-authored-by: Dougal Maclaurin <dougalm@google.com>

==

jax/initial_style.py
jax/interpreters/ad.py
jax/interpreters/partial_eval.py
tests/call_initial_test.py
==================
39f18187;Dougal Maclaurin;2019-03-27 17:16:54 -0400;Progress on scan partial eval
Co-authored-by: Dougal Maclaurin <dougalm@google.com>

==

jax/interpreters/partial_eval.py
jax/scan.py
tests/scan_test.py
==================
42d84158;Matthew Johnson;2019-03-26 15:42:52 -0700;add harder scan test case
Co-authored-by: Dougal Maclaurin <dougalm@google.com>

==

tests/scan_test.py
==================
4be3e077;Matthew Johnson;2019-03-26 15:33:47 -0700;un-comment scan_test.py
Co-authored-by: Dougal Maclaurin <dougalm@google.com>

==

tests/scan_test.py
==================
7c86d60b;Matthew Johnson;2019-03-26 15:32:45 -0700;do some zip* on scan_reference for consistency
Co-authored-by: Dougal Maclaurin <dougalm@google.com>

==

jax/scan.py
tests/scan_test.py
==================
14d0c8ed;Matthew Johnson;2019-03-26 15:27:16 -0700;one more zip* needed on _scan_jvp
Co-authored-by: Dougal Maclaurin <dougalm@google.com>

==

jax/scan.py
==================
4ef154a3;Aditya Vaidya;2019-05-07 02:17:42 -0500;Fixes, and skip test if ZeroDivisionError

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
3468e87f;Aditya Vaidya;2019-04-28 15:00:11 -0500;Average fixes. Doesn't work for non-empty shapes

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
725a4695;Aditya Vaidya;2019-04-25 00:56:45 -0500;Started work on np.average

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
9788a358;Matthew Johnson;2019-05-07 15:50:22 -0700;bump version for pypi, leave DeviceTuples off

==

jax/experimental/optimizers.py
jax/version.py
tests/optimizers_test.py
==================
0ccf7cf6;Matthew Johnson;2019-05-07 15:46:08 -0700;Merge pull request #684 from google/device-tuples
fix some DeviceTuples unpacking issues, re-enable in optimizers
==
==================
84327c13;Peter Hawkins;2019-05-07 17:01:13 -0400;Merge pull request #685 from hawkinsp/master
Fix type mismatch for nan_to_num for 64-bit types. Fixes #683.
==
==================
fd53e394;Peter Hawkins;2019-05-07 16:29:45 -0400;Fix test case for nan_to_num when enable_x64 is False.

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
6d77fb7d;Peter Hawkins;2019-05-07 15:05:37 -0400;Fix type mismatch for nan_to_num for 64-bit types. Fixes #683.
Add tests for isinf/isnan/isposinf/isneginf/nan_to_num now that nan/inf are honored on the CPU backend.

Add complex number support to more of the RNG test utils. Add test RNG that emits both nans and infs.

==

jax/numpy/lax_numpy.py
jax/test_util.py
tests/lax_numpy_test.py
==================
9fc47e51;Matthew Johnson;2019-05-06 22:43:46 -0700;use DeviceTuples in optimizer states again

==

jax/experimental/optimizers.py
tests/optimizers_test.py
==================
19e0f8de;Matthew Johnson;2019-05-06 22:43:31 -0700;fix tuple unpacking problems

==

jax/api.py
jax/core.py
==================
535773fe;Matthew Johnson;2019-05-06 18:21:13 -0700;avoid destructuring on len(sharded_device_tuple)

==

jax/interpreters/pxla.py
==================
e1b7cbc7;Matthew Johnson;2019-05-06 16:52:29 -0700;Merge pull request #682 from google/optimizer-utilities
add optimizer utilities (fixes #244 and #681)
==
==================
69030135;Matthew Johnson;2019-05-06 16:18:34 -0700;improve pmap error messages

==

jax/api.py
==================
e7511893;Matthew Johnson;2019-05-06 16:04:48 -0700;add optimizer utilities (fixes #244 and #681)

==

jax/experimental/optimizers.py
tests/optimizers_test.py
==================
b226cbc5;Matthew Johnson;2019-05-06 15:15:52 -0700;Merge pull request #671 from google/index-ops-advanced-indexing
add advanced indexing support to jax index ops
==
==================
3ab52646;Matthew Johnson;2019-05-06 14:37:41 -0700;reviewer-suggested fixes

==

jax/ops/scatter.py
tests/lax_numpy_indexing_test.py
==================
41a7a944;Matthew Johnson;2019-05-04 16:39:39 -0700;fix up the is_advanced_int_indexer logic

==

jax/ops/scatter.py
==================
9adfb806;Matthew Johnson;2019-05-03 17:47:40 -0700;add advanced indexing support to jax index ops
fixes #658

This commit adds advanced indexing support to jax index operations,
namely index_update and index_add, but does *not* add support for mixed
advanced indexing and slicing. That's left as a NotImplementedError.

This commit also added a segment_sum convenience wrapper.

==

jax/numpy/lax_numpy.py
jax/ops/__init__.py
jax/ops/scatter.py
tests/lax_numpy_indexing_test.py
==================
b5d95f8b;Matthew Johnson;2019-05-06 12:30:22 -0700;skip a test on tpu

==

tests/lax_test.py
==================
eb4ac933;Matthew Johnson;2019-05-06 12:18:55 -0700;Merge pull request #680 from google/disable-devicetuples
temporarily avoid DeviceTuples in optimizer states
==
==================
bf6c15b5;Matthew Johnson;2019-05-06 06:50:15 -0700;update pmap to flatten correctly (was a perf bug)
also temporarily avoid DeviceTuples in optimizer states

==

jax/api.py
jax/core.py
jax/experimental/optimizers.py
tests/optimizers_test.py
==================
5033fe86;Skye Wanderman-Milne;2019-05-06 10:49:35 -0700;Update XLA to pick up nccl performance improvement.

==

WORKSPACE
==================
57ad3746;Peter Hawkins;2019-05-05 15:03:55 -0400;Merge pull request #675 from hawkinsp/master
Implement JVP rule for reduce_prod().
==
==================
68f2cb44;Peter Hawkins;2019-05-05 14:31:46 -0400;Implement JVP rule for reduce_prod().
This is sufficient to compute first-order derivatives of a product reduction (although not second-order derivatives because there is no JVP for reduce-window-prod).

==

jax/lax/lax.py
tests/lax_test.py
==================
8173e671;Peter Hawkins;2019-05-05 13:10:14 -0400;Merge pull request #674 from hawkinsp/master
Disable indexed update tests on GPU to work around LLVM failure.
==
==================
a812f52a;Peter Hawkins;2019-05-05 12:41:07 -0400;Disable indexed update tests on GPU to work around LLVM failure.
Enable some indexing tests that now pass.

==

tests/lax_numpy_indexing_test.py
==================
397eadc1;Matthew Johnson;2019-05-05 09:40:34 -0700;bump version for pypi

==

jax/version.py
==================
2fb43207;Matthew Johnson;2019-05-05 00:04:38 -0700;Merge pull request #666 from sharadmv/svd-jvp
add svd jvp; fixes #508 for low-rank case
==
==================
10fa1f99;Sharad Vikram;2019-05-04 15:48:48 -0700;tests pass with ATOL=1e-1

==

tests/linalg_test.py
==================
2b35b1b5;Sharad Vikram;2019-05-04 15:43:28 -0700;replace .dot with np.dot in svd jvp

==

jax/lax_linalg.py
==================
4c8355a5;Sharad Vikram;2019-05-04 15:05:11 -0700;remove unnecessary hermetian; change ATOL for svd jvp x64 tests

==

jax/lax_linalg.py
tests/linalg_test.py
==================
92e07cce;Sharad Vikram;2019-05-02 20:24:19 -0700;adds TODO for full matrix case

==

jax/lax_linalg.py
==================
f259e913;Sharad Vikram;2019-05-02 20:08:08 -0700;fixes tests for complex numbers

==

jax/lax_linalg.py
==================
e742a260;Sharad Vikram;2019-05-02 17:47:34 -0700;add low-rank svd jvp; fixes one case for #508

==

jax/lax_linalg.py
tests/linalg_test.py
==================
a89fb264;Matthew Johnson;2019-05-04 11:15:54 -0700;fix typo

==

jax/interpreters/pxla.py
==================
21e020e8;Matthew Johnson;2019-05-04 10:45:56 -0700;fix pxla.py _slice to handle ShardedDeviceTuples

==

jax/interpreters/pxla.py
==================
dffc0b76;Matthew Johnson;2019-05-04 08:58:35 -0700;skip a linalg test on gpu/tpu

==

tests/linalg_test.py
==================
60c52f49;Peter Hawkins;2019-05-04 10:22:15 -0400;Merge pull request #670 from hawkinsp/master
Fix incorrect type for eigenvalues in abstract evaluation rule for e…
==
==================
2d6fcf3e;Peter Hawkins;2019-05-04 09:42:01 -0400;Fix incorrect type for eigenvectors in abstract evaluation rule for eigh.

==

jax/lax_linalg.py
tests/linalg_test.py
==================
91986560;Matthew Johnson;2019-05-03 21:47:05 -0700;Merge pull request #665 from google/optimizer-api
revise optimizer api and implementation
==
==================
bed851cc;Peter Hawkins;2019-05-03 21:34:45 -0400;Merge pull request #668 from hawkinsp/master
Bump minimum jaxlib version to 0.1.12.
==
==================
81755104;Peter Hawkins;2019-05-03 21:06:33 -0400;Bump minimum jaxlib version to 0.1.12.
Remove some backward compatibility code.

==

jax/lib/xla_bridge.py
==================
f3264f57;Matthew Johnson;2019-05-03 17:57:17 -0700;reviewer-suggested edits (thanks @skye)

==

jax/experimental/optimizers.py
==================
8b3baf25;Matthew Johnson;2019-05-03 14:43:10 -0700;add sm3 (PAIR w/ @lukaszkaiser and rohananil@)

==

jax/experimental/optimizers.py
tests/optimizers_test.py
==================
f7a954ec;Matthew Johnson;2019-05-03 14:19:49 -0700;fix docstrings

==

jax/experimental/optimizers.py
==================
f4a25cd6;Matthew Johnson;2019-05-03 13:23:12 -0700;add some documentation to optimizers.py

==

jax/experimental/optimizers.py
==================
642d2dc8;Matthew Johnson;2019-05-03 12:37:14 -0700;revies optimizers api, fix misc bugs
* add more optimizers numerical tests
* update examples and readme with new optimziers api
* add device_values parameter to xla_call
* change optimizers.py to flatten trees and subtrees
* remove tree_map2, tree_multimap2, tree_mimomap, tree_prefixmap
* add optimizer tests: DeviceTuples and error msgs
* make the device_values arg to jit private

==

README.md
examples/advi.py
examples/differentially_private_sgd.py
examples/kernel_lsq.py
examples/mnist_classifier.py
examples/mnist_vae.py
examples/resnet50.py
examples/spmd_mnist_classifier_fromscratch.py
jax/api.py
jax/core.py
jax/experimental/optimizers.py
jax/interpreters/ad.py
jax/interpreters/batching.py
jax/interpreters/parallel.py
jax/interpreters/partial_eval.py
jax/interpreters/xla.py
jax/test_util.py
jax/tree_util.py
notebooks/maml.ipynb
tests/optimizers_test.py
==================
efe99c8a;Matthew Johnson;2019-05-03 12:32:16 -0700;Merge pull request #664 from google/device-tuples
Add lazy device-persistent JaxTuples (DeviceTuples)
==
==================
f95f1c8d;Matthew Johnson;2019-05-03 12:01:12 -0700;fix bugs, make tests pass with skip_checks = False

==

jax/core.py
jax/interpreters/partial_eval.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
==================
15a4554f;Matthew Johnson;2019-05-03 11:39:37 -0700;flatten out pytrees in jit at the api.py level

==

jax/api.py
jax/api_util.py
==================
3d6d678c;Matthew Johnson;2019-05-03 08:46:21 -0700;xla_client.make_tuple gets backend

==

jax/lib/xla_bridge.py
==================
11aa1a58;Matthew Johnson;2019-05-03 08:38:42 -0700;Merge branch 'master' into device-tuples

==
==================
8e96e2f6;Matthew Johnson;2019-05-03 08:24:24 -0700;revert incorrect change to core.valid_jaxtype

==

jax/core.py
==================
7fc3f3f7;Matthew Johnson;2019-05-03 08:14:03 -0700;fix legacy numpy issue with DeviceArray.__repr__

==

jax/interpreters/xla.py
tests/api_test.py
==================
7c5d6839;Matthew Johnson;2019-05-02 22:13:49 -0700;revise sharded result handling, misc cleanup

==

jax/api.py
jax/core.py
jax/interpreters/batching.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
tests/api_test.py
tests/pmap_test.py
==================
0564c776;Matthew Johnson;2019-05-02 19:36:43 -0700;Merge pull request #667 from google/fix-repr
fix DeviceArray.__repr__ for complex dtypes, test
==
==================
ddd29e72;Matthew Johnson;2019-05-02 19:27:22 -0700;fix DeviceArray.__repr__ for complex dtypes, test
c.f. #666

==

jax/numpy/lax_numpy.py
tests/api_test.py
==================
3e302077;Skye Wanderman-Milne;2019-05-02 18:05:58 -0700;Update XLA to expose FFT in Python client.

==

WORKSPACE
==================
a5c76fb2;Skye Wanderman-Milne;2019-05-02 15:19:45 -0700;Increment Jaxlib version to 0.1.14.

==

jaxlib/version.py
==================
87a150e5;Matthew Johnson;2019-05-02 08:02:01 -0700;add a tree_util.py module-level docstring

==

jax/api.py
jax/tree_util.py
==================
b9e6fb3c;Peter Hawkins;2019-05-02 09:43:45 -0400;Update XLA release to fix Mac build problem.

==

WORKSPACE
==================
21118d0d;Matthew Johnson;2019-05-01 19:45:17 -0700;make isinstance(sharded_device_tup, JaxTuple) true

==

jax/interpreters/pxla.py
==================
9cb3f0ef;Matthew Johnson;2019-05-01 19:43:55 -0700;fix typo

==

jax/interpreters/pxla.py
==================
00a43e72;Matthew Johnson;2019-05-01 19:36:32 -0700;comment that DeviceValues don't get canonicalized

==

jax/interpreters/xla.py
==================
3f638d3a;Matthew Johnson;2019-05-01 19:32:48 -0700;make JaxTuple not subclass tuple, add docstrings

==

jax/core.py
jax/interpreters/batching.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
tests/api_test.py
==================
cfb5345f;Matthew Johnson;2019-05-01 15:00:45 -0700;fix bugs in ShardedDeviceArray.__init__

==

jax/interpreters/pxla.py
==================
1275370c;Matthew Johnson;2019-05-01 14:30:08 -0700;fix JaxTuple branch of xla.device_put_many

==

jax/interpreters/xla.py
==================
a8d4db07;Matthew Johnson;2019-05-01 14:17:25 -0700;improve xla.device_put on JaxTuples

==

jax/interpreters/xla.py
jax/lib/xla_bridge.py
==================
461ba308;Peter Hawkins;2019-04-30 22:00:11 -0400;Merge pull request #661 from hawkinsp/master
Add support for batched LU decomposition.
==
==================
00cb31df;Peter Hawkins;2019-04-30 21:28:36 -0400;Disable LU batching test until we make a Jaxlib release.

==

tests/linalg_test.py
==================
90ce26be;Peter Hawkins;2019-04-30 20:57:44 -0400;Fix handling of JaxTuples everywhere.

==

jax/lax_linalg.py
==================
e533ad3a;Peter Hawkins;2019-04-30 20:47:31 -0400;Disable Beta and T tests on TPU due to slow compilation times.

==

tests/random_test.py
==================
055521fa;Matthew Johnson;2019-04-24 21:31:15 -0700;add DeviceTuples for device-persistent tuples

==

jax/core.py
jax/interpreters/batching.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
jax/lax/lax.py
jax/test_util.py
==================
ee9d148f;Matthew Johnson;2019-04-24 18:16:31 -0700;avoid super-linear recursive behavior in batching

==

jax/interpreters/batching.py
==================
2f9ebf5e;Matthew Johnson;2019-04-24 10:26:29 -0700;add docstring to xla.device_put

==

jax/interpreters/xla.py
==================
a0fcb3fb;Matthew Johnson;2019-04-30 16:56:03 -0700;Merge pull request #660 from Bharat123rox/npfix
Implemented np.fix
==
==================
761c62e2;Peter Hawkins;2019-04-30 19:19:45 -0400;Disable two random tests that are slow to compile on CPU. Enable some tests that pass on TPU.

==

tests/random_test.py
==================
cd41afca;Matthew Johnson;2019-04-30 16:15:31 -0700;Merge pull request #663 from sharadmv/lax-numpy-tile
np.tile implementation
==
==================
3fe7eec3;Peter Hawkins;2019-04-30 19:08:11 -0400;Disable min/max reduce-window gradients test on TPU.

==

tests/lax_test.py
==================
978d8387;Peter Hawkins;2019-04-30 18:48:09 -0400;Add test for QR batching.

==

jax/lax_linalg.py
tests/linalg_test.py
==================
ea634895;Sharad Vikram;2019-04-30 13:31:34 -0700;added `tile` to docs

==

docs/jax.numpy.rst
==================
c067ebfc;Matthew Johnson;2019-04-30 13:22:58 -0700;Merge pull request #662 from google/issue649
instantiate consts when tracing while's body_fun
==
==================
d92fb069;Sharad Vikram;2019-04-30 12:56:48 -0700;add lax numpy.tile implementation

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
64bcaa4c;Matthew Johnson;2019-04-30 11:52:33 -0700;fix up other trace_to_subjaxpr call sites

==

jax/interpreters/partial_eval.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
==================
75ec03e2;Matthew Johnson;2019-04-30 10:48:34 -0700;instantiate consts when tracing while's body_fun
fixes #649

The instantiate-consts logic in partial_eval.py is originally by
@dougalm in 13fa383 (on the differentiable-scan branch).

==

jax/interpreters/partial_eval.py
jax/lax/lax_control_flow.py
tests/lax_control_flow_test.py
==================
97b5fc98;Matthew Johnson;2019-04-30 10:33:27 -0700;fix incorrectly-pasted line

==

tests/lax_numpy_test.py
==================
e1d2de28;Peter Hawkins;2019-04-30 13:19:34 -0400;Add support for batched LU decomposition.
Fixes #655.

==

jax/lax_linalg.py
jaxlib/lapack.pyx
tests/linalg_test.py
==================
69d12111;Bharat123rox;2019-04-30 22:33:25 +0530;Implemented np.fix

==

docs/jax.numpy.rst
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
0f495b65;Peter Hawkins;2019-04-30 09:44:59 -0700;Merge pull request #659 from hawkinsp/master
Add batching rule for dynamic_update_slice.
==
==================
6c7dde59;Matthew Johnson;2019-04-30 09:19:48 -0700;move isclose test behind numpy version check

==

.travis.yml
tests/lax_numpy_test.py
==================
6b4c74b1;Peter Hawkins;2019-04-30 11:48:53 -0400;Add batching rule for dynamic_update_slice.

==

jax/lax/lax.py
tests/batching_test.py
==================
da98c52e;Peter Hawkins;2019-04-30 07:18:42 -0700;Merge pull request #657 from hawkinsp/master
Update API documentation to help clarify https://github.com/google/ja…
==
==================
a18d1971;Peter Hawkins;2019-04-30 07:08:46 -0700;Merge pull request #640 from kroq-gar78/atleast_nd-scalars
Fix 'atleast_{1,2,3}d' for scalars
==
==================
7a5dcad5;Matthew Johnson;2019-04-30 07:04:52 -0700;Merge pull request #656 from Bharat123rox/64bit
Add single precision gotcha to README.md
==
==================
43a31d01;Peter Hawkins;2019-04-30 10:04:36 -0400;Update API documentation to help clarify https://github.com/google/jax/issues/648 .

==

jax/api.py
==================
b0f37cce;Matthew Johnson;2019-04-30 07:04:10 -0700;Merge pull request #651 from ecreager/master
Add Differentially Private SGD example
==
==================
948def81;Elliot Creager;2019-04-30 09:26:16 -0400;docstring touchups

==

examples/differentially_private_sgd.py
==================
b4d54882;Peter Hawkins;2019-04-30 09:19:56 -0400;Update XLA release.
Includes https://github.com/tensorflow/tensorflow/commit/cc96aa6e374f31270d98148a521a4b8985532126 which fixes #646.

==

WORKSPACE
==================
b0882988;Bharat123rox;2019-04-30 15:19:21 +0530;Add single precision gotcha to README.md

==

README.md
==================
0e7a8b25;Roy Frostig;2019-04-29 14:08:21 -0700;Merge branch 'master' into parallelize

==
==================
6d9f465b;Elliot Creager;2019-04-29 16:26:18 -0400;Add Differentially Private SGD example

==

examples/differentially_private_sgd.py
==================
801f0824;Aditya Vaidya;2019-04-29 02:57:02 -0500;Added test for literals in 'atleast_<n>d'

==

tests/lax_numpy_test.py
==================
b4ea0a9b;Roy Frostig;2019-04-26 17:29:30 -0700;parallelization rule for lax.slice

==

jax/lax/lax.py
==================
9e87bb8a;Roy Frostig;2019-04-26 17:26:28 -0700;pass hidden axis size to parallelization rules

==

jax/interpreters/parallel.py
jax/lax/lax.py
jax/lax/lax_parallel.py
==================
5edb2367;Peter Hawkins;2019-04-26 16:43:51 -0700;Merge pull request #645 from hawkinsp/master
Perform division in `mean` using the target dtype
==
==================
c47cca20;Peter Hawkins;2019-04-26 15:51:45 -0700;Perform division in `mean` using the target dtype, rather than performing a `true_divide` and then casting back to the correct type.

==

jax/numpy/lax_numpy.py
==================
df74b51c;Peter Hawkins;2019-04-26 08:29:36 -0700;Update Jaxlib version in notebooks and readme.

==

README.md
notebooks/XLA_in_Python.ipynb
notebooks/autodiff_cookbook.ipynb
notebooks/gufuncs.ipynb
notebooks/maml.ipynb
notebooks/neural_network_and_data_loading.ipynb
notebooks/neural_network_with_tfds_data.ipynb
notebooks/quickstart.ipynb
==================
21b018b4;Peter Hawkins;2019-04-25 21:17:57 -0700;Remove explicit cudnn_path from docker script.
Autodetection works fine for a docker build.

==

build/build_wheel_docker_entrypoint.sh
==================
5385ad73;Peter Hawkins;2019-04-25 20:52:49 -0700;Increment Jaxlib version to 0.1.13.

==

jaxlib/version.py
==================
b0fec7c0;Peter Hawkins;2019-04-25 20:52:13 -0700;Merge pull request #643 from hawkinsp/master
Update XLA version.
==
==================
845e46c8;Peter Hawkins;2019-04-25 20:28:24 -0700;Update XLA version to https://github.com/tensorflow/tensorflow/commit/30d0432d3173a86270708a4de164345553478976 to fix build problem.

==

WORKSPACE
==================
f60d927d;Peter Hawkins;2019-04-25 16:19:53 -0700;Update XLA version to include CUDA version check fix and newer XLA. Make specification of CUDA environment variables optional.
Fixes #627.
Fixes #276, although the fix requires a new Jaxlib release.

==

WORKSPACE
build/build.py
==================
40e3056e;Aditya Vaidya;2019-04-25 01:01:02 -0500;Fix 'atleast_<n>d' for scalars

==

jax/numpy/lax_numpy.py
==================
bdeb4ba2;Roy Frostig;2019-04-24 16:59:34 -0700;parallelization rule for lax.pad

==

jax/api.py
jax/lax/lax.py
==================
d4c8c0b1;Roy Frostig;2019-04-24 16:16:34 -0700;Merge branch 'master' into parallelize

==
==================
b2160fdc;Matthew Johnson;2019-04-23 19:15:39 -0700;Merge pull request #638 from google/issue637
update docstrings to fix #637
==
==================
076dd0fd;Matthew Johnson;2019-04-23 18:46:47 -0700;Merge pull request #636 from google/custom-vjps
add support for custom VJP definitions
==
==================
74fb30cd;Matthew Johnson;2019-04-23 18:35:32 -0700;make DeviceArray.__repr__ call onp.array_repr

==

jax/interpreters/xla.py
==================
0cc8d7c2;Matthew Johnson;2019-04-23 18:21:33 -0700;update docstrings to fix #637

==

jax/api.py
==================
85755820;Matthew Johnson;2019-04-23 17:47:28 -0700;add defvjp functions for custom VJPs
c.f. #116, which won't be closed until we add documentation

==

jax/abstract_arrays.py
jax/interpreters/ad.py
jax/interpreters/batching.py
jax/lax/lax.py
tests/api_test.py
==================
1fd077c7;Matthew Johnson;2019-04-23 17:45:58 -0700;Merge pull request #633 from fehiepsi/dirichlet
Implement dirichlet sampler and logpdf
==
==================
910eac8c;Matthew Johnson;2019-04-23 17:07:51 -0700;Merge branch 'master' into dirichlet

==
==================
376ee642;Matthew Johnson;2019-04-23 16:59:40 -0700;Merge pull request #631 from fehiepsi/bernoulli
Implement bernoulli logpmf
==
==================
daf644a1;Matthew Johnson;2019-04-23 16:56:30 -0700;Merge pull request #630 from fehiepsi/fix-t
Add student's t and beta samplers
==
==================
d5efe88d;Matthew Johnson;2019-04-23 11:09:38 -0700;add custom partial eval rules

==

jax/interpreters/partial_eval.py
jax/interpreters/xla.py
==================
8874d7d8;fehiepsi;2019-04-22 11:55:41 -0400;add missing stats.bernoulli file

==

jax/scipy/stats/bernoulli.py
==================
a790436b;fehiepsi;2019-04-22 11:55:02 -0400;add dirichlet sampler

==

jax/random.py
tests/random_test.py
==================
36c4df6f;fehiepsi;2019-04-22 10:24:11 -0400;implement dirichlet pdf

==

jax/scipy/special.py
jax/scipy/stats/dirichlet.py
tests/scipy_stats_test.py
==================
665e72a2;fehiepsi;2019-04-21 21:22:50 -0400;implement bernoulli pmf

==

jax/random.py
jax/scipy/special.py
jax/scipy/stats/__init__.py
tests/random_test.py
tests/scipy_stats_test.py
==================
08808171;fehiepsi;2019-04-21 16:43:18 -0400;add tests

==

jax/random.py
tests/random_test.py
==================
e5ccf053;fehiepsi;2019-04-21 16:25:20 -0400;add beta/t random samplers

==

jax/random.py
jax/scipy/stats/t.py
tests/random_test.py
==================
7671333c;Matthew Johnson;2019-04-20 17:21:32 -0700;Merge pull request #629 from jekbradbury/select-and-scatter-add-vjp
add VJP for `lax._select_and_scatter_add`
==
==================
55d74d86;James Bradbury;2019-04-20 17:06:56 -0700;add VJP for `lax._select_and_gather_add` (3rd-order grad of maxpool)

==

jax/lax/lax.py
tests/lax_test.py
==================
b9402457;James Bradbury;2019-04-20 17:06:35 -0700;add VJP for `lax._select_and_scatter_add` (2nd-order grad of maxpool)

==

jax/lax/lax.py
tests/lax_test.py
==================
9baf42d9;Matthew Johnson;2019-04-18 07:06:16 -0700;Merge pull request #626 from shoyer/broken-error-message
Fix a couple of broken error messages
==
==================
0a3950ef;Stephan Hoyer;2019-04-17 23:10:59 -0700;Fix a couple of broken error messages
flake8 caught these while I was browsing through JAX's source code

==

jax/lax/lax_parallel.py
jax/scipy/linalg.py
==================
df8dacbb;Matthew Johnson;2019-04-17 18:19:06 -0700;Merge pull request #625 from proteneer/atan2_vjp
Implement jvp for atan2
==
==================
bbf0d5c5;Yutong Zhao;2019-04-17 20:54:01 -0400;Add brcast to deal with inconsistent shapes.

==

jax/lax/lax.py
==================
dfd3d933;Yutong Zhao;2019-04-17 19:57:42 -0400;Fix bug in order of y,x in grad of atan2.

==

jax/lax/lax.py
==================
36e5ec21;Yutong Zhao;2019-04-17 19:53:06 -0400;Add jax tests and fix style.

==

jax/lax/lax.py
tests/lax_test.py
==================
60539a26;Yutong Zhao;2019-04-17 18:51:12 -0400;Implement jvp for atan2

==

jax/lax/lax.py
==================
312aff35;Peter Hawkins;2019-04-16 19:56:24 -0400;Merge pull request #617 from hawkinsp/master
Update XLA release.
==
==================
60d71983;Peter Hawkins;2019-04-16 19:29:44 -0400;Update XLA release.
Includes https://github.com/tensorflow/tensorflow/commit/a66de7da15a4a5a4a1b3b8ad528f4d5960bc9195 which fixes #616 but requires a Jaxlib rebuild.

==

WORKSPACE
==================
04b45e40;Peter Hawkins;2019-04-16 10:00:20 -0400;Correct pytest command line.

==

README.md
==================
5da72151;Peter Hawkins;2019-04-16 09:58:26 -0400;Merge pull request #615 from hawkinsp/master
Update README.md to add a quick link banner, and recommend pytest-xdist.
==
==================
f33629c1;Peter Hawkins;2019-04-16 09:47:26 -0400;Update README.md to add a quick link banner, and to recommend pytest-xdist.

==

README.md
==================
c4422227;Peter Hawkins;2019-04-16 09:29:13 -0400;Add lax/*.py to jax library dependencies.
Rename :libjax -> :jax. Leave :libjax as an alias for backward compatibility.

==

jax/BUILD
==================
bc4d1fc0;Peter Hawkins;2019-04-16 09:16:48 -0400;Relax tolerance for eigh test.

==

tests/linalg_test.py
==================
782d6f3b;Matthew Johnson;2019-04-15 12:06:21 -0700;fix tuple/list typo

==

jax/interpreters/pxla.py
==================
637a802e;Peter Hawkins;2019-04-15 12:40:18 -0400;Improve layout of jax.scipy documentation.
Fixes #577, since the set of supported distributions is now relatively easy to see.

==

docs/jax.scipy.rst
==================
40730629;Peter Hawkins;2019-04-15 12:14:41 -0400;Update lax documentation to reflect new code organization.

==

docs/README.md
docs/jax.lax.rst
jax/lax/lax.py
==================
c5a381ed;Matthew Johnson;2019-04-15 09:14:43 -0700;misc test skips

==

tests/lax_numpy_indexing_test.py
tests/random_test.py
==================
909a9db8;Matthew Johnson;2019-04-15 08:13:06 -0700;Merge pull request #614 from google/pyperf2
misc python performance improvements
==
==================
6b5af62b;Matthew Johnson;2019-04-15 07:54:46 -0700;fix broken link in readme

==

README.md
==================
aa5b036d;Matthew Johnson;2019-04-15 07:45:10 -0700;misc python performance improvements

==

jax/abstract_arrays.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
==================
96e37ced;Peter Hawkins;2019-04-15 10:40:58 -0400;Merge pull request #613 from hawkinsp/xla
Update XLA version.
==
==================
304006d1;Peter Hawkins;2019-04-12 17:29:13 -0400;Update XLA version.

==

WORKSPACE
==================
3a633dbd;Matthew Johnson;2019-04-15 07:07:58 -0700;mention lack of windows support in readme (#612)

==

README.md
==================
1bb7c0f6;Matthew Johnson;2019-04-14 19:33:46 -0700;Merge pull request #608 from Squadrick/cbrt
Implement np.cbrt
==
==================
8bcd0afa;Dheeraj Rajaram Reddy;2019-04-14 22:42:52 +0530;Use lax.sign instead of lax.div(x, lax.abs(x))

==

jax/numpy/lax_numpy.py
==================
fd2c0746;Dheeraj Rajaram Reddy;2019-04-13 13:47:05 +0530;Implement np.cbrt

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
9cf6096b;Navneet M Kumar;2019-04-14 06:01:46 +0200;Implement np.diff  (#588)
* Added np.diff

* Added np.diff test

* Added nonzerodim shapes

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
d7096a42;Matthew Johnson;2019-04-13 13:22:45 -0700;make jacrev work w/ complex inputs, update errors (#610)
* make jacrev work w/ complex inputs, update errors

* fix up complex handling in jacfwd and jacrev

==

jax/api.py
tests/api_test.py
==================
d7f623ca;Navneet M Kumar;2019-04-13 18:53:59 +0200;Added np.array_equal (#609)
Added test for np.isrealobj, added np.array_equal

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
f49ab50e;Matthew Johnson;2019-04-13 08:18:57 -0700;expose lax._safe_mul again (c.f. #608)

==

jax/lax/__init__.py
==================
0cf14837;Matthew Johnson;2019-04-12 16:28:40 -0700;make a lax package, revert control flow names (#607)
c.f. #597
pair=skyewm

==

README.md
examples/mnist_vae.py
jax/lax/__init__.py
jax/lax/lax.py
jax/lax/lax_control_flow.py
jax/lax/lax_parallel.py
jax/lax_linalg.py
jax/numpy/lax_numpy.py
jax/numpy/linalg.py
jax/ops/scatter.py
jax/random.py
jax/scipy/linalg.py
jax/scipy/special.py
notebooks/Common_Gotchas_in_JAX.ipynb
tests/batching_test.py
tests/lax_control_flow_test.py
tests/parallel_test.py
tests/pmap_test.py
==================
4f0280fe;Peter Hawkins;2019-04-12 18:59:12 -0400;Merge pull request #605 from hawkinsp/master
Copy pmap arguments to device in parallel.
==
==================
23c3ad17;Peter Hawkins;2019-04-12 17:26:21 -0400;Fix indentation.

==

jax/interpreters/xla.py
==================
ac8de336;Peter Hawkins;2019-04-12 17:11:20 -0400;Add docstring and TODOs.

==

jax/interpreters/xla.py
==================
a3a8e48e;Matthew Johnson;2019-04-12 14:06:01 -0700;Merge pull request #604 from google/issue603
add error checks so that #603 isn't silent fail
==
==================
105e46f3;Skye Wanderman-Milne;2019-04-10 13:00:31 -0700;Factor out control flow from lax.py into lax_control_flow.py.
Also moves control flow tests to lax_control_flow_test.py.

==

README.md
examples/mnist_vae.py
jax/lax.py
jax/lax_control_flow.py
jax/lax_linalg.py
jax/numpy/lax_numpy.py
jax/random.py
notebooks/Common_Gotchas_in_JAX.ipynb
tests/batching_test.py
tests/lax_control_flow_test.py
tests/lax_test.py
==================
849ea87b;Matthew Johnson;2019-04-12 13:29:07 -0700;tree-map the real dtype check in api.py

==

jax/api.py
==================
38d764c4;Peter Hawkins;2019-04-12 16:18:48 -0400;Add a device_put_many() method that copies multiple tensors to accelerator devices in parallel. Use it to copy pmap arguments.

==

jax/interpreters/pxla.py
jax/interpreters/xla.py
jax/lib/xla_bridge.py
==================
aaf50c9f;Matthew Johnson;2019-04-12 12:24:58 -0700;add complex64 to sin/cos tests in lax

==

tests/lax_test.py
==================
18671fa0;Matthew Johnson;2019-04-12 12:01:19 -0700;add error checks so that #603 isn't silent fail

==

jax/api.py
tests/api_test.py
==================
1e6b033c;Peter Hawkins;2019-04-12 12:10:01 -0400;Fix ordering of test cases in linalg_test.py

==

tests/linalg_test.py
==================
8120f48b;Matthew Johnson;2019-04-12 08:58:59 -0700;Merge pull request #551 from fehiepsi/gamma
Add Gamma sampler
==
==================
a355da59;Peter Hawkins;2019-04-12 11:27:32 -0400;Change Travis configuration to use pytest-xdist.
Since the Travis VM is dual core, run two tests in parallel.

==

.travis.yml
==================
0b968515;Peter Hawkins;2019-04-12 11:23:42 -0400;Merge pull request #601 from hawkinsp/master
Test case improvements:
==
==================
ca0d9439;Peter Hawkins;2019-04-12 09:29:46 -0400;Test case improvements: * use numpy.random to select test cases, rather than random. This allows more control over random seeds. Pick a fixed random seed for each test case. * sort types in linalg_test.py so the choice of test cases is deterministic. * use known_flags=True when doing early parsing of flags from parse_flags_with_absl.

==

jax/config.py
jax/test_util.py
tests/linalg_test.py
==================
35e34067;Matthew Johnson;2019-04-12 07:15:41 -0700;Merge branch 'master' into gamma

==
==================
bfdd997f;Matthew Johnson;2019-04-12 07:04:39 -0700;Merge pull request #600 from kashif/patch-1
fixed call to net_init in maml notebook
==
==================
4860f99f;Dr. Kashif Rasul;2019-04-12 11:00:55 +0200;2nd call

==

notebooks/maml.ipynb
==================
c7df1de6;Dr. Kashif Rasul;2019-04-12 10:58:50 +0200;fixed call to net_init in maml notebook

==

notebooks/maml.ipynb
==================
7dab5e02;Matthew Johnson;2019-04-11 21:26:06 -0700;remove the current lax.scan implementation (#599)
fixes #598
==

jax/lax.py
notebooks/Common_Gotchas_in_JAX.ipynb
tests/lax_test.py
==================
c02ae245;Roy Frostig;2019-04-11 13:45:59 -0700;fix reshape parallelization rule when removing all leading size-1 dimensions

==

jax/lax_parallel.py
==================
8a15d57b;Navneet M Kumar;2019-04-11 19:16:55 +0200;Adding np.isrealobj #70 (#594)
* Added np.isrealobj

* Added test for np.isrealobj

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
2fbd341d;Matthew Johnson;2019-04-11 09:12:21 -0700;fix typo

==

tests/lax_test.py
==================
a8afb877;Matthew Johnson;2019-04-11 08:08:31 -0700;Merge pull request #595 from google/jit-kwargs
prevent jit from treating kwargs as static
==
==================
6de4b573;Matthew Johnson;2019-04-11 08:07:32 -0700;improve kwargs test

==

tests/api_test.py
==================
de2a5f72;Matthew Johnson;2019-04-11 06:58:09 -0700;add warning, fix typo in kwargs test and bug

==

jax/api.py
tests/api_test.py
==================
25825982;Matthew Johnson;2019-04-10 22:17:54 -0700;remove assert that fails on python3 map objects

==

jax/linear_util.py
==================
9c2e1c35;Matthew Johnson;2019-04-10 22:09:14 -0700;prevent jit from treating keyword args as static fixes #523

==

jax/api.py
jax/api_util.py
jax/core.py
jax/flatten_util.py
jax/interpreters/ad.py
jax/interpreters/batching.py
jax/interpreters/parallel.py
jax/interpreters/partial_eval.py
jax/interpreters/xla.py
jax/linear_util.py
jax/random.py
tests/api_test.py
tests/parallel_test.py
==================
86f27932;Roy Frostig;2019-04-10 15:41:33 -0700;temporarily work around cyclic module imports

==

jax/api.py
jax/lax.py
jax/lax_parallel.py
==================
5420d4a9;Roy Frostig;2019-04-10 15:34:27 -0700;Merge branch 'master' into parallelize

==
==================
f67c5212;Roy Frostig;2019-04-10 14:24:52 -0700;parallelization rule for ad_util.add_jaxvals

==

jax/lax.py
==================
d5730847;Skye Wanderman-Milne;2019-04-10 14:19:35 -0700;Merge pull request #590 from skye/split_lax
Factor out parallel functionality from lax.py into lax_parallel.py.
==
==================
25278ac7;Skye Wanderman-Milne;2019-04-09 18:28:02 -0700;Factor out parallel functionality from lax.py into lax_parallel.py.

==

jax/lax.py
jax/lax_parallel.py
tests/parallel_test.py
tests/pmap_test.py
==================
c8b06285;Roy Frostig;2019-04-10 11:37:36 -0700;Merge branch 'master' into parallelize

==
==================
7d7dd257;Matthew Johnson;2019-04-10 06:44:26 -0700;Merge pull request #592 from levskaya/tconv2
transposed convolution implementation
==
==================
aee66b5a;Anselm Levskaya;2019-04-10 00:57:02 -0700;comment to trigger travis rebuild

==

tests/stax_test.py
==================
cef4c94c;Anselm Levskaya;2019-04-09 22:59:03 -0700;finish transposed convolution implementation and tests

==

jax/experimental/stax.py
jax/lax.py
tests/lax_test.py
tests/stax_test.py
==================
2efa9a0f;Matthew Johnson;2019-04-09 19:44:19 -0700;Merge pull request #591 from google/skiptest
use SkipTest instead of @skip
==
==================
3e823765;Roy Frostig;2019-04-09 19:09:49 -0700;parallelization rule for lax.broadcast_in_dim

==

jax/lax.py
==================
2e8f6183;Roy Frostig;2019-04-09 19:09:11 -0700;parallelization rule for lax.convert_element_type

==

jax/lax.py
==================
d60cd4ec;Matthew Johnson;2019-04-09 18:59:42 -0700;use SkipTest instead of @skip
nose doesn't like DISABLED_ name prefixes, but dirctly running the
Python file doesn't like @skip.

==

tests/lax_numpy_test.py
tests/lax_test.py
tests/parallel_test.py
==================
797d411e;Anselm Levskaya;2019-04-09 15:06:46 -0700;initial tranpose conv implementation

==

jax/lax.py
tests/lax_test.py
==================
b03649f4;Roy Frostig;2019-04-09 11:41:14 -0700;Merge pull request #589 from google/parallelize
parallelization work-in-progress
==
==================
4c73b18b;Roy Frostig;2019-04-09 10:47:18 -0700;Merge branch 'master' into parallelize

==
==================
b0e96507;Matthew Johnson;2019-04-08 11:24:00 -0700;Merge pull request #586 from navneet-nmk/numpy-assert-generator
Fixed numpy.zeros shape generator error (fixes #459)
==
==================
d42f515c;ayir;2019-04-08 19:15:47 +0200;Fixed numpy.zeros shape generator error

==

jax/numpy/lax_numpy.py
==================
108a2dbb;Matthew Johnson;2019-04-08 09:52:47 -0700;tweak an einsum test

==

tests/lax_numpy_einsum_test.py
==================
03c64af2;Matthew Johnson;2019-04-07 17:50:43 -0700;bump version for pypi

==

jax/version.py
==================
f341d2bb;Matthew Johnson;2019-04-06 16:21:12 -0700;Merge pull request #583 from google/einsum-optimize-kwarg
add 'optimize' kwarg to jax.numpy.einsum
==
==================
46e26a79;Matthew Johnson;2019-04-06 15:02:53 -0700;add a comment about kpmurphy einsum test

==

tests/lax_numpy_einsum_test.py
==================
f4e141d3;Matthew Johnson;2019-04-06 14:42:27 -0700;add 'optimize' kwarg to jax.numpy.einsum

==

jax/numpy/lax_numpy.py
tests/lax_numpy_einsum_test.py
==================
1feaf639;Matthew Johnson;2019-04-06 15:08:22 -0700;comment out failing arange tests

==

tests/lax_numpy_test.py
==================
1fdaedbc;Matthew Johnson;2019-04-06 14:18:10 -0700;bump version for pypi

==

jax/version.py
==================
299977ee;Matthew Johnson;2019-04-06 14:16:22 -0700;exclude examples dir from setup.py find_packages
fixes #582

==

setup.py
==================
2ce7bebc;Matthew Johnson;2019-04-06 13:31:12 -0700;Merge pull request #581 from google/arange-devicearray
make np.arange(N) create lazy const, add arange tests
==
==================
45b3c2fa;Matthew Johnson;2019-04-06 13:07:27 -0700;tweak comments

==

jax/numpy/lax_numpy.py
==================
6ec2eb72;Matthew Johnson;2019-04-06 12:52:47 -0700;make np.arange(N) create lazy const, arange tests

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
3d7edd0e;Matthew Johnson;2019-04-06 11:07:52 -0700;Merge pull request #580 from google/einsum-path
add jax.numpy.einsum_path (fixes #579)
==
==================
1be9abd3;Matthew Johnson;2019-04-06 10:33:18 -0700;add jax.numpy.einsum_path (fixes #579)

==

jax/numpy/lax_numpy.py
tests/lax_numpy_einsum_test.py
==================
027c94da;Matthew Johnson;2019-04-05 12:59:52 -0700;update readme gotchas section

==

README.md
==================
f27844d9;Matthew Johnson;2019-04-05 07:53:03 -0700;bump version for pypi

==

jax/version.py
==================
9818f5aa;Matthew Johnson;2019-04-05 07:51:15 -0700;update maml.ipynb

==

notebooks/maml.ipynb
==================
4e398769;Matthew Johnson;2019-04-05 07:45:09 -0700;Merge pull request #566 from j-towns/jax-random-stax
Use jax.random for stax initialization
==
==================
054d210a;Matthew Johnson;2019-04-04 17:40:48 -0700;fix typo in xla_computation

==

jax/api.py
==================
688f79ca;Matthew Johnson;2019-04-04 13:49:56 -0700;Merge pull request #576 from google/np-reshape-reflects
make np.reshape reflect on argument method
==
==================
31e35b20;Matthew Johnson;2019-04-04 11:25:23 -0700;make np.reshape reflect on argument method
Reshapes should be cheap, but because `np.reshape` would always call
`lax.reshape` regardless of whether it was given a raw ndarray or one of
our DeviceArrays, it would sometimes copy ndarray data into a
DeviceArray. Our general policy is always to copy data to the device
(and lazily leave it there until the host needs it), but this policy
fell down here because of doing a reshape on data before a `pmap`'d
computation: the op-by-op `np.reshape` call put all the data on one
device, then the following `pmap` function had to copy everything back
to the host then re-distribute it to multiple devices. (The location of
what logical shards need to go on which device is computation-dependent,
so it's not something we can reliably do before actually getting to
execute the specific `pmap` function of interest.)

This commit makes a simple change in the `jax.numpy` layer to make
`np.reshape(x, shape)` try calling `x.reshape(shape)`, so that when `x`
is an ndarray it will stay an ndarray (without any transfer). This
change is not in the `lax` layer so that the `lax` policy can stay
simple (always copy to device). We might revise these decisions in the
future, and for now they're just under-the-hood optimizations, with the
ability for a user to directly call `onp` or `lax` if they want to be
careful about where data lives.

This commit also changed `jax.replicate` to replicate (with
`onp.broadcast_to`, which uses stride tricks instead of allocating more
memory) data to have a leading axis of size `device_count`. The previous
solution, based on `pmap`ing a function with a lexical closure, caused
re-compilation on every call.

==

jax/api.py
jax/numpy/lax_numpy.py
==================
4bdb6825;Matthew Johnson;2019-04-04 08:11:42 -0700;Merge pull request #574 from levskaya/configfix
correctly update jax config.values after absl flag parsing
==
==================
34b799b3;Matthew Johnson;2019-04-04 07:32:50 -0700;Merge pull request #572 from j-towns/exp-safe-mul
Use safe mul for exp jvp
==
==================
116e329e;Anselm Levskaya;2019-04-04 02:09:35 -0700;correctly update jax config.values after absl flag parsing

==

jax/config.py
==================
49f3f991;Jamie Townsend;2019-04-04 09:12:27 +0100;Use safe mul for exp jvp

==

jax/lax.py
==================
357dd496;Roy Frostig;2019-04-03 15:32:06 -0700;Merge branch 'master' into parallelize

==
==================
794af8bd;Roy Frostig;2019-04-03 15:13:04 -0700;parallelization rule for lax.select

==

jax/lax.py
tests/parallel_test.py
==================
2cec9f97;Roy Frostig;2019-04-03 14:51:24 -0700;test psplit under a simulated pmap

==

jax/lax.py
tests/parallel_test.py
==================
866c21d8;Roy Frostig;2019-04-03 14:50:01 -0700;add a new parallel primitive: psplit_like

==

jax/lax.py
tests/parallel_test.py
==================
394d3e2f;Matthew Johnson;2019-04-03 13:24:39 -0700;Merge pull request #569 from alexalemi/patch-2
Change MNIST Data URL to CVDF mirror
==
==================
a37441aa;Peter Hawkins;2019-04-03 13:15:47 -0700;Merge pull request #570 from hawkinsp/master
Improve batching rule for conv_general_dilated
==
==================
1ae2df54;Peter Hawkins;2019-04-03 12:41:14 -0700;Add support for batching conv_general_dilated on the left where lhs_dims[0] != 0 or out_dims[0] != 0.

==

jax/lax.py
tests/batching_test.py
==================
5260717b;Roy Frostig;2019-04-03 10:46:08 -0700;pass multiple values (and axes) to simulated (serial) pmap rules

==

jax/interpreters/parallel.py
jax/lax.py
==================
026a7430;Alex Alemi;2019-04-03 10:18:49 -0700;Change MNIST Data URL to CVDF mirror
Change the MNIST data download url to the CVDF mirror, as is done in the main tensorflow and tfds datasets.
==

examples/datasets.py
==================
15c3046a;Matthew Johnson;2019-04-03 10:01:26 -0700;Merge pull request #568 from google/devicearray-repr
make DeviceArray.__repr__ show it's not an ndarray
==
==================
f0e2ff0c;Matthew Johnson;2019-04-03 09:43:44 -0700;make DeviceArray.__repr__ show it's not an ndarray reverts 33bd02

==

jax/interpreters/xla.py
==================
46407bd9;Peter Hawkins;2019-04-03 07:38:56 -0700;Merge pull request #567 from hawkinsp/conv
Fix LHS transpose rule for conv_general_dilated.
==
==================
ccb88c4e;Jamie Townsend;2019-04-03 15:03:29 +0100;Fix stax x64 dtype issues

==

jax/experimental/stax.py
==================
6c4bba8d;Peter Hawkins;2019-04-03 06:58:16 -0700;Fix LHS transpose rule for conv_general_dilated in the case that rhs_dilation is > 1.
Addresses one of the two problems in issue #563.

==

jax/lax.py
tests/lax_test.py
==================
70fc0250;Jamie Townsend;2019-04-03 13:32:14 +0100;Fix examples_test.py

==

examples/examples_test.py
==================
44c38391;Jamie Townsend;2019-04-03 13:27:23 +0100;Cleaner stax.parallel init

==

jax/experimental/stax.py
==================
1c9b9a57;Jamie Townsend;2019-04-03 12:54:02 +0100;Use jax.random for stax initialization

==

README.md
examples/mnist_classifier.py
examples/mnist_vae.py
examples/resnet50.py
jax/experimental/stax.py
notebooks/maml.ipynb
tests/stax_test.py
==================
18f847d4;Matthew Johnson;2019-04-02 21:20:11 -0700;Merge pull request #562 from google/viz
add basic graphviz-drawing function
==
==================
61ce283f;Matthew Johnson;2019-04-02 21:17:24 -0700;graphviz: concat strings only at the end

==

jax/api.py
==================
51d27221;Matthew Johnson;2019-04-02 11:22:19 -0700;add graphviz-dumping function

==

jax/api.py
==================
ca9151ac;Matthew Johnson;2019-04-02 08:46:41 -0700;Merge pull request #560 from j-towns/gumbel
Add Gumbel to jax.random, and test
==
==================
996c6233;Jamie Townsend;2019-04-02 10:56:44 +0100;Rm unnecessary dtype arg name

==

jax/random.py
==================
7b13ae4b;Jamie Townsend;2019-04-02 10:55:03 +0100;Add Gumbel to jax.random, and test

==

jax/random.py
tests/random_test.py
==================
dfdfac55;Matthew Johnson;2019-04-01 21:19:55 -0700;update tensorflow version for new xla

==

WORKSPACE
==================
a8b0f530;Peter Hawkins;2019-04-01 19:18:46 -0700;Merge pull request #556 from hawkinsp/master
Add np.longlong to the set of JAX array types.
==
==================
ef99a4d0;Matthew Johnson;2019-04-01 18:33:05 -0700;Merge pull request #559 from google/multiple-psum
enable spmd collectives over multiple axes at once
==
==================
2bba6d33;Matthew Johnson;2019-04-01 18:32:36 -0700;Merge branch 'master' into multiple-psum

==
==================
c12970bd;Matthew Johnson;2019-04-01 17:58:43 -0700;Merge pull request #558 from google/rename-pcall-pmap
rename xla_pcall -> xla_pmap
==
==================
8ace5191;Matthew Johnson;2019-04-01 17:56:23 -0700;enable spmd collectives over multiple axes at once
e.g. lax.psum(x, (i, j))

==

jax/interpreters/pxla.py
tests/pmap_test.py
==================
f17d31fd;Matthew Johnson;2019-04-01 17:21:50 -0700;rename xla_pcall -> xla_pmap

==

jax/api.py
jax/interpreters/pxla.py
==================
fa114633;Peter Hawkins;2019-04-01 17:03:28 -0700;Disabled regression test until new Jaxlib release.

==

tests/lax_numpy_test.py
==================
fa6bef2a;Roy Frostig;2019-03-27 19:07:16 -0700;add template parallelization rule for identities, instantiate it for `tie_in`

==

jax/interpreters/parallel.py
jax/lax.py
==================
356e6dcf;Peter Hawkins;2019-04-01 15:49:12 -0700;Add np.longlong to the set of JAX array types.

==

jax/abstract_arrays.py
jax/interpreters/xla.py
tests/lax_numpy_test.py
==================
3994829a;Peter Hawkins;2019-04-01 11:32:55 -0700;Add workaround for type equality bug.

==

jax/interpreters/xla.py
==================
6a82c2ce;Peter Hawkins;2019-04-01 09:23:00 -0700;Skip some GPU reduction tests for complex128 types since they don't work yet.

==

tests/lax_numpy_test.py
==================
85d6eed8;Peter Hawkins;2019-04-01 08:36:35 -0700;Change jaxlib version test to import jaxlib.version first.

==

jax/lib/xla_bridge.py
==================
5ceac99d;Peter Hawkins;2019-04-01 08:23:02 -0700;Add newline to the end of jaxlib/BUILD.

==

jaxlib/BUILD
==================
5eff830f;Peter Hawkins;2019-04-01 08:21:22 -0700;Move jaxlib version.py into jaxlib, and install it in build/jaxlib as build action.
Update jaxlib version check to look in jaxlib.version.

==

build/BUILD.bazel
build/install_xla_in_source_tree.sh
jax/lib/xla_bridge.py
jaxlib/BUILD
jaxlib/version.py
==================
650db36d;Peter Hawkins;2019-04-01 05:49:14 -0700;Merge pull request #555 from google/xrt
Update XLA.
==
==================
4ccda557;Peter Hawkins;2019-04-01 05:47:45 -0700;Update comments.

==

jax/interpreters/pxla.py
jax/lib/xla_bridge.py
==================
69c4e225;fehiepsi;2019-04-01 00:32:42 -0400;add dtype for samplers in gamma_one

==

jax/random.py
==================
80e22d2f;fehiepsi;2019-03-31 23:54:46 -0400;Merge remote-tracking branch 'upstream/master' into gamma

==
==================
cbf45282;fehiepsi;2019-03-31 23:54:31 -0400;convert gamma_one to lax api and move the inner while_loop to the outside

==

jax/random.py
==================
70ad3c37;Peter Hawkins;2019-03-31 16:19:59 -0700;Support older jaxlibs without XRT.

==

jax/lib/xla_bridge.py
==================
46e95790;Peter Hawkins;2019-03-31 16:06:35 -0700;Add missing backend option in pxla.py.

==

jax/interpreters/pxla.py
==================
6476d5ff;Matthew Johnson;2019-03-31 13:33:49 -0700;Merge pull request #554 from google/autodiff-cookbook-updates
add fwd+rev hvp section to autodiff cookbook
==
==================
f7a696f5;Matthew Johnson;2019-03-31 13:26:10 -0700;add forward-over-reverse hvp, timings from @alexbw

==

notebooks/autodiff_cookbook.ipynb
==================
e8638f73;Peter Hawkins;2019-03-31 10:31:47 -0700;Update XLA.
Switches XLA Python bindings to use pybind11.
Update XRT support to point to newer XRT client.
Update minimum bazel version to 0.24.0.

Fix missing backend argument to XLA Compile() calls.

==

WORKSPACE
build/build.py
build/install_xla_in_source_tree.sh
jax/interpreters/xla.py
jax/lib/xla_bridge.py
==================
29b72d7b;Matthew Johnson;2019-03-31 10:18:11 -0700;fix typo in autodiff cookbook

==

notebooks/autodiff_cookbook.ipynb
==================
352ce8b9;Matthew Johnson;2019-03-31 09:38:45 -0700;add fwd+rev hvp section to autodiff cookbook

==

notebooks/autodiff_cookbook.ipynb
==================
0fd1b8a6;Peter Hawkins;2019-03-31 12:23:05 -0400;Merge pull request #543 from hawkinsp/master
Refactor handling of XLA backends.
==
==================
5866ad3d;Matthew Johnson;2019-03-31 06:15:45 -0700;Merge pull request #548 from fehiepsi/pareto
Implement pareto logpdf and sampler
==
==================
490c56de;Matthew Johnson;2019-03-30 20:57:37 -0700;Merge pull request #550 from fehiepsi/boundary
Change behaviour at distribution boundaries
==
==================
e0567b6d;fehiepsi;2019-03-30 18:07:34 -0400;add Gamma sampler

==

jax/random.py
tests/random_test.py
==================
5309d53a;fehiepsi;2019-03-30 17:15:49 -0400;change behaviour at distribution boundary

==

jax/scipy/stats/beta.py
jax/scipy/stats/expon.py
jax/scipy/stats/gamma.py
jax/scipy/stats/uniform.py
==================
096ba63b;fehiepsi;2019-03-30 16:45:17 -0400;correct TODO test name for bernoulli

==

tests/random_test.py
==================
bb095d3d;fehiepsi;2019-03-30 16:34:20 -0400;implement pareto logpdf and sampler

==

jax/random.py
jax/scipy/stats/__init__.py
jax/scipy/stats/pareto.py
tests/random_test.py
tests/scipy_stats_test.py
==================
26d3d767;Matthew Johnson;2019-03-30 06:32:48 -0700;Merge pull request #546 from fehiepsi/t
Implement T distribution logpdf
==
==================
0b24f232;Matthew Johnson;2019-03-30 06:23:55 -0700;Merge pull request #547 from QBatista/fix_typo_doc
DOC: Fix typo in `ops.index_update`
==
==================
eb4945c0;QBatista;2019-03-30 17:18:53 +0900;DOC: Fix typo in `ops.index_update`

==

jax/ops/scatter.py
==================
0bb657d6;fehiepsi;2019-03-30 00:00:15 -0400;add stats.t.pdf

==

jax/scipy/stats/__init__.py
jax/scipy/stats/cauchy.py
jax/scipy/stats/t.py
tests/scipy_stats_test.py
==================
cbd9fbb3;Roy Frostig;2019-03-29 15:31:18 -0700;Merge pull request #538 from google/autospmd
parallelization work-in-progress
==
==================
93c20f5f;Roy Frostig;2019-03-29 12:49:03 -0700;remove parallelized MLP example (likely until it is ready for device pmap)

==

examples/parallelize_mlp.py
==================
247ebdf1;Matthew Johnson;2019-03-29 09:06:59 -0700;Merge pull request #541 from fehiepsi/exponlaplace
Implement expon and laplace sampler
==
==================
540977bf;Matthew Johnson;2019-03-29 08:52:52 -0700;Merge pull request #542 from google/issue536
fix typo in vmap (fixes #536)
==
==================
42c62d0d;Peter Hawkins;2019-03-29 11:09:56 -0400;Refactor handling of XLA backends.
Use a new xla_client.get_local_backend() method if available, which will be available in a future Jaxlib release.
Use 'cpu', 'gpu' to name platforms instead of 'Host', and 'CUDA'.

Move logic to initialize backends into get_backend() instead of get_xla_client().
Remove xla_bridge.get_xla_client(). Just import xla_client.xla_bridge instead.

Remove _platform_name. Instead, ask the backend for its platform name.

==

jax/interpreters/xla.py
jax/lax.py
jax/lax_linalg.py
jax/lib/xla_bridge.py
jax/numpy/lax_numpy.py
==================
aa6cebff;Matthew Johnson;2019-03-29 08:03:58 -0700;fix typo in vmap (fixes #536)

==

jax/api.py
==================
925cff05;Matthew Johnson;2019-03-29 08:00:46 -0700;Merge pull request #540 from j-towns/better-expit-grad
Stabler expit and logit derivatives
==
==================
890ba842;fehiepsi;2019-03-28 23:57:00 -0400;implement expon and laplace sampler

==

jax/random.py
tests/random_test.py
==================
77615e27;Matthew Johnson;2019-03-28 16:40:46 -0700;Merge pull request #537 from levskaya/docs_tweak
gotchas updates and README.md colab link fixes
==
==================
965eaada;Matthew Johnson;2019-03-28 16:39:09 -0700;Merge pull request #539 from fehiepsi/cauchy
Implement cauchy pdf and random sampler
==
==================
13d1d7c4;Jamie Townsend;2019-03-28 22:27:37 +0000;Remove logit todo from lax_scipy_test

==

tests/lax_scipy_test.py
==================
b2bd93c8;Jamie Townsend;2019-03-28 22:18:04 +0000;Setup batching for expit and logit

==

jax/scipy/special.py
==================
ce3953eb;Jamie Townsend;2019-03-28 22:06:27 +0000;Stabler expit and logit derivatives

==

jax/scipy/special.py
==================
16be2262;fehiepsi;2019-03-28 18:02:20 -0400;add cauchy to init file

==

jax/scipy/stats/__init__.py
tests/scipy_stats_test.py
==================
a0636eae;fehiepsi;2019-03-28 17:59:42 -0400;implement cauchy pdf and random sampler

==

jax/random.py
jax/scipy/stats/cauchy.py
tests/random_test.py
tests/scipy_stats_test.py
==================
56dfb395;Matthew Johnson;2019-03-28 06:42:04 -0700;bump version number for pypi

==

jax/version.py
==================
6fb46e56;Roy Frostig;2019-03-27 16:42:28 -0700;remove unused imports in the parallelized MLP example

==

examples/parallelize_mlp.py
==================
1982493d;Roy Frostig;2019-03-27 16:34:52 -0700;add max parallelization test

==

tests/parallel_test.py
==================
b9fbda0b;Roy Frostig;2019-03-27 16:31:15 -0700;fix sum parallelization test

==

tests/parallel_test.py
==================
d6991a54;Roy Frostig;2019-03-27 16:30:33 -0700;add simulated pmap rule for pmax, plus corresponding test

==

jax/lax.py
tests/parallel_test.py
==================
dad8157d;Anselm Levskaya;2019-03-27 13:12:07 -0700;gotchas updates and README.md colab link fixes

==

README.md
notebooks/Common_Gotchas_in_JAX.ipynb
==================
4fd21867;Peter Hawkins;2019-03-27 15:45:03 -0400;Update Jaxlib versions in documentation/notebooks.

==

README.md
notebooks/XLA_in_Python.ipynb
notebooks/gufuncs.ipynb
notebooks/maml.ipynb
notebooks/neural_network_and_data_loading.ipynb
notebooks/neural_network_with_tfds_data.ipynb
notebooks/quickstart.ipynb
==================
6bd3fa96;Roy Frostig;2019-03-27 11:03:20 -0700;Merge branch 'master' into autospmd

==
==================
7651547c;Roy Frostig;2019-03-27 11:02:32 -0700;add a parallelized MLP example

==

examples/parallelize_mlp.py
==================
1d4de612;Peter Hawkins;2019-03-27 09:40:53 -0400;Fix bazel version to 0.24.0 in Dockerfile to make sure we get a specific, working bazel version during builds.

==

build/Dockerfile
==================
f8eda9bb;Peter Hawkins;2019-03-26 22:26:12 -0400;Set default Apple platform to fix TensorFlow build breakage when built for Jaxlib.

==

build/build.py
==================
0672b368;Peter Hawkins;2019-03-26 19:19:04 -0400;Update XLA (TF) to unbreak build.
Updates to:
https://github.com/tensorflow/tensorflow/commit/9cf0314aeecaf11093eba3827ddbf29e7ea4d9de

==

WORKSPACE
==================
8ad4f8c8;Matthew Johnson;2019-03-26 13:50:27 -0700;plumbing fixes (or maybe more breaking!)

==

jax/scan.py
tests/scan_test.py
==================
1d88e955;Matthew Johnson;2019-03-26 13:10:42 -0700;Merge pull request #534 from google/scipy-test-tolerances
Re-enable scipy.special.log_ndtr tests (numerical issues)
==
==================
f3f4f3b1;Peter Hawkins;2019-03-26 15:42:02 -0400;Increment jaxlib version in preparation for a new release.

==

build/jaxlib/version.py
==================
caf544a3;Peter Hawkins;2019-03-26 15:40:41 -0400;Update XLA (TensorFlow) version to head.

==

WORKSPACE
==================
0ed3a4eb;Dougal Maclaurin;2019-03-26 15:36:20 -0400;Merge branch 'master' into differentiable-scan

==
==================
273a9a85;Dougal Maclaurin;2019-03-26 15:35:31 -0400;Scan impl and broken jvp

==

jax/scan.py
tests/scan_test.py
==================
482c1ce8;Matthew Johnson;2019-03-26 08:43:02 -0700;change scipy.special.log_ndtr test rng for numerics

==

tests/lax_scipy_test.py
==================
0656dc22;Matthew Johnson;2019-03-26 08:40:26 -0700;Merge branch 'master' of github.com:google/jax

==
==================
25479c35;Matthew Johnson;2019-03-26 08:35:34 -0700;fix pmap performance bug, dont always copy to host

==

jax/interpreters/pxla.py
jax/util.py
==================
2557de19;Peter Hawkins;2019-03-26 11:34:28 -0400;Merge pull request #533 from hawkinsp/master
Fix minor issue in conj_p translation rule.
==
==================
fa6b06fd;Peter Hawkins;2019-03-26 10:31:30 -0400;Fix minor issue in conj_p translation rule.
conj_p was forwarding its keyword arguments to the ComputationBuilder.Conj() method. The current implementation of Conj() ignores extra keyword arguments, but we shouldn't depend on this kind of implementation detail.

==

jax/lax.py
==================
c9aa6010;Matthew Johnson;2019-03-26 07:05:35 -0700;Merge pull request #528 from kroq-gar78/cross
Implement cross product and test cases
==
==================
18bc5936;Matthew Johnson;2019-03-25 18:37:05 -0700;Merge pull request #525 from google/jarrett-jvps-2
add a function for elementwise jacobian accumulation
==
==================
2b7d2df7;Aditya Vaidya;2019-03-25 20:28:21 -0500;Comment out test case (need to change tolerance)

==

tests/lax_scipy_test.py
==================
f857762a;Roy Frostig;2019-03-25 18:27:42 -0700;Merge pull request #530 from google/dot-dot-general
avoid reshapes in lax_numpy.dot
==
==================
323353eb;Roy Frostig;2019-03-25 17:31:03 -0700;implement higher-rank cases of lax_numpy.dot in terms of lax.dot_general, avoiding a reshape

==

jax/lax.py
jax/numpy/lax_numpy.py
==================
0a5a633d;Aditya Vaidya;2019-03-25 19:29:49 -0500;Fix dtypes in cross product

==

jax/numpy/lax_numpy.py
==================
48934dc9;Aditya Vaidya;2019-03-25 17:42:08 -0500;Implement cross product and test cases

==

docs/jax.numpy.rst
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
cab78637;Roy Frostig;2019-03-25 14:00:21 -0700;Merge branch 'master' into autospmd

==
==================
631c6514;Roy Frostig;2019-03-25 13:46:35 -0700;adjust reduction dimensions in reduction parallelization rule

==

jax/interpreters/parallel.py
==================
a8e28500;Roy Frostig;2019-03-25 13:42:52 -0700;add lax.pmax and a corresponding (unimplemented) pmax primitive

==

jax/lax.py
==================
87b05ae6;Roy Frostig;2019-03-25 13:41:58 -0700;extend (and fix) reshape parallelization rule

==

jax/lax.py
==================
b9579b9c;Roy Frostig;2019-03-25 11:53:41 -0700;fix shape mismatch in broadcasting parallelization rule
Namely, remove the dimension of non-split operands matching the split operand's hidden dimension.

==

jax/interpreters/parallel.py
==================
850e8a75;Matthew Johnson;2019-03-25 11:31:44 -0700;fix typo in linearize docstring

==

jax/api.py
==================
5704624c;Matthew Johnson;2019-03-25 11:29:44 -0700;attempt to fix readtheddocs.io formatting

==

jax/api.py
==================
f5b4391f;Matthew Johnson;2019-03-25 11:27:29 -0700;add jax.linearize to jax.readthedocs.io

==

docs/jax.rst
==================
a9ab470e;Matthew Johnson;2019-03-25 11:13:39 -0700;Merge pull request #527 from google/issue526
add docstring for `jax.linearize`
==
==================
595a9800;Matthew Johnson;2019-03-25 11:11:57 -0700;dedent code

==

jax/api.py
==================
54ac8795;Matthew Johnson;2019-03-25 11:03:03 -0700;add clarification about linearize vs jvp+vmap

==

jax/api.py
==================
a169e534;Matthew Johnson;2019-03-25 10:37:24 -0700;add docstring for `jax.linearize` (fixes #526)

==

jax/api.py
==================
cefbea6a;Matthew Johnson;2019-03-24 08:50:56 -0700;README should point to hosted colab for gotchas

==

README.md
==================
a848d0c0;Matthew Johnson;2019-03-24 07:59:50 -0700;update readme, link gotchas notebook

==

README.md
==================
9711202c;Matthew Johnson;2019-03-24 07:41:22 -0700;Merge pull request #488 from levskaya/master
Common Gotchas notebook and notebook fixes
==
==================
b041435f;Matthew Johnson;2019-03-23 17:10:01 -0700;fix scalar broadcast bug in safe_mul translation

==

jax/lax.py
==================
87143d8e;Matthew Johnson;2019-03-23 15:11:21 -0700;add some simple tests for jarrett jvps

==

jax/api.py
tests/api_test.py
==================
122c2df2;Matthew Johnson;2019-03-23 14:58:00 -0700;handle pytrees in jarrett tangents

==

jax/api.py
==================
c9f96761;Matthew Johnson;2019-03-23 14:08:15 -0700;implement manual jarrett jvps

==

jax/api.py
jax/lax.py
==================
70686407;Anselm Levskaya;2019-03-22 20:38:01 -0700;add note on dynamic slice shapes for index_update and index_add

==

notebooks/Common_Gotchas_in_JAX.ipynb
==================
b1b29e52;Matthew Johnson;2019-03-22 18:27:54 -0700;Merge pull request #524 from google/isclose-numpy-behavior
handle numpy < 1.14 behavior of isclose
==
==================
a2778b24;Matthew Johnson;2019-03-22 17:09:35 -0700;reconcile _CheckAgainstNumpy arg order common use

==

jax/test_util.py
==================
629c573f;Matthew Johnson;2019-03-22 16:55:15 -0700;handle numpy < 1.14 behavior of isclose

==

jax/numpy/lax_numpy.py
==================
e4a041ce;Roy Frostig;2019-03-22 14:10:38 -0700;parallelization rule for general dot

==

jax/lax.py
==================
35383f17;Matthew Johnson;2019-03-22 09:14:59 -0700;Merge pull request #521 from google/remove-jaxtuples-from-optimizer-states
remove JaxTuples from optimizer states
==
==================
50f52070;Matthew Johnson;2019-03-22 07:38:40 -0700;comment-out new pytree check with a TODO

==

jax/tree_util.py
==================
f94c2063;Matthew Johnson;2019-03-22 07:12:25 -0700;back to original tree_mimomap optimizers solution

==

jax/experimental/optimizers.py
jax/tree_util.py
==================
6fdf64d7;Matthew Johnson;2019-03-21 19:23:00 -0700;add back an OptState that is a proper pytree

==

jax/experimental/optimizers.py
jax/tree_util.py
==================
04cfa11e;Matthew Johnson;2019-03-21 19:08:19 -0700;almost done with a prefix_multimap solution

==

jax/experimental/optimizers.py
jax/interpreters/ad.py
jax/tree_util.py
==================
7be36497;Matthew Johnson;2019-03-21 16:46:09 -0700;make optimizer update_fun signatures consistent

==

jax/experimental/optimizers.py
==================
ce9f8bac;Matthew Johnson;2019-03-21 16:37:04 -0700;optimizer update must zip* the updated result too

==

jax/experimental/optimizers.py
==================
55a28b3a;Matthew Johnson;2019-03-21 15:50:06 -0700;remove JaxTuples from optimizer states

==

jax/experimental/optimizers.py
==================
feb9dbba;Matthew Johnson;2019-03-22 03:29:58 +1100;Merge pull request #519 from google/pmap
add some pmap tests
==
==================
540eb32c;Matthew Johnson;2019-03-21 09:29:33 -0700;fix typos caught by review

==

jax/interpreters/pxla.py
==================
e12a3cd5;Matthew Johnson;2019-03-21 07:37:43 -0700;improve pmap device_num compatibility check

==

tests/pmap_test.py
==================
b4e83ee7;Matthew Johnson;2019-03-21 07:27:08 -0700;avoid generating trivial lax.slice operations

==

jax/lax.py
==================
cb02507e;Matthew Johnson;2019-03-20 18:45:46 -0700;add some docstrings in pxla.py

==

jax/interpreters/pxla.py
==================
7129d2a0;Matthew Johnson;2019-03-20 17:46:16 -0700;fix bug in nested pmap test code

==

tests/pmap_test.py
==================
55512988;Matthew Johnson;2019-03-20 16:29:43 -0700;tweak to fix xla_bridge.device_count behavior

==

jax/lib/xla_bridge.py
==================
ec9a9ed2;Matthew Johnson;2019-03-20 13:18:33 -0700;fix typo

==

jax/lib/xla_bridge.py
==================
8cfe3a38;Matthew Johnson;2019-03-19 17:25:18 -0700;remove old jax_replica_count option

==

jax/lib/xla_bridge.py
==================
5e52abed;Matthew Johnson;2019-03-19 17:13:44 -0700;fix typo (missing super())

==

jax/lib/xla_bridge.py
==================
6ae51085;Matthew Johnson;2019-03-19 17:01:10 -0700;fix typos

==

tests/pmap_test.py
==================
54abf1e7;Matthew Johnson;2019-03-19 16:54:55 -0700;add back in pmap tests

==

tests/pmap_test.py
==================
0e749f29;Matthew Johnson;2019-03-19 16:38:42 -0700;use unittest.SkipTest to skip tests properly

==

tests/lax_scipy_test.py
tests/lax_test.py
tests/linalg_test.py
tests/random_test.py
==================
e6caad64;Matthew Johnson;2019-03-19 09:04:35 -0700;Merge pull request #516 from google/issue514
fix typo in partial_eval.join_pvals (fixes #514)
==
==================
518dba3e;Matthew Johnson;2019-03-19 08:32:45 -0700;fix typo in partial_eval.join_pvals (fixes #514)

==

jax/interpreters/partial_eval.py
tests/lax_test.py
==================
70f127b2;Skye Wanderman-Milne;2019-03-18 14:56:31 -0700;Merge pull request #515 from skye/fix_complex_cast
Fix convert_element_type bug when converting from a complex dtype.
==
==================
65cac396;Skye Wanderman-Milne;2019-03-18 14:15:34 -0700;Fix convert_element_type bug when converting from a complex dtype.

==

jax/lax.py
jax/test_util.py
tests/lax_test.py
==================
c4be97e3;Peter Hawkins;2019-03-15 14:18:32 -0400;Merge pull request #513 from hawkinsp/master
Make assertAllClose check shapes for exact equality.
==
==================
53e7a3b9;Peter Hawkins;2019-03-15 11:42:16 -0400;Merge pull request #510 from fehiepsi/uni
fix logpdf shape of uniform distribution
==
==================
5bc452a6;fehiepsi;2019-03-14 23:14:35 -0400;revert lax import in scipy_stats_test

==

tests/scipy_stats_test.py
==================
6a532046;fehiepsi;2019-03-14 23:13:30 -0400;no need to import onp

==

jax/scipy/stats/uniform.py
==================
ab2de951;fehiepsi;2019-03-14 23:12:07 -0400;no need broadcast_to

==

jax/scipy/stats/uniform.py
==================
5e6d4885;fehiepsi;2019-03-14 23:11:00 -0400;use simpler fix

==

jax/scipy/stats/uniform.py
tests/scipy_stats_test.py
==================
3a456a3e;Peter Hawkins;2019-03-14 21:59:31 -0400;Make assertAllClose check shapes for exact equality.
Currently assertAllClose delegates to np.is_allclose, which has broadcasting semantics.

Fix some newly failing test cases.

==

jax/test_util.py
tests/api_test.py
tests/lax_numpy_test.py
tests/parallel_test.py
==================
16daee24;Peter Hawkins;2019-03-14 17:14:28 -0400;Merge pull request #509 from hawkinsp/master
Support non-default axis values in batch norm.
==
==================
39f50626;Peter Hawkins;2019-03-14 17:13:54 -0400;Merge pull request #512 from JuliusKunze/negative-pad-gradient
Allow negative padding in pad gradient, fixes #511
==
==================
14ff98e9;fehiepsi;2019-03-14 17:03:41 -0400;address comment

==

jax/scipy/stats/uniform.py
tests/scipy_stats_test.py
==================
0f5e4cfe;Julius Kunze;2019-03-14 19:42:50 +0000;Fix datatype

==

jax/lax.py
==================
2ca77821;Julius Kunze;2019-03-14 16:35:23 +0000;Allow negative padding in pad gradient

==

jax/lax.py
tests/lax_test.py
==================
cf9564ca;fehiepsi;2019-03-14 11:49:07 -0400;add test for uniform shape

==

jax/scipy/stats/uniform.py
tests/scipy_stats_test.py
==================
82938b9b;fehiepsi;2019-03-14 10:08:09 -0400;fix logpdf shape of uniform dist

==

jax/scipy/stats/uniform.py
==================
d2a21123;Peter Hawkins;2019-03-14 09:32:53 -0400;Support non-default axis values in batch norm.
Fixes #461.

==

jax/experimental/stax.py
tests/stax_test.py
==================
f540dfc5;Anselm Levskaya;2019-03-13 20:52:22 -0700;further common gotchas edits

==

notebooks/Common_Gotchas_in_JAX.ipynb
==================
4cd5da74;Roy Frostig;2019-03-08 11:40:47 -0800;autospmd rule for reshape (without dimensions)

==

jax/lax.py
==================
5592a063;Peter Hawkins;2019-03-13 15:34:25 -0400;Merge pull request #503 from hawkinsp/loopconsts
Split loop cond/body constants into tracers and literal constants.
==
==================
30ad1078;Peter Hawkins;2019-03-13 15:05:11 -0400;Merge pull request #504 from hawkinsp/dsbatching
Use gather as the batched form of dynamic_slice.
==
==================
da31be28;Peter Hawkins;2019-03-13 15:00:08 -0400;Simplify definition of _OpaqueParam to use object identity for hashing/equality.

==

jax/lax.py
==================
ab486bd5;Alex Wiltschko;2019-03-13 13:42:38 -0400;Update README.md

==

README.md
==================
b14f0ae0;Alex Wiltschko;2019-03-13 13:13:26 -0400;/s/maspto/mapsto

==

notebooks/autodiff_cookbook.ipynb
==================
758d0353;Alex Wiltschko;2019-03-13 13:10:40 -0400;Fixing typos

==

notebooks/autodiff_cookbook.ipynb
==================
2d46c996;Alex Wiltschko;2019-03-13 13:01:12 -0400;Initial commit of autodiff cookbook (#500)
* Initial commit of autodiff cookbook

* Update notebooks/autodiff_cookbook.ipynb

Co-Authored-By: mattjj <mattjj@csail.mit.edu>

* updates and fixes to autodiff cookbook

* add commentary to autodiff cookbook

* draft cookbook text about complex differentiation

* Future directions section, and misc text fixes

* Typo in "more advanced autodiff" section

==

notebooks/autodiff_cookbook.ipynb
==================
8fe8f23b;Peter Hawkins;2019-03-13 11:10:50 -0400;Use gather as the batched form of dynamic_slice.
Avoids building an unrolled slice/concatenate structure that is linear in the size of the batch dimension.

==

jax/lax.py
==================
098aedd6;Peter Hawkins;2019-03-13 10:41:42 -0400;Split loop cond/body constants into tracers and literal constants.
Only hoist tracer constants into loop-carried variables; leave non-tracers as constants.

This change attempts to reduce the sometimes very large number of trivial loop-carried constants in some models.

==

jax/lax.py
==================
cd1e4601;Matthew Johnson;2019-03-12 22:55:43 -0700;Merge pull request #502 from google/pjit
update pmap with fixes, add example
==
==================
0bfe0c60;Matthew Johnson;2019-03-12 19:59:31 -0700;Merge branch 'pjit'

==
==================
a7c4924b;Peter Hawkins;2019-03-12 16:11:20 -0400;Merge pull request #501 from hawkinsp/master
Add comments to linear_util.py.
==
==================
e7f9fbe4;Peter Hawkins;2019-03-12 15:28:07 -0400;Minor typo fixes.

==

jax/linear_util.py
==================
43676de1;Peter Hawkins;2019-03-12 15:25:13 -0400;Remove unnecessary output tupling.

==

jax/linear_util.py
==================
5af7aede;Anselm Levskaya;2019-03-12 12:18:47 -0700;edit of commong gotchas

==

notebooks/Common_Gotchas_in_JAX.ipynb
==================
1800d655;Peter Hawkins;2019-03-12 15:07:52 -0400;Add comments to linear_util.py.

==

jax/linear_util.py
jax/util.py
==================
0298b7b7;Peter Hawkins;2019-03-12 10:43:57 -0400;Merge pull request #494 from hawkinsp/master
Add documentation for lax.stop_gradient.
==
==================
5c15aa14;Peter Hawkins;2019-03-12 10:42:11 -0400;Clarify that stop_gradients stops gradients at all levels.

==

jax/lax.py
==================
5c2764f9;Matthew Johnson;2019-03-11 16:30:57 -0700;fix typo

==

jax/lax.py
==================
673bb116;Matthew Johnson;2019-03-11 16:26:06 -0700;Merge pull request #495 from google/vmap-while
while_loop vmap init_val with mixed map/unmap dims
==
==================
6881252f;Matthew Johnson;2019-03-11 15:59:09 -0700;fix dtype issue in new test

==

tests/batching_test.py
==================
a5c628cf;Matthew Johnson;2019-03-10 20:53:53 -0700;while_loop vmap init_val with mixed map/unmap dims
When a while_loop init_val is not mapped/batched in a vmap, we need to
broadcast it out since the result of the body_fun will be mapped. Since
the init_val can be a tuple in general, we need to handle mixed
mapped/unmapped tuple elements, i.e. handle a mixture of NoneType and
int bdims for init_val.

This also let us delete some redundant code.

fixes #489

==

jax/interpreters/batching.py
jax/lax.py
tests/batching_test.py
==================
1b408e3e;Peter Hawkins;2019-03-10 22:14:16 -0400;Merge pull request #493 from hawkinsp/docstring
Prefix functions in lax.py that shouldn't be visible in documentation.
==
==================
46085829;Peter Hawkins;2019-03-10 18:08:04 -0400;Add documentation for lax.stop_gradient.
Fixes #492.

==

jax/lax.py
==================
fab4dde1;Peter Hawkins;2019-03-10 18:00:41 -0400;Merge pull request #491 from hawkinsp/master
Add batching rule for triangular solve.
==
==================
2589d6bc;Peter Hawkins;2019-03-10 17:59:17 -0400;Prefix functions in lax.py that shouldn't be visible in documentation.

==

jax/lax.py
==================
ed7fec5c;Peter Hawkins;2019-03-10 17:31:51 -0400;Add batching rule for triangular solve.

==

jax/lax_linalg.py
tests/batching_test.py
tests/linalg_test.py
==================
e07d557e;Anselm Levskaya;2019-03-09 18:04:45 -0800;fix notebooks that did not install jax/jaxlib for interactive colab use

==

notebooks/maml.ipynb
notebooks/vmapped log-probs.ipynb
==================
36308ad4;Anselm Levskaya;2019-03-09 17:31:38 -0800;Add the common gotchas notebook and a notebook overview README.md with colab links.

==

notebooks/Common_Gotchas_in_JAX.ipynb
notebooks/README.md
==================
4e02a607;Anselm Levskaya;2019-03-09 17:31:07 -0800;fix the broken gufuncs.ipynb notebook

==

notebooks/gufuncs.ipynb
==================
95ea04ed;Matthew Johnson;2019-03-08 16:23:38 -0800;Merge pull request #486 from google/vmap-while
generalize while_loop vmap rule to handle tuples
==
==================
58659182;Matthew Johnson;2019-03-08 16:16:39 -0800;add fori_loop batching test

==

tests/batching_test.py
==================
9361d617;Matthew Johnson;2019-03-08 16:09:22 -0800;generalize while_loop vmap rule to handle tuples

==

jax/lax.py
tests/batching_test.py
==================
288281d2;Peter Hawkins;2019-03-08 14:14:50 -0500;Relax test tolerance on grad_and_aux test.

==

tests/api_test.py
==================
15da530b;Matthew Johnson;2019-03-08 09:59:03 -0800;add spmd mnist example

==

examples/mnist_classifier_fromscratch.py
examples/spmd_mnist_classifier_fromscratch.py
jax/api.py
spmd_toy.py
==================
258caf82;Matthew Johnson;2019-03-06 23:04:00 -0800;tweaks

==

jax/api.py
spmd_toy.py
==================
895169d8;Matthew Johnson;2019-03-06 17:49:16 -0800;add spmd toy

==

spmd_toy.py
==================
07d74c7c;Matthew Johnson;2019-03-06 17:28:28 -0800;add device_count() function to xla_bridge

==

jax/lib/xla_bridge.py
==================
ab0c0585;Matthew Johnson;2019-03-06 15:20:43 -0800;update build file to work with cuda nccl

==

build/build.py
==================
ae4dc078;Matthew Johnson;2019-03-06 14:36:47 -0800;rename pmap -> serial_pmap, pjit -> pmap

==

jax/api.py
jax/interpreters/parallel.py
jax/lax.py
tests/parallel_test.py
tests/pmap_test.py
==================
ca802586;Matthew Johnson;2019-03-06 14:03:47 -0800;make pjit axis name optional (for pure maps)

==

jax/api.py
==================
a4d415b0;Matthew Johnson;2019-03-03 12:45:31 -0800;fix typo

==

jax/lib/xla_bridge.py
==================
1ffdfb1b;Matthew Johnson;2019-03-03 12:44:26 -0800;clean up compiled shard/unshard logic

==

jax/interpreters/pxla.py
jax/lib/xla_bridge.py
==================
e2296423;Matthew Johnson;2019-03-03 11:26:04 -0800;fix parallel device persistence re-placement
pair w/ @hawkinsp

==

jax/interpreters/pxla.py
==================
1c988550;Matthew Johnson;2019-03-07 18:35:26 -0800;Merge pull request #485 from google/vmap-while
add batching rule for lax.while_loop
==
==================
877df460;Matthew Johnson;2019-03-07 18:34:39 -0800;Merge pull request #484 from google/grad-and-aux2
add support for returning aux data from grad
==
==================
f8d0fcf0;Matthew Johnson;2019-03-07 18:29:59 -0800;add better while_loop batching tests

==

jax/interpreters/batching.py
tests/batching_test.py
==================
c1773df5;Matthew Johnson;2019-03-07 17:35:13 -0800;fix typo

==

jax/lax.py
==================
b42d3177;Matthew Johnson;2019-03-07 17:32:16 -0800;add comment to _while_loop_batching_rule

==

jax/lax.py
==================
8980da1a;Matthew Johnson;2019-03-07 17:20:26 -0800;add batching rule for lax.while_loop (fixes #441)

==

jax/interpreters/batching.py
jax/lax.py
tests/batching_test.py
==================
04081a4f;Matthew Johnson;2019-03-07 14:49:29 -0800;improve a test for grad-and-aux

==

tests/api_test.py
==================
caa2ed1a;Matthew Johnson;2019-03-07 14:48:05 -0800;fix grad-and-aux handling of constant aux data

==

jax/interpreters/ad.py
tests/api_test.py
==================
4542929b;Matthew Johnson;2019-03-07 14:40:48 -0800;docstring typo fixes

==

jax/api.py
==================
e35d5f62;Matthew Johnson;2019-03-07 14:08:02 -0800;add support for returning aux data from grad
fixes #366

==

jax/api.py
jax/interpreters/ad.py
tests/api_test.py
==================
c05d6e87;Matthew Johnson;2019-03-06 23:46:53 -0800;Merge pull request #482 from google/debug-nans
add jax_debug_nans flag, time-travel debugging
==
==================
28b718fe;Matthew Johnson;2019-03-06 23:19:41 -0800;add jax_debug_nans flag, time-travel debugging

==

jax/interpreters/xla.py
==================
48224dd5;Roy Frostig;2019-03-06 21:27:47 -0800;Merge pull request #481 from google/papply
Initial work on auto-spmd
==
==================
42cb4ce8;Roy Frostig;2019-03-06 18:21:39 -0800;warn, rather than err, on non-split output when a split was requested

==

jax/interpreters/parallel.py
==================
c453af7f;Roy Frostig;2019-03-06 18:20:49 -0800;add missing module names

==

jax/interpreters/parallel.py
==================
2116a30b;Roy Frostig;2019-03-06 17:42:04 -0800;rename `_moveaxis` to `ensure_axis` to disambiguate from `batching.moveaxis`, support tuple types, and err when the output requires a split

==

jax/interpreters/parallel.py
==================
791f1ad3;Roy Frostig;2019-03-06 16:55:00 -0800;skip disabled papply tests

==

tests/parallel_test.py
==================
df2dce13;Roy Frostig;2019-03-06 16:54:48 -0800;remove redundant gather

==

jax/lax.py
==================
ebb2814f;Roy Frostig;2019-03-06 15:31:14 -0800;post-merge naming fix

==

jax/lax.py
==================
d8dc8230;Roy Frostig;2019-03-06 15:29:15 -0800;fix `interpreters.parallel` imports

==

jax/interpreters/pxla.py
jax/lax.py
==================
bc256ac9;Roy Frostig;2019-03-06 15:25:00 -0800;remove duplicate template papply rules

==

jax/lax.py
==================
f1e74a23;Roy Frostig;2019-03-06 15:20:22 -0800;merge lax_parallel.py into lax.py and interpreters/parallel.py

==

jax/interpreters/parallel.py
jax/lax.py
jax/lax_parallel.py
tests/parallel_test.py
==================
c64cb43d;Roy Frostig;2019-03-06 13:29:28 -0800;Merge branch 'master' into papply

==
==================
a15cb85e;Peter Hawkins;2019-03-06 09:28:57 -0500;Fix error introduced in previous change.

==

tests/lax_numpy_indexing_test.py
==================
49d51ac5;Peter Hawkins;2019-03-06 09:28:26 -0500;Disable an indexed update test on TPU.

==

tests/lax_numpy_indexing_test.py
==================
854e3b15;Peter Hawkins;2019-03-06 09:07:15 -0500;Add missing jax/ops/ to jax/BUILD. Fix typo in ops/scatter.py

==

jax/BUILD
jax/ops/scatter.py
==================
8b46cfc9;Peter Hawkins;2019-03-05 21:09:52 -0500;Merge pull request #478 from jlebar/remove-dumping-flags
Remove some JAX dumping flags in preparation for a refactoring of these flags in XLA.
==
==================
d31365dd;Justin Lebar;2019-03-05 17:35:19 -0800;Delete some dumping flags.
Removed

  --jax_dump_hlo_graph
  --jax_dump_hlo_unoptimized
  --jax_dump_hlo_optimized
  --jax_dump_hlo_per_pass
  --jax_hlo_profile

All of these flags have an equivalent in XLA which you can pass via
XLA_FLAGS.  I'm trying to change the XLA_FLAGS, so I either need to
upgrade these to match or remove them.  Since they're not adding any
functionality you can't access via XLA_FLAGS, removing them seems
cleaner.

==

jax/lib/xla_bridge.py
==================
eefc0a73;Peter Hawkins;2019-03-04 20:12:22 -0500;Add jax.ops to documentation.

==

docs/jax.ops.rst
==================
e9b9ad6f;Peter Hawkins;2019-03-04 17:00:22 -0500;Merge pull request #477 from hawkinsp/arraywrites
Add new functions `jax.ops.index_add` and `jax.ops.index_update`.
==
==================
ee015d7f;Peter Hawkins;2019-03-04 16:25:44 -0500;Relax tolerance for gradient test.

==

tests/lax_numpy_indexing_test.py
==================
39415cae;Peter Hawkins;2019-03-04 15:49:03 -0500;Remove use of `yield from` for Python 2 compatibility.

==

tests/lax_numpy_indexing_test.py
==================
8b5e09f1;Peter Hawkins;2019-02-22 07:55:36 -0500;Add new functions `jax.ops.index_add` and `jax.ops.index_update` for NumPy-style indexed updates.
Create a new library `jax.ops` for user-facing ops that don't exist in NumPy or SciPy.

Progress on issue #101. Fixes #122.

Reenable some disabled TPU indexing tests that now pass.

==

docs/jax.rst
jax/ops/__init__.py
jax/ops/scatter.py
tests/lax_numpy_indexing_test.py
==================
ff89a90a;Matthew Johnson;2019-03-02 22:14:15 -0800;Merge pull request #473 from google/scan2
add draft of lax.scan
==
==================
4acd793f;Matthew Johnson;2019-03-02 21:49:03 -0800;remove temporary scanplan.py brainstorm file

==

scanplan.py
==================
1e0d04a3;Matthew Johnson;2019-03-02 21:44:35 -0800;fix pxla.py typo

==

jax/interpreters/pxla.py
==================
acd9276f;Matthew Johnson;2019-03-02 21:43:40 -0800;add __bool__ to jaxtuples / abstracttuples

==

jax/core.py
jax/lax.py
==================
66624ef5;Matthew Johnson;2019-03-02 21:39:21 -0800;add a test for scan-of-jit

==

tests/lax_test.py
==================
1a704f50;Matthew Johnson;2019-03-02 21:30:20 -0800;comment out scan jvp tests (wip)

==

tests/lax_test.py
==================
ddd18dfe;Matthew Johnson;2019-03-02 21:24:23 -0800;update scan docstring, comment-out scan jvp

==

jax/lax.py
==================
abfb7e33;Matthew Johnson;2019-03-01 13:37:49 -0800;progress on scan jvp (pair w/ @hawkinsp)

==

jax/lax.py
scanplan.py
==================
a20e8982;Matthew Johnson;2019-03-01 13:16:44 -0800;completed scan (PAIR=hawkinsp@)

==

jax/core.py
jax/interpreters/pxla.py
jax/lax.py
jax/tree_util.py
scanplan.py
==================
71d8bdc4;Matthew Johnson;2019-03-01 09:46:32 -0800;wip w/ phawkins

==

jax/lax.py
scanplan.py
==================
b94c3fea;Matthew Johnson;2019-02-28 12:07:33 -0800;fix abstract_eval_fun kwarg handling

==

jax/interpreters/partial_eval.py
==================
c3c3b964;Peter Hawkins;2019-02-28 12:57:56 -0500;Initial primitive scan(). Has JVP but not VJP.

==

jax/lax.py
tests/lax_test.py
==================
81f77a0b;Matthew Johnson;2019-03-02 18:32:25 -0800;Merge pull request #415 from google/cond
add lax.cond (initial-style implementation)
==
==================
65b6f19c;Matthew Johnson;2019-03-02 18:08:34 -0800;add a better error message on cond pval join error

==

jax/abstract_arrays.py
jax/lax.py
==================
234f4876;Matthew Johnson;2019-03-02 17:52:28 -0800;get rid of lax's OpaqueParams class
That class was once used for smuggling consts into primitives for
lax.while_loop and lax.cond, but it's no longer needed because those
bind rules take constants as positional arguments now (and hence handle
closed-over tracers).

==

jax/lax.py
==================
a12d4e3f;Matthew Johnson;2019-03-02 17:47:48 -0800;Merge branch 'cond2' into cond

==
==================
902c149c;Matthew Johnson;2019-03-02 17:37:38 -0800;add partial value lattice join, cond support
This change allows one side of a cond to have a different const-ness
from the other side, from the point-of-view of partial evaluation. In
other words, this now works as expected:

```python
lax.cond(x < 0, x, lambda x: 0., x, lambda x: x)  # relu
```

The partial evaluation logic works with tuples, so this works too:

```python
lax.cond(x < 0,
         x, lambda x: (x, x, 1, 1, 1),
         x, lambda x: (x, 1, x, 1, 2))
```

in that true_fun is resolved to something like `lambda x: (x, x, 1, *, 1)`
and false_fun is resolved to something like `lambda x: (x, 1, x, *, 2)`,
where `*` means unit and corresponds to a known constant that isn't
staged into the computation.

For forward-mode autodiff support, we'll need to add yet another lattice
join on the lattice of symbolic-zero-or-not.

==

jax/api_util.py
jax/interpreters/partial_eval.py
jax/lax.py
tests/lax_test.py
==================
6eb5a3e0;Matthew Johnson;2019-03-02 17:32:56 -0800;Merge pull request #472 from fehiepsi/bernoulli-shape
Fix bernoulli shape bug
==
==================
f05d0bcb;fehiepsi;2019-03-02 19:11:16 -0500;fix bernoulli shape bug

==

jax/random.py
tests/random_test.py
==================
92e8f511;Peter Hawkins;2019-03-02 17:59:11 -0500;Merge pull request #468 from hawkinsp/master
Update default bazel release in build script to 0.22.0.
==
==================
8f92dae4;Matthew Johnson;2019-03-02 12:27:02 -0800;Merge pull request #467 from Bharat123rox/master
Fix #396 by updating the comment in README.md
==
==================
17fbdcaa;Peter Hawkins;2019-03-02 15:10:42 -0500;Update default bazel release in build script to 0.22.0.
Update imported rules to a version that supports newer Bazel versions.

==

WORKSPACE
build/build.py
==================
66855b6d;Matthew Johnson;2019-02-20 07:37:49 -0800;add commented-out failing cond test from @dougalm

==

tests/lax_test.py
==================
0b4a7224;Matthew Johnson;2019-02-19 22:12:30 -0800;add shape check for lax.cond predicate

==

jax/lax.py
==================
7f2325f1;Matthew Johnson;2019-02-19 22:01:31 -0800;add basic cond tests

==

tests/lax_test.py
==================
21c36c24;Matthew Johnson;2019-02-19 21:45:42 -0800;clean up lax.cond implementation

==

jax/lax.py
==================
ed04a133;Matthew Johnson;2019-02-19 21:35:04 -0800;sketch out lax.cond (needs tests, cleanup)

==

jax/lax.py
==================
b1076506;Matthew Johnson;2019-03-02 11:02:36 -0800;Merge remote-tracking branch 'origin/master'

==
==================
fd15716d;Matthew Johnson;2019-03-02 11:02:18 -0800;bump version number for pypi

==

jax/version.py
==================
bd7d874a;Bharat Raghunathan;2019-03-03 00:17:17 +0530;Update README.md to avoid overflow

==

README.md
==================
0c7aca1b;Bharat Raghunathan;2019-03-02 23:49:35 +0530;Fix #396 by updating the comment in README.md

==

README.md
==================
dddb221a;Peter Hawkins;2019-03-02 09:09:42 -0500;Merge pull request #464 from hawkinsp/master
Implement a scatter-update operator.
==
==================
769f8a8f;Matthew Johnson;2019-03-01 16:31:50 -0800;Merge pull request #465 from levskaya/kwargs
allow stax apply_fns to take general kwargs, not just rng
==
==================
c3cbf4a2;Anselm Levskaya;2019-03-01 13:12:47 -0800;allow apply_fns to take general kwargs, not just rng

==

jax/experimental/stax.py
tests/stax_test.py
==================
148073ed;Peter Hawkins;2019-03-01 15:41:49 -0500;Implement a scatter-update operator.

==

jax/lax.py
tests/lax_test.py
==================
1497c315;Peter Hawkins;2019-03-01 12:59:31 -0500;Merge pull request #463 from hawkinsp/master
Simplify Gather and Scatter by removing the index_vector_dim.
==
==================
ce5857c9;Peter Hawkins;2019-03-01 12:19:00 -0500;Update lax_test for index_vector_dim change.

==

tests/lax_test.py
==================
97c6ff33;Peter Hawkins;2019-03-01 11:59:54 -0500;Update batching_test.py for index_vector_dim change.

==

jax/lax.py
tests/batching_test.py
==================
f7bcb5a9;Peter Hawkins;2019-03-01 11:05:04 -0500;Fix xla Shape vs shape tuple confusion and verify indexing test passes.

==

jax/lax.py
==================
8de992d7;Peter Hawkins;2019-03-01 10:34:46 -0500;Simplify Gather and Scatter by removing the index_vector_dim.
Use a canonical choice of:
* there is always a vector index dimension
* it is always the last dimension in indices.

==

jax/lax.py
jax/numpy/lax_numpy.py
==================
500ca34f;Peter Hawkins;2019-03-01 10:05:50 -0500;Update jaxlib version numbers in docs/notebooks.

==

README.md
notebooks/XLA_in_Python.ipynb
notebooks/gufuncs.ipynb
notebooks/neural_network_and_data_loading.ipynb
notebooks/neural_network_with_tfds_data.ipynb
notebooks/quickstart.ipynb
==================
0f00c15d;Peter Hawkins;2019-03-01 08:32:49 -0500;Merge pull request #462 from hawkinsp/master
Documentation string improvements.
==
==================
0927b667;Matthew Johnson;2019-02-28 20:25:09 -0800;update XLA and jaxlib

==

WORKSPACE
build/jaxlib/version.py
==================
c0a7bcb6;Peter Hawkins;2019-02-28 22:48:31 -0500;Documentation improvements.

==

jax/lax.py
jax/scipy/special.py
==================
6af073e4;Peter Hawkins;2019-02-28 18:55:20 -0800;Merge pull request #460 from hawkinsp/stats
Add scipy.special.{ndtr,ndtri,log_ndtr} and stats.norm.{cdf,logcdf}
==
==================
9903076d;Peter Hawkins;2019-02-28 21:22:18 -0500;Relax test tolerance for gradients.

==

tests/lax_scipy_test.py
==================
42480078;Peter Hawkins;2019-02-28 20:13:53 -0500;Add autodiff tests for scipy special ops.

==

tests/lax_scipy_test.py
==================
a7a8ac48;Matthew Johnson;2019-02-28 16:59:42 -0800;Merge pull request #456 from google/issue453
fix bug in transpose with order='F' (fixes #453)
==
==================
359c4c13;Peter Hawkins;2019-02-28 05:09:59 -0800;Merge pull request #458 from hawkinsp/master
Fix output dtype for np.full when dtype=None.
==
==================
11537373;Peter Hawkins;2019-02-27 12:22:45 -0800;Implement scipy.special.{ndtr,ndtri,log_ndtr} and scipy.stats.norm.{cdf,logcdf}.
The implementation of the ndtr functions is ported from TensorFlow:
https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/ops/distributions/special_math.py

==

jax/scipy/special.py
jax/scipy/stats/norm.py
tests/lax_scipy_test.py
tests/scipy_stats_test.py
==================
9a943072;Peter Hawkins;2019-02-27 12:20:30 -0800;Fix filled constant test case.

==

tests/lax_test.py
==================
bd572449;Peter Hawkins;2019-02-27 11:29:28 -0800;Fix bug in full_like introduced by previous commit.

==

jax/lax.py
==================
8686e4dd;Peter Hawkins;2019-02-27 11:09:33 -0800;Fix output dtype for np.full when dtype=None.

==

jax/lax.py
tests/lax_numpy_test.py
==================
c8b9fe23;Matthew Johnson;2019-02-27 07:50:19 -0800;fix #453 in full, more exhaustive tests

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
02124e31;Matthew Johnson;2019-02-27 07:42:26 -0800;fix bug in transpose with order='F' (fixes #453)

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
2dae120d;Peter Hawkins;2019-02-26 06:35:02 -0800;Merge pull request #452 from hawkinsp/protobufs
Update XLA.
==
==================
f939ac07;Peter Hawkins;2019-02-25 05:59:45 -0800;Update XLA.
Updates XLA to https://github.com/tensorflow/tensorflow/commit/00afc7bb81d6d36a0f619c08c011abe08965a25b.

The new XLA release removes the use of protocol buffers from the XLA client. Fixes #349.
Add backward compatibility shims to jaxlib to allow older jax releases to still work on an up to date jaxlib.

The new XLA release also incorporates a fix that avoids a host-device copy for every iteration of a `lax.fori_loop()` on GPU. Fixes #402.

Add a new jaxlib.__version__ field, change jax/jaxlib compatibility logic to check for it.

==

.gitignore
WORKSPACE
build/install_xla_in_source_tree.sh
build/jaxlib/__init__.py
build/jaxlib/version.py
build/setup.py
jax/lib/xla_bridge.py
setup.py
==================
7701feb6;Matthew Johnson;2019-02-25 13:49:40 -0800;revise large device constant test

==

tests/api_test.py
==================
a3770355;Matthew Johnson;2019-02-25 13:48:01 -0800;add test for device constant compile options bug

==

tests/api_test.py
==================
8c5e4104;Matthew Johnson;2019-02-25 13:40:17 -0800;fix bug in instantiate_device_constant

==

jax/interpreters/xla.py
==================
83165a1b;Matthew Johnson;2019-02-25 10:23:42 -0800;Merge pull request #449 from google/pjit
fix some ShardedDeviceArray logic
==
==================
a6d65820;Matthew Johnson;2019-02-25 10:19:12 -0800;Merge pull request #448 from ericjang/master
Add maml tutorial notebook.
==
==================
3dc3f4dc;Matthew Johnson;2019-02-25 10:14:47 -0800;fix some ShardedDeviceArray logic

==

jax/interpreters/pxla.py
jax/lib/xla_bridge.py
==================
0b60efb6;Eric Jang;2019-02-25 09:53:08 -0800;Add maml tutorial notebook.

==

notebooks/maml.ipynb
==================
aa308161;Eric Jang;2019-02-25 09:50:00 -0800;Add maml tutorial notebook.

==

notebooks/maml.ipynb
==================
8480cd3f;Roy Frostig;2019-02-24 22:15:03 -0800;Merge branch 'master' into papply

==
==================
6b190c5b;Roy Frostig;2019-02-24 22:10:49 -0800;fixes to lax.dot papply rule, such that the dot test now works for some in_axes combinations

==

jax/lax.py
tests/parallel_test.py
==================
157ad4a6;Matthew Johnson;2019-02-24 19:17:54 -0800;Merge pull request #444 from google/pjit
generalize replica count handling, add sharded device-persistent values
==
==================
acd0150b;Matthew Johnson;2019-02-24 19:13:24 -0800;Merge pull request #426 from google/remove-unused-asarray-case
remove unused jax.numpy.array case (was typo)
==
==================
43a66701;Matthew Johnson;2019-02-24 19:06:59 -0800;add comment

==

jax/numpy/lax_numpy.py
==================
b90f5d80;Matthew Johnson;2019-02-24 18:49:48 -0800;use 'device_num' not 'replica_num', leave a todo

==

jax/interpreters/pxla.py
jax/interpreters/xla.py
==================
b667ac19;Matthew Johnson;2019-02-24 18:33:59 -0800;add constant handler for ShardedDeviceArray

==

jax/interpreters/pxla.py
==================
af41b5b6;Peter Hawkins;2019-02-24 21:08:48 -0500;Merge pull request #445 from hawkinsp/master
Update XLA.
==
==================
4ae6abac;Peter Hawkins;2019-02-24 20:21:08 -0500;Update XLA.
Includes https://github.com/tensorflow/tensorflow/commit/9f9efff916ed427b24216a739465842a09a8e136
which fixes #434.

==

WORKSPACE
==================
d7034708;Matthew Johnson;2019-02-24 17:03:29 -0800;Merge pull request #443 from google/issue442
fix batchnorm square vs sqrt error (fixes #442)
==
==================
caac8c82;Matthew Johnson;2019-02-24 15:36:20 -0800;minor cleanup of sharded device-persistent values

==

jax/interpreters/pxla.py
==================
7e93bff2;Matthew Johnson;2019-02-24 15:25:10 -0800;fix batchnorm square vs sqrt error (fixes #442)

==

jax/experimental/stax.py
==================
2361f08e;Matthew Johnson;2019-02-24 15:21:00 -0800;sketch basic sharded device persistence (no tests)

==

jax/interpreters/pxla.py
jax/interpreters/xla.py
==================
ffdee451;Matthew Johnson;2019-02-24 12:02:17 -0800;tweak todo comment

==

jax/interpreters/pxla.py
==================
49e600ad;Matthew Johnson;2019-02-24 11:34:12 -0800;minor renaming

==

jax/interpreters/pxla.py
==================
b61b6e11;Matthew Johnson;2019-02-24 10:58:38 -0800;replace global replica count with per-comp config

==

jax/interpreters/pxla.py
jax/lib/xla_bridge.py
==================
dd5b2a68;Peter Hawkins;2019-02-24 13:50:53 -0500;Merge pull request #440 from hawkinsp/master
Expose logsumexp as scipy.special.logsumexp.
==
==================
6ee3c4a8;Matthew Johnson;2019-02-24 09:00:21 -0800;simplify map_transpose summing

==

jax/interpreters/ad.py
==================
95483c76;Peter Hawkins;2019-02-24 11:49:15 -0500;Expose logsumexp as scipy.special.logsumexp.
scipy.misc.logsumexp is deprecated and appears slated to be removed entirely in scipy 1.3.

==

examples/mnist_classifier_fromscratch.py
jax/experimental/stax.py
jax/scipy/misc.py
jax/scipy/special.py
tests/lax_scipy_test.py
==================
daf3e3ff;Matthew Johnson;2019-02-23 21:58:25 -0800;Merge pull request #439 from google/pjit
fix nested pjit transpose bug
==
==================
dd75c564;Matthew Johnson;2019-02-23 20:38:35 -0800;todo note cleanup

==

jax/interpreters/pxla.py
==================
bdd54d66;Matthew Johnson;2019-02-23 20:34:14 -0800;fix up transpose-of-pjit

==

jax/interpreters/ad.py
jax/interpreters/pxla.py
jax/lax.py
tests/pjit_test.py
==================
4a877039;Roy Frostig;2019-02-23 19:10:32 -0800;extend papply tracer's abstract value property to account for container (tuple) types

==

jax/interpreters/batching.py
jax/interpreters/parallel.py
==================
7810476c;Roy Frostig;2019-02-23 19:06:25 -0800;have `papply` take an optional `out_axis` constraint, and issue a final transposition to satisfy it if needed

==

jax/api.py
jax/interpreters/parallel.py
==================
12ed52ea;Matthew Johnson;2019-02-23 12:33:56 -0800;fix typo in a lax error message

==

jax/lax.py
==================
8a2fd90b;Matthew Johnson;2019-02-23 08:09:36 -0800;fix typo in pxla

==

jax/interpreters/pxla.py
==================
b1686a35;Matthew Johnson;2019-02-22 21:56:43 -0800;Merge pull request #431 from google/pjit
update and simplify pjit
==
==================
eacf0650;Matthew Johnson;2019-02-22 21:34:41 -0800;nested pjit split/join (internal tests pass)

==

jax/interpreters/pxla.py
==================
aca49412;Matthew Johnson;2019-02-22 21:11:55 -0800;Merge pull request #437 from google/issue433
fix symbolic zero handling in sub transpose
==
==================
1171626b;Matthew Johnson;2019-02-22 20:42:07 -0800;fix symbolic zero handling in sub transpose
fixes #433

==

jax/lax.py
==================
f08c3b74;Peter Hawkins;2019-02-22 19:41:59 -0500;Merge pull request #436 from hawkinsp/master
Move masking of lower triangle of cholesky into Python code.
==
==================
d6b6514d;Peter Hawkins;2019-02-22 18:31:59 -0500;Move the logic for masking out the lower triangle of cholesky into Python.
A future change to XLA may give xla::Cholesky the LAPACK behavior across backends, so the masking, if we want it at all, needs to be applied to all backends.

==

jax/lax_linalg.py
jaxlib/lapack.pyx
==================
1c648477;Matthew Johnson;2019-02-22 09:18:48 -0800;fix typo in pjit

==

jax/api.py
==================
45c41d9e;Matthew Johnson;2019-02-22 08:13:46 -0800;fix typo in abstract_eval NotImplementedError

==

jax/core.py
==================
121e74f5;Matthew Johnson;2019-02-22 07:56:13 -0800;fix import in api_test.py

==

tests/api_test.py
==================
72e2e5da;Matthew Johnson;2019-02-21 21:41:55 -0800;remove old pjit tests

==

tests/pjit_test.py
==================
fb132b8e;Matthew Johnson;2019-02-21 21:40:10 -0800;misc cleanup

==

jax/api.py
jax/interpreters/partial_eval.py
peval.py
==================
2817c4de;Matthew Johnson;2019-02-21 18:37:51 -0800;grad of pjit!

==

jax/interpreters/ad.py
jax/interpreters/pxla.py
peval.py
==================
8211e433;Matthew Johnson;2019-02-21 13:42:51 -0800;let's get this grad of pjit goin

==

jax/interpreters/pxla.py
peval.py
==================
4c1fc9cf;Matthew Johnson;2019-02-21 11:47:26 -0800;peval.py works again (some paired w/ @dougalm)

==

jax/ad_util.py
jax/core.py
jax/interpreters/partial_eval.py
jax/interpreters/pxla.py
peval.py
==================
f9303fe3;Matthew Johnson;2019-02-20 21:31:06 -0800;progress!

==

jax/api.py
jax/interpreters/pxla.py
peval.py
==================
12c5bdff;Matthew Johnson;2019-02-20 12:36:18 -0800;sketched out new stuff

==

jax/api.py
jax/interpreters/ad.py
jax/interpreters/parallel.py
jax/interpreters/partial_eval.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
jax/lax.py
peval.py
tests/parallel_test.py
tests/pjit_test.py
==================
ae0b5680;Matthew Johnson;2019-02-18 11:37:30 -0800;conceptual progress! need to rewrite jaxpr

==

peval.py
==================
104ff27a;Matthew Johnson;2019-02-15 06:35:54 -0800;wip

==

jax/interpreters/ad.py
jax/interpreters/partial_eval.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
tests/pjit_test.py
==================
86dcb58d;Matthew Johnson;2019-02-04 11:10:38 -0800;fix typo

==

jax/interpreters/pxla.py
==================
e2681ab8;Peter Hawkins;2019-02-22 09:57:41 -0500;Merge pull request #429 from hawkinsp/docs
Add docstrings for lax.gather/scatter.
==
==================
969391ef;Peter Hawkins;2019-02-22 09:12:28 -0500;Make keyword arguments to gather and scatter into positional arguments.

==

jax/lax.py
==================
fb8df7cc;Peter Hawkins;2019-02-22 08:39:18 -0500;Add docstrings for lax.gather/scatter.
Also add `float_power` to the numpy docs.

==

docs/jax.numpy.rst
jax/lax.py
==================
6a843aad;Peter Hawkins;2019-02-21 11:35:40 -0500;Merge pull request #425 from hawkinsp/power
Implement np.float_power.
==
==================
9815914d;Matthew Johnson;2019-02-21 07:34:27 -0800;remove unused jax.numpy.array case (was typo)

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
b033627f;Peter Hawkins;2019-02-21 10:07:33 -0500;Implement np.float_power.

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
0fc5bbb4;Peter Hawkins;2019-02-21 09:47:43 -0500;Merge pull request #422 from hawkinsp/power
Implement np.power for integers
==
==================
7b0bcbe0;Peter Hawkins;2019-02-21 08:21:11 -0500;Only use binary exponentiation for integer/integer power() calls to avoid gradient problems.

==

jax/numpy/lax_numpy.py
==================
4ba7d517;Matthew Johnson;2019-02-20 17:03:31 -0800;bump jaxlib version number for building new wheels

==

build/setup.py
==================
a63a402d;Peter Hawkins;2019-02-20 14:50:16 -0500;Implement np.power for integer exponents.

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
c850a813;Roy Frostig;2019-02-20 11:23:56 -0800;Merge branch 'master' into papply

==
==================
81c27803;Matthew Johnson;2019-02-20 09:49:31 -0800;Merge pull request #420 from google/computation-tracer
add jax.xla_computation to retrieve Computation
==
==================
dc7eab94;Matthew Johnson;2019-02-20 09:03:30 -0800;add jax.xla_computation to retrieve Computation
pair w/ @hawkinsp

==

jax/api.py
jax/interpreters/xla.py
==================
16092bdb;Peter Hawkins;2019-02-20 11:42:54 -0500;Merge pull request #419 from google/primitives2
start adding support for easy custom/hierarchical primitives
==
==================
45d2283a;Matthew Johnson;2019-02-20 08:05:13 -0800;remove example file

==

compound_primitives.py
==================
1ca1e5c4;Matthew Johnson;2019-02-20 08:04:48 -0800;add some underscores to names

==

jax/api.py
==================
6a32229a;Matthew Johnson;2019-02-13 14:54:34 -0800;change filename

==

compound_primitives.py
==================
be1aaa63;Matthew Johnson;2019-02-13 14:29:21 -0800;add example script

==

primitives.py
==================
4a863b92;Matthew Johnson;2019-02-13 14:28:30 -0800;sketch out custom primitive wrapper
Most of this code is copied from an old branch that @dougalm, @duvenaud,
and I triple-programmed together.

==

jax/api.py
jax/interpreters/partial_eval.py
jax/interpreters/xla.py
==================
be81535e;Matthew Johnson;2019-02-20 07:37:49 -0800;add commented-out failing cond test from @dougalm

==

tests/lax_test.py
==================
f0f6b17c;Peter Hawkins;2019-02-20 09:55:46 -0500;Merge pull request #418 from hawkinsp/master
Document jax.disable_jit. Add an example to jax.grad.
==
==================
67174e3d;Peter Hawkins;2019-02-20 09:00:12 -0500;Document jax.disable_jit. Add an example to jax.grad.

==

docs/jax.rst
jax/api.py
==================
7f65ec93;Peter Hawkins;2019-02-20 08:22:12 -0500;Merge pull request #416 from hawkinsp/master
Update XLA release.
==
==================
1ffa5d50;Peter Hawkins;2019-02-20 08:15:52 -0500;Update XLA release.
Updates XLA to https://github.com/tensorflow/tensorflow/commit/e889ea1dd965c31c391106aa3518fc23d2689954, which fixes #304.

==

WORKSPACE
==================
9b0b8703;Peter Hawkins;2019-02-20 08:11:45 -0500;Merge pull request #414 from hawkinsp/docs
Add documentation for jax.jvp and jax.vjp.
==
==================
5163eb34;Peter Hawkins;2019-02-20 08:08:10 -0500;Incorporate review comments into jvp/vjp docs.

==

jax/api.py
==================
c14e4333;Peter Hawkins;2019-02-20 07:27:48 -0500;Merge pull request #413 from hawkinsp/master
Add documentation for more lax functions, notably concatenate and conv.
==
==================
d0e9cf08;Matthew Johnson;2019-02-19 22:12:30 -0800;add shape check for lax.cond predicate

==

jax/lax.py
==================
ff2e8a6c;Matthew Johnson;2019-02-19 22:01:31 -0800;add basic cond tests

==

tests/lax_test.py
==================
575f0c18;Matthew Johnson;2019-02-19 21:45:42 -0800;clean up lax.cond implementation

==

jax/lax.py
==================
cc09cfcb;Matthew Johnson;2019-02-19 21:35:04 -0800;sketch out lax.cond (needs tests, cleanup)

==

jax/lax.py
==================
509e034d;Matthew Johnson;2019-02-19 19:35:02 -0800;put gcd and lcm tests back in correct list

==

tests/lax_numpy_test.py
==================
b714cb30;Peter Hawkins;2019-02-19 22:08:14 -0500;Add documentation for jax.jvp and jax.vjp.

==

docs/jax.rst
jax/api.py
==================
838980a6;Peter Hawkins;2019-02-19 22:05:44 -0500;Fix comment layout.

==

jax/lax.py
==================
f4a73c12;Peter Hawkins;2019-02-19 21:28:01 -0500;Add documentation for more lax functions, notably concatenate and conv.

==

jax/lax.py
==================
34d3d813;Matthew Johnson;2019-02-19 17:32:09 -0800;guard lcm and gcd tests against numpy version

==

tests/lax_numpy_test.py
==================
bf4ea4c0;Matthew Johnson;2019-02-19 17:28:43 -0800;guard against onp.lcm and onp.gcd not existing

==

jax/numpy/lax_numpy.py
==================
d2cabb5f;Peter Hawkins;2019-02-19 16:22:01 -0500;Merge pull request #412 from hawkinsp/master
Implement np.gcd and np.lcm.
==
==================
7fc4e023;Peter Hawkins;2019-02-19 15:57:22 -0500;Implement np.gcd and np.lcm.
Taking the loop primitives out for a spin!

==

docs/jax.numpy.rst
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
51f02915;Peter Hawkins;2019-02-19 15:20:34 -0500;Merge pull request #411 from hawkinsp/master
Update XLA release
==
==================
8cd0d0d4;Peter Hawkins;2019-02-19 14:23:11 -0500;Update XLA release to https://github.com/tensorflow/tensorflow/commit/dafd60bab8ba61717ab4d431ffc6669f1e8c013e
Includes https://github.com/tensorflow/tensorflow/commit/cf1e86da2bf6047e1ee353db871d42f5fd0d8287, which fixes #406, although note a jaxlib rebuild is required (or wait until we make another jaxlib wheel release).

==

WORKSPACE
==================
4e6523db;Peter Hawkins;2019-02-19 14:13:17 -0500;Merge pull request #408 from hawkinsp/master
Add some doc strings to lax primitives.
==
==================
ada555db;Peter Hawkins;2019-02-19 12:31:54 -0500;Merge pull request #410 from hawkinsp/transpose
Add transpose rule for sub_p 
==
==================
5b994613;Peter Hawkins;2019-02-19 12:01:41 -0500;Merge pull request #409 from hawkinsp/version
Use a regular import to add jax.__version__ rather than exec() trickery.
==
==================
81d43ee0;Peter Hawkins;2019-02-19 11:59:37 -0500;Use neg(t) rather than -t in sub_p transpose rule.

==

jax/lax.py
==================
8009bf8d;Peter Hawkins;2019-02-19 11:45:16 -0500;Add transpose rule for sub_p.

==

jax/lax.py
==================
41ac7e2d;Peter Hawkins;2019-02-19 11:38:28 -0500;Use a regular import to add jax.__version__ rather than exec() trickery.
(The exec() trickery is needed for setup.py, but not for jax/__init__.py.)

==

jax/__init__.py
==================
c5aa87f4;Peter Hawkins;2019-02-19 11:30:31 -0500;Add some doc strings to lax primitives.
Since lax is a semipublic API, its public methods need at least minimal documentation. Many of the docstrings added in this PR are somewhat redundant, but at least a few contain useful information, and the documentation reads better with at least some minimal text for each function.

Hide some methods that shouldn't be public from the lax API docs.

==

jax/lax.py
==================
febadd73;Peter Hawkins;2019-02-19 07:29:30 -0500;Add np.roll to the documentation.

==

docs/jax.numpy.rst
==================
97fb6f19;Peter Hawkins;2019-02-18 16:25:12 -0500;Fix formatting of lax.while_loop and lax.fori_loop doc comments.

==

jax/lax.py
==================
a44d248e;Peter Hawkins;2019-02-18 16:20:44 -0500;Merge pull request #405 from hawkinsp/fixes
Remove obsolete workarounds for bugs that seem fixed.
==
==================
5180549c;Peter Hawkins;2019-02-18 16:19:55 -0500;Merge pull request #404 from hawkinsp/numpy
Implement np.roll (#70).
==
==================
70b13ceb;Matthew Johnson;2019-02-18 13:01:42 -0800;Merge pull request #403 from google/improve-loop-construct-docstrings
improve loop construct docs, remove foreach_loop
==
==================
13834ee4;Matthew Johnson;2019-02-18 12:58:35 -0800;add "yet" to while_loop rev-autodiff statement

==

jax/lax.py
==================
32be9668;Peter Hawkins;2019-02-18 15:56:23 -0500;Remove obsolete workarounds for bugs that seem fixed.

==

jax/interpreters/xla.py
tests/lax_numpy_test.py
==================
f3929204;Peter Hawkins;2019-02-18 15:52:32 -0500;Implement np.roll (#70).

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
56398764;Matthew Johnson;2019-02-18 12:44:36 -0800;fix typo

==

jax/lax.py
==================
042a20d2;Matthew Johnson;2019-02-18 12:41:07 -0800;improve loop construct docs, remove foreach_loop

==

jax/lax.py
tests/lax_test.py
==================
b3228331;Peter Hawkins;2019-02-18 15:00:21 -0500;Merge pull request #401 from hawkinsp/master
Remove type conversion table from xla_bridge.py.
==
==================
2738accd;Peter Hawkins;2019-02-18 14:28:59 -0500;Remove type conversion table from xla_bridge.py; we can use the copy in xla_client.py instead.

==

jax/lib/xla_bridge.py
==================
27bedc2a;Peter Hawkins;2019-02-18 12:40:37 -0500;Merge pull request #400 from hawkinsp/master
Support tuples in translation rule for zeros_like_p.
==
==================
16123f1a;Peter Hawkins;2019-02-18 10:00:59 -0500;Write *(...) rather than *tuple(...).

==

jax/interpreters/xla.py
==================
7af4d115;Peter Hawkins;2019-02-18 09:53:27 -0500;Support tuples in translation rule for zeros_like_p.

==

jax/interpreters/xla.py
==================
99abdf9d;Peter Hawkins;2019-02-17 19:55:17 -0500;Merge pull request #399 from hawkinsp/types
Add {float16,uint16,uint8,int16,int8} types to abstract_arrays.
==
==================
848b769a;Peter Hawkins;2019-02-17 17:21:41 -0500;Merge pull request #398 from hawkinsp/master
Fix some test failures.
==
==================
0129e94f;Peter Hawkins;2019-02-17 17:18:20 -0500;Add {float16,uint16,uint8,int16,int8} types to abstract_arrays.
In principle this allows these types to be used. They are as yet untested, however.

Fixes #75.

==

jax/abstract_arrays.py
==================
55115678;Peter Hawkins;2019-02-17 16:58:15 -0500;Fix some test failures.
Raise tolerance for gamma logpdf function.
np.angle apparently returns np.float64 in older numpy versions for a complex64 input but np.float32 in Numpy 1.16.1. Ignore its dtype for testing purposes; JAX follows the newer NumPy semantics.

==

tests/lax_numpy_test.py
tests/scipy_stats_test.py
==================
901a5e52;Peter Hawkins;2019-02-17 15:22:11 -0500;Update Jaxlib version to 0.1.8.

==

README.md
notebooks/XLA_in_Python.ipynb
notebooks/gufuncs.ipynb
notebooks/neural_network_and_data_loading.ipynb
notebooks/neural_network_with_tfds_data.ipynb
notebooks/quickstart.ipynb
==================
f0bd48dd;Matthew Johnson;2019-02-17 11:05:59 -0800;Merge branch 'master' of github.com:google/jax

==
==================
7187c36b;Peter Hawkins;2019-02-17 13:31:12 -0500;Add Python 3.5.6 to the Dockerfile (#386).

==

build/Dockerfile
==================
d669f46b;Peter Hawkins;2019-02-17 13:23:09 -0500;Bump jaxlib version to 0.1.8.

==

build/setup.py
==================
db7a24c0;Peter Hawkins;2019-02-17 13:16:16 -0500;Build wheels for Python 3.5.6 (issue #386).

==

build/build_jaxlib_wheels.sh
build/build_jaxlib_wheels_macos.sh
==================
eb9071c1;Peter Hawkins;2019-02-17 13:11:22 -0500;Update XLA version to current TF github master.
https://github.com/tensorflow/tensorflow/commit/355cc566efd2d86fe71fa9d755ceabe546d577a7

==

WORKSPACE
==================
27723753;Matthew Johnson;2019-02-17 09:58:13 -0800;bump version number for pypi

==

jax/version.py
==================
8756721e;Matthew Johnson;2019-02-17 09:57:38 -0800;Merge pull request #397 from google/fix-dot-batch-rule
fix broken dot batch rule case
==
==================
793e055f;Matthew Johnson;2019-02-17 09:36:18 -0800;enable an old test case (xla bug fixed)

==

tests/batching_test.py
==================
60865a5b;Matthew Johnson;2019-02-17 09:34:49 -0800;fix broken dot batch rule case

==

jax/lax.py
tests/batching_test.py
==================
0bcf3a35;Matthew Johnson;2019-02-17 07:11:03 -0800;Merge pull request #392 from google/infix-operator-tests
tests for numpy operator overloading (some fail!)
==
==================
e6f6810b;Peter Hawkins;2019-02-17 09:25:18 -0500;Remove my name from the XLA colab
Team effort!
==

notebooks/XLA_in_Python.ipynb
==================
606351fc;Peter Hawkins;2019-02-17 09:23:46 -0500;Fix bad merge/edit in gufuncs.ipynb.

==

notebooks/gufuncs.ipynb
==================
70cc8524;Matthew Johnson;2019-02-16 16:11:49 -0800;readme: don't use np.float64(x) (closes #367)

==

README.md
==================
3bf5f332;Matthew Johnson;2019-02-16 08:10:18 -0800;Merge pull request #383 from google/issue347
fix nan handling in pow jvp (fixes #347)
==
==================
6a9b741e;Matthew Johnson;2019-02-16 08:08:04 -0800;add comment in pow_jvp_lhs about calling _safe_mul

==

jax/lax.py
==================
9bf830e1;Matthew Johnson;2019-02-16 08:04:19 -0800;only test __div__ / __rdiv__ on python2

==

tests/lax_numpy_test.py
==================
471c8eba;Matthew Johnson;2019-02-16 07:53:09 -0800;Merge pull request #394 from mshr-h/master
Fix typo in Python scripts and jupyter notebook
==
==================
51478442;Masahiro H;2019-02-16 23:34:41 +0900;Fix typo in variable name

==

notebooks/gufuncs.ipynb
==================
d3acbc1c;Masahiro H;2019-02-16 23:31:27 +0900;Fix typo in PRNGKey docstring

==

jax/random.py
==================
c02fd590;Masahiro H;2019-02-16 23:29:35 +0900;Fix typo in comment

==

jax/numpy/lax_numpy.py
==================
a58c3154;Matthew Johnson;2019-02-15 22:22:58 -0800;Merge pull request #388 from alexalemi/invert
__invert__ doesn't take an argument.
==
==================
639f6135;Matthew Johnson;2019-02-15 22:21:30 -0800;tests for numpy operator overloading (some fail!)

==

jax/core.py
tests/lax_numpy_test.py
==================
36806175;Matthew Johnson;2019-02-15 21:33:42 -0800;Merge pull request #391 from google/issue387
force broadcasting in add_jaxvals_p batching rule
==
==================
f113e113;Matthew Johnson;2019-02-15 21:14:11 -0800;add test for issue387

==

jax/interpreters/batching.py
tests/batching_test.py
==================
635d1ad1;Matthew Johnson;2019-02-15 20:56:10 -0800;force broadcasting in add_jaxvals_p batching rule

==

jax/interpreters/batching.py
==================
58749c0a;Matthew Johnson;2019-02-15 18:32:50 -0800;add lax._safe_mul with 0*inf=0, used in pow jvp

==

jax/lax.py
jax/lib/xla_bridge.py
==================
8791f91b;Peter Hawkins;2019-02-15 19:57:19 -0500;Merge pull request #384 from hawkinsp/master
Fix dimension numbers in LHS transpose rule for conv_general_dilated.
==
==================
4baf9cfb;Peter Hawkins;2019-02-15 19:08:24 -0500;Merge pull request #385 from hawkinsp/eps
Actually use the user-provided epsilon value in tests.
==
==================
1cbf49a4;Matthew Johnson;2019-02-15 15:44:49 -0800;wip

==

jax/lax.py
tests/lax_numpy_test.py
==================
d8b3694b;Alex Alemi;2019-02-15 14:09:06 -0800;__invert__ doesn't take an argument.

==

jax/core.py
==================
382df2e9;Peter Hawkins;2019-02-15 14:01:59 -0500;Actually use the user-provided epsilon value in tests.

==

jax/test_util.py
tests/lax_test.py
==================
b7bc7eaf;Peter Hawkins;2019-02-15 13:16:27 -0500;Add test for conv LHS transpose dimension number bug.

==

tests/lax_test.py
==================
22926811;Peter Hawkins;2019-02-15 12:54:02 -0500;Fix dimension numbers in LHS transpose rule for conv_general_dilated.
Fixes #380.

==

jax/lax.py
==================
708c7644;Peter Hawkins;2019-02-15 10:59:16 -0500;Merge pull request #382 from hawkinsp/master
Improve JAX API docs.
==
==================
98dcf264;Matthew Johnson;2019-02-15 07:04:57 -0800;fix nan handling in pow jvp (fixes #347)

==

jax/lax.py
tests/lax_numpy_test.py
==================
15e6c271;Peter Hawkins;2019-02-15 08:16:25 -0500;Improve JAX API docs.
Add examples for `jax.jit`, `jax.jacfwd`, and `jax.jacrev`.
Document `jax.hessian`. Add `argnums` support to `jax.hessian`.

==

docs/jax.rst
jax/api.py
==================
b821e63e;Peter Hawkins;2019-02-14 20:03:31 -0500;Merge pull request #379 from hawkinsp/master
Add docstring for jax.make_jaxpr.
==
==================
3b8b6415;Peter Hawkins;2019-02-14 19:08:04 -0500;Incorporate suggestions from mattjj.

==

jax/api.py
==================
9da6e0e9;Peter Hawkins;2019-02-14 11:58:18 -0500;Add docstring for jax.make_jaxpr.
Minor edits to docstring for jax.vmap to improve rendering.

==

jax/api.py
==================
fc4c8bdd;Matthew Johnson;2019-02-14 08:45:33 -0800;Merge pull request #358 from levskaya/master
added jvp rule for eigh, tests
==
==================
b0db87ba;Peter Hawkins;2019-02-14 11:21:46 -0500;Merge pull request #378 from hawkinsp/master
Set the __wrapped__ attribute in api_util.wraps to fix doc strings.
==
==================
3e25d290;Peter Hawkins;2019-02-14 11:00:40 -0500;Set __wrapped__ attribute instead of using functools.wraps to fix Python 2.7 problem.

==

jax/api_util.py
==================
33cd3d02;Peter Hawkins;2019-02-14 10:07:47 -0500;Use functools.wraps as the basis for api_util.wraps.
Fixes API signatures in `jax.random` documentation (https://github.com/google/jax/issues/370).

==

jax/api_util.py
==================
08ea2e20;Matthew Johnson;2019-02-14 06:05:03 -0800;Merge pull request #376 from levskaya/py_xla_nb
added XLA in python demo notebook
==
==================
ad489489;Anselm Levskaya;2019-02-14 03:48:09 -0800;added XLA in python demo notebook

==

notebooks/XLA_in_Python.ipynb
==================
cd220504;Anselm Levskaya;2019-02-14 02:28:00 -0800;actually test relative error

==

jax/lax_linalg.py
tests/linalg_test.py
==================
8cd3f448;Anselm Levskaya;2019-02-13 23:44:41 -0800;fix missing symmetrize_input arg

==

jax/lax_linalg.py
jax/numpy/linalg.py
tests/linalg_test.py
==================
ed437b40;Anselm Levskaya;2019-02-13 23:23:39 -0800;fix testing of eigh jvp rule

==

jax/lax_linalg.py
tests/linalg_test.py
==================
f2f43cc1;Matthew Johnson;2019-02-13 22:26:07 -0800;Merge pull request #374 from google/add-version-attribute
add version attribute
==
==================
8a84ae8d;Anselm Levskaya;2019-02-11 23:26:26 -0800;added jvp rule for eigh, tests

==

jax/lax_linalg.py
jax/numpy/linalg.py
tests/linalg_test.py
==================
910848af;Matthew Johnson;2019-02-13 20:05:15 -0800;fix typo in random.py docstring

==

jax/random.py
==================
9a9c3046;Matthew Johnson;2019-02-13 20:02:14 -0800;add version attribute
following idea 3 here:
https://packaging.python.org/guides/single-sourcing-package-version/

==

jax/__init__.py
jax/version.py
setup.py
==================
9ba27bec;Matthew Johnson;2019-02-13 19:43:36 -0800;Merge pull request #373 from google/prng-docs
add jax.random to jax.readthedocs.io
==
==================
11122bc8;Matthew Johnson;2019-02-13 19:42:47 -0800;improve jax.random docs

==

jax/random.py
==================
9cf24029;Matthew Johnson;2019-02-13 19:31:41 -0800;add jax.random entry to jax.rst

==

docs/jax.rst
==================
c467bbfe;Matthew Johnson;2019-02-13 19:21:55 -0800;add jax.random to docs

==

docs/jax.random.rst
==================
9cd28d12;Matthew Johnson;2019-02-13 14:55:23 -0800;bump version for pypi

==

setup.py
==================
63608fb9;Peter Hawkins;2019-02-13 13:30:09 -0500;Merge pull request #363 from gautam1858/master
Update latex_test.py
==
==================
2ee457ec;Matthew Johnson;2019-02-13 10:20:03 -0800;Merge pull request #369 from google/loop-improvements
add random.fold_in, update mnist_vae.py w/ loop improvements
==
==================
547cbcac;Matthew Johnson;2019-02-13 09:57:48 -0800;Merge pull request #356 from google/cholesky
improve cholesky jvp, misc other improvements (closes #354)
==
==================
89dc3eb8;Matthew Johnson;2019-02-13 09:56:53 -0800;rename lax._while_loop -> lax.while_loop

==

jax/lax.py
tests/lax_test.py
==================
0ff98a74;Matthew Johnson;2019-02-13 09:55:36 -0800;add random.fold_in, update mnist_vae.py loops

==

examples/mnist_vae.py
jax/random.py
tests/random_test.py
==================
25169ef7;Matthew Johnson;2019-02-13 09:23:42 -0800;remove duplicate tests from a bad merge

==

tests/batching_test.py
==================
e4dafb6d;Matthew Johnson;2019-02-13 09:20:40 -0800;Merge pull request #368 from google/promotion-issue
fix dtype/shape promotion order in some numpy funcs
==
==================
78fd9e1a;Matthew Johnson;2019-02-11 16:18:13 -0800;debug cholesky grad, remove stale dot_general check

==

jax/lax.py
jax/lax_linalg.py
jax/numpy/linalg.py
jax/scipy/linalg.py
tests/batching_test.py
tests/linalg_test.py
==================
27210d0e;Peter Hawkins;2019-02-11 17:39:07 -0500;Add support for Cholesky batched JVP.
Add a Cholesky JVP test.

==

jax/lax_linalg.py
tests/linalg_test.py
==================
2865cfac;Matthew Johnson;2019-02-13 08:59:21 -0800;fix shape/dtype promotion order in some numpy funs

==

jax/numpy/lax_numpy.py
==================
fcdf2251;Matthew Johnson;2019-02-13 08:52:42 -0800;another dtype promotion issue

==

tests/lax_numpy_test.py
==================
414d3135;Matthew Johnson;2019-02-13 08:33:33 -0800;Merge pull request #362 from google/promotion-issue
improve the dtype promotion logic against Python scalars
==
==================
bbf33709;Matthew Johnson;2019-02-13 08:31:48 -0800;switch builtin numeric types on six.PY3

==

jax/numpy/lax_numpy.py
==================
cc13fd1e;Gautam;2019-02-13 21:56:52 +0530;Update lapax_test.py

==

tests/lapax_test.py
==================
8df660e9;Matthew Johnson;2019-02-13 08:25:11 -0800;use more _const and _constant_like helpers

==

jax/lax.py
jax/numpy/lax_numpy.py
==================
ea9c3113;Matthew Johnson;2019-02-13 08:15:48 -0800;remove 'long' because it's not in py3

==

jax/numpy/lax_numpy.py
==================
9425fa81;Matthew Johnson;2019-02-13 08:14:32 -0800;add 'long' and 'complex' to pyval promotion logic

==

jax/numpy/lax_numpy.py
==================
cad7db76;Matthew Johnson;2019-02-13 08:06:37 -0800;improve numpy dtype promo logic on Python scalars

==

jax/lax.py
jax/numpy/lax_numpy.py
==================
7e4e8c82;Gautam;2019-02-13 14:10:29 +0530;Update latex_test.py
Replacing all {np.float32, np.float64} with _cpu_lapack_types variable
==

tests/lapax_test.py
==================
0aae62c7;Matthew Johnson;2019-02-12 19:56:00 -0800;add test for dtype promotion against scalars

==

tests/lax_numpy_test.py
==================
573f0475;Matthew Johnson;2019-02-12 15:42:06 -0800;tweak linearize user-level api: *args not args

==

jax/api.py
tests/core_test.py
==================
a9aa18ca;Matthew Johnson;2019-02-12 15:40:24 -0800;Merge pull request #361 from matthewdhoffman/master
Add notebook demonstrating autobatched-log-probs vmap use case.
==
==================
4151efd1;Matt Hoffman;2019-02-12 13:37:24 -0800;Add notebook demonstrating autobatched-log-probs vmap use case.

==

notebooks/vmapped log-probs.ipynb
==================
63f757c9;Matthew Johnson;2019-02-12 12:47:14 -0800;skip scipy.stats.multivariate_normal test gpu/tpu

==

tests/scipy_stats_test.py
==================
3d0bf918;Matthew Johnson;2019-02-12 12:29:52 -0800;Merge pull request #360 from google/loop-fixes-with-dougalm
Loop fixes with dougalm
==
==================
2d6b0fca;Matthew Johnson;2019-02-12 12:03:58 -0800;fix list comprehension bug (py3 caught it!)

==

jax/interpreters/xla.py
==================
388ca39b;Matthew Johnson;2019-02-12 11:36:36 -0800;tweak for readability

==

jax/interpreters/xla.py
==================
34b07d0e;Matthew Johnson;2019-02-12 11:32:25 -0800;handle jit-in-while (const handling in xla.py)

==

jax/interpreters/xla.py
tests/lax_test.py
==================
3e58e742;Matthew Johnson;2019-02-12 07:46:43 -0800;Merge pull request #359 from google/fix-transpose-batching-rule
fix transpose batching rule bug, add tests
==
==================
adaea811;Matthew Johnson;2019-02-12 07:26:32 -0800;fix transpose batching rule bug, add tests

==

jax/lax.py
tests/batching_test.py
==================
81fbcaaa;Roy Frostig;2019-02-11 17:08:30 -0800;Merge branch 'master' into papply

==
==================
98ace13a;Roy Frostig;2019-02-11 17:02:16 -0800;Merge pull request #355 from JasperSnoek/master
Adding a Gaussian process example
==
==================
0c15bdbc;Matthew Johnson;2019-02-11 14:19:22 -0800;todo in multivariate_normal.logpdf dtype promotion

==

jax/scipy/stats/multivariate_normal.py
==================
e3ba3a8f;Matthew Johnson;2019-02-11 14:17:11 -0800;Merge pull request #268 from HerculesJack/stats_pdf
Add multivariate_normal and pdf to jax.scipy.stats
==
==================
130694af;Jasper Snoek;2019-02-11 16:41:51 -0500;Adding a Gaussian process example

==

examples/gaussian_process_regression.py
==================
a26fa984;Matthew Johnson;2019-02-11 13:38:04 -0800;fix examples_test

==

examples/examples_test.py
==================
0c2cd5f8;Matthew Johnson;2019-02-11 13:32:22 -0800;tweaks to make internal tests pass

==

examples/examples_test.py
tests/linalg_test.py
==================
15706565;Roy Frostig;2019-02-11 13:25:11 -0800;Merge branch 'master' into papply

==
==================
9b477756;Roy Frostig;2019-02-11 13:24:55 -0800;sketch of a papply rule for `lax.dot` (not working), pmap rule for pcollect, and a test for papply of `lax.dot` (not passing)

==

jax/lax.py
jax/lax_parallel.py
tests/parallel_test.py
==================
1318ad8a;Matthew Johnson;2019-02-11 12:47:50 -0800;Merge pull request #353 from google/scatter-batching-rule
Scatter batching rule (closes #350)
==
==================
f8b48cb1;Matthew Johnson;2019-02-11 12:46:17 -0800;add comment explaining scatter batching rule logic

==

jax/lax.py
==================
d3aa15b1;Matthew Johnson;2019-02-11 12:09:42 -0800;Merge branch 'master' into scatter-batching-rule

==
==================
1e44dd41;Matthew Johnson;2019-02-11 12:03:06 -0800;Merge pull request #351 from google/gather-batching-rule
Gather batching rule
==
==================
e3b9df14;Matthew Johnson;2019-02-11 11:40:08 -0800;complete scatter batching rule

==

jax/lax.py
tests/batching_test.py
==================
65c023d2;Matthew Johnson;2019-02-11 10:24:21 -0800;start adding scatter batching rule

==

jax/lax.py
tests/batching_test.py
==================
90d92a5a;Matthew Johnson;2019-02-11 11:30:44 -0800;fix gather batching rule bug

==

jax/lax.py
==================
d5ee720a;Matthew Johnson;2019-02-11 11:21:29 -0800;more testing of gather batching rule

==

jax/lax.py
tests/batching_test.py
tests/lax_test.py
==================
1b0069ff;Peter Hawkins;2019-02-11 12:33:25 -0500;Merge pull request #348 from hawkinsp/master
Reenable scatter/gather tests on TPU.
==
==================
cccc0304;Matthew Johnson;2019-02-11 09:28:21 -0800;finish gather batching rule, pair w/ @hawkinsp

==

jax/lax.py
tests/batching_test.py
==================
6dfe2d6e;Matthew Johnson;2019-02-10 18:36:21 -0800;add numpy indexing batching tests

==

jax/lax.py
tests/batching_test.py
==================
b53eb241;Matthew Johnson;2019-02-06 10:58:41 -0800;gather passing all operand vmap tests

==

jax/lax.py
tests/batching_test.py
==================
a29864c8;Peter Hawkins;2019-02-10 16:17:14 -0500;Reenable scatter/gather tests on TPU.

==

tests/lax_test.py
==================
b6cb3509;Matthew Johnson;2019-02-05 09:29:47 -0800;progress on a gather vmap rule, PAIR=hawkinsp

==

jax/lax.py
==================
cde5c925;Matthew Johnson;2019-02-03 09:00:16 -0800;start to sketch out gather batching rule (WIP)

==

jax/lax.py
==================
6107881f;Roy Frostig;2019-02-08 15:14:29 -0800;Merge branch 'master' into papply

==
==================
ea09fb4f;Roy Frostig;2019-02-08 15:14:01 -0800;fix psplit pmap rule

==

jax/lax.py
==================
42b3218e;Matthew Johnson;2019-02-08 14:20:17 -0800;Merge pull request #346 from gdahia/fix-readme-toy-example
Fix README toy example incomplete `label_probs` var renaming
==
==================
197755b0;Gabriel Dahia;2019-02-08 16:24:43 -0300;Fix README toy example incomplete var renaming
Rename of `label_probs` into `label_logprobs` in the toy example was
incomplete and, as a consequence, the toy example no longer worked. This
renames `label_probs` completely and fixes the toy example.

==

README.md
==================
0ca09685;Matthew Johnson;2019-02-08 11:13:55 -0800;Merge pull request #338 from gdahia/fix-readme-toy-example
Change implementation of negative log-likelihood in README toy example
==
==================
2ba03300;Peter Hawkins;2019-02-08 13:51:38 -0500;Merge pull request #345 from hawkinsp/master
Enable the remaining einsum tests.
==
==================
80bbdbbb;Gabriel Dahia;2019-02-08 15:28:19 -0300;Rename `label_probs` -> `label_logprobs` in README

==

README.md
==================
b06f08e6;Peter Hawkins;2019-02-08 13:24:08 -0500;Enable the remaining einsum tests.
Fixes #37.

==

tests/lax_numpy_einsum_test.py
==================
3d7b7f7f;Peter Hawkins;2019-02-08 12:21:01 -0500;Merge pull request #344 from hawkinsp/master
Update jaxlib references to 0.1.7.
==
==================
20c97373;Peter Hawkins;2019-02-08 11:48:32 -0500;Update jaxlib references to 0.1.7.
Enable einsum tests (issue #37).

==

README.md
notebooks/gufuncs.ipynb
notebooks/neural_network_and_data_loading.ipynb
notebooks/neural_network_with_tfds_data.ipynb
notebooks/quickstart.ipynb
tests/lax_numpy_einsum_test.py
==================
1e2c81c6;Peter Hawkins;2019-02-08 10:45:55 -0500;Merge pull request #343 from hawkinsp/master
Update XLA.
==
==================
edd98161;Peter Hawkins;2019-02-08 10:43:18 -0500;Update XLA.
Includes:
https://github.com/tensorflow/tensorflow/commit/294858ccb2a5cd44072378afd6d18cc61ab83e76
which fixes https://github.com/google/jax/issues/342 . Note, this requires a new Jaxlib release or building from source.

==

WORKSPACE
==================
95bed103;Peter Hawkins;2019-02-08 08:42:37 -0500;Fix minor bug in wheel building script.
Preinstall bazel in Docker image.

==

build/Dockerfile
build/build_jaxlib_wheels.sh
==================
a41487f6;Peter Hawkins;2019-02-08 08:31:16 -0500;Bump Jaxlib version to 0.1.7.

==

build/setup.py
==================
6a0c780f;Peter Hawkins;2019-02-07 22:36:43 -0500;Merge pull request #340 from hawkinsp/backend
Add support for pluggable backends to JAX.
==
==================
4fa03109;Peter Hawkins;2019-02-07 22:26:48 -0500;Merge pull request #341 from hawkinsp/xla
Update XLA.
==
==================
241e9b1d;Peter Hawkins;2019-02-07 22:18:17 -0500;Update XLA.
XLA synced to revision:
https://github.com/tensorflow/tensorflow/commit/9bb620cbf9a9246bb1c3eb7ce797f7d2d525887c

==

WORKSPACE
==================
daa9bae5;Peter Hawkins;2019-02-07 17:48:22 -0500;Add support for pluggable backends to JAX.
Add a mechanism to test for a minimum Jaxlib version. This allows us to safely remove code that defensively
checks for old Jaxlib versions using mechanisms like `hasattr(module, function)` once we have incremented the
minimum Jaxlib version to something sufficiently new.

==

jax/lib/xla_bridge.py
==================
09ee9823;Matthew Johnson;2019-02-07 09:38:45 -0800;Merge pull request #337 from google/issue252
add flag to disable jit globally (fixes #252)
==
==================
878048b8;Peter Hawkins;2019-02-07 11:22:40 -0500;Merge pull request #339 from hawkinsp/numpy
Implement np.linalg.norm.
==
==================
175c779b;Peter Hawkins;2019-02-07 11:02:56 -0500;Add np.linalg.norm to the docs.

==

docs/jax.numpy.rst
==================
55acfb15;Peter Hawkins;2019-02-07 10:51:55 -0500;Implement np.linalg.norm.

==

jax/numpy/lax_numpy.py
jax/numpy/linalg.py
tests/linalg_test.py
==================
e1ec373a;Roy Frostig;2019-02-07 07:51:38 -0800;Merge branch 'master' into papply

==
==================
74be6d14;Roy Frostig;2019-02-07 07:51:09 -0800;generalized tranpose papply

==

jax/lax.py
tests/parallel_test.py
==================
d319f580;Gabriel Dahia;2019-02-07 11:09:10 -0300;Fix toy example negative log-likelihood loss

==

README.md
==================
ff1f5fc6;Peter Hawkins;2019-02-07 08:09:12 -0500;Rename jax.experimental.minmax to jax.experimental.optimizers in the documentation.

==

docs/jax.experimental.optimizers.rst
==================
62db126e;Alex Wiltschko;2019-02-06 23:49:44 -0500;Merge pull request #293 from rsepassi/tfds
Add tfds notebook
==
==================
99bbd5b9;Matthew Johnson;2019-02-06 20:02:54 -0800;Merge pull request #336 from google/rename-minmax
rename "minmax" -> "optimizers"
==
==================
a36812da;Matthew Johnson;2019-02-06 19:44:12 -0800;add context manager for disabling jit

==

jax/api.py
tests/api_test.py
==================
75a2745d;Matthew Johnson;2019-02-06 19:20:39 -0800;add flag to disable jit globally (fixes #252)

==

jax/api.py
==================
d09a5803;Roy Frostig;2019-02-06 13:23:02 -0800;Add a psplit primitive with pmap rules, enable papply/pmap test for add-after-transpose.
Also: remove pjit-related rules for pswapaxes.

==

jax/lax.py
jax/lax_parallel.py
tests/parallel_test.py
==================
5ae8ab46;Matthew Johnson;2019-02-06 11:05:21 -0800;rename test file too

==

tests/optimizers_test.py
==================
5847d961;Matthew Johnson;2019-02-06 11:02:16 -0800;rename "minmax" -> "optimizers"

==

README.md
docs/jax.experimental.minmax.rst
docs/jax.experimental.rst
examples/advi.py
examples/kernel_lsq.py
examples/mnist_classifier.py
examples/mnist_vae.py
examples/resnet50.py
jax/BUILD
jax/experimental/optimizers.py
tests/minmax_test.py
==================
3794432c;Roy Frostig;2019-02-06 10:25:36 -0800;rename pjit test class

==

tests/pjit_test.py
==================
ce74bc55;Dougal Maclaurin;2019-02-06 11:49:21 -0500;Handle closed-over tracers in while loop cond and body functions

==

jax/core.py
jax/interpreters/xla.py
jax/lax.py
tests/lax_test.py
==================
828a434b;Matthew Johnson;2019-02-06 09:46:58 -0800;Merge pull request #335 from google/issue330
fix lax.full handling of DeviceConstant scalars
==
==================
1636d058;Matthew Johnson;2019-02-06 09:23:34 -0800;fix lax.full handling of DeviceConstant scalars
fixes #330

==

jax/lax.py
tests/lax_numpy_test.py
==================
26a02716;Roy Frostig;2019-02-06 09:07:35 -0800;Merge branch 'master' into papply

==
==================
ab141ca0;Roy Frostig;2019-02-06 09:07:01 -0800;add papply transpose (rank 2, square) via a pswapaxes primitive, and add pmap/pjit rules for the latter

==

jax/lax.py
jax/lax_parallel.py
tests/parallel_test.py
==================
bf2abc88;Peter Hawkins;2019-02-06 09:40:26 -0500;Merge pull request #333 from hawkinsp/numpy
Implement np.heaviside.
==
==================
9338d3d7;Peter Hawkins;2019-02-06 09:05:53 -0500;Implement np.heaviside.

==

docs/jax.numpy.rst
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
66b8e59d;Peter Hawkins;2019-02-06 09:05:13 -0500;Merge pull request #332 from hawkinsp/numpy
Add axis argument to np.stack. Implement np.{dstack,atleast_3d}.
==
==================
7edd1337;Peter Hawkins;2019-02-06 08:40:43 -0500;Add axis argument to np.stack. Implement np.{dstack,atleast_3d}.

==

docs/jax.numpy.rst
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
a75d1c6e;Matthew Johnson;2019-02-05 19:06:29 -0800;bump version for pypi

==

setup.py
==================
198890e1;Ryan Sepassi;2019-02-05 17:14:46 -0800;fix tfds colab bug and model training

==

notebooks/neural_network_with_tfds_data.ipynb
==================
f3bc9d48;Ryan Sepassi;2019-01-29 23:03:30 -0800;Add tfds notebook

==

notebooks/neural_network_with_tfds_data.ipynb
==================
bc5529c1;Peter Hawkins;2019-02-05 19:42:44 -0500;Merge pull request #326 from hawkinsp/special
Add implementations of scipy.special.{expit,logit}.
==
==================
9e7e934b;Peter Hawkins;2019-02-05 19:17:21 -0500;Add tests for logit and expit.

==

tests/lax_scipy_test.py
==================
0fe1f477;Matthew Johnson;2019-02-05 13:57:07 -0800;Merge pull request #328 from google/ptp-numpy-version-robustness
gate np.ptp tests by numpy version check >= 1.15
==
==================
b0c9fb80;Matthew Johnson;2019-02-05 13:47:09 -0800;gate np.ptp tests by numpy version check >= 1.15

==

tests/lax_numpy_test.py
==================
9b520d95;Matthew Johnson;2019-02-05 13:16:32 -0800;Merge pull request #323 from google/jax-internal-test-fixups
tweaks so einsum and spstats tests run internally
==
==================
2f5d8094;Matthew Johnson;2019-02-05 10:53:45 -0800;parse options with absl in scipy_stats_test

==

tests/scipy_stats_test.py
==================
23f51690;Matthew Johnson;2019-02-05 10:51:51 -0800;Merge pull request #327 from google/cholesky-batching-rule
add batching rule for cholesky PAIR=phawkins
==
==================
4cfee982;Peter Hawkins;2019-02-05 13:27:18 -0500;Add implementations of scipy.special.{expit,logit}.

==

jax/scipy/special.py
==================
ceda6026;Matthew Johnson;2019-02-05 08:39:03 -0800;add batching rule for cholesky PAIR=phawkins

==

jax/interpreters/batching.py
jax/lax_linalg.py
tests/batching_test.py
==================
fce159b5;Peter Hawkins;2019-02-05 10:53:21 -0500;Merge pull request #322 from hawkinsp/numpy
Implement np.{empty,empty_like,ptp,isreal,iscomplex,sinc,vander,positive}.
==
==================
52254d76;Matthew Johnson;2019-02-05 07:52:56 -0800;tweaks so einsum and spstats tests run internally

==

tests/lax_numpy_einsum_test.py
tests/scipy_stats_test.py
==================
aeac4535;Roy Frostig;2019-02-05 07:50:32 -0800;take an explicit anticipated axis size in `papply`, for now

==

jax/api.py
jax/interpreters/parallel.py
tests/parallel_test.py
==================
5efe0d49;Matthew Johnson;2019-02-05 07:45:21 -0800;Merge branch 'master' of github.com:google/jax

==
==================
c5433bd8;Peter Hawkins;2019-02-05 08:58:57 -0500;Implement np.{empty,empty_like,ptp,isreal,iscomplex,sinc,vander,positive}.
Fix bug in definition of `np.imag` for real numbers.
Fix wrong output (pi vs 0) for `np.angle` for negative real numbers. Fix semantics of angle for integers.

Issue #70

==

docs/jax.numpy.rst
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
02438161;Peter Hawkins;2019-02-05 08:06:31 -0500;Merge pull request #321 from hawkinsp/linalg
Implement scipy.linalg.{cho_factor,cho_solve}.
==
==================
066ba2a6;Peter Hawkins;2019-02-04 22:30:32 -0500;Implement scipy.linalg.{cho_factor,cho_solve}.
This is mostly just a refactoring of scipy.linalg.solve for the sym_pos=True case into two separate functions.

==

jax/scipy/linalg.py
==================
d05e7ccb;Peter Hawkins;2019-02-04 22:14:27 -0500;Merge pull request #320 from hawkinsp/linalg
Fix some TODOs in linalg: use gather instead of matmul
==
==================
84c30f77;Peter Hawkins;2019-02-04 21:49:50 -0500;Merge pull request #319 from hawkinsp/numpy
Forward np.{bartlett,blackman,hamming,hanning,kaiser} to numpy.
==
==================
652f0df0;Peter Hawkins;2019-02-04 21:48:03 -0500;Fix some TODOs in linalg: use gather instead of matmul to permute matrix rows.

==

jax/lax_linalg.py
jax/numpy/linalg.py
==================
1a9c9453;Matthew Johnson;2019-02-04 18:39:25 -0800;Merge pull request #318 from levskaya/master
actually fix nondeterminism in einsum
==
==================
980ea88b;Peter Hawkins;2019-02-04 21:26:58 -0500;Forward np.{bartlett,blackman,hamming,hanning,kaiser} to numpy.

==

docs/jax.numpy.rst
jax/numpy/lax_numpy.py
==================
34159f46;Roy Frostig;2019-02-04 18:00:15 -0800;partial fix of ptranspose rules

==

jax/lax.py
jax/lax_parallel.py
==================
873fe12e;Roy Frostig;2019-02-04 16:31:24 -0800;post-merge fixes

==

jax/interpreters/parallel.py
jax/interpreters/pxla.py
jax/lax.py
jax/lax_parallel.py
==================
1d26c6bf;Anselm Levskaya;2019-02-04 16:30:22 -0800;add test-case for nondeterminism in front batch dim equal case in einsum
This is a test for the observed (and hopefully fixed) nondeterminism in the case of already-front, already-ordered batch_dims.
==

tests/lax_numpy_einsum_test.py
==================
893cf828;Anselm Levskaya;2019-02-04 16:22:39 -0800;actually fix the nondeterminism error in einsum batchdims
In the case where front batch_dims are already ordered correctly, fix the batch_names ordering to be correct.
==

jax/numpy/lax_numpy.py
==================
52647202;Roy Frostig;2019-02-04 15:49:52 -0800;Merge branch 'master' into papply

==
==================
aa251950;Roy Frostig;2019-02-04 15:19:58 -0800;create lax_parallel and move parallel rules and primitives to enable a valid module import structure

==

jax/interpreters/parallel.py
jax/lax.py
jax/lax_parallel.py
tests/parallel_test.py
==================
c935bba3;Peter Hawkins;2019-02-04 17:51:09 -0500;Fix missing quoting in notebooks.

==

notebooks/gufuncs.ipynb
notebooks/neural_network_and_data_loading.ipynb
notebooks/quickstart.ipynb
==================
7659873d;Peter Hawkins;2019-02-04 17:48:13 -0500;Make notebooks robust to CUDA upgrades.

==

notebooks/gufuncs.ipynb
notebooks/neural_network_and_data_loading.ipynb
notebooks/quickstart.ipynb
==================
91704ad2;Peter Hawkins;2019-02-04 10:45:50 -0500;Add new numpy functions to docs.

==

docs/jax.numpy.rst
==================
5e62f00d;Peter Hawkins;2019-02-04 09:55:46 -0500;Merge pull request #316 from hawkinsp/numpy
Add np.{hsplit,vsplit,dsplit,deg2rad,rad2deg,degrees,radians,hypot,reciprocal,product}.
==
==================
aed00fe3;Peter Hawkins;2019-02-04 08:47:31 -0500;Add np.{hsplit,vsplit,dsplit,deg2rad,rad2deg,degrees,radians,hypot,reciprocal,product}.
Forward np.{issubsctype,array_str,array_repr} to numpy.

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
723e3c46;Anselm Levskaya;2019-02-04 03:52:23 -0800;make einsum deterministic, correct.
Fixes a nondeterministic batch-dimension reordering error that was caused by using a python set collection ordering to fix the final output permutations
==

jax/numpy/lax_numpy.py
==================
c3a5a860;He Jia;2019-02-04 10:49:25 +0800;python2 does not have @, so use np.dot instead

==

jax/scipy/stats/multivariate_normal.py
==================
9804b18e;Peter Hawkins;2019-02-03 21:33:51 -0500;Reenable another test that passes.

==

tests/lax_test.py
==================
23f47182;He Jia;2019-02-04 10:17:03 +0800;Update scipy_stats_test.py

==

tests/scipy_stats_test.py
==================
d51e7c3e;He Jia;2019-02-04 10:15:27 +0800;Fix dtype problem for x64

==

jax/scipy/stats/multivariate_normal.py
==================
627ca7de;Peter Hawkins;2019-02-03 21:10:03 -0500;Reenable some tests that pass.
Add bug IDs to some failing tests.

==

tests/lax_test.py
==================
76decd2a;Matthew Johnson;2019-02-03 15:03:22 -0800;version bump for pypi

==

setup.py
==================
aa5c375d;Matthew Johnson;2019-02-03 14:58:32 -0800;Merge pull request #313 from google/skip-some-tests
skip some cases to satisfy internal tests
==
==================
9846c9c7;Matthew Johnson;2019-02-03 14:37:55 -0800;skip some cases to satisfy internal tests

==

tests/lax_numpy_test.py
tests/lax_test.py
tests/linalg_test.py
==================
bf7a438c;Matthew Johnson;2019-02-03 14:00:51 -0800;add more special cases of select batching rule

==

jax/lax.py
==================
44cffd00;Matthew Johnson;2019-02-03 13:48:11 -0800;Merge pull request #310 from google/issue292
improve error messages for lax.slice/index funs
==
==================
dc1939f2;Matthew Johnson;2019-02-03 10:18:33 -0800;Merge pull request #312 from google/issue311
generalize select batch rule (fixes #311)
==
==================
583b6547;Matthew Johnson;2019-02-03 10:01:06 -0800;add an efficient special case to select batch rule

==

jax/lax.py
==================
5344e7ae;Matthew Johnson;2019-02-03 09:52:33 -0800;add lax.select broadcasting tests, improve rule

==

jax/interpreters/batching.py
jax/lax.py
tests/batching_test.py
==================
fe96c15d;Matthew Johnson;2019-02-03 09:27:03 -0800;generalize select batch rule (fixes #311)

==

jax/lax.py
==================
e3df64e4;He Jia;2019-02-03 23:37:37 +0800;Update scipy_stats_test.py
1. Add testMultivariateNormalLogPdf, though currently it only tests dim=4 case
2. Add testGammaLogPdf
2. Remove some onp.abs because rand_positive is used
==

tests/scipy_stats_test.py
==================
0afb6202;Matthew Johnson;2019-02-02 21:41:06 -0800;improve error messages for lax.slice/index funs
c.f. #292

==

jax/lax.py
==================
1ab4a2ea;Matthew Johnson;2019-02-02 18:37:00 -0800;Merge pull request #308 from google/pjit
update pjit: full closure, nesting, grad of pjit
==
==================
901e221c;Matthew Johnson;2019-02-02 17:23:40 -0800;fix python3 bug

==

jax/interpreters/pxla.py
==================
72999172;Matthew Johnson;2019-02-02 17:03:07 -0800;remove pjit_model.py for merge

==

pjit_model.py
==================
2801b364;Matthew Johnson;2019-02-02 17:01:44 -0800;fix broken test

==

jax/interpreters/pxla.py
==================
7d1527b4;Matthew Johnson;2019-02-02 17:00:52 -0800;revise parallel model file

==

pjit_model.py
==================
b16b4ddf;Matthew Johnson;2019-02-02 16:18:43 -0800;the many ways to pjit a cat

==

jax/interpreters/pxla.py
jax/numpy/lax_numpy.py
pjit_model.py
==================
a8c27681;Matthew Johnson;2019-02-02 15:37:04 -0800;make pjit out_axes=None work

==

jax/interpreters/pxla.py
pjit_model.py
tests/batching_test.py
==================
055beb90;Matthew Johnson;2019-02-02 13:30:54 -0800;Merge branch 'master' into pjit

==
==================
f5cffd72;Matthew Johnson;2019-02-02 12:17:11 -0800;delete more dead index_take code

==

jax/lax.py
==================
7ea2bd72;Matthew Johnson;2019-02-02 11:15:21 -0800;Merge pull request #307 from google/use-gather-for-indexing
index_take in terms of gather, delete index_untake
==
==================
9f3060a0;Matthew Johnson;2019-02-02 09:22:37 -0800;index_take in terms of gather, delete index_untake
(c.f. #304)

==

jax/lax.py
jax/numpy/lax_numpy.py
tests/lax_test.py
==================
fec5f475;Peter Hawkins;2019-02-02 09:47:55 -0500;Add `np.take` to the documentation index.

==

docs/jax.numpy.rst
==================
9480c983;Peter Hawkins;2019-02-02 09:42:41 -0500;Merge pull request #306 from hawkinsp/take
Implement np.take (#70).
==
==================
eb80ef68;Peter Hawkins;2019-02-01 19:32:09 -0500;Implement np.take (#70).

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
f69dda96;Matthew Johnson;2019-02-01 17:39:49 -0800;fix merging issue

==

jax/lax.py
==================
9a251efd;Matthew Johnson;2019-02-01 17:06:26 -0800;remove stale OutAxesThunk class

==

jax/api.py
==================
092712fd;Matthew Johnson;2019-02-01 16:59:28 -0800;move basic pjit+autodiff tests

==

pjit_nesting.py
tests/pjit_test.py
==================
f2f23c5d;Matthew Johnson;2019-02-01 16:30:17 -0800;did somebody say grad of pjit?

==

jax/interpreters/ad.py
jax/interpreters/pxla.py
pjit_nesting.py
==================
75849f2b;Matthew Johnson;2019-02-01 14:46:58 -0800;pjit tests working again

==

jax/interpreters/pxla.py
tests/pjit_test.py
==================
821731ce;Matthew Johnson;2019-02-01 10:38:30 -0800;wip

==

jax/api.py
jax/interpreters/pxla.py
tests/pjit_test.py
==================
08dc6994;Matthew Johnson;2019-01-31 22:08:51 -0800;partial progress

==

jax/api.py
jax/interpreters/ad.py
jax/interpreters/parallel.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
jax/lax.py
jax/tree_util.py
pjit_nesting.py
tests/parallel_test.py
tests/pjit_test.py
==================
549a1f2e;Matthew Johnson;2019-01-30 10:28:14 -0800;partial progress

==

jax/api.py
jax/interpreters/pxla.py
tests/pjit_test.py
==================
893ec515;Matthew Johnson;2019-01-30 07:51:20 -0800;jaxtuple flattening problems...

==

jax/api.py
jax/interpreters/ad.py
jax/interpreters/pxla.py
pjit_nesting.py
tests/pjit_test.py
==================
2c447b98;Matthew Johnson;2019-01-29 22:04:41 -0800;add temp axis name class

==

jax/interpreters/pxla.py
==================
9fa80779;Matthew Johnson;2019-01-29 21:42:33 -0800;tweak batching.moveaxis behavior

==

jax/interpreters/batching.py
jax/interpreters/pxla.py
pjit_nesting.py
==================
6efb7b1c;Matthew Johnson;2019-01-29 20:23:41 -0800;basic nested pjit works

==

jax/interpreters/pxla.py
pjit_nesting.py
==================
41c98ddc;Matthew Johnson;2019-01-29 19:38:04 -0800;add basic pjit_nesting.py work file

==

jax/interpreters/pxla.py
pjit_nesting.py
==================
da620a8e;Matthew Johnson;2019-01-29 18:22:15 -0800;working on nested pjit, misc bug fixes

==

jax/api.py
jax/interpreters/parallel.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
==================
5e37d2a4;Peter Hawkins;2019-02-01 19:14:59 -0500;Merge pull request #305 from hawkinsp/rename
Prefix most rules in lax module with underscores to improve readability of autogenerated docs.
==
==================
5517347c;Peter Hawkins;2019-02-01 16:29:53 -0500;Reexpose reduce_window_shape_tuple since it has external users. Fix accidental removal of rev() batching rule.

==

jax/lax.py
==================
09201c72;Peter Hawkins;2019-02-01 13:42:16 -0500;Prefix most rules in lax module with underscores to improve generated doc readability.
Underscore-prefixed functions are automatically hidden from generated documentation. `lax` is a semi-public API, so this is a first step towards making its documentation useful.

==

jax/lax.py
==================
66c7a424;Peter Hawkins;2019-02-01 14:24:22 -0500;Merge pull request #303 from hawkinsp/minmax
Fix gradient for `np.amin` and `np.amax`.
==
==================
89727e43;Peter Hawkins;2019-02-01 14:01:06 -0500;Fix complex64/complex128 confusion in test harness.

==

jax/test_util.py
==================
63185b8a;Roy Frostig;2019-02-01 10:47:12 -0800;shape rule for ptranspose

==

jax/interpreters/parallel.py
==================
43b408f0;Roy Frostig;2019-02-01 10:20:38 -0800;Rename `all_to_all` to `ptranspose`

==

jax/interpreters/parallel.py
==================
66e551fc;Roy Frostig;2019-02-01 10:18:00 -0800;Pmap tests for plus-after-transpose

==

tests/parallel_test.py
==================
27c37d77;Roy Frostig;2019-02-01 10:15:30 -0800;Placeholder pmap rule for `all_to_all`

==

jax/interpreters/parallel.py
==================
e37d1845;Roy Frostig;2019-02-01 10:03:48 -0800;Pass and accept axis_name kwarg in `all_to_all`, since it is a pmap primitive.

==

jax/interpreters/parallel.py
==================
fb659e22;Peter Hawkins;2019-02-01 11:07:45 -0500;Fix gradient for `np.amin` and `np.amax`.
The JVP rule for `lax.reduce` depends on being able to identify the reducer as a monoid reducer. To get the correct behavior on complex numbers, `np.{amin,amax}` passed a non-standard reducer that compared complex numbers lexicographically as (real, imaginary) pairs. However, this prevented the gradient rule from identifying the reducer.

Instead, change the `lax.min` and `lax.max` to use the Numpy semantics when comparing complex numbers, and change `np.amin` and `np.amax` to use them.

Move the `np._broadcast_shapes` helper into `lax.py` as `lax.broadcast_shapes`.

==

jax/lax.py
jax/numpy/lax_numpy.py
tests/lax_test.py
==================
670f14a2;Matthew Johnson;2019-02-01 07:29:13 -0800;Merge pull request #300 from alexalemi/rev_batching
Rev batching
==
==================
8d52ee89;Peter Hawkins;2019-02-01 08:57:22 -0500;Add newly added Numpy functions to docs.

==

docs/jax.numpy.rst
==================
785ada21;Peter Hawkins;2019-02-01 08:45:27 -0500;Merge pull request #297 from alexalemi/flip{up,lr}
Add flipud and fliplr numpy functions.
==
==================
3558fa99;Alex Alemi;2019-01-31 21:52:05 -0800;more test cases

==

tests/batching_test.py
==================
a9b221a1;Alex Alemi;2019-01-31 21:47:05 -0800;Add batching rule for rev.

==

jax/lax.py
tests/batching_test.py
==================
4c37d249;Alex Alemi;2019-01-31 20:30:38 -0800;Add support for negative indices and tests of rank 3 tensors.

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
edce0f0a;Peter Hawkins;2019-01-31 20:22:12 -0500;Add `np.cumproduct` alias for `np.cumprod`.

==

jax/numpy/lax_numpy.py
==================
4e84bf8a;Peter Hawkins;2019-01-31 20:12:42 -0500;Merge pull request #298 from hawkinsp/cumsum
Implement np.{cumsum,cumprod,nancumsum,nancumprod}.
==
==================
a3f0da50;Peter Hawkins;2019-01-31 19:27:55 -0500;Work around missing ReduceWindow cases in current Jaxlib release.

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
26f85310;Peter Hawkins;2019-01-31 18:56:06 -0500;Implement np.{cumsum,cumprod,nancumsum,nancumprod}.

==

jax/lax.py
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
2edc509c;Alex Alemi;2019-01-31 13:03:27 -0800;typo in flipud

==

jax/numpy/lax_numpy.py
==================
89e3b3a1;Alex Alemi;2019-01-31 12:57:43 -0800;Add  and  numpy functions.

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
4c10410d;Roy Frostig;2019-01-30 16:54:34 -0800;Add a papply rule for lax.transpose

==

jax/lax.py
==================
54b6bb2c;Roy Frostig;2019-01-30 16:52:28 -0800;Add parallel primitive and translation rule for all_to_all.
Use it to complete last case of the binop papply rule. Also add an all_gather based on all_to_all.

==

jax/interpreters/parallel.py
==================
7eb8579c;Matthew Johnson;2019-01-30 13:33:25 -0800;Merge pull request #294 from google/stop-gradient
add basic lax.stop_gradient primitive
==
==================
26ac350c;Matthew Johnson;2019-01-30 10:43:57 -0800;add higher-order test for stop_gradient

==

tests/lax_test.py
==================
c293b377;Matthew Johnson;2019-01-30 10:39:35 -0800;add basic lax.stop_gradient primitive

==

jax/lax.py
tests/lax_test.py
==================
cc3e8df4;Matthew Johnson;2019-01-29 15:01:55 -0800;Merge pull request #291 from jonasrauber/foreach_bugfix
fixed TypeError caused by body_fun of foreach loop
==
==================
72065f83;Jonas Rauber;2019-01-29 22:52:46 +0100;fixed test

==

tests/lax_test.py
==================
5b67d4f0;Jonas Rauber;2019-01-29 22:28:53 +0100;added test for foreach_loop

==

tests/lax_test.py
==================
8348856f;Jonas Rauber;2019-01-29 22:18:10 +0100;added mypy to gitignore

==

.gitignore
==================
334581d5;Jonas Rauber;2019-01-29 17:31:10 +0100;fixed TypeError caused by body_fun of foreach loop

==

jax/lax.py
==================
4db50bc4;Matthew Johnson;2019-01-28 20:28:39 -0800;Merge pull request #288 from sschoenholz/patch-1
Added batching rules for convolutions + pooling.
==
==================
e538eb1a;sschoenholz;2019-01-28 19:30:45 -0800;Removed comment from test.

==

tests/batching_test.py
==================
3b8d43ce;sschoenholz;2019-01-28 19:08:05 -0800;Misc. small fixes.

==

jax/lax.py
==================
b23282b9;Peter Hawkins;2019-01-28 19:31:48 -0500;Merge pull request #289 from hawkinsp/maxpool
Make translation rule for select_and_gather_add work even when --jax_enable_x64 is disabled.
==
==================
f8d380e7;Peter Hawkins;2019-01-28 19:03:51 -0500;Merge pull request #290 from hawkinsp/xla
Update XLA version to include fix for XLA reduce-window on CPU
==
==================
86f5d189;Peter Hawkins;2019-01-28 18:48:42 -0500;Update XLA version to include fix for XLA reduce-window on CPU (https://github.com/tensorflow/tensorflow/commit/33bf4d37ff71950cdcffdfeda36d8e0995cc67b2)

==

WORKSPACE
==================
5dc15868;Peter Hawkins;2019-01-28 18:41:27 -0500;Make translation rule for select_and_gather_add work even when --jax_enable_x64 is disabled.
Add support for constants whose types are not canonicalized by passing an optional flag to constant factories.

I am not entirely happy with the type canonicalization approach, but it seems good enough for this specific use case.

==

jax/interpreters/xla.py
jax/lax.py
jax/lib/xla_bridge.py
==================
6181560e;sschoenholz;2019-01-28 15:26:47 -0800;Changed tests to always use float32, for conv compatibility.

==

tests/batching_test.py
==================
5a52a9dc;Peter Hawkins;2019-01-28 17:47:27 -0500;Merge pull request #287 from hawkinsp/fixes
Fix some TODOs that were previously blocked on a Jaxlib release.
==
==================
dfced4fc;sschoenholz;2019-01-28 14:37:49 -0800;Added tests for conv + pooling batching rules.

==

tests/batching_test.py
==================
a15bad40;sschoenholz;2019-01-28 14:33:57 -0800;Added batching rules for convolutions + pooling.
Added batching rules:
conv_general_dilated_batch_rule
select_and_scatter_add_batch_rule
reduce_window_max_batch_rule
reduce_window_sum_batch_rule
==

jax/lax.py
==================
3cbcff37;Peter Hawkins;2019-01-28 17:27:46 -0500;Use a set comprehension in linalg test.

==

tests/linalg_test.py
==================
d968e1e5;Matthew Johnson;2019-01-28 14:11:11 -0800;fix replica_groups logic

==

jax/interpreters/parallel.py
jax/interpreters/pxla.py
==================
ae84919a;Peter Hawkins;2019-01-28 16:00:22 -0500;Fix some TODOs that were previously blocked on a Jaxlib release.

==

tests/lax_numpy_test.py
tests/linalg_test.py
==================
bde6d08a;Matthew Johnson;2019-01-28 12:56:18 -0800;Merge branch 'master' of github.com:google/jax

==
==================
5f5baaa4;Matthew Johnson;2019-01-28 12:55:24 -0800;tweak tests for internal purposes

==

jax/test_util.py
tests/batching_test.py
tests/lax_test.py
==================
af69d341;Peter Hawkins;2019-01-28 15:44:03 -0500;Merge pull request #286 from hawkinsp/maxpool
Implement translation rule for select_and_gather_add (issue #274).
==
==================
9f84455f;Peter Hawkins;2019-01-28 15:10:58 -0500;Check for jax_enable_x64 in select_and_gather_add translation rule.

==

jax/lax.py
==================
c092f0ca;Matthew Johnson;2019-01-28 11:42:33 -0800;Merge pull request #272 from google/parallel
initial spmd groundwork
==
==================
f76134e4;Peter Hawkins;2019-01-28 14:29:17 -0500;Implement transpose rule for select_and_gather_add (issue #274).
There are a couple of caveats that mean that we shouldn't close the issue yet:
a) we need a jaxlib update to generalize the ReduceWindow support in the XLA/CPU backend.
b) jax_enable_x64 must be set, otherwise 64-bit types aren't available and bad things may happen. We should probably removed type-squashing from the JaxComputationBuilder class.

==

jax/lax.py
tests/lax_test.py
==================
1360a703;Matthew Johnson;2019-01-28 11:13:34 -0800;add trivial pjit tests

==

tests/pjit_test.py
==================
1a494d07;Matthew Johnson;2019-01-28 10:23:00 -0800;add post_process_call for vmap (untested)

==

jax/interpreters/batching.py
jax/interpreters/parallel.py
==================
32cda396;Matthew Johnson;2019-01-28 10:09:42 -0800;remove chunk transform from api.py for now

==

jax/api.py
jax/interpreters/parallel.py
leak_bug.py
tests/parallel_test.py
==================
2487eb2d;Matthew Johnson;2019-01-28 09:35:57 -0800;woo tuple output works

==

jax/interpreters/pxla.py
leak_bug.py
==================
da2d1854;Matthew Johnson;2019-01-28 09:19:06 -0800;tweak

==

jax/api.py
jax/api_util.py
jax/interpreters/pxla.py
==================
945fa34e;Matthew Johnson;2019-01-28 09:00:02 -0800;tweaks

==

jax/api.py
jax/api_util.py
jax/interpreters/pxla.py
leak_bug.py
==================
780106f8;Matthew Johnson;2019-01-28 08:37:49 -0800;moving pxla flattening/chunking to api.py, wip

==

jax/api.py
jax/api_util.py
jax/interpreters/parallel.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
leak_bug.py
==================
fa63c5a3;Peter Hawkins;2019-01-28 09:56:59 -0500;Merge pull request #285 from hawkinsp/master
Fix average pooling to align the window element counts with the spatial dimensions.
==
==================
274a63e5;Peter Hawkins;2019-01-28 09:20:02 -0500;Fix implementation of average pooling to align the window element counts with the spatial dimensions.

==

jax/experimental/stax.py
tests/stax_test.py
==================
afc2b9fe;Matthew Johnson;2019-01-26 14:16:47 -0800;add leak_bug.py for repro

==

jax/interpreters/parallel.py
jax/interpreters/pxla.py
leak_bug.py
==================
a5661ce1;Matthew Johnson;2019-01-26 13:57:19 -0800;hmmm leak bug somewhere

==

jax/interpreters/parallel.py
jax/interpreters/pxla.py
==================
80b9bdc4;Matthew Johnson;2019-01-26 13:27:04 -0800;cleanup, fix chunksize bug

==

jax/interpreters/pxla.py
==================
9c8018a4;Matthew Johnson;2019-01-26 13:20:18 -0800;more cleanup

==

jax/interpreters/pxla.py
==================
da724d31;Matthew Johnson;2019-01-26 13:13:29 -0800;single-axis-var version runs! and some cleanup

==

jax/interpreters/pxla.py
==================
8bc579ae;Matthew Johnson;2019-01-26 08:21:20 -0800;chunk transform outside of xla_parallel_callable

==

jax/interpreters/pxla.py
==================
6494504a;Matthew Johnson;2019-01-26 08:10:01 -0800;woo post_process_call, it scrolls like butter

==

jax/interpreters/parallel.py
jax/interpreters/pxla.py
==================
8a6c0949;Matthew Johnson;2019-01-26 05:10:22 -0800;promising... but why do we need post_process_call?

==

jax/api.py
jax/interpreters/parallel.py
jax/interpreters/pxla.py
==================
57fc3a4c;Matthew Johnson;2019-01-26 04:59:42 -0800;Merge pull request #279 from jonasrauber/patch-1
added support for np.newaxis to jax.numpy
==
==================
1691ae0a;Jonas Rauber;2019-01-26 10:15:16 +0100;added support for np.newaxis to jax.numpy

==

jax/numpy/lax_numpy.py
==================
d321e2a3;Matthew Johnson;2019-01-25 08:20:33 -0800;add pjit to api.py

==

jax/api.py
jax/interpreters/parallel.py
jax/interpreters/pxla.py
==================
e546f13b;Matthew Johnson;2019-01-24 17:55:03 -0800;add chunking transform

==

jax/api.py
jax/interpreters/parallel.py
tests/parallel_test.py
==================
c1be2aa2;Matthew Johnson;2019-01-24 16:58:41 -0800;add basic split test

==

tests/parallel_test.py
==================
ae86b9a6;Matthew Johnson;2019-01-24 16:27:34 -0800;fix split tracer bugs

==

jax/api.py
jax/interpreters/parallel.py
==================
7e05f94c;Matthew Johnson;2019-01-24 16:08:03 -0800;fix pmap nesting bug, sketch out index splitting

==

jax/interpreters/ad.py
jax/interpreters/parallel.py
tests/parallel_test.py
==================
b34c87dc;Matthew Johnson;2019-01-24 14:16:17 -0800;remove 'chunk' for now

==

jax/interpreters/parallel.py
tests/parallel_test.py
==================
78157722;Matthew Johnson;2019-01-24 13:35:29 -0800;clean up parallel_test.py file

==

tests/parallel_test.py
==================
c7ce4420;Matthew Johnson;2019-01-10 15:35:15 -0800;initial pmap/pxla code, pair-coded w/ @dougalm

==

jax/api.py
jax/interpreters/batching.py
jax/interpreters/parallel.py
jax/interpreters/partial_eval.py
jax/interpreters/pxla.py
jax/interpreters/xla.py
jax/lax.py
jax/lib/xla_bridge.py
tests/batching_test.py
tests/parallel_test.py
==================
326c3dbb;Peter Hawkins;2019-01-24 08:39:50 -0500;Add license header to docs/conf.py.

==

docs/conf.py
==================
fab3a7a7;Matthew Johnson;2019-01-22 15:51:42 -0800;Merge pull request #271 from google/enable-value-and-grad-api-test
enable value-and-grad api test
==
==================
b95669eb;Matthew Johnson;2019-01-22 15:34:09 -0800;enable value-and-grad api test

==

tests/api_test.py
==================
8565a348;Matthew Johnson;2019-01-22 15:32:15 -0800;Merge pull request #270 from cclauss/patch-1
Undefined name: 'value_and_grad' in ./tests/api_test.py
==
==================
f6d9a33a;cclauss;2019-01-22 23:51:37 +0100;Undefined name: 'value_and_grad' in ./tests/api_test.py
[flake8](http://flake8.pycqa.org) testing of https://github.com/google/jax on Python 3.7.1

$ __flake8 . --count --select=E901,E999,F821,F822,F823 --show-source --statistics__
```
./tests/api_test.py:54:12: F821 undefined name 'value_and_grad'
    assert value_and_grad(f)(1.0, 1.0, 1.0, flag=True) == (y, 1.0)
           ^
./tests/api_test.py:55:12: F821 undefined name 'value_and_grad'
    assert value_and_grad(f, argnums=1)(1.0, 1.0, 1.0, flag=True) == (y, 2.0)
           ^
./tests/api_test.py:56:12: F821 undefined name 'value_and_grad'
    assert value_and_grad(f, argnums=(2, 0))(1.0, 1.0, 1.0, flag=True) == (y, (3.0, 1.0))
           ^
3     F821 undefined name 'value_and_grad'
3
```
__E901,E999,F821,F822,F823__ are the "_showstopper_" [flake8](http://flake8.pycqa.org) issues that can halt the runtime with a SyntaxError, NameError, etc. These 5 are different from most other flake8 issues which are merely "style violations" -- useful for readability but they do not effect runtime safety.
* F821: undefined name `name`
* F822: undefined name `name` in `__all__`
* F823: local variable name referenced before assignment
* E901: SyntaxError or IndentationError
* E999: SyntaxError -- failed to compile a file into an Abstract Syntax Tree
==

tests/api_test.py
==================
46867c19;He Jia;2019-01-20 00:32:10 +0800;add multivariate_normal logpdf and pdf
_promote_args_like in the first line of logpdf does not work well, so I temporarily comment it out.
==

jax/scipy/stats/multivariate_normal.py
==================
dc71e0d9;He Jia;2019-01-19 22:03:18 +0800;Update __init__.py

==

jax/scipy/stats/__init__.py
==================
7b6164c2;He Jia;2019-01-19 20:39:09 +0800;add scipy.stats.uniform.pdf

==

jax/scipy/stats/uniform.py
==================
fc2de383;He Jia;2019-01-19 20:38:07 +0800;add scipy.stats.laplace.pdf

==

jax/scipy/stats/laplace.py
==================
beb26626;He Jia;2019-01-19 20:37:08 +0800;add scipy.stats.gamma.pdf

==

jax/scipy/stats/gamma.py
==================
b2e4882c;He Jia;2019-01-19 20:36:18 +0800;add scipy.stats.expon.pdf

==

jax/scipy/stats/expon.py
==================
8e311059;He Jia;2019-01-19 20:29:27 +0800;add scipy.stats.beta.pdf

==

jax/scipy/stats/beta.py
==================
8e9d5013;He Jia;2019-01-19 20:25:14 +0800;add scipy.stats.norm.pdf

==

jax/scipy/stats/norm.py
==================
e609be4c;Peter Hawkins;2019-01-18 23:22:52 -0500;Merge pull request #267 from hawkinsp/master
Update Jaxlib references to 0.1.6.
==
==================
1d9be64e;Peter Hawkins;2019-01-18 23:14:56 -0500;Update Jaxlib references to 0.1.6.

==

README.md
notebooks/gufuncs.ipynb
notebooks/neural_network_and_data_loading.ipynb
notebooks/quickstart.ipynb
==================
82ce80f1;Peter Hawkins;2019-01-18 20:48:40 -0500;Bump Jaxlib version.

==

build/setup.py
==================
23abcc98;Peter Hawkins;2019-01-18 17:30:18 -0500;Merge pull request #266 from hawkinsp/linalg
Add complex128 support to LAPACK bindings.
==
==================
4ea3f2cd;Peter Hawkins;2019-01-18 16:47:26 -0500;Add complex128 support to LAPACK bindings.
Update XLA to incorporate https://github.com/tensorflow/tensorflow/commit/7a283b835b80808a9cdc6043998f29c8188342a5 .

==

WORKSPACE
jax/lax_linalg.py
jaxlib/lapack.pyx
tests/linalg_test.py
==================
12084dfe;Peter Hawkins;2019-01-18 15:00:38 -0500;Merge pull request #265 from hawkinsp/xla
Update XLA release.
==
==================
3489b45f;Peter Hawkins;2019-01-18 14:42:10 -0500;Update XLA release.
Includes https://github.com/tensorflow/tensorflow/commit/7fce32e9be8c43a96f0c55063be6ab215d12b0ae, which fixes #120 once jaxlib is rebuilt.

==

WORKSPACE
==================
42bd253c;Matthew Johnson;2019-01-18 07:03:12 -0800;add prng design doc in markdown format

==

README.md
design_notes/prng.md
jax/api.py
==================
ed087ddb;He Jia;2019-01-18 12:08:52 +0800;Minor updates of advi.py
1. fixed some syntax errors
2. hold on the plot in the end
==

examples/advi.py
==================
aaff39a7;Peter Hawkins;2019-01-17 15:13:41 -0500;Change Linux docker wheel build to build separate wheels for each minor Python version.
* Use pyenv to build specific Python releases against which we build wheels. Otherwise we are limited to only those Python releases present in the OS repository, which only correspond to certain major versions of Python.
* Build with docker instead of nvidia-docker. We need a CUDA image to build JAX, but we don't require a GPU or nvidia-docker unless we want to actually run things.
* Various other cleanups.

==

build/Dockerfile
build/build_jaxlib_wheels.sh
build/build_jaxlib_wheels_macos.sh
build/build_wheel_docker_entrypoint.sh
==================
b2fe46f3;Peter Hawkins;2019-01-17 13:56:33 -0500;Rename MacOS build script to be more consistent with Linux build script.
Pin particular versions of Numpy and Scipy in the build script to fix Numpy extension version compatibility issue. If jaxlib is built against numpy 1.16 but used against an older version, we see an error "No module named 'numpy.core._multiarray_umath'". The fix is to build against numpy 1.15.

==

build/build_jaxlib_wheels_macos.sh
==================
edd920f6;Peter Hawkins;2019-01-17 14:29:05 -0500;Merge pull request #257 from hawkinsp/complexwarn
Use complexfloating instead of complex to suppress NumPy warning.
==
==================
ff249fca;Peter Hawkins;2019-01-17 13:47:33 -0500;Update Jaxlib version in NN example notebook.

==

notebooks/neural_network_and_data_loading.ipynb
==================
62d94612;Peter Hawkins;2019-01-17 13:41:40 -0500;Use complexfloating instead of complex to suppress NumPy warning.
Fixes #255.

==

jax/lax.py
==================
a2237571;Peter Hawkins;2019-01-17 13:26:01 -0500;Merge pull request #256 from hawkinsp/master
Update documentation and notebooks for Jaxlib 0.1.5.
==
==================
e062127d;Peter Hawkins;2019-01-17 13:24:58 -0500;Update documentation and notebooks for Jaxlib 0.1.5.

==

README.md
notebooks/gufuncs.ipynb
notebooks/quickstart.ipynb
==================
d707426c;Peter Hawkins;2019-01-16 23:05:16 -0500;Bump jaxlib version to 0.1.5 in preparation for building new wheels.

==

build/setup.py
==================
59734c0b;Peter Hawkins;2019-01-16 17:28:12 -0500;Merge pull request #251 from hawkinsp/build
Add script to build Jaxlib wheels for multiple Python versions on Mac OS X.
==
==================
ce61eb63;Peter Hawkins;2019-01-16 17:16:06 -0500;Delete the virtualenv if it already exists.

==

build/build_wheels_macos.sh
==================
913d7562;Peter Hawkins;2019-01-16 14:33:45 -0500;Add scipy as a dependency of jaxlib.
Jaxlib depends on LAPACK kernels provided by Scipy.
==

build/setup.py
==================
27eb26c8;Peter Hawkins;2019-01-16 13:36:08 -0500;Add script to build Jaxlib wheels for multiple Python versions on Mac OS X.

==

build/build_wheels_macos.sh
==================
e44ccd7c;Peter Hawkins;2019-01-16 13:33:45 -0500;Merge pull request #248 from hawkinsp/master
Add links to reference documentation from README.md.
==
==================
bfa35d26;Peter Hawkins;2019-01-16 13:32:16 -0500;Move link to reference documentation earlier.
Add instructions to install scipy when building from source.

==

README.md
==================
3c4b1ef0;Matthew Johnson;2019-01-16 10:28:08 -0800;Merge pull request #250 from j-towns/tracer-slots
Use __slots__ for Tracer classes
==
==================
38b2da82;Jamie Townsend;2019-01-16 16:51:54 +0000;Use slots for tracer classes

==

jax/interpreters/ad.py
jax/interpreters/batching.py
jax/interpreters/partial_eval.py
==================
9820e388;Peter Hawkins;2019-01-16 10:47:51 -0500;Merge pull request #249 from hawkinsp/xla
Update XLA to include fix for #39.
==
==================
5219bd60;Peter Hawkins;2019-01-16 10:28:42 -0500;Update XLA to https://github.com/tensorflow/tensorflow/commit/bf5cd5e750f31b95cd06f8ff75fe9bda30d84bee .
Fixes #39.

==

WORKSPACE
==================
63b49e4c;Peter Hawkins;2019-01-16 10:21:08 -0500;Add links to reference documentation from README.md.

==

README.md
==================
d6184562;Peter Hawkins;2019-01-16 09:58:01 -0500;Merge pull request #247 from hawkinsp/master
Add Sphinx-generated reference documentation for JAX.
==
==================
7d78c3c8;Peter Hawkins;2019-01-16 09:45:25 -0500;Drop jaxlib dependency from setup.py, add a requirements.txt for readthedoc build instead.

==

docs/requirements.txt
readthedocs.yml
setup.py
==================
86d8915c;Peter Hawkins;2019-01-15 20:14:19 -0500;Add Sphinx-generated reference documentation for JAX.

==

docs/conf.py
docs/index.rst
docs/jax.experimental.minmax.rst
docs/jax.experimental.rst
docs/jax.experimental.stax.rst
docs/jax.lax.rst
docs/jax.numpy.rst
docs/jax.rst
docs/jax.scipy.rst
docs/modules.rst
jax/api.py
jax/numpy/lax_numpy.py
readthedocs.yml
setup.py
==================
4792b9be;Peter Hawkins;2019-01-15 11:44:27 -0500;Merge pull request #231 from hawkinsp/complex
Add preliminary support for np.complex128.
==
==================
c31b4652;Peter Hawkins;2019-01-15 11:20:52 -0500;Merge pull request #237 from hawkinsp/gather_scatter
Add lax.gather and lax.scatter_add.
==
==================
2b1d0fb8;Peter Hawkins;2019-01-15 10:34:27 -0500;Merge pull request #243 from hawkinsp/lru
Change util.memoize and linear_util.memoize to be LRU caches with a default size of 64 entries.
==
==================
2b383bdb;Peter Hawkins;2019-01-15 10:32:58 -0500;Increase cache size to 4096.

==

jax/linear_util.py
jax/util.py
==================
3266bb31;Peter Hawkins;2019-01-14 21:48:28 -0500;Change linear_util.memoize to use an LRU cache.
Add util.OrderedDict that retrofits a move_to_end method onto Python 2 OrderedDicts.

==

jax/linear_util.py
jax/util.py
==================
05b1049e;Peter Hawkins;2019-01-14 20:11:08 -0500;Change util.memoize to be an LRU cache with a default size of 64 entries.
The goal is to limit peak memory when running a large number of computations, e.g., the test suite.

==

jax/util.py
==================
3f63684b;Peter Hawkins;2019-01-14 17:49:48 -0500;Merge pull request #242 from hawkinsp/testfix
Fix incorrect norm definition in SVD test case, and adjust test tolerances.
==
==================
0d8255f2;Matthew Johnson;2019-01-14 14:48:23 -0800;Merge pull request #241 from google/take-along-axis-with-old-numpy
guard np.take_along_axis test in case of old numpy
==
==================
bc7231e6;Peter Hawkins;2019-01-14 17:24:55 -0500;Fix incorrect norm definition in SVD test case, and adjust test tolerances.

==

tests/linalg_test.py
==================
ade92703;Matthew Johnson;2019-01-14 12:56:41 -0800;guard np.take_along_axis test in case of old numpy

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
7404cb95;Matthew Johnson;2019-01-14 14:11:13 -0800;Merge pull request #238 from craffel/DeviceArray__repr__
Use repr of value for DeviceArray.__repr__
==
==================
f16de58b;Peter Hawkins;2019-01-14 16:55:16 -0500;Relax tolerance for scatter/gather gradient tests.

==

tests/lax_test.py
==================
a21c3c45;Peter Hawkins;2019-01-14 16:39:30 -0500;Fix definition of rand_uniform().

==

jax/test_util.py
==================
d117dfbc;Peter Hawkins;2019-01-14 16:11:45 -0500;Merge pull request #240 from hawkinsp/numpyfix
Work around breakage due to Numpy 1.16.0 version update.
==
==================
6e684fd3;Peter Hawkins;2019-01-14 15:53:48 -0500;Work around breakage due to Numpy 1.16.0 version update.

==

tests/lax_numpy_test.py
==================
e00dc5d3;Peter Hawkins;2019-01-14 15:28:53 -0500;Restrict the range of np.tan() test to [-1.5, 1.5) to avoid numerical problems.

==

jax/test_util.py
tests/lax_numpy_test.py
==================
33bd020b;Colin;2019-01-14 11:58:31 -0800;Use repr of value for DeviceArray.__repr__
Currently, DevieArray.__repr__ returns the class name and the size of
the object. This is inconsistent with np.ndarray.__repr__ which produces
code to reconstruct the array (including the contents, unless the
contents are too long to print cleanly). This provides a strange
reminder that we aren't using "real" numpy so it may be nicer to just
use the standard numpy __repr__ instead.

==

jax/interpreters/xla.py
==================
5fac477a;Peter Hawkins;2019-01-14 14:33:40 -0500;Fix bug in scatter transpose rule.
Add some simple gather and scatter tests.

==

jax/lax.py
tests/lax_test.py
==================
39257b24;Peter Hawkins;2019-01-14 10:28:35 -0500;Work on scatter JVP/transpose.

==

jax/lax.py
==================
9812bea1;Peter Hawkins;2019-01-14 08:24:01 -0500;Merge remote-tracking branch 'google/master' into gather_scatter

==
==================
fc170b2b;Matthew Johnson;2019-01-13 12:45:11 -0800;Merge pull request #236 from google/numpy-take-along-axis
Add numpy.take_along_axis (fixes #220)
==
==================
4a1d189d;Matthew Johnson;2019-01-13 12:26:37 -0800;add tests for numpy.take_along_axis (fixes #220)

==

tests/lax_numpy_test.py
==================
f7c62843;Matthew Johnson;2019-01-12 12:48:58 -0800;add sort_along_axis, no tests (c.f. #220)

==

jax/numpy/lax_numpy.py
==================
1ea77af3;Matthew Johnson;2019-01-13 12:12:39 -0800;Merge pull request #234 from google/issue221
add sort_key_val batching rule and numpy.argsort
==
==================
30683f8f;Matthew Johnson;2019-01-13 11:15:39 -0800;add numpy.argsort (c.f. #221)

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
54886bd3;Matthew Johnson;2019-01-13 11:03:47 -0800;add sort_key_val batching rule (fixes #221)

==

jax/api.py
jax/lax.py
tests/batching_test.py
==================
5a4713f1;Matthew Johnson;2019-01-13 09:01:01 -0800;add tests for np.sort (c.f. #221)

==

jax/lax.py
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
dfa2cb82;Matthew Johnson;2019-01-13 11:56:06 -0800;Merge pull request #235 from google/fix-failing-linalg-tests
double linalg test tolerances to avoid flakiness
==
==================
78dbc031;Matthew Johnson;2019-01-13 11:37:34 -0800;double linalg test tolerances to avoid flakiness

==

tests/linalg_test.py
==================
61504a63;Peter Hawkins;2019-01-13 09:44:04 -0500;Update Jaxlib versions in Colab notebooks.

==

notebooks/gufuncs.ipynb
notebooks/neural_network_and_data_loading.ipynb
notebooks/quickstart.ipynb
==================
0316d314;Peter Hawkins;2019-01-13 09:38:10 -0500;Rename build/BUILD to build/BUILD.bazel.
Avoids name conflict when building wheels on case-insensitive filesystems as on Mac OS X.

==

build/BUILD.bazel
==================
cf3ff022;Matthew Johnson;2019-01-12 15:00:25 -0800;Merge pull request #233 from google/issue222
set behavior when random.randint has invalid range
==
==================
70d1a004;Matthew Johnson;2019-01-12 12:54:22 -0800;set behavior when random.randint has invalid range
(closes #222)

==

jax/random.py
tests/random_test.py
==================
04835b9c;Matthew Johnson;2019-01-12 11:54:52 -0800;Merge pull request #232 from google/issue227
fix isinstance check in indexing (fixes #227)
==
==================
6be53c7a;Matthew Johnson;2019-01-12 11:09:15 -0800;fix isinstance check in indexing (fixes #227)

==

jax/numpy/lax_numpy.py
==================
2166d3f2;Matthew Johnson;2019-01-12 08:06:20 -0800;bump version number for pypi

==

setup.py
==================
aaf0e3cf;Matthew Johnson;2019-01-12 07:19:04 -0800;bump jaxlib version for new wheels

==

build/setup.py
==================
d43c65dc;Peter Hawkins;2019-01-11 18:22:43 -0500;Add preliminary support for np.complex128.
Only lightly tested.

==

jax/abstract_arrays.py
jax/lax.py
jax/lib/xla_bridge.py
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
tests/lax_test.py
==================
44c24e5a;Peter Hawkins;2019-01-11 16:41:31 -0500;Merge pull request #229 from hawkinsp/xla
Update XLA revision to https://github.com/tensorflow/tensorflow/commit/937ff1b4cf1d954806e075d66198429a6d2312be
==
==================
385ab962;Peter Hawkins;2019-01-11 16:14:49 -0500;Update XLA revision to https://github.com/tensorflow/tensorflow/commit/937ff1b4cf1d954806e075d66198429a6d2312be

==

WORKSPACE
==================
8cb73c1c;Peter Hawkins;2019-01-11 16:01:52 -0500;Merge pull request #225 from hawkinsp/complex
Test more Numpy ops for complex types.
==
==================
4a8f088a;Peter Hawkins;2019-01-11 15:50:51 -0500;Simplify and fix test failures of `np.clip` for cases where one of the inputs was None.

==

jax/numpy/lax_numpy.py
==================
65efd45f;Peter Hawkins;2019-01-11 14:49:42 -0500;Test more Numpy ops for complex types.
Fix a number of ops that did not handle complex numbers the same way as regular numpy.

==

jax/lax.py
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
7036a5ba;Peter Hawkins;2019-01-11 09:01:11 -0500;Merge pull request #219 from vishwakftw/svd-complex
Add complex support for SVD
==
==================
20332b26;vishwakftw;2019-01-11 18:49:03 +0530;LAPACK 3.6 and below requires more workspace that the newer versions

==

jaxlib/lapack.pyx
==================
e21cb1a9;vishwakftw;2019-01-09 22:04:14 +0530;Add complex support for SVD

==

jax/lax_linalg.py
jaxlib/lapack.pyx
tests/linalg_test.py
==================
240a775f;Peter Hawkins;2019-01-10 11:39:27 -0500;Merge pull request #218 from hawkinsp/xla
Update XLA release to fix build problem.
==
==================
31a72d5d;Peter Hawkins;2019-01-10 11:37:53 -0500;Update XLA release to fix build problem.
Fixes #217.

==

WORKSPACE
==================
087d0730;Peter Hawkins;2019-01-10 08:57:09 -0500;Merge pull request #213 from hawkinsp/pad
Implement the `mode='constant'` case of `np.pad`.
==
==================
0fa5af9d;Peter Hawkins;2019-01-09 21:26:22 -0500;Implement the `mode='constant'` case of `np.pad`.

==

jax/numpy/lax_numpy.py
jax/test_util.py
tests/lax_numpy_test.py
==================
7ed5e1f6;Peter Hawkins;2019-01-09 20:44:30 -0500;Merge pull request #211 from hawkinsp/lu_jvp
Add JVP for LU decomposition.
==
==================
12ef2b7f;Peter Hawkins;2019-01-09 20:19:58 -0500;Relax test tolerance even more.

==

tests/linalg_test.py
==================
5bacc59e;Peter Hawkins;2019-01-09 20:15:36 -0500;Relax tolerance of LuGrad test to make it pass in jax_enable_x64 mode.

==

tests/linalg_test.py
==================
9e91fb42;Peter Hawkins;2019-01-09 15:52:34 -0500;Make LU JVP work for rectangular matrices.
Fix bug in BLAS TRSM kernel if left_side=False.

==

jax/lax_linalg.py
jaxlib/lapack.pyx
==================
bf4c6063;Peter Hawkins;2019-01-09 13:22:25 -0500;Make JVP work for square matrices.

==

jax/lax_linalg.py
==================
525a492d;Peter Hawkins;2018-12-22 14:53:42 -0500;Start work on a JVP rule for LU decomposition.

==

jax/lax_linalg.py
tests/linalg_test.py
==================
adaa3444;Peter Hawkins;2019-01-09 10:58:44 -0500;More progress on scatter/gather.

==

jax/lax.py
==================
5e48420f;Peter Hawkins;2019-01-08 21:34:48 -0500;First attempt at lax.gather and lax.scatter.

==

jax/lax.py
==================
a5c737a0;Peter Hawkins;2019-01-08 18:43:47 -0500;Merge pull request #210 from hawkinsp/xla
Update XLA release to include XLA Gather and Scatter Python bindings..
==
==================
44d952f7;Peter Hawkins;2019-01-08 18:42:19 -0500;Update XLA release to include XLA Gather and Scatter Python bindings..
https://github.com/tensorflow/tensorflow/commit/0ce305b6ce8560945be3a92eae1bcddd60af5e10

==

WORKSPACE
==================
04bfd30f;Peter Hawkins;2019-01-08 13:26:44 -0500;Merge pull request #197 from vishwakftw/svd
Add SVD to jax/numpy/linalg, jax/scipy/linalg
==
==================
170e5ab0;vishwakftw;2019-01-08 23:20:16 +0530;Minor nits

==

jaxlib/lapack.pyx
tests/linalg_test.py
==================
652c04ad;Peter Hawkins;2019-01-08 12:24:41 -0500;Merge pull request #209 from hawkinsp/npops
Implement `np.square`.
==
==================
c509d48b;vishwakftw;2019-01-08 21:47:19 +0530;Address comments
- Fix acronym
- Include test for compute_uv=False
- Remove unnecessary imports

==

jax/lax_linalg.py
jaxlib/lapack.pyx
tests/linalg_test.py
==================
1643b1ec;Peter Hawkins;2019-01-08 09:26:11 -0500;Implement `np.square`.

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
ff6d1109;vishwakftw;2019-01-08 15:51:30 +0530;Added tests for SVD, and fixed some errors in computation

==

jaxlib/lapack.pyx
tests/linalg_test.py
==================
e16f31e9;vishwakftw;2019-01-08 09:30:05 +0530;Merge branch 'master' of https://github.com/google/jax into svd

==
==================
954b047b;vishwakftw;2019-01-08 09:24:48 +0530;Address review comments

==

jax/lax_linalg.py
jax/numpy/linalg.py
jax/scipy/linalg.py
jaxlib/lapack.pyx
==================
6687734b;Matthew Johnson;2019-01-07 17:50:36 -0800;Merge pull request #208 from google/unpack-full-lower
make tuple unpacking cause a full_lower
==
==================
685130b7;Matthew Johnson;2019-01-07 17:28:11 -0800;Merge pull request #205 from google/issue204
make lax.full require concrete (static) shapes
==
==================
0c791acb;Peter Hawkins;2019-01-07 20:11:13 -0500;Merge pull request #206 from hawkinsp/eigh
Implement np.linalg.eigh.
==
==================
5d15cfbd;Peter Hawkins;2019-01-07 19:56:46 -0500;Relax test tolerance for eigh test.

==

tests/linalg_test.py
==================
280b3fe2;Matthew Johnson;2019-01-07 16:54:51 -0800;python3 likes list(map(...))

==

jax/lax.py
==================
1e84a3a0;Matthew Johnson;2019-01-07 16:47:13 -0800;make tuple unpacking cause a full_lower

==

jax/core.py
jax/interpreters/ad.py
==================
e149ae5d;Peter Hawkins;2019-01-07 18:28:48 -0500;Fix reversed shapes in abstract shape rule for eigh.

==

jax/lax_linalg.py
==================
7a114c8f;Peter Hawkins;2019-01-07 18:13:57 -0500;Remove unused malloc/free imports.

==

jaxlib/lapack.pyx
==================
1c2cff15;Peter Hawkins;2019-01-07 18:10:08 -0500;Finish implementation of symmetric eigendecomposition on CPU: * add test case. * add double and complex64 implementations.
Also add logic to all linalg methods to both coerce arguments to arrays, and to promote to an inexact (float or complex) type if the argument is not inexact.

==

jax/lax_linalg.py
jax/numpy/lax_numpy.py
jax/numpy/linalg.py
jax/scipy/linalg.py
jaxlib/lapack.pyx
tests/linalg_test.py
==================
d3348b9c;Peter Hawkins;2018-12-22 14:54:26 -0500;Start work on an implementation of np.linalg.eigh.

==

jax/lax_linalg.py
jaxlib/lapack.pyx
==================
47eb8fa1;Matthew Johnson;2019-01-07 12:38:46 -0800;add another concreteness check to lax.iota

==

jax/lax.py
==================
df87d5ce;Matthew Johnson;2019-01-07 12:28:52 -0800;make lax.full require concrete shapes
improves error message for #204

==

jax/lax.py
==================
ad6859eb;Matthew Johnson;2019-01-07 09:14:01 -0800;Merge pull request #203 from google/batching-bugfixes
batching and hessian-on-containers bugfixes
==
==================
75958898;Matthew Johnson;2019-01-07 08:59:56 -0800;add copyright header to advi.py

==

examples/advi.py
==================
c3664e95;Matthew Johnson;2019-01-07 08:56:19 -0800;set 'jacobian' to point to jacrev

==

jax/api.py
==================
ca27f0a2;Matthew Johnson;2019-01-07 08:54:14 -0800;add jacobian / hessian pytree tests (fixes #173)

==

jax/test_util.py
tests/api_test.py
==================
e4f56d79;Matthew Johnson;2019-01-07 08:34:48 -0800;minor batching bugfixes exposed by general hessian

==

jax/interpreters/batching.py
==================
50310164;Peter Hawkins;2019-01-07 10:59:08 -0500;Disable a number of TF features in build.py that we don't use and don't need to build.

==

build/build.py
==================
02c1e77a;Peter Hawkins;2019-01-07 10:44:22 -0500;Merge pull request #202 from hawkinsp/update-xla
Update XLA release to include fix for wrong output bug.
==
==================
0f40c744;Peter Hawkins;2019-01-07 10:13:55 -0500;Update XLA release to include fix for wrong output bug.
Tensorflow commit https://github.com/tensorflow/tensorflow/commit/38c91321421694432117b077294df43aa31d1193 includes a bugfix to XLA/GPU code generation for transposes.

Fixes #129

==

WORKSPACE
==================
c92ce029;Matthew Johnson;2019-01-06 14:33:21 -0800;Merge pull request #201 from google/flatten-utilities
make jacobians / hessians handle containers
==
==================
e177205e;Matthew Johnson;2019-01-06 14:05:01 -0800;add split and broadcast methods to ShapedArrays

==

jax/numpy/lax_numpy.py
==================
50f1897e;Matthew Johnson;2019-01-06 12:58:06 -0800;Merge pull request #181 from duvenaud/master
Added example of automatic differentiation variational inference
==
==================
81788865;Matthew Johnson;2019-01-06 12:51:24 -0800;use distutils.util.str2bool on JAX_ENABLE_X64

==

jax/lib/xla_bridge.py
==================
0f7c7c4e;Matthew Johnson;2019-01-06 11:59:33 -0800;generalize jacfwd and jacrev to handle pytrees

==

jax/abstract_arrays.py
jax/api.py
jax/api_util.py
jax/flatten_util.py
jax/interpreters/batching.py
jax/interpreters/xla.py
jax/lax.py
jax/numpy/lax_numpy.py
jax/tree_util.py
tests/api_test.py
==================
ad4322c5;Matthew Johnson;2019-01-03 16:14:30 -0800;playing around with flattening functions

==

jax/api.py
jax/api_util.py
jax/flatten_util.py
jax/lax.py
jax/tree_util.py
tests/core_test.py
==================
cb7d3550;David Duvenaud;2019-01-06 09:16:29 -0400;Updated advi example to map over rngs.

==

examples/advi.py
==================
014e19d9;Matthew Johnson;2019-01-05 10:35:41 -0800;Merge pull request #199 from google/issue182
add Softmax layer to stax (closes #182)
==
==================
f9f00e12;Matthew Johnson;2019-01-05 10:31:01 -0800;Merge pull request #198 from google/polyval-complex128
fix np.polyval complex128 dtype bug in x64=True mode
==
==================
3174b37b;Matthew Johnson;2019-01-05 10:22:55 -0800;implement softmax directly

==

jax/experimental/stax.py
==================
555bed74;Matthew Johnson;2019-01-05 10:17:11 -0800;revert lax_numpy dtype promotion logic

==

jax/numpy/lax_numpy.py
==================
ecaae6bd;Matthew Johnson;2019-01-05 10:06:31 -0800;add Softmax layer to stax (closes #182)

==

jax/experimental/stax.py
tests/stax_test.py
==================
77f0fca7;Matthew Johnson;2019-01-05 09:44:34 -0800;fix np.polyval complex128 bug in x64=True mode
Also enable JAX_ENABLE_X64=True tests on Travis to avoid future such
issues. (Internal tests catch things like this, but we don't run those
automatically.)

==

.travis.yml
jax/lib/xla_bridge.py
jax/numpy/lax_numpy.py
jax/test_util.py
==================
484db1e1;vishwakftw;2019-01-05 11:13:08 +0530;Add SVD for float and double types

==

jax/lax_linalg.py
jax/numpy/linalg.py
jax/scipy/linalg.py
jaxlib/lapack.pyx
==================
8ada14e9;Matthew Johnson;2019-01-02 18:43:40 -0800;Merge pull request #188 from google/indexing-bug
support x[[0, 2, 4], [0, 2, 4]] indexing, fix #187
==
==================
c4d32ca2;Matthew Johnson;2019-01-02 17:46:46 -0800;support x[[0, 2, 4], [0, 2, 4]] indexing, fix #187

==

jax/numpy/lax_numpy.py
tests/lax_numpy_indexing_test.py
==================
82fb7141;Matthew Johnson;2019-01-02 13:28:17 -0800;Merge pull request #186 from google/prng-split-returns-array
make random.split return something vmap-compatible
==
==================
a627cc80;Matthew Johnson;2019-01-02 12:52:39 -0800;make random.split return something vmap-compatible
(in particular, return an array rather than a tuple, c.f. #181)

==

jax/random.py
==================
d9a798f9;Matthew Johnson;2019-01-02 12:51:26 -0800;fix minor typos in readme.md

==

README.md
==================
d85c0dbe;David Duvenaud;2018-12-31 16:08:23 -0500;Added example of automatic differentiation variational inference

==

examples/advi.py
==================
d2bfc9ad;Matthew Johnson;2018-12-30 22:42:53 -0800;Merge pull request #179 from google/prng-key-vmap
add support for vmap over PRNGKeys
==
==================
4ed5df85;Matthew Johnson;2018-12-30 22:26:22 -0800;add batching test for PRNGKeys and random sampling

==

tests/batching_test.py
==================
072e6f78;Matthew Johnson;2018-12-30 21:42:55 -0800;replace PRNGKey class with uint32[2] array

==

jax/random.py
==================
c5c6e6c5;Matthew Johnson;2018-12-30 20:53:11 -0800;Merge pull request #178 from google/dkd
add np.append and np.polyval
==
==================
5d2fc7c0;Matthew Johnson;2018-12-30 18:07:50 -0800;only test np.polyval on nonscalar array shapes

==

jax/test_util.py
tests/lax_numpy_test.py
==================
9c49a9bf;Matthew Johnson;2018-12-30 17:49:11 -0800;add np.append and np.polyval

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
61d5d79e;Matthew Johnson;2018-12-30 17:12:12 -0800;Merge pull request #175 from google/stax-fan-in-concat
Add stax.FanInConcat
==
==================
b4246163;Matthew Johnson;2018-12-30 16:51:32 -0800;add stax.FanInConcat (fixes #174)

==

jax/experimental/stax.py
tests/stax_test.py
==================
b2d6ce17;Roy Frostig;2018-12-28 13:51:32 -0800;add a placeholder comment for lbr tests

==

jax/test_util.py
==================
0211934c;Roy Frostig;2018-12-26 15:25:14 -0800;skip linalg QR test on cpu

==

tests/linalg_test.py
==================
95a86cd0;Matthew Johnson;2018-12-24 11:34:38 -0800;bump version number for pypi

==

setup.py
==================
59142a24;Matthew Johnson;2018-12-24 10:30:23 -0800;add error message if Dropout gets no rng key
closes #170 (though there's more work to be done here)

==

jax/experimental/stax.py
==================
041ef322;Matthew Johnson;2018-12-23 12:29:29 -0800;Merge pull request #169 from google/boolean-indexing-support
add non-advanced boolean indexing support
==
==================
b900339b;Matthew Johnson;2018-12-23 11:21:33 -0800;loosen scipy test tol to fix benign failure

==

tests/scipy_stats_test.py
==================
6d6b5263;Matthew Johnson;2018-12-23 11:02:00 -0800;add non-advanced boolean indexing support
also don't sub-sample indexing tests (run them all)
fixes #166

==

jax/numpy/lax_numpy.py
tests/lax_numpy_indexing_test.py
==================
fd3645ab;Matthew Johnson;2018-12-23 09:44:44 -0800;Merge pull request #168 from google/vmap-for-dynamic-slice
add batching (vmap) rule for lax.dynamic_slice
==
==================
d48e7ef4;Matthew Johnson;2018-12-23 09:28:23 -0800;add batching (vmap) rule for lax.dynamic_slice
fixes #165

==

jax/lax.py
tests/batching_test.py
==================
648fd436;Peter Hawkins;2018-12-22 14:41:28 -0500;Merge pull request #167 from hawkinsp/master
Implement numpy.linalg.solve and scipy.linalg.solve.
==
==================
87824ee0;Roy Frostig;2018-12-22 11:27:57 -0800;skip numerically unstable test

==

tests/linalg_test.py
==================
b1ff7b4f;Peter Hawkins;2018-12-22 13:59:06 -0500;Fix missing `raise` in error path.

==

jax/scipy/linalg.py
==================
06135fa6;Peter Hawkins;2018-12-21 16:29:45 -0500;Implement numpy.linalg.solve and scipy.linalg.solve.
Make Cholesky and TriangularSolve work for complex numbers on CPU. The HLO implementations are broken for complex numbers on GPU/TPU, so no tests enabled for these yet.

==

jax/lax_linalg.py
jax/numpy/linalg.py
jax/scipy/linalg.py
jaxlib/lapack.pyx
tests/linalg_test.py
==================
54772e1b;Peter Hawkins;2018-12-21 15:21:02 -0500;Merge pull request #163 from hawkinsp/master
Use get() rather than a try-catch block in memoized function lookup.
==
==================
a4386457;Peter Hawkins;2018-12-21 15:18:34 -0500;Fix test failures due to type mismatches in linear algebra tests.
Minor code cleanups.

==

jax/numpy/linalg.py
jax/scipy/linalg.py
jaxlib/lapack.pyx
tests/linalg_test.py
==================
df59c512;Alex Wiltschko;2018-12-21 13:41:59 -0500;Merge pull request #164 from google/revert-155-tfds
Revert "Add TensorFlow Datasets data-loading notebook"
==
==================
b1f91685;Alex Wiltschko;2018-12-21 13:41:45 -0500;Revert "Add TensorFlow Datasets data-loading notebook"

==

notebooks/neural_network_with_tfds_data.ipynb
==================
8127392a;Peter Hawkins;2018-12-21 13:28:31 -0500;Use get() rather than a try-catch block in memoized function lookup.
Currently backtraces often look like this:
```
---------------------------------------------------------------------------
KeyError                                  Traceback (most recent call last)
~/p/jax/jax/util.py in memoized_fun(*args, **kwargs)
    133     try:
--> 134       return cache[key]
    135     except KeyError:

KeyError: ((lu, ShapedArray(int32[2,2])), ())

During handling of the above exception, another exception occurred:

KeyError                                  Traceback (most recent call last)
~/p/jax/jax/util.py in memoized_fun(*args, **kwargs)
    133     try:
--> 134       return cache[key]
    135     except KeyError:

KeyError: ((lu, xla_client.Shape(_dtype=dtype('int32'), _dimensions=(2, 2), _is_tuple=False, _minor_to_major=None)), ())

During handling of the above exception, another exception occurred:

NotImplementedError                       Traceback (most recent call last)
<ipython-input-26-d6c00d50e3c9> in <module>
```

The "during handling of the above exception..." message is mostly a distraction for the user that occurs because we perform the memoized function evaluation inside a `catch` block. By performing the function evaluation outside the catch block, we can get better backtraces without the distraction of the KeyError exception.

```

==

jax/util.py
==================
e05ac8d5;Peter Hawkins;2018-12-21 13:11:48 -0500;Merge pull request #158 from hawkinsp/master
Implement np.kron.
==
==================
58464136;Alex Wiltschko;2018-12-21 12:31:28 -0500;Merge pull request #155 from rsepassi/tfds
Add TensorFlow Datasets data-loading notebook
==
==================
58364f03;Matthew Johnson;2018-12-21 09:29:27 -0800;Merge pull request #161 from google/add-jaxvals-batching
cover unimplemented add_jaxvals_p batching case
==
==================
43f2e2a7;Matthew Johnson;2018-12-21 08:11:36 -0800;cover unimplemented add_jaxvals_p batching case

==

jax/interpreters/batching.py
tests/batching_test.py
==================
179f54c6;Alex Wiltschko;2018-12-21 11:08:13 -0500;Merge pull request #159 from hawkinsp/lr
Lower learning rate in NN example notebook to fix divergence.
==
==================
12a36f4c;Peter Hawkins;2018-12-21 10:58:21 -0500;Lower learning rate in NN example notebook to fix divergence.

==

notebooks/neural_network_and_data_loading.ipynb
==================
484022bb;Peter Hawkins;2018-12-21 10:57:11 -0500;Merge pull request #1 from hawkinsp/learningrate
Lower learning rate in NN notebook to fix divergence
==
==================
9888b33d;Peter Hawkins;2018-12-21 10:55:40 -0500;Lower learning rate in NN notebook to fix divergence

==

notebooks/neural_network_and_data_loading.ipynb
==================
0a75007c;Peter Hawkins;2018-12-21 10:28:30 -0500;Implement np.kron.

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
aae556bf;Peter Hawkins;2018-12-21 10:23:54 -0500;Merge pull request #157 from hawkinsp/master
Implement np.{isposinf,isneginf,nansum,nanprod,nanmin,nanmax,nan_to_num}.
==
==================
bd50c5b6;Peter Hawkins;2018-12-21 08:48:27 -0500;Implement np.{isposinf,isneginf,nansum,nanprod,nanmin,nanmax,nan_to_num}.
No tests until we figure about a story about fast-math semantics.

==

jax/numpy/lax_numpy.py
==================
c8c8fa1a;Peter Hawkins;2018-12-21 08:11:19 -0500;Merge pull request #156 from hawkinsp/master
Implement np.linalg.slogdet.
==
==================
b68c93d3;Peter Hawkins;2018-12-20 22:18:20 -0500;Implement np.linalg.slogdet.
Change implementation of np.linalg.logdet to call np.linalg.slogdet.

Add support for complex64 LU decomposition.

==

jax/lax_linalg.py
jax/numpy/lax_numpy.py
jax/numpy/linalg.py
jaxlib/lapack.pyx
tests/lax_numpy_test.py
tests/linalg_test.py
==================
3db941f1;Peter Hawkins;2018-12-20 22:05:28 -0500;Merge pull request #154 from hawkinsp/master
Add LU decomposition implementation backed by LAPACK on the CPU platform.
==
==================
0df8a8e5;Ryan Sepassi;2018-12-19 21:35:47 -0800;Add TensorFlow Datasets data-loading notebook

==

notebooks/neural_network_with_tfds_data.ipynb
==================
1815f17a;Peter Hawkins;2018-12-20 21:04:02 -0500;Be more defensive about old jaxlib versions and non-CPU devices in LU decomposition usage.

==

jax/lax_linalg.py
tests/linalg_test.py
==================
dfdc2e38;Peter Hawkins;2018-12-20 15:37:34 -0500;Add LU decomposition implementation backed by LAPACK on the CPU platform.
Implement np.linalg.det, and scipy.linalg.{lu,lu_factor,det}.

Add missing abstractification to loop arguments.
Implement XLA abstractification rules for AbstractTuple, ConcreteArray, and ShapedArray.

==

jax/interpreters/xla.py
jax/lax.py
jax/lax_linalg.py
jax/numpy/linalg.py
jax/scipy/linalg.py
jaxlib/lapack.pyx
tests/linalg_test.py
==================
5cf642e3;Peter Hawkins;2018-12-20 16:12:41 -0500;Merge pull request #153 from hawkinsp/numpy
Implement np.{identity,count_nonzero}.
==
==================
4fc73205;Peter Hawkins;2018-12-20 15:36:37 -0500;Implement np.{diagonal,count_nonzero}. Fix shape error if a scalar is passed to reducers. Add test for scalar reductions.

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
4124932b;Matthew Johnson;2018-12-20 10:31:28 -0800;Merge pull request #151 from google/value-and-grad
Add `value_and_grad` (closes #149)
==
==================
565c9558;Matthew Johnson;2018-12-20 10:17:42 -0800;add simple value_and_grad test

==

tests/api_test.py
==================
8f1bc997;Matthew Johnson;2018-12-20 10:09:34 -0800;add value-and-grad fun (closes #149)

==

jax/api.py
==================
21e5eb13;Peter Hawkins;2018-12-20 11:05:08 -0500;Merge pull request #150 from hawkinsp/master
Implement np.{full_like,isinf,isnan}. Fix np.isfinite.
==
==================
bf73c1e2;Peter Hawkins;2018-12-20 10:49:52 -0500;Use lax.bitwise_ in isnan().

==

jax/numpy/lax_numpy.py
==================
7f6119c7;Peter Hawkins;2018-12-20 10:36:32 -0500;Implement np.{full_like,isinf,isnan}. Fix np.isfinite.
Note that inf/nan behavior may not be correct in fastmath mode.

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
95135377;Peter Hawkins;2018-12-20 08:27:43 -0500;Add implementations of np.{meshgrid,linspace,logspace,geomspace,diag_indices} that forward to the usual numpy implementation.

==

jax/numpy/lax_numpy.py
==================
72bc8829;Roy Frostig;2018-12-19 21:37:46 -0800;lower tolerance on triangular-solve test for x64 mode

==

tests/linalg_test.py
==================
449da4cd;Matthew Johnson;2018-12-19 17:12:16 -0800;Merge pull request #147 from google/einsum
fix einsum bugs, add test cases
==
==================
6bb9609f;Matthew Johnson;2018-12-19 16:58:31 -0800;disable test, py3 opt_einsum nondeterministic bug?

==

jax/numpy/lax_numpy.py
tests/lax_numpy_einsum_test.py
==================
6a138202;Matthew Johnson;2018-12-19 16:15:43 -0800;fix several einsum bugs

==

jax/numpy/lax_numpy.py
tests/lax_numpy_einsum_test.py
==================
569db169;Matthew Johnson;2018-12-19 15:34:11 -0800;Merge pull request #148 from google/solve-triangular-jvp
Solve triangular jvp rule
==
==================
e6b23dd2;Dougal Maclaurin;2018-12-19 17:47:56 -0500;Fixed triangular_solve_jvp_rule for transpose_a=True case

==

jax/lax_linalg.py
==================
20935448;Peter Hawkins;2018-12-19 14:51:46 -0500;Whitespace fix to jaxlib/BUILD.

==

jaxlib/BUILD
==================
2b934dae;Matthew Johnson;2018-12-19 11:17:14 -0800;einsum test cases from dask (thanks @sjperkins)
The new cases are based on these test cases from dask:
https://github.com/dask/dask/pull/3412

==

tests/lax_numpy_einsum_test.py
==================
8ba29c2d;Matthew Johnson;2018-12-19 11:15:45 -0800;einsum test cases from dask (thanks @sjperkins)
The new cases are based on these test cases from dask:
https://github.com/dask/dask/pull/3412

==

tests/lax_numpy_einsum_test.py
==================
9c722db3;Matthew Johnson;2018-12-19 10:59:03 -0800;einsum: update id strings after moving batch dims

==

jax/numpy/lax_numpy.py
==================
9a68bce5;Matthew Johnson;2018-12-19 08:55:59 -0800;add comment marking a bug

==

jax/numpy/lax_numpy.py
tests/lax_numpy_einsum_test.py
==================
166f45bf;Matthew Johnson;2018-12-19 08:49:22 -0800;add tests for cases tf.einsum doesn't handle
from https://www.tensorflow.org/api_docs/python/tf/einsum
one currently fails

==

tests/lax_numpy_einsum_test.py
==================
9c6f4915;Matthew Johnson;2018-12-19 09:42:15 -0800;bump version number for pypi

==

setup.py
==================
43e77acc;Matthew Johnson;2018-12-19 09:40:40 -0800;fix select transpose rule

==

jax/lax.py
==================
70866f4d;Matthew Johnson;2018-12-19 09:22:32 -0800;Merge pull request #146 from google/arange-on-floats
jax.numpy.arange should fall back to onp.arange
==
==================
dc1d0c26;Matthew Johnson;2018-12-19 09:21:30 -0800;always fall back to onp.arange for now

==

jax/numpy/lax_numpy.py
==================
ae4bb8d3;Matthew Johnson;2018-12-19 09:08:37 -0800;bump version number for pypi

==

setup.py
==================
6a9952a9;Matthew Johnson;2018-12-19 09:07:04 -0800;jax.numpy.arange should fall back to onp.arange
fixes #145

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
b781e450;Matthew Johnson;2018-12-19 08:42:29 -0800;update jaxlib references to 0.1.3

==

README.md
notebooks/gufuncs.ipynb
notebooks/neural_network_and_data_loading.ipynb
notebooks/quickstart.ipynb
==================
c56f43f2;Matthew Johnson;2018-12-19 08:27:16 -0800;Merge pull request #144 from google/einsum
fix einsum tensor product logic (fixes #37)
==
==================
87922fdf;Dougal Maclaurin;2018-12-19 10:59:13 -0500;Generalized make_jaxpr to handle python containers

==

jax/api.py
==================
997c9c5a;Matthew Johnson;2018-12-19 07:59:00 -0800;fix einsum tensor product logic (fixes #37)
The error was that `lhs_names` and `rhs_names` included `batch_names` as
prefixes, but the reshaping logic was written as if they did not include
batch_names (and so batch_names had to be prepended).

==

jax/numpy/lax_numpy.py
tests/lax_numpy_einsum_test.py
==================
a154b9c6;Peter Hawkins;2018-12-19 09:57:26 -0500;Merge pull request #143 from hawkinsp/astype
Fix implementation of ndarray.astype method, add a test.
==
==================
69d5ec77;Peter Hawkins;2018-12-19 09:54:41 -0500;Merge pull request #142 from hawkinsp/master
Implement np.inner and np.outer.
==
==================
d3bb93f8;Peter Hawkins;2018-12-19 09:28:08 -0500;Fix implementation of ndarray.astype method, add a test.
Previously we were creating an operator named __astype__, which isn't a thing in numpy.

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
473207b9;Peter Hawkins;2018-12-19 09:20:00 -0500;Don't test integer types for np.inner because lax.dot doesn't support them.

==

tests/lax_numpy_test.py
==================
dbab47fd;Peter Hawkins;2018-12-19 08:57:18 -0500;Implement np.inner and np.outer.

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
0a9ee106;Matthew Johnson;2018-12-17 17:20:52 -0800;implement triangular solve lhs jvp (w/ @froystig)

==

jax/interpreters/ad.py
jax/lax_linalg.py
jax/scipy/linalg.py
jax/test_util.py
tests/lax_test.py
tests/linalg_test.py
==================
308843f2;Matthew Johnson;2018-12-18 23:35:52 -0800;bump version number for pypi

==

setup.py
==================
b2cff9d3;Matthew Johnson;2018-12-18 23:33:55 -0800;Merge pull request #141 from google/einsum
add einsum (fixes #37)
==
==================
d7745dd9;Matthew Johnson;2018-12-18 11:33:44 -0800;actually fix py3 str translate

==

jax/numpy/lax_numpy.py
==================
061d033c;Matthew Johnson;2018-12-18 09:12:49 -0800;add jit around einsum

==

jax/numpy/lax_numpy.py
==================
6261ef72;Matthew Johnson;2018-12-18 09:06:01 -0800;more einsum improvements (complete?)

==

jax/numpy/lax_numpy.py
tests/lax_numpy_einsum_test.py
==================
d8388e2d;Matthew Johnson;2018-12-17 22:21:59 -0800;complete support for two-operand einsum

==

jax/numpy/lax_numpy.py
tests/lax_numpy_einsum_test.py
==================
fdde6841;Matthew Johnson;2018-12-17 21:29:04 -0800;add support for two-operrand cases

==

jax/numpy/lax_numpy.py
tests/lax_numpy_einsum_test.py
==================
13a0e116;Matthew Johnson;2018-12-17 18:16:20 -0800;fix broadcasted eye bug, enable more einsum

==

jax/numpy/lax_numpy.py
tests/lax_numpy_einsum_test.py
==================
6a71e9d6;Matthew Johnson;2018-12-16 10:33:10 -0800;start drafting an einsum implementation

==

jax/numpy/lax_numpy.py
tests/lax_numpy_einsum_test.py
==================
bd5c1fd1;Matthew Johnson;2018-12-18 23:19:45 -0800;Merge pull request #140 from google/lazy-constants
avoid materializing some special constants
==
==================
91067280;Matthew Johnson;2018-12-18 23:06:33 -0800;tweak scipy stats test prngs

==

tests/scipy_stats_test.py
==================
a18e3f27;Matthew Johnson;2018-12-18 22:45:34 -0800;add tests for device constants

==

jax/lax.py
tests/lax_test.py
==================
f2776097;Matthew Johnson;2018-12-18 19:09:15 -0800;add scipy and cython to wheel dockerfile

==

build/Dockerfile
==================
6757b758;Matthew Johnson;2018-12-18 19:04:01 -0800;bump jaxlib version for wheel building

==

build/setup.py
==================
20ca0bd7;Matthew Johnson;2018-12-18 17:19:47 -0800;add cutoff for materialize-and-xfer vs build-on-device
see https://github.com/google/jax/pull/140#issuecomment-448433620

==

jax/interpreters/xla.py
==================
6865783c;Matthew Johnson;2018-12-18 16:31:51 -0800;fix some longstanding readme typos

==

README.md
examples/mnist_vae.py
==================
d065f863;Peter Hawkins;2018-12-18 15:51:41 -0500;Update XLA release to incorporate TriangularSolve fix.
Fixes #128 (requires a jaxlib rebuild)

==

WORKSPACE
==================
88bb264e;Matthew Johnson;2018-12-18 09:58:42 -0800;fix exception check for python3

==

tests/api_test.py
==================
78a42405;Matthew Johnson;2018-12-18 09:18:14 -0800;add fix from einsum branch

==

jax/lax.py
==================
52c6eac3;Matthew Johnson;2018-12-15 19:14:05 -0800;use lax.tie_in in jax.random for better consts

==

jax/interpreters/xla.py
jax/random.py
==================
bdc9e92f;Matthew Johnson;2018-12-15 18:42:26 -0800;remove full_p to improve power:weight

==

jax/interpreters/xla.py
jax/lax.py
jax/numpy/lax_numpy.py
tests/api_test.py
==================
1ae1ae17;Matthew Johnson;2018-12-15 17:49:00 -0800;add EyeConstant, new np.eye and np.array code

==

jax/abstract_arrays.py
jax/interpreters/xla.py
jax/lax.py
jax/numpy/lax_numpy.py
jax/random.py
==================
dfc25a06;Matthew Johnson;2018-12-13 11:12:11 -0800;add IotaConstant (untested)

==

jax/lax.py
==================
f9714152;Matthew Johnson;2018-12-13 07:24:14 -0800;add tie_in and full primitives (constant creation)

==

jax/core.py
jax/interpreters/xla.py
jax/lax.py
jax/lib/xla_bridge.py
jax/numpy/lax_numpy.py
==================
25cf9358;Matthew Johnson;2018-12-17 15:34:05 -0800;Merge pull request #131 from google/mean-kwargs
fix mean/var/std kwargs (closes #125)
==
==================
5589a3cc;Matthew Johnson;2018-12-17 15:13:41 -0800;fix up error messages

==

jax/numpy/lax_numpy.py
==================
f78bd8a5;Peter Hawkins;2018-12-17 18:05:21 -0500;Merge pull request #130 from hawkinsp/master
Progress towards calling LAPACK kernels on CPU for unbatched Cholesky and Triangular solve
==
==================
8c25c292;Peter Hawkins;2018-12-17 17:54:43 -0500;Merge pull request #127 from j-towns/qr-jvp
Implement the JVP of the QR decomposition
==
==================
e0f42174;Peter Hawkins;2018-12-17 17:52:16 -0500;Import CPU Lapack implementation conditionally to ease jaxlib upgrade.

==

jax/lax_linalg.py
==================
895c122b;Matthew Johnson;2018-12-17 14:42:32 -0800;tweak test to better reflect #125

==

tests/lax_numpy_test.py
==================
ab1ebc6b;Peter Hawkins;2018-12-17 17:39:46 -0500;Add experimental warning to numpy.linalg and scipy.linalg.

==

jax/numpy/linalg.py
jax/scipy/linalg.py
==================
1f2925ea;Matthew Johnson;2018-12-17 12:52:30 -0800;add backend-specific translation table in xla.py

==

jax/interpreters/xla.py
jax/lax_linalg.py
jax/lib/xla_bridge.py
==================
7524f2c0;Matthew Johnson;2018-12-17 14:26:28 -0800;fix mean/var/std kwargs (closes #125)

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
27ef207a;Peter Hawkins;2018-12-17 17:19:23 -0500;Bump XLA version to incorporate CPU custom call extensions.

==

WORKSPACE
==================
eac96ac2;Peter Hawkins;2018-12-17 17:14:59 -0500;Fix bugs with bool argument passing; pass PRED values as int32s instead.

==

jax/lax_linalg.py
jaxlib/lapack.pyx
==================
0333a98b;Peter Hawkins;2018-12-17 16:39:19 -0500;Add triangular solve BLAS implementation.

==

jax/lax_linalg.py
jaxlib/lapack.pyx
==================
e630fda9;Peter Hawkins;2018-12-17 14:46:00 -0500;Add missing copyright notice. Remove unused BUILD load() statement.

==

build/BUILD
jaxlib/lapack.pyx
==================
3c388b98;Peter Hawkins;2018-12-17 14:36:21 -0500;Add support for calling LAPACK primitives from SciPy from JAX linalg.

==

build/BUILD
build/install_xla_in_source_tree.sh
jax/lax_linalg.py
jaxlib/BUILD
jaxlib/lapack.pyx
==================
5a4a066a;Roy Frostig;2018-12-17 11:43:23 -0800;Merge pull request #126 from google/gram-jaxprs
Seed a `make_jaxpr` transformation and use it in the kernel regression example
==
==================
e0ad5bb3;Roy Frostig;2018-12-17 11:42:45 -0800;add TODO comment for containers in `api.make_jaxpr`

==

jax/api.py
==================
5cdf915f;Jamie Townsend;2018-12-17 16:36:55 +0000;Test qr jvp

==

jax/lax_linalg.py
tests/linalg_test.py
==================
f5b8d97c;Jamie Townsend;2018-12-17 16:04:51 +0000;Add url for qr jvp notes

==

jax/lax_linalg.py
==================
1743a936;Jamie Townsend;2018-12-17 16:02:29 +0000;Add qr decomposition jvp

==

jax/lax_linalg.py
==================
dda5bdb6;Roy Frostig;2018-12-16 13:27:36 -0800;illustrate two-level autobatching with jaxprs of the gram matrix function in the kernel least-squares example

==

examples/kernel_lsq.py
==================
f4a8e03c;Roy Frostig;2018-12-16 13:26:02 -0800;add a basic `make_jaxpr` transformation to the api module

==

jax/api.py
==================
3b8fdb05;Roy Frostig;2018-12-16 13:20:11 -0800;wrap "jit" around generated function name

==

jax/api.py
==================
b318f569;Roy Frostig;2018-12-15 11:19:18 -0800;generate name, module, and doctring for functions output from `jit`.

==

jax/api.py
==================
ea08ecd5;Matthew Johnson;2018-12-16 11:32:55 -0800;add promote_dtypes logic to tensordot

==

jax/numpy/lax_numpy.py
==================
b8a69889;Roy Frostig;2018-12-16 10:45:51 -0800;Merge pull request #123 from google/unbazel-tests
remove unuzed bazel build rules, including bazel test definitions
==
==================
28828772;Roy Frostig;2018-12-15 16:49:41 -0800;remove unuzed bazel build rules, including bazel test definitions

==

examples/BUILD
tests/BUILD
tests/build_defs.bzl
==================
c54e82ce;Matthew Johnson;2018-12-16 07:22:25 -0800;be more explicit about last layer in example
closes #119

==

examples/mnist_classifier_fromscratch.py
==================
797f7afa;Matthew Johnson;2018-12-15 22:12:37 -0800;Merge pull request #118 from google/tensordot
add tensordot
==
==================
2e20a609;Matthew Johnson;2018-12-15 21:59:18 -0800;add tensordot

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
617dc18b;Matthew Johnson;2018-12-15 20:16:07 -0800;bump version for pypi

==

setup.py
==================
bfe653c6;Matthew Johnson;2018-12-15 20:00:10 -0800;Tracer.__len__ should reflect on abstract value
This old implementation, which was meant to be revised but which we
forgot about, caused a surprising slowdown: if x were a traced array of
size 50000, evaluating len(x) would create 50000 traced temporary
objects, which led to a lot of overhead! That came up in our
implementation of jax.random.shuffle, which happened to call len()
instead of x.shape[axis] (even though it should have been using x.size
anyway, according to tjablin@'s code that it's based on).

==

jax/abstract_arrays.py
jax/core.py
jax/random.py
==================
a97f8209;Roy Frostig;2018-12-15 15:54:31 -0800;update examples/BUILD

==

examples/BUILD
tests/BUILD
==================
06b7e54c;Peter Hawkins;2018-12-15 10:52:10 -0500;Fix bug in "economic" mode in jax.scipy.linalg.qr where it returned the full decomposition.

==

jax/scipy/linalg.py
==================
13a135d4;Peter Hawkins;2018-12-15 10:22:42 -0500;Implement lower=False case for scipy.linalg.cholesky.
Remove np.linalg.{dot,matmul,trace}, because these aren't part of the numpy API. I had previously misinterpreted the np.linalg documentation to mean that they also existed in that module.

==

jax/numpy/linalg.py
jax/scipy/linalg.py
==================
fe059f3a;Matthew Johnson;2018-12-14 19:56:45 -0800;bump version number for pypi

==

setup.py
==================
ea5c03c8;Matthew Johnson;2018-12-14 19:50:55 -0800;Merge pull request #117 from google/oss-tests
add oss test instructions, fix conv grad bug
==
==================
6956e8a2;Matthew Johnson;2018-12-14 19:35:56 -0800;tweak conv grad test

==

tests/lax_test.py
==================
f437ba37;Matthew Johnson;2018-12-14 19:23:53 -0800;make conv grad test smaller (better numerics)

==

tests/lax_test.py
==================
13b8e21a;Matthew Johnson;2018-12-14 18:40:50 -0800;squash conv grad bug introduced in 0d64aea (loudly errored, didn't produce silently incorrect results!)

==

.travis.yml
jax/lax.py
jax/test_util.py
tests/lax_test.py
==================
6de5c8a6;Matthew Johnson;2018-12-14 16:48:08 -0800;add test-running instructions (fixes #67)

==

.travis.yml
README.md
examples/examples_test.py
jax/test_util.py
tests/lax_numpy_test.py
==================
c268929f;Matthew Johnson;2018-12-14 16:22:51 -0800;add 'dtype' arg to np.std, add test coverage

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
4919a481;Matthew Johnson;2018-12-14 12:21:55 -0800;Merge pull request #115 from sschoenholz/patch-1
Fixed argument order in call to var from std.
==
==================
5d6ebba2;sschoenholz;2018-12-14 11:58:03 -0800;Fixed argument order in call to var from std.

==

jax/numpy/lax_numpy.py
==================
aa7c8c36;Matthew Johnson;2018-12-14 10:35:01 -0800;tweak minmax example imports in readme

==

README.md
==================
7cf0e9b1;Peter Hawkins;2018-12-14 12:55:56 -0500;Merge pull request #114 from hawkinsp/master
Enable MKL-DNN contraction kernels.
==
==================
3d4cb9f9;Peter Hawkins;2018-12-14 12:21:25 -0500;Enable MKL-DNN contraction kernels.
Add a new build option --enable_mkl_dnn that enables MKLDNN contraction kernels in XLA. This leads to significant performance improvements for XLA's dot operator. Enable MKL-DNN by default.

Update XLA version to include MKL-DNN build fix.

Also add a new --enable_march_native build option that turns on -march=native. This is unlikely to have a significant performance impact since XLA JIT-compiles most of its code. Leaving this off by default because it also generates code unlikely to run across a wide selection of architectures and so is unsuitable for building pip wheels.

==

WORKSPACE
build/build.py
==================
5a0f4515;Matthew Johnson;2018-12-14 09:00:00 -0800;Merge pull request #113 from google/debug-any-batching
np.all and np.any should lead to monoid reducers
==
==================
b164d318;Matthew Johnson;2018-12-14 08:42:02 -0800;reduce_and / reduce_or monoid reducer primitives The parent commit reused reduce_min / reduce_max on booleans, which is formally equivalent but preserves less information when lowering to XLA.

==

jax/lax.py
==================
693365c2;Matthew Johnson;2018-12-14 08:07:12 -0800;np.all and np.any should lead to monoid reducers fixes #108

==

jax/lax.py
jax/numpy/lax_numpy.py
tests/batching_test.py
tests/lax_numpy_test.py
==================
87ee4b7c;Matthew Johnson;2018-12-13 19:59:08 -0800;update jaxlib references to 0.1.2

==

README.md
notebooks/gufuncs.ipynb
notebooks/neural_network_and_data_loading.ipynb
notebooks/quickstart.ipynb
==================
97d747cd;Matthew Johnson;2018-12-13 18:37:31 -0800;bump jaxlib version for pypi reasons

==

build/setup.py
==================
e682af7e;Matthew Johnson;2018-12-13 18:24:35 -0800;increase mnist example batch size to 128

==

examples/mnist_classifier.py
examples/mnist_classifier_fromscratch.py
notebooks/neural_network_and_data_loading.ipynb
==================
14acd1db;Peter Hawkins;2018-12-13 21:12:22 -0500;Merge pull request #110 from hawkinsp/master
Implement np.linalg.inv using a QR decomposition.
==
==================
23525bd9;Peter Hawkins;2018-12-13 21:02:24 -0500;Add scipy.linalg.inv as well. Simplify the QR call in np.linalg.inv.

==

jax/numpy/linalg.py
jax/scipy/linalg.py
==================
2048874d;Matthew Johnson;2018-12-13 17:44:08 -0800;add '--upgrade' to pip install examples

==

README.md
notebooks/gufuncs.ipynb
notebooks/neural_network_and_data_loading.ipynb
notebooks/quickstart.ipynb
==================
b986513e;Matthew Johnson;2018-12-13 17:35:36 -0800;bump jaxlib version to 0.1.1

==

build/setup.py
==================
2e40e635;Matthew Johnson;2018-12-13 17:35:19 -0800;update jaxlib wheel urls to 0.1.1

==

README.md
notebooks/gufuncs.ipynb
notebooks/neural_network_and_data_loading.ipynb
notebooks/quickstart.ipynb
==================
e4ef7eae;Matthew Johnson;2018-12-13 17:12:06 -0800;add travis badge to readme

==

README.md
==================
06453b86;Matthew Johnson;2018-12-13 17:11:45 -0800;Merge pull request #112 from google/enable-linalg-tests
enable linalg tests
==
==================
228a5d5e;Matthew Johnson;2018-12-13 17:02:37 -0800;enable linalg tests

==

tests/linalg_test.py
==================
24784608;Matthew Johnson;2018-12-13 16:54:54 -0800;Merge pull request #111 from google/travis-ci
add travis ci support, fixes #68 
==
==================
9b645364;Matthew Johnson;2018-12-13 16:32:12 -0800;tests depend on scipy, tweaks

==

.travis.yml
jax/numpy/lax_numpy.py
==================
94b424e4;Peter Hawkins;2018-12-13 19:33:02 -0500;Fix bug in inv test harness.

==

tests/linalg_test.py
==================
3aad9b68;Peter Hawkins;2018-12-13 19:28:05 -0500;Implement np.linalg.inv using a QR decomposition.
An LU decomposition would probably be preferable; we can switch the implementation when we have an LU decomposition.

Fixes #44.

==

jax/numpy/linalg.py
tests/linalg_test.py
==================
b64df0b7;Matthew Johnson;2018-12-13 16:24:32 -0800;comment out tests (temp), remove examples imports examples imports add a new test dependency on matplotlib

==

tests/examples_test.py
tests/linalg_test.py
==================
5d7f356b;Matthew Johnson;2018-12-13 13:53:41 -0800;use 'dist: xenial' in travis.yml to get updated toolchain

==

.travis.yml
==================
32b339a5;Peter Hawkins;2018-12-13 19:07:04 -0500;Merge pull request #109 from hawkinsp/master
Disable tests that don't pass on all backends.
==
==================
e77599f3;Peter Hawkins;2018-12-13 19:05:32 -0500;Disable tests that don't pass on all backends.
Avoid use of @skip decorator since it breaks in Python 2 in some cases.

==

tests/core_test.py
tests/examples_test.py
tests/lax_numpy_test.py
==================
b7728d42;Matthew Johnson;2018-12-13 13:41:49 -0800;add jaxlib install to travis file

==

.travis.yml
==================
32f89e6c;Matthew Johnson;2018-12-13 13:39:34 -0800;add initial travis ci file

==

.travis.yml
==================
bc9e1574;Peter Hawkins;2018-12-13 16:17:20 -0500;Merge pull request #107 from hawkinsp/master
Make JAX flake8-clean.
==
==================
b440544b;Matthew Johnson;2018-12-13 13:12:32 -0800;Merge remote-tracking branch 'origin/master'

==
==================
b6a07acc;Peter Hawkins;2018-12-13 15:59:41 -0500;Mark examples as public visibility in BUILD file.

==

examples/BUILD
==================
a1ba39ad;Peter Hawkins;2018-12-13 15:41:10 -0500;Replace instance of go/jax with GitHub URL.

==

notebooks/quickstart.ipynb
==================
0d4eb6c1;Peter Hawkins;2018-12-13 15:29:39 -0500;Make JAX flake8-clean.
Fixes #1.

==

examples/kernel_lsq.py
jax/abstract_arrays.py
jax/core.py
jax/interpreters/xla.py
jax/lax.py
jax/numpy/lax_numpy.py
tests/minmax_test.py
==================
1eccd744;Peter Hawkins;2018-12-13 15:16:22 -0500;Update XLA version in JAX to pick up fix for Mac OS __bzero intrinsic crash.

==

WORKSPACE
==================
c5d6c9f0;Matthew Johnson;2018-12-13 11:56:23 -0800;Merge remote-tracking branch 'origin/master'

==
==================
bf5a30cd;Matthew Johnson;2018-12-13 11:55:11 -0800;fix warning

==

jax/test_util.py
==================
a2850171;Matthew Johnson;2018-12-13 11:52:41 -0800;fix failing tests (misc small bugs)

==

jax/config.py
jax/experimental/stax.py
jax/numpy/fft.py
jax/numpy/lax_numpy.py
jax/numpy/linalg.py
jax/random.py
jax/scipy/special.py
tests/core_test.py
tests/lax_numpy_indexing_test.py
tests/lax_numpy_test.py
tests/lax_test.py
==================
f88b799e;Peter Hawkins;2018-12-13 14:28:52 -0500;Merge pull request #105 from hawkinsp/master
Add Cholesky, QR, and Triangular solve implementations.
==
==================
3561b432;Peter Hawkins;2018-12-13 13:03:08 -0500;Add Cholesky, QR, and Triangular solve implementations.
* Adds lax.{cholesky,triangular_solve,qr}. Adds a JVP for Cholesky.
* Adds a transpose rule for add_p, needed by the Cholesky JVP.
* Adds np.linalg.{cholesky,qr,dot,matmul,trace}.
* Adds scipy.linalg.{cholesky,qr,solve_triangular,tril,triu}.

Pair programmed with mattjj.

==

jax/lax.py
jax/lax_linalg.py
jax/numpy/linalg.py
jax/scipy/__init__.py
jax/scipy/linalg.py
tests/BUILD
tests/linalg_test.py
==================
54bceee9;Matthew Johnson;2018-12-13 08:56:40 -0800;make num_generated_cases also settable by env var

==

jax/test_util.py
==================
579665b1;Matthew Johnson;2018-12-13 07:28:59 -0800;add set_printoptions (same as onp version)

==

jax/numpy/lax_numpy.py
==================
9ce67993;Peter Hawkins;2018-12-13 09:58:05 -0500;Merge pull request #102 from hawkinsp/master
Implement np.trace.
==
==================
22f9d50b;Peter Hawkins;2018-12-13 08:44:27 -0500;Implement np.trace.
Also add code to forward np.{iinfo,finfo,issubdtype,integer} to their original numpy equivalents.

Fixes #29.

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
3fba60fc;Matthew Johnson;2018-12-13 05:09:39 -0800;Merge pull request #100 from vishwakftw/log2-log10-exp2-logaddexp-logaddexp2
Add log2, log10, logaddexp2, exp2 to lax_numpy
==
==================
cdff3b9b;vishwakftw;2018-12-13 17:11:03 +0530;Add tests for implemented functions

==

tests/lax_numpy_test.py
==================
52d329c6;vishwakftw;2018-12-13 12:57:49 +0530;Add log2, log10, logaddexp2, exp2 to lax_numpy
I also took this opportunity to add some missing decorators

==

jax/numpy/lax_numpy.py
==================
51d89a33;Matthew Johnson;2018-12-12 21:32:30 -0800;tweak readme text

==

README.md
==================
756bc8bb;Matthew Johnson;2018-12-12 20:31:25 -0800;bump version number for pypi

==

setup.py
==================
5c3e918b;Matthew Johnson;2018-12-12 20:29:19 -0800;Merge pull request #96 from google/add-misc-numpy-ops
add misc numpy ops (c.f. #70)
==
==================
1f42d980;Matthew Johnson;2018-12-12 19:05:40 -0800;rename ResNet50Test -> ExamplesTest, remove some dots

==

jax/lax.py
tests/examples_test.py
==================
77d6fb4c;Matthew Johnson;2018-12-12 17:53:37 -0800;transpose shouldn't transpose with identity perm

==

jax/lax.py
==================
538850e2;Matthew Johnson;2018-12-12 15:30:41 -0800;add misc numpy ops (c.f. #70)

==

jax/lax.py
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
8f019d89;Peter Hawkins;2018-12-12 22:06:09 -0500;Merge pull request #99 from hawkinsp/master
Fix dtype semantics of reductions to more closely match numpy.
==
==================
3307553d;Matthew Johnson;2018-12-12 19:01:32 -0800;readme: JAX is about composable transformations

==

README.md
==================
9c63c0ff;Peter Hawkins;2018-12-12 21:53:18 -0500;Fix dtype semantics of numpy reductions to more closely match that of numpy.
Add tests for the dtype argument to reductions.

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
45444f02;Roy Frostig;2018-12-12 17:41:23 -0800;Merge pull request #97 from google/gram
kernel least-squares example
==
==================
437f780a;Roy Frostig;2018-12-12 17:21:00 -0800;test the kernel least-squares example

==

tests/examples_test.py
==================
693e5107;Roy Frostig;2018-12-11 13:25:55 -0800;add kernel least-squares regression example

==

examples/BUILD
examples/kernel_lsq.py
==================
74d62fd9;Roy Frostig;2018-12-12 17:08:52 -0800;Merge pull request #95 from google/test-examples
Seed example tests
==
==================
bec24999;Roy Frostig;2018-12-12 16:08:59 -0800;import more examples in examples_test, fix resulting errors

==

examples/mnist_classifier.py
examples/mnist_classifier_fromscratch.py
examples/mnist_vae.py
tests/examples_test.py
==================
91fe4a1b;Roy Frostig;2018-12-12 14:10:50 -0800;skip resnet50 example tests in x64 mode

==

tests/examples_test.py
==================
cfc37eb0;Roy Frostig;2018-12-12 13:07:46 -0800;add a test of the resnet50 example

==

tests/BUILD
tests/examples_test.py
==================
fce7fe60;Peter Hawkins;2018-12-12 18:16:07 -0500;Merge pull request #94 from hawkinsp/master
Implement np.{diag,diagonal}.
==
==================
9c690143;Roy Frostig;2018-12-12 14:26:35 -0800;Only build-depend on libjax optionally (via bazel CLI flag) in the generated bazel test targets.

==

tests/BUILD
tests/build_defs.bzl
==================
5fe781e2;Roy Frostig;2018-12-12 14:16:21 -0800;Add tags to bazel test rules for filtering.
For example:

  bazel test tests/... --test_tag_filters=-jax_test_gpu

builds and runs all targets except those generated to test jax compilation to GPU.

==

tests/build_defs.bzl
==================
7530f568;Peter Hawkins;2018-12-12 17:54:27 -0500;Implement np.{diag,diagonal}.

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
e29b41ee;Alex Wiltschko;2018-12-12 16:56:59 -0500;Merge pull request #92 from google/onnx2xla
add onnx2xla compiler example (closes #91)
==
==================
88986e4d;Matthew Johnson;2018-12-12 13:51:08 -0800;add md5 check for downloaded onnx file

==

examples/onnx2xla.py
==================
d95fa733;Matthew Johnson;2018-12-12 13:23:05 -0800;add newline to end of file

==

examples/onnx2xla.py
==================
9ddd30c2;Matthew Johnson;2018-12-12 13:18:22 -0800;add onnx2xla compiler example (closes #91)

==

examples/onnx2xla.py
==================
cad36945;Peter Hawkins;2018-12-12 15:55:55 -0500;Update build.py to write its .bazelrc in the root directory of the repository, next to the workspace.
Fixes build breakage caused by workspace move.

==

build/build.py
==================
986514ee;Matthew Johnson;2018-12-12 10:16:06 -0800;Merge pull request #71 from vishwakftw/scipy-stats-more-dists
Add a few popular distributions to jax.scipy.stats
==
==================
9cfc6499;vishwakftw;2018-12-12 23:43:50 +0530;Rename test_scipy_stats to scipy_stats_test

==

tests/scipy_stats_test.py
==================
a7b33929;Matthew Johnson;2018-12-12 10:01:40 -0800;bump version number for pypi

==

setup.py
==================
af8223a2;Matthew Johnson;2018-12-12 09:17:40 -0800;Merge pull request #90 from hawkinsp/master
Add implementations of np.{tri,tril,triu}.
==
==================
3c11d4f7;Peter Hawkins;2018-12-12 12:05:49 -0500;Add implementations of np.{tri,tril,triu}.

==

jax/lib/xla_bridge.py
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
d3ec0b23;Matthew Johnson;2018-12-12 09:00:39 -0800;fix miscellaneous bugs, incl. complex abs grad

==

jax/interpreters/ad.py
jax/lax.py
jax/numpy/lax_numpy.py
tests/api_test.py
tests/batching_test.py
tests/core_test.py
tests/generated_fun_test.py
tests/lapax_test.py
tests/lax_numpy_indexing_test.py
tests/lax_numpy_test.py
tests/lax_scipy_test.py
tests/lax_test.py
tests/minmax_test.py
tests/random_test.py
tests/stax_test.py
==================
13e4233e;Matthew Johnson;2018-12-12 07:36:01 -0800;Merge pull request #88 from vishwakftw/gitignore
Add build/ and dist/ to .gitignore
==
==================
46f7c6a8;vishwakftw;2018-12-12 20:55:38 +0530;Add build/ and dist/ to .gitignore
An alternative to installing `jax` using `pip install -e .` is to use `python setup.py`. This creates build/ and dist/ directories that should not be included in diffs since they are meant to be local.

This PR adds those entries to the .gitignore file

==

.gitignore
==================
0e6a44f1;vishwakftw;2018-12-12 20:41:48 +0530;Add tests, fix small bugs in the logpdf functions

==

jax/scipy/stats/beta.py
jax/scipy/stats/gamma.py
jax/scipy/stats/laplace.py
jax/scipy/stats/uniform.py
tests/lax_scipy_test.py
tests/test_scipy_stats.py
==================
9b835a18;Dougal Maclaurin;2018-12-12 09:47:49 -0500;Added some docstrings to top-level transformations

==

jax/api.py
==================
7b781a5d;Matthew Johnson;2018-12-12 06:29:33 -0800;Merge pull request #87 from hawkinsp/master
Consolidate build/WORKSPACE and WORKSPACE. 
==
==================
11720fd0;Peter Hawkins;2018-12-12 09:16:03 -0500;Consolidate build/WORKSPACE and WORKSPACE. We don't need to have two WORKSPACEs in the same project; if we later choose to split C++ and Python parts of the project into separate repositories, we can split the WORKSPACE at that time.

==

WORKSPACE
build/WORKSPACE
==================
c1a42617;Peter Hawkins;2018-12-12 09:04:35 -0500;Update XLA to include Python linear algebra changes.

==

build/WORKSPACE
==================
314056ed;1e100;2018-12-12 02:41:53 -0800;Make Jax buildable with the latest Bazel
Without this change build script fails with the following message: 
```
Encountered error while reading extension file 'tensorflow/workspace.bzl': no such package '@org_tensorflow//tensorflow': The native http_archive rule is deprecated. load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive") for a drop-in replacement.
```

This PR simply implements the suggestion in the error. I was able to successfully build after applying the change.
==

build/WORKSPACE
==================
dad72f94;Peter Hawkins;2018-12-12 08:44:07 -0500;Add missing license header to Python files.

==

jax/numpy/fft.py
jax/numpy/linalg.py
==================
650db099;Matthew Johnson;2018-12-11 20:46:02 -0800;tweak readme to make colab bullet fit on one line

==

README.md
==================
42302fc8;Matthew Johnson;2018-12-11 16:29:10 -0800;bump version number for pypi

==

setup.py
==================
c52f8822;Matthew Johnson;2018-12-11 16:26:51 -0800;Merge pull request #82 from google/batching-rules
add batching rules, fix jacfwd/jacrev transpose bug
==
==================
89349e5e;Matthew Johnson;2018-12-11 16:24:20 -0800;fix transpose issue in jacfwd and jacrev

==

jax/api.py
jax/interpreters/batching.py
tests/api_test.py
tests/batching_test.py
==================
e788539e;Matthew Johnson;2018-12-11 16:07:28 -0800;add concatenate batching rule (c.f. #54)

==

jax/lax.py
tests/batching_test.py
==================
97589a3d;Matthew Johnson;2018-12-11 14:00:58 -0800;add batching rule for lax.pad (c.f. #54)

==

jax/lax.py
tests/batching_test.py
==================
3ac1001c;Matthew Johnson;2018-12-11 15:45:56 -0800;use find_packages() in setup.py

==

setup.py
==================
8fac32e5;Matthew Johnson;2018-12-11 13:39:31 -0800;colab notebooks now do 'pip install --upgrade jax' (it seems the vm can persist in some cases)

==

notebooks/gufuncs.ipynb
notebooks/neural_network_and_data_loading.ipynb
notebooks/quickstart.ipynb
==================
4039aa48;Matthew Johnson;2018-12-11 13:32:22 -0800;bump version number for pypi

==

setup.py
==================
72d3bd54;Roy Frostig;2018-12-11 13:19:06 -0800;Merge pull request #79 from google/curry-vmap
change vmap api to be curried (closes #78)
==
==================
9099272e;Matthew Johnson;2018-12-11 12:55:39 -0800;fix typo in readme

==

README.md
==================
cbd9ace4;Matthew Johnson;2018-12-11 12:52:09 -0800;change vmap api to be curried (closes #78)

==

README.md
jax/api.py
notebooks/gufuncs.ipynb
notebooks/neural_network_and_data_loading.ipynb
notebooks/quickstart.ipynb
tests/batching_test.py
==================
9cd60279;Matthew Johnson;2018-12-11 12:14:57 -0800;add python built-in complex type to array types fixes #74

==

jax/abstract_arrays.py
==================
2b9a8bc1;Roy Frostig;2018-12-11 11:44:15 -0800;Merge pull request #77 from google/rot90
add rot90 and flip, adjust testOp test selection
==
==================
5a1aeca9;Matthew Johnson;2018-12-11 08:54:35 -0800;add rot90 and flip, adjust testOp test selection closes #55

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
tests/lax_test.py
==================
0f9a69fb;Peter Hawkins;2018-12-11 13:58:07 -0500;Merge pull request #72 from google/unimplemented-funcs
Adding unimplemented functions more numpy modules 
==
==================
567caecd;Matthew Johnson;2018-12-11 10:18:11 -0800;revert build_defs.bzl for now

==

tests/build_defs.bzl
==================
7198e094;Matthew Johnson;2018-12-11 09:19:15 -0800;enable skip_checks for merging to master

==

jax/core.py
==================
ffecf2cc;Matthew Johnson;2018-12-11 09:18:38 -0800;fix bugs in zeros_like and complex transpose

==

jax/interpreters/ad.py
jax/lax.py
==================
0d64aea6;Matthew Johnson;2018-12-10 17:18:56 -0800;clean up conv dimension_numbers handling

==

jax/lax.py
jax/test_util.py
tests/lax_test.py
==================
1350db2b;Dougal Maclaurin;2018-12-09 13:33:15 -0500;Added higher-order differentiation checks in lax_test and fixed some bugs. Conv tests currently failing.

==

WORKSPACE
jax/core.py
jax/lax.py
jax/test_util.py
tests/build_defs.bzl
tests/lax_test.py
==================
0b7bed87;Alex Wiltschko;2018-12-11 12:44:02 -0500;Adding unimplemented functions to numpy.random, numpy.fft and numpy.linalg

==

jax/numpy/__init__.py
jax/numpy/fft.py
jax/numpy/linalg.py
jax/random.py
==================
887c5003;Roy Frostig;2018-12-11 09:21:57 -0800;Merge pull request #69 from google/unimplemented-funcs
Automated detection of unimplemented functions
==
==================
7b9a3077;Alex Wiltschko;2018-12-11 12:10:44 -0500;Reverting unnecessary blank space addition

==

jax/numpy/__init__.py
==================
2d25a743;vishwakftw;2018-12-11 22:22:11 +0530;Add a few popular distributions to jax.scipy.stats
- Beta
- Exponential
- Gamma
- Laplace
- Uniform

==

jax/scipy/stats/__init__.py
jax/scipy/stats/beta.py
jax/scipy/stats/expon.py
jax/scipy/stats/gamma.py
jax/scipy/stats/laplace.py
jax/scipy/stats/uniform.py
==================
6873760f;Alex Wiltschko;2018-12-11 11:56:03 -0500;Remove unused lines

==

jax/numpy/lax_numpy.py
==================
763f8601;Alex Wiltschko;2018-12-11 11:52:31 -0500;Automated detection of unimplemented functions

==

jax/numpy/__init__.py
jax/numpy/lax_numpy.py
jax/util.py
==================
b5cc142b;Peter Hawkins;2018-12-11 08:17:24 -0500;Merge pull request #53 from matt-graham/concatenate-zero-dim-error
More informative error on trying to concatenate zero-dimensional arrays
==
==================
7180eb03;Matt Graham;2018-12-11 13:58:33 +0800;More informative error on trying to concatenate 0-dim arrays.

==

jax/numpy/lax_numpy.py
==================
fc4afb40;Alex Wiltschko;2018-12-10 19:22:22 -0500;Merge pull request #50 from google/readme-quickstart-update
Update README.md
==
==================
e425f244;Alex Wiltschko;2018-12-10 19:22:10 -0500;Update README.md

==

README.md
==================
ad27af0a;Alex Wiltschko;2018-12-10 19:17:52 -0500;Merge pull request #49 from google/nnet-typo
Update neural_network_and_data_loading.ipynb
==
==================
c169cc6c;Alex Wiltschko;2018-12-10 19:16:58 -0500;Update neural_network_and_data_loading.ipynb

==

notebooks/neural_network_and_data_loading.ipynb
==================
f4212d47;Peter Hawkins;2018-12-10 13:28:56 -0500;Merge pull request #46 from hawkinsp/master
Update XLA and reenable numpy tests that failed on Mac
==
==================
c0e24f18;Peter Hawkins;2018-12-10 13:27:08 -0500;Update XLA to include Mac OS X fixes from https://github.com/tensorflow/tensorflow/commit/c07297759059a953351f1d5e531b6e6af878365c

==

build/WORKSPACE
==================
72b77b5b;Matthew Johnson;2018-12-10 08:55:17 -0800;fix typo in notebook text (closes #22)

==

notebooks/gufuncs.ipynb
==================
0f8710a6;Matthew Johnson;2018-12-10 07:13:51 -0800;add another link to Autograd in the readme

==

README.md
==================
55bb2e1d;Matthew Johnson;2018-12-10 06:43:22 -0800;Merge pull request #41 from hawkinsp/master
Fix support for arrays with size-0 dimensions.
==
==================
6776bcf7;Peter Hawkins;2018-12-10 09:33:12 -0500;Re-enable tests that were accidentally commented out.

==

tests/lax_numpy_test.py
==================
5a82601f;Peter Hawkins;2018-12-10 09:21:25 -0500;Merge pull request #42 from hawkinsp/buildopts
Set --distinct_host_configuration=false in the bazel options.
==
==================
5510ceaf;Peter Hawkins;2018-12-10 09:18:49 -0500;Set --distinct_host_configuration=false in the bazel options.
This makes initial builds cheaper (since we don't need to build some files in separate host and target configurations) but may make switching between build configurations more expensive (since we can share less work). The build script should optimize for the former.

==

build/build.py
==================
38927153;Peter Hawkins;2018-12-10 08:42:11 -0500;Fix support for arrays with size-0 dimensions.
* Fix broadcasting rules to support size-0 dimensions.
* Add tests for size-0 dimensions. This required extending the test harness to support testing shapes that aren't necessarily broadcast compatible.
* Fix test utils to support size-0 dimensions.

==

jax/lax.py
jax/numpy/lax_numpy.py
jax/test_util.py
tests/lax_numpy_test.py
==================
38c7a072;Matthew Johnson;2018-12-09 10:54:37 -0800;download mnist example data w/ six.moves.request fixes #28

==

examples/datasets.py
==================
269de601;Roy Frostig;2018-12-09 13:16:43 -0500;Merge pull request #38 from craffel/master
Require protobuf 3.6.0 or later
==
==================
2bbc046d;Colin;2018-12-09 10:05:39 -0800;Require protobuf 3.6.0 or later

==

build/setup.py
setup.py
==================
b907bcd5;Matthew Johnson;2018-12-09 08:56:54 -0800;improve jaxlib wheel building script

==

build/build_jaxlib_wheels.sh
jax/api.py
==================
f50996df;Matthew Johnson;2018-12-09 07:46:24 -0800;update gufunc notebook w/ dot_general batch rule

==

notebooks/gufuncs.ipynb
==================
4d6e7c89;Matthew Johnson;2018-12-09 07:45:12 -0800;bump version number for pypi

==

setup.py
==================
499ea19e;Matthew Johnson;2018-12-09 07:27:03 -0800;fix 'unreachable' bug in dot batching rule

==

jax/lax.py
tests/batching_test.py
==================
1469e823;Matthew Johnson;2018-12-09 06:53:22 -0800;bump version number for pypi

==

setup.py
==================
af689139;Matthew Johnson;2018-12-09 09:48:30 -0500;Merge pull request #36 from google/dot-general-batching-rule
add dot_general batching rule
==
==================
b7f6adaa;Matthew Johnson;2018-12-09 06:47:38 -0800;add dot_general batching rule

==

jax/lax.py
tests/batching_test.py
==================
5a604d5b;Matthew Johnson;2018-12-09 01:24:38 -0500;add more contributors to readme

==

README.md
==================
ae4d06f5;Peter Hawkins;2018-12-08 18:23:59 -0500;Merge pull request #34 from brettkoonce/minor_sp
minor spelling tweaks
==
==================
70ef70b9;Brett Koonce;2018-12-08 15:18:33 -0800;minor spelling tweaks

==

jax/numpy/lax_numpy.py
==================
f2f66136;Peter Hawkins;2018-12-08 13:56:51 -0500;Merge pull request #25 from google/nnet-notebook
Bare-bones neural network and data loading example notebook
==
==================
f5e6e88b;Alex Wiltschko;2018-12-08 12:44:10 -0500;Delete unused code in data loader, new architecture, some cleanups

==

notebooks/neural_network_and_data_loading.ipynb
==================
ae36037a;Matthew Johnson;2018-12-08 09:35:24 -0800;add ad_util.zeros_like translation rule PAIR=hawkinsp

==

jax/interpreters/xla.py
==================
e22f722e;Alex Wiltschko;2018-12-08 12:35:06 -0500;Fixes for neural network notebook under review

==

notebooks/neural_network_and_data_loading.ipynb
==================
9f61472a;Dougal Maclaurin;2018-12-08 11:20:40 -0500;Update README.md

==

README.md
==================
0cd84efa;Dougal Maclaurin;2018-12-08 11:19:03 -0500;Small changes to readme

==

README.md
==================
31d9443e;Matthew Johnson;2018-12-08 09:33:52 -0500;Merge pull request #26 from google/concatenate-transpose-rule-bug
fix symbolic zero handling in concat transpose
==
==================
13d8cb1e;Alex Wiltschko;2018-12-08 09:23:29 -0500;Bare-bones neural network and data loading example notebook

==

notebooks/neural_network_and_data_loading.ipynb
==================
10b61e08;Matthew Johnson;2018-12-08 06:01:25 -0800;fix symbolic zero handling in concat transpose

==

jax/lax.py
==================
ffd69517;Matthew Johnson;2018-12-08 08:05:53 -0500;Merge pull request #24 from google/center-logo
attempt to center-justify the jax logo in readme
==
==================
9d484b6d;Matthew Johnson;2018-12-08 08:05:16 -0500;attempt to center-justify the jax logo in readme

==

README.md
==================
9e739fbf;Matthew Johnson;2018-12-08 07:48:52 -0500;Merge pull request #23 from dsblank/patch-1
Typo, Python parens
==
==================
13163ffe;Doug Blank;2018-12-08 03:40:33 -0500;Typo, Python parens

==

README.md
==================
d2b0e30d;Matthew Johnson;2018-12-08 00:56:25 -0500;update readme (accidentally lost a name!)

==

README.md
==================
30124b6d;Dougal Maclaurin;2018-12-08 00:03:34 -0500;Added jit transformations to generated functions. Fixed bug in comparing numpy arrays for equality.

==

jax/util.py
tests/generated_fun_test.py
==================
0900db35;Matthew Johnson;2018-12-07 21:51:36 -0500;Add ToC to readme

==

README.md
==================
0528192b;Peter Hawkins;2018-12-07 21:09:09 -0500;Remove Mac OS X from the list of CUDA pip packages
We haven't created this pip package.
==

README.md
==================
70604f43;Matthew Johnson;2018-12-07 15:05:20 -0800;add scipy.stats to setup.py (should use find_packages())

==

setup.py
==================
55160196;Stephan Hoyer;2018-12-07 12:56:42 -0800;Fix link in gufuncs notebook

==

notebooks/gufuncs.ipynb
==================
69b0c229;Dougal Maclaurin;2018-12-07 16:21:01 -0500;Merge pull request #21 from MikeInnes/patch-1
Typo
==
==================
0505ce29;Mike J Innes;2018-12-07 16:16:37 -0500;typo

==

README.md
==================
5bbf3ee0;Matthew Johnson;2018-12-07 15:52:01 -0500;Merge pull request #19 from shoyer/gufuncs-example
Notebook showing how to write gufuncs with vmap
==
==================
89ec22e5;Stephan Hoyer;2018-12-07 12:28:41 -0800;Fixes per review

==

notebooks/gufuncs.ipynb
==================
d6e2dce9;Stephan Hoyer;2018-12-07 12:07:29 -0800;Notebook showing how to write gufuncs with vmap

==

notebooks/gufuncs.ipynb
==================
7be7d424;Dougal Maclaurin;2018-12-07 14:46:09 -0500;Fixed json bug

==

notebooks/quickstart.ipynb
==================
7523975c;Dougal Maclaurin;2018-12-07 14:44:40 -0500;Updated installs in notebook

==

notebooks/quickstart.ipynb
==================
13ed0222;Matthew Johnson;2018-12-07 14:25:41 -0500;Merge pull request #18 from google/readme
Populate readme
==
==================
16658b97;Matthew Johnson;2018-12-07 11:23:40 -0800;fix typo in wheel path

==

README.md
==================
59fc69e0;Dougal Maclaurin;2018-12-07 11:38:53 -0500;Small edits to readme

==

README.md
==================
838d9e12;Dougal Maclaurin;2018-12-07 10:48:48 -0500;Removed go/jax link and updated wording

==

README.md
==================
948a8db0;Matthew Johnson;2018-12-07 07:39:16 -0800;populate readme with ill content

==

README.md
==================
ee1728c2;Matthew Johnson;2018-12-07 11:15:50 -0800;bump version for pypi

==

setup.py
==================
e5d89ce9;Roy Frostig;2018-12-07 10:51:02 -0800;update call to choice

==

tests/generated_fun_test.py
==================
6c2cdfc3;Roy Frostig;2018-12-07 10:45:48 -0800;py3 compatibility: list of keys

==

tests/generated_fun_test.py
==================
fe0a2693;Roy Frostig;2018-12-07 10:40:21 -0800;use custom choice function in generated tests

==

tests/generated_fun_test.py
==================
479f256a;Roy Frostig;2018-12-07 10:22:15 -0800;py3 iterator compatibility

==

tests/generated_fun_test.py
==================
db748a04;Roy Frostig;2018-12-07 10:00:14 -0800;py3 compatibility fix

==

jax/test_util.py
==================
6fb8a8bc;Roy Frostig;2018-12-07 09:42:48 -0800;use print as function

==

tests/generated_fun_test.py
==================
8ca66c55;Alex Wiltschko;2018-12-07 12:14:36 -0500;Merge pull request #17 from hawkinsp/master
Implement np.repeat for scalar repeats.
==
==================
2e24f91a;Dougal Maclaurin;2018-12-07 12:06:18 -0500;Added license header

==

build/jaxlib/__init__.py
==================
95eb58f4;Peter Hawkins;2018-12-07 11:29:03 -0500;Implement np.repeat() for scalar repeats.

==

jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
a9640b3e;Matthew Johnson;2018-12-07 08:26:34 -0800;tweak wheel names in build script

==

build/build_jaxlib_wheels.sh
==================
7093c474;Matthew Johnson;2018-12-07 08:19:30 -0800;revive WORKSPACE file

==

build/WORKSPACE
build/build_jaxlib_wheels.sh
==================
bd8bef68;Matthew Johnson;2018-12-07 08:15:40 -0800;Merge remote-tracking branch 'origin/master'

==
==================
8a90d37d;Matthew Johnson;2018-12-07 08:15:13 -0800;update wheel building dockerfile

==

build/Dockerfile
==================
df78c715;Roy Frostig;2018-12-07 11:15:02 -0500;Merge pull request #8 from google/quickish-check
Quickish check
==
==================
762abcf2;Matthew Johnson;2018-12-07 08:14:24 -0800;update wheel builder docker entrypoint script

==

build/build_wheel_docker_entrypoint.sh
==================
d89c7c24;Dougal Maclaurin;2018-12-07 11:13:41 -0500;Merge branch 'master' into quickish-check

==
==================
91f8247d;Matthew Johnson;2018-12-07 08:12:33 -0800;update wheel name

==

build/build_jaxlib_wheels.sh
==================
18201fab;Matthew Johnson;2018-12-07 08:09:51 -0800;bump version number for jaxlib

==

build/setup.py
==================
c8348c00;Matthew Johnson;2018-12-07 10:36:41 -0500;Merge pull request #16 from google/binary-distros
Add wheel-building scripts
==
==================
f6d31ad5;Matthew Johnson;2018-12-07 07:35:32 -0800;update dockerfile entrypoint script git hash

==

build/Dockerfile
==================
18920337;Matthew Johnson;2018-12-07 06:39:19 -0800;add eye in lax_numpy

==

jax/numpy/lax_numpy.py
==================
3efe3691;Matthew Johnson;2018-12-07 06:39:01 -0800;add simplified lifecycle image

==

images/lifecycle.png
==================
9fd12011;Matthew Johnson;2018-12-07 06:20:00 -0800;add jaxlib wheel building script

==

build/build_wheels.sh
==================
d4f32dff;Matthew Johnson;2018-12-07 04:59:03 -0800;update build script for split packages

==

build/Dockerfile
build/build.py
build/build_wheel_docker_entrypoint.sh
==================
e93f682d;Matthew Johnson;2018-12-06 20:04:05 -0800;check out build files

==

build/Dockerfile
build/build_wheel_docker_entrypoint.sh
==================
e02e5ae4;Dougal Maclaurin;2018-12-07 09:56:08 -0500;Merge pull request #15 from google/rename-vmap-arguments
rename in_bdims, out_bdims --> in_axes, out_axes
==
==================
50624bd9;Matthew Johnson;2018-12-07 06:53:29 -0800;rename in_bdims, out_bdims --> in_axes, out_axes

==

jax/api.py
tests/batching_test.py
==================
d9a069da;Peter Hawkins;2018-12-07 09:36:29 -0500;Merge pull request #14 from hawkinsp/master
Add copyright notice to quickstart notebook.
==
==================
d673d781;Peter Hawkins;2018-12-07 09:34:52 -0500;Add copyright notice to quickstart notebook.

==

notebooks/quickstart.ipynb
==================
ae1a3fc0;Alex Wiltschko;2018-12-07 07:59:22 -0500;Merge pull request #13 from google/logo
Fixing logo size so resize is not required
==
==================
6f2b42bf;Alex Wiltschko;2018-12-07 07:58:54 -0500;Fixing logo size so resize is not required

==

images/jax_logo_250px.png
notebooks/quickstart.ipynb
==================
38577629;Peter Hawkins;2018-12-06 23:08:00 -0500;Merge pull request #12 from hawkinsp/master
Update the quickstart notebook.
==
==================
80689dcc;Peter Hawkins;2018-12-06 23:00:08 -0500;Update the quickstart notebook.

==

notebooks/quickstart.ipynb
==================
ae7df43e;Dougal Maclaurin;2018-12-06 22:45:49 -0500;Fixed bug due to input_shape kwarg not being modified in batching rule for reducers. Fixes b/120595235

==

jax/interpreters/batching.py
jax/lax.py
==================
61aa47a1;Dougal Maclaurin;2018-12-06 21:57:08 -0500;Fixed paren in parameterized test specification

==

tests/lax_numpy_test.py
==================
c8f93511;Matthew Johnson;2018-12-06 18:51:57 -0800;add 500px jax logo

==

images/jax_logo_500px.png
==================
1627827a;Dougal Maclaurin;2018-12-06 21:47:47 -0500;Fixed a couple of bugs

==

jax/lax.py
jax/test_util.py
tests/api_test.py
tests/core_test.py
==================
febfc84f;Matthew Johnson;2018-12-06 18:46:35 -0800;add jax logo png

==

images/jax_logo.png
==================
bbc92ce6;Matthew Johnson;2018-12-06 21:35:03 -0500;Split out `jax` and `jaxlib` packages (#11)
factor out 'jaxlib' as separate package

==

.gitignore
build/WORKSPACE
build/build.py
build/install_xla_in_source_tree.sh
build/jaxlib/__init__.py
build/setup.py
jax/lib/xla_bridge.py
jax/numpy/lax_numpy.py
jax/random.py
setup.py
==================
c0360033;Alex Wiltschko;2018-12-06 21:19:45 -0500;Merge pull request #9 from google/quickstart-notebook
Adding quickstart notebook, and corresponding gitignore rules
==
==================
8a3241e3;Dougal Maclaurin;2018-12-06 19:02:28 -0500;Merge branch 'master' into quickish-check

==
==================
494c2dba;Dougal Maclaurin;2018-12-06 18:58:26 -0500;Merge branch 'master' into quickish-check

==
==================
bb8899f6;Dougal Maclaurin;2018-12-06 18:37:59 -0500;Updated existing parameterized tests to subsample

==

tests/lapax_test.py
tests/lax_numpy_test.py
tests/lax_scipy_test.py
tests/lax_test.py
tests/random_test.py
==================
8b88027d;Dougal Maclaurin;2018-12-06 18:30:59 -0500;Number of test cases settable with command-line flag

==

jax/config.py
jax/test_util.py
tests/generated_fun_test.py
tests/lax_numpy_indexing_test.py
tests/stax_test.py
==================
e03af5df;Peter Hawkins;2018-12-06 18:20:23 -0500;Merge pull request #3 from cclauss/patch-2
Undefined name: from ..core import JaxTuple
==
==================
68f4a810;Peter Hawkins;2018-12-06 18:06:19 -0500;Merge pull request #2 from cclauss/patch-1
Explicit tuples are not valid function parameters in Python 3
==
==================
e01ba4d0;Peter Hawkins;2018-12-06 18:04:53 -0500;Merge pull request #4 from cclauss/patch-3
Undefined name: from six.moves import xrange
==
==================
ebc6cd1e;Dougal Maclaurin;2018-12-06 18:02:43 -0500;Step through sizes in test case generation

==

jax/test_util.py
tests/generated_fun_test.py
==================
0541bb76;Peter Hawkins;2018-12-06 17:47:05 -0500;Merge pull request #10 from hawkinsp/master
[JAX] Change semantics of dtype promotion to just call numpy.result_type.
==
==================
bfd58854;Peter Hawkins;2018-12-06 17:45:11 -0500;Fix test case to test for x64 mode during test rather than init time.

==

tests/lax_numpy_test.py
==================
3dbf41f3;Dougal Maclaurin;2018-12-06 17:31:52 -0500;Generated function tests working with bazel

==

jax/test_util.py
tests/generated_fun_test.py
==================
c3374a9d;Dougal Maclaurin;2018-12-06 17:04:00 -0500;Added build rule for generated_fun_test (formerly quickish_check)

==

tests/BUILD
tests/generated_fun_test.py
==================
29113dd6;Dougal Maclaurin;2018-12-06 17:00:47 -0500;Made tests runnable with bazel

==

WORKSPACE
tests/BUILD
==================
c1b9eb19;Peter Hawkins;2018-12-06 13:25:42 -0500;[JAX] Change semantics of dtype promotion to just call numpy.result_type.
* Enable tests for numpy scalars in lax_numpy_test.py.
* Fix invalid promotion in random.py.
* Split tests for bitwise ops into their own test case and test mixed signedness.
* Add complex64 to the set of types supported by abstractify.

==

jax/abstract_arrays.py
jax/numpy/lax_numpy.py
jax/random.py
tests/lax_numpy_test.py
==================
b4344a07;Matthew Johnson;2018-12-06 07:13:27 -0800;fix typo in WORKSPACE

==

WORKSPACE
==================
90afb3a1;Matthew Johnson;2018-12-06 07:03:28 -0800;update tensorflow release

==

WORKSPACE
==================
678bcee7;Dougal Maclaurin;2018-12-06 09:51:49 -0500;Merge branch 'quickish-check' of github.com:google/jax into quickish-check

==
==================
f2795cbd;Peter Hawkins;2018-12-06 06:21:38 -0800;[JAX] Add a NUMPY_SCALAR_SHAPE constant shape to test_utils.py to allow tests for both numpy scalars as distinct from 0D ndarrays.
Fix mishandling of scalars when passed to np.reshape().

PiperOrigin-RevId: 224326107

==

jax/numpy/lax_numpy.py
jax/test_util.py
tests/lax_numpy_test.py
==================
47ade413;Alex Wiltschko;2018-12-06 08:53:44 -0500;Adding quickstart notebook, and corresponding gitignore rules

==

.gitignore
notebooks/quickstart.ipynb
==================
72775517;Dougal Maclaurin;2018-12-05 11:21:58 -0500;Added license header

==

tests/quickercheck.py
==================
d7b72008;Dougal;2018-12-05 10:01:14 -0500;Error message for unimplemented numpy functions

==

jax/numpy/lax_numpy.py
==================
2e4ff400;Dougal Maclaurin;2018-12-03 22:24:46 -0500;Fixed bug in vjp with constant-zero tangent outputs

==

jax/api.py
jax/interpreters/ad.py
tests/quickercheck.py
==================
2f44eba0;Dougal Maclaurin;2018-12-03 09:52:19 -0500;Made some subset of vjp/jvp inputs static in quickercheck. Exposing bugs.

==

tests/quickercheck.py
==================
f1d7ea89;Dougal Maclaurin;2018-11-30 17:14:27 -0500;Added reverse-mode checks

==

tests/quickercheck.py
==================
6fcee12c;Dougal Maclaurin;2018-11-30 16:41:06 -0500;Added forward derivative checks

==

tests/quickercheck.py
==================
709cfe90;Dougal Maclaurin;2018-11-30 16:17:54 -0500;Set default TF log level to "1" to avoid reporting things like CPU frequency at import time. Also import jax.numpy in __init__.py because it has side effects that set up the infix operator overloading.

==

jax/__init__.py
==================
307d1955;Dougal Maclaurin;2018-11-30 16:16:28 -0500;Wrapped static args to jit to be hashed on id. This is conservative but simple and cheap.

==

jax/api.py
jax/util.py
==================
5bb8f87e;Dougal Maclaurin;2018-11-30 15:22:02 -0500;First pass at a quickcheck-style property-based tester to test invariants of jit/grad/vmap etc on random functions

==

tests/quickercheck.py
==================
2597300c;Matthew Johnson;2018-12-05 08:22:27 -0800;source sync
PiperOrigin-RevId: 224157599

==

build.py
jax/interpreters/xla.py
jax/lax.py
jax/numpy/lax_numpy.py
tests/lax_numpy_test.py
==================
3b049e38;Matthew Johnson;2018-12-03 21:23:40 -0800;[XLA] separate out an Execute from ExecutePerReplica [JAX] reduce the creation of XLA Shape protos on every call (which is slow)
PiperOrigin-RevId: 223915944

==

jax/interpreters/xla.py
==================
77db9bd5;Peter Hawkins;2018-12-03 14:32:50 -0800;[JAX] Update XLA in JAX workspace to include optimized computation launch implementation.
PiperOrigin-RevId: 223863753

==

WORKSPACE
==================
ac6cee21;Dougal Maclaurin;2018-12-05 11:21:58 -0500;Added license header

==

tests/quickercheck.py
==================
585f011d;Dougal;2018-12-05 10:01:14 -0500;Error message for unimplemented numpy functions

==

jax/numpy/lax_numpy.py
==================
f5232aae;Dougal Maclaurin;2018-12-03 22:24:46 -0500;Fixed bug in vjp with constant-zero tangent outputs

==

jax/api.py
jax/interpreters/ad.py
tests/quickercheck.py
==================
99023a24;Dougal Maclaurin;2018-12-03 09:52:19 -0500;Made some subset of vjp/jvp inputs static in quickercheck. Exposing bugs.

==

tests/quickercheck.py
==================
f5b051b4;Roy Frostig;2018-12-01 09:53:57 -0800;Double gpu test shards
PiperOrigin-RevId: 223647959

==

tests/BUILD
==================
20878c76;Roy Frostig;2018-11-30 09:53:25 -0800;source sync
PiperOrigin-RevId: 223530503

==

tests/BUILD
==================
a5df01ab;Dougal Maclaurin;2018-11-30 17:14:27 -0500;Added reverse-mode checks

==

tests/quickercheck.py
==================
4715ce52;Dougal Maclaurin;2018-11-30 16:41:06 -0500;Added forward derivative checks

==

tests/quickercheck.py
==================
5d5a6bc7;Dougal Maclaurin;2018-11-30 16:17:54 -0500;Set default TF log level to "1" to avoid reporting things like CPU frequency at import time. Also import jax.numpy in __init__.py because it has side effects that set up the infix operator overloading.

==

jax/__init__.py
==================
0411beb3;Dougal Maclaurin;2018-11-30 16:16:28 -0500;Wrapped static args to jit to be hashed on id. This is conservative but simple and cheap.

==

jax/api.py
jax/util.py
==================
aab9faa4;Dougal Maclaurin;2018-11-30 15:22:02 -0500;First pass at a quickcheck-style property-based tester to test invariants of jit/grad/vmap etc on random functions

==

tests/quickercheck.py
==================
2df36f75;Dougal Maclaurin;2018-11-29 12:30:34 -0800;Made a shim to handle configuration without having absl parse command-line flags.
PiperOrigin-RevId: 223391288

==

examples/mnist_classifier.py
examples/mnist_classifier_fromscratch.py
examples/mnist_vae.py
examples/resnet50.py
jax/config.py
jax/interpreters/xla.py
jax/lib/xla_bridge.py
jax/test_util.py
tests/api_test.py
tests/batching_test.py
tests/core_test.py
tests/lapax_test.py
tests/lax_numpy_indexing_test.py
tests/lax_numpy_test.py
tests/lax_scipy_test.py
tests/lax_test.py
tests/minmax_test.py
tests/random_test.py
tests/stax_test.py
==================
1d2aaad6;Matthew Johnson;2018-11-28 17:17:52 -0800;fix handling of symbolic zeros for a few special primitives
PiperOrigin-RevId: 223264329

==

jax/lax.py
tests/lax_test.py
==================
aefd8f9e;Matthew Johnson;2018-11-27 17:16:29 -0800;add contributing.md
PiperOrigin-RevId: 223085949

==

CONTRIBUTING.md
==================
14844224;Roy Frostig;2018-11-27 16:46:45 -0800;source sync
PiperOrigin-RevId: 223081582

==

examples/resnet50.py
==================
0ea98501;Matthew Johnson;2018-11-27 16:40:21 -0800;source sync
PiperOrigin-RevId: 223080639

==

examples/resnet50.py
==================
93ac03ea;Peter Hawkins;2018-11-27 13:35:14 -0800;[JAX] Update TensorFlow release to https://github.com/tensorflow/tensorflow/commit/0b6ed4887ab1a65d2a0500ec8ebb03e221d8681b to pick up fixes to the XLA Mac OS X build.
PiperOrigin-RevId: 223048563

==

WORKSPACE
==================
ca2634ea;Dougal Maclaurin;2018-11-26 18:50:27 -0800;source sync
PiperOrigin-RevId: 222923229

==

jax/abstract_arrays.py
jax/interpreters/xla.py
jax/lax.py
jax/numpy/lax_numpy.py
jax/util.py
==================
599ea381;Peter Hawkins;2018-11-26 14:12:04 -0800;[JAX] Explicitly use /bin/bash in install_xla_in_source_tree.sh.
It turns out the script uses some bash-isms not supported by the /bin/sh (dash) shell on a Debian machine.

PiperOrigin-RevId: 222884583

==

build/install_xla_in_source_tree.sh
==================
f3513a7b;Peter Hawkins;2018-11-26 12:37:24 -0800;[JAX] Rewrite OSS build script.
Significant changes:
* Mac OS X support.
* build script is in Python, not shell.
* build configuration is passed via flags, not environment variables.
* build script configures TF itself, and does not require explicitly checking out the TF git repository and running its configure script. Changes the TF dependency in the Bazel workspace to be an http_archive(), rather than a local checkout of TF.
* rather than trying to guess the path for Bazel-generated XLA artifacts, use a sh_binary() to perform installation of the built artifacts in to the JAX source tree. Bazel's runfiles mechanism is the supported route to find build artifacts.
* downloads Bazel in Python and checks its SHA256 before running it, rather than running an untrusted binary from the internet.
* intentionally does not delete the Bazel cache or Bazel after building.

Example of new build interaction:

Building without CUDA on Mac or Linux:
$ cd jax
$ python3 build.py   (or python2 build.py if you want a Python 2 build)

     _   _    __  __
    | | / \   \ \/ /
 _  | |/ _ \   \  /
| |_| / ___ \  /  \
 \___/_/   \_\/_/\_\

Starting local Bazel server and connecting to it...
Bazel binary path: /Users/xyz/bin/bazel
Python binary path: /Library/Frameworks/Python.framework/Versions/3.7/bin/python3
CUDA enabled: no

Building XLA and installing it in the JAX source tree...
...

Example of building with CUDA enabled on Linux:
$ python3 build.py --enable_cuda --cudnn_path=/usr/lib/x86_64-linux-gnu/
... as before, except ...
CUDA enabled: yes
CUDA toolkit path: /usr/local/cuda
CUDNN library path: /usr/lib/x86_64-linux-gnu/
...

PiperOrigin-RevId: 222868835

==

WORKSPACE
build.py
build/BUILD
build/install_xla_in_source_tree.sh
jax/oss/build/build_jax.sh
==================
32677380;Sam Schoenholz;2018-11-26 12:30:01 -0800;source sync
PiperOrigin-RevId: 222867729

==

jax/lax.py
tests/batching_test.py
==================
c293f7c8;Matthew Johnson;2018-11-26 09:58:05 -0800;minor: add @jit to threefry hash function in random.py
PiperOrigin-RevId: 222841601

==

jax/random.py
==================
d318c688;Matthew Johnson;2018-11-26 07:35:50 -0800;source sync
PiperOrigin-RevId: 222822439

==

examples/mnist_classifier.py
examples/mnist_classifier_fromscratch.py
examples/mnist_vae.py
examples/resnet50.py
==================
6001fd21;Peter Hawkins;2018-11-26 05:36:02 -0800;[JAX] Python 3 fix: xla_client.initialize_platform_name() accepts a string, not bytes, so we shouldn't pass it bytes. (The previous Python 3 change was a bit overzealous and made both changes; apparently this path isn't tested by the tests because they pass an explicit --jax_xla_backend flag..)
PiperOrigin-RevId: 222810811

==

jax/lib/xla_bridge.py
==================
642046e2;Roy Frostig;2018-11-25 18:53:48 -0800;Bridge to the XRT backend.
PiperOrigin-RevId: 222763810

==

jax/interpreters/xla.py
jax/lib/xla_bridge.py
jax/test_util.py
tests/lax_scipy_test.py
tests/lax_test.py
==================
dbf3c606;Matthew Johnson;2018-11-21 22:49:34 -0800;source sync
PiperOrigin-RevId: 222500675

==

examples/mnist_classifier.py
examples/mnist_classifier_fromscratch.py
examples/mnist_vae.py
examples/resnet50.py
jax/interpreters/batching.py
jax/oss/build/build_jax.sh
==================
c3c64138;cclauss;2018-11-22 17:50:50 +0100;Undefined name: from six.moves import xrange
[flake8](http://flake8.pycqa.org) testing of https://github.com/google/jax on Python 3.7.1

$ __flake8 . --count --select=E901,E999,F821,F822,F823 --show-source --statistics__
```
./examples/resnet50.py:124:12: F821 undefined name 'xrange'
  for i in xrange(num_steps):
           ^
1    F821 undefined name 'xrange'
1
```
==

examples/resnet50.py
==================
33292ff9;cclauss;2018-11-22 17:38:07 +0100;Undefined name: from ..core import JaxTuple
[flake8](http://flake8.pycqa.org) testing of https://github.com/google/jax on Python 3.7.1

$ __flake8 . --count --select=E901,E999,F821,F822,F823 --show-source --statistics__
```
./jax/interpreters/ad.py:189:20: F821 undefined name 'JaxTuple'
        return xt, JaxTuple(map(zeros_like_jaxval, xt))
                   ^
./jax/interpreters/ad.py:196:16: F821 undefined name 'JaxTuple'
        return JaxTuple(map(zeros_like_jaxval, yt)), yt
               ^
2    F821 undefined name 'JaxTuple'
2
```
==

jax/interpreters/ad.py
==================
2b995217;cclauss;2018-11-22 17:29:47 +0100;Explicit tuples are not valid function parameters in Python 3
[flake8](http://flake8.pycqa.org) testing of https://github.com/google/jax on Python 3.7.1

$ __flake8 . --count --select=E901,E999,F821,F822,F823 --show-source --statistics__
```
./examples/mnist_vae.py:113:21: E999 SyntaxError: invalid syntax
    def body_fun(i, (rng, opt_state, images)):
                    ^
1     E999 SyntaxError: invalid syntax
1
```
==

examples/mnist_vae.py
==================
7a313bf6;Roy Frostig;2018-11-21 20:26:59 -0800;source sync fixups

==

examples/mnist_classifier.py
examples/mnist_classifier_fromscratch.py
examples/mnist_vae.py
examples/resnet50.py
==================
f1bb77da;Roy Frostig;2018-11-21 19:47:32 -0800;source sync
PiperOrigin-RevId: 222489712

==

README.md
==================
9101d66b;Matthew Johnson;2018-11-21 19:11:03 -0800;source sync
PiperOrigin-RevId: 222487460

==

jax/api.py
==================
98dd8775;Matthew Johnson;2018-11-21 18:35:19 -0800;source sync
PiperOrigin-RevId: 222484959

==

examples/BUILD
examples/interactive.py
==================
8317cc36;Matthew Johnson;2018-11-21 18:31:13 -0800;source sync
PiperOrigin-RevId: 222484671

==

examples/mnist_vae.py
jax/random.py
==================
3b3490f4;Matthew Johnson;2018-11-21 18:07:24 -0800;source sync
PiperOrigin-RevId: 222483357

==

jax/api.py
tests/api_test.py
==================
ab533736;Matthew Johnson;2018-11-21 15:42:53 -0800;source sync
PiperOrigin-RevId: 222470141

==

jax/tree_util.py
tests/core_test.py
==================
2ae9a2bc;Matthew Johnson;2018-11-21 14:31:25 -0800;source sync
PiperOrigin-RevId: 222461242

==

jax/core.py
jax/random.py
==================
6361b784;Peter Hawkins;2018-11-21 13:53:01 -0800;source sync
PiperOrigin-RevId: 222456068

==

tests/BUILD
==================
5e60639b;Peter Hawkins;2018-11-21 13:27:26 -0800;source sync
PiperOrigin-RevId: 222452709

==

jax/abstract_arrays.py
jax/ad_util.py
jax/api.py
jax/api_util.py
jax/core.py
jax/experimental/lapax.py
jax/interpreters/ad.py
jax/interpreters/batching.py
jax/interpreters/partial_eval.py
jax/interpreters/xla.py
jax/linear_util.py
jax/pprint_util.py
jax/test_util.py
jax/tree_util.py
jax/util.py
tests/batching_test.py
tests/lax_numpy_indexing_test.py
==================
e180f081;Peter Hawkins;2018-11-21 13:20:44 -0800;source sync
PiperOrigin-RevId: 222451919

==

jax/__init__.py
jax/abstract_arrays.py
jax/ad_util.py
jax/api_util.py
jax/core.py
jax/experimental/lapax.py
jax/experimental/minmax.py
jax/experimental/stax.py
jax/interpreters/ad.py
jax/interpreters/batching.py
jax/interpreters/partial_eval.py
jax/interpreters/xla.py
jax/lax.py
jax/lax_reference.py
jax/lib/xla_bridge.py
jax/linear_util.py
jax/numpy/lax_numpy.py
jax/pprint_util.py
jax/random.py
jax/test_util.py
jax/tree_util.py
jax/util.py
tests/api_test.py
tests/random_test.py
==================
fe4edf28;Peter Hawkins;2018-11-21 13:02:50 -0800;source sync
PiperOrigin-RevId: 222449830

==

jax/util.py
==================
323be694;Matthew Johnson;2018-11-21 12:50:47 -0800;source sync
PiperOrigin-RevId: 222448341

==

examples/BUILD
examples/mnist_classifier.py
examples/mnist_classifier_fromscratch.py
examples/mnist_vae.py
==================
e5b76f4f;Matthew Johnson;2018-11-20 18:51:38 -0800;source sync
PiperOrigin-RevId: 222340967

==

jax/lax.py
tests/lax_numpy_test.py
==================
065bb0ba;Peter Hawkins;2018-11-20 12:52:00 -0800;source sync
PiperOrigin-RevId: 222291726

==

jax/random.py
==================
a954389d;Roy Frostig;2018-11-19 22:00:18 -0800;source sync
PiperOrigin-RevId: 222189611

==

build/build_jax.sh
setup.py
==================
7f546b8c;Matthew Johnson;2018-11-19 18:47:06 -0800;source sync
PiperOrigin-RevId: 222175432

==

jax/experimental/minmax.py
tests/minmax_test.py
==================
25fb9b42;Matthew Johnson;2018-11-19 17:52:23 -0800;source sync
PiperOrigin-RevId: 222170151

==

examples/BUILD
examples/mnist_classifier.py
examples/resnet50.py
jax/BUILD
jax/experimental/stax.py
jax/scipy/stats.py
tests/BUILD
==================
a3619ca8;Roy Frostig;2018-11-19 15:50:10 -0800;source sync
PiperOrigin-RevId: 222153576

==

README.md
build/build_jax.sh
examples/BUILD
examples/interactive.py
examples/mnist_classifier.py
examples/mnist_classifier_fromscratch.py
examples/mnist_vae.py
examples/resnet50.py
jax/BUILD
jax/experimental/minmax.py
jax/experimental/stax.py
jax/scipy/stats.py
setup.py
tests/BUILD
tests/minmax_test.py
==================
51fc7130;Matthew Johnson;2018-11-21 12:10:31 -0800;remove absl from examples, fix import statements

==

examples/interactive.py
examples/mnist_classifier.py
examples/mnist_classifier_fromscratch.py
examples/mnist_vae.py
examples/resnet50.py
==================
7cf6babc;Roy Frostig;2018-11-21 08:57:25 -0800;Add two-pager link to README.

==

README.md
==================
b58ccb43;Matthew Johnson;2018-11-21 06:04:06 -0800;update readme with 'not a Google product'

==

README.md
==================
76346a87;Matthew Johnson;2018-11-21 06:00:31 -0800;add placeholder readme.md

==

README.md
==================
377322d3;Matthew Johnson;2018-11-19 21:58:15 -0800;remove stray file

==

jax/scipy/stats.py
==================
5e9fcbb6;Matthew Johnson;2018-11-19 21:31:39 -0800;source sync

==

examples/mnist_classifier.py
examples/resnet50.py
tests/minmax_test.py
==================
b2b1e8d7;Matthew Johnson;2018-11-19 21:24:30 -0800;source sync

==

jax/experimental/minmax.py
jax/experimental/stax.py
==================
50038c07;Matthew Johnson;2018-11-19 20:18:15 -0800;fix build file issues

==

build/build_jax.sh
examples/BUILD
jax/BUILD
setup.py
tests/BUILD
==================
fe11b19e;Roy Frostig;2018-11-19 15:44:16 -0800;source sync

==

jax/BUILD
==================
3731ca22;Roy Frostig;2018-11-19 15:08:46 -0800;source sync

==

jax/BUILD
==================
99f98f8e;Roy Frostig;2018-11-19 13:50:57 -0800;source sync

==

examples/BUILD
jax/BUILD
tests/BUILD
==================
24f7f35e;Roy Frostig;2018-11-19 13:33:37 -0800;source sync

==

jax/BUILD
==================
da2d53ad;Roy Frostig;2018-11-19 13:29:47 -0800;source sync

==

examples/BUILD
jax/BUILD
setup.py
tests/BUILD
==================
af62fdc1;Matthew Johnson;2018-11-19 08:46:25 -0800;update build script: bazel-0.19.2 and darwin

==

build/build_jax.sh
==================
77731679;Matthew Johnson;2018-11-19 08:30:37 -0800;add CPU-only build option

==

build/build_jax.sh
==================
46c6a917;Matthew Johnson;2018-11-19 07:43:23 -0800;sync updates

==

examples/interactive.py
examples/mnist_classifier.py
examples/mnist_classifier_fromscratch.py
examples/mnist_vae.py
examples/resnet50.py
jax/core.py
jax/experimental/minmax.py
jax/interpreters/partial_eval.py
jax/lax.py
jax/numpy/lax_numpy.py
jax/random.py
jax/scipy/misc.py
jax/scipy/special.py
jax/scipy/stats/__init__.py
jax/scipy/stats/norm.py
tests/batching_test.py
tests/lax_scipy_test.py
tests/minmax_test.py
tests/random_test.py
==================
ae641fda;Matthew Johnson;2018-11-18 15:57:00 -0800;add 'main' to build_jax dummy py_binary target

==

jax/BUILD
==================
d347d65c;Matthew Johnson;2018-11-18 15:54:13 -0800;add dummy binary build target, move WORKSPACE up

==

WORKSPACE
build/build_jax.sh
jax/BUILD
==================
c03e5e80;Matthew Johnson;2018-11-18 15:44:20 -0800;tweak build script

==

build/build_jax.sh
==================
9ae0f3a6;Matthew Johnson;2018-11-18 15:43:09 -0800;split BUILD file, move up license files

==

LICENSE
LICENSE_SHORT
examples/BUILD
jax/BUILD
tests/BUILD
tests/build_defs.bzl
==================
0dfa736e;Matthew Johnson;2018-11-18 15:28:22 -0800;make setup.py copy over .so files

==

setup.py
==================
1b836515;Matthew Johnson;2018-11-18 15:17:53 -0800;update gitignore

==

.gitignore
==================
9584c4f5;Matthew Johnson;2018-11-18 15:17:32 -0800;add setup.py

==

setup.py
==================
489dd1c8;Matthew Johnson;2018-11-18 15:15:47 -0800;move jax tests and examples to repo root

==

examples/__init__.py
examples/datasets.py
examples/interactive.py
examples/mnist_classifier.py
examples/mnist_vae.py
tests/api_test.py
tests/batching_test.py
tests/core_test.py
tests/lapax_test.py
tests/lax_numpy_indexing_test.py
tests/lax_numpy_test.py
tests/lax_scipy_test.py
tests/lax_test.py
tests/minmax_test.py
tests/random_test.py
tests/stax_test.py
==================
fd8d83dc;Matthew Johnson;2018-11-18 14:58:01 -0800;tweak build file

==

build/WORKSPACE
build/build_jax.sh
==================
f78c0519;Matthew Johnson;2018-11-18 14:24:09 -0800;add gpu build script

==

.gitignore
build/build_jax.sh
==================
1d902436;Matthew Johnson;2018-11-17 22:58:30 -0800;change xla_data_pb2 import

==

jax/lib/xla_bridge.py
==================
a30e858e;Matthew Johnson;2018-11-17 18:03:33 -0800;populating source tree

==

WORKSPACE
jax/BUILD
jax/LICENSE
jax/LICENSE_SHORT
jax/__init__.py
jax/abstract_arrays.py
jax/ad_util.py
jax/api.py
jax/api_util.py
jax/build_defs.bzl
jax/core.py
jax/examples/__init__.py
jax/examples/datasets.py
jax/examples/interactive.py
jax/examples/mnist_classifier.py
jax/examples/mnist_vae.py
jax/experimental/__init__.py
jax/experimental/lapax.py
jax/experimental/minmax.py
jax/experimental/stax.py
jax/interpreters/__init__.py
jax/interpreters/ad.py
jax/interpreters/batching.py
jax/interpreters/partial_eval.py
jax/interpreters/xla.py
jax/lax.py
jax/lax_reference.py
jax/lib/__init__.py
jax/lib/xla_bridge.py
jax/linear_util.py
jax/numpy/__init__.py
jax/numpy/lax_numpy.py
jax/pprint_util.py
jax/random.py
jax/scipy/__init__.py
jax/scipy/misc.py
jax/scipy/special.py
jax/scipy/stats.py
jax/test_util.py
jax/tests/api_test.py
jax/tests/batching_test.py
jax/tests/core_test.py
jax/tests/lapax_test.py
jax/tests/lax_numpy_indexing_test.py
jax/tests/lax_numpy_test.py
jax/tests/lax_scipy_test.py
jax/tests/lax_test.py
jax/tests/minmax_test.py
jax/tests/random_test.py
jax/tests/stax_test.py
jax/tree_util.py
jax/util.py
